<!doctype html>
<!--[if lt IE 7]>  <html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en-US" prefix="og: http://ogp.me/ns#"> <![endif]-->
<!--[if IE 7]>     <html class="no-js lt-ie9 lt-ie8" lang="en-US" prefix="og: http://ogp.me/ns#"> <![endif]-->
<!--[if IE 8]>     <html class="no-js lt-ie9" lang="en-US" prefix="og: http://ogp.me/ns#"> <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en-US" prefix="og: http://ogp.me/ns#">
 <head> 
  <meta charset="UTF-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
  <meta name="viewport" content="width=device-width"> 
  <link href="/wp-content/uploads/2016/03/favicon.png" type="image/png" rel="icon"> 
  <link rel="profile" href="http://gmpg.org/xfn/11"> 
  <link rel="pingback" href="https://stormpath.com/xmlrpc.php"> 
  <title>Choosing your Node.js User Authentication Strategy | Stormpath</title> 
  <meta name="description" content="Learn the common ways Node.js developers implement user authentication and management to determine what is best for you."> 
  <meta name="robots" content="noodp"> 
  <link rel="canonical" href="https://stormpath.com/blog/choosing-nodejs-authentication-strategy"> 
  <meta property="og:locale" content="en_US"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="Choosing your Node.js User Authentication Strategy | Stormpath"> 
  <meta property="og:description" content="Learn the common ways Node.js developers implement user authentication and management to determine what is best for you."> 
  <meta property="og:url" content="https://stormpath.com/blog/choosing-nodejs-authentication-strategy"> 
  <meta property="og:site_name" content="Stormpath User Identity API"> 
  <meta property="article:tag" content="Authentication"> 
  <meta property="article:tag" content="Identity Management"> 
  <meta property="article:section" content="Node"> 
  <meta property="article:published_time" content="2014-04-22T00:00:00-07:00"> 
  <meta property="article:modified_time" content="2016-10-31T12:57:39-07:00"> 
  <meta property="og:updated_time" content="2016-10-31T12:57:39-07:00"> 
  <meta property="og:image" content="https://stormpath.com/wp-content/uploads/2016/04/node-authentication-stormpath.png"> 
  <meta name="twitter:card" content="summary_large_image"> 
  <meta name="twitter:description" content="Learn the common ways Node.js developers implement user authentication and management to determine what is best for you."> 
  <meta name="twitter:title" content="Choosing your Node.js User Authentication Strategy | Stormpath"> 
  <meta name="twitter:image" content="https://stormpath.com/wp-content/uploads/2016/04/node-authentication-stormpath.png"> 
  <meta property="DC.date.issued" content="2014-04-22T00:00:00-07:00"> 
  <link rel="dns-prefetch" href="//s0.wp.com"> 
  <link rel="dns-prefetch" href="//s.w.org"> 
  <link rel="alternate" type="application/rss+xml" title="Stormpath User Identity API » Feed" href="https://stormpath.com/feed"> 
  <link rel="alternate" type="application/rss+xml" title="Stormpath User Identity API » Comments Feed" href="https://stormpath.com/comments/feed"> 
  <link rel="alternate" type="application/rss+xml" title="Stormpath User Identity API » Choosing your Node.js Authentication Strategy Comments Feed" href="https://stormpath.com/blog/choosing-nodejs-authentication-strategy/feed"> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/stormpath.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.8.1"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,56826,8203,55356,56819),0,0),c=j.toDataURL(),b===c&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55358,56794,8205,9794,65039),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55358,56794,8203,9794,65039),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="stylesheet" id="contact-form-7-css" href="https://stormpath.com/wp-content/plugins/contact-form-7/includes/css/styles.css?ver=4.7" type="text/css" media="all"> 
  <link rel="stylesheet" id="stormpath-style-css" href="https://stormpath.com/wp-content/themes/stormpath/style.css?ver=4.8.1" type="text/css" media="all"> 
  <link rel="stylesheet" id="jetpack_css-css" href="https://stormpath.com/wp-content/plugins/jetpack/css/jetpack.css?ver=4.7.1" type="text/css" media="all"> 
  <script type="text/javascript" src="https://stormpath.com/wp-includes/js/jquery/jquery.js?ver=1.12.4"></script> 
  <script type="text/javascript" src="https://stormpath.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var related_posts_js_options = {"post_heading":"h4"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://stormpath.com/wp-content/plugins/jetpack/modules/related-posts/related-posts.js?ver=20150408"></script> 
  <link rel="https://api.w.org/" href="https://stormpath.com/wp-json/"> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://stormpath.com/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://stormpath.com/wp-includes/wlwmanifest.xml"> 
  <link rel="shortlink" href="https://stormpath.com/?p=2622"> 
  <link rel="alternate" type="application/json+oembed" href="https://stormpath.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fstormpath.com%2Fblog%2Fchoosing-nodejs-authentication-strategy"> 
  <link rel="alternate" type="text/xml+oembed" href="https://stormpath.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fstormpath.com%2Fblog%2Fchoosing-nodejs-authentication-strategy&amp;format=xml"> 
  <script>
!function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?
n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;
n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;
t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,
document,'script','https://connect.facebook.net/en_US/fbevents.js');

fbq('init', '986262161469311');
fbq('track', "PageView");</script> 
  <noscript>
   &lt;img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=986262161469311&amp;amp;ev=PageView&amp;amp;noscript=1"&gt;
  </noscript> 
  <script src="https://cdn.optimizely.com/js/225847041.js"></script> 
  <style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style> 
  <meta name="generator" content="Powered by Visual Composer - drag and drop page builder for WordPress."> 
  <!--[if lte IE 9]><link rel="stylesheet" type="text/css" href="https://stormpath.com/wp-content/plugins/js_composer/assets/css/vc_lte_ie9.min.css" media="screen"><![endif]-->
  <!--[if IE  8]><link rel="stylesheet" type="text/css" href="https://stormpath.com/wp-content/plugins/js_composer/assets/css/vc-ie8.min.css" media="screen"><![endif]-->
  <noscript>
   <style type="text/css"> .wpb_animate_when_almost_visible { opacity: 1; }</style>
  </noscript>
 </head> 
 <body id="blog" class="post-template-default single single-post postid-2622 single-format-standard stretched wpb-js-composer js-comp-ver-4.11.2.1 vc_responsive"> 
  <!--[if lt IE 8]>
<p class="chromeframe">You are using an <strong>outdated</strong> browser. Please "browsehappy.com" upgrade your browser or "www.google.com/chromeframe/?redirect=true" activate Google Chrome Frame to improve your experience.</p>
<![endif]--> 
  <div id="wrapper" class="clearfix"> 
   <header class="main-navbar"> 
    <nav class="navbar navbar-default navbar-fixed-top" id="main-nav-menu"> 
     <div class="container main-navbar-container"> 
      <div class="navbar-header-container"> 
       <div class="navbar-header"> 
        <a href="https://stormpath.com" class="standard-logo main-nav-logo" data-dark-logo="http://stormpath.com/wp-content/uploads/2017/08/logos.png"><img src="https://stormpath.com/wp-content/uploads/2017/08/logos.png" alt="Stormpath Logo"></a> 
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#main-navbar-collapsable" aria-expanded="false"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
       </div> 
      </div> 
      <style>
              .global-msg {
                  color: #bbb;
                  text-align: right;
                  margin-top: 18px;
                  padding: 0px;
              }
          </style> 
      <div class="collapse navbar-collapse" id="main-navbar-collapsable"> 
       <ul id="menu-menu-1" class="nav navbar-nav main-navbar__links">
        <li id="menu-item-5143" class="menu-item menu-item-type-post_type menu-item-object-page current_page_parent menu-item-5143"><a class="main-navbar__link" href="https://stormpath.com/blog">Blog</a></li> 
       </ul> 
       <div class="global-msg visible-lg-block">
        <p>The Stormpath API shut down on August 17, 2017. Thank you to all the developers who have used Stormpath.</p> 
       </div> 
      </div> 
     </div> 
    </nav> 
   </header> 
   <div id="content" class="site-content"> 
    <section id="content"> 
     <div class="content-wrap nopadding"> 
      <div class="blog_header nopadding"> 
       <div class="container blog_header_rule nopadding"> 
        <h1 class="entry-title col-md-8 col-sm-12 col-xs-12 nopadding">Choosing your Node.js Authentication Strategy</h1> 
       </div> 
      </div> 
      <div class="container clearfix nopadding"> 
       <main id="blog-content" class="site-main" role="main"> 
        <div class="col-md-8 col-sm-12 col-xs-12 nobottommargin nopadding clearfix"> 
         <article id="post-2622" class="post-2622 post type-post status-publish format-standard hentry category-node tag-authentication tag-identity-management" role="article"> 
          <div class="post-meta"> 
           <div class="author_avatar"> 
            <img alt src="https://secure.gravatar.com/avatar/a24a864a635856c5c1aad4ad124a9a1e?s=96&amp;d=mm&amp;r=g" srcset="https://secure.gravatar.com/avatar/a24a864a635856c5c1aad4ad124a9a1e?s=192&amp;d=mm&amp;r=g 2x" class="avatar avatar-96 photo" height="96" width="96"> 
           </div> 
           <p class="author-and-date"> by Tom Abbott <span class="dividers">|</span> April 22, 2014 <span class="dividers">|</span> </p> 
           <ul class="post-categories"> 
            <li><a href="https://stormpath.com/blog/category/node" rel="category tag">Node</a></li>
           </ul> 
          </div> 
          <div class="entry-content"> 
           <p><strong>Update 5/11/2016:&nbsp;</strong>Developing in Node.js? Check out some of our Greatest Hits:</p> 
           <ul> 
            <li><a href="https://stormpath.com/blog/angular-node-15-minutes">A 15-Minute App Tutorial for AngularJS + Node.js + Stormpath</a>,</li> 
            <li><a href="https://stormpath.com/blog/everything-you-ever-wanted-to-know-about-node-dot-js-sessions">Everything you ever wanted to know about sessions in Node but were afraid to ask</a>, and</li> 
            <li><a href="https://stormpath.com/blog/build-nodejs-express-stormpath-app">A Simple Web App with Node.js, Express, Bootstrap, and Stormpath</a>.</li> 
           </ul> 
           <p>Also, dont miss <a href="https://github.com/jwtk/njwt">nJWT</a>,&nbsp;the cleanest JSON Web Token (JWT) library developed by Stormpath for Node.js developers!</p> 
           <p><img class="center" title="Node.js Authentication" src="https://stormpath.com/wp-content/uploads/2016/04/node-authentication-stormpath.png" alt="Nodejs Auth"></p> 
           <p>Node is blowing up! Ive been working and playing with Node since 2010 and in that time Ive seen it go from a tiny community of people hacking side projects to a full-fledged and legit movement of modern developers building very real, very important, and very large applications. A whole ecosystem of solutions has sprung up to help Node developers, and that ecosystem is rapidly evolving. But its increasingly hard to figure out what solutions are best for you because of all the noise in a Google search or in <code>npm</code>.</p> 
           <p>User authentication and management, in particular, is a difficult and shifting landscape. And yet, when building a real application in Node, it is one of the first components you need to figure out. This guide aims to give you a complete lay of the land for user management and authentication in node.</p> 
           <p><span id="more-2622"></span></p> 
           <h3 id="what-is-available-in-node">What is available in Node?<a href="#what-is-available-in-node" class="heading-link"><i class="stp-icons stp-icon-link2"></i></a></h3> 
           <p>Node today has several different paths to build user management. In no particular order there are:</p> 
           <ul> 
            <li>Passport.js / Everyauth</li> 
            <li>Your Own Database and a Hashing Algorithm</li> 
            <li>User Management as a Service</li> 
           </ul> 
           <h3 id="passport-js-everyauth">Passport.js / Everyauth<a href="#passport-js-everyauth" class="heading-link"><i class="stp-icons stp-icon-link2"></i></a></h3> 
           <p><a href="https://docs.stormpath.com/nodejs/passport/">PassportJS</a> and <a href="https://stormpath.com/blog/making-expressjs-authentication-fun-again">Everyauth</a> are authentication middleware for node that leverage the <a href="http://www.senchalabs.org/connect/">Connect</a> middleware conventions. That means if you are using a framework like <a href="http://expressjs.com">Express</a>, <a href="http://mcavage.me/node-restify">Restify</a>, or <a href="http://sailsjs.org/">Sails</a> you can easily plug one of their authentication schemes (or strategies) directly into your application. Everyauth comes with their strategies embedded, where as with Passport you can pick and choose which strategies to use. Some of the common strategies that developers use with Passport are <a href="https://github.com/jaredhanson/passport-facebook">Facebook</a> and <a href="https://github.com/jaredhanson/passport-google">Google</a>, but it also include everything from a local username/password authentication to a slew of OpenID and OAuth providers, and even a <a href="https://github.com/stormpath/passport-stormpath">Stormpath</a> strategy for Passport.</p> 
           <p>Even though Everyauth and Passport are built on top of the same middleware framework, they have their own sets of pros and cons. Passport is more flexible and modular, but Everyauth provides additional functionality that helps with routes and login/registration views. For a lot of Node developers, Passport is also preferred because it does not use promises. Here is a <a href="https://stormpath.com/blog/build-app-nodejs-express-passport-stormpath" target="_blank">great example app using Node.js, Passport, Express, and Stormpath</a>.</p> 
           <p>Since Passport and Everyauth are built on Connect, both will help you with <a href="https://stormpath.com/blog/everything-you-ever-wanted-to-know-about-node-dot-js-sessions"> Node.js user session management </a>, including:</p> 
           <ul> 
            <li>Serialization of the authenticated user</li> 
            <li>Managing the session</li> 
            <li>Logging the user out</li> 
           </ul> 
           <p>Additionally, they are designed for simple, easy authentication, but fall short (by design) of broader user management needs. You are still left to design, implement, and maintain all your other user infrastructure.</p> 
           <p>For example, if you are using passport-local (the strategy to authenticate username / password against your own database), Passport does not handle user signup and account verification. You will need to work with database modules to authenticate to a database, create the account, track verification status, create a verification token, send an email, and verify the account. This means a developer will need to worry about URL safety, removing expired tokens, and other security constraints (like hashing the password correctly in a database).</p> 
           <h3 id="your-own-database-and-a-hashing-algorithm">Your Own Database and a Hashing Algorithm<a href="#your-own-database-and-a-hashing-algorithm" class="heading-link"><i class="stp-icons stp-icon-link2"></i></a></h3> 
           <p>The do-it-yourself approach doesnt rely on any middleware. You choose your own stack, a database to store users (likely PostgresSQL and MongoDB) and a hashing algorithm to generate password hashes (likely bcrypt and scrypt). Searching for bcrypt or scrypt in npm will result in quite a few modules of varying degrees of quality, each with their own sets of dependencies. Be particularly careful if you are a Windows developer  we recommend the <a href="https://github.com/shaneGirish/bcrypt-nodejs">native JS implementation of bcrypt</a>.</p> 
           <p>After deciding on a stack, you will need to build out user management and authentication. Historically this approach has been extremely common, but is tedious, prone to error, and requires more maintenance than other approaches.</p> 
           <p>You will need to build/figure out:</p> 
           <ul> 
            <li>Account Creation 
             <ul> 
              <li>Create a user schema to hold user data</li> 
              <li>Create accounts and store salt + hashed passwords using bcrypt / scrypt</li> 
              <li>Sending an email with token for account verification</li> 
             </ul> </li> 
            <li>Account Authentication 
             <ul> 
              <li>Authenticate the user (comparing hashes)</li> 
             </ul> </li> 
            <li>Account Management 
             <ul> 
              <li>Password reset work flow 
               <ul> 
                <li>Generating / invalidating tokens</li> 
               </ul> </li> 
              <li>Role-based access / permissions</li> 
             </ul> </li> 
            <li>Integrations with ID and Social Providers</li> 
            <li>Secure the system 
             <ul> 
              <li>Secure the Database from unauthorized access</li> 
              <li>Secure the OS from unauthorized access</li> 
             </ul> </li> 
            <li>Backups for data</li> 
           </ul> 
           <p>One of the biggest challenges with rolling your own auth and user management is the maintenance. Take password hashing as an example. Done right, you select a cost factor that makes your hashing algorithm purposely slow (roughly 300-700ms) to prevent brute force attacks. However, Moores Law is a bitch compute price/performance doubles every year. So the right cost factor today may be considered insecure tomorrow. If youre building applications that will go into production, its your responsibility to update your hashing strategy at least once a year.</p> 
           <p>Despite the Node communitys aversion to rolling your own middleware, there are a few benefits to this approach. You get complete control of your infrastructure. If the tools available to you are not good enough for what you need to deliver to your customer, then you have the ability to invest engineering effort and time to innovate around user authentication and user management. Luckily, very few applications and developers have those kind of requirements, so the open source tools and API services available today help them move faster and deliver more.</p> 
           <h3 id="user-management-as-a-service">User Management as a Service<a href="#user-management-as-a-service" class="heading-link"><i class="stp-icons stp-icon-link2"></i></a></h3> 
           <p>Over time, software has moved from on-premise, to the cloud, to distributed API services. At the same time, development teams have come to rely on open source software and API services as much as their own code. It is now possible to offload user management to a system that exposes user management functionality via REST APIs and open-source SDKs for application development. <a href="https://stormpath.com">Stormpath</a> falls into this category along with some user API startups. The Node community, in particular, has adopted this service-oriented paradigm more than any other community to date.</p> 
           <p>Typically, API-driven services allow for more common functionality around user management, going beyond just authentication. The additional functionality varies by provider, but usually includes:</p> 
           <ul> 
            <li>Account email verification</li> 
            <li>Password reset work flows</li> 
            <li>Role-based access / permissions</li> 
            <li>Schema-less User Profiles</li> 
            <li>Two-factor authentication</li> 
            <li>Single sign on between applications</li> 
            <li>Social login integration (Facebook, Google, etc.)</li> 
            <li>Integration to Node auth middleware like Passport</li> 
           </ul> 
           <p>In addition to pure features, they also off-load much of the security and operations. They host all the infrastructure for you, scale to absorb your peak traffic, and handle the on-going security of your user data.</p> 
           <p>Offloading to an API service generally delivers convenience and improved security, while reducing development and maintenance costs. Developers now get to focus on building unique parts of their application.</p> 
           <p>However, there are trade-offs with using API services. You are introducing a 3rd party dependency to your application. It needs to be highly available, fast, portable, provide security during transport, and be flexible enough to meet your user data model.</p> 
           <p>Availability and performance are extremely important because a critical system like user authentication and management can not be offline or slow. Caching in their SDKS and being based on modern cloud infrastructures is a good start, but it is important that the service is prepared for the worst case scenarios  like whole data centers going down. And if you build on top of a service for user management, make sure you can <a href="https://status.stormpath.com">subscribe to notifications</a> of any outages.</p> 
           <p>Data portability is also critical  can you move user data in and out in safe (and easy) ways. While its easy to write a script to port unencrypted data over JSON, the ease of porting passwords will heavily depend on how you have stored any pre-existing data. For example, bcrypt is very portable by design, as it follows Modular Crypt Format (MCF). It is possible for multiple systems and languages to understand how to construct the hash by looking at the hash value itself. If youre building a prototype and dont use a service like Stormpath, we recommend starting with an MCF hash like bcrypt  it will be much easier to upgrade in the future.</p> 
           <p>Transport security between your application and the API Service is important in this approach compared to the approaches above. The additional network communication needs to be secured. For example, Stormpath supports only HTTPS and uses a custom digest auth algorithm to guard against replay and man in the middle attacks. You can read more about our security <a href="https://stormpath.com/resources/security-and-availability/">here</a>.</p> 
           <p>The data model used by authentication services can vary widely  Salesforce, for instance, looks very different from the Stormpath data model, which is based on directories and therefore generic and flexibly. Its worth digging in to make sure that the data model you have planned for your application, is supported by the service. This is particularly true for <a href="https://stormpath.com/product/multi-tenant">multi-tenant applications or SaaS</a>.</p> 
           <p>Additionally, documentation of APIs varies widely  you should make sure your solution outlines what you need before you dive in.</p> 
           <h3 id="building-user-management">Building User Management<a href="#building-user-management" class="heading-link"><i class="stp-icons stp-icon-link2"></i></a></h3> 
           <p>is hard. Inside node, there are different solutions, each with a set of pros and cons. I hope this post helps you get the lay of the land. If you have any questions, suggestions or experiences that you want to share, feel free to leave a comment or reach out to me on Twitter <a href="https://twitter.com/omgitstom">@omgitstom</a>. And if youre interested in a User Management API service, check out Stormpath and our <a title="Node.js with Stormpath" href="http://docs.stormpath.com/nodejs/">Official Node.js Support</a> that also includes Express.js and Passport.js support.</p> 
           <h4 id="like-what-you-see-follow-gostormpath-to-keep-up-with-the-latest-releases">Like what you see? <span style="vertical-align: text-top"><a class="twitter-follow-button" href="https://twitter.com/goStormpath">Follow @goStormpath</a></span> to keep up with the latest releases.<a href="#like-what-you-see-follow-gostormpath-to-keep-up-with-the-latest-releases" class="heading-link"><i class="stp-icons stp-icon-link2"></i></a></h4> 
           <div class="clearfix"></div> 
          </div> 
         </article> 
        </div> 
        <div class="blog_sidebar col-md-3 col-md-offset-1 nopadding" data-spy="affix" data-offset-top="230" data-offset-bottom="600"> 
         <div id="search-5" class="widget widget_search">
          <form role="search" method="get" class="search-form form" action="https://stormpath.com/"> 
           <label for="form-search-input" class="sr-only">Search for</label> 
           <div class="input-group"> 
            <input type="search" id="form-search-input" class="form-control" placeholder="Search " value name="s" title="Search for:"> 
            <span class="input-group-btn"> <button type="submit" class="button button-green button-small search-button"><i class="stp-icons stp-icon-search"></i></button> </span> 
           </div> 
           <input type="hidden" name="post_type" value="post"> 
          </form> 
         </div>
         <div id="categories-5" class="widget widget_categories">
          <h3 class="widget-title">Explore the Topic</h3> 
          <ul> 
           <li class="cat-item cat-item-10"><a href="https://stormpath.com/blog/category/net">.NET</a> </li> 
           <li class="cat-item cat-item-13"><a href="https://stormpath.com/blog/category/general">General</a> </li> 
           <li class="cat-item cat-item-8"><a href="https://stormpath.com/blog/category/java">Java</a> </li> 
           <li class="cat-item cat-item-74"><a href="https://stormpath.com/blog/category/javascript">Javascript</a> </li> 
           <li class="cat-item cat-item-9"><a href="https://stormpath.com/blog/category/mobile">Mobile</a> </li> 
           <li class="cat-item cat-item-7"><a href="https://stormpath.com/blog/category/node">Node</a> </li> 
           <li class="cat-item cat-item-5"><a href="https://stormpath.com/blog/category/php">PHP</a> </li> 
           <li class="cat-item cat-item-11"><a href="https://stormpath.com/blog/category/python">Python</a> </li> 
           <li class="cat-item cat-item-12"><a href="https://stormpath.com/blog/category/rest-api">REST API</a> </li> 
          </ul> 
         </div> 
         <div class="social-bar widget stormpath-social-counter-widget" data-action="fetch_social_share_count" data-instance="2"> 
          <h3 class="widget-title">Share a Post</h3> 
          <a class="social-icon si-small si-borderless si-twitter share-button" target="_blank" href="https://twitter.com/share?text=Choosing+your+Node.js+Authentication+Strategy - &amp;url=https%3A%2F%2Fstormpath.com%2Fblog%2Fchoosing-nodejs-authentication-strategy&amp;via=gostormpath"> <i class="stp-icons stp-icon-twitter">
            <div class="social-icon-counter">
             0
            </div></i> <i class="stp-icons stp-icon-twitter">
            <div class="social-icon-counter">
             0
            </div></i> </a> 
          <a class="social-icon si-small si-borderless si-facebook share-button" target="_blank" href="https://www.facebook.com/share.php?u=https%3A%2F%2Fstormpath.com%2Fblog%2Fchoosing-nodejs-authentication-strategy&amp;title=Choosing%20your%20Node.js%20Authentication%20Strategy"> <i class="stp-icons stp-icon-facebook">
            <div class="social-icon-counter">
             0
            </div></i> <i class="stp-icons stp-icon-facebook">
            <div class="social-icon-counter">
             0
            </div></i> </a> 
          <a class="social-icon si-small si-borderless si-gplus share-button" target="_blank" href="https://plus.google.com/share?url=https%3A%2F%2Fstormpath.com%2Fblog%2Fchoosing-nodejs-authentication-strategy"> <i class="stp-icons stp-icon-gplus">
            <div class="social-icon-counter">
             0
            </div></i> <i class="stp-icons stp-icon-gplus">
            <div class="social-icon-counter">
             0
            </div></i> </a> 
          <a class="social-icon si-small si-borderless si-linkedin share-button" target="_blank" href="http://www.linkedin.com/shareArticle?mini=true&amp;url=https%3A%2F%2Fstormpath.com%2Fblog%2Fchoosing-nodejs-authentication-strategy&amp;title=Choosing%20your%20Node.js%20Authentication%20Strategy&amp;source=https%3A%2F%2Fstormpath.com"> <i class="stp-icons stp-icon-linkedin">
            <div class="social-icon-counter">
             0
            </div></i> <i class="stp-icons stp-icon-linkedin">
            <div class="social-icon-counter">
             0
            </div></i> </a> 
         </div> 
        </div> 
       </main> 
      </div> 
     </div> 
    </section> 
    <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script> 
   </div> 
   <footer id="footer" class="dark"> 
    <div class="container"> 
     <div class="footer-widgets-wrap nopadding topmargin-sm bottommargin-sm clearfix"> 
      <div class="col-md-4"> 
       <div id="text-4" class="widget widget_text"> 
        <div class="textwidget">
         <img src="https://stormpath.com/wp-content/uploads/2017/08/logos.png" class="footer-logo">
        </div> 
       </div> 
      </div> 
      <div class="col-md-2 col-md-offset-1 col-sm-4 col-xs-5"> 
       <div id="nav_menu-2" class="widget widget_links widget_nav_menu"></div> 
      </div> 
      <div class="col-md-2 col-sm-4 col-xs-6"> 
       <div id="nav_menu-3" class="widget widget_links widget_nav_menu"></div> 
      </div> 
      <div class="col-md-3 col-sm-4 col-xs-12" id="info-social"> 
       <div id="text-3" class="widget widget_text"> 
        <div class="textwidget">
         <div> 
          <strong>Support:</strong> 
          <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="62060714070e0d12071011220d0916034c010d0f">[email&nbsp;protected]</a> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
    </div> 
    <div id="copyrights"> 
     <div class="container clearfix"> 
      <div class="col-md-12">
        Copyright 2017 Stormpath 
      </div> 
     </div> 
    </div> 
   </footer> 
  </div> 
  <noscript>
   <iframe src="//www.googletagmanager.com/ns.html?id=GTM-NQZZFW" height="0" width="0" style="display:none;visibility:hidden"></iframe>
  </noscript> 
  <script>!function(e,t,r,a,n,c,l,o){function h(e,t,r,a){for(r='',a='0x'+e.substr(t,2)|0,t+=2;t<e.length;t+=2)r+=String.fromCharCode('0x'+e.substr(t,2)^a); return r}try{for(n=e.getElementsByTagName('a'),l='/cdn-cgi/l/email-protection#',o=l.length,a=0;a<n.length;a++)try{c=n[a],t=c.href.indexOf(l),t>-1&&(c.href='mailto:'+h(c.href,t+o))}catch(f){}for(n=Array.prototype.slice.apply(e.getElementsByClassName('__cf_email__')),a=0;a<n.length;a++)try{c=n[a],c.parentNode.replaceChild(e.createTextNode(h(c.getAttribute('data-cfemail'),0)),c)}catch(f){}}catch(f){}}(document)</script>
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
                new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
                j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
                '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
                })(window,document,'script','dataLayer','GTM-NQZZFW');</script> 
  <script type="text/javascript" src="https://stormpath.com/wp-content/plugins/contact-form-7/includes/js/jquery.form.min.js?ver=3.51.0-2014.06.20"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var _wpcf7 = {"recaptcha":{"messages":{"empty":"Please verify that you are not a robot."}},"cached":"1"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://stormpath.com/wp-content/plugins/contact-form-7/includes/js/scripts.js?ver=4.7"></script> 
  <script type="text/javascript" src="https://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201733"></script> 
  <script type="text/javascript" src="https://stormpath.com/wp-content/themes/stormpath/vendor/js/script-global.min.js?ver=4.8.1"></script> 
  <script type="text/javascript" src="https://stormpath.com/wp-includes/js/wp-embed.min.js?ver=4.8.1"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var stormpath_social_object = {"ajaxurl":"https:\/\/stormpath.com\/wp-admin\/admin-ajax.php","post_id":"2622"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://stormpath.com/wp-content/plugins/stormpath-social-media-widgets/widgets/js/social-media-counter.js?ver=4.8.1"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var countVars = {"disqusShortname":"stormpath"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://stormpath.com/wp-content/plugins/disqus-comment-system/media/js/count.js?ver=4.8.1"></script>   
 </body>
</html>