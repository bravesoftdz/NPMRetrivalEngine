<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <title>Card Check - jQuery Credit Card Validator and Type Predictor</title> 
  <meta name="author" content="Eclarian"> 
  <!-- Le HTML5 shim, for IE6-8 support of HTML elements --> 
  <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]--> 
  <!-- Bootstrap style for Demo. Feel free to use this if you want! --> 
  <link rel="stylesheet" href="css/bootstrap.min.css"> 
  <link rel="stylesheet" href="css/bootstrap-responsive.min.css"> 
  <!-- Additional Style for the Demo ONLY. --> 
  <style type="text/css">
    	body {
    		/*background: #B94A48;*/
    		background-color: #222;
    		background-image: url(http://eclarian.com/pinstriped_suit.png);
    	}

    	h1 {
    		color: #B94A48;
    	}

    	.bgcolor {
    		background: #fcfcfc;
    	}

    	.footer, .content {
    		margin-left: 20px;
    	}

    	.content {
    		margin-top: 45px;
    	}

    	.brand {
    		margin-left: 10px !important;
    	}

    	.anchor {
    		height: 15px;
    	}
    </style> 
  <!-- This is only for the Docs. You do not need these for the plugin to work --> 
  <link href="vendor/prettify.css" type="text/css" rel="stylesheet"> 
  <script type="text/javascript" src="vendor/prettify.js"></script> 
  <!-- jQuery 1.9.1 --> 
  <!-- We default to using 1.9.1 because it still supports older version of IE --> 
  <script src="vendor/jquery-1.9.1.min.js" type="text/javascript"></script> 
  <!-- jQuery 2.0.0 --> 
  <!--<script src="vendor/jquery-2.0.0.min.js" type="text/javascript"></script>--> 
  <!-- CardCheck Plugin --> 
  <script src="js/cardcheck.min.js" type="text/javascript"></script> 
  <!-- Testing Support. Not needed for Plugin --> 
  <link rel="stylesheet" type="text/css" href="tests/gabe.css"> 
  <style type="text/css">
	 #qunit-testrunner-toolbar label {
	 	display:inline;
	 	margin-right: 7px;
	 	margin-left: 3px;
	 }
	</style> 
  <script type="text/javascript" src="http://code.jquery.com/qunit/qunit-1.11.0.js"></script> 
  <script type="text/javascript" src="tests/cardcheck-standalone.js"></script> 
  <script type="text/javascript">

// Example of implementation
$(document).ready(function() {
	prettyPrint();	
	// And Away We Go

	
    // Step #1: Cache Selectors
    var creditCard = $('#credit-card'),
        cardGrandParent = creditCard.parent().parent();
    
    // Step #2: Setup Callbacks on Events
    creditCard.on('cc:onReset cc:onGuess', function() {

        cardGrandParent.removeClass().addClass('control-group');

    }).on('cc:onInvalid', function() {

        cardGrandParent.removeClass().addClass('control-group error');
        $('#credit-card-type-text').text('');

    }).on('cc:onValid', function(event, card, niceName) {

        cardGrandParent.removeClass().addClass('control-group success');

    }).on('cc:onCardChange', function(event, card, niceName) {

        $('#credit-card-type-text').text(niceName);

    // Step #3: Initialize the cardcheck plugin
    }).cardcheck({ iconLocation: '#accepted-cards-images' });


	
	// Default these if they don't exist
	console = console || {};
	console.log = console.log || function() {};

	var creditCard = $('#credit-card2');
	creditCard.on('cc:onValid', function(event, card) {
		console.log(card);
	}).cardcheck();

	// Initialized with no options - All three lines below do the EXACT same thing
	//creditCard.cardcheck();
	//$.cardcheck('#credit-card2');
	//$.cardcheck({ input: '#credit-card2' });


});
</script> 
 </head> 
 <body> 
  <!-- Navigation --> 
  <div class="navbar navbar-fixed-top"> 
   <div class="navbar-inner"> 
    <div class="container"> 
     <div class="row"> 
      <a class="brand" href="#">CardCheck</a> 
      <ul class="nav"> 
       <li><a href="#demo">Demo</a></li> 
       <li><a href="#installation">Installation</a></li> 
       <li><a href="#usage">Usage</a></li> 
       <li><a href="#api-callback">API Callbacks</a></li> 
       <li><a href="#api">API Settings</a></li> 
       <li><a href="#demo_html">Demo Code</a></li> 
       <li><a href="#tests">Tests</a></li> 
      </ul> 
     </div> 
    </div> 
   </div> 
  </div> 
  <!-- Main Content --> 
  <div class="container bgcolor"> 
   <div class="content"> 
    <section id="thanks"> 
     <div class="row"> 
      <div class="span11"> 
       <div class="page-header"> 
        <h1>Credit Card Validator and Type Predictor</h1> 
        <h2>Version 2.0.0 <small>Released May 2, 2013</small></h2> 
       </div> 
       <div class="row"> 
        <div class="span8"> 
         <h4>Why Would You Use CardCheck?</h4> 
         <p> CardCheck is a credit card validator and type predictor. It provides a stand-alone script along with a jQuery plugin compatible with jQuery versions 1.9.1 and 2.0.0. Why do you need it? It saves your customers time by instantly telling them of errors in card entry as well as saving them the step of choosing their card type themselves. </p> 
         <hr> 
         <p> <span class="label label-success">Version 2.0.0 - Changelog</span> </p> 
         <p> </p>
         <ul> 
          <li>Added Maestro Card Support.</li> 
          <li>Added testing using qUnit.</li> 
          <li>Updated Plugin for jQuery 1.9.1 and 2.0.0. Either will work fine.</li> 
          <li>Separated out the core functionality and exposed it at CardCheck() to enable your own implementation</li> 
          <li>Added ability to manually fire card evaluation</li> 
          <li>Added ability to access internal processing object of element</li> 
          <li>Fixed a number of bugs and edge cases</li> 
          <li>Support multiple instances of the plugin</li> 
          <li>Broadcast internal events using custom jQuery events on the element ( "cc:EVENT" }</li> 
          <li>There are now three unique ways to setup callbacks.</li> 
         </ul> 
         <p></p> 
        </div> 
        <div class="span3"> 
         <p style="text-align:center"> <a href="http://codecanyon.net/item/cardcheck-credit-card-validator-and-type-guesser/1053565" title="Buy CardCheck on CodeCanyon" class="btn btn-success btn-large">Buy on CodeCanyon</a><br> Need Custom Integration?<br> <script type="text/javascript">
//<![CDATA[
var l=new Array();
l[0]='>';l[1]='a';l[2]='/';l[3]='<';l[4]='|46';l[5]='|101';l[6]='|116';l[7]='|111';l[8]='|117';l[9]='|81';l[10]='|32';l[11]='|101';l[12]='|101';l[13]='|114';l[14]='|70';l[15]='|32';l[16]='|97';l[17]='|32';l[18]='|114';l[19]='|111';l[20]='|102';l[21]='|32';l[22]='|110';l[23]='|97';l[24]='|105';l[25]='|114';l[26]='|97';l[27]='|108';l[28]='|99';l[29]='|69';l[30]='|32';l[31]='|116';l[32]='|99';l[33]='|97';l[34]='|116';l[35]='|110';l[36]='|111';l[37]='|67';l[38]='>';l[39]='"';l[40]='e';l[41]='t';l[42]='o';l[43]='u';l[44]='Q';l[45]=' ';l[46]='e';l[47]='e';l[48]='r';l[49]='F';l[50]='"';l[51]='=';l[52]='e';l[53]='l';l[54]='t';l[55]='i';l[56]='t';l[57]='"';l[58]='|109';l[59]='|111';l[60]='|99';l[61]='|46';l[62]='|110';l[63]='|97';l[64]='|105';l[65]='|114';l[66]='|97';l[67]='|108';l[68]='|99';l[69]='|101';l[70]='|64';l[71]='|110';l[72]='|97';l[73]='|105';l[74]='|114';l[75]='|97';l[76]='|108';l[77]='|99';l[78]='|101';l[79]=':';l[80]='o';l[81]='t';l[82]='l';l[83]='i';l[84]='a';l[85]='m';l[86]='"';l[87]='=';l[88]='f';l[89]='e';l[90]='r';l[91]='h';l[92]=' ';l[93]='a';l[94]='<';
for (var i = l.length-1; i >= 0; i=i-1){
if (l[i].substring(0, 1) == '|') document.write("&#"+unescape(l[i].substring(1))+";");
else document.write(unescape(l[i]));}
//]]>
</script> <br> <br> </p> 
         <!-- Logo --> 
         <a href="http://www.eclarian.com" title="Eclarian LLC"><img src="http://www.eclarian.com/eclarian.jpg"></a> 
        </div> 
       </div> 
      </div> 
     </div>
    </section> 
    <div class="anchor">
     <a name="demo"></a>
    </div> 
    <section id="demo"> 
     <div class="row"> 
      <div class="span11"> 
       <div class="page-header"> 
        <h1>Demo <small>Type a credit card number from below. Supports multiple instances</small></h1> 
       </div> 
       <div class="row"> 
        <div class="span5"> 
         <h3>Credit Card Inputs</h3> 
         <form> 
          <div class="control-group"> 
           <label class="control-label" for="credit-card"><strong>Card Number</strong></label> 
           <div class="controls"> 
            <input class="xlarge" id="credit-card" name="credit-card" type="text"> 
            <span id="credit-card-type-text" class="help-inline"></span> 
           </div> 
          </div> 
          <div class="control-group"> 
           <label>Accepted Cards</label> 
           <div class="controls"> 
            <div class="pull-left" id="accepted-cards-images"> 
             <!-- Icons Automatically Inserted Here --> 
            </div> 
           </div> 
          </div> 
         </form> 
         <br> 
         <label><em>Initialized with custom options. <a href="#demo_html">See demo code.</a></em></label> 
         <br> 
         <hr> 
         <br> 
         <form> 
          <p><em>Multiple Instances Supported. Different display.</em></p> 
          <div class="control-group"> 
           <label class="control-label" for="credit-card"><strong>Card Number (#2)</strong></label> 
           <div class="controls"> 
            <input class="xlarge" id="credit-card2" name="credit-card" type="text"> 
            <span id="credit-card-type-text2" class="help-inline"></span> 
           </div> 
          </div> 
          <div class="control-group"> 
           <label><em>Initialized with default options.</em></label> 
           <div class="controls"> 
            <div class="pull-left" id="accepted-cards-images2"> 
             <!-- Icons Automatically Inserted Here --> 
            </div> 
           </div> 
          </div> 
          <div class="actions"></div> 
         </form> 
        </div> 
        <div class="span6"> 
         <h3>Credit Card Numbers for Demo</h3> 
         <p>Enter each card number into the demo above to see it work!</p> 
         <table class="table table-striped table-bordered"> 
          <thead> 
           <tr> 
            <th>Type</th> 
            <th>Number</th> 
           </tr> 
          </thead> 
          <tbody> 
           <tr> 
            <td>Visa</td> 
            <td>4012 8888 8888 1881</td> 
           </tr> 
           <tr> 
            <td>MasterCard</td> 
            <td>5105 1051 0510 5100</td> 
           </tr> 
           <tr> 
            <td>Amex</td> 
            <td>3714 496353 98431</td> 
           </tr> 
           <tr> 
            <td>Discover</td> 
            <td>6011 0009 9013 9424</td> 
           </tr> 
           <tr> 
            <td>Diners Club</td> 
            <td>3056 93090 25904</td> 
           </tr> 
           <tr> 
            <td>JCB</td> 
            <td>3566 0020 2036 0505</td> 
           </tr> 
           <tr> 
            <td>Maestro</td> 
            <td>6759 6498 2643 8453</td> 
           </tr> 
          </tbody> 
         </table> 
        </div> 
       </div> 
      </div> 
     </div> 
    </section> 
    <div class="anchor">
     <a name="installation"></a>
    </div> 
    <section id="installation"> 
     <div class="row"> 
      <div class="span11"> 
       <div class="page-header"> 
        <h1>Installation</h1> 
       </div> 
       <h2>Upload the "images" and "js" directory into your site.</h2> 
       <p>Link to the location of your cardcheck plugin. You should use the minified version in production.</p> 
       <pre class="prettyprint">
			
&lt;script src="js/cardcheck.min.js" type="text/javascript"&gt;&lt;/script&gt;
 
</pre> 
       <span class="label label-info">Reminder:</span> Upload Image Directory for the icons 
       <p>Don't forget to upload the images to your server. The directory included with cardcheck.js includes the folder called "images" that contains the default credit card type icons you see in the demo (Visa, Mastercard, etc). You can easily replace these icons with any other ones that you may have. The sizes do not matter, just the naming scheme.</p> 
      </div> 
     </div> 
    </section> 
    <div class="anchor">
     <a name="usage"></a>
    </div> 
    <section id="usage"> 
     <div class="row"> 
      <div class="span11"> 
       <div class="page-header"> 
        <h1>Usage Instructions</h1> 
       </div> 
       <h2>Basic Initialization</h2> 
       <p>You can get off the ground running without having to pass any settings. Although CardCheck is highly configurable, you do not have to be a javascript expert to use this plugin.</p> 
       <pre class="prettyprint">
$(document).ready(function() {
	$('#credit-card').cardcheck();
});
</pre> 
       <h2>Initialization With Custom Settings</h2> 
       <p>Card Check is highly configurable so that you can adjust most of the functionality. Here is an example of how to initialize Card Check with some settings. Learn more in the <a href="#api">API Settings</a> section.</p> 
       <pre class="prettyprint">
$(document).ready(function() {
	$('#credit-card').cardcheck({
		iconLocation: '#accepted-cards-images',
		allowSpaces: false
	});
});
</pre> 
       <h2>Alternate Methods for Initializing Card Check</h2> 
       <p>Pass an input directly to cardcheck.js as the first parameter. Learn more in the <a href="#api">API Settings</a> section.</p> 
       <pre class="prettyprint">
$(document).ready(function() {
	
	// Method #1 via jQuery Selector
	$('#credit-card').cardcheck({ iconLocation: '#accepted-cards-images' });
	
	// Method #2 - first param = element, second param = options
	$.cardcheck('#credit-card', { iconLocation: '#accepted-cards-images' });
	
	// Method #3 first param defines element through input option along with other options, Second param ignored
	$.cardcheck({ input: '#credit-card', iconLocation: '#accepted-cards-images' });
	
});
</pre> 
       <h2>Chainable</h2> 
       <p>Chain additional jQuery methods after initializing cardcheck.js.</p> 
       <pre class="prettyprint">

$.cardcheck('#credit-card').addClass('myclass');
 
</pre> 
       <h2>StandAlone <span class="label label-success">NEW</span></h2> 
       <p>You control the entire implementation. Copy the code below and paste it in your console.</p> 
       <pre class="prettyprint">

var myCard = CardCheck({ allowSpaces: false });


myCard.onValid(function(card) {
	alert(card + ' is valid');
});

myCard.cardNumber('4012888888881881');
 
</pre> 
       <p>You can access the internal instance of the CardCheck object by doing the following:</p> 
       <pre class="prettyprint">

var myCard = $('#credit-card').cardcheck().cardcheck('instance');

// This allows you to chain as many callbacks as you want 
myCard.onValid(function(card) {
	console.log('callback1');
}).onValid(function(card) {
	console.log('callback2');
});
 
</pre> 
       <h2>Manually Fire Evaluation <span class="label label-success">NEW</span></h2> 
       <p>There may be some edge cases where the plugin does not fire automatically. On these cases we allow you to manually call the evaluation method on an instantiated cardcheck element. This example should NOT be implemented, but proves the flexibility of the plugin.</p> 
       <pre class="prettyprint">
var creditCard = $('#credit-card2');

creditCard.on('cc:onValid', function(event, card) {
	console.log(card);
}).cardcheck();

// Don't manually manipulate the internal instance properties
// You can... but there is probably a better way to achieve what you want.
var instance = creditCard.cardcheck('instance');
instance._cardNumber = '4012888888881881'; 

creditCard.cardcheck('evaluate');
</pre> 
      </div> 
     </div> 
    </section> 
    <div class="anchor">
     <a name="api-callback"></a>
    </div> 
    <section id="api-callback"> 
     <div class="row"> 
      <div class="span11"> 
       <div class="page-header"> 
        <h1>API Callbacks <small>Listen for Seven Unique Callbacks</small></h1> 
        <p><span class="label label-success">NEW</span> Every event will be broadcasted to a custom event listener on the element. What does that mean? Let me show you:</p> 
        <pre class="prettyprint">

// Demo #2 above is running this right now. Check your console after you paste a valid credit card in.
var creditCard = $('#credit-card2');

creditCard.on('cc:onValid', function(event, card) {
	console.log(card);
}).cardcheck();

// This code is equivalent to the following
creditCard.cardcheck({
	onValid: function(card) {
		console.log(card);
	}
})

</pre> 
        <strong>The benefit of broadcasting the events is that you can bind as many callbacks on a single event as you want and do it <em>before initialization.</em></strong> 
        <h3>Callback Details</h3> 
        <p>Available Callbacks: "onToggle", "onValid", "onValidation", "onInvalid", "onError", "onUnknown", "onGuess", "onReset", "onCardChange", "onTypeUpdate"</p> 
        <table class="table table-striped table-bordered"> 
         <thead> 
          <tr> 
           <th style="width:120px">Key</th> 
           <th style="min-width: 160px;">Default Value</th> 
           <th>Description</th> 
          </tr> 
         </thead> 
         <tbody> 
          <tr> 
           <td>onToggle</td> 
           <td>function(isValid, card, niceName) {}</td> 
           <td> This is called anytime a change occurs to the state of the instance. "isValid" can be null, true, or false. "card" will be a string (e.g. "visa") or null. <pre class="prettyprint">
// Both of these register the callback.
$('#credit-card').on('cc:onToggle', function(event, isValid, card, niceName) {});
$('#credit-card').cardcheck({ onToggle: function(isValid, card, niceName) {} });
</pre> </td> 
          </tr> 
          <tr> 
           <td>onValid</td> 
           <td>function(card, niceName) {}</td> 
           <td> Anytime a complete match is found and the luhn check has been performed. <pre class="prettyprint">
// Both of these register the callback.
$('#credit-card').on('cc:onValid', function(event, card, niceName) {});
$('#credit-card').cardcheck({ onValid: function(card, niceName) {} });
</pre> </td> 
          </tr> 
          <tr> 
           <td>onInvalid</td> 
           <td>function() {}</td> 
           <td> Anytime an error occurs. Could be a non-numeric entry or a number longer than allowed. <pre class="prettyprint">
// Both of these register the callback.
$('#credit-card').on('cc:onInvalid', function(event) {});
$('#credit-card').cardcheck({ onInvalid: function() {} });
</pre> </td> 
          </tr> 
          <tr> 
           <td>onUnknown</td> 
           <td>function(card, niceName) {}</td> 
           <td> In this function there is not enough information to know for sure that the card is valid. However, if "card" is not null, that means that we have a pretty good guess at what the card will be. <pre class="prettyprint">
// Both of these register the callback.
$('#credit-card').on('cc:onUnknown', function(event, card, niceName) {});
$('#credit-card').cardcheck({ onUnknown: function(card, niceName) {} });
</pre> </td> 
          </tr> 
          <tr> 
           <td>onGuess</td> 
           <td>function(card, niceName) {}</td> 
           <td> This is a subset of "onUnkown" but only fires when we are confident of the type of card it will most likely be. <pre class="prettyprint">
// Both of these register the callback.
$('#credit-card').on('cc:onGuess', function(event, card, niceName) {});
$('#credit-card').cardcheck({ onGuess: function(card, niceName) {} });
</pre> </td> 
          </tr> 
          <tr> 
           <td>onReset</td> 
           <td>function() {}</td> 
           <td> This manages reseting the input to a non-success or non-error state. This function accepts no parameters.<br> This will be called anytime the card was validated and is no longer valid but is not in error either. It will also be called when invalid characters were entered and have subsequently been removed. <br> <pre class="prettyprint">
// Both of these register the callback.
$('#credit-card').on('cc:onReset', function(event) {});
$('#credit-card').cardcheck({ onReset: function() {} });
</pre> </td> 
          </tr> 
          <tr> 
           <td>onCardChange</td> 
           <td>function(card, niceName) {}</td> 
           <td> Anytime the type of the card changes, this method will be called. It will be called even if the type of the card changes from a known card, such as "visa", to unknown, which is represented by null. <pre class="prettyprint">
// Both of these register the callback.
$('#credit-card').on('cc:onCardChange', function(event, card, niceName) {});
$('#credit-card').cardcheck({ onCardChange: function(card, niceName) {} });
</pre> </td> 
          </tr> 
          <tr> 
           <td>onError<br><span class="label label-warning">DEPRECATED</span></td> 
           <td>function( card ){}</td> 
           <td> <strong>Use "onInvalid" instead.</strong> This is called anytime that an error occurs. This will normally return the actual type, unless the error is because the value entered is not a number. <br><br> <pre class="prettyprint">
$('#credit-card').cardcheck({
	onError: function( type ) {
		// Notify user the number is valid
		alert('Credit Card Type Not Valid: ' + type );
	}
});</pre> </td> 
          </tr> 
          <tr> 
           <td>onValidation<br><span class="label label-warning">DEPRECATED</span></td> 
           <td>function( card, niceName ){}</td> 
           <td> <strong>Use "onValid" instead.</strong> Callback function that is called if validation is true. You can use this to hook into a notification plugin or your own custom code. <br><br> <pre class="prettyprint">
$('#credit-card').cardcheck({
	onValidation: function( type, niceName ) {
		// Notify user the number is valid
		alert('Valid Credit Card Number! ' + niceName);
	}
});</pre> </td> 
          </tr> 
          <tr> 
           <td>onTypeUpdate<br><span class="label label-warning">DEPRECATED</span></td> 
           <td>function( card, niceName ){}</td> 
           <td> <strong>Use "onCardChange" instead.</strong> Callback function that is called each time the type of credit card changes. <br><br> <pre class="prettyprint">
$('#credit-card').cardcheck({
	onTypeUpdate: function( type, niceName ) {
		// Do something on keyup and/or change
		alert('The credit card type has changed! ' + niceName);
	}
});</pre> </td> 
          </tr> 
         </tbody> 
        </table> 
       </div> 
      </div> 
     </div> 
    </section> 
    <div class="anchor">
     <a name="api"></a>
    </div> 
    <section id="api"> 
     <div class="row"> 
      <div class="span11"> 
       <div class="page-header"> 
        <h1>API Settings <small>Configuration Options for CardCheck</small></h1> 
       </div> 
       <table class="table table-striped table-bordered"> 
        <thead> 
         <tr> 
          <th style="width:120px">Key</th> 
          <th style="min-width: 160px;">Default Value</th> 
          <th>Description</th> 
         </tr> 
        </thead> 
        <tbody> 
         <tr> 
          <td>acceptedCards</td> 
          <td> <pre class="prettyprint">
acceptedCards:  [
	'visa',
	'mastercard',
	'amex',
	'discover',
	'diners',
	'jcb',
	'maestro'
]</pre> </td> 
          <td> Add or remove items from this list to change the accepted card types. Currently, cardcheck.js only supports the seven major credit cards listed. <br><br> <p>This example only accepts Visa and MasterCard.</p> <pre class="prettyprint">
$('#credit-card').cardcheck({
	acceptedCards: [
			'visa', 
			'mastercard'
		]
});</pre> <span class="label important">Important</span> <strong>You cannot deviate from the naming scheme:</strong> <br><br> [visa','mastercard','amex','diners','discover','jcb', 'maestro'] </td> 
         </tr> 
         <tr> 
          <td>allowSpaces</td> 
          <td>true</td> 
          <td> This controls whether validation will fail or pass if spaces are entered to separate number blocks. For example, "4111 1111 1111 1111" would be a valid Visa card if this option is enabled. <br><br><span class="label important">Important</span> Since this is enabled by default, you should probably have something on the backend that removes any spaces from the credit card field. Otherwise, it may fail when you submit it to your payment processor. <pre class="prettyprint">
&lt;?php 
// Here are two example in PHP for how to accomplish this
$credit_card = '4111 1111 1111 1111';

// Simple string replace
echo str_replace(' ', '', $credit_card);
// Outputs: 4111111111111111


// String replace with preg_replace
echo preg_replace('/\s+/', '', $credit_card);
// Outputs: 4111111111111111

?&gt;
</pre> </td> 
         </tr> 
         <tr> 
          <td>enableIcons</td> 
          <td>true</td> 
          <td> Set to <strong>true</strong> or <strong>false</strong> to display the credit card icons. If false, the icons will not be appended and you'll be left to use the callbacks alone. <br><br> <pre class="prettyprint">
$('#credit-card').cardcheck({
	enableIcons: false
});</pre> <p> <span class="label notice">JS Tip</span> Ensure you do not have trailing commas in your code. Trailing commas may cause errors in older browsers. For example, <b>do not</b> add a comma after <em>enableIcons: false</em> in this example. </p> </td> 
         </tr> 
         <tr> 
          <td>iconLocation</td> 
          <td></td> 
          <td> Change this value if you want your icons to be appended somewhere different. By default they will append to the parent element that houses your input. (e.g. They will be siblings)<br><br> However it may be easier to control by just setting a specific element like we do in the demo { iconLocation: '#accepted-cards-images' } <br> <a href="#demo_html">Check out how we use this in the demo</a> </td> 
         </tr> 
         <tr> 
          <td>iconDir</td> 
          <td>images/</td> 
          <td> <p> Change this value if you want your icons to be located somewhere different. This allows you to store your images on a CDN or somewhere besides the root domain. </p> <p> <span class="label important">Important</span> <b>You must include the trailing slash.</b> </p> <p> If you want to define an absolute path, include the full URL like this: </p><pre class="prettyprint">{ iconDir: "http://www.example.com/images/" }</pre> <p></p> <p> You can also use a directory relative to the script like this: </p><pre class="prettyprint">{ iconDir: "images/" }</pre> </td> 
         </tr> 
         <tr> 
          <td>iconExt</td> 
          <td>png</td> 
          <td> Change this value if you want to use custom icons with a different extension. </td> 
         </tr> 
         <tr> 
          <td>input</td> 
          <td>undefined</td> 
          <td> Initialize cardcheck.js on this input. This provides an optional way to initialize cardcheck.js. <br><br> <pre class="prettyprint">
$.cardcheck({
	input: '#credit-card'
});</pre> </td> 
         </tr> 
        </tbody> 
       </table> 
       <h3>Additional Settings <small>Adding Card Types</small></h3> 
       <p>There are a couple additional settings that are not included above as they involve advanced configuration of the plugin. They really should only need to be edited if one is <em>adding additional credit card types</em>. The uncompressed source code is fairly well documented to support you in this and the actual options are as follows: niceNames, regExpNumCheck, regExpApprox, startNum, and cardLength. Get in touch if you're looking to add a credit card type and we'll assist you in crafting the proper settings.</p> 
      </div> 
     </div> 
    </section> 
    <div class="anchor">
     <a name="demo_html"></a>
    </div> 
    <section id="demo_html"> 
     <div class="row"> 
      <div class="span11"> 
       <div class="page-header"> 
        <h1>Demo Code</h1> 
       </div> 
       <p>This is the HTML and scripts used in the <a href="#demo">demo</a> above. The classes you see here (control-group, controls, pull-left, etc.) are used with Twitter's Bootstrap v2.3.1 CSS.</p> 
       <pre class="prettyprint">
&lt;!-- Credit Card Number Input --&gt;
&lt;div class="control-group"&gt;
    &lt;label class="control-label" for="credit-card"&gt;&lt;strong&gt;Card Number&lt;/strong&gt;&lt;/label&gt;
    &lt;div class="controls"&gt;
        &lt;input class="xlarge" id="credit-card" name="credit-card" type="text"&gt;
        &lt;span id="credit-card-type-text" class="help-inline"&gt;&lt;/span&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- Card Images Output --&gt;
&lt;div class="control-group"&gt;
    &lt;label&gt;Accepted Cards&lt;/label&gt;
    &lt;div class="controls"&gt;
        &lt;div class="pull-left" id="accepted-cards-images"&gt;
            &lt;!-- Icons Automatically Inserted Here --&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- Script to control the card input --&gt;
&lt;script type="text/javascript"&gt;

// Make sure that this code goes within a doc ready
$(document).ready(function() {
    
    // Step #1: Cache Selectors
    var creditCard = $("#credit-card"),
        cardGrandParent = creditCard.parent().parent();
    
    // Step #2: Setup Callbacks on Events
    creditCard.on("cc:onReset cc:onGuess", function() {

        cardGrandParent.removeClass().addClass("control-group");

    }).on("cc:onInvalid", function() {

        cardGrandParent.removeClass().addClass("control-group error");
        $("#credit-card-type-text").text("");

    }).on("cc:onValid", function(event, card, niceName) {

        cardGrandParent.removeClass().addClass("control-group success");

    }).on("cc:onCardChange", function(event, card, niceName) {

        $("#credit-card-type-text").text(niceName);

    // Step #3: Initialize the cardcheck plugin
    }).cardcheck({ iconLocation: "#accepted-cards-images" });

});
&lt;/script&gt;
</pre> 
      </div> 
     </div> 
    </section> 
    <div class="anchor">
     <a name="tests"></a>
    </div> 
    <section id="tests"> 
     <div class="row"> 
      <div class="span11"> 
       <div class="page-header"> 
        <h1>Tests <small>Full test coverage by qUnit</small></h1> 
       </div> 
       <p>Testing ensures the stability of the internals of the stand-alone script. The jQuery plugin is only adding a listener to the core and providing card images. <a href="test.html?noglobals=true">View the tests</a></p> 
       <div id="qunit" style="position:relative;"></div> 
      </div> 
     </div> 
    </section> 
    <div class="anchor">
     <a name="credits"></a>
    </div> 
    <section id="credits"> 
     <div class="row"> 
      <div class="span11"> 
       <div class="page-header"> 
        <h1 style="text-align:center">THANK YOU!!!</h1> 
       </div> 
      </div> 
     </div> 
    </section> 
   </div> 
   <footer class="container footer"> 
    <div class="row"> 
     <div class="span12"> 
      <p><a href="http://www.iconshock.com/credit-card-icons/" target="_blank">Credit Card Icons by Iconshock</a> | Need Help? Get in touch <script type="text/javascript">
				//<![CDATA[
				var l=new Array();
				l[0]='>';l[1]='a';l[2]='/';l[3]='<';l[4]='|109';l[5]='|111';l[6]='|99';l[7]='|46';l[8]='|110';l[9]='|97';l[10]='|105';l[11]='|114';l[12]='|97';l[13]='|108';l[14]='|99';l[15]='|101';l[16]='|64';l[17]='|110';l[18]='|97';l[19]='|105';l[20]='|114';l[21]='|97';l[22]='|108';l[23]='|99';l[24]='|101';l[25]='>';l[26]='"';l[27]='|109';l[28]='|111';l[29]='|99';l[30]='|46';l[31]='|110';l[32]='|97';l[33]='|105';l[34]='|114';l[35]='|97';l[36]='|108';l[37]='|99';l[38]='|101';l[39]='|64';l[40]='|110';l[41]='|97';l[42]='|105';l[43]='|114';l[44]='|97';l[45]='|108';l[46]='|99';l[47]='|101';l[48]=':';l[49]='o';l[50]='t';l[51]='l';l[52]='i';l[53]='a';l[54]='m';l[55]='"';l[56]='=';l[57]='f';l[58]='e';l[59]='r';l[60]='h';l[61]=' ';l[62]='a';l[63]='<';
				for (var i = l.length-1; i >= 0; i=i-1){
				if (l[i].substring(0, 1) == '|') document.write("&#"+unescape(l[i].substring(1))+";");
				else document.write(unescape(l[i]));}
				//]]>
				</script> | <a href="http://eclarian.com">Card Check by Eclarian</a></p> 
     </div> 
    </div> 
   </footer> 
  </div> 
  <!-- /container --> 
  <script type="text/javascript">

	  // Run only on Eclarian's site
	  if ( window.location.hostname.indexOf('eclarian.com') !== -1 ) {

	  	var _gaq = _gaq || [];
		_gaq.push(['_setAccount', 'UA-18524791-1']);
		_gaq.push(['_trackPageview']);

	  	(function() {
		    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
		})();
	  }

	</script>  
 </body>
</html>