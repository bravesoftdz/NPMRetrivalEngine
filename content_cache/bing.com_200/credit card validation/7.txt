<!doctype html>
<html>
 <head>
  <meta charset="utf-8">
  <title> Creditcard.js: a more usable credit card form. Improve payment form, checkout, and ecommerce usability with JavaScript card number validation, credit card type detection, and more. </title>
  <meta name="description" content="Creditcard.js is an HTML5 credit card form for your checkout page. Reduce customer frustation while purchasing and improve your conversion rates.">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta http-equiv="Content-Language" content="en">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta property="og:site_name" content="Creditcard.js">
  <meta property="og:locale" content="en_US">
  <meta property="og:url" content="https://creditcardjs.com">
  <meta property="og:title" content="Creditcard.js: a more usable credit card form. Improve payment form, checkout, and ecommerce usability with JavaScript card number validation, credit card type detection, and more.">
  <meta property="og:description" content="Creditcard.js is an HTML5 credit card form for your checkout page. Reduce customer frustation while purchasing and improve your conversion rates.">
  <meta name="twitter:site" content="@creditcardjs">
  <meta property="twitter:title" content="Creditcard.js: a more usable credit card form. Improve payment form, checkout, and ecommerce usability with JavaScript card number validation, credit card type detection, and more.">
  <meta property="twitter:description" content="Creditcard.js is an HTML5 credit card form for your checkout page. Reduce customer frustation while purchasing and improve your conversion rates.">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:image:src" content="http://creditcardjs.com/s/_RJGs.png">
  <link rel="author" href="https://plus.google.com/+Creditcardjs/posts">
  <link rel="publisher" href="https://plus.google.com/+Creditcardjs">
  <meta itemprop="name" content="Creditcard.js: a more usable credit card form. Improve payment form, checkout, and ecommerce usability with JavaScript card number validation, credit card type detection, and more.">
  <meta itemprop="description" content="Creditcard.js is an HTML5 credit card form for your checkout page. Reduce customer frustation while purchasing and improve your conversion rates.">
  <meta property="fb:admins" content="100005718733796">
  <meta property="fb:app_id" content="597854763623731">
  <link href="//fonts.googleapis.com/css?family=Source+Sans+Pro:400,700|Source+Code+Pro:400" rel="stylesheet">
  <link href="/s/l0eER.css" rel="stylesheet">
  <script>(function(a,e,f,g,b,c,d){a.GoogleAnalyticsObject=b;a[b]=a[b]||function(){(a[b].q=a[b].q||[]).push(arguments)};a[b].l=1*new Date;c=e.createElement(f);d=e.getElementsByTagName(f)[0];c.async=1;c.src=g;d.parentNode.insertBefore(c,d)})(window,document,"script","//www.google-analytics.com/analytics.js","ga");ga("create","UA-41198380-1",{cookieDomain:"creditcardjs.com",siteSpeedSampleRate:100,sampleRate:100});ga("require","linkid","linkid.js");ga("send","pageview");</script>
  <link rel="canonical" href="https://creditcardjs.com">
 </head>
 <body>
  <script>document.body.className="with-js";</script>
  <div class="nav">
   <a href="/">
    <div class="logo">
     creditcard.
     <span class="logo-square">JS</span>
    </div></a>
   <div class="subnav">
    <a href="/documentation">Documentation</a>
    <a href="/licensing">Licensing</a>
    <a href="/faq">FAQ</a>
    <a href="/usability">Usability</a>
   </div>
  </div>
  <div class="hero">
   <div class="hero-inner">
    <h1>Upgrade Your Payment Form</h1>
    <h2>Creditcard.js is a more usable credit card form.</h2>
    <div class="row">
     <div class="sample-numbers">
      <button class="ccjs-amex" type="button"> American Express 
       <div class="sample-number">
        3700 000000 00002
       </div></button>
      <button class="ccjs-visa" type="button"> Visa 
       <div class="sample-number">
        4242 4242 4242 4242
       </div></button>
      <button class="ccjs-discover" type="button"> Discover 
       <div class="sample-number">
        6011 1111 1111 1117
       </div></button>
     </div>
     <div class="ccjs-card">
      <label class="ccjs-number"> Card Number <input name="card-number" class="ccjs-number" placeholder="•••• •••• •••• ••••"></label>
      <label class="ccjs-csc"> Security Code <input name="csc" class="ccjs-csc" placeholder="•••"></label>
      <button type="button" class="ccjs-csc-help">?</button>
      <label class="ccjs-name"> Name on Card <input name="name" class="ccjs-name"></label>
      <fieldset class="ccjs-expiration">
       <legend>Expiration</legend>
       <select name="month" class="ccjs-month"><option selected disabled>MM</option><option value="01">01</option><option value="02">02</option><option value="03">03</option><option value="04">04</option><option value="05">05</option><option value="06">06</option><option value="07">07</option><option value="08">08</option><option value="09">09</option><option value="10">10</option><option value="11">11</option><option value="12">12</option></select>
       <select name="year" class="ccjs-year"><option selected disabled>YY</option><option value="14">14</option><option value="15">15</option><option value="16">16</option><option value="17">17</option><option value="18">18</option><option value="19">19</option><option value="20">20</option><option value="21">21</option><option value="22">22</option><option value="23">23</option><option value="24">24</option></select>
      </fieldset>
      <select name="card-type" class="ccjs-hidden-card-type"><option value="amex" class="ccjs-amex">American Express</option><option value="discover" class="ccjs-discover">Discover</option><option value="mastercard" class="ccjs-mastercard">MasterCard</option><option value="visa" class="ccjs-visa">Visa</option><option value="diners-club" class="ccjs-diners-club">Diners Club</option><option value="jcb" class="ccjs-jcb">JCB</option><option value="laser" class="ccjs-laser">Laser</option><option value="maestro" class="ccjs-maestro">Maestro</option><option value="unionpay" class="ccjs-unionpay">UnionPay</option><option value="visa-electron" class="ccjs-visa-electron">Visa Electron</option><option value="dankort" class="ccjs-dankort">Dankort</option></select>
     </div>
    </div>
    <a href="#design" id="more" class="btn green-btn">Learn More</a>
    <a href="/licensing" class="btn get-top">Get Creditcard.js</a>
   </div>
  </div>
  <div id="design" class="section-wrapper">
   <div class="section overview">
    <h2>Why Creditcard.js?</h2>
    <h3>Most credit card forms are a <a href="#usability-mistakes">usability disaster</a>, complicating the already clumsy credit card entry process. Creditcard.js avoids these design mistakes, providing an HTML/CSS/JS solution compatible with any payment form.</h3>
   </div>
   <div class="section feature-bullets">
    <h2>Creditcard.js Features</h2>
    <ul class="two-column features">
     <li><h4>Compatible With Any Payment Form</h4>
      <div>
       Creditcard.js can be copy and pasted into any payment form and works with any payment backend. The HTML, CSS, and JS are hosted from your server, increasing security and avoiding external downtime.
      </div><h4 class="bottom">12kB minified/gzipped, no runtime JS dependencies</h4>
      <div>
        Creditcard.js fits everything (HTML, CSS, and JS) into 12kB, ensuring fast loads on your most important page. It requires no runtime dependencies like 
       <a class="discreet" href="http://jquery.com/" target="blank_">jQuery</a> (or even Google Closure). The JS and all transitive dependencies are statically compiled into one file with 
       <a class="discreet" href="https://developers.google.com/closure/compiler/docs/api-tutorial3#better" target="blank_">Google Closure Compiler's advanced compilation</a>, so say goodbye to blocking script tags and module loaders. 
      </div></li>
     <li><h4>Comprehensive Browser Support</h4>
      <div>
        JavaScript libraries like jQuery 
       <a href="#listening-to-the-wrong-events">aren't well equiped to handle form input</a>, so Creditcard.js uses the more robust and comprehensive 
       <a class="discreet" href="https://developers.google.com/closure/" target="blank_">Google Closure Tools</a>, the heavily tested JavaScript framework behind Gmail and Google Plus. 
      </div><h4 class="bottom">Progressively Enhanced Forms</h4>
      <div>
        Creditcard.js balances familiar HTML4 elements with newer HTML5 APIs. Sometimes usability just requires a more semantic HTML tag, e.g. 
       <a href="#drop-down-for-expiration">using &lt;select&gt; instead of &lt;input&gt; for expiration dates</a>. Other times usability requires more JavaScript assistence, e.g. 
       <a href="#smart-card-number-input">easing credit card number input</a>. 
      </div></li>
    </ul>
   </div>
  </div>
  <div id="usability-mistakes" class="section antipatterns-section">
   <h2>What's wrong with <span>existing credit card forms?</span></h2>
   <h3 class="column-header"><span class="mistakes">Mistakes</span><span>&nbsp;and&nbsp;</span><span class="solutions">Solutions</span></h3>
   <ul class="antipatterns two-column">
    <li id="using-basic-text-input-for-card-number"><h4><a href="#using-basic-text-input-for-card-number">Using Basic Text Input for Card Number</a></h4>
     <ul class="ccjs-card-style">
      <li>Regular text inputs don't prevent many errors that occur during the clumsy process of entering credit card numbers. While glancing from credit card to keyboard to screen, it's easy to lose position in a long string of numbers, drop digits, and add additional characters.</li>
      <li>Example:</li>
      <li class="example"><input value="42424424242a424242"></li>
      <li>Text inputs also allow illegal characters like letters, requiring delayed validation to warn users instead of just ignoring these characters. The same validation usually also flag characters like spaces or hyphens that some users type between groups of digits.</li>
     </ul></li>
    <li class="card-number-input" id="smart-card-number-input"><h4><a href="#smart-card-number-input">Smart Card Number Input</a></h4>
     <ul>
      <li class="card-wrapper">
       <div class="ccjs-card">
        <label class="ccjs-number ccjs-active"> Card Number <input name="card-number" class="ccjs-number ccjs-active" placeholder="•••• •••• •••• ••••" value="4242 4242 4242 4242"></label>
        <label class="disabled ccjs-csc"> Security Code <input name="csc" class="disabled ccjs-csc" placeholder="•••" disabled></label>
        <button type="button" class="disabled ccjs-csc-help">?</button>
        <label class="disabled ccjs-name"> Name on Card <input name="name" class="disabled ccjs-name" disabled></label>
        <fieldset class="disabled ccjs-expiration">
         <legend>Expiration</legend>
         <select name="month" class="ccjs-month" disabled><option selected disabled>MM</option></select>
         <select name="year" class="ccjs-year" disabled><option selected disabled>YY</option></select>
        </fieldset>
        <select name="card-type" class="ccjs-hidden-card-type"><option value="amex" class="ccjs-amex">American Express</option><option value="discover" class="ccjs-discover">Discover</option><option value="mastercard" class="ccjs-mastercard">MasterCard</option><option value="visa" class="ccjs-visa">Visa</option><option value="diners-club" class="ccjs-diners-club">Diners Club</option><option value="jcb" class="ccjs-jcb">JCB</option></select>
       </div></li>
      <li>Creditcard.js helps users quickly spot mistakes and also automatically corrects certain errors with the following techniques:</li>
      <ul class="details">
       <li>Automatically splits number to match format on card, e.g. '42424242' -&gt; <span class="delimited-example">'4242<span class="visible-space"></span>4242'</span>. This splitting logic adapters to the card type, e.g. Visa numbers are split after every fourth digit.</li>
       <li>Restricts input to numbers, spaces, and hyphens. Spaces and hyphens are only allowed at split locations.</li>
       <li>Limits maximum number of digits (varies with card type) so accidentally duplicate digits are quickly noticed.</li>
       <li>Catches many typos by calculating the <a href="http://en.wikipedia.org/wiki/Luhn_algorithm" target="blank_">Luhn checksum</a>.</li>
      </ul>
     </ul></li>
    <li id="misleading-card-type-detection-ui"><h4><a href="#misleading-card-type-detection-ui">Misleading Card Type Detection UI</a></h4>
     <ul>
      <li>The example below attempts to improve usability by automatically detecting the card type, but the UI increases confusion. The card type icons look like buttons, but they are unclickable. Users must first enter their card number before the detected card type is selected with JavaScript. The card type icons likely attract confused and frustrated clicks.</li>
      <li>
       <div class="screenshot-wrapper">
        <div>
         Screenshot of initial payment form
        </div>
        <div class="screenshot1"></div>
       </div></li>
      <li>
       <div class="screenshot-wrapper second">
        <div>
         Screenshot after card type detected
        </div>
        <div class="screenshot2"></div>
       </div></li>
     </ul></li>
    <li class="card-type-icons" id="clear-card-type-detection"><h4><a href="#clear-card-type-detection">Clear Card Type Detection</a></h4>
     <div class="card-wrapper">
      <div class="ccjs-card ccjs-amex">
       <label class="ccjs-number"> Card Number <input name="card-number" class="ccjs-number ccjs-active" placeholder="•••• •••• •••• ••••" value="34"></label>
       <label class="disabled ccjs-csc"> Security Code <input name="csc" class="disabled ccjs-csc" placeholder="••••" disabled></label>
       <button type="button" class="disabled ccjs-csc-help">?</button>
       <label class="disabled ccjs-name"> Name on Card <input name="name" class="disabled ccjs-name" disabled></label>
       <fieldset class="disabled ccjs-expiration">
        <legend>Expiration</legend>
        <select name="month" class="ccjs-month" disabled><option selected disabled>MM</option></select>
        <select name="year" class="ccjs-year" disabled><option selected disabled>YY</option></select>
       </fieldset>
       <select name="card-type" class="ccjs-hidden-card-type"><option value="amex" class="ccjs-amex">American Express</option><option value="discover" class="ccjs-discover">Discover</option><option value="mastercard" class="ccjs-mastercard">MasterCard</option><option value="visa" class="ccjs-visa">Visa</option><option value="diners-club" class="ccjs-diners-club">Diners Club</option><option value="jcb" class="ccjs-jcb">JCB</option></select>
       <div class="ccjs-type-read-only">
        American Express
       </div>
      </div>
     </div>
     <ul>
      <li>Creditcard.js reveals the card type only after its detected. It displays the card type with clear, legible text instead of small images. If users enter an unsupported card, e.g. China UnionPay, a warning is shown in the card type location.</li>
     </ul></li>
    <li id="expiration-format-mismatch"><h4><a href="#expiration-format-mismatch">Expiration Format Mismatch</a></h4>
     <ul class="ccjs-card-style">
      <li>Many payment forms force the user to convert the expiration date from format on the card (MM/YY) to an arbitrary format: spelled-out month (e.g. January), abbreviated spelled-out month (e.g. Jan), numeric month (e.g. 01 or 1), 4 digit year, etc.</li>
      <li>This mental translation adds another opportunity for errors, e.g. mixing up the number to month name mapping, swapping month and year, etc. These problems are worse for customers used to <a href="http://en.wikipedia.org/wiki/Date_format_by_country" target="blank_">different date orderings</a> or non-native English speakers.</li>
      <li>Expiration Date Format Variations</li>
      <ul class="two-column-no-stack">
       <li><select><option value="">January</option></select><select><option value="">2013</option></select></li>
       <li><select><option value="">1</option></select><select><option value="">2013</option></select></li>
       <li><select><option value="">1 - January</option></select><select><option value="">2013</option></select></li>
       <li><select><option value="">Jan</option></select><select><option value="">13</option></select></li>
      </ul>
     </ul></li>
    <li class="correct-expiration-format" id="matching-expiration-format"><h4><a href="#matching-expiration-format">Matching Expiration Format</a></h4>
     <div class="card-wrapper">
      <div class="ccjs-card">
       <label class="disabled ccjs-number"> Card Number <input name="card-number" class="disabled ccjs-number" placeholder="•••• •••• •••• ••••" disabled></label>
       <label class="disabled ccjs-csc"> Security Code <input name="csc" class="disabled ccjs-csc" placeholder="•••" disabled></label>
       <button type="button" class="disabled ccjs-csc-help">?</button>
       <label class="disabled ccjs-name"> Name on Card <input name="name" class="disabled ccjs-name" disabled></label>
       <fieldset class="ccjs-expiration">
        <legend>Expiration</legend>
        <select name="month" class="ccjs-month"><option selected disabled>MM</option><option value="01">01</option><option value="02">02</option><option value="03">03</option><option value="04">04</option><option value="05">05</option><option value="06">06</option><option value="07">07</option><option value="08">08</option><option value="09">09</option><option value="10">10</option><option value="11">11</option><option value="12">12</option></select>
        <select name="year" class="ccjs-year"><option selected disabled>YY</option><option value="14">14</option><option value="15">15</option><option value="16">16</option><option value="17">17</option><option value="18">18</option><option value="19">19</option><option value="20">20</option><option value="21">21</option><option value="22">22</option><option value="23">23</option><option value="24">24</option></select>
       </fieldset>
      </div>
     </div>
     <ul>
      <li>Creditcard.js's expiration date format matches the card's. The form fields are located near the actual location of these values on credit cards. For a detailed analysis, please read <a href="http://baymard.com/blog/how-to-format-expiration-date-fields" target="blank_">Baymard Institute's overview of expiration date usability</a>.</li>
     </ul></li>
    <li id="text-input-for-expiration"><h4><a href="#text-input-for-expiration">Text Input for Expiration</a></h4>
     <ul class="ccjs-card-style">
      <li>Using a text input instead of a <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement" target="blank_">drop-down/select element</a> adds room for error and complexity. A text input allows illegal values (e.g. '33' for month, non-digit characters) and unexpected formats (e.g. '1' for January instead of '01', 4 digit years instead of 2 digit). These values must be sanitized or generate warnings, which increases code complexity and opportunities for user and programmer error. Interacting with inputs with JavaScript is <a href="#javascript-keyup-keydown-keypress-events">notoriously error-prone</a> and should only be tolerated when text inputs are the only suitable entry type, e.g. for card numbers.</li>
      <li>Example <input placeholder="MM / YY"></li>
     </ul></li>
    <li class="drop-down-for-expiration" id="drop-down-for-expiration"><h4><a href="#drop-down-for-expiration">Drop-down for Expiration</a></h4>
     <div class="card-wrapper">
      <div class="ccjs-card">
       <label class="disabled ccjs-number"> Card Number <input name="card-number" class="disabled ccjs-number" placeholder="•••• •••• •••• ••••" disabled></label>
       <label class="disabled ccjs-csc"> Security Code <input name="csc" class="disabled ccjs-csc" placeholder="•••" disabled></label>
       <button type="button" class="disabled ccjs-csc-help">?</button>
       <label class="disabled ccjs-name"> Name on Card <input name="name" class="disabled ccjs-name" disabled></label>
       <fieldset class="ccjs-expiration">
        <legend>Expiration</legend>
        <select name="month" class="ccjs-month"><option selected disabled>MM</option><option value="01">01</option><option value="02">02</option><option value="03">03</option><option value="04">04</option><option value="05">05</option><option value="06">06</option><option value="07">07</option><option value="08">08</option><option value="09">09</option><option value="10">10</option><option value="11">11</option><option value="12">12</option></select>
        <select name="year" class="ccjs-year"><option selected disabled>YY</option><option value="14">14</option><option value="15">15</option><option value="16">16</option><option value="17">17</option><option value="18">18</option><option value="19">19</option><option value="20">20</option><option value="21">21</option><option value="22">22</option><option value="23">23</option><option value="24">24</option></select>
       </fieldset>
      </div>
     </div>
     <ul>
      <li>Drop downs eliminate entire classes of errors by presenting only valid options. The only logical error that requires JavaScript to detect is expired dates. By using regular HTML drop downs, Creditcard.js gains many usability benefits for free such as big, touch friendly selection popups on mobile and keyboard navigation on non-mobile devices.</li>
     </ul></li>
    <li id="missing-card-security-code-diagrams"><h4><a href="#missing-card-security-code-diagrams">Missing Card Security Code Diagrams</a></h4>
     <ul>
      <li>It's easy to assume customers no longer need help locating the card security code, but there are still many reasons to diagram the location of this value.</li>
      <li>Many merchants accept but don't validate security code, leading some customers to mistakenly use one the other three digits codes unhelpfully printed on their cards. For example, American Express cards sometimes <a href="http://creditcardforum.com/american-express/5148-amex-3-digit-security-code.html" target="blank_">unhelpfully contain random three digit codes</a>.</li>
      <li>Security code has many naming variations (<a href="https://en.wikipedia.org/wiki/Card_security_code" target="blank_">CVC, CSC, CVV, CVV2, CVD, CVVC, CVC2, CCV, SPC, CID</a>), and customers understandably may be confused by the chosen variant.</li>
     </ul></li>
    <li class="security-code-example" id="clear-security-code-diagram"><h4><a href="#clear-security-code-diagram">Clear Security Code Diagram</a></h4>
     <div class="card-wrapper">
      <div class="ccjs-card">
       <label class="disabled ccjs-number"> Card Number <input name="card-number" class="disabled ccjs-number" placeholder="•••• •••• •••• ••••" disabled></label>
       <label class="ccjs-csc"> Security Code <input name="csc" class="ccjs-csc" placeholder="•••"></label>
       <div class="ccjs-csc-diagram-wrapper ccjs-active ccjs-media-query-disabled">
        <div class="ccjs-csc-diagram">
         <div class="ccjs-barcode"></div>
         <div class="ccjs-signature">
          Signature and digits from card #
         </div>
         <div class="ccjs-card-code">
          123
         </div>
         <div class="ccjs-explanation">
          On most cards, the 3-digit security code is on the back, to the right of the signature.
         </div>
         <button type="button" class="ccjs-close">×</button>
        </div>
        <div class="ccjs-csc-diagram-amex">
         <div class="ccjs-card-number">
          XXXX XXXXXX XXXXX
         </div>
         <div class="ccjs-explanation">
          On American Express cards, the 4-digit security code is on the front, to the top-right of the card number.
         </div>
         <div class="ccjs-card-code">
          1234
         </div>
         <button type="button" class="ccjs-close">×</button>
        </div>
       </div>
       <button type="button" class="ccjs-csc-help ccjs-active">?</button>
       <label class="disabled ccjs-name"> Name on Card <input name="name" class="disabled ccjs-name" disabled></label>
       <fieldset class="disabled ccjs-expiration">
        <legend>Expiration</legend>
        <select name="month" class="ccjs-month" disabled><option selected disabled>MM</option></select>
        <select name="year" class="ccjs-year" disabled><option selected disabled>YY</option></select>
       </fieldset>
       <select name="card-type" class="ccjs-hidden-card-type"><option value="amex" class="ccjs-amex">American Express</option><option value="discover" class="ccjs-discover">Discover</option><option value="mastercard" class="ccjs-mastercard">MasterCard</option><option value="visa" class="ccjs-visa">Visa</option><option value="diners-club" class="ccjs-diners-club">Diners Club</option><option value="jcb" class="ccjs-jcb">JCB</option></select>
      </div>
     </div>
     <ul>
      <li>Creditcard.js provides big, clear diagrams pinpointing the csc location. When the card type is detected, only the appropriate diagram is shown. These diagrams are just HTML and CSS, so they don't require additional images to load and scale seamlessly on zoom.</li>
     </ul></li>
    <li class="js-intro"><h3>Technical and JavaScript Mistakes</h3></li>
    <li class="js-intro-hidden"></li>
    <li id="listening-to-the-wrong-events"><h4><a href="#listening-to-the-wrong-events">Listening to the Wrong Events</a></h4>
     <ul>
      <li>Many JavaScript tutorials recommend the unreliable keyup/keydown/keypress events to detect user input instead of the more reliable <a href="https://developer.mozilla.org/en-US/docs/Web/Reference/Events/input" target="blank_">HTML5 oninput event</a>. Unfortunately, libraries like jQuery <a href="http://forum.jquery.com/topic/html5-oninput-event" target="blank_">don't provide fallbacks for browsers that don't support oninput</a>, so developers are left with proxy key events that misfire in following situations: when the user copies and pastes text, inputs text on <a href="https://code.google.com/p/chromium/issues/detail?id=229292" target="blank_">mobile devices with physical keypads</a>, <a href="http://stackoverflow.com/questions/9317273/ios5-mobile-safari-handle-html-input-text-keyup-keydown-with-voice-assistant" target="blank_">uses voice assistance</a>, etc.</li>
      <li>Another incomplete alternative to detecting user input is listening to the <a href="https://developer.mozilla.org/en-US/docs/Web/Reference/Events/change" target="blank_">change event</a>. This event only fires after an input element loses focus, preventing form sanitation like immediately preventing non-numeric characters from the card number input.</li>
     </ul></li>
    <li id="html5-input-event"><h4><a href="#html5-input-event">HTML5 input event</a></h4>
     <ul>
      <li>Creditcard.js reliably detects user input by listening to the HTML5 input event with <a href="https://code.google.com/p/closure-library/source/browse/closure/goog/events/inputhandler.js" target="blank_">fallbacks provided by Google's Closure Library</a>. On browsers that don't support oninput, these fallbacks mimic oninput by <a href="https://code.google.com/p/closure-library/source/browse/closure/goog/events/inputhandler.js#98" target="blank_">listening to proxy key, paste, and change events while periodically polling for changes</a>.</li>
      <li>As a monolithic library, jQuery doesn't include a similar oninput fallback/shim because it avoids bloating file size for a feature that is not <a href="http://forum.jquery.com/topic/html5-oninput-event#14737000002819033" target="blank_">"universally needed"</a>. Google Closure has the luxury of <a href="http://docs.closure-library.googlecode.com/git/index.html" target="blank_">assembling a comprehensive standard library</a>, relying on its <a href="https://developers.google.com/closure/compiler/" target="blank_">advanced compilation process</a> to remove swathes of unused code during deployment.</li>
     </ul></li>
    <li id="incorrectly-finding-input-value"><h4><a href="#incorrectly-finding-input-value">Incorrectly Finding Input Value</a></h4>
     <ul>
      <li>The keyCode, charCode, and 'which' properties on JavaScript events are often incorrectly used to determine which character the user typed, e.g. when filtering out non-numeric characters in the card number field. Unfortunately, these properties do not consistently reflect what the user is typing:</li>
      <ul class="details">
       <li>In certain browsers, keys typed on a <a href="http://en.wikipedia.org/wiki/Numeric_keypad" target="blank_">numeric keypad</a> generate different event properties than those typed on the top row of a regular keyboard.</li>
       <li>Keycodes tend to reflect physical location on the keyboard instead of underlying character, which becomes problematic for non-Qwerty keyboards layouts.</li>
       <li>On some mobile browsers, the keycode is <a href="https://code.google.com/p/chromium/issues/detail?id=118639" target="blank_">erroneously fixed to 0</a>.</li>
      </ul>
     </ul></li>
    <li id="htmlinputelement-value-property"><h4><a href="#htmlinputelement-value-property">HTMLInputElement value property</a></h4>
     <ul>
      <li>The current value of the user's input can be accessed directly in JavaScript, bypassing the red herring of keyboard input handling.</li>
      <li>
       <div>
        Example code:
       </div><code>document.querySelector('input').value;</code></li>
      <li>The value property is <a href="http://quirksmode.org/dom/w3c_core.html#t1112" target="blank_">older than most browsers</a> and tends to be overlooked when JavaScript key events are used. Combined with the HTML5 input event, the value property provides simple and robust access to the user's input.</li>
     </ul></li>
    <li id="incorrect-card-type-detection"><h4><a href="#incorrect-card-type-detection">Incorrect Card Type Detection</a></h4>
     <ul>
      <li>Most <a target="blank_" href="https://www.google.com/search?q=credit+card+type+detection">tutorials and resources on card type detection</a> consist of regexes with no citations, so it's unsurprising that the process is filled with an accumulation of mistakes:</li>
      <li><p><b>Missing Card Types</b></p><p>Some resources omit detection for popular and unpopular card types like Discover and JCB.</p></li>
      <li><p><b>Missing recent business developments</b></p><p>Card type detection changes over time as credit card companies form partnerships or allocate new ranges of card numbers.</p></li>
     </ul></li>
    <li id="accurate-card-type-detection"><h4><a href="#accurate-card-type-detection">Accurate Card Type Detection</a></h4>
     <ul>
      <li>Creditcard.js's card type algorithm detect all card companies. Sources for card number to card company mappings:</li>
      <ul class="details">
       <li>ANSI <a href="http://www.ansi.org/other_services/registration_programs/iin_registration.aspx" target="blank_">maintains a database</a> mapping card number ranges to companies.</li>
       <li>ANSI only <a href="http://www.ansi.org/other_services/registration_programs/iin_registration.aspx#8" target="blank_">shares to this information</a> with credit card companies.</li>
       <li>The most comprehensive secondary sources are the Wikipedia pages on <a href="https://en.wikipedia.org/wiki/Bank_card_number" target="blank_">bank card numbers</a> and <a href="https://en.wikipedia.org/wiki/List_of_Issuer_Identification_Numbers" target="blank_">issuer identification numbers</a>.</li>
      </ul>
      <li>Technical aside</li>
      <ul class="details">
       <li>Regexes are a poor choice for representing numeric ranges. For example, here is the regex from the <a target="blank_" href="http://jquerycreditcardvalidator.com" rel="nofollow">jQuery Credit Card Validator</a> used to recognize Discover cards: <code>/^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)/</code>.</li>
       <li>Instead of regexes, Creditcard.js use a <a href="http://docs.closure-library.googlecode.com/git/class_goog_structs_InversionMap.html" target="blank_">data structure designed for number ranges</a>. Thanks to the <a href="https://developers.google.com/closure/compiler/" target="blank_">Google Closure compiler</a>, this additional code adds less than 0.5 KB to the output size.</li>
      </ul>
     </ul></li>
    <li class="js-intro"><h3>Improve the usability of your payment form.</h3></li>
    <li class="js-intro-hidden"></li>
   </ul>
  </div>
  <div class="section last">
   <a href="/licensing" class="btn green-btn get-bottom">Get Creditcard.js</a>
  </div>
  <div style="display:none">
   <script>var google_conversion_id=929147352,google_custom_params=window.google_tag_params,google_remarketing_only=!0;</script>
   <script src="//www.googleadservices.com/pagead/conversion.js"></script>
   <noscript>
    <div style="display:inline;">
     <img height="1" width="1" style="border-style:none;" alt="" src="//googleads.g.doubleclick.net/pagead/viewthroughconversion/929147352/?value=0&amp;guid=ON&amp;script=0">
    </div>
   </noscript>
  </div>
  <div class="footer">
   <div class="top-row">
    <a href="/">Home</a>
    <a href="/documentation">Documentation</a>
    <a href="/licensing">Licensing</a>
    <a href="/faq">FAQ</a>
    <a href="/usability">Usability</a>
    <span class="footer-divider">|</span>
    <a href="/press">Press</a>
    <a href="/privacy">Privacy</a>
    <a href="/eula">EULA</a>
   </div>
   <div class="footer-bottom-row">
    <span class="copyright">© 2016 <a href="/">Creditcard.js</a></span>
    <span class="links"><a class="twitter-footer" href="https://twitter.com/creditcardjs" target="blank_">Twitter</a><a class="facebook-footer" href="https://www.facebook.com/creditcardjs" target="blank_">Facebook</a><a class="gplus-footer" href="https://plus.google.com/+Creditcardjs/posts" target="blank_">Google+</a><a href="mailto:contact@creditcardjs.com">Email</a></span>
   </div>
  </div>
  <script src="/s/mt15A.js" async></script>
  <script>adroll_adv_id="2VEETXO2DJGKDLFKVQ4TMV";adroll_pix_id="553FWQBCKFED7FABVFLOQP";(function(){var b=window.onload;window.onload=function(){__adroll_loaded=!0;var a=document.createElement("script"),c="https:"==document.location.protocol?"https://s.adroll.com":"http://a.adroll.com";a.setAttribute("async","true");a.type="text/javascript";a.src=c+"/j/roundtrip.js";((document.getElementsByTagName("head")||[null])[0]||document.getElementsByTagName("script")[0].parentNode).appendChild(a);b&&b()}})();</script>
 </body>
</html>