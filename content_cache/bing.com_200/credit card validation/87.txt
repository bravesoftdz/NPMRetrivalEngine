<!doctype html>
<html lang="en" dir="ltr" class="client-nojs">
 <head> 
  <meta charset="UTF-8"> 
  <title>Luhn test of credit card numbers - Rosetta Code</title> 
  <script src="/cdn-cgi/apps/head/7qaJovFEYxjqsAZAxmfekTkNrFg.js"></script>
  <script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script> 
  <script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":!1,"wgNamespaceNumber":0,"wgPageName":"Luhn_test_of_credit_card_numbers","wgTitle":"Luhn test of credit card numbers","wgCurRevisionId":252260,"wgRevisionId":252260,"wgArticleId":6216,"wgIsArticle":!0,"wgIsRedirect":!1,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Programming Tasks","Checksums","GUISS/Omit","360 Assembly","ABAP","ACL2","ActionScript","Ada","ALGOL 68","ALGOL W","APL","ARM Assembly","AutoHotkey","AutoIt","AWK","Bash","Batch File","BBC BASIC","Bc","Bracmat","C","C++","C sharp","Caché ObjectScript","Ceylon","Clojure","COBOL","Common Lisp","D","EchoLisp","Elixir","Erlang","Euphoria","F Sharp","Factor","Forth","Fortran","FreeBASIC","FunL","Gambas","GAP","Go","Groovy","Haskell","HicEst","Icon","Unicon","J","Java","JavaScript","Jq","Julia","K","Kotlin","Lasso","Liberty BASIC","LiveCode","Logo","Lua","Mathematica","MATLAB","MUMPS","NetRexx","Nim","Objeck","Objective-C",
"OCaml","Octave","Oforth","OpenEdge/Progress","Order","Oz","Pascal","Perl","Perl 6","Phix","PHP","PicoLisp","PL/I","PL/SQL","PowerShell","PureBasic","Python","R","Racket","REXX","Ring","Ruby","Run BASIC","Rust","Scala","Scheme","Sed","Seed7","SequenceL","Sidef","SNOBOL4","SPARK","Standard ML","Swift","Tcl","TI-83 BASIC","Transact-SQL","TUSCRIPT","TXR","UNIX Shell","Ursala","VBScript","Visual Basic .NET","Xojo","Zkl","ZX Spectrum Basic"],"wgBreakFrames":!1,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Luhn_test_of_credit_card_numbers","wgRelevantArticleId":6216,"wgIsProbablyEditable":!0,"wgRestrictionEdit":[],"wgRestrictionMove"
:[],"sfgAutocompleteValues":[],"sfgAutocompleteOnAllChars":!1,"sfgFieldProperties":[],"sfgDependentFields":[],"sfgShowOnSelect":[],"sfgScriptPath":"/mw/extensions/SemanticForms","sdgDownArrowImage":"/mw/extensions/SemanticDrilldown/skins/down-arrow.png","sdgRightArrowImage":"/mw/extensions/SemanticDrilldown/skins/right-arrow.png"});mw.loader.implement("user.options",function($,jQuery){mw.user.options.set({"variant":"en"});});mw.loader.implement("user.tokens",function($,jQuery){mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\"});});mw.loader.load(["ext.smw.style","ext.smw.tooltips","mediawiki.page.startup","mediawiki.legacy.wikibits"]);
} );</script> 
  <link rel="stylesheet" href="/mw/load.php?debug=false&amp;lang=en&amp;modules=ext.bootstrap.styles&amp;only=styles&amp;skin=chameleon"> 
  <meta name="ResourceLoaderDynamicStyles" content=""> 
  <link rel="stylesheet" href="/mw/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=chameleon"> 
  <style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}</style> 
  <script async src="/mw/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=chameleon"></script> 
  <meta name="generator" content="MediaWiki 1.26.2"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <link rel="ExportRDF" type="application/rdf+xml" title="Luhn test of credit card numbers" href="/mw/index.php?title=Special:ExportRDF/Luhn_test_of_credit_card_numbers&amp;xmlmime=rdf"> 
  <link rel="alternate" type="application/x-wiki" title="Edit" href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit"> 
  <link rel="edit" title="Edit" href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit"> 
  <link rel="shortcut icon" href="/favicon.ico"> 
  <link rel="search" type="application/opensearchdescription+xml" href="/mw/opensearch_desc.php" title="Rosetta Code (en)"> 
  <link rel="EditURI" type="application/rsd+xml" href="https://rosettacode.org/mw/api.php?action=rsd"> 
  <link rel="copyright" href="http://www.gnu.org/licenses/fdl-1.2.html"> 
  <link rel="alternate" type="application/atom+xml" title="Rosetta Code Atom feed" href="/mw/index.php?title=Special:RecentChanges&amp;feed=atom"> 
 </head> 
 <body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Luhn_test_of_credit_card_numbers layout-standard skin-chameleon action-view"> 
  <div class="container"> 
   <div class="row"> 
    <div class="col-lg-3"> 
     <div id="p-logo" class="p-logo" role="banner"> 
      <a href="/wiki/Rosetta_Code" title="Visit the main page"><img src="/mw/title.png" alt="Rosetta Code"></a> 
     </div> 
    </div> 
    <div class="col-lg-9"> 
     <div class="row"> 
      <div class="col-lg-12"> 
       <div class="p-personal pull-right" id="p-personal"> 
        <ul class="p-personal-tools list-inline pull-right"> 
         <li id="pt-createaccount"><a href="/mw/index.php?title=Special:UserLogin&amp;returnto=Luhn+test+of+credit+card+numbers&amp;type=signup" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li> 
         <li id="pt-login"><a href="/mw/index.php?title=Special:UserLogin&amp;returnto=Luhn+test+of+credit+card+numbers" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li> 
        </ul> 
        <div class="newtalk-notifier"> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="row"> 
      <div class="col-lg-12"> 
       <div id="p-search" class="p-search pull-right" role="search"> 
        <form id="searchform" class="mw-search form-inline" action="/mw/index.php"> 
         <input type="hidden" name="title" value="Special:Search"> 
         <div class="input-group"> 
          <input name="search" placeholder="Search" title="Search Rosetta Code [f]" accesskey="f" id="searchInput" class="form-control"> 
          <div class="input-group-btn"> 
           <button value="Go" id="searchGoButton" name="go" title="Go to a page with this exact name if it exists" type="submit" class="searchGoButton btn btn-default"><span class="glyphicon glyphicon-share-alt"></span></button>
           <button value="Search" id="mw-searchButton" name="fulltext" title="Search the pages for this text" type="submit" class="mw-searchButton btn btn-default"><span class="glyphicon glyphicon-search"></span></button> 
          </div> 
         </div> 
        </form> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="row"> 
    <div class="col-lg-12"> 
     <nav class="navbar navbar-default p-navbar" role="navigation" id="mw-navigation"> 
      <div class="container-fluid">
       <div class="navbar-header"> 
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#mw-navigation-collapse"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
       </div> 
       <div class="collapse navbar-collapse" id="mw-navigation-collapse">
        <ul class="nav navbar-nav"> 
         <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">Community <b class="caret"></b></a> 
          <ul class="dropdown-menu p-Community" id="p-Community"> 
           <li id="n-Twitter"><a href="http://twitter.com/rosettacode" rel="nofollow">Twitter</a></li> 
           <li id="n-Chat.2FIRC"><a href="/wiki/Special:WebChat">Chat/IRC</a></li> 
           <li id="n-Planet"><a href="http://rosettacode.org/planet" rel="nofollow">Planet</a></li> 
           <li id="n-The-Village-Pump"><a href="/wiki/Rosetta_Code:Village_Pump">The Village Pump</a></li> 
           <li id="n-Finances"><a href="/wiki/Rosetta_Code:Finances">Finances</a></li> 
          </ul> </li> 
         <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">Explore <b class="caret"></b></a> 
          <ul class="dropdown-menu p-Explore" id="p-Explore"> 
           <li id="n-Languages"><a href="/wiki/Category:Programming_Languages">Languages</a></li> 
           <li id="n-Tasks"><a href="/wiki/Category:Programming_Tasks">Tasks</a></li> 
           <li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li> 
           <li id="n-Similar-sites"><a href="/wiki/Help:Similar_Sites">Similar sites</a></li> 
           <li id="n-randompage"><a href="/wiki/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li> 
          </ul> </li>
        </ul> 
       </div> 
      </div> 
     </nav> 
    </div> 
   </div> 
   <div class="row"> 
    <div class="col-lg-12"> 
     <ul class="p-contentnavigation list-inline text-center" id="p-contentnavigation"> 
      <li id="p-namespaces"> 
       <ul class="list-inline"> 
        <li id="ca-nstab-main" class="selected"><a href="/wiki/Luhn_test_of_credit_card_numbers" title="View the content page [c]" accesskey="c" class="selected">Page</a></li> 
        <li id="ca-talk"><a href="/wiki/Talk:Luhn_test_of_credit_card_numbers" rel="discussion" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li> 
       </ul> </li> 
      <li id="p-views"> 
       <ul class="list-inline"> 
        <li id="ca-edit"><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit" title="Edit this page [e]" accesskey="e">Edit</a></li> 
        <li id="ca-history"><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=history" title="Past revisions of this page [h]" accesskey="h">History</a></li> 
       </ul> </li> 
     </ul> 
    </div> 
   </div> 
   <div class="row"> 
    <div class="col-lg-12"> 
    </div> 
   </div> 
   <div class="row"> 
    <div class="col-lg-12"> 
     <div id="content" class="mw-body">
      <a id="top"></a> 
      <div id="mw-js-message" style="display:none;"></div> 
      <div class="contentHeader"> 
       <h1 id="firstHeading" class="firstHeading">Luhn test of credit card numbers</h1> 
       <div id="siteSub">
        From Rosetta Code
       </div>
       <div id="jump-to-nav" class="mw-jump">
        Jump to:
        <a href="#mw-navigation">navigation</a>, 
        <a href="#p-search">search</a>
       </div> 
      </div>
      <div id="bodyContent"> 
       <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
        <div class="infobox" style="width: 2in">
         <div class="floatleft">
          <a href="/wiki/Category:Solutions_by_Programming_Task" title="Category:Solutions by Programming Task"><img alt="Task" src="/mw/images/thumb/b/ba/Rcode-button-task-crushed.png/64px-Rcode-button-task-crushed.png" width="64" height="64" srcset="/mw/images/thumb/b/ba/Rcode-button-task-crushed.png/96px-Rcode-button-task-crushed.png 1.5x, /mw/images/thumb/b/ba/Rcode-button-task-crushed.png/128px-Rcode-button-task-crushed.png 2x"></a>
         </div>
         <b>Luhn test of credit card numbers</b>
         <br> You are encouraged to 
         <a href="/wiki/Rosetta_Code:Solve_a_Task" title="Rosetta Code:Solve a Task">solve this task</a> according to the task description, using any language you may know.
        </div> 
        <p>The <a href="http://en.wikipedia.org/wiki/Luhn_algorithm" class="extiw" title="wp:Luhn algorithm">Luhn test</a> is used by some credit card companies to distinguish valid credit card numbers from what could be a random selection of digits. </p>
        <p>Those companies using credit card numbers that can be validated by the Luhn test have numbers that pass the following test: </p> 
        <ol>
         <li> Reverse the order of the digits in the number.</li> 
         <li> Take the first, third, ... and every other odd digit in the reversed digits and sum them to form the partial sum s1</li> 
         <li> Taking the second, fourth ... and every other even digit in the reversed digits:</li>
        </ol> 
        <dl>
         <dd>
          <ol>
           <li> Multiply each digit by two and sum the digits if the answer is greater than nine to form partial sums for the even digits</li> 
           <li> Sum the partial sums of the even digits to form s2</li>
          </ol>
         </dd>
        </dl> 
        <ol>
         <li> If s1 + s2 ends in zero then the original number is in the form of a valid credit card number as verified by the Luhn test.</li>
        </ol> 
        <p><br> For example, if the trial number is 49927398716: </p> 
        <pre>Reverse the digits:
  61789372994
Sum the odd digits:
  6 + 7 + 9 + 7 + 9 + 4 = 42 = s1
The even digits:
    1,  8,  3,  2,  9
  Two times each even digit:
    2, 16,  6,  4, 18
  Sum the digits of each multiplication:
    2,  7,  6,  4,  9
  Sum the last:
    2 + 7 + 6 + 4 + 9 = 28 = s2

s1 + s2 = 70 which ends in zero which means that 49927398716 passes the Luhn test</pre> 
        <p><br> </p> 
        <dl>
         <dt>
          Task
         </dt> 
         <dd></dd>
        </dl> 
        <p>Write a function/method/procedure/subroutine that will validate a number with the Luhn test, and <br>use it to validate the following numbers: </p> 
        <pre>   49927398716
   49927398717
   1234567812345678
   1234567812345670
</pre> 
        <p><br> </p> 
        <dl>
         <dt>
          Related tasks
         </dt> 
         <dd></dd>
        </dl> 
        <ul>
         <li> &nbsp; <a href="/wiki/SEDOLs" title="SEDOLs">SEDOL</a></li> 
         <li> &nbsp; <a href="/wiki/Calculate_International_Securities_Identification_Number" title="Calculate International Securities Identification Number" class="mw-redirect">ISIN</a></li>
        </ul> 
        <p><br><br> </p> 
        <div id="toc" class="toc">
         <div id="toctitle">
          <h2>Contents</h2>
         </div> 
         <ul> 
          <li class="toclevel-1 tocsection-1"><a href="#360_Assembly"><span class="tocnumber">1</span> <span class="toctext">360 Assembly</span></a></li> 
          <li class="toclevel-1 tocsection-2"><a href="#ABAP"><span class="tocnumber">2</span> <span class="toctext">ABAP</span></a></li> 
          <li class="toclevel-1 tocsection-3"><a href="#ACL2"><span class="tocnumber">3</span> <span class="toctext">ACL2</span></a></li> 
          <li class="toclevel-1 tocsection-4"><a href="#ActionScript"><span class="tocnumber">4</span> <span class="toctext">ActionScript</span></a></li> 
          <li class="toclevel-1 tocsection-5"><a href="#Ada"><span class="tocnumber">5</span> <span class="toctext">Ada</span></a></li> 
          <li class="toclevel-1 tocsection-6"><a href="#ALGOL_68"><span class="tocnumber">6</span> <span class="toctext">ALGOL 68</span></a></li> 
          <li class="toclevel-1 tocsection-7"><a href="#ALGOL_W"><span class="tocnumber">7</span> <span class="toctext">ALGOL W</span></a></li> 
          <li class="toclevel-1 tocsection-8"><a href="#APL"><span class="tocnumber">8</span> <span class="toctext">APL</span></a></li> 
          <li class="toclevel-1 tocsection-9"><a href="#ARM_Assembly"><span class="tocnumber">9</span> <span class="toctext">ARM Assembly</span></a></li> 
          <li class="toclevel-1 tocsection-10"><a href="#AutoHotkey"><span class="tocnumber">10</span> <span class="toctext">AutoHotkey</span></a></li> 
          <li class="toclevel-1 tocsection-11"><a href="#AutoIt"><span class="tocnumber">11</span> <span class="toctext">AutoIt</span></a></li> 
          <li class="toclevel-1 tocsection-12"><a href="#AWK"><span class="tocnumber">12</span> <span class="toctext">AWK</span></a></li> 
          <li class="toclevel-1 tocsection-13"><a href="#Bash"><span class="tocnumber">13</span> <span class="toctext">Bash</span></a></li> 
          <li class="toclevel-1 tocsection-14"><a href="#Batch_File"><span class="tocnumber">14</span> <span class="toctext">Batch File</span></a></li> 
          <li class="toclevel-1 tocsection-15"><a href="#BBC_BASIC"><span class="tocnumber">15</span> <span class="toctext">BBC BASIC</span></a></li> 
          <li class="toclevel-1 tocsection-16"><a href="#bc"><span class="tocnumber">16</span> <span class="toctext">bc</span></a></li> 
          <li class="toclevel-1 tocsection-17"><a href="#Bracmat"><span class="tocnumber">17</span> <span class="toctext">Bracmat</span></a></li> 
          <li class="toclevel-1 tocsection-18"><a href="#C"><span class="tocnumber">18</span> <span class="toctext">C</span></a></li> 
          <li class="toclevel-1 tocsection-19"><a href="#C.2B.2B"><span class="tocnumber">19</span> <span class="toctext">C++</span></a> 
           <ul> 
            <li class="toclevel-2 tocsection-20"><a href="#C.2B.2B11"><span class="tocnumber">19.1</span> <span class="toctext">C++11</span></a></li> 
           </ul> </li> 
          <li class="toclevel-1 tocsection-21"><a href="#C.23"><span class="tocnumber">20</span> <span class="toctext">C#</span></a></li> 
          <li class="toclevel-1 tocsection-22"><a href="#Cach.C3.A9_ObjectScript"><span class="tocnumber">21</span> <span class="toctext">Caché ObjectScript</span></a></li> 
          <li class="toclevel-1 tocsection-23"><a href="#Ceylon"><span class="tocnumber">22</span> <span class="toctext">Ceylon</span></a></li> 
          <li class="toclevel-1 tocsection-24"><a href="#Clojure"><span class="tocnumber">23</span> <span class="toctext">Clojure</span></a></li> 
          <li class="toclevel-1 tocsection-25"><a href="#COBOL"><span class="tocnumber">24</span> <span class="toctext">COBOL</span></a></li> 
          <li class="toclevel-1 tocsection-26"><a href="#Common_Lisp"><span class="tocnumber">25</span> <span class="toctext">Common Lisp</span></a></li> 
          <li class="toclevel-1 tocsection-27"><a href="#D"><span class="tocnumber">26</span> <span class="toctext">D</span></a> 
           <ul> 
            <li class="toclevel-2 tocsection-28"><a href="#Functional_Version"><span class="tocnumber">26.1</span> <span class="toctext">Functional Version</span></a></li> 
            <li class="toclevel-2 tocsection-29"><a href="#More_Imperative_Version"><span class="tocnumber">26.2</span> <span class="toctext">More Imperative Version</span></a></li> 
            <li class="toclevel-2 tocsection-30"><a href="#Stronger_Statically_Typed_Version"><span class="tocnumber">26.3</span> <span class="toctext">Stronger Statically Typed Version</span></a></li> 
           </ul> </li> 
          <li class="toclevel-1 tocsection-31"><a href="#EchoLisp"><span class="tocnumber">27</span> <span class="toctext">EchoLisp</span></a></li> 
          <li class="toclevel-1 tocsection-32"><a href="#Elixir"><span class="tocnumber">28</span> <span class="toctext">Elixir</span></a></li> 
          <li class="toclevel-1 tocsection-33"><a href="#Erlang"><span class="tocnumber">29</span> <span class="toctext">Erlang</span></a></li> 
          <li class="toclevel-1 tocsection-34"><a href="#Euphoria"><span class="tocnumber">30</span> <span class="toctext">Euphoria</span></a></li> 
          <li class="toclevel-1 tocsection-35"><a href="#F.23"><span class="tocnumber">31</span> <span class="toctext">F#</span></a></li> 
          <li class="toclevel-1 tocsection-36"><a href="#Factor"><span class="tocnumber">32</span> <span class="toctext">Factor</span></a></li> 
          <li class="toclevel-1 tocsection-37"><a href="#Forth"><span class="tocnumber">33</span> <span class="toctext">Forth</span></a></li> 
          <li class="toclevel-1 tocsection-38"><a href="#Fortran"><span class="tocnumber">34</span> <span class="toctext">Fortran</span></a></li> 
          <li class="toclevel-1 tocsection-39"><a href="#FreeBASIC"><span class="tocnumber">35</span> <span class="toctext">FreeBASIC</span></a></li> 
          <li class="toclevel-1 tocsection-40"><a href="#FunL"><span class="tocnumber">36</span> <span class="toctext">FunL</span></a></li> 
          <li class="toclevel-1 tocsection-41"><a href="#Gambas"><span class="tocnumber">37</span> <span class="toctext">Gambas</span></a></li> 
          <li class="toclevel-1 tocsection-42"><a href="#GAP"><span class="tocnumber">38</span> <span class="toctext">GAP</span></a></li> 
          <li class="toclevel-1 tocsection-43"><a href="#Go"><span class="tocnumber">39</span> <span class="toctext">Go</span></a></li> 
          <li class="toclevel-1 tocsection-44"><a href="#Groovy"><span class="tocnumber">40</span> <span class="toctext">Groovy</span></a></li> 
          <li class="toclevel-1 tocsection-45"><a href="#Haskell"><span class="tocnumber">41</span> <span class="toctext">Haskell</span></a></li> 
          <li class="toclevel-1 tocsection-46"><a href="#HicEst"><span class="tocnumber">42</span> <span class="toctext">HicEst</span></a></li> 
          <li class="toclevel-1 tocsection-47"><a href="#Icon_and_Unicon"><span class="tocnumber">43</span> <span class="toctext">Icon and Unicon</span></a></li> 
          <li class="toclevel-1 tocsection-48"><a href="#J"><span class="tocnumber">44</span> <span class="toctext">J</span></a></li> 
          <li class="toclevel-1 tocsection-49"><a href="#Java"><span class="tocnumber">45</span> <span class="toctext">Java</span></a></li> 
          <li class="toclevel-1 tocsection-50"><a href="#JavaScript"><span class="tocnumber">46</span> <span class="toctext">JavaScript</span></a></li> 
          <li class="toclevel-1 tocsection-51"><a href="#jq"><span class="tocnumber">47</span> <span class="toctext">jq</span></a></li> 
          <li class="toclevel-1 tocsection-52"><a href="#Julia"><span class="tocnumber">48</span> <span class="toctext">Julia</span></a></li> 
          <li class="toclevel-1 tocsection-53"><a href="#K"><span class="tocnumber">49</span> <span class="toctext">K</span></a></li> 
          <li class="toclevel-1 tocsection-54"><a href="#Kotlin"><span class="tocnumber">50</span> <span class="toctext">Kotlin</span></a></li> 
          <li class="toclevel-1 tocsection-55"><a href="#Lasso"><span class="tocnumber">51</span> <span class="toctext">Lasso</span></a></li> 
          <li class="toclevel-1 tocsection-56"><a href="#Liberty_BASIC"><span class="tocnumber">52</span> <span class="toctext">Liberty BASIC</span></a></li> 
          <li class="toclevel-1 tocsection-57"><a href="#LiveCode"><span class="tocnumber">53</span> <span class="toctext">LiveCode</span></a></li> 
          <li class="toclevel-1 tocsection-58"><a href="#Logo"><span class="tocnumber">54</span> <span class="toctext">Logo</span></a></li> 
          <li class="toclevel-1 tocsection-59"><a href="#Lua"><span class="tocnumber">55</span> <span class="toctext">Lua</span></a></li> 
          <li class="toclevel-1 tocsection-60"><a href="#Mathematica"><span class="tocnumber">56</span> <span class="toctext">Mathematica</span></a> 
           <ul> 
            <li class="toclevel-2 tocsection-61"><a href="#Alternate_Code"><span class="tocnumber">56.1</span> <span class="toctext">Alternate Code</span></a></li> 
           </ul> </li> 
          <li class="toclevel-1 tocsection-62"><a href="#MATLAB"><span class="tocnumber">57</span> <span class="toctext">MATLAB</span></a></li> 
          <li class="toclevel-1 tocsection-63"><a href="#MUMPS"><span class="tocnumber">58</span> <span class="toctext">MUMPS</span></a></li> 
          <li class="toclevel-1 tocsection-64"><a href="#NetRexx"><span class="tocnumber">59</span> <span class="toctext">NetRexx</span></a></li> 
          <li class="toclevel-1 tocsection-65"><a href="#Nim"><span class="tocnumber">60</span> <span class="toctext">Nim</span></a></li> 
          <li class="toclevel-1 tocsection-66"><a href="#Objeck"><span class="tocnumber">61</span> <span class="toctext">Objeck</span></a></li> 
          <li class="toclevel-1 tocsection-67"><a href="#Objective-C"><span class="tocnumber">62</span> <span class="toctext">Objective-C</span></a></li> 
          <li class="toclevel-1 tocsection-68"><a href="#OCaml"><span class="tocnumber">63</span> <span class="toctext">OCaml</span></a></li> 
          <li class="toclevel-1 tocsection-69"><a href="#Octave"><span class="tocnumber">64</span> <span class="toctext">Octave</span></a></li> 
          <li class="toclevel-1 tocsection-70"><a href="#Oforth"><span class="tocnumber">65</span> <span class="toctext">Oforth</span></a></li> 
          <li class="toclevel-1 tocsection-71"><a href="#OpenEdge.2FProgress"><span class="tocnumber">66</span> <span class="toctext">OpenEdge/Progress</span></a></li> 
          <li class="toclevel-1 tocsection-72"><a href="#Order"><span class="tocnumber">67</span> <span class="toctext">Order</span></a></li> 
          <li class="toclevel-1 tocsection-73"><a href="#Oz"><span class="tocnumber">68</span> <span class="toctext">Oz</span></a></li> 
          <li class="toclevel-1 tocsection-74"><a href="#Pascal"><span class="tocnumber">69</span> <span class="toctext">Pascal</span></a></li> 
          <li class="toclevel-1 tocsection-75"><a href="#Perl"><span class="tocnumber">70</span> <span class="toctext">Perl</span></a></li> 
          <li class="toclevel-1 tocsection-76"><a href="#Perl_6"><span class="tocnumber">71</span> <span class="toctext">Perl 6</span></a></li> 
          <li class="toclevel-1 tocsection-77"><a href="#Phix"><span class="tocnumber">72</span> <span class="toctext">Phix</span></a></li> 
          <li class="toclevel-1 tocsection-78"><a href="#PHP"><span class="tocnumber">73</span> <span class="toctext">PHP</span></a></li> 
          <li class="toclevel-1 tocsection-79"><a href="#PicoLisp"><span class="tocnumber">74</span> <span class="toctext">PicoLisp</span></a></li> 
          <li class="toclevel-1 tocsection-80"><a href="#PL.2FI"><span class="tocnumber">75</span> <span class="toctext">PL/I</span></a></li> 
          <li class="toclevel-1 tocsection-81"><a href="#PL.2FSQL"><span class="tocnumber">76</span> <span class="toctext">PL/SQL</span></a></li> 
          <li class="toclevel-1 tocsection-82"><a href="#PowerShell"><span class="tocnumber">77</span> <span class="toctext">PowerShell</span></a></li> 
          <li class="toclevel-1 tocsection-83"><a href="#PureBasic"><span class="tocnumber">78</span> <span class="toctext">PureBasic</span></a></li> 
          <li class="toclevel-1 tocsection-84"><a href="#Python"><span class="tocnumber">79</span> <span class="toctext">Python</span></a></li> 
          <li class="toclevel-1 tocsection-85"><a href="#R"><span class="tocnumber">80</span> <span class="toctext">R</span></a></li> 
          <li class="toclevel-1 tocsection-86"><a href="#Racket"><span class="tocnumber">81</span> <span class="toctext">Racket</span></a></li> 
          <li class="toclevel-1 tocsection-87"><a href="#REXX"><span class="tocnumber">82</span> <span class="toctext">REXX</span></a> 
           <ul> 
            <li class="toclevel-2 tocsection-88"><a href="#version_1"><span class="tocnumber">82.1</span> <span class="toctext">version 1</span></a></li> 
            <li class="toclevel-2 tocsection-89"><a href="#Version_2"><span class="tocnumber">82.2</span> <span class="toctext">Version 2</span></a></li> 
           </ul> </li> 
          <li class="toclevel-1 tocsection-90"><a href="#Ring"><span class="tocnumber">83</span> <span class="toctext">Ring</span></a></li> 
          <li class="toclevel-1 tocsection-91"><a href="#Ruby"><span class="tocnumber">84</span> <span class="toctext">Ruby</span></a></li> 
          <li class="toclevel-1 tocsection-92"><a href="#Run_BASIC"><span class="tocnumber">85</span> <span class="toctext">Run BASIC</span></a></li> 
          <li class="toclevel-1 tocsection-93"><a href="#Rust"><span class="tocnumber">86</span> <span class="toctext">Rust</span></a></li> 
          <li class="toclevel-1 tocsection-94"><a href="#Scala"><span class="tocnumber">87</span> <span class="toctext">Scala</span></a> 
           <ul> 
            <li class="toclevel-2 tocsection-95"><a href="#Functional_style_.28Recommended.29"><span class="tocnumber">87.1</span> <span class="toctext">Functional style (Recommended)</span></a></li> 
            <li class="toclevel-2 tocsection-96"><a href="#Imperative_style"><span class="tocnumber">87.2</span> <span class="toctext">Imperative style</span></a></li> 
           </ul> </li> 
          <li class="toclevel-1 tocsection-97"><a href="#Scheme"><span class="tocnumber">88</span> <span class="toctext">Scheme</span></a></li> 
          <li class="toclevel-1 tocsection-98"><a href="#sed"><span class="tocnumber">89</span> <span class="toctext">sed</span></a></li> 
          <li class="toclevel-1 tocsection-99"><a href="#Seed7"><span class="tocnumber">90</span> <span class="toctext">Seed7</span></a></li> 
          <li class="toclevel-1 tocsection-100"><a href="#SequenceL"><span class="tocnumber">91</span> <span class="toctext">SequenceL</span></a></li> 
          <li class="toclevel-1 tocsection-101"><a href="#Sidef"><span class="tocnumber">92</span> <span class="toctext">Sidef</span></a></li> 
          <li class="toclevel-1 tocsection-102"><a href="#SNOBOL4"><span class="tocnumber">93</span> <span class="toctext">SNOBOL4</span></a></li> 
          <li class="toclevel-1 tocsection-103"><a href="#SPARK"><span class="tocnumber">94</span> <span class="toctext">SPARK</span></a></li> 
          <li class="toclevel-1 tocsection-104"><a href="#Standard_ML"><span class="tocnumber">95</span> <span class="toctext">Standard ML</span></a></li> 
          <li class="toclevel-1 tocsection-105"><a href="#Swift"><span class="tocnumber">96</span> <span class="toctext">Swift</span></a></li> 
          <li class="toclevel-1 tocsection-106"><a href="#Tcl"><span class="tocnumber">97</span> <span class="toctext">Tcl</span></a></li> 
          <li class="toclevel-1 tocsection-107"><a href="#TI-83_BASIC"><span class="tocnumber">98</span> <span class="toctext">TI-83 BASIC</span></a></li> 
          <li class="toclevel-1 tocsection-108"><a href="#Transact-SQL"><span class="tocnumber">99</span> <span class="toctext">Transact-SQL</span></a></li> 
          <li class="toclevel-1 tocsection-109"><a href="#TUSCRIPT"><span class="tocnumber">100</span> <span class="toctext">TUSCRIPT</span></a></li> 
          <li class="toclevel-1 tocsection-110"><a href="#TXR"><span class="tocnumber">101</span> <span class="toctext">TXR</span></a></li> 
          <li class="toclevel-1 tocsection-111"><a href="#UNIX_Shell"><span class="tocnumber">102</span> <span class="toctext">UNIX Shell</span></a></li> 
          <li class="toclevel-1 tocsection-112"><a href="#Ursala"><span class="tocnumber">103</span> <span class="toctext">Ursala</span></a></li> 
          <li class="toclevel-1 tocsection-113"><a href="#VBScript"><span class="tocnumber">104</span> <span class="toctext">VBScript</span></a></li> 
          <li class="toclevel-1 tocsection-114"><a href="#Visual_Basic_.NET"><span class="tocnumber">105</span> <span class="toctext">Visual Basic .NET</span></a></li> 
          <li class="toclevel-1 tocsection-115"><a href="#Xojo"><span class="tocnumber">106</span> <span class="toctext">Xojo</span></a></li> 
          <li class="toclevel-1 tocsection-116"><a href="#zkl"><span class="tocnumber">107</span> <span class="toctext">zkl</span></a></li> 
          <li class="toclevel-1 tocsection-117"><a href="#ZX_Spectrum_Basic"><span class="tocnumber">108</span> <span class="toctext">ZX Spectrum Basic</span></a></li> 
         </ul> 
        </div> 
        <h2><span class="mw-headline" id="360_Assembly"><a href="/wiki/Category:360_Assembly" title="Category:360 Assembly">360 Assembly</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=1" title="Edit section: 360 Assembly">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta translation">
         <b>Translation of</b>: 
         <a href="#VBScript">VBScript</a>
        </div> 
        <p>For maximum compatibility, this program uses only the basic instruction set (S/360) and an ASSIST macro (XPRNT) to keep the code as short as possible. </p> 
        <pre class="text highlighted_source">*        Luhn test of credit card numbers        22/05/2016<br>LUHNTEST CSECT<br>         USING  LUHNTEST,R13       base register<br>         B      72(R15)            skip savearea<br>         DC     17F'0'             savearea<br>         STM    R14,R12,12(R13)    prolog<br>         ST     R13,4(R15)         "<br>         ST     R15,8(R13)         "<br>         LR     R13,R15            "<br>         LA     R9,T               @t(k)<br>         LA     R8,N               for n<br>LOOPK    EQU    *                  for k=1 to n<br>         LR     R4,R9              @t(k),@s[1]<br>         LA     R6,1               from i=1<br>         LA     R7,M               to m<br>LOOPI1   CR     R6,R7              for i=1 to m<br>         BH     ELOOPI1            leave i<br>         CLI    0(R4),C' '           if mid(s,i,1)=" "<br>         BNE    ITERI1               then<br>         BCTR   R6,0                   i-1<br>         ST     R6,L                   l=i-1<br>         B      ELOOPI1                exit for<br>*                                    end if<br>ITERI1   LA     R4,1(R4)             next @s[i]<br>         LA     R6,1(R6)             i=i+1<br>         B      LOOPI1             next i<br>ELOOPI1  EQU    *                  out of loop i<br>         MVC    W,BLANK            w=" "<br>         LA     R4,W               <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="48213f75083f">[email&nbsp;protected]</a><br>         LR     R5,R9              <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="aac3d997ead9">[email&nbsp;protected]</a><br>         A      R5,L               <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f69f85cbb685">[email&nbsp;protected]</a>+l<br>         BCTR   R5,0               is=s+l-1<br>         L      R6,L               i=l<br>         LA     R7,1               to 1<br>LOOPI2   CR     R6,R7              for i=l to 1 by -1 <br>         BL     ELOOPI2            leave i<br>         MVC    0(1,R4),0(R5)        mid(w,iw,1)=mid(s,is,1)<br>         LA     R4,1(R4)             iw=iw+1<br>         BCTR   R5,0                 is=is-1<br>         BCTR   R6,0                 i=i-1<br>         B      LOOPI2             next i<br>ELOOPI2  EQU    *                  out of loop i<br>         LA     R11,0              s1=0<br>         LA     R12,0              s2=0<br>         LA     R6,1               i=1<br>         L      R7,L               to l<br>LOOPI3   CR     R6,R7              for i=1 to l<br>         BH     ELOOPI3            leave i<br>         LA     R2,W-1             @w-1<br>         AR     R2,R6              w[i]<br>         MVC    CI,0(R2)           ci=mid(w,i,1)<br>         NI     CI,X'0F'           zap upper half byte<br>         LR     R4,R6              i<br>         SRDA   R4,32              &gt;&gt;32<br>         D      R4,=F'2'           i/2<br>         LTR    R4,R4              if mod(i,2)&gt;0<br>         BNH    NOTMOD             then<br>         XR     R2,R2                clear<br>         IC     R2,CI                z=cint(mid(w,i,1))<br>         AR     R11,R2               s1=s1+cint(mid(w,i,1))<br>         B      EIFMOD             else<br>NOTMOD   XR     R2,R2                clear<br>         IC     R2,CI                cint(mid(w,i,1))<br>         SLA    R2,1                 *2<br>         ST     R2,Z                 z=cint(mid(w,i,1))*2<br>         C      R2,=F'10'            if z&lt;10<br>         BNL    GE10                 then<br>         A      R12,Z                  s2=s2+z<br>         B      EIF10                else<br>GE10     L      R2,Z                   z<br>         CVD    R2,PL8                 binary to packed<br>         UNPK   CL16,PL8               packed to zoned<br>         OI     CL16+15,X'F0'          zoned to char (zap sign)<br>         MVC    X(1),CL16+15           x=right(cstr(z),1)<br>         NI     X,X'0F'                zap upper half byte<br>         XR     R2,R2                  r2=0<br>         IC     R2,X                   r2=cint(right(cstr(z),1))<br>         AR     R12,R2                 s2=s2+r2<br>         LA     R12,1(R12)             s2=s2+cint(right(cstr(z),1))+1<br>EIF10    EQU    *                    end if<br>EIFMOD   EQU    *                  end if<br>         LA     R6,1(R6)           i=i+1<br>         B      LOOPI3             next i<br>ELOOPI3  EQU    *                  out of loop i<br>         LR     R1,R11             s1<br>         AR     R1,R12             s1+s2<br>         CVD    R1,PL8             binary to packed<br>         UNPK   CL16,PL8           packed to zoned<br>         CLI    CL16+15,X'C0'      if right(cstr(s1+s2),1)="0"<br>         BNE    NOTZERO            then<br>         MVC    R,=CL8'Valid'        r="Valid"<br>         B      ECLI               else<br>NOTZERO  MVC    R,=CL8'Invalid'      r="Invalid"<br>ECLI     EQU    *                  end if<br>         MVC    PG(M),0(R9)        t(k)<br>         MVC    PG+M+1(L'R),R      r<br>         XPRNT  PG,L'PG            print buffer<br>         LA     R9,M(R9)           at=at+m<br>         BCT    R8,LOOPK           next k<br>         L      R13,4(0,R13)       epilog<br>         LM     R14,R12,12(R13)    "<br>         XR     R15,R15            "<br>         BR     R14                exit<br>N        EQU    (TEND-T)/L'T<br>M        EQU    20<br>T        DC     CL(M)'49927398716         '<br>         DC     CL(M)'49927398717         '<br>         DC     CL(M)'1234567812345678    '<br>         DC     CL(M)'1234567812345670    '<br>TEND     DS     0C<br>W        DS     CL(M)<br>BLANK    DC     CL(M)' '<br>L        DS     F<br>Z        DS     F<br>PL8      DS     PL8 <br>CL16     DS     CL16<br>CI       DS     C<br>X        DS     C<br>R        DS     CL8<br>PG       DC     CL80' '            buffer<br>         YREGS<br>         END    LUHNTEST</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716          Valid
49927398717          Invalid
1234567812345678     Invalid
1234567812345670     Valid
</pre> 
        <h2><span class="mw-headline" id="ABAP"><a href="/wiki/Category:ABAP" title="Category:ABAP">ABAP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=2" title="Edit section: ABAP">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="abap highlighted_source"><a href="http://help.sap.com/abapdocu/en/ABAPMETHOD.htm"><span class="kw3">METHOD</span></a> luhn_check<span class="sy0">.</span><br>&nbsp;<br>  <a href="http://help.sap.com/abapdocu/en/ABAPDATA.htm"><span class="kw2">DATA</span></a><span class="sy0">:</span> <a href="http://help.sap.com/abapdocu/en/ABAPSUM.htm"><span class="kw3">sum</span></a><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span> <span class="kw4">TYPE</span> n <span class="kw4">VALUE</span> <span class="nu0">0</span><span class="sy0">.</span> <span class="co1">" Sum of checksum.</span><br>  <a href="http://help.sap.com/abapdocu/en/ABAPDATA.htm"><span class="kw2">DATA</span></a><span class="sy0">:</span> <span class="kw4">current</span> <span class="kw4">TYPE</span> i<span class="sy0">.</span> <span class="co1">" Current digit.</span><br>  <a href="http://help.sap.com/abapdocu/en/ABAPDATA.htm"><span class="kw2">DATA</span></a><span class="sy0">:</span> odd <span class="kw4">TYPE</span> i <span class="kw4">VALUE</span> <span class="nu0">1</span><span class="sy0">.</span> <span class="co1">" Multiplier.</span><br>  <a href="http://help.sap.com/abapdocu/en/ABAPDATA.htm"><span class="kw2">DATA</span></a><span class="sy0">:</span> len <span class="kw4">TYPE</span> i<span class="sy0">.</span> <span class="co1">" String crowler.</span><br>&nbsp;<br>&nbsp;<br>  <span class="co1">" Luhn algorithm.</span><br>  len <span class="sy1">=</span> <span class="kw4">NUMOFCHAR</span><span class="br0">(</span> pi_string <span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">.</span><br>  <a href="http://help.sap.com/abapdocu/en/ABAPWHILE.htm"><span class="kw1">WHILE</span></a> <span class="br0">(</span> len <span class="sy1">&gt;=</span> <span class="nu0">0</span> <span class="br0">)</span><span class="sy0">.</span><br>    <span class="kw4">current</span> <span class="sy1">=</span> pi_string<span class="sy0">+</span>len<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span> <span class="sy0">*</span> odd<span class="sy0">.</span><br>    <a href="http://help.sap.com/abapdocu/en/ABAPIF.htm"><span class="kw1">IF</span></a> <span class="br0">(</span> <span class="kw4">current</span> <span class="sy1">&gt;</span> <span class="nu0">9</span> <span class="br0">)</span><span class="sy0">.</span><br>      <span class="kw4">current</span> <span class="sy1">=</span> <span class="kw4">current</span> <span class="sy0">-</span> <span class="nu0">9</span><span class="sy0">.</span> <span class="co1">" Digits sum.</span><br>    <a href="http://help.sap.com/abapdocu/en/ABAPENDIF.htm"><span class="kw1">ENDIF</span></a><span class="sy0">.</span><br>    <a href="http://help.sap.com/abapdocu/en/ABAPSUM.htm"><span class="kw3">sum</span></a> <span class="sy1">=</span> <a href="http://help.sap.com/abapdocu/en/ABAPSUM.htm"><span class="kw3">sum</span></a> <span class="sy0">+</span> <span class="kw4">current</span><span class="sy0">.</span><br>    odd <span class="sy1">=</span> <span class="nu0">3</span> <span class="sy0">-</span> odd<span class="sy0">.</span> <span class="co1">" 1 &lt;--&gt; 2 Swich</span><br>    len <span class="sy1">=</span> len <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">.</span> <span class="co1">" Move to next charcter.</span><br>  <a href="http://help.sap.com/abapdocu/en/ABAPENDWHILE.htm"><span class="kw1">ENDWHILE</span></a><span class="sy0">.</span><br>&nbsp;<br>  <span class="co1">" Validation check.</span><br>  <a href="http://help.sap.com/abapdocu/en/ABAPIF.htm"><span class="kw1">IF</span></a> <span class="br0">(</span> <a href="http://help.sap.com/abapdocu/en/ABAPSUM.htm"><span class="kw3">sum</span></a> <span class="sy1">=</span> <span class="nu0">0</span> <span class="br0">)</span><span class="sy0">.</span><br>    pr_valid <span class="sy1">=</span> abap_true<span class="sy0">.</span><br>  <a href="http://help.sap.com/abapdocu/en/ABAPELSE.htm"><span class="kw1">ELSE</span></a><span class="sy0">.</span><br>    pr_valid <span class="sy1">=</span> abap_false<span class="sy0">.</span><br>  <a href="http://help.sap.com/abapdocu/en/ABAPENDIF.htm"><span class="kw1">ENDIF</span></a><span class="sy0">.</span><br>&nbsp;<br><a href="http://help.sap.com/abapdocu/en/ABAPENDMETHOD.htm"><span class="kw3">ENDMETHOD</span></a><span class="sy0">.</span></pre> 
        <h2><span class="mw-headline" id="ACL2"><a href="/wiki/Category:ACL2" title="Category:ACL2">ACL2</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=3" title="Edit section: ACL2">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="lisp highlighted_source"><span class="br0">(</span>include-book <span class="st0">"arithmetic-3/top"</span> <span class="sy0">:</span><span class="me1">dir</span> <span class="sy0">:</span><span class="me1">system</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> digits <span class="br0">(</span>n<span class="br0">)</span><br>   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>zp n<span class="br0">)</span><br>       <span class="kw1">nil</span><br>       <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span>mod n <span class="nu0">10</span><span class="br0">)</span><br>             <span class="br0">(</span>digits <span class="br0">(</span>floor n <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> sum <span class="br0">(</span>xs<span class="br0">)</span><br>   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>endp xs<span class="br0">)</span><br>       <span class="nu0">0</span><br>       <span class="br0">(</span>+ <span class="br0">(</span>first xs<span class="br0">)</span><br>          <span class="br0">(</span>sum <span class="br0">(</span>rest xs<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> double-and-sum-digits <span class="br0">(</span>xs<span class="br0">)</span><br>   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>endp xs<span class="br0">)</span><br>       <span class="kw1">nil</span><br>       <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span>sum <span class="br0">(</span>digits <span class="br0">(</span>* <span class="nu0">2</span> <span class="br0">(</span>first xs<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>             <span class="br0">(</span>double-and-sum-digits <span class="br0">(</span>rest xs<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> dmx <span class="br0">(</span>xs<span class="br0">)</span><br>   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span>endp <span class="br0">(</span>rest xs<span class="br0">)</span><span class="br0">)</span><br>       <span class="br0">(</span>mv xs <span class="kw1">nil</span><span class="br0">)</span><br>       <span class="br0">(</span>mv-<span class="kw1">let</span> <span class="br0">(</span>odds evens<span class="br0">)</span><br>               <span class="br0">(</span>dmx <span class="br0">(</span>rest <span class="br0">(</span>rest xs<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span>mv <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span>first xs<span class="br0">)</span> odds<span class="br0">)</span><br>              <span class="br0">(</span><span class="kw1">cons</span> <span class="br0">(</span>second xs<span class="br0">)</span> evens<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> luhn <span class="br0">(</span>n<span class="br0">)</span><br>   <span class="br0">(</span>mv-<span class="kw1">let</span> <span class="br0">(</span>odds evens<span class="br0">)</span><br>           <span class="br0">(</span>dmx <span class="br0">(</span>digits n<span class="br0">)</span><span class="br0">)</span><br>      <span class="br0">(</span><span class="sy0">=</span> <span class="br0">(</span>mod <span class="br0">(</span>+ <span class="br0">(</span>sum odds<span class="br0">)</span><br>                 <span class="br0">(</span>sum <span class="br0">(</span>double-and-sum-digits evens<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>              <span class="nu0">10</span><span class="br0">)</span><br>         <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>&gt; (luhn 49927398716)
T
&gt; (luhn 49927398717)
NIL
&gt; (luhn 1234567812345678)
NIL
&gt; (luhn 1234567812345670)
T</pre> 
        <h2><span class="mw-headline" id="ActionScript"><a href="/wiki/Category:ActionScript" title="Category:ActionScript">ActionScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=4" title="Edit section: ActionScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="actionscript highlighted_source"><span class="kw2">function</span> isValid<span class="br0">(</span>numString:<span class="kw3">String</span><span class="br0">)</span>:<span class="kw3">Boolean</span><br><span class="br0">{</span><br>	<span class="kw2">var</span> isOdd:<span class="kw3">Boolean</span> = <span class="kw2">true</span>;<br>	<span class="kw2">var</span> oddSum:uint = <span class="nu0">0</span>;<br>	<span class="kw2">var</span> evenSum:uint = <span class="nu0">0</span>;<br>	<span class="kw1">for</span><span class="br0">(</span><span class="kw2">var</span> i:<span class="kw3">int</span> = numString.<span class="kw3">length</span> - <span class="nu0">1</span>; i <span class="sy0">&gt;</span>= <span class="nu0">0</span>; i--<span class="br0">)</span><br>	<span class="br0">{</span><br>		<span class="kw2">var</span> digit:uint = uint<span class="br0">(</span>numString.<span class="kw3">charAt</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span><br>		<span class="kw1">if</span><span class="br0">(</span>isOdd<span class="br0">)</span> oddSum += digit;<br>		<span class="kw1">else</span> evenSum += digit<span class="sy0">/</span><span class="nu0">5</span> + <span class="br0">(</span><span class="nu0">2</span><span class="sy0">*</span>digit<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span>;<br>		isOdd = <span class="sy0">!</span>isOdd;<br>	<span class="br0">}</span><br>	<span class="kw1">if</span><span class="br0">(</span><span class="br0">(</span>oddSum + evenSum<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> == <span class="nu0">0</span><span class="br0">)</span> <span class="kw1">return</span> <span class="kw2">true</span>; <br>	<span class="kw1">return</span> <span class="kw2">false</span>;<br><span class="br0">}</span><br>&nbsp;<br><span class="kw3">trace</span><span class="br0">(</span>isValid<span class="br0">(</span><span class="st0">"49927398716"</span><span class="br0">)</span><span class="br0">)</span>;<br><span class="kw3">trace</span><span class="br0">(</span>isValid<span class="br0">(</span><span class="st0">"49927398717"</span><span class="br0">)</span><span class="br0">)</span>;<br><span class="kw3">trace</span><span class="br0">(</span>isValid<span class="br0">(</span><span class="st0">"1234567812345678"</span><span class="br0">)</span><span class="br0">)</span>;<br><span class="kw3">trace</span><span class="br0">(</span>isValid<span class="br0">(</span><span class="st0">"1234567812345670"</span><span class="br0">)</span><span class="br0">)</span>;</pre> 
        <h2><span class="mw-headline" id="Ada"><a href="/wiki/Category:Ada" title="Category:Ada">Ada</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=5" title="Edit section: Ada">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta translation">
         <b>Translation of</b>: 
         <a href="#C">C</a>
        </div> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/GNAT" title="GNAT">GNAT</a>
        </div> 
        <pre class="ada highlighted_source"><span class="kw3">with</span> Ada.<span class="me1">Text_IO</span>;<br><span class="kw3">use</span>  Ada.<span class="me1">Text_IO</span>;<br>&nbsp;<br><span class="kw3">procedure</span> Luhn <span class="kw1">is</span><br>&nbsp;<br>  <span class="kw3">function</span> Luhn_Test <span class="br0">(</span>Number: String<span class="br0">)</span> <span class="kw1">return</span> Boolean <span class="kw1">is</span><br>    Sum &nbsp;: Natural&nbsp;:= <span class="nu0">0</span>;<br>    Odd &nbsp;: Boolean&nbsp;:= True;<br>    Digit: Natural <span class="kw3">range</span> <span class="nu0">0</span> .. <span class="nu0">9</span>;<br>  <span class="kw1">begin</span><br>    <span class="kw1">for</span> p <span class="kw3">in</span> <span class="kw3">reverse</span> Number'<span class="kw3">Range</span> <span class="kw1">loop</span><br>      Digit&nbsp;:= Integer'Value <span class="br0">(</span>Number <span class="br0">(</span>p..<span class="me1">p</span><span class="br0">)</span><span class="br0">)</span>;<br>      <span class="kw1">if</span> Odd <span class="kw1">then</span><br>        Sum&nbsp;:= Sum + Digit;<br>      <span class="kw1">else</span><br>        Sum&nbsp;:= Sum + <span class="br0">(</span>Digit*<span class="nu0">2</span> <span class="kw2">mod</span> <span class="nu0">10</span><span class="br0">)</span> + <span class="br0">(</span>Digit / <span class="nu0">5</span><span class="br0">)</span>;<br>      <span class="kw1">end</span> <span class="kw1">if</span>;<br>      Odd&nbsp;:= <span class="kw2">not</span> Odd;<br>    <span class="kw1">end</span> <span class="kw1">loop</span>;<br>    <span class="kw1">return</span> <span class="br0">(</span>Sum <span class="kw2">mod</span> <span class="nu0">10</span><span class="br0">)</span> = <span class="nu0">0</span>;<br>  <span class="kw1">end</span> Luhn_Test;<br>&nbsp;<br><span class="kw1">begin</span><br>&nbsp;<br>  Put_Line <span class="br0">(</span>Boolean'Image <span class="br0">(</span>Luhn_Test <span class="br0">(</span><span class="st0">"49927398716"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>;<br>  Put_Line <span class="br0">(</span>Boolean'Image <span class="br0">(</span>Luhn_Test <span class="br0">(</span><span class="st0">"49927398717"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>;<br>  Put_Line <span class="br0">(</span>Boolean'Image <span class="br0">(</span>Luhn_Test <span class="br0">(</span><span class="st0">"1234567812345678"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>;<br>  Put_Line <span class="br0">(</span>Boolean'Image <span class="br0">(</span>Luhn_Test <span class="br0">(</span><span class="st0">"1234567812345670"</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>;<br>&nbsp;<br><span class="kw1">end</span> Luhn;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>TRUE
FALSE
FALSE
TRUE
</pre> 
        <h2><span class="mw-headline" id="ALGOL_68"><a href="/wiki/Category:ALGOL_68" title="Category:ALGOL 68">ALGOL 68</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=6" title="Edit section: ALGOL 68">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta translation">
         <b>Translation of</b>: 
         <a href="#C.2B.2B">C++</a>&nbsp;&nbsp;Note: This specimen retains the original C coding style.
        </div> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/ALGOL_68" title="ALGOL 68" class="mw-redirect">ALGOL 68</a> version Standard - no extensions to language used
        </div> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/ALGOL_68G" title="ALGOL 68G" class="mw-redirect">ALGOL 68G</a> version Any - tested with release 
         <a rel="nofollow" class="external text" href="http://sourceforge.net/projects/algol68/files/algol68g/algol68g-1.18.0/algol68g-1.18.0-9h.tiny.el5.centos.fc11.i386.rpm/download">1.18.0-9h.tiny</a>
        </div> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/ELLA_ALGOL_68" title="ELLA ALGOL 68" class="mw-redirect">ELLA ALGOL 68</a> version Any (with appropriate job cards)
        </div> 
        <pre class="algol68 highlighted_source"><span class="kw4">PROC</span> to int <span class="sy1">=</span> <span class="br0">(</span><span class="kw3">CHAR</span> c<span class="br0">)</span><span class="kw3">INT</span><span class="sy1">:</span><br>    <span class="kw8">ABS</span> c <span class="sy1">-</span> <span class="kw8">ABS</span> <span class="st0">"0"</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw4">PROC</span> confirm <span class="sy1">=</span> <span class="br0">(</span><span class="kw3">STRING</span> id<span class="br0">)</span><span class="kw3">BOOL</span><span class="sy1">:</span><br><span class="br0">(</span><br>    <span class="kw3">BOOL</span> is odd digit <span class="sy1">:=</span> <span class="kw7">TRUE</span><span class="sy1">;</span><br>    <span class="kw3">INT</span> s <span class="sy1">:=</span> 0<span class="sy1">;</span><br>    <span class="kw3">STRING</span> cp<span class="sy1">;</span><br>&nbsp;<br>    <span class="kw2">FOR</span> cp key <span class="kw2">FROM</span> <span class="kw8">UPB</span> id <span class="kw2">BY</span> <span class="sy1">-</span>1 <span class="kw2">TO</span> <span class="kw8">LWB</span> id <span class="kw2">DO</span><br>        <span class="kw3">INT</span> k <span class="sy1">:=</span> to int<span class="br0">(</span>id<span class="br0">[</span>cp key<span class="br0">]</span><span class="br0">)</span><span class="sy1">;</span><br>        s <span class="sy1">+:=</span> <br>            <span class="kw2">IF</span> is odd digit <span class="kw2">THEN</span> k<br>            <span class="kw2">ELIF</span> k <span class="sy1">/=</span> 9 <span class="kw2">THEN</span> 2<span class="sy1">*</span>k <span class="kw12">MOD</span> 9 <br>            <span class="kw2">ELSE</span> 9<br>            <span class="kw2">FI</span><span class="sy1">;</span><br>        is odd digit <span class="sy1">:=</span> <span class="kw8">NOT</span> is odd digit<br>    <span class="kw2">OD</span><span class="sy1">;</span><br>    0 <span class="sy1">=</span> s <span class="kw12">MOD</span> 10<br><span class="br0">)</span><span class="sy1">;</span><br>&nbsp;<br>main<span class="sy1">:</span><br><span class="br0">(</span><br>    <span class="br0">[</span><span class="br0">]</span><span class="kw3">STRING</span> t cases <span class="sy1">=</span> <span class="br0">(</span><br>        <span class="st0">"49927398716"</span><span class="sy1">,</span><br>        <span class="st0">"49927398717"</span><span class="sy1">,</span><br>        <span class="st0">"1234567812345678"</span><span class="sy1">,</span><br>        <span class="st0">"1234567812345670"</span><br>    <span class="br0">)</span><span class="sy1">;</span><br>    <span class="kw2">FOR</span> cp key <span class="kw2">TO</span> <span class="kw8">UPB</span> t cases <span class="kw2">DO</span><br>        <span class="kw3">STRING</span> cp <span class="sy1">=</span> t cases<span class="br0">[</span>cp key<span class="br0">]</span><span class="sy1">;</span><br>        <span class="kw22">print</span><span class="br0">(</span><span class="br0">(</span>cp<span class="sy1">,</span> <span class="st0">": "</span><span class="sy1">,</span> confirm<span class="br0">(</span>cp<span class="br0">)</span><span class="sy1">,</span> <span class="kw22">new line</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="kw2">OD</span><br><span class="br0">)</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716: T
49927398717: F
1234567812345678: F
1234567812345670: T
</pre> 
        <h2><span class="mw-headline" id="ALGOL_W"><a href="/wiki/Category:ALGOL_W" title="Category:ALGOL W">ALGOL W</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=7" title="Edit section: ALGOL W">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>Separate source so the LuhnTest procedure can be used in other tasks, e.g.: <a href="/wiki/Validate_International_Securities_Identification_Number" title="Validate International Securities Identification Number">Validate International Securities Identification Number</a> </p> 
        <pre class="text highlighted_source">% returns true if ccNumber passes the Luhn test, false otherwise&nbsp;%<br>% as Algol W has fixed length strings, the length of the number &nbsp;%<br>% must be specified in ccLength                                 &nbsp;%<br>logical procedure LuhnTest ( string(32) value ccNumber<br>                          &nbsp;; integer    value ccLength<br>                           )&nbsp;;<br>begin<br>    integer checkSum;<br>    logical oddDigit, isValid;<br>    checkSum&nbsp;:= 0;<br>    isValid&nbsp;:= oddDigit&nbsp;:= true;<br>    for cPos&nbsp;:= ccLength step -1 until 1 do begin<br>        integer digit;<br>        digit&nbsp;:= decode( ccNumber( cPos - 1 // 1 ) ) - decode( "0" );<br>        if digit &lt; 0 or digit &gt; 9 then isValid&nbsp;:= false<br>        else if oddDigit<br>        then checkSum&nbsp;:= checkSum + digit<br>        else checkSum&nbsp;:= checkSum + ( case digit + 1 of ( 0, 2, 4, 6, 8<br>                                                        , 1, 3, 5, 7, 9<br>                                                        )<br>                                    );<br>        oddDigit&nbsp;:= not oddDigit<br>    end for_cPos&nbsp;;<br>    isValid and ( ( checkSum rem 10 ) = 0 )<br>end LuhnTest</pre> 
        <p>Use the above to test the LuhnTest procedure: </p> 
        <pre class="text highlighted_source">begin<br>   &nbsp;% external procedure that returns true if ccNumber passes the Luhn test, false otherwise&nbsp;%<br>    logical procedure LuhnTest ( string(32) value ccNumber<br>                              &nbsp;; integer    value ccLength<br>                               )&nbsp;; algol "LUHN"&nbsp;;<br>&nbsp;<br>&nbsp;<br>   &nbsp;% task test cases&nbsp;%<br>&nbsp;<br>    procedure testLuhnTest ( string(32) value ccNumber<br>                          &nbsp;; integer    value ccLength<br>                           )&nbsp;;<br>        write( s_w&nbsp;:= 0, ccNumber, if LuhnTest( ccNumber, ccLength ) then " is valid" else " is invalid" );<br>&nbsp;<br>    testLuhnTest( "49927398716",      11 );<br>    testLuhnTest( "49927398717",      11 );<br>    testLuhnTest( "1234567812345678", 16 );<br>    testLuhnTest( "1234567812345670", 16 )<br>&nbsp;<br>end.</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716                      is valid
49927398717                      is invalid
1234567812345678                 is invalid
1234567812345670                 is valid
</pre> 
        <h2><span class="mw-headline" id="APL"><a href="/wiki/Category:APL" title="Category:APL">APL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=8" title="Edit section: APL">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/Dyalog_APL" title="Dyalog APL">Dyalog APL</a>
        </div> 
        <pre class="text highlighted_source">r?LuhnTest digits;even;odd;SumEven<br>(odd even)????¨{(n,2)?(?,'0')??2×n??(??)÷2}?digits<br>SumEven?{+/+/¨?¨¨?¨2×?}<br>r?'0'=?¯1??(+/odd)+(SumEven even)</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre> 1 0 0 1   
</pre> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/mw/index.php?title=APL%2BWin&amp;action=edit&amp;redlink=1" class="new" title="APL+Win (page does not exist)">APL+Win</a>
        </div> 
        <pre class="text highlighted_source">    ? ret?LuhnTest num;s1;s2<br>[1]   num??((?10?num)/10)?num<br>[2]   s1?+/((?num)?1 0)/num<br>[3]   s2?+/?(?10 10)?¨2×((?num)?0 1)/num<br>[4]   ret?0=10?s1+s2<br>    ?</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>      LuhnTest¨ 49927398716 49927398717 1234567812345678 1234567812345670
1 0 0 1
</pre> 
        <h2><span class="mw-headline" id="ARM_Assembly"><a href="/wiki/Category:ARM_Assembly" title="Category:ARM Assembly">ARM Assembly</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=9" title="Edit section: ARM Assembly">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">.text<br>.global _start<br>_start:<br>    ldr r0, =example_numbers<br>    bl test_number<br>&nbsp;<br>    add r1, r0, #1<br>    bl length<br>    add r0, r1, r0<br>    bl test_number<br>&nbsp;<br>    add r1, r0, #1<br>    bl length<br>    add r0, r1, r0<br>    bl test_number<br>&nbsp;<br>    add r1, r0, #1<br>    bl length<br>    add r0, r1, r0<br>    bl test_number<br>&nbsp;<br>    mov r0, #0<br>    mov r7, #1<br>    swi 0<br>&nbsp;<br>test_number:<br>    push {r0, lr}<br>    bl print_string<br>&nbsp;<br>    bl luhn_test<br>    cmp r0, #1<br>    ldreq r0, =valid_message<br>    ldrne r0, =invalid_message<br>    bl print_string<br>    pop {r0, lr}<br>    mov pc, lr<br>&nbsp;<br>&nbsp;<br>&nbsp;<br>print_string:<br>    push {r0-r7, lr}<br>    mov r1, r0   @ string to print<br>    bl length<br>    mov r2, r0   @ length of string<br>    mov r0, #1   @ write to stdout<br>    mov r7, #4   @ SYS_WRITE<br>    swi 0        @ call system interupt<br>    pop {r0-r7, lr}<br>    mov pc, lr<br>&nbsp;<br>@ r0 address of credit card number string<br>@ returns result in r0<br>luhn_test:<br>    push {r1-r7, lr}<br>    mov r1, r0<br>    bl isNumerical            @ check if string is a number<br>    cmp r0, #1<br>    bne .luhn_test_end        @ exit if not number<br>    mov r0, r1 <br>    ldr r1, =reversed_string  @ address to store reversed string<br>    bl reverse                @ reverse string<br>    push {r0}<br>    bl length   @ get length of string<br>    mov r4, r0  @ store string length in r4 <br>    pop {r0}<br>    mov r2, #0  @ string index<br>    mov r6, #0  @ sum of odd digits<br>    mov r7, #0  @ sum of even digits<br>    .loadNext:<br>        ldrb r3, [r1, r2]         @ load byte into r3<br>        sub r3, #'0'              @ convert letter to digit<br>        and r5, r2, #1            @ test if index is even or odd<br>        cmp r5, #0<br>        beq .odd_digit<br>        bne .even_digit<br>        .odd_digit:<br>            add r6, r3              @ add digit to sum if odd<br>            b .continue             @ skip next step<br>        .even_digit:<br>            lsl r3, #1              @ multiply digit by 2<br>            cmp r3, #10             @ sum digits<br>            subge r3, #10           @ get digit in 1s place<br>            addge r3, #1            @ add 1 for the 10s place<br>            add r7, r3              @ add digit sum to the total<br>&nbsp;<br>        .continue: <br>        add r2, #1                @ increment digit index<br>        cmp r2, r4                @ check if at end of string<br>        blt .loadNext<br>&nbsp;<br>    add r0, r6, r7                @ add even and odd sum<br>    mov r3, r0                    @ copy sum to r3<br>    ldr r1, =429496730            @ (2^32-1)/10<br>    sub r0, r0, r0, lsr #30       @ divide by 10<br>    umull r2, r0, r1, r0<br>    mov r1, #10<br>    mul r0, r1                    @ multiply the r0 by 10 to see if divisible<br>    cmp r0, r3                    @ compare with the original value in r3<br>    .luhn_test_end:<br>    movne r0, #0                  @ return false if invalid card number<br>    moveq r0, #1                  @ return true if valid card number<br>    pop {r1-r7, lr}<br>    mov pc, lr<br>&nbsp;<br>length:<br>    push {r1-r2, lr}<br>    mov r2, r0              @ start of string address<br>    .loop:<br>        ldrb r1, [r2], #1   @ load byte from address r2 and increment<br>        cmp r1, #0          @ check for end of string<br>        bne .loop           @ load next byte if not 0<br>    sub r0, r2, r0          @ subtract end of string address from start<br>    sub r0, #1              @ end of line from count<br>    pop {r1-r2, lr}<br>    mov pc, lr<br>&nbsp;<br>@ reverses a string<br>@ r0 address of string to reverse<br>@ r1 address to store reversed string<br>reverse:<br>    push {r0-r5, lr}<br>    push {r0, lr}<br>    bl length                @ get length of string to reverse<br>    mov r3, r0               @ backword index<br>    pop {r0, lr}<br>    mov r4, #0               @ fowrard index<br>    .reverse_next:<br>        sub r3, #1           @ decrement backword index<br>        ldrb r5, [r0, r3]    @ load byte from original string at index<br>        strb r5, [r1, r4]    @ copy byte to reversed string<br>        add r4, #1           @ increment fowrard index<br>        cmp r3, #0           @ check if any characters are left<br>        bge .reverse_next<br>&nbsp;<br>    mov r5, #0<br>    strb r5, [r1, r4]  @ write null byte to terminate reversed string<br>    pop {r0-r5, lr}<br>    mov pc, lr<br>&nbsp;<br>isNumerical:<br>    push {r1, lr}<br>    .isNumerical_checkNext:<br>        ldrb r1, [r0], #1<br>        cmp r1, #0<br>        beq .isNumerical_true<br>        cmp r1, #'0'<br>        blt .isNumerical_false<br>        cmp r1, #'9'<br>        bgt .isNumerical_false<br>        b .isNumerical_checkNext<br>    .isNumerical_false:<br>        mov r0, #0<br>        b .isNumerical_end<br>    .isNumerical_true:<br>        mov r0, #1<br>    .isNumerical_end:<br>    pop {r1, lr}<br>    mov pc, lr<br>&nbsp;<br>&nbsp;<br>.data<br>valid_message:<br>    .asciz " valid card number\n"<br>invalid_message:<br>    .asciz " invalid card number\n"<br>&nbsp;<br>reversed_string:<br>    .space 32<br>&nbsp;<br>example_numbers:<br>    .asciz "49927398716"<br>    .asciz "49927398717"<br>    .asciz "1234567812345678"<br>    .asciz "1234567812345670" </pre> 
        <h2><span class="mw-headline" id="AutoHotkey"><a href="/wiki/Category:AutoHotkey" title="Category:AutoHotkey">AutoHotkey</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=10" title="Edit section: AutoHotkey">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="autohotkey highlighted_source"><span class="co1">; Originally submitted by Laszlo:</span><br><span class="co1">; http://www.autohotkey.com/forum/post-229412.html#229412</span><br>&nbsp;<br><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% LuhnTest<span class="br0">(</span><span class="nu0">49927398716</span><span class="br0">)</span><br><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% LuhnTest<span class="br0">(</span><span class="nu0">49927398717</span><span class="br0">)</span><br><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% LuhnTest<span class="br0">(</span><span class="nu0">1234567812345678</span><span class="br0">)</span><br><a href="http://www.autohotkey.com/docs/commands/MsgBox.htm"><span class="kw3">MsgBox</span></a>&nbsp;% LuhnTest<span class="br0">(</span><span class="nu0">1234567812345670</span><span class="br0">)</span><br>&nbsp;<br><span class="kw1">Return</span><br>&nbsp;<br><span class="co1">;-----------------------------</span><br>&nbsp;<br>LuhnTest<span class="br0">(</span>Number<span class="br0">)</span><br><span class="br0">{</span><br>  MultFactor <span class="sy0">:=</span> <span class="nu0">2</span> <span class="sy0">-</span> <span class="br0">(</span> <a href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><span class="kw4">StrLen</span></a><span class="br0">(</span>Number<span class="br0">)</span> <span class="sy0">&amp;</span> <span class="nu0">1</span> <span class="br0">)</span>  <span class="sy0">,</span>  Sum <span class="sy0">:=</span> <span class="nu0">0</span><br>  <a href="http://www.autohotkey.com/docs/commands/Loop.htm"><span class="kw3">Loop</span></a><span class="sy0">,</span> Parse<span class="sy0">,</span> Number<br>    Sum <span class="sy0">+=</span> <span class="br0">(</span> <span class="br0">(</span> <span class="nu0">9</span> <span class="sy0">&lt;</span> <span class="br0">(</span> Temp <span class="sy0">:=</span> MultFactor <span class="sy0">*</span> <a href="http://www.autohotkey.com/docs/Variables.htm#A_LoopField"><span class="kw2">A_LoopField</span></a> <span class="br0">)</span> <span class="br0">)</span>&nbsp;? Temp <span class="sy0">-</span> <span class="nu0">9</span>&nbsp;: Temp <span class="br0">)</span>  <span class="sy0">,</span>  MultFactor <span class="sy0">:=</span> <span class="nu0">3</span> <span class="sy0">-</span> MultFactor<br>  <span class="kw1">Return</span>&nbsp;!<a href="http://www.autohotkey.com/docs/Functions.htm#BuiltIn"><span class="kw4">Mod</span></a><span class="br0">(</span>Sum<span class="sy0">,</span><span class="nu0">10</span><span class="br0">)</span><br><span class="br0">}</span></pre> 
        <p><br> </p> 
        <h2><span class="mw-headline" id="AutoIt"><a href="/wiki/Category:AutoIt" title="Category:AutoIt">AutoIt</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=11" title="Edit section: AutoIt">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="autoit highlighted_source">&nbsp;<br><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Global</span></a> <span class="re0">$avarray</span><span class="br0">[</span><span class="nu0">4</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">[</span><span class="nu0">49927398716</span><span class="sy0">,</span> <span class="nu0">49927398717</span><span class="sy0">,</span> <span class="nu0">1234567812345678</span><span class="sy0">,</span> <span class="nu0">1234567812345670</span><span class="br0">]</span><br><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">For</span></a> <span class="re0">$i</span> <span class="sy0">=</span> <span class="nu0">0</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">To</span></a> <span class="nu0">3</span><br>	checkLuhn<span class="br0">(</span><span class="re0">$avarray</span><span class="br0">[</span><span class="re0">$i</span><span class="br0">]</span><span class="br0">)</span><br><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Next</span></a><br>&nbsp;<br><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Func</span></a> checkLuhn<span class="br0">(</span><span class="re0">$number</span><span class="br0">)</span><br>	<span class="re0">$sum</span> <span class="sy0">=</span> <span class="nu0">0</span><br>	<span class="re0">$numDigits</span> <span class="sy0">=</span> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringSplit.htm"><span class="kw3">StringSplit</span></a><span class="br0">(</span><span class="re0">$number</span><span class="sy0">,</span> <span class="st0">""</span><span class="br0">)</span><br>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">For</span></a> <span class="re0">$i</span> <span class="sy0">=</span> <span class="re0">$numDigits</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">-</span> <span class="nu0">1</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">To</span></a> <span class="nu0">1</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Step</span></a> <span class="sy0">-</span><span class="nu0">2</span><br>		<span class="re0">$numDigits</span><span class="br0">[</span><span class="re0">$i</span><span class="br0">]</span> <span class="sy0">=</span> <span class="re0">$numDigits</span><span class="br0">[</span><span class="re0">$i</span><span class="br0">]</span> <span class="sy0">*</span> <span class="nu0">2</span><br>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <span class="re0">$numDigits</span><span class="br0">[</span><span class="re0">$i</span><span class="br0">]</span> <span class="sy0">&gt;=</span> <span class="nu0">10</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a> <span class="re0">$numDigits</span><span class="br0">[</span><span class="re0">$i</span><span class="br0">]</span> <span class="sy0">-=</span> <span class="nu0">9</span><br>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Next</span></a><br>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">For</span></a> <span class="re0">$i</span> <span class="sy0">=</span> <span class="nu0">1</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">To</span></a> <span class="re0">$numDigits</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><br>		<span class="re0">$sum</span> <span class="sy0">+=</span> <span class="re0">$numDigits</span><span class="br0">[</span><span class="re0">$i</span><span class="br0">]</span><br>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Next</span></a><br>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">If</span></a> <a href="http://www.autoitscript.com/autoit3/docs/functions/StringRight.htm"><span class="kw3">StringRight</span></a><span class="br0">(</span><span class="re0">$sum</span><span class="sy0">,</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">=</span> <span class="st0">"0"</span> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Then</span></a><br>		<a href="http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm"><span class="kw3">ConsoleWrite</span></a><span class="br0">(</span><span class="st0">"Luhn-Check ("</span> <span class="sy0">&amp;</span> <span class="re0">$number</span> <span class="sy0">&amp;</span> <span class="st0">")&nbsp;: True"</span> <span class="sy0">&amp;</span> <a href="http://www.autoitscript.com/autoit3/docs/macros.htm"><span class="kw2"><span class="re0">@CRLF</span></span></a><span class="br0">)</span><br>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Return</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">True</span></a><br>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Else</span></a><br>		<a href="http://www.autoitscript.com/autoit3/docs/functions/ConsoleWrite.htm"><span class="kw3">ConsoleWrite</span></a><span class="br0">(</span><span class="st0">"Luhn-Check ("</span> <span class="sy0">&amp;</span> <span class="re0">$number</span> <span class="sy0">&amp;</span> <span class="st0">")&nbsp;: False"</span> <span class="sy0">&amp;</span> <a href="http://www.autoitscript.com/autoit3/docs/macros.htm"><span class="kw2"><span class="re0">@CRLF</span></span></a><span class="br0">)</span><br>		<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">Return</span></a> <a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">False</span></a><br>	<a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">EndIf</span></a><br><a href="http://www.autoitscript.com/autoit3/docs/keywords.htm"><span class="kw1">EndFunc</span></a>   <span class="co0">;==&gt;checkLuhn</span><br>&nbsp;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div>  
        <pre>Luhn-Check (49927398716)&nbsp;: True
Luhn-Check (49927398717)&nbsp;: False
Luhn-Check (1234567812345678)&nbsp;: False
Luhn-Check (1234567812345670)&nbsp;: True</pre> 
        <h2><span class="mw-headline" id="AWK"><a href="/wiki/Category:AWK" title="Category:AWK">AWK</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=12" title="Edit section: AWK">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="awk highlighted_source"><span class="co1">#!/usr/bin/awk -f</span><br><span class="kw2">BEGIN</span> <span class="br0">{</span><br>    A<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> = <span class="nu0">49927398716</span>;<br>    A<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span> = <span class="nu0">49927398717</span>; <br>    A<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> = <span class="nu0">1234567812345678</span>; <br>    A<span class="br0">[</span><span class="nu0">4</span><span class="br0">]</span> = <span class="nu0">1234567812345670</span>;<br>    <span class="kw1">for</span> <span class="br0">(</span>k <span class="kw1">in</span> A<span class="br0">)</span> <span class="kw5">print</span> <span class="st0">"isLuhn("</span>A<span class="br0">[</span>k<span class="br0">]</span><span class="st0">"): "</span>,isLuhn<span class="br0">(</span>A<span class="br0">[</span>k<span class="br0">]</span><span class="br0">)</span>;	<br><span class="br0">}</span><br>&nbsp;<br><span class="kw6">function</span> isLuhn<span class="br0">(</span>cardno<span class="br0">)</span> <span class="br0">{</span><br>    m = <span class="st0">"246813579"</span>;    <br>    n = <span class="kw4">length</span><span class="br0">(</span>cardno<span class="br0">)</span>; <br>    <span class="kw1">for</span> <span class="br0">(</span>k = n; <span class="nu0">0</span> <span class="sy2">&lt;</span> k; k <span class="sy3">-</span>= <span class="nu0">2</span><span class="br0">)</span> <span class="br0">{</span><br>	s <span class="sy3">+</span>= <span class="kw4">substr</span><span class="br0">(</span>cardno, k, <span class="nu0">1</span><span class="br0">)</span>;<br>    <span class="br0">}</span><br>    <span class="kw1">for</span> <span class="br0">(</span>k = n<span class="sy3">-</span><span class="nu0">1</span>; <span class="nu0">0</span> <span class="sy2">&lt;</span> k; k <span class="sy3">-</span>= <span class="nu0">2</span><span class="br0">)</span> <span class="br0">{</span><br>	s <span class="sy3">+</span>= <span class="kw4">substr</span><span class="br0">(</span>m, <span class="kw4">substr</span><span class="br0">(</span>cardno, k, <span class="nu0">1</span><span class="br0">)</span>, <span class="nu0">1</span><span class="br0">)</span>;<br>    <span class="br0">}</span><br>    <span class="kw6">return</span> <span class="br0">(</span><span class="br0">(</span>s<span class="sy3">%</span>10<span class="br0">)</span><span class="sy2">==</span><span class="nu0">0</span><span class="br0">)</span>;	<br><span class="br0">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>isLuhn(1234567812345670):  1
isLuhn(49927398716):  1
isLuhn(49927398717):  0
isLuhn(1234567812345678):  0</pre> 
        <h2><span class="mw-headline" id="Bash"><a href="/wiki/Category:Bash" title="Category:Bash" class="mw-redirect">Bash</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=13" title="Edit section: Bash">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="bash highlighted_source"><span class="co0">#!/bin/bash</span><br>&nbsp;<br><span class="kw1">function</span> luhn_validate  <span class="co0"># &lt;numeric-string&gt;</span><br><span class="br0">{</span><br>    <span class="re2">num</span>=<span class="re4">$1</span><br>    <span class="kw3">shift</span> <span class="nu0">1</span><br>&nbsp;<br>    <span class="re2">len</span>=<span class="co1">${#num}</span><br>    <span class="re2">is_odd</span>=<span class="nu0">1</span><br>    <span class="re2">sum</span>=<span class="nu0">0</span><br>    <span class="kw1">for</span><span class="br0">(</span><span class="br0">(</span>t = len - <span class="nu0">1</span>; t <span class="sy0">&gt;</span>= <span class="nu0">0</span>; --t<span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="re2">digit</span>=<span class="co1">${num:$t:1}</span><br>&nbsp;<br>        <span class="kw1">if</span> <span class="br0">[</span><span class="br0">[</span> <span class="re1">$is_odd</span> <span class="re5">-eq</span> <span class="nu0">1</span> <span class="br0">]</span><span class="br0">]</span>; <span class="kw1">then</span><br>            <span class="re2">sum</span>=$<span class="br0">(</span><span class="br0">(</span> <span class="kw2">sum</span> + <span class="re1">$digit</span> <span class="br0">)</span><span class="br0">)</span><br>        <span class="kw1">else</span><br>            <span class="re2">sum</span>=$<span class="br0">(</span><span class="br0">(</span> <span class="re1">$sum</span> + <span class="br0">(</span> <span class="re1">$digit</span> <span class="sy0">!</span>= <span class="nu0">9</span>&nbsp;? <span class="br0">(</span> <span class="br0">(</span> <span class="nu0">2</span> <span class="sy0">*</span> <span class="re1">$digit</span> <span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">9</span> <span class="br0">)</span>&nbsp;: <span class="nu0">9</span> <span class="br0">)</span> <span class="br0">)</span><span class="br0">)</span><br>        <span class="kw1">fi</span><br>&nbsp;<br>        <span class="re2">is_odd</span>=$<span class="br0">(</span><span class="br0">(</span> <span class="sy0">!</span> <span class="re1">$is_odd</span> <span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="co0"># NOTE: returning exit status of 0 on success</span><br>    <span class="kw3">return</span> $<span class="br0">(</span><span class="br0">(</span> <span class="nu0">0</span> <span class="sy0">!</span>= <span class="br0">(</span> <span class="re1">$sum</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="br0">)</span> <span class="br0">)</span><span class="br0">)</span><br><span class="br0">}</span><br>&nbsp;<br>&nbsp;<br><span class="kw1">function</span> print_result  <span class="co0"># &lt;numeric-string&gt;</span><br><span class="br0">{</span><br>    <span class="kw1">if</span> luhn_validate <span class="st0">"$1"</span>; <span class="kw1">then</span><br>        <span class="kw3">echo</span> <span class="st0">"$1 is valid"</span><br>    <span class="kw1">else</span><br>        <span class="kw3">echo</span> <span class="st0">"$1 is not valid"</span><br>    <span class="kw1">fi</span><br><span class="br0">}</span><br>&nbsp;<br>print_result <span class="st0">"49927398716"</span><br>print_result <span class="st0">"49927398717"</span><br>print_result <span class="st0">"1234567812345678"</span><br>print_result <span class="st0">"1234567812345670"</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 is valid
49927398717 is not valid
1234567812345678 is not valid
1234567812345670 is valid
</pre> 
        <h2><span class="mw-headline" id="Batch_File"><a href="/wiki/Category:Batch_File" title="Category:Batch File">Batch File</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=14" title="Edit section: Batch File">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>This simple implementation does not reverse the numbers. Instead, it counts from right to left. </p> 
        <pre class="dos highlighted_source"><span class="sy0">@</span><a href="http://www.ss64.com/nt/echo.html"><span class="kw3">echo</span></a> off<br><a href="http://www.ss64.com/nt/setlocal.html"><span class="kw3">setlocal</span></a> enabledelayedexpansion<br>&nbsp;<br><a href="http://www.ss64.com/nt/call.html"><span class="kw1">call</span></a>&nbsp;:<span class="re0">luhn</span> 49927398716<br><a href="http://www.ss64.com/nt/call.html"><span class="kw1">call</span></a>&nbsp;:<span class="re0">luhn</span> 49927398717<br><a href="http://www.ss64.com/nt/call.html"><span class="kw1">call</span></a>&nbsp;:<span class="re0">luhn</span> 1234567812345678<br><a href="http://www.ss64.com/nt/call.html"><span class="kw1">call</span></a>&nbsp;:<span class="re0">luhn</span> 1234567812345670<br><a href="http://www.ss64.com/nt/exit.html"><span class="kw1">exit</span></a> /b 0<br>&nbsp;<br>:<span class="re0">luhn</span><br><a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> input=<span class="sy0">%</span><span class="re3">1</span><br><a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> cnt=0<br><a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> s1=0<span class="sy0">&amp;</span><a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> s2=0<br>:<span class="re0">digit_loop</span><br>	<a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> /a cnt-=1<br>	<a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> /a isOdd=<span class="co3">^(</span>-<span class="sy0">%</span><span class="re3">cnt</span><span class="sy0">%</span><span class="co3">^)</span><span class="sy0">%%</span><span class="re3">2</span><br>&nbsp;<br>	<a href="http://www.ss64.com/nt/if.html"><span class="kw1">if</span></a> <span class="sy0">!</span><span class="re2">isodd</span><span class="sy0">!</span> <a href="http://www.ss64.com/nt/equ.html"><span class="kw2">equ</span></a> 1 <span class="sy0">(</span><br>		<a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> /a s1+=<span class="sy0">!</span><span class="re2">input:~%<span class="re3">cnt</span>%,1</span><span class="sy0">!</span><br>	<span class="sy0">)</span> <a href="http://www.ss64.com/nt/else.html"><span class="kw1">else</span></a> <span class="sy0">(</span><br>		<a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> /a twice=<span class="sy0">!</span><span class="re2">input:~%<span class="re3">cnt</span>%,1</span><span class="sy0">!</span><span class="re2">*</span>2<br>		<a href="http://www.ss64.com/nt/if.html"><span class="kw1">if</span></a> <span class="sy0">!</span><span class="re2">twice</span><span class="sy0">!</span> <a href="http://www.ss64.com/nt/geq.html"><span class="kw2">geq</span></a> 10 <span class="sy0">(</span><br>			<a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> /a s2+=<span class="sy0">!</span><span class="re2">twice:~0,1</span><span class="sy0">!</span><span class="re2">+</span><span class="sy0">!</span><span class="re2">twice:~1,1</span><span class="sy0">!</span><br>		<span class="sy0">)</span> <a href="http://www.ss64.com/nt/else.html"><span class="kw1">else</span></a> <span class="sy0">(</span><br>			<a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> /a s2+=<span class="sy0">!</span><span class="re2">twice</span><span class="sy0">!</span><br>		<span class="sy0">)</span><br>	<span class="sy0">)</span><br>	<a href="http://www.ss64.com/nt/if.html"><span class="kw1">if</span></a> "<span class="sy0">!</span><span class="re2">input:~%<span class="re3">cnt</span>%</span><span class="sy0">!</span><span class="re2">"=="</span><span class="sy0">!</span><span class="re2">input</span><span class="sy0">!</span>" <span class="sy0">(</span><br>		<a href="http://www.ss64.com/nt/set.html"><span class="kw3">set</span></a> /a sum=<span class="co3">^(</span><span class="sy0">!</span><span class="re2">s1</span><span class="sy0">!</span><span class="re2">+</span><span class="sy0">!</span><span class="re2">s2</span><span class="sy0">!</span><span class="co3">^)</span><span class="sy0">%%</span><span class="re3">1</span>0<br>		<a href="http://www.ss64.com/nt/if.html"><span class="kw1">if</span></a> <span class="sy0">!</span><span class="re2">sum</span><span class="sy0">!</span> <a href="http://www.ss64.com/nt/equ.html"><span class="kw2">equ</span></a> 0 <span class="sy0">(</span><a href="http://www.ss64.com/nt/echo.html"><span class="kw3">echo</span></a> <span class="sy0">!</span><span class="re2">input</span><span class="sy0">!</span> is valid.<span class="sy0">)</span> <a href="http://www.ss64.com/nt/else.html"><span class="kw1">else</span></a> <span class="sy0">(</span><a href="http://www.ss64.com/nt/echo.html"><span class="kw3">echo</span></a> <span class="sy0">!</span><span class="re2">input</span><span class="sy0">!</span> is <a href="http://www.ss64.com/nt/not.html"><span class="kw2">not</span></a> valid.<span class="sy0">)</span><br>		<a href="http://www.ss64.com/nt/goto.html"><span class="kw1">goto</span></a>&nbsp;:<span class="re0">EOF</span><br>	<span class="sy0">)</span><br>	<a href="http://www.ss64.com/nt/goto.html"><span class="kw1">goto</span></a> digit_loop</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>&gt;luhn.bat
49927398716 is valid.
49927398717 is not valid.
1234567812345678 is not valid.
1234567812345670 is valid.

&gt;</pre> 
        <h2><span class="mw-headline" id="BBC_BASIC"><a href="/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=15" title="Edit section: BBC BASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">      FOR card% = 1 TO 4<br>        READ cardnumber$<br>        IF FNluhn(cardnumber$) THEN<br>          PRINT "Card number " cardnumber$ " is valid"<br>        ELSE<br>          PRINT "Card number " cardnumber$ " is invalid"<br>        ENDIF<br>      NEXT card%<br>      END<br>&nbsp;<br>      DATA 49927398716, 49927398717, 1234567812345678, 1234567812345670<br>&nbsp;<br>      DEF FNluhn(card$)<br>      LOCAL I%, L%, N%, S%<br>      L% = LEN(card$)<br>      FOR I% = 1 TO L%<br>        N% = VAL(MID$(card$, L%-I%+1, 1))<br>        IF I% AND 1 THEN<br>          S% += N%<br>        ELSE<br>          N% *= 2<br>          S% += N% MOD 10 + N% DIV 10<br>        ENDIF<br>      NEXT<br>      = (S% MOD 10) = 0</pre> 
        <h2><span class="mw-headline" id="bc"><a href="/wiki/Category:Bc" title="Category:Bc">bc</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=16" title="Edit section: bc">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">/* Return 1 if number passes Luhn test, else 0 */<br>define l(n) {<br>    auto m, o, s, x<br>&nbsp;<br>    o = scale<br>    scale = 0<br>&nbsp;<br>    m = 1<br>    while (n &gt; 0) {<br>        x = (n&nbsp;% 10) * m<br>        if (x &gt; 9) x -= 9<br>        s += x<br>        m = 3 - m<br>        n /= 10<br>    }<br>&nbsp;<br>    s&nbsp;%= 10<br>    scale = o<br>    if (s) return(0)<br>    return(1)<br>}<br>&nbsp;<br>l(49927398716)<br>l(49927398717)<br>l(1234567812345678)<br>l(1234567812345670)</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>1
0
0
1</pre> 
        <h2><span class="mw-headline" id="Bracmat"><a href="/wiki/Category:Bracmat" title="Category:Bracmat">Bracmat</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=17" title="Edit section: Bracmat">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">  ( luhn<br>  =   sum odd even<br>    .   0:?sum<br>      &amp; rev$!arg:?arg<br>      &amp;   whl<br>        ' ( @(&nbsp;!arg<br>            &nbsp;:  &nbsp;%?odd<br>                 (&nbsp;%?even&nbsp;?arg<br>                 |&nbsp;:?arg&amp;0:?even<br>                 )<br>             )<br>          &amp;&nbsp;!odd+mod$(2*!even.10)+div$(!even.5)+!sum:?sum<br>          )<br>      &amp; mod$(!sum.10):0<br>  )<br>&amp; ( test<br>  =   <br>    .   out<br>      $ (!arg ":" (luhn$!arg&amp;true|false))<br>  )<br>&amp; test$49927398716<br>&amp; test$49927398717<br>&amp; test$1234567812345678<br>&amp; test$1234567812345670<br>&amp;&nbsp;;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716&nbsp;: true
49927398717&nbsp;: false
1234567812345678&nbsp;: false
1234567812345670&nbsp;: true</pre> 
        <h2><span class="mw-headline" id="C"><a href="/wiki/Category:C" title="Category:C">C</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=18" title="Edit section: C">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="c highlighted_source"><span class="co2">#include &lt;string.h&gt;</span><br><span class="co2">#include &lt;stdio.h&gt;</span><br>&nbsp;<br><span class="kw4">int</span> luhn<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> cc<span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">const</span> <span class="kw4">int</span> m<span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">{</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span><span class="nu0">6</span><span class="sy0">,</span><span class="nu0">8</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">5</span><span class="sy0">,</span><span class="nu0">7</span><span class="sy0">,</span><span class="nu0">9</span><span class="br0">}</span><span class="sy0">;</span> <span class="co1">// mapping for rule 3</span><br>	<span class="kw4">int</span> i<span class="sy0">,</span> odd <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">,</span> sum <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/strlen.html"><span class="kw3">strlen</span></a><span class="br0">(</span>cc<span class="br0">)</span><span class="sy0">;</span> i<span class="sy0">--;</span> odd <span class="sy0">=</span> <span class="sy0">!</span>odd<span class="br0">)</span> <span class="br0">{</span><br>		<span class="kw4">int</span> digit <span class="sy0">=</span> cc<span class="br0">[</span>i<span class="br0">]</span> <span class="sy0">-</span> <span class="st0">'0'</span><span class="sy0">;</span><br>		sum <span class="sy0">+=</span> odd <span class="sy0">?</span> digit <span class="sy0">:</span> m<span class="br0">[</span>digit<span class="br0">]</span><span class="sy0">;</span><br>	<span class="br0">}</span><br>&nbsp;<br>	<span class="kw1">return</span> sum <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> cc<span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">{</span><br>		<span class="st0">"49927398716"</span><span class="sy0">,</span><br>		<span class="st0">"49927398717"</span><span class="sy0">,</span><br>		<span class="st0">"1234567812345678"</span><span class="sy0">,</span><br>		<span class="st0">"1234567812345670"</span><span class="sy0">,</span><br>		<span class="nu0">0</span><br>	<span class="br0">}</span><span class="sy0">;</span><br>	<span class="kw4">int</span> i<span class="sy0">;</span><br>&nbsp;<br>	<span class="kw1">for</span> <span class="br0">(</span>i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> cc<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">)</span><br>		<a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">(</span><span class="st0">"%16s<span class="es1">\t</span>%s<span class="es1">\n</span>"</span><span class="sy0">,</span> cc<span class="br0">[</span>i<span class="br0">]</span><span class="sy0">,</span> luhn<span class="br0">(</span>cc<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span> <span class="sy0">?</span> <span class="st0">"ok"</span> <span class="sy0">:</span> <span class="st0">"not ok"</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>	<span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span></pre>
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>     49927398716        ok
     49927398717        not ok
1234567812345678        not ok
1234567812345670        ok
</pre> 
        <h2><span class="mw-headline" id="C.2B.2B"><a href="/wiki/Category:C%2B%2B" title="Category:C++">C++</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=19" title="Edit section: C++">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="cpp highlighted_source"><span class="co2">#include &lt;iostream&gt;</span><br><span class="kw2">using</span> <span class="kw2">namespace</span> std<span class="sy4">;</span><br>&nbsp;<br><span class="kw4">int</span> toInt<span class="br0">(</span><span class="kw4">const</span> <span class="kw4">char</span> c<span class="br0">)</span><br><span class="br0">{</span><br>    <span class="kw1">return</span> c<span class="sy2">-</span><span class="st0">'0'</span><span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> confirm<span class="br0">(</span> <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">*</span>id<span class="br0">)</span><br><span class="br0">{</span><br>    <span class="kw4">bool</span> is_odd_dgt <span class="sy1">=</span> <span class="kw2">true</span><span class="sy4">;</span><br>    <span class="kw4">int</span> s <span class="sy1">=</span> <span class="nu0">0</span><span class="sy4">;</span><br>    <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">*</span>cp<span class="sy4">;</span><br>&nbsp;<br>    <span class="kw1">for</span><span class="br0">(</span>cp<span class="sy1">=</span>id<span class="sy4">;</span> <span class="sy2">*</span>cp<span class="sy4">;</span> cp<span class="sy2">++</span><span class="br0">)</span><span class="sy4">;</span><br>    <span class="kw1">while</span><span class="br0">(</span>cp <span class="sy1">&gt;</span> id<span class="br0">)</span> <span class="br0">{</span><br>        <span class="sy2">--</span>cp<span class="sy4">;</span><br>        <span class="kw4">int</span> k <span class="sy1">=</span> toInt<span class="br0">(</span><span class="sy2">*</span>cp<span class="br0">)</span><span class="sy4">;</span><br>        <span class="kw1">if</span> <span class="br0">(</span>is_odd_dgt<span class="br0">)</span> <span class="br0">{</span><br>            s <span class="sy2">+</span><span class="sy1">=</span> k<span class="sy4">;</span><br>        <span class="br0">}</span><br>        <span class="kw1">else</span> <span class="br0">{</span><br>            s <span class="sy2">+</span><span class="sy1">=</span> <span class="br0">(</span>k<span class="sy3">!</span><span class="sy1">=</span><span class="nu0">9</span><span class="br0">)</span><span class="sy4">?</span> <span class="br0">(</span><span class="nu0">2</span><span class="sy2">*</span>k<span class="br0">)</span><span class="sy2">%</span><span class="nu19">9</span> <span class="sy4">:</span> <span class="nu0">9</span><span class="sy4">;</span><br>        <span class="br0">}</span><br>	is_odd_dgt <span class="sy1">=</span> <span class="sy3">!</span>is_odd_dgt<span class="sy4">;</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> <span class="nu0">0</span> <span class="sy1">==</span> s<span class="sy2">%</span><span class="nu19">10</span><span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span> <span class="br0">)</span><br><span class="br0">{</span><br>    <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">*</span> t_cases<span class="br0">[</span><span class="br0">]</span> <span class="sy1">=</span> <span class="br0">{</span><br>        <span class="st0">"49927398716"</span>,<br>        <span class="st0">"49927398717"</span>,<br>        <span class="st0">"1234567812345678"</span>,<br>        <span class="st0">"1234567812345670"</span>,<br>        <span class="kw2">NULL</span>,<br>    <span class="br0">}</span><span class="sy4">;</span><br>    <span class="kw1">for</span> <span class="br0">(</span> <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy2">**</span>cp <span class="sy1">=</span> t_cases<span class="sy4">;</span> <span class="sy2">*</span>cp<span class="sy4">;</span> cp<span class="sy2">++</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="sy2">*</span>cp <span class="sy1">&lt;&lt;</span> <span class="st0">": "</span> <span class="sy1">&lt;&lt;</span> confirm<span class="br0">(</span><span class="sy2">*</span>cp<span class="br0">)</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span><br><span class="br0">}</span></pre> 
        <h3><span class="mw-headline" id="C.2B.2B11">C++11</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=20" title="Edit section: C++11">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
        <pre class="cpp highlighted_source"><span class="co2">#include &lt;iostream&gt;</span><br><span class="co2">#include &lt;vector&gt;</span><br><span class="co2">#include &lt;algorithm&gt;</span><br><span class="kw2">using</span> <span class="kw2">namespace</span> std<span class="sy4">;</span><br>&nbsp;<br><span class="kw4">bool</span> luhn<span class="br0">(</span> <span class="kw4">const</span> string<span class="sy3">&amp;</span> id<span class="br0">)</span><br><span class="br0">{</span><br>  <span class="kw4">static</span> <span class="kw4">const</span> <span class="kw4">int</span> m<span class="br0">[</span><span class="nu0">10</span><span class="br0">]</span>  <span class="sy1">=</span> <span class="br0">{</span><span class="nu0">0</span>,<span class="nu0">2</span>,<span class="nu0">4</span>,<span class="nu0">6</span>,<span class="nu0">8</span>,<span class="nu0">1</span>,<span class="nu0">3</span>,<span class="nu0">5</span>,<span class="nu0">7</span>,<span class="nu0">9</span><span class="br0">}</span><span class="sy4">;</span> <span class="co1">// mapping for rule 3</span><br>  <span class="kw4">bool</span> is_odd_dgt <span class="sy1">=</span> <span class="kw2">false</span><span class="sy4">;</span><br>  <span class="kw4">auto</span> lambda <span class="sy1">=</span> <span class="br0">[</span><span class="sy3">&amp;</span><span class="br0">]</span><span class="br0">(</span><span class="kw4">int</span> a, <span class="kw4">char</span> c<span class="br0">)</span> <span class="br0">{</span><span class="kw1">return</span> a <span class="sy2">+</span> <span class="br0">(</span><span class="br0">(</span>is_odd_dgt <span class="sy1">=</span> <span class="sy3">!</span>is_odd_dgt<span class="br0">)</span> <span class="sy4">?</span> c<span class="sy2">-</span><span class="st0">'0'</span> <span class="sy4">:</span> m<span class="br0">[</span>c<span class="sy2">-</span><span class="st0">'0'</span><span class="br0">]</span><span class="br0">)</span><span class="sy4">;</span><span class="br0">}</span><span class="sy4">;</span><br>  <span class="kw4">int</span> s <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">accumulate</span><span class="br0">(</span>id.<span class="me1">rbegin</span><span class="br0">(</span><span class="br0">)</span>, id.<span class="me1">rend</span><span class="br0">(</span><span class="br0">)</span>, <span class="nu0">0</span>, lambda<span class="br0">)</span><span class="sy4">;</span><br>  <span class="kw1">return</span> <span class="nu0">0</span> <span class="sy1">==</span> s<span class="sy2">%</span><span class="nu19">10</span><span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span> <span class="br0">)</span><br><span class="br0">{</span><br>  <span class="kw4">auto</span> t_cases <span class="sy1">=</span> <span class="br0">{</span><span class="st0">"49927398716"</span>, <span class="st0">"49927398717"</span>, <span class="st0">"1234567812345678"</span>, <span class="st0">"1234567812345670"</span><span class="br0">}</span><span class="sy4">;</span><br>  <span class="kw4">auto</span> print <span class="sy1">=</span> <span class="br0">[</span><span class="br0">]</span><span class="br0">(</span><span class="kw4">const</span> string <span class="sy3">&amp;</span> s<span class="br0">)</span> <span class="br0">{</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> s <span class="sy1">&lt;&lt;</span> <span class="st0">": "</span> <span class="sy1">&lt;&lt;</span> luhn<span class="br0">(</span>s<span class="br0">)</span> <span class="sy1">&lt;&lt;</span> endl<span class="sy4">;</span><span class="br0">}</span><span class="sy4">;</span><br>  for_each<span class="br0">(</span>t_cases.<span class="me1">begin</span><span class="br0">(</span><span class="br0">)</span>, t_cases.<span class="me1">end</span><span class="br0">(</span><span class="br0">)</span>, print<span class="br0">)</span><span class="sy4">;</span><br>  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;</pre> 
        <p>It is also possible to achieve a compile-time version using metaprogramming. </p> 
        <pre class="cpp highlighted_source"><span class="co2">#include &lt;iostream&gt;</span><br><span class="co2">#include &lt;type_traits&gt;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw4">size_t</span> I, <span class="kw4">int</span>... <span class="me1">Args</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> find_impl<span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw4">int</span> A, <span class="kw4">int</span>... <span class="me1">Args</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> find_impl<span class="sy1">&lt;</span><span class="nu0">0</span>, A, Args...<span class="sy1">&gt;</span> <span class="br0">{</span><br>    <span class="kw2">using</span> type <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">integral_constant</span><span class="sy1">&lt;</span><span class="kw4">int</span>, A<span class="sy1">&gt;</span><span class="sy4">;</span><br><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw4">int</span> A, <span class="kw4">int</span> B, <span class="kw4">int</span>... <span class="me1">Args</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> find_impl<span class="sy1">&lt;</span><span class="nu0">0</span>, A, B, Args...<span class="sy1">&gt;</span> <span class="br0">{</span><br>    <span class="kw2">using</span> type <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">integral_constant</span><span class="sy1">&lt;</span><span class="kw4">int</span>, A<span class="sy1">&gt;</span><span class="sy4">;</span><br><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw4">size_t</span> I, <span class="kw4">int</span> A, <span class="kw4">int</span> B, <span class="kw4">int</span>... <span class="me1">Args</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> find_impl<span class="sy1">&lt;</span>I, A, B, Args...<span class="sy1">&gt;</span> <span class="br0">{</span><br>    <span class="kw2">using</span> type <span class="sy1">=</span> <span class="kw2">typename</span> find_impl<span class="sy1">&lt;</span>I<span class="sy2">-</span><span class="nu0">1</span>, B, Args...<span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">type</span><span class="sy4">;</span><br><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">namespace</span> detail <span class="br0">{</span><br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span>, <span class="kw2">typename</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> append_sequence<br><span class="br0">{</span><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span> T, <span class="kw2">typename</span>... <span class="me1">Ts</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> append_sequence<span class="sy1">&lt;</span>T, std<span class="sy4">::</span><span class="me2">tuple</span><span class="sy1">&lt;</span>Ts...<span class="sy1">&gt;&gt;</span> <span class="br0">{</span><br>    <span class="kw2">using</span> type <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">tuple</span><span class="sy1">&lt;</span>Ts..., T<span class="sy1">&gt;</span><span class="sy4">;</span><br><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span>... <span class="me1">Ts</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> reverse_sequence <span class="br0">{</span><br>    <span class="kw2">using</span> type <span class="sy1">=</span> std<span class="sy4">::</span><span class="me2">tuple</span><span class="sy1">&lt;&gt;</span><span class="sy4">;</span><br><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span> T, <span class="kw2">typename</span>... <span class="me1">Ts</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> reverse_sequence<span class="sy1">&lt;</span>T, Ts...<span class="sy1">&gt;</span> <span class="br0">{</span><br>    <span class="kw2">using</span> type <span class="sy1">=</span> <span class="kw2">typename</span> append_sequence<span class="sy1">&lt;</span><br>                            T,<br>                            <span class="kw2">typename</span> reverse_sequence<span class="sy1">&lt;</span>Ts...<span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">type</span><br>                        <span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">type</span><span class="sy4">;</span><br><span class="br0">}</span><span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw4">size_t</span> I<span class="sy1">&gt;</span><br><span class="kw2">using</span> rule3 <span class="sy1">=</span> <span class="kw2">typename</span> find_impl<span class="sy1">&lt;</span>I, <span class="nu0">0</span>, <span class="nu0">2</span>, <span class="nu0">4</span>, <span class="nu0">6</span>, <span class="nu0">8</span>, <span class="nu0">1</span>, <span class="nu0">3</span>, <span class="nu0">5</span>, <span class="nu0">7</span>, <span class="nu0">9</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">type</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw4">int</span> A, <span class="kw4">char</span> C, <span class="kw4">bool</span> dgt<span class="sy1">&gt;</span><br><span class="kw4">struct</span> calc<br>    <span class="sy4">:</span> std<span class="sy4">::</span><span class="me2">integral_constant</span><span class="sy1">&lt;</span><span class="kw4">int</span>, A <span class="sy2">+</span> C <span class="sy2">-</span> <span class="st0">'0'</span><span class="sy1">&gt;</span><br><span class="br0">{</span><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw4">int</span> A, <span class="kw4">char</span> C<span class="sy1">&gt;</span><br><span class="kw4">struct</span> calc<span class="sy1">&lt;</span>A, C, <span class="kw2">false</span><span class="sy1">&gt;</span><br>    <span class="sy4">:</span> std<span class="sy4">::</span><span class="me2">integral_constant</span><span class="sy1">&lt;</span><span class="kw4">int</span>, A <span class="sy2">+</span> rule3<span class="sy1">&lt;</span>C <span class="sy2">-</span> <span class="st0">'0'</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">type</span><span class="sy4">::</span><span class="me2">value</span><span class="sy1">&gt;</span><br><span class="br0">{</span><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span> Acc, <span class="kw4">bool</span> Dgt, <span class="kw4">char</span>...<span class="sy1">&gt;</span><br><span class="kw4">struct</span> luhn_impl<span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span> Acc, <span class="kw4">bool</span> Dgt, <span class="kw4">char</span> A, <span class="kw4">char</span>... <span class="me1">Args</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> luhn_impl<span class="sy1">&lt;</span>Acc, Dgt, A, Args...<span class="sy1">&gt;</span> <span class="br0">{</span><br>    <span class="kw2">using</span> type <span class="sy1">=</span> <span class="kw2">typename</span> calc<span class="sy1">&lt;</span>Acc<span class="sy4">::</span><span class="me2">value</span>, A, Dgt<span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">type</span><span class="sy4">;</span><br><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span> Acc, <span class="kw4">bool</span> Dgt, <span class="kw4">char</span> A, <span class="kw4">char</span> B, <span class="kw4">char</span>... <span class="me1">Args</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> luhn_impl<span class="sy1">&lt;</span>Acc, Dgt, A, B, Args...<span class="sy1">&gt;</span> <span class="br0">{</span><br>    <span class="kw2">using</span> type <span class="sy1">=</span><br>        <span class="kw2">typename</span> luhn_impl<span class="sy1">&lt;</span><span class="kw2">typename</span> calc<span class="sy1">&lt;</span>Acc<span class="sy4">::</span><span class="me2">value</span>, A, Dgt<span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">type</span>, <span class="sy3">!</span>Dgt, B, Args...<span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">type</span><span class="sy4">;</span><br><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> luhn<span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw2">typename</span>... <span class="me1">Args</span><span class="sy1">&gt;</span><br><span class="kw4">struct</span> luhn<span class="sy1">&lt;</span>std<span class="sy4">::</span><span class="me2">tuple</span><span class="sy1">&lt;</span>Args...<span class="sy1">&gt;&gt;</span> <span class="br0">{</span><br>    <span class="kw2">using</span> type <span class="sy1">=</span> <span class="kw2">typename</span> luhn_impl<span class="sy1">&lt;</span>std<span class="sy4">::</span><span class="me2">integral_constant</span><span class="sy1">&lt;</span><span class="kw4">int</span>, <span class="nu0">0</span><span class="sy1">&gt;</span>, <span class="kw2">true</span>, Args<span class="sy4">::</span><span class="me2">value</span>...<span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">type</span><span class="sy4">;</span><br>    constexpr <span class="kw4">static</span> <span class="kw4">bool</span> result <span class="sy1">=</span> <span class="br0">(</span>type<span class="sy4">::</span><span class="me2">value</span> <span class="sy2">%</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy1">==</span> <span class="nu0">0</span><span class="sy4">;</span><br><span class="br0">}</span><span class="sy4">;</span><br>&nbsp;<br><span class="kw2">template</span><span class="sy1">&lt;</span><span class="kw4">char</span>... <span class="me1">Args</span><span class="sy1">&gt;</span><br><span class="kw4">bool</span> operator <span class="st0">""</span> _luhn<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">return</span> luhn<span class="sy1">&lt;</span><span class="kw2">typename</span> detail<span class="sy4">::</span><span class="me2">reverse_sequence</span><span class="sy1">&lt;</span>std<span class="sy4">::</span><span class="me2">integral_constant</span><span class="sy1">&lt;</span><span class="kw4">char</span>, Args<span class="sy1">&gt;</span>...<span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">type</span><span class="sy1">&gt;</span><span class="sy4">::</span><span class="me2">result</span><span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">int</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">boolalpha</span><span class="sy4">;</span><br>    std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="nu0">49927398716</span>_luhn <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span><br>    std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="nu0">49927398717</span>_luhn <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span><br>    std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="nu0">1234567812345678</span>_luhn <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span><br>    std<span class="sy4">::</span><span class="kw3">cout</span> <span class="sy1">&lt;&lt;</span> <span class="nu0">1234567812345670</span>_luhn <span class="sy1">&lt;&lt;</span> std<span class="sy4">::</span><span class="me2">endl</span><span class="sy4">;</span><br>    <span class="kw1">return</span> <span class="nu0">0</span><span class="sy4">;</span><br><span class="br0">}</span><br>&nbsp;</pre> 
        <pre>true
false
false
true
</pre> 
        <h2><span class="mw-headline" id="C.23"><a href="/wiki/Category:C_sharp" title="Category:C sharp">C#</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=21" title="Edit section: C#">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>The LuhnCheck method takes an array of integers because values in memory will be integer-aligned. </p> 
        <pre class="csharp highlighted_source">&nbsp;<br>    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">class</span> Luhn<br>    <span class="br0">{</span><br>        <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">bool</span> LuhnCheck<span class="br0">(</span><span class="kw1">this</span> <span class="kw4">string</span> cardNumber<span class="br0">)</span><br>        <span class="br0">{</span><br>            <span class="kw1">return</span> LuhnCheck<span class="br0">(</span>cardNumber<span class="sy0">.</span><span class="kw1">Select</span><span class="br0">(</span>c <span class="sy0">=&gt;</span> c <span class="sy0">-</span> <span class="st0">'0'</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">ToArray</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw1">private</span> <span class="kw1">static</span> <span class="kw4">bool</span> LuhnCheck<span class="br0">(</span><span class="kw1">this</span> <span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> digits<span class="br0">)</span><br>        <span class="br0">{</span><br>            <span class="kw1">return</span> GetCheckValue<span class="br0">(</span>digits<span class="br0">)</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw1">private</span> <span class="kw1">static</span> <span class="kw4">int</span> GetCheckValue<span class="br0">(</span><span class="kw4">int</span><span class="br0">[</span><span class="br0">]</span> digits<span class="br0">)</span><br>        <span class="br0">{</span><br>            <span class="kw1">return</span> digits<span class="sy0">.</span><span class="kw1">Select</span><span class="br0">(</span><span class="br0">(</span>d, i<span class="br0">)</span> <span class="sy0">=&gt;</span> i <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">==</span> digits<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">?</span> <span class="br0">(</span><span class="br0">(</span><span class="nu0">2</span> <span class="sy0">*</span> d<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy0">+</span> d <span class="sy0">/</span> <span class="nu0">5</span> <span class="sy0">:</span> d<span class="br0">)</span><span class="sy0">.</span><span class="me1">Sum</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">class</span> TestProgram<br>    <span class="br0">{</span><br>        <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">(</span><span class="br0">)</span><br>        <span class="br0">{</span><br>            <span class="kw4">long</span><span class="br0">[</span><span class="br0">]</span> testNumbers <span class="sy0">=</span> <span class="br0">{</span><span class="nu0">49927398716</span>, <span class="nu0">49927398717</span>, <span class="nu0">1234567812345678</span>, <span class="nu0">1234567812345670</span><span class="br0">}</span><span class="sy0">;</span><br>            <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw1">var</span> testNumber <span class="kw1">in</span> testNumbers<span class="br0">)</span><br>                Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"{0} is {1}valid"</span>, testNumber, testNumber<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">LuhnCheck</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">?</span> <span class="st0">""</span> <span class="sy0">:</span> <span class="st0">"not "</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span><br>&nbsp;</pre> 
        <pre>49927398716 is valid
49927398717 is not valid
1234567812345678 is not valid
1234567812345670 is valid
</pre> 
        <p>Note that the original implementation, which follows, is flawed because it assumes that n is a number which, when represented as a string, has an even number of characters. Granted, the brief is for Credit Card Numbers which are all, at the time of writing, an even number of digits. </p> 
        <pre class="csharp highlighted_source"><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span><br><span class="kw1">using</span> <span class="co3">System.Linq</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw1">namespace</span> Luhn<br><span class="br0">{</span><br>    <span class="kw4">class</span> Program<br>    <span class="br0">{</span><br>        <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">bool</span> luhn<span class="br0">(</span><span class="kw4">long</span> n<span class="br0">)</span><br>        <span class="br0">{</span><br>            <span class="kw4">long</span> nextdigit, sum <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>            <br>            <span class="kw4">bool</span> alt <span class="sy0">=</span> <span class="kw1">false</span><span class="sy0">;</span>            <br>            <span class="kw1">while</span> <span class="br0">(</span>n <span class="sy0">!=</span> <span class="nu0">0</span><span class="br0">)</span><br>            <span class="br0">{</span>                <br>                nextdigit <span class="sy0">=</span> n <span class="sy0">%</span> <span class="nu0">10</span><span class="sy0">;</span><br>                <span class="kw1">if</span> <span class="br0">(</span>alt<span class="br0">)</span><br>                <span class="br0">{</span><br>                    nextdigit <span class="sy0">*=</span> <span class="nu0">2</span><span class="sy0">;</span><br>                    nextdigit <span class="sy0">-=</span> <span class="br0">(</span>nextdigit <span class="sy0">&gt;</span> <span class="nu0">9</span><span class="br0">)</span> <span class="sy0">?</span> <span class="nu0">9</span> <span class="sy0">:</span> <span class="nu0">0</span><span class="sy0">;</span><br>                <span class="br0">}</span><br>                sum <span class="sy0">+=</span> nextdigit<span class="sy0">;</span><br>                alt <span class="sy0">=</span> <span class="sy0">!</span>alt<span class="sy0">;</span><br>                n <span class="sy0">/=</span> <span class="nu0">10</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>            <span class="kw1">return</span> <span class="br0">(</span>sum <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">bool</span> luhnLinq<span class="br0">(</span><span class="kw4">long</span> n<span class="br0">)</span><br>        <span class="br0">{</span><br>            <span class="kw4">string</span> s <span class="sy0">=</span> n<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">return</span> s<span class="sy0">.</span><span class="kw1">Select</span><span class="br0">(</span><span class="br0">(</span>c, i<span class="br0">)</span> <span class="sy0">=&gt;</span> <span class="br0">(</span>c <span class="sy0">-</span> <span class="st0">'0'</span><span class="br0">)</span> <span class="sy0">&lt;&lt;</span> <span class="br0">(</span><span class="br0">(</span>s<span class="sy0">.</span><span class="me1">Length</span> <span class="sy0">-</span> i <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">&amp;</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">Sum</span><span class="br0">(</span>n <span class="sy0">=&gt;</span> n <span class="sy0">&gt;</span> <span class="nu0">9</span> <span class="sy0">?</span> n <span class="sy0">-</span> <span class="nu0">9</span> <span class="sy0">:</span> n<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">(</span><span class="kw4">string</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span><br>        <span class="br0">{</span>            <br>            <span class="kw4">long</span><span class="br0">[</span><span class="br0">]</span> given <span class="sy0">=</span> <a href="http://www.google.com/search?q=new+msdn.microsoft.com"><span class="kw3">new</span></a> <span class="kw4">long</span><span class="br0">[</span><span class="br0">]</span> <span class="br0">{</span><span class="nu0">49927398716</span>, <span class="nu0">49927398717</span>, <span class="nu0">1234567812345678</span>, <span class="nu0">1234567812345670</span><span class="br0">}</span><span class="sy0">;</span><br>            <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">long</span> num <span class="kw1">in</span> given<span class="br0">)</span><br>            <span class="br0">{</span><br>                <span class="kw4">string</span> valid <span class="sy0">=</span> <span class="br0">(</span>luhn<span class="br0">(</span>num<span class="br0">)</span><span class="br0">)</span> <span class="sy0">?</span> <span class="st0">" is valid"</span> <span class="sy0">:</span> <span class="st0">" is not valid"</span><span class="sy0">;</span><br>                Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span>num <span class="sy0">+</span> valid<span class="br0">)</span><span class="sy0">;</span><br>            <span class="br0">}</span><br>&nbsp;<br>        <span class="br0">}</span><br>    <span class="br0">}</span><br><span class="br0">}</span></pre> 
        <pre>49927398716 is valid
49927398717 is not valid
1234567812345678 is not valid
1234567812345670 is valid
</pre> 
        <p>A solution without using LINQ, works for all versions of .NET. </p> 
        <pre class="csharp highlighted_source">&nbsp;<br><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span><br><span class="kw1">namespace</span> Luhn_Test<br><span class="br0">{</span><br>	<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">class</span> Extensions <br>	<span class="br0">{</span><br>		<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">string</span> Reverse<span class="br0">(</span><span class="kw1">this</span> <span class="kw4">string</span> s <span class="br0">)</span><br>		<span class="br0">{</span><br>		    <span class="kw4">char</span><span class="br0">[</span><span class="br0">]</span> charArray <span class="sy0">=</span> s<span class="sy0">.</span><span class="me1">ToCharArray</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>		    Array<span class="sy0">.</span><span class="me1">Reverse</span><span class="br0">(</span> charArray <span class="br0">)</span><span class="sy0">;</span><br>		    <span class="kw1">return</span> <a href="http://www.google.com/search?q=new+msdn.microsoft.com"><span class="kw3">new</span></a> <span class="kw4">string</span><span class="br0">(</span> charArray <span class="br0">)</span><span class="sy0">;</span><br>		<span class="br0">}</span><br>	<span class="br0">}</span><br>	<span class="kw4">class</span> Program<br>	<span class="br0">{</span><br>		<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">bool</span> Luhn<span class="br0">(</span><span class="kw4">long</span> x<span class="br0">)</span><br>		<span class="br0">{</span><br>			<span class="kw4">long</span> s1<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span><br>			<span class="kw4">long</span> s2<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span><br>			<span class="kw4">bool</span> STATE<span class="sy0">=</span>x<span class="sy0">%</span>10<span class="sy0">!=</span><span class="nu0">0</span><span class="sy0">;</span> <span class="co1">// If it ends with zero, we want the order to be the other way around</span><br>			x<span class="sy0">=</span><span class="kw4">long</span><span class="sy0">.</span><span class="me1">Parse</span><span class="br0">(</span>x<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">Reverse</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>			<span class="kw1">while</span> <span class="br0">(</span>x<span class="sy0">!=</span><span class="nu0">0</span><span class="br0">)</span><br>			<span class="br0">{</span><br>				s1<span class="sy0">+=</span>STATE<span class="sy0">?</span>x<span class="sy0">%</span>10<span class="sy0">:</span><span class="nu0">0</span><span class="sy0">;</span><br>				s2<span class="sy0">+=</span>STATE<span class="sy0">?</span><span class="nu0">0</span><span class="sy0">:</span><span class="br0">(</span><span class="br0">(</span>x<span class="sy0">%</span>10<span class="br0">)</span><span class="sy0">*</span><span class="nu0">2</span><span class="sy0">&gt;</span><span class="nu0">9</span><span class="br0">)</span><span class="sy0">?</span><span class="br0">(</span><span class="br0">(</span><span class="br0">(</span>x<span class="sy0">%</span>10<span class="br0">)</span><span class="sy0">*</span><span class="nu0">2</span><span class="sy0">/</span><span class="nu0">10</span><span class="br0">)</span><span class="sy0">+</span><span class="br0">(</span><span class="br0">(</span>x<span class="sy0">%</span>10<span class="br0">)</span><span class="sy0">*</span><span class="nu0">2</span><span class="br0">)</span><span class="sy0">%</span>10<span class="br0">)</span><span class="sy0">:</span><span class="br0">(</span><span class="br0">(</span>x<span class="sy0">%</span>10<span class="br0">)</span><span class="sy0">*</span><span class="nu0">2</span><span class="br0">)</span><span class="sy0">;</span> <br>				STATE<span class="sy0">=!</span>STATE<span class="sy0">;</span> <span class="co1">//Switch state</span><br>				x<span class="sy0">/=</span><span class="nu0">10</span><span class="sy0">;</span> <span class="co1">//Cut the last digit and continue</span><br>			<span class="br0">}</span><br>			<span class="kw1">return</span> <span class="br0">(</span><span class="br0">(</span>s1<span class="sy0">+</span>s2<span class="br0">)</span><span class="sy0">%</span>10<span class="sy0">==</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span> <span class="co1">//Check if it ends with zero, if so, return true, otherwise,false.</span><br>		<span class="br0">}</span><br>		<span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">(</span><span class="kw4">string</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span><br>		<span class="br0">{</span><br>			<span class="kw4">long</span><span class="br0">[</span><span class="br0">]</span> ks <span class="sy0">=</span> <span class="br0">{</span><span class="nu0">1234567812345670</span>, <span class="nu0">49927398717</span>, <span class="nu0">1234567812345678</span> ,<span class="nu0">1234567812345670</span> <span class="br0">}</span><span class="sy0">;</span><br>			<span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">long</span> k <span class="kw1">in</span> ks<span class="br0">)</span><br>			<span class="br0">{</span><br>			Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"{0} is {1} Valid."</span>,k,Luhn<span class="br0">(</span>k<span class="br0">)</span><span class="sy0">?</span><span class="st0">""</span><span class="sy0">:</span><span class="st0">"Not"</span><span class="br0">)</span><span class="sy0">;</span>	<br>			<span class="br0">}</span><br>		Start<span class="sy0">:</span><br>			<span class="kw1">try</span> <span class="br0">{</span> <br>			Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"Enter your credit:"</span><span class="br0">)</span><span class="sy0">;</span><br>			<span class="kw4">long</span> x<span class="sy0">=</span><span class="kw4">long</span><span class="sy0">.</span><span class="me1">Parse</span><span class="br0">(</span>Console<span class="sy0">.</span><span class="me1">ReadLine</span><span class="br0">(</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>			Console<span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span><span class="st0">"{0} Valid."</span>,Luhn<span class="br0">(</span>x<span class="br0">)</span><span class="sy0">?</span><span class="st0">""</span><span class="sy0">:</span><span class="st0">"Not"</span><span class="br0">)</span><span class="sy0">;</span><br>			<span class="kw1">goto</span> Start<span class="sy0">;</span><br>			<span class="br0">}</span><br>			<span class="kw1">catch</span> <span class="br0">(</span>FormatException<span class="br0">)</span><br>			<span class="br0">{</span><br>				<span class="kw1">goto</span> Start<span class="sy0">;</span><br>			<span class="br0">}</span>			<br>		<span class="br0">}</span><br>	<span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;</pre> 
        <pre>1234567812345670 is Valid.
49927398717 is Not Valid.
1234567812345678 is Not Valid.
49927398716 is Valid.
</pre> 
        <p>A solution optimized for readability: </p> 
        <pre class="csharp highlighted_source">&nbsp;<br><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span><br><span class="kw1">using</span> <span class="co3">System.Linq</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw1">public</span> <span class="kw4">class</span> CreditCardLogic<br><span class="br0">{</span><br>    <span class="kw1">static</span> Func<span class="sy0">&lt;</span><span class="kw4">char</span>, <span class="kw4">int</span><span class="sy0">&gt;</span> charToInt <span class="sy0">=</span> c <span class="sy0">=&gt;</span> c <span class="sy0">-</span> <span class="st0">'0'</span><span class="sy0">;</span><br>&nbsp;<br>    <span class="kw1">static</span> Func<span class="sy0">&lt;</span><span class="kw4">int</span>, <span class="kw4">int</span><span class="sy0">&gt;</span> doubleDigit <span class="sy0">=</span> n <span class="sy0">=&gt;</span> <span class="br0">(</span>n <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">.</span><span class="kw1">Select</span><span class="br0">(</span>charToInt<span class="br0">)</span><span class="sy0">.</span><span class="me1">Sum</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>    <span class="kw1">static</span> Func<span class="sy0">&lt;</span><span class="kw4">int</span>, <span class="kw4">bool</span><span class="sy0">&gt;</span> isOddIndex <span class="sy0">=</span> index <span class="sy0">=&gt;</span> index <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br>&nbsp;<br>    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">bool</span> LuhnCheck<span class="br0">(</span><span class="kw4">string</span> creditCardNumber<span class="br0">)</span><br>    <span class="br0">{</span><br>        <span class="kw1">var</span> checkSum <span class="sy0">=</span> creditCardNumber<br>            <span class="sy0">.</span><span class="kw1">Select</span><span class="br0">(</span>charToInt<span class="br0">)</span><br>            <span class="sy0">.</span><span class="me1">Reverse</span><span class="br0">(</span><span class="br0">)</span><br>            <span class="sy0">.</span><span class="kw1">Select</span><span class="br0">(</span><span class="br0">(</span>digit, index<span class="br0">)</span> <span class="sy0">=&gt;</span> isOddIndex<span class="br0">(</span>index<span class="br0">)</span> <span class="sy0">?</span> digit <span class="sy0">:</span> doubleDigit<span class="br0">(</span>digit<span class="br0">)</span><span class="br0">)</span><br>            <span class="sy0">.</span><span class="me1">Sum</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>        <span class="kw1">return</span> checkSum <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;</pre> 
        <p>Extremely compact version uses Europa rtl library <a rel="nofollow" class="external free" href="https://github.com/CodeAlkemist/Europa-rtl">https://github.com/CodeAlkemist/Europa-rtl</a> </p> 
        <pre class="csharp highlighted_source">&nbsp;<br><span class="kw1">using</span> <span class="co3">System</span><span class="sy0">;</span><br><span class="kw1">using</span> <span class="co3">EuropaRTL.Utilities</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw1">public</span> <span class="kw1">static</span> <span class="kw1">partial</span> <span class="kw4">class</span> Algoritmhs<br><span class="br0">{</span><br>    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">bool</span> CheckLuhn<span class="br0">(</span><span class="kw4">long</span> n<span class="br0">)</span><br>    <span class="br0">{</span><br>        <span class="kw4">int</span> s1 <span class="sy0">=</span> n<span class="sy0">.</span><span class="me1">Shatter</span><span class="br0">(</span><span class="kw1">true</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">Subset</span><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">Arithmetic</span><span class="br0">(</span><span class="st0">'+'</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw4">int</span> s2 <span class="sy0">=</span> n<span class="sy0">.</span><span class="me1">Shatter</span><span class="br0">(</span><span class="kw1">true</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">Subset</span><span class="br0">(</span><span class="nu0">1</span>, <span class="sy0">-</span><span class="nu0">1</span>, <span class="nu0">2</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">ArithmeticRA</span><span class="br0">(</span><span class="st0">'*'</span>, <span class="nu0">2</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">ShatterAndSum</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">Arithmetic</span><span class="br0">(</span><span class="st0">'+'</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">return</span> <span class="br0">(</span>s1 <span class="sy0">+</span> s2<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span> <span class="sy0">?</span> <span class="kw1">true</span> <span class="sy0">:</span> <span class="kw1">false</span><span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span><br><span class="kw4">class</span> Program<br><span class="br0">{</span><br>    <span class="kw1">static</span> <span class="kw4">void</span> Main<span class="br0">(</span><span class="kw4">string</span><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span><br>    <span class="br0">{</span><br>        <span class="kw4">long</span><span class="br0">[</span><span class="br0">]</span> ll <span class="sy0">=</span> <span class="br0">{</span><br>                <span class="nu0">49927398716</span>,<br>                <span class="nu0">49927398717</span>,<br>                <span class="nu0">1234567812345678</span>,<br>                <span class="nu0">1234567812345670</span><br>            <span class="br0">}</span><span class="sy0">;</span><br>        <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw1">var</span> item <span class="kw1">in</span> ll<span class="br0">)</span><br>        <span class="br0">{</span><br>            item<span class="sy0">.</span><span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>            Algoritmhs<span class="sy0">.</span><span class="me1">CheckLuhn</span><span class="br0">(</span>item<span class="br0">)</span><span class="sy0">.</span><span class="me1">ToString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">WriteLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>        Console<span class="sy0">.</span><span class="me1">ReadKey</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;</pre> 
        <pre>49927398716
True
49927398717
False
1234567812345678
False
1234567812345670
False
</pre> 
        <h2><span class="mw-headline" id="Cach.C3.A9_ObjectScript"><a href="/wiki/Category:Cach%C3%A9_ObjectScript" title="Category:Caché ObjectScript">Caché ObjectScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=22" title="Edit section: Caché ObjectScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">Class Utils.Check [ Abstract ]<br>{<br>&nbsp;<br>ClassMethod Luhn(x As&nbsp;%String) As&nbsp;%Boolean<br>{<br>	// https://www.simple-talk.com/sql/t-sql-programming/calculating-and-verifying-check-digits-in-t-sql/<br>	SET x=$TRANSLATE(x," "), cd=$EXTRACT(x,*)<br>	SET x=$REVERSE($EXTRACT(x,1,*-1)), t=0<br>	FOR i=1:1:$LENGTH(x) {<br>		SET n=$EXTRACT(x,i)<br>		IF i#2 SET n=n*2 IF $LENGTH(n)&gt;1 SET n=$EXTRACT(n,1)+$EXTRACT(n,2)<br>		SET t=t+n<br>	}<br>	QUIT cd=((t*9)#10)<br>}<br>&nbsp;<br>}</pre> 
        <div> 
         <dl>
          <dt>
           Examples:
          </dt>
         </dl>
        </div> 
        <pre>USER&gt;For  { Read ccn Quit:ccn=""  Write ": "_##class(Utils.Check).Luhn(ccn),&nbsp;! }
49927398716: 1
49927398717: 0
1234567812345678: 0
1234567812345670: 1

USER&gt;</pre> 
        <h2><span class="mw-headline" id="Ceylon"><a href="/wiki/Category:Ceylon" title="Category:Ceylon">Ceylon</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=23" title="Edit section: Ceylon">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">shared void run() {<br>    value numbers = "49927398716<br>                     49927398717<br>                     1234567812345678<br>                     1234567812345670";<br>    for(number in numbers.lines) {<br>        print("``number`` passes? ``luhn(number)``");<br>    }<br>}<br>&nbsp;<br>shared Boolean luhn(String number) {<br>    value digits = number<br>        .reversed<br>        .map(Character.string)<br>        .map(parseInteger)<br>        .coalesced;<br>    value s1 = sum {0, *digits.by(2)};<br>    value s2 = sum {<br>      0,<br>      *digits<br>        .skip(1)<br>        .by(2)<br>        .map(curry(times&lt;Integer&gt;)(2))<br>        .map((Integer element) =&gt; element / 10 + element&nbsp;% 10)<br>    };<br>    return (s1 + s2)&nbsp;% 10 == 0;<br>}</pre> 
        <h2><span class="mw-headline" id="Clojure"><a href="/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=24" title="Edit section: Clojure">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="clojure highlighted_source"><span class="br0">(</span><span class="kw1">defn</span> luhn? <span class="br0">[</span>cc<span class="br0">]</span><br>  <span class="br0">(</span><span class="kw1">let</span> <span class="br0">[</span>factors <span class="br0">(</span><span class="kw1">cycle</span> <span class="br0">[</span><span class="nu0">1</span> <span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span><br>        numbers <span class="br0">(</span><span class="kw1">map</span> #<span class="br0">(</span>Character<span class="sy0">/</span>digit <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span> cc<span class="br0">)</span><br>        sum <span class="br0">(</span><span class="kw1">reduce</span> <span class="sy0">+</span> <span class="br0">(</span><span class="kw1">map</span> #<span class="br0">(</span><span class="sy0">+</span> <span class="br0">(</span>quot <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span> <span class="br0">(</span>mod <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><br>                           <span class="br0">(</span><span class="kw1">map</span> <span class="sy0">*</span> <span class="br0">(</span><span class="kw1">reverse</span> numbers<span class="br0">)</span> factors<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">]</span><br>    <span class="br0">(</span><span class="kw1">zero?</span> <span class="br0">(</span>mod sum <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">doseq</span> <span class="br0">[</span>n <span class="br0">[</span><span class="st0">"49927398716"</span> <span class="st0">"49927398717"</span> <span class="st0">"1234567812345678"</span> <span class="st0">"1234567812345670"</span><span class="br0">]</span><span class="br0">]</span><br>  <span class="br0">(</span>println <span class="br0">(</span>luhn? n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre> 
        <h2><span class="mw-headline" id="COBOL"><a href="/wiki/Category:COBOL" title="Category:COBOL">COBOL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=25" title="Edit section: COBOL">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/OpenCOBOL" title="OpenCOBOL" class="mw-redirect">OpenCOBOL</a>
        </div> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/IBM_Enterprise_COBOL_for_z/OS" title="IBM Enterprise COBOL for z/OS">IBM Enterprise COBOL for z/OS</a>
        </div> 
        <pre class="cobol highlighted_source">       <span class="kw3">IDENTIFICATION</span> <span class="kw3">DIVISION</span><span class="sy0">.</span><br>       <span class="kw3">PROGRAM-ID</span><span class="sy0">.</span>  LUHNTEST<span class="sy0">.</span><br>       ENVIRONMENT <span class="kw3">DIVISION</span><span class="sy0">.</span><br>       <span class="kw3">INPUT-OUTPUT</span> <span class="kw1">SECTION</span><span class="sy0">.</span><br>       <span class="kw3">data</span> <span class="kw3">division</span><span class="sy0">.</span><br>       <span class="kw3">WORKING-STORAGE</span> <span class="kw1">SECTION</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  inp-card<span class="sy0">.</span><br>         <span class="nu0">03</span>  inp-card-<span class="kw3">ch</span>      <span class="kw3">pic</span> x<span class="br0">(</span><span class="nu0">01</span><span class="br0">)</span> <span class="kw3">occurs</span> <span class="nu0">20</span> <span class="kw2">times</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  ws-result          <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">(</span><span class="nu0">01</span><span class="br0">)</span><span class="sy0">.</span><br>         <span class="nu0">88</span>  pass-luhn-<span class="kw3">test</span>             <span class="kw3">value</span> <span class="nu0">0</span><span class="sy0">.</span><br>&nbsp;<br>       <span class="kw3">PROCEDURE</span> <span class="kw3">DIVISION</span><span class="sy0">.</span><br>           <span class="kw2">move</span> <span class="st0">"49927398716"</span>       <span class="kw2">to</span> inp-card<br>           <span class="kw2">perform</span> test-card<br>           <span class="kw2">move</span> <span class="st0">"49927398717"</span>       <span class="kw2">to</span> inp-card<br>           <span class="kw2">perform</span> test-card<br>           <span class="kw2">move</span> <span class="st0">"1234567812345678"</span>  <span class="kw2">to</span> inp-card<br>           <span class="kw2">perform</span> test-card<br>           <span class="kw2">move</span> <span class="st0">"1234567812345670"</span>  <span class="kw2">to</span> inp-card<br>           <span class="kw2">perform</span> test-card<br>           <span class="kw3">stop</span> <span class="kw3">run</span><br>           <span class="sy0">.</span><br>       test-card<span class="sy0">.</span><br>           <span class="kw2">call</span> <span class="st0">"LUHN"</span> <span class="kw3">using</span> inp-card<span class="sy0">,</span> ws-result<br>           <span class="kw1">if</span> pass-luhn-<span class="kw3">test</span><br>             <span class="kw2">display</span> <span class="st0">"input="</span> inp-card <span class="st0">"pass"</span><br>           <span class="kw3">else</span><br>             <span class="kw2">display</span> <span class="st0">"input="</span> inp-card <span class="st0">"fail"</span><br>           <span class="sy0">.</span><br>&nbsp;<br>       <span class="kw3">END</span> <span class="kw3">PROGRAM</span> LUHNTEST<span class="sy0">.</span><br>       <span class="kw3">IDENTIFICATION</span> <span class="kw3">DIVISION</span><span class="sy0">.</span><br>       <span class="kw3">PROGRAM-ID</span><span class="sy0">.</span>  LUHN<span class="sy0">.</span><br>       ENVIRONMENT <span class="kw3">DIVISION</span><span class="sy0">.</span><br>       <span class="kw3">INPUT-OUTPUT</span> <span class="kw1">SECTION</span><span class="sy0">.</span><br>       <span class="kw3">DATA</span> <span class="kw3">DIVISION</span><span class="sy0">.</span><br>       <span class="kw3">WORKING-STORAGE</span> <span class="kw1">SECTION</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  maxlen           <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">(</span><span class="nu0">02</span><span class="br0">)</span> <span class="kw3">comp</span> <span class="kw3">value</span> <span class="nu0">16</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  inplen           <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">(</span><span class="nu0">02</span><span class="br0">)</span> <span class="kw3">comp</span> <span class="kw3">value</span> <span class="nu0">0</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  i                <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">(</span><span class="nu0">02</span><span class="br0">)</span> <span class="kw3">comp</span> <span class="kw3">value</span> <span class="nu0">0</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  j                <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">(</span><span class="nu0">02</span><span class="br0">)</span> <span class="kw3">comp</span> <span class="kw3">value</span> <span class="nu0">0</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  l                <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">(</span><span class="nu0">02</span><span class="br0">)</span> <span class="kw3">comp</span> <span class="kw3">value</span> <span class="nu0">0</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  dw               <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">(</span><span class="nu0">02</span><span class="br0">)</span> <span class="kw3">comp</span> <span class="kw3">value</span> <span class="nu0">0</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  ws-total         <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">(</span><span class="nu0">03</span><span class="br0">)</span> <span class="kw3">comp</span> <span class="kw3">value</span> <span class="nu0">0</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  ws-prod          <span class="kw3">pic</span> <span class="nu0">99</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  <span class="kw3">filler</span> <span class="kw3">redefines</span> ws-prod<span class="sy0">.</span><br>         <span class="nu0">03</span>  ws-prod-tens   <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br>         <span class="nu0">03</span>  ws-prod-units  <span class="kw3">pic</span> <span class="nu0">9</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  ws-card<span class="sy0">.</span><br>         <span class="nu0">03</span>  <span class="kw3">filler</span>           <span class="kw3">occurs</span> <span class="nu0">16</span> <span class="kw2">times</span> <span class="kw3">depending</span> <span class="kw3">on</span> maxlen<span class="sy0">.</span><br>           <span class="nu0">05</span>  ws-card-<span class="kw3">ch</span>     <span class="kw3">pic</span> x<span class="br0">(</span><span class="nu0">01</span><span class="br0">)</span><span class="sy0">.</span><br>           <span class="nu0">05</span>  ws-card-digit <span class="kw3">redefines</span> ws-card-<span class="kw3">ch</span>  <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">(</span><span class="nu0">01</span><span class="br0">)</span><span class="sy0">.</span><br>       <span class="kw3">LINKAGE</span> <span class="kw1">SECTION</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  inp-card<span class="sy0">.</span><br>         <span class="nu0">03</span>  inp-card-<span class="kw3">ch</span>      <span class="kw3">pic</span> x<span class="br0">(</span><span class="nu0">01</span><span class="br0">)</span> <span class="kw3">occurs</span> <span class="nu0">20</span> <span class="kw2">times</span><span class="sy0">.</span><br>       <span class="nu0">01</span>  ws-result          <span class="kw3">pic</span> <span class="nu0">9</span><span class="br0">(</span><span class="nu0">01</span><span class="br0">)</span><span class="sy0">.</span><br>         <span class="nu0">88</span>  pass-luhn-<span class="kw3">test</span>             <span class="kw3">value</span> <span class="nu0">0</span><span class="sy0">.</span><br>&nbsp;<br>       <span class="kw3">PROCEDURE</span> <span class="kw3">DIVISION</span> <span class="kw3">using</span> inp-card<span class="sy0">,</span> ws-result<span class="sy0">.</span><br>           <span class="kw2">perform</span> <span class="kw2">varying</span> i <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> +<span class="nu0">1</span><br>           <span class="kw2">until</span> i &gt; maxlen<br>           <span class="kw3">or</span>    inp-card-<span class="kw3">ch</span> <span class="br0">(</span>i<span class="br0">)</span> <span class="sy0">=</span> <span class="kw3">space</span><br>           end-<span class="kw2">perform</span><br>           <span class="kw2">compute</span> l <span class="sy0">=</span> i<span class="sy0"> - </span><span class="nu0">1</span><br>           <span class="kw2">compute</span> inplen <span class="sy0">=</span> l<br>           <span class="kw2">perform</span> <span class="kw2">varying</span> j <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> +<span class="nu0">1</span><br>           <span class="kw2">until</span> j &gt; inplen<br>             <span class="kw1">if</span> l &lt; <span class="nu0">1</span><br>               <span class="kw2">move</span> <span class="st0">"0"</span>             <span class="kw2">to</span> ws-card-<span class="kw3">ch</span> <span class="br0">(</span>j<span class="br0">)</span><br>             <span class="kw3">else</span><br>               <span class="kw2">move</span> inp-card-<span class="kw3">ch</span> <span class="br0">(</span>l<span class="br0">)</span> <span class="kw2">to</span> ws-card-<span class="kw3">ch</span> <span class="br0">(</span>j<span class="br0">)</span><br>               <span class="kw2">compute</span> l <span class="sy0">=</span> l<span class="sy0"> - </span><span class="nu0">1</span><br>             end-<span class="kw1">if</span><br>           end-<span class="kw2">perform</span><br>           <span class="kw2">move</span> <span class="nu0">0</span> <span class="kw2">to</span> ws-total<br>           <span class="kw2">perform</span> <span class="kw2">varying</span> i <span class="kw3">from</span> <span class="nu0">1</span> <span class="kw3">by</span> +<span class="nu0">1</span><br>           <span class="kw2">until</span> i &gt; inplen<br>             <span class="kw2">compute</span> dw <span class="sy0">=</span> <span class="nu0">2</span><span class="sy0"> - </span><span class="br0">(</span>i<span class="sy0"> - </span><span class="nu0">2</span><span class="sy0"> * </span><span class="kw3">function</span> <span class="kw4">integer</span> <span class="br0">(</span>i<span class="sy0"> / </span><span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span><br>             <span class="kw2">compute</span> ws-prod <span class="sy0">=</span> ws-card-digit <span class="br0">(</span>i<span class="br0">)</span><span class="sy0"> * </span>dw<br>             <span class="kw2">compute</span> ws-total <span class="sy0">=</span> ws-total<br>                             <span class="sy0"> + </span>ws-prod-tens<br>                             <span class="sy0"> + </span>ws-prod-units<br>           end-<span class="kw2">perform</span><br>           <span class="kw2">compute</span> ws-result <span class="sy0">=</span> ws-total<span class="sy0"> - </span><span class="nu0">10</span><span class="sy0"> * </span><span class="kw3">function</span> <span class="kw4">integer</span> <span class="br0">(</span>ws-total<span class="sy0"> / </span><span class="nu0">10</span><span class="br0">)</span><br>           goback<br>           <span class="sy0">.</span><br>       <span class="kw3">END</span> <span class="kw3">PROGRAM</span> LUHN<span class="sy0">.</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>input=49927398716         pass 
input=49927398717         fail 
input=1234567812345678    fail 
input=1234567812345670    pass 
</pre> 
        <h2><span class="mw-headline" id="Common_Lisp"><a href="/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=26" title="Edit section: Common Lisp">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="lisp highlighted_source"><span class="br0">(</span><span class="kw1">defun</span> luhn <span class="br0">(</span>n<span class="br0">)</span><br>  <span class="br0">(</span>labels <span class="br0">(</span><span class="br0">(</span>sum-digits <span class="br0">(</span>n<span class="br0">)</span> <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&gt;</span> n <span class="nu0">9</span><span class="br0">)</span> <span class="br0">(</span>- n <span class="nu0">9</span><span class="br0">)</span> n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>n* <span class="br0">(</span><span class="kw1">reverse</span> n<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">l</span> <span class="br0">(</span><span class="kw1">length</span> n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>      <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>s1 <span class="br0">(</span>loop for i from <span class="nu0">0</span> below <span class="kw1">l</span> by <span class="nu0">2</span><br>		   summing <span class="br0">(</span>digit-char-p <span class="br0">(</span><span class="kw1">aref</span> n* i<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>	    <span class="br0">(</span>s2 <span class="br0">(</span>loop for i from <span class="nu0">1</span> below <span class="kw1">l</span> by <span class="nu0">2</span><br>		   summing <span class="br0">(</span>sum-digits <span class="br0">(</span>* <span class="nu0">2</span> <span class="br0">(</span>digit-char-p <span class="br0">(</span><span class="kw1">aref</span> n* i<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>	<span class="br0">(</span><span class="kw1">zerop</span> <span class="br0">(</span>mod <span class="br0">(</span>+ s1 s2<span class="br0">)</span> <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre> 
        <p>Another version, using Maciej Pasternacki's reader macros for function composition and <a href="/wiki/Currying" title="Currying">currying</a> in the <a rel="nofollow" class="external text" href="http://www.cl-user.net/asp/Fr4F/sdataQ1nAQqjvnQ3MDQ3ESH8X8yBX8yBXnMq=/sdataQu3F$sSHnB==">curly</a> package: </p> 
        <pre class="lisp highlighted_source"><span class="br0">(</span>require <span class="sy0">:</span><span class="me1">curly</span><span class="br0">)</span><br><span class="br0">(</span>use-package <span class="sy0">:</span><span class="me1">curly</span><span class="br0">)</span><br><span class="br0">(</span>enable-curly-syntax<span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span><span class="kw1">defun</span> luhn <span class="br0">(</span>seq<span class="br0">)</span><br>  <span class="br0">(</span>labels <span class="br0">(</span><span class="br0">(</span>sum-digits <span class="br0">(</span>n<span class="br0">)</span> <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&gt;</span> n <span class="nu0">9</span><span class="br0">)</span> <span class="br0">(</span>- n <span class="nu0">9</span><span class="br0">)</span> n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">funcall</span> <span class="br0">{</span><span class="kw1">zerop</span> <span class="br0">(</span>mod<span class="sy0"> * </span><span class="nu0">10</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">apply</span> #'+<span class="br0">)</span> <span class="br0">(</span><span class="kw1">mapcar</span> #'sum-digits<span class="br0">)</span><br>	     <span class="br0">(</span><span class="kw1">mapcar</span> #'* '#<span class="nu0">1</span><span class="sy0">=</span><span class="br0">(</span><span class="nu0">1</span> <span class="nu0">2</span> <span class="sy0">.</span> #<span class="nu0">1</span>#<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span>map '<span class="kw1">list</span> #'digit-char-p<span class="br0">)</span> <span class="kw1">reverse</span><span class="br0">}</span> seq<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre> 
        <h2><span class="mw-headline" id="D"><a href="/wiki/Category:D" title="Category:D">D</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=27" title="Edit section: D">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <h3><span class="mw-headline" id="Functional_Version">Functional Version</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=28" title="Edit section: Functional Version">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
        <div class="examplemeta translation">
         <b>Translation of</b>: 
         <a href="#Haskell">Haskell</a>
        </div> 
        <pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">algorithm</span><span class="sy0">,</span> std.<span class="me1">range</span><span class="sy0">,</span> std.<span class="kw4">string</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw4">enum</span> luhnTest <span class="sy0">=</span> <span class="br0">(</span><span class="kw2">in</span> <span class="kw4">string</span> n<span class="br0">)</span> <span class="kw4">pure</span> <span class="coMULTI">/*nothrow*/</span> @<span class="kw4">safe</span> <span class="coMULTI">/*@nogc*/</span> <span class="sy0">=&gt;</span><br>    retro<span class="br0">(</span>n<span class="br0">)</span><br>    .<span class="me1">zip</span><span class="br0">(</span>only<span class="br0">(</span><span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">2</span><span class="br0">)</span>.<span class="me1">cycle</span><span class="br0">)</span><br>    .<span class="me1">map</span><span class="sy0">!</span><span class="br0">(</span>p <span class="sy0">=&gt;</span> <span class="br0">(</span>p<span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span> <span class="sy0">-</span> <span class="st0">'0'</span><span class="br0">)</span> <span class="sy0">*</span> p<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><br>    .<span class="me1">map</span><span class="sy0">!</span><span class="br0">(</span>d <span class="sy0">=&gt;</span> d <span class="sy0">/</span> <span class="nu0">10</span> <span class="sy0">+</span> d <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span><br>    .<span class="me1">sum</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw2">assert</span><span class="br0">(</span><span class="st0">"49927398716 49927398717 1234567812345678 1234567812345670"</span><br>           .<span class="me1">split</span>.<span class="me1">map</span><span class="sy0">!</span>luhnTest.<span class="me1">equal</span><span class="br0">(</span><span class="br0">[</span><span class="kw2">true</span><span class="sy0">,</span> <span class="kw2">false</span><span class="sy0">,</span> <span class="kw2">false</span><span class="sy0">,</span> <span class="kw2">true</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span></pre> 
        <h3><span class="mw-headline" id="More_Imperative_Version">More Imperative Version</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=29" title="Edit section: More Imperative Version">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
        <div class="examplemeta translation">
         <b>Translation of</b>: 
         <a href="#C">C</a>
        </div> 
        <pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">algorithm</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw4">bool</span> luhnTest<span class="br0">(</span><span class="kw2">in</span> <span class="kw4">string</span> num<span class="br0">)</span> @<span class="kw4">safe</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> @nogc <span class="br0">{</span><br>    <span class="kw4">uint</span> sum<span class="sy0">;</span><br>    <span class="kw1">foreach_reverse</span> <span class="br0">(</span><span class="kw4">immutable</span> i<span class="sy0">,</span> <span class="kw4">immutable</span> n<span class="sy0">;</span> num<span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw4">immutable</span> <span class="kw4">uint</span> ord <span class="sy0">=</span> n <span class="sy0">-</span> <span class="st0">'<span class="es3">\u0030</span>'</span><span class="sy0">;</span><br>        sum <span class="sy0">+=</span> <span class="br0">(</span><span class="br0">(</span>num.<span class="me1">length</span> <span class="sy0">-</span> i<span class="br0">)</span> <span class="sy0">&amp;</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">?</span> ord <span class="sy0">:</span> ord <span class="sy0">/</span> <span class="nu0">5</span> <span class="sy0">+</span> <span class="br0">(</span><span class="nu0">2</span> <span class="sy0">*</span> ord<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> sum <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw4">immutable</span> data <span class="sy0">=</span> <span class="br0">[</span><span class="st0">"49927398716"</span><span class="sy0">,</span><br>                      <span class="st0">"49927398717"</span><span class="sy0">,</span><br>                      <span class="st0">"1234567812345678"</span><span class="sy0">,</span><br>                      <span class="st0">"1234567812345670"</span><span class="br0">]</span><span class="sy0">;</span><br>    <span class="kw2">assert</span><span class="br0">(</span>data.<span class="me1">map</span><span class="sy0">!</span>luhnTest.<span class="me1">equal</span><span class="br0">(</span><span class="br0">[</span><span class="kw2">true</span><span class="sy0">,</span> <span class="kw2">false</span><span class="sy0">,</span> <span class="kw2">false</span><span class="sy0">,</span> <span class="kw2">true</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span></pre> 
        <h3><span class="mw-headline" id="Stronger_Statically_Typed_Version">Stronger Statically Typed Version</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=30" title="Edit section: Stronger Statically Typed Version">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
        <p>This version uses more precise types. </p> 
        <div class="examplemeta translation">
         <b>Translation of</b>: 
         <a href="#SPARK">SPARK</a>
        </div> 
        <pre class="d highlighted_source"><span class="kw2">import</span> std.<span class="me1">stdio</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw4">struct</span> Interval<span class="br0">(</span>T<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw4">immutable</span> T a<span class="sy0">,</span> b<span class="sy0">;</span><br>&nbsp;<br>    <span class="kw2">this</span><span class="br0">(</span><span class="kw2">in</span> T a_<span class="sy0">,</span> <span class="kw2">in</span> T b_<span class="br0">)</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> @nogc <span class="br0">{</span><br>        <span class="kw2">this</span>.<span class="me1">a</span> <span class="sy0">=</span> a_<span class="sy0">;</span><br>        <span class="kw2">this</span>.<span class="me1">b</span> <span class="sy0">=</span> b_<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">bool</span> opBinaryRight<span class="br0">(</span><span class="kw4">string</span> op<span class="sy0">=</span><span class="st0">"in"</span><span class="br0">)</span><span class="br0">(</span><span class="kw2">in</span> T x<span class="br0">)</span><br>    <span class="kw4">const</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> @nogc <span class="br0">{</span><br>        <span class="kw1">return</span> x <span class="sy0">&gt;=</span> a <span class="sy0">&amp;&amp;</span> x <span class="sy0">&lt;=</span> b<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw4">pure</span> <span class="kw4">nothrow</span> @<span class="kw4">safe</span> @nogc <span class="kw4">const</span> <span class="kw2">invariant</span> <span class="br0">{</span><br>        <span class="kw2">assert</span><span class="br0">(</span>a <span class="sy0">&lt;=</span> b<span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span><br>&nbsp;<br>Interval<span class="sy0">!</span>T interval<span class="br0">(</span>T<span class="br0">)</span><span class="br0">(</span><span class="kw2">in</span> T a<span class="sy0">,</span> <span class="kw2">in</span> T b<span class="br0">)</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> @nogc <span class="br0">{</span><br>    <span class="kw1">return</span> Interval<span class="sy0">!</span>T<span class="br0">(</span>a<span class="sy0">,</span> b<span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br>&nbsp;<br><span class="kw4">bool</span> luhnTest<span class="br0">(</span><span class="kw2">in</span> <span class="kw4">string</span> num<span class="br0">)</span> <span class="kw4">pure</span> <span class="kw4">nothrow</span> @nogc<br><span class="kw2">in</span> <span class="br0">{</span><br>    <span class="kw2">assert</span><span class="br0">(</span>num.<span class="me1">length</span> <span class="sy0">&lt;=</span> <span class="nu0">20</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span> <span class="kw2">body</span> <span class="br0">{</span><br>    <span class="kw4">int</span> sum <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>    <span class="kw4">bool</span> od <span class="sy0">=</span> <span class="kw2">true</span><span class="sy0">;</span><br>    <span class="kw4">bool</span> ok <span class="sy0">=</span> <span class="kw2">true</span><span class="sy0">;</span><br>    <span class="kw4">immutable</span> <span class="kw4">int</span> numLen <span class="sy0">=</span> num.<span class="me1">length</span><span class="sy0">;</span><br>&nbsp;<br>    <span class="kw1">foreach_reverse</span> <span class="br0">(</span><span class="kw4">immutable</span> p<span class="sy0">;</span> <span class="nu0">0</span> <span class="sy0">..</span> <span class="me1">numLen</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="kw4">immutable</span> <span class="kw4">int</span> i <span class="sy0">=</span> num<span class="br0">[</span>p<span class="br0">]</span> <span class="sy0">-</span> <span class="st0">'0'</span><span class="sy0">;</span><br>        <span class="kw1">if</span> <span class="br0">(</span>i <span class="sy0">!</span><span class="kw2">in</span> interval<span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">9</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">{</span><br>            ok <span class="sy0">=</span> <span class="kw2">false</span><span class="sy0">;</span><br>            <span class="kw1">break</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>&nbsp;<br>        <span class="kw4">immutable</span> <span class="kw4">int</span> x <span class="sy0">=</span> <span class="br0">(</span><span class="br0">(</span>i <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy0">+</span> <span class="br0">(</span>i <span class="sy0">/</span> <span class="nu0">5</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw2">assert</span><span class="br0">(</span><span class="br0">(</span>numLen <span class="sy0">-</span> p<span class="br0">)</span> <span class="kw2">in</span> interval<span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">19</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw2">assert</span><span class="br0">(</span>sum <span class="kw2">in</span> interval<span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="br0">(</span>numLen <span class="sy0">-</span> p<span class="br0">)</span> <span class="sy0">*</span> <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw2">assert</span><span class="br0">(</span>i <span class="kw2">in</span> interval<span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">9</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw2">assert</span><span class="br0">(</span>x <span class="kw2">in</span> interval<span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">9</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        sum <span class="sy0">+=</span> od <span class="sy0">?</span> i <span class="sy0">:</span> x<span class="sy0">;</span><br>        od <span class="sy0">=</span> <span class="sy0">!</span>od<span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw1">return</span> ok <span class="sy0">&amp;&amp;</span> <span class="br0">(</span>sum <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br>&nbsp;<br><span class="kw4">void</span> main<span class="br0">(</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">foreach</span> <span class="br0">(</span><span class="kw4">immutable</span> n<span class="sy0">;</span> <span class="br0">[</span><span class="st0">"49927398716"</span><span class="sy0">,</span> <span class="st0">"49927398717"</span><span class="sy0">,</span><br>                           <span class="st0">"1234567812345678"</span><span class="sy0">,</span> <span class="st0">"1234567812345670"</span><span class="sy0">,</span><br>                           <span class="st0">"123456781234567D"</span><span class="br0">]</span><span class="br0">)</span><br>        writefln<span class="br0">(</span><span class="st0">"%s is&nbsp;%svalid"</span><span class="sy0">,</span> n<span class="sy0">,</span> luhnTest<span class="br0">(</span>n<span class="br0">)</span> <span class="sy0">?</span> <span class="st0">""</span> <span class="sy0">:</span> <span class="st0">"not "</span><span class="br0">)</span><span class="sy0">;</span><br><span class="br0">}</span></pre> 
        <h2><span class="mw-headline" id="EchoLisp"><a href="/wiki/Category:EchoLisp" title="Category:EchoLisp">EchoLisp</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=31" title="Edit section: EchoLisp">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="lisp highlighted_source">&nbsp;<br><span class="co1">;; value for 'even' numbers</span><br><span class="br0">(</span>define <span class="br0">(</span>even-val n<span class="br0">)</span> <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">&gt;</span> n <span class="nu0">4</span><span class="br0">)</span> <span class="br0">(</span>+ n n -<span class="nu0">9</span><span class="br0">)</span> <span class="br0">(</span>+ n n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="co1">;;Luhn test</span><br><span class="co1">;; input&nbsp;: a string of decimal digits</span><br><span class="co1">;; output #t or #f</span><br><span class="br0">(</span>define <span class="br0">(</span>valid nums <span class="br0">(</span>odd #f <span class="br0">)</span><span class="br0">)</span> <br>    <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>nums <span class="br0">(</span>map string-<span class="sy0">&gt;</span>number <span class="br0">(</span><span class="kw1">reverse</span> <span class="br0">(</span>string-<span class="sy0">&gt;</span><span class="kw1">list</span> nums<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="sy0">=</span> <span class="nu0">0</span> <span class="br0">(</span>modulo <br>       <span class="br0">(</span>for/sum <span class="br0">(</span><span class="br0">(</span>n nums<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">set</span><span class="sy0">!</span> odd <span class="br0">(</span><span class="kw1">not</span> odd<span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">if</span> odd n <span class="br0">(</span>even-val n<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span> <br>       <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br><span class="br0">(</span>valid <span class="st0">"49927398716"</span><span class="br0">)</span> ? #t<br><span class="br0">(</span>valid <span class="st0">"1234567812345670"</span><span class="br0">)</span> ? #t<br><span class="br0">(</span>valid <span class="st0">"1234567812345678"</span><span class="br0">)</span> ? #f<br><span class="br0">(</span>valid <span class="st0">"49927398717"</span><span class="br0">)</span> ? #f<br>&nbsp;</pre> 
        <h2><span class="mw-headline" id="Elixir"><a href="/wiki/Category:Elixir" title="Category:Elixir">Elixir</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=32" title="Edit section: Elixir">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">defmodule Luhn do<br>  def valid?(cc) when is_binary(cc), do: String.to_integer(cc) |&gt; valid?<br>  def valid?(cc) when is_integer(cc) do<br>    0 == Integer.digits(cc)<br>         |&gt; Enum.reverse<br>         |&gt; Enum.chunk(2, 2, [0])<br>         |&gt; Enum.reduce(0, fn([odd, even], sum) -&gt; Enum.sum([sum, odd | Integer.digits(even*2)]) end)<br>         |&gt; rem(10)<br>  end<br>end<br>&nbsp;<br>numbers = ~w(49927398716 49927398717 1234567812345678 1234567812345670)<br>for n &lt;- numbers, do: IO.puts "#{n}: #{Luhn.valid?(n)}"</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716: true
49927398717: false
1234567812345678: false
1234567812345670: true
</pre> 
        <h2><span class="mw-headline" id="Erlang"><a href="/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=33" title="Edit section: Erlang">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="erlang highlighted_source">&nbsp;<br><span class="sy3">-</span><span class="re2">module</span><span class="br0">(</span>luhn_test<span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="sy3">-</span><span class="re2">export</span><span class="br0">(</span> <span class="br0">[</span>credit_card<span class="sy3">/</span><span class="nu0">1</span><span class="sy1">,</span> task<span class="sy3">/</span><span class="nu0">0</span><span class="br0">]</span> <span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">luhn_sum</span><span class="br0">(</span><span class="br0">[</span><span class="re5">Odd</span><span class="sy1">,</span> <span class="re5">Even</span> |Rest<span class="br0">]</span><span class="br0">)</span> <span class="kw1">when</span> <span class="re5">Even</span> <span class="sy3">&gt;=</span> <span class="nu0">5</span> <span class="sy1">-&gt;</span><br>    <span class="re5">Odd</span> <span class="sy3">+</span> <span class="nu0">2</span> <span class="sy3">*</span> <span class="re5">Even</span> <span class="sy3">-</span> <span class="nu0">10</span> <span class="sy3">+</span> <span class="nu0">1</span> <span class="sy3">+</span> <span class="re3">luhn_sum</span><span class="br0">(</span><span class="re5">Rest</span><span class="br0">)</span><span class="sy1">;</span><br><span class="re3">luhn_sum</span><span class="br0">(</span><span class="br0">[</span><span class="re5">Odd</span><span class="sy1">,</span> <span class="re5">Even</span> |Rest<span class="br0">]</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">Odd</span> <span class="sy3">+</span> <span class="nu0">2</span> <span class="sy3">*</span> <span class="re5">Even</span> <span class="sy3">+</span> <span class="re3">luhn_sum</span><span class="br0">(</span><span class="re5">Rest</span><span class="br0">)</span><span class="sy1">;</span><br><span class="re3">luhn_sum</span><span class="br0">(</span><span class="br0">[</span><span class="re5">Odd</span><span class="br0">]</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">Odd</span><span class="sy1">;</span><br><span class="re3">luhn_sum</span><span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="nu0">0</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">check</span><span class="br0">(</span> <span class="re5">Sum</span> <span class="br0">)</span> <span class="kw1">when</span> <span class="br0">(</span><span class="re5">Sum</span> <span class="kw2">rem</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy3">=:=</span> <span class="nu0">0</span> <span class="sy1">-&gt;</span> <span class="me1">valid</span><span class="sy1">;</span><br><span class="re3">check</span><span class="br0">(</span> <span class="re5">_Sum</span> <span class="br0">)</span> <span class="sy1">-&gt;</span> <span class="me1">invalid</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">credit_card</span><span class="br0">(</span><span class="re5">Digits</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re3">check</span><span class="br0">(</span><span class="re3">luhn_sum</span><span class="br0">(</span><a href="http://erlang.org/doc/man/lists.html"><span class="kw5">lists</span></a>:<span class="re3">map</span><span class="br0">(</span><span class="kw1">fun</span><span class="br0">(</span><span class="re5">D</span><span class="br0">)</span> <span class="sy1">-&gt;</span> <span class="re5">D</span><span class="sy3">-</span><span class="re6">$0</span> <span class="kw1">end</span><span class="sy1">,</span> <a href="http://erlang.org/doc/man/lists.html"><span class="kw5">lists</span></a>:<span class="re3">reverse</span><span class="br0">(</span><span class="re5">Digits</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">.</span><br>&nbsp;<br><span class="re3">task</span><span class="br0">(</span><span class="br0">)</span> <span class="sy1">-&gt;</span><br>    <span class="re5">Numbers</span> <span class="sy3">=</span> <span class="br0">[</span><span class="st0">"49927398716"</span><span class="sy1">,</span> <span class="st0">"49927398717"</span><span class="sy1">,</span> <span class="st0">"1234567812345678"</span><span class="sy1">,</span> <span class="st0">"1234567812345670"</span><span class="br0">]</span><span class="sy1">,</span><br>    <span class="br0">[</span><a href="http://erlang.org/doc/man/io.html"><span class="kw5">io</span></a>:<span class="re3">fwrite</span><span class="br0">(</span><span class="st0">"~s: ~p~n"</span><span class="sy1">,</span> <span class="br0">[</span><span class="re5">X</span><span class="sy1">,</span> <span class="re3">credit_card</span><span class="br0">(</span><span class="re5">X</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span> <span class="sy3">||</span> <span class="re5">X</span> <span class="sy3">&lt;-</span> <span class="re5">Numbers</span><span class="br0">]</span><span class="sy1">.</span><br>&nbsp;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>16&gt; luhn_test:task().
49927398716: valid
49927398717: invalid
1234567812345678: invalid
1234567812345670: valid
</pre> 
        <h2><span class="mw-headline" id="Euphoria"><a href="/wiki/Category:Euphoria" title="Category:Euphoria">Euphoria</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=34" title="Edit section: Euphoria">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta translation">
         <b>Translation of</b>: 
         <a href="#C">C</a>
        </div> 
        <pre class="euphoria highlighted_source"><span class="kw1">function</span> luhn<span class="br0">(</span><span class="kw2">sequence</span> cc<span class="br0">)</span><br>    <span class="kw2">integer</span> isOdd<span class="sy2">,</span> oddSum<span class="sy2">,</span> evenSum<span class="sy2">,</span> digit<br>    isOdd <span class="sy1">=</span> <span class="nu0">1</span><br>    oddSum <span class="sy1">=</span> <span class="nu0">0</span><br>    evenSum <span class="sy1">=</span> <span class="nu0">0</span><br>    <span class="kw1">for</span> i <span class="sy1">=</span> <span class="kw2">length</span><span class="br0">(</span>cc<span class="br0">)</span> <span class="kw1">to</span> <span class="nu0">1</span> <span class="kw1">by</span> <span class="sy1">-</span><span class="nu0">1</span> <span class="kw1">do</span><br>        digit <span class="sy1">=</span> cc<span class="br0">[</span>i<span class="br0">]</span> <span class="sy1">-</span> <span class="st0">'0'</span><br>        <span class="kw1">if</span> isOdd <span class="kw1">then</span><br>            oddSum <span class="sy1">+=</span> digit<br>        <span class="kw1">else</span><br>            evenSum <span class="sy1">+=</span> <span class="kw2">floor</span><span class="br0">(</span>digit <span class="sy1">/</span> <span class="nu0">5</span><span class="br0">)</span> <span class="sy1">+</span> <span class="kw2">remainder</span><span class="br0">(</span><span class="nu0">2</span> <span class="sy1">*</span> digit<span class="sy2">,</span> <span class="nu0">10</span><span class="br0">)</span><br>        <span class="kw1">end</span> <span class="kw1">if</span><br>        isOdd <span class="sy1">=</span> <span class="kw1">not</span> isOdd<br>    <span class="kw1">end</span> <span class="kw1">for</span><br>    <span class="kw1">return</span> <span class="kw1">not</span> <span class="kw2">remainder</span><span class="br0">(</span>oddSum <span class="sy1">+</span> evenSum<span class="sy2">,</span> <span class="nu0">10</span><span class="br0">)</span><br><span class="kw1">end</span> <span class="kw1">function</span><br>&nbsp;<br><span class="kw1">constant</span> cc_numbers <span class="sy1">=</span> <span class="br0">{</span><br>    <span class="st0">"49927398716"</span><span class="sy2">,</span><br>    <span class="st0">"49927398717"</span><span class="sy2">,</span><br>    <span class="st0">"1234567812345678"</span><span class="sy2">,</span><br>    <span class="st0">"1234567812345670"</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw1">for</span> i <span class="sy1">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="kw2">length</span><span class="br0">(</span>cc_numbers<span class="br0">)</span> <span class="kw1">do</span><br>    <span class="kw2">printf</span><span class="br0">(</span><span class="nu0">1</span><span class="sy2">,</span><span class="st0">"%s =&nbsp;%d<span class="es0">\n</span>"</span><span class="sy2">,</span> <span class="br0">{</span>cc_numbers<span class="br0">[</span>i<span class="br0">]</span><span class="sy2">,</span> luhn<span class="br0">(</span>cc_numbers<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><span class="br0">}</span><span class="br0">)</span><br><span class="kw1">end</span> <span class="kw1">for</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 = 1
49927398717 = 0
1234567812345678 = 0
1234567812345670 = 1</pre> 
        <h2><span class="mw-headline" id="F.23"><a href="/wiki/Category:F_Sharp" title="Category:F Sharp">F#</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=35" title="Edit section: F#">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="fsharp highlighted_source"><span class="kw1">let</span> luhn <span class="br0">(</span>s:<span class="kw4">string</span><span class="br0">)</span> <span class="sy0">=</span><br>  <span class="kw1">let</span> <span class="kw1">rec</span> g r c <span class="sy0">=</span> <span class="kw1">function</span><br>  | <span class="nu0">0</span> <span class="sy0">-&gt;</span> r<br>  | i <span class="sy0">-&gt;</span><br>      <span class="kw1">let</span> d <span class="sy0">=</span> <span class="br0">(</span><span class="br0">(</span><span class="kw4">int</span> s.<span class="br0">[</span>i <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">48</span><span class="br0">)</span> <span class="sy0">&lt;&lt;&lt;</span> c<br>      g <span class="br0">(</span>r <span class="sy0">+</span> <span class="kw1">if</span> d <span class="sy0">&lt;</span> <span class="nu0">10</span> <span class="kw1">then</span> d <span class="kw1">else</span> d <span class="sy0">-</span> <span class="nu0">9</span><span class="br0">)</span> <span class="br0">(</span><span class="nu0">1</span> <span class="sy0">-</span> c<span class="br0">)</span> <span class="br0">(</span>i <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span><br>  <span class="br0">(</span>g <span class="nu0">0</span> <span class="nu0">0</span> s.<span class="me1">Length</span><span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">=</span> <span class="nu0">0</span></pre> 
        <h2><span class="mw-headline" id="Factor"><a href="/wiki/Category:Factor" title="Category:Factor">Factor</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=36" title="Edit section: Factor">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">USING: kernel math math.parser math.order math.ranges sequences&nbsp;;<br>IN: luhn<br>&nbsp;<br>: reversed-digits ( n -- list )<br>    { } swap<br>    [ dup 0 &gt; ]<br>        [ 10 /mod  swapd suffix  swap ]<br>    while drop&nbsp;;<br>&nbsp;<br>: luhn-digit  ( n -- n )<br>    reversed-digits dup length iota [<br>        2dup swap nth<br>        swap odd? [ 2 *  10 /mod + ] when<br>    ] map sum 10 mod<br>    nip&nbsp;;<br>&nbsp;<br>: luhn? ( n --&nbsp;? )<br>    luhn-digit 0 =&nbsp;;<br>&nbsp;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>( scratchpad ) 49927398716 luhn? .
t
( scratchpad ) 49927398717 luhn? .
f
( scratchpad ) 1234567812345678 luhn? .
f
( scratchpad ) 1234567812345670 luhn? .
t
</pre> 
        <h2><span class="mw-headline" id="Forth"><a href="/wiki/Category:Forth" title="Category:Forth">Forth</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=37" title="Edit section: Forth">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">: luhn ( addr len --&nbsp;? )<br>  0 &gt;r over +             ( R: sum )<br>  begin  1- 2dup &lt;=<br>  while                   \ odd<br>         dup <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a9cae9">[email&nbsp;protected]</a> [char] 0 -<br>         r&gt; + &gt;r<br>         1- 2dup &lt;=<br>  while                   \ even<br>         dup <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e182a1">[email&nbsp;protected]</a> [char] 0 -<br>         2* 10 /mod +     \ even digits doubled, split, and summed<br>         r&gt; + &gt;r<br>  repeat then<br>  2drop  r&gt; 10 mod 0=&nbsp;;<br>&nbsp;<br>s" 49927398716"      luhn .   \ -1<br>s" 49927398717"      luhn .   \ 0<br>s" 1234567812345678" luhn .   \ 0<br>s" 1234567812345670" luhn .   \ -1</pre> 
        <h2><span class="mw-headline" id="Fortran"><a href="/wiki/Category:Fortran" title="Category:Fortran">Fortran</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=38" title="Edit section: Fortran">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="fortran highlighted_source"><span class="kw1">program</span> luhn<br>  <span class="kw3">implicit</span> <span class="kw3">none</span><br>  <span class="kw3">integer</span>              <span class="sy0">::</span> <span class="me2">nargs</span><br>  <span class="kw3">character</span><span class="br0">(</span><span class="kw4">len</span><span class="sy0">=</span><span class="nu0">20</span><span class="br0">)</span>    <span class="sy0">::</span> <span class="me2">arg</span><br>  <span class="kw3">integer</span>              <span class="sy0">::</span> <span class="me2">alen</span>, i, dr<br>  <span class="kw3">integer</span>, <span class="kw3">allocatable</span> <span class="sy0">::</span> <span class="kw1">number</span><span class="br0">(</span><span class="sy0">:</span><span class="br0">)</span><br>  <span class="kw3">integer</span>, <span class="kw3">parameter</span>   <span class="sy0">::</span> <span class="me2">drmap</span><span class="br0">(</span><span class="nu0">0</span><span class="sy0">:</span><span class="nu0">9</span><span class="br0">)</span> <span class="sy0">=</span> <span class="br0">[</span><span class="nu0">0</span>, <span class="nu0">2</span>, <span class="nu0">4</span>, <span class="nu0">6</span>, <span class="nu0">8</span>, <span class="nu0">1</span>, <span class="nu0">3</span>, <span class="nu0">5</span>, <span class="nu0">7</span>, <span class="nu0">9</span><span class="br0">]</span><br>&nbsp;<br>  <span class="co1">! Get number</span><br>  nargs <span class="sy0">=</span> command_argument_count<span class="br0">(</span><span class="br0">)</span><br>  <span class="kw1">if</span> <span class="br0">(</span>nargs <span class="sy0">/=</span> <span class="nu0">1</span><span class="br0">)</span> <span class="kw1">then</span><br>     <span class="kw1">stop</span><br>  <span class="kw1">end</span> <span class="kw1">if</span><br>  <span class="kw1">call</span> get_command_argument<span class="br0">(</span><span class="nu0">1</span>, arg, alen<span class="br0">)</span><br>  <span class="kw1">allocate</span><span class="br0">(</span><span class="kw1">number</span><span class="br0">(</span>alen<span class="br0">)</span><span class="br0">)</span><br>  <span class="kw1">do</span> i<span class="sy0">=</span><span class="nu0">1</span>, alen<br>     <span class="kw1">number</span><span class="br0">(</span>alen<span class="sy0">-</span>i<span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span> <span class="sy0">=</span> <span class="kw4">iachar</span><span class="br0">(</span>arg<span class="br0">(</span>i<span class="sy0">:</span>i<span class="br0">)</span><span class="br0">)</span> <span class="sy0">-</span> <span class="kw4">iachar</span><span class="br0">(</span><span class="st0">'0'</span><span class="br0">)</span><br>  <span class="kw1">end</span> <span class="kw1">do</span><br>&nbsp;<br>  <span class="co1">! Calculate number</span><br>  dr <span class="sy0">=</span> <span class="nu0">0</span><br>  <span class="kw1">do</span> i<span class="sy0">=</span><span class="nu0">1</span>, alen<br>     dr <span class="sy0">=</span> dr <span class="sy0">+</span> <span class="kw4">merge</span><span class="br0">(</span>drmap<span class="br0">(</span><span class="kw1">number</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span>, <span class="kw1">number</span><span class="br0">(</span>i<span class="br0">)</span>, <span class="kw4">mod</span><span class="br0">(</span>i,<span class="nu0">2</span><span class="br0">)</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span><br>  <span class="kw1">end</span> <span class="kw1">do</span><br>&nbsp;<br>  <span class="kw1">if</span> <span class="br0">(</span><span class="kw4">mod</span><span class="br0">(</span>dr,<span class="nu0">10</span><span class="br0">)</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span> <span class="kw1">then</span><br>     write<span class="br0">(</span><span class="sy0">*</span>,<span class="st0">'(a,i0)'</span><span class="br0">)</span> arg<span class="br0">(</span><span class="nu0">1</span><span class="sy0">:</span>alen<span class="br0">)</span><span class="sy0">//</span><span class="st0">' is valid'</span><br>  <span class="kw1">else</span><br>     write<span class="br0">(</span><span class="sy0">*</span>,<span class="st0">'(a,i0)'</span><span class="br0">)</span> arg<span class="br0">(</span><span class="nu0">1</span><span class="sy0">:</span>alen<span class="br0">)</span><span class="sy0">//</span><span class="st0">' is not valid'</span><br>  <span class="kw1">end</span> <span class="kw1">if</span><br><span class="kw1">end</span> <span class="kw1">program</span> luhn<br>&nbsp;<br><span class="co1">! Results:</span><br><span class="co1">! 49927398716 is valid</span><br><span class="co1">! 49927398717 is not valid</span><br><span class="co1">! 1234567812345678 is not valid</span><br><span class="co1">! 1234567812345670 is valid</span></pre> 
        <h2><span class="mw-headline" id="FreeBASIC"><a href="/wiki/Category:FreeBASIC" title="Category:FreeBASIC">FreeBASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=39" title="Edit section: FreeBASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="freebasic highlighted_source"><span class="co1">' version 05-07-2015</span><br><span class="co1">' compile with: fbc -s console</span><br>&nbsp;<br><span class="co2">#Ifndef TRUE        ' define true and false for older freebasic versions</span><br>    <span class="co2">#Define FALSE 0</span><br>    <span class="co2">#Define TRUE Not FALSE</span><br><span class="co2">#EndIf</span><br>&nbsp;<br><span class="kw1">Function</span> luhntest<span class="br0">(</span>cardnr <span class="kw1">As</span> <span class="kw1">String</span><span class="br0">)</span> <span class="kw1">As</span> <span class="kw1">Integer</span><br>&nbsp;<br>    cardnr = <span class="kw1">Trim</span><span class="br0">(</span>cardnr<span class="br0">)</span> <span class="co1">' we don't want spaces</span><br>    <span class="kw1">Dim</span> <span class="kw1">As</span> <span class="kw1">String</span> reverse_nr = cardnr<br>    <span class="kw1">Dim</span> <span class="kw1">As</span> <span class="kw1">Integer</span> i, j, s1, s2, l = <span class="kw1">Len</span><span class="br0">(</span>cardnr<span class="br0">)</span> - <span class="nu0">1</span><br>&nbsp;<br>    <span class="co1">' reverse string</span><br>    <span class="kw1">For</span> i = <span class="nu0">0</span> <span class="kw1">To</span> l<br>        reverse_nr<span class="br0">[</span>i<span class="br0">]</span> = cardnr<span class="br0">[</span>l - i<span class="br0">]</span><br>    <span class="kw1">Next</span><br>    <span class="co1">' sum odd numbers</span><br>    <span class="kw1">For</span> i = <span class="nu0">0</span> <span class="kw1">To</span> l <span class="kw1">Step</span> <span class="nu0">2</span><br>        s1 = s1 + <span class="br0">(</span>reverse_nr<span class="br0">[</span>i<span class="br0">]</span> - <span class="kw1">Asc</span><span class="br0">(</span><span class="st0">"0"</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="kw1">Next</span><br>    <span class="co1">' sum even numbers</span><br>    <span class="kw1">For</span> i = <span class="nu0">1</span> <span class="kw1">To</span> l <span class="kw1">Step</span> <span class="nu0">2</span><br>        j = reverse_nr<span class="br0">[</span>i<span class="br0">]</span> - <span class="kw1">Asc</span><span class="br0">(</span><span class="st0">"0"</span><span class="br0">)</span><br>        j = j * <span class="nu0">2</span><br>        <span class="kw1">If</span> j &gt; <span class="nu0">9</span> <span class="kw1">Then</span> j = j <span class="kw1">Mod</span> <span class="nu0">10</span> + <span class="nu0">1</span><br>        s2 = s2 + j<br>    <span class="kw1">Next</span><br>&nbsp;<br>    <span class="kw1">If</span> <span class="br0">(</span>s1 + s2<span class="br0">)</span> <span class="kw1">Mod</span> <span class="nu0">10</span> = <span class="nu0">0</span> <span class="kw1">Then</span><br>        <span class="kw1">Return</span> <span class="kw1">TRUE</span><br>    <span class="kw1">Else</span><br>        <span class="kw1">Return</span> <span class="kw1">FALSE</span><br>    <span class="kw1">End</span> <span class="kw1">If</span><br>&nbsp;<br><span class="kw1">End</span> <span class="kw1">Function</span><br>&nbsp;<br><span class="co1">' ------=&lt; MAIN &gt;=------</span><br>&nbsp;<br><span class="kw1">Dim</span> <span class="kw1">As</span> <span class="kw1">String</span> input_nr<span class="br0">(</span><span class="nu0">1</span> <span class="kw1">To</span> ...<span class="br0">)</span> = <span class="br0">{</span><span class="st0">"49927398716"</span>, <span class="st0">"49927398717"</span>,_<br>                          <span class="st0">"1234567812345678"</span>, <span class="st0">"1234567812345670"</span><span class="br0">}</span><br><span class="kw1">Dim</span> <span class="kw1">As</span> <span class="kw1">Integer</span> a<br>&nbsp;<br><span class="kw1">Print</span>  <span class="st0">"Task test number 49927398716 should be TRUE, report back as "</span>;<br><span class="kw1">Print</span> <span class="kw1">IIf</span><span class="br0">(</span>luhntest<span class="br0">(</span><span class="st0">"49927398716"</span> <span class="br0">)</span> = <span class="kw1">TRUE</span>, <span class="st0">"TRUE"</span>, <span class="st0">"FALSE"</span><span class="br0">)</span><br><span class="kw1">Print</span>&nbsp;: <span class="kw1">Print</span><br>&nbsp;<br><span class="kw1">Print</span> <span class="st0">"test card nr:"</span><br><span class="kw1">For</span> a = <span class="nu0">1</span> <span class="kw1">To</span> <span class="kw1">UBound</span><span class="br0">(</span>input_nr<span class="br0">)</span><br>    <span class="kw1">Print</span> input_nr<span class="br0">(</span>a<span class="br0">)</span>; <span class="st0">" = "</span>; <span class="kw1">IIf</span><span class="br0">(</span>luhntest<span class="br0">(</span>input_nr<span class="br0">(</span>a<span class="br0">)</span><span class="br0">)</span> = <span class="kw1">TRUE</span>, <span class="st0">"TRUE"</span>, <span class="st0">"FALSE"</span><span class="br0">)</span><br><span class="kw1">Next</span><br>&nbsp;<br><span class="co1">' empty keyboard buffer</span><br><span class="kw1">While</span> <span class="kw1">InKey</span> &lt;&gt; <span class="st0">""</span>&nbsp;: <span class="kw1">Wend</span><br><span class="kw1">Print</span>&nbsp;: <span class="kw1">Print</span> <span class="st0">"hit any key to end program"</span><br><span class="kw1">Sleep</span><br><span class="kw1">End</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>Task test number 49927398716 should be TRUE, report back as TRUE

test card nr:
49927398716 = TRUE
49927398717 = FALSE
1234567812345678 = FALSE
1234567812345670 = TRUE</pre> 
        <h2><span class="mw-headline" id="FunL"><a href="/wiki/Category:FunL" title="Category:FunL">FunL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=40" title="Edit section: FunL">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">def luhn_checksum( card_number ) =<br>  def digits_of( n ) = [int(d) | d &lt;- n.toString()]<br>&nbsp;<br>  digits = digits_of( card_number ).reverse()<br>  odd_digits = digits(0:digits.length():2)<br>  even_digits = digits(1:digits.length():2)<br>  (sum( odd_digits ) + sum( sum(digits_of(d*2)) | d &lt;- even_digits )) mod 10<br>&nbsp;<br>def is_luhn_valid( card_number ) = luhn_checksum( card_number ) == 0<br>&nbsp;<br>for n &lt;- [49927398716, 49927398717, 1234567812345678, 1234567812345670]<br>  println( n + ' is ' + (if is_luhn_valid(n) then 'valid' else 'invalid') )</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 is valid
49927398717 is invalid
1234567812345678 is invalid
1234567812345670 is valid
</pre> 
        <h2><span class="mw-headline" id="Gambas"><a href="/wiki/Category:Gambas" title="Category:Gambas">Gambas</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=41" title="Edit section: Gambas">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p><b><a rel="nofollow" class="external text" href="https://gambas-playground.proko.eu/?gist=966f04aa2a1e9af43ba9553f5cb9160d">Click this link to run this code</a></b> </p> 
        <pre class="gambas highlighted_source"><a href="http://gambasdoc.org/help/lang/public"><span class="kw1">Public</span></a> <a href="http://gambasdoc.org/help/lang/sub"><span class="kw1">Sub</span></a> Main<span class="br0">(</span><span class="br0">)</span><br><a href="http://gambasdoc.org/help/lang/dim"><span class="kw1">Dim</span></a> sTrial <a href="http://gambasdoc.org/help/lang/as"><span class="kw1">As</span></a> <a href="http://gambasdoc.org/help/lang/type/string"><span class="kw4">String</span></a><span class="br0">[</span><span class="br0">]</span> <span class="sy0">=</span> <span class="br0">[</span><span class="st0">"49927398716"</span>, <span class="st0">"49927398717"</span>, <span class="st0">"1234567812345678"</span>, <span class="st0">"1234567812345670"</span><span class="br0">]</span><br><a href="http://gambasdoc.org/help/lang/dim"><span class="kw1">Dim</span></a> sRev <a href="http://gambasdoc.org/help/lang/as"><span class="kw1">As</span></a> <a href="http://gambasdoc.org/help/lang/type/string"><span class="kw4">String</span></a><br><a href="http://gambasdoc.org/help/lang/dim"><span class="kw1">Dim</span></a> siCount, siOdd, siEven, siHold, siQty <a href="http://gambasdoc.org/help/lang/as"><span class="kw1">As</span></a> <a href="http://gambasdoc.org/help/lang/type/short"><span class="kw4">Short</span></a><br>&nbsp;<br><a href="http://gambasdoc.org/help/lang/for"><span class="kw1">For</span></a> siQty <span class="sy0">=</span> <span class="nu0">0</span> <a href="http://gambasdoc.org/help/lang/to"><span class="kw1">To</span></a> sTrial.<a href="http://gambasdoc.org/help/lang/max"><span class="kw2">Max</span></a><br>&nbsp;<br>  siOdd <span class="sy0">=</span> <span class="nu0">0</span><br>  siEven <span class="sy0">=</span> <span class="nu0">0</span><br>  sRev <span class="sy0">=</span> <span class="st0">""</span><br>&nbsp;<br>  <a href="http://gambasdoc.org/help/lang/for"><span class="kw1">For</span></a> siCount <span class="sy0">=</span> <a href="http://gambasdoc.org/help/lang/len"><span class="kw2">Len</span></a><span class="br0">(</span>sTrial<span class="br0">[</span>siQty<span class="br0">]</span><span class="br0">)</span> DownTo <span class="nu0">1</span><br>    sRev <span class="sy0">&amp;=</span> <a href="http://gambasdoc.org/help/lang/mid"><span class="kw2">Mid</span></a><span class="br0">(</span>sTrial<span class="br0">[</span>siQty<span class="br0">]</span>, siCount, <span class="nu0">1</span><span class="br0">)</span><br>  <a href="http://gambasdoc.org/help/lang/next"><span class="kw1">Next</span></a><br>&nbsp;<br>  <a href="http://gambasdoc.org/help/lang/for"><span class="kw1">For</span></a> siCount <span class="sy0">=</span> <span class="nu0">1</span> <a href="http://gambasdoc.org/help/lang/to"><span class="kw1">To</span></a> <a href="http://gambasdoc.org/help/lang/len"><span class="kw2">Len</span></a><span class="br0">(</span>sRev<span class="br0">)</span><br>    <a href="http://gambasdoc.org/help/lang/if"><span class="kw1">If</span></a> Odd<span class="br0">(</span>siCount<span class="br0">)</span> <a href="http://gambasdoc.org/help/lang/then"><span class="kw1">Then</span></a> siOdd <span class="sy0">+=</span> <a href="http://gambasdoc.org/help/lang/val"><span class="kw2">Val</span></a><span class="br0">(</span><a href="http://gambasdoc.org/help/lang/mid"><span class="kw2">Mid</span></a><span class="br0">(</span>sRev, siCount, <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>    <a href="http://gambasdoc.org/help/lang/if"><span class="kw1">If</span></a> Even<span class="br0">(</span>siCount<span class="br0">)</span> <a href="http://gambasdoc.org/help/lang/then"><span class="kw1">Then</span></a><br>      siHold <span class="sy0">=</span> <a href="http://gambasdoc.org/help/lang/val"><span class="kw2">Val</span></a><span class="br0">(</span><a href="http://gambasdoc.org/help/lang/mid"><span class="kw2">Mid</span></a><span class="br0">(</span>sRev, siCount, <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">*</span> <span class="nu0">2</span><br>      <a href="http://gambasdoc.org/help/lang/if"><span class="kw1">If</span></a> siHold <span class="sy0">&gt;</span> <span class="nu0">9</span> <a href="http://gambasdoc.org/help/lang/then"><span class="kw1">Then</span></a> <br>        siEven <span class="sy0">+=</span> <a href="http://gambasdoc.org/help/lang/val"><span class="kw2">Val</span></a><span class="br0">(</span><a href="http://gambasdoc.org/help/lang/mid"><span class="kw2">Mid</span></a><span class="br0">(</span><a href="http://gambasdoc.org/help/lang/str"><span class="kw2">Str</span></a><span class="br0">(</span>siHold<span class="br0">)</span>, <span class="nu0">1</span>, <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">+</span> <a href="http://gambasdoc.org/help/lang/val"><span class="kw2">Val</span></a><span class="br0">(</span><a href="http://gambasdoc.org/help/lang/mid"><span class="kw2">Mid</span></a><span class="br0">(</span><a href="http://gambasdoc.org/help/lang/str"><span class="kw2">Str</span></a><span class="br0">(</span>siHold<span class="br0">)</span>, <span class="nu0">2</span>, <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>      <a href="http://gambasdoc.org/help/lang/else"><span class="kw1">Else</span></a><br>        siEven <span class="sy0">+=</span> <a href="http://gambasdoc.org/help/lang/val"><span class="kw2">Val</span></a><span class="br0">(</span><a href="http://gambasdoc.org/help/lang/mid"><span class="kw2">Mid</span></a><span class="br0">(</span>sRev, siCount, <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">*</span> <span class="nu0">2</span><br>      <a href="http://gambasdoc.org/help/lang/end"><span class="kw1">End</span></a> <a href="http://gambasdoc.org/help/lang/if"><span class="kw1">If</span></a><br>    <a href="http://gambasdoc.org/help/lang/end"><span class="kw1">End</span></a> <a href="http://gambasdoc.org/help/lang/if"><span class="kw1">If</span></a><br>  <a href="http://gambasdoc.org/help/lang/next"><span class="kw1">Next</span></a><br>&nbsp;<br>  sRev <span class="sy0">=</span> <a href="http://gambasdoc.org/help/lang/str"><span class="kw2">Str</span></a><span class="br0">(</span>siOdd <span class="sy0">+</span> siEven<span class="br0">)</span><br>  <a href="http://gambasdoc.org/help/lang/if"><span class="kw1">If</span></a> sRev Ends <span class="st0">"0"</span> <a href="http://gambasdoc.org/help/lang/then"><span class="kw1">Then</span></a> <br>    <a href="http://gambasdoc.org/help/lang/print"><span class="kw1">Print</span></a> sTrial<span class="br0">[</span>siQty<span class="br0">]</span> <span class="sy0">&amp;</span> <span class="st0">" is a valid number"</span><br>  <a href="http://gambasdoc.org/help/lang/else"><span class="kw1">Else</span></a><br>    <a href="http://gambasdoc.org/help/lang/print"><span class="kw1">Print</span></a> sTrial<span class="br0">[</span>siQty<span class="br0">]</span> <span class="sy0">&amp;</span> <span class="st0">" is NOT a valid number"</span><br>  <a href="http://gambasdoc.org/help/lang/end"><span class="kw1">End</span></a> <a href="http://gambasdoc.org/help/lang/if"><span class="kw1">If</span></a><br><a href="http://gambasdoc.org/help/lang/next"><span class="kw1">Next</span></a><br>&nbsp;<br><a href="http://gambasdoc.org/help/lang/end"><span class="kw1">End</span></a></pre> 
        <p>Output: </p> 
        <pre>49927398716 is a valid number
49927398717 is NOT a valid number
1234567812345678 is NOT a valid number
1234567812345670 is a valid number
</pre> 
        <h2><span class="mw-headline" id="GAP"><a href="/wiki/Category:GAP" title="Category:GAP">GAP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=42" title="Edit section: GAP">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">IsLuhn&nbsp;:= function(n)<br>	local c, d, i, j, r;<br>	d&nbsp;:= "0123456789";<br>	j&nbsp;:= 1;<br>	r&nbsp;:= 0;<br>	for c in Reversed(String(n)) do<br>		i&nbsp;:= Position(d, c);<br>		if i = fail then<br>			continue;<br>		fi;<br>		i&nbsp;:= j*(i - 1);<br>		r&nbsp;:= r + QuoInt(i, 10) + RemInt(i, 10);<br>		j&nbsp;:= 3 - j;<br>	od;<br>	return RemInt(r, 10) = 0;<br>end;<br>&nbsp;<br>List([49927398716, 49927398717, 1234567812345678, 1234567812345670], IsLuhn);<br># [ true, false, false, true ]<br>&nbsp;<br># Will also work on strings, and will skip non-digits<br>IsLuhn("4-992-739-871-6");<br># true</pre> 
        <h2><span class="mw-headline" id="Go"><a href="/wiki/Category:Go" title="Category:Go">Go</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=43" title="Edit section: Go">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="go highlighted_source"><span class="kw1">package</span> main<br>&nbsp;<br><span class="kw1">import</span> <span class="sy1">(</span><br>    <span class="st0">"fmt"</span><br>    <span class="st0">"strings"</span><br><span class="sy1">)</span><br>&nbsp;<br><span class="kw1">const</span> input <span class="sy2">=</span> <span class="co2">`49927398716<br>49927398717<br>1234567812345678<br>1234567812345670`</span><br>&nbsp;<br><span class="kw1">var</span> t <span class="sy2">=</span> <span class="sy1">[</span><span class="sy4">...</span><span class="sy1">]</span><span class="kw4">int</span><span class="sy1">{</span><span class="nu0">0</span><span class="sy1">,</span> <span class="nu0">2</span><span class="sy1">,</span> <span class="nu0">4</span><span class="sy1">,</span> <span class="nu0">6</span><span class="sy1">,</span> <span class="nu0">8</span><span class="sy1">,</span> <span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">3</span><span class="sy1">,</span> <span class="nu0">5</span><span class="sy1">,</span> <span class="nu0">7</span><span class="sy1">,</span> <span class="nu0">9</span><span class="sy1">}</span><br>&nbsp;<br><span class="kw4">func</span> luhn<span class="sy1">(</span>s <span class="kw4">string</span><span class="sy1">)</span> <span class="kw4">bool</span> <span class="sy1">{</span><br>    odd <span class="sy2">:=</span> <span class="kw3">len</span><span class="sy1">(</span>s<span class="sy1">)</span> &amp; <span class="nu0">1</span><br>    <span class="kw1">var</span> sum <span class="kw4">int</span><br>    <span class="kw1">for</span> <span class="nu2">i</span><span class="sy1">,</span> c <span class="sy2">:=</span> <span class="kw1">range</span> s <span class="sy1">{</span><br>        <span class="kw1">if</span> c &lt; <span class="st0">'0'</span> <span class="sy3">||</span> c <span class="sy3">&gt;</span> <span class="st0">'9'</span> <span class="sy1">{</span><br>            <span class="kw1">return</span> <span class="kw2">false</span><br>        <span class="sy1">}</span><br>        <span class="kw1">if</span> <span class="nu2">i</span>&amp;<span class="nu0">1</span> <span class="sy3">==</span> odd <span class="sy1">{</span><br>            sum <span class="sy2">+=</span> t<span class="sy1">[</span>c<span class="sy3">-</span><span class="st0">'0'</span><span class="sy1">]</span><br>        <span class="sy1">}</span> <span class="kw1">else</span> <span class="sy1">{</span><br>            sum <span class="sy2">+=</span> <span class="kw4">int</span><span class="sy1">(</span>c <span class="sy3">-</span> <span class="st0">'0'</span><span class="sy1">)</span><br>        <span class="sy1">}</span><br>    <span class="sy1">}</span><br>    <span class="kw1">return</span> sum<span class="sy3">%</span><span class="nu0">10</span> <span class="sy3">==</span> <span class="nu0">0</span><br><span class="sy1">}</span><br>&nbsp;<br><span class="kw4">func</span> main<span class="sy1">()</span> <span class="sy1">{</span><br>    <span class="kw1">for</span> _<span class="sy1">,</span> s <span class="sy2">:=</span> <span class="kw1">range</span> strings<span class="sy3">.</span>Split<span class="sy1">(</span>input<span class="sy1">,</span> <span class="st0">"<span class="es1">\n</span>"</span><span class="sy1">)</span> <span class="sy1">{</span><br>        fmt<span class="sy3">.</span><span class="me1">Println</span><span class="sy1">(</span>s<span class="sy1">,</span> luhn<span class="sy1">(</span>s<span class="sy1">))</span><br>    <span class="sy1">}</span><br><span class="sy1">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 true
49927398717 false
1234567812345678 false
1234567812345670 true
</pre> 
        <h2><span class="mw-headline" id="Groovy"><a href="/wiki/Category:Groovy" title="Category:Groovy">Groovy</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=44" title="Edit section: Groovy">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> checkLuhn<span class="br0">(</span>number<span class="br0">)</span> <span class="br0">{</span><br>    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20int"><span class="kw4">int</span></a> total<br>    <span class="br0">(</span>number <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20as"><span class="kw2">as</span></a> <a href="http://www.google.de/search?as_q=String&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F"><span class="kw3">String</span></a><span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20reverse"><span class="kw5">reverse</span></a><span class="br0">(</span><span class="br0">)</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20eachWithIndex"><span class="kw5">eachWithIndex</span></a> <span class="br0">{</span> ch, index <span class="sy0">-&gt;</span><br>        <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> digit <span class="sy0">=</span> <a href="http://www.google.de/search?as_q=Integer&amp;num=100&amp;hl=en&amp;as_occt=url&amp;as_sitesearch=java.sun.com%2Fj2se%2F1%2E5%2E0%2Fdocs%2Fapi%2F"><span class="kw3">Integer</span></a>.<span class="me1">parseInt</span><span class="br0">(</span>ch<span class="br0">)</span><br>        total <span class="sy0">+=</span> <span class="br0">(</span>index <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">==</span><span class="nu0">0</span><span class="br0">)</span> <span class="sy0">?</span> digit&nbsp;: <span class="br0">[</span><span class="nu0">0</span>, <span class="nu0">2</span>, <span class="nu0">4</span>, <span class="nu0">6</span>, <span class="nu0">8</span>, <span class="nu0">1</span>, <span class="nu0">3</span>, <span class="nu0">5</span>, <span class="nu0">7</span>, <span class="nu0">9</span><span class="br0">]</span><span class="br0">[</span>digit<span class="br0">]</span><br>    <span class="br0">}</span><br>    total <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><br><span class="br0">}</span></pre> 
        <p>Testing the function: </p> 
        <pre class="groovy highlighted_source"><a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20def"><span class="kw2">def</span></a> verifyLuhn<span class="br0">(</span>number, expected<span class="br0">)</span> <span class="br0">{</span><br>    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20println"><span class="kw8">println</span></a> <span class="st0">"Checking: $number (${checkLuhn(number)})"</span><br>    <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20assert"><span class="kw2">assert</span></a> expected <span class="sy0">==</span> checkLuhn<span class="br0">(</span>number<span class="br0">)</span><br><span class="br0">}</span><br>&nbsp;<br><span class="br0">[</span><span class="nu0">49927398716</span>: <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true"><span class="kw2">true</span></a>, <span class="nu0">49927398717</span>: <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false"><span class="kw2">false</span></a>, <span class="nu0">1234567812345678</span>: <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20false"><span class="kw2">false</span></a>, <span class="nu0">1234567812345670</span>: <a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20true"><span class="kw2">true</span></a><span class="br0">]</span>.<a href="http://www.google.de/search?q=site%3Agroovy.codehaus.org/%20each"><span class="kw5">each</span></a> <span class="br0">{</span> number, expected <span class="sy0">-&gt;</span><br>    verifyLuhn number, expected<br><span class="br0">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>Checking: 49927398716 (true)
Checking: 49927398717 (false)
Checking: 1234567812345678 (false)
Checking: 1234567812345670 (true)</pre> 
        <p><br> </p> 
        <h2><span class="mw-headline" id="Haskell"><a href="/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=45" title="Edit section: Haskell">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="haskell highlighted_source"><span class="kw1">import</span> Data<span class="sy0">.</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char"><span class="kw4">Char</span></a> <span class="br0">(</span>digitToInt<span class="br0">)</span><br>luhn <span class="sy0">=</span> <span class="br0">(</span><span class="nu0">0</span> <span class="sy0">==</span><span class="br0">)</span> <span class="sy0">.</span> <span class="br0">(</span>`<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mod"><span class="kw3">mod</span></a>` <span class="nu0">10</span><span class="br0">)</span> <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum"><span class="kw3">sum</span></a> <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:uncurry"><span class="kw3">uncurry</span></a> <span class="br0">(</span><span class="sy0">+</span><span class="br0">)</span> <span class="sy0">.</span> <span class="br0">(</span>`<a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:divMod"><span class="kw3">divMod</span></a>` <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">.</span><br>       <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zipWith"><span class="kw3">zipWith</span></a> <span class="br0">(</span><span class="sy0">*</span><span class="br0">)</span> <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:cycle"><span class="kw3">cycle</span></a> <span class="br0">[</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span> <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> digitToInt <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse"><span class="kw3">reverse</span></a></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre class="haskell highlighted_source"><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:map"><span class="kw3">map</span></a> luhn <span class="br0">[</span><span class="st0">"49927398716"</span><span class="sy0">,</span> <span class="st0">"49927398717"</span><span class="sy0">,</span> <span class="st0">"1234567812345678"</span><span class="sy0">,</span> <span class="st0">"1234567812345670"</span><span class="br0">]</span><br><span class="br0">[</span>True<span class="sy0">,</span>False<span class="sy0">,</span>False<span class="sy0">,</span>True<span class="br0">]</span></pre> 
        <p>Or, aiming for a legible relationship with the stages shown in the task description: </p> 
        <pre class="haskell highlighted_source"><span class="kw1">import</span> Data<span class="sy0">.</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Char"><span class="kw4">Char</span></a> <span class="br0">(</span>digitToInt<span class="br0">)</span><br>&nbsp;<br>luhn <span class="sy0">::</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:String"><span class="kw4">String</span></a> <span class="sy0">-&gt;</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:Bool"><span class="kw4">Bool</span></a><br>luhn x <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem"><span class="kw3">rem</span></a> <span class="br0">(</span>s1 <span class="sy0">+</span> s2<span class="br0">)</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><br>  <span class="kw1">where</span><br>    stringInts <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:fmap"><span class="kw3">fmap</span></a> digitToInt<br>    <span class="br0">(</span>odds<span class="sy0">,</span> evens<span class="br0">)</span> <span class="sy0">=</span> oddsEvens <span class="br0">(</span>stringInts <span class="sy0">$</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:reverse"><span class="kw3">reverse</span></a> x<span class="br0">)</span><br>    s1 <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum"><span class="kw3">sum</span></a> odds<br>    s2 <span class="sy0">=</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum"><span class="kw3">sum</span></a> <span class="sy0">$</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:sum"><span class="kw3">sum</span></a> <span class="sy0">.</span> stringInts <span class="sy0">.</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:show"><span class="kw3">show</span></a> <span class="sy0">.</span> <span class="br0">(</span><span class="nu0">2</span> <span class="sy0">*</span><span class="br0">)</span> <span class="sy0">&lt;$&gt;</span> evens<br>&nbsp;<br>oddsEvens <span class="sy0">::</span> <span class="br0">[</span>a<span class="br0">]</span> <span class="sy0">-&gt;</span> <span class="br0">(</span><span class="br0">[</span>a<span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span>a<span class="br0">]</span><span class="br0">)</span><br>oddsEvens xs <span class="sy0">=</span><br>  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:foldr"><span class="kw3">foldr</span></a><br>    <span class="br0">(</span>\<span class="br0">(</span>x<span class="sy0">,</span> i<span class="br0">)</span> <span class="br0">(</span>os<span class="sy0">,</span> es<span class="br0">)</span> <span class="sy0">-&gt;</span><br>        <span class="br0">(</span><span class="kw1">if</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:rem"><span class="kw3">rem</span></a> i <span class="nu0">2</span> <span class="sy0">/=</span> <span class="nu0">0</span><br>           <span class="kw1">then</span> <span class="br0">(</span>x&nbsp;: os<span class="sy0">,</span> es<span class="br0">)</span><br>           <span class="kw1">else</span> <span class="br0">(</span>os<span class="sy0">,</span> x&nbsp;: es<span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">(</span><span class="br0">[</span><span class="br0">]</span><span class="sy0">,</span> <span class="br0">[</span><span class="br0">]</span><span class="br0">)</span><br>    <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:zip"><span class="kw3">zip</span></a> xs <span class="br0">[</span><span class="nu0">1</span> <span class="sy0">..</span><span class="br0">]</span><span class="br0">)</span><br>&nbsp;<br>main <span class="sy0">::</span> <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#t:IO"><span class="kw4">IO</span></a> <span class="br0">(</span><span class="br0">)</span><br>main <span class="sy0">=</span><br>  <a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:mapM_"><span class="kw3">mapM_</span></a><br>    <span class="br0">(</span><a href="http://haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v:print"><span class="kw3">print</span></a> <span class="sy0">.</span> <span class="br0">(</span><span class="br0">(</span><span class="sy0">,</span><span class="br0">)</span> <span class="sy0">&lt;*&gt;</span> luhn<span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">[</span><span class="st0">"49927398716"</span><span class="sy0">,</span> <span class="st0">"49927398717"</span><span class="sy0">,</span> <span class="st0">"1234567812345678"</span><span class="sy0">,</span> <span class="st0">"1234567812345670"</span><span class="br0">]</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>("49927398716",True)
("49927398717",False)
("1234567812345678",False)
("1234567812345670",True)</pre> 
        <h2><span class="mw-headline" id="HicEst"><a href="/wiki/Category:HicEst" title="Category:HicEst">HicEst</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=46" title="Edit section: HicEst">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="hicest highlighted_source"><span class="kw1">CHARACTER</span> numbers<span class="sy1">=</span><span class="st0">"49927398716 49927398717 1234567812345678 1234567812345670 "</span><br>&nbsp;<br><span class="kw1">DO</span> nr <span class="sy1">=</span> <span class="nu0">1</span><span class="sy1">,</span> <span class="nu0">4</span><br>   <span class="kw1">EDIT</span><span class="br0">(</span>Text<span class="sy1">=</span>numbers<span class="sy1">,</span> ITeM<span class="sy1">=</span>nr<span class="sy1">,</span> Parse<span class="sy1">=</span>number<span class="br0">)</span><br>   sum_odds <span class="sy1">=</span> <span class="nu0">0</span><br>   sum_even <span class="sy1">=</span> <span class="nu0">0</span><br>   <span class="kw1">DO</span> i <span class="sy1">=</span> <span class="kw1">LEN</span><span class="br0">(</span>number<span class="br0">)</span><span class="sy1">,</span> <span class="nu0">1</span><span class="sy1">,</span> <span class="sy1">-</span><span class="nu0">2</span><br>      sum_odds <span class="sy1">=</span> sum_odds <span class="sy1">+</span> <span class="kw1">ICHAR</span><span class="br0">(</span>number<span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span> <span class="sy1">-</span> <span class="nu0">48</span><br>      <span class="kw1">IF</span><span class="br0">(</span>i <span class="sy1">&gt;</span> <span class="nu0">1</span><span class="br0">)</span> <span class="kw1">THEN</span><br>         even2 <span class="sy1">=</span> <span class="nu0">2</span> <span class="sy1">*</span> <span class="br0">(</span><span class="kw1">ICHAR</span><span class="br0">(</span>number<span class="br0">(</span>i<span class="sy1">-</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy1">-</span> <span class="nu0">48</span><span class="br0">)</span><br>         sum_even <span class="sy1">=</span> sum_even <span class="sy1">+</span> <span class="kw1">MOD</span><span class="br0">(</span>even2<span class="sy1">,</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy1">+</span> <span class="kw1">INT</span><span class="br0">(</span>even2<span class="sy1">/</span><span class="nu0">10</span><span class="br0">)</span><br>      <span class="kw1">ENDIF</span><br>   <span class="kw1">ENDDO</span><br>   valid <span class="sy1">=</span> <span class="br0">(</span><span class="nu0">0</span> <span class="sy1">==</span> <span class="kw1">MOD</span><span class="br0">(</span>sum_odds <span class="sy1">+</span> sum_even<span class="sy1">,</span> <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><br>   <span class="kw1">WRITE</span><span class="br0">(</span><span class="br0">)</span> number<span class="sy1">,</span> <span class="st0">" is "</span><span class="sy1">,</span> <span class="st0">"invalid"</span><span class="br0">(</span><span class="nu0">1</span> <span class="sy1">+</span> <span class="nu0">2</span><span class="sy1">*</span>valid<span class="sy1">:</span><span class="br0">)</span><br><span class="kw1">ENDDO</span></pre> 
        <pre>49927398716 is valid
49927398717 is invalid
1234567812345678 is invalid
1234567812345670 is valid</pre> 
        <h2><span class="mw-headline" id="Icon_and_Unicon"><a href="/wiki/Category:Icon" title="Category:Icon">Icon</a> and <a href="/wiki/Category:Unicon" title="Category:Unicon">Unicon</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=47" title="Edit section: Icon and Unicon">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>We use map to pre-compute the sum of doubled digits. </p> 
        <pre class="icon highlighted_source"><span class="kw1">procedure</span> main<span class="br0">(</span>aL<span class="br0">)</span><br><span class="kw1">every</span> <span class="kw4">write</span><span class="br0">(</span>i <span class="sy1">:=</span> <span class="sy1">!</span>aL <span class="sy1">,</span><span class="st0">" - "</span><span class="sy1">,</span> <span class="br0">(</span><span class="br0">(</span><span class="sy1">\</span>isluhn10<span class="br0">(</span>i<span class="br0">)</span><span class="sy1">,</span><span class="st0">"valid"</span><span class="br0">)</span><span class="sy1">|</span><span class="st0">"invalid"</span><span class="br0">)</span> <span class="sy1">\</span> <span class="nu0">1</span><span class="br0">)</span><br><span class="kw1">end</span><br>&nbsp;<br><span class="kw1">procedure</span> isluhn10<span class="br0">(</span>i<span class="br0">)</span>  <span class="co1">#: isluhn10(i) returns i (if i passes luhn10) or fails </span><br><span class="kw2">local</span> sum<br>&nbsp;<br>sum <span class="sy1">:=</span><span class="nu0">0</span><br><span class="kw4">reverse</span><span class="br0">(</span><span class="kw4">integer</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span> <span class="sy1">?</span> <span class="kw1">while</span> <span class="kw1">not</span> <span class="kw4">pos</span><span class="br0">(</span><span class="nu0">0</span><span class="br0">)</span> <span class="kw1">do</span> <span class="br0">{</span>  <br>      sum <span class="sy1">+:=</span> <span class="kw4">move</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><br>      sum <span class="sy1">+:=</span> <span class="kw4">map</span><span class="br0">(</span><span class="kw4">move</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="sy1">,</span><span class="st0">"0123456789"</span><span class="sy1">,</span><span class="st0">"0246813579"</span><span class="br0">)</span>  <br>   <span class="br0">}</span><br>&nbsp;<br><span class="kw1">return</span> <span class="br0">(</span>sum <span class="sy1">%</span> <span class="nu0">10</span> <span class="sy1">=</span> <span class="nu0">0</span><span class="sy1">,</span>i<span class="br0">)</span><br><span class="kw1">end</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre># luhn10 49927398716 49927398717 1234567812345678 1234567812345670

49927398716 - valid
49927398717 - invalid
1234567812345678 - invalid
1234567812345670 - valid
</pre> 
        <h2><span class="mw-headline" id="J"><a href="/wiki/Category:J" title="Category:J">J</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=48" title="Edit section: J">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>We can treat the odd digits the same as even digits, except that they are not doubled. Also, we do not need the intermediate sums. </p> 
        <pre class="j highlighted_source">luhn=: <span class="nu0">0</span> = <span class="nu0">10</span> <span class="sy0">(</span>| +/@,<span class="sy0">)</span> <span class="nu0">10</span> #.inv <span class="nu0">1</span> <span class="nu0">2</span> *&amp;|: <span class="nu0">_2</span> "."<span class="nu0">0</span>\ |.</pre> 
        <p>Example use: </p> 
        <pre class="j highlighted_source">   luhn&amp;&gt; <span class="st_h">'49927398716'</span>;<span class="st_h">'49927398717'</span>;<span class="st_h">'1234567812345678'</span>;<span class="st_h">'1234567812345670'</span><br><span class="nu0">1</span> <span class="nu0">0</span> <span class="nu0">0</span> <span class="nu0">1</span></pre> 
        <p>Interpreting that example: In J, 1 is true, 0 is false, so the first and last provided digit sequences were valid and the middle two were not. </p> 
        <h2><span class="mw-headline" id="Java"><a href="/wiki/Category:Java" title="Category:Java">Java</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=49" title="Edit section: Java">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="java highlighted_source"><span class="kw1">public</span> <span class="kw1">class</span> Luhn <span class="br0">{</span><br>    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">void</span> main<span class="br0">(</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a><span class="br0">[</span><span class="br0">]</span> args<span class="br0">)</span> <span class="br0">{</span><br>        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>luhnTest<span class="br0">(</span><span class="st0">"49927398716"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>luhnTest<span class="br0">(</span><span class="st0">"49927398717"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>luhnTest<span class="br0">(</span><span class="st0">"1234567812345678"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Asystem+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">System</span></a>.<span class="me1">out</span>.<span class="me1">println</span><span class="br0">(</span>luhnTest<span class="br0">(</span><span class="st0">"1234567812345670"</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw1">public</span> <span class="kw1">static</span> <span class="kw4">boolean</span> luhnTest<span class="br0">(</span><a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> number<span class="br0">)</span><span class="br0">{</span><br>        <span class="kw4">int</span> s1 <span class="sy0">=</span> <span class="nu0">0</span>, s2 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>        <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Astring+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">String</span></a> reverse <span class="sy0">=</span> <span class="kw1">new</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Astringbuffer+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">StringBuffer</span></a><span class="br0">(</span>number<span class="br0">)</span>.<span class="me1">reverse</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">toString</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">for</span><span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span> <span class="sy0">;</span>i <span class="sy0">&lt;</span> reverse.<span class="me1">length</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span>i<span class="sy0">++</span><span class="br0">)</span><span class="br0">{</span><br>            <span class="kw4">int</span> digit <span class="sy0">=</span> <a href="http://www.google.com/search?hl=en&amp;q=allinurl%3Acharacter+java.sun.com&amp;btnI=I%27m%20Feeling%20Lucky"><span class="kw3">Character</span></a>.<span class="me1">digit</span><span class="br0">(</span>reverse.<span class="me1">charAt</span><span class="br0">(</span>i<span class="br0">)</span>, <span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span><br>            <span class="kw1">if</span><span class="br0">(</span>i <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span><span class="br0">{</span><span class="co1">//this is for odd digits, they are 1-indexed in the algorithm</span><br>                s1 <span class="sy0">+=</span> digit<span class="sy0">;</span><br>            <span class="br0">}</span><span class="kw1">else</span><span class="br0">{</span><span class="co1">//add 2 * digit for 0-4, add 2 * digit - 9 for 5-9</span><br>                s2 <span class="sy0">+=</span> <span class="nu0">2</span> <span class="sy0">*</span> digit<span class="sy0">;</span><br>                <span class="kw1">if</span><span class="br0">(</span>digit <span class="sy0">&gt;=</span> <span class="nu0">5</span><span class="br0">)</span><span class="br0">{</span><br>                    s2 <span class="sy0">-=</span> <span class="nu0">9</span><span class="sy0">;</span><br>                <span class="br0">}</span><br>            <span class="br0">}</span><br>        <span class="br0">}</span><br>        <span class="kw1">return</span> <span class="br0">(</span>s1 <span class="sy0">+</span> s2<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br>    <span class="br0">}</span><br><span class="br0">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>true
false
false
true</pre> 
        <h2><span class="mw-headline" id="JavaScript"><a href="/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=50" title="Edit section: JavaScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>Using prototype. </p> 
        <pre class="javascript highlighted_source">mod10check <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">(</span>cc<span class="br0">)</span> <span class="br0">{</span><br>  <span class="kw1">return</span> $A<span class="br0">(</span>cc<span class="br0">)</span>.<span class="me1">reverse</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">map</span><span class="br0">(</span><span class="kw4">Number</span><span class="br0">)</span>.<span class="me1">inject</span><span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span> <span class="kw1">function</span><span class="br0">(</span>s<span class="sy0">,</span> d<span class="sy0">,</span> i<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">return</span> s <span class="sy0">+</span> <span class="br0">(</span>i <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">==</span> <span class="nu0">1</span> <span class="sy0">?</span> <span class="br0">(</span>d <span class="sy0">==</span> <span class="nu0">9</span> <span class="sy0">?</span> <span class="nu0">9</span> <span class="sy0">:</span> <span class="br0">(</span>d <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">9</span><span class="br0">)</span> <span class="sy0">:</span> d<span class="br0">)</span><span class="sy0">;</span><br>  <span class="br0">}</span><span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span><span class="sy0">;</span><br><span class="br0">[</span><span class="st0">'49927398716'</span><span class="sy0">,</span><span class="st0">'49927398717'</span><span class="sy0">,</span><span class="st0">'1234567812345678'</span><span class="sy0">,</span><span class="st0">'1234567812345670'</span><span class="br0">]</span>.<span class="me1">each</span><span class="br0">(</span><span class="kw1">function</span><span class="br0">(</span>i<span class="br0">)</span><span class="br0">{</span>alert<span class="br0">(</span>mod10check<span class="br0">(</span>i<span class="br0">)</span><span class="br0">)</span><span class="br0">}</span><span class="br0">)</span><span class="sy0">;</span></pre> 
        <p>Without any library. </p> 
        <pre class="javascript highlighted_source"><span class="kw1">var</span> LuhnCheck <span class="sy0">=</span> <span class="br0">(</span><span class="kw1">function</span><span class="br0">(</span><span class="br0">)</span><br><span class="br0">{</span><br>	<span class="kw1">var</span> luhnArr <span class="sy0">=</span> <span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span> <span class="nu0">2</span><span class="sy0">,</span> <span class="nu0">4</span><span class="sy0">,</span> <span class="nu0">6</span><span class="sy0">,</span> <span class="nu0">8</span><span class="sy0">,</span> <span class="nu0">1</span><span class="sy0">,</span> <span class="nu0">3</span><span class="sy0">,</span> <span class="nu0">5</span><span class="sy0">,</span> <span class="nu0">7</span><span class="sy0">,</span> <span class="nu0">9</span><span class="br0">]</span><span class="sy0">;</span><br>	<span class="kw1">return</span> <span class="kw1">function</span><span class="br0">(</span>str<span class="br0">)</span><br>	<span class="br0">{</span><br>		<span class="kw1">var</span> counter <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>		<span class="kw1">var</span> incNum<span class="sy0">;</span><br>		<span class="kw1">var</span> odd <span class="sy0">=</span> <span class="kw2">false</span><span class="sy0">;</span><br>		<span class="kw1">var</span> temp <span class="sy0">=</span> <span class="kw4">String</span><span class="br0">(</span>str<span class="br0">)</span>.<span class="me1">replace</span><span class="br0">(</span><span class="co2">/[^\d]/g</span><span class="sy0">,</span> <span class="st0">""</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="kw1">if</span> <span class="br0">(</span> temp.<span class="me1">length</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span><br>			<span class="kw1">return</span> <span class="kw2">false</span><span class="sy0">;</span><br>		<span class="kw1">for</span> <span class="br0">(</span><span class="kw1">var</span> i <span class="sy0">=</span> temp.<span class="me1">length</span><span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span> i <span class="sy0">&gt;=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="sy0">--</span>i<span class="br0">)</span><br>		<span class="br0">{</span><br>			incNum <span class="sy0">=</span> parseInt<span class="br0">(</span>temp.<span class="me1">charAt</span><span class="br0">(</span>i<span class="br0">)</span><span class="sy0">,</span> <span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span><br>			counter <span class="sy0">+=</span> <span class="br0">(</span>odd <span class="sy0">=</span> <span class="sy0">!</span>odd<span class="br0">)</span><span class="sy0">?</span> incNum <span class="sy0">:</span> luhnArr<span class="br0">[</span>incNum<span class="br0">]</span><span class="sy0">;</span><br>		<span class="br0">}</span><br>		<span class="kw1">return</span> <span class="br0">(</span>counter<span class="sy0">%</span>10 <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>	<span class="br0">}</span><br><span class="br0">}</span><span class="br0">)</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span></pre> 
        <p>ES5.1 version (uses 'reduce' and 'reduceRight' Array methods). </p> 
        <pre class="javascript highlighted_source"><span class="kw1">function</span> luhn<span class="br0">(</span>str<span class="br0">)</span><span class="br0">{</span><br>	<span class="kw1">return</span> str.<span class="me1">split</span><span class="br0">(</span><span class="st0">''</span><span class="br0">)</span>.<span class="me1">reduceRight</span><span class="br0">(</span><span class="kw1">function</span><span class="br0">(</span>prev<span class="sy0">,</span> curr<span class="sy0">,</span> idx<span class="br0">)</span><span class="br0">{</span><br>		prev <span class="sy0">=</span> parseInt<span class="br0">(</span>prev<span class="sy0">,</span> <span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="kw1">if</span> <span class="br0">(</span><span class="br0">(</span>idx <span class="sy0">+</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">!==</span> <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span><br>			curr <span class="sy0">=</span> <span class="br0">(</span>curr <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">)</span>.<span class="me1">toString</span><span class="br0">(</span><span class="br0">)</span>.<span class="me1">split</span><span class="br0">(</span><span class="st0">''</span><span class="br0">)</span>.<span class="me1">reduce</span><span class="br0">(</span><span class="kw1">function</span><span class="br0">(</span>p<span class="sy0">,</span> c<span class="br0">)</span><span class="br0">{</span> <span class="kw1">return</span> parseInt<span class="br0">(</span>p<span class="sy0">,</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy0">+</span> parseInt<span class="br0">(</span>c<span class="sy0">,</span> <span class="nu0">10</span><span class="br0">)</span><span class="br0">}</span><span class="br0">)</span><span class="sy0">;</span><br>		<span class="br0">}</span><br>		<span class="kw1">return</span> prev <span class="sy0">+</span> parseInt<span class="br0">(</span>curr<span class="sy0">,</span> <span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span><br>	<span class="br0">}</span><span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">===</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span></pre> 
        <p>Highly compressed version. </p> 
        <pre class="javascript highlighted_source"><span class="kw1">var</span> luhn10 <span class="sy0">=</span> <span class="kw1">function</span><span class="br0">(</span>a<span class="sy0">,</span>b<span class="sy0">,</span>c<span class="sy0">,</span>d<span class="sy0">,</span>e<span class="br0">)</span> <span class="br0">{</span><br>  <span class="kw1">for</span><span class="br0">(</span>d <span class="sy0">=</span> <span class="sy0">+</span>a<span class="br0">[</span>b <span class="sy0">=</span> a.<span class="me1">length</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">]</span><span class="sy0">,</span> e<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> b<span class="sy0">--;</span><span class="br0">)</span><br>    c <span class="sy0">=</span> <span class="sy0">+</span>a<span class="br0">[</span>b<span class="br0">]</span><span class="sy0">,</span> d <span class="sy0">+=</span> <span class="sy0">++</span>e <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">?</span> <span class="nu0">2</span> <span class="sy0">*</span> c <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">+</span> <span class="br0">(</span>c <span class="sy0">&gt;</span> <span class="nu0">4</span><span class="br0">)</span> <span class="sy0">:</span> c<span class="sy0">;</span><br>  <span class="kw1">return</span> <span class="sy0">!</span><span class="br0">(</span>d<span class="sy0">%</span>10<span class="br0">)</span><br><span class="br0">}</span><span class="sy0">;</span><br>&nbsp;<br><span class="co1">// returns true</span><br>luhn10<span class="br0">(</span><span class="st0">'4111111111111111'</span><span class="br0">)</span> <br>&nbsp;<br><span class="co1">// returns false</span><br>luhn10<span class="br0">(</span><span class="st0">'4111111111111112'</span><span class="br0">)</span> <br>&nbsp;</pre> 
        <h2><span class="mw-headline" id="jq"><a href="/wiki/Category:Jq" title="Category:Jq">jq</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=51" title="Edit section: jq">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">def luhn:<br>  def odds: . as $in | reduce range(0; length) as $i<br>    ([]; if ($i&nbsp;% 2) == 0 then . + [$in[$i]] else . end);<br>  def evens: . as $in | reduce range(1; length) as $i<br>    ([]; if ($i&nbsp;% 2) == 1 then . + [$in[$i]] else . end);<br>  def digits: map([.]|implode|tonumber);<br>  def sumdigits: tostring | explode | digits | add;<br>&nbsp;<br>  (tostring | explode | reverse ) as $reverse<br>  | ($reverse | odds  | digits | add) as $s1<br>  | ($reverse | evens | digits | map(. * 2 | sumdigits) | add) as $s2<br>  | 0 == ($s1 + $s2)&nbsp;% 10&nbsp;;</pre> 
        <p><b>Example</b> </p> 
        <pre class="text highlighted_source">  ( 49927398716,<br>    49927398717,<br>    1234567812345678,<br>    1234567812345670<br>  ) | "\(.) =&gt; \(luhn)";</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>$ jq -r -M -n -f luhn.jq
49927398716 =&gt; true
49927398717 =&gt; false
1234567812345678 =&gt; false
1234567812345670 =&gt; true
</pre> 
        <h2><span class="mw-headline" id="Julia"><a href="/wiki/Category:Julia" title="Category:Julia">Julia</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=52" title="Edit section: Julia">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>The test function itself is only a single line of code&nbsp;:) </p> 
        <pre class="text highlighted_source">luhntest(x::Int) = (sum(digits(x)[1:2:end]) + sum(map(x -&gt; sum(digits(x)), 2 * digits(x)[2:2:end])))&nbsp;% 10 == 0<br>&nbsp;<br>for card in [49927398716, 49927398717, 1234567812345678, 1234567812345670]<br>    println(luhntest(card)&nbsp;? "PASS "&nbsp;: "FAIL ", card)<br>end<br>&nbsp;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>PASS 49927398716
FAIL 49927398717
FAIL 1234567812345678
PASS 1234567812345670</pre> 
        <h2><span class="mw-headline" id="K"><a href="/wiki/Category:K" title="Category:K">K</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=53" title="Edit section: K">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">so: {+/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="433b0371">[email&nbsp;protected]</a>*!_ceil(#x)%2}<br>se: {+/{+/0$'$x}'2*<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c4bc84f5">[email&nbsp;protected]</a>+2*!(#x)%2}<br>luhn: {n:|0$'$x; 0=((se n)+so n)!10}</pre> 
        <div class="examplemeta translation">
         <b>Translation of</b>: 
         <a href="#J">J</a>
        </div> 
        <pre class="text highlighted_source">luhn2: {~(+/,//10_vs'1 2*+-1 2#((#n)!2){x,0}/n:0$'|$x)</pre> 
        <p><b>Example:</b> </p> 
        <pre class="text highlighted_source">  luhn'49927398716 49927398717 1234567812345678 1234567812345670<br>1 0 0 1<br>  luhn2'49927398716 49927398717 1234567812345678 1234567812345670<br>1 0 0 1</pre> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/K" title="K" class="mw-redirect">K</a> version 3
        </div> 
        <pre class="text highlighted_source">luhn:{[cc]<br>    digits:0$/:|cc / convert chars to digit ints<br>    s:digits*(#cc)#1 2 / evens doubled, odds not<br>    nines:+/s&gt;9 / number of sums greater than 9<br>   &nbsp;:~((+/s)-(9*nines))!10 / sum minus the nines is mod ten?<br>    }</pre> 
        <p><b>Example:</b> </p> 
        <pre class="text highlighted_source">  test:("49927398716";"49927398717";"1234567812345678";"1234567812345670")<br>  luhn'test<br>1 0 0 1</pre> 
        <h2><span class="mw-headline" id="Kotlin"><a href="/wiki/Category:Kotlin" title="Category:Kotlin">Kotlin</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=54" title="Edit section: Kotlin">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="scala highlighted_source"><span class="co1">// version 1.1</span><br>&nbsp;<br>fun luhn<span class="br0">(</span>s<span class="sy0">:</span> String<span class="br0">)</span><span class="sy0">:</span> Boolean <span class="br0">{</span><br>    fun sumDigits<span class="br0">(</span>n <span class="sy0">:</span> Int<span class="br0">)</span> <span class="sy0">=</span>  n / <span class="nu0">10</span> + n <span class="sy0">%</span> <span class="nu0">10</span><br>    <a href="http://scala-lang.org"><span class="kw1">val</span></a>  t <span class="sy0">=</span> s.<span class="me1">reversed</span><span class="br0">(</span><span class="br0">)</span><br>    <a href="http://scala-lang.org"><span class="kw1">val</span></a> s1 <span class="sy0">=</span> t.<span class="me1">filterIndexed</span> <span class="br0">{</span> i, <span class="sy0">_</span> -<span class="sy0">&gt;</span> i <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">==</span> <span class="nu0">0</span> <span class="br0">}</span>.<span class="me1">sumBy</span> <span class="br0">{</span> it - <span class="st0">'0'</span> <span class="br0">}</span><br>    <a href="http://scala-lang.org"><span class="kw1">val</span></a> s2 <span class="sy0">=</span> t.<span class="me1">filterIndexed</span> <span class="br0">{</span> i, <span class="sy0">_</span> -<span class="sy0">&gt;</span> i <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">==</span> <span class="nu0">1</span> <span class="br0">}</span>.<span class="me1">map</span> <span class="br0">{</span> sumDigits<span class="br0">(</span><span class="br0">(</span>it - <span class="st0">'0'</span><span class="br0">)</span> <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">)</span> <span class="br0">}</span>.<span class="me1">sum</span><span class="br0">(</span><span class="br0">)</span><br>    <a href="http://scala-lang.org"><span class="kw1">return</span></a> <span class="br0">(</span>s1 + s2<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><br><span class="br0">}</span><br>&nbsp;<br>fun main<span class="br0">(</span>args<span class="sy0">:</span> Array<span class="sy0">&lt;</span>String<span class="sy0">&gt;</span><span class="br0">)</span> <span class="br0">{</span><br>    <a href="http://scala-lang.org"><span class="kw1">val</span></a> numbers <span class="sy0">=</span> arrayOf<span class="br0">(</span><span class="st0">"49927398716"</span>, <span class="st0">"49927398717"</span>, <span class="st0">"1234567812345678"</span>, <span class="st0">"1234567812345670"</span><span class="br0">)</span><br>    <a href="http://scala-lang.org"><span class="kw1">for</span></a> <span class="br0">(</span>number in numbers<span class="br0">)</span> println<span class="br0">(</span><span class="st0">"${number.padEnd(16)} is ${if(luhn(number)) "</span>valid<span class="st0">" else "</span>invalid<span class="st0">"}"</span><span class="br0">)</span><br><span class="br0">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716      is valid
49927398717      is invalid
1234567812345678 is invalid
1234567812345670 is valid
</pre> 
        <h2><span class="mw-headline" id="Lasso"><a href="/wiki/Category:Lasso" title="Category:Lasso">Lasso</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=55" title="Edit section: Lasso">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>Part of the Lasso's implementation of "valid_creditcard". </p> 
        <pre class="text highlighted_source">#!/usr/bin/lasso9<br>&nbsp;<br>define luhn_check(number) =&gt; {<br>  local(<br>    rev = #number-&gt;asString,<br>    checksum = 0<br>  )<br>  #rev-&gt;reverse<br>  iterate(#rev, local(digit)) =&gt; {<br>    if((loop_count&nbsp;% 2) == 0) =&gt; {<br>      #checksum += (2 * integer(#digit))<br>      integer(#digit) &gt;= 5&nbsp;? #checksum -= 9<br>    else<br>      #checksum += integer(#digit)<br>    }<br>  }<br>  (#checksum&nbsp;% 10)&nbsp;!= 0&nbsp;? return false<br>  return true<br>}<br>&nbsp;<br>stdoutnl(luhn_check(49927398716))       // true<br>stdoutnl(luhn_check(49927398717))       // false<br>stdoutnl(luhn_check(1234567812345678))  // false<br>stdoutnl(luhn_check(1234567812345670))  // true</pre> 
        <h2><span class="mw-headline" id="Liberty_BASIC"><a href="/wiki/Category:Liberty_BASIC" title="Category:Liberty BASIC">Liberty BASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=56" title="Edit section: Liberty BASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="lb highlighted_source"><span class="co1">' [RC] Luhn test</span><br>&nbsp;<br>card$<span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><span class="sy0">=</span><span class="st0">"49927398716"</span><br>card$<span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span><span class="sy0">=</span><span class="st0">"49927398717"</span><br>card$<span class="br0">(</span><span class="nu0">3</span><span class="br0">)</span><span class="sy0">=</span><span class="st0">"1234567812345678"</span><br>card$<span class="br0">(</span><span class="nu0">4</span><span class="br0">)</span><span class="sy0">=</span><span class="st0">"1234567812345670"</span><br>&nbsp;<br><span class="kw1">for</span> test <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="nu0">4</span><br>    odd<span class="sy0">=</span><span class="nu0">1</span><br>    sum <span class="sy0">=</span> <span class="nu0">0</span><br>    <span class="kw1">for</span> n <span class="sy0">=</span> <span class="kw2">len</span><span class="br0">(</span>card$<span class="br0">(</span>test<span class="br0">)</span><span class="br0">)</span> <span class="kw1">to</span> <span class="nu0">1</span> step <span class="sy0">-</span><span class="nu0">1</span><br>        num<span class="sy0">=</span><span class="kw2">val</span><span class="br0">(</span><span class="kw2">mid$</span><span class="br0">(</span>card$<span class="br0">(</span>test<span class="br0">)</span><span class="sy0">,</span>n<span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>        <span class="kw1">if</span> odd <span class="kw1">then</span><br>            sum <span class="sy0">=</span> sum <span class="sy0">+</span> num<br>            odd<span class="sy0">=</span><span class="nu0">0</span><br>        <span class="kw1">else</span><br>            num<span class="sy0">=</span>num<span class="sy0">*</span><span class="nu0">2</span><br>            <span class="kw1">if</span> num<span class="sy0">&lt;=</span><span class="nu0">9</span> <span class="kw1">then</span><br>                sum <span class="sy0">=</span> sum <span class="sy0">+</span> num<br>            <span class="kw1">else</span><br>                sum <span class="sy0">=</span> sum <span class="sy0">+</span> <span class="kw2">val</span><span class="br0">(</span><span class="kw2">left$</span><span class="br0">(</span><span class="kw2">str$</span><span class="br0">(</span>num<span class="br0">)</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">+</span> <span class="kw2">val</span><span class="br0">(</span><span class="kw2">right$</span><span class="br0">(</span><span class="kw2">str$</span><span class="br0">(</span>num<span class="br0">)</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>            <span class="kw1">end</span> <span class="kw1">if</span><br>            odd<span class="sy0">=</span><span class="nu0">1</span><br>        <span class="kw1">end</span> <span class="kw1">if</span><br>    <span class="kw1">next</span><br>    <span class="kw1">if</span> sum <span class="kw1">mod</span> <span class="nu0">10</span> <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">then</span><br>        <span class="kw1">print</span> card$<span class="br0">(</span>test<span class="br0">)</span><span class="sy0">,</span><span class="st0">"True"</span><br>    <span class="kw1">else</span><br>        <span class="kw1">print</span> card$<span class="br0">(</span>test<span class="br0">)</span><span class="sy0">,</span><span class="st0">"False"</span><br>    <span class="kw1">end</span> <span class="kw1">if</span><br><span class="kw1">next</span></pre> 
        <h2><span class="mw-headline" id="LiveCode"><a href="/wiki/Category:LiveCode" title="Category:LiveCode">LiveCode</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=57" title="Edit section: LiveCode">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">function LuhnTest cc<br>    local s1,evens, s2<br>    repeat with n = 1 to len(cc)<br>        if n mod 2 is not 0 then<br>            add (char -n of cc) to s1<br>        else<br>            put (char -n of cc) * 2 into evens<br>            if evens &gt; 9 then subtract 9 from evens<br>            add evens to s2<br>        end if<br>    end repeat<br>    return the last char of (s1 + s2) is 0<br>end LuhnTest<br>&nbsp;<br>-- test<br>repeat for each item ccno in "49927398716,49927398717,1234567812345678,1234567812345670"<br>    put ccno &amp;&amp; LuhnTest(ccno) &amp; cr after luhncheck<br>end repeat<br>put luhncheck<br>&nbsp;<br>49927398716 true<br>49927398717 false<br>1234567812345678 false<br>1234567812345670 true<br>&nbsp;</pre> 
        <h2><span class="mw-headline" id="Logo"><a href="/wiki/Category:Logo" title="Category:Logo">Logo</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=58" title="Edit section: Logo">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">to small?&nbsp;:list<br>  output or [empty?&nbsp;:list] [empty? bf&nbsp;:list]<br>end<br>to every.other&nbsp;:list<br>  if small?&nbsp;:list [output&nbsp;:list]<br>  output fput first&nbsp;:list every.other bf bf&nbsp;:list<br>end<br>to wordtolist&nbsp;:word<br>  output map.se [?]&nbsp;:word<br>end<br>&nbsp;<br>to double.digit&nbsp;:digit<br>  output item&nbsp;:digit {0 2 4 6 8 1 3 5 7 9}@0<br> &nbsp;; output ifelse&nbsp;:digit &lt; 5 [2*:digit] [1 + modulo 2*:digit 10]<br>end<br>&nbsp;<br>to luhn&nbsp;:credit<br>  localmake "digits reverse filter [number?&nbsp;?] wordtolist&nbsp;:credit<br>  localmake "s1 apply "sum every.other&nbsp;:digits<br>  localmake "s2 apply "sum map "double.digit every.other bf&nbsp;:digits<br>  output equal? 0 last sum&nbsp;:s1&nbsp;:s2<br>end<br>&nbsp;<br>show luhn "49927398716         &nbsp;; true<br>show luhn "49927398717         &nbsp;; false<br>show luhn "1234-5678-1234-5678 &nbsp;; false<br>show luhn "1234-5678-1234-5670 &nbsp;; true</pre> 
        <h2><span class="mw-headline" id="Lua"><a href="/wiki/Category:Lua" title="Category:Lua">Lua</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=59" title="Edit section: Lua">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="lua highlighted_source"><span class="kw1">function</span> luhn<span class="br0">(</span>n<span class="br0">)</span><br>  n<span class="sy0">=</span><span class="kw3">string</span><span class="sy0">.</span>reverse<span class="br0">(</span>n<span class="br0">)</span><br>  <span class="kw3">print</span><span class="br0">(</span>n<span class="br0">)</span><br>  <span class="kw1">local</span> s1<span class="sy0">=</span><span class="nu0">0</span><br>  <span class="co1">--sum odd digits</span><br>  <span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">1</span><span class="sy0">,</span>n<span class="sy0">:</span>len<span class="br0">(</span><span class="br0">)</span><span class="sy0">,</span><span class="nu0">2</span> <span class="kw1">do</span><br>    s1<span class="sy0">=</span>s1<span class="sy0">+</span>n<span class="sy0">:</span>sub<span class="br0">(</span>i<span class="sy0">,</span>i<span class="br0">)</span><br>  <span class="kw1">end</span><br>  <span class="co1">--evens</span><br>  <span class="kw1">local</span> s2<span class="sy0">=</span><span class="nu0">0</span><br>  <span class="kw1">for</span> i<span class="sy0">=</span><span class="nu0">2</span><span class="sy0">,</span>n<span class="sy0">:</span>len<span class="br0">(</span><span class="br0">)</span><span class="sy0">,</span><span class="nu0">2</span> <span class="kw1">do</span><br>    <span class="kw1">local</span> doubled<span class="sy0">=</span>n<span class="sy0">:</span>sub<span class="br0">(</span>i<span class="sy0">,</span>i<span class="br0">)</span><span class="sy0">*</span><span class="nu0">2</span><br>    doubled<span class="sy0">=</span><span class="kw3">string.gsub</span><span class="br0">(</span>doubled<span class="sy0">,</span><span class="st0">'(%d)(%d)'</span><span class="sy0">,</span><span class="kw1">function</span><span class="br0">(</span>a<span class="sy0">,</span>b<span class="br0">)</span><span class="kw1">return</span> a<span class="sy0">+</span>b <span class="kw1">end</span><span class="br0">)</span><br>    s2<span class="sy0">=</span>s2<span class="sy0">+</span>doubled<br>  <span class="kw1">end</span><br>  <span class="kw3">print</span><span class="br0">(</span>s1<span class="br0">)</span><br>  <span class="kw3">print</span><span class="br0">(</span>s2<span class="br0">)</span><br>  <span class="kw1">local</span> total<span class="sy0">=</span>s1<span class="sy0">+</span>s2<br>  <span class="kw1">if</span> total<span class="sy0">%</span><span class="nu0">10</span><span class="sy0">==</span><span class="nu0">0</span> <span class="kw1">then</span><br>    <span class="kw1">return</span> <span class="kw4">true</span><br>  <span class="kw1">end</span><br>  <span class="kw1">return</span> <span class="kw4">false</span><br><span class="kw1">end</span> <br>&nbsp;<br><span class="co1">-- Note that this function takes strings, not numbers.</span><br><span class="co1">-- 16-digit numbers tend to be problematic</span><br><span class="co1">-- when looking at individual digits.</span><br><span class="kw3">print</span><span class="br0">(</span>luhn<span class="st0">'49927398716'</span><span class="br0">)</span><br><span class="kw3">print</span><span class="br0">(</span>luhn<span class="st0">'49927398717'</span><span class="br0">)</span><br><span class="kw3">print</span><span class="br0">(</span>luhn<span class="st0">'1234567812345678'</span><span class="br0">)</span><br><span class="kw3">print</span><span class="br0">(</span>luhn<span class="st0">'1234567812345670'</span><span class="br0">)</span></pre> 
        <h2><span class="mw-headline" id="Mathematica"><a href="/wiki/Category:Mathematica" title="Category:Mathematica">Mathematica</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=60" title="Edit section: Mathematica">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">LuhnQ[nb_]&nbsp;:= (Mod[Total[(2*ToExpression[#[[2;;All;;2]]]) /. {z_?(Function[v, v&gt;9]) -&gt; z-9}]<br>       + Total[ToExpression[#[[1;;All;;2]]]], 10] == 0)&amp; [Characters[StringReverse[ToString[nb]]] ]<br>&nbsp;<br>LuhnQ /@ {49927398716, 49927398717, 1234567812345678, 1234567812345670}<br>-&gt;{True, False, False, True}</pre> 
        <h3><span class="mw-headline" id="Alternate_Code">Alternate Code</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=61" title="Edit section: Alternate Code">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
        <p>Eliminates conversion of numbers to strings and back </p> 
        <pre class="text highlighted_source">LuhnQ[n_Integer]&nbsp;:=<br> Block[{digits = <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="96c4f3e0f3e4e5f3d6dff8e2f3f1f3e4d2fff1ffe2e5">[email&nbsp;protected]</a>@n},<br>  Mod[Total[{digits[[;;&nbsp;;; 2]], <br>      IntegerDigits[2 #] &amp; /@ digits[[2&nbsp;;;&nbsp;;; 2]]}, -1], 10] == 0]<br>&nbsp;<br>LuhnQ /@ {49927398716, 49927398717, 1234567812345678, 1234567812345670}</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div>
        <pre>{True,False,False,True}</pre> 
        <h2><span class="mw-headline" id="MATLAB"><a href="/wiki/Category:MATLAB" title="Category:MATLAB">MATLAB</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=62" title="Edit section: MATLAB">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>The solution is basically the same as for <a href="#Octave">Octave</a>. </p> 
        <pre class="matlab highlighted_source"><span class="kw1">function</span> passed = luhn<span class="br0">(</span>num<span class="br0">)</span><br><span class="kw1">if</span> <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/nargin.html"><span class="kw2">nargin</span></a> == <span class="nu0">0</span> <span class="co1">% evaluate test cases</span><br>  testnum = <span class="br0">[</span><span class="nu0">49927398716</span> <span class="nu0">49927398717</span> <span class="nu0">1234567812345678</span> <span class="nu0">1234567812345670</span><span class="br0">]</span>;<br>  <span class="kw1">for</span> num = testnum<br>    <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/disp.html"><span class="kw2">disp</span></a><span class="br0">(</span><span class="br0">[</span><a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/int2str.html"><span class="kw2">int2str</span></a><span class="br0">(</span>num<span class="br0">)</span> <span class="co2">': '</span> <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/int2str.html"><span class="kw2">int2str</span></a><span class="br0">(</span>luhn<span class="br0">(</span>num<span class="br0">)</span><span class="br0">)</span><span class="br0">]</span><span class="br0">)</span><br>  <span class="kw1">end</span><br>  <span class="kw1">return</span>  <br><span class="kw1">end</span><br><span class="co1">% luhn function starts here</span><br>d = <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/int2str.html"><span class="kw2">int2str</span></a><span class="br0">(</span>num<span class="br0">)</span> - <span class="co2">'0'</span>;	<span class="co1">% convert number into vector of digits</span><br>m = <span class="br0">[</span><span class="nu0">2</span>:<span class="nu0">2</span>:<span class="nu0">8</span>,<span class="nu0">1</span>:<span class="nu0">2</span>:<span class="nu0">9</span><span class="br0">]</span>;	<span class="co1">% rule 3: maps 1:9 to [2 4 6 8 1 3 5 7 9]</span><br>passed = ~<a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/mod.html"><span class="kw2">mod</span></a><span class="br0">(</span><a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html"><span class="kw2">sum</span></a><span class="br0">(</span>d<span class="br0">(</span><span class="kw1">end</span>:-<span class="nu0">2</span>:<span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> + <a href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/sum.html"><span class="kw2">sum</span></a><span class="br0">(</span>m<span class="br0">(</span>d<span class="br0">(</span>end-<span class="nu0">1</span>:-<span class="nu0">2</span>:<span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span>, <span class="nu0">10</span><span class="br0">)</span>;  <br><span class="kw1">end</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716: 1
49927398717: 0
1234567812345678: 0
1234567812345670: 1</pre> 
        <h2><span class="mw-headline" id="MUMPS"><a href="/wiki/Category:MUMPS" title="Category:MUMPS">MUMPS</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=63" title="Edit section: MUMPS">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">LUHN(C)<br> NEW ODD,EVEN,S<br> SET S=$REVERSE(C)<br> SET ODD=0 FOR I=1:2:$LENGTH(S) SET ODD=ODD+$EXTRACT(S,I)<br> SET EVEN=0 FOR I=2:2:$LENGTH(S) SET T=$EXTRACT(S,I)*2 SET EVEN=EVEN+$SELECT(T&lt;=9:T,T&gt;9:$EXTRACT(T,1)+$EXTRACT(T,2))<br> QUIT '((ODD+EVEN)#10)</pre> 
        <pre>USER&gt;W&nbsp;!,$S($$LUHN^ROSETTA("49927398716")=0:"INVALID",1:"VALID")
 
VALID
USER&gt;W&nbsp;!,$S($$LUHN^ROSETTA("49927398717")=0:"INVALID",1:"VALID")
 
INVALID
USER&gt;W&nbsp;!,$S($$LUHN^ROSETTA("1234567812345678")=0:"INVALID",1:"VALID")
 
INVALID
USER&gt;W&nbsp;!,$S($$LUHN^ROSETTA("1234567812345670")=0:"INVALID",1:"VALID")
 
VALID</pre> 
        <h2><span class="mw-headline" id="NetRexx"><a href="/wiki/Category:NetRexx" title="Category:NetRexx">NetRexx</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=64" title="Edit section: NetRexx">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta translation">
         <b>Translation of</b>: 
         <a href="#REXX">REXX</a>
        </div>
        <pre class="netrexx highlighted_source">&nbsp;<br><span class="kw1">class</span> LuhnTest<br>&nbsp;<br>  method main<span class="br0">(</span>args=String<span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> <span class="kw2">static</span><br>    cc	  = <span class="nu0">0</span> <br>    cc<span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span> = <span class="st0">'49927398716'</span><br>    cc<span class="br0">[</span><span class="nu0">2</span><span class="br0">]</span> = <span class="st0">'49927398717'</span><br>    cc<span class="br0">[</span><span class="nu0">3</span><span class="br0">]</span> = <span class="st0">'1234567812345678'</span><br>    cc<span class="br0">[</span><span class="nu0">4</span><span class="br0">]</span> = <span class="st0">'1234567812345670'</span><br>&nbsp;<br>    <span class="kw1">loop</span> k=<span class="nu0">1</span> while cc<span class="br0">[</span>k<span class="br0">]</span> <span class="sy0">&lt;&gt;</span> <span class="nu0">0</span><br>      r = checksum<span class="br0">(</span>cc<span class="br0">[</span>k<span class="br0">]</span><span class="br0">)</span><br>      <span class="kw1">if</span> r==<span class="nu0">0</span> <span class="kw3">then</span> <span class="kw1">say</span> cc<span class="br0">[</span>k<span class="br0">]</span>.<span class="kw6">right</span><span class="br0">(</span><span class="nu0">20</span><span class="br0">)</span> <span class="st0">'passed'</span><br>      <span class="kw3">else</span> <span class="kw1">say</span> cc<span class="br0">[</span>k<span class="br0">]</span>.<span class="kw6">right</span><span class="br0">(</span><span class="nu0">20</span><span class="br0">)</span> <span class="st0">'failed'</span><br>    <span class="kw3">end</span><br>&nbsp;<br>    <span class="co1">-- Luhn algorithm checksum for credit card numbers</span><br>  method checksum<span class="br0">(</span>t<span class="br0">)</span> <span class="kw2">static</span><br>    <span class="kw1">if</span> t.<span class="me0">length</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">//</span><span class="nu0">2</span> <span class="kw3">then</span> t = <span class="st0">'0'</span>t  <span class="co1">--pad # on left with 0</span><br>    t = t.<span class="kw6">reverse</span><span class="br0">(</span><span class="br0">)</span><br>    s = <span class="nu0">0</span><br>    <span class="kw1">loop</span> j = <span class="nu0">1</span> to t.<span class="me0">length</span><span class="br0">(</span><span class="br0">)</span>-<span class="nu0">1</span> by <span class="nu0">2</span><br>      q = <span class="nu0">2</span><span class="sy0">*</span>t.<span class="kw6">substr</span><span class="br0">(</span>j+<span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">)</span><br>      <span class="kw1">if</span> q<span class="sy0">&gt;</span><span class="nu0">9</span> <span class="kw3">then</span> q = q.<span class="kw6">left</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span> + q.<span class="kw6">right</span><span class="br0">(</span><span class="nu0">1</span><span class="br0">)</span><br>      s= s+t.<span class="kw6">substr</span><span class="br0">(</span>j,<span class="nu0">1</span><span class="br0">)</span>+q<br>    <span class="kw3">end</span><br>    <span class="kw1">return</span> s<span class="sy0">//</span><span class="nu0">10</span><span class="sy0">\</span>==<span class="nu0">0</span><br>&nbsp;</pre> 
        <h2><span class="mw-headline" id="Nim"><a href="/wiki/Category:Nim" title="Category:Nim">Nim</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=65" title="Edit section: Nim">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">proc luhn(cc): bool =<br>  const m = [0,2,4,6,8,1,3,5,7,9]<br>  var sum = 0<br>  var odd = true<br>  for i in countdown(cc.high, 0):<br>    let digit = ord(cc[i]) - ord('0')<br>    sum += (if odd: digit else: m[digit])<br>    odd = not odd<br>  sum mod 10 == 0<br>&nbsp;<br>for cc in ["49927398716", "49927398717", "1234567812345678", "1234567812345670"]:<br>  echo cc," ",luhn(cc)</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 true
49927398717 false
1234567812345678 false
1234567812345670 true</pre> 
        <h2><span class="mw-headline" id="Objeck"><a href="/wiki/Category:Objeck" title="Category:Objeck">Objeck</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=66" title="Edit section: Objeck">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="objeck highlighted_source"><span class="kw1">bundle</span> Default <span class="br0">{</span><br>  <span class="kw1">class</span> Luhn <span class="br0">{</span><br>    <span class="kw1">function</span> <span class="sy0">:</span> IsValid<span class="br0">(</span>cc <span class="sy0">:</span> <span class="kw2">String</span><span class="br0">)</span> ~ <span class="kw2">Bool</span> <span class="br0">{</span><br>      isOdd <span class="sy0">:=</span> <span class="kw3">true</span><span class="sy0">;</span><br>      oddSum <span class="sy0">:=</span> <span class="nu0">0</span><span class="sy0">;</span><br>      evenSum <span class="sy0">:=</span> <span class="nu0">0</span><span class="sy0">;</span><br>&nbsp;<br>      <span class="kw1">for</span><span class="br0">(</span>i <span class="sy0">:=</span> cc<span class="sy0">-&gt;</span><span class="me1">Size</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="sy0">;</span> i <span class="sy0">&gt;=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">-=</span> <span class="nu0">1</span><span class="sy0">;</span><span class="br0">)</span> <span class="br0">{</span><br>        digit <span class="sy0">:</span> <span class="kw2">Int</span> <span class="sy0">:=</span> cc<span class="sy0">-&gt;</span><span class="me1">Get</span><span class="br0">(</span>i<span class="br0">)</span> <span class="sy0">-</span> '<span class="nu0">0</span>'<span class="sy0">;</span><br>        <span class="kw1">if</span><span class="br0">(</span>isOdd<span class="br0">)</span> <span class="br0">{</span><br>          oddSum <span class="sy0">+=</span> digit<span class="sy0">;</span><br>        <span class="br0">}</span> <br>        <span class="kw1">else</span> <span class="br0">{</span><br>          evenSum <span class="sy0">+=</span> digit <span class="sy0">/</span> <span class="nu0">5</span> <span class="sy0">+</span> <span class="br0">(</span><span class="nu0">2</span> <span class="sy0">*</span> digit<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span><span class="sy0">;</span><br>        <span class="br0">}</span><span class="sy0">;</span><br>        isOdd <span class="sy0">:=</span> isOdd <span class="sy0">&lt;&gt;</span> <span class="kw3">true</span><span class="sy0">;</span><br>      <span class="br0">}</span><span class="sy0">;</span><br>&nbsp;<br>      <span class="kw1">return</span> <span class="br0">(</span>oddSum <span class="sy0">+</span> evenSum<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="kw1">function</span> <span class="sy0">:</span> Main<span class="br0">(</span>args <span class="sy0">:</span> <span class="kw2">String</span><span class="br0">[</span><span class="br0">]</span><span class="br0">)</span> ~ <span class="kw2">Nil</span> <span class="br0">{</span><br>      IsValid<span class="br0">(</span><span class="st0">"49927398716"</span><span class="br0">)</span><span class="sy0">-&gt;</span><span class="me1">PrintLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>      IsValid<span class="br0">(</span><span class="st0">"49927398717"</span><span class="br0">)</span><span class="sy0">-&gt;</span><span class="me1">PrintLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>      IsValid<span class="br0">(</span><span class="st0">"1234567812345678"</span><span class="br0">)</span><span class="sy0">-&gt;</span><span class="me1">PrintLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>      IsValid<span class="br0">(</span><span class="st0">"1234567812345670"</span><span class="br0">)</span><span class="sy0">-&gt;</span><span class="me1">PrintLine</span><span class="br0">(</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="br0">}</span><br>  <span class="br0">}</span><br><span class="br0">}</span></pre> 
        <h2><span class="mw-headline" id="Objective-C"><a href="/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=67" title="Edit section: Objective-C">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="objc highlighted_source"><span class="sy0">-</span> <span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/"><span class="kw5">NSArray</span></a> <span class="sy0">*</span><span class="br0">)</span> toCharArray <span class="br0">{</span><br>&nbsp;<br>	<a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> <span class="sy0">*</span>characters <span class="sy0">=</span> <span class="br0">[</span><span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSMutableArray_Class/"><span class="kw5">NSMutableArray</span></a> alloc<span class="br0">]</span> initWithCapacity<span class="sy0">:</span><span class="br0">[</span>self length<span class="br0">]</span><span class="br0">]</span>;<br>	<span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span>; i &lt; <span class="br0">[</span>self length<span class="br0">]</span>; i<span class="sy0">++</span><span class="br0">)</span> <span class="br0">{</span><br>		<a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/"><span class="kw5">NSString</span></a> <span class="sy0">*</span>ichar  <span class="sy0">=</span> <span class="br0">[</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/"><span class="kw5">NSString</span></a> stringWithFormat<span class="sy0">:</span><span class="co3">@</span><span class="st0">"%C"</span>, <span class="br0">[</span>self characterAtIndex<span class="sy0">:</span>i<span class="br0">]</span><span class="br0">]</span>;<br>		<span class="br0">[</span>characters addObject<span class="sy0">:</span>ichar<span class="br0">]</span>;<br>	<span class="br0">}</span><br>&nbsp;<br>	<span class="kw1">return</span> characters;<br><span class="br0">}</span><br>&nbsp;<br><span class="sy0">+</span> <span class="br0">(</span><span class="kw4">BOOL</span><span class="br0">)</span> luhnCheck<span class="sy0">:</span><span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/"><span class="kw5">NSString</span></a> <span class="sy0">*</span><span class="br0">)</span>stringToTest <span class="br0">{</span><br>&nbsp;<br>	<a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/"><span class="kw5">NSArray</span></a> <span class="sy0">*</span>stringAsChars <span class="sy0">=</span> <span class="br0">[</span>stringToTest toCharArray<span class="br0">]</span>;<br>&nbsp;<br>	<span class="kw4">BOOL</span> isOdd <span class="sy0">=</span> <span class="kw2">YES</span>;<br>	<span class="kw4">int</span> oddSum <span class="sy0">=</span> <span class="nu0">0</span>;<br>	<span class="kw4">int</span> evenSum <span class="sy0">=</span> <span class="nu0">0</span>;<br>&nbsp;<br>	<span class="kw1">for</span> <span class="br0">(</span><span class="kw4">int</span> i <span class="sy0">=</span> <span class="br0">[</span>stringToTest length<span class="br0">]</span> <span class="sy0">-</span> <span class="nu0">1</span>; i &gt;<span class="sy0">=</span> <span class="nu0">0</span>; i<span class="sy0">--</span><span class="br0">)</span> <span class="br0">{</span><br>&nbsp;<br>		<span class="kw4">int</span> digit <span class="sy0">=</span> <span class="br0">[</span><span class="br0">(</span><a href="http://developer.apple.com/documentation/Cocoa/Reference/Foundation/Classes/NSString_Class/"><span class="kw5">NSString</span></a> <span class="sy0">*</span><span class="br0">)</span>stringAsChars<span class="br0">[</span>i<span class="br0">]</span> intValue<span class="br0">]</span>;<br>&nbsp;<br>		<span class="kw1">if</span> <span class="br0">(</span>isOdd<span class="br0">)</span> <br>			oddSum <span class="sy0">+=</span> digit;<br>		<span class="kw1">else</span> <br>			evenSum <span class="sy0">+=</span> digit<span class="sy0">/</span><span class="nu0">5</span> <span class="sy0">+</span> <span class="br0">(</span><span class="nu0">2</span><span class="sy0">*</span>digit<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span>;<br>&nbsp;<br>		isOdd <span class="sy0">=</span> <span class="sy0">!</span>isOdd;				 <br>	<span class="br0">}</span><br>&nbsp;<br>	<span class="kw1">return</span> <span class="br0">(</span><span class="br0">(</span>oddSum <span class="sy0">+</span> evenSum<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span>;<br><span class="br0">}</span><br>&nbsp;<br><span class="kw4">BOOL</span> test0 <span class="sy0">=</span> <span class="br0">[</span>self luhnCheck<span class="sy0">:</span><span class="co3">@</span><span class="st0">"49927398716"</span><span class="br0">]</span>; <span class="co2">//Result = YES</span><br><span class="kw4">BOOL</span> test1 <span class="sy0">=</span> <span class="br0">[</span>self luhnCheck<span class="sy0">:</span><span class="co3">@</span><span class="st0">"49927398717"</span><span class="br0">]</span>; <span class="co2">//Result = NO</span><br><span class="kw4">BOOL</span> test2 <span class="sy0">=</span> <span class="br0">[</span>self luhnCheck<span class="sy0">:</span><span class="co3">@</span><span class="st0">"1234567812345678"</span><span class="br0">]</span>; <span class="co2">//Result = NO				   </span><br><span class="kw4">BOOL</span> test3 <span class="sy0">=</span> <span class="br0">[</span>self luhnCheck<span class="sy0">:</span><span class="co3">@</span><span class="st0">"1234567812345670"</span><span class="br0">]</span>; <span class="co2">//Result = YES</span></pre> 
        <h2><span class="mw-headline" id="OCaml"><a href="/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=68" title="Edit section: OCaml">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="ocaml highlighted_source"><span class="kw1">let</span> luhn s <span class="sy0">=</span><br>  <span class="kw1">let</span> <span class="kw1">rec</span> g r c <span class="sy0">=</span> <span class="kw1">function</span><br>  <span class="sy0">|</span> <span class="nu0">0</span> <span class="sy0">-&gt;</span> r<br>  <span class="sy0">|</span> i <span class="sy0">-&gt;</span><br>      <span class="kw1">let</span> d <span class="sy0">=</span> c <span class="sy0">*</span> <span class="br0">(</span><span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#VALint_of_char"><span class="kw3">int_of_char</span></a> s<span class="sy0">.</span><span class="br0">[</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span> <span class="sy0">-</span> <span class="nu0">48</span><span class="br0">)</span> <span class="kw1">in</span> <br>      g <span class="br0">(</span>r <span class="sy0">+</span> <span class="br0">(</span>d<span class="sy0">/</span><span class="nu0">10</span><span class="br0">)</span> <span class="sy0">+</span> <span class="br0">(</span>d <span class="kw1">mod</span> <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span> <span class="br0">(</span><span class="nu0">3</span><span class="sy0">-</span>c<span class="br0">)</span> <span class="br0">(</span>i<span class="sy0">-</span><span class="nu0">1</span><span class="br0">)</span><br>  <span class="kw1">in</span><br>  <span class="br0">(</span>g <span class="nu0">0</span> <span class="nu0">1</span> <span class="br0">(</span><a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/String.html"><span class="kw2">String</span></a><span class="sy0">.</span>length s<span class="br0">)</span><span class="br0">)</span> <span class="kw1">mod</span> <span class="nu0">10</span> <span class="sy0">=</span> <span class="nu0">0</span><br><span class="sy0">;;</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre class="ocaml highlighted_source"><span class="sy0">#</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/List.html"><span class="kw2">List</span></a><span class="sy0">.</span>map luhn <span class="br0">[</span> <span class="st0">"49927398716"</span><span class="sy0">;</span> <span class="st0">"49927398717"</span><span class="sy0">;</span> <span class="st0">"1234567812345678"</span><span class="sy0">;</span> <span class="st0">"1234567812345670"</span> <span class="br0">]</span><span class="sy0">;;</span><br><span class="sy0">-</span> <span class="sy0">:</span> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPEbool"><span class="kw4">bool</span></a> <a href="http://caml.inria.fr/pub/docs/manual-ocaml/libref/Pervasives.html#TYPElist"><span class="kw4">list</span></a> <span class="sy0">=</span> <span class="br0">[</span><span class="kw1">true</span><span class="sy0">;</span> <span class="kw1">false</span><span class="sy0">;</span> <span class="kw1">false</span><span class="sy0">;</span> <span class="kw1">true</span><span class="br0">]</span></pre> 
        <p><br> </p> 
        <h2><span class="mw-headline" id="Octave"><a href="/wiki/Category:Octave" title="Category:Octave">Octave</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=69" title="Edit section: Octave">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="octave highlighted_source">   <span class="kw4">function</span> y <span class="sy3">=</span> isluhn<span class="br0">(</span>s<span class="br0">)</span><span class="sy5">;</span><br>	<span class="kw4">if</span> <a href="http://octave.sourceforge.net/octave/function/isnumeric.html"><span class="kw5">isnumeric</span></a><span class="br0">(</span>s<span class="br0">)</span> s <span class="sy3">=</span> <a href="http://octave.sourceforge.net/octave/function/mat2str.html"><span class="kw6">mat2str</span></a><span class="br0">(</span>s<span class="br0">)</span><span class="sy5">;</span> <span class="kw4">end</span><span class="sy5">;</span> 	<span class="co2">% make sure s is a string</span><br>	d <span class="sy3">=</span> s<span class="sy1">-</span><span class="co3">'0'</span><span class="sy5">;</span>	<span class="co2">% convert string into vector of digits</span><br>	m <span class="sy3">=</span> <span class="br0">[</span><span class="nu0">2</span><span class="sy4">:</span><span class="nu0">2</span><span class="sy4">:</span><span class="nu0">8</span><span class="sy5">,</span><span class="nu0">1</span><span class="sy4">:</span><span class="nu0">2</span><span class="sy4">:</span><span class="nu0">9</span><span class="br0">]</span><span class="sy5">;</span>	<span class="co2">% rule 3: maps [1:9] -&gt; i</span><br>	y <span class="sy3">=</span> <span class="sy0">~</span><a href="http://octave.sourceforge.net/octave/function/mod.html"><span class="kw5">mod</span></a><span class="br0">(</span><a href="http://octave.sourceforge.net/octave/function/sum.html"><span class="kw5">sum</span></a><span class="br0">(</span>d<span class="br0">(</span><span class="kw4">end</span><span class="sy4">:</span><span class="sy1">-</span><span class="nu0">2</span><span class="sy4">:</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy1">+</span> <a href="http://octave.sourceforge.net/octave/function/sum.html"><span class="kw5">sum</span></a><span class="br0">(</span>m<span class="br0">(</span>d<span class="br0">(</span>end<span class="sy1">-</span><span class="nu0">1</span><span class="sy4">:</span><span class="sy1">-</span><span class="nu0">2</span><span class="sy4">:</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="sy5">,</span><span class="nu0">10</span><span class="br0">)</span><span class="sy5">;</span><br>   <span class="kw4">end</span><span class="sy5">;</span> </pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre class="octave highlighted_source">  isluhn<span class="br0">(</span><span class="co3">'49927398716'</span><span class="br0">)</span><br>	<span class="kw3">ans</span> <span class="sy3">=</span>  <span class="nu0">1</span><br>  isluhn<span class="br0">(</span><span class="co3">'49927398717'</span><span class="br0">)</span><br>	<span class="kw3">ans</span> <span class="sy3">=</span> <span class="nu0">0</span><br>  isluhn<span class="br0">(</span><span class="co3">'1234567812345678'</span><span class="br0">)</span><br>	<span class="kw3">ans</span> <span class="sy3">=</span> <span class="nu0">0</span><br>  isluhn<span class="br0">(</span><span class="co3">'1234567812345670'</span><span class="br0">)</span><br>	<span class="kw3">ans</span> <span class="sy3">=</span>  <span class="nu0">1</span><br>&nbsp;</pre> 
        <h2><span class="mw-headline" id="Oforth"><a href="/wiki/Category:Oforth" title="Category:Oforth">Oforth</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=70" title="Edit section: Oforth">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">: luhnTest(n)<br>| s i |<br>   n asString reverse -&gt;s<br>   0 s size loop: i [ <br>      i s at asDigit <br>      i isEven ifTrue: [ 2 * dup 10 &gt;= ifTrue: [ 9 - ] ] +<br>      ]<br>   10 mod ==0&nbsp;; </pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>[ 49927398716, 49927398717, 1234567812345678, 1234567812345670 ] map(#luhnTest) println
[1, 0, 0, 1]
</pre> 
        <h2><span class="mw-headline" id="OpenEdge.2FProgress"><a href="/wiki/Category:OpenEdge/Progress" title="Category:OpenEdge/Progress">OpenEdge/Progress</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=71" title="Edit section: OpenEdge/Progress">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="progress highlighted_source"><span class="kw1">FUNCTION</span> fnLuhnAlgorithm <span class="kw1">RETURNS</span> <span class="kw3">LOGICAL</span><br>  <span class="br0">(</span><span class="kw1">INPUT</span> pcNumber <span class="kw3">AS</span> <span class="kw4">CHARACTER</span><span class="br0">)</span><span class="sy0">:</span><br><span class="coMULTI">/*------------------------------------------------------------------------------<br>  Purpose:  Applies Luhn Algorithm to check a Number <br>    Notes:  Returns True/False Validation based on check digit<br>------------------------------------------------------------------------------*/</span><br>    <span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> cNum        <span class="kw3">AS</span> <span class="kw4">CHARACTER</span> <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br>    <span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> iCheck      <span class="kw3">AS</span> <span class="kw3">INTEGER</span>   <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br>    <span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> iLength     <span class="kw3">AS</span> <span class="kw3">INTEGER</span>   <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br>    <span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> iLoopCnt    <span class="kw3">AS</span> <span class="kw3">INTEGER</span>   <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br>    <span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> iNum        <span class="kw3">AS</span> <span class="kw3">INTEGER</span>   <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br>    <span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> iNum1       <span class="kw3">AS</span> <span class="kw3">INTEGER</span>   <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br>    <span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> iNum2       <span class="kw3">AS</span> <span class="kw3">INTEGER</span>   <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br>    <span class="kw1">DEFINE</span> <span class="kw3">VARIABLE</span> iTestLength <span class="kw3">AS</span> <span class="kw3">INTEGER</span>   <span class="kw1">NO-UNDO</span><span class="sy0">.</span><br>&nbsp;<br>    <span class="kw1">ASSIGN</span> <br>      iLength     <span class="sy0">=</span> <span class="kw3">LENGTH</span><span class="br0">(</span>pcNumber<span class="br0">)</span><br>      iTestLength <span class="sy0">=</span> iLength <span class="sy0">-</span> <span class="nu0">1</span><br>        iCheck <span class="sy0">=</span> <span class="nu0">1</span><span class="sy0">.</span> <span class="coMULTI">/* 1 for the check digit we skip */</span><br>&nbsp;<br>    <span class="kw1">DO</span> iLoopCnt <span class="sy0">=</span> iTestLength <span class="kw1">TO</span> <span class="nu0">1</span> <span class="kw3">BY</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">:</span><br>      <span class="kw1">ASSIGN</span> <br>          iNum <span class="sy0">=</span> <span class="kw3">INTEGER</span><span class="br0">(</span><span class="kw1">SUBSTR</span><span class="br0">(</span>pcNumber<span class="sy0">,</span>iLoopCnt<span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>          iCheck <span class="sy0">=</span> iCheck <span class="sy0">+</span> <span class="nu0">1</span><span class="sy0">.</span><br>&nbsp;<br>      <span class="kw1">IF</span> iCheck <span class="kw1">MODULO</span> <span class="nu0">2</span> <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">THEN</span><br>          <span class="kw1">ASSIGN</span> iNum1 <span class="sy0">=</span> iNum1 <span class="sy0">+</span> iNum<span class="sy0">.</span><br>      <span class="kw1">ELSE</span><br>      <span class="kw1">DO</span><span class="sy0">:</span><br>          <span class="kw1">ASSIGN</span> iNum2 <span class="sy0">=</span> iNum <span class="sy0">*</span> <span class="nu0">2</span><span class="sy0">.</span><br>          <span class="kw1">IF</span> iNum2 <span class="sy0">&lt;</span> <span class="nu0">10</span> <span class="kw1">THEN</span><br>              <span class="kw1">ASSIGN</span> iNum1 <span class="sy0">=</span> iNum1 <span class="sy0">+</span> iNum2<span class="sy0">.</span><br>          <span class="kw1">ELSE</span><br>              <span class="kw1">ASSIGN</span><br>                cNum  <span class="sy0">=</span> <span class="kw1">STRING</span><span class="br0">(</span>iNum2<span class="br0">)</span><br>                iNum1 <span class="sy0">=</span> iNum1 <span class="sy0">+</span> <span class="kw3">INTEGER</span><span class="br0">(</span><span class="kw1">SUBSTR</span><span class="br0">(</span>cNum<span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">+</span> <span class="kw3">INTEGER</span><span class="br0">(</span><span class="kw1">SUBSTR</span><span class="br0">(</span>cNum<span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">.</span>   <br>      <span class="kw1">END</span><span class="sy0">.</span><br>    <span class="kw1">END</span><span class="sy0">.</span><br>&nbsp;<br>    <span class="kw1">ASSIGN</span> <br>        iNum2 <span class="sy0">=</span> iNum1 <span class="sy0">*</span> <span class="nu0">9</span><br>        iNum <span class="sy0">=</span> iNum2 <span class="kw1">MODULO</span> <span class="nu0">10</span><span class="sy0">.</span><br>&nbsp;<br>    <span class="kw1">IF</span> iNum <span class="sy0">=</span> <span class="kw3">INTEGER</span><span class="br0">(</span><span class="kw1">SUBSTR</span><span class="br0">(</span>pcNumber<span class="sy0">,</span>iLength<span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="kw1">THEN</span><br>      <span class="kw3">RETURN</span> <span class="kw2">TRUE</span><span class="sy0">.</span><br>    <span class="kw1">ELSE</span><br>      <span class="kw3">RETURN</span> <span class="kw2">FALSE</span><span class="sy0">.</span><br>&nbsp;<br><span class="kw1">END</span> <span class="kw1">FUNCTION</span><span class="sy0">.</span> <span class="coMULTI">/* fnLuhnAlgorithm  */</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716      - yes
49927398717      - no
1234567812345678 - no
1234567812345670 - yes</pre> 
        <h2><span class="mw-headline" id="Order"><a href="/wiki/Category:Order" title="Category:Order">Order</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=72" title="Edit section: Order">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>This example highlights Order's unusual treatment of numbers. Numbers larger than 100 are not recognized by the interpreter in literal form and must instead be entered as "native" numbers (i.e. listing the separate digits as arguments to <code>8nat</code>). Since internally, a native number is just a sequence of the digits in reverse order with an end digit marker, converting the number into a reversed list of digits mainly involves removing this terminator, so that we can immediately treat the digits as number elements. </p> 
        <pre class="c highlighted_source"><span class="co2">#include &lt;order/interpreter.h&gt;</span><br>&nbsp;<br><span class="co2">#define ORDER_PP_DEF_8luhn ORDER_PP_FN( \<br>8fn(8N, 8if(8is_seq(8N), 8luhn_wk(8num_to_seq(8N)), 8false)) )</span><br>&nbsp;<br><span class="co2">#define ORDER_PP_DEF_8num_to_seq ORDER_PP_FN( \<br>8fn(8N, 8seq_push_back(8seq(8seq_last(8N)), 8seq_pop_back(8N))) )</span><br>&nbsp;<br><span class="co2">#define ORDER_PP_DEF_8luhn_wk ORDER_PP_FN(                      \<br>8fn(8N,                                                         \<br>    8lets((8P, 8unzip(8N, 8nil, 8nil, 8true))                   \<br>          (8O, 8seq_fold(8plus, 0, 8tuple_at_0(8P)))            \<br>          (8E, 8seq_fold(8plus, 0,                              \<br>                         8seq_map(8dig_map, 8tuple_at_1(8P)))), \<br>          8is_0(8remainder(8plus(8O, 8E), 10)))) )</span><br>&nbsp;<br><span class="co2">#define ORDER_PP_DEF_8dig_map ORDER_PP_FN( \<br>8fn(8X, 8tuple_at(8X, 8tuple(0,2,4,6,8,1,3,5,7,9))) )</span><br>&nbsp;<br><span class="co2">#define ORDER_PP_DEF_8unzip ORDER_PP_FN(                             \<br>8fn(8S, 8L, 8R, 8O,                                                  \<br>    8if(8is_nil(8S),                                                 \<br>        8pair(8L, 8R),                                               \<br>        8if(8O,                                                      \<br>            8unzip(8seq_tail(8S), 8seq_push_back(8seq_head(8S), 8L), \<br>                   8R, 8false),                                      \<br>            8unzip(8seq_tail(8S), 8L,                                \<br>                   8seq_push_back(8seq_head(8S), 8R), 8true)))) )</span><br>&nbsp;<br>ORDER_PP<span class="br0">(</span>8seq_to_tuple<span class="br0">(</span><br>  8seq_map<span class="br0">(</span>8luhn<span class="sy0">,</span> 8seq<span class="br0">(</span>8nat<span class="br0">(</span><span class="nu0">4</span><span class="sy0">,</span><span class="nu0">9</span><span class="sy0">,</span><span class="nu0">9</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">7</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">9</span><span class="sy0">,</span><span class="nu0">8</span><span class="sy0">,</span><span class="nu0">7</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">6</span><span class="br0">)</span><span class="sy0">,</span><br>                       8nat<span class="br0">(</span><span class="nu0">4</span><span class="sy0">,</span><span class="nu0">9</span><span class="sy0">,</span><span class="nu0">9</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">7</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">9</span><span class="sy0">,</span><span class="nu0">8</span><span class="sy0">,</span><span class="nu0">7</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">7</span><span class="br0">)</span><span class="sy0">,</span><br>                       8nat<span class="br0">(</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span><span class="nu0">5</span><span class="sy0">,</span><span class="nu0">6</span><span class="sy0">,</span><span class="nu0">7</span><span class="sy0">,</span><span class="nu0">8</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span><span class="nu0">5</span><span class="sy0">,</span><span class="nu0">6</span><span class="sy0">,</span><span class="nu0">7</span><span class="sy0">,</span><span class="nu0">8</span><span class="br0">)</span><span class="sy0">,</span><br>                       8nat<span class="br0">(</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span><span class="nu0">5</span><span class="sy0">,</span><span class="nu0">6</span><span class="sy0">,</span><span class="nu0">7</span><span class="sy0">,</span><span class="nu0">8</span><span class="sy0">,</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">,</span><span class="nu0">4</span><span class="sy0">,</span><span class="nu0">5</span><span class="sy0">,</span><span class="nu0">6</span><span class="sy0">,</span><span class="nu0">7</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br><span class="br0">)</span><span class="br0">)</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre class="text highlighted_source">(8true,8false,8false,8true)</pre> 
        <h2><span class="mw-headline" id="Oz"><a href="/wiki/Category:Oz" title="Category:Oz">Oz</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=73" title="Edit section: Oz">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="oz highlighted_source"><span class="kw1">declare</span><br>  <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">Luhn</span> N<span class="br0">}</span><br>     <span class="br0">{</span>Sum <span class="br0">{</span>List<span class="sy0">.</span>mapInd <span class="br0">{</span>Reverse <span class="br0">{</span>Digits N<span class="br0">}</span><span class="br0">}</span><br>           <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">$</span> Idx Dig<span class="br0">}</span><br>              <span class="kw1">if</span> <span class="br0">{</span>IsEven Idx<span class="br0">}</span> <span class="kw1">then</span> <span class="br0">{</span>Sum <span class="br0">{</span>Digits 2<span class="sy0">*</span>Dig<span class="br0">}</span><span class="br0">}</span><br>              <span class="kw1">else</span> Dig<br>              <span class="kw1">end</span><br>           <span class="kw1">end</span><span class="br0">}</span><span class="br0">}</span><br>     <span class="kw1">mod</span> 10 <span class="sy0">==</span> 0<br>  <span class="kw1">end</span><br>&nbsp;<br>  <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">Digits</span> N<span class="br0">}</span><br>     <span class="br0">{</span>Map <span class="br0">{</span>Int<span class="sy0">.</span>toString N<span class="br0">}</span> <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">$</span> D<span class="br0">}</span> D <span class="sy0">-</span> <span class="re3">&amp;0</span> <span class="kw1">end</span><span class="br0">}</span><br>  <span class="kw1">end</span><br>&nbsp;<br>  <span class="kw1">fun</span> <span class="br0">{</span><span class="re1">Sum</span> Xs<span class="br0">}</span><br>     <span class="br0">{</span>FoldL Xs Number<span class="sy0">.</span><span class="st0">'+'</span> 0<span class="br0">}</span><br>  <span class="kw1">end</span><br><span class="kw1">in</span><br>  <span class="br0">{</span>Show<br>   <span class="br0">{</span>Map<br>    <span class="br0">[</span>49927398716 49927398717 1234567812345678 1234567812345670<span class="br0">]</span><br>    Luhn<span class="br0">}</span><span class="br0">}</span></pre> 
        <h2><span class="mw-headline" id="Pascal"><a href="/wiki/Category:Pascal" title="Category:Pascal">Pascal</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=74" title="Edit section: Pascal">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="pascal highlighted_source"><span class="kw1">program</span> luhn<span class="sy1">;</span><br>&nbsp;<br>  <span class="kw1">function</span> lunh<span class="br0">(</span>arg<span class="sy1">:</span> <span class="kw4">string</span><span class="br0">)</span><span class="sy1">:</span> <span class="kw4">boolean</span><span class="sy1">;</span><br>  <span class="kw1">var</span><br>    i<span class="sy1">,</span> sum<span class="sy1">:</span> <span class="kw4">integer</span><span class="sy1">;</span><br>    temp<span class="sy1">:</span> <span class="kw4">byte</span><span class="sy1">;</span><br>  <span class="kw1">begin</span><br>    sum <span class="sy1">:</span><span class="sy3">=</span> <span class="nu0">0</span><span class="sy1">;</span><br>    <span class="kw1">for</span> i<span class="sy1">:</span><span class="sy3">=</span> length<span class="br0">(</span>arg<span class="br0">)</span> <span class="kw1">downto</span> <span class="nu0">1</span> <span class="kw1">do</span> <span class="kw1">begin</span>  <span class="co1">// Run the characters backwards</span><br>      temp <span class="sy1">:</span><span class="sy3">=</span> <span class="kw4">byte</span><span class="br0">(</span>arg<span class="br0">[</span>i<span class="br0">]</span><span class="br0">)</span><span class="sy3">-</span><span class="nu0">48</span><span class="sy1">;</span>             <span class="co1">// Convert from ASCII to byte</span><br>      <span class="kw1">if</span> <span class="br0">(</span>length<span class="br0">(</span>arg<span class="br0">)</span><span class="sy3">-</span>i<span class="br0">)</span> <span class="kw1">mod</span> <span class="nu0">2</span> <span class="sy3">=</span> <span class="nu0">0</span><br>        <span class="kw1">then</span> sum <span class="sy1">:</span><span class="sy3">=</span> sum <span class="sy3">+</span> temp             <span class="co1">// Odd characters just add</span><br>        <span class="kw1">else</span> <span class="kw1">if</span> temp &lt; <span class="nu0">5</span><br>           <span class="kw1">then</span> sum <span class="sy1">:</span><span class="sy3">=</span> sum <span class="sy3">+</span> <span class="nu0">2</span><span class="sy3">*</span>temp        <span class="co1">// Even characters add double</span><br>           <span class="kw1">else</span> sum <span class="sy1">:</span><span class="sy3">=</span> sum <span class="sy3">+</span> <span class="br0">(</span><span class="nu0">2</span><span class="sy3">*</span>temp<span class="br0">)</span><span class="sy3">-</span><span class="nu0">9</span><span class="sy1">;</span>   <span class="co1">// or sum the digits of the doubling</span><br>    <span class="kw1">end</span><span class="sy1">;</span><br>    result <span class="sy1">:</span><span class="sy3">=</span> sum <span class="kw1">mod</span> <span class="nu0">10</span> <span class="sy3">=</span> <span class="nu0">0</span><span class="sy1">;</span>              <span class="co1">// Return true if sum ends in a 0</span><br>  <span class="kw1">end</span><span class="sy1">;</span><br>&nbsp;<br><span class="kw1">begin</span><br>  <span class="kw3">writeln</span><span class="br0">(</span><span class="st0">'     49927398716: '</span><span class="sy1">,</span> lunh<span class="br0">(</span><span class="st0">'49927398716'</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">;</span><br>  <span class="kw3">writeln</span><span class="br0">(</span><span class="st0">'     49927398717: '</span><span class="sy1">,</span> lunh<span class="br0">(</span><span class="st0">'49927398717'</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">;</span><br>  <span class="kw3">writeln</span><span class="br0">(</span><span class="st0">'1234567812345678: '</span><span class="sy1">,</span> lunh<span class="br0">(</span><span class="st0">'1234567812345678'</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">;</span><br>  <span class="kw3">writeln</span><span class="br0">(</span><span class="st0">'1234567812345670: '</span><span class="sy1">,</span> lunh<span class="br0">(</span><span class="st0">'1234567812345670'</span><span class="br0">)</span><span class="br0">)</span><span class="sy1">;</span><br><span class="kw1">end</span><span class="sy1">.</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>     49927398716: TRUE
     49927398717: FALSE
1234567812345678: FALSE
1234567812345670: TRUE</pre> 
        <h2><span class="mw-headline" id="Perl"><a href="/wiki/Category:Perl" title="Category:Perl">Perl</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=75" title="Edit section: Perl">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="perl highlighted_source"><span class="kw2">sub</span> luhn_test<br><span class="br0">{</span><br>        <span class="kw1">my</span> <span class="re0">@rev</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/reverse.html"><span class="kw3">reverse</span></a> <a href="http://perldoc.perl.org/functions/split.html"><span class="kw3">split</span></a> <span class="sy0">//,</span><span class="co5">$_</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy0">;</span><br>        <span class="kw1">my</span> <span class="br0">(</span><span class="re0">$sum1</span><span class="sy0">,</span><span class="re0">$sum2</span><span class="sy0">,</span><span class="re0">$i</span><span class="br0">)</span> <span class="sy0">=</span> <span class="br0">(</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">0</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>        <span class="kw1">for</span><span class="br0">(</span><span class="kw1">my</span> <span class="re0">$i</span><span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span><span class="re0">$i</span><span class="sy0">&lt;</span><span class="re0">@rev</span><span class="sy0">;</span><span class="re0">$i</span><span class="sy0">+=</span><span class="nu0">2</span><span class="br0">)</span><br>        <span class="br0">{</span><br>                <span class="re0">$sum1</span> <span class="sy0">+=</span> <span class="re0">$rev</span><span class="br0">[</span><span class="re0">$i</span><span class="br0">]</span><span class="sy0">;</span><br>                <span class="kw1">last</span> <span class="kw1">if</span> <span class="re0">$i</span> <span class="sy0">==</span> <span class="re0">$#rev</span><span class="sy0">;</span><br>                <span class="re0">$sum2</span> <span class="sy0">+=</span> <span class="nu0">2</span><span class="re0">*$rev</span><span class="br0">[</span><span class="re0">$i</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">]</span><span class="sy0">%</span>10 <span class="sy0">+</span> <a href="http://perldoc.perl.org/functions/int.html"><span class="kw3">int</span></a><span class="br0">(</span><span class="nu0">2</span><span class="re0">*$rev</span><span class="br0">[</span><span class="re0">$i</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">]</span><span class="sy0">/</span><span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>        <a href="http://perldoc.perl.org/functions/return.html"><span class="kw3">return</span></a> <span class="br0">(</span><span class="re0">$sum1</span><span class="sy0">+</span><span class="re0">$sum2</span><span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span><br><a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> luhn_test<span class="br0">(</span><span class="st_h">'49927398716'</span><span class="br0">)</span><span class="sy0">;</span><br><a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> luhn_test<span class="br0">(</span><span class="st_h">'49927398717'</span><span class="br0">)</span><span class="sy0">;</span><br><a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> luhn_test<span class="br0">(</span><span class="st_h">'1234567812345678'</span><span class="br0">)</span><span class="sy0">;</span><br><a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> luhn_test<span class="br0">(</span><span class="st_h">'1234567812345670'</span><span class="br0">)</span><span class="sy0">;</span></pre> 
        <p>Or using map( ) and a precomputed array: </p> 
        <pre class="perl highlighted_source"><span class="kw2">sub</span> luhn <span class="br0">{</span><br>    <span class="kw1">my</span> <span class="br0">(</span><span class="re0">@n</span><span class="sy0">,</span><span class="re0">$i</span><span class="sy0">,</span><span class="re0">$sum</span><span class="br0">)</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/split.html"><span class="kw3">split</span></a> <span class="sy0">//,</span> <a href="http://perldoc.perl.org/functions/reverse.html"><span class="kw3">reverse</span></a> <span class="co5">$_</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="sy0">;</span><br>    <span class="kw1">my</span> <span class="re0">@a</span> <span class="sy0">=</span> <a href="http://perldoc.perl.org/functions/map.html"><span class="kw3">map</span></a> <span class="br0">{</span><a href="http://perldoc.perl.org/functions/int.html"><span class="kw3">int</span></a><span class="br0">(</span><span class="nu0">2</span><span class="sy0">*</span><span class="co5">$_</span> <span class="sy0">/</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy0">+</span> <span class="br0">(</span><span class="nu0">2</span><span class="sy0">*</span><span class="co5">$_</span> <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span><span class="br0">}</span> <span class="br0">(</span><span class="nu0">0</span><span class="sy0">..</span><span class="nu0">9</span><span class="br0">)</span><span class="sy0">;</span><br>    <a href="http://perldoc.perl.org/functions/map.html"><span class="kw3">map</span></a> <span class="br0">{</span><span class="re0">$sum</span> <span class="sy0">+=</span> <span class="re0">$i</span><span class="sy0">++</span> <span class="sy0">%</span> <span class="nu0">2</span> <span class="sy0">?</span> <span class="re0">$a</span><span class="br0">[</span><span class="co5">$_</span><span class="br0">]</span> <span class="sy0">:</span> <span class="co5">$_</span><span class="br0">}</span> <span class="re0">@n</span><span class="sy0">;</span><br>    <a href="http://perldoc.perl.org/functions/return.html"><span class="kw3">return</span></a> <span class="br0">(</span><span class="re0">$sum</span> <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy0">?</span> <span class="nu0">0</span> <span class="sy0">:</span> <span class="nu0">1</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="co1"># Test and display</span><br><a href="http://perldoc.perl.org/functions/map.html"><span class="kw3">map</span></a> <span class="br0">{</span><a href="http://perldoc.perl.org/functions/print.html"><span class="kw3">print</span></a> luhn<span class="br0">(</span><span class="co5">$_</span><span class="br0">)</span><span class="sy0">,</span> <span class="st0">": $_<span class="es0">\n</span>"</span><span class="br0">}</span><br>    <a href="http://perldoc.perl.org/functions/qw.html"><span class="kw3">qw</span></a><span class="br0">(</span><span class="nu0">49927398716</span> <span class="nu0">49927398717</span> <span class="nu0">1234567812345678</span> <span class="nu0">1234567812345670</span><span class="br0">)</span><span class="sy0">;</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>1: 49927398716
0: 49927398717
0: 1234567812345678
1: 1234567812345670</pre> 
        <h2><span class="mw-headline" id="Perl_6"><a href="/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=76" title="Edit section: Perl 6">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/Rakudo" title="Rakudo">rakudo</a> version 2015-11-29
        </div> 
        <p>Here we make use of <tt>comb</tt>, which splits into individual characters, and the sequence operator <tt>...</tt>, which can intuit an even or odd sequence from the first two values. <tt>%%</tt> is the divisible-by operator. </p> 
        <pre class="perl6 highlighted_source"><span class="kw2">sub</span> luhn<span class="sy0">-</span>test <span class="br0">(</span><span class="re0">$number</span> <span class="sy0">--&gt;</span> Bool<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">my</span> <span class="re0">@digits</span> <span class="sy0">=</span> <span class="re0">$number</span><span class="sy0">.</span><span class="kw3">comb</span><span class="sy0">.</span><span class="kw3">reverse</span><span class="sy0">;</span><br>    <span class="kw1">my</span> <span class="re0">$sum</span> <span class="sy0">=</span> <span class="re0">@digits</span><span class="br0">[</span><span class="nu0">0</span><span class="sy0">,</span><span class="nu0">2</span><span class="sy0">...*</span><span class="br0">]</span><span class="sy0">.</span><span class="me1">sum</span><br>            <span class="sy0">+</span> <span class="re0">@digits</span><span class="br0">[</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">3</span><span class="sy0">...*</span><span class="br0">]</span><span class="sy0">.</span><span class="kw3">map</span><span class="br0">(</span><span class="br0">{</span> <span class="sy0">|</span><span class="br0">(</span><span class="re0">$_</span> <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">)</span><span class="sy0">.</span><span class="kw3">comb</span> <span class="br0">}</span><span class="br0">)</span><span class="sy0">.</span><span class="me1">sum</span><span class="sy0">;</span><br>    <span class="kw1">return</span> <span class="re0">$sum</span> <span class="sy0">%%</span> <span class="nu0">10</span><span class="sy0">;</span><br><span class="br0">}</span></pre> 
        <p>And we can test it like this: </p> 
        <pre class="perl6 highlighted_source"><span class="kw2">use</span> Test<span class="sy0">;</span><br>&nbsp;<br><span class="kw1">my</span> <span class="re0">@cc</span><span class="sy0">-</span>numbers <span class="sy0">=</span><br>    <span class="st_h">'49927398716'</span>       <span class="sy0">=&gt;</span> <span class="kw1">True</span><span class="sy0">,</span><br>    <span class="st_h">'49927398717'</span>       <span class="sy0">=&gt;</span> <span class="kw1">False</span><span class="sy0">,</span><br>    <span class="st_h">'1234567812345678'</span>  <span class="sy0">=&gt;</span> <span class="kw1">False</span><span class="sy0">,</span><br>    <span class="st_h">'1234567812345670'</span>  <span class="sy0">=&gt;</span> <span class="kw1">True</span><span class="sy0">;</span><br>&nbsp;<br>plan <span class="re0">@cc</span><span class="sy0">-</span>numbers<span class="sy0">.</span><span class="kw3">elems</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw1">for</span> <span class="re0">@cc</span><span class="sy0">-</span>numbers»<span class="sy0">.</span><span class="kw3">kv</span> <span class="sy0">-&gt;</span> <span class="br0">(</span><span class="re0">$cc</span><span class="sy0">,</span> <span class="re0">$expected</span><span class="sy0">-</span>result<span class="br0">)</span> <span class="br0">{</span><br>    <span class="kw1">is</span> luhn<span class="sy0">-</span>test<span class="br0">(</span><span class="sy0">+</span><span class="re0">$cc</span><span class="br0">)</span><span class="sy0">,</span> <span class="re0">$expected</span><span class="sy0">-</span>result<span class="sy0">,</span><br>        <span class="st0">"$cc {$expected-result&nbsp;?? 'passes'&nbsp;!! 'does not pass'} the Luhn test."</span><span class="sy0">;</span><br><span class="br0">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>1..4
ok 1 - 49927398716 passes the Luhn test.
ok 2 - 49927398717 does not pass the Luhn test.
ok 3 - 1234567812345678 does not pass the Luhn test.
ok 4 - 1234567812345670 passes the Luhn test.</pre> 
        <h2><span class="mw-headline" id="Phix"><a href="/wiki/Category:Phix" title="Category:Phix">Phix</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=77" title="Edit section: Phix">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">function Luhn(string st)<br>integer s=0, d<br>    for i=1 to length(st) do<br>        d = st[i]-'0'<br>        s += iff(mod(i,2)?d,d*2-(d&gt;4)*9)<br>    end for<br>    return remainder(s,10)=0<br>end function<br>&nbsp;<br>procedure test(string s)<br>    printf(1,"%20s&nbsp;:&nbsp;%s\n",{s,iff(Luhn(reverse(s))?"OK":"FAIL")})<br>end procedure<br>&nbsp;<br>test("49927398716")<br>test("49927398717")<br>test("1234567812345678")<br>test("1234567812345670")</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>         49927398716&nbsp;: OK
         49927398717&nbsp;: FAIL
    1234567812345678&nbsp;: FAIL
    1234567812345670&nbsp;: OK
</pre> 
        <h2><span class="mw-headline" id="PHP"><a href="/wiki/Category:PHP" title="Category:PHP">PHP</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=78" title="Edit section: PHP">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta translation">
         <b>Translation of</b>: 
         <a href="#C">C</a>
        </div> 
        <pre class="php highlighted_source"><span class="re0">$numbers</span> <span class="sy0">=</span> <span class="st0">"49927398716 49927398717 1234567812345678 1234567812345670"</span><span class="sy0">;</span><br><span class="kw1">foreach</span> <span class="br0">(</span><a href="http://www.php.net/split"><span class="kw3">split</span></a><span class="br0">(</span><span class="st_h">' '</span><span class="sy0">,</span> <span class="re0">$numbers</span><span class="br0">)</span> <span class="kw1">as</span> <span class="re0">$n</span><span class="br0">)</span><br>    <span class="kw1">echo</span> <span class="st0">"<span class="es4">$n</span> is "</span><span class="sy0">,</span> luhnTest<span class="br0">(</span><span class="re0">$n</span><span class="br0">)</span>&nbsp;? <span class="st_h">'valid'</span> <span class="sy0">:</span> <span class="st_h">'not valid'</span><span class="sy0">,</span> <span class="st_h">'&lt;/br&gt;'</span><span class="sy0">;</span><br>&nbsp;<br><span class="kw2">function</span> luhnTest<span class="br0">(</span><span class="re0">$num</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="re0">$len</span> <span class="sy0">=</span> <a href="http://www.php.net/strlen"><span class="kw3">strlen</span></a><span class="br0">(</span><span class="re0">$num</span><span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw1">for</span> <span class="br0">(</span><span class="re0">$i</span> <span class="sy0">=</span> <span class="re0">$len</span><span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span> <span class="re0">$i</span> <span class="sy0">&gt;=</span> <span class="nu0">0</span><span class="sy0">;</span> <span class="re0">$i</span><span class="sy0">--</span><span class="br0">)</span> <span class="br0">{</span><br>        <span class="re0">$ord</span> <span class="sy0">=</span> <a href="http://www.php.net/ord"><span class="kw3">ord</span></a><span class="br0">(</span><span class="re0">$num</span><span class="br0">[</span><span class="re0">$i</span><span class="br0">]</span><span class="br0">)</span><span class="sy0">;</span><br>        <span class="kw1">if</span> <span class="br0">(</span><span class="br0">(</span><span class="re0">$len</span> <span class="sy0">-</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">&amp;</span> <span class="re0">$i</span><span class="br0">)</span> <span class="br0">{</span><br>            <span class="re0">$sum</span> <span class="sy0">+=</span> <span class="re0">$ord</span><span class="sy0">;</span><br>        <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>            <span class="re0">$sum</span> <span class="sy0">+=</span> <span class="re0">$ord</span> <span class="sy0">/</span> <span class="nu0">5</span> <span class="sy0">+</span> <span class="br0">(</span><span class="nu0">2</span> <span class="sy0">*</span> <span class="re0">$ord</span><span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span><span class="sy0">;</span><br>        <span class="br0">}</span><br>    <span class="br0">}</span>       <br>    <span class="kw1">return</span> <span class="re0">$sum</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 is valid
49927398717 is not valid
1234567812345678 is not valid
1234567812345670 is valid</pre> 
        <p>And a more concise example using PHP core methods: </p> 
        <pre class="php highlighted_source"><span class="kw2">function</span> luhn_test<span class="br0">(</span><span class="re0">$num</span><span class="br0">)</span> <span class="br0">{</span><br>    <span class="re0">$str</span> <span class="sy0">=</span> <span class="st_h">''</span><span class="sy0">;</span><br>    <span class="kw1">foreach</span><span class="br0">(</span> <a href="http://www.php.net/array_reverse"><span class="kw3">array_reverse</span></a><span class="br0">(</span> <a href="http://www.php.net/str_split"><span class="kw3">str_split</span></a><span class="br0">(</span> <span class="re0">$num</span> <span class="br0">)</span> <span class="br0">)</span> <span class="kw1">as</span> <span class="re0">$i</span> <span class="sy0">=&gt;</span> <span class="re0">$c</span> <span class="br0">)</span> <span class="re0">$str</span> <span class="sy0">.=</span> <span class="br0">(</span><span class="re0">$i</span> <span class="sy0">%</span> <span class="nu0">2</span>&nbsp;? <span class="re0">$c</span> <span class="sy0">*</span> <span class="nu0">2</span> <span class="sy0">:</span> <span class="re0">$c</span> <span class="br0">)</span><span class="sy0">;</span><br>    <span class="kw1">return</span> <a href="http://www.php.net/array_sum"><span class="kw3">array_sum</span></a><span class="br0">(</span> <a href="http://www.php.net/str_split"><span class="kw3">str_split</span></a><span class="br0">(</span><span class="re0">$str</span><span class="br0">)</span> <span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="sy0">;</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw1">foreach</span> <span class="br0">(</span><a href="http://www.php.net/array"><span class="kw3">array</span></a><span class="br0">(</span><span class="st_h">'49927398716'</span><span class="sy0">,</span><span class="st_h">'49927398717'</span><span class="sy0">,</span><span class="st_h">'1234567812345678'</span><span class="sy0">,</span><span class="st_h">'1234567812345670'</span><span class="br0">)</span> <span class="kw1">as</span> <span class="re0">$n</span><span class="br0">)</span><br>    <span class="kw1">echo</span> <span class="st0">"<span class="es4">$n</span> is "</span><span class="sy0">,</span> luhn_test<span class="br0">(</span><span class="re0">$n</span><span class="br0">)</span>&nbsp;? <span class="st_h">'valid'</span> <span class="sy0">:</span> <span class="st_h">'not valid'</span><span class="sy0">,</span> <span class="st0">"&lt;/br&gt;<span class="es1">\n</span>"</span><span class="sy0">;</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 is valid
49927398717 is not valid
1234567812345678 is not valid
1234567812345670 is valid
</pre> 
        <h2><span class="mw-headline" id="PicoLisp"><a href="/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=79" title="Edit section: PicoLisp">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">(de luhn (Num)  # 'Num' may be a number or a string<br>   (=0<br>      (%<br>         (sum<br>            '((C F)<br>               (setq C (- (char C) 48))<br>               (if F<br>                  C                               # Odd<br>                  (+ (/ C 5) (% (* 2 C) 10)) ) )  # Even<br>            (flip (chop Num))<br>            '(T NIL .) )<br>         10 ) ) )</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>: (mapcar luhn (49927398716 49927398717 1234567812345678 1234567812345670))
-&gt; (0 NIL NIL 0)</pre> 
        <h2><span class="mw-headline" id="PL.2FI"><a href="/wiki/Category:PL/I" title="Category:PL/I">PL/I</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=80" title="Edit section: PL/I">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="pli highlighted_source">test<span class="sy0">:</span> <span class="kw1">procedure</span> <span class="kw1">options</span> <span class="br0">(</span><span class="kw1">main</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>   <span class="kw1">declare</span> <span class="br0">(</span>cardnumber<span class="sy0">,</span> rcn<span class="br0">)</span> <span class="kw1">character</span> <span class="br0">(</span><span class="nu0">20</span><span class="br0">)</span> <span class="kw1">varying</span><span class="sy0">;</span><br>   <span class="kw1">declare</span> <span class="br0">(</span>i<span class="sy0">,</span> k<span class="sy0">,</span> s1<span class="sy0">,</span> s2<span class="br0">)</span> <span class="kw1">fixed</span> <span class="kw1">binary</span><span class="sy0">;</span><br>&nbsp;<br>   <span class="kw1">get</span> <span class="kw1">edit</span> <span class="br0">(</span>cardnumber<span class="br0">)</span> <span class="br0">(</span>L<span class="br0">)</span><span class="sy0">;</span><br>   cardnumber <span class="sy0">=</span> <span class="kw1">trim</span><span class="br0">(</span>cardnumber<span class="br0">)</span><span class="sy0">;</span><br>   rcn <span class="sy0">=</span> <span class="kw1">reverse</span><span class="br0">(</span>cardnumber<span class="br0">)</span><span class="sy0">;</span><br>   s1<span class="sy0">,</span> s2 <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span><br>   <span class="coMULTI">/* Sum the odd-numbered digits */</span><br>   <span class="kw1">do</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">to</span> <span class="kw1">length</span><span class="br0">(</span>rcn<span class="br0">)</span> <span class="kw1">by</span> <span class="nu0">2</span><span class="sy0">;</span><br>      s1 <span class="sy0">=</span> s1 <span class="sy0">+</span> <span class="kw1">substr</span><span class="br0">(</span>rcn<span class="sy0">,</span> i<span class="sy0">,</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>   <span class="kw1">end</span><span class="sy0">;</span><br>   <span class="coMULTI">/* Twice the even-numbered digits. */</span><br>   <span class="kw1">do</span> i <span class="sy0">=</span> <span class="nu0">2</span> <span class="kw1">to</span> <span class="kw1">length</span><span class="br0">(</span>rcn<span class="br0">)</span> <span class="kw1">by</span> <span class="nu0">2</span><span class="sy0">;</span><br>      k <span class="sy0">=</span> <span class="nu0">2</span> <span class="sy0">*</span> <span class="kw1">substr</span><span class="br0">(</span>rcn<span class="sy0">,</span> i<span class="sy0">,</span> <span class="nu0">1</span><span class="br0">)</span><span class="sy0">;</span><br>      s2 <span class="sy0">=</span> s2 <span class="sy0">+</span> <span class="kw1">mod</span><span class="br0">(</span>k<span class="sy0">,</span><span class="nu0">10</span><span class="br0">)</span> <span class="sy0">+</span> <span class="kw1">trunc</span><span class="br0">(</span>k<span class="sy0">/</span><span class="nu0">10</span><span class="br0">)</span><span class="sy0">;</span><br>   <span class="kw1">end</span><span class="sy0">;</span><br>   <span class="kw1">if</span> <span class="kw1">mod</span><span class="br0">(</span>s1 <span class="sy0">+</span> s2<span class="sy0">,</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy0">=</span> <span class="nu0">0</span> <span class="kw1">then</span><br>      <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">edit</span> <span class="br0">(</span>cardnumber<span class="sy0">,</span> <span class="st0">' passes the Luhn test'</span> <span class="br0">)</span><span class="br0">(</span>a<span class="br0">)</span><span class="sy0">;</span><br>   <span class="kw1">else</span><br>      <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">edit</span> <span class="br0">(</span>cardnumber<span class="sy0">,</span> <span class="st0">' does not pass the Luhn test'</span> <span class="br0">)</span><span class="br0">(</span>a<span class="br0">)</span><span class="sy0">;</span><br>   <span class="kw1">put</span> <span class="kw1">skip</span> <span class="kw1">list</span> <span class="br0">(</span>s1 <span class="sy0">+</span> s2<span class="br0">)</span><span class="sy0">;</span><br><span class="kw1">end</span> test<span class="sy0">;</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 passes the Luhn test
       70 
49927398717 does not pass the Luhn test
       71 
1234567812345678 does not pass the Luhn test
       68 
1234567812345670 passes the Luhn test
       60
</pre> 
        <p>Comment: it isn't necessary to reverse the string in order to perform the test. </p> 
        <h2><span class="mw-headline" id="PL.2FSQL"><a href="/wiki/Category:PL/SQL" title="Category:PL/SQL">PL/SQL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=81" title="Edit section: PL/SQL">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="plsql highlighted_source"><a href="http://www.oracle.com/pls/db92/db92.drilldown?word=FUNCTION"><span class="kw1">FUNCTION</span></a> algoLuhn <span class="br0">(</span> p_numeroVerif <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=VARCHAR2"><span class="kw1">VARCHAR2</span></a> <span class="br0">)</span><br>    <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN"><span class="kw1">RETURN</span></a> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER"><span class="kw1">NUMBER</span></a><br>  <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=IS"><span class="kw1">IS</span></a><br>    i         <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER"><span class="kw1">NUMBER</span></a><span class="sy0">;</span><br>    v_NBi     <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=SMALLINT"><span class="kw1">SMALLINT</span></a><span class="sy0">;</span><br>    v_retour  <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=SMALLINT"><span class="kw1">SMALLINT</span></a><span class="sy0">;</span><br>    v_somme   <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER"><span class="kw1">NUMBER</span></a> <span class="sy0">:=</span> <span class="nu0">0</span><span class="sy0">;</span><br>    v_nbCar   <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=NUMBER"><span class="kw1">NUMBER</span></a><span class="sy0">;</span><br>&nbsp;<br>  <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=BEGIN"><span class="kw1">BEGIN</span></a>  <br>    v_nbCar <span class="sy0">:=</span> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=LENGTH"><span class="kw2">LENGTH</span></a><span class="br0">(</span>p_numeroVerif<span class="br0">)</span><span class="sy0">;</span>    <br>&nbsp;<br>    <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=FOR"><span class="kw1">FOR</span></a> i <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=IN"><span class="kw1">IN</span></a> <span class="nu0">1</span><span class="sy0">..</span>v_nbCar<br>    <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP"><span class="kw1">LOOP</span></a><br>        v_NBi <span class="sy0">:=</span> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=TO_NUMBER"><span class="kw2">TO_NUMBER</span></a><span class="br0">(</span><a href="http://www.oracle.com/pls/db92/db92.drilldown?word=SUBSTR"><span class="kw2">SUBSTR</span></a><span class="br0">(</span>p_numeroVerif<span class="sy0">,</span>v_nbCar<span class="sy0">+</span><span class="nu0">1</span><span class="sy0">-</span>i<span class="sy0">,</span><span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>        v_somme <span class="sy0">:=</span> v_somme<br>                  <span class="sy0">+</span> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=MOD"><span class="kw2">MOD</span></a><span class="br0">(</span>i<span class="sy0">,</span><span class="nu0">2</span><span class="br0">)</span>   <span class="sy0">*</span> v_NBi<br>                  <span class="sy0">+</span> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=MOD"><span class="kw2">MOD</span></a><span class="br0">(</span>i<span class="sy0">+</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">)</span> <span class="sy0">*</span> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=SIGN"><span class="kw2">SIGN</span></a><span class="br0">(</span><span class="sy0">-</span><a href="http://www.oracle.com/pls/db92/db92.drilldown?word=SIGN"><span class="kw2">SIGN</span></a><span class="br0">(</span>v_Nbi<span class="sy0">-</span><span class="nu0">4</span><span class="br0">)</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span> <span class="sy0">*</span> <span class="br0">(</span><span class="nu0">2</span><span class="sy0">*</span>v_NBi<span class="br0">)</span><br>                  <span class="sy0">+</span> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=MOD"><span class="kw2">MOD</span></a><span class="br0">(</span>i<span class="sy0">+</span><span class="nu0">1</span><span class="sy0">,</span><span class="nu0">2</span><span class="br0">)</span> <span class="sy0">*</span> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=SIGN"><span class="kw2">SIGN</span></a><span class="br0">(</span> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=SIGN"><span class="kw2">SIGN</span></a><span class="br0">(</span>v_Nbi<span class="sy0">-</span><span class="nu0">5</span><span class="br0">)</span><span class="sy0">+</span><span class="nu0">1</span><span class="br0">)</span> <span class="sy0">*</span> <span class="br0">(</span><span class="nu0">2</span><span class="sy0">*</span>v_NBi<span class="sy0">-</span><span class="nu0">9</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>    <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=END"><span class="kw1">END</span></a> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=LOOP"><span class="kw1">LOOP</span></a><span class="sy0">;</span><br>&nbsp;<br>    v_retour <span class="sy0">:=</span> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=SIGN"><span class="kw2">SIGN</span></a><span class="br0">(</span><a href="http://www.oracle.com/pls/db92/db92.drilldown?word=MOD"><span class="kw2">MOD</span></a><span class="br0">(</span>v_somme<span class="sy0">,</span><span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><span class="sy0">;</span><br>&nbsp;<br>    <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN"><span class="kw1">RETURN</span></a> v_retour<span class="sy0">;</span><br>&nbsp;<br>  <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=EXCEPTION"><span class="kw1">EXCEPTION</span></a><br>    <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=WHEN"><span class="kw1">WHEN</span></a> <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=OTHERS"><span class="kw1">OTHERS</span></a><br>      <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=THEN"><span class="kw1">THEN</span></a><br>        <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=RETURN"><span class="kw1">RETURN</span></a> <span class="nu0">1</span><span class="sy0">;</span><br>&nbsp;<br>  <a href="http://www.oracle.com/pls/db92/db92.drilldown?word=END"><span class="kw1">END</span></a> algoLuhn<span class="sy0">;</span></pre> 
        <h2><span class="mw-headline" id="PowerShell"><a href="/wiki/Category:PowerShell" title="Category:PowerShell">PowerShell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=82" title="Edit section: PowerShell">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="powershell highlighted_source">&nbsp;<br><span class="kw3">function</span> Test<span class="sy0">-</span>LuhnNumber<br><span class="br0">{</span><br>  <span class="coMULTI">&lt;#<br>    .SYNOPSIS<br>        Tests validity of credit card numbers.<br>    .DESCRIPTION<br>        Tests validity of credit card numbers using the Luhn test.<br>    .PARAMETER Number<br>        The number must be 11 or 16 digits.<br>    .EXAMPLE<br>        Test-LuhnNumber 49927398716<br>    .EXAMPLE<br>        [int64[]]$numbers = 49927398716, 49927398717, 1234567812345678, 1234567812345670<br>        C:\PS&gt;$numbers | ForEach-Object {<br>                  "{0,-17}: {1}" -f $_,"$(if(Test-LuhnNumber $_) {'Is valid.'} else {'Is not valid.'})"<br>              }<br>  #&gt;</span><br>    <span class="br0">[</span>CmdletBinding<span class="br0">(</span><span class="br0">)</span><span class="br0">]</span><br>    <span class="br0">[</span>OutputType<span class="br0">(</span><span class="br0">[</span><span class="re3">bool</span><span class="br0">]</span><span class="br0">)</span><span class="br0">]</span><br>    <span class="kw3">Param</span><br>    <span class="br0">(</span><br>        <span class="br0">[</span>Parameter<span class="br0">(</span>Mandatory<span class="sy0">=</span><span class="re0">$true</span><span class="sy0">,</span><br>                   Position<span class="sy0">=</span><span class="nu0">0</span><span class="br0">)</span><span class="br0">]</span><br>        <span class="br0">[</span>ValidateScript<span class="br0">(</span><span class="br0">{</span><a href="about:blank"><span class="kw6">$_</span></a>.Length <span class="kw4">-eq</span> <span class="nu0">11</span> <span class="kw4">-or</span> <a href="about:blank"><span class="kw6">$_</span></a>.Length <span class="kw4">-eq</span> <span class="nu0">16</span><span class="br0">}</span><span class="br0">)</span><span class="br0">]</span><br>        <span class="br0">[</span>ValidatePattern<span class="br0">(</span><span class="st0">"^\d+$"</span><span class="br0">)</span><span class="br0">]</span><br>        <span class="br0">[</span><span class="re3">string</span><span class="br0">]</span><br>        <span class="re0">$Number</span><br>    <span class="br0">)</span><br>&nbsp;<br>    <span class="re0">$digits</span> <span class="sy0">=</span> <span class="br0">(</span><span class="br0">[</span><span class="re3">Regex</span><span class="br0">]</span>::Matches<span class="br0">(</span><span class="re0">$Number</span><span class="sy0">,</span><span class="st0">'.'</span><span class="sy0">,</span><span class="st0">'RightToLeft'</span><span class="br0">)</span><span class="br0">)</span>.Value<br>&nbsp;<br>    <span class="re0">$digits</span> <span class="sy0">|</span><br>        <span class="kw1">ForEach-Object</span> `<br>               <span class="kw5">-Begin</span>   <span class="br0">{</span><span class="re0">$i</span> <span class="sy0">=</span> <span class="nu0">1</span><span class="br0">}</span> `<br>               <span class="kw5">-Process</span> <span class="br0">{</span><span class="kw3">if</span> <span class="br0">(</span><span class="re0">$i</span><span class="sy0">++</span> <span class="sy0">%</span> <span class="nu0">2</span><span class="br0">)</span> <span class="br0">{</span><a href="about:blank"><span class="kw6">$_</span></a><span class="br0">}</span><span class="br0">}</span> <span class="sy0">|</span><br>        <span class="kw1">ForEach-Object</span> `<br>               <span class="kw5">-Begin</span>   <span class="br0">{</span><span class="re0">$sumOdds</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">}</span> `<br>               <span class="kw5">-Process</span> <span class="br0">{</span><span class="re0">$sumOdds</span> <span class="sy0">+=</span> <span class="br0">[</span><span class="re3">Char</span><span class="br0">]</span>::GetNumericValue<span class="br0">(</span><a href="about:blank"><span class="kw6">$_</span></a><span class="br0">)</span><span class="br0">}</span><br>    <span class="re0">$digits</span> <span class="sy0">|</span><br>        <span class="kw1">ForEach-Object</span> `<br>               <span class="kw5">-Begin</span>   <span class="br0">{</span><span class="re0">$i</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">}</span> `<br>               <span class="kw5">-Process</span> <span class="br0">{</span><span class="kw3">if</span> <span class="br0">(</span><span class="re0">$i</span><span class="sy0">++</span> <span class="sy0">%</span> <span class="nu0">2</span><span class="br0">)</span> <span class="br0">{</span><a href="about:blank"><span class="kw6">$_</span></a><span class="br0">}</span><span class="br0">}</span> <span class="sy0">|</span><br>        <span class="kw1">ForEach-Object</span> `<br>               <span class="kw5">-Process</span> <span class="br0">{</span><span class="br0">[</span><span class="re3">Char</span><span class="br0">]</span>::GetNumericValue<span class="br0">(</span><a href="about:blank"><span class="kw6">$_</span></a><span class="br0">)</span> <span class="sy0">*</span> <span class="nu0">2</span><span class="br0">}</span> <span class="sy0">|</span><br>        <span class="kw1">ForEach-Object</span> `<br>               <span class="kw5">-Begin</span>   <span class="br0">{</span><span class="re0">$sumEvens</span> <span class="sy0">=</span> <span class="nu0">0</span><span class="br0">}</span> `<br>               <span class="kw5">-Process</span> <span class="br0">{</span><br>                            <span class="re0">$_number</span> <span class="sy0">=</span> <a href="about:blank"><span class="kw6">$_</span></a>.ToString<span class="br0">(</span><span class="br0">)</span><br>                            <span class="kw3">if</span> <span class="br0">(</span><span class="re0">$_number</span>.Length <span class="kw4">-eq</span> <span class="nu0">1</span><span class="br0">)</span><br>                            <span class="br0">{</span><br>                                <span class="re0">$sumEvens</span> <span class="sy0">+=</span> <span class="br0">[</span><span class="re3">Char</span><span class="br0">]</span>::GetNumericValue<span class="br0">(</span><span class="re0">$_number</span><span class="br0">)</span><br>                            <span class="br0">}</span><br>                            <span class="kw3">elseif</span> <span class="br0">(</span><span class="re0">$_number</span>.Length <span class="kw4">-eq</span> <span class="nu0">2</span><span class="br0">)</span><br>                            <span class="br0">{</span><br>                                <span class="re0">$sumEvens</span> <span class="sy0">+=</span> <span class="br0">[</span><span class="re3">Char</span><span class="br0">]</span>::GetNumericValue<span class="br0">(</span><span class="re0">$_number</span><span class="br0">[</span><span class="nu0">0</span><span class="br0">]</span><span class="br0">)</span> <span class="sy0">+</span> <span class="br0">[</span><span class="re3">Char</span><span class="br0">]</span>::GetNumericValue<span class="br0">(</span><span class="re0">$_number</span><span class="br0">[</span><span class="nu0">1</span><span class="br0">]</span><span class="br0">)</span><br>                            <span class="br0">}</span><br>                        <span class="br0">}</span><br>&nbsp;<br>    <span class="br0">(</span><span class="re0">$sumOdds</span> <span class="sy0">+</span> <span class="re0">$sumEvens</span><span class="br0">)</span>.ToString<span class="br0">(</span><span class="br0">)</span><span class="br0">[</span><span class="sy0">-</span><span class="nu0">1</span><span class="br0">]</span> <span class="kw4">-eq</span> <span class="st0">"0"</span><br><span class="br0">}</span><br>&nbsp;</pre> 
        <pre class="powershell highlighted_source">&nbsp;<br>Test<span class="sy0">-</span>LuhnNumber <span class="nu0">49927398716</span><br>&nbsp;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>True
</pre> 
        <pre class="powershell highlighted_source">&nbsp;<br><span class="nu0">49927398716</span><span class="sy0">,</span> <span class="nu0">49927398717</span><span class="sy0">,</span> <span class="nu0">1234567812345678</span><span class="sy0">,</span> <span class="nu0">1234567812345670</span> <span class="sy0">|</span> <span class="kw1">ForEach-Object</span> <span class="br0">{</span><br>    <span class="st0">"{0,-17}: {1}"</span> <span class="kw4">-f</span> <a href="about:blank"><span class="kw6">$_</span></a><span class="sy0">,</span><span class="st0">"$(if(Test-LuhnNumber $_) {'Is valid.'} else {'Is not valid.'})"</span><br><span class="br0">}</span><br>&nbsp;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716     &nbsp;: Is valid.
49927398717     &nbsp;: Is not valid.
1234567812345678&nbsp;: Is not valid.
1234567812345670&nbsp;: Is valid.
</pre> 
        <h2><span class="mw-headline" id="PureBasic"><a href="/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=83" title="Edit section: PureBasic">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="purebasic highlighted_source"><span class="kw1">DataSection</span><br>  Sample:<br>  <span class="kw1">Data</span>.s <span class="st0">"49927398716"</span><br>  <span class="kw1">Data</span>.s <span class="st0">"49927398717"</span><br>  <span class="kw1">Data</span>.s <span class="st0">"1234567812345678"</span><br>  <span class="kw1">Data</span>.s <span class="st0">"1234567812345670"</span><br>  <span class="kw1">Data</span>.s <span class="st0">""</span><br><span class="kw1">EndDataSection</span><br>&nbsp;<br><span class="kw1">Procedure</span> isValid<span class="br0">(</span>cardNumber.s<span class="br0">)</span><br>  <span class="kw1">Protected</span> i, length, s1, s2, s2a<br>&nbsp;<br>  cardNumber <span class="sy0">=</span> ReverseString<span class="br0">(</span>cardNumber<span class="br0">)</span><br>  length <span class="sy0">=</span> <span class="kw2">Len</span><span class="br0">(</span>cardNumber<span class="br0">)</span><br>  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">1</span> <span class="kw1">To</span> length <span class="kw1">Step</span> <span class="nu0">2</span><br>    s1 <span class="sy0">+</span> <span class="kw2">Val</span><span class="br0">(</span><span class="kw2">Mid</span><span class="br0">(</span>cardNumber, i, <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="kw1">Next</span> <br>&nbsp;<br>  <span class="kw1">For</span> i <span class="sy0">=</span> <span class="nu0">2</span> <span class="kw1">To</span> length <span class="kw1">Step</span> <span class="nu0">2</span><br>    s2a <span class="sy0">=</span> <span class="kw2">Val</span><span class="br0">(</span><span class="kw2">Mid</span><span class="br0">(</span>cardNumber, i, <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span> <span class="sy0">*</span> <span class="nu0">2</span><br>    <span class="kw1">If</span> s2a <span class="sy0">&lt;</span> <span class="nu0">10</span><br>      s2 <span class="sy0">+</span> s2a<br>    <span class="kw1">Else</span><br>      s2 <span class="sy0">+</span> <span class="nu0">1</span> <span class="sy0">+</span> <span class="kw2">Val</span><span class="br0">(</span><span class="kw2">Right</span><span class="br0">(</span><span class="kw2">Str</span><span class="br0">(</span>s2a<span class="br0">)</span>, <span class="nu0">1</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="kw1">EndIf</span> <br>  <span class="kw1">Next</span> <br>&nbsp;<br>  <span class="kw1">If</span> <span class="kw2">Right</span><span class="br0">(</span><span class="kw2">Str</span><span class="br0">(</span>s1 <span class="sy0">+</span> s2<span class="br0">)</span>, <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">=</span> <span class="st0">"0"</span><br>    <span class="kw1">ProcedureReturn</span> #True<br>  <span class="kw1">Else</span><br>    <span class="kw1">ProcedureReturn</span> #False<br>  <span class="kw1">EndIf</span> <br><span class="kw1">EndProcedure</span><br>&nbsp;<br>&nbsp;<br><span class="kw1">If</span> <span class="kw2">OpenConsole</span><span class="br0">(</span><span class="br0">)</span><br>  <span class="kw1">Define</span> cardNumber.s<br>&nbsp;<br>  <span class="kw1">Restore</span> Sample<br>  <span class="kw1">Repeat</span> <br>    <span class="kw1">Read</span>.s cardNumber<br>    <span class="kw1">If</span> cardNumber <span class="sy0">&lt;&gt;</span> <span class="st0">""</span><br>      <span class="kw2">Print</span><span class="br0">(</span>cardNumber <span class="sy0">+</span> <span class="st0">" is "</span><span class="br0">)</span><br>      <span class="kw1">If</span> isValid<span class="br0">(</span>cardNumber<span class="br0">)</span><br>        <span class="kw2">PrintN</span><span class="br0">(</span><span class="st0">"valid"</span><span class="br0">)</span><br>      <span class="kw1">Else</span><br>        <span class="kw2">PrintN</span><span class="br0">(</span><span class="st0">"not valid"</span><span class="br0">)</span><br>      <span class="kw1">EndIf</span><br>    <span class="kw1">EndIf</span><br>  <span class="kw1">Until</span> cardNumber <span class="sy0">=</span> <span class="st0">""</span><br>&nbsp;<br>  <span class="kw2">Print</span><span class="br0">(</span>#CRLF$ <span class="sy0">+</span> #CRLF$ <span class="sy0">+</span> <span class="st0">"Press ENTER to exit"</span><span class="br0">)</span><br>  <span class="kw2">Input</span><span class="br0">(</span><span class="br0">)</span><br>  <span class="kw2">CloseConsole</span><span class="br0">(</span><span class="br0">)</span><br><span class="kw1">EndIf</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 is valid
49927398717 is not valid
1234567812345678 is not valid
1234567812345670 is valid</pre> 
        <h2><span class="mw-headline" id="Python"><a href="/wiki/Category:Python" title="Category:Python">Python</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=84" title="Edit section: Python">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>The <a rel="nofollow" class="external text" href="http://docs.python.org/py3k/library/functions.html#divmod">divmod</a> in the function below conveniently splits a number into its two digits ready for summing: </p> 
        <pre class="python highlighted_source"><span class="sy0">&gt;&gt;&gt;</span> <span class="kw1">def</span> luhn<span class="br0">(</span>n<span class="br0">)</span>:<br>	r <span class="sy0">=</span> <span class="br0">[</span><span class="kw2">int</span><span class="br0">(</span>ch<span class="br0">)</span> <span class="kw1">for</span> ch <span class="kw1">in</span> <span class="kw2">str</span><span class="br0">(</span>n<span class="br0">)</span><span class="br0">]</span><span class="br0">[</span>::-<span class="nu0">1</span><span class="br0">]</span><br>	<span class="kw1">return</span> <span class="br0">(</span><span class="kw2">sum</span><span class="br0">(</span>r<span class="br0">[</span><span class="nu0">0</span>::<span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span> + <span class="kw2">sum</span><span class="br0">(</span><span class="kw2">sum</span><span class="br0">(</span><span class="kw2">divmod</span><span class="br0">(</span>d*<span class="nu0">2</span><span class="sy0">,</span><span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span> <span class="kw1">for</span> d <span class="kw1">in</span> r<span class="br0">[</span><span class="nu0">1</span>::<span class="nu0">2</span><span class="br0">]</span><span class="br0">)</span><span class="br0">)</span>&nbsp;% <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><br>&nbsp;<br><span class="sy0">&gt;&gt;&gt;</span> <span class="kw1">for</span> n <span class="kw1">in</span> <span class="br0">(</span><span class="nu0">49927398716</span><span class="sy0">,</span> <span class="nu0">49927398717</span><span class="sy0">,</span> <span class="nu0">1234567812345678</span><span class="sy0">,</span> <span class="nu0">1234567812345670</span><span class="br0">)</span>:<br>	<span class="kw1">print</span><span class="br0">(</span>n<span class="sy0">,</span> luhn<span class="br0">(</span>n<span class="br0">)</span><span class="br0">)</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 True
49927398717 False
1234567812345678 False
1234567812345670 True
</pre> 
        <h2><span class="mw-headline" id="R"><a href="/wiki/Category:R" title="Category:R">R</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=85" title="Edit section: R">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="rsplus highlighted_source">luhnTest <span class="sy0">&lt;-</span> <a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/function.html"><span class="kw2">function</span></a><span class="br0">(</span>cc<span class="br0">)</span><span class="br0">{</span><br>  <span class="co1"># Reverse the digits, convert to numeric vector</span><br>  cc2 <span class="sy0">&lt;-</span> <a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/as.numeric.html"><span class="kw2">as.<span class="me1">numeric</span></span></a><span class="br0">(</span><a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/unlist.html"><span class="kw2">unlist</span></a><span class="br0">(</span><a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/strsplit.html"><span class="kw2">strsplit</span></a><span class="br0">(</span><a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/as.character.html"><span class="kw2">as.<span class="me1">character</span></span></a><span class="br0">(</span>cc<span class="br0">)</span>, <span class="st0">""</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">[</span><a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/nchar.html"><span class="kw2">nchar</span></a><span class="br0">(</span>cc<span class="br0">)</span><span class="sy0">:</span><span class="nu0">1</span><span class="br0">]</span><br>&nbsp;<br>  s1 <span class="sy0">&lt;-</span> <span class="nu0">0</span><br>  s2 <span class="sy0">&lt;-</span> <span class="nu0">0</span><br>&nbsp;<br>  <a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/for.html"><span class="kw2">for</span></a> <span class="br0">(</span>index <span class="kw1">in</span> <span class="nu0">1</span><span class="sy0">:</span><a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/length.html"><span class="kw2">length</span></a><span class="br0">(</span>cc2<span class="br0">)</span><span class="br0">)</span><span class="br0">{</span><br>    <a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html"><span class="kw2">if</span></a> <span class="br0">(</span>index <span class="sy0">%%</span> <span class="nu0">2</span> <span class="sy0">==</span> <span class="nu0">1</span><span class="br0">)</span><span class="br0">{</span><br>      s1 <span class="sy0">&lt;-</span> <a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html"><span class="kw2">sum</span></a><span class="br0">(</span>s1, cc2<span class="br0">[</span>index<span class="br0">]</span><span class="br0">)</span><br>    <span class="br0">}</span> <span class="kw1">else</span> <a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/if.html"><span class="kw2">if</span></a> <span class="br0">(</span>cc2<span class="br0">[</span>index<span class="br0">]</span> <span class="sy0">&gt;=</span> <span class="nu0">5</span><span class="br0">)</span><span class="br0">{</span><br>      s2 <span class="sy0">&lt;-</span> <a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html"><span class="kw2">sum</span></a><span class="br0">(</span>s2, <span class="br0">(</span>cc2<span class="br0">[</span>index<span class="br0">]</span><span class="sy0">*</span><span class="nu0">2</span> <span class="sy0">-</span> <span class="nu0">9</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">}</span> <span class="kw1">else</span> <span class="br0">{</span><br>      s2 <span class="sy0">&lt;-</span> <a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/sum.html"><span class="kw2">sum</span></a><span class="br0">(</span>s2, <span class="br0">(</span>cc2<span class="br0">[</span>index<span class="br0">]</span><span class="sy0">*</span><span class="nu0">2</span><span class="br0">)</span><span class="br0">)</span><br>    <span class="br0">}</span><br>  <span class="br0">}</span><br>&nbsp;<br>  <a href="http://stat.ethz.ch/R-manual/R-devel/library/base/html/return.html"><span class="kw2">return</span></a> <span class="br0">(</span><span class="br0">(</span>s1 <span class="sy0">+</span> s2<span class="br0">)</span> <span class="sy0">%%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><span class="br0">)</span><br><span class="br0">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>sapply(c(49927398716, 49927398717, 1234567812345678, 1234567812345670), luhnTest)
[1]  TRUE FALSE FALSE  TRUE</pre> 
        <h2><span class="mw-headline" id="Racket"><a href="/wiki/Category:Racket" title="Category:Racket">Racket</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=86" title="Edit section: Racket">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">&nbsp;<br>#lang racket<br>&nbsp;<br>(define (luhn-test n)<br>  (let loop ([n n] [odd? #t] [s 0])<br>    (if (zero? n)<br>      (zero? (modulo s 10))<br>      (let*-values ([(q r)   (quotient/remainder n 10)]<br>                    [(rq rr) (quotient/remainder (* (if odd? 1 2) r) 10)])<br>        (loop q (not odd?) (+ s rq rr))))))<br>&nbsp;<br>(map luhn-test '(49927398716 49927398717 1234567812345678 1234567812345670))<br>;; -&gt; '(#t #f #f #t)<br>&nbsp;</pre> 
        <h2><span class="mw-headline" id="REXX"><a href="/wiki/Category:REXX" title="Category:REXX">REXX</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=87" title="Edit section: REXX">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <h3><span class="mw-headline" id="version_1">version 1</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=88" title="Edit section: version 1">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
        <pre class="rexx highlighted_source"><span class="coMULTI">/*REXX program  validates  credit card numbers  using  the    Luhn    algorithm.        */</span><br>#<span class="sy0">.</span>=;                #<span class="sy0">.</span>1= <span class="nu0">49927398716</span>             <span class="coMULTI">/*the  1st  sample credit card number. */</span><br>                    #<span class="sy0">.</span>2= <span class="nu0">49927398717</span>             <span class="coMULTI">/* "   2nd     "      "     "     "    */</span><br>                    #<span class="sy0">.</span>3= <span class="nu0">1234567812345678</span>        <span class="coMULTI">/* "   3rd     "      "     "     "    */</span><br>                    #<span class="sy0">.</span>4= <span class="nu0">1234567812345670</span>        <span class="coMULTI">/* "   4th     "      "     "     "    */</span><br>      <span class="kw1">do</span> k=<span class="nu0">1</span>  <span class="kw2">while</span> #<span class="sy0">.</span>k<span class="sy0">\</span>==<span class="st0">''</span>                     <span class="coMULTI">/*validate all the credit card numbers.*/</span><br>      <span class="kw1">say</span> <span class="kw6">right</span><span class="br0">(</span> Luhn<span class="br0">(</span>#<span class="sy0">.</span>k<span class="br0">)</span>, <span class="nu0">9</span><span class="br0">)</span>          <span class="st0">' the Luhn test, credit card number: '</span>         #<span class="sy0">.</span>k<br>      <span class="kw3">end</span>   <span class="coMULTI">/*k*/</span>                                <span class="coMULTI">/* [?] function returns passed?flunked.*/</span><br><span class="kw1">exit</span>                                             <span class="coMULTI">/*stick a fork in it,  we're all done. */</span><br><span class="coMULTI">/*??????????????????????????????????????????????????????????????????????????????????????*/</span><br>Luhn: <span class="kw1">procedure</span>;  <span class="kw1">parse</span> <span class="kw1">arg</span> x;              $=<span class="nu0">0</span>  <span class="coMULTI">/*get credit card number;  zero $ sum. */</span><br>      y=<span class="kw6">reverse</span><span class="br0">(</span><span class="kw6">left</span><span class="br0">(</span><span class="nu0">0</span>, <span class="kw6">length</span><span class="br0">(</span>x<span class="br0">)</span> <span class="sy0">//</span> <span class="nu0">2</span><span class="br0">)</span>x<span class="br0">)</span>        <span class="coMULTI">/*add leading zero if needed, reverse. */</span><br>               <span class="kw1">do</span> j=<span class="nu0">1</span>  <span class="kw2">to</span> <span class="kw6">length</span><span class="br0">(</span>y<span class="br0">)</span>-<span class="nu0">1</span>  <span class="kw2">by</span> <span class="nu0">2</span>;            _=<span class="kw6">substr</span><span class="br0">(</span>y,j+<span class="nu0">1</span>,<span class="nu0">1</span><span class="br0">)</span> <span class="sy0">*</span> <span class="nu0">2</span><br>               $=$ + <span class="kw6">substr</span><span class="br0">(</span>y,j,<span class="nu0">1</span><span class="br0">)</span> + <span class="kw6">left</span><span class="br0">(</span>_,<span class="nu0">1</span><span class="br0">)</span> + <span class="kw6">substr</span><span class="br0">(</span>_,<span class="nu0">2</span>,<span class="nu0">1</span>,<span class="nu0">0</span><span class="br0">)</span>      <span class="coMULTI">/* ?????????????? */</span><br>               <span class="kw3">end</span>   <span class="coMULTI">/*j*/</span>                       <span class="coMULTI">/*sum odd and even decimal digits ???? */</span><br>      <span class="kw1">return</span> <span class="kw6">word</span><span class="br0">(</span><span class="st0">'passed flunked'</span>,<span class="nu0">1</span>+<span class="br0">(</span>$<span class="sy0">//</span><span class="nu0">10</span>==<span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span> <span class="coMULTI">/*$ ending in zero?  Then the # passed.*/</span></pre> 
        <div> 
         <dl>
          <dt>
           output 
           <span style="font-weight:normal">&nbsp; when using the (internal) default inputs:</span>
          </dt>
         </dl>
        </div> 
        <pre>  flunked  the Luhn test, credit card number:  49927398716
   passed  the Luhn test, credit card number:  49927398717
   passed  the Luhn test, credit card number:  1234567812345678
  flunked  the Luhn test, credit card number:  1234567812345670
</pre> 
        <h3><span class="mw-headline" id="Version_2">Version 2</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=89" title="Edit section: Version 2">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
        <pre class="rexx highlighted_source"><span class="coMULTI">/* Rexx ***************************************************<br>* 09.04.2013 Walter Pachl<br>* Implements the task's description in a rather concise way<br>* Instead of reverting the ccn work it backwards<br>**********************************************************/</span><br><span class="kw1">numeric</span> <span class="kw2">digits</span> <span class="nu0">20</span><br>&nbsp;<br><span class="kw1">push</span> <span class="nu0">49927398716</span><br><span class="kw1">push</span> <span class="nu0">49927398717</span><br><span class="kw1">push</span> <span class="nu0">1234567812345678</span><br><span class="kw1">push</span> <span class="nu0">1234567812345670</span><br>&nbsp;<br><span class="kw1">do</span> <span class="kw2">while</span> <span class="kw6">queued</span><span class="br0">(</span><span class="br0">)</span> <span class="sy0">&gt;</span> <span class="nu0">0</span><br>  <span class="kw1">parse</span> <span class="kw1">pull</span> ccnum<br>  <span class="kw1">if</span> luhn<span class="br0">(</span>ccnum<span class="br0">)</span> <span class="kw3">then</span> ln = <span class="st0">'passed'</span><br>  <span class="kw3">else</span>                ln = <span class="st0">'failed'</span><br>  <span class="kw1">say</span> <span class="kw6">right</span><span class="br0">(</span>ccnum, <span class="nu0">20</span><span class="br0">)</span> ln<br>  <span class="kw3">end</span><br><span class="kw1">return</span><br><span class="kw1">exit</span><br>&nbsp;<br>luhn:<br><span class="kw1">Parse</span> <span class="kw1">Arg</span> ccn                <span class="coMULTI">/* credit card number       */</span><br>sum=<span class="nu0">0</span>                        <span class="coMULTI">/* initialize test sum      */</span><br>even=<span class="nu0">0</span>                       <span class="coMULTI">/* even indicator           */</span><br><span class="kw1">Do</span> i=<span class="kw6">length</span><span class="br0">(</span>ccn<span class="br0">)</span> <span class="kw2">To</span> <span class="nu0">1</span> <span class="kw2">By</span> -<span class="nu0">1</span>  <span class="coMULTI">/* process all digits       */</span><br>  c=<span class="kw6">substr</span><span class="br0">(</span>ccn,i,<span class="nu0">1</span><span class="br0">)</span>          <span class="coMULTI">/* pick one digit at a time */</span><br>  <span class="kw1">If</span> even <span class="kw3">Then</span> <span class="kw1">Do</span>            <span class="coMULTI">/* even numbered digit      */</span><br>    c=c<span class="sy0">*</span><span class="nu0">2</span>                    <span class="coMULTI">/* double it                */</span><br>    <span class="kw1">If</span> c<span class="sy0">&gt;</span>=<span class="nu0">10</span> <span class="kw3">Then</span>            <span class="coMULTI">/* 10, 12, 14, 16, 18       */</span><br>      c=c-<span class="nu0">9</span>                  <span class="coMULTI">/* Sum of the two digits    */</span><br>    <span class="kw3">End</span>                      <span class="coMULTI">/* end of even numbered     */</span><br>  even=<span class="sy0">\</span>even                 <span class="coMULTI">/* flip even indicator      */</span><br>  sum=sum+c                  <span class="coMULTI">/* add into test sum        */</span><br>  <span class="kw3">End</span><br><span class="kw1">Return</span> <span class="kw6">right</span><span class="br0">(</span>sum,<span class="nu0">1</span><span class="br0">)</span>=<span class="nu0">0</span>        <span class="coMULTI">/* ok if last digit is 0    */</span> </pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>    1234567812345670 passed
    1234567812345678 failed
         49927398717 failed
         49927398716 passed
</pre> 
        <h2><span class="mw-headline" id="Ring"><a href="/wiki/Category:Ring" title="Category:Ring">Ring</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=90" title="Edit section: Ring">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">&nbsp;<br>cardnumber = [49927398716, 49927398717]<br>decimals(0) <br>&nbsp;<br>for cards = 1 to len(cardnumber)<br>    if luhn(cardnumber[cards]) <br>       see "card number " + cardnumber[cards] + " is valid" + nl<br>    else see "card number " + cardnumber[cards] + " is invalid" + nl ok<br>next          <br>&nbsp;<br>func luhn card<br>     s = 0<br>     ln = len(string(card))<br>     for i = 1 to ln<br>         n = number(substr(string(card), ln-i+1, 1))  <br>         if (i &amp; 1) s += n + nl<br>         else n *= 2<br>         s += (n&nbsp;% 10) + floor(n/ 10) ok<br>     next   <br>     return (s&nbsp;% 10) = 0<br>&nbsp;</pre> 
        <p>Output: </p> 
        <pre>card number 49927398716 is valid
card number 49927398717 is invalid
</pre> 
        <h2><span class="mw-headline" id="Ruby"><a href="/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=91" title="Edit section: Ruby">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="ruby highlighted_source"><span class="kw1">def</span> luhn<span class="br0">(</span>code<span class="br0">)</span><br>  csum = <span class="nu0">0</span><br>  code.<span class="me1">digits</span>.<span class="me1">each_slice</span><span class="br0">(</span><span class="nu0">2</span><span class="br0">)</span> <span class="kw1">do</span> <span class="sy0">|</span>odd, even<span class="sy0">|</span> <br>    double = even.<span class="me1">to_i</span> <span class="sy0">*</span> <span class="nu0">2</span><br>    double <span class="sy0">-</span>= <span class="nu0">9</span> <span class="kw1">if</span> double <span class="sy0">&gt;</span> <span class="nu0">9</span><br>    csum <span class="sy0">+</span>= double <span class="sy0">+</span> odd<br>  <span class="kw1">end</span><br>  csum <span class="sy0">%</span> <span class="nu0">10</span> == <span class="nu0">0</span><br><span class="kw1">end</span><br>&nbsp;<br><span class="br0">[</span><span class="nu0">49927398716</span>, <span class="nu0">49927398717</span>, <span class="nu0">1234567812345678</span>, <span class="nu0">1234567812345670</span><span class="br0">]</span>.<span class="me1">each</span> <span class="kw1">do</span> <span class="sy0">|</span>n<span class="sy0">|</span><br>  <span class="kw3">p</span> <span class="br0">[</span>n, luhn<span class="br0">(</span>n<span class="br0">)</span><span class="br0">]</span><br><span class="kw1">end</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>[49927398716, true]
[49927398717, false]
[1234567812345678, false]
[1234567812345670, true]</pre> 
        <h2><span class="mw-headline" id="Run_BASIC"><a href="/wiki/Category:Run_BASIC" title="Category:Run BASIC">Run BASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=92" title="Edit section: Run BASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">card$(1) = "49927398716"<br>card$(2) = "49927398717"<br>card$(3) = "1234567812345678"<br>card$(4) = "1234567812345670"<br>&nbsp;<br>for i = 1 to 4<br>print card$(i);" ";luhn$(card$(i))<br>next i<br>&nbsp;<br>FUNCTION luhn$(card$)<br>    lc      = len(card$)<br>    for i   = lc to 1 step -1<br>      digit = val(mid$(card$,i,1))<br>      if ((lc -i) mod 2) = 0 then chkSum = chkSum + digit else chkSum = chkSum + int(digit * 2.2)<br>    next i<br>    if chkSum mod 10 = 0 then luhn$ = "True" else luhn$ = "False"<br>end function</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 True
49927398717 False
1234567812345678 False
1234567812345670 True</pre> 
        <h2><span class="mw-headline" id="Rust"><a href="/wiki/Category:Rust" title="Category:Rust">Rust</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=93" title="Edit section: Rust">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">fn get_digits(mut num: u64) -&gt; Vec&lt;u64&gt; {<br>    let mut digits = vec![];<br>    while num&nbsp;!= 0 {<br>        digits.push(num&nbsp;% 10);<br>        num /= 10;<br>    }<br>    digits<br>}<br>&nbsp;<br>fn digit_sum(num: u64) -&gt; u64 {<br>    get_digits(num).into_iter().fold(0,|sum, dig| sum + dig)<br>}<br>&nbsp;<br>fn luhn_test(n: u64) -&gt; bool {<br>    let mut sum = 0;<br>    for (i,digit) in get_digits(n).into_iter().enumerate() {<br>        sum += match i&nbsp;% 2 == 0 {<br>            true =&gt; digit,<br>            false =&gt; digit_sum(2*digit),<br>        }<br>    }<br>    sum&nbsp;% 10 == 0<br>}<br>&nbsp;<br>fn main() {<br>    let nums = [49927398716, 49927398717, 1234567812345678, 1234567812345670];<br>    for &amp;n in &amp;nums {<br>        match luhn_test(n) {<br>            true  =&gt; println!("{} passes.", n),<br>            false =&gt; println!("{} fails.", n),<br>        }<br>    }<br>}</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 passes.
49927398717 fails.
1234567812345678 fails.
1234567812345670 passes.</pre> 
        <h2><span class="mw-headline" id="Scala"><a href="/wiki/Category:Scala" title="Category:Scala">Scala</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=94" title="Edit section: Scala">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta libheader">
         <b>Library:</b> 
         <a href="/wiki/Category:Scala" title="Category:Scala">Scala</a>
        </div> 
        <h3><span class="mw-headline" id="Functional_style_.28Recommended.29">Functional style (Recommended)</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=95" title="Edit section: Functional style (Recommended)">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
        <pre class="scala highlighted_source"><a href="http://scala-lang.org"><span class="kw1">object</span></a> LuhnTest <a href="http://scala-lang.org"><span class="kw1">extends</span></a> App <span class="br0">{</span><br>&nbsp;<br>  <a href="http://scala-lang.org"><span class="kw1">object</span></a> Luhn <span class="br0">{</span><br>&nbsp;<br>    <span class="co1">// pre calculate even digits</span><br>    <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">val</span></a> evenDigits <span class="sy0">=</span> Vector<span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">2</span>, <span class="nu0">4</span>, <span class="nu0">6</span>, <span class="nu0">8</span>, <span class="nu0">1</span>, <span class="nu0">3</span>, <span class="nu0">5</span>, <span class="nu0">7</span>, <span class="nu0">9</span><span class="br0">)</span><br>&nbsp;<br>    <a href="http://scala-lang.org"><span class="kw1">private</span></a> <a href="http://scala-lang.org"><span class="kw1">def</span></a> compute<span class="br0">(</span>number<span class="sy0">:</span> String<span class="br0">)</span><span class="sy0">:</span> Int <span class="sy0">=</span> <span class="br0">{</span><br>      number.<span class="me1">foreach</span><span class="br0">(</span>d <span class="sy0">=&gt;</span> require<span class="br0">(</span>d <span class="sy0">&gt;=</span> <span class="st0">'0'</span> <span class="sy0">&amp;&amp;</span> d <span class="sy0">&lt;=</span> <span class="st0">'9'</span>, <span class="st0">"must be a number"</span><span class="br0">)</span><span class="br0">)</span><br>&nbsp;<br>      <span class="co1">// we don't need to process the number in reverse because we determine if the digit is in a even position or not</span><br>      number.<span class="me1">foldLeft</span><span class="br0">(</span><span class="br0">(</span>number.<span class="me1">length</span> <span class="sy0">&amp;</span> <span class="nu0">1</span><span class="br0">)</span> <span class="sy0">==</span> <span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">)</span> <span class="br0">{</span> <span class="br0">(</span>sum, d<span class="br0">)</span> <span class="sy0">=&gt;</span><br>        <a href="http://scala-lang.org"><span class="kw1">if</span></a> <span class="br0">(</span>sum.<span class="sy0">_</span>1<span class="br0">)</span> <span class="br0">(</span><span class="sy0">!</span>sum.<span class="sy0">_</span>1, sum.<span class="sy0">_</span>2 + evenDigits<span class="br0">(</span>d - <span class="st0">'0'</span><span class="br0">)</span><span class="br0">)</span><br>        <a href="http://scala-lang.org"><span class="kw1">else</span></a> <span class="br0">(</span><span class="sy0">!</span>sum.<span class="sy0">_</span>1, sum.<span class="sy0">_</span>2 + d - <span class="st0">'0'</span><span class="br0">)</span><br>      <span class="br0">}</span>.<span class="sy0">_</span>2<br>    <span class="br0">}</span><br>&nbsp;<br>    <span class="co1">// Validate a number using Luhn checksum</span><br>    <a href="http://scala-lang.org"><span class="kw1">def</span></a> validate<span class="br0">(</span>number<span class="sy0">:</span> String<span class="br0">)</span><span class="sy0">:</span> Boolean <span class="sy0">=</span> compute<span class="br0">(</span>number<span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><br>&nbsp;<br>    <span class="co1">// Compute check digit using Luhn (not used for this task)</span><br>    <a href="http://scala-lang.org"><span class="kw1">def</span></a> computeCheckDigit<span class="br0">(</span>number<span class="sy0">:</span> String<span class="br0">)</span><span class="sy0">:</span> Int <span class="sy0">=</span> <span class="br0">{</span><br>      compute<span class="br0">(</span>number + <span class="st0">'0'</span><span class="br0">)</span> <span class="sy0">%</span> <span class="nu0">10</span> <a href="http://scala-lang.org"><span class="kw1">match</span></a> <span class="br0">{</span><br>        <a href="http://scala-lang.org"><span class="kw1">case</span></a> <span class="nu0">0</span> <span class="sy0">=&gt;</span> <span class="nu0">0</span><br>        <a href="http://scala-lang.org"><span class="kw1">case</span></a> x <span class="sy0">=&gt;</span> <span class="nu0">10</span> - x<br>      <span class="br0">}</span><br>    <span class="br0">}</span><br>  <span class="br0">}</span><br>&nbsp;<br>  <a href="http://scala-lang.org"><span class="kw1">val</span></a> numbers <span class="sy0">=</span> Seq<span class="br0">(</span><span class="st0">"49927398716"</span>, <span class="st0">"49927398717"</span>, <span class="st0">"1234567812345678"</span>, <span class="st0">"1234567812345670"</span><span class="br0">)</span><br>&nbsp;<br>  numbers.<span class="me1">foreach</span> <span class="br0">{</span> n <span class="sy0">=&gt;</span><br>    println<span class="br0">(</span>s<span class="st0">"$n ${Luhn.validate(n)}"</span><span class="br0">)</span><br>  <span class="br0">}</span><br><span class="br0">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 true
49927398717 false
1234567812345678 false
1234567812345670 true
</pre> 
        <h3><span class="mw-headline" id="Imperative_style">Imperative style</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=96" title="Edit section: Imperative style">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
        <pre class="scala highlighted_source">  <a href="http://scala-lang.org"><span class="kw1">def</span></a> luhnTest1<span class="br0">(</span>number<span class="sy0">:</span> String<span class="br0">)</span><span class="sy0">:</span> Boolean <span class="sy0">=</span> <span class="br0">{</span><br>    <a href="http://scala-lang.org"><span class="kw1">var</span></a> <span class="br0">(</span>odd, sum<span class="br0">)</span> <span class="sy0">=</span> <span class="br0">(</span><a href="http://scala-lang.org"><span class="kw1">true</span></a>, <span class="nu0">0</span><span class="br0">)</span><br>&nbsp;<br>    <a href="http://scala-lang.org"><span class="kw1">for</span></a> <span class="br0">(</span><span class="kw2">int</span> <span class="sy0">&lt;</span>- number.<span class="me1">reverse</span>.<span class="me1">map</span> <span class="br0">{</span> <span class="sy0">_</span>.<span class="me1">toString</span>.<span class="me1">toShort</span> <span class="br0">}</span><span class="br0">)</span> <span class="br0">{</span><br>      <a href="http://scala-lang.org"><span class="kw1">if</span></a> <span class="br0">(</span>odd<span class="br0">)</span> sum +<span class="sy0">=</span> <span class="kw2">int</span><br>      <a href="http://scala-lang.org"><span class="kw1">else</span></a> sum +<span class="sy0">=</span> <span class="br0">(</span><span class="kw2">int</span> <span class="sy0">*</span> <span class="nu0">2</span> <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span> + <span class="br0">(</span><span class="kw2">int</span> / <span class="nu0">5</span><span class="br0">)</span><br>      odd <span class="sy0">=</span> <span class="sy0">!</span>odd<br>    <span class="br0">}</span><br>    sum <span class="sy0">%</span> <span class="nu0">10</span> <span class="sy0">==</span> <span class="nu0">0</span><br>  <span class="br0">}</span></pre> 
        <h2><span class="mw-headline" id="Scheme"><a href="/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=97" title="Edit section: Scheme">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="scheme highlighted_source"><span class="br0">(</span><span class="kw1">define</span> luhn<br>  <span class="br0">(</span><span class="kw1">lambda</span> <span class="br0">(</span>n<span class="br0">)</span><br>    <span class="br0">(</span><span class="kw1">let</span> loop <span class="br0">(</span><span class="br0">(</span>number n<span class="br0">)</span><br>               <span class="br0">(</span>index <span class="nu0">0</span><span class="br0">)</span><br>               <span class="br0">(</span>result <span class="nu0">0</span><span class="br0">)</span><span class="br0">)</span><br>      <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="sy0">=</span> <span class="nu0">0</span> number<span class="br0">)</span><br>          <span class="br0">(</span><span class="sy0">=</span> <span class="nu0">0</span> <span class="br0">(</span><span class="kw1">remainder</span> result <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><br>          <span class="br0">(</span>loop <span class="br0">(</span><span class="kw1">quotient</span> number <span class="nu0">10</span><span class="br0">)</span><br>                <span class="br0">(</span><span class="sy0">+</span> index <span class="nu0">1</span><span class="br0">)</span><br>                <span class="br0">(</span><span class="sy0">+</span> result<br>                   <span class="br0">(</span><span class="kw1">if</span> <span class="br0">(</span><span class="kw1">even?</span> index<span class="br0">)</span><br>                       <span class="br0">(</span><span class="kw1">remainder</span> number <span class="nu0">10</span><span class="br0">)</span><br>                       <span class="br0">(</span><span class="kw1">let</span> <span class="br0">(</span><span class="br0">(</span>part <span class="br0">(</span><span class="sy0">*</span> <span class="nu0">2</span> <span class="br0">(</span><span class="kw1">remainder</span> number <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><br>                         <span class="br0">(</span><span class="sy0">+</span> <span class="br0">(</span><span class="kw1">remainder</span> part <span class="nu0">10</span><span class="br0">)</span> <span class="br0">(</span><span class="kw1">quotient</span> part <span class="nu0">10</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span><span class="br0">)</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>(map luhn '(49927398716 49927398717 1234567812345678 1234567812345670))
(#t #f #f #t)
</pre> 
        <h2><span class="mw-headline" id="sed"><a href="/wiki/Category:Sed" title="Category:Sed">sed</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=98" title="Edit section: sed">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source"># Split number into double evens and odds<br>s/.*/&amp;: /<br>: split<br>s/\([0-4]\)\([0-9]\):\(.*\) /:\1\1\3 \2/<br>s/\([5-9]\)\([0-9]\):\(.*\) /:1\1\1\3 \2/<br>t split<br>&nbsp;<br># Set up addition lookup table<br>s/\([0-9]\)*:\(.*\) \(.*\)/\1\2\3:0123456789012345678/<br>&nbsp;<br>: add<br>s/\([0-9]\)0:/\1:/<br>s/\([0-9]\)1:\(.*\1.\{0\}\([0-9]\).*\)/\3:\2/<br>s/\([0-9]\)2:\(.*\1.\{1\}\([0-9]\).*\)/\3:\2/<br>s/\([0-9]\)3:\(.*\1.\{2\}\([0-9]\).*\)/\3:\2/<br>s/\([0-9]\)4:\(.*\1.\{3\}\([0-9]\).*\)/\3:\2/<br>s/\([0-9]\)5:\(.*\1.\{4\}\([0-9]\).*\)/\3:\2/<br>s/\([0-9]\)6:\(.*\1.\{5\}\([0-9]\).*\)/\3:\2/<br>s/\([0-9]\)7:\(.*\1.\{6\}\([0-9]\).*\)/\3:\2/<br>s/\([0-9]\)8:\(.*\1.\{7\}\([0-9]\).*\)/\3:\2/<br>s/\([0-9]\)9:\(.*\1.\{8\}\([0-9]\).*\)/\3:\2/<br>t add<br>&nbsp;<br>/0:/a\<br>Pass<br>/0:/!a\<br>Fail<br>d</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>$ sed -f luhn.sed &lt;&lt;!
49927398716
49927398717
1234567812345678
1234567812345670
!
Pass
Fail
Fail
Pass
</pre> 
        <h2><span class="mw-headline" id="Seed7"><a href="/wiki/Category:Seed7" title="Category:Seed7">Seed7</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=99" title="Edit section: Seed7">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">$ include "seed7_05.s7i";<br>&nbsp;<br>const func boolean: luhnTest (in string: cardNumber) is func<br>  result<br>    var boolean: luhnTest is FALSE;<br>  local<br>    var integer: index is 0;<br>    var integer: digit is 0;<br>    var boolean: isOdd is TRUE;<br>    var integer: oddSum is 0;<br>    var integer: evenSum is 0;<br>  begin<br>    for index range length(cardNumber) downto 1 do<br>      digit&nbsp;:= integer parse str(cardNumber[index]);<br>      if isOdd then<br>        oddSum +:= digit;<br>      else<br>        evenSum +:= digit div 5 + (2 * digit) rem 10;<br>      end if;<br>      isOdd&nbsp;:= not isOdd;<br>    end for;<br>    luhnTest&nbsp;:= (oddSum + evenSum) rem 10 = 0;<br>  end func;<br>&nbsp;<br>const proc: main is func<br>  local<br>    var string: cardNumber is "";<br>  begin<br>    for cardNumber range [] ("49927398716", "49927398717", "1234567812345678", "1234567812345670") do<br>      writeln(cardNumber &lt;&amp; ": " &lt;&amp; luhnTest(cardNumber));<br>    end for;<br>  end func;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716: TRUE
49927398717: FALSE
1234567812345678: FALSE
1234567812345670: TRUE
</pre> 
        <h2><span class="mw-headline" id="SequenceL"><a href="/wiki/Category:SequenceL" title="Category:SequenceL">SequenceL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=100" title="Edit section: SequenceL">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">&nbsp;<br>main(args(2))&nbsp;:=<br>	sum(luhnTest(asciiToInt(args[1]) - asciiToInt('0'))) mod 10 = 0;<br>&nbsp;<br>s2Mapping&nbsp;:= [0,2,4,6,8,1,3,5,7,9];<br>&nbsp;<br>luhnTest(x(1))[i]&nbsp;:=<br>	x[i] when i mod 2 = size(x) mod 2 else<br>	s2Mapping[x[i] + 1];<br>&nbsp;</pre> 
        <h2><span class="mw-headline" id="Sidef"><a href="/wiki/Category:Sidef" title="Category:Sidef">Sidef</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=101" title="Edit section: Sidef">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="ruby highlighted_source">func luhn <span class="br0">(</span>n<span class="br0">)</span> <span class="br0">{</span><br>    var chars = n.<span class="me1">digits</span>.<span class="me1">reverse</span><br>    var <span class="br0">(</span>i, sum<span class="br0">)</span> = <span class="br0">(</span><span class="nu0">0</span>, <span class="nu0">0</span><span class="br0">)</span><br>    static a = <span class="br0">{</span><span class="sy0">|</span>j<span class="sy0">|</span> <span class="br0">(</span><span class="nu0">2</span><span class="sy0">*</span>j <span class="sy0">//</span> <span class="nu0">10</span><span class="br0">)</span> <span class="sy0">+</span> <span class="br0">(</span><span class="nu0">2</span><span class="sy0">*</span>j <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span> <span class="br0">}</span>.<span class="me1">map</span><span class="br0">(</span>^<span class="nu0">10</span><span class="br0">)</span><br>    <span class="kw1">for</span> j <span class="kw1">in</span> <span class="br0">(</span>chars<span class="br0">)</span> <span class="br0">{</span><br>        sum <span class="sy0">+</span>= <span class="br0">(</span>i<span class="sy0">++</span>.<span class="me1">is_odd</span>&nbsp;? a<span class="br0">[</span>j<span class="br0">]</span>&nbsp;: j<span class="br0">)</span><br>    <span class="br0">}</span><br>    <span class="kw2">return</span> <span class="br0">(</span>sum <span class="sy0">%</span> <span class="nu0">10</span> == <span class="nu0">0</span><span class="br0">)</span><br><span class="br0">}</span><br>&nbsp;<br><span class="co1"># Test and display</span><br><span class="kw1">for</span> n <span class="kw1">in</span> <span class="br0">[</span><span class="nu0">49927398716</span>, <span class="nu0">49927398717</span>, <span class="nu0">1234567812345678</span>, <span class="nu0">1234567812345670</span><span class="br0">]</span> <span class="br0">{</span><br>    say <span class="br0">[</span>n, luhn<span class="br0">(</span>n<span class="br0">)</span><span class="br0">]</span><br><span class="br0">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>[49927398716, true]
[49927398717, false]
[1234567812345678, false]
[1234567812345670, true]</pre> 
        <h2><span class="mw-headline" id="SNOBOL4"><a href="/wiki/Category:SNOBOL4" title="Category:SNOBOL4">SNOBOL4</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=102" title="Edit section: SNOBOL4">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>Using a precomputed array. </p> 
        <pre class="text highlighted_source">        define('luhn(n)a,d,i,j,sum')&nbsp;:(luhn_end)<br>luhn    n = reverse(n); a = array('0:9')<br>ln1     a&lt;i&gt; = (2 * i / 10) + remdr(2 * i,10)<br>        i = lt(i,9) i + 1&nbsp;:s(ln1)<br>ln2     n len(1) . d =&nbsp;:f(ln3)<br>        d = ne(remdr(j,2),0) a&lt;d&gt;; j = j + 1<br>        sum = sum + d&nbsp;:(ln2)<br>ln3     luhn = 0; luhn = eq(remdr(sum,10),0) 1&nbsp;:(return)<br>luhn_end<br>&nbsp;<br>*       # Test and display<br>        test = " output = luhn(n) ': ' n"<br>        n = '49927398716'; eval(test)<br>        n = '49927398717'; eval(test)<br>        n = '1234567812345678'; eval(test)<br>        n = '1234567812345670'; eval(test)<br>end</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>1: 49927398716
0: 49927398717
0: 1234567812345678
1: 1234567812345670</pre> 
        <h2><span class="mw-headline" id="SPARK"><a href="/wiki/Category:SPARK" title="Category:SPARK">SPARK</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=103" title="Edit section: SPARK">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>Works with SPARK GPL 2010 and GPS GPL 2010. </p>
        <p>Based on the Ada version. All code shown to be free of run-time type errors. </p>
        <p>A final test has been added which passes as valid unless there is an explicit test for all digits. </p> 
        <pre class="ada highlighted_source"><span class="kw3">with</span> Spark_IO;<br><span class="co1">--# inherit Spark_IO;</span><br><span class="co1">--# main_program;</span><br><span class="kw3">procedure</span> Luhn<br><span class="co1">--# global in out Spark_IO.Outputs;</span><br><span class="co1">--# derives Spark_IO.Outputs from *;</span><br><span class="kw1">is</span><br>&nbsp;<br>   <span class="kw3">function</span> Luhn_Test <span class="br0">(</span>Num&nbsp;: String<span class="br0">)</span> <span class="kw1">return</span> Boolean<br>   <span class="co1">--# pre  Num'Last &lt;= 20;</span><br>   <span class="kw1">is</span><br>      Sum&nbsp;: Integer&nbsp;:= <span class="nu0">0</span>;<br>      Od &nbsp;: Boolean&nbsp;:= True;<br>      Int&nbsp;: Integer;<br>      X  &nbsp;: Integer;<br>      OK &nbsp;: Boolean&nbsp;:= True;<br>   <span class="kw1">begin</span><br>      <span class="kw1">for</span> P <span class="kw3">in</span> <span class="kw3">reverse</span> Integer <span class="kw3">range</span> Num'<span class="kw3">Range</span> <span class="kw1">loop</span><br>         Int&nbsp;:= Character'Pos<span class="br0">(</span>Num<span class="br0">(</span>P<span class="br0">)</span><span class="br0">)</span> - Character'Pos<span class="br0">(</span>'<span class="nu0">0</span>'<span class="br0">)</span>;<br>         <span class="kw1">if</span> Int <span class="kw2">not</span> <span class="kw3">in</span> <span class="nu0">0</span> .. <span class="nu0">9</span> <span class="kw1">then</span><br>            OK&nbsp;:= False;<br>            <span class="kw3">exit</span>;<br>         <span class="kw1">end</span> <span class="kw1">if</span>;<br>         X&nbsp;:= <span class="br0">(</span><span class="br0">(</span><span class="br0">(</span>Int*<span class="nu0">2</span><span class="br0">)</span> <span class="kw2">mod</span> <span class="nu0">10</span><span class="br0">)</span> + <span class="br0">(</span>Int / <span class="nu0">5</span><span class="br0">)</span><span class="br0">)</span>;<br>         <span class="co1">--# assert Num'Last - P in 0 .. 19</span><br>         <span class="co1">--#   and  Sum in 0 .. (Num'Last - P) * 10</span><br>         <span class="co1">--#   and  Int in 0 .. 9</span><br>         <span class="co1">--#   and  X   in 0 .. 10;</span><br>         <span class="kw1">if</span> Od <span class="kw1">then</span><br>            Sum&nbsp;:= Sum + Int;<br>         <span class="kw1">else</span><br>            Sum&nbsp;:= Sum + X;<br>         <span class="kw1">end</span> <span class="kw1">if</span>;<br>         Od&nbsp;:= <span class="kw2">not</span> Od;<br>      <span class="kw1">end</span> <span class="kw1">loop</span>;<br>      <span class="kw1">return</span> OK <span class="kw2">and</span> <span class="br0">(</span>Sum <span class="kw2">mod</span> <span class="nu0">10</span><span class="br0">)</span> = <span class="nu0">0</span>;<br>   <span class="kw1">end</span> Luhn_Test;<br>&nbsp;<br>   <span class="kw3">procedure</span> Do_Test <span class="br0">(</span>Num&nbsp;: <span class="kw3">in</span>     String<span class="br0">)</span><br>   <span class="co1">--# global in out Spark_IO.Outputs;</span><br>   <span class="co1">--# derives Spark_IO.Outputs from *, Num;</span><br>   <span class="co1">--# pre  Num'Last &lt;= 20;</span><br>   <span class="kw1">is</span><br>   <span class="kw1">begin</span><br>      Spark_IO.<span class="me1">Put_String</span><span class="br0">(</span>Spark_IO.<span class="me1">Standard_Output</span>, Num, <span class="nu0">16</span><span class="br0">)</span>;<br>      <span class="kw1">if</span> Luhn_Test<span class="br0">(</span>Num<span class="br0">)</span> <span class="kw1">then</span><br>         Spark_IO.<span class="me1">Put_String</span><span class="br0">(</span>Spark_IO.<span class="me1">Standard_Output</span>, <span class="st0">" is valid."</span>, <span class="nu0">0</span><span class="br0">)</span>;<br>      <span class="kw1">else</span><br>         Spark_IO.<span class="me1">Put_String</span><span class="br0">(</span>Spark_IO.<span class="me1">Standard_Output</span>, <span class="st0">" is not valid."</span>, <span class="nu0">0</span><span class="br0">)</span>;<br>      <span class="kw1">end</span> <span class="kw1">if</span>;<br>      Spark_IO.<span class="me1">New_Line</span><span class="br0">(</span>Spark_IO.<span class="me1">Standard_Output</span>, <span class="nu0">1</span><span class="br0">)</span>;<br>   <span class="kw1">end</span> Do_Test;<br>&nbsp;<br><span class="kw1">begin</span><br>   Do_Test<span class="br0">(</span><span class="st0">"49927398716"</span><span class="br0">)</span>;<br>   Do_Test<span class="br0">(</span><span class="st0">"49927398717"</span><span class="br0">)</span>;<br>   Do_Test<span class="br0">(</span><span class="st0">"1234567812345678"</span><span class="br0">)</span>;<br>   Do_Test<span class="br0">(</span><span class="st0">"1234567812345670"</span><span class="br0">)</span>;<br>   Do_Test<span class="br0">(</span><span class="st0">"123456781234567D"</span><span class="br0">)</span>;<br><span class="kw1">end</span> Luhn;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716      is valid.
49927398717      is not valid.
1234567812345678 is not valid.
1234567812345670 is valid.
123456781234567D is not valid.</pre> 
        <h2><span class="mw-headline" id="Standard_ML"><a href="/wiki/Category:Standard_ML" title="Category:Standard ML">Standard ML</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=104" title="Edit section: Standard ML">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">local<br>  fun revDigits 0 = []<br>    | revDigits n = (n mod 10)&nbsp;:: revDigits (n div 10)<br>&nbsp;<br>  fun digitSum n = if n &gt; 9 then digitSum (n div 10 + n mod 10)<br>                            else n<br>&nbsp;<br>  fun luhn_sum []  = 0<br>    | luhn_sum [d] = d<br>    | luhn_sum (d::d'::ds) = d + digitSum (2*d') + luhn_sum ds<br>in<br>  fun luhn_test n = luhn_sum (revDigits n) mod 10 = 0<br>&nbsp;<br>  val res = map luhn_test [49927398716, 49927398717, 1234567812345678, 1234567812345670];<br>end;<br>&nbsp;<br>(*<br>[opening file "luhn.sml"]<br>&gt; val luhn_test = fn&nbsp;: int -&gt; bool<br>  val res = [true, false, false, true]&nbsp;: bool list<br>[closing file "luhn.sml"]<br>*)</pre> 
        <h2><span class="mw-headline" id="Swift"><a href="/wiki/Category:Swift" title="Category:Swift">Swift</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=105" title="Edit section: Swift">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">func lunhCheck(number&nbsp;: String) -&gt; Bool<br>{<br>	let reversedInts = number.characters.reversed().map { Int(String($0)) }<br>        return reversedInts.enumerated().reduce(0, {(sum, val) in<br>            let odd = val.offset&nbsp;% 2 == 1<br>            return sum + (odd&nbsp;? (val.element! == 9&nbsp;? 9&nbsp;: (val.element! * 2)&nbsp;% 9)&nbsp;: val.element!)<br>        })&nbsp;% 10 == 0<br>}<br>&nbsp;<br>&nbsp;<br>lunhCheck("49927398716") // true<br>lunhCheck("49927398717") // false<br>&nbsp;</pre> 
        <h2><span class="mw-headline" id="Tcl"><a href="/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=106" title="Edit section: Tcl">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <p>Based on an algorithmic encoding for the test on Wikipedia. </p> 
        <pre class="tcl highlighted_source"><span class="kw2">package</span> require Tcl <span class="nu0">8.5</span><br><span class="kw1">proc</span> luhn digitString <span class="br0">{</span><br>    <span class="kw1">if</span> <span class="br0">{</span><span class="br0">[</span><span class="kw2">regexp</span> <span class="br0">{</span><span class="br0">[</span>^<span class="nu0">0</span>-<span class="nu0">9</span><span class="br0">]</span><span class="br0">}</span> <span class="re0">$digitString</span><span class="br0">]</span><span class="br0">}</span> <span class="br0">{</span><span class="kw1">error</span> <span class="st0">"not a number"</span><span class="br0">}</span><br>    <span class="kw1">set</span> sum <span class="nu0">0</span><br>    <span class="kw1">set</span> flip <span class="nu0">1</span><br>    <span class="kw1">foreach</span> ch <span class="br0">[</span>lreverse <span class="br0">[</span><span class="kw2">split</span> <span class="re0">$digitString</span> <span class="br0">{</span><span class="br0">}</span><span class="br0">]</span><span class="br0">]</span> <span class="br0">{</span><br>	<span class="kw2">incr</span> sum <span class="br0">[</span><span class="kw2">lindex</span> <span class="br0">{</span><br>	    <span class="br0">{</span><span class="nu0">0</span> <span class="nu0">1</span> <span class="nu0">2</span> <span class="nu0">3</span> <span class="nu0">4</span> <span class="nu0">5</span> <span class="nu0">6</span> <span class="nu0">7</span> <span class="nu0">8</span> <span class="nu0">9</span><span class="br0">}</span><br>	    <span class="br0">{</span><span class="nu0">0</span> <span class="nu0">2</span> <span class="nu0">4</span> <span class="nu0">6</span> <span class="nu0">8</span> <span class="nu0">1</span> <span class="nu0">3</span> <span class="nu0">5</span> <span class="nu0">7</span> <span class="nu0">9</span><span class="br0">}</span><br>	<span class="br0">}</span> <span class="br0">[</span><span class="kw1">expr</span> <span class="br0">{</span><span class="br0">[</span><span class="kw2">incr</span> flip<span class="br0">]</span> <span class="sy0">&amp;</span> <span class="nu0">1</span><span class="br0">}</span><span class="br0">]</span> <span class="re0">$ch</span><span class="br0">]</span><br>    <span class="br0">}</span><br>    <span class="kw1">return</span> <span class="br0">[</span><span class="kw1">expr</span> <span class="br0">{</span><span class="br0">(</span><span class="re0">$sum</span> <span class="sy0">%</span> <span class="nu0">10</span><span class="br0">)</span> == <span class="nu0">0</span><span class="br0">}</span><span class="br0">]</span><br><span class="br0">}</span></pre> 
        <p>Driver: </p> 
        <pre class="tcl highlighted_source"><span class="kw1">foreach</span> testNumber <span class="br0">{</span><br>    <span class="nu0">49927398716</span><br>    <span class="nu0">49927398717</span><br>    <span class="nu0">1234567812345678</span><br>    <span class="nu0">1234567812345670</span><br><span class="br0">}</span> <span class="br0">{</span><br>    <span class="kw2">puts</span> <span class="br0">[</span><span class="kw2">format</span> <span class="st0">"%s is&nbsp;%s"</span> <span class="re0">$testNumber</span> \<br>	      <span class="br0">[</span><span class="kw2">lindex</span> <span class="br0">{</span><span class="st0">"NOT valid"</span> <span class="st0">"valid"</span><span class="br0">}</span> <span class="br0">[</span>luhn <span class="re0">$testNumber</span><span class="br0">]</span><span class="br0">]</span><span class="br0">]</span><br><span class="br0">}</span></pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 is valid
49927398717 is NOT valid
1234567812345678 is NOT valid
1234567812345670 is valid
</pre> 
        <h2><span class="mw-headline" id="TI-83_BASIC"><a href="/wiki/Category:TI-83_BASIC" title="Category:TI-83 BASIC">TI-83 BASIC</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=107" title="Edit section: TI-83 BASIC">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">PROGRAM:LUHN<br>:Disp "ENTER NUMBER"<br>:Input Str1<br>:0?S<br>:0?E<br>:For(I,length(Str1),1,-1)<br> &nbsp;:inString("0123456789",sub(Str1,I,1))1?X<br> &nbsp;:If X&lt;0<br>   &nbsp;:Goto BA<br> &nbsp;:If E?0<br> &nbsp;:Then<br>   &nbsp;:2X?X<br>   &nbsp;:If X&gt;9<br>     &nbsp;:X9?X<br> &nbsp;:End<br> &nbsp;:X+S?S<br> &nbsp;:not(E)?E<br>:End<br>:If fPart(S/10)=0<br>:Then<br> &nbsp;:Disp "GOOD CARD"<br>:Else<br> &nbsp;:Lbl BA<br> &nbsp;:Disp "BAD CARD"<br>:End<br>&nbsp;</pre> 
        <h2><span class="mw-headline" id="Transact-SQL"><a href="/wiki/Category:Transact-SQL" title="Category:Transact-SQL">Transact-SQL</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=108" title="Edit section: Transact-SQL">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">&nbsp;<br>CREATE FUNCTION dbo._CreditCardNumCheck( @strCCNum VarChar(40) )<br>RETURNS VarChar(7)<br>AS<br>BEGIN<br>	DECLARE @string			VarChar(40) = REVERSE(@strCCNum); -- usage: set once, never changed<br>	DECLARE @strS2Values		VarChar(10) = '0246813579';  -- constant: maps digits to their S2 summed values<br>	DECLARE @table			TABLE (ID INT, Value INT, S_Value INT); -- ID=digit position. S_Value is used for SUM().<br>	DECLARE @p			INT = 0; -- loop counter: position in string<br>	-- Convert the reversed string's digits into rows in a table variable, S_Values to be updated afterwards<br>	WHILE @p &lt; LEN(@string)<br>		BEGIN<br>			SET @p = @p+1;<br>			INSERT INTO @table (ID,Value,S_Value) VALUES (@p, CONVERT(INT,SUBSTRING(@string,@p,1)), 0);<br>		END<br>	-- Update S_Value column&nbsp;: the digit's value to be summed (for even-positioned digits this is mapped via @strS2Values)<br>	UPDATE @table SET S_Value = CASE WHEN ID&nbsp;% 2 = 1 THEN Value ELSE CONVERT(INT,SUBSTRING(@strS2Values,Value+1,1)) END<br>	-- If the SUM of S_Values ends in 0 (modulo 10 = 0) then the CC Number is valid<br>	RETURN CASE WHEN (SELECT SUM(S_Value) FROM @table)&nbsp;% 10 = 0 THEN 'Valid' ELSE 'Invalid' END<br>END<br>&nbsp;</pre> 
        <h2><span class="mw-headline" id="TUSCRIPT"><a href="/wiki/Category:TUSCRIPT" title="Category:TUSCRIPT">TUSCRIPT</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=109" title="Edit section: TUSCRIPT">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">$$ MODE TUSCRIPT<br>MODE DATA<br>$$ SET cardnumbers=*<br>49927398716<br>49927398717<br>1234567812345678<br>1234567812345670<br>$$ MODE TUSCRIPT<br>-&gt; collecting information for output-format<br>SET length=MAX_LENGTH(cardnumbers)<br>SET adjust=length+2<br>&nbsp;<br>LOOP c=cardnumbers<br>-&gt; "&gt;/" = any digit<br>SET cstring=STRINGS (c,":&gt;/:")<br>SET creverse=REVERSE (cstring)<br>SET s1=evenx2=esum=s2=""<br> LOOP n,oe=creverse<br>  SET modrest=MOD(n,2)<br>  IF (modrest==0) THEN<br>   SET even=oe*2<br>    IF (even&gt;9) THEN<br>     SET estring=STRINGS (even,":&gt;/:")<br>     SET esum=SUM (estring)<br>     SET s2=APPEND (s2,esum)<br>    ELSE<br>     SET s2=APPEND (s2,even)<br>    ENDIF<br>  ELSE<br>   SET s1=APPEND(s1,oe)<br>  ENDIF<br> ENDLOOP<br>SET s1=SUM(s1),s2=SUM(s2)<br>SET checksum=s1+s2<br>SET c=CENTER(c,-adjust)<br>IF (checksum.ew."0") THEN<br> PRINT c,"true"<br>ELSE<br> PRINT c,"false"<br>ENDIF<br>ENDLOOP</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716       true
49927398717       false
1234567812345678  false
1234567812345670  true 
</pre> 
        <h2><span class="mw-headline" id="TXR"><a href="/wiki/Category:TXR" title="Category:TXR">TXR</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=110" title="Edit section: TXR">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">@(do (defun luhn (num)<br>       (for ((i 1) (sum 0))<br>            ((not (zerop num)) (zerop (mod sum 10)))<br>            ((inc i) (set num (trunc num 10)))<br>          (let ((dig (mod num 10)))<br>            (if (oddp i)<br>              (inc sum dig)<br>              (let ((dig2 (* 2 dig)))<br>                (inc sum (+ (trunc dig2 10) (mod dig2 10)))))))))<br>@(collect&nbsp;:vars nil)<br>@{ccnumber /[0-9]+/}<br>@(output)<br>@ccnumber -&gt; @(if (luhn (int-str ccnumber 10)) "good" "bad")<br>@(end)<br>@(end)</pre> 
        <pre>$ txr luhn.txr luhn.txt
49927398716 -&gt; good
49927398717 -&gt; bad
1234567812345678 -&gt; bad
1234567812345670 -&gt; good</pre> 
        <h2><span class="mw-headline" id="UNIX_Shell"><a href="/wiki/Category:UNIX_Shell" title="Category:UNIX Shell">UNIX Shell</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=111" title="Edit section: UNIX Shell">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/Bash" title="Bash" class="mw-redirect">bash</a>
        </div> 
        <div class="examplemeta workswith">
         <b>Works with</b>: 
         <a href="/wiki/Ksh" title="Ksh" class="mw-redirect">ksh</a>
        </div> 
        <pre class="bash highlighted_source"><span class="kw1">function</span> luhn <span class="br0">{</span><br>  <span class="kw3">typeset</span> n p s <span class="re2">t</span>=<span class="br0">(</span><span class="st_h">'0123456789'</span> <span class="st_h">'0516273849'</span><span class="br0">)</span><br>  <span class="kw1">while</span> <span class="br0">(</span><span class="br0">(</span>-n<span class="sy0">&lt;</span><span class="co1">${#1}</span><span class="br0">)</span><span class="br0">)</span>; <span class="kw1">do</span><br>    <span class="re2">p</span>=<span class="st0">"<span class="es3">${t[n--%2]%${1:n:1}</span>*}"</span><br>    <span class="br0">(</span><span class="br0">(</span>s+=<span class="co1">${#p}</span><span class="br0">)</span><span class="br0">)</span><br>  <span class="kw1">done</span><br>  <span class="br0">(</span><span class="br0">(</span>s<span class="sy0">%</span>10<span class="br0">)</span><span class="br0">)</span><br><span class="br0">}</span><br>&nbsp;<br><span class="kw1">for</span> c <span class="kw1">in</span> <span class="nu0">49927398716</span> <span class="nu0">49927398717</span> <span class="nu0">1234567812345678</span> <span class="nu0">1234567812345670</span>; <span class="kw1">do</span><br>    <span class="kw1">if</span> luhn <span class="re1">$c</span>; <span class="kw1">then</span> <br>        <span class="kw3">echo</span> <span class="re1">$c</span> is invalid<br>    <span class="kw1">else</span><br>        <span class="kw3">echo</span> <span class="re1">$c</span> is valid<br>    <span class="kw1">fi</span><br><span class="kw1">done</span></pre> 
        <p>Notes: </p> 
        <ul>
         <li> The parameter expansion hack (p=${t%${1:n:1}};${#p}) is an interesting way of converting a set of characters to ordinals. It's highly extensible to larger character sets (e.g. for ISBN and Code 39 checksums).</li> 
         <li> Invalid characters are effectively treated as 0s. This is actually useful sometimes for ignoring alphabetic prefixes.</li> 
         <li> When attempting to understand the function, remember that n is negative, so it indexes from the end of the input string.</li>
        </ul> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 is valid
49927398717 is invalid
1234567812345678 is invalid
1234567812345670 is valid</pre> 
        <h2><span class="mw-headline" id="Ursala"><a href="/wiki/Category:Ursala" title="Category:Ursala">Ursala</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=112" title="Edit section: Ursala">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">#import std<br>#import nat<br>&nbsp;<br>luhn =&nbsp;%nP;&nbsp;%np*hxiNCNCS; not remainder\10+ //sum:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="25081565615749576d6e1617">[email&nbsp;protected]</a> ~&amp;iK27K28TK25 iota10</pre> 
        <p>Some notes on this solution: </p> 
        <ul>
         <li> <code>iota10</code> is the list of natural numbers <code>&lt;0,1,2,3,4,5,6,7,8,9&gt;</code></li> 
         <li> <code>~&amp;K27</code> and <code>~&amp;K28</code> of <code>iota10</code> extract the alternate items, respectively <code>&lt;0,2,4,6,8&gt;</code> and <code>&lt;1,3,5,7,9&gt;</code></li> 
         <li> <code>~&amp;K27K28T iota10</code> is their concatenation, <code>&lt;0,2,4,6,8,1,3,5,7,9&gt;</code> which is also the list of values obtained by doubling each item of <code>iota10</code> and taking digit sums</li> 
         <li> <code>~&amp;iK27K28TX iota10</code> would be the pair <code>(&lt;0,1,2,3,4,5,6,7,8,9&gt;,&lt;0,2,4,6,8,1,3,5,7,9&gt;)</code>, but using the reification operator <code>K25</code> in place of <code>X</code> makes it an executable function taking any item of the left list as an argument and returning the corresponding item of the right.</li> 
         <li> The part beginning with <code>//</code> is a function of the form <code>//f a</code>, which can be applied to any argument <code>b</code> to obtain <code>f(a,b)</code>. In this case, the <code>f</code> is <code>sum:<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b79a87f7f3c5dbc5fffc8485">[email&nbsp;protected]</a></code>, which is equivalent to the composition of two functions <code>sum:-0</code> and <code>~&amp;DrlrHK32</code>, and <code>a</code> is the function just obtained by reification.</li> 
         <li> The function <code>~&amp;D</code> by itself takes a pair <code>(a,&lt;b0</code>...<code>bn&gt;)</code> whose right side is a list, and returns the list of pairs <code>&lt;(a,b0)</code>...<code>(a,bn)&gt;</code> (i.e., a copy of <code>a</code> paired with each <code>b</code>). The <code>a</code> here will end up being the aforementioned function.</li> 
         <li> <code>~&amp;DrlrHK32</code> not only forms such a list of pairs, but operates on each pair thus obtained, alternately applying <code>~&amp;r</code> and <code>~&amp;lrH</code> to each pair in sequence, where <code>~&amp;r</code> simply returns the right side of the pair, and <code>~&amp;lrH</code> uses the left side as a function, which is applied to the right.</li> 
         <li> <code>sum:-0</code> computes the cumulative sum of a list of natural numbers using the binary <code>sum</code> function, and the reduction operator (<code>:-</code>) with vacuous sum 0.</li> 
         <li> The whole thing described up to this point is therefore a function that will take a list of numbers in the range 0 to 9, and compute the summation obtained when doubling and digit summing alternate items.</li> 
         <li> The input list to this function is constructed from a single natural number first by <code>%nP</code>, which transforms it to text format in decimal, followed by <code>%np*hxiNCNCS</code>, which reverses the digits, makes a separate text of each, and parses them as individual numbers.</li> 
         <li> The output from the function is tested for divisibility by 10 with <code>remainder\10</code>, with the result negated so that zero values map to true and non-zero to false.</li>
        </ul> 
        <p>usage: </p> 
        <pre class="text highlighted_source">#cast&nbsp;%bL<br>&nbsp;<br>test = luhn* &lt;49927398716,49927398717,1234567812345678,1234567812345670&gt;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>&lt;true,false,false,true&gt;
</pre> 
        <h2><span class="mw-headline" id="VBScript"><a href="/wiki/Category:VBScript" title="Category:VBScript">VBScript</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=113" title="Edit section: VBScript">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">Function Luhn_Test(cc)<br>	cc = RevString(cc)<br>	s1 = 0<br>	s2 = 0<br>	For i = 1 To Len(cc)<br>		If i Mod 2 &gt; 0 Then<br>			s1 = s1 + CInt(Mid(cc,i,1))<br>		Else<br>			tmp = CInt(Mid(cc,i,1))*2<br>			If  tmp &lt; 10 Then<br>				s2 = s2 + tmp<br>			Else<br>				s2 = s2 + CInt(Right(CStr(tmp),1)) + 1<br>			End If<br>		End If <br>	Next<br>	If Right(CStr(s1 + s2),1) = "0" Then<br>		Luhn_Test = "Valid"<br>	Else<br>		Luhn_Test = "Invalid"<br>	End If<br>End Function<br>&nbsp;<br>Function RevString(s)<br>	For i = Len(s) To 1 Step -1<br>		RevString = RevString &amp; Mid(s,i,1)<br>	Next<br>End Function<br>&nbsp;<br>WScript.Echo "49927398716 is " &amp; Luhn_Test("49927398716")<br>WScript.Echo "49927398717 is " &amp; Luhn_Test("49927398717")			 <br>WScript.Echo "1234567812345678 is " &amp; Luhn_Test("1234567812345678")<br>WScript.Echo "1234567812345670 is " &amp; Luhn_Test("1234567812345670")</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 is Valid
49927398717 is Invalid
1234567812345678 is Invalid
1234567812345670 is Valid</pre> 
        <h2><span class="mw-headline" id="Visual_Basic_.NET"><a href="/wiki/Category:Visual_Basic_.NET" title="Category:Visual Basic .NET">Visual Basic .NET</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=114" title="Edit section: Visual Basic .NET">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">&nbsp;<br>    Imports System.Linq<br>    Function ValidLuhn(value As String)<br>        Return value.Select(Function(c, i) (AscW(c) - 48) &lt;&lt; ((value.Length - i - 1) And 1)).Sum(Function(n) If(n &gt; 9, n - 9, n)) Mod 10 = 0<br>    End Function<br>    Sub Main()<br>        Console.WriteLine(ValidLuhn("49927398716"))<br>        Console.WriteLine(ValidLuhn("49927398717"))<br>        Console.WriteLine(ValidLuhn("1234567812345678"))<br>        Console.WriteLine(ValidLuhn("1234567812345670"))<br>    End Sub<br>&nbsp;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>True
False
False
True
</pre> 
        <h2><span class="mw-headline" id="Xojo"><a href="/wiki/Category:Xojo" title="Category:Xojo">Xojo</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=115" title="Edit section: Xojo">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">Public Function Modulus10(digits As String) as String<br>  //<br>  // Confirm the digits are really, well, digits<br>  //<br>&nbsp;<br>  dim validator as new RegEx<br>  validator.SearchPattern = "\A\d+\z"<br>  if validator.Search( digits ) is nil then<br>    //<br>    // Raise an exception or something<br>    //<br>  end if<br>&nbsp;<br>  static doublingTable() as string = array( "0", "2", "4", "6", "8", "1", "3", "5", "7", "9" )<br>&nbsp;<br>  dim digitArr() as string = digits.Split( "" )<br>  for i as integer = digitArr.Ubound downto 0 step 2<br>    digitArr( i ) = doublingTable( digitArr( i ).Val )<br>  next<br>&nbsp;<br>  dim sum as integer<br>  for each digit as string in digitArr<br>    sum = sum + digit.Val<br>  next<br>&nbsp;<br>  dim check as integer = ( sum * 9 ) mod 10<br>  return str( check )<br>End Function<br>&nbsp;<br>Public Function ValidateMod10(digits As String) as Boolean<br>  dim checkDigit as string = digits.Right( 1 )<br>  digits = digits.Left( digits.Len - 1 )<br>&nbsp;<br>  return Modulus10( digits ) = checkDigit<br>End Function<br>&nbsp;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>ValididateMod10( "49927398716" ) = True
ValididateMod10( "49927398717" ) = False
ValididateMod10( "1234567812345678" ) = False
ValididateMod10( "1234567812345670" ) = True
</pre> 
        <h2><span class="mw-headline" id="zkl"><a href="/wiki/Category:Zkl" title="Category:Zkl">zkl</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=116" title="Edit section: zkl">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="text highlighted_source">fcn luhnTest(n){<br>   0 == (n.split().reverse().reduce(fcn(s,n,clk){<br>      s + if(clk.next()) n else 2*n%10 + n/5 },0,Walker.cycle(1,0))&nbsp;%10)<br>}</pre> 
        <pre class="text highlighted_source">T(49927398716,49927398717,1234567812345678,1234567812345670)<br>.apply(luhnTest).println();</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>L(True,False,False,True)
</pre> 
        <h2><span class="mw-headline" id="ZX_Spectrum_Basic"><a href="/wiki/Category:ZX_Spectrum_Basic" title="Category:ZX Spectrum Basic">ZX Spectrum Basic</a></span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=edit&amp;section=117" title="Edit section: ZX Spectrum Basic">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
        <pre class="zxbasic highlighted_source"><span class="nu0">10</span> <span class="kw1">LET</span> c$=<span class="st0">"49927398716"</span>: <span class="kw1">GO</span> <span class="kw1">SUB</span> <span class="nu0">1000</span><br><span class="nu0">20</span> <span class="kw1">LET</span> c$=<span class="st0">"49927398717"</span>: <span class="kw1">GO</span> <span class="kw1">SUB</span> <span class="nu0">1000</span><br><span class="nu0">30</span> <span class="kw1">LET</span> c$=<span class="st0">"1234567812345678"</span>: <span class="kw1">GO</span> <span class="kw1">SUB</span> <span class="nu0">1000</span><br><span class="nu0">40</span> <span class="kw1">LET</span> c$=<span class="st0">"1234567812345670"</span>: <span class="kw1">GO</span> <span class="kw1">SUB</span> <span class="nu0">1000</span><br><span class="nu0">999</span> STOP <br><span class="nu0">1000</span> <span class="co3">REM *************</span><br><span class="nu0">1001</span> <span class="co3">REM * LUHN TEST *</span><br><span class="nu0">1002</span> <span class="co3">REM *************</span><br><span class="nu0">1010</span> <span class="kw1">LET</span> r$=<span class="st0">""</span><br><span class="nu0">1020</span> <span class="kw1">FOR</span> i=<span class="kw3">LEN</span> c$ <span class="kw1">TO</span> <span class="nu0">1</span> <span class="kw4">STEP</span> -<span class="nu0">1</span><br><span class="nu0">1030</span> <span class="kw1">LET</span> r$=r$+c$<span class="br0">(</span>i<span class="br0">)</span><br><span class="nu0">1040</span> <span class="kw1">NEXT</span> i<br><span class="nu0">1050</span> <span class="kw1">LET</span> s1=<span class="nu0">0</span>: <span class="kw1">LET</span> s2=<span class="nu0">0</span><br><span class="nu0">1060</span> <span class="kw1">FOR</span> i=<span class="nu0">1</span> <span class="kw1">TO</span> <span class="kw3">LEN</span> r$ <span class="kw4">STEP</span> <span class="nu0">2</span><br><span class="nu0">1070</span> <span class="kw1">LET</span> s1=s1+<span class="kw3">VAL</span> r$<span class="br0">(</span>i<span class="br0">)</span><br><span class="nu0">1080</span> <span class="kw1">NEXT</span> i<br><span class="nu0">1090</span> <span class="kw1">FOR</span> i=<span class="nu0">2</span> <span class="kw1">TO</span> <span class="kw3">LEN</span> r$ <span class="kw4">STEP</span> <span class="nu0">2</span><br><span class="nu0">1100</span> <span class="kw1">LET</span> s2sub=<span class="kw3">VAL</span> r$<span class="br0">(</span>i<span class="br0">)</span>*<span class="nu0">2</span><br><span class="nu0">1110</span> <span class="kw1">IF</span> s2sub&gt;=<span class="nu0">10</span> <span class="kw1">THEN</span> <span class="kw1">LET</span> s2sub=<span class="nu0">1</span>+s2sub-<span class="nu0">10</span><br><span class="nu0">1120</span> <span class="kw1">LET</span> s2=s2+s2sub<br><span class="nu0">1130</span> <span class="kw1">NEXT</span> i<br><span class="nu0">1140</span> <span class="kw1">LET</span> s$=<span class="kw3">STR</span>$ <span class="br0">(</span>s1+s2<span class="br0">)</span><br><span class="nu0">1150</span> <span class="kw1">IF</span> s$<span class="br0">(</span><span class="kw3">LEN</span> s$<span class="br0">)</span>=<span class="st0">"0"</span> <span class="kw1">THEN</span> <span class="kw1">PRINT</span> c$;<span class="st0">" VALID!"</span>: <span class="kw1">LET</span> retval=<span class="nu0">1</span>: <span class="kw1">RETURN</span> <br><span class="nu0">1160</span> <span class="kw1">PRINT</span> c$;<span class="st0">" INVALID!"</span>: <span class="kw1">LET</span> retval=<span class="nu0">0</span>: <span class="kw1">RETURN</span> <br>&nbsp;</pre> 
        <div> 
         <dl>
          <dt>
           Output:
          </dt>
         </dl>
        </div> 
        <pre>49927398716 VALID!
49927398717 INVALID!
1234567812345678 INVALID!
1234567812345670 VALID!
</pre> 
       </div>
       <div class="printfooter">
         Retrieved from "
        <a dir="ltr" href="https://rosettacode.org/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;oldid=252260">https://rosettacode.org/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;oldid=252260</a>"
       </div> 
      </div> 
      <div id="catlinks" class="catlinks">
       <div id="mw-normal-catlinks" class="mw-normal-catlinks">
        <a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>: 
        <ul>
         <li><a href="/wiki/Category:Programming_Tasks" title="Category:Programming Tasks">Programming Tasks</a></li>
         <li><a href="/wiki/Category:Checksums" title="Category:Checksums">Checksums</a></li>
         <li><a href="/wiki/Category:GUISS/Omit" title="Category:GUISS/Omit">GUISS/Omit</a></li>
         <li><a href="/wiki/Category:360_Assembly" title="Category:360 Assembly">360 Assembly</a></li>
         <li><a href="/wiki/Category:ABAP" title="Category:ABAP">ABAP</a></li>
         <li><a href="/wiki/Category:ACL2" title="Category:ACL2">ACL2</a></li>
         <li><a href="/wiki/Category:ActionScript" title="Category:ActionScript">ActionScript</a></li>
         <li><a href="/wiki/Category:Ada" title="Category:Ada">Ada</a></li>
         <li><a href="/wiki/Category:ALGOL_68" title="Category:ALGOL 68">ALGOL 68</a></li>
         <li><a href="/wiki/Category:ALGOL_W" title="Category:ALGOL W">ALGOL W</a></li>
         <li><a href="/wiki/Category:APL" title="Category:APL">APL</a></li>
         <li><a href="/wiki/Category:ARM_Assembly" title="Category:ARM Assembly">ARM Assembly</a></li>
         <li><a href="/wiki/Category:AutoHotkey" title="Category:AutoHotkey">AutoHotkey</a></li>
         <li><a href="/wiki/Category:AutoIt" title="Category:AutoIt">AutoIt</a></li>
         <li><a href="/wiki/Category:AWK" title="Category:AWK">AWK</a></li>
         <li><a href="/wiki/Category:Bash" class="mw-redirect" title="Category:Bash">Bash</a></li>
         <li><a href="/wiki/Category:Batch_File" title="Category:Batch File">Batch File</a></li>
         <li><a href="/wiki/Category:BBC_BASIC" title="Category:BBC BASIC">BBC BASIC</a></li>
         <li><a href="/wiki/Category:Bc" title="Category:Bc">Bc</a></li>
         <li><a href="/wiki/Category:Bracmat" title="Category:Bracmat">Bracmat</a></li>
         <li><a href="/wiki/Category:C" title="Category:C">C</a></li>
         <li><a href="/wiki/Category:C%2B%2B" title="Category:C++">C++</a></li>
         <li><a href="/wiki/Category:C_sharp" title="Category:C sharp">C sharp</a></li>
         <li><a href="/wiki/Category:Cach%C3%A9_ObjectScript" title="Category:Caché ObjectScript">Caché ObjectScript</a></li>
         <li><a href="/wiki/Category:Ceylon" title="Category:Ceylon">Ceylon</a></li>
         <li><a href="/wiki/Category:Clojure" title="Category:Clojure">Clojure</a></li>
         <li><a href="/wiki/Category:COBOL" title="Category:COBOL">COBOL</a></li>
         <li><a href="/wiki/Category:Common_Lisp" title="Category:Common Lisp">Common Lisp</a></li>
         <li><a href="/wiki/Category:D" title="Category:D">D</a></li>
         <li><a href="/wiki/Category:EchoLisp" title="Category:EchoLisp">EchoLisp</a></li>
         <li><a href="/wiki/Category:Elixir" title="Category:Elixir">Elixir</a></li>
         <li><a href="/wiki/Category:Erlang" title="Category:Erlang">Erlang</a></li>
         <li><a href="/wiki/Category:Euphoria" title="Category:Euphoria">Euphoria</a></li>
         <li><a href="/wiki/Category:F_Sharp" title="Category:F Sharp">F Sharp</a></li>
         <li><a href="/wiki/Category:Factor" title="Category:Factor">Factor</a></li>
         <li><a href="/wiki/Category:Forth" title="Category:Forth">Forth</a></li>
         <li><a href="/wiki/Category:Fortran" title="Category:Fortran">Fortran</a></li>
         <li><a href="/wiki/Category:FreeBASIC" title="Category:FreeBASIC">FreeBASIC</a></li>
         <li><a href="/wiki/Category:FunL" title="Category:FunL">FunL</a></li>
         <li><a href="/wiki/Category:Gambas" title="Category:Gambas">Gambas</a></li>
         <li><a href="/wiki/Category:GAP" title="Category:GAP">GAP</a></li>
         <li><a href="/wiki/Category:Go" title="Category:Go">Go</a></li>
         <li><a href="/wiki/Category:Groovy" title="Category:Groovy">Groovy</a></li>
         <li><a href="/wiki/Category:Haskell" title="Category:Haskell">Haskell</a></li>
         <li><a href="/wiki/Category:HicEst" title="Category:HicEst">HicEst</a></li>
         <li><a href="/wiki/Category:Icon" title="Category:Icon">Icon</a></li>
         <li><a href="/wiki/Category:Unicon" title="Category:Unicon">Unicon</a></li>
         <li><a href="/wiki/Category:J" title="Category:J">J</a></li>
         <li><a href="/wiki/Category:Java" title="Category:Java">Java</a></li>
         <li><a href="/wiki/Category:JavaScript" title="Category:JavaScript">JavaScript</a></li>
         <li><a href="/wiki/Category:Jq" title="Category:Jq">Jq</a></li>
         <li><a href="/wiki/Category:Julia" title="Category:Julia">Julia</a></li>
         <li><a href="/wiki/Category:K" title="Category:K">K</a></li>
         <li><a href="/wiki/Category:Kotlin" title="Category:Kotlin">Kotlin</a></li>
         <li><a href="/wiki/Category:Lasso" title="Category:Lasso">Lasso</a></li>
         <li><a href="/wiki/Category:Liberty_BASIC" title="Category:Liberty BASIC">Liberty BASIC</a></li>
         <li><a href="/wiki/Category:LiveCode" title="Category:LiveCode">LiveCode</a></li>
         <li><a href="/wiki/Category:Logo" title="Category:Logo">Logo</a></li>
         <li><a href="/wiki/Category:Lua" title="Category:Lua">Lua</a></li>
         <li><a href="/wiki/Category:Mathematica" title="Category:Mathematica">Mathematica</a></li>
         <li><a href="/wiki/Category:MATLAB" title="Category:MATLAB">MATLAB</a></li>
         <li><a href="/wiki/Category:MUMPS" title="Category:MUMPS">MUMPS</a></li>
         <li><a href="/wiki/Category:NetRexx" title="Category:NetRexx">NetRexx</a></li>
         <li><a href="/wiki/Category:Nim" title="Category:Nim">Nim</a></li>
         <li><a href="/wiki/Category:Objeck" title="Category:Objeck">Objeck</a></li>
         <li><a href="/wiki/Category:Objective-C" title="Category:Objective-C">Objective-C</a></li>
         <li><a href="/wiki/Category:OCaml" title="Category:OCaml">OCaml</a></li>
         <li><a href="/wiki/Category:Octave" title="Category:Octave">Octave</a></li>
         <li><a href="/wiki/Category:Oforth" title="Category:Oforth">Oforth</a></li>
         <li><a href="/wiki/Category:OpenEdge/Progress" title="Category:OpenEdge/Progress">OpenEdge/Progress</a></li>
         <li><a href="/wiki/Category:Order" title="Category:Order">Order</a></li>
         <li><a href="/wiki/Category:Oz" title="Category:Oz">Oz</a></li>
         <li><a href="/wiki/Category:Pascal" title="Category:Pascal">Pascal</a></li>
         <li><a href="/wiki/Category:Perl" title="Category:Perl">Perl</a></li>
         <li><a href="/wiki/Category:Perl_6" title="Category:Perl 6">Perl 6</a></li>
         <li><a href="/wiki/Category:Phix" title="Category:Phix">Phix</a></li>
         <li><a href="/wiki/Category:PHP" title="Category:PHP">PHP</a></li>
         <li><a href="/wiki/Category:PicoLisp" title="Category:PicoLisp">PicoLisp</a></li>
         <li><a href="/wiki/Category:PL/I" title="Category:PL/I">PL/I</a></li>
         <li><a href="/wiki/Category:PL/SQL" title="Category:PL/SQL">PL/SQL</a></li>
         <li><a href="/wiki/Category:PowerShell" title="Category:PowerShell">PowerShell</a></li>
         <li><a href="/wiki/Category:PureBasic" title="Category:PureBasic">PureBasic</a></li>
         <li><a href="/wiki/Category:Python" title="Category:Python">Python</a></li>
         <li><a href="/wiki/Category:R" title="Category:R">R</a></li>
         <li><a href="/wiki/Category:Racket" title="Category:Racket">Racket</a></li>
         <li><a href="/wiki/Category:REXX" title="Category:REXX">REXX</a></li>
         <li><a href="/wiki/Category:Ring" title="Category:Ring">Ring</a></li>
         <li><a href="/wiki/Category:Ruby" title="Category:Ruby">Ruby</a></li>
         <li><a href="/wiki/Category:Run_BASIC" title="Category:Run BASIC">Run BASIC</a></li>
         <li><a href="/wiki/Category:Rust" title="Category:Rust">Rust</a></li>
         <li><a href="/wiki/Category:Scala" title="Category:Scala">Scala</a></li>
         <li><a href="/wiki/Category:Scheme" title="Category:Scheme">Scheme</a></li>
         <li><a href="/wiki/Category:Sed" title="Category:Sed">Sed</a></li>
         <li><a href="/wiki/Category:Seed7" title="Category:Seed7">Seed7</a></li>
         <li><a href="/wiki/Category:SequenceL" title="Category:SequenceL">SequenceL</a></li>
         <li><a href="/wiki/Category:Sidef" title="Category:Sidef">Sidef</a></li>
         <li><a href="/wiki/Category:SNOBOL4" title="Category:SNOBOL4">SNOBOL4</a></li>
         <li><a href="/wiki/Category:SPARK" title="Category:SPARK">SPARK</a></li>
         <li><a href="/wiki/Category:Standard_ML" title="Category:Standard ML">Standard ML</a></li>
         <li><a href="/wiki/Category:Swift" title="Category:Swift">Swift</a></li>
         <li><a href="/wiki/Category:Tcl" title="Category:Tcl">Tcl</a></li>
         <li><a href="/wiki/Category:TI-83_BASIC" title="Category:TI-83 BASIC">TI-83 BASIC</a></li>
         <li><a href="/wiki/Category:Transact-SQL" title="Category:Transact-SQL">Transact-SQL</a></li>
         <li><a href="/wiki/Category:TUSCRIPT" title="Category:TUSCRIPT">TUSCRIPT</a></li>
         <li><a href="/wiki/Category:TXR" title="Category:TXR">TXR</a></li>
         <li><a href="/wiki/Category:UNIX_Shell" title="Category:UNIX Shell">UNIX Shell</a></li>
         <li><a href="/wiki/Category:Ursala" title="Category:Ursala">Ursala</a></li>
         <li><a href="/wiki/Category:VBScript" title="Category:VBScript">VBScript</a></li>
         <li><a href="/wiki/Category:Visual_Basic_.NET" title="Category:Visual Basic .NET">Visual Basic .NET</a></li>
         <li><a href="/wiki/Category:Xojo" title="Category:Xojo">Xojo</a></li>
         <li><a href="/wiki/Category:Zkl" title="Category:Zkl">Zkl</a></li>
         <li><a href="/wiki/Category:ZX_Spectrum_Basic" title="Category:ZX Spectrum Basic">ZX Spectrum Basic</a></li>
        </ul>
       </div>
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="row"> 
    <div class="col-lg-12"> 
     <nav class="navbar navbar-default p-tb " id="p-tb"> 
      <ul class="nav navbar-nav small"> 
       <li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Luhn_test_of_credit_card_numbers" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li> 
       <li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Luhn_test_of_credit_card_numbers" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li> 
       <li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li> 
       <li id="t-print"><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li> 
       <li id="t-permalink"><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;oldid=252260" title="Permanent link to this revision of the page">Permanent link</a></li> 
       <li id="t-info"><a href="/mw/index.php?title=Luhn_test_of_credit_card_numbers&amp;action=info" title="More information about this page">Page information</a></li> 
       <li id="t-smwbrowselink"><a href="/wiki/Special:Browse/Luhn_test_of_credit_card_numbers" rel="smw-browse">Browse properties</a></li> 
      </ul> 
     </nav> 
    </div> 
   </div> 
   <div class="row"> 
    <div class="col-lg-12"> 
     <ul class="footer-info list-unstyled small" id="footer-info"> 
      <li> This page was last modified on 4 September 2017, at 17:30.</li> 
      <li>Content is available under <a class="external" rel="nofollow" href="http://www.gnu.org/licenses/fdl-1.2.html">GNU Free Documentation License 1.2</a> unless otherwise noted.</li> 
     </ul> 
    </div> 
   </div> 
   <div class="row"> 
    <div class="col-lg-6"> 
     <ul class="list-inline footer-places " id="footer-places"> 
      <li><small><a href="/wiki/Rosetta_Code:Privacy_policy" title="Rosetta Code:Privacy policy">Privacy policy</a></small></li> 
      <li><small><a href="/wiki/Rosetta_Code:About" title="Rosetta Code:About">About Rosetta Code</a></small></li> 
      <li><small><a href="/wiki/Rosetta_Code:General_disclaimer" title="Rosetta Code:General disclaimer">Disclaimers</a></small></li> 
     </ul> 
    </div> 
    <div class="col-lg-6"> 
     <ul class="list-inline pull-right footer-icons " id="footer-icons"> 
      <li><a href="http://www.gnu.org/licenses/fdl-1.2.html"><img src="/mw/resources/assets/licenses/gnu-fdl.png" alt="GNU Free Documentation License 1.2" width="88" height="31"></a></li> 
      <li><a href="//www.mediawiki.org/"><img src="/mw/resources/assets/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/mw/resources/assets/poweredby_mediawiki_132x47.png 1.5x, /mw/resources/assets/poweredby_mediawiki_176x62.png 2x" width="88" height="31"></a></li> 
      <li><a href="https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki"><img src="/mw/extensions/SemanticMediaWiki/includes/../resources/images/smw_button.png" alt="Powered by Semantic MediaWiki" width="88" height="31"></a></li> 
     </ul> 
    </div> 
   </div> 
  </div>
  <script>!function(e,t,r,n,c,a,l){function i(t,r){return r=e.createElement('div'),r.innerHTML='<a href="'+t.replace(/"/g,'&quot;')+'"></a>',r.childNodes[0].getAttribute('href')}function o(e,t,r,n){for(r='',n='0x'+e.substr(t,2)|0,t+=2;t<e.length;t+=2)r+=String.fromCharCode('0x'+e.substr(t,2)^n);return i(r)}try{for(c=e.getElementsByTagName('a'),l='/cdn-cgi/l/email-protection#',n=0;n<c.length;n++)try{(t=(a=c[n]).href.indexOf(l))>-1&&(a.href='mailto:'+o(a.href,t+l.length))}catch(e){}for(c=e.querySelectorAll('.__cf_email__'),n=0;n<c.length;n++)try{(a=c[n]).parentNode.replaceChild(e.createTextNode(o(a.getAttribute('data-cfemail'),0)),a)}catch(e){}}catch(e){}}(document);</script>
  <script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.loader.state({"user":"ready","user.groups":"ready"});mw.loader.load(["mediawiki.toc","mediawiki.action.view.postEdit","site","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.bootstrap.scripts"]);
} );</script> 
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(["_setAccount", "UA-1219419-1"]);
  _gaq.push(["_trackPageview"]);

  (function() {
    var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
    ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
    var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
  })();

</script> 
  <script>window.RLQ = window.RLQ || []; window.RLQ.push( function () {
mw.config.set({"wgBackendResponseTime":846});
} );</script> 
 </body>
</html>