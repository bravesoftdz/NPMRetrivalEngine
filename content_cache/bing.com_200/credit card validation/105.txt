<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
 <head> 
  <script type="text/javascript">var _sf_startpt=(new Date()).getTime()</script> 
  <link rel="icon" type="image/png" href="https://d3b9owkrfo5lcv.cloudfront.net/favicon.ico"> 
  <link type="text/css" rel="stylesheet" href="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Styles/SyntaxHighlighter.css"> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shCoreMods.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushCpp.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushCSharp.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushCss.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushDelphi.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushJava.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushJScript.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushPhp.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushPython.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushRuby.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushSql.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushVb.js"></script> 
  <script type="text/javascript" src="https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/shBrushXml.js"></script> 
  <script type="text/javascript">dp.SyntaxHighlighter.ClipboardSwf = 'https://s3.amazonaws.com/file.codecodex.com/js/syntaxhighlighter/Scripts/clipboard.swf';</script> 
  <meta name="verify-v1" content="mqCKG4/RMa40CfRqt6TMpAAQzrC+JPrRIMiY6McWVPk="> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <meta name="generator" content="MediaWiki 1.23alpha"> 
  <link rel="alternate" type="application/x-wiki" title="Edit" href="/wiki/index.php?title=Credit_Card_Validator&amp;action=edit"> 
  <link rel="edit" title="Edit" href="/wiki/index.php?title=Credit_Card_Validator&amp;action=edit"> 
  <link rel="shortcut icon" href="/favicon.ico"> 
  <link rel="search" type="application/opensearchdescription+xml" href="/wiki/opensearch_desc.php" title="CodeCodex (en)"> 
  <link rel="EditURI" type="application/rsd+xml" href="http://www.codecodex.com/wiki/api.php?action=rsd"> 
  <link rel="alternate" type="application/atom+xml" title="CodeCodex Atom feed" href="/wiki/index.php?title=Special:RecentChanges&amp;feed=atom"> 
  <title>Credit Card Validator</title> 
  <style type="text/css" media="screen,projection">/*<![CDATA[*/ @import "https://s3.amazonaws.com/file.codecodex.com/cavendish/main.css"; /*]]>*/</style> 
  <link rel="stylesheet" type="text/css" media="print" href="/skins/common/commonPrint.css"> 
  <script type="text/javascript" src="/skins/common/wikibits.js"></script> 
  <!-- google analytics --> 
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-433739-1']);
  _gaq.push(['_trackPageview']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script> 
 </head> 
 <body onload="dp.SyntaxHighlighter.HighlightAll('code');"> 
  <div id="internal"></div> 
  <div id="container"> 
   <div id="header"> 
    <a name="top" id="contentTop"></a> 
    <h1><a href="/wiki/Main_Page" title="Main Page">Credit Card Validator</a></h1> 
    <ul> 
     <li class="selected"><a href="/wiki/Credit_Card_Validator">Page</a></li>
     <li class="new"><a href="/wiki/index.php?title=Talk:Credit_Card_Validator&amp;action=edit&amp;redlink=1">Discussion</a></li>
     <li><a href="/wiki/index.php?title=Credit_Card_Validator&amp;action=edit">Edit</a></li>
     <li><a href="/wiki/index.php?title=Credit_Card_Validator&amp;action=history">History</a></li> 
    </ul> 
    <form name="searchform" action="/wiki/Special:Search" id="search"> 
     <div> 
      <label for="q">Search</label> 
      <input id="q" name="search" type="text" accesskey="f" value=""> 
      <input type="submit" name="go" class="searchButton" id="searchGoButton" value="Go">&nbsp;
      <input type="submit" name="fulltext" class="searchButton" value="Search"> 
     </div> 
    </form> 
   </div> 
   <div id="mBody"> 
    <div id="side"> 
     <ul id="nav"> 
      <li><span>Personal tools</span> 
       <ul> 
        <li id="pt-login"><a href="/wiki/index.php?title=Special:UserLogin&amp;returnto=Credit+Card+Validator">Log in</a></li> 
       </ul> </li> 
      <li><span>Navigation</span> 
       <ul> 
        <li id="n-mainpage"><a href="/wiki/Main_Page">Main Page</a></li> 
        <li id="n-portal"><a href="/wiki/CodeCodex:Community_portal">Community portal</a></li> 
        <li id="n-recentchanges"><a href="/wiki/Special:RecentChanges">Recent changes</a></li> 
        <li id="n-randompage"><a href="/wiki/Special:Random">Random page</a></li> 
       </ul> </li> 
      <li><span>Largest Languages</span> 
       <ul> 
        <li id="n-Java"><a href="/wiki/Category:Java">Java</a></li> 
        <li id="n-C"><a href="/wiki/Category:C">C</a></li> 
        <li id="n-OCaml"><a href="/wiki/Category:Objective_Caml">OCaml</a></li> 
        <li id="n-Perl"><a href="/wiki/Category:Perl">Perl</a></li> 
       </ul> </li> 
      <li><span>Tools</span> 
       <ul> 
        <li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Credit_Card_Validator">What links here</a></li> 
        <li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Credit_Card_Validator">Related changes</a></li> 
        <li id="t-specialpages"><a href="/wiki/Special:SpecialPages">Special pages</a></li> 
       </ul> </li> 
     </ul> 
     <!--
<ul id="ad">
  <div style="padding: 10px;">
    <span style="color: black; font-weight: bold;">Students:</span>
    <p>Stuck on your homework?  <a href="http://www.liveperson.com/experts/computers-programming/p1-sortby-9/?desid=45&amp;ver=1.00&amp;img=177&amp;kbid=4447&amp;sub=TL&amp;twid=3" onclick="window.location.href='http://www.liveperson.com/experts/computers-programming/p1-sortby-9/?desid=45&amp;ver=1.00&amp;img=177&amp;kbid=4447&amp;sub=TL&amp;twid=3'">Get paid homework assistance and tutoring from LivePerson.com</a>.<br/><br/>
   <button onclick="window.location.href='http://www.liveperson.com/experts/computers-programming/p1-sortby-9/?desid=45&amp;ver=1.00&amp;img=177&amp;kbid=4447&amp;sub=TL&amp;twid=3'" style="float: right;">Get Help Now</button>
    <span style="float: left; font-size: 0.7em; font-weight: normal; color: rgb(102, 102, 102);">(advertisment)</span>
    <div style="clear: both;"> </div>
  </div>
</ul>--> 
    </div>
    <!-- end of SIDE div --> 
    <div id="mainContent"> 
     <h1>Credit Card Validator</h1> 
     <h3 id="siteSub">From CodeCodex</h3> 
     <div id="contentSub"></div> 
     <!-- start content --> 
     <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
      <p>Validate Credit cards using known criteria and Luhn (MOD 10 check). Will help you tell if a credit card number is valid. It will also tell you which of the following credit card companies issued the card: Amex, Diners Club, Carte Blanche, Discover, enRoute, JCB, MasterCard or Visa. </p>
      <p>It validates the prefix and the checkdigit. It does not contact the credit card company to ensure that number has actually been issued and that the account is in good standing. </p> 
      <h2><span class="mw-headline" id="Java">Java</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/wiki/index.php?title=Credit_Card_Validator&amp;action=edit&amp;section=1" title="Edit section: Java">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
      <pre>
// ValidateCreditCard.java, guts of validation logic also contains class LCR
// (LegalCardRange)
/**
 * &lt;pre&gt;
 *                Validates Credit Card numbers, and determines
 *                which credit card company they belong to.
 *
 *                1. if a credit card number is valid,
 *                2. which credit card vendor handles that number.
 *
 *                It validates the prefix and the checkdigit. It does
 *                *not* contact the credit card company to ensure that number
 *                has actually been issued and that the account is in good
 *                standing.
 *
 *                It will also tell you which of the following credit card
 *                companies issued the card: Amex, Diners Club, Carte Blanche,
 *                Discover, enRoute, JCB, MasterCard or Visa.
 *
 *                @author copyright (c) 1999-2008 Roedy Green, Canadian Mind Products
 *                Freeware that may be copied and used freely for any purpose
 *                but military.
 *
 *                If you make more than casual use, please sent a registration fee of
 *                $10 either US or Canadian to:
 *                CREDITCARD REGISTRATIONS
 *                Roedy Green
 *                Canadian Mind Products
 *                #101 - 2536 Wark Street
 *                Victoria, BC Canada V8T 4G8
 *                tel: (250) 361-9093
 *                roedy g at mindprod dotcom
 *                http://mindprod.com CHECK HERE FOR LATEST VERSION!!
 *
 *                Futures:
 *                - provide a set of icons to use to represent the various
 *                  credit card companies.
 *                - provide a smart keyable object that generates prompts etc.
 *
 *                version 1.0 1999-08-17
 *                            - posted to comp.lang.java.programmer
 *                version 1.1 1999-08-17
 *                            - add vendorToString, rename isValid
 *                            - implement patterns for 13-16 digit numbers for toPrettyString
 *                version 1.2 1999-08-17
 *                            - separate enumerations for too few and too many digits.
 *                version 1.3 1999-08-19
 *                            - ignore dashes in numbers
 * </pre> 
      <pre>*/
</pre> 
      <p>package com.mindprod.creditcard; </p>
      <p>import static com.mindprod.creditcard.Vendor.*; </p>
      <p>/** </p> 
      <pre>* logic to determine if a credit card number is valid. no GUI, just calculation.
*
* @author Roedy Green
*/
</pre> 
      <p>public final class ValidateCreditCard </p> 
      <pre>   {
</pre> 
      <p>// ------------------------------ FIELDS ------------------------------ </p> 
      <pre>   /**
    * true if debugging output wanted
    */
   private static final boolean DEBUGGING = false;
</pre> 
      <pre>   /**
    * Used to speed up findMatchingRange by caching the last hit.
    */
   private static int cachedLastFind;
</pre> 
      <pre>   /**
    * ranges of credit card number that belong to each company. buildRanges initialises.
    */
   private static LCR[] ranges;
</pre> 
      <p>// -------------------------- PUBLIC STATIC METHODS -------------------------- </p> 
      <pre>   /**
    * Determine if the credit card number is valid, i.e. has good prefix and checkdigit. Does _not_ ask the credit card
    * company if this card has been issued or is in good standing.
    *
    * @param creditCardNumber number on card.
    *
    * @return true if card number is good.
    */
   public static boolean isValid( long creditCardNumber )
       {
       Vendor vendor = matchVendor( creditCardNumber );
       if ( vendor.isError() )
           {
           return false;
           }
       else
           {
           // we have a match
           if ( vendor.hasCheckDigit() )
               {
               // there is a checkdigit to be validated
               /*
                * Manual method MOD 10 checkdigit 706-511-227 7 0 6 5 1 1 2 2 7
                * 2 * 2 * 2 * 2 --------------------------------- 7 + 0 + 6
                * +1+0+ 1 + 2 + 2 + 4 = 23 23 MOD 10 = 3 10 - 3 = 7 -- the
                * check digit Note digits of multiplication results must be
                * added before sum. Computer Method MOD 10 checkdigit
                * 706-511-227 7 0 6 5 1 1 2 2 7 Z Z Z Z
                * --------------------------------- 7 + 0 + 6 + 1 + 1 + 2 + 2 +
                * 4 + 7 = 30 30 MOD 10 had better = 0
                */
               long number = creditCardNumber;
               int checksum = 0;
               // work right to left
               for ( int place = 0; place &lt; 16; place++ )
                   {
                   int digit = (int) ( number&nbsp;% 10 );
                   number /= 10;
                   if ( ( place &amp; 1 ) == 0 )
                       {
                       // even position (0-based from right), just add digit
                       checksum += digit;
                       }
                   else
                       {// odd position (0-based from right), must double
                       // and add
                       checksum += z( digit );
                       }
                   if ( number == 0 )
                       {
                       break;
                       }
                   }// end for
               // good checksum should be 0 mod 10
               return ( checksum&nbsp;% 10 ) == 0;
               }
           else
               {
               return true;// no checksum needed
               }
           }// end if have match
       }// end isValid
</pre> 
      <pre>   /**
    * Finds a matching range in the ranges array for a given creditCardNumber.
    *
    * @param creditCardNumber number on card.
    *
    * @return index of matching range, or NOT_ENOUGH_DIGITS or UNKNOWN_VENDOR on failure.
    */
   public static Vendor matchVendor( long creditCardNumber )
       {
       if ( creditCardNumber &lt; 1000000000000L )
           {
           return NOT_ENOUGH_DIGITS;
           }
       if ( creditCardNumber &gt; 9999999999999999L )
           {
           return TOO_MANY_DIGITS;
           }
       // check the cached index first, where we last found a number.
       if ( ranges[ cachedLastFind ].low &lt;= creditCardNumber
            &amp;&amp; creditCardNumber &lt;= ranges[ cachedLastFind ].high )
           {
           return ranges[ cachedLastFind ].vendor;
           }
       for ( int i = 0; i &lt; ranges.length; i++ )
           {
           if ( ranges[ i ].low &lt;= creditCardNumber
                &amp;&amp; creditCardNumber &lt;= ranges[ i ].high )
               {
               // we have a match
               cachedLastFind = i;
               return ranges[ i ].vendor;
               }
           }// end for
       return UNKNOWN_VENDOR;
       }// end matchVendor
</pre> 
      <pre>   /**
    * convert a String to a long. The routine is very forgiving. It ignores invalid chars, lead trail, embedded spaces,
    * decimal points etc, AND minus signs.
    *
    * @param numStr the String containing the number to be converted to long.
    *
    * @return long value of the string found, ignoring junk characters. May be negative.
    *
    * @throws NumberFormatException if the number is too big to fit in a long.
    * @see com.mindprod.common11.StringTools#parseDirtyLong(String)
    */
   public static long parseDirtyLong( String numStr )
       {
       numStr = numStr.trim();
       // strip commas, spaces, + etc, AND -
       StringBuffer b = new StringBuffer( numStr.length() );
       for ( int i = 0; i &lt; numStr.length(); i++ )
           {
           char c = numStr.charAt( i );
           if ( '0' &lt;= c &amp;&amp; c &lt;= '9' )
               {
               b.append( c );
               }
           }// end for
       numStr = b.toString();
       if ( numStr.length() == 0 )
           {
           return 0;
           }
       return Long.parseLong( numStr );
       }// end parseDirtyLong
</pre> 
      <pre>   // From <a rel="nofollow" class="external free" href="http://www.icverify.com/">http://www.icverify.com/</a>
   // Vendor Prefix len checkdigit
   // MASTERCARD 51-55 16 mod 10
   // VISA 4 13, 16 mod 10
   // AMEX 34,37 15 mod 10
   // Diners Club/
   // Carte Blanche
   // 300-305 14
   // 36 14
   // 38 14 mod 10
   // Discover 6011 16 mod 10
   // enRoute 2014 15
   // 2149 15 any
   // JCB 3 16 mod 10
   // JCB 2131 15
   // 1800 15 mod 10
</pre> 
      <pre>   /**
    * Convert a creditCardNumber as long to a formatted String. Currently it breaks 16-digit numbers into groups of 4.
    *
    * @param creditCardNumber number on card.
    *
    * @return String representation of the credit card number.
    */
   public static String toPrettyString( long creditCardNumber )
       {
       String plain = Long.toString( creditCardNumber );
       // int i = findMatchingRange(creditCardNumber);
       int length = plain.length();
</pre> 
      <pre>       switch ( length )
           {
           case 12:
               // 12 pattern 3-3-3-3
               return plain.substring( 0, 3 )
                      + ' '
                      + plain.substring( 3, 6 )
                      + ' '
                      + plain.substring( 6, 9 )
                      + ' '
                      + plain.substring( 9, 12 );
</pre> 
      <pre>           case 13:
               // 13 pattern 4-3-3-3
               return plain.substring( 0, 4 )
                      + ' '
                      + plain.substring( 4, 7 )
                      + ' '
                      + plain.substring( 7, 10 )
                      + ' '
                      + plain.substring( 10, 13 );
</pre> 
      <pre>           case 14:
               // 14 pattern 2-4-4-4
               return plain.substring( 0, 2 )
                      + ' '
                      + plain.substring( 2, 6 )
                      + ' '
                      + plain.substring( 6, 10 )
                      + ' '
                      + plain.substring( 10, 14 );
</pre> 
      <pre>           case 15:
               // 15 pattern 3-4-4-4
               return plain.substring( 0, 3 )
                      + ' '
                      + plain.substring( 3, 7 )
                      + ' '
                      + plain.substring( 7, 11 )
                      + ' '
                      + plain.substring( 11, 15 );
</pre> 
      <pre>           case 16:
               // 16 pattern 4-4-4-4
               return plain.substring( 0, 4 )
                      + ' '
                      + plain.substring( 4, 8 )
                      + ' '
                      + plain.substring( 8, 12 )
                      + ' '
                      + plain.substring( 12, 16 );
</pre> 
      <pre>           case 17:
               // 17 pattern 1-4-4-4-4
               return plain.substring( 0, 1 )
                      + ' '
                      + plain.substring( 1, 5 )
                      + ' '
                      + plain.substring( 5, 9 )
                      + ' '
                      + plain.substring( 9, 13 )
                      + ' '
                      + plain.substring( 13, 17 );
</pre> 
      <pre>           default:
               // 0..11, 18+ digits long
               // plain
               return plain;
           }// end switch
       }// end toPrettyString
</pre> 
      <p>// -------------------------- STATIC METHODS -------------------------- </p> 
      <pre>   static
       {
       // now that all enum constants defined
       buildRanges();
       }
</pre> 
      <pre>   /**
    * build table of which ranges of credit card number belong to which vendor
    */
   private static void buildRanges()
       {
       // careful, no lead zeros allowed
       // low high len vendor
       ranges = new LCR[]{
               new LCR( 4000000000000L, 4999999999999L/* 13 */, VISA ),
               new LCR( 30000000000000L, 30599999999999L/* 14 */, DINERS ),
               new LCR( 36000000000000L, 36999999999999L/* 14 */, DINERS ),
               new LCR( 38000000000000L, 38999999999999L/* 14 */, DINERS ),
               new LCR( 180000000000000L, 180099999999999L/* 15 */, JCB ),
               new LCR( 201400000000000L, 201499999999999L/* 15 */, ENROUTE ),
               new LCR( 213100000000000L, 213199999999999L/* 15 */, JCB ),
               new LCR( 214900000000000L, 214999999999999L/* 15 */, ENROUTE ),
               new LCR( 340000000000000L, 349999999999999L/* 15 */, AMEX ),
               new LCR( 370000000000000L, 379999999999999L/* 15 */, AMEX ),
               new LCR( 3000000000000000L, 3999999999999999L/* 16 */, JCB ),
               new LCR( 4000000000000000L, 4999999999999999L/* 16 */, VISA ),
               new LCR( 5100000000000000L, 5599999999999999L/* 16 */, MASTERCARD ),
               new LCR( 6011000000000000L, 6011999999999999L/* 16 */, DISCOVER ) };
       }
</pre> 
      <pre>   /**
    * used in computing checksums, doubles and adds resulting digits.
    *
    * @param digit the digit to be doubled, and digit summed.
    *
    * @return // 0-&gt;0 1-&gt;2 2-&gt;4 3-&gt;6 4-&gt;8 5-&gt;1 6-&gt;3 7-&gt;5 8-&gt;7 9-&gt;9
    */
   private static int z( int digit )
       {
       if ( digit == 0 )
           {
           return 0;
           }
       else
           {
           return ( digit * 2 - 1 )&nbsp;% 9 + 1;
           }
       }
</pre> 
      <p>// --------------------------- main() method --------------------------- </p> 
      <pre>   /**
    * Test driver
    *
    * @param args not used
    */
   public static void main( String[] args )
       {
       if ( DEBUGGING )
           {
           System.out.println( matchVendor( 0 ) );// not enough digits
           System.out.println( matchVendor( 6011222233334444L ) );// Discover
           System.out.println( matchVendor( 6010222233334444L ) );// unknown vendor
           System.out.println( matchVendor( 4000000000000L ) );// Visa
           System.out.println( matchVendor( 4999999999999L ) );// Visa
</pre> 
      <pre>           System.out.println( isValid( 0 ) );// false
           System.out.println( isValid( 6010222233334444L ) );// false
           System.out.println( isValid( 4000000000000L ) );// false
           System.out.println( isValid( 4000000000006L ) );// true
           System.out.println( isValid( 4000000000009L ) );// false
           System.out.println( isValid( 4999999999999L ) );// false
           System.out.println( isValid( 378888888888858L ) );// true, Amex
           System.out.println( isValid( 4888888888888838L ) );// true, Visa;
           System.out.println( isValid( 5588888888888838L ) );// true, MC
           System.out.println( isValid( 6011222233334444L ) );// true, Discover
           System.out.println( parseDirtyLong( "123,444 999=z/99" ) );// 12344499999
</pre> 
      <pre>           System.out.println( toPrettyString( 0 ) );// 0
</pre> 
      <pre>           System.out.println( toPrettyString( 6011222233334444L ) );// 6011 2222 3333 4444
           System.out.println( toPrettyString( 6010222233334444L ) );// 6010 2222 3333 4444
           System.out.println( toPrettyString( 4000000000000L ) );// 4000 000 000 000
           System.out.println( toPrettyString( 4000000000006L ) );// 4000 000 000 006
           System.out.println( toPrettyString( 4000000000009L ) );// 4000 000 000 009
           System.out.println( toPrettyString( 3123456789012341L ) );// 3123 4567 8901 2341
           System.out.println( toPrettyString( 999999999990L ) );// 999 999 999 990
           System.out.println( toPrettyString( 4000000000006L ) );// 4000 000 000 006
           System.out.println( toPrettyString( 30000000000004L ) );// 30 0000 0000 0004
           System.out.println( toPrettyString( 180000000000002L ) );// 180 0000 0000 0002
           System.out.println( toPrettyString( 3000000000000004L ) );// 3000 0000 0000 0004
           System.out.println( toPrettyString( 3000000000000005L ) );// 3000 0000 0000 0005
           System.out.println( toPrettyString( 13000000000000005L ) );// 1 3000 0000 0000 0005
</pre> 
      <pre>           System.out.println( VISA.getName() );// Visa
           System.out.println( UNKNOWN_VENDOR.getName() );// Error: unknown credit card company
           }// end if debugging
       }// end main
   }
</pre> 
      <p>/** </p> 
      <pre>* Describes a single Legal Card Range
*/
</pre> 
      <p>final class LCR </p> 
      <pre>   {
</pre> 
      <p>// ------------------------------ FIELDS ------------------------------ </p> 
      <pre>   /**
    * enumeration credit card service
    */
   public final Vendor vendor;
</pre> 
      <pre>   /**
    * low and high bounds on range covered by this vendor
    */
   public final long high;
</pre> 
      <pre>   /**
    * low bounds on range covered by this vendor
    */
   public final long low;
</pre> 
      <p>// -------------------------- PUBLIC INSTANCE METHODS -------------------------- </p> 
      <pre>   /**
    * public constructor
    *
    * @param low    lowest credit card number in range.
    * @param high   highest credit card number in range
    * @param vendor enum constant for vendor
    */
   public LCR( long low,
               long high,
               Vendor vendor
   )
       {
       this.low = low;
       this.high = high;
</pre> 
      <pre>       this.vendor = vendor;
       }// end public constructor
   }
</pre> 
      <p>&lt;/pre&gt; </p> 
      <!-- 
NewPP limit report
CPU time usage: 0.021 seconds
Real time usage: 0.026 seconds
Preprocessor visited node count: 6/1000000
Preprocessor generated node count: 28/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
--> 
      <!-- Saved in parser cache with key codecodex:pcache:idhash:1988-0!*!*!*!*!*!* and timestamp 20171003061710
 --> 
     </div>
     <div class="printfooter">
       Retrieved from "
      <a href="http://www.codecodex.com/wiki/index.php?title=Credit_Card_Validator&amp;oldid=9025">http://www.codecodex.com/wiki/index.php?title=Credit_Card_Validator&amp;oldid=9025</a>"
     </div> 
     <div id="catlinks">
      <div id="catlinks" class="catlinks">
       <div id="mw-normal-catlinks" class="mw-normal-catlinks">
        <a href="/wiki/Special:Categories" title="Special:Categories">Category</a>: 
        <ul>
         <li><a href="/wiki/Category:Java" title="Category:Java">Java</a></li>
        </ul>
       </div>
      </div>
     </div> 
     <!-- end content --> 
    </div>
    <!-- end of MAINCONTENT div --> 
   </div>
   <!-- end of MBODY div --> 
   <div id="footer">
    <table>
     <tbody>
      <tr>
       <td align="left" width="1%" nowrap> </td>
       <td align="center"> <span id="f-lastmod"> This page was last modified on 6 January 2012, at 22:08.</span> <span id="f-viewcount">This page has been accessed 7,754 times. </span> 
        <ul id="f-list"> 
         <li id="f-about"><a href="/wiki/CodeCodex:About" title="CodeCodex:About">About CodeCodex</a></li> 
         <li id="f-disclaimer"><a href="/wiki/CodeCodex:General_disclaimer" title="CodeCodex:General disclaimer">Disclaimers</a></li> 
        </ul></td>
       <td align="right" width="1%" nowrap>
        <div id="f-poweredbyico">
         <a href="//www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" height="31" width="88" alt="Powered by MediaWiki"></a>
        </div></td>
      </tr>
     </tbody>
    </table> 
   </div>
   <!-- end of the FOOTER div --> 
  </div>
  <!-- end of the CONTAINER div --> 
  <!-- Served in 0.860 secs. --> 
  <!-- dailycred --> 
  <script type="text/javascript">
(function() {
  var dc, dc_opts, url;
  dc_opts = {
    clientId: "3ec86370-8353-4785-a876-7ec91b07bf3b",
    home: "https://www.dailycred.com",
    personaAudience: "",
    type: "",
    event_title: ""
  };
  dc = document.createElement("script");
  url = dc_opts.home + "/public/js/cred.coffee";
  dc.src = url;
  document.body.appendChild(dc);
  window.dc_opts = dc_opts;
}).call(this);
</script> 
  <!-- end dailycred -->   
 </body>
</html>