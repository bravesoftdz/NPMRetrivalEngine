<!doctype html>
<html class="client-nojs" lang="en" dir="ltr">
 <head> 
  <meta charset="UTF-8"> 
  <title>Serial Programming/Serial Java - Wikibooks, open books for an open world</title> 
  <script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script> 
  <script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Serial_Programming/Serial_Java","wgTitle":"Serial Programming/Serial Java","wgCurRevisionId":3214897,"wgRevisionId":3214897,"wgArticleId":21637,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Serial Programming","Section stubs"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Serial_Programming/Serial_Java","wgRelevantArticleId":21637,"wgRequestId":"WdFrWwpAEKoAAEUrROEAAABS","wgIsProbablyEditable":true,"wgRelevantPageIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{"value":{"levels":3,"quality":2,"pristine":3}}},"wgStableRevisionId":3178416,"wgWikiEditorEnabledModules":{"toolbar":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":false,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en","usePageImages":false,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFExpandAllSectionsUserOption":false,"wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":false},"wgULSCurrentAutonym":"English","wgNoticeProject":"wikibooks","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgCentralAuthMobileDomain":false,"wgVisualEditorToolbarScrollOffset":0,"wgVisualEditorUnsupportedEditParams":["undo","undoafter","veswitched"],"wgEditSubmitButtonLabelPublish":true});mw.loader.state({"ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"ready","user.tokens":"loading","ext.pygments":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","ext.flaggedRevs.basic":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.tokens@1dqfd7l",function ( $, jQuery, require, module ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*/

});mw.loader.load(["site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.toc","mediawiki.searchSuggest","ext.gadget.wikidialog","ext.gadget.commons-file","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.compactlinks","ext.uls.interface","ext.centralNotice.geoIP","ext.centralNotice.startUp","ext.flaggedRevs.advanced","skins.vector.js"]);});</script> 
  <link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.flaggedRevs.basic%7Cext.pygments%2CwikimediaBadges%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"> 
  <script async src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script> 
  <meta name="ResourceLoaderDynamicStyles" content=""> 
  <link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"> 
  <meta name="generator" content="MediaWiki 1.31.0-wmf.1"> 
  <meta name="referrer" content="origin-when-cross-origin"> 
  <link rel="alternate" type="application/x-wiki" title="Edit" href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit"> 
  <link rel="edit" title="Edit" href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit"> 
  <link rel="shortcut icon" href="/static/favicon/wikibooks.ico"> 
  <link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikibooks (en)"> 
  <link rel="EditURI" type="application/rsd+xml" href="//en.wikibooks.org/w/api.php?action=rsd"> 
  <link rel="license" href="//creativecommons.org/licenses/by-sa/3.0/"> 
  <link rel="alternate" type="application/atom+xml" title="Wikibooks Atom feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom"> 
  <link rel="canonical" href="https://en.wikibooks.org/wiki/Serial_Programming/Serial_Java"> 
  <link rel="dns-prefetch" href="//login.wikimedia.org"> 
  <link rel="dns-prefetch" href="//meta.wikimedia.org"> 
  <!--[if lt IE 9]><script src="/resources/lib/html5shiv/html5shiv.min.js"></script><![endif]--> 
 </head> 
 <body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Serial_Programming_Serial_Java rootpage-Serial_Programming vector-nav-directionality skin-vector action-view"> 
  <div id="mw-page-base" class="noprint"></div> 
  <div id="mw-head-base" class="noprint"></div> 
  <div id="content" class="mw-body" role="main"> 
   <a id="top"></a> 
   <div id="siteNotice" class="mw-body-content">
    <!-- CentralNotice -->
   </div> 
   <div class="mw-indicators mw-body-content"> 
   </div> 
   <h1 id="firstHeading" class="firstHeading" lang="en">Serial Programming/Serial Java</h1> 
   <div id="bodyContent" class="mw-body-content"> 
    <div id="siteSub" class="noprint">
     From Wikibooks, open books for an open world
    </div> 
    <div id="contentSub">
     <span class="subpages">&lt; <a href="/wiki/Serial_Programming" title="Serial Programming">Serial Programming</a></span>
     <div id="mw-fr-revisiontag" class="flaggedrevs_basic flaggedrevs_draft_notsynced plainlinks noprint nomobile">
      <img class="flaggedrevs-icon" src="/w/extensions/FlaggedRevs/frontend/modules/img/1.png" alt="Unreviewed changes are displayed on this page" title="Unreviewed changes are displayed on this page">The 
      <a class="external text" href="//en.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;stable=1">latest reviewed version</a> was 
      <a class="external text" href="//en.wikibooks.org/w/index.php?title=Special:Log&amp;type=review&amp;page=Serial_Programming/Serial_Java">checked</a> on 
      <i>17 March 2017</i>. There are 
      <a class="external text" href="//en.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;oldid=3178416&amp;diff=cur&amp;diffonly=0">2 pending changes</a> awaiting review.
     </div> 
    </div> 
    <div id="jump-to-nav" class="mw-jump">
      Jump to: 
     <a href="#mw-head">navigation</a>, 
     <a href="#p-search">search</a> 
    </div> 
    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
     <div class="mw-parser-output">
      <div style="background:#f2fff2; border:1px solid #bfffbf; padding:0.5em 1em; margin:0.5em 0em;"> 
       <p><b><a href="/wiki/Serial_Programming" title="Serial Programming">Serial Programming</a></b>: <a href="/wiki/Serial_Programming/Introduction_and_OSI_Model" title="Serial Programming/Introduction and OSI Model">Introduction and OSI Network Model</a> -- <a href="/wiki/Serial_Programming/RS-232_Connections" title="Serial Programming/RS-232 Connections">RS-232 Wiring and Connections</a> -- <a href="/wiki/Serial_Programming/Typical_RS232_Hardware_Configuration" title="Serial Programming/Typical RS232 Hardware Configuration">Typical RS232 Hardware Configuration</a> -- <a href="/wiki/Serial_Programming/8250_UART_Programming" title="Serial Programming/8250 UART Programming">8250 UART</a> -- <a href="/wiki/Serial_Programming/DOS_Programming" title="Serial Programming/DOS Programming">DOS</a> -- <a href="/wiki/Serial_Programming/MAX232_Driver_Receiver" title="Serial Programming/MAX232 Driver Receiver">MAX232 Driver/Receiver Family</a> -- <a href="/wiki/Serial_Programming/Windows_TAPI" title="Serial Programming/Windows TAPI">TAPI Communications In Windows</a> -- <a href="/wiki/Serial_Programming/Serial_Linux" title="Serial Programming/Serial Linux">Linux and Unix</a> -- <a class="mw-selflink selflink">Java</a> -- <a href="/wiki/Serial_Programming/Modems_and_AT_Commands" title="Serial Programming/Modems and AT Commands">Hayes-compatible Modems and AT Commands</a> -- <a href="/wiki/Serial_Programming/USB" title="Serial Programming/USB">Universal Serial Bus (USB)</a> -- <a href="/wiki/Serial_Programming/Forming_Data_Packets" title="Serial Programming/Forming Data Packets">Forming Data Packets</a> -- <a href="/wiki/Serial_Programming/Error_Correction_Methods" title="Serial Programming/Error Correction Methods">Error Correction Methods</a> -- <a href="/w/index.php?title=Serial_Programming/Bi-directional_Communication&amp;action=edit&amp;redlink=1" class="new" title="Serial Programming/Bi-directional Communication (does not exist)">Two Way Communication</a> -- <a href="/w/index.php?title=Serial_Programming/Packet_Recovery&amp;action=edit&amp;redlink=1" class="new" title="Serial Programming/Packet Recovery (does not exist)">Packet Recovery Methods</a> -- <a href="/w/index.php?title=Serial_Programming/Serial_Networking&amp;action=edit&amp;redlink=1" class="new" title="Serial Programming/Serial Networking (does not exist)">Serial Data Networks</a> -- <a href="/w/index.php?title=Serial_Programming/Application_Messaging&amp;action=edit&amp;redlink=1" class="new" title="Serial Programming/Application Messaging (does not exist)">Practical Application Development</a> -- <a href="/wiki/Serial_Programming/IP_Over_Serial_Connections" title="Serial Programming/IP Over Serial Connections">IP Over Serial Connections</a></p> 
      </div> 
      <p></p> 
      <div id="toc" class="toc"> 
       <div class="toctitle"> 
        <h2>Contents</h2> 
       </div> 
       <ul> 
        <li class="toclevel-1 tocsection-1"><a href="#Using_Java_for_Serial_Communication"><span class="tocnumber">1</span> <span class="toctext">Using Java for Serial Communication</span></a> 
         <ul> 
          <li class="toclevel-2 tocsection-2"><a href="#Introduction"><span class="tocnumber">1.1</span> <span class="toctext">Introduction</span></a></li> 
          <li class="toclevel-2 tocsection-3"><a href="#Getting_started"><span class="tocnumber">1.2</span> <span class="toctext">Getting started</span></a></li> 
          <li class="toclevel-2 tocsection-4"><a href="#Installation"><span class="tocnumber">1.3</span> <span class="toctext">Installation</span></a> 
           <ul> 
            <li class="toclevel-3 tocsection-5"><a href="#General_Issues"><span class="tocnumber">1.3.1</span> <span class="toctext">General Issues</span></a></li> 
            <li class="toclevel-3 tocsection-6"><a href="#Webstart"><span class="tocnumber">1.3.2</span> <span class="toctext">Webstart</span></a> 
             <ul> 
              <li class="toclevel-4 tocsection-7"><a href="#JavaComm"><span class="tocnumber">1.3.2.1</span> <span class="toctext">JavaComm</span></a></li> 
              <li class="toclevel-4 tocsection-8"><a href="#RxTx"><span class="tocnumber">1.3.2.2</span> <span class="toctext">RxTx</span></a></li> 
              <li class="toclevel-4 tocsection-9"><a href="#jSerialComm"><span class="tocnumber">1.3.2.3</span> <span class="toctext">jSerialComm</span></a></li> 
             </ul> </li> 
           </ul> </li> 
         </ul> </li> 
        <li class="toclevel-1 tocsection-10"><a href="#JavaComm_API"><span class="tocnumber">2</span> <span class="toctext">JavaComm API</span></a> 
         <ul> 
          <li class="toclevel-2 tocsection-11"><a href="#Introduction_2"><span class="tocnumber">2.1</span> <span class="toctext">Introduction</span></a></li> 
          <li class="toclevel-2 tocsection-12"><a href="#Download_.26_Installation"><span class="tocnumber">2.2</span> <span class="toctext">Download &amp; Installation</span></a> 
           <ul> 
            <li class="toclevel-3 tocsection-13"><a href="#Download"><span class="tocnumber">2.2.1</span> <span class="toctext">Download</span></a></li> 
            <li class="toclevel-3 tocsection-14"><a href="#Installation_2"><span class="tocnumber">2.2.2</span> <span class="toctext">Installation</span></a></li> 
            <li class="toclevel-3 tocsection-15"><a href="#Finding_the_desired_serial_Port"><span class="tocnumber">2.2.3</span> <span class="toctext">Finding the desired serial Port</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2 tocsection-16"><a href="#Initialize_a_Serial_Port"><span class="tocnumber">2.3</span> <span class="toctext">Initialize a Serial Port</span></a></li> 
          <li class="toclevel-2 tocsection-17"><a href="#Simple_Data_Transfer"><span class="tocnumber">2.4</span> <span class="toctext">Simple Data Transfer</span></a> 
           <ul> 
            <li class="toclevel-3 tocsection-18"><a href="#Simple_Writing_of_Data"><span class="tocnumber">2.4.1</span> <span class="toctext">Simple Writing of Data</span></a></li> 
            <li class="toclevel-3 tocsection-19"><a href="#Simple_Reading_of_Data_.28Polling.29"><span class="tocnumber">2.4.2</span> <span class="toctext">Simple Reading of Data (Polling)</span></a></li> 
            <li class="toclevel-3 tocsection-20"><a href="#Problems_with_the_simple_Reading_.2F_Writing"><span class="tocnumber">2.4.3</span> <span class="toctext">Problems with the simple Reading / Writing</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2 tocsection-21"><a href="#Event_Driven_Serial_Communication"><span class="tocnumber">2.5</span> <span class="toctext">Event Driven Serial Communication</span></a> 
           <ul> 
            <li class="toclevel-3 tocsection-22"><a href="#Introduction_3"><span class="tocnumber">2.5.1</span> <span class="toctext">Introduction</span></a></li> 
            <li class="toclevel-3 tocsection-23"><a href="#Setting_up_a_serial_Event_Handler"><span class="tocnumber">2.5.2</span> <span class="toctext">Setting up a serial Event Handler</span></a></li> 
            <li class="toclevel-3 tocsection-24"><a href="#Writing_of_Data"><span class="tocnumber">2.5.3</span> <span class="toctext">Writing of Data</span></a> 
             <ul> 
              <li class="toclevel-4 tocsection-25"><a href="#Setting_up_a_separate_Thread_for_Writing"><span class="tocnumber">2.5.3.1</span> <span class="toctext">Setting up a separate Thread for Writing</span></a> 
               <ul> 
                <li class="toclevel-5 tocsection-26"><a href="#A_simple.2C_thread-safe_Ring_Buffer_Implementation"><span class="tocnumber">2.5.3.1.1</span> <span class="toctext">A simple, thread-safe Ring Buffer Implementation</span></a></li> 
                <li class="toclevel-5 tocsection-27"><a href="#Using_the_Buffer_together_with_Serial_Events"><span class="tocnumber">2.5.3.1.2</span> <span class="toctext">Using the Buffer together with Serial Events</span></a></li> 
               </ul> </li> 
              <li class="toclevel-4 tocsection-28"><a href="#Usage_of_OUTPUT_BUFFER_EMPTY_Event_in_Writing"><span class="tocnumber">2.5.3.2</span> <span class="toctext">Usage of OUTPUT_BUFFER_EMPTY Event in Writing</span></a></li> 
             </ul> </li> 
            <li class="toclevel-3 tocsection-29"><a href="#Reading_of_Data"><span class="tocnumber">2.5.4</span> <span class="toctext">Reading of Data</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2 tocsection-30"><a href="#Handling_multiple_Ports_in_one_Application"><span class="tocnumber">2.6</span> <span class="toctext">Handling multiple Ports in one Application</span></a></li> 
          <li class="toclevel-2 tocsection-31"><a href="#Modem_Control"><span class="tocnumber">2.7</span> <span class="toctext">Modem Control</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1 tocsection-32"><a href="#RxTx_2"><span class="tocnumber">3</span> <span class="toctext">RxTx</span></a> 
         <ul> 
          <li class="toclevel-2 tocsection-33"><a href="#Overview_and_Versions"><span class="tocnumber">3.1</span> <span class="toctext">Overview and Versions</span></a></li> 
          <li class="toclevel-2 tocsection-34"><a href="#Converting_a_JavaComm_Application_to_RxTx"><span class="tocnumber">3.2</span> <span class="toctext">Converting a JavaComm Application to RxTx</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1 tocsection-35"><a href="#See_also"><span class="tocnumber">4</span> <span class="toctext">See also</span></a></li> 
       </ul> 
      </div> 
      <p></p> 
      <h2><span class="mw-headline" id="Using_Java_for_Serial_Communication">Using Java for Serial Communication</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=1" title="Edit section: Using Java for Serial Communication">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
      <h3><span class="mw-headline" id="Introduction">Introduction</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=2" title="Edit section: Introduction">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <p>Because of Java's platform-independence, serial interfacing is difficult. Serial interfacing requires a standardized API with platform-specific implementations, which is difficult for Java.</p> 
      <p>Unfortunately, Sun didn't pay much attention to serial communication in Java. Sun has defined a serial communication API, called <a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/index-jsp-141752.html"><i>JavaComm</i></a>, but an implementation of the API was not part of the Java standard edition. Sun provided a reference implementation for a few, but not all Java platforms. Particularly, at the end of 2005 Sun silently withdrew <i>JavaComm</i> support for Windows. Third party implementations for some of the omitted platforms are available. <i>JavaComm</i> hasn't seen much in the way of maintenance activities, only the bare minimum maintenance is performed by Sun, except that Sun apparently responded to pressure from buyers of their own Sun Ray thin clients and adapted JavaComm to this platform while dropping Windows support.</p> 
      <p>This situation, and the fact that Sun originally did not provide a <i>JavaComm</i> implementation for Linux (starting in 2006, they now do) led to the development of the free-software <a rel="nofollow" class="external text" href="http://rxtx.qbang.org/wiki/index.php/Main_Page"><i>RxTx</i></a> library. <i>RxTx</i> is available for a number of platforms, not only Linux. It can be used in conjunction with <i>JavaComm</i> (<i>RxTx</i> providing the hardware-specific drivers), or it can be used stand-alone. When used as a <i>JavaComm</i> driver the bridging between the <i>JavaComm</i> API and <i>RxTx</i> is done by <i>JCL</i> (<i>JavaComm for Linux</i>). <i>JCL</i> is part of the <i>RxTx</i> distribution.</p> 
      <p>Sun's negligence of <i>JavaComm</i> and <i>JavaComm'</i>s particular programming model gained <i>JavaComm</i> the reputation of being unusable. <i>RxTx</i> - if not used as a <i>JavaComm</i> driver - provides a richer interface, but one which is not standardized. <i>RxTx</i> supports more platforms than the existing <i>JavaComm</i> implementations. Recently, <i>RxTx</i> has been adopted to provide the same interface as <i>JavaComm</i>, only that the package names don't match Sun's package names.</p> 
      <p>So, which of the libraries should one use in an application? If maximum portability (for some value of "maximum") is desired, then <i>JavaComm</i> is a good choice. If there is no <i>JavaComm</i> implementation for a particular platform available, but an <i>RxTx</i> implementation is, then <i>RxTx</i> could be used as a driver on that platform for <i>JavaComm</i>. So, by using JavaComm one can support all platforms which are either directly supported by Sun's reference implementation or by RxTx with JCL. This way the application doesn't need to be changed, and can work against just one interface, the standardized <i>JavaComm</i> interface.</p> 
      <p>This module discusses both <i>JavaComm</i> and <i>RxTx</i>. It mainly focuses on demonstrating concepts, not ready-to-run code. Those who want to blindly copy code are referred to the sample code that comes with the packages. Those who want to know what they are doing might find some useful information in this module.</p> 
      <p>jSSC (Java Simple Serial Connector) should also be considered</p> 
      <p>There is also another library called <i>jSerialComm t</i>hat includes all its platform specific files in its jar, this makes it truly portable as there is no installation necessary.</p> 
      <h3><span class="mw-headline" id="Getting_started">Getting started</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=3" title="Edit section: Getting started">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <ul> 
       <li>Learn the basics of <a href="/wiki/Serial_Programming" title="Serial Programming">serial communication and programming</a>.</li> 
       <li>Have the documentation of the device you want to communicate with (e.g. the modem) ready.</li> 
       <li>Set up all hardware and a test environment</li> 
       <li>Use, for example, a terminal program to manually communicate with the device. This is to be sure the test environment is set up correctly and you have understood the commands and responses from the device.</li> 
       <li>Download the API implementation you want to use for your particular operating system</li> 
      </ul> 
      <ul> 
       <li>Read 
        <ul> 
         <li>the JavaComm and/or RxTx installation instruction (and follow it)</li> 
         <li>the API documentation</li> 
         <li>the example source code shipped</li> 
        </ul> </li> 
      </ul> 
      <h3><span class="mw-headline" id="Installation">Installation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=4" title="Edit section: Installation">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <h4><span class="mw-headline" id="General_Issues">General Issues</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=5" title="Edit section: General Issues">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <p>Both <i>JavaComm</i> and <i>RxTX</i> show some installation quirks. It is highly recommended to follow the installation instructions word-for-word. If they say that a jar file or a shared library has to go into a particular directory, then this is meant seriously! If the instructions say that a particular file or device needs to have a specific ownership or access rights, this is also meant seriously. Many installation troubles simply come from not following the instructions precisely.</p> 
      <p>It should especially be noted that some versions of <i>JavaComm</i> come with two installation instructions. One for Java 1.2 and newer, one for Java 1.1. Using the wrong one will result in a non-working installation. On the other hand, some versions/builds/packages of <i>RxTx</i> come with incomplete instructions. In such a case the corresponding source code distribution of <i>RxTx</i> needs to be obtained, which should contain complete instructions.</p> 
      <p>Many linux distributions offer a RxTx package in their repositories (ArchLinux - 'java-rxtx', Debian/Ubuntu - 'librxtx-java'), these packages include only the platform specific parts of the library, but are generally ready to use.</p> 
      <p>It should be further noticed that it is also typical for Windows JDK installations to come with up to three VMs, and thus three extension directories.</p> 
      <ul> 
       <li>One as part of the JDK,</li> 
       <li>one as part of the private JRE which comes with the JDK to run JDK tools, and</li> 
       <li>one as part of the public JRE which comes with the JDK to run applications</li> 
      </ul> 
      <p>Some even claim to have a fourth JRE somewhere in the \Windows directory hierarchy.</p> 
      <p><i>JavaComm</i> should at least be installed as extension in the JDK and in all public JREs.</p> 
      <h4><span class="mw-headline" id="Webstart">Webstart</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=6" title="Edit section: Webstart">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <h5><span class="mw-headline" id="JavaComm">JavaComm</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=7" title="Edit section: JavaComm">edit</a><span class="mw-editsection-bracket">]</span></span></h5> 
      <p>A general problem, both for <i>JavaComm</i> and <i>RxTx</i> is, that they resist installation via <a rel="nofollow" class="external text" href="http://java.sun.com/products/javawebstart/">Java WebStart</a>:</p> 
      <p><i>JavaComm</i> is notorious, because it requires a file called <i>javax.comm.properties</i> to be placed in the JDK lib directory, something which can't be done with Java WebStart. This is particularly sad, because the need for that file is the result of some unnecessary design/decision in <i>JavaComm</i> and could have easily been avoided by the <i>JavaComm</i> designers. Sun constantly refuses to correct this error, citing the mechanism is essential. Which is, they are lying through their teeth when it comes to <i>JavaComm</i>, particular, because Java for a long time has a service provider architecture exactly intended for such purposes.</p> 
      <p>The contents of the properties file is typically just one line, the name of the java class with the native driver, e.g.:</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="n">driver</span><span class="o">=</span><span class="n">com</span><span class="o">.</span><span class="na">sun</span><span class="o">.</span><span class="na">comm</span><span class="o">.</span><span class="na">Win32Driver</span>
</pre>
      </div> 
      <p>The following is a hack which allows to deploy JavaComm via Web Start ignoring that brain-dead properties file. It has serious drawbacks, and might fail with newer JavaComm releases - should Sun ever come around and make a new version.</p> 
      <p>First, turn off the security manager. Some doofus programmer at Sun decided that it would be cool to again and again check for the existence of the dreaded <i>javax.comm.properties</i> file, even after it has been loaded initially, for no other apparent reason than checking for the file.</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="n">System</span><span class="o">.</span><span class="na">setSecurityManager</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</pre>
      </div> 
      <p>Then, when initializing the JavaComm API, initialize the driver manually:</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="n">String</span> <span class="n">driverName</span> <span class="o">=</span> <span class="s">"com.sun.comm.Win32Driver"</span><span class="o">;</span> <span class="c1">// or get as a JNLP property</span>
 <span class="n">CommDriver</span> <span class="n">commDriver</span> <span class="o">=</span> <span class="o">(</span><span class="n">CommDriver</span><span class="o">)</span><span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">driverName</span><span class="o">).</span><span class="na">newInstance</span><span class="o">();</span>
 <span class="n">commDriver</span><span class="o">.</span><span class="na">initialize</span><span class="o">();</span>
</pre>
      </div> 
      <h5><span class="mw-headline" id="RxTx">RxTx</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=8" title="Edit section: RxTx">edit</a><span class="mw-editsection-bracket">]</span></span></h5> 
      <p><i>RxTx</i> on some platforms requires changing ownership and access rights of serial devices. This is also something which can't be done via WebStart.</p> 
      <p>At startup of your program you could ask the user to perform the necessary setup as super user.</p> 
      <p>Further, RxTx has a pattern matching algorithm for identifying "valid" serial device names. This often breaks things when one wants to use non-standard devices, like USB-to-serial converters. This mechanism can be overridden by system properties. See the RxTx installation instruction for details.</p> 
      <h5><span class="mw-headline" id="jSerialComm">jSerialComm</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=9" title="Edit section: jSerialComm">edit</a><span class="mw-editsection-bracket">]</span></span></h5> 
      <p>jSerialComm in contrast to both RxTx and JavaComm is ready to use on many operating Systems and Platforms (e.g. Windows x86/x86_64, Linux x86/x86_64, ARM, and even android - full list in the specific library jar) without any changes. However it still needs permissions to access the device (more information on the <a rel="nofollow" class="external text" href="http://fazecast.github.io/jSerialComm/">jSerialComm Homepage</a>).</p> 
      <h2><span class="mw-headline" id="JavaComm_API">JavaComm API</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=10" title="Edit section: JavaComm API">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
      <h3><span class="mw-headline" id="Introduction_2">Introduction</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=11" title="Edit section: Introduction">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <p>The official API for serial communication in Java is the JavaComm API. This API is not part of the standard Java 2 version. Instead, an implementation of the API has to be downloaded separately. Unfortunately, JavaComm has not received much attention from Sun, and hasn't been really maintained for a long time. From time to time Sun does trivial bug-fixes, but doesn't do the long overdue main overhaul.</p> 
      <p>This section explains the basic operation of the JavaComm API. The provided source code is kept simple to demonstrate important point. It needs to be enhanced when used in a real application.</p> 
      <p>The source code in this chapter is not the only available example code. The JavaComm download comes with several examples. These examples almost contain more information about using the API than the API documentation. Unfortunately, Sun does not provide any real tutorial or some introductory text. Therefore, it is worth studying the example code to understand the mechanisms of the API. Still, the API documentation should be studied, too. But the best way is to study the examples and play with them. Due to the lack of easy-to-use application and people's difficulty in understanding the APIs programming model, the API is often bad-mouthed. The API is better than its reputation, and functional. But no more.</p> 
      <p>The API uses a callback mechanism to inform the programmer about newly arriving data. It is also a good idea to study this mechanism instead of relying on polling the port. Unlike other callback interfaces in Java (e.g. in the GUI), this one only allows one listener listening to events. If multiple listeners require to listen to serial events, the one primary listener has to be implemented in a way that it dispatches the information to other secondary listeners.</p> 
      <h3><span class="mw-headline" id="Download_.26_Installation">Download &amp; Installation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=12" title="Edit section: Download &amp; Installation">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <h4><span class="mw-headline" id="Download">Download</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=13" title="Edit section: Download">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <p>Sun's <a rel="nofollow" class="external text" href="http://java.sun.com/products/javacomm/">JavaComm</a> web page points to a <a rel="nofollow" class="external text" href="http://www.sun.com/download/products.xml?id=43208d3d">download location</a>. Under this location Sun currently (2007) provides JavaComm 3.0 implementations for Solaris/SPARC, Solaris/x86, and Linux x86. Downloading requires to have registered for a Sun Online Account. The download page provides a link to the registration page. The purpose of this registration is unclear. One can download JDKs and JREs without registration, but for the almost trivial JavaComm Sun cites legal and governmental restrictions on the distribution and exportation of software.</p> 
      <p>The Windows version of JavaComm is no longer officially available, and Sun has - against their own product end-of-live policy - not made it available in the <a rel="nofollow" class="external text" href="http://java.sun.com/products/archive/">Java products archive</a>. However, the 2.0 Windows version (javacom 2.0) is still downloadable from <a rel="nofollow" class="external text" href="http://wind.lcs.mit.edu/download/">here</a>.</p> 
      <h4><span class="mw-headline" id="Installation_2">Installation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=14" title="Edit section: Installation">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <p>Follow the installation instructions that come with the download. Some versions of JavaComm 2.0 come with two installation instructions. The most obvious of the two instructions is unfortunately the wrong one, intended for ancient Java 1.1 environments. The information referring to the also ancient Java 1.2 (jdk1.2.html) is the right one.</p> 
      <p>Particularly Windows users are typically not aware that they have copies of the same VM installed in several locations (typically three to four). Some IDEs also like to come with own, private JRE/JDK installations, as do some Java applications. The installation needs to be repeated for every VM installation (JDKs and JREs) which should be used in conjunction with the development and execution of a serial application.</p> 
      <p>IDEs typically have IDE-specific ways of how a new library (classes and documentation) is made known to the IDE. Often a library like JavaComm not only needs to be made known to the IDE as such, but also to each project that is supposed to use the library. Read the IDE's documentation. It should be noted that the old JavaComm 2.0 version comes with JavaDoc API documentation that is structured in the historic Java 1.0 JavaDoc layout. Some modern IDEs are no longer aware of this structure and can't integrate the JavaComm 2.0 documentation into their help system. In such a case an external browser is needed to read the documentation (a recommended activity ...).</p> 
      <p>Once the software is installed it is recommended to examine the samples and JavaDoc directories. It makes sense to build and run one of the sample applications to verify that the installation is correct. The sample applications typically need some minor adaptations in order to run on a particular platform (e.g. changes to the hard-coded com port identifiers). It is a good idea to have some serial hardware, like cabling, a null modem, a breakout box, a real modem, PABX and others available when trying out a sample application. <a href="/wiki/Serial_Programming:RS-232_Connections" class="mw-redirect" title="Serial Programming:RS-232 Connections">Serial_Programming:RS-232 Connections</a> and <a href="/wiki/Serial_Programming:Modems_and_AT_Commands" class="mw-redirect" title="Serial Programming:Modems and AT Commands">Serial_Programming:Modems and AT Commands</a> provide some information on how to set up the hardware part of a serial application development environment.</p> 
      <h4><span class="mw-headline" id="Finding_the_desired_serial_Port">Finding the desired serial Port</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=15" title="Edit section: Finding the desired serial Port">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <p>The first three things to do when programming serial lines with JavaComm are typically</p> 
      <ol> 
       <li>to enumerate all serial ports (port identifiers) available to JavaComm,</li> 
       <li>to select the desired port identifier from the available ones, and</li> 
       <li>to acquire the port via the port identifier.</li> 
      </ol> 
      <p>Enumerating and selecting the desired port identifier is typically done in one loop:</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="kn">import</span> <span class="nn">javax.comm.*</span><span class="o">;</span>
 <span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
 <span class="o">...</span>
 <span class="c1">//</span>
 <span class="c1">// Platform specific port name, here= a Unix name</span>
 <span class="c1">//</span>
 <span class="c1">// NOTE: On at least one Unix JavaComm implementation JavaComm </span>
 <span class="c1">//       enumerates the ports as "COM1" ... "COMx", too, and not</span>
 <span class="c1">//       by their Unix device names "/dev/tty...". </span>
 <span class="c1">//       Yet another good reason to not hard-code the wanted</span>
 <span class="c1">//       port, but instead make it user configurable.</span>
 <span class="c1">//</span>
 <span class="n">String</span> <span class="n">wantedPortName</span> <span class="o">=</span> <span class="s">"/dev/ttya"</span><span class="o">;</span>
 <span class="c1">//</span>
 <span class="c1">// Get an enumeration of all ports known to JavaComm</span>
 <span class="c1">//</span>
 <span class="n">Enumeration</span> <span class="n">portIdentifiers</span> <span class="o">=</span> <span class="n">CommPortIdentifier</span><span class="o">.</span><span class="na">getPortIdentifiers</span><span class="o">();&lt;</span><span class="n">br</span><span class="o">&gt;</span>
 <span class="c1">//</span>
 <span class="c1">// Check each port identifier if </span>
 <span class="c1">//   (a) it indicates a serial (not a parallel) port, and</span>
 <span class="c1">//   (b) matches the desired name.</span>
 <span class="c1">//</span>
 <span class="n">CommPortIdentifier</span> <span class="n">portId</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>  <span class="c1">// will be set if port found</span>
 <span class="k">while</span> <span class="o">(</span><span class="n">portIdentifiers</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span>
 <span class="o">{</span>
     <span class="n">CommPortIdentifier</span> <span class="n">pid</span> <span class="o">=</span> <span class="o">(</span><span class="n">CommPortIdentifier</span><span class="o">)</span> <span class="n">portIdentifiers</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
     <span class="k">if</span><span class="o">(</span><span class="n">pid</span><span class="o">.</span><span class="na">getPortType</span><span class="o">()</span> <span class="o">==</span> <span class="n">CommPortIdentifier</span><span class="o">.</span><span class="na">PORT_SERIAL</span> <span class="o">&amp;&amp;</span>
        <span class="n">pid</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">wantedPortName</span><span class="o">))</span> 
     <span class="o">{</span>
         <span class="n">portId</span> <span class="o">=</span> <span class="n">pid</span><span class="o">;</span>
         <span class="k">break</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
 <span class="k">if</span><span class="o">(</span><span class="n">portId</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
 <span class="o">{</span>
     <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Could not find serial port "</span> <span class="o">+</span> <span class="n">wantedPortName</span><span class="o">);</span>
     <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
 <span class="o">}</span>
 <span class="c1">//</span>
 <span class="c1">// Use port identifier for acquiring the port</span>
 <span class="c1">//</span>
 <span class="o">...</span>
</pre>
      </div> 
      <table class="notice notice-note noprint" style="background: #f2fff2; border: solid 1px #bfffbf; padding: 0.5em; width: 95%; margin: auto; vertical-align: top; -moz-border-radius:10px;"> 
       <tbody>
        <tr> 
         <td> <p><b>Note:</b><br> JavaComm itself obtains the default list of available serial port identifiers from its platform-specific driver. The list is not really configurable via JavaComm. The method <code>CommPortIdentifier.addPortName()</code> is misleading, since driver classes are platform specific and their implementations are not part of the public API. Depending on the driver, the list of ports might be configurable / expendable in the driver. So if a particular port is not found in JavaComm, sometimes some fiddling with the driver can help.</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Once a port identifier has been found, it can be used to acquire the desired port:</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="c1">//</span>
 <span class="c1">// Use port identifier for acquiring the port</span>
 <span class="c1">//</span>
 <span class="n">SerialPort</span> <span class="n">port</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
 <span class="k">try</span> <span class="o">{</span>
     <span class="n">port</span> <span class="o">=</span> <span class="o">(</span><span class="n">SerialPort</span><span class="o">)</span> <span class="n">portId</span><span class="o">.</span><span class="na">open</span><span class="o">(</span>
         <span class="s">"name"</span><span class="o">,</span> <span class="c1">// Name of the application asking for the port </span>
         <span class="mi">10000</span>   <span class="c1">// Wait max. 10 sec. to acquire port</span>
     <span class="o">);</span>
 <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">PortInUseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
     <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Port already in use: "</span> <span class="o">+</span> <span class="n">e</span><span class="o">);</span>
     <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
 <span class="o">}</span>
 <span class="c1">//</span>
 <span class="c1">// Now we are granted exclusive access to the particular serial</span>
 <span class="c1">// port. We can configure it and obtain input and output streams.</span>
 <span class="c1">//</span>
 <span class="o">...</span>
</pre>
      </div> 
      <h3><span class="mw-headline" id="Initialize_a_Serial_Port">Initialize a Serial Port</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=16" title="Edit section: Initialize a Serial Port">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <p>The initialization of a serial port is straight forward. Either individually set the communication preferences (baud rate, data bits, stop bits, parity) or set them all at once using the setSerialPortParams(...) convenience method.</p> 
      <p>As part of the initialization process the Input and Output streams for communication will be configured in the example.</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
 <span class="o">...</span>
 
 <span class="c1">//</span>
 <span class="c1">// Set all the params.  </span>
 <span class="c1">// This may need to go in a try/catch block which throws UnsupportedCommOperationException</span>
 <span class="c1">//</span>
 <span class="n">port</span><span class="o">.</span><span class="na">setSerialPortParams</span><span class="o">(</span>
     <span class="mi">115200</span><span class="o">,</span>
     <span class="n">SerialPort</span><span class="o">.</span><span class="na">DATABITS_8</span><span class="o">,</span>
     <span class="n">SerialPort</span><span class="o">.</span><span class="na">STOPBITS_1</span><span class="o">,</span>
     <span class="n">SerialPort</span><span class="o">.</span><span class="na">PARITY_NONE</span><span class="o">);</span>
 
 <span class="c1">//</span>
 <span class="c1">// Open the input Reader and output stream. The choice of a</span>
 <span class="c1">// Reader and Stream are arbitrary and need to be adapted to</span>
 <span class="c1">// the actual application. Typically one would use Streams in</span>
 <span class="c1">// both directions, since they allow for binary data transfer,</span>
 <span class="c1">// not only character data transfer.</span>
 <span class="c1">//</span>
 <span class="n">BufferedReader</span> <span class="n">is</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>  <span class="c1">// for demo purposes only. A stream would be more typical.</span>
 <span class="n">PrintStream</span>    <span class="n">os</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
 
 <span class="k">try</span> <span class="o">{</span>
   <span class="n">is</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">port</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
 <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
   <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Can't open input stream: write-only"</span><span class="o">);</span>
   <span class="n">is</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
 <span class="o">}</span>
 
 <span class="c1">//</span>
 <span class="c1">// New Linux systems rely on Unicode, so it might be necessary to</span>
 <span class="c1">// specify the encoding scheme to be used. Typically this should</span>
 <span class="c1">// be US-ASCII (7 bit communication), or ISO Latin 1 (8 bit</span>
 <span class="c1">// communication), as there is likely no modem out there accepting</span>
 <span class="c1">// Unicode for its commands. An example to specify the encoding</span>
 <span class="c1">// would look like:</span>
 <span class="c1">//</span>
 <span class="c1">//     os = new PrintStream(port.getOutputStream(), true, "ISO-8859-1");</span>
 <span class="c1">//</span>
 <span class="n">os</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintStream</span><span class="o">(</span><span class="n">port</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
 
 <span class="c1">//</span>
 <span class="c1">// Actual data communication would happen here</span>
 <span class="c1">// performReadWriteCode();</span>
 <span class="c1">//</span>
 
 <span class="c1">//</span>
 <span class="c1">// It is very important to close input and output streams as well</span>
 <span class="c1">// as the port. Otherwise Java, driver and OS resources are not released.</span>
 <span class="c1">//</span>
 <span class="k">if</span> <span class="o">(</span><span class="n">is</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
 <span class="k">if</span> <span class="o">(</span><span class="n">os</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">os</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
 <span class="k">if</span> <span class="o">(</span><span class="n">port</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">port</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</pre>
      </div> 
      <h3><span class="mw-headline" id="Simple_Data_Transfer">Simple Data Transfer</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=17" title="Edit section: Simple Data Transfer">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <h4><span class="mw-headline" id="Simple_Writing_of_Data">Simple Writing of Data</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=18" title="Edit section: Simple Writing of Data">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <p>Writing to a serial port is as simple as basic Java IO. However there are a couple of caveats to look out for if you are using the AT Hayes protocol:</p> 
      <ol> 
       <li>Don't use println (or other methods that automatically append "\n") on the OutputStream. The AT Hayes protocol for modems expects a "\r\n" as the delimiter (regardless of underlying operating system).</li> 
       <li>After writing to the OutputStream, the InputStream buffer will contain a repeat of the command that was sent to it (with line feed), if the modem is set to echoing the command line, and another line feed (the answer to the "AT" command). So as part of the write operation make sure to clean the InputStream of this information (which can actually be used for error detection).</li> 
       <li>When using a Reader/Writer (not a really good idea), at least set the character encoding to US-ASCII instead of using the platform's default encoding, which might or might not work.</li> 
       <li>Since the main operation when using a modem is to transfer data unaltered, the communication with the modem should be handled via InputStream/OutputStream, and not a Reader/Writer.</li> 
      </ol> 
      <div style="clear: both"></div> 
      <table style="background: #ffd; border: 1px solid #aaaaaa; padding: 6pt; margin: 12pt 8%; width: 60%; margin: auto;" class="notice noprint notice-todo"> 
       <tbody>
        <tr> 
         <td style="width: 58px;"> 
          <div class="floatleft">
           <img alt="Clipboard" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/45px-Clipboard.svg.png" width="45" height="45" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/68px-Clipboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/90px-Clipboard.svg.png 2x" data-file-width="48" data-file-height="48">
          </div> </td> 
         <td> <p><b>To do:</b><br></p> 
          <ul> 
           <li>Explain how to mix binary and character I/O over the same stream</li> 
           <li>Fix the example to use streams</li> 
          </ul> </td> 
        </tr> 
       </tbody>
      </table> 
      <div style="clear: both"></div> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="c1">// Write to the output </span>
 <span class="n">os</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"AT"</span><span class="o">);</span>
 <span class="n">os</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"\r\n"</span><span class="o">);</span> <span class="c1">// Append a carriage return with a line feed</span>
 
 <span class="n">is</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span> <span class="c1">// First read will contain the echoed command you sent to it. In this case: "AT"</span>
 <span class="n">is</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span> <span class="c1">// Second read will remove the extra line feed that AT generates as output</span>
</pre>
      </div> 
      <h4><span class="mw-headline" id="Simple_Reading_of_Data_.28Polling.29">Simple Reading of Data (Polling)</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=19" title="Edit section: Simple Reading of Data (Polling)">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <p>If you correctly carried out the write operation (see above) then the read operation is as simple as one command:</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="c1">// Read the response</span>
 <span class="n">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span> <span class="c1">// if you sent "AT" then response == "OK"</span>
</pre>
      </div> 
      <h4><span class="mw-headline" id="Problems_with_the_simple_Reading_.2F_Writing">Problems with the simple Reading / Writing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=20" title="Edit section: Problems with the simple Reading / Writing">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <p>The simple way of reading and/or writing from/to a serial port as demonstrated in the previous sections has serious drawbacks. Both activities are done with <i>blocking I/O</i>. That means, when there is</p> 
      <ul> 
       <li>no data available for reading, or</li> 
       <li>the output buffer for writing is full (the device does not accept (any more) data),</li> 
      </ul> 
      <p>the read or write method (<code>os.print()</code> or <code>is.readLine()</code> in the previous example) do not return, and the application comes to a halt. More precisely, the thread from which the read or write is done gets blocked. If that thread is the main application thread, the application freezes until the blocking condition is resolved (data becomes available for reading or device accepts data again).</p> 
      <p>Unless the application is a very primitive one, freezing of the application is not acceptable. For example, as a minimum some user interaction to cancel the communication should still be possible. What is needed is <i>non-blocking I/O</i> or <i>asynchronous I/O</i>. However, JavaComm is based on Java's standard blocking I/O system (<code>InputStream</code>, <code>OutputStream</code>), but with a twist, as shown later.</p> 
      <p>The mentioned "twist" is that JavaComm provides some limited support for <i>asynchronous I/O</i> via an event notification mechanism. But the general solution in Java to achieve <i>non-blocking I/O</i> on top of the blocking I/O system is to use threads. Indeed, this is a viable solution for serial writing, and it is strongly recommended to use a separate thread to write to the serial port - even if the event notification mechanism is used, as explained later.</p> 
      <p>Reading could also be handled in a separate thread. However, this is not strictly necessary if the JavaComm event notification mechanism is used. So summarize:</p> 
      <table class="wikitable"> 
       <tbody>
        <tr> 
         <th>Activity</th> 
         <th>Architecture</th> 
        </tr> 
        <tr> 
         <td>reading</td> 
         <td>use event notification and/or separate thread</td> 
        </tr> 
        <tr> 
         <td>writing</td> 
         <td>always use separate thread, optionally use event notification</td> 
        </tr> 
       </tbody>
      </table> 
      <p>The following sections provide some details.</p> 
      <h3><span class="mw-headline" id="Event_Driven_Serial_Communication">Event Driven Serial Communication</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=21" title="Edit section: Event Driven Serial Communication">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <h4><span class="mw-headline" id="Introduction_3">Introduction</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=22" title="Edit section: Introduction">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <p>The JavaComm API provides an event notification mechanism to overcome the problems with <i>blocking I/O</i>. However, in the typical Sun manner this mechanism is not without problems.</p> 
      <p>In principle an application can register event listeners with a particular <code>SerialPort</code> to be kept informed about important events happening on that port. The two most interesting event types for reading and writing data are</p> 
      <ul> 
       <li><code>javax.comm.SerialPortEvent.DATA_AVAILABLE</code> and</li> 
       <li><code>javax.comm.SerialPortEvent.OUTPUT_BUFFER_EMPTY</code>.</li> 
      </ul> 
      <p>But there are also two problems:</p> 
      <ol> 
       <li>Only one single event listener per <code>SerialPort</code> can be registered. This forces the programmer to write "monster" listeners, discriminating according to the event type.</li> 
       <li><code>OUTPUT_BUFFER_EMPTY</code> is an optional event type. Well hidden in the documentation Sun states that not all JavaComm implementations support generating events of this type.</li> 
      </ol> 
      <p>Before going into details, the next section will present the principal way of implementing and registering a serial event handler. Remember, there can only be one handler at all, and it will have to handle all possible events.</p> 
      <h4><span class="mw-headline" id="Setting_up_a_serial_Event_Handler">Setting up a serial Event Handler</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=23" title="Edit section: Setting up a serial Event Handler">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="kn">import</span> <span class="nn">javax.comm.*</span><span class="o">;</span>

 <span class="cm">/**</span>
<span class="cm">  * Listener to handle all serial port events.</span>
<span class="cm">  *</span>
<span class="cm">  * NOTE: It is typical that the SerialPortEventListener is implemented</span>
<span class="cm">  *       in the main class that is supposed to communicate with the</span>
<span class="cm">  *       device. That way the listener has easy access to state information</span>
<span class="cm">  *       about the communication, e.g. when a particular communication</span>
<span class="cm">  *       protocol needs to be followed.</span>
<span class="cm">  *</span>
<span class="cm">  *       However, for demonstration purposes this example implements a</span>
<span class="cm">  *       separate class.</span>
<span class="cm">  */</span> 
 <span class="kd">class</span> <span class="nc">SerialListener</span> <span class="kd">implements</span> <span class="n">SerialPortEventListener</span> <span class="o">{</span>
     <span class="cm">/**</span>
<span class="cm">      * Handle serial events. Dispatches the event to event-specific</span>
<span class="cm">      * methods.</span>
<span class="cm">      * @param event The serial event</span>
<span class="cm">      */</span>
     <span class="nd">@Override</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">serialEvent</span><span class="o">(</span><span class="n">SerialPortEvent</span> <span class="n">event</span><span class="o">){</span>
         <span class="c1">//</span>
         <span class="c1">// Dispatch event to individual methods. This keeps this ugly</span>
         <span class="c1">// switch/case statement as short as possible.</span>
         <span class="c1">//</span>
         <span class="k">switch</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getEventType</span><span class="o">())</span> <span class="o">{</span>
             <span class="k">case</span> <span class="n">SerialPortEvent</span><span class="o">.</span><span class="na">OUTPUT_BUFFER_EMPTY</span><span class="o">:</span>
                 <span class="n">outputBufferEmpty</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
                 <span class="k">break</span><span class="o">;</span>

             <span class="k">case</span> <span class="n">SerialPortEvent</span><span class="o">.</span><span class="na">DATA_AVAILABLE</span><span class="o">:</span>
                 <span class="n">dataAvailable</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
                 <span class="k">break</span><span class="o">;</span>

 <span class="cm">/* Other events, not implemented here -&gt;</span>
<span class="cm">             case SerialPortEvent.BI:</span>
<span class="cm">                 breakInterrupt(event);</span>
<span class="cm">                 break;</span>

<span class="cm">             case SerialPortEvent.CD:</span>
<span class="cm">                 carrierDetect(event);</span>
<span class="cm">                 break;</span>

<span class="cm">             case SerialPortEvent.CTS:</span>
<span class="cm">                 clearToSend(event);</span>
<span class="cm">                 break;</span>

<span class="cm">             case SerialPortEvent.DSR:</span>
<span class="cm">                 dataSetReady(event);</span>
<span class="cm">                 break;</span>

<span class="cm">             case SerialPortEvent.FE:</span>
<span class="cm">                 framingError(event);</span>
<span class="cm">                 break;</span>

<span class="cm">             case SerialPortEvent.OE:</span>
<span class="cm">                 overrunError(event);</span>
<span class="cm">                 break;</span>

<span class="cm">             case SerialPortEvent.PE:</span>
<span class="cm">                 parityError(event);</span>
<span class="cm">                 break;</span>

<span class="cm">             case SerialPortEvent.RI:</span>
<span class="cm">                 ringIndicator(event);</span>
<span class="cm">                 break;</span>
<span class="cm"> &lt;- other events, not implemented here */</span>

         <span class="o">}</span>
     <span class="o">}</span>

     <span class="cm">/**</span>
<span class="cm">      * Handle output buffer empty events.</span>
<span class="cm">      * NOTE: The reception of this event is optional and not</span>
<span class="cm">      *       guaranteed by the API specification.</span>
<span class="cm">      * @param event The output buffer empty event</span>
<span class="cm">      */</span>
     <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">outputBufferEmpty</span><span class="o">(</span><span class="n">SerialPortEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
         <span class="c1">// Implement writing more data here</span>
     <span class="o">}</span>

     <span class="cm">/**</span>
<span class="cm">      * Handle data available events.</span>
<span class="cm">      *</span>
<span class="cm">      * @param event The data available event</span>
<span class="cm">      */</span>
     <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">dataAvailable</span><span class="o">(</span><span class="n">SerialPortEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
         <span class="c1">// implement reading from the serial port here</span>
     <span class="o">}</span>
 <span class="o">}</span>
</pre>
      </div> 
      <p>Once the listener is implemented, it can be used to listen to particular serial port events. To do so, an instance of the listener needs to be added to the serial port. Further, the reception of each event type needs to be requested individually.</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="n">SerialPort</span> <span class="n">port</span> <span class="o">=</span> <span class="o">...;</span>
 <span class="o">...</span>
 <span class="c1">//</span>
 <span class="c1">// Configure port parameters here. Only after the port is configured it</span>
 <span class="c1">// makes sense to enable events. The event handler might be called immediately</span>
 <span class="c1">// after an event is enabled.</span>
 <span class="o">...</span>

 <span class="c1">//</span>
 <span class="c1">// Typically, if the current class implements the SerialEventListener interface</span>
 <span class="c1">// one would call</span>
 <span class="c1">//</span>
 <span class="c1">//        port.addEventListener(this);</span>
 <span class="c1">//</span>
 <span class="c1">// but for our example a new instance of SerialListener is created:</span>
 <span class="c1">//</span>
 <span class="n">port</span><span class="o">.</span><span class="na">addEventListener</span><span class="o">(</span><span class="k">new</span> <span class="n">SerialListener</span><span class="o">());</span>

 <span class="c1">//</span>
 <span class="c1">// Enable the events we are interested in</span>
 <span class="c1">//</span>
 <span class="n">port</span><span class="o">.</span><span class="na">notifyOnDataAvailable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
 <span class="n">port</span><span class="o">.</span><span class="na">notifyOnOutputEmpty</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>

 <span class="cm">/* other events not used in this example -&gt;</span>
<span class="cm"> port.notifyOnBreakInterrupt(true);</span>
<span class="cm"> port.notifyOnCarrierDetect(true);</span>
<span class="cm"> port.notifyOnCTS(true);</span>
<span class="cm"> port.notifyOnDSR(true);</span>
<span class="cm"> port.notifyOnFramingError(true);</span>
<span class="cm"> port.notifyOnOverrunError(true);</span>
<span class="cm"> port.notifyOnParityError(true);</span>
<span class="cm"> port.notifyOnRingIndicator(true);</span>
<span class="cm"> &lt;- other events not used in this example */</span>
</pre>
      </div> 
      <h4><span class="mw-headline" id="Writing_of_Data">Writing of Data</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=24" title="Edit section: Writing of Data">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <table class="metadata plainlinks ambox ambox-content" style=""> 
       <tbody>
        <tr> 
         <td class="mbox-image"> 
          <div style="width: 52px;">
           <img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/40px-Book_important2.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/60px-Book_important2.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/80px-Book_important2.svg.png 2x" data-file-width="128" data-file-height="128">
          </div> </td> 
         <td class="mbox-text" style=""><b>This section is a stub.</b><br> You can help Wikibooks by <a class="external text" href="//en.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit">expanding it</a>.</td> 
        </tr> 
       </tbody>
      </table> 
      <div style="clear: both"></div> 
      <table style="background: #ffd; border: 1px solid #aaaaaa; padding: 6pt; margin: 12pt 8%; width: 60%; margin: auto;" class="notice noprint notice-todo"> 
       <tbody>
        <tr> 
         <td style="width: 58px;"> 
          <div class="floatleft">
           <img alt="Clipboard" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/45px-Clipboard.svg.png" width="45" height="45" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/68px-Clipboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/90px-Clipboard.svg.png 2x" data-file-width="48" data-file-height="48">
          </div> </td> 
         <td> <p><b>To do:</b><br></p> </td> 
        </tr> 
       </tbody>
      </table> 
      <div style="clear: both"></div> 
      <h5><span class="mw-headline" id="Setting_up_a_separate_Thread_for_Writing">Setting up a separate Thread for Writing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=25" title="Edit section: Setting up a separate Thread for Writing">edit</a><span class="mw-editsection-bracket">]</span></span></h5> 
      <table class="metadata plainlinks ambox ambox-content" style=""> 
       <tbody>
        <tr> 
         <td class="mbox-image"> 
          <div style="width: 52px;">
           <img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/40px-Book_important2.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/60px-Book_important2.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/80px-Book_important2.svg.png 2x" data-file-width="128" data-file-height="128">
          </div> </td> 
         <td class="mbox-text" style=""><b>This section is a stub.</b><br> You can help Wikibooks by <a class="external text" href="//en.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit">expanding it</a>.</td> 
        </tr> 
       </tbody>
      </table> 
      <p>Using a separate thread for writing has one purpose: Avoiding that the whole application blocks in case the serial port is not ready for writing.</p> 
      <h6><span class="mw-headline" id="A_simple.2C_thread-safe_Ring_Buffer_Implementation">A simple, thread-safe Ring Buffer Implementation</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=26" title="Edit section: A simple, thread-safe Ring Buffer Implementation">edit</a><span class="mw-editsection-bracket">]</span></span></h6> 
      <p>Using a separate thread for writing, separate from some main application thread, implies that there is some way to hand off the data which needs to be written from the application thread to the writing thread. A shared, synchronized data buffer, for example a <code>byte[]</code> should do. Further, there needs to be a way for the main application to determine if it can write to the data buffer, or if the data buffer is currently full. In case the data buffer is full it could indicate that the serial port is not ready, and output data has queued up. The main application will have to poll the availability of new space in the shared data buffer. However, between the polling the main application can do other things, for example updating a GUI, providing a command prompt with the ability to abort the sending, etc.</p> 
      <p>At first glance a <code>PipedInputStream/PipedOutputStream</code> pair seems like a good idea for this kind of communication. But Sun wouldn't be Sun if the a piped stream would actually be useful. <code>PipedInputStream</code> blocks if the corresponding <code>PipedOutputStream</code> is not cleared fast enough. So the application thread would block. Exactly what one wants to avoid by using the separate thread. A <code>java.nio.Pipe</code> suffers from the same problem. Its blocking behavior is platform dependent. And adapting the classic I/O used by JavaComm to NIO is anyhow not a nice task.</p> 
      <p>In this article a very simple synchronized ring buffer is used to hand over the data from one thread to another. In a real world application it is likely that the implementation should be more sophisticated. E.g. in a real world implementation it would make sense to implement OutputStream and InputStream views on the buffer.</p> 
      <p>A ring buffer as such is nothing special, and has no special properties regarding threading. It is just that this simple data structure is used here to provide data buffering. The implementation is done so that access to this data structure has been made thread safe.</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="cm">/**</span>
<span class="cm">  * Synchronized ring buffer. </span>
<span class="cm">  * Suitable to hand over data from one thread to another.</span>
<span class="cm">  **/</span>
 <span class="kd">public</span> <span class="sc">'''</span><span class="kd">synchronized</span><span class="sc">'''</span> <span class="kd">class</span> <span class="nc">RingBuffer</span> <span class="o">{</span>

     <span class="cm">/** internal buffer to hold the data **/</span>
     <span class="kd">protected</span> <span class="kt">byte</span> <span class="n">buffer</span><span class="o">[];</span>

     <span class="cm">/** size of the buffer **/</span>
     <span class="kd">protected</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>

     <span class="cm">/** current start of data area **/</span>
     <span class="kd">protected</span> <span class="kt">int</span> <span class="n">start</span><span class="o">;</span>

     <span class="cm">/** current end of data area **/</span>
     <span class="kd">protected</span> <span class="kt">int</span> <span class="n">end</span><span class="o">;</span>


     <span class="cm">/**</span>
<span class="cm">      * Construct a RingBuffer with a default buffer size of 1k.</span>
<span class="cm">      */</span>
     <span class="kd">public</span> <span class="nf">RingBuffer</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>
     <span class="o">}</span>

     <span class="cm">/**</span>
<span class="cm">      * Construct a RingBuffer with a certain buffer size.</span>
<span class="cm">      * @param size   Buffer size in bytes</span>
<span class="cm">      */</span>
     <span class="kd">public</span> <span class="nf">RingBuffer</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
          <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
          <span class="n">clear</span><span class="o">();</span>
     <span class="o">}</span>

     <span class="cm">/**</span>
<span class="cm">      * Clear the buffer contents. All data still in the buffer is lost.</span>
<span class="cm">      */</span>
     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>
         <span class="c1">// Just reset the pointers. The remaining data fragments, if any,</span>
         <span class="c1">// will be overwritten during normal operation.</span>
         <span class="n">start</span> <span class="o">=</span> <span class="n">end</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
     <span class="o">}</span>

     <span class="cm">/**</span>
<span class="cm">      * Return used space in buffer. This is the size of the</span>
<span class="cm">      * data currently in the buffer.</span>
<span class="cm">      * &lt;nowiki&gt;&lt;p&gt;&lt;/nowiki&gt;</span>
<span class="cm">      * Note: While the value is correct upon returning, it</span>
<span class="cm">      * is not necessarily valid when data is read from the </span>
<span class="cm">      * buffer or written to the buffer. Another thread might</span>
<span class="cm">      * have filled the buffer or emptied it in the mean time.</span>
<span class="cm">      *</span>
<span class="cm">      * @return currently amount of data available in buffer</span>
<span class="cm">      */</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">data</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="n">start</span> <span class="o">&lt;=</span> <span class="n">end</span>
                      <span class="o">?</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span>
                      <span class="o">:</span> <span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="n">size</span><span class="o">;</span>
     <span class="o">}</span>

     <span class="cm">/**</span>
<span class="cm">      * Return unused space in buffer. Note: While the value is</span>
<span class="cm">      * correct upon returning, it is not necessarily valid when</span>
<span class="cm">      * data is written to the buffer or read from the buffer.</span>
<span class="cm">      * Another thread might have filled the buffer or emptied</span>
<span class="cm">      * it in the mean time.</span>
<span class="cm">      *</span>
<span class="cm">      * @return currently available free space</span>
<span class="cm">      */</span>
     <span class="kd">public</span> <span class="kt">int</span> <span class="nf">free</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">return</span> <span class="n">start</span> <span class="o">&lt;=</span> <span class="n">end</span>
                      <span class="o">?</span> <span class="n">size</span> <span class="o">+</span> <span class="n">start</span> <span class="o">-</span> <span class="n">end</span>
                      <span class="o">:</span> <span class="n">start</span> <span class="o">-</span> <span class="n">end</span><span class="o">;</span>
     <span class="o">}</span>

     <span class="cm">/**</span>
<span class="cm">      * Write as much data as possible to the buffer.</span>
<span class="cm">      * @param data   Data to be written</span>
<span class="cm">      * @return       Amount of data actually written</span>
<span class="cm">      */</span>
     <span class="kt">int</span> <span class="nf">write</span><span class="o">(</span><span class="kt">byte</span> <span class="n">data</span><span class="o">[])</span> <span class="o">{</span>
         <span class="k">return</span> <span class="n">write</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">data</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>  
     <span class="o">}</span>

     <span class="cm">/**</span>
<span class="cm">      * Write as much data as possible to the buffer.</span>
<span class="cm">      * @param data   Array holding data to be written</span>
<span class="cm">      * @param off    Offset of data in array</span>
<span class="cm">      * @param n      Amount of data to write, starting from &lt;code&gt;off&lt;/code&gt;.</span>
<span class="cm">      * @return       Amount of data actually written</span>
<span class="cm">      */</span>
     <span class="kt">int</span> <span class="nf">write</span><span class="o">(</span><span class="kt">byte</span> <span class="n">data</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">remain</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
         <span class="c1">// @todo check if off is valid: 0= &lt;= off &lt; data.length; throw exception if not</span>

         <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">remain</span><span class="o">,</span> <span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">start</span> <span class="o">?</span> <span class="n">start</span> <span class="o">:</span> <span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="o">-</span> <span class="n">end</span><span class="o">);</span>
         <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
              <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">buffer</span><span class="o">,</span> <span class="n">end</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
              <span class="n">off</span>    <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
              <span class="n">remain</span> <span class="o">-=</span> <span class="n">i</span><span class="o">;</span>
              <span class="n">end</span>    <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
         <span class="o">}</span>

         <span class="n">i</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">remain</span><span class="o">,</span> <span class="n">end</span> <span class="o">&gt;=</span> <span class="n">start</span> <span class="o">?</span> <span class="n">start</span> <span class="o">:</span> <span class="mi">0</span><span class="o">);</span>
         <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
              <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">buffer</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
              <span class="n">remain</span> <span class="o">-=</span> <span class="n">i</span><span class="o">;</span>
              <span class="n">end</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">n</span> <span class="o">-</span> <span class="n">remain</span><span class="o">;</span>
     <span class="o">}</span>


     <span class="cm">/**</span>
<span class="cm">      * Read as much data as possible from the buffer.</span>
<span class="cm">      * @param data   Where to store the data</span>
<span class="cm">      * @return       Amount of data read</span>
<span class="cm">      */</span>
     <span class="kt">int</span> <span class="nf">read</span><span class="o">(</span><span class="kt">byte</span> <span class="n">data</span><span class="o">[])</span> <span class="o">{</span>
         <span class="k">return</span> <span class="n">read</span><span class="o">(</span><span class="n">data</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">data</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>  
     <span class="o">}</span>

     <span class="cm">/**</span>
<span class="cm">      * Read as much data as possible from the buffer.</span>
<span class="cm">      * @param data   Where to store the read data</span>
<span class="cm">      * @param off    Offset of data in array</span>
<span class="cm">      * @param n      Amount of data to read</span>
<span class="cm">      * @return       Amount of data actually read</span>
<span class="cm">      */</span>
     <span class="kt">int</span> <span class="nf">read</span><span class="o">(</span><span class="kt">byte</span> <span class="n">data</span><span class="o">[],</span> <span class="kt">int</span> <span class="n">off</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
         <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">remain</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
         <span class="c1">// @todo check if off is valid: 0= &lt;= off &lt; data.length; throw exception if not</span>

         <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">remain</span><span class="o">,</span> <span class="o">(</span><span class="n">end</span> <span class="o">&lt;</span> <span class="n">start</span> <span class="o">?</span> <span class="n">buffer</span><span class="o">.</span><span class="na">length</span> <span class="o">:</span> <span class="n">end</span><span class="o">)</span> <span class="o">-</span> <span class="n">start</span><span class="o">);</span>
         <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
              <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
              <span class="n">off</span>    <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
              <span class="n">remain</span> <span class="o">-=</span> <span class="n">i</span><span class="o">;</span>
              <span class="n">start</span>  <span class="o">+=</span> <span class="n">i</span><span class="o">;</span>
              <span class="k">if</span><span class="o">(</span><span class="n">start</span> <span class="o">&gt;=</span> <span class="n">buffer</span><span class="o">.</span><span class="na">length</span><span class="o">)</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="o">}</span>

         <span class="n">i</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">remain</span><span class="o">,</span> <span class="n">end</span> <span class="o">&gt;=</span> <span class="n">start</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">end</span><span class="o">);</span>
         <span class="k">if</span><span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
              <span class="n">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">buffer</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">off</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
              <span class="n">remain</span> <span class="o">-=</span> <span class="n">i</span><span class="o">;</span>
              <span class="n">start</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">n</span> <span class="o">-</span> <span class="n">remain</span><span class="o">;</span>
     <span class="o">}</span>
 <span class="o">}</span>
</pre>
      </div> 
      <p>With this ring buffer one can now hand over data from one thread to another in a controlled way. Any other thread-safe, non-blocking mechanism would also do. The key point here is that the write does not block when the buffer is full and also does not block when there is nothing to read.</p> 
      <h6><span class="mw-headline" id="Using_the_Buffer_together_with_Serial_Events">Using the Buffer together with Serial Events</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=27" title="Edit section: Using the Buffer together with Serial Events">edit</a><span class="mw-editsection-bracket">]</span></span></h6> 
      <h5><span class="mw-headline" id="Usage_of_OUTPUT_BUFFER_EMPTY_Event_in_Writing">Usage of OUTPUT_BUFFER_EMPTY Event in Writing</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=28" title="Edit section: Usage of OUTPUT BUFFER EMPTY Event in Writing">edit</a><span class="mw-editsection-bracket">]</span></span></h5> 
      <p>Referring to the skeleton event handler presented in the section <a href="#Setting_up_a_serial_Event_Handler">Setting up a serial Event Handler</a>, one can now use a shared ring buffer from section <a href="#A_simple.2C_thread-safe_Ring_Buffer_Implementation">A simple, thread-safe Ring Buffer Implementation</a> to support the <code>OUTPUT_BUFFER_EMPTY</code> event. The event is not supported by all JavaComm implementations, therefore the code might never be called. However, in case the event is available it is one building block for ensuring best data throughput, because the serial interface is not left idle for too long.</p> 
      <p>The skeleton event listener proposed a method <code>outputBufferEmpty()</code>, which could be implemented as it follows.</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
     <span class="n">RingBuffer</span> <span class="n">dataBuffer</span> <span class="o">=</span> <span class="o">...</span> <span class="o">;</span>

    <span class="cm">/**</span>
<span class="cm">     * Handle output buffer empty events.</span>
<span class="cm">     * NOTE: The reception is of this event is optional and not</span>
<span class="cm">     *       guaranteed by the API specification.</span>
<span class="cm">     * @param event The output buffer empty event</span>
<span class="cm">     */</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">outputBufferEmpty</span><span class="o">(</span><span class="n">SerialPortEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>

    <span class="c1">//TODO</span>
        
    <span class="o">}</span>
</pre>
      </div> 
      <table class="metadata plainlinks ambox ambox-content" style=""> 
       <tbody>
        <tr> 
         <td class="mbox-image"> 
          <div style="width: 52px;">
           <img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/40px-Book_important2.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/60px-Book_important2.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/80px-Book_important2.svg.png 2x" data-file-width="128" data-file-height="128">
          </div> </td> 
         <td class="mbox-text" style=""><b>This section is a stub.</b><br> You can help Wikibooks by <a class="external text" href="//en.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit">expanding it</a>.</td> 
        </tr> 
       </tbody>
      </table> 
      <h4><span class="mw-headline" id="Reading_of_Data">Reading of Data</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=29" title="Edit section: Reading of Data">edit</a><span class="mw-editsection-bracket">]</span></span></h4> 
      <table class="metadata plainlinks ambox ambox-content" style=""> 
       <tbody>
        <tr> 
         <td class="mbox-image"> 
          <div style="width: 52px;">
           <img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/40px-Book_important2.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/60px-Book_important2.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/80px-Book_important2.svg.png 2x" data-file-width="128" data-file-height="128">
          </div> </td> 
         <td class="mbox-text" style=""><b>This section is a stub.</b><br> You can help Wikibooks by <a class="external text" href="//en.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit">expanding it</a>.</td> 
        </tr> 
       </tbody>
      </table> 
      <p>The following example assumes that the data's destination is some file. Whenever data becomes available it is fetched from the serial port and written to the file. This is an extremely simplified view, because in reality one would need to check the data for an end-of-file indication to, for example, return to the modem command mode.</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
 <span class="kn">import</span> <span class="nn">javax.comm.*</span><span class="o">;</span>
 <span class="o">...</span>
 <span class="n">InputStream</span> <span class="n">is</span> <span class="o">=</span> <span class="n">port</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
 <span class="n">BufferedOutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="s">"out.dat"</span><span class="o">));</span>
 <span class="cm">/**</span>
<span class="cm">  * Listen to port events</span>
<span class="cm">  */</span> 
 <span class="kd">class</span> <span class="nc">FileListener</span> <span class="kd">implements</span> <span class="n">SerialPortEventListener</span> <span class="o">{</span>

     <span class="cm">/**</span>
<span class="cm">      * Handle serial event.</span>
<span class="cm">      */</span>
     <span class="kt">void</span> <span class="nf">serialEvent</span><span class="o">(</span><span class="n">SerialPortEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
         <span class="n">SerialPort</span> <span class="n">port</span> <span class="o">=</span> <span class="o">(</span><span class="n">SerialPort</span><span class="o">)</span> <span class="n">e</span><span class="o">.</span><span class="na">getSource</span><span class="o">();</span>
         <span class="c1">//</span>
         <span class="c1">// Discriminate handling according to event type</span>
         <span class="c1">//</span>
         <span class="k">switch</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getEventType</span><span class="o">())</span> <span class="o">{</span>
         <span class="k">case</span> <span class="n">SerialPortEvent</span><span class="o">.</span><span class="na">DATA_AVAILABLE</span><span class="o">:</span>
             <span class="c1">//</span>
             <span class="c1">// Move all currently available data to the file</span>
             <span class="c1">//</span>
             <span class="k">try</span> <span class="o">{</span>
                  <span class="kt">int</span> <span class="n">c</span><span class="o">;</span>
                  <span class="k">while</span><span class="o">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">is</span><span class="o">.</span><span class="na">read</span><span class="o">())</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">out</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
                  <span class="o">}</span>
             <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">IOException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                  <span class="o">...</span>
             <span class="o">}</span>
             <span class="k">break</span><span class="o">;</span>
         <span class="k">case</span> <span class="o">...:</span>
             <span class="o">...</span>
             <span class="k">break</span><span class="o">;</span>
         <span class="o">...</span>
         <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">is</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">is</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">port</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">port</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
     <span class="o">}</span>
</pre>
      </div> 
      <h3><span class="mw-headline" id="Handling_multiple_Ports_in_one_Application">Handling multiple Ports in one Application</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=30" title="Edit section: Handling multiple Ports in one Application">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <table class="metadata plainlinks ambox ambox-content" style=""> 
       <tbody>
        <tr> 
         <td class="mbox-image"> 
          <div style="width: 52px;">
           <img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/40px-Book_important2.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/60px-Book_important2.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/80px-Book_important2.svg.png 2x" data-file-width="128" data-file-height="128">
          </div> </td> 
         <td class="mbox-text" style=""><b>This section is a stub.</b><br> You can help Wikibooks by <a class="external text" href="//en.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit">expanding it</a>.</td> 
        </tr> 
       </tbody>
      </table> 
      <h3><span class="mw-headline" id="Modem_Control">Modem Control</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=31" title="Edit section: Modem Control">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <p>JavaComm is strictly concerned with the handling of a serial interface and the transmission of data over that interface. It does not know, or provide, any support for higher-layer protocols, e.g. for Hayes modem commands typically used to control consumer-grade modems. This is simply not the job of JavaComm, and not a bug.</p> 
      <p>Like with any other particular serial device, if the control of a modem is desired via JavaComm the necessary code has to be written on top of JavaComm. The page <a href="/wiki/Serial_Programming/Modems_and_AT_Commands" title="Serial Programming/Modems and AT Commands">"Hayes-compatible Modems and AT Commands"</a> provides the necessary basic generic information to deal with Hayes modems.</p> 
      <p>Some operating systems, e.g. Windows or certain Linux distributions provide a more or less standardized way how modem control commands for a particular modem type or brand are configured for the operating system. Windows modem "drivers", for example, are typically just registry entries, describing a particular modem (the actual driver is a generic serial modem driver). JavaComm as such has no provisions to access such operating-system specific data. Therefor, one either has to provide a separate Java-only facility to allow a user to configure an application for the usage of a particular modem, or some platform-specific (native) code needs to be added.</p> 
      <h2><span class="mw-headline" id="RxTx_2">RxTx</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=32" title="Edit section: RxTx">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
      <table class="metadata plainlinks ambox ambox-content" style=""> 
       <tbody>
        <tr> 
         <td class="mbox-image"> 
          <div style="width: 52px;">
           <img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/40px-Book_important2.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/60px-Book_important2.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/91/Book_important2.svg/80px-Book_important2.svg.png 2x" data-file-width="128" data-file-height="128">
          </div> </td> 
         <td class="mbox-text" style=""><b>This section is a stub.</b><br> You can help Wikibooks by <a class="external text" href="//en.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit">expanding it</a>.</td> 
        </tr> 
       </tbody>
      </table> 
      <h3><span class="mw-headline" id="Overview_and_Versions">Overview and Versions</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=33" title="Edit section: Overview and Versions">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <p>Due to the fact that Sun didn't provide a reference implementation of the JavaComm API for Linux, people developed RxTx for Java and Linux <a rel="nofollow" class="external autonumber" href="http://rxtx.qbang.org/">[1]</a>. RxTx was then further ported to other platforms. The latest version of RxTx is known to work on 100+ platforms, including Linux, Windows, Mac OS, Solaris and other operating systems.</p> 
      <p>RxTx can be used independent of the JavaComm API, or can be used as a so called provider for the JavaComm API. In order to do the latter, a wrapper called JCL is also needed <a rel="nofollow" class="external autonumber" href="http://www.geeksville.com/~kevinh/linuxcomm.html">[2]</a>. JCL and RxTx are usually packaged together with Linux/Java distributions, or JCL is completely integrated into the code. So, before trying to get them separately, it is worth having a look at the Linux distribution CD.</p> 
      <p>There seems to be a trend to abandon the JavaComm API, and using RxTx directly instead of via the JCL wrapper, due to Sun's limited support and improper documentation for the JavaComm API. However, RxTx's documentation is extremely sparse. Particularly, the RxTX people like to make a mess of their versions and package contents (e.g. with or without integrated JCL). Starting with RxTx version 1.5 RxTx contains replacement classes for the public JavaComm classes. For legal reasons they are not in the <code>java.comm</code> package, but in the <code>gnu.io</code> package. However, the two currently available RxTx versions are packaged differently:</p> 
      <dl> 
       <dt>
        RxTx 2.0
       </dt> 
       <dd>
        RxTx version supposed to be used as a JavaComm provider. This one is supposed to have its roots in RxRx 1.4, which is the RxTx version before the 
        <code>gnu.io</code> package was added.
       </dd> 
       <dt>
        RxTx 2.1
       </dt> 
       <dd>
        RxTx version with a full 
        <code>gnu.io</code> package replacement for 
        <code>java.comm</code>. This version is supposed to have its roots in RxTx 1.5, where 
        <code>gnu.io</code> support started.
       </dd> 
      </dl> 
      <p>So, if one wants to program against the original JavaComm API one needs</p> 
      <ol> 
       <li>Sun's generic JavaComm version. As of this writing this is in fact the Unix package (which contains support for various Unix versions like Linux or Solaris). Even when used on Windows, the Unix package is needed to provide the generic <code>java.comm</code> implementations. Only the part implemented in Java is used, while the Unix native libraries are just ignored.</li> 
       <li>RxTx 2.0 in order to have a different provider below the generic generic JavaComm version than the ones comming with the JavaComm package</li> 
      </ol> 
      <p>However, if one just wants to program against the <code>gnu.io</code> replacement package, then</p> 
      <ul> 
       <li>only RxTx 2.1 is needed.</li> 
      </ul> 
      <h3><span class="mw-headline" id="Converting_a_JavaComm_Application_to_RxTx">Converting a JavaComm Application to RxTx</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=34" title="Edit section: Converting a JavaComm Application to RxTx">edit</a><span class="mw-editsection-bracket">]</span></span></h3> 
      <p>So, if you belong to the large group of people who have been let down by Sun when they dropped Windows support for JavaComm, you are in need to convert a JavaComm application to RxTx. As you can see from the above, there are two ways to do it. Both assume that you manage to install a version of RxTx first. Then the options are either</p> 
      <ol> 
       <li>Using RxTx 2.0 as a JavaComm provider</li> 
       <li>Porting the application to RxTx 2.1</li> 
      </ol> 
      <p>The first option has already been explained. The second option is surprisingly simple. All one has to do to port some application from using JavaComm to using RxTx 2.1 is to replace all references to <code>java.comm</code> in the application source code with references to <code>gnu.io</code>. If the original JavaComm application was properly written there is nothing more to do.</p> 
      <p>RxTx 2.1 even provides the tool <code>contrib/ChangePackage.sh</code> to perform the global replacement on a source tree under Unix. On other platforms such a global replacement is easy to do with IDEs supporting a decent set of refactoring features.</p> 
      <h2><span class="mw-headline" id="See_also">See also</span><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit&amp;section=35" title="Edit section: See also">edit</a><span class="mw-editsection-bracket">]</span></span></h2> 
      <ul> 
       <li><a rel="nofollow" class="external text" href="http://fazecast.github.io/jSerialComm/">jSerialComm Homepage</a> on github - with information on how to use it - <a rel="nofollow" class="external text" href="http://fazecast.github.io/jSerialComm/javadoc/index.html">Javadoc</a></li> 
       <li><a rel="nofollow" class="external text" href="http://java.sun.com/products/javacomm/">Sun Java Communications API</a></li> 
       <li><a rel="nofollow" class="external text" href="http://wass.homelinux.net/howtos/Comm_How-To.shtml">Java Comm Serial API How-To for Linux</a></li> 
       <li><a rel="nofollow" class="external text" href="http://code.google.com/p/java-simple-serial-connector/">jSSC - java serial port library. Work under Win32(Win98-Win7), Win64(x86-64), Linux x86, Linux x86-64</a></li> 
       <li><a rel="nofollow" class="external text" href="http://rxtx.qbang.org/">RxTx Home Page</a> (Files are accessible with <a rel="nofollow" class="external text" href="ftp://rxtx.qbang.org">FTP</a> only (May 2017))</li> 
       <li><a rel="nofollow" class="external text" href="https://github.com/openmuc/jrxtx">jRxTx</a> on github - a new Wrapper to RxTx with a "new improved API compared to that of RXTX"</li> 
       <li><a rel="nofollow" class="external text" href="http://lopica.sourceforge.net/faq.html#comm">Unofficial Java Web Start/JNLP FAQ - How can I use Web Start and Comm API together?</a></li> 
       <li><a rel="nofollow" class="external text" href="http://serialio.com/products/serialport/serialport.php">SerialIO has a free trial version of their SerialPort package</a></li> 
       <li>Ben Resner has <a rel="nofollow" class="external text" href="http://web.media.mit.edu/~benres/simpleserial/">a free download of his SimpleSerial package</a> and <a rel="nofollow" class="external text" href="http://www.ambientdevices.com/datacasting/index.html">a newer version without the C++ code</a></li> 
       <li><a rel="nofollow" class="external text" href="http://www.github.com/gurux/gurux.serial.java/">gurux.serial.java</a> is easy to use Open Source serial port library for Windows and Linux]</li> 
      </ul> 
      <div style="background:#f2fff2; border:1px solid #bfffbf; padding:0.5em 1em; margin:0.5em 0em;"> 
       <p><b><a href="/wiki/Serial_Programming" title="Serial Programming">Serial Programming</a></b>: <a href="/wiki/Serial_Programming/Introduction_and_OSI_Model" title="Serial Programming/Introduction and OSI Model">Introduction and OSI Network Model</a> -- <a href="/wiki/Serial_Programming/RS-232_Connections" title="Serial Programming/RS-232 Connections">RS-232 Wiring and Connections</a> -- <a href="/wiki/Serial_Programming/Typical_RS232_Hardware_Configuration" title="Serial Programming/Typical RS232 Hardware Configuration">Typical RS232 Hardware Configuration</a> -- <a href="/wiki/Serial_Programming/8250_UART_Programming" title="Serial Programming/8250 UART Programming">8250 UART</a> -- <a href="/wiki/Serial_Programming/DOS_Programming" title="Serial Programming/DOS Programming">DOS</a> -- <a href="/wiki/Serial_Programming/MAX232_Driver_Receiver" title="Serial Programming/MAX232 Driver Receiver">MAX232 Driver/Receiver Family</a> -- <a href="/wiki/Serial_Programming/Windows_TAPI" title="Serial Programming/Windows TAPI">TAPI Communications In Windows</a> -- <a href="/wiki/Serial_Programming/Serial_Linux" title="Serial Programming/Serial Linux">Linux and Unix</a> -- <a class="mw-selflink selflink">Java</a> -- <a href="/wiki/Serial_Programming/Modems_and_AT_Commands" title="Serial Programming/Modems and AT Commands">Hayes-compatible Modems and AT Commands</a> -- <a href="/wiki/Serial_Programming/USB" title="Serial Programming/USB">Universal Serial Bus (USB)</a> -- <a href="/wiki/Serial_Programming/Forming_Data_Packets" title="Serial Programming/Forming Data Packets">Forming Data Packets</a> -- <a href="/wiki/Serial_Programming/Error_Correction_Methods" title="Serial Programming/Error Correction Methods">Error Correction Methods</a> -- <a href="/w/index.php?title=Serial_Programming/Bi-directional_Communication&amp;action=edit&amp;redlink=1" class="new" title="Serial Programming/Bi-directional Communication (does not exist)">Two Way Communication</a> -- <a href="/w/index.php?title=Serial_Programming/Packet_Recovery&amp;action=edit&amp;redlink=1" class="new" title="Serial Programming/Packet Recovery (does not exist)">Packet Recovery Methods</a> -- <a href="/w/index.php?title=Serial_Programming/Serial_Networking&amp;action=edit&amp;redlink=1" class="new" title="Serial Programming/Serial Networking (does not exist)">Serial Data Networks</a> -- <a href="/w/index.php?title=Serial_Programming/Application_Messaging&amp;action=edit&amp;redlink=1" class="new" title="Serial Programming/Application Messaging (does not exist)">Practical Application Development</a> -- <a href="/wiki/Serial_Programming/IP_Over_Serial_Connections" title="Serial Programming/IP Over Serial Connections">IP Over Serial Connections</a></p> 
      </div> 
      <!-- 
NewPP limit report
Parsed by mw1300
Cached time: 20170914185837
Cache expiry: 1900800
Dynamic content: false
CPU time usage: 0.068 seconds
Real time usage: 0.090 seconds
Preprocessor visited node count: 410/1000000
Preprocessor generated node count: 0/1500000
Post?expand include size: 9004/2097152 bytes
Template argument size: 1039/2097152 bytes
Highest expansion depth: 13/40
Expensive parser function count: 2/500
--> 
      <!--
Transclusion expansion time report (%,ms,calls,template)
100.00%   32.341      1 -total
 33.51%   10.836      2 Template:Serial_Programming
 29.15%    9.428      1 Template:BookCat
 21.75%    7.033      6 Template:Sectstub
 21.04%    6.804      1 Template:BookCat/default
 17.65%    5.708      1 Template:Ambox
 16.05%    5.190      1 Template:BOOKCATEGORY
 13.23%    4.278      1 Template:BOOKCATEGORY/core
 12.26%    3.965      2 Template:TODO
 10.96%    3.543      1 Template:Ambox/core
--> 
     </div> 
     <!-- Saved in parser cache with key enwikibooks:pcache:idhash:21637-0!canonical and timestamp 20170914185837 and revision id 3214897
 --> 
     <noscript>
      <img src="//en.wikibooks.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;">
     </noscript>
    </div> 
    <div class="printfooter">
      Retrieved from "
     <a dir="ltr" href="https://en.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;oldid=3214897">https://en.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;oldid=3214897</a>" 
    </div> 
    <div id="catlinks" class="catlinks" data-mw="interface">
     <div id="mw-normal-catlinks" class="mw-normal-catlinks">
      <a href="/wiki/Special:Categories" title="Special:Categories">Categories</a>: 
      <ul>
       <li><a href="/wiki/Category:Serial_Programming" title="Category:Serial Programming">Serial Programming</a></li>
       <li><a href="/wiki/Category:Section_stubs" title="Category:Section stubs">Section stubs</a></li>
      </ul>
     </div>
    </div> 
    <div class="visualClear"></div> 
   </div> 
  </div> 
  <div id="mw-navigation"> 
   <h2>Navigation menu</h2> 
   <div id="mw-head"> 
    <div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label"> 
     <h3 id="p-personal-label">Personal tools</h3> 
     <ul> 
      <li id="pt-anonuserpage">Not logged in</li>
      <li id="pt-anontalk"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n">Discussion for this IP address</a></li>
      <li id="pt-anoncontribs"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y">Contributions</a></li>
      <li id="pt-createaccount"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Serial+Programming%2FSerial+Java" title="You are encouraged to create an account and log in; however, it is not mandatory">Create account</a></li>
      <li id="pt-login"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Serial+Programming%2FSerial+Java" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li> 
     </ul> 
    </div> 
    <div id="left-navigation"> 
     <div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label"> 
      <h3 id="p-namespaces-label">Namespaces</h3> 
      <ul> 
       <li id="ca-nstab-main" class="selected"><span><a href="/wiki/Serial_Programming/Serial_Java" title="View the content page [c]" accesskey="c">Book</a></span></li> 
       <li id="ca-talk"><span><a href="/wiki/Talk:Serial_Programming/Serial_Java" rel="discussion" title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li> 
      </ul> 
     </div> 
     <div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label"> 
      <h3 id="p-variants-label"> <span>Variants</span> </h3> 
      <div class="menu"> 
       <ul> 
       </ul> 
      </div> 
     </div> 
    </div> 
    <div id="right-navigation"> 
     <div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label"> 
      <h3 id="p-views-label">Views</h3> 
      <ul> 
       <li id="ca-view" class="collapsible"><span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;stable=1">Read</a></span></li> 
       <li id="ca-current" class="collapsible selected"><span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;stable=0&amp;redirect=no" title="View this page with the pending changes [v]" accesskey="v">Latest draft</a></span></li> 
       <li id="ca-edit" class="collapsible"><span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=edit" title="Edit this page [e]" accesskey="e">Edit</a></span></li> 
       <li id="ca-history" class="collapsible"><span><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></span></li> 
      </ul> 
     </div> 
     <div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label"> 
      <h3 id="p-cactions-label"><span>More</span></h3> 
      <div class="menu"> 
       <ul> 
       </ul> 
      </div> 
     </div> 
     <div id="p-search" role="search"> 
      <h3> <label for="searchInput">Search</label> </h3> 
      <form action="/w/index.php" id="searchform"> 
       <div id="simpleSearch"> 
        <input type="search" name="search" placeholder="Search Wikibooks" title="Search Wikibooks [f]" accesskey="f" id="searchInput">
        <input type="hidden" value="Special:Search" name="title">
        <input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton">
        <input type="submit" name="go" value="Go" title="Go to a page with this exact name if it exists" id="searchButton" class="searchButton"> 
       </div> 
      </form> 
     </div> 
    </div> 
   </div> 
   <div id="mw-panel"> 
    <div id="p-logo" role="banner">
     <a class="mw-wiki-logo" href="/wiki/Main_Page" title="Visit the main page"></a>
    </div> 
    <div class="portal" role="navigation" id="p-Navigation" aria-labelledby="p-Navigation-label"> 
     <h3 id="p-Navigation-label">Navigation</h3> 
     <div class="body"> 
      <ul> 
       <li id="n-mainpage"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z">Main Page</a></li>
       <li id="n-help"><a href="/wiki/Help:Contents" title="Find help on how to use and edit Wikibooks">Help</a></li>
       <li id="n-Browse"><a href="/wiki/Wikibooks:Card_Catalog_Office" title="Check out what Wikibooks has to offer">Browse</a></li>
       <li id="n-Cookbook"><a href="/wiki/Cookbook:Table_of_Contents" title="Learn recipes from around the world">Cookbook</a></li>
       <li id="n-Wikijunior"><a href="/wiki/Wikijunior" title="Books for children">Wikijunior</a></li>
       <li id="n-Featured-books"><a href="/wiki/Wikibooks:Featured_books" title="The best of Wikibooks">Featured books</a></li>
       <li id="n-recentchanges"><a href="/wiki/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
       <li id="n-sitesupport"><a href="//donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&amp;utm_medium=sidebar&amp;utm_campaign=C13_en.wikibooks.org&amp;uselang=en" title="Support Wikibooks">Donations</a></li>
       <li id="n-randomrootpage"><a href="/wiki/Special:RandomRootpage">Random book</a></li>
       <li id="n-Using-Wikibooks"><a href="/wiki/Using_Wikibooks">Using Wikibooks</a></li> 
      </ul> 
     </div> 
    </div> 
    <div class="portal" role="navigation" id="p-Community" aria-labelledby="p-Community-label"> 
     <h3 id="p-Community-label">Community</h3> 
     <div class="body"> 
      <ul> 
       <li id="n-Reading-room"><a href="/wiki/Wikibooks:Reading_room" title="Discuss Wikibooks-related questions and concerns with others">Reading room</a></li>
       <li id="n-portal"><a href="/wiki/Wikibooks:Community_Portal" title="Find your way around the Wikibooks community">Community portal</a></li>
       <li id="n-currentevents"><a href="/wiki/Wikibooks:Reading_room/Bulletin_Board" title="Important community news">Bulletin Board</a></li>
       <li id="n-maintenance"><a href="/wiki/Wikibooks:Maintenance" title="Frequent tasks that you can help with">Help out!</a></li>
       <li id="n-Policies-and-guidelines"><a href="/wiki/Wikibooks:Policies_and_guidelines" title="Pages detailing important rules and procedures">Policies and guidelines</a></li>
       <li id="n-contact"><a href="/wiki/Wikibooks:Contact_us" title="Alternative methods of communication">Contact us</a></li> 
      </ul> 
     </div> 
    </div> 
    <div class="portal" role="navigation" id="p-tb" aria-labelledby="p-tb-label"> 
     <h3 id="p-tb-label">Tools</h3> 
     <div class="body"> 
      <ul> 
       <li id="t-whatlinkshere"><a href="/wiki/Special:WhatLinksHere/Serial_Programming/Serial_Java" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
       <li id="t-recentchangeslinked"><a href="/wiki/Special:RecentChangesLinked/Serial_Programming/Serial_Java" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
       <li id="t-upload"><a href="//commons.wikimedia.org/wiki/Special:UploadWizard?uselang=en" title="Upload files [u]" accesskey="u">Upload file</a></li>
       <li id="t-specialpages"><a href="/wiki/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
       <li id="t-permalink"><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;oldid=3214897" title="Permanent link to this revision of the page">Permanent link</a></li>
       <li id="t-info"><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;action=info" title="More information about this page">Page information</a></li>
       <li id="t-cite"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Serial_Programming%2FSerial_Java&amp;id=3214897" title="Information on how to cite this page">Cite this page</a></li> 
      </ul> 
     </div> 
    </div> 
    <div class="portal" role="navigation" id="p-lang" aria-labelledby="p-lang-label"> 
     <h3 id="p-lang-label">In other languages</h3> 
     <div class="body"> 
      <ul> 
      </ul> 
      <div class="after-portlet after-portlet-lang">
       <span class="wb-langlinks-add wb-langlinks-link"><a href="https://www.wikidata.org/wiki/Special:NewItem?site=enwikibooks&amp;page=Serial+Programming%2FSerial+Java" title="Add interlanguage links" class="wbc-editpage">Add links</a></span>
      </div> 
     </div> 
    </div> 
    <div class="portal" role="navigation" id="p-Sister_projects" aria-labelledby="p-Sister_projects-label"> 
     <h3 id="p-Sister_projects-label">Sister projects</h3> 
     <div class="body"> 
      <ul> 
       <li id="n-Wikipedia"><a href="https://en.wikipedia.org/wiki/Main_Page">Wikipedia</a></li>
       <li id="n-Wikiversity"><a href="https://en.wikiversity.org/wiki/Wikiversity:Main_Page">Wikiversity</a></li>
       <li id="n-Wiktionary"><a href="https://en.wiktionary.org/wiki/Wiktionary:Main_Page">Wiktionary</a></li>
       <li id="n-Wikiquote"><a href="https://en.wikiquote.org/wiki/Main_Page">Wikiquote</a></li>
       <li id="n-Wikisource"><a href="https://en.wikisource.org/wiki/Main_Page">Wikisource</a></li>
       <li id="n-Wikinews"><a href="https://en.wikinews.org/wiki/Main_Page">Wikinews</a></li>
       <li id="n-Wikivoyage"><a href="https://en.wikivoyage.org/wiki/Main_Page">Wikivoyage</a></li>
       <li id="n-Commons"><a href="https://commons.wikimedia.org/wiki/Main_Page">Commons</a></li>
       <li id="n-Wikidata"><a href="https://www.wikidata.org/wiki/Wikidata:Main_Page">Wikidata</a></li> 
      </ul> 
     </div> 
    </div> 
    <div class="portal" role="navigation" id="p-coll-print_export" aria-labelledby="p-coll-print_export-label"> 
     <h3 id="p-coll-print_export-label">Print/export</h3> 
     <div class="body"> 
      <ul> 
       <li id="coll-create_a_book"><a href="/w/index.php?title=Special:Book&amp;bookcmd=book_creator&amp;referer=Serial+Programming%2FSerial+Java">Create a collection</a></li>
       <li id="coll-download-as-rdf2latex"><a href="/w/index.php?title=Special:ElectronPdf&amp;page=Serial+Programming%2FSerial+Java&amp;action=show-selection-screen&amp;coll-download-url=%2Fw%2Findex.php%3Ftitle%3DSpecial%3ABook%26bookcmd%3Drender_article%26arttitle%3DSerial%2BProgramming%252FSerial%2BJava%26returnto%3DSerial%2BProgramming%252FSerial%2BJava%26oldid%3D3214897%26writer%3Drdf2latex">Download as PDF</a></li>
       <li id="t-print"><a href="/w/index.php?title=Serial_Programming/Serial_Java&amp;printable=yes" title="Printable version of this page [p]" accesskey="p">Printable version</a></li> 
      </ul> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="footer" role="contentinfo"> 
   <ul id="footer-info"> 
    <li id="footer-info-lastmod"> This page was last edited on 7 May 2017, at 12:07.</li> 
    <li id="footer-info-copyright">Text is available under the <a href="//creativecommons.org/licenses/by-sa/3.0/">Creative Commons Attribution-ShareAlike License.</a>; additional terms may apply. By using this site, you agree to the <a href="//wikimediafoundation.org/wiki/Terms_of_Use">Terms of Use</a> and <a href="//wikimediafoundation.org/wiki/Privacy_policy">Privacy Policy.</a></li> 
   </ul> 
   <ul id="footer-places"> 
    <li id="footer-places-privacy"><a href="https://wikimediafoundation.org/wiki/Privacy_policy" class="extiw" title="wmf:Privacy policy">Privacy policy</a></li> 
    <li id="footer-places-about"><a href="/wiki/Wikibooks:Welcome" title="Wikibooks:Welcome">About Wikibooks</a></li> 
    <li id="footer-places-disclaimer"><a href="/wiki/Wikibooks:General_disclaimer" title="Wikibooks:General disclaimer">Disclaimers</a></li> 
    <li id="footer-places-developers"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute">Developers</a></li> 
    <li id="footer-places-cookiestatement"><a href="https://wikimediafoundation.org/wiki/Cookie_statement">Cookie statement</a></li> 
    <li id="footer-places-mobileview"><a href="//en.m.wikibooks.org/w/index.php?title=Serial_Programming/Serial_Java&amp;mobileaction=toggle_view_mobile" class="noprint stopMobileRedirectToggle">Mobile view</a></li> 
   </ul> 
   <ul id="footer-icons" class="noprint"> 
    <li id="footer-copyrightico"> <a href="https://wikimediafoundation.org/"><img src="/static/images/wikimedia-button.png" srcset="/static/images/wikimedia-button-1.5x.png 1.5x, /static/images/wikimedia-button-2x.png 2x" width="88" height="31" alt="Wikimedia Foundation"></a> </li> 
    <li id="footer-poweredbyico"> <a href="//www.mediawiki.org/"><img src="/static/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" srcset="/static/images/poweredby_mediawiki_132x47.png 1.5x, /static/images/poweredby_mediawiki_176x62.png 2x" width="88" height="31"></a> </li> 
   </ul> 
   <div style="clear:both"></div> 
  </div> 
  <script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgPageParseReport":{"limitreport":{"cputime":"0.068","walltime":"0.090","ppvisitednodes":{"value":410,"limit":1000000},"ppgeneratednodes":{"value":0,"limit":1500000},"postexpandincludesize":{"value":9004,"limit":2097152},"templateargumentsize":{"value":1039,"limit":2097152},"expansiondepth":{"value":13,"limit":40},"expensivefunctioncount":{"value":2,"limit":500},"entityaccesscount":{"value":0,"limit":400},"timingprofile":["100.00%   32.341      1 -total"," 33.51%   10.836      2 Template:Serial_Programming"," 29.15%    9.428      1 Template:BookCat"," 21.75%    7.033      6 Template:Sectstub"," 21.04%    6.804      1 Template:BookCat/default"," 17.65%    5.708      1 Template:Ambox"," 16.05%    5.190      1 Template:BOOKCATEGORY"," 13.23%    4.278      1 Template:BOOKCATEGORY/core"," 12.26%    3.965      2 Template:TODO"," 10.96%    3.543      1 Template:Ambox/core"]},"cachereport":{"origin":"mw1300","timestamp":"20170914185837","ttl":1900800,"transientcontent":false}}});});</script>
  <script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgBackendResponseTime":90,"wgHostname":"mw1215"});});</script>   
 </body>
</html>