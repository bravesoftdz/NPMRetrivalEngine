<!DOCTYPE html SYSTEM "about:legacy-compat">
<html xml:lang="en" lang="en" version="-//W3C//DTD XHTML 1.1//EN" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>Introduction to the Java API (Java Application Developer's Guide)
   — MarkLogic 9 Product Documentation</title>
  <meta charset="utf-8">
  <meta name="description" content="MarkLogic is the only Enterprise NoSQL Database">
  <meta name="keywords" content="marklogic, enterprise nosql database, enterprise nosql, database, nosql, nosql database, nosql db, xml, xml database, json, enterprise, bigdata, big data, xquery, xslt, petabyte, java db, java database, content, content store, content database, content db, content management system, CMS, document, document-oriented databases, document database, document db, document store, DB, xml database, xml db, json db, nonrelational, nonrelational database, nonrelational db">
  <meta name="viewport" content="initial-scale=1.0">
  <link href="/css/bootstrap.min.css" rel="stylesheet">
  <link href="/css/v-2/apidoc/jquery.treeview.css" rel="stylesheet" type="text/css" media="screen">
  <link href="/css/v-38/apidoc-screen.css" rel="stylesheet" type="text/css" media="screen">
  <link href="/css/v-33/apidoc.css" rel="stylesheet" type="text/css" media="screen">
  <link href="/css/v-1/apidoc_print.css" rel="stylesheet" type="text/css" media="print">
  <!--[if lte IE 8]>
        <link href="/css/v-2/screen_ie.css"
          rel="stylesheet" type="text/css" media="screen" />
        <![endif]-->
  <script src="/apidoc/js/optimized/all-2017-09-07T10:14:00.961-07:00.js" type="text/javascript" xml:space="preserve"></script>
  <!-- Un-minimize for debugging
         <script type="text/javascript" src="/js/jquery-1.7.2.js"></script>
         -->
 </head>
 <body> 
  <!-- Google Tag Manager --> 
  <noscript>
   <iframe src="//www.googletagmanager.com/ns.html?id=GTM-MBC6N2" height="0" width="0" style="display:none;visibility:hidden" frameborder="1" scrolling="auto"></iframe>
  </noscript> 
  <script xml:space="preserve">if ( document.location.hostname == 'docs.marklogic.com') {
(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src=
'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-MBC6N2'); }  </script> 
  <!-- End Google Tag Manager --> 
  <div id="header"> 
   <header> 
    <nav class="navbar-top row ml-nav"> 
     <div class="col-xs-5"> 
      <ul class="nav-web-properties">
       <li><a href="http://www.marklogic.com" target="_blank"><span class="glyphicon glyphicon-home"></span><span class="hidden-xs hidden-sm hidden-md">Marklogic.com</span></a></li>
       <li><a href="http://developer.marklogic.com" target="_blank"><span class="glyphicon glyphicon-console"></span><span class="hidden-xs hidden-sm hidden-md">Developers</span></a></li>
       <li><a href="http://world.marklogic.com" target="_blank"><span class="glyphicon glyphicon-globe"></span><span class="hidden-xs hidden-sm hidden-md">MarkLogic World</span></a></li>
       <li><a href="http://www.marklogic.com/services/training/" target="_blank"><span class="glyphicon glyphicon-apple"></span><span class="hidden-xs hidden-sm hidden-md">University</span></a></li>
      </ul> 
     </div> 
     <div class="col-xs-7"> 
      <ul class="nav-resources pull-right">
       <li><a href="http://stackoverflow.com/questions/ask?tags=marklogic"><span class="glyphicon glyphicon-question-sign"></span><span class="hidden-xs hidden-sm">Ask a Question</span></a></li>
      </ul> 
      <nav id="login-menu-nav">
       <ul class="pull-right">
        <li class="btn-group"><a href="#" class="drop-down-trigger navbar-top" id="login-trigger" aria-haspopup="true" data-toggle="dropdown"> Log in </a>
         <form id="local-login-form" class="dropdown-menu" method="post" action="//developer.marklogic.com/login">
          <div style="clear: both" id="login-error"></div>
          <div class="form-group">
           <label class="control-label" for="email">Email:</label>
           <input class="required email form-control input-sm" autofocus required id="email" name="email" title="password" value="" type="text">
          </div>
          <div class="form-group">
           <label class="control-label" for="password">Password:</label>
           <input class="password required form-control input-sm" required id="password" name="password" title="password" value="" type="password">
          </div>
          <div class="form-group">
           <button onclick="return false;" class="btn btn-xs btn-default" id="login_submit" type="button">Log in</button>
          </div>
          <div class="form-group">
           <button onclick="return false;" data-url="//developer.marklogic.com/people/recovery" class="btn btn-xs btn-default" id="recovery">Forgot password?</button>
          </div>
         </form></li>
        <li><a href="/people/signup" class="drop-down-trigger navbar-top" id="signup-trigger" data-url="//developer.marklogic.com/people/signup"> Sign up </a></li>
        <li class="btn-group"><a href="#" class="drop-down-trigger" id="session-trigger" aria-haspopup="true" data-toggle="dropdown" style="display:none"><span class="caret"></span></a>
         <ul class="dropdown-menu">
          <li><a href="//developer.marklogic.com/people/profile">Edit Profile</a></li>
          <li><a href="#" id="logout">Log out</a></li>
         </ul></li>
       </ul>
      </nav> 
     </div> 
    </nav> 
    <nav class="navbar navbar-inverse dmc-nav"> 
     <div class="container-fluid"> 
      <!-- Brand and toggle get grouped for better mobile display --> 
      <div class="navbar-header"> 
       <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#dmc-navbar-collapse" aria-expanded="false"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
       <a class="navbar-brand" ml:class="" href="//developer.marklogic.com" xmlns:ml="http://developer.marklogic.com/site/internal"> <img src="/images/logo-community-white.svg" alt="MarkLogic® Community"> </a> 
      </div> 
      <div class="collapse navbar-collapse row" id="dmc-navbar-collapse"> 
       <form class="navbar-form navbar-right search-form" action="//developer.marklogic.com/search" method="get" enctype="application/x-www-form-urlencoded">
        <div class="form-group"> 
         <input type="hidden" name="v" value="9.0"> 
         <input type="hidden" name="api" value="1"> 
         <div class="input-group"> 
          <input id="s_inp" name="q" type="text" class="form-control" autocapitalize="off" placeholder="Search with MarkLogic" value=""> 
          <span class="input-group-addon"> <i class="glyphicon glyphicon-search"></i> </span> 
         </div> 
        </div>
       </form> 
       <ul class="nav navbar-nav navbar-right">
        <li class="current"><a href="//docs.marklogic.com/" data-toggle="tooltip" data-placement="bottom" title="">Documentation</a></li>
        <li><a href="//developer.marklogic.com/products" data-toggle="tooltip" data-placement="bottom" title="">Downloads</a></li>
        <li><a href="//developer.marklogic.com/learn" data-toggle="tooltip" data-placement="bottom" title="">Tutorials</a></li>
        <li><a href="//developer.marklogic.com/code" data-toggle="tooltip" data-placement="bottom" title="">Tools</a></li>
        <li><a href="//developer.marklogic.com/blog" data-toggle="tooltip" data-placement="bottom" title="">Blog</a></li>
        <li><a href="//developer.marklogic.com/qa" data-toggle="tooltip" data-placement="bottom" title="">Q&amp;A</a></li>
        <li><a href="//developer.marklogic.com/meet" data-toggle="tooltip" data-placement="bottom" title="">People</a></li>
       </ul> 
      </div> 
     </div> 
    </nav> 
   </header> 
   <div id="header-below-bottom-bar"> 
    <div id="breadcrumb"> 
     <div class="col-xs-9">
      <a href="/">Docs</a>
      <span id="breadcrumbDynamic"></span>
     </div> 
    </div> 
    <div class="version">
     <span>Version:</span> 
     <select id="version_list" data-default="9.0"><option value="5.0">5.0</option><option value="6.0">6.0</option><option value="7.0">MarkLogic 7</option><option value="8.0">MarkLogic 8</option><option value="9.0" selected="true">MarkLogic 9</option></select>
    </div> 
   </div> 
  </div> 
  <div id="api_sub"> 
   <div id="apidoc_toc">
    <!--TOC goes here-->Loading TOC...
   </div> 
  </div> 
  <section id="page_content"> 
   <input id="functionPageBucketId" value="" type="hidden">
   <input id="tocSectionLinkSelector" value=".scrollable_section a[href='/guide/java']" type="hidden">
   <input id="isUserGuide" value="true" type="hidden">
   <input id="toc_url" value="/media/apiTOC/default/apiTOC_2017-09-11T13:22:01.721834-07:00.html" type="hidden"> 
   <div class="userguide pjax_enabled">
    <a class="guide-pdf-link" href="/guide/java.pdf"><img src="/images/i_pdf.png" alt="Java Application Developer's Guide (PDF)" class="printerFriendly" width="16" height="16"></a>
    <a href="?print=yes" target="_blank" class="printerFriendly"><img src="/apidoc/images/printerFriendly.png"></a>
    <h1><a href="/guide/java">Java Application Developer's Guide</a><span class="chapterNumber"> — Chapter&nbsp;1</span></h1>
    <div class="previousChapter pjax_enabled">
     <a href="/guide/java" accesskey="p">«&nbsp;Table&nbsp;of&nbsp;contents</a>
    </div>
    <div class="nextChapter pjax_enabled">
     <a href="/guide/java/document-operations" accesskey="n">Next&nbsp;chapter&nbsp;»</a>
    </div>
    <div class="section" data-fm-style="Heading-1">
     <a id="chapter"></a>
     <h2><a href="#chapter" class="sectionLink">Introduction to the Java API</a></h2>
     <p><a id="id_pgfId-1080885"></a>The Java Client API is an open source API for creating applications that use MarkLogic Server for document and search operations. Developers can easily take advantage of the advanced capabilities for persistence and search of unstructured documents that MarkLogic Server provides. The capabilities provided by the JAVA API include:</p>
     <ul>
      <li>Insert, update, or remove documents and document metadata. For details, see <a href="/guide/java/document-operations#">Single Document Operations</a>.</li>
      <li>Query text and lexicon values. For details, see <a href="/guide/java/searches#">Searching</a>.</li>
      <li>Configure persistent and dynamic query options. For details, see <a href="/guide/java/query-options#">Query Options</a>.</li>
      <li>Apply transformations to new content and search results. For details, see <a href="/guide/java/transforms#">Content Transformations</a>.</li>
      <li>Extend the Java API to expose custom capabilities you install on MarkLogic Server. For details, see <a href="/guide/java/resourceservices#">Extending the Java API</a>.</li>
     </ul>
     <p><a id="id_pgfId-1077512"></a>When working with the Java API, you first create a manager for the type of document or operation you want to perform on the database (for instance, a <code>JSONDocumentManager</code> to write and read JSON documents or a <code>QueryManager</code> to search the database). To write or read the content for a database operation, you use standard Java APIs such as <code>InputStream</code>, DOM, StAX, JAXB, and Transformer as well as Open Source APIs such as JDOM and Jackson. </p>
     <p><a id="id_pgfId-1077750"></a>The Java API provides a handle (a kind of adapter) as a uniform interface for content representation. As a result, you can use APIs as different as <code>InputStream</code> and DOM to provide content for one <code>read()</code> or <code>write()</code> method. In addition, you can extend the Java API so you can use the existing <code>read()</code> or <code>write()</code> methods with new APIs that provide useful representations for your content.</p>
     <p><a id="id_pgfId-1076744"></a>This chapter covers a number of basic architecture aspects of the Java API, including fundamental structures such as <em>database clients</em>, <em>managers</em>, and <em>handles</em> used in almost every program you will write with it. Before starting to code, you need to understand these structures and the concepts behind them.</p>
     <p>The MarkLogic Java Client API is built on top of the MarkLogic REST API. The REST API, in turn, is built using XQuery that is evaluated against an HTTP App Server. For this reason, you need a REST API instance on MarkLogic Server to use the Java API. A suitable REST API instance on port 8000 is pre-configured when you install MarkLogic Server. You can also create your own on another port. For details, see <a href="#id_69370">Choose a REST API Instance</a>.</p>
     <p><a id="id_pgfId-1076775"></a>This chapter includes the following sections:</p>
     <ul>
      <li><a href="#id_97291">Java API or Java XCC?</a></li>
      <li><a href="#id_85623">Getting Started</a></li>
      <li><a href="#id_98962">Creating, Working With, And Releasing a Database Client</a></li>
      <li><a href="#id_45214">Authentication and Connection Security</a></li>
      <li><a href="#id_95053">A Basic 'Hello World' Method</a></li>
      <li><a href="#id_71012">Document Managers</a></li>
      <li><a href="#id_84113">Streaming</a></li>
      <li><a href="#id_15219">Using Handles for Input and Output</a></li>
      <li><a href="#id_40752">Shortcut Methods as an Alternative to Creating Handles</a></li>
      <li><a href="#id_26854">Thread Safety of the Java API</a></li>
      <li><a href="#id_27902">Downloading the Library Source Code</a></li>
     </ul>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_97291"></a>
      <h3><a href="#id_97291" class="sectionLink">Java API or Java XCC?</a></h3>
      <p><a id="id_pgfId-1073443"></a>The Java API co-exists with the previously developed Java XCC, as they are intended for different use cases. </p>
      <p><a id="id_pgfId-1073450"></a>A Java developer can use the Java API to quickly become productive in their existing Java environment, using the Java interfaces for search, facets, and document management. It is also possible to use its extension mechanism to invoke XQuery, so as both to leverage development teams XQuery expertise and to enable MarkLogic server functionality not implemented by the Java API. </p>
      <p><a id="id_pgfId-1073457"></a>XCC provides a lower-level interface for running remote or ad hoc XQuery. While it provides significant flexibility, it also has a somewhat steeper learning curve for developers who are unfamiliar with XQuery. You may want to think of XCC as being similar to ODBC or JDBC; a low level API for sending query language directly to the server, while the Java Client API is a higher level API for working with database constructs in Java.</p>
      <p><a id="id_pgfId-1078471"></a>In terms of performance, the Java API is very similar to Java XCC for compatible queries. The Java API is a very thin wrapper over a REST API with negligible overhead. Because it is REST-based, minimize network distance for best performance.</p>
      <p><a id="id_pgfId-1075736"></a>For more information about Java XCC, see the <a href="/guide/xcc"><em>XCC Developer's Guide</em></a>.</p>
     </div>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_85623"></a>
      <h3><a href="#id_85623" class="sectionLink">Getting Started</a></h3>
      <p><a id="id_pgfId-1071283"></a>To get started with the Java Client API, do the following:</p>
      <ul>
       <li><a href="#id_45280">Make the Libraries Available to Your Application</a></li>
       <li><a href="#id_69370">Choose a REST API Instance</a></li>
       <li><a href="#id_79397">Create Users</a></li>
       <li><a href="#id_43853">Explore the Examples</a></li>
      </ul>
      <p><a id="id_pgfId-1081098"></a>You need Java JRE 1.8 or later to use the Java Client API.</p>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_45280"></a>
       <h4><a href="#id_45280" class="sectionLink">Make the Libraries Available to Your Application</a></h4>
       <p><a id="id_pgfId-1080937"></a>You can either download a ZIP file of the Java Client API, or access the libraries from the central Maven repository.</p>
       <p><a id="id_pgfId-1080559"></a>To download a ZIP file or to get the Maven repository URL, go to the following URL:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1080571"></a><a href="http://developer.marklogic.com/products/java-api">http://developer.marklogic.com/products/java-api</a></pre>
       <p><a id="id_pgfId-1080193"></a>To use the ZIP file, download the ZIP file, uncompress it to a directory of your choice. The jar files you need to add to your class path are in the <code>lib/</code> subdirectory.</p>
       <p><a id="id_pgfId-1080464"></a>To use the Maven repository, add the following to your Maven project POM file. The repository details are available on the above download page. For example, add the following to your <code>pom.xml</code> file. (You may need to change the <code>version</code> data to match the release you're using.)</p>
       <pre xml:space="preserve"><a id="id_pgfId-1081396"></a>&lt;dependency&gt;
    &lt;groupId&gt;com.marklogic&lt;/groupId&gt;
    &lt;artifactId&gt;marklogic-client-api&lt;/artifactId&gt;
    &lt;version&gt;4.0.1&lt;/version&gt;
&lt;/dependency&gt;</pre>
       <p><a id="id_pgfId-1081447"></a>Alternatively, if you use Gradle as your build tool, add the following to your <code>build.gradle</code> file. Modify the version number as needed.</p>
       <pre xml:space="preserve"><a id="id_pgfId-1087949"></a>compile group: 'com.marklogic', 
name: 'marklogic-client-api', 
version: '4.0.1'</pre>
       <p><a id="id_pgfId-1087935"></a>The Java Client API is an open-source project, so you can also access the sources and build your own library. See <a href="http://github.com/marklogic/java-client-api">http://github.com/marklogic/java-client-api</a>.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_69370"></a>
       <h4><a href="#id_69370" class="sectionLink">Choose a REST API Instance</a></h4>
       <p><a id="id_pgfId-1081150"></a>The Java API implementation interacts with MarkLogic Server using the MarkLogic REST Client API. Therefore you must have access to a REST API instance in MarkLogic Server before you can run an application that uses the Java Client API. </p>
       <p><a id="id_pgfId-1080257"></a>A REST API instance includes a specially configured HTTP App Server capable of handling REST Client API requests, a content database, and a modules database. MarkLogic Server comes with a suitable REST API instance attached to the Documents database, listening on port 8000. </p>
       <p>The examples in this guide assume you're using the pre-configured REST API instance on port 8000 of localhost. If you want to create and use a different REST instance, see , see <a href="/guide/rest-dev/service#">Administering REST Client API Instances</a> in the <a href="/guide/rest-dev"><em>REST Application Developer's Guide</em></a>.</p>
       <p class="note"><a id="id_pgfId-1080451"></a>Each application must use a separate modules database and REST API instance.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_79397"></a>
       <h4><a href="#id_79397" class="sectionLink">Create Users</a></h4>
       <p><a id="id_pgfId-1080231"></a>You might need to create MarkLogic Server users with appropriate security roles, or give additional privileges to existing users.</p>
       <p><a id="id_pgfId-1080328"></a>Any user who reads data will need at least the <code>rest-reader</code> role and any user that writes data will need at least the <code>rest-writer</code> role. </p>
       <p>REST instance configuration operations, such as setting instance properties require the <code>rest-admin </code>role. For details, see <a href="/guide/java/serverconfiguration#">REST Server Configuration</a>. </p>
       <p>Some operations require additional privileges. For example, a <code>DatabaseClient</code> that connects to a database other than the default database associated with the REST instance must have the <code>http://marklogic.com/xdmp/privileges/xdmp-eval-in</code> privilege. Using the <code>ServerEvaluationCall</code> interface also requires special privileges; for details, see <a href="/guide/java/resourceservices#id_70532">Evaluating an Ad-Hoc Query or Server-Side Module</a>.</p>
       <p><a id="id_pgfId-1080624"></a>Note that MarkLogic Server Administration is <em>not</em> exposed in Java, so operations such as creating indices, creating users, creating databases, etc. must be done via the Admin Interface, REST Management API, or other MarkLogic Server administration tool. The server configuration component of the Java API is restricted to configuration operations on the REST instance. </p>
       <p>For details, see <a href="/guide/rest-dev/intro#id_59939">Security Requirements</a> in the <a href="/guide/rest-dev"><em>REST Application Developer's Guide</em></a>.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_43853"></a>
       <h4><a href="#id_43853" class="sectionLink">Explore the Examples</a></h4>
       <p><a id="id_pgfId-1080204"></a>The Java Client API distribution includes several examples in the <code>examples/</code> directory. The examples include the following packages:</p>
       <ul>
        <li><a id="id_pgfId-1079981"></a><code>com.marklogic.client.example.cookbook</code>: A collection of small examples of using the core features of the API, such as document operations and search. Most of the example code in this guide is drawn from the Cookbook examples.</li>
        <li><a id="id_pgfId-1079982"></a><code>com.marklogic.client.example.handle</code>: Examples of using handles based on open source document models, such as JDOM or Jackson. Examples of handle extensions that read or write database documents in a new way.</li>
        <li><a id="id_pgfId-1079446"></a><code>com.marklogic.client.example.extension</code>: A collection of extension classes and examples for manipulating documents in batches.</li>
       </ul>
       <p><a id="id_pgfId-1081478"></a>For instructions on building and running the examples, see the project wiki on GitHub:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1081492"></a><a href="http://github.com/marklogic/java-client-api/wiki/Running-the-Examples">http://github.com/marklogic/java-client-api/wiki/Running-the-Examples</a></pre>
      </div>
     </div>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_98962"></a>
      <h3><a href="#id_98962" class="sectionLink">Creating, Working With, And Releasing a Database Client</a></h3>
      <p><a id="id_pgfId-1082484"></a>Your application must create at least one <code>DatabaseClient</code> object before it can interact with MarkLogic using the Java Client API. The following topics cover key things you should know about the <code>DatabaseClient</code> interface.</p>
      <ul>
       <li><a href="#id_17790">The Role of a Database Client</a></li>
       <li><a href="#id_14994">Expected Database Client Lifetime</a></li>
       <li><a href="#id_51879">Connection Management and Configuration</a></li>
       <li><a href="#id_77722">Creating a Database Client</a></li>
       <li><a href="#id_82824">Releasing a Database Client</a></li>
      </ul>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_17790"></a>
       <h4><a href="#id_17790" class="sectionLink">The Role of a Database Client</a></h4>
       <p>A <code>DatabaseClient</code> object encapsulates the information needed to connect to MarkLogic, such as the host and port of a REST API instance, the database to operate on, and the authentication context. Internally, each <code>DatabaseClient</code> object is associated with a connection pool, as described in <a href="#id_51879">Connection Management and Configuration</a>.</p>
       <p><a id="id_pgfId-1084281"></a>Most tasks you perform using the Java Client API are handled by a manager object. For example, you use a <code>QueryManager</code> to search the database and a <code>DocumentManager</code> to read, update, and delete documents. You create manager objects using factory methods on <code>DatabaseClient</code>, such as <code>newQueryManager</code> and <code>newDocumentManager</code>. </p>
       <p>Most applications only need a single, long-lived DatabaseClient object, shared across multiple threads. You should not repeatedly create and tear down client objects. For more details, see <a href="#id_14994">Expected Database Client Lifetime</a>.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_14994"></a>
       <h4><a href="#id_14994" class="sectionLink">Expected Database Client Lifetime</a></h4>
       <p><a id="id_pgfId-1083546"></a>You should maintain a single, shared reference to a <code>DatabaseClient</code> object for the lifetime of your application's interaction MarkLogic, rather than frequently creating and destroying client objects. </p>
       <p><a id="id_pgfId-1083547"></a>You might need multiple <code>DatabaseClient</code> objects under some circumstances. For example, if you need to connect to multiple databases or to connect to MarkLogic as multiple users. You must create a different <code>DatabaseClient</code> instance for each combination of (host, port, database, authentication context). Again, it is best to keep these instances around throughout their potential useful lifetime, rather than repeatedly recreating them.</p>
       <p><a id="id_pgfId-1082405"></a>You can and should share one <code>DatabaseClient</code> object across multiple threads. After initial configuration, a <code>DatabaseClient</code> object is thread safe.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_51879"></a>
       <h4><a href="#id_51879" class="sectionLink">Connection Management and Configuration</a></h4>
       <p><a id="id_pgfId-1083484"></a>Internally each <code>DatabaseClient</code> object is associated 1-to-1 with a connection pool held by an Apache <code>ThreadSafeClientConnManager</code> object. The connection pool efficiently re-uses connections, so you can use a single <code>DatabaseClient</code> instance throughout the lifetime of your application. </p>
       <p><a id="id_pgfId-1083622"></a>Whenever a <code>DatabaseClient</code> object makes a request to MarkLogic, an available connection is drawn from the connection pool. The connection is returned to the pool once the HTTP response is received, processed, and closed. A connection in the pool persists until it is explicitly released or times out. New connections are created on demand, as needed. </p>
       <p><a id="id_pgfId-1084219"></a>No state information is maintained with a connection. All cookies are discared unless a multi-statement (multi-request) transaction is in use. The cookies associated with a multi-statement transaction are cached on the transaction object rather than with the connection.</p>
       <p><a id="id_pgfId-1083378"></a>A connection pool is configured to have 100 connections, which means a maximum of 100 HTTP socket connections per DatabaseClient object.</p>
       <p><a id="id_pgfId-1083407"></a>You can adjust the connection pool configuration by implementing <code>HttpClientConfigurator</code> and calling its <code>configure</code> method. However, such adjustments depend on Java Client API internals and will be ignored if a future version of the API uses a different HTTP client implementation.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_77722"></a>
       <h4><a href="#id_77722" class="sectionLink">Creating a Database Client</a></h4>
       <p><a id="id_pgfId-1084382"></a>To create a database client, use the <code>com.marklogic.client.DatabaseClientFactory.newClient()</code> method. For example, the following client connects to the default content database associated with the REST instance on port 8000 of localhost using digest authentication.</p>
       <pre xml:space="preserve"><a id="id_pgfId-1084383"></a>DatabaseClient client = 
&nbsp;&nbsp;DatabaseClientFactory.newClient(
&nbsp;&nbsp;&nbsp;&nbsp;"localhost", 8000,
&nbsp;&nbsp;&nbsp;&nbsp;new DatabaseClientFactory.DigestAuthContext("myuser", "mypassword"));</pre>
       <p><a id="id_pgfId-1084384"></a>You can also create clients that connect to a specific content database. For example, the following client also connects to the REST instance on port 8000 of localhost, but all operations are performed against the database 'MyDatabase':</p>
       <pre xml:space="preserve"><a id="id_pgfId-1084385"></a>DatabaseClient client = 
&nbsp;&nbsp;DatabaseClientFactory.newClient(
&nbsp;&nbsp;&nbsp;&nbsp;"localhost", 8000, <strong>"MyDatabase"</strong>,
&nbsp;&nbsp;&nbsp;&nbsp;new DatabaseClientFactory.DigestAuthContext("myuser", "mypassword"));</pre>
       <p class="note"><a id="id_pgfId-1084386"></a>To use a database other than the default database associated with the REST instance requires a user with the following privilege or the equivalent role: <code>http://marklogic.com/xdmp/privileges/xdmp-eval-in</code>.</p>
       <p><a id="id_pgfId-1084387"></a>The <code>host</code> and <code>port</code> values must be those of a REST API instance. When you install MarkLogic, a REST API instance associated with the Documents database is pre-configured for port 8000. You can also create your own instance.</p>
       <p>The authentication context object should match the configuration of the REST API instance. For more details, see <a href="#id_45214">Authentication and Connection Security</a>.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_82824"></a>
       <h4><a href="#id_82824" class="sectionLink">Releasing a Database Client</a></h4>
       <p><a id="id_pgfId-1072800"></a>When you no longer need a client and want to release connection resources, use the <code>DatabaseClient</code> object's <code>release()</code> method.</p>
       <pre xml:space="preserve"><a id="id_pgfId-1072724"></a>client.release();</pre>
       <p>DatabaseClient objects efficiently manage connection resources and are expected to be long lived. You do not need to release and re-create client objects just because your application might not require a connection for an extended time. For more details, see <a href="#id_14994">Expected Database Client Lifetime</a> and <a href="#id_51879">Connection Management and Configuration</a>.</p>
      </div>
     </div>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_45214"></a>
      <h3><a href="#id_45214" class="sectionLink">Authentication and Connection Security</a></h3>
      <p><a id="id_pgfId-1083728"></a>This section provides an overview of several methods for securing the communication between your client application and MarkLogic. See the following topics for details:</p>
      <ul>
       <li><a href="#id_47377">Creating a Security Context Object</a></li>
       <li><a href="#id_43335">Using Kerberos Authentication</a></li>
       <li><a href="#id_31958">Connecting to MarkLogic with SSL</a></li>
      </ul>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_47377"></a>
       <h4><a href="#id_47377" class="sectionLink">Creating a Security Context Object</a></h4>
       <p><a id="id_pgfId-1083743"></a>One of the inputs to <code>DatabaseClientFactory.newClient</code> is a security context object. This object tells the API what credentials to use to authenticate with MarkLogic. You can select from authentication methods such as Kerberos, digest, and basic. </p>
       <p><a id="id_pgfId-1083744"></a>For example, the database client created by the following statement uses digest authentication. The username and password are those of a user configured into MarkLogic.</p>
       <pre xml:space="preserve"><a id="id_pgfId-1083745"></a>import com.marklogic.client.DatabaseClientFactor.DigestAuthContext;
...
DatabaseClient client = DatabaseClientFactory.newClient(
&nbsp;&nbsp;&nbsp;&nbsp;"localhost", 8000, new <strong>DigestAuthContext(username, password)</strong>);</pre>
       <p><a id="id_pgfId-1083746"></a>The authentication context object should match the configuration of the REST API instance. Kerberos based authentication is most secure. Basic authentication sends the password in obfuscated, but not encrypted, mode. Digest authentication encrypts passwords sent over the network. </p>
       <p>You can connect to MarkLogic using SSL by attaching SSL configuration information to the security context. For details, see <a href="#id_31958">Connecting to MarkLogic with SSL</a>.</p>
       <p>For more information about user authentication, see <a href="/guide/security/authentication#">Authenticating Users</a> in the <a href="/guide/security"><em>Security Guide</em></a>.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_43335"></a>
       <h4><a href="#id_43335" class="sectionLink">Using Kerberos Authentication</a></h4>
       <p><a id="id_pgfId-1083756"></a>Use the following steps to configure your MarkLogic installation and client application environment for Kerberos authentication:</p>
       <ul>
        <li><a href="#id_71510">Configuring MarkLogic to Use Kerberos</a></li>
        <li><a href="#id_70914">Configuring Your Client Host for Kerberos</a></li>
        <li><a href="#id_32303">Creating a Database Client that Uses Kerberos</a></li>
       </ul>
       <p><a id="id_pgfId-1083994"></a>Your client host must be running Linux in order to use Kerberos with the Java Client API.</p>
       <div class="section" data-fm-style="Heading-4">
        <a id="id_71510"></a>
        <h5><a href="#id_71510" class="sectionLink">Configuring MarkLogic to Use Kerberos</a></h5>
        <p><a id="id_pgfId-1083759"></a>Before you can use Kerberos authentication, you must configure MarkLogic to use external security. If your installation is not already configured for Kerberos, you must perform at least the following steps:</p>
        <ol compact="none">
         <li>Create a Kerberos external security configuration object. For details, see <a href="/guide/security/external-auth#id_35317">Creating an External Authentication Configuration Object</a> in the <a href="/guide/security"><em>Security Guide</em></a>.</li>
         <li>Create a Kerberos keytab file and install it in your MarkLogic installation. For details, see <a href="/guide/security/external-auth#id_13835">Creating a Kerberos keytab File</a> in the <a href="/guide/security"><em>Security Guide</em></a>. </li>
         <li>Create one or more users associated with an external name. For details, see <a href="/guide/security/external-auth#id_17129">Assigning an External Name to a User</a> in the <a href="/guide/security"><em>Security Guide</em></a>.</li>
         <li>Configure your App Server to use 'kerberos-ticket' authentication. For details, see <a href="/guide/security/external-auth#id_63262">Configuring an App Server for External Authentication</a> in the <a href="/guide/security"><em>Security Guide</em></a>.</li>
        </ol>
        <p>For more details, see <a href="/guide/security/external-auth#">External Security</a> in the <a href="/guide/security"><em>Security Guide</em></a>.</p>
       </div>
       <div class="section" data-fm-style="Heading-4">
        <a id="id_70914"></a>
        <h5><a href="#id_70914" class="sectionLink">Configuring Your Client Host for Kerberos</a></h5>
        <p><a id="id_pgfId-1083910"></a>On the client, the Java Client API must be able to access a Ticket-Granting Ticket (TGT) from the Kerberos Key Distribution Center. The API uses the TGT to obtain a Kerberos service ticket. </p>
        <p><a id="id_pgfId-1083911"></a>Follow these steps to make a TGT available to the client application:</p>
        <ol compact="none">
         <li><a id="id_pgfId-1083912"></a>Install MIT Kerberos in your client environment if it is not already installed. You can download MIT Kerberos from <a href="http://www.kerberos.org/software/index.html">http://www.kerberos.org/software/index.html</a>.</li>
         <li><a id="id_pgfId-1084011"></a>If this is a new installation of MIT Kerberos, configure your installation by editing the <code>krb5.conf</code> file. For details, see <a href="https://web.mit.edu/kerberos/krb5-1.15/doc/admin/conf_files/krb5_conf.html">https://web.mit.edu/kerberos/krb5-1.15/doc/admin/conf_files/krb5_conf.html</a>.<p><a id="id_pgfId-1084056"></a>On Linux, Java expects this file to be located in <code>/etc/</code> by default. Java uses the conf file to determine your default realm and the KDC for that realm. </p><p><a id="id_pgfId-1084439"></a>If your <code>krb5.conf</code> file contains a setting for <code>default_ccache_name</code>, the value must be a file reference of the form <code>FILE:/tmp/krb5cc_%{uid}</code>. This is required because the Java Client API sets the <code>useTicketCache</code> option of <code>Krb5LoginModule</code> to <code>true</code>. For more details, see the javadoc for <code>com.sun.security.auth.module.Krb5LoginModule</code>. </p></li>
         <li>Use <code>kinit</code> or a similar tool on your client host to create and cache a TGT with the Kerberos Key Distribution Center. The principal supplied to <code>kinit</code> must be one you associated with a MarkLogic user when performing the steps in <a href="#id_71510">Configuring MarkLogic to Use Kerberos</a>. </li>
        </ol>
        <p><a id="id_pgfId-1084145"></a>For more details, see the following topics:</p>
        <ul>
         <li><a id="id_pgfId-1084038"></a>Using Kerberos with Java: <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/KerberosReq.html">http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/KerberosReq.html</a></li>
         <li><a id="id_pgfId-1084465"></a>Kinit command: <a href="https://web.mit.edu/kerberos/krb5-1.15/doc/user/user_commands/kinit.html">https://web.mit.edu/kerberos/krb5-1.15/doc/user/user_commands/kinit.html</a> </li>
         <li><a id="id_pgfId-1084040"></a>Obtaining a ticket: <a href="http://web.mit.edu/kerberos/krb5-current/doc/user/tkt_mgmt.html#obtaining-tickets-with-kinit">http://web.mit.edu/kerberos/krb5-current/doc/user/tkt_mgmt.html#obtaining-tickets-with-kinit</a> </li>
         <li><a id="id_pgfId-1084099"></a>Krb5LoginModule javadoc: <a href="https://docs.oracle.com/javase/8/docs/jre/api/security/jaas/spec/com/sun/security/auth/module/Krb5LoginModule.html">https://docs.oracle.com/javase/8/docs/jre/api/security/jaas/spec/com/sun/security/auth/module/Krb5LoginModule.html</a></li>
        </ul>
       </div>
       <div class="section" data-fm-style="Heading-4">
        <a id="id_32303"></a>
        <h5><a href="#id_32303" class="sectionLink">Creating a Database Client that Uses Kerberos</a></h5>
        <p><a id="id_pgfId-1083857"></a>In your client application, use <code>KerberosAuthContext</code> for your security context object. For example:</p>
        <pre xml:space="preserve"><a id="id_pgfId-1083789"></a>import com.marklogic.client.DatabaseClientFactory.KerberosAuthContext;
...
DatabaseClient client = DatabaseClientFactory.newClient(
&nbsp;&nbsp;&nbsp;&nbsp;"localhost", 8000, new <strong>KerberosAuthContext()</strong>);</pre>
        <p><a id="id_pgfId-1084164"></a>You do not need to pass an explicit <code>externalName</code> parameter to <code>KerberosAuthContext</code> unless you have multiple principals authenticated in your ticket cache and need to specify which one to use.</p>
       </div>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_31958"></a>
       <h4><a href="#id_31958" class="sectionLink">Connecting to MarkLogic with SSL</a></h4>
       <p><a id="id_pgfId-1083792"></a>You can use the security context to specify whether or not to use a secure SSL connection to communicate with MarkLogic. The App Server you connect to must also be configured to accept SSL connections. By default, the Java Client API does not use SSL.</p>
       <p><a id="id_pgfId-1083793"></a>For example, the database client created by the following statement uses digest authentication and an SSL connection:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1083794"></a>import com.marklogic.client.DatabaseClientFactor.DigestAuthContext;
import javax.net.ssl.SSLContext;
...
SSLContext scontext = SSLContext.getInstance(...).init(...);
DatabaseClient client = DatabaseClientFactory.newClient(
&nbsp;&nbsp;&nbsp;&nbsp;"localhost", 8000, 
&nbsp;&nbsp;&nbsp;&nbsp;new <strong>DigestAuthContext(username, password).withSSLContext(scontext</strong>);</pre>
       <p>The <code>SSLContext</code> object represents a secure socket protocol implementation which acts as a factory for secure socket factories. For more information about creating and working with <code>SSLContext</code> objects, see <a href="/guide/xcc/concepts#id_55501">Accessing SSL-Enabled XDBC App Servers</a> in the <a href="/guide/xcc"><em>XCC Developer's Guide</em></a>. </p>
       <p><a id="id_pgfId-1083802"></a>For even more security, you can also include a <code>DatabaseClientFactory.SSLHostnameVerifier</code> object to check if a hostname is acceptable. </p>
       <p><a id="id_pgfId-1083806"></a>For more information about secure communication with MarkLogic, see the <a href="/guide/security"><em>Security Guide</em></a>.</p>
      </div>
     </div>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_95053"></a>
      <h3><a href="#id_95053" class="sectionLink">A Basic 'Hello World' Method</a></h3>
      <p>The following code is a basic method that creates a new document in the database. Digest authentication is used in this example; for more details, see <a href="#id_45214">Authentication and Connection Security</a>.</p>
      <pre xml:space="preserve"><a id="id_pgfId-1077193"></a>public static void run(String host, int port, String user, String
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;password, Authentication authType) {

// Create the database client
DatabaseClient client = DatabaseClientFactory.newClient(
&nbsp;&nbsp;&nbsp;&nbsp;host, port, new DigestAuthContext(username, password));

// Make a document manager to work with text files.
TextDocumentManager docMgr = client.newTextDocumentManager();

// Define a URI value for a document.
String docId = "/example/text.txt";

// Create a handle to hold string content.
StringHandle handle = new StringHandle();

// Give the handle some content
handle.set("A simple text document");

// Write the document to the database with URI from docId
// and content from handle
docMgr.write(docId, handle);

// release the client
client.release();
}</pre>
      <p><a id="id_pgfId-1072957"></a>The above code is a slightly modified version of the <code>run</code> method from the <code>com.marklogic.client.example.cookbook.ClientCreator</code> cookbook example. It, along with a number of other basic example applications for the Java API, is located in <code>example/com/marklogic/client/example/cookbook</code> directory found in the zip file containing the Java API.</p>
     </div>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_71012"></a>
      <h3><a href="#id_71012" class="sectionLink">Document Managers</a></h3>
      <p><a id="id_pgfId-1071290"></a>Different document formats are handled by different <em>document manager</em> objects, which serve as an interface between documents and the database connection. The package <code>com.marklogic.client.document</code> includes document managers for binary, XML, JSON, and text. If you don't know the document format, or need to work with documents of multiple formats, use a generic document manager. <code>DatabaseClient</code> instances have factory methods to create a new <code>com.marklogic.client.document.DocumentManager</code> of any subtype.</p>
      <pre xml:space="preserve"><a id="id_pgfId-1073861"></a>BinaryDocumentManager binDocMgr = client.newBinaryDocumentManager();
XMLDocumentManager XMLdocMgr = client.newXMLDocumentManager();
JSONDocumentManager JSONDocMgr = client.newJSONDocumentManager();
TextDocumentManager TextDocMgr = client.newTextDocumentManager();
GenericDocumentManager genericDocMgr = client.newGenericDocumentManager();</pre>
      <p><a id="id_pgfId-1071293"></a>Your application only needs to create one document manager for any given type of document, no matter how many of that type of document it works with. So, even if you expect to work with, say, 1,000,000,000 JSON documents, you only need to create one <code>JSONDocumentManager</code> object.</p>
      <p><a id="id_pgfId-1077452"></a>Document managers are thread safe once initially configured; no matter how many threads you have, you only need one document manager per document type.</p>
      <p><a id="id_pgfId-1075301"></a>If you make a mistake and try to use the wrong type of document with a document manager, the result depends on the combination of types. For example, a <code>BinaryDocumentManager</code> will try to interpret the document content as binary. <code>JSONDocumentManager</code> and <code>XMLDocumentManager</code> are the most particular, since if a document is not in their format, it will not parse. Most of the time, you will get an exception error, with <code>FailedRequestException</code> the default if the manager cannot determine the document type.</p>
     </div>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_84113"></a>
      <h3><a href="#id_84113" class="sectionLink">Streaming</a></h3>
      <p><a id="id_pgfId-1077798"></a>To stream, you supply an <code>InputStream</code> or <code>Reader</code> for the data source, not only when reading from the database but also when writing to the database. This approach allows for efficient write operations that do not buffer the data in memory. You can also use an <code>OutputWriter</code> to generate data as the API is writing the data to the database.</p>
      <p><a id="id_pgfId-1079309"></a>When reading from the database using a stream, be sure to close the stream explicitly if you do not read all of the data. Otherwise, the resources that support reading continue to exist.</p>
     </div>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_15219"></a>
      <h3><a href="#id_15219" class="sectionLink">Using Handles for Input and Output</a></h3>
      <p><a id="id_pgfId-1086457"></a>The Java Client API uses Handles to for I/O when interacting with MarkLogic. See the following topics for more details:</p>
      <ul>
       <li><a href="#id_38643">Handle Overview</a></li>
       <li><a href="#id_72244">Specifying Content Format</a></li>
       <li><a href="#id_20602">Handle Type Quick Reference</a></li>
       <li><a href="#id_66192">Handle Example</a></li>
      </ul>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_38643"></a>
       <h4><a href="#id_38643" class="sectionLink">Handle Overview</a></h4>
       <p><a id="id_pgfId-1086443"></a>Content handles are key to working with the Java Client API. Handles make use of the Adapter design pattern to enable strongly typed reading and writing of a diverse and extensible set of content formats. For example, you can create a <code>com.marklogic.client.io.DOMHandle</code> to read or write XML DOM data.</p>
       <pre xml:space="preserve"><a id="id_pgfId-1086542"></a>// reading
XMLDocumentManager docMgr = client.newXMLDocumentManager();
Document doc = docMgr.read(docURI, <strong>new DOMHandle()</strong>).get();

// writing
docMgr.write(docURI, <strong>new DOMHandle(someDocument)</strong>);</pre>
       <p><a id="id_pgfId-1079599"></a>The Java Client API pre-defines many handle implementations. The following packages contain handle classes:</p>
       <ul>
        <li><a id="id_pgfId-1079665"></a><code>com.marklogic.client.io </code>- Handles classes for standard representations such as <code>String</code>, <code>File</code>, and <code>DOM</code>.</li>
        <li><a id="id_pgfId-1079690"></a><code>com.marklogic.extra</code> - Handle classes for 3rd party formats such as DOM4J and GSON. Using these handle classes requires 3rd party libraries that are not included in the Java Client API distribution.</li>
       </ul>
       <p><a id="id_pgfId-1076439"></a>Some handles support both read and write operations. For example, you can use a <code>FileHandle</code> for reading and writing files. Some handles have a special purpose. For example, you use <code>SearchHandle</code> for processing the results of a search operation. For a complete list of handles and what they do, see the <code>com.marklogic.client.io</code> package in the <a href="/javadoc/client/index.html"><em>Java Client API Documentation</em></a>.</p>
       <p class="note"><a id="id_pgfId-1075411"></a>Handles are <em>not</em> thread safe. Whenever you create a new thread, you will have to also create new handle objects to use while in that thread.</p>
       <p><a id="id_pgfId-1086532"></a>Some Java Client API methods enable you to use I/O short cuts that do not require explicit creation of a handle. These shortcut methods always have an 'As' suffix, such as 'readAs'. For example, the <code>XMLDocumentManager.read</code> method shown above has an <code>XMLDocumentManager.readAs</code> counterpart that implicitly creates the handle for you. For example:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1086591"></a>// reading
Document doc = docMgr.readAs(docURI, Document.class);

// writing
docMgr.writeAs(docURI, someDocument);</pre>
       <p>These shortcut methods are not more efficient, but they can improve the readability of your code. For more details, see <a href="#id_40752">Shortcut Methods as an Alternative to Creating Handles</a>.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_72244"></a>
       <h4><a href="#id_72244" class="sectionLink">Specifying Content Format</a></h4>
       <p><a id="id_pgfId-1084656"></a>Some handles can be used with multiple document formats. For example, an <code>InputStream</code> can provide content in any format, so <code>InputStreamHandle</code> can be used for any document format. Where content format is not explicit in the handle type, use the handle's <code>setFormat</code> method to specify it. For example, the following call tells the Java Client API that the handle can be used with JSON content:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1078886"></a>new InputStreamHandle().setFormat(Format.JSON);</pre>
       <p><a id="id_pgfId-1084683"></a>You cannot set a format for all handle types. For example, a DOMHandle can only be used for reading and writing XML, so you cannot specify a format.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_20602"></a>
       <h4><a href="#id_20602" class="sectionLink">Handle Type Quick Reference</a></h4>
       <p><a id="id_pgfId-1084722"></a>Not all handles support all content types. In addition, though most handles can be used for either reading or writing, some are more limited. This section provides a quick guide to the content formats, operations, and data types supported by each handle class. Special purpose handle classes, such as <code>SearchHandle,</code> are not included.</p>
       <a id="id_pgfId-1078924"></a>
       <table class="api_generic_table">
        <tbody>
         <tr>
          <th rowspan="2" colspan="1" nowrap="none"><a id="id_pgfId-1086132"></a>Handle Class</th>
          <th colspan="4" rowspan="1" nowrap="none"><a id="id_pgfId-1086124"></a>Content Format</th>
          <th rowspan="2" colspan="1" nowrap="none"><a id="id_pgfId-1087815"></a>Supported Java Type</th>
         </tr>
         <tr>
          <th rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086134"></a>XML</th>
          <th rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086136"></a>Text</th>
          <th rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086138"></a>JSON</th>
          <th rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086140"></a>Binary</th>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086142"></a>BytesHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086144"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086146"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086148"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086150"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087819"></a><code>byte[]</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086152"></a>DocumentMetadataHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086154"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086156"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086158"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086160"></a></td>
          <td rowspan="1" colspan="1" nowrap="none">MarkLogic proprietary XML format; for details, see <a href="/guide/rest-dev/documents#id_73546">XML Metadata Format</a> in the <a href="/guide/rest-dev"><em>REST Application Developer's Guide</em></a>.</td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086162"></a>DOMHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086164"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086166"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086168"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086170"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087823"></a><code>org.w3c.dom.Document</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086182"></a>FileHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086184"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086186"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086188"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086190"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087827"></a><code>java.io.File</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086202"></a>InputSourceHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086204"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086206"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086208"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086210"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087831"></a><code>org.xml.sax.InputSource</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086212"></a>InputStreamHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086214"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086216"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086218"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086220"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087833"></a><code>java.io.InputStream</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086222"></a>JacksonHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086224"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086226"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086228"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086230"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087835"></a><code>com.fasterxml.jackson.databind.JsonNode</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086232"></a>JacksonDatabindHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086234"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086236"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086238"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086240"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087837"></a>your POJO class</td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086242"></a>JacksonParserHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086244"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086246"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086248"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086250"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087861"></a><code>com.fasterxml.jackson.core.JsonParser</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086252"></a>JAXBHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086254"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086256"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086258"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086260"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087841"></a>your POJO class</td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086272"></a>OutputStreamHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086274"></a>W</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086276"></a>W</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086278"></a>W</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086280"></a>W</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087845"></a><code>java.io.OutputStream</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086282"></a>ReaderHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086284"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086286"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086288"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086290"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087847"></a><code>java.io.Reader</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086292"></a>SourceHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086294"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086296"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086298"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086300"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087849"></a><code>javax.xml.transform.Source</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086302"></a>StringHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086304"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086306"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086308"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086310"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087851"></a><code>String</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086312"></a>XMLEventReaderHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086314"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086316"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086318"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086320"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087853"></a><code>javax.xml.stream.XMLEventReader</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><pre xml:space="preserve"><a id="id_pgfId-1086322"></a>XMLStreamReaderHandle</pre></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086324"></a>RW</td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086326"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086328"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1086330"></a></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087855"></a><code>javax.xml.stream.XMLStreamReader</code></td>
         </tr>
        </tbody>
       </table>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_66192"></a>
       <h4><a href="#id_66192" class="sectionLink">Handle Example</a></h4>
       <p><a id="id_pgfId-1075588"></a>The following code uses a <code>DOMHandle</code> to read an XML document from the server into an in-memory DOM object:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1074943"></a>XMLDocumentManager docMgr = client.newXMLDocumentManager();
DOMHandle handle = new DOMHandle();
docMgr.read(docURI, handle);
org.w3c.dom.Document document = handle.get();</pre>
       <p><a id="id_pgfId-1076691"></a>The following code uses a DOMHandle to write an XML document to MarkLogic. Assume <code>document</code> is some previously initialized in-memory XML DOM document.</p>
       <pre xml:space="preserve"><a id="id_pgfId-1076679"></a>XMLDocumentManager docMgr = client.newXMLDocumentManager();
DOMHandle handle = new DOMHandle();
handle.set(document);
docMgr.write(docId, handle);</pre>
       <p>For additional examples, see the examples in the following packages. The source is available on GitHub. For details, see <a href="#id_27902">Downloading the Library Source Code</a>.</p>
       <ul>
        <li><a id="id_pgfId-1086375"></a><code>com.marklogic.client.example.cookbook</code> </li>
        <li><a id="id_pgfId-1086385"></a><code>com.marklogic.client.example.handle</code> </li>
       </ul>
      </div>
     </div>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_40752"></a>
      <h3><a href="#id_40752" class="sectionLink">Shortcut Methods as an Alternative to Creating Handles</a></h3>
      <p><a id="id_pgfId-1087661"></a>Shortcut methods enable you to pass supported data types directly into or out of an operation without explicitly creating a handle to reference the data. These convenience methods can make your code more readable. </p>
      <p><a id="id_pgfId-1087662"></a>For more details, see the following topics:</p>
      <ul>
       <li><a href="#id_54890">Understanding Shortcut Methods</a></li>
       <li><a href="#id_35978">When to Choose Strongly Typed Over Shortcut</a></li>
       <li><a href="#id_15370">Extending Shortcuts by Registering Handle Factories</a></li>
      </ul>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_54890"></a>
       <h4><a href="#id_54890" class="sectionLink">Understanding Shortcut Methods</a></h4>
       <p><a id="id_pgfId-1087678"></a>Many Java Client API classes and interfaces include 'shortcut' methods of the form <em>operation</em><code>As</code>, such as <code>readAs</code> or <code>writeAs</code>. These methods enable you to bypass the equivalent, more strongly typed methods that require you to pass in a handle. Using shortcut methods instead of handles can make your code more readable.</p>
       <p><a id="id_pgfId-1087679"></a>For example, the <code>XMLDocumentManager</code> interface includes both <code>read</code> and <code>readAs</code> methods such as the following:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1087680"></a>// strongly typed, handle based
read(String docId, T contentHanlde)

// shortcut equivalent
readAs(String docId, Class&lt;T&gt; as)</pre>
       <p><a id="id_pgfId-1087681"></a>This means you can read a document from the database using a call of either of the following forms:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1087682"></a>// strongly typed, returns the populated DOMHandle object
DOMHandle handle = docMgr.read(docURI, new DOMHandle());

// shortcut, returns a DOM Document
Document doc = docMgr.read(docURI, Document.class);</pre>
       <p><a id="id_pgfId-1087683"></a>Similarly, you can use <code>XMLDocumentManager</code> to write a document to the database using either of the following calls:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1087684"></a>// strongly typed
docMgr.write(docURI, new DOMHandle(theDocument));

// shortcut
docMgr.writeAs(docURI, theDocument);</pre>
       <p><a id="id_pgfId-1087685"></a>Shortcut methods are not limited to document read and write operations. For example, you can use either <code>QueryManager.newRawCombinedQueryDefinition</code> or <code>QueryManager.newRawCombinedQueryDefinitionAs</code> to create a <code>RawCombinedQueryDefinition</code>.</p>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_35978"></a>
       <h4><a href="#id_35978" class="sectionLink">When to Choose Strongly Typed Over Shortcut</a></h4>
       <p><a id="id_pgfId-1087688"></a>Shortcut methods are the best choice in most cases because they improve the readability and maintainability of your code. However, you should keep the following points in mind:</p>
       <ul>
        <li><a id="id_pgfId-1087689"></a>A shortcut method is not more efficient than the equivalent strongly typed method. Internally, a <code>Handle</code> is still created to manage the data.</li>
        <li><a id="id_pgfId-1087690"></a>Using a shortcut method introduces a small risk because you're side-stepping the strong typing provided by a handle. For example, an exception is thrown if there is no handle type corresponding to class type you provide to the shortcut method.</li>
       </ul>
       <p>The typing exposure is limited since the Java Client API pre-defines Handle classes for a broad range of types. You can register your own class-to-handle pairings to extend the supported classes. For details, see <a href="#id_15370">Extending Shortcuts by Registering Handle Factories</a>.</p>
       <p><a id="id_pgfId-1087695"></a>Consider the strongly typed call form in the following cases:</p>
       <ul>
        <li><a id="id_pgfId-1087696"></a>You want compile-time checking of input and output types.</li>
        <li><a id="id_pgfId-1087697"></a>You want a slight increase in efficiency over a large number of requests.</li>
        <li><a id="id_pgfId-1087698"></a>You need to control the MIME type or format of a handle.</li>
       </ul>
      </div>
      <div class="section" data-fm-style="Heading-3">
       <a id="id_15370"></a>
       <h4><a href="#id_15370" class="sectionLink">Extending Shortcuts by Registering Handle Factories</a></h4>
       <p><a id="id_pgfId-1087701"></a>Though you do not have to create a handle when using a shortcut method, the shortcut implementation still creates a <code>Handle</code> to manage the data. </p>
       <p><a id="id_pgfId-1087702"></a>For example, when you issue a shortcut call such as the following, the implementation creates a <code>DOMHandle</code> to receive the document read from the database. </p>
       <pre xml:space="preserve"><a id="id_pgfId-1087703"></a>docMgr.read(docURI, Document.class);</pre>
       <p><a id="id_pgfId-1087704"></a>This means that a shortcut method must be able to create a handle capable of handling the targeted class type. This capability is provided by a registry for handle factories. The shortcut method can query the registry for a handle factory that can process a particular class type. For details, see <code>DatabaseClientFactory.HandleFactoryRegistry</code> in the <a href="/javadoc/client/index.html"><em>Java Client API Documentation</em></a>.</p>
       <p><a id="id_pgfId-1087708"></a>The Java Client API automatically registers factories for the following handle classes. For details on the data types supported by each handle type, see the handle class documentation in the <a href="/javadoc/client/index.html"><em>Java Client API Documentation</em></a>.</p>
       <a id="id_pgfId-1087737"></a>
       <table class="api_generic_table">
        <tbody>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087714"></a><code>BytesHandle</code></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087716"></a><code>InputStreamHandle</code></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087718"></a><code>SourceHandle</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087720"></a><code>DOMHandle</code></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087722"></a><code>JacksonHandle</code></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087724"></a><code>StringHandle</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087726"></a><code>FileHandle</code></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087728"></a><code>JacksonParserHandle</code></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087730"></a><code>XMLEventReaderHandle</code></td>
         </tr>
         <tr>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087732"></a><code>InputSourceHandle</code></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087734"></a><code>ReaderHandle</code></td>
          <td rowspan="1" colspan="1" nowrap="none"><a id="id_pgfId-1087736"></a><code>XMLStreamReaderHandle</code></td>
         </tr>
        </tbody>
       </table>
       <p><a id="id_pgfId-1087738"></a>If you create your own handle class, you can register a handle factory for it so that you can use shortcut methods on the classes supported by your handle class.</p>
       <p class="note"><a id="id_pgfId-1087739"></a>Handle factory registration must be completed before you create a <code>DatabaseClient</code>.</p>
       <p><a id="id_pgfId-1087740"></a>You can use the same mechansim with a <code>JAXBHandle</code> factory to enable shortcut methods on POJOs. For example, if you have a POJO class named <code>Product</code>, then you can add it to the registry as follows:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1087741"></a>DatabaseClientFactory.getHandleRegistry().register(
&nbsp;&nbsp;&nbsp;&nbsp;JAXBHandle.newFactory(Product.class);</pre>
       <p><a id="id_pgfId-1087742"></a>Then you can subsequently write <code>Product</code> POJOs to MarkLogic and read them back as follows:</p>
       <pre xml:space="preserve"><a id="id_pgfId-1087743"></a>XMLDocumentManager docMgr = client.newXMLDocumentManager();
Product product = // ...create a Product

docMgr.writeAs(docURI, product);
// ...
product = docMgr.readAs(docURI, Product.class);</pre>
       <p>Note that the Java Client API also includes a POJO data binding capability as an alternative to managing your own POJOs with JAXB. Using this feature eliminates the need for the above registration. For more details, see <a href="/guide/java/binding#">POJO Data Binding Interface</a>.</p>
      </div>
     </div>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_26854"></a>
      <h3><a href="#id_26854" class="sectionLink">Thread Safety of the Java API</a></h3>
      <p><a id="id_pgfId-1080643"></a>You should be aware of the following API characteristics with respect to thread safety:</p>
      <ul>
       <li><a id="id_pgfId-1080650"></a><code>DatabaseClient</code> is thread safe after initialization.</li>
       <li><a id="id_pgfId-1080664"></a>The various manager classes are thread safe after initial configuration. Examples: <code>DocumentManager</code>, <code>QueryManager</code>, <code>ResourceManager</code>.</li>
       <li><a id="id_pgfId-1080686"></a>Handles are not thread safe. Examples: <code>StringHandle</code>, <code>FileHandle</code>, <code>SearchHandle.</code></li>
       <li><a id="id_pgfId-1080766"></a>Builders are not thread safe. Examples: <code>DocumentPatchBuilder</code>, <code>StructuredQueryBuilder</code>.</li>
      </ul>
      <p><a id="id_pgfId-1080731"></a>For example, you can create a <code>DocumentManager</code> for manipulating XML documents and share it across multiple threads. Similarly, you can create a <code>QueryManager</code>, set the page length, and then share it between multiple threads.</p>
      <p><a id="id_pgfId-1080802"></a>Handles can be used across multiple requests within the same thread, but cannot be used across threads, so whenever you create a new thread, you must create new Handle objects to use in that thread.</p>
     </div>
     <div class="section" data-fm-style="Heading-2">
      <a id="id_27902"></a>
      <h3><a href="#id_27902" class="sectionLink">Downloading the Library Source Code</a></h3>
      <p><a id="id_pgfId-1081034"></a>The Java API is an open source project. Though you do not need the source code to use the library, the source is available from GitHub at the following URL:</p>
      <pre xml:space="preserve"><a id="id_pgfId-1081036"></a><a href="https://github.com/marklogic/java-client-api">https://github.com/marklogic/java-client-api</a></pre>
      <p><a id="id_pgfId-1081037"></a>Assuming you have a Git client and the <code>git</code> command is on your path, you can download a local copy of the latest source using the following command:</p>
      <pre xml:space="preserve"><a id="id_pgfId-1081038"></a>git clone https://github.com/marklogic/java-client-api.git</pre>
      <p><a id="id_pgfId-1081022"></a></p>
     </div>
    </div>
   </div>
   <div class="previousChapter pjax_enabled">
    <a href="/guide/java" accesskey="p">«&nbsp;Table&nbsp;of&nbsp;contents</a>
   </div>
   <div class="nextChapter pjax_enabled">
    <a href="/guide/java/document-operations" accesskey="n">Next&nbsp;chapter&nbsp;»</a>
   </div> 
   <div id="copyright">
     Copyright © 2017 MarkLogic Corporation. MARKLOGIC is a registered trademark of MarkLogic Corporation. 
   </div>
   <div id="terms">
     Powered by 
    <a href="//developer.marklogic.com/products">MarkLogic Server <span class="server-version">7.0-4.1</span></a> and 
    <a href="//developer.marklogic.com/code/rundmc">rundmc</a> | 
    <a href="http://www.marklogic.com/terms-of-use/">Terms of Use</a> | 
    <a href="http://www.marklogic.com/privacy-policy/">Privacy Policy</a>
   </div> 
  </section> 
  <!-- ml:elapsed-time/ -->  
 </body>
</html>