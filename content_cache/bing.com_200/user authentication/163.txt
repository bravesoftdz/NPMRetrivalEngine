<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <!-- http://t.co/dKP3o1e --> 
  <meta name="HandheldFriendly" content="True"> 
  <meta name="MobileOptimized" content="320"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <link href="http://feeds.haacked.com/haacked" rel="alternate" title="You've Been Haacked" type="application/atom+xml"> 
  <!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]--> 
  <!--Fonts from Google"s Web font directory at http://google.com/webfonts --> 
  <link href="http://fonts.googleapis.com/css?family=Open+Sans:300,400,400italic,600,700,800" rel="stylesheet" type="text/css"> 
  <link href="/favicon.ico" rel="shortcut icon"> 
  <link href="/css/screen.css" media="screen, projection" rel="stylesheet" type="text/css"> 
  <link rel="stylesheet" href="/css/code.css" type="text/css"> 
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script> 
  <script src="/js/slash.js" async></script> 
  <!-- Begin Jekyll SEO tag v2.3.0 --> 
  <title>Prevent Forms Authentication Login Page Redirect When You Don’t Want It | You’ve Been Haacked</title> 
  <meta property="og:title" content="Prevent Forms Authentication Login Page Redirect When You Don’t Want It"> 
  <meta name="author" content="Phil Haack"> 
  <meta property="og:locale" content="en_US"> 
  <meta name="description" content="Go that way instead - Photo by JacobEnos CC some rights reserved"> 
  <meta property="og:description" content="Go that way instead - Photo by JacobEnos CC some rights reserved"> 
  <link rel="canonical" href="http://haacked.com/archive/2011/10/04/prevent-forms-authentication-login-page-redirect-when-you-donrsquot-want.aspx/"> 
  <meta property="og:url" content="http://haacked.com/archive/2011/10/04/prevent-forms-authentication-login-page-redirect-when-you-donrsquot-want.aspx/"> 
  <meta property="og:site_name" content="You’ve Been Haacked"> 
  <meta property="og:type" content="article"> 
  <meta property="article:published_time" content="2011-10-04T00:00:00+00:00"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:site" content="@haacked"> 
  <meta name="twitter:creator" content="@Phil Haack"> 
  <script type="application/ld+json">
{"name":null,"description":"Go that way instead - Photo by JacobEnos CC some rights reserved","author":{"@type":"Person","name":"Phil Haack"},"@type":"BlogPosting","url":"http://haacked.com/archive/2011/10/04/prevent-forms-authentication-login-page-redirect-when-you-donrsquot-want.aspx/","image":null,"publisher":null,"headline":"Prevent Forms Authentication Login Page Redirect When You Don’t Want It","dateModified":"2011-10-04T00:00:00+00:00","datePublished":"2011-10-04T00:00:00+00:00","sameAs":null,"mainEntityOfPage":{"@type":"WebPage","@id":"http://haacked.com/archive/2011/10/04/prevent-forms-authentication-login-page-redirect-when-you-donrsquot-want.aspx/"},"@context":"http://schema.org"}</script> 
  <!-- End Jekyll SEO tag --> 
  <script type="text/javascript">
		var _gaq = _gaq || [];
		_gaq.push(['_setAccount', 'UA-177588-1']);
		_gaq.push(['_trackPageview']);

		(function() {
			var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
		})();
	</script> 
 </head> 
 <body> 
  <div class="container"> 
   <div class="left-col"> 
    <div class="intrude-less"> 
     <header id="header" class="inner">
      <div class="profilepic"> 
       <img src="https://2.gravatar.com/avatar/cdf546b601bf29a7eb4ca777544d11cd?s=160" alt="Profile Picture" style="width: 160px;"> 
      </div> 
      <hgroup> 
       <h1><a href="/">You've Been Haacked</a></h1> 
       <h2>...and you like it</h2> 
      </hgroup> 
      <nav id="main-nav">
       <ul class="main-navigation"> 
        <li><a href="/about/">about</a></li> 
        <li><a href="/archive">archives</a></li> 
        <li><a href="https://github.com/Haacked/feedback/issues/new">contact</a></li> 
        <li><a href="/contributors">contributors</a></li> 
       </ul> 
       <section class="aboutme"> 
        <p> You've been Haacked and you like it </p> 
       </section> 
      </nav> 
      <nav id="sub-nav"> 
       <div class="social"> 
        <a class="twitter" href="http://twitter.com/haacked" title="Twitter">Twitter</a> 
        <a class="github" href="https://github.com/haacked" title="GitHub">GitHub</a> 
        <a class="rss" href="http://feeds.haacked.com/haacked" title="RSS">RSS</a> 
       </div> 
      </nav> 
     </header> 
    </div> 
   </div> 
   <div class="mid-col"> 
    <div class="mid-col-container"> 
     <div id="content" class="inner">
      <article class="post" itemscope itemtype="http://schema.org/BlogPosting"> 
       <h1 class="title" itemprop="name">Prevent Forms Authentication Login Page Redirect When You Don’t Want It</h1> 
       <div class="meta"> 
        <span class="date"> <time datetime="2011-10-04T00:00:00+00:00" itemprop="datePublished">October 4, 2011</time></span> 
        <span class="tags">asp.net, asp.net mvc, code</span> 
        <span class="comments"><a href="#disqus_thread" data-disqus-identifier="18816">comments</a></span> 
        <span class="edit"> <a href="https://github.com/Haacked/haacked.com/edit/gh-pages/_posts/archived/2011-10-04-prevent-forms-authentication-login-page-redirect-when-you-donrsquot-want.aspx.markdown">edit</a> </span> 
       </div> 
       <div class="entry-content" itemprop="articleBody">
        <p><a href="http://www.flickr.com/photos/notjake13/2574028447/" title="Construction signs in NY"><img src="http://haacked.com/images/haacked_com/WindowsLiveWriter/Prevent-Forms-Authentication-Login-Page-_C968/redirect_3.jpg" alt="redirect" title="redirect"></a> <em>Go that way instead - Photo by JacobEnos <a href="http://creativecommons.org/licenses/by/2.0/deed.en" title="Creative Commons by Attribution">CC some rights reserved</a></em></p> 
        <p><strong><em>Update: It looks like ASP.NET 4.5 adds the ability to suppress forms authentication redirect now with the <a href="http://msdn.microsoft.com/en-us/library/system.web.httpresponse.suppressformsauthenticationredirect.aspx" title="Suppress Forms Auth Property">HttpResponse.SuppressFormsAuthenticationRedirect property</a>.</em></strong></p> 
        <p>In an ASP.NET web application, it’s very common to write some jQuery code that makes an HTTP request to some URL (a lightweight service) in order to retrieve some data. That URL might be handled by an ASP.NET MVC controller action, a Web API operation, or even an ASP.NET Web Page or Web Form. If it can return curly brackets, it can be respond to a JavaScript request for JSON.</p> 
        <p>One pain point when hosting lightweight HTTP services on ASP.NET is making a request to a URL that requires authentication. Let’s look at a snippet of jQuery to illustrate what I mean. The following code makes a request to <em>/admin/secret/data</em>. Let’s assume that URL points to an ASP.NET MVC action with the <code class="highlighter-rouge">AuthorizeAttribute</code> applied, which requires that the request must be authenticated.</p> 
        <div class="language-csharp highlighter-rouge">
         <pre class="highlight"><code><span class="err">$</span><span class="p">.</span><span class="nf">ajax</span><span class="p">({</span>
    <span class="n">url</span><span class="p">:</span> <span class="err">'</span><span class="p">/</span><span class="n">admin</span><span class="p">/</span><span class="n">secret</span><span class="p">/</span><span class="n">data</span><span class="err">'</span><span class="p">,</span>
    <span class="n">type</span><span class="p">:</span> <span class="err">'</span><span class="n">POST</span><span class="err">'</span><span class="p">,</span>
    <span class="n">contentType</span><span class="p">:</span> <span class="err">'</span><span class="n">application</span><span class="p">/</span><span class="n">json</span><span class="p">;</span> <span class="n">charset</span><span class="p">=</span><span class="n">utf</span><span class="p">-</span><span class="m">8</span><span class="err">'</span><span class="p">,</span>
    <span class="n">statusCode</span><span class="p">:</span> <span class="p">{</span>
        <span class="m">200</span><span class="p">:</span> <span class="nf">function</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">alert</span><span class="p">(</span><span class="err">'</span><span class="m">200</span><span class="p">:</span> <span class="n">Authenticated</span><span class="err">'</span><span class="p">);</span>
            <span class="c1">// Bind the JSON data to the UI </span>        <span class="p">},</span>
        <span class="m">401</span><span class="p">:</span> <span class="nf">function</span> <span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">alert</span><span class="p">(</span><span class="err">'</span><span class="m">401</span><span class="p">:</span> <span class="n">Unauthenticated</span><span class="err">'</span><span class="p">);</span>
            <span class="c1">// Handle the 401 error here. </span>        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre> 
        </div> 
        <p>If the user is not logged in when this code executes, you would expect that the 401 status code function would get called. But if forms authentication (often called FormsAuth for short) is configured, that isn’t what actually happens. Instead, you get a 200&nbsp; with the contents of the login page (or a 404 if you don’t have a login page). What gives?</p> 
        <p>If you crack open <a href="http://www.fiddler2.com/fiddler2/" title="Fiddler">Fiddler</a>, it’s easy to see the problem. Instead of the request returning an HTTP 401 Unauthorized status code, it instead returns a 302 pointing to a login page. This causes jQuery (well actually, the XmlHttpRequest object) to automatically follow the redirect and issue another request to the login page. The login page handles this new request and return its contents with a 200 status code. This is not the desired result as the code expects JSON data to be returned in response to a 200 code, not HTML for the login page.</p> 
        <p>This “helpful” behavior when requesting a URL that requires authentication is a consequence of having the <code class="highlighter-rouge">FormsAuthenticationModule</code> enabled, which is the default in most ASP.NET applications. Under the hood, the <code class="highlighter-rouge">FormsAuthenticationModule</code> hooks into the request pipeline and changes any request that returns a 401 status code into a redirect to the login page.</p> 
        <h2 id="possible-solutions">Possible Solutions</h2> 
        <p>I’m going to cover a few possible solutions I’ve seen around the web and then present the one that I prefer. It’s not that these other solutions are wrong, but they are only correct in some cases.</p> 
        <h3 id="remove-forms-authentication">Remove Forms Authentication</h3> 
        <p>If you don’t need FormsAuth, one simple solution is to remove the forms authentication module as <a href="http://blog.alexonasp.net/post/2011/08/23/Basic-Authentication-with-WCF-Web-API-hosted-in-IIS-Getting-a-404-Disable-Forms-Authentication-Redirection.aspx" title="Basic Authentication with WCF Web API hosted in IIS / Getting a 404 - Disable Forms Authentication Redirection\">this post suggests</a>. This is a great solution if you’re sole purpose is to use ASP.NET to host a Web API service and you don’t need forms authentication. But it’s not a great solution if your app is both a web application and a web service.</p> 
        <h3 id="register-an-httpmodule-to-convert-redirects-to-401">Register an HttpModule to convert Redirects to 401</h3> 
        <p><a href="http://amilagm.com/2010/11/prevent-forms-auth-from-redirecting-to-login-page-in-restful-wcf/" title="Prevent forms auth from redirecting to login page in RESTFul WCF">This blog post</a> suggests registering an HTTP Module that converts <em>any</em> 302 request to a</p> 
        <ol> 
         <li>There are two problems with this approach. The first is that it breaks the case where the redirect is <em>legitimate</em> and not the result of FormsAuth. The second is that it requires manual configuration of an <code class="highlighter-rouge">HttpModule</code>.</li> 
        </ol> 
        <h3 id="install-package-membershipservicemvc">Install-Package MembershipService.Mvc</h3> 
        <p>My colleague, <a href="http://blog.stevensanderson.com/" title="Steve Sanderson's Blog">Steve Sanderson</a>, has an even better approach with his <code class="highlighter-rouge">MembershipService.Mvc</code> and <code class="highlighter-rouge">MembershipService.WebForms </code>NuGet packages. These packages expose ASP.NET Membership as a service that you can call from multiple devices.</p> 
        <p>For example, if you want your Windows Phone application to use an ASP.NET website’s membership system to authenticate users of the application, you’d use his package. He provides the <code class="highlighter-rouge">MembershipClient.WP7</code> and <code class="highlighter-rouge">MembershipClient.JavaScript</code> packages for writing clients that call into these services.</p> 
        <p>These packages deserve a blog post in their own right, but I’m going to just focus on the <code class="highlighter-rouge">DoNotRedirectLoginModule</code> he wrote. His module takes a similar approach to the previous one I mentioned, but he checks for a special value in <a href="http://msdn.microsoft.com/en-us/library/system.web.httpcontext.items.aspx" title="HttpContext.Items on MSDN"><code class="highlighter-rouge">HttpContext.Items</code></a>, a dictionary for storing data related to the current request, before reverting a redirect back to a 401.</p> 
        <p>To prevent a FormsAuth redirect, an action method (or ASP.NET page or Web API operation) would simply call the helpful method <code class="highlighter-rouge">DoNotRedirectToLoginModule.ApplyForRequest</code>. This sets the special token in <code class="highlighter-rouge">HttpContext.Items</code> and the module will rewrite a 302 that’s redirecting to the login page back to a 401.</p> 
        <h2 id="my-solution">My Solution</h2> 
        <p>Steve’s solution is a very good one. But I’m particularly lazy and didn’t want to have to call that method on every action when I’m writing an Ajax heavy application. So what I did was write a module that hooks in two events of the request.</p> 
        <p>The first event, <code class="highlighter-rouge">PostReleaseRequestState</code>, occurs after authentication, but before the <code class="highlighter-rouge">FormsAuthenticationModule</code> converts the status to a 302. In the event handler for this event, I check to see if the request is an Ajax request by checking that the <code class="highlighter-rouge">X-Requested-With</code> request header is “<code class="highlighter-rouge">XMLHttpRequest</code>”.</p> 
        <p>If so, I store away a token in the <code class="highlighter-rouge">HttpContext.Items</code> like Steve does. Then in the <code class="highlighter-rouge">EndRequest</code> event handler, I check for that token, just like Steve does. Inspired by Steve’s approach, I added a method to allow explicitly opting into this behavior, <code class="highlighter-rouge">SuppressAuthenticationRedirect</code>.</p> 
        <p>Here’s the code for this module. <strong>Warning: Consider this “proof-of-concept” code. I haven’t tested this thoroughly in a wide range of environments.</strong></p> 
        <div class="language-csharp highlighter-rouge">
         <pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">SuppressFormsAuthenticationRedirectModule</span> <span class="p">:</span> <span class="n">IHttpModule</span> <span class="p">{</span>
  <span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="kt">object</span> <span class="n">SuppressAuthenticationKey</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Object</span><span class="p">();</span>

  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SuppressAuthenticationRedirect</span><span class="p">(</span><span class="n">HttpContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">context</span><span class="p">.</span><span class="n">Items</span><span class="p">[</span><span class="n">SuppressAuthenticationKey</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SuppressAuthenticationRedirect</span><span class="p">(</span><span class="n">HttpContextBase</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">context</span><span class="p">.</span><span class="n">Items</span><span class="p">[</span><span class="n">SuppressAuthenticationKey</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">Init</span><span class="p">(</span><span class="n">HttpApplication</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">context</span><span class="p">.</span><span class="n">PostReleaseRequestState</span> <span class="p">+=</span> <span class="n">OnPostReleaseRequestState</span><span class="p">;</span>
    <span class="n">context</span><span class="p">.</span><span class="n">EndRequest</span> <span class="p">+=</span> <span class="n">OnEndRequest</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="k">void</span> <span class="nf">OnPostReleaseRequestState</span><span class="p">(</span><span class="kt">object</span> <span class="n">source</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="p">(</span><span class="n">HttpApplication</span><span class="p">)</span><span class="n">source</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Request</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">StatusCode</span> <span class="p">==</span> <span class="m">401</span> <span class="p">&amp;&amp;</span> <span class="n">request</span><span class="p">.</span><span class="n">Headers</span><span class="p">[</span><span class="s">"X-Requested-With"</span><span class="p">]</span> <span class="p">==</span> 
      <span class="s">"XMLHttpRequest"</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">SuppressAuthenticationRedirect</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">Context</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">private</span> <span class="k">void</span> <span class="nf">OnEndRequest</span><span class="p">(</span><span class="kt">object</span> <span class="n">source</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">var</span> <span class="n">context</span> <span class="p">=</span> <span class="p">(</span><span class="n">HttpApplication</span><span class="p">)</span><span class="n">source</span><span class="p">;</span>
    <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">context</span><span class="p">.</span><span class="n">Response</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">Context</span><span class="p">.</span><span class="n">Items</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">SuppressAuthenticationKey</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">response</span><span class="p">.</span><span class="n">TrySkipIisCustomErrors</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
      <span class="n">response</span><span class="p">.</span><span class="nf">ClearContent</span><span class="p">();</span>
      <span class="n">response</span><span class="p">.</span><span class="n">StatusCode</span> <span class="p">=</span> <span class="m">401</span><span class="p">;</span>
      <span class="n">response</span><span class="p">.</span><span class="n">RedirectLocation</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">Dispose</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Register</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">DynamicModuleUtility</span><span class="p">.</span><span class="nf">RegisterModule</span><span class="p">(</span>
      <span class="k">typeof</span><span class="p">(</span><span class="n">SuppressFormsAuthenticationRedirectModule</span><span class="p">));</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre> 
        </div> 
        <h2 id="theres-a-package-for-that">There’s a package for that</h2> 
        <p><strong><em>Warning: The following is proof-of-concept code I’ve written. I haven’t tested it thoroughly in a production environment and I don’t provide any warranties or promises that it works and won’t kill your favorite pet. You’ve been warmed.</em></strong></p> 
        <p>Naturally, I’ve written a <a href="http://nuget.org/" title="NuGet">NuGet</a> package for this. Simply install the package and all Ajax requests that set that header (if you’re using jQuery, you’re all set) will not be redirected in the case of a 401.</p> 
        <p><code class="highlighter-rouge">Install-Package AspNetHaack</code></p> 
        <p>Note that the package adds a source code file in App_Start that wires up the http module that suppresses redirect. If you want to turn off this behavior temporarily, you can comment out that file and you’ll be back to the old behavior.</p> 
        <p>The source code for this is in <a href="http://github.com/" title="Github">Github</a> as part of my broader <a href="https://github.com/Haacked/CodeHaacks" title="CodeHaacks on Github">CodeHaacks project</a>.</p> 
        <h2 id="why-dont-you-just-fix-the-formsauthenticationmodule">Why don’t you just fix the FormsAuthenticationModule?</h2> 
        <p>We realize this is a deficiency with the forms authentication module and we’re looking into hopefully fixing this for the next version of the Framework.</p> 
        <p>Update: As I stated at the beginning, a new property added in ASP.NET 4.5 supports doing this.</p> 
        <p>Tags: <a href="http://haacked.com/tags/asp.net/default.aspx">asp.net</a>, <a href="http://haacked.com/tags/aspnetmvc/default.aspx">aspnetmvc</a>, <a href="http://haacked.com/tags/formsauth/default.aspx">formsauth</a>, <a href="http://haacked.com/tags/membership/default.aspx">membership</a></p> 
       </div> 
      </article> 
      <div data-type="ad" data-publisher="lqm.youvebeenhacked.site" data-zone="ron" data-format="728x90"></div> 
      <div class="share"> 
       <div class="addthis_toolbox addthis_default_style "> 
        <a class="addthis_button_tweet"></a> 
        <a class="addthis_counter addthis_pill_style"></a> 
       </div> 
       <script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid="></script> 
      </div> 
      <div id="page-navigation"> 
       <div class="previous"> 
        <a href="/archive/2011/09/22/writing-a-recipe-for-asp-net-mvc-4-developer-preview.aspx/" title="Previous Post: 
Writing a Recipe for ASP.NET MVC 4 Developer Preview">« Writing a Recipe for ASP.NET MVC 4 Developer Preview</a> 
       </div> 
       <div class="next"> 
        <a href="/archive/2011/10/10/preventing-csrf-with-ajax.aspx/" title="next Post: 
Preventing CSRF With Ajax">Preventing CSRF With Ajax » </a> 
       </div> 
      </div> 
      <section id="comment"> 
       <h1 class="title">Comments</h1> 
       <div id="disqus_thread" aria-live="polite">
        <noscript>
         Please enable JavaScript to view the 
         <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
        </noscript> 
       </div> 
      </section> 
     </div> 
    </div> 
    <footer id="footer" class="inner">
     <p> Copyright © 2017 - Phil Haack Blog content licensed under the Creative Commons <a href="http://creativecommons.org/licenses/by/2.5/">CC BY 2.5</a> | Unless otherwise stated or granted, code samples licensed under the <a href="http://sm.mit-license.org/">MIT license</a>. | Site design based on the <a href="https://github.com/shashankmehta/greyshade">Greyshade theme</a> under the <a href="http://sm.mit-license.org/">MIT license</a> | <a href="/privacy">privacy</a> | <a href="/articles/blogtegrity">blogtegrity</a> </p> 
     <script type="text/javascript">
      var disqus_shortname = 'haacked';
      
        
        // var disqus_developer = 1;
        var disqus_identifier = '18816';
        var disqus_url = 'http://haacked.com/archive/2011/10/04/prevent-forms-authentication-login-page-redirect-when-you-donrsquot-want.aspx/';
        var disqus_script = 'embed.js';
      
    (function () {
          
      var embedScript = document.createElement('script');
      embedScript.type = 'text/javascript';
      embedScript.async = true;
      embedScript.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(embedScript);
    
      var countScript = document.createElement('script');
      countScript.type = 'text/javascript';
      countScript.async = true;
      countScript.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(countScript);
    }());
</script> 
     <script type="text/javascript">
    (function(){
      var twitterWidgets = document.createElement('script');
      twitterWidgets.type = 'text/javascript';
      twitterWidgets.async = true;
      twitterWidgets.src = '//platform.twitter.com/widgets.js';
      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);
    })();
  </script> 
    </footer> 
   </div> 
  </div> 
  <!--  CodeProject AD  --> 
  <script>
    function _dmBootstrap(file) {
        var _dma = document.createElement('script'); 
        _dma.type = 'text/javascript';
        _dma.async = true; 
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined')  _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js');}
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000);})();
</script>   
 </body>
</html>