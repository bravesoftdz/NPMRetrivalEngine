<html>
 <head> 
  <meta HTTP-EQUIV="Content-Type" CONTENT="text/html"> 
  <meta NAME="keywords" CONTENT="LaTeX, Presentation, Slide, PDF, movie, mpeg"> 
  <title>Generating PDF with animations using LaTeX</title> 
  <link rel="stylesheet" href="./styles/formats.css"> 
  <link rel="stylesheet" href="./styles/pinmenu-computer.css"> 
  <link rel="stylesheet" href="./styles/visual-computer.css"> 
  <style type="text/css">
    <!--
      .font-latex-sectioning-2 {
        /* font-latex-sectioning-2-face */
        color: #00008b;
        background-color: #ffffff;
      }
      .font-latex-sedate {
        /* font-latex-sedate-face */
        color: #696969;
        font-weight: bold;
      }
      .font-latex-warning {
        /* font-latex-warning-face */
        color: #ff0000;
      }
      .function-name {
        /* font-lock-function-name-face */
        color: #000000;
        font-weight: bold;
      }
      .highlight {
        /* highlight */
        background-color: #b4eeb4;
        font-weight: bold;
      }
      .keyword {
        /* font-lock-keyword-face */
        color: #000000;
        font-weight: bold;
      }
      .variable-name {
        /* font-lock-variable-name-face */
        color: #8b008b;
        font-weight: bold;
      }
    -->
    </style> 
  <script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script> 
 </head> 
 <body> 
  <div class="pinmenu"> 
   <div class="googlePlusContainer">
    <g:plusone count="true"></g:plusone>
   </div> 
   <p> <a href="http://www.uoregon.edu/~noeckel/index.html"> Jens Nöckel's Homepage</a> </p> 
   <p> <a href="computernotes.html"> Computer notes home</a> </p> 
  </div> 
  <div class="page"> 
   <h1>PDF with animations</h1> 
   <a name="start"></a>
   <h2>Including animations in PDF using LaTeX</h2> 
   <p> The Portable Document Format (PDF) is much more than just a substitute for paper. While printable documents are thought of as static, PDF can be dynamic and interactive, see for example <a target="_blank" href="http://www.tug.org/texshowcase/#dynamics">these interactivity demos</a>. In fact, since Adobe has acquired Macromedia, some convergence of PDF and Flash might be expected in the future. But if you go through my example on this page, it will be clear that PDF all by itself at this point in time has (almost) all the features a multimedia author could ask for. </p> 
   <p> The <strong>context</strong> of this page is the problem of how to prepare scientific/technical documents. If you have looked at my suggestions for doing scientific presentations using <a href="Keynote.html">Apple's <strong>Keynote</strong></a>, you should be convinced by now that LaTeX is an essential ingredient for any computer-based talk with mathematical content. </p> 
   <p> In particular, <a href="Keynote.html#bottom">I included some links to LaTeX-based PDF presentation tools</a> that can do almost anything that Keynote can do, based on the power of <a target="_blank" href="http://www.adobe.com/products/acrobat/readermain.html">Adobe Reader</a>. </p> 
   <p> Traditional movies are essentially sequences of resolution-dependent (rasterized) images, with additional information on how fast to play the frames. But PDF is a format that can display both vector and raster graphics, where the big advantage of vector graphics is its resolution-independence. Therefore, movie formats with vector-graphics frames would be a natural choice for embedding into PDF. The most important such format is Flash <code>SWF</code> format. Based on the type of movie, we can then distinguish three distinct solutions: </p> 
   <ol> 
    <li>Traditional bitmap movie formats (<code>Mpeg</code> etc.) </li>
    <li>Vector animations (<code>SWF</code>) </li>
    <li>PDF-only animations (using scripting) </li>
   </ol> 
   <p> For all of these cases, LaTeX provides solutions. The first two are addressed by the <code>movie15</code> package and its successor, <code>media9</code>. The last solution can be achievd by the <a href="http://www.ctan.org/tex-archive/macros/latex/contrib/animate/">animate</a> package. We'll not discuss the latter on this page. </p>
   <h3>Prerequisites</h3> 
   <p> PDF movies can be displayed with Adobe Reader. In case you encounter problems, <em>first</em> make sure you have the <strong>most recent version</strong> of Adobe Reader. The Preview Application (on Mac) is not an alternative here because it does not handle multimedia plugins and JavaScript. </p> 
   <p> For <em>Linux users</em> running the latest version of Adobe Reader, the embedded movie will open in a separate window after you click on the "paper clip" attachment icon and agree to open the file. </p> 
   <p> Also note that you <em>cannot</em> use Linux <code>acroread</code> to display multimedia embedded with the help of this package. In KDE 4, you may be able to use <code>Okular</code> to view PDFs with embedded movies (unfortunately I can't currently test these features on Linux or Windows, only on Mac). </p> 
   <p> One more warning: we are using advanced features of PDF here, so you also need a recent version (&gt;1.2) of <code>pdflatex</code>. The <code>TeX-Live 2007</code> (and later) distribution contains <code>movie15</code>, whereas the <code>tetex</code> distribution doesn't. That's why you should no longer be using <code>texlive</code>. </p> 
   <strong>To create MPEG or other formats</strong>, here are some tools (for Mac OS X):
   <p></p> 
   <ul> 
    <li><a target="_blank" href="http://www.lemkesoft.com">GraphicConverter</a> can convert a sequence of images into a movie using <code>File &gt; Export Slide Show to Movie</code> </li> 
    <li><a href="http://www.mirovideoconverter.com/">Miro Video Converter</a> has many of the most common export file settings pre-defined. I found its <code>Apple Universal</code> <code>mp4</code> output format works well when embedded in <code>PDF</code> (also works with <code>media9</code> below). </li> 
    <li><a target="_blank" href="http://www.macupdate.com/info.php/id/17527/livid-beu">Livid Batch Export Utility</a> lets you convert movies from one format to another, while also changing the compression and size settings. </li> 
    <li> <a target="_blank" href="http://www.mikeash.com/?page=software/qtamateur/index.html">QT amateur</a> is a free movie player for Mac OS X which can export various movie and image file formats (even in batch mode). It requires Quicktime 7 to be installed on your machine. </li> 
    <li> Apple's <a target="_blank" href="http://www.apple.com/quicktime/">Quicktime X</a> application lets you comvert to different formats under the <code>Share</code> and <code>FIle &gt; Export...</code></li> menu items. In particular, exporting to 
    <code>480p</code> produced 
    <code>.mov</code> files that work with 
    <code>media9</code>, see below. 
    <li> If you are comfortable with command-line UNIX tools, there are the free packages <strong>mpeg2vidcodec</strong> or <strong>mpegencode</strong>, available for Mac from <a target="_blank" href="http://fink.sourceforge.net/"><strong>fink</strong></a> or <a target="_blank" href="http://www.macports.org/"><strong>MacPorts</strong></a>. The <a href="http://www.imagemagick.org/">Imagemagick</a> package also has the command <code>convert</code> which on my platform allows conversion to mpgeg (by automatically calling one of the programs mentioned before).. </li> 
    <li>Flash movies work, too, and this opens additional possibilities for interactivity in your PDF document. Flash animations can be exported from <a href="MathematicaGraphics.html#Flash">Mathematica</a>, among others. </li> 
   </ul> 
   <p> For additional information, see the pages on <a href="MakeMovie.html">making movies</a>. </p> 
   <h2>The <code>movie15</code> and <code>media9</code> Packages</h2> 
   <p> Although the <code>movie15</code> package has been declared "obsolete" after the release of <code>media9</code>, I'll start by discussing <code>movie15</code> because you're more likely to have it installed even if your TeX distribution is a little older. This package allows you to embed different kinds of movies (e.g., <code>mp4</code>, <code>mov</code> or <code>swf</code>) into a PDF document and have them play <em>inside</em> the displayed page, <em>provided</em> that you display the PDF with <code>Adobe Reader</code>. However, for any given movie format you want to appear in the PDF, you have to have an external movie player installed on your system. </p> 
   <p> This last point is where the newer <strong>media9</strong> package differs from <strong>movie15</strong>: it relies on the fact that recent versions of Adobe Reader have Flash Player built in, so that external players don't need to be installed if you deliver the embedded movie wrapped in a flash "container." Of course, most computers nowadays <em>do have</em> players for a multitude of movie formats installed anyway; that's why I think it's still worth discussing <code>movie15</code> first. </p> 
   <p> The examples here are <em>best suited for a small, "bare-bones" presentation without much stylistic overhead</em>. For the <code>media9</code> approach, <a href="#media9">scroll down.</a></p> 
   <h3>Creating the files</h3> 
   <p> For several years, the way I've been putting movies into PDF presentations has been based on direct application of <code>\pdfannot</code> or <code>\pdfmark</code> - commands understood by pdflatex which allow you to write PDF code. The style <strong>movie15.sty</strong> by Alexander Grahn uses these commands to create a very flexible and user-friendly way to do this without having to leave the LaTeX level. This package is able to use the features of the newest Adobe Reader, including 3D virtual reality interactivity. Here, I'll address only traditional movie playback to keep things simple. </p> 
   <p> The method is best described by example.</p> 
   <ol> 
    <li> <p> Assume you have the following movie in <code>MPEG</code> or <code>AVI</code> format (I have an <code>mp4</code> movie on this web page, but other formats also work):<br> <embed src="computernotes/movieExample/Circle-m-increase3.mp4" WIDTH="288" HEIGHT="300" AUTOPLAY="TRUE" LOOP="TRUE" PLAYEVERYFRAME="TRUE"> 
      <!-- The code in this comment should show a gif move if the avi can't be played. This could replace the old code if I can verify that it works on Windows platforms...
<object type="video/x-msvideo" data="computernotes/movieExample/Circle-m-increase3.avi" width="288" height="300" alt="movie example">
<param name="movie" value="Circle-m-increase3.mp4">
<param name="autoplay" value="true">
<param name="loop" value="true">
<param name="playeveryframe" value="true">
<param name="controller" value="true">
<img src="computernotes/movieExample/Circle-m-increase3.gif" width="288" height="300"></object>
--> <br> To try the example below, download this movie file: <br> <a href="computernotes/movieExample/Circle-m-increase3.mp4"><code>Circle-m-increase3.mp4</code></a><br> by right-clicking on the file name. </p> <p> </p></li>
    <li> You can see how I embedded the movie into the HTML code of this very page, and now we want to do the exact same thing with a PDF file by using <code>pdflatex</code>. <br> To do this, create a LaTeX file (named, e.g., <code>movie.tex</code>) in the same directory as the movie, containing the following: <pre>
<span class="font-latex-sedate"><span class="keyword">\documentclass</span></span><span class="variable-name">[12pt,landscape]</span><span class="function-name">{article}</span>
<span class="font-latex-sedate"><span class="keyword">\usepackage</span></span><span class="function-name">{geometry}</span>
<span class="font-latex-sedate">\geometry</span>{verbose,letterpaper}
<span class="font-latex-sedate"><span class="keyword">\usepackage</span></span><span class="function-name">{movie15}</span>
<span class="font-latex-sedate"><span class="keyword">\usepackage</span></span><span class="function-name">{hyperref}</span>
<span class="font-latex-sedate"><span class="keyword">\begin</span></span><span class="function-name">{document}</span>
Whispering-gallery mode in a quarter circle:
<span class="font-latex-sedate"><span class="keyword">\begin</span></span><span class="function-name">{figure}</span>[ht]
<span class="font-latex-sedate">\includemovie</span>[
  poster,
  text={<span class="font-latex-sedate"><span class="keyword">\small</span></span><span class="type">(Loading Circle-m-increase3.mp4)</span>}
]{6cm}{6cm}{Circle-m-increase3.mp4}
<span class="font-latex-sedate"><span class="keyword">\end</span></span><span class="function-name">{figure}</span>
<span class="font-latex-sedate"><span class="keyword">\end</span></span><span class="function-name">{document}</span>
</pre> The LaTeX file is downloadable by <a href="computernotes/movieExample/movie.tex">clicking here</a>. <p> The <code>\includemovie</code> command is the crucial object here. Its last three arguments are the dimensions of the movie and the file name. The dimensions can be chosen arbitrarily and will cause the movie to be rescaled accordingly. </p> <p> The commands related to <code>geometry</code> and <code>landscape</code> are not essential; they just turn the output page sideways for on-screen viewing. You should compile this file using the command <code>pdflatex movie</code>. </p> </li> 
    <li> In order to view the PDF with embedded movie, you need to open <code>movie.pdf</code> with <strong>Adobe Reader or Acrobat</strong>. The output file can also be downloaded by <a href="computernotes/movieExample/movie.pdf">clicking here</a>. The movie is automatically loaded and represented by its first frame ("poster frame"). Playback starts after you click on the picture and stops on the last frame. I didn't put in any visible movie controls because they appear to be buggy under Windows (thanks to Alexander Grahn for mentioning this). With Mac OS X, controls work fine, so you could add the option <code>controls</code> to <code>\includemovie</code> and obtain the same appearance as on this web page. Even without control buttons, one can always restart the movie by double-clicking on it (this applies to Mac; for Windows, you may just need a single click). </li> 
   </ol> 
   <p> Observe one fascinating detail: <br> <strong>The movie itself is contained in the PDF file</strong>, instead of having to be shipped as a <em>separate</em> file. In other words, we have created something that deserves the name <strong>Portable Document Format</strong>. The <em>caveat</em> of course is that the movie (or any other multimedia content for that matter) will only play properly if the PDF viewer manages to find an external program that can read the embedded file format. That is why it is <strong>not advisable</strong> to use exotic or platform-specific video formats (e.g., <code>.WMV</code>) if you want to send your PDF file to other people. </p> 
   <p> This dependence on external video players is removed by the <a href="#media9"> <code>media9</code></a> package below. </p> 
   <h2>Vector animations</h2> 
   <p> Everything that was said above also applies if the movie you want to include is in Flash <code>SWF</code> format. As mentioned above, the big advantage is that Flash delivers vector animation inside your PDF document. An example file, <a href="computernotes/movieExample/movie-swf.pdf">movie-swf.pdf</a>, shows the result of modifying the <code>\includemovie</code> line in our <code>tex</code> file as follows: </p>
   <pre>
<span class="font-latex-sedate"><span class="keyword">\documentclass</span></span><span class="variable-name">[12pt,landscape]</span><span class="function-name">{article}</span>
<span class="font-latex-sedate"><span class="keyword">\usepackage</span></span><span class="function-name">{geometry}</span>
<span class="font-latex-sedate">\geometry</span>{verbose,letterpaper}
<span class="font-latex-sedate"><span class="keyword">\usepackage</span></span><span class="function-name">{movie15}</span>
<span class="font-latex-sedate"><span class="keyword">\usepackage</span></span><span class="function-name">{hyperref}</span>
<span class="font-latex-sedate"><span class="keyword">\begin</span></span><span class="function-name">{document}</span>
Created by James N{\"o}ckel, January 6, 2008:
<span class="font-latex-sedate"><span class="keyword">\begin</span></span><span class="function-name">{figure}</span>[h!]
<span class="font-latex-sedate">\includemovie</span>[
  poster=FlashPoster.jpg,
  text={<span class="font-latex-sedate"><span class="keyword">\Large</span></span><span class="font-latex-sedate"><span class="type"><span class="font-latex-bold">\bf</span></span></span><span class="type"> Click to start</span><span class="font-latex-sedate"><span class="type"><span class="keyword">\hspace</span></span></span><span class="type"><span class="keyword">*</span></span><span class="type"><span class="function-name">{400pt}</span></span>}
]{550pt}{400pt}{blendone.swf}
<span class="font-latex-sedate"><span class="keyword">\end</span></span><span class="function-name">{figure}</span>
<span class="font-latex-sedate"><span class="keyword">\end</span></span><span class="function-name">{document}</span>
</pre> 
   <p> <strong>This works on OS X provided you have installed the latest update of Adobe Reader</strong> (with version 9.1 installed, Adobe Updater provides a fixed version 9.1.2). </p>
   <p> Since the poster frame (image shown before the movie is started) can't be found automatically for this Flash animation, I've inserted an image <a href="computernotes/movieExample/FlashPoster.jpg">FlashPoster.jpg</a> by hand. As above, you need Adobe Reader to play this movie. Version 8 is <em>required</em>, as is an up-to-date version of Flash Player. <em>The animation <a href="computernotes/movieExample/blendone.swf">blendone.swf</a> was created by James Nöckel, Jan. 06, 2008. </em> Please credit him if you distribute this file in any way! </p> 
   <p> Speaking of credit for authors of digital media: Adobe has recently announced enhanced digital-rights management capabilities for Flash. Other formats such as Quicktime already offer this, so there isn't really any surprise that Flash wants to offer it, too. The worry may be that Flash movies and games will therefore become less freely available. Looking at some of the Flash games that are out there, this may actually be a good thing... (take <a href="MakeMovie.html">this page for example</a>). </p>
   <p> But the truth is that giving the author some control over what people do with his or her work should generally be a matter of common sense. It is not in itself a bad development, because authors who want to distribute their work for free can still do so with the same technology. And you wouldn't want to distribute free copies of a file if the author <em>doesn't</em> want you to, right? </p> 
   <a name="media9"></a>
   <h2>Using <code>media9</code></h2> 
   <p> Since this package is newer, it's again advisable to check whether you have it installed. If you cannot typeset the file below, then your TeX distribution needs some updates. The <code>TeXLive</code> distribution that most people are now using on the Mac lets you do the necessary updates by simply entering the following commands:<br> <code>sudo tlmgr update --self<br> sudo tlmgr update all</code> </p> 
   <p> The following example again uses the flash animation <a href="computernotes/movieExample/blendone.swf">blendone.swf</a> with the poster frame <a href="computernotes/movieExample/FlashPoster.jpg">FlashPoster.jpg</a>, and the source can be downloaded as <a href="computernotes/movieExample/media9-swf.tex">media9-swf.tex</a>: </p> 
   <pre>
<span class="font-latex-sedate"><span class="keyword">\documentclass</span></span><span class="function-name">{article}</span>
<span class="font-latex-sedate"><span class="keyword">\usepackage</span></span><span class="function-name">{media9}</span>
<span class="font-latex-sedate"><span class="keyword">\usepackage</span></span><span class="variable-name">[english]</span><span class="function-name">{babel}</span>

<span class="font-latex-sedate"><span class="keyword">\begin</span></span><span class="function-name">{document}</span>
<span class="font-latex-sedate">\includemedia</span>[
  activate=onclick,
 width=0.5<span class="font-latex-sedate">\textwidth</span>
]{<span class="font-latex-sedate">\includegraphics</span>{FlashPoster.jpg}}{blendone.swf}
<span class="font-latex-sedate"><span class="keyword">\end</span></span><span class="function-name">{document}</span>

</pre> 
   <p> Another example can be found in this post on <a href="http://mathematica.stackexchange.com/questions/4232/how-to-save-animation-in-mp4-format-instead-of-avi/4236#4236">mathematica.stackexchange.com</a>, where I use a flash animation created by Mathematica. </p> 
   <h3>Embedding non-flash movies with <code>media9</code></h3> 
   <p> When I first tried to include the movie <code>Circle-m-increase3.mp4</code> from the above example with <code>media9</code>, the embedded player was unable to display it. A simple fix for this is to run the movie file through <code>Quicktime Player</code> first: Choose <code>File ? Export...</code> and select <code>480p</code> as the format. If the exported file is called <code>Circle-m-increase3a.move</code>, you can now embed it in your PDF with this source: </p> 
   <pre>
<span class="font-latex-sedate"><span class="keyword">\documentclass</span></span><span class="function-name">{article}</span>
<span class="font-latex-sedate"><span class="keyword">\usepackage</span></span><span class="variable-name">[english]</span><span class="function-name">{babel}</span>
<span class="font-latex-sedate"><span class="keyword">\usepackage</span></span><span class="function-name">{media9}</span>

<span class="font-latex-sedate"><span class="keyword">\begin</span></span><span class="function-name">{document}</span>

<span class="font-latex-sedate">\includemedia</span>[
  activate=pageopen,
  width=200pt,height=170pt,
  addresource=Circle-m-increase3a.mov,
  flashvars={<span class="comment">%
</span>src=Circle-m-increase3a.mov
<span class="font-latex-warning">&amp;</span>scaleMode=stretch}
]{}{StrobeMediaPlayback.swf}
<span class="font-latex-sedate"><span class="keyword">\end</span></span><span class="function-name">{document}</span>
</pre> 
   <p> The ouptut PDF file can be downloaded as <a href="computernotes/movieExample/autorunmov.pdf">autorunmov.pdf</a>. </p> 
   <p> An alternative is to use `ffmpeg` to create an `mp4` movie that can be recognized by <code>StrobeMediaPlayback</code>. If you don't want to do this from the command line, use <a href="http://www.mirovideoconverter.com/">Miro Video Converter</a> with the <code>Apple Universal</code> <code>mp4</code> output format. </p> 
   <hr> 
   <address> <a href="mailto:noeckel@uoregon.edu"> noeckel@uoregon.edu</a></address> 
   <!-- hhmts start --> Last modified: Fri Jun 29 07:44:03 PDT 2012 
   <!-- hhmts end --> 
  </div>   
 </body>
</html>