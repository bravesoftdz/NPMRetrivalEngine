<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head> 
  <base id="basetag" href="../"> 
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii"> 
  <title>PDFTron: PDF components and PDF tools</title> 
  <link rel="stylesheet" href="assets/css/fonts-min.css" type="text/css"> 
  <link rel="stylesheet" href="assets/css/reset-min.css" type="text/css"> 
  <link rel="stylesheet" href="assets/css/screen_wn.css" type="text/css"> 
  <link rel="stylesheet" href="assets/css/benefits_whatsnew.css" type="text/css"> 
  <script src="assets/js/mootools-core-1.3.2-full-compat-yc.js" type="text/javascript"></script> 
  <script src="assets/js/mootools-more-1.4.0.1.js" type="text/javascript"></script> 
  <script src="assets/js/cabra-utils.js" type="text/javascript"></script> 
  <script src="assets/js/site.js" type="text/javascript"></script> 
  <link rel="stylesheet" href="assets/css/testimonials.css" type="text/css"> 
  <script type="text/javascript" src="assets/js/testimonials.js"></script> 
  <link rel="stylesheet" href="assets/css/dropdown.css" type="text/css"> 
  <script type="text/javascript" src="assets/js/dropdown.js"></script> 
  <!--[if lt IE 7]>
        <script type="text/javascript" src="assets/js/unitpngfix.js"></script>
<![endif]--> 
 </head> 
 <body id="slide-effect"> 
  <div id="mainNavHeaderContainer"> 
   <div id="mainNavHeader"> 
    <div class="clear"> 
     <div class="clear topNavContainer floatRight"> 
      <div id="topNav" class="clear floatLeft"> 
       <ul class="floatLeft clear"> 
        <li class="downloadIcon"><a href="downloads.html">Download Trial</a></li> 
        <li class="purchaseIcon"><a href="licensing/index.html">Purchase</a></li> 
        <li class="contactIcon"><a href="contactus.html">Contact Us</a></li> 
        <li class="loginIcon"><a href="login.html">Login</a></li> 
       </ul> 
      </div> 
      <div id="searchBar" class="clear floatRight"> 
       <form action="../search.html" id="cse-search-box"> 
        <div> 
         <input type="hidden" name="cx" value="006560767843857386650:7l48dmsasty"> 
         <input type="hidden" name="cof" value="FORID:11"> 
         <input type="hidden" name="ie" value="UTF-8"> 
         <p class="floatLeft"> <label for="q"> <input name="q" id="q" size="8" maxlength="64" value="Search Site" onclick="if (this.value == 'Search Site') { this.value = ''; }" onblur="if (this.value == '') { this.value = 'Search Site'; }" type="text" class="searchInputBox"> </label> </p> 
         <p class="floatRight"> <label> <input type="image" name="sa" value="Search" src="assets/images/buttons/searchSite_button.gif" class="searchInputButton"> </label> </p> 
        </div> 
       </form> 
       <!--script type="text/javascript" src="http://www.google.com/coop/cse/brand?form=cse-search-box&lang=en"></script--> 
      </div> 
     </div> 
    </div> 
    <div id="logo"> 
     <a href="index.html"></a> 
    </div> 
    <div id="mainNav" class="clear"> 
     <dl class="dropdown"> 
      <dt id="one-ddheader" onmouseover="ddMenu('one',1)" onmouseout="ddMenu('one',-1)">
       <a href="products.html">Products &amp; Services</a>
       <span class="smallGreyText">Great pdf developer solutions</span> 
      </dt> 
      <dd id="one-ddcontent" onmouseover="cancelHide('one')" onmouseout="ddMenu('one',-1)"> 
       <ul class="first"> 
        <li>&nbsp;</li> 
        <li><a href="pdfnet/index.html" class="top">PDFNet SDK</a></li>
        <li><a href="webviewer/index.html">WebViewer</a></li>
        <li><a href="pdftools.html">Tools &amp; Utilities</a></li>
        <li><a href="pws">PDFTron Web Services</a></li> 
       </ul> 
      </dd> 
     </dl> 
     <dl class="dropdown"> 
      <dt id="two-ddheader" onmouseover="ddMenu('two',1)" onmouseout="ddMenu('two',-1)">
       <a href="support/index.html">Support</a>
       <span class="smallGreyText">Developer 2 developer support</span>
      </dt> 
      <dd id="two-ddcontent" onmouseover="cancelHide('two')" onmouseout="ddMenu('two',-1)"> 
       <ul class="second"> 
        <li>&nbsp;</li> 
        <li><a href="support/maintenance.html" class="top large">Annual Maintenance Subscription</a></li> 
        <li><a href="support/technicalsupport.html" class="large">Technical Support &amp; Resources</a></li> 
        <li><a href="support/professionalservices.html">Professional Services</a></li> 
        <li><a href="pdfnet/faq.html">Support FAQ</a></li> 
       </ul> 
      </dd> 
     </dl> 
     <dl class="dropdown"> 
      <dt id="three-ddheader" onmouseover="ddMenu('three',1)" onmouseout="ddMenu('three',-1)">
       <a href="resources/pdftronlabs.html">Resources</a>
       <span class="smallGreyText">Community &amp; developer resources</span> 
      </dt> 
      <dd id="three-ddcontent" onmouseover="cancelHide('three')" onmouseout="ddMenu('three',-1)"> 
       <ul class="third"> 
        <li>&nbsp;</li> 
        <li><a href="resources/pdftronlabs.html" class="top">PDFTron Labs</a></li> 
        <li><a target="_blank" href="http://blog.pdftron.com">Blog <img src="assets/images/icons/external.png"></a></li> 
        <li><a href="resources/pdfenvironment.html">PDF &amp; Environment</a></li> 
        <li><a href="resources/industrynews.html">Industry News</a></li> 
        <li><a href="resources/newsletter.html">Newsletter</a></li> 
        <li><a href="resources/whitepapers.html">Whitepapers/Datasheets</a></li> 
       </ul> 
      </dd> 
     </dl> 
     <dl class="dropdown"> 
      <dt id="four-ddheader" onmouseover="ddMenu('four',1)" onmouseout="ddMenu('four',-1)">
       <a href="whypdftron/benefits.html">Why PDFTron</a>
       <span class="smallGreyText">Trusted pdf experts with great solutions</span> 
      </dt> 
      <dd id="four-ddcontent" onmouseover="cancelHide('four')" onmouseout="ddMenu('four',-1)"> 
       <ul class="fourth"> 
        <li>&nbsp;</li> 
        <li><a href="whypdftron/benefits.html" class="top">Benefits</a></li> 
        <li><a href="whypdftron/customers.html">Our Customers</a></li> 
        <li><a href="whypdftron/testimonials.html">Testimonials</a></li> 
       </ul> 
      </dd> 
     </dl> 
     <dl class="dropdown"> 
      <dt id="five-ddheader" onmouseover="ddMenu('five',1)" onmouseout="ddMenu('five',-1)">
       <a href="aboutus/index.html">About Us</a>
       <span class="smallGreyText">The story behind the company</span> 
      </dt> 
      <dd id="five-ddcontent" onmouseover="cancelHide('five')" onmouseout="ddMenu('five',-1)"> 
       <ul class="fifth"> 
        <!--li><a href="aboutus/team.html">Team</a></li--> 
        <li><a href="aboutus/news.html" class="top">News &amp; Press</a></li> 
        <li><a href="contactus.html">Contact Us</a></li> 
        <li><a href="aboutus/careers.html">Careers</a></li> 
        <li><a href="aboutus/opportunities.html" class="large">CO-OP &amp;<br> Internship Opportunities</a></li> 
        <li><a href="aboutus/partners.html">Partners/Alliances</a></li> 
        <li><a href="aboutus/resellers.html">Resellers</a></li> 
       </ul> 
      </dd> 
     </dl> 
     <div style="clear:both"></div> 
    </div> 
   </div> 
  </div> 
  <div id="breadCrumbContainer"> 
   <div id="breadCrumb"> 
    <p class="homeIcon"><a href="index.html">Home</a> // <a href="products.html">Products</a> // <a href="pdfnet/index.html">PDFNet SDK</a> // What's New</p> 
   </div> 
  </div> 
  <div id="insideContentContainer" class="clear"> 
   <div id="insideContent"> 
    <div id="leftContent" class="floatLeft"> 
     <div id="subNav"> 
      <ul> 
       <li class="top"><a href="products.html">Products</a></li> 
       <li><a href="pdfnet/index.html" class="active">PDFNet SDK</a></li> 
       <li class="subNavTwo"><a href="pdfnet/features.html">Features</a></li> 
       <li class="subNavThree"><a href="pdfnet/addons.html">Add-ons</a></li> 
       <li class="subNavTwo"><a class="active" href="pdfnet/whatsnew.html">What's New</a></li> 
       <li class="subNavTwo"><a href="pdfnet/samplecode.html">Sample Code</a></li> 
       <li class="subNavTwo"><a href="pdfnet/documentation.html">Documentation</a></li> 
       <li class="subNavTwo"><a href="pdfnet/faq.html">FAQ</a></li> 
       <li class="subNavTwo"><a href="pdfnet/forum.html">Forum / KB</a></li> 
       <li class="subNavTwo"><a href="pdfnet/downloads.html">Download</a></li> 
       <li class="subNavTwo"><a href="pdfnet/mobile/index.html">Mobile</a></li> 
       <li class="subNavThree"><a href="pdfnet/mobile/android_pdf_library.html">Android PDF SDK</a></li> 
       <li class="subNavThree"><a href="pdfnet/mobile/ios_pdf_library.html">iOS PDF SDK</a></li> 
       <li class="subNavThree"><a href="pdfnet/mobile/windows8_winrt_pdf_library.html">WinRT PDF SDK</a></li> 
       <li class="subNavThree"><a href="pdfnet/mobile/windowsphone_pdf_library.html">WP8 SDK</a></li> 
       <li><a href="webviewer/index.html">WebViewer</a></li> 
       <li><a href="pdftools.html">Tools &amp; Utilities</a></li> 
       <li><a href="pws/index.html">PWS</a></li> 
      </ul> 
      <img src="assets/images/backgrounds/subNav_bg_bottom.gif" alt="Sub Navigation"> 
     </div> 
    </div> 
    <div id="content" class="floatLeft siteMap"> 
     <div class="greyBoxHeaderInside"> 
      <div class="greyBoxLogo"> 
       <img src="assets/images/logos/pdfNet_large.png" alt="PDFNet SDK"> 
      </div> 
      <img src="assets/images/backgrounds/greyBoxHeader_bg_bottom.gif" alt=""> 
     </div> 
     <h1>What's New</h1> 
     <div class="floatLeft" style="margin-top:5px">
       Subscribe: 
      <a href="https://groups.google.com/group/pdfnet-sdk-announce/feed/rss_v2_0_topics.xml" class="feed ">RSS 2.0</a> 
      <a href="http://groups.google.com/group/pdfnet-sdk-announce/feed/atom_v1_0_topics.xml" class="feed ">Atom 1.0</a> 
     </div> 
     <div id="vertical"> 
      <div class="clear"> 
       <p class="noPrint floatRight"><img id="expand-all" src="assets/images/buttons/expand.png" style="width:143px;" alt="Expand All"><img id="collapse-all" class="invisible" src="assets/images/buttons/collapse.png" style="width:143px;" alt="Collapse All"></p> 
      </div> 
      <dl class="content"> 
       <dt class="topSitemap title open"> 
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span> 
        <span class="grey questionsDrop">November 16th, 2016 - Version 6.7.1</span> 
        <a name="Version_6_7_1"></a> 
       </dt> 
       <dd class="onlyDotList collapse">
        <br> 
        <h2>November 16th, 2016 - Version 6.7.1</h2>
        <h2> </h2>
        <h4>All Platforms - New Features</h4> 
        <ul class="bullets"> 
         <li>Support for JavaScript actions. This can be enabled using <span class="codespan">PDFNet.EnableJavaScript</span> and includes the following interactive PDF features: 
          <ul class="bullets"> 
           <li>Automatically recalculated fields. <img class="whatsnewimage" src="assets/images/support/subtotal_js_671.png" alt="Automatically recalculated fields example"></li> 
           <li>Verification of user input.<img class="whatsnewimage" src="assets/images/support/error_js_671.png" alt="Verification of user input example"></li> 
          </ul> </li> 
         <li>Built-in DOC-to-PDF conversion support.</li> 
         <li>Export to individual separations using PDFDraw. 
          <ul class="bullets"> 
           <li>Rather than converting to an output format such as RGB, PDFDraw can now preserve separations. Output can be in the form of a single N-channel TIFF, or to a number of output files, one for each separate ink in the source document<img class="whatsnewimage" src="assets/images/support/sep_export_671.png" alt="Separation export example"></li> 
          </ul> </li> 
         <li>Support for the "cloudy" and "nozoom" annotation styles. 
          <ul class="bullets"> 
           <li>Rectangles and polygons can be drawn in a cloudy style, as shown. Annotations marked as "nozoom" will maintain thier size on screen at any zoom level (commonly applied to sticky notes). <img class="whatsnewimage" src="assets/images/support/cloudy_nozoom_671.png" alt="Cloud and nozoom annotation example"> </li> 
          </ul> </li> 
         <li>Stream documents to PDFViewCtrl during conversion to PDF, through new Universal Conversion interface. (Available on PDFNet Mobile SDK for Android and PDFNet Mobile SDK for UWP.) Supports the following file types: 
          <ul class="bullets"> 
           <li>Office file conversion support: .docx, .pptx, .doc. (with the optional office conversion module)</li> 
           <li>Image conversion support: .bmp, .jpg, .tif, .png, .gif</li> 
           <li>Image collections (zip archives with any type of image internally)</li> 
           <li>Plain text file formats</li> 
          </ul> </li> 
        </ul> 
        <h4>All Platforms - Performance Improvements</h4> 
        <ul class="bullets"> 
         <li>Faster shape rasterization (0-20%).</li> 
         <li>JBig2 decoding performance improvements (3-5x faster in many cases).</li> 
         <li>JPEG2000: for the majority of JPEG 2000 encoded images, decoding is now faster and uses much less memory.</li> 
         <li>Faster CMYK-&gt;RGB conversion in many cases.</li> 
         <li>Parsing improvements: much improved performance on files with complex content streams.</li> 
        </ul> 
        <h4>All Platforms - Bugfixes</h4> 
        <ul class="bullets"> 
         <li>Overprint preview handling has been improved.</li> 
         <li>More robust handling of corrupt documents.</li> 
         <li>Improved stability when used in an interactive environment.</li> 
         <li>Many other miscellaneous bug fixes.</li> 
        </ul> 
        <h4>Android Specific</h4> 
        <p>For a more detailed list of changes, see the <a href="pdfnet/releasenotes/android_671.html">Android 6.7.1 Release Notes</a></p> 
        <ul class="bullets"> 
         <li>Undo/Redo</li> 
         <li>Universal conversion now supports pptx documents</li> 
         <li>View PDF in maintain zoom mode</li> 
         <li>Text selection with smart snapping</li> 
         <li>Edit custom option in combobox</li> 
         <li>Automatically scrolls to the next form field when filling forms</li> 
         <li>Improved Reflow mode in terms of handling internal links, custom color mode, and turning page on tap option</li> 
         <li>Toggle between inline editing and using a dialog for creating freetext annotations</li> 
        </ul> 
        <h4>iOS Specific</h4> 
        <p>For a more detailed list of changes, see the <a href="pdfnet/releasenotes/iOS/ios_671.html">iOS 6.7.1 Release Notes</a></p> 
        <ul class="bullets"> 
         <li>PDFNet Framework and Tools Framework are now both dynamic frameworks</li> 
         <li>Improved support for iOS 10</li> 
         <li>New digital signature sample that cryptographically signs and certifies a document</li> 
         <li>All sample projects and tools source code are now free of any class deprecated prior to iOS 9</li> 
         <li>A variety of small improvements and bug fixes</li> 
        </ul> 
        <h4>Windows (UWP) Specific</h4> 
        <p>For a more detailed list of changes, see the <a href="pdfnet/releasenotes/uwp_671.html">UWP 6.7.1 Release Notes</a></p> 
        <ul class="bullets"> 
         <li>Universal document viewing (PDFViewCtrl can open docx, etc)</li> 
         <li>ReflowView Control in tools</li> 
         <li>NavigationStack for quickly going back and forth between views</li> 
         <li>Text selection with smart snapping</li> 
         <li>Zoom, SmartZoom, and SetPageViewMode can now animate the view change</li> 
         <li>Ability to get Thumbnails from the PDFViewCtrl in a background thread (via PDFViewCtrl.ThumbnailResponseHandler) relieving the UI thread</li> 
         <li>A CropView Control in tools to crop pages in a document</li> 
         <li>A wider range of ColorPostProcessingModes for the PDFViewCtrl, including duotone for things like Sepia mode</li> 
         <li>The Sticky Note tool now provides 10 different icons and multiple styles</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">April 4, 2016 - Version 6.6.1</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <p><strong>April 4, 2016 - Version 6.6.1</strong></p> Note: this release is specific to desktop/server variants of PDFNet. It does not include PDFNet Mobile SDKs. 
        <ul class="bullets"> 
         <li>Native PPTX-to-PDF support on desktop/server platforms now available.</li> 
         <li>Miscellaneous bug fixes and incremental improvements.</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">January 12, 2016 - Version 6.6.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <p><strong>January 12, 2016 - Version 6.6.0</strong><strong></strong></p> 
        <ul> 
         <li>Note: this release is specific to desktop/server variants of PDFNet. It does not include PDFNet Mobile SDKs.</li> 
        </ul> 
        <ul class="bullets"> 
         <li><strong>Java API</strong> brought inline with standard naming convention (lowercase). For example <strong>pdftron.PDF.PDFDoc</strong> is now <strong>com.pdftron.pdf.PDFDoc</strong>.</li> 
         <li>Improved password (encrypted PDF) handling, especially for C++ API, to better handle unicode and binary passwords.</li> 
         <li>Important bug fixes and incremental improvements.</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Common API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.SDF.SecurityHandler.ChangeUserPassword(byte[])</li> 
         <li>pdftron.SDF.SecurityHandler.ChangeMasterPassword(byte[])</li> 
         <li>pdftron.SDF.SDFDoc.InitStdSecurityHandler(byte[])</li> 
         <li>pdftron.PDF.PDFDoc.InitStdSecurityHandler(byte[])</li> 
         <li>pdftron.PDF.Page.AddRotations</li> 
         <li>pdftron.PDF.Page.SubtractRotations</li> 
         <li>pdftron.PDF.Page.RotationToDegree</li> 
         <li>pdftron.PDF.Page.DegreeToRotation</li> 
         <li>pdftron.PDF.Annot.GetRotation</li> 
         <li>pdftron.PDF.Annot.SetRotation</li> 
        </ul> 
        <p><strong><em>Removed Types and Methods in PDFNet Common API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.Annots.Screen.GetRotation</li> 
         <li>pdftron.PDF.Annots.Screen.SetRotation</li> 
         <li>pdftron.PDF.Annots.Widget.GetRotation</li> 
         <li>pdftron.PDF.Annots.Widget.SetRotation</li> 
        </ul> 
        <p><strong><em>Changed Types and Methods in PDFNet Java API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Root package changed from <strong>pdftron</strong> to <strong>com.pdftron</strong>.</li> 
         <li>Rest of sub packages are now lower case.</li> 
         <li>For example <strong>pdftron.PDF.PDFDoc</strong> will now be <strong>com.pdftron.pdf.PDFDoc</strong>.</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet C++ API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.SDF.SecurityHandler.ChangeUserPassword(UString)</li> 
         <li>pdftron.SDF.SecurityHandler.ChangeMasterPassword(UString)</li> 
         <li>pdftron.SDF.SecurityHandler.InitPassword(UString)</li> 
         <li>pdftron.SDF.SDFDoc.InitStdSecurityHandler(UString)</li> 
         <li>pdftron.SDF.PDFDoc.InitStdSecurityHandler(UString)</li> 
        </ul> 
        <p><strong><em>Deprecated Types and Methods in PDFNet C++ API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.SDF.SecurityHandler.InitPasswordASCII(const char*)</li> 
         <li>pdftron.SDF.SecurityHandler.InitPassword(const char*, size_t)</li> 
         <li>pdftron.SDF.SecurityHandler.ChangeUserPasswordASCII(const char*)</li> 
         <li>pdftron.SDF.SecurityHandler.ChangeUserPassword(const char*, size_t)</li> 
         <li>pdftron.SDF.SecurityHandler.ChangeMasterPasswordASCII(const char*)</li> 
         <li>pdftron.SDF.SecurityHandler.ChangeMasterPassword(const char*, size_t)</li> 
         <li>pdftron.SDF.SDFDoc.InitStdSecurityHandler(const char*, int)</li> 
         <li>pdftron.PDF.PDFDoc.InitStdSecurityHandler(const char*, int)</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">August 31, 2015 - Version 6.5.3</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <p><strong>August 31, 2015 - Version 6.5.3</strong><strong></strong></p> 
        <ul class="bullets"> 
         <li>Native DOCX-to-PDF support on all platforms now available.</li> 
         <li>Added WordtoPDFOptions class for options specific to DOCX-to-PDF conversion.</li> 
         <li>Added DocumentConversion class to manage and track warnings and progress during DOCX-to-PDF conversion.</li> 
         <li>Miscellaneous bug fixes and incremental improvements.</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.Convert.WordToPDF</li> 
         <li>pdftron.PDF.Convert.WordToPDFConversion</li> 
         <li>pdftron.PDF.WordToPDFOptions</li> 
         <li>pdftron.PDF.WordToPDFOptions.GetLayoutResourcesPluginPath</li> 
         <li>pdftron.PDF.WordToPDFOptions.SetLayoutResourcesPluginPath</li> 
         <li>pdftron.PDF.WordToPDFOptions.GetResourceDocPath</li> 
         <li>pdftron.PDF.WordToPDFOptions.SetResourceDocPath</li> 
         <li>pdftron.PDF.WordToPDFOptions.GetSmartSubstitutionPluginPath</li> 
         <li>pdftron.PDF.WordToPDFOptions.SetSmartSubstitutionPluginPath</li> 
         <li>pdftron.PDF.DocumentConversion</li> 
         <li>pdftron.PDF.DocumentConversion.Result</li> 
         <li>pdftron.PDF.DocumentConversion.TryConvert</li> 
         <li>pdftron.PDF.DocumentConversion.Convert</li> 
         <li>pdftron.PDF.DocumentConversion.ConvertNextPage</li> 
         <li>pdftron.PDF.DocumentConversion.GetConversionStatus</li> 
         <li>pdftron.PDF.DocumentConversion.CancelConversion</li> 
         <li>pdftron.PDF.DocumentConversion.HasProgressTracking</li> 
         <li>pdftron.PDF.DocumentConversion.GetProgress</li> 
         <li>pdftron.PDF.DocumentConversion.GetProgressLabel</li> 
         <li>pdftron.PDF.DocumentConversion.GetErrorString</li> 
         <li>pdftron.PDF.DocumentConversion.GetNumWarnings</li> 
         <li>pdftron.PDF.DocumentConversion.GetWarningString</li> 
        </ul> 
       </dd>  
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">May 14, 2015 - Version 6.5.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <p><strong>May 14, 2015 - Version 6.5.0</strong><strong></strong></p> 
        <ul class="bullets"> 
         <li>XOD conversion output is now the new XOD format, which features reduced sizes and improved blend modes. 
          <ul class="bullets"> 
           <li>WebViewer 2.0 or later is required for new XOD documents</li> 
           <li>Old XODs will continue to work in WebViewer 2.0</li> 
           <li>Flash and Silverlight are removed in WebViewer 2.0. The Flash and Silverlight versions are still available in WebViewer 1.8.2, but they are made available on an ?as-is? basis.</li> 
           <li>To continue to generate XOD files for Silverlight and Flash, <b>XODOutputOptions.UseSilverlightFlashCompatible</b> must be set to True.</li> 
          </ul> </li> 
         <li>Improved Text2PDF conversion for UTF-encoded text files</li> 
         <li>Added optional, beta Word2PDF conversion through Convert.Printer.SetMode(e_printermode_prefer_builtin_converter)</li> 
         <li>Important bug fixes and incremental improvements.</li> 
        </ul> 
        <p><strong><em>WinRT (PDFNet for Windows Store apps) Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Universal Samples are now using the MVVM pattern.</li> 
         <li>PDFDoc.SaveToNewLocationAsync, will save the document under the assumption that the destination passed in is different from the source of the document, as specified when creating the doc or the last save, if that has happened since opening. This function will speed up saving since certain safety precautions are not necessary.</li> 
         <li>Added a CompleteReader Sample, which implements a full featured PDF reader and annotator.</li> 
         <li>PDFViewCtrlTools contain a control for tabbed PDF viewing (i.e. open multiple documents in different tabs).</li> 
         <li>PDFViewCtrl.Deactivate - This will stop rendering and then remove any content that is not visible on the screen. This method is used by the tab control to reduce memory usage on hidden PDFViewCtrls.</li> 
         <li>PDFViewCtrl.Activate - Resumed rendering</li> 
         <li>PDFViewCtrl.SetScrollBarVisibility</li> 
         <li>PDFViewCtrl.PreviousAndNextButtonVisibility, Whether or not to show the prev/next buttons in single page mode for mouse navigation. Note that you have to call the static PDFViewCtrl.RegisterDependencyProperties() before you can use this.</li> 
         <li>Miscellaneous bug fixes and improvements.</li> 
        </ul> 
        <p><strong><em>iOS Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Note: PDFNet 6.5 is compiled using Xcode 6.3. Please ensure your project is compiled with the version of LLVM/Clang that shipped with Xcode 6.3 or greater.</li> 
         <li>Note: Only iOS version 7 or greater is supported.</li> 
         <li>CompleteReader now includes user bookmarks stored outside the PDF.</li> 
         <li>Adds new annotation added/modified/removed methods to the ToolManager.</li> 
         <li>Miscellaneous bug fixes and improvements.</li> 
        </ul> 
        <p><strong><em>Android Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>New 64-bit native architectures, arm64-v8a and x86_64.</li> 
         <li>Adds a new tabbed viewer control that allows viewing multiple PDFs in the same viewer (API 11+). See CompleteReader sample for usage.</li> 
         <li>Adds new annotation added/modified/removed methods to the ToolManager's AnnotationModificationListener.</li> 
         <li>Adds smart zoom animation and improvements to the page sliding animation.</li> 
         <li>Miscellaneous bug fixes and improvements.</li> 
        </ul> 
        <p><strong><em>Deprecated Methods in PDFNet Windows C++ API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Setting the last parameter to true is the following method <b>PDFViewCtrl(void*, void*, bool)</b> is now deprecated. Setting to true put the viewer into pre 5.7 <b>Compatibility</b> mode. All users should remove this boolean parameter, and begin using the modern PDFViewCtrl that started shipping in 5.8. The new one provides superior performance.</li> 
        </ul> 
        <p><strong><em>Deprecated Methods in PDFNet Windows .NET API</em>:</strong></p> 
        <ul class="bullets"> 
         <li><b>PDFViewCtrl(bool)</b> see above for more info.</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.Convert.FromText</li> 
         <li>pdftron.PDF.Convert.XODOutputOptions.SetThumbnailSize</li> 
         <li>pdftron.PDF.Convert.XODOutputOptions.UseSilverlightFlashCompatible</li> 
         <li>pdftron.PDF.Optimizer.MonoImageSettings.SetJBIG2Threshold</li> 
         <li>pdftron.PDF.PDFView.UpdateOCGContext</li> 
         <li>pdftron.PDF.PDFViewWPF.Activate</li> 
         <li>pdftron.PDF.PDFViewWPF.Deactivate</li> 
         <li>pdftron.PDF.PDFViewWPF.SetRenderedContentCacheSize</li> 
         <li>pdftron.PDF.PDFViewWPF.OnRenderFinished</li> 
         <li>pdftron.PDF.TextExtractor.SetRightToLeftLanguage</li> 
         <li>pdftron.PDF.TextExtractor.GetRightToLeftLanguage</li> 
        </ul> 
        <p><strong><em>Chaged Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.Convert.Printer.Mode</li> 
        </ul> 
       </dd>  
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">January 20, 2015 - Version 6.4.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <p><strong>New Features and Improvements to Server/Desktop SDKs<br> <em>(NOTE: Mobile SDKs are not included in this release)</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Added pdfron.PDF.Convert.Printer.GetMode to control whether Office Interop or the printer subsystem is used for Office conversion.</li> 
         <li>Added support for AnyCPU in .NET builds (<a href="http://blog.pdftron.com/2014/12/01/pdfnet-for-net-and-anycpu/">link</a>).</li> 
         <li>Published PDFNet on NuGet (<a href="http://blog.pdftron.com/2014/09/10/dotnet-pdf-control-nuget/">link</a>).</li> 
         <li>Open-sourced PDFNetLoader library (<a href="https://github.com/PDFTron/PDFNetLoader">link</a>).</li> 
         <li>Exported XFDF now includes appearance streams as images.</li> 
         <li>Added support for old-style JPEG compression for TIFF images.</li> 
         <li>Important bug fixes and incremental improvements.</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.Image.Create</li> 
         <li>pdftron.PDF.Convert.SVGOutputOptions.SetFlattenMaximumImagePixels</li> 
         <li>pdftron.PDF.Convert.SVGOutputOptions.SetFlattenDPI</li> 
         <li>pdftron.PDF.Convert.Printer.SetMode</li> 
         <li>pdftron.PDF.Convert.Printer.GetMode</li> 
         <li>pdftron.PDF.Annot.GetVisibleContentBox</li> 
         <li>pdftron.FDF.FDFDoc.CreateFromXFDFBytes</li> 
        </ul> 
        <p><strong><em>Chaged Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.PDFView.GetAnnotationAt</li> 
         <li>pdftron.PDF.PDFDCEX.Begin</li> 
         <li>pdftron.PDF.Font.CreateCIDTrueTypeFont</li> 
         <li>pdftron.FDF.FDFDoc.SaveAsXFDF</li> 
        </ul> 
       </dd>  
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">October 6, 2014 - Version 6.3.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <ul class="bullets"> 
         <li>Added "Erase" method for Ink annotations, to erase a rectangular area.</li> 
         <li>Added "night mode" to reverse the colors of PDFs during rendering.</li> 
         <li>Added method to create images from filters.</li> 
         <li>Added ability to pass in a memory buffer of an image, without specifying dimensions, BPC, et cetera.</li> 
         <li>Added Font.createCIDTrueTypeFont that accepts index into a True Type Collection.</li> 
         <li>PDFNet now available through NuGet.</li> 
         <li>Simplified the packaging of .NET SDKs by having PDFNet detect architecture at runtime. Samples are now AnyCPU.</li> 
         <li>Added SetDefaultFlateCompressionLevel method.</li> 
         <li>Improved error reporting during Office interop conversion.</li> 
         <li>PDF2SVG can now use font substitutions specified in config.xml (as in PDF2Image).</li> 
         <li>Can now specify DPI and maximum resolution for SVG conversions.</li> 
         <li>SetJPGQuality will now work with ToHTML and ToEPUB options.</li> 
         <li>Redaction now preserves CMYK images instead of converting to RGB.</li> 
         <li>Reduced symbols exported by Linux builds.</li> 
         <li>Added support for creating invisible text in place of text inside transparency groups when flattening.</li> 
         <li>Improved external XFDF generation during XOD conversion.</li> 
         <li>Added option to SetImageSmoothing API for higher-quality resampling at the expense of rendering performance.</li> 
         <li>Improved path hinting and thin line adjustment.</li> 
         <li>Added Convert.ToTiff method to for easy conversion of PDF documents to mutli-page TIFF documents.</li> 
         <li>Added Office interop conversion support for CSV, XLAM, XLTM, and XLSB files.</li> 
         <li>Improved appearance of text fields, radio buttons, PolyLine and Polygon annotations.</li> 
         <li>Windows Print API takes an optional OCG context, to control which layers are printed.</li> 
         <li>Important bug fixes and incremental improvements.</li> 
        </ul> 
        <p><strong><em>WinRT (PDFNet for Windows Store apps) Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Added Thumbnail Viewer, including source code for easy editing.</li> 
         <li>Better stylus support: Ink annotations are now allowed at any time and anywhere on the document when you start writing with a stylus.</li> 
         <li>The CompleteReader sample now comes with more view modes, including facing, cover facing, night mode, rotation mode and thumbnail mode. It is also integrated with the new tool and controls, such as the eraser tool and the Thumbnail Viewer.</li> 
         <li>Improved usability for Tools, such as two finger scroll in annotation creation mode and a control handle for text markups.</li> 
         <li>An Eraser tool, that can erase freehand annotation, is now included.</li> 
         <li>Added workaround to Windows bug where ScrollViewer would cut off content at offsets that were too large.</li> 
         <li>Miscellaneous bug fixes and improvements. </li> 
         <li>New APIs: 
          <ul> 
           <li>pdftron.PDF.PDFViewCtrl.SetColorPostProcessMode(PDFRasterizerColorPostProcessMode mode)</li> 
           <li>pdftron.PDF.PDFViewCtrl.GetColorPostProcessMode()</li> 
           <li>pdftron.PDF.PDFViewCtrl.GetAnnotAt(int x, int y, double distanceThreshold, double minimumLineWeight)</li> 
           <li>pdftron.PDF.PDFViewCtrl.Update(Field field)</li> 
          </ul></li> 
         <li>Miscellaneous bug fixes and improvements.</li> 
        </ul> 
        <p><strong><em>iOS Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Note: PDFNet 6.3.2 is compiled using Xcode 6.0.1. Please ensure your project is compiled with the version of LLVM/Clang that shipped with Xcode 6.0.1 or greater.</li> 
         <li>All PDFNet classes are now prefixed with PT to avoid naming conflicts with other libraries. All future releases will include this change.</li> 
         <li>Tools improvements</li> 
         <ul> 
          <li>New Bookmarks control that allows user create bookmarks.</li> 
          <li>Scrolling with two fingers is now possible when annotating.</li> 
          <li>An eraser tool that can be used to erase freehand annotations.</li> 
          <li>Text annotations (highlights, strikethroughs, underlines, squiggly underlines) can now be resized after they are created.</li> 
          <li>Text annotations type can now be changed, i.e. a highlight can be changed to an underline, a strikeout to a highlight, etc.</li> 
          <li>Annotations can now be edited while in an annotation creation mode. For example if you are in text highlight mode, tapping on another highlight will allow you to edit it, and then dragging across new text will highlight it, reducing the need to go back to the toolbar to change modes.</li> 
          <li>New @3x image assets.</li> 
         </ul> 
         <li>Updated and enhanced the Complete Reader sample for iOS 8 and the iPhone 6 (Plus), and the.new tools.</li> 
         <li>Support for converting Office documents to PDF with new PTConvert method convertOfficeToPDF:completion:. Note that this method uses a UIWebView under the hood, so purchase of the Convert Add-on is not required, but we are not able to control conversion quality (which will be the same as other apps that use a UIWebView for this purpose).</li> 
         <li>New Swift sample project that shows how to use PDFNet from a Swift project using a bridging header.</li> 
         <li>New C++ sample project showing how to use PDFNet's C++ interface (useful for writing cross-platform PDF manipulation code).</li> 
         <li>Framework available split into two (one for device (armv7, armv7s, arm64) and another for simulator (i386 and x86_64) that are less than 100 MB and hence can be committed to GitHub.</li> 
         <li>New APIs: 
          <ul> 
           <li>PDFViewCtrl -(void)SetColorPostProcessMode:(PTColorPostProcessMode)mode;</li> 
           <li>PDFViewCtrl -(PTColorPostProcessMode)GetColorPostProcessMode;</li> 
           <li>PDFViewCtrl -(void)setMinimumTwoFingersToScrollEnabled:(bool)enabled;</li> 
           <li>PDFViewCtrl -(void)UpdateWithField:(PTField*)field;</li> 
           <li>PTConvert +(void)convertOfficeToPDF:(NSString*)filePath completion:(void(^)(NSString* pathToPDF))completion</li> 
          </ul></li> 
         <li>Changed APIs: 
          <ul> 
           <li>- (PTAnnot*)GetAnnotationAt: (int)x y: (int)y distanceThreshold: (double)distanceThreshold minimumLineWeight: (double)minimumLineWeight;</li> 
          </ul></li> 
         <li>Bug fixes.</li> 
        </ul> 
        <p><strong><em>Android Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>A set of new controls has been added to the tools library (in the pdftron.PDF.Controls package). The source code for these controls are public and can be customized as required. The controls include:</li> 
         <ul> 
          <li>An UserBookmarkDialogFragment allowing user to add/edit custom bookmarks.</li> 
          <li>An AnnotationPropertyPopupWindow for styling annotations.</li> 
          <li>An ThumbnailsViewFragment showing the thumbnails of a document and it also supports page rearrangement as well as page deletion.</li> 
         </ul> 
         <li>"PDFVewCtrlTools" library project has been updated to Android 5.0.</li> 
         <li>"Complete Reader" sample app has been updated to Android 5.0 with the new Material Design. It also incorporates all of the controls above.</li> 
         <li>All sample projects have been updated to use Android 5.0 with compileSdkVersion 21, buildToolsVersion 21.0.2, gradle 2.1 with version 0.13.3.</li> 
         <li>An Eraser tool is now included that can erase freehand annotation.</li> 
         <li>Improved usability for Tools: i.e. two finger scroll in annotation creation mode, control handle for text markups.</li> 
         <li>Tools source code is no longer in the PDFViewCtrlProjects folder. It is now moved to the lib/src folder.</li> 
         <li>New APIs: 
          <ul> 
           <li>PDFViewCtrl.update(Field field)</li> 
           <li>PDFViewCtrl.setColorPostProcessMode(int mode)</li> 
           <li>PDFViewCtrl.getColorPostProcessMode()</li> 
           <li>PDFViewCtrl.getAnnotationAt(int x, int y, double distanceThreshold, double minimumLineWeight)</li> 
          </ul></li> 
         <li>Bug fixes.</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.SDF.SecurityHander.IsValid</li> 
         <li>pdftron.PDF.PDFViewCtrl.SetColorPostProcessMode</li> 
         <li>pdftron.PDF.PDFViewCtrl.GetColorPostProcessMode</li> 
         <li>pdftron.PDF.PDFViewCtrl.Update</li> 
         <li>pdftron.PDF.PDFView.SetColorPostProcessMode</li> 
         <li>pdftron.PDF.PDFView.GetColorPostProcessMode</li> 
         <li>pdftron.PDF.PDFView.Update</li> 
         <li>pdftron.PDF.Annots.Ink.Erase</li> 
         <li>pdftron.PDF.PDFRasterizer.ColorPostProcessMode</li> 
         <li>pdftron.PDF.PDFRasterizer.SetColorPostProcessMode</li> 
         <li>pdftron.PDF.PDFRasterizer.GetColorPostProcessMode</li> 
         <li>pdftron.PDFNet.FlateCompressionLevel</li> 
         <li>pdftron.PDFNet.SetDefaultFlateCompressionLevel</li> 
         <li>pdftron.PDF.PDFDraw.SetColorPostProcessMode</li> 
         <li>pdftron.PDF.Convert.TiffOutputOptions</li> 
         <li>pdftron.PDF.Convert.ToTiff</li> 
         <li>pdftron.PDF.Convert.SVGOutputOptions.SetFlattenDPI</li> 
         <li>pdftron.PDF.Convert.SVGOutputOptions.SetFlattenMaximumImagePixels</li> 
        </ul> 
        <p><strong><em>Chaged Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.Print.StartPrintJob</li> 
         <li>pdftron.PDF.PDFRasterizer.SetImageSmoothing</li> 
         <li>pdftron.PDF.PDFDoc.ExtractFlag</li> 
         <li>pdftron.PDF.PDFDraw.SetImageSmoothing</li> 
         <li>pdftron.PDF.Font.CreateCIDTrueTypeFont</li> 
         <li>pdftron.PDF.PDFA.PDFACompliance.ErrorCode</li> 
        </ul> 
       </dd>  
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">March 12, 2014 - Version 6.2.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <ul class="bullets"> 
         <li>PDFDoc and SDFDoc can now incrementally save to Filter and memory outputs.</li> 
         <li>Improved PDF/A validation and conversion.</li> 
         <li>Persistent thumbnail disk caching and embedded thumbnail support in viewers (via SetupThumbnails() ).</li> 
         <li>New SetJPGQuality setting for PDF2XOD, PDF2HTML, PDF2EPUB and PDF Flattener. This allows for finer grained control over compression quality of JPG images.</li> 
         <li>Important bug fixes and incremental improvements.</li> 
        </ul> 
        <p><strong><em>WinRT (PDFNet for Windows Store apps) Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Improved rendering quality on high resolution devices.</li> 
         <li>A new sample app called CompleReader which showcases a full featured PDF viewer.</li> 
         <li>A set of new controls are now part of the Tools, in the pdftron.PDF.Tools.Controls namespace. These can be all be viewed from the Controls button on the left side of the top AppBar in the PDFViewCtrlDemo app. The source code for these controls are public and can be customized as required. The controls include: <br> 
          <ul> 
           <li>An AnnotationList showing all annotations in a click-able list.</li> 
           <li>An AnnotationToolbar for working with the various annotation creation tools.</li> 
           <li>An outline (bookmarks view) of the document with click-able links.</li> 
           <li>A ThumbnailSlider which lets you quickly find the page your are looking for.</li> 
           <li>A TextHighlighter control that highlight every occurrence of a text string in the PDFViewCtrl.</li> 
          </ul></li> 
         <li>A signature tool is now included that can add a signature anywhere to a page. Signatures can also be saved for future use.</li> 
         <li>New Filter classes which simplifies I/O operations with PDFNet. These new Filter classes wrap commonly used WinRT streams like InputStream and IRandomAccessStream so it is now possible to work with all of PDFNet I/O operations in WinRT.</li> 
         <li>A new RecentlyUsedCache is added. It works with the PDFViewCtrl to keep a thumbnail of page 1 of any opened document up to date.</li> 
         <li>New PDFNetException class which allows more descriptive error messages(see Getting Started).</li> 
         <li>Fix for printing documents with highlight annotations.</li> 
         <li>Fix for the ScrollBar offset inside the PDFViewCtrl.</li> 
         <li>Saving a document has changed so that a read lock is acquired by the save function. You should no longer lock around any call to SaveAsync.</li> 
         <li>New APIs. Please see documentation for details: 
          <ul> 
           <li>pdftron.PDFNet.SetPersistentCachePath</li> 
           <li>pdftron.Common.PDFNetException</li> 
           <li>pdftron.Common.RecentlyUsedCache</li> 
           <li>pdftron.FDF.FDFDoc.CreateFromXFDFAsync</li> 
           <li>pdftron.FDF.FDFDoc.SaveAsync</li> 
           <li>pdftron.FDF.FDFDoc.SaveAsXFDFAsync</li> 
           <li>pdftron.Filters.InputStreamFilter</li> 
           <li>pdftron.Filters.OutputStreamFilter</li> 
           <li>pdftron.Filters.ProgressFilter</li> 
           <li>pdftron.Filters.RandomAccessStreamFilter</li> 
           <li>pdftron.PDF.Convert.ToXodAsync</li> 
           <li>pdftron.PDF.Convert.ToXpsAsync</li> 
           <li>pdftron.PDF.PDFDraw.ExportAsync</li> 
          </ul></li> 
         <li>Changed APIs: 
          <ul> 
           <li>pdftron.FDF.FDFDoc.FDFDoc</li> 
           <li>pdftron.PDF.PDFDoc.PDFDoc</li> 
           <li>pdftron.SDF.SDFDoc.SDFDoc</li> 
           <li>pdftron.PDF.PDFViewCtrl.SetupThumbnails</li> 
          </ul></li> 
        </ul> 
        <p><strong><em>iOS Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>PDFNet is compiled with XCode 5.1, and XCode 5.1 must be used to compile a project that uses PDFNet. The use of the new compiler resolves a problem that would cause a crash when using the simulator or decoding certain corrupt JPEG2000 images. </li> 
         <li>PDFNet now ships as a Framework, which is a bundle that contains the static library and its header files. Existing projects will need to be update their import directives from for example #import "PDFViewCtrl.h" to #import 
          <pdfnet pdfviewctrl.h></pdfnet></li> 
         <li>PDFNet now links against libc++ (the LLVM version of the C++ standard library). In your project's target settings please change C++ Standard Library setting to libc++.</li> 
         <li>Support for arm64 and x86_64.</li> 
         <li>A set of new controls has been added to the tools library. The source code for these controls are public and can be customized as required. The controls include: 
          <ul> 
           <li>AnnotationViewController showing all annotations in a click-able list.</li> 
           <li>AnnotationToolbar for working with the various annotation creation tools.</li> 
           <li>OutlineViewController that displays a document's outline (bookmarks) for document navigation.</li> 
           <li>ThumbnailSliderViewController that displays a page's thumbnail above the slider.</li> 
          </ul></li> 
         <li>A new sample app "Complete Reader" that showcases a full featured PDF reader, incorporating all of the controls above.</li> 
         <li>A new DigitalSignatureTool mode that can add a signature anywhere to a page. Signatures can be saved for future use.</li> 
         <li>A new RecentlyUsedCache is added. It works with the PDFViewCtrl to keep a thumbnail of page 1 of any opened document up to date.</li> 
         <li>The way a tool from the tools library is connected to a PDFViewCtrl has been changed. Instead of the PDFViewCtrl switching tools, a new tools library ToolManager class is responsible. More details can be found here: <a href="http://blog.pdftron.com/2014/03/13/ios-tools-v-6-2/" target="_blank">http://blog.pdftron.com/2014/03/13/ios-tools-v-6-2/</a></li> 
         <li>Reorganized the packages to exclude the use of workspaces (these were causing confusion). The Tools library once again comes pre-compiled in the /Lib folder, and its source code is in /Lib/src/PDFViewCtrlTools</li> 
         <li>New APIs: 
          <ul> 
           <li>PathData -(int)GetGlyphIndex</li> 
           <li>PDFNet +(void)SetTempPath:(NSString*)temp_path;</li> 
           <li>PDFNet +(void)SetPersistentCachePath:(NSString*)persistent_path;</li> 
           <li>PDFViewCtrl - (void)SetupThumbnails: (BOOL)use_embedded generate_at_runtime: (BOOL)generate_at_runtime use_disk_cache: (BOOL)use_disk_cache thumb_max_side_length: (int)thumb_max_side_length max_abs_cache_size: (unsigned long)max_abs_cache_size max_perc_cache_size: (double)max_perc_cache_size;</li> 
          </ul></li> 
         <li>Bug fixes.</li> 
        </ul> 
        <p><strong><em>Android Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>A new sample app called CompleReader which showcases a full featured PDF viewer.</li> 
         <li>A set of new controls are now part of the Tools, in the pdftron.PDF.Controls package. The source code for these controls are public and can be customized as required. The controls include: 
          <ul> 
           <li>An AnnotationDialogFragment showing all annotations in a click-able list.</li> 
           <li>An AnnotationToolbar for working with the various annotation creation tools.</li> 
           <li>An OutlineDialogFragment showing the outlines (bookmarks view) of the document with click-able links.</li> 
           <li>A ThumbnailSlider which lets you quickly find the page your are looking for.</li> 
          </ul></li> 
         <li>A signature tool is now included that can add a signature anywhere to a page. Signatures can also be saved for future use.</li> 
         <li>A new RecentlyUsedCache class is added. It works with the PDFViewCtrl to keep a thumbnail of page 1 of any opened document up to date.</li> 
         <li>A new Print utility class that can be used to start print jobs (only available for Android 4.4 or higher)</li> 
         <li>The samples also now include gradle build scripts so it is easy to open and run the projects in Android Studio. The Tools library is kept in the samples folder to make it easier to run the samples and do quick experiments.</li> 
         <li>The PDFViewCtrl.Tool interface was removed and its events were added to the PDFViewCtrl.ToolManager interface. This change gives users more control over the events triggered by PDFViewCtrl. Check the ToolManager implementation for more details.</li> 
         <li>New APIs. Please see documentation for details: 
          <ul> 
           <li>pdftron.Common.RecentlyUsedCache</li> 
           <li>PDFViewCtrl.openURL() now supports HTTPS</li> 
           <li>PDFViewCtrl.getThumbAsync()</li> 
           <li>PDFViewCtrl.cancelAllThumbRequests()</li> 
           <li>PDFViewCtrl.ThumbAsyncListener</li> 
           <li>pdftron.PDF.Print</li> 
          </ul></li> 
         <li>Changed APIs: 
          <ul> 
           <li>PDFNet.setPersistentTempPath() replaced by PDFNet.setPersistentCachePath()</li> 
           <li>PDFNet.setTempPath()</li> 
           <li>PDFViewCtrl.setupThumbnails()</li> 
           <li>PDFViewCtrl.setDoc() now throws PDFNetException</li> 
           <li>PDFViewCtrl.Tool interface was removed</li> 
           <li>PDFViewCtrl.ToolManager</li> 
          </ul></li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.Common.RecentlyUsedCache</li> 
         <li>pdftron.PDFNet.SetPersistentCachePath</li> 
         <li>pdftron.PDF.Convert.XODOutputOptions.SetJPGQuality</li> 
         <li>pdftron.PDF.Convert.SVGOutputOptions.SetJPGQuality</li> 
         <li>pdftron.PDF.Flattener.SetJPGQuality</li> 
         <li>pdftron.PDF.PDFView.ClearThumbCache</li> 
         <li>pdftron.PDF.PDFView.GetThumbInCacheSize</li> 
         <li>pdftron.PDF.PDFView.GetThumbInCache</li> 
         <li>pdftron.PDF.PDFView.CancelAllThumbRequests</li> 
         <li>pdftron.PDF.PDFViewCtrl.ClearThumbCache</li> 
         <li>pdftron.PDF.PDFViewCtrl.CancelAllThumbRequests</li> 
        </ul> 
        <p><strong><em>Chaged Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDFNet.SetTempPath</li> 
         <li>pdftron.PDF.PDFView.SetupThumbnails</li> 
         <li>pdftron.PDF.PDFViewCtrl.SetupThumbnails</li> 
        </ul> 
        <p><strong><em>Other Changes</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Documents converted to XOD will have improved support for form actions when viewed in WebViewer 1.7 and above. Note that text selection and links in newly converted XOD documents will not work with WebViewer versions below 1.7.</li> 
         <li>Importing links from XFDF is currently not supported.</li> 
        </ul> 
       </dd>  
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">November 15, 2013 - Version 6.1.0 </span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <ul class="bullets"> 
         <li>Significant improvements to rendering performance for image heavy documents. The rendering pipeline now uses SIMD processing and multithreaded execution to speed up image loading and rendering.</li> 
         <li>Includes source-code for annotations and other tools. The availability of source code (with WPF, iOS, Android, WinRT, WP8 SDK) allows for customizations and fine grained control to every aspect of user experience that was previously not possible. The code can also be used as a template to build new tools.</li> 
         <li>Additional annotation tools in iOS, Android, WinRT.
          <ul>
           <li>Support for multimedia/video annotations (i.e. RichMedia). For more information, please see our <a href="http://blog.pdftron.com/2013/09/11/working-with-pdf-richmedia-annotations/" target="_blank">blog</a>.</li>
           <li>A new sample annotation tool showing how to apply a digital signature to a signature field.</li>
          </ul></li> 
         <li>PDF to HTML converter can now produce lightweight HTML output that loads faster and allows for better text search/selection. The option can be enabled using 'SimplifyText' in HTMLOutputOptions. For more info, please 'PDF to HTML conversion' in our <a href="http://blog.pdftron.com" target="_blank">blog</a>.</li> 
         <li>Simplified document signing with built-in SignatureHandler. By using <span class="codespan">PDFDoc.AddStdSignatureHandler</span>, it is now possible to sign PDF documents without depending on third party cryptographic libraries. See <span class="codespan">DigitalSignaturesTest</span> for example how to sign PDF documents with or without third party cryptographic libraries.</li> 
         <li>Improved PDF/A validation and conversion.</li> 
         <li>Ability to include custom headers when streaming and viewing a PDF document via PDFVIewCtrl.OpenUrlAsync().</li> 
         <li><span class="codespan">ContentReplacer</span> can search and replace strings on a PDF page with user defined patterns.</li> 
         <li>Important bug fixes and incremental improvements.</li> 
        </ul> 
        <p><strong><em>.NET/WPF Specific</em>:</strong></p> 
        <ul class="bullets" type="disc"> 
         <li>Significant improvements to WPF PDF Viewer speed and overall feature set.</li> 
         <li>Support for touch screen.</li> 
         <li>A new and simplified method to extend and customize the control.</li> 
         <li>New annotation tools source code.</li> 
        </ul> 
        <p><strong><em>WinRT (PDFNet for Windows Store apps) Specific</em>:</strong></p> 
        <ul class="bullets" type="disc"> 
         <li>Support for Windows 8.1.</li> 
         <li>Tools source code is now included as part of the standard distribution. The PDFViewCtrlDemo sample project references the PDFViewCtrlTools project directly in the sample solution.</li> 
         <li>Smoother Zooming</li> 
         <li> New PDFViewCtrl APIs. Please see documentation for details: 
          <ul> 
           <li>GetVisiblePages()</li> 
           <li>GetLinkAt(int x, int y)</li> 
           <li>SetOverprint(PDFRasterizerOverprintPreviewMode op)</li> 
           <li>SetZoom(int x, int y, double zoom)</li> 
           <li>ShowRect(int pageNumber, Rect rect)</li> 
           <li>Select(PDFViewCtrlSelection selection)</li> 
           <li>GetFindTextProgress()</li> 
          </ul> </li> 
        </ul> 
        <p><strong><em>iOS Specific</em>:</strong></p> 
        <ul class="bullets" type="disc"> 
         <li>Support for new architectures arm64 and x86_64 (in addition to armv7, armv7s and i386). Also includes an additional copy of libPDFNet.a that only includes armv7, armv7s and i386, but is compatible with Xcode 4.6.3.</li> 
         <li>Now uses an external resource file which reduces the final app size by 2.9 MB per included architecture after the first. For an app that is compiled for armv7, armv7s and arm64 this will save 5.8 MB. <b>To initialize PDFNet, you must now call [PDFNetInitialize@""]; [PDFNet SetResourcePath:resourcePath];. Plase see the readme for details.</b></li> 
         <li>Tools source code is now included as part of the standard distribution. The PDFViewCtrlDemo sample project should now be run from the workspace "PDFViewCtrlDemo with Tools" which combines the PDFViewCtrlDemo and Tools projects into a single workspace for development convenience.</li> 
         <li>Tools source code has been converted to Automatic Reference Counting (ARC).</li> 
         <li>Two new built-in tools, one for applying a digital signature to a signature field, and the other to play rich media annotations (videos) in place. (Rich media annotations requires AVFoundation and MediaPlayer frameworks.</li> 
         <li>Freehand ink annotations are now automatically smoothed (rather than using straight line segments), and the FreehandCreate tools has built-in support for creating multistroke ink annotations.</li> 
         <li>The built-in tools now use a new easy-to-use color picker.</li> 
         <li>Includes a new sample project that will run the sample code included on our website at http://www.pdftron.com/pdfnet/samplecode.html</li> 
         <li>Ability to include custom headers when downloading a document using OpenUrlAsync:</li> 
         <li>Samples have been visually adjusted for iOS 7 and are all compatible with the iPhone.</li> 
         <li> New PDFViewCtrl APIs. Please see documentation for details: 
          <ul> 
           <li>OpenUrlAsync:WithPDFPassword:WithCacheFile:WithOptions:</li> 
           <li>SelectWithSelection:</li> 
           <li>Update:</li> 
           <li>zoomToRect:animated:</li> 
           <li> GetVisiblePages</li> 
           <li>CancelFindText</li> 
           <li> GetLinkAt:y:</li> 
           <li>SetViewerCache:max_cache_size:on_disk:</li> 
           <li>keyboardWillShow:rectToNotOverlapWith:</li> 
           <li> keyboardWillHide:</li> 
           <li>zoomScale</li> 
           <li>SetRightToLeftLanguage:</li> 
           <li>GetRightToLeftLanguage</li> 
           <li>onRendereFinished (delegate method)</li> 
          </ul> </li> 
         <li> Changed PDFViewCtrl APIs. 
          <ul> 
           <li>SetProgressiveRenderingInterval: replaced by SetProgressiveRendering:withInitialDelay:withInterval: </li> 
           <li>SetZoomMinimum:Maxiumum:Mode: replaced by SetZoomLimits:Minimum:Maxiumum: </li> 
           <li>SetContentBufferSize: replaced by SetRenderedContentBufferSize</li> 
           <li>PurgeCachedMemory replaced by PurgeMemory</li> 
           <li>OpenUrl:WithPDFPassword: replaced by OpenUrlAsync:WithPDFPassword: </li> 
           <li>OpenUrl:WithPDFPassword:WithCacheFile: replaced by OpenUrlAsync:WithPDFPassword:WithCacheFile: </li> 
           <li>SetThinLineAdjustmentPixelGrid:StrokeAdjust: replaced by SetThinLineAdjustment:StrokeAdjust:</li> 
           <li>SetContentBufferSize: replaced by SetRenderedContentBufferSize: </li> 
          </ul> </li> 
         <li> Removed PDFViewCtrl APIs. 
          <ul> 
           <li>SelectWithTextSelect:y1:x2:y2:;</li> 
           <li>SelectWithStructure:y1:page1:x2:y2:page2:</li> 
           <li>SetAnnotationEditingEnabled: (can control this by modifying the tools source code)</li> 
           <li>AnnotationEditingEnabled (can control this by modifying the tools source code)</li> 
           <li>LinkActivationEnabled (can control this by modifying the tools source code)</li> 
          </ul> </li> 
         <li>Numerous bug fixes and stability improvements.</li> 
        </ul> 
        <p><strong><em>Android Specific</em>:</strong></p> 
        <ul class="bullets" type="disc"> 
         <li>Tools source code is now included as part of the standard distribution. The PDFViewCtrlDemo sample references the PDFViewCtrlTools project as an Android library.</li> 
         <li>New "MiscellaneousSamples" project that runs common cross-platfrom samples (http://www.pdftron.com/pdfnet/samplecode.html).</li> 
         <li> New PDFViewCtrl APIs (please see documentation for more information): 
          <ul> 
           <li>Tool.onScrollChanged</li> 
           <li>Tool.onConfigurationChanged</li> 
           <li>getOCGContext</li> 
           <li>setOCGContext</li> 
           <li>setTextSearchListener</li> 
           <li>HTTPRequestOptions</li> 
           <li>getDeviceTransform</li> 
           <li>getPageCount</li> 
           <li>getVisiblePages</li> 
           <li>setPageTransparencyGrid</li> 
          </ul> </li> 
         <li> Changed PDFViewCtrl APIs: 
          <ul> 
           <li>PDFViewCtrl.openURL</li> 
           <li>convClientPtToCanvasPt replaced by convScreenPtToCanvasPt</li> 
           <li>convClientPtToPagePt replaced by convScreenPtToPagePt</li> 
           <li>convCanvasPtToClientPt replaced by convCanvasPtToScreenPt</li> 
           <li>convPagePtToClientPt replaced by convPagePtToScreenPt</li> 
           <li>getPageNumberFromClientPt replaced by getPageNumberFromScreenPt</li> 
           <li>selectByHighlights replaced by selectWithHighlights</li> 
           <li>selectBySelection replaced by selectWithSelection</li> 
           <li>LinkInfo.getX1 replaced by LinkInfo.getRect</li> 
           <li>findText</li> 
           <li>setViewerCache</li> 
          </ul> </li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets" type="disc"> 
         <li>Link.GetNormalizedUrl</li> 
         <li>PDFACompliance.e_PDFA0_1_0 <strong>enum</strong></li> 
         <li>PDFACompliance.e_PDFA8_1 <strong>enum</strong></li> 
         <li>PDFACompliance.e_PDFA_3E1 <strong>enum</strong></li> 
         <li>PDFACompliance.e_PDFA_3E2 <strong>enum</strong></li> 
         <li>PDFACompliance.e_PDFA_3E3 <strong>enum</strong></li> 
         <li>Convert.FlattenThresholdFlag <strong>enum</strong></li> 
         <li>Convert.FlattenFlag <strong>enum</strong></li> 
         <li>Convert.HTMLOutputOptions.SetExternalLinks</li> 
         <li>Convert.HTMLOutputOptions.SetInternalLinks</li> 
         <li>Convert.HTMLOutputOptions.SetSimplifyText</li> 
         <li>Convert.SVGOutputOptions.SetSvgFonts</li> 
         <li>Convert.SVGOutputOptions.SetEmbedFonts</li> 
         <li>Convert.SVGOutputOptions.SetFlattenContent</li> 
         <li>Convert.SVGOutputOptions.SetFlattenThreshold</li> 
         <li>Convert.SVGOutputOptions.SetCompress</li> 
         <li>Convert.SVGOutputOptions.SetOutputThumbnails</li> 
         <li>Convert.SVGOutputOptions.SetThumbnailSize</li> 
         <li>Convert.SVGOutputOptions.SetCreateXmlWrapper</li> 
         <li>Convert.SVGOutputOptions.SetDtd</li> 
         <li>Convert.SVGOutputOptions.SetAnnots</li> 
         <li>ContentReplacer.SetMatchStrings()</li> 
         <li>PDFDoc.AddStdSignatureHandler(keyfile, keypass)</li> 
         <li>PDFDoc.AddStdSignatureHandler(keybuffer, keypass)</li> 
         <li>PDFViewCtrl.GetVisiblePages</li> 
         <li>Flattener.SetPathHinting</li> 
         <li>Flattener.Process(page, flatten_mode)</li> 
        </ul> 
        <p><strong><em>Other Changes</em></strong>:</p> 
        <ul type="disc"> 
         <li>----</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">June 25, 2013 - Version 6.0.0 </span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <ul class="bullets"> 
         <li>Faster interactive PDF rendering. Performance improvements are especially noticeable when zooming and panning complex documents: blue-prints, CAD drawings, and large pre-press files.</li> 
         <li>Support for per document multithreading. Previously PDFNet supported concurrent access to multiple documents; however as of V6 multiple threads can access the same document. For example, one could use PDFDraw to distribute rendering of PDF pages from a single document across many cores rather than processing them in a serial fashion.</li> 
         <li>High-quality PDF to HTML and PDF to EPUB conversion (pdftron.PDF.Convert.ToHtml() and pdftron.PDF.Convert.ToEpub()). If you are looking for a command-line utility, the same functionality is available as part of DocPub CLI.<br><br> 
          <table style="width:100%;text-align:center">
           <tbody>
            <tr>
             <td> <a href="http://www.pdftron.com/pdfnet/pdf2html/demo.html" target="_blank"> <img style="border:none" src="assets/images/support/pdftron_pdf2html.png" alt="PDFTron PDF to HTML Converter"><br> Fig: PDF to HTML Conversion Samples</a></td> 
            </tr>
           </tbody>
          </table><br> </li> 
         <li>PDF Flattener ('pdftron.PDF.Flattener') is a new optional add-on that can be used to optimize PDF for fast viewing on mobile devices. Flattener can simplify page content (e.g. flattening complex graphics into images) while maintaining vector text whenever possible. For an example of how to use Flattener, please take a look at the second code example in the updated Optimizer sample project. Flattener is licensable on an OEM basis. If you are looking for a command-line utility, the same functionality is available as part of DocPub CLI.</li> 
         <li>Improved export &amp; import of annotations and forms via XFDF/FDF. Besides support for new annotation types and properties, users can now load and save XFDF from a string. For an example, please see the updated <a href="http://www.pdftron.com/pdfnet/samplecode/FDFTest.cs" target="_blank">FDF sample project</a>. </li> 
         <li>PDFViewCtrl can now download remote PDF documents asynchronously using OpenURLAsync(). If PDF documents are linearized, pages can be downloaded and viewed in random access order - without the need to download the entire document. For an example of how to use OpenURLAsync(), please see updated PDFViewWPF/PDFView sample in .NET and PDFViewSimple in C++ SDK.</li> 
         <li>PDFViewCtrl and PDFView can now search for text asynchronously using FindTextAsync () without blocking the UI.</li> 
         <li>PDFViewCtrl can now automatically recognize URL links and email addresses without presence of explicit link annotations. For more info, please see PDFViewCtrl.SetUrlExtraction() and GetLinkAt().</li> 
         <li>Smart Zoom. The new option in PDFViewCtrl allows user to automatically zoom on a selected piece of content. The feature is especially useful in apps targeting hand-held devices (e.g. Double-tap on a column of text, and PDFViewCtrl will zoom and fit the column making maximum use of your screen and avoiding unnecessary zooming via pinching).</li> 
         <li>ElementEdit sample was rewritten to show how to edit arbitrary PDF files.</li> 
         <li>'GettingStarted.html' was added to help developers get started with the library and to answer frequently asked questions related to PDFNet integration and deployment.</li> 
         <li>Support for Visual Studio 2012. PDFNet SDK now offers samples which can be opened and compiled using Visual Studio 2012.</li> 
         <li>Numerous bug fixes and incremental improvements.</li> 
        </ul> 
        <p><strong><em>.NET Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Support for .NET Framework 4.5 (as part of PDFNetDotNet4.zip and PDFNet64DotNet4.zip).</li> 
         <li>Support for .NET Framework 1.x is deprecated. Assembly in the official 'PDFNet.zip' will target .NET Framework 2.0 - 3.5.</li> 
         <li>New annotation and forms tools for WPF control. Following the same pattern used in PDFNet mobile SDKs, annotation functionality was split into a separate assembly (Tools.dll). All licensed PDFNet users who are using WPF control will receive source code for the new assembly. With source code access, PDFNet developers have unprecedented flexibility to customize every aspect of the user experience and to support behaviors/functionality that otherwise wouldn't be feasible. As an example of 'WPF tools in action', please take a look at the updated <a href="http://www.pdftron.com/pdfnet/samplecode/PDFViewWPFSimple.cs" target="_blank">PDFViewWPF sample project</a>.</li> 
        </ul> 
        <p><strong><em>WinRT (PDFNet for Windows Store apps) Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Printing support. It is now possible to use a simple API to print any PDF Document on WinRT via an efficient vector print path. Besides standard Windows print options, the API supports many pre-defined and custom print options. See documentation for PDFPrintManager for details.</li> 
         <li>VSIX Installer. PDFNet for Windows Store Apps is now distributed with a VSIX package. This makes it easier to include to projects because you can now include it only once and use it for every platform. Once installed, it can be found in the Reference manager as "PDFNet for Windows Store apps" under 'Windows &gt; Extensions'.</li> 
         <li>Better hit testing for annotations.</li> 
         <li>Improved line editing tool. When editing line annotations, you now get two end points that you can drag anywhere on the page, allowing free rotation and sizing of the line.</li> 
        </ul> 
        <p><strong><em>iOS Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>PDFNet for iOS now includes Objective-C documentation in both HTML format (available as part of the download and on our website) and as a .docset which can be used to provide QuickHelp documentation in XCode.</li> 
         <li>Improved scrolling smoothness.</li> 
         <li>Included sample project includes new bookmark navigation control, a page slider for fast navigation between pages in large documents, a goto page popup and improved aesthetics.</li> 
         <li>Better hit testing for annotations.</li> 
         <li>Improved line editing tool. When editing line annotations, you now get two end points that you can drag anywhere on the page, allowing free rotation and sizing of the line.</li> 
        </ul> 
        <p><strong><em>Android Specific</em>:</strong></p> 
        <ul class="bullets"> 
         <li>PDFNet is now available in a new standard feature reduced variant (a.k.a. 'lean'). The lean library offers the same viewing, annotation, and editing capabilities of the fully featured library however it is half the size (6MB!). The parts that are missing are relatively rarely used components (such as Redaction, ContentReplacer, Optimizer, Flattener, and Converters).</li> 
         <li>Better hit testing for annotations.</li> 
         <li>Improved line editing tool. When editing line annotations, you now get two end points that you can drag anywhere on the page, allowing free rotation and sizing of the line.</li> 
        </ul> 
        <p><strong><em>PDFNet WebViewer Publisher (ToXod()) Add-On</em>:</strong></p> 
        <ul class="bullets"> 
         <li>Annotations are now embedded as standard XFDF during PDF to XOD conversion.</li> 
         <li>XFDF annotations can be dynamically parsed and serialized in both HTML5 and Silverlight clients.</li> 
         <li>WebViewer was updated to v1.5, in-sync with PDFNet V6. The version includes <a href="http://www.pdftron.com/webviewer" target="_blank">many new features and improvements.</a></li> 
         <li>ToXod() conversion includes a number of extra options that can be used to fine tune conversion. For details please see, <a href="http://www.pdftron.com/pdfnet/PDFNetAPIRef/html/T_pdftron_PDF_Convert_XODOutputOptions_FlattenFlag.htm" target="_blank">'Convert.XODOutputOptions.FlattenFlag'.</a></li> 
         <li>Many conversion defaults were changed (e.g. thumbnail size was increased to 400 pixels; all images are capped at 2 mega pixels, default dpi was increased to 150, complex vector art will be flattened, thin lines are now thickened). If your app is using WebViewer, please make sure to review all conversion options before upgrading to V6.</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>UString FDFDoc.SaveAsXFDF</li> 
         <li>ElementReader.AppendResource</li> 
         <li>Field.GetOptCount</li> 
         <li>Field.GetOpt</li> 
         <li>PDF.Flattener <strong>class</strong></li> 
         <li>PDF.LinkInfo <strong>class</strong></li> 
         <li>PDFDoc.LockRead</li> 
         <li>PDFDoc.UnlockRead</li> 
         <li>PDFDoc.TryLockRead</li> 
         <li>PDFDoc.TimedLockRead</li> 
         <li>PDFNet.CloudErrorCode <strong>enum</strong></li> 
         <li>PDFNet.ConnectToCloud</li> 
         <li>PDFNet.SetViewerCache</li> 
         <li>PDFRasterizer.DownloadedType <strong>enum</strong></li> 
         <li>PDFRasterizer.DownloadReportHandler</li> 
         <li>PDFView.SetUrlExtraction</li> 
         <li>PDFView.GetLinkAt</li> 
         <li>PDFView.SetViewerCache</li> 
         <li>PDFView.SetPageRefViewMode</li> 
         <li>PDFView.GetPageRefViewMode</li> 
         <li>PDFView.SetupThumbnails</li> 
         <li>PDFView.ThumbAsyncHandler</li> 
         <li>PDFView.GetThumbAsync</li> 
         <li>PDFView.FindTextAsyncHandler</li> 
         <li>PDFView.SetFindTextHandler</li> 
         <li>PDFView.FindTextAsync</li> 
         <li>PDFView.SmartZoom</li> 
         <li>PDFViewCtrl.SmartZoom</li> 
         <li>PDFViewCtrl.SetUrlExtraction</li> 
         <li>PDFViewCtrl.GetLinkAt</li> 
         <li>PDFViewCtrl.Select</li> 
         <li>PDFViewCtrl.SetDownloadReportHandler</li> 
         <li>PDFViewCtrl.OpenURLAsync</li> 
         <li>PDFViewCtrl.SetupThumbnails</li> 
         <li>PDFViewCtrl.ThumbAsyncHandler</li> 
         <li>PDFViewCtrl.GetThumbAsync</li> 
         <li>PDFViewCtrl.FindTextAsyncHandler</li> 
         <li>PDFViewCtrl.SetFindTextHandler</li> 
         <li>PDFViewCtrl.FindTextAsync</li> 
         <li>Obj.IsValid</li> 
         <li>SDFDoc.LockRead</li> 
         <li>SDFDoc.UnlockRead</li> 
         <li>SDFDoc.TryLockRead</li> 
         <li>SDFDoc.TimedLockRead</li> 
        </ul> 
        <p><strong><em>New Types and Methods in WebPublisher</em></strong><em><strong> Add-On</strong></em>:</p> 
        <ul class="bullets"> 
         <li>Convert.XPSOutputCommonOptions.GenerateURLLinks</li> 
         <li>Convert.XPSOutputCommonOptions.OverprintPreviewMode <strong>enum</strong></li> 
         <li>Convert.XPSOutputCommonOptions.SetOverprint</li> 
         <li>Convert.XODOutputOptions.FlattenThresholdFlag <strong>enum</strong></li> 
         <li>Convert.XODOutputOptions.FlattenFlag <strong>enum</strong></li> 
         <li>Convert.XODOutputOptions.AnnotationOutputFlag <strong>enum</strong></li> 
         <li>Convert.XODOutputOptions.SetFlattenThreshold</li> 
         <li>Convert.XODOutputOptions.SetAnnotationOutput</li> 
         <li>Convert.XODOutputOptions.SetExternalParts</li> 
         <li>Convert.XODOutputOptions.SetEncryptPassword</li> 
         <li>Convert.XODOutputOptions.HTMLOutputOptions <strong>class</strong></li> 
         <li>Convert.XODOutputOptions.EPUBOutputOptions <strong>class</strong></li> 
         <li>Convert.ToHtml</li> 
         <li>Convert.ToEpub</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">November 8, 2012 - Version 5.9.0 </span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <ul class="bullets"> 
         <li>New Digital Signature API is now available on all supported platforms (Windows, Mac, Linux, Android, iOS, WinRT) and across languages (C++/C, Java, .NET, Python, Objective-C, Ruby, PHP, etc.). With the help of the new API, PDF files can be digitally signed and certified with minimum coding and maximum flexibility. PDFNet can be quickly integrated with most popular security APIs. To get started with the Digital Signature API, please see the new <a target="_blank" href="http://www.pdftron.com/pdfnet/samplecode.html#Sig">DigitalSignaturesTest</a> sample.</li> 
         <li>AES 256: Includes support for 2 unpublished algorithms plus&nbsp;support for the official upcoming PDF 2.0 versions of AES 256. </li> 
         <li>PDFViewCtrl.OpenURL(&#x2026;)&nbsp; can now incrementally download remote documents. If documents are linearized, pages can be downloaded and viewed in random access order &#x2013; without need to download the entire document. A viewing session can also be persisted across multiple viewing/application sessions to remove redundant downloads and improve overall performance.</li> 
         <li>New options to extract PDF annotations as XFDF/FDF and to merge existing an XFDF/FDF with a PDF. PDFNet can now selectively import and export markup, forms, or a combination of the two. For an example of how to use the new API, please see the updated <a target="_blank" href="http://www.pdftron.com/pdfnet/samplecode.html#FDF">FDF sample</a> project.</li> 
         <li>Improved font substitution on Android, iOS, Mac OS X, and Linux. On Linux, PDFNet can now work with fontconfig out-of-the-box.</li> 
         <li>Improved font subsetting: PDFNet can now subset TrueType, OpenType, CFF, Type1, and MMaster. Previously only TrueType was supported.</li> 
         <li>New option to add text via glyph indices (GIDs).</li> 
         <li>Improved PDF serialization produces smaller files.</li> 
         <li>PDF/A Validator and Converter now include support for PDF/A-2 and PDF/A-3. To get started, please see the updated <a target="_blank" href="http://www.pdftron.com/pdfnet/samplecode.html#PDFA">PDF/A sample</a> project.</li> 
         <li>Improved Python bindings: Support for different Python variants (including 2 and 4 byte Unicode Linux variants).</li> 
         <li>Support for .NET Framework 4.5</li> 
         <li>Minor improvements and bug fixes throughout the library.</li> 
        </ul> 
        <p><strong>Changes in the PDFNet WebViewer Publisher Add-On</strong>:</p> 
        <ul class="bullets"> 
         <li>The WebViewer now includes Flash support which can be used as a fallback on browsers that are missing HTML5 support. For an example of the Flash WebViewer in action, please refer to the online demo.</li> 
         <li>The WebViewer-HTML5 client now comes with built-in markup and collaboration support. The new annotation APIs can be used to develop custom annotation and to integrate the viewer with any backend system.</li> 
         <li>WebViewer-HTML5 mobile client is revamped to provide optimal efficiency and great viewing experience even on complex documents.</li> 
         <li>'pdftron.PDF.Convert.ToXod()' includes new options that can be used to tune documents for smooth and optimal viewing experience across browsers, platforms, and devices.</li> 
        </ul> 
        <p><strong>New <a href="http://www.pdftron.com/pdfnet/mobile/windows8_winrt_pdf_library.html">PDFNet SDK for WinRT/Metro/Windows 8-style UI</a>:</strong>:</p> 
        <ul class="bullets"> 
         <li>PDFNet SDK is now available as a <a href="http://www.pdftron.com/pdfnet/mobile/windows8_winrt_pdf_library.html">WinRT component</a> suitable for development of modern Windows 8 apps.</li> 
         <li>PDFNet SDK for WinRT enables developers to significantly reduce their time-to-market while delivering top-notch PDF processing with amazingly fast and optimized rendering.</li> 
         <li> The SDK contains a set of <a href="http://www.pdftron.com/pdfnet/mobile/PDFWinRTDoc/Index.html">application programming interfaces</a> (APIs), <a href="http://www.pdftron.com/pdfnet/samplecode.html">sample code</a>, comprehensive documentation, and source code (with source code license).</li> 
         <li>Besides an industry leading PDF viewer, the SDK comes with built-in support for text search/selection, links, bookmarks, interactive forms, and annotations (text highlight, underline, strikeout, squiggly, line, rectangle, ellipse, arrow, sticky note, free-text, and free-hand tool).</li> 
        </ul> 
        <div align="center"> 
         <a target="_blank" href="http://www.pdftron.com/pdfnet/mobile/images/PDFLibraryForWinRTMetro.png"><img src="http://www.pdftron.com/pdfnet/mobile/images/PDFLibraryForWinRTMetro.png" alt="PDFNet Component for WinRT" style="padding:20px"></a>
        </div> 
        <p><strong><em>New Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li> SDF.SignatureHandler <strong>class</strong></li> 
         <li>PDFDoc.HasSignatures()</li> 
         <li>PDFDoc.AddSignatureHandler()</li> 
         <li>PDFDoc.RemoveSignatureHandler()</li> 
         <li>PDFDoc.GetSignatureHandler()</li> 
         <li>PDFDoc.Save(Filter/Stream, &#x2026;)</li> 
         <li>PDFDoc.Extract(forms/markup/both) </li> 
         <li>TextExtractor.GetTextUnderAnnot()</li> 
         <li>PDFDraw.Export(Filter/Stream, &#x2026;)</li> 
         <li>PDFView.SetBackgroundColor() allows for transparent and textured backgrounds.</li> 
         <li>PDFViewCtrl.OpenURL()</li> 
         <li>PDFViewCtrl.RequestRendering()</li> 
         <li>PDFViewCtrl.IsFinishedRendering(visible_region_only)</li> 
         <li> Font.Encoding <strong>enum</strong></li> 
         <li>Font.CreateCIDTrueTypeFont(&#x2026;, Encoding)</li> 
         <li>Font.Create(doc, font_name)</li> 
         <li>Font.Create(doc, stc_font)</li> 
         <li>Field.UseSignatureHandler()</li> 
         <li>FDFDoc.MergeAnnots()</li> 
        </ul> 
        <p><strong><em>New Types and Methods in WebPublisher</em></strong><em><strong> Add-On</strong></em>:</p> 
        <ul class="bullets"> 
         <li>Convert.XODOutputOptions.SetThumbnailSize()</li> 
         <li>Convert.XODOutputOptions.SetMaximumImagePixels()</li> 
         <li>Convert.XODOutputOptions.SetFlattenContent()</li> 
         <li>Convert.XODOutputOptions.SetPreferJPG()</li> 
         <li>Convert.XODOutputOptions.SetSilverlightTextWorkaround()</li> 
        </ul> 
        <p><strong><em>Other Changes</em></strong>:</p> 
        <ul class="bullets"> 
         <li>Page.GetBoundingBox() -&gt; Page.GetVisibleContentBox()</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">February 7, 2012 - Version 5.8.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <ul class="bullets"> 
         <li>PDFNet for .NET 4 now includes direct support for WPF with PDFViewWPF control and new methods that can render PDF to BitmapSource and embed WPF images directly in PDF. Instead of relying on awkward WinForms interop, WPF applications can now use a true WPF PDF Viewer (PDFViewWPF) which includes most of the functionality available in WinForms control (including text selection, markup, annotation editing, etc.). Two new samples (<a href="http://www.pdftron.com/pdfnet/samplecode.html#PDFViewWPF">PDFViewWPFSimple</a> and <a href="http://www.pdftron.com/pdfnet/samplecode.html#PDFViewWPF">PDFViewWPF</a>) show how to build a simple PDF viewer/editor using the new API. </li> 
         <li>Significantly improved PDF viewer (pdftron.PDF.PDFViewCtrl and pdftron.PDF.PDFViewWPF) that minimizes flicker and boosts rendering performance. </li> 
         <li>A new utility class 'pdftron.PDF.ContentReplacer' that can be used to replace text and images in existing PDF templates. ContentReplacer streamlines search/replace/edit operations on PDF documents. For example, with ContentReplacer it is very simple to replace all instances of a specially marked string (e.g. "[NAME]") with a replacement string (e.g. "Joe Doe"), or to replace a paragraph/image in a region with different content in the same style. ContentReplacer is ideally suited for many PDF Variable Data Processing (VDP) workflows. To get started with ContentReplacer please take a look at the new <a href="http://www.pdftron.com/pdfnet/samplecode.html#ContentReplacer">sample</a>.</li> 
         <li>PDFNet for Mac OS X now supports Objective-C binding.</li> 
         <li>PDF/A Validation and Conversion Add-on ('pdftron.PDF.PDFA.PDFACompliance') now includes support for PDF/A-2b (validation and conversion). Also PDF/A-1 support was improved by decreasing the conversion error rate and by clarifying some ambiguities in the specification. </li> 
         <li>PDF Redaction Add-on ('pdftron.PDF.Redactor') was extended with support for 'negative' redactions that unlike 'positive' redactions can be used to remove all content outside of a specified region.</li> 
         <li>PDF Convert Add-on was extended with a number of options that can be used to control conversion from PDF to SVG.</li> 
         <li>Other minor improvements and bug fixes throughout the library.</li> 
        </ul> 
        <p><strong>New PDFNet WebPublisher</strong><strong> Add-On</strong>:</p> 
        <p>PDFNet WebPublisher Add-on (<em>pdftron.PDF.Convert.ToXod()</em>) integrates with <a href="http://www.pdftron.com/webviewer/">WebViewer</a> to offer a seamless and effective way to view PDF and other document formats (e.g. MS Office, XPS, TIFF, RTF, etc.) in any type of Web application (<em>HTML5, Silverlight, </em>and<em> Flash</em>) on any platfrom.</p> 
        <p><strong><em>New Types and Methods in PDFNet Core API</em>:</strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.SearchResult <strong>class</strong></li> 
         <li>pdftron.PDF.Stamper.SetAsAnnotation()</li> 
         <li> pdftron.PDF.Print.PrintContentTypes :: e_DocumentAnnotationsAndComments enum</li> 
         <li>pdftron.PDF.PDFViewCtrl(new 'compatibility' flag) </li> 
         <li>pdftron.PDF.PDFViewCtrl.AnnotationEditPermissionEvent</li> 
         <li>pdftron.PDF.PDFViewCtrl.SetHighlightFields()</li> 
         <li>pdftron.PDF.PDFViewCtrl.SetPathHinting()</li> 
         <li>pdftron.PDF.PDFViewCtrl.GetAnnotationAt()</li> 
         <li>pdftron.PDF.PDFView.SetHighlightFields()</li> 
         <li>pdftron.PDF.PDFView.SetPathHinting()</li> 
         <li>pdftron.PDF.PDFView.GetAnnotationAt()</li> 
         <li>pdftron.PDF.PDFViewWPF <strong>class</strong>, PDFNet for WPF only.</li> 
         <li>pdftron.PDF.PDFRasterizer.SetHighlightFields()</li> 
         <li>pdftron.PDF.PDFRasterizer.SetPathHinting()</li> 
         <li>pdftron.PDF.PDFDoc.Save() -&gt; byte[]</li> 
         <li>pdftron.PDF.PDFDraw.SetHighlightFields()</li> 
         <li>pdftron.PDF.PDFDraw.SetPathHinting()</li> 
         <li>pdftron.PDF.PDFDraw.GetBitmapSource() -&gt; System.Windows.Media.ImagingBitmapSource, WPF only.</li> 
         <li>pdftron.PDF.PathData <strong>class</strong></li> 
         <li>pdftron.PDF.Page.GetThumb()</li> 
         <li>pdftron.PDF.Image.Create(System.Windows.Media.ImagingBitmapSource), WPF only.</li> 
         <li>pdftron.PDF.Font.GetGlyphPath() -&gt; PathData</li> 
         <li>pdftron.PDF.Element.GetBBox() -&gt; Rect</li> 
         <li>pdftron.PDF.GetPathData() -&gt; PathData</li> 
         <li>pdftron.PDF.SetPathData(PathData)</li> 
         <li>pdftron.PDF.ContentReplacer <strong>class</strong></li> 
         <li>pdftron.SDF.SDFDoc.Save() -&gt; byte[]</li> 
         <li>pdftron.SDF.SDFDoc.Save(System.IO.Stream)</li> 
         <li>pdftron.Common.Matrix2D.Mult() -&gt; Point</li> 
        </ul> 
        <p><strong><em>New Types and Methods in Convert Add-On:</em></strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.Convert.SVGOutputOptions <strong>class</strong></li> 
         <li>pdftron.PDF.Convert.ToSvg(..., SVGOutputOptions)</li> 
         <li>pdftron.PDF.HTML2PDF.SetDPI()</li> 
         <li>pdftron.PDF.Convert.SilverlightOutputOptions -&gt; XODOutputOptions class</li> 
         <li>pdftron.PDF.Convert.ToSilverlight() -&gt; ToXod()</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDF Redaction Add-On:</em></strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.Redactor.PositiveOverlayColor property</li> 
         <li>pdftron.PDF.Redactor.NegativeOverlayColor property</li> 
         <li>pdftron.PDF.Redactor.RedactedContentColor property</li> 
         <li>pdftron.PDF.Redactor.ShowRedactedContentRegions property</li> 
         <li>pdftron.PDF.Redactor.RedactedContentColor property</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDF/A Compliance Add-On:</em></strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.PDFA.PDFACompliance.Conformance :: e_Level2 enum</li> 
        </ul> 
        <p><strong><em>Other Changes:</em></strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.TextSearch.Run returns values in SearchResult.</li> 
         <li>pdftron.PDF.PDFDoc.FlattenFields() -&gt; PDFDoc.FlattenAnnotations()</li> 
         <li>pdftron.PDF.Element.GetOperators() -&gt; PathData.GetOperators()</li> 
         <li>pdftron.PDF.Element.SetOperators() -&gt; PathData.SetOperators()</li> 
         <li>pdftron.PDF.Element.SetPoints() -&gt;PathData.SetPoints()</li> 
         <li>pdftron.PDF.Element.GetPoints() -&gt;PathData.GetPoints()</li> 
         <li>pdftron.PDF.PDFView in .NET is depricated (please use PDFViewCtrl or PDFViewWPF instead).</li> 
         <li>pdftron.PDF.PDFDoc.Save(System.IO.Stream) - stream is now parameter instead of a return value.</li> 
         <li>pdftron.PDF.Element.PathSegmentType -&gt; PathData.PathSegmentType enum</li>
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">May 31, 2011 - Version 5.7.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <ul class="bullets"> 
         <li>PDFNet SDK now supports <strong><a href="pdfnet/samplecode.html">PYTHON</a></strong>, <strong><a href="pdfnet/samplecode.html">PHP</a></strong>, and <strong><a href="pdfnet/samplecode.html">RUBY</a></strong>. All the APIs follow the same structure and API as the existing libraries for <strong>.NET</strong>, <strong><a href="pdfnet/Javadoc/index.html">JAVA</a></strong>, and <strong><a href="pdfnet/apiref.html">C/C++</a></strong>. The new language bindings are supported on Windows, Linux, and Mac OS X. </li> 
         <li>HTML to PDF conversion is now also available on Linux and Mac [as part of the Convert Add-on]. </li> 
         <li>Improved PDF Redaction [as part of the PDF Redaction Add-on]. </li> 
         <li>PDF Optimizer Add-on includes new options to embed missing fonts as well as to subset embedded fonts by referencing only the glyphs that are actually used in the document. </li> 
         <li>Other minor improvements and bug fixes throughout the library. </li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API</em>:</strong> </p> 
        <ul class="bullets"> 
         <li>Field.GetDefaultAppearance() - Simplifies the process of reading and changing &#x2018;default field appearances&#x2019; on PDF forms. </li> 
         <li>ElementWriter.Begin() - Includes a new flag to select the target coordinate system to be &#x2018;page&#x2019; or &#x2018;user coordinate system&#x2019; when writing new content on existing PDF pages.</li> 
         <li>enum PDFRasterizer.OverprintPreviewMode </li> 
         <li>class Optimizer.OptimizerSettings</li> 
         <li>class Optimizer.TextSettings </li> 
        </ul> 
        <p><strong><em>Other Changes</em>:</strong></p> 
        <ul class="bullets"> 
         <li>PDFView. SetOverprint (bool) -&gt; PDFView.SetOverprint (OverprintPreviewMode)</li> 
         <li>Optimizer.Optimize(doc, gray, mono) -&gt; Optimizer.Optimize(OptimizerSettings) </li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">April 14, 2011 - Version 5.6.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <p><strong>New PDF Redaction Add-On:</strong></p> 
        <p> The PDF Redaction Add-On enables removal of sensitive infromation in PDF, not just covering or obscuring the content. With printed pages, redaction involves blacking-out or cutting-out areas of the printed page. With electronic documents that use formats such as PDF, redaction typically involves removing sensitive content within documents for safe distribution to courts, patent and government institutions, the media, customers, vendors or any other audience with restricted access to the content. The redaction process in PDFNet consists of two easy steps (as shown in the new <a href="http://www.pdftron.com/pdfnet/samplecode.html#PDFRedact">PDFRedact</a> sample project):</p> 
        <ul class="bullets"> 
         <li><strong><em>Content identification:</em></strong> A user applies redact annotations that specify the pieces or regions of content that should be removed. The content for redaction can be identified either interactively (e.g. using 'pdftron.PDF.PDFViewCtrl' as shown in PDFView sample) or programmatically (e.g. using 'pdftron.PDF.TextSearch' or 'pdftron.PDF.TextExtractor'). Up until the next step is performed, the user can see, move and redefine these annotations.</li> 
         <li><strong><em>Content removal:</em></strong> Using 'pdftron.PDF.Redactor.Redact()' the user instructs PDFNet to apply the redact regions, after which the content in the area specified by the redact annotations is removed. The redaction function includes number of options to control the style of the redaction overlay (including color, text, font, border, transparency, etc.).</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API:</em></strong></p> 
        <ul class="bullets"> 
         <li>PDFView.SetTextSelectionMode()</li> 
        </ul> 
        <p><strong><em>Other Changes</em>:</strong></p> 
        <ul class="bullets"> 
         <li>PDFView.SelectByRect() -&gt; PDFView.Select()</li> 
         <li>PDFView.SelectByStruct() -&gt; PDFView.Select()</li> 
         <li>PDFView.SelectByHighlights() -&gt; PDFView.Select()</li> 
        </ul> 
        <p><strong>New Features that apply to both the Convert Add-on and SilverDox Publisher:</strong></p> 
        <ul class="bullets"> 
         <li>Support for conversion from Visio to PDF, XPS, or Silverlight.</li> 
         <li>Improvements in MS Office to PDF conversion.</li> 
         <li>Improvements in Web capture and HTML to PDF conversion. </li> 
        </ul> 
        <br> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">January 26, 2011 - Version 5.5.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <p><strong>New Features and Improvements to PDFNet Core API:</strong></p> 
        <ul class="bullets"> 
         <li>By default, all files are saved as ISO 32000 PDF files. To provide compatibility with PDF 1.4 and legacy PDF viewers (such as Acrobat 5) a new flag ('SDFDoc.SaveOptions.e_compatibility') can be used when calling PDFDoc.Save().</li> 
         <li>By default, all documents are compressed using compressed object streams resulting in significant reduction in file size. For example, the size of the PDF Reference (Specification) document will be less than half the size compared to one not using compressed object streams (9 MB compatred to 21 MB). To disable default compressed object streams support, use 'SDFDoc.SaveOptions.e_compatibility' flag.</li> 
         <li>PDFNet can now optimize, linearize, and incrementally update files with compressed object streams as well as PDF 1.4 compatible documents.</li> 
         <li>Support for reading and writing PDF files with arbitrary file size on 64-bit systems (when e_compatibility flag is not selected).</li> 
         <li>Various improvements in the <a href="http://www.pdftron.com/pdfnet/samplecode.html#Optimizer">PDF Optimizer </a>(pdftron.PDF.Optimizer).</li> 
         <li>Full support for knockout groups, transparency and many improvements in overprinting and overall rendering support.</li> 
         <li>Improved text extraction and dehyphenation in 'pdftron.PDF.TextExtractor'.</li> 
         <li>Simplified page content editing using ElementReader and ElementWriter. The changes made to graphical elements or their graphics states (e.g. as shown in <a href="http://www.pdftron.com/pdfnet/samplecode.html#ElementEdit">ElementEdit</a> sample) are not propagated to subsequent elements. This further simplifies PDF page editing because the element or its graphics state does not need to be saved and restored when editing individual content elements.</li> 
         <li>Bug fixes and small improvements throughout the library.</li> 
        </ul> 
        <p><strong>New Features and Improvements to PDFNet Convert Add-On:</strong></p> 
        <p><strong><em>HTML to PDF:</em></strong></p> 
        <ul class="bullets"> 
         <li>Direct conversion from HTML and any web page to PDF. </li> 
         <li>Conversion from HTML to PDF is performed using 'pdftron.PDF.HTML2PDF'. To access and use the new HTML to PDF functionality with the PDFNet Convert Add-on, simply download the separate HTML2PDF DLL available on the <a href="http://www.pdftron.com/pdfnet/downloads.html">PDFNet downloads</a> page.</li> 
         <li>Users can concurrently capture multiple web pages at the same time. </li> 
         <li>Because the conversion engine is based on WebKit (the same engine used in Chrome or Safari), support for various web standards (such as JavaScript, CSS, XHTML, SVG, etc.) is very thorough and robust. The conversion supports process isolation and is safe for use in the server environments.</li> 
         <li>HTML2PDF supports HTML conversion from a string or URL and offers many options to control page size, margins, orientation, formatting, bookmarks, intra-documenti links, hyperlinks, table of contents generation, etc. </li> 
         <li>Supports conversion of embedded SVG to PDF.</li> 
         <li>The API is very simple to use. <br>For example, the following line converts a single webpage to PDF: HTML2PDF.Convert(pdfdoc, "http://www.gutenberg.org/wiki/Main_Page"). <br>For a full sample, please refer to the new <a href="http://www.pdftron.com/pdfnet/samplecode.html#HTML2PDF">HTML2PDF</a> sample.</li> 
         <li>At the moment, HTML to PDF conversion support is available only on Windows, however Linux and Mac support will also be available shortly as part of a subsequent minor update.</li> 
        </ul> 
        <p><strong><em>XPS to PDF:</em></strong></p> 
        <ul class="bullets"> 
         <li>pdftron.PDF.ToXPS() was refactored to take XPSOutputOptions instead of an array of conversion paramaters.</li> 
         <li>Conversion improvements and bug fixes.</li> 
        </ul> 
        <br> 
        <p><strong>Changes in PDFNet SilverDox Publisher Add-On:</strong></p> 
        <ul class="bullets"> 
         <li>SilverDox Publisher now supports on-the-fly conversion and streaming from PDF and XPS to Silverlight. For an example, please refer to the new <a href="http://www.pdftron.com/silverdox/samplecode.html">SilverDoxStreaming</a> sample project. <a href="http://www.pdftron.com/silverdox/index.html">SilverDox</a> is a feature-rich and highly customizable publishing and viewing platform that enables Silverlight applications with flawless and efficient viewing of PDF, XPS, MS Office, and other document formats.</li> 
         <li>pdftron.PDF.ToSilverlight() now takes an optional SilverlightOutputOptions parameter that can be used to control the output conversion. Among other enhancements this parameter can be used to disable thumbnail generation which could decrease the load on conversion servers.</li> 
         <li>Conversion improvements and bug fixes.</li> 
        </ul> 
        <br> 
        <p><strong><em>New Types and Methods:</em></strong></p> 
        <pre>
<strong>class</strong> pdftron.PDF.Optimizer (as part of Optimizer Add-on) 
<strong>enum</strong> SDFDoc.SaveOptions.e_compatibility  Saves the document in a manner that is compatible with versions of PDF earlier than 1.5.
<strong>enum</strong> pdftron.PDF.PrinterMode.PaperSize
<strong>enum</strong> PDFDoc.InsertFlag
<strong>class</strong> pdftron.PDF.HTML2PDF 
pdftron.PDF.Element.GetTextString() returns a string instead of string* [C/C++ specific].
pdftron.PDF.GState.GetSoftMaskTransform()
pdftron.PDF.PDFView.SetPageTransparencyGrid()
pdftron.PDF.PDFView.UpdateBuffer()
pdftron.PDF.PDFViewCtrl.TextFindDoneEvent 
pdftron.PDF.PDFViewCtrl.SetThinLineAdjustment()
pdftron.PDF.PDFViewCtrl.SetOverprint()
pdftron.PDF.PDFViewCtrl.SetPageTransparencyGrid() 
pdftron.PDF.PDFViewCtrl.SetCurrentZoomHandler()
pdftron.PDF.PDFDraw.SetDefaultPageColor()
pdftron.PDF.PDFDraw.SetThinLineAdjustment()
pdftron.PDF.PDFRasterizer.SetThinLineAdjustment()
pdftron.PDF.Print.SetPaperSize(enum PaperSize)
</pre> 
        <p><strong><em>Other Changes</em>:</strong></p> 
        <ul class="bullets"> 
         <li>By default, overprint is enabled in PDFRasterizer, PDFDraw but is disabled PDFView and PDFViewCtrl (SetOverprint() method can be used to modify the default setting).</li> 
         <li>pdftron.PDF.PDFDraw.GetBitmap() and PDFRasterizer.Rasterize() methods have a new parameter that can be used to automatically demultiply rendered image. To reflect this e_rgba_demult and e_gray_alpha_demult are removed from PDFDraw.PixelFormat enumeration. </li> 
         <li>pdftron.PDF.Highlights class is refactored as collection of inner Highlight objects.</li> 
         <li>pdftrom.PDF.Convert.ToSilverlight() now takes an optional SilverlightOutputOptions parameter.</li> 
         <li>pdftrom.PDF.Convert.ToXPS() now takes an optional SilverlightOutputOptions parameter.</li> 
         <li>pdftrom.PDF.PDFViewCtrl.FindText() now notifies the application regarding the search results using TextFindDoneEvent instead of returning a boolean value.</li> 
        </ul> 
        <br> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">November 17, 2010 - Version 5.2.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <p><strong>New Features and Improvements to PDFNet Core API:</strong></p> 
        <ul class="bullets"> 
         <li>'PDFNet for .Net' includes new MSDN style documentation for C# and VB. Previously the documentation was only available in C/C++ or Javadoc format. </li> 
         <li>Support for multi-page TIFF import in pdftron.PDF.Convert.ToPdf() and pdftron.PDF.Convert.ToSilverlight() </li> 
         <li>New utility methods to simplify PDF merging and splitting operations (PDFDoc.InsertPage() and PDFDoc.MovePage()). </li> 
         <li>Improved IntelliSense support (.NET only). </li> 
         <li>Bug fixes and small improvements throughout the library. </li> 
        </ul> 
        <p><strong>New PDF Optimization Add-On, enabling the following functionality: </strong></p> 
        <p> PDF Optimization Add-On optimizes PDF documents by reducing the file size, removing redundant information, and compressing data streams using the latest in image compression technology. PDF Optimizer can compress and shrink PDF file size with the following operations: </p> 
        <ul class="bullets"> 
         <li>Remove duplicated fonts, images, ICC profiles, and any other data stream.</li> 
         <li>Optionally convert high-quality or print-ready PDF files to small, efficient and web-ready PDF.</li> 
         <li>Optionally down-sample large images to a given resolution.</li> 
         <li>Optionally compress or recompress PDF images using JBIG2 and JPEG2000 compression formats.</li> 
         <li>Compress uncompressed streams and remove unused PDF objects.</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API:</em></strong></p> 
        <pre>
<strong>class</strong> pdftron.PDF.Optimizer (as part of Optimizer Add-on) 
PDFDoc(System.IO.Stream) 
PDFDoc.Save() -&gt; System.IO.Stream 
PDFDoc.InsertPage() 
PDFDoc.MovePage() 
<strong>enum</strong> PaperSize 
pdftron.PDF.Print.PrintMode.SetPaperSize(PaperSize) 
pdftron.PDF.Convert.ToXps -&gt; System.IO.Stream 
pdftron.PDF.Convert.ToSilverlight-&gt; System.IO.Stream 
</pre> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">September 16, 2010 - Version 5.1</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <ul class="bullets"> 
         <li>PDFNet includes a new utility class to simplify PDF watermarking. Using 'pdftrom.PDF.Stamper' developers can stamp existing PDF pages with images, text, or other PDF pages in only a few lines of code. Compared to ElementBuilder/ElementWriter Stamper is simpler to use but it may not be suitable for very advanced operations or complete control over content creation.</li> 
         <li>Rasterizer was significantly improved by with additional controls for thin line enhancement, and removal of thin white lines between graphical elements and other anti-aliasing artifacts.</li> 
         <li>Large number of bug fixes and small improvements throughout the library.</li> 
        </ul> 
        <p><strong><em>New Types and Methods in PDFNet Core API:</em></strong></p> 
        <pre><strong>class</strong> Stamper
PDFViewCtrl.IsNavPanelVisible()
PDFViewCtrl.ShowRect()
PDFViewCtrl.CreateHideField()
PDFViewCtrl.SelectByHighlights()
PDFViewCtrl.SetThinLineAdjustment()
PDFRasterizer.SetThinLineAdjustment()
PDFDraw.SetThinLineAdjustment()
</pre> 
        <p><strong><em>New Types and Methods in PDFNet Convert Add-On:</em></strong></p> 
        <pre>pdftron.PDF.Convert.ToXps(dpi, is_openxps, norender, print_mode)</pre> 
        <p><strong><em>New PDFNet Silverlight Export Add-On</em></strong>: </p> 
        <ul class="bullets"> 
         <li>PDFNet now integrates with <a href="http://www.pdftron.com/silverdox/index.html">SilverDox</a> publishing platform and includes an optional add-on module (<em>pdftron.PDF.Convert.ToSilverlight</em>) to export PDF, XPS, MS Office and any other printable document to Silverlight XPS. <a href="http://www.pdftron.com/silverdox/index.html">SilverDox</a> is a feature-rich and highly customizable Silverlight document viewer component that enables Silverlight applications with flawless and efficient viewing of PDF, XPS, MS Office, and other document formats.</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">June 1, 2010 - Version 5.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <br> 
        <p><strong>New PDFNet Convert Add-On Released, enabling the following functionality:</strong><br></p> 
        <ul class="bullets"> 
         <li>Dynamic PDF generation from XAML and WPF reflow-able content. Developers can now export fixed and flow documents or convert XAML to PDF/XPS/SVG in a snap.</li> 
         <li>The new sample, Xaml2PDFTest, shows how to convert XAML, FixedDocument's, FlowDocument's, and other WPF constructs (e.g. Canvas, RichTextBox, Section, etc.) into PDF documents with control over headers and footers, and main body placement.</li> 
         <li>Convert any printable document to PDF, XPS, or SVG using 'pdftron.PDF.Convert' API. This universal document conversion API is based on the XPS print path, enabling superior conversion output on Windows 7 and Vista, compared to any GDI/PostScript driver. The universal conversion API is very easy to use and applications using this functionality will not need to separately distribute, install, or register any additional files.</li> 
         <li>Direct conversion from PDF to XPS: High-quality conversion that maintains the original document quality and preserves text, hyperlinks, colors and fonts. Among many possible use-cases developers could use 'pdftron.PDF.ToXps()' to add XPS support in any application or workflow that supports PDF, or to efficiently print PDF files by taking advantage of the new XPS Print API available in Windows 7 (or Vista).</li> 
         <li>Direct conversion from XPS to PDF: High-quality conversion that maintains the original document quality and preserves text, hyperlinks, colors and fonts. Among many possible use-cases developers could use 'pdftron.PDF.FromXps()' to quickly add a PDF export option in their .NET or WPF applications.</li> 
         <li>Direct conversion from EMF to PDF and from PDF to EMF.</li> 
         <li>Direct conversion from PDF to SVG.</li> 
         <li>The new sample, ConvertTest, shows how to convert any printable document to PDF or XPS as well as illustrates direct conversion between PDF and XPS.</li> 
        </ul> 
        <br> 
        <p><strong>New Features and Improvements to PDFNet Core API:</strong><br></p> 
        <ul class="bullets"> 
         <li>New Print API based on XPS print path (as a starting point please take a look at the updated PDFPrint sample project).</li> 
         <li>TextSearch utility class for quick text searches through a document using a regular expression or a litteral string. For a sample use case please take a look at TextSearch sample project.</li> 
         <li>Direct support for overprinting in the CMYK rasterizer. Overprint is simulated in RGB rasterizer and PDF viewer.</li> 
         <li>Direct support for TTC (True-Type Collections) during font creation and embedding.</li> 
         <li>Support for cross-platform color management using LittleCMS. On Windows, developers can choose between built-in color management, ICM2, or LittleCMS.</li> 
         <li>Windows developers can use standard GDI or GDI+ API-s to write on PDFDC (PDF Device Context) and to generate PDF documents based on their existing drawing functions. PDFDC and PDFDCEX provide a GDI Device Context handle which can be passed to all GDI functions the require an HDC. PDFDC does not use a "Virtual Printer" approach so there is no need to install any printer driver and the translation should be of both high quality and speed. Developers wishing to implement 'print-to' PDF in their existing applications without need for a separate virtual printer driver can use PDFDCEX, which add support for multi-page PDF output. A sample use of PDFDC and PDFDCEX can be found in the PDFDC sample project.</li> 
         <li>ElementWriter now allows developers to directly replace content of an existing page, further simplifying the PDF editing process. For a concrete example, please refer to the ElementEdit sample project.</li> 
         <li>PDFDraw.Export() can now convert PDF to high quality palletized TIFF or PNG output (tif8 or png8) and accepts a new hint parameter "Dither" for monochrome or indexed image output.</li> 
         <li>PDFViewCtrl is greatly extended and improved. The PDF viewing control comes with a set of built-in tools allowing developers to navigate, markup, annotate, and fill-in PDF forms out-of-the box. With the new version, it is also very simple to customize existing tools by overriding certain events or to implement custom tools from scratch. The viewer also comes with built-in thumbnail, bookmark, and layer panels which can be easily customized or replaced with custom versions.</li> 
         <li>Developers can choose between memory consumption and disk caching during PDF creation or editing. To prevent creation of any temporary files use PDFNet.SetDefaultDiskCachingEnabled(false).</li> 
         <li>Support for XFDF import and export in 'pdftron.FDF.FDFDoc'.</li> 
         <li>Option to embed standard (base 14) PDF fonts.</li> 
         <li>Improved rendering for Coons and Tensor product shading.</li> 
         <li>Numerous improvements related to support of corrupt or invalid PDF files.</li> 
         <li>The new sample, Pdf2Html, shows how to convert PDF to HTML. The sample shows a bit more involved API usage where 'pdftron.PDF.PDFDraw' is used to render the background image and 'pdftron.PDF.TextExtractor' is used to generate HTML text layer.</li> 
        </ul> 
        <br> 
        <p><strong>New PDFNet PDF/A Add-on Released</strong></p> 
        <ul class="bullets"> 
         <li>Enables to verify whether a PDF file is compliant with PDF/A (ISO 19005-1) specification.</li> 
         <li>Improved conversion from any PDF to a PDF/A compliant document.</li> 
         <li>Supports both PDF/A-1a and PDF/A-1b.</li> 
        </ul> 
        <br> 
        <p><strong><em>New Types and Methods in PDFNet Core API:</em></strong></p> 
        <pre>
Action.CreateSubmitForm() 
Action.CreateLaunch() 
Action.CreateHideField() 
Action.CreateImportData() 
Action.CreateResetForm() 
Action.CreateJavaScript() 
Action.Execute() 
Action.GetNext() 
Action.GetFormActionFlag() 
Action.SetFormActionFlag() 
ColorSpace.CreateICC() 
Date.SetCurrentTime() 
FDFDoc.CreateFromXFDF() 
FDFDoc.SaveAsXFDF() 
FileSpec.SetDesc() 
Element.GetSoftMaskTransform() 
ElementBuilder.Ellipse() 
Page.GetBoundingBox() 
<strong>class</strong> PDFDC 
<strong>class</strong> PDFDCEX 
PDFDoc.GetFileName() 
PDFNet.SetColorManagement() 
PDFNet.SetDefaultDiskCachingEnabled() 
<strong>enum</strong> PDFViewCtrl.PagePresentationMode. e_facing_cover 
<strong>enum</strong> PDFViewCtrl.PagePresentationMode. e_facing_continuous_cover 
PDFViewCtrl.ShowNavPanel () 
PDFViewCtrl.ShowToolbar () 
PDFViewCtrl.ShowNavToolbar () 
PDFViewCtrl.ShowMenuBar () 
PDFViewCtrl.ShowStatusBar() 
PDFViewCtrl.EnableScrollbar () 
PDFViewCtrl.GetSplitPosition 
PDFViewCtrl.SetSplitPosition() 
PDFViewCtrl.SetPageSpacing() 
PDFViewCtrl.SetFocus() 
PDFViewCtrl.CloseDoc() 
PDFViewCtrl.SetActionHandler() 
PDFViewCtrl.SetCustomEventHandlers() 
PDFViewCtrl.HasCapture() 
PDFViewCtrl.ExecuteAction() 
PDFViewCtrl.OnAction() 
PDFViewCtrl.GetDefaultAnnotation() 
PDFViewCtrl.LoadCurrentConfiguration() 
PDFViewCtrl.SaveCurrentConfiguration() 
PDFViewCtrl.EnableLinkActivation() 
PDFViewCtrl.DocProperties() 
PDFViewCtrl.DeletePages() 
PDFViewCtrl.InsertPages() 
PDFViewCtrl.InsertBlankPages() 
PDFViewCtrl.ReplacePages() 
PDFViewCtrl.RotatePages() 
PDFViewCtrl.ExtractPages() 
PDFViewCtrl.CropPages() 
<strong>class</strong> TextSearch 
<strong>class</strong> Highlights 
SDFDoc.EnableDiskCaching() 
SDFDoc.GetFileName() 
SDF.Obj.SetStreamData()
</pre> 
        <p><strong><em>New Types and Methods in PDFNet Convert Add-On:</em></strong></p> 
        <pre>
Convert.FromXps() 
Convert.FromEmf() 
Convert.ToEmf() 
Convert.ToSvg() 
Convert.ToXps() 
Convert. ToPdf(filename) 
Convert.RequiresPrinter() 
Convert.Printer.Install() 
Convert. Printer.Uninstall() 
Convert. Printer.GetPrinterName() 
Convert. Printer.IsInstalled() 
</pre> 
        <p><strong><em>Deprecated:</em></strong></p> 
        <pre>
PDFViewCtrl.GetSelection.GetRects() has been replaced by GetQuads().
</pre> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">March 27, 2009 - Version 4.5.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>PDFNet includes a new PDF viewing control (pdftron.PDF.PDFViewCtrl) that significantly simplifies application development with built-in support for interactive form filling, markup, annotation editing, and custom tool development. PDFViewSimple sample is updated to illustrate the use on the new control, however "pdftron.PDF.PDFView" is still available for backwards compatibility (and in case of C/C++, for low-level control development).</li> 
         <li>Support for native rendering of PDF pages in CMYK and DeviceN color spaces. This feature is essential for graphics workflows that require accurate color reproduction in CMYK. A new sample project (PDFDrawCMYK) is included for developers wishing to learn more about CMYK rasterizer or how to convert PDF pages to CMYK TIFF. </li> 
         <li>PDF/A (ISO 19005-1) validation. The new 'pdftron.PDF.PDFA.PDFACompliance' class offers a fast and easy way to validate any PDF file for the PDF/A compliance and to obtain a detailed report of compliance violations and relevant PDF objects. </li> 
         <li>PDF/A (ISO 19005-1) conversion. Using 'pdftron.PDF.PDFA.PDFACompliance' class developers can also convert existing PDF files to PDF/A compliant documents with fine grained control. The SDK also includes a new sample project (PDFATest) that illustrates how to use 'PDFACompliance' class. </li> 
         <li>All PDFNet viewers and rasterizers are now PDF/A (ISO 19005-1) compliant and can take into account OutputIntents ICC profile when rendering PDF in color management mode. </li> 
         <li>New high-level utility classes to work with any annotation type (pdftron.PDF.Annots). </li> 
         <li>PDFNet no longer depends on the external file (pdfnet.res). As a result, calling PDFNet.SetResourcePath() is no longer required for correct PDF processing. </li> 
         <li>Support for Adobe Highlight Format. Developers can apply highlights to existing documents and integrate PDFNet with third party search engines. </li> 
         <li>Support for Default Color Spaces in PDF. </li> 
         <li>When color management is enabled (PDFNet.SetColorManagement(true)) default ICC profiles are automatically loaded. </li> 
         <li>Improved rendering performance and quality. </li> 
         <li>Improved support for ISO PDF. </li> 
         <li>Enhanced JBIG2 compression. JBIG2 encoder now supports couple of new options: 'Threshold' and 'SharePages'. </li> 
         <li>Support for JPEG2000 compression using [/JP2] or [/JPEG2000] image encoder hints. </li> 
         <li>Starting with this release C/C++ developers can now integrate PDF viewing, interactive form, and markup, with the same ease of use that was available to .NET or JAVA developers. This is illustrated in couple of new sample projects: PDFViewSimple (showing integration with Win32) and PDFViewWX (showing integration with wxWidgets cross platform framework). </li> 
        </ul> 
        <p><strong><em>New Types and Methods:</em></strong></p> 
        <pre>
<strong>class</strong> pdftron.PDF.PDFViewCtrl 
<strong>class</strong> pdftron.PDF.PDFA.PDFACompliance 
namespace pdftron.PDF.Annots (Line, Circle, Widget, Highlight, etc.) 
<strong>enum</strong> PDFDraw.PixelFormat.e_cmyk 
Annot.Flatten() 
Date.SetCurrentTime() 
ElementBuilder.ArcTo() 
ElementBuilder.CreateEllipse() 
Field.SetValue(bool) [for radio and check buttons ] 
Field.GetValueAsBool() 
Field.SetMaxLen() 
Field.GetMaxLen() 
PDF.PDFDoc.IsTagged() 
PDF.PDFDoc.AddHighlights() 
PDFDraw.SetPrintMode() 
PDFDraw.SetPageTransparent() 
PDFRasterizer.SetPrintMode() 
PDFView.GetRotation() 
PDFView.Update(Rect) 
PDFView.Update(Annot, page_num) 
PDFNet.SetNumberWriteProc() [C/C++] 
PDFNet.SetNumberReadProc() [C/C++] 
Rect.Infalte() 
UString.ConvertToUtf8() [C/C++] 
</pre> 
        <p><strong><em>Name Changes:</em></strong></p> 
        <pre>
Element.GetImageColorSpace() and Image.GetImageColorSpace() now return
directly ColorSpace instead of 'SDF.Obj'. Similarly Element.GetShading() returns Shading.

GState.GetFillPattern() and GState.GetStrokePattern() directly return 
PatternColor instead of 'SDF.Obj'.

Low-level PDFRasterizer takes anoter argument 'num_comps' 
used to specify the number of color channels in the output image.
 
Field.SetChecked() -&gt; Field.SetValue(bool) 

Field.IsChecked() -&gt; Field.GetValueAsBool() 
</pre> 
        <p><strong><em>Deprecated:</em></strong></p> 
        <pre>
PDFNet.SetResourcePath() 
</pre> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">August 29, 2008 - Version 4.0.9</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>Performance and compatibility improvements.</li> 
         <li>Improvements in rendering quality.</li> 
         <li>Minor improvements and bug fixes.</li> 
         <li>an option to treat a page as a transparent backdrop.</li> 
         <li>ability to embed and compress images using JPEG2000 compression (using "JP2" hint passed in Image.Create() methods).</li> 
         <li>Support for 64-bit platforms (PDFNet for C/C++/JaVa). </li> 
        </ul> 
        <p><strong><em>New Types and Methods:</em></strong></p> 
        <pre>
PDFDraw.SetPrintMode()
PDFRasterizer.SetPrintMode()
PDFDraw::SetPageTransparent()
</pre> 
        <p><strong><em>Name Changes:</em></strong></p> 
        <p>For clarity, SecurityHandler.Permission.e_all and SecurityHandler.Permission.e_doc_secure permissions to SecurityHandler.Permission.e_owner.</p> 
        <p> For example, the following line can be used to check if the user has 'owner' access to the document: sec_hdlr.GetPermission(SecurityHandler.Permission.e_owner). The same call can be used to determine whether a given password is 'user' or 'owner'.</p> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">April 11, 2008 - Version 4.0.3</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <p>PDF Layers Support: a new high-level API for manipulating and handling PDF documents with layers. PDF Layers, or Optional Content Groups (OCGs) as they are more formally known as, refer to sections of content in a PDF document that can be selectively viewed or hidden by document authors or consumers. This capability is useful in different application domains such as CaD drawings, layered artwork, maps, multi-language documents, etc.</p> 
        <p> The <a href="pdfnet/samplecode.html#PDFLayers">PDFLayers</a> sample is extended to illustrate how to use the PDFDraw class in PDFNet to selectively render and export PDF layers. Similarly, the <a href="pdfnet/samplecode.html#PDFView">PDFView</a> sample application is extended with a layer tab and the capability to interactively toggle OCGs on and off. </p> 
        <img src="assets/images/support/pdf_layers.gif" alt="PDF Layers" style="margin:15px;"> 
        <p>Other minor improvements and bug fixes.</p> 
        <p><strong><em>New Types and Me</em></strong><strong><em>thods:</em></strong> </p> 
        <pre>
<strong>class</strong> pdftron.PDF.OCG.Context
<strong>class</strong> pdftron.PDF.OCG.Config
<strong>class</strong> pdftron.PDF.OCG.Group

<strong>class</strong> pdftron.PDF.OCG.OCMD 
PDF.PDFDoc.HasOC()
PDF.PDFDoc.GetOCGs()
PDF.PDFDoc.GetOCGConfig()
PDF.PDFDraw.SetOCGContext()
PDF.PDFRasterizer.SetOCGContext()
PDF.PDFView.SetOCGContext()
PDF.PDFView.GetOCGContext()
PDF.Element.IsOCVisible()
PDF.ElementReader.Begin(OCG.Context); 
</pre> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">February 11, 2008 - Version 4.0 </span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li> PDFNet SDK in now available for Java. The Java <a href="pdfnet/Javadoc/index.html" target="_blank">API</a> is exactly the same as the API for .NET or C/C++ <a href="pdfnet/apiref.html" target="_blank">API</a>. PDFNet for Java is available as part of the same package distribution as PDFNet SDK for C++ and is available on all supported platforms (i.e.Windows, Linux, Mac, Solaris, and mobile platforms).</li> 
         <li> <a href="pdfnet/samplecode.html#PDFView"><img src="assets/images/support/pdfnet_java_viewer.png" alt="PDF viewer for Java" style="margin:15px;"></a></li> 
         <li> Complete PDF transparency support. The built-in rasterizer in PDFNet SDK now features full support for PDF transparency, including support for transparency groups and all blend modes.</li> 
         <li> <img alt="Sample PDF rendered and generated using PDFNet" style="margin:15px;" src="assets/images/support/pdftransparency.png"></li> 
         <li> Automatic removal of some of the anti-aliasing artifacts such as thin-lines and gaps between adjacent image elements. although it is impossible to completely remove all anti-aliasing artifacts in PDF graphics, PDFNet SDK will reduce the appearance of commonly occurring artifacts. also, the users can manually control the rendering quality using PDFDraw.SetGamma() and PDFView.SetGamma().</li> 
         <li> Fast and high-quality text extraction. Using PDFNet SDK users can extract text from PDF pages in Unicode or XML. For more information, please refer to the <a href="pdfnet/samplecode.html#TextExtract">TextTextract</a> sample project as well as to the <a href="pdfnet/html/classpdftron_1_1PDF_1_1TextExtractor.html">documentation</a> for pdftron.PDF.TextExtractor.</li> 
         <li> High-level logical structure API which can be used to extract the logical structure from &#x2018;tagged&#x2019; PDF documents. The API resides in a new namespace &#x2013; <a href="pdfnet/html/namespacepdftron_1_1PDF_1_1Struct.html">pdftron.PDF.Struct</a>. To test drive this functionality, please take a look at the LogicalStructure <a href="pdfnet/samplecode.html#LogicalStructure">sample</a> project.</li> 
         <li>Built-in tools for text selection/highlighting as well as for text search in the PDFView class . also, all PDFView <a href="pdfnet/samplecode.html#PDFView">sample</a> projects (for C#, Java, VB.NET) are extended with code showing how to use new text selection modes, text search, image export, etc.</li> 
         <li> The <a href="pdfnet/html/namespacepdftron_1_1SDF.html">SDF/Cos API</a> is refactored to simplify coding and thus reduce errors during development. The updated API is the same in all programming languages, which also simplifies porting code from one language to another. Finally, the new SDF/Cos architecture allows PDFNet SDK to deliver further performance improvements in upcoming PDFNet v.4.x releases. For more information on how to upgrade to the new API, please see the <a href="http://www.pdftron.com/pdfnet/pdfnet4_upgrade.txt">migration guide</a> for PDFNet v.4.</li> 
         <li> PDFNet SDK for C/C++ is now available as compiler-independent shared library on all supported platforms (i.e. Windows, Linux, Mac, Solaris, and mobile platforms). For native code developers this removes the possiblity of collisions arising between incompatible C++ compilers and libraries. </li> 
         <li> automatic error recovery for PDF documents with minor corruptions (such as broken cross reference tables, etc). </li> 
         <li>The object size of the core DLL(s) is decreased, despite introduction of many new features. </li> 
         <li>New utility methods in the ElementBuilder class are introduced to simplify drawing of ellipses, circles, and arcs. </li> 
         <li>PDF Split and Merge operations (i.e. PDFDoc.ImportPages()) can now optionally copy associated bookmarks and preserve document internal and external links. </li> 
         <li>automatic stroke adjustment for thin lines. Improved rendering speed for certain graphical elements. </li> 
         <li>Users that require tight control of the location where temporary files are created can now use PDFNet.SetTempPath() to specify the location of the temporary folder. </li> 
         <li>New sample project <a href="pdfnet/samplecode.html#PDFViewSimple">PDFViewSimple</a> (for C# and VB.Net only): a stripped-down version of the full PDFView sample, which can be useful to developers learning how to integrate a basic PDF viewer within their applications.</li> 
         <li>The <a href="pdfnet/samplecode.html#PDFView">PDFView</a> sample is extended with the option to open TIFF, GIF, PNG, BMP and other image formats besides PDF. There is also an option to export PDF pages as raster images, code to execute document links, etc. </li> 
         <li>There a number of new methods controlling the way pages are viewed using PDFNet SDK. For example, a user can selectively enable or disable progressive rendering in the PDF viewer using PDFView.SetProgressiveRendering(). There are also new methods controlling horizontal and vertical alignment of pages within the control, and functions to set the default background and paper color. </li> 
         <li>a new option in the PDF rasterizer to export dithered monochrome TIFF or PNG output. To export 1 BPC, dithered TIFF (CCITT Fax G4) output, specify extra &#x2018;BPC&#x2019; or &#x2018;Gray&#x2019; hint parameter. For some concrete sample code, please refer to the PDFDraw <a href="pdfnet/samplecode.html#PDFDraw">sample</a> project. </li> 
        </ul> 
        <p><strong><em>New Types and Me</em></strong><strong><em>thods:</em></strong> </p> 
        <pre>
<strong>class </strong>pdftron.SDF.ObjSet
<strong>class</strong> pdftron.Struct.STree
<strong>class</strong> pdftron.Struct.SElement

<strong>class</strong> pdftron.Struct.RoleMap
<strong>class</strong> pdftron.Struct.ContentItem 
<strong>class</strong> pdftron.Struct.ClassMap
<strong>class</strong> pdftron.Struct.attrObj
<strong>class </strong>pdftron.PDF.TextExtract
<strong>class </strong>pdftron.PDF.TextExtract.Word
<strong>class </strong>pdftron.PDF.TextExtract.Line

<strong>class </strong>pdftron.PDF.TextExtract.Style
<strong>class</strong> pdftron.PDF.PDFView.Selection
PDFNet.Initialize(key)
PDFNet.SetTempPath()
PDF.PDFDoc.FieldCreate(String name, Type, String value)
PDF.FDFDoc.FieldCreate(String name, Type, String value)
PDF.FDFDoc.GetFieldIterator()
PDF.FDFDoc.GetField()
PDF.PDFDoc.GetPageIterator()
PDF.PDFDoc.GetPage(num)
PDF.PDFDoc.GetFieldIterator()
PDF.PDFDoc.GetField(name)
PDF.PDFDoc.RemoveSecurity()
PDF.Element.GetParentStructElement()
PDF.Element.GetStructMCID()
PDF.ElementBuilder.CreateEllipse()
PDF.ElementBuilder.arcTo()
PDF.Page.Scale()
PDF.Destination.IsValid()
PDF.Rect.Contains(x, y)
PDF.Field.SetValue(String)
PDF.Field.GetValueasString()
PDF.Field.GetDefaultValueasString()
PDF.PDFDraw.SetCaching()
PDF.PDFView.GetSelection()
PDF.PDFView.SelectByRect() 
PDF.PDFView.SelectByStruct()
PDF.PDFView.Selectall()
PDF.PDFView.FindText()
PDF.PDFView.IsFinished()
PDF.PDFView.HasSelection()
PDF.PDFView.ClearSelection()
PDF.PDFView.SetProgressiveRendering()
PDF.PDFView.SetPageBorderVisibility();
PDF.PDFView.SetDefaultPageColor();
PDF.PDFView.SetBackgroundColor();
PDF.PDFView.OnBackColorChanged ()
PDF.PDFView.OnForeColorChanged ()
PDF.PDFView.SetHorizontalalign();
PDF.PDFView.SetVerticalalign();
PDF.DictIterator.HasNext()
PDF.PageIterator.HasNext()
PDF.FieldIterator.HasNext()
PDF.FDFFieldIterator.HasNext()
PDF.GSChangesIterator.HasNext()
PDF.CharIterator.HasNext()
PDF.FontCharCodeIterator.Next()
PDF.FontCharCodeIterator.HasNext()
PDF.FontCharCodeIterator.Current()
PDF.Font.GetCharCodeIterator()
SDF.SDFDoc.RemoveSecurity()
SDF.NameTreeIterator.GetIterator()
SDF.NameTreeIterator.GetValue()
SDF.NumberTreeIterator.GetIterator()
SDF.NumberTreeIterator.GetValue()<br>
<strong>Dictionary Specific Methods</strong>
SDF.Obj.FindObj()
SDF.Obj.PutName (key, name)
SDF.Obj.Putarray (key)
SDF.Obj.PutBool (key, value)
SDF.Obj.PutDict (key)
SDF.Obj.PutNumber (key, value)
SDF.Obj.PutString (key, value)
SDF.Obj.PutString (key, buf)
SDF.Obj.PutText(key, value)
SDF.Obj.PutNull (key)
SDF.Obj.Put(key, obj)
SDF.Obj.PutRect (key, x1, y1, x2, y2)
SDF.Obj.PutMatrix(key, mtx)
SDF.Obj.Erase(key)
SDF.Obj.Rename(old_key, new_key)<br>

<strong>array Specific Methods </strong>
SDF.Obj.Getat(index)
SDF.Obj.InsertName (pos, name)
SDF.Obj.Insertarray (pos)
SDF.Obj.InsertBool (pos, value)
SDF.Obj.InsertDict (pos)
SDF.Obj.InsertNumber (pos, value)
SDF.Obj.InsertString (pos, value)
SDF.Obj.InsertString (pos, buf)
SDF.Obj.InsertText(pos, value)
SDF.Obj.InsertNull(pos)
SDF.Obj.InsertRect (pos, x1, y1, x2, y2)
SDF.Obj.InsertMatrix(pos, mtx)
SDF.Obj.Insert(pos, obj)
SDF.Obj.PushBackName (name)
SDF.Obj.PushBackarray ()
SDF.Obj.PushBackBool (value)
SDF.Obj.PushBackDict ()
SDF.Obj.PushBackNumber (value)
SDF.Obj.PushBackString (value)
SDF.Obj.PushBackString (buf)
SDF.Obj.PushBackText (value)
SDF.Obj.PushBackNull ()
SDF.Obj.PushBack(obj)
SDF.Obj.PushBackRect (x1, y1, x2, y2);
SDF.Obj.PushBackMatrix(mtx)
UString.ToLower()
UString.ToUpper()
</pre> 
        <p><strong><em>Other Changes:</em></strong></p> 
        <pre>
(.NET Specific) PDFNet11.DLL is renamed to PDFNet.DLL
(.NET Specific) Element.GetTextString() returns String 
		instead of Char[].
<br>
<strong>class</strong> SDF::Doc() -&gt; <strong>class</strong> SDF::SDFDoc()
SDF/Doc.h -&gt; SDF/SDFDoc.h
PDFDoc.GetPagesCount() -&gt; PDFDoc.GetPageCount()
Obj.IsStr() -&gt; Obj.IsString()
Obj.SetStr() -&gt; Obj.SetString()
GState.GetOpacityFill -&gt; GetFillOpacity
GState.GetOpacityStroke -&gt; GetStrokeOpacity
Obj.DictBegin() -&gt; Obj.GetDictIterator()
FDFDoc.FieldBegin() -&gt; FDFDoc.GetFieldIterator() 

</pre> 
        <p><strong><em>Deprecated:</em></strong></p> 
        <pre>
PDF.PDFDoc.FindPage(), use PDFDoc.GetPage() instead.
PDF.PDFDoc.FindField(), use PDFDoc.GetField() instead.
PDF.Rect.CreateSDFRect(), <br>  use obj.PutRect()/obj.InsertRect() instead.
PDF.Date.CreateSDFDate
<strong>class</strong> SDF.ObjVisitor, SDF.atomVisitor, 
		SDF.ContainerVisitor
SDF.NameTree.Find(), use NameTree.GetValue() instead.
SDF.NumberTree.Find(), use NumberTree.GetValue() instead.
SDFDoc.FixBrokenDoc() - PDFNet now automatically attempts<br>   to repair broken PDF documents so this method is <br>removed from the public interface.
SDF.DictIterator.Prev()
SDF.DictIterator.advance()
SDF.Obj.DictEnd(), use DictIterator.HasNext() instead.
SDF.Obj.accept()
SDF.Obj.CreateName()
SDF.Obj.Createarray()
SDF.Obj.CreateBool()
SDF.Obj.CreateDict()
SDF.Obj.CreateNull()
SDF.Obj.CreateNumber()
SDF.Obj.CreateString()
SDF.Obj.Clone()
SDF.Obj.Rename(DictIterator, String)
SDF.Obj.Replace(DictIterator, Obj)
SDF.PDFDoc.FixBrokenDoc()
SDF.SDFDoc::addObj()
FDF.FDFDoc.FieldEnd(), 
	use FDFFieldIterator.HasNext() instead.
FDF.PDFDoc.FieldEnd(), 
	use FieldIterator.HasNext() instead.
FDF.FDFDoc.PageEnd(), 
	use PageIterator.HasNext() instead.
</pre> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">February 21, 2007 - Version 3.6</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>Improved JBIG2 handling. JBIG2 decoder can now process any valid JBIG2 stream (previously the JBIG2 decoder could only process streams compressed using PDFNet).</li> 
         <li>Improved font substitution (especially for CJKV fonts). There are also new methods that allow the user to override the default PDFNet font substitution algorithm. Using PDFNet.addFontSubst() it is possible to override font substitution for individual font names as well as for various character collections. Check out the <a href="pdfnet/samplecode.html#PDFDraw">PDFDraw</a> sample project for an example of how to use PDFNet.addFontSubst(). </li> 
         <li> ICC support for device color spaces. although ICC support was available in PDFNet for a while, the only way to control color conversion of device color spaces was by embedding ICC profiles in the PDF document and overriding default color spaces. Starting with PDFNet 3.6, it is possible to adjust color conversion without having to modify source documents. The relevant methods in the 'PDFNet' class are SetColorManagement() , SetDefaultDeviceRGBProfile() , and SetDefaultDeviceCMYKProfile(). The PDFDraw sample project also shows how to use these functions. </li> 
         <li>Significant reduction in memory requirements related to processing of monochrome images.</li> 
         <li> New Page Labels API and sample project. Page labels allow for non-sequential page numbering or the addition of arbitrary labels for a page (such as the inclusion of Roman numerals at the beginning of a book). </li> 
         <li> Cross-platform support for Unicode file-systems. </li> 
         <li>Cross-platform support for Unicode strings and new utility methods for handling 'PDF Text Strings' as Unicode strings. </li> 
         <li>Improved conversion of text to Unicode.</li> 
         <li>Unlimited number of colorants/tint components for DeviceN color spaces.</li> 
         <li> PDFDraw.Export can now also export images in indexed color space resulting in a smaller file size, possibly at the expense of some image quality. To export the rasterized image using 8-bit, palettized PNG format, use "PNG8" to identify the export filter (e.g. pdfdraw.Export(page, "out.png", "PNG8").</li> 
         <li>Correct rendering of highlight annotations. </li> 
         <li>A new option in ElementWriter to simplify switching off compression of page streams. The ElementWriter.Begin() method has couple of additional options:</li> 
        </ul> 
        <ul class="bullets"> 
         <li><em>background</em>: an optional flag indicating whether new content should be added as a foreground or background layer to the existing page. If background is 'true', the graphics will be added in a background layer. By default, the new content will appear on top of the existing graphics. </li> 
         <li><em>compress</em>: an optional flag indicating whether the page content stream should be compressed. This may be useful for debugging content streams. also, some applications need to do a clear text search on strings in PDF files. By default, all content streams are compressed.</li> 
         <li>A new type of event in PDFClass that is raised every time the current page number changes (e.g. during page scrolling). This feature makes it easier to update GUI elements representing the current page within the document. The delegate (PDFViewCurrentPage delegate) that handles this event can be registered using PDFView::SetCurrentPageProc().</li> 
         <li>Extended <a href="pdfnet/samplecode.html#PDFView">C# PDFView</a> sample project illustrating how to create additional interactive PDF tools such as rectangular zoom, link creation and navigation tool, markup annotation, etc.</li> 
         <li>Various bug fixes.</li> 
        </ul> 
        <p><strong><em>New Types and Me</em></strong><strong><em>thods:</em></strong> </p> 
        <pre>
PDFNet.SetColorManagement()
PDFNet.SetDefaultDeviceCMYKProfile()
PDFNet.SetDefaultDeviceRGBProfile()
PDFNet.addFontSubst() 
<strong>class</strong> UString
Obj.FindObj() 
Obj.GetasPDFText()
<strong>class</strong> PDF.PageLabels
PDFDoc.SetPageLabel()
PDFDoc.RemovePageLabel()
PDFDoc.GetPageLabel()
Page.IsValid()
PDFRasterizer.Dispose()
PDFView.SetCurrentPageProc(PDFViewCurrentPageDelegate, 
	...) 
PDFDraw.Dispose()
ColorPt.SetColorantNum()
ColorPt.Set(c, idx)
ColorPt.Get(idx) 
</pre> 
        <p><strong><em>Other Changes:</em></strong></p> 
        <pre>
Obj.GetStr() is deprecated. 
	Use Obj.GetasPDFText() instead.
ColorSpace::MaxColornats is deprecated. 
Function::maxcardinality is deprecated.
SDF::Erase() returns void.
</pre> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">August 11, 2006 - Version 3.5</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li> PDFView control now features support for fast and smooth scrolling resulting in faster screen display and better user experience.</li> 
         <li>Overall rendering performance and quality has been improved.</li> 
         <li>Extended <a href="pdfnet/samplecode.html#PDFView">PDFView</a> sample illustrating how to implement custom controls and custom drawing on top of PDFView. The new class &#x2018;MyPDFView&#x2019; implements drawing of custom annotations which can be merged with PDF pages. a similar approach can be used to implement other customizations to the PDF viewing control (such as form field editing, interactive U3D model viewing, movie annotations, etc). <img alt="Custom PDF annotations drawn using PDFNet SDK's PDFView sample project." style="margin:15px;" src="assets/images/support/markup.png" width="350" height="331"> </li> 
         <li> Embedding support for CFF OpenType fonts (a new feature in PDF 1.6).</li> 
         <li> Matched acrobat's behavior for TrueType fonts with broken or missing tables.</li> 
         <li>Improved support for Mac fonts.</li> 
         <li> Improved font substitution. as a result, documents with missing fonts will render more accurately.</li> 
         <li> Support for radial shadings. PDFNet SDK rasterizer can now render perfectly smooth gradients and covers all possible variants in the radial shading. <img style="margin:15px;" alt="Radial Shading support in PDFNet SDK" src="assets/images/support/radial_shading.png" width="324" height="590"> </li> 
         <li>Support for Free-Form Gouraud-shaded triangle mesh shadings (type 4) and Lattice Gouraud Shadings (type 5). PDFNet rasterizer can now render perfectly smooth and stitched Gouraud meshes. <img alt="Gouraud shading support in PDFNet SDK" style="margin:15px;" src="assets/images/support/gouraud.jpg" width="324" height="260"> </li> 
         <li>Cross-platform utility methods to extract embedded images to PNG, TIFF, and JPEG (see PDF.Image.Export(),PDF.Image.ExportasTiff(), and PDF.Image.ExportasPng())).</li> 
         <li> Improvements related to compatibility with the PDF-a standard.</li> 
         <li>New Feature/Bug Fix: Refreshappearance is extended to support justification for multi-lined text fields.</li> 
         <li>Bug Fix (.NET): Better garbage collection of Filter objects.</li> 
        </ul> 
        <p><strong><em>New Types and Methods:</em></strong></p> 
        <pre>

PDFView.GetDeviceTransform()
Image.Export()
Image.ExportasTiff()
Image.ExportasPng()
Shading.GetGouraudMesh()
<strong>class</strong> Shading.GouraudMesh
Shading.GetGouraudMesh
</pre> 
        <p><strong><em>Name Changes:</em></strong></p> 
        <pre>
ColorSpace.ColorSpaceType -&gt; ColorSpace.Type
Font.FontType -&gt; Font.Type
Shading.ShadingType -&gt; Shading.Type
PatternColor.PatternColorType -&gt; PatternColor.Type
Function.FunctionType -&gt; Function.Type
Element.ElementType -&gt;Element.Type

</pre> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">June 1, 2006 - Version 3.2</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>PDFNet SDK now includes two separate rasterizer implementations utilizing different graphics libraries. The default rasterizer is 'e_BuiltIn' which is a high-quality, anti-aliased and platform-independent rasterizer. This rasterizer is available on all supported platforms. On Windows platforms, PDFNet SDK also includes a GDI+ based rasterizer which is included mainly to provide vector output for printing, for EMF/WMF export, etc. To switch between different rasterizer implementations use SetRasterizerType() method on the PDFDraw, PDFView, or PDFRasterizer objects.</li> 
         <li> More efficient mechanism for screen updating in the PDFView class.</li> 
         <li>New print support functions in the PDFView sample and extra options to dynamically switch between different rasterizer implementations.</li> 
         <li>Support for RaW JPEG2000 code-streams.</li> 
         <li>Unlimited zoom option in the PDFRasterizer class.</li> 
         <li>Automatic font subsetting. The subsetting process is completely transparent and is enabled by default.</li> 
         <li>New utility methods for creating PDF fonts from Windows fonts. For example: <pre>System.Drawing.Font sys_font = new 
System.Drawing.Font("Comic Sans MS", 12);
Font sys_font = Font.CreateTrueTypeFont<br>(doc, sys_font, true, true);</pre> </li> 
        </ul> 
        <ul class="bullets"> 
         <li>Improved Unicode support and resilience to various character mapping errors and CMap issues due to buggy output from third-party PDF creators.</li> 
         <li>New utility methods to extract PDF images and to convert them to GDI+ Bitmaps. For examples of how to use the new methods, please take a look at the new &#x2018;<a href="pdfnet/samplecode.html#ImageExtract">ImageExtract</a>&#x2019; sample project.</li> 
         <li>New utility methods for creating Form XObject elements from input PDF pages. These methods are especially useful in applications performing page imposition. For examples of how to use the new methods, please take a look at the updated &#x2018;<a href="pdfnet/samplecode.html#Imposition">Imposition</a>&#x2019; sample project.</li> 
         <li>A new utility class to manipulate a document&#x2019;s viewing preferences. </li> 
        </ul> 
        <strong>New Types and Methods:</strong> 
        <pre>PDFRasterizer.SetRasterizerType()
PDFRasterizer.GetRasterizerType()
PDFRasterizer.Setantialiasing()
PDFRasterizer.Rasterize(page, HDC, &#x2026;)<br>
PDFDraw.SetRasterizerType()
PDFDraw. Setantialiasing()
PDFDraw.DrawInRect (page, HDC, &#x2026;)
PDFDraw.DrawInRect (page, Graphics &#x2026;)<br>
enum PDFDraw.PixelFormat
PDFDraw.GetBitmap(&#x2026;, PixelFormat pix_fmt)
PDFDraw.SetErrorHandlerProc()
ColorSpace &#x2018;Gray&#x2019; hint in Export/GetBitmap()<br>

PDFView.GetDoc()
PDFView.SetRasterizerType()
PDFView.Setantialiasing()
PDFView.SetRenderUpdateProc() is deprecated.
PDFView.SetRenderBeginProc()
PDFView.SetRenderFinishProc()<br>
Font.CreateTrueType(doc, LOGFONT, &#x2026;)
Font.CreateTrueType(doc, Font, &#x2026;) [.NET]
Font.CreateCIDTrueType(doc, LOGFONT, &#x2026;)
Font.CreateCIDTrueType(doc, Font, &#x2026;) [.NET]<br>
Image.GetBitmap()
Element.GetBitmap()<br>
ElementBuilder.CreateForm(Page)
ElementBuilder.CreateForm(Page, Doc)<br>
PDFView.GetPageNumberFromScreenPt()<br>
PDFDoc.GetViewPrefs()<br>
class PDFDocViewPrefs
PDFDocViewPrefs.SetInitialPage()
PDFDocViewPrefs.SetPageMode(mode)
PDFDocViewPrefs.GetPageMode()
PDFDocViewPrefs.SetLayoutMode(layout)
PDFDocViewPrefs.GetLayoutMode()
PDFDocViewPrefs.SetPref(pref, value)
PDFDocViewPrefs.GetPref(ViewerPref pref)
PDFDocViewPrefs.SetNonFullScreenPageMode(mode)
PDFDocViewPrefs.GetNonFullScreenPageMode()
PDFDocViewPrefs.SetDirection(left_to_right)
PDFDocViewPrefs.GetDirection()
PDFDocViewPrefs.SetViewarea(box)
PDFDocViewPrefs.GetViewarea()
PDFDocViewPrefs.SetViewClip(box)
PDFDocViewPrefs.GetViewClip()
PDFDocViewPrefs.SetPrintarea(box)
PDFDocViewPrefs.GetPrintarea()
PDFDocViewPrefs.SetPrintClip(box)
PDFDocViewPrefs.GetPrintClip()
PDFDocViewPrefs.GetSDFObj()</pre> 
        <p><strong><em>Bug fixes:</em></strong></p> 
        <ul class="bullets"> 
         <li>a bug in PDFView class related to interactive multi-threaded PDF rendering.</li> 
         <li>a bug in PDFView.ConvCanvasPtToScreenPt() not returning the correct value.</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">February 1, 2006 - Version 3.1</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>Support for aES (advanced Encryption Standard) encryption. aES encryption is a new feature in PDF 1.6 and acrobat 7.</li> 
         <li>PDFNet SDK resource folders are now replaced with a single redistributable resource file ('pdfnet.res'), which simplifies the deployment of PDFNet based applications supporting CJKV languages and predefined encodings. The new resource file is also highly compressed resulting in the smaller application size.</li> 
         <li>Support for Visual Studio C++ 2005 and Microsoft .NET Framework 2.x.</li> 
         <li> New sample projects for Linux illustrating basic PDF rasterization and bitmap export to different image formats.</li> 
         <li> New cross-platform option for TIFF export.</li> 
         <li> New JPEG Quality encoder parameter for JPEG export in PDFDraw.</li> 
         <li> New image smoothing options in PDFDraw and PDFView.</li> 
         <li> Support for opening PDF documents using &#x2018;StdFile&#x2019; with &#x2018;wchat_t&#x2019; parameter (i.e. support for Unicode filenames in C++). This option is available only on platforms supporting Unicode file systems.</li> 
         <li> Improved linearization optimizer.</li> 
        </ul> 
        <p><strong><em>New Types and Methods:</em></strong></p> 
        <pre>
StdSecurityHandler.algorithmType
StdSecurityHandler(algorithmType)
StdSecurityHandler.IsaES()
StdSecurityHandler.IsRC4()
StdSecurityHandler.SetEncryptMetadata()
PDFDoc.GetDocInfo()
</pre> 
        <p><strong>New utility class PDFDocInfo</strong></p> 
        <pre>
PDFDocInfo.GetTitle()
PDFDocInfo.SetTitle()
PDFDocInfo.Getauthor()
PDFDocInfo.Setauthor()
PDFDocInfo.GetSubject()
PDFDocInfo.SetSubject()
PDFDocInfo.GetKeywords();
PDFDocInfo.SetKeywords()
PDFDocInfo.GetCreator()
PDFDocInfo.SetCreator()
PDFDocInfo.GetProducer()
PDFDocInfo.SetProducer()
PDFDocInfo.GetCreationDate()
PDFDocInfo.SetCreationDate()
PDFDocInfo.GetModDate()
PDFDocInfo.SetModDate()
PDFDocInfo.GetSDFObj()<br>
PDFRasterizer.SetImageSmoothing()<br>
PDFDraw.SetImageSmoothing()<br>

PDFView. SetImageSmoothing()
PDFView::CancelRendering()
PDFView::SetDrawannotations()
PDFView.Close() [.NET]
</pre> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">November 22, 2005 - Version 3.0</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <p>A new, completely redesigned cross-platform, high-performance and high-quality rendering engine. The previous rasterizer was limited due to many incompatibilities between GDI+ and the PDF graphics model. The new feature set covers most of the PDF 1.6 (acrobat 7) rendering model and includes: </p> 
        <ul class="bullets"> 
         <li>Support for soft masks.</li> 
         <li>Support for stencil, explicit, and color-key masks.</li> 
         <li>Support for various types of patterns and shadings.</li> 
         <li>Support for all text rendering modes.</li> 
         <li>Caching.</li> 
         <li>Progressive rendering.</li> 
         <li> Initial transparency support.</li> 
        </ul> 
        <p> A new utility class (PDFView) and .NET forms control that can be used for interactive rendering of PDF documents. PDFView implements some essential features such as double-buffering, multi-threaded rendering, scrolling, zooming, and page navigation that are essential in interactive rendering applications (e.g. in client PDF viewing and editing applications).</p> 
        <p><strong> New and updated samples: </strong></p> 
        <ul class="bullets"> 
         <li>PDFDraw &#x2013; shows how export to various raster formats.</li> 
         <li>PDFView &#x2013; demonstrates interactive viewing of PDF documents.</li> 
         <li>U3DTest &#x2013; illustrates how to embed U3D content in PDF.</li> 
         <li>PatternTest &#x2013; illustrates how to create PDF patterns and shadings.</li> 
         <li>BookmarkTest &#x2013; extended example illustrating how to create a Bookmark pointing to a page in a remote document.</li> 
        </ul> 
        <p> Adding new content and merging existing PDF content is now even easier. ElementWriter now tracks all changes in the graphics state and all special cases are automatically handled by the library resulting in improved developer productivity and software reliability.</p> 
        <p> A workaround to a design error in Microsoft .NET CLR (versions 1.0x and 1.1x) related to Mixed DLL Loading Problem.</p> 
        <p> Improved appearance generation for form fields.</p> 
        <p> InitStdSecurityHandler() can now accept passwords directly. This removes the need to derive custom SecurityHandlers in cases where the password is known in advance and the authorization procedure does not require user feedback. See EncTest for more details.</p> 
        <p> The Page class has new utility methods that simplify work with different page regions (page boxes).</p> 
        <p> Support for document level multi-threading.</p> 
        <p><strong><em>New Types and Methods:</em></strong></p> 
        <pre>
Doc::Lock()
Doc::Unlock
Doc::IsLocked()
Doc::InitStdSecurityHandler()<br>
PDFDoc::Lock()
PDFDoc::Unlock
PDFDoc::IsLocked()
PDFDoc::InitStdSecurityHandler()<br>
Page::annotRemove()
enum Page::Box
enum Page::Rotate
Page::GetBox()
Page::SetBox()
Page::GetRotation()
Page::SetRotation()
Page::GetMediaBox()
Page::SetMediaBox()
Page::GetCropBox()
Page::SetCropBox()
Page::GetDefaultMatrix()
Page::GetDefaultMatrix(flip)
Page::GetDefaultMatrix(flip, region)
Page::GetPageWidth()
Page::GetPageHeight()
Page::GetPageWidth(region)
Page::GetPageHeight(region)
Page::HasTransition()<br>
Image::IsValid()<br>

Element::GetBBox()<br>
Field::Eraseappearance()<br>
Font::GetBBox()<br>
</pre> 
        <strong>class PDFDraw is redesigned</strong>
        <br> 
        <pre>
PDFDraw::SetDPI()
PDFDraw::SetImageSize()
PDFDraw::SetPageBox()
PDFDraw::SetFlipYaxis()
PDFDraw::SetRotate()
PDFDraw::SetDrawannotations()
PDFDraw::Export()
PDFDraw::GetBitmap()<br>
</pre> 
        <strong>New class PDFRasterizer</strong>
        <br> 
        <pre>
PDFDraw::Rasterize()
PDFDraw::SetDrawannotations()
PDFDraw::SetCaching()
PDFDraw::SetRenderUpdateProc()
PDFDraw::SetErrorReportProc()
</pre> 
        <strong>New class PDFView</strong>
        <br> 
        <pre>
PDFView::SetDoc()
PDFView.SetPageViewMode()
PDFView.GetPageViewMode()
PDFView.SetPagePresentationMode()
PDFView.GetPagePresentationMode()
PDFView.GetCurrentPage()
PDFView.GetPagesCount()
PDFView.GotoFirstPage()
PDFView.GotoLastPage()
PDFView.GotoNextPage()
PDFView.GotoPreviousPage()
PDFView.SetCurrentPage()
PDFView.GetZoom()
PDFView.SetZoom()
PDFView.RotateClockwise()
PDFView.RotateCounterClockwise()
PDFView.ConvScreenPtToCanvasPt()
PDFView.ConvCanvasPtToScreenPt()
PDFView.ConvCanvasPtToPagePt()
PDFView.ConvPagePtToCanvasPt()
PDFView.ConvScreenPtToPagePt()
PDFView.ConvPagePtToScreenPt()
PDFView.SetRenderUpdateProc()
PDFView.SetErrorReportProc()
PDFView.GetCanvasWidth()
PDFView.GetCanvasHeight()
PDFView.GetHScrollPos()
PDFView.GetVScrollPos()
PDFView.OnScroll()
PDFView.SetHScrollPos()
PDFView.SetVScrollPos()
PDFView.OnSize()
PDFView.Update()
PDFView.GetBuffer()
PDFView.GetBufferWidth()
PDFView.GetBufferHeight()
PDFView.GetBufferStride()
PDFView.InvalidateRect()
PDFView.SetCaching()
</pre> 
        <p><strong><em>Name Changes:</em></strong></p> 
        <pre>
InitializeSecurityHandler() -&gt; InitSecurityHandler()
Obj* GetMediaBox() -&gt; Rect GetMediaBox()
Obj* GetCropBox() -&gt; Rect GetCropBox()
GetBleedBox -&gt; GetBox(Page::e_bleed)
GetTrimBox() -&gt; GetBox(Page::e_trim)
GetartBox() -&gt; GetBox(Page::e_art)

</pre> 
        <p><strong><em>Bug fixes:</em></strong></p> 
        <ul class="bullets"> 
         <li>Numerous bug fixes.</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">July 21, 2005</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li> Font substitution using all available fonts. PDFNet is now doing a better job in searching locally available fonts that can be used as visual substitutes for fonts that are missing (i.e. that are not embedded) in PDF documents.</li> 
         <li>Improved visual rendering of substituted fonts.</li> 
         <li>Enhanced JPEG2000 decoder support. all PDFNet users can now benefit from a brand new, high-performance JPEG2000 engine which can be used to decode and process any JP2 embedded streams in PDF. The JPEG2000 filter (introduced in PDF 1.5) decodes data that has been encoded using the JPEG2000 compression method, an international standard for the compression and packaging of image data (see <a href="http://www.jpeg.org/jpeg2000/">http://www.jpeg.org/jpeg2000</a> for details). JPEG2000 defines a wavelet-based method for image compression that can give better size reduction than other methods such as regular JPEG or CCITT.</li> 
         <li> Utility functions and sample code demonstrating the simplicity of embedding JP2 (JPEG2000) images in PDF. See <a href="pdfnet/samplecode.html#addImage">addImageTest</a> sample project for details. </li> 
         <li>JBIG2 decoder support. all PDFNet users can now decode and preview monochrome (1 bit per pixel) images created using PDFNet. JBIG2 provides considerably better compression than the existing CCITT standard. Images of pages containing text in any language compress particularly well, with typical compression ratios of 20:1 to 50:1 for a page full of text. PDFNet has been supporting lossless and lossy JBIG2 encoding in previous product releases for more than a year.</li> 
         <li><a href="pdfnet/samplecode.html#InteractiveForms">Interactive forms</a> sample project has been extended with code samples illustrating how to work with check boxes and buttons. There are several new utility methods that simplify work with forms and form appearances.</li> 
        </ul> 
        <p><strong><em>New Types and Methods (incomplete list): </em></strong></p> 
        <pre>
PDFDoc.addFileattachment()
enum annot.annotationState
annot.Getappearance()
annot.Setappearance()
action.CreateSubmitForm()
</pre> 
        <p><strong><em>Name Changes:</em></strong></p> 
        <pre>
Filed.Getappearance() -&gt; annot.Getappearance()
</pre> 
        <p><strong><em>Bug fixes:</em></strong></p> 
        <ul class="bullets"> 
         <li>Small improvement in serialization of very small and very large numbers.</li> 
         <li>New FDF merge and extract implementation.</li> 
         <li>Bug fix in lossy JBIG2 encoder.</li> 
         <li>Bug fix related to color conversion from DeviceN color spaces and PostScript calculator functions.</li> 
         <li>Improved consistency with acrobat 7 for some embedded fonts that are marked as symbolic.</li> 
         <li>Numerous other bug fixes. </li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">May 20, 2005</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>Action, annot, FileSpec high-level utility classes.</li> 
         <li>AnnotationTest sample project was extended to illustrate the capabilities of the above mentioned high-level classes.</li> 
         <li>Hook functions for number parsing and serialization allowing client applications to customize PDF number processing. Default number functions were updated to work with IEEE single-precision floating-point numbers for compliance with acrobat 6 and 7. Older acrobat versions used 32-bit fixed-point numbers which had much smaller range than IEEE floating-point numbers, but greater precision.</li> 
         <li> Support for some CCITTFax streams created using buggy, third party PDF creators.</li> 
         <li> The limit for the maximum number of pages in a single PDF document was extended to 2^32 (4294967296).</li> 
         <li> (.NET) a major update of managed code. The new implementation is compliant with C++/CLI, a new managed language from Microsoft.</li> 
        </ul> 
        <p><strong><em>New Types and Methods (incomplete list):</em> </strong></p> 
        <pre>
class annot 
class action
class FileSpec
Field.IsValid()
Date.IsValid()
Page.GetNumannots()
Page.Getannot()
Page.annotInsert()
Page.annotPushBack()
Page.annotPushFront()
Page.GetUserUnitSize()
Page.SetUserUnitSize()
Function.GetSDFObj()
PDFDoc.GetOpenaction()
PDFDoc.SetOpenaction()
PDFDoc.IsLinearized()
Doc.IsLinearized()
Doc.GetLinearizationDict()
Doc.GetHintStream()
</pre> 
        <p><strong><em>Name Changes:</em></strong></p> 
        <pre>
Field.FieldType -&gt; Field.Type
Field.FieldFlag -&gt; Field.Flag
Page.CreateWidget() -&gt; annot.CreateWidget(
</pre> 
        <p><strong><em>Bug Fixes:</em></strong></p> 
        <ul class="bullets"> 
         <li>(.NET/C++) Linearization/Fast web view - small adjustments to the hint format for compatibility with acrobat.</li> 
         <li> (.NET) a solution to a problem related to shared resources. The exception was occurring only in .NET component running on machines with hyper-threaded CPU-s or multi-processor systems.</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">April 8, 2005 </span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>Linearization (Fast Web View) support.</li> 
         <li> High level read/write/edit access to extended graphics state (e.g. transparency, alpha channels, color conversion functions, etc).</li> 
         <li> Support for field names represented using Unicode (PDF 1.6 feature).</li> 
         <li> Enhanced forms API (better appearance stream refresh, support for all field flags, text justification, multi-line text, etc). </li> 
         <li> Improved support for image transparency and image masking. PDFNet now automatically recognizes alpha channel in all supported raster formats and will preserve them during image import. Image class was extended with several methods related to image masks and soft masks making it easier to work with explicit, soft, and color-key masking. also there are several new utility methods for embedding images.</li> 
         <li> New image encoder hint allowing the user to control the compression level for the Flate filter.</li> 
         <li> Performance improvements in the rasterizer and content extraction API.</li> 
         <li> Improved lossy JBIG2 compression. </li> 
         <li> Bug fixes</li> 
        </ul> 
        <p><strong><em>New Types and Methods (incomplete list): </em></strong></p> 
        <pre>
Doc.SaveOptions.e_linearized
PDFDoc.RefreshFormappearances()
Element.UpdateTextMetrics()
Element.HasTextMatrix()
ElementBuilder.Reset()
Field.GetJustification()
Field.SetJustification()
Field.GetFlag()
Field.SetFlag()
StdFile.FileSize()
GState.SetBlendMode()
GState.SetFillOpacity()
GState.SetStrokeOpacity()
GState.SetaISFlag()
GState.SetSoftMask()
GState.SetStrokeOverprint()
GState.SetFillOverprint()
GState.SetOverprintMode()
GState.SetautoStrokeadjust()
GState.SetSmoothnessTolerance()
GState.SetBlackGenFunct()
GState.SetUCRFunct()
GState.SetTransferFunct()
GState.SetHalftone()
GState.GetBlendMode()
GState.GetOpacityFill()
GState.GetOpacityStroke()
GState.GetaISFlag()
GState.GetSoftMask()
GState.GetStrokeOverprint()
GState.GetFillOverprint()
GState.GetOverprintMode()
GState.GetautoStrokeadjust()
GState.GetSmoothnessTolerance()
GState.GetTransferFunct()
GState.GetBlackGenFunct()
GState.GetUCRFunct()
GState.GetHalftone()
Image.Create(String)
Image.Create(String, Obj hint)
</pre> 
        <p><em><strong>Name Changes:</strong></em></p> 
        <pre>
Element.GetComputedTextLength -&gt; Element.GetTextLength.
PDFDoc.InteractiveFieldBegin -&gt; PDFDoc.FieldBegin
FDFDoc.InteractiveFieldBegin -&gt; FDFDoc.FieldBegin
PDFDoc.InteractiveFieldEnd -&gt; PDFDoc.FieldEnd
FDFDoc.InteractiveFieldEnd -&gt; FDFDoc.FieldEnd
PDFDoc.InteractiveFieldFind -&gt; PDFDoc.FieldFind
FDFDoc.InteractiveFieldCreate -&gt; FDFDoc.FieldCreate
</pre> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">December 22, 2004</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>Initial support for PDF 1.6 (acrobat 7 documents)</li> 
         <li> a brand new high-performance, high-quality, and platform independent rasterizer featuring support for pattern fills, smooth shading and transparency (PDFDraw2.h). There will be more information about this rasterizer in the upcoming releases of PDFNet. </li> 
         <li> Numerous bug fixes, memory optimizations and speed improvements.</li> 
         <li> Image::ImageCompression was renamed into InputFilter. InputFilter is now optional parameter in Image::Create() methods.</li> 
         <li> ElementWriter now automatically recognizes text runs that can be joined in TJ arrays resulting in more efficient text output and ease of use.</li> 
         <li> ElementWriter.Flush()</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">September 24, 2004 </span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>GUI feedback in PDFView sample project. PDFView now collects authentication information for password protected documents.</li> 
         <li> Sample code improvements</li> 
        </ul> 
        <p><em><strong>Bug fixes:</strong></em></p> 
        <ul class="bullets"> 
         <li>Font resource leak and other minor bug fixes.</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">September 13, 2004</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>Speed improvements through improved resource caching.</li> 
         <li> Minor bug fixes.</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">September 7, 2004</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>Optional annotation rendering for print and preview (PDFDraw.SetDrawannotations()).</li> 
         <li> Support for both lossless and lossy JBIG2 compression. </li> 
         <li> New sample project - JBIG2Test. The sample project illustrates how to recompress bi-tonal images using advanced JBIG2 compression.</li> 
         <li> New hint parameters for PDF image embedding.</li> 
         <li> Support for multi-frame TIFF files and extra options to set JPEG quality in PDFDraw image export.</li> 
         <li> PDFDraw.SetRegion() method to select rendering of a page subset.</li> 
        </ul> 
        <p><strong><em>Bug fixes:</em></strong> </p> 
        <ul class="bullets"> 
         <li>Minor printing errors</li> 
         <li> Font clipping errors</li> 
         <li> Proper rotation rendering</li> 
        </ul> 
       </dd> 
      </dl> 
      <dl class="content"> 
       <dt class="topSitemap title">
        <span class="plus" style="font-family: monospace; padding-right: 0.5em;">+</span>
        <span class="grey questionsDrop">August 24, 2004</span>
       </dt> 
       <dd class="onlyDotList collapse"> 
        <ul class="bullets"> 
         <li>Support for lossless JBIG2 compression</li> 
         <li> Image, Text, and Path Smoothing.</li> 
         <li> PDF Rasterizer / Viewer (PDFDraw class)</li> 
         <li> Enhanced support for CJKV languages, vertical text</li> 
         <li> Unicode support through composite fonts (Font::CreateCIDTrueTypeFont).</li> 
         <li> Improvements to PDF API reference Manual documentation.</li> 
         <li> C++ headers are cleaned up</li> 
        </ul> 
        <p><strong><em>New Types and Methods (incomplete list):</em></strong></p> 
        <pre>
Image::Create(Bitmap*)
Page.GetIndex() 
Font.IsSimple(), Font.GetVerticaladvance()
CMap.IsHorizontal()
Filed::GetDefaultValue
Field::Rename()
Field::Isannot
</pre> 
        <p><strong><em>Name Changes: </em></strong></p> 
        <ul class="bullets"> 
         <li>In order to simplify working with paths ElementBuilder now remembers fill and stroke path attributes. Instead of having to call SetPathFill() and SetPathStroke() on every path Element, these attributes are now inherited from the last Element. This is consistent with inheritance of all other graphical attributes in previous versions of PDFNet.</li> 
         <li> For clarity PDFDoc::GetPageNumber() is renamed to PDFDoc::GetPagesCount().</li> 
        </ul> 
        <p><strong><em>Bug Fixes:</em></strong></p> 
        <ul> 
         <li>Incorrect transform matrix during editing of very complex pages.</li> 
        </ul> 
       </dd> 
      </dl> 
     </div> 
    </div> 
    <div id="rightContent" class="floatRight"> 
     <div id="nextSteps"> 
      <h5>Next Steps:</h5> 
      <ul class="calloutButtons"> 
       <li><a href="downloads.html"><img src="assets/images/buttons/download-trial.png" style="width:143px;" alt="Download Trial"></a></li> 
       <li><a href="licensing/index.html"><img src="assets/images/buttons/purchase.png" style="width:143px;" alt="Purchase"></a></li> 
      </ul> 
      <img src="assets/images/backgrounds/subNav_bg_bottom.gif" alt="Sub Navigation"> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="footerContainer"> 
   <div id="footer"> 
    <ul class="clear"> 
     <li class="first"> 2014 PDFTRON SYSTEMS, INC, ALL RIGHTS RESERVED | </li> 
     <li> <a href="legal.html">LEGAL</a> |</li> 
     <li> <a href="aboutus/careers.html">CAREERS</a> | </li> 
     <li><a href="contactus.html">CONTACT US</a></li> 
    </ul> 
   </div> 
  </div> 
  <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script> 
  <script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-6566170-1");
pageTracker._trackPageview();
} catch(err) {}</script> 
  <script type="text/javascript" src="assets/js/boilerplate.js"></script> 
  <script type="text/javascript">
try {
updateBoilerplate([]);
} catch(err) {}</script>   
 </body>
</html>