<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head> 
  <meta http-equiv="X-UA-Compatible" content="IE=Edge"> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
  <title>Programming Office documents with Open XML - XML tutorial - developer Fusion</title> 
  <link media="all" type="text/css" rel="stylesheet" href="http://cdn.developerfusion.com/site.compressed.css?v=2.0.0.52"> 
  <meta name="description" content="XML is at the heart of Office 2007, and Mike Ormond introduces its exciting possibilities."> 
  <!--[if IE 6]><style type="text/css">body { behavior: url("/csshover3.htc"); }</style><![endif]--> 
  <meta name="robots" content="noodp,noydir"> 
  <meta name="keywords" content="XML"> 
  <link rel="alternate" type="application/atom+xml" title="Tutorials &amp; Articles (Atom)" href="/tutorials/format/atom/"> 
  <link rel="alternate" type="application/rss+xml" title="Tutorials &amp; Articles (RSS)" href="/tutorials/format/rss/"> 
  <meta name="tweetmeme-title" content="Programming Office documents with Open XML"> 
  <link rel="canonical" href="http://www.developerfusion.com/article/84390/programming-office-documents-with-open-xml/"> 
 </head> 
 <body> 
  <!--[if lt IE 7]> <div style='clear: both; text-align: center; width: 820px; margin: 0 auto; position: relative;'> <a href="http://windows.microsoft.com/en-US/internet-explorer/products/ie/home?ocid=ie6_countdown_bannercode"><img src="http://storage.ie6countdown.com/assets/100/images/banners/warning_bar_0000_us.jpg" border="0" height="42" width="820" alt="You are using an outdated browser. For a faster, safer browsing experience, upgrade for free today." /></a></div> <![endif]--> 
  <div id="wrapper"> 
   <div id="header"> 
    <div id="logo">
     <a href="/">Developer Fusion - The global developer community for .NET and Java programmers</a>
    </div> 
   </div>
   <div id="nav" class="clearfix"> 
    <ul class="nav-root"> 
     <li id="navitem-.net" class="nav-item first"> <a title="" class="nav-link" href="/t/.net/">.NET</a> </li> 
     <li id="navitem-java" class="nav-item"> <a title="" class="nav-link" href="/t/java/">Java</a> </li> 
     <li id="navitem-open-source" class="nav-item"> <a title="" class="nav-link" href="/t/open-source/">Open Source</a> </li> 
     <li id="navitem-mobile" class="nav-item"> <a title="" class="nav-link" href="/t/mobile/">Mobile</a> </li> 
     <li id="navitem-database" class="nav-item"> <a title="" class="nav-link" href="/t/database/">Database</a> </li> 
     <li id="navitem-architecture" class="nav-item"> <a title="" class="nav-link" href="/t/architecture/">Architecture</a> </li> 
     <li id="navitem-ria" class="nav-item selected"> <a title="" class="nav-link" href="/t/ria/">RIA &amp; Web</a> 
      <div class="dropdown" id="navdrop-ria"> 
       <ul> 
        <li id="navitem-css" class=" first"> <a href="/t/css/">CSS</a></li> 
        <li id="navitem-flash"> <a href="/t/flash/">Flash</a></li> 
        <li id="navitem-flex"> <a href="/t/flex/">Flex</a></li> 
        <li id="navitem-html"> <a href="/t/html/">HTML</a></li> 
        <li id="navitem-javascript"> <a href="/t/javascript/">JavaScript</a></li> 
        <li id="navitem-silverlight"> <a href="/t/silverlight/">Silverlight</a></li> 
        <li id="navitem-xml" class=" last"> <a href="/t/xml/">XML</a></li>
       </ul> 
      </div> </li> 
     <li id="navitem-labs" class="nav-item last"> <a title="" class="nav-link" href="/tools/">Toolbox</a> </li> 
     <li class="search"> 
      <form action="/search/" method="post"> 
       <fieldset> 
        <div class="search-panel"> 
         <input type="text" class="search-query text_autoclear" name="query" value="Search this site" id="search_query" maxlength="20"> 
         <input type="submit" class="search-button" value="  " title="Search"> 
        </div> 
       </fieldset> 
      </form></li> 
    </ul> 
   </div> 
   <div id="subnav" class="subnav clearfix"> 
    <div class="breadcrumb-wrapper"> 
     <ul class="breadcrumb"> 
      <li class="crumb1"> <a href="/t/xml/">XML</a></li> 
     </ul> 
     <ul class="breadcrumb-subnav"> 
      <li class=" first"> <a title="News" href="/t/xml/news/">News</a></li> 
      <li class="selected"> <a title="Tutorials" href="/t/xml/tutorials/">Tutorials</a></li> 
      <li> <a title="Code" href="/t/xml/code/">Code</a></li> 
      <li> <a title="XML Training &amp; Events" href="/t/xml/training/">Training</a></li> 
      <li> <a title="XML User Groups" href="/t/xml/usergroups/">User Groups</a></li> 
      <li> <a title="Books" href="/t/xml/books/">Books</a></li> 
      <li> <a title="Podcasts" href="/t/xml/media/">Podcasts</a></li> 
      <li> <a title="Forum" href="/t/xml/forum/">Forum</a></li> 
      <li class=" last"> <a title="Jobs" href="/t/xml/jobs/">Jobs</a></li> 
     </ul> 
    </div> 
   </div> 
   <div id="ad-leaderboard"> 
    <div id="div-gpt-ad-1342895737372-0" style="width:728px; height:90px;"></div> 
   </div> 
   <div id="content" class="clearfix"> 
    <div id="main-content" class="clearfix"> 
     <div id="breadcrumb" class="clearfix"> 
      <ul class="breadcrumb"> 
       <li class="crumb1"><a href="/">Home</a></li> 
       <li class="crumb2"> <a href="/t/ria/">RIA &amp; Web</a> </li> 
       <li class="crumb3"> <a href="/t/xml/">XML</a> </li> 
       <li> <a title="Tutorials" href="/t/xml/tutorials/">Tutorials</a> </li> 
      </ul> 
     </div> 
     <div class="detail-page"> 
      <h1 class="">Programming Office documents with Open XML</h1> 
      <div class=""> 
       <div class="article-info clearfix"> 
        <span class="label"> 28 Jun 2010 | by <a href="/profile/mike%20ormond/" id="author-name" rel="author">Mike Ormond</a> | Filed in </span> 
        <ul class="detail-functions"> 
         <li class="comments"> <a href="#disqus_thread" data-disqus-identifier="page-84390">Comments</a> </li> 
         <li class="pdf"><a href="/article/84390/programming-office-documents-with-open-xml/pdf/">PDF</a></li> 
        </ul> 
        <ul class="tag-list clearfix"> 
         <li> <a href="/t/xml/">XML</a> </li> 
        </ul> 
        <div class=" social-media addthis_toolbox addthis_default_style " addthis:title="Programming Office documents with Open XML"> 
         <a style="float:right" class="addthis_counter addthis_pill_style"></a> 
         <a class="addthis_button_google_plusone" g:plusone:size="medium" g:plusone:count="false"></a> 
         <a class="addthis_button_tweet" tw:via="developerfusion" tw:count="none"></a> 
         <a class="addthis_button_facebook_like" fb:like:layout="button_count"></a> 
        </div> 
       </div> 
       <div class="content"> 
        <div class="articlepartner"> 
         <em>This article was originally published in VSJ, which is now part of Developer Fusion.</em> 
        </div> 
        <div id="article-body">
          Not only has the 2007 Microsoft Office system acquired a new user interface, its file format has also been given a makeover; a new, XML-based format for Word, Excel and PowerPoint. Welcome to the new world of Open XML and the opportunities it creates. 
         <p>Office and XML are no strangers to each other. In fact XML integration has been a feature of Office since Office XP. Innovations in Office 2003 allowed you to save your documents as XML and even associate a custom XML schema with your document. The 2007 Microsoft Office system takes things a whole lot further; XML is really at the heart of this release. Do not fear though, backward compatibility is enabled through the “Microsoft Office Compatibility Pack for Word, Excel and PowerPoint 2007 File Formats”. This free download allows users of Microsoft Office 2000, Office XP, or Office 2003 to open, edit, and save files using the Open XML File Format. </p>
         <p>In this article we take a look at the fundamentals of the Open XML File Format and explore some key scenarios where building a solution around the new file format makes your life a breeze. </p>
         <h3>Open XML Architecture</h3> Every Office Open XML format file is a collection of discrete document parts, connected via relationships and packaged together in a ZIP container as specified by the Open Packaging Conventions (OPC) described in Part 2 of the ECMA standard. 
         <p>Most parts are XML documents conforming to a specific reference schema. For native binary content types (e.g. a JPEG or WMA file) it doesn’t make sense to convert to XML, so these parts are stored in their native format. It is also possible to store your own custom XML parts (you don’t even have to specify a schema). Thus content, resources and metadata exist as discrete, addressable document parts within a single container document. </p>
         <p>Let’s clarify a little terminology: </p>
         <ul> 
          <li>A “Package” is the main ZIP container that hosts all the document parts.</li> 
          <li>“Part” is a generic term for items stored within the container, be they resources, content or metatdata, XML or binary. Within a package, parts are organized into folders.</li> 
          <li>“Relationship”: Rather than relying on the physical layout of parts within the package, relationships are used to impose structure. Relationships connect packages to parts and individual parts to other parts. The entire package can be navigated by starting at the “root” (package) level, and traversing relationships to arrive at the part you require.</li> 
         </ul> Each Office Open XML Format document has a couple of “special” locations (URIs): 
         <ul> 
          <li><b>/[Content_Types].xml</b> – lists the content type of every part in the package</li> 
          <li><b>/_rels/.rels</b> – specifies top-level relationships between package and parts</li> 
         </ul> Working with an Office Open XML format file is simplicity itself. The document container can be accessed using standard ZIP tools or APIs. The XML parts themselves can be manipulated using familiar XML tools or APIs (such as the .NET Framework’s System.Xml classes). There is even a new API in the .NET Framework 3.0, System.IO.Packaging, designed to access, navigate and manipulate OPC files (and Office Open XML format files in particular). 
         <p>Let’s try and make all this a little more concrete. If you have Word 2007 available (if you don’t, you can <a href="http://ukireland.trymicrosoftoffice.com/" target="_blank">download a free trial</a>), create a new blank Word document. Enter your name on the page, save the file to a convenient location and close Word. The first thing you’ll notice is the new file extension, .docx. Open XML File Format documents have an x appended on the file extension. “Macro enabled” Office Open XML File Format documents have an “m” (for macros) appended to the file extension. Macros will not execute in documents without the “m” extension. <a href="http://office.microsoft.com/en-us/help/HA100069351033.aspx" target="_blank">View a more comprehensive list of Office Open XML extensions.</a> </p>
         <p>Change the file extension of your new Word document to .zip and double click the file to open in Windows Explorer. You should see something that looks like <b>Figure 1</b>. </p>
         <p><img src="/pix/articleimages/jul07/office1.jpg" width="400" height="418" alt="Figure 1" vspace="2"><small><br> Figure 1: Opening .docx as .zip</small> </p>
         <p>Navigate to the .rels file in the _rels folder – this contains the top-level package relationships – and open the file. Notice that this is an XML file with a &lt;Relationships&gt; element containing a number of &lt;Relationship&gt; child elements. One (and only one) of these will be of type “…/officeDocument”. This is the relationship for the main document part and the Target URI will be “word/document.xml”. If we follow this path and open the word folder, you will find document.xml and also a sub-folder called _rels. At each level in the folder hierarchy, the _rels folder contains the relationship parts for document parts at that level. So, for example, in the word/_rels folder you will find a part called document.xml.rels which contains all the relationships from document.xml to other document parts. </p>
         <p>We could carry on exploring Open XML File Format documents with Windows Explorer, but a better tool for this purpose is the Open XML Package Explorer (<b>Figure 2</b>). </p>
         <p><img src="/pix/articleimages/jul07/office2.jpg" width="500" height="345" alt="Figure 2" vspace="2"><small><br> Figure 2: The Package Explorer</small> </p>
         <p>Open an Open XML File Format document in Package Explorer and the Document Inspector TreeView shows you a relationship-centric view of the document parts (you can also switch on display of relationship IDs and folder names). You can open XML parts in the XML editor, inspect properties and even validate documents. </p>
         <p>Package Explorer is a useful tool for inspecting and modifying Open XML File Format documents interactively, but what about tools for coding Open XML File Format solutions? System.IO.Packaging and System.Xml are about to become your new best friends. </p>
         <p>System.IO.Packaging is a collection of classes that support the storage of multiple objects in a single container. Specifically, it provides classes to work with Office Open XML files and their components. So, for example, there are Package, PackagePart and PackageRelationship classes mapping to the package, part and relationship entities described previously. These classes allow you to open an Office Open XML document, navigate through its relationships, get document parts, modify them delete them, save them etc. </p>
         <h3>Scenarios</h3> The Office Open XML File Formats open up a wealth of new and exciting possibilities. I’ve selected just three key scenarios that are extremely difficult if not impossible to achieve with binary format documents. They become achievable and sometimes trivial with the transparency provided through the Office Open XML format. In each of the requirements I’ve assumed that we’re talking about some form of bulk processing (typically on the server) or at least processing which, for some good reason, is being carried out without the relevant Office client application. For each of the following examples, I’ve added a reference to the WindowsBase assembly (this is where System.IO.Packaging lives) and added the relevant using statements. 
         <h3>Server Document Generation</h3> 
         <b><i>Requirement:</i></b> Generation of Microsoft Office documents from custom data 
         <p><b><i>Example:</i></b> The order processing process for my company requires the bulk generation of customer invoices using data pulled from back end systems. </p>
         <p>In Office 2003 it was certainly possible to generate Office documents on the server by creating XML documents conforming to the relevant reference schema (WordprocessingML, SpreadsheetML). However, this is somewhat cumbersome, and it’s not possible to represent all types of document content in XML (e.g. an Excel chart). </p>
         <p>Office Open XML File format documents, on the other hand, are full fidelity. Anything you can do in the Office client application can be represented. In addition, Word 2007 introduces a very powerful and convenient mechanism for document generation; content controls. As well as being a document structuring feature, content controls also support the notion of data/view separation by providing the capability to databind to our custom XML. </p>
         <p>We know you can store your own custom XML parts within any Office Open XML document (a feature known as the custom XML store). Content controls can be databound to elements in the custom XML store via Xpath binding expressions. This separates data from presentation and makes it simple to modify document content by switching out a custom XML part for a different one. The pattern then, is to create a template document in Word, including the static content, structure, formatting and content controls that represent the final document. Binding expressions on the content controls are then set up, mapping to nodes in a custom XML part we’ve inserted in the custom XML store (the Word 2007 Content Control Toolkit is a good tool for this). Each time we want to create a new document, we simply take a copy of the template and replace the custom XML part with a new one containing the data we require. When this document is opened, the content controls bind to our data creating a new document. </p>
         <p>Let’s take the example of generating invoices. An invoice may require the following data: </p>
         <pre>&lt;Invoice&gt;
	&lt;Customer&gt;
		&lt;CustomerCompanyName&gt;
			&lt;/CustomerCompanyName&gt;
		&lt;CustomerName&gt;&lt;/CustomerName&gt;
		&lt;Address&gt;
			&lt;Street&gt;&lt;/Street&gt;
			&lt;Town&gt;&lt;/Town&gt;
			&lt;City&gt;&lt;/City&gt;
			&lt;County&gt;&lt;/County&gt;
			&lt;Postcode&gt;&lt;/Postcode&gt;
		&lt;/Address&gt;
	&lt;/Customer&gt;
	&lt;Order&gt;
		&lt;OrderID&gt;&lt;/OrderID&gt;
		&lt;PurchaseDate&gt;&lt;/PurchaseDate&gt;
		&lt;Product&gt;&lt;/Product&gt;
		&lt;Quantity&gt;&lt;/Quantity&gt;
	&lt;/Order&gt;
&lt;/Invoice&gt;</pre> I create an “Invoice” XML document such as the above and insert it into the custom XML store (this can be done manually, through the Word Object Model, or using the Word 2007 Content Control Toolkit). Having laid out the content controls in my document, I bind these to the XML elements using XPath expressions. Again I can do this manually, or using the Word Object Model, but by far the easiest way is the Content Control Toolkit which has drag and drop support for mapping content controls to elements in your custom XML part. 
         <p>Having created our template, we can go ahead and generate some invoices. Our server code will look something like this: </p>
         <p><b>1.</b> Extract the invoice data and generate the “Invoice” XML document: </p>
         <pre>private XmlDocument 
	GenerateInvoiceXml()
{
	using (SqlConnection con =
		new SqlConnection(…))
	{
		//Code here would extract
		//invoice data as XML Document
	}
	return xDoc;
}</pre> 
         <b>2.</b> Copy the template file to a new file with a unique filename: 
         <pre>private string
	GenerateTemplateDocument(string
	UniqueIdString)
{
	//Code here would create new
	//“template” file with unique
	//filename
	//Left out for brevity as it’s just
	//a generic file copy
	return newFileName;
}</pre> 
         <b>3.</b> Using the System.IO.Packaging Package class, open the new file we’ve just created: 
         <pre>using (Package myPackage =
Package.Open(fileName, FileMode.Open,
	FileAccess.ReadWrite))</pre> 
         <b>4.</b> Navigate to the main document part by iterating over relationships of type: 
         <pre>http://schemas.openxmlformats.org/
	officeDocument/2006/
	relationships/officeDocument</pre> I’ve set up a constant for this (docRelationshipType): 
         <pre>foreach (PackageRelationship docRel in
	myPackage.GetRelationshipsByType(
		docRelationshipType))
{
	Uri documentUri =
		PackUriHelper.ResolvePartUri(
		new Uri(“/”, UriKind.Relative),
		docRel.TargetUri);
	PackagePart documentPart =
		myPackage.GetPart(documentUri);</pre> Note there will only be one relationship of this type in a valid document, so we can break out of this foreach after the first iteration. 
         <p><b>5.</b> Navigate to our custom XML part using a similar pattern to the above but this time we’re looking for a relationship of type (“…/customXml”): </p>
         <pre>foreach (PackageRelationship cusRel in
documentPart.GetRelationshipsByType(
	xmlRelationshipType))
{
	Uri customXmlUri =
		PackUriHelper.ResolvePartUri(
		new Uri(“/”, UriKind.Relative),
		cusRel.TargetUri);</pre> 
         <b>6.</b> Replace the existing custom XML part with a new part populated with the data we generated in step 1. Delete the existing part and create a new one with the same URI. Save our XML document into this part. We also need to recreate one relationship from the custom XML part to its properties part: 
         <pre>myPackage.DeletePart(customXmlUri);
PackagePart customXmlPart =
		myPackage.CreatePart(
			customXmlUri,
			“application/xml”);
xDoc.Save(customXmlPart.GetStream());
Uri uriDataRelProps = new Uri(
		“itemProps1.xml”,
			UriKind.Relative);
customXmlPart.CreateRelationship(
		uriDataRelProps,
		TargetMode.Internal,
		strCustomXMLPropsRel);</pre> This is one possible approach. Another would be to start with a template without a custom XML part and create the part, relationships etc from scratch. 
         <p><b>7.</b> Close the package and we now have a new document that when opened displays our invoice data. </p>
         <p>Using this technique it is very easy to generate complex Word documents, dynamically bound to custom data using the data/view separation capabilities of content controls and Office Open XML’s custom XML store. </p>
         <h3>Content Inspection &amp; Removal</h3> 
         <b><i>Requirement:</i></b> The ability to scan the contents of a collection of Microsoft Office documents to check for the presence of, and potentially remove, specified entities (e.g. user comments, custom code, etc). 
         <p><b><i>Example:</i></b> PowerPoint documents are uploaded to our SharePoint server for publication. As each document is uploaded, it should be checked for the presence of slide comments. If comments are found, they should be removed before publication. </p>
         <p>A common business requirement is the need to inspect documents and potentially remove certain types of content prior to publication or archiving. In fact, the latest versions of Word, PowerPoint and Excel have built-in functionality to do just that; the Document Inspector. The transparency provided by the Open XML File Format also makes it straightforward to inspect and remove document content without the need for the relevant client application. </p>
         <p>In this example, we want to write some code to inspect PowerPoint documents, checking for slide notes and removing them prior to the document being uploaded to our SharePoint repository. We could perhaps hook this through an event in SharePoint Server or use the built-in workflow capabilities to execute our inspection code – the important part is the code we’re going to execute. </p>
         <p>In this case the pattern is to open the PowerPoint document package and find the main document part (typically this will be ppt/presentation.xml but we will use the standard, and correct technique of navigating the package relationships to find it). From there we iterate through the individual slides checking if each has an associated notes part. If it does, we delete the relationship and the notes part before moving on to the next slide. </p>
         <p><b>1.</b> Open the package and get the main document part: </p>
         <pre>using (Package pptPackage =
Package.Open(fileName, FileMode.Open,
		FileAccess.ReadWrite))
{
	foreach (PackageRelationship
		documentRelation in
	pptPackage.GetRelationshipsByType(
				docRelationshipType))
	{
		Uri documentUri =
		PackUriHelper.ResolvePartUri(
		new Uri(“/”, UriKind.Relative),
			documentRelation.TargetUri);
		PackagePart documentPart =
			pptPackage.GetPart(
			documentUri);</pre> 
         <b>2.</b> Iterate through the collection of slides: 
         <pre>foreach (PackageRelationship
	slideRelation in
documentPart.GetRelationshipsByType(
			slideRelationshipType))
{
	Uri slideUri =
		PackUriHelper.ResolvePartUri(
		documentPart.Uri,
		slideRelation.TargetUri);
	PackagePart slidePart =
		pptPackage.GetPart(slideUri);</pre> 
         <b>3.</b> For each slide, get the related notes, delete the relationship and the notes part itself: 
         <pre>foreach (PackageRelationship
	notesRelation in
	slidePart.GetRelationshipsByType(
			notesRelationshipType))
{
	Uri notesUri =
		PackUriHelper.ResolvePartUri(
		slidePart.Uri,
		notesRelation.TargetUri);
	slidePart.DeleteRelationship(
		notesRelation.Id);
	pptPackage.DeletePart(notesUri);
	break;
}</pre> 
         <b>4.</b> Close the package and we have a modified version of the PowerPoint document with all slide notes removed. 
         <h3>Document Profiling</h3> 
         <b><i>Requirement:</i></b> The ability to associate user-defined metadata with documents and easily extract that data as part of document processing. 
         <p><b><i>Example:</i></b> As part of our document workflow, metadata about the author, contract, customer etc. is captured. When the document is stored in our document repository, the metadata is recorded for the purposes of tagging &amp; indexing. </p>
         <p>Often it is desirable to extract document metadata at key stages in a workflow. Perhaps we need to extract the data to be used by the workflow itself (e.g. to enforce a records management policy), or perhaps we want to use the data for search and indexing purposes. Either way, we want to be able to bulk process documents and extract custom properties. </p>
         <p>These properties may be core, extended, custom or SharePoint properties, or even a custom XML part we’ve inserted for the purposes of storing our own metadata. It’s quite likely they could be a combination of these different types of metadata. To keep things simple, I’m going to assume we’ve stored out metadata as custom properties in an Excel document. You can access / create custom properties from the Document Information Panel. Select “Advanced Properties” and click on the “Custom” tab (see <b>Figure 3</b>). </p>
         <p><img src="/pix/articleimages/jul07/office3.jpg" width="450" height="370" alt="Figure 3" vspace="2"><small><br> Figure 3: Custom properties</small> </p>
         <p><b>1.</b> Open the package and get the custom properties part. This time we iterate over relationships of type “…/custom-properties” as this is a top-level relationship (and there will be only one of them in a valid document): </p>
         <pre>using (Package exPackage =
	Package.Open(docName,
	FileMode.Open,
		FileAccess.ReadWrite))
{
	foreach (PackageRelationship
		cpRelation in
	 exPackage.GetRelationshipsByType(
	customPropertiesRelationshipType))
	{
		Uri documentUri =
		PackUriHelper.ResolvePartUri(
		new Uri(“/”, UriKind.Relative),
			cpRelation.TargetUri);
		PackagePart cpPart =
		exPackage.GetPart(documentUri);</pre> 
         <b>2.</b> If there is a custom properties part in the document, set up the relevant namespaces and load the custom properties part into an XML document: 
         <pre>if (cpPart != null)
{
NameTable nt = new NameTable();
XmlNamespaceManager nsManager =
	new XmlNamespaceManager(nt);
nsManager.AddNamespace(“d”,
	customPropertiesSchema);
nsManager.AddNamespace(“vt”,
	customVTypesSchema);
XmlDocument xdoc =
	new XmlDocument(nt);
xdoc.Load(cpPart.GetStream());</pre> 
         <b>3.</b> Iterate through the list of properties we want to fetch (requiredProps) and extract its value from the XML document. Add to a Dictionary of property name / value pairs: 
         <pre>foreach (string propName in
	requiredProps)
{
	string searchString =string.Format(
“d:Properties/d:property[@name=’{0}’]”,
		propName);
	XmlNode xNode =
		xdoc.SelectSingleNode(
		searchString, nsManager);
	if ((xNode != null))
		propDictionary.Add(propName,
			xNode.InnerText);
}</pre> 
         <b>4.</b> At the end of this we have a Dictionary object with our property name / value pairs to do with what we will. 
         <h3>Conclusion</h3> These three examples demonstrate the power of the Office Open XML File Format in tackling a whole swathe of typical document management challenges. And there are many others that spring to mind: document assembly, user interface customization, corporate re-branding, etc. 
         <p>I’d encourage you to take a look at the 2007 Microsoft Office system, take a look at the Office Open XML File Formats in particular, and keep an eye out for situations where they may make your life much easier than it has been in the past. </p>
         <p></p>
         <hr> 
         <p><small>Mike Ormond is a Developer Evangelist at Microsoft who focuses on web technologies and Office development. You can read his thoughts on his blog at http://blogs.msdn.com/mikeormond or send him your thoughts at <a href="mailto:mike.ormond@microsoft.com">mike.ormond@microsoft.com</a>.</small> </p>
        </div> 
       </div> 
       <h2>You might also like...</h2> 
       <div class="outbrain_widget_wrapper"> 
        <div id="outbrain_widget" class="outbrain"></div> 
       </div> 
       <div id="comments"> 
        <h2>Comments</h2> 
        <div id="disqus_thread"></div> 
       </div> 
      </div> 
     </div> 
    </div> 
    <div id="secondary-content" class="clearfix"> 
     <div class="panel panel-link"> 
      <h2><a href="/t/xml/tutorials/">XML tutorials</a></h2> 
      <ul> 
       <li><a href="/article/84298/linqing-to-xml/">LINQ-ing to XML</a></li> 
       <li><a href="/article/84372/data-integration-suite/">Data Integration Suite</a></li> 
       <li><a href="/column/8326/losing-your-religion-suns-tim-bray-on-surviving-the-tech-downturn/">Losing your religion: Sun's Tim Bray on surviving the tech downturn</a></li> 
       <li><a href="/article/7570/understanding-open-xml/">Understanding Open XML</a></li> 
      </ul> 
     </div> 
     <div class="panel panel-link"> 
      <h2><a href="/t/xml/books/">XML books</a></h2> 
      <ul class="book-list clearfix"> 
       <li> 
        <div class="cover">
         <a href="/book/93623/access-2010-bible/"><img src="/resource/get/content/93623/icon/" alt="Access 2010 Bible"></a>
        </div> <h3><a href="/book/93623/access-2010-bible/">Access 2010 Bible</a></h3> <p>The expert guidance you need to get the most out of Access 2010Get the Access 2010 information you need to succeed with this comprehensive reference. If this is your first encounter with Access, you'll appreciate the thorough attention to database fu...</p> </li> 
      </ul> 
     </div>
     <div id="ad-mpu"> 
      <div id="div-gpt-ad-1342895737372-1" style="width:300px; height:250px;"></div> 
     </div> 
     <div class="panel panel-link"> 
      <h2><a href="/t/xml/forum/">XML forum discussion</a></h2> 
      <ul class="discuss"> 
       <li> <h3><a href="/forum/thread/36994/">XBrowse</a></h3> <h4> by liuying9104 <span style="font-weight: bold;">(3 replies)</span></h4> </li> 
       <li> <h3><a href="/forum/thread/55009/">generating xml file</a></h3> <h4> by huangdm05941 <span style="font-weight: bold;">(2 replies)</span></h4> </li> 
       <li> <h3><a href="/forum/thread/54967/">urgent</a></h3> <h4> by huangdm05941 <span style="font-weight: bold;">(2 replies)</span></h4> </li> 
       <li> <h3><a href="/forum/thread/54900/">How to increment variable value in xslt</a></h3> <h4> by huangdm05941 <span style="font-weight: bold;">(1 replies)</span></h4> </li> 
       <li> <h3><a href="/forum/thread/52228/">Inside Open XML</a></h3> <h4> by jettimadhu <span style="font-weight: bold;">(2 replies)</span></h4> </li> 
      </ul> 
     </div> 
     <div class="panel panel-link"> 
      <h2><a href="/t/xml/media/">XML podcasts</a></h2> 
      <ul> 
       <li> <h3>Stack Overflow Podcast: <a href="/media/132723/se-podcast-27-dave-winer/">SE Podcast #27 – Dave Winer</a></h3> <h4>Published 5 years ago, running time 1h2m</h4> <p>Jeff &amp; Joel are joined today by Dave Winer, who’s upset that we don’t have a jingle to start the show! He “invented” (well, pioneered, really) the&nbsp;XML-RPC protocol. Dave tells us the story of how and why the protocol came to be. Right now, Dave’s working on a “magnificent symphony of software <span class="tags"></span></p> </li> 
      </ul> 
     </div> 
    </div> 
   </div>
   <div id="sitemap"> 
    <div id="sitemap-content"> 
     <div class="section"> 
      <h3>Contribute</h3> 
      <p> Why not <a href="/about-us/write/">write for us</a>? Or you could <a href="/training/new/">submit an event</a> or a <a href="/usergroups/new/">user group</a> in your area. Alternatively just <a href="http://feedback.developerfusion.com">tell us what you think</a>!</p> 
      <p></p> 
     </div> 
     <div class="section"> 
      <h3>Web Development</h3> 
      <ul> 
       <li><a href="http://quickstart.developerfusion.co.uk/quickstart/">ASP.NET Quickstart</a></li> 
       <li><a href="/news/">Programming news</a></li> 
       <li><a href="/t/java/">Java programming</a></li> 
       <li><a href="/t/asp.net/tutorials/">ASP.NET tutorials</a></li> 
       <li><a href="/t/csharp/">C# programming</a></li> 
      </ul> 
     </div> 
     <div class="section"> 
      <h3>Developer Jobs</h3> 
      <ul> 
       <li><a href="/t/asp.net/jobs/">ASP.NET Jobs</a></li> 
       <li><a href="/t/java/jobs/">Java Jobs</a></li> 
       <li><a href="/jobs/">Developer Jobs</a></li> 
      </ul> 
     </div> 
     <div class="section"> 
      <h3>Our tools</h3> 
      <p>We've got automatic conversion tools to convert <a href="/tools/convert/csharp-to-vb/">C# to VB.NET</a>, <a href="/tools/convert/csharp-to-vb/">VB.NET to C#</a>. Also you can <a href="/tools/compressjavascript/">compress javascript</a> and <a href="/tools/compresscss/">compress css</a> and <a href="/tools/sql-connection-string/">generate sql connection strings</a>. </p> 
     </div> 
    </div> 
   </div> 
   <div id="members"> 
    <div class="member-panel"> 
     <ul> 
      <li class="first" id="join-us"><a href="/user/signin/?returnUrl=%2Farticle%2F84390%2Fprogramming-office-documents-with-open-xml%2F">Join us</a></li> 
      <li id="sign-in"><a href="/user/signin/?returnUrl=%2Farticle%2F84390%2Fprogramming-office-documents-with-open-xml%2F">Sign in</a></li> 
      <li class="country"><img src="http://cdn.developerfusion.com/images/shared/shim.gif" class="country-icon country-icon-us" alt="United States" title="United States"> <a href="/location/north-america/us/">United States</a></li> 
     </ul> 
     <div id="sign-in-panel"> 
      <form action="/user/signin/?returnUrl=%2Farticle%2F84390%2Fprogramming-office-documents-with-open-xml%2F" method="post"> 
       <input name="__RequestVerificationToken" type="hidden" value="AX0ciXpUxwqnG5CLSqJ-wks9OKMRke_bN1TuL0EzmYgcr2jWwjz20BPRgSxq9GloJxbmXzo2Ch8NUFaz1_SOUYpPmNbtmVgK3pdtysfFt8KUtFyhtHn8khVsF-SwOtUyOEYN2w2"> 
       <fieldset> 
        <label for="QuickSignInUsername">Username</label>
        <input class="text" id="QuickSignInUsername" type="text" name="EmailAddress"> 
        <label for="QuickSignInPassword">Password</label>
        <input class="text" id="QuickSignInPassword" type="password" name="Password"> 
        <input type="hidden" name="RememberMe" value="true"> 
        <input type="submit" value="Sign in"> 
       </fieldset> 
       <div class="cancel">
        <a href="#">Cancel</a>
       </div> 
      </form> 
     </div>
     <div class="quote">
       “C++: an octopus made by nailing extra legs onto a dog.” 
      <span class="author">- Steve Taylor</span> 
     </div> 
    </div> 
   </div> 
   <div id="footer" class="clearfix"> 
    <div id="footer-content"> 
     <ul> 
      <li><a rel="nofollow" href="http://feedback.developerfusion.com/">Send feedback</a></li> 
      <li><a href="http://blog.developerfusion.com/">Blog</a></li> 
      <li><a href="/about-us/" rel="nofollow">About us</a></li> 
      <li><a href="/about-us/contact/" rel="nofollow">Contact us</a></li> 
      <li><a href="/about-us/advertise/" rel="nofollow">Advertise</a></li> 
     </ul> 
     <div class="copyright">
      © 
      <a href="/about-us/legal/" rel="nofollow">1999-2017 Developer Fusion Ltd</a>
     </div> 
     <div class="hosted-by">
      <a href="http://www.everycity.co.uk/#utm_source=devfusion&amp;utm_medium=footer&amp;utm_campaign=devfusion">Managed hosting by Everycity</a>
     </div> 
    </div> 
   </div> 
  </div> 
  <script type="text/javascript" src="http://cdn.developerfusion.com/scripts/site.compressed.js?v=2.0.0.52"></script> 
  <script type="text/javascript">
  
  window.adSlots = window.adSlots || {};
  window.adSlots.mpu = true;
  window.adSlots.leaderboard = true;
</script> 
  <script type="text/javascript">
if (window.Site) {
  var SiteInstance = new Site({ assetUrl : 'http://cdn.developerfusion.com/', version: '2.0.0.52', adSlots : window.adSlots, topic: 'xml', topics:['xml'], debug : false });
}
</script> 
  <script type="text/javascript">
SiteInstance.writeDelayedScript('http://static.developerfusion.com/scripts/highlight.compressed.js');
</script> 
  <script type="text/javascript">
    var OB_isLateStarter = true;
    var OB_containerClass = 'outbrain';
    var OB_permalink = 'http://www.developerfusion.com/article/84390/programming-office-documents-with-open-xml/';
    SiteInstance.writeDelayedScript('http://widgets.outbrain.com/outbrainWidget.js');
    var disqus_shortname = 'devfusion';
    var disqus_identifier = 'page-84390';
    var disqus_url = OB_permalink;
    SiteInstance.writeDelayedScript('http://devfusion.disqus.com/embed.js');
    SiteInstance.writeDelayedScript('http://devfusion.disqus.com/count.js');
  </script> 
  <!-- Google Code for Remarketing Tag --> 
  <!--
Remarketing tags may not be associated with personally identifiable information or placed on pages related to sensitive categories. See more information and instructions on how to setup the tag on: http://google.com/ads/remarketingsetup
---------------------------------------------------> 
  <script type="text/javascript">
/* <![CDATA[ */
var google_conversion_id = 959838252;
var google_custom_params = { traffic_source: 'devfusion' };
var google_remarketing_only = true;
/* ]]> */
</script> 
  <script type="text/javascript" src="//www.googleadservices.com/pagead/conversion.js">
</script>  
 </body>
</html>