<!doctype html>
<html>
 <head>
  <meta name="viewport" content="width=device-width, user-scalable=no">
  <meta name="keywords" content="REPL runkit tonic playground javascript node npm module prototype prototyping API server">
  <meta name="author" content="runkit.com">
  <meta name="description" content="RunKit notebooks are interactive javascript playgrounds connected to a complete node environment right in your browser. Every npm module pre-installed.">
  <link type="application/opensearchdescription+xml" rel="search" href="https://static.tonicdev.net/search.xml">
  <script src="//use.typekit.net/cwk4eab.js"></script>
  <script>try{Typekit.load({ async: true });}catch(e){}</script>
  <link rel="stylesheet" href="https://static.tonicdev.net/assets/vendor/c3/c3.min.css?v=1">
  <link rel="stylesheet" href="https://static.tonicdev.net/assets/vendor/bootstrap/bootstrap.css">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">
  <link rel="stylesheet" href="https://static.tonicdev.net/assets/styles/base.css?v=4a6e32b3de2d8d354cc4190260826842fcac3f02">
  <link rel="stylesheet" href="https://static.tonicdev.net/assets/styles/error-pages.css?v=4a6e32b3de2d8d354cc4190260826842fcac3f02">
  <link rel="stylesheet" href="https://static.tonicdev.net/assets/styles/npm.css?v=4a6e32b3de2d8d354cc4190260826842fcac3f02">
  <link rel="stylesheet" href="https://static.tonicdev.net/assets/vendor/codemirror/lib/codemirror.css">
  <link rel="stylesheet" href="https://themes.runkitcdn.com/runkit-light.css?v=4a6e32b3de2d8d354cc4190260826842fcac3f02">
  <title>RunKit</title>
 </head>
 <body>
  <style data-aphrodite></style>
  <div id="react-container">
   <div data-reactroot="" data-reactid="1" data-react-checksum="-1513212153">
    <script src="https://embed.runkit.com" data-reactid="2"></script>
    <div data-reactid="3">
     <div data-reactid="4">
      <div data-reactid="5">
       <div data-reactid="6">
        <div class="package-wrapper show-banner" data-reactid="7">
         <div class="playground" style="background:#FFF;" data-reactid="8">
          <header data-reactid="9">
           <a style="float:right;margin:10px 50px;" href="https://runkit.com/register" class="register-button" data-reactid="10">Sign Up for Free</a>
           <h1 style="font-weight:bold;font-size:32px;margin:0;margin-top:10px;" data-reactid="11"><span data-reactid="12"><a style="text-decoration:none;color:#333;font-family:&quot;Fira Sans&quot;, &quot;fira-sans&quot;, &quot;Source Sans Pro&quot;, sans-serif;" href="https://runkit.com" data-reactid="13">RunKit</a></span><span style="color:#aaa;" data-reactid="14"> + </span><a href="https://npmjs.org/" style="color:#888;" title="powered by npm" data-reactid="15"><img src="https://static.tonicdev.net/assets/images/npm-logo.svg" width="70" style="margin-left:2px;" data-reactid="16"></a></h1>
           <h4 class="subheading" style="margin:10px 0;max-width:420px;line-height:1.3em;" data-reactid="17">
            <!-- react-text: 18 -->Try any Node.js package 
            <!-- /react-text --><span class="collapse-mobile" data-reactid="19">right</span>
            <!-- react-text: 20 --> in your browser
            <!-- /react-text --></h4>
          </header>
          <div class="share-link collapse-mobile" data-reactid="21">
           <div style="opacity:0;word-break:break-all;" data-reactid="22">
            <!-- react-text: 23 -->Share this code: 
            <!-- /react-text -->
            <a href="false" target="_blank" style="color:#888;font-style:italic;" data-reactid="24"></a>
           </div>
          </div>
          <div class="playground-content" data-reactid="25">
           <p data-reactid="26">
            <!-- react-text: 27 -->This is a 
            <!-- /react-text --><code data-reactid="28">playground</code>
            <!-- react-text: 29 --> to test code. It runs a full 
            <!-- /react-text --><code data-reactid="30">Node.js</code>
            <!-- react-text: 31 --> environment
            <!-- /react-text --><span class="collapse-mobile" data-reactid="32">
             <!-- react-text: 33 --> and already has all of 
             <!-- /react-text --><code data-reactid="34">npm</code>
             <!-- react-text: 35 -->’s 400,000 packages pre-installed
             <!-- /react-text --><span data-reactid="36">
              <!-- react-text: 37 -->, including 
              <!-- /react-text --><code data-reactid="38">secure-filters</code></span></span><span class="expand-mobile" data-reactid="39">
             <!-- react-text: 40 --> with all 
             <!-- /react-text --><code data-reactid="41">npm</code>
             <!-- react-text: 42 --> packages installed
             <!-- /react-text --></span>
            <!-- react-text: 43 -->. 
            <!-- /react-text --><b data-reactid="44">Try it out</b>
            <!-- react-text: 45 -->:
            <!-- /react-text --></p>
           <div data-reactid="46">
            <div data-reactid="47">
             var secureFilters = require("secure-filters")
            </div>
           </div>
           <div class="blank-doc-help" data-reactid="48">
            <ul data-reactid="49">
             <li data-reactid="50">
              <!-- react-text: 51 -->all documents on RunKit are 
              <!-- /react-text --><span style="font-weight:bold;" data-reactid="52">public</span></li>
             <li data-reactid="53"><code data-reactid="54">require()</code>
              <!-- react-text: 55 --> any package directly from npm
              <!-- /react-text --></li>
             <li data-reactid="56">
              <!-- react-text: 57 -->use 
              <!-- /react-text --><a href="https://runkit.com/runkit/es6-arrow-functions" target="_blank" data-reactid="58">arrow functions</a>
              <!-- react-text: 59 -->, 
              <!-- /react-text --><a href="https://runkit.com/runkit/es6-classes" target="_blank" data-reactid="60">classes</a>
              <!-- react-text: 61 -->, 
              <!-- /react-text --><a href="https://runkit.com/runkit/es6-template-strings" data-reactid="62">template strings</a>
              <!-- react-text: 63 -->, and most of 
              <!-- /react-text --><a href="https://runkit.com/runkit/es6-and-es7-support" target="_blank" data-reactid="64">ES6</a></li>
             <li data-reactid="65"><code data-reactid="66">await</code>
              <!-- react-text: 67 --> any promise instead of using callbacks 
              <!-- /react-text --><a href="https://runkit.com/docs/await" target="_blank" data-reactid="68">(example)</a></li>
             <li data-reactid="69"><a href="https://runkit.com/docs/embed" data-reactid="70">create your own</a>
              <!-- react-text: 71 --> embedded 
              <!-- /react-text --><strong data-reactid="72">node.js</strong>
              <!-- react-text: 73 --> snippets
              <!-- /react-text --></li>
            </ul>
           </div>
           <p style="color:#bbb;text-align:center;font-style:italic;font-size:12px;" data-reactid="74">This service is provided by RunKit and is not affiliated with npm, Inc or the package authors.</p>
          </div>
         </div>
         <div class="package-details" data-reactid="75">
          <header data-reactid="76">
           <div class="npm-search" style="z-index:1000;outline:none;display:inline-block;float:right;" tabindex="-1" data-reactid="77">
            <div data-reactid="78">
             <input type="text" style="height:28px;border:none;padding-left:2em;line-height:normal;background:url(https://static.tonicdev.net/assets/images/search.svg) no-repeat 0.5em center/1em #fff;" value="" placeholder="search npm" data-reactid="79">
            </div>
           </div>
           <h1 style="font-size:2em;height:1.3em;overflow:hidden;text-overflow:ellipsis;" data-reactid="80"><span class="pkg" style="font-weight:bold;" data-reactid="81">secure-filters</span><span class="pkg-version" style="font-size:70%;color:#919191;" data-reactid="82">
             <!-- react-text: 83 --> v
             <!-- /react-text -->
             <!-- react-text: 84 -->1.1.0
             <!-- /react-text --></span></h1>
           <h4 style="color:rgb(216, 216, 216);margin:0;font-size:16px;line-height:1.3em;max-height:1.3em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;" data-reactid="85">Anti-XSS filters for security</h4>
          </header>
          <div class="nav" data-reactid="86">
           <a style="cursor:pointer;" rel="nofollow" class="active" href="/secure-filters?t=1507037271414" data-reactid="87">Overview</a>
           <a style="cursor:pointer;" class="" data-reactid="88">Browse Files</a>
          </div>
          <div class="package-content" data-reactid="89">
           <div class="readme" data-reactid="90">
            <h1 class="package-name-redundant">secure-filters</h1> 
            <p><code>secure-filters</code> is a collection of Output Sanitization functions ("filters") to provide protection against <a href="https://owasp.org/index.php/Cross-site_Scripting_%28XSS%29">Cross-Site Scripting (XSS)</a> and other injection attacks.</p> 
            <p class="badge-only"><a href="https://travis-ci.org/salesforce/secure-filters"><img src="https://travis-ci.org/salesforce/secure-filters.png?branch=master" alt="Build Status" class="badge"></a></p> 
            <p><img src="https://cdn.npm.im/secure-filters@1.1.0/images/secure-filters%20data%20flow.png" alt="Data Flow Diagram"></p> 
            <h3>Table of select contents</h3> 
            <ul> 
             <li><a href="#about-xss">About XSS</a></li> 
             <li><a href="#usage">Usage</a> 
              <ul> 
               <li><a href="#installation">Installation</a> - <code>npm install --save secure-filters</code></li> 
               <li><a href="#with-ejs">EJS</a></li> 
               <li><a href="#as-normal-functions">Normal functions</a></li> 
               <li><a href="#client-side">Client-side</a></li> 
              </ul> </li> 
             <li><a href="#functions">Functions</a> 
              <ul> 
               <li><a href="#htmlvalue"><code>html(value)</code></a> - Sanitizes HTML contexts using entity-encoding.</li> 
               <li><a href="#jsvalue"><code>js(value)</code></a> - Sanitizes JavaScript string contexts using backslash-encoding.</li> 
               <li><a href="#jsobjvalue"><code>jsObj(value)</code></a> - Sanitizes JavaScript literals (numbers, strings, booleans, arrays, and objects) for inclusion in an HTML script context.</li> 
               <li><a href="#jsattrvalue"><code>jsAttr(value)</code></a> - Sanitizes JavaScript string contexts <em>in an HTML attribute</em> using a combination of entity- and backslash-encoding.</li> 
               <li><a href="#urivalue"><code>uri(value)</code></a> - Sanitizes URI contexts using percent-encoding.</li> 
               <li><a href="#cssvalue"><code>css(value)</code></a> - Sanitizes CSS contexts using backslash-encoding.</li> 
               <li><a href="#stylevalue"><code>style(value)</code></a> - Sanitizes CSS contexts <em>in an HTML <code>style</code> attribute</em></li> 
              </ul> </li> 
             <li><a href="#contributing">Contributing</a></li> 
             <li><a href="#support">Support</a></li> 
             <li><a href="#legal">Legal</a></li> 
            </ul> 
            <h1>About XSS</h1> 
            <p>XSS is the <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29">#3 most critical security flaw affecting web applications</a> for 2013, as determined by a broad consensus among <a href="https://www.owasp.org">OWASP</a> members.</p> 
            <p>To effectively combat XSS, you must combine Input Validation with Output Sanitization. <strong>Using one or the other is not sufficient; you must apply both!</strong> Also, simple validations like string length aren't as effective; it's much safer to use <em>whitelist-based validation</em>.</p> 
            <p>The generally accepted flow in preventing XSS looks like this:</p> 
            <p><img src="https://cdn.npm.im/secure-filters@1.1.0/images/secure-filters%20data%20flow.png" alt="Data Flow Diagram"></p> 
            <p>Whichever Input Validation and Output Sanitization modules you end up using, please review the code carefully and apply your own professional paranoia. Trust, but verify.</p> 
            <h3>Input Validation</h3> 
            <p><code>secure-filters</code> doesn't deal with Input Validation, only Ouput Sanitization.</p> 
            <p>You can roll your own input validation or you can use an existing module. Either way, there are <a href="https://owasp.org/index.php/Data_Validation">many</a> <a href="https://owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet">important</a> rules to follow.</p> 
            <p><a href="http://stackoverflow.com/questions/4088723/validation-library-for-node-js">This Stack-Overflow thread</a> lists several input validation options specific to node.js.</p> 
            <p>One of those options is node-validator (<a href="https://npmjs.org/package/validator">NPM</a>, <a href="https://github.com/chriso/node-validator">github</a>). It provides an impressive list of chainable validators. Validator also has a 3rd party <a href="https://github.com/Dream-Web/express-validate">express-validate</a> middleware module for use in the popular <a href="http://expressjs.com/">Express</a> node.js server.</p> 
            <p>Input Validation can be specialized to the data format. For example, the jsonschema module (<a href="https://npmjs.org/package/jsonschema">NPM</a>, <a href="https://github.com/tdegrunt/jsonschema">github</a>) can be useful for providing strict validation of JSON documents (e.g. bodies in HTTP).</p> 
            <h3>Output Sanitization</h3> 
            <p>Output Sanitization (also known as Ouput Filtering) is what <code>secure-filters</code> is responsible for.</p> 
            <p>In order to properly santize output you need to be sensitive to the <em>context</em> in which the data is being output. For example, if you want to place text in an HTML document, you should HTML-escape the text.</p> 
            <p>But what about CSS or JavaScript contexts? You can't use the HTML-escape filter; a different escaping method is necessary. If the filter doesn't match the context, it's possible for browsers to misinterpret the result, which can lead to XSS attacks!</p> 
            <p><code>secure-filters</code> aims to provide the filter functions necessary to do this type of context-sensitive sanitization.</p> 
            <h3>Hybrid Sanitization</h3> 
            <p>"Sanitization" is an overloaded term and can be confused with other security techniques.</p> 
            <p>For example, if you need to store and sanitize HTML, you'd want to parse, validate and sanitize that HTML in one hybridized step. There are tools like <a href="http://code.google.com/p/google-caja/">Google Caja</a> to do HTML sanitization. The <a href="https://github.com/theSmaw/Caja-HTML-Sanitizer"><code>sanitizer</code> module</a> packages-up Caja for node.js/CommonJS usage.</p> 
            <h1>Usage</h1> 
            <p><code>secure-filters</code> can be used with EJS or as normal functions.</p> 
            <h2>Installation</h2> 
            <pre><code class="language-sh">  npm install --save secure-filters
</code></pre> 
            <p>:warning: <strong>CAUTION</strong>: If the <code>Content-Type</code> HTTP header for your document, or the <code>&lt;meta charset=""&gt;</code> tag (or eqivalent) specifies a non-UTF-8 encoding these filters <em>may not provide adequate protection</em>! Some browsers can treat some characters at Unicode code-points <code>0x00A0</code> and above as if they were <code>&lt;</code> if the encoding is not set to UTF-8!</p> 
            <h2>General Usage</h2> 
            <p><a href="./images/secure-filters%20cheat%20sheet.png"><img src="https://cdn.npm.im/secure-filters@1.1.0/images/secure-filters%20cheat%20sheet.png" alt="Cheat Sheet"></a></p> 
            <h2>With EJS</h2> 
            <p>To configure EJS, simply wrap your <code>require('ejs')</code> call. This will import the filters using the names pre-defined by this module.</p> 
            <pre><code class="language-js">  var ejs = require('secure-filters').configure(require('ejs'));
</code></pre> 
            <p>Then, within an EJS template:</p> 
            <pre><code class="language-html">  &lt;script&gt;
    var config = &lt;%-: config |jsObj%&gt;;
    var userId = parseInt('&lt;%-: userId |js%&gt;',10);
  &lt;/script&gt;
  &lt;a href="/welcome/&lt;%-: userId |uri%&gt;"&gt;Welcome &lt;%-: userName |html%&gt;&lt;/a&gt;
  &lt;br&gt;
  &lt;a href="javascript:activate('&lt;%-: userId |jsAttr%&gt;')"&gt;Click here to activate&lt;/a&gt;
</code></pre> 
            <p>There's a handy <a href="./cheatsheet.md">cheat sheet</a> showing all the filters in EJS syntax.</p> 
            <h3>Alternative EJS uses.</h3> 
            <p>Rather than importing the pre-defined names we've chosen, here are some other ways to integrate <code>secure-filters</code> with EJS.</p> 
            <h4>Replacing EJS's default escape</h4> 
            <p>As of EJS 0.8.4, you can replace the <code>escape()</code> function during template compilation. This allows <code>&lt;%= %&gt;</code> to be safer than <a href="#a-note-about--">the default</a>.</p> 
            <pre><code class="language-js">var escapeHTML = secureFilters.html;
var templateFn = ejs.compile(template, { escape: escapeHTML });
</code></pre> 
            <h4>One-by-one</h4> 
            <p>It's possible that the filter names pre-defined by this module interferes with existing filters that you've written. Or, you may wish to import a sub-set of the filters. In which case, you can simply assign properties to the <code>ejs.filters</code> object.</p> 
            <pre><code class="language-js">  var secureFilters = require('secure-filters');
  var ejs = require('ejs');
  ejs.filters.secJS = secureFilters.js;
</code></pre> 
            <pre><code class="language-html">  &lt;script&gt;
    var myStr = "&lt;%-: myVal | secJS %&gt;";
  &lt;/script&gt;
</code></pre> 
            <h4>Parametric</h4> 
            <p>Or, you can namespace using a parametric style, similar to how EJS' pre-defined <code>get:'prop'</code> filter works:</p> 
            <pre><code class="language-js">  var secureFilters = require('secure-filters');
  var ejs = require('ejs');
  ejs.filters.sec = function(val, context) {
    return secureFilters[context](val);
  };
</code></pre> 
            <pre><code class="language-html">  &lt;script&gt;
    var myStr = "&lt;%-: myVal | sec:'js' %&gt;";
  &lt;/script&gt;
</code></pre> 
            <h2>As Normal Functions</h2> 
            <p>The filter functions are just regular functions and can be used outside of EJS.</p> 
            <pre><code class="language-js">  var htmlEscape = require('secure-filters').html;
  var escaped = htmlEscape('"&gt;&lt;script&gt;alert(\'pwn\')&lt;/script&gt;');
  assert.equal(escaped,
    '&amp;quot;&amp;gt;&amp;lt;script&amp;gt;alert&amp;#40;&amp;#39;pwn&amp;#39;&amp;#41;&amp;lt;&amp;#47;script&amp;gt;');
</code></pre> 
            <h2>Client-side</h2> 
            <p>You can simply include the <code>lib/secure-filters.js</code> file itself to get started.</p> 
            <pre><code class="language-html">  &lt;script type="text/javascript" src="path/to/secure-filters.js"&gt;&lt;/script&gt;
  &lt;script type="text/javascript"&gt;
    var escaped = secureFilters.html(userInput);
    //...
  &lt;/script&gt;
</code></pre> 
            <p>We've also added <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD module definition</a> to <code>secure-filters.js</code> for use in <a href="http://requirejs.org">Require.js</a> and other AMD frameworks. We don't pre-define a name, but suggest that you use 'secure-filters'.</p> 
            <h1>Functions</h1> 
            <p>By convention in the Contexts below, <code>USERINPUT</code> should be replaced with the output of the filter function.</p> 
            <h3>html(value)</h3> 
            <p>Sanitizes output for HTML element and attribute contexts using entity-encoding.</p> 
            <p>Contexts:</p> 
            <pre><code class="language-html">  &lt;p&gt;Hello, &lt;span id="name"&gt;USERINPUT&lt;/span&gt;&lt;/p&gt;
  &lt;div class="USERINPUT"&gt;&lt;/div&gt;
  &lt;div class='USERINPUT'&gt;&lt;/div&gt;
</code></pre> 
            <p>:warning: <strong>CAUTION</strong>: this is not the correct encoding for embedding the contents of a <code>&lt;script&gt;</code> or <code>&lt;style&gt;</code> block (plus other blocks that cannot have entity-encoded characters).</p> 
            <p>Any character not matched by <code>/[\t\n\v\f\r ,\.0-9A-Z_a-z\-\u00A0-\uFFFF]/</code> is replaced with an HTML entity. Additionally, characters matched by <code>/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/</code> are converted to spaces to avoid browser quirks that interpret these as non-characters.</p> 
            <h4>A Note About <code>&lt;%= %&gt;</code></h4> 
            <p>You might be asking "Why provide <code>html(var)</code>? EJS already does HTML escaping!".</p> 
            <p><a href="https://github.com/visionmedia/ejs/blob/master/History.md#085--2013-11-21">Prior to 0.8.5</a>, EJS doesn't escape the <code>'</code> (apostrophe) character when using the <code>&lt;%= %&gt;</code> syntax. This can lead to XSS accidents! Consider the template:</p> 
            <pre><code class="language-html">  &lt;img src='&lt;%= prefs.avatar %&gt;'&gt;
</code></pre> 
            <p>When given user input <code>x' onerror='alert(1)</code>, the above gets rendered as:</p> 
            <pre><code class="language-html">  &lt;img src='x' onerror='alert(1)'&gt;
</code></pre> 
            <p>Which will cause the <code>onerror</code> javascript to run. Using this module's filter should prevent this.</p> 
            <pre><code class="language-html">  &lt;img src='&lt;%-: prefs.avatar |html%&gt;'&gt;
</code></pre> 
            <p>When given user input <code>x' onerror='alert(1)</code>, the above gets rendered as:</p> 
            <pre><code class="language-html">  &lt;img src='x&amp;#39; onerror&amp;#61;&amp;#39;alert&amp;#40;1&amp;#41;'&gt;
</code></pre> 
            <p>Which will not run the attacking script.</p> 
            <h3>js(value)</h3> 
            <p>Sanitizes output for JavaScript <em>string</em> contexts using backslash-encoding.</p> 
            <pre><code class="language-html">  &lt;script&gt;
    var singleQuote = 'USERINPUT';
    var doubleQuote = "USERINPUT";
    var anInt = parseInt('USERINPUT', 10);
    var aFloat = parseFloat('USERINPUT');
    var aBool = ('USERINPUT' === 'true');
  &lt;/script&gt;
</code></pre> 
            <p>:warning: <strong>CAUTION</strong>: you need to always put quotes around the embedded value; don't assume that it's a bare int/float/boolean constant!</p> 
            <p>:warning: <strong>CAUTION</strong>: this is not the correct encoding for the entire contents of a <code>&lt;script&gt;</code> block! You need to sanitize each variable in-turn.</p> 
            <p>Any character not matched by <code>/[,\-\.0-9A-Z_a-z]/</code> is escaped as <code>\xHH</code> or <code>\uHHHH</code> where <code>H</code> is a hexidecimal digit. The shorter <code>\x</code> form is used for charaters in the 7-bit ASCII range (i.e. code point &lt;= 0x7F).</p> 
            <h3>json(value)</h3> 
            <p>Sanitizes output for a JSON string in an HTML script context.</p> 
            <pre><code class="language-html">  &lt;script&gt;
    var config = USERINPUT;
  &lt;/script&gt;
</code></pre> 
            <p>This function escapes certain characters within a JSON string. Any character not matched by <code>/[",\-\.0-9:A-Z\[\\\]_a-z{}]/</code> is escaped consistent with the <a href="#jsvalue"><code>js(value)</code></a> escaping above. Additionally, the sub-string <code>]]&gt;</code> is encoded as <code>\x5D\x5D\x3E</code> to prevent breaking out of CDATA context.</p> 
            <p>Because <code>&lt;</code> and <code>&gt;</code> are not matched characters, they get encoded as <code>\x3C</code> and <code>\x3E</code>, respectively. This prevents breaking out of a surrounding HTML <code>&lt;script&gt;</code> context.</p> 
            <p>For example, with a JSON string like <code>'{"username":"Albert &lt;/script&gt;&lt;script&gt;alert(\"Pwnerton\")"}'</code>, <code>json()</code> gives output:</p> 
            <pre><code class="language-html">  &lt;script&gt;
    var config = {"username":"\x3C\x2Fscript\x3E\x3Cscript\x3Ealert\x28\"Pwnerton\"\x29"};
  &lt;/script&gt;
</code></pre> 
            <h3>jsObj(value)</h3> 
            <p>Sanitizes output for a JavaScript literal in an HTML script context.</p> 
            <pre><code class="language-html">  &lt;script&gt;
    var config = USERINPUT;
  &lt;/script&gt;
</code></pre> 
            <p>This function encodes the object with <code>JSON.stringify()</code>, then escapes using <code>json()</code> detailed above.</p> 
            <p>For example, with a literal object like `{username:'Albert</p> 
            <script>alert("Pwnerton")'}`, `jsObj()` gives output:
<pre><code class="language-html">  &lt;script&gt;
    var config = {&quot;username&quot;:&quot;\x3C\x2Fscript\x3E\x3Cscript\x3Ealert\x28\&quot;Pwnerton\&quot;\x29&quot;};
  &lt;/script&gt;
</code></pre>
<h4>JSON is not a subset of JavaScript</h4>
<p>Article: <a href="http://timelessrepo.com/json-isnt-a-javascript-subset">JSON isn't a JavaScript
Subset</a>.</p>
<p>JSON is <em>almost</em> a subset of JavaScript, but for two characters: <a href="http://www.fileformat.info/info/unicode/char/2028/index.htm"><code>LINE SEPARATOR</code> U+2028</a>
and <a href="http://www.fileformat.info/info/unicode/char/2029/index.htm"><code>PARAGRAPH SEPARATOR</code>
U+2029</a>.  These
two characters can't legally appear in JavaScript strings and must be escaped.
Due to the ambiguity of these and other Unicode whitespace characters,
<code>secure-filters</code> will backslash encode U+2028 as <code>\u2028</code>, U+2029 as <code>\u2029</code>,
etc.</p>
<h3>jsAttr(value)</h3>
<p>Sanitizes output for embedded HTML scripting attributes using a special
combination of backslash- and entity-encoding.</p>
<pre><code class="language-html">  &lt;a href=&quot;javascript:doActivate('USERINPUT')&quot;&gt;click to activate&lt;/a&gt;
  &lt;button onclick=&quot;display('USERINPUT')&quot;&gt;Click To Display&lt;/button&gt;
</code></pre>
<p>The string <code>&lt;ha&gt;, 'ha', &quot;ha&quot;</code> is escaped to <code>&amp;lt;ha&amp;gt;, \&amp;#39;ha\&amp;#39;, \&amp;quot;ha\&amp;quot;</code>. Note the backslashes before the apostrophe and quote
entities.</p>
<h3>uri(value)</h3>
<p>Sanitizes output in URI component contexts by using percent-encoding.</p>
<pre><code class="language-html">  &lt;a href=&quot;http://example.com/?this=USERINPUT&amp;that=USERINPUT&quot;&gt;
  &lt;a href=&quot;http://example.com/api/v2/user/USERINPUT&quot;&gt;
</code></pre>
<p>The ranges 0-9, A-Z, a-z, plus hypen, dot and underscore (<code>-._</code>) are
preserved. Every other character is converted to UTF-8, then output as %XX
percent-encoded octets, where X is an uppercase hexidecimal digit.</p>
<p><strong>Note</strong> that if composing a URL, the entire result should ideally be
HTML-escaped before insertion into HTML. However, since Percent-encoding is
also HTML-safe, it may be sufficient to just URI-encode the untrusted
components if you know the rest is application-supplied.</p>
<h3>css(value)</h3>
<p>Sanitizes output in CSS contexts by using backslash encoding.</p>
<pre><code class="language-html">  &lt;style type=&quot;text/css&quot;&gt;
    #user-USERINPUT {
      background-color: #USERINPUT;
    }
  &lt;/style&gt;
</code></pre>
<p>:warning: <strong>CAUTION</strong> this is not the correct filter for a <code>style=&quot;&quot;</code> attribute; use
the <a href="#stylevalue"><code>style(value)</code></a> filter instead!</p>
<p>:warning: <strong>CAUTION</strong> even though this module prevents breaking out of CSS
context, it is still somewhat risky to allow user-controlled input into CSS and
<code>&lt;style&gt;</code> blocks. Be sure to combine CSS escaping with <em>whitelist-based</em> input
sanitization! Here's a small sampling of what's possible:</p>
<ul>
<li>https://www.computerworld.com/s/article/9221043/Opera_denies_refusing_to_patch_critical_vulnerability</li>
<li>http://html5sec.org/#43 - note the modern browser versions!</li>
</ul>
<p>The ranges a-z, A-Z, 0-9 plus Unicode U+10000 and higher are preserved.  All
other characters are encoded as <code>\h</code>, where <code>h</code> is one one or more lowercase
hexadecimal digits, including the trailing space.</p>
<p>Confusingly, CSS allows <code>NO-BREAK SPACE</code> U+00A0 to be used in an identifier.
Because of this confusion, it's possible browsers treat it as whitespace, and
so <code>secure-filters</code> escapes it.</p>
<p>Since <a href="http://www.w3.org/TR/CSS21/syndata.html#characters">the behaviour of NUL in CSS2.1 is
undefined</a>, it is replaced
with <code>\fffd</code>, <code>REPLACEMENT CHARACTER</code> U+FFFD.</p>
<p>For example, the string <code>&lt;wow&gt;</code> becomes <code>\3c wow\3e</code> (note the trailing space).</p>
<h3>style(value)</h3>
<p>Encodes values for safe embedding in HTML style attribute context.</p>
<p><strong>USAGE</strong>: all instances of <code>USERINPUT</code> should be sanitized by this function</p>
<pre><code class="language-html">  &lt;div style=&quot;background-color: #USERINPUT;&quot;&gt;&lt;/div&gt;
</code></pre>
<p>:warning: <strong>CAUTION</strong> even though this module prevents breaking out of style-attribute
context, it is still somewhat risky to allow user-controlled input (see caveats
on <a href="#cssvalue">css</a> above).  Be sure to combine with <em>whitelist-based</em> input
sanitization!</p>
<p>Encodes the value first as in the <code>css()</code> filter, then HTML entity-encodes the result.</p>
<p>For example, the string <code>&lt;wow&gt;</code> becomes <code>&amp;#92;3c wow&amp;#92;3e</code>.</p>
<h1>Contributing</h1>
<p>Please see the <a href="./contributing.md">Contribution Guide</a>.</p>
<h1>Support</h1>
<p>Support is provided via <a href="https://github.com/salesforce/secure-filters/issues">github issues</a>.</p>
<p>For responsible disclosures, email <a href="mailto:security@salesforce.com">Salesforce Security</a>.</p>
<h1>Changelog</h1>
<h4>1.1.0</h4>
<p>This release changes the behavior of secure-filters, but should be
backwards-compatible with 1.0.5.</p>
<ul>
<li>The <code>js</code>, <code>jsObj</code> and <code>jsAttr</code> filter now use a strict allow-list for
characters in strings.  This is safer, but does increase the size of these
strings slightly.  Compliant JSON and JavaScript parsers will not be affected
negatively by this change.</li>
<li>The example for <code>jsAttr</code> was incorrect.  It previously stated that <code>&lt;ha&gt;, 'ha', &quot;ha&quot;</code> was escaped to <code>&amp;lt;ha&amp;gt;, \&amp;#39;ha\&amp;#39;, \&amp;quot;ha\&amp;quot;</code></li>
</ul>
<h4>1.0.5</h4>
<ul>
<li>Vastly improved documentation and illustrations</li>
</ul>
<h4>1.0.4</h4>
<ul>
<li>Initial public release</li>
</ul>
<h1>Legal</h1>
<p>© 2014 salesforce.com</p>
<p>Licensed under the BSD 3-clause license.</p>
</script>
           </div>
           <div class="detail-wrapper" style="margin-bottom:60px;" data-reactid="91">
            <h3 data-reactid="92">Metadata</h3>
            <ul style="width:100%;margin:0;" data-reactid="93">
             <li data-reactid="94"><span class="header-key" data-reactid="95">package on npm</span><span class="header-value" data-reactid="96"><a href="https://npmjs.com/package/secure-filters" target="_blank" data-reactid="97">https://npmjs.com/package/secure-filters</a></span></li>
             <li data-reactid="98"><span class="header-key" data-reactid="99">homepage</span><span class="header-value" data-reactid="100"><a href="http://salesforce.github.io/secure-filters/" target="_blank" data-reactid="101">http://salesforce.github.io/secure-filters/</a></span></li>
             <li data-reactid="102"><span class="header-key" data-reactid="103">license</span><span class="header-value" data-reactid="104">BSD-3-Clause</span></li>
            </ul>
           </div>
          </div>
         </div>
         <div id="register-banner" data-reactid="105">
          <button style="background:inherit;border:none;margin-right:1em;color:#FFF;opacity:0.5;" data-reactid="106">×</button>
          <div data-reactid="107">
           <!-- react-text: 108 -->RunKit is a free, in-browser JavaScript dev environment
           <!-- /react-text -->
           <span class="collapse-mobile" data-reactid="109">
            <!-- react-text: 110 --> for prototyping 
            <!-- /react-text --><b data-reactid="111">Node.js</b>
            <!-- react-text: 112 --> code
            <!-- /react-text --><span class="collapse-single-col" data-reactid="113">
             <!-- react-text: 114 -->, with every 
             <!-- /react-text --><b data-reactid="115">npm</b>
             <!-- react-text: 116 --> package installed
             <!-- /react-text --></span>
            <!-- react-text: 117 -->. Sign up to share your code
            <!-- /react-text --></span>
           <!-- react-text: 118 -->.
           <!-- /react-text -->
          </div>
          <a class="register-button" style="background-color:#FFF;color:#2ECC71;" href="https://runkit.com/register" data-reactid="119">Sign Up for Free</a>
         </div>
        </div>
       </div>
      </div>
      <div data-reactid="120"></div>
     </div>
    </div>
   </div>
  </div>
  <script type="javascript/uri-encoded-json" id="serialized-client-env">%7B%22CSRF%22%3A%22ec5a89e0-3834-425a-bb18-80652c998ed9%22%2C%22VERSION%22%3A%224a6e32b3de2d8d354cc4190260826842fcac3f02%22%2C%22SENTRY_PUBLIC_DSN%22%3A%22https%3A%2F%2Ffc5fbd4eddce4289afde53ed4fc1dabe%40sentry.io%2F47331%22%2C%22VALUE_VIEWER_HOST%22%3A%22runkit-value-viewer.com%22%2C%22RENDERED_HTML_HOST%22%3A%22runkit-rendered-html.com%22%2C%22SOURCE_HOST%22%3A%22source.tonicdev.net%22%2C%22DOCS_HOST%22%3A%22docs.tonicdev.net%22%2C%22BADGE_HOST%22%3A%22badge.runkitcdn.com%22%2C%22THEMES_HOST%22%3A%22themes.runkitcdn.com%22%2C%22APP_HOST%22%3A%22runkit.com%22%2C%22EMBED_HOST%22%3A%22embed.runkit.com%22%2C%22NPM_HOST%22%3A%22npm.runkit.com%22%2C%22STATIC_HOST%22%3A%22static.tonicdev.net%22%2C%22API_HOST%22%3A%22runkit.sh%22%2C%22LEGACY_API_HOST%22%3A%22runkit.io%22%2C%22WELCOME_DOC_URL%22%3A%22%2Frunkit%2Fwelcome%2F3.0.0%2Fclone%3Fresults%3Dfalse%22%2C%22GOOGLE_ANALYTICS_ID%22%3A%22UA-65519033-1%22%2C%22MAPBOX_PUBLIC_KEY%22%3A%22pk.eyJ1IjoidG9sbWFza3kiLCJhIjoiY2o0Yms3MmRyMDFhZDJxcHMwaWN0ZzFjZCJ9.ChGWCB7PLE-FaWVeksrjdQ%22%7D</script>
  <script type="javascript/uri-encoded-json" id="react-properties">%7B%22index%22%3A0%2C%22objects%22%3A%5B%5B0%2C2%2C1%2C4%2C3%5D%2C%5B0%2C6%2C5%2C8%2C7%2C10%2C9%2C11%2C9%5D%2C%22props%22%2C%5B0%2C13%2C12%2C15%2C14%2C17%2C16%5D%2C%22resourceCache%22%2C%22https%3A%2F%2Fnpm.runkit.com%2Fsecure-filters%22%2C%22URL%22%2C%5B0%2C19%2C18%5D%2C%22state%22%2Cfalse%2C%22admin%22%2C%22staticPage%22%2C%5B0%2C20%2C13%2C21%2C-1%5D%2C%22%2Fuser%22%2C%5B0%2C20%2C15%2C21%2C22%5D%2C%22%2Fnpm%2Finfo%2Fsecure-filters%22%2C%5B0%2C20%2C17%2C21%2C23%5D%2C%22%2Ftime%22%2C%5B0%2C25%2C24%5D%2C%22user%22%2C%22href%22%2C%22value%22%2C%5B0%2C27%2C26%2C29%2C28%2C31%2C30%2C33%2C32%2C35%2C34%2C37%2C36%2C39%2C38%2C41%2C40%2C43%2C42%2C45%2C44%2C47%2C46%2C49%2C48%5D%2C1507037271414%2C%5B0%2C51%2C50%2C8%2C52%5D%2C%22current-results%22%2C%22BSD-3-Clause%22%2C%22license%22%2C%226.x.x%22%2C%22engine%22%2Ctrue%2C%22canBeDirectlyRequired%22%2C%5B1%2C54%2C53%2C56%2C55%2C58%2C57%2C60%2C59%2C62%2C61%5D%2C%22keywords%22%2C%22%3Ch1%20class%3D%5C%22package-name-redundant%5C%22%3Esecure-filters%3C%2Fh1%3E%5Cn%3Cp%3E%3Ccode%3Esecure-filters%3C%2Fcode%3E%20is%20a%20collection%20of%20Output%20Sanitization%20functions%20(%26quot%3Bfilters%26quot%3B)%5Cnto%20provide%20protection%20against%20%3Ca%20href%3D%5C%22https%3A%2F%2Fowasp.org%2Findex.php%2FCross-site_Scripting_%2528XSS%2529%5C%22%3ECross-Site%20Scripting%5Cn(XSS)%3C%2Fa%3E%20and%20other%5Cninjection%20attacks.%3C%2Fp%3E%5Cn%3Cp%20class%3D%5C%22badge-only%5C%22%3E%3Ca%20href%3D%5C%22https%3A%2F%2Ftravis-ci.org%2Fsalesforce%2Fsecure-filters%5C%22%3E%3Cimg%20src%3D%5C%22https%3A%2F%2Ftravis-ci.org%2Fsalesforce%2Fsecure-filters.png%3Fbranch%3Dmaster%5C%22%20alt%3D%5C%22Build%20Status%5C%22%20class%3D%5C%22badge%5C%22%3E%3C%2Fa%3E%3C%2Fp%3E%5Cn%3Cp%3E%3Cimg%20src%3D%5C%22https%3A%2F%2Fcdn.npm.im%2Fsecure-filters%401.1.0%2Fimages%2Fsecure-filters%2520data%2520flow.png%5C%22%20alt%3D%5C%22Data%20Flow%20Diagram%5C%22%3E%3C%2Fp%3E%5Cn%3Ch3%3ETable%20of%20select%20contents%3C%2Fh3%3E%5Cn%3Cul%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23about-xss%5C%22%3EAbout%20XSS%3C%2Fa%3E%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23usage%5C%22%3EUsage%3C%2Fa%3E%5Cn%3Cul%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23installation%5C%22%3EInstallation%3C%2Fa%3E%20-%20%3Ccode%3Enpm%20install%20--save%20secure-filters%3C%2Fcode%3E%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23with-ejs%5C%22%3EEJS%3C%2Fa%3E%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23as-normal-functions%5C%22%3ENormal%20functions%3C%2Fa%3E%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23client-side%5C%22%3EClient-side%3C%2Fa%3E%3C%2Fli%3E%5Cn%3C%2Ful%3E%5Cn%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23functions%5C%22%3EFunctions%3C%2Fa%3E%5Cn%3Cul%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23htmlvalue%5C%22%3E%3Ccode%3Ehtml(value)%3C%2Fcode%3E%3C%2Fa%3E%20-%20Sanitizes%20HTML%20contexts%20using%20entity-encoding.%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23jsvalue%5C%22%3E%3Ccode%3Ejs(value)%3C%2Fcode%3E%3C%2Fa%3E%20-%20Sanitizes%20JavaScript%20string%20contexts%20using%20backslash-encoding.%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23jsobjvalue%5C%22%3E%3Ccode%3EjsObj(value)%3C%2Fcode%3E%3C%2Fa%3E%20-%20Sanitizes%20JavaScript%20literals%20(numbers%2C%20strings%2C%5Cnbooleans%2C%20arrays%2C%20and%20objects)%20for%20inclusion%20in%20an%20HTML%20script%20context.%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23jsattrvalue%5C%22%3E%3Ccode%3EjsAttr(value)%3C%2Fcode%3E%3C%2Fa%3E%20-%20Sanitizes%20JavaScript%20string%20contexts%20%3Cem%3Ein%20an%20HTML%20attribute%3C%2Fem%3E%5Cnusing%20a%20combination%20of%20entity-%20and%20backslash-encoding.%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23urivalue%5C%22%3E%3Ccode%3Euri(value)%3C%2Fcode%3E%3C%2Fa%3E%20-%20Sanitizes%20URI%20contexts%20using%20percent-encoding.%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23cssvalue%5C%22%3E%3Ccode%3Ecss(value)%3C%2Fcode%3E%3C%2Fa%3E%20-%20Sanitizes%20CSS%20contexts%20using%20backslash-encoding.%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23stylevalue%5C%22%3E%3Ccode%3Estyle(value)%3C%2Fcode%3E%3C%2Fa%3E%20-%20Sanitizes%20CSS%20contexts%20%3Cem%3Ein%20an%20HTML%20%3Ccode%3Estyle%3C%2Fcode%3E%20attribute%3C%2Fem%3E%3C%2Fli%3E%5Cn%3C%2Ful%3E%5Cn%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23contributing%5C%22%3EContributing%3C%2Fa%3E%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23support%5C%22%3ESupport%3C%2Fa%3E%3C%2Fli%3E%5Cn%3Cli%3E%3Ca%20href%3D%5C%22%23legal%5C%22%3ELegal%3C%2Fa%3E%3C%2Fli%3E%5Cn%3C%2Ful%3E%5Cn%3Ch1%3EAbout%20XSS%3C%2Fh1%3E%5Cn%3Cp%3EXSS%20is%20the%20%3Ca%20href%3D%5C%22https%3A%2F%2Fwww.owasp.org%2Findex.php%2FTop_10_2013-A3-Cross-Site_Scripting_%2528XSS%2529%5C%22%3E%233%20most%20critical%20security%20flaw%20affecting%20web%5Cnapplications%3C%2Fa%3E%5Cnfor%202013%2C%20as%20determined%20by%20a%20broad%20consensus%20among%5Cn%3Ca%20href%3D%5C%22https%3A%2F%2Fwww.owasp.org%5C%22%3EOWASP%3C%2Fa%3E%20members.%3C%2Fp%3E%5Cn%3Cp%3ETo%20effectively%20combat%20XSS%2C%20you%20must%20combine%20Input%20Validation%20with%20Output%5CnSanitization.%20%20%3Cstrong%3EUsing%20one%20or%20the%20other%20is%20not%20sufficient%3B%20you%20must%20apply%5Cnboth!%3C%2Fstrong%3E%20%20Also%2C%20simple%20validations%20like%20string%20length%20aren%26apos%3Bt%20as%20effective%3B%20it%26apos%3Bs%5Cnmuch%20safer%20to%20use%20%3Cem%3Ewhitelist-based%20validation%3C%2Fem%3E.%3C%2Fp%3E%5Cn%3Cp%3EThe%20generally%20accepted%20flow%20in%20preventing%20XSS%20looks%20like%20this%3A%3C%2Fp%3E%5Cn%3Cp%3E%3Cimg%20src%3D%5C%22https%3A%2F%2Fcdn.npm.im%2Fsecure-filters%401.1.0%2Fimages%2Fsecure-filters%2520data%2520flow.png%5C%22%20alt%3D%5C%22Data%20Flow%20Diagram%5C%22%3E%3C%2Fp%3E%5Cn%3Cp%3EWhichever%20Input%20Validation%20and%20Output%20Sanitization%20modules%20you%20end%20up%5Cnusing%2C%20please%20review%20the%20code%20carefully%20and%20apply%20your%20own%20professional%5Cnparanoia.%20Trust%2C%20but%20verify.%3C%2Fp%3E%5Cn%3Ch3%3EInput%20Validation%3C%2Fh3%3E%5Cn%3Cp%3E%3Ccode%3Esecure-filters%3C%2Fcode%3E%20doesn%26apos%3Bt%20deal%20with%20Input%20Validation%2C%20only%20Ouput%20Sanitization.%3C%2Fp%3E%5Cn%3Cp%3EYou%20can%20roll%20your%20own%20input%20validation%20or%20you%20can%20use%20an%20existing%20module.%5CnEither%20way%2C%20there%20are%5Cn%3Ca%20href%3D%5C%22https%3A%2F%2Fowasp.org%2Findex.php%2FData_Validation%5C%22%3Emany%3C%2Fa%3E%5Cn%3Ca%20href%3D%5C%22https%3A%2F%2Fowasp.org%2Findex.php%2FXSS_%2528Cross_Site_Scripting%2529_Prevention_Cheat_Sheet%5C%22%3Eimportant%3C%2Fa%3E%5Cnrules%20to%20follow.%3C%2Fp%3E%5Cn%3Cp%3E%3Ca%20href%3D%5C%22http%3A%2F%2Fstackoverflow.com%2Fquestions%2F4088723%2Fvalidation-library-for-node-js%5C%22%3EThis%20Stack-Overflow%5Cnthread%3C%2Fa%3E%5Cnlists%20several%20input%20validation%20options%20specific%20to%20node.js.%3C%2Fp%3E%5Cn%3Cp%3EOne%20of%20those%20options%20is%20node-validator%5Cn(%3Ca%20href%3D%5C%22https%3A%2F%2Fnpmjs.org%2Fpackage%2Fvalidator%5C%22%3ENPM%3C%2Fa%3E%2C%5Cn%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2Fchriso%2Fnode-validator%5C%22%3Egithub%3C%2Fa%3E).%20%20It%20provides%20an%20impressive%5Cnlist%20of%20chainable%20validators.%20%20Validator%20also%20has%20a%203rd%20party%5Cn%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2FDream-Web%2Fexpress-validate%5C%22%3Eexpress-validate%3C%2Fa%3E%20middleware%5Cnmodule%20for%20use%20in%20the%20popular%20%3Ca%20href%3D%5C%22http%3A%2F%2Fexpressjs.com%2F%5C%22%3EExpress%3C%2Fa%3E%20node.js%20server.%3C%2Fp%3E%5Cn%3Cp%3EInput%20Validation%20can%20be%20specialized%20to%20the%20data%20format.%20%20For%20example%2C%20the%5Cnjsonschema%20module%20(%3Ca%20href%3D%5C%22https%3A%2F%2Fnpmjs.org%2Fpackage%2Fjsonschema%5C%22%3ENPM%3C%2Fa%3E%2C%5Cn%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2Ftdegrunt%2Fjsonschema%5C%22%3Egithub%3C%2Fa%3E)%20can%20be%20useful%20for%20providing%5Cnstrict%20validation%20of%20JSON%20documents%20(e.g.%20bodies%20in%20HTTP).%3C%2Fp%3E%5Cn%3Ch3%3EOutput%20Sanitization%3C%2Fh3%3E%5Cn%3Cp%3EOutput%20Sanitization%20(also%20known%20as%20Ouput%20Filtering)%20is%20what%20%3Ccode%3Esecure-filters%3C%2Fcode%3E%20is%5Cnresponsible%20for.%3C%2Fp%3E%5Cn%3Cp%3EIn%20order%20to%20properly%20santize%20output%20you%20need%20to%20be%20sensitive%20to%20the%20%3Cem%3Econtext%3C%2Fem%3E%5Cnin%20which%20the%20data%20is%20being%20output.%20For%20example%2C%20if%20you%20want%20to%20place%20text%20in%20an%5CnHTML%20document%2C%20you%20should%20HTML-escape%20the%20text.%3C%2Fp%3E%5Cn%3Cp%3EBut%20what%20about%20CSS%20or%20JavaScript%20contexts%3F%20You%20can%26apos%3Bt%20use%20the%20HTML-escape%5Cnfilter%3B%20a%20different%20escaping%20method%20is%20necessary.%20If%20the%20filter%20doesn%26apos%3Bt%20match%5Cnthe%20context%2C%20it%26apos%3Bs%20possible%20for%20browsers%20to%20misinterpret%20the%20result%2C%20which%20can%5Cnlead%20to%20XSS%20attacks!%3C%2Fp%3E%5Cn%3Cp%3E%3Ccode%3Esecure-filters%3C%2Fcode%3E%20aims%20to%20provide%20the%20filter%20functions%20necessary%20to%20do%20this%20type%5Cnof%20context-sensitive%20sanitization.%3C%2Fp%3E%5Cn%3Ch3%3EHybrid%20Sanitization%3C%2Fh3%3E%5Cn%3Cp%3E%26quot%3BSanitization%26quot%3B%20is%20an%20overloaded%20term%20and%20can%20be%20confused%20with%20other%20security%5Cntechniques.%3C%2Fp%3E%5Cn%3Cp%3EFor%20example%2C%20if%20you%20need%20to%20store%20and%20sanitize%20HTML%2C%20you%26apos%3Bd%20want%20to%20parse%2C%5Cnvalidate%20and%20sanitize%20that%20HTML%20in%20one%20hybridized%20step.%20%20There%20are%20tools%20like%5Cn%3Ca%20href%3D%5C%22http%3A%2F%2Fcode.google.com%2Fp%2Fgoogle-caja%2F%5C%22%3EGoogle%20Caja%3C%2Fa%3E%20to%20do%20HTML%20sanitization.%5CnThe%20%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2FtheSmaw%2FCaja-HTML-Sanitizer%5C%22%3E%3Ccode%3Esanitizer%3C%2Fcode%3E%20module%3C%2Fa%3E%5Cnpackages-up%20Caja%20for%20node.js%2FCommonJS%20usage.%3C%2Fp%3E%5Cn%3Ch1%3EUsage%3C%2Fh1%3E%5Cn%3Cp%3E%3Ccode%3Esecure-filters%3C%2Fcode%3E%20can%20be%20used%20with%20EJS%20or%20as%20normal%20functions.%3C%2Fp%3E%5Cn%3Ch2%3EInstallation%3C%2Fh2%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-sh%5C%22%3E%20%20npm%20install%20--save%20secure-filters%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3E%3Awarning%3A%20%3Cstrong%3ECAUTION%3C%2Fstrong%3E%3A%20If%20the%20%3Ccode%3EContent-Type%3C%2Fcode%3E%20HTTP%20header%20for%20your%20document%2C%20or%5Cnthe%20%3Ccode%3E%26lt%3Bmeta%20charset%3D%26quot%3B%26quot%3B%26gt%3B%3C%2Fcode%3E%20tag%20(or%20eqivalent)%20specifies%20a%20non-UTF-8%20encoding%20these%5Cnfilters%20%3Cem%3Emay%20not%20provide%20adequate%20protection%3C%2Fem%3E!%20Some%20browsers%20can%20treat%20some%5Cncharacters%20at%20Unicode%20code-points%20%3Ccode%3E0x00A0%3C%2Fcode%3E%20and%20above%20as%20if%20they%20were%20%3Ccode%3E%26lt%3B%3C%2Fcode%3E%20if%20the%5Cnencoding%20is%20not%20set%20to%20UTF-8!%3C%2Fp%3E%5Cn%3Ch2%3EGeneral%20Usage%3C%2Fh2%3E%5Cn%3Cp%3E%3Ca%20href%3D%5C%22.%2Fimages%2Fsecure-filters%2520cheat%2520sheet.png%5C%22%3E%3Cimg%20src%3D%5C%22https%3A%2F%2Fcdn.npm.im%2Fsecure-filters%401.1.0%2Fimages%2Fsecure-filters%2520cheat%2520sheet.png%5C%22%20alt%3D%5C%22Cheat%20Sheet%5C%22%3E%3C%2Fa%3E%3C%2Fp%3E%5Cn%3Ch2%3EWith%20EJS%3C%2Fh2%3E%5Cn%3Cp%3ETo%20configure%20EJS%2C%20simply%20wrap%20your%20%3Ccode%3Erequire(%26apos%3Bejs%26apos%3B)%3C%2Fcode%3E%20call.%20%20This%20will%20import%20the%5Cnfilters%20using%20the%20names%20pre-defined%20by%20this%20module.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-js%5C%22%3E%20%20var%20ejs%20%3D%20require(%26apos%3Bsecure-filters%26apos%3B).configure(require(%26apos%3Bejs%26apos%3B))%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EThen%2C%20within%20an%20EJS%20template%3A%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bscript%26gt%3B%5Cn%20%20%20%20var%20config%20%3D%20%26lt%3B%25-%3A%20config%20%7CjsObj%25%26gt%3B%3B%5Cn%20%20%20%20var%20userId%20%3D%20parseInt(%26apos%3B%26lt%3B%25-%3A%20userId%20%7Cjs%25%26gt%3B%26apos%3B%2C10)%3B%5Cn%20%20%26lt%3B%2Fscript%26gt%3B%5Cn%20%20%26lt%3Ba%20href%3D%26quot%3B%2Fwelcome%2F%26lt%3B%25-%3A%20userId%20%7Curi%25%26gt%3B%26quot%3B%26gt%3BWelcome%20%26lt%3B%25-%3A%20userName%20%7Chtml%25%26gt%3B%26lt%3B%2Fa%26gt%3B%5Cn%20%20%26lt%3Bbr%26gt%3B%5Cn%20%20%26lt%3Ba%20href%3D%26quot%3Bjavascript%3Aactivate(%26apos%3B%26lt%3B%25-%3A%20userId%20%7CjsAttr%25%26gt%3B%26apos%3B)%26quot%3B%26gt%3BClick%20here%20to%20activate%26lt%3B%2Fa%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EThere%26apos%3Bs%20a%20handy%20%3Ca%20href%3D%5C%22.%2Fcheatsheet.md%5C%22%3Echeat%20sheet%3C%2Fa%3E%20showing%20all%20the%20filters%20in%20EJS%20syntax.%3C%2Fp%3E%5Cn%3Ch3%3EAlternative%20EJS%20uses.%3C%2Fh3%3E%5Cn%3Cp%3ERather%20than%20importing%20the%20pre-defined%20names%20we%26apos%3Bve%20chosen%2C%20here%20are%20some%20other%5Cnways%20to%20integrate%20%3Ccode%3Esecure-filters%3C%2Fcode%3E%20with%20EJS.%3C%2Fp%3E%5Cn%3Ch4%3EReplacing%20EJS%26apos%3Bs%20default%20escape%3C%2Fh4%3E%5Cn%3Cp%3EAs%20of%20EJS%200.8.4%2C%20you%20can%20replace%20the%20%3Ccode%3Eescape()%3C%2Fcode%3E%20function%20during%20template%5Cncompilation.%20%20This%20allows%20%3Ccode%3E%26lt%3B%25%3D%20%25%26gt%3B%3C%2Fcode%3E%20to%20be%20safer%20than%20%3Ca%20href%3D%5C%22%23a-note-about--%5C%22%3Ethe%5Cndefault%3C%2Fa%3E.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-js%5C%22%3Evar%20escapeHTML%20%3D%20secureFilters.html%3B%5Cnvar%20templateFn%20%3D%20ejs.compile(template%2C%20%7B%20escape%3A%20escapeHTML%20%7D)%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Ch4%3EOne-by-one%3C%2Fh4%3E%5Cn%3Cp%3EIt%26apos%3Bs%20possible%20that%20the%20filter%20names%20pre-defined%20by%20this%20module%20interferes%20with%5Cnexisting%20filters%20that%20you%26apos%3Bve%20written.%20Or%2C%20you%20may%20wish%20to%20import%20a%20sub-set%20of%5Cnthe%20filters.%20In%20which%20case%2C%20you%20can%20simply%20assign%20properties%20to%20the%5Cn%3Ccode%3Eejs.filters%3C%2Fcode%3E%20object.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-js%5C%22%3E%20%20var%20secureFilters%20%3D%20require(%26apos%3Bsecure-filters%26apos%3B)%3B%5Cn%20%20var%20ejs%20%3D%20require(%26apos%3Bejs%26apos%3B)%3B%5Cn%20%20ejs.filters.secJS%20%3D%20secureFilters.js%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bscript%26gt%3B%5Cn%20%20%20%20var%20myStr%20%3D%20%26quot%3B%26lt%3B%25-%3A%20myVal%20%7C%20secJS%20%25%26gt%3B%26quot%3B%3B%5Cn%20%20%26lt%3B%2Fscript%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Ch4%3EParametric%3C%2Fh4%3E%5Cn%3Cp%3EOr%2C%20you%20can%20namespace%20using%20a%20parametric%20style%2C%20similar%20to%20how%20EJS%26apos%3B%20pre-defined%5Cn%3Ccode%3Eget%3A%26apos%3Bprop%26apos%3B%3C%2Fcode%3E%20filter%20works%3A%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-js%5C%22%3E%20%20var%20secureFilters%20%3D%20require(%26apos%3Bsecure-filters%26apos%3B)%3B%5Cn%20%20var%20ejs%20%3D%20require(%26apos%3Bejs%26apos%3B)%3B%5Cn%20%20ejs.filters.sec%20%3D%20function(val%2C%20context)%20%7B%5Cn%20%20%20%20return%20secureFilters%5Bcontext%5D(val)%3B%5Cn%20%20%7D%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bscript%26gt%3B%5Cn%20%20%20%20var%20myStr%20%3D%20%26quot%3B%26lt%3B%25-%3A%20myVal%20%7C%20sec%3A%26apos%3Bjs%26apos%3B%20%25%26gt%3B%26quot%3B%3B%5Cn%20%20%26lt%3B%2Fscript%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Ch2%3EAs%20Normal%20Functions%3C%2Fh2%3E%5Cn%3Cp%3EThe%20filter%20functions%20are%20just%20regular%20functions%20and%20can%20be%20used%20outside%20of%20EJS.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-js%5C%22%3E%20%20var%20htmlEscape%20%3D%20require(%26apos%3Bsecure-filters%26apos%3B).html%3B%5Cn%20%20var%20escaped%20%3D%20htmlEscape(%26apos%3B%26quot%3B%26gt%3B%26lt%3Bscript%26gt%3Balert(%5C%5C%26apos%3Bpwn%5C%5C%26apos%3B)%26lt%3B%2Fscript%26gt%3B%26apos%3B)%3B%5Cn%20%20assert.equal(escaped%2C%5Cn%20%20%20%20%26apos%3B%26amp%3Bquot%3B%26amp%3Bgt%3B%26amp%3Blt%3Bscript%26amp%3Bgt%3Balert%26amp%3B%2340%3B%26amp%3B%2339%3Bpwn%26amp%3B%2339%3B%26amp%3B%2341%3B%26amp%3Blt%3B%26amp%3B%2347%3Bscript%26amp%3Bgt%3B%26apos%3B)%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Ch2%3EClient-side%3C%2Fh2%3E%5Cn%3Cp%3EYou%20can%20simply%20include%20the%20%3Ccode%3Elib%2Fsecure-filters.js%3C%2Fcode%3E%20file%20itself%20to%20get%20started.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bscript%20type%3D%26quot%3Btext%2Fjavascript%26quot%3B%20src%3D%26quot%3Bpath%2Fto%2Fsecure-filters.js%26quot%3B%26gt%3B%26lt%3B%2Fscript%26gt%3B%5Cn%20%20%26lt%3Bscript%20type%3D%26quot%3Btext%2Fjavascript%26quot%3B%26gt%3B%5Cn%20%20%20%20var%20escaped%20%3D%20secureFilters.html(userInput)%3B%5Cn%20%20%20%20%2F%2F...%5Cn%20%20%26lt%3B%2Fscript%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EWe%26apos%3Bve%20also%20added%20%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2Famdjs%2Famdjs-api%2Fwiki%2FAMD%5C%22%3EAMD%20module%5Cndefinition%3C%2Fa%3E%20to%20%3Ccode%3Esecure-filters.js%3C%2Fcode%3E%5Cnfor%20use%20in%20%3Ca%20href%3D%5C%22http%3A%2F%2Frequirejs.org%5C%22%3ERequire.js%3C%2Fa%3E%20and%20other%20AMD%20frameworks.%20We%5Cndon%26apos%3Bt%20pre-define%20a%20name%2C%20but%20suggest%20that%20you%20use%20%26apos%3Bsecure-filters%26apos%3B.%3C%2Fp%3E%5Cn%3Ch1%3EFunctions%3C%2Fh1%3E%5Cn%3Cp%3EBy%20convention%20in%20the%20Contexts%20below%2C%20%3Ccode%3EUSERINPUT%3C%2Fcode%3E%20should%20be%20replaced%20with%20the%5Cnoutput%20of%20the%20filter%20function.%3C%2Fp%3E%5Cn%3Ch3%3Ehtml(value)%3C%2Fh3%3E%5Cn%3Cp%3ESanitizes%20output%20for%20HTML%20element%20and%20attribute%20contexts%20using%20entity-encoding.%3C%2Fp%3E%5Cn%3Cp%3EContexts%3A%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bp%26gt%3BHello%2C%20%26lt%3Bspan%20id%3D%26quot%3Bname%26quot%3B%26gt%3BUSERINPUT%26lt%3B%2Fspan%26gt%3B%26lt%3B%2Fp%26gt%3B%5Cn%20%20%26lt%3Bdiv%20class%3D%26quot%3BUSERINPUT%26quot%3B%26gt%3B%26lt%3B%2Fdiv%26gt%3B%5Cn%20%20%26lt%3Bdiv%20class%3D%26apos%3BUSERINPUT%26apos%3B%26gt%3B%26lt%3B%2Fdiv%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3E%3Awarning%3A%20%3Cstrong%3ECAUTION%3C%2Fstrong%3E%3A%20this%20is%20not%20the%20correct%20encoding%20for%20embedding%20the%20contents%20of%5Cna%20%3Ccode%3E%26lt%3Bscript%26gt%3B%3C%2Fcode%3E%20or%20%3Ccode%3E%26lt%3Bstyle%26gt%3B%3C%2Fcode%3E%20block%20(plus%20other%20blocks%20that%20cannot%20have%5Cnentity-encoded%20characters).%3C%2Fp%3E%5Cn%3Cp%3EAny%20character%20not%20matched%20by%20%3Ccode%3E%2F%5B%5C%5Ct%5C%5Cn%5C%5Cv%5C%5Cf%5C%5Cr%20%2C%5C%5C.0-9A-Z_a-z%5C%5C-%5C%5Cu00A0-%5C%5CuFFFF%5D%2F%3C%2Fcode%3E%20is%5Cnreplaced%20with%20an%20HTML%20entity.%20%20Additionally%2C%20characters%20matched%20by%5Cn%3Ccode%3E%2F%5B%5C%5Cx00-%5C%5Cx08%5C%5Cx0B%5C%5Cx0C%5C%5Cx0E-%5C%5Cx1F%5C%5Cx7F-%5C%5Cx9F%5D%2F%3C%2Fcode%3E%20are%20converted%20to%20spaces%20to%20avoid%5Cnbrowser%20quirks%20that%20interpret%20these%20as%20non-characters.%3C%2Fp%3E%5Cn%3Ch4%3EA%20Note%20About%20%3Ccode%3E%26lt%3B%25%3D%20%25%26gt%3B%3C%2Fcode%3E%3C%2Fh4%3E%5Cn%3Cp%3EYou%20might%20be%20asking%20%26quot%3BWhy%20provide%20%3Ccode%3Ehtml(var)%3C%2Fcode%3E%3F%20EJS%20already%20does%20HTML%20escaping!%26quot%3B.%3C%2Fp%3E%5Cn%3Cp%3E%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2Fvisionmedia%2Fejs%2Fblob%2Fmaster%2FHistory.md%23085--2013-11-21%5C%22%3EPrior%20to%200.8.5%3C%2Fa%3E%2C%5CnEJS%20doesn%26apos%3Bt%20escape%20the%20%3Ccode%3E%26apos%3B%3C%2Fcode%3E%20(apostrophe)%20character%20when%20using%20the%20%3Ccode%3E%26lt%3B%25%3D%20%25%26gt%3B%3C%2Fcode%3E%5Cnsyntax.%20%20This%20can%20lead%20to%20XSS%20accidents!%20%20Consider%20the%20template%3A%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bimg%20src%3D%26apos%3B%26lt%3B%25%3D%20prefs.avatar%20%25%26gt%3B%26apos%3B%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EWhen%20given%20user%20input%20%3Ccode%3Ex%26apos%3B%20onerror%3D%26apos%3Balert(1)%3C%2Fcode%3E%2C%20the%20above%20gets%20rendered%20as%3A%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bimg%20src%3D%26apos%3Bx%26apos%3B%20onerror%3D%26apos%3Balert(1)%26apos%3B%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EWhich%20will%20cause%20the%20%3Ccode%3Eonerror%3C%2Fcode%3E%20javascript%20to%20run.%20%20Using%20this%20module%26apos%3Bs%20filter%5Cnshould%20prevent%20this.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bimg%20src%3D%26apos%3B%26lt%3B%25-%3A%20prefs.avatar%20%7Chtml%25%26gt%3B%26apos%3B%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EWhen%20given%20user%20input%20%3Ccode%3Ex%26apos%3B%20onerror%3D%26apos%3Balert(1)%3C%2Fcode%3E%2C%20the%20above%20gets%20rendered%20as%3A%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bimg%20src%3D%26apos%3Bx%26amp%3B%2339%3B%20onerror%26amp%3B%2361%3B%26amp%3B%2339%3Balert%26amp%3B%2340%3B1%26amp%3B%2341%3B%26apos%3B%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EWhich%20will%20not%20run%20the%20attacking%20script.%3C%2Fp%3E%5Cn%3Ch3%3Ejs(value)%3C%2Fh3%3E%5Cn%3Cp%3ESanitizes%20output%20for%20JavaScript%20%3Cem%3Estring%3C%2Fem%3E%20contexts%20using%20backslash-encoding.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bscript%26gt%3B%5Cn%20%20%20%20var%20singleQuote%20%3D%20%26apos%3BUSERINPUT%26apos%3B%3B%5Cn%20%20%20%20var%20doubleQuote%20%3D%20%26quot%3BUSERINPUT%26quot%3B%3B%5Cn%20%20%20%20var%20anInt%20%3D%20parseInt(%26apos%3BUSERINPUT%26apos%3B%2C%2010)%3B%5Cn%20%20%20%20var%20aFloat%20%3D%20parseFloat(%26apos%3BUSERINPUT%26apos%3B)%3B%5Cn%20%20%20%20var%20aBool%20%3D%20(%26apos%3BUSERINPUT%26apos%3B%20%3D%3D%3D%20%26apos%3Btrue%26apos%3B)%3B%5Cn%20%20%26lt%3B%2Fscript%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3E%3Awarning%3A%20%3Cstrong%3ECAUTION%3C%2Fstrong%3E%3A%20you%20need%20to%20always%20put%20quotes%20around%20the%20embedded%20value%3B%20don%26apos%3Bt%5Cnassume%20that%20it%26apos%3Bs%20a%20bare%20int%2Ffloat%2Fboolean%20constant!%3C%2Fp%3E%5Cn%3Cp%3E%3Awarning%3A%20%3Cstrong%3ECAUTION%3C%2Fstrong%3E%3A%20this%20is%20not%20the%20correct%20encoding%20for%20the%20entire%20contents%20of%20a%5Cn%3Ccode%3E%26lt%3Bscript%26gt%3B%3C%2Fcode%3E%20block!%20%20You%20need%20to%20sanitize%20each%20variable%20in-turn.%3C%2Fp%3E%5Cn%3Cp%3EAny%20character%20not%20matched%20by%20%3Ccode%3E%2F%5B%2C%5C%5C-%5C%5C.0-9A-Z_a-z%5D%2F%3C%2Fcode%3E%20is%20escaped%20as%20%3Ccode%3E%5C%5CxHH%3C%2Fcode%3E%20or%5Cn%3Ccode%3E%5C%5CuHHHH%3C%2Fcode%3E%20where%20%3Ccode%3EH%3C%2Fcode%3E%20is%20a%20hexidecimal%20digit.%20%20The%20shorter%20%3Ccode%3E%5C%5Cx%3C%2Fcode%3E%20form%20is%20used%20for%5Cncharaters%20in%20the%207-bit%20ASCII%20range%20(i.e.%20code%20point%20%26lt%3B%3D%200x7F).%3C%2Fp%3E%5Cn%3Ch3%3Ejson(value)%3C%2Fh3%3E%5Cn%3Cp%3ESanitizes%20output%20for%20a%20JSON%20string%20in%20an%20HTML%20script%20context.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bscript%26gt%3B%5Cn%20%20%20%20var%20config%20%3D%20USERINPUT%3B%5Cn%20%20%26lt%3B%2Fscript%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EThis%20function%20escapes%20certain%20characters%20within%20a%20JSON%20string.%20%20Any%20character%5Cnnot%20matched%20by%20%3Ccode%3E%2F%5B%26quot%3B%2C%5C%5C-%5C%5C.0-9%3AA-Z%5C%5C%5B%5C%5C%5C%5C%5C%5C%5D_a-z%7B%7D%5D%2F%3C%2Fcode%3E%20is%20escaped%20consistent%20with%20the%5Cn%3Ca%20href%3D%5C%22%23jsvalue%5C%22%3E%3Ccode%3Ejs(value)%3C%2Fcode%3E%3C%2Fa%3E%20escaping%20above.%20Additionally%2C%20the%20sub-string%20%3Ccode%3E%5D%5D%26gt%3B%3C%2Fcode%3E%20is%5Cnencoded%20as%20%3Ccode%3E%5C%5Cx5D%5C%5Cx5D%5C%5Cx3E%3C%2Fcode%3E%20to%20prevent%20breaking%20out%20of%20CDATA%20context.%3C%2Fp%3E%5Cn%3Cp%3EBecause%20%3Ccode%3E%26lt%3B%3C%2Fcode%3E%20and%20%3Ccode%3E%26gt%3B%3C%2Fcode%3E%20are%20not%20matched%20characters%2C%20they%20get%20encoded%20as%20%3Ccode%3E%5C%5Cx3C%3C%2Fcode%3E%20and%5Cn%3Ccode%3E%5C%5Cx3E%3C%2Fcode%3E%2C%20respectively.%20This%20prevents%20breaking%20out%20of%20a%20surrounding%20HTML%5Cn%3Ccode%3E%26lt%3Bscript%26gt%3B%3C%2Fcode%3E%20context.%3C%2Fp%3E%5Cn%3Cp%3EFor%20example%2C%20with%20a%20JSON%20string%20like%20%3Ccode%3E%26apos%3B%7B%26quot%3Busername%26quot%3B%3A%26quot%3BAlbert%20%26lt%3B%2Fscript%26gt%3B%26lt%3Bscript%26gt%3Balert(%5C%5C%26quot%3BPwnerton%5C%5C%26quot%3B)%26quot%3B%7D%26apos%3B%3C%2Fcode%3E%2C%5Cn%3Ccode%3Ejson()%3C%2Fcode%3E%20gives%20output%3A%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bscript%26gt%3B%5Cn%20%20%20%20var%20config%20%3D%20%7B%26quot%3Busername%26quot%3B%3A%26quot%3B%5C%5Cx3C%5C%5Cx2Fscript%5C%5Cx3E%5C%5Cx3Cscript%5C%5Cx3Ealert%5C%5Cx28%5C%5C%26quot%3BPwnerton%5C%5C%26quot%3B%5C%5Cx29%26quot%3B%7D%3B%5Cn%20%20%26lt%3B%2Fscript%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Ch3%3EjsObj(value)%3C%2Fh3%3E%5Cn%3Cp%3ESanitizes%20output%20for%20a%20JavaScript%20literal%20in%20an%20HTML%20script%20context.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bscript%26gt%3B%5Cn%20%20%20%20var%20config%20%3D%20USERINPUT%3B%5Cn%20%20%26lt%3B%2Fscript%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EThis%20function%20encodes%20the%20object%20with%20%3Ccode%3EJSON.stringify()%3C%2Fcode%3E%2C%20then%5Cnescapes%20using%20%3Ccode%3Ejson()%3C%2Fcode%3E%20detailed%20above.%3C%2Fp%3E%5Cn%3Cp%3EFor%20example%2C%20with%20a%20literal%20object%20like%20%60%7Busername%3A%26apos%3BAlbert%3C%2Fp%3E%5Cn%3Cscript%3Ealert(%5C%22Pwnerton%5C%22)'%7D%60%2C%20%60jsObj()%60%20gives%20output%3A%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bscript%26gt%3B%5Cn%20%20%20%20var%20config%20%3D%20%7B%26quot%3Busername%26quot%3B%3A%26quot%3B%5C%5Cx3C%5C%5Cx2Fscript%5C%5Cx3E%5C%5Cx3Cscript%5C%5Cx3Ealert%5C%5Cx28%5C%5C%26quot%3BPwnerton%5C%5C%26quot%3B%5C%5Cx29%26quot%3B%7D%3B%5Cn%20%20%26lt%3B%2Fscript%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Ch4%3EJSON%20is%20not%20a%20subset%20of%20JavaScript%3C%2Fh4%3E%5Cn%3Cp%3EArticle%3A%20%3Ca%20href%3D%5C%22http%3A%2F%2Ftimelessrepo.com%2Fjson-isnt-a-javascript-subset%5C%22%3EJSON%20isn't%20a%20JavaScript%5CnSubset%3C%2Fa%3E.%3C%2Fp%3E%5Cn%3Cp%3EJSON%20is%20%3Cem%3Ealmost%3C%2Fem%3E%20a%20subset%20of%20JavaScript%2C%20but%20for%20two%20characters%3A%20%3Ca%20href%3D%5C%22http%3A%2F%2Fwww.fileformat.info%2Finfo%2Funicode%2Fchar%2F2028%2Findex.htm%5C%22%3E%3Ccode%3ELINE%20SEPARATOR%3C%2Fcode%3E%20U%2B2028%3C%2Fa%3E%5Cnand%20%3Ca%20href%3D%5C%22http%3A%2F%2Fwww.fileformat.info%2Finfo%2Funicode%2Fchar%2F2029%2Findex.htm%5C%22%3E%3Ccode%3EPARAGRAPH%20SEPARATOR%3C%2Fcode%3E%5CnU%2B2029%3C%2Fa%3E.%20%20These%5Cntwo%20characters%20can't%20legally%20appear%20in%20JavaScript%20strings%20and%20must%20be%20escaped.%5CnDue%20to%20the%20ambiguity%20of%20these%20and%20other%20Unicode%20whitespace%20characters%2C%5Cn%3Ccode%3Esecure-filters%3C%2Fcode%3E%20will%20backslash%20encode%20U%2B2028%20as%20%3Ccode%3E%5C%5Cu2028%3C%2Fcode%3E%2C%20U%2B2029%20as%20%3Ccode%3E%5C%5Cu2029%3C%2Fcode%3E%2C%5Cnetc.%3C%2Fp%3E%5Cn%3Ch3%3EjsAttr(value)%3C%2Fh3%3E%5Cn%3Cp%3ESanitizes%20output%20for%20embedded%20HTML%20scripting%20attributes%20using%20a%20special%5Cncombination%20of%20backslash-%20and%20entity-encoding.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Ba%20href%3D%26quot%3Bjavascript%3AdoActivate('USERINPUT')%26quot%3B%26gt%3Bclick%20to%20activate%26lt%3B%2Fa%26gt%3B%5Cn%20%20%26lt%3Bbutton%20onclick%3D%26quot%3Bdisplay('USERINPUT')%26quot%3B%26gt%3BClick%20To%20Display%26lt%3B%2Fbutton%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EThe%20string%20%3Ccode%3E%26lt%3Bha%26gt%3B%2C%20'ha'%2C%20%26quot%3Bha%26quot%3B%3C%2Fcode%3E%20is%20escaped%20to%20%3Ccode%3E%26amp%3Blt%3Bha%26amp%3Bgt%3B%2C%20%5C%5C%26amp%3B%2339%3Bha%5C%5C%26amp%3B%2339%3B%2C%20%5C%5C%26amp%3Bquot%3Bha%5C%5C%26amp%3Bquot%3B%3C%2Fcode%3E.%20Note%20the%20backslashes%20before%20the%20apostrophe%20and%20quote%5Cnentities.%3C%2Fp%3E%5Cn%3Ch3%3Euri(value)%3C%2Fh3%3E%5Cn%3Cp%3ESanitizes%20output%20in%20URI%20component%20contexts%20by%20using%20percent-encoding.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Ba%20href%3D%26quot%3Bhttp%3A%2F%2Fexample.com%2F%3Fthis%3DUSERINPUT%26amp%3Bthat%3DUSERINPUT%26quot%3B%26gt%3B%5Cn%20%20%26lt%3Ba%20href%3D%26quot%3Bhttp%3A%2F%2Fexample.com%2Fapi%2Fv2%2Fuser%2FUSERINPUT%26quot%3B%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3EThe%20ranges%200-9%2C%20A-Z%2C%20a-z%2C%20plus%20hypen%2C%20dot%20and%20underscore%20(%3Ccode%3E-._%3C%2Fcode%3E)%20are%5Cnpreserved.%20Every%20other%20character%20is%20converted%20to%20UTF-8%2C%20then%20output%20as%20%25XX%5Cnpercent-encoded%20octets%2C%20where%20X%20is%20an%20uppercase%20hexidecimal%20digit.%3C%2Fp%3E%5Cn%3Cp%3E%3Cstrong%3ENote%3C%2Fstrong%3E%20that%20if%20composing%20a%20URL%2C%20the%20entire%20result%20should%20ideally%20be%5CnHTML-escaped%20before%20insertion%20into%20HTML.%20However%2C%20since%20Percent-encoding%20is%5Cnalso%20HTML-safe%2C%20it%20may%20be%20sufficient%20to%20just%20URI-encode%20the%20untrusted%5Cncomponents%20if%20you%20know%20the%20rest%20is%20application-supplied.%3C%2Fp%3E%5Cn%3Ch3%3Ecss(value)%3C%2Fh3%3E%5Cn%3Cp%3ESanitizes%20output%20in%20CSS%20contexts%20by%20using%20backslash%20encoding.%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bstyle%20type%3D%26quot%3Btext%2Fcss%26quot%3B%26gt%3B%5Cn%20%20%20%20%23user-USERINPUT%20%7B%5Cn%20%20%20%20%20%20background-color%3A%20%23USERINPUT%3B%5Cn%20%20%20%20%7D%5Cn%20%20%26lt%3B%2Fstyle%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3E%3Awarning%3A%20%3Cstrong%3ECAUTION%3C%2Fstrong%3E%20this%20is%20not%20the%20correct%20filter%20for%20a%20%3Ccode%3Estyle%3D%26quot%3B%26quot%3B%3C%2Fcode%3E%20attribute%3B%20use%5Cnthe%20%3Ca%20href%3D%5C%22%23stylevalue%5C%22%3E%3Ccode%3Estyle(value)%3C%2Fcode%3E%3C%2Fa%3E%20filter%20instead!%3C%2Fp%3E%5Cn%3Cp%3E%3Awarning%3A%20%3Cstrong%3ECAUTION%3C%2Fstrong%3E%20even%20though%20this%20module%20prevents%20breaking%20out%20of%20CSS%5Cncontext%2C%20it%20is%20still%20somewhat%20risky%20to%20allow%20user-controlled%20input%20into%20CSS%20and%5Cn%3Ccode%3E%26lt%3Bstyle%26gt%3B%3C%2Fcode%3E%20blocks.%20Be%20sure%20to%20combine%20CSS%20escaping%20with%20%3Cem%3Ewhitelist-based%3C%2Fem%3E%20input%5Cnsanitization!%20Here's%20a%20small%20sampling%20of%20what's%20possible%3A%3C%2Fp%3E%5Cn%3Cul%3E%5Cn%3Cli%3Ehttps%3A%2F%2Fwww.computerworld.com%2Fs%2Farticle%2F9221043%2FOpera_denies_refusing_to_patch_critical_vulnerability%3C%2Fli%3E%5Cn%3Cli%3Ehttp%3A%2F%2Fhtml5sec.org%2F%2343%20-%20note%20the%20modern%20browser%20versions!%3C%2Fli%3E%5Cn%3C%2Ful%3E%5Cn%3Cp%3EThe%20ranges%20a-z%2C%20A-Z%2C%200-9%20plus%20Unicode%20U%2B10000%20and%20higher%20are%20preserved.%20%20All%5Cnother%20characters%20are%20encoded%20as%20%3Ccode%3E%5C%5Ch%3C%2Fcode%3E%2C%20where%20%3Ccode%3Eh%3C%2Fcode%3E%20is%20one%20one%20or%20more%20lowercase%5Cnhexadecimal%20digits%2C%20including%20the%20trailing%20space.%3C%2Fp%3E%5Cn%3Cp%3EConfusingly%2C%20CSS%20allows%20%3Ccode%3ENO-BREAK%20SPACE%3C%2Fcode%3E%20U%2B00A0%20to%20be%20used%20in%20an%20identifier.%5CnBecause%20of%20this%20confusion%2C%20it's%20possible%20browsers%20treat%20it%20as%20whitespace%2C%20and%5Cnso%20%3Ccode%3Esecure-filters%3C%2Fcode%3E%20escapes%20it.%3C%2Fp%3E%5Cn%3Cp%3ESince%20%3Ca%20href%3D%5C%22http%3A%2F%2Fwww.w3.org%2FTR%2FCSS21%2Fsyndata.html%23characters%5C%22%3Ethe%20behaviour%20of%20NUL%20in%20CSS2.1%20is%5Cnundefined%3C%2Fa%3E%2C%20it%20is%20replaced%5Cnwith%20%3Ccode%3E%5C%5Cfffd%3C%2Fcode%3E%2C%20%3Ccode%3EREPLACEMENT%20CHARACTER%3C%2Fcode%3E%20U%2BFFFD.%3C%2Fp%3E%5Cn%3Cp%3EFor%20example%2C%20the%20string%20%3Ccode%3E%26lt%3Bwow%26gt%3B%3C%2Fcode%3E%20becomes%20%3Ccode%3E%5C%5C3c%20wow%5C%5C3e%3C%2Fcode%3E%20(note%20the%20trailing%20space).%3C%2Fp%3E%5Cn%3Ch3%3Estyle(value)%3C%2Fh3%3E%5Cn%3Cp%3EEncodes%20values%20for%20safe%20embedding%20in%20HTML%20style%20attribute%20context.%3C%2Fp%3E%5Cn%3Cp%3E%3Cstrong%3EUSAGE%3C%2Fstrong%3E%3A%20all%20instances%20of%20%3Ccode%3EUSERINPUT%3C%2Fcode%3E%20should%20be%20sanitized%20by%20this%20function%3C%2Fp%3E%5Cn%3Cpre%3E%3Ccode%20class%3D%5C%22language-html%5C%22%3E%20%20%26lt%3Bdiv%20style%3D%26quot%3Bbackground-color%3A%20%23USERINPUT%3B%26quot%3B%26gt%3B%26lt%3B%2Fdiv%26gt%3B%5Cn%3C%2Fcode%3E%3C%2Fpre%3E%5Cn%3Cp%3E%3Awarning%3A%20%3Cstrong%3ECAUTION%3C%2Fstrong%3E%20even%20though%20this%20module%20prevents%20breaking%20out%20of%20style-attribute%5Cncontext%2C%20it%20is%20still%20somewhat%20risky%20to%20allow%20user-controlled%20input%20(see%20caveats%5Cnon%20%3Ca%20href%3D%5C%22%23cssvalue%5C%22%3Ecss%3C%2Fa%3E%20above).%20%20Be%20sure%20to%20combine%20with%20%3Cem%3Ewhitelist-based%3C%2Fem%3E%20input%5Cnsanitization!%3C%2Fp%3E%5Cn%3Cp%3EEncodes%20the%20value%20first%20as%20in%20the%20%3Ccode%3Ecss()%3C%2Fcode%3E%20filter%2C%20then%20HTML%20entity-encodes%20the%20result.%3C%2Fp%3E%5Cn%3Cp%3EFor%20example%2C%20the%20string%20%3Ccode%3E%26lt%3Bwow%26gt%3B%3C%2Fcode%3E%20becomes%20%3Ccode%3E%26amp%3B%2392%3B3c%20wow%26amp%3B%2392%3B3e%3C%2Fcode%3E.%3C%2Fp%3E%5Cn%3Ch1%3EContributing%3C%2Fh1%3E%5Cn%3Cp%3EPlease%20see%20the%20%3Ca%20href%3D%5C%22.%2Fcontributing.md%5C%22%3EContribution%20Guide%3C%2Fa%3E.%3C%2Fp%3E%5Cn%3Ch1%3ESupport%3C%2Fh1%3E%5Cn%3Cp%3ESupport%20is%20provided%20via%20%3Ca%20href%3D%5C%22https%3A%2F%2Fgithub.com%2Fsalesforce%2Fsecure-filters%2Fissues%5C%22%3Egithub%20issues%3C%2Fa%3E.%3C%2Fp%3E%5Cn%3Cp%3EFor%20responsible%20disclosures%2C%20email%20%3Ca%20href%3D%5C%22mailto%3Asecurity%40salesforce.com%5C%22%3ESalesforce%20Security%3C%2Fa%3E.%3C%2Fp%3E%5Cn%3Ch1%3EChangelog%3C%2Fh1%3E%5Cn%3Ch4%3E1.1.0%3C%2Fh4%3E%5Cn%3Cp%3EThis%20release%20changes%20the%20behavior%20of%20secure-filters%2C%20but%20should%20be%5Cnbackwards-compatible%20with%201.0.5.%3C%2Fp%3E%5Cn%3Cul%3E%5Cn%3Cli%3EThe%20%3Ccode%3Ejs%3C%2Fcode%3E%2C%20%3Ccode%3EjsObj%3C%2Fcode%3E%20and%20%3Ccode%3EjsAttr%3C%2Fcode%3E%20filter%20now%20use%20a%20strict%20allow-list%20for%5Cncharacters%20in%20strings.%20%20This%20is%20safer%2C%20but%20does%20increase%20the%20size%20of%20these%5Cnstrings%20slightly.%20%20Compliant%20JSON%20and%20JavaScript%20parsers%20will%20not%20be%20affected%5Cnnegatively%20by%20this%20change.%3C%2Fli%3E%5Cn%3Cli%3EThe%20example%20for%20%3Ccode%3EjsAttr%3C%2Fcode%3E%20was%20incorrect.%20%20It%20previously%20stated%20that%20%3Ccode%3E%26lt%3Bha%26gt%3B%2C%20'ha'%2C%20%26quot%3Bha%26quot%3B%3C%2Fcode%3E%20was%20escaped%20to%20%3Ccode%3E%26amp%3Blt%3Bha%26amp%3Bgt%3B%2C%20%5C%5C%26amp%3B%2339%3Bha%5C%5C%26amp%3B%2339%3B%2C%20%5C%5C%26amp%3Bquot%3Bha%5C%5C%26amp%3Bquot%3B%3C%2Fcode%3E%3C%2Fli%3E%5Cn%3C%2Ful%3E%5Cn%3Ch4%3E1.0.5%3C%2Fh4%3E%5Cn%3Cul%3E%5Cn%3Cli%3EVastly%20improved%20documentation%20and%20illustrations%3C%2Fli%3E%5Cn%3C%2Ful%3E%5Cn%3Ch4%3E1.0.4%3C%2Fh4%3E%5Cn%3Cul%3E%5Cn%3Cli%3EInitial%20public%20release%3C%2Fli%3E%5Cn%3C%2Ful%3E%5Cn%3Ch1%3ELegal%3C%2Fh1%3E%5Cn%3Cp%3E%C2%A9%202014%20salesforce.com%3C%2Fp%3E%5Cn%3Cp%3ELicensed%20under%20the%20BSD%203-clause%20license.%3C%2Fp%3E%5Cn%3C%2Fscript%3E%22%2C%22readme%22%2C%22http%3A%2F%2Fsalesforce.github.io%2Fsecure-filters%2F%22%2C%22homepage%22%2C%22secure-filters%22%2C%22packageName%22%2C%22%3E%3D%200.10.0%22%2C%22engineConstraints%22%2C%221492550623093%22%2C%22timestamp%22%2C%5B1%2C54%2C63%2C56%2C64%2C58%2C65%2C60%2C66%2C62%2C67%2C69%2C68%2C71%2C70%2C73%2C72%2C75%2C74%2C77%2C76%2C79%2C78%2C81%2C80%2C83%2C82%5D%2C%22directoryListing%22%2C%221.1.0%22%2C%22version%22%2C%22Anti-XSS%20filters%20for%20security%22%2C%22description%22%2C%5B0%2C85%2C84%5D%2C%22values%22%2C%5B0%2C87%2C86%5D%2C%22security%22%2C%220%22%2C%22xss%22%2C%221%22%2C%22ejs%22%2C%222%22%2C%22escape%22%2C%223%22%2C%22encode%22%2C%224%22%2C%5B1%2C54%2C88%2C56%2C89%5D%2C%5B1%2C54%2C90%2C56%2C91%5D%2C%22AUTHORS%22%2C%22cheatsheet.md%22%2C%22contributing.md%22%2C%22index.js%22%2C%225%22%2C%22LICENSE.txt%22%2C%226%22%2C%22package.json%22%2C%227%22%2C%22README.md%22%2C%228%22%2C%22test.js%22%2C%229%22%2C%22.jshintrc%22%2C%2210%22%2C%22.npmignore%22%2C%2211%22%2C%22.travis.yml%22%2C%2212%22%2C%5B0%2C92%2C13%2C93%2C9%2C95%2C94%5D%2C%22only%22%2C%5B0%2C97%2C96%5D%2C%22router%22%2C%22lib%22%2C%5B1%2C54%2C98%5D%2C%22static%22%2C%5B1%2C54%2C99%5D%2C%22%24href%22%2C%22once%22%2C%5B0%2C100%2C30%2C21%2C-1%5D%2C%22loaded%22%2C%5B0%2C102%2C101%5D%2C%22selected%22%2C%22secure-filters.js%22%2C%22test.html%22%2C%22__noInspect%22%2C%5B0%2C25%2C103%5D%2C%22page%22%2C%5B0%2C51%2C104%2C8%2C105%5D%2C%5B0%2C107%2C106%2C109%2C108%5D%2C%5B0%2C110%2C22%2C111%2C9%2C113%2C112%2C115%2C114%5D%2C%5B0%2C92%2C15%2C93%2C9%2C95%2C116%5D%2C%22%2BaMetadata%22%2C%5B0%2C92%2C17%2C93%2C30%2C95%2C117%5D%2C%22%2Btimestamp%22%2C%22initial-metadata%22%2C%22hide-banner%22%2C%5B0%2C118%2C9%5D%2C%22playground%22%2C%5B0%2C120%2C119%2C122%2C121%2C124%2C123%2C125%2C9%2C127%2C126%5D%2C%22package-detail%22%2C%5B0%2C100%2C30%2C21%2C22%5D%2C%5B0%2C100%2C30%2C21%2C23%5D%2C%22notebook-url%22%2C%5B0%2C100%2C30%2C129%2C128%2C131%2C130%5D%2C%22root%22%2C%5B0%2C100%2C30%2C129%2C132%2C131%2C133%5D%2C%22selectedPath%22%2C%5B0%2C100%2C30%2C129%2C134%2C131%2C135%5D%2C%22rootPath%22%2C%22fileBrowserActive%22%2C%5B0%2C137%2C136%5D%2C%22search%22%2C%5B1%2C54%2C44%5D%2C%22previousArguments%22%2C%5B1%2C54%2C120%2C56%2C44%5D%2C%22previousResult%22%2C%5B1%2C54%2C138%5D%2C%5B1%2C54%2C138%5D%2C%5B1%2C54%2C139%5D%2C%5B1%2C54%2C138%2C56%2C38%5D%2C%5B0%2C140%2C138%2C142%2C141%2C143%2C9%5D%2C%22module-search%22%2C%22%22%2C%22%2Fsecure-filters%22%2C%22query%22%2C0%2C%22selection%22%2C%22showSearchResults%22%5D%7D</script>
  <script type="javascript/json" id="rendered-class-names">[]</script>
  <div data-ignore-width="true" style="clear:both;height:0;margin:0;padding:0;"></div>
  <script></script>
  <script src="https://static.tonicdev.net/assets/site.bundle.js?v=4a6e32b3de2d8d354cc4190260826842fcac3f02"></script>
 </body>
</html>