<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
  <title>Tomcat's Java Servlet Examples Explained</title> 
  <link href="../css/programming_notes_v1.css" rel="stylesheet" type="text/css"> 
  <script type="text/javascript" src="../scripts/programming_notes_v1.js"></script> 
  <link rel="shortcut icon" href="../favicon.ico" type="image/x-icon">
 </head> 
 <body> 
  <div id="wrap-outer"> 
   <!-- header filled by JavaScript --> 
   <div id="header" class="header-footer">
    <p>&nbsp;</p>
   </div> 
   <div id="wrap-inner"> 
    <div id="wrap-toc"> 
     <h5>TABLE OF CONTENTS <a id="show-toc" href="#show-toc">(HIDE)</a></h5> 
     <div id="toc"></div> 
     <!-- for showing the "Table of Content" --> 
    </div> 
    <div id="content-header"> 
     <h1>Java Server-Side Programming</h1> 
     <h2>Tomcat's Java Servlet Examples Explained</h2> 
    </div> 
    <div id="content-main"> 
     <p>Tomcat provides a number of excellent servlet examples in "<code>&lt;CATALINA_HOME&gt;\webapps\examples</code>". The servlet source files are kept under "<code>&lt;CATALINA_HOME&gt;\webapps\examples\WEB-INF\classes</code>", together with the compiled classes. To run the examples, start Tomcat server. Issue URL <code>http://localhost:8080/examples</code>.</p> 
     <p>Let's study these examples. I made some modifications to suit my programming style.</p> 
     <h3 id="ServletExample_Hello">Hello-world Example</h3> 
     <p>Prints "Hello, world!" in response to a client's request.</p> 
     <h5><span class="font-code">HelloWorldExample.java</span></h5> 
     <table class="table-program"> 
      <colgroup>
       <col class="col-line-number"> 
       <col class="col-program"> 
      </colgroup>
      <tbody> 
       <tr> 
        <td> <pre class="text-right">
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40</pre> </td> 
        <td> <pre>
<span class="color-comment">// To save as "&lt;CATALINA_HOME&gt;\webapps\helloservlet\WEB-INF\src\mypkg\HelloWorldExample.java"</span>
package mypkg;
 
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
 
public class <strong>HelloWorldExample</strong> extends HttpServlet {
   @Override
   public void doGet(HttpServletRequest request, HttpServletResponse response)
               throws IOException, ServletException {
      <span class="color-comment">// Set the response message's MIME type.</span>
      response.setContentType("text/html;charset=UTF-8");
      <span class="color-comment">// Allocate a output writer to write the response message into the network socket.</span>
      PrintWriter out = response.getWriter();
 
      <span class="color-comment">// Use a ResourceBundle for localized string in "LocalStrings_xx.properties" for i18n.</span>
      <span class="color-comment">// The request.getLocale() sets the locale based on the "Accept-Language" request header.</span>
      <strong>ResourceBundle rb = ResourceBundle.getBundle("LocalStrings", request.getLocale());</strong>
      <span class="color-comment">// To test other locales.</span>
      <span class="color-comment">//ResourceBundle rb = ResourceBundle.getBundle("LocalStrings", new Locale("fr"));</span>
 
      <span class="color-comment">// Write the response message, in an HTML document.</span>
      try {
         out.println("&lt;!DOCTYPE html&gt;");  <span class="color-comment">// HTML 5</span>
         out.println("&lt;html&gt;&lt;head&gt;");
         out.println("&lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'&gt;");
         String title = <strong>rb.getString("helloworld.title")</strong>;
         out.println("&lt;title&gt;" + title + "&lt;/title&gt;&lt;/head&gt;");
         out.println("&lt;body&gt;");
         out.println("&lt;h1&gt;" + title + "&lt;/h1&gt;");  <span class="color-comment">// Prints "Hello, world!"</span>
         <span class="color-comment">// Set a hyperlink image to refresh this page</span>
         out.println("&lt;a href='" + request.getRequestURI() + "'&gt;&lt;img src='images/return.gif'&gt;&lt;/a&gt;");
         out.println("&lt;/body&gt;&lt;/html&gt;");
      } finally {
         out.close();  <span class="color-comment">// Always close the output writer</span>
      }
   }
}</pre> </td> 
       </tr> 
      </tbody> 
     </table> 
     <h5>Dissecting the "<span class="font-code">HelloWorldExample.java</span>"</h5> 
     <ul> 
      <li>We shall use the web context "<code>helloservlet</code>" created earlier to deploy this servlet (Read "<a href="JavaServlets.html#helloservlet">Create a new Webapp</a>").</li> 
      <li>Servlets have to be kept in a named package for deployment, instead of the default no-name package. I place this servlet in package <code>mypkg</code>, and save as "<code>&lt;CATALINA_HOME&gt;\webapps\helloservlet\WEB-INF\src\mypkg\HelloWorldExample.java</code>".</li> 
      <li>Compile the servlet. Use <code>-d</code> option (destination) to place the resultant class in directory "<code>helloservlet\WEB-INF\classes\mypkg</code>". <pre class="color-command">D:...&gt; <strong>cd \&lt;CATALINA_HOME&gt;\webapps\helloservlet\WEB-INF</strong>
D:\&lt;CATALINA_HOME&gt;\webapps\helloservlet\WEB-INF&gt; <strong>javac -d classes src\mypkg\HelloWorldExample.java</strong></pre> </li> 
      <li>This example supports locale text strings for i18n (internationalization). The <code>request.getLocale()</code> is used to get the locale of the client, based on the "<code>Accept-Language</code>" request header sent by the client in the request message. We build a <code>ResourceBundle</code> on property files "<code>LocalStrings_xx.properties</code>", where <code>xx</code> are the locale language code. Copy all the "<code>examples\WEB-INF\classes\LocalStrings_xx.properties</code>" into "<code>helloservlet\WEB-INF\classes</code>". To try another locale, such as "<code>fr</code>", change the <code>request.getLocale()</code> to <code>new Locale("fr")</code>. A property file comprises "key=value" pairs. The message "Hello world!" is kept in a key called "<code>helloworld.title</code>".</li> 
      <li>For convenience, use single-quote for HTML tag attribute's value, instead of double quote which requires escape sequence <code>'\"'</code>.</li> 
      <li>The example uses an image "<code>return.gif</code>" as a hyperlink to refresh the page. Copy this image from "<code>examples\servlets\images</code>" into "<code>helloservlet\images</code>". We can get the URL of the current page via <code>request.getRequestURI()</code>.</li> 
     </ul> 
     <h5>Write the Deployment Descriptor in <span class="font-code">"web.xml</span>"</h5> 
     <pre class="color-example">
......
&lt;servlet&gt;
    &lt;servlet-name&gt;<strong>TomcatHelloWorldExample</strong>&lt;/servlet-name&gt;
    &lt;servlet-class&gt;<strong>mypkg.HelloWorldExample</strong>&lt;/servlet-class&gt;
&lt;/servlet&gt;
......
......
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;<strong>TomcatHelloWorldExample</strong>&lt;/servlet-name&gt;
    &lt;url-pattern&gt;<strong>/hello_example</strong>&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
......</pre> 
     <h5>Run the Servlet</h5> 
     <p>To run the servlet, issue URL <code>http://localhost:8080/helloservlet/hello_example</code>.</p> 
     <h3 id="ServletExample_RequestHeader">Request Information Example</h3> 
     <p>Prints the request information in the request headers of the request message, such as protocol, method, uri, path info, and SSL cyber suites.</p> 
     <h5><span class="font-code">RequestInfoExample.java</span></h5> 
     <pre class="color-example">
<span class="color-comment">// To save as "&lt;CATALINA_HOME&gt;\webapps\helloservlet\WEB-INF\src\mypkg\RequestInfoExample.java"</span>
package mypkg;
 
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import myutil.HtmlFilter;   <span class="color-comment">// Utilities</span>
 
public class <strong>RequestInfoExample</strong> extends HttpServlet {
   @Override
   public void <strong>doGet</strong>(HttpServletRequest request, HttpServletResponse response)
               throws IOException, ServletException {
      <span class="color-comment">// Set the response message's MIME type</span>
      response.setContentType("text/html;charset=UTF-8");
      <span class="color-comment">// Allocate a output writer to write the response message into the network socket</span>
      PrintWriter out = response.getWriter();
 
      <span class="color-comment">// Use ResourceBundle to keep localized string in "LocalStrings_xx.properties"</span>
      ResourceBundle rb = ResourceBundle.getBundle("LocalStrings",  request.getLocale());
 
      <span class="color-comment">// Write the response message, in an HTML page</span>
      try {
         out.println("&lt;!DOCTYPE html");  <span class="color-comment">// HTML 5</span>
         out.println("&lt;html&gt;&lt;head&gt;");
         out.println("&lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'&gt;");
         String title = rb.getString("requestinfo.title");
         out.println("&lt;head&gt;&lt;title&gt;" + title + "&lt;/title&gt;&lt;/head&gt;");
         out.println("&lt;body&gt;");
         out.println("&lt;h3&gt;" + title + "&lt;/h3&gt;");
 
         <span class="color-comment">// Tabulate the request information</span> 
         out.println("&lt;table&gt;");
         out.println("&lt;tr&gt;&lt;td&gt;" + rb.getString("requestinfo.label.protocol") + "&lt;/td&gt;");
         out.println("&lt;td&gt;" + <strong>request.getProtocol()</strong> + "&lt;/td&gt;&lt;/tr&gt;");
         out.println("&lt;tr&gt;&lt;td&gt;" + rb.getString("requestinfo.label.method") + "&lt;/td&gt;");
         out.println("&lt;td&gt;" + <strong>request.getMethod()</strong> + "&lt;/td&gt;&lt;/tr&gt;");
         out.println("&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;");
         out.println("&lt;tr&gt;&lt;td&gt;" + rb.getString("requestinfo.label.requesturi") + "&lt;/td&gt;");
         out.println("&lt;td&gt;" + <strong>HtmlFilter.filter(request.getRequestURI())</strong> + "&lt;/td&gt;&lt;/tr&gt;");
         out.println("&lt;tr&gt;&lt;td&gt;" + rb.getString("requestinfo.label.pathinfo") + "&lt;/td&gt;");
         out.println("&lt;td&gt;" + <strong>HtmlFilter.filter(request.getPathInfo())</strong> + "&lt;/td&gt;&lt;/tr&gt;");
         out.println("&lt;tr&gt;&lt;td&gt;Path Translated:&lt;/td&gt;");
         out.println("&lt;td&gt;" + <strong>request.getPathTranslated()</strong> + "&lt;/td&gt;&lt;/tr&gt;");
         out.println("&lt;tr&gt;&lt;td&gt;" + rb.getString("requestinfo.label.remoteaddr") + "&lt;/td&gt;");
         out.println("&lt;td&gt;" + <strong>request.getRemoteAddr()</strong> + "&lt;/td&gt;&lt;/tr&gt;");
 
         <span class="color-comment">// SSL (HTTPS) Cipher suites</span>
         String cipherSuite =  (String)<strong>request.getAttribute("javax.servlet.request.cipher_suite")</strong>;
         if (cipherSuite != null) {
            out.println("&lt;tr&gt;&lt;td&gt;SSLCipherSuite:&lt;/td&gt;");
            out.println("&lt;td&gt;" + cipherSuite + "&lt;/td&gt;&lt;/tr&gt;");
         }
          out.println("&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;");
      } finally {
         out.close();  <span class="color-comment">// Always close the output writer</span>
      }
   }
 
   <span class="color-comment">// Do the same thing for GET and POST requests</span>
   @Override
   public void <strong>doPost</strong>(HttpServletRequest request, HttpServletResponse response)
         throws IOException, ServletException {
      doGet(request, response);
   }
}</pre> 
     <h5>Dissecting the "<span class="font-code">RequestInfoExample.java</span>"</h5> 
     <ul> 
      <li>Similar to the previous example, we keep this servlet in a package <code>mypkg</code>, and save the source file as "<code>helloservlet\WEB-INF\src\mypkg\RequestInfoExample.java</code>". A <code>ResourceBundle</code> was used to provide localized string labels retrieved from "<code>LocalStrings_xx.properties</code>".</li> 
      <li>In this example, a utility called <code>HtmlFilter</code> (below) is used to filter the strings submitted by the client, in <code>requestUri</code> and <code>pathInfo</code>. It replaces <code>'&lt;'</code>, <code>'&gt;'</code>, <code>'"'</code> and <code>'&amp;'</code> by the HTML escape sequences "<code>&amp;lt;</code>", "<code>&amp;gt;</code>", "<code>&amp;quot;</code>" and "<code>&amp;amp;</code>" respectively. This is to prevent malicious user from place program codes (such as JavaScript) into the request message (known as "Command Injection" attack). There is no needed to filter <code>protocol</code> and <code>method</code> as they could not contain malicious codes.</li> 
     </ul> 
     <h5><span class="font-code">myutil.HtmlFilter.java</span></h5> 
     <pre class="color-example">
<span class="color-comment">// To save as "&lt;CATALINA_HOME&gt;\webapps\helloservlet\WEB-INF\src\myutil\HtmlFilter.java"</span>
package myutil;
 
public final class HtmlFilter {
   <span class="color-comment">/**
    * Filter the specified message string for characters that are sensitive
    * in HTML.  This avoids potential attacks caused by including JavaScript
    * codes in the request URL that is often reported in error messages.
    */</span>
   public static String filter(String message) {
      if (message == null) return null;
      int len = message.length();
      StringBuffer result = new StringBuffer(len + 20);
      char aChar;
  
      for (int i = 0; i &lt; len; ++i) {
         aChar = message.charAt(i);
         switch (aChar) {
            case '&lt;': result.append("&amp;lt;"); break;
            case '&gt;': result.append("&amp;gt;"); break;
            case '&amp;': result.append("&amp;amp;"); break;
            case '"': result.append("&amp;quot;"); break;
            default:  result.append(aChar);
         }
      }
      return (result.toString());
   }
}</pre> 
     <h5>Write the Deployment Descriptor in "<span class="font-code">web.xml</span>"</h5> 
     <pre class="color-example">
......
&lt;servlet&gt;
   &lt;servlet-name&gt;TomcatRequestInfoExample&lt;/servlet-name&gt;
   &lt;servlet-class&gt;<strong>mypkg.RequestInfoExample</strong>&lt;/servlet-class&gt;
&lt;/servlet&gt;
......
......
&lt;servlet-mapping&gt;
   &lt;servlet-name&gt;TomcatRequestInfoExample&lt;/servlet-name&gt;
   &lt;url-pattern&gt;<strong>/request_info_example/*</strong>&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
......</pre> 
     <h5>Run the Servlet</h5> 
     <ul> 
      <li>The URL mapping is "<code>/request_info_example/*</code>". That is, it matches all sub-paths under "<code>/request_info_example</code>".</li> 
      <li>To understand the different between <code>getRequestURI()</code>, <code>getPathInfo()</code>, <code>getPathTranslated()</code>, try these request URLs: <pre class="color-command">
http://localhost:8080/helloservlet/request_info_example
http://localhost:8080/helloservlet/request_info_example/
http://localhost:8080/helloservlet/request_info_example/apple+orange
http://localhost:8080/helloservlet/request_info_example/apple+orange?param=zzz
http://localhost:8080/helloservlet/request_info_example/&lt;apple+orange&gt;?param=&lt;zzz&gt;</pre></li> 
      <li>To display the SSL cyber suites, you need to enable SSL in Tomcat (read "<a href="../howto/Tomcat_More.html">Tomcat with SSL</a>"), and issue URL: <pre class="color-command">
<strong>https</strong>://localhost:<strong>8443</strong>/helloservlet/request_info_example.</pre> </li> 
     </ul> 
     <h3>Request Headers Example</h3> 
     <p>Prints the <em>request headers </em>in the <em>request message</em> sent by the client.</p> 
     <h5><span class="font-code">RequestHeaderExample.java</span></h5> 
     <pre class="color-example">
<span class="color-comment">// To save as "&lt;CATALINA_HOME&gt;\webapps\helloservlet\WEB-INF\src\mypkg\RequestHeaderExample.java"</span>
package mypkg;

import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import myutil.HtmlFilter;
 
public class <strong>RequestHeaderExample</strong> extends HttpServlet {
   @Override
   public void <strong>doGet</strong>(HttpServletRequest request, HttpServletResponse response)
               throws IOException, ServletException {
      <span class="color-comment">// Set the response message's MIME type</span>
      response.setContentType("text/html;charset=UTF-8");
      <span class="color-comment">// Allocate a output writer to write the response message into the network socket</span>
      PrintWriter out = response.getWriter();
 
      <span class="color-comment">// Use ResourceBundle to keep localized string in "LocalStrings_xx.properties"</span>
      ResourceBundle rb = ResourceBundle.getBundle("LocalStrings",  request.getLocale());
 
      <span class="color-comment">// Write the response message, in an HTML page</span>
      try {
         out.println("&lt;!DOCTYPE html");  <span class="color-comment">// HTML 5</span>
         out.println("&lt;html&gt;&lt;head&gt;");
         out.println("&lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'&gt;");
         String title = rb.getString("requestheader.title");
         out.println("&lt;head&gt;&lt;title&gt;" + title + "&lt;/title&gt;&lt;/head&gt;");
         out.println("&lt;body&gt;");
         out.println("&lt;h3&gt;" + title + "&lt;/h3&gt;");
 
         <span class="color-comment">// Display all the request headers from the request message</span>
         out.println("&lt;table&gt;");
         Enumeration e = <strong>request.getHeaderNames()</strong>;
         while (e.hasMoreElements()) {
            String headerName = (String)e.nextElement();
            String headerValue = request.getHeader(headerName);
            out.println("&lt;tr&gt;&lt;td&gt;" + HtmlFilter.filter(headerName) + "&lt;/td&gt;");
            out.println("&lt;td&gt;" + HtmlFilter.filter(headerValue) + "&lt;/td&gt;&lt;/tr&gt;");
         }
         out.println("&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;");
      } finally {
         out.close();  <span class="color-comment">// Always close the output writer</span>
      }
   }
 
   <span class="color-comment">// Do the same thing for GET and POST requests</span>
   @Override
   public void <strong>doPost</strong>(HttpServletRequest request, HttpServletResponse response)
         throws IOException, ServletException {
      doGet(request, response);
   }
}</pre> 
     <h5>Dissecting the "<span class="font-code">RequestHeaderExample.java</span>"</h5> 
     <ul> 
      <li>Recall that <code>request headers</code> are name-value pairs. This example uses <code>request.getHeaderNames()</code> to retrieve all the header names and stored in a <code>Enumeration</code>. It then uses <code>request.getHeader(<em>headerName</em>)</code> to retrieve the value of each of the header name.</li> 
      <li> Again, it uses the <code>HtmlFilter</code> to replace special characters, to prevent command injection.</li> 
     </ul> 
     <h5>Deployment Descriptor in "<code>web.xml</code>"</h5> 
     <pre class="color-example">
......
&lt;servlet&gt;
    &lt;servlet-name&gt;TomcatRequestHeaderExample&lt;/servlet-name&gt;
    &lt;servlet-class&gt;<strong>mypkg.RequestHeaderExample</strong>&lt;/servlet-class&gt;
&lt;/servlet&gt;
......
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;TomcatRequestHeaderExample&lt;/servlet-name&gt;
    &lt;url-pattern&gt;<strong>/request_header_example</strong>&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</pre> 
     <h3 id="ServletExample_RequestParam">Request Parameter Example</h3> 
     <h5><span class="font-code">RequestParamExample.java</span></h5> 
     <table class="table-program"> 
      <colgroup>
       <col class="col-line-number"> 
       <col class="col-program"> 
      </colgroup>
      <tbody> 
       <tr> 
        <td> <pre class="text-right">
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74</pre> </td> 
        <td> <pre>
<span class="color-comment">// To save as "&lt;CATALINA_HOME&gt;\webapps\helloservlet\WEB-INF\src\mypkg\RequestParamExample.java"</span>
package mypkg;
 
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import myutil.HtmlFilter;
 
public class <strong>RequestParamExample</strong> extends HttpServlet {
   @Override
   public void doGet(HttpServletRequest request, HttpServletResponse response)
               throws IOException, ServletException {
      <span class="color-comment">// Set the response message's MIME type</span>
      response.setContentType("text/html;charset=UTF-8");
      <span class="color-comment">// Allocate a output writer to write the response message into the network socket</span>
      PrintWriter out = response.getWriter();
 
      <span class="color-comment">// Use ResourceBundle to keep localized string in "LocalStrings_xx.properties"</span>
      ResourceBundle rb = ResourceBundle.getBundle("LocalStrings",  request.getLocale());
 
      <span class="color-comment">// Write the response message, in an HTML page</span>
      try {
         out.println("&lt;!DOCTYPE html");  <span class="color-comment">// HTML 5</span>
         out.println("&lt;html&gt;&lt;head&gt;");
         out.println("&lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'&gt;");
         String title = rb.getString("requestparams.title");
         out.println("&lt;head&gt;&lt;title&gt;" + title + "&lt;/title&gt;&lt;/head&gt;");
         out.println("&lt;body&gt;");
         out.println("&lt;h3&gt;" + title + "&lt;/h3&gt;");
 
         <span class="color-comment">// Display the request parameters. Trim and discard empty string.</span>
         out.println(rb.getString("requestparams.params-in-req") + "&lt;br /&gt;");
         boolean noParam = true;
         String firstName = <strong>request.getParameter("firstname")</strong>;
         if (firstName != null &amp;&amp; (firstName = firstName.trim()).length() != 0) {
            out.println(rb.getString("requestparams.firstname"));
            out.println(" = " + HtmlFilter.filter(firstName) + "&lt;br /&gt;");
            noParam = false;
         }
 
         String lastName = <strong>request.getParameter("lastname")</strong>;
         if (lastName != null &amp;&amp; (lastName = lastName.trim()).length() != 0) {
            out.println(rb.getString("requestparams.lastname"));
            out.println(" = " + HtmlFilter.filter(lastName));
            noParam = false;
         }
 
         if (noParam) {
            out.println(rb.getString("requestparams.no-params"));
         }
         out.println("&lt;br /&gt;&lt;br /&gt;");
 
         <span class="color-comment">// Display a form to prompt user for parameters.</span>
         <span class="color-comment">// Use default "action" to the current page</span>
         out.println("&lt;form method='get'&gt;");
         out.println(rb.getString("requestparams.firstname"));
         out.println("&lt;input type='text' name='firstname'&gt;&lt;br /&gt;");
         out.println(rb.getString("requestparams.lastname"));
         out.println("&lt;input type='text' name='lastname'&gt;&lt;br /&gt;");
         out.println("&lt;input type='submit' value='SEND'&gt;");
         out.println("&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;");
      } finally {
         out.close();  <span class="color-comment">// Always close the output writer</span>
      }
   }
 
   <span class="color-comment">// Do the same thing for GET and POST requests</span>
   @Override
   public void doPost(HttpServletRequest request, HttpServletResponse response)
         throws IOException, ServletException {
      doGet(request, response);
   }
}</pre> </td> 
       </tr> 
      </tbody> 
     </table> 
     <h5>Dissecting the "<span class="font-code">RequestParamExample.java</span>"</h5> 
     <ul> 
      <li>I use "GET" method to inspect the query string in the URL. Use "POST" method for production.</li> 
      <li>No "<code>action</code>" attribute is specified in the <code>&lt;form&gt;</code> tag. The default "<code>action</code>" is the current page.</li> 
      <li>The query string comprising <code><em>name=value</em></code> pairs (URL-encoded). <code>request.getParameter(<em>name</em>)</code> can be used to retrieve the <em><code>value</code></em> of the parameter <code><em>name</em></code>. It returns <code>null</code> if the parameter is not present in the query string. It returns the first value if multiple values present.</li> 
      <li>It is a good practice to trim the leading and trailing white spaces of the request parameter values.</li> 
     </ul> 
     <h5>Deployment Descriptor in "<span class="font-code">web.xml</span>"</h5> 
     <pre class="color-example">
&lt;servlet&gt;
    &lt;servlet-name&gt;TomcatRequestParamExample&lt;/servlet-name&gt;
    &lt;servlet-class&gt;<strong>mypkg.RequestParamExample</strong>&lt;/servlet-class&gt;
&lt;/servlet&gt;
.......
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;TomcatRequestParamExample&lt;/servlet-name&gt;
    &lt;url-pattern&gt;<strong>/request_param_example</strong>&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</pre> 
     <p>To understand the purpose of <code>HtmlFilter</code>, try removing the filter and putting a JavaScript or program codes in the request. Also try to send a large chunk of data.</p> 
     <h3 id="ServletExample_Cookie">Cookies Example</h3> 
     <p>Demonstrates cookies. Read "<a href="../webprogramming/HTTP_StateManagement.html">HTTP state and session management</a>" to understand cookie.</p> 
     <h5><span class="font-code">CookieExample.java</span></h5> 
     <pre class="color-example">
<span class="color-comment">// To save as "&lt;CATALINA_HOME&gt;\webapps\helloservlet\WEB-INF\src\mypkg\CookieExample.java"</span>
package mypkg;
 
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import myutil.HtmlFilter;
 
public class <strong>CookieExample</strong> extends HttpServlet {
   @Override
   public void <strong>doGet</strong>(HttpServletRequest request, HttpServletResponse response)
               throws IOException, ServletException {
      <span class="color-comment">// Set the response message's MIME type</span>
      response.setContentType("text/html;charset=UTF-8");
      <span class="color-comment">// Allocate a output writer to write the response message into the network socket</span>
      PrintWriter out = response.getWriter();
 
      <span class="color-comment">// Use ResourceBundle to keep localized string in "LocalStrings_xx.properties"</span>
      ResourceBundle rb = ResourceBundle.getBundle("LocalStrings",  request.getLocale());
 
      <span class="color-comment">// Write the response message, in an HTML page</span>
      try {
         out.println("&lt;!DOCTYPE html");  <span class="color-comment">// HTML 5</span>
         out.println("&lt;html&gt;&lt;head&gt;");
         out.println("&lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'&gt;");
         String title = rb.getString("cookies.title");
         out.println("&lt;head&gt;&lt;title&gt;" + title + "&lt;/title&gt;&lt;/head&gt;");
         out.println("&lt;body&gt;");
         out.println("&lt;h3&gt;" + title + "&lt;/h3&gt;");
 
         <span class="color-comment">// Display the cookies returned by the client</span>
         <strong>Cookie[] cookies = request.getCookies();</strong>
         if ((cookies != null) &amp;&amp; (cookies.length &gt; 0)) {
            out.println(rb.getString("cookies.cookies") + "&lt;br /&gt;");
            for (Cookie cookie : cookies) {
               out.println("Cookie Name: " + HtmlFilter.filter(<strong>cookie.getName()</strong>) + "&lt;br /&gt;");
               out.println("Cookie Value: " + HtmlFilter.filter(<strong>cookie.getValue()</strong>) + "&lt;br /&gt;");
            }
         } else {
            out.println(rb.getString("cookies.no-cookies") + "&lt;br /&gt;");
         }
         out.println("&lt;br /&gt;");
 
         <span class="color-comment">// Create a new cookie if cookiename and cookievalue present in the request</span>
         String cookieName = request.getParameter("cookiename");
         if (cookieName != null) cookieName = cookieName.trim();
         String cookieValue = request.getParameter("cookievalue");
         if (cookieValue != null) cookieValue = cookieValue.trim();
         if (cookieName != null &amp;&amp; !cookieName.equals("")
               &amp;&amp; cookieValue != null &amp;&amp; !cookieValue.equals("")) {
            <strong>Cookie cookie = new Cookie(cookieName, cookieValue);</strong>
            <strong>response.addCookie(cookie);</strong>
            out.println(rb.getString("cookies.set") + "&lt;br /&gt;");
            out.print(rb.getString("cookies.name") + "  "
                      + HtmlFilter.filter(cookieName) + "&lt;br /&gt;");
            out.print(rb.getString("cookies.value") + "  "
                      + HtmlFilter.filter(cookieValue));
         }
         out.println("&lt;br /&gt;&lt;br /&gt;");
 
         <span class="color-comment">// Display a form to prompt the user to create a new cookie</span>
         out.println(rb.getString("cookies.make-cookie") + "&lt;br /&gt;");
         out.print("&lt;form method='get'&gt;");
         out.print(rb.getString("cookies.name"));
         out.println("&lt;input type='text' name='cookiename'&gt;&lt;br /&gt;");
         out.print(rb.getString("cookies.value"));
         out.println("&lt;input type='text' name='cookievalue'&gt;&lt;br /&gt;");
         out.println("&lt;input type='submit' value='SEND'&gt;");
         out.println("&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;");
      } finally {
         out.close();  <span class="color-comment">// Always close the output writer</span>
      }
   }
 
   <span class="color-comment">// Do the same thing for GET and POST requests</span>
   @Override
   public void <strong>doPost</strong>(HttpServletRequest request, HttpServletResponse response)
         throws IOException, ServletException {
      doGet(request, response);
   }
}</pre> 
     <h5>Deployment Descriptor in "<span class="font-code">web.xml</span>"</h5> 
     <pre class="color-example">
&lt;servlet&gt;
    &lt;servlet-name&gt;TomcatCookieExample&lt;/servlet-name&gt;
    &lt;servlet-class&gt;<strong>mypkg.CookieExample</strong>&lt;/servlet-class&gt;
&lt;/servlet&gt;
......
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;TomcatCookieExample&lt;/servlet-name&gt;
    &lt;url-pattern&gt;<strong>/cookie_example</strong>&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</pre> 
     <h5>Run the Servlet</h5> 
     <ol> 
      <li>Issue URL <code>http://localhost:8080/helloservlet/cookie_example</code>. In the very first request, no cookie is sent from the client to the server, as no cookie has been set.</li> 
      <li>Create a new cookie "<code>c1=1111111</code>", and submit. The server create a new cookie "<code>c1=1111111</code>" and send to the client. The client stores this new cookie. Firefox cookie manager shows the cookie: <img class="image-center" src="images/Servlet_CookieExample1.png" alt="Servlet_CookieExample1.png"> </li> 
      <li>Create the second cookie "<code>c2=22222222</code>", and submit. In this request, the previous cookie "<code>c1=11111111</code>" is sent together with the request. The server create the second cookie "<code>c2=22222222</code>" and send to the client. The client stores this cookie. The firefox cookie manager shows: <img class="image-center" src="images/Servlet_CookieExample2.png" alt="Servlet_CookieExample2.png"> </li> 
     </ol> 
     <h3 id="ServletExample_Session">Session Example</h3> 
     <h5><span class="font-code">SessionExample.java</span></h5> 
     <pre class="color-example">
<span class="color-comment">// To save as "&lt;CATALINA_HOME&gt;\webapps\helloservlet\WEB-INF\src\mypkg\SessionExample.java"</span>
package mypkg;
 
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import myutil.HtmlFilter;
 
public class <strong>SessionExample</strong> extends HttpServlet {
   @Override
   public void <strong>doGet</strong>(HttpServletRequest request, HttpServletResponse response)
               throws IOException, ServletException {
      <span class="color-comment">// Set the response message's MIME type</span>
      response.setContentType("text/html;charset=UTF-8");
      <span class="color-comment">// Allocate a output writer to write the response message into the network socket</span>
      PrintWriter out = response.getWriter();
 
      <span class="color-comment">// Use ResourceBundle to keep localized string in "LocalStrings_xx.properties"</span>
      ResourceBundle rb = ResourceBundle.getBundle("LocalStrings",  request.getLocale());
 
      <span class="color-comment">// Write the response message, in an HTML page</span>
      try {
         out.println("&lt;!DOCTYPE html");  <span class="color-comment">// HTML 5</span>
         out.println("&lt;html&gt;&lt;head&gt;");
         out.println("&lt;meta http-equiv='Content-Type' content='text/html; charset=UTF-8'&gt;");
         String title = rb.getString("sessions.title");
         out.println("&lt;head&gt;&lt;title&gt;" + title + "&lt;/title&gt;&lt;/head&gt;");
         out.println("&lt;body&gt;");
         out.println("&lt;h3&gt;" + title + "&lt;/h3&gt;");
 
         <span class="color-comment">// Return the existing session if there is one. Otherwise, create a new session</span>
         <strong>HttpSession session = request.getSession();</strong>
 
         <span class="color-comment">// Display session information</span>
         out.println(rb.getString("sessions.id") + " " + <strong>session.getId()</strong> + "&lt;br /&gt;");
         out.println(rb.getString("sessions.created") + " ");
         out.println(new Date(<strong>session.getCreationTime()</strong>) + "&lt;br /&gt;");
         out.println(rb.getString("sessions.lastaccessed") + " ");
         out.println(new Date(<strong>session.getLastAccessedTime()</strong>) + "&lt;br /&gt;&lt;br /&gt;");
 
         <span class="color-comment">// Set an attribute (name-value pair) if present in the request</span>
         String attName = request.getParameter("attribute_name");
         if (attName != null) attName = attName.trim();
         String attValue = request.getParameter("attribute_value");
         if (attValue != null) attValue = attValue.trim();
         if (attName != null &amp;&amp; !attName.equals("")
               &amp;&amp; attValue != null &amp;&amp; !attValue.equals("") ) {
            <span class="color-comment">// synchronized session object to prevent concurrent update</span>
            <strong>synchronized(session) {
               session.setAttribute(attName, attValue);
            }</strong>
         }
 
         <span class="color-comment">// Display the attributes (name-value pairs) stored in this session</span>
         out.println(rb.getString("sessions.data") + "&lt;br&gt;");
         Enumeration names = <strong>session.getAttributeNames()</strong>;
         while (names.hasMoreElements()) {
             String name = (String) names.nextElement();
             String value = <strong>session.getAttribute(name)</strong>.toString();
             out.println(HtmlFilter.filter(name) + " = "
                   + HtmlFilter.filter(value) + "&lt;br&gt;");
         }
         out.println("&lt;br /&gt;");
 
         <span class="color-comment">// Display a form to prompt user to create session attribute</span>
         out.println("&lt;form method='get'&gt;");
         out.println(rb.getString("sessions.dataname"));
         out.println("&lt;input type='text' name='attribute_name'&gt;&lt;br /&gt;");
         out.println(rb.getString("sessions.datavalue"));
         out.println("&lt;input type='text' name='attribute_value'&gt;&lt;br /&gt;");
         out.println("&lt;input type='submit' value='SEND'&gt;");
         out.println("&lt;/form&gt;&lt;br /&gt;");
 
         out.print("&lt;a href='");
         <span class="color-comment">// Encode URL by including the session ID (URL-rewriting)</span>
         out.print(response.encodeURL(request.getRequestURI() + "?attribute_name=foo&amp;attribute_value=bar"));
         out.println("'&gt;Encode URL with session ID (URL re-writing)&lt;/a&gt;");
         out.println("&lt;/body&gt;&lt;/html&gt;");
      } finally {
         out.close();  <span class="color-comment">// Always close the output writer</span>
      }
   }
 
   <span class="color-comment">// Do the same thing for GET and POST requests</span>
   @Override
   public void doPost(HttpServletRequest request, HttpServletResponse response)
         throws IOException, ServletException {
      doGet(request, response);
   }
}</pre> 
     <h5>Deployment Descriptor in "<span class="font-code">web.xml</span>"</h5> 
     <pre class="color-example">
&lt;servlet&gt;
    &lt;servlet-name&gt;TomcatSessionExample&lt;/servlet-name&gt;
    &lt;servlet-class&gt;<strong>mypkg.SessionExample</strong>&lt;/servlet-class&gt;
&lt;/servlet&gt;
......
&lt;servlet-mapping&gt;
    &lt;servlet-name&gt;TomcatSessionExample&lt;/servlet-name&gt;
    &lt;url-pattern&gt;<strong>/session_example</strong>&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;</pre> 
     <h5>Running the Servlet</h5> 
     <p>Issue URL <code>http://localhost:8080/helloservlet/session_example</code>. The first access create a <code>HttpSession</code> object, with a unique session ID (<code>jsessionId</code>).</p> 
     <img class="image-center" src="images/Servlet_SessionExample1.png" alt="Servlet_SessionExample1.png"> 
     <p>By default, <code>HttpSession</code> uses cookie to exchange the <code>jsessionid</code>. The firefox cookie manager shows the following cookie. Take note that the value of the <code>jsessionid</code> is the same as the <code>HttpSession</code>'s <code>getId()</code>.</p> 
     <img class="image-center" src="images/Servlet_SessionExample2.png" alt="Servlet_SessionExample2.png"> 
     <p>The method <code>response.encodeURL(url)</code> can be used to re-write the URL to include the session ID. Try the hyperlink.</p> 
     <h3>More Examples</h3> 
     <p>[TODO]</p> 
     <p class="references">REFERENCES &amp; RESOURCES</p> 
     <ol> 
      <li>Java Servlets Home Page @ <a href="http://java.sun.com/products/servlet/">http://java.sun.com/products/servlet</a>. Servlet Developers @ <a href="http://java.net/projects/servlet/">http://java.net/projects/servlet/</a>.</li> 
      <li>Java Servlet 2.2, 2.3, 2.4, 2.5, 3.0 API Specifications.</li> 
      <li>Apache Tomcat Server @ <a href="http://tomcat.apache.org/">http://tomcat.apache.org</a>.</li> 
      <li>RFC2616 "Hypertext Transfer Protocol HTTP 1.1", W3C, June 1999.</li> 
      <li>HTML 4.01 Specification, W3C Recommendation, 24 Dec 1999 @ <a href="http://www.w3.org/TR/html401/">http://www.w3.org/TR/html401</a>, and HTML 5 Draft Specification @ <a href="http://www.w3.org/TR/html5/">http://www.w3.org/TR/html5</a>.</li> 
      <li>The Java EE 6 Tutorial, Chapter 10 Java Servlet Technology, December 2009 @ <a href="http://java.sun.com/javaee/6/docs/tutorial/doc/bnafd.html">http://java.sun.com/javaee/6/docs/tutorial/doc/bnafd.html</a>.</li> 
      <li>The Java EE 5 Tutorial, Chapter 4 Java Servlet Technology, October 2008 @ <a href="http://java.sun.com/javaee/5/docs/tutorial/doc/bnafd.html">http://java.sun.com/javaee/5/docs/tutorial/doc/bnafd.html</a>.</li> 
      <li>The J2EE 1.4 Tutorial, Chapter 11 Java Servlet Technology, December, 2005 @ <a href="http://java.sun.com/j2ee/1.4/docs/tutorial/doc/">http://java.sun.com/j2ee/1.4/docs/tutorial/doc/</a>.</li> 
      <li>The J2EE 1.3 Tutorial "Java Servlet Technology" @ <a href="http://java.sun.com/j2ee/tutorial/1_3-fcs/doc/Servlets.html">http://java.sun.com/j2ee/tutorial/1_3-fcs/doc/Servlets.html</a>.</li> 
      <li>Java EE 6 Technologies @ <a href="http://www.oracle.com/technetwork/java/javaee/tech/index-jsp-142185.html">http://www.oracle.com/technetwork/java/javaee/tech/index-jsp-142185.html</a>.</li> 
      <li>Java EE 5 Technologies @ <a href="http://www.oracle.com/technetwork/java/javaee/tech/javaee5-jsp-135162.html">http://www.oracle.com/technetwork/java/javaee/tech/javaee5-jsp-135162.html</a>.</li> 
      <li>Marty Hall, "Core Servlets and JavaServer Pages", vol.1 (2nd eds, 2003) and vol. 2 (2nd eds, 2006), Prentice Hall.</li> 
      <li>java.net - The Source for Java Technology Collaboration @ <a href="http://www.java.net">http://www.java.net</a>.</li> 
     </ol> 
    </div> 
    <!-- End the content-main division --> 
    <div id="content-footer"> 
     <p>Latest version tested: JDK 1.7.0_07, Tomcat 7.0.32, NetBeans 7.2<br> Last modified: October, 2012</p> 
    </div> 
   </div> 
   <!-- End the wrap-inner division --> 
   <!-- footer filled by JavaScript --> 
   <div id="footer" class="header-footer">
    <p>&nbsp;</p>
   </div> 
  </div> 
  <!-- End the wrap-outer division -->   
 </body>
</html>