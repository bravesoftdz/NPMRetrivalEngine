<!doctype html>
<html lang="en">
 <head> 
  <meta charset="UTF-8"> 
  <meta name="HandheldFriendly" content="True"> 
  <meta name="MobileOptimized" content="480"> 
  <meta name="viewport" content="width=device-width, height=device-height initial-scale=1.0, maximum-scale=1.0, user-scalable=0"> 
  <title>Java Logging: Logger</title> 
  <meta name="description" content="All logging in Java Logging happens to a Logger instance, when then forwards the log records to handlers, filters etc."> 
  <meta name="keywords" content="java logging logger"> 
  <meta name="author" content="Jakob Jenkov"> 
  <meta name="twitter:card" content="summary_large_image"> 
  <meta name="twitter:site" content="@jjenkov"> 
  <meta name="twitter:title" content="Java Logging: Logger"> 
  <meta name="twitter:description" content="All logging in Java Logging happens to a Logger instance, when then forwards the log records to handlers, filters etc."> 
  <meta name="twitter:creator" content="@jjenkov"> 
  <meta name="twitter:domain" content="jenkov.com"> 
  <meta name="twitter:image:src" content="http://tutorials.jenkov.com/images/java-logging/java-logging-teaser-500-300.png"> 
  <meta name="og:type" content="article"> 
  <meta name="og:title" content="Java Logging: Logger"> 
  <meta property="og:url" content="http://tutorials.jenkov.com/java-logging/logger.html"> 
  <meta property="og:description" content="All logging in Java Logging happens to a Logger instance, when then forwards the log records to handlers, filters etc."> 
  <meta property="og:image" content="http://tutorials.jenkov.com/images/java-logging/java-logging-teaser-500-300.png"> 
  <link href="https://plus.google.com/108227213807945109821" rel="publisher"> 
  <meta name="google-site-verification" content="i_TwzdElg-by5uXLvyAjuIaCjxo0yjtW8LdRPUDEEcw"> 
  <!-- jQuery --> 
  <!--<script src="https://code.jquery.com/jquery-1.12.0.min.js"></script> --> 
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script> 
 </head> 
 <body> 
  <style>
body {background-color: #f0f0f0;background-image: linear-gradient(180deg, #f0f0f0, #e0e0e0);}
.dataTable th, .dataTable td { padding: 2px 8px; }
</style> 
  <style id="layoutCss"></style> 
  <style id="jqcCss"></style> 
  <style id="articleCss"></style> 
  <style id="navBarCss"></style> 
  <style>
code  { font-size: 14px; }
</style> 
  <script>
lcv = "4";
ls = localStorage;
cacheLoaded = false;
pageLoaded = false;

var prevArticleInCategory = "/java-logging/basic-usage.html";
var nextArticleInCategory = "/java-logging/logger-hierarchy.html";
</script> 
  <script id="jqcJs"></script> 
  <script id="bottomNavBarModule"></script> 
  <script>
function jsonp(url) {
    var script   = document.createElement("script"); script.type = "text/javascript"; script.src = url;
    document.body.appendChild(script);
}
function insertById(ids) {
    for(var i=0, n=ids.length; i < n; i++) {
        var el = document.getElementById(ids[i]);
        if(el != null) { el.innerHTML = localStorage[ids[i]]; }
    }
}
function insertByClass(ids) {
    for(var i=0, n=ids.length; i<n; i++) {
        var els = document.getElementsByClassName(ids[i]);
        for(var j=0,m=els.length; j<m; j++) { els[j].innerHTML = localStorage[ids[i]]; }
    }
}
function init() {
    if(cacheLoaded == true && pageLoaded == true) {
        console.log("initializing page");
        insertById(["layoutCss", "jqcCss", "topBarLogo", "articleCss", "navBarCss", "bottomNavBar", "bottomNavBarModule", "jqcJs"]);
        insertByClass(["authorPhoto", "authorSocialLinks", "newsletterForm", "googlePlusShare"]);
        $(document).ready(function() { bottomNavBarModule(); });
        console.log("page initialized");
    }
}
if(ls.lcv != lcv) {
    for(var i=0; i < ls.length; i++){
        ls.removeItem(ls.key(i));
    }
    jsonp("/cached-" + lcv + ".js");
    console.log("cache cleared");
} else {
    cacheLoaded = true;
}
ls.lcv = lcv;
</script> 
  <!-- jqComponents --> 
  <script>
articleLen = 14370;
adRandom = Math.random() * 100;

function dw(text) { document.write(text); }

function writeAd(adSlot, w, h) {
 dw("<script async src='//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js'><"); dw("/script>");
 dw("<ins class='adsbygoogle' style='display:inline-block;width:" + w + "px;height:" + h + "px' data-ad-client='ca-pub-5569543489255665' data-ad-slot='" +  adSlot + "'></ins>");
 dw("<script>");
 dw("(adsbygoogle = window.adsbygoogle || []).push({});");
 dw("<"); dw("/script>");
}

function topAdStyles(w, mT, mB) {
    var adEl = document.getElementById("topAds");
    adEl.style.width = (w + "px"); adEl.style.marginTop = (mT + "px"); adEl.style.marginBottom = (mB + "px"); adEl.style.marginRight = "auto"; adEl.style.marginLeft = "auto";
}

function bottomAdStyles(elId, w, mT, mB) {
    var adEl = document.getElementById(elId);
    adEl.style.width = (w + "px"); adEl.style.marginTop = (mT + "px"); adEl.style.marginBottom = (mB + "px"); adEl.style.marginRight = "auto"; adEl.style.marginLeft = "auto";
}
</script> 
  <div id="topBar"> 
   <div jqc-row jqc-row-paddings="0:0 3:24"> 
    <div jqc-cell="0:12c"> 
     <div id="topBarContent"> 
      <div id="topBarLogo"></div> 
      <div id="topBarPhrase">
       Tech and Media Labs
      </div> 
      <div id="topBarMenu"> 
       <a href="http://tutorials.jenkov.com">Tutorials</a> 
       <a href="http://jenkov.com/about/index.html">About</a> 
       <a href="http://jenkov.com/rss.xml">RSS</a> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="cookieNote"> 
   <div jqc-row jqc-row-widths="0:100% 4:1200" jqc-row-paddings="0:0 3:24"> 
    <div jqc-cell="0:12c"> 
     <div class="card">
       This site uses cookies to improve the user experience. 
      <button onclick="hideCookieNote()">OK</button> 
     </div> 
    </div> 
   </div> 
  </div> 
  <script>
function hideCookieNote() { document.getElementById("cookieNote").innerHTML = ""; ls.cookieNote = 0; }

if(ls.cookieNote == 0) {
    hideCookieNote();
}
</script> 
  <div jqc-row jqc-row-widths="0:100% 4:1200" jqc-row-paddings="0:0"> 
   <div jqc-cell="0:12c"> 
    <div id="topAds"> 
     <script>
                var adEl = document.getElementById("topAds");
                if(window.innerWidth > 970) {
                    if(adRandom <= 5){
                        writeAd("6094206201", 970, 90); /* wider ad - 5% of page views */
                        topAdStyles(970, 20, 20);
                    } else {
                        writeAd("7630855405", 728, 90); /* standard ad */
                        topAdStyles(728, 20, 20);
                    }
                } else if(window.innerWidth >= 728 && window.innerWidth <= 970)  {  /* Tutorials - Top Banner */
                    writeAd("7630855405", 728, 90);
                    topAdStyles(728, 20, 20);
                } else {  /* Tutorials - Top Banner - Mobile */
                    writeAd("3297914607", 320, 50);
                    topAdStyles(320, 10, 0);
                }
            </script> 
    </div> 
   </div> 
  </div> 
  <div id="main"> 
   <div jqc-row jqc-row-widths="0:100% 4:1200" jqc-column-counts="0:24" jqc-row-paddings="0:0 3:24" jqc-cell-spacings="0:8"> 
    <div jqc-cell="0:0c  3:7c"> 
     <div id="trailToc" class="card"> 
      <div id="trailTitle">
       Java Logging
      </div>
      <ol>
       <li><a href="/java-logging/index.html">Java Logging</a></li>
       <li><a href="/java-logging/overview.html">Java Logging: Overview</a></li>
       <li><a href="/java-logging/basic-usage.html">Java Logging: Basic Usage</a></li>
       <li><a href="/java-logging/logger.html"><b>Java Logging: Logger</b></a></li>
       <li><a href="/java-logging/logger-hierarchy.html">Java Logging: Logger Hierarchy</a></li>
       <li><a href="/java-logging/levels.html">Java Logging: Log Levels</a></li>
       <li><a href="/java-logging/formatters.html">Java Logging: Formatters</a></li>
       <li><a href="/java-logging/filters.html">Java Logging: Filters</a></li>
       <li><a href="/java-logging/handlers.html">Java Logging: Handlers</a></li>
       <li><a href="/java-logging/logrecord.html">Java Logging: LogRecord</a></li>
       <li><a href="/java-logging/configuration.html">Java Logging: Configuration</a></li>
       <li><a href="/java-logging/logmanager.html">Java Logging: LogManager</a></li>
      </ol> 
     </div> 
     <br>
     <br> 
     <!-- Left Bar Adsense Banner Ad --> 
     <div id="side-ads"> 
      <script>
                if(window.innerWidth >= 900){
                    if(adRandom <= 94)     { writeAd("5873880207", 300,  600);}
                    else if(adRandom < 96) { writeAd("3389666608", 160,  600);}
                    else                   { writeAd("4257546205", 300, 1050);}
                }
            </script> 
     </div> 
     <br>
     <br> 
     <div style="display: none;" class="card newsletterForm"> 
     </div> 
    </div> 
    <div jqc-cell="0:24c 3:17c"> 
     <div class="card"> 
      <h1>Java Logging: Logger</h1> 
      <div id="mainBody"> 
       <div id="pageToc" itemscope itemtype="http://schema.org/SiteNavigationElement"> 
        <ul>
         <li><a href="#logging-messages">Logging Messages</a></li>
         <li><a href="#the-log-methods">The log() Methods</a></li>
         <li><a href="#the-logp-methods">The logp() Methods</a></li>
         <li><a href="#the-logrb-methods">The logrb() Methods</a></li>
         <li><a href="#the-last-log-methods">The Last Log Methods</a></li>
         <li><a href="#adding-and-removing-handlers">Adding and Removing Handlers</a></li>
         <li><a href="#setting-a-log-filter">Setting a Log Filter</a></li>
         <li><a href="#setting-the-log-level">Setting the Log Level</a></li>
         <li><a href="#parent-logger">Parent Logger</a></li>
         <li><a href="#additional-methods">Additional Methods</a></li>
        </ul> 
       </div> 
       <div id="lastUpdate"> 
        <table>
         <tbody>
          <tr>
           <td class="authorPhoto"></td> 
           <td><p style="margin: 0px 0px 6px 0px;"> Jakob Jenkov<br> Last update: 2014-06-23 </p> 
            <div class="authorSocialLinks"></div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <p> The <code>java.util.Logger</code> class is the main access point to the Java logging API. Here is how you create a logger: </p> 
       <pre class="codeBox">
Logger logger = Logger.getLogger("myLogger");
</pre> 
       <p> The string passed as parameter to the <code>getLogger()</code> factory method is the name of the <code>Logger</code> to create. You can choose the name freely, but the name implies where the <code>Logger</code> is located in the <code>Logger</code> hierarchy. Every . (dot) in the name is interpreted as a branch in the hierarchy. Look at these names: </p> 
       <pre class="codeBox">
myApp
myApp.user
myApp.admin
myApp.admin.import.user
</pre> 
       <p> These names are all valid. They also imply a hierarchy. The name "myApp" is at the top of the hierarchy. The two names "myApp.user" and "myApp.admin" are children of the "myApp" name. The name "myApp.admin.import.user" is a branch of the name "myApp.admin.import", which is again a branch of the "myApp.admin" name. </p> 
       <p> The <code>Logger</code> hierarchy is explored in more detail in its own text. </p> 
       <p> You can obtain the name of a <code>Logger</code> using the <code>getName()</code> method, in case you need it. Here is an example: </p> 
       <pre class="codeBox">
String name = logger.getName();
</pre> 
       <p> It is convention to use the class name of the class creating the <code>Logger</code>, including package name, as name for the <code>Logger</code>. Here is an example: </p> 
       <pre class="codeBox">
Logger logger = Logger.getLogger( MyClass.class.getName() );
</pre> 
       <a name="logging-messages"></a> 
       <h2>Logging Messages</h2> 
       <p> To log a message using a <code>Logger</code>, you call one of its many logging methods. Among these are: </p> 
       <pre class="codeBox">
log  (Level level, String message);
log  (Level level, String message, Object param1);
log  (Level level, String message, Object[] params);

log  (Level level, String message, Throwable t);

log  (LogRecord record);

logp (Level level, String sourceClass, String sourceMethod, String msg);
logp (Level level, String sourceClass, String sourceMethod, String msg,
    Object param1);
logp (Level level, String sourceClass, String sourceMethod, String msg,
    Object[] params);
logp (Level level, String sourceClass, String sourceMethod, String msg,
    Throwable t);

logrb(Level level, String sourceClass, String sourceMethod,
    String bundle, String msg);
logrb(Level level, String sourceClass, String sourceMethod,
    String bundle, String msg, Object param1);
logrb(Level level, String sourceClass, String sourceMethod,
    String bundle, String msg, Object[] params);
logrb(Level level, String sourceClass, String sourceMethod,
    String bundle, String msg, Throwable t);


entering(String sourceClass, String sourceMethod);
entering(String sourceClass, String sourceMethod, Object param1);
entering(String sourceClass, String sourceMethod, Object[] params);

exiting (String sourceClass, String sourceMethod);
exiting (String sourceClass, String sourceMethod, Object result);

fine    (String message);
finer   (String message);
finest  (String message);

config  (String message);
info    (String message);
warning (String message);
severe  (String message);

throwing(String sourceClass, String sourceMethod, Throwable t);
</pre> 
       <p> I am not going to explain every single of these methods in detail. They are explained in the JavaDoc's for Java. But, I am going to explain their purpose. Knowing their purpose you can most likely figure out the rest, with help from the JavaDoc. </p> 
       <a name="the-log-methods"></a> 
       <h2>The log() Methods</h2> 
       <p> The <code>log()</code> group of methods will log a message at a certain log level. The log level is passed as parameter. Use one of the <code>Level</code> constants as parameter. Log level is covered in more detail in its own text. </p> 
       <p> Some of the <code>log()</code> methods can take object parameters. These object parameters are inserted into the log message, before it is being logged. The merging of object parameters into the message is only performed, if the message is not filtered out, either by a <code>Filter</code>, or because of too low log level. This improves performance in the cases where the message is filtered out. </p> 
       <p> Here is a <code>log()</code> example: </p> 
       <pre class="codeBox">
Logger logger = Logger.getLogger("myLogger");

logger.log(Level.SEVERE, "Hello logging");
</pre> 
       <p> And here is what is logged to the console (default log destination) : </p> 
       <pre class="codeBox">
08-01-2012 14:10:43 logging.LoggingExamples main
SEVERE: Hello logging
</pre> 
       <p> Here is an example that inserts a parameter into the message: </p> 
       <pre class="codeBox">
logger.log(Level.SEVERE, "Hello logging: {0} ", "P1");
</pre> 
       <p> And here is what is being logged: </p> 
       <pre class="codeBox">
08-01-2012 14:45:12 logging.LoggingExamples main
SEVERE: Hello logging: P1
</pre> 
       <p> Notice how the object parameter value <code>P1</code> is inserted at the place in the log message where the <code>{0}</code> is located. The <code>0</code> is the index of the object parameter to insert. </p> 
       <p> Here is an example that logs a message with multiple object parameters to be inserted into the log message: </p> 
       <pre class="codeBox">
logger.log(Level.SEVERE, "Hello logging: {0}, {1}",
    new Object[] {"P1", "P2"});

</pre> 
       <p> Here is what is being logged: </p> 
       <pre class="codeBox">
08-01-2012 14:45:12 logging.LoggingExamples main
SEVERE: Hello logging: P1, P2
</pre> 
       <p> Notice again how the object parameters are inserted into the log message instead of the <code>{0}</code> and <code>{1}</code> tokens. As mentioned earlier, the number inside the token refers to the index of the object parameter to insert, in the object parameter array passed to the <code>log()</code> message. </p> 
       <p> Here is an example that logs a <code>Throwable</code>: </p> 
       <pre class="codeBox">
logger.log(Level.SEVERE, "Hello logging",
    new RuntimeException("Error"));
</pre> 
       <p> Here is what is being logged (use the scrollbar to see it all): </p> 
       <div style="width: 530; overflow: scroll;"> 
        <pre class="codeBox" style="width: 675px">
08-01-2012 14:54:29 logging.LoggingExamples main
SEVERE: Hello logging
java.lang.RuntimeException: Error
	at logging.LoggingExamples.main(LoggingExamples.java:18)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:120)
</pre> 
       </div> 
       <a name="the-logp-methods"></a> 
       <h2>The logp() Methods</h2> 
       <p> The <code>logp()</code> methods work like the <code>log()</code> methods, except each method take an extra two parameters: The <code>sourceClass</code> and <code>sourceMethod</code> parameter. </p> 
       <p> These two parameters are intended to tell from what class and method the log message originated. In other words, which class and method was the "source" of the log message. </p> 
       <a name="the-logrb-methods"></a> 
       <h2>The logrb() Methods</h2> 
       <p> The <code>logrb()</code> methods work like the <code>log()</code> methods too, except they can obtain the log messages from a resource bundle. A resource bundle is a set of texts containing key, value pairs, like a property file. Each file contains the same set of keys, with values in different languages. Resource bundles are an internationalization feature, and I won't cover it in great detail here. </p> 
       <p> Here is a <code>logrb()</code> example: </p> 
       <pre class="codeBox">
logger.logrb(Level.SEVERE, "logging.LoggingExamples", "main",
        "resources.myresources", "key1");
</pre> 
       <p> This example looks up a message in the resource bundle named <code>resources.myresources</code> by the key <code>key1</code>. If the resource bundle does not contain a key with that name (<code>key1</code>), the value itself is logged as a message. In this example then the value "key1" would have been logged as message, if no key named "key1" had existed in the resource bundle. </p> 
       <p> Here is what has logged: </p> 
       <pre class="codeBox">
08-01-2012 17:14:39 logging.LoggingExamples main
SEVERE: This is message 1
</pre> 
       <p> Here is what the resource bundle (property file) looks like: </p> 
       <pre class="codeBox">
key1 : This is message 1
key2 : this is message 2
</pre> 
       <p> The Java Doc says nothing about how you localize the messages using a <code>Locale</code>. How to select the language of the <code>ResourceBundle</code>, in other words. </p> 
       <a name="the-last-log-methods"></a> 
       <h2>The Last Log Methods</h2> 
       <p> The <code>Logger</code> also has the following methods for logging: </p> 
       <pre class="codeBox">
entering(String sourceClass, String sourceMethod);
entering(String sourceClass, String sourceMethod, Object param1);
entering(String sourceClass, String sourceMethod, Object[] params);

exiting (String sourceClass, String sourceMethod);
exiting (String sourceClass, String sourceMethod, Object result);

fine    (String message);
finer   (String message);
finest  (String message);

config  (String message);
info    (String message);
warning (String message);
severe  (String message);
</pre> 
       <p> Each of these methods corresponds to a log level. For instance, <code>finest()</code>, <code>finer()</code>, <code>fine()</code>, <code>info()</code>, <code>warning()</code> and <code>severe()</code> each corresponds to one of the log levels. Logging message using one of these methods corresponds to calling the <code>log()</code> method </p> 
       <a name="adding-and-removing-handlers"></a> 
       <h2>Adding and Removing Handlers</h2> 
       <p> You can add <code>Handler</code>'s to the <code>Logger</code> using the <code>addHandler()</code> method. Here is an example: </p> 
       <pre class="codeBox">
Logger logger = Logger.getLogger("myLogger");

<b>logger.addHandler(new ConsoleHandler());</b>

logger.logrb(Level.SEVERE, "logging.LoggingExamples", "main",
        "resources.myresources", "key1");
</pre> 
       <p> A <code>Logger</code> can have multiple <code>Handler</code>'s. When logging, messages are forwarded to all <code>Handler</code>'s. </p> 
       <p> You can obtain all <code>Handler</code>'s of a <code>Logger</code> using the <code>getHandlers()</code> method, like this: </p> 
       <pre class="codeBox">
Handler[] handlers = logger.getHandlers();
</pre> 
       <p> You can remove a <code>Handler</code> using the <code>removeHandler()</code> method. Here is an example: </p> 
       <pre class="codeBox">
Logger logger = Logger.getLogger("myLogger");

Handler handler = new ConsoleHandler();

logger.addHandler(handler);

<b>logger.remove(handler)</b>
</pre> 
       <a name="setting-a-log-filter"></a> 
       <h2>Setting a Log Filter</h2> 
       <p> You can set filters on a <code>Logger</code> which filters out what <code>LogRecords</code> that gets forwarded to the <code>Handler</code>'s of the <code>Logger</code>. You set the <code>Filter</code> on a <code>Logger</code> using the <code>setFilter()</code> method, like this: </p> 
       <pre class="codeBox">
Filter filter = new MyFilterImpl();

logger.setFilter(filter);
</pre> 
       <p> The class <code>MyFilterImpl</code> should be your own implementation of the <code>Filter</code> interface. See the text on <a href="filters.html">Filters</a> to learn more about implementing your own <code>Filter</code>. </p> 
       <p> You can obtain the <code>Filter</code> in use by calling the <code>getFilter()</code> method, like this: </p> 
       <pre class="codeBox">
Filter filter = logger.getFilter();
</pre> 
       <a name="setting-the-log-level"></a> 
       <h2>Setting the Log Level</h2> 
       <p> You can set the minimum log level of messages to be forwarded to the <code>Handler</code>'s. Here is a code example: </p> 
       <pre class="codeBox">
Logger logger = Logger.getLogger("myLogger");

logger.setLevel(Level.INFO);
</pre> 
       <p> This example sets the minimum log level of messages to be forwarded, to <code>Level.INFO</code>. To see the hierarchy of log levels, read the text on <a href="levels.html">Log Levels</a>. </p> 
       <p> You can obtain the log level of a <code>Logger</code> using the <code>getLevel()</code> method: </p> 
       <pre class="codeBox">
logger.getLevel();
</pre> 
       <p> You can also check if a given log level would be logged, if you tried logging a message with that log level. You do so using the <code>isLoggable()</code> method, like this: </p> 
       <pre class="codeBox">
boolean isInfoLoggable = logger.isLoggable(Level.INFO);
</pre> 
       <a name="parent-logger"></a> 
       <h2>Parent Logger</h2> 
       <p> As mentioned elsewhere in this tutorial, the <code>Logger</code>'s are organized into a hierarchy. That means, that a <code>Logger</code> can have a parent <code>Logger</code> in the hierarchy. You can obtain the parent <code>Logger</code> of a given <code>Logger</code> using the <code>getParent()</code> method. Here is an example: </p> 
       <pre class="codeBox">
Logger parent = logger.getParent();
</pre> 
       <p> You can also tell the <code>Logger</code> to use or not use the <code>Parent</code> logger when logging. You do so using the <code>setUseParentHandlers()</code>, like this: </p> 
       <pre class="codeBox">
logger.setUseParentHandlers(false);
</pre> 
       <p> This example switched off the forwarding of log messages to the parent <code>Logger</code>'s <code>Handler</code>'s. </p> 
       <p> You can check if a <code>Logger</code> forwards log messages to its parent <code>Logger</code> using the method <code>getUseParentHandlers()</code>. Here is an example: </p> 
       <pre class="codeBox">
boolean useParentLogger = logger.getUseParentHandlers();
</pre> 
       <a name="additional-methods"></a> 
       <h2>Additional Methods</h2> 
       <p> The <code>Logger</code> class has a few more methods that I haven't covered here. These are minor features, like obtaining the <code>ResourceBundle</code> in use by the <code>Logger</code> etc. You should check out the JavaDoc's for the complete list of utility methods. </p> 
       <div> 
       </div> 
       <div id="next">
        Next: 
        <a href="/java-logging/logger-hierarchy.html">Java Logging: Logger Hierarchy</a>
       </div> 
       <div id="bottomSocial"> 
        <div style="display:inline-block;"> 
         <table> 
          <tbody>
           <tr>
            <td colspan="2"> 
             <div class="g-plus" data-action="share" data-height="24" data-annotation="none"></div> <script type="text/javascript">
                                    (function() {
                                        var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
                                        po.src = 'https://apis.google.com/js/platform.js';
                                        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
                                     })();
                                </script> <a href="https://twitter.com/share" class="twitter-share-button" data-via="jjenkov" target="_blank">Tweet</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script> </td>
           </tr> 
           <tr>
            <td class="authorPhoto"></td>
            <td><p style="margin: 0px 0px 6px 0px;">Jakob Jenkov</p>
             <div class="authorSocialLinks"></div></td>
           </tr> 
          </tbody>
         </table> 
        </div> 
        <div style="display:inline-block;" class="newsletterForm"></div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <!-- Bottom ads - (nested row is working, but should perhaps not be a nested row?) (note: was a nested row in old design - not in new) --> 
  <div jqc-row jqc-row-paddings="0:0"> 
   <div jqc-cell="0:12c"> 
    <div id="pageBottomAds"> 
     <script>
                    if(articleLen >= 4000){ /* for longer articles place ads here, at the bottom of the page */
                        if(window.innerWidth >= 728 ) {  /* Adsense Ads - Bottom Banner */
                            if(adRandom < 5)       { writeAd("2721937400", 970, 90);  bottomAdStyles("pageBottomAds", 970, 20, 20);}
                            else if(adRandom < 30) { writeAd("9547200207", 970, 250); bottomAdStyles("pageBottomAds", 970, 20, 20);}
                            else                   { writeAd("7776167002", 728, 90);  bottomAdStyles("pageBottomAds", 728, 20, 20);}
                        } else if(window.innerWidth < 728) {  /* Adsense Ads - Bottom Banner - Mobile */
                            if(adRandom < 50) {
                                writeAd("4216244607", 320, 50); bottomAdStyles("pageBottomAds", 320, 10, 0);
                            } else {
                                writeAd("7377085404", 320, 100); bottomAdStyles("pageBottomAds", 320, 10, 0);
                            }
                        }
                    }
                </script> 
     <br>
     <br>
     <br> 
    </div> 
    <div style="height: 30px"></div> 
    <div id="disqusComments" class="card"> 
     <div id="disqus_thread"></div> 
     <script type="text/javascript">
                var disqus_shortname = 'tutorials-jenkov-com'; // required: replace example with your forum shortname

                /* * * DON'T EDIT BELOW THIS LINE * * */
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            </script> 
     <noscript>
      Please enable JavaScript to view the 
      <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
     </noscript> 
    </div> 
   </div> 
  </div> 
  <span id="layoutManager" jqc-type="jqcResponsiveLayoutManager" jqc-row-paddings="0:8 4:0"></span> 
  <div id="footerBar"> 
   <div jqc-row> 
    <div jqc-cell="0:12c">
      Copyright &nbsp;Jenkov Aps 
    </div> 
   </div> 
  </div> 
  <div id="trailTocFixedDiv"> 
   <div id="trailTocFixedCloseButton">
    Close TOC
   </div> 
   <div id="trailTocFixedInnerDiv"></div> 
  </div> 
  <div id="bottomNavBar"></div> 
  <!-- init page --> 
  <script>
pageLoaded = true;
init();
</script> 
  <!-- Google Analytics Script --> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-4036229-3', 'auto');
  ga('send', 'pageview');

</script>  
 </body>
</html>