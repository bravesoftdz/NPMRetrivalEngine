<!doctype html>
<html lang="en">
 <head> 
  <meta charset="UTF-8"> 
  <!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]--> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <meta name="generator" content="Asciidoctor 1.5.4"> 
  <meta name="author" content="(c) 2015 vogella GmbH"> 
  <title>Java Annotations and Java Reflection - Tutorial</title> 
  <script type="text/javascript">window.mod_pagespeed_start = Number(new Date());</script>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"> 
  <link rel="stylesheet" href="A.asciidoctor.css.pagespeed.cf.5c3GW-RsMd.css"> 
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.5.0/css/font-awesome.min.css"> 
  <link rel="stylesheet" href="A.coderay-asciidoctor.css.pagespeed.cf.NUmCYCmSeQ.css"> 
 </head> 
 <body class="article"> 
  <div id="header"> 
   <h1>Java Annotations and Java Reflection - Tutorial</h1> 
   <div class="details"> 
    <span id="author" class="author">(c) 2015 vogella GmbH</span>
    <br> 
    <span id="revnumber">version 1.2,</span> 
    <span id="revdate">18.04.2016</span> 
   </div> 
   <div id="toc" class="toc"> 
    <div id="toctitle">
     Table of Contents
    </div> 
    <ul class="sectlevel1"> 
     <li><a href="#javaannotations">JavaAnnotations</a></li> 
     <li><a href="#nullable_annotations">Defining the API contract via null annotations</a> 
      <ul class="sectlevel2"> 
       <li><a href="#eclipse-ide-and-null-annotations">Eclipse IDE and null annotations</a></li> 
       <li><a href="#customannotations_definition">Adding support for null annotations</a></li> 
       <li><a href="#activating-annotation-based-null-pointer-access-analysis">Activating annotation based null pointer access analysis</a></li> 
      </ul> </li> 
     <li><a href="#customannotations_defineanduse">Defining custom annotations</a> 
      <ul class="sectlevel2"> 
       <li><a href="#customannotations_definition">Define your custom annotation</a></li> 
       <li><a href="#customannotations_usage">Accessing your annotation via Java reflection</a></li> 
      </ul> </li> 
     <li><a href="#annotations_tutorial">Exercise: Define custom annotation and access via reflection</a></li> 
     <li><a href="#javaannotations-resources">JavaAnnotations resources</a></li> 
    </ul> 
   </div> 
  </div> 
  <div id="content"> 
   <div class="sect1"> 
    <h2 id="javaannotations">JavaAnnotations</h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>This tutorial describes how to use null annotations to avoid null pointer exceptions and how to define your own annotations and how to use Java reflection to analyze your code with it.</p> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="nullable_annotations">Defining the API contract via null annotations</h2> 
    <div class="sectionbody"> 
     <div class="sect2"> 
      <h3 id="eclipse-ide-and-null-annotations">Eclipse IDE and null annotations</h3> 
      <div class="paragraph"> 
       <p>Annotations can be used to provide additional meta information about your API. Eclipse JDT provides the following annotations which can be used:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><code>@NonNull</code>: null is not a legal value</p> </li> 
        <li> <p><code>@Nullable</code>: null value is allowed and must be expected</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>These annotations can be placed on:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>Method parameter</p> </li> 
        <li> <p>Method return (syntactically a method annotation is used here)</p> </li> 
        <li> <p>Local variables</p> </li> 
        <li> <p>Fields</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>You can also specify the default value via the <code>@NonNullByDefault</code> annotation which can be specified for a method, a type or a package (via a file package-info.java). To specify it for a whole package, create the following <code>package-info.java</code> file in your package, for example, <code>com.vogella.test.nullannatations</code>.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@NonNullByDefault</span>
<span class="keyword">package</span> <span class="namespace">com.vogella.test.nullannatations</span>;
<span class="keyword">import</span> <span class="include">org.eclipse.jdt.annotation.NonNullByDefault</span>;</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="customannotations_definition">Adding support for null annotations</h3> 
      <div class="sect3"> 
       <h4 id="maven">Maven</h4> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
    <span class="tag">&lt;groupId&gt;</span>org.eclipse.jdt<span class="tag">&lt;/groupId&gt;</span>
    <span class="tag">&lt;artifactId&gt;</span>org.eclipse.jdt.annotation<span class="tag">&lt;/artifactId&gt;</span>
    <span class="tag">&lt;version&gt;</span>2.0.0<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="gradle">Gradle</h4> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="xml">compile 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.0.0'</code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="osgi">OSGi</h4> 
       <div class="paragraph"> 
        <p>Add an optional dependency to <code>org.eclipse.jdt.annotation</code> in your MANIFEST.MF</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="managing-the-classpath-manually">Managing the classpath manually</h4> 
       <div class="paragraph"> 
        <p>Eclipse provides a quickfix for adding the required dependency. Simple use <code>@NonNull</code> in your code and use Ctrl+1 to add the required dependency.</p> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="activating-annotation-based-null-pointer-access-analysis">Activating annotation based null pointer access analysis</h3> 
      <div class="paragraph"> 
       <p>Select <span class="menuseq"><span class="menu">Windows</span>&nbsp;? <span class="submenu">Java</span>&nbsp;? <span class="submenu">Compiler</span>&nbsp;? <span class="menuitem">Errors/Warnings</span></span> and select <em>Enable annotation-based null analysis</em>.</p> 
      </div> 
      <div class="imageblock"> 
       <div class="content"> 
        <img src="img/xannotationbasednullanalysis10.png.pagespeed.ic.kUyRendn7S.png" alt="annotationbasednullanalysis10"> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="customannotations_defineanduse">Defining custom annotations</h2> 
    <div class="sectionbody"> 
     <div class="sect2"> 
      <h3 id="customannotations_definition">Define your custom annotation</h3> 
      <div class="paragraph"> 
       <p>The Java programming language allows you to define your custom annotations. Annotations are defined via the <code>@interface</code> annotation before the class name. Via <code>@Retention</code> you define if the annotation should be retained at runtime or not. The <code>@Target</code> annotation lets you define where this annotation can be used, e.g., the class, fields, methods, etc.</p> 
      </div> 
      <div class="paragraph"> 
       <p>A typical annotation definition would look like the following.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Retention</span>(<span class="predefined-type">RetentionPolicy</span>.RUNTIME)
<span class="annotation">@Target</span>(<span class="predefined-type">ElementType</span>.METHOD)
<span class="directive">public</span> <span class="annotation">@interface</span> InstallerMethod {
}</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>You can add additional information, for example you can define that your annotation is a qualifier for the `@Inject`annotation.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@javax</span>.inject.Qualifier
<span class="annotation">@Documented</span>
<span class="annotation">@Target</span>({<span class="predefined-type">ElementType</span>.FIELD, <span class="predefined-type">ElementType</span>.PARAMETER})
<span class="annotation">@Retention</span>(<span class="predefined-type">RetentionPolicy</span>.RUNTIME)
<span class="directive">public</span> <span class="annotation">@interface</span> Checker {

}</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="customannotations_usage">Accessing your annotation via Java reflection</h3> 
      <div class="paragraph"> 
       <p>To process your annotation you could write your own annotation processor. Typically you use Java reflection for this. Java reflection allows you to analyze a Java class and use the information contained in this class at runtime.</p> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="annotations_tutorial">Exercise: Define custom annotation and access via reflection</h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>Create a new Java project called <code>com.vogella.annotations</code>. Create the following two classes. The first class defines an annotation and the second class uses this to mark certain methods.</p> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">package</span> <span class="namespace">com.vogella.annotations</span>;

<span class="keyword">import</span> <span class="include">java.lang.annotation.ElementType</span>;
<span class="keyword">import</span> <span class="include">java.lang.annotation.Retention</span>;
<span class="keyword">import</span> <span class="include">java.lang.annotation.RetentionPolicy</span>;
<span class="keyword">import</span> <span class="include">java.lang.annotation.Target</span>;

<span class="annotation">@Target</span>(value = <span class="predefined-type">ElementType</span>.METHOD)
<span class="annotation">@Retention</span>(value = <span class="predefined-type">RetentionPolicy</span>.RUNTIME)
<span class="directive">public</span> <span class="annotation">@interface</span> CanRun {

}</code></pre> 
      </div> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">package</span> <span class="namespace">com.vogella.annotations</span>;

<span class="keyword">import</span> <span class="include">java.lang.reflect.Method</span>;

<span class="directive">public</span> <span class="type">class</span> <span class="class">AnnotationRunner</span> {

    <span class="directive">public</span> <span class="type">void</span> method1() {
        <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">"</span><span class="content">method1</span><span class="delimiter">"</span></span>);
    }

    <span class="annotation">@CanRun</span>
    <span class="directive">public</span> <span class="type">void</span> method2() {
        <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">"</span><span class="content">method2</span><span class="delimiter">"</span></span>);
    }

    <span class="directive">public</span> <span class="type">void</span> method3() {
        <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">"</span><span class="content">method3</span><span class="delimiter">"</span></span>);
    }

    <span class="annotation">@CanRun</span>
    <span class="directive">public</span> <span class="type">void</span> method5() {
        <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">"</span><span class="content">method4</span><span class="delimiter">"</span></span>);
    }

}</code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>Afterwards create the following test class. The main method of this class analyzes the annotations and calls the corresponding methods.</p> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">package</span> <span class="namespace">com.vogella.annotations</span>;

<span class="keyword">import</span> <span class="include">java.lang.reflect.Method</span>;

<span class="directive">public</span> <span class="type">class</span> <span class="class">MyTest</span> {

    <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args) {

        AnnotationRunner runner = <span class="keyword">new</span> AnnotationRunner();
        <span class="predefined-type">Method</span><span class="type">[]</span> methods = runner.getClass().getMethods();

        <span class="keyword">for</span> (<span class="predefined-type">Method</span> method : methods) {
            CanRun annos = method.getAnnotation(CanRun.class);
            <span class="keyword">if</span> (annos != <span class="predefined-constant">null</span>) {
                <span class="keyword">try</span> {
                    method.invoke(runner);
                } <span class="keyword">catch</span> (<span class="exception">Exception</span> e) {
                    e.printStackTrace();
                }
            }
        }
    }
}</code></pre> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="javaannotations-resources">JavaAnnotations resources</h2> 
    <div class="sectionbody"> 
    </div> 
   </div> 
  </div> 
  <div id="footer"> 
   <div id="footer-text">
     Version 1.2
    <br> Last updated 2016-04-18 20:36:16 +02:00 
   </div> 
  </div> 
  <script data-pagespeed-no-defer>//<![CDATA[
(function(){window.pagespeed=window.pagespeed||{};var f=window.pagespeed;function h(e,a,c,b){this.f=e;this.a=a;this.b=c;this.g=b}f.beaconUrl="";
function k(e){var a=e.f,c=window.mod_pagespeed_start,b=Number(new Date)-c,a=a+(-1==a.indexOf("?")?"?":"&"),a=a+"ets="+("load"==e.a?"load:":"unload:"),a=a+b;if("beforeunload"!=e.a||!window.mod_pagespeed_loaded){a+="&r"+e.a+"=";if(window.performance){var b=window.performance.timing,d=b.navigationStart,g=b.requestStart,a=a+(b[e.a+"EventStart"]-d),a=a+("&nav="+(b.fetchStart-d)),a=a+("&dns="+(b.domainLookupEnd-b.domainLookupStart)),a=a+("&connect="+(b.connectEnd-b.connectStart)),a=a+("&req_start="+(g-
d)),a=a+("&ttfb="+(b.responseStart-g)),a=a+("&dwld="+(b.responseEnd-b.responseStart)),a=a+("&dom_c="+(b.domContentLoadedEventStart-d));window.performance.navigation&&(a+="&nt="+window.performance.navigation.type);d=-1;b.msFirstPaint?d=b.msFirstPaint:window.chrome&&window.chrome.loadTimes&&(d=Math.floor(1E3*window.chrome.loadTimes().firstPaintTime));d=d-g;0<=d&&(a+="&fp="+d)}else a+=b;f.getResourceTimingData&&window.parent==window&&(a+=f.getResourceTimingData());a+=window.parent!=window?"&ifr=1":"&ifr=0";
"load"==e.a&&(window.mod_pagespeed_loaded=!0,(b=window.mod_pagespeed_num_resources_prefetched)&&(a+="&nrp="+b),(b=window.mod_pagespeed_prefetch_start)&&(a+="&htmlAt="+(c-b)));f.panelLoader&&(c=f.panelLoader.getCsiTimingsString(),""!=c&&(a+="&b_csi="+c));f.criticalCss&&(c=f.criticalCss,a+="&ccis="+c.total_critical_inlined_size+"&cces="+c.total_original_external_size+"&ccos="+c.total_overhead_size+"&ccrl="+c.num_replaced_links+"&ccul="+c.num_unreplaced_links);a+="&dpr="+window.devicePixelRatio;""!=
e.b&&(a+=e.b);document.referrer&&(a+="&ref="+encodeURIComponent(document.referrer));a+="&url="+encodeURIComponent(e.g);f.beaconUrl=a;(new Image).src=a}}f.c=function(e,a,c,b){var d=new h(e,a,c,b);window.addEventListener?window.addEventListener(a,function(){k(d)},!1):window.attachEvent("on"+a,function(){k(d)})};f.addInstrumentationInit=f.c;})();

pagespeed.addInstrumentationInit('/mod_pagespeed_beacon', 'load', '', 'http://www.vogella.com/tutorials/JavaAnnotations/article.html');
//]]></script> 
 </body>
</html>