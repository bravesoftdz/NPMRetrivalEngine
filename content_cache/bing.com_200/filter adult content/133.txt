<!doctype html>
<html lang="en" prefix="og: http://ogp.me/ns#">
 <head> 
  <meta charset="utf-8"> 
  <title>content-filter</title> 
  <meta name="description" content="A simple but powerful content-filter. Also provides protection against NoSQL (like MongoDB) injection attacks on Node.js"> 
  <meta property="og:description" content="A simple but powerful content-filter. Also provides protection against NoSQL (like MongoDB) injection attacks on Node.js"> 
  <meta property="og:title" content="content-filter"> 
  <meta property="og:url" content="https://www.npmjs.com/package/content-filter"> 
  <meta property="og:site_name" content="npm"> 
  <meta name="keywords" content="mongodb,mongodb security,mongo security,mongo protector,mongodb protector,mongodb protection,nosql protection,nosql security,nosql injection,content filter,content filtering,content-filter,request filter,filtering,filter,sanitize,query,selector,injection,hash-injection"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:url" content="https://www.npmjs.com/package/content-filter"> 
  <meta name="twitter:title" content="npm: content-filter"> 
  <meta name="twitter:description" content="A simple but powerful content-filter. Also provides protection against NoSQL (like MongoDB) injection attacks on Node.js"> 
  <meta http-equiv="cleartype" content="on"> 
  <meta name="apple-mobile-web-app-capable" content="no"> 
  <meta name="viewport" content="width=device-width,minimum-scale=1.0,initial-scale=1,user-scalable=yes"> 
  <meta name="x-npm:ga:id" content="UA-47041310-1"> 
  <meta name="x-npm:ga:dimensions" content="{&quot;aboveChrome&quot;:&quot;dimension1&quot;,&quot;belowHeader&quot;:&quot;dimension3&quot;,&quot;packagePage&quot;:&quot;dimension2&quot;}"> 
  <link rel="canonical" href="https://www.npmjs.com/package/content-filter"> 
  <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="npm"> 
  <link rel="stylesheet" media="all" href="/static/css/index.css?last-changed=6ce127b3f2f1d381a89d0ac9646eaa04"> 
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.2/html5shiv.min.js"></script>
  <![endif]--> 
  <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,600,700"> 
  <script src="/static/js/index.min.js?last-changed=804eef6a8969a48ed62dc89e2bb9ce65"></script> 
  <style>
      .marketing {
  margin: 0px;
  margin-left: -10px;
  margin-bottom: 40px;
  padding: 0px 0px;
  font-size: 15px;
  font-style: normal;
  fond-variant: normal;
  fort-weight: normal;
  background: rgba(0, 0, 0, 0.02);
  border-radius: 2px;
  border: 1px solid rgba(0, 0, 0, 0.2);
  color: rgba(0, 0, 0, 0.4);
  text-decoration: none;
  letter-spacing: -0.03em;
  line-height: 22.5px;
  }
  
  .marketing a {
  font-weight: 400;
  text-decoration: none;
  color: #cb3837;
  }
  
  .marketing h3 {
  display: block;
  margin: 0;
  padding: 20px 0 10px 0;
  font-size: 20px;
  font-style: normal;
  font-variant: normal;
  font-weight: 400;
  line-height: 22px;
  text-decoration: none;
  color: rgba(0, 0, 0, 0.8);
  }
  
  .marketing h3 a {
  color: rgba(0, 0, 0, 0.8);
  }
  
  .marketing h3 a:hover {
  color: #cb3837;
  }
  
  .marketing p {
  line-height: 22.5px;
  margin-left: 10px;
  margin-right: 10px;
  }
  
  .marketing p a {
  white-space: nowrap;
  }
  
  #marketing-texthed {
  margin-left: 10px;
  }
    </style> 
  <link rel="apple-touch-icon" sizes="57x57" href="/static/images/touch-icons/apple-touch-icon-57x57.png"> 
  <link rel="apple-touch-icon" sizes="60x60" href="/static/images/touch-icons/apple-touch-icon-60x60.png"> 
  <link rel="apple-touch-icon" sizes="72x72" href="/static/images/touch-icons/apple-touch-icon-72x72.png"> 
  <link rel="apple-touch-icon" sizes="76x76" href="/static/images/touch-icons/apple-touch-icon-76x76.png"> 
  <link rel="apple-touch-icon" sizes="114x114" href="/static/images/touch-icons/apple-touch-icon-114x114.png"> 
  <link rel="apple-touch-icon" sizes="120x120" href="/static/images/touch-icons/apple-touch-icon-120x120.png"> 
  <link rel="apple-touch-icon" sizes="144x144" href="/static/images/touch-icons/apple-touch-icon-144x144.png"> 
  <link rel="apple-touch-icon" sizes="152x152" href="/static/images/touch-icons/apple-touch-icon-152x152.png"> 
  <link rel="apple-touch-icon" sizes="180x180" href="/static/images/touch-icons/apple-touch-icon-180x180.png"> 
  <link rel="icon" type="image/png" href="/static/images/touch-icons/favicon-32x32.png" sizes="32x32"> 
  <link rel="icon" type="image/png" href="/static/images/touch-icons/favicon-230x230.png" sizes="230x230"> 
  <link rel="icon" type="image/png" href="/static/images/touch-icons/favicon-96x96.png" sizes="96x96"> 
  <link rel="icon" type="image/png" href="/static/images/touch-icons/android-chrome-192x192.png" sizes="192x192"> 
  <link rel="icon" type="image/png" href="/static/images/touch-icons/coast-228x228.png" sizes="228x228"> 
  <link rel="icon" type="image/png" href="/static/images/touch-icons/favicon-16x16.png" sizes="16x16"> 
  <link rel="manifest" href="/static/images/touch-icons/manifest.json"> 
  <link rel="yandex-tableau-widget" href="/static/images/touch-icons/yandex-browser-manifest.json"> 
  <meta property="og:image" content="https://www.npmjs.com/static/images/touch-icons/open-graph.png"> 
  <meta name="apple-mobile-web-app-capable" content="yes"> 
  <meta name="msapplication-TileColor" content="#cb3837"> 
  <meta name="msapplication-TileImage" content="/static/images/touch-icons/mstile-144x144.png"> 
  <meta name="msapplication-config" content="/static/images/touch-icons/browserconfig.xml"> 
  <meta name="theme-color" content="#cb3837"> 
 </head> 
 <body itemscope itemtype="http://schema.org/WebSite" data-crumb="1nAUxXI8kFx9bto_AHwjYJijGc9yzsxZ8hf1R9M1wrJ"> 
  <meta itemprop="url" content="https://www.npmjs.com/"> 
  <header class="anonymous   "> 
   <!-- logo --> 
   <div class="header-item brand-container"> 
    <div class="logo-container" id="npm-logo"> 
     <a href="/">
      <svg viewbox="0 0 18 7"> 
       <path fill="#CB3837" d="M0,0v6h5v1h4v-1h9v-6" /> 
       <path fill="#FFF" d="M1,1v4h2v-3h1v3h1v-4h1v5h2v-4h1v2h-1v1h2v-4h1v4h2v-3h1v3h1v-3h1v3h1v-4" /> 
      </svg></a> 
    </div> 
   </div> 
   <!-- /logo --> 
   <!-- search --> 
   <div class="header-item header-search-container"> 
    <form class="site-search" id="npm-search" action="/search" method="get" itemprop="potentialAction" itemscope itemtype="http://schema.org/SearchAction"> 
     <meta itemprop="target" content="https://www.npmjs.com/search?q={q}"> 
     <div id="site-search-container"> 
      <input name="q" value="" type="search" id="site-search" placeholder="find packages" tabindex="1" autocorrect="off" autocapitalize="off" itemprop="query-input"> 
     </div> 
     <button tabindex="2" type="submit"> <span class="a11y-only">Search</span> 
      <svg viewbox="0 0 34 34" fill="none" stroke="currentColor"> 
       <ellipse stroke-width="3" cx="16" cy="15" rx="12" ry="12" /> 
       <path d="M26 26 l 8 8" stroke-width="3" stroke-linecap="square" /> 
      </svg> </button> 
    </form> 
   </div> 
   <!-- menu 1 --> 
   <div class="header-item user-info-container"> 
    <div class="user-info"> 
     <ul class="user-info-salutation single"> 
      <li><a href="/signup">sign up</a> or <a href="/login">log in</a></li> 
      <li><a href="/login"><span class="a11y-only">log in</span>
        <svg viewbox="-2765 2857 1080 1080"> 
         <path fill="#986844" d="M-1811.2 3598.5c-.1-4.3-.3-11.3-.8-20.3-.9-15.8-2.7-40.9-6.6-70.7-6.9-52.6-21.6-130.1-52.6-200.4-22.3-50.4-53.5-97.1-90.3-135.2-4.4-20.5-16.7-66.5-43.5-104.8l-5-7.2-54 35.5c-44.5-22.4-91-33.7-138.6-33.7-47.5 0-94.1 11.3-138.6 33.7l-54-35.5-5 7.2c-26.8 38.3-39 84.3-43.5 104.8-36.8 38.1-68 84.8-90.3 135.3-31.1 70.3-45.8 147.8-52.6 200.4-6.1 46.6-7.2 81.6-7.5 93.8 16.6 14 31.3 29.8 46.9 45 17.2 16.7 39.4 28.2 59.1 41.6 1.7 1.1 3.1 2.6 4.2 4.1 15.7 10.4 31 15.4 50.2 19.5 19.2 4.1 35.6 5.6 55.6 7.3 38.7 3.2 77 7.7 115.5 12.6 43.1 5.4 86.5 11.5 130 13.1 41.6 1.5 81.8-9 121.8-19.3 8.9-2.3 17.9-4.5 26.8-6.8.6-4.2 3-8.1 6.7-10.4 40.1-25 81.2-48.2 122-72 5.9-3.5 13.7-1.9 17.9 3.3 9-8.9 17.1-18.2 24.3-27.9l.2-.2.2-.2c1.7-2.6 1.8-2.7 1.5-12.6z" /> 
         <path fill="#FFF" d="M-1808.7 3494.8c-6.9-53.2-21.8-131.7-53.4-203.2-22.3-50.5-53.5-97.5-90.3-136.1-5.5-24.4-18.2-68.2-44.5-105.7l-10.6-15.1-57.3 37.7c-44.3-21.4-90.6-32.2-137.9-32.2-47.2 0-93.6 10.8-137.9 32.2l-57.3-37.7-10.6 15.1c-26.2 37.5-39 81.2-44.5 105.7-36.7 38.5-67.9 85.5-90.3 136.1-31.6 71.4-46.5 149.9-53.4 203.2-7.5 57.7-7.6 98-7.6 99.7v6.3l3.8 5.1c26 35 62.9 64.7 109.6 88.3 36.9 18.6 80 33.6 128.3 44.4 82.2 18.5 151.8 19 159.5 19h.6c7.7 0 77.3-.5 159.5-19 48.3-10.8 91.4-25.8 128.3-44.4 46.7-23.6 83.6-53.3 109.6-88.3l3.7-5v-6.3c.4-1.8.2-42.3-7.3-99.8zm-118.3 174.3c-34.8 17.6-75.8 31.8-121.8 42.1-80.7 18.1-150.4 18.3-153.4 18.3h-.6c-2.9 0-72.7-.2-153.4-18.3-46-10.3-87-24.5-121.8-42.1-41.7-21.1-74.7-47.2-98-77.6.4-22.5 5.1-167.5 58.6-288.5 21.8-49.3 52.4-94.9 88.5-131.8l1.8-1.9.5-2.6c2.7-13.1 12.9-56.4 36.3-93.4l37.2 24.5-7.3 16.6 22.8-11.9c43.3-22.6 88.7-34.1 135-34.1s91.7 11.5 135 34.1l22.8 11.9-7.3-16.6 37.2-24.5c23.4 37 33.6 80.4 36.3 93.4l.5 2.6 1.8 1.9c36.1 36.9 66.7 82.5 88.5 131.8 53.5 121 58.2 266.1 58.6 288.5-23.2 30.4-56.1 56.5-97.8 77.6zm-163-13c0 30.1-50.4 54.4-112.5 54.4s-112.5-24.4-112.5-54.4c0-30.1 50.4-54.4 112.5-54.4s112.5 24.3 112.5 54.4zm-223.5-65.3c0 12.3-10 22.3-22.3 22.3s-22.3-10-22.3-22.3 10-22.3 22.3-22.3c12.3-.1 22.3 9.9 22.3 22.3zm267.8 0c0 12.3-10 22.3-22.3 22.3s-22.3-10-22.3-22.3 10-22.3 22.3-22.3c12.3-.1 22.3 9.9 22.3 22.3z" /> 
        </svg></a></li> 
     </ul> 
    </div> 
    <!-- .user-info --> 
   </div> 
   <!-- /menu 1 --> 
   <!-- menu 2 --> 
   <div class="header-item header-nav-menu-container"> 
    <a href="#" id="npm-expansions" class="npm-expansions" data-event-trigger="click" data-event-name="npm-expansions">node package manager</a> 
    <div class="nav-menu-container" role="navigation"> 
     <a class="nav-toggle drop-down-menu-toggle" href="#product-navigation"><span class="a11y-only">Toggle Navigation</span> 
      <svg viewbox="0 0 44 44"> 
       <rect x="4" y="12" fill="currentColor" width="36" height="2" /> 
       <rect x="4" y="20" fill="currentColor" width="36" height="2" /> 
       <rect x="4" y="28" fill="currentColor" width="36" height="2" /> 
      </svg> </a> 
     <div class="drop-down-menu-container" role="menu"> 
      <nav id="product-navigation" class="product-navigation drop-down-menu"> 
       <ul class="drop-down-menu-section products-list"> 
        <li><a id="nav-enterprise-link" href="/npm/enterprise">npm Enterprise</a></li> 
        <li><a id="nav-features-link" href="/features" data-event-trigger="click" data-event-name="features-nav-link">features</a></li> 
        <li><a id="nav-pricing-link" href="/pricing">pricing</a></li> 
        <li><a id="nav-docs-link" href="https://docs.npmjs.com">documentation</a></li> 
        <li><a id="nav-support-link" href="/support">support</a></li> 
       </ul> 
      </nav> 
     </div> 
    </div> 
   </div> 
   <!-- /menu 2 --> 
  </header> 
  <div class="container content"> 
   <div class="content-column"> 
    <h1 class="package-name"> <a href="/package/content-filter">content-filter</a> <i class="icon-public"></i> </h1> 
    <form class="star"> 
     <input type="hidden" name="name" value="content-filter"> 
     <input id="star-input" type="checkbox" name="isStarred" value="true"> 
     <label for="star-input" class="icon-star"></label> 
     <input type="hidden" name="crumb" value="1nAUxXI8kFx9bto_AHwjYJijGc9yzsxZ8hf1R9M1wrJ"> 
    </form> 
    <div id="readme" class="markdown"> 
     <h1 class="package-name-redundant"><a id="user-content-content-filter" class="deep-link" href="#content-filter">
       <svg aria-hidden="true" class="deep-link-icon" height="16" version="1.1" width="16">
        <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
       </svg></a>Content-filter</h1> 
     <p class="badge-only"><span><a href="https://travis-ci.org/efkan/content-filter"><img src="https://travis-ci.org/efkan/content-filter.svg?branch=master" alt="Build Status" class="badge"></a></span></p> 
     <p>Filters coming HTML request content for any character, character set, a word (<em>slang</em>, <em>swearword</em> or whatever) or a sentence and returns an <em>Express.js middleware</em>. The middleware examines URL and HTML body contents of the request (by using body-parser) and blocks the request and returns a message if there is a forbidden character. In this way, provides protection against NoSQL (like MongoDB) injection attacks for Node.js applications.</p> 
     <p>What about NoSQL? What are the risks?<br> <a href="https://www.owasp.org/index.php/Testing_for_NoSQL_injection">https://www.owasp.org/index.php/Testing_for_NoSQL_injection</a><br> <a href="http://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html">http://blog.websecurify.com/2014/08/hacking-nodejs-and-mongodb.html</a> <br> <a href="http://blog.websecurify.com/2014/08/attacks-nodejs-and-mongodb-part-to.html">http://blog.websecurify.com/2014/08/attacks-nodejs-and-mongodb-part-to.html</a></p> 
     <h2><a id="user-content-filtering-for-anything" class="deep-link" href="#filtering-for-anything">
       <svg aria-hidden="true" class="deep-link-icon" height="16" version="1.1" width="16">
        <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
       </svg></a>Filtering for anything</h2> 
     <p><code>content-filer</code> does not depend on NoSQL. You can use with purpose of filtering for anything. Also you can filter only URL or body data. See the <a href="#sample-project">sample project</a> in use, <a href="#guide">guide</a>, <a href="#examples">examples</a> and <a href="#performance-test-results">performance tests results</a>.</p> 
     <h2><a id="user-content-motivation" class="deep-link" href="#motivation">
       <svg aria-hidden="true" class="deep-link-icon" height="16" version="1.1" width="16">
        <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
       </svg></a>Motivation</h2> 
     <p>There a copule of risk when developing a project using NoSQL databases like MongoDB. The first one about URL and the other one about the content of <code>req.body</code>. (sent data by an allowed user)</p> 
     <p><b>URL risk</b><br> If a malicious user tries to hack your database it's not so hard for any body. Although it's not the right way, assume you use <code>/users/123</code> as URL to get information and show to a user whose <code>id</code> is <code>123</code>. However someone tries <code>/users/%7B%24ne%3Anull%7D</code> as URL to get user informations after logged on your system the URL means <code>/users/{$ne:null}</code> and likely your server sends the all users from your user collection.</p> 
     <p><b>Content risk</b><br> Malicous users might embed unwanted expression into the <code>req.body</code> object as the URL risk. If you want to check query parameters when you querying the collection there is another beautiful and lightweight solution which is named as <a href="https://github.com/vkarpov15/mongo-sanitize">mongo-sanitize</a>. <br><br> However I've wanted a middleware tool to filter the data at the beginning of my Node.js app. Without any special labor at every MongoDB operation. Therefore I wrote this easy tool.</p> 
     <h2><a id="user-content-sample-project" class="deep-link" href="#sample-project">
       <svg aria-hidden="true" class="deep-link-icon" height="16" version="1.1" width="16">
        <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
       </svg></a>Sample Project</h2> 
     <p><a href="https://github.com/efkan/content-filter-example">content-filter-example</a></p> 
     <h2><a id="user-content-guide" class="deep-link" href="#guide">
       <svg aria-hidden="true" class="deep-link-icon" height="16" version="1.1" width="16">
        <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
       </svg></a>Guide</h2> 
     <p><b>Install</b><br> <code>npm install content-filter --save</code></p> 
     <p><b>Note:</b> The package doesn't contain <code>body-parser</code> library. So, the library should be added the project to use <code>content-filter</code>.<br> <code>npm install body-parser --save</code></p> 
     <p><b>Using with Express.js</b></p> 
     <p>Just add the following two lines to your code;</p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>var&nbsp;filter&nbsp;=&nbsp;require('content-filter')</span></span>
       </div>
       <div class="line">
        <span class="text"><span>app.use(filter());</span></span>
       </div></pre>
     </div> 
     <p>A sample usage in the code;</p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>var&nbsp;express&nbsp;=&nbsp;require('express')</span></span>
       </div>
       <div class="line">
        <span class="text"><span>var&nbsp;bodyParser&nbsp;=&nbsp;require('body-parser')</span></span>
       </div>
       <div class="line">
        <span class="text"><span>var&nbsp;filter&nbsp;=&nbsp;require('content-filter')&nbsp;&nbsp;/*&nbsp;STEP-1&nbsp;*/</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;</span></span>
       </div>
       <div class="line">
        <span class="text"><span>var&nbsp;app&nbsp;=&nbsp;express()</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;</span></span>
       </div>
       <div class="line">
        <span class="text"><span>app.use(bodyParser.json())</span></span>
       </div>
       <div class="line">
        <span class="text"><span>app.use(bodyParser.urlencoded({extended:true}))</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;</span></span>
       </div>
       <div class="line">
        <span class="text"><span>app.use(filter());&nbsp;/*&nbsp;STEP-2&nbsp;and&nbsp;that's&nbsp;all&nbsp;*/</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;</span></span>
       </div></pre>
     </div> 
     <p>By the above default using, content-filter checks the request URL for <code>{</code> and <code>$</code> characters and functions and objects of the html body data <em>property names</em> for <code>$</code> character coming by <code>GET</code>, <code>POST</code>, <code>PUT</code> and <code>DELETE</code> methods.</p> 
     <p>For example, content-filter checks "/users", "_id", "$ne", "address", "street" and "province" values from the below request. "/users" is examined for <code>{</code> and <code>$</code> characters and it passes. The others are examined for <code>$</code> character and return 403 status with an error message because of "$ne" expression and hereby <strong>content-filter provide a reliable security for MongoDB applications against the injection attacks</strong>.</p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>PUT&nbsp;/users&nbsp;HTTP/1.1</span></span>
       </div>
       <div class="line">
        <span class="text"><span>Host:&nbsp;webaddress.com</span></span>
       </div>
       <div class="line">
        <span class="text"><span>Content-Type:&nbsp;application/json</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;</span></span>
       </div>
       <div class="line">
        <span class="text"><span>{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;"_id":&nbsp;{&nbsp;"$ne":&nbsp;"A&nbsp;Malicious&nbsp;Expression"&nbsp;},</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;"address":&nbsp;{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;"street":&nbsp;"Raising&nbsp;Road&nbsp;St.",</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;"province":&nbsp;"New&nbsp;Hampshire",</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;}</span></span>
       </div>
       <div class="line">
        <span class="text"><span>}</span></span>
       </div></pre>
     </div> 
     <p>There are several options are used for to configure the module.</p> 
     <p><strong>methodList</strong>:<br> Use this option to select method which will have been filtered and to stop the checking any method. The module checks for GET, POST, PUT and DELETE methods as default. <br></p> 
     <p>Configuring the filter only for <code>POST</code>, <code>PUT</code> and <code>DELETE</code> methods;<br> <code>app.use(filter({methodList:['POST', 'PUT', 'DELETE']}))</code> <br></p> 
     <p><strong>typeList</strong>:<br> Use this option to set filter data structure types of Javascript. Content-filter able to check every data type (object, function, number, string, boolean and symbol) to filter. Because an application cannot make a decision whether an expression is an innocent or a malicious. But a developer can. Content-filter checks <code>object</code> and <code>function</code> types as default considering MongoDB security.</p> 
     <p>Setting to check only <code>string</code> data types;<br> <code>app.use(filter({typeList:['string']}))</code> <br><br> <em>Note: To filter form data object for a string 'object' parameter must be found in typeList array</em> <br> <code>app.use(filter({typeList:['object','string']}))</code><br></p> 
     <p><strong>urlBlackList</strong>:<br> Use this option to configure URL black list elements and to stop the filtering the URL content. The module checks <code>{</code> and <code>$</code> as default considering MongoDB security. Also <code>urlBlackList</code> scope contains <code>req.query</code> object. At the same time GET method requests are evaluated by using urlBlackList.<br></p> 
     <p><em>Note: Ascii code must be used for non-english and specific characters like space. (<strong><code>%20</code></strong> must be used instead of <strong>space</strong> - <a href="http://www.w3schools.com/tags/ref_urlencode.asp">more information</a>)<br></em></p> 
     <p>Removing url filtering;<br> <code>app.use(filter({urlBlackList:[null]}))</code> <br></p> 
     <p>Configuring the filter for several words;<br> <code>app.use(filter({urlBlackList:['word1', 'word2']}))</code> <br></p> 
     <p><strong>urlMessage</strong>:<br> Use this option to change the default request blocking message to show to the user. <br> <code>app.use(filter({urlMessage: 'A forbidden expression has been found in URL: '}))</code> <br></p> 
     <p><strong>bodyBlackList</strong>:<br> Use this option to configure body black list elements and to stop the filtering the body content. The module checks for <code>$</code> as default considering MongoDB security.<br></p> 
     <p>Removing body filtering;<br> <code>app.use(filter({bodyBlackList:[null]}))</code> <br></p> 
     <p>Configuring the filter for only <code>test</code> characters;<br> <code>app.use(filter({bodyBlackList:['test']}))</code> <br></p> 
     <p><strong>bodyMessage</strong>:<br> Use this option to change the default request blocking message to show to the user.<br> <code>app.use(filter({bodyMessage: 'A forbidden expression has been found in form data: '}))</code> <br></p> 
     <p><strong>caseSensitive</strong>:<br> Use this option to stop the case-sensitive when filtering. The option is <code>true</code> as default. <br> Keep in mind that <code>bodyBlackList:['MALICIOUS']</code> is not equal to <code>bodyBlackList:['Malicious']</code>. To catch both of them use <code>caseSensitive</code> like the following: <br> <code>app.use(filter({bodyBlackList:['malicious'], caseSensitive:false}))</code></p> 
     <p><em>Note: if <code>content-filter</code> is used for to secure NoSQL DB by only checking special characters like <code>$</code> and <code>{</code> don't set this parameter false because of thought of performance. Actually it takes trivial too very small time.</em></p> 
     <p><strong>checkNames</strong>:<br> Use this option to include property names of the objects -that will have been checked- to filter. The option is <code>true</code> as default.</p> 
     <p>Assume there is a request body object like the following which comes from a user form to delete selected goods from <code>shoppingCarts</code> collection by user <code>_id</code> value from our MongoDB. If <code>checkNames</code> option is set as <code>false</code> content-filter checks <code>"abcd"</code> and <code>10</code> values if <em>typeList</em> contains 'string' and 'number' values. When <code>checkNames</code> option is <code>true</code>, content-filter checks <code>id</code>, <code>$ne</code>, <code>"abcd"</code>, <code>count</code> and <code>10</code> values under the same conditions.</p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;_id:&nbsp;{&nbsp;$ne:&nbsp;"abcd"&nbsp;},</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;count:&nbsp;10</span></span>
       </div>
       <div class="line">
        <span class="text"><span>}</span></span>
       </div></pre>
     </div> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>shoppingCarts.delete({&nbsp;_id:&nbsp;req.body._id&nbsp;})</span></span>
       </div></pre>
     </div> 
     <p>By the way, the above method is not a best-practice. Instaed that, Passport.js and <code>req.user._id</code> object could be used.<br></p> 
     <p><strong>dispatchToErrorHandler</strong>:<br> Use this option to dispatch the error to your error handler middleware when <code>content-filter</code> catches forbidden characters. <br></p> 
     <p>Configuring the filter to dispatch errors to the error handler;<br> <code>app.use(filter({dispatchToErrorHandler: true}))</code> <br></p> 
     <p>By this option <code>content-filter</code> gives an error object to the <code>next(error)</code> method like the following object to handle in error handler. <br> <code>{ status: 403, code: "FORBIDDEN_CONTENT", message: Message }</code></p> 
     <p><strong>combining options:</strong><br> <code>app.use(filter({urlBlackList:['&amp;&amp;'], bodyBlackList:['$ne'], methodList:['POST', 'PUT', 'DELETE'], dispatchToErrorHandler: true}))</code> <br> or<br></p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>var&nbsp;filterOptions&nbsp;=&nbsp;{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;urlBlackList:['&amp;&amp;'],</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;urlMessage:&nbsp;'A&nbsp;forbidden&nbsp;expression&nbsp;has&nbsp;been&nbsp;found&nbsp;in&nbsp;URL:&nbsp;',</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;bodyBlackList:['$ne'],</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;bodyMessage:&nbsp;'A&nbsp;forbidden&nbsp;expression&nbsp;has&nbsp;been&nbsp;found&nbsp;in&nbsp;form&nbsp;data:&nbsp;',</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;methodList:['POST',&nbsp;'PUT',&nbsp;'DELETE'],</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;dispatchToErrorHandler:&nbsp;true,</span></span>
       </div>
       <div class="line">
        <span class="text"><span>}</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;</span></span>
       </div>
       <div class="line">
        <span class="text"><span>app.use(filter(filterConf))</span></span>
       </div></pre>
     </div> 
     <h2><a id="user-content-examples" class="deep-link" href="#examples">
       <svg aria-hidden="true" class="deep-link-icon" height="16" version="1.1" width="16">
        <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
       </svg></a>Examples</h2> 
     <h3><a id="user-content-protecting-a-mongodb-from-injection" class="deep-link" href="#protecting-a-mongodb-from-injection">
       <svg aria-hidden="true" class="deep-link-icon" height="16" version="1.1" width="16">
        <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
       </svg></a>Protecting a MongoDB from injection</h3> 
     <p>Configuring the filter for <code>$</code>, <code>{</code>, <code>&amp;&amp;</code> and <code>||</code> characters;<br></p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>var&nbsp;blackList&nbsp;=&nbsp;['$','{','&amp;&amp;','||']</span></span>
       </div>
       <div class="line">
        <span class="text"><span>var&nbsp;options&nbsp;=&nbsp;{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;urlBlackList:&nbsp;blackList,</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;bodyBlackList:&nbsp;blackList</span></span>
       </div>
       <div class="line">
        <span class="text"><span>}</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;</span></span>
       </div>
       <div class="line">
        <span class="text"><span>app.use(filter(options))</span></span>
       </div></pre>
     </div> 
     <p><em>Note: Today to secure NoSQL databases, <a href="https://github.com/cr0hn/nosqlinjection_wordlists/blob/master/mongodb_nosqli.txt">several important characters</a> (<code>$</code>,<code>{</code>,<code>&amp;&amp;</code> and <code>||</code>) should be filtered. They can be changed in time.</em></p> 
     <h3><a id="user-content-filtering-the-form-data-object-for-a-string" class="deep-link" href="#filtering-the-form-data-object-for-a-string">
       <svg aria-hidden="true" class="deep-link-icon" height="16" version="1.1" width="16">
        <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
       </svg></a>Filtering the form data object for a string</h3> 
     <p>Filtering the form data object for a string slang word 'sh*t' :)</p> 
     <p><em>Note: Most of the time blocking the word on the client side may be more accurate solution when considering the server performance. However if the message comes from an API <code>content-filter</code> might be solved this issue</em></p> 
     <p>Configuring the <code>content-filter</code>:<br> (Actually default values of typeList, bodyMessage and methodList are already proper and not needed to set them)</p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>var&nbsp;options&nbsp;=&nbsp;{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;typeList:['object','string'],</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;bodyBlackList:['sh*t'],</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;bodyMessage:&nbsp;'A&nbsp;forbidden&nbsp;expression&nbsp;has&nbsp;been&nbsp;found&nbsp;in&nbsp;form&nbsp;data:&nbsp;',</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;methodList:['POST',&nbsp;'PUT',&nbsp;'DELETE']</span></span>
       </div>
       <div class="line">
        <span class="text"><span>}</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;</span></span>
       </div>
       <div class="line">
        <span class="text"><span>app.use(filter(options))</span></span>
       </div></pre>
     </div> 
     <p>Assume that the request below comes to the server:</p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>POST&nbsp;/users&nbsp;HTTP/1.1</span></span>
       </div>
       <div class="line">
        <span class="text"><span>Host:&nbsp;webaddress.com</span></span>
       </div>
       <div class="line">
        <span class="text"><span>Content-Type:&nbsp;application/json</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;</span></span>
       </div>
       <div class="line">
        <span class="text"><span>{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;"address":&nbsp;{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;"street":&nbsp;"The&nbsp;Sh*t&nbsp;Road&nbsp;St."</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;}</span></span>
       </div>
       <div class="line">
        <span class="text"><span>}</span></span>
       </div></pre>
     </div> 
     <p>HTML status of the server response would be <code>403</code> (forbidden). And the response test like the following: <code>A forbidden expression has been found in form data: sh*t</code></p> 
     <h3><a id="user-content-filtering-url-data-for-a-string" class="deep-link" href="#filtering-url-data-for-a-string">
       <svg aria-hidden="true" class="deep-link-icon" height="16" version="1.1" width="16">
        <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
       </svg></a>Filtering URL data for a string</h3> 
     <p>Althought it's not sensible I'll filter URL data for 'admin_id' word for the sake of example.</p> 
     <p>Configuring the <code>content-filter</code>: <code>app.use(filter({urlBlackList:['admin_id']}))</code></p> 
     <p>Assume that the request below comes to the server(full URL <code>http://webaddress.com/?query=admin_id</code>):</p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>GET&nbsp;/?query=admin_id&nbsp;HTTP/1.1</span></span>
       </div>
       <div class="line">
        <span class="text"><span>Host:&nbsp;webaddresss.com</span></span>
       </div></pre>
     </div> 
     <p>HTML status of the server response would be <code>403</code> (forbidden). And the response test like the following: <code>A forbidden expression has been found in URL: admin_id</code></p> 
     <h2><a id="user-content-performance-test-results" class="deep-link" href="#performance-test-results">
       <svg aria-hidden="true" class="deep-link-icon" height="16" version="1.1" width="16">
        <path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path>
       </svg></a>Performance test results</h2> 
     <p><a href="https://nodejs.org/api/process.html#process_process_hrtime">process.hrtime()</a> has been used for to calculate elapsed time for the tests. <br><br> <strong>Test environment:</strong> Intel 3 Ghz Dual-Core CPU and 4 GB RAM<br> <strong>Action:</strong> POST <br></p> 
     <p><strong>Test1</strong> <br> <em>Data:</em> Consists of nested objects which have 5 objects depth of the total. There were 9 elements at level-1, 11 elements at level-2, 4 elements at level-3, 2 elements at level-4 and 2 elements at level-5 too. URL data length is not important. <br> <em>Options:</em> Content-filter default options were used.<br> <em>Result:</em> Completed at 0.486934th ms = 0.0000486934th sec ( 1 ms = 0.001 sec )<br></p> 
     <p><strong>Test2</strong> <br> <em>Data:</em> Consists of nested objects which have 2 objects depth of the total. 11 elements at level-1 and 4 elements at level-2. Level-1 has two long fileds. The first one contain a picture data as base64 string and its length is 168,275. Other one contains a string its length 2,389.<br> <em>Options:</em> <code>typeList</code> has been set as <code>["object", "function","string"]</code><br></p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;typeList:&nbsp;["object",&nbsp;"function","string"]</span></span>
       </div>
       <div class="line">
        <span class="text"><span>}</span></span>
       </div></pre>
     </div> 
     <p><em>Result:</em> Completed at 0.386673rd ms = 0.0000386673rd sec<br></p> 
     <p><strong>Test3</strong> <br> <em>Data:</em> The same with Test2 data.<br> <em>Options:</em> <code>typeList</code> has been set as <code>["object", "function","string"]</code> and <code>bodyBlackList</code> has been set as <code>["+8+L"]</code><br></p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;typeList:&nbsp;["object",&nbsp;"function","string"],</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;bodyBlackList:&nbsp;["+8+L"]</span></span>
       </div>
       <div class="line">
        <span class="text"><span>}</span></span>
       </div></pre>
     </div> 
     <p><em>Result:</em> Content-filter found the forbidden string which is at 83,225th column at 0.629969th ms = 0.0000629969th sec after the process started. <br></p> 
     <p><strong>Conclusion</strong> <br> This is a configurable and reliable tool to filter data.</p> 
     <p><strong>Decription of object levels</strong></p> 
     <div class="highlight">
      <pre class="editor editor-colors">
       <div class="line">
        <span class="text"><span>{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;level1_a:&nbsp;1,</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;level1_b:&nbsp;2,</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;level1_c:&nbsp;{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;level2_a:&nbsp;"One",</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;level2_b:&nbsp;{</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;level3_a:&nbsp;"The&nbsp;level&nbsp;is&nbsp;three",</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></span>
       </div>
       <div class="line">
        <span class="text"><span>&nbsp;&nbsp;&nbsp;&nbsp;}</span></span>
       </div>
       <div class="line">
        <span class="text"><span>}</span></span>
       </div></pre>
     </div> 
     <p><strong>Credit:</strong> <a href="http://blog.tompawlak.org/measure-execution-time-nodejs-javascript">http://blog.tompawlak.org/measure-execution-time-nodejs-javascript</a></p> 
    </div> 
   </div> 
   <div class="sidebar"> 
    <div class="promotion" data-promotion-id="726" data-promotion-spot="packagePage">
     <div class="marketing"> 
      <h3 id="marketing-texthed"> <a href="https://www.npmjs.com/enterprise" title="npm Enterprise">Use this within your firewall</a></h3> 
      <p>Combine open-source packages with your private code and publish to a private registry behind the firewall. <a href="https://www.npmjs.com/enterprise" title="npm Enterprise" target="_blank">npm ? enterprise developers</a></p>
     </div>
    </div> 
    <div class="autoselect-wrapper npm-install icon-download"> 
     <input type="text" value="npm install content-filter" readonly> 
     <p><a href="/package/content-filter/tutorial">how? learn more</a></p> 
    </div> 
    <ul class="box"> 
     <li class="last-publisher"> <a href="/~efkan"> <img src="https://s.gravatar.com/avatar/d60aa5e0181ca79d1ed2a80873bc1554?size=100&amp;default=retro" alt="efkan"> <span>efkan</span> </a> published <span data-date="2017-03-02T15:03:27.640Z" data-date-format="relative"> 2017-03-02T15:03:27.640Z </span> </li> 
     <li> <strong>1.1.1</strong> is the latest of 23 releases </li> 
     <li> <a href="https://github.com/efkan/content-filter">github.com/efkan/content-filter</a> </li> 
     <li> <a href="http://spdx.org/licenses/MIT.html">MIT</a> </li> 
    </ul> 
    <h3 title="collaborators"> Collaborators <small><a href="/package/content-filter/access">list</a></small> </h3> 
    <ul class="humans collaborators"> 
     <li> <a href="/~efkan" rel="tipsy" title="efkan"> <img src="https://s.gravatar.com/avatar/d60aa5e0181ca79d1ed2a80873bc1554?size=100&amp;default=retro" alt="efkan"> </a> </li> 
    </ul> 
    <h3>Stats</h3> 
    <ul class="box"> 
     <li> <strong class="pretty-number daily-downloads">18</strong> downloads in the last day </li> 
     <li> <strong class="pretty-number weekly-downloads">133</strong> downloads in the last week </li> 
     <li> <strong class="pretty-number monthly-downloads">911</strong> downloads in the last month </li> 
     <li id="issues" data-ghapi="https://api.github.com/repos/efkan/content-filter"> <span class="original">Have an issue? <a href="https://github.com/efkan/content-filter/issues">File it.</a></span> <span class="enhanced" style="display:none"> <a href="https://github.com/efkan/content-filter/issues"></a> on GitHub </span> </li> 
     <li id="pull_requests" style="display:none"> <a href="https://github.com/efkan/content-filter/pulls"></a> on GitHub </li> 
    </ul> 
    <h3>Try it out</h3> 
    <ul class="box"> 
     <li class="runkit"><a href="https://runkit.com/npm/content-filter" target="_blank">Test content-filter in your browser.</a></li> 
    </ul> 
    <h3>Keywords</h3> 
    <p class="list-of-links"> <a href="/browse/keyword/mongodb">mongodb</a>, <a href="/browse/keyword/mongodb security">mongodb security</a>, <a href="/browse/keyword/mongo security">mongo security</a>, <a href="/browse/keyword/mongo protector">mongo protector</a>, <a href="/browse/keyword/mongodb protector">mongodb protector</a>, <a href="/browse/keyword/mongodb protection">mongodb protection</a>, <a href="/browse/keyword/nosql protection">nosql protection</a>, <a href="/browse/keyword/nosql security">nosql security</a>, <a href="/browse/keyword/nosql injection">nosql injection</a>, <a href="/browse/keyword/content filter">content filter</a>, <a href="/browse/keyword/content filtering">content filtering</a>, <a href="/browse/keyword/content-filter">content-filter</a>, <a href="/browse/keyword/request filter">request filter</a>, <a href="/browse/keyword/filtering">filtering</a>, <a href="/browse/keyword/filter">filter</a>, <a href="/browse/keyword/sanitize">sanitize</a>, <a href="/browse/keyword/query">query</a>, <a href="/browse/keyword/selector">selector</a>, <a href="/browse/keyword/injection">injection</a>, <a href="/browse/keyword/hash-injection">hash-injection</a> </p> 
    <h3>Dependencies </h3> 
    <p class="list-of-links"> None </p> 
    <h3><a href="/browse/depended/content-filter">Dependents (1)</a></h3> 
    <p class="list-of-links dependents"> <a href="/package/content-filter-example">content-filter-example</a> </p> 
    <script type="application/ld+json">
    {
      "@context": "http://schema.org",
      "@type": "SoftwareApplication",
      "name": "content-filter",
      "description": "A simple but powerful content-filter. Also provides protection against NoSQL (like MongoDB) injection attacks on Node.js",
      "url": "https://www.npmjs.com/package/content-filter",
      "keywords": "mongodb,mongodb security,mongo security,mongo protector,mongodb protector,mongodb protection,nosql protection,nosql security,nosql injection,content filter,content filtering,content-filter,request filter,filtering,filter,sanitize,query,selector,injection,hash-injection",
      "applicationCategory": "DeveloperApplication",
      "offers": {
         "@type": "Offer",
         "price": "0.00"
      }
    }
  </script> 
    <div class="hiring-container" data-template="sidebar"></div> 
   </div> 
  </div> 
  <footer class="pane bg-npm-navy-1"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-md-6 col-md-offset-3"> 
      <h3 class="h4 type-npm-pastel-3">You Need Help</h3> 
      <hr class="divider-1"> 
      <ul class="list-unstyled h6 em-default"> 
       <li class="pbl"><a class="type-neutral-11" href="https://docs.npmjs.com">Documentation</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="/support">Support / Contact Us</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="http://status.npmjs.org/">Registry Status</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="https://github.com/npm/www/issues">Website Issues</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="https://github.com/npm/npm/issues">CLI Issues</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="/policies/security">Security</a></li> 
      </ul> 
     </div> 
     <div class="col-md-6 col-md-offset-1"> 
      <h3 class="h4 type-npm-pastel-3">About npm</h3> 
      <hr class="divider-1"> 
      <ul class="list-unstyled h6 em-default"> 
       <li class="pbl"><a class="type-neutral-11" href="/about">About npm, Inc</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="/jobs">Jobs</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="/npm-weekly">npm Weekly</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="http://blog.npmjs.org">Blog</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="https://twitter.com/npmjs">Twitter</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="https://github.com/npm">GitHub</a></li> 
      </ul> 
     </div> 
     <div class="col-md-6 col-md-offset-1"> 
      <h3 class="h4 type-npm-pastel-3">Legal Stuff</h3> 
      <hr class="divider-1"> 
      <ul class="list-unstyled h6 em-default"> 
       <li class="pbl"><a class="type-neutral-11" href="/policies/terms">Terms of Use</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="/policies/conduct">Code of Conduct</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="/policies/disputes">Package Name Disputes</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="/policies/privacy">Privacy Policy</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="/policies/receiving-reports">Reporting Abuse</a></li> 
       <li class="pbl"><a class="type-neutral-11" href="/policies/">Other policies</a></li> 
      </ul> 
     </div> 
    </div> 
   </div> 
   <div class="txt-c container"> 
    <a class="npm-loves-you type-neutral-11" href="/"> npm loves you </a> 
   </div> 
  </footer> 
  <script defer async src="https://cdn.optimizely.com/js/3318080746.js"></script> 
  <script defer async src="//img.en25.com/i/elqCfg.min.js"></script>
  <!-- Eloqua -->   
  <!-- pid&#x3D;11780 f173a7705e431fbd7774914a59fe83a013648d7b https://www.npmjs.com www-16-west.internal.npmjs.com  --> 
 </body>
</html>