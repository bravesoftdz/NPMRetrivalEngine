<!doctype html>
<html>
 <head> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes"> 
  <!-- adorn --> 
  <link rel="source" href="README.md"> 
  <link rel="stylesheet" href="/adorn/adorn.css"> 
  <script src="/adorn/adorn.js" async></script> 
  <!-- Open Graph --> 
  <meta property="og:title" content="hello.js - JavaScript API for OAuth2 authentication and RESTful services"> 
  <meta property="og:url" content="http://adodson.com/hello.js"> 
  <meta property="og:type" content="website"> 
  <meta property="og:description" content="A client-side JavaScript SDK for authenticating with OAuth2 (and OAuth 1 with an 'oauth proxy') web services and querying their REST APIs. HelloJS standardizes paths and responses to common APIs like Google Data Services, Facebook Graph and Windows Live Connect. It's modular, so that list is growing. No more spaghetti code!"> 
  <meta property="og:image" content="assets/favicon.ico"> 
  <!-- Twitter Card --> 
  <meta name="twitter:hashtag" content="hellojs">
  <!-- i made this up --> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:site" content="@setData"> 
  <meta name="twitter:creator" content="@setData"> 
  <link rel="shortcut icon" href="assets/favicon.ico" type="image/x-icon"> 
  <link rel="stylesheet" href="assets/css-social-buttons/css/zocial.css"> 
  <link rel="stylesheet" href="assets/index.css"> 
  <script src="demos/client_ids.js"></script> 
  <script src="./dist/hello.all.js"></script> 
 </head> 
 <body>
  <h1 id="hellojs">hello.js</h1> 
  <p><a href="https://cdnjs.com/libraries/hellojs/"><img src="https://img.shields.io/cdnjs/v/hellojs.svg" alt="CDNJS"></a></p> 
  <p>A client-side JavaScript SDK for authenticating with <a href="http://tools.ietf.org/pdf/draft-ietf-oauth-v2-12.pdf">OAuth2</a> (and <strong>OAuth1</strong> with a <a href="#oauth-proxy">oauth proxy</a>) web services and querying their REST APIs. HelloJS standardizes paths and responses to common APIs like Google Data Services, Facebook Graph and Windows Live Connect. It’s <strong>modular</strong>, so that list is <a href="./modules">growing</a>. No more spaghetti code!</p> 
  <h2 id="eg">E.g.</h2> 
  <div id="profile"> 
   <div data-bind="visible:false">
    See demo at 
    <a href="https://adodson.com/hello.js/">https://adodson.com/hello.js/</a>.
   </div> 
   <div data-bind="foreach:networks"> 
    <button data-bind="click:function(){ hello( name ).login();}, attr:{'class': 'zocial icon ' + name, title: 'Sign in to ' + displayName}" title="Sign in"></button> 
   </div> 
   <br> 
  </div> 
  <p data-bind="visible: hasConnected, text: 'Hey, we got your details, test done! Checkout below to see what else hello.js can do'"></p> 
  <h2 id="features">Features</h2> 
  <p>Here are some more demos…</p> 
  <table> 
   <thead> 
    <tr> 
     <th></th> 
     <th>Windows</th> 
     <th>Facebook</th> 
     <th>Google</th> 
     <th><a href="#helloapi">More..</a></th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <th class="method get"><a href="demos/profile.html">Profile: name, picture (email)</a></th> 
     <td>?</td> 
     <td>?</td> 
     <td>?</td> 
    </tr> 
    <tr> 
     <th class="method get"><a href="demos/friends.html">Friends/Contacts: name, id (email)</a></th> 
     <td>?</td> 
     <td>?</td> 
     <td>?</td> 
    </tr> 
    <tr> 
     <th class="method get">Albums, name, id, web link</th> 
     <td>?</td> 
     <td>?</td> 
     <td>?</td> 
    </tr> 
    <tr> 
     <th class="method get"><a href="demos/albums.html">Photos in albums, names, links</a></th> 
     <td>?</td> 
     <td>?</td> 
     <td>?</td> 
    </tr> 
    <tr> 
     <th class="method get">Photo file: url, dimensions</th> 
     <td>?</td> 
     <td>?</td> 
     <td>?</td> 
    </tr> 
    <tr> 
     <th class="method post">Create a new album</th> 
     <td>?</td> 
     <td>?</td> 
     <td></td> 
    </tr> 
    <tr> 
     <th class="method post"><a href="demos/upload.html">Upload a photo</a></th> 
     <td>?</td> 
     <td>?</td> 
     <td></td> 
    </tr> 
    <tr> 
     <th class="method delete">Delete an album</th> 
     <td>?</td> 
     <td>?</td> 
     <td></td> 
    </tr> 
    <tr> 
     <th class="method get"><a href="demos/activities.html">Status updates</a></th> 
     <td>?</td> 
     <td>?</td> 
     <td>?</td> 
    </tr> 
    <tr> 
     <th class="method post"><a href="demos/share.html">Update Status</a></th> 
     <td>?</td> 
     <td>?</td> 
     <td>?</td> 
    </tr> 
   </tbody> 
  </table> 
  <ul> 
   <li>Items marked with a ? are fully working and can be <a href="./tests/">tested here</a>.</li> 
   <li>Items marked with a ? aren’t provided by the provider at this time.</li> 
   <li>Blank items are a work in progress, but there is good evidence that they can be done.</li> 
   <li>I have no knowledge of anything unlisted and would appreciate input.</li> 
  </ul> 
  <h2 id="install">Install</h2> 
  <table> 
   <tbody> 
    <tr> 
     <td>Download: <a href="https://github.com/MrSwitch/hello.js/raw/master/dist/hello.all.js">HelloJS</a></td> 
     <td><a href="https://github.com/MrSwitch/hello.js/raw/master/dist/hello.all.min.js">HelloJS (minified)</a></td> 
    </tr> 
   </tbody> 
  </table> 
  <p>Compiled source, which combines all of the modules, can be obtained from <a href="https://github.com/MrSwitch/hello.js/tree/master/dist">GitHub</a>, and source files can be found in <a href="https://github.com/MrSwitch/hello.js/tree/master/src">Source</a>.</p> 
  <p><strong>Note:</strong> Some services require OAuth1 or server-side OAuth2 authorization. In such cases, HelloJS communicates with an <a href="#oauth-proxy">OAuth Proxy</a>.</p> 
  <h3 id="npm">NPM</h3> 
  <div class="language-bash highlighter-rouge">
   <pre class="highlight"><code>npm i hellojs
</code></pre> 
  </div> 
  <p>At the present time only the bundled files in the <code class="highlighter-rouge">/dist/hello.*</code> support CommonJS. e.g. <code class="highlighter-rouge">let hello = require('hellojs/dist/hello.all.js')</code>.</p> 
  <h3 id="bower">Bower</h3> 
  <div class="language-bash highlighter-rouge">
   <pre class="highlight"><code>bower install hello
</code></pre> 
  </div> 
  <p>The <a href="http://bower.io/">Bower</a> package shall install the aforementioned “/src” and “/dist” directories. The “/src” directory provides individual modules which can be packaged as desired.</p> 
  <h2 id="help--support">Help &amp; Support</h2> 
  <ul> 
   <li><a href="https://github.com/MrSwitch/hello.js/issues">GitHub</a> for reporting bugs and feature requests.</li> 
   <li><a href="https://gitter.im/MrSwitch/hello.js">Gitter</a> to reach out for help.</li> 
   <li><a href="http://stackoverflow.com/questions/tagged/hello.js">Stack Overflow</a> use tag <strong>hello.js</strong></li> 
   <li><a href="http://freddy03h.github.io/hello-presentation/#/">Slides</a> by Freddy Harris</li> 
  </ul> 
  <h2 id="quick-start">Quick Start</h2> 
  <p>Quick start shows you how to go from zero to loading in the name and picture of a user, like in the demo above.</p> 
  <ul> 
   <li><a href="#1-register">Register your app domain</a></li> 
   <li><a href="#2-include-hellojs-script-in-your-page">Include hello.js script</a></li> 
   <li><a href="#3-create-the-signin-buttons">Create the sign-in buttons</a></li> 
   <li><a href="#4-add-listeners-for-the-user-login">Setup listener for login and retrieve user info</a></li> 
   <li><a href="#5-configure-hellojs-with-your-client_ids-and-initiate-all-listeners">Initiate the client_ids and all listeners</a></li> 
  </ul> 
  <h3 id="1-register">1. Register</h3> 
  <p>Register your application with at least one of the following networks. Ensure you register the correct domain as they can be quite picky.</p> 
  <ul> 
   <li><a href="https://developers.facebook.com/apps">Facebook</a></li> 
   <li><a href="https://account.live.com/developers/applications/index">Windows Live</a></li> 
   <li><a href="https://code.google.com/apis/console/b/0/#:access">Google+</a></li> 
  </ul> 
  <h3 id="2-include-hellojs-script-in-your-page">2. Include Hello.js script in your page</h3> 
  <div class="language-html highlighter-rouge">
   <pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"./dist/hello.all.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre> 
  </div> 
  <h3 id="3-create-the-sign-in-buttons">3. Create the sign-in buttons</h3> 
  <p>Just add onclick events to call hello(network).login(). Style your buttons as you like; I’ve used <a href="http://zocial.smcllns.com">zocial css</a>, but there are many other icon sets and fonts.</p> 
  <div class="language-html highlighter-rouge">
   <pre class="highlight"><code><span class="nt">&lt;button</span> <span class="na">onclick=</span><span class="s">"hello('windows').login()"</span><span class="nt">&gt;</span>windows<span class="nt">&lt;/button&gt;</span>
</code></pre> 
  </div> 
  <h3 id="4-add-listeners-for-the-user-login">4. Add listeners for the user login</h3> 
  <p>Let’s define a simple function, which will load a user profile into the page after they sign in and on subsequent page refreshes. Below is our event listener which will listen for a change in the authentication event and make an API call for data.</p> 
  <div class="language-javascript highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'auth.login'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">auth</span><span class="p">)</span> <span class="p">{</span>

	<span class="c1">// Call user information, for the given network</span>
	<span class="nx">hello</span><span class="p">(</span><span class="nx">auth</span><span class="p">.</span><span class="nx">network</span><span class="p">).</span><span class="nx">api</span><span class="p">(</span><span class="s1">'me'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">{</span>
		<span class="c1">// Inject it into the container</span>
		<span class="kd">var</span> <span class="nx">label</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">'profile_'</span> <span class="o">+</span> <span class="nx">auth</span><span class="p">.</span><span class="nx">network</span><span class="p">);</span>
		<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">label</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">label</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">'div'</span><span class="p">);</span>
			<span class="nx">label</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="s1">'profile_'</span> <span class="o">+</span> <span class="nx">auth</span><span class="p">.</span><span class="nx">network</span><span class="p">;</span>
			<span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">'profile'</span><span class="p">).</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">label</span><span class="p">);</span>
		<span class="p">}</span>
		<span class="nx">label</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s1">'&lt;img src="'</span> <span class="o">+</span> <span class="nx">r</span><span class="p">.</span><span class="nx">thumbnail</span> <span class="o">+</span> <span class="s1">'" /&gt; Hey '</span> <span class="o">+</span> <span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
	<span class="p">});</span>
<span class="p">});</span>
</code></pre> 
  </div> 
  <h3 id="5-configure-hellojs-with-your-client-ids-and-initiate-all-listeners">5. Configure hello.js with your client IDs and initiate all listeners</h3> 
  <p>Now let’s wire it up with our registration detail obtained in step 1. By passing a [key:value, …] list into the <code class="highlighter-rouge">hello.init</code> function. e.g….</p> 
  <div class="language-javascript highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
	<span class="na">facebook</span><span class="p">:</span> <span class="nx">FACEBOOK_CLIENT_ID</span><span class="p">,</span>
	<span class="na">windows</span><span class="p">:</span> <span class="nx">WINDOWS_CLIENT_ID</span><span class="p">,</span>
	<span class="na">google</span><span class="p">:</span> <span class="nx">GOOGLE_CLIENT_ID</span>
<span class="p">},</span> <span class="p">{</span><span class="na">redirect_uri</span><span class="p">:</span> <span class="s1">'redirect.html'</span><span class="p">});</span>
</code></pre> 
  </div> 
  <p>That’s it. The code above actually powers the demo at the start so, no excuses.</p> 
  <h1 id="core-methods">Core Methods</h1> 
  <h2 id="helloinit">hello.init()</h2> 
  <p>Initiate the environment. And add the application credentials.</p> 
  <h3 id="helloinitfacebook-id-windows-id-google-id--">hello.init({facebook: <em>id</em>, windows: <em>id</em>, google: <em>id</em>, … })</h3> 
  <table> 
   <thead> 
    <tr> 
     <th>name</th> 
     <th>type</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>credentials</td> 
     <td><i>object( key =&gt; value, ...&nbsp; )</i> 
      <table> 
       <thead> 
        <tr> 
         <th>name</th> 
         <th>type</th> 
         <th>example</th> 
         <th>description</th> 
         <th>argument</th> 
         <th>default</th> 
        </tr> 
       </thead> 
       <tbody> 
        <tr> 
         <td>key</td> 
         <td><i>string</i></td> 
         <td><q>windows</q>, <q>facebook</q> or <q>google</q></td> 
         <td>App names</td> 
         <td><em>required</em></td> 
         <td>n/a</td> 
        </tr> 
        <tr> 
         <td>value</td> 
         <td><i>string</i></td> 
         <td><q>0000000AB1234</q></td> 
         <td>ID of the service to connect to</td> 
         <td><em>required</em></td> 
         <td>n/a</td> 
        </tr> 
       </tbody> 
      </table> </td> 
    </tr> 
    <tr> 
     <td>options</td> 
     <td>sets default <i>options</i>, as in hello.login()&lt;/i&gt;</td> 
    </tr> 
   </tbody> 
  </table> 
  <h3 id="example">Example:</h3> 
  <div class="language-js highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
	<span class="na">facebook</span><span class="p">:</span> <span class="s1">'359288236870'</span><span class="p">,</span>
	<span class="na">windows</span><span class="p">:</span> <span class="s1">'000000004403AD10'</span>
<span class="p">});</span>
</code></pre> 
  </div> 
  <h2 id="hellologin">hello.login()</h2> 
  <div data-bind="template: { name: 'tests-template', data: { test: $root, filter:'login' } }"></div> 
  <p>If a network string is provided: A consent window to authenticate with that network will be initiated. Else if no network is provided a prompt to select one of the networks will open. A callback will be executed if the user authenticates and or cancels the authentication flow.</p> 
  <h3 id="hellologinnetwork--options--callback">hello.login([network] [, options] [, callback()])</h3> 
  <table> 
   <tbody>
    <tr> 
     <th>name</th> 
     <th>type</th> 
     <th>example</th> 
     <th>description</th> 
     <th>argument</th> 
     <th>default</th> 
    </tr> 
    <tr> 
     <td>network</td> 
     <td><i>string</i></td> 
     <td><q>windows</q>, <q>facebook</q></td> 
     <td>One of our services.</td> 
     <td><em>required</em></td> 
     <td><em>null</em></td> 
    </tr> 
    <tr> 
     <td>options</td> 
     <td colspan="5"><i>object</i> 
      <table> 
       <tbody>
        <tr> 
         <th>name</th> 
         <th>type</th> 
         <th>example</th> 
         <th>description</th> 
         <th>argument</th> 
         <th>default</th> 
        </tr> 
        <tr> 
         <td>display</td> 
         <td><i>string</i></td> 
         <td><q>popup</q>, <q>page</q> or <q>none</q></td> 
         <td>"popup" - as the name suggests, "page" - navigates the whole page, "none" - refresh the access_token in the background</td> 
         <td><em>optional</em></td> 
         <td><q>popup</q></td> 
        </tr> 
        <tr> 
         <td>scope</td> 
         <td><i>string</i></td> 
         <td><q>email</q>, <q>publish</q> or <q>photos</q></td> 
         <td>Comma separated list of <a href="#scope">scopes</a></td> 
         <td><em>optional</em></td> 
         <td><em>null</em></td>
        </tr> 
        <tr> 
         <td>redirect_uri</td> 
         <td><i>string</i></td> 
         <td><q><a href="#redirect-page">Redirect Page</a></q></td> 
         <td> A full or relative URI of a page which includes this script file hello.js</td> 
         <td> <em>optional</em></td> 
         <td> <em>window.location.href</em></td> 
        </tr> 
        <tr> 
         <td>response_type</td> 
         <td><i>string</i></td> 
         <td><q>token</q>, <q>code</q></td> 
         <td>Implicit (token) or Explicit (code) Grant flow</td> 
         <td><em>optional</em></td> 
         <td><q>token</q></td> 
        </tr> 
        <tr> 
         <td>force</td> 
         <td><i>Boolean</i> or <i>null</i></td> 
         <td><i>true</i>, <i>false</i> or <i>null</i></td> 
         <td>(true) initiate auth flow and prompt for reauthentication where available. (null) initiate auth flow. (false) only prompt auth flow if the scopes have changed or the token expired.</td> 
         <td><em>optional</em></td> 
         <td><i>null</i></td> 
        </tr> 
        <tr> 
         <td>popup</td> 
         <td><i>object</i></td> 
         <td>{resizable:1}</td> 
         <td>Overrides the <a href="http://www.w3schools.com/jsref/met_win_open.asp">popups specs</a></td> 
         <td><em>optional</em></td> 
         <td>See <code>hello.settings.popup</code></td> 
        </tr> 
        <tr> 
         <td>state</td> 
         <td><i>string</i></td> 
         <td><q>ijustsetthis</q></td> 
         <td>Honours the state parameter, by storing it withing its own state object</td> 
         <td><em>optional</em></td> 
         <td></td> 
        </tr> 
       </tbody>
      </table> </td> 
    </tr> 
    <tr> 
     <td>callback</td> 
     <td><i>function</i></td> 
     <td><code>function(){alert("Logged in!");}</code></td> 
     <td>A callback when the users session has been initiated</td> 
     <td><em>optional</em></td> 
     <td><em>null</em></td> 
    </tr> 
   </tbody>
  </table> 
  <h3 id="examples">Examples:</h3> 
  <div class="language-js highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">(</span><span class="s1">'facebook'</span><span class="p">).</span><span class="nx">login</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s1">'You are signed in to Facebook'</span><span class="p">);</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s1">'Signin error: '</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">});</span>
</code></pre> 
  </div> 
  <h2 id="hellologout">hello.logout()</h2> 
  <div data-bind="template: { name: 'tests-template', data: { test: $root, filter: 'logout' } }"></div> 
  <p>Remove all sessions or individual sessions.</p> 
  <h3 id="hellologoutnetwork--options--callback">hello.logout([network] [, options] [, callback()])</h3> 
  <table> 
   <tbody>
    <tr> 
     <th>name</th> 
     <th>type</th> 
     <th>example</th> 
     <th>description</th> 
     <th>argument</th> 
     <th>default</th> 
    </tr> 
    <tr> 
     <td>network</td> 
     <td><i>string</i></td> 
     <td> <q>windows</q>, <q>facebook</q> </td> 
     <td>One of our services.</td> 
     <td> <em>optional</em> </td> 
     <td> <em>null</em> </td> 
    </tr> 
    <tr> 
     <td>options</td> 
     <td colspan="5"><i>object</i> 
      <table> 
       <tbody>
        <tr> 
         <th>name</th> 
         <th>type</th> 
         <th>example</th> 
         <th>description</th> 
         <th>argument</th> 
         <th>default</th> 
        </tr> 
        <tr> 
         <td>force</td> 
         <td><i>boolean</i></td> 
         <td><i>true</i></td> 
         <td>If set to true, the user will be logged out of the providers site as well as the local application. By default the user will still be signed into the providers site.</td> 
         <td> <em>optional</em> </td> 
         <td><i>false</i></td> 
        </tr> 
       </tbody>
      </table> </td> 
    </tr> 
    <tr> 
     <td>callback</td> 
     <td><i>function</i></td> 
     <td> <code>function() {alert('Logged out!');} </code> </td> 
     <td> A callback when the users session has been terminated</td> 
     <td> <em>optional</em> </td> 
     <td> <em>null</em> </td> 
    </tr> 
   </tbody>
  </table> 
  <h3 id="example-1">Example:</h3> 
  <div class="language-js highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">(</span><span class="s1">'facebook'</span><span class="p">).</span><span class="nx">logout</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s1">'Signed out'</span><span class="p">);</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s1">'Signed out error: '</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">});</span>
</code></pre> 
  </div> 
  <h2 id="hellogetauthresponse">hello.getAuthResponse()</h2> 
  <div data-bind="template: { name: 'tests-template', data: { test: $root, filter: 'getAuthResponse' } }"></div> 
  <p>Get the current status of the session. This is a synchronous request and does not validate any session cookies which may have expired.</p> 
  <h3 id="hellogetauthresponsenetwork">hello.getAuthResponse(network)</h3> 
  <table> 
   <tbody>
    <tr> 
     <th>name</th> 
     <th>type</th> 
     <th>example</th> 
     <th>description</th> 
     <th>argument</th> 
     <th>default</th> 
    </tr> 
    <tr> 
     <td>network</td> 
     <td><i>string</i></td> 
     <td><q>windows</q>, <q>facebook</q></td> 
     <td>One of our services.</td> 
     <td><em>optional</em></td> 
     <td><em>current</em></td> 
    </tr> 
   </tbody>
  </table> 
  <h3 id="examples-1">Examples:</h3> 
  <div class="language-js highlighter-rouge">
   <pre class="highlight"><code><span class="kd">var</span> <span class="nx">online</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">session</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">currentTime</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">/</span> <span class="mi">1000</span><span class="p">;</span>
	<span class="k">return</span> <span class="nx">session</span> <span class="o">&amp;&amp;</span> <span class="nx">session</span><span class="p">.</span><span class="nx">access_token</span> <span class="o">&amp;&amp;</span> <span class="nx">session</span><span class="p">.</span><span class="nx">expires</span> <span class="o">&gt;</span> <span class="nx">currentTime</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">fb</span> <span class="o">=</span> <span class="nx">hello</span><span class="p">(</span><span class="s1">'facebook'</span><span class="p">).</span><span class="nx">getAuthResponse</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">wl</span> <span class="o">=</span> <span class="nx">hello</span><span class="p">(</span><span class="s1">'windows'</span><span class="p">).</span><span class="nx">getAuthResponse</span><span class="p">();</span>

<span class="nx">alert</span><span class="p">((</span><span class="nx">online</span><span class="p">(</span><span class="nx">fb</span><span class="p">)</span> <span class="p">?</span> <span class="s1">'Signed'</span> <span class="p">:</span> <span class="s1">'Not signed'</span><span class="p">)</span> <span class="o">+</span> <span class="s1">' into Facebook, '</span> <span class="o">+</span> <span class="p">(</span><span class="nx">online</span><span class="p">(</span><span class="nx">wl</span><span class="p">)</span> <span class="p">?</span> <span class="s1">'Signed'</span> <span class="p">:</span> <span class="s1">'Not signed'</span><span class="p">)</span> <span class="o">+</span> <span class="s1">' into Windows Live'</span><span class="p">);</span>
</code></pre> 
  </div> 
  <h2 id="helloapi">hello.api()</h2> 
  <div data-bind="template: { name: 'tests-template', data: { test: $root, filter:'api' } }"></div> 
  <p>Make calls to the API for getting and posting data.</p> 
  <h3 id="helloapipath-method-data-callbackjson">hello.api([path], [method], [data], [callback(json)])</h3> 
  <div class="highlighter-rouge">
   <pre class="highlight"><code>hello.api([path], [method], [data], [callback(json)]).then(successHandler, errorHandler)
</code></pre> 
  </div> 
  <table> 
   <tbody>
    <tr> 
     <th>name</th> 
     <th>type</th> 
     <th>example</th> 
     <th>description</th> 
     <th>argument</th> 
     <th>default</th> 
    </tr> 
    <tr> 
     <td>path</td> 
     <td><i>string</i></td> 
     <td> <q>/me</q>, <q>/me/friends</q> </td> 
     <td>A relative path to the modules <code>base</code> URI, a full URI or a mapped path defined by the module - see <a href="https://adodson.com/hello.js#REST API">REST API</a>.</td> 
     <td> <em>required</em> </td> 
     <td>null</td> 
    </tr> 
    <tr> 
     <td>method</td> 
     <td> <q>get</q>, <q>post</q>, <q>delete</q>, <q>put</q> </td> 
     <td>See <em>type</em> </td> 
     <td>HTTP request method to use.</td> 
     <td> <em>optional</em> </td> 
     <td> <q>get</q> </td> 
    </tr> 
    <tr> 
     <td>data</td> 
     <td><i>object</i></td> 
     <td> <code>{name:<q>Hello</q>, description:<q>Fandelicious</q>}</code> </td> 
     <td> A JSON object of data, FormData, HTMLInputElement, HTMLFormElment to be sent along with a <q>get</q>, <q>post</q>or <q>put</q>request </td> 
     <td> <em>optional</em> </td> 
     <td> <em>null</em> </td> 
    </tr> 
    <tr> 
     <td>callback</td> 
     <td><i>function</i></td> 
     <td> <code>function(json){console.log(json);}</code> </td> 
     <td> A function to call with the body of the response returned in the first parameter as an object, else boolean false. </td> 
     <td> <em>optional</em> </td> 
     <td> <em>null</em> </td> 
    </tr> 
    <tr> 
     <td colspan="6">More options (below) require putting the options into a 'key'=&gt;'value' hash. I.e. <code>hello(network).api(options)</code> </td> 
    </tr> 
    <tr> 
     <td>timeout</td> 
     <td><i>integer</i></td> 
     <td> <code>3000</code> = 3 seconds. </td> 
     <td> Wait <em>milliseconds</em> before resolving the Promise with a reject. </td> 
     <td> <em>optional</em> </td> 
     <td> <em>60000</em> </td> 
    </tr> 
    <tr> 
     <td>formatResponse</td> 
     <td><i>boolean</i></td> 
     <td> <code>false</code> </td> 
     <td> <code>true</code>: format the response, <code>false</code>: return raw response. </td> 
     <td> <em>optional</em> </td> 
     <td> <em>true</em> </td> 
    </tr> 
   </tbody>
  </table> 
  <h3 id="examples-2">Examples:</h3> 
  <div class="language-js highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">(</span><span class="s1">'facebook'</span><span class="p">).</span><span class="nx">api</span><span class="p">(</span><span class="s1">'me'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">json</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s1">'Your name is '</span> <span class="o">+</span> <span class="nx">json</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s1">'Whoops! '</span> <span class="o">+</span> <span class="nx">e</span><span class="p">.</span><span class="nx">error</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
<span class="p">});</span>
</code></pre> 
  </div> 
  <h1 id="event-subscription">Event Subscription</h1> 
  <p>Please see <a href="demos/events.html">demo of the global events</a>.</p> 
  <h2 id="helloon">hello.on()</h2> 
  <p>Bind a callback to an event. An event may be triggered by a change in user state or a change in some detail.</p> 
  <h3 id="helloonevent-callback">hello.on(event, callback)</h3> 
  <table> 
   <thead> 
    <tr> 
     <th>event</th> 
     <th>description</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>auth</td> 
     <td>Triggered whenever session changes</td> 
    </tr> 
    <tr> 
     <td>auth.init</td> 
     <td>Triggered prior to requesting an authentication flow</td> 
    </tr> 
    <tr> 
     <td>auth.login</td> 
     <td>Triggered whenever a user logs in</td> 
    </tr> 
    <tr> 
     <td>auth.logout</td> 
     <td>Triggered whenever a user logs out</td> 
    </tr> 
    <tr> 
     <td>auth.update</td> 
     <td>Triggered whenever a users credentials change</td> 
    </tr> 
   </tbody> 
  </table> 
  <h3 id="example-2">Example:</h3> 
  <div class="language-js highlighter-rouge">
   <pre class="highlight"><code><span class="kd">var</span> <span class="nx">sessionStart</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">alert</span><span class="p">(</span><span class="s1">'Session has started'</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">hello</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'auth.login'</span><span class="p">,</span> <span class="nx">sessionStart</span><span class="p">);</span>
</code></pre> 
  </div> 
  <h2 id="hellooff">hello.off()</h2> 
  <p>Remove a callback. Both event name and function must exist.</p> 
  <h3 id="hellooffevent-callback">hello.off(event, callback)</h3> 
  <div class="language-js highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">.</span><span class="nx">off</span><span class="p">(</span><span class="s1">'auth.login'</span><span class="p">,</span> <span class="nx">sessionStart</span><span class="p">);</span>
</code></pre> 
  </div> 
  <h1 id="concepts">Concepts</h1> 
  <h2 id="pagination-limit-and-next-page">Pagination, Limit and Next Page</h2> 
  <p>Responses which are a subset of the total results should provide a <code class="highlighter-rouge">response.paging.next</code> property. This can be plugged back into <code class="highlighter-rouge">hello.api</code> in order to get the next page of results.</p> 
  <p>In the example below the function <code class="highlighter-rouge">paginationExample()</code> is initially called with <code class="highlighter-rouge">me/friends</code>. Subsequent calls take the path from <code class="highlighter-rouge">resp.paging.next</code>.</p> 
  <div class="language-js highlighter-rouge">
   <pre class="highlight"><code><span class="kd">function</span> <span class="nx">paginationExample</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">hello</span><span class="p">(</span><span class="s1">'facebook'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">api</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span> <span class="p">{</span><span class="na">limit</span><span class="p">:</span> <span class="mi">1</span><span class="p">})</span>
		<span class="p">.</span><span class="nx">then</span><span class="p">(</span>
			<span class="kd">function</span> <span class="nx">callback</span><span class="p">(</span><span class="nx">resp</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">paging</span> <span class="o">&amp;&amp;</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">paging</span><span class="p">.</span><span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">if</span> <span class="p">(</span><span class="nx">confirm</span><span class="p">(</span><span class="s1">'Got friend '</span> <span class="o">+</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">'. Get another?'</span><span class="p">))</span> <span class="p">{</span>
						<span class="c1">// Call the API again but with the 'resp.paging.next` path</span>
						<span class="nx">paginationExample</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">paging</span><span class="p">.</span><span class="nx">next</span><span class="p">);</span>
					<span class="p">}</span>
				<span class="p">}</span>
				<span class="k">else</span> <span class="p">{</span>
					<span class="nx">alert</span><span class="p">(</span><span class="s1">'Got friend '</span> <span class="o">+</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">name</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">},</span>
			<span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
				<span class="nx">alert</span><span class="p">(</span><span class="s1">'Whoops!'</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">);</span>
<span class="p">}</span>

<span class="nx">paginationExample</span><span class="p">(</span><span class="s1">'me/friends'</span><span class="p">);</span>
</code></pre> 
  </div> 
  <h2 id="scope">Scope</h2> 
  <p>The scope property defines which privileges an app requires from a network provider. The scope can be defined globally for a session through <code class="highlighter-rouge">hello.init(object, {scope: 'string'})</code>, or at the point of triggering the auth flow e.g. <code class="highlighter-rouge">hello('network').login({scope: 'string'});</code> An app can specify multiple scopes, separated by commas - as in the example below.</p> 
  <div class="language-js highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">(</span><span class="s1">'facebook'</span><span class="p">).</span><span class="nx">login</span><span class="p">({</span>
    <span class="na">scope</span><span class="p">:</span> <span class="s1">'friends, photos, publish'</span>
<span class="p">});</span>
</code></pre> 
  </div> 
  <p>Scopes are tightly coupled with API requests. Unauthorized error response from an endpoint will occur if the scope privileges have not been granted. Use the <a href="http://adodson.com/hello.js/#helloapi">hello.api reference table</a> to explore the API and scopes.</p> 
  <p>It’s considered good practice to limit the use of scopes. The more unnessary privileges you ask for the more likely users are going to drop off. If your app has many different sections, consider re-authorizing the user with different privileges as they go.</p> 
  <p>HelloJS modules standardises popular scope names. However you can always use proprietary scopes, e.g. to access google spreadsheets: <code class="highlighter-rouge">hello('google').login({scope: 'https://spreadsheets.google.com/feeds'});</code></p> 
  <div data-bind="template: { name: 'tests-template', data: { test: $root, filter:'scope' } }">
   See 
   <a href="http://adodson.com/hello.js/#scope">Scope</a> for standardised scopes.
  </div> 
  <h2 id="redirect-page">Redirect Page</h2> 
  <p>Providers of the OAuth1/2 authorization flow must respect a Redirect URI parameter in the authorization request (also known as a Callback URL). E.g. <code class="highlighter-rouge">...&amp;redirect_uri=http://mydomain.com/redirect.html&amp;...</code></p> 
  <p>The <code class="highlighter-rouge">redirect_uri</code> is always a full URL. It must point to a Redirect document which will process the authorization response and set user session data. In order for an application to communicate with this document and set the session data, the origin of the document must match that of the application - this restriction is known as the same-origin security policy.</p> 
  <p>A successful authorisation response will append the user credentials to the Redirect URI. e.g. <code class="highlighter-rouge">?access_token=12312&amp;amp;expires_in=3600</code>. The Redirect document is responsible for interpreting the request and setting the session data.</p> 
  <h3 id="create-a-redirect-page-and-uri">Create a Redirect Page and URI</h3> 
  <p>In HelloJS the default value of <code class="highlighter-rouge">redirect_uri</code> is the current page. However its recommended that you explicitly set the <code class="highlighter-rouge">redirect_uri</code> to a dedicated page with minimal UI and page weight.</p> 
  <p>Create an HTML page on your site which will be your redirect document. Include the HelloJS script e.g…</p> 
  <div class="language-html highlighter-rouge">
   <pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"./hello.js"</span><span class="nt">&gt;&lt;/script&gt;</span>;
</code></pre> 
  </div> 
  <p>Do add css animations incase there is a wait. <strong>View Source</strong> on <a href="./redirect.html">./redirect.html</a> for an example.</p> 
  <p>Then within your application script where you initiate HelloJS, define the Redirect URI to point to this page. e.g.</p> 
  <div class="language-js highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">.</span><span class="nx">init</span><span class="p">({</span>
	<span class="na">facebook</span><span class="p">:</span><span class="nx">client_id</span>
<span class="p">},</span> <span class="p">{</span>
	<span class="na">redirect_uri</span><span class="p">:</span> <span class="s1">'/redirect.html'</span>
<span class="p">});</span>
</code></pre> 
  </div> 
  <p>Please note: The <code class="highlighter-rouge">redirect_uri</code> example above in <code class="highlighter-rouge">hello.init</code> is relative, it will be turned into an absolute path by HelloJS before being used.</p> 
  <h2 id="error-handling">Error Handling</h2> 
  <p>Errors are returned i.e. <code class="highlighter-rouge">hello.api([path]).then(null, [*errorHandler*])</code> - alternatively <code class="highlighter-rouge">hello.api([path], [*handleSuccessOrError*])</code>.</p> 
  <p>The <a href="#promises-a">Promise</a> response standardizes the binding of error handlers.</p> 
  <h3 id="error-object">Error Object</h3> 
  <p>The first parameter of a failed request to the <em>errorHandler</em> may be either <em>boolean (false)</em> or be an <strong>Error Object</strong>…</p> 
  <table> 
   <thead> 
    <tr> 
     <th>name</th> 
     <th>type</th> 
    </tr> 
   </thead> 
   <tbody> 
    <tr> 
     <td>error</td> 
     <td><i>object</i> 
      <table> 
       <thead> 
        <tr> 
         <th>name</th> 
         <th>type</th> 
         <th>example</th> 
         <th>description</th> 
         <th>argument</th> 
         <th>default</th> 
        </tr> 
       </thead> 
       <tbody> 
        <tr> 
         <td>code</td> 
         <td><i>string</i></td> 
         <td> <q>request_token_unauthorized</q> </td> 
         <td>Code</td> 
         <td> <em>required</em> </td> 
         <td>n/a</td> 
        </tr> 
        <tr> 
         <td>message</td> 
         <td><i>string</i></td> 
         <td class="auto-style2">The provided access token....</td> 
         <td> Error message</td> 
         <td> <em>required</em> </td> 
         <td>n/a</td> 
        </tr> 
       </tbody> 
      </table> </td> 
    </tr> 
   </tbody> 
  </table> 
  <h2 id="extending-the-services">Extending the services</h2> 
  <p>Services are added to HelloJS as “modules” for more information about creating your own modules and examples, go to <a href="./modules">Modules</a></p> 
  <h2 id="oauth-proxy">OAuth Proxy</h2> 
  <div data-bind="template: { name: 'tests-template', data: { test: $root, filter: 'oauth' } }">
    A list of the service providers OAuth* mechanisms is available at 
   <a href="http://adodson.com/hello.js/#oauth-proxy">Provider OAuth Mechanisms</a> 
  </div> 
  <p>For providers which support only OAuth1 or OAuth2 with Explicit Grant, the authentication flow needs to be signed with a secret key that may not be exposed in the browser. HelloJS gets round this problem by the use of an intermediary webservice defined by <code class="highlighter-rouge">oauth_proxy</code>. This service looks up the secret from a database and performs the handshake required to provision an <code class="highlighter-rouge">access_token</code>. In the case of OAuth1, the webservice also signs subsequent API requests.</p> 
  <p><strong>Quick start:</strong> Register your Client ID and secret at the OAuth Proxy service, <a href="https://auth-server.herokuapp.com/">Register your App</a></p> 
  <p>The default proxy service is <a href="https://auth-server.herokuapp.com/">https://auth-server.herokuapp.com/</a>. Developers may add their own network registration Client ID and secret to this service in order to get up and running. Alternatively recreate this service with <a href="https://npmjs.org/package/oauth-shim">node-oauth-shim</a>. Then override the default <code class="highlighter-rouge">oauth_proxy</code> in HelloJS client script in <code class="highlighter-rouge">hello.init</code>, like so…</p> 
  <div class="language-javascript highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span>
	<span class="nx">CLIENT_IDS</span><span class="p">,</span>
	<span class="p">{</span>
		<span class="na">oauth_proxy</span><span class="p">:</span> <span class="s1">'https://auth-server.herokuapp.com/proxy'</span>
	<span class="p">}</span>
<span class="p">)</span>
</code></pre> 
  </div> 
  <h3 id="enforce-explicit-grant">Enforce Explicit Grant</h3> 
  <p>Enforcing the OAuth2 Explicit Grant is done by setting <code class="highlighter-rouge">response_type=code</code> in <a href="#hellologin">hello.login</a> options - or globally in <a href="#helloinit">hello.init</a> options. E.g…</p> 
  <div class="language-javascript highlighter-rouge">
   <pre class="highlight"><code><span class="nx">hello</span><span class="p">(</span><span class="nx">network</span><span class="p">).</span><span class="nx">login</span><span class="p">({</span>
	<span class="na">response_type</span><span class="p">:</span> <span class="s1">'code'</span>
<span class="p">});</span>
</code></pre> 
  </div> 
  <h2 id="refresh-access-token">Refresh Access Token</h2> 
  <p>Access tokens provided by services are generally short lived - typically 1 hour. Some providers allow for the token to be refreshed in the background after expiry.</p> 
  <div data-bind="template: { name: 'tests-template', data: { test: $root, filter:'refresh' } }">
   A list of services which enable silent authentication after the Implicit Grant signin 
   <a href="http://adodson.com/hello.js/#refresh-access-token">Refresh access_token</a> 
  </div> 
  <p>Unlike Implicit grant; Explicit grant may return the <code class="highlighter-rouge">refresh_token</code>. HelloJS honors the OAuth2 refresh_token, and will also request a new access_token once it has expired.</p> 
  <h3 id="bulletproof-requests">Bulletproof Requests</h3> 
  <p>A good way to design your app is to trigger requests through a user action, you can then test for a valid access token prior to making the API request with a potentially expired token.</p> 
  <div class="language-javascript highlighter-rouge">
   <pre class="highlight"><code><span class="kd">var</span> <span class="nx">google</span> <span class="o">=</span> <span class="nx">hello</span><span class="p">(</span><span class="s1">'google'</span><span class="p">);</span>
<span class="c1">// Set force to false, to avoid triggering the OAuth flow if there is an unexpired access_token available.</span>
<span class="nx">google</span><span class="p">.</span><span class="nx">login</span><span class="p">({</span><span class="na">force</span><span class="p">:</span> <span class="kc">false</span><span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">google</span><span class="p">.</span><span class="nx">api</span><span class="p">(</span><span class="s1">'me'</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">handler</span><span class="p">);</span>
<span class="p">});</span>
</code></pre> 
  </div> 
  <h2 id="promises-a">Promises A+</h2> 
  <p>The response from the async methods <code class="highlighter-rouge">hello.login</code>, <code class="highlighter-rouge">hello.logout</code> and <code class="highlighter-rouge">hello.api</code> return a thenable method which is Promise A+ compatible.</p> 
  <p>For a demo, or, if you’re bundling up the library from <code class="highlighter-rouge">src/*</code> files, then please checkout <a href="demos/promises.html">Promises</a></p> 
  <h2 id="browser-support">Browser Support</h2> 
  <p>HelloJS targets all modern browsers.</p> 
  <p>Polyfills are included in <code class="highlighter-rouge">src/hello.polyfill.js</code> this is to bring older browsers upto date. If you’re using the resources located in <code class="highlighter-rouge">dist/</code> this is already bundled in. But if you’re building from source you might like to first determine whether these polyfills are required, or if you’re already supporting them etc…</p> 
  <h2 id="phonegap-support">PhoneGap Support</h2> 
  <p>HelloJS can also be run on PhoneGap applications. Checkout the demo <a href="https://github.com/MrSwitch/hellojs-phonegap-demo">hellojs-phonegap-demo</a></p> 
  <h2 id="chrome-apps">Chrome Apps</h2> 
  <p><strong>Demo</strong> <a href="https://github.com/MrSwitch/hellojs-chromeapp-demo">hellojs-chromeapp-demo</a></p> 
  <p>HelloJS module <a href="./src/hello.chromeapp.js">src/hello.chromeapp.js</a> (also bundled in dist/*) shims the library to support the unique API’s of the Chrome App environment (or Chrome Extension).</p> 
  <h3 id="chrome-manifestjson-prerequisites">Chrome manifest.json prerequisites</h3> 
  <p>The <code class="highlighter-rouge">manifest.json</code> file must have the following permissions…</p> 
  <div class="language-json highlighter-rouge">
   <pre class="highlight"><code><span class="w"> </span><span class="s2">"permissions"</span><span class="err">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="s2">"identity"</span><span class="p">,</span><span class="w"> </span><span class="s2">"storage"</span><span class="p">,</span><span class="w"> </span><span class="s2">"https://*/"</span><span class="w"> </span><span class="p">]</span><span class="err">,</span><span class="w"> </span></code></pre> 
  </div> 
  <h1 id="thank-you">Thank you</h1> 
  <p>HelloJS relies on these fantastic services for it’s development and deployment, without which it would still be kicking around in a cave - not evolving very fast.</p> 
  <ul> 
   <li><a href="https://www.browserstack.com/">BrowserStack</a> for providing a means to test across multiple devices.</li> 
   <li><a href="https://github.com">Github</a> for maintaining the repo and issue tracking.</li> 
   <li><a href="https://travis-ci.org/">Travis</a> for providing fantastic continuous integration.</li> 
   <li>… and others I’ve forgotten to mention</li> 
  </ul> 
  <h2 id="can-i-contribute">Can I contribute?</h2> 
  <p>Yes, yes you can. In fact this isn’t really free software, it comes with bugs and documentation errors. Moreover it tracks third party API’s which just won’t sit still. And it’s intended for everyone to understand, so if you dont understand something then it’s not fulfilling it’s goal.</p> 
  <p>… otherwise give it a <a href="https://github.com/MrSwitch/hello.js">star</a>.</p> 
  <h3 id="changing-code">Changing Code?</h3> 
  <p>Ensure you setup and test your code on a variety of browsers.</p> 
  <div class="language-bash highlighter-rouge">
   <pre class="highlight"><code><span class="c"># Using Node.js on your dev environment</span>
<span class="c"># cd into the project root and install dev dependencies</span>
npm install -l

<span class="c"># Install the grunt CLI (if you haven't already)</span>
sudo npm install -g grunt-cli

<span class="c"># Run the tests</span>
grunt <span class="nb">test</span>

<span class="c"># Run the tests in the browser...</span>

<span class="c"># 1. In project root create local web server e.g.</span>
python -m SimpleHTTPServer

<span class="c"># 2. Then open the following URL in your web browser:</span>
<span class="c"># http://localhost:8000/tests/specs/index.html</span>
</code></pre> 
  </div> 
  <script src="assets/knockout/dist/knockout.js"></script> 
  <script src="assets/index.js"></script> 
  <script type="text/html" id="tests-template"></script> 
  <script>

// Initiate the library
hello.init(CLIENT_IDS_ALL, {
	redirect_uri: 'redirect.html',
	oauth_proxy: OAUTH_PROXY_URL
});

getText('assets/test_network.html', function(response) {
	document.getElementById('tests-template').text = response;
	// Knockout binding goes here
	ko.applyBindings(model);
});


</script> 
 </body>
</html>