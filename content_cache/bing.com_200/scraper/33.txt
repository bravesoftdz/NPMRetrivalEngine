<!doctype html>
<html dir="ltr" lang="en">
 <head> 
  <meta http-equiv="content-type" content="text/html; charset=utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta name="author" content="Creative &amp; Thriving"> 
  <meta name="description" content="Summary: A sample web scraping service demonstrating how to build a message driven application using RabbitMQ. The application consists of three parts: front..."> 
  <!-- Document Title
   	============================================= --> 
  <title>Microservices tutorial building a web-scraper with Java, Python and RabbitMQ (updated)</title> 
  <!-- Stylesheets
	============================================= --> 
  <link type="text/css" rel="stylesheet" href="/assets/main-a268baab02753008e87609943abecf7984b9d8b48938215a337c1f24c2f9eaeb.css"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <!--[if lt IE 9]>
		<script src="http://css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"></script>
	<![endif]--> 
 </head> 
 <body class="stretched"> 
  <!-- Document Wrapper
  	============================================= --> 
  <div id="wrapper" class="clearfix"> 
   <header id="header" class="sticky-style-2 semi-transparent"> 
    <div class="container clearfix"> 
     <!-- Logo
					============================================= 
				--> 
     <div id="logo" class="divcenter"> 
      <a href="/" class="standard-logo" data-dark-logo="/images/custom/logo-dark.png"><img src="/images/custom/logo.png" class="divcenter" alt=" Logo"></a> 
      <a href="/" class="retina-logo" data-dark-logo="/images/custom/logo-dark@2x.png"><img src="/images/custom/logo@2x.png" class="divcenter" alt="Logo"></a> 
     </div> 
    </div> 
    <div id="header-wrap"> 
     <!-- Primary Navigation
					============================================= --> 
     <nav id="primary-menu" class="style-2 center"> 
      <div class="container clearfix"> 
       <div id="primary-menu-trigger">
        <i class="icon-reorder"></i>
       </div> 
       <ul class="mobile-primary-menu"> 
        <li> <a href="/"> 
          <div>
           Home
          </div> </a> </li> 
        <li> <a href=" /work/ "> 
          <div>
           Work with me
          </div> </a> </li> 
        <li> <a href=" /about/ "> 
          <div>
           About &amp; contact
          </div> </a> </li> 
       </ul> 
       <ul> 
        <li> <a href="#" id="primary-menu-close" class=""><i class="icon-remove dark" style="color: #e43902;font-size: 1.5em;"></i></a> </li> 
        <li> <a href="/"> 
          <div>
           Home
          </div> </a> </li> 
        <li> 
         <form action="http://bernhardwenzel.us14.list-manage.com/subscribe/post?u=6100586ced1788d246fe50f77&amp;id=e4f7b0f5bf" method="post" class="navbar-form navbar-left nobottommargin" role="search"> 
          <div class="form-group"> 
           <input type="text" class="form-control" placeholder="Enter your email" results="0" name="EMAIL" autocomplete="off"> 
           <input type="submit" class="button button-3d button-small button-rounded button-yellow button-light" value="Get my newsletter"> 
          </div> 
         </form> </li> 
        <li> <a href=" /work/ "> 
          <div>
           Work with me
          </div> </a> 
         <!--a href="/#products">
						<div>Products</div>
					</a--> </li> 
        <li> <a href="/about/"> 
          <div>
           About &amp; Contact
          </div> </a> </li> 
        <li> <a href="/#articles"> 
          <div>
           Articles
          </div> </a> </li> 
       </ul> 
       <!-- Top Search
			============================================= --> 
       <div id="top-search"> 
        <a href="#" id="top-search-trigger"><i class="icon-search3"></i><i class="icon-line-cross"></i></a> 
        <form action="http://google.com/search" method="get"> 
         <input type="text" name="q" class="form-control" value="" placeholder="Type &amp; Hit Enter.."> 
         <input type="hidden" name="sitesearch" value="bernhardwenzel.com"> 
        </form> 
       </div> 
       <!-- #top-search end --> 
      </div> 
     </nav> 
     <!-- #primary-menu end --> 
    </div> 
   </header> 
   <!-- #header end --> 
   <!-- Content
  		============================================= --> 
   <section id="content"> 
    <div class="content-wrap"> 
     <div class="container clearfix"> 
      <div class="single-post nobottommargin"> 
       <!-- Single Post
    ============================================= --> 
       <div class="entry single-entry clearfix"> 
        <!-- Entry Title, Image, Meta
        ============================================= --> 
        <div class="clearfix bottommargin"> 
         <div class="col_two_fifth nobottommargin"> 
          <div class="entry-image nobottommargin"> 
           <img src="/images/posts/scraper-microservice/microservices-java-spring-python.png" alt="Blog Single"> 
          </div> 
         </div> 
         <div class="col_three_fifth nobottommargin col_last"> 
          <!-- .entry-image end --> 
          <div class="entry-title"> 
           <h1 class="nobottommargin">Microservices tutorial building a web-scraper with Java, Python and RabbitMQ (updated)</h1> 
          </div> 
          <!-- .entry-title end --> 
          <ul class="entry-meta"> 
           <li><i class="icon-calendar3"></i> Feb 2, 2017</li> 
          </ul> 
          <div class="clearfix"></div> 
          <ul class="entry-meta"> 
           <li> <i class="icon-bookmark"></i> tutorial software-engineering </li> 
          </ul> 
         </div> 
        </div> 
        <!-- Entry Content
        ============================================= --> 
        <div class="entry single-entry-content notopmargin"> 
         <div class="bottommargin"> 
          <div class="addthis_inline_share_toolbox"></div> 
         </div> 
         <p><strong><em>Summary:</em></strong> <em>A sample web scraping service demonstrating how to build a message driven application using RabbitMQ. The application consists of three parts: front-end developed in Knockout.js, that is communicating with a Spring Boot Java api, which in turn is offloading scraping tasks to a Python microservice.</em></p> 
         <p><strong>Dear reader, I have created a course based on this course. If you enjoy the tutorial, you’ll love the class</strong></p> 
         <div class="well bgcolor dark clearfix"> 
          <div class="center"> 
           <div class="heading-block"> 
            <h2>Let's develop a message-driven microservices application</h2> 
            <span>Learn how to build scalable applications using multiple frameworks and languages in one knowledge-packed crash course</span> 
           </div> 
           <div class="col_half sub-heading"> 
            <ul style="text-align: left"> 
             <li>Follow the <em>complete development cycle</em> when we go from idea to finished application.</li> 
             <li>Learn the essentials of single-page <em>frontends</em> (Knockout.js), REST based <em>backends</em> (Java-Spring) and <em>microservices</em> (Python, RabbitMQ) in <em>one compact course</em>.</li> 
             <li>Made for the <em>busy developer</em>. Ships with virtual machine image and tutor app so you can focus 100% on honing your coding skills.</li> 
            </ul> 
           </div> 
           <div class="col_half col_last"> 
            <a href="http://fullstackcourse.bernhardwenzel.com" onclick="clicky.goal('4297')"><img src="/images/microservices/course-video.png"></a> 
           </div> 
          </div> 
          <div style="text-align: center" class="divcenter clearfix"> 
           <a href="http://fullstackcourse.bernhardwenzel.com" class="button button-xlarge button-3d button-rounded button-amber button-light" onclick="clicky.goal('4298')"><i class="icon-hand-right"></i>Go to course</a> 
          </div> 
         </div> 
         <ul id="markdown-toc"> 
          <li><a href="#installation--run" id="markdown-toc-installation--run">Installation &amp; run</a> 
           <ul> 
            <li><a href="#using-vagrant" id="markdown-toc-using-vagrant">Using vagrant</a></li> 
            <li><a href="#running-the-application" id="markdown-toc-running-the-application">Running the application</a></li> 
           </ul> </li> 
          <li><a href="#application-architecture" id="markdown-toc-application-architecture">Application architecture</a></li> 
          <li><a href="#rabbitmq-in-5-minutes" id="markdown-toc-rabbitmq-in-5-minutes">RabbitMQ in 5 Minutes</a></li> 
          <li><a href="#spring-boot-java-api-backend" id="markdown-toc-spring-boot-java-api-backend">Spring Boot Java API backend</a> 
           <ul> 
            <li><a href="#spring-java-based-configuration-main-class" id="markdown-toc-spring-java-based-configuration-main-class">Spring Java-based configuration: main class</a></li> 
            <li><a href="#task-producer" id="markdown-toc-task-producer">Task producer</a></li> 
            <li><a href="#so-what-about-exchanges-queues-bindings" id="markdown-toc-so-what-about-exchanges-queues-bindings">So what about exchanges, queues, bindings??</a></li> 
            <li><a href="#scrapingresult-consumer" id="markdown-toc-scrapingresult-consumer">ScrapingResult consumer</a></li> 
            <li><a href="#json-message-converter-type" id="markdown-toc-json-message-converter-type">Json message converter type</a></li> 
            <li><a href="#testing-the-api-backend" id="markdown-toc-testing-the-api-backend">Testing the API backend</a></li> 
           </ul> </li> 
          <li><a href="#python-scraper" id="markdown-toc-python-scraper">Python scraper</a></li> 
          <li><a href="#frontend" id="markdown-toc-frontend">Frontend</a></li> 
          <li><a href="#the-bookmark-microservice-in-action" id="markdown-toc-the-bookmark-microservice-in-action">The bookmark microservice in action</a></li> 
          <li><a href="#source-code-on-github" id="markdown-toc-source-code-on-github">Source code on Github</a></li> 
          <li><a href="#the-video-course" id="markdown-toc-the-video-course">The video course</a></li> 
          <li><a href="#thanks-for-reading" id="markdown-toc-thanks-for-reading">Thanks for reading</a> 
           <ul> 
            <li><a href="#resources" id="markdown-toc-resources">Resources</a></li> 
           </ul> </li> 
         </ul> 
         <p>In this post, I’m going to show how to implement a message-driven application that consists of three independent parts. The application is a web scraping service that takes an URL and returns a text summary of the site.</p> 
         <!--more--> 
         <p>This is an example that shows one advantage of the microservices<sup id="fnref:microservices"><a href="#fn:microservices" class="footnote">1</a></sup> pattern: it is easy to implement an independent part of an application in a programming language that is most suitable for the task at hand. It so happens that for Python exists a good website summary library, which we are going to use to extract a short summary of a website. The main backend functionality, however, is implemented in Java using Spring Boot (personally, I prefer using the JVM as the core of any application).</p> 
         <p>Tools and frameworks I use are:</p> 
         <ul> 
          <li>Spring Boot: REST, JPA, AMQP</li> 
          <li>Gradle</li> 
          <li>Java 8</li> 
          <li>Python with Pika and sumy</li> 
          <li>RabbitMQ</li> 
          <li>Postgres</li> 
          <li>Vagrant</li> 
          <li>Knockout.js, Bootstrap, Node</li> 
         </ul> 
         <p>This project is an enhancement of a previous project that implemented a bookmark web app: <a href="/articles/spring-boot-rapid-prototyping/">Rapid prototyping with Spring Data Rest and Knockout.js</a>, by adding scraping functionality to the bookmark service. Because of this, I won’t repeat what I have already explained there (mainly the REST API, JPA persistence, CORS and the details of the knockout.js front-end). If interested, have a look at the post.</p> 
         <p>As usual, the project is available on Github<sup id="fnref:repo"><a href="#fn:repo" class="footnote">2</a></sup>.</p> 
         <h2 id="installation--run">Installation &amp; run</h2> 
         <h3 id="using-vagrant">Using vagrant</h3> 
         <p>I’m using Vagrant to install Postgres and RabbitMQ on a virtual machine. All you need to do is <code>vagrant up</code> (requires Virtualbox installed and some hard drive space for the image).</p> 
         <p>Note: if you want to get rid of the vagrant virtual machine, just run <code>vagrant destroy</code>.</p> 
         <p><strong>Note</strong>: to make things easier, in <code>application.properties</code> the line <code>spring.jpa.hibernate.ddl-auto=create</code> allows us to automatically create the tables when starting up. However, this means <em>all tables get erased with each new start</em>. Change the line to <code>spring.jpa.hibernate.ddl-auto=validate</code> (after you have started up the backend at least once) to avoid data loss.</p> 
         <h3 id="running-the-application">Running the application</h3> 
         <p>To run the application, clone/fork the <a href="https://github.com/BernhardWenzel/scraping-microservice-java-python-rabbitmq">repository</a>.</p> 
         <p>The project has three parts that are independently deployed and executed:</p> 
         <pre><code>scraping-microservice-java-python-rabbitmq
??? java-api-backend
??? knockout-frontend
??? python-scraping-service
Vagrantfile
</code></pre> 
         <p>Start vagrant, and then each service separately:</p> 
         <pre><code>$ cd scraping-microservice-java-python-rabbitmq

scraping-microservice-java-python-rabbitmq$ vagrant up    
scraping-microservice-java-python-rabbitmq$ cd java-api-backend

java-api-backend$ gradle run
java-api-backend$ cd ../knockout-frontend

knockout-frontend$ python -m SimpleHTTPServer 8090
knockout-frontend$ cd ../python-scraping-service

python-scraping-service$ pip install -r requirements.txt
python-scraping-service$ python worker.py
</code></pre> 
         <p>Note: <code>vagrant up</code> takes a while the first time it’s executed. <code>pip install -r requirements.txt</code> is preferably done in a virtualenv<sup id="fnref:virtualenv"><a href="#fn:virtualenv" class="footnote">3</a></sup>.</p> 
         <p>Also, for this post I’m using Python 2.</p> 
         <h2 id="application-architecture">Application architecture</h2> 
         <p>The following picture depicts how the main parts work together:</p> 
         <p><img src="/images/posts/scraper-microservice/scraper-microservice.jpg" alt="Webscraper architecture"></p> 
         <h2 id="rabbitmq-in-5-minutes">RabbitMQ in 5 Minutes</h2> 
         <p><strong>RabbitMQ</strong> is an open source “message broker” software that implements the Advanced Message Queuing Protocol (AMQP)<sup id="fnref:rabbitmq-wiki"><a href="#fn:rabbitmq-wiki" class="footnote">4</a></sup>. The basic elements of AMQP are (quoting from RabbitMQ’s official documentation<sup id="fnref:rabbitmq"><a href="#fn:rabbitmq" class="footnote">5</a></sup>):</p> 
         <ul> 
          <li>The <strong>producer</strong> is the sender of a message.</li> 
          <li>The <strong>consumer</strong> is the receiver of a message. A consumer mostly waits to receive messages.</li> 
          <li>A <strong>queue</strong> is the name for a mailbox. It lives inside RabbitMQ. Although messages flow through RabbitMQ and your applications, they can be stored only inside a <em>queue</em>. A <em>queue</em> is not bound by any limits, it can store as many messages as you like ? it’s essentially an infinite buffer. Many <em>producers</em> can send messages that go to one queue, many <em>consumers</em> can try to receive data from one <em>queue</em>.</li> 
          <li>An <strong>exchange</strong>. The core idea in the messaging model in RabbitMQ is that the producer never sends any messages directly to a queue. Instead, the producer can only send messages to an <em>exchange</em>. It is a very simple thing: on one side it receives messages from producers and the other side it pushes them to queues. How it does this is defined by the <strong><em>exchange type</em></strong>. There are a few available: <strong><em>direct, topic, headers</em></strong> and <strong><em>fanout</em></strong>.</li> 
          <li>A <strong>binding</strong> tells the exchange to what queue it should send messages to. Bindings can take an extra routing key parameter, the <strong><em>binding key</em></strong>. The meaning of a binding key depends on the exchange type. The fanout exchange, for example, simply ignores its value. A direct exchange a message goes to the queues whose binding key exactly matches the routing key of the message.</li> 
          <li>Publishing a message in RabbitMQ therefore takes a <strong><em>routing key</em></strong> that an exchange uses to match corresponding queues.</li> 
         </ul> 
         <p>Our application is going to use one special exchange that simplifies message routing: the <strong><em>default exchange</em></strong>. This is a nameless exchange that automatically routes messages to queues where the routing key of the message matches the binding</p> 
         <h2 id="spring-boot-java-api-backend">Spring Boot Java API backend</h2> 
         <p>We start with the main api that the front-end communicates with and that is responsible for storing bookmarks and sending new tasks to the scraping service.</p> 
         <p>(As mentioned, I’m only going to explain how to implement RabbitMQ messaging in Spring. If you are interested to learn about the REST API and database (JPA) persistence part, I have blogged about <a href="/blog/2014/10/10/spring-boot-rest-knockout-bookmarks">how to rapidly develop a REST api using Spring data</a>).</p> 
         <p>Spring has a boot starter module available for RabbitMQ<sup id="fnref:spring-rabbitmq"><a href="#fn:spring-rabbitmq" class="footnote">6</a></sup> <code>org.springframework.boot:spring-boot-starter-amqp</code>, which we add to our dependencies.</p> 
         <h3 id="spring-java-based-configuration-main-class">Spring Java-based configuration: main class</h3> 
         <p>As usual for any Spring Boot application, most configurations are automatically setup depending on what dependencies are on the class path and what beans are found.</p> 
         <p>Every Spring boot application starts with <code>@SpringBootApplication</code> annotation, which is a convenience annotation that adds all of the following<sup id="fnref:spring-boot"><a href="#fn:spring-boot" class="footnote">7</a></sup>:</p> 
         <ul> 
          <li><code>@Configuration</code> tags the class as a source of bean definitions for the application context.</li> 
          <li><code>@EnableAutoConfiguration</code> tells Spring Boot to start adding beans based on classpath settings, other beans, and various property settings.</li> 
          <li><code>@ComponentScan</code> tells Spring to look for other components, configurations, and services in the same and sub-packages (because of that, it is recommended to put the main application class in the root package).</li> 
          <li>Depending on project dependency and bean definitions, further annotations will be added (e.g. <code>@EnableWebMvc</code> for a Spring MVC app when <code>spring-webmvc</code> is on the classpath).</li> 
         </ul> 
         <p>The starting point of the backend API is, therefore, the base class with our <code>main</code> method:</p> 
         <figure> 
          <figcaption>
           src/main/java/scraper/api/ScraperApiApplication.java
          </figcaption> 
          <figure class="highlight">
           <pre><code class="language-java" data-lang="java"><span></span><span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScraperApiApplication</span>
<span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="n">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ScraperApiApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// ... more bean definitions </span>
<span class="o">}</span></code></pre>
          </figure> 
         </figure> 
         <p>From there, Spring searches for further <code>@Configuration</code> annotated classes.</p> 
         <p>(By the way, there is no XML configuration to be found whatsoever in this project. Spring Boot prefers (and I too) Java-based configuration<sup id="fnref:spring-java-based"><a href="#fn:spring-java-based" class="footnote">8</a></sup>, even though it is possible to mix the two.)</p> 
         <h3 id="task-producer">Task producer</h3> 
         <p>As shown in the architecture picture above, the API backend is a <em>producer</em> of tasks that the scraper is <em>consuming</em>. Let’s start with the <strong>producer configuration</strong>. It extends the <code>RabbitMqConfiguration</code> which we are going to re-use later for the consumer part:</p> 
         <figure> 
          <figcaption>
           src/main/java/scraper/api/amqp/TaskProducerConfiguration.java
          </figcaption> 
          <figure class="highlight">
           <pre><code class="language-java" data-lang="java"><span></span><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskProducerConfiguration</span> <span class="kd">extends</span> <span class="n">RabbitMqConfiguration</span>
<span class="o">{</span>
    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">tasksQueue</span> <span class="o">=</span> <span class="s">"tasks.queue"</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">RabbitTemplate</span> <span class="nf">rabbitTemplate</span><span class="o">()</span>
    <span class="o">{</span>
        <span class="n">RabbitTemplate</span> <span class="n">template</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RabbitTemplate</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">());</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setRoutingKey</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">tasksQueue</span><span class="o">);</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setQueue</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">tasksQueue</span><span class="o">);</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setMessageConverter</span><span class="o">(</span><span class="n">jsonMessageConverter</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">template</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">Queue</span> <span class="nf">tasksQueue</span><span class="o">()</span>
    <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">tasksQueue</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RabbitMqConfiguration</span>
<span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">ConnectionFactory</span> <span class="nf">connectionFactory</span><span class="o">()</span>
    <span class="o">{</span>
        <span class="n">CachingConnectionFactory</span> <span class="n">connectionFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CachingConnectionFactory</span><span class="o">(</span><span class="s">"192.168.22.10"</span><span class="o">);</span>
        <span class="n">connectionFactory</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"user"</span><span class="o">);</span>
        <span class="n">connectionFactory</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="s">"password"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">connectionFactory</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">AmqpAdmin</span> <span class="nf">amqpAdmin</span><span class="o">()</span>
    <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">RabbitAdmin</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">());</span>
    <span class="o">}</span>


    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">MessageConverter</span> <span class="nf">jsonMessageConverter</span><span class="o">()</span>
    <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">Jackson2JsonMessageConverter</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
          </figure> 
         </figure> 
         <p>We also define a <code>MessageConverter</code> and return a JSON based converter. With this, the messages we send to the queues are automatically converted to <strong>Json messages</strong>. This allows us to exchange simple Java “POJOs” (that are serialized into JSON) between our services.</p> 
         <p>The actual sending of messages is done with the configured <code>RabbitTemplate</code>. We implement a simple class that does the sending:</p> 
         <figure> 
          <figcaption>
           src/main/java/scraper/api/amqp/TaskProducer.java
          </figcaption> 
          <figure class="highlight">
           <pre><code class="language-java" data-lang="java"><span></span><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TaskProducer</span>
<span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">TaskProducerConfiguration</span> <span class="n">taskProducerConfiguration</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sendNewTask</span><span class="o">(</span><span class="n">TaskMessage</span> <span class="n">taskMessage</span><span class="o">)</span>
    <span class="o">{</span>       
    <span class="n">taskProducerConfiguration</span><span class="o">.</span><span class="na">rabbitTemplate</span><span class="o">()</span>
                <span class="o">.</span><span class="na">convertAndSend</span><span class="o">(</span><span class="n">taskProducerConfiguration</span><span class="o">.</span><span class="na">tasksQueue</span><span class="o">,</span> <span class="n">taskMessage</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span></code></pre>
          </figure> 
         </figure> 
         <p>Now you might be wondering:</p> 
         <h3 id="so-what-about-exchanges-queues-bindings">So what about exchanges, queues, bindings??</h3> 
         <p>It’s all been defined already, mostly implicitly. We don’t explicitly define an <em>exchange</em>, so per default, we are using the <code>defaultDirectExchange</code> (see above). Same with <em>binding</em>, as we don’t say anything the default binding is being used (matching router key with binding key). We only define the <em>queue</em>. In <code>convertAndSend(taskProducerConfiguration.tasksQueue, taskMessage)</code> we <strong>use the name of the queue as routing key</strong> so the default direct exchange sends the message to the queue of the same name. That’s all we have to configure to make messaging work.</p> 
         <h3 id="scrapingresult-consumer">ScrapingResult consumer</h3> 
         <p>Looking back at the architecture picture, we see that the api is also a <em>consumer</em> of the ScrapingResult queue. Again we base the consumer configuration on <code>RabbitMqConfiguration</code></p> 
         <figure> 
          <figcaption>
           src/main/java/scraper/api/amqp/ScrapingResultConsumerConfiguration.java
          </figcaption> 
          <figure class="highlight">
           <pre><code class="language-java" data-lang="java"><span></span><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScrapingResultConsumerConfiguration</span> <span class="kd">extends</span> <span class="n">RabbitMqConfiguration</span>
<span class="o">{</span>
    <span class="kd">protected</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">scrapingResultQueue</span> <span class="o">=</span> <span class="s">"scrapingresult.queue"</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">ScrapingResultHandler</span> <span class="n">scrapingResultHandler</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">RabbitTemplate</span> <span class="nf">rabbitTemplate</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">RabbitTemplate</span> <span class="n">template</span> <span class="o">=</span> <span class="k">new</span> <span class="n">RabbitTemplate</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">());</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setRoutingKey</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">scrapingResultQueue</span><span class="o">);</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setQueue</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">scrapingResultQueue</span><span class="o">);</span>
        <span class="n">template</span><span class="o">.</span><span class="na">setMessageConverter</span><span class="o">(</span><span class="n">jsonMessageConverter</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">template</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">Queue</span> <span class="nf">scrapingResultQueue</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">Queue</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">scrapingResultQueue</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">SimpleMessageListenerContainer</span> <span class="nf">listenerContainer</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">SimpleMessageListenerContainer</span> <span class="n">container</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SimpleMessageListenerContainer</span><span class="o">();</span>
        <span class="n">container</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">connectionFactory</span><span class="o">());</span>
        <span class="n">container</span><span class="o">.</span><span class="na">setQueueNames</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">scrapingResultQueue</span><span class="o">);</span>
        <span class="n">container</span><span class="o">.</span><span class="na">setMessageListener</span><span class="o">(</span><span class="n">messageListenerAdapter</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">container</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">MessageListenerAdapter</span> <span class="nf">messageListenerAdapter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">MessageListenerAdapter</span><span class="o">(</span><span class="n">scrapingResultHandler</span><span class="o">,</span> <span class="n">jsonMessageConverter</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
          </figure> 
         </figure> 
         <p>The template and queue definition is almost the same except a different name. A consumer is not actively sending something but waiting to receive a message. Therefore, we define <strong>message listener</strong>. To do that in Spring, we define a <code>MessageListenerAdapter</code> bean that we add to a <code>SimpleMessageListenerContainer</code>. The actual listener implementation is again a simple Java POJO class:</p> 
         <figure> 
          <figcaption>
           src/main/java/scraper/api/amqp/ScrapingResultHandler.java
          </figcaption> 
          <figure class="highlight">
           <pre><code class="language-java" data-lang="java"><span></span><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ScrapingResultHandler</span>
<span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleMessage</span><span class="o">(</span><span class="n">ScrapingResultMessage</span> <span class="n">scrapingResultMessage</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Received summary: "</span> <span class="o">+</span> <span class="n">scrapingResultMessage</span><span class="o">.</span><span class="na">getSummary</span><span class="o">());</span>
        <span class="kd">final</span> <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">scrapingResultMessage</span><span class="o">.</span><span class="na">getUrl</span><span class="o">();</span>
        <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Bookmark</span><span class="o">&gt;</span> <span class="n">bookmarks</span> <span class="o">=</span> <span class="n">bookmarkRepository</span><span class="o">.</span><span class="na">findByUrl</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">bookmarks</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
        <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"No bookmark of url: "</span> <span class="o">+</span> <span class="n">url</span> <span class="o">+</span> <span class="s">" found."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">else</span>
        <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Bookmark</span> <span class="n">bookmark</span> <span class="o">:</span> <span class="n">bookmarks</span><span class="o">)</span>
            <span class="o">{</span>
                <span class="n">bookmark</span><span class="o">.</span><span class="na">setSummary</span><span class="o">(</span><span class="n">scrapingResultMessage</span><span class="o">.</span><span class="na">getSummary</span><span class="o">());</span>
                <span class="n">bookmarkRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">bookmarks</span><span class="o">);</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"updated bookmark: "</span> <span class="o">+</span> <span class="n">url</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre>
          </figure> 
         </figure> 
         <p>In that listener, we get the summary from the message and update the bookmarks for that URL.</p> 
         <h3 id="json-message-converter-type">Json message converter type</h3> 
         <p>One question remains: how does the JSON message converter know that it has to deserialize the message it received from RabbitMQ into <code>scraper.api.amqp.ScrapingResultMessage</code>? This is normally accomplished by setting a header of the message: <code>__TypeId__ = "scraper.api.amqp.ScrapingResultMessage"</code>. This is fine if only Java services communicate with each other. But in our case we want completely independent parts, the Python scraper should not know anything about how the Java API backend consumes messages. For this, we override the default behavior by providing a <code>ClassMapper</code> in the RabbitMQ configuration:</p> 
         <figure> 
          <figcaption>
           src/main/java/scraper/api/amqp/RabbitMqConfiguration.java
          </figcaption> 
          <figure class="highlight">
           <pre><code class="language-java" data-lang="java"><span></span>    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">MessageConverter</span> <span class="nf">jsonMessageConverter</span><span class="o">()</span>
    <span class="o">{</span>
        <span class="kd">final</span> <span class="n">Jackson2JsonMessageConverter</span> <span class="n">converter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jackson2JsonMessageConverter</span><span class="o">();</span>
        <span class="n">converter</span><span class="o">.</span><span class="na">setClassMapper</span><span class="o">(</span><span class="n">classMapper</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">converter</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">DefaultClassMapper</span> <span class="nf">classMapper</span><span class="o">()</span>
    <span class="o">{</span>
        <span class="n">DefaultClassMapper</span> <span class="n">typeMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultClassMapper</span><span class="o">();</span>
        <span class="n">typeMapper</span><span class="o">.</span><span class="na">setDefaultType</span><span class="o">(</span><span class="n">ScrapingResultMessage</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">typeMapper</span><span class="o">;</span>
    <span class="o">}</span></code></pre>
          </figure> 
         </figure> 
         <p>With <code>typeMapper.setDefaultType(ScrapingResultMessage.class);</code> we tell Spring that all messages we expect to consume are of type <code>scraper.api.amqp.ScrapingResultMessage</code>. We set this to be true for the whole application because that is all we consume. Later we might want to move that into a specific consumer configuration (e.g. <code>ScrapingResultConsumerConfiguration</code>).</p> 
         <h3 id="testing-the-api-backend">Testing the API backend</h3> 
         <p>That’s all for the Java API part. Cd into the project and run <code>gradle run</code>. The api connects to to Rabbit Mq and Postgres. Test the api by sending JSON requests to it (as explained in the <a href="/blog/2014/10/10/spring-boot-rest-knockout-bookmarks">previous post</a>. Adding a bookmark will also send a new message to RabbitMQ.</p> 
         <pre><code>java-api-backend$ http :8080/
{
    "_embedded": {}, 
    "_links": {
        "bookmarks": {
            "href": "http://localhost:8080/bookmarks", 
            "templated": false
        }, 
        "profile": {
            "href": "http://localhost:8080/alps", 
            "templated": false
        }
    }
}

java-api-backend$ http POST :8080/bookmarks url=www.yahoo.com
HTTP/1.1 201 Created

java-api-backend$ http :8080/bookmarks
{
    "_embedded": {
        "bookmarks": [
            {
                "_embedded": {}, 
                "_links": {
                    "self": {
                        "href": "http://localhost:8080/bookmarks/1", 
                        "templated": false
                    }
                }, 
                "created": "2015-08-06T14:00:08.574+0000", 
                "summary": null, 
                "url": "www.yahoo.com"
            }
    ...
}
</code></pre> 
         <p>The RabbitMQ web admin interface is available at: <a href="http://192.168.22.10:15672/">http://192.168.22.10:15672/</a>. Login with “root” “root” and under “Queues” &gt; “Get messages” you can query the new message:</p> 
         <p><img src="/images/posts/scraper-microservice/rabbitmq-message.jpg" alt="Message in RabbitMQ"></p> 
         <p>(note the <code>__TypeId__</code> header, see above).</p> 
         <p>We can also test the consumer. Create a message in RabbitMQ web admin. Select the queue and select “publish message”. Enter following:</p> 
         <p><img src="/images/posts/scraper-microservice/rabbitmq-send-scraping-message.jpg" alt="Publish message in RabbitMQ"></p> 
         <p>The log of the backend will show something like that:</p> 
         <pre><code>Received unit: a search engine
...
Hibernate: update bookmark set created=?, summary=?, url=? where id=?
updated bookmark: www.yahoo.com
</code></pre> 
         <p>Using REST api:</p> 
         <pre><code>$ http :8080/bookmarks
{
    "_embedded": {
        "bookmarks": [
            {
                "_embedded": {}, 
                "_links": {
                    "self": {
                        "href": "http://localhost:8080/bookmarks/1", 
                        "templated": false
                    }
                }, 
                "created": "2015-08-07T08:41:45.458+0000", 
                "summary": "a search engine", 
                "url": "www.yahoo.com"
            }
        ]
    }, 
    "_links": {
        "search": {
            "href": "http://localhost:8080/bookmarks/search", 
            "templated": false
        }
    }
}
</code></pre> 
         <p>Now let’s get polyglot and continue with the Python scraper service.</p> 
         <h2 id="python-scraper">Python scraper</h2> 
         <p>The RabbitMQ part is simpler to implement in Python. The RabbitMQ home page has a nice set of tutorials if you want to learn more. We use <a href="https://pika.readthedocs.org/">Pika</a> as our binding to RabbitMQ.</p> 
         <figure> 
          <figcaption>
           worker.py
          </figcaption> 
          <figure class="highlight">
           <pre><code class="language-python" data-lang="python"><span></span><span class="kn">import</span> <span class="nn">pika</span>
<span class="kn">import</span> <span class="nn">json</span>
<span class="kn">from</span> <span class="nn">scraper</span> <span class="kn">import</span> <span class="n">Scraper</span>

<span class="n">credentials</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">PlainCredentials</span><span class="p">(</span><span class="s2">"user"</span><span class="p">,</span> <span class="s2">"password"</span><span class="p">)</span>
<span class="n">parameters</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">ConnectionParameters</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s1">'192.168.22.10'</span><span class="p">,</span> <span class="n">credentials</span><span class="o">=</span><span class="n">credentials</span><span class="p">)</span>

<span class="n">connection</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BlockingConnection</span><span class="p">(</span><span class="n">parameters</span><span class="p">)</span>
<span class="n">channel</span> <span class="o">=</span> <span class="n">connection</span><span class="o">.</span><span class="n">channel</span><span class="p">()</span>
<span class="n">tasks_queue</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span><span class="o">=</span><span class="s1">'tasks.queue'</span><span class="p">,</span> <span class="n">durable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">scraping_result_queue</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="n">queue_declare</span><span class="p">(</span><span class="n">queue</span><span class="o">=</span><span class="s1">'scrapingresult.queue'</span><span class="p">,</span> <span class="n">durable</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">print</span> <span class="s1">' [*] Waiting for tasks. To exit press CTRL+C'</span>

<span class="k">def</span> <span class="nf">publish_result</span><span class="p">(</span><span class="n">scraping_result</span><span class="p">):</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">scraping_result</span><span class="o">.</span><span class="vm">__dict__</span><span class="p">)</span>
    <span class="n">properties</span> <span class="o">=</span> <span class="n">pika</span><span class="o">.</span><span class="n">BasicProperties</span><span class="p">(</span><span class="n">content_type</span><span class="o">=</span><span class="s2">"application/json"</span><span class="p">)</span>
    <span class="n">channel</span><span class="o">.</span><span class="n">basic_publish</span><span class="p">(</span><span class="n">exchange</span><span class="o">=</span><span class="s1">''</span><span class="p">,</span> <span class="n">routing_key</span><span class="o">=</span><span class="s1">'scrapingresult.queue'</span><span class="p">,</span> <span class="n">body</span><span class="o">=</span><span class="n">j</span><span class="p">,</span> <span class="n">properties</span><span class="o">=</span><span class="n">properties</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="n">method</span><span class="p">,</span> <span class="n">properties</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
    <span class="n">url</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">loads</span><span class="p">(</span><span class="n">body</span><span class="p">)[</span><span class="s1">'url'</span><span class="p">]</span>
    <span class="n">scraper</span> <span class="o">=</span> <span class="n">Scraper</span><span class="p">()</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">scraper</span><span class="o">.</span><span class="n">scrape</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">publish_result</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

<span class="n">channel</span><span class="o">.</span><span class="n">basic_consume</span><span class="p">(</span><span class="n">callback</span><span class="p">,</span> <span class="n">queue</span><span class="o">=</span><span class="s1">'tasks.queue'</span><span class="p">,</span> <span class="n">no_ack</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">channel</span><span class="o">.</span><span class="n">start_consuming</span><span class="p">()</span></code></pre>
          </figure> 
         </figure> 
         <p>We create the two queues and wait for the task queue to send us a message to consume. The <code>callback</code> method receives the JSON body which we deserialize using <code>json</code> package. We send the url to our scraper and produce a message in the <code>scrapingresult.queue</code> queue.</p> 
         <p>For the actual scraping of a website’s summary, we use <a href="https://github.com/miso-belica/sumy">https://github.com/miso-belica/sumy</a> library. Please see their docs (especially as it requires to have nltk installed on your system).</p> 
         <figure> 
          <figcaption>
           scraper.py
          </figcaption> 
          <figure class="highlight">
           <pre><code class="language-python" data-lang="python"><span></span><span class="k">class</span> <span class="nc">ScrapingResult</span><span class="p">:</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">summary</span> <span class="o">=</span> <span class="bp">None</span>

<span class="n">LANGUAGE</span> <span class="o">=</span> <span class="s2">"english"</span>
<span class="n">SENTENCES_COUNT</span> <span class="o">=</span> <span class="mi">2</span>

<span class="k">class</span> <span class="nc">Scraper</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">scrape</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">url</span><span class="p">):</span>
        <span class="n">complete_url</span> <span class="o">=</span> <span class="n">url</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># get summary</span>
            <span class="k">print</span> <span class="s2">"Retrieving page summary of </span><span class="si">%s</span><span class="s2">... "</span> <span class="o">%</span> <span class="n">url</span>

            <span class="n">parser</span> <span class="o">=</span> <span class="n">HtmlParser</span><span class="o">.</span><span class="n">from_url</span><span class="p">(</span><span class="n">complete_url</span><span class="p">,</span> <span class="n">Tokenizer</span><span class="p">(</span><span class="n">LANGUAGE</span><span class="p">))</span>
            <span class="n">stemmer</span> <span class="o">=</span> <span class="n">Stemmer</span><span class="p">(</span><span class="n">LANGUAGE</span><span class="p">)</span>

            <span class="n">summarizer</span> <span class="o">=</span> <span class="n">Summarizer</span><span class="p">(</span><span class="n">stemmer</span><span class="p">)</span>
            <span class="n">summarizer</span><span class="o">.</span><span class="n">stop_words</span> <span class="o">=</span> <span class="n">get_stop_words</span><span class="p">(</span><span class="n">LANGUAGE</span><span class="p">)</span>

            <span class="n">url_summary</span> <span class="o">=</span> <span class="s1">''</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">sentence</span><span class="p">)</span> <span class="k">for</span> <span class="n">sentence</span> <span class="ow">in</span> <span class="n">summarizer</span><span class="p">(</span><span class="n">parser</span><span class="o">.</span><span class="n">document</span><span class="p">,</span> <span class="n">SENTENCES_COUNT</span><span class="p">))</span>

        <span class="k">except</span> <span class="ne">Exception</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">url_summary</span> <span class="o">=</span> <span class="s2">"Could not scrape summary. Reason: </span><span class="si">%s</span><span class="s2">"</span> <span class="o">%</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>

        <span class="k">print</span> <span class="s2">"Done: </span><span class="si">%s</span><span class="s2"> = </span><span class="si">%s</span><span class="s2">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">url_summary</span><span class="p">)</span>

        <span class="c1"># create scraping result</span>
        <span class="n">scraping_result</span> <span class="o">=</span> <span class="n">ScrapingResult</span><span class="p">()</span>

        <span class="n">scraping_result</span><span class="o">.</span><span class="n">summary</span> <span class="o">=</span> <span class="n">url_summary</span>
        <span class="n">scraping_result</span><span class="o">.</span><span class="n">url</span> <span class="o">=</span> <span class="n">url</span>

        <span class="k">return</span> <span class="n">scraping_result</span></code></pre>
          </figure> 
         </figure> 
         <p>The scraper is not doing much except using the sumy library and returning the result.</p> 
         <p>To run the python scraper, install <code>requirements.txt</code> (preferably in a virtualenv) and then simply run <code>worker.py</code>:</p> 
         <pre><code>(venv)python-scraping-service$ python worker.py 
</code></pre> 
         <h2 id="frontend">Frontend</h2> 
         <p>For the frontend we re-use the Knockout.js project from the <a href="/blog/2014/10/10/spring-boot-rest-knockout-bookmarks">previous post</a> and basically just add a new field for the summary part.</p> 
         <p>To start the frontend we use the <code>SimpleHTTPServer</code> from Python. We need to choose another port as <code>8080</code> is already taken by the backend API.</p> 
         <pre><code>knockout-frontend$  python -m SimpleHTTPServer 8090
</code></pre> 
         <h2 id="the-bookmark-microservice-in-action">The bookmark microservice in action</h2> 
         <p>Now we can add bookmarks and observe the processing in the logs:</p> 
         <p><img src="/images/posts/scraper-microservice/bookmark-1.jpg" alt="Adding a bookmark on the web site"></p> 
         <p>Backend log:</p> 
         <pre><code>Hibernate: select nextval ('hibernate_sequence')
Hibernate: insert into bookmark (created, note, summary, url, id) values (?, ?, ?, ?, ?)
</code></pre> 
         <p>That sends a message to the queue that gets picked up and processed by the scraper:</p> 
         <pre><code>Retrieving page summary of http://www.clojure.org ... 
Done: http://www.clojure.org  = It is designed to be a general-purpose language, ...
</code></pre> 
         <p>On the backend, the listener receives the result message and updates the bookmark</p> 
         <pre><code>Hibernate: select bookmark0_.id as id1_0_, bookmark0_.created as created2_0_, bookmark0_.note as note3_0_, bookmark0_.summary as summary4_0_, bookmark0_.url as url5_0_ from bookmark bookmark0_
Received summary: It is designed to be a general-purpose language....
...
Hibernate: update bookmark set created=?, note=?, summary=?, url=? where id=?
updated bookmark: http://www.clojure.org 
</code></pre> 
         <p>On the frontend we refresh the website and get:</p> 
         <p><img src="/images/posts/scraper-microservice/bookmark-2.jpg" alt="Updated bookmark on the web site"></p> 
         <p>(In a real-world application, we would need to push the updated info to the client (using web sockets for example). For our prototype we skip this (this post has already become quite long) and require the user to hit refresh.)</p> 
         <h2 id="source-code-on-github">Source code on Github</h2> 
         <p>Check out the source code on <a href="https://github.com/BernhardWenzel/scraping-microservice-java-python-rabbitmq">Github</a>.</p> 
         <h2 id="the-video-course">The video course</h2> 
         <div class="well bgcolor dark clearfix"> 
          <div class="center"> 
           <div class="heading-block"> 
            <h2>Let's develop a message-driven microservices application</h2> 
            <span>Learn how to build scalable applications using multiple frameworks and languages in one knowledge-packed crash course</span> 
           </div> 
           <div class="col_half sub-heading"> 
            <ul style="text-align: left"> 
             <li>Follow the <em>complete development cycle</em> when we go from idea to finished application.</li> 
             <li>Learn the essentials of single-page <em>frontends</em> (Knockout.js), REST based <em>backends</em> (Java-Spring) and <em>microservices</em> (Python, RabbitMQ) in <em>one compact course</em>.</li> 
             <li>Made for the <em>busy developer</em>. Ships with virtual machine image and tutor app so you can focus 100% on honing your coding skills.</li> 
            </ul> 
           </div> 
           <div class="col_half col_last"> 
            <a href="http://fullstackcourse.bernhardwenzel.com" onclick="clicky.goal('4229')"><img src="/images/microservices/course-video.png"></a> 
           </div> 
          </div> 
          <div style="text-align: center" class="divcenter clearfix"> 
           <a href="http://fullstackcourse.bernhardwenzel.com" class="button button-xlarge button-3d button-rounded button-amber button-light" onclick="clicky.goal('4230')"><i class="icon-hand-right"></i>Go to course</a> 
          </div> 
         </div> 
         <div class="clearfix"></div> 
         <h2 id="thanks-for-reading">Thanks for reading</h2> 
         <p>I hope you enjoyed reading this post. If you have comments, questions or found a bug please let me know, either in the comments below or <a href="/about">contact me directly</a>.</p> 
         <h3 id="resources">Resources</h3> 
         <div class="footnotes"> 
          <ol> 
           <li id="fn:microservices"> <p><a href="https://en.wikipedia.org/wiki/Microservices">Microservices wikipedia</a>&nbsp;<a href="#fnref:microservices" class="reversefootnote">?</a></p> </li> 
           <li id="fn:repo"> <p><a href="https://github.com/BernhardWenzel/scraping-microservice-java-python-rabbitmq">Source code on Github</a>.&nbsp;<a href="#fnref:repo" class="reversefootnote">?</a></p> </li> 
           <li id="fn:virtualenv"> <p><a href="http://docs.python-guide.org/en/latest/dev/virtualenvs/">Virtualenv in Python</a>&nbsp;<a href="#fnref:virtualenv" class="reversefootnote">?</a></p> </li> 
           <li id="fn:rabbitmq-wiki"> <p><a href="https://en.wikipedia.org/wiki/RabbitMQ">RabbitMQ on Wikipedia</a>&nbsp;<a href="#fnref:rabbitmq-wiki" class="reversefootnote">?</a></p> </li> 
           <li id="fn:rabbitmq"> <p><a href="https://www.rabbitmq.com/getstarted.html">RabbitMQ tutorials</a>&nbsp;<a href="#fnref:rabbitmq" class="reversefootnote">?</a></p> </li> 
           <li id="fn:spring-rabbitmq"> <p><a href="https://spring.io/guides/gs/messaging-rabbitmq/">Spring Boot RabbitMQ</a>&nbsp;<a href="#fnref:spring-rabbitmq" class="reversefootnote">?</a></p> </li> 
           <li id="fn:spring-boot"> <p><a href="https://spring.io/guides/gs/spring-boot/">Spring Boot Quick Start</a>.&nbsp;<a href="#fnref:spring-boot" class="reversefootnote">?</a></p> </li> 
           <li id="fn:spring-java-based"> <p><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-java">Spring Java based configuration</a>&nbsp;<a href="#fnref:spring-java-based" class="reversefootnote">?</a></p> </li> 
          </ol> 
         </div> 
        </div> 
        <!-- .entry end --> 
        <div class="clear"></div> 
        <div class="bottommargin"> 
         <h3>Share this</h3> 
         <div class="addthis_inline_share_toolbox"></div> 
        </div> 
        <div class="promo promo-border promo-center bottommargin"> 
         <h2>Would you like to know more about <span>microservices with Python, Spring and Java</span>?</h2> 
         <p>Get my best content and findings on software craft, coding skills and business. Expect to hear from me monthly(ish). Oh, and I hate spam the same way as you do.</p> 
         <form id="mc-embedded-subscribe-form" action="http://bernhardwenzel.us14.list-manage.com/subscribe/post?u=6100586ced1788d246fe50f77&amp;id=e4f7b0f5bf" method="post" name="mc-embedded-subscribe-form" target="_blank"> 
          <div class="input-group divcenter"> 
           <span class="input-group-addon"><i class="icon-email"></i></span> 
           <input type="email" id="widget-subscribe-form-email" name="EMAIL" class="form-control required email" placeholder="Enter your Email" aria-required="true"> 
           <span class="input-group-btn"><button class="btn button-3d button-yellow button-light" type="submit" style="color: black;">Yes, sign me up</button></span> 
          </div> 
         </form> 
        </div> 
        <div class="clear"></div> 
        <div class="post-navigation clearfix"> 
         <div class="col_half nobottommargin"> 
          <a href="/articles/scapple-review/">? Scapple: a great little brainstorming gem</a> 
         </div> 
        </div> 
        <div id="disqus_thread"></div> 
        <script>
    var disqus_config = function () {
      this.page.url = 'http://bernhardwenzel.com/articles/how-to-build-a-message-driven-microservice-application/';
      this.page.identifier = 'http://bernhardwenzel.com/articles/how-to-build-a-message-driven-microservice-application/';
    };

    (function() {
      var d = document, s = d.createElement('script');

      s.src = 'https://bernhardwenzel-blog.disqus.com/embed.js';

      s.setAttribute('data-timestamp', +new Date());
      (d.head || d.body).appendChild(s);
    })();
  </script> 
        <noscript>
         Please enable JavaScript to view the 
         <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a>
        </noscript> 
       </div> 
      </div> 
     </div> 
    </div> 
   </section>
   <!-- #content end --> 
   <!-- Footer
============================================= --> 
   <footer id="footer" class="dark"> 
    <!-- Copyrights
    ============================================= --> 
    <div id="copyrights"> 
     <div class="container clearfix"> 
      <div class="col_half"> 
       <img src="/images/custom/footer-logo.png" alt="" class="footer-logo"> © 2013-2017 All Rights Reserved by Bernhard Wenzel. 
      </div> 
      <div class="col_half col_last tright"> 
       <div class="copyrights-menu copyright-links fright clearfix"> 
        <a href="/">Home</a>/
        <a href="/#newsletter">Newsletter</a>/
        <a href="/#products">Products</a>/
        <a href="/#articles">Articles</a> 
       </div> 
       <div class="fright clearfix"> 
        <a href="http://www.twitter.com/bernhardwenzel" class="social-icon si-small si-borderless nobottommargin si-facebook"> <i class="icon-twitter"></i> <i class="icon-twitter"></i> </a> 
        <a href="http://github.com/BernhardWenzel" class="social-icon si-small si-borderless nobottommargin si-github"> <i class="icon-github"></i> <i class="icon-github"></i> </a> 
        <a href="https://plus.google.com/u/0/+BernhardWenzel" class="social-icon si-small si-borderless nobottommargin si-gplus"> <i class="icon-gplus"></i> <i class="icon-gplus"></i> </a> 
        <a href="http://www.linkedin.com/in/bernhardwenzel" class="social-icon si-small si-borderless nobottommargin si-linkedin"> <i class="icon-linkedin"></i> <i class="icon-linkedin"></i> </a> 
        <a href="http://www.xing.com/profile/Bernhard_Wenzel3" class="social-icon si-small si-borderless nobottommargin si-xing"> <i class="icon-xing"></i> <i class="icon-xing"></i> </a> 
        <a href="/feed.xml" class="social-icon si-small si-borderless nobottommargin si-rss"> <i class="icon-rss"></i> <i class="icon-rss"></i> </a> 
       </div> 
      </div> 
     </div> 
    </div>
    <!-- #copyrights end --> 
   </footer>
   <!-- #footer end --> 
  </div>
  <!-- #wrapper end --> 
  <!-- Go To Top
  	============================================= --> 
  <div id="gotoTop" class="icon-angle-up"></div> 
  <!-- External JavaScripts
============================================= --> 
  <script type="text/javascript" src="/js-eeb886bb113961aaf05f27e67d0abaa2.js"></script> 
  <script type="text/javascript">
var clicky_site_ids = clicky_site_ids || [];
clicky_site_ids.push(101010838);
(function() {
  var s = document.createElement('script');
  s.type = 'text/javascript';
  s.async = true;
  s.src = '//static.getclicky.com/js';
  ( document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0] ).appendChild( s );
})();
</script> 
  <noscript>
   <p><img alt="Clicky" width="1" height="1" src="//in.getclicky.com/101010838ns.gif"></p>
  </noscript> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-12095480-6', 'auto');
  ga('send', 'pageview');

</script> 
  <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-59512e586f113da3"></script>   
 </body>
</html>