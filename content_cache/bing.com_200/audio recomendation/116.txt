<!--?xml version="1.0" encoding="utf-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <title>Java Wav File IO - The Lab Book Pages</title> 
  <meta name="Author" content="Andrew Greensted"> 
  <link href="/rss.xml" rel="alternate" type="application/rss+xml" title="Sitewide RSS Feed"> 
  <meta name="Keywords" content="Wav, Reading, Writing, Java"> 
  <link rel="icon" href="/favicon.ico" type="image/x-icon"> 
  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"> 
  <link rel="stylesheet" type="text/css" href="/common/styles/mainStyle.css" title="Standard"> 
  <!--[if IE 6]><link rel="stylesheet" type="text/css" href="/common/styles/ie6.css" /><![endif]--> 
  <link rel="stylesheet" type="text/css" href="/common/styles/printStyle.css" media="print"> 
  <script type="text/javascript" src="/common/scripts/pageControls.js"></script> 
  <script type="text/javascript" src="/common/scripts/statsLoader.js"></script> 
 </head> 
 <body> 
  <div id="logo"></div> 
  <div id="title"> 
   <h1><a href="/index.html">The Lab Book Pages</a></h1> 
   <p>An online collection of electronics information</p> 
  </div> 
  <div id="searchBlock"> 
   <!-- SiteSearch Google --> 
   <form method="get" action="http://www.google.co.uk/search"> 
    <input type="hidden" name="ie" value="UTF-8"> 
    <input type="hidden" name="oe" value="UTF-8"> 
    <input type="hidden" name="domains" value="http://www.labbookpages.co.uk"> 
    <input type="text" name="q" size="16" maxlength="255" value=""> 
    <input type="submit" name="btnG" value="Search"> 
    <span style="display:none"><input checked type="radio" name="sitesearch" value="http://www.labbookpages.co.uk">http://www.labbookpages.co.uk</span> 
   </form> 
   <!-- SiteSearch Google --> 
   <p id="authorMod"><a href="/home/about.html">Dr. Andrew Greensted</a><br>Last modified: 25th September 2010</p> 
   <p style="margin:0px;padding:3px 0px 0px 0px;"><span id="menuSwitch" onclick="switchMenu()">Hide Menu</span></p> 
  </div> 
  <br clear="all"> 
  <div id="mainSection"> 
   <div id="leftColumn"> 
    <div class="content" style="padding:4px"> 
     <div id="menu"> 
      <ul> 
       <li><a class="collapsed" href="/index.html">Home</a> </li> 
       <li><a class="expanded" href="/audio.html">Audio</a>
        <ul> 
         <li><a class="collapsed" href="/audio/beamforming.html">Microphone Array Beamforming</a> </li> 
         <li><a href="/audio/firWindowing.html">FIR Filters by Windowing</a> </li> 
         <li><a class="active" href="/audio/javaWavFiles.html">Java Wav File IO</a> </li> 
         <li><a href="/audio/saffireLinux.html">Saffire Pro 10 with Linux</a> </li> 
         <li><a href="/audio/wavFiles.html">Wav Files</a> </li> 
         <li><a href="/audio/wavGenFunc.html">Waveform Generation Functions</a> </li> 
        </ul> </li> 
       <li><a class="collapsed" href="/circuits.html">Circuits</a> </li> 
       <li><a class="collapsed" href="/computing.html">Computing</a> </li> 
       <li><a class="collapsed" href="/electronics.html">Electronics</a> </li> 
       <li><a class="collapsed" href="/fpgas.html">FPGAs</a> </li> 
       <li><a class="collapsed" href="/metalwork.html">Metalwork</a> </li> 
       <li><a class="collapsed" href="/misc.html">Miscellaneous</a> </li> 
       <li><a class="collapsed" href="/research.html">Research</a> </li> 
       <li><a class="collapsed" href="/software.html">Software</a> </li> 
       <li><a class="collapsed" href="/teaching.html">Teaching</a> </li> 
       <li><a class="collapsed" href="/web.html">Web</a> </li> 
      </ul> 
     </div> 
    </div> 
    <div id="statsBox"></div> 
    <div class="content"> 
     <div class="linkMenu"> 
      <div style="float:left">
       <p class="icon" style="background-image: url(/common/icons/mail.png)"><a href="/home/about.html">Contact Details</a></p>
      </div>
      <div style="clear:left"></div> 
      <div style="float:left">
       <p class="icon" style="background-image: url(/common/icons/find.png)"><a href="/home/sitemap.html">Site Map</a></p>
      </div>
      <div style="clear:left"></div> 
     </div> 
    </div> 
    <div class="content"> 
     <a title="Should be strict XHTML 1.0" href="http://validator.w3.org/check?uri=referer"><img style="padding:0px; margin:2px;" src="/common/images/validXHTML.png" alt="Valid XHTML"></a> 
     <a title="Should be valid CSS" href="http://jigsaw.w3.org/css-validator/check/referer"><img style="padding:0px; margin:2px;" src="/common/images/validCSS.png" alt="Valid CSS"></a>
     <br> 
     <a title="Valid RSS Feed" href="http://validator.w3.org/feed/check.cgi?url=http%3A//www.labbookpages.co.uk/rss.xml"><img style="padding:0px; margin:2px;" src="/common/images/validRSS.png" alt="Valid RSS"></a> 
     <a title="All files editied with VIM" href="http://www.vim.org"><img style="padding:0px; margin:2px;" src="/common/images/vim.png" alt="VIM Powered"></a>
     <br> 
     <a type="application/rss+xml" href="/rss.xml"><img style="padding:0px; margin:2px;" src="/common/images/rss.png" alt="RSS Feed Icon"></a>
     <br> 
     <p class="small">This site uses Google Analytics to track visits. <a href="/home/privacy.html">Privacy Statement</a></p> 
    </div> 
   </div> 
   <div id="mainColumn"> 
    <div id="breadcrumb"> 
     <p style="float:right"></p> 
     <p>You are here: <a href="/audio.html">Audio</a></p> 
    </div> 
    <div id="mainContent" class="content watermarked"> 
     <div style="float:left; width:100%;"> 
      <img class="pageImage" src="/common/menuImages/javaWav.png" alt="Page Icon"> 
      <!-- Start Content Section --> 
      <div class="downloadBox">
       <img src="/common/images/download.png" alt="Download">
       <p><strong>Download Files</strong><br><a href="files/javaWavFiles/WavFile.tar.gz">WavFile.tar.gz</a></p>
      </div> 
      <h1>Java Wav File IO</h1> 
      <p>This page describes an easy to use Java class for handling the reading and writing of <a class="ext" href="http://en.wikipedia.org/wiki/WAV">Wav files</a>.</p> 
      <div class="pageMenu"> 
       <ul> 
        <li><a href="#overview">Overview</a></li> 
        <li><a href="#reading">Reading Wav Files</a></li> 
        <li><a href="#writing">Writing Wav Files</a></li> 
        <li><a href="#methods"><code>WavFile</code> Methods</a></li> 
       </ul> 
      </div> 
      <div class="hr"></div>
      <hr> 
      <!-- ===================================================================================== --> 
      <h2 id="overview">Overview</h2> 
      <p>The <code>WavFile</code> class takes care of all the file IO for reading and writing audio data to and from wave files. The <code>WavFile</code> class provides methods for accessing wav file data using different java primitive types, these are <code>long</code>, <code>int</code> and <code>double</code>. It is up to the user to choose the correct type for the given wav file's sample resolution.</p> 
      <p>The standard wav file resolutions are shown in the table below. For all resolutions, up to 32 bit unsigned, handling samples using the <code>int</code> type is fine. For greater resolutions, the <code>long</code> type should be used. The <code>WavFile</code> class assumes all samples of resolution 8 bits and less are unsigned, all resolutions over 8 bits are signed (this is the seems to be the standard for wav files).</p> 
      <p>The <code>double</code> type can be used for any wav file data resolution. The <code>WavFile</code> class will automatically scale sample values to and from the -1.0 to 1.0 floating point range.</p> 
      <table class="grid centre"> 
       <tbody>
        <tr> 
         <th>Resolution</th> 
         <th colspan="2">Min Value</th> 
         <th colspan="2">Max Value</th> 
         <th>Number of Bytes</th> 
        </tr> 
        <tr> 
         <td>8 bit Unsigned</td> 
         <td>0</td> 
         <td><code>(0x00)</code></td> 
         <td>255</td> 
         <td><code>(0xFF)</code></td> 
         <td>1</td> 
        </tr> 
        <tr> 
         <td>16 bit Signed</td> 
         <td>-32,768</td> 
         <td><code>(0x7FFF)</code></td> 
         <td>32,767</td> 
         <td><code>(0x8000)</code></td> 
         <td>2</td> 
        </tr> 
        <tr> 
         <td>24 bit Signed</td> 
         <td>-34,359,738,367</td> 
         <td><code>(0x7FFFFF)</code></td> 
         <td>34,359,738,368</td> 
         <td><code>(0x800000)</code></td> 
         <td>3</td> 
        </tr> 
       </tbody>
      </table> 
      <h3 id="scaling">Floating Point Value Scaling</h3> 
      <p>Due to the scaling process, reading wav files as doubles then writing them back out can result in changes in some sample values. This process is illustrated in the image below. Signed integers encoded using two's complement have different maximum magnitudes for positive and negative numbers. For example a signed 16 bit value has a range of -32,768 to 32,767. When scaling from integer to double, the maximum negative magnitude must be used to ensure that no sample has a value less than -1.0. When scaling from a double to an integer, the positive magnitude is used to ensure the integer range is not exceeded.</p> 
      <div class="image" align="center"> 
       <img src="files/javaWavFiles/doubleProcess.png" alt="Double Scaling Process"> 
      </div> 
      <h3>Wav File Parameters and Format</h3> 
      <p>The image below illustrates the structure of the section storing audio data found within a wav file. In this case, there are 3 audio channels. The resolution is 14 bits so two bytes are required to store each sample. Therefore, each frame requires 6 bytes, this is termed the 'Block Align'.</p> 
      <div class="image" align="center"> 
       <img src="files/javaWavFiles/wavFile.png" alt="Wav File format"> 
      </div> 
      <p>The following links provide detailed information on the wav file format.</p> 
      <ul> 
       <li><a href="http://www.sonicspot.com/guide/wavefiles.html">http://www.sonicspot.com/guide/wavefiles.html</a></li> 
       <li><a href="http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html">http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html</a></li> 
       <li><a href="http://www.blitter.com/~russtopia/MIDI/~jglatt/tech/wave.htm">http://www.blitter.com/~russtopia/MIDI/~jglatt/tech/wave.htm</a></li> 
      </ul> 
      <div class="hr"></div>
      <hr> 
      <!-- ===================================================================================== --> 
      <h2 id="reading">Reading Wav Files</h2> 
      <p>The code below is an example of how to read a wav file. The The data is read in blocks of 100 frames, then each sample is checked to find the maximum and minimum sample value.</p> 
      <div class="codeFilename">
       File: 
       <code>ReadExample.java</code>
      </div> 
      <div class="code">
       <pre>
<span class="PreProc">import</span> java.io.*;

<span class="Type">public</span> <span class="Type">class</span> ReadExample
{
   <span class="Type">public</span> <span class="Type">static</span> <span class="Type">void</span> main(String[] args)
   {
      <span class="Statement">try</span>
      {
         <span class="Comment">// Open the wav file specified as the first argument</span>
         WavFile wavFile = WavFile.openWavFile(<span class="Statement">new</span> File(args[<span class="Constant">0</span>]));

         <span class="Comment">// Display information about the wav file</span>
         wavFile.display();

         <span class="Comment">// Get the number of audio channels in the wav file</span>
         <span class="Type">int</span> numChannels = wavFile.getNumChannels();

         <span class="Comment">// Create a buffer of 100 frames</span>
         <span class="Type">double</span>[] buffer = <span class="Statement">new</span> <span class="Type">double</span>[<span class="Constant">100</span> * numChannels];

         <span class="Type">int</span> framesRead;
         <span class="Type">double</span> min = Double.MAX_VALUE;
         <span class="Type">double</span> max = Double.MIN_VALUE;

         <span class="Statement">do</span>
         {
            <span class="Comment">// Read frames into buffer</span>
            framesRead = wavFile.readFrames(buffer, <span class="Constant">100</span>);

            <span class="Comment">// Loop through frames and look for minimum and maximum value</span>
            <span class="Statement">for</span> (<span class="Type">int</span> s=<span class="Constant">0</span> ; s&lt;framesRead * numChannels ; s++)
            {
               <span class="Statement">if</span> (buffer[s] &gt; max) max = buffer[s];
               <span class="Statement">if</span> (buffer[s] &lt; min) min = buffer[s];
            }
         }
         <span class="Statement">while</span> (framesRead != <span class="Constant">0</span>);

         <span class="Comment">// Close the wavFile</span>
         wavFile.close();

         <span class="Comment">// Output the minimum and maximum value</span>
         System.out.printf(<span class="Constant">"Min: %f, Max: %f</span><span class="Special">\n</span><span class="Constant">"</span>, min, max);
      }
      <span class="Statement">catch</span> (Exception e)
      {
         System.err.println(e);
      }
   }
}
</pre>
      </div> 
      <div class="hr"></div>
      <hr> 
      <!-- ===================================================================================== --> 
      <h2 id="writing">Writing Wav Files</h2> 
      <p>The code below is an example of writing a wav file. The code creates a two channel wav file of 5 seconds duration. Each channel stores a single sinusoidal tone, one at 400Hz the other at at 500Hz.</p> 
      <div class="codeFilename">
       File: 
       <code>WriteExample.java</code>
      </div> 
      <div class="code">
       <pre>
<span class="PreProc">import</span> java.io.*;

<span class="Type">public</span> <span class="Type">class</span> WriteExample
{
   <span class="Type">public</span> <span class="Type">static</span> <span class="Type">void</span> main(String[] args)
   {
      <span class="Statement">try</span>
      {
         <span class="Type">int</span> sampleRate = <span class="Constant">44100</span>;    <span class="Comment">// Samples per second</span>
         <span class="Type">double</span> duration = <span class="Constant">5.0</span>;     <span class="Comment">// Seconds</span>

         <span class="Comment">// Calculate the number of frames required for specified duration</span>
         <span class="Type">long</span> numFrames = (<span class="Type">long</span>)(duration * sampleRate);

         <span class="Comment">// Create a wav file with the name specified as the first argument</span>
         WavFile wavFile = WavFile.newWavFile(<span class="Statement">new</span> File(args[<span class="Constant">0</span>]), <span class="Constant">2</span>, numFrames, <span class="Constant">16</span>, sampleRate);

         <span class="Comment">// Create a buffer of 100 frames</span>
         <span class="Type">double</span>[][] buffer = <span class="Statement">new</span> <span class="Type">double</span>[<span class="Constant">2</span>][<span class="Constant">100</span>];

         <span class="Comment">// Initialise a local frame counter</span>
         <span class="Type">long</span> frameCounter = <span class="Constant">0</span>;

         <span class="Comment">// Loop until all frames written</span>
         <span class="Statement">while</span> (frameCounter &lt; numFrames)
         {
            <span class="Comment">// Determine how many frames to write, up to a maximum of the buffer size</span>
            <span class="Type">long</span> remaining = wavFile.getFramesRemaining();
            <span class="Type">int</span> toWrite = (remaining &gt; <span class="Constant">100</span>) ? <span class="Constant">100</span> : (<span class="Type">int</span>) remaining;

            <span class="Comment">// Fill the buffer, one tone per channel</span>
            <span class="Statement">for</span> (<span class="Type">int</span> s=<span class="Constant">0</span> ; s&lt;toWrite ; s++, frameCounter++)
            {
               buffer[<span class="Constant">0</span>][s] = Math.sin(<span class="Constant">2.0</span> * Math.PI * <span class="Constant">400</span> * frameCounter / sampleRate);
               buffer[<span class="Constant">1</span>][s] = Math.sin(<span class="Constant">2.0</span> * Math.PI * <span class="Constant">500</span> * frameCounter / sampleRate);
            }

            <span class="Comment">// Write the buffer</span>
            wavFile.writeFrames(buffer, toWrite);
         }

         <span class="Comment">// Close the wavFile</span>
         wavFile.close();
      }
      <span class="Statement">catch</span> (Exception e)
      {
         System.err.println(e);
      }
   }
}
</pre>
      </div> 
      <div class="hr"></div>
      <hr> 
      <!-- ===================================================================================== --> 
      <h2 id="methods"><code>WavFile</code> Methods</h2> 
      <p>The tables below document the public methods of the <code>WavFile</code> class.</p> 
      <h3>General Methods</h3> 
      <table class="javaDocs"> 
       <tbody>
        <tr> 
         <td class="return"><code><span class="Type">static</span> WavFile</code></td> 
         <td class="proto"><code>newWavFile(File file, <span class="Type">int</span> numChannels, <span class="Type">long</span> numFrames, <span class="Type">int</span> validBits, <span class="Type">long</span> sampleRate) <span class="Type">throws</span> IOException, WavFileException</code> <p>This method creates a new wav file for writing to. It writes header information to the wav file. Once this method has been called and a <code>WavFile</code> instance retrieved, the <code>writeFrames</code> methods can be used to write samples to the wav file.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">static</span> WavFile</code></td> 
         <td class="proto"><code>openWavFile(File file) <span class="Type">throws</span> IOException, WavFileException</code> <p>This method opens a wav file ready for reading. It retrieves wav details from the file header. Once this method has been called and a <code>WavFile</code> instance retrieved, the <code>readFrames</code> methods can be used for accessing the samples.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">void</span></code></td> 
         <td class="proto"><code>close() <span class="Type">throws</span> IOException</code> <p>This method closes the open file handlers. When reading a wav file, it can be called at any point, but once closed no more samples can be read. When writing, this <strong>must</strong> be called once all samples have been written using the <code>writeFrames</code> methods. If not called, the wav file may be incomplete.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span> </code></td> 
         <td class="proto"><code>getNumChannels()</code> <p>Returns the number of channels.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">long</span></code></td> 
         <td class="proto"><code>getNumFrames()</code> <p>Returns the total number of frames stored in the wav file.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">long</span></code></td> 
         <td class="proto"><code>getFramesRemaining()</code> <p>Returns the remaining number of frames available for reading or writing.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">long</span></code></td> 
         <td class="proto"><code>getSampleRate()</code> <p>Returns the sample rate.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>getValidBits()</code> <p>Returns the number of valid bits used for storing a single sample. This is the sample resolution.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">void</span></code></td> 
         <td class="proto"><code>display()</code> <p>Prints parameters for this wav file to <code>System.out.</code></p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">void</span></code></td> 
         <td class="proto"><code>display(PrintStream out)</code> <p>Prints parameters for this wav file to the specified <code>PrintStream</code></p></td> 
        </tr> 
       </tbody>
      </table> 
      <h3>Read and Write Using The <code>int</code> Type</h3> 
      <p>The <code>int</code> type should only be used when dealing with wav files using 32 bit signed values or 31 bit or less signed or unsigned values.</p> 
      <table class="javaDocs"> 
       <tbody>
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">int</span>[] sampleBuffer, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Read <code>numFramesToRead</code> frames from the wav file and place into <code>sampleBuffer</code> starting from index 0. The user must make sure <code>sampleBuffer</code> contains enough space for all frames to be read (required length is the number of channels multiplied by number of frames to be read). Samples from each channel are interlaced into the buffer.</p> <p>This method returns the number of frames read. When no frames are left to read this method returns 0.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">int</span>[] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as above, but <code>sampleBuffer</code> is filled starting at index <code>offset</code>.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">int</span>[][] sampleBuffer, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Read <code>numFramesToRead</code> frames from the wav file and place into <code>sampleBuffer</code> starting from indices 0,0. The <code>sampleBuffer</code> indices are 'Channel Number', 'Frame Number'. For example, <code>sampleBuffer[2][23]</code> is the channel 3 sample from frame 24. The user must make sure <code>sampleBuffer</code> is the correct dimensions for all channels and frames to be read.</p> <p>This method returns the number of frames read. When no frames are left to read this method returns 0.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">int</span>[][] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as above, but <code>sampleBuffer</code> is filled starting at frame index <code>offset</code>.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">int</span>[] sampleBuffer, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Write <code>numFramesToWrite</code> frames from <code>sampleBuffer</code> into the wav file starting from index 0. The user must make sure <code>sampleBuffer</code> is large enough for all frames to be retrieved for writing (required length is the number of channels multiplied by number of frames to be written). Samples from each channel are retrieved in an interlaced order.</p> <p>This method returns the number of frames written. The maximum number of frames that can be written is specified when the <code>WavFile</code> is created using <code>newWavFile</code>. When all frames have been written this method returns 0.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">int</span>[] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as above, but <code>sampleBuffer</code> is read starting at index <code>offset</code>.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">int</span>[][] sampleBuffer, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Write <code>numFramesToRead</code> frames from <code>sampleBuffer</code> into the wav file starting from indices 0,0. The <code>sampleBuffer</code> indices are 'Channel Number', 'Frame Number'. For example, <code>sampleBuffer[2][23]</code> is the channel 3 sample from frame 24. The user must make sure <code>sampleBuffer</code> is the correct dimensions for all channels and frames to be retrieved for writing.</p> <p>This method returns the number of frames written. The maximum number of frames that can be written is specified when the <code>WavFile</code> is created using <code>newWavFile</code>. When all frames have been written this method returns 0.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">int</span>[][] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as above, but <code>sampleBuffer</code> is read starting at frame index <code>offset</code>.</p></td> 
        </tr> 
       </tbody>
      </table> 
      <h3>Read and Write Using The <code>long</code> Type</h3> 
      <p>The <code>long</code> type should be used when dealing with wav files using 64 bit signed values or 63 bit or less signed or unsigned values.</p> 
      <table class="javaDocs"> 
       <tbody>
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">long</span>[] sampleBuffer, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but supports samples up to 64 bits unsigned.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">long</span>[] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but supports samples up to 64 bits unsigned.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">long</span>[][] sampleBuffer, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but supports samples up to 64 bits unsigned.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">long</span>[][] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but supports samples up to 64 bits unsigned.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">long</span>[] sampleBuffer, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but supports samples up to 64 bits unsigned.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">long</span>[] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but supports samples up to 64 bits unsigned.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">long</span>[][] sampleBuffer, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but supports samples up to 64 bits unsigned.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">long</span>[][] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but supports samples up to 64 bits unsigned.</p></td> 
        </tr> 
       </tbody>
      </table> 
      <h3>Read and Write Using The <code>double</code> Type</h3> 
      <table class="javaDocs"> 
       <tbody>
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">double</span>[] sampleBuffer, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but samples are scaled to range -1.0 to 1.0. See the <a href="#scaling">note on data scaling</a>.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">double</span>[] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but samples are scaled to range -1.0 to 1.0. See the <a href="#scaling">note on data scaling</a>.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">double</span>[][] sampleBuffer, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but samples are scaled to range -1.0 to 1.0. See the <a href="#scaling">note on data scaling</a>.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>readFrames(<span class="Type">double</span>[][] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToRead) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but samples are scaled to range -1.0 to 1.0. See the <a href="#scaling">note on data scaling</a>.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">double</span>[] sampleBuffer, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but samples are scaled from range -1.0 to 1.0. See the <a href="#scaling">note on data scaling</a>.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">double</span>[] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but samples are scaled from range -1.0 to 1.0. See the <a href="#scaling">note on data scaling</a>.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">double</span>[][] sampleBuffer, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but samples are scaled from range -1.0 to 1.0. See the <a href="#scaling">note on data scaling</a>.</p></td> 
        </tr> 
        <tr> 
         <td class="return"><code><span class="Type">int</span></code></td> 
         <td class="proto"><code>writeFrames(<span class="Type">double</span>[][] sampleBuffer, <span class="Type">int</span> offset, <span class="Type">int</span> numFramesToWrite) <span class="Type">throws</span> IOException, WavFileException</code> <p>Same as <code>int</code> version, but samples are scaled from range -1.0 to 1.0. See the <a href="#scaling">note on data scaling</a>.</p></td> 
        </tr> 
       </tbody>
      </table> 
      <div class="hr"></div>
      <hr> 
      <!-- ===================================================================================== --> 
      <!-- End Content Section --> 
     </div> 
     <div align="center"> 
      <img src="/common/images/smallBook.png" alt="Book Logo"> 
     </div> 
    </div> 
    <!-- End mainContent --> 
   </div> 
   <!-- End mainColumn --> 
  </div> 
  <!-- End mainSection --> 
  <!--<div id="linkBar">
	<a href="#"><img src="/common/images/top.png" alt="Top of Page" /></a><br />
	<a href="/index.html"><img src="/common/images/home.png" alt="Home" /></a><br />
	<a href="/home/about.html"><img src="/common/images/email.png" alt="Contact Details" /></a><br />
</div>--> 
  <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script> 
  <script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-2171818-4");
pageTracker._trackPageview();
} catch(err) {}</script>   
 </body>
</html>