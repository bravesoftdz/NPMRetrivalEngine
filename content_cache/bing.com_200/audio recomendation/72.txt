<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
  <meta name="GENERATOR" content="Mozilla/4.76 [en] (Windows NT 5.0; U) [Netscape]"> 
  <title>Java Naming Standards and Programming Conventions</title> 
 </head> 
 <body> 
  <h1> iWombat.com</h1> 
  <h1> Java Coding Style Guidelines</h1> © 2000 iwombat.com 
  <p></p> 
  <h2> 
   <hr width="100%"></h2> 
  <h2> Table of Contents</h2> 
  <p><br> <a href="#Naming%20Conventions">Naming Conventions</a> </p> 
  <blockquote>
   <a href="#Package%20Names">Package Names</a> 
   <br> 
   <a href="#Class%20and%20Interface%20Names">Class and Interface Names</a> 
   <br> 
   <a href="#Method%20Names">Method Names</a> 
   <br> 
   <a href="#Attribute%20and%20Local%20Variable%20Names">Attribute and Local Variable Names</a> 
   <br> 
   <a href="#Arrays">Arrays vs Lists</a> 
   <br> 
   <a href="#Don%27t%20Hide%20Names">Don't "Hide" Names</a> 
  </blockquote> 
  <p><br> <a href="#Usage%20Standards">Usage Conventions</a> </p> 
  <blockquote>
   <a href="#Class%20Attributes">Class Attributes</a> 
   <br> 
   <a href="#Modifiers">Modifier Usage</a> 
   <br> 
   <a href="#Class%20and%20Package%20Imports">Class and Package Imports</a> 
   <br> 
   <a href="#Methods">Methods</a> 
   <br> 
   <a href="#keep%20it%20simple">Keep it Simple</a> 
   <br> 
   <a href="#Place%20Constants%20on%20Left%20Side%20of">Place Constants on Left Side of Expressions</a> 
   <br> 
   <a href="#optimization%20vs%20abstraction">Optimization vs Abstraction</a> 
  </blockquote> 
  <p><br> <a href="#Javadoc">javadoc</a> </p> 
  <blockquote>
   <a href="#Overall%20Guidelines">Overall Guidelines</a> 
   <br> 
   <a href="#Method%20documentation">Method Documentation</a> 
   <br> 
   <a href="#Use%20the%20@deprecated%20tag">Use the @deprecated Tag</a> 
  </blockquote> 
  <hr width="100%">
  <br> 
  <h2><a name="Naming Conventions"></a> Naming Conventions</h2> 
  <h3><a name="Package Names"></a> Package Names</h3> 
  <p> Following a developing, de-facto standard in the Java world, all packages should be prefixed with: "com.iwombat" </p>
  <p>Further subdivision is up to the individual project teams. In the case of common code, reusable components will be placed within a package named according to the component, such as "com.iwombat.security" or "com.iwombat.ui". Business objects will be segregated by business domains, or product offerings, as appropriate.</p> 
  <p>Package names should always be expressed in lowercase. In the event that multiple words are used to define a level in the package naming hierarchy, these words should be run together with no separating space or other character. Abbreviations can be used if they are commonly used, i.e. ui for user interface. An incorrect package name would be "com.iwombat.user_interface" due to the separating character between "user" and "interface".</p> 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>com.iwombat.ui</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>com.iwombat.user_interface</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <br> 
  <br> 
  <h3><a name="Class and Interface Names"></a> Class and Interface Names</h3> 
  <p>Class names are always nouns, not verbs. Avoid making a noun out of a verb, example DividerClass. If you are having difficulty naming a class then perhaps it is a bad class. </p>
  <p>Interface names should always be an adjective (wherever possible) describing the enforced behaviors of the class (noun). Preferably, said adjective should end in "able" following an emerging preference in Java. i.e. Clonable, Versionable, Taggable, etc.</p> 
  <p>Class, and interface names begin with an uppercase letter, and shoule not be pluralized unless it is a collection class (see below).</p> 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>class FoodItem <br> interface Digestable</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>class fooditem <br> class Crackers <br> interface Eat</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <p><br> Naming collection classes (in the generic sense of collection) can be tricky with respect to pluralization. In general each collection should be identified as a plural item, but not redundantly so. If you are a collection type as part of the class name (List, Map, etc.) it is not necessary to use the plural form in the class name. If you are not using the collection type in the name it is necessary to pluralize the name. If you are extending one of the java colletction class (Map, HashMap, List, ArrayList, Collection, etc.) it is good practice to use the name of the collection type in the class name.</p> 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>class FoodItems extends Object<br> class FoodItemList extends ArrayList<br> class FoodItemMap extends HashMap <br> </tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>class FoodItem extends ArrayList<br> class FoodItemsList extends ArrayList</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <p><br> Class names should be descriptive in nature without implying implementation. The internal implementation of an object should be encapsulated and not visible outside the object. Since implementation can change, to imply implementation in the name forces the class name and all references to it to change or else the code can become misleading.</p> 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>AbstractManagedPanel</tt>
      <br> 
      <tt>LayeredPanel</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>PanelLayerArray</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> When using multiple words in a class name, the words should be concatenated with no separating characters between them. The first letter of each word should be capitalized. 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>InverntoryItem</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>Inverntory_item</tt>
      <br> 
      <tt>Inventoryitem</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> Other than prefixes, no abbreviations should be used unless it is a well known abbreviation. 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>CD=Compact Disc</tt>
      <br> 
      <tt>US=United States</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>Cust=Customer</tt>
      <br> 
      <tt>DLR=Dealer</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <h3><a name="Method Names"></a> Method Names</h3> 
  <p>Method names are typically verbs. However they can also be nouns for example accessor methods (see accessor methods below). In general, when a method modifies the object (or a related object) somehow use a verb appropriate to the nature of the modification. i.e. set, free, sort etc. If the method is an accessor method use a noun appropriate to the information that is returned. </p>
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>label getTag()</tt>
      <br> 
      <tt>void setWidth(int)</tt>
      <br> 
      <tt>void resetCounter()</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>label tagIs()</tt>
      <br> 
      <tt>void counterNew()</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> Names should reflect exactly what the method does (no more or no less). A method should only have a single purpose. If your method contains too much functionality, then you should break it into more than one method. 
  <p>Strive for names that promote self documenting code. The method name should read well in the code. Picture how the method will appear in your code.</p> 
  <p>Method and function names begin with a lowercase letter. The initial letter of any subsequent words in the name are capitalized, and underscores are not used to separate words.</p> 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>setInitState()</tt>
      <br> 
      <tt>getAttributeCollection()</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>set_init_state()</tt>
      <br> 
      <tt>getattributecollection()</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> Method names should be defined so as to describe the function of the method without implying implementation. 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>addItem()</tt>
      <br> 
      <tt>getItem()</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>addItemToVector()</tt>
      <br> 
      <tt>getHashItem()</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <h3><a name="Attribute and Local Variable Names"></a> Attribute and Local Variable Names</h3> 
  <p>Do not use abbreviations, use full names. Variable names begin with a lowercase letter. The initial letter of any subsequent words in the name are capitalized, and underscores are not used to separate words (or scope variables). Clarity of variable names can be increased by providing some indication of the type of class they might become. Attributes that are not collections should not be pluralized. </p>
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>Item menuItem;</tt>
      <br> 
      <tt>JPanel managerJPanel;</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>JPanel Managerpanel;</tt>
      <br> 
      <tt>JPanel Manager_panel;</tt>
      <br> 
      <tt>int _localInt;</tt>
      <br> 
      <tt>InventoryItem i; </tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> Collection classes, such as vectors and hashes should always be pluralized. Alternately, collection classes can also be prefixed with the word some. 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>Vector menuItems;</tt>
      <br> 
      <tt>Vector menuItemsVector;</tt>
      <br> 
      <tt>Vector someMenuItems</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>Vector menuItemVector;</tt>
      <br> 
      <tt>Vector aBunchOfMenu</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <p><br> Name variables with the most abstract class that they can hold. For example if <tt>startButton</tt> could be any control object, then it should be named a <tt>startControl</tt> .</p> 
  <p>If the variable truly represents an anonymous object but is restricted by an interface, then including the interface name in the variable can increase clarity. i.e. <tt>clonableInventoryItem</tt> .</p> 
  <p>Declare each variable separately on a single line. Do not comma separate variables of the same type.</p> 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>int counter;</tt>
      <br> 
      <tt>int lastCounter;</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>int counter, lastCounter;</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <p><br> Constant values should have uppercase letters for each word and each word should be separated by an underscore. The capitalization of constants helps to distinguish them from other nonfinal variables.</p> 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>public final static int MAX_AGE = 100;</tt>
      <br> 
      <tt>public final static Color RED = new Color(count++);</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>public final static int MAXAGE = 100;</tt>
      <br> 
      <tt>public final static int maxAge = 100;</tt>
      <br> 
      <tt>public final static int MaxAge = 100;</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <h3><a name="Arrays"></a> Returning Arrays and Lists</h3> 
  <p> Any method that will returns an list of homogeneous or heterogeneous items should return a Collection (or other collection class) object -- never an array. </p>
  <p>Example: for a method that returns a list of keys represented as strings.</p> 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>List getKeys();</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>String[] getKeys();</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <p><br> Also, any method that returns a Collection should always return a valid Collection -- never null. However, the returned Collection can be empty. </p> 
  <dir> 
   <dir>
    <b>Acceptable:</b>
    <br> 
    <dir> 
     <dir>
      <tt>public ArrayList getKeys() {</tt>
      <br> 
      <tt>&nbsp;&nbsp;&nbsp;if (0 == this.numValidKeys) {</tt>
      <br> 
      <tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new ArrayList();</tt>
      <br> 
      <tt>&nbsp;&nbsp;&nbsp;}</tt>
      <br> 
      <tt>&nbsp;&nbsp;&nbsp;return myKeyList;</tt>
      <br> 
      <tt>}</tt>
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>public ArrayList getKeys() {</tt>
      <br> 
      <tt>&nbsp;&nbsp;&nbsp;if (0 == this.numValidKeys) {</tt>
      <br> 
      <tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</tt>
      <br> 
      <tt>&nbsp;&nbsp;&nbsp;}</tt>
      <br> 
      <tt>&nbsp;&nbsp;&nbsp;return myKeyList;</tt>
      <br> 
      <tt>}</tt>
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <h3><a name="Don't Hide Names"></a> Don't "Hide" Names</h3> 
  <p>Name hiding refers to the practice of naming a local variable, argument, or field the same (or similar) as that of another of greater scope. For example, if you have a class attribute called <tt>firstName</tt> do not create a local variable called <tt>firstName</tt> or anything close to it, such as <tt>firstNames</tt> or <tt>fName</tt>. Try to avoid this, it makes you code difficult to understand and prone to bugs because other developers will misread your intentions and create difficult to detect errors. </p>
  <h2> 
   <hr width="100%"><a name="Usage Standards"></a> Usage Conventions</h2> 
  <h3><a name="Class Attributes"></a> Class Attributes</h3> 
  <p>Class attributes should always be accessed through accessors and mutators (getters and setters). Accessors and mutators are methods used to return and set the attribute value. These methods typically begin with "get" or "set", followed by the attribute name. As with other methods, the first letter of the method name should be in lowercase.<br> <i>Note:</i> Boolean accessors typically begin with "is" i.e. <tt>isFixed(), </tt>and return a Boolean value. </p>
  <p>Example:</p> 
  <p>Attribute(s):<br> <tt>&nbsp;&nbsp;&nbsp;int useCounter;</tt></p> 
  <p>Getter:<br> <tt>&nbsp;&nbsp;&nbsp;int getUseCounter(){</tt><br> <tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return useCounter;</tt><br> <tt>&nbsp;&nbsp;&nbsp;}</tt></p> 
  <p>Setter(s):<br> <tt>&nbsp;&nbsp;&nbsp;void setUseCounter(int count){</tt><br> <tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;useCounter = count;</tt><br> <tt>&nbsp;&nbsp;&nbsp;}</tt></p> 
  <p><tt>&nbsp;&nbsp;&nbsp;void incrementUseCounter() {</tt><br> <tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setUseCounter(getUseCounter()+1);</tt><br> <tt>&nbsp;&nbsp;&nbsp;}</tt></p> 
  <p><tt>&nbsp;&nbsp;&nbsp;void decrementUseCounter() {</tt><br> <tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setUseCounter(getUseCounter()-1);</tt><br> <tt>&nbsp;&nbsp;&nbsp;}</tt><br> </p> 
  <p>Be safe and initialize all local variables at creation and all class attributes in the constructor(s)! <br> </p> 
  <h3><a name="Modifiers"></a> Modifier Usage</h3> Always use "public", "protected" and "private" keywords, and use them correctly. Attributes should rarely be public as this violates encapsulation. Declare attributes as "private" and access them through public or protected getters and setters. Use static methods to define constants instead of public static attributes (e.g. 
  <tt> UILayerdPanel.getActiveLayers() </tt>). Methods in the public interface of a class should be declared as public. Other methods should be declared as protected.
  <br> 
  <h3><a name="Class and Package Imports"></a> Class and Package Imports</h3> To make for more readable code, types used in code should be imported rather that fully qualifying the class name. In general, import only those classes necessary. Importing java.util.* when only two or three classes are needed will increase the runtime footprint of the application. 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir>
     <tt>import java.util.Date;</tt>
     <br> 
     <tt>Date aDate = new Date();</tt>
    </dir> 
    <p><br> <b>Unacceptable:</b></p> 
    <dir>
     <tt>java.util.Date aDate = new java.util.Date();</tt>
    </dir> 
   </dir> 
  </dir> Importing rather than fully qualifying references adds an advantage in architecting an application. For example, imagine a platform-specific implementation of some classes which do CD drive manipulation. Imagine that the behavior resides in the class CDPlayer. If references are coded as 
  <p><tt>&nbsp;&nbsp;&nbsp;com.iwombat.ui.winnt.CDPlayer aPlayer = new com.iwombat.ui.winnt.CDPlayer();</tt></p> 
  <p>then all those references would have to change when you port to UNIX. However, if the class is referenced as below:</p> 
  <p><tt>&nbsp;&nbsp;&nbsp;import com.iwombat.ui.winnt.CDPlayer;</tt><br> <tt>&nbsp;&nbsp;&nbsp;CDPlayer aPlayer = new CDPlayer()</tt></p> 
  <p>Then changing to UNIX simply requires importing <tt>com.iwombat.ui.unix.CDPlayer</tt> instead.</p> 
  <p>Imports should be done on specific classes only. Imports should not include entire packages.<br> </p> 
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir>
     <tt>import javax.servlet.http.HttpServletRequest;</tt>
     <br> 
     <tt>import javax.ejb.SessionBean;</tt>
    </dir> 
    <b>Unacceptable:</b> 
    <dir>
     <tt>import javax.servlet.http.*; <br> import javax.ejb.*;</tt>
    </dir> 
   </dir> 
  </dir> Importing specific classes rather than entire packages simplifies class resolution for both the compiler and the developer, since there is no ambiguity about the package of an imported class. Also, importing java.util.* when only two or three classes are needed will increase the runtime footprint of the application. 
  <h3><a name="Methods"></a> Methods</h3> 
  <p>Methods in well-designed object-oriented code are short. Strive to keep methods less than 10 lines. Reconsider methods that are over a page in length, breaking them into several methods representing smaller blocks of functionality. </p>
  <p>Break up long methods into small methods. This promotes code reuse and allows for more combinations of methods. If the number of methods grows to be difficult to understand, then look at decomposing the class into more than one class.</p> 
  <p>Follow the 30-second rule. Another programmer should be able to look at your method and fully understand what it does, why it does it and how it does it in less than 30-seconds. If that is not possible, then your code is too complex and difficult to maintain. A good rule of thumb is that a method should be no more than a screen in length.</p> 
  <h3><a name="keep it simple"></a> Keep it simple</h3> Avoid nesting blocks of statements more than 2 or 3 levels deep. This adds to the complexity of the code. A method should be easy to read and understand. Easy to maintain is the goal. 
  <p>Avoid nesting method calls too deeply, since this can introduce undue complexity.</p> 
  <p>Avoid using compound predicates:</p> 
  <dir> 
   <dir>
    <tt>if (x&gt;0 &amp;&amp; x&lt;100 &amp;&amp; y&gt;0 &amp;&amp; y&lt;100 || z==1000)</tt>
   </dir> 
  </dir> Think of all the combinations you will have to write to adequately test the above condition (2^5 or 32 different combinations).
  <br> 
  <br> 
  <h3><a name="Place Constants on Left Side of"></a> Place Constants on Left Side of Comparisons</h3> Consider the code examples below. They are both equivalent, at least on first inspection. However, example 1 compiles and example 2 does not. With a closer look you'll see that the second statement isn't doing a comparison its doing an assignment. Example 2 tries to make an assignment to the constant value 0, and thus fails to compile. Assignments vs. comparison mistakes can be difficult to find in your code. But, by placing the constant on the left side you can let the compiler do the work for you. 
  <ol> 
   <li> <tt>&nbsp;&nbsp;&nbsp;if (something == 1) { ... } <br> &nbsp;&nbsp;&nbsp;if (x = 0) { ... }</tt></li> 
   <br> 
   <li><tt>&nbsp;&nbsp;&nbsp;if (1 == something) { ... } <br> &nbsp;&nbsp;&nbsp;if (0 = x) { ... }</tt> </li> 
  </ol> 
  <h3><a name="optimization vs abstraction"></a> Optimization vs Abstraction</h3> Code in a two pass mode. First, implement with good OO abstractions and a well though out design. Second, when integrating your class into the its framework or application, measure performance and seek out the bottlenecks. Then optimize the bottlenecks.
  <br> 
  <br> 
  <h2> 
   <hr width="100%"><a name="Javadoc"></a> Javadoc Conventions</h2> 
  <p><br> Included in sun's JDK is a documenting tool called javadoc that processes Java source code files and produces external documentation in the form of html files. Javadoc is a great utility, but it does have limitations. Javadoc supports a limited number of tags -- learn them and use them well. The following is a general guideline for commenting your code to support javadoc.<br> </p> 
  <h3><a name="Overall Guidelines"></a>Overall Guidelines</h3> 
  <ul> 
   <li>Document What code does as well as why it was developed. For example, youcan look at a piece of code, or class and figure out what it does internally. However, it may not exactly be apparent what requirements, or other systems this class supports or, why the code is trapping for and throwing certain exceptions.</li> 
   <li>Document difficult or complex functionality</li> 
   <li>Document dependencies, if methods call other methods internally it is important to note that in the method description.</li> 
   <li>Document members of the Domain Object Model that your class is based on, or inspired by.</li> 
   <li>Methods that implement an interface should not provide javadoc comments, since the javadoc comments are included in the interface and will be referenced when javadoc executes.</li> 
  </ul> 
  <h3><a name="Standard .java file header"></a>Standard .java file header</h3> Every .java source file should include the standard iwombat header template and detail out the items as appropriate.
  <br> 
  <h4><a name="Method documentation"></a>Method Documentation</h4> 
  <p>Each method should include the <tt>@exception</tt>, <tt>@param</tt>, and <tt>@return</tt> javadoc tags where appropriate.<br> </p>
  <dir> 
   <dir>
    <b>Acceptable:</b> 
    <dir> 
     <dir>
      <tt>/**</tt>
      <br> 
      <tt> * Method to check if proscribed operation is allowed for this object.</tt>
      <br> 
      <tt> * This method is needed to provided some level of security on operations.</tt>
      <br> 
      <tt> *</tt>
      <br> 
      <tt> * @param action must be an operation that has registered itself with the object</tt>
      <br> 
      <tt> * @return boolean true if the operation is allowed, false otherwise.</tt>
      <br> 
      <tt> * @exception UnknownOperation exception is thrown when an operation that has not</tt>
      <br> 
      <tt> * registered with the object is passed as a parameter.</tt>
      <br> 
      <tt> *</tt>
      <br> 
      <tt> */</tt> 
      <p><tt>public boolean operationIsAllowed(Operation action)</tt><br> <tt>throws UnknownOperation</tt><br> <tt>{</tt></p> 
      <p><tt>}</tt><br> </p> 
     </dir> 
    </dir> 
    <b>Unacceptable:</b> 
    <dir> 
     <dir>
      <tt>/**</tt>
      <br> 
      <tt> * operation check takes an operation and returns true or false</tt>
      <br> 
      <tt> */</tt> 
      <p><tt>public boolean operationIsAllowed(Operation action)</tt><br> <tt>throws UnknownOperation</tt><br> <tt>{</tt></p> 
      <p><tt>}</tt><br> </p> 
     </dir> 
    </dir> 
   </dir> 
  </dir> 
  <h4><a name="Use the @deprecated tag"></a>Use the <tt>@deprecated</tt> Tag</h4> 
  <p>In general it is not a good idea to remove methods from a class (or classes from a package), instead label old methods with the <tt>@deprecated</tt> tag. With liberal use of this tag you are less likely to break builds and code in use elsewhere. However, the compiler will produce warnings letting other developers know that they are using a deprecated method (or class). </p>
  <p><b>Acceptable:</b></p> 
  <dir> 
   <dir>
    <tt>/**</tt>
    <br> 
    <tt> * Method to check if proscribed operation is allowed for this object.</tt>
    <br> 
    <tt> * This method is needed to provided some level of security on operations.</tt>
    <br> 
    <tt> *</tt>
    <br> 
    <tt> * @param Operation must be an operation that has registered itself with the object</tt>
    <br> 
    <tt> * @return boolean true if the operation is allowed, false otherwise.</tt>
    <br> 
    <tt> * @exception UnknownOperation exception is thrown when an operation that has not</tt>
    <br> 
    <tt> * registered with the object is passed as a parameter.</tt>
    <br> 
    <tt> * @deprecated No longer used, SecurityAccessor class in com.iwombat.security replaces functionality</tt>
    <br> 
    <tt> * @see com.iwombat.security</tt>
    <br> 
    <tt> */</tt> 
    <p><tt>public boolean operationIsAllowed(Operation action)</tt><br> <tt>throws UnknownOperation</tt><br> <tt>{</tt></p> 
    <p><tt>}</tt><br> </p> 
   </dir> 
  </dir> 
  <b>Unacceptable:</b> 
  <dir> 
   <dir>
    <tt>/**</tt>
    <br> 
    <tt> * operation check takes an operation and returns true or false</tt>
    <br> 
    <tt> * no longer needed use SecurityAccessor</tt>
    <br> 
    <tt> */</tt> 
    <p><tt>public boolean operationIsAllowed(Operation action)</tt><br> <tt>throws UnknownOperation</tt><br> <tt>{</tt></p> 
    <p><tt>}</tt></p> 
   </dir> 
  </dir>   
 </body>
</html>