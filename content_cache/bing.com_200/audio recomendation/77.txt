<!doctype html>
<html lang="en" dir="ltr" class="client-nojs">
 <head> 
  <meta charset="UTF-8"> 
  <title>Audio Data API - MozillaWiki</title> 
  <meta http-equiv="X-UA-Compatible" content="IE=EDGE"> 
  <meta name="generator" content="MediaWiki 1.23.17"> 
  <link rel="ExportRDF" type="application/rdf+xml" title="Audio Data API" href="/index.php?title=Special:ExportRDF/Audio_Data_API&amp;xmlmime=rdf"> 
  <link rel="shortcut icon" href="/skins/../assets/favicon.ico"> 
  <link rel="search" type="application/opensearchdescription+xml" href="/opensearch_desc.php" title="MozillaWiki (en)"> 
  <link rel="EditURI" type="application/rsd+xml" href="https://wiki.mozilla.org/api.php?action=rsd"> 
  <link rel="alternate" type="application/atom+xml" title="MozillaWiki Atom feed" href="/index.php?title=Special:RecentChanges&amp;feed=atom"> 
  <link rel="stylesheet" href="https://wiki.mozilla.org/load.php?debug=false&amp;lang=en&amp;modules=ext.Sandstone.main%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.skinning.interface%7Cmediawiki.ui.button%7Cskins.vector.styles&amp;only=styles&amp;skin=vector&amp;*"> 
  <link rel="stylesheet" href="https://wiki.mozilla.org/load.php?debug=false&amp;lang=en&amp;modules=ext.smw.style%7Cext.smw.tooltip.styles&amp;only=styles&amp;skin=vector&amp;*"> 
  <meta name="ResourceLoaderDynamicStyles" content=""> 
  <link rel="stylesheet" href="https://wiki.mozilla.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=styles&amp;skin=vector&amp;*"> 
  <style>a:lang(ar),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: wiki_mozilla_org:resourceloader:filter:minify-css:7:c29b097b2d0fb0caa3e6493e7f9442df */</style> 
  <script src="https://wiki.mozilla.org/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script> 
  <script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Audio_Data_API","wgTitle":"Audio Data API","wgCurRevisionId":657449,"wgRevisionId":657449,"wgArticleId":33919,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Audio_Data_API","wgIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgWikiEditorEnabledModules":{"toolbar":true,"dialogs":true,"hidesig":true,"preview":true,"previewDialog":false,"publish":false},"sfgAutocompleteValues":[],"sfgAutocompleteOnAllChars":false,"sfgFieldProperties":[],"sfgCargoFields":[],"sfgDependentFields":[],"sfgShowOnSelect":[],"sfgScriptPath":"/extensions/SemanticForms","edgValues":null,"sfgEDSettings":null});
}</script>
  <script>if(window.mw){
mw.loader.implement("user.options",function($,jQuery){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"editfont":"default","editondblclick":0,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":1,"extendwatchlist":0,"fancysig":0,"forceeditsummary":true,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nickname":"","norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rows":25,"showhiddencats":0,"shownumberswatching":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"watchcreations":1,"watchdefault":1,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,
"useeditwarning":1,"prefershttps":1,"swl_email":true,"swl_watchlisttoplink":true,"usebetatoolbar":1,"usebetatoolbar-cgd":1,"wikieditor-preview":1,"language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":true,"searchNs10":false,"searchNs11":true,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"searchNs100":true,"searchNs101":true,"searchNs102":true,"searchNs103":true,"searchNs106":true,"searchNs107":true,"searchNs108":true,"searchNs109":true,"searchNs110":true,"searchNs111":true,"searchNs112":true,"searchNs113":true,"searchNs114":true,"searchNs115":true,"searchNs116":true,"searchNs117":true,"searchNs118":true,"searchNs119":true,"searchNs122":true,"searchNs123":true,
"searchNs128":true,"searchNs129":true,"searchNs134":false,"searchNs135":false,"searchNs136":false,"searchNs137":false,"searchNs138":false,"searchNs139":false,"searchNs140":false,"searchNs141":false,"searchNs274":false,"searchNs275":false,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function($,jQuery){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: wiki_mozilla_org:resourceloader:filter:minify-js:7:65a211fa1d12e69e4160724360dc0b7a */
}</script> 
  <script>if(window.mw){
mw.loader.load(["ext.smw.style","mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","ext.Bugzilla","skins.vector.js"]);
}</script> 
  <!--[if lt IE 7]><style type="text/css">body{behavior:url("/skins/vector/csshover.min.htc")}</style><![endif]-->
 </head> 
 <body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Audio_Data_API skin-vector action-view vector-animateLayout"> 
  <div id="mw-page-base" class="noprint"></div> 
  <div id="mw-head-base" class="noprint"></div> 
  <div id="content" class="mw-body" role="main"> 
   <a id="top"></a> 
   <div id="mw-js-message" style="display:none;"></div> 
   <h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Audio Data API</span></h1> 
   <div id="bodyContent"> 
    <div id="siteSub">
     From MozillaWiki
    </div> 
    <div id="contentSub"></div> 
    <div id="jump-to-nav" class="mw-jump">
      Jump to: 
     <a href="#mw-navigation">navigation</a>, 
     <a href="#p-search">search</a> 
    </div> 
    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
     <div id="toc" class="toc">
      <div id="toctitle">
       <h2>Contents</h2>
      </div> 
      <ul> 
       <li class="toclevel-1 tocsection-1"><a href="#Defining_an_Enhanced_API_for_Audio_.28Draft_Recommendation.29"><span class="tocnumber">1</span> <span class="toctext">Defining an Enhanced API for Audio (Draft Recommendation)</span></a> 
        <ul> 
         <li class="toclevel-2 tocsection-2"><a href="#Abstract"><span class="tocnumber">1.1</span> <span class="toctext">Abstract</span></a></li> 
         <li class="toclevel-2 tocsection-3"><a href="#Authors"><span class="tocnumber">1.2</span> <span class="toctext">Authors</span></a></li> 
         <li class="toclevel-2 tocsection-4"><a href="#Other_Contributors"><span class="tocnumber">1.3</span> <span class="toctext">Other Contributors</span></a></li> 
        </ul> </li> 
       <li class="toclevel-1 tocsection-5"><a href="#Standardization_Note"><span class="tocnumber">2</span> <span class="toctext">Standardization Note</span></a></li> 
       <li class="toclevel-1 tocsection-6"><a href="#API_Tutorial"><span class="tocnumber">3</span> <span class="toctext">API Tutorial</span></a> 
        <ul> 
         <li class="toclevel-2 tocsection-7"><a href="#Reading_Audio"><span class="tocnumber">3.1</span> <span class="toctext">Reading Audio</span></a></li> 
         <li class="toclevel-2 tocsection-8"><a href="#Complete_Example:_Visualizing_Audio_Spectrum"><span class="tocnumber">3.2</span> <span class="toctext">Complete Example: Visualizing Audio Spectrum</span></a></li> 
         <li class="toclevel-2 tocsection-9"><a href="#Writing_Audio"><span class="tocnumber">3.3</span> <span class="toctext">Writing Audio</span></a></li> 
         <li class="toclevel-2 tocsection-10"><a href="#Complete_Example:_Creating_a_Web_Based_Tone_Generator"><span class="tocnumber">3.4</span> <span class="toctext">Complete Example: Creating a Web Based Tone Generator</span></a></li> 
        </ul> </li> 
       <li class="toclevel-1 tocsection-11"><a href="#DOM_Implementation"><span class="tocnumber">4</span> <span class="toctext">DOM Implementation</span></a> 
        <ul> 
         <li class="toclevel-2 tocsection-12"><a href="#nsIDOMNotifyAudioAvailableEvent"><span class="tocnumber">4.1</span> <span class="toctext">nsIDOMNotifyAudioAvailableEvent</span></a></li> 
         <li class="toclevel-2 tocsection-13"><a href="#nsIDOMHTMLMediaElement_additions"><span class="tocnumber">4.2</span> <span class="toctext">nsIDOMHTMLMediaElement additions</span></a></li> 
         <li class="toclevel-2 tocsection-14"><a href="#nsIDOMHTMLAudioElement_additions"><span class="tocnumber">4.3</span> <span class="toctext">nsIDOMHTMLAudioElement additions</span></a></li> 
         <li class="toclevel-2 tocsection-15"><a href="#Security"><span class="tocnumber">4.4</span> <span class="toctext">Security</span></a></li> 
         <li class="toclevel-2 tocsection-16"><a href="#Compatibility_with_Audio_Backends"><span class="tocnumber">4.5</span> <span class="toctext">Compatibility with Audio Backends</span></a></li> 
        </ul> </li> 
       <li class="toclevel-1 tocsection-17"><a href="#Additional_Resources"><span class="tocnumber">5</span> <span class="toctext">Additional Resources</span></a> 
        <ul> 
         <li class="toclevel-2 tocsection-18"><a href="#Bug"><span class="tocnumber">5.1</span> <span class="toctext">Bug</span></a></li> 
         <li class="toclevel-2 tocsection-19"><a href="#Obtaining_Builds"><span class="tocnumber">5.2</span> <span class="toctext">Obtaining Builds</span></a></li> 
         <li class="toclevel-2 tocsection-20"><a href="#JavaScript_Audio_Libraries"><span class="tocnumber">5.3</span> <span class="toctext">JavaScript Audio Libraries</span></a></li> 
         <li class="toclevel-2 tocsection-21"><a href="#Working_Audio_Data_Demos"><span class="tocnumber">5.4</span> <span class="toctext">Working Audio Data Demos</span></a></li> 
         <li class="toclevel-2 tocsection-22"><a href="#Demos_Needing_to_be_Updated_to_New_API"><span class="tocnumber">5.5</span> <span class="toctext">Demos Needing to be Updated to New API</span></a></li> 
         <li class="toclevel-2 tocsection-23"><a href="#Third_Party_Discussions"><span class="tocnumber">5.6</span> <span class="toctext">Third Party Discussions</span></a></li> 
        </ul> </li> 
      </ul> 
     </div> 
     <h2><span class="mw-headline" id="Defining_an_Enhanced_API_for_Audio_.28Draft_Recommendation.29">Defining an Enhanced API for Audio (Draft Recommendation)</span></h2> 
     <p><b>Note</b>: this API has been <i>deprecated</i> in favor of the <a rel="nofollow" class="external text" href="https://developer.mozilla.org/en-US/docs/Web_Audio_API">Web Audio API</a> chosen by the W3C. </p> 
     <h5><span class="mw-headline" id="Abstract">Abstract</span></h5> 
     <p>The HTML5 specification introduces the &lt;audio&gt; and &lt;video&gt; media elements, and with them the opportunity to dramatically change the way we integrate media on the web. The current HTML5 media API provides ways to play and get limited information about audio and video, but gives no way to programatically access or create such media. We present a new Mozilla extension to this API, which allows web developers to read and write raw audio data. </p> 
     <h5><span class="mw-headline" id="Authors">Authors</span></h5> 
     <ul> 
      <li> David Humphrey (<a rel="nofollow" class="external text" href="http://twitter.com/humphd">@humphd</a>) </li> 
      <li> Corban Brook (<a rel="nofollow" class="external text" href="http://twitter.com/corban">@corban</a>) </li> 
      <li> Al MacDonald (<a rel="nofollow" class="external text" href="http://twitter.com/f1lt3r">@F1LT3R</a>) </li> 
      <li> Yury Delendik </li> 
      <li> Ricard Marxer (<a rel="nofollow" class="external text" href="http://twitter.com/ricardmp">@ricardmp</a>) </li> 
      <li> Charles Cliffe (<a rel="nofollow" class="external text" href="http://twitter.com/ccliffe">@ccliffe</a>) </li> 
     </ul> 
     <h5><span class="mw-headline" id="Other_Contributors">Other Contributors</span></h5> 
     <ul> 
      <li> Thomas Saunders </li> 
      <li> Ted Mielczarek </li> 
     </ul> 
     <h2><span class="mw-headline" id="Standardization_Note">Standardization Note</span></h2> 
     <p>Please note that this document describes a non-standard experimental API. This API is considered deprecated and may not be supported in future releases. The World Wide Web Consortium (W3C) has chartered the <a rel="nofollow" class="external text" href="http://www.w3.org/2011/audio/">Audio Working Group</a> to develop standardized audio API specifications, including <a href="/Web_Audio_API" title="Web Audio API">Web Audio API</a>. Please refer to the Audio Working Group website for further details. </p> 
     <h2><span class="mw-headline" id="API_Tutorial">API Tutorial</span></h2> 
     <p>This API extends the HTMLMediaElement and HTMLAudioElement (e.g., affecting &lt;video&gt; and &lt;audio&gt;), and implements the following basic API for reading and writing raw audio data: </p> 
     <h5><span class="mw-headline" id="Reading_Audio">Reading Audio</span></h5> 
     <p>Audio data is made available via an event-based API. As the audio is played, and therefore decoded, sample data is passed to content scripts in a framebuffer for processing after becoming available to the audio layer--hence the name, <b>MozAudioAvailable</b>. These samples may or may not have been played yet at the time of the event. The audio samples returned in the event are raw, and have not been adjusted for mute/volume settings on the media element. Playing, pausing, and seeking the audio also affect the streaming of this raw audio data. </p>
     <p>Users of this API can register two callbacks on the &lt;audio&gt; or &lt;video&gt; element in order to consume this data: </p> 
     <pre>
&lt;audio id="audio" src="song.ogg"&gt;&lt;/audio&gt;
&lt;script&gt;
  var audio = document.getElementById("audio");
  audio.addEventListener('MozAudioAvailable', audioAvailableFunction, false);
  audio.addEventListener('loadedmetadata', loadedMetadataFunction, false);
&lt;/script&gt;
</pre> 
     <p>The <b>loadedmetadata</b> event is a standard part of HTML5. It now indicates that a media element (audio or video) has useful metadata loaded, which can be accessed using three new attributes: </p> 
     <ul> 
      <li> mozChannels </li> 
      <li> mozSampleRate </li> 
      <li> mozFrameBufferLength </li> 
     </ul> 
     <p>Prior to the <b>loadedmetadata</b> event, accessing these attributes will cause an exception to be thrown, indicating that they are not known, or there is no audio. These attributes indicate the <b>number of channels</b>, audio <b>sample rate per second</b>, and the <b>default size of the framebuffer</b> that will be used in <b>MozAudioAvailable</b> events. This event is fired once as the media resource is first loaded, and is useful for interpreting or writing the audio data. </p>
     <p>The <b>MozAudioAvailable</b> event provides two pieces of data. The first is a framebuffer (i.e., an array) containing decoded audio sample data (i.e., floats). The second is the time for these samples measured from the start in seconds. Web developers consume this event by registering an event listener in script like so: </p> 
     <pre>
&lt;audio id="audio" src="song.ogg"&gt;&lt;/audio&gt;
&lt;script&gt;
  var audio = document.getElementById("audio");
  audio.addEventListener('MozAudioAvailable', someFunction, false);
&lt;/script&gt;
</pre> 
     <p>An audio or video element can also be created with script outside the DOM: </p> 
     <pre>
var audio = new Audio();
audio.src = "song.ogg";
audio.addEventListener('MozAudioAvailable', someFunction, false);
audio.play();
</pre> 
     <p>The following is an example of how both events might be used: </p> 
     <pre>
var channels,
    rate,
    frameBufferLength,
    samples;

function audioInfo() {
  var audio = document.getElementById('audio');

  // After loadedmetadata event, following media element attributes are known:
  channels          = audio.mozChannels;
  rate              = audio.mozSampleRate;
  frameBufferLength = audio.mozFrameBufferLength;
}

function audioAvailable(event) {
  var samples = event.frameBuffer;
  var time    = event.time;

  for (var i = 0; i &lt; frameBufferLength; i++) {
    // Do something with the audio data as it is played.
    processSample(samples[i], channels, rate);
  }
}
</pre> 
     <h5><span class="mw-headline" id="Complete_Example:_Visualizing_Audio_Spectrum">Complete Example: Visualizing Audio Spectrum</span></h5> 
     <p>This example calculates and displays FFT spectrum data for the playing audio: </p>
     <p><a href="/File:Fft.png" class="image"><img alt="Fft.png" src="/images/f/f3/Fft.png" width="521" height="242"></a> </p> 
     <pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;JavaScript Spectrum Example&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;audio id="audio-element"
           src="song.ogg"
           controls="true"
           style="width: 512px;"&gt;
    &lt;/audio&gt;
    &lt;div&gt;&lt;canvas id="fft" width="512" height="200"&gt;&lt;/canvas&gt;&lt;/div&gt;

    &lt;script&gt;
      var canvas = document.getElementById('fft'),
          ctx = canvas.getContext('2d'),
          channels,
          rate,
          frameBufferLength,
          fft;

      function loadedMetadata() {
        channels          = audio.mozChannels;
        rate              = audio.mozSampleRate;
        frameBufferLength = audio.mozFrameBufferLength;
         
        fft = new FFT(frameBufferLength / channels, rate);
      }

      function audioAvailable(event) {
        var fb = event.frameBuffer,
            t  = event.time, /* unused, but it's there */
            signal = new Float32Array(fb.length / channels),
            magnitude;

        for (var i = 0, fbl = frameBufferLength / 2; i &lt; fbl; i++ ) {
          // Assuming interlaced stereo channels,
          // need to split and merge into a stero-mix mono signal
          signal[i] = (fb[2*i] + fb[2*i+1]) / 2;
        }

        fft.forward(signal);

        // Clear the canvas before drawing spectrum
        ctx.clearRect(0,0, canvas.width, canvas.height);

        for (var i = 0; i &lt; fft.spectrum.length; i++ ) {
          // multiply spectrum by a zoom value
          magnitude = fft.spectrum[i] * 4000;

          // Draw rectangle bars for each frequency bin
          ctx.fillRect(i * 4, canvas.height, 3, -magnitude);
        }
      }

      var audio = document.getElementById('audio-element');
      audio.addEventListener('MozAudioAvailable', audioAvailable, false);
      audio.addEventListener('loadedmetadata', loadedMetadata, false);

      // FFT from dsp.js, see below
      var FFT = function(bufferSize, sampleRate) {
        this.bufferSize   = bufferSize;
        this.sampleRate   = sampleRate;
        this.spectrum     = new Float32Array(bufferSize/2);
        this.real         = new Float32Array(bufferSize);
        this.imag         = new Float32Array(bufferSize);
        this.reverseTable = new Uint32Array(bufferSize);
        this.sinTable     = new Float32Array(bufferSize);
        this.cosTable     = new Float32Array(bufferSize);

        var limit = 1,
            bit = bufferSize &gt;&gt; 1;

        while ( limit &lt; bufferSize ) {
          for ( var i = 0; i &lt; limit; i++ ) {
            this.reverseTable[i + limit] = this.reverseTable[i] + bit;
          }

          limit = limit &lt;&lt; 1;
          bit = bit &gt;&gt; 1;
        }

        for ( var i = 0; i &lt; bufferSize; i++ ) {
          this.sinTable[i] = Math.sin(-Math.PI/i);
          this.cosTable[i] = Math.cos(-Math.PI/i);
        }
      };

      FFT.prototype.forward = function(buffer) {
        var bufferSize   = this.bufferSize,
            cosTable     = this.cosTable,
            sinTable     = this.sinTable,
            reverseTable = this.reverseTable,
            real         = this.real,
            imag         = this.imag,
            spectrum     = this.spectrum;

        if ( bufferSize&nbsp;!== buffer.length ) {
          throw "Supplied buffer is not the same size as defined FFT. FFT Size: " + bufferSize + " Buffer Size: " + buffer.length;
        }

        for ( var i = 0; i &lt; bufferSize; i++ ) {
          real[i] = buffer[reverseTable[i]];
          imag[i] = 0;
        }

        var halfSize = 1,
            phaseShiftStepReal,	
            phaseShiftStepImag,
            currentPhaseShiftReal,
            currentPhaseShiftImag,
            off,
            tr,
            ti,
            tmpReal,	
            i;

        while ( halfSize &lt; bufferSize ) {
          phaseShiftStepReal = cosTable[halfSize];
          phaseShiftStepImag = sinTable[halfSize];
          currentPhaseShiftReal = 1.0;
          currentPhaseShiftImag = 0.0;

          for ( var fftStep = 0; fftStep &lt; halfSize; fftStep++ ) {
            i = fftStep;

            while ( i &lt; bufferSize ) {
              off = i + halfSize;
              tr = (currentPhaseShiftReal * real[off]) - (currentPhaseShiftImag * imag[off]);
              ti = (currentPhaseShiftReal * imag[off]) + (currentPhaseShiftImag * real[off]);

              real[off] = real[i] - tr;
              imag[off] = imag[i] - ti;
              real[i] += tr;
              imag[i] += ti;

              i += halfSize &lt;&lt; 1;
            }

            tmpReal = currentPhaseShiftReal;
            currentPhaseShiftReal = (tmpReal * phaseShiftStepReal) - (currentPhaseShiftImag * phaseShiftStepImag);
            currentPhaseShiftImag = (tmpReal * phaseShiftStepImag) + (currentPhaseShiftImag * phaseShiftStepReal);
          }

          halfSize = halfSize &lt;&lt; 1;
	}

        i = bufferSize/2;
        while(i--) {
          spectrum[i] = 2 * Math.sqrt(real[i] * real[i] + imag[i] * imag[i]) / bufferSize;
	}
      };
    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre> 
     <h5><span class="mw-headline" id="Writing_Audio">Writing Audio</span></h5> 
     <p>It is also possible to setup an &lt;audio&gt; element for raw writing from script (i.e., without a <i>src</i> attribute). Content scripts can specify the audio stream's characteristics, then write audio samples using the following methods: </p>
     <p><code>mozSetup(channels, sampleRate)</code> </p> 
     <pre>
// Create a new audio element
var audioOutput = new Audio();
// Set up audio element with 2 channel, 44.1KHz audio stream.
audioOutput.mozSetup(2, 44100);
</pre> 
     <p><code>mozWriteAudio(buffer)</code> </p> 
     <pre>
// Write samples using a JS Array
var samples = [0.242, 0.127, 0.0, -0.058, -0.242, ...];
var numberSamplesWritten = audioOutput.mozWriteAudio(samples);

// Write samples using a Typed Array
var samples = new Float32Array([0.242, 0.127, 0.0, -0.058, -0.242, ...]);
var numberSamplesWritten = audioOutput.mozWriteAudio(samples);
</pre> 
     <p><code>mozCurrentSampleOffset()</code> </p> 
     <pre>
// Get current audible position of the underlying audio stream, measured in samples.
var currentSampleOffset = audioOutput.mozCurrentSampleOffset();
</pre> 
     <p>Since the <b>MozAudioAvailable</b> event and the <b>mozWriteAudio()</b> method both use <b>Float32Array</b>, it is possible to take the output of one audio stream and pass it directly (or process first and then pass) to a second: </p> 
     <pre>
&lt;audio id="a1" 
       src="song.ogg"
       controls&gt;
&lt;/audio&gt;
&lt;script&gt;
var a1 = document.getElementById('a1'),
    a2 = new Audio(),
    buffers = [];

function loadedMetadata() {
  // Mute a1 audio.
  a1.volume = 0;
  // Setup a2 to be identical to a1, and play through there.
  a2.mozSetup(a1.mozChannels, a1.mozSampleRate);
}

function audioAvailable(event) {
  // Write the current framebuffer
  var frameBuffer = event.frameBuffer; // frameBuffer is Float32Array
  writeAudio(frameBuffer);
}

a1.addEventListener('MozAudioAvailable', audioAvailable, false);
a1.addEventListener('loadedmetadata', loadedMetadata, false);

function writeAudio(audioBuffer) {
  // audioBuffer is Float32Array
  buffers.push({buffer: audioBuffer, position: 0});

  // If there's buffered data, write that
  while(buffers.length &gt; 0) {
    var buffer = buffers[0].buffer;
    var position = buffers[0].position;
    var written = a2.mozWriteAudio(buffer.subarray(position));
    // // If all data wasn't written, keep it in the buffers:
    if(position + written &lt; buffer.length) {
      buffers[0].position = position + written;
      break;
    }
    buffers.shift();
  }
}
&lt;/script&gt;
</pre> 
     <p>Audio data written using the <b>mozWriteAudio()</b> method needs to be written at a regular interval in equal portions, in order to keep a little ahead of the current sample offset (the sample offset that is currently being played by the hardware can be obtained with <b>mozCurrentSampleOffset()</b>), where a little means something on the order of 500ms of samples. For example, if working with 2 channels at 44100 samples per second, a writing interval of 100ms, and a pre-buffer equal to 500ms, one would write an array of (2 * 44100 / 10) = 8820 samples, and a total of (currentSampleOffset + 2 * 44100 / 2). </p>
     <p>It's also possible to auto detect the minimal duration of the pre-buffer, such that the sound is played without interruptions, and lag between writing and playback is minimal. To do this start writing the data in small portions and wait for the value returned by <b>mozCurrentSampleOffset()</b> to be more than 0. </p> 
     <pre>
var prebufferSize = sampleRate * 0.020; // Initial buffer is 20 ms
var autoLatency = true, started = new Date().valueOf();
...
// Auto latency detection
if (autoLatency) {
  prebufferSize = Math.floor(sampleRate * (new Date().valueOf() - started) / 1000);
  if (audio.mozCurrentSampleOffset()) { // Play position moved?
    autoLatency = false;
  }
}
</pre> 
     <h5><span class="mw-headline" id="Complete_Example:_Creating_a_Web_Based_Tone_Generator">Complete Example: Creating a Web Based Tone Generator</span></h5> 
     <p>This example creates a simple tone generator, and plays the resulting tone. </p> 
     <pre>
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;JavaScript Audio Write Example&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;input type="text" size="4" id="freq" value="440"&gt;&lt;label for="hz"&gt;Hz&lt;/label&gt;
    &lt;button onclick="start()"&gt;play&lt;/button&gt;
    &lt;button onclick="stop()"&gt;stop&lt;/button&gt;

    &lt;script type="text/javascript"&gt;      
      function AudioDataDestination(sampleRate, readFn) {
        // Initialize the audio output.
        var audio = new Audio();
        audio.mozSetup(1, sampleRate);

        var currentWritePosition = 0;
        var prebufferSize = sampleRate / 2; // buffer 500ms
        var tail = null, tailPosition;

        // The function called with regular interval to populate 
        // the audio output buffer.
        setInterval(function() {
          var written;
          // Check if some data was not written in previous attempts.
          if(tail) {
            written = audio.mozWriteAudio(tail.subarray(tailPosition));
            currentWritePosition += written;
            tailPosition += written;
            if(tailPosition &lt; tail.length) {
              // Not all the data was written, saving the tail...
              return; // ... and exit the function.
            }
            tail = null;
          }

          // Check if we need add some data to the audio output.
          var currentPosition = audio.mozCurrentSampleOffset();
          var available = currentPosition + prebufferSize - currentWritePosition;
          if(available &gt; 0) {
            // Request some sound data from the callback function.
            var soundData = new Float32Array(available);
            readFn(soundData);

            // Writting the data.
            written = audio.mozWriteAudio(soundData);
            if(written &lt; soundData.length) {
              // Not all the data was written, saving the tail.
              tail = soundData;
              tailPosition = written;
            }
            currentWritePosition += written;
          }
        }, 100);
      }

      // Control and generate the sound.

      var frequency = 0, currentSoundSample;
      var sampleRate = 44100;

      function requestSoundData(soundData) {
        if (!frequency) { 
          return; // no sound selected
        }

        var k = 2* Math.PI * frequency / sampleRate;
        for (var i=0, size=soundData.length; i&lt;size; i++) {
          soundData[i] = Math.sin(k * currentSoundSample++);
        }        
      }

      var audioDestination = new AudioDataDestination(sampleRate, requestSoundData);

      function start() {
        currentSoundSample = 0;
        frequency = parseFloat(document.getElementById("freq").value);
      }

      function stop() {
        frequency = 0;
      }
  &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre> 
     <h2><span class="mw-headline" id="DOM_Implementation">DOM Implementation</span></h2> 
     <h5><span class="mw-headline" id="nsIDOMNotifyAudioAvailableEvent">nsIDOMNotifyAudioAvailableEvent</span></h5> 
     <p>Audio data is made available via the following event: </p> 
     <ul> 
      <li> <b>Event</b>: AudioAvailableEvent </li> 
      <li> <b>Event handler</b>: onmozaudioavailable </li> 
     </ul> 
     <p>The <b>AudioAvailableEvent</b> is defined as follows: </p> 
     <pre>
interface nsIDOMNotifyAudioAvailableEvent&nbsp;: nsIDOMEvent
{
  // frameBuffer is really a Float32Array
  readonly attribute jsval  frameBuffer;
  readonly attribute float  time;
};
</pre> 
     <p>The <b>frameBuffer</b> attribute contains a typed array (<b>Float32Array</b>) with the raw audio data (32-bit float values) obtained from decoding the audio (e.g., the raw data being sent to the audio hardware vs. encoded audio). This is of the form [channel1, channel2, ..., channelN, channel1, channel2, ..., channelN, ...]. All audio frames are normalized to a length of channels * 1024 by default, but could be any length between 512 and 16384 if the user has set a different length using the <b>mozFrameBufferLength</b> attribute. </p>
     <p>The <b>time</b> attribute contains a float representing the time in seconds of the first sample in the <b>frameBuffer</b> array since the start of the audio track. </p> 
     <h5><span class="mw-headline" id="nsIDOMHTMLMediaElement_additions">nsIDOMHTMLMediaElement additions</span></h5> 
     <p>Audio metadata is made available via three new attributes on the HTMLMediaElement. By default these attributes throw if accessed before the <b>loadedmetadata</b> event occurs. Users who need this info before the audio starts playing should not use <b>autoplay</b>, since the audio might start before a loadmetadata handler has run. </p>
     <p>The three new attributes are defined as follows: </p> 
     <pre>
  readonly attribute unsigned long mozChannels;
  readonly attribute unsigned long mozSampleRate;
           attribute unsigned long mozFrameBufferLength;
</pre> 
     <p>The <b>mozChannels</b> attribute contains the number of channels in the audio resource (e.g., 2). The <b>mozSampleRate</b> attribute contains the number of samples per second that will be played, for example 44100. Both are read-only. </p>
     <p>The <b>mozFrameBufferLength</b> attribute indicates the number of samples that will be returned in the framebuffer of each <b>MozAudioAvailable</b> event. This number is a total for all channels, and by default is set to be the number of channels * 1024 (e.g., 2 channels * 1024 samples = 2048 total). </p>
     <p>The <b>mozFrameBufferLength</b> attribute can also be set to a new value, if users want lower latency, or larger amounts of data, etc. The size given <b>must</b> be a number between 512 and 16384. Using any other size will result in an exception being thrown. The best time to set a new length is after the <b>loadedmetadata</b> event fires, when the audio info is known, but before the audio has started or <b>MozAudioAvailable</b> events begun firing. </p> 
     <h5><span class="mw-headline" id="nsIDOMHTMLAudioElement_additions">nsIDOMHTMLAudioElement additions</span></h5> 
     <p>The HTMLAudioElement has also been extended to allow write access. Audio writing is achieved by adding three new methods: </p> 
     <pre>
  void mozSetup(in long channels, in long rate);
  unsigned long mozWriteAudio(array); // array is Array() or Float32Array()
  unsigned long long mozCurrentSampleOffset();
</pre> 
     <p>The <b>mozSetup()</b> method allows an &lt;audio&gt; element to be setup for writing from script. This method <b>must</b> be called before <b>mozWriteAudio</b> or <b>mozCurrentSampleOffset</b> can be called, since an audio stream has to be created for the media element. It takes two arguments: </p> 
     <ol> 
      <li> <b>channels</b> - the number of audio channels (e.g., 2) </li> 
      <li> <b>rate</b> - the audio's sample rate (e.g., 44100 samples per second) </li> 
     </ol> 
     <p>The choices made for <b>channel</b> and <b>rate</b> are significant, because they determine the amount of data you must pass to <b>mozWriteAudio()</b>. That is, you must pass an array with enough data for each channel specified in <b>mozSetup()</b>. </p>
     <p>The <b>mozSetup()</b> method, if called more than once, will recreate a new audio stream (destroying an existing one if present) with each call. Thus it is safe to call this more than once, but unnecessary. </p>
     <p>The <b>mozWriteAudio()</b> method can be called after <b>mozSetup()</b>. It allows audio data to be written directly from script. It takes one argument, <b>array</b>. This is a JS Array (i.e., new Array()) or a typed float array (i.e., new Float32Array()) containing the audio data (floats) you wish to write. It must be 0 or N elements in length, where N&nbsp;% channels == 0, otherwise an exception is thrown. </p>
     <p>The <b>mozWriteAudio()</b> method returns the number of samples that were just written, which may or may not be the same as the number in <b>array</b>. Only the number of samples that can be written without blocking the audio hardware will be written. It is the responsibility of the caller to deal with any samples that don't get written in the first pass (e.g., buffer and write in the next call). </p>
     <p>The <b>mozCurrentSampleOffset()</b> method can be called after <b>mozSetup()</b>. It returns the current position (measured in samples) of the audio stream. This is useful when determining how much data to write with <b>mozWriteAudio()</b>. </p>
     <p>All of <b>mozWriteAudio()</b>, <b>mozCurrentSampleOffset()</b>, and <b>mozSetup()</b> will throw exceptions if called out of order. <b>mozSetup()</b> will also throw if a <i>src</i> attribute has previously been set on the audio element (i.e., you can't do both at the same time). </p> 
     <h5><span class="mw-headline" id="Security">Security</span></h5> 
     <p>Similar to the &lt;canvas&gt; element and its <b>getImageData</b> method, the <b>MozAudioAvailable</b> event's <b>frameBuffer</b> attribute protects against information leakage between origins. </p>
     <p>The <b>MozAudioAvailable</b> event's <b>frameBuffer</b> attribute will throw if the origin of audio resource does not match the document's origin. NOTE: this will affect users who have the security.fileuri.strict_origin_policy set, and are working locally with file:/// URIs. </p> 
     <h5><span class="mw-headline" id="Compatibility_with_Audio_Backends">Compatibility with Audio Backends</span></h5> 
     <p>The current MozAudioAvailable implementation integrates with Mozilla's decoder abstract base classes, and therefore, any audio decoder which uses these base classes automatically dispatches MozAudioAvailable events. At the time of writing, this includes the Ogg, WebM, and Wave decoders. </p> 
     <h2><span class="mw-headline" id="Additional_Resources">Additional Resources</span></h2> 
     <p>A series of blog posts document the evolution and implementation of this API: <a rel="nofollow" class="external free" href="http://vocamus.net/dave/?cat=25">http://vocamus.net/dave/?cat=25</a>. Another overview by Al MacDonald is available <a rel="nofollow" class="external text" href="http://weblog.bocoup.com/web-audio-all-aboard">here</a>. </p>
     <p>Al has also written 2 very good tutorials and video demos of <a rel="nofollow" class="external text" href="http://weblog.bocoup.com/read-html5-audio-data-with-firefox-4">reading</a> and <a rel="nofollow" class="external text" href="http://weblog.bocoup.com/generate-sound-with-javascript-in-firefox-4">writing</a> audio with the API. </p>
     <p>The BBC Research and Development Blog has also done an excellent overview of the API <a rel="nofollow" class="external text" href="http://www.bbc.co.uk/blogs/researchanddevelopment/2010/11/mozilla-audio-data-api.shtml">here</a>. </p> 
     <h3><span class="mw-headline" id="Bug">Bug</span></h3> 
     <p>The work on this API is available in Mozilla <a rel="nofollow" class="external text" href="https://bugzilla.mozilla.org/show_bug.cgi?id=490705">bug 490705</a>. </p> 
     <h3><span class="mw-headline" id="Obtaining_Builds">Obtaining Builds</span></h3> 
     <p><a rel="nofollow" class="external text" href="http://nightly.mozilla.org/">Firefox trunk nightlies</a> include the Audio Data API (starting with 2010-08-26 builds). </p> 
     <h3><span class="mw-headline" id="JavaScript_Audio_Libraries">JavaScript Audio Libraries</span></h3> 
     <ul> 
      <li> We have started work on a JavaScript library to make building audio web apps easier. Details are <a href="/Audio_Data_API_JS_Library" title="Audio Data API JS Library">here</a> and <a rel="nofollow" class="external free" href="https://github.com/corbanbrook/dsp.js">https://github.com/corbanbrook/dsp.js</a>. </li> 
      <li> <a rel="nofollow" class="external text" href="https://github.com/corbanbrook/audionode.js">audionode.js</a> acts as a javascript bridge between the Web Audio API and the Audio Data API allowing us to run the examples <a rel="nofollow" class="external free" href="http://weare.buildingsky.net/processing/audionode.js/examples/index.html">http://weare.buildingsky.net/processing/audionode.js/examples/index.html</a>. </li> 
      <li> <a rel="nofollow" class="external text" href="https://github.com/notmasteryet/audiodata">Audio Data API Objects</a> - An high level abstraction (and an usage example) of the Audio Data API. </li> 
      <li> <a rel="nofollow" class="external text" href="https://github.com/bfirsh/dynamicaudio.js">dynamicaudio.js</a> - An interface for writing audio with a Flash fall back for older browsers. </li> 
      <li> <a rel="nofollow" class="external text" href="https://beatdetektor.svn.sourceforge.net/svnroot/beatdetektor/trunk/core/js/beatdetektor.js">Beat Detektor</a> by Charles Cliffe, uses dsp.js to add beat detection. </li> 
      <li> <a rel="nofollow" class="external text" href="https://github.com/jussi-kalliokoski/audiolib.js">audiolib.js</a> by Jussi Kalliokoski, a powerful audio tools library for JavaScript, compatible with the Audio Data API and Chrome's Audio API. </li> 
      <li> <a rel="nofollow" class="external text" href="https://github.com/oampo/Audiolet">Audiolet</a> - A JavaScript library for real-time audio synthesis and composition from within the browser </li> 
      <li> <a rel="nofollow" class="external text" href="https://github.com/grantgalitz/XAudioJS">XAudioJS</a> - A JavaScript library that provides a raw audio sample writing access to the mozilla audio data and web audio APIs. Provides a basic write and callback system so the developer can be assured to have gapless audio for these two APIs. Also provides a fallback WAV PCM data URI generator that is not guaranteed to be gapless. </li> 
      <li> <a rel="nofollow" class="external text" href="http://www.gregjopa.com/2011/05/calculate-note-frequencies-in-javascript-with-music-js/">Music.js, library containing functions and data sets to generate notes, intervals, chords, and scales</a> </li> 
      <li> <a rel="nofollow" class="external text" href="https://github.com/BillyWM/jsmodplayer">Javascript .MOD and .XM music player</a> </li> 
     </ul> 
     <h3><span class="mw-headline" id="Working_Audio_Data_Demos">Working Audio Data Demos</span></h3> 
     <p><b>NOTE: we recently took down two servers that were hosting many of these demos. We are working to find a new home for them.</b> </p>
     <p>A number of working demos have been created, including: </p> 
     <ul> 
      <li> <a rel="nofollow" class="external text" href="http://videos.mozilla.org/serv/blizzard/audio-slideshow">Overview slideshow demo of various features</a> (<a rel="nofollow" class="external text" href="http://www.youtube.com/watch?v=oJ1UsLoPX3E">video here</a>) </li> 
     </ul> 
     <ul> 
      <li> Audio Visualizations 
       <ul> 
        <li> <a rel="nofollow" class="external free" href="http://tllabs.io/audiopaper/">http://tllabs.io/audiopaper/</a> paper.js audio visualization </li> 
        <li> <a rel="nofollow" class="external free" href="http://traction.untergrund.net/slamdown/">http://traction.untergrund.net/slamdown/</a> </li> 
        <li> <a rel="nofollow" class="external free" href="http://www.nihilogic.dk/labs/pocket_full_of_html5/">http://www.nihilogic.dk/labs/pocket_full_of_html5/</a> (Demo by Jacob Seidelin) </li> 
        <li> <a rel="nofollow" class="external free" href="http://weare.buildingsky.net/processing/dsp.js/examples/fft.html">http://weare.buildingsky.net/processing/dsp.js/examples/fft.html</a> </li> 
        <li> <a rel="nofollow" class="external free" href="http://www.storiesinflight.com/jsfft/visualizer/index.html">http://www.storiesinflight.com/jsfft/visualizer/index.html</a> (Demo by Thomas Sturm) </li> 
        <li> <a rel="nofollow" class="external free" href="http://www.grantgalitz.org/sound_test/">http://www.grantgalitz.org/sound_test/</a> WAV Decoder &amp; Visualizer (Pre-loaded) </li> 
        <li> <a rel="nofollow" class="external free" href="http://www.grantgalitz.org/wav_player/">http://www.grantgalitz.org/wav_player/</a> WAV Decoder &amp; Visualizer (Load in your own .wav) </li> 
       </ul> </li> 
     </ul> 
     <ul> 
      <li> Applying Realtime Audio Effects 
       <ul> 
        <li> Volume, pitch, etc. UI for audio - <a rel="nofollow" class="external free" href="https://developer.mozilla.org/en-US/demos/detail/voron">https://developer.mozilla.org/en-US/demos/detail/voron</a> (homepage: <a rel="nofollow" class="external free" href="http://kievII.net">http://kievII.net</a>) </li> 
        <li> JS IIR Filter <a rel="nofollow" class="external free" href="http://weare.buildingsky.net/processing/dsp.js/examples/filter.html">http://weare.buildingsky.net/processing/dsp.js/examples/filter.html</a> (video <a rel="nofollow" class="external text" href="http://vimeo.com/11335434">here</a>) </li> 
        <li> Vocodes a formant with a carrier wave <a rel="nofollow" class="external free" href="http://weare.buildingsky.net/processing/dsp.js/examples/vocoder.html">http://weare.buildingsky.net/processing/dsp.js/examples/vocoder.html</a> </li> 
        <li> Biquad Filter example <a rel="nofollow" class="external free" href="http://weare.buildingsky.net/processing/dsp.js/examples/biquad.html">http://weare.buildingsky.net/processing/dsp.js/examples/biquad.html</a> </li> 
        <li> Graphic EQ example <a rel="nofollow" class="external free" href="http://weare.buildingsky.net/processing/dsp.js/examples/grapheq.html">http://weare.buildingsky.net/processing/dsp.js/examples/grapheq.html</a> </li> 
        <li> Delay effect <a rel="nofollow" class="external free" href="http://code.almeros.com/code-examples/delay-firefox-audio-api/">http://code.almeros.com/code-examples/delay-firefox-audio-api/</a> (video of older version <a rel="nofollow" class="external text" href="http://vimeo.com/11780707">here</a>) </li> 
        <li> Reverb effect <a rel="nofollow" class="external free" href="http://code.almeros.com/code-examples/reverb-firefox-audio-api/">http://code.almeros.com/code-examples/reverb-firefox-audio-api/</a> (video <a rel="nofollow" class="external text" href="http://vimeo.com/13386796">here</a>) </li> 
       </ul> </li> 
     </ul> 
     <ul> 
      <li> Generating and Playing Audio 
       <ul> 
        <li> <a rel="nofollow" class="external free" href="http://bitterspring.net/blog/2012/01/25/morning-star-synth-0-1-released/">http://bitterspring.net/blog/2012/01/25/morning-star-synth-0-1-released/</a> </li> 
        <li> <a rel="nofollow" class="external free" href="http://onlinetonegenerator.com/">http://onlinetonegenerator.com/</a> </li> 
        <li> <a rel="nofollow" class="external text" href="http://jsmad.org/">mp3 decoder in js</a> </li> 
        <li> <a rel="nofollow" class="external text" href="http://cosinusoidally.github.com/mp2dec.js/">mp2 decoder in js</a> </li> 
        <li> <a rel="nofollow" class="external text" href="http://www.oampo.co.uk/2011/05/technocrat/">Ambient techno machine</a> </li> 
        <li> <a rel="nofollow" class="external text" href="http://www.gregjopa.com/2011/05/calculate-note-frequencies-in-javascript-with-music-js/">Music.js, library containing functions and data sets to generate notes, intervals, chords, and scales</a> </li> 
        <li> <a rel="nofollow" class="external text" href="https://hacks.mozilla.org/2011/01/html5guitar/">HTML5 Guitar Tab Player</a> </li> 
        <li> <a rel="nofollow" class="external text" href="http://automata.cc/src/vivace/experiments/matrix.html">Tone matrix using Audiolet.js</a> </li> 
        <li> <a rel="nofollow" class="external text" href="http://www.oampo.co.uk/labs/audiolet-demo/">Generating music in JS via audiolet.js</a>, <a rel="nofollow" class="external text" href="http://www.oampo.co.uk/labs/breakbeat/">breakbeat demo</a> </li> 
        <li> <a rel="nofollow" class="external text" href="http://humphd.github.com/sfxr.js/">sfxr.js</a> - sound effect generator/editor for video games. </li> 
        <li> <a rel="nofollow" class="external text" href="http://jonbro.tk/blog/2010/09/19/html_5_chip_tracker.html">JavaScript Chip Tracker app</a> (demo by Jonathan Brodsky) </li> 
        <li> JavaScript Audio Sampler <a rel="nofollow" class="external free" href="http://weare.buildingsky.net/processing/dsp.js/examples/sampler.html">http://weare.buildingsky.net/processing/dsp.js/examples/sampler.html</a> </li> 
        <li> SamplePlayer, SampleLoader, Sequencer and Keyboard <a rel="nofollow" class="external free" href="http://code.almeros.com/code-examples/sampler-firefox-audio-api/">http://code.almeros.com/code-examples/sampler-firefox-audio-api/</a> (video <a rel="nofollow" class="external text" href="http://vimeo.com/13805893">here</a>) </li> 
        <li> Square Wave Generation <a rel="nofollow" class="external free" href="http://weare.buildingsky.net/processing/dsp.js/examples/squarewave.html">http://weare.buildingsky.net/processing/dsp.js/examples/squarewave.html</a> </li> 
        <li> Random Noise Generation <a rel="nofollow" class="external free" href="http://weare.buildingsky.net/processing/dsp.js/examples/nowave.html">http://weare.buildingsky.net/processing/dsp.js/examples/nowave.html</a> </li> 
        <li> JS Multi-Oscillator Synthesizer <a rel="nofollow" class="external free" href="http://weare.buildingsky.net/processing/dsp.js/examples/synthesizer.html">http://weare.buildingsky.net/processing/dsp.js/examples/synthesizer.html</a> (video <a rel="nofollow" class="external text" href="http://vimeo.com/11411533">here</a>) </li> 
        <li> Bloop <a rel="nofollow" class="external free" href="http://async5.org/audiodata/examples/bloop-ea/bloop-audiodata.html">http://async5.org/audiodata/examples/bloop-ea/bloop-audiodata.html</a> </li> 
        <li> JavaScript Text to Speech engine <a rel="nofollow" class="external free" href="http://async5.org/audiodata/tts/index.html">http://async5.org/audiodata/tts/index.html</a> </li> 
        <li> Toy Piano <a rel="nofollow" class="external free" href="http://async5.org/audiodata/examples/piano.html">http://async5.org/audiodata/examples/piano.html</a> (and the sample-based piano <a rel="nofollow" class="external free" href="http://async5.org/audiodata/examples/piano-s/piano2.html">http://async5.org/audiodata/examples/piano-s/piano2.html</a>) </li> 
        <li> Csound Shaker Instrument <a rel="nofollow" class="external free" href="http://async5.org/audiodata/csound/shaker.htm">http://async5.org/audiodata/csound/shaker.htm</a> and Bar Instrument <a rel="nofollow" class="external free" href="http://async5.org/audiodata/csound/bar.htm">http://async5.org/audiodata/csound/bar.htm</a> </li> 
        <li> Canon Theremin Piano <a rel="nofollow" class="external free" href="http://mtg.upf.edu/static/media/canon-theremin-piano.html">http://mtg.upf.edu/static/media/canon-theremin-piano.html</a> (by Zacharias Vamvakousis zackbam@gmail.com). </li> 
        <li> Manipulate music example using mouse and accelerometer <a rel="nofollow" class="external free" href="http://blog.dt.in.th/stuff/audiodata/">http://blog.dt.in.th/stuff/audiodata/</a> (Thai Pangsakulyanont) </li> 
        <li> Tuning exploration, Wicki keyboard and Karplus-Strong synthesizer <a rel="nofollow" class="external free" href="http://www.toverlamp.org/static/wickisynth/wickisynth.html">http://www.toverlamp.org/static/wickisynth/wickisynth.html</a> (Piers Titus van der Torren) </li> 
        <li> Modular Synthesizer with MIDI, control and audio ports. <a rel="nofollow" class="external free" href="http://www.niiden.com/jstmodular/">http://www.niiden.com/jstmodular/</a> (Jussi Kalliokoski) </li> 
        <li> Dual-axis Theremin controlling pitch and volume with cursor position. <a rel="nofollow" class="external free" href="http://stu.ie/?p=2599">http://stu.ie/?p=2599</a> (Stuart Gilbert) </li> 
        <li> JavaScript "Image to Sound" generator <a rel="nofollow" class="external free" href="http://zhangjw.bai-hua.org/audio_test6.html">http://zhangjw.bai-hua.org/audio_test6.html</a> (ZhangJW) </li> 
        <li> XAudioJS library test page <a rel="nofollow" class="external free" href="http://www.grantgalitz.org/sound_test/">http://www.grantgalitz.org/sound_test/</a> </li> 
       </ul> </li> 
     </ul> 
     <ul> 
      <li> Beat Detection (also showing use of WebGL for 3D visualizations) 
       <ul> 
        <li> <a rel="nofollow" class="external free" href="http://people.mozilla.com/~prouget/demos/boomboom/index.html">http://people.mozilla.com/~prouget/demos/boomboom/index.html</a> </li> 
        <li> <a rel="nofollow" class="external free" href="http://cubicvr.org/CubicVR.js/bd3/BeatDetektor1HD.html">http://cubicvr.org/CubicVR.js/bd3/BeatDetektor1HD.html</a> (video <a rel="nofollow" class="external text" href="http://vimeo.com/11345262">here</a>) </li> 
        <li> <a rel="nofollow" class="external free" href="http://cubicvr.org/CubicVR.js/bd3/BeatDetektor2HD.html">http://cubicvr.org/CubicVR.js/bd3/BeatDetektor2HD.html</a> (video of older version <a rel="nofollow" class="external text" href="http://vimeo.com/11345685">here</a>) </li> 
        <li> <a rel="nofollow" class="external free" href="http://cubicvr.org/CubicVR.js/bd3/BeatDetektor3HD.html">http://cubicvr.org/CubicVR.js/bd3/BeatDetektor3HD.html</a> (video <a rel="nofollow" class="external text" href="http://www.youtube.com/watch?v=OxoFcyKYwr0&amp;fmt=22">here</a>) </li> 
        <li> <a rel="nofollow" class="external free" href="http://cubicvr.org/CubicVR.js/bd3/BeatDetektor3HDFX.html">http://cubicvr.org/CubicVR.js/bd3/BeatDetektor3HDFX.html</a> (same, but with more effects) </li> 
        <li> <a rel="nofollow" class="external free" href="http://cubicvr.org/CubicVR.js/bd3/BeatDetektor4HD.html">http://cubicvr.org/CubicVR.js/bd3/BeatDetektor4HD.html</a> (video <a rel="nofollow" class="external text" href="http://www.youtube.com/watch?v=dym4DqpJuDk&amp;fmt=22">here</a>) </li> 
        <li> <a rel="nofollow" class="external free" href="http://cubicvr.org/CubicVR.js/bd_fluid_sim/BD_GPUFluid.html">http://cubicvr.org/CubicVR.js/bd_fluid_sim/BD_GPUFluid.html</a> </li> 
       </ul> </li> 
     </ul> 
     <ul> 
      <li> Writing Audio from JavaScript, Digital Signal Processing 
       <ul> 
        <li> API Example: <a rel="nofollow" class="external text" href="http://audioscene.org/?p=171">Inverted Waveform Cancellation</a> </li> 
        <li> API Example: <a rel="nofollow" class="external text" href="http://audioscene.org/?p=255">Stereo Splitting and Panning</a> </li> 
        <li> API Example: <a rel="nofollow" class="external text" href="http://audioscene.org/?p=267/">Mid-Side Microphone Decoder</a> </li> 
        <li> API Example: <a rel="nofollow" class="external text" href="http://audioscene.org/?p=279">Ambient Extraction Mixer</a> </li> 
        <li> API Example: <a rel="nofollow" class="external text" href="http://audioscene.org/?p=302">Worker Thread Audio Processing</a> </li> 
       </ul> </li> 
     </ul> 
     <ul> 
      <li> Audio Games 
       <ul> 
        <li> <a rel="nofollow" class="external free" href="http://www.oampo.co.uk/labs/fireflies/">http://www.oampo.co.uk/labs/fireflies/</a> </li> 
        <li> <a rel="nofollow" class="external free" href="http://www.oampo.co.uk/labs/siren-song/">http://www.oampo.co.uk/labs/siren-song/</a> </li> 
       </ul> </li> 
     </ul> 
     <h3><span class="mw-headline" id="Demos_Needing_to_be_Updated_to_New_API">Demos Needing to be Updated to New API</span></h3> 
     <ul> 
      <li> FFT visualization (calculated with js) 
       <ul> 
        <li> Experimental JavaScript port Pure Data <a rel="nofollow" class="external free" href="http://mccormick.cx/dev/webpd/">http://mccormick.cx/dev/webpd/</a> with demo <a rel="nofollow" class="external free" href="http://mccormick.cx/dev/webpd/demos/processingjs-basic-example-with-audio/index.html">http://mccormick.cx/dev/webpd/demos/processingjs-basic-example-with-audio/index.html</a> </li> 
       </ul> </li> 
     </ul> 
     <ul> 
      <li>
       <ul> 
        <li> <a rel="nofollow" class="external free" href="http://ondras.zarovi.cz/demos/audio/">http://ondras.zarovi.cz/demos/audio/</a> </li> 
        <li> <a rel="nofollow" class="external free" href="http://code.bocoup.com/processing-js/3d-fft/viz.xhtml">http://code.bocoup.com/processing-js/3d-fft/viz.xhtml</a> </li> 
       </ul> </li> 
     </ul> 
     <ul> 
      <li> Visualizing sound using the video element 
       <ul> 
        <li> <a rel="nofollow" class="external free" href="http://bocoup.com/core/code/firefox-audio/whale-fft2/whale-fft.html">http://bocoup.com/core/code/firefox-audio/whale-fft2/whale-fft.html</a> (video <a rel="nofollow" class="external text" href="http://vimeo.com/8872808">here</a>) </li> 
       </ul> </li> 
     </ul> 
     <p><br> </p> 
     <h3><span class="mw-headline" id="Third_Party_Discussions">Third Party Discussions</span></h3> 
     <p>A number of people have written about our work, including: </p> 
     <ul> 
      <li> <a rel="nofollow" class="external free" href="http://ajaxian.com/archives/amazing-audio-sampling-in-javascript-with-firefox">http://ajaxian.com/archives/amazing-audio-sampling-in-javascript-with-firefox</a> </li> 
      <li> <a rel="nofollow" class="external free" href="http://createdigitalmusic.com/2010/05/03/real-sound-synthesis-now-an-open-standard-in-the-browser/">http://createdigitalmusic.com/2010/05/03/real-sound-synthesis-now-an-open-standard-in-the-browser/</a> </li> 
      <li> <a rel="nofollow" class="external free" href="http://www.webmonkey.com/2010/05/new-html5-tools-make-your-browser-sing-and-dance/">http://www.webmonkey.com/2010/05/new-html5-tools-make-your-browser-sing-and-dance/</a> </li> 
      <li> <a rel="nofollow" class="external free" href="http://www.wired.co.uk/news/archive/2010-05/04/new-html5-tools-give-adobe-flash-the-finger">http://www.wired.co.uk/news/archive/2010-05/04/new-html5-tools-give-adobe-flash-the-finger</a> </li> 
      <li> <a rel="nofollow" class="external free" href="http://hacks.mozilla.org/2010/04/beyond-html5-experiments-with-interactive-audio/">http://hacks.mozilla.org/2010/04/beyond-html5-experiments-with-interactive-audio/</a> </li> 
      <li> <a rel="nofollow" class="external free" href="http://schepers.cc/?p=212">http://schepers.cc/?p=212</a> </li> 
      <li> <a rel="nofollow" class="external free" href="http://createdigitalmusic.com/2010/05/27/browser-madness-3d-music-mountainscapes-web-based-pd-patching/">http://createdigitalmusic.com/2010/05/27/browser-madness-3d-music-mountainscapes-web-based-pd-patching/</a> </li> 
      <li> <a rel="nofollow" class="external free" href="http://news.slashdot.org/story/10/05/26/1936224/Breakthroughs-In-HTML-Audio-Via-Manipulation-With-JavaScript">http://news.slashdot.org/story/10/05/26/1936224/Breakthroughs-In-HTML-Audio-Via-Manipulation-With-JavaScript</a> </li> 
      <li> <a rel="nofollow" class="external free" href="http://ajaxian.com/archives/amazing-audio-api-javascript-demos">http://ajaxian.com/archives/amazing-audio-api-javascript-demos</a> </li> 
      <li> <a rel="nofollow" class="external free" href="http://www.webmonkey.com/2010/08/sampleplayer-makes-your-browser-sing-sans-flash/">http://www.webmonkey.com/2010/08/sampleplayer-makes-your-browser-sing-sans-flash/</a> </li> 
     </ul> 
     <!-- 
NewPP limit report
CPU time usage: 0.096 seconds
Real time usage: 0.101 seconds
Preprocessor visited node count: 227/1000000
Preprocessor generated node count: 400/1000000
Post?expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
--> 
     <!-- Saved in parser cache with key wiki_mozilla_org:pcache:idhash:33919-0!*!0!!en!2!* and timestamp 20171003082856 and revision id 657449
 --> 
    </div> 
    <div class="printfooter">
      Retrieved from "
     <a href="https://wiki.mozilla.org/index.php?title=Audio_Data_API&amp;oldid=657449">https://wiki.mozilla.org/index.php?title=Audio_Data_API&amp;oldid=657449</a>" 
    </div> 
    <div id="catlinks" class="catlinks catlinks-allhidden"></div> 
    <div class="visualClear"></div> 
   </div> 
  </div> 
  <div id="mw-navigation"> 
   <h2>Navigation menu</h2> 
   <div id="mw-head"> 
    <div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label"> 
     <h3 id="p-personal-label">Personal tools</h3> 
     <ul> 
      <li id="pt-login"><a href="/index.php?title=Special:UserLogin&amp;returnto=Audio+Data+API" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
      <li id="pt-createaccount"><a href="/Special:RequestAccount">Request account</a></li> 
     </ul> 
    </div> 
    <div id="left-navigation"> 
     <div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label"> 
      <h3 id="p-namespaces-label">Namespaces</h3> 
      <ul> 
       <li id="ca-nstab-main" class="selected"><span><a href="/Audio_Data_API" title="View the content page [c]" accesskey="c">Page</a></span></li> 
       <li id="ca-talk" class="new"><span><a href="/index.php?title=Talk:Audio_Data_API&amp;action=edit&amp;redlink=1" title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li> 
      </ul> 
     </div> 
     <div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label"> 
      <h3 id="mw-vector-current-variant"> </h3> 
      <h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3> 
      <div class="menu"> 
       <ul> 
       </ul> 
      </div> 
     </div> 
    </div> 
    <div id="right-navigation"> 
     <div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label"> 
      <h3 id="p-views-label">Views</h3> 
      <ul> 
       <li id="ca-view" class="selected"><span><a href="/Audio_Data_API">Read</a></span></li> 
       <li id="ca-viewsource"><span><a href="/index.php?title=Audio_Data_API&amp;action=edit" title="This page is protected.
You can view its source [e]" accesskey="e">View source</a></span></li> 
       <li id="ca-history" class="collapsible"><span><a href="/index.php?title=Audio_Data_API&amp;action=history" title="Past revisions of this page [h]" accesskey="h">View history</a></span></li> 
      </ul> 
     </div> 
     <div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label"> 
      <h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3> 
      <div class="menu"> 
       <ul> 
       </ul> 
      </div> 
     </div> 
     <div id="p-search" role="search"> 
      <h3><label for="searchInput">Search</label></h3> 
      <form action="/index.php" id="searchform"> 
       <div id="simpleSearch"> 
        <input type="search" name="search" placeholder="Search" title="Search MozillaWiki [f]" accesskey="f" id="searchInput">
        <input type="hidden" value="Special:Search" name="title">
        <input type="submit" name="fulltext" value="Search" title="Search the pages for this text" id="mw-searchButton" class="searchButton mw-fallbackSearchButton">
        <input type="submit" name="go" value="Go" title="Go to a page with this exact name if exists" id="searchButton" class="searchButton"> 
       </div> 
      </form> 
     </div> 
    </div> 
   </div> 
   <div id="mw-panel"> 
    <div id="p-logo" role="banner">
     <a style="background-image: url(/skins/../assets/logos/mozilla-wiki-logo-alt-135px.png);" href="/Main_Page" title="Visit the main page"></a>
    </div> 
    <div class="portal" role="navigation" id="p-navigation" aria-labelledby="p-navigation-label"> 
     <h3 id="p-navigation-label">Navigation</h3> 
     <div class="body"> 
      <ul> 
       <li id="n-mainpage-description"><a href="/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li> 
       <li id="n-Product-releases"><a href="/Releases">Product releases</a></li> 
       <li id="n-newpages"><a href="/Special:NewPages">New pages</a></li> 
       <li id="n-recentchanges"><a href="/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li> 
       <li id="n-Recent-uploads"><a href="/Special:NewFiles">Recent uploads</a></li> 
       <li id="n-Popular-pages"><a href="/Special:PopularPages">Popular pages</a></li> 
       <li id="n-randompage"><a href="/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li> 
       <li id="n-Help"><a href="/MozillaWiki:Help">Help</a></li> 
      </ul> 
     </div> 
    </div> 
    <div class="portal" role="navigation" id="p-How_to_Contribute" aria-labelledby="p-How_to_Contribute-label"> 
     <h3 id="p-How_to_Contribute-label">How to Contribute</h3> 
     <div class="body"> 
      <ul> 
       <li id="n-All-hands-meeting"><a href="/WeeklyUpdates">All-hands meeting</a></li> 
       <li id="n-Other-meetings"><a href="/Community_Calendar">Other meetings</a></li> 
       <li id="n-Contribute-to-Mozilla"><a href="/Contribute">Contribute to Mozilla</a></li> 
       <li id="n-Mozilla-Reps"><a href="/ReMo">Mozilla Reps</a></li> 
       <li id="n-Student-Ambassadors"><a href="/StudentAmbassadors">Student Ambassadors</a></li> 
      </ul> 
     </div> 
    </div> 
    <div class="portal" role="navigation" id="p-MozillaWiki" aria-labelledby="p-MozillaWiki-label"> 
     <h3 id="p-MozillaWiki-label">MozillaWiki</h3> 
     <div class="body"> 
      <ul> 
       <li id="n-News"><a href="/MozillaWiki:News">News</a></li> 
       <li id="n-About"><a href="/MozillaWiki:About">About</a></li> 
       <li id="n-Team"><a href="/MozillaWiki:Team">Team</a></li> 
       <li id="n-Policies"><a href="/MozillaWiki:Policies">Policies</a></li> 
       <li id="n-Releases"><a href="/MozillaWiki:Releases">Releases</a></li> 
       <li id="n-.40MozillaWiki"><a href="//twitter.com/MozillaWiki" rel="nofollow">@MozillaWiki</a></li> 
       <li id="n-Report-a-wiki-bug"><a href="//bugzilla.mozilla.org/enter_bug.cgi?product=Websites&amp;component=wiki.mozilla.org" rel="nofollow">Report a wiki bug</a></li> 
      </ul> 
     </div> 
    </div> 
    <div class="portal" role="navigation" id="p-Around_Mozilla" aria-labelledby="p-Around_Mozilla-label"> 
     <h3 id="p-Around_Mozilla-label">Around Mozilla</h3> 
     <div class="body"> 
      <ul> 
       <li id="n-Mozilla-Support"><a href="//support.mozilla.org/" rel="nofollow">Mozilla Support</a></li> 
       <li id="n-Mozilla-Developer-Network"><a href="//developer.mozilla.org/" rel="nofollow">Mozilla Developer Network</a></li> 
       <li id="n-Planet-Mozilla"><a href="//planet.mozilla.org/" rel="nofollow">Planet Mozilla</a></li> 
       <li id="n-Mozilla-Blog"><a href="//blog.mozilla.org/" rel="nofollow">Mozilla Blog</a></li> 
       <li id="n-Webmaker"><a href="//webmaker.org/" rel="nofollow">Webmaker</a></li> 
       <li id="n-Research"><a href="//www.mozilla.org/research/" rel="nofollow">Research</a></li> 
      </ul> 
     </div> 
    </div> 
    <div class="portal" role="navigation" id="p-tb" aria-labelledby="p-tb-label"> 
     <h3 id="p-tb-label">Tools</h3> 
     <div class="body"> 
      <ul> 
       <li id="t-whatlinkshere"><a href="/Special:WhatLinksHere/Audio_Data_API" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li> 
       <li id="t-recentchangeslinked"><a href="/Special:RecentChangesLinked/Audio_Data_API" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li> 
       <li id="t-specialpages"><a href="/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li> 
       <li id="t-print"><a href="/index.php?title=Audio_Data_API&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li> 
       <li id="t-permalink"><a href="/index.php?title=Audio_Data_API&amp;oldid=657449" title="Permanent link to this revision of the page">Permanent link</a></li> 
       <li id="t-info"><a href="/index.php?title=Audio_Data_API&amp;action=info">Page information</a></li> 
       <li id="t-importfrometherpadlink"><a href="/Special:ImportFromEtherpad" rel="importfrometherpad-link">Import an Etherpad</a></li> 
       <li id="t-smwbrowselink"><a href="/Special:Browse/Audio_Data_API" rel="smw-browse">Browse properties</a></li> 
      </ul> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="footer" role="contentinfo"> 
   <ul id="footer-info"> 
    <li id="footer-info-lastmod"> This page was last modified on 18 May 2013, at 00:22.</li> 
    <li id="footer-info-viewcount">This page has been accessed 384,321 times.</li> 
   </ul> 
   <ul id="footer-places"> 
    <li id="footer-places-privacy"><a href="/MozillaWiki:Privacy_policy" title="MozillaWiki:Privacy policy">Privacy policy</a></li> 
    <li id="footer-places-about"><a href="/MozillaWiki:About" title="MozillaWiki:About">About MozillaWiki</a></li> 
    <li id="footer-places-mobileview"><a href="https://m.wiki.mozilla.org/Audio_Data_API" class="noprint stopMobileRedirectToggle">Mobile view</a></li> 
   </ul> 
   <ul id="footer-icons" class="noprint"> 
    <li id="footer-poweredbyico"> <a href="//www.mediawiki.org/"><img src="/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31"></a> <a href="https://www.semantic-mediawiki.org/wiki/Semantic_MediaWiki"><img src="/extensions/SemanticMediaWiki/includes/../res/images/smw_button.png" alt="Powered by Semantic MediaWiki" width="88" height="31"></a> </li> 
   </ul> 
   <div style="clear:both"></div> 
  </div> 
  <script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script>
  <script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script> 
  <script>if(window.mw){
mw.loader.load(["ext.smw.tooltips","mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","ext.ImportFromEtherpad.main.init","skins.vector.collapsibleNav"],null,true);
}</script> 
  <script src="https://wiki.mozilla.org/load.php?debug=false&amp;lang=en&amp;modules=site&amp;only=scripts&amp;skin=vector&amp;*"></script> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-35433268-22', 'auto');
  ga('send', 'pageview');

</script> 
  <script>if(window.mw){
mw.config.set({"wgBackendResponseTime":331});
}</script>   
 </body>
</html>