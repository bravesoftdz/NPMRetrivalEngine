<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=Edge"> 
  <title>Free email validation API for web forms</title> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"> 
  <link rel="alternate" type="application/rss+xml" title="Mailgun Blog" href="http://blog.mailgun.com/rss"> 
  <meta name="description" content=""> 
  <meta name="keywords" content=""> 
  <meta name="author" content=""> 
  <!-- For syntax highlighting --> 
  <script src="http://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.1/highlight.min.js"></script> 
  <link rel="stylesheet" href="/assets/css/monokai-sublime.css?v=a7f30895b9" type="text/css"> 
  <link rel="shortcut icon" href="/assets/images/favicon.ico?v=a7f30895b9"> 
  <link href="http://fonts.googleapis.com/css?family=Ubuntu+Mono|Open+Sans:400italic,600italic,400,700,600" rel="stylesheet" type="text/css"> 
  <link rel="stylesheet" href="/assets/css/master.css?v=a7f30895b9" type="text/css"> 
  <link rel="stylesheet" href="/assets/css/tipsy.css?v=a7f30895b9" type="text/css"> 
  <link rel="canonical" href="http://blog.mailgun.com/free-email-validation-api-for-web-forms/"> 
  <meta name="referrer" content="no-referrer-when-downgrade"> 
  <link rel="amphtml" href="http://blog.mailgun.com/free-email-validation-api-for-web-forms/amp/"> 
  <meta property="og:site_name" content="Mailgun Blog - Email Deliverability, Engineering, APIs, Code"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="Free email validation API for web forms"> 
  <meta property="og:description" content="Email validation is a hard problem that every single developer, building anything on the web, has to deal with. &nbsp;We actually have been working on email validation ourselves for years (more on that below). We looked at the validation services available and weren't satisfied with any of them, either for"> 
  <meta property="og:url" content="http://blog.mailgun.com/free-email-validation-api-for-web-forms/"> 
  <meta property="article:published_time" content="2013-07-26T18:06:52.000Z"> 
  <meta property="article:modified_time" content="2013-09-09T16:21:22.000Z"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:title" content="Free email validation API for web forms"> 
  <meta name="twitter:description" content="Email validation is a hard problem that every single developer, building anything on the web, has to deal with. &nbsp;We actually have been working on email validation ourselves for years (more on that below). We looked at the validation services available and weren't satisfied with any of them, either for"> 
  <meta name="twitter:url" content="http://blog.mailgun.com/free-email-validation-api-for-web-forms/"> 
  <meta name="twitter:label1" content="Written by"> 
  <meta name="twitter:data1" content="Mailgun Team"> 
  <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Mailgun Blog - Email Deliverability, Engineering, APIs, Code",
        "logo": "http://blog.mailgun.com/content/images/2014/Jun/Mailgun_Icon.png"
    },
    "author": {
        "@type": "Person",
        "name": "Mailgun Team",
        "image": {
            "@type": "ImageObject",
            "url": "http://blog.mailgun.com/content/images/2014/Jul/Mailgun_Icon.png",
            "width": 851,
            "height": 851
        },
        "url": "http://blog.mailgun.com/author/lee-munroe/",
        "sameAs": [
            "http://www.mailgun.com"
        ],
        "description": "Passionate about software development, email deliverability and making tools for developers."
    },
    "headline": "Free email validation API for web forms",
    "url": "http://blog.mailgun.com/free-email-validation-api-for-web-forms/",
    "datePublished": "2013-07-26T18:06:52.000Z",
    "dateModified": "2013-09-09T16:21:22.000Z",
    "description": "Email validation is a hard problem that every single developer, building anything on the web, has to deal with.  We actually have been working on email validation ourselves for years (more on that below). We looked at the validation services available and weren&#x27;t satisfied with any of them, either for",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "http://blog.mailgun.com"
    }
}
    </script> 
  <meta name="generator" content="Ghost 0.11"> 
  <link rel="alternate" type="application/rss+xml" title="Mailgun Blog - Email Deliverability, Engineering, APIs, Code" href="http://blog.mailgun.com/rss/"> 
  <!-- HTML5 shim, for IE6-8 support of HTML5 elements --> 
  <!--[if lt IE 9]>
   <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
   <![endif]--> 
 </head> 
 <body class="post-template"> 
  <header id="site-header"> 
   <div class="container"> 
    <div class="logo"> 
     <a href="http://www.mailgun.com" class="hidden-xs desktop-logo"><img src="/assets/images/header-logo@2x.png?v=a7f30895b9" alt="Mailgun"></a> 
     <a href="http://www.mailgun.com" class="visible-xs mobile-logo"><img src="/assets/images/mailgun-mark-red.svg?v=a7f30895b9" alt="Mailgun"></a> 
    </div> 
    <div class="site-description"> 
     <div class="hidden-xs-min">
      Musings and writings from the 
      <a href="http://mailgun.com">Mailgun</a> team
     </div> 
     <div class="visible-xs-min">
      Writings from the 
      <a href="http://mailgun.com">Mailgun</a> team
     </div> 
    </div> 
    <div class="search"> 
     <div class="toggle-icon" data-toggle="search"> 
      <i class="icon-search"></i> 
      <i class="icon-close"></i> 
     </div> 
    </div> 
    <div class="header-menu"> 
     <form class="searchform clearfix"> 
      <div class="input-container"> 
       <input type="text" id="st-search-input" placeholder="Search for articles"> 
      </div> 
      <button class="submit"><i class="icon-search"></i></button> 
     </form> 
     <section id="st-results-container"></section> 
     <a href="http://mailgun.com" class="return">Return to mailgun.com</a> 
    </div> 
   </div> 
   <!-- .container --> 
  </header> 
  <div class="page-content"> 
   <!--
  <a href="#" class="post-nav prev">
    <i class="icon-post-nav-carets"></i>
    <span class="label">&lsaquo; Older</span>
  </a>
  <a href="#" class="post-nav next">
    <i class="icon-post-nav-carets"></i>
    <span class="label">Newer &rsaquo;</span>
  </a>
--> 
   <div class="container"> 
    <article class="blog-post"> 
     <h1 class="post-title smaller">Free email validation API for web forms</h1> 
     <div class="byline">
       by Mailgun Team on July 26 2013 
     </div> 
     <div class="clearfix"> 
      <div class="post-body"> 
       <!-- start post content --> 
       <p><img class="alignright" alt="" src="http://9791b61a81187466cf77-03e2fb40b56101ddc8886446c68cb0c1.r77.cf2.rackcdn.com/blog-img-guardpost.png" width="222" height="180">Email validation is a hard problem that every single developer, building anything on the web, has to deal with. &nbsp;We actually have been working on email validation ourselves for years (more on that below). We looked at the validation services available and weren't satisfied with any of them, either for performance, accuracy or&nbsp;completeness&nbsp;reasons. &nbsp;So today,&nbsp;we're releasing a project we&nbsp;affectionately&nbsp;called Guardpost, as our newest API, and are also pulling back the curtain to show exactly how we built it.</p> 
       <p>We're launching this as a free service that anyone collecting email through web forms can (and should!) use. &nbsp; You'll need a Mailgun account to use the&nbsp;service, but you don't have to send your emails through Mailgun. If you want to get started right away, check out the&nbsp;<a href="http://documentation.mailgun.com/api-email-validation.html" target="_blank">API documentation</a>,&nbsp;or a <a href="http://mailgun.github.io/validator-demo/" target="_blank">little sample jquery app</a>, as an example of how to use Guardpost in a signup form.</p> 
       <p>We suggest using Guardpost as part of your email collection form to reduce typos and false address submission in conjunction with a link emailed to the address to confirm the email is valid (double opt-in). Of course, you can use Mailgun to send the double opt-in email, as well. This is not intended to be a bulk mailing list cleaning service and we reserve the right to disable your account if we see it being used as such.</p> 
       <p>To call the Guardpost API, just use the publishable API Key in the My Account tab of your Mailgun account (the one with the "pub-key" prefix).</p> 
       <p>Now, on to to the technical details: </p> 
       <h4>Why is email validation so hard?</h4> 
       <p>Address validation is hard for multiple reasons: </p> 
       <ol> 
        <li>Email address syntax is fairly complex, complex enough that it is difficult to express with a regular expression, while being readable and maintainable for developers.</li> 
        <li>There is no single definition for what is valid syntax, for an email address, and what is not. The definitions that do exist frequently conflict.</li> 
        <li>The Internet runs on <a href="http://en.wikipedia.org/wiki/Robustness_principle" target="_blank">the Robustness principle</a>, and because of that mail servers will accept addresses that do not conform standards, but are otherwise understandable.</li> 
       </ol> 
       <h4>Why did we create an Email Validation API?</h4> 
       <p>There are 3 main reasons we feel like we needed to build our own service. </p> 
       <ol> 
        <li>Our goal is not to make a perfect address validator that can validate every single address that has ever been created. Our goal is to build a realistic address validator for the types of addresses we see everyday.</li> 
        <li>We've sent billions of emails and collected a lot of ESP data. We know that gmail.com is a valid MX host while gmali.com is not.</li> 
        <li>Furthermore, the validator is ESP specific, so we can go way beyond valid syntax checks, bring in specific requirement for Gmail vs. Yahoo vs. Hotmail.</li> 
       </ol> 
       <p>&nbsp;</p> 
       <h4>What does the Validation service do?</h4> 
       <p>Our validator service actually consists of five micro-services: </p> 
       <h6>1. A&nbsp;recursive descent parser for syntax validation</h6> 
       <p>Email address syntax is fairly complex, enough to make a pure regular expression based approach cumbersome and unmaintainable (check out&nbsp;<a href="http://tools.ietf.org/html/rfc2822" target="_blank">RFC 2822</a>&nbsp;and <a href="http://tools.ietf.org/html/rfc5322" target="_blank">RFC 5322</a>&nbsp;about proper email format then <a href="http://stackoverflow.com/a/719543" target="_blank">this&nbsp;discussion&nbsp;on&nbsp;Stackoverflow</a>&nbsp;if you need some convincing). That why we wrote a parser that analyzes addresses, and determines if they are valid or not, based on a&nbsp;<a href="https://en.wikipedia.org/wiki/Parsing" target="_blank">formal grammar</a>.</p> 
       <p>What is a formal grammar? Formal grammars (and specifically in our case a context free grammar) are a set of rules that define the structure of a string. For example, it allows us to transform something we intuitively understand, like an address list, into something formal that a computer can parse.</p> 
       <p>So what would the context free grammar for an address list look like? Something like this: </p> 
       <pre class="lang:php decode:true">address-list -&gt; address ( delimiter address )*</pre> 
       <p>What we have defined here is an address list, and we are saying it is composed of a single address, followed by zero or more delimiter and single address pairs. For example the following would be a valid address list: </p> 
       <pre class="lang:php decode:true">john@example.com, smith@example.com</pre> 
       <p>While the following would not be: </p> 
       <pre class="lang:php decode:true">john@example.com smith@example.com</pre> 
       <p>What's really nice about recursive descent parsers is that we can take the grammar rules and turn them into code in a fairly straightforward manner. Here is pseudo-code for the above address list example: </p> 
       <pre>   def get-address-list():
      address_list = []

      # get address
      address = get_address()
      if address is None:
         return None
      address_list.append(addr)

      while True:
         # get delimiter
         delimiter = get_delimiter()
            if delimiter is None:
               break

         # get address
         address = get_address()
         if address is None:
             break
         address_list.append(address)

      return address_list</pre> 
       <p>Just like that, one by one, we slowly built grammar for every part of an email address. We spent hours pouring over RFCs, looking at bounces, looking at what mail servers actually accept (which is different sometimes from what RFC says), reading how other people were solving this problem to eventually define our own context free grammar for email addresses: </p> 
       <pre class="lang:java decode:true">   address-list      -&gt;    address { delimiter address }  
   mailbox           -&gt;    name-addr-rfc | name-addr-lax | addr-spec | url

   name-addr-rfc     -&gt;    [ display-name-rfc ] angle-addr-rfc
   display-name-rfc  -&gt;    [ whitespace ] word { whitespace word }
   angle-addr-rfc    -&gt;    [ whitespace ] &lt; addr-spec &gt; [ whitespace ]

   name-addr-lax     -&gt;    [ display-name-lax ] angle-addr-lax
   display-name-lax  -&gt;    [ whitespace ] word { whitespace word } whitespace
   angle-addr-lax    -&gt;    addr-spec [ whitespace ]

   addr-spec         -&gt;    [ whitespace ] local-part @ domain [ whitespace ]
   local-part        -&gt;    dot-atom | quoted-string
   domain            -&gt;    dot-atom

   word              -&gt;    word-ascii
   word-ascii        -&gt;    atom | quoted-string
   whitespace        -&gt;    whitespace-ascii</pre> 
       <p>We built our parser around the above grammar for what we think is a realistic email address syntax. &nbsp;Again, this is not just based on RFC, but what we see ESPs&nbsp;accepting&nbsp;from sending billions of emails. </p> 
       <h6>2. Domain Name Service (DNS) lookups</h6> 
       <p>Just because an email address is syntactically valid, doesn't mean that anyone will receive mail at that address. To receive mail, you have to have a server that will listen for incoming messages, this server is called a Mail Exchanger (MX) and is usually defined in your DNS records. That's why, in addition to syntax checks, we look up the domains DNS records to see if a MX server has been defined to accept mail. </p> 
       <h6>3. Mail Exchanger existence checks</h6> 
       <p>Again, due to the robustness principle, just because a host does not define MX records does not mean they can't accept mail. Mail servers will often fall-back to A records to try and deliver mail. That's why we go one step further than just a DNS query, we ping the Mail Exchanger to make sure that it actually exists. </p> 
       <h6>4. Custom Email Service Provider (ESP) grammar</h6> 
       <p>Being liberal in what you accept is just one part of the robustness principle, the second is be conservative in what you send. Because of that, most ESPs actually have a fairly stringent rules for the local-part (before the @ symbol) you can actually create. For example, Yahoo Mail addresses can only contain letters, numbers, underscores, and one period. So while an address like, "John Smith"@yahoo.com is completely syntactically valid, it does not actually exist at Yahoo Mail and will bounce. That's why if we know the Mail Exchanger the mail is going to, and we know the big ones like Yahoo, Google, Microsoft (including Hotmail), AOL, and Apple we validate against their more stringent rules. </p> 
       <h6>5. Suggestion Service</h6> 
       <p>Email addresses are frequently mistyped. Instead of @yahoo.com, you might type @yaho.com, that's why, as part of our validation service, if we detect a misspelled word, we offer suggestions so you don't miss mail due to a typo. &nbsp;Here's what that looks like in the <a href="http://mailgun.github.io/validator-demo/" target="_blank">jquery demo app</a> [<a href="https://github.com/mailgun/validator-demo/tree/gh-pages">source</a>] we mentioned above. </p> 
       <p style="text-align: center;"><a href="http://mailgun.github.io/validator-demo/"><img class="aligncenter" alt="" src="http://9791b61a81187466cf77-03e2fb40b56101ddc8886446c68cb0c1.r77.cf2.rackcdn.com/blog-img-email-validator.png" width="490" height="221"></a></p> 
       <h4>What we don't provide.</h4> 
       <p>We've talked a lot about what we provide, but there are a few things we should make clear we don't provide: </p> 
       <ol> 
        <li>We don't check if a mailbox actually exists on a server. This <a href="http://cr.yp.to/smtp/vrfy.html" target="_blank">used to be a feature of SMTP</a>,&nbsp;but due to abuse by spammers, this was disabled by most major ESPs.</li> 
        <li>We are not a mailing list cleanup service. This service is meant to be used to increase sign-up accuracy, not to cleanup mailing lists purchased from questionable sources. We will be monitoring usage and reserve the right to shut down anyone that is using it inappropriately.</li> 
       </ol> 
       <p>So that's it. &nbsp;We hope you enjoy the service and it makes your life easier. &nbsp;If you have any questions or comments, let us know.</p> 
       <p>Happy emailing!</p> 
       <p>The Mailgunners</p> 
       <!-- end post content --> 
       <div class="share-links"> 
        <a href="http://twitter.com/share?text=Free%20email%20validation%20API%20for%20web%20forms&amp;url=http://blog.mailgun.com/free-email-validation-api-for-web-forms/" onclick="window.open(this.href, 'twitter-share', 'width=550,height=235');return false;"><i class="icon-twitter"></i> Share on Twitter</a> 
        <a href="http://www.facebook.com/sharer/sharer.php?u=http://blog.mailgun.com/free-email-validation-api-for-web-forms/"><i class="icon-facebook"></i> Share on Facebook</a> 
       </div> 
       <div class="post-author"> 
        <a href="http://www.mailgun.com"><img src="/content/images/2014/Jul/Mailgun_Icon.png" alt="Mailgun Team" class="author-avatar"></a> 
        <h3>Mailgun Team</h3> 
        <p>Passionate about software development, email deliverability and making tools for developers.</p> 
       </div> 
      </div> 
      <!-- .post-body --> 
      <div class="post-sidebar"> 
       <h4>About us</h4> 
       <p>Mailgun is a simple and powerful API that enables you to send, receive, and track email effortlessly.</p> 
       <p><a href="http://mailgun.com" class="rounded-block rounded-block-full">Visit Mailgun</a></p> 
      </div> 
     </div> 
     <!-- .clearfix for two-column desktop blog layout --> 
    </article> 
    <div class="post-comments"> 
     <!-- <div class="disqus-container"> put disqus code here </div> --> 
     <div id="disqus_thread"></div> 
     <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'mailgun'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script> 
     <noscript>
      Please enable JavaScript to view the 
      <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
     </noscript> 
     <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> 
    </div> 
   </div> 
   <!-- .container --> 
  </div> 
  <div id="email-subscribe-floater"> 
   <h3> <img src="/assets/images/mailgun-mark-red.svg" alt="Mailgun"> Get posts by email </h3> 
   <p>Like what you're reading? Get these posts delivered to your inbox.</p> 
   <form accept-charset="UTF-8" action="https://www.sendicate.net/subscribe/8g7ku5" method="post" class="email-subscribe-form"> 
    <input type="email" id="subscriber_email" name="subscriber[email]" placeholder="your@email.com"> 
    <div id="mgsubscribe_validate_status"></div> 
    <button type="submit" name="subscribe" id="mailgun_subscribe_btn" class="btn">Subscribe</button> 
    <small>No spam, ever.</small> 
   </form> 
  </div> 
  <footer id="site-footer"> 
   <div class="container"> 
    <p class="copyright">© 2017 Mailgun Technologies, Inc.</p> 
   </div> 
  </footer> 
  <!-- You can safely delete this line if your theme does not require jQuery --> 
  <script type="text/javascript" src="https://code.jquery.com/jquery-1.11.3.min.js"></script> 
  <script src="/assets/js/master.min.js?v=a7f30895b9"></script> 
  <script type="text/javascript">
 $(function() {
   $('.tipsy').tipsy({fade: true, gravity: 's'});
 });
 $(document).ready(function() {
   if($("body").hasClass("archive-template")) {
    $(".index-all").hide();
    $(".navigate-archives").show();
   };
 });
</script> 
  <!-- Google Tag Manager --> 
  <noscript>
   <iframe src="//www.googletagmanager.com/ns.html?id=GTM-KX86FZ" height="0" width="0" style="display:none;visibility:hidden"></iframe>
  </noscript> 
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-KX86FZ');</script> 
  <!-- End Google Tag Manager --> 
  <!-- Swiftype search --> 
  <script type="text/javascript">
  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){
  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);
  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);
  })(window,document,'script','//s.swiftypecdn.com/install/v1/st.js','_st');

  _st('install','CZx41_WaXVwnryu-eJ5Y');
</script> 
  <!-- End Swiftype -->   
 </body>
</html>