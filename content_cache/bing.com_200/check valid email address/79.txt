<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <!-- http://t.co/dKP3o1e --> 
  <meta name="HandheldFriendly" content="True"> 
  <meta name="MobileOptimized" content="320"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <link href="http://feeds.haacked.com/haacked" rel="alternate" title="You've Been Haacked" type="application/atom+xml"> 
  <!--[if lt IE 9]><script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]--> 
  <!--Fonts from Google"s Web font directory at http://google.com/webfonts --> 
  <link href="http://fonts.googleapis.com/css?family=Open+Sans:300,400,400italic,600,700,800" rel="stylesheet" type="text/css"> 
  <link href="/favicon.ico" rel="shortcut icon"> 
  <link href="/css/screen.css" media="screen, projection" rel="stylesheet" type="text/css"> 
  <link rel="stylesheet" href="/css/code.css" type="text/css"> 
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script> 
  <script src="/js/slash.js" async></script> 
  <!-- Begin Jekyll SEO tag v2.3.0 --> 
  <title>I Knew How To Validate An Email Address Until I Read The RFC | You’ve Been Haacked</title> 
  <meta property="og:title" content="I Knew How To Validate An Email Address Until I Read The RFC"> 
  <meta name="author" content="Phil Haack"> 
  <meta property="og:locale" content="en_US"> 
  <meta name="description" content="Raise your hand if you know how to validate an email address. For those of you with your hand in the air, put it down quickly before someone sees you. It’s an odd sight to see someone sitting alone at the keyboard raising his or her hand. I was speaking metaphorically."> 
  <meta property="og:description" content="Raise your hand if you know how to validate an email address. For those of you with your hand in the air, put it down quickly before someone sees you. It’s an odd sight to see someone sitting alone at the keyboard raising his or her hand. I was speaking metaphorically."> 
  <link rel="canonical" href="http://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx/"> 
  <meta property="og:url" content="http://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx/"> 
  <meta property="og:site_name" content="You’ve Been Haacked"> 
  <meta property="og:type" content="article"> 
  <meta property="article:published_time" content="2007-08-21T00:00:00+00:00"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:site" content="@haacked"> 
  <meta name="twitter:creator" content="@Phil Haack"> 
  <script type="application/ld+json">
{"name":null,"description":"Raise your hand if you know how to validate an email address. For those of you with your hand in the air, put it down quickly before someone sees you. It’s an odd sight to see someone sitting alone at the keyboard raising his or her hand. I was speaking metaphorically.","author":{"@type":"Person","name":"Phil Haack"},"@type":"BlogPosting","url":"http://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx/","image":null,"publisher":null,"headline":"I Knew How To Validate An Email Address Until I Read The RFC","dateModified":"2007-08-21T00:00:00+00:00","datePublished":"2007-08-21T00:00:00+00:00","sameAs":null,"mainEntityOfPage":{"@type":"WebPage","@id":"http://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx/"},"@context":"http://schema.org"}</script> 
  <!-- End Jekyll SEO tag --> 
  <script type="text/javascript">
		var _gaq = _gaq || [];
		_gaq.push(['_setAccount', 'UA-177588-1']);
		_gaq.push(['_trackPageview']);

		(function() {
			var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
			ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
			var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
		})();
	</script> 
 </head> 
 <body> 
  <div class="container"> 
   <div class="left-col"> 
    <div class="intrude-less"> 
     <header id="header" class="inner">
      <div class="profilepic"> 
       <img src="https://2.gravatar.com/avatar/cdf546b601bf29a7eb4ca777544d11cd?s=160" alt="Profile Picture" style="width: 160px;"> 
      </div> 
      <hgroup> 
       <h1><a href="/">You've Been Haacked</a></h1> 
       <h2>...and you like it</h2> 
      </hgroup> 
      <nav id="main-nav">
       <ul class="main-navigation"> 
        <li><a href="/about/">about</a></li> 
        <li><a href="/archive">archives</a></li> 
        <li><a href="https://github.com/Haacked/feedback/issues/new">contact</a></li> 
        <li><a href="/contributors">contributors</a></li> 
       </ul> 
       <section class="aboutme"> 
        <p> You've been Haacked and you like it </p> 
       </section> 
      </nav> 
      <nav id="sub-nav"> 
       <div class="social"> 
        <a class="twitter" href="http://twitter.com/haacked" title="Twitter">Twitter</a> 
        <a class="github" href="https://github.com/haacked" title="GitHub">GitHub</a> 
        <a class="rss" href="http://feeds.haacked.com/haacked" title="RSS">RSS</a> 
       </div> 
      </nav> 
     </header> 
    </div> 
   </div> 
   <div class="mid-col"> 
    <div class="mid-col-container"> 
     <div id="content" class="inner">
      <article class="post" itemscope itemtype="http://schema.org/BlogPosting"> 
       <h1 class="title" itemprop="name">I Knew How To Validate An Email Address Until I Read The RFC</h1> 
       <div class="meta"> 
        <span class="date"> <time datetime="2007-08-21T00:00:00+00:00" itemprop="datePublished">August 21, 2007</time></span> 
        <span class="tags">code, regex</span> 
        <span class="comments"><a href="#disqus_thread" data-disqus-identifier="18384">comments</a></span> 
        <span class="edit"> <a href="https://github.com/Haacked/haacked.com/edit/gh-pages/_posts/archived/2007-08-21-i-knew-how-to-validate-an-email-address-until-i.aspx.markdown">edit</a> </span> 
       </div> 
       <div class="entry-content" itemprop="articleBody">
        <p>Raise your hand if you know how to validate an email address. For those of you with your hand in the air, put it down quickly before someone sees you. It’s an odd sight to see someone sitting alone at the keyboard raising his or her hand. I was speaking metaphorically.</p> 
        <p><a href="http://www.stockxpert.com/browse.phtml?f=profile&amp;l=ErickN" title="At Sign from stockxpert by ErickN"><img src="http://haacked.com/images/haacked_com/WindowsLiveWriter/IThoughtIKnewHowToValidateAnEmailAddress_E977/at-sign_1.jpg" alt="at-sign"></a> Before yesterday I would have raised my hand (metaphorically) as well. I needed to validate an email address on the server. Something I’ve done a hundred thousand times (seriously, I counted)&nbsp;using a handy dandy regular expression in my personal library.</p> 
        <p>This time, for some reason, I decided to take a look at my underlying assumptions. I had never actually read (or even skimmed)&nbsp;the RFC for an email address. I simply based my implementation on my preconceived assumptions about what makes a valid email address. You know what they say <a href="http://jyte.com/cl/when-you-assume-you-make-an-ass-out-of-you-and-me" title="saying about assumptions">about assuming</a>.</p> 
        <p><strong>What I found out was surprising. Nearly 100% of regular expressions on the web purporting to validate an email address are too strict.</strong></p> 
        <p>It turns out that the local part of an email address, the part before the @ sign, allows a lot more characters than you’d expect. According to section 2.3.10 of RFC 2821 which defines SMTP, the part before the <code class="highlighter-rouge">@</code> sign is called the local part (the part after being the host domain) and it is only intended to be interpreted by the receiving host…</p> 
        <blockquote> 
         <p>Consequently, and due to a long history of problems when intermediate hosts have attempted to optimize transport by modifying them, <strong>the local-part MUST be interpreted and assigned semantics only by the host specified in the domain part of the address</strong>.</p> 
        </blockquote> 
        <p>Section <a href="http://tools.ietf.org/html/rfc2822#section-3.4.1" title="Section 3.4.1 of rfc2822">section 3.4.1</a> of <a href="http://tools.ietf.org/html/rfc2822" title="RFC 2822 Internet Message Format">RFC 2822</a> goes into more detail about the specification of an email address (emphasis mine).</p> 
        <blockquote> 
         <p>An addr-spec is a specific Internet identifier that contains a locally interpreted string followed by the at-sign character (“@”, ASCII value 64) followed by an Internet domain.&nbsp; The locally interpreted string is either a <strong>quoted-string</strong> or a <strong>dot-atom</strong>.</p> 
        </blockquote> 
        <p>A <em>dot-atom</em> is a dot delimited series of atoms. An <em>atom</em> is defined in <a href="http://tools.ietf.org/html/rfc2822#3.2.4" title="Section 3.2.4 Atom">section 3.2.4</a> as a series of alphanumeric characters and may include the following characters (<em>all the ones you need to swear in a comic strip</em>)…</p> 
        <blockquote> 
         <p>! $ &amp; * - = \^ ` | ~ # % ‘ + / ? _ { }</p> 
        </blockquote> 
        <p>Not only that, but it’s also valid (though not recommended and very uncommon) to have quoted local parts which allow pretty much any character. Quoting can be done via the backslash character (what is commonly known as escaping) or via surrounding the local part in double quotes.</p> 
        <p><a href="http://tools.ietf.org/html/rfc3696" title="Clarification of internet mailing specs">RFC 3696</a>, <em>Application Techniques for Checking and Transformation of Names</em>, was written by the author of the SMTP protocol (<a href="http://tools.ietf.org/html/rfc2821" title="RFC 2821 SMTP">RFC 2821</a>) as a human readable guide to SMTP. In section 3, he gives some examples of valid email addresses.</p> 
        <p><strong>These are all valid email addresses!</strong></p> 
        <ul> 
         <li><code class="highlighter-rouge">Abc\@def@example.com</code></li> 
         <li><code class="highlighter-rouge">Fred\ Bloggs@example.com</code></li> 
         <li><code class="highlighter-rouge">Joe.\\Blow@example.com</code></li> 
         <li><code class="highlighter-rouge">"Abc@def"@example.com</code></li> 
         <li><code class="highlighter-rouge">"Fred Bloggs"@example.com</code></li> 
         <li><code class="highlighter-rouge">customer/department=shipping@example.com</code></li> 
         <li><code class="highlighter-rouge">$A12345@example.com</code></li> 
         <li><code class="highlighter-rouge">!def!xyz%abc@example.com</code></li> 
         <li><code class="highlighter-rouge">_somename@example.com</code></li> 
        </ul> 
        <p><em>Note: Gotta love the author for using my favorite example person, Joe Blow</em>.</p> 
        <p>Quick, run these through your favorite email validation method. Do they all pass?</p> 
        <p>For fun, I decided to try and write a regular expression (<a href="http://regex.info/blog/2006-09-15/247" title="Source of the famous 'Now you have two problems' quote">yes, I know I now have two problems. Thanks.</a>) that would validate all of these. Here’s what I came up with. (The part in bold is the <em>local part</em>. I am not worrying about checking my assumptions for the <em>domain part</em> for now.)</p> 
        <p><code class="highlighter-rouge">^(?!\.)("([^"\r\\]|\\["\r\\])*"|([-a-z0-9!#$%&amp;'*+/=?^_`{|}~] |(?@[a-z0-9][\w\.-]*[a-z0-9]\.[a-z][a-z\.]*[a-z]$</code></p> 
        <p>Note that this expression assumes case insensitivity options are turned on (<em>RegexOptions.IgnoreCase for .NET</em>). Yeah, that’s a pretty ugly expression.</p> 
        <p>I wrote a unit test to demonstrate all the cases this test covers. Each row below is an email address and whether it should be valid or not.</p> 
        <div class="language-csharp highlighter-rouge">
         <pre class="highlight"><code><span class="na">[RowTest]</span>
<span class="na">[Row(@"NotAnEmail", false)]</span>
<span class="na">[Row(@"@NotAnEmail", false)]</span>
<span class="na">[Row(@"""test\\blah""@example.com", true)]</span>
<span class="na">[Row(@"""test\blah""@example.com", false)]</span>
<span class="na">[Row("\"test\\\rblah\"@example.com", true)]</span>
<span class="na">[Row("\"test\rblah\"@example.com", false)]</span>
<span class="na">[Row(@"""test\""blah""@example.com", true)]</span>
<span class="na">[Row(@"""test""blah""@example.com", false)]</span>
<span class="na">[Row(@"customer/department@example.com", true)]</span>
<span class="na">[Row(@"$A12345@example.com", true)]</span>
<span class="na">[Row(@"!def!xyz%abc@example.com", true)]</span>
<span class="na">[Row(@"_Yosemite.Sam@example.com", true)]</span>
<span class="na">[Row(@"~@example.com", true)]</span>
<span class="na">[Row(@".wooly@example.com", false)]</span>
<span class="na">[Row(@"wo..oly@example.com", false)]</span>
<span class="na">[Row(@"pootietang.@example.com", false)]</span>
<span class="na">[Row(@".@example.com", false)]</span>
<span class="na">[Row(@"""Austin@Powers""@example.com", true)]</span>
<span class="na">[Row(@"Ima.Fool@example.com", true)]</span>
<span class="na">[Row(@"""Ima.Fool""@example.com", true)]</span>
<span class="na">[Row(@"""Ima Fool""@example.com", true)]</span>
<span class="na">[Row(@"Ima Fool@example.com", false)]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">EmailTests</span><span class="p">(</span><span class="kt">string</span> <span class="n">email</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">expected</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">string</span> <span class="n">pattern</span> <span class="p">=</span> <span class="s">@"^(?!\.)(""([^""\r\\]|\\[""\r\\])*""|"</span> 
    <span class="p">+</span> <span class="s">@"([-a-z0-9!#$%&amp;'*+/=?^_`{|}~]|(?&lt;!\.)\.)*)(?&lt;!\.)"</span> 
    <span class="p">+</span> <span class="s">@"@[a-z0-9][\w\.-]*[a-z0-9]\.[a-z][a-z\.]*[a-z]$"</span><span class="p">;</span>

  <span class="n">Regex</span> <span class="n">regex</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Regex</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">RegexOptions</span><span class="p">.</span><span class="n">IgnoreCase</span><span class="p">);</span>
  <span class="n">Assert</span><span class="p">.</span><span class="nf">AreEqual</span><span class="p">(</span><span class="n">expected</span><span class="p">,</span> <span class="n">regex</span><span class="p">.</span><span class="nf">IsMatch</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
    <span class="p">,</span> <span class="s">"Problem with '"</span> <span class="p">+</span> <span class="n">email</span> <span class="p">+</span> <span class="s">"'. Expected "</span>  
    <span class="p">+</span> <span class="n">expected</span> <span class="p">+</span> <span class="s">" but was not that."</span><span class="p">);</span>
<span class="p">}</span>
</code></pre> 
        </div> 
        <p>Before you call me a completely anal nitpicky numnut (you might be right, but wait anyways), I don’t think this level of detail in email validation is absolutely necessary. Most email providers have stricter rules than are required for email addresses. For example, Yahoo requires that an email start with a letter. There seems to be a standard stricter set of rules most email providers follow, but as far as I can tell it is undocumented.</p> 
        <p>I think I’ll sign up for an email address like <code class="highlighter-rouge">phil.h\@\@ck@haacked.com</code> and start bitching at sites that require emails but don’t let me create an account with this new email address. Ooooooh I’m such a troublemaker.</p> 
        <p>The lesson here is that it is healthy to challenge your preconceptions and assumptions once in a while and to never let me near an RFC.</p> 
        <p>UPDATES: Corrected some mistakes I made in reading the RFC. See! Even after reading the RFC I still don’t know what the hell I’m doing! Just goes to show that <a href="http://haacked.com/archive/2007/02/27/Why_Cant_Programmers._Read.aspx" title="Why Can’t Programmers... Read?">programmers can’t read</a>. I updated the post to point to <a href="http://www.faqs.org/rfcs/rfc822.html" title="RFC 822 Standard for the format of ARPA Internet Text Messages">RFC 822</a> as well. The <em>original</em> RFC.</p> 
       </div> 
      </article> 
      <div data-type="ad" data-publisher="lqm.youvebeenhacked.site" data-zone="ron" data-format="728x90"></div> 
      <div class="share"> 
       <div class="addthis_toolbox addthis_default_style "> 
        <a class="addthis_button_tweet"></a> 
        <a class="addthis_counter addthis_pill_style"></a> 
       </div> 
       <script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid="></script> 
      </div> 
      <div id="page-navigation"> 
       <div class="previous"> 
        <a href="/archive/2007/08/19/why-duck-typing-matters-to-c-developers.aspx/" title="Previous Post: 
How Duck Typing Benefits C# Developers">« How Duck Typing Benefits C# Developers</a> 
       </div> 
       <div class="next"> 
        <a href="/archive/2007/08/26/dont-be-a-validation-nazi.aspx/" title="next Post: 
Don't Be a Validation Nazi">Don't Be a Validation Nazi » </a> 
       </div> 
      </div> 
      <section id="comment"> 
       <h1 class="title">Comments</h1> 
       <div id="disqus_thread" aria-live="polite">
        <noscript>
         Please enable JavaScript to view the 
         <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
        </noscript> 
       </div> 
      </section> 
     </div> 
    </div> 
    <footer id="footer" class="inner">
     <p> Copyright © 2017 - Phil Haack Blog content licensed under the Creative Commons <a href="http://creativecommons.org/licenses/by/2.5/">CC BY 2.5</a> | Unless otherwise stated or granted, code samples licensed under the <a href="http://sm.mit-license.org/">MIT license</a>. | Site design based on the <a href="https://github.com/shashankmehta/greyshade">Greyshade theme</a> under the <a href="http://sm.mit-license.org/">MIT license</a> | <a href="/privacy">privacy</a> | <a href="/articles/blogtegrity">blogtegrity</a> </p> 
     <script type="text/javascript">
      var disqus_shortname = 'haacked';
      
        
        // var disqus_developer = 1;
        var disqus_identifier = '18384';
        var disqus_url = 'http://haacked.com/archive/2007/08/21/i-knew-how-to-validate-an-email-address-until-i.aspx/';
        var disqus_script = 'embed.js';
      
    (function () {
          
      var embedScript = document.createElement('script');
      embedScript.type = 'text/javascript';
      embedScript.async = true;
      embedScript.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(embedScript);
    
      var countScript = document.createElement('script');
      countScript.type = 'text/javascript';
      countScript.async = true;
      countScript.src = 'http://' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(countScript);
    }());
</script> 
     <script type="text/javascript">
    (function(){
      var twitterWidgets = document.createElement('script');
      twitterWidgets.type = 'text/javascript';
      twitterWidgets.async = true;
      twitterWidgets.src = '//platform.twitter.com/widgets.js';
      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);
    })();
  </script> 
    </footer> 
   </div> 
  </div> 
  <!--  CodeProject AD  --> 
  <script>
    function _dmBootstrap(file) {
        var _dma = document.createElement('script'); 
        _dma.type = 'text/javascript';
        _dma.async = true; 
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined')  _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js');}
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000);})();
</script>   
 </body>
</html>