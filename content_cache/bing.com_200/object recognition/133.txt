<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
  <title>Image Recognition with Neural Networks</title> 
  <link href="styles.css" rel="stylesheet" type="text/css"> 
  <style type="text/css">
<!--
.style1 {	FONT-FAMILY: Arial, Helvetica, sans-serif;
	FONT-SIZE: 12px;
}
.style10 {font-size: small; font-family: "Courier New", Courier, monospace; }
.style2 {	FONT-FAMILY: Arial, Helvetica, sans-serif;
	FONT-SIZE: 14px;
	FONT-WEIGHT: bold;
}
.style3 {	font-size: small;
}
.style4 {	text-align: left;
}
.style6 {	text-decoration: none;
}
.style7 {	color: #000000;
}
.style8thispage {font-size: small;
}
.style9 {font-family: "Courier New", Courier, monospace}
-->
</style> 
 </head> 
 <body style="font-family:Tahoma;font-size:11px;"> 
  <table align="center" border="0" cellpadding="0" cellspacing="0" width="1000"> 
   <tbody>
    <tr> 
     <td width="250" rowspan="2"><a href="index.html"><img src="images/logo.jpg" alt="java neural network" width="250" height="135" border="0"></a></td> 
     <td width="599" height="109" valign="top" class="style5">
      <div align="center" class="style8" style="position:relative; top:10px;">
       <a href="http://sourceforge.net/projects/neuroph/forums">Forum</a> 
       <span class="style14">&nbsp;|&nbsp;</span> 
       <a href="http://apps.sourceforge.net/wordpress/neuroph/">Blog</a>
       <span class="style14"> &nbsp;|&nbsp; </span>
       <a href="http://sourceforge.net/apps/trac/neuroph/">Wiki</a> 
       <span class="style14">&nbsp;</span>
      </div></td> 
     <td width="151" align="right" valign="top"><span class="style1"><a href="http://sourceforge.net/projects/neuroph"><img src="http://sflogo.sourceforge.net/sflogo.php?group_id=238532&amp;type=16" width="150" height="40" border="0" alt="Get Java Neural Network Framework Neuroph at SourceForge.net. Fast, secure and Free Open Source software downloads"></a></span></td> 
    </tr> 
    <tr> 
     <td colspan="2" align="center" valign="baseline">&nbsp;&nbsp;<a href="download.html"><img src="images/top_download.jpg" alt="" width="99" height="34" border="0" align="absbottom"></a>&nbsp;<a href="online_demo.html"><img src="images/top_onlinedemo.jpg" alt="" width="115" height="34" border="0" align="absbottom"></a>&nbsp;<a href="documentation.html"><img src="images/top_documentation.jpg" alt="" width="132" height="34" border="0" align="absbottom"></a>&nbsp;<a href="screenshots.html"><img src="images/top_screenshots.jpg" alt="" width="108" height="34" border="0" align="absbottom"></a>&nbsp;<a href="features.html"><img src="images/top_features.jpg" alt="" width="85" height="34" border="0" align="absbottom"></a></td> 
    </tr> 
    <tr> 
     <td colspan="3"> 
      <table border="0" cellpadding="3" cellspacing="0" height="400" width="100%"> 
       <tbody>
        <tr> 
         <td style="PADDING-BOTTOM: 15px; PADDING-LEFT: 15px; PADDING-RIGHT: 15px; BORDER-TOP: #ccc 1px solid; PADDING-TOP: 15px" valign="top" width="100%"> <h2>IMAGE RECOGNITION WITH NEURAL NETWORKS HOWTO</h2> <p>Neural networks are one technique which can be used for image recognition. This tutorial will show you how to use multi layer perceptron neural network for image recognition. The Neuroph has built in support for image recognition, and specialised wizard for training image recognition neural networks. Simple image recognition library can be found in <em>org.neuroph.contrib.imgrec</em> package, while image recognitionwizard in <strong>Neuroph Studio</strong> canis located in [Main Menu &gt; File &gt; New &gt; Image recognition neural network] </p> <p>This tutorial will explain the following:</p> <p>1. Basic principle how multi layer perceptrons are used for image recognition (one possible approach is described here) <br> 2. How to train neural networks for image recognition with <strong>Neuroph Studio</strong> <br> 3. How to use neural networks trained for image recognition in your applications </p> <p>This tutorial is for Neuroph v2.6.</p> <h3>1. Image Recognition with Multi Layer Perceptron</h3> <p>Every image can be represented as two-dimensional array, where every element of that array contains color information for one pixel. (picture 1) </p> <p><img src="images/picture1.jpg" alt="" width="700" height="288"></p> <p><strong>Picture 1.</strong> Image colors</p> <p>Each color can be represented as a combination of three basic color components: red, green and blue. </p> <p><img src="images/picture2.jpg" alt="" width="151" height="152"></p> <p><strong>Picture 2.</strong> RGB color system </p> <p>So, to represent some image in a RGB system we can use three two-dimensional arrays, one for each color component, where every element corresponds to one image pixel. </p> <p>int [][] &nbsp;redValues <br> int [][] &nbsp;greenValues<br> int [][] &nbsp;blueValues</p> <p>For example, if pixel at location [20, 10] has color RGB[33, 66, 181] we have</p> <p>redValues[10][20] = 33;<br> greenValues[10][20] = 66;<br> blueValues[10][20] = 181;</p> <p>The dimensions of each of these arrays are [imageHeight][imageWidth]</p> <p>We can merge these three arrays into a single one-dimensional array so it contains all red values, then all green and at the end all blue values. Thats how we create <strong>flattenedRgbValues[]</strong> array.<br> The dimension of this array is [imageHeight * imageWidth * 3] <br> Now we can use this one-dimensional array as input for neural network, and to train neural network to recognize or classify them. Multi layer perceptrons are type of neural networks suitable for this tasks (picture 3).</p> <p><img src="images/picture3.jpg" alt="" width="500" height="261"></p> <p><strong>Picture 3</strong>. Feeding multi layer perceptron with color information from image. Each input neuron corresponds to one color component (RGB) of one image pixel at a specific location. </p> <p>Each output neuron corresponds to one image or image class. So if network output is [1, 0, 0] that means that input is recognized as 'image A'.<br> We can create training set for training neural network as set of pairs of input (flatten rgb arrays), and output vectors (where corresponding image neuron is 1). <br> Network can be trained by using Backpropagation learning algorithm. In next section we'll provide some details about the neural netwok and learnig algorithm.</p> <h3>2. Training Neural Network for Image Recognition with <strong>Neuroph Studio</strong></h3> <p><strong>Neuroph Studio</strong> provides environment for creating and training neural networks, which can be saved as ready-to-use java components. Also it provides specialised image recognition tool to train neural networks for image recognition. Creating and training neural network for image recognition consists of the following steps: </p> 
          <ol> 
           <li>Create Neuroph project</li> 
           <li>Create image recognition neural network</li> 
           <li> Train network </li> 
           <li> Test network </li> 
           <li> Save &amp; deploy network</li> 
          </ol> <p><strong>Step 1.</strong> To create Neuroph Project click <strong>File &gt; New Project</strong></p> <p><img src="images/new project 1.png" alt=""></p> <p>&nbsp;</p> Select Neuroph Project, and click <strong>Next</strong>. <p><img src="images/new project 2.png" alt=""></p> <p>&nbsp;</p> Enter project name and location, click <strong>Finish</strong>. <p><img src="images/new project 3.png" alt=""></p> <p>This will create the new Neuroph Project.</p> <p>&nbsp;</p> <p><strong>Step 2.</strong> Next, to create image recognition network, click<strong> File &gt; New File</strong>.</p> <p><img src="images/new file.png" alt=""></p> <p>&nbsp;</p> Select Image Recognition file type, and click <strong>Next</strong>. <p><img src="images/ir 001.png" alt=""></p> <p>&nbsp;</p> <p>Next, choose images you want to be recognized, by selecting individual image files or by adding whole image directoriey. You can also do the basic image editing like cropping and resizing, by opening simple<br> image editor with edit button. </p> <p><img src="images/ir 002.png" alt="" width="911" height="546"></p> <p><strong>Color mode</strong> - You can use image recognition in full color mode or in binary black and white mode. The binary black and white mode represents pixel as [0, 1] and so it uses less number of input neurons. For some applications (like character recognition for example) binary black and white mode may be optimal solution.</p> <p>In next step choose image that shoul dnot be recognized, which will help to avoid false recognition. Usually these are blocks of all red, all green and all blue images, but also migh include others.<br> When you test your image recognition network, you'll figure out what makes sense to include here. </p> <p><img src="images/ir 002-2.png" alt="" width="830" height="526"></p> <p>Then, enter Training Set Label and Image Sampling Resolution, and click <strong>Next</strong>. </p> <p><img src="images/ir 003.png" alt=""></p> <p><strong>Training Set Label</strong> - Since you can create several training sets while experimenting with network, it is a good practice to label them.</p> <p><strong>Image sampling resolution (width x height) </strong> - All provided images will be scaled to this size (width x height). Scaling images will make them smaller, and they will be easier and faster to learn. The image dimensions determine the size of input vector, and number of neurons in input layer. (if you get java heap exceptions for some dimension, try to increase heap size for JVM) </p> <p>For start, you can use the default settings (20x20 resolution and color mode), and just provide the images.</p> <p>&nbsp; </p> <p>The next thing to do, is to create the neural network. </p> <p><img src="images/ir 004.png" alt=""></p> <p>To create the neural network you need to enter the following: </p> <p><strong>Network label</strong> - The label for the neural network, which is usefull when you create several neural networks for the same problem, and you're comparing them.<br> <strong>Transfer function</strong> - This setting determines which transfer function will be used by the neurons. In most cases you can leave the default settings 'Sigmoid', but sometimes using 'Tanh' can give you better results. <br> <strong>Hidden Layers Neuron Counts</strong> - This is the most important setting which determines the number of hidden layers in network, and number of neurons in each hidden layer. Hidden layers are layers between input and output layer. The trick is to have the smallest possible number of layers and neurons which can succesfully learn the training set. The smaller number of neurons - the faster learning, better generalization. Suitable number of hidden neurons also depends of the number of input and output neurons, and the best value can be figured out by experimenting. For start, try 8x8 images and one hidden layer with 12 neurons, which is the default setting. If you wany to increase number of neurons, just enter the number for example '12' neurons. If you want to add more than one layer of neurons enter the number of neurons in each layer separated with space. For example, if you enter '12 8 6' it will create three hidden layers with 12, 8 and 6 neurons.</p> <p> Click the '<strong>Finish</strong>' button to create the neural network. After you click the button new window with created neural network will open. </p> <p>&nbsp;</p> <p><strong>Step 3.</strong> Training network. To train the network select the training set from project tree, and click the '<strong>Train</strong>' button. </p> <p><img src="images/ir 006.png" alt=""></p> <p>&nbsp;</p> <p>This will open the dialog for setting learning parameters. Use the default learning setting and just click the <strong>Train</strong> button.</p> <p><img src="images/ir 008.png" alt=""></p> <p>&nbsp;</p> <p>This will start training and open network learning graph and iteration counter, so you can obesrve the learning process. If the learning gets stuck (total network error does not go down), you can try with different number of neurons, layers or learning parameters. For learning rate and momentum use the values between [0, 1] , and for the error some small value bellow 0.1 is recommended. Some rule of the thumb values are 0.2 for learning rate and 0.7 for momentum.</p> <p><img src="images/ir 009.png" alt=""></p> <p>&nbsp;</p> <p> <strong>Step 4.</strong> Test Network </p> <p>After you have trained the network you can try how it works in the test panel. Click '<strong>Select Test Image</strong>' button to set input image for the network, and the network output will be displayed as the list of image labels and corresponding neuron outputs. The recognized image corresponds to the neuron with highest output. You can test the entire data set by clicking the button '<strong>Test whole data set</strong>'. </p> <p><img src="images/ir 010.png" alt=""></p> <p>&nbsp;</p> <p><strong>Step 5.</strong> Save neural network </p> <p>To save the neural network as Java component click [Main menu &gt; File &gt; Save] and use the .nnet extension. The network will be saved as seralized <em>MultiLayerPerceptron</em> object. </p> <p><img src="images/ir 011.png" alt=""></p> <p>&nbsp;</p> <h3>3. Using Neuroph Image Recognition in Your Applications</h3> <p>Here is the sample code which shows how to use the image recognition neural network created and trained with <strong>Neuroph Studio</strong>. You can run this sample, just specify correct filenames for neural network and some test image. </p> <p>import org.neuroph.core.NeuralNetwork;<br> import org.neuroph.contrib.imgrec.ImageRecognitionPlugin;<br> import java.util.HashMap;<br> import java.io.File;<br> import java.io.IOException;</p> <p> public class ImageRecognitionSample {<br> <br> &nbsp;public static void main(String[] args) {<br> &nbsp;&nbsp;&nbsp;&nbsp;// load trained neural network saved with Neuroph Studio (specify some existing neural network file here)<br> &nbsp;&nbsp;&nbsp;&nbsp;NeuralNetwork nnet = NeuralNetwork.load("MyImageRecognition.nnet"); // load trained neural network saved with Neuroph Studio<br> &nbsp;&nbsp;&nbsp;&nbsp;// get the image recognition plugin from neural network<br> &nbsp;&nbsp;&nbsp;&nbsp;ImageRecognitionPlugin imageRecognition = (ImageRecognitionPlugin)nnet.getPlugin(ImageRecognitionPlugin.class); // get the image recognition plugin from neural network </p> <p> &nbsp;&nbsp;&nbsp;&nbsp;try {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // image recognition is done here (specify some existing image file)<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HashMap&lt;String, Double&gt; output = imageRecognition.recognizeImage(new File("someImage.jpg"));<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(output.toString());<br> &nbsp;&nbsp;&nbsp;&nbsp;} catch(IOException ioe) {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ioe.printStackTrace();<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;}<br> }</p> <p>Actual image recognition is done with just one method call from ImageRecognitionPlugin:</p> 
          <blockquote> 
           <p> imageRecognition.recognizeImage(new File("someImage.jpg"));</p> 
          </blockquote> <p>ImageRecognitionPlugin provides simple image recognition interface to neural network. You can recognize images from various sources like File, BufferedImage or URL. For example: </p> 
          <blockquote> 
           <p>imageRecognition.recognizeImage(new URL("http://www.example.com/someImage.jpg"));</p> 
          </blockquote> <p>For more details check the classes in <em>org.neuroph.contrib.imgrec</em> package. <br> To use image recognition classes, you must add a reference to <em>neuroph.jar</em> in your project (right click project &gt; Properties &gt; Libraries &gt; Add JAR/Folder)</p> <p>&nbsp;</p> <h3><br> TROUBLESHOOTING</h3> <p>1. Scale image dimensions used for training to the same dimensions to avoid possible issues.<br> 2. Use the same color mode and image dimensions for training and recognition. If color is not important for you use black and white since training is faster.<br> 3. If you get out of memory exceptions for bigger images increase size for the JVM with &#x2013;Xms and &#x2013;Xmx options.<br> </p> <h3>TRANSLATIONS</h3> <p>The translation of this tutorial in romanian is available <a href="http://webhostinggeeks.com/science/image-recognition-rm">here</a> Thanks to Alexander Ovsov for the translation!</p> <p>The translation of this tutorial in portuguese is available <a href="image_recognition_portuguese.html">here</a> Thanks to Nicholas Braga for the translation!</p> <p>The translation of this tutorial in russian is available <a href="http://www.enginearena.com/blog/image-recognition/">here</a> Thanks to Rustam Paskaev for the translation!</p> <p>The translation of this tutorial in ukrainian is available <a href="http://www.opensourceinitiative.net/edu/image_recognition/">here</a> Thanks to Sandi Wolfe for the translation!</p> <p><strong>MORE INFO</strong></p> Neural networks in image processing <a href="http://www.egmont-petersen.nl/Journal-papers/Egmont-PR-Review2002.pdf">http://www.egmont-petersen.nl/Journal-papers/Egmont-PR-Review2002.pdf</a><br> Many other neural networks and image processing related papers <a href="http://www.egmont-petersen.nl/nn-review.html">http://www.egmont-petersen.nl/nn-review.html</a> <p>Thanks Michael Egmont-Petersen for this contribution.</p></td>
        </tr>
       </tbody>
      </table> </td> 
    </tr> 
    <tr bordercolor="0"> 
     <td colspan="3" align="right" valign="middle"><span class="style1"></span><a href="http://www.java.com?cid=2436"> </a><a href="http://goodoldai.org" target="_blank"><img src="images/goai_logo.jpg" alt="" width="150" height="61" border="0" align="absmiddle"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank"></a><a href="http://www.java.com?cid=2436"><img src="http://java.com/im/get_powered_sm.jpg" alt="Java Get Powered" width="100" height="45" border="0" align="absmiddle" style="margin: 8px;" title="Java Get Powered"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank"></a><a href="http://netbeans.org"><img src="images/built-on-nb.gif" alt="Java Get Powered" width="150" height="65" border="0" align="absmiddle" style="margin: 8px;" title="Java Get Powered"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.opensource.org/docs/osd" target="_blank"><img src="images/opensource-55x48-t.png" alt="" width="55" height="48" border="0" align="absmiddle"></a><a href="http://www.java.com?cid=2436"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.gnu.org/licenses/lgpl.html" target="_blank"></a><a href="http://goodoldai.org" target="_blank"></a><a href="http://www.apache.org/licenses/LICENSE-2.0.html" target="_blank"><img src="images/apache_logo.jpg" alt="" width="100" height="50" border="0" align="absmiddle" style="margin: 8px;"></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="style1"><a href="http://sourceforge.net/projects/neuroph"><img src="http://sflogo.sourceforge.net/sflogo.php?group_id=238532&amp;type=16" alt="Get Java Neural Network Framework Neuroph at SourceForge.net. Fast, secure and Free Open Source software downloads" width="150" height="40" border="0" align="absmiddle"></a></span></td> 
    </tr> 
   </tbody>
  </table> 
  <h2>&nbsp;</h2> 
  <h2>&nbsp;</h2>   
 </body>
</html>