<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>Language.Javascript.JSaddle.Object</title>
  <link href="ocean.css" rel="stylesheet" type="text/css" title="Ocean">
  <script src="haddock-util.js" type="text/javascript"></script>
  <script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"></script>
  <script type="text/javascript">//<![CDATA[
window.onload = function () {pageLoad();setSynopsis("mini_Language-Javascript-JSaddle-Object.html");};
//]]>
</script>
 </head>
 <body>
  <div id="package-header">
   <ul class="links" id="page-menu">
    <li><a href="src/Language-Javascript-JSaddle-Object.html">Source</a></li>
    <li><a href="/package/jsaddle-0.9.4.0">Contents</a></li>
    <li><a href="doc-index.html">Index</a></li>
   </ul>
   <p class="caption">jsaddle-0.9.4.0: Interface for JavaScript that works with GHCJS and GHC</p>
  </div>
  <div id="content">
   <div id="module-header">
    <table class="info">
     <tbody>
      <tr>
       <th>Safe Haskell</th>
       <td>None</td>
      </tr>
      <tr>
       <th>Language</th>
       <td>Haskell2010</td>
      </tr>
     </tbody>
    </table>
    <p class="caption">Language.Javascript.JSaddle.Object</p>
   </div>
   <div id="table-of-contents">
    <p class="caption">Contents</p>
    <ul>
     <li><a href="#g:1">Property lookup</a></li>
     <li><a href="#g:2">Setting the value of a property</a></li>
     <li><a href="#g:3">Calling JavaSctipt</a></li>
     <li><a href="#g:4">Calling Haskell From JavaScript</a>
      <ul>
       <li><a href="#g:5">Object Constructors</a></li>
      </ul></li>
     <li><a href="#g:6">Arrays</a></li>
     <li><a href="#g:7">Global Object</a></li>
     <li><a href="#g:8">Enumerating Properties</a></li>
     <li><a href="#g:9">Low level</a></li>
     <li><a href="#section.orphans">Orphan instances</a></li>
    </ul>
   </div>
   <div id="description">
    <p class="caption">Description</p>
    <div class="doc">
     <p>Interface to JavaScript object</p>
    </div>
   </div>
   <div id="synopsis">
    <p id="control.syn" class="caption expander" onclick="toggleSection('syn')">Synopsis</p>
    <ul id="section.syn" class="hide" onclick="toggleSection('syn')">
     <li class="src short"><span class="keyword">newtype</span> <a href="#t:Object">Object</a> = <a href="#v:Object">Object</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><span class="keyword">class</span> <a href="#t:MakeObject">MakeObject</a> this <span class="keyword">where</span>
      <ul class="subs"></ul></li>
     <li class="src short"><a href="#v:-33-">(!)</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name) =&gt; this -&gt; name -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:-33--33-">(!!)</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this =&gt; this -&gt; <a href="/package/base-4.9.1.0/docs/Data-Int.html#t:Int">Int</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:js">js</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> s, <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name) =&gt; name -&gt; <a href="/package/lens-4.15.4/docs/Control-Lens-Type.html#t:IndexPreservingGetter">IndexPreservingGetter</a> s (<a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>)</li>
     <li class="src short"><a href="#v:jss">jss</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> val) =&gt; name -&gt; val -&gt; <span class="keyword">forall</span> o. <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> o =&gt; <a href="/package/lens-4.15.4/docs/Control-Lens-Type.html#t:IndexPreservingGetter">IndexPreservingGetter</a> o (<a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ())</li>
     <li class="src short"><span class="keyword">type</span> <a href="#t:JSF">JSF</a> = <span class="keyword">forall</span> o. <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> o =&gt; <a href="/package/lens-4.15.4/docs/Control-Lens-Type.html#t:IndexPreservingGetter">IndexPreservingGetter</a> o (<a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>)</li>
     <li class="src short"><a href="#v:jsf">jsf</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; name -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a></li>
     <li class="src short"><a href="#v:js0">js0</a> :: <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name =&gt; name -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a></li>
     <li class="src short"><a href="#v:js1">js1</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0) =&gt; name -&gt; a0 -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a></li>
     <li class="src short"><a href="#v:js2">js2</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1) =&gt; name -&gt; a0 -&gt; a1 -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a></li>
     <li class="src short"><a href="#v:js3">js3</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a></li>
     <li class="src short"><a href="#v:js4">js4</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a3) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; a3 -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a></li>
     <li class="src short"><a href="#v:js5">js5</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a3, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a4) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; a3 -&gt; a4 -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a></li>
     <li class="src short"><a href="#v:jsg">jsg</a> :: <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> a =&gt; a -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:jsgf">jsgf</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; name -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:jsg0">jsg0</a> :: <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name =&gt; name -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:jsg1">jsg1</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0) =&gt; name -&gt; a0 -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:jsg2">jsg2</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1) =&gt; name -&gt; a0 -&gt; a1 -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:jsg3">jsg3</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:jsg4">jsg4</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a3) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; a3 -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:jsg5">jsg5</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a3, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a4) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; a3 -&gt; a4 -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:-60--35-">(&lt;#)</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> val) =&gt; this -&gt; name -&gt; val -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ()</li>
     <li class="src short"><a href="#v:-60--35--35-">(&lt;##)</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> val) =&gt; this -&gt; <a href="/package/base-4.9.1.0/docs/Data-Int.html#t:Int">Int</a> -&gt; val -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ()</li>
     <li class="src short"><a href="#v:-35-">(#)</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; this -&gt; name -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:-35--35-">(##)</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; this -&gt; <a href="/package/base-4.9.1.0/docs/Data-Int.html#t:Int">Int</a> -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:new">new</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> constructor, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; constructor -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:call">call</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> f, <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; f -&gt; this -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:obj">obj</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a></li>
     <li class="src short"><a href="#v:create">create</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a></li>
     <li class="src short"><a href="#v:getProp">getProp</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:unsafeGetProp">unsafeGetProp</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:setProp">setProp</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a> -&gt; <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ()</li>
     <li class="src short"><a href="#v:unsafeSetProp">unsafeSetProp</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a> -&gt; <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ()</li>
     <li class="src short"><span class="keyword">newtype</span> <a href="#t:Function">Function</a> = <a href="#v:Function">Function</a> {
      <ul class="subs">
       <li><a href="#v:functionObject">functionObject</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a></li>
      </ul>}</li>
     <li class="src short"><a href="#v:function">function</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Function">Function</a></li>
     <li class="src short"><a href="#v:asyncFunction">asyncFunction</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Function">Function</a></li>
     <li class="src short"><a href="#v:freeFunction">freeFunction</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Function">Function</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ()</li>
     <li class="src short"><a href="#v:fun">fun</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a></li>
     <li class="src short"><span class="keyword">type</span> <a href="#t:JSCallAsFunction">JSCallAsFunction</a> = <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> -&gt; <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> -&gt; [<a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>] -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ()</li>
     <li class="src short"><a href="#v:fromListIO">fromListIO</a> :: [<a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>] -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> (<a href="Language-Javascript-JSaddle-Types.html#t:SomeJSArray">SomeJSArray</a> m)</li>
     <li class="src short"><a href="#v:array">array</a> :: <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args =&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a></li>
     <li class="src short"><a href="#v:global">global</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a></li>
     <li class="src short"><a href="#v:listProps">listProps</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> [<a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a>]</li>
     <li class="src short"><a href="#v:propertyNames">propertyNames</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this =&gt; this -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> [<a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a>]</li>
     <li class="src short"><a href="#v:properties">properties</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this =&gt; this -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> [<a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>]</li>
     <li class="src short"><a href="#v:objCallAsFunction">objCallAsFunction</a> :: <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args =&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:objCallAsConstructor">objCallAsConstructor</a> :: <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args =&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></li>
     <li class="src short"><a href="#v:nullObject">nullObject</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a></li>
    </ul>
   </div>
   <div id="interface">
    <h1>Documentation</h1>
    <div class="top">
     <p class="src"><span class="keyword">newtype</span> <a id="t:Object" class="def">Object</a> <a href="src/Language-Javascript-JSaddle-Types.html#Object" class="link">Source</a> <a href="#t:Object" class="selflink">#</a></p>
     <div class="doc">
      <p>See <code><a href="JavaScript-Object-Internal.html#v:Object">Object</a></code></p>
     </div>
     <div class="subs constructors">
      <p class="caption">Constructors</p>
      <table>
       <tbody>
        <tr>
         <td class="src"><a id="v:Object" class="def">Object</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></td>
         <td class="doc empty">&nbsp;</td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="subs instances">
      <p id="control.i:Object" class="caption collapser" onclick="toggleSection('i:Object')">Instances</p>
      <div id="section.i:Object" class="show">
       <table>
        <tbody>
         <tr>
          <td class="src clearfix"><span class="inst-left"><span id="control.i:id:Object:MakeObject:1" class="instance expander" onclick="toggleSection('i:id:Object:MakeObject:1')"></span> <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a></span> <a href="src/Language-Javascript-JSaddle-Classes-Internal.html#line-31" class="link">Source</a> <a href="#t:MakeObject" class="selflink">#</a></td>
          <td class="doc"><p>If we already have a Object we are fine</p></td>
         </tr>
         <tr>
          <td colspan="2">
           <div id="section.i:id:Object:MakeObject:1" class="inst-details hide">
            <div class="subs methods">
             <p class="caption">Methods</p>
             <p class="src"><a href="#v:makeObject">makeObject</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> <a href="src/Language-Javascript-JSaddle-Classes-Internal.html#makeObject" class="link">Source</a> <a href="#v:makeObject" class="selflink">#</a></p>
            </div>
           </div></td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
    </div>
    <div class="top">
     <p class="src"><span class="keyword">class</span> <a id="t:MakeObject" class="def">MakeObject</a> this <span class="keyword">where</span> <a href="src/Language-Javascript-JSaddle-Classes-Internal.html#MakeObject" class="link">Source</a> <a href="#t:MakeObject" class="selflink">#</a></p>
     <div class="doc">
      <p>Anything that can be used to make a JavaScript object reference</p>
     </div>
     <div class="subs minimal">
      <p class="caption">Minimal complete definition</p>
      <p class="src"><a href="Language-Javascript-JSaddle-Object.html#v:makeObject">makeObject</a></p>
     </div>
     <div class="subs methods">
      <p class="caption">Methods</p>
      <p class="src"><a id="v:makeObject" class="def">makeObject</a> :: this -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> <a href="src/Language-Javascript-JSaddle-Classes-Internal.html#makeObject" class="link">Source</a> <a href="#v:makeObject" class="selflink">#</a></p>
     </div>
     <div class="subs instances">
      <p id="control.i:MakeObject" class="caption collapser" onclick="toggleSection('i:MakeObject')">Instances</p>
      <div id="section.i:MakeObject" class="show">
       <table>
        <tbody>
         <tr>
          <td class="src clearfix"><span class="inst-left"><span id="control.i:ic:MakeObject:MakeObject:1" class="instance expander" onclick="toggleSection('i:ic:MakeObject:MakeObject:1')"></span> <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a></span> <a href="src/Language-Javascript-JSaddle-Classes-Internal.html#line-31" class="link">Source</a> <a href="#t:MakeObject" class="selflink">#</a></td>
          <td class="doc"><p>If we already have a Object we are fine</p></td>
         </tr>
         <tr>
          <td colspan="2">
           <div id="section.i:ic:MakeObject:MakeObject:1" class="inst-details hide">
            <div class="subs methods">
             <p class="caption">Methods</p>
             <p class="src"><a href="#v:makeObject">makeObject</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> <a href="src/Language-Javascript-JSaddle-Classes-Internal.html#makeObject" class="link">Source</a> <a href="#v:makeObject" class="selflink">#</a></p>
            </div>
           </div></td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
    </div>
    <h1 id="g:1">Property lookup</h1>
    <div class="top">
     <p class="src"><a id="v:-33-" class="def">(!)</a> <a href="src/Language-Javascript-JSaddle-Object.html#%21" class="link">Source</a> <a href="#v:-33-" class="selflink">#</a></p>
     <div class="subs arguments">
      <p class="caption">Arguments</p>
      <table>
       <tbody>
        <tr>
         <td class="src">:: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name)</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
        <tr>
         <td class="src">=&gt; this</td>
         <td class="doc"><p>Object to look on</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; name</td>
         <td class="doc"><p>Name of the property to find</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></td>
         <td class="doc"><p>Property reference</p></td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="doc">
      <p>Lookup a property based on its name.</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "'Hello World'.length" </code></strong>11
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ val "Hello World" ! "length" </code></strong>11
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:-33--33-" class="def">(!!)</a> <a href="src/Language-Javascript-JSaddle-Object.html#%21%21" class="link">Source</a> <a href="#v:-33--33-" class="selflink">#</a></p>
     <div class="subs arguments">
      <p class="caption">Arguments</p>
      <table>
       <tbody>
        <tr>
         <td class="src">:: <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
        <tr>
         <td class="src">=&gt; this</td>
         <td class="doc"><p>Object to look on</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="/package/base-4.9.1.0/docs/Data-Int.html#t:Int">Int</a></td>
         <td class="doc"><p>Index of the property to lookup</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></td>
         <td class="doc"><p>Property reference</p></td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="doc">
      <p>Lookup a property based on its index.</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "'Hello World'[6]" </code></strong>W
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ val "Hello World" !! 6 </code></strong>W
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:js" class="def">js</a> <a href="src/Language-Javascript-JSaddle-Object.html#js" class="link">Source</a> <a href="#v:js" class="selflink">#</a></p>
     <div class="subs arguments">
      <p class="caption">Arguments</p>
      <table>
       <tbody>
        <tr>
         <td class="src">:: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> s, <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name)</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
        <tr>
         <td class="src">=&gt; name</td>
         <td class="doc"><p>Name of the property to find</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="/package/lens-4.15.4/docs/Control-Lens-Type.html#t:IndexPreservingGetter">IndexPreservingGetter</a> s (<a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>)</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="doc">
      <p>Makes a getter for a particular property name.</p>
      <pre>js name = to (!name)</pre>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "'Hello World'.length" </code></strong>11
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ val "Hello World" ^. js "length" </code></strong>11
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:jss" class="def">jss</a> <a href="src/Language-Javascript-JSaddle-Object.html#jss" class="link">Source</a> <a href="#v:jss" class="selflink">#</a></p>
     <div class="subs arguments">
      <p class="caption">Arguments</p>
      <table>
       <tbody>
        <tr>
         <td class="src">:: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> val)</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
        <tr>
         <td class="src">=&gt; name</td>
         <td class="doc"><p>Name of the property to find</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; val</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> o</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
        <tr>
         <td class="src">=&gt; <a href="/package/lens-4.15.4/docs/Control-Lens-Type.html#t:IndexPreservingGetter">IndexPreservingGetter</a> o (<a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ())</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="doc">
      <p>Makes a setter for a particular property name.</p>
      <pre>jss name = to (&lt;#name)</pre>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "'Hello World'.length = 12" </code></strong>12
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ val "Hello World" ^. jss "length" 12 </code></strong>undefined
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><span class="keyword">type</span> <a id="t:JSF" class="def">JSF</a> = <span class="keyword">forall</span> o. <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> o =&gt; <a href="/package/lens-4.15.4/docs/Control-Lens-Type.html#t:IndexPreservingGetter">IndexPreservingGetter</a> o (<a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>) <a href="src/Language-Javascript-JSaddle-Object.html#JSF" class="link">Source</a> <a href="#t:JSF" class="selflink">#</a></p>
     <div class="doc">
      <p>Java script function applications have this type</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:jsf" class="def">jsf</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; name -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a> <a href="src/Language-Javascript-JSaddle-Object.html#jsf" class="link">Source</a> <a href="#v:jsf" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function</p>
      <pre>jsf name = to (\o -&gt; o # name $ args)</pre>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ val "Hello World" ^. jsf "indexOf" ["World"] </code></strong>6
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:js0" class="def">js0</a> :: <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name =&gt; name -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a> <a href="src/Language-Javascript-JSaddle-Object.html#js0" class="link">Source</a> <a href="#v:js0" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects no arguments</p>
      <pre>js0 name = jsf name ()</pre>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ val "Hello World" ^. js0 "toLowerCase" </code></strong>hello world
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:js1" class="def">js1</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0) =&gt; name -&gt; a0 -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a> <a href="src/Language-Javascript-JSaddle-Object.html#js1" class="link">Source</a> <a href="#v:js1" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects one argument</p>
      <pre>js1 name a0 = jsf name [a0]</pre>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ val "Hello World" ^. js1 "indexOf" "World" </code></strong>6
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:js2" class="def">js2</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1) =&gt; name -&gt; a0 -&gt; a1 -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a> <a href="src/Language-Javascript-JSaddle-Object.html#js2" class="link">Source</a> <a href="#v:js2" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects two arguments</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:js3" class="def">js3</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a> <a href="src/Language-Javascript-JSaddle-Object.html#js3" class="link">Source</a> <a href="#v:js3" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects three arguments</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:js4" class="def">js4</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a3) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; a3 -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a> <a href="src/Language-Javascript-JSaddle-Object.html#js4" class="link">Source</a> <a href="#v:js4" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects four arguments</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:js5" class="def">js5</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a3, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a4) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; a3 -&gt; a4 -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSF">JSF</a> <a href="src/Language-Javascript-JSaddle-Object.html#js5" class="link">Source</a> <a href="#v:js5" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects five arguments</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:jsg" class="def">jsg</a> :: <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> a =&gt; a -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#jsg" class="link">Source</a> <a href="#v:jsg" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to get and hold onto a reference top level javascript</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "w = console; w.log('Hello World')" </code></strong>undefined
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ do w &lt;- jsg "console"; w ^. js1 "log" "Hello World" </code></strong>undefined
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:jsgf" class="def">jsgf</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; name -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#jsgf" class="link">Source</a> <a href="#v:jsgf" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function</p>
      <pre>jsgf name = jsg name . to (# args)</pre>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "globalFunc = function (x) {return x.length;}" </code></strong>function (x) {return x.length;}
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ jsgf "globalFunc" ["World"] </code></strong>5
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:jsg0" class="def">jsg0</a> :: <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name =&gt; name -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#jsg0" class="link">Source</a> <a href="#v:jsg0" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects no arguments</p>
      <pre>jsg0 name = jsgf name ()</pre>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ jsg0 "globalFunc" &gt;&gt;= valToText </code></strong>A JavaScript exception was thrown! (may not reach Haskell code)
TypeError:...undefine...
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:jsg1" class="def">jsg1</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0) =&gt; name -&gt; a0 -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#jsg1" class="link">Source</a> <a href="#v:jsg1" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects one argument</p>
      <pre>jsg1 name a0 = jsgf name [a0]</pre>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ jsg1 "globalFunc" "World" </code></strong>5
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:jsg2" class="def">jsg2</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1) =&gt; name -&gt; a0 -&gt; a1 -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#jsg2" class="link">Source</a> <a href="#v:jsg2" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects two arguments</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:jsg3" class="def">jsg3</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#jsg3" class="link">Source</a> <a href="#v:jsg3" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects three arguments</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:jsg4" class="def">jsg4</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a3) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; a3 -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#jsg4" class="link">Source</a> <a href="#v:jsg4" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects four arguments</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:jsg5" class="def">jsg5</a> :: (<a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a0, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a1, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a2, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a3, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> a4) =&gt; name -&gt; a0 -&gt; a1 -&gt; a2 -&gt; a3 -&gt; a4 -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#jsg5" class="link">Source</a> <a href="#v:jsg5" class="selflink">#</a></p>
     <div class="doc">
      <p>Handy way to call a function that expects five arguments</p>
     </div>
    </div>
    <h1 id="g:2">Setting the value of a property</h1>
    <div class="top">
     <p class="src"><a id="v:-60--35-" class="def">(&lt;#)</a> <span class="fixity">infixr 1</span><span class="rightedge"></span> <a href="src/Language-Javascript-JSaddle-Object.html#%3C%23" class="link">Source</a> <a href="#v:-60--35-" class="selflink">#</a></p>
     <div class="subs arguments">
      <p class="caption">Arguments</p>
      <table>
       <tbody>
        <tr>
         <td class="src">:: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> val)</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
        <tr>
         <td class="src">=&gt; this</td>
         <td class="doc"><p>Object to set the property on</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; name</td>
         <td class="doc"><p>Name of the property to set</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; val</td>
         <td class="doc"><p>Value to set it to</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ()</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="doc">
      <p>Set a JavaScript property</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "var j = {}; j.x = 1; j.x" </code></strong>1
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ do {j &lt;- obj; (j &lt;# "x") 1; j!"x"} </code></strong>1
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:-60--35--35-" class="def">(&lt;##)</a> <span class="fixity">infixr 1</span><span class="rightedge"></span> <a href="src/Language-Javascript-JSaddle-Object.html#%3C%23%23" class="link">Source</a> <a href="#v:-60--35--35-" class="selflink">#</a></p>
     <div class="subs arguments">
      <p class="caption">Arguments</p>
      <table>
       <tbody>
        <tr>
         <td class="src">:: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> val)</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
        <tr>
         <td class="src">=&gt; this</td>
         <td class="doc"><p>Object to set the property on</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="/package/base-4.9.1.0/docs/Data-Int.html#t:Int">Int</a></td>
         <td class="doc"><p>Index of the property to set</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; val</td>
         <td class="doc"><p>Value to set it to</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ()</td>
         <td class="doc empty">&nbsp;</td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="doc">
      <p>Set a JavaScript property</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "var j = {}; j[6] = 1; j[6]" </code></strong>1
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ do {j &lt;- obj; (j &lt;## 6) 1; j!!6} </code></strong>1
</pre>
     </div>
    </div>
    <h1 id="g:3">Calling JavaSctipt</h1>
    <div class="top">
     <p class="src"><a id="v:-35-" class="def">(#)</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="Language-Javascript-JSaddle-Marshal-String.html#t:ToJSString">ToJSString</a> name, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; this -&gt; name -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <span class="fixity">infixr 2</span><span class="rightedge"></span> <a href="src/Language-Javascript-JSaddle-Object.html#%23" class="link">Source</a> <a href="#v:-35-" class="selflink">#</a></p>
     <div class="doc">
      <p>Call a JavaScript function</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "'Hello World'.indexOf('World')" </code></strong>6
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ val "Hello World" # "indexOf" $ ["World"] </code></strong>6
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:-35--35-" class="def">(##)</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; this -&gt; <a href="/package/base-4.9.1.0/docs/Data-Int.html#t:Int">Int</a> -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <span class="fixity">infixr 2</span><span class="rightedge"></span> <a href="src/Language-Javascript-JSaddle-Object.html#%23%23" class="link">Source</a> <a href="#v:-35--35-" class="selflink">#</a></p>
     <div class="doc">
      <p>Call a JavaScript function</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "something = {}; something[6]=function (x) {return x.length;}; something[6]('World')" </code></strong>5
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ jsg "something" ## 6 $ ["World"] </code></strong>5
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:new" class="def">new</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> constructor, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; constructor -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#new" class="link">Source</a> <a href="#v:new" class="selflink">#</a></p>
     <div class="doc">
      <p>Use this to create a new JavaScript object</p>
      <p>If you pass more than 7 arguments to a constructor for a built in JavaScript type (like Date) then this function will fail.</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ new (jsg "Date") (2013, 1, 1) </code></strong>Fri Feb 01 2013 00:00:00 GMT+... (...)
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:call" class="def">call</a> :: (<a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> f, <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this, <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args) =&gt; f -&gt; this -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#call" class="link">Source</a> <a href="#v:call" class="selflink">#</a></p>
     <div class="doc">
      <p>Call function with a given <code>this</code>. In most cases you should use <code><a href="Language-Javascript-JSaddle-Object.html#v:-35-">#</a></code>.</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "(function(){return this;}).apply('Hello', [])" </code></strong>Hello
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ do { test &lt;- eval "(function(){return this;})"; call test (val "Hello") () } </code></strong>Hello
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:obj" class="def">obj</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> <a href="src/Language-Javascript-JSaddle-Object.html#obj" class="link">Source</a> <a href="#v:obj" class="selflink">#</a></p>
     <div class="doc">
      <p>Make an empty object using the default constuctor</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "var a = {}; a.x = 'Hello'; a.x" </code></strong>Hello
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ do { a &lt;- obj; (a &lt;# "x") "Hello"; a ^. js "x" } </code></strong>Hello
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:create" class="def">create</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> <a href="src/JavaScript-Object-Internal.html#create" class="link">Source</a> <a href="#v:create" class="selflink">#</a></p>
     <div class="doc">
      <p>create an empty object</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:getProp" class="def">getProp</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/JavaScript-Object-Internal.html#getProp" class="link">Source</a> <a href="#v:getProp" class="selflink">#</a></p>
     <div class="doc">
      <p>get a property from an object. If accessing the property results in an exception, the exception is converted to a JSException. Since exception handling code prevents some optimizations in some JS engines, you may want to use unsafeGetProp instead</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:unsafeGetProp" class="def">unsafeGetProp</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/JavaScript-Object-Internal.html#unsafeGetProp" class="link">Source</a> <a href="#v:unsafeGetProp" class="selflink">#</a></p>
    </div>
    <div class="top">
     <p class="src"><a id="v:setProp" class="def">setProp</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a> -&gt; <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> () <a href="src/JavaScript-Object-Internal.html#setProp" class="link">Source</a> <a href="#v:setProp" class="selflink">#</a></p>
    </div>
    <div class="top">
     <p class="src"><a id="v:unsafeSetProp" class="def">unsafeSetProp</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a> -&gt; <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> () <a href="src/JavaScript-Object-Internal.html#unsafeSetProp" class="link">Source</a> <a href="#v:unsafeSetProp" class="selflink">#</a></p>
    </div>
    <h1 id="g:4">Calling Haskell From JavaScript</h1>
    <div class="top">
     <p class="src"><span class="keyword">newtype</span> <a id="t:Function" class="def">Function</a> <a href="src/Language-Javascript-JSaddle-Object.html#Function" class="link">Source</a> <a href="#t:Function" class="selflink">#</a></p>
     <div class="doc">
      <p>Make a JavaScript function object that wraps a Haskell function. Calls made to the function will be synchronous where possible (on GHCJS it uses on <code>syncCallback2</code> with <code>ContinueAsync</code>).</p>
     </div>
     <div class="subs constructors">
      <p class="caption">Constructors</p>
      <table>
       <tbody>
        <tr>
         <td class="src"><a id="v:Function" class="def">Function</a></td>
         <td class="doc empty">&nbsp;</td>
        </tr>
        <tr>
         <td colspan="2">
          <div class="subs fields">
           <p class="caption">Fields</p>
           <ul>
            <li><dfn class="src"><a id="v:functionObject" class="def">functionObject</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a></dfn>
             <div class="doc empty">
              &nbsp;
             </div></li>
           </ul>
          </div></td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="subs instances">
      <p id="control.i:Function" class="caption collapser" onclick="toggleSection('i:Function')">Instances</p>
      <div id="section.i:Function" class="show">
       <table>
        <tbody>
         <tr>
          <td class="src clearfix"><span class="inst-left"><span id="control.i:id:Function:ToJSVal:1" class="instance expander" onclick="toggleSection('i:id:Function:ToJSVal:1')"></span> <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> <a href="Language-Javascript-JSaddle-Object.html#t:Function">Function</a></span> <a href="src/Language-Javascript-JSaddle-Object.html#line-499" class="link">Source</a> <a href="#t:Function" class="selflink">#</a></td>
          <td class="doc empty">&nbsp;</td>
         </tr>
         <tr>
          <td colspan="2">
           <div id="section.i:id:Function:ToJSVal:1" class="inst-details hide">
            <div class="subs methods">
             <p class="caption">Methods</p>
             <p class="src"><a href="#v:toJSVal">toJSVal</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Function">Function</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/GHCJS-Marshal-Internal.html#toJSVal" class="link">Source</a> <a href="#v:toJSVal" class="selflink">#</a></p>
             <p class="src"><a href="#v:toJSValListOf">toJSValListOf</a> :: [<a href="Language-Javascript-JSaddle-Object.html#t:Function">Function</a>] -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/GHCJS-Marshal-Internal.html#toJSValListOf" class="link">Source</a> <a href="#v:toJSValListOf" class="selflink">#</a></p>
            </div>
           </div></td>
         </tr>
        </tbody>
       </table>
      </div>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:function" class="def">function</a> <a href="src/Language-Javascript-JSaddle-Object.html#function" class="link">Source</a> <a href="#v:function" class="selflink">#</a></p>
     <div class="subs arguments">
      <p class="caption">Arguments</p>
      <table>
       <tbody>
        <tr>
         <td class="src">:: <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a></td>
         <td class="doc"><p>Haskell function to call</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Function">Function</a></td>
         <td class="doc"><p>Returns a JavaScript function object that will call the Haskell one when it is called</p></td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="doc">
      <p>Make a JavaScript function object that wraps a Haskell function. Calls made to the function will be Asynchronous.</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:asyncFunction" class="def">asyncFunction</a> <a href="src/Language-Javascript-JSaddle-Object.html#asyncFunction" class="link">Source</a> <a href="#v:asyncFunction" class="selflink">#</a></p>
     <div class="subs arguments">
      <p class="caption">Arguments</p>
      <table>
       <tbody>
        <tr>
         <td class="src">:: <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a></td>
         <td class="doc"><p>Haskell function to call</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Function">Function</a></td>
         <td class="doc"><p>Returns a JavaScript function object that will call the Haskell one when it is called</p></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:freeFunction" class="def">freeFunction</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Function">Function</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> () <a href="src/Language-Javascript-JSaddle-Object.html#freeFunction" class="link">Source</a> <a href="#v:freeFunction" class="selflink">#</a></p>
    </div>
    <div class="top">
     <p class="src"><a id="v:fun" class="def">fun</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a> <a href="src/Language-Javascript-JSaddle-Object.html#fun" class="link">Source</a> <a href="#v:fun" class="selflink">#</a></p>
     <div class="doc">
      <p>Short hand <code>::JSCallAsFunction</code> so a haskell function can be passed to a to a JavaScipt one.</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "(function(f) {f('Hello');})(function (a) {console.log(a)})" </code></strong>undefined
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>:{ </code></strong> testJSaddle $ do
   result &lt;- liftIO newEmptyMVar
   deRefVal $ call (eval "(function(f) {f('Hello');})") global [fun $ \ _ _ [arg1] -&gt; do
        valToText arg1 &gt;&gt;= (liftIO . putMVar result)
        ]
   liftIO $ takeMVar result
:}
Hello
</pre>
     </div>
    </div>
    <div class="top">
     <p class="src"><span class="keyword">type</span> <a id="t:JSCallAsFunction" class="def">JSCallAsFunction</a> <a href="src/Language-Javascript-JSaddle-Types.html#JSCallAsFunction" class="link">Source</a> <a href="#t:JSCallAsFunction" class="selflink">#</a></p>
     <div class="subs arguments">
      <p class="caption">Arguments</p>
      <table>
       <tbody>
        <tr>
         <td class="src">&nbsp;= <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></td>
         <td class="doc"><p>Function object</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a></td>
         <td class="doc"><p>this</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; [<a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>]</td>
         <td class="doc"><p>Function arguments</p></td>
        </tr>
        <tr>
         <td class="src">-&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> ()</td>
         <td class="doc"><p>Only () (aka <code>JSUndefined</code>) can be returned because the function may need to be executed in a different thread. If you need to get a value out pass in a continuation function as an argument and invoke it from haskell.</p></td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="doc">
      <p>Type used for Haskell functions called from JavaScript.</p>
     </div>
    </div>
    <h2 id="g:5">Object Constructors</h2>
    <div class="doc">
     <p>There is no good way to support calling haskell code as a JavaScript constructor for the same reason that the return type of <code><a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a></code> is <code>JSUndefined</code>.</p>
     <p>Instead of writing a constructor in Haskell write a function that takes a continuation. Create the JavaScript object and pass it to the continuation.</p>
    </div>
    <h1 id="g:6">Arrays</h1>
    <div class="top">
     <p class="src"><a id="v:fromListIO" class="def">fromListIO</a> :: [<a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>] -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> (<a href="Language-Javascript-JSaddle-Types.html#t:SomeJSArray">SomeJSArray</a> m) <a href="src/JavaScript-Array-Internal.html#fromListIO" class="link">Source</a> <a href="#v:fromListIO" class="selflink">#</a></p>
    </div>
    <div class="top">
     <p class="src"><a id="v:array" class="def">array</a> :: <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args =&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> <a href="src/Language-Javascript-JSaddle-Object.html#array" class="link">Source</a> <a href="#v:array" class="selflink">#</a></p>
     <div class="doc">
      <p>Make an JavaScript array from a list of values</p>
      <pre class="screen"><code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "['Hello', 'World'][1]" </code></strong>World
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ array ["Hello", "World"] !! 1 </code></strong>World
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ eval "['Hello', null, undefined, true, 1]" </code></strong>Hello,,,true,1
<code class="prompt">&gt;&gt;&gt; </code><strong class="userinput"><code>testJSaddle $ array ("Hello", JSNull, (), True, 1.0::Double) </code></strong>Hello,,,true,1
</pre>
     </div>
    </div>
    <h1 id="g:7">Global Object</h1>
    <div class="top">
     <p class="src"><a id="v:global" class="def">global</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> <a href="src/Language-Javascript-JSaddle-Object.html#global" class="link">Source</a> <a href="#v:global" class="selflink">#</a></p>
     <div class="doc">
      <p>JavaScript's global object</p>
     </div>
    </div>
    <h1 id="g:8">Enumerating Properties</h1>
    <div class="top">
     <p class="src"><a id="v:listProps" class="def">listProps</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> [<a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a>] <a href="src/JavaScript-Object-Internal.html#listProps" class="link">Source</a> <a href="#v:listProps" class="selflink">#</a></p>
    </div>
    <div class="top">
     <p class="src"><a id="v:propertyNames" class="def">propertyNames</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this =&gt; this -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> [<a href="Language-Javascript-JSaddle-Types.html#t:JSString">JSString</a>] <a href="src/Language-Javascript-JSaddle-Object.html#propertyNames" class="link">Source</a> <a href="#v:propertyNames" class="selflink">#</a></p>
     <div class="doc">
      <p>Get a list containing the property names present on a given object &gt;&gt;&gt; testJSaddle $ show . map strToText <a href="$">$</a> propertyNames obj [] &gt;&gt;&gt; testJSaddle $ show . map strToText <a href="$">$</a> propertyNames (eval "({x:1, y:2})") ["x","y"]</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:properties" class="def">properties</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> this =&gt; this -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> [<a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>] <a href="src/Language-Javascript-JSaddle-Object.html#properties" class="link">Source</a> <a href="#v:properties" class="selflink">#</a></p>
     <div class="doc">
      <p>Get a list containing references to all the properties present on a given object</p>
     </div>
    </div>
    <h1 id="g:9">Low level</h1>
    <div class="top">
     <p class="src"><a id="v:objCallAsFunction" class="def">objCallAsFunction</a> :: <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args =&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#objCallAsFunction" class="link">Source</a> <a href="#v:objCallAsFunction" class="selflink">#</a></p>
     <div class="doc">
      <p>Call a JavaScript object as function. Consider using <code><a href="Language-Javascript-JSaddle-Object.html#v:-35-">#</a></code>.</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:objCallAsConstructor" class="def">objCallAsConstructor</a> :: <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> args =&gt; <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> -&gt; args -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/Language-Javascript-JSaddle-Object.html#objCallAsConstructor" class="link">Source</a> <a href="#v:objCallAsConstructor" class="selflink">#</a></p>
     <div class="doc">
      <p>Call a JavaScript object as a constructor. Consider using <code><a href="Language-Javascript-JSaddle-Object.html#v:new">new</a></code>.</p>
      <p>If you pass more than 7 arguments to a constructor for a built in JavaScript type (like Date) then this function will fail.</p>
     </div>
    </div>
    <div class="top">
     <p class="src"><a id="v:nullObject" class="def">nullObject</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> <a href="src/Language-Javascript-JSaddle-Object.html#nullObject" class="link">Source</a> <a href="#v:nullObject" class="selflink">#</a></p>
    </div>
    <h1>Orphan instances</h1>
    <div id="section.orphans" class="show">
     <table>
      <tbody>
       <tr>
        <td class="src clearfix"><span class="inst-left"><span id="control.i:o:ic:MakeArgs:MakeArgs:1" class="instance expander" onclick="toggleSection('i:o:ic:MakeArgs:MakeArgs:1')"></span> <a href="Language-Javascript-JSaddle-Classes-Internal.html#t:MakeArgs">MakeArgs</a> <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a></span> <a href="src/Language-Javascript-JSaddle-Object.html#line-508" class="link">Source</a> <a href="#v:-36-fMakeArgs-40--45--62--41-" class="selflink">#</a></td>
        <td class="doc empty">&nbsp;</td>
       </tr>
       <tr>
        <td colspan="2">
         <div id="section.i:o:ic:MakeArgs:MakeArgs:1" class="inst-details hide">
          <div class="subs methods">
           <p class="caption">Methods</p>
           <p class="src"><a href="#v:makeArgs">makeArgs</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> [<a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a>] <a href="src/Language-Javascript-JSaddle-Classes-Internal.html#makeArgs" class="link">Source</a> <a href="#v:makeArgs" class="selflink">#</a></p>
          </div>
         </div></td>
       </tr>
       <tr>
        <td class="src clearfix"><span class="inst-left"><span id="control.i:o:ic:ToJSVal:ToJSVal:2" class="instance expander" onclick="toggleSection('i:o:ic:ToJSVal:ToJSVal:2')"></span> <a href="GHCJS-Marshal-Internal.html#t:ToJSVal">ToJSVal</a> <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a></span> <a href="src/Language-Javascript-JSaddle-Object.html#line-505" class="link">Source</a> <a href="#v:-36-fToJSVal-40--45--62--41-" class="selflink">#</a></td>
        <td class="doc"><p>A callback to Haskell can be used as a JavaScript value. This will create an anonymous JavaScript function object. Use <code><a href="Language-Javascript-JSaddle-Object.html#v:function">function</a></code> to create one with a name.</p></td>
       </tr>
       <tr>
        <td colspan="2">
         <div id="section.i:o:ic:ToJSVal:ToJSVal:2" class="inst-details hide">
          <div class="subs methods">
           <p class="caption">Methods</p>
           <p class="src"><a href="#v:toJSVal">toJSVal</a> :: <a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a> -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/GHCJS-Marshal-Internal.html#toJSVal" class="link">Source</a> <a href="#v:toJSVal" class="selflink">#</a></p>
           <p class="src"><a href="#v:toJSValListOf">toJSValListOf</a> :: [<a href="Language-Javascript-JSaddle-Object.html#t:JSCallAsFunction">JSCallAsFunction</a>] -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="GHCJS-Prim-Internal.html#t:JSVal">JSVal</a> <a href="src/GHCJS-Marshal-Internal.html#toJSValListOf" class="link">Source</a> <a href="#v:toJSValListOf" class="selflink">#</a></p>
          </div>
         </div></td>
       </tr>
       <tr>
        <td class="src clearfix"><span class="inst-left"><span id="control.i:o:ic:MakeObject:MakeObject:3" class="instance expander" onclick="toggleSection('i:o:ic:MakeObject:MakeObject:3')"></span> <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> v =&gt; <a href="Language-Javascript-JSaddle-Object.html#t:MakeObject">MakeObject</a> (<a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> v)</span> <a href="src/Language-Javascript-JSaddle-Object.html#line-149" class="link">Source</a> <a href="#v:-36-fMakeObjectJSM" class="selflink">#</a></td>
        <td class="doc"><p>Object can be made by evaluating a fnction in <code><a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a></code> as long as it returns something we can make into a Object.</p></td>
       </tr>
       <tr>
        <td colspan="2">
         <div id="section.i:o:ic:MakeObject:MakeObject:3" class="inst-details hide">
          <div class="subs methods">
           <p class="caption">Methods</p>
           <p class="src"><a href="#v:makeObject">makeObject</a> :: <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> v -&gt; <a href="Language-Javascript-JSaddle-Types.html#t:JSM">JSM</a> <a href="Language-Javascript-JSaddle-Object.html#t:Object">Object</a> <a href="src/Language-Javascript-JSaddle-Classes-Internal.html#makeObject" class="link">Source</a> <a href="#v:makeObject" class="selflink">#</a></p>
          </div>
         </div></td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
  </div>
  <div id="footer">
   <p>Produced by <a href="http://www.haskell.org/haddock/">Haddock</a> version 2.17.3</p>
  </div>
 </body>
</html>