<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
 <head>
  <meta http-equiv="content-type" content="text-html; charset=utf-8">
  <title>How to Make Java Packages</title>
  <link rel="stylesheet" type="text/css" href="scribble.css" title="default">
  <link rel="stylesheet" type="text/css" href="scribble-style.css" title="default">
  <script type="text/javascript" src="scribble-common.js"></script>
 </head>
 <body id="scribble-racket-lang-org">
  <div class="tocset">
   <div class="tocview">
    <div class="tocviewlist" style="margin-bottom: 1em;">
     <div class="tocviewtitle">
      <table cellspacing="0" cellpadding="0">
       <tbody>
        <tr>
         <td style="width: 1em;"><a href="javascript:void(0);" title="Expand/Collapse" class="tocviewtoggle" onclick="TocviewToggle(this,&quot;tocview_0&quot;);">?</a></td>
         <td></td>
         <td><a href="" class="tocviewselflink" pltdoc="x">How to Make Java Packages</a></td>
        </tr>
       </tbody>
      </table>
     </div>
     <div class="tocviewsublistonly" style="display: none;" id="tocview_0">
      <table cellspacing="0" cellpadding="0">
       <tbody>
        <tr>
         <td align="right">1&nbsp;</td>
         <td><a href="#(part._.For_.Dr.Java)" class="tocviewlink" pltdoc="x">For Dr<span class="mywbr"> </span>Java</a></td>
        </tr>
        <tr>
         <td align="right">2&nbsp;</td>
         <td><a href="#(part._.For_.Eclipse)" class="tocviewlink" pltdoc="x">For Eclipse</a></td>
        </tr>
        <tr>
         <td align="right">3&nbsp;</td>
         <td><a href="#(part._.Exporting_.Package_to_.Others)" class="tocviewlink" pltdoc="x">Exporting Package to Others</a></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
   </div>
   <div class="tocsub">
    <table class="tocsublist" cellspacing="0">
     <tbody>
      <tr>
       <td><span class="tocsublinknumber">1<tt>&nbsp;</tt></span><a href="#(part._.For_.Dr.Java)" class="tocsubseclink" pltdoc="x">For Dr<span class="mywbr"> </span>Java</a></td>
      </tr>
      <tr>
       <td><span class="tocsublinknumber">2<tt>&nbsp;</tt></span><a href="#(part._.For_.Eclipse)" class="tocsubseclink" pltdoc="x">For Eclipse</a></td>
      </tr>
      <tr>
       <td><span class="tocsublinknumber">3<tt>&nbsp;</tt></span><a href="#(part._.Exporting_.Package_to_.Others)" class="tocsubseclink" pltdoc="x">Exporting Package to Others</a></td>
      </tr>
     </tbody>
    </table>
   </div>
  </div>
  <div class="maincolumn">
   <div class="main">
    <h2><a name="(part._.How_to_.Make_.Java_.Packages)"></a>How to Make Java Packages</h2>
    <div class="SAuthorListBox">
     <span class="SAuthorList"><p class="author">Kathi Fisler</p></span>
    </div>
    <p><span style="font-weight: bold">Credits:</span> Thanks to Taymon Beal for the detailed instructions on doing this in Eclipse.</p>
    <p>In Java, <span style="font-style: italic">packages</span> bundle related classes into a single unit that others can use. Whenever you use the <span style="font-style: italic">import</span> statement, you are using someone else’s Java package: so far, you have used the Tester and LinkedList packages, for example. These notes describe how to create your own packages, a standard component of working in Java.</p>
    <p>Whether you are using Eclipse or DrJava, packages go along with <span style="font-style: italic">projects</span>. The instructions for creating projects differ across the two tools, but both share the conventional Java directory structure for packages. Let’s understand the package directory structure first, then discuss how to create projects in each tool.</p>
    <p>Packages are aligned with the structure of files and directories that contain your classes. When you create a package, you want your code to end up in a directory structure like the following:</p>
    <p></p>
    <table cellspacing="0">
     <tbody>
      <tr>
       <td><p><span class="stt"><span class="stt">project-directory</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;</span><span class="stt">&gt; src</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; package-name</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; ... your .java files</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;</span><span class="stt">&gt; bin [all your .class files will end up in here]</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;</span><span class="stt">&gt; test</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; package-name</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; Examples.java</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; Main.java</span></span></p></td>
      </tr>
     </tbody>
    </table>
    <p></p>
    <p>As a concrete example, assume I wanted to make a package called <span class="stt">animals</span> from our start-of-term code about boas and dillos. I would then want the following directory structure:</p>
    <p></p>
    <table cellspacing="0">
     <tbody>
      <tr>
       <td><p><span class="stt"><span class="stt">animals-project</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;</span><span class="stt">&gt; src</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; animals</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; Dillo.java</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; Boa.java</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; IAnimal.java</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;</span><span class="stt">&gt; bin</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; animals</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; Dillo.class</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; Boa.class</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; IAnimal.class</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; Examples.class</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; Main.class</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;</span><span class="stt">&gt; test</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; animals</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; Examples.java</span></span></p></td>
      </tr>
      <tr>
       <td><p><span class="stt"><span class="hspace">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="stt">&gt; Main.java</span></span></p></td>
      </tr>
     </tbody>
    </table>
    <p></p>
    <p>In each of the .java files in the animals project (both src and test files), the first non-comment line would have to be <span class="stt">package animals;</span></p>
    <p>Note that the compiler creates the .class files as always – you just have to have the bin directory in which to put those files.</p>
    <p>Once you have your project set up, you just need to be sure to put your .java files in the correct place (src or test) as you create and save them.</p>
    <h3>1<tt>&nbsp;</tt><a name="(part._.For_.Dr.Java)"></a>For DrJava</h3>
    <p>With DrJava, you set up the directories shown above manually, then collect them into a single project.</p>
    <p>Set up the directory structure as shown above: make a directory for your work, create subdirectories called "src", "bin", and "test", and put subdirectories with the name of your package into each of "src" and "test". Then, follow these <a href="http://www.clear.rice.edu/comp201/08-spring/info/drjavaproject.shtml">instructions for creating a DrJava project</a>, using your project-directory directory as the "Project Root", your "bin" directory as the "Build Directory", and your project-directory as the "Working Directory".</p>
    <p>The copy of Main.java in the test directory also needs the same "package ..." declaration at the top as all other files for the package,</p>
    <p>Skip the instructions on the project-instructions page about "Testing the Project", as those instructions were not written for someone using the tester library.</p>
    <p>Once you add files to your project, you should be able to compile the project and run it, getting the same tester output that you have all term. Should you get an error about Java not being able to find the tester library, go to the "Project" menu, then "Project Preferences" (at the bottom), then add the tester.jar file as an "Extra Classpath".</p>
    <h3>2<tt>&nbsp;</tt><a name="(part._.For_.Eclipse)"></a>For Eclipse</h3>
    <p>With Eclipse, creating a new project sets up (most) of the directories shown above automatically.</p>
    <p>Creating a new project in Eclipse will automatically create the "src" and "bin" directories . To have Eclipse create the test directory too, at the second screen ("Java Settings") of the New Java Project wizard, go to the Source tab (the first one), click "Create new source folder", and enter "test" for the folder name. While you’re at it, go to the Libraries tab (the third one) and add the tester library to your classpath.</p>
    <p>When creating a new source file, the New Java Class and New Java Interface dialogs have a "Source folder" field (which should contain either "YourProjectName/src" or "YourProjectName/test") and a "Package" field. Eclipse will automatically generate the package declaration, create the package directory if it doesn’t already exist, and put the source file in it. To move something to a different package or source folder, right-click it in the Package Explorer pane on the left-hand side, go to "Refactor", and click "Move...". If the package you want to move it to doesn’t exist (or doesn’t exist in the source folder you want), click the "Create Package..." button to create it. Eclipse will move the source file, change the package declaration, and update any imports elsewhere in your project as appropriate. This window won’t let you create new source folders; you can do that from the New menu. Note that files copied into a project from outside sources do not automatically get package declarations; however, Eclipse will suggest fixing the resulting compile error with a package declaration, which it will generate if you ask it to.</p>
    <p>You will have to take one of the following two approaches to get Eclipse to properly find your <span class="stt">Examples</span> class:</p>
    <ul>
     <li><p>Put a copy of Main.java in the test directory, and give it the same "package ..." declaration at the top as all other files for the package, </p></li>
     <li><p>If you want to run the project without Main.java, click the down-arrow next to the Run button, click "Run Configurations" to open the Run Configurations dialog box, and click the new launch configuration button in the top-left corner of the left-hand pane. On the Main tab (the first one), enter the name of your Eclipse project for "Project" and "tester.Main" for "Main class". Then, insert <span class="stt">@Example</span> just before <span class="stt">class Examples</span> in your <span class="stt">Examples</span> class file.</p></li>
    </ul>
    <p>Once you add files to your project, you should be able to compile the project and run it, getting the same tester output that you have all term.</p>
    <h3>3<tt>&nbsp;</tt><a name="(part._.Exporting_.Package_to_.Others)"></a>Exporting Package to Others</h3>
    <p>These instructions help you organize files into packages. If you wanted to share your package with someone else, you would ask DrJava or Eclipse to bundle the package up into a single <span class="stt">.jar</span> file. We are not asking you to do that for this assignment, but you should be familiar with how this is done.</p>
    <p>In DrJava, you’ll find a "Create Jar File from Project" option under the "Project" menu.</p>
    <p>In Eclipse, you go to the "Package" menu and use the "Export" option (you want to export the package, not the project).</p>
    <p>In either case, if you enter &lt;package-name&gt;.jar for the name), you’ll get a single <span class="stt">.jar</span> file that you could then use in another program by saying <span class="stt">import &lt;package-name&gt;.*;</span></p>
   </div>
  </div>
  <div id="contextindicator">
   &nbsp;
  </div>
 </body>
</html>