<!doctype html>
<html lang="en-GB" prefix="og: http://ogp.me/ns#">
 <head> 
  <meta charset="UTF-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <title>
			Exploring Spring-Boot and Spring-Security: Custom token based authentication of REST services with Spring-Security and pinch of Spring Java Configuration and Spring Integration Testing. - Technical Blog - Future Processing — Technical Blog – Future Processing		</title> 
  <!-- Google Tag Manager --> 
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
				new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
				j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
				'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
				})(window,document,'script','dataLayer','GTM-NNN6QX');</script> 
  <!-- End Google Tag Manager --> 
  <!-- This site is optimized with the Yoast SEO plugin v4.3 - https://yoast.com/wordpress/plugins/seo/ --> 
  <link rel="canonical" href="https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/"> 
  <meta property="og:locale" content="en_GB"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="Exploring Spring-Boot and Spring-Security: Custom token based authentication of REST services with Spring-Security and pinch of Spring Java Configuration and Spring Integration Testing. - Technical Blog - Future Processing"> 
  <meta property="og:description" content="Full source code of this example on&nbsp;GitHub. Spring applications are not secured by default. To provide required authentication…"> 
  <meta property="og:url" content="https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/"> 
  <meta property="og:site_name" content="Technical Blog - Future Processing"> 
  <meta property="article:tag" content="Authentication"> 
  <meta property="article:tag" content="Security"> 
  <meta property="article:tag" content="Spring"> 
  <meta property="article:section" content="Java"> 
  <meta property="article:published_time" content="2014-12-03T13:55:54+02:00"> 
  <meta property="article:modified_time" content="2015-12-03T11:21:03+02:00"> 
  <meta property="og:updated_time" content="2015-12-03T11:21:03+02:00"> 
  <meta property="og:image" content="https://www.future-processing.pl/blog/wp-content/uploads/2014/12/blog_techniczny_sprint_boot.png"> 
  <meta property="og:image:width" content="1200"> 
  <meta property="og:image:height" content="718"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:description" content="Full source code of this example on&nbsp;GitHub. Spring applications are not secured by default. To provide required authentication…"> 
  <meta name="twitter:title" content="Exploring Spring-Boot and Spring-Security: Custom token based authentication of REST services with Spring-Security and pinch of Spring Java Configuration and Spring Integration Testing. - Technical Blog - Future Processing"> 
  <meta name="twitter:image" content="https://www.future-processing.pl/blog/wp-content/uploads/2014/12/blog_techniczny_sprint_boot.png"> 
  <!-- / Yoast SEO plugin. --> 
  <link rel="dns-prefetch" href="//www.future-processing.com"> 
  <link rel="dns-prefetch" href="//s.w.org"> 
  <link rel="alternate" type="application/rss+xml" title="Technical Blog - Future Processing » Exploring Spring-Boot and Spring-Security: Custom token based authentication of REST services with Spring-Security and pinch of Spring Java Configuration and Spring Integration Testing. Comments Feed" href="https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/feed/"> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.2.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.2.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.future-processing.pl\/blog\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.7.5"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),!(j.toDataURL().length<3e3)&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57331,65039,8205,55356,57096),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57331,55356,57096),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55357,56425,55356,57341,8205,55357,56507),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55357,56425,55356,57341,55357,56507),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="stylesheet" id="future-css-css" href="https://www.future-processing.pl/blog/wp-content/themes/future/dist/styles/style.min.css?ver=4.7.5" type="text/css" media="all"> 
  <link rel="stylesheet" id="fpblog-css-css" href="https://www.future-processing.pl/blog/wp-content/themes/fp-blog/dist/styles/style.min.css?ver=4.7.5" type="text/css" media="all"> 
  <link rel="stylesheet" id="tablepress-default-css" href="https://www.future-processing.pl/blog/wp-content/plugins/tablepress/css/default.min.css?ver=1.8" type="text/css" media="all"> 
  <script type="text/javascript" src="https://www.future-processing.pl/blog/wp-content/themes/future/dist/scripts/jquery.min.js?ver=4.7.5"></script> 
  <script type="text/javascript" src="https://www.future-processing.com/blog/wp-content/plugins/wp-charts/js/Chart.min.js?ver=4.7.5"></script> 
  <link rel="https://api.w.org/" href="https://www.future-processing.pl/blog/wp-json/"> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.future-processing.pl/blog/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.future-processing.pl/blog/wp-includes/wlwmanifest.xml"> 
  <meta name="generator" content="WordPress 4.7.5"> 
  <link rel="shortlink" href="https://www.future-processing.com/blog/?p=4717"> 
  <link rel="alternate" type="application/json+oembed" href="https://www.future-processing.pl/blog/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.future-processing.pl%2Fblog%2Fexploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing%2F"> 
  <link rel="alternate" type="text/xml+oembed" href="https://www.future-processing.pl/blog/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.future-processing.pl%2Fblog%2Fexploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing%2F&amp;format=xml"> 
  <script>
var offer_meta = false;

var bloginfo = {
'url' : 'https://www.future-processing.pl/blog',
'template_url' : 'https://www.future-processing.pl/blog/wp-content/themes/future',
'ip' : '152.170.26.191',
};
</script>
  <!--[if lte IE 8]><script src="https://www.future-processing.pl/blog/wp-content/plugins/wp-charts/js/excanvas.compiled.js"></script><![endif]--> 
  <style>
    			/*wp_charts_js responsive canvas CSS override*/
    			.wp_charts_canvas {
    				width:100%!important;
    				max-width:100%;
    			}

    			@media screen and (max-width:480px) {
    				div.wp-chart-wrap {
    					width:100%!important;
    					float: none!important;
						margin-left: auto!important;
						margin-right: auto!important;
						text-align: center;
    				}
    			}
    		</style> 
 </head> 
 <body class="post-template-default single single-post postid-4717 single-format-standard"> 
  <!-- Google Tag Manager (noscript) --> 
  <noscript>
   <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-NNN6QX" height="0" width="0" style="display:none;visibility:hidden"></iframe>
  </noscript> 
  <!-- End Google Tag Manager (noscript) --> 
  <div id="fb-root"></div> 
  <script>(function(d, s, id) {
		  var js, fjs = d.getElementsByTagName(s)[0];
		  if (d.getElementById(id)) return;
		  js = d.createElement(s); js.id = id;
		  js.src = "//connect.facebook.net/pl_PL/sdk.js#xfbml=1&version=v2.8";
		  fjs.parentNode.insertBefore(js, fjs);
		}(document, 'script', 'facebook-jssdk'));</script> 
  <header class="header"> 
   <div class="header__top row"> 
    <div class="small-12 medium-3 large-2 columns"> 
     <a class="header__logo" href="https://www.future-processing.pl/blog" title="Technical Blog – Future Processing" rel="home"> <img src="https://www.future-processing.pl/blog/wp-content/themes/fp-blog
						/dist/images/technical-blog_logo.jpg" alt="Logo" Technical Blog &#8211; Future Processing"> </a> 
    </div> 
    <div class="small-12 medium-4 medium-offset-1 large-4 xlarge-4 columns"> 
     <span>by</span> 
     <a class="header__logo-fp" href="http://www.future-processing.com" target="_blank"> <img src="https://www.future-processing.pl/blog/wp-content/themes/future/dist/images/logo-fp.svg" alt="Logo Technical Blog – Future Processing"> </a> 
    </div> 
    <div class="small-12 medium-3 medium-offset-1 large-4 xlarge-4 columns social-panel "> 
     <ul class="content__socialmedia">
      <li class="content__socialmedia-item"> <a href="https://www.facebook.com/FutureProcessing" rel="nofollow" target="_blank"> 
        <svg class="icon-16">
         <use xlink:href="#icon-16_facebook"></use>
        </svg> </a> </li>
      <li class="content__socialmedia-item"> <a href="https://twitter.com/FutureProcessin/" rel="nofollow" target="_blank"> 
        <svg class="icon-16">
         <use xlink:href="#icon-16_twitter"></use>
        </svg> </a> </li>
      <li class="content__socialmedia-item"> <a href="https://plus.google.com/110939518589884610828/" rel="nofollow" target="_blank"> 
        <svg class="icon-16">
         <use xlink:href="#icon-16_google"></use>
        </svg> </a> </li>
      <li class="content__socialmedia-item"> <a href="https://www.youtube.com/user/FutureProcessing/" rel="nofollow" target="_blank"> 
        <svg class="icon-16">
         <use xlink:href="#icon-16_youtube"></use>
        </svg> </a> </li>
      <li class="content__socialmedia-item"> <a href="https://www.linkedin.com/company/future-processing-sp--z-o-o-/" rel="nofollow" target="_blank"> 
        <svg class="icon-16">
         <use xlink:href="#icon-16_linkedin"></use>
        </svg> </a> </li>
      <li class="content__socialmedia-item"> <a href="http://www.goldenline.pl/firma/future-processing/" rel="nofollow" target="_blank"> 
        <svg class="icon-16">
         <use xlink:href="#icon-16_goldenline"></use>
        </svg> </a> </li>
      <li class="content__socialmedia-item"> <a href="http://www.slideshare.net/FutureProcessing/" rel="nofollow" target="_blank"> 
        <svg class="icon-16">
         <use xlink:href="#icon-16_slideshare"></use>
        </svg> </a> </li>
     </ul> 
    </div> 
   </div> 
   <div class="header__sticky"> 
    <div class="header__nav row"> 
     <!-- HEADER MENU START --> 
     <div class="header-nav small-12 medium-11 large-9 columns"> 
      <h3 class="header-nav__toggle"> <span></span> <span></span> <span></span> Show menu </h3> 
      <div class="header-nav__wrapper">
       <ul id="menu-blog-techniczny" class="header-nav__menu">
        <li id="menu-item-3302" class="header-nav__item has-children"><a href="https://www.future-processing.pl/blog/category/technologies/">Technologies</a>
         <ul class="header-nav__children">
          <li class="header-nav__item list-header"> 
           <div class="back-link"> 
            <svg class="icon-16">
             <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-16_arrow"></use>
            </svg> 
           </div> <a href="https://www.future-processing.pl/blog/category/technologies/">Technologies</a> </li>
          <li id="menu-item-3303" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/technologies/web-frontend/">Web Front-End</a></li> 
          <li id="menu-item-3304" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/technologies/net-technologies/">.NET</a></li> 
          <li id="menu-item-3307" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/technologies/java-script/">JavaScript</a></li> 
          <li id="menu-item-4980" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/technologies/java/">Java</a></li> 
          <li id="menu-item-5414" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/technologies/php/">PHP</a></li> 
          <li id="menu-item-3305" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/technologies/cloud/">Cloud</a></li> 
          <li id="menu-item-3306" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/technologies/databases/">Databases</a></li> 
          <li id="menu-item-3308" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/technologies/mobile-technologies/">Mobile</a></li> 
          <li id="menu-item-3309" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/technologies/others/">Others</a></li> 
         </ul> </li> 
        <li id="menu-item-3301" class="header-nav__item has-children"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/">Processes, Standards and Quality</a>
         <ul class="header-nav__children">
          <li class="header-nav__item list-header"> 
           <div class="back-link"> 
            <svg class="icon-16">
             <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-16_arrow"></use>
            </svg> 
           </div> <a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/">Processes, Standards and Quality</a> </li>
          <li id="menu-item-3312" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/development-methodologies/">Development methodologies</a></li> 
          <li id="menu-item-3314" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/software-craftsmanship/">Software Craftsmanship</a></li> 
          <li id="menu-item-3311" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/static-code-analysis/">Code Quality Assurance</a></li> 
          <li id="menu-item-3316" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/testing-automation/">Test Automation</a></li> 
          <li id="menu-item-3317" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/testing-management/">Test management</a></li> 
          <li id="menu-item-3315" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/security/">Software security</a></li> 
          <li id="menu-item-3313" class="header-nav__item"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/performance/">Performance</a></li> 
         </ul> </li> 
        <li id="menu-item-4003" class="header-nav__item"><a href="https://www.future-processing.pl/blog/about-us/">About us</a></li> 
        <li id="menu-item-3999" class="header-nav__item"><a href="https://www.future-processing.pl/blog/contact/">Contact</a></li> 
       </ul>
      </div> 
     </div> 
     <!-- HEADER MENU END --> 
     <!-- HEADER SEARCH START --> 
     <div class="small-12 medium-1 large-3 columns"> 
      <form class="header-search" role="search" method="get" action="https://www.future-processing.pl/blog/"> 
       <div class="header-search__form"> 
        <input class="header-search__input" id="headersearch__input" name="s" type="text" minlength="3" maxlength="100" required placeholder="Type keyword here..."> 
        <button class="header-search__submit small hollow button" type="submit">Search</button> 
       </div> 
       <div class="header-search__toggle"> 
        <div class="header-search__button search"> 
         <svg class="icon-16">
          <use xlink:href="#icon-16_magnifying-glass"></use>
         </svg> 
        </div> 
        <div class="header-search__button close"> 
         <svg class="icon-16">
          <use xlink:href="#icon-16_times"></use>
         </svg> 
        </div> 
       </div> 
      </form> 
     </div> 
     <!-- HEADER SEARCH END --> 
    </div> 
   </div> 
  </header> 
  <main> 
   <!-- HEADER : START --> 
   <div class="row"> 
    <div class="small-12 columns"> 
     <div class="post-header" style="background-image: url(https://www.future-processing.pl/blog/wp-content/uploads/2014/12/blog_techniczny_sprint_boot.png);"> 
      <div class="image-shadow"></div> 
      <div class="row info-post"> 
       <div class="small-12 medium-2 columns"> 
        <div class="post_header__author"> 
         <div class="author"> 
          <div class="author-avatar"> 
           <img alt="" src="https://secure.gravatar.com/avatar/4c903f3af540d747e32d51b410186e04?s=48&amp;d=https%3A%2F%2Fwww.future-processing.com%2Fblog%2Fwp-content%2Fthemes%2Ffuture%2Fimages%2Fnophoto.png&amp;r=g" srcset="https://secure.gravatar.com/avatar/4c903f3af540d747e32d51b410186e04?s=96&amp;d=https%3A%2F%2Fwww.future-processing.com%2Fblog%2Fwp-content%2Fthemes%2Ffuture%2Fimages%2Fnophoto.png&amp;r=g 2x" class="avatar avatar-48 photo" height="48" width="48"> 
          </div> 
          <h5 class="author">Patryk Lenza</h5> 
         </div> 
        </div> 
       </div> 
       <div class="small-12 small-offset-1 medium-9 medium-offset-1 columns"> 
        <div class="blog-header__info"> 
         <data class="news-posts__data">03.12.2014</data> 
         <div class="text-animate"> 
          <em>Exploring Spring-Boot and Spring-Security: Custom token based authentication of REST services with Spring-Security and pinch of Spring Java Configuration and Spring Integration Testing.</em> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <!-- HEADER : END --> 
   <div class="row"> 
    <!-- SIDEBAR LEFT : START --> 
    <div class="small-12 medium-2 columns blog-sidebar"> 
     <a class="button_back" href="https://www.future-processing.pl/blog"> 
      <svg class="icon-16">
       <use xlink:href="#icon-16_arrow"></use>
      </svg><span>main page</span></a> 
     <ul id="sidebar"> 
      <aside id="categories-3" class="widget widget_categories">
       <h3 class="widget-title">Categories</h3> 
       <ul> 
        <li class="cat-item cat-item-1"><a href="https://www.future-processing.pl/blog/category/bez-kategorii/">Bez kategorii</a> </li> 
        <li class="cat-item cat-item-509"><a href="https://www.future-processing.pl/blog/category/big-data/">Big Data</a> 
         <ul class="children"> 
          <li class="cat-item cat-item-508"><a href="https://www.future-processing.pl/blog/category/big-data/econib/">ECONIB</a> </li> 
          <li class="cat-item cat-item-507"><a href="https://www.future-processing.pl/blog/category/big-data/machine-learning/">Machine learning</a> </li> 
         </ul> </li> 
        <li class="cat-item cat-item-175"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/">Processes, Standards and Quality</a> 
         <ul class="children"> 
          <li class="cat-item cat-item-12"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/static-code-analysis/">Code Quality Assurance</a> </li> 
          <li class="cat-item cat-item-49"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/development-methodologies/">Development methodologies</a> </li> 
          <li class="cat-item cat-item-13"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/performance/">Performance</a> </li> 
          <li class="cat-item cat-item-31"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/software-craftsmanship/">Software Craftsmanship</a> </li> 
          <li class="cat-item cat-item-9"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/security/">Software security</a> </li> 
          <li class="cat-item cat-item-142"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/testing-automation/">Test Automation</a> </li> 
          <li class="cat-item cat-item-18"><a href="https://www.future-processing.pl/blog/category/processes-standards-and-quality/testing-management/">Test management</a> </li> 
         </ul> </li> 
        <li class="cat-item cat-item-174"><a href="https://www.future-processing.pl/blog/category/technologies/">Technologies</a> 
         <ul class="children"> 
          <li class="cat-item cat-item-26"><a href="https://www.future-processing.pl/blog/category/technologies/net-technologies/">.NET</a> </li> 
          <li class="cat-item cat-item-110"><a href="https://www.future-processing.pl/blog/category/technologies/cloud/">Cloud</a> </li> 
          <li class="cat-item cat-item-52"><a href="https://www.future-processing.pl/blog/category/technologies/databases/">Databases</a> </li> 
          <li class="cat-item cat-item-284"><a href="https://www.future-processing.pl/blog/category/technologies/java/">Java</a> </li> 
          <li class="cat-item cat-item-34"><a href="https://www.future-processing.pl/blog/category/technologies/java-script/">JavaScript</a> </li> 
          <li class="cat-item cat-item-43"><a href="https://www.future-processing.pl/blog/category/technologies/mobile-technologies/">Mobile</a> </li> 
          <li class="cat-item cat-item-91"><a href="https://www.future-processing.pl/blog/category/technologies/others/">Others</a> </li> 
          <li class="cat-item cat-item-15"><a href="https://www.future-processing.pl/blog/category/technologies/php/">PHP</a> </li> 
          <li class="cat-item cat-item-5"><a href="https://www.future-processing.pl/blog/category/technologies/web-frontend/">Web Front-End</a> </li> 
         </ul> </li> 
       </ul> 
      </aside> 
     </ul> 
    </div> 
    <!-- SIDEBAR LEFT : END --> 
    <!-- CONTENT PAGE : START --> 
    <div class="small-12 medium-7 medium-offset-1 columns post__content"> 
     <h3><p>Full source code of this example on&nbsp;<a href="https://github.com/FutureProcessing/spring-boot-security-example" target="_blank">GitHub</a>.</p> </h3> 
     <p></p> 
     <p>Spring applications are not secured by default. To provide required authentication and authorization facilities you need to either create them from the scratch or use existing security framework. Writing such a framework from the scratch is almost never a good idea. It’s complicated and needs to be thoroughly tested, preferably hardened on the battlefield of production. Better idea is to use some existing, matured and proven frameworks. The natural choice for Springers is to use Spring-Security. Formerly known as Acegi Security, later incorporated under the umbrella of Spring components, Spring-Security is just a jar file that you include in the project. It provides you with vast amount of well-designed functionality ready to be applied to your application. It is a framework that gives you a lot but on the other side it is still quite complicated, mainly, due to a lot of working parts and general nature of security related mechanisms. Spring-Security is also extremely extensible and open for customization, extensions and fine-tune configuration. All-in-all, it’s a complicated but powerful beast.</p> 
     <p>Spring-Boot according to official short description is: “Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that can you can “just run”. We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.” And it delivers what it states it should. Creates Spring-Boot project, provides simple config in Maven or Gradle, drops dependencies on required libraries and baam! everything will automagically configure itself. If Spring-Boot with autoconfiguration enabled detects Spring-Security jar on the classpath it will configure and enable security using default options. So don’t be surprised if your Spring MVC services suddenly become inaccessible due to lack of authentication credentials in your calls!</p> 
     <p>Spring Java Config is just an approach to configure everything by using Java classes. So say no to xml files and move into statically typed, compiler safe, refactorable world of Java classes, methods and annotations. And things are looking good here especially with Servlet 3.0, specification that allows configuring servlet and container using Java as well, which Spring gladly makes use of. Spring-Boot prefers Java config and I will try to use it as much as possible.</p> 
     <p>Spring Integration Testing is Spring support for writing proper integration tests. Spring-Boot brings its own improvements and as Boot by default is using embedded container like Tomcat or Jetty, writing integration tests is really awesome. We will use such tests to check if our security mechanisms are working as expected.</p> 
     <h2>Spring-Security from 10,000 feet</h2> 
     <p>Security is one of the so called ‘cross cutting concerns’. It means that it cuts or touches across whole core domain/business functionality. Such cross cutting concerns can really obscure the core business code with infrastructure related one, especially if you have more than one such concern. And usually you do have more than one. Spring-Security when developing Spring web applications (for example Spring MVC) adds quite a few http filters that delegate to authentication and authorization components. Moreover,it provides aspects that wrap around selected core business functionality using AOP. This approach keeps business code almost entirely free of any security related, infrastructural stuff. We can think about security as kind of add-on that can be applied or removed to existing code base. This, of course, makes everything nicely decoupled and isolated, which leads to much more clean, readable and maintainable code.</p> 
     <p>So Spring-Security adds a lot of filters. Filter is a component that gets called when HTTP Request arrives at the application server. Filter can do whatever it wants to the request, it can even totally change request parameters. When filter is done with processing, it can do one of two things. It can pass (probably modified) http request to the next filter or it can stop processing and return HTTP Response. Yes, filters can block or, in other words, disallow any further processing of HTTP Request. Filter that allowed request to be processed will also process HTTP Response that was generated by other components. So it can change response as well. Filters can be chained and assuming that each filter allowed request to be processed by the next filter such a request finally ends up in Spring DispatcherServlet and gets routed to our Java controller methods.</p> 
     <p>Spring-Security provides a handy couple of filters in its default filter chain. A lot of them provide out-of-the box security functionality for many of security schemes currently used in the world, e.g. Basic HTTP Authentication, HTTP Form Based Authentication, Digest Auth, X.509, OAuth-2 etc. In this blog and code I will provide my own filter and attach it somewhere in the default Spring-Security filter chain. I don’t want to create the whole filter chain and configuration from the scratch, I just want to provide some custom functionality while disabling default filters like Basic or Anonymous.</p> 
     <p>Let’s describe flow of authentication request for Basic HTTP Authentication used in MVC application. At first, client (a browser for example) sends HTTP request to get some resource located at URL. This request has no authentication credentials of any sort, so it is anonymous, random call. As the request has no credentials, Spring filters will pass it through without any special processing. Such a request will land at AbstractSecurityInterceptor, which in conjunction with AccessDecisionManager will determine target resource and method, and then makes a decision whether or not such unauthenticated request is allowed to access this resource. Security configuration determines if it is allowed or not and what particular roles authenticated user must have to access the resource (authorization). In our case we assume that the resource requires user to be authenticated, so AbstractSecurityInterceptor will throw some subclass of AuthenticationException. This exception will be caught by ExceptionTranslationFilter which is one of many filters in the default security chain. ExceptionTranslationFilter will validate type of the exception and if it indeed is AuthenticationException it will delegate call to AuthenticationEntryPoint component. For Basic Authentication, it will prepare correct HTTP Response with so called ‘Authentication Challenge’, which will be status 401 (Unauthorized) and proper headers for Basic. Client can then respond. Browsers display a dialog for the user to enter username and password, other clients can do different things to obtain such credentials.</p> 
     <p>The result is the same, another request for the same resource, but with credentials in proper HTTP Headers. This time Spring filters have a lot more to do. First, they extract credentials and use them to build Authentication object that acts as input for further processing. This Authentication is passed to AuthenticationManager that asks its configured and attached AuthenticationProviders, if any of them can process such type of Authentication (UsernamePasswordAuthentication). By default, there is such provider for Basic and it will query UserDetailsService for UserDetails object corresponding for such username. This UserDetails will then be validated against password and if everything is present, matches and is otherwise correct, new output Authentication object will be created. This output object is marked as successfully authenticated and filled with GrantedAuthorities that corresponds to the roles assigned to this particular user.</p> 
     <p>Where are UserDetails taken from? It depends on configuration. It can be obtained from memory or from database or webservice call – it’s up to your implementation of UserDetailsService.</p> 
     <p>So we have authenticated Authentication. The filter that initiated this operation will put this Authentication to SecurityContextHolder and pass the request down to the next filters. Any further filters will check if SecurityContextHolder holds valid Authentication and use GrantedAuthorities to do authorization validation. The same goes for AOP extended methods of our controllers (if we decide to use this approach).</p> 
     <p>Our code does not need to interact with SecurityContextHolder but if it needs to have some authentication information, it must. If we use direct access, it will make our testing life much more complicated so there are ways to minimize this impact that I will show later. Oh, by the way, SecurityContextHolder uses ThreadLocal under the hood and is filled and cleared on per request basis.</p> 
     <p>Looks complicated? Well that’s just how the things are and believe me this is one of the simplest flows. Unfortunately, there is no good default flow for securing REST calls using token based approach, unless you can use OAuth 2.0. In my case, I have a legacy external service that I need to consume but I would still like to provide token based approach to the clients of my REST API. So let’s dig through the solution and code.</p> 
     <h2>The solution</h2> 
     <p>Let’s start with short description of packages. “api” is for REST controllers. “domain” should hold our business and domain code. It should be completely free from any infrastructural or REST/HTTP stuff. “infrastructure” will hold implementations of required interfaces, access to external services and security components. A lot of security code is quite generic and will work with any external service authentication mechanism. I have added some exemplaryexample implementation that does not do any network calls and it is easy to extend it to suit your needs.</p> 
     <p>The build management tool is Gradle and in a build.gradle file you can see that Spring-Boot is added with additional plugin that allows running app from command line using gradle. The important parts are spring-boot-starter-security and spring-boot-starter-test:</p> 
     <pre class="prettyprint linenums lang-java">compile 'org.springframework.boot:spring-boot-starter-web'
compile 'org.springframework.boot:spring-boot-starter-tomcat'
compile 'org.springframework.boot:spring-boot-starter-security'
compile 'org.springframework.boot:spring-boot-starter-actuator'
compile 'org.springframework.boot:spring-boot-starter-aop'

testCompile 'org.springframework.boot:spring-boot-starter-test'</pre> 
     <p>ehCache.xml configures EhCache to keep tokens for 4 hours and use memory only storage. So by default, our tokens will be evicted after 4 hours since issue time.</p> 
     <p>I wanted to use HTTPS so I generated some self-signed certificate (JKS) and class ContainerConfiguration is just a boilerplate code to make Spring-Boot work with HTTPS. Such certificate is good for development and testing or maybe even for intranet services but you should use properly signed one for any other use case. You can override this certificate by properties at deployment time. The properties are in application.properties, for example port of our Tomcat is 8443.</p> 
     <p>Spring-Boot application ‘instantiates’ itself by default, which leads to running embedded application server like Tomcat or Jetty. We can annotate application class and make it our main configuration source for Spring-Boot:</p> 
     <pre class="prettyprint linenums lang-java">@Configuration
@EnableWebMvc
@ComponentScan
@EnableAutoConfiguration
@EnableConfigurationProperties
public class Application {

public static void main(String[] args) {
SpringApplication.run(Application.class, args)
}
}</pre> 
     <p>That’s a lot of annotations!<br> @Configuration – tells Spring that this class will act as a configuration source. There can be many such classes.<br> @EnableWebMvc – enables DispatcherServlet, mappings, @Controller annotated beans. We definitely need this as we are using MVC to expose REST endpoints.<br> @ComponentScan – enables autoscanning and processing of all Spring components in current and descendant packages.<br> @EnableAutoConfiguration – tells Spring-Boot to try to autoconfigure itself by using default values. Any our custom parts replace the defaults.<br> @EnableConfigurationProperties – it allows having beans annotated with @ConfigurationProperties that is beans that will be filled with properties from various sources.</p> 
     <p>That’s all that is required to run default Spring MVC container. No xmls, no web.xml, no servlet container configuration.</p> 
     <p>ApiController is base class for all Controllers. It holds URLs of our REST services. I have added two Controllers. One is AuthenticateController with one method mapped for POST request on /api/v1/authenticate. This method however will never be entered because of our implementation of AuthenticationFilter, which will be described in a moment. The method is yet still present to become part of documentation for both in-code and REST services (for example using Swagger).</p> 
     <p>SampleController is more interesting:</p> 
     <pre class="prettyprint linenums lang-java">@RestController
@PreAuthorize("hasAuthority('ROLE_DOMAIN_USER')")
public class SampleController extends ApiController {
    private final ServiceGateway serviceGateway;

    @Autowired
    public SampleController(ServiceGateway serviceGateway) {
        this.serviceGateway = serviceGateway;
    }
[............]
</pre> 
     <p>The first @RestController is new to Spring 4. It states that all mapped methods will produce direct response output using @ResponseBody. So you don’t need to put this annotation on every method. The default mapping is JSON so this is exactly what we need.<br> @PreAuthorize annotation is very important for this example. This controller will be extended by AOP and every of its methods will require for the current request to be authenticated with principal that has GrantedAuthority: ROLE_DOMAIN_USER. SecurityContextHolder will be queried to get this information. For @PreAuthorize annotation to have effect there is a need to have @EnableGlobalMethodSecurity annotation on @Configuration bean somewhere. I will get to this soon.</p> 
     <p>@PreAuthorize security is one of the simplest ways to protect our resources. For our example use-case you could use URL request protection in configuration, which is even simpler but I have decided to show this method as well. I have used URL protection for Spring-Actuator endpoints. These methods are simple but they are clean, easy to see and maintain and this should be our goal as much as possible.</p> 
     <p>We are also autowiring implementation of Gateway to some service, so controller code will not be obscured by implementation details. It will allow us to test it later with ease.</p> 
     <p>There may be a need to have some details regarding currently authenticated principal. If we would directly use SecurityContextHolder (static context with ThreadLocal) to get this information we would make unnecessary coupling to some internal concern and our code would be much harder to test. There is however a neat way to obtain the information we need.</p> 
     <pre class="prettyprint linenums lang-java">@RequestMapping(value = STUFF_URL, method = RequestMethod.POST)
public void createStuff(@RequestBody Stuff newStuff, @CurrentlyLoggedUser DomainUser domainUser) {
    serviceGateway.createStuff(newStuff, domainUser);
}
</pre> 
     <p>Here, we can see that our SampleController has a method of which one parameter is annotated with @CurrentlyLoggedUser. What is that? It’s a custom annotation that wraps Spring’s @AuthenticationPrincpial:</p> 
     <pre class="prettyprint linenums lang-java">@Target({ElementType.PARAMETER, ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@AuthenticationPrincipal
public @interface CurrentlyLoggedUser {
}
</pre> 
     <p>So basically, our @CurrentlyLoggedUser is @AuthenticationPrincipal. I just like my name better than AuthenticationPrincipal. Any Spring Controller that has a method with parameter annotated with that will get current SecurityContextHolder Authentication.getPrincipal(). This is much more testable and clean.</p> 
     <p>DomainUser and Stuff are simple Java beans, nothing interesting here.</p> 
     <p>Let’s dig through more interesting class: SecurityConfig. This is the second @Configuration bean, this time used to configure security:</p> 
     <pre class="prettyprint linenums lang-java">@Configuration
@EnableWebMvcSecurity
@EnableScheduling
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class SecurityConfig extends WebSecurityConfigurerAdapter {
</pre> 
     <p>@EnableWebMvcSecurity – a lot is happening by adding this one. Security filters with filter chain are configured and applied. @AuthenticationPrincipal annotation starts working. ExceptionTranslationFilter catches AuthenticationExceptions and forwards to proper AuthorizationEntryPoints. Basically, after this annotation alone our MVC services are not directly accessible anymore.<br> @EnableScheduling allows to run Spring schedulers and periodically run some tasks. We use scheduler for evicting EhCache tokens.<br> @EnableGlobalMethodSecurity allows AOP @PreAuthorize and some other annotations to be applied to methods.<br> SecurityConfig extends WebSecurityConfigurerAdapter which allows to fine tune some configuration:</p> 
     <pre class="prettyprint linenums lang-java">@Override
protected void configure(HttpSecurity http) throws Exception {
    http.
            csrf().disable().
            sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).
            and().
            authorizeRequests().
            antMatchers(actuatorEndpoints()).hasRole(backendAdminRole).
            anyRequest().authenticated().
            and().
            anonymous().disable().
            exceptionHandling().authenticationEntryPoint(unauthorizedEntryPoint());

    http.addFilterBefore(new AuthenticationFilter(authenticationManager()), BasicAuthenticationFilter.class).
            addFilterBefore(new ManagementEndpointAuthenticationFilter(authenticationManager()), BasicAuthenticationFilter.class);
}
</pre> 
     <p>We don’t need CSRF and typical HTTP session. We authorize requests on Spring-Actuator endpoints to any principal that has role of backend administrator and we require all other requests to be authenticated. Just authenticated – this config will pass the request to DispatcherServlet for any valid Authentication in SecurityContext. Remember that we use @PreAuthorize to restrict access further to users with role DOMAIN_USER. Then, two custom filters are added somewhere before Spring’s BasicAuthenticationFilter. These filters are main building blocks of our custom token based authentication. We then register custom AuthenticationEntryPoint:</p> 
     <pre class="prettyprint linenums lang-java">@Bean
public AuthenticationEntryPoint unauthorizedEntryPoint() {
    return (request, response, authException) -&gt; response.sendError(HttpServletResponse.SC_UNAUTHORIZED);
}
</pre> 
     <p>It is extremely simple. For any AuthenticationException we want to return the 401 error. That’s all that we want for our REST clients to know. How they handle it is up them.</p> 
     <p>There is an override that allows configuring AuthenticationManager:</p> 
     <pre class="prettyprint linenums lang-java">@Override
protected void configure(AuthenticationManagerBuilder auth) throws Exception {
    auth.authenticationProvider(domainUsernamePasswordAuthenticationProvider()).
            authenticationProvider(backendAdminUsernamePasswordAuthenticationProvider()).
            authenticationProvider(tokenAuthenticationProvider());
}
</pre> 
     <p>Three AuthenticationProviders are added, each supporting different class of input Authentication object.</p> 
     <p>At this moment security config is in place and each request needs to pass through AuthenticationFilter and ManagementEndpointAuthenticationFilter.</p> 
     <p>So it’s time for AuthenticationFilter:</p> 
     <pre class="prettyprint linenums lang-java">@Override
public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
    HttpServletRequest httpRequest = asHttp(request);
    HttpServletResponse httpResponse = asHttp(response);

    Optional username = Optional.fromNullable(httpRequest.getHeader("X-Auth-Username"));
    Optional password = Optional.fromNullable(httpRequest.getHeader("X-Auth-Password"));
    Optional token = Optional.fromNullable(httpRequest.getHeader("X-Auth-Token"));

    String resourcePath = new UrlPathHelper().getPathWithinApplication(httpRequest);

    try {
        if (postToAuthenticate(httpRequest, resourcePath)) {
            logger.debug("Trying to authenticate user {} by X-Auth-Username method", username);
            processUsernamePasswordAuthentication(httpResponse, username, password);
            return;
        }

        if (token.isPresent()) {
            logger.debug("Trying to authenticate user by X-Auth-Token method. Token: {}", token);
            processTokenAuthentication(token);
        }

        logger.debug("AuthenticationFilter is passing request down the filter chain");
        addSessionContextToLogging();
        chain.doFilter(request, response);
    } catch (InternalAuthenticationServiceException internalAuthenticationServiceException) {
        SecurityContextHolder.clearContext();
        logger.error("Internal authentication service exception", internalAuthenticationServiceException);
        httpResponse.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    } catch (AuthenticationException authenticationException) {
        SecurityContextHolder.clearContext();
        httpResponse.sendError(HttpServletResponse.SC_UNAUTHORIZED, authenticationException.getMessage());
    } finally {
        MDC.remove(TOKEN_SESSION_KEY);
        MDC.remove(USER_SESSION_KEY);
    }
}
</pre> 
     <p>It extends GenericFilterBean and overrides the only required method doFilter. It tries to be as generic as possible, delegating real work to external implementations. This is our place in filter chain and it seems like excellent place to initiate some authentication facilities and work with SecurityContextHolder. First, we check if we have a POST on /api/v1/authenticate and if yes we are building input Authenticate instance of type UsernamePasswordAuthentication:</p> 
     <pre class="prettyprint linenums lang-java">private void processUsernamePasswordAuthentication(HttpServletResponse httpResponse, Optional username, Optional password) throws IOException {
    Authentication resultOfAuthentication = tryToAuthenticateWithUsernameAndPassword(username, password);
    SecurityContextHolder.getContext().setAuthentication(resultOfAuthentication);
    httpResponse.setStatus(HttpServletResponse.SC_OK);
    TokenResponse tokenResponse = new TokenResponse(resultOfAuthentication.getDetails().toString());
    String tokenJsonResponse = new ObjectMapper().writeValueAsString(tokenResponse);
    httpResponse.addHeader("Content-Type", "application/json");
    httpResponse.getWriter().print(tokenJsonResponse);
}

private Authentication tryToAuthenticateWithUsernameAndPassword(Optional username, Optional password) {
    UsernamePasswordAuthenticationToken requestAuthentication = new UsernamePasswordAuthenticationToken(username, password);
    return tryToAuthenticate(requestAuthentication);
}
</pre> 
     <p>This instance is passed to Spring’s AuthenticationManager, which finds AuthenticationProvider that supports this type of input Authentication. It happens that we have such custom provider. Provider tries to authenticate. We expect returned output Authentication instance (which can be, and usually is, a different class and instance than input Authentication) to not be null and be authenticated. It’s a good practice to keep Authentication implementations immutable, although I’m not completely conforming to this rule (if you never allow authenticated Boolean state to change, you are on the safe side). It, then, immediately returns http response with OK and JSON with generated token. No other filter down the chain is called so no controller method is executed. It would be better to pass the request to AuthenticationController and to allow it to return the token and 200 OK Status, but I just wanted to demonstrate a point.</p> 
     <p>If call is not for authenticating endpoint, we check whether we have token in header. If there is a token, we move to another processing path. In any other case, (no authenticate post and lack of token) we pass call further to the dispatcher. This may sound strange. Why are we passing our request? But it is actually how spring security is designed. While we could immediately return 401 without chaining we would lose all fine tune security config – we want our call to proceed and be processed by dispatcher rules and/or method rules. There may be some services that do not require authentication or a call may be for some static resource like icon. Nonetheless, any security violation (lack of SecurityContextHolder) will result in spring AuthenticationException to be thrown, caught by ExceptionTranslationFilter and our unathorizedEntryPoint called.</p> 
     <p>But if token is present, we try to fill SecurityContextHolder with authenticated Authentication. So we prepare proper input Authentication this time of type PreAuthenticatedAuthenticationToken and pass it again to AuthenticationManager that will call proper Provider. This provider will try to validate token and decide if it is OK or not. Again, the result must be properly filled and authenticated output Authentication. If token is OK and AuthenticationFilter gets valid Authentication, it fills SecurityContextHolder and passes request to the next filter.</p> 
     <p>ManagementEndpointAuthenticationFilter is very similar to AuthenticationFilter but it does not make use of tokens. It has hardcoded backend admin login username with password provided from property at deployment time. It checks if username and password from headers matches these when targeting Spring-Actuator endpoints that require authentication. For example, /health is unprotected while /metrics is.</p> 
     <p>It’s time to look at the providers. DomainUsernamePasswordAuthenticationProvider:</p> 
     <pre class="prettyprint linenums lang-java">public class DomainUsernamePasswordAuthenticationProvider implements AuthenticationProvider {

    private TokenService tokenService;
    private ExternalServiceAuthenticator externalServiceAuthenticator;

    public DomainUsernamePasswordAuthenticationProvider(TokenService tokenService, ExternalServiceAuthenticator externalServiceAuthenticator) {
        this.tokenService = tokenService;
        this.externalServiceAuthenticator = externalServiceAuthenticator;
    }

    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        Optional username = (Optional) authentication.getPrincipal();
        Optional password = (Optional) authentication.getCredentials();

        if (!username.isPresent() || !password.isPresent()) {
            throw new BadCredentialsException("Invalid Domain User Credentials");
        }

        AuthenticationWithToken resultOfAuthentication = externalServiceAuthenticator.authenticate(username.get(), password.get());
        String newToken = tokenService.generateNewToken();
        resultOfAuthentication.setToken(newToken);
        tokenService.store(newToken, resultOfAuthentication);

        return resultOfAuthentication;
    }

    @Override
    public boolean supports(Class&lt;&gt; authentication) {
        return authentication.equals(UsernamePasswordAuthenticationToken.class);
    }
}
</pre> 
     <p>The “supports” method tells Spring’s AuthenticationManager what class of input Authentication this provider is capable of processing. Authenticate method tries to authenticate user by username and password. It validates parameters presence and delegates to implementation of a real provider coming from external service. It is a place in which you could ask database, service, memory or any other facility.</p> 
     <p>If authentication is correct, token service is asked for new fresh token and then output, authenticated Authentication is stored somewhere at token service. Output Authentication is returned to AuthenticationFilter. This method must conform to some strict rules. Proper exceptions must be thrown in case of particular events: DisabledException, LockedException, BadCredentialsException. Null should be returned if Provider is unable to process input Authentication. Credentials should always be validated and if valid properly, authenticated Authentication must be returned.</p> 
     <p>So what happens next? When client obtained valid token and wants to call some REST endpoint other than /authenticate? It needs to provide X-Auth-Token header. If this token is present, AuthenticationFilter creates proper input Authentication object and AuthenticationManager calls TokenAuthenticationProvider to authenticate. Implementation of this provider is very simple. What we actually want is to validate if token is present and not empty and then ask our TokenService if it contains such token. The presence of this token just means that we have a request from someone who has already authenticated, so we can return the authenticated Authentication. So happens that we stored such object from /authenticate in TokenService (EhCache) as key-value with token as a key:</p> 
     <pre class="prettyprint linenums lang-java">public class TokenAuthenticationProvider implements AuthenticationProvider {

    private TokenService tokenService;

    public TokenAuthenticationProvider(TokenService tokenService) {
        this.tokenService = tokenService;
    }

    @Override
    public Authentication authenticate(Authentication authentication) throws AuthenticationException {
        Optional token = (Optional) authentication.getPrincipal();
        if (!token.isPresent() || token.get().isEmpty()) {
            throw new BadCredentialsException("Invalid token");
        }
        if (!tokenService.contains(token.get())) {
            throw new BadCredentialsException("Invalid token or token expired");
        }
        return tokenService.retrieve(token.get());
    }

    @Override
    public boolean supports(Class&lt;&gt; authentication) {
        return authentication.equals(PreAuthenticatedAuthenticationToken.class);
    }
}
</pre> 
     <p>TokenService wraps EhCache and provides Spring scheduler that periodically (every 30 minutes) evicts tokens that are living for more than 4 hours (see our config for ehCache):</p> 
     <pre class="prettyprint linenums lang-java">public class TokenService {

    private static final Logger logger = LoggerFactory.getLogger(TokenService.class);
    private static final Cache restApiAuthTokenCache = CacheManager.getInstance().getCache("restApiAuthTokenCache");
    public static final int HALF_AN_HOUR_IN_MILLISECONDS = 30 * 60 * 1000;

    @Scheduled(fixedRate = HALF_AN_HOUR_IN_MILLISECONDS)
    public void evictExpiredTokens() {
        logger.info("Evicting expired tokens");
        restApiAuthTokenCache.evictExpiredElements();
    }

    public String generateNewToken() {
        return UUID.randomUUID().toString();
    }

    public void store(String token, Authentication authentication) {
        restApiAuthTokenCache.put(new Element(token, authentication));
    }

    public boolean contains(String token) {
        return restApiAuthTokenCache.get(token) != null;
    }

    public Authentication retrieve(String token) {
        return (Authentication) restApiAuthTokenCache.get(token).getObjectValue();
    }
}
</pre> 
     <p>So if client makes a call with token, which has been evicted, TokenAuthenticationProvider will throw proper AuthenticationException, which will be translated to 401 response. It means that client needs to obtain new token by calling authenticate. This can be easily extended with refreshToken mechanism if desired. Also EhCache config allows to easily set different policy of evicting tokens. Now, they are evicted after 4 hours, no matter if the holder is active or not.</p> 
     <p>So now we can see how our authentication mechanism validates credentials and fills SecurityContextHolder. Such SecurityContextHolder allows other security mechanisms from Spring to kick in and work properly. However, we somehow need our authenticated external service handler in our gateway implementations. I have decided to use a simple mechanism that allows us to keep the code fully testable and not bloated with SecurityContextHolder calls. There is probably a better way with custom request-like scope for Spring bean but I have not used it.</p> 
     <p>Let’s get back to DomainUsernamePasswordAuthenticationProvider for a moment. It gets username and password as credentials and delegates authentication to our external authenticator. I have provided the simplest possible implementation that does not use any network calls etc:</p> 
     <pre class="prettyprint linenums lang-java">public class SomeExternalServiceAuthenticator implements ExternalServiceAuthenticator {

    @Override
    public AuthenticatedExternalWebService authenticate(String username, String password) {
        ExternalWebServiceStub externalWebService = new ExternalWebServiceStub();

        // Do all authentication mechanisms required by external web service protocol and validated response.
        // Throw descendant of Spring AuthenticationException in case of unsucessful authentication. For example BadCredentialsException

        // ...
        // ...

        // If authentication to external service succeeded then create authenticated wrapper with proper Principal and GrantedAuthorities.
        // GrantedAuthorities may come from external service authentication or be hardcoded at our layer as they are here with ROLE_DOMAIN_USER
        AuthenticatedExternalWebService authenticatedExternalWebService = new AuthenticatedExternalWebService(new DomainUser(username), null,
                AuthorityUtils.commaSeparatedStringToAuthorityList("ROLE_DOMAIN_USER"));
        authenticatedExternalWebService.setExternalWebService(externalWebService);

        return authenticatedExternalWebService;
    }
}
</pre> 
     <p>It somehow tries to authenticate by some provider specific mechanism and then create Authentication implementation called AuthenticatedExternalWebService. This implementation also holds a Stub or Proxy to real external web service. This Stub/Proxy will use authenticated calls, probably over the network. This authenticated service can hold any security context like WS-Security, Basic credentials, OAuth2 Bearer Token etc. AuthenticationFilter will then set this AuthenticatedExternalWebService (implementation of Authentication) in TokenService (EhCache) and later retrieve it when validating token and put into SecurityContextHolder.</p> 
     <p>Now we need to get to this Stub/Proxy from our Gateway implementation. I have added a provider for this AuthenticatedExternalWebService:</p> 
     <pre class="prettyprint linenums lang-java">@Component
public class AuthenticatedExternalServiceProvider {

    public AuthenticatedExternalWebService provide() {
        return (AuthenticatedExternalWebService) SecurityContextHolder.getContext().getAuthentication();
    }
}
</pre> 
     <p>And this provider is injected to Gateway:</p> 
     <pre class="prettyprint linenums lang-java">public abstract class ServiceGatewayBase {
    private AuthenticatedExternalServiceProvider authenticatedExternalServiceProvider;

    public ServiceGatewayBase(AuthenticatedExternalServiceProvider authenticatedExternalServiceProvider) {
        this.authenticatedExternalServiceProvider = authenticatedExternalServiceProvider;
    }

    protected ExternalWebServiceStub externalService() {
        return authenticatedExternalServiceProvider.provide().getExternalWebService();
    }
}
</pre> 
     <p>which allows to get the external service proxy. For testing purposes we can easily inject our own mock implementation of provider.</p> 
     <p>Ok, that’s about it for example implementation. It’s time to move to testing.</p> 
     <h2>Testing</h2> 
     <p>It would be good to test if our implementation works and have an automated regression tests that would validate it in the future, wouldn’t it? Spring-Boot has excellent support for various types of tests. In my example I want to create integration tests that would deploy app on embedded container and run full stack Spring context with minimal mocking. This way the tests would run against all AOP, filters and configuration. Such tests are much slower than unit ones but as you will see they can be invaluable tool for getting high quality and confidence.</p> 
     <p>Let’s look at SecurityTest class:</p> 
     <pre class="prettyprint linenums lang-java">@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = {Application.class, SecurityTest.SecurityTestConfig.class})
@WebAppConfiguration
@IntegrationTest("server.port:0")
public class SecurityTest {
</pre> 
     <p>First, we must make sure that our jUnit tests are running with Spring Runner.<br> @WebAppConfiguration tells Spring that it should use WebApplicationContext, which is important because that’s exactly what we want to test – a web application. We can provide custom configuration for test context by @SpringApplicationConfiguration. Here, I want to provide test with configuration from our main Application class and additionally, I want to override some beans by providing SecurityTestConfig.<br> @IntegrationTest sets Spring for integration test and configures it to run embedded container. Port 0 in this case means to use random free port. This is important because it allows us to run tests independently from any currently run container or even run tests in parallel. We can get this random port by property injection:</p> 
     <pre class="prettyprint linenums lang-java">@Value("${local.server.port}")
int port;
</pre> 
     <p>SecurityTestConfig is overriding some beans with Mockito mocks:</p> 
     <pre class="prettyprint linenums lang-java">@Configuration
public static class SecurityTestConfig {
    @Bean
    public ExternalServiceAuthenticator someExternalServiceAuthenticator() {
        return mock(ExternalServiceAuthenticator.class);
    }

    @Bean
    @Primary
    public ServiceGateway serviceGateway() {
        return mock(ServiceGateway.class);
    }
}
</pre> 
     <p>and we can easily inject such mocks into our test, so we can interact with them:</p> 
     <pre class="prettyprint linenums lang-java">@Autowired
ExternalServiceAuthenticator mockedExternalServiceAuthenticator;

</pre> 
     <p>One final thing – our tests require some setup. We will be using RestAssured to call our REST services and validate responses and RestAssured must be configured to point to our services and use HTTPS. We must also reset mocks because Spring context is shared between test method runs, by default. This is a good default because spinning up Spring context takes a lot of time and we usually do not need to shut it down between calls.</p> 
     <pre class="prettyprint linenums lang-java">@Before
public void setup() {
    RestAssured.baseURI = "https://localhost";
    RestAssured.keystore(keystoreFile, keystorePass);
    RestAssured.port = port;
    Mockito.reset(mockedExternalServiceAuthenticator, mockedServiceGateway);
}
</pre> 
     <p>Ok, time to test something. First, simplest test. Our Spring-Actuator /health endpdoint should not be secured:</p> 
     <pre class="prettyprint linenums lang-java">@Test
public void healthEndpoint_isAvailableToEveryone() {
    when().get("/health").
            then().statusCode(HttpStatus.OK.value()).body("status", equalTo("UP"));
</pre> 
     <p>But /metrics should:</p> 
     <pre class="prettyprint linenums lang-java"> @Test
public void metricsEndpoint_withoutBackendAdminCredentials_returnsUnauthorized() {
    when().get("/metrics").
            then().statusCode(HttpStatus.UNAUTHORIZED.value());
}

@Test
public void metricsEndpoint_withInvalidBackendAdminCredentials_returnsUnauthorized() {
    String username = "test_user_2";
    String password = "InvalidPassword";
    given().header(X_AUTH_USERNAME, username).header(X_AUTH_PASSWORD, password).
            when().get("/metrics").
            then().statusCode(HttpStatus.UNAUTHORIZED.value());
}

@Test
public void metricsEndpoint_withCorrectBackendAdminCredentials_returnsOk() {
    String username = "backend_admin";
    String password = "remember_to_change_me_by_external_property_on_deploy";
    given().header(X_AUTH_USERNAME, username).header(X_AUTH_PASSWORD, password).
            when().get("/metrics").
            then().statusCode(HttpStatus.OK.value());
}
</pre> 
     <p>We can add similar tests for our own endpoints:</p> 
     <pre class="prettyprint linenums lang-java">@Test
public void gettingStuff_withoutToken_returnsUnauthorized() {
    when().get(ApiController.STUFF_URL).
            then().statusCode(HttpStatus.UNAUTHORIZED.value());
}

@Test
public void gettingStuff_withInvalidToken_returnsUnathorized() {
    given().header(X_AUTH_TOKEN, "InvalidToken").
            when().get(ApiController.STUFF_URL).
            then().statusCode(HttpStatus.UNAUTHORIZED.value());
}

@Test
public void gettingStuff_withValidToken_returnsData() {
    String generatedToken = authenticateByUsernameAndPasswordAndGetToken();

    given().header(X_AUTH_TOKEN, generatedToken).
            when().get(ApiController.STUFF_URL).
            then().statusCode(HttpStatus.OK.value());
}
</pre> 
     <p>RestAssured with its fluent interface is helping us to keep our tests very compact and readable.</p> 
     <p>We are ready to build, test, run and deploy our application.</p> 
     <h2>Running, testing, deploying</h2> 
     <p>Application is maintained by Gradle with Spring-Boot Gradle plugin. It eases development because:<br> gradlew clean -&gt; cleans our output directories and files<br> gradlew build -&gt; builds and runs tests<br> gradlew bootRun -&gt; starts our embedded Tomcat and listens on https://localhost:8443</p> 
     <p>After successful build you will find springsecuritytest.jar file in the build/libs directory. To deploy and run on production server you just copy this jar file to the server and, assuming you have Java 8 runtime, you run:</p> 
     <pre class="prettyprint linenums lang-java">java -Dkeystore.file=/path_to/keystorejks -Dkeystore.pass=password_to_keystore -Dbackend.admin.password=my_random_password -jar /path_to/springsecuritytest.jar</pre> 
     <p>And that’s all that is required to run Spring-Boot application. Awesome!</p> 
     <h2>Wrap up</h2> 
     <p>Spring-Boot brings a lot in regard to fast development, testing and deployment. It’s powerful but never gets in your way. You want to customize something? Not a problem. Want different JSON processing library? Here you go. The same goes to security. By choosing Spring-Security, you get instant security integration with mature framework. If you can use some existing schemes like Forms or Basic or OAuth-2 you don’t have to do much work. A little configuration, a couple of implementations for getting UserDetails and that’s it. If, however, you want to do some custom processing you need to dig deeper into the inner workings of the framework. It can be quite complicated but I hope that this article helped to shed some light on this subject. And I strongly advise you to read official Spring-Security documentation. It is long but invaluable source of information. And check full source code of this example on <a href="https://github.com/FutureProcessing/spring-boot-security-example" target="_blank">GitHub</a>.</p> 
     <hr> 
     <p>Maybe you’ve noticed, or not, we’ve introduced a new option on the blog – “suggest a topic”. Let us know about your problem / suggestion to broaden a topic, and we will try to respond to your request with an article on the blog.</p> 
     <div class="fb-like" data-href="https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/" data-layout="standard" data-action="like" data-show-faces="false" data-share="false"></div> 
     <div class="posts_links"> 
      <div class="previous-post">
       <a href="https://www.future-processing.pl/blog/javascript-is-slow/" rel="prev"><strong>
         <svg class="icon-16">
          <use xlink:href="#icon-16_arrow"></use>
         </svg>Previous post</strong><span>JavaScript is slow</span></a>
      </div> 
      <div class="next-post">
       <a href="https://www.future-processing.pl/blog/in-the-world/" rel="next"><strong>Next post
         <svg class="icon-16">
          <use xlink:href="#icon-16_arrow"></use>
         </svg></strong><span>In the world of Big Data</span></a>
      </div> 
     </div> 
    </div> 
    <div id="social-sidebar" class="small-12 medium-1 medium-offset-1 columns" data-sticky-container> 
     <div class="sidebar-right social-links sticky" data-sticky data-top-anchor="social-sidebar:top" data-btm-anchor="social-sidebar:bottom"> 
      <h3>share</h3> 
      <div class="share"> 
       <svg class="icon-48">
        <use xlink:href="#icon-48_share"></use>
       </svg> 
       <div class="new-social-shares"> 
        <div class="buttons"> 
         <!-- Facebook --> 
         <a class="social-button facebook-social" href="https://www.facebook.com/sharer/sharer.php?u=https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/" target="_blank"> </a> 
         <!-- Twitter --> 
         <a class="social-button twitter-social" href="https://twitter.com/home?status=https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/" target="_blank"> </a> 
         <!-- Google+ --> 
         <a class="social-button google-social" href="https://plus.google.com/share?url=https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/" target="_blank"> </a> 
         <!-- LinkedIn --> 
         <a class="social-button linkedin-social" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/" target="_blank"> </a> 
         <!-- Reddit --> 
         <a class="social-button reddit-social" href="http://reddit.com/submit?url=https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/" target="_blank"> </a> 
         <!-- Digg --> 
         <a class="social-button digg-social" href="http://digg.com/submit?url=https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/" target="_blank"> </a> 
         <!-- Stumbleupon --> 
         <a class="social-button stumbleupon-social" href="http://www.stumbleupon.com/submit?url=https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/" target="_blank"> </a> 
         <!-- Delicious --> 
         <a class="social-button delicious-social" href="https://delicious.com/save?v=5&amp;jump=close&amp;url=https://www.future-processing.pl/blog/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing/" target="_blank"> </a> 
        </div> 
       </div> 
      </div> 
      <h3>comment</h3> 
      <div class="comment"> 
       <a data-scrollto href="#disqus"> 
        <svg class="icon-48">
         <use xlink:href="#icon-48_speech-bubble"></use>
        </svg> </a> 
      </div> 
     </div> 
    </div> 
    <!-- CONTENT PAGE : END --> 
   </div>  
   <div class="subscribe-single"> 
    <div class="row"> 
     <div class="small-12 columns subscribe-widget"> 
      <aside id="future_footer_cta-4" class="widget widget_future_footer_cta">
       <div class="widget-content white" style="background-color: #00a3e0;"> 
        <div class="subscribe-widget__image">
         <img width="300" height="219" src="https://www.future-processing.pl/blog/wp-content/uploads/2017/05/contact-300x219.png" class="attachment-full size-full" alt="">
        </div> 
        <div class="subscribe-widget__content">
         <p><strong>Want to know more? </strong><br> Subscribe to our newsletter<br> and get updates directly to your inbox</p> 
        </div> 
        <div class="subscribe-widget__button"> 
         <a class="button subscribtion" href="http://www.space.future-processing.com/subscribe">Subscribe 
          <svg class="icon-16">
           <use xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="#icon-16_arrow"></use>
          </svg> </a> 
        </div> 
       </div>
      </aside> 
     </div> 
    </div> 
   </div> 
   <div class="post-bottom"> 
    <!-- RELATED POSTS : START --> 
    <div class="row"> 
     <div class="small-12 columns post-title"> 
      <h2>Related Posts</h2> 
     </div> 
    </div> 
    <div class="row related-posts"> 
     <div class="small-12 medium-6 large-4 columns related"> 
      <a href="https://www.future-processing.pl/blog/security-in-wif/"> </a>
      <a href="https://www.future-processing.pl/blog/security-in-wif/" title="Security in WIF"> <img width="1200" height="400" src="https://www.future-processing.pl/blog/wp-content/uploads/2015/08/blog_Security_wif.png" class="attachment-related_post-thumbnail size-related_post-thumbnail wp-post-image" alt="Security WIF Future Processing" srcset="https://www.future-processing.pl/blog/wp-content/uploads/2015/08/blog_Security_wif.png 1200w, https://www.future-processing.pl/blog/wp-content/uploads/2015/08/blog_Security_wif-300x100.png 300w, https://www.future-processing.pl/blog/wp-content/uploads/2015/08/blog_Security_wif-1024x341.png 1024w, https://www.future-processing.pl/blog/wp-content/uploads/2015/08/blog_Security_wif-360x120.png 360w, https://www.future-processing.pl/blog/wp-content/uploads/2015/08/blog_Security_wif-190x63.png 190w" sizes="(max-width: 1200px) 100vw, 1200px"> 
       <div class="blog-posts__author">
         Tomasz Krawczyk 
       </div> <h3>Security in WIF </h3></a> 
      <data class="blog-posts__data">25.08.2015</data> 
      <p> </p>
      <p>In this post we’ll focus on security. We’ll try to prove that claims base authentication is safe.</p> 
      <p></p> 
      <a class="blog-posts__link-item button triangle" href="https://www.future-processing.pl/blog/security-in-wif/"> Read more </a>  
     </div> 
     <div class="small-12 medium-6 large-4 columns related"> 
      <a href="https://www.future-processing.pl/blog/wcf_services_with_claims-based_authentication_and_authorization/"> </a>
      <a href="https://www.future-processing.pl/blog/wcf_services_with_claims-based_authentication_and_authorization/" title="WCF services with claims-based authentication and authorization"> <img width="1200" height="718" src="https://www.future-processing.pl/blog/wp-content/uploads/2015/06/blog_techniczny_claims-based_authentication3.png" class="attachment-related_post-thumbnail size-related_post-thumbnail wp-post-image" alt="" srcset="https://www.future-processing.pl/blog/wp-content/uploads/2015/06/blog_techniczny_claims-based_authentication3.png 1200w, https://www.future-processing.pl/blog/wp-content/uploads/2015/06/blog_techniczny_claims-based_authentication3-300x180.png 300w, https://www.future-processing.pl/blog/wp-content/uploads/2015/06/blog_techniczny_claims-based_authentication3-1024x613.png 1024w, https://www.future-processing.pl/blog/wp-content/uploads/2015/06/blog_techniczny_claims-based_authentication3-190x114.png 190w" sizes="(max-width: 1200px) 100vw, 1200px"> 
       <div class="blog-posts__author">
         Tomasz Krawczyk 
       </div> <h3>WCF services with claims-based authentication and authorization </h3></a> 
      <data class="blog-posts__data">17.06.2015</data> 
      <p> </p>
      <p>In the previous article I’ve presented information about Security Token Service (STS). We know how to build sample…</p> 
      <p></p> 
      <a class="blog-posts__link-item button triangle" href="https://www.future-processing.pl/blog/wcf_services_with_claims-based_authentication_and_authorization/"> Read more </a>  
     </div> 
     <div class="small-12 medium-6 large-4 columns related"> 
      <a href="https://www.future-processing.pl/blog/introduction-to-claims-based-authentication-and-authorization-in-net-how-to-build-active-sts/"> </a>
      <a href="https://www.future-processing.pl/blog/introduction-to-claims-based-authentication-and-authorization-in-net-how-to-build-active-sts/" title="Introduction to Claims-Based Authentication and Authorization in .NET – how to build Active STS"> <img width="1200" height="718" src="https://www.future-processing.pl/blog/wp-content/uploads/2015/05/blog_Authorization.png" class="attachment-related_post-thumbnail size-related_post-thumbnail wp-post-image" alt="" srcset="https://www.future-processing.pl/blog/wp-content/uploads/2015/05/blog_Authorization.png 1200w, https://www.future-processing.pl/blog/wp-content/uploads/2015/05/blog_Authorization-300x180.png 300w, https://www.future-processing.pl/blog/wp-content/uploads/2015/05/blog_Authorization-1024x613.png 1024w, https://www.future-processing.pl/blog/wp-content/uploads/2015/05/blog_Authorization-190x114.png 190w" sizes="(max-width: 1200px) 100vw, 1200px"> 
       <div class="blog-posts__author">
         Tomasz Krawczyk 
       </div> <h3>Introduction to Claims-Based Authentication and Authorization in .NET – how to build Active STS </h3></a> 
      <data class="blog-posts__data">12.05.2015</data> 
      <p> </p>
      <p>In the previous article basic information about authentication and authorization process on .Net has been presented. Security Token…</p> 
      <p></p> 
      <a class="blog-posts__link-item button triangle" href="https://www.future-processing.pl/blog/introduction-to-claims-based-authentication-and-authorization-in-net-how-to-build-active-sts/"> Read more </a>  
     </div> 
    </div> 
    <!--RELATED POSTS : END --> 
    <div class="row"> 
     <div class="small-12 columns post-title"> 
      <h2>Comments</h2> 
     </div> 
     <div id="disqus" class="small-12 columns"> 
      <div id="disqus_thread"> 
      </div> 
     </div> 
    </div> 
   </div> 
  </main> 
  <footer class="footer">
   <!-- FOOTER CONTACT START --> 
   <div class="row"> 
    <div class="small-12 medium-4 columns"> 
     <aside id="tag_cloud-2" class="widget widget_tag_cloud">
      <h3 class="widget-title">Most popular tags</h3>
      <div class="tagcloud">
       <a href="https://www.future-processing.pl/blog/tag/net/" class="tag-link-25 tag-link-position-1" title="13 topics" style="font-size: 13pt;">.NET</a> 
       <a href="https://www.future-processing.pl/blog/tag/agile-2/" class="tag-link-21 tag-link-position-2" title="13 topics" style="font-size: 13pt;">Agile</a> 
       <a href="https://www.future-processing.pl/blog/tag/android/" class="tag-link-123 tag-link-position-3" title="6 topics" style="font-size: 13pt;">Android</a> 
       <a href="https://www.future-processing.pl/blog/tag/architecture/" class="tag-link-61 tag-link-position-4" title="11 topics" style="font-size: 13pt;">Architecture</a> 
       <a href="https://www.future-processing.pl/blog/tag/automation/" class="tag-link-140 tag-link-position-5" title="8 topics" style="font-size: 13pt;">Automation</a> 
       <a href="https://www.future-processing.pl/blog/tag/best-practices/" class="tag-link-22 tag-link-position-6" title="16 topics" style="font-size: 13pt;">Best Practices</a> 
       <a href="https://www.future-processing.pl/blog/tag/c/" class="tag-link-27 tag-link-position-7" title="5 topics" style="font-size: 13pt;">C#</a> 
       <a href="https://www.future-processing.pl/blog/tag/cloud-2/" class="tag-link-111 tag-link-position-8" title="7 topics" style="font-size: 13pt;">cloud</a> 
       <a href="https://www.future-processing.pl/blog/tag/cloud-computing/" class="tag-link-112 tag-link-position-9" title="4 topics" style="font-size: 13pt;">cloud computing</a> 
       <a href="https://www.future-processing.pl/blog/tag/databases-2/" class="tag-link-60 tag-link-position-10" title="11 topics" style="font-size: 13pt;">databases</a> 
       <a href="https://www.future-processing.pl/blog/tag/docker/" class="tag-link-298 tag-link-position-11" title="4 topics" style="font-size: 13pt;">Docker</a> 
       <a href="https://www.future-processing.pl/blog/tag/functional-programming/" class="tag-link-149 tag-link-position-12" title="4 topics" style="font-size: 13pt;">functional programming</a> 
       <a href="https://www.future-processing.pl/blog/tag/java/" class="tag-link-487 tag-link-position-13" title="7 topics" style="font-size: 13pt;">Java</a> 
       <a href="https://www.future-processing.pl/blog/tag/javascript/" class="tag-link-118 tag-link-position-14" title="10 topics" style="font-size: 13pt;">JavaScript</a> 
       <a href="https://www.future-processing.pl/blog/tag/nosql/" class="tag-link-117 tag-link-position-15" title="5 topics" style="font-size: 13pt;">nosql</a> 
       <a href="https://www.future-processing.pl/blog/tag/performance-2/" class="tag-link-14 tag-link-position-16" title="6 topics" style="font-size: 13pt;">performance</a> 
       <a href="https://www.future-processing.pl/blog/tag/process-management/" class="tag-link-23 tag-link-position-17" title="4 topics" style="font-size: 13pt;">Process Management</a> 
       <a href="https://www.future-processing.pl/blog/tag/project-management/" class="tag-link-70 tag-link-position-18" title="18 topics" style="font-size: 13pt;">Project Management</a> 
       <a href="https://www.future-processing.pl/blog/tag/scrum/" class="tag-link-24 tag-link-position-19" title="8 topics" style="font-size: 13pt;">Scrum</a> 
       <a href="https://www.future-processing.pl/blog/tag/security-2/" class="tag-link-7 tag-link-position-20" title="15 topics" style="font-size: 13pt;">Security</a> 
       <a href="https://www.future-processing.pl/blog/tag/testing/" class="tag-link-84 tag-link-position-21" title="5 topics" style="font-size: 13pt;">testing</a> 
       <a href="https://www.future-processing.pl/blog/tag/wif/" class="tag-link-313 tag-link-position-22" title="4 topics" style="font-size: 13pt;">WIF</a>
      </div> 
     </aside> 
    </div> 
    <div class="small-12 medium-3 medium-offset-1 columns"> 
     <aside id="nav_menu-3" class="widget widget_nav_menu">
      <h3 class="widget-title">Future processing</h3>
      <div class="menu-footer-container">
       <ul id="menu-footer" class="menu">
        <li id="menu-item-10065" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10065"><a href="https://www.future-processing.pl/blog/about-us/">About us</a></li> 
        <li id="menu-item-10066" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10066"><a href="https://www.future-processing.pl/blog/contact/">Contact</a></li> 
        <li id="menu-item-10067" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10067"><a href="https://www.future-processing.pl/blog/cookies/">Cookies</a></li> 
       </ul>
      </div>
     </aside> 
    </div> 
    <div class="small-12 medium-3 medium-offset-1 columns archive-block"> 
     <h3>Archives</h3> 
     <div class="archives-links"> 
      <li><a href="https://www.future-processing.pl/blog/2017/08/">August 2017</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2017/06/">June 2017</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2017/03/">March 2017</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2017/01/">January 2017</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2016/11/">November 2016</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2016/10/">October 2016</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2016/09/">September 2016</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2016/08/">August 2016</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2016/07/">July 2016</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2016/06/">June 2016</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2016/05/">May 2016</a></li> 
      <li><a href="https://www.future-processing.pl/blog/2016/04/">April 2016</a></li> 
      <a class="more" href="#">...more</a> 
     </div> 
    </div> 
   </div> 
   <!-- FOOTER CONTACT END --> 
   <!-- FOOTER COPYRIGHT START --> 
   <div class="row cr"> 
    <div class="medium-6 small-12 columns"> 
     <ul id="menu-footer-1" class="menu">
      <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10065"><a href="https://www.future-processing.pl/blog/about-us/">About us</a></li> 
      <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10066"><a href="https://www.future-processing.pl/blog/contact/">Contact</a></li> 
      <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10067"><a href="https://www.future-processing.pl/blog/cookies/">Cookies</a></li> 
     </ul> 
    </div> 
    <div class="medium-6 small-12 columns"> 
     <div class="footercopyright">
       2004 - 2017 © Future Processing. All rights reserved. 
     </div> 
    </div> 
   </div> 
   <!-- FOOTER COPYRIGHT END --> 
  </footer> 
  <div class="width__control"></div>
  <!-- COOKIES INFO --> 
  <div class="cookies__info"> 
   <h3>Cookies</h3> 
   <p>This website stores cookies on your computer. These cookies are used to improve our website and provide more personalized services to you, both on this website and through other media. To find out more about the cookies we use, see our <a href="/cookies-policy/">Cookies policy</a>.</p> 
   <button class="button">Accept</button> 
  </div> 
  <script type="text/javascript" src="https://www.future-processing.pl/blog/wp-content/themes/future/dist/scripts/scripts.min.js?ver=4.7.5"></script> 
  <script type="text/javascript" src="https://www.future-processing.pl/blog/wp-content/themes/fp-blog/dist/scripts/scripts.min.js"></script> 
  <script type="text/javascript" src="https://www.future-processing.pl/blog/wp-content/themes/fp-blog/dist/scripts/prism.min.js"></script> 
  <script type="text/javascript" src="https://www.future-processing.com/blog/wp-content/plugins/wp-charts//js/functions.js?ver=4.7.5"></script> 
  <script type="text/javascript" src="https://www.future-processing.pl/blog/wp-includes/js/wp-embed.min.js?ver=4.7.5"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var embedVars = {"disqusConfig":{"platform":"wordpress@4.7.5","language":""},"disqusIdentifier":"4717 https:\/\/www.future-processing.com\/blog\/?post_type=post&p=4717","disqusShortname":"blogtechnicznyfutureprocessing","disqusTitle":"Exploring Spring-Boot and Spring-Security: Custom token based authentication of REST services with Spring-Security and pinch of Spring Java Configuration and Spring Integration Testing.","disqusUrl":"https:\/\/www.future-processing.pl\/blog\/exploring-spring-boot-and-spring-security-custom-token-based-authentication-of-rest-services-with-spring-security-and-pinch-of-spring-java-configuration-and-spring-integration-testing\/","options":{"manualSync":"1"},"postId":"4717"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://www.future-processing.pl/blog/wp-content/plugins/disqus-comment-system/media/js/disqus.js?ver=4.7.5"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var countVars = {"disqusShortname":"blogtechnicznyfutureprocessing"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://www.future-processing.pl/blog/wp-content/plugins/disqus-comment-system/media/js/count.js?ver=4.7.5"></script>   
 </body>
</html>