<!doctype html>
<html class="no-js hasSidebar hasPageActions hasBreadcrumb " lang="en-us" dir="ltr">
 <head> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <meta property="og:title" content="External Authentication Services with ASP.NET Web API (C#)"> 
  <meta property="og:image" content="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/microsoft-header.png"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:site" content="@docsmsft"> 
  <meta name="twitter:title" content="External Authentication Services with ASP.NET Web API (C#)"> 
  <meta name="twitter:description" content="Describes using External Authentication Services in ASP.NET Web API."> 
  <meta name="twitter:image" content="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/microsoft-header.png"> 
  <meta name="twitter:image:alt" content="Microsoft Logo"> 
  <meta name="breadcrumb_path" content="/aspnet/breadcrumb/toc.json"> 
  <meta name="msc.legacyurl" content="/web-api/overview/security/external-authentication-services"> 
  <meta name="ms.assetid" content="3bb8eb15-b518-44f5-a67d-a27e051aedc6"> 
  <meta name="msc.type" content="authoredcontent"> 
  <meta name="author" content="rmcmurray"> 
  <meta name="description" content="Describes using External Authentication Services in ASP.NET Web API."> 
  <meta name="ms.author" content="aspnetcontent"> 
  <meta name="manager" content="wpickett"> 
  <meta name="uid" content="web-api/overview/security/external-authentication-services"> 
  <meta name="ms.topic" content="article"> 
  <meta name="ms.date" content="06/26/2013"> 
  <meta name="ms.technology" content="dotnet-webapi"> 
  <meta name="ms.prod" content=".net-framework"> 
  <meta name="search.ms_sitename" content="Docs"> 
  <meta name="search.ms_docsetname" content="aspnet-conceptual"> 
  <meta name="version" content="0"> 
  <meta name="locale" content="en-us"> 
  <meta name="site_name" content="Docs"> 
  <meta name="search.ms_product" content="MSDN"> 
  <meta name="depot_name" content="MSDN.aspnet-conceptual"> 
  <meta name="updated_at" content="2017-09-20 03:11 PM"> 
  <meta name="gitcommit" content="https://github.com/aspnet/Docs/blob/d157e2ec7a373f9cd7df9dc0d2e360fa018bc1b1/aspnet/web-api/overview/security/external-authentication-services.md"> 
  <meta name="original_content_git_url" content="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services.md"> 
  <meta name="document_id" content="10ca9894-864f-33e1-4ffa-7919a2b87dd5"> 
  <meta name="pagetype" content="Conceptual"> 
  <meta name="toc_rel" content="../../../toc.json"> 
  <meta name="pdf_url_template" content="https://docs.microsoft.com/pdfstore/en-us/MSDN.aspnet-conceptual/{branchName}{pdfName}"> 
  <meta name="word_count" content="3055"> 
  <meta name="scope" content="ASP.NET"> 
  <link href="https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/external-authentication-services" rel="canonical"> 
  <title>External Authentication Services with ASP.NET Web API (C#) | Microsoft Docs</title> 
  <link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/css/870b0825531b1b071dff.site.css "> 
  <link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/css/870b0825531b1b071dff.conceptual.css "> 
  <script>
	var msDocs = {
		data:{
			contentLocale: 'en-us',
			contentDir: 'ltr',
			userLocale: 'en-us',
			userDir: 'ltr',
			pathToTheme: '/_themes/docs.theme/master/en-us/_themes/',
			pageTemplate: 'Conceptual',
			brand: '',
			forceVersionPicker:false		},
		functions:{},
		settings:{
			extendBreadcrumb: false
		}
	};
	if (!('Promise' in window && 'resolve' in window.Promise && 'reject' in window.Promise && 'all' in window.Promise && 'race' in window.Promise)) {
		document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/bluebird.min.js"><\/script>');
	}
	</script> 
  <!--[if lt IE 9]>
		<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.12.4.min.js"></script>
		<script src="/_themes/docs.theme/master/en-us/_themes/global/js/polyfills/all.js"></script>
	<![endif]--> 
  <!--[if gte IE 9]><!--> 
  <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.2.4.min.js"></script> 
  <!--<![endif]--> 
  <script>window.jQuery || document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/jquery/jquery-1.12.4.min.js"><\/script>')</script> 
  <script src="/_themes/docs.theme/master/en-us/_themes/global/js/global.min.js?v=263"></script> 
 </head> 
 <body> 
  <div id="headerAreaHolder" ms.pgarea="header" data-bi-name="header"> 
   <div id="uhfPlaceHolder" class="c-me"></div> 
  </div> 
  <div class="container mainContainer" lang="en-us" dir="ltr" ms.pgarea="body" data-bi-name="body"> 
   <main role="main" ms.cmpgrp="content" data-bi-name="content"> 
    <div id="main"> 
     <h1 id="external-authentication-services-with-aspnet-web-api-c" sourcefile="web-api/overview/security/external-authentication-services.md" sourcestartlinenumber="16" sourceendlinenumber="17">External Authentication Services with ASP.NET Web API (C#)</h1> 
     <div class="metadata loading" ms.cmpgrp="page info" data-bi-name="page info"> 
      <div> 
       <time class="date" datetime="6/26/2013 12:00:00 AM">2013-6-26</time> 
       <span class="reading-time">15 minutes to read</span> 
       <span class="contributors-text">Contributors</span> 
       <ul class="contributors" ms.cmpgrp="contributors" data-bi-name="contributors"> 
        <li><a href="https://github.com/rmcmurray" title="rmcmurray" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/rmcmurray.png?size=16" alt="rmcmurray"></a></li> 
        <li><a href="https://github.com/v-anpasi" title="Andy Pasic" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/v-anpasi.png?size=16" alt="Andy Pasic"></a></li> 
        <li><a href="https://github.com/tdykstra" title="Tom Dykstra" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/tdykstra.png?size=16" alt="Tom Dykstra"></a></li> 
       </ul> 
      </div> 
      <nav id="center-doc-outline" class="doc-outline" ms.cmpgrp="intopic toc" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation"> 
       <h3>In this article</h3> 
      </nav> 
     </div> 
     <div>
      <div class="content"> 
       <p>by <a href="https://github.com/rmcmurray" data-linktype="external">Robert McMurray</a></p> 
       <p>Visual Studio 2013 and ASP.NET 4.5.1 expand the security options for <a href="../../../single-page-application/index" data-linktype="relative-path">Single Page Applications</a> (SPA) and <a href="../../index" data-linktype="relative-path">Web API</a> services to integrate with external authentication services, which include several OAuth/OpenID and social media authentication services: Microsoft Accounts, Twitter, Facebook, and Google.</p> 
       <h3 id="in-this-walkthrough">In This Walkthrough</h3> 
       <ul> 
        <li><a href="#USING" data-linktype="self-bookmark">Using External Authentication Services</a></li> 
        <li><a href="#SAMPLE" data-linktype="self-bookmark">Creating the Sample Web Application</a></li> 
        <li><a href="#FACEBOOK" data-linktype="self-bookmark">Enabling Facebook Authentication</a></li> 
        <li><a href="#GOOGLE" data-linktype="self-bookmark">Enabling Google Authentication</a></li> 
        <li><a href="#MICROSOFT" data-linktype="self-bookmark">Enabling Microsoft Authentication</a></li> 
        <li><a href="#TWITTER" data-linktype="self-bookmark">Enabling Twitter Authentication</a></li> 
        <li><p><a href="#MOREINFO" data-linktype="self-bookmark">Additional Information</a></p> 
         <ul> 
          <li><a href="#COMBINE" data-linktype="self-bookmark">Combining External Authentication Services</a></li> 
          <li><a href="#FQDN" data-linktype="self-bookmark">Configuring IIS Express to use a Fully Qualified Domain Name</a></li> 
          <li><a href="#OBTAIN" data-linktype="self-bookmark">How to Obtain your Application Settings for Microsoft Authentication</a></li> 
          <li><a href="#DISABLE" data-linktype="self-bookmark">Optional: Disable Local Registration</a></li> 
         </ul> </li> 
       </ul> 
       <h3 id="prerequisites">Prerequisites</h3> 
       <p>To follow the examples in this walkthrough, you need to have the following:</p> 
       <ul> 
        <li>Visual Studio 2013</li> 
        <li><p>An account for at least one of the following external authentication services:</p> 
         <ul> 
          <li>A Google user account</li> 
          <li><p>A developer account with the application identifier and secret key for one of the following social media authentication services:</p> 
           <ul> 
            <li>Microsoft Accounts (<a href="https://go.microsoft.com/fwlink/?LinkID=144070" data-linktype="external">https://go.microsoft.com/fwlink/?LinkID=144070</a>)</li> 
            <li>Twitter (<a href="https://dev.twitter.com/" data-linktype="external">https://dev.twitter.com/</a>)</li> 
            <li>Facebook (<a href="https://developers.facebook.com/" data-linktype="external">https://developers.facebook.com/</a>)</li> 
           </ul> </li> 
         </ul> </li> 
       </ul> 
       <p><a id="USING"></a></p> 
       <h2 id="using-external-authentication-services">Using External Authentication Services</h2> 
       <p>The abundance of external authentication services that are currently available to web developers help to reduce development time when creating new web applications. Web users typically have several existing accounts for popular web services and social media websites, therefore when a web application implements the authentication services from an external web service or social media website, it saves the development time that would have been spent creating an authentication implementation. Using an external authentication service saves end users from having to create another account for your web application, and also from having to remember another username and password.</p> 
       <p>In the past, developers have had two choices: create their own authentication implementation, or learn how to integrate an external authentication service into their applications. At the most basic level, the following diagram illustrates a simple request flow for a user agent (web browser) that is requesting information from a web application that is configured to use an external authentication service:</p> 
       <p><a href="external-authentication-services/_static/image1.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image2.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> 
       <p>In the preceding diagram, the user agent (or web browser in this example) makes a request to a web application, which redirects the web browser to an external authentication service. The user agent sends its credentials to the external authentication service, and if the user agent has successfully authenticated, the external authentication service will redirect the user agent to the original web application with some form of token which the user agent will send to the web application. The web application will use the token to verify that the user agent has been successfully authenticated by the external authentication service, and the web application may use the token to gather more information about the user agent. Once the application is done processing the user agent's information, the web application will return the appropriate response to the user agent based on its authorization settings.</p> 
       <p>In this second example, the user agent negotiates with the web application and external authorization server, and the web application performs additional communication with the external authorization server to retrieve additional information about the user agent:</p> 
       <p><a href="external-authentication-services/_static/image3.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image4.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> 
       <p>Visual Studio 2013 and ASP.NET 4.5.1 make integration with external authentication services easier for developers by providing built-in integration for the following authentication services:</p> 
       <ul> 
        <li>Facebook</li> 
        <li>Google</li> 
        <li>Microsoft Accounts (Windows Live ID accounts)</li> 
        <li>Twitter</li> 
       </ul> 
       <p>The examples in this walkthrough will demonstrate how to configure each of the supported external authentication services by using the new ASP.NET Web Application template that ships with Visual Studio 2013.</p> 
       <div class="NOTE">
        <h5>Note</h5>
        <p>If necessary, you may need to add your FQDN to the settings for your external authentication service. This requirement is based on security constraints for some external authentication services which require the FQDN in your application settings to match the FQDN that is used by your clients. (The steps for this will vary greatly for each external authentication service; you will need to consult the documentation for each external authentication service to see if this is required and how to configure these settings.) If you need to configure IIS Express to use an FQDN for testing this environment, see the <a href="#FQDN" data-linktype="self-bookmark">Configuring IIS Express to use a Fully Qualified Domain Name</a> section later in this walkthrough.</p> 
       </div> 
       <p><a id="SAMPLE"></a></p> 
       <h2 id="creating-a-sample-web-application">Creating a Sample Web Application</h2> 
       <p>The following steps will lead you through creating a sample application by using the ASP.NET Web Application template, and you will use this sample application for each of the external authentication services later in this walkthrough.</p> 
       <p>Start Visual Studio 2013 select <strong>New Project</strong> from the Start page. Or, from the <strong>File</strong> menu, select <strong>New</strong> and then <strong>Project</strong>.</p> 
       <p><a href="external-authentication-services/_static/image5.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image6.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> 
       <p>When the <strong>New Project</strong> dialog box is displayed, select <strong>Installed</strong> <strong>Templates</strong> and expand <strong>Visual C#</strong>. Under <strong>Visual C#</strong>, select <strong>Web</strong>. In the list of project templates, select <strong>ASP.NET Web Application</strong>. Enter a name for your project and click <strong>OK</strong>.</p> 
       <p><a href="external-authentication-services/_static/image7.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image8.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> 
       <p>When the <strong>New ASP.NET Project</strong> is displayed, select the <strong>SPA</strong> template and click <strong>Create Project</strong>.</p> 
       <p><a href="external-authentication-services/_static/image9.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image10.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> 
       <p>Wait as Visual Studio 2013 creates your project.</p> 
       <p><a href="external-authentication-services/_static/image11.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image12.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> 
       <p>When Visual Studio 2013 has finished creating your project, open the <em>Startup.Auth.cs</em> file that is located in the <strong>App_Start</strong> folder.</p> 
       <p><a href="external-authentication-services/_static/image13.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image14.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> 
       <p>When you first create the project, none of the external authentication services are enabled in <em>Startup.Auth.cs</em> file; the following illustrates what your code might resemble, with the sections highlighted for where you would enable an external authentication service and any relevant settings in order to use Microsoft Accounts, Twitter, Facebook, or Google authentication with your ASP.NET application:</p> 
       <pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services/samples/sample1.cs" name="Main">using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.EntityFramework;
using Microsoft.Owin.Security.Cookies;
using Microsoft.Owin.Security.OAuth;
using Owin;
using WebApplication1.Providers;

namespace WebApplication1
{
    public partial class Startup
    {
        public const string ExternalCookieAuthenticationType = CookieAuthenticationDefaults.ExternalAuthenticationType;
        public const string ExternalOAuthAuthenticationType = "ExternalToken";

        static Startup()
        {
            PublicClientId = "self";

            IdentityManagerFactory = new IdentityManagerFactory(IdentityConfig.Settings, () =&gt; new IdentityStore());

            CookieOptions = new CookieAuthenticationOptions();

            OAuthOptions = new OAuthAuthorizationServerOptions
            {
                TokenEndpointPath = "/Token",
                AuthorizeEndpointPath = "/api/Account/ExternalLogin",
                Provider = new ApplicationOAuthProvider(PublicClientId, IdentityManagerFactory, CookieOptions)
            };
        }

        public static OAuthAuthorizationServerOptions OAuthOptions { get; private set; }

        public static CookieAuthenticationOptions CookieOptions { get; private set; }

        public static IdentityManagerFactory IdentityManagerFactory { get; set; }

        public static string PublicClientId { get; private set; }

        // For more information on configuring authentication, please visit http://go.microsoft.com/fwlink/?LinkId=301864
        public void ConfigureAuth(IAppBuilder app)
        {
            // Enable the application to use cookies to authenticate users
            app.UseCookieAuthentication(CookieOptions);

            // Enable the application to use a cookie to store temporary information about a user logging in with a third party login provider
            app.UseExternalSignInCookie(ExternalCookieAuthenticationType);

            // Enable the application to use bearer tokens to authenticate users
            app.UseOAuthBearerTokens(OAuthOptions, ExternalOAuthAuthenticationType);

            // Uncomment the following lines to enable logging in with third party login providers
            //app.UseMicrosoftAccountAuthentication(
            //    clientId: "",
            //    clientSecret: "");

            //app.UseTwitterAuthentication(
            //    consumerKey: "",
            //    consumerSecret: "");

            //app.UseFacebookAuthentication(
            //    appId: "",
            //    appSecret: "");

            //app.UseGoogleAuthentication();
        }
    }
}
</code></pre>
       <p>When you press F5 to build and debug your web application, it will display a login screen where you will see that no external authentication services have been defined.</p> 
       <p><a href="external-authentication-services/_static/image15.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image16.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> 
       <p>In the following sections, you will learn how to enable each of the external authentication services that are provided with ASP.NET in Visual Studio 2013.</p> 
       <p><a id="FACEBOOK"></a></p> 
       <h2 id="enabling-facebook-authentication">Enabling Facebook Authentication</h2> 
       <p>Using Facebook authentication requires you to create a Facebook developer account, and your project will require an application ID and secret key from Facebook in order to function. For information about creating a Facebook developer account and obtaining your application ID and secret key, see <a href="https://go.microsoft.com/fwlink/?LinkID=252166" data-linktype="external">https://go.microsoft.com/fwlink/?LinkID=252166</a>.</p> 
       <p>Once you have obtained your application ID and secret key, use the following steps to enable Facebook authentication for your web application:</p> 
       <ol> 
        <li><p>When your project is open in Visual Studio 2013, open the <em>Startup.Auth.cs</em> file:</p> <p> <a href="external-authentication-services/_static/image17.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image18.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>Locate the highlighted section of code:</p> <pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services/samples/sample2.cs" name="Main">// Uncomment the following lines to enable logging in with third party login providers
//app.UseMicrosoftAccountAuthentication(
//    clientId: "",
//    clientSecret: "");

//app.UseTwitterAuthentication(
//   consumerKey: "",
//   consumerSecret: "");

//app.UseFacebookAuthentication(
//   appId: "",
//   appSecret: "");

//app.UseGoogleAuthentication();
</code></pre></li> 
        <li><p>Remove the "//" characters to uncomment the highlighted lines of code, and then add your application ID and secret key. Once you have added those parameters, you can recompile your project:</p> <pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services/samples/sample3.cs" name="Main">// Uncomment the following lines to enable logging in with third party login providers
//app.UseMicrosoftAccountAuthentication(
//    clientId: "",
//    clientSecret: "");

//app.UseTwitterAuthentication(
//   consumerKey: "",
//   consumerSecret: "");

app.UseFacebookAuthentication(
   appId: "426f62526f636b73",
   appSecret: "57686f6120447564652c2049495320526f636b73");

//app.UseGoogleAuthentication();
</code></pre></li> 
        <li><p>When you press F5 to open your web application in your web browser, you will see that Facebook has been defined as an external authentication service:</p> <p> <a href="external-authentication-services/_static/image19.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image20.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>When you click the <strong>Facebook</strong> button, your browser will be redirected to the Facebook login page:</p> <p> <a href="external-authentication-services/_static/image21.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image22.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>After you enter your Facebook credentials and click <strong>Log in</strong>, your web browser will be redirected back to your web application, which will prompt you for the <strong>User name</strong> that you want to associate with your Facebook account:</p> <p> <a href="external-authentication-services/_static/image23.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image24.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>After you have entered your user name and clicked the <strong>Sign up</strong> button, your web application will display the default <strong>home page</strong> for your Facebook account:</p> <p> <a href="external-authentication-services/_static/image25.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image26.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
       </ol> 
       <p><a id="GOOGLE"></a></p> 
       <h2 id="enabling-google-authentication">Enabling Google Authentication</h2> 
       <p>Google is by far the easiest of the external authentication services to enable because it doesn't require a developer account, nor does it require additional information like your application ID or secret key as the other external authentication services necessitate.</p> 
       <p>To enable Google authentication for your web application, use the following steps:</p> 
       <ol> 
        <li><p>When your project is open in Visual Studio 2013, open the <em>Startup.Auth.cs</em> file:</p> <p> <a href="external-authentication-services/_static/image27.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image28.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>Locate the highlighted section of code:</p> <pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services/samples/sample4.cs" name="Main">// Uncomment the following lines to enable logging in with third party login providers
//app.UseMicrosoftAccountAuthentication(
//    clientId: "",
//    clientSecret: "");

//app.UseTwitterAuthentication(
//   consumerKey: "",
//   consumerSecret: "");

//app.UseFacebookAuthentication(
//   appId: "",
//   appSecret: "");

//app.UseGoogleAuthentication();
</code></pre></li> 
        <li><p>Remove the "//" characters to uncomment the highlighted line of code, and then recompile your project:</p> <pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services/samples/sample5.cs" name="Main">// Uncomment the following lines to enable logging in with third party login providers
//app.UseMicrosoftAccountAuthentication(
//    clientId: "",
//    clientSecret: "");

//app.UseTwitterAuthentication(
//   consumerKey: "",
//   consumerSecret: "");

//app.UseFacebookAuthentication(
//   appId: "",
//   appSecret: "");

app.UseGoogleAuthentication();
</code></pre></li> 
        <li><p>When you press F5 to open your web application in your web browser, you will see that Google has been defined as an external authentication service:</p> <p> <a href="external-authentication-services/_static/image29.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image30.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>When you click the <strong>Google</strong> button, your browser will be redirected to the Google login page:</p> <p> <a href="external-authentication-services/_static/image31.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image32.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>After you enter your Google credentials and click <strong>Sign in</strong>, Google will prompt you to verify that your web application has permissions to access your Google account:</p> <p> <a href="external-authentication-services/_static/image33.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image34.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>When you click <strong>Accept</strong>, your web browser will be redirected back to your web application, which will prompt you for the <strong>User name</strong> that you want to associate with your Google account:</p> <p> <a href="external-authentication-services/_static/image35.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image36.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>After you have entered your user name and clicked the <strong>Sign up</strong> button, your web application will display the default <strong>home page</strong> for your Google account:</p> <p> <a href="external-authentication-services/_static/image37.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image38.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
       </ol> 
       <p><a id="MICROSOFT"></a></p> 
       <h2 id="enabling-microsoft-authentication">Enabling Microsoft Authentication</h2> 
       <p>Microsoft authentication requires you to create a developer account, and it requires a client ID and client secret in order to function. For information about creating a Microsoft developer account and obtaining your client ID and client secret, see <a href="https://go.microsoft.com/fwlink/?LinkID=144070" data-linktype="external">https://go.microsoft.com/fwlink/?LinkID=144070</a>.</p> 
       <p>Once you have obtained your consumer key and consumer secret, use the following steps to enable Microsoft authentication for your web application:</p> 
       <ol> 
        <li><p>When your project is open in Visual Studio 2013, open the <em>Startup.Auth.cs</em> file:</p> <p> <a href="external-authentication-services/_static/image39.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image40.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>Locate the highlighted section of code:</p> <pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services/samples/sample6.cs" name="Main">// Uncomment the following lines to enable logging in with third party login providers
//app.UseMicrosoftAccountAuthentication(
//    clientId: "",
//    clientSecret: "");

//app.UseTwitterAuthentication(
//   consumerKey: "",
//   consumerSecret: "");

//app.UseFacebookAuthentication(
//   appId: "",
//   appSecret: "");

//app.UseGoogleAuthentication();
</code></pre></li> 
        <li><p>Remove the "//" characters to uncomment the highlighted lines of code, and then add your client ID and client secret. Once you have added those parameters, you can recompile your project:</p> <pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services/samples/sample7.cs" name="Main">// Uncomment the following lines to enable logging in with third party login providers
app.UseMicrosoftAccountAuthentication(
    clientId: "426f62526f636b73",
    clientSecret: "57686f6120447564652c2049495320526f636b73");

//app.UseTwitterAuthentication(
//   consumerKey: "",
//   consumerSecret: "");

//app.UseFacebookAuthentication(
//   appId: "",
//   appSecret: "");

//app.UseGoogleAuthentication();
</code></pre></li> 
        <li><p>When you press F5 to open your web application in your web browser, you will see that Microsoft has been defined as an external authentication service:</p> <p> <a href="external-authentication-services/_static/image41.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image42.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>When you click the <strong>Microsoft</strong> button, your browser will be redirected to the Microsoft login page:</p> <p> <a href="external-authentication-services/_static/image43.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image44.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>After you enter your Microsoft credentials and click <strong>Sign in</strong>, you will be prompted to verify that your web application has permissions to access your Microsoft account:</p> <p> <a href="external-authentication-services/_static/image45.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image46.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>When you click <strong>Yes</strong>, your web browser will be redirected back to your web application, which will prompt you for the <strong>User name</strong> that you want to associate with your Microsoft account:</p> <p> <a href="external-authentication-services/_static/image47.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image48.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>After you have entered your user name and clicked the <strong>Sign up</strong> button, your web application will display the default <strong>home page</strong> for your Microsoft account:</p> <p> <a href="external-authentication-services/_static/image49.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image50.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
       </ol> 
       <p><a id="TWITTER"></a></p> 
       <h2 id="enabling-twitter-authentication">Enabling Twitter Authentication</h2> 
       <p>Twitter authentication requires you to create a developer account, and it requires a consumer key and consumer secret in order to function. For information about creating a Twitter developer account and obtaining your consumer key and consumer secret, see <a href="https://go.microsoft.com/fwlink/?LinkID=252166" data-linktype="external">https://go.microsoft.com/fwlink/?LinkID=252166</a>.</p> 
       <p>Once you have obtained your consumer key and consumer secret, use the following steps to enable Twitter authentication for your web application:</p> 
       <ol> 
        <li><p>When your project is open in Visual Studio 2013, open the <em>Startup.Auth.cs</em> file:</p> <p> <a href="external-authentication-services/_static/image51.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image52.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>Locate the highlighted section of code:</p> <pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services/samples/sample8.cs" name="Main">// Uncomment the following lines to enable logging in with third party login providers
//app.UseMicrosoftAccountAuthentication(
//    clientId: "",
//    clientSecret: "");

//app.UseTwitterAuthentication(
//   consumerKey: "",
//   consumerSecret: "");

//app.UseFacebookAuthentication(
//   appId: "",
//   appSecret: "");

//app.UseGoogleAuthentication();
</code></pre></li> 
        <li><p>Remove the "//" characters to uncomment the highlighted lines of code, and then add your consumer key and consumer secret. Once you have added those parameters, you can recompile your project:</p> <pre><code class="lang-csharp" data-src="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services/samples/sample9.cs" name="Main">// Uncomment the following lines to enable logging in with third party login providers
//app.UseMicrosoftAccountAuthentication(
//    clientId: "",
//    clientSecret: "");

app.UseTwitterAuthentication(
   consumerKey: "426f62526f636b73",
   consumerSecret: "57686f6120447564652c2049495320526f636b73");

//app.UseFacebookAuthentication(
//   appId: "",
//   appSecret: "");

//app.UseGoogleAuthentication();
</code></pre></li> 
        <li><p>When you press F5 to open your web application in your web browser, you will see that Twitter has been defined as an external authentication service:</p> <p> <a href="external-authentication-services/_static/image53.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image54.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>When you click the <strong>Twitter</strong> button, your browser will be redirected to the Twitter login page:</p> <p> <a href="external-authentication-services/_static/image55.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image56.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>After you enter your Twitter credentials and click <strong>Authorize app</strong>, your web browser will be redirected back to your web application, which will prompt you for the <strong>User name</strong> that you want to associate with your Twitter account:</p> <p> <a href="external-authentication-services/_static/image57.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image58.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>After you have entered your user name and clicked the <strong>Sign up</strong> button, your web application will display the default <strong>home page</strong> for your Twitter account:</p> <p> <a href="external-authentication-services/_static/image59.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image60.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
       </ol> 
       <p><a id="MOREINFO"></a></p> 
       <h2 id="additional-information">Additional Information</h2> 
       <p>For additional information about creating applications that use OAuth and OpenID, see the following URLs:</p> 
       <ul> 
        <li><a href="https://go.microsoft.com/fwlink/?LinkID=252166" data-linktype="external">https://go.microsoft.com/fwlink/?LinkID=252166</a></li> 
        <li><a href="https://go.microsoft.com/fwlink/?LinkID=243995" data-linktype="external">https://go.microsoft.com/fwlink/?LinkID=243995</a></li> 
       </ul> 
       <p><a id="COMBINE"></a></p> 
       <h3 id="combining-external-authentication-services">Combining External Authentication Services</h3> 
       <p>For greater flexibility, you can define multiple external authentication services at the same time - this allows your web application's users to use an account from any of the enabled external authentication services:</p> 
       <p><a href="external-authentication-services/_static/image61.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image62.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> 
       <p><a id="FQDN"></a></p> 
       <h3 id="configuring-iis-express-to-use-a-fully-qualified-domain-name">Configuring IIS Express to use a Fully Qualified Domain Name</h3> 
       <p>Some external authentication providers do not support testing your application by using an HTTP address like <code>http://localhost:port/</code>. To work around this issue, you can add a static Fully Qualified Domain Name (FQDN) mapping to your HOSTS file and configure your project options in Visual Studio 2013 to use the FQDN for testing/debugging. To do so, use the following steps:</p> 
       <ul> 
        <li><p>Add a static FQDN mapping your HOSTS file:</p> 
         <ol> 
          <li>Open an elevated command prompt in Windows.</li> 
          <li><p>Type the following command:</p> <p> <kbd>notepad %WinDir%\system32\drivers\etc\hosts</kbd></p> </li> 
          <li><p>Add an entry like the following to the HOSTS file:</p> <p> <kbd>127.0.0.1 www.wingtiptoys.com</kbd></p> </li> 
          <li>Save and close your HOSTS file.</li> 
         </ol> </li> 
        <li><p>Configure your Visual Studio project to use the FQDN:</p> 
         <ol> 
          <li>When your project is open in Visual Studio 2013, click the <strong>Project</strong> menu, and then select your project's properties. For example, you might select <strong>WebApplication1 Properties</strong>.</li> 
          <li>Select the <strong>Web</strong> tab.</li> 
          <li>Enter your FQDN for the <strong>Project Url</strong>. For example, you would enter <kbd><a href="http://www.wingtiptoys.com" data-linktype="external">http://www.wingtiptoys.com</a></kbd> if that was the FQDN mapping that you added to your HOSTS file.</li> 
         </ol> </li> 
        <li><p>Configure IIS Express to use the FQDN for your application:</p> 
         <ol> 
          <li>Open an elevated command prompt in Windows.</li> 
          <li><p>Type the following command to change to your IIS Express folder:</p> <p> <kbd>cd /d "%ProgramFiles%\IIS Express"</kbd></p> </li> 
          <li><p>Type the following command to add the FQDN to your application:</p> <p> <kbd>appcmd.exe set config -section:system.applicationHost/sites /+"[name='WebApplication1'].bindings.[protocol='http',bindingInformation='*:80:www.wingtiptoys.com']" /commit:apphost</kbd></p> </li> 
         </ol> <p>Where <strong>WebApplication1</strong> is the name of your project and <strong>bindingInformation</strong> contains the port number and FQDN that you want to use for your testing.</p> </li> 
       </ul> 
       <p><a id="OBTAIN"></a></p> 
       <h3 id="how-to-obtain-your-application-settings-for-microsoft-authentication">How to Obtain your Application Settings for Microsoft Authentication</h3> 
       <p>Linking an application to Windows Live for Microsoft Authentication is a simple process. If you have not already linked an application to Windows Live, you can use the following steps:</p> 
       <ol> 
        <li><p>Browse to <a href="https://go.microsoft.com/fwlink/?LinkID=144070" data-linktype="external">https://go.microsoft.com/fwlink/?LinkID=144070</a> and enter your Microsoft account name and password when prompted, then click <strong>Sign in</strong>:</p> <p> <a href="external-authentication-services/_static/image63.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image64.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>Enter the name and language of your application when prompted, and then click <strong>I accept</strong>:</p> <p> <a href="external-authentication-services/_static/image65.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image66.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
        <li><p>On the <strong>API Settings</strong> page for your application, enter the redirect domain for your application and copy the <strong>Client ID</strong> and <strong>Client secret</strong> for your project, and then click <strong>Save</strong>:</p> <p> <a href="external-authentication-services/_static/image67.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image68.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> </li> 
       </ol> 
       <p><a id="DISABLE"></a></p> 
       <h3 id="optional-disable-local-registration">Optional: Disable Local Registration</h3> 
       <p>The current ASP.NET local registration functionality does not prevent automated programs (bots) from creating member accounts; for example, by using a bot-prevention and validation technology like <a href="../../../web-pages/overview/security/16-adding-security-and-membership" data-linktype="relative-path">CAPTCHA</a>. Because of this, you should remove the local login form and registration link on the login page. To do so, open the <em>_Login.cshtml</em> page in your project, and then comment out the lines for the local login panel and the registration link. The resulting page should like like the following code sample:</p> 
       <pre><code class="lang-html" data-src="https://github.com/aspnet/Docs/blob/live/aspnet/web-api/overview/security/external-authentication-services/samples/sample10.html" name="Main">&lt;!-- ko with: login --&gt;
&lt;hgroup class="title"&gt;
    &lt;h1&gt;Log in&lt;/h1&gt;
&lt;/hgroup&gt;
&lt;div class="row-fluid"&gt;
    @*&lt;section class="span7"&gt;
        &lt;form&gt;
            &lt;fieldset class="form-horizontal"&gt;
                &lt;legend&gt;Use a local account to log in.&lt;/legend&gt;
                &lt;ul class="text-error" data-bind="foreach: errors"&gt;
                    &lt;li data-bind="text: $data"&gt;&lt;/li&gt;
                &lt;/ul&gt;
                &lt;div class="control-group"&gt;
                    &lt;label for="UserName" class="control-label"&gt;User name&lt;/label&gt;
                    &lt;div class="controls"&gt;
                        &lt;input type="text" name="UserName" data-bind="value: userName, hasFocus: true" /&gt;
                        &lt;span class="text-error" data-bind="visible: userName.hasError, text: userName.errorMessage"&gt;&lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class="control-group"&gt;
                    &lt;label for="Password" class="control-label"&gt;Password&lt;/label&gt;
                    &lt;div class="controls"&gt;
                        &lt;input type="password" name="Password" data-bind="value: password" /&gt;
                        &lt;span class="text-error" data-bind="visible: password.hasError, text: password.errorMessage"&gt;&lt;/span&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class="control-group"&gt;
                    &lt;div class="controls"&gt;
                        &lt;label class="checkbox"&gt;
                            &lt;input type="checkbox" name="RememberMe" data-bind="checked: rememberMe" /&gt;
                            &lt;label for="RememberMe"&gt;Remember me?&lt;/label&gt;
                        &lt;/label&gt;
                    &lt;/div&gt;
                &lt;/div&gt;
                &lt;div class="form-actions no-color"&gt;
                    &lt;button type="submit" class="btn" data-bind="click: login, disable: loggingIn"&gt;Log in&lt;/button&gt;
                &lt;/div&gt;
                &lt;p&gt;&lt;a href="#" data-bind="click: register"&gt;Register&lt;/a&gt; if you don't have a local account.&lt;/p&gt;
            &lt;/fieldset&gt;
        &lt;/form&gt;
    &lt;/section&gt;*@
    &lt;section class="span5"&gt;
        &lt;h2&gt;Log in using another service&lt;/h2&gt;
        &lt;div data-bind="visible: loadingExternalLogin"&gt;Loading...&lt;/div&gt;
        &lt;div data-bind="visible: !loadingExternalLogin()"&gt;
            &lt;div class="message-info" data-bind="visible: !hasExternalLogin()"&gt;
                &lt;p&gt;
                    There are no external authentication services configured. See &lt;a href="http://go.microsoft.com/fwlink/?LinkId=252166"&gt;this article&lt;/a&gt;
                    for details on setting up this ASP.NET application to support logging in via external services.
                &lt;/p&gt;
            &lt;/div&gt;
            &lt;form data-bind="visible: hasExternalLogin"&gt;
                &lt;fieldset class="form-horizontal"&gt;
                    &lt;legend&gt;Use another service to log in.&lt;/legend&gt;
                    &lt;p data-bind="foreach: externalLoginProviders"&gt;
                        &lt;button type="submit" class="btn" data-bind="text: name, attr: { title: 'Log in using your ' + name() + ' account' }, click: login"&gt;&lt;/button&gt;
                    &lt;/p&gt;
                &lt;/fieldset&gt;
            &lt;/form&gt;
        &lt;/div&gt;
    &lt;/section&gt;
&lt;/div&gt;
&lt;!-- /ko --&gt;
</code></pre>
       <p>Once the local login panel and the registration link have been disabled, your login page will only display the external authentication providers that you have enabled:</p> 
       <p><a href="external-authentication-services/_static/image69.png" data-linktype="relative-path"><img src="external-authentication-services/_static/image70.png" alt="" title="Click to Expand the Image" data-linktype="relative-path"></a></p> 
      </div>
     </div> 
     <div id="comments-container" ms.cmpgrp="comments" data-bi-name="comments" role="form"></div> 
    </div> 
   </main> 
   <div class="pageActions"> 
    <div id="page-actions" ms.cmpgrp="pageactions" data-bi-name="pageactions" role="complementary"> 
     <div id="page-actions-content"> 
      <ul class="action-list"> 
       <li> <a href="#comments-container" id="comments-link" ms.cmpnm="comments" data-bi-name="comments"> <i class="icon icon-comments"></i>Comments </a> </li> 
       <li id="contenteditbtn"> <a href="https://github.com/aspnet/Docs/blob/master/aspnet/web-api/overview/security/external-authentication-services.md" title="Edit This Document" ms.cmpnm="edit" data-bi-name="edit"> <i class="icon icon-editor"></i>Edit </a> </li> 
       <li> <a href="#" class="sharebutton" title="Share This Document" ms.cmpnm="share" data-bi-name="share"><i class="icon icon-share"></i>Share</a> 
        <div class="share-container"> 
         <div>
          <a href="" class="share-twitter" ms.cmpnm="twitter" data-bi-name="twitter"><i class="icon icon-twitter"></i>Twitter</a>
         </div> 
         <div>
          <a href="" class="share-linkedin" ms.cmpnm="share-linkedin" data-bi-name="linkedin"><i class="icon icon-linkedin"></i>LinkedIn</a>
         </div> 
         <div>
          <a href="" class="share-facebook" ms.cmpnm="facebook" data-bi-name="facebook"><i class="icon icon-facebook"></i>Facebook</a>
         </div> 
         <div>
          <a href="" class="share-email" ms.cmpnm="email" data-bi-name="email"><i class="icon icon-email"></i>Email</a>
         </div> 
        </div> </li> 
       <li class="typeSep">|</li> 
       <li> <label for="theme-selector">Theme</label> <select id="theme-selector" data-bi-name="select-theme"> <option value="" class="removedOnload"></option> <option value="">Light</option> <option value="theme_night">Dark</option> </select> </li> 
      </ul> 
      <nav id="side-doc-outline" class="doc-outline" ms.cmpnm="intopic toc" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation"> 
       <h3>In this article</h3> 
      </nav> 
     </div> 
    </div> 
   </div> 
   <ul class="breadcrumbs" ms.cmpgrp="breadcrumb" data-bi-name="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList" role="navigation" aria-label="Breadcrumb">
    <li></li>
   </ul> 
   <div class="sidebar" id="sidebar" ms.cmpgrp="left toc" data-bi-name="left toc" role="navigation" aria-label="Main Navigation" lang="en-us" dir="ltr"> 
    <div id="sidebarContent"> 
     <div class="filterHolder"> 
     </div> 
     <nav class="toc"></nav> 
     <div class="pdfDownloadHolder"></div> 
    </div> 
    <div class="tocSpace"></div> 
   </div> 
   <div id="menu-nav" class="dropdown-container" lang="en-us" dir="ltr"> 
    <div class="dropdown dropdown-full mobilenavi"> 
     <select> </select> 
    </div> 
   </div> 
  </div> 
  <div id="openFeedbackContainer" class="openfeedback-container footer-layout"></div> 
  <div class="container footerContainer"> 
   <footer id="footer" ms.pgarea="footer" data-bi-name="footer" class="footer-layout"> 
    <div class="container" role="contentinfo"> 
     <a data-mscc-ic="false" id="locale-selector-link" href="#" data-bi-name="select-locale" ms.cmpnm="select-locale"></a> 
     <ul class="links" ms.cmpgrp="footerlinks" data-bi-name="footerlinks"> 
      <li><a data-mscc-ic="false" href="https://docs.microsoft.com/teamblog" ms.cmpnm="bloglink" data-bi-name="bloglink">Blog</a></li> 
      <li><a data-mscc-ic="false" href="//privacy.microsoft.com/en-us/" ms.cmpnm="privacy" data-bi-name="privacy">Privacy &amp; Cookies</a></li> 
      <li><a data-mscc-ic="false" href="/en-us/legal/termsofuse" ms.cmpnm="termsofuse" data-bi-name="termsofuse">Terms of Use</a></li> 
      <li><a data-mscc-ic="false" href="//aka.ms/sitefeedback" ms.cmpnm="feedback" data-bi-name="feedback">Feedback</a></li> 
      <li id="impressum-section" hidden><a data-mscc-ic="false" id="impressum-link" href="#" ms.cmpnm="impressum" data-bi-name="impressum">Impressum</a></li> 
      <li><a data-mscc-ic="false" href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" ms.cmpnm="trademarks" data-bi-name="trademarks">Trademarks</a></li> 
     </ul> 
    </div> 
   </footer> 
  </div> 
  <script src="/_themes/docs.theme/master/en-us/_themes/javascript/870b0825531b1b071dff.conceptual.js"></script>  
 </body>
</html>