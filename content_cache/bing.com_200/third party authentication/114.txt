<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html lang="en-US" xml:lang="en-US">
 <head> 
  <meta http-equiv="content-type" content="text/html; charset=UTF-8"> 
  <meta name="Language" content="en-US"> 
  <meta name="ROBOTS" content="INDEX,FOLLOW"> 
  <title>Java 8 release changes</title> 
  <meta name="description" content="Highlights Java 8 release changes"> 
  <meta name="keywords" content="jre changes, updates, java 8 release notes"> 
  <meta name="date" content="2017-07-25"> 
  <meta name="oracle:JRE" content="8.0"> 
  <meta name="oracle:articleType" content="faq"> 
  <link rel="stylesheet" media="all" type="text/css" href="/ga/css/oldcss.css"> 
  <script type="text/javascript" src="/ga/js/popUp.js"></script> 
  <link rel="stylesheet" href="/ga/css/screen.css" type="text/css" media="screen" charset="utf-8"> 
  <link rel="stylesheet" href="/ga/css/print.css" type="text/css" media="print" charset="utf-8"> 
  <script async type="text/javascript" src="//consent.truste.com/notice?domain=oracle.com&amp;c=teconsent&amp;text=true&amp;language=en" crossorigin></script> 
  <style type="text/css">
  		#teconsent a {
  			text-decoration: underline;
  		}
  
  		#teconsent a:hover {
  			text-decoration: none;
  		}
	</style> 
 </head> 
 <body> 
  <a name="top"></a> 
  <!-- BEGIN: jWidget_C/Header/Display --> 
  <div class="jvh0"> 
   <a class="jvl0" href="/en/" title="java.com">Java.com</a> 
   <p> <a href="/inc/BrowserRedirect1.jsp?locale=en">Download</a> <a href="/en/download/help/">Help</a> </p> 
   <form name="searchForm" method="get" action="https://www.oracle.com/search/results" accept-charset="utf-8" class="jvs0 jv0sv0" onsubmit="if((document.searchForm.Ntt.value == document.searchForm.Ntt.defaultValue) || (document.searchForm.Ntt.value == '')){return false;}"> 
    <input type="hidden" name="cat" value="javacom"> 
    <input type="hidden" name="Ntk" value="SI-ALL5"> 
    <input type="hidden" name="lang" value="en"> 
    <input class="bodytext" maxlength="55" name="Ntt" onfocus="if( this.value==this.defaultValue ) this.value='';" onblur="if( this.value=='' ) this.value=this.defaultValue;" size="20" title="Search" type="text" value="Search"> 
    <input alt="Search" id="searchbtn" name="submit" src="/ga/images/jv0_search_btn.gif" type="image"> 
   </form> 
  </div> 
  <!-- END: jWidget_C/Header/Display --> 
  <div class="jvc0 jvc0v0 clearfix"> 
   <div class="jvc0w1 clearfix"> 
    <div style="float: right;"> 
     <a title="Printable Version" href="?printFriendly=true" target="printFriendlyView" onclick="openPopup('','printFriendlyView',800,650,'no',1,1,0,0,0,0); return true;"> <img src="/ga/im/printer.png" width="15" height="14" alt="Printable Version" class="pfv"> </a> 
    </div> 
    <div class="jvc0w2"> 
     <h3><b>Java 8 Release Highlights </b></h3> 
     <hr> This article applies to: 
     <ul> 
      <li><b>Java version(s): </b>8.0 </li> 
     </ul> 
     <hr> 
     <span class="bodytext"> <p> This page highlights changes impacting end users for each Java release. More information about changes can be found in the release notes for each release. <br> » <a href="/en/download/faq/release_dates.xml">Java release dates</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 144 (8u144)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li><strong>IANA Data 2017b</strong><br> JDK 8u144 contains IANA time zone data version 2017b. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. </li> 
       <li><strong>Bug Fix:</strong> java.util.zip.ZipFile.getEntry() now always returns the ZipEntry instance with a / ended entry name for directory entry<br> <code>java.util.zip.ZipEntry</code> API doc specifies <strong>'A directory entry is defined to be one whose name ends with a <code>/</code></strong><code>'</code>. However, in previous JDK releases, <code>java.util.zip.ZipFile.getEntry(String <strong>entryName</strong>)</code> may return a <code>ZipEntry</code> instance with an entry name that does not end with <code>/</code> for an existing zip directory entry when the passed in argument <strong><code>entryName</code></strong> does not end with a <code><strong>/</strong></code> and there is a matching zip directory entry with name <strong>entryName + </strong><code><strong>/</strong></code> in the zip file. With this release, the name of the <code>ZipEntry</code> instance returned from <code>java.util.zip.ZipFile.getEntry()</code> always ends with <strong><code>/</code></strong> for any zip directory entry.<br>To revert to the previous behavior, set the system property <code>jdk.util.zip.ensureTrailingSlash</code> to 'false'.<br> <br> This change was made in order to fix a regression introduced in JDK 8u141 when verifying signed JARs and has caused some WebStart applications to fail to load. <br>See <a href="http://bugs.openjdk.java.net/browse/JDK-8184993">JDK-8184993</a> </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u144 is October 17, 2017. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u144) on November 17, 2017. After either condition is met (new release becoming available or expiration date reached), the JRE will provide additional warnings and reminders to users to update to the newer version.</p> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities described in the <a href="http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html">Oracle Java SE Critical Patch Update Advisory</a>. For a more complete list of the bug fixes included in this release, see the <a href="http://www.oracle.com/technetwork/java/javase/2col/8u144-bugfixes-3839149.html">JDK 8u144 Bug Fixes</a> page.</p> <p>» <a href="http://www.oracle.com/technetwork/java/javase/8u144-relnotes-3838694.html">8u144 Release notes</a></p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 141 (8u141)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li><strong>IANA Data 2017b</strong><br> JDK 8u141 contains IANA time zone data version 2017b. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. </li> 
       <li><strong>Certificate Changes:</strong> New Let's Encrypt certificates added to root CAs<br> One new root certificate has been added:<br> 
        <codeblock>
         <code>ISRG Root X1 <br> alias: letsencryptisrgx1 <br> DN: CN=ISRG Root X1, O=Internet Security Research Group, C=US </code>
        </codeblock><br>JDK-8177539 (not public) </li> 
       <li><strong>JMX Diagnostic improvements</strong><br> <code>com.sun.management.HotSpotDiagnostic::dumpHeap</code> API is modified to throw <code>IllegalArgumentException</code> if the supplied file name does not end with “<code>.hprof</code>” suffix. Existing applications which do not provide a file name ending with the “<code>.hprof</code>” extension will fail with <code>IllegalArgumentException</code>. In that case, applications can either choose to handle the exception or restore old behavior by setting system property '<code>jdk.management.heapdump.allowAnyFileSuffix</code>' to true.<br>JDK-8176055 (not public) </li> 
       <li><strong>Tighter secure checks on processing WSDL files by wsimport tool</strong><br>The wsimport tool has been changed to disallow DTDs in Web Service descriptions, specifically:<br>
        <ul>
         <li>DOCTYPE declaration is disallowed in documents</li>
         <li>External general entities are not included by default</li>
         <li>External parameter entities are not included by default</li> 
         <li>External DTDs are completely ignored</li>
        </ul>To restore the previous behavior:<br>
        <ul>
         <li>Set the System property <code>com.sun.xml.internal.ws.disableXmlSecurity</code> to true</li>
         <li>Use the wsimport tool command line option <code>–disableXmlSecurity</code><br>NOTE: JDK 7 and JDK 6 support for this option in wsimport will be provided via a Patch release post July CPU</li>
        </ul>JDK-8182054 (not public)</li> 
       <li><strong>Custom HostnameVerifier enables SNI extension</strong><br> Earlier releases of JDK 8 Updates didn't always send the Server Name Indication (SNI) extension in the TLS ClientHello phase if a custom hostname verifier was used. This verifier is set via the <code>setHostnameVerifier(HostnameVerifier v)</code> method in <code>HttpsURLConnection</code>. The fix ensures the Server Name is now sent in the ClientHello body.<br>See <a href="http://bugs.openjdk.java.net/browse/JDK-8144566">JDK-8144566</a> </li> 
       <li><strong>Improved algorithm constraints checking</strong><br> With the need to restrict weak algorithms usage in situations where they are most vulnerable, additional features have been added when configuring the <code>jdk.certpath.disabledAlgorithms</code> and <code>jdk.jar.disabledAlgorithms</code> security properties in the <code>java.security</code> file.<p><code>jdk.certpath.disabledAlgorithms</code>: The certpath property has seen the most change. Previously it was limited to two Constraint types; either a full disabling of an algorithm by name or a full disabling of an algorithm by the key size when checking certificates, certificate chains, and certificate signatures. This creates configurations that are absolute and lack flexibility in their usage. Three new Constraints were added to give more flexibility in allowing and rejecting certificates.</p> <p>"jdkCA" examines the certificate chain termination with regard to the <code>cacerts</code> file. In the case of "SHA1 jdkCA". SHA1's usage is checked through the certificate chain, but the chain must terminate at a marked trust anchor in the cacerts keystore to be rejected. This is useful for organizations that have their own private CA that trust using SHA1 with their trust anchor, but want to block certificate chains anchored by a public CA from using SHA1.</p> <p>"denyAfter" checks if the given date is before the current date or the PKIXParameter date. In the case of "SHA1 denyAfter 2018-01-01", before 2018 a certificate with SHA1 can be used, but after that date, the certificate is rejected. This can be used for a policy across an organization that is phasing out an algorithm with a drop-dead date. For signed JAR files, the date is compared against the TSA timestamp. The date is specified in GMT.</p> <p>"usage" examines the specified algorithm for a specified usage. This can be used when disabling an algorithm for all usages is not practical. There are three usages that can be specified:</p> 
        <ul> 
         <li>'TLSServer' restricts the algorithm in TLS server certificate chains when server authentication is performed as a client.</li> 
         <li>'TLSClient' restricts the algorithm in TLS client certificate chains when client authentication is performed as a server.</li> 
         <li>'SignedJAR' restricts the algorithms in certificates in signed JAR files. The usage type follows the keyword and more than one usage type can be specified with a whitespace delimiter.<br> For example, "SHA1 usage TLSServer TLSClient" would disallow SHA1 certificates for TLSServer and TLSClient operations, but SignedJars would be allowed</li> 
        </ul> <p>All of these constraints can be combined to constrain an algorithm when delimited by '&amp;'. For example, to disable SHA1 certificate chains that terminate at marked trust anchors only for TLSServer operations, the constraint would be "SHA1 jdkCA &amp; usage TLSServer".</p> <p><code>jdk.jar.disabledAlgorithms</code>: One additional constraint was added to this <code>.jar</code> property to restrict JAR manifest algorithms.</p> <p>"denyAfter" checks algorithm constraints on manifest digest algorithms inside a signed JAR file. The date given in the constraint is compared against the TSA timestamp on the signed JAR file. If there is no timestamp or the timestamp is on or after the specified date, the signed JAR file is treated as unsigned. If the timestamp is before the specified date, the <code>.jar</code> will operate as a signed JAR file. The syntax for restricting SHA1 in JAR files signed after January 1st 2018 is: "SHA1 denyAfter 2018-01-01". The syntax is the same as that for the certpath property, however certificate checking will not be performed by this property.<br> See <a href="http://bugs.openjdk.java.net/browse/JDK-8176536">JDK-8176536</a></p> </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u141 is October 17, 2017. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u141) on November 17, 2017. After either condition is met (new release becoming available or expiration date reached), the JRE will provide additional warnings and reminders to users to update to the newer version.</p> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities described in the <a href="http://www.oracle.com/technetwork/security-advisory/cpujul2017-3236622.html">Oracle Java SE Critical Patch Update Advisory</a>. For a more complete list of the bug fixes included in this release, see the <a href="http://www.oracle.com/technetwork/java/javase/2col/8u141-bugfixes-3720387.html">JDK 8u141 Bug Fixes</a> page.</p> <p>» <a href="http://www.oracle.com/technetwork/java/javase/8u141-relnotes-3720385.html">8u141 Release notes</a></p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 131 (8u131)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li><strong>IANA Data 2016j</strong><br> JDK 8u131 contains IANA time zone data version 2016j. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. </li> 
       <li><strong>Bug Fix:</strong> Introduce new window ordering model<br> On the OS X platform, the AWT framework used native services to implement parent-child relationship for windows. That caused some negative visual effects especially in multi-monitor environments. To get rid of the disadvantages of such an approach, the new window ordering model, which is fully implemented at the JDK layer, was introduced. Its main principles are listed below: 
        <ul> 
         <li>A window should be placed above its nearest parent window.</li> 
         <li>If a window has several child windows, all child windows should be located at the same layer and the window from the active window chain should be ordered above its siblings.</li> 
         <li>Ordering should not be performed for a window which is in an iconified state or when the transition to an iconified state is in progress.</li>
        </ul> These rules are applied to every frame or dialog from the window hierarchy that contains the currently focused window. See <a href="http://bugs.openjdk.java.net/browse/JDK-8169589">JDK-8169589</a> </li> 
       <li><strong>Bug Fix:</strong> Correction of IllegalArgumentException from TLS handshake<br> A recent issue from the JDK-8173783 fix can cause issue for some TLS servers. The problem originates from an IllegalArgumentException thrown by the TLS handshaker code:<br><br><code>java.lang.IllegalArgumentException: System property <br>jdk.tls.namedGroups(null) contains no supported elliptic curves</code><br> <br>The issue can arise when the server doesn't have elliptic curve cryptography support to handle an elliptic curve name extension field (if present). Users are advised to upgrade to this release. By default, JDK 7 Updates and later JDK families ship with the SunEC security provider which provides elliptic curve cryptography support. Those releases should not be impacted unless security providers are modified. See <a href="http://bugs.openjdk.java.net/browse/JDK-8173783">JDK-8173783</a> </li> 
       <li><strong>MD5 added to jdk.jar.disabledAlgorithms Security property</strong> <br> This JDK release introduces a new restriction on how MD5 signed JAR files are verified. If the signed JAR file uses MD5, signature verification operations will ignore the signature and treat the JAR as if it were unsigned. This can potentially occur in the following types of applications that use signed JAR files: <br> 
        <ul>
         <li>Applets or Web Start Applications</li> 
         <li>Standalone or Server Applications run with a SecurityManager enabled and that are configured with a policy file that grants permissions based on the code signer(s) of the JAR.</li> 
        </ul> <br> The list of disabled algorithms is controlled via the security property, <code>jdk.jar.disabledAlgorithms</code>, in the <code>java.security</code> file. This property contains a list of disabled algorithms and key sizes for cryptographically signed JAR files.<br><br>To check if a weak algorithm or key was used to sign a JAR file, one can use the jarsigner binary that ships with this JDK. Running "<code>jarsigner -verify</code>" on a JAR file signed with a weak algorithm or key will print more information about the disabled algorithm or key. <br><br>For example, to check a JAR file named <code>test.jar</code>, use the following command: <br><br> <code>jarsigner -verify test.jar</code> <br><br> If the file in this example was signed with a weak signature algorithm like MD5withRSA, the following output would be displayed: <br><br> <code>The jar will be treated as unsigned, because it is signed with a weak algorithm that is now disabled. Re-run jarsigner with the -verbose option for more details.</code> <br><br> More details can be displayed by using the verbose option: <br><br> <code>jarsigner -verify -verbose test.jar</code> <br><br> The following output would be displayed: <br> <pre style="display:block;white-space:pre;">
- Signed by "CN=weak_signer"
    Digest algorithm: MD5 (weak)
    Signature algorithm: MD5withRSA (weak), 512-bit key (weak)
  Timestamped by "CN=strong_tsa" on Mon Sep 26 08:59:39 CST 2016
    Timestamp digest algorithm: SHA-256
    Timestamp signature algorithm: SHA256withRSA, 2048-bit key
</pre> To address the issue, the JAR file will need to be re-signed with a stronger algorithm or key size. Alternatively, the restrictions can be reverted by removing the applicable weak algorithms or key sizes from the <code>jdk.jar.disabledAlgorithms</code> security property; however, this option is not recommended. Before re-signing affected JARs, the existing signature(s) should be removed from the JAR file. This can be done with the zip utility, as follows: <br><br> <code>zip -d test.jar 'META-INF/.SF' 'META-INF/.RSA' 'META-INF/*.DSA'</code> <br><br> Please periodically check the Oracle JRE and JDK Cryptographic Roadmap at <a href="http://java.com/cryptoroadmap">http://java.com/cryptoroadmap</a> for planned restrictions to signed JARs and other security components. JDK-8171121 (not public) </li> 
       <li><strong>New system property to control caching for HTTP SPNEGO connection.</strong><br> A new JDK implementation specific system property to control caching for HTTP SPNEGO (Negotiate/Kerberos) connections is introduced. Caching for HTTP SPNEGO connections remains enabled by default, so if the property is not explicitly specified, there will be no behavior change. When connecting to an HTTP server which uses SPNEGO to negotiate authentication, and when connection and authentication with the server is successful, the authentication information will then be cached and reused for further connections to the same server. In addition, connecting to an HTTP server using SPNEGO usually involves keeping the underlying connection alive and reusing it for further requests to the same server. In some applications, it may be desirable to disable all caching for the HTTP SPNEGO (Negotiate/Kerberos) protocol in order to force requesting new authentication with each new requests to the server.<br><br> With this change, we now provide a new system property that allows control of the caching policy for HTTP SPNEGO connections. If <code>jdk.spnego.cache</code> is defined and evaluates to false, then all caching will be disabled for HTTP SPNEGO connections. Setting this system property to false may, however, result in undesirable side effects: 
        <ul> 
         <li>Performance of HTTP SPNEGO connections may be severely impacted as the connection will need to be re-authenticated with each new request, requiring several communication exchanges with the server.</li> 
         <li>Credentials will need to be obtained again for each new requests, which, depending on whether transparent authentication is available or not, and depending on the global Authenticator implementation, may result in a popup asking the user for credentials for every new request.</li> 
        </ul> JDK-8170814 (not public) </li> 
       <li><strong>New system property to control caching for HTTP NTLM connection.</strong><br> A new JDK implementation specific system property to control caching for HTTP NTLM connection is introduced. Caching for HTTP NTLM connection remains enabled by default, so if the property is not explicitly specified, there will be no behavior change. On some platforms, the HTTP NTLM implementation in the JDK can support transparent authentication, where the system user credentials are used at system level. When transparent authentication is not available or unsuccessful, the JDK only supports getting credentials from a global authenticator. If connection to the server is successful, the authentication information will then be cached and reused for further connections to the same server. In addition, connecting to an HTTP NTLM server usually involves keeping the underlying connection alive and reusing it for further requests to the same server. In some applications, it may be desirable to disable all caching for the HTTP NTLM protocol in order to force requesting new authentication with each new requests to the server. <br><br> With this change, we now provide a new system property that allows control of the caching policy for HTTP NTLM connections. If <code>jdk.ntlm.cache</code> is defined and evaluates to false, then all caching will be disabled for HTTP NTLM connections. Setting this system property to false may, however, result in undesirable side effects: 
        <ul> 
         <li>Performance of HTTP NTLM connections may be severely impacted as the connection will need to be re-authenticated with each new request, requiring several communication exchanges with the server.</li> 
         <li>Credentials will need to be obtained again for each new requests, which, depending on whether transparent authentication is available or not, and depending on the global Authenticator implementation, may result in a popup asking the user for credentials for every new request.</li> 
        </ul> JDK-8163520 (not public) </li> 
       <li><strong>New version of VisualVM</strong><br>VisualVM 1.3.9 was released on October 4th, 2016 <a href="http://visualvm.github.io/relnotes.html">http://visualvm.github.io/relnotes.html</a> and has been integrated into 8u131. See <a href="http://bugs.openjdk.java.net/browse/JDK-8167485">JDK-8167485</a> </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u131 is July 18, 2017. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u131) on August 18, 2017. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/security-advisory/cpuapr2017-3236618.html">Oracle Java SE Critical Patch Update Advisory</a>. For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u131-bugfixes-3565760.html">JDK 8u131 Bug Fixes</a> page.</p> <p>» <a href="http://www.oracle.com/technetwork/java/javase/8u131-relnotes-3565278.html">8u131 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 121 (8u121)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li><strong>IANA Data 2016i</strong><br> JDK 8u121 contains IANA time zone data version 2016i. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. </li> 
       <li><strong>Bug Fix:</strong> Trackpad scrolling of text on OS X 10.12 Sierra is very fast<br> The <code>MouseWheelEvent.getWheelRotation()</code> method returned rounded native NSEvent deltaX/Y events on Mac OS X. The latest macOS Sierra 10.12 produces very small NSEvent deltaX/Y values so rounding and summing them leads to the huge value returned from the <code>MouseWheelEvent.getWheelRotation()</code>. The JDK-8166591 fix accumulates NSEvent deltaX/Y and the <code>MouseWheelEvent.getWheelRotation()</code> method returns non-zero values only when the accumulated value exceeds a threshold and zero value. This is compliant with the <a href="https://docs.oracle.com/javase/8/docs/api/java/awt/event/MouseWheelEvent.html#getWheelRotation"><code>MouseWheelEvent.getWheelRotation()</code> specification</a>: "Returns the number of 'clicks' the mouse wheel was rotated, as an integer. A partial rotation may occur if the mouse supports a high-resolution wheel. In this case, the method returns zero until a full 'click' has been accumulated." For the precise wheel rotation values, use the <code>MouseWheelEvent.getPreciseWheelRotation()</code> method instead. See <a href="http://bugs.openjdk.java.net/browse/JDK-8166591">JDK-8166591</a></li> 
       <li><strong>Improve the default strength of EC in JDK</strong><br> To improve the default strength of EC cryptography, EC keys less than 224 bits have been deactivated in certification path processing (via the <code>jdk.certpath.disabledAlgorithms</code> Security Property) and SSL/TLS connections (via the <code>jdk.tls.disabledAlgorithms</code> Security Property) in JDK. Applications can update this restriction in the Security Properties and permit smaller key sizes if really needed (for example, "EC keySize &lt; 192"). EC curves less than 256 bits are removed from the SSL/TLS implementation in JDK. The new System Property, <code>jdk.tls.namedGroups</code>, defines a list of enabled named curves for EC cipher suites in order of preference. If an application needs to customize the default enabled EC curves or the curves preference, please update the System Property accordingly. For example:<br> <pre style="display:block;white-space:pre;">
    jdk.tls.namedGroups="secp256r1, secp384r1, secp521r1"
</pre> <br>Note that the default enabled or customized EC curves follow the algorithm constraints. For example, the customized EC curves cannot re-activate the disabled EC keys defined by the Java Security Properties. See <a href="http://bugs.openjdk.java.net/browse/JDK-8148516">JDK-8148516</a></li> 
       <li><strong>New --allow-script-in-comments option for javadoc</strong><br> The javadoc tool will now reject any occurrences of JavaScript code in the javadoc documentation comments and command-line options, unless the command-line option, <code>--allow-script-in-comments</code> is specified. With the <code>--allow-script-in-comments</code> option, the javadoc tool will preserve JavaScript code in documentation comments and command-line options. An error will be given by the javadoc tool if JavaScript code is found and the command-line option is not set.<br>JDK-8138725 (not public)</li> 
       <li><strong>Increase the minimum key length to 1024 for XML Signatures</strong><br> The secure validation mode of the XML Signature implementation has been enhanced to restrict RSA and DSA keys less than 1024 bits by default as they are no longer secure enough for digital signatures. Additionally, a new security property named <code>jdk.xml.dsig.SecureValidationPolicy</code> has been added to the <code>java.security</code> file and can be used to control the different restrictions enforced when the secure validation mode is enabled. The secure validation mode is enabled either by setting the xml signature property <code>org.jcp.xml.dsig.secureValidation</code> to true with the <code>javax.xml.crypto.XMLCryptoContext.setProperty</code> method, or by running the code with a <code>SecurityManager</code>. If an XML Signature is generated or validated with a weak RSA or DSA key, an XMLSignatureException will be thrown with the message "RSA keys less than 1024 bits are forbidden when secure validation is enabled" or "DSA keys less than 1024 bits are forbidden when secure validation is enabled". <br> JDK-8140353 (not public)</li> 
       <li><strong>Restrict certificates with DSA keys less than 1024 bits</strong><br> DSA keys less than 1024 bits are not strong enough and should be restricted in certification path building and validation. Accordingly, DSA keys less than 1024 bits have been deactivated by default by adding "<code>DSA keySize &lt; 1024</code>" to the "<code>jdk.certpath.disabledAlgorithms</code>" security property. Applications can update this restriction in the security property ("<code>jdk.certpath.disabledAlgorithms</code>") and permit smaller key sizes if really needed (for example, "<code>DSA keySize &lt; 768</code>"). JDK-8139565 (not public)</li> 
       <li><strong>More checks added to DER encoding parsing code</strong><br> More checks are added to the DER encoding parsing code to catch various encoding errors. In addition, signatures which contain constructed indefinite length encoding will now lead to IOException during parsing. Note that signatures generated using JDK default providers are not affected by this change. JDK-8168714 (not public) </li> 
       <li><strong>Additional access restrictions for URLClassLoader.newInstance</strong><br> Class loaders created by the <code>java.net.URLClassLoader.newInstance</code> methods can be used to load classes from a list of given URLs. If the calling code does not have access to one or more of the URLs, and the URL artifacts that can be accessed do not contain the required class, then a <code>ClassNotFoundException</code>, or similar, will be thrown. Previously, a SecurityException would have been thrown when access to a URL was denied. If required to revert to the old behavior, this change can be disabled by setting the <code>jdk.net.URLClassPath.disableRestrictedPermissions</code> system property. JDK-8151934 (not public) </li> 
       <li><strong>A new configurable property in logging.properties java.util.logging.FileHandler.maxLocks</strong><br> A new "<code>java.util.logging.FileHandler.maxLocks</code>" configurable property is added to <code>java.util.logging.FileHandler</code>. This new logging property can be defined in the logging configuration file and makes it possible to configure the maximum number of concurrent log file locks a FileHandler can handle. The default value is 100. In a highly concurrent environment where multiple (more than 101) standalone client applications are using the JDK Logging API with FileHandler simultaneously, it may happen that the default limit of 100 is reached, resulting in a failure to acquire FileHandler file locks and causing an IO Exception to be thrown. In such a case, the new logging property can be used to increase the maximum number of locks before deploying the application. If not overridden, the default value of maxLocks (100) remains unchanged. See <code>java.util.logging.LogManager</code> and <code>java.util.logging.FileHandler</code> API documentation for more details. See <a href="http://bugs.openjdk.java.net/browse/JDK-8153955">JDK-8153955</a> </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Notes</h5> <h6 class="sub">Improved protection for JNDI remote class loading</h6> <p>Remote class loading via JNDI object factories stored in naming and directory services is disabled by default. To enable remote class loading by the RMI Registry or COS Naming service provider, set the following system property to the string "true", as appropriate:</p> <pre style="display:block;white-space:pre;">
    com.sun.jndi.rmi.object.trustURLCodebase
    com.sun.jndi.cosnaming.object.trustURLCodebase
</pre> <p>JDK-8158997 (not public)</p> <h6 class="sub">jarsigner -verbose -verify should print the algorithms used to sign the jar</h6> <p>The jarsigner tool has been enhanced to show details of the algorithms and keys used to generate a signed JAR file and will also provide an indication if any of them are considered weak. <br> <br> Specifically, when "<code>jarsigner -verify -verbose filename.jar</code>" is called, a separate section is printed out showing information of the signature and timestamp (if it exists) inside the signed JAR file, even if it is treated as unsigned for various reasons. If any algorithm or key used is considered weak, as specified in the Security property <code>jdk.jar.disabledAlgorithms</code>, it will be labeled with "(weak)".</p> <p>For example:</p> <pre style="display:block;white-space:pre;">
- Signed by "CN=weak_signer"
   Digest algorithm: MD2 (weak) 
   Signature algorithm: MD2withRSA (weak), 512-bit key (weak)
 Timestamped by "CN=strong_tsa" on Mon Sep 26 08:59:39 CST 2016
   Timestamp digest algorithm: SHA-256 
   Timestamp signature algorithm: SHA256withRSA, 2048-bit key 
</pre> <p>See <a href="http://bugs.openjdk.java.net/browse/JDK-8163304">JDK-8163304</a></p> </span> 
     <span class="bodytext"> <h5 class="sub">Known Issues</h5> <h6 class="sub">javapackager and fx:deploy bundle the whole JDK instead of JRE</h6> <p>There is a known bug in the Java Packager for Mac where the entire JDK may be bundled with the application bundle resulting in an unusually large bundle. The work around is to use the bundler option <code>-Bruntime</code> option. For example: <code>-Bruntime=JavaAppletPlugin.plugin</code> where the <code>JavaAppletPlugin.plugin</code> for the desired JRE to bundle is located in the current directory. See <a href="http://bugs.openjdk.java.net/browse/JDK-8166835">JDK-8166835</a></p> <h6 class="sub">Java Installation will fail for non-admin users with UAC off</h6> <p>The Java installation on Windows will fail without warning or prompting, for non-admin users with User Access Control (UAC) disabled. The installer will leave a directory, <code>jds&lt;<em>number</em>&gt;.tmp</code>, in the <code>%TEMP%</code> directory.<br> JDK-8161460 (not public)</p> </span> 
     <span class="bodytext"> <h5 class="sub">New Features</h5> <h6 class="sub">Added security property to configure XML Signature secure validation mode</h6> <p>A new security property named <code>jdk.xml.dsig.secureValidationPolicy</code> has been added that allows you to configure the individual restrictions that are enforced when the secure validation mode of XML Signature is enabled. The default value for this property in the <code>java.security</code> configuration file is:</p> <pre style="display:block;white-space:pre;">
jdk.xml.dsig.secureValidationPolicy=\
    disallowAlg http://www.w3.org/TR/1999/REC-xslt-19991116,\
    disallowAlg http://www.w3.org/2001/04/xmldsig-more#rsa-md5,\
    disallowAlg http://www.w3.org/2001/04/xmldsig-more#hmac-md5,\
    disallowAlg http://www.w3.org/2001/04/xmldsig-more#md5,\
    maxTransforms 5,\
    maxReferences 30,\
    disallowReferenceUriSchemes file http https,\
    noDuplicateIds,\
    noRetrievalMethodLoops
</pre> <p>Please refer to the definition of the property in the <code>java.security</code> file for more information. See <a href="http://bugs.openjdk.java.net/browse/JDK-8151893">JDK-8151893</a></p> <h6 class="sub">Serialization Filter Configuration</h6> <p> Serialization Filtering introduces a new mechanism which allows incoming streams of object-serialization data to be filtered in order to improve both security and robustness. Every ObjectInputStream applies a filter, if configured, to the stream contents during deserialization. Filters are set using either a system property or a configured security property. The value of the "jdk.serialFilter" patterns are described in <a href="http://openjdk.java.net/jeps/290">JEP 290 Serialization Filtering</a> and in &lt;<code>JRE</code>&gt;<code>/lib/security/java.security</code>. Filter actions are logged to the 'java.io.serialization' logger, if enabled. See <a href="http://bugs.openjdk.java.net/browse/JDK-8155760">JDK-8155760</a> </p> <h6 class="sub">RMI Better constraint checking</h6> <p> RMI Registry and Distributed Garbage Collection use the mechanisms of <a href="http://openjdk.java.net/jeps/290">JEP 290 Serialization Filtering</a> to improve service robustness. RMI Registry and DGC implement built-in white-list filters for the typical classes expected to be used with each service. Additional filter patterns can be configured using either a system property or a security property. The "sun.rmi.registry.registryFilter" and "sun.rmi.transport.dgcFilter" property pattern syntax is described in JEP 290 and in &lt;<code>JRE</code>&gt;<code>/lib/security/java.security</code>. JDK-8156802 (not public) </p> <h6 class="sub">Add mechanism to allow non-default root CAs to not be subject to algorithm restrictions</h6> <p> In the <code>java.security</code> file, an additional constraint named "<code>jdkCA</code>" is added to the <code>jdk.certpath.disabledAlgorithms</code> property. This constraint prohibits the specified algorithm only if the algorithm is used in a certificate chain that terminates at a marked trust anchor in the <code>lib/security/cacerts</code> keystore. If the <code>jdkCA</code> constraint is not set, then all chains using the specified algorithm are restricted. <code>jdkCA</code> may only be used once in a DisabledAlgorithm expression. Example: To apply this constraint to SHA-1 certificates, include the following: <code>SHA1 jdkCA</code><br> See <a href="http://bugs.openjdk.java.net/browse/JDK-8140422">JDK-8140422</a> </p> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u121 is April 18, 2017. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u121) on May 18, 2017. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/security-advisory/cpujan2017-2881727.html">Oracle Java SE Critical Patch Update Advisory</a>. For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u121-bugfixes-3336073.html">JDK 8u121 Bug Fixes</a> page.</p> <p>» <a href="http://www.oracle.com/technetwork/java/javase/8u121-relnotes-3315208.html">8u121 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 111 (8u111)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li><strong>IANA Data 2016f</strong><br> JDK 8u111 contains IANA time zone data version 2016f. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. See <a href="http://bugs.openjdk.java.net/browse/JDK-8159684">JDK-8159684</a>. </li> 
       <li><strong>Certificate Changes: New JCE Code Signing Root CA</strong><br> In order to support longer key lengths and stronger signature algorithms, a new JCE Provider Code Signing root certificate authority has been created and its certificate added to Oracle JDK. New JCE provider code signing certificates issued from this CA will be used to sign JCE providers from this point forward. By default, new requests for JCE provider code signing certificates will be issued from this CA.<br><br> Existing certificates from the current JCE provider code signing root will continue to validate. However, this root CA may be disabled at some point in the future. We recommend that new certificates be requested and existing provider JARs be re-signed. For details on the JCE provider signing process, please refer to the <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/security/crypto/HowToImplAProvider.html">How to Implement a Provider in the Java Cryptography Architecture</a> documentation. JDK-8141340 (not public) </li> 
       <li><strong>Service Menu services</strong><br> The lifecycle management of AWT menu components exposed problems on certain platforms. This fix improves state synchronization between menus and their containers. JDK-8158993 (not public) </li> 
       <li><strong>Disable Basic authentication for HTTPS tunneling</strong><br> In some environments, certain authentication schemes may be undesirable when proxying HTTPS. Accordingly, the Basic authentication scheme has been deactivated, by default, in the Oracle Java Runtime, by adding Basic to the <code>jdk.http.auth.tunneling.disabledSchemes</code> networking property. Now, proxies requiring <code>Basic</code> authentication when setting up a tunnel for HTTPS will no longer succeed by default. If required, this authentication scheme can be reactivated by removing <code>Basic</code> from the <code>jdk.http.auth.tunneling.disabledSchemes</code> networking property, or by setting a system property of the same name to <code>""</code> ( empty ) on the command line. Additionally, the <code>jdk.http.auth.tunneling.disabledSchemes</code> and <code>jdk.http.auth.proxying.disabledSchemes</code> networking properties, and system properties of the same name, can be used to disable other authentication schemes that may be active when setting up a tunnel for HTTPS, or proxying plain HTTP, respectively. JDK-8160838 (not public)</li> 
       <li> <strong>Restrict JARs signed with weak algorithms and keys</strong><br> This JDK release introduces new restrictions on how signed JAR files are verified. If the signed JAR file uses a disabled algorithm or key size less than the minimum length, signature verification operations will ignore the signature and treat the JAR file as if it were unsigned. This can potentially occur in the following types of applications that use signed JAR files: <br>1. Applets or Web Start Applications<br>2. Standalone or Server Applications run with a SecurityManager enabled and that are configured with a policy file that grants permissions based on the code signer(s) of the JAR. <br><br> The list of disabled algorithms is controlled via a new security property, <code>jdk.jar.disabledAlgorithms</code>, in the <code>java.security</code> file. This property contains a list of disabled algorithms and key sizes for cryptographically signed JAR files.<br><br> The following algorithms and key sizes are restricted in this release: 
        <ol> 
         <li>MD2 (in either the digest or signature algorithm)</li> 
         <li>RSA keys less than 1024 bits</li> 
        </ol> <strong>NOTE:</strong> We are planning to restrict MD5-based signatures in signed JARs in the April 2017 CPU. <br><br> To check if a weak algorithm or key was used to sign a JAR file, you can use the <code>jarsigner</code> binary that ships with this JDK. Running <code>jarsigner -verify -J-Djava.security.debug=jar</code> on a JAR file signed with a weak algorithm or key will print more information about the disabled algorithm or key. <br><br> For example, to check a JAR file named <code>test.jar</code>, use the following command:<br> <code>jarsigner -verify -J-Djava.security.debug=jar test.jar</code> <br><br> If the file in this example was signed with a weak signature algorithm like MD2withRSA, the following output would be displayed:<br> <code>jar: beginEntry META-INF/my_sig.RSA</code><br> <code>jar: processEntry: processing block</code><br> <code>jar: processEntry caught: java.security.SignatureException: Signature check failed. Disabled algorithm used: MD2withRSA</code><br> <code>jar: done with meta!</code> <br><br> The updated <code>jarsigner</code> command will exit with the following warning printed to standard output:<br> "Signature not parsable or verifiable. The jar will be treated as unsigned. The jar may have been signed with a weak algorithm that is now disabled. For more information, rerun <code>jarsigner</code> with debug enabled (<code>-J-Djava.security.debug=jar</code>)" <br><br> To address the issue, the JAR file will need to be re-signed with a stronger algorithm or key size. Alternatively, the restrictions can be reverted by removing the applicable weak algorithms or key sizes from the <code>jdk.jar.disabledAlgorithms</code> security property; however, this option is not recommended. Before re-signing affected JAR files, the existing signature(s) should be removed from the JAR. This can be done with the <code>zip</code> utility, as follows: <br><br> <code>zip -d test.jar 'META-INF/*.SF' 'META-INF/*.RSA' 'META-INF/*.DSA'</code> <br><br> Please periodically check the <em>Oracle JRE and JDK Cryptographic Roadmap</em> at <a href="/cryptoroadmap">http://java.com/cryptoroadmap</a> for planned restrictions to signed JAR files and other security components. In particular, please note the current plan is to restrict MD5-based signatures in signed JAR files in the April 2017 CPU. <br><br> To test if your JARs have been signed with MD5, add <code>MD5</code> to the <code>jdk.jar.disabledAlgorithms</code> security property, ex:<br><br> <code>jdk.jar.disabledAlgorithms=MD2, MD5, RSA keySize &lt; 1024</code> <br><br> and then run <code>jarsigner -verify -J-Djava.security.debug=jar</code> on your JAR files as described above. <br>JDK-8155973 (not public) </li> 
       <li> <strong>Warning message added to deployment authenticator dialog</strong><br> A warning has been added to the plugin authentication dialog in cases where HTTP Basic authentication (credentials are sent unencrypted) is used while using a proxy or while not using SSL/TLS protocols:<br> "WARNING: Basic authentication scheme will effectively transmit your credentials in clear text. Do you really want to do this?"<br> JDK-8161647 (not public) </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Known Issues</h5> <h6 class="sub">Some events not available in JFR recordings on Windows</h6> The following events are not available in the JFR recordings on Windows for release 8u111: 
      <ol> 
       <li><code>hotspot/jvm/os/processor/cpu_load</code></li> 
       <li><code>os/processor/context_switch_rate</code></li> 
      </ol> <p> This is due to regression JDK-8063089 that was introduced in 8u111 with the changes for JDK-8162419. The fix for JDK-8063089 could not be included in the 8u111 release. It will be available in the next 8u111 BPR build and in the next public release.<br> JDK-8063089 (not public)</p> <h6 class="sub">JVM throws NullPointerExceptions on macOS Sierra 10.12</h6><p>On macOS Sierra 10.12, if a user presses modifier keys (such as Command, Shift, or Alt) while an applet is running in a browser, an error box named "Internal Error" might be displayed. It will also show the "exec" icon in the macOS dock. The user can dismiss the applet, or try to rerun the applet while not pressing a modifier key. See <a href="https://bugs.openjdk.java.net/browse/JDK-8165867">JDK-8165867</a>.</p> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u111 is January 17, 2017. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u111) on February 17, 2017. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> </span> 
     <span class="bodytext"> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/security-advisory/cpuoct2016-2881722.html">Oracle Java SE Critical Patch Update Advisory</a>. For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u111-bugfixes-3124971.html">JDK 8u111 Bug Fixes</a> page.</p> <p>» <a href="http://www.oracle.com/technetwork/java/javase/8u111-relnotes-3124969.html">8u111 Release notes</a> </p><br> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 101 (8u101)</h4> <h5 class="sub">Release Highlights</h5> </span> 
     <span class="bodytext"> 
      <ul style="list-style-type:circle"> 
       <li><strong>IANA Data 2016d</strong><br> JDK 8u101 contains IANA time zone data version 2016d. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. See <a href="http://bugs.openjdk.java.net/browse/JDK-8151876">JDK-8151876</a>. </li> 
       <li><strong>Certificate Changes</strong><br> New DTrust certificates added to root CAs<br> Two new root certificates have been added:<br> 
        <ul>
         <li> <code> D-TRUST Root Class 3 CA 2 2009<br> alias: dtrustclass3ca2<br> DN: CN=D-TRUST Root Class 3 CA 2 2009, O=D-Trust GmbH, C=DE<br> </code> </li> 
         <li><code> D-TRUST Root Class 3 CA 2 EV 2009<br> alias: dtrustclass3ca2ev<br> DN: CN=D-TRUST Root Class 3 CA 2 EV 2009, O=D-Trust GmbH, C=DE<br> </code> </li> 
        </ul> See <a href="http://bugs.openjdk.java.net/browse/JDK-8153080">JDK-8153080</a> <br><br> New Iden certificates added to root CAs<br> Three new root certificates have been added:<br> 
        <ul>
         <li> <code> IdenTrust Public Sector Root CA 1<br> alias: identrustpublicca<br> DN: CN=IdenTrust Public Sector Root CA 1, O=IdenTrust, C=US </code> </li> 
         <li> <code> IdenTrust Commercial Root CA 1<br> alias: identrustcommercial<br> DN: CN=IdenTrust Commercial Root CA 1, O=IdenTrust, C=US </code> </li> 
         <li> <code> IdenTrust DST Root CA X3<br> alias: identrustdstx3<br> DN: CN=DST Root CA X3, O=Digital Signature Trust Co.<br> </code> </li> 
        </ul> See <a href="http://bugs.openjdk.java.net/browse/JDK-8154757">JDK-8154757</a> <br><br> Comodo Root CA removed<br> The Comodo "UTN - DATACorp SGC" root CA certificate has been removed from the cacerts file. See <a href="http://bugs.openjdk.java.net/browse/JDK-8141540">JDK-8141540</a> <br><br> Sonera Class1 CA removed<br> The "Sonera Class1 CA" root CA certificate has been removed from the cacerts file. See <a href="http://bugs.openjdk.java.net/browse/JDK-8141276">JDK-8141276</a>. </li> 
       <li><strong>Improve access control to javax.rmi.CORBA.ValueHandler</strong><br> The <code>javax.rmi.CORBA.Util</code> class provides methods that can be used by stubs and ties to perform common operations. It also acts as a factory for ValueHandlers. The <code>javax.rmi.CORBA.ValueHandler</code> interface provides services to support the reading and writing of value types to GIOP streams. The security awareness of these utilities has been enhanced with the introduction of a permission <code>java.io.SerializablePermission("enableCustomValueHanlder")</code>. This is used to establish a trust relationship between the users of the <code>javax.rmi.CORBA.Util</code> and <code>javax.rmi.CORBA.ValueHandler</code> APIs.<br><br> The required permission is <code>"enableCustomValueHanlder"</code> SerializablePermission. Third party code running with a SecurityManager installed, but not having the new permission while invoking <code>Util.createValueHandler()</code>, will fail with an AccessControlException.<br><br> This permission check behavior can be overridden, in JDK8u and previous releases, by defining a system property, <code>"jdk.rmi.CORBA.allowCustomValueHandler"</code>.<br><br> As such, external applications that explicitly call <code>javax.rmi.CORBA.Util.createValueHandler</code> require a configuration change to function when a SecurityManager is installed and neither of the following two requirements is met: 
        <ol>
         <li>The <code>java.io.SerializablePermission("enableCustomValueHanlder")</code> is not granted by SecurityManager.</li> 
         <li>In the case of applications running on JDK8u and before, the system property <code>"jdk.rmi.CORBA.allowCustomValueHandler"</code> is either not defined or is defined equal to "false" (case insensitive). </li>
        </ol> <br> Please note that the <code>"enableCustomValueHanlder"</code> typo will be corrected in the October 2016 releases. In those and future JDK releases, <code>"enableCustomValueHandler"</code> will be the correct SerializationPermission to use.<br> JDK-8079718 (not public) </li> 
       <li><strong>Support added to jarsigner for specifying timestamp hash algorithm</strong><br>A new <code>-tsadigestalg</code> option is added to <code>jarsigner</code> to specify the message digest algorithm that is used to generate the message imprint to be sent to the TSA server. In older JDK releases, the message digest algorithm used was SHA-1. If this new option is not specified, SHA-256 will be used on JDK 7 Updates and later JDK family versions. On JDK 6 Updates, SHA-1 will remain the default but a warning will be printed to the standard output stream. See <a href="http://bugs.openjdk.java.net/browse/JDK-8038837">JDK-8038837</a></li> 
       <li> <strong>MSCAPI KeyStore can handle same-named certificates</strong><br> <a href="http://docs.oracle.com/javase/8/docs/api/java/security/KeyStore.html">Java SE KeyStore</a> does not allow certificates that have the same aliases. However, on Windows, multiple certificates stored in one keystore are allowed to have non-unique friendly names. The fix for JDK-6483657 makes it possible to operate on such non-uniquely named certificates through the Java API by artificially making the visible aliases unique. Please note, this fix does not enable creating same-named certificates with the Java API. It only allows you to deal with same-named certificates that were added to the keystore by 3rd party tools. It is still recommended that your design not use multiple certificates with the same name. In particular, the following sentence will not be removed from the <a href="http://docs.oracle.com/javase/8/docs/api/java/security/KeyStore.html">Java documentation</a>:<br> "In order to avoid problems, it is recommended not to use aliases in a KeyStore that only differ in case."<br> See <a href="http://bugs.openjdk.java.net/browse/JDK-6483657">JDK-6483657</a>. </li> 
       <li><strong>Deployment Tookit API methods no longer install JRE</strong><br>The Deployment Toolkit API<code> installLatestJRE()</code> and <code>installJRE(requestedVersion)</code> methods from <code>deployJava.js</code> and the <code>install()</code> method from <code>dtjava.js</code> no longer install the JRE. If a user's version of Java is below the security baseline, it redirects the user to <code>java.com</code> to get an updated JRE. JDK-8148310 (not public)</li> 
       <li><strong>DomainCombiner will no longer consult runtime policy for static ProtectionDomain objects when combining ProtectionDomain objects</strong><br>Applications which use static ProtectionDomain objects (created using the 2-arg constructor) with an insufficient set of permissions may now get an AccessControlException with this fix. They should either replace the static ProtectionDomain objects with dynamic ones (using the 4-arg constructor) whose permission set will be expanded by the current Policy or construct the static ProtectionDomain object with all the necessary permissions. JDK-8147771 (not public)</li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Known Issues</h5> <h6 class="sub">JRE 8u101 is not recognized by Internet Explorer (IE) when using static class ID</h6> <p>When a static class id is used to launch an applet or web start application while using JRE 8u101, users will get an unwanted dialog box stating that they either use the latest JRE or cancel the launch even though they have installed and are using the latest JRE (JRE 8u101). This specific case is only applicable on Windows and IE.</p> <p>We do not recommend using static class id for JRE version selection (since JDK 5u6, December 2005) as per <a href="http://www.oracle.com/technetwork/java/javase/family-clsid-140615.html">http://www.oracle.com/technetwork/java/javase/family-clsid-140615.html</a>.</p> To workaround this issue, users can do one of the following two things: 
      <ul> 
       <li>Hit launch with the latest version (8u101) and ignore the warning.</li> 
       <li>Install JRE 8u102 instead of JRE 8u101 to avoid this issue.</li> 
      </ul> To address this issue, developers can do one of the following two things: 
      <ul> 
       <li>Use a dynamic class id instead of static class id.</li> 
       <li>Use java_version when using an HTML applet or a JNLP descriptor when using JNLP.</li> 
      </ul> JDK-8147457 (not public) <br><br> </span> 
     <span class="bodytext"> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpujul2016-2881720.html">Oracle Java SE Critical Patch Update Advisory</a>. For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u101-bugfixes-3021766.html">JDK 8u101 Bug Fixes</a> page.</p> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u101 is October 19, 2016. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u101) on November 19, 2016. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> <p>» <a href="http://www.oracle.com/technetwork/java/javase/8u101-relnotes-3021761.html">8u101 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 91 (8u91)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li>IANA Data 2016a<br> JDK 8u91 contains IANA time zone data version 2016a. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. </li> 
       <li><strong>Bug Fix:</strong> Regression in Applet startup time fixed<br> JDK-8080977 introduced delay on applet launch. The delay appears only on IE and lasts about 20 seconds. JDK-8136759 removed this delay. See <a href="https://bugs.openjdk.java.net/browse/JDK-8136759">JDK-8136759</a></li> 
       <li><strong>Bug Fix:</strong> DSA signature generation is now subject to a key strength check<br> For signature generation, if the security strength of the digest algorithm is weaker than the security strength of the key used to sign the signature (e.g. using (2048, 256)-bit DSA keys with SHA1withDSA signature), the operation will fail with the error message: "The security strength of SHA1 digest algorithm is not sufficient for this key size." JDK-8138593 (not public)</li> 
       <li><strong>Bug Fix:</strong> Firefox 42 liveconnect problem<br> Because it might cause the browser to hang, we don't process JavaScript-to-Java calls when the Java plugin is launched from <code>plugin-container.exe</code> (the default behavior for Firefox 42) and the applet status is not Ready(2). If the applet is not ready (the status is not 2), we don't execute the actual Java method and only return null.<br><br>If the plugin is launched from <code>plugin-container.exe</code>, do not use JavaScript-To-Java calls that may require more than 11 seconds(the default value of <code>dom.ipc.plugins.hangUITimeoutSecs</code>) to be completed or show a modal dialog during JavaScript-To-Java call. In this case, the main browser thread must be blocked, which might cause the browser to hang and the plugin to terminate.<br><br>Workaround for Firefox 42: Users can set <code>dom.ipc.plugins.enabled=false</code>. The side effect of this workaround is that it changes the setting for all plugins. JDK-8144079 (not public)</li> 
       <li><strong>Bug Fix:</strong> New attribute for JMX RMI JRMP servers specifies a list of class names to use when deserializing server credentials<br> A new java attribute has been defined for the environment to allow a JMX RMI JRMP server to specify a list of class names. These names correspond to the closure of class names that are expected by the server when deserializing credentials. For instance, if the expected credentials were a <pre style="display:inline;"> List&lt;string&gt;</pre>, then the closure would constitute all the concrete classes that should be expected in the serial form of a list of Strings.<br><br> By default, this attribute is used only by the default agent with the following:<br> <pre style="display:block;white-space:pre;">
 {   
   "[Ljava.lang.String;",   
   "java.lang.String" 
 } 
</pre> Only arrays of Strings and Strings will be accepted when deserializing the credentials. The attribute name is: <pre style="display:block;white-space:pre;">"jmx.remote.rmi.server.credential.types"
</pre> The following is an example of a user starting a server with the specified credentials class names: <pre style="display:block;white-space:pre;">
Map&lt;String, Object&gt; env = new HashMap&lt;&gt;(1);
 env.put ( 
 "jmx.remote.rmi.server.credential.types",
   new String[]{
   String[].class.getName(),
   String.class.getName()
   }
   );
   JMXConnectorServer server
   = JMXConnectorServerFactory.newJMXConnectorServer(url, env, mbeanServer);
</pre> The new feature should be used by directly specifying:<br> <code> "jmx.remote.rmi.server.credential.types" </code> <br><br>JDK-8144430 (not public) </li> 
       <li><strong>Bug Fix:</strong> Disable MD5withRSA signature algorithm in the JSSE provider<br> The MD5withRSA signature algorithm is now considered insecure and should no longer be used. Accordingly, MD5withRSA has been deactivated by default in the Oracle JSSE implementation by adding "MD5withRSA" to the "jdk.tls.disabledAlgorithms" security property. Now, both TLS handshake messages and X.509 certificates signed with MD5withRSA algorithm are no longer acceptable by default. This change extends the previous MD5-based certificate restriction ("jdk.certpath.disabledAlgorithms") to also include handshake messages in TLS version 1.2. If required, this algorithm can be reactivated by removing "MD5withRSA" from the "jdk.tls.disabledAlgorithms" security property. JDK-8144773 (not public)</li> 
       <li><strong>Bug Fix:</strong> New certificates added to root CAs<br> Eight new root certificates have been added : 
        <ul> 
         <li> <code>QuoVadis Root CA 1 G3<br> alias: quovadisrootca1g3<br> DN: CN=QuoVadis Root CA 1 G3, O=QuoVadis Limited, C=BM </code> </li> 
         <li> <code>QuoVadis Root CA 2 G3<br> alias: quovadisrootca2g3<br> DN: CN=QuoVadis Root CA 2 G3 </code> </li> 
         <li> <code>QuoVadis Root CA 3 G3<br> alias: quovadisrootca3g3<br> DN: CN=QuoVadis Root CA 3 G3, O=QuoVadis Limited, C=BM </code> </li> 
         <li> <code>DigiCert Assured ID Root G2<br> alias: digicertassuredidg2<br> DN: CN=DigiCert Assured ID Root G2, OU=www.digicert.com, O=DigiCert Inc, C=US </code> </li> 
         <li> <code>DigiCert Assured ID Root G3<br> alias: digicertassuredidg3<br> DN: CN=DigiCert Assured ID Root G3, OU=www.digicert.com, O=DigiCert Inc, C=US </code> </li> 
         <li> <code>DigiCert Global Root G2<br> alias: digicertglobalrootg2<br> DN: CN=DigiCert Global Root G2, OU=www.digicert.com, O=DigiCert Inc, C=US </code> </li> 
         <li> <code>DigiCert Global Root G3<br> alias: digicertglobalrootg3<br> DN: CN=DigiCert Global Root G3, OU=www.digicert.com, O=DigiCert Inc, C=US </code> </li> 
         <li> <code>DigiCert Trusted Root G4<br> alias: digicerttrustedrootg4<br> DN: CN=DigiCert Trusted Root G4, OU=www.digicert.com, O=DigiCert Inc, C=US </code> </li> 
        </ul> See <a href="https://bugs.openjdk.java.net/browse/JDK-8145954" target="">JDK-8145954</a> and <a href="https://bugs.openjdk.java.net/browse/JDK-8145955" target="">JDK-8145955</a>. </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Notes</h5> <p><strong>Removal of Static JREs</strong><br> Java installers for Windows that were released prior to version 8u91 did not remove statically installed JREs by default. In order to remove JREs that were installed statically, users had to manually select those JREs in the Java installer's user interface. Now in Java releases 8u91 and above, JREs that were installed statically will automatically be removed, if they are below the security baseline. For more information on static install, please see <a href="http://www.oracle.com/technetwork/java/javase/jre-install-137694.html">Java Runtime Environment Configuration</a>.</p> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u91 is July 19, 2016. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u91) on August 19, 2016. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> <h5 class="sub">Bug Fixes</h5> <p> This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpuapr2016-2881694.html">Oracle Java SE Critical Patch Update Advisory</a>. For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u91-bugfixes-2949464.html">JDK 8u91 Bug Fixes</a> page.</p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u91-relnotes-2949462.html">8u91 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 77 (8u77)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li>IANA Data 2016a<br> JDK 8u77 contains IANA time zone data version 2016a. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u77 is April 19, 2016. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u77) on May 19, 2016. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> <h5 class="sub">Notes</h5> <p>This Security Alert (8u77) is based off the earlier 8u74 PSU release. All users of earlier JDK 8 releases should update to this release. For more information on the difference between Critical Patch Updates and Patch Set Updates please visit <a href="http://www.oracle.com/technetwork/java/javase/cpu-psu-explained-2331472.html">Java CPU and PSU Releases Explained</a>.</p> <p>The demos, samples, and Documentation bundles for 8u77 are not impacted by the Security Alert for CVE-2016-0636, so version 8u73 demos, samples, and Documentation bundles remain the most up to-date version until the April Critical Patch Update release.</p> <h5 class="sub">Bug Fixes</h5> <p> This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/alert-cve-2016-0636-2949497.html">Oracle Java SE Critical Patch Update Advisory</a>. </p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u77-relnotes-2944725.html">8u77 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 73 (8u73)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li>IANA Data 2015g<br> JDK 8u71 contains IANA time zone data version 2015g. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u73 is April 19, 2016. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u73) on May 19, 2016. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> </span> 
     <span class="bodytext"> <h5 class="sub">Notes</h5> <p> Oracle strongly recommends that Java users who have downloaded affected versions and plan future installations with these downloaded versions discard these old downloads. Java users who have installed the January 2016 Critical Patch Update versions of Java SE 6, 7, or 8 need take no action. Java users who have not installed the January 2016 Critical Patch Update versions of Java SE 6, 7, or 8 should upgrade to the Java SE 6, 7, or 8 releases from the Security Alert for CVE-2016-0603. </p> <p> The demos, samples, and Documentation bundles for 8u73 are not impacted by the Security Alert for CVE-2016-0603, so version 8u71 demos, samples, and Documentation bundles remain the most up to-date version until the April Critical Patch Update release. </p> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/alert-cve-2016-0603-2874360.html">Oracle Java SE Critical Patch Update Advisory</a>. Note that 8u73 does not contain the PSU builds found in 8u72. Customers who require the additional bug fixes contained in 8u72 should update to 8u74 instead of 8u73. </p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u73-relnotes-2874654.html">8u73 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 71 (8u71)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li>IANA Data 2015g<br> JDK 8u71 contains IANA time zone data version 2015g. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. </li> 
       <li><strong>Bug Fix:</strong> Running jps as root does not show all information<br> After the fix of <a href="https://bugs.openjdk.java.net/browse/JDK-8050807">JDK-8050807</a> (fixed in 8u31, 7u75 and 6u91), running jps as root did not show all the information from Java processes started by other users on some systems. This has now been fixed. See <a href="https://bugs.openjdk.java.net/browse/JDK-8075773">JDK-8075773</a>.</li> 
       <li><strong>Bug Fix:</strong> Installers appearing stalled on ESC configurations<br> Users running Internet Explorer Enhance Security Configuration (ESC) on Windows Server 2008 R2 may have experienced issues installing Java in interactive mode. This issue has been resolved in the 8u71 release. Installers executed in interactive mode will no longer appear to be stalled on ESC configurations. See <a href="https://bugs.openjdk.java.net/browse/JDK-8140197">JDK-8140197</a>.</li> 
       <li><strong>Bug Fix:</strong> Problem with PBE algorithms using AES crypto corrected<br> An error was corrected for PBE using 256-bit AES ciphers such that the derived key may be different and not equivalent to keys previously derived from the same password. JDK-8138589 (not public).</li> 
       <li><strong>Bug Fix:</strong> Default limit added for XML maximum entity size<br> A default limit for maximum entity size has been added. For more about XML processing limits, please see <a href="https://docs.oracle.com/javase/tutorial/jaxp/limits/index.html">The Java Tutorials, Processing Limits</a>. JDK-8133962 (not public)</li> 
       <li><strong>Bug Fix:</strong> Problem with Enterprise MSI switch 'REMOVEOLDERJRES' documentation corrected<br> The Enterprise MSI documentation <a href="https://docs.oracle.com/javacomponents/msi-jre8/install-guide/config_msi.htm#msi_config_file_options">lists configuration options</a>. The REMOVEOLDERJRES option used to uninstall old JREs was missing. Added this option, with the description:<br>If set to 1, removes older releases of the JRE installed on the system.<br> Default: 0 does not remove any old JREs<br>JDK-8081237 (not public) </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p> The expiration date for 8u71 is April 19, 2016. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u71) on May 19, 2016. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> </span> 
     <span class="bodytext"> <h5 class="sub">Bug Fixes</h5> <p> This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpujan2016-2367955.html">Oracle Java SE Critical Patch Update Advisory</a>. </p> <p> For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u71-bugfixes-2811127.html">JDK 8u71 Bug Fixes</a> page. </p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u71-relnotes-2773756.html">8u71 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 66 (8u66)</h4> <h5 class="sub">Release Highlights</h5> <p>8u66 build 18 addresses an issue on Firefox.</p> 
      <ul style="list-style-type:circle"> 
       <li><strong>Bug Fix:</strong> <code>_releaseObject</code> called from wrong thread<br>A recent change to Firefox caused the <code>_releaseObject</code> call to be made from a thread other than the main thread. This may cause a race condition, which may inadvertently crash the browser. This has been addressed in build 18 of 8u66. For more information, see <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1221448">Bugs@Mozilla 1221448</a>. See <a href="https://bugs.openjdk.java.net/browse/JDK-8133523">JDK-8133523</a>. </li>
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java plug-in does not work in Firefox after installing Java</h5> <p>Firefox 42 may crash when trying to run the Java plug-in. <a href="/en/download/help/firefox_java.xml">Workaround options</a> are listed in the FAQ. See JDK-8142908 (not public). </p> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u66 is January 19, 2016. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u66) on February 19, 2016. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> </span> 
     <span class="bodytext"> <h5 class="sub">Bug Fixes</h5> <p> This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpuoct2015-2367953.html">Oracle Java SE Critical Patch Update Advisory</a>. </p> <p> For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u66-bugfixes-2692105.html">JDK 8u66 Bug Fixes</a> page. </p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u66-relnotes-2692847.html">8u66 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 65 (8u65)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li>IANA Data 2015f<br> JDK 8u65 contains IANA time zone data version 2015f. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>. </li> 
       <li> Support ISO 4217 'Current funds codes' table (A.2)<br> This enhancement adds support for ISO 4217 <a href="http://www.currency-iso.org/en/home/tables/table-a2.html" target="_blank">table A.2</a> fund codes. Previously the JDK only supported those currencies listed in <a href="http://www.currency-iso.org/en/home/tables/table-a1.html" target="_blank">table A.1</a>. See <a href="https://bugs.openjdk.java.net/browse/JDK-8074350">JDK-8074350</a>. </li> 
       <li><strong>Bug Fix:</strong> [mac osx] JRE AU client installed fails update to NEXTVER on Mac 10.11<br> A new installer is introduced in the 8u65 release to update OS X users to the latest version. The installer will apply to both scheduled and manual updates, and bundles made available on java.com and OTN. Users who experience compatibility issues with the new installer can manually download and install the ".pkg" installer available on My Oracle Support.</li> 
       <li><strong>Bug Fix:</strong> Hotspot should use PICL interface to get cacheline size on SPARC<br> The libpicl library is now required on Solaris/SPARC to determine the size of the cache lines. In case the library is not present or the PICL service is not available the JVM will display a warning and compiler optimizations that utilize the BIS (Block Initializing Store) instruction will be turned off. See <a href="https://bugs.openjdk.java.net/browse/JDK-8056124">JDK-8056124</a>. </li> 
       <li><strong>Bug Fix:</strong> dns_lookup_realm should be false by default<br> The dns_lookup_realm setting in Kerberos' <em>krb5.conf</em> file is by default false. See <a href="https://bugs.openjdk.java.net/browse/JDK-8080638">JDK-8080637</a>. </li> 
       <li><strong>Bug Fix:</strong> Preloading <code>libjsig.dylib</code> causes deadlock when <code>signal()</code> is called<br> Applications need to preload the <code>libjsig</code> library to enable signal chaining. Previously, on OS X, after <code>libjsig.dylib</code> was preloaded, any call from native code to <code>signal()</code> caused a deadlock. This has been corrected. See <a href="https://bugs.openjdk.java.net/browse/JDK-8072147">JDK-8072147</a>. </li> 
       <li><strong>Bug Fix:</strong> Better group dynamics<br> In OpenJDK SSL/TLS/DTLS implementation (SunJSSE provider), safe prime Diffie-Hellman groups are used by default. Users can custom Diffie-Hellman groups via Security Property, <code>jdk.tls.server.defaultDHEParameters</code>. </li> 
       <li><strong>Bug Fix:</strong> VM crash when class is redefined with <code>Instrumentation.redefineClasses</code><br> The JVM could crash when a class was redefined with <code>Instrumentation.redefineClasses()</code>. The crash could either be a segmentation fault at <code>SystemDictionary::resolve_or_null</code>, or an internal error with the message 'tag mismatch with resolution error table'. This has now been fixed. See <a href="https://bugs.openjdk.java.net/browse/JDK-8076110">JDK-8076110</a>. </li> 
      </ul> <h5 class="sub">Notes</h5> <p> When running on OSX 10.11 El Capitan, when SIP is enabled, certain environment variables intended for debugging applications, such as <code>DYLD_LIBRARY_PATH</code>, may be stripped from the environment when running Java from the command line or when double-clicking a JAR file. Applications should not rely on these variables in a production environment, they are only intended for debugging during development. </p> <p> MD5 must not be used for digital signatures where collision resistance is required. In orderto prevent the usage of MD5 as digital signature algorithm during X.509 certificate operations, MD5 is added to <code>jdk.certpath.disabledAlgorithms</code> security property. For those applications that still using MD5 signed certificate, please upgrade the weak certificate as soon as possible. </p> </span> 
     <span class="bodytext"> <h5 class="sub">Known Issues</h5> <p><strong>[macosx] Sponsor offer screen accessibility (a11y) issues</strong><br> Users who operate the keyboard to access user interfaces in the Java installer will be unable to access hyperlinks and checkboxes in software add-on offer screens. As a workaround to setting preferences related to add-on software in the user interface, users can disable such offers either by disabling them in the Java control panel, or by passing <code>SPONSORS=0</code> via the command line. For more information, refer to <a href="/en/download/faq/disable_offers.xml">Install Java without sponsor offers FAQ</a>. See JDK-8061886 (not public). </p> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u65 is January 19, 2016. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u65) on February 19, 2016. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> </span> 
     <span class="bodytext"> <h5 class="sub">Bug Fixes</h5> <p> This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpuoct2015-2367953.html">Oracle Java SE Critical Patch Update Advisory</a>. </p> <p> For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u65-bugfixes-2686589.html">JDK 8u65 Bug Fixes</a> page. </p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u65-relnotes-2687063.html">8u65 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 60 (8u60)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li>IANA Data 2015e<br> JDK 8u60 contains IANA time zone data version 2015e. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>.</li> 
       <li><strong>Bug Fix:</strong> dns_lookup_realm should be false by default<br>The dns_lookup_realm setting in <code>Kerberos' krb5.conf</code> file is by default <code>false</code>. See <a href="http://bugs.java.com/view_bug.do?bug_id=8080637">8080637</a>.</li> 
       <li><strong>Bug Fix:</strong> Disable RC4 cipher suites<br>RC4-based TLS ciphersuites (e.g. TLS_RSA_WITH_RC4_128_SHA) are now considered compromised and should no longer be used (see RFC 7465). Accordingly, RC4-based TLS ciphersuites have been deactivated by default in the Oracle JSSE implementation by adding "RC4" to "jdk.tls.disabledAlgorithms" security property, and by removing them from the default enabled ciphersuites list. These cipher suites can be reactivated by removing "RC4" form "jdk.tls.disabledAlgorithms" security property in the <code>java.security</code> file or by dynamically calling Security.setProperty(), and also readding them to the enabled ciphersuite list using the SSLSocket/SSLEngine.setEnabledCipherSuites() methods. You can also use the <code>-Djava.security.properties</code> command line option to override the <code>jdk.tls.disabledAlgorithms</code> security property. For example:<br> <code> java -Djava.security.properties=my.java.security ... </code> <br>where <code>my.java.security</code> is a file containing the property without RC4:<br> <code> jdk.tls.disabledAlgorithms=SSLv3</code> <br>Even with this option set from commandline, the RC4 based ciphersuites need to be re-added to the enabled ciphersuite list by using the <code>SSLSocket/SSLEngine.setEnabledCipherSuites()</code> methods. See <a href="http://bugs.java.com/view_bug.do?bug_id=8076221">8076221</a>.</li> 
       <li><strong>Bug Fix:</strong> Support keystore type detection for JKS and PKCS12 keystores<br>Keystore Compatibility Mode: To aid interoperability, the Java keystore type JKS now supports keystore compatibility mode by default. This mode enables JKS keystores to access both JKS and PKCS12 file formats. To disable keystore compatibility mode set the Security property <code>keystore.type.compat</code> to the string value <code>false</code>. See <a href="http://bugs.java.com/view_bug.do?bug_id=8062552">8062552</a>.</li> 
       <li><strong>Bug Fix:</strong> Deprecate Unsafe monitor methods in JDK 8u release<br>The methods <code>monitorEnter</code>, <code>monitorExit</code> and <code>tryMonitorEnter</code> on <code>sun.misc.Unsafe</code> are marked as deprecated in JDK 8u60 and will be removed in a future release. These methods are not used within the JDK itself and are very rarely used outside of the JDK. See <a href="http://bugs.java.com/view_bug.do?bug_id=8069302">8069302</a>.</li> 
       <li><strong>Bug Fix:</strong> Extract JFR recording from the core file using SA<br>DumpJFR is a Serviceability Agent based tool that can be used to extract Java Flight Recorder(JFR) data from the core files and live Hotspot processes. DumpJFR can be used in one of the following methods: 
        <ul> 
         <li>Attach DumpJFR to a live process:<br><br> 
          <!-- BEGIN: jWidget_C/Raw-HTML/Display --> <code> java -cp $JAVA_HOME/lib/sa-jdi.jar sun.jvm.hotspot.tools.DumpJFR &lt;pid&gt; </code> 
          <!-- END: jWidget_C/Raw-HTML/Display --> <br><br> </li> 
         <li>Attach DumpJFR to a core file:<br><br> 
          <!-- BEGIN: jWidget_C/Raw-HTML/Display --> <code> java -cp $JAVA_HOME/lib/sa-jdi.jar sun.jvm.hotspot.tools.DumpJFR &lt;java&gt; &lt;core&gt;</code> 
          <!-- END: jWidget_C/Raw-HTML/Display --> <br><br> </li> 
        </ul> DumpJFR tool dumps the JFR data to a file called recording.jfr in the current working folder. See 8065301 (not public).</li> 
       <li><strong>Bug Fix:</strong> Local variables named 'enum' lead to spurious compiler crashes<br>The <code>javac</code> parser is incorrectly parsing local variables with name 'enum'; this results in spurious failures when a program containing such local variables is compiled with a 'source' flag corresponding to a release in which the enum construct is not available (such as '-source 1.4'). See <a href="http://bugs.java.com/view_bug.do?bug_id=8069181">8069181</a>. </li>
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java Development Kit for ARM Release 8u60</h5> <p>This release includes Java Development Kit for ARM Release 8u60 (JDK 8u60 for ARM). For ARM device support information, see <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-arm-downloads-2187472.html">JDK for ARM Downloads</a> page. For system requirements, installation instructions and troubleshooting tips, see <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/install/index.html">Installation Instructions</a> page.</p> <p><strong>Limitation:</strong> Native Memory Tracking support is limited in JDK for ARM. The java command line option <code>XX:NativeMemoryTracking=detail</code> is not supported for ARM targets (an error message is displayed to user). Instead, use the following option:<br> <code>XX:NativeMemoryTracking=summary </code> </p> </span> 
     <span class="bodytext"> <h5 class="sub"><a name="nashorn">Documentation Updates due to Nashorn Enhancements</a></h5> JDK 8u60 includes new enhancements to Nashorn. As a result the following documentation changes should be read in conjunction with the current Nashorn documentation: 
      <ul>
       <li>Addition: In the <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/scripting/prog_guide/javascript.html#A1147390">previous section</a>, we mentioned that every JavaScript object when exposed to Java APIs implements the <code>java.util.Map</code> interface. This is true even for JavaScript arrays. However, this behavior is often not desired or expected when the Java code expects JSON-parsed objects. Java libraries that manipulate JSON-parsed objects usually expect arrays to expose the <code>java.util.List</code> interface instead. If you need to expose your JavaScript objects so that arrays are exposed as lists and not maps, you can use the <code>Java.asJSONCompatible(obj)</code> function, where <code>obj</code> is the root of your JSON object tree.</li> 
       <li>Correction: The caution mentioned at the end of <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/scripting/prog_guide/javascript.html#A1147390">Mapping Data Types</a> section, is no longer applicable. Nashorn ensures that internal JavaScript strings are converted to <code>java.lang.String</code> when exposed externally.</li> 
       <li>Correction: The statement in the section <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/scripting/prog_guide/javascript.html#A1147390">Mapping Data Types</a>, that mentions "For example, arrays must be explicitly converted,..." is not correct. Arrays are automatically converted to Java array types, such as <code>java.util.List</code>, <code>java.util.Collection</code>, <code>java.util.Queue</code> and <code>java.util.Deque</code> and so on. </li>
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub"><a name="drs">Changes in Deployment Rule Set v1.2</a></h5> JDK 8u60 implements Deployment Rule Set (DRS) 1.2, which includes the following changes: 
      <ul> 
       <li>Add <code>"checksum"</code> element as sub element of <code>"id"</code> which can allow unsigned jars to be identified by the SHA-256 checksum of the uncompressed form of a jar: 
        <ul> 
         <li>The <code>"checksum"</code> element will match only unsigned jars, and the given hash will be compared only against the uncompressed form of the jar.</li> 
         <li>The <code>"checksum"</code> element (similar to <code>"certificate"</code> element) has two arguments <code>"hash"</code> and <code>"algorithm"</code>, however, unlike <code>"certificate"</code> element, the only supported value for <code>"algorithm"</code> is "SHA-256". Any other value provided will be ignored.</li> 
        </ul> </li> 
       <li>Allow <code>"message"</code> element to apply to all rule types, where previously it only applied to a block rule: 
        <ul> 
         <li>In a run rule, a message sub element will cause a message dialog to be displayed where without a run rule, the default behavior would be to show certificate or unsigned dialog. The message will be displayed in the message dialog.</li> 
         <li>In a default rule, the message will only be displayed if the default action is to block. In such a case the message will be included in the block dialog.</li> 
        </ul> </li> 
       <li>Echo <code>"customer"</code> blocks in the Java Console, trace files, and Java Usage Tracker records. 
        <ul> 
         <li>Previous to DRS 1.2, <code>"customer"</code> elements could be included (with any sub-elements) in the <code>ruleset.xml</code> file. This element and all its sub elements are ignored. In DRS 1.2, the elements are still functionally ignored. However:<br> 
          <ul> 
           <li>When parsing the <code>ruleset.xml</code> file, all <code>"customer"</code> blocks will be echoed to the Java Console and deployment trace file (if Console and Tracing are enabled).</li> 
           <li>When using a rule, all <code>"customer"</code> records included within that rule will be added to the Java Usage Tracker (JUT) record (if JUT is enabled).</li> 
          </ul> </li>
        </ul> </li> 
      </ul> As a result of the above changes, the DTD for DRS 1.2 is as follows:<br> </span> 
     <span class="bodytext"> 
      <!-- BEGIN: jWidget_C/Raw-HTML/Display --> <pre style="display:block;white-space:pre;">
&lt;!ELEMENT ruleset (rule*)&gt;
&lt;!ATTRIBUTE ruleset href CDATA #IMPLIED&gt;
&lt;!ATTRIBUTE ruleset version CDATA #REQUIRED&gt;

&lt;!ELEMENT rule (id, action)&gt;

&lt;!ELEMENT id (certificate?) (checksum?) &gt;
&lt;!ATTRIBUTE id title CDATA #IMPLIED&gt;
&lt;!ATTRIBUTE id location CDATA #IMPLIED&gt;

&lt;!ELEMENT certificate EMPTY&gt;
&lt;!ATTLIST certificate algorithm CDATA #IMPLIED&gt;
&lt;!ATTLIST certificate hash CDATA #REQUIRED&gt;

&lt;!ELEMENT checksum EMPTY&gt;
&lt;!ATTLIST checksum algorithm CDATA #IMPLIED&gt;
&lt;!ATTLIST checksum hash CDATA #REQUIRED&gt;
 
&lt;!ELEMENT action (message?)&gt;
&lt;!ATTRIBUTE permission (run | block | default) #REQUIRED&gt;
&lt;!ATTRIBUTE version CDATA #IMPLIED&gt;
&lt;!ATTRIBUTE force (true|false) "false"&gt;

&lt;!ELEMENT message (#PCDATA)&gt;
&lt;!ATTLIST message locale CDATA #IMPLIED&gt;

</pre> 
      <!-- END: jWidget_C/Raw-HTML/Display --> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u60 is October 20, 2015. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u60) on November 20, 2015. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> </span> 
     <span class="bodytext"> <h5 class="sub">Bug Fixes</h5> <p>For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u60-bugfixes-2620228.html">JDK 8u60 Bug Fixes</a> page.</p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u60-relnotes-2620227.html">8u60 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 51 (8u51)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li>IANA Data 2015d<br> JDK 8u51 contains IANA time zone data version 2015d. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>.</li> 
       <li> <strong>Bug Fix:</strong> Add new Comodo roots to root CAs<br> Four new root certificates have been added for Commodo: 
        <ol> 
         <li><code>COMODO ECC Certification Authority<br> alias: comodoeccca<br> DN: CN=COMODO ECC Certification Authority, O=COMODO CA Limited, L=Salford, ST=Greater Manchester, C=GB </code> </li> 
         <li><code>COMODO RSA Certification Authority<br> alias: comodorsaca<br> DN: CN=COMODO RSA Certification Authority, O=COMODO CA Limited, L=Salford, ST=Greater Manchester, C=GB </code></li> 
         <li><code>USERTrust ECC Certification Authority<br> alias: usertrusteccca<br> DN: CN=USERTrust ECC Certification Authority, O=The USERTRUST Network, L=Jersey City, ST=New Jersey, C=US </code></li> 
         <li><code>USERTrust RSA Certification Authority<br> alias: usertrustrsaca<br> DN: CN=USERTrust RSA Certification Authority, O=The USERTRUST Network, L=Jersey City, ST=New Jersey, C=US </code></li> 
        </ol> See JDK-8077997 (not public). </li> 
       <li> <strong>Bug Fix:</strong> Add new GlobalSign roots to root CAs<br> Two root certificates have been added for GlobalSign: 
        <ol> 
         <li><code>GlobalSign ECC Root CA - R4<br> alias: globalsigneccrootcar4<br> DN: CN=GlobalSign, O=GlobalSign, OU=GlobalSign ECC Root CA - R4 </code></li> 
         <li><code>GlobalSign ECC Root CA - R5<br> alias: globalsigneccrootcar5<br> DN: CN=GlobalSign, O=GlobalSign, OU=GlobalSign ECC Root CA - R5 </code></li> 
        </ol> See JDK-8077995 (not public). </li> 
       <li> <strong>Bug Fix:</strong> Add Actalis to root CAs<br> Added one new root certificate:<br> <code>Actalis Authentication Root CA<br> alias: actalisauthenticationrootca<br> DN: CN=Actalis Authentication Root CA, O=Actalis S.p.A./03358520967, L=Milan, C=IT </code> <br>See JDK-8077903 (not public). </li> 
       <li> <strong>Bug Fix:</strong> Add new Entrust ECC root<br> Added one new root certificate:<br> <code> Entrust Root Certification Authority - EC1<br> alias: entrustrootcaec1<br> DN: CN=Entrust Root Certification Authority - EC1, OU="(c) 2012 Entrust, Inc. - for authorized use only", OU=See www.entrust.net/legal-terms, O="Entrust, Inc.", C=US </code> <br> See JDK-8073286 (not public). </li> 
       <li> <strong>Bug Fix:</strong> Remove old Valicert Class 1 and 2 Policy roots<br> Removed two root certificates with 1024-bit keys: 
        <ol> 
         <li><code>ValiCert Class 1 Policy Validation Authority<br> alias: secomvalicertclass1ca<br> DN: EMAILADDRESS=info@valicert.com, CN=http://www.valicert.com/, OU=ValiCert Class 1 Policy Validation Authority, O="ValiCert, Inc.", L=ValiCert Validation Network </code></li> 
         <li><code>ValiCert Class 2 Policy Validation Authority<br> alias: valicertclass2ca<br> DN: EMAILADDRESS=info@valicert.com, CN=http://www.valicert.com/, OU=ValiCert Class 2 Policy Validation Authority, O="ValiCert, Inc.", L=ValiCert Validation Network </code></li> 
        </ol> See JDK-8077886 (not public). </li> 
       <li> <strong>Bug Fix:</strong> Remove old Thawte roots<br> Removed two root certificates with 1024-bit keys: 
        <ol> 
         <li><code>Thawte Server CA<br> alias: thawteserverca<br> DN: EMAILADDRESS=server-certs@thawte.com, CN=Thawte Server CA, OU=Certification Services Division, O=Thawte Consulting cc, L=Cape Town, ST=Western Cape, C=ZA </code> </li> 
         <li><code>Thawte Personal Freemail CA<br> alias: thawtepersonalfreemailca<br> DN: EMAILADDRESS=personal-freemail@thawte.com, CN=Thawte Personal Freemail CA, OU=Certification Services Division, O=Thawte Consulting, L=Cape Town, ST=Western Cape, C=ZA </code> </li> 
        </ol> See JDK-8074423 (not public). </li> 
       <li> <strong>Bug Fix:</strong> Remove more old Verisign, Equifax, and Thawte roots<br> Removed five root certificates with 1024-bit keys: 
        <ol> 
         <li><code>Verisign Class 3 Public Primary Certification Authority - G2<br> alias: verisignclass3g2ca<br> DN: OU=VeriSign Trust Network, OU="(c) 1998 VeriSign, Inc. - For authorized use only", OU=Class 3 Public Primary Certification Authority - G2, O="VeriSign, Inc.", C=US </code> </li> 
         <li><code>Thawte Premium Server CA<br> alias: thawtepremiumserverca<br> DN: EMAILADDRESS=premium-server@thawte.com, CN=Thawte Premium Server CA, OU=Certification Services Division, O=Thawte Consulting cc, L=Cape Town, ST=Western Cape, C=ZA </code> </li> 
         <li><code>Equifax Secure Certificate Authority<br> alias: equifaxsecureca<br> DN: OU=Equifax Secure Certificate Authority, O=Equifax, C=US </code> </li> 
         <li><code> Equifax Secure eBusiness CA-1<br> alias: equifaxsecureebusinessca1<br> DN: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US </code> </li> 
         <li> <code>Equifax Secure Global eBusiness CA-1,<br> alias: equifaxsecureglobalebusinessca1<br> DN: CN=Equifax Secure Global eBusiness CA-1, O=Equifax Secure Inc., C=US </code> </li> 
        </ol> See JDK-8076202 (not public). </li> 
       <li> <strong>Bug Fix:</strong> Remove TrustCenter CA roots from cacerts<br> Removed three root certificates: 
        <ol> 
         <li> <code>TC TrustCenter Universal CA I<br> alias: trustcenteruniversalcai<br> DN: CN=TC TrustCenter Universal CA I, OU=TC TrustCenter Universal CA, O=TC TrustCenter GmbH, C=DE </code> </li> 
         <li> <code> TC TrustCenter Class 2 CA II<br> alias: trustcenterclass2caii<br> DN: CN=TC TrustCenter Class 2 CA II, OU=TC TrustCenter Class 2 CA, O=TC TrustCenter GmbH, C=DE </code> </li> 
         <li> <code> TC TrustCenter Class 4 CA II<br> alias: trustcenterclass4caii<br> DN: CN=TC TrustCenter Class 4 CA II, OU=TC TrustCenter Class 4 CA, O=TC TrustCenter GmbH, C=DE </code> </li> 
        </ol> See JDK-8072958 (not public). </li> 
       <li> <strong>Bug Fix:</strong> Deprecate RC4 in SunJSSE provider<br> RC4 is now considered as a weak cipher. Servers should not select RC4 unless there is no other stronger candidate in the client requested cipher suites. A new security property, <code>jdk.tls.legacyAlgorithms</code>, is added to define the legacy algorithms in Oracle JSSE implementation. RC4 related algorithms are added to the legacy algorithms list. See JDK-8074006 (not public). </li> 
       <li> <strong>Bug Fix:</strong> Prohibit RC4 cipher suites<br> RC4 is now considered as a compromised cipher. RC4 cipher suites have been removed from both client and server default enabled cipher suite list in Oracle JSSE implementation. These cipher suites can still be enabled by <a href="http://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLEngine.html#setEnabledCipherSuites-java.lang.String:A-"><code>SSLEngine.setEnabledCipherSuites()</code></a> and <a href="http://docs.oracle.com/javase/8/docs/api/javax/net/ssl/SSLSocket.html#setEnabledCipherSuites-java.lang.String:A-"><code>SSLSocket.setEnabledCipherSuites()</code></a> methods. See JDK-8077109 (not public). </li> 
       <li> <strong>Bug Fix:</strong> Improved certification checking<br> With this fix, JSSE endpoint identification does not perform reverse name lookup for IP addresses by default in JDK. If an application does need to perform reverse name lookup for raw IP addresses in SSL/TLS connections, and encounter endpoint identification compatibility issue, System property "jdk.tls.trustNameService" can be used to switch on reverse name lookup. Note that if the name service is not trustworthy, enabling reverse name lookup may be susceptible to MITM attacks. See JDK-8067695 (not public). </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u51 is October 20, 2015. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u51) on November 20, 2015. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> </span> 
     <span class="bodytext"> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpujul2015-2367936.html#AppendixJAVA">Oracle Java SE Critical Patch Update Advisory</a>.</p> <p>For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u51-bugfixes-2587594.html">JDK 8u51 Bug Fixes</a> page.</p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u51-relnotes-2587590.html">8u51 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 45 (8u45)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li>IANA Data 2015a<br> JDK 8u45 contains IANA time zone data version 2015a. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>.</li> 
       <li><strong>Bug Fix</strong>: Improve jar file handling. Starting with JDK 8u45 release, the <code>jar</code> tool no longer allows the leading slash "/" and ".." (dot-dot) path component in zip entry file name when creating new and/or extracting from zip and jar file. If needed, the new command line option <code>"-P"</code> should be used explicitly to preserve the dot-dot and/or absolute path component. See 8064601 (not public). </li> 
       <li><strong>Bug Fix</strong>: jnlp app with nested "resource" section fails with NPE on load in jre8u40. A jnlp application, with nested <code>
         <resources></resources></code> tags within a <code>&lt;java&gt;</code> or <code>
         <j2se></j2se></code> tag, can throw a NPE. The issue is now fixed. The <code>
         <resources></resources></code> tag should be used only if the <code>&lt;java&gt;</code> is actually used. See 8072631 (not public).</li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u45 is July 14, 2015. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u45) on August 14, 2015. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> </span> 
     <span class="bodytext"> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpuapr2015-2365600.html">Oracle Java SE Critical Patch Update Advisory</a>.</p> <p>For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u45-bugfixes-2494164.html">JDK 8u45 Bug Fixes</a> page.</p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u45-relnotes-2494160.html">8u45 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 40 (8u40)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li>IANA Data 2014j<br> JDK 8u40 contains IANA time zone data version 2014j. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>.</li> 
       <li> <strong>Bug Fix</strong>: Default and static interface methods in JDI, JDWP and JDB. Since JDK 8 it is possible to have directly executable static and default methods in interfaces. These methods are not executable via JDWP or JDI and therefore can not be properly debugged. See <a href="http://www.oracle.com/technetwork/java/javase/8-compatibility-guide-2156366.html">JDK 8 Compatibility Guide</a> for more details. See <a href="http://bugs.java.com/view_bug.do?bug_id=8042123">8042123</a>. </li> 
       <li> <strong>Bug Fix</strong>: Java Access Bridge can be enabled from Control panel for 32 bit jres. Previously the "Enable Java Access Bridge" check box got removed from the Java Control Panel with 64 bit jre uninstall even when 32 bit JRE was still present on the system. Starting with JDK 8u40 release, the "Enable Java Access Bridge" checkbox is retained, at <strong>Control Panel -&gt; Ease of Access -&gt; Ease of Access Center -&gt; Use the computer without a display</strong>, if a 32 bit jre is present. So, a user can enable Java Access bridge via control panel for See <a href="http://bugs.java.com/view_bug.do?bug_id=8030124">8030124</a>. </li> 
       <li> <strong>Bug Fix</strong>: Modernizing the JavaFX Media Stack on Mac OS X. An AVFoundation based player platform is added to JavaFX media. The old QTKit based platform is now removable for Mac App Store compatibility. See 8043697 (not public)</li> 
       <li> <strong>Bug Fix</strong>: Missing DOM APIs. In JDK 8u40 release, the old plugin DOM APIs were inadvertently removed. If an applet requires the use of <code>com.sun.java.browser.dom.DOMService</code> to communicate with the browser, then users may need to update their applet to use <code>netscape.javascript.JSObject</code> or continue using JDK 8 Update 31. This issue has been resolved in build 26 and new 8u40 installers have been posted. If you are experiencing this problem please download and run the updated JDK 8u40 installers. See <a href="http://bugs.java.com/view_bug.do?bug_id=JDK-8074564">8074564</a>. </li> 
       <li> <strong>Bug Fix</strong>: Mac 10.10: Application run with splash screen has focus issues. Applications started through webstart or standalone applications, which use splash screen, cannot get keyboard focus. Workaround: Launch javaws using the <code>-Xnosplash</code> option. This issue has been resolved in build 27 and a new 8u40 installer has been posted. If you are experiencing this problem, download and run the updated JDK 8u40 installer. See <a href="http://bugs.java.com/view_bug.do?bug_id=JDK-8074668">8074668</a>. </li> 
       <li> Java Packager Tool Enhancements<br> JDK 8u40 release contains the following enhancements to the Java Packager: 
        <ul> 
         <li><a href="http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/self-contained-packaging.html#JSDPG995">Command-line arguments can be passed to self-contained applications</a>. Default arguments are defined when the package is created, which can be overridden by the user when the application is started.</li> 
         <li><a href="http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/self-contained-packaging.html#JSDPG996">File associations can be set up</a> when a self-contained application is installed so that the operating system automatically runs the application for registered file extensions or MIME types.</li> 
         <li>The <code>UserJvmOptionsService</code> API is available for <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/jvm_options_api.html">altering JVM options in self-contained applications</a>. The new settings are used the next time the application is started.</li> 
         <li><a href="http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/self-contained-packaging.html#JSDPG1000">Multiple entry points are supported for self-contained applications</a> which enables a suite of products to be bundled into the same application package.</li> 
        </ul> </li> 
       <li> Deprecated APIs<br> The <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/standards/index.html">endorsed-standards override</a> mechanism and the <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/extensions/index.html">extension mechanism</a> are deprecated and may be removed in a future release. There are no runtime changes. Existing applications using the 'endorsed-standards override' or 'extension' mechanisms are recommended to migrate away from using these mechanisms. To help identify any existing uses of these mechanisms, the <code>-XX:+CheckEndorsedAndExtDirs</code> command-line option is available. It will fail if any of the following conditions is true: 
        <ul> 
         <li><code>-Djava.endorsed.dirs</code> or <code>-Djava.ext.dirs</code> system property is set to alter the default location; or</li> 
         <li><code>${java.home}/lib/endorsed</code> directory exists; or</li> 
         <li><code>${java.home}/lib/ext</code> contains any JAR files excluding the ones that JDK ships or</li> 
         <li>any platform-specific system-wide extension directory contains any JAR files.</li> 
        </ul> The <code>-XX:+CheckEndorsedAndExtDirs</code> command-line option is supported in JDK 8u40 and later releases. </li> 
       <li> JJS Tool Page Differences<br> The Japanese version of the jjs help page is different from the English version. Some of the unsupported options have been removed from the English version of the <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/windows/jjs.html">jjs</a> tool page. The Japanese version of document will be updated in future. See 8062100 (not public). For other jjs tool page changes, see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/enhancements-8.html">Tools Enhancements in JDK 8</a>. </li> 
       <li> Change in default values for G1HeapWastePercent and G1MixedGCLiveThresholdPercent<br> The default value for <code>G1HeapWastePercent</code> was changed from 10 to 5 to reduce the need for full GCs. For the same reason the default value for <code>G1MixedGCLiveThresholdPercent</code> was changed from 65 to 85. </li> 
       <li> New Java class-access Filtering Interface<br> The <code><a href="https://docs.oracle.com/javase/8/docs/jdk/api/nashorn/jdk/api/scripting/ClassFilter.html">jdk.nashorn.api.scripting.ClassFilter</a></code> interface enables you to restrict access to specified Java classes from scripts run by a Nashorn script engine. See <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/api.html#classfilter_introduction">Restricting Script Access to Specified Java Classes</a> in the Nashorn User's Guide and 8043717 (not public) for more information. </li> 
       <li> Issues with Third party's JCE providers<br> The fix for JDK-8023069 (in JDK 8u20) updated both the SunJSSE and and SunJCE providers, including some internal interfaces. Some third party JCE providers (such as RSA JSAFE) are using some <code>sun.* internal</code> interfaces, and therefore will not work with the updated SunJSSE provider. Such providers will need to be updated in order for them to work with the updated SunJSSE provider. If you have been impacted by this issue, please contact your JCE vendor for an update. See <a href="http://bugs.java.com/view_bug.do?bug_id=8058731">8058731</a>. </li> 
       <li> Re-enabled encryptions in Solaris Crypto Framework<br> If you are using Solaris 10, a change was made to re-enable operations with MD5, SHA1, and SHA2 through the Solaris Crypto Framework. If you experience a <code>CloneNotSupportedException</code> or PKCS11 error <code>CKR_SAVED_STATE_INVALID</code> message with JDK 8u40, you should verify and apply the below patches or newer version of them: 
        <ul> 
         <li>150531-02 on sparc</li> 
         <li>150636-01 on x86 </li> 
        </ul> </li> 
       <li> Troubleshooting Guide Updates for NMT<br> The Native Memory Tracking (NMT) is a Java Hotspot VM feature that tracks internal memory usage for a HotSpot JVM. Native Memory Tracking can be used to monitor VM internal memory allocations and diagnose VM memory leaks. VM enhancements page is updated with NMT features. See <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/vm/enhancements-8.html">Java Virtual Machine Enhancements in Java SE 8</a>. Troubleshooting Guide is updated with NMT features. See <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/tooldescr007.htm#BABHJEFB">Native Memory Tracking</a>. </li> 
       <li>Multiple JRE Launcher feature deprecated<br> The <a href="http://openjdk.java.net/jeps/231">Launch-Time JRE Version Selection or the Multiple JRE Launcher feature</a> is deprecated in JDK 8u40. Applications that require specific Java versions deployed using this feature must switch to alternate deployment solutions such as Java WebStart. </li> 
       <li> JavaFX Enhancements<br> Starting with JDK 8u40 release, JavaFX controls are enhanced to support assistive technologies, meaning that JavaFX controls are now accessible. In addition, a public API is provided to allow developers to write their own accessible controls. Accessibility support is provided on Windows and Mac OS X platforms and includes: 
        <ul> 
         <li>Support for reading JavaFX controls by a screen reader</li> 
         <li>JavaFX controls are traversable using the keyboard</li> 
         <li>Support for a special high-contrast mode that makes controls more visible to users.</li> 
        </ul> See 8043344 (not public).<br><br> JDK 8u40 release includes new JavaFX UI controls; a spinner control, formatted-text support, and a standard set of alert dialogs. 
        <ul> 
         <li>Spinner Control: A Spinner is a single line text field that lets the user select a number or an object value from an ordered sequence. See <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Spinner.html"> javafx.scene.control.Spinner</a> class for more information. </li> 
         <li>Formatted Text: A new TextFormatter class provides text formatting capablity for subclasses of TextInputControl (for example, TextField and TextArea). See <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/TextFormatter.html">javafx.scene.control.TextFormatter</a> class for more information. </li> 
         <li>Dialogs: The Dialog class allows applications to create their own custom dialogs. In addition, an an Alert class is also provided, that extends Dialog, and provides support for a number of pre-built dialog types that can be easily shown to users to prompt for a response. See <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Dialog.html">javafx.scene.control.Dialog</a>, <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Alert.html">javafx.scene.control.Alert</a>, <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/TextInputDialog.html">javafx.scene.control.TextInputDialog</a>, <a href="https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/ChoiceDialog.html"> javafx.scene.control.ChoiceDialog</a> classes for more information. </li> 
        </ul> See 8043350 (not public). </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Commercial Features</h5> 
      <ul style="list-style-type:circle"> 
       <li>Application Class Data Sharing (AppCDS)<br> <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/class-data-sharing.html">Application Class Data Sharing (AppCDS) extends CDS</a> to enable you to place classes from the standard extensions directories and the application class path in the shared archive. This is an experimental feature and not licensed for commercial use. See the <code>-XX:+UseAppCDS</code> option in the java launcher tool page. </li> 
       <li>Cooperative Memory Management<br> Starting with JDK 8u40, the notion of "memory pressure" has been added to the JDK. Memory pressure is a property that represents the total memory usage (RAM) on the system. The higher the memory pressure, the closer the system is to running out of memory. This is an experimental feature and not licensed for commercial use. As a reaction to increased memory pressure, the JDK will try to reduce its memory usage. This is mainly done by reducing the Java heap size. The actions the JDK will take to reduce memory usage may lead to reduced performance. This is an intentional choice. The pressure level is provided by the application through a JMX MXBean using a scale from 0 (no pressure) to 10 (almost out of memory). To enable this feature, the <code>jdk.management.cmm.SystemResourcePressureMXBean</code> should be registered. The memory pressure is then set using the "MemoryPressure" attribute.<br> A new command line flag <code>-XX:MemoryRestriction</code> that takes one of the arguments 'none', 'low', 'medium', or 'high', is also available. This flag will set the initial pressure in the JDK and will work also in cases where the MXBean is not registered. Cooperative Memory Management requires the G1 GC (<code>-XX:+UseG1GC</code>). This feature is not compatible with the flag <code>-XX:+ExplicitGCInvokesConcurrent</code>.</li> 
       <li>New commercial flags<br> Two new VM options are now available for commercial license holders: 
        <ul> 
         <li>-XX:+ResourceManagement</li> 
         <li>-XX:ResourceManagementSampleInterval=value (milliseconds)</li> 
        </ul> For more information, see <a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html">Java Launcher</a> documentation. </li> 
       <li>New MSI Installer Documentation:<br> The <a href="https://docs.oracle.com/javacomponents/msi-jre8/install-guide">Microsoft Windows Installer (MSI) Enterprise JRE Installer Guide</a> is available. The MSI Enterprise JRE Installer requires a commercial license for use in production. Learn more about <a href="http://www.oracle.com/technetwork/java/javaseproducts/">commercial features and how to enable them</a>. </li> 
      </ul> </span> 
     <span class="bodytext"> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u40 is April 14, 2015. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u40) on May 14, 2015. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> <h5 class="sub">Bug Fixes</h5> <p>For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u40-bugfixes-2423829.html">JDK 8u40 Bug Fixes</a> page.</p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u40-relnotes-2389089.html">8u40 Release notes</a> </p> </span> 
     <!-- no bodytext -->
     <hr> 
     <span class="bodytext"> <h4>Java 8 Update 31 (8u31)</h4> <h5 class="sub">Release Highlights</h5> 
      <ul style="list-style-type:circle"> 
       <li>IANA Data 2014j<br> JDK 8u31 contains IANA time zone data version 2014j. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>.</li> 
       <li>SSLv3 is disabled by default<br> Starting with JDK 8u31 release, the SSLv3 protocol (Secure Socket Layer) has been deactivated and is not normally available. Please see the <code>jdk.tls.disabledAlgorithms</code> property in <code>
         <jre_home>
          \lib\security\java.security
         </jre_home></code> file. If SSLv3 is absolutely required, the protocol can be reactivated by removing 'SSLv3' from the <code>jdk.tls.disabledAlgorithms</code> property in the <code>java.security</code> file or by dynamically setting this security property before JSSE is initialized.</li> 
       <li>Changes to Java Control Panel<br> Starting with JDK 8u31 release, SSLv3 protocol is removed from <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/jcp.html#A1153011">Java Control Panel Advanced</a> options. If the user needs to use SSLv3 for applications, re-enable it manually as follows: 
        <ul>
         <li>Enable SSLv3 protocol on JRE level: as described in the previous section.</li> 
         <li>Enable SSLv3 protocol on deploy level: edit the <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/properties.html">deployment.properties</a> file and add the following:<br> <br> <code>deployment.security.SSLv3=true</code></li> 
        </ul> </li> 
      </ul> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u31 is April 14, 2015. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u31) on May 14, 2015. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpujan2015-1972971.html">Oracle Java SE Critical Patch Update Advisory</a>.</p> <p> For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u31-bugfixes-2389095.html">JDK 8u31 Bug Fixes</a> page. </p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u31-relnotes-2389094.html">8u31 Release notes</a>  
       <!-- no bodytext --></p>
      <hr> <span class="bodytext"> <h4>Java 8 Update 25 (8u25)</h4> <h5 class="sub">Release Highlights</h5> 
       <ul style="list-style-type:circle"> 
        <li>IANA Data 2014c<br> JDK 8u25 contains IANA time zone data version 2014c. For more information, refer to <a href="http://www.oracle.com/technetwork/java/javase/tzdata-versions-138805.html">Timezone Data Versions in the JRE Software</a>.</li> 
        <li><strong>Bug Fix:</strong> Decrease the preference mode of RC4 in the enabled cipher suite list<br>This fix decreases the preference of RC4 based cipher suites in the default enabled cipher suite list of SunJSSE provider. See 8043200 (not public). </li> 
        <li><strong>Bug Fix:</strong> JRE 8u20 crashes while using Japanese IM on Windows<br>The VM crashes while using Swing controls when some Japanese or Chinese characters are input on Windows platform. The issue is now fixed. See 8058858 (not public).</li> 
       </ul> <h5 class="sub">Instructions to disable SSL v3.0 in Oracle JDK and JRE</h5> <p>Oracle recommends that users and developers disable use of the SSLv3 protocol.<br> » <a href="/en/download/help/disable_sslv3.xml">How can Java users confirm they are not affected by the SSL V3.0 'Poodle' vulnerability?</a><br> </p> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u25 is January 20, 2015. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u25) on February 20, 2015. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> <h5 class="sub">Bug Fixes</h5> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpuoct2014-1972960.html">Oracle Java SE Critical Patch Update Advisory</a>.</p> <p> For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u25-bugfixes-2298227.html">JDK 8u25 Bug Fixes</a> page. </p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u25-relnotes-2296185.html">8u25 Release notes</a> </p> </span> 
      <!-- no bodytext -->
      <hr> <span class="bodytext"> <h4>Java 8 Update 20 (8u20)</h4> <h5 class="sub">Release Highlights</h5> 
       <ul style="list-style-type:circle"> 
        <li>New flags added to Java Management API<br> The flags <code>MinHeapFreeRatio</code> and <code>MaxHeapFreeRatio</code> have been made manageable. This means they can be changed at runtime using the management API in Java. Support for these flags have also been added to the <code>ParallelGC</code> as part of the adaptive size policy. </li> 
        <li>Java Installer Changes<br> 
         <ul> 
          <li>A new Microsoft Windows Installer (MSI) Enterprise JRE Installer which enables user to install the JRE across the enterprise, is available. See <tt>Downloading the Installer</tt> section in <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/install/windows_jre_install.html">JRE Installation for Microsoft Windows</a> for more information. The MSI Enterprise JRE Installer is only available as part of Java SE Advanced or Java SE Suite. For information about these commercial products, see <a href="http://www.oracle.com/us/technologies/java/standard-edition/advanced-suite/overview/index.html">Java SE Advanced and Java SE Suite</a>. </li> 
          <li> The Java Uninstall Tool is integrated with the installer to provide an option to remove older versions of Java from the system. The change is applicable to 32 bit and 64 bit Windows platforms. See <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/install/windows_jre_install.html#uninstalling_the_jre_windows">Uninstalling the JRE</a>. </li> 
         </ul></li> 
        <li>Java Control Panel Changes<br> 
         <ul> 
          <li>The <code>Update</code> tab in the Java Control Panel now enables the users to automatically update 64-bit JREs (in addition to 32-bit versions) that are installed on their system.</li> 
          <li>The <code>Medium</code> security level has been removed. Now only <code>High</code> and <code>Very High</code> levels are available. Applets that do not conform with the latest security practices can still be authorized to run by including the sites that host them to the <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/exception_site_list.html">Exception Site List</a>. The exception site list provides users with the option of allowing the same applets that would have been allowed by selecting the <code>Medium</code> option but on a site-by-site basis therefore minimizing the risk of the using more permissive settings. </li> 
         </ul> </li> 
        <li>Java Compiler updated<br> The <code>javac</code> compiler has been updated to implement definite assignment analysis for blank final field access using "this". See <a href="http://www.oracle.com/technetwork/java/javase/8-compatibility-guide-2156366.html">JDK 8 Compatibility Guide</a> for more details. </li> 
        <li>Change in minimum required Java Version for Java Plugin and Java Webstart<br> The minimum version of Java required for Java Plugin and Java Webstart is now Java 5. Applets that do not run in Java 5 or later must be ported to a later version of Java to continue to function. Applets written for earlier versions but able to run in at least Java 5 will continue to work. </li> 
        <li>Change in <code>UsageTracker</code> output formatting<br> <code>UsageTracker</code> output formatting has been changed to use quoting, to avoid confusion in the log. This may require changes to the way such information is read. The feature can be configured to behave as in previous versions, although the new format is recommended. See <a href="http://docs.oracle.com/javacomponents/usage-tracker.htm">Java Usage Tracker</a> documentation. </li> 
        <li>Changes to Java Packaging Tools<br> 
         <ul> 
          <li>javafxpackager has been renamed to javapackager</li> 
          <li>The <code>"-B"</code> option has been added to the javapackager deploy command to enable you to pass arguments to the bundlers that are used to create self-contained applications. See <code>javapackager</code> (<a href="http://docs.oracle.com/javase/8/docs/technotes/tools/windows/javapackager.html">Windows</a>)/(<a href="http://docs.oracle.com/javase/8/docs/technotes/tools/unix/javapackager.html">Unix</a>) documentation for information</li> 
          <li>The <code>
            <fx:bundleargument></fx:bundleargument></code> helper parameter argument has been added to <a href="http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/javafx_ant_task_reference.html">JavaFX Ant Task Reference</a>. It enables you to specify an argument (in the 
           <fx:deploy>
             element) for the bundler that is used to create self-contained applications.
           </fx:deploy></li> 
         </ul> </li> 
       </ul> <h5 class="sub">Java Expiration Date</h5> <p>The expiration date for 8u20 is October 14, 2014. Java expires whenever a new release with security vulnerability fixes becomes available. For systems unable to reach the Oracle Servers, a secondary mechanism expires this JRE (version 8u20) on November 14, 2014. After either condition is met (new release becoming available or expiration date reached), Java will provide additional warnings and reminders to users to update to the newer version. </p> <h5 class="sub">Bug Fixes</h5> <p> For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u20-bugfixes-2257730.html">JDK 8u20 Bug Fixes</a> page. </p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u20-relnotes-2257729.html">8u20 Release notes</a> </p> </span> 
      <!-- no bodytext -->
      <hr> <span class="bodytext"> <h4>Java 8 Update 11 (8u11)</h4> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpujul2014-1972956.html">Oracle Critical Patch Update Advisory</a>.</p> <p>For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u11-bugfixes-2232916.html">JDK 8u11 Bug Fixes</a> page.</p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u11-relnotes-2232915.html">8u11 Release notes</a> </p> </span> 
      <!-- no bodytext -->
      <hr> <span class="bodytext"> <h4>Java 8 Update 5 (8u5)</h4> <p>This release contains fixes for security vulnerabilities. For more information, see <a href="http://www.oracle.com/technetwork/topics/security/cpuapr2014-1972952.html">Oracle Critical Patch Update Advisory</a>. </p> <p>For a list of bug fixes included in this release, see <a href="http://www.oracle.com/technetwork/java/javase/2col/8u5-bugfixes-2180736.html">JDK 8u5 Bug Fixes</a> page.</p> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8u5-relnotes-2226339.html">8u5 Release notes</a> </p> </span> 
      <!-- no bodytext -->
      <hr> <span class="bodytext"> <h4>Java 8 Release</h4> <p> » <a href="http://www.oracle.com/technetwork/java/javase/8-relnotes-2226341.html">JDK and JRE 8 Release notes</a> </p> </span> 
      <hr> <p><b>You might also be interested in:</b></p> 
      <ul class="bluearrows"> 
       <li> 
        <!--  Begin /jArticle_C/Render-Link.jsp --> <a href="/en/download/faq/release_dates.xml">Java 7 and Java 8 Releases by Date</a> 
        <!--  End /jArticle_C/Render-Link.jsp --> </li> 
      </ul> <br><br> </span>
    </div>
    <!-- /jvc0w2  --> 
   </div>
   <!-- /jvc0w1 clearfix --> 
   <div class="jvcs0 clearfix"> 
    <div class="spsidebar"> 
     <div class="spheader">
      <a href="/en/download/help/index.xml">Help Resources</a>
     </div> 
     <ul> 
      <li><a href="/en/download/help/index_installing.xml">Installing Java</a></li> 
      <li id="olderVersions"><a href="/en/download/faq/remove_olderversions.xml">Remove Older Versions</a></li> 
      <li><a href="/en/download/help/disable_browser.xml">Disable Java</a></li> 
      <li><a href="/en/download/help/index_using.xml">Using Java</a></li> 
      <li><a href="/en/download/faq/index_general.xml"><b>General Questions</b></a></li> 
      <li><a href="/en/download/faq/index_mobile.xml">Mobile Java</a></li> 
      <li><a href="/en/security/">Security</a></li> 
      <li><a href="/en/download/support.jsp">Support Options</a></li> 
     </ul> 
    </div> 
    <br> 
    <!-- BEGIN: jWidget_C/Raw-HTML/Display --> 
    <a href="http://www.prestoexperts.com/lp/java-help-3/?BanID=22489" target="_top"> <img src="/ga/images/liveperson_banner170x134.jpg" alt="Find expert help on Java installation and setup" width="170" height="134"> </a> 
    <br> 
    <!-- END: jWidget_C/Raw-HTML/Display --> 
   </div>
   <!--  /jvcs0 clearfix --> 
  </div>
  <!-- /jvc0 --> 
  <!-- BEGIN: jWidget_C/Footer/Display --> 
  <div class="jvf0"> 
   <div class="jvf0"> 
    <script src="/ga/js/footer.min.js"></script> 
    <p> <a href="/en/selectlanguage.jsp" title="Select Language">Select Language</a> | <a href="/en/about/" title="About Java">About Java</a> | <a href="/en/download/support.jsp" title="Support">Support</a> | <a href="/en/download/faq/develop.xml" title="Developers">Developers</a> | <a href="https://ora-java.custhelp.com/ci/documents/detail/5/2142/12/dc6484bd4764542e486ad251ccb32be5f2e9be23" onclick="return popFeedback('https://ora-java.custhelp.com/ci/documents/detail/5/2142/12/dc6484bd4764542e486ad251ccb32be5f2e9be23');" id="feedback-link" title="Feedback">Feedback</a> <br> <a href="https://www.oracle.com/html/privacy.html" title="Privacy">Privacy</a> |&nbsp;<a><span id="teconsent"></span></a>&nbsp; | <a href="https://www.oracle.com/html/terms.html" title="Terms of Use">Terms of Use</a> | <a href="https://www.oracle.com/html/3party.html" title="Trademarks">Trademarks</a> | <a href="/en/about/disclaimer.jsp" title="Disclaimer">Disclaimer</a> </p> 
    <a href="https://www.oracle.com/" class="jvsun0">Oracle</a> 
   </div> 
  </div> 
  <!-- END: jWidget_C/Footer/Display --> 
  <!--[if gte IE 6]><!--> 
  <script src="/ga/js/global.js" type="text/javascript" charset="utf-8"></script> 
  <!-- <![endif]--> 
  <script language="JavaScript">
		<!--
			var s_channel="javac:Support:FAQ";
			var s_pageName="javac:Support:FAQ:release_changes.xml";
			var s_prop19="en_javac:Support:FAQ:release_changes.xml";
			var s_charSet="UTF-8";
		//-->
		</script> 
  <script language="JavaScript" src="/ga/js/s_code_remote.js"></script> 
  <script>
			userAgent = navigator.userAgent;
			userAgent = userAgent == null ? "" : userAgent.toLowerCase();
			
			if (userAgent.indexOf('mac') != -1){
				document.getElementById("olderVersions").style.display = "none"
			}
		</script>   
 </body>
</html>