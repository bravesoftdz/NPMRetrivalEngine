<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head> 
  <!-- Run date = July 22, 2005 11:45:55 --> 
  <meta name="Generator" content=" Oracle DARB XHTML converter - Version 4.5 Build 274"> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
  <meta http-equiv="Content-Script-Type" content="text/javascript"> 
  <title> Integrating with Third-Party Access Management Systems </title> 
  <link rel="stylesheet" type="text/css" href="blafdoc.css" title="default"> 
  <link rel="prev" href="custom.htm" title="Previous"> 
  <link rel="next" href="exp_imp.htm" title="Next"> 
  <link rel="up" href="toc.htm" title="Up"> 
  <link rel="contents" href="toc.htm" title="Contents"> 
  <link rel="copyright" href="../../dcommon/html/cpyr.htm" title="Copyright"> 
  <link rel="index" href="index.htm" title="Index"> 
  <link rel="glossary" href="glossary.htm" title="Glossary"> 
 </head> 
 <body> 
  <div class="header"> 
   <a id="top" name="top"></a> 
   <div class="zz-skip-header">
    <a href="#BEGIN">Skip Headers</a>
   </div> 
   <table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%"> 
    <tbody>
     <tr> 
      <td align="left" valign="top"> <b>Oracle® Application Server Single Sign-On Administrator's Guide </b> <br> <b>10<span class="italic">g</span> Release 2 (10.1.2) </b> <br> B14078-02 </td> 
      <td valign="bottom" align="right"> 
       <table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225"> 
        <tbody>
         <tr>
          <td>&nbsp;</td> 
          <td align="center" valign="top"><a href="../../index.htm"><img src="../../dcommon/gifs/doclib.gif" alt="Go To Documentation Library" border="0"><br><span class="icon">Home</span></a></td> 
          <td align="center" valign="top"><a href="../../idmanage.htm"><img src="../../dcommon/gifs/doclib.gif" alt="Go To Product List" border="0"><br><span class="icon">Solution Area</span></a></td> 
          <td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" border="0"><br><span class="icon">Contents</span></a></td> 
          <td align="center" valign="top"><a href="index.htm"><img src="../../dcommon/gifs/index.gif" alt="Go To Index" border="0"><br><span class="icon">Index</span></a></td> 
         </tr> 
        </tbody>
       </table> </td> 
     </tr> 
    </tbody>
   </table> 
   <hr> 
   <table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100"> 
    <tbody>
     <tr> 
      <td align="center"> <a href="custom.htm"> <img src="../../dcommon/gifs/leftnav.gif" alt="Previous" border="0"><br><span class="icon">Previous</span></a> </td> 
      <td align="center"> <a href="exp_imp.htm"> <img src="../../dcommon/gifs/rightnav.gif" alt="Next" border="0"><br><span class="icon">Next</span></a> </td> 
      <td>&nbsp;</td> 
     </tr> 
    </tbody>
   </table> 
   <a name="BEGIN"></a> 
  </div>
  <!-- class="header" --> 
  <div class="ind"> 
   <!-- End Header -->
   <a id="BABIJGJI" name="BABIJGJI"></a>
   <a id="i1011555" name="i1011555"></a> 
   <h1 class="chapter"><span class="secnum">13 </span> <a name="SSOAG013"></a>Integrating with Third-Party Access Management Systems </h1> 
   <p>This chapter explains how to integrate OracleAS Single Sign-On with third-party access management products. It describes how third-party integration works; then it presents the integration APIs. Finally, it provides an example of how to integrate OracleAS Single Sign-On with a third-party access management system. </p> 
   <p>An enterprise that has a third-party system in place can gain access to the OracleAS suite by building an authentication adapter that enables the OracleAS Single Sign-On server to act as an authentication gateway between the third-party system and Oracle applications. </p> 
   <p>The chapter contains the following topics: </p> 
   <ul> 
    <li type="disc"> <p><a href="#i1009030">How Third-Party Access Management Works</a> </p> </li> 
    <li type="disc"> <p><a href="#i1009598">Synchronizing the Third-Party Repository with Oracle Internet Directory</a> </p> </li> 
    <li type="disc"> <p><a href="#i1009094">Third-Party Integration Modules</a> </p> </li> 
    <li type="disc"> <p><a href="#i1009152">Integration Case Study: SSOAcme</a> </p> </li> 
   </ul>
   <a id="i1009030" name="i1009030"></a> 
   <div class="sect1"> 
    <a id="sthref578" name="sthref578"></a> 
    <h2 class="sect1"><span class="secnum">13.1 </span>How Third-Party Access Management Works<a id="sthref579" name="sthref579"></a><a id="sthref580" name="sthref580"></a> </h2> 
    <p><a id="sthref581" name="sthref581"></a>In third-party access management, the OracleAS Single Sign-On server, the third-party access management server, and the partner application form a chain of trust. The OracleAS Single Sign-On server delegates authentication to the third-party access management server, becoming a single sign-on-enabled application itself. Oracle applications continue to work only with the OracleAS Single Sign-On server and are unaware of the third-party access management server. Implicitly, however, they trust the third-party server. </p> 
    <p>For OracleAS Single Sign-On to issue users an authentication token under this arrangement, the third-party access management server must pass the OracleAS single sign-on server the user's identity by setting HTTP headers or by using some other mechanism. Once it obtains the user's identity, the OracleAS Single Sign-On server functions as before, authenticating and redirecting users to its partner applications. <a href="#i1011173">Figure 13-1</a> illustrates the process. </p> 
    <div class="figure"> 
     <a id="i1011173" name="i1011173"></a>
     <a id="sthref582" name="sthref582"></a> 
     <p class="titleinfigure">Figure 13-1 Accessing Oracle Partner Applications Using a Third-Party Server</p> 
     <img src="./img/ssoag035.gif" alt="Description of Figure 13-1  follows" title="Description of Figure 13-1  follows"> 
     <br>
     <a id="sthref583" name="sthref583" href="./img_text/ssoag035.htm">Description of "Figure 13-1 Accessing Oracle Partner Applications Using a Third-Party Server"</a> 
     <br>
     <br> 
    </div>
    <!-- class="figure" --> 
    <p>The illustration captures two possible scenarios:<a id="sthref584" name="sthref584"></a> </p> 
    <div class="sect2"> 
     <a id="sthref585" name="sthref585"></a> 
     <h3 class="sect2"><span class="secnum">13.1.1 </span>Scenario 1: The user has not yet authenticated to the third-party server </h3> 
     <ol type="1" start="1"> 
      <li> <p>The unauthenticated user attempts to access an application protected by OracleAS Single Sign-On. </p> </li> 
      <li> <p>The application redirects the user to the OracleAS Single Sign-On server for authentication. As part of this redirection, the following occurs: </p> 
       <ol type="a"> 
        <li> <p>The OracleAS Single Sign-On server has the third-party agent, typically a module on the Oracle HTTP Server, authenticate the user. You install this module when you install the third-party adapter. Note that this module resides only on the single sign-on server. It does not reside on the application server. </p> 
         <div align="center"> 
          <div class="inftblnote"> 
           <br>
           <table class="Note oac_no_warn" summary="This is a layout table to format a note" title="This is a layout table to format a note" dir="ltr" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0"> 
            <tbody> 
             <tr> 
              <td align="left"> <p class="notep1">Note:</p>See <a href="#i1009152">"Integration Case Study: SSOAcme"</a> for more about the third-party agent. </td> 
             </tr> 
            </tbody> 
           </table>
           <br> 
          </div>
          <!-- class="inftblnote --> 
         </div> </li> 
        <li> <p>The third-party server sets a token in the user's browser. </p> </li> 
        <li> <p>The OracleAS Single Sign-On server retrieves the token from the browser. </p> </li> 
        <li> <p>The OracleAS Single Sign-On server verifies the token with the third-party server. </p> </li> 
       </ol> <p>After token verification, the OracleAS Single Sign-On server returns the user—and the authenticated user information—to the requested application. </p> </li> 
      <li> <p>The application provides content to the user. </p> </li> 
     </ol> 
    </div>
    <!-- class="sect2" --> 
    <div class="sect2"> 
     <a id="sthref586" name="sthref586"></a> 
     <h3 class="sect2"><span class="secnum">13.1.2 </span>Scenario 2: The user has already authenticated to the third-party server </h3> 
     <ol type="1" start="1"> 
      <li> <p>The authenticated user attempts to access an application protected by OracleAS Single Sign-On. </p> </li> 
      <li> <p>The application redirects the user to the OracleAS Single Sign-On server for authentication. As part of this redirection, the following occurs: </p> 
       <ol type="a"> 
        <li> <p>The OracleAS Single Sign-On server retrieves the token from the browser (step 2c in scenario 1). </p> </li> 
        <li> <p>The OracleAS Single Sign-On server verifies the token with the third-party server (step 2d in scenario 1). </p> </li> 
       </ol> <p>After token verification, the OracleAS Single Sign-On server returns the user to the requested application. </p> </li> 
      <li> <p>The application provides content to the user.<a id="sthref587" name="sthref587"></a><a id="sthref588" name="sthref588"></a> </p> 
       <div class="inftblnote"> 
        <br>
        <table class="Note oac_no_warn" summary="This is a layout table to format a note" title="This is a layout table to format a note" dir="ltr" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0"> 
         <tbody> 
          <tr> 
           <td align="left"> <p class="notep1">Note:</p>If the single sign-on systems involved are to be accessible to all authorized users, the user repository must be centralized in one place. This means that, before deployment, users must be synchronized between Oracle Internet Directory and the external repository if this repository is not also Oracle Internet Directory. </td> 
          </tr> 
         </tbody> 
        </table>
        <br> 
       </div>
       <!-- class="inftblnote --> </li> 
     </ol> 
    </div>
    <!-- class="sect2" --> 
   </div>
   <!-- class="sect1" --> 
   <a id="i1009598" name="i1009598"></a> 
   <div class="sect1"> 
    <a id="sthref589" name="sthref589"></a> 
    <h2 class="sect1"><span class="secnum">13.2 </span>Synchronizing the Third-Party Repository with Oracle Internet Directory<a id="sthref590" name="sthref590"></a><a id="sthref591" name="sthref591"></a><a id="sthref592" name="sthref592"></a> </h2> 
    <p>The authentication scenario presented in the preceding steps assumes either that the user repository is Oracle Internet Directory or that the repository is a third-party directory or database. If the repository is the latter, the user name information must be synchronized with the user entry in Oracle Internet Directory. This synchronization enables the single sign-on server to retrieve the user attributes required by applications enabled for single sign-on. </p> 
    <div align="center"> 
     <div class="inftblnote"> 
      <br>
      <table class="Note oac_no_warn" summary="This is a layout table to format a note" title="This is a layout table to format a note" dir="ltr" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0"> 
       <tbody> 
        <tr> 
         <td align="left"> <p class="notep1">Note:</p>Third-party access management integration cannot proceed if the synchronization mechanism is not in place. </td> 
        </tr> 
       </tbody> 
      </table>
      <br> 
     </div>
     <!-- class="inftblnote --> 
    </div> 
    <p>To synchronize the third-party repository with Oracle Internet Directory, use either Oracle Directory Integration and Provisioning or bulk load tools. For details, see the chapters about directory synchronization in <span class="italic"><a href="../../idmanage.1012/b14085/toc.htm">Oracle Identity Management Integration Guide</a></span>. </p> 
   </div>
   <!-- class="sect1" --> 
   <a id="i1009094" name="i1009094"></a> 
   <div class="sect1"> 
    <a id="sthref593" name="sthref593"></a> 
    <h2 class="sect1"><span class="secnum">13.3 </span>Third-Party Integration Modules </h2> 
    <p>There are two ways to achieve third-party integration: you can use existing, vendor-supplied packages, or you can build your own third-party adapter, using interfaces provided by Oracle. </p> 
    <div class="sect2"> 
     <!-- infolevel="all" infotype="General" -->
     <a id="sthref594" name="sthref594"></a> 
     <h3 class="sect2"><span class="secnum">13.3.1 </span>Using Vendor-Supplied Packages </h3> 
     <p>Several third-party access management vendors provide authentication adapters for the OracleAS Single Sign-On server. These products enable you to integrate a third-party system with the Oracle system without having to write your own code. The link that follows provides information about these vendors' products. All of the vendors listed certify that their products work with OracleAS Single Sign-On. See the section Single Sign-On under the heading Documentation, which appears near the bottom of the page. Note that this material cannot be found under the Services menu. </p> 
     <pre xml:space="preserve" class="oac_no_warn"><a href="http://otn.oracle.com/products/id_mgmt/partners/index.html">http://www.oracle.com/technology/products/id_mgmt/partners/index.html</a>

</pre> 
     <p>If you decide to use a third-party adapter, be aware that the instructions for implementing the adapter are contained not in this document, but in vendor documents. If you need help implementing the adapter, you must contact the vendor directly. The link provided includes contact information. </p> 
    </div>
    <!-- class="sect2" --> 
    <div class="sect2"> 
     <!-- infolevel="all" infotype="General" -->
     <a id="sthref595" name="sthref595"></a> 
     <h3 class="sect2"><span class="secnum">13.3.2 </span>Building Your Own Package </h3> 
     <p>You can use the Java toolkit <code>oracle.security.sso.ias904.toolkit</code> to build your own third-party integration adapter. The toolkit consists of two interfaces, one for performing authentication, the other for setting deployment-specific cookies. The OracleAS Single Sign-On server invokes the first interface during authentication. It invokes the second, the cookie adapter, after it has successfully determined the user's identity. </p> 
     <p>This section contains the following topics describing the interfaces and related classes in <code>oracle.security.sso.ias904.toolkit</code>: </p> 
     <ul> 
      <li type="disc"> <p><a href="#BABIJGAB">Guidelines for Using the Interfaces</a> </p> </li> 
      <li type="disc"> <p><a href="#BABGHFDI">The Classes and Interfaces</a> </p> </li> 
      <li type="disc"> <p><a href="#BABEIDII">Configuration Steps</a> </p> </li> 
     </ul>
     <a id="BABIJGAB" name="BABIJGAB"></a> 
     <div class="sect3"> 
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref596" name="sthref596"></a> 
      <h4 class="sect3"><span class="secnum">13.3.2.1 </span>Guidelines for Using the Interfaces </h4> 
      <p>The authentication interface is required only if you are building your own third-party integration adapter. The OracleAS single sign-on server uses the interface implementation to determine the user's identity during authentication. The cookie interface is provided for your convenience. Use it to set additional cookies once the user is authenticated. You may, for example, want to use this feature to set user preferences. You do not need the cookie interface to achieve third-party integration. If you choose to use it, you can include it in your own adapter or in one provided by a vendor. </p> 
     </div>
     <!-- class="sect3" --> 
     <a id="BABGHFDI" name="BABGHFDI"></a> 
     <div class="sect3"> 
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref597" name="sthref597"></a> 
      <h4 class="sect3"><span class="secnum">13.3.2.2 </span>The Classes and Interfaces </h4> 
      <p>The classes and interfaces in the kit perform the following functions: </p> 
      <ul> 
       <li type="disc"> <p><a href="#i1009109">Authentication Using a Token</a> </p> </li> 
       <li type="disc"> <p><a href="#BABHHCGB">User Information Constructors</a> </p> </li> 
       <li type="disc"> <p><a href="#i1011569">Setting External Cookies</a> </p> </li> 
       <li type="disc"> <p><a href="#BABGIDHJ">Exception Handling</a> </p> </li> 
      </ul>
      <a id="i1009109" name="i1009109"></a> 
      <div class="sect4"> 
       <a id="sthref598" name="sthref598"></a> 
       <h5 class="sect4"><span class="secnum">13.3.2.2.1 </span>Authentication Using a Token </h5> 
       <p>The <code>IPASAuthInterface.java</code> package is invoked by the OracleAS Single Sign-On server during authentication. If authentication using a token is to be supported, the implementer of this interface must return the user name to the OracleAS Single Sign-On server by retrieving the user identity in a secure fashion—from a securely set HTTP header, for instance, or from a secure cookie. Here is the interface: </p> 
       <p><span class="underline">The IPASAuthInterface.java Interface</span> </p> 
       <pre xml:space="preserve" class="oac_no_warn">package oracle.security.sso.ias904.toolkit;
 
/**
&nbsp;* Oracle Single Sign-On server authentication interface. This package can
&nbsp;* be used to integrate with custom authentication mechanism or third-party
&nbsp;* access management system.
&nbsp;*/
public interface IPASAuthInterface
{
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method returns IPASUserInfo object that contains either user name,
&nbsp;&nbsp;&nbsp;* subscriber name, and requested URL, or full user and subscriber
&nbsp;&nbsp;&nbsp;* attribute mappings, including DN, GUID, and requested URL.
&nbsp;&nbsp;&nbsp;* @param  request - HTTP request object
&nbsp;&nbsp;&nbsp;* @return IPASUserInfo object that contains 
&nbsp;&nbsp;&nbsp;* @authenticated user information
&nbsp;&nbsp;&nbsp;* @see oracle.security.sso.ias904.toolkit.IPASUserInfo
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;IPASUserInfo authenticate(HttpServletRequest request)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws IPASAuthException, IPASInsufficientCredException;
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method returns a page URL - user will be redirected to 
&nbsp;&nbsp;&nbsp;* the page to enter login credentials
&nbsp;&nbsp;&nbsp;* @param request - HTTP request object
&nbsp;&nbsp;&nbsp;* @param message - Message to be displayed in the page
&nbsp;&nbsp;&nbsp;* @return The page URL for collecting user login credential
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;java.net.URL getUserCredentialPage(HttpServletRequest request,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String message);
}
 
</pre> 
      </div>
      <!-- class="sect4" --> 
      <a id="BABHHCGB" name="BABHHCGB"></a> 
      <div class="sect4"> 
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref599" name="sthref599"></a> 
       <h5 class="sect4"><span class="secnum">13.3.2.2.2 </span>User Information Constructors </h5> 
       <p>The user information class <code>IPASUserInfo.java</code> provides constructors for user logins. </p> 
       <p><span class="underline">The IPASUserInfo.java Class</span> </p> 
       <pre xml:space="preserve" class="oac_no_warn">package oracle.security.sso.ias904.toolkit;
/**
&nbsp;* User information class
&nbsp;*/
public class IPASUserInfo
{
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* Constructor with user login name that belongs to default subscriber
&nbsp;&nbsp;&nbsp;* @param userNickName - User login name
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;IPASUserInfo(String userNickName);
 
 
&nbsp;&nbsp;/**
   * Constructor with user login name that belongs to default subscriber
&nbsp;&nbsp;&nbsp;* @param userNickName - User login name
&nbsp;&nbsp;&nbsp;* @param subscriberName - The user's subscriber name 
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;IPASUserInfo(String userNickName, String subscriberName);
 
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* Constructor with user login name that belongs to default subscriber
&nbsp;&nbsp;&nbsp;* @param userNickName - User login name
&nbsp;&nbsp;&nbsp;* @param userDN - User directory distinguished name
&nbsp;&nbsp;&nbsp;* @param userGUID - User directory GUID value
&nbsp;&nbsp;&nbsp;* @param subscriberName - The subscriber name for this user
&nbsp;&nbsp;&nbsp;* @param subscriberDN - The subscriber's directory distinguished name 
&nbsp;&nbsp;&nbsp;* for this user
&nbsp;&nbsp;&nbsp;* @param subscriberGUID - The subscriber's directory GUID value 
&nbsp;&nbsp;&nbsp;* for this user
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;IPASUserInfo(String userNickName, String userDN, String userGUID,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String subscriberName, String subscriberDN, String subscriberGUID);

&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method returns subscriber distinguished name
&nbsp;&nbsp;&nbsp;* @return subscriber distinguished name
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;String getSubscriberDN();
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method sets subscriber distinguished name
&nbsp;&nbsp;&nbsp;* @param subDn - subscriber distinguished name
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;void setSubscriberDN(String subDn);
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method returns subscriber GUID value
&nbsp;&nbsp;&nbsp;* @return subscriber GUID value
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;String getSubscriberGUID();
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method sets subscriber GUID value
&nbsp;&nbsp;&nbsp;* @param subGuid - subscriber GUID value
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;void setSubscriberGUID(String subGuid);
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method returns subscriber name
&nbsp;&nbsp;&nbsp;* @return subscriber name
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;String getSubscriberName();
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method sets subscriber name
&nbsp;&nbsp;&nbsp;* @param subscriber name
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;void setSubscriberName(String subName);
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method returns user login name
&nbsp;&nbsp;&nbsp;* @return user login name
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;String getUserName();
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method sets user login name
&nbsp;&nbsp;&nbsp;* @param user login name
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;void setUserName(String userName);
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method returns user distinguished name
&nbsp;&nbsp;&nbsp;* @return user distinguished name
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;String getUserDN();
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method sets user distinguished name
&nbsp;&nbsp;&nbsp;* @param user distinguished name
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;void setUserDN(String userDN);
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method returns user GUID value
&nbsp;&nbsp;&nbsp;* @return user GUID value
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;String getUserGUID();
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* This method sets user GUID value
&nbsp;&nbsp;&nbsp;* @param user GUID value
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;void setUserGUID(String userGUID);
}
</pre> 
      </div>
      <!-- class="sect4" --> 
      <a id="i1011569" name="i1011569"></a> 
      <div class="sect4"> 
       <a id="sthref600" name="sthref600"></a> 
       <h5 class="sect4"><span class="secnum">13.3.2.2.3 </span>Setting External Cookies </h5> 
       <p>The <code>IPASCustomCookieInterface.java</code> interface enables you to set optional, deployment-specific cookies. These cookies are set only if authentication is successful and the cookie adapter corresponds to the appropriate authentication level. </p> 
       <p><span class="underline">The IPASCustomCookieInterface.java Interface</span> </p> 
       <pre xml:space="preserve" class="oac_no_warn">package oracle.security.sso.ias904.toolkit;
 
/**
&nbsp;* Oracle Single Sign-On server invokes this method to obtain 
&nbsp;* user-defined custom cookies which will be sent to the user 
&nbsp;* upon successful login.
&nbsp;*/
public interface IPASCustomCookieInterface
{
&nbsp;/**
&nbsp;&nbsp;&nbsp;* Oracle Single Sign-On server invokes this method to obtain 
&nbsp;&nbsp;&nbsp;* user-defined custom cookies which will be sent
&nbsp;&nbsp;&nbsp;* to the user upon successful login.
&nbsp;&nbsp;&nbsp;* @param user - IPASUserInfo object that contains 
&nbsp;&nbsp;&nbsp;* the authenticated user information
&nbsp;&nbsp;&nbsp;* @param request -  HTTP request object
&nbsp;&nbsp;&nbsp;* @return Array of javax.servlet.http.Cookie objects
&nbsp;&nbsp;&nbsp;* @see javax.servlet.http.Cookie
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;public javax.servlet.http.Cookie[] getCustomCookie(IPASUserInfo user,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HttpServletRequest request);
}

</pre> 
      </div>
      <!-- class="sect4" --> 
      <a id="BABGIDHJ" name="BABGIDHJ"></a> 
      <div class="sect4"> 
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref601" name="sthref601"></a> 
       <h5 class="sect4"><span class="secnum">13.3.2.2.4 </span>Exception Handling </h5> 
       <p>This section lists the exception handling classes in <code>oracle.security.sso.ias904.toolkit</code>. </p> 
       <p><span class="underline">The IPASException.java Class</span> </p> 
       <pre xml:space="preserve" class="oac_no_warn">package oracle.security.sso.ias904.toolkit;
 
/**
&nbsp;* Generic exception class
&nbsp;*/
public class IPASException
&nbsp;&nbsp;&nbsp;extends Exception
{
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* Default constructor with no error message
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;public IPASException()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
&nbsp;&nbsp;&nbsp;}
 
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* Constructor with an error message
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;public IPASException(String message)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(message);
&nbsp;&nbsp;&nbsp;}
}
 
</pre> 
       <p><span class="underline">The IPASAuthException.java Class</span> </p> 
       <pre xml:space="preserve" class="oac_no_warn">
package oracle.security.sso.ias904.toolkit;
 
/**
&nbsp;* Authentication failure exception class
&nbsp;*/
public class IPASAuthException
&nbsp;&nbsp;&nbsp;extends IPASException
{
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* Default constructor with no error message
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;public IPASAuthException()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* Constructor with an error message
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;public IPASAuthException(String message)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(message);
&nbsp;&nbsp;&nbsp;}
}
 
</pre> 
       <p><span class="underline">The IPASInsufficientCredException.java Class</span> </p> 
       <pre xml:space="preserve" class="oac_no_warn">
package oracle.security.sso.ias904.toolkit;
 
/**
&nbsp;* Authentication failure exception due to insufficient user credentials
&nbsp;*/
public class IPASInsufficientCredException
&nbsp;&nbsp;&nbsp;extends IPASException
{
&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;* Constructor with an error message
&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;public IPASInsufficientCredException (String message)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(message);
&nbsp;&nbsp;&nbsp;}
}

</pre> 
      </div>
      <!-- class="sect4" --> 
     </div>
     <!-- class="sect3" --> 
     <a id="BABEIDII" name="BABEIDII"></a> 
     <div class="sect3"> 
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref602" name="sthref602"></a> 
      <h4 class="sect3"><span class="secnum">13.3.2.3 </span>Configuration Steps </h4> 
      <p>To create your own third-party integration adapter using the interfaces, follow these steps: </p> 
      <ol type="1" start="1"> 
       <li> <p>In the third-party access management system, create rules that protect these URIs: </p> <pre xml:space="preserve" class="oac_no_warn">/pls/orasso/orasso.wwsso_app_admin.ls_login
/sso/auth/*

</pre> </li> 
       <li> <p>Register this logout URI with the third-party access management system: </p> <pre xml:space="preserve" class="oac_no_warn">/pls/orasso/orasso.wwsso_app_admin.ls_logout
</pre> </li> 
      </ol> 
      <div align="center"> 
       <div class="inftblnote"> 
        <br>
        <table class="Note oac_no_warn" summary="This is a layout table to format a note" title="This is a layout table to format a note" dir="ltr" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0"> 
         <tbody> 
          <tr> 
           <td align="left"> <p class="notep1">Note:</p>In the remaining steps and in the sample package that follows, change all instances of <code>acme</code> and <code>SSOAcme</code> to your company name. </td> 
          </tr> 
         </tbody> 
        </table>
        <br> 
       </div>
       <!-- class="inftblnote --> 
      </div> 
      <ol type="1" start="3"> 
       <li> <p>Create a Java file for your package. For help, see the sample file in <a href="#i1009152">"Integration Case Study: SSOAcme"</a>. The sample file is called <code>SSOAcmeAuth.java</code>. Before it is compiled, this package directive must be added to it: </p> <pre xml:space="preserve" class="oac_no_warn">package acme.security.ssoplugin;

</pre> </li> 
       <li> <p>Compile the file, including <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/sso/lib/ipastoolkit.jar</code> in the class path. The sample file <code>SSOAcmeAuth.java</code> is compiled this way: </p> <pre xml:space="preserve" class="oac_no_warn"><span class="italic">ORACLE_HOME</span>/jdk/bin/javac -classpath <span class="italic">ORACLE_HOME</span>/sso/lib/ipastoolkit.jar:
<span class="italic">ORACLE_HOME</span>/lib/servlet.jar -d <span class="italic">ORACLE_HOME</span>/sso/plugin SSOAcmeAuth.java

</pre> <p>This command creates <code>SSOAcmeAuth.class</code> and places it in the directory <code><span class="codeinlineitalic">ORACLE_HOME</span></code><code>/sso/plugin/acme/security/ssoplugin</code>. </p> </li> 
       <li> <p>In the <code>policy.properties</code> file, replace the simple authentication plugin with the plugin that you created in step 3. The simple authentication plugin looks like this: </p> <pre xml:space="preserve" class="oac_no_warn">MediumSecurity_AuthPlugin = oracle.security.sso.server.auth.SSOServerAuth

</pre> <p>The sample plugin looks like this: </p> <pre xml:space="preserve" class="oac_no_warn">MediumSecurity_AuthPlugin = acme.security.ssoplugin.SSOAcmeAuth
</pre> 
        <div align="center"> 
         <div class="inftblnote"> 
          <br>
          <table class="Note oac_no_warn" summary="This is a layout table to format a note" title="This is a layout table to format a note" dir="ltr" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0"> 
           <tbody> 
            <tr> 
             <td align="left"> <p class="notep1">Note:</p>When editing <code>policy.properties</code>, take care not to insert blank space at the end of a line. </td> 
            </tr> 
           </tbody> 
          </table>
          <br> 
         </div>
         <!-- class="inftblnote --> 
        </div> </li> 
       <li> <p>If you decided to implement the custom cookie interface, add the class name of the implementation to <code>policy.properties</code>: </p> <pre xml:space="preserve" class="oac_no_warn"># Custom Cookie Provider Class name
# ---------------------------------
# Sample custom cookie tester provider class

CustomCookie_ProviderPlugin = <span class="italic">class_name</span>

</pre> </li> 
       <li> <p>Designate the minimum authentication level at which the custom cookie is set if the user authenticates successfully: </p> <pre xml:space="preserve" class="oac_no_warn"># Custom Cookie auth level
# ------------------------
CustomCookieAuthLevel = <span class="italic">authentication_level</span>

</pre> <p>If you are not using multilevel authentication and are using default settings for authentication adapter levels, you can set this value to: </p> <pre xml:space="preserve" class="oac_no_warn">CustomCookieAuthLevel = MediumSecurity

</pre> </li> 
       <li> <p>Restart the single sign-on middle tier: </p> <pre xml:space="preserve" class="oac_no_warn"><span class="italic">ORACLE_HOME</span>/opmn/bin/opmnctl restartproc process-type=HTTP_Server
</pre> <pre xml:space="preserve" class="oac_no_warn"><span class="italic">ORACLE_HOME</span>/opmn/bin/opmnctl restartproc process-type=OC4J_SECURITY

</pre> </li> 
       <li> <p>Test the integrated system. </p> </li> 
      </ol> 
     </div>
     <!-- class="sect3" --> 
    </div>
    <!-- class="sect2" --> 
    <a id="i1009205" name="i1009205"></a> 
    <div class="sect2"> 
     <a id="sthref603" name="sthref603"></a> 
     <h3 class="sect2"><span class="secnum">13.3.3 </span>Logging Out of the Integrated System<a id="sthref604" name="sthref604"></a> </h3> 
     <p>Before proceeding with this section, make sure that you understand the concept of single sign-off and know how implement it. Read the section <a href="concepts.htm#i1006524">"Single Sign-Off"</a> in <a href="concepts.htm#CIHFADBJ">Chapter 1</a>. </p> 
     <p>Third-party logout takes two forms: </p> 
     <ul> 
      <li type="disc"> <p>The user initiates a logout request using the third-party access management system. </p> <p>In this scenario, the user clicks a logout link that invokes a logout handler in the third-party system. The third-party logout flow cleans up its own session. After cleanup, The third-party system must invoke the OracleAS Single Sign-On logout handler. Invoking the OracleAS Single Sign-On logout handler ensures that the user is logged out of all applications protected by the OracleAS Single Sign-On server. To perform single sign-on logout, the third-party system must redirect the user to the following URL: </p> <pre xml:space="preserve" class="oac_no_warn">http://<span class="italic">single_sign-on_host</span>:<span class="italic">single_sign-on_port</span>/pls/orasso/orasso.wwsso_app_
admin.ls_logout?p_done_url=<span class="italic">done_url</span>

</pre> <p>or, if SSL is enabled, to this URL: </p> <pre xml:space="preserve" class="oac_no_warn">https://<span class="italic">single_sign-on_host</span>:<span class="italic">single_sign-on_ssl_port</span>/pls/orasso/orasso.wwsso_app_admin.ls_logout?p_done_url=<span class="italic">done_url</span>

</pre> <p><code><span class="codeinlineitalic">done_url</span></code> is the URL to which the user is redirected after logout. </p> </li> 
      <li type="disc"> <p>The user initiates a logout request using the OracleAS Single Sign-On system </p> <p>In this scenario, the user clicks a logout link in an Oracle partner application. This invokes the OracleAS Single Sign-On logout handler. When logout is finished, the user should also be logged out from the third-party system. Concurrent logout is effected by registering the Oracle logout handler (<code>ls_logout</code> in the URL immediately preceding) with the third-party system. The third-party system cleans up the third-party session when it detects that the Oracle logout handler is being invoked.<a id="sthref605" name="sthref605"></a> </p> <p>If you have chosen to use an adapter from a third party, see that vendor's documentation to learn how logout is actually implemented. </p> </li> 
     </ul> 
    </div>
    <!-- class="sect2" --> 
   </div>
   <!-- class="sect1" --> 
   <a id="i1009152" name="i1009152"></a> 
   <div class="sect1"> 
    <a id="sthref606" name="sthref606"></a> 
    <h2 class="sect1"><span class="secnum">13.4 </span> Integration Case Study: SSOAcme </h2> 
    <p>Consider the case of SSOAcme, a product that offers single sign-on authentication to protected resources. SSOAcme consists of two components: the SSOAcme policy server and the SSOAcme agent. The first provides users with a variety of services including user and session management, authentication, and authorization. The second is located on Web servers and Web application servers. It screens requests for resources and determines whether a resource is protected by SSOAcme. </p> 
    <p>Customers who have SSOAcme already installed may want to use it to gain access to OracleAS applications. They can achieve this access by using APIs that enable SSOAcme to talk to Oracle applications by way of OracleAS Single Sign-On. </p> 
    <div align="center"> 
     <div class="inftblnote"> 
      <br>
      <table class="Note oac_no_warn" summary="This is a layout table to format a note" title="This is a layout table to format a note" dir="ltr" border="1" width="80%" frame="hsides" rules="groups" cellpadding="3" cellspacing="0"> 
       <tbody> 
        <tr> 
         <td align="left"> <p class="notep1">Note:</p>SSOAcme is a fictitious product, used for the purposes of illustration only. </td> 
        </tr> 
       </tbody> 
      </table>
      <br> 
     </div>
     <!-- class="inftblnote --> 
    </div> 
    <p>This section contains the following topics: </p> 
    <ul> 
     <li type="disc"> <p><a href="#i1010187">Sample Integration Package</a> </p> </li> 
     <li type="disc"> <p><a href="#i1011053">Migrating the Release 9.0.2 Sample Implementation to Release 10.1.2</a> </p> </li> 
    </ul>
    <a id="i1010187" name="i1010187"></a> 
    <div class="sect2"> 
     <a id="sthref607" name="sthref607"></a> 
     <h3 class="sect2"><span class="secnum">13.4.1 </span>Sample Integration Package </h3> 
     <p><a id="sthref608" name="sthref608"></a>The <code>SSOAcme.java</code> package, presented here, can be used to integrate an existing SSOAcme implementation with OracleAS Single Sign-On. </p> 
     <pre xml:space="preserve" class="oac_no_warn">/**
  * returns IPASUserInfo
/**

/* Copyright (c) 2002, 2003, Oracle Corporation.  All rights reserved.  */

/*
   DESCRIPTION
     Sample class for SSOAcme integration with SSO Server

   PRIVATE CLASSES

   NOTES
     This class implements the SSOServerAuthInterface.
     To enable this integration, replace:
         oracle.security.sso.server.auth.SSOServerAuth
     with
         acme.security.ssoplugin.SSOAcmeAuth
     for the desired security level in policy.properties<a id="sthref609" name="sthref609"></a>.
 */

import java.io.PrintWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import oracle.security.sso.ias904.toolkit.IPASAuthInterface;
import oracle.security.sso.ias904.toolkit.IPASAuthException;
import oracle.security.sso.ias904.toolkit.IPASUserInfo;
import oracle.security.sso.ias904.toolkit.IPASInsufficientCredException;

public class SSOAcmeAuth implements IPASAuthInterface {

    private static String CLASS_NAME = "SSOAcmeAuth";
    private static String ACME_USER_HEADER = "ACME_USER";

    public SSOAcmeAuth() {

    }

    public IPASUserInfo authenticate(HttpServletRequest request)
      throws IPASAuthException, IPASInsufficientCredException {

      String AcmeUserName = null;

      try
       {
         AcmeUserName = request.getHeader(ACME_USER_HEADER);
       }
       catch (Exception e)
       {
         throw new IPASInsufficientCredException("No Acme Header");
       }

       if (AcmeUserName == null)
           throw new IPASInsufficientCredException("No Acme Header");

       IPASUserInfo authUser = new IPASUserInfo(AcmeUserName);

       return authUser;

    }


    public String getUserCredentialPage(HttpServletRequest request,
        String msg) {

        // This function will never have been reached in the case of SSOAcme
        // because the SSOAcme Agent will intercept all requests
        return "http://<span class="italic">error_url</span>";

    }

}<a id="sthref610" name="sthref610"></a>
</pre> 
    </div>
    <!-- class="sect2" --> 
    <a id="i1011053" name="i1011053"></a> 
    <div class="sect2"> 
     <a id="sthref611" name="sthref611"></a> 
     <h3 class="sect2"><span class="secnum">13.4.2 </span>Migrating the Release 9.0.2 Sample Implementation to Release 10.1.2 </h3> 
     <p>This section is provided for the benefit of those who used the release 9.0.2 <a id="ABC1011963" name="ABC1011963"></a>external authentication package to perform third-party authentication. The release 9.0.2 package was written in PL/SQL. The release 10.1.2 package is written in Java. In the lines that follow, the pertinent sections of the two packages appear together. </p>
     <a id="i1009336" name="i1009336"></a> 
     <div class="sect3"> 
      <a id="sthref612" name="sthref612"></a> 
      <h4 class="sect3"><span class="secnum">13.4.2.1 </span>New Authentication Interface </h4> 
      <p>Release 10.1.2: </p> 
      <pre xml:space="preserve" class="oac_no_warn">package acme.security.ssoplugin;

import java.io.PrintWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import oracle.security.sso.server.util.SSODebug;
import oracle.security.sso.ias904.toolkit.IPASAuthInterface;
import oracle.security.sso.ias904.toolkit.IPASAuthException;
import oracle.security.sso.ias904.toolkit.IPASUserInfo;
import oracle.security.sso.ias904.toolkit.IPASInsufficientCredException;

public class SSOAcmeAuth implements IPASAuthInterface {

    private static String CLASS_NAME = "SSOAcmeAuth";
    private static String ACME_USER_HEADER = "ACME_USER";

public SSOAcmeAuth() {
}

public IPASUserInfo authenticate(HttpServletRequest request)
throws IPASAuthException, IPASInsufficientCredException {

</pre> 
      <p>Release 9.0.2: </p> 
      <pre xml:space="preserve" class="oac_no_warn">FUNCTION authenticate_user
  (
   p_user OUT VARCHAR2
  )
  return PLS_INTEGER
IS
 l_http_header varchar(1000);
 l_ssouser wwsec_person.user_name%type := NULL;
BEGIN
</pre> 
     </div>
     <!-- class="sect3" --> 
     <div class="sect3"> 
      <a id="sthref613" name="sthref613"></a> 
      <h4 class="sect3"><span class="secnum">13.4.2.2 </span>Get User Name from HTTP Header </h4> 
      <p>Release 10.1.2: </p> 
      <pre xml:space="preserve" class="oac_no_warn">String AcmeUserName = null;

try
 {
  AcmeUserName = request.getHeader(ACME_USER_HEADER)

</pre> 
      <p>Release 9.0.2: </p> 
      <pre xml:space="preserve" class="oac_no_warn">l_http_header := owa_util.get_cgi_env('HTTP_Acme_USER');
debug_print('Acme ID : ' || l_http_header);
</pre> 
     </div>
     <!-- class="sect3" --> 
     <div class="sect3"> 
      <a id="sthref614" name="sthref614"></a> 
      <h4 class="sect3"><span class="secnum">13.4.2.3 </span>Error Handling if User Name Not Present </h4> 
      <p>Release 10.1.2: </p> 
      <pre xml:space="preserve" class="oac_no_warn">}
catch (Exception e)
{  
   DebugUtil.debug(SSODebug.ERROR, "exception: " + CLASS_NAME, e);
   throw new IPASInsufficientCredException("No Acme Header");
}

if (AcmeUserName == null)
throw new IPASInsufficientCredException("No Acme Header");

</pre> 
      <p>Release 9.0.2: </p> 
      <pre xml:space="preserve" class="oac_no_warn">IF ( (l_ssouser IS NULL) or
    ( INSTR(l_ssouser, GLOBAL_SEPARATOR) != 0) ) THEN
    debug_print('malformed user id: '
      || l_ssouser
      || ' returned by wwsso_auth_external.authenticate_user');
      RAISE EXT_AUTH_FAILURE_EXCEPTION;
ELSE
</pre> 
     </div>
     <!-- class="sect3" --> 
     <div class="sect3"> 
      <a id="sthref615" name="sthref615"></a> 
      <h4 class="sect3"><span class="secnum">13.4.2.4 </span>Return User Name to Single Sign-On Server </h4> 
      <p>Release 10.1.2: </p> 
      <pre xml:space="preserve" class="oac_no_warn">IPASUserInfo authUser = new IPASUserInfo(AcmeUserName);

return authUser;

}

</pre> 
      <p>Release 9.0.2: </p> 
      <pre xml:space="preserve" class="oac_no_warn">p_user := NLS_UPPER(l_ssouser);   -- p-user is the out parameter
return 0;                         -- SUCCESS error code
END IF;<a id="sthref616" name="sthref616"></a>   
</pre> 
     </div>
     <!-- class="sect3" --> 
    </div>
    <!-- class="sect2" --> 
   </div>
   <!-- class="sect1" --> 
  </div> 
  <!-- Start Footer --> 
  <div class="footer"> 
   <hr> 
   <table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%"> 
    <tbody>
     <tr> 
      <td valign="bottom" width="33%"> 
       <table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100"> 
        <tbody>
         <tr>
          <td>&nbsp;</td> 
          <td align="center"> <a href="custom.htm"> <img src="../../dcommon/gifs/leftnav.gif" alt="Previous" border="0"><br><span class="icon">Previous</span></a> </td> 
          <td align="center"> <a href="exp_imp.htm"> <img src="../../dcommon/gifs/rightnav.gif" alt="Next" border="0"><br><span class="icon">Next</span></a> </td> 
         </tr> 
        </tbody>
       </table> </td> 
      <td class="copyrightlogo"> <a href="../../dcommon/html/cpyr.htm"> <img class="copyrightlogo" src="../../dcommon/gifs/oracle.gif" alt="Oracle Logo"><br> <span class="copyrightlogo"> Copyright&nbsp;©&nbsp;1996, 2005,&nbsp;Oracle.&nbsp;All&nbsp;rights&nbsp;reserved. </span> </a> </td> 
      <td valign="bottom" align="right" width="33%"> 
       <table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="225"> 
        <tbody>
         <tr>
          <td>&nbsp;</td> 
          <td align="center" valign="top"><a href="../../index.htm"><img src="../../dcommon/gifs/doclib.gif" alt="Go To Documentation Library" border="0"><br><span class="icon">Home</span></a></td> 
          <td align="center" valign="top"><a href="../../idmanage.htm"><img src="../../dcommon/gifs/doclib.gif" alt="Go To Product List" border="0"><br><span class="icon">Solution Area</span></a></td> 
          <td align="center" valign="top"><a href="toc.htm"><img src="../../dcommon/gifs/toc.gif" alt="Go To Table Of Contents" border="0"><br><span class="icon">Contents</span></a></td> 
          <td align="center" valign="top"><a href="index.htm"><img src="../../dcommon/gifs/index.gif" alt="Go To Index" border="0"><br><span class="icon">Index</span></a></td> 
         </tr> 
        </tbody>
       </table> </td> 
     </tr> 
    </tbody>
   </table> 
  </div>
  <!-- class="footer" -->   
 </body>
</html>