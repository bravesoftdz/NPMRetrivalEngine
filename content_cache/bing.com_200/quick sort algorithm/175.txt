<!doctype html>
<html lang="en">
 <head>
  <meta charset="utf-8">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=900">
  <title>A quick sort algorithm to sort Vectors or arrays. Provides sort and binary search capabilities. : Sort Search&nbsp;«&nbsp;Collections Data Structure&nbsp;«&nbsp;Java</title>
  <meta http-equiv="content-style-type" content="text/css">
  <meta name="author" content="" Demo Source and Support Ltd.'>
  <meta name="copyright" content="2015 Demo Source and Support Ltd.">
  <meta name="description" content="A quick sort algorithm to sort Vectors or arrays. Provides sort and binary search capabilities. : Sort Search&nbsp;«&nbsp;Collections Data Structure&nbsp;«&nbsp;Java">
  <meta name="keywords" content="A quick sort algorithm to sort Vectors or arrays. Provides sort and binary search capabilities. : Sort Search&nbsp;«&nbsp;Collections Data Structure&nbsp;«&nbsp;Java">
  <link rel="shortcut icon" href="http://www.java2s.com/style/favicon.ico">
  <link href="http://java2s.com/style/bootstrap.min.css" rel="stylesheet">
  <link href="http://java2s.com/style/longTutorial.css" rel="stylesheet">
  <script src="http://java2s.com/style/jquery-1.11.0.js"></script>
  <script src="http://java2s.com/style/bootstrap.min.js"></script>
  <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
  <!-- WARNING: Respond.js doesn't work if you view the page via file:-->
  <!--[if lt IE 9]><script src='https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js'></script><script src='https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js'></script><![endif]-->
  <script>$(document).ready(function() {$('[data-toggle=offcanvas]').click(function() {$('.row-offcanvas').toggleClass('active');});});</script> 
 </head>
 <body>
  <div class="container-fluid">
   <div class="row row-offcanvas row-offcanvas-left">
    <div class="col-sm-3 col-md-3 sidebar-offcanvas" id="sidebar" role="navigation">
     <ul style="word-wrap: break-word;" class="nav nav-sidebar">
      <li><a href="http://www.java2s.com">Home</a></li>
      <li><a href="/Code/Java/CatalogJava.htm">Java</a></li>
      <li><a href="/Code/Java/2D-Graphics-GUI/Catalog2D-Graphics-GUI.htm">2D Graphics GUI</a></li>
      <li><a href="/Code/Java/3D/Catalog3D.htm">3D</a></li>
      <li><a href="/Code/Java/Advanced-Graphics/CatalogAdvanced-Graphics.htm">Advanced Graphics</a></li>
      <li><a href="/Code/Java/Ant/CatalogAnt.htm">Ant</a></li>
      <li><a href="/Code/Java/Apache-Common/CatalogApache-Common.htm">Apache Common</a></li>
      <li><a href="/Code/Java/Chart/CatalogChart.htm">Chart</a></li>
      <li><a href="/Code/Java/Class/CatalogClass.htm">Class</a></li>
      <li class="active"><a href="">Collections Data Structure</a></li>
      <li><a href="/Code/Java/Data-Type/CatalogData-Type.htm">Data Type</a></li>
      <li><a href="/Code/Java/Database-SQL-JDBC/CatalogDatabase-SQL-JDBC.htm">Database SQL JDBC</a></li>
      <li><a href="/Code/Java/Design-Pattern/CatalogDesign-Pattern.htm">Design Pattern</a></li>
      <li><a href="/Code/Java/Development-Class/CatalogDevelopment-Class.htm">Development Class</a></li>
      <li><a href="/Code/Java/EJB3/CatalogEJB3.htm">EJB3</a></li>
      <li><a href="/Code/Java/Email/CatalogEmail.htm">Email</a></li>
      <li><a href="/Code/Java/Event/CatalogEvent.htm">Event</a></li>
      <li><a href="/Code/Java/File-Input-Output/CatalogFile-Input-Output.htm">File Input Output</a></li>
      <li><a href="/Code/Java/Game/CatalogGame.htm">Game</a></li>
      <li><a href="/Code/Java/Generics/CatalogGenerics.htm">Generics</a></li>
      <li><a href="/Code/Java/GWT/CatalogGWT.htm">GWT</a></li>
      <li><a href="/Code/Java/Hibernate/CatalogHibernate.htm">Hibernate</a></li>
      <li><a href="/Code/Java/I18N/CatalogI18N.htm">I18N</a></li>
      <li><a href="/Code/Java/J2EE/CatalogJ2EE.htm">J2EE</a></li>
      <li><a href="/Code/Java/J2ME/CatalogJ2ME.htm">J2ME</a></li>
      <li><a href="/Code/Java/JavaFX/CatalogJavaFX.htm">JavaFX</a></li>
      <li><a href="/Code/Java/JDK-6/CatalogJDK-6.htm">JDK 6</a></li>
      <li><a href="/Code/Java/JDK-7/CatalogJDK-7.htm">JDK 7</a></li>
      <li><a href="/Code/Java/JNDI-LDAP/CatalogJNDI-LDAP.htm">JNDI LDAP</a></li>
      <li><a href="/Code/Java/JPA/CatalogJPA.htm">JPA</a></li>
      <li><a href="/Code/Java/JSP/CatalogJSP.htm">JSP</a></li>
      <li><a href="/Code/Java/JSTL/CatalogJSTL.htm">JSTL</a></li>
      <li><a href="/Code/Java/Language-Basics/CatalogLanguage-Basics.htm">Language Basics</a></li>
      <li><a href="/Code/Java/Network-Protocol/CatalogNetwork-Protocol.htm">Network Protocol</a></li>
      <li><a href="/Code/Java/PDF-RTF/CatalogPDF-RTF.htm">PDF RTF</a></li>
      <li><a href="/Code/Java/Reflection/CatalogReflection.htm">Reflection</a></li>
      <li><a href="/Code/Java/Regular-Expressions/CatalogRegular-Expressions.htm">Regular Expressions</a></li>
      <li><a href="/Code/Java/Scripting/CatalogScripting.htm">Scripting</a></li>
      <li><a href="/Code/Java/Security/CatalogSecurity.htm">Security</a></li>
      <li><a href="/Code/Java/Servlets/CatalogServlets.htm">Servlets</a></li>
      <li><a href="/Code/Java/Spring/CatalogSpring.htm">Spring</a></li>
      <li><a href="/Code/Java/Swing-Components/CatalogSwing-Components.htm">Swing Components</a></li>
      <li><a href="/Code/Java/Swing-JFC/CatalogSwing-JFC.htm">Swing JFC</a></li>
      <li><a href="/Code/Java/SWT-JFace-Eclipse/CatalogSWT-JFace-Eclipse.htm">SWT JFace Eclipse</a></li>
      <li><a href="/Code/Java/Threads/CatalogThreads.htm">Threads</a></li>
      <li><a href="/Code/Java/Tiny-Application/CatalogTiny-Application.htm">Tiny Application</a></li>
      <li><a href="/Code/Java/Velocity/CatalogVelocity.htm">Velocity</a></li>
      <li><a href="/Code/Java/Web-Services-SOA/CatalogWeb-Services-SOA.htm">Web Services SOA</a></li>
      <li><a href="/Code/Java/XML/CatalogXML.htm">XML</a></li>
     </ul>
    </div>
    <div class="col-sm-9 col-md-9">
     <form class="form-inline pull-right" action="http://www.google.com/cse" id="cse-search-box">
      <fieldset>
       <label class="control-label"><input type="hidden" name="cx" value="partner-pub-1130008796007602:iri8be-v211"><input type="hidden" name="ie" value="ISO-8859-1"><input type="text" size="15" name="q"><input type="submit" name="sa" value="Search"></label>
      </fieldset>
     </form>
     <script type="text/javascript" src="http://www.google.com/cse/brand?form=cse-search-box&amp;lang=en"></script>
     <h1>A quick sort algorithm to sort Vectors or arrays. Provides sort and binary search capabilities. : Sort Search&nbsp;«&nbsp;Collections Data Structure&nbsp;«&nbsp;Java</h1>
     <script type="text/javascript"><!--
google_ad_client="pub-1130008796007602";google_ad_width=728;google_ad_height=90;google_ad_format="728x90_as";google_ad_type="text_image";google_ad_channel="";google_color_border="ffffff";google_color_bg="ffffff";google_color_link="003399";google_color_text="000000";google_color_url="75a3ed";
//--></script>
     <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script>
     <br>
     <br>
     <br>
     <br>
     <br>
     <ol class="breadcrumb">
      <li><a href="/Code/Java/CatalogJava.htm">Java</a></li>
      <li><a href="/Code/Java/Collections-Data-Structure/CatalogCollections-Data-Structure.htm">Collections Data Structure</a></li>
      <li><a href="/Code/Java/Collections-Data-Structure/Sort-Search.htm">Sort Search</a></li>
      <li></li>
     </ol>
     <p>A quick sort algorithm to sort Vectors or arrays. Provides sort and binary search capabilities.</p>
     <img border="0" alt="A quick sort algorithm to sort Vectors or arrays. Provides sort and binary search capabilities." src="http://www.java2s.com/Code/JavaImages/Sort.PNG">
     <pre>     
<font color="#3f7f5f">// HTMLParser Library - A java-based parser for HTML
</font><font color="#3f7f5f">// http://htmlparser.org
</font><font color="#3f7f5f">// Copyright (C) 2006 Derrick Oswald
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// Revision Control Information
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// $URL: https://svn.sourceforge.net/svnroot/htmlparser/trunk/lexer/src/main/java/org/htmlparser/util/sort/Sort.java $
</font><font color="#3f7f5f">// $Author: derrickoswald $
</font><font color="#3f7f5f">// $Date: 2006-09-16 10:44:17 -0400 (Sat, 16 Sep 2006) $
</font><font color="#3f7f5f">// $Revision: 4 $
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// This library is free software; you can redistribute it and/or
</font><font color="#3f7f5f">// modify it under the terms of the Common Public License; either
</font><font color="#3f7f5f">// version 1.0 of the License, or (at your option) any later version.
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// This library is distributed in the hope that it will be useful,
</font><font color="#3f7f5f">// but WITHOUT ANY WARRANTY; without even the implied warranty of
</font><font color="#3f7f5f">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
</font><font color="#3f7f5f">// Common Public License for more details.
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// You should have received a copy of the Common Public License
</font><font color="#3f7f5f">// along with this library; if not, the license is available from
</font><font color="#3f7f5f">// the Open Source Initiative (OSI) website:
</font><font color="#3f7f5f">//   http://opensource.org/licenses/cpl1.0.php
</font>
<font color="#3f7f5f">//package org.htmlparser.util.sort;
</font>
<font color="#7f0055"><b>import</b></font> java.util.Enumeration;
<font color="#7f0055"><b>import</b></font> java.util.Hashtable;
<font color="#7f0055"><b>import</b></font> java.util.Vector;

<font color="#3f7f5f">/**
 * A quick sort algorithm to sort Vectors or arrays. Provides sort and binary
 * search capabilities.
 * &lt;p&gt;
 * This all goes away in JDK 1.2.
 * &lt;p&gt;
 * 
 * @author James Gosling
 * @author Kevin A. Smith
 * @author Derrick Oswald
 * @version 1.4, 11 June, 1997
 */</font>
<font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>class</b></font> Sort {
  <font color="#3f7f5f">/**
   * No object of this class need ever be instantiated. All methods are
   * static.
   */</font>
  <font color="#7f0055"><b>private</b></font> Sort() {
  }

  <font color="#3f7f5f">/**
   * This is a generic version of C.A.R Hoare's Quick Sort algorithm. This
   * will handle vectors that are already sorted, and vectors with duplicate
   * keys. Equivalent to:
   * 
   * &lt;pre&gt;
   * QuickSort(v, 0, v.size() - 1);
   * &lt;/pre&gt;
   * 
   * @param v
   *            A &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Ordered&lt;/code&gt; items.
   * @exception ClassCastException
   *                If the vector contains objects that are not
   *                &lt;code&gt;Ordered&lt;/code&gt;.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>void</b></font> QuickSort(Vector v) <font color="#7f0055"><b>throws</b></font> ClassCastException {
    QuickSort(v, 0, v.size() - 1);
  }

  <font color="#3f7f5f">/**
   * This is a generic version of C.A.R Hoare's Quick Sort algorithm. This
   * will handle vectors that are already sorted, and vectors with duplicate
   * keys.
   * &lt;p&gt;
   * If you think of a one dimensional vector as going from the lowest index
   * on the left to the highest index on the right then the parameters to this
   * function are lowest index or left and highest index or right.
   * 
   * @param v
   *            A &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Ordered&lt;/code&gt; items.
   * @param lo0
   *            Left boundary of vector partition.
   * @param hi0
   *            Right boundary of vector partition.
   * @exception ClassCastException
   *                If the vector contains objects that are not
   *                &lt;code&gt;Ordered&lt;/code&gt;.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>void</b></font> QuickSort(Vector v, <font color="#7f0055"><b>int</b></font> lo0, <font color="#7f0055"><b>int</b></font> hi0)
      <font color="#7f0055"><b>throws</b></font> ClassCastException {
    <font color="#7f0055"><b>int</b></font> lo = lo0;
    <font color="#7f0055"><b>int</b></font> hi = hi0;
    Ordered mid;

    <font color="#7f0055"><b>if</b></font> (hi0 &gt; lo0) { <font color="#3f7f5f">// arbitrarily establish partition element as the
</font>              <font color="#3f7f5f">// midpoint of the vector
</font>      mid = (Ordered) v.elementAt((lo0 + hi0) / 2);

      <font color="#3f7f5f">// loop through the vector until indices cross
</font>      <font color="#7f0055"><b>while</b></font> (lo &lt;= hi) {
        <font color="#3f7f5f">// find the first element that is greater than or equal to
</font>        <font color="#3f7f5f">// the partition element starting from the left index
</font>        <font color="#7f0055"><b>while</b></font> ((lo &lt; hi0)
            &amp;&amp; (0 &gt; ((Ordered) v.elementAt(lo)).compare(mid)))
          ++lo;

        <font color="#3f7f5f">// find an element that is smaller than or equal to
</font>        <font color="#3f7f5f">// the partition element starting from the right index
</font>        <font color="#7f0055"><b>while</b></font> ((hi &gt; lo0)
            &amp;&amp; (0 &lt; ((Ordered) v.elementAt(hi)).compare(mid)))
          --hi;

        <font color="#3f7f5f">// if the indexes have not crossed, swap
</font>        <font color="#7f0055"><b>if</b></font> (lo &lt;= hi)
          swap(v, lo++, hi--);
      }

      <font color="#3f7f5f">// if the right index has not reached the left side of array
</font>      <font color="#3f7f5f">// must now sort the left partition
</font>      <font color="#7f0055"><b>if</b></font> (lo0 &lt; hi)
        QuickSort(v, lo0, hi);

      <font color="#3f7f5f">// if the left index has not reached the right side of array
</font>      <font color="#3f7f5f">// must now sort the right partition
</font>      <font color="#7f0055"><b>if</b></font> (lo &lt; hi0)
        QuickSort(v, lo, hi0);
    }
  }

  <font color="#7f0055"><b>private</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>void</b></font> swap(Vector v, <font color="#7f0055"><b>int</b></font> i, <font color="#7f0055"><b>int</b></font> j) {
    Object o;

    o = v.elementAt(i);
    v.setElementAt(v.elementAt(j), i);
    v.setElementAt(o, j);
  }

  <font color="#3f7f5f">/**
   * This is a generic version of C.A.R Hoare's Quick Sort algorithm. This
   * will handle arrays that are already sorted, and arrays with duplicate
   * keys.
   * &lt;p&gt;
   * Equivalent to:
   * 
   * &lt;pre&gt;
   * QuickSort(a, 0, a.length - 1);
   * &lt;/pre&gt;
   * 
   * @param a
   *            An array of &lt;code&gt;Ordered&lt;/code&gt; items.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>void</b></font> QuickSort(Ordered[] a) {
    QuickSort(a, 0, a.length - 1);
  }

  <font color="#3f7f5f">/**
   * This is a generic version of C.A.R Hoare's Quick Sort algorithm. This
   * will handle arrays that are already sorted, and arrays with duplicate
   * keys.
   * &lt;p&gt;
   * If you think of a one dimensional array as going from the lowest index on
   * the left to the highest index on the right then the parameters to this
   * function are lowest index or left and highest index or right.
   * 
   * @param a
   *            An array of &lt;code&gt;Ordered&lt;/code&gt; items.
   * @param lo0
   *            Left boundary of array partition.
   * @param hi0
   *            Right boundary of array partition.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>void</b></font> QuickSort(Ordered[] a, <font color="#7f0055"><b>int</b></font> lo0, <font color="#7f0055"><b>int</b></font> hi0) {
    <font color="#7f0055"><b>int</b></font> lo = lo0;
    <font color="#7f0055"><b>int</b></font> hi = hi0;
    Ordered mid;

    <font color="#7f0055"><b>if</b></font> (hi0 &gt; lo0) {
      <font color="#3f7f5f">// arbitrarily establish partition element as the midpoint of the
</font>      <font color="#3f7f5f">// array
</font>      mid = a[(lo0 + hi0) / 2];

      <font color="#3f7f5f">// loop through the vector until indices cross
</font>      <font color="#7f0055"><b>while</b></font> (lo &lt;= hi) {
        <font color="#3f7f5f">// find the first element that is greater than or equal to
</font>        <font color="#3f7f5f">// the partition element starting from the left index
</font>        <font color="#7f0055"><b>while</b></font> ((lo &lt; hi0) &amp;&amp; (0 &gt; a[lo].compare(mid)))
          ++lo;

        <font color="#3f7f5f">// find an element that is smaller than or equal to
</font>        <font color="#3f7f5f">// the partition element starting from the right Index.
</font>        <font color="#7f0055"><b>while</b></font> ((hi &gt; lo0) &amp;&amp; (0 &lt; a[hi].compare(mid)))
          --hi;

        <font color="#3f7f5f">// if the indexes have not crossed, swap
</font>        <font color="#7f0055"><b>if</b></font> (lo &lt;= hi)
          swap(a, lo++, hi--);
      }

      <font color="#3f7f5f">// if the right index has not reached the left side of array
</font>      <font color="#3f7f5f">// must now sort the left partition
</font>      <font color="#7f0055"><b>if</b></font> (lo0 &lt; hi)
        QuickSort(a, lo0, hi);

      <font color="#3f7f5f">// if the left index has not reached the right side of array
</font>      <font color="#3f7f5f">// must now sort the right partition
</font>      <font color="#7f0055"><b>if</b></font> (lo &lt; hi0)
        QuickSort(a, lo, hi0);
    }
  }

  <font color="#3f7f5f">/**
   * Swaps two elements of an array.
   * 
   * @param a
   *            The array of elements.
   * @param i
   *            The index of one item to swap.
   * @param j
   *            The index of the other item to swap.
   */</font>
  <font color="#7f0055"><b>private</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>void</b></font> swap(Object[] a, <font color="#7f0055"><b>int</b></font> i, <font color="#7f0055"><b>int</b></font> j) {
    Object o;
    o = a[i];
    a[i] = a[j];
    a[j] = o;
  }

  <font color="#3f7f5f">/**
   * This is a string version of C.A.R Hoare's Quick Sort algorithm. This will
   * handle arrays that are already sorted, and arrays with duplicate keys.
   * &lt;p&gt;
   * Equivalent to:
   * 
   * &lt;pre&gt;
   * QuickSort(a, 0, a.length - 1);
   * &lt;/pre&gt;
   * 
   * @param a
   *            An array of &lt;code&gt;String&lt;/code&gt; items.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>void</b></font> QuickSort(String[] a) {
    QuickSort(a, 0, a.length - 1);
  }

  <font color="#3f7f5f">/**
   * This is a string version of C.A.R Hoare's Quick Sort algorithm. This will
   * handle arrays that are already sorted, and arrays with duplicate keys.
   * &lt;p&gt;
   * If you think of a one dimensional array as going from the lowest index on
   * the left to the highest index on the right then the parameters to this
   * function are lowest index or left and highest index or right.
   * 
   * @param a
   *            An array of &lt;code&gt;String&lt;/code&gt; items.
   * @param lo0
   *            Left boundary of array partition.
   * @param hi0
   *            Right boundary of array partition.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>void</b></font> QuickSort(String[] a, <font color="#7f0055"><b>int</b></font> lo0, <font color="#7f0055"><b>int</b></font> hi0) {
    <font color="#7f0055"><b>int</b></font> lo = lo0;
    <font color="#7f0055"><b>int</b></font> hi = hi0;
    String mid;

    <font color="#7f0055"><b>if</b></font> (hi0 &gt; lo0) {
      <font color="#3f7f5f">// arbitrarily establish partition element as the midpoint of the
</font>      <font color="#3f7f5f">// array
</font>      mid = a[(lo0 + hi0) / 2];

      <font color="#3f7f5f">// loop through the vector until indices cross
</font>      <font color="#7f0055"><b>while</b></font> (lo &lt;= hi) {
        <font color="#3f7f5f">// find the first element that is greater than or equal to
</font>        <font color="#3f7f5f">// the partition element starting from the left index
</font>        <font color="#7f0055"><b>while</b></font> ((lo &lt; hi0) &amp;&amp; (0 &gt; a[lo].compareTo(mid)))
          ++lo;

        <font color="#3f7f5f">// find an element that is smaller than or equal to
</font>        <font color="#3f7f5f">// the partition element starting from the right Index.
</font>        <font color="#7f0055"><b>while</b></font> ((hi &gt; lo0) &amp;&amp; (0 &lt; a[hi].compareTo(mid)))
          --hi;

        <font color="#3f7f5f">// if the indexes have not crossed, swap
</font>        <font color="#7f0055"><b>if</b></font> (lo &lt;= hi)
          swap(a, lo++, hi--);
      }

      <font color="#3f7f5f">// if the right index has not reached the left side of array
</font>      <font color="#3f7f5f">// must now sort the left partition
</font>      <font color="#7f0055"><b>if</b></font> (lo0 &lt; hi)
        QuickSort(a, lo0, hi);

      <font color="#3f7f5f">// if the left index has not reached the right side of array
</font>      <font color="#3f7f5f">// must now sort the right partition
</font>      <font color="#7f0055"><b>if</b></font> (lo &lt; hi0)
        QuickSort(a, lo, hi0);
    }
  }

  <font color="#3f7f5f">/**
   * This is a generic version of C.A.R Hoare's Quick Sort algorithm. This
   * will handle Sortable objects that are already sorted, and Sortable
   * objects with duplicate keys.
   * &lt;p&gt;
   * 
   * @param sortable
   *            A &lt;code&gt;Sortable&lt;/code&gt; object.
   * @param lo0
   *            Left boundary of partition.
   * @param hi0
   *            Right boundary of partition.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>void</b></font> QuickSort(Sortable sortable, <font color="#7f0055"><b>int</b></font> lo0, <font color="#7f0055"><b>int</b></font> hi0) {
    <font color="#7f0055"><b>int</b></font> lo = lo0;
    <font color="#7f0055"><b>int</b></font> hi = hi0;
    Ordered mid;
    Ordered test;

    <font color="#7f0055"><b>if</b></font> (hi0 &gt; lo0) { <font color="#3f7f5f">// arbitrarily establish partition element as the
</font>              <font color="#3f7f5f">// midpoint of the vector
</font>      mid = sortable.fetch((lo0 + hi0) / 2, null);
      test = null;

      <font color="#3f7f5f">// loop through the vector until indices cross
</font>      <font color="#7f0055"><b>while</b></font> (lo &lt;= hi) {
        <font color="#3f7f5f">// find the first element that is greater than or equal to
</font>        <font color="#3f7f5f">// the partition element starting from the left index
</font>        <font color="#7f0055"><b>while</b></font> ((lo &lt; hi0)
            &amp;&amp; (0 &gt; (test = sortable.fetch(lo, test)).compare(mid)))
          ++lo;

        <font color="#3f7f5f">// find an element that is smaller than or equal to
</font>        <font color="#3f7f5f">// the partition element starting from the right index
</font>        <font color="#7f0055"><b>while</b></font> ((hi &gt; lo0)
            &amp;&amp; (0 &lt; (test = sortable.fetch(hi, test)).compare(mid)))
          --hi;

        <font color="#3f7f5f">// if the indexes have not crossed, swap
</font>        <font color="#7f0055"><b>if</b></font> (lo &lt;= hi)
          sortable.swap(lo++, hi--);
      }

      <font color="#3f7f5f">// if the right index has not reached the left side of array
</font>      <font color="#3f7f5f">// must now sort the left partition
</font>      <font color="#7f0055"><b>if</b></font> (lo0 &lt; hi)
        QuickSort(sortable, lo0, hi);

      <font color="#3f7f5f">// if the left index has not reached the right side of array
</font>      <font color="#3f7f5f">// must now sort the right partition
</font>      <font color="#7f0055"><b>if</b></font> (lo &lt; hi0)
        QuickSort(sortable, lo, hi0);
    }
  }

  <font color="#3f7f5f">/**
   * This is a generic version of C.A.R Hoare's Quick Sort algorithm. This
   * will handle Sortable objects that are already sorted, and Sortable
   * objects with duplicate keys.
   * &lt;p&gt;
   * Equivalent to:
   * 
   * &lt;pre&gt;
   * QuickSort(sortable, sortable.first(), sortable.last());
   * &lt;/pre&gt;
   * 
   * @param sortable
   *            A &lt;code&gt;Sortable&lt;/code&gt; object.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>void</b></font> QuickSort(Sortable sortable) {
    QuickSort(sortable, sortable.first(), sortable.last());
  }

  <font color="#3f7f5f">/**
   * Sort a Hashtable.
   * 
   * @param h
   *            A Hashtable with String or Ordered keys.
   * @return A sorted array of the keys.
   * @exception ClassCastException
   *                If the keys of the hashtable are not &lt;code&gt;Ordered&lt;/code&gt;.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> Object[] QuickSort(Hashtable h) <font color="#7f0055"><b>throws</b></font> ClassCastException {
    Enumeration e;
    <font color="#7f0055"><b>boolean</b></font> are_strings;
    Object[] ret;

    <font color="#3f7f5f">// make the array
</font>    ret = <font color="#7f0055"><b>new</b></font> Ordered[h.size()];
    e = h.keys();
    are_strings = true; <font color="#3f7f5f">// until proven otherwise
</font>    <font color="#7f0055"><b>for</b></font> (<font color="#7f0055"><b>int</b></font> i = 0; i &lt; ret.length; i++) {
      ret[i] = e.nextElement();
      <font color="#7f0055"><b>if</b></font> (are_strings &amp;&amp; !(ret[i] <font color="#7f0055"><b>instanceof</b></font> String))
        are_strings = false;
    }

    <font color="#3f7f5f">// sort it
</font>    <font color="#7f0055"><b>if</b></font> (are_strings)
      QuickSort((String[]) ret);
    <font color="#7f0055"><b>else</b></font>
      QuickSort((Ordered[]) ret);

    <font color="#7f0055"><b>return</b></font> (ret);
  }

  <font color="#3f7f5f">/**
   * Binary search for an object
   * 
   * @param set
   *            The collection of &lt;code&gt;Ordered&lt;/code&gt; objects.
   * @param ref
   *            The name to search for.
   * @param lo
   *            The lower index within which to look.
   * @param hi
   *            The upper index within which to look.
   * @return The index at which reference was found or is to be inserted.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>int</b></font> bsearch(Sortable set, Ordered ref, <font color="#7f0055"><b>int</b></font> lo, <font color="#7f0055"><b>int</b></font> hi) {
    <font color="#7f0055"><b>int</b></font> num;
    <font color="#7f0055"><b>int</b></font> mid;
    Ordered ordered;
    <font color="#7f0055"><b>int</b></font> half;
    <font color="#7f0055"><b>int</b></font> result;
    <font color="#7f0055"><b>int</b></font> ret;

    ret = -1;

    num = (hi - lo) + 1;
    ordered = null;
    <font color="#7f0055"><b>while</b></font> ((-1 == ret) &amp;&amp; (lo &lt;= hi)) {
      half = num / 2;
      mid = lo + ((0 != (num &amp; 1)) ? half : half - 1);
      ordered = set.fetch(mid, ordered);
      result = ref.compare(ordered);
      <font color="#7f0055"><b>if</b></font> (0 == result)
        ret = mid;
      <font color="#7f0055"><b>else</b></font> <font color="#7f0055"><b>if</b></font> (0 &gt; result) {
        hi = mid - 1;
        num = ((0 != (num &amp; 1)) ? half : half - 1);
      } <font color="#7f0055"><b>else</b></font> {
        lo = mid + 1;
        num = half;
      }
    }
    <font color="#7f0055"><b>if</b></font> (-1 == ret)
      ret = lo;

    <font color="#7f0055"><b>return</b></font> (ret);
  }

  <font color="#3f7f5f">/**
   * Binary search for an object
   * 
   * @param set
   *            The collection of &lt;code&gt;Ordered&lt;/code&gt; objects.
   * @param ref
   *            The name to search for.
   * @return The index at which reference was found or is to be inserted.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>int</b></font> bsearch(Sortable set, Ordered ref) {
    <font color="#7f0055"><b>return</b></font> (bsearch(set, ref, set.first(), set.last()));
  }

  <font color="#3f7f5f">/**
   * Binary search for an object
   * 
   * @param vector
   *            The vector of &lt;code&gt;Ordered&lt;/code&gt; objects.
   * @param ref
   *            The name to search for.
   * @param lo
   *            The lower index within which to look.
   * @param hi
   *            The upper index within which to look.
   * @return The index at which reference was found or is to be inserted.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>int</b></font> bsearch(Vector vector, Ordered ref, <font color="#7f0055"><b>int</b></font> lo, <font color="#7f0055"><b>int</b></font> hi) {
    <font color="#7f0055"><b>int</b></font> num;
    <font color="#7f0055"><b>int</b></font> mid;
    <font color="#7f0055"><b>int</b></font> half;
    <font color="#7f0055"><b>int</b></font> result;
    <font color="#7f0055"><b>int</b></font> ret;

    ret = -1;

    num = (hi - lo) + 1;
    <font color="#7f0055"><b>while</b></font> ((-1 == ret) &amp;&amp; (lo &lt;= hi)) {
      half = num / 2;
      mid = lo + ((0 != (num &amp; 1)) ? half : half - 1);
      result = ref.compare(vector.elementAt(mid));
      <font color="#7f0055"><b>if</b></font> (0 == result)
        ret = mid;
      <font color="#7f0055"><b>else</b></font> <font color="#7f0055"><b>if</b></font> (0 &gt; result) {
        hi = mid - 1;
        num = ((0 != (num &amp; 1)) ? half : half - 1);
      } <font color="#7f0055"><b>else</b></font> {
        lo = mid + 1;
        num = half;
      }
    }
    <font color="#7f0055"><b>if</b></font> (-1 == ret)
      ret = lo;

    <font color="#7f0055"><b>return</b></font> (ret);
  }

  <font color="#3f7f5f">/**
   * Binary search for an object
   * 
   * @param vector
   *            The vector of &lt;code&gt;Ordered&lt;/code&gt; objects.
   * @param ref
   *            The name to search for.
   * @return The index at which reference was found or is to be inserted.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>int</b></font> bsearch(Vector vector, Ordered ref) {
    <font color="#7f0055"><b>return</b></font> (bsearch(vector, ref, 0, vector.size() - 1));
  }

  <font color="#3f7f5f">/**
   * Binary search for an object
   * 
   * @param array
   *            The array of &lt;code&gt;Ordered&lt;/code&gt; objects.
   * @param ref
   *            The name to search for.
   * @param lo
   *            The lower index within which to look.
   * @param hi
   *            The upper index within which to look.
   * @return The index at which reference was found or is to be inserted.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>int</b></font> bsearch(Ordered[] array, Ordered ref, <font color="#7f0055"><b>int</b></font> lo, <font color="#7f0055"><b>int</b></font> hi) {
    <font color="#7f0055"><b>int</b></font> num;
    <font color="#7f0055"><b>int</b></font> mid;
    <font color="#7f0055"><b>int</b></font> half;
    <font color="#7f0055"><b>int</b></font> result;
    <font color="#7f0055"><b>int</b></font> ret;

    ret = -1;

    num = (hi - lo) + 1;
    <font color="#7f0055"><b>while</b></font> ((-1 == ret) &amp;&amp; (lo &lt;= hi)) {
      half = num / 2;
      mid = lo + ((0 != (num &amp; 1)) ? half : half - 1);
      result = ref.compare(array[mid]);
      <font color="#7f0055"><b>if</b></font> (0 == result)
        ret = mid;
      <font color="#7f0055"><b>else</b></font> <font color="#7f0055"><b>if</b></font> (0 &gt; result) {
        hi = mid - 1;
        num = ((0 != (num &amp; 1)) ? half : half - 1);
      } <font color="#7f0055"><b>else</b></font> {
        lo = mid + 1;
        num = half;
      }
    }
    <font color="#7f0055"><b>if</b></font> (-1 == ret)
      ret = lo;

    <font color="#7f0055"><b>return</b></font> (ret);
  }

  <font color="#3f7f5f">/**
   * Binary search for an object
   * 
   * @param array
   *            The array of &lt;code&gt;Ordered&lt;/code&gt; objects.
   * @param ref
   *            The name to search for.
   * @return The index at which reference was found or is to be inserted.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>static</b></font> <font color="#7f0055"><b>int</b></font> bsearch(Ordered[] array, Ordered ref) {
    <font color="#7f0055"><b>return</b></font> (bsearch(array, ref, 0, array.length - 1));
  }
}

<font color="#3f7f5f">// HTMLParser Library - A java-based parser for HTML
</font><font color="#3f7f5f">// http://htmlparser.org
</font><font color="#3f7f5f">// Copyright (C) 2006 Derrick Oswald
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// Revision Control Information
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// $URL:
</font><font color="#3f7f5f">// https://svn.sourceforge.net/svnroot/htmlparser/trunk/lexer/src/main/java/org/htmlparser/util/sort/Ordered.java
</font><font color="#3f7f5f">// $
</font><font color="#3f7f5f">// $Author: derrickoswald $
</font><font color="#3f7f5f">// $Date: 2006-09-16 10:44:17 -0400 (Sat, 16 Sep 2006) $
</font><font color="#3f7f5f">// $Revision: 4 $
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// This library is free software; you can redistribute it and/or
</font><font color="#3f7f5f">// modify it under the terms of the Common Public License; either
</font><font color="#3f7f5f">// version 1.0 of the License, or (at your option) any later version.
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// This library is distributed in the hope that it will be useful,
</font><font color="#3f7f5f">// but WITHOUT ANY WARRANTY; without even the implied warranty of
</font><font color="#3f7f5f">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
</font><font color="#3f7f5f">// Common Public License for more details.
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// You should have received a copy of the Common Public License
</font><font color="#3f7f5f">// along with this library; if not, the license is available from
</font><font color="#3f7f5f">// the Open Source Initiative (OSI) website:
</font><font color="#3f7f5f">// http://opensource.org/licenses/cpl1.0.php
</font>
<font color="#3f7f5f">/**
 * Describes an object that knows about ordering. Implementors must have a
 * comparison function, which imposes a partial ordering on some collection of
 * objects. Ordered objects can be passed to a sort method (such as
 * org.htmlparser.util.sort.Sort) to allow precise control over the sort order.
 * &lt;p&gt;
 * An set of elements S is partially ordered if and only if
 * &lt;code&gt;e1.compare(e2)==0&lt;/code&gt; implies that &lt;code&gt;e1.equals(e2)&lt;/code&gt; for
 * every e1 and e2 in S.
 * &lt;p&gt;
 * This all goes away in JDK 1.2.
 * &lt;p&gt;
 * For use with java.lang.Comparable from JDK 1.2:
 * 
 * &lt;pre&gt;
 * public int compare(Object o1, Object o2) {
 *   return (((Ordered) o1).compare(o2));
 * }
 * &lt;/pre&gt;
 * 
 * @see Sort
 */</font>
<font color="#7f0055"><b>interface</b></font> Ordered {
  <font color="#3f7f5f">/**
   * Compares this object with another for order. Returns a negative integer,
   * zero, or a positive integer as this object is less than, equal to, or
   * greater than the second.
   * &lt;p&gt;
   * The implementor must ensure that
   * &lt;code&gt;sgn(x.compare(y)) == -sgn(y.compare(x))&lt;/code&gt; for all x and y.
   * (This implies that &lt;code&gt;x.compare(y)&lt;/code&gt; must throw an exception if
   * and only if &lt;code&gt;y.compare(x)&lt;/code&gt; throws an exception.)
   * &lt;p&gt;
   * The implementor must also ensure that the relation is transitive:
   * &lt;code&gt;((x.compare(y)&gt;0) &amp;&amp; (y.compare(z)&gt;0))&lt;/code&gt; implies
   * &lt;code&gt;x.compare(z)&gt;0&lt;/code&gt;.
   * &lt;p&gt;
   * Finally, the implementer must ensure that &lt;code&gt;x.compare(y)==0&lt;/code&gt;
   * implies that &lt;code&gt;sgn(x.compare(z))==sgn(y.compare(z))&lt;/code&gt; for all z.
   * 
   * @param that
   *            The object to compare this object against.
   * @return A negative integer, zero, or a positive integer as this object is
   *         less than, equal to, or greater than the second.
   * @exception ClassCastException
   *                The arguments type prevents it from being compared by this
   *                Ordered.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>int</b></font> compare(Object that);
}

<font color="#3f7f5f">// HTMLParser Library - A java-based parser for HTML
</font><font color="#3f7f5f">// http://htmlparser.org
</font><font color="#3f7f5f">// Copyright (C) 2006 Derrick Oswald
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// Revision Control Information
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// $URL:
</font><font color="#3f7f5f">// https://svn.sourceforge.net/svnroot/htmlparser/trunk/lexer/src/main/java/org/htmlparser/util/sort/Sortable.java
</font><font color="#3f7f5f">// $
</font><font color="#3f7f5f">// $Author: derrickoswald $
</font><font color="#3f7f5f">// $Date: 2006-09-16 10:44:17 -0400 (Sat, 16 Sep 2006) $
</font><font color="#3f7f5f">// $Revision: 4 $
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// This library is free software; you can redistribute it and/or
</font><font color="#3f7f5f">// modify it under the terms of the Common Public License; either
</font><font color="#3f7f5f">// version 1.0 of the License, or (at your option) any later version.
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// This library is distributed in the hope that it will be useful,
</font><font color="#3f7f5f">// but WITHOUT ANY WARRANTY; without even the implied warranty of
</font><font color="#3f7f5f">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
</font><font color="#3f7f5f">// Common Public License for more details.
</font><font color="#3f7f5f">//
</font><font color="#3f7f5f">// You should have received a copy of the Common Public License
</font><font color="#3f7f5f">// along with this library; if not, the license is available from
</font><font color="#3f7f5f">// the Open Source Initiative (OSI) website:
</font><font color="#3f7f5f">// http://opensource.org/licenses/cpl1.0.php
</font>
<font color="#3f7f5f">/**
 * Provides a mechanism to abstract the sort process. Classes implementing this
 * interface are collections of Ordered objects that are to be sorted by the
 * Sort class and are not necessarily Vectors or Arrays of Ordered objects.
 * 
 * @see Sort
 */</font>
<font color="#7f0055"><b>interface</b></font> Sortable {
  <font color="#3f7f5f">/**
   * Returns the first index of the Sortable.
   * 
   * @return The index of the first element.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>int</b></font> first();

  <font color="#3f7f5f">/**
   * Returns the last index of the Sortable.
   * 
   * @return The index of the last element. If this were an array object this
   *         would be (object.length - 1).
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>int</b></font> last();

  <font color="#3f7f5f">/**
   * Fetch the object at the given index.
   * 
   * @param index
   *            The item number to get.
   * @param reuse
   *            If this argument is not null, it is an object acquired from a
   *            previous fetch that is no longer needed and may be returned as
   *            the result if it makes mores sense to alter and return it than
   *            to fetch or create a new element. That is, the reuse object is
   *            garbage and may be used to avoid allocating a new object if
   *            that would normally be the strategy.
   * @return The Ordered object at that index.
   */</font>
  <font color="#7f0055"><b>public</b></font> Ordered fetch(<font color="#7f0055"><b>int</b></font> index, Ordered reuse);

  <font color="#3f7f5f">/**
   * Swaps the elements at the given indicies.
   * 
   * @param i
   *            One index.
   * @param j
   *            The other index.
   */</font>
  <font color="#7f0055"><b>public</b></font> <font color="#7f0055"><b>void</b></font> swap(<font color="#7f0055"><b>int</b></font> i, <font color="#7f0055"><b>int</b></font> j);
}

   
    
    
    
    
  
</pre>
     <table class="table"></table>
     <table>
      <tbody> 
       <tr>
        <td align="left"><br><br><br><br><script type="text/javascript"><!--
google_ad_client="pub-1130008796007602";google_ad_width=300;google_ad_height=250;google_ad_format="300x250_as";google_ad_type="text_image";google_ad_channel="";google_color_border="ffffff";google_color_bg="FFFFFF";google_color_link="0077cc";google_color_url="0077cc";google_color_text="000000";
//--></script><script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script></td> 
       </tr>
       <tr>
        <td><script type="text/javascript"><!--
google_ad_client="pub-1130008796007602";google_ad_width=300;google_ad_height=250;google_ad_format="300x250_as";google_ad_type="text_image";google_ad_channel="";google_color_border="ffffff";google_color_bg="FFFFFF";google_color_link="0077cc";google_color_url="0077cc";google_color_text="000000";
//--></script><script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js"></script><br><br><br><br></td>
       </tr>
      </tbody>
     </table>
     <h3>Related examples in the same category</h3>
     <table class="table">
      <tbody>
       <tr class="even">
        <td>1.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Linearsearch.htm">Linear search</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>2.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Animationforquicksort.htm">Animation for quick sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="even">
        <td>3.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/QuickSortImplementationwithmedianofthreepartitioningandcutoffforsmallarrays.htm">Quick Sort Implementation with median-of-three partitioning and cutoff for small arrays</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>4.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/SimpleSortDemo.htm">Simple Sort Demo</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/SimpleSortDemo.htm"><img border="0" alt="Simple Sort Demo" src="http://www.java2s.com/Code/JavaImages/SortDemo.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="even">
        <td>5.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Asimpleappletclasstodemonstrateasortalgorithm.htm">A simple applet class to demonstrate a sort algorithm</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>6.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/SortinganarrayofStrings.htm">Sorting an array of Strings</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/SortinganarrayofStrings.htm"><img border="0" alt="Sorting an array of Strings" src="http://www.java2s.com/Code/JavaImages/StringSorting.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="even">
        <td>7.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Simpleversionofquicksort.htm">Simple version of quick sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/Simpleversionofquicksort.htm"><img border="0" alt="Simple version of quick sort" src="http://www.java2s.com/Code/JavaImages/QuickSortSimpleVersion.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="odd">
        <td>8.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/CombineQuickSortInsertionSort.htm">Combine Quick Sort Insertion Sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/CombineQuickSortInsertionSort.htm"><img border="0" alt="Combine Quick Sort Insertion Sort" src="http://www.java2s.com/Code/JavaImages/CombineQuickSortInsertionSort.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="even">
        <td>9.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Quicksortwithmedianofthreepartitioning.htm">Quick sort with median-of-three partitioning</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/Quicksortwithmedianofthreepartitioning.htm"><img border="0" alt="Quick sort with median-of-three partitioning" src="http://www.java2s.com/Code/JavaImages/AnotherQuickSort.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="odd">
        <td>10.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/FastQuickSort.htm">Fast Quick Sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="even">
        <td>11.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Selectionsort.htm">Selection sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/Selectionsort.htm"><img border="0" alt="Selection sort" src="http://www.java2s.com/Code/JavaImages/SelectionSort.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="odd">
        <td>12.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/InsertSortforobjects.htm">Insert Sort for objects</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/InsertSortforobjects.htm"><img border="0" alt="Insert Sort for objects" src="http://www.java2s.com/Code/JavaImages/ObjectInsertSort.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="even">
        <td>13.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Insertsort.htm">Insert sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/Insertsort.htm"><img border="0" alt="Insert sort" src="http://www.java2s.com/Code/JavaImages/InsertSort.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="odd">
        <td>14.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Bubblesort.htm">Bubble sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/Bubblesort.htm"><img border="0" alt="Bubble sort" src="http://www.java2s.com/Code/JavaImages/BubbleSort.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="even">
        <td>15.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Mergesort.htm">Merge sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/Mergesort.htm"><img border="0" alt="Merge sort" src="http://www.java2s.com/Code/JavaImages/MergeSortArray.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="odd">
        <td>16.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/FastMergeSort.htm">Fast Merge Sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="even">
        <td>17.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/BinarySearch.htm">Binary Search</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/BinarySearch.htm"><img border="0" alt="Binary Search" src="http://www.java2s.com/Code/JavaImages/BinarySearchArray.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="odd">
        <td>18.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Shellsort.htm">Shell sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/Shellsort.htm"><img border="0" alt="Shell sort" src="http://www.java2s.com/Code/JavaImages/ShellSort.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="even">
        <td>19.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/RecursiveBinarySearchImplementationinJava.htm">Recursive Binary Search Implementation in Java</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>20.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Topologicalsorting.htm">Topological sorting</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/Topologicalsorting.htm"><img border="0" alt="Topological sorting" src="http://www.java2s.com/Code/JavaImages/GraphTS.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="even">
        <td>21.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Heapsort.htm">Heap sort</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/Heapsort.htm"><img border="0" alt="Heap sort" src="http://www.java2s.com/Code/JavaImages/Heap.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="odd">
        <td>22.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/SortNumbers.htm">Sort Numbers</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/SortNumbers.htm"><img border="0" alt="Sort Numbers" src="http://www.java2s.com/Code/JavaImages/SortNumbers.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="even">
        <td>23.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Aquicksortdemonstrationalgorithm.htm">A quick sort demonstration algorithm</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/Aquicksortdemonstrationalgorithm.htm"><img border="0" alt="A quick sort demonstration algorithm" src="http://www.java2s.com/Code/JavaImages/Sort.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="odd">
        <td>24.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/PerformingBinarySearchonJavabyteArrayExample.htm">Performing Binary Search on Java byte Array Example</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="even">
        <td>25.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/PerformingBinarySearchonJavacharArrayExample.htm">Performing Binary Search on Java char Array Example</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>26.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/PerformingBinarySearchonJavadoubleArrayExample.htm">Performing Binary Search on Java double Array Example</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="even">
        <td>27.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/PerformingBinarySearchonJavafloatArrayExample.htm">Performing Binary Search on Java float Array Example</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>28.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/PerformingBinarySearchonJavaintArrayExample.htm">Performing Binary Search on Java int Array Example</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="even">
        <td>29.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/PerformingBinarySearchonJavalongArrayExample.htm">Performing Binary Search on Java long Array Example</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>30.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/PerformingBinarySearchonJavashortArray.htm">Performing Binary Search on Java short Array</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="even">
        <td>31.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Sortitemsofanarray.htm">Sort items of an array</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>32.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Sortanarrayofobjects.htm">Sort an array of objects</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="even">
        <td>33.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/SortaStringarray.htm">Sort a String array</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>34.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/SortstringarraywithCollator.htm">Sort string array with Collator</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="even">
        <td>35.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Binarysearchroutines.htm">Binary search routines</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>36.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/FastQSortsthelrpartitioninclusiveofthespecfiedarrayofRowsusingthecomparator.htm">FastQ Sorts the [l,r] partition (inclusive) of the specfied array of Rows, using the comparator.</a></td>
        <td width="32"></td>
        <td width="200" align="right"><a href="/Code/Java/Collections-Data-Structure/FastQSortsthelrpartitioninclusiveofthespecfiedarrayofRowsusingthecomparator.htm"><img border="0" alt="FastQ Sorts the [l,r] partition (inclusive) of the specfied array of Rows, using the comparator." src="http://www.java2s.com/Code/JavaImages/Sort.PNG" width="200" height="40"></a></td>
       </tr>
       <tr class="even">
        <td>37.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Abinarysearchimplementation.htm">A binary search implementation.</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>38.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/HandlesQuickSortandallofitsmethods.htm">Handles QuickSort and all of its methods.</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="even">
        <td>39.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/ImplementsQuickSortthreedifferentways.htm">Implements QuickSort three different ways</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
       <tr class="odd">
        <td>40.</td>
        <td align="left"><a href="/Code/Java/Collections-Data-Structure/Returnsanarrayofindicesindicatingtheorderthedatashouldbesortedin.htm">Returns an array of indices indicating the order the data should be sorted in.</a></td>
        <td width="32"></td>
        <td width="200" align="right"></td>
       </tr>
      </tbody>
     </table>
    </div>
   </div>
   <footer>
    <p class="pull-right"><a href="http://www.java2s.com/">java2s.com</a> &nbsp;|&nbsp;Email:info at java2s.com&nbsp;|&nbsp;© Demo Source and Support. All rights reserved.</p>
   </footer>
  </div>
 </body>
</html>