<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html lang="en">
 <head> 
  <link rel="apple-touch-icon" href="http://algs4.cs.princeton.edu/apple-touch-icon.png"> 
  <link rel="shortcut icon" href="http://algs4.cs.princeton.edu/favicon.ico"> 
  <link rel="stylesheet" href="http://algs4.cs.princeton.edu/algs4.css" type="text/css" media="screen"> 
  <meta name="google-site-verification" content="nYspbl5bNBQrNZKguiAAFTMVM7sq2P1WQYc8Oi6Okl0"> 
  <meta name="msvalidate.01" content="D4B7F6DF793EFF34DE96F611C2A367A5"> 
  <!-- IE HACKS --> 
  <!--[if IE]>
<style type="text/css" media="screen">
 #menu ul li {float: left; width: 100%;}
</style>
<![endif]--> 
  <!--[if lt IE 7]>
<style type="text/css" media="screen">
body {
behavior: url(/csshover.htc);
} 
#menu ul li {float: left; width: 100%;}
#menu ul li a {height: 1%;} 

#menu a, #menu h2 {
font: bold 0.9em/1.5em arial, helvetica, sans-serif;
} 

</style>
<![endif]--> 
  <title>
Quicksort</title> 
  <meta HTTP-EQUIV="Content-Type" content="text/html; charset=iso-8859-1"> 
  <meta NAME="AUTHOR" CONTENT="Robert Sedgewick and Kevin Wayne"> 
  <meta NAME="KEYWORDS" CONTENT="Quicksort,Algorithms,4th edition,data structures,Java,intro,introduction,Sedgewick,Wayne"> 
  <meta NAME="DESCRIPTION" CONTENT="The textbook Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne surveys the most important algorithms and data structures in use today. The broad perspective taken makes it an appropriate introduction to the field."> 
  <meta NAME="TITLE" CONTENT="Quicksort. Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne."> 
  <meta NAME="ROBOTS" CONTENT="INDEX,FOLLOW"> 
  <script type="text/javascript" src="/media/swfobject.js"></script> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-10811519-2', 'auto');
  ga('send', 'pageview');

</script> 
 </head> 
 <body> 
  <div id="menu"> 
   <div align="center"> 
    <a class="picture" href="http://algs4.cs.princeton.edu"> <img src="http://algs4.cs.princeton.edu/cover.png" width="189" height="236" border="0" alt="Algorithms, 4th Edition by Robert Sedgewick and Kevin Wayne"> </a> 
   </div> 
   <ul> 
    <li><a class="title" href="http://algs4.cs.princeton.edu">Algorithms, 4th edition</a> 
     <ul> 
      <li> <a href="/10fundamentals">1.&nbsp;&nbsp;Fundamentals</a> 
       <ul> 
        <li> <a href="/11model">1.1&nbsp;&nbsp;Programming Model</a> </li>
        <li> <a href="/12oop">1.2&nbsp;&nbsp;Data Abstraction</a> </li>
        <li> <a href="/13stacks">1.3&nbsp;&nbsp;Stacks and Queues</a> </li>
        <li> <a href="/14analysis">1.4&nbsp;&nbsp;Analysis of Algorithms</a> </li>
        <li> <a href="/15uf">1.5&nbsp;&nbsp;Case Study: Union-Find</a> </li>
       </ul> </li>
      <li> <a href="/20sorting">2.&nbsp;&nbsp;Sorting</a> 
       <ul> 
        <li> <a href="/21elementary">2.1&nbsp;&nbsp;Elementary Sorts</a> </li>
        <li> <a href="/22mergesort">2.2&nbsp;&nbsp;Mergesort</a> </li>
        <li> <a href="/23quicksort">2.3&nbsp;&nbsp;Quicksort</a> </li>
        <li> <a href="/24pq">2.4&nbsp;&nbsp;Priority Queues</a> </li>
        <li> <a href="/25applications">2.5&nbsp;&nbsp;Sorting Applications</a> </li>
       </ul> </li>
      <li> <a href="/30searching">3.&nbsp;&nbsp;Searching</a> 
       <ul> 
        <li> <a href="/31elementary">3.1&nbsp;&nbsp;Symbol Tables</a> </li>
        <li> <a href="/32bst">3.2&nbsp;&nbsp;Binary Search Trees</a> </li>
        <li> <a href="/33balanced">3.3&nbsp;&nbsp;Balanced Search Trees</a> </li>
        <li> <a href="/34hash">3.4&nbsp;&nbsp;Hash Tables</a> </li>
        <li> <a href="/35applications">3.5&nbsp;&nbsp;Searching Applications</a> </li>
       </ul> </li>
      <li> <a href="/40graphs">4.&nbsp;&nbsp;Graphs</a> 
       <ul> 
        <li> <a href="/41graph">4.1&nbsp;&nbsp;Undirected Graphs</a> </li>
        <li> <a href="/42digraph">4.2&nbsp;&nbsp;Directed Graphs</a> </li>
        <li> <a href="/43mst">4.3&nbsp;&nbsp;Minimum Spanning Trees</a> </li>
        <li> <a href="/44sp">4.4&nbsp;&nbsp;Shortest Paths</a> </li>
       </ul> </li>
      <li> <a href="/50strings">5.&nbsp;&nbsp;Strings</a> 
       <ul> 
        <li> <a href="/51radix">5.1&nbsp;&nbsp;String Sorts</a> </li>
        <li> <a href="/52trie">5.2&nbsp;&nbsp;Tries</a> </li>
        <li> <a href="/53substring">5.3&nbsp;&nbsp;Substring Search</a> </li>
        <li> <a href="/54regexp">5.4&nbsp;&nbsp;Regular Expressions</a> </li>
        <li> <a href="/55compression">5.5&nbsp;&nbsp;Data Compression</a> </li>
       </ul> </li>
      <li> <a href="/60context">6.&nbsp;&nbsp;Context</a> 
       <ul> 
        <li> <a href="/61event">6.1&nbsp;&nbsp;Event-Driven Simulation</a> </li>
        <li> <a href="/62btree">6.2&nbsp;&nbsp;B-trees</a> </li>
        <li> <a href="/63suffix">6.3&nbsp;&nbsp;Suffix Arrays</a> </li>
        <li> <a href="/64maxflow">6.4&nbsp;&nbsp;Maxflow</a> </li>
        <li> <a href="/65reductions">6.5&nbsp;&nbsp;Reductions</a> </li>
        <li> <a href="/66intractability">6.6&nbsp;&nbsp;Intractability</a> </li>
       </ul> </li>
     </ul> </li>
    <li><a class="title"> Related Booksites</a> 
     <table width="100%" border="0" cellspacing="0" cellpadding="0"> 
      <tbody>
       <tr> 
        <td align="center"> <a class="booksite" href="http://introcs.cs.princeton.edu"> <img src="http://introcs.cs.princeton.edu/java/cover.png" width="80" height="108" border="0" alt="Introduction to Programming in Java
               by Robert Sedgewick and Kevin Wayne"> </a> </td>
        <td align="center"> <a class="booksite" href="http://aofa.cs.princeton.edu"> <img src="http://algs4.cs.princeton.edu/cover-analysis-of-algorithms.png" width="81" height="108" border="0" alt="An Introduction to the Analysis of Algorithms by Robert Sedgewick and Philippe Flajolet"> </a> </td>
       </tr> 
      </tbody>
     </table> </li>
    <li><a class="title">Web Resources</a> </li>
    <li> <a href="/faq">FAQ</a> </li>
    <li> <a href="http://introcs.cs.princeton.edu/java/data">Data</a> </li>
    <li> <a href="/code">Code</a> </li>
    <li> <a href="/errata">Errata</a> </li>
    <li> <a href="/cheatsheet">Cheatsheet</a> </li>
    <li> <a href="/references">References</a> </li>
    <li> <a href="https://www.coursera.org/course/algs4partI">Online Course</a> </li>
    <li> <a href="/lectures">Lecture Slides</a> </li>
    <li> <a href="http://introcs.cs.princeton.edu/java/assignments">Programming Assignments</a> </li>
   </ul>  
   <p><br> <script>
  (function() {
    var cx = '005649317310637734940:s7fqljvxwfs';
    var gcse = document.createElement('script');
    gcse.type = 'text/javascript';
    gcse.async = true;
    gcse.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') +
        '//www.google.com/cse/cse.js?cx=' + cx;
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(gcse, s);
  })();
</script> 
    <gcse:searchbox-only></gcse:searchbox-only> </p>
   <p><br> </p>
  </div> 
  <div id="content"> 
   <h1>2.3 &nbsp; Quicksort</h1> 
   <p><br> Quicksort is popular because it is not difficult to implement, works well for a variety of different kinds of input data, and is substantially faster than any other sorting method in typical applications. It is in-place (uses only a small auxiliary stack), requires time proportional to N log N on the average to sort N items, and has an extremely short inner loop. </p>
   <p></p>
   <h2>The basic algorithm.</h2> Quicksort is a divide-and-conquer method for sorting. It works by 
   <em>partitioning</em> an array into two parts, then sorting the parts independently. 
   <p></p>
   <center> 
    <img SRC="images/quicksort-overview.png" alt="Quicksort overview"> 
   </center> The crux of the method is the partitioning process, which rearranges the array to make the following three conditions hold: 
   <ul> 
    <p></p>
    <li> The entry <tt>a[j]</tt> is in its final place in the array, for some <tt>j</tt>. <p></p></li>
    <li> No entry in <tt>a[lo]</tt> through <tt>a[j-1]</tt> is greater than <tt>a[j]</tt>. <p></p></li>
    <li> No entry in <tt>a[j+1]</tt> through <tt>a[hi]</tt> is less than <tt>a[j]</tt>. </li>
   </ul> We achieve a complete sort by partitioning, then recursively applying the method to the subarrays. It is a 
   <em>randomized</em> algorithm, because it randomly shuffles the array before sorting it. 
   <p></p>
   <h3>Partitioning.</h3> To complete the implementation, we need to implement the partitioning method. We use the following general strategy: First, we arbitrarily choose 
   <tt>a[lo]</tt> to be the partitioning item—the one that will go into its final position. Next, we scan from the left end of the array until we find an entry that is greater than (or equal to) the partitioning item, and we scan from the right end of the array until we find an entry less than (or equal to) the partitioning item. 
   <p></p>
   <center> 
    <img SRC="images/partitioning-overview.png" alt="Quicksort partitioning overview"> 
   </center> The two items that stopped the scans are out of place in the final partitioned array, so we exchange them. When the scan indices cross, all that we need to do to complete the partitioning process is to exchange the partitioning item 
   <tt>a[lo]</tt> with the rightmost entry of the left subarray (
   <tt>a[j]</tt>) and return its index 
   <tt>j</tt>. 
   <p></p>
   <center> 
    <img SRC="images/partitioning.png" alt="Quicksort partitioning"> 
   </center> 
   <p></p>
   <h3>Quicksort.</h3> 
   <a href="Quick.java.html">Quick.java</a> is an implementation of quicksort, using the partitioning method described above. 
   <p></p>
   <center> 
    <img SRC="images/quicksort.png" alt="Quicksort trace"> 
   </center> 
   <p></p>
   <h3>Implementation details.</h3> There are several subtle issues with respect to implementing quicksort that are reflected in this code and worthy of mention. 
   <ul> 
    <li><em>Partitioning inplace.</em> If we use an extra array, partitioning is easy to implement, but not so much easier that it is worth the extra cost of copying the partitioned version back into the original. </li>
    <li><em>Staying in bounds.</em> If the smallest item or the largest item in the array is the partitioning item, we have to take care that the pointers do not run off the left or right ends of the array, respectively. </li>
    <li><em>Preserving randomness.</em> The random shuffle puts the array in random order. Since it treats all items in the subarrays uniformly, <a href="Quick.java.html">Quick.java</a> has the property that its two subarrays are also in random order. This fact is crucial to the algorithm's predictability. An alternate way to preserve randomness is to choose a random item for partitioning within <tt>partition()</tt>. </li>
    <li><em>Terminating the loop.</em> Properly testing whether the pointers have crossed is a bit trickier than it might seem at first glance. A common error is to fail to take into account that the array might contain other keys with the same value as the partitioning item. </li>
    <li><em>Handling items with keys equal to the partitioning item's key.</em> It is best to stop the left scan for items with keys greater than <em>or equal to</em> the partitioning item's key and the right scan for items less than <em>or equal to</em> the partitioning item's key. Even though this policy might seem to create unnecessary exchanges involving items with keys equal to the partitioning item's key, it is crucial to avoiding quadratic running time in certain typical applications. </li>
    <li><em>Terminating the recursion.</em> A common mistake in implementing quicksort involves not ensuring that one item is always put into position, then falling into an infinite recursive loop when the partitioning item happens to be the largest or smallest item in the array. </li>
   </ul> 
   <!--
<p><h3>Performance characteristics.</h3>
The best case for quicksort is when each partitioning stage
divides the array exactly in half. This circumstance
would make the number of compares used by 
quicksort satisfy the divide-and-conquer recurrence
C(N) = 2 C(N/2) + N, which has the solution C(N) ~ N lg N.
Although things do not always go this well, it is true that
the partition falls in the middle 
on the average. 
--> 
   <p></p>
   <h3>Proposition.</h3> Quicksort uses ~2 N ln N compares (and one-sixth that many exchanges) on the average to sort an array of length N with distinct keys. 
   <p></p>
   <h3>Proposition.</h3> Quicksort uses ~N
   <sup>2</sup>/2 compares in the worst case, but random shuffling protects against this case. 
   <p> The standard deviation of the running time is about .65 N, so the running time tends to the average as N grows and is unlikely to be far from the average. The probability that quicksort will use a quadratic number of compares when sorting a large array on your computer is much less than the probability that your computer will be struck by lightning! </p>
   <p></p>
   <h3>Improvements.</h3> Quicksort was invented in 1960 by C. A. R. Hoare, and it has been studied and refined by many people since that time. 
   <ul> 
    <li><em>Cutoff to insertion sort.</em> As with mergesort, it pays to switch to insertion sort for tiny arrays. The optimum value of the cutoff is system-dependent, but any value between 5 and 15 is likely to work well in most situations. </li>
    <li><em>Median-of-three partitioning.</em> A second easy way to improve the performance of quicksort is to use the median of a small sample of items taken from the array as the partitioning item. Doing so will give a slightly better partition, but at the cost of computing the median. It turns out that most of the available improvement comes from choosing a sample of size 3 (and then partitioning on the middle item). </li>
   </ul> 
   <p></p>
   <h2>Visualization.</h2> 
   <a href="QuickBars.java.html">QuickBars.java</a> visualizes quicksort with median-of-3 partitioning and cutoff for small subarrays. 
   <p></p>
   <center> 
    <img SRC="images/quicksort-bars.png" alt="Quicksort visualization"> 
   </center> 
   <p></p>
   <h2>Entropy-optimal sorting.</h2> Arrays with large numbers of duplicate sort keys arise frequently in applications. In such applications, there is potential to reduce the time of the sort from linearithmic to linear. 
   <p> One straightforward idea is to partition the array into three parts, one each for items with keys smaller than, equal to, and larger than the partitioning item's key. Accomplishing this partitioning was a classical programming exercise popularized by E. W. Dijkstra as the <em>Dutch National Flag problem</em>, because it is like sorting an array with three possible key values, which might correspond to the three colors on the flag. </p>
   <p> Dijkstra's solution is based on a single left-to-right pass through the array that maintains a pointer <tt>lt</tt> such that <tt>a[lo..lt-1]</tt> is less than <tt>v</tt>, a pointer <tt>gt</tt> such that <tt>a[gt+1..hi]</tt> is greater than <tt>v</tt>, and a pointer <tt>i</tt> such that <tt>a[lt..i-1]</tt> are equal to v, and <tt>a[i..gt]</tt> are not yet examined. </p>
   <p></p>
   <center> 
    <img SRC="images/partitioning3-overview.png" alt="Quicksort 3-way partitioning overview"> 
   </center> 
   <p> Starting with <tt>i</tt> equal to <tt>lo</tt> we process <tt>a[i]</tt> using the 3-way compare given us by the <tt>Comparable</tt> interface to handle the three possible cases: </p>
   <ul> 
    <p></p>
    <li> <tt>a[i]</tt> less than <tt>v</tt>: exchange <tt>a[lt]</tt> with <tt>a[i]</tt> and increment both <tt>lt</tt> and <tt>i</tt> <p></p></li>
    <li> <tt>a[i]</tt> greater than <tt>v</tt>: exchange <tt>a[i]</tt> with <tt>a[gt]</tt> and decrement <tt>gt</tt> <p></p></li>
    <li> <tt>a[i]</tt> equal to <tt>v</tt>: increment <tt>i</tt> </li>
   </ul> 
   <p></p>
   <center> 
    <img SRC="images/partitioning3.png" alt="Quicksort 3-way partitioning trace"> 
   </center> 
   <p><a href="Quick3way.java.html">Quick3way.java</a> is an implementation of this method. </p>
   <p></p>
   <h3>Proposition.</h3> Quicksort with 3-way partitioning is entropy-optimal. 
   <p></p>
   <h2>Visualization.</h2> 
   <a href="Quick3wayBars.java.html">Quick3wayBars.java</a> visualizes quicksort with 3-way partitioning. 
   <p></p>
   <center> 
    <img SRC="images/quicksort3-bars.png" alt="3-way quicksort visualization"> 
   </center> 
   <p> </p>
   <h4>Exercises</h4> 
   <ol> 
    <a name="Ex2.3.1"></a> 
    <p></p>
    <li value="1"> Show, in the style of the trace given with <tt>partition()</tt>, how that method partitions the array <tt>E A S Y Q U E S T I O N</tt>. <p></p>
     <blockquote> 
      <img width="300" SRC="images/partition-3.1.1.png" alt="Partitioning trace"> 
     </blockquote> <a name="Ex2.3.2"></a> <p></p></li>
    <li value="2"> Show, in the style of the quicksort trace, how quicksort sorts the array <tt>E A S Y Q U E S T I O N</tt>. (For the purposes of this exercise, ignore the initial shuffle.) <p></p>
     <blockquote> 
      <img width="400" SRC="images/quick-3.1.2.png" alt="Quicksort trace"> 
     </blockquote> <a name="Ex2.3.5"></a> <p></p></li>
    <li value="5"> Write a program <a href="Sort2distinct.java.html">Sort2distinct.java</a> that sorts an array that is known to contain just two distinct key values. <a name="Ex2.3.8"></a> <p></p></li>
    <li value="8"> About how many compares will <tt>Quick.sort()</tt> make when sorting an array of N items that are all equal? <p><em>Solution.</em> ~ N lg N compares. Each partition will divide the array in half, plus or minus one. <a name="Ex2.3.12"></a> </p><p></p></li>
    <li value="12"> Show, in the style of the trace given with the code, how the entropy-optimal sort first partitions the array <tt>B A B A B A B A C A D A B R A</tt>. 
     <blockquote> 
      <img width="500" SRC="images/partition-3.1.12.png" alt="3-way Partitioning trace"> 
     </blockquote> </li>
   </ol> 
   <p> </p>
   <h4>Creative Problems</h4> 
   <ol> 
    <a name="Ex2.3.13"></a> 
    <p></p>
    <li value="13"><b>Nuts and bolts.</b> (G. J. E. Rawlins). You have a mixed pile of N nuts and N bolts and need to quickly find the corresponding pairs of nuts and bolts. Each nut matches exactly one bolt, and each bolt matches exactly one nut. By fitting a nut and bolt together, you can see which is bigger. But it is not possible to directly compare two nuts or two bolts. Given an efficient method for solving the problem. <p> <em>Hint</em>: customize quicksort to the problem. 
      <!--
Modified quicksort: pick a random bolt, compare it to all the nuts to finding
the matching nut, and compare that nut to all the bolts. This splits the
problem in two pieces.
--> 
      <!-- (<a href = "http://www.wisdom.weizmann.ac.il/~naor/PUZZLES/nuts.html">Reference.</a>) --> Side note: only a very complicated deterministic O(N log N) algorithm is known for this problem. <a name="Ex2.3.16"></a> </p><p></p></li>
    <li value="16"><b>Best case.</b> Write a program <a href="QuickBest.java.html">QuickBest.java</a> that produces a best-case array (with no duplicates) for <tt>Quick.sort()</tt>: an array of N distinct keys with the property that every partition will produce subarrays that differ in size by at most 1 (the same subarray sizes that would happen for an array of N equal keys). For the purposes of this exercise, ignore the initial shuffle. <p></p>
     <blockquote> 
      <img width="450" SRC="images/quicksort-best.png" alt="Best-case input for quicksort"> 
     </blockquote> <a name="Ex2.3.22"></a> <p></p></li>
    <li value="22"><b>Fast three-way partitioning.</b> (J. Bentley and D. McIlroy). Implement an entropy-optimal sort <a href="QuickX.java.html">QuickX.java</a> based on keeping equal keys at both the left and right ends of the subarray. Maintain indices p and q such that a[lo..p-1] that a[q+1..hi] are all equal to a[lo], an index i such that a[p..i-1] are all less than a[lo] and an index j such that a[j+1..q] are all greater than a[lo]. Add to the inner partitioning loop code to swap a[i] with a[p] (and increment p) if it is equal to v and to swap a[j] with a[q] (and decrement q) if it is equal to v before the usual comparisons of a[i] and a[j] with v. <p></p>
     <center> 
      <img SRC="images/partitioning4-overview.png" alt="Bentley-McIlroy 3-way partitioning overview"> 
     </center> After the partitioning loop has terminated, add code to swap the equal keys into position. </li>
   </ol> 
   <p> </p>
   <h4>Web Exercises</h4> 
   <ol> 
    <li> <a href="QuickKR.java.html">QuickKR.java</a> is one of the simplest quicksort implementations, and appears in K+R. Convince yourself that it is correct. How will it perform? All equal keys? </li>
    <li><b>Randomized quicksort.</b> Modify <tt>partition()</tt> so that it always chooses the partitioning item uniformly at random from the array (instead of shuffling the array initially). Compare the performance against <a href="Quick.java.html">Quick.java</a>. </li>
    <li><b>Antiquicksort.</b> The algorithm for sorting primitive types in Java is a variant of 3-way quicksort developed by <a href="../references/papers/bentley-mcilroy.pdf">Bentley and McIlroy</a>. It is extremely efficient for most inputs that arise in practice, including inputs that are already sorted. However, using a clever technique described by M. D. McIlroy in <a href="../references/papers/mcilroy.pdf">A Killer Adversary for Quicksort</a>, it is possible to construct pathological inputs that make the system sort run in quadratic time. Even worse, it overflows the function call stack. To see the sorting library in Java 6 break, here are some killer inputs of varying sizes: <a href="antiquicksort10K.txt">10,000</a>, <a href="antiquicksort20K.txt">20,000</a>, <a href="antiquicksort50K.txt">50,000</a>, <a href="antiquicksort100K.txt">100,000</a>, <a href="antiquicksort250K.txt">250,000</a>, <a href="antiquicksort500K.txt">500,000</a>, and <a href="antiquicksort1M.txt">1,000,000</a>. You can test them out using the program <a href="IntegerSort.java.html">IntegerSort.java</a> which takes a command line input N, reads in N integers from standard input, and sorts them using the system sort. </li>
    <li><b>Bad partitioning.</b> How does not stopping on equal keys make quicksort go quadratic when all keys are equal? <p><em>Solution.</em> Here is the result of partitioning AAAAAAAAAAAAAAA when we don't stop on equal keys. It unevenly partitions the array into one subproblem of size 0 and one of size 14. </p><p></p>
     <blockquote> 
      <img SRC="images/partition-go.png" alt="Partitioning AAAAAAAAAAAAAAA when we don't stop on equal keys"> 
     </blockquote> <p> Here is the result of partitioning AAAAAAAAAAAAAAA when we do stop on equal keys. It evenly partitions the array into two subproblems of size 7. </p><p></p>
     <blockquote> 
      <img SRC="images/partition-stop.png" alt="Partitioning AAAAAAAAAAAAAAA when we do stop on equal keys"> 
     </blockquote> </li>
    <li><b>Comparing an item against itself.</b> Show that our implementation of quicksort can compare an item against itself, i.e., calls <tt>less(i, i)</tt> for some index <tt>i</tt>. Modify our implementation so that it never compares an item against itself. </li>
    <li><b>Dual pivot quicksort.</b> Implement a version of Yaroslavskiy's dual-pivot quicksort. <p><em>Solution.</em> <a href="QuickDualPivot.java.html">QuickDualPivot.java</a> is an implementation that is very similar to <a href="Quick3way.java.html">Quick3way.java</a>. </p></li>
    <li><b>Three-pivot quicksort.</b> Implement a version of three-pivot quicksort ala <a href="http://epubs.siam.org/doi/abs/10.1137/1.9781611973198.6">Kushagra-Ortiz-Qiao-Munro</a>. </li>
    <li><b>Number of compares.</b> Give a family of inputs of size N for which the standard quicksort partitioning algorithm requires (i) N+1 compares, (ii) N compares, (iii) N-1 compares or argue that no such input exists. <p><em>Solution</em>: ascending order; descending order; none. </p></li>
   </ol> 
   <br>
   <br> 
   <p class="footer"> <em>Last modified on August 26, 2016.</em><br><br> Copyright © 2000–2016 <a href="http://www.cs.princeton.edu/~rs" class="footer">Robert Sedgewick</a> and <a href="http://www.cs.princeton.edu/~wayne" class="footer">Kevin Wayne</a>. All rights reserved. </p>
  </div> 
  <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script> 
  <script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-10811519-2");
pageTracker._trackPageview();
} catch(err) {}</script>   
 </body>
</html>