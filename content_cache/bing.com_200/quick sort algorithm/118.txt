<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <title>sorting</title> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <link rel="stylesheet" type="text/css" href="/~ray/styles/default.css"> 
  <link rel="stylesheet" type="text/css" href="/~ray/styles/prettify.css"> 
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto"> 
  <script src="/~ray/scripts/prettify.js"></script> 
 </head> 
 <body class="coursenotes"> 
  <script>onload = function () {prettyPrint();}</script> 
  <div class="container"> 
   <div class="innercontent"> 
    <h1>Sorting</h1> 
    <script type="text/x-mathjax-config">MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$']], displaymath: [['$$','$$']]}});</script>
    <script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script> 
    <header>
     Ah, sorting. Yep, gotta know it. No way you can pass yourself off as a serious developer or computer scientist without knowing this stuff.
    </header> 
    <h2>Demos First</h2> 
    <p>Some of the classics:</p> 
    <iframe width="560" height="315" src="//www.youtube.com/embed/kPRA0W1kECg" frameborder="0" allowfullscreen></iframe> 
    <p>Here is a comparison of nine different algorithms, run against each other, for different distributions:</p> 
    <iframe width="560" height="315" src="https://www.youtube.com/embed/ZZuD6iUe3Pc" frameborder="0" allowfullscreen></iframe> 
    <p>Some interactive applets (Java required):</p> 
    <ul> 
     <li><a href="http://www.cs.ubc.ca/spider/harrison/Java/sorting-demo.html">Jason Harrison’s</a> </li>
     <li><a href="http://cg.scs.carleton.ca/~morin/misc/sortalg/">Pat Morin’s</a> </li>
    </ul> 
    <h2>Classification of Algorithms</h2> 
    <p>Actually you can classify sorting algorithms many ways</p> 
    <ul> 
     <li>Stable vs. non-stable </li>
     <li>By time or space complexity </li>
     <li>Whether it works by comparing items or not </li>
    </ul> 
    <p>Here are some characteristics of various sorting algorithms, adapted (er, taken) from the excellent <a href="http://en.wikipedia.org/wiki/Sort_algorithm">Wikipedia page</a> on sorting. ($n$ = number of items to sort, $k$ = number of distinct keys.)</p> 
    <table class="centered"> 
     <tbody>
      <tr> 
       <th rowspan="2">Algorithm </th>
       <th rowspan="2">Stable? </th>
       <th colspan="2">Complexity </th>
       <th rowspan="2">Mechanism </th>
      </tr>
      <tr> 
       <th>Time </th>
       <th><em>Extra</em><br>Space </th>
      </tr>
      <tr>
       <td>Selection Sort </td>
       <td>No </td>
       <td>$\Theta(n^2)$ </td>
       <td>- </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Insertion Sort </td>
       <td>Yes </td>
       <td>$\Theta(n^2)$ </td>
       <td>- </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Bubble Sort </td>
       <td>Yes </td>
       <td>$\Theta(n^2)$ </td>
       <td>- </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Cocktail Sort </td>
       <td>Yes </td>
       <td>$\Theta(n^2)$ </td>
       <td>- </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Gnome Sort </td>
       <td>Yes </td>
       <td>$\Theta(n^2)$ </td>
       <td>- </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Shell Sort </td>
       <td>No </td>
       <td>Several variants, ranging from slightly worse than $\Theta(n \log n)$ to $\Theta(n^{1.5})$ </td>
       <td>- </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Comb Sort </td>
       <td>No </td>
       <td>$\Theta(n \log n)$ </td>
       <td>- </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Binary Tree Sort </td>
       <td>Yes </td>
       <td>$\Theta(n \log n)$ </td>
       <td>$\Theta(n)$ </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Merge Sort </td>
       <td>Yes </td>
       <td>$\Theta(n \log n)$ </td>
       <td>$\Theta(n)$ </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Quick Sort </td>
       <td>No </td>
       <td>$\Theta(n \log n)$ Worst: $\Theta(n^2)$ </td>
       <td>$\Theta(\log n)$ </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Heap Sort </td>
       <td>No </td>
       <td>$\Theta(n \log n)$ </td>
       <td>- </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Smooth Sort </td>
       <td>No </td>
       <td>$\Theta(n \log n)$ </td>
       <td>- </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Bucket Sort </td>
       <td>Yes </td>
       <td>$\Theta(n)$ </td>
       <td>$\Theta(n)$ </td>
       <td>Distribution </td>
      </tr>
      <tr>
       <td>Counting Sort </td>
       <td>Yes </td>
       <td>$\Theta(n+k)$ </td>
       <td>$\Theta(n+k)$ </td>
       <td>Distribution </td>
      </tr>
      <tr>
       <td>Radix Sort </td>
       <td>Yes </td>
       <td>$\Theta(ns)$ where s=key "length" </td>
       <td>$\Theta(n)$ </td>
       <td>Distribution </td>
      </tr>
      <tr>
       <td>Pigeonhole Sort </td>
       <td>Yes </td>
       <td>$\Theta(n+k)$ </td>
       <td>$\Theta(k)$ </td>
       <td>Distribution </td>
      </tr>
      <tr>
       <td>Stupid Sort </td>
       <td>Yes </td>
       <td>$\Theta(n^3)$ </td>
       <td>- </td>
       <td>Comparison </td>
      </tr>
      <tr>
       <td>Bogo Sort </td>
       <td>No </td>
       <td>Expected: $O(n \cdot n!)$. If lucky beyond belief: $O(n)$ . Worst: $O(\infty)$ </td>
       <td>$\Theta(n)$ </td>
       <td>Comparison </td>
      </tr>
     </tbody>
    </table> 
    <p>There are probably hundereds of other sorting algorithms, including some <a href="http://home.tiac.net/~cri_d/cri/2001/badsort.html">extremely inefficient and evil ones.</a></p> 
    <h2>Sorting in Java</h2> 
    <p>In Java one would usually use <code>Arrays.sort()</code>. There are two versions</p> 
    <pre class="code">
Arrays.sort(array)

Arrays.sort(array, comparator)
</pre> 
    <p>The array can be an array of <code>Object</code>s or an array of one of the primitive types. If the array contains primitives or objects of a class implementing <code>Comparable</code> you can use the simple form of <code>Arrays.sort()</code>. Otherwise a comparator is required.</p> 
    <div class="filename">
     <span>BuiltInSortingDemo.java</span>
    </div>
    <pre class="prettyprint">package edu.lmu.cs.sorting;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;

import javax.swing.JPanel;

/**
 * A throwaway example class showing how to use the built-in sorting
 * methods in java.util.Arrays.
 */
public class BuiltInSortingDemo extends JPanel {

    private static class Employee {
        String id = "";
        String name = "";
        String address = "";
        String phone = "";
        Date birthday = new Date();
        BigDecimal salary = new BigDecimal(0);
    }

    static Comparator&lt;Employee&gt; increasingName = new Comparator&lt;Employee&gt;() {
        public int compare(Employee e1, Employee e2) {
            return e1.name.compareTo(e2.name);
        }
    };

    static Comparator&lt;Employee&gt; decreasingSalary = new Comparator&lt;Employee&gt;() {
        public int compare(Employee e1, Employee e2) {
            return e2.salary.compareTo(e1.salary);
        }
    };

    static Employee alice = new Employee();
    static Employee bob = new Employee();

    public static void main(String[] args) {
        Arrays.sort(new int[]{3, 5, 1, 2, 4});
        Arrays.sort(new char[]{'d', 'q', 'a'});
        Arrays.sort(new byte[]{5, -3});
        Arrays.sort(new short[]{322, 98, -11111});
        Arrays.sort(new long[]{234234234, 23435112, 4214124214L});
        Arrays.sort(new float[]{4.3F});
        Arrays.sort(new double[]{9.9E-7, Double.MAX_VALUE});
        Arrays.sort(new String[]{"abc", "abb", "dog"});
        Arrays.sort(new Date[]{});
        // Will throw exception --&gt; Arrays.sort(new Employee[]{bob, alice});

        // Comparators are necessary for Employee objects since the
        // Employee class does not implement Comparable.
        Arrays.sort(new Employee[]{bob, alice}, increasingName);
        Arrays.sort(new Employee[]{bob, alice}, decreasingSalary);
    }

}
</pre> 
    <h2>Some Algorithms</h2> 
    <p>Okay, big deal, <code>Arrays.sort()</code> exists. But you still need to study sorting algorithms and implement some yourself because</p> 
    <ul> 
     <li>There is no one best algorithm — different algorithms work best in different situations, and a canned library routine might not work in your particular situation. </li>
     <li>You might find yourself programming in an environment without a sort method in a library. </li>
    </ul> 
    <h3>Selection Sort</h3> 
    <p>First, find the smallest element and swap it with the first. Sort the rest of the list the same way.</p> 
    <pre class="code">
for i in 0 .. n-2
    small := i
    for j in i+1 .. n-1
        if (a[j] &lt; a[small]) small := j
    swap(a[i], a[small])
</pre> 
    <p>Sample trace:</p> 
    <pre class="derivation">
20 54 16 36 99 11 74 88
<mark>11</mark> 54 16 36 99 20 74 88
<mark>11 16</mark> 54 36 99 20 74 88
<mark>11 16 20</mark> 36 99 54 74 88
<mark>11 16 20 36</mark> 54 99 74 88
<mark>11 16 20 36 54</mark> 99 74 88
<mark>11 16 20 36 54 74</mark> 99 88
<mark>11 16 20 36 54 74 88</mark> 99
</pre> 
    <p>Notes:</p> 
    <ul> 
     <li>Quadratic run time </li>
     <li>No swapping in inner loop </li>
     <li>After pass $k$, the first $k$ elements are in their final absolute positions </li>
    </ul> 
    <h3>Insertion Sort</h3> 
    <p>For the 2nd, 3rd, 4th, etc. element: slide backwards into proper relative sorted position.</p> 
    <pre class="code">
for i in 1 .. n-1
    current := a[i]
    j := i
    while (j &gt; 0 and current &lt; a[j-1])
        a[j] := a[j-1]
        j--
    a[j] = current
</pre> 
    <p>Sample trace:</p> 
    <pre class="derivation">
<mark>20</mark> 54 16 36 99 11 74 88
<mark>20 54</mark> 16 36 99 11 74 88
<mark>16 20 54</mark> 36 99 11 74 88
<mark>16 20 36 54</mark> 99 11 74 88
<mark>16 20 36 54 99</mark> 11 74 88
<mark>11 16 20 36 54 99</mark> 74 88
<mark>11 16 20 36 54 74 99</mark> 88
<mark>11 16 20 36 54 74 88 99</mark>
</pre> 
    <p>Notes</p> 
    <ul> 
     <li>Quadratic run-time on average (though linear if already sorted) </li>
     <li>After pass $k$, the first $k+1$ elements are in relative sorted order </li>
     <li>This is the way most people would sort a hand of cards </li>
     <li>In practice, does far fewer compares than selection sort </li>
     <li>But has moves in the inner loop </li>
     <li>If data sorted, or nearly sorted, this algorithm shines </li>
     <li>If data is reversed, this algorithm is worst </li>
     <li>Better than selection sort if moves are cheap; worse if expensive. </li>
    </ul> 
    <h3>Bubble Sort</h3> 
    <p>Systematically examine all pairs of adjacent elements, swapping them when they are out of order.</p> 
    <pre class="code">
for i in 0 .. n-2
    for j in i .. n-1
        if (a[j] &gt; a[j+1]) swap(a[j], a[j+1])
</pre> 
    <p>Ack, that examines <em>every pair</em> of elements. We need to stop when we make a pass that doesn’t swap anything.</p> 
    <pre class="code">
for i in 0 .. n-2
    swapped := false
    for j in i .. n-1
        if (a[j] &gt; a[j+1])
            swap(a[j], a[j+1])
            swapped := true
    return if not swapped
</pre> 
    <p>Notes</p> 
    <ul> 
     <li>Exchanges only adjacent elements, which is really slow </li>
     <li>Doesn’t need a temporary variable; just swap. </li>
     <li>The swapped flag is important because in practice you often find yourself working on data that is "nearly" sorted. </li>
     <li>Large elements near the beginning of the array (<b>rabbits</b>) move quickly to the other end, but small elements near the end (<b>turtles</b>) bubble up to the front very, very slowly. </li>
     <li>Bubblesort basically sucks: “the bubble sort seems to have nothing to recommend it, except a catchy name and the fact that it leads to some interesting theoretical problems.” (D. Knuth) </li>
    </ul> 
    <h3>Cocktail Sort</h3> 
    <p>This is a bidirectional bubble sort. Also called Shaker Sort or Shuttle Sort.</p> 
    <h3>Shell Sort</h3> 
    <p>Multiple-pass insertion-sort variant in which items are sifted more than one location at a time at first. The intervals decrease at each pass until they finally get down to one.</p> 
    <p>Read <a href="http://www.cs.princeton.edu/~rs/shell/paperF.pdf">Sedgewick’s short paper</a> on the complexity of Shellsort.</p> 
    <h3>Tree Sort</h3> 
    <p>For each item in the array, add it to a binary search tree. Traverse the tree inorder, writing each item back into the array.</p> 
    <pre class="code">
for x in a
    insert x into binary search tree T
refill a by traversing T inorder
</pre> 
    <p>Notes</p> 
    <ul> 
     <li>Will have $\Theta(n^2)$ worst-case complexity unless you use a tree that can balance itself (like a Red-Black) tree, in which case you get the $\Theta(n \log n)$. </li>
     <li>Needs lots of extra space </li>
    </ul> 
    <h3>Quick Sort</h3> 
    <p>Partition the array so one of the elements is in its final position with smaller elements to its left and larger ones to its right, then (recursively) sort each side.</p> 
    <p>Notes</p> 
    <ul> 
     <li>Fastest known comparison-based sort <strong>on average</strong> </li>
     <li>Has $\Theta(n^2)$ worst-case complexity, so is <strong>not suitable</strong> as a service to sort user input where users cannot be trusted. </li>
     <li>Choice of pivot is crucial -- the median would be the best choice but computing it is WAY too expensive! </li>
     <li>Common choice is median of the first, middle and last elements (called the <em>median-of-three</em>) </li>
     <li>However, an attacker can still compute a median-of-three killer sequence </li>
     <li>One way to avoid this is to choose the pivot at random, but median-of-three is still faster.... </li>
     <li>A common approach is to stop recursing when sublists get small and switch algorithms. Usually the "stopper" was insertion sort and "small" was a constant size like 10 or 15. </li>
     <li>David Musser’s <strong>Introsort</strong> is better though: it switches to heapsort when the algorithm detects the partitioning is tending toward the nasty quadratic behavior. </li>
    </ul> 
    <h3>Heap Sort</h3> 
    <p>First rearrange the array into a heap by sifting up each element in the latter half of the array one at a time. Then for each element starting at the beginning, sift it down. Voila!</p> 
    <h3>Merge Sort</h3> 
    <p>Recursively: split the list in half, sort each half, then merge the sorted halves together.</p> 
    <p>Sample trace:</p> 
    <pre class="derivation">
20 54 16 36 99 11 74 88
<mark>20 54</mark> <mark>16 36</mark> <mark>11 99</mark> <mark>74 88</mark>
<mark>16 20 36 54</mark> <mark>11 74 88 99</mark>
<mark>11 16 20 36 54 74 88 99</mark>
</pre> 
    <p>Notes</p> 
    <ul> 
     <li>Pretty easy to see that this is $\Theta(n \log n)$ </li>
     <li>Amenable to parallelism </li>
     <li>Basic algorithm requires $\Theta(n)$ space, but there does exist an in-place variant. </li>
    </ul> 
    <h3>Bucket Sort</h3> 
    <p>Partition the items into buckets. Sort each bucket. Read items out of buckets into final array.</p> 
    <h3>Counting Sort</h3> 
    <p>This one only works when the items to be sorted have fairly small integer keys. Set up an array called <code>frequency</code> whose indices are the range of the values you have to sort. Fill it with zeros. Go through the array you want to sort, incrementing the frequenccy array incrementing the count for each item you see. Then you can read out the sorted array from the frequencies. (Details in the code below.)</p> 
    <h3>Radix Sort</h3> 
    <p>This one only works when the items can be expressed as strings of bits, digits, characters, whatever — and these symbols are ordered. The algorithm is to repeatedly place in buckets (labeled with the symbols) from the <strong>least</strong> significant symbol to the most significant.</p> 
    <p>Example with decimal integers:</p> 
    <p>Input sequence is 759, 43, 989, 6, 206, 855, 209, 903, 102, 199, 721, 188, 5. First place in buckets on least significant digit.</p> 
    <pre>
    0:
    1:    721
    2:    102
    3:    043,903
    4:
    5:    855,005
    6:    006,206
    7:
    8:    188
    9:    759,989,209,199
</pre> 
    <p>The go through the buckets <strong>in order</strong>, writing into buckets based on the second digit</p> 
    <pre>
    0:    102,903,005,006,206,209
    1:
    2:    721
    3:
    4:    043
    5:    855,759
    6:
    7:
    8:    188,989,
    9:    199
</pre> 
    <p>The go through the buckets <strong>in order</strong>, writing into buckets based on the first digit</p> 
    <pre>
    0:    005,006,043
    1:    102,188,199
    2:    206,209
    3:
    4:
    5:
    6:
    7:    721,759
    8:    855
    9:    903,989
</pre> 
    <p>Now just read them out in order. Note that this is easy for binary numbers and strings, too.</p> 
    <h2>An Animated Sort Application</h2> 
    <div class="filename">
     <span>Sorter.java</span>
    </div>
    <pre class="prettyprint">package edu.lmu.cs.sorting;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.util.Arrays;
import java.util.Random;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JToolBar;

/**
 * A class containing a number of classic sorting algorithms,
 * implemented from scratch.  The algorithms each operate on arrays
 * of ints only, and are animated.
 */
public class Sorter extends JPanel {

    private static Random randomizer = new Random();
    private static final int ARRAY_LENGTH = 600;
    private static final int MAX_VALUE = 400;
    private final int[] array = new int[ARRAY_LENGTH];
    private transient boolean shouldStop = false;

    /**
     * Swaps a[i] and a[j].
     */
    private void swap(int[] a, int i, int j) {
        int old = a[i];
        a[i] = a[j];
        a[j] = old;
    }

    /**
     * Fills an array with random values between 0 and MAX_VALUE.
     */
    private void reload(int[] a) {
        for (int i = 0; i &lt; a.length; i++) {
            a[i] = randomizer.nextInt(MAX_VALUE);
        }
    }

    /**
     * Sorts an array using Selection Sort.  The algorithm is to first
     * put the smallest item in the first position, then the next
     * smallest in the second position, and so on.
     */
    public void selectionSort(int[] a) {
        for (int i = 0; i &lt; a.length - 1; i++) {
            int small = i;
            for (int j = i + 1; j &lt; a.length; j++) {
                if (a[j] &lt; a[small]) small = j;
                PAUSE();
            }
            swap(a, i, small);
        }
    }

    /**
     * Sorts an array using Insertion Sort.  The algorithm is to first
     * slide the second element back as far as it should go, then slide
     * the third back, and so on.
     */
    public void insertionSort(int[] a) {
        for (int i = 1; i &lt; a.length; i++) {
            int current = a[i];
            int j = i;
            for (; j &gt; 0 &amp;&amp; current &lt; a[j-1]; j--) {
                a[j] = a[j-1];
                PAUSE();
            }
            a[j] = current;
        }
    }

    /**
     * Sorts an array using Bubble Sort.
     */
    public void bubbleSort(int[] a) {
        for (int i = a.length - 1; i &gt; 0; i--) {
            for (int j = 0; j &lt; i; j++) {
                if (a[j] &gt; a[j + 1]) swap(a, j, j + 1);
                PAUSE();
            }
        }
    }

    /**
     * Sorts an array using Gnome Sort.
     */
    public void gnomeSort(int[] a) {
        for (int i = 0; i &lt; a.length;) {
            PAUSE();
            if (i == 0 || a[i-1] &lt;= a[i]) {
                i++;
            } else {
                swap(a, i, i - 1);
                i--;
            }
        }
    }

    /**
     * Sorts an array using Shell Sort.  This is a lousy Shell Sort.
     * I need to make a new one.
     */
    public void shellSort(int[] a) {
        int distance = a.length / 2;
        while (distance &gt; 0) {
            boolean changed = false;
            for (int i = 0; i &lt; a.length - distance; i++) {
                if (a[i] &gt; a[i + distance]) {
                    swap(a, i, i + distance);
                    changed = true;
                }
                PAUSE();
            }
            if (!changed) distance /= 2;
        }
    }

    /**
     * Sorts an array using Quick Sort.  This version of quicksort uses
     * the leftmost item as the pivot, but since this gives disastrous
     * performance on sorted and nearly sorted arrays, we scramble the
     * array first.
     */
    public void quickSort(int[] a) {
        // First shuffle (permute) the array
        for (int i = 0; i &lt; a.length; i++) {
            swap(a, i, randomizer.nextInt(ARRAY_LENGTH));
        }

        // Call the recursive helper
        quickSort(a, 0, a.length - 1);
    }

    private void quickSort(int[] a, int left, int right) {
        if (left &lt; right) {
            int i = left;
            int j = right;
            while (i &lt; j) {
                while (a[j] &gt; a[left]) {j--; PAUSE();}
                while (i &lt; j &amp;&amp; a[i] &lt;= a[left]) {i++; PAUSE();}
                if (i &lt; j) swap(a, i, j);
            }
            swap(a, left, j);
            quickSort(a, left, j-1);
            quickSort(a, j+1, right);
        }
    }

    /**
     * Sorts an array using Heap Sort.
     */
    public void heapSort(int[] a) {
        // Phase 1: make a heap by sifting down all non-leaf
        // elements, one after another, starting with the last
        // non-leaf element and going backwards.
        for (int i = a.length / 2 - 1; i &gt;= 0; i--) {
            for (int j = i; j * 2 + 1 &lt; a.length;) {
                PAUSE();
                int k = j * 2 + 1;
                if (k + 1 &lt; a.length &amp;&amp; a[k] &lt; a[k + 1]) k++;
                if (a[j] &lt; a[k]) swap(a, j, k); else break;
                j = k;
            }
        }
        // Phase 2: Successively place the biggest, then next biggest
        // items at the end of the array. each time reconstructing the
        // heap in the slots of the array not yet sorted.
        for (int i = a.length - 1; i &gt; 0; i--) {
            swap(a, 0, i);
            for (int j = 0; j * 2 + 1 &lt; i;) {
                PAUSE();
                int k = j * 2 + 1;
                if (k + 1 &lt; i &amp;&amp; a[k] &lt; a[k + 1]) k++;
                if (a[j] &lt; a[k]) swap(a, j, k); else break;
                j = k;
            }
        }
    }

    /**
     * Sorts an array using merge sort, the classic version with
     * the extra storage.
     */
    public void mergeSort(int[] a) {
        int[] scratch = new int[a.length];
        mergeSort(a, 0, a.length - 1, scratch);
    }

    private void mergeSort(int[] a, int lo, int hi, int[] scratch) {
        if (lo &gt;= hi) return;

        int mid = (lo + hi) / 2;
        mergeSort(a, lo, mid, scratch);
        mergeSort(a, mid + 1, hi, scratch);

        // Merge sorted sublists into temporary storage
        for (int i = lo, j = mid + 1, k = lo; k &lt;= hi; k++) {
            if ((i &lt;= mid) &amp;&amp; ((j &gt; hi) || (a[i] &lt; a[j]))) {
                scratch[k] = a[i++]; PAUSE();
            } else {
                scratch[k] = a[j++]; PAUSE();
            }
        }

        // Copy back from temporary storage
        for (int k = lo; k &lt;= hi; k++) {
            a[k] = scratch[k]; PAUSE();
        }
    }

    /**
     * Sorts an array using counting sort, provided all values in the
     * array are non-negative.  If there are negative values in the array,
     * the method will not sort but rather leave the array undefined.
     * Furthermore, the method will likely throw an OutOfMemoryError
     * if there are large integers in the array.
     */
    public void countingSort(int[] a) {
        int max = 0;
        for (int i = 0; i &lt; a.length; i++) {
            max = Math.max(max, a[i]);
            PAUSE();
        }
        System.out.println(max);
        int[] counts = new int[max + 1];
        Arrays.fill(counts, 0);
        for (int i = 0; i &lt; a.length; i++) {
            counts[a[i]]++;
            PAUSE();
        }
        for (int i = 0, j = 0; j &lt; counts.length; j++) {
            for (int k = 0; k &lt; counts[j]; k++) {
                a[i++] = j;
                PAUSE();
            }
        }
    }

    public static void main(String[] args) {
        Sorter sorter = new Sorter();
        JFrame frame = new JFrame("Sorting");
        frame.getContentPane().add(sorter.toolbar, "North");
        frame.getContentPane().add(sorter, "Center");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        sorter.runAnimation();
    }

    Action startAction = new AbstractAction("Start") {
        public void actionPerformed(ActionEvent e) {
            final String methodName = (String)comboBox.getSelectedItem();
            new Thread(new Runnable() {
                public void run() {
                startButton.setEnabled(false);
                stopButton.setEnabled(true);
                reload(array);
                try {
                    Sorter.class.getMethod(methodName,
                        new Class[]{array.getClass()})
                        .invoke(Sorter.this, new Object[]{array});
                } catch (Exception e) {
                }
                stopButton.setEnabled(false);
                startButton.setEnabled(true);
            }}
        ).start();
    }
    };

    Action stopAction = new AbstractAction("Stop") {
        public void actionPerformed(ActionEvent e) {
            shouldStop = true;
        }
    };

    private JToolBar toolbar = new JToolBar();
    private JButton startButton = new JButton(startAction);
    private JButton stopButton = new JButton(stopAction);
    JComboBox comboBox = new JComboBox(new String[]{
        "selectionSort",
        "insertionSort",
        "bubbleSort",
        "gnomeSort",
        "shellSort",
        "quickSort",
        "mergeSort",
        "heapSort",
        "countingSort"
    });

    public Sorter() {
        setPreferredSize(new Dimension(ARRAY_LENGTH, MAX_VALUE));
        setBorder(BorderFactory.createEtchedBorder());
        toolbar.add(comboBox);
        toolbar.add(startButton);
        toolbar.add(stopButton);
        comboBox.setMaximumRowCount(12);
    }

    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (int i = 0, n = array.length; i &lt; n; i++) {
            g.drawLine(i, MAX_VALUE, i, MAX_VALUE - array[i]);
        }
    }

    /**
     * Causes the screen to be repainted every 30 ms or so.
     */
    private void runAnimation() {
        while (true) {
            repaint();
            try {Thread.sleep(30);} catch (InterruptedException e) {}
        }
    }

    /**
     * Something to call periodically during sorting.
     */
    private void PAUSE() {
        try {
            Thread.sleep(1);
            if (shouldStop) {
                shouldStop = false;
                // Can't think of a better way to stop than this
                throw new RuntimeException();
            }
        } catch (InterruptedException e) {
        }
    }
}
</pre> 
    <h2>Choosing a Sorting Algorithm in Practice</h2> 
    <p>Which algorithm (or combination of algorithms!) is right for you depends on your particular application. Ask yourself:</p> 
    <ul> 
     <li>Are you sorting large or small numbers of items? </li>
     <li>Are the items themselves large or small? </li>
     <li>Is the item size fixed? </li>
     <li>Are there only a small number of possible input values? </li>
     <li>Are you sorting in-memory or external files? </li>
     <li>Are you sorting just indices, or must you move data? </li>
     <li>Is stability a requirement? </li>
     <li>Is the code running on an embedded device, or a richly endowed system with plenty of extra memory? </li>
     <li>Do you know what kind of input you are likely to get, for example, is there a good chance the initial data might already be sorted or nearly sorted? </li>
     <li>Is security an issue, that is, are you sorting user-supplied data which is subject to algorithmic complexity attacks? </li>
    </ul> 
   </div> 
  </div> 
  <script>
      var title = document.getElementsByTagName("h1")[0];
      if (title) document.title = title.innerHTML;
      var abstract = document.querySelector(".abstract");
      if (abstract) {
        var contentsDiv = document.createElement('div');
        contentsDiv.setAttribute('id', 'contents');
        var s = Array.from(document.getElementsByTagName("h2")).map(el => el.textContent);
        contentsDiv.innerHTML = '<div>CONTENTS</b></div><div>' + s.join(' • ') + '</div>';
        abstract.parentNode.insertBefore(contentsDiv, abstract.nextSibling);
      }
    </script>   
 </body>
</html>