<!doctype html>
<html lang="en-AU">
 <head>
  <meta charset="utf-8">
  <meta content="initial-scale=1,minimum-scale=1.0" name="viewport">
  <meta name="theme-color" content="#1e1e38">
  <meta property="og:title" content="Bucket sort"> 
  <meta name="description" content="Bucket sort, also known as bin sort, is a distribution sort that works by arranging elements into several ‘buckets’ which are then sorted using another sort, typically insertion sort, and merged into a sorted list.
">
  <meta property="og:description" content="Bucket sort, also known as bin sort, is a distribution sort that works by arranging elements into several ‘buckets’ which are then sorted using another sort, typically insertion sort, and merged into a sorted list.
">
  <meta property="og:url" content="www.growingwiththeweb.com/2015/06/bucket-sort.html">
  <meta property="og:type" content="article">
  <meta property="og:site_name" content="Growing with the Web">
  <meta property="twitter:site" content="@Tyriar">
  <meta property="twitter:card" content="summary_large_image">
  <meta property="og:image" content="http://www.growingwiththeweb.com/images/2015/06/29/bucket-sort.png">
  <meta property="article:publisher" content="https://www.facebook.com/GrowingWithTheWeb">
  <meta property="article:tag" content="Algorithm">
  <meta property="article:tag" content="C#">
  <meta property="article:tag" content="Computer science">
  <meta property="article:tag" content="Java">
  <meta property="article:tag" content="JavaScript">
  <meta property="article:tag" content="Open source">
  <meta property="article:tag" content="Python">
  <meta property="article:tag" content="Ruby">
  <meta property="article:tag" content="Sorting"> 
  <meta property="article:published_time" content="2015-06-29"> 
  <meta property="article:modified_time" content="2016-07-26">
  <title>Bucket sort -  Growing with the Web</title>
  <link href="/images/site/favicon.png" rel="shortcut icon" type="image/png">
  <link href="/images/site/faviconx192.png" rel="icon" sizes="192x192">
  <link href="http://www.growingwiththeweb.com/site.atom" rel="alternate" title="Growing with the Web - Atom" type="application/atom+xml">
  <link href="http://www.growingwiththeweb.com/2015/06/bucket-sort.html" rel="canonical">
  <style>.masthead{background-color:#1E1E38;color:silver;padding:1.5em 0;line-height:1.6}.masthead h1{color:#fff;font-size:1.5em;margin:0}.masthead .date{color:#9999a5;display:block;font-size:0.8em;font-style:italic}@media screen and (min-width: 1000px){.masthead .date{white-space:nowrap}}.previews .masthead{background-color:#EAEAEA}.previews .masthead .date{color:#633A7A}.top-header{text-align:center}#search-term{width:20em;height:34px;border:1px solid silver;background-color:transparent}@media screen and (max-width: 829px){#search-term{width:100%}}.top-nav li{display:inline-block;margin:11px 0.5em 0}.wrapper{margin:0 auto}@media screen and (min-width: 1000px){.wrapper{max-width:1000px}}@media screen and (max-width: 999px){.wrapper{padding:0 1em}}body{color:#1E1E38;font-family:"Open Sans","Helvetica","Arial",sans-serif;font-size:110%;margin:0}@media screen and (min-width: 501px){body{font-size:125%}}a{color:#9B59BF;text-decoration:none}h1,h2,h3,h4,h5,h6{font-weight:300}h2{margin-top:3em}.anchor{visibility:hidden}
</style>
 </head>
 <body>
  <header class="top-header wrapper">
   <a href="/" class="title"><img src="/images/site/logo.svg" alt="Site logo" class="logo"><h1>Growing with the Web</h1></a>
   <nav class="top-nav">
    <ul>
     <li><a href="/projects/" class="projects">Projects</a></li>
     <li><a href="/p/top-articles.html" class="top-articles">Top articles</a></li>
     <li><a href="/p/explore.html" class="explore">Explore</a></li>
     <li><a href="/p/about.html" class="about">About</a></li>
    </ul>
   </nav>
   <form id="search-form">
    <input autocomplete="off" id="search-term" placeholder="Search" type="search">
    <label class="screen-reader" for="search-term">Search term</label>
    <button type="submit" class="screen-reader" tabindex="-1">Search</button>
   </form>
  </header>
  <main class="content">
   <article> 
    <div class="masthead">
     <div class="wrapper"> 
      <header class="inner-wrapper">
       <h1>Bucket sort</h1> 
       <div class="date">
        Published 
        <time datetime="2015-06-29 00:00:00 +0000">29 June 2015</time>, updated 
        <time datetime="2016-7-26">26 July 2016</time> 
       </div> 
      </header> 
      <span class="screen-reader">Tags:</span>
      <ul class="tags inner-wrapper"> 
       <li><a href="/p/explore.html?t=Algorithm" rel="tag">Algorithm</a></li> 
       <li><a href="/p/explore.html?t=C%23" rel="tag">C#</a></li> 
       <li><a href="/p/explore.html?t=Computer%20science" rel="tag">Computer science</a></li> 
       <li><a href="/p/explore.html?t=Java" rel="tag">Java</a></li> 
       <li><a href="/p/explore.html?t=JavaScript" rel="tag">JavaScript</a></li> 
       <li><a href="/p/explore.html?t=Open%20source" rel="tag">Open source</a></li> 
       <li><a href="/p/explore.html?t=Python" rel="tag">Python</a></li> 
       <li><a href="/p/explore.html?t=Ruby" rel="tag">Ruby</a></li> 
       <li><a href="/p/explore.html?t=Sorting" rel="tag">Sorting</a></li> 
      </ul>
      <div class="inner-wrapper" itemprop="description"> 
       <p>Bucket sort, also known as bin sort, is a distribution sort that works by arranging elements into several ‘buckets’ which are then sorted using another sort, typically <a href="/2012/11/algorithm-insertion-sort.html">insertion sort</a>, and merged into a sorted list.</p> 
      </div>
     </div>
    </div> 
    <div class="wrapper">
     <div class="adsense-leaderboard">
      <ins class="adsbygoogle" style="display:inline-block;width:728px;height:90px" data-ad-client="ca-pub-8903061569350110" data-ad-slot="1194837583"></ins>
     </div>
     <script>(function () {
    var ads = document.querySelectorAll('.adsense-leaderboard');
    var ad = ads[ads.length - 1];
    if (window.navigator.userAgent.indexOf('Mobile') === -1) {
      var s1 = document.createElement('script');
      s1.setAttribute('async', 'async');
      s1.setAttribute('src', '//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js');
      ad.appendChild(s1);
      (adsbygoogle = window.adsbygoogle || []).push({});
    } else {
      ad.parentNode.parentNode.removeChild(ad.parentNode);
    }
  })();</script>
    </div> 
    <div class="wrapper"> 
     <div class="inner-wrapper"> 
      <p>Bucket sort can be exceptionally fast because of the way elements are assigned to buckets, typically using an array where the index is the value. This means that more auxiliary memory is required for the buckets at the cost of running time than more comparison sorts. It runs in <span class="math">O(n+k)</span> time in the average case where <span class="math">n</span> is the number of elements to be sorted and <span class="math">k</span> is the number of buckets.</p> 
      <figure class="post-image center-aligned"> 
       <img src="/images/2015/06/29/bucket-sort.svg" alt=""> 
       <figcaption>
        Bucket sort moves elements to buckets, then sorts the buckets
       </figcaption>
      </figure> 
      <p>While bucket sort is a distribution sort, it typically uses a comparison sort to sort the buckets after they have been allocated.</p> 
      <h2 id="complexity">Complexity</h2> 
      <table> 
       <tbody> 
        <tr> 
         <th colspan="3">Time</th> 
         <th>Space</th> 
        </tr> 
        <tr> 
         <th>Worst case</th> 
         <th>Best case</th> 
         <th>Average case</th> 
         <th>Worst case</th> 
        </tr> 
        <tr> 
         <td><span class="math">O(n^2)</span></td> 
         <td><span class="math">O(n + k)</span></td> 
         <td><span class="math">O(n + k)</span></td> 
         <td><span class="math">O(n + k)</span> auxiliary</td> 
        </tr> 
       </tbody> 
      </table> 
      <h2 id="when-its-fast">When it’s fast</h2> 
      <p>Bucket sort’s best case occurs when the data being sorted can be distributed between the buckets perfectly. If the values are sparsely allocated over the possible value range, a larger bucket size is better since the buckets will likely be more evenly distributed. An example of this is <code class="highlighter-rouge">[2303, 33, 1044]</code>, if buckets can only contain 5 different values then for this example 461 buckets would need to be initialised. A bucket size of 200-1000 would be much more reasonable.</p> 
      <p>The inverse of this is also true; a densely allocated array like <code class="highlighter-rouge">[103, 99, 119, 112, 111]</code> performs best when buckets are as small as possible.</p> 
      <p>Bucket sort is an ideal algorithm choice when:</p> 
      <ul> 
       <li>The additional <span class="math">O(n + k)</span> memory usage is not an issue</li> 
       <li>Elements are expected to be fairly evenly distributed</li> 
      </ul> 
      <h2 id="when-its-slow">When it’s slow</h2> 
      <p>Bucket sort performs at its worst, <span class="math">O(n^2)</span>, when all elements at allocated to the same bucket. Since individual buckets are sorted using another algorithm, if only a single bucket needs to be sorted, bucket sort will take on the complexity of the inner sorting algorithm.</p> 
      <p>This depends on the individual implementation though and can be mitigated. For example a bucket sort algorithm could be made to work with large bucket sizes by using <a href="/2012/11/algorithm-insertion-sort.html">insertion sort</a> on small buckets (due to its low overhead), and <a href="/2012/11/algorithm-merge-sort.html">merge sort</a> or <a href="/2012/12/algorithm-quicksort.html">quicksort</a> on larger buckets.</p> 
      <h2 id="bucket-sort-vs-counting-sort-vs-radix-sort">Bucket sort vs counting sort vs radix sort</h2> 
      <p>There are two main variants of bucket sort; one where there is a bucket for each value, and where buckets hold several values. Bucket sort is often seen as a generalisation of <a href="/2014/05/counting-sort.html">counting sort</a> because bucket sort with a bucket size of 1 is essentially counting sort, just with a more complex implementation. This can be spun the other way as well by saying that bucket sort is counting sort that uses more sophisticated buckets.</p> 
      <p>Another similar sort, <a href="/sorting/radix-sort-lsd/">radix sort</a>, also distributes items into buckets. However, they are distributed based on the individual digits within the values themselves.</p> 
      <p>In summary:</p> 
      <ul> 
       <li><a href="/2014/05/counting-sort.html">Counting sort</a>: buckets hold only a single value</li> 
       <li>Bucket sort: buckets hold a range of values</li> 
       <li><a href="/sorting/radix-sort-lsd/">Radix sort</a>: buckets hold values based on digits within their values</li> 
      </ul> 
      <h2 id="code">Code</h2> 
      <p>The most common implementation of bucket sort works by splitting the array of size <span class="math">n</span> into <span class="math">k</span> buckets, each of which house a value range of <span class="math">n/k</span>. The buckets are then sorted using a simple sorting algorithm that works well on the expected data, such as <a href="/2012/11/algorithm-insertion-sort.html">insertion sort</a>. Buckets are typically implemented using either linked lists or dynamic arrays.</p> 
      <div class="code-block start" data-cx-github="https://github.com/gwtw/csharp-sorting/blob/master/src/BucketSort.cs" data-java-github="https://github.com/gwtw/java-sorting/blob/master/src/com/growingwiththeweb/sorting/BucketSort.java" data-javascript-github="https://github.com/gwtw/js-sorting/blob/master/lib/bucket-sort.js" data-python-github="https://github.com/gwtw/py-sorting/blob/master/sort/bucket_sort.py" data-ruby-github="https://github.com/gwtw/ruby-sorting/blob/master/lib/bucket_sort.rb" data-headers="C#|Java|JavaScript|Python|Ruby"></div> 
      <pre class="prettyprint"><code class="lang-csharp">public class BucketSort : IIntegerSortingAlgorithm {
    private const int DefaultBucketSize = 5;

    public void Sort(int[] array) {
        Sort(array, DefaultBucketSize);
    }

    public void Sort(int[] array, int bucketSize) {
        if (array.Length == 0) {
            return;
        }

        // Determine minimum and maximum values
        int minValue = array[0];
        int maxValue = array[0];
        for (int i = 1; i &lt; array.Length; i++) {
            if (array[i] &lt; minValue) {
                minValue = array[i];
            } else if (array[i] &gt; maxValue) {
                maxValue = array[i];
            }
        }

        // Initialise buckets
        int bucketCount = (maxValue - minValue) / bucketSize + 1;
        IList&lt;List&lt;int&gt;&gt; buckets = new List&lt;List&lt;int&gt;&gt;(bucketCount);
        for (int i = 0; i &lt; bucketCount; i++) {
            buckets.Add(new List&lt;int&gt;());
        }

        // Distribute input array values into buckets
        for (int i = 0; i &lt; array.Length; i++) {
            buckets[(array[i] - minValue) / bucketSize].Add(array[i]);
        }

        // Sort buckets and place back into input array
        int currentIndex = 0;
        var insertionSort = new InsertionSort&lt;int&gt;();
        for (int i = 0; i &lt; buckets.Count; i++) {
            int[] bucketArray = buckets[i].ToArray();
            insertionSort.Sort(bucketArray);
            for (int j = 0; j &lt; bucketArray.Length; j++) {
                array[currentIndex++] = bucketArray[j];
            }
        }
    }
}</code></pre> 
      <pre class="prettyprint"><code class="lang-java">public class BucketSort {
    private static final int DEFAULT_BUCKET_SIZE = 5;

    public static void sort(Integer[] array) {
        sort(array, DEFAULT_BUCKET_SIZE);
    }

    public static void sort(Integer[] array, int bucketSize) {
        if (array.length == 0) {
            return;
        }

        // Determine minimum and maximum values
        Integer minValue = array[0];
        Integer maxValue = array[0];
        for (int i = 1; i &lt; array.length; i++) {
            if (array[i] &lt; minValue) {
                minValue = array[i];
            } else if (array[i] &gt; maxValue) {
                maxValue = array[i];
            }
        }

        // Initialise buckets
        int bucketCount = (maxValue - minValue) / bucketSize + 1;
        List&lt;List&lt;Integer&gt;&gt; buckets = new ArrayList&lt;List&lt;Integer&gt;&gt;(bucketCount);
        for (int i = 0; i &lt; bucketCount; i++) {
            buckets.add(new ArrayList&lt;Integer&gt;());
        }

        // Distribute input array values into buckets
        for (int i = 0; i &lt; array.length; i++) {
            buckets.get((array[i] - minValue) / bucketSize).add(array[i]);
        }

        // Sort buckets and place back into input array
        int currentIndex = 0;
        for (int i = 0; i &lt; buckets.size(); i++) {
            Integer[] bucketArray = new Integer[buckets.get(i).size()];
            bucketArray = buckets.get(i).toArray(bucketArray);
            InsertionSort.sort(bucketArray);
            for (int j = 0; j &lt; bucketArray.length; j++) {
                array[currentIndex++] = bucketArray[j];
            }
        }
    }
}</code></pre> 
      <pre class="prettyprint"><code class="lang-js">/**
 * Sorts an array using bucket sort.
 * @param {number[]} array The array to sort.
 * @param {number} [bucketSize=5] The number of values a bucket can hold.
 * @returns The sorted array.
 */
function sort(array, bucketSize) {
  if (array.length === 0) {
    return array;
  }

  // Determine minimum and maximum values
  var i;
  var minValue = array[0];
  var maxValue = array[0];
  for (i = 1; i &lt; array.length; i++) {
    if (array[i] &lt; minValue) {
      minValue = array[i];
    } else if (array[i] &gt; maxValue) {
      maxValue = array[i];
    }
  }

  // Initialise buckets
  var DEFAULT_BUCKET_SIZE = 5;
  bucketSize = bucketSize || DEFAULT_BUCKET_SIZE;
  var bucketCount = Math.floor((maxValue - minValue) / bucketSize) + 1;
  var buckets = new Array(bucketCount);
  for (i = 0; i &lt; buckets.length; i++) {
    buckets[i] = [];
  }

  // Distribute input array values into buckets
  for (i = 0; i &lt; array.length; i++) {
    buckets[Math.floor((array[i] - minValue) / bucketSize)].push(array[i]);
  }

  // Sort buckets and place back into input array
  array.length = 0;
  for (i = 0; i &lt; buckets.length; i++) {
    insertionSort(buckets[i]);
    for (var j = 0; j &lt; buckets[i].length; j++) {
      array.push(buckets[i][j]);
    }
  }

  return array;
}</code></pre> 
      <pre class="prettyprint"><code class="lang-py">def sort(array, bucketSize=DEFAULT_BUCKET_SIZE):
  if len(array) == 0:
    return array

  # Determine minimum and maximum values
  minValue = array[0]
  maxValue = array[0]
  for i in range(1, len(array)):
    if array[i] &lt; minValue:
      minValue = array[i]
    elif array[i] &gt; maxValue:
      maxValue = array[i]

  # Initialize buckets
  bucketCount = math.floor((maxValue - minValue) / bucketSize) + 1
  buckets = []
  for i in range(0, bucketCount):
    buckets.append([])

  # Distribute input array values into buckets
  for i in range(0, len(array)):
    buckets[math.floor((array[i] - minValue) / bucketSize)].append(array[i])

  # Sort buckets and place back into input array
  array = []
  for i in range(0, len(buckets)):
    insertion_sort.sort(buckets[i])
    for j in range(0, len(buckets[i])):
      array.append(buckets[i][j])

  return array</code></pre> 
      <pre class="prettyprint"><code class="lang-rb">module BucketSort
  include InsertionSort

  # Sorts an array using bucket sort.
  def self.sort(array, bucket_size = 5)
    if array.empty?
      return
    end

    # Determine minimum and maximum values
    min_value = array.min
    max_value = array.max

    # Initialise buckets
    bucket_count = ((max_value - min_value) / bucket_size).floor + 1
    buckets = Array.new(bucket_count)
    (0..buckets.length - 1).each do |i|
      buckets[i] = []
    end

    # Distribute input array values into buckets
    (0..array.length - 1).each do |i|
      buckets[((array[i] - min_value) / bucket_size).floor].push(array[i])
    end

    # Sort buckets and place back into input array
    array.clear
    (0..buckets.length - 1).each do |i|
      InsertionSort.sort buckets[i]
      buckets[i].each do |value|
        array.push(value)
      end
    end
  end
end</code></pre> 
      <div class="code-block end"></div> 
      <h2>Textbooks</h2>Here are two 
      <abbr title="Computer Science">CS</abbr> textbooks I personally recommend; the 
      <a target="_blank" href="https://www.amazon.com/gp/product/1848000693/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1848000693&amp;linkCode=as2&amp;tag=gwtw-20&amp;linkId=ffbe64a86d9790f8a1dd8c9e12cead65">Algorithm Design Manual</a> (Steven S. Skiena) is a fantastic introduction to data structures and algorithms without getting to deep into the maths side of things, and 
      <a target="_blank" href="https://www.amazon.com/gp/product/0262033844/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0262033844&amp;linkCode=as2&amp;tag=gwtw-20&amp;linkId=e062e33795475604184c78b7c05d0682">Introduction to Algorithms</a> (
      <abbr title="Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein">CLRS</abbr>) which provides a much deeper, math heavy look.
      <p style="text-align:center"><iframe style="width:120px;height:240px" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=US&amp;source=ac&amp;ref=qf_sp_asin_til&amp;ad_type=product_link&amp;tracking_id=gwtw-20&amp;marketplace=amazon&amp;region=US&amp;placement=1848000693&amp;asins=1848000693&amp;linkId=c4cedf7e307b4aef1fa39ecf278698eb&amp;show_border=true&amp;link_opens_in_new_window=true&amp;price_color=333333&amp;title_color=0066c0&amp;bg_color=ffffff"></iframe>&nbsp;<iframe style="width:120px;height:240px" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=US&amp;source=ac&amp;ref=qf_sp_asin_til&amp;ad_type=product_link&amp;tracking_id=gwtw-20&amp;marketplace=amazon&amp;region=US&amp;placement=0262033844&amp;asins=0262033844&amp;linkId=bef55279b2b6cd7e21addc24a6939058&amp;show_border=true&amp;link_opens_in_new_window=true&amp;price_color=333333&amp;title_color=0066c0&amp;bg_color=ffffff"></iframe></p> 
      <div class="share-icons">
       <h2 class="no-anchor">Share this page</h2>
       <ul>
        <li class="google-plus"><a target="_blank" href="https://plus.google.com/share?url={url}"><img title="Share on Google+" alt="Share on Google+" src="/images/social/google-plus-dark.svg"></a></li>
        <li class="twitter"><a target="_blank" href="https://twitter.com/share?text=Bucket sort&amp;url={url}&amp;via=Tyriar"><img title="Share on Twitter" alt="Share on Twitter" src="/images/social/twitter-dark.svg"></a></li>
        <li class="facebook"><a target="_blank" href="https://www.facebook.com/sharer/sharer.php?u={url}"><img title="Share on Facebook" alt="Share on Facebook" src="/images/social/facebook-dark.svg"></a></li>
        <li class="linked-in"><a target="_blank" href="https://www.linkedin.com/cws/share?url={url}"><img title="Share on LinkedIn" alt="Share on LinkedIn" src="/images/social/linkedin-dark.svg"></a></li>
       </ul>
      </div> 
      <h2 id="gwtw-related-posts">More posts tagged <a href="/p/explore.html?t=Sorting" rel="tag">Sorting</a></h2>
      <div class="related-posts">
       <ul> 
        <li><a href="/2016/10/odd-even-sort.html">Odd-even sort</a></li> 
        <li><a href="/2016/09/comb-sort.html">Comb sort</a></li> 
        <li><a href="/2016/04/cocktail-sort.html">Cocktail sort</a></li> 
        <li><a href="/2014/06/sorting-algorithms.html">Sorting algorithms</a></li> 
        <li><a href="/2014/05/counting-sort.html">Counting sort</a></li> 
        <li><a href="/2014/02/bubble-sort.html">Bubble sort</a></li> 
        <li><a href="/2013/12/selection-sort.html">Selection sort</a></li> 
        <li><a href="/2012/12/algorithm-quicksort.html">Quicksort</a></li> 
        <li><a href="/2012/11/algorithm-heapsort.html">Heapsort</a></li> 
        <li><a href="/2012/11/algorithm-insertion-sort.html">Insertion sort</a></li> 
       </ul>
      </div> 
      <h2 id="gwtw-comments">Comments</h2>
      <div>
       <div id="disqus_thread"></div>
       <script>var disqus_shortname = 'gwtw';
    (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();</script>
       <noscript>
        Please enable JavaScript to view the 
        <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
       </noscript>
       <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
      </div> 
     </div> 
    </div> 
   </article> 
   <div class="follow-me-popup social-icons">
    Like this article?
    <br>Subscribe for more!
    <ul>
     <li class="email"><a href="http://eepurl.com/OJXwz" title="Subscribe by email"><img alt="Subscribe by email" src="/images/social/email.svg"></a></li>
     <li class="feed"><a href="/site.atom"><img alt="RSS/Atom feed" src="/images/social/feed.svg"></a></li>
     <li class="google-plus"><a href="https://plus.google.com/+DanielImms?rel=author"><img alt="Google+" src="/images/social/google-plus.svg"></a></li>
     <li class="twitter"><a href="https://twitter.com/Tyriar"><img alt="Twitter" src="/images/social/twitter.svg"></a></li>
     <li class="facebook"><a href="https://www.facebook.com/GrowingWithTheWeb"><img alt="Facebook" src="/images/social/facebook.svg"></a></li>
    </ul>
   </div> 
  </main>
  <footer class="site-footer">
   <div class="social-icons">
    <h1>Follow me</h1>
    <ul>
     <li class="email"><a href="http://eepurl.com/OJXwz" title="Subscribe by email"><img alt="Subscribe by email" src="/images/social/email.svg"></a></li>
     <li class="feed"><a href="/site.atom"><img alt="Feed" src="/images/social/feed.svg"></a></li>
     <li class="google-plus"><a href="https://plus.google.com/+DanielImms?rel=author"><img alt="Google+" src="/images/social/google-plus.svg"></a></li>
     <li class="twitter"><a href="https://twitter.com/Tyriar"><img alt="Twitter" src="/images/social/twitter.svg"></a></li>
     <li class="facebook"><a href="https://www.facebook.com/GrowingWithTheWeb"><img alt="Facebook" src="/images/social/facebook.svg"></a></li>
     <li class="linked-in"><a href="https://www.linkedin.com/in/danielimms"><img alt="LinkedIn" src="/images/social/linkedin.svg"></a></li>
     <li class="github"><a href="https://github.com/Tyriar"><img alt="GitHub" src="/images/social/github.svg"></a></li>
     <li class="codepen"><a href="http://codepen.io/Tyriar"><img alt="CodePen" src="/images/social/codepen.svg"></a></li>
     <li class="stack-overflow"><a href="http://stackoverflow.com/users/1156119/daniel-imms"><img alt="Stack Overflow" src="/images/social/stackoverflow.svg"></a></li>
    </ul>
   </div>© 2012-2017 Daniel Imms. All Rights Reserved.
   <br>
   <a href="/p/about.html">About</a> | 
   <a href="/p/disclaimer.html">Disclaimer</a> | 
   <a href="/p/code-license.html">Code license</a> | 
   <a href="/p/third-party-licenses.html">Third party licenses</a> | 
   <a href="/p/sitemap.html">Sitemap</a>
  </footer>
  <script>var home='';var tagNames=["Accessibility","Algorithm","Amazon","Android","Artificial intelligence","ASP.NET MVC","Bash","Behavioural design pattern","Blogging","Browser","C#","Canvas","Chrome","Computer science","Concurrency","Creational design pattern","CSS","Dart","Data structure","Debugging","Design","Design pattern","Entity framework","Extension method","Firefox","Generics","Ghost","Git","GitHub","Google","Graph","Heap","Hotkey","HTML","IIS","Interview question","Java","JavaScript","Jekyll","jQuery","Knockout","LESS","Life","LINQ","Linux","macOS","Markdown","Math","Microsoft","My projects","Natural language","Open source","Optimisation","Pathfinding","Prettyprint","Productivity","Python","Razor","Reflection","Responsive web design","Ruby","Sass","Search engine","Searching","SEO","Software engineering","Sorting","Snippet","SQL","Stack Overflow","Structural design pattern","Stylus","Sublime Text","SVG","Telemetry","Testing","Travis CI","Tree","Ubuntu","Umbraco","UML","Unicode","Visual Studio","Visual Studio Code","Windows","XML"];!function(){"use strict";var a=document.createElement("datalist");a.id="label-list";for(var b=0,c=0;c<tagNames.length;c++)if(0===c||tagNames[c]!==tagNames[c-1]){tagNames[b++]=tagNames[c];var d=document.createElement("option");d.setAttribute("value",tagNames[c]),a.appendChild(d)}tagNames.splice(b),document.body.appendChild(a),document.querySelector("#search-term").setAttribute("list","label-list")}();</script>
  <script src="/scripts/site.js" type="text/javascript" async></script>
  <script src="/third_party/katex/katex.min.js" async></script>
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/third_party/katex/katex.min.css">
  <script>!function(a,b,c,d,e,f,g){a.GoogleAnalyticsObject=e,a[e]=a[e]||function(){(a[e].q=a[e].q||[]).push(arguments)},a[e].l=1*new Date,f=b.createElement(c),g=b.getElementsByTagName(c)[0],f.async=1,f.src=d,g.parentNode.insertBefore(f,g)}(window,document,"script","//www.google-analytics.com/analytics.js","ga"),ga("create","UA-36684224-1","growingwiththeweb.com"),ga("send","pageview");</script>
 </body>
</html>