<!doctype html>
<html lang="en-US" xmlns:fb="https://www.facebook.com/2008/fbml" xmlns:addthis="https://www.addthis.com/help/api-spec">
 <head> 
  <meta charset="UTF-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <title>Quick Sort Algorithm</title> 
  <link rel="profile" href="http://gmpg.org/xfn/11"> 
  <link rel="pingback" href="http://theoryofprogramming.com/xmlrpc.php"> 
  <!-- Prism added by Vamsi for dynamic syntax highighting --> 
  <link href="http://theoryofprogramming.com/prism.css" rel="stylesheet" type="text/css"> 
  <!-- This site is optimized with the Yoast SEO plugin v4.8 - https://yoast.com/wordpress/plugins/seo/ --> 
  <meta name="description" content="Quick Sort is considered to be the fastest sorting Algorithm. Learn the Quick Sort Algorithm with the help of drawn diagrams, explanations and source code."> 
  <meta name="robots" content="noodp"> 
  <link rel="canonical" href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:description" content="Quick Sort is considered to be the fastest sorting Algorithm. Learn the Quick Sort Algorithm with the help of drawn diagrams, explanations and source code."> 
  <meta name="twitter:title" content="Quick Sort Algorithm"> 
  <meta name="twitter:image" content="http://theoryofprogramming.com/wp-content/uploads/2015/01/quick11.jpg"> 
  <!-- / Yoast SEO plugin. --> 
  <link rel="dns-prefetch" href="//s0.wp.com"> 
  <link rel="dns-prefetch" href="//s.gravatar.com"> 
  <link rel="dns-prefetch" href="//fonts.googleapis.com"> 
  <link rel="dns-prefetch" href="//s.w.org"> 
  <link rel="alternate" type="application/rss+xml" title="Theory of Programming » Feed" href="http://theoryofprogramming.com/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="Theory of Programming » Comments Feed" href="http://theoryofprogramming.com/comments/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="Theory of Programming » Quick Sort Algorithm Comments Feed" href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/feed/"> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.2.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.2.1\/svg\/","svgExt":".svg","source":{"concatemoji":"http:\/\/theoryofprogramming.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=c4812eb64ba82949389883f9ad21f9ca"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),!(j.toDataURL().length<3e3)&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57331,65039,8205,55356,57096),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57331,55356,57096),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55357,56425,55356,57341,8205,55357,56507),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55357,56425,55356,57341,55357,56507),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="stylesheet" id="owl.carousel.style-css" href="http://theoryofprogramming.com/wp-content/plugins/wp-posts-carousel/owl.carousel/assets/owl.carousel.css?ver=c4812eb64ba82949389883f9ad21f9ca" type="text/css" media="all"> 
  <link rel="stylesheet" id="hemingway-rewritten-fonts-css" href="https://fonts.googleapis.com/css?family=Raleway%3A400%2C300%2C700%7CLato%3A400%2C700%2C400italic%2C700italic&amp;subset=latin%2Clatin-ext" type="text/css" media="all"> 
  <link rel="stylesheet" id="hemingway-rewritten-style-css" href="http://theoryofprogramming.com/wp-content/themes/hemingway-rewritten-wpcom/style.css?ver=c4812eb64ba82949389883f9ad21f9ca" type="text/css" media="all"> 
  <link rel="stylesheet" id="genericons-css" href="http://theoryofprogramming.com/wp-content/plugins/jetpack/_inc/genericons/genericons/genericons.css?ver=3.1" type="text/css" media="all"> 
  <!-- Inline jetpack_facebook_likebox --> 
  <style id="jetpack_facebook_likebox-inline-css" type="text/css">
.widget_facebook_likebox {
	overflow: hidden;
}

</style> 
  <link rel="stylesheet" id="addthis_all_pages-css" href="http://theoryofprogramming.com/wp-content/plugins/addthis-follow/frontend/build/addthis_wordpress_public.min.css?ver=c4812eb64ba82949389883f9ad21f9ca" type="text/css" media="all"> 
  <link rel="stylesheet" id="jetpack_css-css" href="http://theoryofprogramming.com/wp-content/plugins/jetpack/css/jetpack.css?ver=4.9" type="text/css" media="all"> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-includes/js/jquery/jquery.js?ver=1.12.4"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var related_posts_js_options = {"post_heading":"h4"};
/* ]]> */
</script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/jetpack/modules/related-posts/related-posts.js?ver=20150408"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/wp-posts-carousel/owl.carousel/owl.carousel.js?ver=2.0.0"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/wp-posts-carousel/owl.carousel/jquery.mousewheel.min.js?ver=3.1.12"></script> 
  <link rel="https://api.w.org/" href="http://theoryofprogramming.com/wp-json/"> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://theoryofprogramming.com/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://theoryofprogramming.com/wp-includes/wlwmanifest.xml"> 
  <link rel="shortlink" href="http://wp.me/p6qMA9-4F"> 
  <link rel="alternate" type="application/json+oembed" href="http://theoryofprogramming.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Ftheoryofprogramming.com%2F2015%2F01%2F20%2Fquick-sort-algorithm%2F"> 
  <link rel="alternate" type="text/xml+oembed" href="http://theoryofprogramming.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Ftheoryofprogramming.com%2F2015%2F01%2F20%2Fquick-sort-algorithm%2F&amp;format=xml"> 
  <!-- Open Graph tags generated by Open Graph Metabox for WordPress --> 
  <meta property="og:url" content="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/"> 
  <meta property="og:title" content="Theory of Programming"> 
  <meta property="og:description" content="Theory of Programming is a very helpful website that helps you in understanding a wide range of programming concepts such as Data Structures, Algorithms, Java and C++."> 
  <meta property="og:image" content="http://theoryofprogramming.com/wp-content/uploads/2014/12/theory-of-programming-og-image.jpg"> 
  <meta property="og:type" content="blog"> 
  <meta property="fb:app_id" content="886385758049299"> 
  <meta property="fb:admins" content="https://www.facebook.com/vamsi.sangam"> 
  <!-- /Open Graph tags generated by Open Graph Metabox for WordPress --> 
  <script type="text/javascript">
(function(url){
	if(/(?:Chrome\/26\.0\.1410\.63 Safari\/537\.31|WordfenceTestMonBot)/.test(navigator.userAgent)){ return; }
	var addEvent = function(evt, handler) {
		if (window.addEventListener) {
			document.addEventListener(evt, handler, false);
		} else if (window.attachEvent) {
			document.attachEvent('on' + evt, handler);
		}
	};
	var removeEvent = function(evt, handler) {
		if (window.removeEventListener) {
			document.removeEventListener(evt, handler, false);
		} else if (window.detachEvent) {
			document.detachEvent('on' + evt, handler);
		}
	};
	var evts = 'contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop keydown keypress keyup mousedown mousemove mouseout mouseover mouseup mousewheel scroll'.split(' ');
	var logHuman = function() {
		var wfscr = document.createElement('script');
		wfscr.type = 'text/javascript';
		wfscr.async = true;
		wfscr.src = url + '&r=' + Math.random();
		(document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(wfscr);
		for (var i = 0; i < evts.length; i++) {
			removeEvent(evts[i], logHuman);
		}
	};
	for (var i = 0; i < evts.length; i++) {
		addEvent(evts[i], logHuman);
	}
})('//theoryofprogramming.com/?wordfence_logHuman=1&hid=10490D0D4907C1459561F598FD7EE90A');
</script>
  <script>var wp_posts_carousel_url="http://theoryofprogramming.com/wp-content/plugins/wp-posts-carousel/";</script> 
  <link rel="dns-prefetch" href="//v0.wordpress.com"> 
  <link rel="dns-prefetch" href="//i0.wp.com"> 
  <link rel="dns-prefetch" href="//i1.wp.com"> 
  <link rel="dns-prefetch" href="//i2.wp.com"> 
  <link rel="dns-prefetch" href="//widgets.wp.com"> 
  <link rel="dns-prefetch" href="//s0.wp.com"> 
  <link rel="dns-prefetch" href="//0.gravatar.com"> 
  <link rel="dns-prefetch" href="//1.gravatar.com"> 
  <link rel="dns-prefetch" href="//2.gravatar.com"> 
  <link rel="dns-prefetch" href="//jetpack.wordpress.com"> 
  <link rel="dns-prefetch" href="//s1.wp.com"> 
  <link rel="dns-prefetch" href="//s2.wp.com"> 
  <link rel="dns-prefetch" href="//public-api.wordpress.com"> 
  <style type="text/css">img#wpstats{display:none}</style> 
  <style type="text/css">
			.site-title a,
		.site-description {
			color: #ffffff;
		}
				.site-header-image {
			background-image: url(http://theoryofprogramming.com/wp-content/uploads/2015/02/cropped-cropped-maxresdefault-11.jpg);
		}
		</style> 
  <style type="text/css" id="syntaxhighlighteranchor"></style> 
  <link rel="icon" href="https://i0.wp.com/theoryofprogramming.com/wp-content/uploads/2015/07/favicon-5598e074v1_site_icon.png?fit=32%2C32" sizes="32x32"> 
  <link rel="icon" href="https://i0.wp.com/theoryofprogramming.com/wp-content/uploads/2015/07/favicon-5598e074v1_site_icon.png?fit=192%2C192" sizes="192x192"> 
  <link rel="apple-touch-icon-precomposed" href="https://i0.wp.com/theoryofprogramming.com/wp-content/uploads/2015/07/favicon-5598e074v1_site_icon.png?fit=180%2C180"> 
  <meta name="msapplication-TileImage" content="https://i0.wp.com/theoryofprogramming.com/wp-content/uploads/2015/07/favicon-5598e074v1_site_icon.png?fit=270%2C270"> 
  <meta data-pso-pv="1.2.1" data-pso-pt="singlePost" data-pso-th="e166bfca2ba745d68b2ea7be7ebbc86d">
  <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <script pagespeed_no_defer="" data-pso-version="20170502_060509">window.dynamicgoogletags={config:[]};dynamicgoogletags.config=["ca-pub-2773341715970647",[[[["ARTICLE",0,null,[],0],["10px","30.600000381469727px",0],0,[0],"9437166017",0]]],[[[],[[["BODY",0,null,[]],["10px","10px",1],1,[4],null,0,null,null,2],[["HEADER",0,null,[]],["10px","10px",1],3,[2],null,0,null,null,4],[["DIV",null,null,["menu-navigate-container"]],["16px","10px",1],0,[2],null,0,null,null,5],[["DIV",null,"header-search-toggle",[]],["10px","16px",1],0,[1],null,0,null,null,5],[["DIV",null,"header-search-toggle",[]],["10px","10px",1],3,[1],null,0,null,null,5],[["NAV",0,null,[]],["10px","10px",1],3,[1],null,0,null,null,4],[["DIV",null,null,["nav-previous"]],["10px","10px",1],3,[1],null,0,null,null,9],[["DIV",null,"comments",[]],["10px","10px",1],0,[1],null,0,null,null,7],[["DIV",null,"respond",[]],["10px","10px",1],3,[1],null,0,null,null,8],[["ASIDE",null,"text-5",[]],["10px","10px",1],3,[1],null,0,null,null,6],[["ASIDE",null,"recent-posts-4",[]],["10px","10px",1],3,[1],null,0,null,null,6],[["ASIDE",null,"text-6",[]],["19.9200000762939px","10px",1],3,[1],null,0,null,null,6],[["ASIDE",null,"facebook-likebox-2",[]],["10px","10px",1],3,[1],null,0,null,null,6],[["DIV",null,"secondary",[]],["10px","10px",1],3,[3],null,0,null,null,5],[["ASIDE",null,"categories-2",[]],["19.9200000762939px","10px",1],3,[3],null,0,null,null,7],[["DIV",null,"tertiary",[]],["10px","10px",1],3,[5],null,0,null,null,5],[["BODY",0,null,[]],["10px","10px",1],2,[5],null,0,null,null,2],[["DIV",null,null,["fb-xfbml-parse-ignore"]],["16px","10px",1],0,[1],null,0,null,null,8],[["ASIDE",null,"archives-2",[]],["10px","10px",1],3,[3],null,0,null,null,7],[["ARTICLE",0,null,[],1],["16px","16px",0],0,[0],null,0,null,null,9],[["ARTICLE",0,null,[],2],["16px","18.7199993133545px",0],0,[0],null,0,null,null,9],[["ARTICLE",0,null,[],-1],["10px","16px",0],3,[0],null,0,null,null,9],[["ARTICLE",0,null,[],3],["16px","18.7199993133545px",0],0,[0],null,0,null,null,9],[["ASIDE",null,"text-10",[]],["19.9200000762939px","10px",1],3,[1],null,0,null,null,6]],["9452563211","1929296410","3406029618","4882762811","6359496014"],["ARTICLE",null,null,[]],"20170214_040801"]],"WordPressSinglePost","9210387615",null,0.01,null,[null,1494906078276],0.01,1,null,null,"http://theoryofprogramming.com"];(function(){var h=this,aa=function(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
else if("function"==b&&"undefined"==typeof a.call)return"object";return b},p=function(a){return"number"==typeof a},ba=function(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}},r=function(a,b){function c(){}c.prototype=b.prototype;a.Sa=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Ua=function(a,c,f){for(var d=Array(arguments.length-2),e=2;e<arguments.length;e++)d[e-2]=arguments[e];return b.prototype[c].apply(a,
d)}};var ca=document,da=window;var ea=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},fa=function(a,b){return a<b?-1:a>b?1:0},ga=function(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase()})};var ha=Array.prototype.forEach?function(a,b,c){Array.prototype.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e="string"==typeof a?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)};var t;a:{var ia=h.navigator;if(ia){var ja=ia.userAgent;if(ja){t=ja;break a}}t=""}var v=function(a){return-1!=t.indexOf(a)};var ka=function(a){ka[" "](a);return a};ka[" "]=function(){};var ma=function(a,b){var c=la;Object.prototype.hasOwnProperty.call(c,a)||(c[a]=b(a))};var na=v("Opera"),w=v("Trident")||v("MSIE"),oa=v("Edge"),pa=v("Gecko")&&!(-1!=t.toLowerCase().indexOf("webkit")&&!v("Edge"))&&!(v("Trident")||v("MSIE"))&&!v("Edge"),qa=-1!=t.toLowerCase().indexOf("webkit")&&!v("Edge"),ra=function(){var a=h.document;return a?a.documentMode:void 0},sa;
a:{var ta="",ua=function(){var a=t;if(pa)return/rv\:([^\);]+)(\)|;)/.exec(a);if(oa)return/Edge\/([\d\.]+)/.exec(a);if(w)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(qa)return/WebKit\/(\S+)/.exec(a);if(na)return/(?:Version)[ \/]?(\S+)/.exec(a)}();ua&&(ta=ua?ua[1]:"");if(w){var va=ra();if(null!=va&&va>parseFloat(ta)){sa=String(va);break a}}sa=ta}
var wa=sa,la={},xa=function(a){ma(a,function(){for(var b=0,c=ea(String(wa)).split("."),d=ea(String(a)).split("."),e=Math.max(c.length,d.length),f=0;0==b&&f<e;f++){var g=c[f]||"",k=d[f]||"";do{g=/(\d*)(\D*)(.*)/.exec(g)||["","","",""];k=/(\d*)(\D*)(.*)/.exec(k)||["","","",""];if(0==g[0].length&&0==k[0].length)break;b=fa(0==g[1].length?0:parseInt(g[1],10),0==k[1].length?0:parseInt(k[1],10))||fa(0==g[2].length,0==k[2].length)||fa(g[2],k[2]);g=g[3];k=k[3]}while(0==b)}return 0<=b})},ya;var za=h.document;
ya=za&&w?ra()||("CSS1Compat"==za.compatMode?parseInt(wa,10):5):void 0;var Aa;if(!(Aa=!pa&&!w)){var Ba;if(Ba=w)Ba=9<=Number(ya);Aa=Ba}Aa||pa&&xa("1.9.1");w&&xa("9");var x=function(a,b,c,d){this.top=a;this.right=b;this.bottom=c;this.left=d};x.prototype.floor=function(){this.top=Math.floor(this.top);this.right=Math.floor(this.right);this.bottom=Math.floor(this.bottom);this.left=Math.floor(this.left);return this};var Da=function(){var a=Ca;try{var b;if(b=!!a&&null!=a.location.href)a:{try{ka(a.foo);b=!0;break a}catch(c){}b=!1}return b}catch(c){return!1}},Ea=function(a,b){for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&b.call(void 0,a[c],c,a)};var Fa=function(){var a=!1;try{var b=Object.defineProperty({},"passive",{get:function(){a=!0}});h.addEventListener("test",null,b)}catch(c){}return a}();var Ga=function(a){h.google_image_requests||(h.google_image_requests=[]);var b=h.document.createElement("img");b.src=a;h.google_image_requests.push(b)};var Ha=!!window.google_async_iframe_id,Ca=Ha&&window.parent||window;var Ia=function(a,b,c,d,e){this.ma=c||4E3;this.H=a||"&";this.ya=b||",$";this.T=void 0!==d?d:"trn";this.Ta=e||null;this.xa=!1;this.V={};this.Ka=0;this.L=[]},Ka=function(a,b,c,d,e){var f=[];Ea(a,function(a,k){(a=Ja(a,b,c,d,e))&&f.push(k+"="+a)});return f.join(b)},Ja=function(a,b,c,d,e){if(null==a)return"";b=b||"&";c=c||",$";"string"==typeof c&&(c=c.split(""));if(a instanceof Array){if(d=d||0,d<c.length){for(var f=[],g=0;g<a.length;g++)f.push(Ja(a[g],b,c,d+1,e));return f.join(c[d])}}else if("object"==
typeof a)return e=e||0,2>e?encodeURIComponent(Ka(a,b,c,d,e+1)):"...";return encodeURIComponent(String(a))},Ma=function(a,b,c,d){b=b+"//"+c+d;var e=La(a)-d.length-0;if(0>e)return"";a.L.sort(function(a,b){return a-b});d=null;c="";for(var f=0;f<a.L.length;f++)for(var g=a.L[f],k=a.V[g],m=0;m<k.length;m++){if(!e){d=null==d?g:d;break}var l=Ka(k[m],a.H,a.ya);if(l){l=c+l;if(e>=l.length){e-=l.length;b+=l;c=a.H;break}else a.xa&&(c=e,l[c-1]==a.H&&--c,b+=l.substr(0,c),c=a.H,e=0);d=null==d?g:d}}f="";a.T&&null!=
d&&(f=c+a.T+"="+(a.Ta||d));return b+f+""},La=function(a){if(!a.T)return a.ma;var b=1,c;for(c in a.V)b=c.length>b?c.length:b;return a.ma-a.T.length-b-a.H.length-1};var Pa=function(a,b,c,d){var e=Na;if((c?e.Qa:Math.random())<(d||e.Ba))try{if(b instanceof Ia)var f=b;else f=new Ia,Ea(b,function(a,b){var c=f,d=c.Ka++,e={};e[b]=a;a=[e];c.L.push(d);c.V[d]=a});var g=Ma(f,e.Na,e.Da,e.Ma+a+"&");g&&Ga(g)}catch(k){}};var Qa=function(a,b){this.events=[];this.Z=b||h;var c=null;b&&(b.google_js_reporting_queue=b.google_js_reporting_queue||[],this.events=b.google_js_reporting_queue,c=b.google_measure_js_timing);this.ja=null!=c?c:Math.random()<a;a:{try{var d=(this.Z||h).top.location.hash;if(d){var e=d.match(/\bdeid=([\d,]+)/);var f=e&&e[1]||"";break a}}catch(g){}f=""}a=f;b=this.Z.performance;this.sa=!!(b&&b.mark&&b.clearMarks&&a.indexOf&&0<a.indexOf("1337"))};
Qa.prototype.disable=function(){this.sa&&ha(this.events,this.Aa,this);this.events.length=0;this.ja=!1};Qa.prototype.Aa=function(a){if(a&&this.sa){var b=this.Z.performance;b.clearMarks("goog_"+a.uniqueId+"_start");b.clearMarks("goog_"+a.uniqueId+"_end")}};var Na,y;if(Ha&&!Da()){var Ra="."+ca.domain;try{for(;2<Ra.split(".").length&&!Da();)ca.domain=Ra=Ra.substr(Ra.indexOf(".")+1),Ca=window.parent}catch(a){}Da()||(Ca=window)}y=Ca;var Sa=new Qa(1,y);Na=new function(){this.Na="http:"===da.location.protocol?"http:":"https:";this.Da="pagead2.googlesyndication.com";this.Ma="/pagead/gen_204?id=";this.Ba=.01;this.Qa=Math.random()};
if("complete"==y.document.readyState)y.google_measure_js_timing||Sa.disable();else if(Sa.ja){var Ta=function(){y.google_measure_js_timing||Sa.disable()};y.addEventListener?y.addEventListener("load",Ta,Fa?void 0:!1):y.attachEvent&&y.attachEvent("onload",Ta)};var z=function(){},Ua="function"==typeof Uint8Array,B=function(a,b,c){a.a=null;b||(b=[]);a.Wa=void 0;a.M=-1;a.l=b;a:{if(a.l.length){b=a.l.length-1;var d=a.l[b];if(d&&"object"==typeof d&&"array"!=aa(d)&&!(Ua&&d instanceof Uint8Array)){a.R=b-a.M;a.G=d;break a}}a.R=Number.MAX_VALUE}a.Va={};if(c)for(b=0;b<c.length;b++)d=c[b],d<a.R?(d+=a.M,a.l[d]=a.l[d]||A):a.G[d]=a.G[d]||A},A=[],C=function(a,b){if(b<a.R){b+=a.M;var c=a.l[b];return c===A?a.l[b]=[]:c}c=a.G[b];return c===A?a.G[b]=[]:c},Wa=function(a){a=
C(Va,a);return null==a?a:+a},D=function(a,b,c){b<a.R?a.l[b+a.M]=c:a.G[b]=c},E=function(a,b,c){a.a||(a.a={});if(!a.a[c]){var d=C(a,c);d&&(a.a[c]=new b(d))}return a.a[c]},F=function(a,b,c){a.a||(a.a={});if(!a.a[c]){for(var d=C(a,c),e=[],f=0;f<d.length;f++)e[f]=new b(d[f]);a.a[c]=e}b=a.a[c];b==A&&(b=a.a[c]=[]);return b},Xa=function(a,b,c){a.a||(a.a={});c=c||[];for(var d=[],e=0;e<c.length;e++)d[e]=G(c[e]);a.a[b]=c;D(a,b,d)},Ya=function(a){if(a.a)for(var b in a.a){var c=a.a[b];if("array"==aa(c))for(var d=
0;d<c.length;d++)c[d]&&G(c[d]);else c&&G(c)}},G=function(a){Ya(a);return a.l};z.prototype.toString=function(){Ya(this);return this.l.toString()};var Za=function(a){var b;if("array"==aa(a)){for(var c=Array(a.length),d=0;d<a.length;d++)null!=(b=a[d])&&(c[d]="object"==typeof b?Za(b):b);return c}if(Ua&&a instanceof Uint8Array)return new Uint8Array(a);c={};for(d in a)null!=(b=a[d])&&(c[d]="object"==typeof b?Za(b):b);return c};var H=function(a){this.oa={};this.oa.c=a;this.o=[];this.u=null;this.v=[];this.fa=0};H.prototype.g=function(a){for(var b=0;b<this.o.length;b++)if(this.o[b]==a)return this;this.o.push(a);return this};var $a=function(a,b){a.u=a.u?a.u:b;return a};H.prototype.C=function(a){for(var b=0;b<this.v.length;b++)if(this.v[b]==a)return this;this.v.push(a);return this};
H.prototype.getData=function(a){var b=this.oa,c={};for(d in b)c[d]=b[d];0<this.fa&&(c.t=this.fa);c.err=this.o.join();c.warn=this.v.join();if(this.u){c.excp_n=this.u.name;c.excp_m=this.u.message&&this.u.message.substring(0,512);if(b=this.u.stack){var d=this.u.stack;try{-1==d.indexOf("")&&(d="\n"+d);for(var e;d!=e;)e=d,d=d.replace(/((https?:\/..*\/)[^\/:]*:\d+(?:.|\n)*)\2/,"$1");b=d.replace(/\n */g,"\n")}catch(f){b=""}}c.excp_s=b}c.w=0<a.innerWidth?a.innerWidth:null;c.h=0<a.innerHeight?a.innerHeight:
null;return c};var bb=function(a,b){ab(a,a.Ga,a.X,b)},ab=function(a,b,c,d){var e=d.u;d=d.getData(a.K);a.Ia?(d.type=b,a.K.console.log(d),e&&a.K.console.error(e)):0<c&&(d.r=c,Pa(b,d,"jserror"!=b,c))};var I=function(a){return a.dynamicgoogletags=a.dynamicgoogletags||{}};var J=function(a){B(this,a,cb)};r(J,z);var cb=[4];J.prototype.getId=function(){return C(this,3)};var K=function(a){B(this,a,null)};r(K,z);var db=function(a){B(this,a,null)};r(db,z);var L=function(a){return E(a,J,1)},M=function(a){B(this,a,eb)};r(M,z);var eb=[1];M.prototype.i=function(){return F(this,db,1)};M.prototype.qa=function(a){Xa(this,1,a)};var N=function(a){B(this,a,fb)};r(N,z);var fb=[2],gb=function(a){B(this,a,null)};r(gb,z);N.prototype.la=function(){return C(this,3)};N.prototype.ra=function(a){D(this,3,a)};var O=function(a){B(this,a,hb)};r(O,z);var hb=[1,2,3];O.prototype.i=function(){return F(this,db,2)};
O.prototype.qa=function(a){Xa(this,2,a)};var P=function(a){B(this,a,ib)};r(P,z);var ib=[3],jb=function(a){B(this,a,null)};r(jb,z);P.prototype.A=function(){return C(this,1)};P.prototype.D=function(){return E(this,M,2)};P.prototype.O=function(){return C(this,4)};P.prototype.la=function(){return C(this,5)};P.prototype.ra=function(a){D(this,5,a)};P.prototype.N=function(){return E(this,jb,9)};var kb=function(a){this.m=a;this.ua=[]};kb.prototype.f=function(){return 0<F(this.m,O,3).length?F(this.m,O,3)[0]:null};var lb=function(a){var b=["adsbygoogle-placeholder"];a=a.className?a.className.split(/\s+/):[];for(var c={},d=0;d<a.length;++d)c[a[d]]=!0;for(d=0;d<b.length;++d)if(!c[b[d]])return!1;return!0};var mb=function(a,b){for(var c=0;c<b.length;c++){var d=b[c],e=ga(d.Xa);a[e]=d.value}},pb=function(a,b){var c=nb;b.setAttribute("data-adsbygoogle-status","reserved");b={element:b};(c=c&&c.Oa)&&(b.params=c);ob(a).push(b)},ob=function(a){return a.adsbygoogle=a.adsbygoogle||[]};var qb=function(a,b){if(!a)return!1;a=b.getComputedStyle?b.getComputedStyle(a,null):a.currentStyle;if(!a)return!1;a=a.cssFloat||a.styleFloat;return"left"==a||"right"==a},rb=function(a){for(a=a.previousSibling;a&&1!=a.nodeType;)a=a.previousSibling;return a?a:null},sb=function(a){return!!a.nextSibling||!!a.parentNode&&sb(a.parentNode)};var tb=function(a,b){var c=a.length;if(null!=c)for(var d=0;d<c;d++)b.call(void 0,a[d],d)};var ub=function(a,b,c,d){this.na=a;this.aa=b;this.ba=c;this.P=d};ub.prototype.query=function(a){var b=[];try{b=a.querySelectorAll(this.na)}catch(f){}if(!b.length)return[];a=b;b=a.length;if(0<b){for(var c=Array(b),d=0;d<b;d++)c[d]=a[d];a=c}else a=[];a=vb(this,a);p(this.aa)&&(b=this.aa,0>b&&(b+=a.length),a=0<=b&&b<a.length?[a[b]]:[]);if(p(this.ba)){b=[];for(c=0;c<a.length;c++){var d=wb(a[c]),e=this.ba;0>e&&(e+=d.length);0<=e&&e<d.length&&b.push(d[e])}a=b}return a};
ub.prototype.toString=function(){return JSON.stringify({nativeQuery:this.na,occurrenceIndex:this.aa,paragraphIndex:this.ba,ignoreMode:this.P})};
var vb=function(a,b){if(null==a.P)return b;switch(a.P){case 1:return b.slice(1);case 2:return b.slice(0,b.length-1);case 3:return b.slice(1,b.length-1);case 0:return b;default:throw Error("Unknown ignore mode: "+a.P);}},wb=function(a){var b=[];tb(a.getElementsByTagName("p"),function(a){100<=xb(a)&&b.push(a)});return b},xb=function(a){if(3==a.nodeType)return a.length;if(1!=a.nodeType||"SCRIPT"==a.tagName)return 0;var b=0;tb(a.childNodes,function(a){b+=xb(a)});return b},yb=function(a){return 0==a.length||
isNaN(a[0])?a:"\\"+(30+parseInt(a[0],10))+" "+a.substring(1)};var zb=function(a,b){var c=0,d=C(a,6);if(void 0!==d)switch(d){case 0:c=1;break;case 1:c=2;break;case 2:c=3}var d=null,e=C(a,7);if(C(a,1)||a.getId()||0<C(a,4).length){var f=a.getId(),g=C(a,1),e=C(a,4),d=C(a,2);a=C(a,5);var k="";g&&(k+=g);f&&(k+="#"+yb(f));if(e)for(f=0;f<e.length;f++)k+="."+yb(e[f]);d=(e=k)?new ub(e,d,a,c):null}else e&&(d=new ub(e,C(a,2),C(a,5),c));return d?d.query(b):[]},Ab=function(a,b){if(a==b)return!0;if(!a||!b||C(a,1)!=C(b,1)||C(a,2)!=C(b,2)||a.getId()!=b.getId()||C(a,7)!=C(b,
7)||C(a,5)!=C(b,5)||C(a,6)!=C(b,6))return!1;a=C(a,4);b=C(b,4);if(a||b)if(a&&b&&a.length==b.length)for(var c=0;c<a.length;c++){if(a[c]!=b[c])return!1}else return!1;return!0};var Bb=function(a){a=a.document;return("CSS1Compat"==a.compatMode?a.documentElement:a.body)||{}},Cb=function(a){return void 0===a.pageYOffset?(a.document.documentElement||a.document.body.parentNode||a.document.body).scrollTop:a.pageYOffset};var Db=function(a,b){b=L(b);if(!b)return null;a=zb(b,a);return 0<a.length?a[0]:null},Fb=function(a,b){b=Eb(a,b,!0);return p(b)&&!(b<=Bb(a).clientHeight)},Gb=function(a,b){return a.body?b-a.body.getBoundingClientRect().top:b},Eb=function(a,b,c){if(!c||!p(C(b,8))){var d=Db(a.document,b);if(d){var e=null!=E(b,K,2)?C(E(b,K,2),3):void 0;c=a.document.createElement("div");c.className="googlepublisherpluginad";var f=c.style;f.textAlign="center";f.width="100%";f.height="0px";f.clear=e?"both":"none";Hb(c,d,
C(b,3));d=c.getBoundingClientRect().top+Cb(a);c.parentNode.removeChild(c);D(b,8,d)}}b=C(b,8);return p(b)?b-Cb(a):null},Ib={0:0,1:1,2:2,3:3},Jb={0:"auto",1:"horizontal",2:"vertical",3:"rectangle"},Kb=function(a,b){a.sort(function(a,d){a=Eb(b,a,!0);a=p(a)?a:Number.POSITIVE_INFINITY;d=Eb(b,d,!0);d=p(d)?d:Number.POSITIVE_INFINITY;return a-d})},Hb=function(a,b,c){switch(Ib[c]){case 0:b.parentNode&&b.parentNode.insertBefore(a,b);break;case 3:if(c=b.parentNode){var d=b.nextSibling;if(d&&d.parentNode!=c)for(;d&&
8==d.nodeType;)d=d.nextSibling;c.insertBefore(a,d)}break;case 1:b.insertBefore(a,b.firstChild);break;case 2:b.appendChild(a)}if(1!=b.nodeType?0:"INS"==b.tagName&&lb(b))b.style.display="block"};var nb=new function(){this.ia="googlepublisherpluginad";this.Oa={google_tag_origin:"pso"}},Q=function(a){this.b=a;this.j=[];this.ea=0;this.o=[];this.v=[];this.Y=null;this.pa=!1},Lb=function(a,b){a=E(a.f(),J,4);if(!(a&&b&&C(b,1)==C(a,1)&&b.getId()==a.getId()&&p(C(b,2))&&p(C(b,5))))return!1;a=C(a,4);b=C(b,4);if(a.length!=b.length)return!1;for(var c=0;c<a.length;++c)if(b[c]!=a[c])return!1;return!0},Mb=function(a){var b=p(void 0)?void 0:20;var c=a.f();var d=c.i(),e=E(c,J,4);if(!(a.pa||0>=b)&&e&&0!=zb(e,
a.b.document).length){a.pa=!0;for(var f=[],g=0;g<d.length;++g){var k=d[g];var m=L(k);Lb(a,m)&&(c=C(m,2),m=C(m,5),null!=c&&null!=m&&0<=c&&0<=m&&(!f[c]||C(L(f[c]),5)<m)&&(f[c]=k))}m=0;d=zb(e,a.b.document);for(c=0;c<f.length&&m<b;++c){var e=m,g=a,l=d[c],k=f[c];m=b-m;var u=g.f().i(),q=0;if(l&&k){l=wb(l).length;switch(C(L(k),6)){case 0:case 1:--l;break;case 2:l-=2}for(var n=C(L(k),5)+1;n<l&&q<m;++n){var Oa=new k.constructor(Za(G(k))),Hc=L(Oa);D(Hc,5,n);u.push(Oa);q++}}q&&g.f().qa(u);m=e+q}}};
Q.prototype.g=function(a){for(var b=0;b<this.o.length;++b)if(this.o[b]==a)return;this.o.push(a)};Q.prototype.C=function(a){for(var b=0;b<this.v.length;++b)if(this.v[b]==a)return;this.v.push(a)};
var Nb=function(a,b,c){var d=Ib[C(b,3)],e=Db(a.b.document,b);if(e){a:{var f=a.b;switch(d){case 0:f=qb(rb(e),f);break a;case 3:f=qb(e,f);break a;case 2:var g=e.lastChild;f=qb(g?1==g.nodeType?g:rb(g):null,f);break a}f=!1}if(!f&&(c||2!=d||sb(e))&&(c=1==d||2==d?e:e.parentNode,!c||(1!=c.nodeType?0:"INS"==c.tagName&&lb(c))||!(0>=c.offsetWidth)))a:if(C(b,7))a.C(8);else{b:if(C(b,5))c=C(b,5);else{if(c=R(a).f())if(c=C(c,3),a.ea<c.length){c=c[a.ea++];break b}a.g(4);c=null}if(null!=c){D(b,7,!0);d=[];(f=a.O())&&
d.push(f);f=R(a).ua;for(g=0;g<f.length;++g)d.push(f[g]);p(C(b,9))&&d.push("pso-lv-"+C(b,9));var k=a.b.document;f=a.A();var g=C(b,6),g=null!=g?Jb[g]:g,m=E(b,K,2),l={};m&&(l.ta=C(m,1),l.ha=C(m,2),l.za=!!C(m,3));var m=c,u=nb,q=k.createElement("div"),n=q.style;n.textAlign="center";n.width="100%";n.height="auto";n.clear=l.za?"both":"none";l.La&&mb(n,l.La);k=k.createElement("ins");n=k.style;n.display="block";n.margin="auto";n.backgroundColor="transparent";l.ta&&(n.marginTop=l.ta);l.ha&&(n.marginBottom=
l.ha);l.va&&mb(n,l.va);q.appendChild(k);k.setAttribute("data-ad-format",g?g:"auto");if(g=u&&u.ia)q.className=g;k.className="adsbygoogle";k.setAttribute("data-ad-client",f);m&&k.setAttribute("data-ad-slot",m);d.length&&k.setAttribute("data-ad-channel",d.join("+"));Hb(q,e,C(b,3));try{pb(a.b,k)}catch(Oa){C(b,5)!=c&&a.ea--;D(b,7,!1);a.C(6);q&&q.parentNode&&q.parentNode.removeChild(q);break a}a.j.push(q)}}}},Ob=function(a,b){for(var c=Number.POSITIVE_INFINITY,d=0;d<a.j.length;++d)var e=a.j[d].getBoundingClientRect().top,
f=a.j[d].getBoundingClientRect().bottom,c=Math.min(c,b<e?e-b:f<b?b-f:0);return c},R=function(a){a=I(a.b).ps||null;if(!a)throw Error("No placementState");return a},Pb=function(a,b){var c=R(a).m;if(!c||!c.A())return a.g(5),!1;c=F(c,O,3)[0];return c?C(c,3).length<b?(a.g(4),a.g(5),!1):!0:(a.g(5),!1)};Q.prototype.A=function(){return R(this).m.A()||""};Q.prototype.O=function(){return R(this).m.O()||void 0};Q.prototype.D=function(){return R(this).m.D()||new M};
Q.prototype.f=function(){var a=R(this).f();if(!a)throw Error("No mConfig");return a};var Qb=function(a){a=C(a.f(),6);return null!=a&&0<a};var Rb=function(){this.I=this.J=this.ca=null};var S=function(a){Q.call(this,a)};r(S,Q);S.prototype.apply=function(a){var b;(b=R(this).m)&&b.A()&&b.D()?b=!0:(this.g(5),b=!1);if(b){b=this.D().i();for(var c=0;c<b.length;c++){var d=b[c];C(d,7)||Nb(this,d,a)}}};S.prototype.B=function(){return(0==this.D().i().length||0<this.j.length)&&0==this.o.length};var Sb=function(a){Q.call(this,a);if(Pb(this,0)){a=this.D().i();for(var b=this.f().i(),c=0;c<a.length;c++){var d=a[c];a:{var e=d;var f=b;if(e&&L(e))for(var g=0;g<f.length;g++){var k=f[g];if(C(e,3)==C(k,3)&&Ab(L(e),L(k))){e=k;break a}}e=null}e&&E(e,K,2)&&(e=E(e,K,2),d.a||(d.a={}),f=e?G(e):e,d.a[2]=e,D(d,2,f))}}};r(Sb,S);var Ub=function(a,b){var c=void 0===b.pageXOffset?(b.document.documentElement||b.document.body.parentNode||b.document.body).scrollLeft:b.pageXOffset,d=Cb(b);if(a.getBoundingClientRect)return a=a.getBoundingClientRect(),Tb(a)?new x(a.top+d,a.right+c,a.bottom+d,a.left+c):new x(0,0,0,0);b=b.document.createRange();b.selectNodeContents(a);return b.collapsed?new x(0,0,0,0):b.getBoundingClientRect?(a=b.getBoundingClientRect(),Tb(a)?new x(a.top+d,a.right+c,a.bottom+d,a.left+c):new x(0,0,0,0)):new x(0,0,0,
0)},Tb=function(a){return!!a&&p(a.top)&&!isNaN(a.top)&&p(a.right)&&!isNaN(a.right)&&p(a.bottom)&&!isNaN(a.bottom)&&p(a.left)&&!isNaN(a.left)};var Zb=function(a){this.K=a;this.Ha=Vb(a);this.wa=T("ins.adsbygoogle",a);this.ga=Wb(a);this.Pa=T("[__lsu_res=reserved]",a);this.U=[];a=Xb(this);for(var b=0;b<a.length;b++)this.U.push(new Yb(a[b]))},Vb=function(a){var b=a.googletag;if(!b||"function"!=typeof b.pubads)return T("div[id^=div-gpt-ad]",a);var c=[];try{for(var d=b.pubads().getSlots(),b=0;b<d.length;b++){var e=d[b].getSlotElementId(),f=a.document.getElementById(e);null!=f&&c.push(f)}}catch(g){Pa("ladd_evt",{ok:0,err:g.toString()},!0,.1)}return c},
Wb=function(a){return T("iframe[id^=aswift_],iframe[id^=google_ads_frame]",a)},T=function(a,b){return Array.prototype.slice.call(b.document.querySelectorAll(a))},Xb=function(a){return[].concat(a.Ha,a.wa,a.ga,a.Pa)},Yb=function(a){this.Ea=a;this.W=null};var U=function(a){Q.call(this,a)};r(U,Q);U.prototype.apply=function(){};U.prototype.B=function(){if(Qb(this)){var a=this.b;var b=Vb(a);a=0<[].concat(b,T("ins.adsbygoogle",a),Wb(a),T("[__lsu_res=reserved]",a)).length}else a=!0;return a};var $b=function(a){Q.call(this,a);this.F=null};r($b,Q);
$b.prototype.apply=function(a){if(a&&Pb(this,2)){Mb(this);a=Bb(this.b).clientHeight||640;null==this.F&&(this.F=new Zb(this.b));var b=this.F.ga.length;if(!(5<=b)){var b=Math.min(2,5-b),c=this.f().i();Kb(c,this.b);for(var d=0;d<c.length&&this.j.length<b;++d){var e=c[d];if(Fb(this.b,e)){var f=Eb(this.b,e,!0);if(void 0!==f){a:{var g=this.F;for(var k=a,m=f,l=0;l<g.U.length;l++){var u=m,q=k;var n=g.U[l];n.W||(n.W=Ub(n.Ea,g.K));n=n.W;if(n.top-q<u&&u<n.bottom+q){g=!0;break a}}g=!1}g||Ob(this,f)<a||Nb(this,
e,!0)}}}0==this.j.length&&this.C(1)}}};$b.prototype.B=function(){return Qb(this)?0<Xb(this.F).length:!0};var ac=function(a){Q.call(this,a);this.$=!1};r(ac,U);
ac.prototype.apply=function(a){if(a&&!this.$){a:{var b=this.b.document;var c=b.body;if(a&&c){a=this.A();var d=nb,e=b.createElement("div");e.style.display="block";if(d=d&&d.ia)e.className=d;b=b.createElement("ins");b.className="adsbygoogle";b.setAttribute("data-ad-client",a);b.setAttribute("data-reactive-ad-format","1");b.style.display="none";e.appendChild(b);Hb(e,c,2);try{pb(this.b,b)}catch(f){this.C(6);e&&e.parentNode&&e.parentNode.removeChild(e);c=5;break a}this.j.push(e);c=0}else c=4}this.$=0==
c}};ac.prototype.B=function(){return this.$&&U.prototype.B.call(this)};var bc=function(a){Q.call(this,a);a=Bb(a).clientHeight;this.Ca=.1*a;this.Ja=.75*a};r(bc,Q);
bc.prototype.apply=function(a){if(Pb(this,3)&&!this.B()){Mb(this);var b=this.f().i();Kb(b,this.b);var c=this.Ca;var d=document;d=d.querySelectorAll?d.querySelectorAll("header,#header,#masthead,.header,.site-header"):[];for(var e=d.length,f=0<e?d[0]:null,g=1;g<e;g++)d[g].getBoundingClientRect().top<f.getBoundingClientRect().top&&(f=d[g]);(d=f)&&(d=d.getBoundingClientRect())&&d.top!=d.bottom&&d.left!=d.right&&(c=Math.min(c,Gb(document,d.bottom)));for(d=0;d<b.length&&3>this.j.length;d++){e=b[d];var f=
c,g=this.b.document,k=Eb(this.b,e,!1);!p(k)||Gb(g,k)<f?f=!1:(f=Ob(this,k),f=this.Ja<f);f&&(f=Fb(this.b,e),g=C(e,6)||0,f&&0==g&&D(e,6,3),!f&&a||Nb(this,e,a))}}};bc.prototype.B=function(){return 3==this.j.length};var V={};V[16]=S;V[17]=S;V[19]=U;V[29]=$b;V[33]=U;V[30]=ac;V[28]=bc;V[34]=bc;V[32]=Sb;V[1]=S;V[8]=U;V[11]=S;var cc=[19,29,33,30,16,32,17,34],dc=[16,19,33,30,17,1,6,8,11];var ec=function(a,b){a=a.google_ad_modifications=a.google_ad_modifications||{};(a.ad_channels=a.ad_channels||[]).push(b)};var fc=function(a){return 0>a||99<a?null:10>a?"0"+a:""+a};var gc=function(a,b){a=a.google_ad_modifications=a.google_ad_modifications||{};a=a.loeids=a.loeids||[];for(var c=0;c<b.length;c++)a.push(b[c])};var hc=function(a,b,c){this.ka=a;this.Fa=c?c:new jb};hc.prototype.N=function(){return this.Fa||new jb};var ic=function(a){if(!p(a))return!1;for(var b=0;b<cc.length;++b)if(a==cc[b])return!1;return!0},nc=function(){var a=W,b=jc,c=kc,d=b.f();if(!d)return lc(16);var e=null,f;a:{var g=F(d,N,1);for(f=0;f<g.length;++f){for(var k=!0,m=0;m<dc.length;++m)C(g[f],4)==dc[m]&&(k=!1);if(k){g=[];0==d.i().length&&g.push("PsoInvalidVariant");0==C(d,3).length&&g.push("PsoNoAdSlotCodes");f=g;break a}}f=[]}g=c.ka;if(0==f.length)a:{e=F(d,N,1);if(p(g))for(f=0;f<e.length;f++)if(k=e[f],V[C(k,4)])for(var m=F(k,gb,2),l=0;l<
m.length;l++){var u=m[l],q=C(u,1),u=C(u,2);if(p(q)&&p(u)&&g>=q&&g<=u){e=k;break a}}e=null}else for(k=0;k<f.length;++k)b.ua.push(f[k]);if(!e){f=F(d,N,1);e={};for(k=0;k<f.length;k++)e[C(f[k],4)]=!0;f=null;e[19]||e[8]?f=19:e[16]||e[1]?f=16:0<d.i().length&&0<C(d,3).length&&e[34]&&(f=34);null!=f?(e=new N,D(e,6,3),D(e,4,f),16!=f&&19!=f&&e.ra("pso-ama-fallback")):e=null}(f=!e)||(!p(g)||800>g?f=!1:820>g?(gc(a,["26835111"]),f=!0):(840>g&&gc(a,["26835112"]),f=!1));if(f)return lc(16);(g=e.la())&&ec(a,g);g=!0;
C(c.N(),2)&&(Date.now?Date.now():+new Date)<C(c.N(),2)||(ec(a,"pso-ama-exd"),g=!1);C(b.m,11)&&(ec(a,"pso-ama-stl-tmp"),g=!1);g&&ec(a,"pso-ama-elig");2==C(e,6)&&(b=C(e,1),null!=b&&gc(a,[""+b]));if(g&&(2==C(e,6)||1==C(e,6))){d=F(d,N,1);if(null===c.ka)c=[];else{b={};c=[];for(g=0;g<d.length;g++)f=mc(d[g]),null==f||b[f]||(b[f]=!0,c.push(f));b=mc(e);if(null!=b){d=[];b=fc(b);g=!1;if(b)for(f=0;f<c.length;f++)k=fc(c[f]),b==k&&(g=!0),k&&d.push("950"+b+k);g||(d=[]);c=d}else c=[]}gc(a,c)}a=new Rb;a.ca=C(e,5);
a.J=C(e,4);return a},lc=function(a){var b=new Rb;b.J=a;return b},oc=function(a){a=a.google_ad_modifications=a.google_ad_modifications||{};a.remove_ads_by_default=!0;a.ad_whitelist=[{ad_tag_origin:"pso"}];a.ad_blacklist=[];a.space_collapsing="slot"},mc=function(a){switch(C(a,6)){case 1:var b=C(a,4);break;case 2:b=C(a,7)}return null!=b?b:null};var pc=function(a){this.document=a};var X=function(a){H.call(this,a)};r(X,H);X.prototype.getData=function(a){var b=X.Sa.getData.call(this,a);a:{var c=(new pc(a.document)).document.getElementsByTagName("script");for(var d=0;d<c.length;++d)if(c[d].hasAttribute("data-pso-version")){c=c[d].getAttribute("data-pso-version");break a}c=null}b.sv=c;if(d=I(a).ps||null){c=d.m;var d=d.f(),e=b.wpc;b.wpc=null!=e?e:c.A();b.su=C(c,14);b.tn=c.O();b.ev=d&&C(d,5)}if(a=I(a).ss||null)b.s=a.J,b.st=a.ca;return b};var qc=null,rc=!1,uc=function(a){var b=sc,c=tc;b.addEventListener?(a&&b.addEventListener("DOMContentLoaded",a,!1),c&&b.addEventListener("load",c,!1)):b.attachEvent&&c&&b.attachEvent("onload",c)},wc=function(a){p(qc)&&a.clearInterval&&(a.clearInterval(qc),qc=null);rc||vc(a,!1);vc(a,!0)},xc=function(a,b){try{wc(b);var c=I(b).ss||null;if(c&&c.I){var d=c.I,e=d.B(),f=d.o,g=d.v,k=d.Y,m=d.j.length;e||0!=m||f.push(6);for(var l=new X(m),c=0;c<g.length;c++)l.C(g[c]);if(e&&0==f.length&&null===k)ab(a,a.Ra,a.da,
l);else{for(e=0;e<f.length;e++)l.g(f[e]);bb(a,$a(l,k))}}else bb(a,(new X(0)).g(2))}catch(u){bb(a,$a((new X(0)).g(1),u))}I(b).loaded=!0},vc=function(a,b){b||(rc=!0);if((a=I(a).ss||null)&&a.I){a=a.I;try{a.apply(b)}catch(c){a.g(1),null===a.Y&&(a.Y=c)}}},yc=function(){vc(window,!1)};var Y=new function(a){this.Ra="pso_success";this.Ga="pso_failure";this.X=this.da=.01;this.Ia=!1;this.K=a}(window);
try{var W=window,Va,zc=I(W).config;Va=zc?new P(zc):null;if(!Va)throw Error("No config");var Ac=Wa(10),Bc=Wa(7);Y.da=null!=Ac?Ac:Y.da;Y.X=null!=Bc?Bc:Y.X;var jc=new kb(Va),Cc=jc;I(W).ps=Cc;var Z,kc;if(v("iPad")||v("Android")&&!v("Mobile")||v("Silk")||!(v("iPod")||v("iPhone")||v("Android")||v("IEMobile")))Z=lc(16);else{var Dc,Ec=/^#([^=]*)=(\d+)$/.exec(W.location.hash);if((Dc=Ec&&3==Ec.length&&"pso_strategy"==Ec[1]?+Ec[2]:null)&&V[Dc]){Z=lc(Dc);var Fc=W;ic(Dc)&&oc(Fc)}else{var Gc=W,Ic=jc.m.N(),Jc;try{var Kc=
parseInt(Gc.localStorage.getItem("PSO_EXP0"),10);Jc=isNaN(Kc)?null:Kc}catch(a){Jc=null}if(null==Jc){var Lc=Jc=Math.floor(1024*Math.random());try{Gc.localStorage.setItem("PSO_EXP0",Lc.toString())}catch(a){}}kc=new hc(Jc,0,Ic);Z=nc()}if(1==Z.ca){var Mc=W;ic(Z.J)&&oc(Mc)}}if(!Z)throw Error("No strategyState created!");var Nc=Z;I(W).ss=Nc;var Oc=W,Pc=Z,Qc=Pc.J;if(p(Qc)){var Rc=V[Qc];Qc&&Rc&&(Pc.I=new Rc(Oc))}var sc=W,tc=ba(xc,Y,sc),Sc=ba(wc,sc);switch(sc.document.readyState){case "complete":tc();break;
case "interactive":Sc();uc();break;default:var Tc=sc,Uc=ob(Tc);Uc.loaded||(Uc.onload=yc);qc=Tc.setInterval(yc,10);uc(Sc)}}catch(a){bb(Y,$a(new X(0),a))};})();
</script>
 </head> 
 <body class="post-template-default single single-post postid-289 single-format-standard group-blog"> 
  <div id="page" class="hfeed site"> 
   <header id="masthead" class="site-header" role="banner"> 
    <div class="site-header-image"> 
     <div class="site-branding-wrapper"> 
      <div class="site-branding"> 
       <h1 class="site-title"><a href="http://theoryofprogramming.com/" rel="home">Theory of Programming</a></h1> 
       <h2 class="site-description">Programming Simplified</h2> 
      </div> 
     </div> 
    </div> 
   </header>
   <!-- #masthead --> 
   <nav id="site-navigation" class="main-navigation clear" role="navigation"> 
    <h1 class="menu-toggle" title="Menu"><span class="screen-reader-text">Menu</span></h1> 
    <a class="skip-link screen-reader-text" href="#content">Skip to content</a> 
    <div class="menu-navigate-container">
     <ul id="menu-navigate" class="menu">
      <li id="menu-item-1533" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-1533"><a href="http://theoryofprogramming.com/">Home</a></li> 
      <li id="menu-item-673" class="menu-item menu-item-type-custom menu-item-object-custom current-menu-ancestor menu-item-has-children menu-item-673"><a>Data Structures and Algorithms</a> 
       <ul class="sub-menu"> 
        <li id="menu-item-2648" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-2648"><a href="http://theoryofprogramming.com/category/graph-theory/">Graph Theory</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-1536" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1536"><a>Graph Theory Basics</a> 
           <ul class="sub-menu"> 
            <li id="menu-item-1566" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1566"><a href="http://theoryofprogramming.com/2014/12/24/graph-theory-basics/">Theory and Implementation in C</a></li> 
            <li id="menu-item-1535" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1535"><a href="http://theoryofprogramming.com/adjacency-list-using-cpp-stl/">Adjacency List Implementation in C++ STL</a></li> 
            <li id="menu-item-1542" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1542"><a href="http://theoryofprogramming.com/adjacency-list-in-java/">Adjacency List in Java</a></li> 
            <li id="menu-item-1544" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1544"><a href="http://theoryofprogramming.com/adjacency-list-implementation-in-c-sharp/">Adjacency List in C#</a></li> 
           </ul> </li> 
          <li id="menu-item-1546" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1546"><a>Breadth First Search (BFS) Algorithm</a> 
           <ul class="sub-menu"> 
            <li id="menu-item-1565" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1565"><a href="http://theoryofprogramming.com/2014/12/25/breadth-first-search-algorithm/">Theory and Implementation in C</a></li> 
            <li id="menu-item-1545" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1545"><a href="http://theoryofprogramming.com/breadth-first-search-algorithm-using-cpp-stl/">BFS Algorithm using C++ STL</a></li> 
            <li id="menu-item-1547" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1547"><a href="http://theoryofprogramming.com/breadth-first-search-algorithm-using-queue/">Algorithm using Queue</a></li> 
           </ul> </li> 
          <li id="menu-item-1563" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1563"><a href="http://theoryofprogramming.com/2014/12/25/snakes-and-ladders-game-code/">Snakes and Ladders Game Code</a></li> 
          <li id="menu-item-1564" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1564"><a href="http://theoryofprogramming.com/2014/12/26/depth-first-search-algorithm/">Depth First Search Algorithm</a></li> 
          <li id="menu-item-1541" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1541"><a>Bellman Ford Algorithm</a> 
           <ul class="sub-menu"> 
            <li id="menu-item-1559" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1559"><a href="http://theoryofprogramming.com/2015/01/19/bellman-ford-algorithm/">Theory and Implementation in basic C++</a></li> 
            <li id="menu-item-1540" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1540"><a href="http://theoryofprogramming.com/bellman-ford-algorithm-using-cpp-stl/">Algorithm Implementation in C++ STL</a></li> 
           </ul> </li> 
          <li id="menu-item-1537" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1537"><a>Prims Algorithm</a> 
           <ul class="sub-menu"> 
            <li id="menu-item-1555" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1555"><a href="http://theoryofprogramming.com/2015/03/27/prims-algorithm/">Theory and Implementation in basic C++</a></li> 
            <li id="menu-item-1534" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1534"><a href="http://theoryofprogramming.com/prims-algorithm-using-cpp-stl/">Algorithm Implementation in C++ STL</a></li> 
           </ul> </li> 
          <li id="menu-item-1561" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1561"><a href="http://theoryofprogramming.com/2015/01/11/dijkstras-algorithm/">Dijkstras Algorithm</a></li> 
         </ul> </li> 
        <li id="menu-item-2647" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-2647"><a href="http://theoryofprogramming.com/category/tree-data-structures/">Tree Data Structures</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-1567" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1567"><a href="http://theoryofprogramming.com/2014/12/24/binary-indexed-tree-or-fenwick-tree/">Binary Indexed Tree (or) Fenwick Tree</a></li> 
          <li id="menu-item-1732" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1732"><a>Trie Tree</a> 
           <ul class="sub-menu"> 
            <li id="menu-item-1560" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1560"><a href="http://theoryofprogramming.com/2015/01/16/trie-tree-implementation/">Trie Tree Implementation and Theory</a></li> 
            <li id="menu-item-1731" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1731"><a href="http://theoryofprogramming.com/trie-tree-using-cpp-class/">Trie Tree using C++ Class</a></li> 
            <li id="menu-item-1892" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1892"><a href="http://theoryofprogramming.com/2015/08/24/trie-tree-practise-spoj-phonelst/">Trie Tree Practise  SPOJ  PHONELST</a></li> 
            <li id="menu-item-1930" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1930"><a href="http://theoryofprogramming.com/2015/09/01/trie-tree-practise-spoj-dict/">Trie Tree Practise  SPOJ  DICT</a></li> 
           </ul> </li> 
          <li id="menu-item-3113" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-3113"><a href="http://theoryofprogramming.com/2016/11/15/compressed-trie-tree/">Compressed Trie Tree</a></li> 
          <li id="menu-item-1551" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1551"><a href="http://theoryofprogramming.com/2015/01/27/segment-trees/">Segment Trees</a></li> 
          <li id="menu-item-1562" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1562"><a href="http://theoryofprogramming.com/2014/12/28/binary-heaps/">Binary Heaps</a></li> 
          <li id="menu-item-1553" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1553"><a href="http://theoryofprogramming.com/2015/02/01/binary-heaps-and-heapsort-algorithm/">Binary Heaps and Heapsort Algorithm</a></li> 
         </ul> </li> 
        <li id="menu-item-2649" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-2649"><a href="http://theoryofprogramming.com/category/dynamic-programming/">Dynamic Programming</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-1554" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1554"><a href="http://theoryofprogramming.com/2015/03/02/dynamic-programming-introduction-and-fibonacci-numbers/">Introduction and Fibonacci Numbers</a></li> 
          <li id="menu-item-2535" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-2535"><a href="http://theoryofprogramming.com/2016/10/21/dynamic-programming-kadanes-algorithm/">Kadanes Algorithm</a></li> 
          <li id="menu-item-2836" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-2836"><a href="http://theoryofprogramming.com/2016/11/06/dynamic-programming-edit-distance/">Edit Distance</a></li> 
         </ul> </li> 
        <li id="menu-item-2645" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-2645"><a href="http://theoryofprogramming.com/category/searching-algorithms/">Searching Algorithms</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-2644" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-2644"><a href="http://theoryofprogramming.com/2016/11/04/binary-search-algorithm/">Binary Search Algorithm</a></li> 
          <li id="menu-item-2934" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-2934"><a href="http://theoryofprogramming.com/2016/11/10/jump-search-algorithm/">Jump Search Algorithm</a></li> 
         </ul> </li> 
        <li id="menu-item-676" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-ancestor current-menu-parent current-post-parent menu-item-has-children menu-item-676"><a href="http://theoryofprogramming.com/category/sorting-algorithms/">Sorting Algorithms</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-1550" class="menu-item menu-item-type-post_type menu-item-object-post current-menu-item menu-item-1550"><a href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/">Quick Sort Algorithm</a></li> 
          <li id="menu-item-1552" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1552"><a href="http://theoryofprogramming.com/2015/01/29/merge-sort-algorithm/">Merge Sort Algorithm</a></li> 
         </ul> </li> 
        <li id="menu-item-2650" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-2650"><a href="http://theoryofprogramming.com/category/math/">Math</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-1568" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1568"><a href="http://theoryofprogramming.com/2014/12/24/modular-arithmetic-properties/">Modular Arithmetic Properties</a></li> 
         </ul> </li> 
       </ul> </li> 
      <li id="menu-item-2646" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-2646"><a href="http://theoryofprogramming.com/category/java/">Java</a> 
       <ul class="sub-menu"> 
        <li id="menu-item-1100" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1100"><a>Language Basics</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-1556" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1556"><a href="http://theoryofprogramming.com/2015/05/26/java-tutorials-introduction/">An Introduction</a></li> 
          <li id="menu-item-1557" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1557"><a href="http://theoryofprogramming.com/2015/05/27/java-tutorials-data-types-input-operators-in-java/">Data Types, Input and Operators</a></li> 
          <li id="menu-item-1558" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1558"><a href="http://theoryofprogramming.com/2015/05/30/java-tutorials-if-else-switch-loops-in-java/">If Else, Switch and Loops</a></li> 
          <li id="menu-item-1531" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1531"><a href="http://theoryofprogramming.com/2015/06/05/java-tutorials-strings-string-buffer-builder-in-java/">Strings, StringBuffer and StringBuilder</a></li> 
          <li id="menu-item-1538" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1538"><a href="http://theoryofprogramming.com/2015/06/14/java-tutorials-arrays-in-java/">Arrays in Java</a></li> 
          <li id="menu-item-1543" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1543"><a href="http://theoryofprogramming.com/2015/06/21/java-tutorials-enum-and-methods-in-java/">Enum and Methods in Java</a></li> 
         </ul> </li> 
        <li id="menu-item-1855" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-1855"><a>Introduction to OOP</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-1854" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-1854"><a href="http://theoryofprogramming.com/2015/08/14/classes-and-objects/">Java Tutorials  Classes and Objects</a></li> 
          <li id="menu-item-2271" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-2271"><a href="http://theoryofprogramming.com/2016/02/19/encapsulation-in-java/">Encapsulation in Java</a></li> 
          <li id="menu-item-2290" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-2290"><a href="http://theoryofprogramming.com/2016/03/03/constructor-and-overloading-methods/">Constructor and Overloading Methods</a></li> 
         </ul> </li> 
       </ul> </li> 
      <li id="menu-item-2201" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-2201"><a>C++</a> 
       <ul class="sub-menu"> 
        <li id="menu-item-2202" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-2202"><a>Basics</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-2203" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-2203"><a href="http://theoryofprogramming.com/2015/12/23/why-should-i-learn-c/">Why should I learn C++?</a></li> 
          <li id="menu-item-2221" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-2221"><a href="http://theoryofprogramming.com/2015/12/26/c-programming-style-and-structure/">C++ Programming Style and Structure</a></li> 
          <li id="menu-item-2246" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-2246"><a href="http://theoryofprogramming.com/2016/01/15/c-variables-initialization-and-assignment/">Variables, Initialization and Assignment</a></li> 
          <li id="menu-item-3156" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-3156"><a href="http://theoryofprogramming.com/2016/11/14/writing-professional-code-c/">Writing Professional Code in C++</a></li> 
         </ul> </li> 
       </ul> </li> 
      <li id="menu-item-2050" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-2050"><a>Interview Corner</a> 
       <ul class="sub-menu"> 
        <li id="menu-item-2049" class="menu-item menu-item-type-post_type menu-item-object-post menu-item-2049"><a href="http://theoryofprogramming.com/2015/10/05/arrays-interview-questions/">Arrays Interview Questions</a></li> 
       </ul> </li> 
      <li id="menu-item-2198" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-2198"><a>Team</a> 
       <ul class="sub-menu"> 
        <li id="menu-item-672" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-672"><a>Vamsi Sangam</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-1548" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1548"><a href="http://theoryofprogramming.com/vamsi-sangam/">My Life in a Nutshell</a></li> 
          <li id="menu-item-1549" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1549"><a href="http://theoryofprogramming.com/vamsi-sangam-quotes/">Favourite Quotes</a></li> 
          <li id="menu-item-1853" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-1853"><a href="http://theoryofprogramming.com/vamsi-sangam-books-read/">Books Read</a></li> 
         </ul> </li> 
        <li id="menu-item-2199" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children menu-item-2199"><a>Punit Sharma</a> 
         <ul class="sub-menu"> 
          <li id="menu-item-2200" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-2200"><a href="http://theoryofprogramming.com/punit-sharma/">About Me</a></li> 
         </ul> </li> 
       </ul> </li> 
      <li id="menu-item-3193" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3193"><a href="https://github.com/VamsiSangam/theoryofprogramming">GitHub</a></li> 
     </ul>
    </div> 
    <div id="header-search-toggle"> 
     <span class="screen-reader-text">Search</span> 
    </div> 
    <div id="header-search"> 
     <form role="search" method="get" class="search-form" action="http://theoryofprogramming.com/"> 
      <label> <span class="screen-reader-text">Search for:</span> <input type="search" class="search-field" placeholder="Search " value="" name="s"> </label> 
      <input type="submit" class="search-submit" value="Search"> 
     </form> 
    </div> 
   </nav>
   <!-- #site-navigation --> 
   <div id="content" class="site-content"> 
    <div id="primary" class="content-area"> 
     <main id="main" class="site-main" role="main"> 
      <article id="post-289" class="post-289 post type-post status-publish format-standard hentry category-sorting-algorithms tag-quick-sort tag-sorting"> 
       <header class="entry-header"> 
        <h1 class="entry-title">Quick Sort Algorithm</h1> 
        <div class="entry-meta"> 
         <span class="posted-on"><a href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/" rel="bookmark"><time class="entry-date published" datetime="2015-01-20T15:59:44+00:00">January 20, 2015</time><time class="updated" datetime="2017-03-09T21:13:04+00:00">March 9, 2017</time></a></span>
         <span class="byline"><span class="sep"> / </span><span class="author vcard"><a class="url fn n" href="http://theoryofprogramming.com/author/vamsi-sangam/">Vamsi Sangam</a></span></span> 
        </div>
        <!-- .entry-meta --> 
       </header>
       <!-- .entry-header --> 
       <div class="entry-content"> 
        <!-- AddThis Sharing Buttons above -->
        <div class="at-above-post addthis_default_style addthis_toolbox at-wordpress-hide" data-url="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/"></div>
        <p>Hello people! In this post I will talk about the Quick Sort Algorithm. This is an in-place sorting algorithm, which means it works on the given array itself and does not need any additional space, which means less overheads. But this is an unstable sorting algorithm, which means that the relative position of equal elements may not be maintained. So, when an unstable sorting is fine, quick sort is a very good and robust solution. So, letss get started with Quick Sort!</p> 
        <p>Quick Sort is a Divide-and-Conquer Algorithm. What it means is, the given problem is divided into many sub-problems and we solve the sub-problems to get the solution of the actual problem. Here, we will partition the array into two and work our algorithm on the two arrays and then recursively repeat the same for other partitioned arrays. The process is </p> 
        <ol> 
         <li>Choose any element in the array. Make it what is called the <strong>pivot</strong>.</li> 
         <li>Swap the pivot to the last element.</li> 
         <li>Make a two way scan of the remaining elements.</li> 
         <li>Swap elements such that all the elements less than <strong>pivot</strong> are to the left-end&nbsp;and all the elements greater than <strong>pivot</strong>&nbsp;are to the right end.</li> 
         <li>Elements equal to the pivot can go to the either side.</li> 
         <li>Swap the pivot to the appropriate position.</li> 
         <li>Apply the same technique to the left sub-array and the right sub-array.</li> 
         <li>This is done in a recursive manner and the base case is when our array is of size 0 or 1. Arrays of size 0 or 1 are considered to be sorted. So we do nothing in that case.</li> 
        </ol> 
        <p>For a better understanding of the algorithm, look at the sketch below </p> 
        <div id="attachment_366" style="width: 696px" class="wp-caption aligncenter">
         <a href="https://i2.wp.com/theoryofprogramming.com/wp-content/uploads/2015/01/quick11.jpg"><img data-attachment-id="366" data-permalink="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/quick1/" data-orig-file="https://i2.wp.com/theoryofprogramming.com/wp-content/uploads/2015/01/quick11.jpg?fit=686%2C2415" data-orig-size="686,2415" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Quick Sort Step-by-Step" data-image-description="<p>Quick Sort Step-by-Step</p>
" data-medium-file="https://i2.wp.com/theoryofprogramming.com/wp-content/uploads/2015/01/quick11.jpg?fit=85%2C300" data-large-file="https://i2.wp.com/theoryofprogramming.com/wp-content/uploads/2015/01/quick11.jpg?fit=291%2C1024" class="wp-image-366 size-full" title="Quick Sort Algorithm Step-by-Step" src="https://i2.wp.com/theoryofprogramming.com/wp-content/uploads/2015/01/quick11.jpg?resize=676%2C2380" alt="Quick Sort Algorithm Step-by-Step" srcset="https://i2.wp.com/theoryofprogramming.com/wp-content/uploads/2015/01/quick11.jpg?w=686 686w, https://i2.wp.com/theoryofprogramming.com/wp-content/uploads/2015/01/quick11.jpg?resize=85%2C300 85w, https://i2.wp.com/theoryofprogramming.com/wp-content/uploads/2015/01/quick11.jpg?resize=291%2C1024 291w" sizes="(max-width: 676px) 100vw, 676px" data-recalc-dims="1"></a>
         <p class="wp-caption-text">Quick Sort Algorithm Step-by-Step</p>
        </div> 
        <p>The technique of quick sort is rather weird but it is straight-forward. Go through the step-by-step process a few more times and try to code the quick sort algorithm. You need to be confident with recursion if you want to get this right. If you have succeeded, well done! If not, dont worry, look at my code below and try to figure out what are the small silly that things you have missed!</p> 
        <div class="su-tabs su-tabs-style-default" data-active="1">
         <div class="su-tabs-nav">
          <span class="" data-url="" data-target="blank">C</span>
          <span class="" data-url="" data-target="blank">Java</span>
          <span class="" data-url="" data-target="blank">Python</span>
         </div>
         <div class="su-tabs-panes">
          <div class="su-tabs-pane su-clearfix"> 
           <pre class="dynamic-prism language-c line-numbers">
    <code data-github-raw="https://raw.githubusercontent.com/VamsiSangam/theoryofprogramming/master/Sorting%20Algorithms/Quick%20Sort%20Algorithm/C/quick-sort.c"></code>
</pre> 
          </div> 
          <div class="su-tabs-pane su-clearfix"> 
           <pre class="dynamic-prism language-java line-numbers">
    <code data-github-raw="https://raw.githubusercontent.com/VamsiSangam/theoryofprogramming/master/Sorting%20Algorithms/Quick%20Sort%20Algorithm/Java/QuickSort.java"></code>
</pre> 
          </div> 
          <div class="su-tabs-pane su-clearfix"> 
           <pre class="dynamic-prism language-python line-numbers">
    <code data-github-raw="https://raw.githubusercontent.com/VamsiSangam/theoryofprogramming/master/Sorting%20Algorithms/Quick%20Sort%20Algorithm/Python/QuickSort.py"></code>
</pre> 
          </div>
         </div>
        </div> 
        <p><strong>Integer Overflow</strong>  It would like to point out one thing in the code above. In the line 19, we wrote, int mid = low + ((high  low) / 2). One could have written mid = (low + high) / 2 also, but there is a reason why we specifically write it in the former way. Suppose, the values of low is INT_MAX  5 (maximum value of integer) and the value of high is INT_MAX. Upon adding them, we get a value that is greater than INT_MAX, thus a value greater than a 32-Bit integer can hold. So, what happens is that, the bits go from 1111111. to 0000000. that is they sort of reset themselves. This is similar to the Odometer in a car, when the odometer is maxed out, i.e., it has all 9s then it resets itself to all 0s. The same thing happens here too. There is a good depiction of this in <a href="http://en.wikipedia.org/wiki/Integer_overflow">Wikipedia</a>. So, when we add such large values we actually get a negative value, to which we would be calculating the mean. And when you give a negative index to an array, it is most likely that your code will crash due to Segmentation Fault. Although this theory makes more sense when the indices of the arrays are 16-Bit integers, every programmer must keep this theory in the back of his mind.</p> 
        <p>The main concern about this post is not only to give you an idea about Quick Sort Algorithm, but we will discuss the complexity analysis and how to make quick sort faster. Quick Sort algorithm has the following complexities </p> 
        <ul> 
         <li>Worst Case Time Complexity  O(n<sup>2</sup>)</li> 
         <li>Average Case Time Complexity  O(n log<sub>2</sub> n)</li> 
         <li>Best Case Time Complexity  O(n log<sub>2</sub> n)</li> 
         <li>Space Complexity  O(n)</li> 
        </ul> 
        <p>The O(n) space complexity of quick sort is due to the O(n) recursion calls that consume the stack. Although the complexities are vivid, the runtime of quick sort depends on a few factors </p> 
        <ol> 
         <li><strong>Choice of Pivot</strong>  The optimal choice of pivot in quick sort has troubled the researchers for quite some time. Generally, the pivot must be selected in such a way that it partitions the array into two-halves, or at the least, partitions the array into nearly equal halves. But we would know nothing about this when we partition. So, we are forced to pick a pivot of our choice. Sometimes, due to the pivot, we might have to do more partitions that we would expect. Consider the case of a sorted array. If we always choose the first element of the array, we would end up doing O(n) partitions. Robert&nbsp;Sedgewick, a computer scientist, suggested to take the median of first, middle and the last element as the pivot. When we implement this, with tail recursion, we can reduce the space complexity to O(log n), which is very less compared to O(n).</li> 
         <li><strong>Method of Partition</strong>  What we have seen till now is a 2-way partition. i.e., we partition the array into two and recursively implement our algorithm. We can do a 3-way partition which can reduce the best case time complexity to O(n). We will discuss this shortly.</li> 
        </ol> 
        <p><strong>Dual Pivot Partitioning</strong>&nbsp; Until now, we did a 2-way partition, or we partitioned the array into 2 parts. Now, we will partition the array into 3 parts and recursively call solve for the partitioned sub-arrays. When we had to divide the array into two, we simply took an element and put all the elements left of it into one array and greater than it into another array. What should we do if we want to partition the array into 3 parts? If you think for a minute or two you can easily figure our the principle. We will simply, pick up 2 elements, say A and B, and partition our array into 3 parts such that </p> 
        <ul> 
         <li>First part has all elements &lt; A.</li> 
         <li>Second part has all elements that is &gt; A, and &lt; B.</li> 
         <li>Third Part has elements &gt; B.</li> 
        </ul> 
        <p>We can put this technique in a step-by-step procedure </p> 
        <ol> 
         <li>We will choose the starting element, say array[low] and the last element, say array[high] as the pivots. Firstly, check if array[low] &lt; array[high], if not, swap.</li> 
         <li>Take two variables lt, ht, which store the indices and act as pointers. Set (lt&nbsp;? low + 1), and (ht&nbsp;? high  1).</li> 
         <li>Start iterating from (low + 1)&nbsp;? (high  1).</li> 
         <li>If array[i] is less than array[low], swap array[i] and array[lt] and increment i and lt.</li> 
         <li>If array[i] is greater than array[high], swap array[i] and array[gt] and decrement gt only.</li> 
         <li>If array[i] lies between array[high] and array[low], simply continue to the next iteration.</li> 
         <li>Break out of this procedure, once i crosses gt. This is because when, i &gt; gt, all elements of value array[i] will be greater than array[high], the partitioning guarantees this and they are at their proper place.</li> 
         <li>Lastly, swap array[low] and array[lt  1], and swap array[ht + 1] and array[high].</li> 
         <li>Recursively apply the algorithm on the partitioned sub-arrays.</li> 
         <li>Your base case if there is only one element in the array, which needs no further sorting.</li> 
        </ol> 
        <p>It is a simple procedure. You just need to be careful about using the variables and the base case must be dealt appropriately. Try to code this technique. Im sure youll get it. If you didnt I have put my code below </p> 
        <div class="su-tabs su-tabs-style-default" data-active="1">
         <div class="su-tabs-nav">
          <span class="" data-url="" data-target="blank">C</span>
          <span class="" data-url="" data-target="blank">Java</span>
         </div>
         <div class="su-tabs-panes">
          <div class="su-tabs-pane su-clearfix"> 
           <pre class="dynamic-prism language-c line-numbers">
    <code data-github-raw="https://raw.githubusercontent.com/VamsiSangam/theoryofprogramming/master/Sorting%20Algorithms/Quick%20Sort%20Algorithm/C/quick-sort-dual-pivot.c"></code>
</pre> 
          </div> 
          <div class="su-tabs-pane su-clearfix"> 
           <pre class="dynamic-prism language-java line-numbers">
    <code data-github-raw="https://raw.githubusercontent.com/VamsiSangam/theoryofprogramming/master/Sorting%20Algorithms/Quick%20Sort%20Algorithm/Java/QuickSortDualPivot.java"></code>
</pre> 
          </div>
         </div>
        </div> 
        <p>I hope you get the fundamental idea behind the partition. Now, the time complexity of this algorithm is much like the standard procedure, it is O(n log<sub>3</sub>n) which is slightly more efficient than the standard one which would be O(n log<sub>2</sub>n) and we know that for a given value of n, log<sub>3</sub>n is smaller than log<sub>2</sub>n. But this difference is not significant for small values of n. Some consider the 3-way partition to add more overheads to the standard procedure. You must choose the best technique that fits your demands.</p> 
        <p><strong>Random Pivot</strong>  There is another optimization technique that is often implemented in quick sort. This is making the choice of the pivot random. Instead of picking the first, or last, or middle element as the pivot we pick a random element in the given range of numbers and partition the array as usual. Using a random number generator, we can pick a random index from a range of indices and partition the array accordingly. You can see it in the code below </p> 
        <pre class="dynamic-prism language-java line-numbers">
    <code data-github-raw="https://raw.githubusercontent.com/VamsiSangam/theoryofprogramming/master/Sorting%20Algorithms/Quick%20Sort%20Algorithm/Java/QuickSortRandomPivot.java"></code>
</pre> 
        <p><strong>Dijkstras 3-way partitioning</strong>  Dijkstras 3-way partitioning is another approach to partition the array into 3 parts. If the pivot element is P then Dijkstras 3-way partitioning divides the array into elements which are less than P (left partition), elements which are equal to P (middle partition) and elements which are greater than P (right partition). And since the middle partition is just a collection of equal items, it is considered to be sorted and we recursively call the quick sort on the left and the right partitions. This approach performs exceedingly better than the other implementations of the numbers keep repeating very frequently.</p> 
        <pre class="dynamic-prism language-java line-numbers">
    <code data-github-raw="https://raw.githubusercontent.com/VamsiSangam/theoryofprogramming/master/Sorting%20Algorithms/Quick%20Sort%20Algorithm/Java/QuickSortDijsktra.java"></code>
</pre> 
        <p>If you have any doubts feel free to comment them.&nbsp;Now, as we have learnt so many varieties of Quick Sort variants. Which one do you think is faster? I did a comparison of the Quick Sort variants for a <a href="https://www.facebook.com/permalink.php?story_fbid=897074816980393&amp;id=886385758049299">Weekly Discussion</a> on the blogs <a href="https://www.facebook.com/pages/Theory-of-Programming/886385758049299">FB page</a>. And this was what I got </p> 
        <div id="attachment_557" style="width: 2260px" class="wp-caption aligncenter">
         <a href="https://i1.wp.com/theoryofprogramming.com/wp-content/uploads/2015/02/comparison_of_quick_sort_variants.png"><img data-attachment-id="557" data-permalink="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/comparison_of_quick_sort_variants/" data-orig-file="https://i1.wp.com/theoryofprogramming.com/wp-content/uploads/2015/02/comparison_of_quick_sort_variants.png?fit=2250%2C1650" data-orig-size="2250,1650" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="Quicksort Variants  Comparision" data-image-description="<p>Quicksort Variants  Comparision</p>
" data-medium-file="https://i1.wp.com/theoryofprogramming.com/wp-content/uploads/2015/02/comparison_of_quick_sort_variants.png?fit=300%2C220" data-large-file="https://i1.wp.com/theoryofprogramming.com/wp-content/uploads/2015/02/comparison_of_quick_sort_variants.png?fit=676%2C496" class="wp-image-557 size-full" src="https://i1.wp.com/theoryofprogramming.com/wp-content/uploads/2015/02/comparison_of_quick_sort_variants.png?resize=676%2C496" alt="" srcset="https://i1.wp.com/theoryofprogramming.com/wp-content/uploads/2015/02/comparison_of_quick_sort_variants.png?w=2250 2250w, https://i1.wp.com/theoryofprogramming.com/wp-content/uploads/2015/02/comparison_of_quick_sort_variants.png?resize=300%2C220 300w, https://i1.wp.com/theoryofprogramming.com/wp-content/uploads/2015/02/comparison_of_quick_sort_variants.png?resize=1024%2C751 1024w, https://i1.wp.com/theoryofprogramming.com/wp-content/uploads/2015/02/comparison_of_quick_sort_variants.png?w=1352 1352w, https://i1.wp.com/theoryofprogramming.com/wp-content/uploads/2015/02/comparison_of_quick_sort_variants.png?w=2028 2028w" sizes="(max-width: 676px) 100vw, 676px" data-recalc-dims="1"></a>
         <p class="wp-caption-text">Comparison of Quick Sort Variants</p>
        </div> 
        <p>As you can expect, the Dual-Pivot worked pretty faster than the rest due to the O(n log<sub>3</sub> n) complexity of Dual Pivot partitioning. You might get a doubt, if dual partitioning gave an&nbsp;O(n log<sub>3</sub> n) complexity, will an n-partitioning quick sort give&nbsp;O(n log<sub>n</sub>&nbsp;n) complexity which is O(n). Can we really achieve a linear time complexity algorithm for Quick Sort? Well, it is a nice question, but remember that, when we were doing a dual pivot partitioning, we had the two pivots in sorted order. Because it was only two elements we didnt actually do any sorting there. So, if you wanted an n-pivot partitioning in Quick Sort, you can do that, but youd have to have elements in the sorted order, which is nothing but sorting the elements itself. You see? O(n) complexity sounded awesome a few moments back, but now it sounds like nonsense because we know it wont happen!</p> 
        <p>I hope my post helped you in learning the Quick Sort algorithm and the principles behind it. If it did, let me know by commenting. Happy Coding! ?</p> 
        <!-- AddThis Sharing Buttons below -->
        <div class="at-below-post addthis_default_style addthis_toolbox at-wordpress-hide" data-url="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/"></div>
        <!-- AddThis Recommended Content below --> 
        <div class="at-below-post-recommended addthis_default_style addthis_toolbox at-wordpress-hide"></div>
        <!-- AddThis Advanced Settings above via filter on the_content --> 
        <!-- AddThis Advanced Settings below via filter on the_content --> 
        <!-- AddThis Advanced Settings generic via filter on the_content --> 
        <!-- AddThis Related Posts below via filter on the_content --> 
        <div class="at-below-post-recommended addthis_tool"></div>
        <!-- AddThis Related Posts generic via filter on the_content --> 
        <div id="jp-relatedposts" class="jp-relatedposts"> 
         <h3 class="jp-relatedposts-headline"><em>Related</em></h3> 
        </div> 
       </div>
       <!-- .entry-content --> 
       <footer class="entry-meta"> 
        <div class="entry-categories"> 
         <a href="http://theoryofprogramming.com/category/sorting-algorithms/" rel="category tag">Sorting Algorithms</a> 
        </div> 
        <div class="entry-tags"> 
         <a href="http://theoryofprogramming.com/tag/quick-sort/" rel="tag">Quick Sort</a>
         <a href="http://theoryofprogramming.com/tag/sorting/" rel="tag">Sorting</a> 
        </div> 
       </footer>
       <!-- .entry-meta --> 
      </article>
      <!-- #post-## --> 
      <nav class="navigation post-navigation" role="navigation"> 
       <h1 class="screen-reader-text">Post navigation</h1> 
       <div class="nav-links"> 
        <div class="nav-previous">
         <a href="http://theoryofprogramming.com/2015/01/19/bellman-ford-algorithm/" rel="prev"><span class="meta-nav">?</span> Bellman Ford Algorithm</a>
        </div>
        <div class="nav-next">
         <a href="http://theoryofprogramming.com/2015/01/27/segment-trees/" rel="next">Segment Trees <span class="meta-nav">?</span></a>
        </div> 
       </div>
       <!-- .nav-links --> 
      </nav>
      <!-- .navigation --> 
      <div id="comments" class="comments-area"> 
       <h2 class="comments-title"> 4 thoughts on <span>Quick Sort Algorithm</span> </h2> 
       <ol class="comment-list"> 
        <li class="comment even thread-even depth-1" id="li-comment-14689"> 
         <article id="comment-14689" class="comment"> 
          <footer> 
           <div class="comment-author vcard"> 
            <img alt="" src="http://0.gravatar.com/avatar/958ff1b068951566ff6b79d9cc0ec115?s=60&amp;r=g" srcset="http://0.gravatar.com/avatar/958ff1b068951566ff6b79d9cc0ec115?s=120&amp;r=g 2x" class="avatar avatar-60 photo" height="60" width="60"> 
            <cite class="fn">Syed Zuman Husain</cite> 
           </div>
           <!-- .comment-author .vcard --> 
           <div class="comment-meta comment-metadata"> 
            <a href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/#comment-14689"><time pubdate datetime="2016-08-08T16:07:08+00:00"> August 8, 2016 at 4:07 PM </time></a> 
           </div>
           <!-- .comment-meta .commentmetadata --> 
          </footer> 
          <div class="comment-content">
           <p>You could have made it shorter ? in the first C example code<br> <code><br> while (j &gt;= i) {<br> if (arr[j] pivot) {<br> temp = arr[i];<br> arr[i] = arr[j];<br> arr[j] = temp;</code></p>
           <code> </code>
           <p><code> ++i;<br> --j;<br> continue;<br> }<br> if(arr[i] = pivot) --j;<br> }<br> </code></p> 
          </div> 
          <div class="comment-actions"> 
           <a rel="nofollow" class="comment-reply-link" href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/?replytocom=14689#respond" onclick="return addComment.moveForm( &quot;comment-14689&quot;, &quot;14689&quot;, &quot;respond&quot;, &quot;289&quot; )" aria-label="Reply to Syed Zuman Husain">Reply</a> 
          </div>
          <!-- .reply --> 
         </article>
         <!-- #comment-## --> 
         <ul class="children"> 
          <li class="comment byuser comment-author-vamsi-sangam bypostauthor odd alt depth-2" id="li-comment-15063"> 
           <article id="comment-15063" class="comment"> 
            <footer> 
             <div class="comment-author vcard"> 
              <img alt="" src="http://0.gravatar.com/avatar/c97f327d77de075bd36810a57b76d3e9?s=60&amp;r=g" srcset="http://0.gravatar.com/avatar/c97f327d77de075bd36810a57b76d3e9?s=120&amp;r=g 2x" class="avatar avatar-60 photo" height="60" width="60"> 
              <cite class="fn"><a href="http://vamsisangam.com" rel="external nofollow" class="url">Vamsi Sangam</a></cite> 
             </div>
             <!-- .comment-author .vcard --> 
             <div class="comment-meta comment-metadata"> 
              <a href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/#comment-15063"><time pubdate datetime="2016-09-04T22:28:41+00:00"> September 4, 2016 at 10:28 PM </time></a> 
             </div>
             <!-- .comment-meta .commentmetadata --> 
            </footer> 
            <div class="comment-content">
             <p>I prefer keeping it simple rather than short But thanks anyway ?</p> 
            </div> 
            <div class="comment-actions"> 
             <a rel="nofollow" class="comment-reply-link" href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/?replytocom=15063#respond" onclick="return addComment.moveForm( &quot;comment-15063&quot;, &quot;15063&quot;, &quot;respond&quot;, &quot;289&quot; )" aria-label="Reply to Vamsi Sangam">Reply</a> 
            </div>
            <!-- .reply --> 
           </article>
           <!-- #comment-## --> </li>
          <!-- #comment-## --> 
          <li class="comment even depth-2" id="li-comment-17266"> 
           <article id="comment-17266" class="comment"> 
            <footer> 
             <div class="comment-author vcard"> 
              <img alt="" src="http://2.gravatar.com/avatar/be68c363d11d28a97848f23410579786?s=60&amp;r=g" srcset="http://2.gravatar.com/avatar/be68c363d11d28a97848f23410579786?s=120&amp;r=g 2x" class="avatar avatar-60 photo" height="60" width="60"> 
              <cite class="fn">Razi Ahmad</cite> 
             </div>
             <!-- .comment-author .vcard --> 
             <div class="comment-meta comment-metadata"> 
              <a href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/#comment-17266"><time pubdate datetime="2017-01-04T04:33:02+00:00"> January 4, 2017 at 4:33 AM </time></a> 
             </div>
             <!-- .comment-meta .commentmetadata --> 
            </footer> 
            <div class="comment-content">
             <p>This piece of code is awesome (Y)</p> 
            </div> 
            <div class="comment-actions"> 
             <a rel="nofollow" class="comment-reply-link" href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/?replytocom=17266#respond" onclick="return addComment.moveForm( &quot;comment-17266&quot;, &quot;17266&quot;, &quot;respond&quot;, &quot;289&quot; )" aria-label="Reply to Razi Ahmad">Reply</a> 
            </div>
            <!-- .reply --> 
           </article>
           <!-- #comment-## --> 
           <ul class="children"> 
            <li class="comment byuser comment-author-vamsi-sangam bypostauthor odd alt depth-3" id="li-comment-17267"> 
             <article id="comment-17267" class="comment"> 
              <footer> 
               <div class="comment-author vcard"> 
                <img alt="" src="http://0.gravatar.com/avatar/c97f327d77de075bd36810a57b76d3e9?s=60&amp;r=g" srcset="http://0.gravatar.com/avatar/c97f327d77de075bd36810a57b76d3e9?s=120&amp;r=g 2x" class="avatar avatar-60 photo" height="60" width="60"> 
                <cite class="fn"><a href="http://vamsisangam.com" rel="external nofollow" class="url">Vamsi Sangam</a></cite> 
               </div>
               <!-- .comment-author .vcard --> 
               <div class="comment-meta comment-metadata"> 
                <a href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/#comment-17267"><time pubdate datetime="2017-01-04T22:34:58+00:00"> January 4, 2017 at 10:34 PM </time></a> 
               </div>
               <!-- .comment-meta .commentmetadata --> 
              </footer> 
              <div class="comment-content">
               <p>Thank you ?</p> 
              </div> 
              <div class="comment-actions"> 
               <a rel="nofollow" class="comment-reply-link" href="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/?replytocom=17267#respond" onclick="return addComment.moveForm( &quot;comment-17267&quot;, &quot;17267&quot;, &quot;respond&quot;, &quot;289&quot; )" aria-label="Reply to Vamsi Sangam">Reply</a> 
              </div>
              <!-- .reply --> 
             </article>
             <!-- #comment-## --> </li>
            <!-- #comment-## --> 
           </ul>
           <!-- .children --> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
       </ol>
       <!-- .comment-list --> 
       <div id="respond" class="comment-respond"> 
        <h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/2015/01/20/quick-sort-algorithm/#respond" style="display:none;">Cancel reply</a></small></h3> 
        <form id="commentform" class="comment-form"> 
         <iframe src="https://jetpack.wordpress.com/jetpack-comment/?blogid=95041297&amp;postid=289&amp;comment_registration=0&amp;require_name_email=1&amp;stc_enabled=1&amp;stb_enabled=1&amp;show_avatars=1&amp;avatar_default=gravatar_default&amp;greeting=Leave+a+Reply&amp;greeting_reply=Leave+a+Reply+to+%25s&amp;color_scheme=light&amp;lang=en_US&amp;jetpack_version=4.9&amp;sig=f33c5221bbcdb0b3cdf70f7efa70e70aed099902#parent=http%3A%2F%2Ftheoryofprogramming.com%2F2015%2F01%2F20%2Fquick-sort-algorithm%2F" style="width:100%; height: 430px; border:0;" name="jetpack_remote_comment" class="jetpack_remote_comment" id="jetpack_remote_comment"></iframe> 
         <!--[if !IE]><!--> 
         <script>
					document.addEventListener( 'DOMContentLoaded', function () {
						var commentForms = document.getElementsByClassName( 'jetpack_remote_comment' );
						for ( var i = 0; i < commentForms.length; i++ ) {
							commentForms[i].allowTransparency = false;
							commentForms[i].scrolling = 'no';
						}
					} );
				</script> 
         <!--<![endif]--> 
        </form> 
       </div> 
       <input type="hidden" name="comment_parent" id="comment_parent" value=""> 
      </div>
      <!-- #comments --> 
     </main>
     <!-- #main --> 
    </div>
    <!-- #primary --> 
    <div id="secondary" class="widget-area" role="complementary"> 
     <aside id="text-5" class="widget widget_text"> 
      <div class="textwidget">
       <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> 
       <!-- Sidebar Add - 1 --> 
       <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2773341715970647" data-ad-slot="5816269210" data-ad-format="auto"></ins> 
       <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
      </div> 
     </aside> 
     <aside id="recent-posts-4" class="widget widget_recent_entries"> 
      <h1 class="widget-title">Recent Posts</h1> 
      <ul> 
       <li> <a href="http://theoryofprogramming.com/2016/11/15/compressed-trie-tree/">Compressed Trie Tree</a> <span class="post-date">November 15, 2016</span> </li> 
       <li> <a href="http://theoryofprogramming.com/2016/11/14/writing-professional-code-c/">Writing Professional Code in C++</a> <span class="post-date">November 14, 2016</span> </li> 
       <li> <a href="http://theoryofprogramming.com/2016/11/10/jump-search-algorithm/">Jump Search Algorithm</a> <span class="post-date">November 10, 2016</span> </li> 
       <li> <a href="http://theoryofprogramming.com/2016/11/06/dynamic-programming-edit-distance/">Dynamic Programming  Edit Distance</a> <span class="post-date">November 6, 2016</span> </li> 
       <li> <a href="http://theoryofprogramming.com/2016/11/04/binary-search-algorithm/">Binary Search Algorithm</a> <span class="post-date">November 4, 2016</span> </li> 
      </ul> 
     </aside> 
     <aside id="text-6" class="widget widget_text"> 
      <div class="textwidget">
       <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> 
       <!-- Sidebar Add - 1 --> 
       <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2773341715970647" data-ad-slot="5816269210" data-ad-format="auto"></ins> 
       <script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
      </div> 
     </aside>
     <aside id="facebook-likebox-2" class="widget widget_facebook_likebox">
      <h1 class="widget-title"><a href="https://www.facebook.com/pages/Theory-of-Programming/886385758049299">Like this website on Facebook..!</a></h1> 
      <div id="fb-root"></div> 
      <div class="fb-page" data-href="https://www.facebook.com/pages/Theory-of-Programming/886385758049299" data-width="340" data-height="500" data-hide-cover="false" data-show-facepile="true" data-show-posts="false"> 
       <div class="fb-xfbml-parse-ignore">
        <blockquote cite="https://www.facebook.com/pages/Theory-of-Programming/886385758049299">
         <a href="https://www.facebook.com/pages/Theory-of-Programming/886385758049299">Like this website on Facebook..!</a>
        </blockquote>
       </div> 
      </div> 
     </aside>
     <aside id="text-10" class="widget widget_text"> 
      <div class="textwidget">
       <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> 
       <!-- Sidebar Add - 2 --> 
       <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-2773341715970647" data-ad-slot="2799858014" data-ad-format="auto"></ins> 
       <script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script>
      </div> 
     </aside>
     <aside id="blog_subscription-4" class="widget jetpack_subscription_widget">
      <h1 class="widget-title">Subscribe to Blog via Email</h1> 
      <form action="#" method="post" accept-charset="utf-8" id="subscribe-blog-blog_subscription-4"> 
       <div id="subscribe-text">
        <p>Enter your email address to subscribe to this blog and receive notifications of new posts by email.</p> 
       </div>
       <p>Join 142 other subscribers</p> 
       <p id="subscribe-email"> <label id="jetpack-subscribe-label" for="subscribe-field-blog_subscription-4"> Email Address </label> <input type="email" name="email" required class="required" value="" id="subscribe-field-blog_subscription-4" placeholder="Email Address"> </p> 
       <p id="subscribe-submit"> <input type="hidden" name="action" value="subscribe"> <input type="hidden" name="source" value="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/"> <input type="hidden" name="sub-type" value="widget"> <input type="hidden" name="redirect_fragment" value="blog_subscription-4"> <input type="submit" value="Subscribe" name="jetpack_subscriptions_widget"> </p> 
      </form> 
      <script>
			/*
			Custom functionality for safari and IE
			 */
			(function( d ) {
				// In case the placeholder functionality is available we remove labels
				if ( ( 'placeholder' in d.createElement( 'input' ) ) ) {
					var label = d.querySelector( 'label[for=subscribe-field-blog_subscription-4]' );
						label.style.clip 	 = 'rect(1px, 1px, 1px, 1px)';
						label.style.position = 'absolute';
						label.style.height   = '1px';
						label.style.width    = '1px';
						label.style.overflow = 'hidden';
				}

				// Make sure the email value is filled in before allowing submit
				var form = d.getElementById('subscribe-blog-blog_subscription-4'),
					input = d.getElementById('subscribe-field-blog_subscription-4'),
					handler = function( event ) {
						if ( '' === input.value ) {
							input.focus();

							if ( event.preventDefault ){
								event.preventDefault();
							}

							return false;
						}
					};

				if ( window.addEventListener ) {
					form.addEventListener( 'submit', handler, false );
				} else {
					form.attachEvent( 'onsubmit', handler );
				}
			})( document );
			</script> 
     </aside> 
    </div>
    <!-- #secondary --> 
   </div>
   <!-- #content --> 
   <footer id="colophon" class="site-footer" role="contentinfo"> 
    <div id="tertiary" class="widget-areas clear" role="complementary"> 
     <div class="widget-area"> 
      <aside id="categories-2" class="widget widget_categories">
       <h1 class="widget-title">Categories</h1>
       <label class="screen-reader-text" for="cat">Categories</label>
       <select name="cat" id="cat" class="postform"> <option value="-1">Select Category</option> <option class="level-0" value="83">C++ Tutorials&nbsp;&nbsp;(4)</option> <option class="level-0" value="75">Competitive Coding&nbsp;&nbsp;(3)</option> <option class="level-0" value="2">Dynamic Programming&nbsp;&nbsp;(3)</option> <option class="level-0" value="3">Graph Theory&nbsp;&nbsp;(7)</option> <option class="level-0" value="4">Heaps&nbsp;&nbsp;(1)</option> <option class="level-0" value="79">Interview Questions&nbsp;&nbsp;(1)</option> <option class="level-0" value="5">Java&nbsp;&nbsp;(9)</option> <option class="level-0" value="99">Math&nbsp;&nbsp;(1)</option> <option class="level-0" value="97">Searching Algorithms&nbsp;&nbsp;(2)</option> <option class="level-0" value="7">Sorting Algorithms&nbsp;&nbsp;(2)</option> <option class="level-0" value="8">Tree Data Structures&nbsp;&nbsp;(5)</option> </select> 
       <script type="text/javascript">
/* <![CDATA[ */
(function() {
	var dropdown = document.getElementById( "cat" );
	function onCatChange() {
		if ( dropdown.options[ dropdown.selectedIndex ].value > 0 ) {
			location.href = "http://theoryofprogramming.com/?cat=" + dropdown.options[ dropdown.selectedIndex ].value;
		}
	}
	dropdown.onchange = onCatChange;
})();
/* ]]> */
</script> 
      </aside>
      <aside id="archives-2" class="widget widget_archive">
       <h1 class="widget-title">Archives</h1> 
       <label class="screen-reader-text" for="archives-dropdown-2">Archives</label> 
       <select id="archives-dropdown-2" name="archive-dropdown" onchange="document.location.href=this.options[this.selectedIndex].value;"> <option value="">Select Month</option> <option value="http://theoryofprogramming.com/2016/11/"> November 2016 &nbsp;(5)</option> <option value="http://theoryofprogramming.com/2016/10/"> October 2016 &nbsp;(1)</option> <option value="http://theoryofprogramming.com/2016/03/"> March 2016 &nbsp;(1)</option> <option value="http://theoryofprogramming.com/2016/02/"> February 2016 &nbsp;(1)</option> <option value="http://theoryofprogramming.com/2016/01/"> January 2016 &nbsp;(1)</option> <option value="http://theoryofprogramming.com/2015/12/"> December 2015 &nbsp;(2)</option> <option value="http://theoryofprogramming.com/2015/10/"> October 2015 &nbsp;(1)</option> <option value="http://theoryofprogramming.com/2015/09/"> September 2015 &nbsp;(1)</option> <option value="http://theoryofprogramming.com/2015/08/"> August 2015 &nbsp;(2)</option> <option value="http://theoryofprogramming.com/2015/06/"> June 2015 &nbsp;(3)</option> <option value="http://theoryofprogramming.com/2015/05/"> May 2015 &nbsp;(3)</option> <option value="http://theoryofprogramming.com/2015/03/"> March 2015 &nbsp;(2)</option> <option value="http://theoryofprogramming.com/2015/02/"> February 2015 &nbsp;(1)</option> <option value="http://theoryofprogramming.com/2015/01/"> January 2015 &nbsp;(6)</option> <option value="http://theoryofprogramming.com/2014/12/"> December 2014 &nbsp;(7)</option> </select> 
      </aside> 
     </div> 
     <div class="widget-area"> 
      <aside id="blog_subscription-3" class="widget jetpack_subscription_widget">
       <h1 class="widget-title">Subscribe to Blog via Email</h1> 
       <form action="#" method="post" accept-charset="utf-8" id="subscribe-blog-blog_subscription-3"> 
        <div id="subscribe-text">
         <p>Enter your email address to subscribe to this blog and receive notifications of new posts by email.</p> 
        </div>
        <p>Join 142 other subscribers</p> 
        <p id="subscribe-email"> <label id="jetpack-subscribe-label" for="subscribe-field-blog_subscription-3"> Email Address </label> <input type="email" name="email" required class="required" value="" id="subscribe-field-blog_subscription-3" placeholder="Email Address"> </p> 
        <p id="subscribe-submit"> <input type="hidden" name="action" value="subscribe"> <input type="hidden" name="source" value="http://theoryofprogramming.com/2015/01/20/quick-sort-algorithm/"> <input type="hidden" name="sub-type" value="widget"> <input type="hidden" name="redirect_fragment" value="blog_subscription-3"> <input type="submit" value="Subscribe" name="jetpack_subscriptions_widget"> </p> 
       </form> 
       <script>
			/*
			Custom functionality for safari and IE
			 */
			(function( d ) {
				// In case the placeholder functionality is available we remove labels
				if ( ( 'placeholder' in d.createElement( 'input' ) ) ) {
					var label = d.querySelector( 'label[for=subscribe-field-blog_subscription-3]' );
						label.style.clip 	 = 'rect(1px, 1px, 1px, 1px)';
						label.style.position = 'absolute';
						label.style.height   = '1px';
						label.style.width    = '1px';
						label.style.overflow = 'hidden';
				}

				// Make sure the email value is filled in before allowing submit
				var form = d.getElementById('subscribe-blog-blog_subscription-3'),
					input = d.getElementById('subscribe-field-blog_subscription-3'),
					handler = function( event ) {
						if ( '' === input.value ) {
							input.focus();

							if ( event.preventDefault ){
								event.preventDefault();
							}

							return false;
						}
					};

				if ( window.addEventListener ) {
					form.addEventListener( 'submit', handler, false );
				} else {
					form.attachEvent( 'onsubmit', handler );
				}
			})( document );
			</script> 
      </aside> 
     </div> 
    </div>
    <!-- #tertiary --> 
    <div class="site-info"> 
     <a href="http://wordpress.org/">Proudly powered by WordPress</a> 
     <span class="sep"> | </span> Theme: Hemingway Rewritten by 
     <a href="http://www.andersnoren.se" rel="designer">Anders Norén</a>. 
    </div>
    <!-- .site-info --> 
   </footer>
   <!-- #colophon --> 
  </div>
  <!-- #page --> 
  <div style="display:none"> 
   <div class="grofile-hash-map-958ff1b068951566ff6b79d9cc0ec115"> 
   </div> 
   <div class="grofile-hash-map-c97f327d77de075bd36810a57b76d3e9"> 
   </div> 
   <div class="grofile-hash-map-be68c363d11d28a97848f23410579786"> 
   </div> 
  </div> 
  <script data-cfasync="false" type="text/javascript"></script> 
  <!-- AddThis Settings Begin --> 
  <script data-cfasync="false" type="text/javascript">
                    var addthis_product = "wpp-5.3.5";
                    var wp_product_version = "wpp-5.3.5";
                    var wp_blog_version = "4.7.5";
                    var addthis_plugin_info = {"info_status":"enabled","cms_name":"WordPress","plugin_name":"Share Buttons by AddThis","plugin_version":"5.3.5","anonymous_profile_id":"wp-43189ee2b74a129cd9632f273be62aac","plugin_mode":"AddThis","select_prefs":{"addthis_per_post_enabled":true,"addthis_above_enabled":false,"addthis_below_enabled":false,"addthis_sidebar_enabled":true,"addthis_mobile_toolbar_enabled":true,"addthis_above_showon_home":true,"addthis_above_showon_posts":true,"addthis_above_showon_pages":true,"addthis_above_showon_archives":true,"addthis_above_showon_categories":true,"addthis_above_showon_excerpts":true,"addthis_below_showon_home":true,"addthis_below_showon_posts":true,"addthis_below_showon_pages":true,"addthis_below_showon_archives":true,"addthis_below_showon_categories":true,"addthis_below_showon_excerpts":true,"addthis_sidebar_showon_home":true,"addthis_sidebar_showon_posts":true,"addthis_sidebar_showon_pages":true,"addthis_sidebar_showon_archives":true,"addthis_sidebar_showon_categories":true,"addthis_mobile_toolbar_showon_home":true,"addthis_mobile_toolbar_showon_posts":true,"addthis_mobile_toolbar_showon_pages":true,"addthis_mobile_toolbar_showon_archives":true,"addthis_mobile_toolbar_showon_categories":true,"sharing_enabled_on_post_via_metabox":true},"page_info":{"template":"posts","post_type":""}};
                    if (typeof(addthis_config) == "undefined") {
                        var addthis_config = {"data_track_clickback":true,"ui_atversion":300};
                    }
                    if (typeof(addthis_share) == "undefined") {
                        var addthis_share = {};
                    }
                    if (typeof(addthis_layers) == "undefined") {
                        var addthis_layers = {};
                    }
                </script> 
  <script data-cfasync="false" type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5598fac00656bd5e " async>
                </script> 
  <script data-cfasync="false" type="text/javascript">
                    (function() {
                        var at_interval = setInterval(function () {
                            if(window.addthis) {
                                clearInterval(at_interval);
                                addthis.layers(addthis_layers);
                            }
                        },1000)
                    }());
                </script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/akismet/_inc/form.js?ver=3.3.2"></script> 
  <script data-cfasync="false" type="text/javascript" async src="http://theoryofprogramming.com/wp-admin/admin-ajax.php?action=addthis_global_options_settings"></script> 
  <script data-cfasync="false" type="text/javascript" src="https://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5598fac00656bd5e" async></script>
  <script data-cfasync="false" type="text/javascript" async src="http://theoryofprogramming.com/wp-admin/admin-ajax.php?action=addthis_global_options_settings"></script> 
  <script data-cfasync="false" type="text/javascript" src="https://s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5598fac00656bd5e" async></script>
  <link rel="stylesheet" id="addthis_output-css" href="http://theoryofprogramming.com/wp-content/plugins/addthis/css/output.css?ver=c4812eb64ba82949389883f9ad21f9ca" type="text/css" media="all"> 
  <!--[if lte IE 8]>
<link rel='stylesheet' id='jetpack-carousel-ie8fix-css'  href='http://theoryofprogramming.com/wp-content/plugins/jetpack/modules/carousel/jetpack-carousel-ie8fix.css?ver=20121024' type='text/css' media='all' />
<![endif]--> 
  <link rel="stylesheet" id="su-box-shortcodes-css" href="http://theoryofprogramming.com/wp-content/plugins/shortcodes-ultimate/assets/css/box-shortcodes.css?ver=4.9.9" type="text/css" media="all"> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/jetpack/modules/photon/photon.js?ver=20130122"></script> 
  <script type="text/javascript" src="https://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201737"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-includes/js/jquery/ui/effect.min.js?ver=1.11.4"></script> 
  <script type="text/javascript" src="http://s.gravatar.com/js/gprofiles.js?ver=2017Sepaa"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=c4812eb64ba82949389883f9ad21f9ca"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/themes/hemingway-rewritten-wpcom/js/hemingway-rewritten.js?ver=20140228"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/themes/hemingway-rewritten-wpcom/js/navigation.js?ver=20120206"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/themes/hemingway-rewritten-wpcom/js/skip-link-focus-fix.js?ver=20130115"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-includes/js/comment-reply.min.js?ver=c4812eb64ba82949389883f9ad21f9ca"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var jpfbembed = {"appid":"249643311490","locale":"en_US"};
/* ]]> */
</script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/jetpack/_inc/facebook-embed.js"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-includes/js/wp-embed.min.js?ver=c4812eb64ba82949389883f9ad21f9ca"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/jetpack/_inc/spin.js?ver=1.3"></script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/jetpack/_inc/jquery.spin.js?ver=1.3"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var jetpackCarouselStrings = {"widths":[370,700,1000,1200,1400,2000],"is_logged_in":"","lang":"en","ajaxurl":"http:\/\/theoryofprogramming.com\/wp-admin\/admin-ajax.php","nonce":"3121c9a952","display_exif":"1","display_geo":"1","single_image_gallery":"1","single_image_gallery_media_file":"","background_color":"black","comment":"Comment","post_comment":"Post Comment","write_comment":"Write a Comment...","loading_comments":"Loading Comments...","download_original":"View full size <span class=\"photo-size\">{0}<span class=\"photo-size-times\">\u00d7<\/span>{1}<\/span>","no_comment_text":"Please be sure to submit some text with your comment.","no_comment_email":"Please provide an email address to comment.","no_comment_author":"Please provide your name to comment.","comment_post_error":"Sorry, but there was an error posting your comment. Please try again later.","comment_approved":"Your comment was approved.","comment_unapproved":"Your comment is in moderation.","camera":"Camera","aperture":"Aperture","shutter_speed":"Shutter Speed","focal_length":"Focal Length","copyright":"Copyright","comment_registration":"0","require_name_email":"1","login_url":"http:\/\/theoryofprogramming.com\/wp-login.php?redirect_to=http%3A%2F%2Ftheoryofprogramming.com%2F2015%2F01%2F20%2Fquick-sort-algorithm%2F","blog_id":"1","meta_data":["camera","aperture","shutter_speed","focal_length","copyright"],"local_comments_commenting_as":"<fieldset><label for=\"email\">Email (Required)<\/label> <input type=\"text\" name=\"email\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-email-field\" \/><\/fieldset><fieldset><label for=\"author\">Name (Required)<\/label> <input type=\"text\" name=\"author\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-author-field\" \/><\/fieldset><fieldset><label for=\"url\">Website<\/label> <input type=\"text\" name=\"url\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-url-field\" \/><\/fieldset>"};
/* ]]> */
</script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/jetpack/modules/carousel/jetpack-carousel.js?ver=20170209"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var su_other_shortcodes = {"no_preview":"This shortcode doesn't work in live preview. Please insert it into editor and preview on the site."};
/* ]]> */
</script> 
  <script type="text/javascript" src="http://theoryofprogramming.com/wp-content/plugins/shortcodes-ultimate/assets/js/other-shortcodes.js?ver=4.9.9"></script> 
  <!--[if IE]>
		<script type="text/javascript">
		if ( 0 === window.location.hash.indexOf( '#comment-' ) ) {
			// window.location.reload() doesn't respect the Hash in IE
			window.location.hash = window.location.hash;
		}
		</script>
		<![endif]--> 
  <script type="text/javascript">
			var comm_par_el = document.getElementById( 'comment_parent' ),
			    comm_par = (comm_par_el && comm_par_el.value) ? comm_par_el.value : '',
			    frame = document.getElementById( 'jetpack_remote_comment' ),
			    tellFrameNewParent;

			tellFrameNewParent = function() {
				if ( comm_par ) {
					frame.src = "https://jetpack.wordpress.com/jetpack-comment/?blogid=95041297&postid=289&comment_registration=0&require_name_email=1&stc_enabled=1&stb_enabled=1&show_avatars=1&avatar_default=gravatar_default&greeting=Leave+a+Reply&greeting_reply=Leave+a+Reply+to+%25s&color_scheme=light&lang=en_US&jetpack_version=4.9&sig=f33c5221bbcdb0b3cdf70f7efa70e70aed099902#parent=http%3A%2F%2Ftheoryofprogramming.com%2F2015%2F01%2F20%2Fquick-sort-algorithm%2F" + '&replytocom=' + parseInt( comm_par, 10 ).toString();
				} else {
					frame.src = "https://jetpack.wordpress.com/jetpack-comment/?blogid=95041297&postid=289&comment_registration=0&require_name_email=1&stc_enabled=1&stb_enabled=1&show_avatars=1&avatar_default=gravatar_default&greeting=Leave+a+Reply&greeting_reply=Leave+a+Reply+to+%25s&color_scheme=light&lang=en_US&jetpack_version=4.9&sig=f33c5221bbcdb0b3cdf70f7efa70e70aed099902#parent=http%3A%2F%2Ftheoryofprogramming.com%2F2015%2F01%2F20%2Fquick-sort-algorithm%2F";
				}
			};

	
			if ( 'undefined' !== typeof addComment ) {
				addComment._Jetpack_moveForm = addComment.moveForm;

				addComment.moveForm = function( commId, parentId, respondId, postId ) {
					var returnValue = addComment._Jetpack_moveForm( commId, parentId, respondId, postId ), cancelClick, cancel;

					if ( false === returnValue ) {
						cancel = document.getElementById( 'cancel-comment-reply-link' );
						cancelClick = cancel.onclick;
						cancel.onclick = function() {
							var cancelReturn = cancelClick.call( this );
							if ( false !== cancelReturn ) {
								return cancelReturn;
							}

							if ( !comm_par ) {
								return cancelReturn;
							}

							comm_par = 0;

							tellFrameNewParent();

							return cancelReturn;
						};
					}

					if ( comm_par == parentId ) {
						return returnValue;
					}

					comm_par = parentId;

					tellFrameNewParent();

					return returnValue;
				};
			}

	
			if ( window.postMessage ) {
				if ( document.addEventListener ) {
					window.addEventListener( 'message', function( event ) {
						if ( "https:\/\/jetpack.wordpress.com" !== event.origin ) {
							return;
						}

						jQuery( frame ).height( event.data );
					} );
				} else if ( document.attachEvent ) {
					window.attachEvent( 'message', function( event ) {
						if ( "https:\/\/jetpack.wordpress.com" !== event.origin ) {
							return;
						}

						jQuery( frame ).height( event.data );
					} );
				}
			}
		</script> 
  <script type="text/javascript" src="https://stats.wp.com/e-201737.js" async defer></script> 
  <script type="text/javascript">
	_stq = window._stq || [];
	_stq.push([ 'view', {v:'ext',j:'1:4.9',blog:'95041297',post:'289',tz:'5.5',srv:'theoryofprogramming.com'} ]);
	_stq.push([ 'clickTrackerInit', '95041297', '289' ]);
</script> 
  <!--wp_footer--> 
  <!-- Added by Vamsi Sangam, for syntax highlighting of code dynamically loaded from GitHub --> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/1.5.16/clipboard.min.js"></script> 
  <script src="http://theoryofprogramming.com/prism.js" type="text/javascript"></script> 
  <script>
    $(document).ready(function () {
        $('.dynamic-prism code').each(function (index) {
            var url = $(this).attr("data-github-raw");
            var pre = $(this);

            $.get(url, function (data) {
                pre.text(data);
                Prism.highlightAll();
            });
        });
    });
</script>   
  <!-- Dynamic page generated in 0.670 seconds. --> 
  <!-- Cached page generated by WP-Super-Cache on 2017-09-18 00:38:57 --> 
  <!-- super cache -->
 </body>
</html>