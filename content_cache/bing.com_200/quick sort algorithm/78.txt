<html>
 <head> 
  <meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252"> 
  <meta NAME="Generator" CONTENT="Microsoft Word 97"> 
  <title>QuickSort</title> 
 </head> 
 <body link="darkblue" vlink="purple" background="../../images/background.gif">
  <font face="Arial" size="2"><font> <font face="Arial" size="2"> 
     <!--Font face = "Arial Narrow" --> <b><p align="right">CmSc 250 Fundamentals of Computing III</p> 
      <hr color="purple"> </b>
     <dir>
      <b> 
       <dir> 
        <font size="5" color="navy"><p> Sorting Algorithms: QuickSort</p> </font> 
        <ol> 
         <li><a href="#features">Features</a></li> 
         <li><a href="#basic">Basic idea</a></li> 
         <li><a href="#alg">Algorithm</a></li> 
         <li><a href="#code">Code</a></li> 
         <li><a href="#impl">Implementation notes</a></li>  
         <li><a href="#compl">Complexity of Quicksort</a></li> 
         <li><a href="#concl">Conclusions</a></li> 
        </ol> 
        <p></p> 
        <dir> 
         <ul> 
          <li> <a href="#anim">Animations</a></li> 
         </ul> 
         <p></p> 
        </dir> 
        <p><a href="#goals">Learning Goals</a><br> <a href="#exam">Exam-like questions</a></p>  
       </dir></b>
     </dir> 
     <hr color="purple"> 
     <dir>
      <dir> 
       <!----> 
       <!----> 
       <ol> 
        <a name="#features"> <p><b><font size="4" color="navy"> </font></b></p><li><b><font size="4" color="navy">Features <p></p></font></b></li> 
         <ul> 
          <li>Similar to mergesort - divide-and-conquer recursive algorithm</li> 
          <li>One of the fastest sorting algorithms</li> 
          <li>Average running time O(NlogN)</li> 
          <li>Worst-case running time O(N<sup>2</sup>)</li>
         </ul> </a>
        <p><a name="#features">
          <!----> </a><a name="#basic"> </a></p>
        <p><a name="#basic"><b><font size="4" color="navy"> </font></b></a></p>
        <li><a name="#basic"><b><font size="4" color="navy">Basic idea<p></p></font></b></a></li>
        <a name="#basic"> 
         <ol> 
          <li>Pick one element in the array, which will be the <em>pivot</em>. </li> 
          <li>Make one pass through the array, called a <em>partition</em> step, re-arranging the entries so that: </li> 
          <ul> 
           <ul> 
            <li>the pivot is in its proper place. </li> 
            <li>entries smaller than the pivot are to the left of the pivot. </li> 
            <li>entries larger than the pivot are to its right. </li>
           </ul> 
          </ul> 
          <li>Recursively apply quicksort to the part of the array that is to the left of the pivot, <br>and to the right part of the array. </li>
         </ol> <p>Here we don't have the merge step, at the end all the elements are in the proper order.</p> 
         <!----> </a>
        <a name="#alg"> <p><b><font size="4" color="navy"> </font></b></p><li><b><font size="4" color="navy">Algorithm<p></p></font></b></li> 
         <!----> </a>
        <dir>
         <a name="#alg"> </a>
         <a name="#disc"> <p><b><font face="verdana" size="2" color="navy"> STEP 1. Choosing the pivot</font></b></p> <b></b><p><b>Choosing the pivot is an essential step.</b> <br> Depending on the pivot the algorithm may run very fast, or in quadric time.<b>:</b></p><b> </b> 
          <ol> 
           <ol> 
            <li>Some fixed element: e.g. the first, the last, the one in the middle </li> 
            <p>This is a bad choice - the pivot may turn to be the smallest or the largest element, <br> then one of the partitions will be empty.</p> 
            <li>Randomly chosen (by random generator ) - still a bad choice.</li> 
            <li>The median of the array (if the array has N numbers, the median is the [N/2] largest number. This is difficult to compute - increases the complexity.</li> 
            <li>The median-of-three choice: take the first, the last and the middle element. <br> Choose the median of these three elements.</li>
           </ol> 
          </ol> <p><b>Example:</b></p> 
          <dir> 
           <p>8, 3, 25, 6, 10, 17, 1, 2, 18, 5</p> 
           <p>The first element is 8, the middle - 10, the last - 5.<br> The median of [8, 10, 5] is <b>8</b></p>
           <b> </b> 
          </dir> <p><b><font face="Verdana" size="2" color="navy"> STEP 2. Partitioning</font></b></p> <p>Partitioning is illustrated on the above example.</p> <p>1. The first action is to get the pivot out of the way - swap it with the last element </p> 
          <dir> 
           <b></b>
           <p><b>5</b>, 3, 25, 6, 10, 17, 1, 2, 18, <b>8</b></p>
           <b> </b> 
          </dir> <p>2. We want larger elements to go to the right and smaller elements to go to the left.</p> 
          <dir> 
           <p>Two "fingers" are used to scan the elements from left to right and from right to left:</p> 
           <pre><font size="2">
[5, 3, 25, 6, 10, 17, 1, 2, 18, 8]
 ^                              ^
 i                              j
</font></pre>  
           <ul> 
            <li>While <b>i</b> is to the left of <b>j</b>, we move <b>i</b> right, skipping all the elements <br> less than the pivot. If an element is found greater then the pivot, <b>i</b> stops</li>
            <p></p> 
            <li>While <b>j</b> is to the right of <b>i</b>, we move <b>j </b> left, skipping all the elements <br> greater than the pivot. If an element is found less then the pivot, <b>j</b> stops</li>
            <p></p> 
            <li>When both <b>i</b> and <b>j</b> have stopped, the elements are swapped.</li>
            <p></p> 
            <li>When <b>i</b> and <b>j</b> have crossed, no swap is performed, scanning stops, <br> and the element pointed to by <b>i</b> is swapped with the pivot .</li>
            <p></p> 
           </ul> 
           <p>In the example the first swapping will be between 25 and 2, the second between 10 and 1.</p> 
          </dir> <p>3. Restore the pivot.</p> 
          <dir> 
           <p>After restoring the pivot we obtain the following partitioning into three groups:</p> 
           <p>[5, 3, 2, 6, 1] [ 8 ] [10, 25, 18, 17]</p> 
          </dir> <b><p><font face="verdana" size="2" color="navy"> STEP 3.</font> Recursively quicksort the left and the right parts</p> </b> </a>
        </dir>
        <a name="#disc"> 
         <!----> </a>
        <a name="#code"> <p><b><font size="4" color="navy"> </font></b></p><li><b><font size="4" color="navy">Code<p></p></font></b></li> <p>Here is the code, that implements the partitioning.<br> <font size="Courier">left</font> points to the first element in the array currently processed, <font size="Courier">right</font> points to the last element. </p> <pre><font size="2">
<b>if</b>( left + 10 &lt;= right)
    {
	<b>int</b> i = left, j = right - 1;
	<b>for</b> ( ; ; )
	  {
	    <b>while</b> (a[++i] &lt; pivot  ) {}   // move the left finger
	    <b>while</b> (pivot  &lt; a[--j] ) {}	  // move the right finger

	    <b>if</b> (i &lt; j) swap (a[i],a[j]);  // swap	
            <b>else break</b>;		  // break if fingers have crossed
          }
       swap (a[I], a[right-1);		  // restore the pivot
       quicksort ( a, left, i-1);	  // call quicksort for the left part
       quicksort (a, i+1, right);	  // call quicksort for the left part
     }
<b>else</b>  insertionsort (a, left, right);

</font></pre> <p>If the elements are less than 10, quicksort is not very efficient. <br>Instead insertion sort is used at the last phase of sorting.</p> </a>
        <p><a name="#code">Click <b></b></a><b><a href="L06-QuickSortEX.htm">here</a></b> to see the above example worked out in details</p> 
        <a name="#anim"> <b>Animations:</b><br> 
         <!-- not there -------------
<a href = "http://ciips.ee.uwa.edu.au/~morris/Year2/PLDS210/qsort.html">
http://ciips.ee.uwa.edu.au/~morris/Year2/PLDS210/qsort.html</a><br>
--------------------------> </a>
        <a href="http://math.hws.edu/TMCM/java/xSortLab/"> http://math.hws.edu/TMCM/java/xSortLab/</a>
        <br> 
        <a href="http://students.ceid.upatras.gr/~pirot/java/Quicksort/"> http://students.ceid.upatras.gr/~pirot/java/Quicksort/</a>
        <p></p> 
        <!----> 
        <a name="#impl"> <p><b><font size="4" color="navy"> </font></b></p><li><b><font size="4" color="navy">Implementation notes<p></p></font></b></li> <p>Compare the two versions:</p> <pre><font size="2">
A.
	while (a[++i] &lt; pivot) {}
	while (pivot &lt; a[--j]) {}

	if (i &lt; j) swap (a[i], a[j]);
	else break;

B.

	while (a[i] &lt; pivot) {i++;}
	while (pivot &lt; a[j] ) {j--;}

	if (i &lt; j) swap (a[i], a[j]);
	else break;
</font></pre> <p>If we have an array of equal elements, the second code will never increment <b>i</b> or decrement <b>j</b>, <br> and will do infinite swaps. <b>i</b> and <b>j</b> will never cross.</p>  
         <!----> </a>
        <a name="#compl"> <p><b><font size="4" color="navy"> </font></b></p><li><b><font size="4" color="navy">Complexity of Quicksort<p></p></font></b></li> <p><b>Worst-case: O(N<sup>2</sup>)</b><br> </p>
         <dir>
          This happens when the pivot is the smallest (or the largest) element. 
          <br> Then one of the partitions is empty, and we repeat recursively the procedure for N-1 elements.
          <p></p> 
         </dir> <p><b>Best-case O(NlogN)</b> The best case is when the pivot is the median of the array, <br> and then the left and the right part will have same size.</p> 
         <dir> 
          <p>There are <b>logN</b> partitions, and to obtain each partitions we do <b>N</b> comparisons <br> (and not more than <b>N/2</b> swaps). Hence the complexity is <b>O(NlogN)</b></p> 
         </dir> <p><b>Average-case</b> - <b>O(NlogN)</b></p> 
         <!----> </a>
        <a name="#concl"> <p><b><font size="4" color="navy"> </font></b></p><li><b><font size="4" color="navy">Conclusions<p></p></font></b></li> <b></b><p><b>Advantages</b>: </p> 
         <ul> 
          <li>One of the fastest algorithms on average.</li> 
          <li>Does not need additional memory (the sorting takes place in the array - this is called <b>in-place</b> processing). Compare with mergesort: mergesort needs additional memory for merging.</li> 
         </ul> <b></b><p><b>Disadvantages:</b> The worst-case complexity is O(N<sup>2</sup>)</p> <b><p>Applications:</p> </b> <p>Commercial applications use Quicksort - generally it runs fast, no additional memory, <br> this compensates for the rare occasions when it runs with O(N<sup>2</sup>)</p> <p><b>Never </b>use in applications which require <b>guaranteed response time</b>:<br> </p>
         <ul> 
          <li>Life-critical (medical monitoring, life support in aircraft and space craft)</li> 
          <li>Mission-critical (monitoring and control in industrial and research plants <br> handling dangerous materials, control for aircraft, defense, etc) </li>
         </ul> <b>unless you assume the worst-case response time</b>.<p></p> <b></b><p><b>Comparison with mergesort:</b> </p>
         <ul>
          <li>mergesort guarantees O(NlogN) time, however it requires additional memory with size N.</li> 
          <li>quicksort does not require additional memory, however the speed is not quaranteed</li> 
          <li>usually mergesort is not used for main memory sorting, only for external memory sorting.</li> 
         </ul><p></p> <p>So far, our best sorting algorithm has <b>O(<i>n</i>log <i>n</i>)</b> performance: can we do any better? </p> <i></i><p><i>In general,</i> the answer is <b>no.</b><font size="2"> </font></p><font size="2"> </font></a>
       </ol>
       <a name="#concl"><font size="2"> </font></a>
      </dir>
     </dir><a name="#concl"><font size="2"> 
       <hr color="purple"> 
       <!----> </font></a><font>
      <dir>
       <a name="#concl">
        <dir> 
         <a name="#goals"> <p><b><font size="4" color="navy"> Learning Goals</font></b></p> <font size="2"> 
           <ul> 
            <li> Be able to explain how quicksort works and what its complexity is (worst-case, best-case, average case). </li> 
            <li> Be able to compare quicksort with heapsort and mergesort. </li> 
            <li> Be able to explain the advantages and disadvantages of quicksort, <br> and its applications. </li> 
           </ul> </font> </a>
        </dir></a>
      </dir><a name="#goals"> 
       <hr color="purple"> </a>
      <blockquote>
       <a name="#goals">
        <blockquote> 
         <a name="#exam"> <p><b><font size="4" color="navy"> Exam-like questions</font></b></p> <font size="2"> 
           <ol> 
            <li>Briefly describe the basic idea of quicksort.</li> 
            <li>What is the complexity of quicksort?</li> 
            <li>Compare quicksort with mergesort.</li> 
            <li>What are the advantages and disadvantages of quicksort?</li> 
            <li>Which applications are not suitable for quicksort and why?</li> 
           </ol> </font> </a>
        </blockquote></a>
      </blockquote><a name="#exam"> 
       <hr color="purple"> </a><a href="Contents.htm">Back to Contents page</a> 
      <hr color="navy"> Created by <a href="../../index.htm">Lydia Sinapova</a>   </font></font></font></font>
 </body>
</html>