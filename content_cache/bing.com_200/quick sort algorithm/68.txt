<html>
 <head>
  <meta HTTP-EQUIV="expires" CONTENT="0">   
  <style type="text/css">
table {font-size: 100%;}
</style> 
 </head> 
 <body text="#000000" link="#00ff00" vlink="#f00000" bgcolor="#ffffff"> 
  <h3> 
   <hr> Simple to understand Quick Sort 
   <hr> </h3> 
  <ul> 
   <p> </p>
   <li> <font color="darkmagenta"><b> The "divide and conquer" strategy of <i>Quick Sort</i> </b></font> <p> </p>
    <ul> 
     <li> <b>Divide and conquer</b> strategy used by <font color="blue"><b><i>Quick Sort</i></b></font>: <p> </p>
      <ul> 
       <table bgcolor="lightcyan" border="5"> 
        <tbody>
         <tr> 
          <td> 
           <ul> 
            <li> <font color="blue"><b>Select</b></font> an <b>element</b> from the <font color="red"><b>input array</b></font> <font color="blue"><b>"randomly"</b></font> <p> </p>
             <ul> 
              <table bgcolor="lightyellow" border="5"> 
               <tbody>
                <tr> 
                 <td> 
                  <ul> 
                   <li> I put <font color="blue"><b>"randomly"</b></font> in <b>quotes</b> because.... <p> </p></li>
                   <li> The <font color="blue"><b>common practice</b></font> is to <b><i>always</i> pick</b> the <font color="red"><b><i>last</i> element</b></font> in the <b>input array</b> </li>
                  </ul> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> The <b>element</b> that is <font color="blue"><b>selected</b></font> is called: <p> </p>
             <ul> 
              <table bgcolor="#FFEEEE" border="5"> 
               <tbody>
                <tr> 
                 <td> 
                  <ul> 
                   <li> The <font color="red"><b><i>pivot</i> element</b></font> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </li>
                  </ul> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> <font color="red"><b>Partition</b></font> the <b>input array</b> into <font color="blue"><b>2 halves</b></font>: <p> </p>
             <ul> 
              <table bgcolor="lightyellow" border="5"> 
               <tbody>
                <tr> 
                 <td> 
                  <ul> 
                   <li> The <font color="blue"><b>left half</b></font> contain <b><i>only</i> values</b> that are <font color="red"><b>? <i>pivot</i> element</b></font> </li>
                   <li> The <font color="blue"><b>right half</b></font> contain <b><i>only</i> values</b> that are <font color="red"><b>&gt; <i>pivot</i> element</b></font> </li>
                  </ul> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> (The <font color="blue"><b><i>pivot</i> element</b></font> is <font color="red"><b><i>not</i> included</b></font> in the <b>2 halves</b> of the <font color="blue"><b>partition</b></font>.) </p><p> </p>
             <hr> 
             <hr> <p> </p></li>
            <li> <font color="red"><b><i>Sort</i></b></font> <b>both halves</b> of the <font color="blue"><b>partitioned arrays</b></font> <p> </p>
             <ul> 
              <table bgcolor="lightyellow" border="5"> 
               <tbody>
                <tr> 
                 <td> 
                  <ul> 
                   <li> You can use <font color="blue"><b><i>any</i> sorting algorithm</b></font> <p> We will use the <font color="red"><b><i>Bubble Sort</i></b></font> </p></li>
                  </ul> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> <font color="red"><b><i>Concatenate</i></b></font> the <font color="blue"><b><i>sorted</i> halves</b></font> along with the <font color="red"><b><i>pivot</i> element</b></font> to obtain the <font color="blue"><b><i>sorted</i> input array</b></font> </li>
           </ul> </td> 
         </tr> 
        </tbody>
       </table> 
      </ul> <p> </p>
      <hr> <p> </p></li>
     <li> <b>Example:</b> <p> </p>
      <ul> 
       <table bgcolor="lightyellow" border="5"> 
        <tbody>
         <tr> 
          <td> 
           <ul> 
            <li> <b>Input array:</b> <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick01.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> <b>Select</b> a <font color="red"><b><i>pivot</i> element</b></font> (pick <font color="blue"><b><i>last</i> element</b></font> in array): <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick02.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> <font color="blue"><b><i>Partition</i></b></font> the <b>input array</b> based on the <font color="red"><b><i>pivot</i> element</b></font>: <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick03.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> <font color="blue"><b><i>Sort</i></b></font> <b>both halves</b> of the <font color="red"><b><i>partitioned</i> arrays</b></font>: <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick04.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> <font color="blue"><b><i>Concatenate</i></b></font> the <b><i>sorted</i> halves</b> along with the <font color="red"><b><i>pivot</i> element</b></font>: <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick05.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p></li>
           </ul> </td> 
         </tr> 
        </tbody>
       </table> 
      </ul> <p> </p>
      <hr> </li>
    </ul> <p> </p>
    <hr> 
    <hr> 
    <hr> 
    <hr> <p> </p></li>
   <li> <font color="darkmagenta"><b> The <i>simple to understand</i> Quick Sort algorithm </b></font> <p> </p>
    <ul> 
     <li> <b>Pseudo code:</b> <p> </p><p> </p></li>
     <li> <font color="blue"><b>Quick Sort</b></font> algorithm in <b>Pseudo code</b>: <p> </p>
      <ul> 
       <table bgcolor="#FFEEEE" border="5"> 
        <tbody>
         <tr> 
          <td> <font color="blue"> <b> <pre>
   <font color="red">QuickSort( double[] a )</font>
   {
      if (<font color="darkred"> a.length ? 1</font> )
         return;    // Don't need sorting             

      <font color="red">Select a pivot;</font>  // It's usually the last elem in a[]      

      <font color="red">Partition a[]</font> in 2 halves:
         left[]: elements ? pivot
	 right[]: elements &gt; pivot;

      <font color="red">Sort left[]</font>;
      <font color="red">Sort right[]</font>;

      <font color="red">Concatenate:</font> left[] pivot right[]
   }
</pre> </b> </font> </td> 
         </tr> 
        </tbody>
       </table> 
      </ul> <p> </p><p> </p>
      <hr> <p> </p></li>
     <li> <b>Code</b> in <font color="red"><b>Java</b></font>: <p> </p>
      <ul> 
       <table bgcolor="lightcyan" border="5"> 
        <tbody>
         <tr> 
          <td> <font color="blue"> <b> <pre>
   public static void sort( double[] a )
   {
      double[] left = null, right = null;
      int      nleft, nright; // Length of left[] and right[
      double   pivot;
      int      i, j, k;


      if ( a.length &lt;= 1 )
      {
       	 // Array of 1 element is sorted....

	 return;
      }
<font color="red">
      /* ========================================================
	 Select the "pivot"
	 ======================================================== */</font>
      pivot = a[a.length-1];   // Use last element as pivot
                               // This is the default choice...

<font color="darkgreen">
      /* ========================================================
	 Find out how many elements are &lt;= and &gt; than pivot
	 ======================================================== */</font>
      nleft = nright = 0;
      for ( i = 0; i &lt; a.length-1; i++ )
	 if ( a[i] &lt;= pivot )
            nleft++;
	 else
            nright++;
<font color="darkmagenta">
      /* =================================================
	 Make the left and right array of the proper size
	 ================================================= */</font>
      left  =<font color="darkred"> new double[nleft]</font>;
      right = <font color="darkred">new double[nright]</font>;
<font color="red">
      /* =================================================
	 Partition array into 2 halves:

             all values &lt;= pivot to left[ ] array
             all values &gt;  pivot to right[ ] array
	 ================================================= */</font>
      i = 0;
      j = 0;
      for ( k = 0; k &lt; a.length-1; k++ )
	 if ( a[k] &lt;= pivot )
            left[i++] = a[k];
	 else
            right[j++] = a[k];
<font color="red">
      /* =================================================
	 Sort each half
       	 ================================================= */</font>
      BubbleSort.sort(left);
      BubbleSort.sort(right);
<font color="red">
      /* =================================================
       	 Concatenate the pieces back
	 ================================================= */ </font>            
      k = 0;

      for ( i = 0; i &lt; left.length; i++ )
         a[k++] = left[i];

      a[k++] = pivot;

      for ( j = 0; j &lt; right.length; j++ )
         a[k++] = right[j];
   }
</pre> </b> </font> </td> 
         </tr> 
        </tbody>
       </table> 
      </ul> <p> </p>
      <hr> <p> </p></li>
     <li> <font color="#00a000"><b> Example Program: </b></font> (Demo above code) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <sub><sub><sub> <img SRC="../../../Common/Example.jpg"> </sub></sub></sub> <p> </p>
      <ul> 
       <li> The <font color="blue"><b><i>esay to understand</i></b></font> <font color="red"><b>quick sort</b></font> program file: <a href="Progs/QuickSort/1/QuickSort.java"> click here </a> </li>
       <li> The <b>test</b> Prog file: <a href="Progs/QuickSort/1/testProg.java"> click here </a> </li>
      </ul> <p> <b>How to run the program:</b> </p><p> </p>
      <ul> 
       <table bgcolor="#CCFFCC" border="5"> 
        <tbody>
         <tr> 
          <td> 
           <ul> 
            <li> <font color="blue"><b>Right click</b></font> on link and <font color="red"><b>save</b></font> in a scratch directory <p> </p></li>
            <li> To compile: &nbsp; <font color="red"><b><tt>javac testProg.java</tt></b></font> </li>
            <li> To run: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="red"><b><tt>java testProg</tt></b></font> </li>
           </ul> </td> 
         </tr> 
        </tbody>
       </table> 
      </ul> <p> </p></li>
    </ul> <p> </p>
    <hr> 
    <hr> 
    <hr> 
    <hr> <p> </p></li>
   <li> <font color="darkmagenta"><b> Flash of brilliance: why <i>not</i> use <font color="red"><i>Quick Sort</i></font> in place of <font color="red"><i>Bubble Sort</i></font> </b></font> <p> </p>
    <ul> 
     <li> <b>Idea:</b> <p> </p>
      <ul> 
       <table bgcolor="lightyellow" border="5"> 
        <tbody>
         <tr> 
          <td> 
           <ul> 
            <li> The <font color="blue"><b><i>Quick Sort</i></b></font> algorithm can <b><i>also</i></b> be used to <font color="red"><b><i>sort an array</i></b></font> <p> </p>
             <hr> <p> </p></li>
            <li> So, let's <font color="blue"><b><i>replace</i></b></font> the use of <font color="red"><b><i>Bubble Sort</i></b></font> in the above <b>algorithm</b>: <p> </p>
             <ul> 
              <table bgcolor="#CCFFCC" border="5"> 
               <tbody>
                <tr> 
                 <td> <font color="blue"> <b> <pre>
      /* =================================================
	 Sort each half
       	 ================================================= */
      <font color="red">BubbleSort</font>.sort(left);
      <font color="red">BubbleSort</font>.sort(right);
</pre> </b> </font> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> by <font color="red"><b><i>Quick Sort</i></b></font>: </p><p> </p>
             <ul> 
              <table bgcolor="#FFEEEE" border="5"> 
               <tbody>
                <tr> 
                 <td> <font color="blue"> <b> <pre>
      /* =================================================
	 Sort each half
       	 ================================================= */
      <font color="red">QuickSort</font>.sort(left);
      <font color="red">QuickSort</font>.sort(right);
</pre> </b> </font> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p></li>
           </ul> </td> 
         </tr> 
        </tbody>
       </table> 
      </ul> <p> </p>
      <hr> 
      <hr> <p> </p></li>
     <li> The <font color="blue"><b>resulting algorithm</b></font> is a <font color="red"><b><i>simplified</i> Quick Sort</b></font> algorithm: <p> </p>
      <ul> 
       <table bgcolor="lightcyan" border="5"> 
        <tbody>
         <tr> 
          <td> <font color="blue"> <b> <pre>
   public static void sort( double[] a )
   {
      double[] left = null, right = null;
      int      nleft, nright; // Length of left[] and right[
      double   pivot;
      int      i, j, k;


      if ( a.length &lt;= 1 )
      {
       	 // Array of 1 element is sorted....

	 return;
      }
<font color="red">
      /* ========================================================
	 Select the "pivot"
	 ======================================================== */</font>
      pivot = a[a.length-1];   // Use last element as pivot
                               // This is the default choice...

<font color="darkgreen">
      /* ========================================================
	 Find out how many elements are &lt;= and &gt; than pivot
	 ======================================================== */</font>
      nleft = nright = 0;
      for ( i = 0; i &lt; a.length-1; i++ )
	 if ( a[i] &lt;= pivot )
            nleft++;
	 else
            nright++;
<font color="darkmagenta">
      /* =================================================
	 Make the left and right array of the proper size
	 ================================================= */</font>
      left  =<font color="darkred"> new double[nleft]</font>;
      right = <font color="darkred">new double[nright]</font>;
<font color="red">
      /* =================================================
	 Partition array into 2 halves:

             all values &lt;= pivot to left[ ] array
             all values &gt;  pivot to right[ ] array
	 ================================================= */</font>
      i = 0;
      j = 0;
      for ( k = 0; k &lt; a.length-1; k++ )
	 if ( a[k] &lt;= pivot )
            left[i++] = a[k];
	 else
            right[j++] = a[k];
<font color="red">
      /* =================================================
	 Sort each half
       	 ================================================= */</font>
      <span style="BACKGROUND-COLOR: yellow"><font color="magenta">sort(left)</font>;    // Use Quick Sort   </span>
      <span style="BACKGROUND-COLOR: yellow"><font color="magenta">sort(right)</font>;   // Use Quick Sort    </span>
<font color="red">
      /* =================================================
       	 Concatenate the pieces back
	 ================================================= */ </font>            
      k = 0;

      for ( i = 0; i &lt; left.length; i++ )
            a[k++] = left[i];

      a[k++] = pivot;

      for ( j = 0; j &lt; right.length; j++ )
            a[k++] = right[j];
   }
</pre> </b> </font> </td> 
         </tr> 
        </tbody>
       </table> 
      </ul> <p> </p>
      <hr> 
      <hr> <p> </p></li>
     <li> <b>How</b> the <font color="blue"><b><i>simplified</i> Quick Sort</b></font> works: <p> </p>
      <ul> 
       <table bgcolor="#CCFFCC" border="5"> 
        <tbody>
         <tr> 
          <td> 
           <ul> 
            <li> <b>Input array:</b> <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick01.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> <b>Select</b> a <font color="red"><b><i>pivot</i> element</b></font> (pick <font color="blue"><b><i>last</i> element</b></font> in array): <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick02.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> <font color="blue"><b><i>Partition</i></b></font> the <b>input array</b> based on the <font color="red"><b><i>pivot</i> element</b></font>: <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick03.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> <font color="blue"><b><i>Sort</i></b></font> <b>both halves</b> of the <font color="red"><b><i>partitioned</i> arrays</b></font> using <font color="magenta"><b>2 <i>other</i> call</b></font> of <font color="red"><b>Quick Sorts</b></font>: <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick06.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> I will <font color="red"><b><i>only</i></b></font> follow the <font color="blue"><b><i>left</i></b></font> part (the <b>right part</b> goes one more level deeper)... <p> The <font color="blue"><b><i>left</i> merge sort</b></font> will invoke <font color="red"><b><i>Quick Sort</i></b></font> again: </p><p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick07.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> <font color="red"><b>Because</b></font> the <b>input array</b> has <font color="blue"><b><i>one</i> element</b></font>, each of the <font color="red"><b><i>Quick Sort</i></b></font> simply <b>return</b> the <font color="blue"><b>input array <i>back</i></b></font> !!! </p><p> </p>
             <hr> <p> </p></li>
            <li> <b>Each one</b> of the <font color="red"><b>Quick Sorts</b></font> will <font color="blue"><b>select</b></font> its own <font color="red"><b>pivot</b></font> and <font color="blue"><b>partition</b></font> the array: <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick07.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> The <font color="blue"><b><i>left</i> Quick Sort</b></font> will then <font color="red"><b><i>concatenate</i></b></font> the results and <font color="blue"><b>returns</b></font> the <font color="red"><b><i>sorted</i> left array</b></font>: <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick08.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> The <font color="blue"><b><i>right</i> Quick Sort</b></font> will do this <font color="red"><b>also</b></font>, but due to space, I will <font color="blue"><b>omit</b></font> the drawing .... <p> This is the result: </p><p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick09.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p>
             <hr> <p> </p></li>
            <li> <b>Finally</b>, the <font color="red"><b><i>first</i> Merge Sort</b></font> will <font color="blue"><b><i>concatenate</i></b></font> the <b><i>sorted</i> halves</b> along with its <font color="red"><b><i>pivot</i> element</b></font>: <p> </p>
             <ul> 
              <table border="5"> 
               <tbody>
                <tr> 
                 <td> <img SRC="FIGS/quick05.gif"> </td> 
                </tr> 
               </tbody>
              </table> 
             </ul> <p> </p></li>
           </ul> </td> 
         </tr> 
        </tbody>
       </table> 
      </ul> <p> </p>
      <hr> <p> </p></li>
     <li> I have <font color="blue"><b>rigged</b></font> a <b><i>verbose</i> version</b> of the <font color="red"><b><i>Merge Sort</i></b></font> that prints out what it's doing. <p> Here is a <font color="red"><b>sample output</b></font>: </p><p> </p>
      <ul> 
       <table bgcolor="lightcyan" border="5"> 
        <tbody>
         <tr> 
          <td> <font color="blue"> <b> <pre>
Before sort:  [6.4, 3.5, 9.2, 1.1, 8.9, 2.5, 7.5, 4.2]

       Input = [6.4, 3.5, 9.2, 1.1, 8.9, 2.5, 7.5, 4.2]
       Pivot = 4.2
       <font color="red">Left array  = [3.5, 1.1, 2.5]</font>
       <font color="darkgreen">Right array = [6.4, 9.2, 8.9, 7.5]</font>
              <font color="red">Input = [3.5, 1.1, 2.5]</font>
              Pivot = 2.5
              Left array  = [1.1]
              Right array = [3.5]
                     Input = [1.1]
                     Done.
                     Input = [3.5]
                     Done.
              Sorted Left array  = [1.1]
              Sorted Right array = [3.5]
              Concatented pieces = [1.1, 2.5, 3.5]
              <font color="darkgreen">Input = [6.4, 9.2, 8.9, 7.5]</font>
              Pivot = 7.5
              Left array  = [6.4]
              Right array = [9.2, 8.9]
                     Input = [6.4]
                     Done.
                     Input = [9.2, 8.9]
                     Pivot = 8.9
                     Left array  = null
                     Right array = [9.2]
                            Input = [9.2]
                            Done.
                     Sorted Left array  = null
                     Sorted Right array = [9.2]
                     Concatented pieces = [8.9, 9.2]
              Sorted Left array  = [6.4]
              Sorted Right array = [8.9, 9.2]
              Concatented pieces = [6.4, 7.5, 8.9, 9.2]
       Sorted Left array  = [1.1, 2.5, 3.5]
       Sorted Right array = [6.4, 7.5, 8.9, 9.2]
       Concatented pieces = [1.1, 2.5, 3.5, 4.2, 6.4, 7.5, 8.9, 9.2]

After sort:   [1.1, 2.5, 3.5, 4.2, 6.4, 7.5, 8.9, 9.2]
</pre> </b> </font> </td> 
         </tr> 
        </tbody>
       </table> 
      </ul> <p> The <font color="blue"><b>deeper rcursive calls</b></font> of <b>Quick Sort</b> will print their information using <font color="red"><b><i>deeper</i> indentations</b></font> </p><p> </p>
      <hr> <p> </p></li>
     <li> <font color="#00a000"><b> Example Program: </b></font> (Demo above code) &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <sub><sub><sub> <img SRC="../../../Common/Example.jpg"> </sub></sub></sub> <p> </p>
      <ul> 
       <li> The <font color="blue"><b><i>Simplified</i></b></font> <font color="red"><b>quick sort</b></font> program file: <a href="Progs/QuickSort/2/QuickSort.java"> click here </a> </li>
       <li> The <b>test</b> Prog file: <a href="Progs/QuickSort/2/testProg.java"> click here </a> </li>
      </ul> <p> <b>How to run the program:</b> </p><p> </p>
      <ul> 
       <table bgcolor="#CCFFCC" border="5"> 
        <tbody>
         <tr> 
          <td> 
           <ul> 
            <li> <font color="blue"><b>Right click</b></font> on link and <font color="red"><b>save</b></font> in a scratch directory <p> </p></li>
            <li> To compile: &nbsp; <font color="red"><b><tt>javac testProg.java</tt></b></font> </li>
            <li> To run: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="red"><b><tt>java testProg</tt></b></font> </li>
           </ul> </td> 
         </tr> 
        </tbody>
       </table> 
      </ul> <p> </p></li>
    </ul> <p> </p></li>
  </ul> 
  <p> </p>
  <hr> 
  <hr> 
  <hr> 
  <hr> 
 </body>
</html>