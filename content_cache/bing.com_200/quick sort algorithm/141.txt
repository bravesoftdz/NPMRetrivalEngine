<html>
 <head> 
  <title>Quick Sort</title> 
  <meta name="Author" content="Rashid Bin Muhammad"> 
 </head> 
 <body background="../../../Maingif/Bck2.gif" link="#0000FF" vlink="#0000FF" alink="#FF0000" bodylink="blue"> 
  <center> 
   <p> <font size="4"> <img SRC="../../../Maingif/redline.gif" height="2" width="640"></font></p> 
   <h2><font size="6">Quick Sort</font></h2> 
   <p><font size="4"><img SRC="../../../Maingif/redline.gif" height="2" width="640"></font></p> 
  </center> 
  <p>&nbsp;</p> 
  <p><font color="#FF0000" face="Blackadder ITC" size="6">T</font><font size="4">he basic version of quick sort algorithm was invented by C. A. R. Hoare in 1960 and formally introduced quick sort in 1962.&nbsp; It is used on the principle of divide-and-conquer. <font color="#FF00FF">Quick sort is an algorithm of choice</font> in many situations because it is not difficult to implement, it is a good "general purpose" sort and it consumes relatively fewer resources during execution.</font></p> 
  <h3>&nbsp;</h3> 
  <h3><font color="#FF00FF">Good points</font></h3> 
  <ul> 
   <li><font size="4">It is in-place since it uses only a small auxiliary stack.</font></li> 
   <li><font size="4">It requires only </font><font size="5"> <i>n</i> log<i>(n)</i></font><font size="4"> time to sort </font><font size="5">n</font><font size="4"> items.</font></li> 
   <li><font size="4">It has an extremely short inner loop</font></li> 
   <li><font size="4">This algorithm has been subjected to a thorough mathematical analysis, a very precise statement can be made about performance issues.</font></li> 
  </ul> 
  <h3><font color="#FF00FF">Bad Points</font></h3> 
  <ul> 
   <li><font size="4">It is recursive. Especially if recursion is not available, the implementation is extremely complicated.</font></li> 
   <li><font size="4">It requires quadratic (<i>i.e., </i></font><i> <font size="5">n</font></i><font size="5"><sup>2</sup></font><font size="4">) time in the worst-case.</font></li> 
   <li><font size="4">It is fragile i.e., a simple mistake in the implementation can go unnoticed and cause it to perform badly.</font></li> 
  </ul> 
  <p>&nbsp;</p> 
  <p><font size="4">Quick sort works by partitioning a given array </font> <font size="5"> <i>A</i>[<i>p</i> . . <i>r</i>]</font><font size="4"> into two non-empty sub array </font><font size="5"> <i>A</i>[<i>p</i> . . <i>q</i>]</font><font size="4"> and </font><font size="5"> <i>A</i>[<i>q</i>+1 . . <i>r</i>]</font><font size="4"> such that every key in </font> <font size="5"> <i>A</i>[<i>p</i> . . <i>q</i>]</font><font size="4"> is less than or equal to every key in </font><font size="5"> <i>A</i>[<i>q</i>+1 . . <i>r</i>]</font><font size="4">. Then the two subarrays are sorted by recursive calls to Quick sort. The exact position of the partition depends on the given array and index </font><font size="5">q</font><font size="4"> is computed as a part of the partitioning procedure.</font></p> 
  <p>&nbsp;</p> 
  <blockquote> 
   <blockquote> 
    <blockquote> 
     <h3><font color="#FF00FF" size="5">QuickSort</font></h3> 
     <ol> 
      <li><font size="5">If <i>p</i> &lt; <i>r</i> then</font></li> 
      <li><font size="5">&nbsp;&nbsp;&nbsp; <i>q</i> Partition (<i>A</i>, <i>p</i>,<i> r</i>)</font></li> 
      <li><font size="5">&nbsp;&nbsp;&nbsp; Recursive call to Quick Sort (<i>A</i>, <i>p</i>, <i>q</i>)</font></li> 
      <li><font size="5">&nbsp;&nbsp;&nbsp; Recursive call to Quick Sort (<i>A</i>, <i>q </i>+<i> r</i>, <i>r</i>)</font></li> 
     </ol> 
    </blockquote> 
   </blockquote> 
  </blockquote> 
  <p>&nbsp;</p> 
  <p><font size="4"><font color="#FF00FF">Note</font> that to sort entire array, the initial call Quick Sort (<i>A</i>, 1, length[<i>A</i>])</font></p> 
  <p>&nbsp;</p> 
  <p><font size="4">As a first step, Quick Sort chooses as pivot one of the items in the array to be sorted. Then array is then partitioned on either side of the pivot. Elements that are less than or equal to pivot will move toward the left and elements that are greater than or equal to pivot will move toward the right.</font></p> 
  <h3>&nbsp;</h3> 
  <h3><font color="#CC0000" size="5">Partitioning the Array</font></h3> 
  <p><font size="4">Partitioning procedure rearranges the subarrays <font color="#FF00FF">in-place.</font></font></p> 
  <p>&nbsp;</p> 
  <blockquote> 
   <blockquote> 
    <blockquote> 
     <p><b><font size="5"><font color="#FF00FF">PARTITION</font> (<i>A</i>, <i>p</i>, <i>r</i>)</font></b></p> 
     <ol> 
      <li><i><font size="5">x</font></i><font size="5"> <font face="Times New Roman">? </font><i>A</i>[<i>p</i>]</font></li> 
      <li><i><font size="5">i</font></i><font size="5"> <font face="Times New Roman">? </font><i>p</i>-1</font></li> 
      <li><i><font size="5">j</font></i><font size="5"> <font face="Times New Roman">? </font><i>r</i>+1</font></li> 
      <li><font size="5">while TRUE do</font></li> 
      <li><font size="5">&nbsp;&nbsp;&nbsp; Repeat <i>j</i> <font face="Times New Roman">? </font><i>j</i>-1</font></li> 
      <li><font size="5">&nbsp;&nbsp;&nbsp; until <i>A</i>[<i>j</i>] <font face="Times New Roman">? </font></font><i><font size="5">x</font></i></li> 
      <li><font size="5">&nbsp;&nbsp;&nbsp; Repeat <i>i</i> <font face="Times New Roman">?<i> </i></font><i>i</i>+1</font></li> 
      <li><font size="5">&nbsp;&nbsp;&nbsp; until <i>A</i>[<i>i</i>] <font face="Times New Roman">?<i> </i></font></font><i> <font size="5">x</font></i></li> 
      <li><font size="5">&nbsp;&nbsp;&nbsp; if <i>i</i> &lt;</font><i><font size="5"> j</font></i></li> 
      <li><font size="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; then exchange <i>A</i>[<i>i</i>] <font face="Times New Roman">? </font><i>A</i>[<i>j</i>]</font></li> 
      <li><font size="5">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else return </font><i><font size="5">j</font></i></li> 
     </ol> 
    </blockquote> 
   </blockquote> 
  </blockquote> 
  <p>&nbsp;</p>
  <p><font size="4">Partition selects the first key, <font color="#FF00FF"> <i>A</i>[<i>p</i>]</font> as a <font color="#FF00FF">pivot key</font> about which the array will partitioned: </font> </p>
  <p align="center"><font size="5">Keys ?&nbsp; <i>A</i>[<i>p</i>] will be moved towards the left .<br>Keys ? <i>A</i>[<i>p</i>] will be moved towards the right.</font></p> 
  <p>&nbsp;</p> 
  <p><font size="4">The running time of the partition procedure is <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)</font><font size="4"> where </font><font size="5"> <i>n</i> = <i>r </i>-<i> p </i>+1</font><font size="4"> which is the number of keys in the array.</font></p> 
  <p><font size="4"><font color="#FF00FF">Another argument</font> that running&nbsp; time of PARTITION on a subarray of size <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)</font><font size="4"> is as follows: Pointer </font><font size="5"> <i>i</i></font><font size="4"> and pointer </font><font size="5"> <i>j</i></font><font size="4"> start at each end and move towards each other, conveying somewhere in the middle. The total number of times that </font><font size="5"> <i>i</i></font><font size="4"> can be incremented and </font><font size="5"> <i>j</i></font><font size="4"> can be decremented is therefore </font><font size="5">O(<i>n</i>)</font><font size="4">. Associated with each increment or decrement there are </font><font size="5">O(1)</font><font size="4"> comparisons and swaps. Hence, the total time is </font><font size="5">O(<i>n</i>)</font><font size="4">.</font></p> 
  <h3>&nbsp;</h3> 
  <h3><font size="5" color="#CC0000">Array of Same Elements</font></h3> 
  <p><font size="4">Since all the elements are equal, the "less than or equal" teat in lines 6 and 8 in the PARTITION (<i>A</i>, <i>p</i>, <i>r</i>) will always be true. this simply means that repeat loop all stop at once. Intuitively, the first repeat loop moves </font><font size="5"> <i>j</i></font><font size="4"> to the left; the second repeat loop moves </font><font size="5"> <i>i</i></font><font size="4"> to the right. In this case, when all elements are equal, each repeat loop moves </font> <font size="5"> <i>i</i></font><font size="4"> and </font><font size="5"> <i>j</i></font><font size="4"> towards the middle one space. They meet in the middle, so </font><font size="5"> <i>q= Floor(p+r/2)</i></font><font size="4">. Therefore, when all elements in the array </font><font size="5"> <i>A</i>[<i>p</i> . . <i>r</i>]</font><font size="4"> have the same value equal to </font><font size="5"> <i>Floor(p+r/2)</i></font><font size="4">.</font></p> 
  <h3>&nbsp;</h3> 
  <h3><font color="#CC0000" size="5">Performance of Quick Sort</font></h3> 
  <p><font size="4">The running time of quick sort depends on whether partition is <font color="#FF00FF">balanced</font> or <font color="#FF00FF">unbalanced</font>, which in turn depends on which elements of an array to be sorted are used for partitioning.</font></p> 
  <p><font size="4">A very good partition splits an array up into two equal sized arrays. A bad partition, on other hand, splits an array up into two arrays of very different sizes. The worst partition puts only one element in one array and all other elements in the other array. If the partitioning is balanced, the Quick sort runs asymptotically as fast as merge sort. On the other hand, if partitioning is unbalanced, the Quick sort runs asymptotically as slow as insertion sort.</font></p> 
  <p>&nbsp;</p> 
  <h3><font color="#CC0000" size="5">Best Case</font></h3> 
  <p><font size="4">The best thing that could happen in Quick sort would be that each partitioning stage divides the array exactly in half. In other words, the best to be a median of the keys in </font><font size="5"> <i>A</i>[<i>p</i> . . <i>r</i>]</font><font size="4"> every time procedure 'Partition' is called. The procedure 'Partition' always split the array to be sorted into two equal sized arrays.</font></p> 
  <p><font size="4">If the procedure 'Partition' produces two regions of size </font><font size="5"> <i>n</i>/2</font><font size="4">. the recurrence relation is then</font></p> 
  <blockquote> 
   <blockquote> 
    <blockquote> 
     <p><font size="5">T(n) = T(<i>n</i>/2) + T(<i>n</i>/2) + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= 2T(<i>n</i>/2) + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)</font></p> 
    </blockquote> 
   </blockquote> 
  </blockquote> 
  <p><font size="4">And from case 2 of <font color="#FF00FF">Master theorem</font></font></p> 
  <p align="center"><font size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font size="5">T(n) = </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n </i>lg<i> n</i>)</font></p> 
  <h3>&nbsp;</h3> 
  <h3><font color="#CC0000" size="5">Worst case Partitioning</font></h3> 
  <p><font size="4">The worst-case occurs if given array </font><font size="5"> <i>A</i>[1 . . <i>n</i>]</font><font size="4"> is already sorted. The PARTITION (<i>A</i>, <i>p</i>,<i> r</i>) call always return </font> <font size="5">p</font><font size="4"> so successive calls to partition will split arrays of length </font><font size="5"> <i>n</i>, <i>n</i>-1, <i>n</i>-2, . . . , 2</font><font size="4"> and running time proportional to </font><font size="5"> <i>n</i> + (<i>n</i>-1) + (<i>n</i>-2) + . . . + 2 = [(<i>n</i>+2)(<i>n</i>-1)]/2 = </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i><sup>2</sup>)</font><font size="4">. The worst-case also occurs if </font><font size="5"> <i>A</i>[1 . . <i>n</i>]</font><font size="4"> starts out in reverse order.</font></p> 
  <p>&nbsp;</p> 
  <p>&nbsp;</p> 
  <p align="center"> <font size="4"> <img border="0" src="Gifs/quickGraph.gif" width="600" height="399"></font></p> 
  <h3>&nbsp;</h3> 
  <h3>&nbsp;</h3> 
  <h3><font color="#CC0000" size="5">Randomized Quick Sort</font></h3> 
  <p><font size="4">In the randomized version of Quick sort we impose a distribution on input. This does not improve the worst-case running time independent of the input ordering.</font></p> 
  <p><font size="4">In this version we choose a random key for the pivot. Assume that procedure Random (<i>a, b</i>) returns a random integer in the range [<i>a, b</i>); there are <i>b</i>-<i>a</i>+1 integers in the range and procedure is equally likely to return one of them. The new partition procedure, simply implemented the swap before actually partitioning.</font></p> 
  <p>&nbsp;</p> 
  <blockquote> 
   <blockquote> 
    <blockquote> 
     <p><b><font size="5"><font color="#FF00FF">RANDOMIZED_PARTITION</font> (<i>A, p, r</i>)</font></b></p> 
     <blockquote> 
      <p><i><font size="5">i</font></i><font size="5"> <font face="Times New Roman">? </font>RANDOM (<i>p, r</i>)<br>Exchange <i>A</i>[<i>p</i>]<i> </i><font face="Times New Roman">?<i> </i></font><i>A</i>[<i>i</i>]<br>return PARTITION (<i>A, p, r</i>)</font></p> 
     </blockquote> 
    </blockquote> 
   </blockquote> 
  </blockquote> 
  <p><font size="4">Now randomized quick sort call the above procedure in place of PARTITION</font></p> 
  <p>&nbsp;</p> 
  <blockquote> 
   <blockquote> 
    <blockquote> 
     <p><b><font size="5"><font color="#FF00FF">RANDOMIZED_QUICKSORT</font> (<i>A, p, r</i>)</font></b></p> 
     <blockquote> 
      <p><font size="5">If p &lt; r then<br>&nbsp;&nbsp;&nbsp; q <font face="Times New Roman">? </font>RANDOMIZED_PARTITION (<i>A, p, r</i>)<br>&nbsp;&nbsp;&nbsp; RANDOMIZED_QUICKSORT (<i>A, p, q</i>)<br>&nbsp;&nbsp;&nbsp; RANDOMIZED_QUICKSORT (<i>A, q+1, r</i>)</font></p> 
     </blockquote> 
    </blockquote> 
   </blockquote> 
  </blockquote> 
  <p>&nbsp;</p> 
  <p>&nbsp;</p> 
  <p><font size="4">Like other randomized algorithms, <font color="#FF00FF">RANDOMIZED_QUICKSORT has the property that no particular input elicits its worst-case behavior</font>; the behavior of algorithm only depends on the random-number generator. Even intentionally, we cannot produce a bad input for RANDOMIZED_QUICKSORT unless we can predict generator will produce next.</font></p> 
  <h3>&nbsp;</h3> 
  <h3><font color="#CC0000" size="5">Analysis of Quick sort</font></h3> 
  <p>&nbsp;</p> 
  <p><b><font size="4" color="#FF00FF">Worst-case</font></b></p> 
  <blockquote> 
   <blockquote> 
    <p><font size="4">Let <i>T</i>(<i>n</i>) be the worst-case time for QUICK SORT on input size n. We have a recurrence</font></p> 
    <blockquote> 
     <p><font size="5"><i>T</i>(<i>n</i>) = max<sub>1<font face="Times New Roman">?</font><i>q</i><font face="Times New Roman">?</font><i>n</i>-1</sub> (<i>T</i>(<i>q</i>) + <i>T</i>(<i>n</i>-<i>q</i>)) + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------- 1</font></p> 
    </blockquote> 
    <p><font size="4">where <i>q</i> runs from 1 to <i>n</i>-1, since the partition produces two regions, each having size at least 1.</font></p> 
    <p><font size="4">Now we <font color="#FF00FF">guess</font> that </font> <font size="5"><i>T</i>(<i>n</i>) ? <i>cn</i></font><sup><font size="5">2</font><font size="4"> </font></sup><font size="4">for some constant </font><font size="5"><i>c</i></font><font size="4">.</font></p> 
    <p><font size="4">Substituting our guess in equation 1.We get </font> </p> 
    <blockquote> 
     <p><i><font size="4"><br>&nbsp;&nbsp;&nbsp; </font><font size="5">T</font></i><font size="5">(<i>n</i>) = max<sub>1<font face="Times New Roman">?</font><i>q</i><font face="Times New Roman">?</font><i>n</i>-1</sub> (<i>cq</i><sup>2 </sup>) + <i>c</i>(<i>n </i>-<i> q</i><sup>2</sup>)) + </font> <font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = <i>c</i> max (<i>q</i><sup>2</sup> + (<i>n </i>-<i> q</i>)<sup>2</sup>) +&nbsp; </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)</font></p> 
    </blockquote> 
    <p><font size="4">Since the second derivative of expression </font> <font size="5"><i>q</i><sup>2</sup> + (<i>n</i>-<i>q</i>)<sup>2</sup></font><font size="4">&nbsp; with respect to </font><font size="5">q</font><font size="4"> is positive. Therefore, expression achieves a maximum over the range </font><font size="5">1? q&nbsp; ? n -1</font><font size="4"> at one of the endpoints. This gives the bound max </font><font size="5">(<i>q</i><sup>2</sup> + (<i>n </i>-<i> q</i>)<sup>2</sup>)) 1 + (<i>n </i>-1)<sup>2 = </sup><i>n</i><sup>2 </sup>+ 2(<i>n </i>-1)</font><font size="4">.</font></p> 
    <p><font size="4">Continuing with our bounding of </font><font size="5"> <i>T</i>(<i>n</i>)</font><font size="4"> we get</font></p> 
    <blockquote> 
     <p><i><font size="4">&nbsp;&nbsp;&nbsp; </font><font size="5">T</font></i><font size="5">(<i>n</i>) <font face="Times New Roman">? <i>c</i> [<i>n</i><sup>2</sup> - 2(<i>n</i>-1)] + </font></font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = <i>cn</i><sup>2</sup> - 2<i>c</i>(<i>n</i>-1) + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)</font></p> 
    </blockquote> 
    <p><font size="4">Since we can pick the constant so that the </font> <font size="5">2<i>c</i>(<i>n </i>-1)</font><font size="4"> term dominates the <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)</font><font size="4"> term we have</font></p> 
    <blockquote> 
     <p><i><font size="4">&nbsp;&nbsp;&nbsp;&nbsp; </font><font size="5">T</font></i><font size="5">(<i>n</i>)&nbsp; </font><font face="Times New Roman"><font size="5">? <i>&nbsp;cn</i></font><sup><font size="5">2</font></sup></font></p> 
    </blockquote> 
    <p><font size="4">Thus the worst-case running time of quick sort is <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n<sup>2</sup></i>).</font></p> 
   </blockquote> 
  </blockquote> 
  <h3>&nbsp;</h3> 
  <h3><font color="#FF00FF">Average-case Analysis</font></h3> 
  <blockquote> 
   <blockquote> 
    <p><font size="4">If the split induced by RANDOMIZED_PARTITION puts constant fraction of elements on one side of the partition, then the recurrence tree has depth <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(lg<i>n</i>)</font><font size="4"> and <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)</font><font size="4"> work is performed at <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(lg<i> n</i>)</font><font size="4"> of these level. This is an intuitive argument why the average-case running time of&nbsp; RANDOMIZED_QUICKSORT is <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i> lg<i> n</i>)</font><font size="4">.</font></p> 
    <p><font size="4">Let </font><font size="5"><i>T</i>(<i>n</i>)</font><font size="4"> denotes the average time required to sort an array of </font><font size="5">n</font><font size="4"> elements. A call to RANDOMIZED_QUICKSORT with a 1 element array takes a constant time, so we have </font><font size="5"><i>T</i>(1) =&nbsp; </font> <font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(1)</font><font size="4">.</font></p> 
    <p><font size="4">After the split RANDOMIZED_QUICKSORT calls itself to sort two subarrays. The average time to sort an array </font><font size="5"><i>A</i>[1 . . <i>q</i>]</font><font size="4"> is </font><font size="5"><i>T</i>[<i>q</i>]</font><font size="4"> and the average time to sort an array </font><font size="5"><i>A</i>[<i>q</i>+1 . .<i> n</i>]</font><font size="4"> is </font><font size="5"><i>T</i>[<i>n</i>-<i>q</i>]</font><font size="4">. We have</font></p> 
    <blockquote> 
     <p><i><font size="4">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font size="5">T</font></i><font size="5">(<i>n</i>) = 1<i>/n</i> (<i>T</i>(1) + <i>T</i>(<i>n</i>-1) + <sup><i>n</i>-1</sup>?<sub><i>q</i>=1</sub> <i>T</i>(<i>q</i>) + <i>T</i>(<i>n</i>-<i>q</i>))) + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)&nbsp;&nbsp;&nbsp; ----- 1</font></p> 
    </blockquote> 
    <p><font size="4" color="#FF00FF">We know from worst-case analysis</font></p> 
    <blockquote> 
     <blockquote> 
      <p><i><font size="5">T</font></i><font size="5">(1) =&nbsp; </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(1) and <i>T</i>(<i>n </i>-1) = <i>O</i>(<i>n</i><sup>2</sup>)<br><i>T</i>(<i>n</i>) = 1<i>/n</i> (</font><font size="4"><img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(1) + <i>O</i>(<i>n</i><sup>2</sup>)) + 1/n <sup><i>n</i>-1</sup>?<sub><i>q</i>=1 </sub>(<i>r</i>(<i>q</i>) + <i>T</i>(<i>n </i>-<i> q</i>))<sub> + </sub></font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 1<i>/n</i> <sup><i>&nbsp;n</i>-1</sup>?<sub><i>q</i>=1</sub>(<i>T</i>(<i>q</i>) + <i>T</i>(<i>n </i>-<i> q</i>)) + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ------- 2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 1/<i>n</i>[2<sup><i>&nbsp; n</i>-1</sup>?<sub><i>k</i>=1</sub>(<i>T</i>(<i>k</i>)] + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 2<i>/n</i><sup><i> n</i>-1</sup>?<sub><i>k</i>=1</sub>(<i>T</i>(<i>k</i>) + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--------- 3</font></p> 
     </blockquote> 
    </blockquote> 
    <p><font size="4">Solve the above recurrence using substitution method. Assume inductively that </font><font size="5"><i>T</i>(<i>n</i>) <font face="Times New Roman">? </font><i>an</i>lg<i>n</i> + <i>b</i></font><font size="4"> for some constants </font><font size="5"><i>a </i>&gt; 0</font><font size="4"> and </font><font size="5"><i>b </i>&gt; 0</font><font size="4">.</font></p> 
    <p><font size="4">If we can pick '</font><font size="5">a</font><font size="4">' and '</font><font size="5">b</font><font size="4">' large enough so that </font><font size="5"><i>n </i>lg<i> n</i> + <i>b </i>&gt; T(1)</font><font size="4">. Then for </font><font size="5">n &gt; 1</font><font size="4">, we have</font></p> 
    <blockquote> 
     <blockquote> 
      <p><i><font size="5">T</font></i><font size="5">(<i>n</i>) ?<sup><i> n</i>-1</sup>?<sub><i>k</i>=1 </sub>2/<i>n</i> (<i>ak</i>lg<i>k</i> + <i>b</i>) + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 2<i>a/n</i> <sup><i>n</i>-1</sup>?<sub><i>k</i>=1 </sub><i>k</i>lg<i>k - </i><font face="Times New Roman">1/8</font>(<i>n</i><sup>2</sup>) +&nbsp; 2b/<i>n </i>(<i>n </i>-1) + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;------- 4</font></p> 
     </blockquote> 
    </blockquote> 
    <p><font size="4">At this point we are <font color="#FF00FF">claiming</font> that </font></p> 
    <blockquote> 
     <blockquote> 
      <p><sup><i><font size="5">n</font></i><font size="5">-1</font></sup><font size="5">?<sub><i>k</i>=1 </sub><i>k</i>lg<i>k&nbsp; ?&nbsp; 1/2 n</i><sup>2 </sup>lg<i>n - </i><font face="Times New Roman">1/8</font>(<i>n</i><sup>2</sup>)</font></p> 
     </blockquote> 
    </blockquote> 
    <p><font size="4">Stick this claim in the equation 4 above and we get </font></p> 
    <blockquote> 
     <blockquote> 
      <p><i><font size="5">T</font></i><font size="5">(<i>n</i>) <i>&nbsp;?&nbsp; </i>&nbsp;2<i>a</i>/<i>n </i>[1/2 <i>n</i><sup>2&nbsp; </sup>lg<i>n </i>- <font face="Times New Roman">1/8</font>(<i>n</i><sup>2</sup>)] + 2<i>/n b</i>(<i>n </i>-1) + </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)<br> <i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ?&nbsp; an</i>lg<i>n </i>-<i> an/</i>4 + 2<i>b + </i></font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;---------- 5</font></p> 
     </blockquote> 
    </blockquote> 
    <p><font size="4">In the above equation, we see that </font> <font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>) + <i>b</i></font><font size="4"> and </font><font size="5"><i>an/</i>4</font><font size="4"> are polynomials and we certainly can choose '</font><font size="5">a</font><font size="4">' large enough so that </font><font size="5"><i>an</i>/4</font><font size="4"> dominates </font><font size="4"> <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i>)&nbsp; + <i>b</i></font><font size="4">.</font></p> 
    <p><font size="4">We <font color="#FF00FF">conclude</font> that QUICKSORT's average running time is <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i> lg<i>(n)</i>)</font><font size="4">.</font></p> 
   </blockquote> 
  </blockquote> 
  <p>&nbsp;</p> 
  <p>&nbsp;</p> 
  <p><b><font size="5" color="#CC0000">Conclusion</font></b></p> 
  <p><font size="4">Quick sort is an <font color="#FF00FF">in place</font> sorting algorithm whose worst-case running time is <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n<sup>2</sup></i>)</font><font size="4"> and expected running time is <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i> lg<i> n</i>)</font><font size="4"> where constants hidden in <img border="0" src="../MathSymbols/thetaBig.gif" width="15" height="16"></font><font size="5">(<i>n</i> lg<i> n</i>)</font><font size="4"> are small.</font></p> 
  <h3>&nbsp;</h3> 
  <h3>&nbsp;</h3> 
  <h3><font color="#CC0000" size="5">Implementation</font></h3> 
  <blockquote> 
   <pre><b><font size="4">void</font></b><font size="4"> quickSort(<b>int</b> numbers[], <b>int</b> array_size)
{
  q_sort(numbers, 0, array_size - 1);
}


<b>void</b> q_sort(<b>int</b> numbers[], <b>int</b> left, <b>int</b> right)
{
  <b>int</b> pivot, l_hold, r_hold;

  l_hold = left;
  r_hold = right;
  pivot = numbers[left];
  <b>while</b> (left &lt; right)
  {
    <b>while</b> ((numbers[right] &gt;= pivot) &amp;&amp; (left &lt; right))
      right--;
    <b>if</b> (left != right)
    {
      numbers[left] = numbers[right];
      left++;
    }
    <b>while</b> ((numbers[left] &lt;= pivot) &amp;&amp; (left &lt; right))
      left++;
    <b>if</b> (left != right)
    {
      numbers[right] = numbers[left];
      right--;
    }
  }
  numbers[left] = pivot;
  pivot = left;
  left = l_hold;
  right = r_hold;
  <b>if</b> (left &lt; pivot)
    q_sort(numbers, left, pivot-1);
  <b>if</b> (right &gt; pivot)
    q_sort(numbers, pivot+1, right);
}
</font></pre> 
  </blockquote> 
  <li><font size="+1"> <a href="http://www.cs.brockport.edu/cs/java/apps/sorters/quicksort.html" target="_blank"> Quick Sort </a></font></li> 
  <li><font size="+1"> <a href="http://www.cs.brockport.edu/cs/java/apps/sorters/quicksortaniminp.html" target="_blank"> Quick Sort (with User Input) </a></font><font size="4"></font></li>
  <font size="4"> </font> 
  <p> </p>
  <center>
   &nbsp;
   <p><font size="4"><img SRC="../../../Maingif/redline.gif" height="2" width="640"> </font> </p> 
   <p> <a href="../../algorithm.html"> <font size="4"> <img src="../../../Maingif/back.gif" border="0" height="47" width="49"></font></a></p> 
  </center>  
 </body>
</html>