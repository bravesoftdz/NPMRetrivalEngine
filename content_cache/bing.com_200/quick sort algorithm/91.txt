<html>
 <head> 
  <title>Searching and Sorting</title> 
 </head> 
 <body>
  <p><a name="top"> </a></p>
  <h1><a name="top">Searching and Sorting</a></h1> 
  <hr> 
  <h2>Contents</h2> 
  <ul> 
   <li><a href="#search">Searching</a> 
    <ul> 
     <li><a href="#seq">Sequential Search</a> </li>
     <li><a href="#bin">Binary Search</a> 
      <ul> 
       <li> <a href="#youtry1">Test Yourself #1</a> </li>
      </ul> </li>
    </ul> </li>
   <li><a href="#sort">Sorting</a> 
    <ul> 
     <li><a href="#select">Selection Sort</a> 
      <ul> 
       <li> <a href="#youtry2">Test Yourself #2</a> </li>
      </ul> </li>
     <li><a href="#insert">Insertion Sort</a> 
      <ul> 
       <li> <a href="#youtry3">Test Yourself #3</a> </li>
      </ul> </li>
     <li><a href="#merge">Merge Sort</a> 
      <ul> 
       <li> <a href="#youtry4">Test Yourself #4</a> </li>
       <li> <a href="#youtry5">Test Yourself #5</a> </li>
      </ul> </li>
     <li><a href="#quick">Quick Sort</a> 
      <ul> 
       <li> <a href="#youtry6">Test Yourself #6</a> </li>
      </ul> </li>
     <li><a href="#summ">Sorting Summary</a> </li>
    </ul> </li>
   <li> <a href="SORTINGAnswers.html#answers">Answers to Self-Study Questions</a> </li>
  </ul> 
  <p> <a name="search"> </a></p>
  <h1><a name="search">Searching</a></h1>
  <a name="search"> <p> Consider searching for a given value <b>v</b> in an array of size N. There are 2 basic approaches: <b>sequential search</b> and <b>binary search</b>. </p></a>
  <p><a name="search"> </a><a name="seq"> </a></p>
  <h2><a name="seq">Sequential Search</a></h2>
  <a name="seq"> <p> Sequential search involves looking at each value in turn (i.e., start with the value in array[0], then array[1], etc). The algorithm quits and returns true if the current value is v; it quits and returns false if it has looked at all of the values in the array without finding v. Here's the code: </p>
   <ul> 
    <pre>
public static boolean sequentialSearch(Object[] A, Object v) {
    for (int k = 0; k &lt; A.length; k++) {
        if (A[k].equals(v)) return true;
    }
    return false;
}
</pre> 
   </ul> <p> If the values are in <b>sorted</b> order, then the algorithm can sometimes quit and return false without having to look at all of the values in the array: v is not in the array if the current value is <b>greater</b> than v. Here's the code for this version: </p>
   <ul> 
    <pre>
public static boolean sortedSequentialSearch(Comparable[] A, Comparable v) {
// precondition: A is sorted (in ascending order)
    for (int k = 0; k &lt; A.length; k++) {
        if (A[k].equals(v)) return true;
	if (A[k].compareTo(v) &gt; 0) return false;
    }
    return false;
}
</pre> 
   </ul> <p> The worst-case time for a sequential search is always O(N). </p></a>
  <p><a name="seq"> </a><a name="bin"> </a></p>
  <h2><a name="bin">Binary Search</a></h2>
  <a name="bin"> <p> </p><p> When the values are in sorted order, a better approach than the one given above is to use <b>binary search</b>. The algorithm for binary search starts by looking at the middle item x. If x is equal to v, it quits and returns true. Otherwise, it uses the relative ordering of x and v to eliminate half of the array (if v is less than x, then it can't be stored to the right of x in the array; similarly, if it is greater than x, it can't be stored to the left of x). Once half of the array has been eliminated, the algorithm starts again by looking at the middle item in the remaining half. It quits when it finds v or when the entire array has been eliminated. </p><p> Here's the code for binary search: </p>
   <ul> 
    <pre>
public static boolean binarySearch(Comparable[] A, Comparable v) {
// precondition: A is sorted (in ascending order)
    return binarySearchAux(A, 0, A.length - 1, v);
}

private static boolean binarySearchAux(Comparable[] A, int low, int high, int v) {
// precondition: A is sorted (in ascending order)
// postcondition: return true iff v is in an element of A in the range
//                A[low] to A[high]
    if (low &gt; high) return false;
    int middle = (low + high) / 2;
    if (A[middle].equals(v)) return true;
    if (v.compareTo(A[middle]) &lt; 0) {
        // recursively search the left part of the array
        return binarySearchAux(A, low, middle-1, v);
    }
    else {
        // recursively search the right part of the array
        return binarySearchAux(A, middle+1, high, v);
    }
}

</pre> 
   </ul> <p> The worst-case time for binary search is proportional to log<sub>2</sub> N: the number of times N can be divided in half before there is nothing left. Using big-O notation, this is O(log N). Note that binary search in an array is basically the same as doing a lookup in a perfectly balanced binary-search tree (the root of a balanced BST is the middle value). In both cases, if the current value is not the one we're looking for, we can eliminate half of the remaining values. </p></a>
  <p><a name="bin"> </a><a name="youtry1"> </a></p>
  <hr>
  <a name="youtry1"> 
   <center> 
    <u><b>TEST YOURSELF #1</b></u> 
   </center></a> 
  <p> Why isn't it a good idea to use binary search to find a value in a sorted <b>linked list</b> of values? </p>
  <p> <a href="SORTINGAnswers.html#ans1">solution</a> </p>
  <hr> 
  <a name="sort"> <h1>Sorting</h1> <p> Consider sorting the values in an array A of size N. Most sorting algorithms involve what are called <b>comparison sorts</b>; i.e., they work by comparing values. Comparison sorts can never have a worst-case running time less than O(N log N). Simple comparison sorts are usually O(N<sup>2</sup>); the more clever ones are O(N log N). </p><p> Three interesting issues to consider when thinking about different sorting algorithms are: </p>
   <ul> 
    <li> Does an algorithm always take its worst-case time? </li>
    <li> What happens on an already-sorted array? </li>
    <li> How much space (other than the space for the array itself) is required? </li>
   </ul> <p> We will discuss four comparison-sort algorithms: </p>
   <ol> 
    <li> selection sort </li>
    <li> insertion sort </li>
    <li> merge sort </li>
    <li> quick sort </li>
   </ol> Selection sort and insertion sort have worst-case time O(N<sup>2</sup>). Quick sort is also O(N<sup>2</sup>) in the worst case, but its expected time is O(N log N). Merge sort is O(N log N) in the worst case. </a>
  <p><a name="sort"> </a><a name="select"> </a></p>
  <h2><a name="select">Selection Sort</a></h2>
  <a name="select"> <p> The idea behind selection sort is: </p>
   <ol> 
    <li> Find the smallest value in A; put it in A[0]. </li>
    <li> Find the second smallest value in A; put it in A[1]. </li>
    <li> etc. </li>
   </ol> The approach is as follows: 
   <ul> 
    <li> Use an outer loop from 0 to N-1 (the loop index, k, tells which position in A to fill next). </li>
    <li> Each time around, use a nested loop (from k+1 to N-1) to find the smallest value (and its index) in the unsorted part of the array. </li>
    <li> Swap that value with A[k]. </li>
   </ul> Note that after i iterations, A[0] through A[i-1] contain their final values (so after N iterations, A[0] through A[N-1] contain their final values and we're done!) <p> Here's the code for selection sort: </p>
   <ul> 
    <pre>
public static void selectionSort(Comparable[] A) {
  int j, k, minIndex;
  Comparable min;
  int N = A.length;

  for (k = 0; k &lt; N; k++) {
     min = A[k];
     minIndex = k;
     for (j = k+1; j &lt; N; j++) {
        if (A[j].compareTo(min) &lt; 0) {
	    min = A[j];
	    minIndex = j;
	}
     }
     A[minIndex] = A[k];
     A[k] = min;
  }
}
</pre> 
   </ul> <p> And here's a picture illustrating how selection sort works: </p><p><img SRC="SORTING-FIGURES/selection.gif" WIDTH="294" HEIGHT="363"> </p><p> What is the time complexity of selection sort? Note that the inner loop executes a different number of times each time around the outer loop, so we can't just multiply N * (time for inner loop). However, we can notice that: </p>
   <ul> 
    <li> 1st iteration of outer loop: inner executes N - 1 times </li>
    <li> 2nd iteration of outer loop: inner executes N - 2 times </li>
    <li> ... </li>
    <li> Nth iteration of outer loop: inner executes 0 times </li>
   </ul> This is our old favorite sum: 
   <ul>
     N-1 + N-2 + ... + 3 + 2 + 1 + 0 
   </ul> which we know is O(N<sup>2</sup>). <p> What if the array is already sorted when selection sort is called? It is still O(N<sup>2</sup>); the two loops still execute the same number of times, regardless of whether the array is sorted or not. </p></a>
  <p><a name="select"> </a><a name="youtry2"> </a></p>
  <hr>
  <a name="youtry2"> 
   <center> 
    <u><b>TEST YOURSELF #2</b></u> 
   </center></a> 
  <p> It is not necessary for the outer loop to go all the way from 0 to N-1. Describe a small change to the code that avoids a small amount of unnecessary work. </p>
  <p> Where else might unnecessary work be done using the current code? (Hint: think about what happens when the array is already sorted initially.) How could the code be changed to avoid that unnecessary work? Is it a good idea to make that change? </p>
  <p> <a href="SORTINGAnswers.html#ans2">solution</a> </p>
  <hr> 
  <p> <a name="insert"> </a></p>
  <h2><a name="insert">Insertion Sort</a></h2>
  <a name="insert"> <p> The idea behind insertion sort is: </p>
   <ol> 
    <li> Put the first 2 items in correct relative order. </li>
    <li> Insert the 3rd item in the correct place relative to the first 2. </li>
    <li> Insert the 4th item in the correct place relative to the first 3. </li>
    <li> etc. </li>
   </ol> As for selection sort, a nested loop is used; however, a different invariant holds: after the ith time around the outer loop, the items in A[0] through A[i-1] are in order relative to each other (but are not necessarily in their final places). Also, note that in order to insert an item into its place in the (relatively) sorted part of the array, it is necessary to move some values to the right to make room. <p> Here's the code: </p>
   <ul> 
    <pre>
public static void insertionSort(Comparable[] A) {
  int k, j;
  Comparable tmp;
  int N = A.length;
      
  for (k = 1; k &lt; N, k++) {
     tmp = A[k];
     j = k - 1;
     while ((j &gt; = 0) &amp;&amp; (A[j].compareTo(tmp) &gt; 0)) {
         A[j+1] = A[j]; // move one value over one place to the right
         j--;
     }
     A[j + 1] = tmp; // insert kth value in correct place relative to previous
                     // values
  }
}
</pre> 
   </ul> <p> Here's a picture illustrating how insertion sort works on the same array used above for selection sort: </p><p><img SRC="SORTING-FIGURES/insertion.gif" WIDTH="269" HEIGHT="336"> </p><p> What is the time complexity of insertion sort? Again, the inner loop can execute a different number of times for every iteration of the outer loop. In the <b>worst</b> case: </p>
   <ul> 
    <li> 1st iteration of outer loop: inner executes 1 time </li>
    <li> 2nd iteration of outer loop: inner executes 2 times </li>
    <li> 3rd iteration of outer loop: inner executes 3 times </li>
    <li> ... </li>
    <li> N-1st iteration of outer loop: inner executes N-1 times </li>
   </ul> So we get: 
   <ul>
     1 + 2 + ... + N-1 
   </ul> which is still O(N<sup>2</sup>). <p> </p></a>
  <p><a name="insert"> </a><a name="youtry3"> </a></p>
  <hr>
  <a name="youtry3"> 
   <center> 
    <u><b>TEST YOURSELF #3</b></u> 
   </center></a> 
  <p> </p>
  <ol> 
   <li> What is the running time for insertion sort when: 
    <ol> 
     <li> the array is already sorted in ascending order? </li>
     <li> the array is already sorted in descending order? </li>
    </ol> <p> </p></li>
   <li> On each iteration of its outer loop, insertion sort finds the correct place to insert the next item, relative to the ones that are already in sorted order. It does this by searching back through those items, one at a time. Would insertion sort be speeded up if instead it used binary search to find the correct place to insert the next item? </li>
  </ol> 
  <p> <a href="SORTINGAnswers.html#ans3">solution</a> </p>
  <hr> 
  <p> <a name="merge"> </a></p>
  <h2><a name="merge">Merge Sort</a></h2>
  <a name="merge"> <p> As mentioned above, merge sort takes time O(N log N), which is quite a bit better than the two O(N<sup>2</sup>) sorts described above (for example, when N=1,000,000, N<sup>2</sup>=1,000,000,000,000, and N log<sub>2</sub> N = 20,000,000; i.e., N<sup>2</sup> is 50,000 times larger than N log N!). </p><p> The key insight behind merge sort is that it is possible to <b>merge</b> two sorted arrays, each containing N/2 items to form one sorted array containing N items in time O(N). To do this merge, you just step through the two arrays, always choosing the smaller of the two values to put into the final array (and only advancing in the array from which you took the smaller value). Here's a picture illustrating this merge process: </p><p><img SRC="SORTING-FIGURES/merge.gif" WIDTH="470" HEIGHT="544"> </p><p> Now the question is, how do we get the two sorted arrays of size N/2? The answer is to use recursion; to sort an array of length N: </p>
   <ol> 
    <li> Divide the array into two halves. </li>
    <li> Recursively, sort the left half. </li>
    <li> Recursively, sort the right half. </li>
    <li> Merge the two sorted halves. </li>
   </ol> The base case for the recursion is when the array to be sorted is of length 1 -- then it is already sorted, so there is nothing to do. Note that the merge step (step 4) needs to use an auxiliary array (to avoid overwriting its values). The sorted values are then copied back from the auxiliary array to the original array. <p> An outline of the code for merge sort is given below. It uses an auxiliary method with extra parameters that tell what part of array A each recursive call is responsible for sorting. </p>
   <ul> 
    <pre>
public static void mergeSort(Comparable[] A) {
  mergeAux(A, 0, A.length - 1); // call the aux. function to do all the work
}

private static void mergeAux(Comparable[] A, int low, int high)
{
  // base case
     if (low == high) return;

  // recursive case
  // Step 1: Find the middle of the array (conceptually, divide it in half)
     int mid = (low + high) / 2;
  // Steps 2 and 3: Sort the 2 halves of A
     mergeAux(A, low, mid);
     mergeAux(A, mid+1, high);

  // Step 4: Merge sorted halves into an auxiliary array
     Comparable[] tmp = new Comparable[high-low+1];
     int left = low;    // index into left half
     int right = mid+1; // index into right half
     int pos = 0;       // index into tmp
     
     while ((left &lt;= mid) &amp;&amp; (right &lt;= high)) {
	// choose the smaller of the two values "pointed to" by left, right
	// copy that value into tmp[pos]
	// increment either left or right as appropriate
	// increment pos
	...
     }
     // here when one of the two sorted halves has "run out" of values, but
     // there are still some in the other half; copy all the remaining values
     // to tmp
     // Note: only 1 of the next 2 loops will actually execute
       while (left &lt;= mid) { ... }
       while (right &lt;= high) { ... }

     // all values are in tmp; copy them back into A
       arraycopy(tmp, 0, A, low, tmp.length);
}
</pre> 
   </ul> </a>
  <p><a name="merge"> </a><a name="youtry4"> </a></p>
  <hr>
  <a name="youtry4"> 
   <center> 
    <u><b>TEST YOURSELF #4</b></u> 
   </center></a> 
  <p> Fill in the missing code in the mergeSort method. </p>
  <p> <a href="SORTINGAnswers.html#ans4">solution</a> </p>
  <hr> 
  <p> Algorithms like merge sort -- that work by dividing the problem in two, solving the smaller versions, and then combining the solutions -- are called <b>divide and conquer</b> algorithms. Below is a picture illustrating the divide-and-conquer aspect of merge sort using a new example array. The picture shows the problem being divided up into smaller and smaller pieces (first an array of size 8, then two halves each of size 4, etc). Then it shows the "combine" steps: the solved problems of half size are merged to form solutions to the larger problem. (Note that the picture illustrates the conceptual ideas -- in an actual execution, the small problems would be solved one after the other, not in parallel. Also, the picture doesn't illustrate the use of auxiliary arrays during the merge steps.) </p>
  <p><img SRC="SORTING-FIGURES/mergeSteps.gif" WIDTH="404" HEIGHT="353"> </p>
  <p> To determine the time for merge sort, it is helpful to visualize the calls made to mergeAux as shown below (each node represents one call, and is labeled with the size of the array to be sorted by that call): </p>
  <p><img SRC="SORTING-FIGURES/mergeTree.gif" WIDTH="455" HEIGHT="163"> </p>
  <p> The height of this tree is O(log N). The total work done at each "level" of the tree (i.e., the work done by mergeAux excluding the recursive calls) is O(N): </p>
  <ul> 
   <li> Step 1 (finding the middle index) is O(1), and this step is performed once in each call; i.e., a total of once at the top level, twice at the second level, etc, down to a total of N/2 times at the second-to-last level (it is not performed at all at the very last level, because there the base case applies, and mergeAux just returns). So for any one level, the total amount of work for Step 1 is at most O(N). <p> </p></li>
   <li> For each individual call, Step 4 (merging the sorted half-graphs) takes time proportional to the size of the part of the array to be sorted by that call. So for a whole level, the time is proportional to the sum of the sizes at that level. This sum is always N. </li>
  </ul> Therefore, the time for merge sort involves O(N) work done at each "level" of the tree that represents the recursive calls. Since there are O(log N) levels, the total worst-case time is O(N log N). 
  <p> <a name="youtry5"> </a></p>
  <hr>
  <a name="youtry5"> 
   <center> 
    <u><b>TEST YOURSELF #5</b></u> 
   </center></a> 
  <p> What happens when the array is already sorted (what is the running time for merge sort in that case)? </p>
  <p> <a href="SORTINGAnswers.html#ans5">solution</a> </p>
  <hr> 
  <p> <a name="quick"> </a></p>
  <h2><a name="quick">Quick Sort</a></h2>
  <a name="quick"> <p> Quick sort (like merge sort) is a divide and conquer algorithm: it works by creating two problems of half size, solving them recursively, then combining the solutions to the small problems to get a solution to the original problem. However, quick sort does more work than merge sort in the "divide" part, and is thus able to avoid doing any work at all in the "combine" part! </p><p> The idea is to start by <b>partitioning</b> the array: putting all small values in the left half and putting all large values in the right half. Then the two halves are (recursively) sorted. Once that's done, there's no need for a "combine" step: the whole array will be sorted! Here's a picture that illustrates these ideas: </p><p><img SRC="SORTING-FIGURES/quick.gif" WIDTH="366" HEIGHT="174"> </p><p> The key question is how to do the partitioning? Ideally, we'd like to put exactly half of the values in the left part of the array, and the other half in the right part; i.e., we'd like to put all values less than the <b>median</b> value in the left and all values greater than the median value in the right. However, that requires first computing the median value (which is too expensive). Instead, we pick one value to be the <b>pivot</b>, and we put all values less than the pivot to its left, and all values greater than the pivot to its right (the pivot itself is then in its final place). </p><p> Here's the algorithm outline: </p>
   <ol> 
    <li> Choose a pivot value. </li>
    <li> Partition the array (put all value less than the pivot in the left part of the array, then the pivot itself, then all values greater than the pivot). </li>
    <li> Recursively, sort the values less than the pivot. </li>
    <li> Recursively, sort the values greater than the pivot. </li>
   </ol> Note that, as for merge sort, we need an auxiliary method with two extra parameters -- low and high indexes to indicate which part of the array to sort. Also, although we could "recurse" all the way down to a single item, in practice, it is better to switch to a sort like insertion sort when the number of items to be sorted is small (e.g., 20). <p> Now let's consider how to choose the pivot item. (Our goal is to choose it so that the "left part" and "right part" of the array have about the same number of items -- otherwise we'll get a bad runtime). </p><p> An easy thing to do is to use the first value -- A[low] -- as the pivot. However, if A is already sorted this will lead to the worst possible runtime, as illustrated below: </p><p><img SRC="SORTING-FIGURES/pivot.gif" WIDTH="283" HEIGHT="170"> </p><p> In this case, after partitioning, the left part of the array is empty, and the right part contains all values except the pivot. This will cause O(N) recursive calls to be made (to sort from 0 to N-1, then from 1 to N-1, then from 2 to N-1, etc). Therefore, the total time will be O(N<sup>2</sup>). </p><p> Another option is to use a random-number generator to choose a random item as the pivot. This is OK if you have a good, fast random-number generator. </p><p> A simple and effective technique is the "median-of-three": choose the median of the values in A[low], A[high], and A[(low+high)/2]. Note that this requires that there be at least 3 items in the array, which is consistent with the note above about using insertion sort when the piece of the array to be sorted gets small. </p><p> Once we've chosen the pivot, we need to do the partitioning. (The following assumes that the size of the piece of the array to be sorted is at least 3.) The basic idea is to use two "pointers" (indexes) left and right. They start at opposite ends of the array and move toward each other until left "points" to an item that is greater than the pivot (so it doesn't belong in the left part of the array) and right "points" to an item that is smaller than the pivot. Those two "out-of-place" items are swapped, and we repeat this process until left and right cross: </p>
   <ol> 
    <li> Choose the pivot (using the "median-of-three" technique); also, put the smallest of the 3 values in A[low], put the largest of the 3 values in A[high], and put the pivot in A[high-1]. (Putting the smallest value in A[low] prevents "right" from falling off the end of the array in the following steps.) </li>
    <li> Initialize: left = low+1; right = high-2 </li>
    <li> Use a loop with the condition: 
     <ul>
       while (left &lt;= right) 
     </ul> The loop invariant is: 
     <ul>
       all items in A[low] to A[left-1] are &lt;= the pivot 
      <br> all items in A[right+1] to A[high] are &gt;= the pivot 
     </ul> Each time around the loop: 
     <ul>
       left is incremented until it "points" to a value &gt; the pivot 
      <br> right is decremented until it "points" to a value &lt; the pivot 
      <br> if left and right have not crossed each other, 
      <br> then swap the items they "point" to. 
     </ul> </li>
    <li> Put the pivot into its final place. </li>
   </ol> Here's the actual code for the partitioning step (the reason for returning a value will be clear when we look at the code for quick sort itself): 
   <ul> 
    <pre>
private static int partition(Comparable[] A, int low, int high) {
// precondition: A.length &gt;= 3

    int pivot = medianOfThree(A, low, high); // this does step 1
    int left = low+1; right = high-2;
    while ( left &lt;= right ) {
        while (A[left].compareTo(pivot) &lt; 0) left++;
        while (A[right].compareTo(pivot) &gt; 0) right--;
        if (left &lt;= right) {
            swap(A, left, right);
            left++;
            right--;
        }
    }
    swap(A, left, high-1); // step 4
    return right;
}
</pre> 
   </ul> After partitioning, the pivot is in A[right+1], which is its final place; the final task is to sort the values to the left of the pivot, and to sort the values to the right of the pivot. Here's the code for quick sort (so that we can illustrate the algorithm, we use insertion sort only when the part of the array to be sorted has less than 3 items, rather than when it has less than 20 items): 
   <ul> 
    <pre>
public static void quickSort(Comparable[] A) {
    quickAux(A, 0, A.length-1);
}

private static void quickAux(Comparable[] A, int low, int high) {
    if (high-low &lt; 2) insertionSort(A, low, high);
    else {
        int right = partition(A, low, high);
	quickAux(A, low, right);
	quickAux(A, right+2, high);
    }
}
</pre> 
   </ul> <p> Note: It is important to handle duplicate values efficiently. In particular, it is not a good idea to put all values strictly less than the pivot into the left part of the array, and all values greater than or equal to the pivot into the right part of the array. The code given above for partitioning handles duplicates correctly at the expense of some "extra" swaps when both left and right are "pointing" to values equal to the pivot. </p><p> Here's a picture illustrating quick sort: </p><p><img SRC="SORTING-FIGURES/quickSteps.gif" WIDTH="456" HEIGHT="712"> </p><p> What is the time for Quick Sort? </p>
   <ul> 
    <li> If the pivot is always the median value, then the calls form a balanced binary tree (like they do for merge sort). </li>
    <li> In the worst case (the pivot is the smallest or largest value) the calls form a "linear" tree. </li>
    <li> In any case, the total work done at each level of the call tree is O(N) for partitioning. </li>
   </ul> So the total time is: 
   <ul> 
    <li> worst-case: O(N<sup>2</sup>) </li>
    <li> in practice: O(N log N) </li>
   </ul> Note that quick sort's worst-case time is worse than merge sort's. However, an advantage of quick sort is that it does not require extra storage, as merge sort does. </a>
  <p><a name="quick"> </a><a name="youtry6"> </a></p>
  <hr>
  <a name="youtry6"> 
   <center> 
    <u><b>TEST YOURSELF #6</b></u> 
   </center></a> 
  <p> What happens when the array is already sorted (what is the running time for quick sort in that case, assuming that the "median-of-three" method is used to choose the pivot)? </p>
  <p> <a href="SORTINGAnswers.html#ans6">solution</a> </p>
  <hr> 
  <p> <a name="summ"> </a></p>
  <h2><a name="summ">Sorting Summary</a></h2>
  <a name="summ"> <p> </p>
   <ul> 
    <li> Selection Sort: 
     <ul> 
      <li> N passes <br> on pass k: find the kth smallest item, put it in its final place </li>
      <li> always O(N<sup>2</sup>) </li>
     </ul> <p> </p></li>
    <li> Insertion Sort: 
     <ul> 
      <li> N passes <br> on pass k: insert the kth item into its proper position relative to the items to its left </li>
      <li> worst-case O(N<sup>2</sup>) </li>
      <li> given an already-sorted array: O(N) </li>
     </ul> <p> </p></li>
    <li> Merge Sort: 
     <ul> 
      <li> recursively sort the first N/2 items <br> recursively sort the last N/2 items <br> merge (using an auxiliary array) </li>
      <li> always O(N log N) </li>
     </ul> <p> </p></li>
    <li> Quick Sort: 
     <ul> 
      <li> choose a pivot value <br> partition the array: 
       <ul>
         left part has items &lt;= pivot 
        <br> right part has items &gt;= pivot 
       </ul> recursively sort the left part <br>recursively sort the right part </li>
      <li> worst-case O(N<sup>2</sup>) </li>
      <li> expected O(N log N) </li>
     </ul> </li>
   </ul> </a>
 </body>
</html>