<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head> 
  <script src="/jslibs/swapstyle.js" type="text/javascript"></script> 
  <script src="/styles/managestyles.js" type="text/javascript"></script> 
  <link rel="shortcut icon" href="/favicon.ico"> 
  <link rel="stylesheet" type="text/css" href="/styles/moosified.css" title="Moosified"> 
  <link rel="alternate stylesheet" type="text/css" href="/styles/nostalgic.css" title="Nostalgic"> 
  <link rel="alternate stylesheet" type="text/css" href="/styles/gentleblue.css" title="Gentle Blue"> 
  <link rel="alternate stylesheet" type="text/css" href="/styles/blueframe.css" title="Blue Frame"> 
  <link rel="alternate" href="/howtocreate.xml" type="application/rss+xml" title="HowToCreate site updates"> 
  <link rel="author" title="Author information" href="/bio.html"> 
  <link rel="copyright" title="Script license and terms of use" href="/jslibs/termsOfUse.html"> 
  <link rel="home" title="How To Create home" href="/"> 
  <link rel="search" title="Search this site" href="/tutorials/"> 
  <link rel="bookmark" href="#content" title="Skip navigation"> 
  <link rel="bookmark" href="#index" title="Navigation"> 
  <link rel="prev" title="Writing with script" href="writing">
  <link rel="next" title="Referencing" href="referencing">
  <link rel="start" title="Important guidelines" href="important">
  <link rel="first" title="Important guidelines" href="important">
  <link rel="last" title="DOM objects and methods" href="domstructure"> 
  <link rel="stylesheet" type="text/css" href="/styles/demostyles.css"> 
  <title>JavaScript tutorial - Writing functions</title> 
 </head> 
 <body> 
  <h1 title="Part 10 of 31">JavaScript tutorial - Writing functions</h1> 
  <!-- DO NOT follow this link - anti spider abuse --> 
  <div style="display:none;speak:none;">
   <a href="/spdrwarn.html" onclick="return false;"></a>
  </div> 
  <div id="index"> 
   <h2 class="accessible">Navigation</h2> 
   <p class="accessible"><a href="#content" title="See inside the CSS file for why I had to do it this way">Skip navigation</a>.</p> 
   <h3>Site search</h3> 
   <form method="get" action="/tutorials/"> 
    <p> <input type="text" name="searchstring" value="" class="searchbybut"> <input type="submit" value="Search" class="searchbut"> <input type="hidden" name="searchIn[javascript]" value="1"> </p> 
   </form> 
   <h3>Site navigation</h3> 
   <ul> 
    <li><a href="/">How To Create home</a></li> 
   </ul>
   <h3>JavaScript tutorial</h3>
   <ul>
    <li><a href="/tutorials/javascript/important">Important guidelines</a></li> 
    <li><a href="/tutorials/javascript/introduction">Introduction to JavaScript</a></li> 
    <li><a href="/tutorials/javascript/examples">Examples</a></li> 
    <li><a href="/tutorials/javascript/incorporate">Adding JavaScript to a page</a></li> 
    <li><a href="/tutorials/javascript/objectoriented">Object oriented programming</a></li> 
    <li><a href="/tutorials/javascript/operators">Operators</a></li> 
    <li><a href="/tutorials/javascript/variables">Variables</a></li> 
    <li><a href="/tutorials/javascript/controls">Control structures</a></li> 
    <li><a href="/tutorials/javascript/writing">Writing with script</a></li> 
    <li class="currentpage"><a href="/tutorials/javascript/functions">Writing functions</a></li> 
    <li><a href="/tutorials/javascript/referencing">Referencing</a></li> 
    <li><a href="/tutorials/javascript/browserinspecific">Browser inspecific referencing</a></li> 
    <li><a href="/tutorials/javascript/browserspecific">Browser specific referencing</a></li> 
    <li><a href="/tutorials/javascript/dhtml">DHTML</a></li> 
    <li><a href="/tutorials/javascript/elementcontents">Element contents</a></li> 
    <li><a href="/tutorials/javascript/browserwindow">Window size and scrolling</a></li> 
    <li><a href="/tutorials/javascript/eventinfo">Event information</a></li> 
    <li><a href="/tutorials/javascript/objects">Creating objects</a></li> 
    <li><a href="/tutorials/javascript/timers">Creating time delays</a></li> 
    <li><a href="/tutorials/javascript/cookies">Using cookies</a></li> 
    <li><a href="/tutorials/javascript/security">Security</a></li> 
    <li><a href="/tutorials/javascript/semicolons">Semicolons</a></li> 
    <li><a href="/tutorials/javascript/javascriptobject">The JavaScript object</a></li> 
    <li><a href="/tutorials/javascript/domintroduction">W3C DOM introduction</a></li> 
    <li><a href="/tutorials/javascript/dombasics">DOM nodes and tree</a></li> 
    <li><a href="/tutorials/javascript/domtables">DOM tables</a></li> 
    <li><a href="/tutorials/javascript/domcss">DOM CSS</a></li> 
    <li><a href="/tutorials/javascript/domstylesheets">DOM Style Sheets</a></li> 
    <li><a href="/tutorials/javascript/domevents">DOM events</a></li> 
    <li><a href="/tutorials/javascript/domstructure">DOM objects and methods</a></li> 
   </ul>
   <h3>Printing</h3>
   <ul>
    <li><a href="/tutorials/javascript/combinedpage">View tutorial as a single document</a></li>
    <li><a href="/aboutsite.html#markupstyle">Print styling information</a></li>
    <li><a href="/aboutsite.html#saveprint">Printing policy</a></li>
   </ul> 
   <h3>Other tutorials</h3>
   <ul>
    <li><a href="/tutorials/css/introduction">CSS tutorial</a></li> 
    <li><a href="/tutorials/html/basics">HTML tutorial</a></li> 
    <li><a href="/tutorials/design/introduction">Site design</a></li> 
   </ul>
  </div> 
  <div id="content"> 
   <h2>Writing functions</h2>
   <h3>General syntax</h3> 
   <ul class="browserbugs"> 
    <li>Pre-alpha versions of Tkhtml Hv3 do not correctly interpret the Function class constructor.</li> 
   </ul> 
   <p>Functions group together script code; control structures, operations, method calls, etc. in the same way as a normal script. These functions can then be called when needed, and the code contained within them will be run. This makes it very easy to reuse code without having to repeat it within your script.</p> 
   <p>Functions are defined using one of these constructs:</p> 
   <dl> 
    <dt>
     Normal function construct
    </dt> 
    <dd>
     <pre><code>function nameOfFunction(listOfVariableNames) {
  function code should be written here
}</code></pre>
    </dd> 
    <dt>
     Anonymous function, assigned to a variable
    </dt> 
    <dd>
     Using this syntax for object methods in early Netscape 4 versions will cause problems with the 'this' keyword due to bugs. 
     <pre><code>nameOfFunction = function (listOfVariableNames) {
  function code should be written here
};</code></pre>
    </dd> 
    <dt>
     Normal function construct, assigned to a variable
    </dt> 
    <dd>
     <pre><code>nameOfFunction = function anotherNameForTheFunction(listOfVariableNames) {
  function code should be written here
};</code></pre> 
     <p>Note that in this particular case, because the function is being assigned, and not defined normally, the name <var>anotherNameForTheFunction</var> can be used by the code inside the function to refer to the function itself, but the code outside the function cannot see it at all (note that some browsers, mainly Internet Explorer, do not implement this correctly, so you should not rely on it - it is better to use <var>arguments.callee</var> as shown below).</p>
    </dd> 
    <dt>
     The Function class constructor
    </dt> 
    <dd>
     <pre><code>functionName = new Function("function code should be written here");</code></pre> 
     <p>This construct evaluates the code as a string, and is much slower than assigning anonymous functions. It should only be used in places where it is actually needed.</p>
    </dd> 
    <dt>
     The Function class constructor with parameters
    </dt> 
    <dd>
     <pre><code>functionName = new Function("varName","varName2","etc.","function code");</code></pre>
    </dd> 
   </dl> 
   <p>See the section on '<a href="referencing">Referencing</a>' subsection '<a href="objectoriented#refcon">Avoiding referencing conflicts</a>' to see how to choose names for your functions.</p> 
   <p>Functions are called using one of these:</p> 
   <ul> 
    <li><code>nameOfFunction(listOfVariables);</code></li> 
    <li><code>window.nameOfFunction(listOfVariables);</code></li> 
    <li><code>object.onEventName = nameOfFunction;</code></li> 
   </ul> 
   <p>When created using the normal function construct, the definition does not have to appear at the start of the script (though it is usually best to do so for the sake of clarity). It can even be defined after the the code that calls it. In most cases, no matter where you choose to define your function, the JavaScript engine will create the function at the start of the current <a href="#varscope">scope</a>.</p> 
   <p id="conditionalfunctions">Note that you should never create a function using the normal function construct inside an 'if' statement (or any equivalent control structure):</p> 
   <pre><code><del>if( someCondition ) { function functionName() { ...this will not work in most browsers... } }</del></code></pre> 
   <p>This is permitted by Mozilla's JavaScript 1.5, but this conflicts with ECMAScript 3, the core language used by JavaScript 1.5. As a result, Mozilla based browsers allow it, and most others do not (they will always evaluate the function, even if the condition evaluates to false). It is best not to rely on either behaviour, and do not try to declare functions in this way. Declaring functions inside these statements is possible in all current browsers using assigned anonymous functions, and this is the correct way to achieve the desired effect:</p> 
   <pre><code>var functionName;
if( someCondition ) {
  functionName = function () {
    ...
  };
}</code></pre> 
   <h3>Passing variables to functions</h3> 
   <p>Variables passed to a function are known as arguments.</p> 
   <p>When a function is called, the variables or values passed to it in the brackets are assigned to the variable names in the brackets of the function definition.</p> 
   <pre><code>function checkval(passvar) {
  <span class="comment">//if I ran the function using the command "checkval('hello')" //then passvar would take on the value 'hello'</span>
  if( passvar != "" ) {
    document.myform.mytextinput.value = passvar;
  }
}</code></pre> 
   <p>This function, when called, will set the value of a text input to whatever value of passvar was, as long as passvar was not blank.</p> 
   <p>As an example, part of my html will contain this:</p> 
   <pre><code>&lt;input type="button" onClick="checkval('pygmy')"&gt;</code></pre> 
   <p>When the user clicks on the button, the text input's value will change to 'pygmy'.</p> 
   <p>You can pass more than one variable to a function using commas to separate the values:</p> 
   <pre><code>function functionName(variable1,variable2,variable3,etc.) { function code }
functionName(5,6,7,etc.);</code></pre> 
   <p>If not enough variables are passed to fill up all of the variables in the function declaration, then any remaining variables will contain the value <var>undefined</var>. You can pass no variables to a function like this</p> 
   <pre><code>function functionName() { function code }
functionName();</code></pre> 
   <p>If I called that last function using something like this:</p> 
   <pre><code>functionName(1,2,3,myVar,window,'stringy bit')</code></pre> 
   <p>The variables would still be passed to the function but I would only be able to access the variables using the <var>arguments</var> collection (which can also be referenced as <var>referenceToFunction.arguments</var>).</p> 
   <p>You can use the <var>arguments</var> collection to refer to the arguments, even if you did not write the variable name in the function definition, or you can mix it so that some variable names are defined but others are only available using the <var>arguments</var> collection:</p> 
   <pre><code>function functionName(variable1,variable2) {
  window.alert(variable1); <span class="comment">//alerts 5</span>
  window.alert(arguments[0]); <span class="comment">//alerts 5</span>
  window.alert(variable2); <span class="comment">//alerts 6</span>
  window.alert(arguments[1]); <span class="comment">//alerts 6</span>
  window.alert(arguments[2]); <span class="comment">//alerts 7</span>
  window.alert(functionName.arguments[3]); <span class="comment">//alerts 8</span>
}
functionName(5,6,7,8);</code></pre> 
   <p>The <var>arguments</var> collection also has a very useful property; <var>arguments.callee</var>. This is a reference to the function itself, meaning that code running inside an anonymous function can still obtain a reference to the function that is being run. This property is not available in some older browsers.</p> 
   <h3>Using the return statement</h3> 
   <p>The return statement causes a function to stop executing at that point. The code that called the function will still continue to execute.</p> 
   <pre><code>function doWhatever() {
  var apod = Math.pow(3,7);
  return;
  <span class="comment">//the following code will not be executed, //no matter what</span>
  apod *= 34;
  if( 700 * 3 &lt;= apod ) {
    return;
    <span class="comment">//return on its own is more usually //used as part of a conditional</span>
  } else {
    window.alert('The script has made a mistake');
  }
}</code></pre> 
   <p>The following is an example of using the return statement to return a variable from a function:</p> 
   <pre><code>function appendComment(passvar) {
  <span class="comment">//in this case, I have passed a string variable and I return //a string variable. I could return any variable type I want.</span>
  passvar += ' without your help';
  return passvar;
}

var myString = appendComment('I did it');
<span class="comment">//myString is now 'I did it without your help'</span></code></pre> 
   <p>Note that if you need your code to work in older browsers, it is important to make sure that if the return statement is used to return a value, you must ensure that in all cases, the function returns a value, or some Netscape 4 versions will produce errors.</p> 
   <p id="fader">Take, for example, the action of fading. I want to write the same thing repeatedly, slowly fading from one colour to another. Rather than having to calculate this manually, I want to run some script that calculates the fade for me. The script will run nicely as part of a function, where the function returns the next colour at each step, which I can then use. This is useful, because I can then use the same function to produce a variation of the same effect later on, based on different parameters.</p> 
   <pre><code>function fadeColour( fromcol, tocol, fadePortion ) {
  <span class="comment">//in the format fadeColour( 'ff0098', 'fe0934', 0.23 )</span>
  var oF = [], oT = [], oP = [];
  var oH = ['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'];
  <span class="comment">//get the red, green and blue substrings ...</span>
  for( var x = 0; x &lt; 3; x++ ) {
    <span class="comment">//... and convert them from hex into decimal ...</span>
    oF[x] = eval( '0x' + fromcol.substring( 2 * x, ( 2 * x ) + 2 ) );
    oT[x] = eval( '0x' + tocol.substring( 2 * x, ( 2 * x ) + 2 ) );
    <span class="comment">//... add on the required portion of difference between the two ...</span>
    oP[x] = Math.round( oF[x] + ( ( oT[x] - oF[x] ) * fadePortion ) );
    <span class="comment">//... and convert it back into hex ...</span>
    oP[x] = oH[ ( oP[x] - ( oP[x] % 16 ) ) / 16 ] + oH[ oP[x] % 16 ];
  }
  <span class="comment">//... and put them back together again as a colour string</span>
  return '#' + oP.join('');
}

for( var y = 0; y &lt; 10; y++ ) {
  <span class="comment">//in 10 steps, fade the colour - also see the section on writing with script</span>
  document.write( '&lt;span style="color:' + fadeColour( 'd2cbff', '000099', y / 9 ) +
  ';"&gt;Fade!&lt;\/span&gt; ' );
}

for( var y = 0; y &lt; 12; y++ ) {
  <span class="comment">//in 12 steps, fade the colour</span>
  document.write( '&lt;span style="color:' + fadeColour( 'ff0000', '000000', y / 11 ) +
  ';"&gt;Fade!&lt;\/span&gt; ' );
}</code></pre> 
   <script type="text/javascript">

document.write( '<p>' );

function fadeColour( fromcol, tocol, fadePortion ) {
  var oF = [], oT = [], oP = [], oH = ['0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'];
  for( var x = 0; x < 3; x++ ) {
    oF[x] = eval( '0x' + fromcol.substring( 2 * x, ( 2 * x ) + 2 ) );
    oT[x] = eval( '0x' + tocol.substring( 2 * x, ( 2 * x ) + 2 ) );
    oP[x] = Math.round( oF[x] + ( ( oT[x] - oF[x] ) * fadePortion ) );
    oP[x] = oH[ ( oP[x] - ( oP[x] % 16 ) ) / 16 ] + oH[ oP[x] % 16 ];
  }
  return '#' + oP.join('');
}

for( var y = 0; y < 10; y++ ) {
  document.write( '<span style="color:' + fadeColour( 'd2cbff', '000099', y / 9 ) + ';">Fade!<\/span> ' );
}

document.write( '<\/p><p>' );

for( var y = 0; y < 12; y++ ) {
  document.write( '<span style="color:' + fadeColour( 'ff0000', '000000', y / 11 ) + ';">Fade!<\/span> ' );
}

document.write( '<\/p>' );

</script> 
   <p><strong>Warning</strong>, if you are returning a value from a function, do not call the function directly from the <code>&lt;a href=</code> method to activate it, or many browsers will (correctly) create a new page containing the returned value as the page content. You can still use <code>return;</code> on its own. You can only return values if you call the function script from another piece of script (like another function).</p> 
   <p>If you need to call the function using the <code>&lt;a href=</code> method, use the void operator.</p> 
   <p>Note, returning false for many events will cancel the action. As an example, if a user submits a form, returning false will cause the form not to be submitted. The exception is onmouseover, where returning true will stop the mouseover from having any effect (such as with a link, where returning true will stop the link url from being displayed in the status bar).</p> 
   <h3 id="varscope">Variable scope</h3> 
   <p>Variable scope is one of the very useful features of languages like JavaScript, so even though it may seem a little complicated, it is worth taking the time to learn how it works.</p> 
   <p>In a basic script, there may be any number of variables and functions. Take the following example:</p> 
   <pre><code>var a = 1, b = 2, c = 3;
function sample() {
  var d;
  a = 7;
}
sample();
alert(a);</code></pre> 
   <p>The variables <var>a</var>, <var>b</var> and <var>c</var> are not inside any function when they are declared, so they are in a scope called the global scope. They are available anywhere. Code anywhere else in the script, including inside the <var>sample</var> function, has access to them. The <var>sample</var> function is also global, since it is not inside any other functions. If any other piece of code changes the contents of those variables, then every other part of the code now sees the new contents. As a result, the alert here will show '7', since the value held by the global variable is changed when the function is run.</p> 
   <p>Variable <var>d</var> is defined inside the <var>sample</var> function, so it is not global. It is in the local scope of the function. What that means is that only the code inside the function can see it. Code outside the function does not even know it exists. This happens with any function. They have the ability to create their own scopes, and their own local variables, without them interfering with variables located in the global scope. Variable names written in the brackets of the function definition are also created as variables in the local scope (and the same applies to the <var>arguments</var> collection):</p> 
   <pre><code>function sample(myvar) {
  <span class="comment">//myvar is now a variable in the local scope</span>
  alert(myvar);
}
sample('hello');
</code></pre> 
   <p>Now try this modification to the earlier code:</p> 
   <pre><code>var a = 1, b = 2, c = 3;
function sample() {
  var a, d;
  a = 7;
}
sample();
alert(a);</code></pre> 
   <p>Here, the variable <var>a</var> is redefined inside the function. Because it is declared using the <var>var</var> keyword, it becomes a local instance of a variable. Even though it shares the same name as a global variable, the two are completely independent. The changes made to that variable inside the function only affect the local variable, not the global one. As a result, the alert will show '1', and not '7'.</p> 
   <p>Now imagine that the code inside the function wants to reference the global variable <var>'a'</var> instead of the local one. The global scope is special. In JavaScript, the global scope can be referenced using the name <var>'window'</var>. The code inside the function can use <code>window.a</code> to reference the global <var>'a'</var> variable. Incidentally, this is why methods like alert can be called using either <var>alert</var> or <var>window.alert</var>, since these methods are globally available (unless they are overwritten in the current scope, of course).</p> 
   <h4>Nested functions</h4> 
   <p>It is possible to create functions inside other functions. Simply declare another function inside the code of an existing function:</p> 
   <pre><code>var a = 1, b = 2, c = 3;
function sample() {
  var a, d, e;
  function anothersample() {
    var e, f;
  }
  anothersample();
}
sample();</code></pre> 
   <p>In that example, the <var>anothersample</var> function only exists inside the <var>sample</var> function, and it can only be called by the code inside the <var>sample</var> function. Code outside that function does not even know it exists. The scopes are also nested, so the code inside the <var>anothersample</var> function has access to <var>b</var> and <var>c</var> from the global scope, <var>a</var> and <var>d</var> from the <var>sample</var> scope, and then <var>e</var> and <var>f</var> from its own local scope. It can also use <var>window.a</var> to reference the variable <var>a</var> from the global scope.</p> 
   <p>Of course, if you assign a reference to the nested function to a global variable, then the function can be accessed globally through that variable. There is not much point in doing that here, but it becomes very useful when creating object methods (these will be covered in detail in a later chapter).</p> 
   <h4>Scopes have memory</h4> 
   <p>Scopes are actually very clever, since they persist over time. Imagine that the code inside a function creates a local variable. It also creates an event handler function that will be triggered when the user clicks a link:</p> 
   <pre><code>function sample() {
  var a = 20;
  document.links[0].onclick = function () {
    alert(a);
  };
}
sample();</code></pre> 
   <p>The action that calls the event handler (inner) function happens much later, a long time after the script that created it has finished running. However, the variable <var>'a'</var> has survived, so the alert will display the number 20.</p> 
   <h4>Using scope to prevent conflicts</h4> 
   <p>Imagine that you are running a script that uses many global variable and function names. You want to put another script on the same page, but there is a chance that the two scripts will use the same variable names as each other, and may conflict. It is easy to workaround this problem by putting the code from each script inside a function, and running the function. That way, the local scope provided by the function will protect the variables overwriting each other in the global scope. Note that when doing this, it is <em>very</em> important that you remember to declare your variables properly.</p> 
   <p>The easy way to do this without creating a global function is to create an anonymous function, and enclosing it in parenthesis (internally, the engine will then replace that entire construct with the function reference). You can then use the open-close parenthesis to run it immediately. This construct may look a little odd, but it works:</p> 
   <pre><code>(function () {
  <span class="comment">//Put your script code in here</span>
})();</code></pre> 
   <h4>Using nested function scope to preserve instantaneous values</h4> 
   <p>This is an advanced topic that is <a href="../../referencedvariables.html">covered in its own article</a>.</p> 
   <p class="lastmod">Last modified: 4 September 2008</p>
   <ol id="guide">
    <li><a href="writing" title="Writing with script">Previous</a></li>
    <li><a href="referencing" title="Referencing">Next</a></li>
   </ol>
  </div> 
  <address><a href="/aboutsite.html">This site</a> was created by <a href="/sendEmail.php">Mark "Tarquin" Wilton-Jones</a>.</address> 
  <!-- DO NOT follow this link - anti spider abuse --> 
  <div style="display:none;speak:none;">
   <a href="/spdrwarn.html" onclick="return false;">Don't click this link unless you want to be banned from our site.</a>
  </div>  
 </body>
</html>