<html>
 <head> 
  <meta http-equiv="Content-Language" content="en-us"> 
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252"> 
  <title>Mathematics with Java</title> 
 </head> 
 <body bgcolor="#CCFF33"> 
  <p><font face="Verdana"><b><font size="5">Mathematics with Java</font></b><br> </font><font face="Arial"><i><font size="2"> <a href="http://www.mtlsd.org/highschool/">Mt Lebanon HS</a> 2004-5<br> <a href="http://www.kosbie.net/">David Kosbie</a></font></i></font></p> 
  <hr> 
  <ul> 
   <li><font face="Verdana"><a href="#About">About the Course</a></font></li> 
   <li><font face="Verdana"><a href="#Resources">Resources</a></font></li> 
   <li><font face="Verdana"><a href="#Assignments">Weekly Assignments</a></font></li> 
  </ul> 
  <hr> 
  <p><font face="Verdana"><b><a name="About">About the Course:</a></b></font></p> 
  <p><font face="Verdana">"Mathematics with Java" is an unofficial and elective mini-course taught on Wednesday mornings at Mt Lebanon HS.&nbsp; While it is <i>not</i> for-credit and will not show up on student transcripts, some math teachers have elected to give some additional participation points in their math classes for students maintaining a passing grade in this course.&nbsp; To get such credit, students must:&nbsp; (1) attend the weekly Wednesday morning sessions; (2) do 105 minutes of homework for the course each week (that's 15 minutes per day); and (3) pass a few (straightforward) quizzes to demonstrate their understanding of the material.&nbsp; The only pre-requisite is that students must be at least at the Honors Precalculus level in math.</font></p> 
  <p><font face="Verdana"><i>The point of the course is Math, not Java</i>.&nbsp; Thus, in this course, Java is merely a <i>tool</i> we use in order to do math.&nbsp; We think of Java as picking up where a calculator may leave us off, allowing us to solve many interesting problems that are hard to solve with calculators (at least without learning the programming language embedded in them).&nbsp; Students who are interested in learning more about Java may consider other for-credit offerings at Mt Lebanon HS.</font></p> 
  <p><font face="Verdana">Given this focus, and the fact that the course meets once per week without much homework, we will take many shortcuts with our Java studies.&nbsp; Students will not emerge from this course as general Java programmers.&nbsp; They will emerge with some understanding of what Java is and how to use it, and -- hopefully -- some working knowledge on using Java to solve real Math problems that they face in their math and science courses.</font></p> 
  <hr> 
  <p><font face="Verdana"><b><a name="Resources">Resources</a>:</b></font></p> 
  <ul> 
   <li><font face="Verdana"><a href="EmptyProgram.java">EmptyProgram.java</a></font></li>
   <li> <font face="Verdana"> <a href="install-software.htm">Software Installation Procedures</a></font></li>
   <li> <font face="Verdana"><a href="http://java.sun.com/j2se/1.4.2/docs/api/index.html">Java Documentation</a></font></li> 
   <li><font face="Verdana">Online textbooks</font>
    <ul> 
     <li><font face="Verdana"><a href="http://www.ibiblio.org/obp/thinkCSjav/">How to Think Like a Computer Scientist</a><b><br> </b>by Professor Allen B. Downey, Wellesley College</font></li> 
     <li><font face="Verdana"><a href="http://math.hws.edu/javanotes/index.html">Introduction to Programming Using Java, Version 4.0</a><b><br> </b>by Professor David J. Eck, Hobart and William Smith Colleges</font></li> 
    </ul> </li> 
  </ul> 
  <hr> 
  <p><font face="Verdana"><b><a name="Assignments">Assignments</a>:</b></font></p> 
  <table border="1" width="100%"> 
   <tbody>
    <tr> 
     <td bgcolor="#FFFF66"><font face="Verdana"><b><br> Weeks #9-10:&nbsp;&nbsp; Writing Methods<br> </b>&nbsp;&nbsp;&nbsp; date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2-Feb-05 and 9-Feb-05</font><p> <font face="Verdana"> <i>Note #0:&nbsp; we resumed on 2-Feb-05 after a 3-week hiatus (for 1st semester finals).&nbsp; No homework was due.</i></font></p> <p><font face="Verdana"><i>Note #1: Most of this week's problems are fairly easy, but a couple may be a bit more challenging for some of you. Please get an early start on these so that you can bring your questions to class (or ask via email).&nbsp; Please do not leave this until Tuesday night!<br> <br> Note #2: Each problem this week requires that you write a method. To demonstrate that your method works, you should also write a corresponding program that repeatedly calls the method with suitable arguments and prints out the result.</i></font></p> <p><font face="Verdana">#0.&nbsp; Review <a href="MethodsExamples.java">MethodsExamples.java</a>, which we wrote in class today.</font></p> <p><font face="Verdana">#1. Write a method called "max3" that computes the maximum value of THREE integers.<br> <br> #2. Write a method called "min3" that computes the minimum value of THREE integers.<br> <br> #3. Write a method called "median3" that computes the MEDIAN value of THREE integers. Hint: for the case of three numbers, the median is the value that is NOT the maximum NOR the minimum, so add the three values and subtract out the min and max, using the methods you wrote for problems #1 and #2.<br> <br> #4. Write a method called "xor" that takes two boolean values (either true or false) and returns a boolean value which is true if EITHER of the values is true BUT NOT BOTH of them. This is called the "xor" function, or "eXclusive OR" (where we are excluding the case where both values are true).<br> <br> #5. Write a method "isFactor" which takes two integers (k and n) and returns true iff ("if and only if") k is a factor of n.<br> <br> #6. Write a method "isPerfect" which takes an integer and returns true iff that integer is a perfect number (we learned about perfect numbers on an earlier assignment). Your method MUST call the "isFactor" method you wrote for problem #5.<br> <br> #7. Write a method "isPrime" which takes an integer and returns true iff it is a prime number. Your method MUST call the "isFactor" method you wrote for problem #5.<br> <br> #8. Write a method "nthPrime" which takes a positive integer "n" and returns the nth prime number, where 2 is the 1st prime number. So:<br> &nbsp;&nbsp;&nbsp;&nbsp; nthPrime(1) returns 2<br> &nbsp;&nbsp;&nbsp;&nbsp; nthPrime(2) returns 3<br> &nbsp;&nbsp;&nbsp;&nbsp; nthPrime(3) returns 5<br> &nbsp;&nbsp;&nbsp;&nbsp; nthPrime(4) returns 7<br> &nbsp;&nbsp;&nbsp;&nbsp; ...<br> Your method MUST call the "isPrime" method you wrote for problem #7.<br> <br> #9. Write a method "rollDie" which takes a positive integer "s", the number of sides a die, and returns a random number in [1,s], which represents the results of one roll of an s-sided die.<br> <br> #10. Write a method "rollDice" which takes a positive integer "s" and a positive integer "n" and returns the sum of rolling an s-sided die "n" times. This method MUST call the "rollDie" method you wrote for problem #9.<br> <br> #11. Write a method "rollOdds" which takes a positive integer "s", another positive integer "n", and a third positive integer "sum", and returns a double in the range [0.0,1.0] which represents the probability of obtaining the given sum when rolling an s-sided die "n" times. As you guessed, this method MUST call the "rollDice" method you wrote for problem #10 (that is, I want you to solve this with Monte Carlo methods and not by xact math). Actually, you'll have to call it many, many times (say, at least 1 million), and count how many times the sum was the desired sum, and use this value to compute your estimate of the resulting probability.&nbsp; As an example, to get a 7 on two rolls of a 6-sided die you need 1+6, 2+5, 3+4, 4+3, 5+2, or 6+1, which is 6 out of 36 possible rolls, so the odds are 6/36 or 0.1666... Thus, rollOdds(6,2,7) should return 0.166666....<br> &nbsp;</font></p></td> 
    </tr> 
    <tr> 
     <td><font face="Verdana"><b><br> Week #8:&nbsp;&nbsp; Math.random()<br> </b>&nbsp;&nbsp;&nbsp; date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 5-Jan-05</font><p> <font face="Verdana"><i>Note:&nbsp; This assignment is due on 12-Jan-05, and we will meet that morning as usual.&nbsp; However, there will be no homework assigned then, and we will not meet for the following 2 weeks.&nbsp; This will allow everyone to focus on their final projects and final exams.</i></font></p> 
      <ol> 
       <li><font face="Verdana">Write a program, <b>CoinFlips.java</b>, which repeatedly reads in a non-negative integer n (exiting only when a negative integer is entered) and simulates flipping a coin n times, printing out an "H" for each Heads and a "T" for each tails.&nbsp; After the n flips, you should print out the total number of heads and tails and the percentage of heads and tails.&nbsp; Confirm that as the sample size (number of coin flips) gets larger, our observed probability (say, of a coin toss turning up heads) approaches our expected probability (50% in this case).<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>FindingE.java</b>, which which repeatedly reads in a non-negative integer n (exiting only when a negative integer is entered) and then considers n random numbers in [0,1) (that is, it makes n calls to Math.random()).&nbsp; For this problem, let us call a sequence of numbers a <i>run</i> if the numbers are <i>increasing</i> except for the last number of the run which is smaller than the second-to-last number.&nbsp; Thus, each of the following are runs:<br> &nbsp;&nbsp;&nbsp;&nbsp; 0.3, 0.5, 0.9, 0.2&nbsp; (run of length 4)<br> &nbsp;&nbsp;&nbsp;&nbsp; 0.2, 0.1&nbsp; (run of length 2)<br> &nbsp;&nbsp;&nbsp;&nbsp; 0.7, 0.72, 0.8, 0.99, 0.0 (run of length 5)<br> It should be clear that the minimum possible length of a run is 2 (right?).&nbsp; Now, among your "n" random numbers, you should compute how many runs there are ("runs") and the average run length, which is almost exactly&nbsp; "n / runs" (extra credit:&nbsp; why is it not <i>exactly</i> this value?).&nbsp; For example, say that n=10 and your 10 random numbers are:<br> &nbsp;&nbsp;&nbsp;&nbsp; 0.2&nbsp; 0.7&nbsp; 0.3&nbsp; 0.5&nbsp; 0.1&nbsp; 0.3&nbsp; 0.4&nbsp; 0.9&nbsp; 0.6&nbsp; 0.1<br> The first run is:<br> &nbsp;&nbsp;&nbsp;&nbsp; <b><u>0.2&nbsp; 0.7&nbsp; 0.3</u></b>&nbsp; 0.5&nbsp; 0.1&nbsp; 0.3&nbsp; 0.4&nbsp; 0.9&nbsp; 0.6&nbsp; 0.1<br> The second run is:<br> &nbsp;&nbsp;&nbsp;&nbsp; 0.2&nbsp; 0.7&nbsp; 0.3&nbsp; <u><b>0.5&nbsp; 0.1</b></u>&nbsp; 0.3&nbsp; 0.4&nbsp; 0.9&nbsp; 0.6&nbsp; 0.1<br> The third run is:<br> &nbsp;&nbsp;&nbsp;&nbsp; 0.2&nbsp; 0.7&nbsp; 0.3&nbsp; 0.5&nbsp; 0.1&nbsp; <u> <b>0.3&nbsp; 0.4&nbsp; 0.9&nbsp; 0.6</b></u>&nbsp; 0.1<br> There is no complete fourth run (it starts at 0.1, but the list ends before the run ends).&nbsp; Thus, there are 3 runs, and the average run length is approximately 10/3 = 3.33333...<br> <br> Your program should print out "n", the total number of runs, and the ratio "n/runs".<br> <br> The fascinating thing is that, as "n" gets large (perhaps very large), the value "n/runs" will approach the mystical value of <i>e</i> (2.71828183...) -- confirm this is true for your program!&nbsp; Amazing!<br> &nbsp;</font></li> 
       <li><font face="Verdana">Here, you should write <b>FindingEAgain.java</b>, which is similar to the previous problem, only this time we define a <i>run</i> as a sequence of numbers whose <i>sum exceeds 1</i> (so you keep adding numbers to the run until their sum exceeds 1).&nbsp; Thus, using the same example from above, we see we get different runs.&nbsp; The 10 numbers are:<br> &nbsp;&nbsp;&nbsp;&nbsp; 0.2&nbsp; 0.7&nbsp; 0.3&nbsp; 0.5&nbsp; 0.1&nbsp; 0.3&nbsp; 0.4&nbsp; 0.9&nbsp; 0.6&nbsp; 0.1<br> The first run is:<br> &nbsp;&nbsp;&nbsp;&nbsp; <b><u>0.2&nbsp; 0.7&nbsp; 0.3</u></b>&nbsp; 0.5&nbsp; 0.1&nbsp; 0.3&nbsp; 0.4&nbsp; 0.9&nbsp; 0.6&nbsp; 0.1<br> The second run is:<br> &nbsp;&nbsp;&nbsp;&nbsp; 0.2&nbsp; 0.7&nbsp; 0.3&nbsp; <u><b>0.5&nbsp; 0.1&nbsp; 0.3&nbsp; 0.4</b></u>&nbsp; 0.9&nbsp; 0.6&nbsp; 0.1<br> The third run is:<br> &nbsp;&nbsp;&nbsp;&nbsp; 0.2&nbsp; 0.7&nbsp; 0.3&nbsp; 0.5&nbsp; 0.1&nbsp; 0.3&nbsp; 0.4&nbsp; <u><b>0.9&nbsp; 0.6</b></u>&nbsp; 0.1<br> <br> Again, there is no complete fourth run (it starts at 0.1, but the list ends before the run ends).&nbsp; Thus, there are 3 runs, just as before (even though the runs themselves are different), and the average run length is approximately 10/3 = 3.33333...<br> <br> Your program should print out "n", the total number of runs, and the ratio "n/runs".<br> <br> The fascinating thing is that, even with this new definition of runs, as "n" gets large (perhaps very large), the value "n/runs" will approach the mystical value of <i>e</i> (2.71828183...) -- confirm this is true for your program!&nbsp; Incredible!<br> <br> By the way:&nbsp; these problems are inspired by:<br> &nbsp;&nbsp;&nbsp;&nbsp; <a href="http://www.maa.org/pubs/Calc_articles/ma020.pdf"> http://www.maa.org/pubs/Calc_articles/ma020.pdf</a><br> This problem is #2 and the preceding problem is #6 on that page.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program which uses Math.random() to roll a 6-sided die (that is, to choose a random <i>integer</i> in the range [1,6]).&nbsp; You should repeatedly read in an integer n, exiting only when a negative integer is entered, and print out the results of n die rolls (your output will look like:&nbsp; "13264534431...").&nbsp; You should also keep 6 counters, one for each side, and keep a count of how many times each side is rolled.&nbsp; At the end, you should print out your six counts, and you should observe that all six are very near each other (if not, then you have done something wrong!).<br> <br> <i>Hint #1:&nbsp; Since Math.random() returns a value in the range [0,1), what range will 2*Math.random() be in?&nbsp; Answer:&nbsp; [0,2).&nbsp; How about 3*Math.random()?&nbsp; Answer:&nbsp; [0,3).&nbsp; Continue with that line of logic...<br> <br> Hint #2:&nbsp; Math.random() returns doubles, but we need integers here.&nbsp; Remember that you can <u>cast</u> a double into an integer as follows:<br> &nbsp;&nbsp;&nbsp;&nbsp; int x;<br> &nbsp;&nbsp;&nbsp;&nbsp; double d;<br> &nbsp;&nbsp;&nbsp;&nbsp; d&nbsp; = 3.14;<br> &nbsp;&nbsp;&nbsp;&nbsp; x = (int)(d);&nbsp; // here, we cast the double d into an integer<br> When a double is cast into an integer, its decimal part is truncated (deleted).&nbsp; Thus, in this example, x will be assigned the value 3.&nbsp; But you must be careful <u>when</u> you cast.&nbsp; For example, consider the following:<br> &nbsp;&nbsp;&nbsp;&nbsp; x = 2 * ((int)(Math.random());<br> This will <u>always</u> evaluate to 0.&nbsp; Why?&nbsp; Because Math.random() is in [0,1), and this value is immediately cast into an integer, which always evaluates to 0 (think about it), and this 0 is then multiplied by 2.&nbsp; In this case, what was probably desired is more like:<br> &nbsp;&nbsp;&nbsp;&nbsp; x = (int)(2 * Math.random());<br> Here, the result of Math.random() is <u>first</u> multiplied by 2, giving a number in [0,2), and this number is cast to an integer, producing an integer in [0,1] (why not in [0,2]?).</i></font></li> 
      </ol> </td> 
    </tr> 
    <tr> 
     <td bgcolor="#FFFF66"><font face="Verdana"><b><br> Week #7:&nbsp;&nbsp; More "for" loops<br> </b>&nbsp;&nbsp;&nbsp; date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 22-Dec-04</font><p> <font face="Verdana"> <i>Note: most students did not sufficiently master the material from last week.&nbsp; Thus, first, redo that material.&nbsp; You should be able to write simple "for" loops, starting from EmptyProgram.java, in one or two minutes at most.&nbsp; Practice until you achieve that level of mastery!</i></font></p> <p><font face="Verdana"><i>To help you practice, here are more problems requiring "for" loops.&nbsp; Be sure to start each one with EmptyProgram.java.&nbsp; Please bring all your programs on a floppy disk to our next class.</i></font></p> 
      <ol> 
       <li><font face="Verdana">Write a program, <b>SumOfCubes.java</b>, which repeatedly reads in a non-negative integer n (exiting only when a negative integer is entered) and prints out 1<sup>3</sup> + 2<sup>3</sup> + ... + n<sup>3</sup>.<br> &nbsp;</font></li> 
       <li><font face="Verdana">As we noted in class, the sum of cubes to n equals the square of the sum of integers to n.&nbsp; That is:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<sup>3</sup> + 2<sup>3</sup> + ... + n<sup>3</sup> = (1 + 2 + ... + n)<sup>2</sup><br> Write a program, <b>SumsOfCubesAndIntegers.java</b>, which repeatedly reads in a non-negative integer n (exiting only when a negative integer is entered) and confirms that the two sides of this equation indeed are equal for that value of n.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>ParabolaPoints.java</b>, which reads in three doubles -- a, b, and c -- followed by one non-negative integer k, and prints the values of the function y = ax<sup>2</sup> + bx + c for the first k integers.&nbsp; That is, your program should function as follows (where user input is underlined):<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i> Enter a:&nbsp; <u>1.5</u><br> </i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Enter b:&nbsp; <u>2.5</u><br> </i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Enter c:&nbsp; <u>3.5</u><br> </i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>Enter k:&nbsp; <u>4</u><br> </i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>x&nbsp;&nbsp;&nbsp;&nbsp; y = 1.5x^2 + 2.5x + 3.5<br> </i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>1&nbsp;&nbsp;&nbsp;&nbsp; 7.5 <br> </i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>2&nbsp;&nbsp;&nbsp;&nbsp; 14.5<br> </i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>3&nbsp;&nbsp;&nbsp;&nbsp; 24.5<br> </i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <i>4&nbsp;&nbsp;&nbsp;&nbsp; 37.5<br> Verify your program's output on a few equations using your calculator.</i><br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>Power.java</b>, which reads in two<i> </i> non-negative integers, n and k, and prints out the value of n<sup>k</sup>.&nbsp; Note that you may not use "Math.pow" here.&nbsp; Instead, you should use a "for" loop to repeatedly multiply n by itself k times.<br> &nbsp;</font></li> 
       <li> <p align="left"><font face="Verdana">The Maclaurin series for arctan(x) is a formula which allows us to compute an <i>approximation</i> to arctan(x) as a <i>polynomial</i> in x.&nbsp; The formula is:<br> <br> <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; arctan(x) &nbsp;=&nbsp; x - x<sup>3</sup>/3 + x<sup>5</sup>/5 - x<sup>7</sup>/7 + x<sup>9</sup>/9 - x<sup>11</sup>/11 + . . .</b> <br> <br> Write a program, <b>ArctanSeries.java</b>, which reads in a double x, and a positive integer k, and prints out the partial sum from the first k terms in this series and also prints out the value of Math.atan(x), which computes the arctangent directly.&nbsp; Do the values agree?&nbsp; Do they get closer as you increase k?&nbsp; They should!<br> <br> <i>Hint #1:&nbsp; If the user enters 0.5 for x and 3 for k, you should compute:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.5 - 0.5<sup>3</sup>/3 + 0.5<sup>5</sup>/5 = 0.464583....<br> That is, the first 3 terms of the series with x = 0.5.&nbsp; This turns out to be a good approximation, even with only 3 terms, as:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; arctan(0.5) = 0.4636476....<br> <br> Hint #2:&nbsp; For this problem, you will need to use Math.pow(a,b) which computes a<sup>b</sup>.&nbsp; Also, be sure your running sum is a double and not an integer!<br> <br> Hint #3:&nbsp; Recall in class how we computed an alternating sum (adding, subtracting, adding,...) using a variable called "sign".&nbsp; This is an integer initially set to 1.&nbsp; We switch its sign, from positive to negative or from negative to positive, by setting it equal to its negation:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sign = -sign;<br> Now, just multiply each term by this alternating sign.&nbsp; Voila!</i><br> &nbsp;</font></p></li> 
       <li><font face="Verdana">From our math class, we know that, in radians, <b>tan(&#x3c0;/4) = 1</b> and thus <b>&#x3c0;/4 = arctan(1)</b> and thus:<br> <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#x3c0; = 4 arctan(1)&nbsp; <br> </b>We will combine this with the previous question to write a program that computes the value of pi!&nbsp; By replacing x with 1 in the Maclaurin expansion of arctan(x), we see that:<br> <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#x3c0; = 4 (1 - 1/3 + 1/5 - 1/7 + 1/9 - 1/11 + . . . )</b> <b>&nbsp;<br> </b>Amazing!&nbsp; Write a program<b> PiFromArctan.java </b>which reads in a positive integer k and uses this formula to approximate pi with the first k terms of the sum.&nbsp; Be sure to multiply the sum by 4.&nbsp; Also, confirm that it takes over 300 terms in order to get 2 decimals of precision in pi.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Leonard Euler, one of the greatest math minds ever, proved the following:<br> <b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#x3c0;<sup>2</sup> = 6 (1/1<sup>2</sup> + 1/2<sup>2</sup> + 1/3<sup>2</sup> + 1/4<sup>2</sup> + 1/5<sup>2</sup> + ... )<br> </b>Astonishing!&nbsp; This is also useful, since it converges to pi faster than the arctan series above.&nbsp; To demonstrate this, write a program <b>PiFromEuler.java</b> which reads in a positive integer k and uses Euler's formula to approximate pi with the first k terms of this sum.&nbsp; Be sure to multiply by 6 and then take the square root (since Euler's formula finds pi squared, not pi).&nbsp; Finally, confirm that this converges faster than the previous method.</font></li> 
      </ol> </td> 
    </tr> 
    <tr> 
     <td><font face="Verdana"><br> <b>Weeks #5-6:&nbsp;&nbsp; Looping forever with "while (true)", "For" loops, Counting<br> </b>&nbsp;&nbsp;&nbsp; date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8-Dec-04 and 15-Dec-04</font><p> <font face="Verdana"> <i>Note:&nbsp; At the start of class we took Quiz #2 (see <a href="Quiz2.java">Quiz2.java</a>).</i></font></p> 
      <ol> 
       <li><font face="Verdana">Study and understand the following programs:<br> * <a href="LoopingForever.java">LoopingForever.java</a><br> * <a href="NicerLoopingForever.java">NicerLoopingForever.java</a><br> * <a href="SumFromOneToN.java">SumFromOneToN.java</a><br> * <a href="CuriousMultipleOf7.java">CuriousMultipleOf7.java</a><br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>Factorial.java</b>, which repeatedly reads in a non-negative integer n (exiting only when a negative integer is entered) and prints out n! -- that is, n factorial, which is n * (n-1) * ... * 2 * 1.<br> Hint #1:&nbsp; This program is <i>very</i> similar to SumFromOneToN.java<br> Hint #2:&nbsp; 0! = 1, not 0.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>NChooseK.java</b>, which repeatedly reads in a non-negative integer n (exiting only when a negative integer is entered) followed by a second non-negative integer k (where 0 &lt;= k &lt;= n), and prints out the number of ways you can choose k items from among n total items.&nbsp; We call this "n-choose-k", and the formula for "n-choose-k" is:&nbsp; n! / (k! * (n-k)!).&nbsp; So, for example:<br> &nbsp;&nbsp;&nbsp;&nbsp; 7-choose-2 = 7! / (2! * 5!) = 7*6/2 = 21.<br> This means that there are 21 ways to choose 2 items from 7 total items.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>MakingChange.java</b>, which repeatedly reads in an integer in [0,100), exiting only when a negative integer is entered, and makes appropriate change for that many cents. So, if the user enters, say, 73, your program should print that the change is 2 quarters, 2 dimes, and 3 pennies.<br> Hint #1:&nbsp; With integer division, 73 / 25 equals exactly 2, which is exactly the number of quarters you need (think about this!).<br> Hint #2:&nbsp; You can use % (mod, the remainder operator) to find how many cents remain after you give the two quarters.&nbsp; Consider:&nbsp; 73 % 25 equals 23 (again, think about this!).<br> Hint #3:&nbsp; When you solve a problem like this, be sure to have a very clear grasp first of how you would solve this problem <i> without Java</i>.&nbsp; For example, would you first figure out how many quarters to give or how many pennies to give?&nbsp; However you would do it without Java is precisely how you should do it with Java!<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>LargestProperDivisorOfN.java</b>, which repeatedly reads in a positive integer n (exiting only when n is non-positive), and prints out the largest proper divisor of n (that is, the largest factor of n that is less than n itself).&nbsp; To do this, set a variable "largestFactor" to 1, and use a "for" loop to run a counter from 2 to (n-1).&nbsp; At each step, check if your counter is a factor of n (recall your IsFactor.java program from last week!).&nbsp; If it is, set "largestFactor" to that number.&nbsp; When you are done, print out the value of "largestFactor".&nbsp; For example, your program may run like this (with user input <u> underlined</u>):<br> &nbsp;&nbsp;&nbsp;&nbsp; Enter a positive number (or &lt;=0 to exit):&nbsp; <u>34<br> </u>&nbsp;&nbsp;&nbsp;&nbsp; The largest factor of 34 less than itself is:&nbsp; 17<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>IsPrime.java</b>, which repeatedly reads in a positive integer n (exiting only when n is non-positive) and prints out whether or not n is a prime number.<br> Hint #1:&nbsp; This is really easy once you have LargestProperDivisorOfN.java working properly (think about it -- what is the largest proper divisor of any prime number?).<br> Hint #2:&nbsp; 1 is not prime (2 is the smallest prime).<br> &nbsp;</font></li> 
       <li><font face="Verdana">A <i>perfect number</i> is a positive integer which is the sum of its positive integer factors (these are just the prime factors plus 1 and the number itself). The first three perfect numbers are:<br> &nbsp;&nbsp; 6 = 1 + 2 + 3, <br> &nbsp;&nbsp; 28 = 1 + 2 + 4 + 7 + 14<br> &nbsp;&nbsp; 496 = 1 + 2 + 4 + 8 + 16 + 31 + 62 + 124 + 248<br> Write a Java program,<b> IsPerfect.java</b>,<b> </b>which reads in a positive integer n (exiting if n &lt;= 0) and prints out whether or not n is a perfect number.<br> Hint:&nbsp; As with IsPrime.java, this program is very similar to LargestProperDivisorOfN.java.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>CRT.java</b>, which prints out the smallest positive integer that has a remainder of 1 when divided by 17, a remainder of 3 when divided by 37, <i>and</i> a remainder of 5 when divided by 217.<br> Hint #1:&nbsp; This program is very much like CuriousMultipleOf7.java.<br> Hint #2:&nbsp; The answer is less than 250,000.<br> Cool Factoid:&nbsp; Ancient Chinese mathematicians were able to solve problems of this kind without the aid of Java programs!&nbsp; They did it with a famous and very clever result called the <b> Chinese Remainder Theorem</b>.&nbsp; If you would like to see the math needed to replace your simple Java program, check out the following link:<br> &nbsp;&nbsp;&nbsp;&nbsp; <a href="http://www.cut-the-knot.org/blue/chinese.shtml"> http://www.cut-the-knot.org/blue/chinese.shtml</a></font></li> 
      </ol> </td> 
    </tr> 
    <tr> 
     <td bgcolor="#FFFF66"><font face="Verdana"><br> <b>Week #4:&nbsp;&nbsp; "Mulligan"<br> </b>&nbsp;&nbsp;&nbsp; date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1-Dec-04</font><p><font face="Verdana"><i>Note #1:&nbsp; At the start of class we took Practice Quiz #2 (see <a href="PracticeQuiz2.java">PracticeQuiz2.java</a>).</i></font></p> 
      <ol> 
       <li><font face="Verdana">Rewrite each program from last week's assignment starting from this:&nbsp; <a href="EmptyProgram.java">EmptyProgram.java</a>.<br> You must be able to easily write these programs from scratch, without referring to your notes!<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>TriangleArea.java</b>, which reads in three doubles -- the lengths of the sides of a triangle -- and prints out the area of the triangle using Heron's Formula: <br> <img border="0" src="heron.gif"><br> Note that if the three lengths cannot form a triangle, then you must print that out instead.&nbsp; This occurs when the sum of any two sides is not greater than the third side, or if any of the sides is not positive.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>MilitaryToStandardTime.java</b>, which reads in two integers -- the hour and minute in military time (so hours run from 0 to 23, minutes from 0 to 59) -- and prints out the same time in standard time.&nbsp; For example, your program may run like this (with user input <u>underlined</u>):<br> &nbsp;&nbsp;&nbsp;&nbsp; Enter the hour in military time:&nbsp; <u>3<br> </u>&nbsp;&nbsp;&nbsp;&nbsp; Enter the minute:&nbsp; <u>17<br> </u>&nbsp;&nbsp;&nbsp;&nbsp; The current time is:&nbsp; 3:17 a.m.<br> or:<br> &nbsp;&nbsp;&nbsp;&nbsp; Enter the hour in military time:&nbsp; <u>14<br> </u>&nbsp;&nbsp;&nbsp;&nbsp; Enter the minute:&nbsp; <u>32<br> </u>&nbsp;&nbsp;&nbsp;&nbsp; The current time is:&nbsp; 2:32 p.m.<br> Hint:&nbsp; A common mistake is to fail to handle the first hour of the day properly -- be sure that 0:17 maps to 12:17am.<br> &nbsp;</font></li> 
       <li><font face="Verdana">On page 143 of our Precalculus textbook, you were asked to prove the following identity:<br> &nbsp;&nbsp;&nbsp;&nbsp; tan x (cot x&nbsp; cos x&nbsp; + sin x) = sec x<br> Here, we will not prove it, but merely <i>emprically confirm</i> it.&nbsp; To do this, write a program, <b>TrigIdentity.java</b>, which reads in one double, x, and computes both the left-hand-side and the right-hand-side of the identity (printing out both values), then confirms that these are equal (well, very nearly equal, say within 0.000001, since doubles are not exactly equal in Java).&nbsp; If they are equal, your program should print out that all seems ok, and if they are NOT equal, your program should declare that the identity is false!</font></li> 
      </ol> </td> 
    </tr> 
    <tr> 
     <td><font face="Verdana"><br> <b>Week #3:&nbsp;&nbsp; Doubles as approximate values, If statements, "==" and "%"<br> </b>&nbsp;&nbsp;&nbsp; date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 24-Nov-04</font><p> <font face="Verdana"> <i>Note #1:&nbsp; At the start of class we took Quiz #1 (see <a href="Quiz1.java">Quiz1.java</a>).<br> Note #2:&nbsp; This week's assignment is abridged due to Thanksgiving (gobble, gobble!!!)</i></font></p> 
      <ol> 
       <li><font face="Verdana">Study and understand the following programs:<br> *&nbsp; <a href="DoublesAsApproximates.java"> DoublesAsApproximates.java</a><br> *&nbsp; <a href="IfStatements.java">IfStatements.java</a><br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>PerpendicularLine.java</b>, which reads in two doubles -- the slope "m" and y-intercept "b" of a line.&nbsp; Your program should print out the equation of a line that is <i> perpendicular</i> to the given line and shares the same y-intercept.&nbsp; Note:&nbsp; if the first line is horizontal (that is, if the slope is 0), you must detect this and handle it gracefully (by printing out a helpful message about the line being horizontal, so its perpendicular is vertical, and hence does not have a defined slope).<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>LineIntersections.java</b>, which reads in <i>four </i>doubles -- the slope "m1" and y-intercept "b1" of one line, then the slope "m2" and y-intercept "b2" of a second line.&nbsp; Your program should print out that point (x,y) where the two lines intersect.&nbsp; However, your program must handle the special cases of the two lines being parallel or the two lines being the same line -- in both cases, you should print out a suitable message.<i> <br> &nbsp;</i></font></li> 
       <li><font face="Verdana">Write a program, <b>PointInUnitCircle.java</b>, which reads in two doubles -- a value "x" and a value "y", representing the point (x,y) -- and prints out whether or not that point lies inside the unit circle.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>AlmostEqual.java</b>, which reads in two doubles and prints out whether or not the two values are within 0.00001 of each other.&nbsp; Print out a suitable message either way.<br> Hint:&nbsp; For this, you may wish to use Math.abs(x), which computes the <i>absolute value</i> of its argument.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>IsFactor.java</b>, which reads in two integers (not doubles) and prints out whether the <i>smaller</i> of the two integers is a factor of the <i>larger</i> of the two integers (regardless of which order the two numbers are entered in).&nbsp; Either way, print out a suitable message.&nbsp; For example, your program may run like this (with user input <u>underlined</u>):<br> &nbsp;&nbsp;&nbsp;&nbsp; Enter a number:&nbsp; <u>8<br> </u>&nbsp;&nbsp;&nbsp;&nbsp; Enter another number:&nbsp; <u>2<br> </u>&nbsp;&nbsp;&nbsp;&nbsp; 2 is a factor of 8<br> or:<br> &nbsp;&nbsp;&nbsp;&nbsp; Enter a number:&nbsp; <u>2<br> </u>&nbsp;&nbsp;&nbsp;&nbsp; Enter another number:&nbsp; <u>9<br> </u>&nbsp;&nbsp;&nbsp;&nbsp; 2 is NOT a factor of 9<br> Hint #1:&nbsp; after you read in the two input values, create two variables, "smaller" and "larger", and use Math.min and Math.max to set these values based on the input values, then test whether "smaller" is a factor of "larger".<br> Hint #2:&nbsp; you will want to use the "%" (mod) operator, where (x % y) returns the <i>remainder</i> of x when divided by y.&nbsp; So, for example, (13 % 5) equals 3.</font></li> 
      </ol> </td> 
    </tr> 
    <tr> 
     <td bgcolor="#FFFF66"><font face="Verdana"><b><br> Week #2:&nbsp; Hello World, Integer variables, Integer Math, Double variables, Double Math, Input/Output<br> </b>&nbsp;&nbsp;&nbsp; date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 17-Nov-04</font>
      <ol> 
       <li><font face="Verdana">Study and understand the following programs:<br> *&nbsp; <a href="HelloWorld.java">HelloWorld.java</a><br> *&nbsp; <a href="IntegerSum.java">IntegerSum.java</a><br> *&nbsp; <a href="DoubleSum.java">DoubleSum.java</a><br> *&nbsp; <a href="IntegerMinAndMax.java">IntegerMinAndMax.java</a><br> &nbsp;</font></li> 
       <li><font face="Verdana">For each of the following programs, be sure to include useful prompts and "pretty" output.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>MyName.java</b>, that prints out your name.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>IntegerQuotient.java</b>, that reads in two integers and prints out their quotient.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>DoubleQuotient.java</b>, that reads in two doubles and prints out their quotient.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Explain (briefly) how the two previous programs differ.&nbsp; In particular, give some examples where the same input to the two programs produce different outputs, and explain why this occurs.&nbsp; Place this explanation in a comment at the head of DoubleQuotient.java.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>AverageOfTwoIntegers.java</b>, that reads in two integers and prints out their average.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>TrigValues.java</b>, that reads in a double (an angle measure in <i>degrees</i>, not radians!) and prints out the sine, cosine, tangent, secant, cosecant, and cotangent for that angle.<br> Hint #1:&nbsp; For this, you will need Math.sin(x), Math.cos(x), and Math.tan(x).<br> Hint #2:&nbsp; These Math functions accept angles in <i>radians</i>, not degrees.&nbsp; You'll have to do something about that!<br> Hint #3:&nbsp; You do not have to gracefully handle division-by-zero, (such as the cot(0)), though it may be interesting to see what your program does in this case.<br> &nbsp;</font></li> 
       <li><font face="Verdana">Write a program, <b>QuadraticRoots.java</b>, that reads in three doubles a, b, and c -- the coefficients of a quadratic equation y = ax<sup>2</sup> + bx + c -- and prints out the two zeroes as found by the Quadratic Formula.<br> Hint #1:&nbsp; For this, you will need Math.sqrt(x), which computes the square root of its argument.<br> Hint #2:&nbsp; You may assume that the equation has two roots (though it may be interesting to see what your program does when the input only has one or zero roots).<br> &nbsp;</font></li> 
       <li><font face="Verdana"><b>What to submit and how to submit it:</b>&nbsp; For this and future weeks, bring a floppy disk (with your name clearly labeled on it) with all of your programs to class.&nbsp; At the start of class, be prepared to show/discuss any/all of the programs from this week.<br> &nbsp;</font></li> 
       <li><font face="Verdana"><b>The Quiz:</b>&nbsp; study for a quick quiz on this material first thing Wednesday morning (11/24).&nbsp; You will find that the quiz will be remarkably like one of the homework problems.&nbsp; You will have &lt;5 minutes to do the quiz.&nbsp; If you do the homework and study just a bit, the quiz should be easy.&nbsp; If you do not, though, the quiz will be basically impossible!</font></li> 
      </ol> </td> 
    </tr> 
    <tr> 
     <td><font face="Verdana"><b><br> Week #1:&nbsp; Getting Started<br> </b>&nbsp;&nbsp;&nbsp; date:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 10-Nov-04</font>
      <ol> 
       <li><font face="Verdana">Install Java and JCreator (see <a href="install-software.htm"> Software Installation Procedures</a>)</font></li> 
       <li><font face="Verdana">Get on the "ml-java-math" mailing list</font></li> 
       <li><font face="Verdana">Take Quiz #0 prior to attending class (see <a href="Quiz0.java"> Quiz0.java</a>)</font></li> 
      </ol> </td> 
    </tr> 
   </tbody>
  </table> 
  <hr>   
 </body>
</html>