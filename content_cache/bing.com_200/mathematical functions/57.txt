<html>
 <head>
  <title>Sample:
The Predefined Classes in Java
</title> 
  <style type="text/css">
BODY{font-family:serif;}
H1,H2,H3,H4{font-family:sans-serif;}
CODE,PRE,TT{font-family:monospace;}
HR{color: black;}
A{ font-weight: bolder; }
.InlineFormula{
	font-style: italic;
}
.Formula{
	padding-left:10px;
	font-style: italic;
}
.Let{
	border-style: solid;
	padding:10px;
	border-width:thin;
}
.Net{
	border-style: solid;
	padding:10px;
	border-width:thin;
	border-color:red;
}
.Case{
	border-style: solid;
	padding:10px;
	border-width:thin;
	border-color:blue;
}
</style> 
 </head> 
 <body bgcolor="#E0FFE0" text="#000000" link="#0000FF" alink="#FF0000" vlink="#8000AF"> 
  <form method="get" action="http://www.csci.csusb.edu/dick/samples/lookup.php">
    [
   <a href="#Main Content">Skip Navigation</a>] [
   <a href="http://www.csusb.edu/">CSUSB</a>] / [
   <a href="http://nsci.csusb.edu/">CNS</a>] / [
   <a href="http://www.csci.csusb.edu/">Comp Sci Dept</a>] / [
   <a href="http://www.csci.csusb.edu/dick/">R J Botting</a>] / [
   <a href="http://www.csci.csusb.edu/dick/samples/index.html">Samples</a>] / 
   <a name="top_of_page"> java.classes </a> 
   <br> [
   <a href="http://www.csci.csusb.edu/dick/samples/">Index</a>] [
   <a href="#Contents">Contents</a>] [
   <a href="java.classes.txt">Source Text</a>] [
   <a href="http://www.csci.csusb.edu/dick/samples/about.html">About</a>] [
   <a href="http://www.csci.csusb.edu/dick/maths/intro_characters.html">Notation</a>] [
   <a href="http://www.csci.csusb.edu/dick/maths/intro_copyright.html">Copyright</a>] [
   <a href="http://www.csci.csusb.edu/dick/samples/comment.html" target="SendEMail">Comment/Contact</a>] [Search 
   <input name="search" size="10" value=""> 
   <input type="hidden" name="from" value="java.classes.mth"> 
   <input type="submit" value="Go">] 
   <br> Tue Sep 18 15:25:50 PDT 2007 
  </form> 
  <hr> 
  <a name="Contents"><h3>Contents</h3></a> 
  <ul class="Contents"> 
   <li><a href="java.classes.html#The Predefined Classes in Java">The Predefined Classes in Java</a> </li>
   <li><a href="java.classes.html#Language Foundation Classes">: Language Foundation Classes</a> </li>
   <li><a href="java.classes.html#Input/Output package java.io">: Input/Output package java.io</a> </li>
   <li><a href="java.classes.html#Utility Class Library">: Utility Class Library</a> </li>
   <li><a href="java.classes.html#Abstract Window Toolkit Library">: Abstract Window Toolkit Library</a> </li>
   <li><a href="java.classes.html#Applets">: Applets</a> </li>
   <li><a href="java.classes.html#Network Interface Class Library">: Network Interface Class Library</a> </li>
   <li><a href="java.classes.html#Images - Audio and Visual">: Images - Audio and Visual</a> </li>
   <li><a href="java.classes.html#Road_works_ahead">: Road_works_ahead</a> </li>
   <li><a href="java.classes.html#Data Types">: Data Types</a> </li>
   <li><a href="java.classes.html#Object Hierarchy">: Object Hierarchy</a> </li>
   <li><a href="java.classes.html#Object">: : Object</a> </li>
   <li><a href="java.classes.html#System">: : : System</a> </li>
   <li><a href="java.classes.html#System Variables">: : : System Variables</a> </li>
   <li><a href="java.classes.html#System Methods">: : : System Methods</a> </li>
   <li><a href="java.classes.html#Array Copy">: : : : Array Copy</a> </li>
   <li><a href="java.classes.html#Color">: : : Color</a> </li>
   <li><a href="java.classes.html#PrintStream">: : : PrintStream</a> </li>
   <li><a href="java.classes.html#InputStream">: : : InputStream</a> </li>
   <li><a href="java.classes.html#FilterInputStream">: : : FilterInputStream</a> </li>
   <li><a href="java.classes.html#DataInputStream">: : : DataInputStream</a> </li>
   <li><a href="java.classes.html#Array">: : : Array</a> </li>
   <li><a href="java.classes.html#String and StringBuffer">: : : String and StringBuffer</a> </li>
   <li><a href="java.classes.html#Dictionary">: : : Dictionary</a> </li>
   <li><a href="java.classes.html#Vector">: : : Vector</a> </li>
   <li><a href="java.classes.html#Stack">: : : Stack</a> </li>
   <li><a href="java.classes.html#Number">: : : Number</a> </li>
   <li><a href="java.classes.html#Math">: : : Math</a> </li>
   <li><a href="java.classes.html#Class">: : : Class</a> </li>
   <li><a href="java.classes.html#AWT">: : : AWT</a> </li>
   <li><a href="java.classes.html#Applet">: : : Applet</a> </li>
   <li><a href="java.classes.html#End Notes">End Notes</a> </li>
  </ul>
  <a name="Main Content">
   <hr></a>
  <ol> 
   <a name="The Predefined Classes in Java"><h1>The Predefined Classes in Java</h1></a>
   <ol class="Section">
     Much of the usefulness of Java comes from the packages of useful classes. objects, and functions that already exist. 
    <p> The class library is still evolving - see [<a href="http://java.sun.com/j2se/1.4.2/docs/api/index.html"> index.html </a>] for the current library. </p>
    <p> A complete new language and <a href="#API">API</a> is expected in the summer of 2004: [<a href="http://java.sun.com/j2se/1.5.0/docs/api/index.html"> index.html </a>] and I have connected links on this page to both versions. </p>
    <p> The class library describes an <a href="#API">API</a>. </p>
    <li><a name="API">API</a>::=Application Programmers Interface. In otherwords it is intended that a programmer should use these classes to do most of the work - GUI interfaces, networking, audio, and so on. More interesting is that the same code will automatically assume the look-and-feel of the client machine. If someone is using Windows 95 then they will see the usual file open dialogue. On UNIX it will look like a UNIX dialogue, and on a Mac like a Mac Dialogue. Even the form of buttons will be adjusted to what the client expects rather than what the programmer thinks is right. <p> The following pointers are to descriptions of the current release of the Java classes. </p><p> <a name="Language Foundation Classes"></a></p><h2><a name="Language Foundation Classes">Language Foundation Classes</a></h2> Package java.lang contains essential Java classes, including numerics, strings, objects, compiler, runtime, security and threads. Unlike other packages, java.lang is automatically imported into every Java program. <a name="Input/Output package java.io"><h2>Input/Output package java.io</h2></a> Package java.io provides a set of input and output streams to read and write data to files, strings, and other sources. <a name="Utility Class Library"><h2>Utility Class Library</h2></a> Package java.util contains miscellaneous utility classes, including generic data structures, settable bits class, time, date, string manipulation, random number generation, system properties, notification, and enumeration of data structures. <p> <a name="Abstract Window Toolkit Library"></a></p><h2><a name="Abstract Window Toolkit Library">Abstract Window Toolkit Library</a></h2> Package java.awt provides user interface features such as windows, dialog boxes, buttons, checkboxes, lists, menus, scrollbars and text fields. It is said to be <span class="InlineFormula">Abstract</span> because it is device and operating system independent - much to the irritation of some programmers who take their revenge by inventing other meanings for the acronym. [<a href="java.classes.html#AWT"> AWT </a>] below and <a name="Applets"><h2>Applets</h2></a> Package java.applet enables construction of applets. It also provides information about an applet's parent document, about other applets in that document, and enables an applet to play audio. See [<a href="java.classes.html#Applet"> Applet </a>] below and <a name="Network Interface Class Library"><h2>Network Interface Class Library</h2></a> Package java.net network support, including URLs, TCP sockets, UDP sockets, IP addresses and a binary-to-text converter. <a name="Images - Audio and Visual"><h2>Images - Audio and Visual</h2></a> Package java.image is for managing image data, such as the setting the color model, cropping, color filtering, setting pixel values and grabbing snapshots. </li>
   </ol>
   <hr> 
   <p> <a name="Road_works_ahead"></a></p>
   <h2><a name="Road_works_ahead">Road_works_ahead</a></h2> Two question marks 
   <span class="InlineFormula">??</span> [
   <a href="java.classes.html#1_below"> 1_below </a>] indicate that I haven't found the data yet. If you have found the answer in any offical documentation please send it to dick@csci.csusb.edu where it will be incorporated with an acknowledgement. 
   <p> These are working notes and are being revised daily. Again I am open to corrections and improvements. <a name="Data Types"></a></p>
   <h2><a name="Data Types">Data Types</a></h2> [
   <a href="http://csci.csusb.edu/dick/samples/java.semantics.html"> java.semantics.html </a>] 
   <p> <a name="Object Hierarchy"></a></p>
   <h2><a name="Object Hierarchy">Object Hierarchy</a></h2>
   <ol class="Section"> 
    <a name="Object"><h3>Object</h3></a>
    <ol class="Section"> 
     <hr>
     <ol class="Box"> 
      <li>For all <span class="InlineFormula">C</span>:Class, <span class="InlineFormula">ob</span>:Object, ob instanceof C::Boolean. </li>
      <li><a name="Object">Object</a>()::constructor. </li>
      <li><span class="Formula">methods: clone() equals() finalize() getClass() hashCode() notify() notifyAll() toString() wait(long) wait(long,int) wait()</span> <p> <a name="System"></a></p><h4><a name="System">System</a></h4> 
       <hr>
       <ol class="Box">
         public final class System extends Object in package java.lang.System 
        <p> This provides a system-independent model of the operating system. It includes the standard input and output streams for example. The standard input streams are used for reading character data. The standard output streams are used for printing. For example: </p>
        <pre> 		System.out.println("Hello World!");</pre> 
        <p> The System Class represents a single and predefined <span class="InlineFormula">real</span> object. So it cannot have objects of type System(instances) Nor can it be subclassed. <a name="System Variables"></a></p>
        <h4><a name="System Variables">System Variables</a></h4> 
        <li><a name="err">err</a>::=<span class="InlineFormula">Standard Error Reporting Stream</span>::PrintStream. [<a href="java.classes.html#PrintStream"> PrintStream </a>] </li>
        <li><a name="out">out</a>::=<span class="InlineFormula">Standard Output stream</span>:: PrintStream. [<a href="java.classes.html#PrintStream"> PrintStream </a>] </li>
        <li><a name="in">in</a>::=<span class="InlineFormula">Standard Input stream</span>::InputStream. [<a href="java.classes.html#InputStream"> InputStream </a>] and [<a href="java.classes.html#DataInputStream"> DataInputStream </a>] <a name="System Methods"><h4>System Methods</h4></a>
         <ol class="Section"> 
          <li><a name="arraycopy">arraycopy</a>(Object, int, Object, int, int)::=<span class="InlineFormula"> Copies an array from the source array, beginning at the specified position, to the specified position of the destination array</span>. </li>
          <li><a name="exit">exit</a>(int)::= <span class="InlineFormula">Exits the virtual machine with an exit code</span>. [<a href="java.classes.html#Array Copy"> Array Copy </a>] </li>
          <li><a name="currentTimeMillis">currentTimeMillis</a>()::= <span class="InlineFormula">Returns the current time in milliseconds GMT since the epoch (00:00:00 UTC, January 1, 1970)</span>. See Also [<a href="java.classes.html#Date"> Date </a>] </li>
          <li><a name="gc">gc</a>()::= <span class="InlineFormula">Runs the garbage collector</span>. </li>
          <li><a name="getProperties">getProperties</a>()::= <span class="InlineFormula">Gets the System properties</span>. </li>
          <li><a name="getProperty">getProperty</a>(String)::= <span class="InlineFormula">Gets the System property indicated by the specified key</span>. </li>
          <li><a name="getProperty">getProperty</a>(String, String)::= <span class="InlineFormula">Gets the System property indicated by the specified key and def</span>. </li>
          <li><a name="getSecurityManager">getSecurityManager</a>()::= <span class="InlineFormula">Gets the system security interface</span>. </li>
          <li><a name="load">load</a>(String)::= <span class="InlineFormula">Loads a dynamic library, given a complete path name</span>. </li>
          <li><a name="loadLibrary">loadLibrary</a>(String)::= <span class="InlineFormula">Loads a dynamic library with the specified library name</span>. </li>
          <li><a name="runFinalization">runFinalization</a>()::= <span class="InlineFormula">Runs the finalization methods of any objects pending finalization</span>. </li>
          <li><a name="setProperties">setProperties</a>(Properties)::= <span class="InlineFormula">Sets the System properties to the specified properties</span>. </li>
          <li><a name="setSecurityManager">setSecurityManager</a>(SecurityManager)::= <span class="InlineFormula">Sets the System security</span>. <p> <a name="Array Copy"></a></p><h5><a name="Array Copy">Array Copy</a></h5> 
           <hr>
           <ol class="Box"> 
            <pre>  public static void arraycopy(Object from_source, int from_source_position,</pre> 
            <pre>                               Object to_destination, int to_destination_position,</pre> 
            <pre>                               int length)</pre> Precondition: Both arrays exist and have space for at least 
            <span class="InlineFormula">length</span> objects. 
            <p> Postcondition: First <span class="InlineFormula">length</span> Objects in the second array equal those in first array. </p>
            <p> Invariant: The first array. </p>
           </ol>
           <hr> </li>
         </ol><p>. . . . . . . . . ( end of section <a href="java.classes.html#System Methods">System Methods</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p></li>
       </ol>
       <hr> <a name="Color"><h4>Color</h4></a> 
       <hr>
       <ol class="Box">
         public final class java.awt.Color extends java,lang.Object [
        <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/awt/Color.html"> Color.html </a>] old [
        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/awt/Color.html"> Color.html </a>] coming 
        <li><a name="colors">colors</a>::={ black, blue, cyan,darkGray, gray, green, lightGray, magenta, orange, pink, red, white, yellow}. </li>
        <li><a name="Color">Color</a>(float red, float green, float blue)::constructor. </li>
        <li><a name="Color">Color</a>(int red, int green, int blue)::constructor. </li>
        <li><a name="Color">Color</a>(int rgb)::constructor. </li>
        <li><a name="color.getBlue">color.getBlue</a>()::int, gets commponent of color. </li>
        <li><a name="color.getGreen">color.getGreen</a>()::int, gets one component of color. </li>
        <li><a name="color.getRed">color.getRed</a>()::int, gets one component of color. </li>
        <li>... </li>
       </ol>
       <hr> <a name="PrintStream"><h4>PrintStream</h4></a> 
       <hr>
       <ol class="Box">
         public class PrintStream extends Object 
        <li>println(String) </li>
       </ol>
       <hr> <a name="InputStream"><h4>InputStream</h4></a> 
       <hr>
       <ol class="Box">
         public class InputStream extends Object (For example the standard input (System.in) [
        <a href="java.classes.html#in"> in </a>] ) An abstract class representing an input stream of bytes. All InputStreams are based on this class. 
        <li><span class="Formula">InputStream(), available(), close(), mark(int), markSupported(), read(), read(byte[]), read(byte[], int, int), reset(), skip(long)</span> <p> <a name="FilterInputStream"></a></p><h4><a name="FilterInputStream">FilterInputStream</a></h4> 
         <hr>
         <ol class="Box"> 
          <a name="DataInputStream"><h4>DataInputStream</h4></a> 
          <hr>
          <ol class="Box">
            By creating one of these from an unformatted input stream [
           <a href="java.classes.html#InputStream"> InputStream </a>] you can attempt to read in simple data types from the resulting stream. 
           <li><a name="DataInputStream">DataInputStream</a>(InputStream in)::=<span class="InlineFormula">Creates a new DataInputStream</span>. </li>
           <li>For S:DataInputStream, <a name="S.readLine">S.readLine</a>()::String=<span class="InlineFormula">returns a String copy of the line</span>. </li>
           <li>For S:DataInputStream, <a name="S.readFully">S.readFully</a>(byte[] b)::<span class="InlineFormula">reads until blocked into b</span>. </li>
           <li>For S:DataInputStream, X:{ Boolean, Byte, Char, Double, Float, Long, Short, UTF, unsignedByte, unsignedShort},S.read<span class="InlineFormula">X</span>()::<span class="InlineFormula">X</span>=<span class="InlineFormula">Reads and returns an X</span>. </li>
          </ol>
          <hr> 
         </ol>
         <hr> </li>
       </ol>
       <hr> <a name="Array"><h4>Array</h4></a> 
       <hr>
       <ol class="Box">
         For each class there is an associated class of arrays. 
        <li>An array has a set of elements of the same class number from 0 to some fixed length. The elements of array <span class="InlineFormula">a</span> are written <span class="InlineFormula">a</span>[0], <span class="InlineFormula">a</span>[1], . . . , <span class="InlineFormula">a</span>[<span class="InlineFormula">a</span>.length-1]. </li>
        <li>Arrays have a fixed length once created. This is accessable as an field named <span class="InlineFormula">length</span> of each array: </li>
        <li><a name="length_of_array_a">length_of_array_a</a>::= <span class="InlineFormula">a</span>.length. <p> Vectors [<a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Vector.html"> Vector.html </a>] (1.4.2), [<a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/Vector.html"> Vector.html </a>] are like arrays but can expand when needed. </p><p> For all <span class="InlineFormula">C</span>:Classes, A:Classes=array_of_C, <span class="InlineFormula">i</span>:identifier, <span class="InlineFormula">e</span>:expression, <span class="InlineFormula">a</span>:array_of_C, <span class="InlineFormula">v</span>:<span class="InlineFormula">array_of_C_variable</span>, <span class="InlineFormula">ec</span>:<span class="InlineFormula">C expression</span>, </p><p> <span class="InlineFormula">C</span> []::Classes=<span class="InlineFormula">class of arrays of objects of class C</span>::=<span class="InlineFormula">A</span>, </p><p> <span class="InlineFormula">C</span> [] <span class="InlineFormula">i</span>::declaration=<span class="InlineFormula">declare_an_array_of_C</span>, </p><p> <span class="InlineFormula">C</span> <span class="InlineFormula">i</span> []::declaration=<span class="InlineFormula">declare_an_array_of_C</span>, </p><p> <span class="InlineFormula">v</span>=<span class="InlineFormula">a</span>::expression(<span class="InlineFormula">A</span>)=<span class="InlineFormula">afterwards v refers to array a</span>, </p><p> <span class="InlineFormula">v</span>[<span class="InlineFormula">e</span>]=<span class="InlineFormula">ec</span>::expression(<span class="InlineFormula">C</span>)=<span class="InlineFormula">afterwards the e.th element of v has value ec but no other elements of v have been effected</span>, </p><p> new <span class="InlineFormula">C</span> [ <span class="InlineFormula">e</span> ]::expression(<span class="InlineFormula">A</span>)=<span class="InlineFormula">a new array of e C's</span>, </p><p> <span class="InlineFormula">a</span>.length::int=<span class="InlineFormula">number of items of class C in array a</span>, </p><p> <span class="InlineFormula">a</span>[<span class="InlineFormula">e</span>]::expression(<span class="InlineFormula">C</span>)=<span class="InlineFormula">the e.th element of array a</span>, </p><p> (<span class="InlineFormula">C</span>[])<span class="InlineFormula">ec</span>::expression(<span class="InlineFormula">A</span>)=<span class="InlineFormula">an array with element ec of length 1</span>?? [<a href="java.classes.html#1_below"> 1_below </a>] </p><p> For all <span class="InlineFormula">A</span>:Classes, <span class="InlineFormula">B</span>:subclasses(<span class="InlineFormula">A</span>), <span class="InlineFormula">B</span>[] in subclasses(<span class="InlineFormula">A</span>[]). </p><p> For arrays of characters see character strings [<a href="java.classes.html#String and StringBuffer"> String and StringBuffer </a>] </p><p> For arrays indexed by general objects see hash tables [<a href="java.classes.html#HashTable"> HashTable </a>] </p></li>
       </ol>
       <hr> <a name="String and StringBuffer"><h4>String and StringBuffer</h4></a> 
       <hr>
       <ol class="Box"> 
        <br>(
        <a name="String">String</a>): A general class of objects to represent character Strings. Strings are constant, their values cannot be changed after creation. [
        <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/String.html"> String.html </a>] [
        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/String.html"> String.html </a>] 
        <li><a name="literal">literal</a>::= double_quotes string double_quotes. </li>
        <li><a name="infix">infix</a>::={"+"}. -- concatenation. -- hence "+=" </li>
        <li><a name="String">String</a>()::=<span class="InlineFormula">construct new empty string</span>. String(String), String(char[]), String(char[],int,int), String(byte[], int ,int,int), String(byte[], int), String(StringBuffer)::=<span class="InlineFormula">Construct new String copying various data</span>. </li>
        <li><a name="charAt">charAt</a>(int)::=<span class="InlineFormula">character at (_)</span>. </li>
        <li><a name="compareTo">compareTo</a>(String)::int=<span class="InlineFormula">lexographic comparison return &lt;0 if &lt;, 0 if equal and &gt;0 if &gt;</span>. See C.strcmp. </li>
        <li><a name="concat">concat</a>(String)::=<span class="InlineFormula">Place (_) at end of this String</span>. </li>
        <li><span class="Formula">copyValueOf, endsWith, hashCode(String), intern,</span> </li>
        <li><a name="equals">equals</a>(String)::boolean=<span class="InlineFormula">This string is the same as (_)</span>. </li>
        <li><a name="equalsIgnoreCase">equalsIgnoreCase</a>(String)::boolean, </li>
        <li><a name="getBytes">getBytes</a>(int,int,byte[],int)::=<span class="InlineFormula">Copy into (3rd)</span>, </li>
        <li><a name="getChars">getChars</a>(int,int,char[],int)::=<span class="InlineFormula">copies chars into (3rd)</span>. </li>
        <li><a name="indexOf">indexOf</a>(...)::int=<span class="InlineFormula">position of first matching (_) in this string</span>. </li>
        <li><a name="lastIndexOf">lastIndexOf</a>(...)::int=<span class="InlineFormula">position of last matching (_) in this string</span>. </li>
        <li><a name="length">length</a>()::int=<span class="InlineFormula">number of chars/bytes in string</span>. </li>
        <li><span class="Formula">...</span> substring(int), substring(int,int)::String=<span class="InlineFormula">substrings of this string</span>. </li>
        <li><span class="Formula">toCharArray(), toLowerCase(), toString, toUpperCase,</span> </li>
        <li><a name="trim">trim</a>()::=<span class="InlineFormula">remove leading and trailing whitespace</span>. </li>
        <li><a name="valueOf">valueOf</a>(...)::=<span class="InlineFormula">String object cantain representation of (_)</span>. 
         <hr>
         <ol class="Box"> 
          <br>(
          <a name="StringBuffer">StringBuffer</a>): This Class is a growable buffer for characters. It is mainly used to create Strings. But can append any kind of Object which is ?? [
          <a href="java.classes.html#1_below"> 1_below </a>] converted into a sequence of characters before being added to the buffer, 
          <span class="InlineFormula">StringBuffer(...)</span> creates Strings and 
          <span class="InlineFormula">StringBuffer append(Object obj)</span> adds an object to the end of this buffer and returns the StringBuffer itself [
          <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/StringBuffer.html"> StringBuffer.html </a>] [
          <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/StringBuffer.html"> StringBuffer.html </a>] 
          <li><a name="append">append</a>(...)::=<span class="InlineFormula">Put (_) after the last character of this string</span>. </li>
          <li><a name="capacity">capacity</a>()::=<span class="InlineFormula">capcity of theis string</span>. </li>
          <li><a name="ensureCapacity">ensureCapacity</a>(int)::=<span class="InlineFormula">Make sure room for (_) chars</span>. </li>
          <li><span class="Formula">charAt(), getChars(),</span> </li>
          <li><a name="insert">insert</a>(int, X)::=<span class="InlineFormula">Inserts an X into the buffer</span>. </li>
          <li><a name="length">length</a>()::int=<span class="InlineFormula">number chars in this string buffer</span>. </li>
          <li><a name="setCharAt">setCharAt</a>(int, char)::=<span class="InlineFormula">change this string's (1st) char to (2nd)</span>. setLength(int::=<span class="InlineFormula">Set length to (_) chars</span>, </li>
          <li><a name="toString">toString</a>()::=<span class="InlineFormula">converstbuffered data to String</span>. </li>
         </ol>
         <hr> </li>
       </ol>
       <hr> <a name="Dictionary"><h4>Dictionary</h4></a> 
       <hr>
       <ol class="Box">
         The Dictionary class is the abstract [
        <a href="http://csci.csusb.edu/dic/samples/java.semantics.html#abstract"> abstract in java.semantics </a>] parent of Hashtable, which maps keys to values. Any object can be used as a key and/or value. Any Object has a 
        <span class="InlineFormula">hashCode(_)</span>. 
        <li><span class="Formula">Dictionary() elements() get(Object) isEmpty() keys() put(Object, Object) remove(Object) size()</span> </li>
       </ol>
       <hr> <a name="Vector"><h4>Vector</h4></a> 
       <hr>
       <ol class="Box">
         [
        <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Vector.html"> Vector.html </a>] [
        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/Vector.html"> Vector.html </a>] 
        <a name="Stack"><h4>Stack</h4></a> Stacks [
        <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/Stack.html"> Stack.html </a>] [
        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/Stack.html"> Stack.html </a>] are Vectors that can accessed at only one end - the "top" - by 
        <span class="InlineFormula">push()</span> and 
        <span class="InlineFormula">pop()</span> operations. 
       </ol>
       <hr> <a name="Number"><h4>Number</h4></a> 
       <hr>
       <ol class="Box">
         Number [
        <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/lang/Number.html"> Number.html </a>] [
        <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/lang/Number.html"> Number.html </a>] is an abstract superclass for numeric scalar types, like (Integer):fixed(16.bits, signed), 
        <br>(
        <a name="Long">Long</a>): fixed(32.bits, signed), 
        <br>(
        <a name="Float">Float</a>): floating_point(16.bits,IEEE) and (Double):(32,bits, IEEE): are subclasses of Number [
        <a href="http://csci.csusb.edu/dick/samples/java.semantics.html#numeric."> numeric. in java.semantics </a>] Each of these provides a method for extracting the basic data type from the object: (int intValue(Integer), double doubleValue(Double), float floatValue(Float), long longValue(Long)), and a constructor for making the Object from its data ( Integer(int), Long(long),....). 
       </ol>
       <hr> <a name="Math"><h4>Math</h4></a> 
       <hr>
       <ol class="Box"> 
        <br>(
        <a name="Math Constants">Math Constants</a>): E, PI 
        <br>(
        <a name="Math Functions">Math Functions</a>): abs acos asin atan atan2 ceil cos exp floor log max min pow randon rint round sin sqrt tan 
        <p> Warning: the behavior specified for mathematical functions is implementation dependent. For example they are supposed to throw an exception when the answer is not a number (eg sqrt(-1)). However they have been implemented as calling the standard C library functions and so return Double.NaN(Double's IEEE Not-a-Number value). </p>
       </ol>
       <hr> <a name="Class"><h4>Class</h4></a> 
       <hr>
       <ol class="Box"> 
        <li><span class="Formula">forName(String) getClassLoader() getInterfaces() getName()</span> </li>
        <li><span class="Formula">getSuperclass() isInterface() newInstance() toString()</span> </li>
       </ol>
       <hr> <a name="AWT"><h4>AWT</h4></a>
       <ol class="Section">
         AWT Component
        <hr>
        <ol class="Box">
         <li> </li>
         <li><span class="Formula">action(Event,Object) addNotify()</span> </li>
         <li><span class="Formula">bounds()</span> </li>
         <li><span class="Formula">checkImage(Image, ImageObserver) checkImage(Image, int, int, ImageObserver) createImage(int, int)</span> </li>
         <li><span class="Formula">deliverEvent(Event) disable()</span> </li>
         <li><span class="Formula">enable() enable(boolean)</span> getBackground() getColorModel() getFont() getFontMetrics(Font) getForeground() getGraphics() getParent() getPeer() getToolkit() gotFocus(Event, Object) </li>
         <li><span class="Formula">handleEvent(Event) hide()</span> </li>
         <li><span class="Formula">imageUpdate(Image, int, int, int, int, int) inside(int, int) invalidate() isEnabled() isShowing() isValid() isVisible()</span> </li>
         <li><span class="Formula">keyDown(Event, int) keyUp(Event, int)</span> </li>
         <li><span class="Formula">layout() list() list(PrintStream) list(PrintStream, int) locate(int, int) location() lostFocus(Event, Object)</span> </li>
         <li><span class="Formula">minimumSize() mouseDown(Event, int, int) mouseDrag(Event, int, int) mouseEnter(Event, int, int) mouseExit(Event, int, int) mouseMove(Event, int, int) mouseUp(Event, int, int) move(int, int)</span> </li>
         <li><span class="Formula">nextFocus()</span> </li>
         <li><span class="Formula">paint(Graphics) paintAll(Graphics) paramString() postEvent(Event) preferredSize() prepareImage(Image, ImageObserver) prepareImage(Image, int, int, ImageObserver) print(Graphics) printAll(Graphics)</span> </li>
         <li><span class="Formula">removeNotify() repaint() repaint(long) repaint(int, int, int, int) repaint(long, int, int, int, int) requestFocus() reshape(int, int, int, int) resize(int, int) resize(Dimension)</span> </li>
         <li><span class="Formula">setBackground(Color) setFont(Font) setForeground(Color) show() show(boolean) size()</span> </li>
         <li><span class="Formula">toString()</span> </li>
         <li><span class="Formula">update(Graphics)</span> </li>
         <li><span class="Formula">validate()</span> <p> AWT Container</p>
          <hr>
          <ol class="Box">
           <li> </li>
           <li>add(Component) add(Component, int) add(String, Component) addNotify() </li>
           <li><span class="Formula">countComponents()</span> </li>
           <li>deliverEvent(Event) getComponent(int) </li>
           <li><span class="Formula">getComponents() getLayout()</span> </li>
           <li>insets() </li>
           <li>layout() list(PrintStream, int) locate(int, int) minimumSize() </li>
           <li>paintComponents(Graphics) paramString() preferredSize() printComponents(Graphics) </li>
           <li><span class="Formula">remove(Component) removeAll() removeNotify()</span> </li>
           <li><span class="Formula">setLayout(LayoutManager)</span> </li>
           <li>validate() AWT Panel
            <hr>
            <ol class="Box">
             <li> </li>
             <li><span class="Formula">Panel() addNotify()</span> </li>
            </ol><p>. . . . . . . . . ( end of section <a href="java.classes.html#AWT">AWT</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> <a name="Applet"></a></p><h4><a name="Applet">Applet</a></h4> 
            <hr>
            <ol class="Box"> 
             <li><span class="Formula">Applet()</span> </li>
             <li>destroy() </li>
             <li>getAppletContext() getAppletInfo() </li>
             <li><span class="Formula">getAudioClip(URL) getAudioClip(URL, String) getDocumentBase() getImage(URL) getImage(URL, String) getParameter(String) getParameterInfo()</span> </li>
             <li>init() isActive() </li>
             <li>play(URL) play(URL, String) </li>
             <li><span class="Formula">resize(int, int) resize(Dimension)</span> </li>
             <li>setStub(AppletStub) showStatus(String) start() stop() </li>
            </ol>
            <hr> </li>
          </ol>
          <hr> </li>
        </ol>
        <hr> 
       </ol>
       <hr> <p> </p></li>
     </ol>
     <hr> 
    </ol>
    <p>. . . . . . . . . ( end of section <a href="java.classes.html#Object">Object</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
   </ol>
   <p>. . . . . . . . . ( end of section <a href="java.classes.html#Object Hierarchy">Object Hierarchy</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
   <p> </p>
  </ol>
  <p>. . . . . . . . . ( end of section <a href="java.classes.html#The Predefined Classes in Java">The Predefined Classes in Java</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> <a name="End Notes"></a></p>
  <h1><a name="End Notes">End Notes</a></h1>
  <ol class="Section"> 
   <br>(
   <a name="1_below">1_below</a>): Indicates something that I think is true but have not been able to check please sen mail to dick@csci.csusb.edu to either confirm or deny the opeinion expressed thereafter. 
   <p> </p>
  </ol>
  <p>. . . . . . . . . ( end of section <a href="java.classes.html#End Notes">End Notes</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a>  <a name="__End"></a></p>
  <h3><a name="__End">End</a></h3>  
 </body>
</html>