<!--?xml version="1.0" encoding="utf-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
 <head> 
  <title>Math examples</title> 
  <meta name="copyright" content="Copyright © 2012 by W. Patrick Hooper"> 
  <link rel="stylesheet" type="text/css" href="default.css"> 
  <link rel="stylesheet" type="text/css" href="presentation.css"> 
 </head> 
 <body> 
  <h1 class="title">Math examples</h1> 
  <div style="text-align: center; margin-left: auto; margin-right: auto; font-size: smaller; margin-bottom: 1em; ">
    © 2012 by 
   <a href="http://wphooper.com/">W. Patrick Hooper</a>. Licensed under a 
   <a rel="license" href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 Unported License</a>.
   <br> 
  </div> 
  <div style="margin-left: auto; margin-right: auto; max-width: 800px"> 
   <p><strong>Purpose:</strong> Learn how to do basic mathematics in java. Learn about <span class="code">if</span> statements and <em>loops</em>. Learn some more about classes and functions.</p> 
  </div> 
  <hr> 
  <ol> 
   <li><h2>Create the Math Examples project.</h2> Create a new NetBeans project named "MathExamples" with main class named "Factorial". Here are the step by step instructions: 
    <ol> 
     <li>Click on the <em>File</em> menu, then select <em>New Project</em>.</li> 
     <li>A new window will pop up. On the first page select "Java" from <em>categories</em>, and "Java Application" from <em>projects</em>. Then click <em>next</em>. </li> 
     <li>Set <em>Project Name</em> to "MathExamples." Select a <em>Project Location</em> and <em>Project Folder</em>.</li> 
     <li>Make sure <em>Create Main Class</em> is checked. Enter "Factorial" into the adjacent textbox. Click <em>finish</em>.</li> 
     <li>The project should be created, and the file "Factorial.java" should open.</li> 
    </ol> </li> 
   <li><h2>Factorial.java</h2> Our program "Factorial.java" will read an integer <span class="math">n</span> from input, then output <span class="math">n!</span>. 
    <ol> 
     <li>We will place all the code for "Factorial.java" in the <span class="code">main</span> method:<br> 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">(</span>String<span style="color: #990000">[]</span> args<span style="color: #990000">)</span> <span style="color: #FF0000">{</span><span style="color: #990000">...</span><span style="color: #FF0000">}</span>
</tt></pre> We will describe the content of the main function in steps below, and then summarize at the end. Everything in statements B-E will go in the <span class="code">main</span> method. </li> 
     <li>We read an integer from the command line with the line:<br> 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="color: #009900">int</span> n<span style="color: #990000">=</span>Integer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">parseInt</span></span><span style="color: #990000">(</span>args<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
</tt></pre> Comments:
      <ol> 
       <li>The variable <span class="code">args</span> stores an array (or list) of Strings. Writing <span class="code">args[0]</span> selects the first string in the array. Hopefully, it is something like "5".</li> 
       <li>An <span class="code">int</span> is a <a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">primitive data type</a> which stores an integer whose absolute value is less than 2 trillion or so.</li> 
       <li>The class <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html"><span class="code">java.lang.Integer</span></a> is a helper class for dealing with ints. In particular it has a function <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html#parseInt%28java.lang.String%29"><span class="code">parseInt</span></a>, which converts a <span class="code">String</span> to an <span class="code">int</span>.</li> 
       <li>The integer is stored in a variable named <span class="code">n</span>.</li> 
      </ol> </li> 
     <li>Since <span class="code">n!</span> is undefined when <span class="code">n</span> is negative, we will check to see if <span class="code">n</span> is negative. If it is negative we will print an error then exit. We do this with the following code:<br> 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span>n <span style="color: #990000">&lt;</span> <span style="color: #993399">0</span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"The number ("</span> <span style="color: #990000">+</span> n <span style="color: #990000">+</span> <span style="color: #FF0000">")! is undefined because "</span> <span style="color: #990000">+</span> n <span style="color: #990000">+</span> <span style="color: #FF0000">" is negative."</span><span style="color: #990000">);</span>
    System<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>
</tt></pre> Comments: 
      <ol> 
       <li>The two lines in the brackets will be exectuted exactly when n is negative.</li> 
       <li>Adding a number has the effect of converting <span class="code">n</span> to a string and then concatenating the strings.</li> 
       <li>The line <span class="code">System.exit(0);</span> terminates the program.</li> 
      </ol> </li> 
     <li>Now we will compute n!. To do this, we begin by defining two new integers:<br> 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="color: #009900">int</span> factorial<span style="color: #990000">=</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
</tt></pre> The number <span class="code">factorial</span> will eventually store <span class="code">n!</span>. We will iterate <span class="code">i</span> from <span class="code">1</span> to <span class="code">n</span>, multiplying <span class="code">factorial</span> by <span class="code">i</span> each time:<br> 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">while</span></span> <span style="color: #990000">(</span>i <span style="color: #990000">&lt;=</span> n<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    factorial <span style="color: #990000">=</span> factorial <span style="color: #990000">*</span> i<span style="color: #990000">;</span>
    i <span style="color: #990000">=</span> i<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre> Comments:
      <ol> 
       <li>When the program reaches a while statement, it immediately checks to see if the expressions enclosed in parentheses is true. If it is true, then it executes the statements enclosed in the brackets <span class="code">{...}</span>. Otherwise, the program continues to the next statement after the brackets.</li> 
       <li>Whenever the program reaches the end of the statements in the brackets, it again checks the expression in parenthesis. If the expression is true, it executes the statements again. Otherwise, it moves on.</li> 
       <li>Our loop exits when <span class="code">i=n+1</span>.</li> 
      </ol> </li> 
     <li>Finally, we will print the result of our computation so that the user can see it. We use the following statement: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt>System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span> <span style="color: #FF0000">""</span> <span style="color: #990000">+</span> n <span style="color: #990000">+</span> <span style="color: #FF0000">"! = "</span> <span style="color: #990000">+</span> factorial<span style="color: #990000">);</span>
</tt></pre> The construction <span class="code">""+n</span> takes the empty string <span class="code">""</span> and concatenates the string formed my converting the integer <span class="code">n</span> to a string. Then we concatenate <span class="code">"! = "</span> and <span class="code">factorial</span> converted to a string. We print something like <span class="code">"5! = 120"</span>. </li> 
    </ol> The entire <span class="code">main</span> method is included below: 
    <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">(</span>String<span style="color: #990000">[]</span> args<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
     <span style="color: #009900">int</span> n<span style="color: #990000">=</span>Integer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">parseInt</span></span><span style="color: #990000">(</span>args<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
            
     <span style="font-weight: bold"><span style="color: #0000FF">if</span></span> <span style="color: #990000">(</span> n <span style="color: #990000">&lt;</span> <span style="color: #993399">0</span><span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
         System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"The number ("</span> <span style="color: #990000">+</span> n <span style="color: #990000">+</span> <span style="color: #FF0000">")! is undefined because "</span> <span style="color: #990000">+</span> n <span style="color: #990000">+</span> <span style="color: #FF0000">" is negative."</span><span style="color: #990000">);</span>      
         System<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">exit</span></span><span style="color: #990000">(</span><span style="color: #993399">0</span><span style="color: #990000">);</span>
     <span style="color: #FF0000">}</span>

     <span style="color: #009900">int</span> factorial<span style="color: #990000">=</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
     
     <span style="font-weight: bold"><span style="color: #0000FF">while</span></span> <span style="color: #990000">(</span>i <span style="color: #990000">&lt;=</span>n <span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
         factorial <span style="color: #990000">=</span> factorial <span style="color: #990000">*</span> i<span style="color: #990000">;</span>
         i <span style="color: #990000">=</span> i<span style="color: #990000">+</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
     <span style="color: #FF0000">}</span>
             
     System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span> <span style="color: #FF0000">""</span> <span style="color: #990000">+</span> n <span style="color: #990000">+</span> <span style="color: #FF0000">"! = "</span> <span style="color: #990000">+</span> factorial<span style="color: #990000">);</span>
<span style="color: #FF0000">}</span>
</tt></pre> You can also view the whole file with comments here: <a href="source/MathExamples/html/Factorial.php">Factorial.java</a>. </li> 
   <li><h2>Running Factorial.java</h2> 
    <ol> 
     <li><h2>Running via NetBeans:</h2>
      <ol> 
       <li>Using the menus select "Run &gt; Set Main Project &gt; MathExamples."</li> 
       <li>If you naively click menus "Run &gt; Run Main Project", you get an error because there are no command line arguments by default.<br> <img src="math_examples_run_error.png" width="669" height="124" alt="output of program" class="figure"></li> 
       <li>To solve this select menus "File &gt; Project Properties". A window will pop up. Select "Run" from "Categories." Enter a number like "5" under arguments. The window should look like:<br> <img src="math_examples_run_arguments.png" width="862" height="314" alt="output of program" class="figure"><br> </li> 
       <li>Now "Run &gt; Run Main Project" should work.</li> 
      </ol></li> 
     <li><h2>Running on the command line:</h2>
      <ol> 
       <li>From the NetBeans menu select "Run &gt; Clean and Build Main Project."</li> 
       <li>Now if you open a terminal and go to the "dist" folder of your NetBeans project, there should be a file named "MathExamples.jar".</li> 
       <li>Run the java program using the command: 
        <div class="indent">
         <span class="code">java -jar MathExamples.jar 10</span>
        </div> The "10" here is the command line argument. The output should be: 
        <div class="indent">
         <span class="code">10! = 3628800</span>
        </div> </li> 
      </ol></li> 
    </ol> </li> 
   <li><h2>Exp.java.</h2> We will make a new program "Exp.java." The program will read a real number <span class="math">x</span> from the command line. Then it will compute an approximation of <span class="math">exp(x)</span>.
    <ol> 
     <li><h2>Steps to create the file "Exp.java":</h2> <span style="float: right; margin: 1em; "><img src="math_examples_create_class.png" width="647" height="333" alt="Creating a new java class"></span> 
      <ol> 
       <li>Switch to the Projects tab in the top left subwindow of netbeans.</li> 
       <li>Make sure "MathExamples &gt; Source Packages &gt; &lt;default package&gt;" is open. See the screen shot at right.</li> 
       <li>Right click on "&lt;default package&gt;", then select "New &gt; Java Class".</li> 
       <li>A new window will pop up. Set "Class Name" to "Exp". Then click "Finish".</li> 
       <li>A source code subwindow should open labeled "Exp.java".</li> 
      </ol></li> 
     <li><h2>The factorial method.</h2> Inside the "Exp" class we will create a factorial method of the form: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">factorial</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> n<span style="color: #990000">)</span> <span style="color: #FF0000">{</span><span style="color: #990000">...</span><span style="color: #FF0000">}</span>
</tt></pre> The function takes as input the integer <span class="code">n</span>. (Input is in parentheses). The <span class="code">int</span> after <span class="code">static</span> indicates that the function will return an int. The complete function is given by:<br> 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">int</span> <span style="font-weight: bold"><span style="color: #000000">factorial</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> n<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    <span style="color: #009900">int</span> factorial<span style="color: #990000">=</span><span style="color: #993399">1</span><span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> <span style="color: #990000">(</span><span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">1</span><span style="color: #990000">;</span> i<span style="color: #990000">&lt;=</span>n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span> <span style="color: #FF0000">{</span>
        factorial<span style="color: #990000">=</span>factorial <span style="color: #990000">*</span> i<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>
    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> factorial<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre> The only new aspect of this code is that we used a <span class="code">for</span> loop rather than a while loop. In the parentheses after the for loop, there are three expressions: The first, <span class="code">int i=1</span>, is run when the loop begins, and creates an integer i with value 1. The second expression <span class="code">i&lt;=n</span> returns true or false. This has the same purpose as the expression in the while loop; the statements in brackets <span class="code">{ ... }</span> will be evaluated so long as this expression is true. The third expression <span class="code">i++</span> is evaluated after the statements in brackets, whenever they are evaluated. The expression <span class="code">i++</span> is equivalent to <span class="code">i=i+1</span>. So a <span class="code">for</span> loop is just a compact form of the while loop. </li> 
     <li><h2>The power method.</h2> We will also create another function: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">double</span> <span style="font-weight: bold"><span style="color: #000000">power</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span> x<span style="color: #990000">,</span> <span style="color: #009900">int</span> n<span style="color: #990000">)</span> <span style="color: #FF0000">{</span><span style="color: #990000">...</span><span style="color: #FF0000">}</span>
</tt></pre> This function takes two inputs, a <span class="code">double</span> named <span class="code">x</span> and an <span class="code">int</span> named <span class="code">n</span>, which we assume is non-negative. A double stores an approximation of a real number. The function will also return a real number. The number returned will be <span class="code">x<sup>n</sup></span>. The code for this follows: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">double</span> <span style="font-weight: bold"><span style="color: #000000">power</span></span><span style="color: #990000">(</span><span style="color: #009900">double</span> x<span style="color: #990000">,</span> <span style="color: #009900">int</span> n<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    <span style="color: #009900">double</span> ret<span style="color: #990000">=</span><span style="color: #993399">1.0</span><span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> <span style="color: #990000">(</span><span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">1</span><span style="color: #990000">;</span> i<span style="color: #990000">&lt;=</span>n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span> <span style="color: #FF0000">{</span>
        ret <span style="color: #990000">=</span> ret <span style="color: #990000">*</span> x<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>
    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> ret<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre> You should be able to figure out how the function returns <span class="math">x<sup>n</sup></span>. </li> 
     <li><h2>The main method.</h2> Recall that our goal was to evaluate <span class="math">exp(x)</span>. We will do this in our <span class="code">main</span> method. <p>Our method will do the following. It will read a real number <span class="code">x</span> from input, then it will output <span class="code">exp(x)</span>. We use the Taylor series for <span class="code">exp(x)</span>:</p> 
      <div class="math">
       exp(x)=1+x+x
       <sup>2</sup>/2+x
       <sup>3</sup>/6+...+x
       <sup>n</sup>/n!+.
      </div> <p>The source code for our main function is given below:</p> 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">(</span>String<span style="color: #990000">[]</span> args<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    <span style="color: #009900">double</span> x<span style="color: #990000">=</span>Double<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">parseDouble</span></span><span style="color: #990000">(</span>args<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
    <span style="color: #009900">double</span> sum<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">;</span>
    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> <span style="color: #990000">(</span><span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">0</span><span style="color: #990000">;</span> i<span style="color: #990000">&lt;</span><span style="color: #993399">15</span><span style="color: #990000">;</span> i<span style="color: #990000">++)</span> <span style="color: #FF0000">{</span>
        sum<span style="color: #990000">=</span>sum<span style="color: #990000">+</span><span style="font-weight: bold"><span style="color: #000000">power</span></span><span style="color: #990000">(</span>x<span style="color: #990000">,</span>i<span style="color: #990000">)/</span><span style="font-weight: bold"><span style="color: #000000">factorial</span></span><span style="color: #990000">(</span>i<span style="color: #990000">);</span>
    <span style="color: #FF0000">}</span>
    System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"exp("</span><span style="color: #990000">+</span>x<span style="color: #990000">+</span><span style="color: #FF0000">") = "</span><span style="color: #990000">+</span>sum<span style="color: #990000">);</span>
    System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">"A second opinion: exp("</span><span style="color: #990000">+</span>x<span style="color: #990000">+</span><span style="color: #FF0000">") = "</span><span style="color: #990000">+</span>Math<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">exp</span></span><span style="color: #990000">(</span>x<span style="color: #990000">));</span>
<span style="color: #FF0000">}</span>
</tt></pre> Comments:
      <ol> 
       <li><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Double.html"><span class="code">Double</span></a> is a helper class for doubles. The <span class="code">parseDouble</span> function converts a string to a double.</li> 
       <li>We call our <span class="code">factorial</span> and <span class="code">power</span> functions repeatedly in the loop.</li> 
       <li>Java has a class <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html"><span class="code">java.lang.Math</span></a> class which implements many mathematical functions including <span class="code">exp</span>.</li> 
      </ol> </li> 
    </ol> You can view the commented source code file: <a href="source/MathExamples/html/Exp.php">Exp.java</a>. </li> 
   <li><h2>Running Exp.java</h2>
    <ol> 
     <li><h2>Running via NetBeans.</h2> Steps to run the program in NetBeans: <span style="float: right; margin: 1em; "><img src="math_examples_run_exp.png" width="589" height="291" alt="Creating a new java class"></span> 
      <ol> 
       <li>Select menus "File &gt; Project Properties". A window will pop up. Select "Run" from "Categories."</li> 
       <li>To the right of "Configuration" click "New". Enter "Exp" as the "Configuration Name" and click okay.</li> 
       <li>Now with "Exp" selected next to configuration, enter "Exp" for the Main class (you can use the browse button if you want) and enter "1" under arguments.</li> 
       <li>This window should look as on the right. Click okay to close the window.</li> 
       <li>Run the program with the menus "Run &gt; Run Main Project," or simply press F6.</li> 
      </ol> </li> 
     <li><h2>Running on the command line.</h2> 
      <ol> 
       <li>From the NetBeans menu select "Run &gt; Clean and Build Main Project."</li> 
       <li>Now if you open a terminal and go to the "dist" folder of your NetBeans project, there should be a file named "MathExamples.jar".</li> 
       <li>Run the java program using the command: 
        <div class="indent">
         <span class="code">java -jar MathExamples.jar 1</span>
        </div> </li> 
       <li>Because the program "Factorial.java" is also included in the jar, you can also run this program. Do so with the command: 
        <div class="indent">
         <span class="code">java -cp MathExamples.jar Factorial 7</span>
        </div> </li> 
      </ol> </li> 
    </ol></li> 
   <li><h2>Limits on primitive types.</h2>
    <ol> 
     <li>The types "int" and "double" store numbers which take up a fixed amount of size on the computer, and so can not store numbers of arbitrary size. For instance, if we run our Factorial program with argument "20", then our program reports "20! = -2102132736." A negative number!</li> 
     <li>Fortunately, Java has a built in class <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html">java.math.BigInteger</a> to work with integers of arbitrary size.</li> 
     <li>We will demonstrate the BigInteger class by writing a factorial program using it.</li> 
     <li>Java also has a built in class, <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html">java.math.BigDecimal</a>, which does arbitrary precision arithmetic. </li> 
    </ol></li> 
   <li><h2>BigFactorial Example</h2>
    <ol> 
     <li>Create a java class in the MathExamples project named "BigFactorial". (Follow the directions used for the class Exp, if you forgot how.)</li> 
     <li>Open "BigFactorial.java" for editing.</li> 
     <li>Because we want to use the BigInteger class, we need to add the following line: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #000080">import</span></span> java<span style="color: #990000">.</span>math<span style="color: #990000">.</span>BigInteger<span style="color: #990000">;</span>
</tt></pre> 
      <div class="indent">
       <span class="code">import java.math.BigInteger;</span>
      </div> This line must appear somewhere above the class definition (<span class="code">public class BigFactorial {...}</span>). </li> 
     <li>Inside the BigFactorial class add the following method: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">BigInteger</span> <span style="font-weight: bold"><span style="color: #000000">factorial</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> n<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    <span style="color: #008080">BigInteger</span> factorial<span style="color: #990000">=</span>BigInteger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">valueOf</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
    <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> <span style="color: #990000">(</span><span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">1</span><span style="color: #990000">;</span> i<span style="color: #990000">&lt;=</span>n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span> <span style="color: #FF0000">{</span>
        factorial<span style="color: #990000">=</span>factorial<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">multiply</span></span><span style="color: #990000">(</span>BigInteger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">valueOf</span></span><span style="color: #990000">(</span>i<span style="color: #990000">));</span>
    <span style="color: #FF0000">}</span>
    <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> factorial<span style="color: #990000">;</span>
<span style="color: #FF0000">}</span>
</tt></pre> </li> 
     <li>The <a href="http://docs.oracle.com/javase/7/docs/api/">API (Application Programming Interface) specification</a> is a very useful resource. You can view the documentation for <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html">BigInteger here</a>. We are using only two functions from the BigInteger class and they are well documented:
      <ol> 
       <li><a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html#valueOf(long)">The valueOf method</a></li> 
       <li><a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html#multiply(java.math.BigInteger)">The multiply method</a></li> 
      </ol> Learn to read and understand the API. Once you can do this, you can teach yourself java! </li> 
     <li>From the API, we see the method declaration for <span class="code">valueOf</span> is: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">BigInteger</span> <span style="font-weight: bold"><span style="color: #000000">valueOf</span></span><span style="color: #990000">(</span><span style="color: #009900">long</span> val<span style="color: #990000">)</span>
</tt></pre> Comments on the method declaration:
      <ol> 
       <li>The declaration has two modifiers:
        <ol> 
         <li>The word <span class="code">public</span> just means that we can call the function.</li> 
         <li>The word <span class="code">static</span> means that to call the function we refer directly to BigInteger, e.g. <span class="code">BigInteger.valueOf(7)</span>.</li> 
        </ol></li> 
       <li>The word <span class="code">BigInteger</span> indicates the return type; the function will return a BigInteger.</li> 
       <li>The word <span class="code">valueOf</span> indicates the name of the function.</li> 
       <li>The stuff in the parentheses is the parameter list. This method takes one parameter of type <span class="code">long</span>. The <span class="code">long</span> type is a primitive data type which stores an integer, which can be slightly bigger than an <span class="code">int</span>. An <span class="code">int</span> can be converted directly to a <span class="code">long</span>, and so this function can be called with an <span class="code">int</span> as well.</li> 
      </ol> </li> 
     <li>From the API, we see the method declaration for <span class="code">multiply</span> is: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="color: #008080">BigInteger</span> <span style="font-weight: bold"><span style="color: #000000">multiply</span></span><span style="color: #990000">(</span><span style="color: #008080">BigInteger</span> val<span style="color: #990000">)</span>
</tt></pre> The absence of the modifier <span class="code">static</span> means that to call the function you need to use an object to call it. In our code, we use: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt>factorial<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">multiply</span></span><span style="color: #990000">(</span>BigInteger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">valueOf</span></span><span style="color: #990000">(</span>i<span style="color: #990000">))</span>
</tt></pre> Here, <span class="code">factorial</span> is an object of class BigInteger. We use it to call multiply with parameter <span class="code">BigInteger.valueOf(i)</span>, which is a newly constructed BigInteger with the same value as <span class="code">i</span>. The function will return the product of the two BigInteger objects involved. </li> 
     <li>Our main method will be: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">(</span>String<span style="color: #990000">[]</span> args<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
    <span style="color: #009900">int</span> n<span style="color: #990000">=</span>Integer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">parseInt</span></span><span style="color: #990000">(</span>args<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
    System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">""</span><span style="color: #990000">+</span>n<span style="color: #990000">+</span><span style="color: #FF0000">"! = "</span><span style="color: #990000">+</span><span style="font-weight: bold"><span style="color: #000000">factorial</span></span><span style="color: #990000">(</span>n<span style="color: #990000">));</span>
<span style="color: #FF0000">}</span>
</tt></pre> This code simply converts the first argument to an integer, then prints the result returned from the <span class="code">factorial</span> method. </li> 
     <li>You can run this program by following the instructions used to run "Exp.java".</li> 
     <li>Complete source code for BigFactorial.java without comments: 
      <!-- Generator: GNU source-highlight 3.1.5
by Lorenzo Bettini
http://www.lorenzobettini.it
http://www.gnu.org/software/src-highlite --> <pre><tt><span style="font-weight: bold"><span style="color: #000080">import</span></span> java<span style="color: #990000">.</span>math<span style="color: #990000">.</span>BigInteger<span style="color: #990000">;</span>

<span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">class</span></span> <span style="color: #008080">BigFactorial</span> <span style="color: #FF0000">{</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #008080">BigInteger</span> <span style="font-weight: bold"><span style="color: #000000">factorial</span></span><span style="color: #990000">(</span><span style="color: #009900">int</span> n<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="color: #008080">BigInteger</span> factorial<span style="color: #990000">=</span>BigInteger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">valueOf</span></span><span style="color: #990000">(</span><span style="color: #993399">1</span><span style="color: #990000">);</span>
 
        <span style="font-weight: bold"><span style="color: #0000FF">for</span></span> <span style="color: #990000">(</span><span style="color: #009900">int</span> i<span style="color: #990000">=</span><span style="color: #993399">1</span><span style="color: #990000">;</span> i<span style="color: #990000">&lt;=</span>n<span style="color: #990000">;</span> i<span style="color: #990000">++)</span> <span style="color: #FF0000">{</span>
            factorial<span style="color: #990000">=</span>factorial<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">multiply</span></span><span style="color: #990000">(</span>BigInteger<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">valueOf</span></span><span style="color: #990000">(</span>i<span style="color: #990000">));</span>
        <span style="color: #FF0000">}</span>
        
        <span style="font-weight: bold"><span style="color: #0000FF">return</span></span> factorial<span style="color: #990000">;</span>
    <span style="color: #FF0000">}</span>

    <span style="font-weight: bold"><span style="color: #0000FF">public</span></span> <span style="font-weight: bold"><span style="color: #0000FF">static</span></span> <span style="color: #009900">void</span> <span style="font-weight: bold"><span style="color: #000000">main</span></span><span style="color: #990000">(</span>String<span style="color: #990000">[]</span> args<span style="color: #990000">)</span> <span style="color: #FF0000">{</span>
        <span style="color: #009900">int</span> n<span style="color: #990000">=</span>Integer<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">parseInt</span></span><span style="color: #990000">(</span>args<span style="color: #990000">[</span><span style="color: #993399">0</span><span style="color: #990000">]);</span>
        System<span style="color: #990000">.</span>out<span style="color: #990000">.</span><span style="font-weight: bold"><span style="color: #000000">println</span></span><span style="color: #990000">(</span><span style="color: #FF0000">""</span><span style="color: #990000">+</span>n<span style="color: #990000">+</span><span style="color: #FF0000">"! = "</span><span style="color: #990000">+</span><span style="font-weight: bold"><span style="color: #000000">factorial</span></span><span style="color: #990000">(</span>n<span style="color: #990000">));</span>
    <span style="color: #FF0000">}</span>
<span style="color: #FF0000">}</span>
</tt></pre> You can see the commented source code here: <a href="source/MathExamples/html/BigFactorial.php">BigFactorial.java</a>. </li> 
    </ol></li> 
  </ol> 
  <h1>Useful Links:</h1> 
  <ul> 
   <li>Parts of the Oracle's Java Tutorial:
    <ul> 
     <li><a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">Discussion of primitive types</a>.</li> 
     <li><a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methods.html">Discussion of methods</a>.</li> 
     <li><a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html">Arrays</a>: in case you want to do more with the argument array passed to the main method. </li> 
    </ul></li> 
   <li>Portions of the Java API:
    <ul> 
     <li><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html">java.lang.Math API</a>: This class comes with many commonly used mathematical functions such as trigonometric functions, for instance.</li> 
     <li><a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html">java.math.BigInteger API</a>: Handles arbitrarily large integers.</li> 
     <li><a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html">java.math.BigDecimal API</a>. Handles arbitrary precision floating point arithmetic.</li> 
    </ul></li> 
  </ul> 
  <div class="noprint"> 
   <hr> 
   <span style="float: right; " class="noprint"> <a href="http://validator.w3.org/check?uri=referer"><img src="http://www.w3.org/Icons/valid-xhtml10" alt="Valid XHTML 1.0 Strict" height="31" width="88"></a> <a href="http://jigsaw.w3.org/css-validator/check/referer"><img style="border:0;width:88px;height:31px" src="http://jigsaw.w3.org/css-validator/images/vcss" alt="Valid CSS!"></a> </span> 
   <p style="text-align: center; margin-left: auto; margin-right: auto; max-width: 800px; "> This presentation is part of a <a href="http://wphooper.com/java/tutorial/">Mathematical Research Oriented Java Tutorial</a>, which aims to introduce students to the benefits that writing computer programs can provide to their understanding of mathematics.</p> 
  </div>   
 </body>
</html>