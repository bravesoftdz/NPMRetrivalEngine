<html>
 <head> 
  <title>Methods of the java.util.Math class</title> 
  <meta name="description" content="Overview and performance characteristics of key methods of the Math class."> 
  <meta name="keywords" content="Java,math,floating point,trigonometry,java.util.Math"> 
  <meta name="author" content="Neil Coffey"> 
  <link rel="stylesheet" type="text/css" href="../styles.css"> 
 </head> 
 <body> 
  <table>
   <tbody>
    <tr valign="top">
     <td width="162"> 
      <div class="navbar">
       <font size="-1"> <img src="../../RightArrowBlue.gif">&nbsp;<a href="/">Javamex Home</a><br> <img src="../../RightArrowBlue.gif">&nbsp;<a href="/javasearch">Java Search</a><br> <img src="/RightArrowBlue.gif">&nbsp;<a href="/tutorials/synchronization_concurrency_1.shtml">Java synchronization</a><br> <img src="/RightArrowBlue.gif">&nbsp;<a href="/tutorials/profiling/profiling_java5.shtml">Java profiling</a><br> <img src="/RightArrowBlue.gif">&nbsp;<a href="/tutorials/io/index.shtml">Java I/O</a><br> <img src="/RightArrowBlue.gif">&nbsp;<a href="/tutorials/io/nio_intro.shtml">NIO</a><br> <img src="/RightArrowBlue.gif">&nbsp;<a href="/tutorials/collections/index.shtml">Java collections</a> </font>
      </div> 
      <hr> <script type="text/javascript"><!--
google_ad_client = "pub-7685045015884574";
google_ad_slot = "4332830588";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script> <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
      <hr> <script type="text/javascript"><!--
google_ad_client = "pub-7685045015884574";
google_ad_slot = "4332830588";
google_ad_width = 160;
google_ad_height = 600;
//-->
</script> <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> </td>
     <td> <p><font size="-1"> <img src="/RightArrowBlue.gif">&nbsp;<a href="/">Home</a> <img src="/RightArrowBlue.gif">&nbsp;<a href="./">Math intro</a> <img src="/RightArrowBlue.gif">&nbsp;<a href="floating_point_primitive.shtml"><tt>float</tt> and <tt>double</tt></a> <img src="/RightArrowBlue.gif">&nbsp;<a href="java_util_math.shtml">java.util.Math</a> <img src="/RightArrowBlue.gif">&nbsp;<a href="BigDecimal_BigInteger.shtml">BigDecimal and BigInteger</a> <img src="/RightArrowBlue.gif">&nbsp;<a href="karatsuba.shtml">Karatsuba's algorithm</a> </font></p> 
      <table style="margin: 0px;">
       <tbody>
        <tr valign="top">
         <td> <i>Search this site:</i></td>
         <td> 
          <!-- Google CSE Search Box Begins  --> 
          <form action="http://www.google.com/cse" id="searchbox_007572414825397037682:iud26zxm2jq"> 
           <input type="hidden" name="cx" value="007572414825397037682:iud26zxm2jq"> 
           <input type="text" name="q" size="30"> 
           <input type="submit" name="sa" value="Search"> 
          </form> <script type="text/javascript" src="http://www.google.com/coop/cse/brand?form=searchbox_007572414825397037682%3Aiud26zxm2jq&amp;lang=en"></script> 
          <!-- Google CSE Search Box Ends --> </td>
         <td> <a href="/tutorials/threads/"><img src="/ix/threads.png" border="0" alt="Threads"></a> <a href="/tutorials/database/"><img src="/ix/db.png" border="0" alt="Database"></a> <a href="/tutorials/profiling/profiling_java5.shtml"><img src="/ix/profiling.png" border="0" alt="Profiling"></a> <a href="/tutorials/regular_expressions/"><img src="/ix/regex.png" border="0" alt="Regular expressions"></a> <a href="/tutorials/random_numbers/"><img src="/ix/random.png" border="0" alt="Random numbers"></a> <a href="/tutorials/compression/"><img src="/ix/compression.png" border="0" alt="Compression"></a> <a href="/tutorials/exceptions/"><img src="/ix/exceptions.png" border="0" alt="Exceptions"></a> <a href="/java_equivalents/index.shtml"><img src="/ix/c.png" border="0" alt="C Equivalents in Java"></a> </td>
        </tr>
       </tbody>
      </table> 
      <!-- AddThis Button BEGIN --> <script type="text/javascript">addthis_pub  = 'frenchlinguistics';</script> <a href="http://www.addthis.com/bookmark.php" onmouseover="return addthis_open(this, '', '[URL]', '[TITLE]')" onmouseout="addthis_close()" onclick="return addthis_sendto()"><img src="http://s9.addthis.com/button1-bm.gif" width="125" height="16" border="0" alt=""></a><script type="text/javascript" src="http://s7.addthis.com/js/152/addthis_widget.js"></script> 
      <!-- AddThis Button END --> <h1>Mathematical operations in Java: <tt>java.util.Math</tt></h1> <p>Beyond the <a href="floating_point_primitive.shtml">basic floating point arithmetic operations</a>, the <tt>java.util.Math</tt> class provides various static methods to perform other common trigonometric and arithmetic operations on floating point numbers. In general, these methods operate on <tt>double</tt>s and perform said operations to within the precision allowed by a <tt>double</tt>. </p> <p>Depending on your VM and architecture, the methods of the Math class may either be implemented in software or, where available, be compiled directly to corresponding machine code instructions. The Hotspot software implementations are based on Sun's freeware <b>fdlibm</b> library. In the descriptions below, I include some empirical information on the performance of the various methods, and indicate cases that are compiled directly to an underlying machine instruction. It is important to remember that both the software and hardware implementations aim to produce an approximation which is indistinguishable from the theoretical "actual" result within the precision of a <tt>double</tt>". Thus, depending on the input parameters, they typically go through different code paths to produce their result, and hence actual performance of the <tt>java.util.Math</tt> methods can vary depending on those input values. </p> <h3>Note about instruction timings</h3> <p>The timing indications I give below are mostly based on empirical test timings made on an Intel i7 machine and from the assembler output of 64-bit Hotspot fastdebug build 1.7.0-ea-b126. It should be noted that low-level timings are a complex issue on modern architecture, because the timing of a particular instruction often depends on its dependency on surrounding instructions. But as a rough guide, addition with register operands (and indeed some other instructions such as multiplication) can "burst" at one instruction per clock cycle when not dependent on adjacent instructions, but in other situations will take up to 2 clock cycles on average. On older Intel architecture, typical "worst case" timings of floating point arithmetic instructions are reported to rise to 5-6 clock cycles. For more data and information on the issue of instruction timings, see the <a href="http://www.intel.com/Assets/PDF/manual/248966.pdf" target="_blank">Intel 64 and IA-32 Architectures Optimization Reference Manual</a> as well as Granlund, <a href="http://gmplib.org/~tege/x86-timing.pdf"> <i>Instruction latencies and throughput for AMD and Intel x86 processors</i></a>. </p> <h3>Calculating the square root: <tt>Math.sqrt()</tt></h3> <p>The Java method <tt>Math.sqrt()</tt> calculates the square root of its single argument, returning the result to the precision of a <tt>double</tt>. On many platforms, a machine code instruction is actually available to perform square roots, and in such cases a <b>good VM will replace a call to <tt>Math.sqrt()</tt> with the equivalent machine code instruction</b> so that no actual method call is made. Hotspot on Intel platforms, for example, JIT-compiles <tt>Math.sqrt()</tt> to a <b><tt>SQRTSD</tt></b> instruction. The result is that <tt>Math.sqrt()</tt> appears to take around <b>20 clock cycles</b>, or 10-20 times as long as a floating point addition. </p> <h3><tt>Math.exp()</tt>: calculating <i>e<sup>x</sup></i></h3><i> <p>The <tt>Math.exp()</tt> method calculates <i>e</i> ("Euler's number") to the power <i>x</i>, its single argument. This calculation has a variety of applications, and various other mathematical functions, such as the calculation of the arbitrary power <i>x<sup>y</sup></i>, can be derived from it. </p> <p>The precise time taken by <tt>Math.exp()</tt> is a slightly complex matter, because how much effort is required for a calculation accurate to within the limitations of a <tt>double</tt> depend on the range of the input value. But typically, the calculation will be in the order of 100 clock cycles, or 50-100 times slower than a floating point addition depending on the circumstance. </p> <p>For more information, see the separate page on the <a href="exp.shtml">performance of Math.exp() and possible approximations</a> which for some applications can speed up the calculation considerably. </p> <h3>Next: trigonometric and other methods</h3> <p>On the next page, we continue to look at <a href="java_util_math_2.shtml">trigonometric and other methods of the <tt>java.util.Math</tt> class</a>. </p> 
       <hr><p align="center"><font size="-1"><i>Written by Neil Coffey. Copyright © Javamex UK 2011. All rights reserved. If you have any feedback on the Java collections tutorials in this section or about the content of this site in general, please leave a message on the Javamex forum. </i></font></p> </i></td>
    </tr>
   </tbody>
  </table> 
  <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script> 
  <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-2207493-4");
pageTracker._initData();
pageTracker._trackPageview();
</script>   
 </body>
</html>