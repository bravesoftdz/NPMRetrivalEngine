<!doctype html>
<html>
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
  <meta name="keywords" content="Patrik Lundin, Lundin Patrik, patrik, lundin, lundin.info, javathings.com, plundin@javathings.com, patrik@javathings.com, com.javathings.math, expression, evaluate, .net, dotnet, csharp, c#, java, shareware, freeware, math, expression, parser, eval, graph, plot, function, search, server, monitor, applets, applications, calculator, differentiate, derive, derivation, newton, patrik, lundin, azure"> 
  <meta name="description" content="Patrik Lundin, patrik, lundin, lundin.info, javathings.com, Shareware and freeware programs. DotNet math expression parser,  Site Search Applet, ServerMonitor, GraphApplet, WhatServer, AzureBlobBackup, JCalc and a lot of other stuff"> 
  <title>Programmer Patrik Lundin .NET, Java, JavaScript, Math expression parser</title> 
  <link rel="stylesheet" type="text/css" href="/Content/Site.css"> 
  <script language="JavaScript" src="/Scripts/Site.js"></script> 
  <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-19750879-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script> 
 </head> 
 <body text="#000000" link="#0000bf" vlink="#0000bf" bgcolor="#EEEEFF" topmargin="3" leftmargin="3"> 
  <table cellspacing="0" cellpadding="0" border="0" width="1024" style="height: 100%" align="left"> 
   <tbody>
    <tr> 
     <td class="menu" bgcolor="#42699C" width="1024" height="40" colspan="2" align="left" valign="top"> 
      <table width="100%"> 
       <tbody>
        <tr> 
         <td align="center" width="90"> <a href="/default" title="Click to go back to main page"><img src="/Content/Images/hem.gif" width="20" height="20" border="0"></a> </td> 
         <td align="left"> &nbsp; </td> 
         <td align="left"> <font color="#FFFFFF"><font size="+1">&nbsp;<b>lundin.info</b></font></font> </td> 
         <td align="center"> &nbsp; </td> 
         <td align="right"> &nbsp; </td> 
        </tr> 
       </tbody>
      </table> </td> 
    </tr> 
    <tr> 
     <td class="menu" bgcolor="#42699C" width="120" align="left" valign="top" nowrap> 
      <table cellpadding="3" cellspacing="0"> 
       <tbody>
        <tr> 
         <td align="left" valign="top"> <br> <font color="#FFFFFF"> <font size="-1"> 
            <div align="left">
             <b><font color="#FFCC66">.NET</font></b>
            </div> »&nbsp;<a href="calculator" class="menu">Calculator</a><br> »&nbsp;<a href="azureblobbackup" class="menu">AzureBlobBackup</a><br> »&nbsp;<a href="mathparser" class="menu">Mathparser</a><br> <p> </p>
            <div align="left">
             <b><font color="#FFCC66">Java</font></b>
            </div> »&nbsp;<a href="mathpackage" class="menu">Ilmath</a><br> »&nbsp;<a href="graphapplet" class="menu">GraphApplet</a><br> <p> </p>
            <div align="left">
             <b><font color="#FFCC66">Codewars katas</font></b>
            </div> »&nbsp;<a href="https://www.codewars.com/kata/symbolic-differentiation-of-prefix-expressions" target="_blank" class="menu">Symbolic diff</a><br> »&nbsp;<a href="https://www.codewars.com/kata/implement-pagination" target="_blank" class="menu">Pagination</a><br> »&nbsp;<a href="https://www.codewars.com/kata/the-social-network" target="_blank" class="menu">Social Network</a><br> 
            <!-- img src="https://www.codewars.com/users/pln/badges/micro" /> --> </font></font><p><font color="#FFFFFF"><font size="-1"> </font> </font> </p></td> 
        </tr> 
       </tbody>
      </table> </td> 
     <td align="left" width="100%" valign="top" class="main"> 
      <div style="margin-left: 3px; margin-top: 3px;"> 
       <style type="text/css">
    pre {
        background-color: #FFFFE6;
        border: 1px solid black;
    }
</style> 
       <table bgcolor="#FFFFFF" width="660" class="header"> 
        <tbody>
         <tr> 
          <td> <b> <font color="000066"> <font size="+1">info.lundin.math - ExpressionParser</font> </font> </b> </td> 
         </tr> 
        </tbody>
       </table> 
       <br> 
       <b>Patrik Lundin, <a href="javascript:contact()">patrik<img src="/Content/images/at.gif" border="0">lundin.info</a></b> 
       <p> Math expression parser, evaluates a string mathematical expression and returns a double value. </p> 
       <p> </p>
       <h4>Download/Install</h4> 
       <div style="background-color: #FFFFE6; border: 1px black solid; padding: 10px 5px 5px 55px;"> 
        <strong> <a href="content/files/mathparser.zip" onclick="ga('send', 'event', 'files', 'download', 'files/mathparser.zip');">Download Here</a> </strong> 
        <p> or install with nuget from package manager console: </p> 
        <p> <strong>Install-Package info.lundin.math.dll</strong> </p> 
       </div> 
       <p></p> 
       <h4>Quick Start</h4> 
       <pre>
        ExpressionParser parser = new ExpressionParser();
        parser.Values.Add("x", 2);
        parser.Values.Add("y", 10);
        double result = parser.Parse("x^3+5x^2-3");
    </pre> 
       <h4>Updating variable values</h4> 
       <pre>
        ExpressionParser parser = new ExpressionParser();
        // Create value instances
        DoubleValue xval = new DoubleValue();
        DoubleValue yval = new DoubleValue();
        // Add values for variables x and y
        parser.Values.Add("x", xval);
        parser.Values.Add("y", yval);
        xval.Value = 2; // Update value of "x"
        yval.Value = 10; // Update value of "y"
        double result = parser.Parse("x^3+5x^2-3");
    </pre> Updating values using the SetValue method: 
       <pre>
        parser.Values["x"].SetValue(2); // x previously added with Add
        parser.Values["y"].SetValue(10); // y previously added with Add
    </pre> Updating by casting and setting the Value property: 
       <pre>
        ((DoubleValue)parser.Values["x"]).Value = 2; // x previously added with Add
        ((DoubleValue)parser.Values["y"]).Value = 10; // y previously added with Add
    </pre> 
       <h4>Faster evaluation by keeping the expression tree</h4> 
       <pre>
        
        ExpressionParser parser = new ExpressionParser();
        parser.Values.Add("x", 2);
        parser.Values.Add("y", 10);
        // Parse once
        string func = "x^3+5x^2-3";
        parser.Parse(func);
        // Fetch expression
        Expression expression = parser.Expressions[func];
        // Evaluate saved expression
        double result = parser.EvalExpression(expression);
    </pre> 
       <h4>Serializing parsed expressions</h4> 
       <p> To save some initial parsing time you can serialize the expressions to a Stream for storage and later use. </p> 
       <p> Both the Expression (see above) and the ExpressionDictionary accessable by the property parser.Expressions have Save and Load methods that take a Stream as parameter. </p> 
       <p> Serializing should only be needed with large sets of expressions. </p> 
       <p> Please note that serializing expressions and then deserializing using a different culture setting may<br> have unintended effects, if you do use the serialization feature it is recommended to leave the culture setting to the default invariant culture. </p> 
       <h4> Supported operators and functions </h4> 
       <p>+, -, *, /, ^, %</p> 
       <p> ^ is raised to (power) for example 3^2<br> % is the modulo operator </p> 
       <p> sqrt, sin, cos, tan, atan, acos, asin, acotan, exp, ln, log, sinh, cosh, tanh, abs, ceil, floor, fac, sfac, round, fpart </p> 
       <p> These functions mostly map to the System.Math functions except fac, sfac which is the factorial and semi-factorial functions and fpart which returns the decimal part of a value. </p> 
       <p> !, ==, !=, ||, &amp;&amp;, &gt;, &lt; , &gt;=, &lt;= Logical operators, 1.0 means true, 0.0 means false. If an expression evaluates to anything other than 1.0 it is considered false. </p> 
       <p> There is currently no support for adding additional operators or functions. </p> 
       <h4>Supported constans</h4> 
       <p> PI (value of System.Math.PI)<br> Euler (value of System.Math.E) true (1.0)<br> false (0.0)<br> infinity (value of Double.PositiveInfinity)<br> </p> 
       <h4>Variable naming restrictions</h4> 
       <p> All variable names must start with an alphabetic letter (a-z) and may contain digits at the end but not inside the variable name. </p> 
       <p> Variable names cannot contain the name of a function or the symbol of an operator. Examples: x, y, z, var1, var2, myverylongvariablename </p> 
       <h4>Properties and settings</h4> 
       <p> The following properties can be set on the ExpressionParser: </p> 
       <p> RequireParentheses - toggles the requirement to use parentheses around function arguments (default true)<br> ImplicitMultiplication - toggles if implicit multiplication is allowed (such as 3x instead of 3*x) (default true)<br> Culture - the culture to use when parsing, affects decimal and groupign separators (default CurltureInfo.InvariantCulture)<br> Expressions - provides access to the ExpressionDictionary containing all parsed expressions.<br> Values - provides access to the ValuesDictionary for adding variable/value pairs to use for evaluating expressions. </p> 
       <h4>Cultures and decimal separators</h4> 
       <p> The default culture is set to CultureInfo.InvariantCulture which uses a single dot (.) as the decimal separator and comma (,) as grouping (thousands) separator. </p> 
       <p> You can change the culture by setting the property Culture in the parser, if you do change the culture the number decimal separator in your expressions must match the culture. It is recommended that you use the default invariant culture and use a dot as a decimal separator especially if you decide to save parsed expressions as serialized data. </p> 
       <p> Culture fa, fa-IR uses the division operator (/) as the decimal separator, this is not allowed in the parser and the recommended solution is to use the invariant culture. </p> 
       <p> Currency symbols are not allowed. Thousands separators are supported but not recommended to use. </p> 
       <p> Cultures using the same decimal and grouping separators are not allowed. </p> 
       <h4> Limitations of using double values</h4> 
       <p> If you use the parser for financial calculations please make sure you understand how IEEE754 floating point values work and the rounding errors that may result. </p> 
       <p> It is generally not recommended to use float or double values for money applications since these are floating point values with a binary representation, for languages that have them a decimal representation is recommended, however this parser uses the default System.Math library and only operate with double values. </p> 
       <h4> Unit testing</h4> 
       <p> The provided tests should not be considered to fully test every scenario. </p> 
       <p> Remember it is your responsibility to verify that the parser works correctly for the intended use, it is recommended that you write some additional unit tests that tests with your specific data. </p> 
       <h4> License and disclaimer</h4> 
       <p> Patrik Lundin, patrik (at) lundin.info, http://www.lundin.info Copyright 2002-2016 Patrik Lundin </p> 
       <p> Library and Source code released under the Microsoft Public License (Ms-PL)<br> http://www.microsoft.com/en-us/openness/licenses.aspx#MPL </p> 
      </div> </td> 
    </tr> 
    <tr> 
     <td class="menu" bgcolor="#42699C" width="1024" height="100" colspan="2" align="left" valign="top"> 
      <div align="center" style="color: white; font-weight: bold; padding: 5px;">
        © 1997-2017 Patrik Lundin, 
       <a href="javascript:contact()" style="color: #FFFFFF">patrik (at) lundin.info</a> 
       <br> 
       <img src="/Content/Images/mcsd.png" height="70">&nbsp; 
       <img src="/Content/Images/mcp.png" height="70">&nbsp; 
       <img src="/Content/Images/scjp.png" height="70"> 
      </div> </td> 
    </tr> 
   </tbody>
  </table>   
 </body>
</html>