<!doctype html>
<html>
 <head> 
  <meta http-equiv="content-type" content="text/html; charset=windows-1252"> 
  <link href="../cs17012.css" type="text/css" rel="stylesheet"> 
  <title>3.3—Math Functions</title> 
 </head> 
 <body> 
  <div id="page"> 
   <div id="lessonBanner" class="banner04"> 
    <img id="lessonLogo" src="../images/c.png" alt="A decorative icon."> 
    <p id="lessonSubtitle">Section 3.3</p> 
    <p id="lessonTitle">Math Functions</p> 
   </div> 
   <br style="clear:both;"> 
   <div class="content"> 
    <p class="firstLine"> <img src="images/e01c.gif" class="right" alt="Complex calculations."> <b><span class="cap">I</span>n the last section, you looked at Java's arithmetic operators</b>, and learned how to write <i>expressions</i>. Many calculations, however, require <i>more</i> than a simple expression. To meet this need, most programming languages have <i>libraries</i>, collections of reusable <b>functions</b> that are used to build more complex software. </p> 
    <p> To meet this need, the Java class libraries include the <b>java.lang.Math</b> class which contains functions for numeric operations such as calculating roots, sines and exponents. </p> 
    <h2>Functions and the Math Class</h2> 
    <p> <img src="images/functions.png" class="left" alt="Functions in Math."> The <code>java.lang.Math</code> class contains a set of <b>functions</b> for basic numeric operations. Similarly, the <code>String</code> class contains functions that provide information about <code>String</code> objects. </p> 
    <p style="font-size:18pt;color:forestgreen;text-align:center;"> So, what, exactly, is a function? </p> 
    <p> A function in programming is <b>similar</b> to the mathematical definition of a function. In math, a function is a relationship between inputs and outputs, so that any individual input maps to exactly one output. </p> 
    <br style="clear:both;"> 
    <p> In <b>programming languages</b>, a function is a command that takes zero or more inputs, and then <b>returns a value</b> based on the input value. You can use functions in place of literal values, variables or expressions in your programs. </p> 
    <p> <img src="images/eight-ball.png" class="right" alt="The magic 8 ball."> Think of a function as "calculating black box", kind of like the magic eight-ball. You ask it a question (that's the <i>input</i> to the function) and it "answers" you by giving you back or <b>returning</b> a result. </p> 
    <p> Normally, you'll create a variable to store the result returned from a function, but you can also print the value, or pass it as a parameter to another method. Calling a function without storing or otherwise using the returned value is a common <b>logical error</b> in many programs. </p> 
    <h3>Locating the Math Class</h3> 
    <p> Object-oriented libraries are called <b>class libraries</b>, and in Java, these class libraries are organized into smaller "family" groups called <b>packages</b>. To use the code in a package, you <b>import</b> the package, like we did for the classes in the <code>java.awt</code>, <code>acm.program</code>, and <code>java.util</code> packages. </p> 
    <p> The functions in the <code>Math</code> class are part of the <code>java.lang</code> package. This package, recall, is automatically loaded and referenced by your Java Virtual Machine. You don't <b>have</b> to add any <code>import</code> statements to use any of the classes contained in <code>java.lang</code>. </p> 
    <div class="info"> 
     <p>Actually, you <b>never</b> have to use import statements to access any class in any Java library. Instead, you can use the <b>fully qualified name</b>, like <code>java.util.Scanner</code> in your code, and skip the <code>import</code> statements altogether. All the <code>import</code> statement does is make your code simpler, and easier to read. </p> 
    </div> 
    <h3>Static Import and the Math Functions</h3> 
    <p> Even though you don't <b>need</b> to <code>import</code> the <code>Math</code> class, Java 5 introduced a new feature, called <b>static imports</b>, that makes it easier to use the functions in the <code>Math</code> class, without using the prefix <code>Math.</code> every time. To do this, just add the following statement to the top of your program like this: </p> 
    <p class="code"><span style="font-size:1.2em;"> import static java.lang.Math.*; </span> </p> 
    <p> After doing this, to call one of the <code>Math</code> functions, (like the square root function shown here), you just write: </p> 
    <p class="code"><span style="font-size:1.2em;"> double root = sqrt(value); </span> </p> 
    <p> In this case:</p> 
    <ul> 
     <li><b>sqrt()</b> is the function you are calling.</li> 
     <li><b>value</b> is the parameter you are passing to the function. For the <code>sqrt()</code> function, value should be a number. </li> 
     <li><b>root</b> is a variable used to store the answer <b>returned</b> by the <code>sqrt()</code> function. If you don't store or otherwise use the answer, the square root is still calculated, but nothing is done with the returned value. </li> 
    </ul> 
    <p> You can use <code>static import</code> in DrJava as well as in your programs. In your programs, the <code>static import</code> statement <b>must go at the top of your file</b> (if you use it). In DrJava, you can type it in at any time, like this:<br> <img src="images/drjava-math01.gif" class="inlineCenter" alt="Static import with DrJava"> Notice that when you <b>call</b> the <code>sqrt()</code> function in DrJava, you <b>don't</b> need a semicolon, since we're taking advantage of the Interactions Pane's <b>automatic evaluation display</b> feature. In a normal program, though, your code looks a little different. </p> 
    <h3>Using Functions</h3> 
    <p> In a regular program, simply using the value like this is perfectly fine:<br> <img src="images/drjava-math02.gif" class="inlineCenter" alt="Using the function value."> Normally, though, instead of using a function value directly, you'll save it in a variable, and then use the variable when you need it, like this:<br> <img src="images/drjava-math03.gif" class="inlineCenter" alt="Saving the function value."> This way you don't need to calculate the function value over and over. You can just calculate it once. </p> 
    <h4>The WRONG Way</h4> 
    <p> The most common mistake I see when students learn to use functions, is to just <b>call</b> the function, like they would call a procedure like <code>System.out.println()</code>. Here's an example:<br> <img src="images/drjava-math04.gif" class="inlineCenter" alt="Calling a function without saving."> While this works just fine in the DrJava environment, in a real program, </p> 
    <p class="ry" style="padding:.25em;border:1px solid gray; width:75%; font-weight:bold;font-size: 18pt; margin:auto;text-align:center;"> This is always a logical error </p> 
    <h3>Standard Function Call Syntax</h3> 
    <p> All of the functions in the <code>Math</code> class are known as <b>class</b> or <code>static</code> methods. Before Java 5 introduced the <code>static import</code> statement, the only way to use a <code>static</code> method was to send a message to the <b>class that contains it</b> instead of sending a message to an <b>object</b> (like you did with the <code>println()</code> message and the <code>System.out</code> object). </p> 
    <p> To use this alternative syntax to call a method in the <code>Math</code> class, you just use the <b>name of the class</b> before the function name, like this:<br> <img src="images/drjava-math05.gif" class="inlineCenter" alt="Using the standard syntax."> When you use this standard syntax, you <b>don't</b> need to use the <code>static import</code> statement. </p> 
    <div class="info"> 
     <p> When you look up a method in the Javadocs, any method that has the word <code>static</code> in the left-hand, return-type column is a class method, and can be used either by adding a <code>static import</code> statement, or by using the traditional syntax shown here. </p> 
    </div> 
    <h3>More Math Functions</h3> 
    <p> The <code>Math</code> class contains the normal set of functions that you'd expect in a rudimentary math library. Java doesn't have a <b>exponential operator</b>, but it does have a function named <code>pow()</code> that will raise any number to a power. Here's its signature: </p> 
    <p class="code"> <span style="font-size:1.2em;"> double pow(double a, double b) </span> </p> 
    <p> The method returns <b>a</b> raised to the <b>b</b><sup>th</sup> power as a <code>double</code>. Both parameters are of type double, but you can pass <code>int</code> parameters as well. Here's an example:<br> <img src="images/pow01.gif" class="inlineCenter" alt="Using the pow() function."> In the first example, the integers 2 and 3 are passed to calculate two raised to the third power. Notice that even though the actual parameters are type <code>int</code>, the <b>returned result</b> is type <code>double</code>. That means that just as variables have types, so do functions. Notice, in the second example, that either, or both parameters may be doubles as well. </p> 
    <p> You may also want to make use of the <code>static final</code> (class) constants: <code>E</code> which represents the irrational mathematical constant <b><i>e</i></b>, and <code>PI</code>. Here's an example program that used both <code>pow()</code> and <code>E</code> to calculate the effective annual interest rate on an investment if the interests is calculated (or <i>compounded</i>) monthly, or "infinitely":<br> <img src="images/compounding.gif" class="inlineCenter" alt="Using Math functions and constants."> </p> 
    <div class="alert"> 
     <p> If you <i>don't</i> add the <code>static import</code> statement, you'll need to refer to these as <code>Math.pow()</code>, <code>Math.E</code> and <code>Math.PI</code> in your programs. </p> 
    </div> 
    <h4>Other Functions</h4> 
    <p> Another method you may commonly use is the <code>sqrt()</code> method, which returns the square root of its argument. There are also <code>min()</code> and <code>max()</code> functions for finding the minimum and maximum of two values, and <code>abs()</code> function for finding the absolute value of a number, and a <code>round()</code> function for converting a floating-point number to its closest integer value. </p> 
    <p> Less frequently used methods (depending upon your interests, of course) include the methods for performing logarithm and trigonometric functions. Here's a brief list: <br> <img src="images/mathfunctions.gif" class="inlineCenter" alt="The Math class functions."> </p> 
    <h3>Math.random()</h3> 
    <p> One <code>Math</code> function that I think you'll find very useful in your program simply generates "random" numbers. I find uses for this everywhere, from shuffling a deck of cards to calculating the trajectories for the aliens attacking my earth base. To use it, you call the <code>Math.random()</code> method like this: </p> 
    <p class="code"> <span style="font-size:1.2em;"> double rand = random(); </span> </p> 
    <p> After you've done this, the <code>double</code> variable <code>rand</code> will contain a number between <b>0.0</b> and <b>1.0</b>. (The number will always be less than 1.0, but it may include 0.0.) </p> 
    <p> The number returned by <code>random()</code> is called a <b>pseudorandom</b> number, because the numbers produced by the function repeat themselves if given the same starting value (called the <b>seed</b>). </p> 
    <p> A number between 0.0 and 1.0 might not seem very useful by itself, but it is easy to "massage" the results into a form you can use, by using some of the calculations you saw in the previous section. Here's a possible application, for instance. </p> 
    <h4>Pick a Year, Any Year</h4> 
    <p> <img src="images/e03.jpg" class="right" alt="Gene Autry, Singing Cowboy."> Suppose you need to pick a random year from a particular decade; you might be writing a Trivia application like the greatest country music hits from the 1950s, for instance, or something similar. </p> 
    <p> To do this, you need to know two pieces of information:</p> 
    <ol> 
     <li class="d">How many <b>possible</b> numbers are there?</li> 
     <li class="d">What's the lowest possible number?</li> 
    </ol> 
    <p> For the "greatest hits" application, there are ten possible numbers, (1950, 1951,...1959), and the lowest possible number is 1950. Let's create a couple of constants to represent those two values:<br> <img src="images/random01.gif" class="inlineCenter" alt="Range and floor for a random calculation."> Once we've done that, we can use <code>Math.random()</code> to generate a random number for our featured year, but before storing it in the variable, we'll manipulate it like this: </p> 
    <ol> 
     <li class="d">Multiply the result by RANGE because we have 10 possibilities.</li> 
     <li class="d">Because <code>Math.random()</code> can return 0.0, but never 1.0, add FLOOR to the result. </li> 
     <li class="d">Because each year must be an integer value, cast the result to an <code>int</code>. </li> 
    </ol> 
    <p>Here's what these steps look like in code:<br> <img src="images/random02.gif" class="inlineCenter" alt="Calculating a random year."> The <code> + FLOOR</code> portion of the expression can go inside or outside of the parentheses, but the multiplication and the call to the <code>random()</code> method <b>must be inside the parentheses</b>. If you fail to do this, your "random" numbers will <b>all</b> be the year 0, which is probably not what you want. </p> 
    <div class="info"> 
     <p> In the example shown here, I've used a <code>static</code> import to make the <code>Math</code> functions accessible to my program. If you <b>don't</b> do this, then you'll need to use the standard <code>static</code> method syntax, <code>Math.random()</code>. </p> 
    </div> 
    <div class="alert"> 
     <p> DrJava is great for trying out functions like this. It does have a few bugs, though. For instance, if you use <code>static imports</code> it sometimes has problems recognizing the <code>sqrt()</code> function. When things like that happen, you can write a short console program, just to see if the problem is with your code, or with the DrJava plugin. </p> 
    </div> 
    <p> Once nice feature of DrJava is using the up-arrow key to retype a previous expression. I've used it here to check my calculation several times and make sure that the numbers really are random:<br> <img src="images/random03.gif" class="inlineCenter" alt="More random numbers."> </p> 
    <div class="box"> 
     <img src="../images/dragnet3.png" class="leftCorner" alt="Dragnet."> 
     <p class="title"> Math Functions Summary </p> 
     <ul> 
      <li>The <code>java.lang.Math</code> class contains a set of common <b>numeric functions</b> to perform more complex calculations. </li> 
      <li> The <code>Math</code> class is in the <code>java.lang</code> package so you don't need to use any <code>import</code> statements to use its functions. </li> 
      <li> To <b>call</b> a function in the <code>Math</code> class, you commonly pass the <b>input value</b> as a parameter, and use the assignment operator to store the <b>output</b> or <b>returned value</b> in a variable. </li> 
      <li> The functions in the <code>Math</code> class are known as <b>class</b> or <b><code>static</code></b> methods. When calling the method, you don't use an object, but <b>send your request to the class</b> instead:<br> <code>double root = Math.sqrt(7.35);</code> </li> 
      <li> To use the functions without specifying the <code>Math</code> class as the receiver each time, you can add <code>import static java.lang.Math.*</code> to the top of your program. </li> 
      <li> The <code>Math.pow(a, b)</code> function calculates <code>a</code> raised to the power of <code>b</code>. Both parameters may be either <code>int</code> or <code>double</code>, but <b>the result is always</b> <code>double</code>. </li> 
      <li> The <code>Math.random()</code> function returns a random number between <code>0</code> and <code>1</code> (excluding <code>1</code>). By using multiplication you can convert that value into a more practical range of random numbers. </li> 
     </ul> 
    </div> 
   </div> 
   <div class="footer">
     Materials on this web site ? 1995-2075, 
    <a href="mailto:StephenGilbert@gmail.com">Stephen Gilbert</a> All rights reserved.
    <br> Any materials may be reproduced for non-profit purposes so long as
    <br> (1) this notice remains intact and (2) you notify me of your use. 
   </div> 
  </div>   
 </body>
</html>