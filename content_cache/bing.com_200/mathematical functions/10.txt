<!doctype html>
<html lang="en">
 <head> 
  <meta charset="UTF-8"> 
  <meta name="HandheldFriendly" content="True"> 
  <meta name="MobileOptimized" content="480"> 
  <meta name="viewport" content="width=device-width, height=device-height initial-scale=1.0, maximum-scale=1.0, user-scalable=0"> 
  <title>Java Math Operators and Math Class</title> 
  <meta name="description" content="This Java math tutorial explains both the basic Java math operators as well as the more advanced Java Math class."> 
  <meta name="keywords" content="java math operator class"> 
  <meta name="author" content="Jakob Jenkov"> 
  <meta name="twitter:card" content="summary_large_image"> 
  <meta name="twitter:site" content="@jjenkov"> 
  <meta name="twitter:title" content="Java Math Operators and Math Class"> 
  <meta name="twitter:description" content="This Java math tutorial explains both the basic Java math operators as well as the more advanced Java Math class."> 
  <meta name="twitter:creator" content="@jjenkov"> 
  <meta name="twitter:domain" content="jenkov.com"> 
  <meta name="twitter:image:src" content="http://tutorials.jenkov.com/images/teaser500-300-tutorials.png"> 
  <meta name="og:type" content="article"> 
  <meta name="og:title" content="Java Math Operators and Math Class"> 
  <meta property="og:url" content="http://tutorials.jenkov.com/java/math-operators-and-math-class.html"> 
  <meta property="og:description" content="This Java math tutorial explains both the basic Java math operators as well as the more advanced Java Math class."> 
  <meta property="og:image" content="http://tutorials.jenkov.com/images/teaser500-300-tutorials.png"> 
  <link href="https://plus.google.com/108227213807945109821" rel="publisher"> 
  <meta name="google-site-verification" content="i_TwzdElg-by5uXLvyAjuIaCjxo0yjtW8LdRPUDEEcw"> 
  <!-- jQuery --> 
  <!--<script src="https://code.jquery.com/jquery-1.12.0.min.js"></script> --> 
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script> 
 </head> 
 <body> 
  <style>
body {background-color: #f0f0f0;background-image: linear-gradient(180deg, #f0f0f0, #e0e0e0);}
.dataTable th, .dataTable td { padding: 2px 8px; }
</style> 
  <style id="layoutCss"></style> 
  <style id="jqcCss"></style> 
  <style id="articleCss"></style> 
  <style id="navBarCss"></style> 
  <style>
code  { font-size: 14px; }
</style> 
  <script>
lcv = "4";
ls = localStorage;
cacheLoaded = false;
pageLoaded = false;

var prevArticleInCategory = "/java/data-types.html";
var nextArticleInCategory = "/java/arrays.html";
</script> 
  <script id="jqcJs"></script> 
  <script id="bottomNavBarModule"></script> 
  <script>
function jsonp(url) {
    var script   = document.createElement("script"); script.type = "text/javascript"; script.src = url;
    document.body.appendChild(script);
}
function insertById(ids) {
    for(var i=0, n=ids.length; i < n; i++) {
        var el = document.getElementById(ids[i]);
        if(el != null) { el.innerHTML = localStorage[ids[i]]; }
    }
}
function insertByClass(ids) {
    for(var i=0, n=ids.length; i<n; i++) {
        var els = document.getElementsByClassName(ids[i]);
        for(var j=0,m=els.length; j<m; j++) { els[j].innerHTML = localStorage[ids[i]]; }
    }
}
function init() {
    if(cacheLoaded == true && pageLoaded == true) {
        console.log("initializing page");
        insertById(["layoutCss", "jqcCss", "topBarLogo", "articleCss", "navBarCss", "bottomNavBar", "bottomNavBarModule", "jqcJs"]);
        insertByClass(["authorPhoto", "authorSocialLinks", "newsletterForm", "googlePlusShare"]);
        $(document).ready(function() { bottomNavBarModule(); });
        console.log("page initialized");
    }
}
if(ls.lcv != lcv) {
    for(var i=0; i < ls.length; i++){
        ls.removeItem(ls.key(i));
    }
    jsonp("/cached-" + lcv + ".js");
    console.log("cache cleared");
} else {
    cacheLoaded = true;
}
ls.lcv = lcv;
</script> 
  <!-- jqComponents --> 
  <script>
articleLen = 30992;
adRandom = Math.random() * 100;

function dw(text) { document.write(text); }

function writeAd(adSlot, w, h) {
 dw("<script async src='//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js'><"); dw("/script>");
 dw("<ins class='adsbygoogle' style='display:inline-block;width:" + w + "px;height:" + h + "px' data-ad-client='ca-pub-5569543489255665' data-ad-slot='" +  adSlot + "'></ins>");
 dw("<script>");
 dw("(adsbygoogle = window.adsbygoogle || []).push({});");
 dw("<"); dw("/script>");
}

function topAdStyles(w, mT, mB) {
    var adEl = document.getElementById("topAds");
    adEl.style.width = (w + "px"); adEl.style.marginTop = (mT + "px"); adEl.style.marginBottom = (mB + "px"); adEl.style.marginRight = "auto"; adEl.style.marginLeft = "auto";
}

function bottomAdStyles(elId, w, mT, mB) {
    var adEl = document.getElementById(elId);
    adEl.style.width = (w + "px"); adEl.style.marginTop = (mT + "px"); adEl.style.marginBottom = (mB + "px"); adEl.style.marginRight = "auto"; adEl.style.marginLeft = "auto";
}
</script> 
  <div id="topBar"> 
   <div jqc-row jqc-row-paddings="0:0 3:24"> 
    <div jqc-cell="0:12c"> 
     <div id="topBarContent"> 
      <div id="topBarLogo"></div> 
      <div id="topBarPhrase">
       Tech and Media Labs
      </div> 
      <div id="topBarMenu"> 
       <a href="http://tutorials.jenkov.com">Tutorials</a> 
       <a href="http://jenkov.com/about/index.html">About</a> 
       <a href="http://jenkov.com/rss.xml">RSS</a> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="cookieNote"> 
   <div jqc-row jqc-row-widths="0:100% 4:1200" jqc-row-paddings="0:0 3:24"> 
    <div jqc-cell="0:12c"> 
     <div class="card">
       This site uses cookies to improve the user experience. 
      <button onclick="hideCookieNote()">OK</button> 
     </div> 
    </div> 
   </div> 
  </div> 
  <script>
function hideCookieNote() { document.getElementById("cookieNote").innerHTML = ""; ls.cookieNote = 0; }

if(ls.cookieNote == 0) {
    hideCookieNote();
}
</script> 
  <div jqc-row jqc-row-widths="0:100% 4:1200" jqc-row-paddings="0:0"> 
   <div jqc-cell="0:12c"> 
    <div id="topAds"> 
     <script>
                var adEl = document.getElementById("topAds");
                if(window.innerWidth > 970) {
                    if(adRandom <= 5){
                        writeAd("6094206201", 970, 90); /* wider ad - 5% of page views */
                        topAdStyles(970, 20, 20);
                    } else {
                        writeAd("7630855405", 728, 90); /* standard ad */
                        topAdStyles(728, 20, 20);
                    }
                } else if(window.innerWidth >= 728 && window.innerWidth <= 970)  {  /* Tutorials - Top Banner */
                    writeAd("7630855405", 728, 90);
                    topAdStyles(728, 20, 20);
                } else {  /* Tutorials - Top Banner - Mobile */
                    writeAd("3297914607", 320, 50);
                    topAdStyles(320, 10, 0);
                }
            </script> 
    </div> 
   </div> 
  </div> 
  <div id="main"> 
   <div jqc-row jqc-row-widths="0:100% 4:1200" jqc-column-counts="0:24" jqc-row-paddings="0:0 3:24" jqc-cell-spacings="0:8"> 
    <div jqc-cell="0:0c  3:7c"> 
     <div id="trailToc" class="card"> 
      <div id="trailTitle">
       Java Language
      </div>
      <ol>
       <li><a href="/java/index.html">Java Tutorial</a></li>
       <li><a href="/java/what-is-java.html">What is Java?</a></li>
       <li><a href="/java/installing-java-sdk.html">Installing the Java SDK</a></li>
       <li><a href="/java/your-first-java-app.html">Your First Java App</a></li>
       <li><a href="/java/main-method.html">Java Main Method</a></li>
       <li><a href="/java/java-project-overview-compilation-and-execution.html">Java Project Overview, Compilation and Execution</a></li>
       <li><a href="/java/core-concepts.html">Java Core Concepts</a></li>
       <li><a href="/java/syntax.html">Java Syntax</a></li>
       <li><a href="/java/variables.html">Java Variables</a></li>
       <li><a href="/java/data-types.html">Java Data Types</a></li>
       <li><a href="/java/math-operators-and-math-class.html"><b>Java Math Operators and Math Class</b></a></li>
       <li><a href="/java/arrays.html">Java Arrays</a></li>
       <li><a href="/java/strings.html">Java Strings</a></li>
       <li><a href="/java/operations.html">Java Operations</a></li>
       <li><a href="/java/if.html">Java if statements</a></li>
       <li><a href="/java/switch.html">Java Switch Statements</a></li>
       <li><a href="/java/for.html">Java for Loops</a></li>
       <li><a href="/java/while.html">Java while Loops</a></li>
       <li><a href="/java/classes.html">Java Classes</a></li>
       <li><a href="/java/fields.html">Java Fields</a></li>
       <li><a href="/java/methods.html">Java Methods</a></li>
       <li><a href="/java/constructors.html">Java Constructors</a></li>
       <li><a href="/java/packages.html">Java Packages</a></li>
       <li><a href="/java/access-modifiers.html">Java Access Modifiers</a></li>
       <li><a href="/java/inheritance.html">Java Inheritance</a></li>
       <li><a href="/java/nested-classes.html">Java Nested Classes</a></li>
       <li><a href="/java/abstract-classes.html">Java Abstract Classes</a></li>
       <li><a href="/java/interfaces.html">Java Interfaces</a></li>
       <li><a href="/java/interfaces-vs-abstract-classes.html">Java Interfaces vs. Abstract Classes</a></li>
       <li><a href="/java/enums.html">Java Enums</a></li>
       <li><a href="/java/annotations.html">Java Annotations</a></li>
       <li><a href="/java/lambda-expressions.html">Java Lambda Expressions</a></li>
       <li><a href="/java/exercises.html">Java Exercises</a></li>
      </ol> 
     </div> 
     <br>
     <br> 
     <!-- Left Bar Adsense Banner Ad --> 
     <div id="side-ads"> 
      <script>
                if(window.innerWidth >= 900){
                    if(adRandom <= 94)     { writeAd("5873880207", 300,  600);}
                    else if(adRandom < 96) { writeAd("3389666608", 160,  600);}
                    else                   { writeAd("4257546205", 300, 1050);}
                }
            </script> 
     </div> 
     <br>
     <br> 
     <div style="display: none;" class="card newsletterForm"> 
     </div> 
    </div> 
    <div jqc-cell="0:24c 3:17c"> 
     <div class="card"> 
      <h1>Java Math Operators and Math Class</h1> 
      <div id="mainBody"> 
       <div id="pageToc" itemscope itemtype="http://schema.org/SiteNavigationElement"> 
        <ul>
         <li><a href="#java-math-operators">Java Math Operators</a>
          <ul>
           <li><a href="#addition">Addition</a></li>
           <li><a href="#subtraction">Subtraction</a></li>
           <li><a href="#multiplication">Multiplication</a></li>
           <li><a href="#division">Division</a></li>
           <li><a href="#remainder-modulo">Remainder / Modulo</a></li>
           <li><a href="#java-math-operator-precedence">Java Math Operator Precedence</a></li>
          </ul></li>
         <li><a href="#java-integer-math">Java Integer Math</a></li>
         <li><a href="#java-floating-point-math">Java Floating Point Math</a>
          <ul>
           <li><a href="#floating-point-precision">Floating Point Precision</a></li>
          </ul></li>
         <li><a href="#the-java-math-class">The Java Math Class</a></li>
         <li><a href="#basic-math-functions">Basic Math Functions</a>
          <ul>
           <li><a href="#math-abs">Math.abs()</a></li>
           <li><a href="#math-ceil">Math.ceil()</a></li>
           <li><a href="#math-floor">Math.floor()</a></li>
           <li><a href="#floorDiv">Math.floorDiv()</a></li>
           <li><a href="#math-min">Math.min()</a></li>
           <li><a href="#math-max">Math.max()</a></li>
           <li><a href="#math-round">Math.round()</a></li>
           <li><a href="#math-random">Math.random()</a></li>
          </ul></li>
         <li><a href="#exponential-and-logarithmic-math-functions">Exponential and Logarithmic Math Functions</a>
          <ul>
           <li><a href="#math-exp">Math.exp()</a></li>
           <li><a href="#math-log">Math.log()</a></li>
           <li><a href="#math-log10">Math.log10()</a></li>
           <li><a href="#math-pow">Math.pow()</a></li>
           <li><a href="#math-sqrt">Math.sqrt()</a></li>
          </ul></li>
         <li><a href="#trigonometric-math-functions">Trigonometric Math Functions</a>
          <ul>
           <li><a href="#math-pi">Math.PI</a></li>
           <li><a href="#math-sin">Math.sin()</a></li>
           <li><a href="#math-cos">Math.cos()</a></li>
           <li><a href="#math-tan">Math.tan()</a></li>
           <li><a href="#math-asin">Math.asin()</a></li>
           <li><a href="#math-acos">Math.acos()</a></li>
           <li><a href="#math-atan">Math.atan()</a></li>
           <li><a href="#math-atan2">Math.atan2()</a></li>
           <li><a href="#math-sinh">Math.sinh()</a></li>
           <li><a href="#math-cosh">Math.cosh()</a></li>
           <li><a href="#math-tanh">Math.tanh()</a></li>
           <li><a href="#math-todegrees">Math.toDegrees()</a></li>
           <li><a href="#math-toradians">Math.toRadians()</a></li>
          </ul></li>
        </ul> 
       </div> 
       <div id="lastUpdate"> 
        <table>
         <tbody>
          <tr>
           <td class="authorPhoto"></td> 
           <td><p style="margin: 0px 0px 6px 0px;"> Jakob Jenkov<br> Last update: 2015-03-15 </p> 
            <div class="authorSocialLinks"></div> </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <p> Java contains a set of built-in math operators for performing simple math operations on Java variables. The Java math operators are reasonably simple. Therefore Java also contains the Java Math class which contains methods for performing more advanced math calculations in Java. This Java math tutorial will take a closer look at both Java's math operators as well as the Java Math class. </p> 
       <a name="java-math-operators"></a> 
       <h2>Java Math Operators</h2> 
       <p> Let me first explain you the four basic math operators in Java. The Java math operators are: </p> 
       <table> 
        <tbody>
         <tr>
          <td>Math Operator</td>
          <td>Description</td>
         </tr> 
         <tr>
          <td><code>+</code></td>
          <td>Performs addition</td>
         </tr> 
         <tr>
          <td><code>-</code></td>
          <td>Performs subtraction</td>
         </tr> 
         <tr>
          <td><code>*</code></td>
          <td>Performs multiplication</td>
         </tr> 
         <tr>
          <td><code>/</code></td>
          <td>Performs division</td>
         </tr> 
        </tbody>
       </table> 
       <p> Each of these math operators will be explained in more detail in the following sections. </p> 
       <a name="addition"></a> 
       <h3>Addition</h3> 
       <p> The <code>+</code> operator performs an addition of two values. This can be an addition of two constants, a constant and a variable, or a variable and a variable. Here are a few Java addition examples: </p> 
       <pre class="codeBox">
int sum1 = 10 + 20;      // adding two constant values
int sum2 = sum1 + 33;    // adding a variable and a constant
int sum3 = sum2 + sum2;  // adding two variables
</pre> 
       <p> The <code>+</code> operator will replace the two values with the sum of the two values at runtime. So at the place where the expression <code>sum1 + 33</code> is written, at runtime this will be replaced with the sum of the value of <code>sum1</code> and the constant value <code>33</code>. </p> 
       <p> You can of course create longer chains of additions and thus add more than two numbers. Here is a en example of adding 3 or more values together: </p> 
       <pre class="codeBox">
int sum1 = 10 + 20 + 30;
int sum3 = sum2 + 99 + 123 + 1191;
</pre> 
       <p> A commonly used math operation on variables is to set the variable equal to its own value plus another value. Here is how that looks: </p> 
       <pre class="codeBox">
int result = 10;
result = result + 20;
</pre> 
       <p> The second line of this example sets the <code>sum</code> variable equals to its own value (before being assigned the new value) + 20. Which means 10 + 20. </p> 
       <p> Since adding a value to a variable is a very common operation, Java contains a built-in operator for that specific purpose. It is the <code>+=</code> operator. Here is the example above rewritten to use the <code>+=</code> operator: </p> 
       <pre class="codeBox">
int result = 10;
result += 20;
</pre> 
       <p> The second line in this example adds 20 to the variable <code>result</code>. This equivalent to the code <code>result = result + 20;</code> </p> 
       <a name="subtraction"></a> 
       <h3>Subtraction</h3> 
       <p> The 
        <cod>
         -
        </cod> operator performs subtraction of one value from another. This can be a subtraction of a constant value from another constant value, a constant value from a variable, or a variable from a variable. Here are a few Java subtraction examples: </p> 
       <pre class="codeBox">
int diff1 = 200 - 10;
int diff2 = diff1 - 5;
int diff3 = diff1 - diff2;
</pre> 
       <p> The <code>-</code> operator will replace the two values with the difference between the two values, just like with the <code>+</code> operator. </p> 
       <p> You can create longer chains of subtractions and thus subtract more values from each other. Here is an example of subtracting two values from another in a single Java statement: </p> 
       <pre class="codeBox">
int diff = 200 - 10 - 20;
</pre> 
       <p> This works for variables too. </p> 
       <p> Remember, minus minus equals plus, just like in normal math. Here is an example of that: </p> 
       <pre class="codeBox">
int diff = 200 - (-10);
</pre> 
       <p> After executing this math expression the <code>diff</code> variable will contain the value <code>210</code> because <code>- (-10)</code> is equal to <code>+10</code> according to standard math rules. </p> 
       <p> Just like with addition, Java contains an operator specifically targeted at subtracting a value from a variable, and assigning the result to the variable. Here is first how that would look in Java without this operator: </p> 
       <pre class="codeBox">
int result = 200;
result = result - 10;
</pre> 
       <p> Here is how the same math operation looks with the <code>-=</code> operator: </p> 
       <pre class="codeBox">
int result = 200;
result -= 10;
</pre> 
       <a name="multiplication"></a> 
       <h3>Multiplication</h3> 
       <p> The <code>*</code> operator performs multiplication of two values. The values can be either two constant values, a variable and a constant value, or two variables. Here are a few Java multiplication examples: </p> 
       <pre class="codeBox">
int prod1 = 10 * 20;
int prod2 = prod1 * 5;
int prod3 = prod1 * prod2;
</pre> 
       <p> The <code>*</code> operator will replace the multiplication math expression with the product of the two values at runtime. </p> 
       <p> You can create longer chains of multiplication using the <code>*</code> operator. Here is an example of multiplying 3 values with each other: </p> 
       <pre class="codeBox">
int prod = 10 * 20 * 30;
</pre> 
       <p> Multiplying a variable with a value and assigning the value back to the variable is a common math operation in Java applications. Therefore Java contains an explicit operator for this operation. The <code>*=</code> operator. Here is first how the calculation would look without the <code>*=</code> operator: </p> 
       <pre class="codeBox">
int result = 10;
result = result * 20;
</pre> 
       <p> The second line of this example multiplies the value of the <code>result</code> variable (before being assigned the result of this calculation) with 20 and assigns the value back to the <code>result</code> variable. </p> 
       <p> Here is how the same math operation looks with the <code>+=</code> operator: </p> 
       <pre class="codeBox">
int result = 10;
result *= 20;
</pre> 
       <a name="division"></a> 
       <h3>Division</h3> 
       <p> The <code>/</code> operator performs division of one value by another. This can be dividing one constant with another, dividing a variable with a constant, or dividing one variable by another variable. Here are a few Java division examples: </p> 
       <pre class="codeBox">
int division1 = 100 / 10;
int division2 = division1 / 2;
int division3 = division1 / division2;
</pre> 
       <p> You can chain multiple values for division, but because of the Java math operator precedence (explained later) you have to pay attention to how you chain the values. Look at this division example: </p> 
       <pre class="codeBox">
int division = 100 / 10 / 2;
</pre> 
       <p> After executing this math expression the <code>division</code> variable will contain the value 5. That is the result because the math expression was calculated by first dividing 100 by 10 (= 10) and then 10 by 2 (=5). But, what if you had wanted to first divide the 10 by 2 (=5), and then divide the 100 by 5 (=20) ? You would have had to use parentheses to achieve that, like this: </p> 
       <pre class="codeBox">
int division = 100 / (10 / 2)
</pre> 
       <p> You will learn more about operator precedence and parentheses later in this Java math tutorial. </p> 
       <p> Java also contains a shortcut operator for dividing the value of a variable by another value, and assigning that value back to the variable. The <code>/=</code> operator. Here is first how that math operation looks in Java without the <code>/=</code> operator: </p> 
       <pre class="codeBox">
int result = 100;
result = result / 5;
</pre> 
       <p> The second line of this example divides the value of the <code>result</code> variable (the value it had before being assigned the result of this calculation) by 5, and assigns the result back to the <code>result</code> variable. </p> 
       <p> Here is how the same math operation looks with the <code>/=</code> operator: </p> 
       <pre class="codeBox">
int result = 100;
result /= 5;
</pre> 
       <a name="remainder-modulo"></a> 
       <h3>Remainder / Modulo</h3> 
       <p> The remainder math operation performs an integer division of one value by another and returns the remained of that division. The remainder operation is also called the <i>modulo</i> operation. The operator for the remainder / modulo operation is the <code>%</code> (percentage) character. Here is a module operation example: </p> 
       <pre class="codeBox">
int value    = 100;
int remainder = value % 9;
</pre> 
       <p> 100 divided by 9 is 11 with a remainder of 1 (11 times 9 is 99). Thus, the <code>remainder</code> variable is assigned the value 1. </p> 
       <p> Java also contains a shortcut operator for dividing a variable by another value and assigning the remainder of that division to the variable. The <code>%=</code> operator. Here is an example: </p> 
       <pre class="codeBox">
int result = 100;
result %= 9;
</pre> 
       <p> The second line of this example will assign the value 1 to the <code>result</code> variable. 1 is the result of 100 % 9. </p> 
       <a name="java-math-operator-precedence"></a> 
       <h3>Java Math Operator Precedence</h3> 
       <p> Once you start combining the Java math operators in math expressions it becomes important to control what calculations are to be executed when, in order to get the desired result. The Java math operators have a natural operator precedence which is similar to the precedence of standard math operators. </p> 
       <p> The math operators <code>*</code> and <code>/</code> for multiplication and division takes precedence over the <code>+</code> and <code>-</code> operators. That means, that multiplications and divisions are evaluated before addition and subtraction in math expressions. In case there are multiple <code>*</code> and <code>/</code> operators they will be calculated from left to right. Look at this Java math expression: </p> 
       <pre class="codeBox">
int result = 100 * 100 / 5 + 200 * 3 / 2;
</pre> 
       <p> First the multiplications and divisions are executed. There are two groups of three multiplications and divisions. Each group is executed from left to right: </p> 
       <pre class="codeBox">
100 * 100 = 10000;
10000 / 5 = 2000;
</pre> 
       <pre class="codeBox">
200 * 3 = 600;
600 / 2 = 300;
</pre> 
       <p> After calculating the multiplications and divisions the math expression looks like this: </p> 
       <pre class="codeBox">
int result = 2000 + 600;
</pre> 
       <p> Now the additions and subtractions are executed. The value assigned to the <code>result</code> variable is thus <code>2000 + 600 = 2600</code> . </p> 
       <p> You can control the operator precedence and sequence of calculations in math expressions in Java using parentheses. Math expressions inside parentheses have higher precedence than any other operator. Therefore expressions inside parentheses are calculated first. Inside parentheses the normal operator precedence applies. Here is the math expression from earlier, but with parentheses inserted which change the calculation: </p> 
       <pre class="codeBox">
int result = 100 * 100 / (5 + 200) * 3 / 2;
</pre> 
       <p> The value 100 is still multiplied by 100 (= 10,000), but now it is divided by 5 + 200 (=205) instead of 5. After this division the result is multiplied by 3 and then divided by 2. The result of executing this math expression in Java is 72 (rounding of calculations affect the result). </p> 
       <a name="java-integer-math"></a> 
       <h2>Java Integer Math</h2> 
       <p> Math operations performed on Java integer types (<code>byte</code>, <code>short</code>, <code>int</code> and <code>long</code>) behaves slightly different from how normal math operations work. Since Java integer types cannot contain fractions, each calculation involving one or more integer types have all fractions in the result cut off. Look at this math expression: </p> 
       <pre class="codeBox">
int result = 100 / 8;
</pre> 
       <p> The result of this division would be 12.5 , but since the two numbers are integers, the .5 fraction is cut off. The result is therefore just 12. </p> 
       <p> The rounding also occurs in subresults of larger calculations, as you will learn in the next section about Java floating point math. </p> 
       <a name="java-floating-point-math"></a> 
       <h2>Java Floating Point Math</h2> 
       <p> Java contains the two floating point data types <code>float</code> and <code>double</code>. These floating point types are capable of containing fractions in the numbers. If you need fractions in your math expressions you should use one of these data types. Here is a Java floating point math expression example: </p> 
       <pre class="codeBox">
double result = 100 / 8;
</pre> 
       <p> Even though the <code>result</code> variable is now a floating point type (<code>double</code>), the final result is still just 12 instead of 12.5 . The reason for that is that the two values in the math expression (100 and 8) are both integers. Thus, the result of dividing one by the other is first converted to an integer (12) before being assigned to the <code>result</code> variable. </p> 
       <p> To avoid rounding of calculations in math expressions in Java you must make sure that all data types involved in the math expression are floating point types. For instance, you could first assign the values to floating point variables like this: </p> 
       <pre class="codeBox">
double no1 = 100;
double no2 = 8;

double result = no1 / no2;
</pre> 
       <p> Now the <code>result</code> variable would end up with the value 12.5. </p> 
       <p> Java has a way to force all numbers in a calculation to be floating point variables. You suffix the numbers with either a capital F or D. Here is an example: </p> 
       <pre class="codeBox">
double result = 100D / 8D;
</pre> 
       <p> Notice the uppercase Ds after each number. This uppercase D tells Java that these numbers are to be interpreted as floating point numbers, and thus the division is supposed to be a floating point division which keeps fractions instead of cutting them off. </p> 
       <p> You can actually also force a number to be a <code>long</code> by suffixing the number with an uppercase L, but <code>long</code> is still an integer type, so it will still not keep the fractions in calculations. </p> 
       <a name="floating-point-precision"></a> 
       <h3>Floating Point Precision</h3> 
       <p> Java floating point data types are not 100% precise. You can experience situations where numbers with many fractions on do not add up to the number you expected. If a floating point calculation results in a number with more fractions than a <code>float</code> or a <code>double</code> can handle, fractions may be cut off. Granted, the given precision may still more than enough for many types of calculations, but keep in mind that fractions may actually get cut off. </p> 
       <p> Look at this Java floating point math code: </p> 
       <pre class="codeBox">
double resultDbl3 = 0D;
System.out.println("resultDbl3 = " + resultDbl3);

for(int i=0; i&lt;100; i++){
    resultDbl3 += 0.01D;
}
System.out.println("resultDbl3 = " + resultDbl3);
</pre> 
       <p> The output printed when executing this code with Java 8 is: </p> 
       <pre class="codeBox">
resultDbl3 = 0.0
resultDbl3 = 1.0000000000000007
</pre> 
       <p> The first <code>System.out.println()</code> statement correctly prints the value <code>0.0</code> , which is the start value of the the <code>resultDbl3</code> variable. </p> 
       <p> The second <code>System.out.println()</code> statement however prints a somewhat strange result. Adding the value 0.01 to 0 a total of 100 times should result in the value 1.0, right? But somehow the final result is <code>1.0000000000000007</code> . As you can see, somehow something goes wrong way down in the fractions. </p> 
       <p> Usually the Java floating point imprecision is insignificant, but it is still important to be aware of it. </p> 
       <a name="the-java-math-class"></a> 
       <h2>The Java Math Class</h2> 
       <p> The Java <code>Math</code> class provides more advanced mathematical calculations than what the basic Java math operators provide. The <code>Math</code> class contains methods for finding the maximum or minimum of two values, rounding values, logarithmic functions, square root, and trigonometric functions (sin, cos, tan etc.). </p> 
       <p> The <code>Math</code> is located in the <code>java.lang</code> package, and not in the <code>java.math</code> package. Thus, the fully qualified class name of the <code>Math</code> class is <code>java.lang.Math</code> . </p> 
       <p> Since many of the functions of the <code>Math</code> class are independent from each other, each method will be explained in its own section below. </p> 
       <a name="basic-math-functions"></a> 
       <h2>Basic Math Functions</h2> 
       <p> The <code>java.lang.Math</code> contains a set of basic math functions for obtaining the absolute value, highest and lowest of two values, rounding of values, random values etc. These basic math functions of the Java <code>Math</code> class will be covered in the following sections. </p> 
       <a name="math-abs"></a> 
       <h3>Math.abs()</h3> 
       <p> The <code>Math.abs()</code> function returns the absolute value of the parameter passed to it. The absolute value is the positive value of the parameter. If the parameter value is negative, the negative sign is removed and the positive value corresponding to the negative value without sign is returned. Here are two <code>Math.abs()</code> method examples: </p> 
       <pre class="codeBox">
int abs1 = Math.abs(10);  // abs1 = 10

int abs2 = Math.abs(-20); // abs2 = 20
</pre> 
       <p> The absolute value of 10 is 10. The absolute value of -20 is 20. </p> 
       <p> The <code>Math.abs()</code> method is overloaded in 4 versions: </p> 
       <pre class="codeBox">
Math.abs(int)
Math.abs(long)
Math.abs(float)
Math.abs(double)
</pre> 
       <p> Which of these methods are called depends on the type of the parameter passed to the <code>Math.abs()</code> method. </p> 
       <a name="math-ceil"></a> 
       <h3>Math.ceil()</h3> 
       <p> The <code>Math.ceil()</code> function rounds a floating point value up to the nearest integer value. The rounded value is returned as a <code>double</code>. Here is a <code>Math.ceil()</code> Java example: </p> 
       <pre class="codeBox">
double ceil = Math.ceil(7.343);  // ceil = 8.0
</pre> 
       <p> After executing this Java code the <code>ceil</code> variable will contain the value <code>8.0</code> . </p> 
       <a name="math-floor"></a> 
       <h3>Math.floor()</h3> 
       <p> The <code>Math.floor()</code> function rounds a floating point value down to the nearest integer value. The rounded value is returned as a <code>double</code>. Here is a <code>Math.floor()</code> Java example: </p> 
       <pre class="codeBox">
double floor = Math.floor(7.343);  // floor = 7.0
</pre> 
       <p> After executing this Java code the <code>ceil</code> variable will contain the value <code>8.0</code> . </p> 
       <a name="floorDiv"></a> 
       <h3>Math.floorDiv()</h3> 
       <p> The <code>Math.floorDiv()</code> method divides one integer (<code>int</code> or <code>long</code>) by another, and rounds the result down to the nearest integer value. If the result is positive, the effect is the same as using the Java <code>/</code> division operator described earlier in this text. </p> 
       <p> If the result is negative, however, the result is not the same. With the <code>/</code> division operator the fractions are simply truncated. For positive numbers this corresponds to rounding down. For negative numbers though, truncating the fractions correspond to rounding up. The <code>floorDiv()</code> method rounds down to the nearest negative integer, instead of the <i>rounding up</i> that would occur with fraction truncation. </p> 
       <p> Here is a <code>Math.floorDiv()</code> Java example: </p> 
       <pre class="codeBox">
double result3 = Math.floorDiv(-100,9);
System.out.println("result3: " + result3);

double result4 = -100 / 9;
System.out.println("result4: " + result4);
</pre> 
       <p> The output printed from this Java code is: </p> 
       <pre class="codeBox">
result3: -12.0
result4: -11.0
</pre> 
       <p> This shows the difference between the <code>/</code> division operator and <code>Math.floorDiv()</code> . </p> 
       <a name="math-min"></a> 
       <h3>Math.min()</h3> 
       <p> The <code>Math.min()</code> method returns the smallest of two values passed to it as parameter. Here is a <code>Math.min()</code> Java example: </p> 
       <pre class="codeBox">
int min = Math.min(10, 20);
</pre> 
       <p> After executing this code the <code>min</code> variable will contain the value 10. </p> 
       <a name="math-max"></a> 
       <h3>Math.max()</h3> 
       <p> The <code>Math.max()</code> method returns the largest of two values passed to it as parameter. Here is a <code>Math.max()</code> Java example: </p> 
       <pre class="codeBox">
int max = Math.max(10, 20);
</pre> 
       <p> After executing this code the <code>max</code> variable will contain the value 20. </p> 
       <a name="math-round"></a> 
       <h3>Math.round()</h3> 
       <p> The <code>Math.round()</code> method rounds a <code>float</code> or <code>double</code> to the nearest integer using normal math round rules (either up or down). Here is a Java <code>Math.round()</code> example: </p> 
       <pre class="codeBox">
double roundedDown = Math.round(23.445);
double roundedUp   = Math.round(23.545);
</pre> 
       <p> After executing these two Java statements the <code>roundedDown</code> variable will contain the value <code>23.0</code> , and the <code>roundedUp</code> variable will contain the value <code>24.0</code>. </p> 
       <a name="math-random"></a> 
       <h3>Math.random()</h3> 
       <p> The <code>Math.random()</code> method returns a random floating point number between 0 and 1. Of course the number is not fully random, but the result of some calculation which is supposed to make it as unpredictable as possible. Here is a Java <code>Math.random()</code> example: </p> 
       <pre class="codeBox">
double random = Math.random();
</pre> 
       <p> To get a random value between 0 and e.g. 100, multiply the value returned by <code>Math.random()</code> with the maximum number (e.g. 100). Here is an example of how that might look: </p> 
       <pre class="codeBox">
double random = Math.random() * 100D;
</pre> 
       <p> If you need an integer value, use the <code>round()</code>, <code>floor()</code> or <code>ceil()</code> method. </p> 
       <a name="exponential-and-logarithmic-math-functions"></a> 
       <h2>Exponential and Logarithmic Math Functions</h2> 
       <p> The Java <code>Math</code> class also contains a set of functions intended for exponential and logarithmic calculations. I will cover some of these math functions in the following sections. </p> 
       <a name="math-exp"></a> 
       <h3>Math.exp()</h3> 
       <p> The <code>Math.exp()</code> function returns <i>e</i> (Euler's number) raised to the power of the value provided as parameter. Here is a Java 
        <ocde>
         Math.exp()
        </ocde> example: </p> 
       <pre class="codeBox">
double exp1 = Math.exp(1);
System.out.println("exp1 = " + exp1);

double exp2 = Math.exp(2);
System.out.println("exp2 = " + exp2);
</pre> 
       <p> When this Java math code is executed it will print this output: </p> 
       <pre class="codeBox">
exp1 = 2.718281828459045
exp2 = 7.38905609893065
</pre> 
       <a name="math-log"></a> 
       <h3>Math.log()</h3> 
       <p> The <code>Math.log()</code> method provides the logarithm of the given parameter. The base for the logarithm is <i>i</i> (Euler's number). Thus, <code>Math.log()</code> provides the reverse function of <code>Math.exp()</code>. Here is a Java <code>Math.log()</code> example: </p> 
       <pre class="codeBox">
double log1  = Math.log(1);
System.out.println("log1 = " + log1);

double log10 = Math.log(10);
System.out.println("log10 = " + log10);
</pre> 
       <p> The output from this <code>Math.log()</code> example is: </p> 
       <pre class="codeBox">
log1 = 0.0
log10 = 2.302585092994046
</pre> 
       <a name="math-log10"></a> 
       <h3>Math.log10()</h3> 
       <p> The <code>Math.log10</code> method works like the <code>Math.log()</code> method except is uses 10 as is base for calculating the logarithm instead of <i>e</i> (Euler's Number). Here is a <code>Math.log10()</code> Java example: </p> 
       <pre class="codeBox">
double log10_1   = Math.log10(1);
System.out.println("log10_1 = " + log10_1);

double log10_100 = Math.log10(100);
System.out.println("log10_100 = " + log10_100);
</pre> 
       <p> The output printed from this Java <code>Math.log10()</code> example would be: </p> 
       <pre class="codeBox">
log10_1 = 0.0
log10_100 = 2.0
</pre> 
       <a name="math-pow"></a> 
       <h3>Math.pow()</h3> 
       <p> The <code>Math.pow()</code> function takes two parameters. The method returns the value of the first parameter raised to the power of the second parameter. Here is a <code>Math.pow()</code> Java example: </p> 
       <pre class="codeBox">
double pow2 = Math.pow(2,2);
System.out.println("pow2 = " + pow2);

double pow8 = Math.pow(2,8);
System.out.println("pow8 = " + pow8);
</pre> 
       <p> The output from this <code>Math.pow()</code> example would be: </p> 
       <pre class="codeBox">
pow2 = 4.0
pow8 = 256.0
</pre> 
       <p> In other words, the <code>Math.pow()</code> example calculate the values of 2<sup>2</sup> and 2<code>8</code> which are 4 and 256. </p> 
       <a name="math-sqrt"></a> 
       <h3>Math.sqrt()</h3> 
       <p> The <code>Math.sqrt()</code> method calculates the square root of the parameter given to it. Here are a few Java <code>Math.sqrt()</code> example: </p> 
       <pre class="codeBox">
double sqrt4 = Math.sqrt(4);
System.out.println("sqrt4 = " + sqrt4);

double sqrt9 = Math.sqrt(9);
System.out.println("sqrt9 = " + sqrt9);
</pre> 
       <p> The output printed from these Java <code>Math.sqrt()</code> examples would be: </p> 
       <pre class="codeBox">
sqrt4 = 2.0
sqrt9 = 3.0
</pre> 
       <a name="trigonometric-math-functions"></a> 
       <h2>Trigonometric Math Functions</h2> 
       <p> The Java <code>Math</code> class contains a set of trigonometric functions. These functions can calculate values used in trigonometry, like sine, cosine, tangens etc. I will cover the most used trigonometry functions in the following sections. If you are looking for a trigonometric function and you cannot find it here, check the JavaDoc for the Java <code>Math</code> class. The <code>Math</code> class just might have the function you are looking for, even if I have not described it here. </p> 
       <a name="math-pi"></a> 
       <h3>Math.PI</h3> 
       <p> The <code>Math.PI</code> constant is a <code>double</code> with a value that is very close to the value of PI - the mathematical definition of PI. You will often need the <code>Math.PI</code> field when making trigonometric calculations. </p> 
       <a name="math-sin"></a> 
       <h3>Math.sin()</h3> 
       <p> The <code>Math.sin()</code> method calculates the sine value of some angle value in radians. Here is a Java <code>Math.sin()</code> example: </p> 
       <pre class="codeBox">
double sin = Math.sin(Math.PI);
System.out.println("sin = " + sin);
</pre> 
       <a name="math-cos"></a> 
       <h3>Math.cos()</h3> 
       <p> The <code>Math.cos()</code> method calculates the cosine value of some angle value in radians. Here is a Java <code>Math.cos()</code> example: </p> 
       <pre class="codeBox">
double cos = Math.cos(Math.PI);
System.out.println("cos = " + cos);
</pre> 
       <a name="math-tan"></a> 
       <h3>Math.tan()</h3> 
       <p> The <code>Math.tan()</code> method calculates the tangens value of some angle value in radians. Here is a Java <code>Math.tan()</code> example: </p> 
       <pre class="codeBox">
double tan = Math.tan(Math.PI);
System.out.println("tan = " + tan);
</pre> 
       <a name="math-asin"></a> 
       <h3>Math.asin()</h3> 
       <p> The <code>Math.asin()</code> method calculates the arc sine value of a value between 1 and -1. Here is a Java <code>Math.asin()</code> example: </p> 
       <pre class="codeBox">
double asin = Math.asin(1.0);
System.out.println("asin = " + asin);
</pre> 
       <a name="math-acos"></a> 
       <h3>Math.acos()</h3> 
       <p> The <code>Math.acos()</code> method calculates the arc cosine value of a value between 1 and -1. Here is a Java <code>Math.acos()</code> example: </p> 
       <pre class="codeBox">
double acos = Math.acos(1.0);
System.out.println("acos = " + acos);
</pre> 
       <a name="math-atan"></a> 
       <h3>Math.atan()</h3> 
       <p> The <code>Math.atan()</code> method calculates the arc tangens value of a value between 1 and -1. Here is a Java <code>Math.atan()</code> example: </p> 
       <pre class="codeBox">
double atan = Math.atan(1.0);
System.out.println("atan = " + atan);
</pre> 
       <a name="math-atan2"></a> 
       <h3>Math.atan2()</h3> 
       <p> I am not exactly sure what <code>Math.atan2()</code> method does mathematically. Here is what the JavaDoc says: </p> 
       <p> "Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta)". </p> 
       <p> If you need this method, please read the JavaDoc. But now you know at least that it exists. </p> 
       <a name="math-sinh"></a> 
       <h3>Math.sinh()</h3> 
       <p> The <code>Math.sinh()</code> method calculates the hyperbolic sine value of a value between 1 and -1. Here is a Java <code>Math.sinh()</code> example: </p> 
       <pre class="codeBox">
double sinh = Math.sinh(1.0);
System.out.println("sinh = " + sinh);
</pre> 
       <a name="math-cosh"></a> 
       <h3>Math.cosh()</h3> 
       <p> The <code>Math.cosh()</code> method calculates the hyperbolic cosine value of a value between 1 and -1. Here is a Java <code>Math.cosh()</code> example: </p> 
       <pre class="codeBox">
double cosh = Math.cosh(1.0);
System.out.println("cosh = " + cosh);
</pre> 
       <a name="math-tanh"></a> 
       <h3>Math.tanh()</h3> 
       <p> The <code>Math.tanh()</code> method calculates the hyperbolic tangens value of a value between 1 and -1. Here is a Java <code>Math.tanh()</code> example: </p> 
       <pre class="codeBox">
double tanh = Math.tanh(1.0);
System.out.println("tanh = " + tanh);
</pre> 
       <a name="math-todegrees"></a> 
       <h3>Math.toDegrees()</h3> 
       <p> The <code>Math.toDegrees()</code> method converts an angle in radians to degrees. Here is a Java <code>Math.toDegrees()</code> example: </p> 
       <pre class="codeBox">
double degrees = Math.toDegrees(Math.PI);
System.out.println("degrees = " + degrees);
</pre> 
       <a name="math-toradians"></a> 
       <h3>Math.toRadians()</h3> 
       <p> The <code>Math.toRadians()</code> method converts an angle in degrees to radians. Here is a Java <code>Math.toRadians()</code> example: </p> 
       <pre class="codeBox">
double radians = Math.toRadians(180);
System.out.println("radians = " + radians);
</pre> 
       <div> 
       </div> 
       <div id="next">
        Next: 
        <a href="/java/arrays.html">Java Arrays</a>
       </div> 
       <div id="bottomSocial"> 
        <div style="display:inline-block;"> 
         <table> 
          <tbody>
           <tr>
            <td colspan="2"> 
             <div class="g-plus" data-action="share" data-height="24" data-annotation="none"></div> <script type="text/javascript">
                                    (function() {
                                        var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
                                        po.src = 'https://apis.google.com/js/platform.js';
                                        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
                                     })();
                                </script> <a href="https://twitter.com/share" class="twitter-share-button" data-via="jjenkov" target="_blank">Tweet</a> <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script> </td>
           </tr> 
           <tr>
            <td class="authorPhoto"></td>
            <td><p style="margin: 0px 0px 6px 0px;">Jakob Jenkov</p>
             <div class="authorSocialLinks"></div></td>
           </tr> 
          </tbody>
         </table> 
        </div> 
        <div style="display:inline-block;" class="newsletterForm"></div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <!-- Bottom ads - (nested row is working, but should perhaps not be a nested row?) (note: was a nested row in old design - not in new) --> 
  <div jqc-row jqc-row-paddings="0:0"> 
   <div jqc-cell="0:12c"> 
    <div id="pageBottomAds"> 
     <script>
                    if(articleLen >= 4000){ /* for longer articles place ads here, at the bottom of the page */
                        if(window.innerWidth >= 728 ) {  /* Adsense Ads - Bottom Banner */
                            if(adRandom < 5)       { writeAd("2721937400", 970, 90);  bottomAdStyles("pageBottomAds", 970, 20, 20);}
                            else if(adRandom < 30) { writeAd("9547200207", 970, 250); bottomAdStyles("pageBottomAds", 970, 20, 20);}
                            else                   { writeAd("7776167002", 728, 90);  bottomAdStyles("pageBottomAds", 728, 20, 20);}
                        } else if(window.innerWidth < 728) {  /* Adsense Ads - Bottom Banner - Mobile */
                            if(adRandom < 50) {
                                writeAd("4216244607", 320, 50); bottomAdStyles("pageBottomAds", 320, 10, 0);
                            } else {
                                writeAd("7377085404", 320, 100); bottomAdStyles("pageBottomAds", 320, 10, 0);
                            }
                        }
                    }
                </script> 
     <br>
     <br>
     <br> 
    </div> 
    <div style="height: 30px"></div> 
    <div id="disqusComments" class="card"> 
     <div id="disqus_thread"></div> 
     <script type="text/javascript">
                var disqus_shortname = 'tutorials-jenkov-com'; // required: replace example with your forum shortname

                /* * * DON'T EDIT BELOW THIS LINE * * */
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            </script> 
     <noscript>
      Please enable JavaScript to view the 
      <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
     </noscript> 
    </div> 
   </div> 
  </div> 
  <span id="layoutManager" jqc-type="jqcResponsiveLayoutManager" jqc-row-paddings="0:8 4:0"></span> 
  <div id="footerBar"> 
   <div jqc-row> 
    <div jqc-cell="0:12c">
      Copyright &nbsp;Jenkov Aps 
    </div> 
   </div> 
  </div> 
  <div id="trailTocFixedDiv"> 
   <div id="trailTocFixedCloseButton">
    Close TOC
   </div> 
   <div id="trailTocFixedInnerDiv"></div> 
  </div> 
  <div id="bottomNavBar"></div> 
  <!-- init page --> 
  <script>
pageLoaded = true;
init();
</script> 
  <!-- Google Analytics Script --> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-4036229-3', 'auto');
  ga('send', 'pageview');

</script>  
 </body>
</html>