<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<html>
 <head> 
  <!-- Generated by javadoc (build 1.5.0_02) on Mon Mar 05 23:03:07 CST 2007 --> 
  <title>
Evaluator (JEval)
</title> 
  <meta NAME="keywords" CONTENT="net.sourceforge.jeval.Evaluator class"> 
  <link REL="stylesheet" TYPE="text/css" HREF="../../../stylesheet.css" TITLE="Style"> 
  <script type="text/javascript">
function windowTitle()
{
    parent.document.title="Evaluator (JEval)";
}
</script> 
  <noscript> 
  </noscript> 
 </head> 
 <body bgcolor="white" onload="windowTitle();"> 
  <!-- ========= START OF TOP NAVBAR ======= --> 
  <a name="navbar_top">
   <!-- --></a> 
  <a href="#skip-navbar_top" title="Skip navigation links"></a> 
  <table border="0" width="100%" cellpadding="1" cellspacing="0" summary=""> 
   <tbody>
    <tr> 
     <td colspan="2" bgcolor="#EEEEFF" class="NavBarCell1"> <a name="navbar_top_firstrow">
       <!-- --></a> 
      <table border="0" cellpadding="0" cellspacing="3" summary=""> 
       <tbody>
        <tr align="center" valign="top"> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="../../../overview-summary.html"><font class="NavBarFont1"><b>Overview</b></font></a>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="package-summary.html"><font class="NavBarFont1"><b>Package</b></font></a>&nbsp;</td> 
         <td bgcolor="#FFFFFF" class="NavBarCell1Rev"> &nbsp;<font class="NavBarFont1Rev"><b>Class</b></font>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="class-use/Evaluator.html"><font class="NavBarFont1"><b>Use</b></font></a>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="package-tree.html"><font class="NavBarFont1"><b>Tree</b></font></a>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="../../../deprecated-list.html"><font class="NavBarFont1"><b>Deprecated</b></font></a>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="../../../index-all.html"><font class="NavBarFont1"><b>Index</b></font></a>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="../../../help-doc.html"><font class="NavBarFont1"><b>Help</b></font></a>&nbsp;</td> 
        </tr> 
       </tbody>
      </table> </td> 
     <td align="right" valign="top" rowspan="3"><em> </em> </td> 
    </tr> 
    <tr> 
     <td bgcolor="white" class="NavBarCell2"><font size="-2"> &nbsp;<a href="../../../net/sourceforge/jeval/EvaluationResult.html" title="class in net.sourceforge.jeval"><b>PREV CLASS</b></a>&nbsp; &nbsp;<a href="../../../net/sourceforge/jeval/ExpressionOperand.html" title="class in net.sourceforge.jeval"><b>NEXT CLASS</b></a></font></td> 
     <td bgcolor="white" class="NavBarCell2"><font size="-2"> <a href="../../../index.html?net/sourceforge/jeval/Evaluator.html" target="_top"><b>FRAMES</b></a> &nbsp; &nbsp;<a href="Evaluator.html" target="_top"><b>NO FRAMES</b></a> &nbsp; &nbsp;<script type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</script> 
       <noscript> 
        <a href="../../../allclasses-noframe.html"><b>All Classes</b></a> 
       </noscript> </font></td> 
    </tr> 
    <tr> 
     <td valign="top" class="NavBarCell3"><font size="-2"> SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<a href="#constructor_summary">CONSTR</a>&nbsp;|&nbsp;<a href="#method_summary">METHOD</a></font></td> 
     <td valign="top" class="NavBarCell3"><font size="-2"> DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<a href="#constructor_detail">CONSTR</a>&nbsp;|&nbsp;<a href="#method_detail">METHOD</a></font></td> 
    </tr> 
   </tbody>
  </table> 
  <a name="skip-navbar_top"></a> 
  <!-- ========= END OF TOP NAVBAR ========= --> 
  <hr> 
  <!-- ======== START OF CLASS DATA ======== --> 
  <h2> <font size="-1"> net.sourceforge.jeval</font> <br> Class Evaluator</h2> 
  <pre>
java.lang.Object
  <img SRC="../../../resources/inherit.gif" ALT="extended by "><b>net.sourceforge.jeval.Evaluator</b>
</pre> 
  <hr> 
  <dl> 
   <dt>
    <pre>public class <b>Evaluator</b>
     <dt>
      extends java.lang.Object
     </dt></pre>
   </dt>
  </dl>  
  <p> This class is used to evaluate mathematical, string, Boolean and functional expressions. It is the main entry point into the JEval API.<br> <br> The following types of expressions are supported:<br> </p>
  <ul> 
   <li><i>mathematical</i> Expression involving numbers. Numbers are treated as doubles, so resulting numbers will contain at least one decimal place.</li> 
   <li><i>string</i> String can also be added together, compared, etc...</li> 
   <li><i>Boolean</i> Expression that evaluate to true (1.0) and false (0.0).</li> 
   <li><i>functional</i> Custom functions can be created or there are many Math and String functions that JEval supplies with this class.</li> 
  </ul> The following operators are supported:
  <br> 
  <ul> 
   <li>( open parentheses</li> 
   <li>) closed parentheses</li> 
   <li>+ addition (for numbers and strings)</li> 
   <li>- subtration</li> 
   <li>* mutliplication</li> 
   <li>/ division</li> 
   <li>% modulus</li> 
   <li>+ unary plus</li> 
   <li>- unary minus</li> 
   <li>= equal (for numbers and strings)</li> 
   <li>!= not equal (for numbers and strings)</li> 
   <li>&lt; less than (for numbers and strings)</li> 
   <li>&lt;= less than or equal (for numbers and strings)</li> 
   <li>&gt; greater than (for numbers and strings)</li> 
   <li>&gt;= greater than or equal (for numbers and strings)</li> 
   <li>&amp;&amp; boolean and</li> 
   <li>|| boolean or</li> 
   <li>! boolean not</li> 
  </ul> Allows for prebuilt and custom functions.
  <br> 
  <ul> 
   <li>JEval already comes with many functions which represent most of the methods in the Math and String classes in the standard JDK.</li> 
   <li>Thirty-nine math and string functions come built in. See the net.sourceforge.jeval.functions.math and net.sourceforge.jeval.functions.string packages for details on these ready to use functions. You can choose to not load these functions if we you want to gain a small improvement in performance.</li> 
   <li>Functions must be followed by an open parentheses and a closed parentheses which contain any required parameters.</li> 
   <li>For more details on functions, see the Function class and the test classes.</li> 
  </ul> Allows for variables.
  <br> 
  <ul> 
   <li>Variable must be enclosed by a pound sign and open brace #{ and a closed brace }. i.e. expression = "#{a} + #{b}"</li> 
   <li>Two math variables come built in. The E and PI variables represent the same value as the Math.E and Math.PI constants in the standard Java SDK. You can choose not to load these variables.</li> 
  </ul> Notes on expression parsing: 
  <ul> 
   <li>Spaces are ignored when parsing expressions.</li> 
   <li>The order of precedence used by this class is as follows from highest to lowest.</li> 
   <li>The expression is evaluated as one or more subexpressions. Subexpressions within open parentheses and closed parentheses are evaluated before other parts of the expression.</li> 
   <li>Inner most subexpression are evaluated first working outward.</li> 
   <li>Subexpressions at the same level are evaluated from left to right.</li> 
   <li>When evaluating expressions and subexpressions, operators are evaluated with the following precedence listed below.</li> 
   <li>Operators with with the same precedence are evaluated from left to right.</li> 
   <li>Once the expression is parsed, Variables are replaced with their values. The evaluator has its own internal variable map that it used to resolve variable values. All of the variable related methods on the evaluator refer to this internal map. You can choose to set you own variable resolver on your evaluator instance. IF you do this, then variables resolved by your resolver will override any variables in the evaluator's internal variable map.</li> 
   <li>Functions are then executed and replaced with their results. Function arguments are each inidividually evaluated as subexpressions that are comma separated. This gives you the ability to use nested functions in your expressions. You can choose not to evaluate function arguments as expressions and instead let the functions handle the arguments themselves. This in effect turns off nested expressions, unless you code nexted expression support into yours custom functions.</li> 
   <li>Once all variables and functions are resolved, then the parsed expression and subexpressions are evaluated according to operator precedence.</li> 
  </ul> Operator precedence: 
  <ul> 
   <li>+ unary plus, - unary minus, ! boolean not</li> 
   <li>* multiplication, / division, % modulus</li> 
   <li>+ addition, - subtraction</li> 
   <li>&lt; less than, &lt;= less than or equal, &gt; greater than, &gt;= greater than or equal</li> 
   <li>= equal, != not equal</li> 
   <li>&amp;&amp; boolean and</li> 
   <li>|| boolean or</li> 
  </ul> Function and variable names can not break any of the following rules:
  <br> 
  <ul> 
   <li>can not start with a number</li> 
   <li>can not contain an operator (see the above list of operators)/li&gt; </li>
   <li>can not contain a quote character - single or double/li&gt; </li>
   <li>can not contain a brace character - open or closed/li&gt; </li>
   <li>can not contain one of the following special characters: #, ~ , ^ !</li> 
  </ul> Other Notes: 
  <ul> 
   <li>This class is not thread safe.</li> 
   <li>Allows for the quote character (single or double) to be specified at run time. Quote characters are required for specifying string values.</li> 
   <li>Expressions can contain different types of expressions within the same expression. However, Numeric and string types can not be mixed in a left / right oeprand pair.</li> 
   <li>An expression can be parsed before being evaluated by calling the parse() method. This may save on response time if parsing takes more than a few seconds. However, parsing is usally very fast, so this is probably not needed.</li> 
   <li>Also, if an expression does not change, it will not be parsed each time the expression is evaluated. Therefore, variables values can change and the expression can be evaluataed again without having to re-parse the expression.</li> 
   <li>Nested functions calls are supported. Nested function support can be turned off to improve performance. Custom functions can be coded to handle nested calls instead if desired.</li> 
   <li>The string used to start variables, "#{", can not appear in an expression. </li>
   <li>See the evaluate methods in this class, JUnit tests and samples for more details.</li> 
  </ul> 
  <p> </p>
  <p> </p>
  <hr> 
  <p> 
   <!-- ======== CONSTRUCTOR SUMMARY ======== --> <a name="constructor_summary">
    <!-- --></a> </p>
  <table border="1" width="100%" cellpadding="3" cellspacing="0" summary=""> 
   <tbody>
    <tr bgcolor="#CCCCFF" class="TableHeadingColor"> 
     <th align="left" colspan="2"><font size="+2"> <b>Constructor Summary</b></font></th> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#Evaluator()">Evaluator</a></b>()</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The default constructor.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#Evaluator(char, boolean, boolean, boolean, boolean)">Evaluator</a></b>(char&nbsp;quoteCharacter, boolean&nbsp;loadMathVariables, boolean&nbsp;loadMathFunctions, boolean&nbsp;loadStringFunctions, boolean&nbsp;processNestedFunctions)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The main constructor for Evaluator.</td> 
    </tr> 
   </tbody>
  </table> &nbsp; 
  <!-- ========== METHOD SUMMARY =========== --> 
  <a name="method_summary">
   <!-- --></a> 
  <table border="1" width="100%" cellpadding="3" cellspacing="0" summary=""> 
   <tbody>
    <tr bgcolor="#CCCCFF" class="TableHeadingColor"> 
     <th align="left" colspan="2"><font size="+2"> <b>Method Summary</b></font></th> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#clearFunctions()">clearFunctions</a></b>()</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes all of the functions at one time.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#clearVariables()">clearVariables</a></b>()</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes all of the variables at one time.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;java.lang.String</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#evaluate()">evaluate</a></b>()</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method evaluates mathematical, boolean or functional expressions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;java.lang.String</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#evaluate(boolean, boolean)">evaluate</a></b>(boolean&nbsp;keepQuotes, boolean&nbsp;wrapStringFunctionResults)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method evaluates mathematical, boolean or functional expressions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;java.lang.String</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#evaluate(java.lang.String)">evaluate</a></b>(java.lang.String&nbsp;expression)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method evaluates mathematical, boolean or functional expressions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;java.lang.String</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#evaluate(java.lang.String, boolean, boolean)">evaluate</a></b>(java.lang.String&nbsp;expression, boolean&nbsp;keepQuotes, boolean&nbsp;wrapStringFunctionResults)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method evaluates mathematical, boolean or functional expressions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;boolean</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#getBooleanResult(java.lang.String)">getBooleanResult</a></b>(java.lang.String&nbsp;expression)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is a simple wrapper around the evaluate(String) method.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;<a href="../../../net/sourceforge/jeval/function/Function.html" title="interface in net.sourceforge.jeval.function">Function</a></code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#getFunction(java.lang.String)">getFunction</a></b>(java.lang.String&nbsp;functionName)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a funtion from the list of functions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;java.util.Map</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#getFunctions()">getFunctions</a></b>()</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rturns the map of functions currently set on this object.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;double</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#getNumberResult(java.lang.String)">getNumberResult</a></b>(java.lang.String&nbsp;expression)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is a simple wrapper around the evaluate(String) method.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;char</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#getQuoteCharacter()">getQuoteCharacter</a></b>()</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the current quote character in use.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;<a href="../../../net/sourceforge/jeval/VariableResolver.html" title="interface in net.sourceforge.jeval">VariableResolver</a></code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#getVariableResolver()">getVariableResolver</a></b>()</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the variable resolver.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;java.util.Map</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#getVariables()">getVariables</a></b>()</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rturns the map of variables currently set on this object.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;java.lang.String</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#getVariableValue(java.lang.String)">getVariableValue</a></b>(java.lang.String&nbsp;variableName)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the value for a variable in the list of variables.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>protected &nbsp;boolean</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#isExpressionString(java.lang.String)">isExpressionString</a></b>(java.lang.String&nbsp;expressionString)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines if the string represents a valid expression string or not.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#isValidName(java.lang.String)">isValidName</a></b>(java.lang.String&nbsp;name)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method verifies if a function or variable name is valid or not.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#parse(java.lang.String)">parse</a></b>(java.lang.String&nbsp;expression)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method parses a mathematical, boolean or functional expressions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#putFunction(net.sourceforge.jeval.function.Function)">putFunction</a></b>(<a href="../../../net/sourceforge/jeval/function/Function.html" title="interface in net.sourceforge.jeval.function">Function</a>&nbsp;function)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds a function to the list of functions to use when evaluating expressions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#putVariable(java.lang.String, java.lang.String)">putVariable</a></b>(java.lang.String&nbsp;variableName, java.lang.String&nbsp;variableValue)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds or replaces a variable to the list of variables to use when evaluating expressions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#removeFunction(java.lang.String)">removeFunction</a></b>(java.lang.String&nbsp;functionName)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the function from the list of functions to use when evaluating expressions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#removeVaraible(java.lang.String)">removeVaraible</a></b>(java.lang.String&nbsp;variableName)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the variable from the list of variables to use when evaluating expressions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;java.lang.String</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#replaceVariables(java.lang.String)">replaceVariables</a></b>(java.lang.String&nbsp;expression)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Replaces the variables in the expression with the values of the variables for this instance of the evaluator.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#setFunctions(java.util.Map)">setFunctions</a></b>(java.util.Map&nbsp;functions)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the map of functions for this object.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#setQuoteCharacter(char)">setQuoteCharacter</a></b>(char&nbsp;quoteCharacter)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the quote character to use when evaluating expressions.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#setVariableResolver(net.sourceforge.jeval.VariableResolver)">setVariableResolver</a></b>(<a href="../../../net/sourceforge/jeval/VariableResolver.html" title="interface in net.sourceforge.jeval">VariableResolver</a>&nbsp;variableResolver)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the variable resolver for this class.</td> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td align="right" valign="top" width="1%"><font size="-1"> <code>&nbsp;void</code></font></td> 
     <td><code><b><a href="../../../net/sourceforge/jeval/Evaluator.html#setVariables(java.util.Map)">setVariables</a></b>(java.util.Map&nbsp;variables)</code> <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the map of variables for this object.</td> 
    </tr> 
   </tbody>
  </table> &nbsp;
  <a name="methods_inherited_from_class_java.lang.Object">
   <!-- --></a> 
  <table border="1" width="100%" cellpadding="3" cellspacing="0" summary=""> 
   <tbody>
    <tr bgcolor="#EEEEFF" class="TableSubHeadingColor"> 
     <th align="left"><b>Methods inherited from class java.lang.Object</b></th> 
    </tr> 
    <tr bgcolor="white" class="TableRowColor"> 
     <td><code>clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></td> 
    </tr> 
   </tbody>
  </table> &nbsp; 
  <p> 
   <!-- ========= CONSTRUCTOR DETAIL ======== --> <a name="constructor_detail">
    <!-- --></a> </p>
  <table border="1" width="100%" cellpadding="3" cellspacing="0" summary=""> 
   <tbody>
    <tr bgcolor="#CCCCFF" class="TableHeadingColor"> 
     <th align="left" colspan="1"><font size="+2"> <b>Constructor Detail</b></font></th> 
    </tr> 
   </tbody>
  </table> 
  <a name="Evaluator()">
   <!-- --></a>
  <h3> Evaluator</h3> 
  <pre>
public <b>Evaluator</b>()</pre> 
  <dl> 
   <dd>
    The default constructor. This constructor calls the five parameter Evaluator constructor and passes in the following default values: SINGLE_QUOTE, true, true, true and true. 
    <p> </p>
   </dd>
  </dl> 
  <hr> 
  <a name="Evaluator(char, boolean, boolean, boolean, boolean)">
   <!-- --></a>
  <h3> Evaluator</h3> 
  <pre>
public <b>Evaluator</b>(char&nbsp;quoteCharacter,
                 boolean&nbsp;loadMathVariables,
                 boolean&nbsp;loadMathFunctions,
                 boolean&nbsp;loadStringFunctions,
                 boolean&nbsp;processNestedFunctions)</pre> 
  <dl> 
   <dd>
    The main constructor for Evaluator. 
    <p> </p>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>quoteCharacter</code> - The quote character to use when evaluating expression.
     </dd>
     <dd>
      <code>loadMathVariables</code> - Indicates if the standard Math variables should be loaded or not.
     </dd>
     <dd>
      <code>loadMathFunctions</code> - Indicates if the standard Math functions should be loaded or not.
     </dd>
     <dd>
      <code>loadStringFunctions</code> - Indicates if the standard String functions should be loaded or not.
     </dd>
     <dd>
      <code>processNestedFunctions</code> - Indicates if nested function calls should be processed or not. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>java.lang.IllegalArgumentException</code> - Thrown when the quote character is not a valid quote character.
     </dd>
    </dl> 
   </dd>
  </dl> 
  <!-- ============ METHOD DETAIL ========== --> 
  <a name="method_detail">
   <!-- --></a> 
  <table border="1" width="100%" cellpadding="3" cellspacing="0" summary=""> 
   <tbody>
    <tr bgcolor="#CCCCFF" class="TableHeadingColor"> 
     <th align="left" colspan="1"><font size="+2"> <b>Method Detail</b></font></th> 
    </tr> 
   </tbody>
  </table> 
  <a name="getQuoteCharacter()">
   <!-- --></a>
  <h3> getQuoteCharacter</h3> 
  <pre>
public char <b>getQuoteCharacter</b>()</pre> 
  <dl> 
   <dd>
    Returns the current quote character in use. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      The quote character in use.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="setQuoteCharacter(char)">
   <!-- --></a>
  <h3> setQuoteCharacter</h3> 
  <pre>
public void <b>setQuoteCharacter</b>(char&nbsp;quoteCharacter)</pre> 
  <dl> 
   <dd>
    Sets the quote character to use when evaluating expressions. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>quoteCharacter</code> - The quote character to use when evaluating expressions. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>java.lang.IllegalArgumentException</code> - Thrown when the quote character is not a valid quote character.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="putFunction(net.sourceforge.jeval.function.Function)">
   <!-- --></a>
  <h3> putFunction</h3> 
  <pre>
public void <b>putFunction</b>(<a href="../../../net/sourceforge/jeval/function/Function.html" title="interface in net.sourceforge.jeval.function">Function</a>&nbsp;function)</pre> 
  <dl> 
   <dd>
    Adds a function to the list of functions to use when evaluating expressions. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>function</code> - The function being added. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>java.lang.IllegalArgumentException</code> - Thrown when the function name is not valid or the function name is already in use.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="getFunction(java.lang.String)">
   <!-- --></a>
  <h3> getFunction</h3> 
  <pre>
public <a href="../../../net/sourceforge/jeval/function/Function.html" title="interface in net.sourceforge.jeval.function">Function</a> <b>getFunction</b>(java.lang.String&nbsp;functionName)</pre> 
  <dl> 
   <dd>
    Returns a funtion from the list of functions. If the function can not be found in the list of functions, then null will be returned. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>functionName</code> - The name of the function to retrieve the value for. 
     </dd>
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      The value for a function in the list of function.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="removeFunction(java.lang.String)">
   <!-- --></a>
  <h3> removeFunction</h3> 
  <pre>
public void <b>removeFunction</b>(java.lang.String&nbsp;functionName)</pre> 
  <dl> 
   <dd>
    Removes the function from the list of functions to use when evaluating expressions. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>functionName</code> - The name of the function to remove.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="clearFunctions()">
   <!-- --></a>
  <h3> clearFunctions</h3> 
  <pre>
public void <b>clearFunctions</b>()</pre> 
  <dl> 
   <dd>
    Removes all of the functions at one time. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="getFunctions()">
   <!-- --></a>
  <h3> getFunctions</h3> 
  <pre>
public java.util.Map <b>getFunctions</b>()</pre> 
  <dl> 
   <dd>
    Rturns the map of functions currently set on this object. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      the map of functions currently set on this object.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="setFunctions(java.util.Map)">
   <!-- --></a>
  <h3> setFunctions</h3> 
  <pre>
public void <b>setFunctions</b>(java.util.Map&nbsp;functions)</pre> 
  <dl> 
   <dd>
    Sets the map of functions for this object. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>The</code> - map of functions for this object.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="putVariable(java.lang.String, java.lang.String)">
   <!-- --></a>
  <h3> putVariable</h3> 
  <pre>
public void <b>putVariable</b>(java.lang.String&nbsp;variableName,
                        java.lang.String&nbsp;variableValue)</pre> 
  <dl> 
   <dd>
    Adds or replaces a variable to the list of variables to use when evaluating expressions. If the variable already exists, then its value will be overlaid. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>variableName</code> - The name of the variable being set.
     </dd>
     <dd>
      <code>variableValue</code> - The value for the variable being set.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="getVariableValue(java.lang.String)">
   <!-- --></a>
  <h3> getVariableValue</h3> 
  <pre>
public java.lang.String <b>getVariableValue</b>(java.lang.String&nbsp;variableName)
                                  throws <a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></pre> 
  <dl> 
   <dd>
    Returns the value for a variable in the list of variables. If the variable can not be found in the list of variables, then null will be returned. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>variableName</code> - The name of the variable to retrieve the value for. 
     </dd>
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      The value for a variable in the list of variables. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>Throws</code> - an EvaluatorException if the variable name can not be resolved. 
     </dd>
     <dd>
      <code><a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></code>
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="removeVaraible(java.lang.String)">
   <!-- --></a>
  <h3> removeVaraible</h3> 
  <pre>
public void <b>removeVaraible</b>(java.lang.String&nbsp;variableName)</pre> 
  <dl> 
   <dd>
    Removes the variable from the list of variables to use when evaluating expressions. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>variableName</code> - The name of the variable to remove.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="clearVariables()">
   <!-- --></a>
  <h3> clearVariables</h3> 
  <pre>
public void <b>clearVariables</b>()</pre> 
  <dl> 
   <dd>
    Removes all of the variables at one time. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="getVariables()">
   <!-- --></a>
  <h3> getVariables</h3> 
  <pre>
public java.util.Map <b>getVariables</b>()</pre> 
  <dl> 
   <dd>
    Rturns the map of variables currently set on this object. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      the map of variables currently set on this object.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="setVariables(java.util.Map)">
   <!-- --></a>
  <h3> setVariables</h3> 
  <pre>
public void <b>setVariables</b>(java.util.Map&nbsp;variables)</pre> 
  <dl> 
   <dd>
    Sets the map of variables for this object. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>variables</code> - The map of variables for this object.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="getVariableResolver()">
   <!-- --></a>
  <h3> getVariableResolver</h3> 
  <pre>
public <a href="../../../net/sourceforge/jeval/VariableResolver.html" title="interface in net.sourceforge.jeval">VariableResolver</a> <b>getVariableResolver</b>()</pre> 
  <dl> 
   <dd>
    Returns the variable resolver. The variable resolver can be used by the user to resolve their own variables. Variables in the variable resolver override any variables that are in this classes internal variable map. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      The variable resolver.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="setVariableResolver(net.sourceforge.jeval.VariableResolver)">
   <!-- --></a>
  <h3> setVariableResolver</h3> 
  <pre>
public void <b>setVariableResolver</b>(<a href="../../../net/sourceforge/jeval/VariableResolver.html" title="interface in net.sourceforge.jeval">VariableResolver</a>&nbsp;variableResolver)</pre> 
  <dl> 
   <dd>
    Sets the variable resolver for this class. Varaibles resolved by the variable resolver will override any variables in this class's internal variable map. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>variableResolver</code> - The variable resolver for this class.
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="evaluate(java.lang.String)">
   <!-- --></a>
  <h3> evaluate</h3> 
  <pre>
public java.lang.String <b>evaluate</b>(java.lang.String&nbsp;expression)
                          throws <a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></pre> 
  <dl> 
   <dd>
    This method evaluates mathematical, boolean or functional expressions. See the class description and test classes for more information on how to write an expression. If quotes exist around a string expression, then they will be left in the result string. Function will also have their results wrapped with the appripriate quote characters. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>expression</code> - The expression to evaluate. 
     </dd>
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      The result of the evaluated. expression. Numbers are treated as doubles, so resulting numbers will contain at least one decimal place. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>EvaluateException</code> - Thrown when an error is found while evaluating the expression. 
     </dd>
     <dd>
      <code><a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></code>
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="evaluate()">
   <!-- --></a>
  <h3> evaluate</h3> 
  <pre>
public java.lang.String <b>evaluate</b>()
                          throws <a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></pre> 
  <dl> 
   <dd>
    This method evaluates mathematical, boolean or functional expressions. See the class description and test classes for more information on how to write an expression. The expression used will be the one previously specified when using the parse method. If the parse method has not been called before calling this method, then an exception will be thrown. If quotes exist around a string expression, then they will be left in the result string. Function will also have their results wrapped with the appripriate quote characters. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      The result of the evaluated. expression. Numbers are treated as doubles, so resulting numbers will contain at least one decimal place. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>EvaluateException</code> - Thrown when an error is found while evaluating the expression. 
     </dd>
     <dd>
      <code><a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></code>
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="evaluate(java.lang.String, boolean, boolean)">
   <!-- --></a>
  <h3> evaluate</h3> 
  <pre>
public java.lang.String <b>evaluate</b>(java.lang.String&nbsp;expression,
                                 boolean&nbsp;keepQuotes,
                                 boolean&nbsp;wrapStringFunctionResults)
                          throws <a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></pre> 
  <dl> 
   <dd>
    This method evaluates mathematical, boolean or functional expressions. See the class description and test classes for more information on how to write an expression. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>expression</code> - The expression to evaluate.
     </dd>
     <dd>
      <code>keepQuotes</code> - Indicates if the the quotes should be kept in the result or not. This is only for string expression that are enclosed in quotes prior to being evaluated.
     </dd>
     <dd>
      <code>wrapStringFunctionResults</code> - Indicates if the results from functions that return strings should be wrapped in quotes. The quote character used will be whatever is the current quote character for this object. 
     </dd>
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      The result of the evaluated expression. Numbers are treated as doubles, so resulting numbers will contain at least one decimal place. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>EvaluateException</code> - Thrown when an error is found while evaluating the expression. 
     </dd>
     <dd>
      <code><a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></code>
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="evaluate(boolean, boolean)">
   <!-- --></a>
  <h3> evaluate</h3> 
  <pre>
public java.lang.String <b>evaluate</b>(boolean&nbsp;keepQuotes,
                                 boolean&nbsp;wrapStringFunctionResults)
                          throws <a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></pre> 
  <dl> 
   <dd>
    This method evaluates mathematical, boolean or functional expressions. The expression used will be the one previously specified when using the parse method. If the parse method has not been called before calling this method, then an exception will be thrown. See the class description and test classes for more information on how to write an expression. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>keepQuotes</code> - Indicates if the the quotes should be kept in the result or not. This is only for string expressions that are enclosed in quotes prior to being evaluated.
     </dd>
     <dd>
      <code>wrapStringFunctionResults</code> - Indicates if the results from functions that return strings should be wrapped in quotes. The quote character used will be whatever is the current quote character for this object. 
     </dd>
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      The result of the evaluated expression. Numbers are treated as doubles, so resulting numbers will contain at least one decimal place. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>EvaluateException</code> - Thrown when an error is found while evaluating the expression. 
     </dd>
     <dd>
      <code><a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></code>
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="getBooleanResult(java.lang.String)">
   <!-- --></a>
  <h3> getBooleanResult</h3> 
  <pre>
public boolean <b>getBooleanResult</b>(java.lang.String&nbsp;expression)
                         throws <a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></pre> 
  <dl> 
   <dd>
    This method is a simple wrapper around the evaluate(String) method. Its purpose is to return a more friendly boolean return value instead of the string "1.0" (for true) and "0.0" (for false) that is normally returned. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>expression</code> - The expression to evaluate. 
     </dd>
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      A boolean value that represents the result of the evaluated expression. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>EvaluateException</code> - Thrown when an error is found while evaluating the expression. It is also thrown if the result is not able to be converted to a boolean value. 
     </dd>
     <dd>
      <code><a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></code>
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="getNumberResult(java.lang.String)">
   <!-- --></a>
  <h3> getNumberResult</h3> 
  <pre>
public double <b>getNumberResult</b>(java.lang.String&nbsp;expression)
                       throws <a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></pre> 
  <dl> 
   <dd>
    This method is a simple wrapper around the evaluate(String) method. Its purpose is to return a more friendly double return value instead of the string number that is normally returned. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>expression</code> - The expression to evaluate. 
     </dd>
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      A double value that represents the result of the evaluated expression. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>EvaluateException</code> - Thrown when an error is found while evaluating the expression. It is also thrown if the result is not able to be converted to a double value. 
     </dd>
     <dd>
      <code><a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></code>
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="parse(java.lang.String)">
   <!-- --></a>
  <h3> parse</h3> 
  <pre>
public void <b>parse</b>(java.lang.String&nbsp;expression)
           throws <a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></pre> 
  <dl> 
   <dd>
    This method parses a mathematical, boolean or functional expressions. When the expression is eventually evaluated, as long as the expression has not changed, it will not have to be reparsed. See the class description and test classes for more information on how to write an expression. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>expression</code> - The expression to evaluate. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>EvaluateException</code> - Thrown when an error is found while evaluating the expression. 
     </dd>
     <dd>
      <code><a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></code>
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="isExpressionString(java.lang.String)">
   <!-- --></a>
  <h3> isExpressionString</h3> 
  <pre>
protected boolean <b>isExpressionString</b>(java.lang.String&nbsp;expressionString)
                              throws <a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></pre> 
  <dl> 
   <dd>
    Determines if the string represents a valid expression string or not. Valid expression strings must start and end with a quote character. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>expressionString</code> - The string being evaluated. 
     </dd>
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      True if the string is a valid string and false if not. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code><a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></code>
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <hr> 
  <a name="isValidName(java.lang.String)">
   <!-- --></a>
  <h3> isValidName</h3> 
  <pre>
public void <b>isValidName</b>(java.lang.String&nbsp;name)
                 throws java.lang.IllegalArgumentException</pre> 
  <dl> 
   <dd>
    This method verifies if a function or variable name is valid or not. Function and variable names must follow these rules... 
    <ul> 
     <li>can not start with a number</li> 
     <li>can not contain an operator (see the above list of operators)</li> 
     <li>can not contain a quote character - single or double</li> 
     <li>can not contain a brace character - open or closed</li> 
     <li>can not contain one of the following special characters: #, ~ , ^ !</li> 
     <ul> 
      <p> </p>
      <dd>
       <dl> 
        <dt>
         <b>Parameters:</b>
        </dt>
        <dd>
         <code>name</code> - The function or variable name being validated. 
        </dd>
        <dt>
         <b>Throws:</b> 
        </dt>
        <dd>
         <code>java.lang.IllegalArgumentException</code> - Thrown if the name is invalid.
        </dd>
       </dl> 
      </dd> 
     </ul>
    </ul>
   </dd>
  </dl> 
  <hr> 
  <a name="replaceVariables(java.lang.String)">
   <!-- --></a>
  <h3> replaceVariables</h3> 
  <pre>
public java.lang.String <b>replaceVariables</b>(java.lang.String&nbsp;expression)
                                  throws <a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></pre> 
  <dl> 
   <dd>
    Replaces the variables in the expression with the values of the variables for this instance of the evaluator. 
    <p> </p>
   </dd>
   <dd>
    <dl> 
     <dt>
      <b>Parameters:</b>
     </dt>
     <dd>
      <code>expression</code> - The expression being processed. 
     </dd>
     <dt>
      <b>Returns:</b>
     </dt>
     <dd>
      A new expression with the variables replaced with their values. 
     </dd>
     <dt>
      <b>Throws:</b> 
     </dt>
     <dd>
      <code>EvaluateException</code> - Thrown is an error is encoutnered while processing the expression. 
     </dd>
     <dd>
      <code><a href="../../../net/sourceforge/jeval/EvaluationException.html" title="class in net.sourceforge.jeval">EvaluationException</a></code>
     </dd>
    </dl> 
   </dd> 
  </dl> 
  <!-- ========= END OF CLASS DATA ========= --> 
  <hr> 
  <!-- ======= START OF BOTTOM NAVBAR ====== --> 
  <a name="navbar_bottom">
   <!-- --></a> 
  <a href="#skip-navbar_bottom" title="Skip navigation links"></a> 
  <table border="0" width="100%" cellpadding="1" cellspacing="0" summary=""> 
   <tbody>
    <tr> 
     <td colspan="2" bgcolor="#EEEEFF" class="NavBarCell1"> <a name="navbar_bottom_firstrow">
       <!-- --></a> 
      <table border="0" cellpadding="0" cellspacing="3" summary=""> 
       <tbody>
        <tr align="center" valign="top"> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="../../../overview-summary.html"><font class="NavBarFont1"><b>Overview</b></font></a>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="package-summary.html"><font class="NavBarFont1"><b>Package</b></font></a>&nbsp;</td> 
         <td bgcolor="#FFFFFF" class="NavBarCell1Rev"> &nbsp;<font class="NavBarFont1Rev"><b>Class</b></font>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="class-use/Evaluator.html"><font class="NavBarFont1"><b>Use</b></font></a>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="package-tree.html"><font class="NavBarFont1"><b>Tree</b></font></a>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="../../../deprecated-list.html"><font class="NavBarFont1"><b>Deprecated</b></font></a>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="../../../index-all.html"><font class="NavBarFont1"><b>Index</b></font></a>&nbsp;</td> 
         <td bgcolor="#EEEEFF" class="NavBarCell1"> <a href="../../../help-doc.html"><font class="NavBarFont1"><b>Help</b></font></a>&nbsp;</td> 
        </tr> 
       </tbody>
      </table> </td> 
     <td align="right" valign="top" rowspan="3"><em> </em> </td> 
    </tr> 
    <tr> 
     <td bgcolor="white" class="NavBarCell2"><font size="-2"> &nbsp;<a href="../../../net/sourceforge/jeval/EvaluationResult.html" title="class in net.sourceforge.jeval"><b>PREV CLASS</b></a>&nbsp; &nbsp;<a href="../../../net/sourceforge/jeval/ExpressionOperand.html" title="class in net.sourceforge.jeval"><b>NEXT CLASS</b></a></font></td> 
     <td bgcolor="white" class="NavBarCell2"><font size="-2"> <a href="../../../index.html?net/sourceforge/jeval/Evaluator.html" target="_top"><b>FRAMES</b></a> &nbsp; &nbsp;<a href="Evaluator.html" target="_top"><b>NO FRAMES</b></a> &nbsp; &nbsp;<script type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</script> 
       <noscript> 
        <a href="../../../allclasses-noframe.html"><b>All Classes</b></a> 
       </noscript> </font></td> 
    </tr> 
    <tr> 
     <td valign="top" class="NavBarCell3"><font size="-2"> SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<a href="#constructor_summary">CONSTR</a>&nbsp;|&nbsp;<a href="#method_summary">METHOD</a></font></td> 
     <td valign="top" class="NavBarCell3"><font size="-2"> DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<a href="#constructor_detail">CONSTR</a>&nbsp;|&nbsp;<a href="#method_detail">METHOD</a></font></td> 
    </tr> 
   </tbody>
  </table> 
  <a name="skip-navbar_bottom"></a> 
  <!-- ======== END OF BOTTOM NAVBAR ======= --> 
  <hr> 
  <i>Copyright (C) 2002-2007 Robert Breidecker.</i>   
 </body>
</html>