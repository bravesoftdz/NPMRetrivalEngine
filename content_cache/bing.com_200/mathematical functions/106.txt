<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
 <head profile="http://gmpg.org/xfn/11"> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <title>Java – Theory | BRAINSTORMING</title> 
  <link rel="pingback" href="https://nilabja.wordpress.com/xmlrpc.php"> 
  <link rel="dns-prefetch" href="//s2.wp.com"> 
  <link rel="dns-prefetch" href="//s0.wp.com"> 
  <link rel="dns-prefetch" href="//s1.wp.com"> 
  <link rel="dns-prefetch" href="//s.pubmine.com"> 
  <link rel="dns-prefetch" href="//x.bidswitch.net"> 
  <link rel="dns-prefetch" href="//static.criteo.net"> 
  <link rel="dns-prefetch" href="//ib.adnxs.com"> 
  <link rel="dns-prefetch" href="//aax.amazon-adsystem.com"> 
  <link rel="dns-prefetch" href="//bidder.criteo.com"> 
  <link rel="dns-prefetch" href="//cas.criteo.com"> 
  <link rel="dns-prefetch" href="//gum.criteo.com"> 
  <link rel="dns-prefetch" href="//ads.pubmatic.com"> 
  <link rel="dns-prefetch" href="//gads.pubmatic.com"> 
  <link rel="dns-prefetch" href="//tpc.googlesyndication.com"> 
  <link rel="dns-prefetch" href="//ad.doubleclick.net"> 
  <link rel="dns-prefetch" href="//googleads.g.doubleclick.net"> 
  <link rel="dns-prefetch" href="//www.googletagservices.com"> 
  <link rel="dns-prefetch" href="//cdn.switchadhub.com"> 
  <link rel="dns-prefetch" href="//delivery.g.switchadhub.com"> 
  <link rel="dns-prefetch" href="//delivery.swid.switchadhub.com"> 
  <link rel="alternate" type="application/rss+xml" title="BRAINSTORMING » Feed" href="https://nilabja.wordpress.com/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="BRAINSTORMING » Comments Feed" href="https://nilabja.wordpress.com/comments/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="BRAINSTORMING » Java – Theory Comments Feed" href="https://nilabja.wordpress.com/computers/theory-of-java/feed/"> 
  <script type="text/javascript">
		/* <![CDATA[ */
		function addLoadEvent(func) {
			var oldonload = window.onload;
			if (typeof window.onload != 'function') {
				window.onload = func;
			} else {
				window.onload = function () {
					oldonload();
					func();
				}
			}
		}
		/* ]]> */
	</script> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/wpcom-smileys\/twemoji\/2\/72x72\/","ext":".png","svgUrl":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/wpcom-smileys\/twemoji\/2\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/s0.wp.com\/wp-includes\/js\/wp-emoji-release.min.js?m=1505864856h&ver=4.8.2"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,56826,8203,55356,56819),0,0),c=j.toDataURL(),b!==c&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55358,56794,8205,9794,65039),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55358,56794,8203,9794,65039),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="stylesheet" id="all-css-0-1" href="https://s2.wp.com/_static/??-eJyNkd1OwzAMhV8IE43BgAvEs6Spl3l16ihOKeXpSVdV0xiKehP5OOeLf2LGCE76jH02YYDIg6dezRidBNBAjNMf9ehUH8z/GFOHas6Yo3UdXNSdvWHx1zqSWtuq8SyN5Y3ehNMPtvD1VGvFScKSD9Hm2RGwJYuModhq2Eitx1xwXWPI+F1FQjyshebwVEavLmnZZtPEhKpQzkBDgHwqvd1zS9rEoVnnNponxi0zHJlcl7b7VRxZBiqWW7HAZHrJy+Ua1F71KMDibCbpbwQc2VKqoQnnjy+hv/zDVc7QZ/jYPb+/vR72+5fd+RdrTAkT" type="text/css" media="all"> 
  <link rel="stylesheet" id="print-css-1-1" href="https://s0.wp.com/wp-content/mu-plugins/global-print/global-print.css?m=1465851035h" type="text/css" media="print"> 
  <link rel="stylesheet" id="all-css-2-1" href="https://s2.wp.com/_static/??/wp-content/mu-plugins/actionbar/actionbar.css,/wp-content/themes/h4/global.css?m=1490786585j" type="text/css" media="all"> 
  <script type="text/javascript" src="https://s1.wp.com/_static/??-eJyFztEKwjAMBdAfsquTiXsRv6XWOFKXtDbphn69HeiDMBQCgdzDJXZOBtmP5QJiQ517gfx4rybIxv4ChnDITqEh5A/2kRVYF0vxjCOYIpDdUG+16BpXXIqiBCIVraTfLyFPCPNfFkCT8zeTQfC5tJ7o2Hb9Yde3+24bXjRNW9I="></script> 
  <link rel="stylesheet" id="all-css-0-2" href="https://s1.wp.com/wp-content/mu-plugins/highlander-comments/style.css?m=1377793621h" type="text/css" media="all"> 
  <!--[if lt IE 8]>
<link rel='stylesheet' id='highlander-comments-ie7-css'  href='https://s1.wp.com/wp-content/mu-plugins/highlander-comments/style-ie7.css?m=1351637563h&#038;ver=20110606' type='text/css' media='all' />
<![endif]--> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://nilabja.wordpress.com/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://s1.wp.com/wp-includes/wlwmanifest.xml"> 
  <meta name="generator" content="WordPress.com"> 
  <link rel="canonical" href="https://nilabja.wordpress.com/computers/theory-of-java/"> 
  <link rel="shortlink" href="http://wp.me/PDfDZ-bN"> 
  <link rel="alternate" type="application/json+oembed" href="https://public-api.wordpress.com/oembed/?format=json&amp;url=https%3A%2F%2Fnilabja.wordpress.com%2Fcomputers%2Ftheory-of-java%2F&amp;for=wpcom-auto-discovery">
  <link rel="alternate" type="application/xml+oembed" href="https://public-api.wordpress.com/oembed/?format=xml&amp;url=https%3A%2F%2Fnilabja.wordpress.com%2Fcomputers%2Ftheory-of-java%2F&amp;for=wpcom-auto-discovery"> 
  <!-- Jetpack Open Graph Tags --> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="Java – Theory"> 
  <meta property="og:url" content="https://nilabja.wordpress.com/computers/theory-of-java/"> 
  <meta property="og:description" content="What is Java? Java is a 3rd Generation Object Oriented programming Language, developed by James Gosling in the year 1995. It was initially codenamed as Green and hypothetically called Oak named aft…"> 
  <meta property="article:published_time" content="2011-09-10T17:51:45+00:00"> 
  <meta property="article:modified_time" content="2014-02-11T17:40:03+00:00"> 
  <meta property="og:site_name" content="BRAINSTORMING"> 
  <meta property="og:image" content="https://s0.wp.com/i/blank.jpg"> 
  <meta property="og:locale" content="en_US"> 
  <meta name="twitter:site" content="@wordpressdotcom"> 
  <meta name="twitter:text:title" content="Java – Theory"> 
  <meta name="twitter:card" content="summary"> 
  <meta property="fb:app_id" content="249643311490"> 
  <meta property="article:publisher" content="https://www.facebook.com/WordPresscom"> 
  <link rel="shortcut icon" type="image/x-icon" href="https://s2.wp.com/i/favicon.ico" sizes="16x16 24x24 32x32 48x48"> 
  <link rel="icon" type="image/x-icon" href="https://s2.wp.com/i/favicon.ico" sizes="16x16 24x24 32x32 48x48"> 
  <link rel="apple-touch-icon-precomposed" href="https://s0.wp.com/i/webclip.png"> 
  <link rel="openid.server" href="https://nilabja.wordpress.com/?openidserver=1"> 
  <link rel="openid.delegate" href="https://nilabja.wordpress.com/"> 
  <link rel="search" type="application/opensearchdescription+xml" href="https://nilabja.wordpress.com/osd.xml" title="BRAINSTORMING"> 
  <link rel="search" type="application/opensearchdescription+xml" href="https://s1.wp.com/opensearch.xml" title="WordPress.com"> 
  <style id="wpcom-hotfix-masterbar-style">
			@media screen and (min-width: 783px) {
				#wpadminbar .quicklinks li#wp-admin-bar-my-account.with-avatar > a img {
					margin-top: 5px;
				}
			}
		</style> 
  <meta name="application-name" content="BRAINSTORMING">
  <meta name="msapplication-window" content="width=device-width;height=device-height">
  <meta name="msapplication-tooltip" content="© NILABJA SARKAR">
  <meta name="msapplication-task" content="name=Subscribe;action-uri=https://nilabja.wordpress.com/feed/;icon-uri=https://s2.wp.com/i/favicon.ico">
  <meta name="msapplication-task" content="name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=https://s2.wp.com/i/favicon.ico">
  <meta name="msapplication-task" content="name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=https://s2.wp.com/i/favicon.ico">
  <meta name="msapplication-task" content="name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=https://s2.wp.com/i/favicon.ico">
  <meta name="title" content="Java – Theory | BRAINSTORMING on WordPress.com"> 
  <meta name="description" content="What is Java? Java is a 3rd Generation Object Oriented programming Language, developed by James Gosling in the year 1995. It was initially codenamed as Green and hypothetically called Oak named after the Oak tree outside Gosling’s house. It is case sensitive and has a unique two step translation process that includes both Compilation and…"> 
  <script type="text/javascript">
		var __ATA_PP = { pt: 2, ht: 0, tn: 'greyzed', amp: false };
		</script> 
  <script type="text/javascript" src="//s.pubmine.com/head.js"></script> 
  <script type="text/javascript" src="https://static.criteo.net/js/ld/publishertag.js"></script>
  <style type="text/css" id="syntaxhighlighteranchor"></style> 
  <script type="text/javascript">
	window.google_analytics_uacct = "UA-52447-2";
</script> 
  <script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-52447-2']);
	_gaq.push(['_setDomainName', 'wordpress.com']);
	_gaq.push(['_initData']);
	_gaq.push(['_trackPageview']);

	(function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		(document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
	})();
</script> 
 </head> 
 <body class="page-template-default page page-id-731 page-child parent-pageid-56 mp6 customizer-styles-applied highlander-enabled highlander-light"> 
  <div id="wrapper"> 
   <div id="page"> 
    <div class="menu-header">
     <ul> 
      <li><a href="https://nilabja.wordpress.com/">Home</a></li>
      <li class="page_item page-item-139 page_item_has_children"><a href="https://nilabja.wordpress.com/loyola/">Loyola Stuffs</a> 
       <ul class="children"> 
        <li class="page_item page-item-2409"><a href="https://nilabja.wordpress.com/loyola/icse-project-2017/">ICSE Computer Project&nbsp;2017</a></li> 
        <li class="page_item page-item-338 page_item_has_children"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/">Syllabus (6 to&nbsp;12)</a> 
         <ul class="children"> 
          <li class="page_item page-item-876"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-6/">Std – 6</a></li> 
          <li class="page_item page-item-878"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-7/">Std – 7</a></li> 
          <li class="page_item page-item-881"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-8/">Std – 8</a></li> 
          <li class="page_item page-item-883"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-9/">Std – 9</a></li> 
          <li class="page_item page-item-889"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-10/">Std – 10</a></li> 
          <li class="page_item page-item-891"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-11/">Std – 11</a></li> 
          <li class="page_item page-item-893"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-12/">Std – 12</a></li> 
         </ul> </li> 
       </ul> </li> 
      <li class="page_item page-item-56 page_item_has_children current_page_ancestor current_page_parent"><a href="https://nilabja.wordpress.com/computers/">Java Stuffs</a> 
       <ul class="children"> 
        <li class="page_item page-item-731 current_page_item"><a href="https://nilabja.wordpress.com/computers/theory-of-java/">Java – Theory</a></li> 
        <li class="page_item page-item-734"><a href="https://nilabja.wordpress.com/computers/java-glossary-of-terms/">Java – Glossary of&nbsp;Terms</a></li> 
        <li class="page_item page-item-573"><a href="https://nilabja.wordpress.com/computers/question-bank/">Java – Question&nbsp;Bank</a></li> 
        <li class="page_item page-item-1158 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/">Java – Sample&nbsp;Programs</a> 
         <ul class="children"> 
          <li class="page_item page-item-2022 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/">Array Based</a> 
           <ul class="children"> 
            <li class="page_item page-item-1317"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/array-stack/">Array Stack</a></li> 
            <li class="page_item page-item-1168"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/boundary-elements/">Boundary Elements</a></li> 
            <li class="page_item page-item-2045"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/bubble-sort/">Bubble Sort</a></li> 
            <li class="page_item page-item-2049"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/merge-sort/">Merge Sort</a></li> 
            <li class="page_item page-item-1166"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/mirror-matrix/">Mirror Matrix</a></li> 
            <li class="page_item page-item-2047"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/quick-sort/">Quick Sort</a></li> 
            <li class="page_item page-item-1171"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/spiral-matrix/">Spiral Matrix</a></li> 
            <li class="page_item page-item-2092"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/date-calculation/">Date Calculation</a></li> 
           </ul> </li> 
          <li class="page_item page-item-2026 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/">Data Structure</a> 
           <ul class="children"> 
            <li class="page_item page-item-2128"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/linked-list-based-dequeue/">Dequeue</a></li> 
            <li class="page_item page-item-2393"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/dequeue-array-based/">Dequeue (Array Based)</a></li> 
            <li class="page_item page-item-1309"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/circular-queue/">Circular Queue</a></li> 
            <li class="page_item page-item-1487"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/linked-list-stack/">Linked List Stack</a></li> 
            <li class="page_item page-item-2126"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/linked-list-queue/">Linked List Queue</a></li> 
            <li class="page_item page-item-2036"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/towers-of-hanoi/">Towers of Hanoi</a></li> 
           </ul> </li> 
          <li class="page_item page-item-2406 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/">Miscellaneous</a> 
           <ul class="children"> 
            <li class="page_item page-item-2282"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/binary-addition-2/">Binary Addition</a></li> 
            <li class="page_item page-item-1262"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/binary-to-decimal/">Binary to Decimal</a></li> 
            <li class="page_item page-item-1161"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/black-jack/">Black Jack</a></li> 
            <li class="page_item page-item-1256"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/consecutive-sum/">Consecutive Sum</a></li> 
            <li class="page_item page-item-1260"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/decimal-to-binary/">Decimal to Binary</a></li> 
            <li class="page_item page-item-2051"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/decimal-to-octal/">Decimal to Octal</a></li> 
            <li class="page_item page-item-1173"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/flames-program/">Flames Program</a></li> 
            <li class="page_item page-item-2053"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/octal-to-decimal/">Octal to Decimal</a></li> 
            <li class="page_item page-item-1258"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/prime-factorization/">Prime Factorization</a></li> 
            <li class="page_item page-item-2116"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/currency-denomination/">Currency Denomination</a></li> 
           </ul> </li> 
          <li class="page_item page-item-2024 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/">Number Based</a> 
           <ul class="children"> 
            <li class="page_item page-item-2404"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/neon-number/">Neon Number</a></li> 
            <li class="page_item page-item-2402"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/automorphic/">Automorphic</a></li> 
            <li class="page_item page-item-2055"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/evil-number/">Evil Number</a></li> 
            <li class="page_item page-item-2059"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/lucky-numbers/">Lucky Numbers</a></li> 
            <li class="page_item page-item-1178"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/smith-number/">Smith Number</a></li> 
            <li class="page_item page-item-2040"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/tribonacci/">Tribonacci Numbers</a></li> 
            <li class="page_item page-item-2043"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/unique-numbers/">Unique Numbers</a></li> 
           </ul> </li> 
          <li class="page_item page-item-1323 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/">Recursive Programs</a> 
           <ul class="children"> 
            <li class="page_item page-item-2100"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/anagrams-recursive/">Anagrams (Recursive)</a></li> 
            <li class="page_item page-item-1328"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/factorial/">Factorial</a></li> 
            <li class="page_item page-item-2383"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/hcf/">HCF</a></li> 
            <li class="page_item page-item-2391"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/natural_nos/">Natural_Nos</a></li> 
            <li class="page_item page-item-1330"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/power/">Power</a></li> 
            <li class="page_item page-item-2388"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/prime/">Prime</a></li> 
            <li class="page_item page-item-1333"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/product/">Product</a></li> 
            <li class="page_item page-item-1321"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/reverse-print/">Reverse Print</a></li> 
           </ul> </li> 
          <li class="page_item page-item-2018 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/">String Based</a> 
           <ul class="children"> 
            <li class="page_item page-item-2455"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/multiply-big-numbers-as-strings/">Multiply Big Numbers as&nbsp;Strings</a></li> 
            <li class="page_item page-item-1264"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/alphabet-frequency/">Alphabet Frequency</a></li> 
            <li class="page_item page-item-2057"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/rearrange-vowels/">Rearrange Vowels</a></li> 
            <li class="page_item page-item-1314"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/string-encode/">String Encode</a></li> 
            <li class="page_item page-item-2038"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/word-sort/">Word Sort</a></li> 
            <li class="page_item page-item-2069"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/espionage-decode/">Espionage Decode</a></li> 
            <li class="page_item page-item-2109"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/number-to-word/">Number to Word</a></li> 
           </ul> </li> 
          <li class="page_item page-item-2176 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/">All Sorts</a> 
           <ul class="children"> 
            <li class="page_item page-item-2184"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/alpha-sort/">Alpha Sort</a></li> 
            <li class="page_item page-item-2178"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/bubble-sort/">Bubble Sort</a></li> 
            <li class="page_item page-item-2182"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/bubble-sort-string/">Bubble Sort (String)</a></li> 
            <li class="page_item page-item-2180"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/exchange-selection-sort/">Exchange Selection Sort</a></li> 
            <li class="page_item page-item-2186"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/merge-sort/">Merge Sort</a></li> 
            <li class="page_item page-item-2188"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/quick-sort/">Quick Sort</a></li> 
           </ul> </li> 
         </ul> </li> 
        <li class="page_item page-item-695"><a href="https://nilabja.wordpress.com/computers/synopsis/">Java – Synopsis</a></li> 
        <li class="page_item page-item-2061"><a href="https://nilabja.wordpress.com/computers/java-facts/">Java Facts</a></li> 
       </ul> </li> 
      <li class="page_item page-item-1624 page_item_has_children"><a href="https://nilabja.wordpress.com/computer-stuff/">Computer Stuffs</a> 
       <ul class="children"> 
        <li class="page_item page-item-1704"><a href="https://nilabja.wordpress.com/computer-stuff/boolean-algebra/">Boolean Algebra</a></li> 
        <li class="page_item page-item-1717"><a href="https://nilabja.wordpress.com/computer-stuff/k-maps/">Karnaugh Maps</a></li> 
        <li class="page_item page-item-1688"><a href="https://nilabja.wordpress.com/computer-stuff/address-calculation/">Address Calculation</a></li> 
        <li class="page_item page-item-1696"><a href="https://nilabja.wordpress.com/computer-stuff/data-structures/">Data Structures</a></li> 
        <li class="page_item page-item-1668"><a href="https://nilabja.wordpress.com/computer-stuff/isc-viva/">ISC Viva Questions</a></li> 
        <li class="page_item page-item-1481"><a href="https://nilabja.wordpress.com/computer-stuff/simplified-big-o/">Simplified Big-O</a></li> 
       </ul> </li> 
      <li class="page_item page-item-767 page_item_has_children"><a href="https://nilabja.wordpress.com/older-pages-posts/">Archive Stuffs</a> 
       <ul class="children"> 
        <li class="page_item page-item-2210 page_item_has_children"><a href="https://nilabja.wordpress.com/older-pages-posts/icse-solved-programs/">ICSE Solved Programs 2010 –&nbsp;2012</a> 
         <ul class="children"> 
          <li class="page_item page-item-2212"><a href="https://nilabja.wordpress.com/older-pages-posts/icse-solved-programs/icse-2015/">ICSE 2010 Programs</a></li> 
          <li class="page_item page-item-2243"><a href="https://nilabja.wordpress.com/older-pages-posts/icse-solved-programs/icse-2011-programs/">ICSE 2011 Programs</a></li> 
          <li class="page_item page-item-2248"><a href="https://nilabja.wordpress.com/older-pages-posts/icse-solved-programs/icse-2012-programs/">ICSE 2012 Programs</a></li> 
         </ul> </li> 
        <li class="page_item page-item-1911 page_item_has_children"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/">ISC, Computer Science Question&nbsp;Papers</a> 
         <ul class="children"> 
          <li class="page_item page-item-1915"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2005/">Year 2005</a></li> 
          <li class="page_item page-item-1919"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2006/">Year 2006</a></li> 
          <li class="page_item page-item-1923"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2007/">Year 2007</a></li> 
          <li class="page_item page-item-1931"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2008/">Year 2008</a></li> 
          <li class="page_item page-item-1971"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2009/">Year 2009</a></li> 
          <li class="page_item page-item-1978"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2010/">Year 2010</a></li> 
          <li class="page_item page-item-1980"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2011/">Year 2011</a></li> 
          <li class="page_item page-item-1983"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2012/">Year 2012</a></li> 
          <li class="page_item page-item-1987"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2013/">Year 2013</a></li> 
         </ul> </li> 
       </ul> </li> 
      <li class="page_item page-item-1057"><a href="https://nilabja.wordpress.com/gallery/">Gallery Stuffs</a></li> 
     </ul>
    </div> 
    <div id="header" role="banner"> 
     <h1><a href="https://nilabja.wordpress.com/">BRAINSTORMING</a></h1> 
     <div class="description">
      © NILABJA SARKAR
     </div> 
     <div class="rss"> 
      <a href="https://nilabja.wordpress.com/feed/" title="RSS">Stay updated via RSS</a> 
     </div> 
    </div> 
    <hr> 
    <div id="container"> 
     <div id="sidebar" role="complementary"> 
      <!-- begin widgetized sidebar 1 --> 
      <ul> 
       <li id="gravatar-3" class="widget widget_gravatar"><h2 class="widgettitle">Nilabja Sarkar (NEEL)</h2><p><img alt="" src="https://2.gravatar.com/avatar/58bb3b16f47342b3b3fc87dad06e48a8?s=128&amp;d=&amp;r=G" class="avatar avatar-128 grav-widget-none" height="128" width="128"></p> </li>
       <li id="text-2" class="widget widget_text"> 
        <div class="textwidget"></div> </li>
       <li id="blog-stats-2" class="widget widget_blog-stats"><h2 class="widgettitle">Blog Stats</h2> 
        <ul> 
         <li>191,497 hits</li> 
        </ul> </li>
       <li id="meta-4" class="widget widget_meta"><h2 class="widgettitle">Administrator</h2> 
        <ul> 
         <li><a href="https://wordpress.com/start?ref=wplogin">Register</a></li> 
         <li><a href="https://nilabja.wordpress.com/wp-login.php">Log in</a></li> 
         <li><a href="https://nilabja.wordpress.com/feed/">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li> 
         <li><a href="https://nilabja.wordpress.com/comments/feed/">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li> 
         <li><a href="https://wordpress.com/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.com</a></li> 
        </ul> </li>
       <li id="calendar-3" class="widget widget_calendar"><h2 class="widgettitle">Timeline</h2>
        <div id="calendar_wrap" class="calendar_wrap">
         <table id="wp-calendar"> 
          <caption>
           October 2017
          </caption> 
          <thead> 
           <tr> 
            <th scope="col" title="Monday">M</th> 
            <th scope="col" title="Tuesday">T</th> 
            <th scope="col" title="Wednesday">W</th> 
            <th scope="col" title="Thursday">T</th> 
            <th scope="col" title="Friday">F</th> 
            <th scope="col" title="Saturday">S</th> 
            <th scope="col" title="Sunday">S</th> 
           </tr> 
          </thead> 
          <tfoot> 
           <tr> 
            <td colspan="3" id="prev"><a href="https://nilabja.wordpress.com/2017/06/">« Jun</a></td> 
            <td class="pad">&nbsp;</td> 
            <td colspan="3" id="next" class="pad">&nbsp;</td> 
           </tr> 
          </tfoot> 
          <tbody> 
           <tr> 
            <td colspan="6" class="pad">&nbsp;</td>
            <td>1</td> 
           </tr> 
           <tr> 
            <td>2</td>
            <td>3</td>
            <td>4</td>
            <td>5</td>
            <td>6</td>
            <td>7</td>
            <td id="today">8</td> 
           </tr> 
           <tr> 
            <td>9</td>
            <td>10</td>
            <td>11</td>
            <td>12</td>
            <td>13</td>
            <td>14</td>
            <td>15</td> 
           </tr> 
           <tr> 
            <td>16</td>
            <td>17</td>
            <td>18</td>
            <td>19</td>
            <td>20</td>
            <td>21</td>
            <td>22</td> 
           </tr> 
           <tr> 
            <td>23</td>
            <td>24</td>
            <td>25</td>
            <td>26</td>
            <td>27</td>
            <td>28</td>
            <td>29</td> 
           </tr> 
           <tr> 
            <td>30</td>
            <td>31</td> 
            <td class="pad" colspan="5">&nbsp;</td> 
           </tr> 
          </tbody> 
         </table>
        </div></li>
       <li id="pages-3" class="widget widget_pages"><h2 class="widgettitle">Info Pages…</h2> 
        <ul> 
         <li class="page_item page-item-139 page_item_has_children"><a href="https://nilabja.wordpress.com/loyola/">Loyola Stuffs</a> 
          <ul class="children"> 
           <li class="page_item page-item-2409"><a href="https://nilabja.wordpress.com/loyola/icse-project-2017/">ICSE Computer Project&nbsp;2017</a></li> 
           <li class="page_item page-item-338 page_item_has_children"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/">Syllabus (6 to&nbsp;12)</a> 
            <ul class="children"> 
             <li class="page_item page-item-876"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-6/">Std – 6</a></li> 
             <li class="page_item page-item-878"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-7/">Std – 7</a></li> 
             <li class="page_item page-item-881"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-8/">Std – 8</a></li> 
             <li class="page_item page-item-883"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-9/">Std – 9</a></li> 
             <li class="page_item page-item-889"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-10/">Std – 10</a></li> 
             <li class="page_item page-item-891"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-11/">Std – 11</a></li> 
             <li class="page_item page-item-893"><a href="https://nilabja.wordpress.com/loyola/syllabus-vi-to-xii/std-12/">Std – 12</a></li> 
            </ul> </li> 
          </ul> </li> 
         <li class="page_item page-item-56 page_item_has_children current_page_ancestor current_page_parent"><a href="https://nilabja.wordpress.com/computers/">Java Stuffs</a> 
          <ul class="children"> 
           <li class="page_item page-item-731 current_page_item"><a href="https://nilabja.wordpress.com/computers/theory-of-java/">Java – Theory</a></li> 
           <li class="page_item page-item-734"><a href="https://nilabja.wordpress.com/computers/java-glossary-of-terms/">Java – Glossary of&nbsp;Terms</a></li> 
           <li class="page_item page-item-573"><a href="https://nilabja.wordpress.com/computers/question-bank/">Java – Question&nbsp;Bank</a></li> 
           <li class="page_item page-item-1158 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/">Java – Sample&nbsp;Programs</a> 
            <ul class="children"> 
             <li class="page_item page-item-2022 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/">Array Based</a> 
              <ul class="children"> 
               <li class="page_item page-item-1317"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/array-stack/">Array Stack</a></li> 
               <li class="page_item page-item-1168"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/boundary-elements/">Boundary Elements</a></li> 
               <li class="page_item page-item-2045"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/bubble-sort/">Bubble Sort</a></li> 
               <li class="page_item page-item-2049"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/merge-sort/">Merge Sort</a></li> 
               <li class="page_item page-item-1166"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/mirror-matrix/">Mirror Matrix</a></li> 
               <li class="page_item page-item-2047"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/quick-sort/">Quick Sort</a></li> 
               <li class="page_item page-item-1171"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/spiral-matrix/">Spiral Matrix</a></li> 
               <li class="page_item page-item-2092"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/array-based/date-calculation/">Date Calculation</a></li> 
              </ul> </li> 
             <li class="page_item page-item-2026 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/">Data Structure</a> 
              <ul class="children"> 
               <li class="page_item page-item-2128"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/linked-list-based-dequeue/">Dequeue</a></li> 
               <li class="page_item page-item-2393"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/dequeue-array-based/">Dequeue (Array Based)</a></li> 
               <li class="page_item page-item-1309"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/circular-queue/">Circular Queue</a></li> 
               <li class="page_item page-item-1487"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/linked-list-stack/">Linked List Stack</a></li> 
               <li class="page_item page-item-2126"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/linked-list-queue/">Linked List Queue</a></li> 
               <li class="page_item page-item-2036"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/data-str-based/towers-of-hanoi/">Towers of Hanoi</a></li> 
              </ul> </li> 
             <li class="page_item page-item-2406 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/">Miscellaneous</a> 
              <ul class="children"> 
               <li class="page_item page-item-2282"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/binary-addition-2/">Binary Addition</a></li> 
               <li class="page_item page-item-1262"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/binary-to-decimal/">Binary to Decimal</a></li> 
               <li class="page_item page-item-1161"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/black-jack/">Black Jack</a></li> 
               <li class="page_item page-item-1256"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/consecutive-sum/">Consecutive Sum</a></li> 
               <li class="page_item page-item-1260"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/decimal-to-binary/">Decimal to Binary</a></li> 
               <li class="page_item page-item-2051"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/decimal-to-octal/">Decimal to Octal</a></li> 
               <li class="page_item page-item-1173"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/flames-program/">Flames Program</a></li> 
               <li class="page_item page-item-2053"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/octal-to-decimal/">Octal to Decimal</a></li> 
               <li class="page_item page-item-1258"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/prime-factorization/">Prime Factorization</a></li> 
               <li class="page_item page-item-2116"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/miscellaneous/currency-denomination/">Currency Denomination</a></li> 
              </ul> </li> 
             <li class="page_item page-item-2024 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/">Number Based</a> 
              <ul class="children"> 
               <li class="page_item page-item-2404"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/neon-number/">Neon Number</a></li> 
               <li class="page_item page-item-2402"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/automorphic/">Automorphic</a></li> 
               <li class="page_item page-item-2055"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/evil-number/">Evil Number</a></li> 
               <li class="page_item page-item-2059"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/lucky-numbers/">Lucky Numbers</a></li> 
               <li class="page_item page-item-1178"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/smith-number/">Smith Number</a></li> 
               <li class="page_item page-item-2040"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/tribonacci/">Tribonacci Numbers</a></li> 
               <li class="page_item page-item-2043"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/number-based/unique-numbers/">Unique Numbers</a></li> 
              </ul> </li> 
             <li class="page_item page-item-1323 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/">Recursive Programs</a> 
              <ul class="children"> 
               <li class="page_item page-item-2100"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/anagrams-recursive/">Anagrams (Recursive)</a></li> 
               <li class="page_item page-item-1328"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/factorial/">Factorial</a></li> 
               <li class="page_item page-item-2383"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/hcf/">HCF</a></li> 
               <li class="page_item page-item-2391"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/natural_nos/">Natural_Nos</a></li> 
               <li class="page_item page-item-1330"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/power/">Power</a></li> 
               <li class="page_item page-item-2388"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/prime/">Prime</a></li> 
               <li class="page_item page-item-1333"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/product/">Product</a></li> 
               <li class="page_item page-item-1321"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/recursive-programs/reverse-print/">Reverse Print</a></li> 
              </ul> </li> 
             <li class="page_item page-item-2018 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/">String Based</a> 
              <ul class="children"> 
               <li class="page_item page-item-2455"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/multiply-big-numbers-as-strings/">Multiply Big Numbers as&nbsp;Strings</a></li> 
               <li class="page_item page-item-1264"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/alphabet-frequency/">Alphabet Frequency</a></li> 
               <li class="page_item page-item-2057"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/rearrange-vowels/">Rearrange Vowels</a></li> 
               <li class="page_item page-item-1314"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/string-encode/">String Encode</a></li> 
               <li class="page_item page-item-2038"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/word-sort/">Word Sort</a></li> 
               <li class="page_item page-item-2069"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/espionage-decode/">Espionage Decode</a></li> 
               <li class="page_item page-item-2109"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/string-based/number-to-word/">Number to Word</a></li> 
              </ul> </li> 
             <li class="page_item page-item-2176 page_item_has_children"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/">All Sorts</a> 
              <ul class="children"> 
               <li class="page_item page-item-2184"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/alpha-sort/">Alpha Sort</a></li> 
               <li class="page_item page-item-2178"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/bubble-sort/">Bubble Sort</a></li> 
               <li class="page_item page-item-2182"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/bubble-sort-string/">Bubble Sort (String)</a></li> 
               <li class="page_item page-item-2180"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/exchange-selection-sort/">Exchange Selection Sort</a></li> 
               <li class="page_item page-item-2186"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/merge-sort/">Merge Sort</a></li> 
               <li class="page_item page-item-2188"><a href="https://nilabja.wordpress.com/computers/sample-programs-for-isc/all-sorts/quick-sort/">Quick Sort</a></li> 
              </ul> </li> 
            </ul> </li> 
           <li class="page_item page-item-695"><a href="https://nilabja.wordpress.com/computers/synopsis/">Java – Synopsis</a></li> 
           <li class="page_item page-item-2061"><a href="https://nilabja.wordpress.com/computers/java-facts/">Java Facts</a></li> 
          </ul> </li> 
         <li class="page_item page-item-1624 page_item_has_children"><a href="https://nilabja.wordpress.com/computer-stuff/">Computer Stuffs</a> 
          <ul class="children"> 
           <li class="page_item page-item-1704"><a href="https://nilabja.wordpress.com/computer-stuff/boolean-algebra/">Boolean Algebra</a></li> 
           <li class="page_item page-item-1717"><a href="https://nilabja.wordpress.com/computer-stuff/k-maps/">Karnaugh Maps</a></li> 
           <li class="page_item page-item-1688"><a href="https://nilabja.wordpress.com/computer-stuff/address-calculation/">Address Calculation</a></li> 
           <li class="page_item page-item-1696"><a href="https://nilabja.wordpress.com/computer-stuff/data-structures/">Data Structures</a></li> 
           <li class="page_item page-item-1668"><a href="https://nilabja.wordpress.com/computer-stuff/isc-viva/">ISC Viva Questions</a></li> 
           <li class="page_item page-item-1481"><a href="https://nilabja.wordpress.com/computer-stuff/simplified-big-o/">Simplified Big-O</a></li> 
          </ul> </li> 
         <li class="page_item page-item-767 page_item_has_children"><a href="https://nilabja.wordpress.com/older-pages-posts/">Archive Stuffs</a> 
          <ul class="children"> 
           <li class="page_item page-item-2210 page_item_has_children"><a href="https://nilabja.wordpress.com/older-pages-posts/icse-solved-programs/">ICSE Solved Programs 2010 –&nbsp;2012</a> 
            <ul class="children"> 
             <li class="page_item page-item-2212"><a href="https://nilabja.wordpress.com/older-pages-posts/icse-solved-programs/icse-2015/">ICSE 2010 Programs</a></li> 
             <li class="page_item page-item-2243"><a href="https://nilabja.wordpress.com/older-pages-posts/icse-solved-programs/icse-2011-programs/">ICSE 2011 Programs</a></li> 
             <li class="page_item page-item-2248"><a href="https://nilabja.wordpress.com/older-pages-posts/icse-solved-programs/icse-2012-programs/">ICSE 2012 Programs</a></li> 
            </ul> </li> 
           <li class="page_item page-item-1911 page_item_has_children"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/">ISC, Computer Science Question&nbsp;Papers</a> 
            <ul class="children"> 
             <li class="page_item page-item-1915"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2005/">Year 2005</a></li> 
             <li class="page_item page-item-1919"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2006/">Year 2006</a></li> 
             <li class="page_item page-item-1923"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2007/">Year 2007</a></li> 
             <li class="page_item page-item-1931"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2008/">Year 2008</a></li> 
             <li class="page_item page-item-1971"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2009/">Year 2009</a></li> 
             <li class="page_item page-item-1978"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2010/">Year 2010</a></li> 
             <li class="page_item page-item-1980"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2011/">Year 2011</a></li> 
             <li class="page_item page-item-1983"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2012/">Year 2012</a></li> 
             <li class="page_item page-item-1987"><a href="https://nilabja.wordpress.com/older-pages-posts/isc-computer-science-question-papers/year-2013/">Year 2013</a></li> 
            </ul> </li> 
          </ul> </li> 
         <li class="page_item page-item-1057"><a href="https://nilabja.wordpress.com/gallery/">Gallery Stuffs</a></li> 
        </ul> </li>
       <li id="flickr-2" class="widget widget_flickr"><h2 class="widgettitle">Flickr Photos</h2>
        <!-- Start of Flickr Widget --> 
        <div class="flickr-wrapper flickr-size-small"> 
         <div class="flickr-images"> 
          <a href="https://www.flickr.com/photos/sneaky_p_jr/23705772338/"><img src="https://farm5.staticflickr.com/4461/23705772338_a054d5dc3f_m.jpg" alt="Counter-Terrorists Win!" title="Counter-Terrorists Win!"></a>
          <a href="https://www.flickr.com/photos/buzz_rozwell/23705229818/"><img src="https://farm5.staticflickr.com/4487/23705229818_6431a3da19_m.jpg" alt="Summit Lake Smoke" title="Summit Lake Smoke"></a>
          <a href="https://www.flickr.com/photos/roynyc/36846825494/"><img src="https://farm5.staticflickr.com/4508/36846825494_3f55287ba0_m.jpg" alt="Williamsburg Brooklyn" title="Williamsburg Brooklyn"></a>
          <a href="https://www.flickr.com/photos/141758701@N02/37508316406/"><img src="https://farm5.staticflickr.com/4469/37508316406_e645bd323a_m.jpg" alt="Batman: The Pact" title="Batman: The Pact"></a>
          <a href="https://www.flickr.com/photos/droehrli/37556792931/"><img src="https://farm5.staticflickr.com/4471/37556792931_b8300b5ec6_m.jpg" alt="Schirmpilze" title="Schirmpilze"></a> 
         </div> 
         <a class="flickr-more" href="http://www.flickr.com/explore/interesting/"> More Photos </a> 
        </div> 
        <!-- End of Flickr Widget --> </li> 
      </ul> 
      <!-- end widgetized sidebar 1 --> 
     </div> 
     <div id="content" role="main"> 
      <div class="column"> 
       <div class="post" id="post-731"> 
        <div class="posttitle"> 
         <h2 class="pagetitle">Java – Theory</h2> 
        </div> 
        <div class="postcomments">
         <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comments">13</a>
        </div> 
        <div class="entry"> 
         <p><strong>What is Java?</strong><br> Java is a 3rd Generation Object Oriented programming Language, developed by James Gosling in the year 1995. It was initially codenamed as Green and hypothetically called Oak named after the Oak tree outside Gosling’s house.<br> It is case sensitive and has a unique two step translation process that includes both Compilation and Interpretation which makes Java Platform independent.</p> 
         <p><strong>What is Procedure Oriented Programming Language?</strong><br> Pop is a Procedural Oriented Programming Language. In this, the stress is laid on function rather than data. Data may be kept floating throughout the Programming. Hence by scanning the whole program from beginning to the end and we can rectify any error caused. E.g. of POP based language are GW-BASIC, C, etc…<br> Characteristics of POP<br> 1) Emphasis is laid on functions (Logical steps).<br> 2) Functions share global data.<br> 3) Data values can keep floating from one function to another.<br> 4) Uses top down approach of programming.</p> 
         <p><strong>Drawbacks of POP</strong><br> 1) As Data values are global to all the functions, you may require making necessary changes in the functions due to change in the data values.<br> 2) It is not suitable to solve complex problems in real situations.</p> 
         <p>What is <strong>Object Oriented Programming Language</strong>?<br> OOP is an Object Oriented Programming Language. It is a modular approach to programming in which equal stress is given to data as well as methods and it allows the data be applied within the stipulated program area. It also provides reusability features to develop productivity logic.</p> 
         <p><strong>Features of OOP</strong><br> 1. It gives equal stress on data and function.<br> 2. It makes the program simple by dividing it into a number of objects.<br> 3. The objects can be used as a bridge to have data flow from one function to another.<br> 4. Data can be easily modified without any change in the function.</p> 
         <p>Advantages of OOP<br> 1) We can extend the use of existing class through inheritance.<br> 2) Using the concept data hiding can generate secured program.<br> 3) We can create different modules in our project through objects.<br> 4) Multiple instances of an object can be generated to co-exist without any interference.<br> 5) It is highly beneficial to solve complex problems.<br> 6) It is easy to modified and maintain software complexity.</p> 
         <p>Examples of OOP based languages are Simula, C++, Java, Python, and Smalltalk etc…</p> 
         <p><strong>Basic Principles of OOP</strong><br> 1) Encapsulation – Binding up of data members and member functions together into a single unit called (class) is called Encapsulation.<br> 2) Data Abstraction – Act of representing only essential features without including its background details is called Data Abstraction.<br> 3) Polymorphism – The ability of a method to behave in more than one form is called polymorphism. Function Overloading is a way to implement it, in which more than one function has the same name but different argument list.<br> 4) Inheritance – The ability of a class to derive the properties from another class is called Inheritance. The class that inherits is called the Derived / Sub / Daughter class and the class from which it is derived is called Base / Super / Parent class. The keyword used to implement Inheritance is ‘extends’.<br> 5) Object – It is an identifiable entity with some characteristics and behaviour.<br> 6) Class – It is a blueprint that represents a set of objects which share common characteristics and behaviour.</p> 
         <p>Related Terms :<br> <strong>Data binding </strong>– is the process to link to the function call with function signature at run-time i.e., during execution of a program.</p> 
         <p><strong>Attribute</strong>:-The characteristics which make every object having its identity make them distinguished is called attribute.</p> 
         <p><strong>Behaviour </strong>– The behaviour of any class or object is represented through various functions and methods.</p> 
         <p><strong>Message Passing</strong> – When object need to interact with one another they do so by passing information to and from one another, this is called Message Passing</p> 
         <p><strong>Data Hiding</strong> – is the data which cannot be accessed directly outside, class premises although they are available in the same program</p> 
         <p><strong>Garbage Collection</strong> – The Garbage-collected Heap is where the objects in Java programs are stored. Whenever we allocate an object using new operator, the heap comes into picture and memory is allocated from there. Java does this automatically using Garbage collection mechanism, using an algorithm named Mark &amp; Sweep logic. Remember that the local object reference resides on Stack but the actual object resides in Heap only. Also, arrays in Java are objects, hence they also resides in Garbage-collected Heap.</p> 
         <p><strong>Different Types of Java Programs</strong><br> 1) <strong>Standalone Application</strong> – An application program that is developed by programmers which consists of various methods and these methods being invoked from within a ‘main ( )’ method is called standalone application.<br> 2) <strong>Internet Applets </strong>– These are small java programs that are embedded in a web page and which requires a web browser to be run/executed.<br> 3) <strong>Servlets </strong>– They extend the functionality of web browser.<br> Source Code – The High level language code written by programmers which is not understandable by the computer is known as Source Code. It has an extension of *.java<br> Byte Code – is an intermediate code that consists of a set of pseudo machine language instructions that are understood by the JVM and are independent of the underlying hardware. It is called byte code because each chunk of code is of 8 BITS (1 byte = 8 Bits).</p> 
         <p>The byte code files have an extension of *.class</p> 
         <p><strong>Object Code </strong>– The interpreter of Java named JVM (which stands for Java Virtual Machine) then converts the intermediate Byte Code into machine specific executable which runs on the host machine.<br> API (Application Programming Interface) – consists of libraries of pre compiled code that programmers can use in their application and programs for designing softwares. Hence we can say that Java API consists of functions and variables that programmers can reuse.</p> 
         <p><strong>Java Packages</strong> – Packages are collection of similar nature classes. A package can be created by using the keyword ‘package’ and the keyword used to include a package in our program is ‘import’. Java contains an extensive library of pre-written classes grouped together into packages –<br> ? java.lang.* It is a default package containing String, Math, Integer, thread etc.<br> ? java.io.* It is the basic Input Output package of Java<br> ? java.util.* The java utility package<br> ? java.applet.* The applet package<br> ? java.net.* The Networking package of Java<br> ? java.awt.* It stands for Abstract Windows Toolkit, for designing Windows based applications.</p> 
         <p><strong>Basic Features of Java:- </strong><br> 1) Write once run anywhere(WORA)<br> 2) Platform Independent<br> 3) Offers many security features to make its program safe and secure<br> 4) Built in graphics &amp; supports multimedia<br> 5) Light Weight code<br> 6) Open Product… i.e., freely available to all.</p> 
         <p><strong>Blue – J </strong><br> Blue-J is an <strong>Integrated Development Environment (IDE)</strong> for writing, editing, compiling, testing, executing and debugging the Java programming language, developed mainly for educational purposes, but also suitable for small-scale software development. Blue J was initially designed at University of Kent by <strong>David Barns</strong> and <strong>Michael Kollins</strong></p> 
         <p>The main screen graphically shows the class structure of an application under development (in an UML-like diagram), and objects can be interactively created and tested. This interaction facility, combined with a clean, simple user interface, allows easy experimentation with objects under development.</p> 
         <p><strong>Features of Blue – J</strong><br> 1. Simplicity of the interface – The GUI user friendly interface is simpler than in full-scale professional environments, and thus easier to learn.<br> 2. The “Code Pad” – The code pad is a tool that instantly evaluates arbitrary Java expressions and statements.<br> 3. Regression testing<br> 4. Provision for syntax highlighting<br> 5. Built in debugger.<br> 6. Program input/output i.e. In Blue-J both the parameter values for and the return values from method calls can be entered / inspected directly.<br> 7. Java ME support – Java ME (Micro Edition) projects can be developed and deployed from Blue-J.</p> 
         <p><strong>IDE for Java (other than Blue J) </strong><br> Sl IDE Brief Description<br> 1 Eclipse Free, open source IDE. The most popular of the Java IDEs, but harder to set up and configure than the commercial ones.<br> 2 J Builder Lots of J2EE support including UML and app server integration.<br> 3 Emacs This is a powerful, free editor that does color syntax highlighting, automatic indentation, and parenthesis/brace balancing.<br> 4 M7 Nitro X Expensive but very powerful J2EE IDE based on Eclipse.</p> 
         <p><strong>Java Tokens &amp; Character Set</strong><br> It is a set of valid characters that a language can recognize. The character set of Java is UNICODE. This has been selected due its vastness of characters. It is 2 byte character code. The first 128 characters of Unicode are identical to the ASCII character set.<br> Tokens are smallest individual units of a Java program. There are 5 different types of tokens in Java –<br> 1. Keywords<br> 2. Identifiers<br> 3. Literals<br> 4. Operators<br> 5. Separators Hint: Try to remember KILOS</p> 
         <p><strong>Keywords </strong>are the reserved words which convey a special meaning to a language compiler. They can not be used for any other purpose like function name, variable name or object names.<br> There are around 48 keywords, of which const and goto have been reserved even though they are not currently being used for any purpose true, false and null might appear to be keywords but actually they are literals, and hence are reserved words.</p> 
         <p><strong>Identifiers </strong>are fundamental building blocks of a program. They are named memory locations or simply names given to variables, objects, classes, functions, arrays etc… They are case sensitive.</p> 
         <p>There are certain Identifier naming rules –<br> 1. They can consist of infinite number of alphabets and digits<br> 2. They must start with an alphabet and not with a digit<br> 3. They can not be a keyword or reserved word<br> 4. They cannot have any spaces<br> 5. They cannot contain any special character other than _(underscore), $(dollar)</p> 
         <p>While naming identifiers there are certain conventions that make them identifiable<br> 1. Class names begins with an Uppercase character<br> 2. Identifiers having multiple words, the first character of 2nd and subsequent words are in Uppercase<br> 3. Constants are in all CAPITALS</p> 
         <p>Comments (Remarks):- refers to statements which are ignored by the java compiler and increase the readability of a program. These are used to state a purpose of the instructions used in a program.</p> 
         <p><strong>Literal </strong>are the fixed values that are assigned to variables which do not change its values during program execution. They are of 5 types –<br> <strong>1.Integer Literal</strong><br> i.Decimal<br> ii.Octal<br> iii.Hexadecimal</p> 
         <p>To represent Decimal Integers we simply use the integer type number as literal, e.g. int p = 45; So, System.out.println (p); // Shows 45 as output</p> 
         <p>To represent Octal Integers however we precede the number with a 0 (zero) as literal, e.g. int p = 045; System.out.println (p); // Shows 37 as output coz, (45) in octal is 37 in decimal number system.</p> 
         <p>Moreover to represent any Hexadecimal Integer we use 0x (Zero and lowercase letter x) preceding the number as hexadecimal literal e.g. int p = 0x45;<br> System.out.println (p); // Shows 69 as output coz, (45) in hexadecimal is 69 in decimal number system.</p> 
         <p>2. <strong>Real Literals</strong><br> i. Floating point literals have 7 digits of precision after the decimal point<br> ii. Double literals have 16 digits of precision after decimal point</p> 
         <p>3. <strong>Character Literals</strong> are enclosed within a pair of single quotes<br> char ch = ‘A’;<br> Character type user inputs are taken in the following way –<br> e.g. char ch = (char) in.read ( ) ;</p> 
         <p>4. <strong>Boolean Literal</strong><br> There are only 2 types of boolean literals i.e. true &amp; false the default being false.</p> 
         <p>5. <strong>Null Literal</strong><br> Operator – are the entities or symbols that tell the compiler that what operation has to be performed with one, two or three number of operands within a given expression.<br> There are approximately a set of 37 different operators that Java uses<br> Operators can either operate on 1, 2 or 3 operands and accordingly named as –</p> 
         <p>? Unary (works on 1 operand) e.g. + + and – –<br> ? Binary (works on 2 operands) e.g. +, – , * , / , &gt;, , = , &gt; , &lt;&lt; )<br> ? Special Operators (this , dot (.) , new, (type) , instanceof )</p> 
         <p><strong>Data types</strong> – are the entities that tell the compiler that which variable will hold what kind of values.<br> Primitive data types – Also called as Basic Data type. They are pre defined or built in data types because they are already built in java. E.g. byte, short, int, long, float, double, char, boolean.<br> Non Primitive Data Types: Directly or indirectly dependent on primitive data types. They store the data values with reference to the address or locations. So, they are called as Reference Data Types. E.g. array, classes interfaces etc…</p> 
         <p><strong>Range, Size and hierarchy of various primitive data types</strong><br> Type ….Size…. Range<br> boolean 1 byte (uses 1 bit) true and false<br> byte 8 bits (1 bytes) – 128 to + 127<br> char 16 bits (2 bytes) 0 to 65,535<br> short 16 bits (2 bytes) – 32768 to +32767<br> int 32 bits (4bytes) – 2 31 to + 231 – 1<br> long 64 bits (8bytes) – 2 63 to + 263 – 1<br> float 32 bits (4bytes) – 3.4E+38 to +3.4E+38<br> double 64 bits (8bytes) – 1.7E +308 to 1.7E+308</p> 
         <p>Type conversion The process of convert one primitive datatype to another either from lower precision to higher or vice versa I known as type conversion. This can be achieved in two ways –<br> <strong>Implicit Data Type Conversion</strong> – Such Type of conversion is performed by the compiler without programmer’s intervention. In this type of conversion a datatype of lower precision gets converted to a datatype with higher precision.<br> e.g. int a = 10;<br> double d = a;<br> System.out.println(d);<br> The above code snippet gives 10.0 as output; this clearly indicates that the int datatype got automatically converted to double.</p> 
         <p><strong>Explicit data type Conversion</strong> – Such type of conversion is user defined conversion which forces an expression to be converted into specific type. Generally this is done to force a conversion from higher precision data type to lower.<br> e.g. double pi = 3.1415;<br> int i = pi;</p> 
         <p>The above statement is considered illegal and hence gives an ERROR message “POSSIBLE LOSS OF PRECISION”<br> Hence the above code should be Type Casted in the following manner –<br> int i = (int) pi;<br> System.out.println(i);<br> Now, the output to the above code will be 3</p> 
         <p><strong>Potential problems with Type Casting</strong><br> 1. When a datatype is converted from double to float results in loss of precision i.e. a double datatype has 16 digits after decimal point which gets truncated to 7 digits.<br> 2. When a datatype is converted from double or float to integer type results in loss of entire fractional part leaving behind only the integral part.<br> 3. When a higher order integer datatype like int or long is converted to byte or short might result in the data going out of range.</p> 
         <p>Take an example<br> int a = 130;<br> byte b = (byte) a;<br> System.out.println(b);</p> 
         <p>The output for the above code is – 126</p> 
         <p>Explanation for the above –<br> The above code tries to type cast int to byte, the data range for int is – 2 31 to + 231 – 1 whereas that of byte is – 128 to + 127, hence think in terms of a Number Line, when we start filling 130 in the number line starting from 0 (zero) we reach the end of the line at 127 and so the filling process continues from the –ve end and finally reaches – 126, hence the output…</p> 
         <div> 
          <p><b>Operators in Java</b></p> 
         </div> 
         <p><b>Operator </b>– are the entities or symbols that tell the compiler that what operation has to be performed with one, two or three number of operands within a given expression.</p> 
         <p>There are approximately a set of <b>37</b> different operators that Java uses</p> 
         <p>Operators can either operate on 1, 2 or 3 operands and accordingly named as –</p> 
         <ol> 
          <li><b>Unary</b> (works on 1 operand) e.g. + + and – –</li> 
          <li><b>Binary</b> (works on 2 operands) e.g. +, – , * , / , &gt;, &lt;, == etc…</li> 
          <li><b>Ternary</b> (works on 3 operands) e.g. ? :</li> 
         </ol> 
         <p><b>Operators can categorized as –</b></p> 
         <ol> 
          <li>Arithmetic Operators (+ , – , * , / , %)</li> 
          <li>Relational Operators (&gt; , &lt; , &gt;= , &lt;= , == , !=)</li> 
          <li>Logical Operators (&amp;&amp;, || , !)</li> 
          <li>Conditional Operators (? : )</li> 
          <li>Bitwise Operators (&amp;, | , ~ , ^)</li> 
          <li>Shift Operators (&gt;&gt; , &lt;&lt; )</li> 
          <li>Special Operators (this , dot (.) ,&nbsp; new, (type) , instanceOf )</li> 
         </ol> 
         <p><b>Shortcut Operations in Java</b></p> 
         <p>Java implements shortcut methods to work with basic arithmetic operators like</p> 
         <p>+, – , * , / and %</p> 
         <p>Hence, a = a + 5; can be written as a + = 5;</p> 
         <p>And the above + = operator is called Addition Assignment operator.</p> 
         <p>Similarly we have –</p> 
         <ul> 
          <li>Subtraction Assignment – =</li> 
          <li>Multiplication Assignment *=</li> 
          <li>Division Assignment /=</li> 
          <li>Modulus Assignment %=</li> 
         </ul> 
         <p><b>&nbsp;</b><b>Unary Operators</b></p> 
         <p><i>Post/Pre – Increment and Post/Pre – Decrement Operators</i></p> 
         <p>a = a + 1 can also be written as either a++ (<b>Post Increment</b>) or ++a (<b>Pre Increment</b>)</p> 
         <p>a = a – 1 can also be written as either a– – (<b>Post Decrement</b>) or – –a (<b>Pre Decrement</b>)</p> 
         <p><b>The difference between Pre and Post is</b> <b>– </b></p> 
         <p>In a <b>Postfix</b> operator like Post Increment or Post Decrement the value of the operand is first used and then increased or decreased as the case may be for e.g.</p> 
         <p>int a = 5;</p> 
         <p>System.out.println(a++);</p> 
         <p>Gives 5 as output as the value of ‘a’ is first used and then increased to 6, so if we have one more print statement after the above stated line will give 6 as output.</p> 
         <p>System.out.println(a);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Output is 6</p> 
         <p>In a <b>Prefix</b> operator like Pre Increment or Pre Decrement the value of the operand is first increased or decreased as the case may be and then used for e.g.</p> 
         <p>int a = 5;</p> 
         <p>System.out.println(++a);</p> 
         <p>Gives 6 as output as the value of ‘a’ is first incremented and then displayed.</p> 
         <p><b>Relational Operators </b>are used to find the relationship between two quantities, whether they are equal, un-equal, greater than less than etc…</p> 
         <table border="1" cellspacing="0" cellpadding="0"> 
          <tbody> 
           <tr> 
            <td width="87"> <p align="center"><b>Symbol</b></p> </td> 
            <td width="269"> <p align="center"><b>Relationship</b></p> </td> 
           </tr> 
           <tr> 
            <td width="87"> <p align="center">&gt;</p> </td> 
            <td width="269"> <p align="center">Greater than</p> </td> 
           </tr> 
           <tr> 
            <td width="87"> <p align="center">&lt;</p> </td> 
            <td width="269"> <p align="center">Less than</p> </td> 
           </tr> 
           <tr> 
            <td width="87"> <p align="center">&gt;=</p> </td> 
            <td width="269"> <p align="center">Greater than or equal to</p> </td> 
           </tr> 
           <tr> 
            <td width="87"> <p align="center">&lt;=</p> </td> 
            <td width="269"> <p align="center">Less than or equal to</p> </td> 
           </tr> 
           <tr> 
            <td width="87"> <p align="center">==</p> </td> 
            <td width="269"> <p align="center">Equal to</p> </td> 
           </tr> 
           <tr> 
            <td width="87"> <p align="center">!=</p> </td> 
            <td width="269"> <p align="center">Not equal to</p> </td> 
           </tr> 
          </tbody> 
         </table> 
         <p><b>&nbsp;</b><b>Logical Operators </b>are used to join 2 or more relational operators and of 3 types –</p> 
         <ol> 
          <li>&amp;&amp; (and) returns true when both or all the relations are true</li> 
          <li>|| (or) returns true when any one of the relations are true</li> 
          <li>! (not) inverts true to false and false to true</li> 
         </ol> 
         <p>Say if the value of a=4, b=6 then…</p> 
         <p>if(a&gt;5 &amp;&amp; b&gt;5) will return false coz both the conditions are not true</p> 
         <p>if(a&gt;5 || b&gt;5) will return true coz one of the conditions is true</p> 
         <p>if(!true) will return false</p> 
         <p>It is not mandatory to have a relation always inside an ‘if’, even without any ‘if’ clause we can check the return of any relation like –</p> 
         <p>Say the value of x=7; then</p> 
         <p>System.out.println(x==7); will give the output as true, and if we place (!) in front of the relation, System.out.println( ! (x==7)); will invert the output from true to false.</p> 
         <p><b>&nbsp;</b><b>Bitwise and Shift Operators</b></p> 
         <table border="1" cellspacing="0" cellpadding="0"> 
          <tbody> 
           <tr> 
            <td> <p align="center"><b>Operator</b></p> </td> 
            <td> <p align="center"><b>Name</b></p> </td> 
            <td> <p align="center"><b>Description</b></p> </td> 
            <td> <p align="center"><b>Example</b></p> </td> 
            <td> <p align="center"><b>Result</b></p> </td> 
           </tr> 
           <tr> 
            <td> <p align="center"><code>a</code><code> &amp; b</code></p> </td> 
            <td> <p align="center">and</p> </td> 
            <td> <p align="center">1 if both bits are 1 and 0 in all other cases</p> </td> 
            <td> <p align="center">3 &amp; 5</p> </td> 
            <td> <p align="center">1</p> </td> 
           </tr> 
           <tr> 
            <td> <p align="center"><code>a</code><code> | b</code></p> </td> 
            <td> <p align="center">or</p> </td> 
            <td> <p align="center">0 if both the bits are 0, rest all other cases 1</p> </td> 
            <td> <p align="center">3 | 5</p> </td> 
            <td> <p align="center">7</p> </td> 
           </tr> 
           <tr> 
            <td> <p align="center"><code>a</code><code> ^ b</code></p> </td> 
            <td> <p align="center">xor</p> </td> 
            <td> <p align="center">1 if two bits are different and 0 in all other cases</p> </td> 
            <td> <p align="center">3 ^ 5</p> </td> 
            <td> <p align="center">6</p> </td> 
           </tr> 
           <tr> 
            <td> <p align="center"><code>~a</code></p> </td> 
            <td> <p align="center">not</p> </td> 
            <td> <p align="center">Inverts the bits, after transforming the entire number into full bit representation</p> </td> 
            <td> <p align="center">~3</p> </td> 
            <td> <p align="center">-4</p> </td> 
           </tr> 
           <tr> 
            <td> <p align="center"><code>n</code><code> &lt;&lt; p</code></p> </td> 
            <td> <p align="center">left shift</p> </td> 
            <td> <p align="center">Shifts the bits of n towards left by p positions thereby adding Zeros to the extreme LHS</p> </td> 
            <td> <p align="center">3 &lt;&lt; 2</p> </td> 
            <td> <p align="center">12</p> </td> 
           </tr> 
           <tr> 
            <td> <p align="center"><code>n</code><code> &gt;&gt; p</code></p> </td> 
            <td> <p align="center">right shift</p> </td> 
            <td> <p align="center">Shifts the bits of n towards right by p positions resulting in loss of bits from LHS</p> </td> 
            <td> <p align="center">5 &gt;&gt; 2</p> </td> 
            <td> <p align="center">1</p> </td> 
           </tr> 
          </tbody> 
         </table> 
         <p><b>&nbsp;</b></p> 
         <p><b>In all the above examples the operands (values) must be converted to Binary and then implemented with respective operators except for Right and Left Shift operators where only the variable ‘n’ is converted to binary and not ‘p’</b></p> 
         <p>Don’t confuse <code><b>&amp;&amp;</b></code>, which is the <b><i>logical</i></b><i> and</i>, with <code><b>&amp;</b></code>, which is the uncommon <b><i>bitwise</i></b><i> and</i>. Although the bitwise <i>and</i> can also be used with boolean operands, this is extremely rare and is almost always a programming error.</p> 
         <p><b>&nbsp;</b><b>Conditional Operator</b></p> 
         <p>The only Ternary operator of Java is the Conditional Operator, <b>? :</b> which can be used as an alternative to if…else</p> 
         <p>Syntax: variable = condition ? true : false ;</p> 
         <p>e.g. int n = 100&gt;50 ? 1 : 0;</p> 
         <p>In the above code the value of ‘n’ becomes 1 as the condition 100&gt;50 is true, had it been wrong the value of ‘n’ would have been 0;</p> 
         <p><b>Special Operators</b></p> 
         <p>q&nbsp;&nbsp;&nbsp;&nbsp; <b>[ ]</b> this operator is used to assign the size for an array and to access any particular element within an array.</p> 
         <p>q&nbsp;&nbsp;&nbsp;&nbsp; <b>( )</b> the parenthesis operator is used to enclose the arguments to a function in the function prototype line and invoke a function by enclosing the list of arguments.</p> 
         <p>q&nbsp;&nbsp;&nbsp;&nbsp; <b>Dot (.)</b> the dot operator is used to access the instance/class members of a class through an object or class name.</p> 
         <p>q&nbsp;&nbsp;&nbsp;&nbsp; <b>new</b> – the new operator is used to assign and allocate memory to new objects and arrays.</p> 
         <p>q&nbsp;&nbsp;&nbsp;&nbsp; <b>instanceof</b> – this operator checks whether the first argument is an instance of the second argument or not.</p> 
         <p>e.g. <b>str</b> instanceof <b>String</b> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // will return true if <b>str</b> is a <b>String</b> variable</p> 
         <p><b><br> </b></p> 
         <div> 
          <p><b>Precedence Table</b><b style="line-height:1.5em;">&nbsp;</b></p> 
         </div> 
         <table border="1" cellspacing="0" cellpadding="0"> 
          <tbody> 
           <tr> 
            <td colspan="2" valign="top" width="555">Operator Precedence</td> 
           </tr> 
           <tr> 
            <td valign="top" width="278"> <pre>&nbsp;
The entire list
1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( ) . [] (args) post ++ --
2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ! ~ unary + - pre ++ --
3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (type) new
4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */ %
5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + -
6.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;&lt; &gt;&gt; &gt;&gt;&gt;
7.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt; &lt;= &gt; &gt;= instanceof
8.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; == !=
9.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;
10.&nbsp; ^
11.&nbsp; |
12.&nbsp; &amp;&amp;
13.&nbsp; ||
14.&nbsp; ?:
15.&nbsp; = += -= etc</pre> </td> 
            <td valign="top" width="277">&nbsp;&nbsp;Try to Remember only these<p></p> 
             <ol start="1"> 
              <li>( )</li> 
              <li>unary&nbsp;operators</li> 
              <li>* / %</li> 
              <li>+ –</li> 
              <li>comparisons</li> 
              <li>&amp;&amp; ||</li> 
              <li>? :</li> 
              <li>= assignments</li> 
             </ol> </td> 
           </tr> 
          </tbody> 
         </table> 
         <p><strong>Math class functions in Java</strong>&nbsp;(The <b>Math</b> class belongs to the default package of Java named <b>java.lang</b>)</p> 
         <table width="655" border="1" cellspacing="0" cellpadding="0"> 
          <tbody> 
           <tr> 
            <td width="43"><b><span style="text-decoration:underline;">Sl</span></b></td> 
            <td width="144"> <p align="center"><b><span style="text-decoration:underline;">Function Name</span></b></p> </td> 
            <td width="468"> <p align="center"><b><span style="text-decoration:underline;">Description</span></b></p> </td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">1</p> </td> 
            <td width="144">Math.sin(r)</td> 
            <td width="468">Returns sine of angle ‘r’ given in radians</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">2</p> </td> 
            <td width="144">Math.cos(r)</td> 
            <td width="468">Returns cosine of angle ‘r’ given in radians</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">3</p> </td> 
            <td width="144">Math.tan(r)</td> 
            <td width="468">Returns tangent of angle ‘r’ given in radians</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">4</p> </td> 
            <td width="144">Math.asin(x)</td> 
            <td width="468">Returns the angle in radians whose sine value is ‘x’</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">5</p> </td> 
            <td width="144">Math.acos(x)</td> 
            <td width="468">Returns the angle in radians whose cosine value is ‘x’</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">6</p> </td> 
            <td width="144">Math.atan(x)</td> 
            <td width="468">Returns the angle in radians whose tangent value is ‘x’</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">7</p> </td> 
            <td width="144">Math.toDegrees(r)</td> 
            <td width="468">Converts Radians to Degrees</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">8</p> </td> 
            <td width="144">Math.toRadians(d)</td> 
            <td width="468">Converts Degrees to Radians</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">9</p> </td> 
            <td width="144">Math.min(a, b)</td> 
            <td width="468">Returns the smaller among a and b</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">10</p> </td> 
            <td width="144">Math.max(a, b)</td> 
            <td width="468">Returns the larger among a and b</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">11</p> </td> 
            <td width="144">Math.abs(a)</td> 
            <td width="468">Convert -ve magnitude to +ve magnitude.</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">12</p> </td> 
            <td width="144">Math.sqrt(x)</td> 
            <td width="468">Returns the square root of ‘x’</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">13</p> </td> 
            <td width="144">Math.pow(x, y)</td> 
            <td width="468">Returns x to the power of y</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">14</p> </td> 
            <td width="144">Math.exp(x)</td> 
            <td width="468">Returns ‘e’ to the power of ‘x’ where e=2.718 called Euler’s&nbsp; Constant just like pi</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">15</p> </td> 
            <td width="144">Math.cbrt(x)</td> 
            <td width="468">Returns the cube root of ‘x’</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">16</p> </td> 
            <td width="144">Math.log(x)</td> 
            <td width="468">Returns the Natural logarithm of ‘x’</td> 
           </tr> 
           <tr> 
            <td valign="top" width="43"> <p align="center">17</p> </td> 
            <td valign="top" width="144">Math.floor(x)</td> 
            <td valign="top" width="468">Returns the integral value of x less than or equal to ‘x’ but datatype returned is double, hence Math.floor(7.9) will give 7.0</td> 
           </tr> 
           <tr> 
            <td valign="top" width="43"> <p align="center">18</p> </td> 
            <td valign="top" width="144">Math.ceil(x)</td> 
            <td valign="top" width="468">Returns the integral value of x greater than or equal to ‘x’ but datatype returned is double, hence Math.ceil(7.9) will give 8.0</td> 
           </tr> 
          </tbody> 
         </table> 
         <table width="655" border="1" cellspacing="0" cellpadding="0"> 
          <tbody> 
           <tr> 
            <td valign="top" width="43"> <p align="center">19</p> </td> 
            <td valign="top" width="144">Math.rint(x)</td> 
            <td valign="top" width="468">Returns the integral value of x by rounding off the fractional part to the nearest integer , but data type returned is double, hence Math.rint(7.9) will give 8.0</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">20</p> </td> 
            <td width="144">Math.round(x)</td> 
            <td width="468">Returns the integral value of x by rounding off the fractional part to the nearest integer, but datatype returned is int, hence Math.round(7.9) will give 8</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">21</p> </td> 
            <td width="144">Math.random()</td> 
            <td width="468">Generates a double type random number between 0 to 1</td> 
           </tr> 
           <tr> 
            <td width="43"> <p align="center">22</p> </td> 
            <td width="144">Math.PI</td> 
            <td width="468">This returns the 16 digits precise value of PI(Note that it is not a function)</td> 
           </tr> 
          </tbody> 
         </table> 
         <div></div> 
         <p><strong>Comment Lines in Java</strong><br> ? // comments — single line comment<br> After the two // characters, Java ignores everything to the end of the line. This is the most common type of comment.<br> ? /* … */ comments — multiple line comment<br> After the /* characters, Java will ignore everything until it finds a */. This kind of comment can cross many lines, and is commonly used to “comment out” sections of code — making Java code into a comment while debugging a program.<br> Always write braces. It is good programming style to always write the curly braces, {}, although they are not needed if the clause contains only a single statement. There are two reasons this is good.<br> • <strong>Reliability</strong>. When code is modified, the indentation is such a strong indicator of structure that the programmer may not notice that the addition of a statement at the “correct” indentation level really isn’t included in the scope of the if statement. This is a surprisingly common error.<br> • <strong>Readability</strong>. It is faster to read code with the braces because the reader doesn’t have to keep in mind whether they are dealing with an un-braced single statement or a braced block.<br> Whitespace (e.g., a blank line, spaces)<br> Insert blank lines to separate sections of your program. It’s like starting a new paragraph in English. The compiler ignores them — it’s for us humans.</p> 
         <p><strong>Exception Handling in Java</strong><br> Exception refers to any contradictory or unusual situation which can be encountered during a program execution. In Java Exceptions (or Errors) has been categorized broadly under three heading –</p> 
         <p>1. <strong>Syntax Errors</strong> – A Syntax error occurs when the programmer writes a grammatically incorrect code that does not support the rules of programming of that particular language. This type of error gets detected by the compiler. E.g. missing semicolon, using keywords as identifier name, unmatched pair of { }, undefined functions, undeclared and un-initialized variables etc…</p> 
         <p>2. <strong>Logical Errors</strong> – A Logical error is born out of a programmer who misunderstands the logic of the program and writes a syntactically correct code but which does not comply to the algorithm of the problem. E.g. The program demanded squaring of an integer type number but the programmer writes a code that determines the square root of the number.</p> 
         <p>3. <strong>Runtime Errors</strong> – A Runtime error is shown when a syntactically and logically correct program with a set of inputs which is invalid for a given expression. The same expression is valid for another set of values. E.g. int quo = div / n, the expression is valid for all sets of positive values of n but not if n = 0.</p> 
         <p><strong>Exception handling is ideal for –</strong><br> 1. Processing exceptional situations.<br> 2. Processing exceptions for components which cannot handle them directly.<br> 3. Processing exceptions for widely used components that should not process their own exceptions.<br> 4. Large Projects that requires uniform error processing.</p> 
         <p><strong>Advantages</strong> of exception handling:-<br> 1. It separates error handling code from the normal code.<br> 2. It enhances the readability.<br> 3. It makes clear and strong program code.<br> The process of exception handling is implemented using a try … catch block, in which the try block contains the code which has probability of having errors during runtime and the catch block contains code to handle the situation.</p> 
         <p><strong>Common Errors</strong><br> 0 &lt; x &lt; 100<br> Comparison operators can be used with two numbers. Although you can write 0 &lt; x = or &lt;= instead of ==. For example, because the decimal number 0.1 can not be represented exactly in binary, (0.1 + 0.1 + 0.1) is not equal to 0.3</p> 
         <p>String issues using = = and equals ( )<br> Usually you want to know if the two Strings have the same value, for e.g.<br> if (name == “Californication”) // Legal, but SURELY WRONG<br> Reason is the = = operator is not comparing the values of name and Californication instead it is just comparing the references i.e. it is checking whether both of them are strings or not and hence returns true and to the programmer it reveals to be perfectly LEGAL. To prove this we can take another e.g. say, –<br> String name = “Californication”;<br> System.out.println (name. substring (0,3)); // Gives the output as Cal<br> But when they are compared using = = gives the output as Un-Equal<br> if (name. substring (0,3) = = “Cal”)<br> System.out.println (“Equal”);<br> else<br> System.out.println (“Un-Equal”);<br> Hence always use equals ( ) method of String class to compare the values of String class objects.</p> 
         <p><strong>NaN</strong><br> No exceptions are generated by floating-point operations. Instead of an interruption in execution, the result of an operation may be positive infinity, negative infinity, or NaN (not a number). Division by zero or overflow produces infinity. Subtracting two infinities produces a NaN.<br> <strong>Infinity</strong><br> Similarly no exceptions are generated for statements like Math.pow(0,–1) and such statements will result in Infinity as output</p> 
         <p><span style="text-decoration:underline;"><strong>Flow Control in Java Programs</strong></span></p> 
         <p><strong> if Statement</strong><br> The purpose of the if statement is to make decisions, and execute different parts of your program depending on a boolean true/false value.<br> The ‘if’ statement has this form, where condition is true or false<br> if (condition)<br> {<br> … // Do this clause if the condition is true.<br> }</p> 
         <p>Alternative forms of if statements –<br> if (condition)<br> {<br> … // Do this clause if the condition is true<br> }<br> else<br> {<br> … // Do this clause if the condition is false<br> }</p> 
         <p>Always make sure that the number of if clause should not exceed the number of else clause, because it will result in ‘dangling else problem’, in such case make use of if…else if…else construct as shown below –<br> if (condition 1)<br> {<br> … // Do this clause if the condition is true<br> }<br> else if (condition 2)<br> {<br> … // Do this clause if the condition is false<br> }<br> else<br> {<br> … // Do this clause if the condition is false<br> }</p> 
         <p><strong>switch…case Statement</strong><br> The if statement allows you to select one of two sections of code to execute based on a boolean value (only two possible values). The switch statement allows you to choose from many statements based on an integer (including char)<br> switch (expr)<br> {<br> case c1: … break;<br> case c2: … break;<br> …<br> default:<br> }<br> <strong>switch</strong><br> The switch keyword is followed by a parenthesized integer expression, which is followed by the cases, all enclosed in braces.. The switch statement executes the case corresponding to the value of the expression. Normally the code in a case clause ends with a break statement, which exits the switch statement and continues with the statement following the switch. If there is no corresponding case value, the default clause is executed. If no case matched and there is no default clause, execution continues after the end of the switch statement.</p> 
         <p><strong>case</strong><br> The case keyword is followed by an integer constant and a colon. This begins the statements that are executed when the switch expression has that case value.</p> 
         <p><strong>default</strong><br> If no case value matches the switch expression value, execution continues at the default clause. This is the equivalent of the “else” for the switch statement. It is written after the last case be convention, and typically isn’t followed by break because execution just continues out the bottom of switch if this is the last clause.</p> 
         <p><strong>break</strong><br> The break statement causes execution to exit to the statement after the end of the switch. If there is no break, execution falls through into the next case. Flowing directly into the next case is almost always an error.</p> 
         <p>A switch statement can often be rewritten as a substitute for ‘if’ statement in a straightforward manner. For example, the preceding switch statement could be written as follows. When one of a number of blocks of code is selected based on a single value, the switch statement is generally easier to read. The choice of if or switch should be based on which is more readable.</p> 
         <p><strong>Limitations of switch case</strong><br> Java’s switch statement, which was taken directly from C++ to increase its attractiveness to C++ programmers, is not well loved.</p> 
         <p>• No ranges. It doesn’t allow ranges, eg case 90-100:. Many other languages do.<br> • Integers only. It requires integers and doesn’t allow useful types like String. Many other languages do.<br> • Error-prone. It is error-prone and a common source of bugs – forgetting break or default silently ignores errors. Some languages have eliminated these dangerous situations.<br> • Fall through. Another disadvantage of switch…case is that in absence of break statement in the respective cases will cause the flow control to cascade down and execute all the cases that does not contain ‘break’ statements until it reaches end of switch or a case that implements a break. This is called fall through.</p> 
         <p><span style="text-decoration:underline;"><strong>Iteration through Loops</strong></span></p> 
         <p>The purpose of loop or iterative statements is to repeat a block of Java statements several times depending upon the condition mentioned within the loop. There are two kinds of looping statements in Java.<br> 1. Entry Controlled Loop<br> 2. Exit Controlled</p> 
         <p>An <strong>Entry Controlled</strong> loop which is also known as Pre Tested Loop the condition of the loop is first checked and then the loop body is executed, which means if the condition is false the loop doesn’t get executed even for once.<br> E.g. a. for LOOP<br> b. while LOOP</p> 
         <p>An <strong>Exit Controlled</strong> loop which is also known as Post Tested Loop the condition is checked at the end of the loop body, which means even if the condition is false the loop gets executed at least for once.<br> E.g. a. do…while LOOP</p> 
         <p>If the body of a loop has more than one statement, you must put the statements inside braces. If there is only one statement, it is not necessary to use braces { }. However, many programmers think it is a good idea to always use braces to indicate the scope of statements. Always using braces allows the reader to relax and not worry about the special single statement case.<br> while statement</p> 
         <p>The while statement is used to repeat a block of statements while some condition is true. The condition must become false somewhere in the loop, otherwise it will never terminate.<br> Syntax:<br> initialization;<br> while (condition)<br> {<br> Body;<br> update;<br> }<br> //… While loop to display squares of natural nos. less than 10<br> int i = 1;<br> while (i &lt;=10)<br> {<br> System.out.println(i*i);<br> i++;<br> }</p> 
         <p><strong>for statement</strong><br> Many loops consist of three operations surrounding the body:<br> (1) initialization of a variable,<br> (2) testing a condition, and<br> (3) updating a value before the next iteration.</p> 
         <p>The for loop groups these three common parts together into one statement, making it more readable and less error-prone than the equivalent while loop. For repeating code a known number of times, the for loop is the right choice.</p> 
         <p>There are three clauses in the ‘for’ statement.<br> 1. The <strong>initialization</strong> statement is done before the loop is started, usually to initialize an iteration variable.<br> 2. The <strong>condition</strong>/<strong>test expression</strong> is tested before each time the loop is done. The loop isn’t executed if the boolean expression is false (the same as the while loop).<br> 3. The <strong>update</strong> statement is done after the body is executed. It typically increments an iteration variable.<br> Syntax:<br> for (initialization ; condition/test expression; update)<br> {<br> body<br> }</p> 
         <p>//… For loop to to display squares of natural nos. less than 10<br> for (int i = 1; i &lt;= 10; i++)<br> {<br> System.out.println(i*i);<br> }</p> 
         <p><strong>do…while statement</strong><br> When you want to test at the end to see whether something should be repeated, the do…while statement is the natural choice<br> Syntax<br> do<br> {<br> . . .<br> } while (condition);</p> 
         <p>Always remember that a do…while statement has a semi-colon at its end.<br> The for loop is shorter, and combining the initialization, test, and increment in one statement makes it easier to read and verify that it’s doing what you expect. The for loop is better when you are counting something. If you are doing something an indefinite number of times, while loop may be the better choice.</p> 
         <p><span style="text-decoration:underline;"><strong>Functions in Java</strong></span></p> 
         <p>A function is a block or portion of code within a larger program which consists of some declarations and executable statements, which performs a specific task and is relatively independent of the remaining code.</p> 
         <p>The term method is used alternatively with function and means the same in Java programming language. A larger block of code is broken down into smaller and simpler modules called ‘member methods’ this is how the OOP language Java implements ‘Modularity’.</p> 
         <p>Advantages of using Functions –<br> 1. To cope with the complexity of code by breaking down complex bigger code into smaller and simpler ones.<br> 2. Hiding details (thus implementing Abstraction)<br> 3. Reusability of Code<br> 4. Makes debugging of errors easy.</p> 
         <p><strong>Anatomy of a function</strong></p> 
         <p>FUNCTION NAME ( )<br> {<br> Body of the function…<br> }</p> 
         <p>Let us now see all the components individually –<br> 1. These are keywords which define the accessibility of the function, if nothing is mentioned then by default it is ‘friendly’ friendly is not a keyword. They are of 4 types<br> a. Public<br> b. private<br> c. protected<br> d. friendly this is not a keyword and hence cannot be written explicitly.</p> 
         <p>2. These are keywords which redefines the functionality within the methods. They can be final, native, static, synchronized, transient, volatile etc…</p> 
         <p>3. They specify what type of value a function can return, hence they can be of any primitive of reference data types like int, byte, float, char, String or even class types. In case the function doesn’t return any value the keyword ‘void’ is used.</p> 
         <p>4. Function name – This can be any valid identifier, but it is always advisable to take logical and meaningful names, it should conventionally begin with a lowercase letter and in case of multiple words join the words and begin each word in Uppercase except for the first word.<br> e.g. toUpperCase( )</p> 
         <p>5. This is a comma separated list of variables along with associated data types. This list can also be empty which indicates the function is non–argumentative.<br> e.g.<br> public static void add(int a, int b)<br> {<br> …<br> }</p> 
         <p><strong>Function prototype</strong><br> The first line of a function that consists of access specifier, modifier, return type, function name and list of parameters enclosed within a pair of parenthesis is called function prototype.<br> A function prototype describes the function interface to the compiler, by giving details of number and type of arguments, return type etc…<br> e.g.<br> public static void compute(int a, int b)<br> {<br> …<br> …<br> }</p> 
         <p><strong>Function signature</strong><br> The function signature is a part of function prototype; it basically refers to the argument list i.e. number, order and type of arguments.<br> e.g.<br> public static void compute(int a, int b)<br> {<br> …<br> …<br> }</p> 
         <p><strong>Understanding the keywords public &amp; private</strong><br> In a function the access specifier indicate the scope of visibility of that particular function, this means whether the data members and member methods are accessible only within the class, or other classes within the same package or other classes in other packages.</p> 
         <p>Public members are accessible everywhere, within the same class as well as inside other classes that inherits the base class or by creating objects of the former class in the latter one even if they do not inherit, but private members are accessible only within the same class.</p> 
         <p><strong>Understanding the keyword static</strong><br> A static data member is also known as a class variable, such variables have only one instance inside the class and we can not create multiple instances through multiple objects.<br> On the other hand if a member is non-static then such members are called instance variables, which mean we can have multiple instances of such variables through multiple objects.<br> e.g.<br> class Exmp1<br> {<br> int x; // non-static or instance variable which can have multiple instances<br> static int y; // static variable or class variable which has only one instance</p> 
         <p>public static void main( )<br> {<br> Exmp1 obj1 = new Exmp1( );<br> Exmp1 obj2 = new Exmp1( ); // three different objects through which we can<br> Exmp1 obj3 = new Exmp1( ); // have three different values of ‘x’</p> 
         <p>obj1.x=10;<br> obj2.x=20; // the same variable ‘x’ has three different values simultaneously<br> obj3.x=30;</p> 
         <p>y = 100; // the variable ‘y’ being static is accessed directly and can have only<br> // one value</p> 
         <p>obj1.y=100;<br> obj2.y=200; // even if we try to access the variable ‘y’ through different objects<br> obj3.y=300; // the same ‘y’ gets overwritten and finally the last value prevails<br> }}<br> So, we see that if a member is static in nature it will have only one copy in the physical memory of the computer, which can be accessed directly without the need of creating objects. But if it is non-static then we need to create objects to specify which instance we are referring to as it has multiple occurrences.</p> 
         <p><strong>How to access a function?</strong><br> A function can be accessed or invoked from other functions by simply writing the name of the function along with the argument list (if any) otherwise the argument list is kept empty.<br> e.g.<br> class ABCD<br> {<br> public static void main( )<br> {<br> int x = 10, y = 20;<br> add (x, y); ? function call<br> }</p> 
         <p>public static void add(int x, int y)<br> {<br> System.out.println(x+y);<br> }<br> }</p> 
         <p><strong>Actual &amp; Formal Parameters / Arguments</strong><br> The actual parameters are those that appear at the point of function invocation or function call are called Actual parameters.</p> 
         <p>The formal parameters are those that appear at the point of function declaration or function signature are called Formal parameters.</p> 
         <p>e.g.<br> public static void main( )<br> {<br> int x = 10, y = 20;<br> add (x, y); ? actual parameters<br> }</p> 
         <p>public static void add(int x, int y) ? formal parameters<br> {<br> System.out.println(x+y);<br> }<br> A function be of one of the four types depending on its argument list and return type –</p> 
         <p><strong>1. Non-argumentative &amp; non-return type</strong><br> Example<br> class ABCD<br> {<br> public static void main( )<br> {<br> display( );<br> }<br> public static void display( )<br> {<br> System.out.println(“Loyola School”);<br> }<br> }</p> 
         <p><strong>2. Argumentative &amp; non-return type</strong><br> Example<br> class ABCD<br> {<br> public static void main( )<br> {<br> int x = 10;<br> display(x);<br> }<br> public static void display(int x)<br> {<br> System.out.println(“The value of x =” + x);<br> }<br> } // Note that a function which is void cannot return any value</p> 
         <p><strong>3. Non-argumentative &amp; return type</strong><br> Example<br> class ABCD<br> {<br> public static void main( )<br> {<br> int x = display( );<br> System.out.println(“The value of x =” + x);<br> }</p> 
         <p>public static int display( )<br> {<br> int x = 10;<br> return x;<br> }<br> } // Note that the return type of the function and the variable associated<br> // with the keyword return must be identical, also note that the function<br> // at the point of invocation gets equated with a similar datatype.</p> 
         <p><strong>4. Argumentative &amp; return type</strong><br> Example<br> class ABCD<br> {<br> public static void main( )<br> {<br> int x = 10;<br> int y = display( x );<br> System.out.println(“The square value of x =” + y);<br> }</p> 
         <p>public static int display(int x)<br> {<br> int y = x * x;<br> return y;<br> }<br> }</p> 
         <p>The return statement<br> A function terminates as soon as the last statement of the function is encountered or the return keyword is encountered.<br> It is not necessary that return keyword should be used only in functions that has a return type, even functions that are void can use the return keyword to terminate the function and shift the program control to the calling function but make sure that the return statement does not have anything preceding the keyword ‘return’.<br> e.g.<br> class ABCD<br> {<br> public static void main( )<br> {<br> call( );<br> }</p> 
         <p>public static void call( )<br> {<br> System.out.println(“Inside the method call”);<br> return ; // return statement has nothing following it<br> }<br> }</p> 
         <p><strong>Three types of functions:</strong></p> 
         <p>1. <strong>Computational</strong> functions – The functions that computes or calculates certain values or quantities and returns the answer to the calling method is called Computational function.<br> e.g. Math.pow(a,b);</p> 
         <p>2. <strong>Manipulative</strong> functions – The functions which manipulates the data and returns information to the calling function as success or failure code in the form of 0 &amp; 1 or true &amp; false.<br> e.g. Character.isLetter( )</p> 
         <p>3. <strong>Procedural</strong> Functions – The functions that perform certain tasks like reading from source files, reading from terminals, displaying data to the terminal are called procedural functions. They generally do not have any return type.<br> e.g. System.out.println( );</p> 
         <p><strong>Pure &amp; Impure functions</strong><br> A pure function is one that takes objects and/or primitive data as arguments but does not modify the objects hence the return value of such functions are either primitive data or an entirely new object created inside the function. They are also known as Accessor methods.</p> 
         <p>An impure function on the other hand modifies the state of its objects or arguments. They are also known as Modifier methods.</p> 
         <p>public static int maximum(int a, int b) ? Pure Function<br> {<br> int c = Math.max(a,b);<br> return c;<br> }</p> 
         <p>public static int product(int a) ? Impure Function<br> {<br> a = a * a;<br> return a;<br> }</p> 
         <p><strong>Function Overloading</strong><br> A function name having several definitions in the same scope that are differentiated on the basis of function signature i.e. number of arguments, order of arguments, type of arguments is said to be an overloaded function and the process of creating such functions is called Function Overloading.</p> 
         <p>Function overloading implements <strong>Polymorphism</strong>.</p> 
         <p>e.g.<br> class Overload<br> {<br> public static void area(int s)<br> {<br> System.out.println(“Area of square =” + (s*s));<br> }</p> 
         <p>public static void area(int l, int b)<br> {<br> System.out.println(“Area of rectangle =” + (l*b));<br> }</p> 
         <p>public static void area(double r)<br> {<br> System.out.println(“Area of circle =” + (3.1415 * r * r));<br> }<br> }</p> 
         <div> 
          <p><b>Constructors in Java</b></p> 
          <p><b></b>A Constructor is a member method of a class which has same name as that of a class; has no return type not even void, used to initialize the instance variables of a class, and gets invoked automatically as soon as the object of the class is created.</p> 
         </div> 
         <p>class Constr<br> {<br> int n;<br> Constr( )<br> {<br> n = 0;<br> }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invokes the constructor</p> 
         <p>public static void main( )<br> {<br> Constr obj = new Constr( );<br> System.out.println(obj.n);<br> }<br> }</p> 
         <p>Types of Constructors</p> 
         <ol> 
          <li>Non Parameterized Constructors</li> 
          <li>Parameterized Constructors</li> 
         </ol> 
         <p>A constructor that accepts no parameters are called <b>non parameterized</b> constructors, non parameterized constructors that initialize the instance variables to zero, null and empty values are called <b>Default Constructors. </b>Above is an example of default constructor.</p> 
         <p>A <b>parameterized</b> constructor accepts parameters or values in its argument list which initialize the various instance data members of the class.</p> 
         <p><b>&nbsp;</b>class Constr<br> {<br> int n;<br> Constr(int val)<br> {<br> n = val;<br> }&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invokes the constructor</p> 
         <p>public static void main( )<br> {&nbsp;&nbsp;&nbsp;&nbsp; int v = 25;<br> Constr obj = new Constr(v);<br> }<br> }</p> 
         <div>
          <b>Exception Handling </b>
         </div> 
         <p>An exception in general is any unexpected / contradictory situation of error encountered at the time of program execution is called an Exception.</p> 
         <p>Types of Errors</p> 
         <ol> 
          <li><b>Compile time errors</b> / <b>Syntax</b> <b>Errors</b> – The errors that occurs as a result of violating the programming rules or syntax are called Compile time errors. They get detected at the time of program compilation.</li> 
         </ol> 
         <p>e.g. int class = 10; &nbsp;&nbsp;&nbsp; // class is a keyword hence syntactically incorrect</p> 
         <ol> 
          <li><b>Run time errors</b> – The errors that occurs during program execution is called run time errors. These unexpected errors may occur due to array index going out of bound, end of file reached, type mismatch errors at the time of data input etc…</li> 
         </ol> 
         <ol> 
          <li><b>Logical Errors</b> – These errors are those which occur due to misinterpretation of the problem / program logic, resulting in design of wrong code by the programmer. Such errors are very difficult to detect, like if the problem says to add two numbers and find their sum and the programmer commits a multiplication on the numbers, such programs might be syntactically totally correct but the logic was misinterpreted.</li> 
         </ol> 
         <p>Exception handling is a transparent and an efficient way of handling run time errors.</p> 
         <p>Understanding <b>try / catch / finally</b> blocks and <b>throws</b> keywords</p> 
         <p><b>Try</b> block contains the code which might lead to run time errors.</p> 
         <p><b>Catch</b> block contains the code to deal with an exception that might arouse due to execution of a try block.</p> 
         <p><b>Finally</b> block contains the code that gets executed when no other block is able to handle the exception.</p> 
         <p><b>Throws</b> is a keyword which is used to inform that an error has occurred, it is specified in the line of function definition (prototype).</p> 
         <p>The program below gives an idea as to how an Exception is handled in Java</p> 
         <p>class Error<br> {<br> public void testfunction (int x, int y)&nbsp;&nbsp;&nbsp; <b>throws</b> Exception<br> {<br> int z;<br> <b>try </b><br> {<br> z = x / y;<br> System.out.println( z );<br> }</p> 
         <p><b>catch</b> (exception exp)<br> {<br> System.out.println(exp.getMessage( ) );<br> }</p> 
         <p><b>finally</b><br> {<br> System.out.println(“Un–reported exception has occurred…”);<br> }<br> }</p> 
         <div> 
          <p><b>Wrapper Classes</b><br> Java is an object-oriented language and as said everything in java is an object. What about the primitives datatypes? As a solution to this problem, Java allows you to include the primitive datatypes in the family of objects by using what are called&nbsp;wrapper classes.</p> 
          <p><b>Wrapper classes wrap the primitive datatypes into respective objects.</b><b><br> </b>There is a wrapper class for every primitive date type in Java. This class encapsulates a single value for the primitive data type. For instance the wrapper class for int is Integer, for float is Float, and so on.<br> Wrapper classes are a part of Java’s standard default library <b>java.lang</b></p> 
          <p><b>The wrapper classes in the Java API serve two primary purposes:</b></p> 
          <ul> 
           <li>To provide a mechanism to “wrap” primitive values in an object so that the primitives can be included in activities reserved for objects, like as being added to Collections, or returned from a method with an object return value.</li> 
           <li>To provide an assortment of utility functions for primitives. Most of these functions are related to various conversions: converting primitives to and from String objects, and converting primitives and String objects to and from different bases (or radix), such as binary, octal, and hexadecimal.</li> 
          </ul> 
          <p><b>&nbsp;</b><b>Wrapper Class functions / methods</b></p> 
          <p>The wrapper class methods that are static in nature can be directly accessed as –</p> 
          <p><b>Class_name.method_name (arguments)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.g. Boolean.toString(b);</b></p> 
          <p><b><i>&nbsp;</i></b><b><i>Boolean Wrapper class</i></b></p> 
          <table border="1" cellspacing="0" cellpadding="0"> 
           <tbody> 
            <tr> 
             <td valign="top" width="163"> <p align="center"><b>Function</b></p> </td> 
             <td valign="top" width="475"> <p align="center"><b>Description</b></p> </td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">booleanValue( )</td> 
             <td valign="top" width="475">Convert Boolean object to boolean primitive datatype.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">valueOf( )</td> 
             <td valign="top" width="475">Convert String to Boolean object.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">toString( )</td> 
             <td valign="top" width="475">Convert Boolean object to String.</td> 
            </tr> 
           </tbody> 
          </table> 
          <p><b><i>Byte Wrapper class</i></b></p> 
          <table border="1" cellspacing="0" cellpadding="0"> 
           <tbody> 
            <tr> 
             <td valign="top" width="163"> <p align="center"><b>Function</b></p> </td> 
             <td valign="top" width="475"> <p align="center"><b>Description</b></p> </td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">parseByte( )</td> 
             <td valign="top" width="475">Converts String to byte primitive datatype.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">valueOf( )</td> 
             <td valign="top" width="475">Converts String to Byte object.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">toString( )</td> 
             <td valign="top" width="475">Converts byte primitive to String object.</td> 
            </tr> 
           </tbody> 
          </table> 
          <p><b>&nbsp;</b><b><i>Short Wrapper class</i></b></p> 
          <table border="1" cellspacing="0" cellpadding="0"> 
           <tbody> 
            <tr> 
             <td valign="top" width="163"> <p align="center"><b>Function</b></p> </td> 
             <td valign="top" width="475"> <p align="center"><b>Description</b></p> </td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">parseShort( )</td> 
             <td valign="top" width="475">Converts String to short primitive datatype.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">valueOf( )</td> 
             <td valign="top" width="475">Converts String to Short object.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">toString( )</td> 
             <td valign="top" width="475">Converts short primitive to String object.</td> 
            </tr> 
           </tbody> 
          </table> 
          <p><b>&nbsp;</b><b><i>Integer Wrapper class</i></b></p> 
          <table border="1" cellspacing="0" cellpadding="0"> 
           <tbody> 
            <tr> 
             <td valign="top" width="163"> <p align="center"><b>Function</b></p> </td> 
             <td valign="top" width="475"> <p align="center"><b>Description</b></p> </td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">parseInt( )</td> 
             <td valign="top" width="475">Converts String to int primitive datatype.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">valueOf( )</td> 
             <td valign="top" width="475">Converts String to Integer object.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">toString( )</td> 
             <td valign="top" width="475">Converts int primitive to String object.</td> 
            </tr> 
           </tbody> 
          </table> 
          <p><b>&nbsp;</b><b><i>Long Wrapper class</i></b></p> 
          <table border="1" cellspacing="0" cellpadding="0"> 
           <tbody> 
            <tr> 
             <td valign="top" width="163"> <p align="center"><b>Function</b></p> </td> 
             <td valign="top" width="475"> <p align="center"><b>Description</b></p> </td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">parseLong( )</td> 
             <td valign="top" width="475">Converts String to long primitive datatype.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">valueOf( )</td> 
             <td valign="top" width="475">Converts String to Long object.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">toString( )</td> 
             <td valign="top" width="475">Converts long primitive to String object.</td> 
            </tr> 
           </tbody> 
          </table> 
          <p><b>&nbsp;</b><b><i>Float Wrapper class</i></b></p> 
          <table border="1" cellspacing="0" cellpadding="0"> 
           <tbody> 
            <tr> 
             <td valign="top" width="163"> <p align="center"><b>Function</b></p> </td> 
             <td valign="top" width="475"> <p align="center"><b>Description</b></p> </td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">parseFloat( )</td> 
             <td valign="top" width="475">Converts String to float primitive datatype.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">valueOf( )</td> 
             <td valign="top" width="475">Converts String to Integer object.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">toString( )</td> 
             <td valign="top" width="475">Converts int primitive to String object.</td> 
            </tr> 
           </tbody> 
          </table> 
          <p><b>&nbsp;</b><b><i>Double Wrapper class</i></b></p> 
          <table border="1" cellspacing="0" cellpadding="0"> 
           <tbody> 
            <tr> 
             <td valign="top" width="163"> <p align="center"><b>Function</b></p> </td> 
             <td valign="top" width="475"> <p align="center"><b>Description</b></p> </td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">parseDouble( )</td> 
             <td valign="top" width="475">Converts String to double primitive datatype.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">valueOf( )</td> 
             <td valign="top" width="475">Converts String to Double object.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">toString( )</td> 
             <td valign="top" width="475">Converts double primitive to String object.</td> 
            </tr> 
           </tbody> 
          </table> 
          <p><b>&nbsp;</b><b><i>Character Wrapper class</i></b></p> 
          <table border="1" cellspacing="0" cellpadding="0"> 
           <tbody> 
            <tr> 
             <td valign="top" width="163"> <p align="center"><b>Function</b></p> </td> 
             <td valign="top" width="475"> <p align="center"><b>Description</b></p> </td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">isLetter( )</td> 
             <td valign="top" width="475">Checks whether the specified character is a Letter or not.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">isDigit( )</td> 
             <td valign="top" width="475">Checks whether the specified character is a Digit or not.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">isWhiteSpace( )</td> 
             <td valign="top" width="475">Checks whether the specified character is a blank or not.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">isUpperCase( )</td> 
             <td valign="top" width="475">Checks whether the specified character is in uppercase or not.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">isLowerCase( )</td> 
             <td valign="top" width="475">Checks whether the specified character is in lowercase or not.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">toUpperCase( )</td> 
             <td valign="top" width="475">Converts the specified character to Uppercase.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">toLowerCase( )</td> 
             <td valign="top" width="475">Converts the specified character to Lowercase.</td> 
            </tr> 
            <tr> 
             <td valign="top" width="163">toString( )</td> 
             <td valign="top" width="475">Returns a String object representing the specified character as a single character string.</td> 
            </tr> 
           </tbody> 
          </table> 
          <p>e.g. char ch = ‘A’;</p> 
          <p>System.out.println(Character.isLetter(ch)); // returns <b>true</b></p> 
          <p>System.out.println(Character.toLowerCase(ch)); // returns <b>a</b></p> 
          <p><b style="line-height:1.5em;">String Handling in Java</b></p> 
          <p><b>&nbsp;</b>A String is a collection of characters, in Java String is not a primitive datatype instead is implemented as a class. In Java a String is an immutable object which means it can not be modified. For understanding this we can take a small example of a String class function concat( ) which is used to join two strings.</p> 
          <p>String s1 = “Computer”;</p> 
          <p>System.out.println(s1.concat(“Application”); // returns <b>ComputerApplication</b></p> 
          <p>But, if we try to print the String s1 after the above implementation we will find that System.out.println(s1); // returns <b>Computer</b> which clearly states that the s1 string was</p> 
          <p>//not modified…</p> 
          <p>Strings can be created in two ways –</p> 
          <ul> 
           <li>As a String Literal</li> 
           <li>As a String object</li> 
          </ul> 
          <p>A <b>String Literal</b> can be created as follows –</p> 
          <p>String str = “Welcome”;</p> 
          <p>Each time a String literal is created JVM checks the <b>String Constant Pool </b>if the String exists in the pool them no new string will be created instead a reference to the pool is returned.</p> 
          <p>e.g.</p> 
          <p>String str1 = “Welcome”; // a new string is created in the String Pool</p> 
          <p>String str2 = “Welcome”; // no new string is created as “Welcome” already exists in pool</p> 
          <p>A <b>String Object </b>can be created using a new keyword –</p> 
          <p>String str = new String (“Welcome”);</p> 
          <p>In such cases Java will create the String in the Heap Memory</p> 
          <p>String handling is a way of manipulating strings / string literals / string objects by concatenating strings, comparing strings, extracting characters from string, creating substrings from given strings, replacing characters from within a string, etc…</p> 
          <p><b>String class functions</b></p> 
          <table border="1" cellspacing="0" cellpadding="0"> 
           <tbody> 
            <tr> 
             <td width="43"> <p align="center"><b>Sl</b></p> </td> 
             <td width="199"> <p align="center"><b>String Functions</b></p> </td> 
             <td width="84"> <p align="center"><b>Return</b></p> </td> 
             <td width="341"><b>Description</b></td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">1</p> </td> 
             <td width="199"> <p align="center">length( )</p> </td> 
             <td width="84"> <p align="center">int</p> </td> 
             <td width="341">Returns length of a string</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">2</p> </td> 
             <td width="199"> <p align="center">charAt(k)</p> </td> 
             <td width="84"> <p align="center">char</p> </td> 
             <td width="341">Returns a character at a position k within the string.</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">3</p> </td> 
             <td width="199"> <p align="center">toUpperCase( )</p> </td> 
             <td width="84"> <p align="center">String</p> </td> 
             <td width="341">Returns a String which has all the letters in Capitals (uppercase)</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">4</p> </td> 
             <td width="199"> <p align="center">toLowerCase( )</p> </td> 
             <td width="84"> <p align="center">String</p> </td> 
             <td width="341">Returns a String which has all the letters in Small Letters (lowercase)</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">5</p> </td> 
             <td width="199"> <p align="center">startsWith(s)</p> </td> 
             <td width="84"> <p align="center">boolean</p> </td> 
             <td width="341">Returns true if string starts with a string <b>s</b></td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">6</p> </td> 
             <td width="199"> <p align="center">startsWith(s, k)</p> </td> 
             <td width="84"> <p align="center">boolean</p> </td> 
             <td width="341">Returns true if string starts with a string <b>s </b>at index <b>k</b></td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">7</p> </td> 
             <td width="199"> <p align="center">endsWith(s)</p> </td> 
             <td width="84"> <p align="center">boolean</p> </td> 
             <td width="341">Returns true if string ends with a string <b>s</b></td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">8</p> </td> 
             <td width="199"> <p align="center">endsWith(s)</p> </td> 
             <td width="84"> <p align="center">boolean</p> </td> 
             <td width="341">Returns true if string ends with a string <b>s </b>starting at an index<b> k</b></td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">9</p> </td> 
             <td width="199"> <p align="center">indexOf(s)</p> </td> 
             <td width="84"> <p align="center">int</p> </td> 
             <td width="341">Returns an index of the first occurrence of String s in string</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">10</p> </td> 
             <td width="199"> <p align="center">indexOf(s, k)</p> </td> 
             <td width="84"> <p align="center">int</p> </td> 
             <td width="341">Returns an index of String s starting an index k in string</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">11</p> </td> 
             <td width="199"> <p align="center">lastIndexOf(s)</p> </td> 
             <td width="84"> <p align="center">int</p> </td> 
             <td width="341">Returns an index of the last occurrence of String s in string</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">12</p> </td> 
             <td width="199"> <p align="center">substring(k, n)</p> </td> 
             <td width="84"> <p align="center">String</p> </td> 
             <td width="341">Returns a substring from index k to index n-1 of string</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">13</p> </td> 
             <td width="199"> <p align="center">substring(k)</p> </td> 
             <td width="84"> <p align="center">String</p> </td> 
             <td width="341">Returns a substring from index k to the end of string</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">14</p> </td> 
             <td width="199"> <p align="center">concat( )</p> </td> 
             <td width="84"> <p align="center">String</p> </td> 
             <td width="341">Joins two strings</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">15</p> </td> 
             <td width="199"> <p align="center">trim( )</p> </td> 
             <td width="84"> <p align="center">String</p> </td> 
             <td width="341">Returns a String which has all the spaces removed from the beginning and end without altering any intermediate spaces.</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">16</p> </td> 
             <td width="199"> <p align="center">equals(s)</p> </td> 
             <td width="84"> <p align="center">boolean</p> </td> 
             <td width="341">Returns true if the two strings have equal values</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">17</p> </td> 
             <td width="199"> <p align="center">equalsIgnoreCase(s)</p> </td> 
             <td width="84"> <p align="center">boolean</p> </td> 
             <td width="341">Same as above ignoring case</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">18</p> </td> 
             <td width="199"> <p align="center">compareTo(s)</p> </td> 
             <td width="84"> <p align="center">boolean</p> </td> 
             <td width="341">Compares two strings</td> 
            </tr> 
            <tr> 
             <td width="43"> <p align="center">19</p> </td> 
             <td width="199"> <p align="center">compareToIgnoreCase(t)</p> </td> 
             <td width="84"> <p align="center">boolean</p> </td> 
             <td width="341">Same as above ignoring case</td> 
            </tr> 
           </tbody> 
          </table> 
          <p><span style="text-decoration:underline;"><strong>Single and Double Dimensional Arrays in Java</strong></span></p> 
          <p><strong>Definition</strong> of One Dimensional Array<br> One dimensional array is a list of variables of same datatype that are accessed by a common name. An individual variable in the array is called an array element. The locations in which they are stored is called array index or array subscript hence arrays are also sometimes referred as Subscripted variables.</p> 
          <p>Declaring an array is the same way of declaring a variable but with extra square brackets to inform the compiler, that the variable represents an array. Array size should be given at the time of creation. Depending upon the size, continuous memory locations are allocated to the elements. Array identifier follows the same rules of Java identifiers.</p> 
          <p><strong>Declaring, Assigning and Accessing the Array</strong><br> The following program explains the basic syntax of creating an array in Java. First an integer array by name, marks, is created which is filled with zero values by default.</p> 
          <p>Creating sized arrays<br> Syntax:<br> datatype array_name[ ] = new datatype[size];<br> Example:<br> int ARR[ ] = new int[5];<br> By default all array elements are initialized to ‘zero’.</p> 
          <p>Creating un-sized array<br> Syntax:<br> datatype array_name[ ];<br> Example:<br> int ARR[ ];<br> But such arrays need to be sized later to use them,<br> arrayname = new datatype[size]; // make sure to use the base address only without[ ]<br> Example:<br> ARR = new int[5];</p> 
          <p>Un-sized array with assignment<br> datatype array_name[ ] = {value1, value2, value3,… value};<br> make sure the [ ] remains empty.<br> Example:<br> int ARR[ ] = {1,2,3,4,5};</p> 
          <p>Sample Program implementing a Single Dimensional Array</p> 
          <p>public class ArrayTest1<br> { public static void main(String args[])<br> {<br> int marks[] = new int[5];<br> System.out.println(“Elements are ” + marks.length);</p> 
          <p>for(int j=0;j&lt;marks.length;j++)<br> {<br> System.out.println(“Default value: ” + marks[j]);<br> }</p> 
          <p>// Now assign values<br> marks[0] = 50;<br> marks[1] = 60;<br> marks[2] = 70;<br> marks[3] = 80;<br> marks[4] = 90;</p> 
          <p>System.out.println(“Value of 1st element: ” + marks[0]);</p> 
          <p>System.out.println(“\nPrint the values in a single row”);<br> for(int i = 0; i &lt; marks.length; i++)<br> {<br> System.out.print(marks[i] + “\t”);<br> }</p> 
          <p>// Alternative method of printing supported from JDK 1.5<br> for(int k : marks)<br> {<br> System.out.print(k + “\t”);<br> }</p> 
          <p>} //closing main()</p> 
          <p>} // closing class</p> 
          <p><strong>Application of Arrays</strong><br> Arrays are broadly used in storing huge list of similar data as they are easy to implement under a single name. And are used for –</p> 
          <p style="padding-left:30px;"><strong>1.</strong>&nbsp;<strong>Searching</strong><br> o Linear Search<br> o Binary Search</p> 
          <p style="padding-left:30px;"><strong>2.Sorting</strong><br> o Bubble Sort<br> o Exchange Selection Sort<br> o Quick Sort<br> o Merge Sort</p> 
          <p style="padding-left:30px;"><strong>3. Merging</strong> <strong>Arrays</strong><br> o Alternate Merge<br> o End to end Merge<br> o Similar &amp; Dissimilar sized arrays</p> 
          <p><strong>Inheritance</strong></p> 
          <p>Inheritance is a mechanism wherein a new class is derived from an existing class. In Java, classes may inherit or acquire the properties and methods of other classes. A class derived from another class is called a subclass, whereas the class from which a subclass is derived is called a superclass.</p> 
          <p>? A subclass that has only one superclass is a case of single inheritance.<br> ? Whereas a superclass having one or more subclasses is a case of hierarchical inheritance.<br> ? Classes can be derived from classes that are derived from other classes that are derived from again other classes, and so on, ultimately derived from the topmost class that’s multilevel inheritance.</p> 
          <p><strong>Object</strong>. Such a class is said to be descended from all the classes in the inheritance chain stretching back to Object.<br> The keyword “extends” is used to derive a subclass from the superclass, as illustrated by the following syntax:</p> 
          <p>class Name_of_subclass extends Name_of superclass<br> {<br> //new fields and methods that would define the subclass go here<br> }</p> 
          <p>Example Code of Inheritance<br> public class Bicycle<br> {<br> // the Bicycle class has three fields<br> public int cadence;<br> public int gear;<br> public int speed;</p> 
          <p>// the Bicycle class has one constructor<br> public Bicycle(int startCadence, int startSpeed, int startGear)<br> {<br> gear = startGear;<br> cadence = startCadence;<br> speed = startSpeed; }<br> // the Bicycle class has four methods<br> public void setCadence(int newValue)<br> {<br> cadence = newValue;<br> }</p> 
          <p>public void setGear(int newValue)<br> {<br> gear = newValue;<br> }</p> 
          <p>public void applyBrake(int decrement)<br> {<br> speed – = decrement;<br> }</p> 
          <p>public void speedUp(int increment)<br> {<br> speed += increment;<br> }<br> }</p> 
          <p>A class declaration for a MountainBike (subclass) that inherits Bicycle (superclass):<br> public class MountainBike extends Bicycle<br> {<br> // the MountainBike subclass adds one field<br> public int seatHeight;</p> 
          <p>// the MountainBike subclass has one constructor<br> public MountainBike(int startHeight, int startCadence, int startSpeed, int startGear)<br> {<br> super(startCadence, startSpeed, startGear);<br> seatHeight = startHeight;<br> }</p> 
          <p>// the MountainBike subclass adds one method<br> public void setHeight(int newValue)<br> {<br> seatHeight = newValue;<br> }<br> }<br> MountainBike inherits all the fields and methods of Bicycle and adds the field seatHeight and a method to set it. Except for the constructor, it is as if you had written a new MountainBike class entirely from scratch, with four fields and five methods.</p> 
          <p>However, you didn’t have to do all the work. This would be especially valuable if the methods in the Bicycle class were complex and had taken substantial time to debug.</p> 
          <p>Types of Inheritance</p> 
          <p>? <strong>Single Inheritance –</strong><br> A subclass that has only one superclass is a case of single inheritance.</p> 
          <p>? <strong>Multilevel Inheritance –</strong><br> Classes can be derived from classes that are derived from other classes that are derived from again other classes, and so on, ultimately derived from the topmost class that’s multilevel inheritance.</p> 
          <p>? <strong>Multiple Inheritance</strong><br> When a sub class derives from two or more super class, such an inheritance form is called multiple but in Java it can not be achieved directly and is implemented through Interface.</p> 
          <p>? <strong>Hierarchical Inheritance –</strong><br> A superclass having one or more subclasses is a case of hierarchical inheritance.</p> 
          <p>? <strong>Hybrid Inheritance –</strong><br> A combination of two or more of the above forms of Inheritance is called Hybrid Inheritance.</p> 
          <p><strong>Access Specifier</strong><br> One of the techniques in object-oriented programming is encapsulation. It concerns the hiding of data in a class and making this class available only through methods. In this way the chance of making accidental mistakes in changing values is minimized. Java allows you to control access to classes, methods, and fields via so-called access specifiers.<br> Java offers four access specifiers, listed below in decreasing accessibility:<br> • public<br> • protected<br> • default (no specifier)<br> • private</p> 
          <p>We look at these access specifiers in more detail.<br> <strong>Public</strong><br> Public classes, methods, and fields can be accessed from everywhere. The only constraint is that a file with Java source code can only contain one public class whose name must also match with the filename. You use public classes, methods, or fields only if you explicitly want to offer access to these entities and if this access cannot do any harm. An example of a square determined by the position of its upper-left corner and its size.<br> public class Square<br> { // public class<br> public x, y, size; // public instance variables<br> }</p> 
          <p><strong>Protected</strong><br> Protected methods and fields can only be accessed within the same class to which the methods and fields belong, within its subclasses, and within classes of the same package, but not from anywhere else. You use the protected access level when it is appropriate for a class’s subclasses to have access to the method or field, but not for unrelated classes.<br> Default (no specifier) also known as friendly<br> If you do not set access to specific level, then such a class, method, or field will be accessible from inside the same package to which the class, method, or field belongs, but not from outside this package. This access-level is convenient if you are creating packages.</p> 
          <p><strong>Private</strong><br> Private methods and fields can only be accessed within the same class to which the methods and fields belong. Private methods and fields are not visible within subclasses and are not inherited by subclasses. So, the private access specifier is opposite to the public access specifier. It is mostly used for encapsulation: data are hidden within the class and accessor methods are provided.<br> An example, in which the position of the upper-left corner of a square can be set or obtained by accessor methods, but individual coordinates are not accessible to the user.<br> public class Square<br> { // public class<br> private double x, y // private (encapsulated) instance variables</p> 
          <p>public setCorner(int x, int y)<br> { // setting values of private fields<br> this.x = x;<br> this.y = y;<br> }</p> 
          <p>public getCorner()<br> { // setting values of private fields<br> return Point(x, y);<br> }<br> }</p> 
          <p>The following table summarizes the access level permitted by each specifier.<br> Situation public protected default private<br> Accessible to other class from same package? yes yes yes no<br> Accessible to classes from different package? yes no, unless it is a subclass no no</p> 
          <p><strong>So we can conclude the following about Inheritance that –</strong></p> 
          <p style="padding-left:30px;">? It is the mechanism of deriving a new class from an old class<br> ? Old class is called super class or parent class<br> ? The new class is called sub class or daughter class<br> ? It allows subclasses to inherit the data members and member methods of super class<br> ? Inheritance promotes code re-usability<br> ? Constructors of Base class are not inherited by Derived class<br> ? The this keyword can be used to refer to the most current object<br> ? If both sub class and super class has methods with same prototype/signature then methods of sub class overrides the method of the super class this is called overriding.<br> ? The overridden super class methods can be accessed using the keyword super<br> ? The constructor of sub class can be used to invoke the constructor of super class through the keyword super( ) with arguments but ensure this should be the first statement of the sub class constructor.<br> ? Methods declared final in the super class can not be overridden.<br> ? An Abstract class is one that simply represents the concept and whose objects can not be created, it is implemented using the keyword abstract.</p> 
          <p>Use of <strong>final</strong> keyword and Abstract in classes and methods</p> 
          <p>// Using final keyword<br> public class Base<br> {<br> public final double pi = 3.14159;<br> public final void display( )<br> {<br> System.out.println(“Final method in Base”);<br> }<br> public void modify( )<br> {<br> pi = 3.14159265; // Illegal, as final members can not be modified<br> }<br> }<br> public class Derived extends Base<br> {<br> public void display( ) // Illegal function, as it has been declared final in Base<br> {<br> System.out.println(“Final method in Derived”);<br> }<br> }</p> 
          <p>Use of <strong>abstract</strong> keyword<br> // Use of public abstract class PQR // abstract class<br> {<br> …<br> }<br> public abstract class PQR<br> {<br> int a ;<br> float f ;<br> public void display ( ) { } // NOT an abstract method<br> public void display1 ( ) ; // Abstract method, note the semicolon<br> }</p> 
          <p>Use of <strong>super</strong> keyword<br> public class Base<br> {<br> public int a;<br> double d;<br> Base(int val1, double val2)<br> {<br> a = val1;<br> b = val2;<br> }<br> public void display( )<br> {<br> System.out.println(“Display method in Base”);<br> }<br> }</p> 
          <p>public class Derived extends Base<br> {<br> int c ;<br> Derived (int val1, double val2, int val3)<br> {<br> super(v1, v2); // super keyword used to invoke base class //constructor<br> c = val3;<br> }</p> 
          <p>public void display( )<br> {<br> System.out.println(“Display method in Derived”);<br> }</p> 
          <p>public static void main( )<br> {<br> Derived obj = new Derived(15, 3.1415);<br> obj.display( ) ; // method of sub / derived class is invoked<br> super.display( ) ; // method of super / base class is invoked<br> }<br> } </p>
         </div> 
         <style type="text/css">
			div.wpmrec2x{max-width:610px;}
			div.wpmrec2x div.u > div{float:left;margin-right:10px;}
			div.wpmrec2x div.u > div:nth-child(3n){margin-right:0px;}
			</style> 
         <div class="wpcnt"> 
          <div class="wpa wpmrec wpmrec2x"> 
           <span class="wpa-about">Advertisements</span> 
           <div class="u"> 
            <script type="text/javascript" id="s26942">
						(function(g,$){if("undefined"!=typeof g.__ATA){
							g.__ATA.initAd({collapseEmpty:'after', sectionId:26942, width:300, height:250});
							g.__ATA.initAd({collapseEmpty:'after', sectionId:114160, width:300, height:250});
						}})(window,jQuery);
					</script> 
           </div> 
           <div id="crt-1491333096" style="width:300px;height:250px;"></div> 
           <script type="text/javascript">
		var o = document.getElementById('crt-1491333096');
		if ("undefined"!=typeof Criteo) {
			var p = o.parentNode;
			p.style.setProperty('display', 'inline-block', 'important');
			o.style.setProperty('display', 'block', 'important');
			Criteo.DisplayAcceptableAdIfAdblocked({zoneid:388248,containerid:"crt-1491333096",collapseContainerIfNotAdblocked:true,"callifnotadblocked": function () {var o = document.getElementById('crt-1491333096'); o.style.setProperty('display','none','important');o.style.setProperty('visbility','hidden','important'); } });
		} else {
			o.style.setProperty('display', 'none', 'important');
			o.style.setProperty('visibility', 'hidden', 'important');
		}
		</script> 
           <div id="crt-1232863638" style="width:300px;height:250px;"></div> 
           <script type="text/javascript">
		var o = document.getElementById('crt-1232863638');
		if ("undefined"!=typeof Criteo) {
			var p = o.parentNode;
			p.style.setProperty('display', 'inline-block', 'important');
			o.style.setProperty('display', 'block', 'important');
			Criteo.DisplayAcceptableAdIfAdblocked({zoneid:837497,containerid:"crt-1232863638",collapseContainerIfNotAdblocked:true,"callifnotadblocked": function () {var o = document.getElementById('crt-1232863638'); o.style.setProperty('display','none','important');o.style.setProperty('visbility','hidden','important'); } });
		} else {
			o.style.setProperty('display', 'none', 'important');
			o.style.setProperty('visibility', 'hidden', 'important');
		}
		</script> 
          </div> 
         </div>
         <div id="jp-post-flair" class="sharedaddy sd-like-enabled">
          <div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" id="like-post-wrapper-9354931-731-59d9797d0b5f5" data-src="//widgets.wp.com/likes/#blog_id=9354931&amp;post_id=731&amp;origin=nilabja.wordpress.com&amp;obj_id=9354931-731-59d9797d0b5f5" data-name="like-post-frame-9354931-731-59d9797d0b5f5">
           <h3 class="sd-title">Like this:</h3>
           <div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;">
            <span class="button"><span>Like</span></span> 
            <span class="loading">Loading...</span>
           </div>
           <span class="sd-text-color"></span>
           <a class="sd-link-color"></a>
          </div>
         </div> 
        </div> 
        <!-- You can start editing here. --> 
        <div id="comments">
         Comments
        </div> 
        <ol class="commentlist snap_preview"> 
         <li class="comment even thread-even depth-1 highlander-comment" id="comment-512"> 
          <div id="div-comment-512" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://0.gravatar.com/avatar/3567bfd0f07ae71d00b3aa726b7d8b7c?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn">xhhxhx</cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-512"> October 5, 2011 at 7:18 AM</a> 
           </div> 
           <p>Really good stuff….<br> Thnks a lot ?</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=512#respond" onclick="return addComment.moveForm( &quot;div-comment-512&quot;, &quot;512&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to xhhxhx">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-568"> 
          <div id="div-comment-568" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://0.gravatar.com/avatar/3fe664b7600f9a723722628c3569c895?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn">RoHiT</cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-568"> October 30, 2011 at 3:27 PM</a> 
           </div> 
           <p>thanks!! it is vry useful 4 us</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=568#respond" onclick="return addComment.moveForm( &quot;div-comment-568&quot;, &quot;568&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to RoHiT">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment even thread-even depth-1 highlander-comment" id="comment-732"> 
          <div id="div-comment-732" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://0.gravatar.com/avatar/3eb2419d9ada2b27c7c80c5eaffcd1dc?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn">Rishi</cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-732"> February 13, 2012 at 8:17 AM</a> 
           </div> 
           <p>very important for those whom u dont teach!!!!!!!!!!!</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=732#respond" onclick="return addComment.moveForm( &quot;div-comment-732&quot;, &quot;732&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to Rishi">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-906"> 
          <div id="div-comment-906" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://0.gravatar.com/avatar/f7f30c39aad87ef2245074dadcd946a0?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn">christopher(chris)9A loyola</cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-906"> June 29, 2012 at 1:49 PM</a> 
           </div> 
           <p>very very useful information given here.<br> awesome site sir.</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=906#respond" onclick="return addComment.moveForm( &quot;div-comment-906&quot;, &quot;906&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to christopher(chris)9A loyola">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment even thread-even depth-1 highlander-comment" id="comment-921"> 
          <div id="div-comment-921" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://0.gravatar.com/avatar/052aff9414f18bffc53687cbc4502bc5?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn">samuel (9a)</cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-921"> July 8, 2012 at 4:26 PM</a> 
           </div> 
           <p>sir i am having probleblemwhile creating a new project inside bluej can u help me out</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=921#respond" onclick="return addComment.moveForm( &quot;div-comment-921&quot;, &quot;921&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to samuel (9a)">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-924"> 
          <div id="div-comment-924" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://1.gravatar.com/avatar/afe8d443a6731d4d339d8a74503bcff7?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn"><a href="http://www.shintishanupal.blogspot.com" rel="external nofollow" class="url">Shayantan Pal</a></cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-924"> July 9, 2012 at 1:57 PM</a> 
           </div> 
           <p>I Am Studying Java Theory RIGHT NOW BEFORE THE COMPUTER EXAMS on 9/7/12</p> 
           <p>love you neel sir;<br> Regards,<br> Shinti Pal , Loyola 9D ,2012-12 batch</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=924#respond" onclick="return addComment.moveForm( &quot;div-comment-924&quot;, &quot;924&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to Shayantan Pal">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment even thread-even depth-1 highlander-comment" id="comment-1425"> 
          <div id="div-comment-1425" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://1.gravatar.com/avatar/1ba996668994ee490c6c83d6af1df390?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn"><a href="http://-" rel="external nofollow" class="url">VarunNayar</a></cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-1425"> July 8, 2013 at 1:27 AM</a> 
           </div> 
           <p>Thanks Neel Sir!<br> Never had to open the computer text book..</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=1425#respond" onclick="return addComment.moveForm( &quot;div-comment-1425&quot;, &quot;1425&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to VarunNayar">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-1608"> 
          <div id="div-comment-1608" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://0.gravatar.com/avatar/6901a3a4bd9298d61ef2e762ecf1a6e5?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn">sarveshwar</cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-1608"> September 6, 2014 at 11:41 AM</a> 
           </div> 
           <p>the whole computer book in brief.</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=1608#respond" onclick="return addComment.moveForm( &quot;div-comment-1608&quot;, &quot;1608&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to sarveshwar">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment even thread-even depth-1 highlander-comment" id="comment-1623"> 
          <div id="div-comment-1623" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://0.gravatar.com/avatar/68c37cec9726c6ce523dd20ccf69e0d3?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn">Pranav Sinha</cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-1623"> October 9, 2014 at 11:56 AM</a> 
           </div> 
           <p>its really precise helped me a lot knowing basics.<br> thankyou</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=1623#respond" onclick="return addComment.moveForm( &quot;div-comment-1623&quot;, &quot;1623&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to Pranav Sinha">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-1698"> 
          <div id="div-comment-1698" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://0.gravatar.com/avatar/92e12bcb3eb6a15e69e981983294ca58?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn">Maruthi Mahadev</cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-1698"> February 15, 2015 at 5:48 PM</a> 
           </div> 
           <p>Really Good stuff,precise and easy to understand..hoping to get some common questions in my viva exam tomorrow’s isc practical…thank you</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=1698#respond" onclick="return addComment.moveForm( &quot;div-comment-1698&quot;, &quot;1698&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to Maruthi Mahadev">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment even thread-even depth-1 highlander-comment" id="comment-1699"> 
          <div id="div-comment-1699" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://i2.wp.com/graph.facebook.com/v2.2/100003349692249/picture?q=type%3Dlarge%26_md5%3D2848e3ccd38cf29fd88e89306027d197&amp;resize=40%2C40" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn"><a href="http://www.facebook.com/100003349692249" rel="external nofollow" class="url">Bivor Anand</a></cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-1699"> February 15, 2015 at 9:00 PM</a> 
           </div> 
           <p>Usefull</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=1699#respond" onclick="return addComment.moveForm( &quot;div-comment-1699&quot;, &quot;1699&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to Bivor Anand">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment odd alt thread-odd thread-alt depth-1 highlander-comment" id="comment-1815"> 
          <div id="div-comment-1815" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://0.gravatar.com/avatar/6c32754d2307a62167fa67b66cba8445?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn">YASH RAY</cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-1815"> May 13, 2016 at 2:27 PM</a> 
           </div> 
           <p>simply awesome stuff…..</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=1815#respond" onclick="return addComment.moveForm( &quot;div-comment-1815&quot;, &quot;1815&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to YASH RAY">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
         <li class="comment even thread-even depth-1 highlander-comment" id="comment-1871"> 
          <div id="div-comment-1871" class="comment-body"> 
           <div class="comment-author vcard"> 
            <img alt="" src="https://0.gravatar.com/avatar/6dfe98f60f805fb916e53190a9160fa2?s=40&amp;d=&amp;r=G" class="avatar avatar-40" height="40" width="40"> 
            <cite class="fn">Kriti Das</cite> 
            <span class="says">says:</span> 
           </div> 
           <div class="comment-meta commentmetadata">
            <a href="https://nilabja.wordpress.com/computers/theory-of-java/#comment-1871"> February 2, 2017 at 5:55 AM</a> 
           </div> 
           <p>Thank you so much sir for this awesome site. Today is my practical exam and your information will help me alot.</p> 
           <div class="reply">
            <a rel="nofollow" class="comment-reply-link" href="https://nilabja.wordpress.com/computers/theory-of-java/?replytocom=1871#respond" onclick="return addComment.moveForm( &quot;div-comment-1871&quot;, &quot;1871&quot;, &quot;respond&quot;, &quot;731&quot; )" aria-label="Reply to Kriti Das">Reply</a>
           </div> 
          </div> </li>
         <!-- #comment-## --> 
        </ol> 
        <div class="navigation"> 
         <div class="alignleft"></div> 
         <div class="alignright"></div> 
        </div> 
        <div id="respondcon"> 
         <div id="respond" class="comment-respond"> 
          <h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/computers/theory-of-java/#respond" style="display:none;">Cancel reply</a></small></h3> 
          <form action="https://nilabja.wordpress.com/wp-comments-post.php" method="post" id="commentform" class="comment-form"> 
           <input type="hidden" id="highlander_comment_nonce" name="highlander_comment_nonce" value="e5f704a5fc">
           <input type="hidden" name="_wp_http_referer" value="/computers/theory-of-java/"> 
           <input type="hidden" name="hc_post_as" id="hc_post_as" value="guest"> 
           <div class="comment-form-field comment-textarea"> 
            <label for="comment">Enter your comment here...</label> 
            <div id="comment-form-comment">
             <textarea id="comment" name="comment" title="Enter your comment here..."></textarea>
            </div> 
           </div> 
           <div id="comment-form-identity"> 
            <div id="comment-form-nascar"> 
             <p>Fill in your details below or click an icon to log in:</p> 
             <ul> 
              <li class="selected" style="display:none;"> <a href="#comment-form-guest" id="postas-guest" title="Guest"> <span></span> </a> </li> 
              <li> <a href="#comment-form-load-service:WordPress.com" id="postas-wordpress" title="WordPress.com"> <span></span> </a> </li> 
              <li> <a href="#comment-form-load-service:Twitter" id="postas-twitter" title="Twitter"> <span></span> </a> </li> 
              <li> <a href="#comment-form-load-service:Facebook" id="postas-facebook" title="Facebook"> <span></span> </a> </li> 
              <li> <iframe id="googleplus-sign-in" name="googleplus-sign-in" src="https://public-api.wordpress.com/connect/?googleplus-sign-in=https%3A%2F%2Fnilabja.wordpress.com" width="24" height="24" scrolling="no" allowtransparency="true" seamless frameborder="0"></iframe> </li> 
             </ul> 
            </div> 
            <div id="comment-form-guest" class="comment-form-service selected"> 
             <div class="comment-form-padder"> 
              <div class="comment-form-avatar"> 
               <a href="https://gravatar.com/site/signup/" target="_blank"> <img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=&amp;forcedefault=y&amp;r=G" alt="Gravatar" width="25" class="no-grav"> </a> 
              </div> 
              <div class="comment-form-fields"> 
               <div class="comment-form-field comment-form-email"> 
                <label for="email">Email <span class="required">(required)</span> <span class="nopublish">(Address never made public)</span></label> 
                <div class="comment-form-input">
                 <input id="email" name="email" type="email" value="">
                </div> 
               </div> 
               <div class="comment-form-field comment-form-author"> 
                <label for="author">Name <span class="required">(required)</span></label> 
                <div class="comment-form-input">
                 <input id="author" name="author" type="text" value="">
                </div> 
               </div> 
               <div class="comment-form-field comment-form-url"> 
                <label for="url">Website</label> 
                <div class="comment-form-input">
                 <input id="url" name="url" type="url" value="">
                </div> 
               </div> 
              </div> 
             </div> 
            </div> 
            <div id="comment-form-wordpress" class="comment-form-service"> 
             <div class="comment-form-padder"> 
              <div class="comment-form-avatar"> 
               <img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=&amp;forcedefault=y&amp;r=G" alt="WordPress.com Logo" width="25" class="no-grav"> 
              </div> 
              <div class="comment-form-fields"> 
               <input type="hidden" name="wp_avatar" id="wordpress-avatar" class="comment-meta-wordpress" value=""> 
               <input type="hidden" name="wp_user_id" id="wordpress-user_id" class="comment-meta-wordpress" value=""> 
               <input type="hidden" name="wp_access_token" id="wordpress-access_token" class="comment-meta-wordpress" value=""> 
               <p class="comment-form-posting-as pa-wordpress"><strong></strong> You are commenting using your WordPress.com account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'wordpress' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p> 
              </div> 
             </div> 
            </div> 
            <div id="comment-form-twitter" class="comment-form-service"> 
             <div class="comment-form-padder"> 
              <div class="comment-form-avatar"> 
               <img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=&amp;forcedefault=y&amp;r=G" alt="Twitter picture" width="25" class="no-grav"> 
              </div> 
              <div class="comment-form-fields"> 
               <input type="hidden" name="twitter_avatar" id="twitter-avatar" class="comment-meta-twitter" value=""> 
               <input type="hidden" name="twitter_user_id" id="twitter-user_id" class="comment-meta-twitter" value=""> 
               <input type="hidden" name="twitter_access_token" id="twitter-access_token" class="comment-meta-twitter" value=""> 
               <p class="comment-form-posting-as pa-twitter"><strong></strong> You are commenting using your Twitter account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'twitter' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p> 
              </div> 
             </div> 
            </div> 
            <div id="comment-form-facebook" class="comment-form-service"> 
             <div class="comment-form-padder"> 
              <div class="comment-form-avatar"> 
               <img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=&amp;forcedefault=y&amp;r=G" alt="Facebook photo" width="25" class="no-grav"> 
              </div> 
              <div class="comment-form-fields"> 
               <input type="hidden" name="fb_avatar" id="facebook-avatar" class="comment-meta-facebook" value=""> 
               <input type="hidden" name="fb_user_id" id="facebook-user_id" class="comment-meta-facebook" value=""> 
               <input type="hidden" name="fb_access_token" id="facebook-access_token" class="comment-meta-facebook" value=""> 
               <p class="comment-form-posting-as pa-facebook"><strong></strong> You are commenting using your Facebook account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'facebook' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p> 
              </div> 
             </div> 
            </div> 
            <div id="comment-form-googleplus" class="comment-form-service"> 
             <div class="comment-form-padder"> 
              <div class="comment-form-avatar"> 
               <img src="https://1.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=25&amp;d=&amp;forcedefault=y&amp;r=G" alt="Google+ photo" width="25" class="no-grav"> 
              </div> 
              <div class="comment-form-fields"> 
               <input type="hidden" name="googleplus_avatar" id="googleplus-avatar" class="comment-meta-googleplus" value=""> 
               <input type="hidden" name="googleplus_user_id" id="googleplus-user_id" class="comment-meta-googleplus" value=""> 
               <input type="hidden" name="googleplus_access_token" id="googleplus-access_token" class="comment-meta-googleplus" value=""> 
               <p class="comment-form-posting-as pa-googleplus"><strong></strong> You are commenting using your Google+ account. <span class="comment-form-log-out">(&nbsp;<a href="javascript:HighlanderComments.doExternalLogout( 'googleplus' );">Log&nbsp;Out</a>&nbsp;/&nbsp;<a href="#" onclick="javascript:HighlanderComments.switchAccount();return false;">Change</a>&nbsp;)</span></p> 
              </div> 
             </div> 
            </div> 
            <div id="comment-form-load-service" class="comment-form-service"> 
             <div class="comment-form-posting-as-cancel">
              <a href="javascript:HighlanderComments.cancelExternalWindow();">Cancel</a>
             </div> 
             <p>Connecting to %s</p> 
            </div> 
           </div> 
           <script type="text/javascript">
var highlander_expando_javascript = function(){
	var input = document.createElement( 'input' ),
	    comment = jQuery( '#comment' );

	if ( 'placeholder' in input ) {
		comment.attr( 'placeholder', jQuery( '.comment-textarea label' ).remove().text() );
	}

	// Expando Mode: start small, then auto-resize on first click + text length
	jQuery( '#comment-form-identity' ).hide();
	jQuery( '#comment-form-subscribe' ).hide();
	jQuery( '#commentform .form-submit' ).hide();

	comment.css( { 'height':'10px' } ).one( 'focus', function() {
		var timer = setInterval( HighlanderComments.resizeCallback, 10 )
		jQuery( this ).animate( { 'height': HighlanderComments.initialHeight } ).delay( 100 ).queue( function(n) { clearInterval( timer ); HighlanderComments.resizeCallback(); n(); } );
		jQuery( '#comment-form-identity' ).slideDown();
		jQuery( '#comment-form-subscribe' ).slideDown();
		jQuery( '#commentform .form-submit' ).slideDown();
	});
}
jQuery(document).ready( highlander_expando_javascript );
</script> 
           <div id="comment-form-subscribe"> 
            <p class="comment-subscription-form"><input type="checkbox" name="subscribe" id="subscribe" value="subscribe" style="width: auto;"> <label class="subscribe-label" id="subscribe-label" for="subscribe" style="display: inline;">Notify me of new comments via email.</label></p>
           </div> 
           <p class="form-submit"><input name="submit" type="submit" id="comment-submit" class="submit" value="Post Comment"> <input type="hidden" name="comment_post_ID" value="731" id="comment_post_ID"> <input type="hidden" name="comment_parent" id="comment_parent" value="0"> </p>
           <p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="5ec4521d70"></p> 
           <input type="hidden" name="genseq" value="1507424637"> 
           <p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="10"></p> 
          </form> 
         </div>
         <!-- #respond --> 
         <div style="clear: both"></div>
        </div>
        <!-- #respondcon --> 
       </div> 
      </div> 
     </div> 
     <hr> 
     <div id="footer" role="contentinfo"> 
     </div> 
    </div>
    <!-- #container --> 
   </div>
   <!-- #page --> 
   <div id="footer-bott"> 
    <a href="https://wordpress.com/?ref=footer_blog">Blog at WordPress.com.</a> 
   </div> 
   <div class="footerbar"></div> 
  </div>
  <!-- #wrapper --> 
  <!--  --> 
  <script type="text/javascript" src="//0.gravatar.com/js/gprofiles.js?ver=201740y"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://s1.wp.com/wp-content/mu-plugins/gravatar-hovercards/wpgroho.js?m=1380573781h"></script> 
  <script>
		//initialize and attach hovercards to all gravatars
		jQuery( document ).ready( function( $ ) {

			if (typeof Gravatar === "undefined"){
				return;
			}

			if ( typeof Gravatar.init !== "function" ) {
				return;
			}			

			Gravatar.profile_cb = function( hash, id ) {
				WPGroHo.syncProfileData( hash, id );
			};
			Gravatar.my_hash = WPGroHo.my_hash;
			Gravatar.init( 'body', '#wp-admin-bar-my-account' );
		});
	</script> 
  <div style="display:none"> 
   <div class="grofile-hash-map-58bb3b16f47342b3b3fc87dad06e48a8"> 
   </div> 
   <div class="grofile-hash-map-3567bfd0f07ae71d00b3aa726b7d8b7c"> 
   </div> 
   <div class="grofile-hash-map-3fe664b7600f9a723722628c3569c895"> 
   </div> 
   <div class="grofile-hash-map-3eb2419d9ada2b27c7c80c5eaffcd1dc"> 
   </div> 
   <div class="grofile-hash-map-f7f30c39aad87ef2245074dadcd946a0"> 
   </div> 
   <div class="grofile-hash-map-052aff9414f18bffc53687cbc4502bc5"> 
   </div> 
   <div class="grofile-hash-map-afe8d443a6731d4d339d8a74503bcff7"> 
   </div> 
   <div class="grofile-hash-map-1ba996668994ee490c6c83d6af1df390"> 
   </div> 
   <div class="grofile-hash-map-6901a3a4bd9298d61ef2e762ecf1a6e5"> 
   </div> 
   <div class="grofile-hash-map-68c37cec9726c6ce523dd20ccf69e0d3"> 
   </div> 
   <div class="grofile-hash-map-92e12bcb3eb6a15e69e981983294ca58"> 
   </div> 
   <div class="grofile-hash-map-94912a0bec2f9d4b83a35fb496183e1c"> 
   </div> 
   <div class="grofile-hash-map-6c32754d2307a62167fa67b66cba8445"> 
   </div> 
   <div class="grofile-hash-map-6dfe98f60f805fb916e53190a9160fa2"> 
   </div> 
  </div> 
  <script type="text/javascript">
/* <![CDATA[ */
var HighlanderComments = {"loggingInText":"Logging In\u2026","submittingText":"Posting Comment\u2026","postCommentText":"Post Comment","connectingToText":"Connecting to %s","commentingAsText":"%1$s: You are commenting using your %2$s account.","logoutText":"Log Out","loginText":"Log In","connectURL":"https:\/\/nilabja.wordpress.com\/public.api\/connect\/?action=request","logoutURL":"https:\/\/nilabja.wordpress.com\/wp-login.php?action=logout&_wpnonce=c8d930c81f","homeURL":"https:\/\/nilabja.wordpress.com\/","postID":"731","gravDefault":"gravatar_default","enterACommentError":"Please enter a comment","enterEmailError":"Please enter your email address here","invalidEmailError":"Invalid email address","enterAuthorError":"Please enter your name here","gravatarFromEmail":"This picture will show whenever you leave a comment. Click to customize it.","logInToExternalAccount":"Log in to use details from one of these accounts.","change":"Change","changeAccount":"Change Account","comment_registration":"","userIsLoggedIn":"","isJetpack":"0","text_direction":"ltr"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://s2.wp.com/_static/??/wp-content/js/jquery/jquery.autoresize.js,/wp-content/mu-plugins/highlander-comments/script.js?m=1479964158j"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var actionbardata = {"siteID":"9354931","siteName":"BRAINSTORMING","siteURL":"http:\/\/nilabja.wordpress.com","icon":"<img alt='' src='https:\/\/s1.wp.com\/i\/logo\/wpcom-gray-white.png' class='avatar avatar-50' height='50' width='50' \/>","canManageOptions":"","canCustomizeSite":"","isFollowing":"","themeSlug":"pub\/greyzed","signupURL":"https:\/\/wordpress.com\/start\/","loginURL":"https:\/\/nilabja.wordpress.com\/wp-login.php?redirect_to=https%3A%2F%2Fnilabja.wordpress.com%2Fcomputers%2Ftheory-of-java%2F","themeURL":"","xhrURL":"https:\/\/nilabja.wordpress.com\/wp-admin\/admin-ajax.php","nonce":"6e9eea8cb9","isSingular":"1","isFolded":"","isLoggedIn":"","isMobile":"","subscribeNonce":"<input type=\"hidden\" id=\"_wpnonce\" name=\"_wpnonce\" value=\"29df7d4560\" \/>","referer":"https:\/\/nilabja.wordpress.com\/computers\/theory-of-java\/","canFollow":"1","feedID":"2901720","statusMessage":"","customizeLink":"https:\/\/nilabja.wordpress.com\/wp-admin\/customize.php?url=https%3A%2F%2Fnilabja.wordpress.com%2Fcomputers%2Ftheory-of-java%2F","postID":"731","shortlink":"http:\/\/wp.me\/PDfDZ-bN","canEditPost":"","editLink":"https:\/\/wordpress.com\/page\/nilabja.wordpress.com\/731","statsLink":"https:\/\/wordpress.com\/stats\/post\/731\/nilabja.wordpress.com","i18n":{"view":"View site","follow":"Follow","following":"Following","edit":"Edit","login":"Log in","signup":"Sign up","customize":"Customize","report":"Report this content","themeInfo":"Get theme: Greyzed","shortlink":"Copy shortlink","copied":"Copied","followedText":"New posts from this site will now appear in your <a href=\"https:\/\/wordpress.com\/\">Reader<\/a>","foldBar":"Collapse this bar","unfoldBar":"Expand this bar","editSubs":"Manage subscriptions","viewReader":"View site in Reader","viewReadPost":"View post in Reader","subscribe":"Sign me up","enterEmail":"Enter your email address","followers":"Join 70 other followers","alreadyUser":"Already have a WordPress.com account? <a href=\"https:\/\/nilabja.wordpress.com\/wp-login.php?redirect_to=https%3A%2F%2Fnilabja.wordpress.com%2Fcomputers%2Ftheory-of-java%2F\">Log in now.<\/a>","stats":"Stats"}};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://s0.wp.com/_static/??-eJx9jksOwjAMRC9E6raIzwZxFBQSA27jJDhJgduTLqhYdTfyvHkyvKIywWf0GYYEFicyGN/NkDbwV3FR0ZU7+QSORkzwLFjwob11KD+YvHHF1rKKTGCuQyUY3adh8itGbWuvrlqAdcooNakwoQjNsuW2ZjCZgp8NS1qjR0qMWW2bFi71abgF4cqf+dTt2n5/7A59O3wBx0JoCw=="></script> 
  <script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script> 
  <script type="text/javascript">
	var skimlinks_pub_id = "725X584219"
	var skimlinks_sitename = "nilabja.wordpress.com";
	</script> 
  <script type="text/javascript" defer src="https://s.skimresources.com/js/725X1342.skimlinks.js"></script> 
  <iframe src="https://widgets.wp.com/likes/master.html?ver=20170206#ver=20170206" scrolling="no" id="likes-master" name="likes-master" style="display:none;"></iframe> 
  <div id="likes-other-gravatars">
   <div class="likes-text">
    <span>%d</span> bloggers like this:
   </div>
   <ul class="wpl-avatars sd-like-gravatars"></ul>
  </div> 
  <script src="//stats.wp.com/w.js?56" type="text/javascript" async defer></script> 
  <script type="text/javascript">
_tkq = window._tkq || [];
_stq = window._stq || [];
_tkq.push(['storeContext', {'blog_id':'9354931','blog_tz':'5','user_lang':'en','blog_lang':'en','user_id':'0'}]);
_stq.push(['view', {'blog':'9354931','v':'wpcom','tz':'5','user_id':'0','post':'731','subd':'nilabja'}]);
_stq.push(['extra', {'crypt':'UE5XaGUuOTlwaD85flAmcm1mcmZsaDhkV11YdWFnNncxc1tjZG9XVXhRVnolXz01bj9hWHNfdHVDZThiTGsyUlpJb3ZdcTVBXzNoUGIuZVtEaFdSdU5scUFSajNHfldjKyUmfm5UcGFbN1EvMGxqOWVvLC1VVmM1SD9zVT9DMHclSWE9VVctQ0p+cDNHODBlekN6JiYvP3wsfGF4Y2FlLG5zSTUvJkFRMVs1JndNVTJvT2staFBORz9VUU5YLzZZR1liW2N8WUNpOXJDK1otVFgwdEYyWiYrPVs1LXw5X2Rac3QreXNhUWdKeXFbdjBCJUk1S0owcVlBRFpTTg=='}]);
_stq.push([ 'clickTrackerInit', '9354931', '731' ]);
	</script> 
  <noscript>
   <img src="https://pixel.wp.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="">
  </noscript> 
  <script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//pixel.wp.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script> 
 </body>
</html>