<html>
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <title>JDistlib—Java Statistical Distribution Library</title> 
  <link rel="stylesheet" type="text/css" href="styles/def.css"> 
  <style type="text/css"></style>
 </head> 
 <body> 
  <!--[if lt IE 7]>
  <div style='border: 1px solid #F7941D; background: #FEEFDA; text-align: center; clear: both; height: 75px; position: relative;'>
    <div style='position: absolute; right: 3px; top: 3px; font-family: courier new; font-weight: bold;'><a href='#' onclick='javascript:this.parentNode.parentNode.style.display="none"; return false;'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-cornerx.jpg' style='border: none;' alt='Close this notice'/></a></div>
    <div style='width: 640px; margin: 0 auto; text-align: left; padding: 0; overflow: hidden; color: black;'>
      <div style='width: 75px; float: left;'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-warning.jpg' alt='Warning!'/></div>
      <div style='width: 275px; float: left; font-family: Arial, sans-serif;'>
        <div style='font-size: 14px; font-weight: bold; margin-top: 12px;'>You are using an outdated browser</div>
        <div style='font-size: 12px; margin-top: 6px; line-height: 12px;'>For a better experience using this site, please upgrade to a modern web browser.</div>
      </div>
      <div style='width: 75px; float: left;'><a href='http://www.firefox.com' target='_blank'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-firefox.jpg' style='border: none;' alt='Get Firefox 3.5'/></a></div>
      <div style='width: 75px; float: left;'><a href='http://www.browserforthebetter.com/download.html' target='_blank'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-ie8.jpg' style='border: none;' alt='Get Internet Explorer 8'/></a></div>
      <div style='width: 73px; float: left;'><a href='http://www.apple.com/safari/download/' target='_blank'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-safari.jpg' style='border: none;' alt='Get Safari 4'/></a></div>
      <div style='float: left;'><a href='http://www.google.com/chrome' target='_blank'><img src='http://www.ie6nomore.com/files/theme/ie6nomore-chrome.jpg' style='border: none;' alt='Get Google Chrome'/></a></div>
    </div>
  </div>
  <![endif]--> 
  <!-- I ripped this code from: http://www.snyderplace.com/demos/collapsible.html --> 
  <!-- JS --> 
  <script type="text/javascript" src="javascript/jquery.min.js"></script> 
  <script type="text/javascript" src="javascript/highlight.pack.js"></script> 
  <script type="text/javascript" src="javascript/jquery.cookie.js"></script> 
  <script type="text/javascript" src="javascript/jquery.collapsible.js"></script> 
  <script type="text/javascript">
    $(document).ready(function() {

        //syntax highlighter
        hljs.tabReplace = '    ';
        hljs.initHighlightingOnLoad();

        $.fn.slideFadeToggle = function(speed, easing, callback) {
            return this.animate({opacity: 'toggle', height: 'toggle'}, speed, easing, callback);
        };

        //collapsible management
         $('.collapsible').collapsible({
             defaultOpen: 'main',
             cookieName: 'nav',
             speed: 100,
         });
        $('.page_collapsible').collapsible({
            defaultOpen: 'main',
            cookieName: 'main',
            speed: 100,
   cookieOptions: {
        path: '/',
        expires: 3650,
        domain: '',
        secure: ''
    },
            animateOpen: function (elem, opts) { //replace the standard slideUp with custom function
                elem.next().slideFadeToggle(opts.speed);
            },
            animateClose: function (elem, opts) { //replace the standard slideDown with custom function
                elem.next().slideFadeToggle(opts.speed);
            },
            loadOpen: function (elem) { //replace the standard open state with custom function
                elem.next().show();
            },
            loadClose: function (elem, opts) { //replace the close state with custom function
                elem.next().hide();
            }

        });

        //assign open/close all to functions
        function openAll() {
            $('.page_collapsible').collapsible('openAll');
        }
        function closeAll() {
            $('.page_collapsible').collapsible('closeAll');
        }

        //listen for close/open all
        $('#closeAll').click(function(event) {
            event.preventDefault();
            closeAll();

        });
        $('#openAll').click(function(event) {
            event.preventDefault();
            openAll();
        });

    });
</script>
  <div id="container" name="container"> 
   <div class="header">
    <span>
     <center>
      <h1>JDistlib—Java Statistical Distribution Library</h1>
     </center></span>
   </div> 
   <div id="content"> 
    <div class="page_collapsible" id="main">
     <b>Description</b>
     <span></span>
    </div> 
    <div class="container"> 
     <div class="content"> 
      <p>A Java package that provides routines for various statistical distributions.</p> 
      <h3>Main Features</h3> 
      <ul class="ul1"> 
       <li>Computation of the density (<a href="http://en.wikipedia.org/wiki/Probability_density_function">pdf</a>), cumulative (<a href="http://en.wikipedia.org/wiki/Cumulative_distribution_function">cdf</a>), <a href="http://en.wikipedia.org/wiki/Quantile">quantile</a>, and random variates of many popular statistical distributions, such as Ansari-Bradley, Beta, Binomial, Cauchy, Chi square, Exponential, Fisher's F, Gamma, Geometric, Hypergeometric, Kendall, Logistic, Log normal, Negative binomial, Noncentral beta, Noncentral chi square, Noncentral F, Noncentral T, Normal, Poisson, Sign rank, Spearman, Student's T, Tukey, Uniform, Weibull, Wilcoxon, and many more.</li> 
       <li>A manual translation based on <a href="http://www.r-project.org/">R</a>. (<b>Updated and current as of R version 3.3.2; R-devel October 9, 2016</b>). Since version 0.2.0, JDistlib has (mostly) passed the same battery of tests of standard R with the same level of accuracy, except those outlined in the Known Problems section (see below).</li> 
       <li><b>THREAD SAFE</b> (See "Implementation details" below), except for implementations of MersenneTwister (see <a href="https://sourceforge.net/p/jdistlib/tickets/24/">ticket #24</a>).</li> 
       <li>100% Java. 100% compatible with JDK 5.0 or later.</li> 
       <li>Normality tests, such as: <a href="https://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test">Kolmogorov-Smirnov</a>, <a href="https://en.wikipedia.org/wiki/Anderson%E2%80%93Darling_test">Anderson-Darling</a>, <a href="https://en.wikipedia.org/wiki/Cram%C3%A9r%E2%80%93von_Mises_criterion">Cramer-Von Mises</a>, <a href="https://en.wikipedia.org/wiki/D%27Agostino%27s_K-squared_test">D'Agostino-Pearson</a>, <a href="https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test">Jarque Bera</a>, <a href="https://en.wikipedia.org/wiki/Lilliefors_test">Kolmogorov-Lilliefors</a>, Shapiro-Francia, <a href="https://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test">Shapiro-Wilk</a>.</li> 
       <li>Two-distribution tests, such as: Kolmogorov-Smirnov two-distribution test, Ansari-Bradley, Mood, Bartlett, Fligner, T-test (one-sample, paired, two-sample), Variance test, Wilcoxon test, Mann-Whitney-U test, <a href="https://en.wikipedia.org/wiki/Kruskal%E2%80%93Wallis_one-way_analysis_of_variance">Kruskal-Wallis test</a>, Binomial test.</li> 
       <li>Research-oriented random number generators (RNG): <a href="http://en.wikipedia.org/wiki/Mersenne_twister">Mersenne-Twister</a>, Marsaglia's <a href="http://en.wikipedia.org/wiki/Multiply-with-carry">Complementary-multiply-with-carry</a> 4096, and <a href="https://en.wikipedia.org/wiki/Well_equidistributed_long-period_linear">WELL 44497b</a>.</li> 
       <li>Computation of some useful mathematical functions, such as: Gamma, log gamma, poly gammas (di-, tri-, tetra-, pentagamma), incomplete beta, Stirling approximation function, <a href="http://en.wikipedia.org/wiki/Bessel_function">Bessel functions</a> first and second kind (J and Y) with fractional orders, Modified Bessel functions the first and the second kind (I and K) with fractional orders, etc.</li> 
       <li>Numerical optimization (find maxima / minima), <a href="https://en.wikipedia.org/wiki/BOBYQA">BOBYQA</a> (multivariate numerical optimization), find roots of a function numerically.</li> 
       <li>Basic vector-based math routines.</li>  
      </ul> 
      <h3>Download</h3> 
      <p>Current release is version 0.4.5. (October 10, 2016) Go to the <a href="http://sourceforge.net/projects/jdistlib/">project page</a> to download the package, to report bugs, or to discuss about this project. </p> 
      <h3>Documentation</h3> 
      <p>You can <a href="http://jdistlib.sourceforge.net/javadoc/">browse the rudimentary Javadoc</a>, if you like.</p> 
      <h3>License</h3> 
      <p><a href="http://www.gnu.org/licenses/gpl-2.0.html">GPL version 2</a>.</p> 
      <h3>What's new</h3> 
      <p><b><u>Note:</u></b> Daniel King of Broad Institute has kindly provided a copy of JDistlib repository in <a href="https://repo1.maven.org/maven2/net/sourceforge/jdistlib/jdistlib">Maven Central</a>. </p>
      <p><b><u>Note:</u></b> Thanks to MichaeL, who alerted me that v0.4.5 binary file contains source code (Bug <a href="https://sourceforge.net/p/jdistlib/tickets/33/">#33</a>). I have since reuploaded the binary for v0.4.5 (October 21, 2016). Apologies the inconvenience. </p>
      <h4>Version 0.4.5 (October 10, 2016):</h4> 
      <ul> 
       <li>Bug fix for <a href="https://sourceforge.net/p/jdistlib/tickets/31/">#31</a> (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16972">PR#16972</a>) on Poisson quantile (and related limit bugs)</li> 
       <li>Added Median Absolute Deviation (MAD) to jdistlib.math.VectorMath</li> 
       <li>Responded to bug <a href="https://sourceforge.net/p/jdistlib/tickets/29/">#29</a> by adding an option to sort for Shapiro-Wilk test. Thank you anonymous bug reporter!</li> 
       <li>Sync with R-3.3.1, fixes rgamma(1,Inf) or rgamma(1, 0,0) no longer give NaN but the correct limit.</li> 
       <li>Added Levy distribution</li> 
       <li>Sync with Development build of October 9, 2016</li> 
       <li>Fixes: rbeta(4, NA) and similarly rgamma() and rnbinom() now return NaN's with a warning, as other r&lt;dist&gt;(), and as documented. (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=17155">PR#17155</a>) </li> 
      </ul> 
      <br>
      <br> 
      <p><b>Note:</b> Since JDistlib includes bleeding edge fixes, its output may be different than that of the recently released R. Test cases for such bleeding edge fixes have been (and will always be) incorporated, guaranteeing its accuracy. Note also that JDistlib may still have bugs on its own. Your <a href="https://sourceforge.net/p/jdistlib/tickets/">bug report</a> is highly appreciated</p> 
     </div>
    </div> 
    <div class="page_collapsible" id="old-news">
     <b>Old news</b>
     <span></span>
    </div> 
    <div class="container"> 
     <div class="content"> 
      <h4>Version 0.4.4 (April 19, 2016):</h4> 
      <ul> 
       <li>Fix for bug <a href="https://sourceforge.net/p/jdistlib/tickets/28/">#28</a>: Bug on Shapiro-Wilk p-value.</li> 
      </ul> 
      <h4>Version 0.4.3 (April 19, 2016):</h4> 
      <ul> 
       <li>Fix for bug <a href="https://sourceforge.net/p/jdistlib/tickets/27/">#27</a>: Regression on bug <a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16489">PR#16489</a></li> 
      </ul> 
      <h4>Version 0.4.2 (April 19, 2016):</h4> 
      <ul> 
       <li>Fix for bug <a href="https://sourceforge.net/p/jdistlib/tickets/26/">#26</a>: Allow warnings to be cast as an exception.</li> 
       <li>Sync with R-devel (Apr 18, 2016-r70508); 3.3.0 alpha </li> 
       <li>Fix for bug <a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16521">PR#16521</a>: rchisq(*, df=0, ncp=0) now returns 0 instead of NaN, and dchisq(*, df=0, ncp=*) also no longer returns NaN in limit cases (where the limit is unique)</li> 
       <li>Fix for pchisq(*, df=0, ncp &gt; 0, log.p=TRUE) no longer underflows (for ncp &gt; ~60).</li> 
       <li>Fix for rhyper(nn, m, n, k) no longer returns NA when one of the three parameters exceeds the maximal integer.</li> 
       <li>Fix for bug <a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16727">PR#16727</a>: [dpqr]nbinom(..., size = Inf) should behave like [dpqr]pois(...)</li> 
       <li>Added WELL 44497b random number generator</li> 
       <li>Added <a href="https://en.wikipedia.org/wiki/BOBYQA">BOBYQA</a> (multivariate numerical optimization)</li> 
      </ul> 
      <h4>Version 0.4.1 (September 15, 2015):</h4> 
      <ul> 
       <li>Synced with R version 3.2.2</li> 
       <li>Fix for bug <a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16475">PR#16475</a>: qt(*, df=Inf, ncp=.) now uses the natural qnorm() limit instead of returning NaN.</li> 
       <li>Fix for bug <a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=16489">PR#16489</a>: rhyper(nn, &lt;large&gt;) now works correctly.</li> 
      </ul> 
      <h4>Version 0.4.0 (May 6, 2015):</h4> 
      <ul> 
       <li>Quick update: Fixed a typo on Beta.density, which caused failures in regression tests.</li> 
      </ul> 
      <h4>Version 0.3.9 (May 5, 2015):</h4> 
      <ul> 
       <li>Sync with the development branch of R 3.2.x (dated April 24, 2015, which is also current for May 4, 2015 with respect to distribution computation)</li> 
       <li>Fix for the second half of <a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15554">PR#15554</a> regarding Bessel.J and Bessel.Y with huge alpha (? 2<sup>61</sup>)</li> 
       <li>Fix for bug <a href="https://sourceforge.net/p/jdistlib/tickets/17/">#17</a> regarding the accuracy of Beta.quantile (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15755">PR#15755</a>)</li> 
       <li>Added MathFunctions.logspace_sum (per 3.2.x API feature)</li> 
       <li>Fix for bug <a href="https://sourceforge.net/p/jdistlib/tickets/22/">#22</a> for inadvertent use of Java 1.8 API (Double.isFinite). It has been replaced with !Double.isInfinite (Java 1.5-compatible API)</li> 
      </ul> 
      <h4>Version 0.3.8 (Dec 15, 2014):</h4> 
      <ul> 
       <li>Fix for bug <a href="https://sourceforge.net/p/jdistlib/tickets/20/">#20</a> regarding Kolmogorov-Smirnov (KS) test. Thanks, Gilad Wallach and Eran Avidan! Note: this bug was introduced in v0.3.6, with the fix of bug <a href="https://sourceforge.net/p/jdistlib/tickets/18/">#18</a> </li> 
      </ul> 
      <h4>Version 0.3.7 (Dec 10, 2014):</h4> 
      <ul> 
       <li>Synced with R release version 3.1.2.</li> 
       <li>Fix for bug <a href="https://sourceforge.net/p/jdistlib/tickets/19/">#19</a></li> 
       <li>Added option to allow inexact KS p-value computation method, if needed. Default option is still exact method. See bug <a href="https://sourceforge.net/p/jdistlib/tickets/19/">#19</a> entry for details.</li> 
       <li>Fixed integer overflow bug when computing KS exact method---only happen with big data sets.</li> 
      </ul> 
      <h4>Version 0.3.6 (Aug 18, 2014):</h4> 
      <ul> 
       <li>Synced with R release version 3.1.1.</li> 
       <li>Fix for bug <a href="https://sourceforge.net/p/jdistlib/tickets/18/">#18</a></li> 
       <li>Added generalized one-distribution Kolmogorov-Smirnov test</li> 
       <li>kolmogorov_smirnov_statistic and kolmogorov_smirnov_pvalue are deprecated in favor of kolmogorov_smirnov_test</li> 
       <li>Synced MersenneTwister with Sean Luke's version 20</li> 
       <li>Incorporated Bintray / Gradle build system, courtesy Schalk W. Cronjé.</li> 
      </ul> 
      <h4>Version 0.3.5 (Apr 14, 2014):</h4> 
      <ul> 
       <li>Synced with R-devel-2014-04-10 (effectively R 3.2.0 alpha or 3.1.1), fixing the following bugs:</li> 
       <ul> 
        <li>pchisq(1e-5, 100, 1) == 0 due to underflow in dpois_raw. (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15635">PR#15635</a>). Note that for cases like this, due to the underlying formula, you will need to use log space to compute the probability.</li> 
        <li>Calculation error in using function pbinom (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15734">PR#15734</a>)</li> 
       </ul> 
      </ul> 
      <h4>Version 0.3.4 (Apr 7, 2014):</h4> 
      <ul> 
       <li>Synced with R-rc_2014-04-04_r65373, fixing the following bugs:</li> 
       <ul> 
        <li>pbeta(x, a,b, log.p=TRUE) sometimes lost all precision for very small and very differently sized a,b. (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15641">PR#15641</a>)</li> 
        <li>More precise Normal density when x &gt; 5 (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15620">PR#15620</a>)</li> 
        <li>Adding sinpi, cospi, and tanpi for more precise Bessel function and Cauchy distribution computations (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15529">PR#15529</a>)</li> 
       </ul> 
       <li>Fixed bug <a href="https://sourceforge.net/p/jdistlib/tickets/16/">#16</a>, infinite loop in sort functions when the numbers are all negatives (Thanks Gilad Wallach and Idan Peretz!).</li> 
       <li>Imported a lot of comments to sync with the latest R function.</li> 
       <li>Fixes comment on Bessel functions---Bessel functions can handle negatives already!</li> 
      </ul> 
      <h4>Version 0.3.3 (Jan 28, 2014):</h4> 
      <ul> 
       <li>Bessel functions first and second kind (J and Y). Modified Bessel functions, the first and the third kind (I and K), with fractional orders.</li> 
       <li>Added Beta Prime and Kumaraswamy distributions.</li> 
       <li>Added PolyGamma.lmvpsigammafn (log of multivariate psi-gamma function).</li> 
      </ul> 
      <h4>Version 0.3.2 (Jan 24, 2014):</h4> 
      <ul> 
       <li>Fixed bug in MathFunctions.lmvgammafn (see ticket <a href="https://sourceforge.net/p/jdistlib/tickets/14/">#14</a>). Thanks, anonymous!</li> 
       <li>Fixed bug in Spearman.quantile (off by 1 issue)</li> 
       <li>Fixed bug in binomial_test in DistributionTest</li> 
       <li>Fixed bug in Logarithmic distribution plus some speed up in Logarithmic.quantile</li> 
       <li>Added Bounded Arcsine, Laplace, and Zipf distributions</li> 
       <li>Added density functions for Spearman and Tukey distributions (using differentials; not precise!)</li> 
       <li>Added MathFunctions.sinc, gharmonic, lgharmonic, and sort for various data types</li> 
       <li>Added some incomplete solutions to bug <a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15635">PR#15635</a></li> 
       <li>Added batch calls for PolyGamma functions</li> 
       <li>Added Poisson test</li> 
       <li>Make MathFunctions.logspace_add and logspace_sub public</li> 
       <li>Removed redundant constants from Constants (M_PI_half, M_LN_2, kLog1OverSqrt2Pi)</li> 
      </ul> 
      <h4>Version 0.3.1 (Jan 13, 2014):</h4> 
      <ul> 
       <li>Added Spearman quantile (using bisection) and random variates (by inversion)</li> 
       <li>Added Order quantile variates (only very minimally tested; caveat emptor!)</li> 
       <li>Added Chi, Inverse Gamma, and Nakagami distributions (based on simple transform from the Gamma distribution)</li> 
       <li>Added many two-distribution tests: Ansari-Bradley, Mood, Bartlett, Fligner, T-test (one-sample, paired, two-sample), Variance test, Wilcoxon test, Mann-Whitney-U test, Kruskal-Wallis test, Binomial test</li> 
       <li>Added lower_tail flag to Ansari distribution</li> 
       <li>Utilities.rank is now index 1 based (not index 0) since many routines seem to depend on that fact</li> 
       <li>Various bug fixes</li> 
      </ul> 
      <h4>Version 0.3.0 (Jan 10, 2014):</h4> 
      <ul> 
       <li><b>Renamed:</b> Removed the Q prefix of QRandomEngine, QMersenneTwister, QRandomCMWC, and QRandomSampler, for consistency</li> 
       <li>Added Beta binomial distribution (with parameterization of mu, sigma, and size)</li> 
       <li>Added hazard, cumulative hazard, survival, and inverse survival functions for all distributions (instance only)</li> 
       <li>Fixed bugs on Kolmogorov-Smirnov two-sample test when the second array (Y) is longer than the first array (X)</li> 
       <li>Fixed bugs for Binomial.cumulative when x &lt; 0 or x &gt;= n (improperly returns 0 or 1).</li> 
       <li>Updated to R-patched_2014-01-08_r64705 (R 3.1.0 alpha) that contains the following bug fixes: 
        <ul> 
         <li>dbeta(x, a, b) with a or b within a factor of 2 of the largest representable number could infinite-loop.</li> 
         <li>qcauchy(p, *) is now fully accurate even when p is very close to 1. (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15521">PR#15521</a>)</li> 
         <li>In some extreme cases (more than 10^15) integer inputs to dpqrxxx functions might have been rounded up by one (with a warning about being non-integer). (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15624">PR#15624</a>)</li> 
        </ul></li> 
      </ul> 
      <h4>Version 0.2.1 (Jan 9, 2014):</h4> 
      <ul> 
       <li>Fixed crash on Poisson.random (and consequently NegBinomial.random) when mu &gt;= 10</li> 
       <li>Fixed bugs on NonCentralF.random</li> 
       <li>Added codes from p-r-tests.R for further unit testing on random variates.</li> 
      </ul> 
      <h4>Version 0.2.0 (Jan 8, 2014):</h4> 
      <ul> 
       <li>Many bugfixes! As of version 0.2.0, JDistlib passed most of R's standard battery of tests for all basic (prepackaged) distributions (except for the 3 integration tests below). So far, the hardest hit is Noncentral chi square due to the inavailability of long double in Java (See ticket <a href="https://sourceforge.net/p/jdistlib/tickets/9/">#9</a>). Noncentral beta also suffers a bit (See ticket <a href="https://sourceforge.net/p/jdistlib/tickets/13/">#13</a>).</li> 
       <li>Most of d-p-q-r-tests.R has been added for unit testing (only 3 integration tests remain).</li> 
       <li>Deprecated GenericDistribution.random(QRandomEngine)</li> 
       <li><b>Moved:</b> MathFunctions, Constants, and PolyGamma to jdistlib.math</li> 
       <li>Added an API to create multiple random variables</li> 
       <li>Added an API to query multiple values of density, cumulative, and quantile (instance only)</li> 
       <li>Fixed bugs on SignRank.quantile. Variable n was set incorrectly.</li> 
       <li>Fixed bugs on T.quantile(x, df, true, false) that causes NaN when df is close to 1 and x is very small</li> 
       <li>Fixed bugs on many distributions when x is close to the limit of double precision floating point</li> 
       <li>Remove false non-convergence warning messages in NonCentralT.cumulative</li> 
       <li>Fixed bugs on bd0 when np &lt; 1e-306. This will fix the behavior of many distributions when x is very small</li> 
       <li>Fixed bugs on Poisson.random that caused the routine to hang up on certain random states (Ticket <a href="https://sourceforge.net/p/jdistlib/tickets/7/">#7</a>)</li> 
       <li>Fixed bugs on LogNormal when x &lt;= 0</li> 
       <li>The precision of Gamma.cumulative is on par with R</li> 
      </ul> 
      <h4>Version 0.1.3 (Jan 2, 2014):</h4> 
      <ul> 
       <li>Fixed bugs on SignRank.cumulative. The variable n was set incorrectly.</li> 
       <li>Fixed bugs on Gamma.cumulative when the scale is +Inf.</li> 
       <li>Added some code from d-p-q-r-tests.R for unit testing.</li> 
       <li>Noted some precision loss on Gamma.cumulative</li> 
       <li>Noted some precision loss on NonCentralChiSquare</li> 
       <li>Fixed bugs on most distributions for boundary cases dealing with infinity</li> 
       <li>Converted project to Maven</li> 
      </ul> 
      <h4>Version 0.1.2 (Dec 26, 2013):</h4> 
      <ul> 
       <li>Added Rayleigh and Inverse Normal distributions</li> 
       <li>Bugfixes on Kendall distribution</li> 
       <li>Added Brent's optimization and root finding methods (for brute force quantile search)</li> 
      </ul> 
      <h4>Version 0.1.1 (Dec 20, 2013):</h4> 
      <ul> 
       <li>Order (no quantile) and Extreme (both maxima and minima) distributions for order statistics (from EVD package)</li> 
       <li>Added Box-Muller method to generate random normals</li> 
       <li>Added RandomSampler ripped from Colt. Handy for creating a permutation of list of objects.</li> 
       <li>The sources should be 100% compatible with JDK 1.5.</li> 
      </ul> 
      <h4>Version 0.1.0 (Dec 19, 2013):</h4> 
      <ul> 
       <li>Distributions are now instantiable</li> 
      </ul> 
      <h4>Version 0.0.9 (Dec 17, 2013):</h4> 
      <ul> 
       <li>Proper fix for negative binomial distribution with size=0 (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15268">PR#15268</a>)</li> 
       <li>Synced with R version 3.0.2</li> 
      </ul> 
      <h4>Version 0.0.8 (Dec 17, 2013):</h4> 
      <ul> 
       <li>Fix for <a href="https://sourceforge.net/p/jdistlib/tickets/6/">bug #6</a>. Thanks, Roland Ewald!</li> 
      </ul> 
      <h4>Version 0.0.7 (Mar 29, 2013):</h4> 
      <ul> 
       <li>Proper fix for pt / pf distribution (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15162">PR#15162</a>)</li> 
      </ul> 
      <h4>Version 0.0.6 (Jan 11, 2013):</h4> Further R synchronization fixes the following bugs / adds the following features:
      <ul> 
       <li> qgeom() could return -1 for extremely small q. (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=14967">PR#14967</a>)</li> 
       <li> lgamma(x) for very small x (in the denormalized range) is no longer Inf with a warning.</li> 
       <li> plogis(x, lower = FALSE, log.p = TRUE) no longer underflows early for large x (e.g. 800).</li> 
       <li> Imported the simplified logic for T.quantile from R</li> 
       <li> Added multivariate gamma function (MathFunctions.lmvgammafn)</li> 
       <li> Added Wishart distribution sampling (random only)</li> 
      </ul> 
      <h4>Version 0.0.5 (Jan 09, 2013):</h4> 
      <ul> 
       <li> Synchronized with R's patched of the same date. Fixes the following bugs (taken from R's change log): 
        <ul>
         <li> qt(1e-12, 1.2) no longer gives NaN.</li> 
         <li>dt(1e160, 1.2, log=TRUE) no longer gives -Inf.</li> 
         <li>beta(a, b) could overflow to infinity in its calculations when one of a and b was less than one. (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15075">PR#15075</a>)</li> 
         <li>lbeta(a, b) no longer gives NaN if a or b is very small (in the denormalized range).</li> 
        </ul></li>
      </ul> 
      <h4>Version 0.0.4 (Jan 09, 2013):</h4> 
      <ul> 
       <li> Fix for pt / pf distribution. (<a href="https://bugs.r-project.org/bugzilla3/show_bug.cgi?id=15162">PR#15162</a>)</li> 
       <li> Added Fretchet, GEV, Generalized Pareto, Gumbel, and Reverse Weibull distributions</li> 
      </ul> 
     </div> 
    </div> 
    <div class="page_collapsible" id="distr-matrix">
     <b>Distribution feature matrix</b>
     <span></span>
    </div> 
    <div class="container"> 
     <div class="content"> 
      <center> 
       <table border="1" cellspacing="0" cellpadding="0"> 
        <tbody>
         <tr>
          <th>Distribution</th>
          <th>Density</th>
          <th>Cumulative</th>
          <th>Quantile</th>
          <th>Random</th>
          <th>Source</th>
         </tr> 
         <tr>
          <td>Ansari</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>0.0.4</td>
          <td><a href="http://www.r-project.org/">Base R</a> (src/library/stats/src/ansari.c) <br>Random variate is created <br>by inversion method</td>
         </tr> 
         <tr>
          <td>Arcsine (bounded)</td>
          <td>0.3.2</td>
          <td>0.3.2</td>
          <td>0.3.2</td>
          <td>0.3.2</td>
          <td>Coded from scratch</td>
         </tr> 
         <tr>
          <td>Beta</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Beta Binomial</td>
          <td>0.3.0</td>
          <td>0.3.0</td>
          <td>0.3.0</td>
          <td>0.3.0</td>
          <td><a href="http://cran.r-project.org/web/packages/gamlss.dist/">gamlss.dist package</a></td>
         </tr> 
         <tr>
          <td>Beta Prime</td>
          <td>0.3.3</td>
          <td>0.3.3</td>
          <td>0.3.3</td>
          <td>0.3.3</td>
          <td>Coded from scratch<br>Also known as: Beta distribution<br>of the second kind</td>
         </tr> 
         <tr>
          <td>Binomial</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Cauchy</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Chi</td>
          <td>0.3.1</td>
          <td>0.3.1</td>
          <td>0.3.1</td>
          <td>0.3.1</td>
          <td>Simple transformation<br>from Gamma distribution</td>
         </tr> 
         <tr>
          <td>Chi square</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Exponential</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Extreme</td>
          <td>0.1.1</td>
          <td>0.1.1</td>
          <td>0.1.1</td>
          <td>0.1.1</td>
          <td><a href="http://cran.r-project.org/web/packages/evd/">EVD package</a></td>
         </tr> 
         <tr>
          <td>Fisher's F</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Fretchet</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td><a href="http://cran.r-project.org/web/packages/evd/">EVD package</a></td>
         </tr> 
         <tr>
          <td>Gamma</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Generalized Pareto</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td><a href="http://cran.r-project.org/web/packages/evd/">EVD package</a></td>
         </tr> 
         <tr>
          <td>Geometric</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Generalized Extreme Value (GEV)</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td><a href="http://cran.r-project.org/web/packages/evd/">EVD package</a></td>
         </tr> 
         <tr>
          <td>Gumbel</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td><a href="http://cran.r-project.org/web/packages/evd/">EVD package</a></td>
         </tr> 
         <tr>
          <td>Hypergeometric</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Inverse Gamma</td>
          <td>0.3.1</td>
          <td>0.3.1</td>
          <td>0.3.1</td>
          <td>0.3.1</td>
          <td>Simple transformation<br>from Gamma distribution</td>
         </tr> 
         <tr>
          <td>Inverse Normal</td>
          <td>0.1.2</td>
          <td>0.1.2</td>
          <td>0.1.2</td>
          <td>0.1.2</td>
          <td><a href="http://cran.r-project.org/web/packages/gamlss.dist/">gamlss.dist package</a></td>
         </tr> 
         <tr>
          <td>Kendall</td>
          <td>X</td>
          <td>X</td>
          <td>0.0.3</td>
          <td>0.0.3</td>
          <td><a href="http://www.r-project.org/">Base R</a> (src/library/stats/src/kendall.c) <br>Quantile is taken from <br><a href="http://cran.r-project.org/web/packages/SuppDists/">SuppDists package</a> <br>Random variate is created <br>by inversion method</td>
         </tr> 
         <tr>
          <td>Kumaraswamy</td>
          <td>0.3.3</td>
          <td>0.3.3</td>
          <td>0.3.3</td>
          <td>0.3.3</td>
          <td>Coded from scratch</td>
         </tr> 
         <tr>
          <td>Laplace</td>
          <td>0.3.2</td>
          <td>0.3.2</td>
          <td>0.3.2</td>
          <td>0.3.2</td>
          <td>Taken from <a href="http://cran.r-project.org/web/packages/VGAM/">VGAM</a></td>
         </tr> 
         <tr>
          <td>Levy</td>
          <td>0.4.5</td>
          <td>0.4.5</td>
          <td>0.4.5</td>
          <td>0.4.5</td>
          <td>Simple transformation from Normal distribution</td>
         </tr> 
         <tr>
          <td>Logarithm</td>
          <td>0.0.3</td>
          <td>0.0.3</td>
          <td>0.0.3</td>
          <td>0.0.3</td>
          <td><a href="http://cran.r-project.org/web/packages/gamlss.dist/">gamlss.dist package</a></td>
         </tr> 
         <tr>
          <td>Logistic</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Log normal</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Nakagami</td>
          <td>0.3.1</td>
          <td>0.3.1</td>
          <td>0.3.1</td>
          <td>0.3.1</td>
          <td>Simple transformation<br>from Gamma distribution</td>
         </tr> 
         <tr>
          <td>Negative binomial</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Noncentral beta</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Noncentral chi square</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Noncentral F</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Noncentral T</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Normal</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Order</td>
          <td>0.1.1</td>
          <td>0.1.1</td>
          <td>0.3.1</td>
          <td>0.1.1</td>
          <td><a href="http://cran.r-project.org/web/packages/evd/">EVD package</a> <br>Quantile: Numerical optimization method</td>
         </tr> 
         <tr>
          <td>Poisson</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Rayleigh</td>
          <td>0.1.2</td>
          <td>0.1.2</td>
          <td>0.1.2</td>
          <td>0.1.2</td>
          <td><a href="http://cran.r-project.org/web/packages/VGAM/">VGAM package</a></td>
         </tr> 
         <tr>
          <td>Reverse Weibull</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td>0.0.4</td>
          <td><a href="http://cran.r-project.org/web/packages/evd/">EVD package</a></td>
         </tr> 
         <tr>
          <td>Sign rank</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Spearman</td>
          <td>0.3.2</td>
          <td>X</td>
          <td>0.3.1</td>
          <td>0.3.1</td>
          <td><a href="http://cran.r-project.org/web/packages/pspearman/">pspearman package</a> <br>with fallback to base R <br>(src/library/stats/src/prho.c) <br>for n &gt; 22 <br>Density: Differential method <br>Quantile: Bisection method <br>Random: Inversion method</td>
         </tr> 
         <tr>
          <td>Student's T</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Tukey</td>
          <td>0.3.2</td>
          <td>X</td>
          <td>X</td>
          <td>0.0.3</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath) <br>Random variate is created <br>by inversion method. <br>Density: Differential method <br>This is for Studentized range only!</td>
         </tr> 
         <tr>
          <td>Uniform</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Weibull</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Wilcoxon</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td>X</td>
          <td><a href="http://www.r-project.org/">Base R</a> (nmath)</td>
         </tr> 
         <tr>
          <td>Wishart</td>
          <td bgcolor="#808080"> </td>
          <td bgcolor="#808080"> </td>
          <td bgcolor="#808080"> </td>
          <td>0.0.6</td>
          <td><a href="http://jdistlib.sourceforge.net/javadoc/jdistlib/Wishart.html">See Javadoc</a></td>
         </tr> 
         <tr>
          <td>Zipf</td>
          <td>0.3.2</td>
          <td>0.3.2</td>
          <td>0.3.2</td>
          <td>0.3.2</td>
          <td>Coded from scratch,<br>with parts taken from <a href="http://cran.r-project.org/web/packages/VGAM/">VGAM</a></td>
         </tr> 
        </tbody>
       </table> 
      </center> 
     </div>
    </div> 
    <div class="page_collapsible" id="tutorial">
     <b>Basic Tutorial of JDistlib</b>
     <span></span>
    </div> 
    <div class="container"> 
     <div class="content"> 
      <p><b><u>Design philosophy:</u></b> In this tutorial, I would assume that you already have some basic knowledge of statistics and Java programming. I tried to keep everything simple and intuitive so people could understand and use JDistlib quickly. To that end, I designed the functions to be statically called. I also recognize people's need to abstract the distributions and that is why I also allowed instantiation of each distribution class (each of which extends GenericDistribution abstract class). </p>
      <h2>1. Basic distributional features</h2> 
      <h3>1.1. Static calls</h3> 
      <p>There are four functions needed for each statistical distribution: </p>
      <ol> 
       <li><b>Density</b>, which is the probability density function (pdf) / probability mass function (pmf) for that distribution. In JDistlib, the call is represented by the function <tt>density</tt> which takes the following format:<br> <tt>density(x, parameter1, parameter2, ..., give_log)</tt><br> The <tt>x</tt> is the value you wish to find the density for. Note that the list of parameters vary by distribution. For example, Normal distribution takes two parameters, mu and sigma, and Chi-square distribution takes only one, nu. The <tt>give_log</tt> parameter is a boolean (true / false), when set to true JDistlib will output the log-transformed form of the density value, which can be useful (and usually more accurate) for very extreme tail end. Example: You want to know the pdf value of x=2 on Normal distribution with mu=2 and sigma=1:<br> <tt>System.out.println(Normal.density(2, 2, 1, false));</tt><br> This will give you the value of 0.3989423. </li> 
       <li><b>Cumulative</b>, which is the cumulative density function (cdf) / cumulative mass function (cmf) for that distribution, which is basically the integration (or summation) of the pdf / pmf. In JDistlib, the call is represented by the function <tt>cumulative</tt> which takes the following format:<br> <tt>cumulative(x, parameter1, parameter2, ..., lower_tail, give_log)</tt><br> The <tt>x</tt> is the value you wish to find the cdf/cmf for. This is the function that you would call if you want to find the p-value for a given statistics (e.g., Z score or T statistics or F statistics). Again, list of parameters vary by distibution, as above. The <tt>give_log</tt> parameter is also as above. If <tt>lower_tail</tt> is set to true, then the integration / summation is performed from -infinity (or whatever the lower bound value the distribution) to x. If <tt>lower_tail</tt> is set to false, then the integration / summation is from x to infinity (or whatever the upper bound value is). Example: You want to know the lower tail cdf value of x=2 on Normal distribution with mu=2 and sigma=1:<br> <tt>System.out.println(Normal.cumulative(2, 2, 1, true, false));</tt><br> This will give you the value of 0.5. </li> 
       <li><b>Quantile</b>, which is the inverse cdf / cmf for that distribution. This is the function you would call if you are given a p-value and would like to know the corresponding value for that distribution. For example, for standard normal distribution (i.e., normal distribution with mu=0, sigma=1), if you put in 0.975, you will get 1.95996 (i.e., the Z statistics for (1-alpha)/2, if you set alpha=0.05). In JDistlib, the call is represented by the function <tt>quantile</tt> which takes the following format:<br> <tt>quantile(p, parameter1, parameter2, ..., lower_tail, give_log)</tt><br> The <tt>p</tt> is the p-value for which you wish to find the corresponding distribution value. Again, list of parameters vary by distibution, as above. The <tt>give_log</tt> parameter indicates whether or not you give the p-value in log-transformed format or not. If <tt>lower_tail</tt> is set to true, then you would like the statistics computed from the lower tail end, or otherwise when set to false. Using the example above, here is how you do it in JDistlib:<br> <tt>System.out.println(Normal.quantile(0.975, 0, 1, true, false));</tt><br> This will give you the value of 1.95996. </li> 
       <li><b>Random</b>, which is the function to generate random numbers according to that distribution. In JDistlib, the call is represented by the function <tt>random</tt> which takes the following format:<br> <tt>random(n, parameter1, parameter2, ..., random)</tt><br> The <tt>n</tt> is the number of random numbers you want to generate. For each distribution, you can omit <tt>n</tt> if you need to generate only one. Again, list of parameters vary by distibution, as above. The parameter random is the random number generator. There are several choices for random number generators available in JDistlib, such as <a href="http://en.wikipedia.org/wiki/Mersenne_twister">Mersenne-Twister</a>, Marsaglia's <a href="http://en.wikipedia.org/wiki/Multiply-with-carry">Complementary-multiply-with-carry / CMWC</a> 4096, and <a href="https://en.wikipedia.org/wiki/Well_equidistributed_long-period_linear">WELL 44497b</a>. For example, to generate 1000 normally-distributed with mu=0 and sigma=2 is as follows:<br> <tt>double[] r = Normal.random(1000, 0, 2, new MersenneTwister());</tt> </li> 
      </ol> 
      <p>Such intuitive static calls are available for most distributions in JDistlib, except for Sign Rank and Wilcoxon distributions. Sign Rank and Wilcoxon distributions are implemented as dynamic classes since they require a storage matrix that is dependent on the supplied parameters. </p>
      <h3>1.2. Dynamic calls</h3> 
      <p>In dynamic calls, you need to instantiate the distribution class with the parameters needed. For example: To create a standard normal object, you would invoke <tt>new Normal(0,1)</tt>. JDistlib by default will also instantiate Mersenne Twister as the random number generator if you wish to generate random numbers later. Since parameters are stored with the instance, you do not need to respecify the parameters in any of the dynamic calls, which can be handy if you have a lot of calls with the same parameters. For example:<br> <code>Normal n = new Normal(0,1);<br> System.out.println(n.density(0, false));<br> System.out.println(n.cumulative(0, false, false));<br> double[] r = n.random(1000);<br> </code> </p>
      <p>In addition, dynamic calls have a few additional perks: computing hazard function, cumulative hazard function, survival function, and inverse survival functions. Survival and inverse survival functions are simply cumulative and quantile functions, but with lower_tail flag set to false. Hazard function is simply pdf / (1-cdf), and cumulative hazard function is simply -ln(1-cdf). </p>
      <h2>2. Distributional testing</h2> 
      <h3>2.1. Normality Testing</h3> 
      <p>Another major feature of JDistlib is to test your data against normal distribution, i.e., whether your data is normally distributed or not. JDistlib offers a number of tests such as: Kolmogorov-Smirnov, Anderson-Darling, Cramer-Von Mises, D'Agostino-Pearson, Jarque Bera, Kolmogorov-Lilliefors, Shapiro-Francia, and Shapiro-Wilk. These tests can be found in <tt>jdistlib.disttest.NormalityTest</tt> class. They are designed as static calls with the following format: </p>
      <p><code>NormalityTest.xxx_statistic(double[] x);<br> NormalityTest.xxx_p_value(double stat, int df); </code> </p>
      <p>The xxx refers to the test name (e.g., anderson_darling). <b>IMPORTANT:</b> The array x is usually required to be presorted. If you need a fast routine to sort arrays, please refer to <a href="http://jdistlib.sourceforge.net/javadoc/jdistlib/util/Utilities.html">jdistlib.util.Utilities.sort</a> functions. The xxx_statistic will return the value for the test statistic. The <tt>xxx_p_value</tt> returns the p-value for the given test statistic. Some tests may require a degree of freedom parameter, which is typically the length of the array x. </p>
      <p><b>Note:</b> The calling convention above will be deprecated and be replaced by <tt>xxx_test(double[] x)</tt>, as it now stands for Kolmogorov-Smirnov test. </p>
      <h3>2.2. Distribution Testing Other than Normality</h3> 
      <p>JDistlib offers a test to test whether your data came from a distribution other than Normal (e.g., Gamma or Beta). Currently, as of version 0.4.5, only Kolmogorov-Smirnov test is available in JDistlib. Other test (such as Anderson-Darling extension or Ansari-Bradley extension) may be offered in the future. This test can be found in <tt>jdistlib.disttest.DistributionTest.kolmogorov_smirnov_test(double[] X, GenericDistribution dist, TestKind kind, boolean isExact)</tt>. <b>IMPORTANT:</b> The array x must be presorted. You can plug in any instance of GenericDistribution. For example: </p>
      <p><code>double[] result = DistributionTest.kolmogorov_smirnov_test(x, new ChiSquare(10), TestKind.TWO_SIDED, true); </code> </p>
      <p>The result is an array of two elements: The first is the test statistic and the second is the p-value. </p>
      <h3>2.3. Multi-distribution Testing</h3> 
      <p>JDistlib also has a feature to compare whether the data in two arrays come from the same distribution. As of version 0.4.5, JDistlib offers Kolmogorov-Smirnov two-sample test, Ansari-Bradley test, and Kruskal-Wallis test. They can be found in <tt>jdistlib.disttest.DistributionTest</tt> class as well. The calling convention is very similar. For example: </p>
      <p><code>double[] result = DistributionTest.kolmogorov_smirnov_test(x, y, TestKind.TWO_SIDED, true); </code> </p>
      <p>With both x and y be arrays of doubles, not necessarily at the same length. <b>IMPORTANT:</b> The arrays x and y must be presorted. Like the above, the result is an array of two elements: The first is the test statistic and the second is the p-value. </p>
      <h3>2.4. Other distribution testing features</h3> 
      <p>JDistlib offers many other distributional tests. They can be found in <tt>jdistlib.disttest.DistributionTest</tt> class as well. These tests include: </p>
      <ul> 
       <li><a href="https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test">Mann-Whitney U test</a>, which is a nonparametric test to compare two sets of data.</li> 
       <li><a href="https://en.wikipedia.org/wiki/Student%27s_t-test">T-test</a>, which is a test to compare two sets of data under assumption of normality. JDistlib also provides the one sample T-test variety.</li> 
       <li>Fligner-Killeen test and <a href="https://en.wikipedia.org/wiki/Bartlett%27s_test">Bartlett's test</a> to test homogeneity of variance. <a href="https://en.wikipedia.org/wiki/Levene%27s_test">Levene's test and Brown-Forsythe tests</a> will be added in the future.</li> 
       <li><a href="https://stat.ethz.ch/R-manual/R-devel/library/stats/html/var.test.html">Variance F test</a> to compare the variance of two datasets.</li> 
       <li>Mood's tests of scale to compare whether the medians of two datasets differ by a scale (default = 1).</li> 
       <li>and many more...</li> 
      </ul> 
     </div>
    </div> 
    <div class="page_collapsible" id="impl-details">
     <b>Implementation details</b>
     <span></span>
    </div> 
    <div class="container"> 
     <div class="content"> 
      <p>These routines are implemented as static final functions for ease of use, except for Sign Rank and Wilcoxon distributions. Sign Rank and Wilcoxon distributions are implemented as dynamic classes since they require a storage matrix that is dependent on the supplied parameters. </p>
      <p>The primary change I did with the source code is I made the routines <b>thread safe</b>, especially for the RNG routine for each distribution. In R, the RNGs of several distributions require some global state variables, which hinders the implementation of thread safety. I think this is why R is not a multi-threaded program. Multi-threaded libraries in R, such as multicore, got around this by forking processes (i.e., copy the entire memory used by R for each cores). This results in a huge memory waste since multi-threaded R program will consume k times more than it ought to be, where k is the number of cores being used. I got around this by implementing some structures to afford state storage or eliminating the requirement altogether. For Beta and Gamma RNG routines, the time saved by storing the states is meager. So, I eliminated the states for these distributions. In Binomial, Hypergeometric, and Poisson distributions, I implemented the state storage as an inner class that has to be instantiated upon use. Since Sign Rank and Wilcoxon distributions are implemented as dynamic classes, storing the states is as simple as declaring the states as fields. </p>
      <p>There was an earlier attempt called <a href="http://statdistlib.sf.net/">distlib</a>, which was based on an earlier version of R. However, the library currently suffers a few shortcomings: </p>
      <ol> 
       <li> It was based on an earlier version of R. The newer distribution library has been updated to improve accuracy. Gamma distribution, in particular, has been significantly improved. Since many other key distributions use routines in the Gamma distribution, their accuracy is also markedly improved, especially in the extreme lower tail.</li> 
       <li> Distlib is buggy and cannot even compile presently.</li> 
       <li> Distlib is not thread safe due to the global states required by some RNG routines.</li> 
       <li> Distlib was a result of an automatic translation. The resulting code is very messy.</li> 
      </ol> 
      <p>This is why I decided to do the translation over. </p> 
      <p>Why not <a href="http://acs.lbl.gov/software/colt/">Colt</a>? Colt is a very fast statistical library. However, it does not contain as many statistical distribution as standard R code. I also found that Colt is less accurate at computing the probability values at the extreme tail of the distributions. Note that Colt's precision is up to 6 digits at the very extreme tail and that R's functions have been calibrated and are more accurate than Colt. See <a href="http://www.sciencedirect.com/science/article/pii/S0167947308005501">Bangalore, et al.</a> paper. Relevant quote: </p>
      <blockquote cite="http://www.sciencedirect.com/science/article/pii/S0167947308005501">
       Amongst the Java libraries for the Chi-square distribution, SSJ performs well until around x=100; because SSJ provides a direct (not calculated by complementation) upper tail CDF, this inaccuracy in more extreme tails is likely due to poor algorithm performance Pierre (2007). The JMSL, Jakarta Math, SOCR and JSci libraries perform comparatively poorly, with accuracy steadily decreasing from about x=50 and dropping to zero at x=66 and x=71. This poor performance is likely due to complementation error as none of these libraries provide a direct CDF for the upper tail area, which had to be obtained by complementation (SourceForge.net, 2007, The Apache Software Foundation, 2007, University of California, Los Angeles, 2007 and Visual Numerics, 2007). The Colt library does very well, with only minor inaccuracies across the entire range of x values; it is unclear why the accuracy is not perfect, but this may be due to an implementation bug as the choice of algorithm appears sound (COLT, 2007). The LRE curves for the GSL library and the R statistical language are not plotted because the CDF tail areas were perfectly accurate with respect to the exact values from DCDFLIB; both GSL and R provide separate functions to directly compute both tail areas and the algorithms implemented in these functions are accurate across the entire range of x values we tested (GNU Scientific Library, 2007 and R Development Core Team, 2008). 
      </blockquote> 
      <p></p> 
     </div>
    </div> 
    <div class="page_collapsible" id="known-problems">
     <b>Known problems</b>
     <span></span>
    </div> 
    <div class="container"> 
     <div class="content"> 
      <ol> 
       <li> Java does not have "long double". Hence I changed every occurrence of "long double" into "double". This happens in Hypergeometric, Noncentral beta, Noncentral chi square (and, by implication, Noncentral F), Noncentral T, and Tukey distributions. Possible ramifications: loss of precision in these distributions. See the "TODO long double" tag in each of the file. <b>Update since version 0.2.0</b>: So far, the hardest hit is Noncentral chi square (See ticket <a href="https://sourceforge.net/p/jdistlib/tickets/9/">#9</a>). Noncentral beta also suffers a bit (See ticket <a href="https://sourceforge.net/p/jdistlib/tickets/13/">#13</a>). Hypergeometric, Noncentral T, and Tukey seem to be fine. Noncentral F is most likely also affected because it depends on Noncentral chi square when df2 is huge (&gt;1e8), but no test cases so far. </li> 
       <li> R authors noted a precision problem in the quantile routine of the Hypergeometric distribution and have not fixed it. The problem is most pronounced at the very extreme tail of the distribution. I translated the file as such. So, the resulting translation will also suffer from the same problem. In addition to that, further precision loss should be expected due to the "long double" problem above.</li> 
       <li>R is by no means free of bug. Any bugs in relevant R modules will show up in JDistlib too. I put reasonable effort to monitor relevant R bugs. See <a href="http://sourceforge.net/p/jdistlib/tickets/?source=navbar">tickets</a> for details.</li> 
       <li><s>I did not translate unused RNG routines in the normal distribution. R's current standard is by inversion. I did, however, translate the Ahrens-Dieter and Kinderman-Ramage methods as an option. I did not translate the Box-Muller found in the R source code because it is not as good as the others and it requires global state storage.</s> As of version 0.1.1, all RNG routines in base R package are implemented except for those that are buggy and are provided only for compatibility purposes.</li> 
       <li><s>I did only minimal testing. So, caveat emptor.</s> As of version 0.2.0, JDistlib passed most of R's standard battery of tests for all basic (prepackaged) distributions (except for the long double-related accuracy issues above). The only tests left untranslated are three integration tests for the Noncentral Beta. I am working on it, but it is for a long term solution.</li> 
      </ol> 
     </div>
    </div> 
    <div class="page_collapsible" id="maintainer-info">
     <b>Maintainer information</b>
     <span></span>
    </div> 
    <div class="container"> 
     <div class="content"> 
      <p>This project was initiated by Roby Joehanes in February 2012. JDistlib is currently actively maintained.</p> 
     </div>
    </div> 
   </div> 
  </div> 
 </body>
</html>