<html xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:w="urn:schemas-microsoft-com:office:word" xmlns="http://www.w3.org/TR/REC-html40">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252"> 
  <meta name="ProgId" content="Word.Document"> 
  <meta name="Generator" content="Microsoft Word 10"> 
  <meta name="Originator" content="Microsoft Word 10"> 
  <link rel="File-List" href="JavaIO_files/filelist.xml"> 
  <link rel="Edit-Time-Data" href="JavaIO_files/editdata.mso"> 
  <!--[if !mso]>
<style>
v\:* {behavior:url(#default#VML);}
o\:* {behavior:url(#default#VML);}
w\:* {behavior:url(#default#VML);}
.shape {behavior:url(#default#VML);}
</style>
<![endif]--> 
  <title>Java Input and Output (I/O)</title> 
  <!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>DePaul University</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>DePaul University</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>7</o:TotalTime>
  <o:Created>2005-04-05T18:07:00Z</o:Created>
  <o:LastSaved>2005-04-05T18:07:00Z</o:LastSaved>
  <o:Pages>1</o:Pages>
  <o:Words>3799</o:Words>
  <o:Characters>21658</o:Characters>
  <o:Company>DePaul University</o:Company>
  <o:Lines>180</o:Lines>
  <o:Paragraphs>50</o:Paragraphs>
  <o:CharactersWithSpaces>25407</o:CharactersWithSpaces>
  <o:Version>10.6714</o:Version>
 </o:DocumentProperties>
</xml><![endif]-->
  <!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:Compatibility>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:WrapTextWithPunct/>
   <w:UseAsianBreakRules/>
  </w:Compatibility>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--> 
  <style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;
	mso-font-charset:2;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:0 268435456 0 0 -2147483648 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
h1
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	mso-outline-level:1;
	font-size:24.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	font-weight:bold;
	font-style:italic;}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:13.0pt;
	font-family:Arial;
	font-weight:bold;}
h4
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:4;
	font-size:14.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
p
	{mso-margin-top-alt:auto;
	margin-right:0in;
	mso-margin-bottom-alt:auto;
	margin-left:0in;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"Times New Roman";}
code
	{font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";
	font-weight:bold;}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	tab-stops:45.8pt 91.6pt 137.4pt 183.2pt 229.0pt 274.8pt 320.6pt 366.4pt 412.2pt 458.0pt 503.8pt 549.6pt 595.4pt 641.2pt 687.0pt 732.8pt;
	font-size:10.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";}
span.methodname1
	{mso-style-name:methodname1;
	font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";
	font-weight:bold;
	font-style:italic;}
span.classname1
	{mso-style-name:classname1;
	font-family:"Courier New";
	mso-ascii-font-family:"Courier New";
	mso-hansi-font-family:"Courier New";
	mso-bidi-font-family:"Courier New";
	font-weight:bold;}
span.term1
	{mso-style-name:term1;
	font-style:italic;}
span.new1
	{mso-style-name:new1;
	color:blue;
	font-weight:bold;}
span.notice1
	{mso-style-name:notice1;
	color:blue;
	font-weight:bold;
	font-style:italic;}
span.800000
	{mso-style-name:"\#800000";}
span.method
	{mso-style-name:method;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
 /* List Definitions */
 @list l0
	{mso-list-id:394092093;
	mso-list-template-ids:515429850;}
@list l0:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l1
	{mso-list-id:724180191;
	mso-list-template-ids:2053907280;}
@list l1:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l2
	{mso-list-id:1359283786;
	mso-list-template-ids:-455547574;}
@list l3
	{mso-list-id:1462574891;
	mso-list-template-ids:-1159289618;}
@list l3:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l4
	{mso-list-id:1565488904;
	mso-list-template-ids:1688111462;}
@list l4:level1
	{mso-level-number-format:bullet;
	mso-level-text:\F0B7;
	mso-level-tab-stop:.5in;
	mso-level-number-position:left;
	text-indent:-.25in;
	mso-ansi-font-size:10.0pt;
	font-family:Symbol;}
@list l5
	{mso-list-id:2051951028;
	mso-list-template-ids:1634079838;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style> 
  <!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";}
</style>
<![endif]--> 
 </head> 
 <body lang="EN-US" link="blue" vlink="purple" style="tab-interval:.5in"> 
  <div class="Section1"> 
   <h1 align="center" style="text-align:center">Java Input and Output (I/O)</h1> 
   <h1 align="center" style="text-align:center">
    <o:p>
     &nbsp;
    </o:p></h1> 
   <h2>Console Input</h2> 
   <p>The console window is the [black] window that is automatically launched when you run a program from within CodeWarrior.&nbsp; Console input is any input that is entered in the console window instead of typing it into a field or dialog box that pops up in a window.&nbsp; For example, when the <span class="SpellE"><span class="methodname1">readLine</span></span> method is called, the program waits for the user to enter information.&nbsp; <span class="GramE">Whatever the user types is returned to the program in the form of a <span class="classname1">String</span> object.</span></p> 
   <p>There are many ways to get information from the user.&nbsp; In many cases, the user must be told that they should enter some information.&nbsp; This is known as <span class="term1">prompting the user</span>.&nbsp; A user prompt is a line of text that is output to the user that explains what information they should input next.&nbsp; We can prompt the user by displaying information in a dialog box, a program frame or even the console window.&nbsp; All programs that require the user to input information while the program is <span class="GramE">running,</span> must prompt the user for that information in some manner.</p> 
   <p>When a program is waiting for input at the console, there is sometimes a blinking cursor in the console window indicating that the user should type some information. But, this is not always the case.&nbsp; The user will only know what information to type, if the program describes that information in the form of a user prompt.&nbsp; (See <a href="http://www.cs.wisc.edu/~cs302/io/JavaIO.html#consoleOUT#consoleOUT">Console Output</a> for more information on user prompts.)</p> 
   <p>The <span class="GramE">use of several of the Java I/O classes are</span> required to successfully receive input that is typed by the user.&nbsp; The <span class="SpellE"><code><span style="font-size:10.0pt">java.io</span></code></span> package contains most, if not all, of the classes you will need to use.&nbsp; Don't <span class="GramE">worry,</span> you won't need to use all 50+ classes.&nbsp; But, you will need to learn about and use at least three of them.&nbsp; All three classes are in the <span class="SpellE"><code><span style="font-size:10.0pt">java.io</span></code></span> package.&nbsp; Either use the fully qualified name shown or import the <span class="SpellE"><code><span style="font-size:10.0pt">java.io</span></code></span> package.</p> 
   <ul type="disc"> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list .5in"><a href="http://www.java.sun.com/j2se/1.3/docs/api/java/io/InputStream.html"><span class="SpellE"><span class="classname1"><span style="color:windowtext">java.io.InputStream</span></span></span></a> - stores information about the connection between an input device and the computer or program.</li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list .5in"><a href="http://www.java.sun.com/j2se/1.3/docs/api/java/io/InputStreamReader.html"><span class="SpellE"><span class="classname1"><span style="color:windowtext">java.io.InputStreamReader</span></span></span></a> - used to translate data bytes received from <span class="SpellE"><span class="classname1">InputStream</span></span> objects into a stream of<span class="GramE">&nbsp; characters</span>.</li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l0 level1 lfo1;tab-stops:list .5in"><a href="http://www.java.sun.com/j2se/1.3/docs/api/java/io/BufferedReader.html"><span class="SpellE"><span class="classname1"><span style="color:windowtext">java.io.BufferedReader</span></span></span></a> - used to buffer (store) the input received from <span class="GramE">a</span> <span class="SpellE"><span class="classname1">InputStreamReader</span></span> object.&nbsp; This is done to improve the efficiency.&nbsp; Input devices are much slower than the computer's processor and buffering the data reduces the number of times the CPU has to interact with the device itself. </li> 
   </ul> 
   <p>None of these classes has a method as convenient and as error proof as you may wish.&nbsp; However, the <span class="SpellE"><span class="classname1">BufferedReader</span></span> class does have a method called <span class="SpellE"><span class="methodname1">readLine</span></span> that does return a line of text as typed by the user.&nbsp; There are two available constructors for creating a <span class="SpellE"><span class="classname1">BufferedReader</span></span> object.&nbsp; For console input, we will use the one that requires only one argument, an instance of a <span class="classname1">Reader</span> object.&nbsp; That means we need to create an instance of the class <span class="SpellE"><span class="classname1">java.io.Reader</span></span>.</p> 
   <p>The <span class="SpellE"><span class="classname1">InputStreamReader</span></span> class <span class="term1">extends</span> the <span class="classname1">Reader</span> class.&nbsp; Here's an analogy to explain <span class="term1">extends</span>:&nbsp; All Robins are Birds, but not all Birds are Robins.&nbsp; Therefore, Robin extends Bird.&nbsp; If someone needs a Bird, then a Robin can be used.&nbsp; This means that any instance of the <span class="SpellE"><span class="classname1">InputStreamReader</span></span> class can be used whenever an instance of the <span class="classname1">Reader</span> class is required.&nbsp; The <a href="http://java.sun.com/j2se/1.3/docs/api/java/io/InputStreamReader.html">inheritance hierarchy of the <span class="SpellE"><span class="classname1"><span style="color:windowtext">InputStreamReader</span></span></span> class</a> shows that it <span class="term1">extends</span> the <span class="classname1">Reader</span> class because the <span class="classname1">Reader</span> class is higher in the hierarchy tree.</p> 
   <p>We will create an instance of the <span class="SpellE"><span class="classname1">InputStreamReader</span></span> class to be used to create the <span class="SpellE"><span class="classname1">BufferedReader</span></span> object that we want.&nbsp; We choose to create an <span class="SpellE"><span class="classname1">InputStreamReader</span></span> instead of a <span class="classname1">Reader</span> object because we want to get input from an <span class="SpellE"><span class="classname1">InputStream</span></span>.&nbsp; Later, you will see that File I/O will require the use of a different type of <span class="classname1">Reader</span> object.</p> 
   <p>What do we need to have in order to create an instance of the <span class="SpellE"><span class="classname1">InputStreamReader</span></span> class?&nbsp; According to the Java API, we will need an <span class="SpellE"><span class="classname1">InputStream</span></span> object.&nbsp; Oh, now I see why we needed all three classes!&nbsp; Luckily, part of our work is done for us.&nbsp; The <span class="classname1">System</span> class in the <span class="SpellE"><code><span style="font-size:10.0pt">java.lang</span></code></span> package automatically creates an <span class="SpellE"><span class="classname1">InputStream</span></span> object that is connected to the keyboard.&nbsp; It is called <span class="SpellE"><code><span style="font-size:10.0pt">System.in</span></code></span> and is part of the <span class="SpellE"><code><span style="font-size:10.0pt">java.lang</span></code></span> package.</p> 
   <p>We will use the <span class="SpellE"><code><span style="font-size:10.0pt">System.in</span></code></span> object to create an instance of the <span class="SpellE"><span class="classname1">InputStreamReader</span></span> class and then use that object to create an instance of the <span class="SpellE"><span class="classname1">BufferedReader</span></span> class.</p> 
   <h3>Steps for console based user input:</h3> 
   <ol start="1" type="1"> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo2;tab-stops:list .5in">Use the <span class="SpellE"><code><span style="font-size:10.0pt">System.in</span></code></span> object to create an <span class="SpellE"><span class="classname1">InputStreamReader</span></span> object. </li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo2;tab-stops:list .5in">Use the <span class="SpellE"><span class="classname1">InputStreamReader</span></span> object to create a <span class="SpellE"><span class="classname1">BufferedReader</span></span> object. </li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo2;tab-stops:list .5in">Display a prompt to the user for the desired data. </li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo2;tab-stops:list .5in">Use the <span class="SpellE"><span class="classname1">BufferedReader</span></span> object to read a line of text from the user. </li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l2 level1 lfo2;tab-stops:list .5in">Do something interesting with the input received from the user. </li> 
   </ol> 
   <h4>Would you like to see some code?&nbsp; I thought so.&nbsp; Here it is:</h4> 
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>// 1. Create an <span class="SpellE">InputStreamReader</span> using the standard input stream.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="new1">InputStreamReader</span></span><span class="new1"> <span class="SpellE">isr</span> = new <span class="SpellE"><span class="GramE">InputStreamReader</span></span><span class="GramE">(</span> <span class="SpellE">System.in</span> );</span></pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>// 2. Create a <span class="SpellE">BufferedReader</span> using the <span class="SpellE">InputStreamReader</span> created.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="new1">BufferedReader</span></span><span class="new1"> <span class="SpellE">stdin</span> = new <span class="SpellE"><span class="GramE">BufferedReader</span></span><span class="GramE">(</span> <span class="SpellE">isr</span> );</span></pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>// 3. Don't forget to prompt the user</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">System.out.print</span></span></span><span class="GramE"><span class="new1">(</span></span><span class="new1"> "Type some data for the program: " );</span></pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>// 4. Use the <span class="SpellE">BufferedReader</span> to read a line of text from the user.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="new1">String input = <span class="SpellE"><span class="GramE">stdin.readLine</span></span><span class="GramE">(</span>);</span></pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>// 5. Now, you can do anything with the input string that you need to.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>// Like, output it to the user.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">System.out.println</span></span></span><span class="GramE"><span class="new1">(</span></span><span class="new1"> "input = " + input );</span></pre> 
   <h4>That's a lot of code for one line of input.&nbsp; Is there a shorter way?</h4> 
   <p>Yes, most Java programmers combine steps 1 &amp; 2 and create only one instance of the <span class="SpellE"><span class="classname1">BufferedReader</span></span> for use throughout their entire program.&nbsp; All keyboard operations will use that single shared <span class="SpellE"><span class="classname1">BufferedReader</span></span> object.&nbsp; The code below is placed with other class data members and is not inside any method.</p> 
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>// 1&amp;2. Create a single shared <span class="SpellE">BufferedReader</span> for keyboard input.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="GramE"><span class="new1">private</span></span><span class="new1"> static <span class="SpellE">BufferedReader</span> <span class="SpellE">stdin</span> = new <span class="SpellE">BufferedReader</span>( 
     <o:p></o:p></span></pre>
   <pre><span class="new1"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="GramE">new</span> <span class="SpellE">InputStreamReader</span>( <span class="SpellE">System.in</span> ) );</span></pre> 
   <h3>I added the above code to my program and I get compiler errors!</h3> 
   <p>Did you remember to import the <span class="SpellE"><code><span style="font-size:10.0pt">java.io</span></code></span> classes?&nbsp; The <span class="SpellE"><span class="classname1">BufferedReader</span></span> (and other I/O classes) are not in the standard <span class="SpellE"><code><span style="font-size:10.0pt">java.lang</span></code></span> package.&nbsp; You must import the <span class="SpellE"><code><span style="font-size:10.0pt">java.io</span></code></span> package to declare and create instances of any of the Java I/O classes.&nbsp;&nbsp; Add the <code><span style="font-size:10.0pt">import <span class="SpellE">java.io</span>.*;</span></code> statement to your list of other import statements.</p> 
   <p>You will also have to inform the compiler that you are calling a method that may cause a <code><span style="font-size:10.0pt"><a href="http://www.cs.wisc.edu/~cs302/io/Exceptions.html#checked">checked exception</a></span></code> to occur.&nbsp; Add the phrase <span class="term1">throws <span class="SpellE">IOException</span></span> clause to the header of any method that calls <span class="SpellE"><span class="GramE"><code><span style="font-size:
10.0pt">stdin.readLine</span></code></span></span><span class="GramE"><code><span style="font-size:10.0pt">(</span></code></span><code><span style="font-size:
10.0pt">)</span></code>.&nbsp; You will also need to add this clause to any method that calls your method that calls <span class="SpellE"><span class="methodname1">readLine</span></span>.&nbsp; Here's a complete program example that prompts the user for input and then repeats that data to the console window:</p> 
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="GramE"><span class="new1">import</span></span><span class="new1"> <span class="SpellE">java.io</span>.*;</span><span style="mso-spacerun:yes">&nbsp; </span>// needed for <span class="SpellE">BufferedReader</span>, <span class="SpellE">InputStreamReader</span>, etc.</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>/** A Java program that demonstrates console based input and output. */</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="GramE">public</span> class <span class="SpellE">MyConsoleIO</span> </pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;</span>{</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// <span class="GramE">Create</span> a single shared <span class="SpellE">BufferedReader</span> for keyboard input</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE"><span class="new1">private</span></span><span class="new1"> static <span class="SpellE">BufferedReader</span> <span class="SpellE">stdin</span> = 
     <o:p></o:p></span></pre>
   <pre><span class="new1"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="GramE">new</span> <span class="SpellE">BufferedReader</span>( new <span class="SpellE">InputStreamReader</span>( <span class="SpellE">System.in</span> ) );</span></pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Program execution starts here</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE">public</span> static void main ( String [] <span class="SpellE">args</span> ) <span class="new1">throws <span class="SpellE">IOException</span></span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Prompt the user</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">System.out.print</span></span><span class="GramE">(</span> "Type some data for the program: " );</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Read a line of text from the user.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>String input = <span class="SpellE"><span class="GramE"><span class="new1">stdin.readLine</span></span></span><span class="GramE"><span class="new1">(</span></span><span class="new1">)</span>;</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Display the input back to the user.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">System.out.println</span></span><span class="GramE">(</span> "input = " + input );</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>} // end main method</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>} // end <span class="SpellE">MyConsoleIO</span> class</pre> 
   <h3><a name="intIN"></a>Integer input</h3> 
   <p>Getting data from the user isn't so hard after all.&nbsp; But, it does require some additional work.&nbsp; There is even more work to do, if you want to get an integer (or other numeric value) from the user.&nbsp; If the user types in "123", that will be still be returned as a <span class="classname1">String</span> object by the <span class="SpellE"><span class="methodname1">readLine</span></span> method of <span class="SpellE"><span class="classname1">BufferedReader</span></span>.&nbsp; You will need to <span class="term1">parse</span> [convert] the <span class="classname1">String</span> object into an <span class="SpellE"><code><span style="font-size:10.0pt">int</span></code></span> value if you wish to store it in an <span class="SpellE"><code><span style="font-size:10.0pt">int</span></code></span> variable or data member.&nbsp; Here's how:</p> 
   <ol start="1" type="1"> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;margin-bottom:12.0pt;
     mso-list:l5 level1 lfo3;tab-stops:list .5in">Get a <span class="classname1">String</span> of characters that is in an integer format, <span class="SpellE">eg</span>.&nbsp; "123".<br> <span class="new1"><span style="font-size:10.0pt;font-family:&quot;Courier New&quot;">String input = <span class="SpellE"><span class="GramE">stdin.readLine</span></span><span class="GramE">(</span>);&nbsp; // from console input example above.</span></span></li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l5 level1 lfo3;tab-stops:list .5in">Use the <span class="classname1">Integer</span> class to parse the string of characters into an integer.&nbsp;<br> <span class="SpellE"><span class="GramE"><span class="new1"><span style="font-size:10.0pt;font-family:&quot;Courier New&quot;">int</span></span></span></span><span class="new1"><span style="font-size:10.0pt;font-family:&quot;Courier New&quot;"> number = <span class="SpellE">Integer.parseInt</span>( input );&nbsp; // converts a String into an <span class="SpellE">int</span> value</span></span><b><span style="font-size:10.0pt;font-family:&quot;Courier New&quot;"><br> <br> <br> </span></b><cite>The </cite><span class="classname1"><i>Integer</i></span><cite> class contains conversion methods for changing String data into <span class="SpellE">int</span> values and vice versa.&nbsp; The Integer class is one of several </cite><span class="term1">wrapper</span><cite> classes that are defined in the standard Java API.&nbsp; Wrapper classes have class methods for parsing and are also used when you need to store a primitive value as an object.&nbsp; </cite><i><br> <br> </i>In our case, we needed to convert a <span class="classname1">String</span> object into an <span class="SpellE"><code><span style="font-size:10.0pt">int</span></code></span> value.&nbsp; The <span class="SpellE"><span class="methodname1">parseInt</span></span> method of the <span class="classname1">Integer</span> class performs this action.&nbsp; What if the user types letters instead of digits?</li> 
   </ol> 
   <p>The <span class="SpellE"><span class="methodname1">parseInt</span></span> method declares that it may throw a <span class="SpellE"><span class="classname1">NumberFormatException</span></span>.&nbsp; If the user types any string of characters that can't be parsed into an <span class="SpellE"><code><span style="font-size:10.0pt">int</span></code></span> value, a <span class="SpellE"><span class="classname1">NumberFormatException</span></span> will be thrown and the program will crash.&nbsp; That can't be a good thing!&nbsp; But, there is something that you as the programmer can do to keep your program from crashing.&nbsp; You can <span class="term1">catch</span> the <span class="SpellE"><span class="classname1">NumberFormatException</span></span>.&nbsp; </p> 
   <h2><a name="consoleOUT"></a>Console Output</h2> 
   <p>We have used <span class="SpellE"><span class="GramE"><code><span style="font-size:10.0pt">System.out.print</span></code></span></span><span class="GramE"><code><span style="font-size:10.0pt">(</span></code></span><code><span style="font-size:10.0pt">...)</span></code> and <span class="SpellE"><code><span style="font-size:10.0pt">System.out.println</span></code></span><code><span style="font-size:10.0pt">(...)</span></code> statements for displaying simple text messages to the user.&nbsp; This is an important output alternative, since graphic user interface (GUI) objects are not readily available in some programming environments.&nbsp; You may of course write your own GUI classes if they're not available, but that is beyond the scope of this course.&nbsp; It is much more likely that you will simply use the available output options of the programming environment that you are working in.&nbsp;</p> 
   <p>Most programming languages have the ability to display a string of characters to the screen or some other standard display device.&nbsp; We call this console output because the string of characters appears in a console window.&nbsp; The <span class="SpellE"><code><span style="font-size:10.0pt">System.out</span></code></span> object is an instance of the <span class="SpellE"><code><span style="font-size:
10.0pt">PrintStream</span></code></span> class, which is a type of <code><span style="font-size:10.0pt">Stream</span></code>.</p> 
   <h3><a name="streams"></a>Streams</h3> 
   <p>A <code><span style="font-size:10.0pt">Stream</span></code> object is used to store information needed to connect a computer program to an input or output device.&nbsp; Just like there is a <code><span style="font-size:10.0pt">Reader</span></code> object that adds functionality to input streams, there is a <code><span style="font-size:10.0pt">Printer</span></code> object that adds functionality to output streams.&nbsp; The <span class="SpellE"><code><span style="font-size:
10.0pt">PrintStream</span></code></span> class <span class="term1">extends</span> the <span class="classname1">Printer</span> class and contains definitions for all of the versions of the <span class="methodname1">print</span> and <span class="SpellE"><span class="methodname1">println</span></span> methods that we use to display information like user prompts or results of calculations, etc.</p> 
   <p>Console output in Java is very easy because the <span class="methodname1">print</span> and <span class="SpellE"><span class="methodname1">println</span></span> methods will work with any type of data.&nbsp;&nbsp; There is a separate version of each of these methods in the <span class="SpellE"><span class="classname1">PrintStream</span></span> class so that this is possible.&nbsp; There is also a version of the <span class="methodname1">print</span> and <span class="SpellE"><span class="methodname1">println</span></span> methods that will print information for any object.&nbsp; But, how did we get a <span class="SpellE"><span class="classname1">PrintStream</span></span> object in the first place?</p> 
   <p>The <span class="SpellE"><span class="classname1">java.lang.System</span></span> class creates three different I/O streams automatically for us when our application begins execution.&nbsp; Each of these streams is public and static so that we can access them directly without having to create an instance of the <span class="classname1">System</span> class.&nbsp; We have already used the <span class="SpellE"><span class="classname1">InputStream</span></span> object named <span class="SpellE"><code><span style="font-size:10.0pt">System.in</span></code></span> in the discussion on console input.&nbsp; The other two stream objects are named <span class="SpellE"><code><span style="font-size:10.0pt">System.out</span></code></span> and <span class="SpellE"><code><span style="font-size:10.0pt">System.err</span></code></span><code><span style="font-size:10.0pt">.</span></code>&nbsp; Each of these objects is an instance of the <span class="SpellE"><span class="classname1">PrintStream</span></span> class and is available for use in displaying information to the computer screen.</p> 
   <p>For example, if the following variables are defined,</p> 
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">int</span></span> x = 3;</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="GramE">double</span> rate = 5.5;</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">boolean</span></span> playing = true;</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>String phrase = "The winner is ";</pre> 
   <p><span class="GramE">they</span> can all be printed using <span class="methodname1">print</span> or <span class="SpellE"><span class="methodname1">println</span></span> as follows:</p> 
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">System.out.print</span></span></span><span class="GramE"><span class="new1">(</span></span> "x = " + x + " rate = " <span class="new1">)</span>;</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">System.out.println</span></span></span><span class="GramE"><span class="new1">(</span></span> rate <span class="new1">)</span>;</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">System.out.println</span></span></span><span class="GramE"><span class="new1">(</span></span> "playing = " + playing <span class="new1">)</span>;</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">System.out.println</span></span></span><span class="GramE"><span class="new1">(</span></span> phrase + "Deb" <span class="new1">)</span>;</pre> 
   <p>We can also print other types of data, including other objects, using the <span class="methodname1">print</span> and <span class="SpellE"><span class="methodname1">println</span></span> methods.&nbsp; The following code fragment shows the command syntax for printing a <span class="classname1">Wanderer</span> object. The class name <span class="classname1">Wanderer</span> is used as an example. You can replace <span class="classname1">Wanderer</span> with any class name that is defined in your program.</p> 
   <p><code><span style="font-size:10.0pt">&nbsp;&nbsp;&nbsp; </span></code><code><span lang="DE" style="font-size:10.0pt;mso-ansi-language:DE">Wanderer </span></code><span class="notice1"><span lang="DE" style="font-size:10.0pt;font-family:&quot;Courier New&quot;;
mso-ansi-language:DE">wanderer1</span></span><code><span lang="DE" style="font-size:10.0pt;mso-ansi-language:DE"> = new Wanderer( "Wilma", Color.orange );</span></code><b><span lang="DE" style="font-size:10.0pt;font-family:&quot;Courier New&quot;;mso-ansi-language:DE"><br> <code>&nbsp;&nbsp;&nbsp; </code><span class="new1">System.out.println( </span><span class="800000">wanderer1</span><span class="new1"> );</span></span></b><span lang="DE" style="mso-ansi-language:DE">
     <o:p></o:p></span></p> 
   <p>In this case, the program prints out some cryptic information about the <span class="classname1">Wanderer</span> object.&nbsp; It is the class name, <span class="GramE">an</span> <code><span style="font-size:10.0pt">@</span></code> symbol and the <span class="SpellE">hexidecimal</span> representation of the <span class="SpellE">hashcode</span>.&nbsp; The output looks like the following for the first Wanderer object I created.</p> 
   <p><code><span style="font-size:10.0pt">&nbsp;&nbsp;&nbsp; Wanderer@13fac</span></code></p> 
   <p>Each object created has its own <span class="SpellE">hashcode</span> that can be used to distinguish it from other objects.&nbsp; However, <span class="SpellE">hashcodes</span> are not very readable for most users, so there is a way for the programmer to redefine what information is printed.&nbsp; The information that is displayed when an object is printed using the <span class="method">print</span> method is defined by an instance method named <span class="SpellE"><span class="methodname1">toString</span></span>.&nbsp; Every class has a version of the <span class="SpellE"><span class="methodname1">toString</span></span> method already defined that returns the information as described above.&nbsp; All classes inherit this method from the <span class="SpellE"><code><span style="font-size:10.0pt">java.lang.Object</span></code></span> class.</p> 
   <p>To redefine the <span class="SpellE"><span class="methodname1">toString</span></span> method, you <span class="term1">override</span> the default version by defining a method with the same visibility and <span class="term1">method signature</span> as the inherited version of the method.&nbsp; The <span class="SpellE"><span class="methodname1">toString</span></span> method of my <span class="classname1">Wanderer</span> class can be <span class="term1">overridden</span> as follows:</p> 
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>/**</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE">*<span style="mso-spacerun:yes">&nbsp; </span>Returns</span> a string representing this</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE">*<span style="mso-spacerun:yes">&nbsp; </span>instance</span> of the Wanderer class.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp; </span>*/</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="GramE"><span class="new1">public</span></span><span class="new1"> String <span class="SpellE">toString</span>()
     <o:p></o:p></span></pre>
   <pre><span class="new1"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>{</span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>String <span class="SpellE">coords</span> = "(" + <span class="SpellE"><span class="GramE">myLoc.getX</span></span><span class="GramE">(</span>) + ","</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>+ <span class="SpellE"><span class="GramE">myLoc.getY</span></span><span class="GramE">(</span>) + ")";</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE"><span class="new1">return</span></span><span class="new1"> <span class="SpellE">myName</span> + " is at " + <span class="SpellE">coords</span>;</span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="new1">}</span></pre> 
   <p>Now, when the <span class="methodname1">print</span> or <span class="SpellE"><span class="methodname1">println</span></span> method is used to print a <span class="classname1">Wanderer</span> object, the new version of the <span class="SpellE"><span class="methodname1">toString</span></span> method will be called instead of the version defined in the <span class="classname1">Object</span> class.&nbsp; The <span class="classname1">String</span> that is printed by the <span class="SpellE"><span class="methodname1">println</span></span> method will look something like this:</p> 
   <p><code><span style="font-size:10.0pt">&nbsp;&nbsp;&nbsp; Wilma is at (11<span class="GramE">,3</span>)</span></code></p> 
   <p>Each class can and should override the <span class="SpellE"><span class="methodname1">toString</span></span> method to return a <span class="classname1">String</span> of characters that is more descriptive of the object than the default version provided by the <span class="classname1">Object</span> class.&nbsp; This method can be called by any method that needs a <span class="classname1">String</span> that describes the object.</p> 
   <p>The <span class="methodname1">print</span> or <span class="SpellE"><span class="methodname1">println</span></span> methods of the <span class="SpellE"><span class="classname1">PrintStream</span></span> class should be adequate to produce most screen output.&nbsp; The only other type of output we will cover in this course is <a href="http://www.cs.wisc.edu/~cs302/io/JavaIO.html#fileOUT#fileOUT">file output</a>.&nbsp; Other output devices require more specialized output objects and won't be covered in this course.</p> 
   <h2><a name="fileIN"></a>File Input</h2> 
   <p>As mentioned above, data can be <span class="term1">read</span> from a variety of different sources, including data files stored on devices such as hard disk drives and floppy drives.&nbsp; The file will need to be opened and a <span class="SpellE"><span class="classname1">BufferedReader</span></span> will be <span class="term1">attached</span> to the file object.&nbsp; The process is actually very similar to the console input example above.&nbsp; The difference is that the <span class="SpellE"><span class="classname1">BufferedReader</span></span> will be created from a <span class="SpellE"><span class="classname1">FileReader</span></span> object instead of an <span class="SpellE"><span class="classname1">InputStreamReader</span></span> object.&nbsp; Your textbook describes file input when the file stores individual bytes. &nbsp;This section focuses on inputting characters rather than data bytes.</p> 
   <p>The discussion and examples in this document explain the procedure when the file to be read is a text file that has valid ASCII characters to represent the data.&nbsp; Here are two new Java I/O classes to review:</p> 
   <ul type="disc"> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l4 level1 lfo4;tab-stops:list .5in"><a href="http://www.java.sun.com/j2se/1.5/docs/api/java/io/File.html"><span class="SpellE"><code><span style="font-size:10.0pt">java.io.File</span></code></span></a> - stores information about a file on a computer drive.</li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l4 level1 lfo4;tab-stops:list .5in"><code><u><span style="font-size:10.0pt;color:blue"><a href="http://www.java.sun.com/j2se/1.5/docs/api/java/io/FileReader.html"><span class="SpellE"><span style="font-weight:normal">java.io.FileReader</span></span></a></span></u></code> - used to translate data bytes from <code><span style="font-size:10.0pt">File</span></code> objects into a stream of characters. </li> 
   </ul> 
   <p>Here's a code fragment to illustrate reading a text file.&nbsp; The <span class="SpellE"><span class="methodname1">readLine</span></span> method may cause an <span class="SpellE"><span class="classname1">IOException</span></span> which is a checked exception, so be sure to <span class="term1">catch</span> the exception or add the <span class="term1">throws <span class="SpellE">IOException</span></span> clause to the method header</p> 
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">System.out.print</span></span><span class="GramE">(</span> "Enter the filename: " );<span style="mso-spacerun:yes">&nbsp;&nbsp; </span>// Prompt the user for a file name</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>String <span class="SpellE">fileName</span> = <span class="SpellE"><span class="GramE">stdin.readLine</span></span><span class="GramE">(</span>);<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// get a file name from the user</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">java.io.File</span></span></span><span class="new1"> file = new <span class="SpellE">java.io.new</span> File( <span class="SpellE">fileName</span> ); // create a File object</span></pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span class="GramE">if</span> ( <span class="SpellE"><span class="new1">file.exists</span></span><span class="new1">()</span> )<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// check that the file exists</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>{<span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// before trying to create a</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// <span class="SpellE">BufferedReader</span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// <span class="GramE">Create</span> a <span class="SpellE">BufferedReader</span> from the file</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">java.io.BufferedReader</span></span></span><span class="new1"> <span class="SpellE">inFile</span> = new <span class="SpellE">java.io.BufferedReader</span>(
     <o:p></o:p></span></pre>
   <pre><span class="new1"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE">new</span> <span class="SpellE">java.io.FileReader</span>( file ) );</span></pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// <span class="GramE">For</span> each line in the file, read in the line and display it with the line number</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">int</span></span> <span class="SpellE">lineNum</span> = 0;</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Compare the results of calling the <span class="SpellE">readLine</span> method to null</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// to determine if you are at the end of the file.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="new1">String line = <span class="SpellE"><span class="GramE">inFile.readLine</span></span><span class="GramE">(</span>);
     <o:p></o:p></span></pre>
   <pre><span class="new1"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE">while</span> ( line != null )
     <o:p></o:p></span></pre>
   <pre><span class="new1"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:yes">&nbsp;</span><span class="SpellE"><span class="GramE">System.out.println</span></span><span class="GramE">(</span> ++<span class="SpellE">lineNum</span> + ": " + line );</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="new1"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="GramE">line</span> = <span class="SpellE">inFile.readLine</span>();
     <o:p></o:p></span></pre>
   <pre><span class="new1"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</span></pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Close the buffered reader input stream attached to the file</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">inFile.close</span></span></span><span class="GramE"><span class="new1">(</span></span><span class="new1">);</span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span>}</pre> 
   <h4>File Input Hints</h4> 
   <ul type="disc"> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in">Don't forget to <code><span style="font-size:10.0pt">import <span class="SpellE">java.io</span>.*</span></code> classes. </li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in">Add the <span class="term1">throws <span class="SpellE">IOException</span></span> clause to any method that calls the <span class="SpellE"><span class="methodname1">readLine</span></span> method of a <span class="SpellE"><span class="classname1">BufferedReader</span></span> object.&nbsp; </li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in">Do not assume that the <span class="SpellE"><span class="methodname1">readLine</span></span> will return valid data.&nbsp; You should test the return value of calling the <span class="SpellE"><span class="methodname1">readLine</span></span> method against <code><span style="font-size:10.0pt">null</span></code> before trying to use that data.&nbsp; </li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l3 level1 lfo5;tab-stops:list .5in">Close the <span class="SpellE"><span class="classname1">BufferedReader</span></span> object when you're done reading data from the file. </li> 
   </ul> 
   <h3><a name="tokenizer"></a>String <span class="SpellE">Tokenizer</span></h3> 
   <p>When you are reading data into your program from a text file, you may need to interpret certain parts of each line differently.&nbsp; This is especially true if you need your program to create objects from text data contained in a file.&nbsp; Individual data items can be placed on different lines of the input data file, but this creates very long files.&nbsp; It is much more common to place all of the data items for one object on the same line and separate each item with some special character, called a <span class="term1">delimiter</span>.&nbsp; In this type of data file, each line of the file represents one record or one object.&nbsp; The example data file "<code><span style="font-size:10.0pt">student_scores.txt</span></code>" shown below, contains data for three students and three exams scores for each student.</p> 
   <p>
    <!--[if gte vml 1]><v:shapetype id="_x0000_t75" coordsize="21600,21600"
 o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f"
 stroked="f">
 <v:stroke joinstyle="miter"/>
 <v:formulas>
  <v:f eqn="if lineDrawn pixelLineWidth 0"/>
  <v:f eqn="sum @0 1 0"/>
  <v:f eqn="sum 0 0 @1"/>
  <v:f eqn="prod @2 1 2"/>
  <v:f eqn="prod @3 21600 pixelWidth"/>
  <v:f eqn="prod @3 21600 pixelHeight"/>
  <v:f eqn="sum @0 0 1"/>
  <v:f eqn="prod @6 1 2"/>
  <v:f eqn="prod @7 21600 pixelWidth"/>
  <v:f eqn="sum @8 21600 0"/>
  <v:f eqn="prod @7 21600 pixelHeight"/>
  <v:f eqn="sum @10 21600 0"/>
 </v:formulas>
 <v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"/>
 <o:lock v:ext="edit" aspectratio="t"/>
</v:shapetype><v:shape id="_x0000_i1025" type="#_x0000_t75" alt="Screen Shot of student_scores.txt"
 style='width:239.25pt;height:120pt'>
 <v:imagedata src="JavaIO_files/image001.gif" o:href="http://www.cs.wisc.edu/~cs302/io/images/student_scores.gif"/>
</v:shape><![endif]-->
    <!--[if !vml]--><img border="0" width="319" height="160" src="JavaIO_files/image001.gif" alt="Screen Shot of student_scores.txt" longDesc="images/student_scores.txt" v:shapes="_x0000_i1025">
    <!--[endif]--></p> 
   <p>Each line of input is interpreted as a string of characters for the <span class="GramE">name, that</span> is followed by three integers for each object created.&nbsp; The delimiter character is the <code><span style="font-size:
10.0pt">'</span></code><span class="new1"><span style="font-size:10.0pt;
font-family:&quot;Courier New&quot;">:</span></span><code><span style="font-size:10.0pt">'</span></code> in the above data file.</p> 
   <p>The process of splitting a line of text into different parts is known as <span class="term1">tokenizing</span>, and each piece is a <span class="term1">token</span>.&nbsp; The standard Java library includes a class called, <span class="SpellE"><span class="classname1">StringTokenizer</span></span> that makes this process much more convenient for Java programmers.&nbsp; Without this class, you would need to use nested repetition and selection statements to process each character one at a time and determine if it is part of the name or one of the exam scores and then store it accordingly.&nbsp; Java programmers simply need to learn how to construct a <span class="SpellE"><span class="classname1">StringTokenizer</span></span> object and what methods are available.&nbsp; Refer to the <a href="http://java.sun.com/j2se/1.5/docs/api/java/util/StringTokenizer.html"><span class="SpellE">StringTokenizer</span> <span class="SpellE">javadoc</span></a> for more detailed information on methods other than those presented here.</p> 
   <p>A <span class="SpellE"><span class="classname1">StringTokenizer</span></span> object is created from a <span class="classname1">String</span> object.&nbsp; Use the <span class="SpellE"><span class="methodname1">hasMoreTokens</span></span> method to determine if there are any remaining tokens to process.&nbsp; Use the <span class="SpellE"><span class="methodname1">nextToken</span></span> method to return the next token as a <span class="classname1">String</span> object.&nbsp; There is also a <span class="SpellE"><span class="methodname1">countTokens</span></span> method that returns the number of remaining tokens available for a particular instance of the <span class="SpellE"><span class="classname1">StringTokenizer</span></span> class.</p> 
   <p>The <span class="SpellE"><span class="classname1">StringTokenizer</span></span> class is in the <span class="SpellE"><code><span style="font-size:10.0pt">java.util</span></code></span> package, so you must fully qualify the name as <span class="SpellE"><span class="classname1">java.util.StringTokenizer</span></span> or import the class.&nbsp; Here is a code fragment that reads the file shown above and computes the average score for each student listed.&nbsp; If you call <span class="SpellE"><span class="methodname1">nextToken</span></span> when there are no tokens remaining, a <span class="SpellE"><span class="classname1">java.util.NoSuchElementException</span></span> will occur.</p> 
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Make sure that the file student_scores.txt exists and has </pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>// valid data records.<span style="mso-spacerun:yes">&nbsp; </span>Otherwise, exceptions will occur.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>File <span class="SpellE">gradeFile</span> = new <span class="GramE">File(</span> "student_scores.txt" );</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE">if</span> ( <span class="SpellE">gradeFile.exists</span>() )</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// <span class="GramE">Create</span> the buffered reader for reading the file</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE">BufferedReader</span> <span class="SpellE">inFile</span> = new <span class="SpellE"><span class="GramE">BufferedReader</span></span><span class="GramE">(</span> new <span class="SpellE">FileReader</span>( <span class="SpellE">gradeFile</span> ) );</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Get the first line of the file</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>String line = <span class="SpellE"><span class="GramE">inFile.readLine</span></span><span class="GramE">(</span>);</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// If line is not end of file continue</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE">while</span> ( line != null ) </pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>{</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// <span class="GramE">Create</span> a <span class="SpellE">StringTokenizer</span> with a colon sign as a delimiter</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">java.util.StringTokenizer</span></span></span><span class="new1"> <span class="SpellE">st</span> = 
     <o:p></o:p></span></pre>
   <pre><span class="new1"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="GramE">new</span> <span class="SpellE">java.util.StringTokenizer</span>( line, ":" );</span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp; </span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>// Display the content of the first token</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">System.out.print</span></span><span class="GramE">(</span> "<span style="mso-spacerun:yes">&nbsp;&nbsp; </span>Name: " + <span class="SpellE"><span class="new1">st.nextToken</span></span><span class="new1">()</span> );</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Display the total number of tokens remaining this string</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">int</span></span> <span class="SpellE">numScores</span> = <span class="SpellE"><span class="new1">st.countTokens</span></span><span class="new1">()</span>;</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>// Initialize the sum to zero</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">int</span></span> sum = 0;</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Get each score, add it to the sum and print it</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span lang="DA" style="mso-ansi-language:DA">for ( int i=1; i &lt;= numScores; i++ )
     <o:p></o:p></span></pre>
   <pre><span lang="DA" style="mso-ansi-language:DA"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>{
     <o:p></o:p></span></pre>
   <pre><span lang="DA" style="mso-ansi-language:DA"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>int score = Integer.parseInt( <span class="new1">st.nextToken()</span> );
     <o:p></o:p></span></pre>
   <pre><span lang="DA" style="mso-ansi-language:DA"><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></span><span class="GramE">sum</span> += score;</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>}</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Display the average score for this student</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">System.out.println</span></span><span class="GramE">(</span> " average = " + sum/<span class="SpellE">numScores</span> );</pre>
   <pre><span style="mso-spacerun:yes">&nbsp; </span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>// Read next line of the file</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="GramE">line</span> = <span class="SpellE">inFile.readLine</span>();</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>} // end while not at end of file</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>// Close the <span class="SpellE">BufferedReader</span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE">inFile.close</span></span><span class="GramE">(</span>);</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>} // end if the grade file doesn't exist</pre> 
   <h2><a name="fileOUT"></a>File Output</h2> 
   <p>Writing data to a file is similar to writing data to the screen.&nbsp; You will open a file for writing and then <span class="term1">print</span> to that file any data that you would like to store there.&nbsp; You must remember to <span class="term1">close the file</span> or risk having some data not <span class="GramE">be</span> written and saved to the file.&nbsp; We will use each of these classes.</p> 
   <ul type="disc"> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo6;tab-stops:list .5in"><a href="http://www.java.sun.com/j2se/1.5/docs/api/java/io/FileWriter.html"><span class="SpellE"><code><span style="font-size:10.0pt">java.io.FileWriter</span></code></span></a> - used to open a file and connect an output stream to it.</li> 
    <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l1 level1 lfo6;tab-stops:list .5in"><a href="http://www.java.sun.com/j2se/1.5/docs/api/java/io/PrintWriter.html"><span class="SpellE"><code><span style="font-size:10.0pt">java.io.PrintWriter</span></code></span></a> - used to write strings of characters (instead of bytes) to any Writer object. </li> 
   </ul> 
   <p>When you intend to write data to a file, you should consider what the appropriate action to take is, if the file already exists.&nbsp; The safest option is to ask the user what to do, and then allow the user to choose overwrite the file, choose a different filename or cancel the operation.&nbsp; The example shown below assumes that the file opened by the <span class="SpellE"><span class="classname1">FileWriter</span></span> object will be overwritten if it already exists.&nbsp; If you do not want to overwrite the file if it already exists, then you must create and test a <span class="classname1">File</span> object first.&nbsp; <span class="GramE">The <span class="methodname1">exists</span></span> method of the <span class="classname1">File</span> class will return <code><span style="font-size:10.0pt">true</span></code> if the file already exists.</p> 
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// <span class="GramE">Create</span> a <span class="SpellE">FileWriter</span> attached to a file named "out.txt".</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// <span class="GramE">The</span> second parameter sets whether or not new data</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// will be appended to the end of the file or the beginning.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;</span>// false means that this file will be overwritten.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">java.io.FileWriter</span></span></span><span class="new1"> <span class="SpellE">fw</span> = new <span class="SpellE">java.io.FileWriter</span>( "out.txt", false );</span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp; </span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>// <span class="GramE">Create</span> a <span class="SpellE">PrintWriter</span> that automatically flushes data</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// to the output file whenever the <span class="SpellE">println</span> method is used.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">java.io.PrintWriter</span></span></span><span class="new1"> <span class="SpellE">pw</span> = new <span class="SpellE">java.io.PrintWriter</span>( <span class="SpellE">fw</span>, true );</span></pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Buffer some data to write to the file (doesn't actually write until flush)</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">pw.print</span></span></span><span class="GramE"><span class="new1">(</span></span> "Some test data that will be written when flush is called."<span class="new1">)</span>;</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>// Flush all buffered data to the file.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">pw.flush</span></span></span><span class="GramE"><span class="new1">(</span></span><span class="new1">)</span>;</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Write some data and automatically flush it to the file.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">pw.println</span></span></span><span class="GramE"><span class="new1">(</span></span> data <span class="new1">)</span>;</pre>
   <pre>
    <o:p>
     &nbsp;
    </o:p></pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Close the <span class="SpellE">PrintWriter</span> for added safety.</pre>
   <pre><span style="mso-spacerun:yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span class="SpellE"><span class="GramE"><span class="new1">pw.close</span></span></span><span class="GramE"><span class="new1">(</span></span><span class="new1">)</span>;</pre> 
   <p>The nice thing about using a <span class="SpellE"><span class="classname1">PrintWriter</span></span> object is that you are already familiar with the <span class="methodname1">print</span> and <span class="SpellE"><span class="methodname1">println</span></span> methods that are defined for all <span class="SpellE"><span class="classname1">PrintWriter</span></span> objects.&nbsp; By choosing the constructor that accepts a <span class="classname1">String</span> for the filename and a <span class="SpellE"><span class="GramE"><code><span style="font-size:10.0pt">boolean</span></code></span></span> value, we are able to set the <span class="SpellE"><span class="classname1">PrintWriter</span></span> object so that it will always flush the data buffer on all calls to <span class="SpellE"><span class="methodname1">println</span></span>.&nbsp; This is safer, but less efficient.&nbsp; It is more efficient to wait until the buffer is full before writing to disk.&nbsp; In that case, the <span class="methodname1">flush</span> method must be called or the file must be closed to flush the remaining data from the buffer.</p> 
   <h2>Conclusion</h2> 
   <p><span class="term1">Input</span> and <span class="term1">output</span> using the standard Java library of classes is somewhat more complex than using <code><span style="font-size:10.0pt">javabook2</span></code> classes.&nbsp; By using and experimenting with each of the techniques presented here, you will be able to perform some of the most common input and output operations in your Java programs.</p> 
   <h1><span style="font-size:12.0pt">
     <o:p>
      &nbsp;
     </o:p></span></h1> 
   <p class="MsoNormal"><u>
     <o:p>
      <span style="text-decoration:none">&nbsp;</span>
     </o:p></u></p> 
  </div>   
 </body>
</html>