<!doctype html>
<html>
 <head> 
  <meta http-equiv="content-type" content="text/html;charset=utf-8"> 
  <meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no, width=device-width"> 
  <meta content="telephone=no" name="format-detection"> 
  <meta name="apple-mobile-web-app-capable"> 
  <meta name="apple-mobile-web-app-status-bar-style" content="black"> 
  <meta http-equiv="Cache-Control" content="no-transform"> 
  <meta http-equiv="Cache-Control" content="no-siteapp"> 
  <meta name="description" content="????????????????????????????????????????List???????????
???????http://computergodzilla.blogspot.com/2013/07/how-to-calculate-tf-idf-
of-document.html????????bug? P.S?????????????????????????TF-IDF???2"> 
  <meta name="keywords" content="{Program},Java,Language ??JAVA??TFIDF?Cosine???-????"> 
  <title>??JAVA??TFIDF?Cosine???-???? - ??????</title> 
  <link href="http://outofmemory.cn/v5/s/5/17.1.css" type="text/css" rel="stylesheet"> 
  <link rel="shortcut icon" href="http://outofmemory.cn/favicon.ico" type="image/x-icon"> 
 </head> 
 <body> 
  <header class="head"> 
   <div class="head-left"> 
    <div class="logo">
     <a href="http://outofmemory.cn/">OutOfMemory.CN</a>
    </div> 
    <div class="beta">
     <sup>?</sup>
    </div> 
    <div class="nav"> 
     <ul id="headNav"> 
      <li class="current"><a href="http://ju.outofmemory.cn/" title="????????????????">??</a></li> 
      <li><a href="http://outofmemory.cn/code-snippet/" title="??????? ????">??</a></li> 
      <li><a href="http://j.outofmemory.cn/" title="???????">??</a></li> 
      <li><a href="http://outofmemory.cn/tutorial/" title="?????????">??</a></li> 
      <li style="width:65px"><a href="http://maven.outofmemory.cn/" title="Maven?????">Maven</a></li> 
      <li><a href="http://outofmemory.cn/github/" title="Github???????">Gitter</a></li> 
      <li><a href="http://outofmemory.cn/tag/" title="??">??</a></li> 
     </ul> 
    </div> 
   </div> 
   <div class="head-right"> 
    <div class="userStatus"> 
     <a class="signin" target="_self" href="http://outofmemory.cn/user/login"><i></i><b>??</b></a>
     <a class="signup" target="_self" href="http://outofmemory.cn/user/register"><i></i><b>??</b></a> 
    </div> 
   </div> 
  </header> 
  <div class="wrap"> 
   <div class="content">
    <h1>??JAVA??TFIDF?Cosine???-????</h1> 
    <div class="meta"> 
     <a href="http://ju.outofmemory.cn/feed/1559/" title="????"><i class="ico man"></i>????</a> 
     <time><i class="ico date"></i>2015-03-26</time> 
     <span class="pv"><b>1003</b> ??</span> 
    </div> 
    <div class="tags"> 
     <a class="tag" href="http://ju.outofmemory.cn/tag/Java/">Java</a> 
     <a class="tag" href="http://ju.outofmemory.cn/tag/Language/">Language</a> 
    </div> 
    <script>
    function imgError(img){
        if (typeof img.hasReplaceSrc != 'undefined'){
            var refer = $('div.author a:last').attr('href');
            img.src = '/imgr?src=' + encodeURIComponent(img.src) + '&r=' + encodeURIComponent(refer);
        } else {
            var urlPattern = /(http|ftp|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/;
            for (var i=0;i<img.attributes.length;i++){
                var attrName = img.attributes[i].nodeName;
                var attrVal = img.attributes[i].nodeValue;
                if(attrName.toLowerCase() != 'src' && urlPattern.test(attrVal)){
                    img.src = attrVal;
                    img.hasReplaceSrc=true;
                    break;
                }
            }
        }
        return true;
    }
</script> 
    <p>????????????????????????????????????????List???????????</p> 
    <p>???????http://computergodzilla.blogspot.com/2013/07/how-to-calculate-tf-idf-of-document.html????????bug?</p> 
    <p>P.S?????????????????????????TF-IDF???2W?????Matlab??????????Java??????????????????????????????????????????????????</p> 
    <p>For beginners doing a project in text mining aches them a lot by various term like :</p> 
    <ul> 
     <li>TF-IDF</li> 
     <li>COSINE SIMILARITY</li> 
     <li>CLUSTERING</li> 
     <li>DOCUMENT VECTORS</li> 
    </ul> 
    <p>In my earlier post I showed you guys what is&nbsp;<strong><a rel="nofollow external" href="http://computergodzilla.blogspot.com/2012/12/what-is-cosine-similarity.html" target="_blank">Cosine Similarity</a></strong>. I will not talk about&nbsp;<a rel="nofollow external" href="http://computergodzilla.blogspot.com/2012/12/what-is-cosine-similarity.html" target="_blank">Cosine Similarity</a>&nbsp;in this post but rather I will show a nice little code to calculate&nbsp;<a rel="nofollow external" href="http://computergodzilla.blogspot.com/2012/12/what-is-cosine-similarity.html" target="_blank">Cosine Similarity</a>&nbsp;in java.</p> 
    <p>Many of you must be familiar with Tf-Idf(Term frequency-Inverse Document Frequency).<br> I will enlighten them in brief.</p> 
    <p><strong>Term Frequency:</strong><br> Suppose for a document “Tf-Idf Brief Introduction” there are overall&nbsp;<strong>60000&nbsp;</strong>words and a word&nbsp;<em>Term-Frequency</em>&nbsp;occurs&nbsp;<strong>60</strong>times.<br> Then , mathematically, its Term Frequency, TF = 60/60000 =0.001.</p> 
    <p><strong>Inverse Document Frequency:</strong><br> Suppose one bought&nbsp;<em>Harry-Potter series</em>, all series. Suppose there are 7 series and a word&nbsp;<em>“AbraKaDabra”&nbsp;</em>comes in 2 of the series.<br> Then, mathematically, its Inverse-Document Frequency , IDF = 1 + log(7/2) = …….(calculated it guys, don’t be lazy, I am lazy not you guys.)</p> 
    <p>And Finally, TFIDF = TF * IDF;</p> 
    <p>By mathematically I assume you now know its meaning physically.</p> 
    <p><strong>Document Vector:</strong><br> There are various ways to calculate document vectors. I am just giving you an example. Suppose If I calculate all the term’s TF-IDF of a document A and store them in an array(list, matrix … in any ordered way, .. you guys are genius you know how to create a vector. ) then I get an Document Vector of TF-IDF scores of document A.</p> 
    <p>The class shown below calculates the Term Frequency(TF) and Inverse Document Frequency(IDF).</p> 
    <pre class="prettyprint"><code>//TfIdf.java &nbsp;&nbsp;
package&nbsp;com.computergodzilla.tfidf; &nbsp;&nbsp;
&nbsp;&nbsp;
import&nbsp;java.util.List; &nbsp;&nbsp;
&nbsp;&nbsp;
/** 
&nbsp;*&nbsp;Class&nbsp;to&nbsp;calculate&nbsp;TfIdf&nbsp;of&nbsp;term. &nbsp;
&nbsp;*&nbsp;@author&nbsp;Mubin&nbsp;Shrestha &nbsp;
&nbsp;*/&nbsp;&nbsp;
public&nbsp;class&nbsp;TfIdf&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/** 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Calculates&nbsp;the&nbsp;tf&nbsp;of&nbsp;term&nbsp;termToCheck &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;totalterms&nbsp;:&nbsp;Array&nbsp;of&nbsp;all&nbsp;the&nbsp;words&nbsp;under&nbsp;processing&nbsp;document &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;termToCheck&nbsp;:&nbsp;term&nbsp;of&nbsp;which&nbsp;tf&nbsp;is&nbsp;to&nbsp;be&nbsp;calculated. &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;tf(term&nbsp;frequency)&nbsp;of&nbsp;term&nbsp;termToCheck &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;double&nbsp;tfCalculator(String[]&nbsp;totalterms,&nbsp;String&nbsp;termToCheck)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;count&nbsp;=&nbsp;0;&nbsp;&nbsp;//to&nbsp;count&nbsp;the&nbsp;overall&nbsp;occurrence&nbsp;of&nbsp;the&nbsp;term&nbsp;termToCheck &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;s&nbsp;:&nbsp;totalterms)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(s.equalsIgnoreCase(termToCheck))&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;count&nbsp;/&nbsp;totalterms.length; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/** 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Calculates&nbsp;idf&nbsp;of&nbsp;term&nbsp;termToCheck &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;allTerms&nbsp;:&nbsp;all&nbsp;the&nbsp;terms&nbsp;of&nbsp;all&nbsp;the&nbsp;documents &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;termToCheck &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp;idf(inverse&nbsp;document&nbsp;frequency)&nbsp;score &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;double&nbsp;idfCalculator(List&lt;String[]&gt; allTerms,&nbsp;String&nbsp;termToCheck)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;count&nbsp;=&nbsp;0; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String[]&nbsp;ss&nbsp;:&nbsp;allTerms)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;s&nbsp;:&nbsp;ss)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(s.equalsIgnoreCase(termToCheck))&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1&nbsp;+&nbsp;Math.log(allTerms.size()&nbsp;/&nbsp;count); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
}&nbsp;&nbsp;</code></pre> 
    <p>The class shown below parsed the text documents and split them into tokens. This class will communicate with TfIdf.java class to calculated TfIdf. It also calls CosineSimilarity.java class to calculated the similarity between the passed documents.</p> 
    <pre class="prettyprint"><code>//DocumentParser.java &nbsp;&nbsp;
&nbsp;&nbsp;
package&nbsp;com.computergodzilla.tfidf; &nbsp;&nbsp;
&nbsp;&nbsp;
import&nbsp;java.io.BufferedReader; &nbsp;&nbsp;
import&nbsp;java.io.File; &nbsp;&nbsp;
import&nbsp;java.io.FileNotFoundException; &nbsp;&nbsp;
import&nbsp;java.io.FileReader; &nbsp;&nbsp;
import&nbsp;java.io.IOException; &nbsp;&nbsp;
import&nbsp;java.util.ArrayList; &nbsp;&nbsp;
import&nbsp;java.util.List; &nbsp;&nbsp;
&nbsp;&nbsp;
/** 
&nbsp;*&nbsp;Class&nbsp;to&nbsp;read&nbsp;documents &nbsp;
&nbsp;* &nbsp;
&nbsp;*&nbsp;@author&nbsp;Mubin&nbsp;Shrestha &nbsp;
&nbsp;*/&nbsp;&nbsp;
public&nbsp;class&nbsp;DocumentParser&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;//This&nbsp;variable&nbsp;will&nbsp;hold&nbsp;all&nbsp;terms&nbsp;of&nbsp;each&nbsp;document&nbsp;in&nbsp;an&nbsp;array. &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;String[]&gt;&nbsp;termsDocsArray&nbsp;=&nbsp;new&nbsp;ArrayList&lt;String[]&gt;(); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;String&gt;&nbsp;allTerms&nbsp;=&nbsp;new&nbsp;ArrayList&lt;String&gt;();&nbsp;//to&nbsp;hold&nbsp;all&nbsp;terms &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;List&lt;double[]&gt;&nbsp;tfidfDocsVector&nbsp;=&nbsp;new&nbsp;ArrayList&lt;double[]&gt;(); &nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/** 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Method&nbsp;to&nbsp;read&nbsp;files&nbsp;and&nbsp;store&nbsp;in&nbsp;array. &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;filePath&nbsp;:&nbsp;source&nbsp;file&nbsp;path &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;FileNotFoundException &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;IOException &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;parseFiles(String&nbsp;filePath)&nbsp;throws&nbsp;FileNotFoundException,&nbsp;IOException&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;File[]&nbsp;allfiles&nbsp;=&nbsp;new&nbsp;File(filePath).listFiles(); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BufferedReader&nbsp;in&nbsp;=&nbsp;null; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(File&nbsp;f&nbsp;:&nbsp;allfiles)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(f.getName().endsWith(“.txt”))&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in&nbsp;=&nbsp;new&nbsp;BufferedReader(new&nbsp;FileReader(f)); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuilder&nbsp;sb&nbsp;=&nbsp;new&nbsp;StringBuilder(); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;s&nbsp;=&nbsp;null; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;((s&nbsp;=&nbsp;in.readLine())&nbsp;!=&nbsp;null)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sb.append(s); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]&nbsp;tokenizedTerms&nbsp;=&nbsp;sb.toString().replaceAll(“[\\W&amp;&amp;[^\\s]]”,&nbsp;“”).split(“\\W+”);&nbsp;&nbsp;&nbsp;//to&nbsp;get&nbsp;individual&nbsp;terms &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;term&nbsp;:&nbsp;tokenizedTerms)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!allTerms.contains(term))&nbsp;{&nbsp;&nbsp;//avoid&nbsp;duplicate&nbsp;entry &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allTerms.add(term); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;termsDocsArray.add(tokenizedTerms); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/** 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Method&nbsp;to&nbsp;create&nbsp;termVector&nbsp;according&nbsp;to&nbsp;its&nbsp;tfidf&nbsp;score. &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;tfIdfCalculator()&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;tf;&nbsp;//term&nbsp;frequency &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;idf;&nbsp;//inverse&nbsp;document&nbsp;frequency &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;tfidf;&nbsp;//term&nbsp;requency&nbsp;inverse&nbsp;document&nbsp;frequency&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String[]&nbsp;docTermsArray&nbsp;:&nbsp;termsDocsArray)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double[]&nbsp;tfidfvectors&nbsp;=&nbsp;new&nbsp;double[allTerms.size()]; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;count&nbsp;=&nbsp;0; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(String&nbsp;terms&nbsp;:&nbsp;allTerms)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tf&nbsp;=&nbsp;new&nbsp;TfIdf().tfCalculator(docTermsArray,&nbsp;terms); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idf&nbsp;=&nbsp;new&nbsp;TfIdf().idfCalculator(termsDocsArray,&nbsp;terms); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tfidf&nbsp;=&nbsp;tf&nbsp;*&nbsp;idf; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tfidfvectors[count]&nbsp;=&nbsp;tfidf; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tfidfDocsVector.add(tfidfvectors);&nbsp;&nbsp;//storing&nbsp;document&nbsp;vectors;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/** 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Method&nbsp;to&nbsp;calculate&nbsp;cosine&nbsp;similarity&nbsp;between&nbsp;all&nbsp;the&nbsp;documents. &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;getCosineSimilarity()&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;tfidfDocsVector.size();&nbsp;i++)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;j&nbsp;=&nbsp;0;&nbsp;j&nbsp;&lt;&nbsp;tfidfDocsVector.size();&nbsp;j++)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(“between&nbsp;”&nbsp;+&nbsp;i&nbsp;+&nbsp;“&nbsp;and&nbsp;”&nbsp;+&nbsp;j&nbsp;+&nbsp;“&nbsp;&nbsp;=&nbsp;&nbsp;”&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;new&nbsp;CosineSimilarity().cosineSimilarity &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;( &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tfidfDocsVector.get(i),&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tfidfDocsVector.get(j) &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;) &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
}&nbsp;&nbsp;</code></pre> 
    <p>This is the class that calculates Cosine Similarity:</p> 
    <pre class="prettyprint"><code>//CosineSimilarity.java &nbsp;&nbsp;
/* 
&nbsp;*&nbsp;To&nbsp;change&nbsp;this&nbsp;template,&nbsp;choose&nbsp;Tools&nbsp;|&nbsp;Templates &nbsp;
&nbsp;*&nbsp;and&nbsp;open&nbsp;the&nbsp;template&nbsp;in&nbsp;the&nbsp;editor. &nbsp;
&nbsp;*/&nbsp;&nbsp;
package&nbsp;com.computergodzilla.tfidf; &nbsp;&nbsp;
&nbsp;&nbsp;
/** 
&nbsp;*&nbsp;Cosine&nbsp;similarity&nbsp;calculator&nbsp;class &nbsp;
&nbsp;*&nbsp;@author&nbsp;Mubin&nbsp;Shrestha &nbsp;
&nbsp;*/&nbsp;&nbsp;
public&nbsp;class&nbsp;CosineSimilarity&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/** 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Method&nbsp;to&nbsp;calculate&nbsp;cosine&nbsp;similarity&nbsp;between&nbsp;two&nbsp;documents. &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;docVector1&nbsp;:&nbsp;document&nbsp;vector&nbsp;1&nbsp;(a) &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;docVector2&nbsp;:&nbsp;document&nbsp;vector&nbsp;2&nbsp;(b) &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return&nbsp; &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;double&nbsp;cosineSimilarity(double[]&nbsp;docVector1,&nbsp;double[]&nbsp;docVector2)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;dotProduct&nbsp;=&nbsp;0.0; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;magnitude1&nbsp;=&nbsp;0.0; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;magnitude2&nbsp;=&nbsp;0.0; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;cosineSimilarity&nbsp;=&nbsp;0.0; &nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;docVector1.length;&nbsp;i++)&nbsp;//docVector1&nbsp;and&nbsp;docVector2&nbsp;must&nbsp;be&nbsp;of&nbsp;same&nbsp;length &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dotProduct&nbsp;+=&nbsp;docVector1[i]&nbsp;*&nbsp;docVector2[i];&nbsp;&nbsp;//a.b &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;magnitude1&nbsp;+=&nbsp;Math.pow(docVector1[i],&nbsp;2);&nbsp;&nbsp;//(a^2) &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;magnitude2&nbsp;+=&nbsp;Math.pow(docVector2[i],&nbsp;2);&nbsp;//(b^2) &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;magnitude1&nbsp;=&nbsp;Math.sqrt(magnitude1);//sqrt(a^2) &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;magnitude2&nbsp;=&nbsp;Math.sqrt(magnitude2);//sqrt(b^2) &nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(magnitude1&nbsp;!=&nbsp;0.0&nbsp;|&nbsp;magnitude2&nbsp;!=&nbsp;0.0)&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cosineSimilarity&nbsp;=&nbsp;dotProduct&nbsp;/&nbsp;(magnitude1&nbsp;*&nbsp;magnitude2); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0.0; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;cosineSimilarity; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
}&nbsp;&nbsp;</code></pre> 
    <p>Here’s the main class to run the code:</p> 
    <pre class="prettyprint"><code>//TfIdfMain.java &nbsp;&nbsp;
package&nbsp;com.computergodzilla.tfidf; &nbsp;&nbsp;
&nbsp;&nbsp;
import&nbsp;java.io.FileNotFoundException; &nbsp;&nbsp;
import&nbsp;java.io.IOException; &nbsp;&nbsp;
&nbsp;&nbsp;
/** 
&nbsp;* &nbsp;
&nbsp;*&nbsp;@author&nbsp;Mubin&nbsp;Shrestha &nbsp;
&nbsp;*/&nbsp;&nbsp;
public&nbsp;class&nbsp;TfIdfMain&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;/** 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;Main&nbsp;method &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;args &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;FileNotFoundException &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@throws&nbsp;IOException&nbsp; &nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;void&nbsp;main(String&nbsp;args[])&nbsp;throws&nbsp;FileNotFoundException,&nbsp;IOException &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;{ &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DocumentParser&nbsp;dp&nbsp;=&nbsp;new&nbsp;DocumentParser(); &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dp.parseFiles(“D:\\FolderToCalculateCosineSimilarityOf”);&nbsp;//&nbsp;give&nbsp;the&nbsp;location&nbsp;of&nbsp;source&nbsp;file &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dp.tfIdfCalculator();&nbsp;//calculates&nbsp;tfidf &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dp.getCosineSimilarity();&nbsp;//calculates&nbsp;cosine&nbsp;similarity&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;} &nbsp;&nbsp;
}&nbsp;&nbsp;</code></pre> 
    <p>You can also download the whole source code from here: <a href="https://drive.google.com/file/d/0BzQONlWil3VGRVNmYm5KUEJsTWM/view?usp=sharing" target="_blank">Download</a>. ?Google Drive?</p> 
    <p>Overall what I did is, I first calculate the TfIdf matrix of all the documents and then document vectors of each documents. Then I used those document vectors to calculate cosine similarity.</p> 
    <p>You think clarification is not enough. Hit me..<br> Happy Text-Mining!!</p> 
    <div class="like"> 
     <a href="javascript:void(0)" class="assertLogin" rel="nofollow" target="_self">??</a> 
    </div> 
    <div class="tags"> 
     <a class="tag" href="http://ju.outofmemory.cn/tag/Java/">Java</a> 
     <a class="tag" href="http://ju.outofmemory.cn/tag/Language/">Language</a> 
    </div> 
    <div class="author"> 
     <span class="name">???<a href="http://ju.outofmemory.cn/feed/1559/" title="????">????</a></span> 
     <div class="authorAvatar"> 
      <a href="http://ju.outofmemory.cn/feed/1559/"> <img width="128" align="center" valign="absmiddle" src="http://ju.outofmemory.cn/flogos/9/1559.png" alt="????"> </a> 
     </div> 
     <div class="small">
       ??????? 
     </div> 
     <div class="small">
      ?????
      <a rel="nofollow external" target="_blank" href="http://jacoxu.com/?p=1619">??JAVA??TFIDF?Cosine???-????</a>, ????????
     </div> 
    </div> 
    <div class="pn"> 
     <span class="next"><mark>?</mark><a href="/entry/125289">Java????????Formatter????</a></span> 
     <span class="pre"><mark>?</mark><a href="/entry/125287">??Eclipse??????</a></span> 
    </div> 
    <div class="tgBD"> 
     <script type="text/javascript">

var cpro_id = "u2191912"
</script> 
     <script src="http://cpro.baidustatic.com/cpro/ui/cm.js" type="text/javascript"></script> 
    </div> 
    <div class="comments"> 
     <a name="comments"></a> 
    </div> 
    <div class="newComment">
     <a name="newComment"></a> 
     <h3>????</h3> 
     <form action="/entry/comment/add" method="POST"> 
      <input type="hidden" name="targetId" value="125288"> 
      <input type="hidden" name="title" value="??:??JAVA??TFIDF?Cosine???-????"> 
      <input type="hidden" name="replyId"> 
      <textarea name="content" cols="100" rows="6" class="mdInput" style="width:98%"></textarea> 
      <p> <button type="button" id="btnComment">????</button><span id="commentTip"></span> </p> 
     </form> 
    </div> 
   </div> 
   <div class="sidebar"> 
    <div class="similar entry"> 
     <span class="title">?????????</span> 
     <div>
      <ul class="similarEntries"> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1494/" title="liuinsect">liuinsect</a> ?? <span class="time">2014-08-07 11:57:07</span></span> <a href="http://ju.outofmemory.cn/entry/87547" class="codeTitle">????Java8 – AbstractQueuedSynchronizer????????</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/902/" title="mortoray">mortoray</a> ?? <span class="time">2016-04-28 05:41:02</span></span> <a href="http://ju.outofmemory.cn/entry/256806" class="codeTitle">What is the length of a string? A tricky question</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1494/" title="liuinsect">liuinsect</a> ?? <span class="time">2014-07-01 10:06:43</span></span> <a href="http://ju.outofmemory.cn/entry/81891" class="codeTitle">??Volatile</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/902/" title="mortoray">mortoray</a> ?? <span class="time">2016-08-29 08:21:08</span></span> <a href="http://ju.outofmemory.cn/entry/277697" class="codeTitle">A pattern bandage for messy virtual functions</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1559/" title="jacoxu">jacoxu</a> ?? <span class="time">2015-02-02 10:21:49</span></span> <a href="http://ju.outofmemory.cn/entry/114416" class="codeTitle">no main manifest attribute, in *.jar</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1559/" title="jacoxu">jacoxu</a> ?? <span class="time">2015-02-02 06:42:33</span></span> <a href="http://ju.outofmemory.cn/entry/114417" class="codeTitle">???java??CSV??</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/902/" title="mortoray">mortoray</a> ?? <span class="time">2016-08-29 08:21:08</span></span> <a href="http://ju.outofmemory.cn/entry/302064" class="codeTitle">A pattern bandage for messy virtual functions</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1559/" title="jacoxu">jacoxu</a> ?? <span class="time">2015-04-26 14:36:10</span></span> <a href="http://ju.outofmemory.cn/entry/137257" class="codeTitle">?HashMap??Value?Key????</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1494/" title="liuinsect">liuinsect</a> ?? <span class="time">2014-01-27 12:34:54</span></span> <a href="http://ju.outofmemory.cn/entry/80788" class="codeTitle">????Condition</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1494/" title="liuinsect">liuinsect</a> ?? <span class="time">2014-01-28 05:52:57</span></span> <a href="http://ju.outofmemory.cn/entry/80789" class="codeTitle">??Condition???AQS?????</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/1494/" title="liuinsect">liuinsect</a> ?? <span class="time">2014-02-12 09:20:47</span></span> <a href="http://ju.outofmemory.cn/entry/80790" class="codeTitle">ThreadLocal??????</a> </li> 
       <li><span class="meta"><a href="http://ju.outofmemory.cn/feed/902/" title="mortoray">mortoray</a> ?? <span class="time">2014-07-14 04:41:13</span></span> <a href="http://ju.outofmemory.cn/entry/83413" class="codeTitle">A curious non-OOP virtual inheritance for a GPU</a> </li> 
      </ul> 
     </div> 
    </div> 
    <div class="tgSide">
     <script type="text/javascript">var jd_union_unid="1000081043",jd_ad_ids="512:6",jd_union_pid="CKvGvfKzKxCTjfDcAxoAIMH+guICKgA=";var jd_width=336;var jd_height=280;var jd_union_euid="";var p="BBcEUB5aEwUbNwpfBkgyTUMIRmtKRk9aZV8ETVxNNwpfBkgyeWcXBSJifWVlDFMYfkNLDwxmRRwAYgtZK10WABoBVhlcFzISBlQaWhwCEwJXK2tKRk9aZVA1FDJNQwhGaxUHGgdXE1MUBxIOVxxrFDIiNw%3D%3D";</script>
     <script type="text/javascript" charset="utf-8" src="//u.x.jd.com/static/js/auto.js"></script>
    </div> 
    <div class="similar code"> 
     <span class="title">?????????</span> 
     <div>
      <ul class="similarCodes"> 
       <li><span class="time">2012-11-05 21:59:42</span><a href="http://outofmemory.cn/code-snippet/320/java-get-suiji-shu-code">java???????</a> by <a href="//outofmemory.cn/user/70">???????</a> </li> 
       <li><span class="time">2014-12-16 09:22:19</span><a href="http://outofmemory.cn/code-snippet/35427/java-get-real-ip-proxy-server">java????IP??</a> by <a href="//outofmemory.cn/user/7">????</a> </li> 
       <li><span class="time">2015-11-25 17:10:24</span><a href="http://outofmemory.cn/code-snippet/38310/java8-method-reference-example">java8 ????::?????</a> by <a href="//outofmemory.cn/user/20">???</a> </li> 
       <li><span class="time">2015-08-19 11:08:21</span><a href="http://outofmemory.cn/code-snippet/37807/java-enum-consts-values">java ????????????</a> by <a href="//outofmemory.cn/user/20">???</a> </li> 
       <li><span class="time">2015-09-01 10:49:38</span><a href="http://outofmemory.cn/code-snippet/38045/achieve-android-AES-jiamijizhu">??android?AES????</a> by <a href="//outofmemory.cn/user/156">????</a> </li> 
       <li><span class="time">2015-09-20 11:21:52</span><a href="http://outofmemory.cn/code-snippet/38218/Activiti-explorer-tomcat-HTTP-Status-404">Activiti-explorer ?tomcat????HTTP Status 404??</a> by <a href="//outofmemory.cn/user/18">??Sir</a> </li> 
       <li><span class="time">2015-11-03 13:42:28</span><a href="http://outofmemory.cn/code-snippet/38281/java-jdbc-sqlserver-connection-url">jdbc sql server ?????</a> by <a href="//outofmemory.cn/user/1433">????</a> </li> 
       <li><span class="time">2015-12-08 18:11:20</span><a href="http://outofmemory.cn/code-snippet/38468/java-spring-inject-class-in-property">spring bean property???class??</a> by <a href="//outofmemory.cn/user/20">???</a> </li> 
       <li><span class="time">2016-02-10 09:07:02</span><a href="http://outofmemory.cn/code-snippet/39214/chun-Java-compose-process-XML-leiku-Xmappr-usage-method">?Java?????XML??? Xmappr ????</a> by <a href="//outofmemory.cn/user/72">????</a> </li> 
       <li><span class="time">2016-06-28 20:39:05</span><a href="http://outofmemory.cn/code-snippet/78692/spring-mybatis-MapperScannerConfigurer">??MapperScannerConfigurer??????mybatis</a> by <a href="//outofmemory.cn/user/20">???</a> </li> 
       <li><span class="time">2017-06-13 09:09:44</span><a href="http://outofmemory.cn/code-snippet/80826/Android-call-OCR-identify-image-de-wenzi">Android??OCR????????</a> by <a href="//outofmemory.cn/user/132">Foyon</a> </li> 
       <li><span class="time">2017-06-15 11:53:41</span><a href="http://outofmemory.cn/code-snippet/80881/Android-APP-code-boda-phone-duanxin-share">Android APP???????????</a> by <a href="//outofmemory.cn/user/96">sdcool</a> </li> 
      </ul> 
     </div> 
    </div> 
   </div> 
  </div> 
  <script src="/static/js/jquery-1.11.3.min.js"></script> 
  <script>var isMobile= $('.sidebar').css('clear') == 'both';</script> 
  <script src="http://outofmemory.cn/user/loginUser_v5?t=juke&amp;k=125288&amp;oa=getEntryVoteStatus&amp;oa=triggerCommentCaptcha&amp;oa=displayPv&amp;oa=dynamicTG&amp;tg=jukeTopLine" charset="utf-8"></script> 
  <script src="/static/prettify/prettify.js?1?1.9.0" type="text/javascript"></script> 
  <script src="http://outofmemory.cn/v5/s/5.js?1.9.0"></script> 
  <script>
    var removeAD=false;
    var voteTargetType='entry';var voteTargetId =125288;
    var voting=false;
    function onGetVoteStatus(status){
        if(status.type != 0){
            voting=true;
            $('.like a').html('1?');
        }
    }
    $('.like a').click(function(){
        if (!voting){
            voting = true;
            $.post("/"+voteTargetType+"/"+voteTargetId+"/vote", { type: '1'},
            function (response, textStatus){
                if(!response.success){
                    alert(response.message);
                } else {
                    $('.like a').html((response.upCount||1) + '?');
                }
            }, "json");
        } else {
            $('.like a').html('??');
        }
    });
    $('pre,code').removeClass('prettyprint').addClass('prettyprint');
    prettyPrint();
    function displayPv(pv){
        $('.pv b').html(pv + '');
    }
    function resizeImg(o,maxWidth) {
        var img = $(o);
        if(img.width() > maxWidth) {
            var h = Math.round(maxWidth / img.width() * img.height());
            img.width(maxWidth).height(h);
        }
    }
    function resizeImgs(){
        var maxWidth = $('div.author').width();
        $('.content img').each(
            function(i,o){resizeImg(o,maxWidth);}
        );
        var tg = $('.tgBD');
        if(tg.width()>maxWidth){
            tg.width(maxWidth+'px').css({'text-align':'center','overflow':'hidden',border:'1px solid transparent','border-radius':'2px','-moz-border-radius':'2px'});
        }
    }
    $(resizeImgs);
    $(window).resize(resizeImgs);
    function showBooks(books) {
        var h = '<div class="tgL books"><span>&nbsp;</span>???';
        var maxCount = 5;
        var lineCn = books.length>maxCount?maxCount:books.length;
        function getProvidersHtml(b) {
            var h='';
            if (b.providers) {
                h += '[';
                var first = true;
                for (var p in b.providers) {
                    var pUrl = b.providers[p]['url'];
                    
                    if (first) {
                        first = false;
                    } else {
                        h += ' &nbsp; ';
                    }
                    h += ('<a href="' + pUrl +'" target="_blank">' + p +  '</a>');
                    
                }
                h += ']';
            }
            return h;
        }

        for (var i=0; i<lineCn;i++) {
            if (i>0) h += '<span class="sep"> | </span>';
            var book = books[i];
            h += ('<a href="'+ book.url +'" target="_blank">' + book.title + '</a>');
            h += getProvidersHtml(book);
        }


        h += '</div>';
        $(h).insertBefore($('div.wrap'));

        var rightHtml = '<div class="tgSide booksNail"><div class="cTitle">????</div>';
        rightHtml += '<div><ul>';
        var startIdx = books.length > 4 ? books.length-4 : 0;
        for (var i=startIdx; i<books.length;i++) {
            var book = books[i];
            rightHtml += ('<li><div class="nail"><a href="' + book.url + '" target="_blank"><img src="//outofmemory.cn/static/book/' + book.image + '" /></a></div>');
            rightHtml += ('<div class="title"><a class="bookName" href="'+book.url+'" target="_blank"><nobr>'+book.title+ '</nobr></a>');
            var providerH = getProvidersHtml(book);
            rightHtml += providerH;
            rightHtml += '</div></li>';
        }
        rightHtml += '</ul></div>';
        rightHtml += '</div>';

        $(rightHtml).insertBefore($('div.sidebar div:first'))
    }
</script> 
  <script src="http://outofmemory.cn/book/list?cb=showBooks&amp;tags=%7BProgram%7D%2CJava%2CLanguage&amp;page=1" type="text/javascript"></script> 
  <footer class="foot">
    © 2015 
   <a href="http://outofmemory.cn/">????</a> 
  </footer> 
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-36036446-1', 'outofmemory.cn');
    ga('send', 'pageview');
    ga('set',  '&uid', window.loginUser.id); // ?????? user_id ????? ID?
</script> 
  <div class="bdtj">
   <script type="text/javascript">


var _hmt = _hmt || [];
(function() {
  var hm = document.createElement("script");
  hm.src = "//hm.baidu.com/hm.js?2051de3619785a7bff6213250ea9fbbd";
  var s = document.getElementsByTagName("script")[0];
  s.parentNode.insertBefore(hm, s);
})();
</script> 
  </div> 
  <script>
    function displayTG(k, h){
        var display = typeof removeAD != 'undefined' && !removeAD;
        if (!display) {
            return;
        }
        if(k == 'jukeTopLine'){
            $(h).insertBefore($('div.wrap'));
        }
    }
    if(parseInt($('.content').css('marginRight')) > 50){
        var contentHeight=$('.content').height();var sideHeight=$('.sidebar').height();
        if(contentHeight<sideHeight) $('.content').css({'minHeight':sideHeight+'px'});
    }
</script>   
 </body>
</html>