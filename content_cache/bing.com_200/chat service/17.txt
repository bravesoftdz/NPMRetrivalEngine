<!doctype html>
<html>
 <!-- OBE Template 2013: Version 3.3.4 Last updated 10/10/2013 -->
 <!-- Author: Glenn Stokol, Marcie Young, Matthieu Heimer -->
 <head> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes"> 
  <meta name="apple-mobile-web-app-capable" content="yes"> 
  <meta name="apple-mobile-web-app-status-bar-style" content="black"> 
  <title>Java EE 7: Building Web Applications with WebSocket, JavaScript and HTML5</title> 
  <link rel="shortcut icon" href="icons/favicon.ico"> 
  <link rel="apple-touch-icon" href="icons/touch-icon-iphone.png"> 
  <link rel="apple-touch-icon" sizes="72x72" href="icons/touch-icon-ipad.png"> 
  <link rel="apple-touch-icon" sizes="114x114" href="icons/touch-icon-iphone-retina.png"> 
  <link rel="apple-touch-icon" sizes="144x144" href="icons/touch-icon-ipad-retina.png"> 
  <link rel="stylesheet" href="css/jquery-ui.min.css"> 
  <link rel="stylesheet" href="css/base.css"> 
  <!-- Load jQuery, SimpleModal and Basic JS files --> 
  <!--[if lt IE 9]>
            <script type="text/javascript" src="js/modernizr.custom.80798.js"></script>
        <![endif]--> 
  <script type="text/javascript" src="js/jquery-1.10.2.min.js"></script> 
  <script type="text/javascript" src="js/jquery.XDomainRequest.js"></script> 
  <script type="text/javascript" src="js/jquery.cookie.js"></script> 
  <script type="text/javascript" src="js/jquery-queryParser.min.js"></script> 
  <script type="text/javascript" src="js/jquery-ui.min.js"></script> 
  <script type="text/javascript" src="js/jquery.visible.js"></script> 
  <!-- begin codemirror here --> 
  <script type="text/javascript" src="js/runmode-standalone.js"></script> 
  <link rel="stylesheet" href="css/codemirror/codemirror.css"> 
  <script type="text/javascript" src="js/mode/clike/clike.js"></script> 
  <script type="text/javascript" src="js/mode/sql/sql.js"></script> 
  <!-- end codemirror here --> 
  <script type="text/javascript" src="js/hooks.js"></script> 
  <script type="text/javascript" src="js/basic.js"></script> 
  <style type="text/css">
            .code-highlight{background-color: #e6ecfb; border: 1px solid red; display: inline-block;}
        </style> 
 </head> 
 <body> 
  <!-- <article class="auto-number"> --> 
  <article> 
   <header> 
    <h1>Java EE 7: Building Web Applications with WebSocket, JavaScript and HTML5 </h1> 
    <nav> 
     <span id="toolbar" class="ui-corner-all"> <button id="topicBtn">Topic List</button> <button id="tglTopicBtn">Expand All Topics</button> <button id="tglImageBtn">Hide All Images</button> <button id="printBtn">Print</button> </span> 
    </nav> 
   </header> 
   <div id="container"> 
    <section> 
     <h2>Overview</h2> 
     <div> 
      <h4>Purpose</h4> 
      <p>This tutorial shows you how to create an application that uses the WebSocket API for real-time communication between a client and a server. You learn how to:</p> 
      <ul> 
       <li>Create a Java Platform, Enterprise Edition 7 (Java EE 7) application that uses the WebSocket API</li> 
       <li>Use the <code>OnOpen</code> and <code>OnMessage</code> WebSocket lifecycle events to perform different actions on the Java EE 7 application.</li> 
       <li>Define a client-side WebSocket endpoint by using JavaScript</li> 
       <li>Operate on Plain Old Java Objects (POJOs), in real-time, with actions invoked from a web browser client</li> 
      </ul> 
      <h4>Time to Complete</h4> 
      <p>Approximately 1 hour</p> 
      <h4>Introduction</h4> 
      <p>Modern web applications require more interactivity than ever before for client/server communications. HTTP, however, wasn't built to deliver the kind of interactivity needed today. "Push" or Comet techniques, such as long-polling, emerged as a way to allow a server to push data to a browser. Because these techniques usually rely on HTTP, they present some disadvantages for client/server communications, such as HTTP overhead. These disadvantages result in less efficient communication between the server and the web browser, especially for real-time applications.</p> 
      <p>WebSocket provides an alternative to this limitation by providing bi-directional, full-duplex, real-time, client/server communications. The server can send data to the client at any time. Because WebSocket runs over TCP, it also reduces the overhead of each message. WebSocket also provides greater scalability for message-intensive applications because only one connection per client is used (whereas HTTP creates one request per message). Finally, WebSocket is part of Java EE 7, so you can use other technologies in the Java EE 7 stack.</p> 
      <h4>Scenario</h4> 
      <p>In this tutorial, you create Java WebSocket Home, a smart home control web application based on Java EE 7. Java WebSocket Home has a user interface for connecting and controlling fictitious devices from a web browser to a Java application. This application provides real-time updates to all clients that are connected to the Java WebSocket Home server. </p> 
      <h4>Software Requirements</h4> 
      <p>The following is a list of software requirements needed for this tutorial:</p> 
      <ul> 
       <li>Download and install the Java EE 7 software development kit (SDK) from <a href="http://www.oracle.com/technetwork/java/javaee/downloads/index.html">http://www.oracle.com/technetwork/java/javaee/downloads/index.html</a>.</li> 
       <li>Download and install the Java NetBeans 7.3.1 integrated development environment (IDE) from <a href="http://netbeans.org/downloads/">http://www.netbeans.org/downloads/index.html</a>.</li> 
       <li>Download and install Oracle GlassFish Server 4.0 from <a href="http://www.oracle.com/us/products/middleware/cloud-app-foundation/glassfish-server/overview/index.html">http://www.oracle.com/us/products/middleware/cloud-app-foundation/glassfish-server/overview/index.html</a>.</li> 
      </ul> 
      <h4>Prerequisites</h4> 
      <p>Before starting this tutorial, you should have: </p> 
      <ul> 
       <li>Knowledge of the Java programming language</li> 
       <li>Basic knowledge of Java EE 7</li> 
       <li>Basic knowledge of HTML 5, JavaScript, and cascading style sheets (CSS)</li> 
      </ul> 
     </div> 
    </section> 
    <section> 
     <h2>Introduction to the WebSocket API in Java EE 7</h2> 
     <div> 
      <p>Introduced as part of the HTML 5 initiative, the WebSocket protocol is a standard web technology that simplifies communication and connection management between clients and a server. By maintaining a constant connection, WebSocket provides full-duplex client/server communication. It also provides a low-latency, low-level communication that works on the underlying TCP/IP connection.</p> 
      <p>The Java API for WebSocket (<a href="http://jcp.org/en/jsr/detail?id=356">JSR-356</a>) simplifies the integration of WebSocket into Java EE 7 applications. </p>
      <p>Here are some of the features of the Java API for WebSocket: </p> 
      <ul> 
       <li>Annotation-driven programming that allows developers to use POJOs to interact with WebSocket lifecycle events</li> 
       <li>Interface-driven programming that allows developers to implement interfaces and methods to interact with WebSocket lifecycle events</li> 
       <li>Integration with other Java EE technologies (You can inject objects and Enterprise JavaBeans by using components such as Contexts and Dependency Injection.)</li> 
      </ul> 
     </div> 
    </section> 
    <section> 
     <h2>Creating a Java EE 7 Project</h2> 
     <div> 
      <p>In this section, you create a Java EE 7 web application.</p> 
      <ol> 
       <li> <p>Open the <strong>NetBeans IDE</strong>.</p> </li> 
       <li> <p>From the File menu, select <strong>New Project</strong>.</p> <img src="images/t30101.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New Project dialog box, perform the following steps: </p>
        <ol type="a"> 
         <li>Select <strong>Java Web</strong> from Categories.</li> 
         <li>Select <strong>Web Application</strong> from Projects.</li> 
         <li>Click <strong>Next</strong>.</li> 
        </ol> <img src="images/t30102.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>Enter <kbd>WebsocketHome</kbd> as the project name and click <strong>Next</strong>.</p> <img src="images/t30103.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New Web Application dialog box, perform the following steps:</p> 
        <ol type="a"> 
         <li>Select <strong>GlassFish Server</strong> from the Server list.</li> 
         <li>Enter <kbd>WebsocketHome</kbd> as the context path.</li> 
         <li>Click <strong>Finish</strong>.</li> 
        </ol> <img src="images/t30104.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>The <code>WebsocketHome</code> project has been created.</p> <img src="images/t30105.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>Right-click the <code><strong>WebsocketHome</strong></code> project and select <strong>Run</strong> to test your application.</p> <img src="images/t30106.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>A browser window displays a <em>TODO write content</em> message.</p> <img src="images/t30107.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
      </ol> 
      <p>You successfully created a Java EE 7 web application by using NetBeans.</p> 
     </div> 
    </section> 
    <section> 
     <h2>Creating the Device Model</h2> 
     <div> 
      <p>In this section, you create the class that contains a device's attributes.</p> 
      <ol> 
       <li> <p>Select <strong>File &gt; New File</strong>.</p> <img src="images/t40101.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New File dialog box, perform the following steps: </p> 
        <ol type="a"> 
         <li>Select <strong>Java</strong> from Categories.</li> 
         <li>Select <strong>Java Class</strong> from File Types.</li> 
         <li>Click <strong>Next</strong>.</li> 
        </ol> <img src="images/t40102.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New Java Class dialog box, perform the following steps: </p> 
        <ol type="a"> 
         <li>Enter <kbd>Device</kbd> as the class name.</li> 
         <li>Enter <kbd>org.example.model</kbd> as the package.</li> 
         <li>Click <strong>Finish</strong>.</li> 
        </ol> <img src="images/t40103.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>The <code>Device</code> class is added to the project.</p> <img src="images/t40104.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>Add the following code to the Device.java class to define the class constructor, and its getter and setter methods:</p> <pre class="collapsible" data-view-label="View Code" data-initial-state="hidden">
<code class="syntax-highlight" data-mode="text/x-java">
package org.example.model;

public class Device {

    private int id;
    private String name;
    private String status;
    private String type;
    private String description;

    public Device() {
    }
    
    public int getId() {
        return id;
    }
    
    public String getName() {
        return name;
    }

    public String getStatus() {
        return status;
    }

    public String getType() {
        return type;
    }
    
    public String getDescription() {
        return description;
    }

    public void setId(int id) {
        this.id = id;
    }
    
    public void setName(String name) {
        this.name = name;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public void setType(String type) {
        this.type = type;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
}
</code>
                                </pre> </li> 
       <li> <p>Select <strong>File &gt; Save</strong> to save the file.</p> <img src="images/t40105.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
      </ol> 
      <p>You successfully created the <code>Device</code> class.</p> 
     </div> 
    </section> 
    <section> 
     <h2>Creating the WebSocket Server Endpoint</h2> 
     <div> 
      <p>In this section, you create a WebSocket endpoint.</p> 
      <ol> 
       <li> <p>Select <strong>File &gt; New File</strong>.</p> <img src="images/t50101.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New File dialog box, perform the following steps: </p> 
        <ol type="a"> 
         <li>Select <strong>Java</strong> from Categories.</li> 
         <li>Select <strong>Java Class</strong> from File Types.</li> 
         <li>Click <strong>Next</strong>.</li> 
        </ol> <img src="images/t50102.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New Java Class dialog box, perform the following steps: </p> 
        <ol type="a"> 
         <li>Enter <kbd>DeviceWebSocketServer</kbd> as the class name.</li> 
         <li>Enter <kbd>org.example.websocket</kbd> as the package.</li> 
         <li>Click <strong>Finish</strong>.</li> 
        </ol> <img src="images/t50103.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>The <code>DeviceWebSocketServer</code> class is added to the project.</p> <img src="images/t50104.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>Define the WebSocket server endpoint path by adding the following code: </p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
package org.example.websocket;

import javax.websocket.server.ServerEndpoint;

@ServerEndpoint("/actions")
public class DeviceWebSocketServer {
    
}
</code>
                                </pre> </li> 
       <li> <p>Define the WebSocket lifecycle annotations by adding the following methods and imports to the <code>DeviceWebSocketServer</code> class: </p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;
    
@ServerEndpoint("/actions")
public class DeviceWebSocketServer {

    @OnOpen
        public void open(Session session) {
    }

    @OnClose
        public void close(Session session) {
    }

    @OnError
        public void onError(Throwable error) {
    }

    @OnMessage
        public void handleMessage(String message, Session session) {
    }
}    
</code>
                                </pre> <p>The WebSocket lifecycle annotations are mapped to Java methods. In this example, the <code>@OnOpen</code> annotation is mapped to the <code>open()</code> method; the <code>@OnMessage</code> annotation is mapped to the <code>handleMessage()</code> method; the <code>@OnClose</code> annotation to the <code>close()</code> method; and the <code>@OnError</code> annotation to the <code>onError()</code> method. </p></li> 
       <li> <p>Specify that the class is application-scoped by adding the <code><strong>@ApplicationScoped</strong></code> annotation and importing its package.</p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
...
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
@ServerEndpoint("/actions")
public class DeviceWebSocketServer {
...
}
</code>
                                </pre> </li> 
       <li> <p>Save the file.</p> </li> 
      </ol> 
      <p>You successfully created the WebSocket server endpoint.</p> 
     </div> 
    </section> 
    <section> 
     <h2>Creating the Session Handler</h2> 
     <div> 
      <p>In this section, you create a class for handling the sessions that are connected to the server.</p> 
      <ol> 
       <li> <p>Select <strong>File &gt; New File</strong>.</p> <img src="images/t60101.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New File dialog box, perform the following steps: </p> 
        <ol type="a"> 
         <li>Select <strong>Java</strong> from Categories.</li> 
         <li>Select <strong>Java Class</strong> from File Types.</li> 
         <li>Click <strong>Next</strong>.</li> 
        </ol> <img src="images/t60102.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New Java Class dialog box, perform the following steps: </p> 
        <ol type="a"> 
         <li>Enter <kbd>DeviceSessionHandler</kbd> as the class name.</li> 
         <li>Enter <kbd>org.example.websocket</kbd> as the package.</li> 
         <li>Click <strong>Finish</strong>.</li> 
        </ol> <img src="images/t60103.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>The <code>DeviceSessionHandler</code> class is added to the project.</p> <img src="images/t60104.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>Specify that the class is application-scoped by adding the <code><strong>@ApplicationScoped</strong></code> annotation and importing its corresponding package.</p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
package org.example.websocket;

import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class DeviceSessionHandler {
    
}
</code>                     
                                </pre> </li> 
       <li> <p>Declare a <code>HashSet</code> for storing the list of devices added to the application and the active sessions in the application, and import their packages.</p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
package org.example.websocket;

import javax.enterprise.context.ApplicationScoped;
import java.util.HashSet;
import java.util.Set;
import javax.websocket.Session;
import org.example.model.Device;

@ApplicationScoped
public class DeviceSessionHandler {
    private final Set&lt;Session&gt; sessions = new HashSet&lt;&gt;();
    private final Set&lt;Device&gt; devices = new HashSet&lt;&gt;();
}
</code>
                                </pre> <p><strong>Note:</strong> Each client connected to the application has its own session.</p> </li> 
       <li> <p>Define the following methods for adding and removing sessions to the server.</p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
package org.example.websocket;

...

@ApplicationScoped
public class DeviceSessionHandler {
    
    ...
        
    public void addSession(Session session) {
        sessions.add(session);
    }

    public void removeSession(Session session) {
        sessions.remove(session);
    }
}
</code>
                                </pre> </li> 
       <li> <p>Define the methods that operate on the <code>Device</code> object.</p> <p>These methods are:</p> 
        <ul> 
         <li><code>addDevice()</code> - Add a device to the application.</li> 
         <li><code>removeDevice()</code> - Remove a device from the application.</li> 
         <li><code>toggleDevice()</code> - Toggle the device status.</li> 
         <li><code>getDevices()</code> - Retrieve the list of devices and their attributes.</li> 
         <li><code>getDeviceById()</code> - Retrieve a device with a specific identifier.</li> 
         <li><code>createAddMessage()</code> - Build a JSON message for adding a device to the application.</li> 
         <li><code>sendToSession()</code> - Send an event message to a client.</li> 
         <li><code>sendToAllConnectedSessions()</code> - Send an event message to all connected clients.</li> 
        </ul> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
package org.example.websocket;
    
...    
public class DeviceSessionHandler {    
    
    ...
    
    public List&lt;Device&gt; getDevices() {
        return new ArrayList&lt;&gt;(devices);
    }

    public void addDevice(Device device) {
    }

    public void removeDevice(int id) {
    }

    public void toggleDevice(int id) {
    }

    private Device getDeviceById(int id) {
        return null;
    }

    private JsonObject createAddMessage(Device device) {
        return null;
    }

    private void sendToAllConnectedSessions(JsonObject message) {
    }

    private void sendToSession(Session session, JsonObject message) {
    }
}    
</code>
                                </pre> </li> 
       <li> <p>Save the file.</p> </li> 
      </ol> 
      <p>You successfully created the session handler.</p> 
     </div> 
    </section> 
    <section> 
     <h2>Rendering the User Interface</h2> 
     <div> 
      <p>In this section, you create the Java WebSocket Home user interface (UI) by using HTML5 and CSS.</p> 
      <ol> 
       <li> <p>Open the <code><strong>index.html</strong></code> file.</p> </li> 
       <li> <p>Enter the following code to add the proper elements for adding and displaying devices on the web browser client.</p> <pre class="collapsible" data-view-label="View Code" data-initial-state="hidden">
<code class="syntax-highlight" data-mode="text/html">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;&lt;/title&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
        &lt;script src="websocket.js"&gt;&lt;/script&gt;
        &lt;link rel="stylesheet" type="text/css" href="style.css"&gt;
    &lt;/head&gt;
    &lt;body&gt;

        &lt;div id="wrapper"&gt;
            &lt;h1&gt;Java Websocket Home&lt;/h1&gt;
            &lt;p&gt;Welcome to the Java WebSocket Home. Click the Add a device button to start adding devices.&lt;/p&gt;
            &lt;br /&gt;
            &lt;div id="addDevice"&gt;
                &lt;div class="button"&gt; &lt;a href="#" OnClick="showForm()"&gt;Add a device&lt;/a&gt; &lt;/div&gt;
                &lt;form id="addDeviceForm"&gt;
                    &lt;h3&gt;Add a new device&lt;/h3&gt;
                    &lt;span&gt;Name: &lt;input type="text" name="device_name" id="device_name"&gt;&lt;/span&gt;
                    &lt;span&gt;Type: 
                        &lt;select id="device_type"&gt;
                            &lt;option name="type" value="Appliance"&gt;Appliance&lt;/option&gt;
                            &lt;option name="type" value="Electronics"&gt;Electronics&lt;/option&gt;
                            &lt;option name="type" value="Lights"&gt;Lights&lt;/option&gt;
                            &lt;option name="type" value="Other"&gt;Other&lt;/option&gt;
                        &lt;/select&gt;&lt;/span&gt;

                    &lt;span&gt;Description:&lt;br /&gt;
                        &lt;textarea name="description" id="device_description" rows="2" cols="50"&gt;&lt;/textarea&gt;
                    &lt;/span&gt;

                    &lt;input type="button" class="button" value="Add" onclick=formSubmit()&gt;
                    &lt;input type="reset" class="button" value="Cancel" onclick=hideForm()&gt;
                &lt;/form&gt;
            &lt;/div&gt;
            &lt;br /&gt;
            &lt;h3&gt;Currently connected devices:&lt;/h3&gt;
            &lt;div id="content"&gt;
            &lt;/div&gt;
        &lt;/div&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code>
                                </pre> </li> 
       <li> <p>Save the file.</p> </li> 
       <li> <p>Select <strong>File &gt; New File</strong>.</p> <img src="images/t70101.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New File dialog dialog box, perform the following steps: </p> 
        <ol type="a"> 
         <li>Select <strong>Web</strong> from Categories.</li> 
         <li>Select <strong>Cascading Style Sheet</strong> from File Types.</li> 
         <li>Click <strong>Next</strong>.</li> 
        </ol> <img src="images/t70102.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New Cascading Style Sheet dialog box, perform the following steps: </p> 
        <ol type="a"> 
         <li>Enter <kbd>style</kbd> as the file name.</li> 
         <li>Select <kbd>Web Pages</kbd> as the location.</li> 
         <li>Click <strong>Finish</strong>.</li> 
        </ol> <img src="images/t70103.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>The <code>style.css</code> file is added to the project.</p> <img src="images/t70104.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>Copy the following code into the <code>style.css</code> file.</p> <pre class="collapsible" data-view-label="View Code" data-initial-state="hidden">
<code class="syntax-highlight" data-mode="text/html">
body {
    font-family: Arial, Helvetica, sans-serif;
    font-size: 80%;
    background-color: #1f1f1f;
}

#wrapper {
    width: 960px;
    margin: auto;
    text-align: left;
    color: #d9d9d9;
}

p {
    text-align: left;
}

.button {
    display: inline;
    color: #fff;
    background-color: #f2791d;
    padding: 8px;
    margin: auto;
    border-radius: 8px;
    -moz-border-radius: 8px;
    -webkit-border-radius: 8px;
    box-shadow: none;
    border: none;
}

.button:hover {
    background-color: #ffb15e;
}
.button a, a:visited, a:hover, a:active {
    color: #fff;
    text-decoration: none;
}

#addDevice {
    text-align: center;
    width: 960px;
    margin: auto;
    margin-bottom: 10px;
}

#addDeviceForm {
    text-align: left;
    width: 400px;
    margin: auto;
    padding: 10px;
}

#addDeviceForm span {
    display: block;
}

#content {
    margin: auto;
    width: 960px;
}

.device {
    width: 180px;
    height: 110px;
    margin: 10px;
    padding: 16px;
    color: #fff;
    vertical-align: top;
    border-radius: 8px;
    -moz-border-radius: 8px;
    -webkit-border-radius: 8px;
    display: inline-block;
}

.device.off {
    background-color: #c8cccf;
}

.device span {
    display: block;
}

.deviceName {
    text-align: center;
    font-weight: bold;
    margin-bottom: 12px;
}

.removeDevice {
    margin-top: 12px;
    text-align: center;
}

.device.Appliance {
    background-color: #5eb85e;
}

.device.Appliance a:hover {
    color: #a1ed82;
}

.device.Electronics {   
    background-color: #0f90d1;
}

.device.Electronics a:hover {
    color: #4badd1;
}

.device.Lights {
    background-color: #c2a00c;
}

.device.Lights a:hover {
    color: #fad232;
}

.device.Other {
    background-color: #db524d;
}

.device.Other a:hover {
    color: #ff907d;
}

.device a {
    text-decoration: none;
}

.device a:visited, a:active, a:hover {
    color: #fff;
}

.device a:hover {
    text-decoration: underline;
}
</code>
                                </pre> </li> 
       <li> <p>Save the file.</p> </li> 
      </ol> 
      <p>You successfully created the UI elements for the Java WebSocket Home application.</p> 
     </div> 
    </section> 
    <section> 
     <h2>Creating the WebSocket Client Endpoint</h2> 
     <div> 
      <p>In this section, you specify the client endpoint by using JavaScript.</p> 
      <ol> 
       <li> <p>Select <strong>File &gt; New File</strong>.</p> <img src="images/t80101.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the New File dialog box, perform the following steps: </p> 
        <ol type="a"> 
         <li>Select <strong>Web</strong> from Categories.</li> 
         <li>Select <strong>JavaScript File</strong> from File Types.</li> 
         <li>Click <strong>Next</strong>.</li> 
        </ol> <img src="images/t80102.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>Enter <kbd>websocket</kbd> as the file name and click <strong>Finish</strong>.</p> <img src="images/t80103.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>The <code>websocket.js</code> file is added to the project.</p> <img src="images/t80104.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>The file performs the following actions:</p> 
        <ul style="a"> 
         <li>Maps the WebSocket server endpoint to the URI defined in "Creating the WebSocket Server Endpoint".</li> 
         <li>Captures the JavaScript events for adding, removing, and changing a device's status and pushes those events to the WebSocket server. These methods are <code>addDevice()</code>, <code>removeDevice()</code>, and <code>toggleDevice()</code>. The actions are sent in JSON messages to the WebSocket server.</li> 
         <li>Defines a callback method for the WebSocket <code>onmessage</code> event. The <code>onmessage</code> event captures the events sent from the WebSocket server (in JSON) and processes those actions. In this application, these actions are usually rendering changes in the client UI.</li> 
         <li>Toggles the visibility of an HTML form for adding a new device.</li> 
        </ul> </li> 
       <li> <p>Add the following code to the <code>websocket.js</code> file.</p> <pre class="collapsible" data-view-label="View Code" data-initial-state="hidden">
<code>
window.onload = init;
var socket = new WebSocket("ws://localhost:8080/WebsocketHome/actions");
socket.onmessage = onMessage;

function onMessage(event) {
    var device = JSON.parse(event.data);
    if (device.action === "add") {
        printDeviceElement(device);
    }
    if (device.action === "remove") {
        document.getElementById(device.id).remove();
        //device.parentNode.removeChild(device);
    }
    if (device.action === "toggle") {
        var node = document.getElementById(device.id);
        var statusText = node.children[2];
        if (device.status === "On") {
            statusText.innerHTML = "Status: " + device.status + " (&lt;a href=\"#\" OnClick=toggleDevice(" + device.id + ")&gt;Turn off&lt;/a&gt;)";
        } else if (device.status === "Off") {
            statusText.innerHTML = "Status: " + device.status + " (&lt;a href=\"#\" OnClick=toggleDevice(" + device.id + ")&gt;Turn on&lt;/a&gt;)";
        }
    }
}

function addDevice(name, type, description) {
    var DeviceAction = {
        action: "add",
        name: name,
        type: type,
        description: description
    };
    socket.send(JSON.stringify(DeviceAction));
}

function removeDevice(element) {
    var id = element;
    var DeviceAction = {
        action: "remove",
        id: id
    };
    socket.send(JSON.stringify(DeviceAction));
}

function toggleDevice(element) {
    var id = element;
    var DeviceAction = {
        action: "toggle",
        id: id
    };
    socket.send(JSON.stringify(DeviceAction));
}

function printDeviceElement(device) {
    var content = document.getElementById("content");
    
    var deviceDiv = document.createElement("div");
    deviceDiv.setAttribute("id", device.id);
    deviceDiv.setAttribute("class", "device " + device.type);
    content.appendChild(deviceDiv);

    var deviceName = document.createElement("span");
    deviceName.setAttribute("class", "deviceName");
    deviceName.innerHTML = device.name;
    deviceDiv.appendChild(deviceName);

    var deviceType = document.createElement("span");
    deviceType.innerHTML = "&lt;b&gt;Type:&lt;/b&gt; " + device.type;
    deviceDiv.appendChild(deviceType);

    var deviceStatus = document.createElement("span");
    if (device.status === "On") {
        deviceStatus.innerHTML = "&lt;b&gt;Status:&lt;/b&gt; " + device.status + " (&lt;a href=\"#\" OnClick=toggleDevice(" + device.id + ")&gt;Turn off&lt;/a&gt;)";
    } else if (device.status === "Off") {
        deviceStatus.innerHTML = "&lt;b&gt;Status:&lt;/b&gt; " + device.status + " (&lt;a href=\"#\" OnClick=toggleDevice(" + device.id + ")&gt;Turn on&lt;/a&gt;)";
        //deviceDiv.setAttribute("class", "device off");
    }
    deviceDiv.appendChild(deviceStatus);

    var deviceDescription = document.createElement("span");
    deviceDescription.innerHTML = "&lt;b&gt;Comments:&lt;/b&gt; " + device.description;
    deviceDiv.appendChild(deviceDescription);

    var removeDevice = document.createElement("span");
    removeDevice.setAttribute("class", "removeDevice");
    removeDevice.innerHTML = "&lt;a href=\"#\" OnClick=removeDevice(" + device.id + ")&gt;Remove device&lt;/a&gt;";
    deviceDiv.appendChild(removeDevice);
}

function showForm() {
    document.getElementById("addDeviceForm").style.display = '';
}

function hideForm() {
    document.getElementById("addDeviceForm").style.display = "none";
}

function formSubmit() {
    var form = document.getElementById("addDeviceForm");
    var name = form.elements["device_name"].value;
    var type = form.elements["device_type"].value;
    var description = form.elements["device_description"].value;
    hideForm();
    document.getElementById("addDeviceForm").reset();
    addDevice(name, type, description);
}

function init() {
    hideForm();
}
</code>
                                </pre> </li> 
       <li> <p>Save the file.</p> </li> 
      </ol> 
      <p>You successfully created the WebSocket client endpoint and the defined actions for handling WebSocket events in the client.</p> 
     </div> 
    </section> 
    <section> 
     <h2>Processing WebSocket Events in the Server</h2> 
     <div> 
      <p>In this section, you process WebSocket lifecycle events in the <code>DeviceWebSocketServer</code> class.</p> 
      <ol> 
       <li> <p>Open the <code><strong>DeviceWebSocketServer</strong></code> class.</p> </li> 
       <li> <p>Inject a <code><strong>DeviceSessionHandler</strong></code> object to process the WebSocket lifecycle events in each session and import its corresponding package.</p> <pre class="collapsible" data-view-label="View Code" data-initial-state="hidden">
<code class="syntax-highlight" data-mode="text/x-java">
package org.example.websocket;

...
import javax.websocket.server.ServerEndpoint;
import javax.inject.Inject;

@ApplicationScoped
@ServerEndpoint("/actions")
public class DeviceWebSocketServer {
    
    @Inject
    private DeviceSessionHandler sessionHandler;
    
    @OnOpen
    public void open(Session session) {
    }
    
    ...
}    
</code>
                                </pre> </li> 
       <li> <p>Process the <code><strong>OnMessage</strong></code> WebSocket lifecycle event by adding the following code to the open method.</p> <pre class="collapsible" data-view-label="View Code" data-initial-state="hidden">
<code class="syntax-highlight" data-mode="text/x-java">
    @OnOpen
    public void open(Session session) {
        sessionHandler.addSession(session);
    }
</code>
                                </pre> <p>The <code><strong>OnMessage</strong></code> method performs the following actions:</p> 
        <ul> 
         <li>Reads device actions and attributes sent from the client.</li> 
         <li>Invokes the session handler to perform the proper operations on the specified <code>Device</code> object. In this application, the add action sent from the client invokes the <code>addDevice</code> method, the remove action invokes the <code>removeDevice</code> method, and the toggle action invokes the <code>toggleDevice</code> method.</li> 
        </ul> </li> 
       <li> <p>Process the <code><strong>OnOpen</strong></code> WebSocket event and add the missing imports.</p> <pre class="collapsible" data-view-label="View Code" data-initial-state="hidden">
<code class="syntax-highlight" data-mode="text/x-java">
package org.example.websocket;

...
import java.io.StringReader;
import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;
import org.example.model.Device;    

...

    @OnMessage
    public void handleMessage(String message, Session session) {

        try (JsonReader reader = Json.createReader(new StringReader(message))) {
            JsonObject jsonMessage = reader.readObject();

            if ("add".equals(jsonMessage.getString("action"))) {
                Device device = new Device();
                device.setName(jsonMessage.getString("name"));
                device.setDescription(jsonMessage.getString("description"));
                device.setType(jsonMessage.getString("type"));
                device.setStatus("Off");
                sessionHandler.addDevice(device);
            }

            if ("remove".equals(jsonMessage.getString("action"))) {
                int id = (int) jsonMessage.getInt("id");
                sessionHandler.removeDevice(id);
            }

            if ("toggle".equals(jsonMessage.getString("action"))) {
                int id = (int) jsonMessage.getInt("id");
                sessionHandler.toggleDevice(id);
            }
        }
    }
</code>
                                </pre> <p>The <code>OnOpen</code> event reads the attributes sent from the client in JSON and creates a new <code>Device</code> object with the specified parameters.</p> </li> 
       <li> <p>Implement the <code><strong>OnClose</strong></code> and <code><strong>OnError</strong></code> actions and add the missing imports.</p> <pre class="collapsible" data-view-label="View Code" data-initial-state="hidden">
<code class="syntax-highlight" data-mode="text/x-java">
package org.example.websocket;

...
import java.util.logging.Level;
import java.util.logging.Logger;

...
    
    @OnClose
    public void close(Session session) {
        sessionHandler.removeSession(session);
    }

    @OnError
    public void onError(Throwable error) {
        Logger.getLogger(DeviceWebSocketServer.class.getName()).log(Level.SEVERE, null, error);
    }
</code>
                                </pre> </li> 
       <li> <p>Save the file.</p> </li> 
      </ol> 
      <p>You successfully processed WebSocket lifecycle events in the <code>DeviceWebSocketServer</code> class.</p> 
     </div> 
    </section> 
    <section> 
     <h2>Implementing the WebSocket Actions in the Session Handler</h2> 
     <div> 
      <p>In this section, you perform operations in the <code>Device</code> object by using the <code>DeviceSessionHandler</code> class.</p> 
      <ol> 
       <li> <p>Open the <code><strong>DeviceSessionHandler.java</strong></code> class.</p> </li> 
       <li> <p>Define a variable for storing the device identifiers in the server.</p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
...
    
public class DeviceSessionHandler {

    private int deviceId = 0;
    private final Set&lt;Session&gt; sessions = new HashSet&lt;&gt;();
    private final Set&lt;Device&gt; devices = new HashSet&lt;&gt;();
    
    ...

}
</code>
                                </pre> </li> 
       <li> <p>Add the <code>for</code> loop to the <code><strong>addSession</strong></code> method to send the list of devices to the connected client.</p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
    public void addSession(Session session) {
        sessions.add(session);
        for (Device device : devices) {
            JsonObject addMessage = createAddMessage(device);
            sendToSession(session, addMessage);
        }

    }
</code>
                                </pre> </li> 
       <li> <p>Implement the <code>addDevice</code> method by adding the following code.</p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
    public void addDevice(Device device) {
        device.setId(deviceId);
        devices.add(device);
        deviceId++;
        JsonObject addMessage = createAddMessage(device);
        sendToAllConnectedSessions(addMessage);
    }
</code>
                                </pre> <p>The <code>addDevice</code> method performs the following actions:</p> 
        <ul> 
         <li>Creates a new <code>Device</code> object with the current value of the <code>deviceID</code> variable and the parameters specified by the user in the client.</li> 
         <li>Sends a message, in JSON, to all sessions or active clients in the WebSocket server.</li> 
        </ul> </li> 
       <li> <p>Implement the <code><strong>removeDevice</strong></code> method.</p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
    public void removeDevice(int id) {
        Device device = getDeviceById(id);
        if (device != null) {
            devices.remove(device);
            JsonProvider provider = JsonProvider.provider();
            JsonObject removeMessage = provider.createObjectBuilder()
                    .add("action", "remove")
                    .add("id", id)
                    .build();
            sendToAllConnectedSessions(removeMessage);
        }
    }
</code>
                                </pre> <p>The <code>removeDevice</code> method removes the device object specified by the user and sends a message, in JSON, to all sessions that are active in the WebSocket server.</p> </li> 
       <li> <p>Implement the <code><strong>toggleDevice</strong></code> method.</p> <pre class="collapsible" data-view-label="View Code">
<code class="syntax-highlight" data-mode="text/x-java">
    public void toggleDevice(int id) {
        JsonProvider provider = JsonProvider.provider();
        Device device = getDeviceById(id);
        if (device != null) {
            if ("On".equals(device.getStatus())) {
                device.setStatus("Off");
            } else {
                device.setStatus("On");
            }
            JsonObject updateDevMessage = provider.createObjectBuilder()
                    .add("action", "toggle")
                    .add("id", device.getId())
                    .add("status", device.getStatus())
                    .build();
            sendToAllConnectedSessions(updateDevMessage);
        }
    }
</code>
                                </pre> <p>The <code>toggleDevice</code> method toggles the device status and sends the event to all sessions that are still active in the WebSocket server.</p> </li> 
       <li> <p>Implement missing methods.</p> <pre class="collapsible" data-view-label="View Code" data-initial-state="hidden">
<code class="syntax-highlight" data-mode="text/x-java">
    private Device getDeviceById(int id) {
        for (Device device : devices) {
            if (device.getId() == id) {
                return device;
            }
        }
        return null;
    }

    private JsonObject createAddMessage(Device device) {
        JsonProvider provider = JsonProvider.provider();
        JsonObject addMessage = provider.createObjectBuilder()
                .add("action", "add")
                .add("id", device.getId())
                .add("name", device.getName())
                .add("type", device.getType())
                .add("status", device.getStatus())
                .add("description", device.getDescription())
                .build();
        return addMessage;
    }

    private void sendToAllConnectedSessions(JsonObject message) {
        for (Session session : sessions) {
            sendToSession(session, message);
        }
    }

    private void sendToSession(Session session, JsonObject message) {
        try {
            session.getBasicRemote().sendText(message.toString());
        } catch (IOException ex) {
            sessions.remove(session);
            Logger.getLogger(DeviceSessionHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
</code>
                                </pre> </li> 
       <li> <p>Save the file.</p> </li> 
      </ol> 
      <p>You successfully implemented the WebSocket actions in the session handler.</p> 
     </div> 
    </section> 
    <section> 
     <h2>Testing the Java WebSocket Home Application</h2> 
     <div> 
      <p>In this section, you test the Java WebSocket Home application.</p> 
      <ol> 
       <li> <p>Right-click the <code>WebsocketHome</code> project and click <strong>Run</strong> to build and deploy the project.</p> <img src="images/t110101.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>A Web browser displays the Java WebSocketHome index page.</p> </li> 
       <li> <p>Open another web browser and place it next to the first one.</p> <img src="images/t110102.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In either window, click <strong>Add a device</strong> to display the "Add a new device" form.</p> <img src="images/t110103.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>In the "Add a new device form," perform the following steps: </p> 
        <ol type="a"> 
         <li>Enter <kbd>Microwave</kbd> as the name.</li> 
         <li>Select <strong>Appliance</strong> as the type.</li> 
         <li>Enter <kbd>Kitchen</kbd> as the description.</li> 
         <li>Click <strong>Add</strong>.</li> 
        </ol> <img src="images/t110104.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>A device is added to the Java WebSocket Home server and it is rendered in both web browsers.</p> <img src="images/t110105.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p> <strong>Optional</strong>: Add more devices of different types.</p> <img src="images/t110106.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>On any device, click <strong>Turn on</strong>.</p> <img src="images/t110107.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>The device status changes to Off in the server and all clients.</p> <img src="images/t110108.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
       <li> <p>On any device, click <strong>Remove device</strong>.</p> <img src="images/t110109.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> <p>The device is removed from the server and all clients.</p> <img src="images/t110110.png" class="ScreenShot collapsible-outline" title="tooltip text" alt="" style="display: inline-block;"> </li> 
      </ol> 
      <p></p> 
     </div> 
    </section> 
    <section> 
     <h2>Summary</h2> 
     <div> 
      <p>Congratulations! You created a smart home control web application by using Java EE 7 and the WebSocket API. </p> 
      <p>You also learned how to: </p> 
      <ul> 
       <li>Define a WebSocket server endpoint in a Java class by using the WebSocket API annotations</li> 
       <li>Send messages to and from the client to the WebSocket server in JSON</li> 
       <li>Use the WebSocket API lifecycle annotations to handle WebSocket events</li> 
       <li>Process WebSocket lifecycle events in the client by using HTML5 and JavaScript</li> 
      </ul> 
      <h4>Resources</h4> 
      <p> For more information about the topics in this tutorial, see: </p> 
      <ul> 
       <li><a href="http://education.oracle.com/pls/web_prod-plq-dad/db_pages.getCourseDesc?dc=D77640GC10">Java EE 7: New Features</a>, an Oracle-instructed course on the new features of Java EE 7</li> 
       <li><a href="http://docs.oracle.com/javaee/7/tutorial/doc/home.htm">Java EE 7 Tutorial</a></li> 
       <li><a href="http://docs.oracle.com/javaee/7/tutorial/doc/websocket.htm#GKJIQ5">The Java EE 7 Tutorial chapter on WebSocket</a></li> 
       <li><a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java//WebSocket/WebSocket.html">Using WebSocket for Real-Time Communication in Java Platform, Enterpise Edition 7</a>, a tutorial about WebSocket for Java EE 7. </li>
       <li><a href="https://blogs.oracle.com/theaquarium/">The Aquarium Blog</a></li> 
       <li><a href="http://jcp.org/en/jsr/detail?id=356">JSR 356: Java API for WebSocket</a></li> 
       <li><a href="http://www.websocket.org">WebSocket.org, a WebSocket community</a></li> 
       <li><a href="http://www.oraclejavamagazine-digital.com/javamagazine_open/20130506#pg67">"Java EE7 - Embracing HTML5"</a> article in <em>Java Magazine</em></li> 
       <li> To learn more about Java EE 7, refer to additional OBEs in the <a href="http://www.oracle.com/goto/oll" target="_blank">Oracle Learning Library</a>.</li> 
      </ul> 
      <h4>Credits</h4> 
      <ul> 
       <li>Lead Curriculum Developer: Miguel Salazar</li> 
       <li>Other Contributors: Eduardo Moranchel</li> 
      </ul> 
     </div> 
    </section> 
   </div> 
   <!-- container --> 
   <div id="dialog-help" title="Help"> 
    <p>To navigate this Oracle by Example tutorial, note the following:</p> 
    <dl> 
     <dt>
      Topic List:
     </dt>
     <dd>
      Click a topic to navigate to that section.
     </dd> 
     <dt>
      Expand All Topics:
     </dt>
     <dd>
      Click the button to show or hide the details for the sections. By default, all topics are collapsed.
     </dd> 
     <dt>
      Hide All Images:
     </dt>
     <dd>
      Click the button to show or hide the screenshots. By default, all images are displayed.
     </dd> 
     <dt>
      Print:
     </dt>
     <dd>
      Click the button to print the content. The content that is currently displayed or hidden is printed.
     </dd> 
    </dl> 
   </div> 
   <div id="dialog" title="Topic List"> 
    <p>To navigate to a particular section in this tutorial, select the topic from the list.</p> 
    <ul> 
    </ul> 
   </div> 
   <footer> 
    <nav> 
     <a class="help" href="#"> Help</a>
     <a href="http://www.oracle.com/goto/oll"> OLL</a>
     <a href="http://www.oracle.com/us/corporate/index.html" onclick="navTrack('otn', 'en', 'footer', 'about oracle');" class="footerLinks"> About Oracle</a>
     <a href="http://apex.oracle.com/pls/apex/f?p=44785:34:0" onclick="navTrack('otn', 'en', 'footer', 'contact us');" class="footerLinks"> Contact Us</a>
     <a href="http://www.oracle.com/us/legal/terms/index.html" onclick="navTrack('otn', 'en', 'footer', 'terms of use');" class="footerLinks"> Terms of Use</a>
    </nav> 
   </footer> 
  </article>   
 </body>
</html>