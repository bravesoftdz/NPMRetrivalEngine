<!doctype html>
<html lang="en">
 <head> 
  <script>
    var isProduction = window.location.hostname === 'code.visualstudio.com';
    var isHomePage = window.location.pathname === '/';
    var isNodejsLanding = window.location.pathname === '/nodejs';
    var isDocsFirstStart = window.location.href.toLowerCase().split('.com')[1] === '/docs?start=true';
    
    function downloadExperiment(experimentId) {
        
        // Copied code from Google analytics
        // except for experimentId variable
        function utmx_section(){}function utmx(){}(function(){var
        k=experimentId,d=document,l=d.location,c=d.cookie;
        if(l.search.indexOf('utm_expid='+k)>0)return;
        function f(n){if(c){var i=c.indexOf(n+'=');if(i>-1){var j=c.
        indexOf(';',i);return escape(c.substring(i+n.length+1,j<0?c.
        length:j))}}}var x=f('__utmx'),xx=f('__utmxx'),h=l.hash;d.write(
        '<sc'+'ript src="'+'http'+(l.protocol=='https:'?'s://ssl':
        '://www')+'.google-analytics.com/ga_exp.js?'+'utmxkey='+k+
        '&utmx='+(x?x:'')+'&utmxx='+(xx?xx:'')+'&utmxtime='+new Date().
        valueOf()+(h?'&utmxhash='+escape(h.substr(1)):'')+
        '" type="text/javascript" charset="utf-8"><\/sc'+'ript>')})();
    
    }
    
    // Remember to create if statements in lower script as well. 
    if (isProduction) {
        // Don't remove. This is the example to follow
        // if (isHomePage) {
           // downloadExperiment('101350005-35');
        // }
        if (isDocsFirstStart) {
           // downloadExperiment('101350005-29');
        }
        if (isNodejsLanding) {
            downloadExperiment('101350005-36');
        }
    }
    </script> 
  <script>
    // this second script tag matters! Do not remove.
    if (isProduction) {
        // Don't remove. This is the example to follow.
        // if (isHomePage) {
           // utmx('url','A/B');
        // }
        if (isNodejsLanding) {
           utmx('url','A/B'); 
        }
    }
    
    </script> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <meta name="google-site-verification" content="cn5-gurGUvjtlzniBhOIPjfKHzuAplh_R9Ju9tuL0DM"> 
  <!-- Twitter and Facebook OpenGraph Metadata--> 
  <meta name="twitter:card" content="summary_large_image"> 
  <meta name="twitter:site" content="@code"> 
  <meta name="description" content="Get the best out of Visual Studio Code for JavaScript development"> 
  <meta name="keywords" content=""> 
  <meta name="ms.prod" content="vs-code"> 
  <meta name="ms.TOCTitle" content="JavaScript"> 
  <meta name="ms.ContentId" content="F54BB3D4-76FB-4547-A9D0-F725CEBB905C"> 
  <meta name="ms.date" content="9/7/2017"> 
  <meta name="ms.topic" content="article"> 
  <!-- Twitter and Facebook OpenGraph Metadata--> 
  <meta name="twitter:card" content="summary_large_image"> 
  <meta property="og:url" content="http://code.visualstudio.com/docs/languages/javascript"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="JavaScript Programming with Visual Studio Code"> 
  <meta property="og:description" content="Get the best out of Visual Studio Code for JavaScript development"> 
  <meta property="og:image" content="http://code.visualstudio.com/opengraphimg/opengraph-docs.png"> 
  <link rel="shortcut icon" href="/favicon.ico"> 
  <title>JavaScript Programming with Visual Studio Code</title> 
  <link rel="stylesheet" href="/vendor/bootstrap/css/bootstrap.min.css"> 
  <!-- EU Cookie Compliance CSS --> 
  <link rel="stylesheet" href="//uhf.microsoft.com/mscc/statics/mscc-0.3.4.min.css"> 
  <link rel="stylesheet" href="/style.css"> 
  <!--Google Analytics--> 
  <script>
    if (document.cookie.indexOf('MSCC=') !== -1) {
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    }
    </script> 
  <!-- End Google Analytics --> 
  <script>
    if (document.cookie.indexOf('MSCC=') !== -1) {
      var appInsights=window.appInsights||function(config){
          function r(config){t[config]=function(){var i=arguments;t.queue.push(function(){t[config].apply(t,i)})}}var t={config:config},u=document,e=window,o="script",s=u.createElement(o),i,f;for(s.src=config.url||"//az416426.vo.msecnd.net/scripts/a/ai.0.js",u.getElementsByTagName(o)[0].parentNode.appendChild(s),t.cookie=u.cookie,t.queue=[],i=["Event","Exception","Metric","PageView","Trace"];i.length;)r("track"+i.pop());return r("setAuthenticatedUserContext"),r("clearAuthenticatedUserContext"),config.disableExceptionTracking||(i="onerror",r("_"+i),f=e[i],e[i]=function(config,r,u,e,o){var s=f&&f(config,r,u,e,o);return s!==!0&&t["_"+i](config,r,u,e,o),s}),t
      }({
          instrumentationKey:"f18193ef-b93a-4f73-b640-e2ddd40507ae"
      });
    
      window.appInsights=appInsights;
      appInsights.trackPageView();
    }
    </script> 
  <!-- Google ADWords Begin --> 
  <!-- Google Code for Downloads Conversion Page
    In your html page, add the snippet and call
    goog_report_conversion when someone clicks on the
    chosen link or button. --> 
  <script type="text/javascript">
    if (document.cookie.indexOf('MSCC=') !== -1) {
      /* <![CDATA[ */
      goog_snippet_vars = function() {
        var w = window;
        w.google_conversion_id = 881159895;
        w.google_conversion_label = "bMMZCLvrj3MQ192VpAM";
        w.google_remarketing_only = false;
      }
      // DO NOT CHANGE THE CODE BELOW.
      goog_report_conversion = function(url) {
        goog_snippet_vars();
        window.google_conversion_format = "3";
        var opt = new Object();
        opt.onload_callback = function() {
        if (typeof(url) != 'undefined') {
          window.location = url;
        }
      }
      var conv_handler = window['google_trackConversion'];
      if (typeof(conv_handler) == 'function') {
        conv_handler(opt);
      }
    }
    /* ]]> */
    }
    </script> 
  <script type="text/javascript" src="//www.googleadservices.com/pagead/conversion_async.js">
    </script> 
  <!-- Google ADWords End --> 
  <!-- WEDCS --> 
  <script type="text/javascript">
    if (document.cookie.indexOf('MSCC=') !== -1) {
      // Defaults for varAutoFirePV and varCustomerTracking seem to work. varClickTracking doesn't, so called explicitly.
      var varClickTracking = 1;
      var Route = "20052";
      document.write("<script type='text/javascript' src='" + (window.location.protocol) + "//c.microsoft.com/ms.js'" + "'><\/script>");
    }
    </script> 
  <!-- End WEDCS --> 
  <link rel="alternate" type="application/atom+xml" title="RSS Feed for code.visualstudio.com" href="/feed.xml"> 
 </head> 
 <body> 
  <!-- EU Cookie Compliance JS --> 
  <script src="https://uhf.microsoft.com/mscc/statics/mscc-0.3.4.min.js"></script> 
  <div id="mscc-cookie-container"> 
   <div id="msccBanner" dir="ltr" data-site-name="uhf-vscode" data-mscc-version="0.3.4" data-nver="aspnet-2.0.5" data-sver="0.1.2" class="cc-banner" role="alert"> 
    <div class="cc-container"> 
     <svg class="cc-icon cc-v-center" x="0px" y="0px" viewbox="0 0 44 44" height="30px" fill="none" stroke="currentColor"> 
      <circle cx="22" cy="22" r="20" stroke-width="2"></circle> 
      <line x1="22" x2="22" y1="18" y2="33" stroke-width="3"></line> 
      <line x1="22" x2="22" y1="12" y2="15" stroke-width="3"></line> 
     </svg> 
     <span class="cc-v-center cc-text">This site uses cookies for analytics, personalized content and ads. By continuing to browse this site, you agree to this use.</span> 
     <a href="https://go.microsoft.com/fwlink/?linkid=845480" aria-label="Learn more about Microsoft’s Cookie Policy" id="msccLearnMore" data-mscc-ic="false" class="cc-link cc-v-center cc-float-right">Learn more</a> 
    </div> 
   </div> 
  </div> 
  <div id="main" itemscope itemtype="http://schema.org/SoftwareApplication"> 
   <a role="button" id="skip-to-content" class="link-button" href="#main-content">Skip to content<i>&nbsp;</i><span class="glyphicon glyphicon-menu-down"></span></a> 
   <div class="navbar navbar-inverse "> 
    <nav role="navigation"> 
     <div class="container"> 
      <div class="nav navbar-header"> 
       <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse" aria-label="Expand and Collapse Menu"> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
       <a class="navbar-brand" href="/"><span itemprop="name">Visual Studio Code</span></a> 
      </div> 
      <div class="navbar-collapse collapse"> 
       <ul class="nav navbar-nav navbar-left"> 
        <li class="active"><a id="nav-docs" href="/docs">Docs</a></li> 
        <li><a id="nav-updates" href="/updates">Updates</a></li> 
        <li><a id="nav-blogs" href="/blogs">Blog</a></li> 
        <li><a id="nav-community" href="/community">Community</a></li> 
        <li><a href="https://marketplace.visualstudio.com/VSCode" target="_blank" id="nav-extensions">Extensions</a></li> 
        <li><a id="nav-faqs" href="/docs/FAQ">FAQ</a></li> 
        <li class="visible-xs"><a href="https://www.github.com/Microsoft/vscode" target="_blank">GitHub Project</a></li> 
        <li class="search visible-xs"><a href="/Search">Search</a></li> 
       </ul> 
       <ul class="nav navbar-nav navbar-right"> 
        <li> <a href="/Search" title="Search" class="btn search-btn" id="nav-search"> <img class="search-icon" src="/icons/search.svg" width="16px" height="16px" alt="Search"> <img class="search-icon-inverted" src="/icons/search_dark.svg" width="16px" height="16px" alt="Search"> </a> </li> 
        <li class="search"> 
         <form class="nav-search search-form"> 
          <div class="input-group"> 
           <input type="text" name="q" class="search-box form-control" placeholder="Search Docs"> 
           <span class="input-group-btn"> <button tabindex="0" class="btn" type="submit" aria-label="Search"> <img class="search-icon" src="/icons/search.svg" width="16px" height="16px" alt="Search"> <img class="search-icon-inverted" src="/icons/search_dark.svg" width="16px" height="16px" alt="Search"> </button> </span> 
          </div> 
         </form> </li> 
        <!-- this was hiden in the home and download page, keeping it for now --> 
        <li><a itemprop="downloadUrl" class="link-button" href="/Download" id="nav-download"> <img class="download-icon" src="/icons/download.svg" width="16px" height="16px" alt="Download VS Code"> <img class="download-icon-inverted" src="/icons/download-black.svg" width="16px" height="16px" alt="Download VS Code"> <span class="hidden-sm">Download</span> </a></li> 
       </ul> 
      </div> 
     </div> 
    </nav> 
   </div> 
   <div class="updates-banner  "> 
    <div class="container"> 
     <p class="message"><a href="/updates" id="banner-link-updates">Version <span itemprop="softwareVersion">1.16</span></a> is now available! Read about the new features and fixes from August.</p> 
    </div> 
    <div tabindex="0" role="button" title="Dismiss this update" class="dismiss-btn" id="banner-dismiss-btn">
     <span class="sr-only">Dismiss this update</span>
     <span aria-hidden="true" class="glyph-icon"></span>
    </div> 
   </div> 
   <div role="main" id="main-content"> 
    <div class="container body-content docs"> 
     <div class="row"> 
      <div class="col-md-2"> 
       <nav id="docs-navbar" class="docs-nav visible-md visible-lg"> 
        <ul class="nav" id="main-nav"> 
         <li><a class="docs-home" href="/docs">Overview</a></li> 
         <li class="panel collapsed"> <a class="area" href="#setup-articles" data-parent="#main-nav" data-toggle="collapse">Setup</a> 
          <ul id="setup-articles" class="collapse "> 
           <li><a href="/docs/setup/setup-overview">Overview</a></li> 
           <li><a href="/docs/setup/linux">Linux</a></li> 
           <li><a href="/docs/setup/mac">Mac</a></li> 
           <li><a href="/docs/setup/windows">Windows</a></li> 
           <li><a href="/docs/setup/network">Network</a></li> 
           <li><a href="/docs/setup/additional-components">Additional Components</a></li> 
          </ul> </li> 
         <li class="panel collapsed"> <a class="area" href="#getstarted-articles" data-parent="#main-nav" data-toggle="collapse">Get Started</a> 
          <ul id="getstarted-articles" class="collapse "> 
           <li><a href="/docs/getstarted/introvideos">Intro Videos</a></li> 
           <li><a href="/docs/getstarted/tips-and-tricks">Tips and Tricks</a></li> 
           <li><a href="/docs/getstarted/userinterface">User Interface</a></li> 
           <li><a href="/docs/getstarted/themes">Themes</a></li> 
           <li><a href="/docs/getstarted/settings">Settings</a></li> 
           <li><a href="/docs/getstarted/keybindings">Key Bindings</a></li> 
           <li><a href="/docs/getstarted/locales">Display Language</a></li> 
          </ul> </li> 
         <li class="panel collapsed"> <a class="area" href="#editor-articles" data-parent="#main-nav" data-toggle="collapse">User Guide</a> 
          <ul id="editor-articles" class="collapse "> 
           <li><a href="/docs/editor/codebasics">Basic Editing</a></li> 
           <li><a href="/docs/editor/extension-gallery">Extension Marketplace</a></li> 
           <li><a href="/docs/editor/intellisense">IntelliSense</a></li> 
           <li><a href="/docs/editor/editingevolved">Code Navigation</a></li> 
           <li><a href="/docs/editor/debugging">Debugging</a></li> 
           <li><a href="/docs/editor/versioncontrol">Version Control</a></li> 
           <li><a href="/docs/editor/integrated-terminal">Integrated Terminal</a></li> 
           <li><a href="/docs/editor/tasks">Tasks</a></li> 
           <li><a href="/docs/editor/userdefinedsnippets">Creating your own Snippets</a></li> 
           <li><a href="/docs/editor/emmet">Emmet</a></li> 
           <li><a href="/docs/editor/command-line">Command Line</a></li> 
           <li><a href="/docs/editor/accessibility">Accessibility</a></li> 
          </ul> </li> 
         <li class="panel active expanded"> <a class="area" href="#languages-articles" data-parent="#main-nav" data-toggle="collapse">Languages</a> 
          <ul id="languages-articles" class="collapse in"> 
           <li><a href="/docs/languages/overview">Overview</a></li> 
           <li class="active"><a href="/docs/languages/javascript">JavaScript</a></li> 
           <li><a href="/docs/languages/json">JSON</a></li> 
           <li><a href="/docs/languages/html">HTML</a></li> 
           <li><a href="/docs/languages/css">CSS, Sass and Less</a></li> 
           <li><a href="/docs/languages/typescript">TypeScript</a></li> 
           <li><a href="/docs/languages/markdown">Markdown</a></li> 
           <li><a href="/docs/languages/cpp">C++</a></li> 
           <li><a href="/docs/languages/java">Java</a></li> 
           <li><a href="/docs/languages/php">PHP</a></li> 
           <li><a href="/docs/languages/python">Python</a></li> 
           <li><a href="/docs/languages/go">Go</a></li> 
           <li><a href="/docs/languages/dockerfile">Dockerfile</a></li> 
           <li><a href="/docs/languages/tsql">T-SQL</a></li> 
           <li><a href="/docs/languages/csharp">C#</a></li> 
          </ul> </li> 
         <li class="panel collapsed"> <a class="area" href="#nodejs-articles" data-parent="#main-nav" data-toggle="collapse">Node.js / JavaScript</a> 
          <ul id="nodejs-articles" class="collapse "> 
           <li><a href="/docs/nodejs/nodejs-tutorial">Node.js Tutorial</a></li> 
           <li><a href="/docs/nodejs/nodejs-debugging">Node.js Debugging</a></li> 
           <li><a href="/docs/nodejs/nodejs-deployment">Node.js Deployment</a></li> 
           <li><a href="/docs/nodejs/reactjs-tutorial">React Tutorial</a></li> 
           <li><a href="/docs/nodejs/angular-tutorial">Angular Tutorial</a></li> 
           <li><a href="/docs/nodejs/debugging-recipes">Debugging Recipes</a></li> 
           <li><a href="/docs/nodejs/extensions">Extensions</a></li> 
          </ul> </li> 
         <li class="panel collapsed"> <a class="area" href="#extensions-articles" data-parent="#main-nav" data-toggle="collapse">Extension Authoring</a> 
          <ul id="extensions-articles" class="collapse "> 
           <li><a href="/docs/extensions/overview">Overview</a></li> 
           <li><a href="/docs/extensions/yocode">Extension Generator</a></li> 
           <li><a href="/docs/extensions/example-hello-world">Example-Hello World</a></li> 
           <li><a href="/docs/extensions/example-word-count">Example-Word Count</a></li> 
           <li><a href="/docs/extensions/example-language-server">Example-Language Server</a></li> 
           <li><a href="/docs/extensions/example-debuggers">Example-Debuggers</a></li> 
           <li><a href="/docs/extensions/themes-snippets-colorizers">Themes, Snippets and Colorizers</a></li> 
           <li><a href="/docs/extensions/samples">Additional Examples</a></li> 
           <li><a href="/docs/extensions/debugging-extensions">Running and Debugging Extensions</a></li> 
           <li><a href="/docs/extensions/publish-extension">Publishing Extensions</a></li> 
           <li><a href="/docs/extensions/testing-extensions">Testing Extensions</a></li> 
          </ul> </li> 
         <li class="panel collapsed"> <a class="area" href="#extensionapi-articles" data-parent="#main-nav" data-toggle="collapse">Extensibility Reference</a> 
          <ul id="extensionapi-articles" class="collapse "> 
           <li><a href="/docs/extensionAPI/overview">Overview</a></li> 
           <li><a href="/docs/extensionAPI/patterns-and-principles">Principles and Patterns</a></li> 
           <li><a href="/docs/extensionAPI/language-support">Language Extension Guidelines</a></li> 
           <li><a href="/docs/extensionAPI/extension-manifest">Extension Manifest</a></li> 
           <li><a href="/docs/extensionAPI/extension-points">Contribution Points</a></li> 
           <li><a href="/docs/extensionAPI/activation-events">Activation Events</a></li> 
           <li><a href="/docs/extensionAPI/vscode-api">vscode namespace API</a></li> 
           <li><a href="/docs/extensionAPI/vscode-api-commands">Complex Commands</a></li> 
           <li><a href="/docs/extensionAPI/api-debugging">Debugging API</a></li> 
           <li><a href="/docs/extensionAPI/api-scm">Source Control API</a></li> 
           <li><a href="/docs/extensionAPI/api-markdown">Markdown Extension API</a></li> 
          </ul> </li> 
         <li class="panel collapsed"> <a class="area" href="#other-articles" data-parent="#main-nav" data-toggle="collapse">Other</a> 
          <ul id="other-articles" class="collapse "> 
           <li><a href="/docs/other/dotnet">.NET Core</a></li> 
           <li><a href="/docs/other/unity">Unity</a></li> 
           <li><a href="/docs/other/office">Office</a></li> 
          </ul> </li> 
        </ul> 
       </nav> 
       <nav id="small-nav" class="docs-nav hidden-md hidden-lg"> 
        <h4>Topics</h4> 
        <select id="small-nav-dropdown"> <option value="/docs">Overview</option> <optgroup label="Setup"> <option value="/docs/setup/setup-overview">Overview</option> <option value="/docs/setup/linux">Linux</option> <option value="/docs/setup/mac">Mac</option> <option value="/docs/setup/windows">Windows</option> <option value="/docs/setup/network">Network</option> <option value="/docs/setup/additional-components">Additional Components</option> </optgroup> <optgroup label="Get Started"> <option value="/docs/getstarted/introvideos">Intro Videos</option> <option value="/docs/getstarted/tips-and-tricks">Tips and Tricks</option> <option value="/docs/getstarted/userinterface">User Interface</option> <option value="/docs/getstarted/themes">Themes</option> <option value="/docs/getstarted/settings">Settings</option> <option value="/docs/getstarted/keybindings">Key Bindings</option> <option value="/docs/getstarted/locales">Display Language</option> </optgroup> <optgroup label="User Guide"> <option value="/docs/editor/codebasics">Basic Editing</option> <option value="/docs/editor/extension-gallery">Extension Marketplace</option> <option value="/docs/editor/intellisense">IntelliSense</option> <option value="/docs/editor/editingevolved">Code Navigation</option> <option value="/docs/editor/debugging">Debugging</option> <option value="/docs/editor/versioncontrol">Version Control</option> <option value="/docs/editor/integrated-terminal">Integrated Terminal</option> <option value="/docs/editor/tasks">Tasks</option> <option value="/docs/editor/userdefinedsnippets">Creating your own Snippets</option> <option value="/docs/editor/emmet">Emmet</option> <option value="/docs/editor/command-line">Command Line</option> <option value="/docs/editor/accessibility">Accessibility</option> </optgroup> <optgroup label="Languages"> <option value="/docs/languages/overview">Overview</option> <option value="/docs/languages/javascript" selected>JavaScript</option> <option value="/docs/languages/json">JSON</option> <option value="/docs/languages/html">HTML</option> <option value="/docs/languages/css">CSS, Sass and Less</option> <option value="/docs/languages/typescript">TypeScript</option> <option value="/docs/languages/markdown">Markdown</option> <option value="/docs/languages/cpp">C++</option> <option value="/docs/languages/java">Java</option> <option value="/docs/languages/php">PHP</option> <option value="/docs/languages/python">Python</option> <option value="/docs/languages/go">Go</option> <option value="/docs/languages/dockerfile">Dockerfile</option> <option value="/docs/languages/tsql">T-SQL</option> <option value="/docs/languages/csharp">C#</option> </optgroup> <optgroup label="Node.js / JavaScript"> <option value="/docs/nodejs/nodejs-tutorial">Node.js Tutorial</option> <option value="/docs/nodejs/nodejs-debugging">Node.js Debugging</option> <option value="/docs/nodejs/nodejs-deployment">Node.js Deployment</option> <option value="/docs/nodejs/reactjs-tutorial">React Tutorial</option> <option value="/docs/nodejs/angular-tutorial">Angular Tutorial</option> <option value="/docs/nodejs/debugging-recipes">Debugging Recipes</option> <option value="/docs/nodejs/extensions">Extensions</option> </optgroup> <optgroup label="Extension Authoring"> <option value="/docs/extensions/overview">Overview</option> <option value="/docs/extensions/yocode">Extension Generator</option> <option value="/docs/extensions/example-hello-world">Example-Hello World</option> <option value="/docs/extensions/example-word-count">Example-Word Count</option> <option value="/docs/extensions/example-language-server">Example-Language Server</option> <option value="/docs/extensions/example-debuggers">Example-Debuggers</option> <option value="/docs/extensions/themes-snippets-colorizers">Themes, Snippets and Colorizers</option> <option value="/docs/extensions/samples">Additional Examples</option> <option value="/docs/extensions/debugging-extensions">Running and Debugging Extensions</option> <option value="/docs/extensions/publish-extension">Publishing Extensions</option> <option value="/docs/extensions/testing-extensions">Testing Extensions</option> </optgroup> <optgroup label="Extensibility Reference"> <option value="/docs/extensionAPI/overview">Overview</option> <option value="/docs/extensionAPI/patterns-and-principles">Principles and Patterns</option> <option value="/docs/extensionAPI/language-support">Language Extension Guidelines</option> <option value="/docs/extensionAPI/extension-manifest">Extension Manifest</option> <option value="/docs/extensionAPI/extension-points">Contribution Points</option> <option value="/docs/extensionAPI/activation-events">Activation Events</option> <option value="/docs/extensionAPI/vscode-api">vscode namespace API</option> <option value="/docs/extensionAPI/vscode-api-commands">Complex Commands</option> <option value="/docs/extensionAPI/api-debugging">Debugging API</option> <option value="/docs/extensionAPI/api-scm">Source Control API</option> <option value="/docs/extensionAPI/api-markdown">Markdown Extension API</option> </optgroup> <optgroup label="Other"> <option value="/docs/other/dotnet">.NET Core</option> <option value="/docs/other/unity">Unity</option> <option value="/docs/other/office">Office</option> </optgroup> </select> 
       </nav> 
      </div> 
      <div class="col-sm-9 col-md-8 body"> 
       <div class="edit-github pull-right"> 
        <a href="https://github.com/Microsoft/vscode-docs/blob/master/docs/languages/javascript.md" tabindex="-1"> <button type="button" class="btn btn-default"><span class="glyphicon glyphicon-pencil"></span><i>&nbsp;</i><span class="hidden-xs">Edit</span></button> </a> 
       </div> 
       <h1>JavaScript in VS Code</h1> 
       <p>Visual Studio Code provides IntelliSense, debugging, and powerful editor features for JavaScript. VS Code uses the <a href="https://github.com/Microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio" class="external-link" target="_blank">JavaScript language service</a> to make authoring JavaScript easy. In addition to syntactical features like format, format on type and outlining, you also get language service features such as <strong>Peek</strong>, <strong>Go to Definition</strong>, <strong>Find all References</strong>, and <strong>Rename Symbol</strong>.</p> 
       <p><img src="/images/javascript_javascript_find_all_references.png" alt="JavaScript find all references"></p> 
       <h2 id="_intellisense" data-needslink="_intellisense">IntelliSense</h2> 
       <p>VS Code <a href="/docs/editor/intellisense">IntelliSense</a> is intelligent code completion, parameter info, and member lists. VS Code provides IntelliSense using TypeScript type declaration (typings) files (for example, <code>node.d.ts</code>) to provide metadata about the JavaScript based frameworks you are consuming in your application. Type declaration files are written in TypeScript so they can express the data types of parameters and functions, allowing VS Code to provide a rich IntelliSense experience.</p> 
       <p>Thanks to a feature called <code>Automatic Type Acquisition</code> you as a user do not have to worry about these type declaration files. VS Code will install them automatically for you.</p> 
       <p><img src="/images/javascript_javascript_intellisense.gif" alt="JavaScript intellisense animation"></p> 
       <p>For the details of how JavaScript IntelliSense works, including being based on type inference, JsDoc annotations, TypeScript declarations, and mixing JavaScript and TypeScript projects, see the <a href="https://github.com/Microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio" class="external-link" target="_blank">JavaScript language service documentation</a>.</p> 
       <p>When type inference does not provide the desired information, type information may be provided explicitly with JSDoc annotations. This document describes the <a href="https://github.com/Microsoft/TypeScript/wiki/JsDoc-support-in-JavaScript" class="external-link" target="_blank">JSDoc annotations</a> currently supported. In addition to objects, methods, and properties, the JavaScript IntelliSense window also provides basic word completion for the symbols in your file.</p> 
       <p>VS Code ships with the most stable version of the JavaScript language service. The same language service powers both JavaScript and TypeScript, so if you want to use a newer version, you can define the <code>typescript.tsdk</code> <a href="/docs/getstarted/settings">setting</a> to point to a directory containing the TypeScript <code>tsserver.js</code> file. See more details <a href="/docs/languages/typescript#_using-newer-typescript-versions">here</a>.</p> 
       <h2 id="_automatic-type-acquisition" data-needslink="_automatic-type-acquisition">Automatic Type Acquisition</h2> 
       <p>VS Code JavaScript IntelliSense for third-party libraries and modules is powered by <code>*.d.ts</code> type declaration (typings) files coming from the <a href="https://www.npmjs.com" class="external-link" target="_blank">npmjs</a> type declaration file repository.</p> 
       <p>In this image you can see IntelliSense, including the method signature, parameter info, and the method's documentation, for a popular library called <a href="https://lodash.com/" class="external-link" target="_blank">lodash</a>.</p> 
       <p><img src="/images/javascript_lodash_typings.png" alt="lodash typings"></p> 
       <p>Type declaration files are automatically downloaded and managed by Visual Studio Code for packages listed in your project's <code>package.json</code>.</p> 
       <pre><code class="json">    <span class="hljs-string">"dependencies"</span>: {
        "<span class="hljs-attribute">lodash</span>": <span class="hljs-value"><span class="hljs-string">"^4.17.0"</span> </span>}
</code></pre> 
       <p>If you are using Visual Studio Code 1.8+, you can alternately explicitly list packages to acquire type declaration files for in your <code>jsconfig.json</code>.</p> 
       <pre><code class="json">    <span class="hljs-string">"typeAcquisition"</span>: {
        "<span class="hljs-attribute">include</span>": <span class="hljs-value">[ <span class="hljs-string">"lodash"</span> ] </span>}
</code></pre> 
       <p>Now when you <code>require</code> or <code>import</code> <strong>lodash</strong>, VS Code will use the automatically downloaded type declaration files for the library to provide rich Intellisense. Most common JavaScript libraries have type declaration files available. You can search for a library's type declaration file package using the <a href="https://microsoft.github.io/TypeSearch" class="external-link" target="_blank">TypeSearch</a> site.</p> 
       <h3 id="_fixing-npm-not-installed-warning-for-automatic-type-acquisition" data-needslink="_fixing-npm-not-installed-warning-for-automatic-type-acquisition">Fixing NPM not installed warning for Automatic Type Acquisition</h3> 
       <p>Automatic Type Acquisition (ATA) uses <a href="https://www.npmjs.com" class="external-link" target="_blank">npm</a> to install and manage Type Declaration (typings) files. To ensure that Automatic Type Acquisition works properly, first ensure that you have npm installed on your machine.</p> 
       <p>If you have npm installed but still see a warning message, you can explicitly tell VS Code where npm is installed with the <code>"typescript.npm"</code> setting. This should be set to the full path of the npm executable on your machine, and this does not have to match the version of npm you are using to manage packages in your workspace. <code>typescript.npm</code> requires TypeScript 2.3.4+.</p> 
       <h2 id="_javascript-project-jsconfigjson" data-needslink="_javascript-project-jsconfigjson">JavaScript Project (jsconfig.json)</h2> 
       <p>The presence of a <a href="/docs/languages/jsconfig">jsconfig.json</a> file in a directory indicates that the directory is the root of a JavaScript project. <code>jsconfig.json</code> specifies the root files and the options for the language features provided by the <a href="https://github.com/Microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio" class="external-link" target="_blank">JavaScript language service</a>. For common setups a <code>jsconfig.json</code> file is not required, however, there are situations when you will want to add a <code>jsconfig.json</code>.</p> 
       <ul> 
        <li>Not all files should be in your JavaScript project (for example, you want to exclude some files from showing IntelliSense). This situation is common with front-end and back-end code.</li> 
        <li>Your workspace contains more than one project context. In this situation, you should add a <code>jsconfig.json</code> file at the root folder for each project.</li> 
        <li>You are using the TypeScript compiler to down-level compile JavaScript source code.</li> 
       </ul> 
       <h3 id="_location-of-jsconfigjson" data-needslink="_location-of-jsconfigjson">Location of jsconfig.json</h3> 
       <p>To define our code as a JavaScript project, create <code>jsconfig.json</code> at the root of your JavaScript code as shown below. A JavaScript project is the source files of the project and should not include the derived or packaged files (such as a <code>dist</code> directory).</p> 
       <p><img src="/images/javascript_jsconfig_setup.png" alt="jsconfig setup"></p> 
       <p>In more complex projects, you may have more than one <code>jsconfig.json</code> file defined inside a workspace. You will want to do this so that the source code in one project does not appear in the IntelliSense of another project.</p> 
       <p>Illustrated below is a project with a <code>client</code> and <code>server</code> folder, showing two separate JavaScript projects:</p> 
       <p><img src="/images/javascript_complex_jsconfig_setup.png" alt="multiple jsconfigs"></p> 
       <h3 id="_writing-jsconfigjson" data-needslink="_writing-jsconfigjson">Writing jsconfig.json</h3> 
       <p>Below is a simple template for <code>jsconfig.json</code> file which defines the JavaScript <code>target</code> to be <code>ES6</code> and the <code>exclude</code> attribute excludes the <code>node_modules</code> folder. You can copy and paste this code into your <code>jsconfig.json</code> file.</p> 
       <pre><code class="json">{
    "<span class="hljs-attribute">compilerOptions</span>": <span class="hljs-value">{ "<span class="hljs-attribute">target</span>": <span class="hljs-value"><span class="hljs-string">"ES6"</span> </span>}</span>,
    "<span class="hljs-attribute">exclude</span>": <span class="hljs-value">[ <span class="hljs-string">"node_modules"</span>, <span class="hljs-string">"**/node_modules/*"</span> ] </span>}
</code></pre> 
       <p>The <code>exclude</code> attribute tells the language service which files are and are not part of your source code. If IntelliSense is slow, add folders to your <code>exclude</code> list (VS Code will prompt you to do this if it detects slow completions). You will want to <code>exclude</code> files generated by a build process (such as a <code>dist</code> directory). These files will cause suggestions to show up twice and will slow down IntelliSense.</p> 
       <p>You can explicitly set the files in your project using the <code>include</code> attribute. If no <code>include</code> attribute is present, then this defaults to including all files in the containing directory and subdirectories. When a <code>include</code> attribute is specified, only those files are included.</p> 
       <p>Here is an example with an explicit <code>include</code> attribute:</p> 
       <pre><code class="json">{
    "<span class="hljs-attribute">compilerOptions</span>": <span class="hljs-value">{ "<span class="hljs-attribute">target</span>": <span class="hljs-value"><span class="hljs-string">"ES6"</span> </span>}</span>,
    "<span class="hljs-attribute">include</span>": <span class="hljs-value">[ <span class="hljs-string">"src/**/*"</span> ] </span>}
</code></pre> 
       <p>The best practice, and least error prone route, is to use the <code>include</code> attribute with a single <code>src</code> folder. Note that the file paths in <code>exclude</code> and <code>include</code> are relative to the location of <code>jsconfig.json</code>.</p> 
       <p>See <a href="/docs/languages/jsconfig">here</a> for the full documentation of <code>jsconfig.json</code>.</p> 
       <blockquote> 
        <p><strong>Note:</strong> <code>jsconfig.json</code> is the same as a <code>tsconfig.json</code> file, only with <code>allowJS</code> set to true. See <a href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html" class="external-link" target="_blank">the documentation for <code>tsconfig.json</code></a> here to see other available options.</p> 
       </blockquote> 
       <h2 id="_debugging" data-needslink="_debugging">Debugging</h2> 
       <p>VS Code comes with great debugging support for JavaScript. Set breakpoints, inspect objects, navigate the call stack, and execute code in the Debug Console. See more about debugging <a href="/docs/editor/debugging">here</a>.</p> 
       <h3 id="_debug-client-side" data-needslink="_debug-client-side">Debug Client Side</h3> 
       <p>You can debug your client side code using a browser debugger such as <a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome" class="external-link" target="_blank">Debugger for Chrome</a>, <a href="https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-edge" class="external-link" target="_blank">Debugger for Edge</a> or <a href="https://marketplace.visualstudio.com/items?itemName=hbenl.vscode-firefox-debug" class="external-link" target="_blank">Debugger for Firefox</a>.</p> 
       <h3 id="_debug-server-side" data-needslink="_debug-server-side">Debug Server Side</h3> 
       <p>Debug Node.js in VS Code using the built-in debugger. Setup is easy and you can read a tutorial for Node.js debugging <a href="/docs/nodejs/nodejs-tutorial#_debugging-your-express-application">here</a>.</p> 
       <p><img src="/images/javascript_debug_data_inspection.gif" alt="debug data inspection"></p> 
       <h2 id="_type-checking-and-quick-fixes-for-javascript-files" data-needslink="_type-checking-and-quick-fixes-for-javascript-files">Type Checking and Quick Fixes for JavaScript Files</h2> 
       <p>VS Code allows you to leverage some of TypeScript's advanced type checking and error reporting functionality in regular JavaScript files. This is a great way to catch common programming mistakes. These type checks also enable some exciting quickfixes for JavaScript, including <em>add missing import</em> and <em>add missing property</em>.</p> 
       <p><img src="/images/javascript_checkjs-example.gif" alt="Using type checking and quick fixes in a JavaScript file"></p> 
       <p>TypeScript can infer types in <code>.js</code> files same as in <code>.ts</code> files. When types cannot be inferred, they can be specified using JSDoc comments. You can read more about how TypeScript uses JSDocs for JavaScript type checking <a href="https://github.com/Microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files" class="external-link" target="_blank">here</a>.</p> 
       <p>Type checking of JavaScript is optional and opt-in. Existing JavaScript validation tools such as ESLint can be used alongside the new built-in type checking functionality.</p> 
       <p>You can get started with type checking a few different ways depending on your needs.</p> 
       <p><strong>Per file</strong></p> 
       <p>The easiest way to enable type checking in a JavaScript file is by adding <code>// @ts-check</code> to the top of a file.</p> 
       <pre><code class="js"><span class="hljs-comment">// @ts-check</span>
<span class="hljs-keyword">let</span> easy = <span class="hljs-string">'abc'</span>
easy = <span class="hljs-number">123</span> <span class="hljs-comment">// Error: Type '123' is not assignable to type 'string'</span>
</code></pre> 
       <p>Using <code>// @ts-check</code> is a good approach if you just want to try type checking in a few files but not yet enable it for an entire codebase.</p> 
       <p><strong>Using a Setting</strong></p> 
       <p>To enable type checking for all JavaScript files without changing any code, just add <code>"javascript.implicitProjectConfig.checkJs": true</code> to your workspace or user settings. This enables type checking for any JavaScript file that is not part of a <code>jsconfig.json</code> or <code>tsconfig.json</code> project.</p> 
       <p>You can opt individual files out of type checking with a <code>// @ts-nocheck</code> comment at the top of the file:</p> 
       <pre><code class="js"><span class="hljs-comment">// @ts-nocheck</span>
<span class="hljs-keyword">let</span> easy = <span class="hljs-string">'abc'</span>
easy = <span class="hljs-number">123</span> <span class="hljs-comment">// no error</span>
</code></pre> 
       <p>You can also disable individual errors in a JavaScript file using a <code>// @ts-ignore</code> comment on the line before the error:</p> 
       <pre><code class="js"><span class="hljs-keyword">let</span> easy = <span class="hljs-string">'abc'</span>
<span class="hljs-comment">// @ts-ignore</span>
easy = <span class="hljs-number">123</span> <span class="hljs-comment">// no error</span>
</code></pre> 
       <p><strong>Using a JSConfig or TSConfig</strong></p> 
       <p>To enable type checking for JavaScript files that are part of a <code>jsconfig.json</code> or <code>tsconfig.json</code>, simply add <code>"checkJs": true</code> to the project's compiler options:</p> 
       <p><code>jsconfig.json</code>:</p> 
       <pre><code class="json">{
    "<span class="hljs-attribute">compilerOptions</span>": <span class="hljs-value">{ "<span class="hljs-attribute">checkJs</span>": <span class="hljs-value"><span class="hljs-literal">true</span> </span>}</span>,
    "<span class="hljs-attribute">exclude</span>": <span class="hljs-value">[ <span class="hljs-string">"node_modules"</span>, <span class="hljs-string">"**/node_modules/*"</span> ] </span>}
</code></pre> 
       <p><code>tsconfig.json</code>:</p> 
       <pre><code class="json">{
    "<span class="hljs-attribute">compilerOptions</span>": <span class="hljs-value">{ "<span class="hljs-attribute">allowJs</span>": <span class="hljs-value"><span class="hljs-literal">true</span></span>, "<span class="hljs-attribute">checkJs</span>": <span class="hljs-value"><span class="hljs-literal">true</span> </span>}</span>,
    "<span class="hljs-attribute">exclude</span>": <span class="hljs-value">[ <span class="hljs-string">"node_modules"</span>, <span class="hljs-string">"**/node_modules/*"</span> ] </span>}
</code></pre> 
       <p>This enables type checking for all JavaScript files in the project. You can use <code>// @ts-nocheck</code> to disable type checking per file.</p> 
       <p>JavaScript type checking requires TypeScript 2.3. If you are unsure what version of TypeScript is currently active in your workspace, simply run the <strong>TypeScript: Select TypeScript Version</strong> command to check.</p> 
       <h3 id="_global-variables-and-type-checking" data-needslink="_global-variables-and-type-checking">Global Variables and Type Checking</h3> 
       <p>Let's say that you are working in legacy JavaScript code that uses global variables or non-standard DOM APIs:</p> 
       <pre><code class="ts"><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.webkitNotifications.requestPermission() === CAN_NOTIFY) {
        <span class="hljs-built_in">window</span>.webkitNotifications.createNotification(<span class="hljs-literal">null</span>, <span class="hljs-string">'Woof!'</span>, <span class="hljs-string">'?'</span>).show()
    } <span class="hljs-keyword">else</span> {
        alert(<span class="hljs-string">'Could not notify'</span>)
    }
}
</code></pre> 
       <p>If you try to use <code>// @ts-check</code> with the above code, you'll see a number of errors about the use of global variables:</p> 
       <ol> 
        <li><code>Line 2</code> - <code>Property 'webkitNotifications' does not exist on type 'Window'.</code></li> 
        <li><code>Line 2</code> - <code>Cannot find name 'CAN_NOTIFY'.</code></li> 
        <li><code>Line 3</code> - <code>Property 'webkitNotifications' does not exist on type 'Window'.</code></li> 
       </ol> 
       <p>If you want to continue using <code>// @ts-check</code> but are confident that these are not actual issues with your application, you have to let TypeScript know about these global variables.</p> 
       <p>To start, <a href="#__javascript-project-jsconfigjson">create a <code>jsconfig.json</code></a> at the root of your project:</p> 
       <pre><code class="json">{
    "<span class="hljs-attribute">compilerOptions</span>": <span class="hljs-value">{ }</span>,
    "<span class="hljs-attribute">exclude</span>": <span class="hljs-value">[ <span class="hljs-string">"node_modules"</span>, <span class="hljs-string">"**/node_modules/*"</span> ] </span>}
</code></pre> 
       <p>Then reload VS Code to make sure the change is applied. The presence of a <code>jsconfig.json</code> lets TypeScript know that your Javascript files are part of a larger project.</p> 
       <p>Now create a <code>globals.d.ts</code> file somewhere your workspace:</p> 
       <pre><code class="ts"><span class="hljs-interface"><span class="hljs-keyword">interface</span> Window </span>{
    webkitNotifications: <span class="hljs-built_in">any</span>;
}

<span class="hljs-keyword">declare</span> <span class="hljs-keyword">var</span> CAN_NOTIFY: <span class="hljs-built_in">number</span>;
</code></pre> 
       <p><code>d.ts</code> files are type declarations. In this case, <code>globals.d.ts</code> lets TypeScript know that a global <code>CAN_NOTIFY</code> exists and that a <code>webkitNotifications</code> property exists on <code>window</code>. You can read more about writing <code>d.ts</code> <a href="https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html" class="external-link" target="_blank">here</a>. <code>d.ts</code> files do not change how JavaScript is evaluated, they are used only for providing better JavaScript language support.</p> 
       <h2 id="_linters" data-needslink="_linters">Linters</h2> 
       <p>A <a href="https://en.wikipedia.org/wiki/Lint_%28software%29" class="external-link" target="_blank">linter</a> is a tool that provides warnings for suspicious looking code. VS Code supports linters through <a href="/docs/editor/extension-gallery">extensions</a>. Linters provide warnings, errors, and light bulb actions.</p> 
       <p>VS Code provides support for JavaScript linters, including <a href="http://eslint.org/" class="external-link" target="_blank">ESLint</a>, <a href="http://jshint.com/" class="external-link" target="_blank">JSHint</a> and <a href="https://standardjs.com/" class="external-link" target="_blank">StandardJS</a>. If enabled, the JavaScript code is validated as you type and you can navigate to reported problems and fix them inside VS Code.</p> 
       <p><img src="/images/javascript_eslint_warning.png" alt="linter warning"></p> 
       <blockquote> 
        <p><strong>Tip:</strong> In the above example, the error comes from <code>eslint</code>. Error messages will be prefixed (see above <code>[eslint]</code>) by the originator of the message. Error messages from the JavaScript language service are prefixed <code>js</code>.</p> 
       </blockquote> 
       <blockquote> 
        <p><strong>Tip</strong> You can disable default JavaScript validation by setting <code>"javascript.validate.enable": false</code> in your <a href="/docs/getstarted/settings">settings</a>.</p> 
       </blockquote> 
       <div class="marketplace-extensions-javascript-linters"></div> 
       <blockquote> 
        <p><strong>Tip:</strong> This list is dynamically queried from the <a href="https://marketplace.visualstudio.com" class="external-link" target="_blank">VS Code Marketplace</a>. Read the description and reviews to decide if the extension is right for you.</p> 
       </blockquote> 
       <p>A linter extension may require an external tool. The steps below show how to setup ESLint. The process is similar for other linters.</p> 
       <ol> 
        <li>Install the linter globally or inside the workspace folder that contains the JavaScript code to be validated. For example, using <code>npm install -g eslint</code>.</li> 
        <li>Install the <a href="https://marketplace.visualstudio.com/items/dbaeumer.vscode-eslint" class="external-link" target="_blank">ESLint</a> extension.</li> 
        <li>Create a <code>.eslintrc.json</code> file in the root of your workspace to configure the linter. You can use <code>eslint --init</code> to create an initial version of the <code>.eslintrc.json</code> file.</li> 
       </ol> 
       <blockquote> 
        <p><strong>Tip:</strong> You get IntelliSense and hovering inside the <code>.eslintrc.json</code> file.</p> 
       </blockquote> 
       <blockquote> 
        <p><strong>Tip:</strong> The linter is enabled after installation. You can disable a linter with the corresponding <code>.enable</code> <a href="/docs/getstarted/settings">setting</a>. For ESLint, this would be setting <code>"eslint.enable" : false</code>.</p> 
       </blockquote> 
       <p>It is recommended that you enable the linter rules that warn about undefined and unused variables. To do this, put the following options in your <code>.eslintrc.json</code> file.</p> 
       <pre><code class="json"><span class="hljs-string">"no-undef"</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">"no-unused-vars"</span>: <span class="hljs-number">1</span>,
</code></pre> 
       <p>You can also control when a linter runs with the linter <code>.run</code> setting. The two options are the default <code>onType</code> after each key stroke and <code>onSave</code> after you save your file.</p> 
       <p>Here are a few useful resources when using ESLint.</p> 
       <ul> 
        <li><a href="http://eslint.org/docs/rules/" class="external-link" target="_blank">Complete list of ESLint Rules</a></li> 
        <li><a href="http://eslint.org/docs/user-guide/configuring" class="external-link" target="_blank">Configuring ESLint</a></li> 
        <li><a href="http://eslint.org/docs/user-guide/getting-started" class="external-link" target="_blank">Getting Started with ESLint</a></li> 
       </ul> 
       <h2 id="_snippets" data-needslink="_snippets">Snippets</h2> 
       <p>VS Code has several built-in snippets that will come up as you type or you can press <span class="dynamic-keybinding" data-osx="?Space" data-win="Ctrl+Space" data-linux="Ctrl+Space"><span class="keybinding">?Space</span> (Windows, Linux <span class="keybinding">Ctrl+Space</span>)</span> (<strong>Trigger Suggest</strong>) and you will see a context specific list of suggestions.</p> 
       <p><img src="/images/javascript_javascript_snippets.gif" alt="built in javascript snippet foreach"></p> 
       <blockquote> 
        <p><strong>Tip:</strong> You can add in your own snippets for JavaScript. See <a href="/docs/editor/userdefinedsnippets">User Defined Snippets</a> to find out how.</p> 
       </blockquote> 
       <p>You may not want to show snippets. You can disable them by setting <code>editor.snippetSuggestions</code> to <code>"none"</code> in your <a href="/docs/getstarted/settings">settings</a> file. If you'd like to see snippets, you can specify the order relative to suggestions; at the top (<code>"top"</code>), at the bottom (<code>"bottom"</code>), or inlined ordered alphabetically (<code>"inline"</code>). The default is <code>"inline"</code>.</p> 
       <p>You can enable tab completions with <code>editor.tabCompletion</code> setting. After typing the prefix of a snippet, press <span class="keybinding">Tab</span> to insert it.</p> 
       <h2 id="_use-next-generation-javascript" data-needslink="_use-next-generation-javascript">Use Next Generation JavaScript</h2> 
       <h3 id="_run-babel-inside-vs-code" data-needslink="_run-babel-inside-vs-code">Run Babel inside VS Code</h3> 
       <p>The <a href="https://babeljs.io" class="external-link" target="_blank">Babel</a> transpiler turns ES6 files into readable ES5 JavaScript with Source Maps. You can easily integrate <strong>Babel</strong> into your workflow by adding the configuration below to your <code>tasks.json</code> file (located under the workspace's <code>.vscode</code> folder). The <code>isBuildCommand</code> switch makes this task the <strong>Task: Run Build Task</strong> gesture. <code>isBackground</code> tells VS Code to keep running this task in the background. To learn more, go to <a href="/docs/editor/tasks">Tasks</a>.</p> 
       <pre><code class="json">{
    "<span class="hljs-attribute">version</span>": <span class="hljs-value"><span class="hljs-string">"0.1.0"</span></span>,
    "<span class="hljs-attribute">command</span>": <span class="hljs-value"><span class="hljs-string">"${workspaceRoot}/node_modules/.bin/babel"</span></span>,
    "<span class="hljs-attribute">isShellCommand</span>": <span class="hljs-value"><span class="hljs-literal">true</span></span>,
    "<span class="hljs-attribute">tasks</span>": <span class="hljs-value">[ { "<span class="hljs-attribute">args</span>": <span class="hljs-value">[<span class="hljs-string">"src"</span>, <span class="hljs-string">"--out-dir"</span>, <span class="hljs-string">"lib"</span>, <span class="hljs-string">"-w"</span>, <span class="hljs-string">"--source-maps"</span>]</span>, "<span class="hljs-attribute">taskName</span>": <span class="hljs-value"><span class="hljs-string">"watch"</span></span>, "<span class="hljs-attribute">suppressTaskName</span>": <span class="hljs-value"><span class="hljs-literal">true</span></span>, "<span class="hljs-attribute">isBuildCommand</span>": <span class="hljs-value"><span class="hljs-literal">true</span></span>, "<span class="hljs-attribute">isBackground</span>": <span class="hljs-value"><span class="hljs-literal">true</span> </span>} ] </span>}
</code></pre> 
       <p>Once you have added this, you can start <strong>Babel</strong> with the <span class="dynamic-keybinding" data-osx="??B" data-win="Ctrl+Shift+B" data-linux="Ctrl+Shift+B"><span class="keybinding">??B</span> (Windows, Linux <span class="keybinding">Ctrl+Shift+B</span>)</span> (<strong>Run Build Task</strong>) command and it will compile all files from the <code>src</code> directory into the <code>lib</code> directory.</p> 
       <blockquote> 
        <p><strong>Tip:</strong> For help with Babel CLI see the instructions <a href="https://babeljs.io/docs/setup/#installation" class="external-link" target="_blank">here</a>. The example above uses the CLI option.</p> 
       </blockquote> 
       <h3 id="_use-the-typescript-compiler" data-needslink="_use-the-typescript-compiler">Use the TypeScript Compiler</h3> 
       <p>One of the key features TypeScript provides is the ability to use the latest JavaScript language features, and emit code that can execute in JavaScript runtimes that don't yet understand those newer features. With JavaScript using the same language service, it too can now take advantage of this same feature.</p> 
       <p>The TypeScript compiler <code>tsc</code> can down-level compile JavaScript files from ES6 to another language level. Configure the <code>jsconfig.json</code> with the desired options and then use the –p argument to make <code>tsc</code> use your <code>jsconfig.json</code> file, e.g. <code>tsc -p jsconfig.json</code> to down-level compile.</p> 
       <p>Read more about the compiler options for down level compilation <a href="/docs/languages/jsconfig#_down-level-compilation-with-typescript-compiler">here</a>.</p> 
       <h2 id="_formatting" data-needslink="_formatting">Formatting</h2> 
       <p>As with other languages, you can format your JavaScript code in VS Code.</p> 
       <p><img src="/images/javascript_formatter.gif" alt="formatter"></p> 
       <p>VS Code provides several formatting settings for JavaScript. They can all be found in the <code>javascript.format</code> <a href="/docs/getstarted/settings">settings</a> namespace.</p> 
       <pre><code class="typescript"><span class="hljs-comment">// Defines space handling after a comma delimiter</span>
<span class="hljs-string">"javascript.format.insertSpaceAfterCommaDelimiter"</span>: <span class="hljs-built_in">boolean</span>,

<span class="hljs-comment">// Defines space handling after a semicolon in a for statement</span>
<span class="hljs-string">"javascript.format.insertSpaceAfterSemicolonInForStatements"</span>: <span class="hljs-built_in">boolean</span>,

<span class="hljs-comment">// Defines space handling after a binary operator</span>
<span class="hljs-string">"javascript.format.insertSpaceBeforeAndAfterBinaryOperators"</span>: <span class="hljs-built_in">boolean</span>,

<span class="hljs-comment">// Defines space handling after keywords in control flow statement</span>
<span class="hljs-string">"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements"</span>: <span class="hljs-built_in">boolean</span>,

<span class="hljs-comment">// Defines space handling after function keyword for anonymous functions</span>
<span class="hljs-string">"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions"</span>: <span class="hljs-built_in">boolean</span>,

<span class="hljs-comment">// Defines space handling after opening and before closing non empty parenthesis</span>
<span class="hljs-string">"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"</span>: <span class="hljs-built_in">boolean</span>,

<span class="hljs-comment">// Defines space handling after opening and before closing non empty brackets</span>
<span class="hljs-string">"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"</span>: <span class="hljs-built_in">boolean</span>,

<span class="hljs-comment">// Defines whether an open brace is put onto a new line for functions or not</span>
<span class="hljs-string">"javascript.format.placeOpenBraceOnNewLineForFunctions"</span>: <span class="hljs-built_in">boolean</span>,

<span class="hljs-comment">// Defines whether an open brace is put onto a new line for control blocks or not</span>
<span class="hljs-string">"javascript.format.placeOpenBraceOnNewLineForControlBlocks"</span>: <span class="hljs-built_in">boolean</span>,
</code></pre> 
       <h2 id="_popular-extensions" data-needslink="_popular-extensions">Popular Extensions</h2> 
       <p>VS Code ships with excellent support for JavaScript but you can additionally install debuggers, snippets, linters, and other JavaScript tools through <a href="/docs/editor/extension-gallery">extensions</a>.</p> 
       <div class="marketplace-extensions-javascript"></div> 
       <blockquote> 
        <p><strong>Tip:</strong> The extensions shown above are dynamically queried. Click on an extension tile above to read the description and reviews to decide which extension is best for you. See more in the <a href="https://marketplace.visualstudio.com" class="external-link" target="_blank">Marketplace</a>.</p> 
       </blockquote> 
       <h2 id="_next-steps" data-needslink="_next-steps">Next Steps</h2> 
       <p>Read on to find out about:</p> 
       <ul> 
        <li><a href="/docs/languages/jsconfig">jsconfig.json</a> - Detailed description of the <code>jsconfig.json</code> project file.</li> 
        <li><a href="/docs/editor/intellisense">IntelliSense</a> - Learn more about IntelliSense and how to use it effectively for your language.</li> 
        <li><a href="/docs/editor/debugging">Debugging</a> - Learn how to set up debugging for your application.</li> 
        <li><a href="/docs/nodejs/nodejs-tutorial">Node.js</a> - A walkthrough to create an Express Node.js application.</li> 
        <li><a href="/docs/languages/typescript">TypeScript</a> - VS Code has great support for TypeScript which brings structure and strong typing to your JavaScript code.</li> 
       </ul> 
       <p>Watch these introductory videos:</p> 
       <ul> 
        <li><a href="/docs/introvideos/quicktour">Quick Tour using JavaScript</a> - See a three-minute overview of using JavaScript in VS Code.</li> 
        <li><a href="/docs/introvideos/intellisense">IntelliSense</a> - Tutorial on IntelliSense with JavaScript.</li> 
        <li><a href="/docs/introvideos/debugging">Debugging</a> - Learn how to debug a Node.js application.</li> 
       </ul> 
       <h2 id="_common-questions" data-needslink="_common-questions">Common Questions</h2> 
       <p><strong>Q: Does VS Code support JSX and React Native?</strong></p> 
       <p><strong>A:</strong> VS Code supports <strong>JSX</strong> and <strong>React Native</strong>. You will get IntelliSense for <strong>React/JSX</strong> and <strong>React Native</strong> from automatically downloaded type declaration (typings) files from the <a href="https://www.npmjs.com" class="external-link" target="_blank">npmjs</a> type declaration file repository. Additionally, you can install the popular <a href="https://marketplace.visualstudio.com/items?itemName=vsmobile.vscode-react-native" class="external-link" target="_blank">React Native extension</a> from the Marketplace.</p> 
       <p><strong>React Native</strong> examples often use the experimental <strong>Object Rest/Spread</strong> operator. This is not yet supported by VS Code. If you want to use it, it is recommended that you disable the built-in syntax checking (see below).</p> 
       <p>To enable ES6 import statements for <strong>React Native</strong>, you need to set the <code>allowSyntheticDefaultImports</code> compiler option to <code>true</code>. This tells the compiler to create synthetic default members and you get IntelliSense. <strong>React Native</strong> uses <strong>Babel</strong> behind the scenes to create the proper run-time code with default members. If you also want to do debugging of <strong>React Native</strong> code then you can install the <a href="https://marketplace.visualstudio.com/items?itemName=vsmobile.vscode-react-native" class="external-link" target="_blank">React Native Extension</a>.</p> 
       <p><strong>Q: IntelliSense is not working for external libraries.</strong></p> 
       <p><strong>A:</strong> <code>Automatic Type Acquisition</code> works for dependencies downloaded by npm (specified in <code>package.json</code>), Bower (specified in <code>bower.json</code>), and for many of the most common libraries listed in your folder structure (i.e. <code>jquery-3.1.1.min.js</code>).</p> 
       <p><strong>ES6 Style imports are not working.</strong></p> 
       <p>When you want to use ES6 style imports but some type declaration (typings) files do not yet use ES6 style exports, then set the <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" class="external-link" target="_blank">TypeScript compiler option</a> <code>allowSyntheticDefaultImports</code> to true.</p> 
       <pre><code class="javascript">{
  <span class="hljs-string">"compilerOptions"</span>: {
    <span class="hljs-string">"target"</span>: <span class="hljs-string">"ES6"</span>,
    <span class="hljs-string">"module"</span>: <span class="hljs-string">"commonjs"</span>,
    <span class="hljs-comment">// This is the line you want to add</span>
    <span class="hljs-string">"allowSyntheticDefaultImports"</span>: <span class="hljs-literal">true</span>
  },
  <span class="hljs-string">"exclude"</span>: [
    <span class="hljs-string">"node_modules"</span>,
    <span class="hljs-string">"**/node_modules/*"</span>
  ]
}
</code></pre> 
       <p><strong>Q: Can I debug minified/uglified JavaScript?</strong></p> 
       <p><strong>A:</strong> Yes, you can. You can see this working using JavaScript source maps in the <a href="/docs/nodejs/nodejs-debugging">Node.js Debugging</a> topic.</p> 
       <p><strong>Q: How do I disable Syntax Validation when using non ES6 constructs?</strong></p> 
       <p><strong>A:</strong> Some users want to use syntax constructs like the proposed Object Rest/Spread Properties. However, these are currently not supported by VS Code's JavaScript language service and are flagged as errors. For users who still want to use these future features, we provide the <code>javascript.validate.enable</code> <a href="/docs/getstarted/settings">setting</a>.</p> 
       <p>With <code>javascript.validate.enable: false</code>, you disable all built-in syntax checking. If you do this, we recommend that you use a linter like <a href="http://eslint.org" class="external-link" target="_blank">ESLint</a> to validate your source code. Since VS Code's JavaScript support doesn't understand ES7 constructs, features like IntelliSense might not be fully accurate.</p> 
       <div class="feedback"></div> 
       <div class="body-footer">
        Last updated on 9/7/2017
       </div> 
      </div> 
      <div class="hidden-xs col-sm-3 col-md-2"> 
       <nav id="docs-subnavbar" aria-label="On Page Navigation"> 
        <h4 tabindex="0"><span class="sr-only">In this article there are 12 sections</span><span aria-hidden="true">In this article</span></h4> 
        <ul class="nav"> 
         <li><a href="#_intellisense">IntelliSense</a></li> 
         <li><a href="#_automatic-type-acquisition">Automatic Type Acquisition</a></li> 
         <li><a href="#_javascript-project-jsconfigjson">JavaScript Project (jsconfig.json)</a></li> 
         <li><a href="#_debugging">Debugging</a></li> 
         <li><a href="#_type-checking-and-quick-fixes-for-javascript-files">Type Checking and Quick Fixes for JavaScript Files</a></li> 
         <li><a href="#_linters">Linters</a></li> 
         <li><a href="#_snippets">Snippets</a></li> 
         <li><a href="#_use-next-generation-javascript">Use Next Generation JavaScript</a></li> 
         <li><a href="#_formatting">Formatting</a></li> 
         <li><a href="#_popular-extensions">Popular Extensions</a></li> 
         <li><a href="#_next-steps">Next Steps</a></li> 
         <li><a href="#_common-questions">Common Questions</a></li> 
        </ul> 
        <a class="twitter-share-button" href="https://twitter.com/share" data-text="JavaScript Programming with Visual Studio Code" data-via="Code" data-counturl="https://code.visualstudio.com/docs/languages/javascript" data-count="vertical"> Tweet </a> 
        <div class="connect-widget"></div> 
       </nav> 
      </div> 
     </div> 
    </div> 
   </div> 
   <meta itemprop="applicationCategory" content="Text Editor"> 
   <meta itemprop="screenshot" content="http://localhost:7000/home-screenshot-mac-lg.png"> 
   <meta itemprop="datePublished" content="2016-04-14"> 
   <meta itemprop="operatingSystem" content="Mac, Linux, Windows"> 
  </div> 
  <footer role="contentinfo"> 
   <div class="container"> 
    <div class="row"> 
     <div class="left col-md-7"> 
      <ul class="links"> 
       <li> <span class="message">Hello from Seattle.</span> </li> 
       <li> <a href="" aria-hidden="true" onclick="followOnTwitter()" role="button" tabindex="0">Follow @code</a> </li> 
       <li> 
        <div class="github-star-button"> 
         <iframe title="GitHub star button" src="https://ghbtns.com/github-btn.html?user=Microsoft&amp;repo=vscode&amp;type=star&amp;count=true" frameborder="0" scrolling="0" width="130px" height="20px"></iframe> 
        </div> </li> 
       <script>
                            function followOnTwitter() {
                                var windowFeatures = "location=yes,height=600,width=550,scrollbars=yes,status=yes";
                                var originalReferer = "&original_referer=" + document.URL;
                                var screenName = "&screen_name=code";
                                var URL = "https://twitter.com/intent/follow?" + originalReferer + screenName;
                                window.open(URL, "_blank", windowFeatures);
                            }
                        </script> 
       <script>
                            window.twttr = (function (d, s, id) { var js, fjs = d.getElementsByTagName(s)[0], t = window.twttr || {}; if (d.getElementById(id)) return t; js = d.createElement(s); js.id = id; js.src = "https://platform.twitter.com/widgets.js"; fjs.parentNode.insertBefore(js, fjs); t._e = []; t.ready = function (f) { t._e.push(f); }; return t; }(document, "script", "twitter-wjs"));
                        </script> 
      </ul> 
     </div> 
     <div class="right col-md-5"> 
      <ul class="links"> 
       <li><a id="footer-support-link" href="https://support.microsoft.com/en-us/getsupport?wf=0&amp;tenant=ClassicCommercial&amp;oaspworkflow=start_1.0.0.0&amp;locale=en-us&amp;supportregion=en-us&amp;pesid=16064&amp;ccsid=636196895839595242" target="_blank">Support</a></li> 
       <li><a id="footer-privacy-link" href="https://www.microsoft.com/privacystatement/en-us/core/default.aspx" target="_blank">Privacy</a></li> 
       <li><a id="footer-terms-link" href="https://www.microsoft.com/en-us/legal/intellectualproperty/copyright/default.aspx" target="_blank">Terms of Use</a></li> 
       <li><a id="footer-license-link" href="/License">License</a></li> 
      </ul> 
      <div class="copyright"> 
       <a id="footer-microsoft-link" class="logo" href="https://www.microsoft.com"> <img class="microsoft-logo" src="/images/microsoft-logo.png" height="20" alt="Microsoft homepage"> <img class="microsoft-logo-inverted" src="/images/microsoft-logo-inverted.png" height="20" alt="Microsoft homepage"> </a> 
       <span>© 2017 <span itemprop="publisher" itemscope itemtype="https://schema.org/Organization"> <span itemprop="name">Microsoft</span></span> </span> 
      </div> 
     </div> 
    </div> 
   </div> 
  </footer> 
  <script src="/index.js"></script> 
  <script type="application/ld+json">
        {
            "@context" : "http://schema.org",
            "@type" : "Product",
            "name" : "Visual Studio Code",
            "logo": "https://code.visualstudio.com/Content/images/vscode.ico",
            "url" : "https://code.visualstudio.com",
            "potentialAction": {
              "@type": "SearchAction",
              "target": "https://code.visualstudio.com/Search?q={search_term_string}",
              "query-input": "required name=search_term_string"
            },
            "sameAs" : [
            "https://en.wikipedia.org/wiki/Visual_Studio_Code",
            "https://www.facebook.com/visualstudio",
            "https://twitter.com/code",
            "http://blogs.msdn.com/b/vscode"
            ]
        }
    </script>   
 </body>
</html>