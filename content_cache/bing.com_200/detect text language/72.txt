<!doctype html>
<html>
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta name="theme-color" content="#375EAB"> 
  <title>csv - The Go Programming Language</title> 
  <link type="text/css" rel="stylesheet" href="/lib/godoc/style.css"> 
  <link rel="search" type="application/opensearchdescription+xml" title="godoc" href="/opensearch.xml"> 
  <link rel="stylesheet" href="/lib/godoc/jquery.treeview.css"> 
  <script type="text/javascript">window.initFuncs = [];</script> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-11222381-2"]);
_gaq.push(["b._setAccount", "UA-49880327-6"]);
window.trackPageview = function() {
  _gaq.push(["_trackPageview", location.pathname+location.hash]);
  _gaq.push(["b._trackPageview", location.pathname+location.hash]);
};
window.trackPageview();
window.trackEvent = function(category, action, opt_label, opt_value, opt_noninteraction) {
  _gaq.push(["_trackEvent", category, action, opt_label, opt_value, opt_noninteraction]);
  _gaq.push(["b._trackEvent", category, action, opt_label, opt_value, opt_noninteraction]);
};
</script> 
 </head> 
 <body> 
  <div id="lowframe" style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
    ... 
  </div>
  <!-- #lowframe --> 
  <div id="topbar" class="wide">
   <div class="container"> 
    <div class="top-heading" id="heading-wide">
     <a href="/">The Go Programming Language</a>
    </div> 
    <div class="top-heading" id="heading-narrow">
     <a href="/">Go</a>
    </div> 
    <a href="#" id="menu-button"><span id="menu-button-arrow">?</span></a> 
    <form method="GET" action="/search"> 
     <div id="menu"> 
      <a href="/doc/">Documents</a> 
      <a href="/pkg/">Packages</a> 
      <a href="/project/">The Project</a> 
      <a href="/help/">Help</a> 
      <a href="/blog/">Blog</a> 
      <a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a> 
      <input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search"> 
     </div> 
    </form> 
   </div>
  </div> 
  <div id="playground" class="play"> 
   <div class="input">
    <textarea class="code" spellcheck="false">package main

import "fmt"

func main() {
	fmt.Println("Hello, ??")
}</textarea>
   </div> 
   <div class="output"></div> 
   <div class="buttons"> 
    <a class="run" title="Run this code [shift-enter]">Run</a> 
    <a class="fmt" title="Format this code">Format</a> 
    <a class="share" title="Share this code">Share</a> 
   </div> 
  </div> 
  <div id="page" class="wide"> 
   <div class="container"> 
    <h1> Package csv <span class="text-muted"></span> </h1> 
    <div id="nav"></div> 
    <!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
--> 
    <!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
--> 
    <script type="text/javascript">
	document.ANALYSIS_DATA = null;
	document.CALLGRAPH = null;
	</script> 
    <div id="short-nav"> 
     <dl> 
      <dd>
       <code>import "encoding/csv"</code>
      </dd> 
     </dl> 
     <dl> 
      <dd>
       <a href="#pkg-overview" class="overviewLink">Overview</a>
      </dd> 
      <dd>
       <a href="#pkg-index" class="indexLink">Index</a>
      </dd> 
      <dd>
       <a href="#pkg-examples" class="examplesLink">Examples</a>
      </dd> 
     </dl> 
    </div> 
    <!-- The package's Name is printed as title by the top-level template --> 
    <div id="pkg-overview" class="toggleVisible"> 
     <div class="collapsed"> 
      <h2 class="toggleButton" title="Click to show Overview section">Overview ?</h2> 
     </div> 
     <div class="expanded"> 
      <h2 class="toggleButton" title="Click to hide Overview section">Overview ?</h2> 
      <p> Package csv reads and writes comma-separated values (CSV) files. There are many kinds of CSV files; this package supports the format described in RFC 4180. </p> 
      <p> A csv file contains zero or more records of one or more fields per record. Each record is separated by the newline character. The final record may optionally be followed by a newline character. </p> 
      <pre>field1,field2,field3
</pre> 
      <p> White space is considered part of a field. </p> 
      <p> Carriage returns before newline characters are silently removed. </p> 
      <p> Blank lines are ignored. A line with only whitespace characters (excluding the ending newline character) is not considered a blank line. </p> 
      <p> Fields which start and stop with the quote character " are called quoted-fields. The beginning and ending quote are not part of the field. </p> 
      <p> The source: </p> 
      <pre>normal string,"quoted-field"
</pre> 
      <p> results in the fields </p> 
      <pre>{`normal string`, `quoted-field`}
</pre> 
      <p> Within a quoted-field a quote character followed by a second quote character is considered a single quote. </p> 
      <pre>"the ""word"" is true","a ""quoted-field"""
</pre> 
      <p> results in </p> 
      <pre>{`the "word" is true`, `a "quoted-field"`}
</pre> 
      <p> Newlines and commas may be included in a quoted-field </p> 
      <pre>"Multi-line
field","comma is ,"
</pre> 
      <p> results in </p> 
      <pre>{`Multi-line
field`, `comma is ,`}
</pre> 
     </div> 
    </div> 
    <div id="pkg-index" class="toggleVisible"> 
     <div class="collapsed"> 
      <h2 class="toggleButton" title="Click to show Index section">Index ?</h2> 
     </div> 
     <div class="expanded"> 
      <h2 class="toggleButton" title="Click to hide Index section">Index ?</h2> 
      <!-- Table of contents for API; must be named manual-nav to turn off auto nav. --> 
      <div id="manual-nav"> 
       <dl> 
        <dd>
         <a href="#pkg-variables">Variables</a>
        </dd> 
        <dd>
         <a href="#ParseError">type ParseError</a>
        </dd> 
        <dd>
         &nbsp; &nbsp; 
         <a href="#ParseError.Error">func (e *ParseError) Error() string</a>
        </dd> 
        <dd>
         <a href="#Reader">type Reader</a>
        </dd> 
        <dd>
         &nbsp; &nbsp; 
         <a href="#NewReader">func NewReader(r io.Reader) *Reader</a>
        </dd> 
        <dd>
         &nbsp; &nbsp; 
         <a href="#Reader.Read">func (r *Reader) Read() (record []string, err error)</a>
        </dd> 
        <dd>
         &nbsp; &nbsp; 
         <a href="#Reader.ReadAll">func (r *Reader) ReadAll() (records [][]string, err error)</a>
        </dd> 
        <dd>
         <a href="#Writer">type Writer</a>
        </dd> 
        <dd>
         &nbsp; &nbsp; 
         <a href="#NewWriter">func NewWriter(w io.Writer) *Writer</a>
        </dd> 
        <dd>
         &nbsp; &nbsp; 
         <a href="#Writer.Error">func (w *Writer) Error() error</a>
        </dd> 
        <dd>
         &nbsp; &nbsp; 
         <a href="#Writer.Flush">func (w *Writer) Flush()</a>
        </dd> 
        <dd>
         &nbsp; &nbsp; 
         <a href="#Writer.Write">func (w *Writer) Write(record []string) error</a>
        </dd> 
        <dd>
         &nbsp; &nbsp; 
         <a href="#Writer.WriteAll">func (w *Writer) WriteAll(records [][]string) error</a>
        </dd> 
       </dl> 
      </div>
      <!-- #manual-nav --> 
      <div id="pkg-examples"> 
       <h4>Examples</h4> 
       <dl> 
        <dd>
         <a class="exampleLink" href="#example_Reader">Reader</a>
        </dd> 
        <dd>
         <a class="exampleLink" href="#example_Reader_ReadAll">Reader.ReadAll</a>
        </dd> 
        <dd>
         <a class="exampleLink" href="#example_Reader_options">Reader (Options)</a>
        </dd> 
        <dd>
         <a class="exampleLink" href="#example_Writer">Writer</a>
        </dd> 
        <dd>
         <a class="exampleLink" href="#example_Writer_WriteAll">Writer.WriteAll</a>
        </dd> 
       </dl> 
      </div> 
      <h4>Package files</h4> 
      <p> <span style="font-size:90%"> <a href="/src/encoding/csv/reader.go">reader.go</a> <a href="/src/encoding/csv/writer.go">writer.go</a> </span> </p> 
     </div>
     <!-- .expanded --> 
    </div>
    <!-- #pkg-index --> 
    <div id="pkg-callgraph" class="toggle" style="display: none"> 
     <div class="collapsed"> 
      <h2 class="toggleButton" title="Click to show Internal Call Graph section">Internal call graph ?</h2> 
     </div> 
     <!-- .expanded --> 
     <div class="expanded"> 
      <h2 class="toggleButton" title="Click to hide Internal Call Graph section">Internal call graph ?</h2> 
      <p> In the call graph viewer below, each node is a function belonging to this package and its children are the functions it calls—perhaps dynamically. </p> 
      <p> The root nodes are the entry points of the package: functions that may be called from outside the package. There may be non-exported or anonymous functions among them if they are called dynamically from another package. </p> 
      <p> Click a node to visit that function's source code. From there you can visit its callers by clicking its declaring <code>func</code> token. </p> 
      <p> Functions may be omitted if they were determined to be unreachable in the particular programs or tests that were analyzed. </p> 
      <!-- Zero means show all package entry points. --> 
      <ul style="margin-left: 0.5in" id="callgraph-0" class="treeview"></ul> 
     </div> 
    </div> 
    <!-- #pkg-callgraph --> 
    <h2 id="pkg-variables">Variables</h2> 
    <p> These are the errors that can be returned in ParseError.Error </p> 
    <pre>var (
        <span id="ErrTrailingComma">ErrTrailingComma</span> = <a href="/pkg/errors/">errors</a>.<a href="/pkg/errors/#New">New</a>("extra delimiter at end of line") <span class="comment">// no longer used</span>
        <span id="ErrBareQuote">ErrBareQuote</span>     = <a href="/pkg/errors/">errors</a>.<a href="/pkg/errors/#New">New</a>("bare \" in non-quoted-field")
        <span id="ErrQuote">ErrQuote</span>         = <a href="/pkg/errors/">errors</a>.<a href="/pkg/errors/#New">New</a>("extraneous \" in field")
        <span id="ErrFieldCount">ErrFieldCount</span>    = <a href="/pkg/errors/">errors</a>.<a href="/pkg/errors/#New">New</a>("wrong number of fields in line")
)</pre> 
    <h2 id="ParseError">type <a href="/src/encoding/csv/reader.go?s=1663:1832#L55">ParseError</a> <a class="permalink" href="#ParseError">¶</a> </h2> 
    <p> A ParseError is returned for parsing errors. The first line is 1. The first column is 0. </p> 
    <pre>type ParseError struct {
<span id="ParseError.Line"></span>        Line   <a href="/pkg/builtin/#int">int</a>   <span class="comment">// Line where the error occurred</span>
<span id="ParseError.Column"></span>        Column <a href="/pkg/builtin/#int">int</a>   <span class="comment">// Column (rune index) where the error occurred</span>
<span id="ParseError.Err"></span>        Err    <a href="/pkg/builtin/#error">error</a> <span class="comment">// The actual error</span>
}</pre> 
    <h3 id="ParseError.Error">func (*ParseError) <a href="/src/encoding/csv/reader.go?s=1834:1869#L61">Error</a> <a class="permalink" href="#ParseError.Error">¶</a> </h3> 
    <pre>func (e *<a href="#ParseError">ParseError</a>) Error() <a href="/pkg/builtin/#string">string</a></pre> 
    <h2 id="Reader">type <a href="/src/encoding/csv/reader.go?s=2531:4521#L80">Reader</a> <a class="permalink" href="#Reader">¶</a> </h2> 
    <p> A Reader reads records from a CSV-encoded file. </p> 
    <p> As returned by NewReader, a Reader expects input conforming to RFC 4180. The exported fields can be changed to customize the details before the first call to Read or ReadAll. </p> 
    <pre>type Reader struct {
<span id="Reader.Comma"></span>        <span class="comment">// Comma is the field delimiter.</span>
        <span class="comment">// It is set to comma (',') by NewReader.</span>
        Comma <a href="/pkg/builtin/#rune">rune</a>
<span id="Reader.Comment"></span>        <span class="comment">// Comment, if not 0, is the comment character. Lines beginning with the</span>
        <span class="comment">// Comment character without preceding whitespace are ignored.</span>
        <span class="comment">// With leading whitespace the Comment character becomes part of the</span>
        <span class="comment">// field, even if TrimLeadingSpace is true.</span>
        Comment <a href="/pkg/builtin/#rune">rune</a>
<span id="Reader.FieldsPerRecord"></span>        <span class="comment">// FieldsPerRecord is the number of expected fields per record.</span>
        <span class="comment">// If FieldsPerRecord is positive, Read requires each record to</span>
        <span class="comment">// have the given number of fields. If FieldsPerRecord is 0, Read sets it to</span>
        <span class="comment">// the number of fields in the first record, so that future records must</span>
        <span class="comment">// have the same field count. If FieldsPerRecord is negative, no check is</span>
        <span class="comment">// made and records may have a variable number of fields.</span>
        FieldsPerRecord <a href="/pkg/builtin/#int">int</a>
        <span class="comment">// If LazyQuotes is true, a quote may appear in an unquoted field and a</span>
        <span class="comment">// non-doubled quote may appear in a quoted field.</span>
<span id="Reader.LazyQuotes"></span>        LazyQuotes    <a href="/pkg/builtin/#bool">bool</a>
<span id="Reader.TrailingComma"></span>        TrailingComma <a href="/pkg/builtin/#bool">bool</a> <span class="comment">// ignored; here for backwards compatibility</span>
        <span class="comment">// If TrimLeadingSpace is true, leading white space in a field is ignored.</span>
        <span class="comment">// This is done even if the field delimiter, Comma, is white space.</span>
<span id="Reader.TrimLeadingSpace"></span>        TrimLeadingSpace <a href="/pkg/builtin/#bool">bool</a>
<span id="Reader.ReuseRecord"></span>        <span class="comment">// ReuseRecord controls whether calls to Read may return a slice sharing</span>
        <span class="comment">// the backing array of the previous call's returned slice for performance.</span>
        <span class="comment">// By default, each call to Read returns newly allocated memory owned by the caller.</span>
        ReuseRecord <a href="/pkg/builtin/#bool">bool</a>
        <span class="comment">// contains filtered or unexported fields</span>
}</pre> 
    <div id="example_Reader" class="toggle"> 
     <div class="collapsed"> 
      <p class="exampleHeading toggleButton">? <span class="text">Example</span></p> 
     </div> 
     <div class="expanded"> 
      <p class="exampleHeading toggleButton">? <span class="text">Example</span></p> 
      <div class="play"> 
       <div class="input">
        <textarea class="code" spellcheck="false">package main

import (
	"encoding/csv"
	"fmt"
	"io"
	"log"
	"strings"
)

func main() {
	in := `first_name,last_name,username
"Rob","Pike",rob
Ken,Thompson,ken
"Robert","Griesemer","gri"
`
	r := csv.NewReader(strings.NewReader(in))

	for {
		record, err := r.Read()
		if err == io.EOF {
			break
		}
		if err != nil {
			log.Fatal(err)
		}

		fmt.Println(record)
	}
}
</textarea>
       </div> 
       <div class="output">
        <pre>[first_name last_name username]
[Rob Pike rob]
[Ken Thompson ken]
[Robert Griesemer gri]
</pre>
       </div> 
       <div class="buttons"> 
        <a class="run" title="Run this code [shift-enter]">Run</a> 
        <a class="fmt" title="Format this code">Format</a> 
        <a class="share" title="Share this code">Share</a> 
       </div> 
      </div> 
     </div> 
    </div> 
    <div id="example_Reader_options" class="toggle"> 
     <div class="collapsed"> 
      <p class="exampleHeading toggleButton">? <span class="text">Example (Options)</span></p> 
     </div> 
     <div class="expanded"> 
      <p class="exampleHeading toggleButton">? <span class="text">Example (Options)</span></p> 
      <p>This example shows how csv.Reader can be configured to handle other types of CSV files. </p> 
      <div class="play"> 
       <div class="input">
        <textarea class="code" spellcheck="false">package main

import (
	"encoding/csv"
	"fmt"
	"log"
	"strings"
)

func main() {
	in := `first_name;last_name;username
"Rob";"Pike";rob
# lines beginning with a # character are ignored
Ken;Thompson;ken
"Robert";"Griesemer";"gri"
`
	r := csv.NewReader(strings.NewReader(in))
	r.Comma = ';'
	r.Comment = '#'

	records, err := r.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Print(records)
}
</textarea>
       </div> 
       <div class="output">
        <pre>[[first_name last_name username] [Rob Pike rob] [Ken Thompson ken] [Robert Griesemer gri]]
</pre>
       </div> 
       <div class="buttons"> 
        <a class="run" title="Run this code [shift-enter]">Run</a> 
        <a class="fmt" title="Format this code">Format</a> 
        <a class="share" title="Share this code">Share</a> 
       </div> 
      </div> 
     </div> 
    </div> 
    <h3 id="NewReader">func <a href="/src/encoding/csv/reader.go?s=4576:4611#L125">NewReader</a> <a class="permalink" href="#NewReader">¶</a> </h3> 
    <pre>func NewReader(r <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Reader">Reader</a>) *<a href="#Reader">Reader</a></pre> 
    <p> NewReader returns a new Reader that reads from r. </p> 
    <h3 id="Reader.Read">func (*Reader) <a href="/src/encoding/csv/reader.go?s=5286:5338#L149">Read</a> <a class="permalink" href="#Reader.Read">¶</a> </h3> 
    <pre>func (r *<a href="#Reader">Reader</a>) Read() (record []<a href="/pkg/builtin/#string">string</a>, err <a href="/pkg/builtin/#error">error</a>)</pre> 
    <p> Read reads one record (a slice of fields) from r. If the record has an unexpected number of fields, Read returns the record along with the error ErrFieldCount. Except for that case, Read always returns either a non-nil record or a non-nil error, but not both. If there is no data left to be read, Read returns nil, io.EOF. If ReuseRecord is true, the returned slice may be shared between multiple calls to Read. </p> 
    <h3 id="Reader.ReadAll">func (*Reader) <a href="/src/encoding/csv/reader.go?s=5757:5815#L165">ReadAll</a> <a class="permalink" href="#Reader.ReadAll">¶</a> </h3> 
    <pre>func (r *<a href="#Reader">Reader</a>) ReadAll() (records [][]<a href="/pkg/builtin/#string">string</a>, err <a href="/pkg/builtin/#error">error</a>)</pre> 
    <p> ReadAll reads all the remaining records from r. Each record is a slice of fields. A successful call returns err == nil, not err == io.EOF. Because ReadAll is defined to read until EOF, it does not treat end of file as an error to be reported. </p> 
    <div id="example_Reader_ReadAll" class="toggle"> 
     <div class="collapsed"> 
      <p class="exampleHeading toggleButton">? <span class="text">Example</span></p> 
     </div> 
     <div class="expanded"> 
      <p class="exampleHeading toggleButton">? <span class="text">Example</span></p> 
      <div class="play"> 
       <div class="input">
        <textarea class="code" spellcheck="false">package main

import (
	"encoding/csv"
	"fmt"
	"log"
	"strings"
)

func main() {
	in := `first_name,last_name,username
"Rob","Pike",rob
Ken,Thompson,ken
"Robert","Griesemer","gri"
`
	r := csv.NewReader(strings.NewReader(in))

	records, err := r.ReadAll()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Print(records)
}
</textarea>
       </div> 
       <div class="output">
        <pre>[[first_name last_name username] [Rob Pike rob] [Ken Thompson ken] [Robert Griesemer gri]]
</pre>
       </div> 
       <div class="buttons"> 
        <a class="run" title="Run this code [shift-enter]">Run</a> 
        <a class="fmt" title="Format this code">Format</a> 
        <a class="share" title="Share this code">Share</a> 
       </div> 
      </div> 
     </div> 
    </div> 
    <h2 id="Writer">type <a href="/src/encoding/csv/writer.go?s=630:791#L14">Writer</a> <a class="permalink" href="#Writer">¶</a> </h2> 
    <p> A Writer writes records to a CSV encoded file. </p> 
    <p> As returned by NewWriter, a Writer writes records terminated by a newline and uses ',' as the field delimiter. The exported fields can be changed to customize the details before the first call to Write or WriteAll. </p> 
    <p> Comma is the field delimiter. </p> 
    <p> If UseCRLF is true, the Writer ends each record with \r\n instead of \n. </p> 
    <pre>type Writer struct {
<span id="Writer.Comma"></span>        Comma   <a href="/pkg/builtin/#rune">rune</a> <span class="comment">// Field delimiter (set to ',' by NewWriter)</span>
<span id="Writer.UseCRLF"></span>        UseCRLF <a href="/pkg/builtin/#bool">bool</a> <span class="comment">// True to use \r\n as the line terminator</span>
        <span class="comment">// contains filtered or unexported fields</span>
}</pre> 
    <div id="example_Writer" class="toggle"> 
     <div class="collapsed"> 
      <p class="exampleHeading toggleButton">? <span class="text">Example</span></p> 
     </div> 
     <div class="expanded"> 
      <p class="exampleHeading toggleButton">? <span class="text">Example</span></p> 
      <div class="play"> 
       <div class="input">
        <textarea class="code" spellcheck="false">package main

import (
	"encoding/csv"
	"log"
	"os"
)

func main() {
	records := [][]string{
		{"first_name", "last_name", "username"},
		{"Rob", "Pike", "rob"},
		{"Ken", "Thompson", "ken"},
		{"Robert", "Griesemer", "gri"},
	}

	w := csv.NewWriter(os.Stdout)

	for _, record := range records {
		if err := w.Write(record); err != nil {
			log.Fatalln("error writing record to csv:", err)
		}
	}

	// Write any buffered data to the underlying writer (standard output).
	w.Flush()

	if err := w.Error(); err != nil {
		log.Fatal(err)
	}
}
</textarea>
       </div> 
       <div class="output">
        <pre>first_name,last_name,username
Rob,Pike,rob
Ken,Thompson,ken
Robert,Griesemer,gri
</pre>
       </div> 
       <div class="buttons"> 
        <a class="run" title="Run this code [shift-enter]">Run</a> 
        <a class="fmt" title="Format this code">Format</a> 
        <a class="share" title="Share this code">Share</a> 
       </div> 
      </div> 
     </div> 
    </div> 
    <h3 id="NewWriter">func <a href="/src/encoding/csv/writer.go?s=845:880#L21">NewWriter</a> <a class="permalink" href="#NewWriter">¶</a> </h3> 
    <pre>func NewWriter(w <a href="/pkg/io/">io</a>.<a href="/pkg/io/#Writer">Writer</a>) *<a href="#Writer">Writer</a></pre> 
    <p> NewWriter returns a new Writer that writes to w. </p> 
    <h3 id="Writer.Error">func (*Writer) <a href="/src/encoding/csv/writer.go?s=2392:2422#L93">Error</a> <a class="permalink" href="#Writer.Error">¶</a> </h3> 
    <pre>func (w *<a href="#Writer">Writer</a>) Error() <a href="/pkg/builtin/#error">error</a></pre> 
    <p> Error reports any error that has occurred during a previous Write or Flush. </p> 
    <h3 id="Writer.Flush">func (*Writer) <a href="/src/encoding/csv/writer.go?s=2270:2294#L88">Flush</a> <a class="permalink" href="#Writer.Flush">¶</a> </h3> 
    <pre>func (w *<a href="#Writer">Writer</a>) Flush()</pre> 
    <p> Flush writes any buffered data to the underlying io.Writer. To check if an error occurred during the Flush, call Error. </p> 
    <h3 id="Writer.Write">func (*Writer) <a href="/src/encoding/csv/writer.go?s=1093:1138#L30">Write</a> <a class="permalink" href="#Writer.Write">¶</a> </h3> 
    <pre>func (w *<a href="#Writer">Writer</a>) Write(record []<a href="/pkg/builtin/#string">string</a>) <a href="/pkg/builtin/#error">error</a></pre> 
    <p> Writer writes a single CSV record to w along with any necessary quoting. A record is a slice of strings with each string being one field. </p> 
    <h3 id="Writer.WriteAll">func (*Writer) <a href="/src/encoding/csv/writer.go?s=2545:2596#L99">WriteAll</a> <a class="permalink" href="#Writer.WriteAll">¶</a> </h3> 
    <pre>func (w *<a href="#Writer">Writer</a>) WriteAll(records [][]<a href="/pkg/builtin/#string">string</a>) <a href="/pkg/builtin/#error">error</a></pre> 
    <p> WriteAll writes multiple CSV records to w using Write and then calls Flush. </p> 
    <div id="example_Writer_WriteAll" class="toggle"> 
     <div class="collapsed"> 
      <p class="exampleHeading toggleButton">? <span class="text">Example</span></p> 
     </div> 
     <div class="expanded"> 
      <p class="exampleHeading toggleButton">? <span class="text">Example</span></p> 
      <div class="play"> 
       <div class="input">
        <textarea class="code" spellcheck="false">package main

import (
	"encoding/csv"
	"log"
	"os"
)

func main() {
	records := [][]string{
		{"first_name", "last_name", "username"},
		{"Rob", "Pike", "rob"},
		{"Ken", "Thompson", "ken"},
		{"Robert", "Griesemer", "gri"},
	}

	w := csv.NewWriter(os.Stdout)
	w.WriteAll(records) // calls Flush internally

	if err := w.Error(); err != nil {
		log.Fatalln("error writing csv:", err)
	}
}
</textarea>
       </div> 
       <div class="output">
        <pre>first_name,last_name,username
Rob,Pike,rob
Ken,Thompson,ken
Robert,Griesemer,gri
</pre>
       </div> 
       <div class="buttons"> 
        <a class="run" title="Run this code [shift-enter]">Run</a> 
        <a class="fmt" title="Format this code">Format</a> 
        <a class="share" title="Share this code">Share</a> 
       </div> 
      </div> 
     </div> 
    </div> 
    <div id="footer">
      Build version go1.9.
     <br> Except as 
     <a href="https://developers.google.com/site-policies#restrictions">noted</a>, the content of this page is licensed under the Creative Commons Attribution 3.0 License, and code is licensed under a 
     <a href="/LICENSE">BSD license</a>.
     <br> 
     <a href="/doc/tos.html">Terms of Service</a> | 
     <a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a> 
    </div> 
   </div>
   <!-- .container --> 
  </div>
  <!-- #page --> 
  <!-- TODO(adonovan): load these from <head> using "defer" attribute? --> 
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script> 
  <script type="text/javascript" src="/lib/godoc/jquery.treeview.js"></script> 
  <script type="text/javascript" src="/lib/godoc/jquery.treeview.edit.js"></script> 
  <script type="text/javascript" src="/lib/godoc/playground.js"></script> 
  <script>var goVersion = "go1.9";</script> 
  <script type="text/javascript" src="/lib/godoc/godocs.js"></script> 
  <script type="text/javascript">
(function() {
  var ga = document.createElement("script"); ga.type = "text/javascript"; ga.async = true;
  ga.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js";
  var s = document.getElementsByTagName("script")[0]; s.parentNode.insertBefore(ga, s);
})();
</script>   
 </body>
</html>