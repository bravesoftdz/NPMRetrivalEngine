<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
  <meta name="Author" content="Kevin Amaratunga"> 
  <meta name="GENERATOR" content="Mozilla/4.5 [en] (WinNT; I) [Netscape]"> 
  <title>Programming in Java</title> 
 </head> 
 <body>
   &nbsp; 
  <center>
   <table cols="2" width="100%" nosave> 
    <tbody>
     <tr nosave> 
      <td nosave><i>1.124 Lecture 11</i></td> 
      <td align="RIGHT" nosave><i>10/17/2000</i></td> 
     </tr> 
    </tbody>
   </table>
  </center> 
  <h1> Programming in Java</h1> 
  <h2> Contents</h2> 
  <ul> 
   <li> <font size="+2">Introduction</font></li> 
   <li> <font size="+2">Online Java Resources</font></li> 
   <li> <font size="+2">Applications and Applets</font></li> 
   <li> <font size="+2">Java Basics</font></li> 
  </ul> 
  <h2> <font size="+2">1. Introduction</font></h2> Java is an object-oriented programming language that resembles C++ in many respects.&nbsp; One of the major differences is that Java programs are intended to be architecture-neutral i.e. a Java program should, in theory, be able to run on a Unix workstation, a PC or a Macintosh 
  <i>without recompilation.</i>&nbsp;&nbsp; In C++, we compiled our programs into machine-dependent 
  <i>object code </i>that was linked to produce an executable.&nbsp; By contrast, Java programs are compiled into machine-independent 
  <i>byte code</i>.&nbsp; The compiled program is then run within a Java interpreter, which is responsible for executing the byte code instructions.&nbsp; The Java interpreter is typically referred to as the 
  <i>Java Virtual Machine</i>, and it must be present on each computer that runs the program. 
  <br>&nbsp; 
  <center>
   <table nosave> 
    <tbody>
     <tr nosave> 
      <td nosave></td> 
      <td align="CENTER" nosave>Java compiler</td> 
      <td></td> 
      <td align="CENTER" nosave>Java interpreter</td> 
      <td></td> 
     </tr> 
     <tr nosave> 
      <td align="CENTER" nosave><i>myprog.java</i></td> 
      <td align="CENTER" nosave>--------------&gt;</td> 
      <td align="CENTER" nosave><i>myprog.class</i></td> 
      <td align="CENTER" nosave>----------------&gt;</td> 
      <td align="CENTER" nosave>Program output</td> 
     </tr> 
     <tr nosave> 
      <td></td> 
      <td align="CENTER" nosave><i>javac</i></td> 
      <td></td> 
      <td align="CENTER" nosave><i>java</i> <br><i>appletviewer</i> <br><i>netscape</i></td> 
      <td></td> 
     </tr> 
    </tbody>
   </table>
  </center> Follow this link to see Sun Microsystems' overview:&nbsp; 
  <a href="http://java.sun.com/docs/books/tutorial/getStarted/intro/definition.html">http://java.sun.com/docs/books/tutorial/getStarted/intro/definition.html</a> 
  <p>It takes time to learn everything about Java and it is important to set your expectations accordingly.&nbsp; There are two main challenges: </p>
  <ul> 
   <li> Learning the basic syntax of the language.</li> 
   <li> Gaining familiarity with the libraries of reusable software components that are available to Java programmers, especially the commonly used parts of the Java Core API (Application Programming Interface).</li> 
  </ul> In the lectures that follow, we will attempt to familiarize you with the basic syntax, and point out the syntactic and semantic differences between Java and C++.&nbsp; We will also introduce you to some of the more important class libraries.&nbsp; The Java API is well documented and you should quickly learn how to navigate the online documentation to find the classes that you need. 
  <p>The Java language is still evolving.&nbsp; We will be using the Java 2 platform, which is also known as the Java Development Kit (JDK). The latest release is Java 2 version 1.3. The default version on Athena is 1.3.0 for Sun and Linux, and 1.2.2 for SGI.&nbsp; To access the Java locker on Athena, type </p>
  <p>&nbsp;&nbsp;&nbsp; add -f java (Sun) </p>
  <p>&nbsp;&nbsp;&nbsp; add java (SGI, Linux) </p>
  <p>Be prepared to encounter bugs in the implementation of the language from time to time.&nbsp; This includes inconsistencies across hardware platforms.&nbsp; Also note that the latest version of Java is not supported by the Netscape browser. <br>&nbsp; </p>
  <h2> 2. Online Java Resources</h2> Here are some online Java resources. 
  <ul> 
   <li> Java tutorial</li> 
   <br>
   <a href="http://java.sun.com/docs/books/tutorial/">http://java.sun.com/docs/books/tutorial/</a> 
   <li> Java 2 platform core API</li> 
   <br>Version 1.2: 
   <a href="http://java.sun.com/products/jdk/1.2/docs/api/index.html">http://java.sun.com/products/jdk/1.2/docs/api/index.html</a> 
   <br>Version 1.3: 
   <a href="http://java.sun.com/products/jdk/1.3/docs/api/index.html">http://java.sun.com/products/jdk/1.3/docs/api/index.html</a>
  </ul> 
  <h2> 3. Applications and Applets</h2> An 
  <i>application</i> is a stand-alone program that executes independently of a browser.&nbsp; It is usually launched from the command line, using the command line interpreter, 
  <i>java</i>. 
  <p>An <i>applet</i> is a program that can be embedded in an HTML page.&nbsp; The program can be run by loading the page into a Java-enabled browser.&nbsp; The JDK includes a tool, called <i>appletviewer</i>, that can also be used to view applets. </p>
  <p>A Java program can be designed to function </p>
  <ul> 
   <li> as an application</li> 
   <li> as an applet</li> 
   <li> both as an application and as an applet</li> 
  </ul> 
  <h3> The Hello World Application</h3> Here is an example of a simple Java application.&nbsp; We make our program an application by writing a class, 
  <i>HelloWorldApp</i>, that contains a function named 
  <i>main()</i>.&nbsp; We can compile our program by typing 
  <p><i>&nbsp;&nbsp;&nbsp; javac HelloWorld.java</i> </p>
  <p>This will produce a file named <i>HelloWorldApp.class</i>. </p>
  <p>We can run the program as application by typing </p>
  <p><i>&nbsp;&nbsp; java HelloWorldApp</i> </p>
  <p>The command line interpreter looks for a function named <i>main()</i> in the <i>HelloWorldApp</i> class and then executes it. </p>
  <p>Points to note: </p>
  <ul> 
   <li> The <i>.class</i> file gets its name from the name of the class and not the name of the source file.&nbsp; In this example we deliberately gave the source file a different name, but in practice, we will place each class in a separate file with the same name.&nbsp; This convention becomes important when we want to write a class that is publicly accessible.</li> 
   <br>&nbsp; 
   <li> Global functions are not allowed in Java.&nbsp; This is why we placed our <i>main()</i> function inside our class.&nbsp; We must make our <i>main()</i> function <i>static</i>, since it should not be associated with a particular object, and we must also make it <i>public</i>, since it is the entry point to our program.</li> 
  </ul> 
  <i><u>HelloWorld.java</u></i> 
  <p><i>class HelloWorldApp {</i> <br><i>&nbsp;&nbsp;&nbsp; public static void main(String[] args) {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Hello World!");</i> <br><i>&nbsp;&nbsp;&nbsp; }</i> <br><i>}</i> <br>&nbsp; </p>
  <h3> The Hello World Applet</h3> Here is an example of a simple Java applet.&nbsp; We make our program an applet by writing a class, 
  <i>HelloWorld</i>, that inherits the 
  <i>JApplet</i> class provided in the Java Swing API.&nbsp; The 
  <i>extends</i> keyword declares that class 
  <i>HelloWorld</i> inherits class 
  <i>JApplet</i>.&nbsp; Before we can refer to the 
  <i>JApplet</i> class, we must declare its existence using the 
  <i>import</i> keyword.&nbsp; Here we have imported the 
  <i>JApplet</i> class, which belongs to the 
  <i>javax.swing</i> package, and we have also imported the 
  <i>Graphics</i> class, which belongs to the 
  <i>java.awt</i> package. 
  <p>The <i>JApplet</i> class possesses a method named <i>paint()</i>, which it inherits from one of its superclasses.&nbsp; Our <i>HelloWorld</i> class inherits this <i>paint()</i> method when it inherits the <i>JApplet</i> class.&nbsp; The purpose of <i>paint()</i> is to draw the contents of the applet.&nbsp; Unfortunately, the default <i>paint()</i> method that we inherit cannot do anything useful since it has no way of knowing what we want to draw.&nbsp; We must therefore <i>override</i> the default <i>paint()</i> in our <i>HelloWorld</i> class.&nbsp; (Note that while C++ requires the use of the <i>virtual</i> keyword to indicate function overriding, Java does not require us to inform the compiler that overriding will take place.) </p>
  <p>The <i>paint()</i> method receives as an argument a <i>Graphics</i> object, which contains information about where and how we can draw.&nbsp; In this example, we choose to draw the text "Hello World!" at coordinates (50,25) by calling the <i>drawString</i> method. </p>
  <p>We can compile our program by typing </p>
  <p>&nbsp;&nbsp;&nbsp; <i>javac HelloWorld.java</i> </p>
  <p>This produces a file named <i>HelloWorld.class</i>.&nbsp; We now embed our applet in an HTML file, <i>Hello.html</i>, and we can run it by typing </p>
  <p>&nbsp;&nbsp;&nbsp; <i>appletviewer Hello.html</i> </p>
  <p>We can also view Hello.html in a Java-enabled browser. <br>&nbsp; </p>
  <p><i><u>HelloWorld.java</u></i> </p>
  <p><i>import javax.swing.JApplet;</i> <br><i>import java.awt.Graphics;</i> </p>
  <p><i>public class HelloWorld extends JApplet {</i> <br><i>&nbsp;&nbsp;&nbsp; public void paint(Graphics g) {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString("Hello world!", 50, 25);</i> <br><i>&nbsp;&nbsp;&nbsp; }</i> <br><i>}</i> <br>&nbsp; </p>
  <p><i><u>Hello.html</u></i> </p>
  <p><i>&lt;HTML&gt;</i> <br><i>&lt;HEAD&gt;</i> <br><i>&lt;TITLE&gt; A Simple Program &lt;/TITLE&gt;</i> <br><i>&lt;/HEAD&gt;</i> </p>
  <p><i>&lt;BODY&gt;</i> <br><i>Here is the output of my program:</i> <br><i>&lt;APPLET CODE="HelloWorld.class" WIDTH=150 HEIGHT=25&gt;</i> <br><i>&lt;/APPLET&gt;</i> <br><i>&lt;/BODY&gt;</i> <br><i>&lt;/HTML&gt;</i> <br>&nbsp; </p>
  <h2> 4. Java Basics</h2> 
  <h3> Java Data Types</h3> Java has two main categories of data types: 
  <i>primitive</i> data types and 
  <i>reference</i> data types.&nbsp; Java does not support the notion of pointers. 
  <p>Here is a list of primitive data types. <br>&nbsp; </p>
  <center>
   <table border width="50%" nosave> 
    <tbody>
     <tr> 
      <th>Primitive data type</th> 
      <th>Size in bytes/Format</th> 
     </tr> 
     <tr align="CENTER"> 
      <td><i>byte</i></td> 
      <td>1</td> 
     </tr> 
     <tr align="CENTER"> 
      <td><i>char, short</i></td> 
      <td>2</td> 
     </tr> 
     <tr nosave> 
      <td align="CENTER" nosave><i>int</i>, <i>float</i></td> 
      <td align="CENTER" nosave>4</td> 
     </tr> 
     <tr align="CENTER"> 
      <td><i>long, double</i></td> 
      <td>8</td> 
     </tr> 
     <tr nosave> 
      <td align="CENTER" nosave><i>boolean</i></td> 
      <td align="CENTER" nosave>true or false</td> 
     </tr> 
    </tbody>
   </table>
  </center> 
  <p>Reference data types include arrays and classes.&nbsp; Here is an example of a Line class. </p>
  <p><i><u>Line.java</u></i> </p>
  <p><i>class Line {</i> </p>
  <p><i>&nbsp;&nbsp;&nbsp; private int miX1, miX2, miY1, miY2;</i> </p>
  <p><i>&nbsp;&nbsp;&nbsp; public Line() {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; miX1 = miX2 = miY1 = miY2 = 0;</i> <br><i>&nbsp;&nbsp;&nbsp; }</i> </p>
  <p><i>&nbsp;&nbsp;&nbsp; public Line(int iX1, int iX2, int iY1, int iY2) {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; miX1 = iX1;</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; miX2 = iX2;</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; miY1 = iY1;</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; miY2 = iY2;</i> <br><i>&nbsp;&nbsp;&nbsp; }</i> <br><i>}</i> <br>&nbsp; </p>
  <h3> Creating Objects - Constructors</h3> In Java, objects of user defined data types must be dynamically created.&nbsp; In the following example, the first statement declares a 
  <i>Line</i> object, but does not actually create it.&nbsp; The second statement uses the 
  <i>new</i> operator to actually create the object.&nbsp; Note the subtle differences between Java and C++. 
  <p><i>Line line;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Declaration of object (does not create object.)</i> <br><i>line = new Line();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Instantiation of object.</i> <br>&nbsp; </p>
  <h3> Garbage Collection and Finalization</h3> The Java runtime system provides a 
  <i>garbage collector</i>, which periodically destroys any unused objects in dynamic memory.&nbsp; The Java garbage collector uses a 
  <i>mark-sweep</i> algorithm.&nbsp; The dynamic memory is first scanned for referenced objects and then all remaining objects are treated as garbage.&nbsp; Prior to deleting an object, the garbage collector will call the object's 
  <i>finalizer, </i>which allows the object to perform an orderly cleanup of any associated system resources, such as open files. 
  <p>Finalization and garbarge collection happen asynchronously in the background.&nbsp; It is also possible to force these tasks to occur using the <i>System.runFinalization()</i> and <i>System.gc()</i> commands. </p>
  <p>A finalizer has the form </p>
  <p><i>&nbsp;&nbsp;&nbsp; protected void finalize() throws Throwable {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Clean up code for this class here.</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.finalize();&nbsp; // Call the superclass's finalizer (if provided.)</i> <br><i>&nbsp;&nbsp; }</i> <br>&nbsp; </p>
  <h3> Inheritance</h3> As indicated above, the 
  <i>extends</i> keyword allows us to write classes that inherit the properties and methods of another class. 
  <p><i>&nbsp;&nbsp;&nbsp; class SubClassName extends SuperClassName {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</i> <br><i>&nbsp;&nbsp;&nbsp; }</i> </p>
  <p>If a superclass name is not specified, the superclass is assumed to be <i>java.lang.Object</i>.&nbsp;&nbsp; Also, note that each class can have only one immediate superclass i.e. Java does not support multiple inheritance. <br>&nbsp; </p>
  <h3> Packages</h3> A package is a group of related classes or interfaces.&nbsp; Each package defines its own namespace. Thus, two different packages may contain classes with the same name. 
  <p>We can create a package by placing a <i>package</i> statement at the top of every source file that defines a class belonging to the package.&nbsp; We may later use the classes in the package by placing an <i>import</i> statement at the top of the source file that needs to access the classes in the package. <br>&nbsp; </p>
  <p><i><u>graphics/Line.java</u></i>&nbsp; (Path of the file is relative to the CLASSPATH environment variable.) </p>
  <p><i>package graphics;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Class Line belongs to package graphics.</i> </p>
  <p><i>public class Line {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The public class modifier makes this class accessible outside the package.</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp; ...</i> <br><i>}</i> </p>
  <p><i><u>MyTest.java</u></i> </p>
  <p><i>import graphics.*;&nbsp;&nbsp;&nbsp;&nbsp; // Provides access to all public classes in package graphics.</i> </p>
  <p><i>class MyTest {</i> <br><i>&nbsp;&nbsp;&nbsp; public static void main(String[] args) {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Line line;</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; graphics.Line line2;&nbsp;&nbsp; // Can be used for conflict resolution if two packages have a Line class.</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; line = new Line(0,0,3,4);</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; line2 = new Line();</i> <br><i>&nbsp;&nbsp;&nbsp; }</i> <br><i>}</i> <br>&nbsp; </p>
  <p>If a package name is not specified for a class, then the class belongs to the default package.&nbsp; The default package has no name and it is always imported. </p>
  <p>Here are a few of the core Java packages: </p>
  <ul> 
   <li> java.lang&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - core Java language.</li> 
   <li> java.io&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - input/output streams.</li> 
   <li> java.util&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - utility classes, e.g. Stack, Vector, Hashtable, Oberserver/Observable.</li> 
   <li> java.net&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - networking classes.</li> 
   <li> java.security&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - security classes.</li> 
   <li> javax.swing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Swing Graphical User Interface (GUI) components (the new preferred way).</li> 
   <li> java.awt&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Abstract Window Toolkit GUI components (the old way).</li> 
   <li> java.awt.image&nbsp; - image processing.</li> 
  </ul> 
  <h3> Member Access Specifiers</h3> There are four types of member access levels: 
  <i>private</i>, 
  <i>protected</i>, 
  <i>public</i> and 
  <i>package</i>.&nbsp; Note that, unlike C++, we must specify access levels on a per-member basis. 
  <p><i>class Access {</i> <br><i>&nbsp;&nbsp;&nbsp; private privateMethod();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Access level is "private".</i> <br><i>&nbsp;&nbsp;&nbsp; protected protectedMethod();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Access level is "protected".</i> <br><i>&nbsp;&nbsp;&nbsp; public publicMethod();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Access level is "public".</i> <br><i>&nbsp;&nbsp;&nbsp; packageMethod();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Access level is "package".</i> <br><i>}</i> <br>&nbsp; <br>&nbsp; </p>
  <table border cols="5" width="100%" nosave> 
   <tbody>
    <tr align="CENTER" nosave> 
     <th rowspan="2" nosave>Access specifier</th> 
     <th colspan="4" nosave>Acessible by</th> 
    </tr> 
    <tr nosave> 
     <th nosave>Class definition</th> 
     <th nosave>Subclass definition</th> 
     <th nosave>Rest of Package</th> 
     <th nosave>Rest of World</th> 
    </tr> 
    <tr align="CENTER" nosave> 
     <td>private</td> 
     <td>Yes</td> 
     <td nosave>No</td> 
     <td>No</td> 
     <td>No</td> 
    </tr> 
    <tr align="CENTER" nosave> 
     <td>protected</td> 
     <td>Yes</td> 
     <td nosave>Yes</td> 
     <td>Yes</td> 
     <td>No</td> 
    </tr> 
    <tr align="CENTER" nosave> 
     <td>public</td> 
     <td nosave>Yes</td> 
     <td>Yes</td> 
     <td>Yes</td> 
     <td>Yes</td> 
    </tr> 
    <tr align="CENTER" nosave> 
     <td>none i.e. package&nbsp;</td> 
     <td nosave>Yes</td> 
     <td>No</td> 
     <td>Yes</td> 
     <td>No</td> 
    </tr> 
   </tbody>
  </table> 
  <h3> Instance and Class members</h3> As in C++, we can have instance members or class members.&nbsp; A class member is declared using the 
  <i>static</i> keyword. 
  <p><i>class MyPoint {</i> <br><i>&nbsp;&nbsp;&nbsp; int x;</i> <br><i>&nbsp;&nbsp;&nbsp; int y;</i> <br><i>&nbsp;&nbsp;&nbsp; static int x_origin;</i> <br><i>&nbsp;&nbsp;&nbsp; static int y_origin;</i> <br><i>}</i> </p>
  <p>In this example, every object has its own <i>x</i> member, however, all objects share a single <i>x_origin</i> member. <br>&nbsp; </p>
  <h3> Constant Members</h3> A 
  <i>final</i> variable is one whose value cannot be changed e.g. 
  <p><i>class Avo {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final double AVOGADRO = 6.023e23;</i> <br><i>}</i> <br>&nbsp; </p>
  <h3> Class modifiers</h3> We have already seen some examples of member modifiers, such as 
  <i>public</i> and 
  <i>private</i>.&nbsp; Java also allows us to specify class modifiers. 
  <ul> 
   <li> A <i>public</i> class is one which can be used by objects outside the current package e.g.</li> 
  </ul> 
  <ul>
   <i>package graphics;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Class Line belongs to package graphics.</i> 
   <p><i>public class Line {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // The public class modifier makes this class accessible outside the package.</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp; ...</i> <br><i>}</i> <br>&nbsp; </p>
   <li> An <i>abstract</i> class is one which cannot be instantiated, and must be subclassed instead. An abstract class may contain abstract methods i.e. methods with no implementation, however, it may also provide default implementations for other methods.&nbsp; e.g.</li> 
   <p><br><i>abstract class GraphicObject {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x, y;</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void moveTo(int newX, int newY) {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; abstract void draw();&nbsp; //&nbsp; This means that the class must be made abstract.</i> <br><i>}</i> </p>
   <p><i>class Circle extends GraphicObject {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void draw() {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ...</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</i> <br><i>}</i> <br>&nbsp; </p>
   <li> A <i>final</i> class is one which cannot be subclassed.&nbsp; This may be required for security or design reasons. e.g.</li> 
   <p><br><i>final class String {</i> <br><i>&nbsp;&nbsp;&nbsp;&nbsp; ...</i> <br><i>}</i> </p>
   <p>It is also possible to make individual methods final.</p>
  </ul>   
 </body>
</html>