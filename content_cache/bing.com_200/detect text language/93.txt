<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
 <head> 
  <meta http-equiv="X-UA-Compatible" content="IE=Edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"> 
  <meta name="robots" content="index,nofollow"> 
  <title>WebBrowserProgramming - Python Wiki</title> 
  <script type="text/javascript" src="/wiki/common/js/common.js"></script> 
  <script type="text/javascript">
<!--
var search_hint = "Search";
//-->
</script> 
  <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/wiki/europython/css/common.css"> 
  <link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="/wiki/europython/css/screen.css"> 
  <link rel="stylesheet" type="text/css" charset="utf-8" media="print" href="/wiki/europython/css/print.css"> 
  <link rel="stylesheet" type="text/css" charset="utf-8" media="projection" href="/wiki/europython/css/projection.css"> 
  <!-- css only for MS IE6/IE7 browsers --> 
  <!--[if lt IE 8]>
   <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/wiki/europython/css/msie.css">
<![endif]--> 
  <link rel="alternate" title="Python Wiki: WebBrowserProgramming" href="/moin/WebBrowserProgramming?diffs=1&amp;show_att=1&amp;action=rss_rc&amp;unique=0&amp;page=WebBrowserProgramming&amp;ddiffs=1" type="application/rss+xml"> 
  <link rel="Start" href="/moin/FrontPage"> 
  <link rel="Alternate" title="Wiki Markup" href="/moin/WebBrowserProgramming?action=raw"> 
  <link rel="Alternate" media="print" title="Print View" href="/moin/WebBrowserProgramming?action=print"> 
  <link rel="Search" href="/moin/FindPage"> 
  <link rel="Index" href="/moin/TitleIndex"> 
  <link rel="Glossary" href="/moin/WordIndex"> 
  <link rel="Help" href="/moin/HelpOnFormatting"> 
 </head> 
 <body lang="en" dir="ltr"> 
  <div id="header"> 
   <form id="searchform" method="get" action="/moin/WebBrowserProgramming"> 
    <div> 
     <input type="hidden" name="action" value="fullsearch"> 
     <input type="hidden" name="context" value="180"> 
     <label for="searchinput">Search:</label> 
     <input id="searchinput" type="text" name="value" value="" size="20" onfocus="searchFocus(this)" onblur="searchBlur(this)" onkeyup="searchChange(this)" onchange="searchChange(this)" alt="Search"> 
     <input id="titlesearch" name="titlesearch" type="submit" value="Titles" alt="Search Titles"> 
     <input id="fullsearch" name="fullsearch" type="submit" value="Text" alt="Search Full Text"> 
    </div> 
   </form> 
   <script type="text/javascript">
<!--// Initialize search form
var f = document.getElementById('searchform');
f.getElementsByTagName('label')[0].style.display = 'none';
var e = document.getElementById('searchinput');
searchChange(e);
searchBlur(e);
//-->
</script> 
   <div id="logo">
    <a href="/moin/FrontPage"></a>
    <a href="http://www.python.org"><img src="/wiki/europython/img/python-logo.gif" alt="Python"></a>
    <a name="logo"></a>
   </div> 
   <div id="locationline"> 
    <ul id="pagelocation"> 
     <li><a href="/moin/WebBrowserProgramming">WebBrowserProgramming</a></li> 
    </ul> 
   </div> 
   <ul id="pagetrail"> 
    <li><a href="/moin/WebBrowserProgramming">WebBrowserProgramming</a></li> 
   </ul> 
  </div> 
  <div id="sidebar"> 
   <div id="star"> 
   </div> 
   <div class="sidepanel"> 
    <ul id="navibar"> 
     <li class="wikilink"><a href="/moin/FrontPage">FrontPage</a></li>
     <li class="wikilink"><a href="/moin/RecentChanges">RecentChanges</a></li>
     <li class="wikilink"><a href="/moin/FindPage">FindPage</a></li>
     <li class="wikilink"><a href="/moin/HelpContents">HelpContents</a></li>
     <li class="current"><a href="/moin/WebBrowserProgramming">WebBrowserProgramming</a></li> 
    </ul> 
   </div> 
   <div class="sidepanel"> 
    <h1>Page</h1> 
    <ul class="editbar">
     <li><span class="disabled">Immutable Page</span></li>
     <li class="toggleCommentsButton" style="display:none;"><a href="#" class="nbcomment" onclick="toggleComments();return false;">Comments</a></li>
     <li><a class="nbinfo" href="/moin/WebBrowserProgramming?action=info" rel="nofollow">Info</a></li>
     <li><a class="nbattachments" href="/moin/WebBrowserProgramming?action=AttachFile" rel="nofollow">Attachments</a></li>
     <li> 
      <form class="actionsmenu" method="GET" action="/moin/WebBrowserProgramming"> 
       <div> 
        <label>More Actions:</label> 
        <select name="action" onchange="if ((this.selectedIndex != 0) &amp;&amp;
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;"> <option value="raw">Raw Text</option> <option value="print">Print View</option> <option value="refresh">Delete Cache</option> <option value="show" disabled class="disabled">------------------------</option> <option value="SpellCheck">Check Spelling</option> <option value="LikePages">Like Pages</option> <option value="LocalSiteMap">Local Site Map</option> <option value="show" disabled class="disabled">------------------------</option> <option value="RenamePage" disabled class="disabled">Rename Page</option> <option value="DeletePage" disabled class="disabled">Delete Page</option> <option value="show" disabled class="disabled">------------------------</option> <option value="show" disabled class="disabled">------------------------</option> <option value="show" disabled class="disabled">Remove Spam</option> <option value="show" disabled class="disabled">Revert to this revision</option> <option value="show" disabled class="disabled">------------------------</option> <option value="SlideShow">SlideShow</option> </select> 
        <input type="submit" value="Do"> 
       </div> 
       <script type="text/javascript">
<!--// Init menu
actionsMenuInit('More Actions:');
//-->
</script> 
      </form> </li>
    </ul> 
   </div> 
   <div class="sidepanel"> 
    <h1>User</h1> 
    <ul id="username">
     <li><a href="/moin/WebBrowserProgramming?action=login" id="login" rel="nofollow">Login</a></li>
    </ul> 
   </div> 
  </div> 
  <div id="page" lang="en" dir="ltr"> 
   <div dir="ltr" id="content" lang="en">
    <span class="anchor" id="top"></span> 
    <span class="anchor" id="line-1"></span>
    <p class="line867"> </p>
    <h1 id="Web_Browser_Programming_in_Python">Web Browser Programming in Python</h1> 
    <span class="anchor" id="line-2"></span>
    <p class="line874">TODO: merge in and research these, found on comp.lang.python <span class="anchor" id="line-3"></span><span class="anchor" id="line-4"></span></p>
    <p class="line874">Yes, Python can do it... on Windows. <span class="anchor" id="line-5"></span><span class="anchor" id="line-6"></span></p>
    <p class="line874">Two (examples) ways: <span class="anchor" id="line-7"></span><span class="anchor" id="line-8"></span></p>
    <ul>
     <li><p class="line891"><a class="nonexistent" href="/moin/ActiveScripting">ActiveScripting</a> (<a class="nonexistent" href="/moin/PythonScript">PythonScript</a>), included in <a href="/moin/PyWin32">PyWin32</a> <span class="anchor" id="line-9"></span></p></li>
     <li><p class="line862">Gestalt (who mix Python, Ruby &amp; <a class="nonexistent" href="/moin/JavaScript">JavaScript</a>, via Silverlight) <span class="anchor" id="line-10"></span><span class="anchor" id="line-11"></span></p></li>
    </ul>
    <p class="line862">TODO: Add mention of IPython Notebook which can be run remotely, easily on AWS, and used within your browser. The HTML client can also interact with <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> and DOM, though this feature isn't quite merged yet. There's a lot being done on it, but it's already being used and probably should be mentioned here. <span class="anchor" id="line-12"></span><span class="anchor" id="line-13"></span></p>
    <p class="line862">This topic covers ways in which python can be used in web browsers to control, create or manipulate the content within a user's web browser, or a web-based technology (such as <a class="http" href="http://webkit.org">WebKit</a>, the technology behind Safari, Midori, the OLPC Browser, Adobe AIR, Google Chrome and much more; XULrunner (the engine behind <a class="http" href="http://mozilla.com/firefox">Firefox</a> and much more); MSHTML (the engine behind IE and <a class="http" href="http://en.wikipedia.org/wiki/Trident_(layout_engine)#Trident-based_applications">much more</a>); and KDE's KHTMLPart. <span class="anchor" id="line-14"></span><span class="anchor" id="line-15"></span></p>
    <p class="line874">To clarify what type of technology goes onto this page, some examples of types of technology that can and cannot be added to this section: <span class="anchor" id="line-16"></span><span class="anchor" id="line-17"></span></p>
    <ul>
     <li><p class="line862">Specifically excluded from the list is technology that simply generates static HTML content. So, an HTML pretty-printer library, as the resultant HTML simply uses the browser for "display" purposes rather than using the browser as an "application execution environment", is out. Such technologies can instead be found at <a href="/moin/WebClientProgramming">WebClientProgramming</a>. <span class="anchor" id="line-18"></span></p></li>
     <li><p class="line862">Plugins for Web Browsers that provide direct access to the DOM model of the web browser. In exactly the same way that most web browsers have <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> by default as a language that can directly access the DOM model of the web browser, a plugin or other system that can do the same thing (with Python using <tt class="backtick">&lt;script&nbsp;type="text/python"&nbsp;/&gt;</tt> instead of <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> using <tt class="backtick">&lt;script&nbsp;language="javascript"&nbsp;/&gt;</tt>) should be listed on this page. <span class="anchor" id="line-19"></span></p></li>
     <li><p class="line862">Python-based technology that auto-generates or compiles <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> definitely counts, as the resultant <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> would be executed by the web browser. <span class="anchor" id="line-20"></span></p></li>
     <li><p class="line862">Technology that simply <em>uses</em> <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> or depends on <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> libraries (such as mochikit, extjs or prototype) does not count, but a Python-based wrapper library around a <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> engine definitely counts. <span class="anchor" id="line-21"></span><span class="anchor" id="line-22"></span></p></li>
    </ul>
    <p class="line862">This latter example requires some further explanation: Pyjamas, for example, is a Python-to-<a class="nonexistent" href="/moin/JavaScript">JavaScript</a> compiler that can include inline <a class="nonexistent" href="/moin/JavaScript">JavaScript</a>. So, although the input to Pyjamas is part Python, part <a class="nonexistent" href="/moin/JavaScript">JavaScript</a>, the output is pure <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> that runs in a web browser, and so any such "mixed" language libraries should be included on this page. <span class="anchor" id="line-23"></span><span class="anchor" id="line-24"></span></p>
    <p class="line867"> </p>
    <h2 id="Python-to-JavaScript_Compilers">Python-to-JavaScript Compilers</h2> 
    <span class="anchor" id="line-25"></span>
    <p class="line862">These are tools that convert Python into <a class="nonexistent" href="/moin/JavaScript">JavaScript</a>, that can then be run either stand-alone, using technology such as Spidermonkey, Google's V8 engine (for example, using <a class="http" href="http://code.google.com/p/pyv8">pyv8</a>), or in a web browser (where, in order to be useful, the applications must of course interface with the DOM model of the browser, typically using an AJAX library). <span class="anchor" id="line-26"></span><span class="anchor" id="line-27"></span></p>
    <p class="line874">The translation from Python to Javascript can be done by a Python program <span class="anchor" id="line-28"></span><span class="anchor" id="line-29"></span></p>
    <ul>
     <li><p class="line891"><a class="https" href="https://github.com/chrivers/pyjaco">Pyjaco</a>, the Python-to-Javascript Compiler is a python-based compiler that will compile most python code into fairly compact javascript. It uses a small (~60KB) standard library to implement all the usual python types like list, dict, int, bool, etc. It supports classes, inheritance, keyword and variable arguments, and much more. It has a comprehensive test suite, and aims to be the most fun and efficient way to create web applications with Python. <span class="anchor" id="line-30"></span></p></li>
     <li><p class="line891"><a href="/moin/Pyjamas">Pyjamas</a> is a Python-to-<a class="nonexistent" href="/moin/JavaScript">JavaScript</a> compiler and AJAX-based Web Toolkit and Framework that allows users to write code in standard Python that will be run in a web browser, after translation to <a class="nonexistent" href="/moin/JavaScript">JavaScript</a>. pyjs - the compiler - can also be used as a stand-alone <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> compiler. There are three main modes: --strict, providing as close to full strict python compatibility and interoperability as is both possible and has been contributed so far (which is quite a lot); -O, providing a subset of python functionality and providing much faster performance as a result; --stupid-mode which falls back to javascript for certain operations, with the result that the output is much easier to read and to compare to the original python from which it was generated, but runs the risk of changing the meaning of the python application and requiring a deep understanding of how javascript operates (stupidly - hence the name of the mode). <span class="anchor" id="line-31"></span></p></li>
     <li><p class="line891"><a href="/moin/Py2Js">Py2Js</a> is an unmaintained project that can still be downloaded <a class="http" href="http://davidf.sjsoft.com/files/py2js">here</a>. It is purely a Python-to-<a class="nonexistent" href="/moin/JavaScript">JavaScript</a> compiler/translator. <span class="anchor" id="line-32"></span></p></li>
     <li><p class="line891"><a class="http" href="http://mattpap.github.com/py2js/html/">Py2js</a> is a maintained project that provides a Python-to-<a class="nonexistent" href="/moin/JavaScript">JavaScript</a> compiler. <span class="anchor" id="line-33"></span></p></li>
     <li><p class="line891"><a class="https" href="https://github.com/p2k/PyCow">PyCow</a> is an unmaintained project to translate Python code to Javascript with Mootools <span class="anchor" id="line-34"></span></p></li>
     <li><p class="line891"><a class="http" href="http://fiddlesalad.com/python/">Fiddle Salad</a> is a web development IDE with HTML and CSS that compiles Python to <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> <span class="anchor" id="line-35"></span></p></li>
     <li><p class="line891"><a class="http" href="http://www.transcrypt.org">Transcrypt</a> is a tool to precompile a fairly extensive subset of Python into compact, readable Javascript. It has the following characteristics: Allows for classical OO programming with multiple inheritance. Seamless integration with the universe of high-quality web-oriented <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> libraries, rather than the desktop-oriented Python ones. Hierarchical URL based module system to prevent name conflicts. Simple relation between Python source and generated <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> code for easy debugging. Compact downloads, kB's rather than MB's <span class="anchor" id="line-36"></span><span class="anchor" id="line-37"></span></p></li>
    </ul>
    <p class="line874">or by a Javascript program, with the Python code translated and run on the fly by the web browser <span class="anchor" id="line-38"></span><span class="anchor" id="line-39"></span></p>
    <ul>
     <li><p class="line891"><a class="http" href="http://www.skulpt.org/">Skulpt</a> is a Python-to-<a class="nonexistent" href="/moin/JavaScript">JavaScript</a> compiler that is focussing on providing (only) full Python syntax. The demo includes a Python interpreter prompt, which is actually running in the user's web browser, not on a server, as pure <a class="nonexistent" href="/moin/JavaScript">JavaScript</a>. <span class="anchor" id="line-40"></span></p></li>
     <li><p class="line891"><a class="http" href="http://brython.info/index.html">Brython</a> is a Python 3 implementation that runs in a browser, providing &lt;script type="text/python"&gt;...&lt;/script&gt;. <span class="anchor" id="line-41"></span><span class="anchor" id="line-42"></span><span class="anchor" id="line-43"></span></p></li>
    </ul>
    <p class="line867"> </p>
    <h2 id="Embedding_Python_inside_Web_Browsers">Embedding Python inside Web Browsers</h2> 
    <span class="anchor" id="line-44"></span>
    <p class="line874">This section describes projects where a Python interpreter itself has been embedded into the web browser. Instead of downloading the standard Python executable and libraries, these projects come with the CPython runtime and libraries pre-embedded (and, as such, are typically very large downloads). <span class="anchor" id="line-45"></span><span class="anchor" id="line-46"></span></p>
    <ul>
     <li><p class="line862">PyXPComExt has the full Python interpreter embedded. <a class="http" href="http://pyxpcomext.mozdev.org/">PyXPCOMExt</a> is the interpreter as a XULRunner extension; <a class="http" href="http://developer.mozilla.org/en/PyDOM">PyDOM</a> is a library that will almost certainly be needed, that allows you to manipulate the browser's DOM model using Python. The API is (almost) identical to that of <a class="nonexistent" href="/moin/JavaScript">JavaScript</a>. Effectively, where browsers have built-in support for <tt class="backtick">lang="javascript"</tt>, PyXPComExt adds <tt class="backtick">&lt;script&nbsp;lang="python"&gt;&nbsp;....&nbsp;&lt;/script&gt;</tt> to Firefox. <span class="anchor" id="line-47"></span></p></li>
     <li><p class="line891"><a class="nonexistent" href="/moin/AppCelerator">AppCelerator</a>'s <a class="http" href="http://www.appcelerator.com/platform/titanium-platform/">Titanium</a> provides support for <tt class="backtick">&lt;script&nbsp;type="text/python"&gt;&nbsp;...&nbsp;&lt;/script&gt;</tt>, using <a href="/moin/IronPython">IronPython</a> and Silverlight. <span class="anchor" id="line-48"></span></p></li>
     <li><p class="line891"><a class="http" href="http://ironpython.net/browser/">Ironpython</a> by itself also provides support for <tt class="backtick">&lt;script&nbsp;type="text/python"&gt;&nbsp;...&nbsp;&lt;/script&gt;</tt>. <span class="anchor" id="line-49"></span></p></li>
     <li><p class="line891"><a class="https" href="https://github.com/Nitrogenycs/firebreath-x">Firebreath</a> is an NPAPI plugin that extends access to the full features of DOM programming out to other programming languages, including python. <span class="anchor" id="line-50"></span><span class="anchor" id="line-51"></span></p></li>
    </ul>
    <p class="line867"> </p>
    <h2 id="Python_Wrappers_around_Web_.22Libraries.22_and_Browser_Technology">Python Wrappers around Web "Libraries" and Browser Technology</h2> 
    <span class="anchor" id="line-52"></span>
    <p class="line874">This section describes projects where you can (or have to) create your own web browser application in Python. It includes web browser "engines" that have Python interfaces to access, control and present web pages and web-relevant rich media content (such as Adobe Flash). <span class="anchor" id="line-53"></span><span class="anchor" id="line-54"></span></p>
    <ul>
     <li><p class="line891"><a class="http" href="http://code.google.com/p/cefpython/">CefPython</a> provides python bindings for the Google Chrome browser by using <a class="http" href="http://code.google.com/p/chromiumembedded/">Chromium Embedded Framework</a>, a web browser control based on the Chromium project. <span class="anchor" id="line-55"></span></p></li>
     <li><p class="line891"><a href="/moin/PythonWebKit">PythonWebKit</a> - <a class="http" href="http://www.gnu.org/software/pythonwebkit">PythonWebKit</a> is a Python wrapper around <a class="http" href="http://webkit.org">Webkit</a> that provides direct access to the DOM model. <a class="nonexistent" href="/moin/PyWebKitGtk">PyWebKitGtk</a> has been incorporated into the build, rather than being built separately. Unlike the patched version of <a class="nonexistent" href="/moin/PyWebKitGtk">PyWebKitGtk</a>, <a href="/moin/PythonWebKit">PythonWebKit</a> does not go via gobject to access DOM functions but instead calls the Webkit DOM functions direct. <span class="anchor" id="line-56"></span></p></li>
     <li><p class="line891"><a class="nonexistent" href="/moin/PyWebKitGtk">PyWebKitGtk</a> - <a class="http" href="http://code.google.com/p/pywebkitgtk">PyWebkitGtk</a> is a Python wrapper around <a class="http" href="http://webkit.org">Webkit</a> that embeds the Webkit "engine" as a GTK widget. The standard version of <a class="nonexistent" href="/moin/PyWebKitGtk">PyWebKitGtk</a> is unable to provide access to the DOM model, treating pywebkit as a hands-off widget that can be used to write your own Web Browser (see demobrowser.py). However, a <a class="https" href="https://bugs.webkit.org/show_bug.cgi?id=16401">patch to webkit</a> and a corresponding patch to <a class="nonexistent" href="/moin/PyWebKitGtk">PyWebKitGtk</a> will soon bring DOM model manipulation to python: see <a href="/moin/PyjamasDesktop">PyjamasDesktop</a> for details. <span class="anchor" id="line-57"></span></p></li>
     <li><p class="line891"><a class="nonexistent" href="/moin/PyWebkitQt4">PyWebkitQt4</a> is a python wrapper again around Webkit but this time as a Qt4 widget. An extremely limited subset of bindings to the DOM model have been added to <a class="nonexistent" href="/moin/PyWebkitQt4">PyWebkitQt4</a>, along with the means to execute <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> code snippets. Whilst in principle this sounds like a fantastic idea, in practice it is insane to work with, especially for event callbacks and for anything beyond the most absolute and basic DOM manipulation. <a class="nonexistent" href="/moin/PyWebkitQt4">PyWebkitQt4</a> is best avoided for significant DOM manipulation, or is best treated as nothing more than a means to display HTML (and other web-based media such as Flash and Java applications). <span class="anchor" id="line-58"></span></p></li>
     <li><p class="line862">PyKDE - KDE contains Python bindings to KHTMLPart (which is very similar to Webkit). This allows you to embed HTML into an application window. The Python bindings to the DOM model are slightly... obtuse. to say the least, and PyKHTML - <a class="http" href="http://paul.giannaros.org/pykhtml/">PyKHTML</a> makes them much more tolerable (see <tt class="backtick">dom.py</tt>). However, there are limitations in PyKDE's DOM bindings (that many people will never encounter) that you should investigate thoroughly before utilising PyKDE for seriously heavy-duty DOM model manipulation. To avoid those limitations you should ensure that the entire KDE platform is compiled with C++ RTTI enabled (it is typically disabled by most distributions, by default). <span class="anchor" id="line-59"></span></p></li>
     <li><p class="line891"><a href="/moin/WebKit">WebKit</a> with the Objective-C bindings (MacOS X users only). <a class="http" href="http://webkit.org">Webkit</a> itself has Objective-C bindings, on MacOS X. MacOS X's Objective-C technology comes with automatic bindings to all major programming languages, including Python (using pyobjc). Consequently, you can directly manipulate the DOM model from Python. However, unlike the use of MSHTML, and unlike XULrunner and the patched version of <a href="/moin/WebKit">WebKit</a>, the Objective-C <a href="/moin/WebKit">WebKit</a> bindings are limited to <em>just</em> the DOM model, and are limited to strict accordance with the W3C standards (rather than the de-facto standards defined by real-world <a class="nonexistent" href="/moin/JavaScript">JavaScript</a> usage). So, for example, <tt class="backtick">XMLHttpRequest</tt> is not included in the Objective-C bindings (whereas it is in XULRunner); and the <tt class="backtick">embed</tt> element takes width and height strictly as integers, rather than accepting <tt class="backtick">100px</tt> and stripping off <tt class="backtick">px</tt>. <span class="anchor" id="line-60"></span></p></li>
     <li><p class="line891"><a class="http" href="http://wiki.laptop.org/go/HulaHop">HulaHop</a> provides Python access to DOM model manipulation - via XUL/Gecko Interfaces. <a class="nonexistent" href="/moin/HulaHop">HulaHop</a> is part of the OLPC Sugar Project, but is available stand-alone. It depends on python-xpcom (part of XULRunner). <a class="nonexistent" href="/moin/HulaHop">HulaHop</a> is being removed from Sugar and being replaced by <a href="/moin/WebKit">WebKit</a>. <span class="anchor" id="line-61"></span></p></li>
     <li><p class="line891"><a href="/moin/PyWin32">PyWin32</a> comtypes can be used (with care!) to create an MSHTML IWebBrowser2 ActiveX window and thus provide access to the full DOM features of the MSHTML (Trident) engine. <a href="/moin/PyjamasDesktop">PyjamasDesktop</a> uses this technique to create the <a class="http" href="http://pyjamas.svn.sourceforge.net/viewvc/pyjamas/trunk/pyjd/mshtml.py">mshtml.py</a> port. Note that creation and use of <tt class="backtick">XMLHttpRequest</tt> is also shown in <a href="/moin/PyjamasDesktop">PyjamasDesktop</a>'s <tt class="backtick">mshtml.py</tt>. <span class="anchor" id="line-62"></span></p></li>
     <li>python-wxWebKit is beginning to provide Python access to DOM model manipulation - via python bindings that are auto-generated using SWIG. The goal of the project is to provide full access to the entire DOM model, and this goal is, as of May 2011, approximately 25% completed. <span class="anchor" id="line-63"></span><span class="anchor" id="line-64"></span></li>
    </ul>
    <p class="line867"> </p>
    <h2 id="Python_Wrappers_around_Web_Browser_.22Test_Suite.22_Libraries">Python Wrappers around Web Browser "Test Suite" Libraries</h2> 
    <span class="anchor" id="line-65"></span>
    <p class="line874">This section describes projects where you can test web applications, initiated from the command-line with python bindings. <span class="anchor" id="line-66"></span><span class="anchor" id="line-67"></span></p>
    <ul>
     <li><p class="line891"><a class="http" href="http://seleniumhq.org">Selenium</a>, the browser test suite, has python bindings: <a class="http" href="http://seleniumhq.org/docs/appendix_installing_python_driver_client.html">Install HOWTO</a>. Selenium is a suite of tools to automate web app testing across many platforms. <span class="anchor" id="line-68"></span></p></li>
     <li><p class="line891"><a class="http" href="http://getwindmill.com">Windmill</a> is a web testing tool designed to let you painlessly automate and debug your web application. Like selenium, it also has Python bindings. <span class="anchor" id="line-69"></span></p></li>
    </ul>
    <span class="anchor" id="bottom"></span>
   </div>
   <p id="pageinfo" class="info" lang="en" dir="ltr">WebBrowserProgramming (last edited 2016-01-23 19:35:15 by <span title="JdeH @ 178-85-219-141.dynamic.upc.nl[178.85.219.141]"><a class="nonexistent" href="/moin/JdeH" title="JdeH @ 178-85-219-141.dynamic.upc.nl[178.85.219.141]">JdeH</a></span>)</p> 
   <div id="pagebottom"></div> 
  </div> 
  <div id="footer"> 
   <ul id="credits"> 
    <li><a href="http://moinmo.in/" title="This site uses the MoinMoin Wiki software.">MoinMoin Powered</a></li>
    <li><a href="http://moinmo.in/Python" title="MoinMoin is written in Python.">Python Powered</a></li>
    <li><a href="http://moinmo.in/GPL" title="MoinMoin is GPL licensed.">GPL licensed</a></li>
    <li><a href="http://validator.w3.org/check?uri=referer" title="Click here to validate this page.">Valid HTML 4.01</a></li> 
   </ul> 
  </div> 
  <p style="text-align: center; font-size: 85%"><a href="/moin/FrontPage#use">Unable to edit the page? See the FrontPage for instructions.</a></p>  
 </body>
</html>