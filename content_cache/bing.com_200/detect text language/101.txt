<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
  <title>Java - Integer input</title> 
  <link href="../cp4044.css" rel="stylesheet" type="text/css"> 
  <style type="text/css">
		<!--
		table {
			margin-right: auto;
			margin-left: auto;
		}
		td {
			padding: 0.1em 0.5em;
		}
		img {
			float: right;
			padding: 10px 0px 5px 15px;
		}
		-->
    </style> 
 </head> 
 <body> 
  <div id="content"> 
   <h1>Java - Integer input</h1> 
   <div id="navpage">
     [ 
    <a href="#basic">Basic input </a>| 
    <a href="#stdio">Standard input and the io package </a>| 
    <a href="#exceptions">Exceptions </a>|
    <a href="#cla">Command line usage </a>| 
    <a href="#file">Reading from a file </a>] 
   </div> 
   <h2 id="basic">Basic input</h2> 
   <p>It might be thought that a program that reads in two user entered integers and prints out their sum would be a simple piece of code with little of real interest. This assumption is wrong, once the programmer wishes to ensure that errors are detected and also wants to handle the user input channel in a reasonably general fashion. Java provides all these facilities. Unfortunately for those who like simple "proof-of-concept" programs, the Java programmer has to do it properly - or not at all. </p> 
   <p>Here's a Java program that prompts the user to enter two integer numbers and prints out their sum: </p> 
   <p class="code"> import java.io.*; public class Addup { static public void main(String args[]) { InputStreamReader stdin = new InputStreamReader(System.in); BufferedReader console = new BufferedReader(stdin); int num1 = 0, num2 = 0; String str1, str2; try { System.out.print("Enter first number "); str1 = console.readLine(); num1 = Integer.parseInt(str1); System.out.print("Enter second number "); str2 = console.readLine(); num2 = Integer.parseInt(str2); } catch(IOException e) { System.out.println("Input error"); System.exit(1); } catch(NumberFormatException e) { System.out.println(e.getMessage() + " is not numeric"); System.exit(1); } System.out.println(num1 + " + " + num2 + " = " + (num1+num2)); } } </p> 
   <p>Here's a sample dialogue: </p> 
   <p class="output"> C:\&gt;java Addup Enter first number 23 Enter second number 78 23 + 78 = 101 C:\&gt; </p> 
   <h2 id="stdio">Standard input and the <tt>io</tt> package</h2> 
   <p>The program uses various classes (such as <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/BufferedReader.html"><tt>BufferedReader</tt></a> and <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/InputStreamReader.html"><tt>InputStreamReader</tt></a>) that are defined in the <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/package-summary.html"><tt>java.io</tt></a> package. It is thus necessary to import this package. </p> 
   <p class="code">import java.io.*;</p> 
   <p>To make the whole program work, it is necessary to read the character stream from the standard input channel, save it as a sequence of characters and then use a method that converts the numeric value from the external character format to the internal binary format. </p> 
   <div class="tip"> 
    <p>C programmers and Unix users talk about the <strong>standard input</strong> channel, often abbreviated to <strong>stdin</strong>. This is commonly associated with the console device keyboard although operating systems such as Unix allow the user to redirect standard input to almost any data source such as a file, a data communication channel or the output of another program without any need to modify the program in any way. This is a very powerful and useful facility. </p> 
   </div> 
   <p>In order to convert from external numeric format to internal format, Java uses the <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/lang/Integer.html#parseInt(java.lang.String)"> <tt>parseInt()</tt></a> method of the <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/lang/Integer.html"><tt>Integer</tt></a> class. The method requires a standard Java string as parameter. The Integer class is sometimes called a <strong>wrapper class</strong>. It contains various methods etc., associated with the use and manipulation of the primitive data type <tt>int</tt>. The Integer class is an example of a static class. This means you can use its' methods without needing to create an object of type Integer first. You use the classname intstead of the object name, e.g. <tt>Integer.parseInt()</tt>.</p> 
   <p>Before the conversion can be performed, the input character sequence has to be obtained and stored as a string. A console keyboard user will normally terminate the input by pressing the ENTER key, thus marking out a line of text on console screen. The terminated line of input can be obtained, as a string, using the <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/BufferedReader.html#readLine()"><tt>readLine()</tt></a> input method. This will internally detect and remove the terminating return character and construct a properly formed string. The sequence of events is: </p> 
   <p class="code"> String str1; int num1; str1 = console.readLine(); num1 = Integer.parseInt(str1); </p> 
   <p>The <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/BufferedReader.html#readLine()"><tt>readLine()</tt></a> method belongs to the class <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/BufferedReader.html"><tt>BufferedReader</tt></a>. A <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/BufferedReader.html"><tt>BufferedReader</tt></a> object must be associated with an <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/InputStreamReader.html"><tt>InputStreamReader</tt></a> which in turn must be associated with an <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/InputStream.html"><tt>InputStream</tt></a> object.</p> 
   <p>This is all handled by the code: </p> 
   <p class="code"> InputStreamReader stdin = new InputStreamReader(System.in); BufferedReader console = new BufferedReader(stdin); </p> 
   <p><tt>stdin</tt> and <tt>console</tt> are just local variable names. The definition of the <tt>System</tt> class includes the line </p> 
   <p class="code">public static final java.io.InputStream in;</p> 
   <p>which establishes the nature of <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/lang/System.html#in"><tt>System.in</tt></a>.</p> 
   <h2 id="exceptions">Exceptions</h2> 
   <p>One of the important characteristics of any program designed to be used by humans is that they are likely to make mistakes entering data into the program. In Java, errors are called <strong>exceptions</strong>. The professional programmer must attempt to detect or catch exceptions caused by user input errors. The Java <strong>try/catch</strong> mechanism is a very good way of doing this. Unlike some forms of exception handling, it does not make code difficult to read by intermixing error handling code with the main functional code. The main functional code is enclosed in a <strong>try</strong> block; the statements may <strong>throw</strong> an exception object which will be caught by a <strong>catch</strong> block that contains the code to handle the error. Specific types of errors can be handled by specific catch blocks in a manner similar to that shown in the program listed above. </p> 
   <p>The actual types of exception are described in the class definitions. In this simple program, there are two likely exceptions. These are <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/IOException.html"><tt>IOException</tt></a> and <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/lang/NumberFormatException.html"> <tt>NumberFormatException</tt></a>. The types of condition that cause these exceptions are obvious from the names. An exception is actually an object that may have properties and methods, some of which may provide further information about the exception. The commonest exception method is <tt>getMessage()</tt> that returns a string that might be informative. In the case of the <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/lang/NumberFormatException.html"> <tt>NumberFormatException</tt></a> this is simply the string that caused the problem. </p> 
   <p>Here are some specimen dialogues showing input errors and the resulting exceptions. </p> 
   <p>The first example shows the effect of a non-numeric input </p> 
   <p class="output"> C:\&gt;java Addup Enter first number 23 Enter second number two For input string: "two" is not numeric C:\&gt; </p> 
   <p>The second example is rather more surprising </p> 
   <p class="output"> C:\&gt;java Addup Enter first number -44 Enter second number +66 For input string: "+66" is not numeric C:\&gt; </p> 
   <p>This is less than ideal behaviour by the <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/lang/Integer.html#parseInt(java.lang.String)"> <tt>parseInt()</tt></a> method.</p> 
   <p>The <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/lang/System.html#exit(int)"><tt>exit()</tt></a> method of the <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/lang/System.html"><tt>System</tt></a> class returns from the Java program to the host operating system. The parameter is available to the host operating system as a <strong>return code</strong>. A common convention is to use the value 0 to indicate that the program has worked properly and any non-zero value to indicate that some sort of error has occurred.</p> 
   <h2>Alternative forms of the program</h2> 
   <p>It is not necessary to make separate declarations of all the objects and variables. In many cases the value returned by one method can used as a parameter of another method simply by nesting the calls. Using this approach, the code for the current example could be rewritten as shown below. </p> 
   <p class="code"> import java.io.*; public class Addup { static public void main(String args[]) { <em>BufferedReader console = new BufferedReader( new InputStreamReader(System.in));</em> int num1 = 0, num2 = 0; try { System.out.print("Enter first number "); <em>num1=Integer.parseInt(console.readLine());</em> System.out.print("Enter second number "); <em>num2=Integer.parseInt(console.readLine());</em> } catch(IOException e) { System.out.println("Input error"); System.exit(1); } catch(NumberFormatException e) { System.out.println(e.getMessage() + " is not numeric"); System.exit(1); } System.out.println(num1 + " + " + num2 + " = " + (num1+num2)); } } </p> 
   <p>It is worthwhile to compare this with the earlier code listing. </p> 
   <h2 id="cla">Getting values from the command line</h2> 
   <p>Users who are familiar with the use of a command line interface and also with scripting find programs that interactively prompt the user for values to be rather tedious. It would be nice if you could type something like this: </p> 
   <p class="output">Addup 22 44</p> 
   <p>And if you could do that, it would be quite nice to be able to do things such as</p> 
   <p class="output">Addup 34 567 21 11</p> 
   <p>It is possible to provide input to Java programs this way. The strings that appear on the command line are available within the program via the <tt>args[]</tt> parameter of the function <tt>main()</tt> which must appear in every executable program. (This name is yet another carry over from the C programming language). It is the responsibility of the host operating system to grab the characters from the command line and make them available to the program. </p> 
   <p><tt>args</tt> is an <strong>array</strong> of strings. Each member has to be separately converted to an internal integer. Here's the code: </p> 
   <p class="code"> public class CmdAdd { static public void main(String args[]) { int total = 0; try { for(int i=0; i&lt;args.length; i++) total += Integer.parseInt(args[i]); } catch(NumberFormatException e) { System.out.println(e.getMessage() + " is not numeric"); System.exit(1); } System.out.println("Sum = " + total); } } </p> 
   <p>And here's a typical dialogue: </p> 
   <p class="output"> C:\&gt;java CmdAdd 12 34 56 78 Sum = 180 C:\&gt; </p> 
   <p>The basic program design is to "loop through" or "walk" the array of strings, converting each one to an internal integer and accumulating the result. To do this using any standard looping mechanism you need to know how many strings there are to process. This is equivalent to knowing the size (or number of elements) of the array <tt>args</tt>. Java arrays have a standard <strong>property</strong> that gives this value, it is called <tt>length</tt>. A professional programmer would first check that the size of the array was non-zero. </p> 
   <p>Notice that in this example the programmer has not specifically created the array <tt>args</tt>. This is done by the Java interpreter and is a special case associated with the function <tt>main()</tt>. </p> 
   <p>The <tt>for</tt> statement is one of four loop statements available in Java. The syntax and flow of control is illustrated below. </p> 
   <p class="code">for( initialisation_exp; loop_condition; increment_exp ) { // statements }</p> 
   <img src="images/forflow.gif" alt="for statement flow chart" width="246" height="414"> 
   <p>The parentheses folllowing <strong>for</strong> contain three expressions separated by semicolons with the following meaning:</p> 
   <ol> 
    <li> <p>The <strong>initialisation expression</strong> is evaluated just once at the start of the loop. Usually this will declare a loop variable and assign its initial value. </p> </li> 
    <li> <p>The <strong>loop condition</strong> is a boolean expression which is evaluated each time through the loop. If it is <tt>false</tt> the statements in the body of the for loop are executed once more. If it is <tt>true</tt>, the loop terminates.</p> </li> 
    <li>After the statements in the body of the loop have been executed, the <strong>increment expression</strong> is executed. This is usally an assignment statement which will change the value of the loop variable. In this way, the loop variable is used to count the number of iterations through the loop. </li> 
    <li> <p>The flow of program execution returns to the second step above. </p> </li> 
   </ol> 
   <p>The program uses the assignment operator (<tt>+=</tt>) to accumulate the total value. The assignment operator is just a shorthand way of writing: </p> 
   <p class="code">total = total + Integer.parseInt(args[i]);</p> 
   <h2 id="file">Reading values from a file </h2> 
   <p>If a program that sums numbers read from the command line is useful, one that sums numbers read from a text file would be equally desirable. Here's a program that takes a file name from the command line, opens the file and sums the numbers read. An assumption is made that the file format is one number per line. </p> 
   <p>Here's the code: </p> 
   <p class="code"> import java.io.*; public class FileAdd { static public void main(String args[]) { int total = 0; try { FileReader file = new FileReader(args[0]); BufferedReader in = new BufferedReader(file); String line; while((line = in.readLine()) != null) { total += Integer.parseInt(line); } in.close(); } catch(NumberFormatException e) { System.out.println(e.getMessage() + " is not numeric"); System.exit(1); } catch(FileNotFoundException e) { System.out.println("Couldn't open " + e.getMessage()); System.exit(1); } catch(IOException e) { System.out.println("IO error"); System.exit(1); } System.out.println("sum = " + total); } } </p> 
   <p>To demonstrate the program, you will need to create a textfile. Do this with a text editor, type the lines of data shown below, and save the file as data.txt.</p> 
   <p class="code">23 44 11 22 </p> 
   <p>Here's a listing of the file followed by a run of the program. </p> 
   <p class="output"> C:\&gt;type data.txt 23 44 11 22 C:\&gt;java FileAdd data.txt sum = 100 C:\&gt; </p> 
   <p>Much of the code for this program should be familiar from the previous examples. There are two statements which create and open the file. These are: </p> 
   <p class="code"> FileReader file = new FileReader(args[0]); BufferedReader in = new BufferedReader(file); </p> 
   <p>The object <tt>file</tt> is an instance of the <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/FileReader.html"><tt>FileReader</tt></a> class. (Reader classes are used specfically for reading text files). The <tt>file</tt> object is used to create an instance of the <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/BufferedReader.html"><tt>BufferedReader</tt> </a>class. This improves efficiency by buffering the file reading process. The <tt>in</tt> variable is a reference to the BufferedReader object created. </p> 
   <div class="tip"> 
    <p>On most operating systems a text file consists of lines. A line is a sequence of characters terminated by an end-of-line character. The <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/BufferedReader.html"><tt>BufferedReader </tt></a>class's <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/BufferedReader.html#readLine()"><tt>readLine() </tt></a> method will read characters from the file until the end-of-line character is read. </p> 
    <p>In designing a program of this nature, it is important to consider how it stops. Clearly it should stop when there is no more data available. The <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/BufferedReader.html#readLine()"><tt>readLine() </tt></a> method returns the special value <strong>null</strong> when it has attempted to read beyond the end of file. This actually means that it has not returned a string since it has not found a line to read. </p> 
    <p>If you are reading from a file, it is obvious that the operating system will know how big the file is and generate suitable indication when the end of the file is reached. It is not so obvious what happens if you are reading from the keyboard or a communications channel. In the case of the keyboard, on many operating systems there is a special key (or key combination) that is detected by the operating system. This is typically Ctrl-D on Unix systems, or Ctrl-Z on Windows. For a communications channel, failure or remote closure is detected by the operating system and reported to applications in the same way as end of file. </p> 
   </div> 
   <p>This program uses a <tt>while</tt> loop rather than a <tt>for</tt> loop. This is basically because the program cannot determine in advance how many lines are going to be read in so it simply repeats the operation while some condition is true. </p> 
   <p>In this example the loop continuation condition is </p> 
   <p class="code">(line = in.readLine()) != null</p> 
   <p>This is, of course, a boolean expression but the left hand operand of the <tt>!=</tt> operator repays more careful examination. In case you're confused by the parentheses etc., this left hand operand is </p> 
   <p class="code">(line = in.readLine()) </p>
   <p>This is an assignment expression. A piece of syntax of the form <tt>a = b</tt> is an expression and has a value in just the same way as <tt>a + b</tt> has a value. The value of the assignment expression is the value of the left hand operand. Strictly you could say that the evaluation of an assignment expression, as a side-effect, results in the storage of a value. Of course you could write this piece of code without taking advantage of the assignment operator. It would look something like this: </p> 
   <p class="code"> boolean eof = false; do { line = in.readLine(); if(line == null) eof = true; else total += Integer.parseInt(line); } while(!eof); </p> 
   <p>This is noticeably more clumsy and the use of assignment expressions in the manner shown in the example is to be encouraged. </p> 
   <p>You may have noticed the apparent extra set of parentheses around the assignment expression. These are necessary since the assignment operator (<tt>=</tt>) has a lower precedence then the conditional operator <tt>!=</tt>. If they were omitted the code would first compare <tt>in.readLine()</tt> with <tt>null</tt> and then attempt to assign the result of the comparison to <tt>line</tt>. (Actually the code wouldn't compile - can you see why?) </p> 
   <p>The try/catch blocks should, by now, be familiar and you won't be surprised to know that, if the file doesn't exist, a <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/FileNotFoundException.html"> <tt>FileNotFoundException</tt></a> is thrown. This can be caught by the following catch block: </p> 
   <p class="code"> catch(FileNotFoundException e) { System.out.println("Couldn't open " + e.getMessage()); System.exit(1); } </p> 
   <p>If some other file error occurs, an <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/io/IOException.html"><tt>IOException </tt></a> is thrown. </p> 
   <p>Here's some examples. First an attempt to read from a non-existent file: </p> 
   <p class="output"> C:\&gt;java FileAdd xyz Couldn't open xyz (The system cannot find the file specified) </p> 
   <p>And now an example in which the file does exist but is not accessible due to incorrect access rights: </p> 
   <p class="output"> C:\&gt;java FileAdd data.txt Couldn't open data.txt (Permission denied) </p> 
   <p>Finally, here is a version of the program that will work past errors in the input file. Errors are, of course, reported but rather than give up at that stage, the program carries on summing any valid data values. Two significant changes have been made to the program. The first is the try/catch associated with numeric format errors is now within the processing loop since any caught error associated with a try/catch results in program flow going to the statement after the try/catch. The second change is slightly more subtle, the error messages are now written using <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/lang/System.html#err"> <tt>System.err.println()</tt> </a>rather than <a href="http://www.scit.wlv.ac.uk/appdocs/java/api/java/lang/System.html#out"> <tt>System.out.println()</tt> </a>. This enables the host operating system to capture the errors in a different place to the result of the summing operations. </p> 
   <p>Here's the code:</p> 
   <p class="code"> import java.io.*; public class FileAdd2 { static public void main(String args[]) { int total = 0; try { <em>BufferedReader in = new BufferedReader(new FileReader(args[0]));</em> String line; while((line = in.readLine()) != null) { <em>try { total += Integer.parseInt(line); } catch(NumberFormatException nfex) { System.err.println(nfex.getMessage() + " is not numeric"); }</em> } in.close(); } catch(FileNotFoundException e) { System.err.println("Couldnt open " + e.getMessage()); System.exit(1); } catch(IOException e) { System.err.println("IO error"); System.exit(1); } System.out.println("Sum = " + total); } } </p> 
   <p>To demonstrate the modified program the data file was modified by including a line that contained the text "three". Here's a listing of the modified data file followed by a run of the program. </p> 
   <p class="output"> C:\&gt;java FileAdd2 data.txt For input string: "three" is not numeric Sum = 100 </p> 
   <p>Note that another change made in this version of the program is that the statement to create a FileReader object is nested inside the statement to create the BufferedReader object. In this case, the <tt>file</tt> variable is not required. </p> 
   <div class="tip"> 
    <p>Each Java program is launched with three "pre-opened" I/O channels that are normally associated with the console. These are: </p> 
    <table> 
     <tbody> 
      <tr> 
       <td>0 </td> 
       <td>standard output channel </td> 
       <td>to console display (screen) </td> 
      </tr> 
      <tr> 
       <td>1 </td> 
       <td>standard input channel </td> 
       <td>from console keyboard </td> 
      </tr> 
      <tr> 
       <td>2 </td> 
       <td>error output channel </td> 
       <td>to console display (screen) </td> 
      </tr> 
     </tbody> 
    </table> 
    <p>These three channels are encapsulated in the Java objects System.in, System.out and System.err. </p> 
   </div> 
   <p>&nbsp;</p> 
   <div id="footer"> 
    <p>This page is part of a <a href="http://www.scit.wlv.ac.uk/~jphb/java/index.html"> set of notes about the Java programming language</a> prepared by <a href="http://www.scit.wlv.ac.uk/~jphb/">Peter Burden</a> for the module CP4044.</p> 
    <p>A <a href="http://www.wlv.ac.uk/disclaimer/personal.html">disclaimer</a> applies to this page.</p> 
   </div> 
  </div>   
 </body>
</html>