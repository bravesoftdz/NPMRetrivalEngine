<html>
 <head>
  <title>Sample:
The Java Programming Language
</title> 
  <style type="text/css">
BODY{font-family:serif;}
H1,H2,H3,H4{font-family:sans-serif;}
CODE,PRE,TT{font-family:monospace;}
HR{color: black;}
A{ font-weight: bolder; }
.InlineFormula{
	font-style: italic;
}
.Formula{
	padding-left:10px;
	font-style: italic;
}
.Let{
	border-style: solid;
	padding:10px;
	border-width:thin;
}
.Net{
	border-style: solid;
	padding:10px;
	border-width:thin;
	border-color:red;
}
.Case{
	border-style: solid;
	padding:10px;
	border-width:thin;
	border-color:blue;
}
</style> 
 </head> 
 <body bgcolor="#E0FFE0" text="#000000" link="#0000FF" alink="#FF0000" vlink="#8000AF"> 
  <!-- Generated from MATHS source code by RJBotting\'s mth2html script--> 
  <form method="get" action="http://www.csci.csusb.edu/dick/samples/lookup.php">
    [
   <a href="#Main Content">Skip Navigation</a>] [
   <a href="http://www.csusb.edu/">CSUSB</a>] / [
   <a href="http://nsci.csusb.edu/">CNS</a>] / [
   <a href="http://cse.csusb.edu/">CSE</a>] / [
   <a href="http://cse.csusb.edu/dick/">R J Botting</a>] / [
   <a href="http://www.csci.csusb.edu/dick/samples/index.html">Samples</a>] / 
   <a name="top_of_page"> java </a> 
   <br> [
   <a href="http://www.csci.csusb.edu/dick/samples/">Index</a>] [
   <a href="#Contents">Contents</a>] [
   <a href="java.txt">Source Text</a>] [
   <a href="http://www.csci.csusb.edu/dick/samples/about.html">About</a>] [
   <a href="http://www.csci.csusb.edu/dick/maths/intro_characters.html">Notation</a>] [
   <a href="http://www.csci.csusb.edu/dick/maths/intro_copyright.html">Copyright</a>] [
   <a href="http://www.csci.csusb.edu/dick/samples/comment.html" target="SendEMail">Comment/Contact</a>] [Search 
   <input name="search" size="10" value=""> 
   <input type="hidden" name="from" value="java.mth"> 
   <input type="submit" value="Go">] 
   <br> Thu Aug 25 21:04:36 PDT 2011 
  </form> 
  <hr> 
  <h6><br>Opening Microsoft files (winzip, word, excel, powerpoint) on this page may require you to <a href="http://acm.csusb.edu/Services/webaccessibility/compliance/readers_and_viewers.htm">download a special viewer</a>. Or you can download and save the files and use your preferred office applications to view and edit them.</h6> 
  <h3><a name="Contents">Contents</a></h3> 
  <ul class="Contents"> 
   <li><a href="java.html#The Java Programming Language">The Java Programming Language</a> </li>
   <li><a href="java.html#Overview">: Overview</a> </li>
   <li><a href="java.html#Glossary">: Glossary</a> </li>
   <li><a href="java.html#Syntax">: Syntax</a> </li>
   <li><a href="java.html#Predefined Classes">: Predefined Classes</a> </li>
   <li><a href="java.html#Javascript is Not Java">: Javascript is Not Java</a> </li>
   <li><a href="java.html#Specification of Java">: Specification of Java</a> </li>
   <li><a href="java.html#See Also">: See Also</a> </li>
   <li><a href="java.html#Trivia">: Trivia</a> </li>
   <li><a href="java.html#The Naming of Java">: The Naming of Java</a> </li>
  </ul>
  <a name="Main Content">
   <hr></a>
  <ol> 
   <h1><a name="The Java Programming Language">The Java Programming Language</a></h1>
   <ol class="Section"> 
    <pre> http://www.csci.csusb.edu/dick/samples/java.html</pre> 
    <p> This page is designed to be a step by step introduction to Java for a competent C++ programmer. Getting your first Java programs to run is unusually hard because <br>Net</p>
    <div class="Net">
     <ol> 
      <li>Names of files have to precisely match the identifiers used inside the files. </li>
      <li>Names of classes in Applets must match the names of classes in Java. </li>
      <li>It is hard to keep all these names in synchronization as the code develops. </li>
      <li>Some books do not follow the newer scoping rules. </li>
     </ol>
     <br>(End of Net)
    </div>
    <br> Beginners can work through the [
    <a href="java.html#Overview"> Overview </a>] section below to make this process less painful. 
    <p> This page also has many links to more in depth information about Java. </p>
    <p> </p>
    <h2><a name="Overview">Overview</a></h2>
    <ol class="Section"> 
     <a href="#Java">Java</a> is designed to be a completely object-oriented programming language used in consumer appliances like VCRs and toasters. It is based on the first version of C++ but explicitly leaves out features of C and C++ that are confusing or unreliable. 
     <p> It has inheritance and dynamic polymorphism but not generics and/or templates. It is designed with concurrent programming in mind. It has most of the expressions and control structures of C plus <a href="#exceptions">exceptions</a> but without the "go to". So a C++ programer finds Java programs easy to read but verbose. It is slightly more work to write, but the result is nearly always clearer than the abbreviated C++ code. </p>
     <p> Java is compiled into a special machine code that is then interpreted. Java code does not perform as fast as C++. The interpreter however protects the machine on which it is running from errors that can break operating systems in C++. Furhter the same (compiled) code can run on many different systems: Compile-Once-Run-Anywhere. So a Java program can be transmitted across a network to a machine of a different type, with a different operating system, and different graphic user interface. There it will run safely and securely (in theory) and look-and-feel as if it was programmed for that system. Doing this with C++ is extremely expensive. </p>
     <p> <a href="#Java">Java</a> can be used to write <span class="InlineFormula">applications</span> and <span class="InlineFormula">applets</span>. A <a href="#Java">Java</a> <a href="#application">application</a> is similar to any other high-level language program: It can only be compiled and then run on the same machine. An <a href="#applet">applet</a> is compiled on one machine, stored on a server in binary, and can be sent to a another machine over the Internet to be interpretted by a Java-aware browser. </p>
     <p> Java comes with a large library of ready made classes and objects. The key difference betwen Java 1.0 and 1.1 was in this library. - the <a href="#AWT">AWT</a>. Similarly, Java 2.0 has a very much larger library for handling user interfaces (Swing by name) but only small changes to the core of the language. </p>
     <h3><a name="Applications">Applications</a></h3>
     <ol class="Section">
       An application is compiled (using 
      <a href="#javac">javac</a>) and run like any other program but it is actually a Java 
      <a href="#class">class</a> that contains a special method called 'main'. When the interpreter (
      <a href="#java">java</a>) is called with the name of the 
      <a href="#class">class</a>, it looks for the 
      <span class="InlineFormula">public static main(String[])</span> 
      <a href="#function">function</a> in the 
      <a href="#class">class</a> and calls it. 
      <h4><a name="Example Application">Example Application</a></h4> The following is based on the old traditional C program that prints "Hello, World" on the computer screen: 
      <br>(
      <a name="Hello">Hello</a>): 
      <hr>
      <ol class="Box"> 
       <pre> 	import java.lang.*;</pre> 
       <pre> 	public class Hello {</pre> 
       <pre> 	    public static void main(String argv[]){</pre> 
       <pre> 	        System.out.println("Hello, World!");</pre> 
       <pre> 	    }</pre> 
       <pre> 	}</pre> 
      </ol>
      <hr> The above is best put in a file called 
      <span class="InlineFormula">Hello.java</span> [
      <a href="../cs320/java/Hello.java"> ../cs320/java/Hello.java </a>] and then compiled with 'javac Hello.java' and then run: 'java Hello'. 
      <p> The <span class="InlineFormula">import</span> statement in a Java file allow it to refer to other classes in other files and directories. The compiler uses these other classes's definitions to check your code, and the interpreter loads the binary bytecode into the running program. </p>
      <p> The word <a href="#public">public</a> means that the thing following it can be accessed by anyone. A public class can be imported over the internet into any other class and so can be sent to a browser. A public function can be called by statements and expressions in different classes. </p>
      <p> <a href="#static">static</a> indicates that a function or object belongs to the <a href="#class">class</a> rather than to each individual <a href="#object">object</a> in the <a href="#class">class</a>. The function is called like this 'Hello.main(...)' even when there are no objects constructed in class Hello. </p>
      <p> Notice that Java code was designed to be interpreted by a machine independent <span class="InlineFormula">virtual</span> machine (<a href="#JVM">JVM</a>) that runs a special machine code called <a href="#bytecode">bytecode</a>. </p>
     </ol>
     <p>. . . . . . . . . ( end of section <a href="java.html#Applications">Applications</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
     <h3><a name="Tools">Tools</a></h3> The 
     <a href="#Hello">Hello</a> application would be compiled like this: 
     <pre> 		 javac Hello.java</pre> and run by the java interpreter like this: 
     <pre> 		 java Hello</pre> Notice that the 
     <span class="InlineFormula">file</span> "Hello.java" is compiled, but a 
     <span class="InlineFormula"><a href="#class">class</a></span> is interpreted. 
     <p> One nice feature of the Sun <a href="#JDK">JDK</a> is the documentation tool <a href="#javadoc">javadoc</a>. The above application <a href="#Hello">Hello</a> has the following documentation: [<a href="../cs320/java/Hello.html"> ../cs320/java/Hello.html </a>] which was generated by <a href="#javadoc">javadoc</a>. <a href="#javadoc">javadoc</a> scans source code files (*.java) and creates one HTML file per <a href="#class">class</a> in the files. Classes and parts of classes can have special documentary comments (starting "/**" ) added to them that are reformatted and incorporated into the Hypertext produced by <span class="InlineFormula">javadoc</span>. This should be a boon for realistic projects. The full syntax of the special comments can be found at [<a href="http://cse.csusb.edu/dick/samples/java.syntax.html#Doc_Comment"> Doc_Comment in java.syntax </a>] on this web site. </p>
     <p> The <span class="InlineFormula">javap</span> program disassembles bytecode (*.class files) and outputs a description of the what is in them. </p>
     <h3><a name="Applets">Applets</a></h3>
     <ol class="Section">
       An 
      <span class="InlineFormula">Applet</span> is a small program that can be sent across the Internet and interpreted on a client machine. To give permission for remote access it must be a 
      <a href="#public">public</a> 
      <a href="#class">class</a>. Typically it is a class that inherits and/or defines a special set of functions needed to run an 
      <a href="#applet">applet</a>. These are part of the 
      <a href="#class">class</a> 
      <a href="#Applet">Applet</a>. So all Java applets are 
      <a href="#public">public</a> classes that 
      <a href="#extend">extend</a> 
      <a href="#Applet">Applet</a>. 
      <p> You can not run a Java applet unless it is also an application or you have a WWW page that refers to it. </p>
      <p> The page needs HTML like the following to call the compiled code, in the same directory: </p>
      <pre>          &lt;APPLET CODE="ClassName.class" HEIGHT=h WIDTH=w&gt;</pre> 
      <pre>		Alternate text</pre> 
      <pre>		&lt;/APPLET&gt;</pre> where 
      <span class="InlineFormula">h</span> and 
      <span class="InlineFormula">w</span> are the HEIGHT and WIDTH of the box in which the applet outputs its response. The 
      <span class="InlineFormula">alternate text</span> appears when a browser can not handle APPLETs. For the general syntax see 
      <a href="#applet_in_html">applet_in_html</a>. The code in "ClassName.class" above, is the result of compiling a file called "ClassName.java" that contains a 
      <a href="#public">public</a> 
      <a href="#class">class</a> called 
      <span class="InlineFormula">ClassName</span> which 
      <a href="#extends">extends</a> an 
      <a href="#Applet">Applet</a>. (For details on HTML see [
      <a href="http://cse.csusb.edu/dick/doc/www.html"> www.html </a>] written in the HyperText Markup Language(HTML) [
      <a href="http://cse.csusb.edu/dick/samples/comp.html.syntax.html"> comp.html.syntax.html</a>] . ) 
      <p> </p>
      <h4><a name="Example">Example</a></h4> Here is a suitable piece of HTML to test a simple 
      <a href="#HelloWorld">HelloWorld</a> class: 
      <pre> 		&lt;head&gt;&lt;title&gt;Test&lt;/title&gt;&lt;/head&gt;&lt;body&gt;</pre> 
      <pre>          &lt;APPLET CODE="HelloWorld.class" HEIGHT=150 WIDTH=150&gt;</pre> 
      <pre> 		You can not see this brilliant Java Applet.</pre> 
      <pre>		&lt;/APPLET&gt;</pre> 
      <pre> 		&lt;/body&gt;</pre> Put this in a file called: 
      <pre> 		test.HelloWorld.html</pre> 
      <p> The code for the <a href="#HelloWorld">HelloWorld</a> applet has to be a <a href="#public">public</a> <a href="#class">class</a> called "HelloWorld" that extends <a href="#Applet">Applet</a> and is in in a Java file called: </p>
      <pre> 		HelloWorld.java</pre> Here is the Java code: 
      <br>(
      <a name="HelloWorld">HelloWorld</a>): 
      <hr>
      <ol class="Box"> 
       <pre> 	import java.applet.*;</pre> 
       <pre> 	import java.awt.*;</pre> 
       <pre>	public class HelloWorld extends Applet {</pre> 
       <pre>	      public void init() {</pre> 
       <pre>	          resize(150,25);</pre> 
       <pre>	      }//init</pre> 
       <pre>	      public void paint(Graphics g) {</pre> 
       <pre>	          g.setFont(new Font("Helvetica", Font.PLAIN, 8));</pre> 
       <pre>	          g.drawString("Hello world!", 50, 25);</pre> 
       <pre>	      }//paint</pre> 
       <pre>	  }//HelloWorld</pre> 
      </ol>
      <hr> 
      <p> The Applet is compiled just like any other program: </p>
      <pre> 		 javac HelloWorld.java</pre> This will generate a set of files with extension/suffix ".class". Notice that the compiler forces you to name the file "HelloWorld.java", the Class "HelloWorld", and generates the binary 
      <a href="#bytecode">bytecode</a> in a file called "HelloWorld.class". Sun has written a special program to test applets in page: 
      <pre>          appletviewer test.HelloWorld.html</pre> However you can not use 'java' to run the 
      <a href="#HelloWorld">HelloWorld</a> 
      <a href="#class">class</a> - it has no 'main'. Neither can 'java' "run" the WWW pages like the 
      <span class="InlineFormula">test.HelloWorld.html</span> file. 
      <p> On the Suns in the Sun lab you can tell 'Netscape' to "Open local File..." and select </p>
      <pre> 		test.HelloWorld.html</pre> but using the older Netscape to debug an applet has some 
      <a href="#problems">problems</a> indicated later. 
      <p> </p>
      <h4><a name="Public Classes and Pages">Public Classes and Pages</a></h4> The moment a .class file or a package becomes public on the web, other Java classes, anywhere on the web, can "import" your public classes and use them to construct more classes! 
      <p> Normally you should put applet code (compiled and source) in the same directory as the public page that refers to them. This is simple and works. </p>
      <p> There are more complicated ways of organizing the files. It is said that if the page is in directory with path name <span class="InlineFormula">D</span> on the server and your operating system uses <span class="InlineFormula">S</span> to separate directories in path names </p>
      <pre>	( S.DOS=`\`, S.UNIX=`/`, S.Mac=`:`)</pre> then the applet code for 
      <a href="#class">class</a> 
      <span class="InlineFormula">C</span> must be in directory 
      <span class="InlineFormula">D</span>
      <span class="InlineFormula">S</span>classes and have a name 
      <span class="InlineFormula">C</span>.class. However Netscape 2.01 for Suns looks in directory 
      <span class="InlineFormula">D</span>, unless you add the attribute 
      <span class="InlineFormula">CODEBASE=classes</span> to the Applet tag. 
      <p> There is also an interaction between <span class="InlineFormula">packages</span> and subdirectories that goes beyong the basic knowledge covered here. </p>
      <p> </p>
      <h4><a name="Debugging Problems with Browsers">Debugging Problems with Browsers</a></h4> 
      <br>(
      <a name="problems">problems</a>): 
      <ul class="Set"> 
       <li>You may have to change the options/properties of your browser to be able to run Java. This is a security issue. </li>
       <li>Your browser must trust the compiler you use. If it doesnot recognize the compiler version (hidden in the compiled file) it may reject the applet. <p> </p></li>
       <li>To be sure of a browser finding all the necessary <a href="#class">class</a> files they have to be in the same directory as the pages that refer to them. You can not keep the <a href="#bytecode">bytecode</a> .class file private and the page public. To put .class files in a subdirectory you may have to place them in a <a href="#package">package</a> with the same name as well. <p> </p></li>
       <li>If the Applet fails, use the Options menu to open the Java Console... and look for errors. <p> </p></li>
       <li>The Older Netscape running in background does not make a good development tool because it is hard to make the program reload the code of Applets. You can change the code, recompile it, publish all the files perfectly, <span class="InlineFormula">and</span> hit the reload button in Netscape and it will not reload the new <a href="#bytecode">bytecode</a>. I've wasted hours looking for bugs that I've fixed. Instead use Sun's <a href="#appletviewer">appletviewer</a> and/or debuggers. You can also include a main function in applets that make them applications. See [<a href="java.html#Applications Can Run Applets"> Applications Can Run Applets </a>] next. <p> </p></li>
       <li>If it is absolutely necessary to debug the applet inside an html page then (1) use the Sun Appletviewer, (2) find a machine with Netscape 4.0 and use Shift+Reload, or (3) execute Netscape directly on a local copy of the page and Exit from it before working on the applet code. In vi you can use something like this: <pre> 		:!java %</pre> <pre> 		:!netscape test.page.name.html</pre> to suspend the editor and run Netscape on the test page. Exit Netacape and tap Return/Enter to continue editting. On Orion, if you use <span class="InlineFormula">Q</span> to compile a program <span class="InlineFormula">Stuff</span>.java and you have a readable file called test.<span class="InlineFormula">Stuff</span>.java then it will automagically execute netscape for you. This is in Beta -- EMail <span class="InlineFormula">dick</span> if you don't like it. </li>
      </ul> 
      <h4><a name="Applications Can Run Applets">Applications Can Run Applets</a></h4> The 'java' interpreter can run classes that have an appropriate 'main' 
      <a href="#function">function</a>: 
      <pre>	java classname</pre> This special 
      <a href="#method">method</a> or 
      <a href="#function">function</a> is called 
      <span class="InlineFormula">main</span>. To run an applet it must create a window and run the applet in it. The steps are: 
      <hr>
      <ol class="Box"> 
       <li>Create a new window to display the applet. </li>
       <li>Create a new object of the correct <a href="#class">class</a>. </li>
       <li>Tell the applet to initialize itself. </li>
       <li>Tell the applet to start running. </li>
       <li>Add the running applet into the window. </li>
       <li>Resize the window. </li>
       <li>Show the window to you. </li>
      </ol>
      <hr> Please use the following sample as a model for your own testing: 
      <br>(
      <a name="applet_test_harness">applet_test_harness</a>): 
      <pre> 	   private final static int SIZE = 300;//size of window</pre> 
      <pre></pre> 
      <pre>     public static void main(String args[]) {</pre> 
      <pre></pre> 
      <pre> 		HelloWorld aHelloWorldObject = new HelloWorld();</pre> 
      <pre> 			//The aHelloWorld object exists</pre> 
      <pre></pre> 
      <pre> 		   aHelloWorldObject.init();</pre> 
      <pre> 			//aHelloWorld has now initialized it self</pre> 
      <pre> 		   aHelloWorldObject.start();</pre> 
      <pre> 			//aHelloWorld has now started running</pre> 
      <pre></pre> 
      <pre> 		Frame aWindow = new Frame("HelloWorld");</pre> 
      <pre> 			//A window called "HelloWorld" will hold the Applet</pre> 
      <pre></pre> 
      <pre> 		   aWindow.add("Center", aHelloWorldObject);</pre> 
      <pre> 			//aWindow now has aHelloWorld in it's center</pre> 
      <pre> 		   aWindow.resize(SIZE, SIZE);</pre> 
      <pre> 		   aWindow.show();</pre> 
      <pre> 			//aWindow is now shown to you (until you CTRL/C)</pre> 
      <pre></pre> 
      <pre>     }//main</pre> You can download an uptodate working copy of the HelloWorld 
      <a href="#class">class</a> which is both an applications and and applet from [
      <a href="../cs320/java/HelloWorld.java"> ../cs320/java/HelloWorld.java </a>] Keep a copy of this and use it generate your own test programs for applets.... before you put them on the Web! 
      <p> I have just developed a new tool that will generate an HTML test page for a new <a href="#applet">applet</a> and also a suitable *.java file ready for the details to be filled in It is in [<a href="../cs320/java/instantapplet"> ../cs320/java/instantapplet </a>] Please download and try out -- Beta Testing. </p>
      <p> </p>
      <h4><a name="Another Example">Another Example</a></h4> There is a more elaborate example of a Java applet/application program in [
      <a href="../cs320/java/test.Goodbye.html"> ../cs320/java/test.Goodbye.html </a>] complete with links to the source code, documentation, and byte code. It also shows how to control fonts and colors of text. 
      <h4><a name="Caveat">Caveat</a></h4> Here is a warning: The above main programs do not create a complete environment created by a browser looking at an HTML page. The Applet can not access the parameters that can be encoded in the page. Neither can they find out about the width and height encoded in the &lt;Applet&gt; tag. 
     </ol>
     <p>. . . . . . . . . ( end of section <a href="java.html#Applets">Applets</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
     <h3><a name="Summary">Summary</a></h3> 
     <br>
     <strong>Table</strong>
     <table border="1">
      <tbody>
       <tr>
        <th scope="col">To get</th>
        <th scope="col">write this </th>
       </tr>
       <tr>
        <td>Application:</td>
        <td>public class <span class="InlineFormula">C</span> ... { ... public static void main(String[])...} </td>
       </tr>
       <tr>
        <td>Applet:</td>
        <td>import java.applet.*; .... public class <span class="InlineFormula">C</span> extends Applet ... { ... } </td>
       </tr>
      </tbody>
     </table>
     <br>(Close Table)
     <br> 
     <p> <br><strong>Table</strong></p>
     <table border="1">
      <tbody>
       <tr>
        <th scope="col"> </th>
       </tr>
       <tr>
        <td>A class with name</td>
        <td><span class="InlineFormula">C</span> </td>
       </tr>
       <tr>
        <td>is best put in a file</td>
        <td><span class="InlineFormula">C</span>.java </td>
       </tr>
       <tr>
        <td>and compiled by</td>
        <td>javac <span class="InlineFormula">C</span>.java </td>
       </tr>
       <tr>
        <td>producing Bytecode</td>
        <td><span class="InlineFormula">C</span>.class </td>
       </tr>
       <tr>
        <td>executed by</td>
        <td>java <span class="InlineFormula">C</span> <span class="InlineFormula">arguments</span> </td>
       </tr>
       <tr>
        <td>and documented by</td>
        <td>javadoc <span class="InlineFormula">C</span>.java </td>
       </tr>
       <tr>
        <td>producing</td>
        <td><span class="InlineFormula">C</span>.html </td>
       </tr>
      </tbody>
     </table>
     <br>(Close Table)
     <br> 
    </ol>
    <p>. . . . . . . . . ( end of section <a href="java.html#Overview">Overview</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
    <h2><a name="Glossary">Glossary</a></h2>
    <ol class="Section">
      Also see [
     <a href="http://cse.csusb.edu/dick/samples/java.glossary.html"> java.glossary.html </a>] 
     <p> </p>
     <li><a name="abstract">abstract</a>::<a href="#methods">methods</a>=<span class="InlineFormula">A method that must exist for objects in a <a href="#class">class</a> but is fully defined only in subclasses</span>, -- an abstract method can not be private, final, native, or synchronized. </li>
     <li><a name="abstract">abstract</a>::<a href="#classes">classes</a>=<span class="InlineFormula">A <a href="#class">class</a> with one or more abstract methods</span>. <p> </p></li>
     <li><a name="Applet">Applet</a>::<a href="#AWT">AWT</a>=<span class="InlineFormula">Class of objects that are embedded in an <a href="#HTML">HTML</a> page and initialized and run by a browser over the <a href="#WWW">WWW</a></span> </li>
     <li><a name="applet">applet</a>::=<span class="InlineFormula">A small program that can be sent across a network and interpreted safely on the receiving machine</span>. <p> </p></li>
     <li><a name="application">application</a>::Java=<span class="InlineFormula">A <a href="#class">class</a> that defines a public static <a href="#void">void</a> main(String args[]) method</span> <p> </p></li>
     <li><a name="AWT">AWT</a>::=awt. </li>
     <li><a name="awt">awt</a>::=<span class="InlineFormula">Abstract windowing toolkit, another windowing toolkit. A set of machine independent classes that make it easier to create graphic user interfaces and output</span>. <p> </p></li>
     <li><a name="bytecode">bytecode</a>::= [<a href="java.html#byte_code"> byte_code</a>] . </li>
     <li><a name="byte_code">byte_code</a>::=<span class="InlineFormula">a way of describing classes as a stream of byte oriented machine code for the Java Virtual Machine</span>. <p> </p></li>
     <li><a name="classes">classes</a>::=plural of <a href="#class">class</a>. </li>
     <li><a name="class">class</a>::=<span class="InlineFormula">A set of objects with similar behaviors and intelligence. A <a href="#class">class</a> defines a collection of knowledge and know how. Classes are defined by declaring variables and and functions.</span>. [<a href="http://cse.csusb.edu/dick/samples/objects.glossary.html#class"> class in objects.glossary </a>] <p> </p></li>
     <li><a name="constant">constant</a>::=<span class="InlineFormula">any <a href="#final">final</a> <a href="#field">field</a></span> -- a piece of data about an object or class that can not be varied once it is initialized. <p> </p></li>
     <li><a name="concurrency">concurrency</a>::=<span class="InlineFormula">faking multiple processors so that the programmer can pretend that many processes or threads are executing at one time and interacting together</span>. [<a href="http://cse.csusb.edu/dick/samples/java.syntax.html#Synchronized_statement"> Synchronized_statement in java.syntax </a>] </li>
     <li><a name="extends">extends</a>::=<span class="InlineFormula">indicates that a new <a href="#class">class</a> has all the properties of the class it extends</span>. In Java all classes ultimately extend the <a href="#class">class</a> Object. <p> </p></li>
     <li><a name="exception">exception</a>::=<span class="InlineFormula">a way of exitting gracefully from expressions and statements when something unusual occurs</span>, [<a href="http://cse.csusb.edu/dick/samples/java.syntax.html#Try_block"> Try_block in java.syntax </a>] [<a href="http://cse.csusb.edu/dick/samples/java.syntax.html#Throw_statement"> Throw_statement in java.syntax </a>] </li>
     <li><a name="exceptions">exceptions</a>::=<span class="InlineFormula">plural of <a href="#exception">exception</a></span>. </li>
     <li><a name="field">field</a>::java=<span class="InlineFormula">A <a href="#variable">variable</a> or <a href="#constant">constant</a> associated with a <a href="#class">class</a> or <a href="#object">object</a> - a piece of data or knowledge that that object knows about and controls</span>. <p> </p></li>
     <li><a name="file">file</a>::=<span class="InlineFormula">A collection of data. A Java source code file defines one or more classes, interfaces that is placed in a particular package</span>. <p> </p></li>
     <li><a name="final">final</a>::<a href="#modifier">modifier</a>=<span class="InlineFormula">a final <a href="#class">class</a> can not be extended, a final variable can not have its value changed, and a final <a href="#function">function</a> can not be overridden</span>. <p> </p></li>
     <li><a name="function">function</a>::computing=<span class="InlineFormula">A named piece of code that returns a value and may also do something</span> </li>
     <li><a name="function">function</a>::java=<span class="InlineFormula">A piece of know-how attached to a <a href="#class">class</a> or accessed via an object</span> <p> </p></li>
     <li><a name="ISO">ISO</a>::="International Standards Organization". <p> </p></li>
     <li><a name="implements">implements</a>::=<span class="InlineFormula">indicates that a <a href="#class">class</a> defines all the public functions listed in an <a href="#interface">interface</a></span>. <p> </p></li>
     <li><a name="interface">interface</a>::=<span class="InlineFormula">The way that something is accessed from outside. The parts of an object that are shared with the clients that use that object</span>. </li>
     <li><a name="interface">interface</a>::java=<span class="InlineFormula">A collection of <a href="#abstract">abstract</a> <a href="#public">public</a> <a href="#function">function</a> headers that can be implemented in different ways by different classes, and extended to give more interfaces.</span>. </li>
     <li><a name="interface">interface</a>::=<span class="InlineFormula">Describes a set of classes in terms of what they can do for you, but allows each <a href="#class">class</a> to implement these methods in any way that you wish</span>. <p> </p><p> </p></li>
     <li><a name="Java">Java</a>::=A language developed by Sun for developing software that is distributed over the Internet to special purpose hardware like a thermostat or (latterly) to browsers via the <a href="#WWW">WWW</a>. <p> </p></li>
     <li><a name="JDK">JDK</a>::=<span class="InlineFormula">Java Development Kit( compiler=&gt; javac, interpreter=&gt; java, classes=&gt; <a href="#AWT">AWT</a></span>. <p> </p></li>
     <li><a name="JVM">JVM</a>::=<span class="InlineFormula">Java Virtual Machine</span>, the <a href="#virtual_machine">virtual_machine</a> provides the operational semantics of <a href="#Java">Java</a> and so defines the hardware+software environment needed to run Java <a href="#bytecode">bytecode</a>. <p> </p></li>
     <li><a name="methods">methods</a>::=plural of <a href="#method">method</a>. </li>
     <li><a name="method">method</a>::=<span class="InlineFormula">A piece of "know-how". A <a href="#procedure">procedure</a> or <a href="#function">function</a> that is associated with an object or a <a href="#class">class</a></span>. <p> </p></li>
     <li><a name="modifier">modifier</a>::=<a href="#public">public</a> | <a href="#static">static</a> | <a href="#final">final</a> | <a href="#private">private</a> | <a href="#protected">protected</a> | <a href="#abstract">abstract</a> | ..., a word placed in front of a declaration that changes its semantics. <p> </p></li>
     <li><a name="object">object</a>::=<span class="InlineFormula">An instance of a <a href="#class">class</a></span>, in <a href="#Java">Java</a> an object is always handled via a reference that is created by the 'new' operation and a constructor and can be assigned to <a href="#field">field</a> of that <a href="#class">class</a>. <p> </p></li>
     <li><a name="procedure">procedure</a>::ComputerScience=`A named piece of code that does something for a caller'. </li>
     <li><a name="procedure">procedure</a>::java=<span class="InlineFormula">a <a href="#void">void</a> <a href="#function">function</a></span>. <p> </p></li>
     <li><a name="public">public</a>::<a href="#modifier">modifier</a>=<span class="InlineFormula">indicates that a <a href="#class">class</a>, <a href="#field">field</a>, or <a href="#function">function</a> can be used by anything and anywhere on the internet</span>. <p> </p></li>
     <li><a name="private">private</a>::<a href="#modifier">modifier</a>=<span class="InlineFormula">indicates that a <a href="#class">class</a>, <a href="#field">field</a>, or <a href="#function">function</a> can only be used locally inside a <a href="#class">class</a></span>. <p> </p></li>
     <li><a name="protected">protected</a>::<a href="#modifier">modifier</a>=<span class="InlineFormula">A degree of hiding lie between <a href="#public">public</a> and <a href="#private">private</a>, subclasses and classes in the same <a href="#package">package</a> have access to these items</span>. -- unwise since any class can claim to be a member of the same package! (Thanks to Andrew for correcting this definition) <p> </p></li>
     <li><a name="private_protected">private_protected</a>::<a href="#modifier">modifier</a>="deprecated in 1.5". <p> </p></li>
     <li><a name="package">package</a>::=<span class="InlineFormula">a collection of classes, encode as files in a common directory, that has the same name as the package and are allowed special access privileges</span>. The default scope/access for a function or class is to its package. If no package is declared at the start of a file then the classes etc belong in the deafult global package. <p> </p></li>
     <li><a name="static">static</a>::=<span class="InlineFormula">something associated with a <a href="#class">class</a> rather than an <a href="#object">object</a></span>. <p> </p></li>
     <li><a name="variable">variable</a>::java=<span class="InlineFormula">A piece of knowledge associated with a <a href="#class">class</a> or an object. Any non-<a href="#final">final</a> <a href="#field">field</a></span>. <p> </p></li>
     <li><a name="virtual_machine">virtual_machine</a>::=<span class="InlineFormula">A hypothetical machine that can be emulated on many different actual machines</span>. <p> </p></li>
     <li><a name="void">void</a>::=<span class="InlineFormula">word used in place of a type to indicate that a <a href="#function">function</a> does not return a value</span>. -- introduced in ANSI C and still confusing people 10 years later. <p> </p></li>
     <li><a name="WWW">WWW</a>::="World Wide Web". <p> </p></li>
     <li><a name="URL">URL</a>::="Universal Resource Locator'. <p> Also see [<a href="http://cse.csusb.edu/dick/samples/java.glossary.html"> java.glossary.html </a>] </p></li>
    </ol>
    <p>. . . . . . . . . ( end of section <a href="java.html#Glossary">Glossary</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
    <h2><a name="Syntax">Syntax</a></h2>
    <ol class="Section"> 
     <h3><a name="Introduction">Introduction</a></h3> The syntax of Java is close to C++ but a lot more verbose. 
     <li><a name="syntax">syntax</a>::= See <a href="http://www.csci.csusb.edu/dick/samples/java.syntax.html">http://www.csci.csusb.edu/dick/samples/java.syntax.html</a>. <p> In outline a java file starts with an optional package declaration and some import statements: </p><pre> 	package whatever;</pre> <pre>  import package.subpackage.....class</pre> <pre>  import package.subpackage.*</pre> These are followed by a sequence of class and interface declarations: <pre> 		modifiers name extends class possible_interfaces{</pre> <pre> 			field and function definitions</pre> <pre> 		}</pre> <p> Field definitions have two forms: </p><pre> 		modifiers type name;</pre> and <pre> 		modifiers type name = initial value;</pre> where a <span class="InlineFormula">type</span> is either a classname or a simple data type like 'int' or 'char' or 'double'. If the modifiers include 'final' then the <a href="#field">field</a> is a <a href="#constant">constant</a>, othewise it is a <a href="#variable">variable</a>. The following is a very common and useful type of declaration: <pre> 		modifiers type name = new type(arguments);</pre> <p> Arrays are declared like this: </p><pre> 		modifiers type name[] = new type[size];</pre> You can omit the initializer -- and <span class="InlineFormula">name</span> will be NIL! <pre> 		modifiers type name[];</pre> The array must not be used until it is initialised in a staement like this: <pre> 		 name = new type[size];</pre> <p> In either case, if the 'type' is a class(like Object or Applet), the individual objects must be constructed and put in the array before they are used. </p><pre> 		name[0] = new type;</pre> <pre> 		name[1] = new type;</pre> perhaps. <p> Function definitions have form </p><pre> 		modifiers return_type name(arguments){</pre> <pre>			local definitions and statemants</pre> <pre> 		}</pre> the <span class="InlineFormula">return_type</span> above is "void" or the name of a class or simple data type. <a href="#modifiers">modifiers</a> are listed in the glossary. In older Java only variables (fields) can be defined as local. <p> Statements have following main forms: </p><pre> 		variable.function_name(arguments)...;</pre> <pre> 		class.function_name(arguments)...;</pre> <pre> 		variable = expression;</pre> <pre> 		while(expression) statement</pre> <pre> 		if(expression) statement</pre> <pre> 		if(expression) statement else statement</pre> <p> Expressions are typical arithmetic, relational, conditional, expressions of C or C++ plus </p><pre> 		variable.function_name(arguments)...;</pre> <pre> 		class.function_name(arguments)...;</pre> <p> Java allows you to declare local variables and constants inside a function. You can declare a new variable or constant at any place in a function but you can not define the same identifier in different blocks. This causes a common error with for statements like this: </p><pre> 		for(int i=0; i&lt;array.size; ++i) {...}</pre> You must not declare <span class="InlineFormula">i</span> anywhere else in the same function! This constraint makes the interpreter much simpler and possibly faster since all space for local data is allocated when the function is called rather than when it is declared. <p> For a detailed description of the syntax of Java see [<a href="http://cse.csusb.edu/dick/samples/java.syntax.html"> java.syntax.html </a>] at this site. The following definitions define the syntax of UNIX and HTML related to Java. </p><h3><a name="Meta-Notation">Meta-Notation</a></h3> </li>
     <li><a name="O">O</a>(X)::=<span class="InlineFormula">Optional X</span>. #(X)::=<span class="InlineFormula">any number of X's including none</span>. </li>
     <li><a name="quoted">quoted</a>(X)::= double_quotes X double_quotes. </li>
     <li><a name="tagged">tagged</a>(X)::= less_than X greater_than. <p> </p></li>
     <li><a name="number">number</a>::=<span class="InlineFormula">one or more digits</span>. <p> </p><h3><a name="UNIX">UNIX</a></h3> </li>
     <li><a name="CLASSPATH">CLASSPATH</a>::UNIX_variable=<span class="InlineFormula">Tells java tools where to to look for classes</span>. <p> </p></li>
     <li><a name="UNIX_path">UNIX_path</a>::=directory #(":" directory). <p> </p></li>
     <li><a name="appletviewer">appletviewer</a>::command=<span class="InlineFormula">Scan HTML file for Applet tag and display its appearance</span>. <p> </p></li>
     <li><a name="binary">binary</a>::=<span class="InlineFormula">A file that can be loaded and run as a program which uses the machine's own language</span>. <p> </p></li>
     <li><a name="java">java</a>::command=<span class="InlineFormula">run compiled <a href="#class">class</a> name (_)</span>. -- not the name of a <a href="#class">class</a> file! <p> </p></li>
     <li><a name="javac">javac</a>::command=<span class="InlineFormula">compile Java source code file named (_) generating one or more *.class files</span>. <p> </p></li>
     <li><a name="javadoc">javadoc</a>::command=<span class="InlineFormula">Extract HTML documentation from Java Source code file named (_)</span>. <p> </p></li>
     <li><a name="javap">javap</a>::command=<span class="InlineFormula">Disassemble a bytecode <a href="#class">class</a> (_)</span>. <p> <br>(<a name="filenames">filenames</a>): </p></li>
     <li><a name="name_of_class_file">name_of_class_file</a>::= <a href="#class_name">class_name</a> ".class". -- watch out for case sensitivity. <p> </p></li>
     <li><a name="name_of_java_file">name_of_java_file</a>::= <a href="#class_name">class_name</a> ".java". <p> </p></li>
     <li><a name="class_name">class_name</a>::=identifier, appearing as name of <a href="#class">class</a> in <a href="#class">class</a> definition. <p> </p></li>
     <li><a name="name_of_HTML_page">name_of_HTML_page</a>::=UNIX_file_name ".html". <p> </p><h3><a name="HTML">HTML</a></h3> </li>
     <li><a name="applet_in_html">applet_in_html</a>::= <a href="#applet_tag">applet_tag</a> #(<a href="#applet_parameter_tag">applet_parameter_tag</a>) <a href="#O">O</a>(alternative_html_text) <a href="#end_applet_tag">end_applet_tag</a>. <p> </p></li>
     <li><a name="end_applet_tag">end_applet_tag</a>::=<a href="#tagged">tagged</a>("/APPLET"). <p> </p></li>
     <li><a name="applet_tag">applet_tag</a>::= <a href="#tagged">tagged</a>( "APPLET" <a href="#applet_tag_attributes">applet_tag_attributes</a> ). <p> </p></li>
     <li><a name="applet_tag_attributes">applet_tag_attributes</a>::=<a href="#O">O</a>(<a href="#alignment">alignment</a>) <a href="#O">O</a>(<a href="#codebase">codebase</a>) <a href="#code">code</a> <a href="#width">width</a> <a href="#height">height</a> <a href="#O">O</a>(<a href="#alternative">alternative</a>) <a href="#O">O</a>(<a href="#name">name</a>) <a href="#O">O</a>(<a href="#vertical_spacing">vertical_spacing</a>) <a href="#O">O</a>(<a href="#horizontal_spacing">horizontal_spacing</a>). <p> </p></li>
     <li><a name="code">code</a>::="CODE=" <a href="#quoted">quoted</a>(<a href="#name_of_class_file">name_of_class_file</a>), -- relative to [<a href="java.html#code_URL"> code_URL </a>] &amp; [<a href="java.html#codebase"> codebase </a>] below. <p> </p></li>
     <li><a name="width">width</a>::="WIDTH=" <a href="#number">number</a>. -- in pixels <p> </p></li>
     <li><a name="height">height</a>::="HEIGHT="<a href="#number">number</a>. -- in pixels <p> </p></li>
     <li><a name="alignment">alignment</a>::= "ALIGN=" ( "LEFT" | "MIDDLE" | "RIGHT" ). <p> </p></li>
     <li><a name="codebase">codebase</a>::= "CODEBASE=" <a href="#quoted">quoted</a>(<a href="#code_URL">code_URL</a>). <p> </p></li>
     <li><a name="code_URL">code_URL</a>::=<span class="InlineFormula">the <a href="#URL">URL</a> of the directory that contains the applet's code</span>. <p> </p></li>
     <li><a name="alternative">alternative</a>::= "ALT=" <a href="#quoted">quoted</a>(text). <p> </p></li>
     <li><a name="name">name</a>::="NAME=" applet_instance_name. <p> </p></li>
     <li><a name="vertical_spacing">vertical_spacing</a>::="VSPACE=" pixels. <p> </p></li>
     <li><a name="horizontal_spacing">horizontal_spacing</a>::="HSPACE=" pixels. <p> </p></li>
     <li><a name="applet_parameter_tag">applet_parameter_tag</a>::=tagged("PARAM" "NAME=" <a href="#quoted">quoted</a>(name) "VALUE="<a href="#quoted">quoted</a>(value) <p> </p></li>
     <li><a name="app_in_html">app_in_html</a>::=<a href="#tagged">tagged</a>( "APP CLASS="name_of_class) ), --obsolete <p> </p></li>
     <li><a name="future_HTML">future_HTML</a>::=<a href="#tagged">tagged</a>("embed" arguments) alternative <a href="#tagged">tagged</a>("/embed"). <p> </p></li>
    </ol>
    <p>. . . . . . . . . ( end of section <a href="java.html#Syntax">Syntax</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
    <h2><a name="Predefined Classes">Predefined Classes</a></h2> Java is a small language that gets much of its flavor and power from a very large and expanding library of predefined classes. Sun has provided a collection of packages in the Java run-time library 
    <p> For 1.4.2 <a href="#API">API</a> see [<a href="http://java.sun.com/j2se/1.4.2/docs/api/index.html"> index.html </a>] and for 1.5.0 [<a href="http://java.sun.com/j2se/1.5.0/docs/api/index.html"> index.html </a>] (Summer of 2004). </p>
    <p> Also see my rough introduction to some commonly used classes and interfaces [<a href="http://www.csci.csusb.edu/dick/samples/java.classes.html"> java.classes.html </a>] </p>
    <p> In theory at least the library includes all the public classes that have been put on the WWW as well! </p>
    <p> </p>
    <h2><a name="Javascript is Not Java">Javascript is Not Java</a></h2> Javascript is a scripting language that extends HTML. In stead of having a tag that names an applet, you have a tag (&lt;SCRIPT&gt; that contains the script inside the page. It was invented by Netscape to allow people to write programs to generate pages dynamically. Javascript programs are placed in between &lt;SCRIPT&gt; ... &lt;/SCRIPT&gt; tags in the HTML page and they are executed as the oage is loaded by the user's Browser. They can also be attached to buttons on a page. 
    <p> Javascript was once called LiveScript. It is beeing standardized by ECMA (European Standards...) as ECMAScript. Meanwhile MicroSoft has produced its own version called JScript! Even Netscape has 3 or 4 versions of Javascript. The common syntactic ancestor (C++) with Java is clear but the details are quite different to Java. The semantics is closer to Smalltalk than anything else. </p>
    <p> Both Java and Javascript let you produce more complex pages. Both Java and Javascript run on the user's system. A CGI [<a href="http://cse.csusb.edu/dick/samples/comp.html.syntax.html#CGI"> CGI in comp.html.syntax </a>] is executed on the server and sends the results to the client. </p>
    <p> Pointers to news and Google groups: <a href="news:comp.lang.javascript">comp.lang.javascript</a> </p>
    <h2><a name="Specification of Java">Specification of Java</a></h2>
    <ol class="Section"> 
     <h3><a name="Standardization">Standardization</a></h3> 
     <a href="#ISO">ISO</a> was involved in co-ordinating the development of a standard specification of Java. 
     <a href="#ISO">ISO</a> granted Sun the privilege of proposing a "fast-track" standard. When Sun realized that they would lose control of the Java Specification as a result they backed off. 
     <p> Microsoft would prefer its own version of Java and libraries to be the standard. 10,000 developers who want Java's to be a cross-platform language have formed the <span class="InlineFormula">Java Lobby</span>. </p>
     <p> Sun sued MicroSoft for abusing its licence of Java by giving out a version that will work with only MicroSoft software rather than on all platforms. So far(Winter 1998-1999) Microsoft has been ordered to stop giving out their polluted version and have been forced to distribute an upgrade to the "Pure Java" version. </p>
     <p> Now MicroSoft is promoting .NET and C# as rival tecnologies to Java. </p>
     <p> </p>
     <h3><a name="Other Specifications">Other Specifications</a></h3> There is a short glossary of the terms used in Java [
     <a href="http://cse.csusb.edu/dick/samples/java.glossary.html"> java.glossary.html </a>] in my local samples of formal documentation. 
     <p> The syntax (1.0alpha) is summarized at [<a href="http://cse.csusb.edu/dick/samples/java.syntax.html"> java.syntax.html </a>] in my documentation samples. </p>
     <p> Java has its semantics defined by a compiler that translates the Java source code for a virtual machine (the JVM), There is a detailed specification of the virtual machine. My own notes on Java semantics are under construction [<a href="http://cse.csusb.edu/dick/samples/java.semantics.html"> java.semantics.html </a>] in my documentation samples. </p>
     <p> <br>(<a name="File Formats">File Formats</a>): A specification of the format of a .class file was held at http://www.javasoft.com/1.0alpha3/doc/vmspec/vmspec_38.html but I haven't found the replacement..... </p>
     <h3><a name="Java Documentation">Java Documentation</a></h3> 
     <br>(
     <a name="Java reference">Java reference</a>): Sun's reference site [
     <a href="http://java.sun.com/reference/"> http://java.sun.com/reference/ </a>] 
     <p> <br>(<a name="Java Specification">Java Specification</a>): For the the Official Java(TM) 2 Platform, Standard Edition. [<a href="http://java.sun.com/j2se/"> http://java.sun.com/j2se/ </a>] </p>
     <p> </p>
     <li><a name="API">API</a>::="Application Programmers Interfaces". </li>
     <li><a name="APIs">APIs</a>::= See <a href="http://java.sun.com/reference/api/index.html">http://java.sun.com/reference/api/index.html</a>, and pick the version of Java that you are using. </li>
    </ol>
    <p>. . . . . . . . . ( end of section <a href="java.html#Specification of Java">Specification of Java</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
    <p> </p>
    <h2><a name="See Also">See Also</a></h2>
    <ol class="Section"> 
     <h3><a name="Information on the Java Language">Information on the Java Language</a></h3>
     <ol class="Section"> 
      <li>(<a name="online magazine">online magazine</a>): Focus on Java Technology Guide [<a href="http://java.about.com/"> http://java.about.com/ </a>] hosted by William Wagers </li>
      <li>(<a name="FAQ">FAQ</a>): [<a href="http://www.afu.com/javafaq.html"> javafaq.html </a>] [<a href="http://www-net.com/java/faq"> faq </a>] [<a href="http://sunsite.unc.edu/javafaq/javafaq.html"> javafaq.html </a>] [<a href="http://sunsite.unc.edu/javafaq"> javafaq </a>] </li>
      <li>(<a name="News">News</a>): 
       <ul class="Set">
         Archives: [
        <a href="http://cse.csusb.edu/dick/java.www.sites.html"> java.www.sites.html </a>] [
        <a href="http://cse.csusb.edu/dick/old.java.www.sites.html"> old.java.www.sites.html </a>] 
        <p> USENET NewGroups( searchable via Google Groups): <a href="news:comp.lang.java.announce">comp.lang.java.announce</a> , . . . <a href="news:comp.lang.java.security">comp.lang.java.security</a> , . . . <a href="news:comp.lang.java.programmer">comp.lang.java.programmer</a> , . . . <a href="news:comp.lang.java.tech">comp.lang.java.tech</a> , . . . <a href="news:comp.lang.java.misc">comp.lang.java.misc</a> , . . . <a href="news:comp.lang.java.advocacy">comp.lang.java.advocacy</a> , . . . <a href="news:comp.lang.java.setup">comp.lang.java.setup</a> , . . . <a href="news:comp.lang.java">comp.lang.java</a> , . . . <a href="news:alt.www.hotjava">alt.www.hotjava</a> , . . . <a href="news:comp.lang.javascript">comp.lang.javascript</a> , . . . <a href="news:comp.compilers.tools.javacc">comp.compilers.tools.javacc</a> , . . . <a href="news:comp.lang.java.corba:">comp.lang.java.corba:</a> </p>
        <p> </p>
        <li>Magazines: Java Report [<a href="http://www.sigs.com/jro"> jro </a>] , Java World [<a href="http://www.javaworld.com/"> http://www.javaworld.com/ </a>] , Pure Java Developer's Journal [<a href="http://www.cobb.com/pjd/"> http://www.cobb.com/pjd/ </a>] <p> </p><p> </p></li>
       </ul> </li>
      <li>(<a name="Samples">Samples</a>): local: [<a href="../cs320/java/"> ../cs320/java/ </a>] <p> remote: [<a href="http://java.sun.com/applets/index.html"> index.html </a>] [<a href="http://members.tripod.com/~net_tools/free-counters.htm"> free-counters.htm </a>] [<a href="http://wwwipd.ira.uka.de/~espresso"> ~espresso </a>] [<a href="http://www.w3.org/pub/WWW/OOP/9606_Workshop/"> http://www.w3.org/pub/WWW/OOP/9606_Workshop/ </a>] [<a href="http://www.iconcomp.com/demo/case-Phone/phoneCase.html"> phoneCase.html </a>] [<a href="http://www.bulletproof.com/wallstreetweb"> wallstreetweb </a>] [<a href="http://www-dse.doc.ic.ac.uk/~np2/spectrum/index.html"> index.html </a>] [<a href="http://www.inch.com/~friskel/"> http://www.inch.com/~friskel/ </a>] [<a href="http://www.gamelan.com/"> http://www.gamelan.com/ </a>] [<a href="http://www.inmet.com/java.html/"> http://www.inmet.com/java.html/ </a>] [<a href="http://www.best.com/~nessus/algintro.html"> algintro.html </a>] [<a href="http://mirage.irdu.nus.sg/javatutorial/java/index.html"> index.html </a>] </p></li>
      <li>(<a name="Documentation">Documentation</a>): local: [<a href="java.html#Glossary"> Glossary </a>] [<a href="http://www.csci.csusb.edu/dick/samples/java.class.tree.html"> java.class.tree.html </a>] [<a href="http://www.csci.csusb.edu/dick/samples/java.classes.html"> java.classes.html </a>] [<a href="http://www.csci.csusb.edu/dick/samples/java.glossary.html"> java.glossary.html </a>] [<a href="http://www.csci.csusb.edu/dick/samples/java.html"> java.html </a>] [<a href="http://www.csci.csusb.edu/dick/samples/java.lang.System.html"> java.lang.System.html </a>] [<a href="http://www.csci.csusb.edu/dick/samples/java.packages.html"> java.packages.html </a>] [<a href="http://www.csci.csusb.edu/dick/samples/java.semantics.html"> java.semantics.html </a>] [<a href="http://www.csci.csusb.edu/dick/samples/java.syntax.html"> java.syntax.html </a>] [<a href="http://www.csci.csusb.edu/dick/samples/java.www.sites.html"> java.www.sites.html </a>] [<a href="java.html#See Also"> See Also </a>] <p> remote: [<a href="http://java.sun.com/"> http://java.sun.com/ </a>] = [<a href="http://www.applets.com/"> http://www.applets.com/ </a>] , . . . For more general information see the Java and HotJava Documentation [<a href="http://java.dnx.com/documentation.html"> documentation.html </a>] and in particular the goals of Java [<a href="http://java.dnx.com/1.0alpha3/doc/overview/java/index.html"> index.html </a>] and the Java Tutorial at Sun.com [<a href="http://java.sun.com/tutorial/"> http://java.sun.com/tutorial/ </a>] </p><p> A programmer's guide: [<a href="http://java.dnx.com/progGuide/index.html"> index.html </a>] </p></li>
     </ol>
     <p>. . . . . . . . . ( end of section <a href="java.html#Pointers to WWW information on the Java Language">Pointers to WWW information on the Java Language</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
     <h3><a name="The Source Code">The Source Code</a></h3> 
     <h3><a name="News and Announcements">News and Announcements</a></h3> [
     <a href="http://www.cnet.com/Content/News/"> http://www.cnet.com/Content/News/ </a>] 
     <p> The Java announcements archive [<a href="http://wuarchive.wustl.edu/packages/java/"> http://wuarchive.wustl.edu/packages/java/ </a>] plus my local archives of announcements: [<a href="http://cse.csusb.edu/dick/java.www.sites.html"> java.www.sites.html </a>] (after July 29th 1996) [<a href="http://cse.csusb.edu/dick/old.java.www.sites.html"> old.java.www.sites.html </a>] (before July 29th 1996) </p>
     <p> The Java Newbie FAQs from Usenet comp.lang.java: [<a href="../doc/java.newbie.FAQ.txt"> ../doc/java.newbie.FAQ.txt </a>] </p>
     <p> Elliotte Rusty Harold's Official Frequently Asked Questions [<a href="http://sunsite.unc.edu/javafaq/javafaq.html"> javafaq.html</a>] . </p>
     <p> Also see TeamJAVA [<a href="http://www.teamjava.com:80/links/"> http://www.teamjava.com:80/links/ </a>] and HowDoI at Digital Focus: [<a href="http://www.digitalfocus.com/digitalfocus/faq/howdoi.html"> howdoi.html </a>] Also see Earthweb's Java Directory on www.Gamelan.com [<a href="http://www.gamelan.com/"> http://www.gamelan.com/ </a>] </p>
     <p> </p>
     <p> I culled a few common questions and answers in [<a href="http://cse.csusb.edu/dick/samples/java.FAQ"> java.FAQ </a>] but these are very rough and ready as yet, and not official FAQs for Java. Also see the uneditted version: [<a href="http://cse.csusb.edu/dick/samples/java.mbox"> java.mbox </a>] </p>
     <p> USENET NewsGroups(also on Google groups) <br>(<a name="newsgroups">newsgroups</a>): <br>(<a name="computer Language">computer Language</a>): <a href="news:comp.lang.java.announce">comp.lang.java.announce</a> <a href="news:comp.lang.java.security">comp.lang.java.security</a> <a href="news:comp.lang.java.programmer">comp.lang.java.programmer</a> <a href="news:comp.lang.java.tech">comp.lang.java.tech</a> <a href="news:comp.lang.java.misc">comp.lang.java.misc</a> <a href="news:comp.lang.java.advocacy">comp.lang.java.advocacy</a> <a href="news:comp.lang.java.setup">comp.lang.java.setup</a> <a href="news:comp.lang.java.corba">comp.lang.java.corba</a> <a href="news:comp.lang.java">comp.lang.java</a> </p>
     <p> <br>(<a name="Setting the class path">Setting the class path</a>): java [<a href="http://java.sun.com/products/jdk/1.2/docs/tooldocs/solaris/classpath-linux.html"> classpath-linux.html </a>] <br>(<a name="tools">tools</a>): <a href="news:alt.www.hotjava">alt.www.hotjava</a> <a href="news:comp.compilers.tools.javacc">comp.compilers.tools.javacc</a> </p>
     <h3><a name="Tutorials">Tutorials</a></h3> Locally: Under redevelopment. 
     <p> </p>
     <p> At Fairfield: [<a href="http://funrsc.fairfield.edu/program/java/java.html"> java.html </a>] </p>
     <p> Marty Hall's Tutorials [<a href="http://www.apl.jhu.edu/~hall/java/#Tutorials"> #Tutorials </a>] </p>
     <p> </p>
     <h3><a name="Books">Books</a></h3> Errata for "Java in 21 Days" [
     <a href="http://www.lne.com/Web/Books/Java/errata.html"> errata.html </a>] 
     <p> Examples etc for "Java in a Nutshell" <a href="ftp://ftp.ora.com/published/oreilly/nutshell/java/">//ftp.ora.com/published/oreilly/nutshell/java/</a> </p>
     <p> Local information on objects in general [<a href="http://cse.csusb.edu/dick/samples/objects.html"> objects.html </a>] , . . . information on language including Java [<a href="http://cse.csusb.edu/dick/languages.html#Java"> Java in languages </a>] , . . . and notes and links about software engineering in general [<a href="http://cse.csusb.edu/dick/se.www.sites.html"> se.www.sites.html </a>] </p>
     <p> </p>
     <h3><a name="Source Code Examples">Source Code Examples</a></h3> [
     <a href="http://www.Planet-Source-Code.com/PlanetSourceCode/"> http://www.Planet-Source-Code.com/PlanetSourceCode/ </a>] 
     <p> </p>
    </ol>
    <p>. . . . . . . . . ( end of section <a href="java.html#See also">See also</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
    <h2><a name="Trivia">Trivia</a></h2> 
    <br>(
    <a name="CAFEBABE">CAFEBABE</a>): On UNIX a compiled 
    <a href="#class">class</a> can be recognized because it will contain a magic string of bytes that spell out in hexadecimal 
    <span class="InlineFormula">0xCAFEBABE</span>. 
    <p> </p>
    <h2><a name="The Naming of Java">The Naming of Java</a></h2> Some think it means "Just Another Vague Acronym". 
    <p> The name "Java" is not an acronym. The original name was "Oak", after the tree outside the developers window, but it turned out that "Oak" was already copyrighted/trademarked/in-use. The descriptions of the next stage vary but all indicate some kind of brainstorming session and/or a local coffee shop, during which name "Java" was proposed and accepted. </p>
   </ol>
   <p>. . . . . . . . . ( end of section <a href="java.html#The Java Programming Language">The Java Programming Language</a>) <a href="#Contents">&lt;&lt;</a>Contents | End<a href="#__End">&gt;&gt;</a> </p>
  </ol> 
  <h3><a name="__End">End</a></h3>  
 </body>
</html>