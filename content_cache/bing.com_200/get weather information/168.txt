<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
 <head> 
  <meta content="text/html; charset=utf-8" http-equiv="content-type"> 
  <title>snxvpn 1.2 : Python Package Index</title> 
  <meta content=""> 
  <meta content="Command-line utility to connect to a Checkpoint SSL VPN "> 
  <link rel="alternate" type="application/rss+xml" title="RSS: 40 latest updates" href="https://pypi.python.org/pypi?:action=rss"> 
  <link rel="alternate" type="application/rss+xml" title="RSS: 40 newest packages" href="https://pypi.python.org/pypi?:action=packages_rss"> 
  <link rel="stylesheet" media="screen" href="/static/styles/screen-switcher-default.css" type="text/css"> 
  <link media="screen" href="/static/styles/netscape4.css" type="text/css" rel="stylesheet"> 
  <link media="print" href="/static/styles/print.css" type="text/css" rel="stylesheet"> 
  <link media="screen" href="/static/styles/largestyles.css" type="text/css" rel="alternate stylesheet" title="large text"> 
  <link media="screen" href="/static/styles/defaultfonts.css" type="text/css" rel="alternate stylesheet" title="default fonts"> 
  <link rel="stylesheet" media="screen" href="/static/css/docutils.css" type="text/css"> 
  <link rel="stylesheet" media="screen" href="/static/css/pygments.css" type="text/css"> 
  <!-- allow pypi to override the standard pydotorg/docutils/etc. styles --> 
  <link rel="stylesheet" href="/static/css/pypi.css" type="text/css"> 
  <link media="screen" rel="stylesheet" href="/static/css/pypi-screen.css" type="text/css"> 
  <meta name="google-site-verification" content="NSgF04qslVV4P7nymxJDSkWVK09zfdPTxgZfU3dNSoQ"> 
  <meta name="description" content="Command-line utility to connect to a Checkpoint SSL VPN "> 
  <link rel="meta" title="DOAP" type="application/rdf+xml" href="/pypi?:action=doap&amp;name=snxvpn&amp;version=1.2"> 
  <style type="text/css">
  table.form th {white-space: pre;}
 </style> 
  <style type="text/css">
       </style> 
 </head> 
 <body> 
  <!--  Logo  --> 
  <h1 id="logoheader"> <a accesskey="1" href="http://www.python.org" id="logolink"> <img src="/static/images/python-logo.png" alt="homepage" border="0" id="logo"> </a> </h1> 
  <!--  Skip to Navigation  --> 
  <div class="skiptonav">
   <a accesskey="2" href="#left-hand-navigation"><img src="/static/images/trans.gif" alt="skip to navigation" border="0" id="skiptonav"></a>
  </div> 
  <div class="skiptonav">
   <a accesskey="3" href="#content-body"><img src="/static/images/trans.gif" alt="skip to content" border="0" id="skiptocontent"></a>
  </div> 
  <!--  Utility Menu  --> 
  <div id="utility-menu"> 
   <!--  Search Box  --> 
   <div id="searchbox"> 
    <form id="searchform" method="get" name="searchform" action="/pypi"> 
     <input type="hidden" name=":action" value="search"> 
     <div id="search"> 
      <input class="input-text" id="term" name="term" autofocus> 
      <input class="input-button" type="submit" name="submit" value="search" id="submit"> 
     </div> 
    </form> 
   </div> 
   <!-- XXX: reinstate this       <div id="screen-switcher"></div> --> 
  </div> 
  <div id="left-hand-navigation"> 
   <!--  Main Menu NEED LEVEL TWO HEADER AND FOOTER --> 
   <div id="menu"> 
    <ul class="level-one"> 
     <li class="selected"> <a class="selected" href="/pypi">Package Index</a> 
      <ul class="level-two"> 
       <li class=""><a class="" href="/pypi?%3Aaction=browse">Browse&nbsp;packages</a></li> 
       <li class=""><a class="" href="/pypi?%3Aaction=list_classifiers">List&nbsp;trove&nbsp;classifiers</a></li> 
       <li class=""><a class="" href="/pypi?%3Aaction=rss">RSS&nbsp;(latest&nbsp;40&nbsp;updates)</a></li> 
       <li class=""><a class="" href="/pypi?%3Aaction=packages_rss">RSS&nbsp;(newest&nbsp;40&nbsp;packages)</a></li> 
       <li><a href="/tos">Terms of Service</a></li> 
       <li><a href="http://wiki.python.org/moin/CheeseShopTutorial">PyPI Tutorial</a></li> 
       <li><a href="/security">PyPI Security</a></li> 
       <li><a href="http://sourceforge.net/tracker/?group_id=66150&amp;atid=513504">PyPI Support</a></li> 
       <li><a href="https://github.com/pypa/pypi-legacy/issues">PyPI Bug Reports</a></li> 
       <li><a href="http://www.python.org/sigs/distutils-sig/">PyPI Discussion</a></li> 
       <li><a href="http://wiki.python.org/moin/CheeseShopDev">PyPI Developer Info</a></li> 
      </ul> </li> 
     <li class=""><a href="http://www.python.org/about" class="" title="About The Python Language">About</a> </li>
     <li class=""><a href="http://www.python.org/news" class="" title="">News</a> </li>
     <li class=""><a href="http://www.python.org/doc" class="" title="">Documentation</a> </li>
     <li class=""><a href="http://www.python.org/download" title="">Download</a> </li>
     <li class=""><a href="http://www.python.org/community" class="" title="">Community</a> </li>
     <li class=""><a href="http://www.python.org/psf" class="" title="Python Software Foundation">Foundation</a> </li>
     <li class=""><a href="http://www.python.org/dev" class="" title="Python Core Language Development">Core Development</a> </li> 
    </ul> 
   </div> 
  </div> 
  <div id="content-body"> 
   <div id="body-main"> 
    <div id="content"> 
     <div id="breadcrumb"> 
      <a href="/pypi">Package Index</a> 
      <span class="breadcrumb-separator">&gt;</span> 
      <a href="/pypi/snxvpn">snxvpn</a> 
      <span class="breadcrumb-separator">&gt;</span> 
      <a href="/pypi/snxvpn/1.2">1.2</a> 
     </div> 
     <div id="document-floating"> 
      <div id="document-navigation" style="overflow-y: auto; max-height: 15em; overflow-x: hidden;"> 
       <h4>Not Logged In</h4> 
       <ul> 
        <li><a href="/pypi?%3Aaction=login_form">Login</a></li> 
        <li><a href="/pypi?%3Aaction=register_form">Register</a></li> 
        <li><a href="/pypi?%3Aaction=forgotten_password_form">Lost Login?</a></li> 
        <li><a href="/openid_login">Login with OpenID</a> <a style="border: none;" href="/openid_login?provider=Launchpad"><img width="16" height="16" alt="Launchpad" src="https://launchpad.net/@@/launchpad.png" title="Launchpad"></a> </li> 
        <li><a href="/google_login">Login with Google<img width="16" height="16" src="https://www.google.com/favicon.ico" title="Google Login" alt="Google Login"></a></li> 
       </ul> 
       <div id="statusdiv"> 
       </div> 
      </div> 
     </div> 
     <div class="section"> 
      <h1>snxvpn 1.2</h1> 
      <div id="download-button"> 
       <a class="button green" style="float:right;" href="https://pypi.python.org/packages/87/6b/e8557ecb712351488f4d08d68a3e926c1b5f03aecadb6513c27979bb8dee/snxvpn-1.2.tar.gz">Download<br> <span style="font-size: 75%">snxvpn-1.2.tar.gz</span> </a> 
      </div> 
      <p style="font-style: italic">Command-line utility to connect to a Checkpoint SSL VPN </p> 
      <p>By Ralf Schlatterbeck</p> 
      <p>This is a project to connect to a Checkpoint SSL-VPN from a Linux client. The current version of checkpoint SNX (SSL Network Extender) for Linux no longer supports a command-line mode. The supported version involves a Browser with Java and is heavily dependent on the correct Java version and other configuration options in the Browser. Moreover it seems to only work with the Mozilla browsers (Firefox) not with others like Chrome. Last not least Java and the Browser like to die frequently.</p> 
      <p>The current Checkpoint solution still depends on a command-line utility called <tt>snx</tt> that needs root privileges and is installed either via automatic download (and install) from Java or by hand. The web-page for the SSL-VPN usually supports download of the correct snx-version for that endpoint for manual installation.</p> 
      <p>In the new solution the <tt>snx</tt> binary is called with the undocumented <tt><span class="pre">-Z</span></tt> Option. In that mode it does not do the password negotiation (which is done via the browser) but is only used for setting up the VPN connection.</p> 
      <p>This project is an attempt to duplicate the Browser-based login with a standalone program (in python) to get rid of all the Java version and Browser intergration headache. We still rely on the <tt>snx</tt> binary by Checkpoint which is called with the undocumented <tt><span class="pre">-Z</span></tt> option.</p> 
      <p>So far this is working for me with a Checkpoint SSL that uses username and password authentication and in addition a one-time password transmitted via SMS to the telephone of the person trying to connect. If you’re using certificate-based login or other methods, this will probably not work for you out-of-the-box but you may want to help me make it work.</p> 
      <div id="install-and-run"> 
       <h2>Install and Run</h2> 
       <p>Install via <tt>pip</tt> is the preferred way (replace <tt>pip</tt> with <tt>pip3</tt> if you want to install for python3):</p> 
       <pre>pip install snxvpn
</pre> 
       <p>The following dependencies are needed but should be picked up automagically if you install via <tt>pip</tt>:</p> 
       <ul> 
        <li>Beautiful Soup version 4 (<tt><span class="pre">python-bs4</span></tt> Debian package)</li> 
        <li>pycrypto (<tt><span class="pre">python-crypto</span></tt> Debian package)</li> 
       </ul> 
       <p>After installation you should be able to run <tt>snxconnect <span class="pre">--help</span></tt> to find out about options. At least a host, and username must be given, either on the command-line via options or in a config file (see below).</p> 
       <p>The <tt>snxconnect</tt> program will currently create two files in the current working directory where the program is started:</p> 
       <ul> 
        <li><tt>snxanswer</tt>: The not-yet-reverse-engineered answer of Checkpoint’s <tt>snx</tt> program to the caller, only created if the <tt><span class="pre">--debug</span></tt> option is given</li> 
        <li><tt><span class="pre">$HOME/.snxcookies</span></tt>: The cookies from the remote end in the format known from the perl LWP library (available in python as LWPCookieJar), this is only created if the <tt><span class="pre">--save-cookies</span></tt> option is given. The default cookie filename can be changed with the <tt><span class="pre">--cookiefile</span></tt> option.</li> 
       </ul> 
       <p>If a cookie file is found, <tt>snxconnect</tt> tries to reconnect without asking for a password. This can be used if the connection has died prematurely before the connection time ran out. And, yes, it might be a security risk to save cookies to disk, so you have to explicitly enable this feature by setting <tt><span class="pre">save-cookies</span> true</tt> in the config file or giving the <tt><span class="pre">--save-cookies</span></tt> option. Note that the cookies of course only have a limited lifetime and your connection isn’t very secure if you cannot be sure of the files on your disk. Moreover all users of the current machine can access the VPN connection anyway.</p> 
       <p>When you run Checkpoints <tt>snx</tt> for the first time with <tt>snxconnect</tt> it creates an X-Windows popup that lets you confirm the server fingerprint. I’ve not seen this popup with the Java framework (but Java died several times during my first experiments which is one of the reasons I wrote <tt>snxvpn</tt>, so that might be the reason I hadn’t seen the popup before). You have to confirm this popup. The server fingerprint is stored into a file with extension <tt>.db</tt> in <tt>/etc/snx</tt>.</p> 
       <p>For configuration, <tt>snxconnect</tt> accepts a config file <tt><span class="pre">$HOME/.snxvpnrc</span></tt>. The options there are the command-line long options (obtained with –help) where a ‘-‘ is replaced with ‘_’. For compatibility with <tt>.snxrc</tt>, the keyword <tt>server</tt> is an alias for <tt>host</tt>. You can see which options were picked up from the config-file by specifying <tt><span class="pre">--help</span></tt>, where defaults are displayed, the defaults from the config-file are displayed. Command-line options take precedence over config-file entries.</p> 
       <p>In addition a <tt>.netrc</tt> file is supported that can contain username and password by host name. Note that storing long-term login credentials on disk is a security risk. See the manual page for <tt>netrc</tt> for further details.</p> 
       <p>To install from source (from a <tt>git</tt> checkout) you need my <a href="https://sourceforge.net/projects/sfreleasetools/" rel="nofollow">sfreleasetools</a> from Sourceforge. This adds the necessary <tt>Makefile</tt> includes to create the <tt>snxvpnversion.py</tt> from the git tag containing the latest version number. You can either install <a href="https://sourceforge.net/projects/sfreleasetools/" rel="nofollow">sfreleasetools</a> in a sibling directory of <tt>snxvpn</tt> called <tt>releasetools</tt> or set the environment variable RELEASETOOLS pointing to your cloned version. You also need the <tt>rst2html</tt> command provided by <tt>docutils</tt>, on Debian Linux you can obtain it by installing the <tt><span class="pre">python-docutils</span></tt> package.</p> 
       <p>Once this is installed, call <tt>make</tt> without arguments. This will create the <tt>snxvpnversion.py</tt> which is used by the <tt>setup.py</tt> script.</p> 
       <p>Once the snxvpnversion.py has been created, the <tt>snxvpn</tt> package can be installed with normal:</p> 
       <pre>python setup.py install --prefix=/usr/local
</pre> 
      </div> 
      <div id="notes-on-snx-installation"> 
       <h2>Notes on <tt>snx</tt> Installation</h2> 
       <p>From many posts on various mailinglists and forums, it is clear that installing <tt>snx</tt> isn’t straightforward. You need some non-standard libraries installed that <tt>snx</tt> needs to function. Moreover <tt>snx</tt> is a binary for the <tt>i386</tt> architecture, not a modern 64-bit AMD/Intel architecture. I can only give hints for Debian installation here but the general steps will apply to other distributions, too.</p> 
       <p>Obtaining the snx binary in the first place can usually be achieved by connecting via web-browser to the SSL-VPN site via the browser, log in and (in my installation here at least) look in the <em>Settings</em> (in german <em>Einstellungen</em>) menu for an entry native application settings or similar (german “Native Anwendungseinstellungen bearbeiten”). In this menu I do have links for manual download of <tt>snx</tt> for Linux and Mac-OS.</p> 
       <p>First of all if you’re on a 64-bit architecture (called <tt><span class="pre">amd-64</span></tt> at least by Debian) you need to enable multi-architecture support with:</p> 
       <pre>dpkg --add-architecture i386
apt-get update
</pre> 
       <p>Then you need to install some packages that contain libraries needed by <tt>snx</tt>, notably:</p> 
       <ul> 
        <li><tt><span class="pre">libstdc++5:i386</span></tt></li> 
        <li><tt>libxcb1:i386</tt></li> 
        <li><tt>libaudit1:i386</tt></li> 
        <li><tt>libgcc1:i386</tt></li> 
        <li><tt>libxau6:i386</tt></li> 
        <li><tt>libxdmcp6:i386</tt></li> 
       </ul> 
       <p>To check if you have all necessary libraries, you can run <tt>ldd</tt> on the <tt>snx</tt> binary (with sudo to root):</p> 
       <pre>sudo ldd /usr/bin/snx
</pre> 
       <p>This should list a library file for each line and should not report any missing libraries.</p> 
      </div> 
      <div id="some-notes-on-the-mechanisms"> 
       <h2>Some Notes on the Mechanisms</h2> 
       <p>This section discusses some of the internals of how the <tt>snx</tt> program is called by the Java framework and <tt>snxconnect</tt>.</p> 
       <p>The Login process via the browser is a standard login page with lots of Javascript and redirects. Passwords are sent in encrypted form to the VPN gateway. The encryption uses a 2048 bit RSA key and pads the password with random data before encryption (this is <em>good</em>). During login the browser (or this program) picks up a lot of cookies and can access necessary login information via Javascript. This information includes:</p> 
       <ul> 
        <li>RSA public key for the password encryption</li> 
        <li>Username to be passed to <tt>snx</tt></li> 
        <li>A one-time password (different from the one received via telephone) to be passed to <tt>snx</tt></li> 
        <li>Host name for TLS connection</li> 
        <li>Port for TLS connection</li> 
        <li>A server fingerprint</li> 
       </ul> 
       <p>All these (except the RSA key) are passed to the <tt>snx</tt> program for establishing the connection. The connection might use PPP internally as some of the error messages (which are sent as part of the i18n info in Javascript and map the error codes of <tt>snx</tt> to human-readable messages) suggest.</p> 
       <p>If you call <tt>snx</tt> with the undocumented <tt><span class="pre">-Z</span></tt> option by hand, it will terminate immediately. It obviously has other checks in place if it is called “correctly”. To call <tt>snx</tt> correctly with this option, <tt>snx</tt> expects that standard input, output and error are UNIX pipes. Only if something goes wrong and <tt>snx</tt> dies with an error-message, these pipes are ever used. After startup, <tt>snx</tt> checks the existence of a logfile and creates it if it doesn’t exist or is not locked by another <tt>snx</tt> process. Then it creates some other lockfiles in <tt>/etc/snx/tmp</tt> and then immediately forks a child process and lets the parent process terminate. This forking and terminating sends the child process to the background. The first step the child process does is close the file-descriptors for standard input, output, and error.</p> 
       <p>After this, <tt>snx</tt> opens and listens on a TCP socket on port 7776 on the local machine. I haven’t found options for telling <tt>snx</tt> to use another port. The calling application (e.g., <tt>snxconnect</tt> or the original Java framework) is expected to pass the connection information detailed above in an undocumented binary format. After that <tt>snx</tt> establishes a VPN connection and reports back with another blob of binary information on the same socket. The socket must then be kept open by the calling application, otherwise <tt>snx</tt> terminates. It may well be that <tt>snx</tt> accepts further commands on that socket, e.g., for renewing the authentication after the VPN timeout has expired. We log the binary data received on that socket to the file <tt>snxanswer</tt> if debugging is enabled.</p> 
      </div> 
      <a name="downloads">&nbsp;</a> 
      <table class="list" style="margin-bottom: 10px;"> 
       <tbody>
        <tr> 
         <th>File</th> 
         <th>Type</th> 
         <th>Py Version</th> 
         <th>Uploaded on</th> 
         <th style="text-align: right;">Size</th> 
        </tr> 
        <tr class="odd"> 
         <td> <span style="white-space: nowrap;"> <a href="https://pypi.python.org/packages/87/6b/e8557ecb712351488f4d08d68a3e926c1b5f03aecadb6513c27979bb8dee/snxvpn-1.2.tar.gz#md5=b4486e7d974112c905f2058d5801b454">snxvpn-1.2.tar.gz</a> (<a title="MD5 Digest" href="/pypi?:action=show_md5&amp;digest=b4486e7d974112c905f2058d5801b454">md5</a>) </span> </td> 
         <td style="white-space: nowrap;"> Source </td> 
         <td> </td> 
         <td>2017-09-27</td> 
         <td style="text-align: right;">15KB</td> 
        </tr> 
        <tr>
         <td id="last" colspan="6"></td>
        </tr> 
       </tbody>
      </table> 
      <ul class="nodot"> 
       <li> <strong>Author:</strong> <span>Ralf Schlatterbeck</span> </li> 
       <!-- The <th> elements below are a terrible terrible hack for setuptools --> 
       <li> <strong>Home Page:</strong> 
        <!-- <th>Home Page --> <a href="https://github.com/schlatterbeck/snxvpn">https://github.com/schlatterbeck/snxvpn</a> </li> 
       <li> <strong>License:</strong> <span>BSD License</span> </li> 
       <li> <strong>Platform:</strong> <span>Linux</span> </li> 
       <!-- TODO: add link to products in follow dependencies... --> 
       <li> <strong>Categories</strong> 
        <ul class="nodot"> 
         <li> <a href="/pypi?:action=browse&amp;c=3">Development Status :: 3 - Alpha</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=30">Intended Audience :: Developers</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=35">Intended Audience :: Information Technology</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=40">Intended Audience :: Science/Research</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=41">Intended Audience :: System Administrators</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=60">License :: OSI Approved :: BSD License</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=170">Operating System :: POSIX :: Linux</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=214">Programming Language :: Python</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=532">Programming Language :: Python :: 2.7</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=587">Programming Language :: Python :: 3.4</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=607">Programming Language :: Python :: 3.5</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=611">Programming Language :: Python :: 3.6</a> </li> 
        </ul> </li> 
       <li> <strong>Package Index Owner:</strong> <span>schlatterbeck</span> </li> 
       <li> <strong><a href="https://github.com/edumbill/doap/wiki">DOAP</a> record:</strong> <a href="/pypi?:action=doap&amp;name=snxvpn&amp;version=1.2">snxvpn-1.2.xml</a> </li> 
      </ul> 
     </div> 
    </div> 
    <div id="footer"> 
     <div id="credits"> 
      <div style="float: left; margin-right: 1em;" id="badges"> 
       <img src="https://img.shields.io/badge/ipv6-go!-green.svg" alt="ipv6 ready" title="ipv6 ready" border="0">
       <br> 
       <img src="https://img.shields.io/badge/http2-go!-green.svg" alt="http2 ready" title="http2 ready" border="0">
       <br> 
       <img src="/static/images/PythonPoweredAnimSmall.gif" alt="darn right it is" title="Python Powered" border="0"> 
      </div> 
      <div style="float: right" id="donations"> 
       <a href="http://www.python.org/about/website">Website maintained by the Python community</a>
       <br> 
       <a href="https://www.fastly.com/" title="Real-time CDN services provided by Fastly">Real-time CDN by Fastly</a> / 
       <a href="http://developer.rackspace.com/" title="Server hosting by Rackspace Open Source support">Hosting by Rackspace</a>
       <br> 
       <a href="https://aws.amazon.com/s3/" title="Object storage provided by Amazon S3">Object storage by Amazon S3</a> / 
       <a href="http://www.timparkin.co.uk/" title="Design by Tim Parkin, Yorkshire man, photographer and developer">Design by Tim Parkin</a> 
      </div> 
     </div> Copyright © 1990-2017, 
     <a href="http://www.python.org/psf">Python Software Foundation</a>
     <br> 
     <a href="https://pypi.org/policy/terms-of-use/">Terms of Use</a> 
    </div> 
   </div> 
  </div> 
  <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-55961911-1', 'auto');
        ga('require', 'linkid', 'linkid.js');
        ga('send', 'pageview');
      </script> 
  <script type="text/javascript" src="//statuspage-production.s3.amazonaws.com/se-v2.js">
      </script> 
  <script type="text/javascript">
        var sp = new StatusPage.page({ page : '2p66nmmycsj3' });
        sp.summary({
          // <![CDATA[
          success: function(data) {
            var div = document.getElementById('statusdiv');
            var reports = "</br><h4 id='statusbox'>Status</h4>\n";
            var outage = 0;
            var maintenance = 0;
            for (i in data.incidents) {
              var incident = data.incidents[i];
              var message, status = incident.status;
              if (status === 'scheduled') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status === 'in_progress') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                reports += message;
                outage += 1;
              }
            }
            for (i in data.scheduled_maintenances) {
              var incident = data.scheduled_maintenances[i];
              var message, status = incident.status;
              if (status === 'scheduled') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status === 'in_progress') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                reports += message;
                outage += 1;
              }
            }
            if (outage + maintenance === 0) {
              reports += "<li><a href='http://status.python.org'>Nothing to report</a></li>";
            }
            div.innerHTML=reports;
            if (outage > 0) {
              var statusbox = document.getElementById("statusbox");
              statusbox.style.background = '#FC234A';
            }
          }
          // ]]>
        });
      </script>   
 </body>
</html>