<!doctype html>
<html lang="en-US" prefix="og: http://ogp.me/ns#" ng-app="AP" ng-strict-di>
 <head> 
  <title>Selenium Tutorial - Get started using Java</title> 
  <meta charset="UTF-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta name="robots" content="index, follow">
  <meta name="description" content="Get familiar with Selenium WebDriver, and how to automate manual tasks on a web page.">
  <meta property="og:locale" content="en_US">
  <meta property="og:type" content="article">
  <meta property="og:title" content="Selenium Tutorial - Get started using Java">
  <meta property="og:description" content="Get familiar with Selenium WebDriver, and how to automate manual tasks on a web page.">
  <meta property="og:image" content="https://imgur.com/wLgquTL.jpg">
  <meta property="og:url" content="https://www.airpair.com/selenium/posts/selenium-tutorial-with-java">
  <link rel="canonical" href="https://www.airpair.com/selenium/posts/selenium-tutorial-with-java"> 
  <link rel="stylesheet" href="https://static.airpair.com/2015/css/fonts.css" type="text/css"> 
  <link rel="stylesheet" href="https://static.airpair.com/apcom/css/libs-914db4fa9b.css" type="text/css"> 
  <link rel="stylesheet" href="https://static.airpair.com/apcom/css/index-08a77604b7.css" type="text/css"> 
  <link rel="shortcut icon" type="image/png" href="https://static.airpair.com/ico/favicon-16x16.png"> 
  <meta name="theme-color" content="#ffffff"> 
  <link rel="alternate" type="application/rss+xml" href="https://www.airpair.com/rss" title="AirPair Rss"> 
  <base href="/"> 
 </head> 
 <body> 
  <header> 
   <a href="/" tile="airpair.com pair programming" target="_self"></a> 
   <ul> 
    <li class="ps"><a href="/software-experts" target="_self">Software Experts</a></li> 
    <li class="bk">|</li> 
    <li class="lg"><a href="/login" target="_self" rel="nofollow"><b>Login</b></a></li> 
   </ul> 
  </header> 
  <div class="main-wrap"> 
   <div notifications></div> 
   <main ng-view> 
    <div id="serverTemplate"> 
     <article class="blogpost"> 
      <h1 class="entry-title" itemprop="headline">Selenium Tutorial - Get started using Java</h1> 
      <div class="railMarker"></div> 
      <h4 id="table-of-contents">Table of Contents</h4> 
      <ul> 
       <li><a href="#introduction">Introduction</a></li> 
       <li><a href="#lets-get-started-">Lets get started...</a>
        <ul> 
         <li><a href="#setting-up-your-computer-with-a-jdk">Setting up your computer with a JDK</a></li> 
         <li><a href="#configuring-your-ide">Configuring your IDE</a></li> 
        </ul> </li> 
       <li><a href="#undefined"></a></li> 
       <li><a href="#setting-up-your-project-">Setting up your Project...</a></li> 
       <li><a href="#undefined"></a></li> 
       <li><a href="#writing-our-first-test">Writing our first test</a>
        <ul> 
         <li><a href="#preparation">Preparation</a></li> 
         <li><a href="#the-test-cases">The Test Cases</a></li> 
        </ul> </li> 
       <li><a href="#undefined"></a></li> 
       <li><a href="#writing-a-library">Writing a library</a></li> 
       <li><a href="#undefined"></a></li> 
       <li><a href="#writing-the-tests">Writing the tests</a>
        <ul> 
         <li><a href="#test-case-1-validate-that-the-download-link-exists-">Test Case #1 - Validate that the download link exists.</a></li> 
         <li><a href="#test-case-2-validate-that-all-tabs-exist-">Test Case #2 - Validate that all tabs exist.</a></li> 
        </ul> </li> 
       <li><a href="#undefined"></a></li> 
       <li><a href="#conclusion-next-steps">Conclusion / Next Steps</a></li> 
       <li><a href="#undefined"></a></li> 
      </ul> 
      <figure class="author"> 
       <img alt="Daniel Davison" src="https://avatars.githubusercontent.com/u/2972876?v=3?s=100"> 
       <hr> 
       <div> 
        <label>Daniel Davison</label> 
        <figcaption>
          Software Engineer with a love for automated testing using Selenium. Top answerer for Selenium in StackOverflow. Author of the Conductor framework 
        </figcaption> 
       </div> 
       <hr> 
      </figure> 
      <p class="asset"><img src="https://imgur.com/wLgquTL.jpg"></p> 
      <hr> 
      <post no-compile>
       <h2 id="introduction">Introduction</h2> 
       <p>This tutorial is designed to help you get familiar with what Selenium WebDriver is, and how you can use it to automate manual interactions with a web page.</p> 
       <p>By the end of this tutorial, you can expect to know...</p> 
       <ul> 
        <li>How Selenium can help you perform manual tasks on web applications with ease</li> 
        <li>How to write a Library that maps out your web pages</li> 
        <li>How to Write a Selenium test</li> 
       </ul> 
       <p>I will be guiding you through the process of...</p> 
       <ol> 
        <li>Setting up your computer with a JDK</li> 
        <li>Installing / Configuring an IDE (Integrated Development Environment)</li> 
        <li>Writing a library</li> 
        <li>Writing your first tests</li> 
       </ol> 
       <p>First, let's talk about Selenium.</p> 
       <p><strong>What is Selenium?</strong> An excerpt from Selenium's <a href="http://seleniumhq.org">home page</a>,</p> 
       <blockquote> 
        <p>Selenium automates browsers. that's it.</p> 
       </blockquote> 
       <p>Selenium enables you to emulate user interaction with a web page.</p> 
       <p><strong>What is WebDriver?</strong> WebDriver is now an official <a href="http://www.w3.org/TR/webdriver/">W3C Specification</a>, and in-short, it is a method of interacting with a web browser. Previously, with Selenium RC, Selenium would operate with the browser by injecting JavaScript to interact with elements. With the adoption of WebDriver, browser manufacturers like Google, Mozilla, and Microsoft release their browser with the ability to be controlled by a hook, that Selenium can tap into. This hook enables Selenium to interact with the webbrowser in the same way that humans do.</p> 
       <h2 id="lets-get-started-">Lets get started...</h2> 
       <h3 id="setting-up-your-computer-with-a-jdk">Setting up your computer with a JDK</h3> 
       <p>We need a few things first to get up and running using Selenium..</p> 
       <ol> 
        <li>A JRE/JDK installed</li> 
        <li>A Java IDE</li> 
       </ol> 
       <p><em>If you already have a JRE/JDK and have done Java programming before, you may continue to <a href="#configuring-your-ide">Configuring your IDE</a></em></p> 
       <p><strong>#1</strong>: <strong><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">Download and Install a JDK</a></strong></p> 
       <h3 id="configuring-your-ide">Configuring your IDE</h3> 
       <p>There are several IDE's out there such as Eclipse, NetBeans etc. In this tutorial, we will be using IntelliJ IDEA Community Edition to get you started because it is quick to get up and running with this tutorial.</p> 
       <blockquote> 
        <p><a href="https://www.jetbrains.com/idea/#community_edition">» Download IntelliJ IDEA Community Edition «</a></p> 
       </blockquote> 
       <p>On the IntelliJ IDEA Community Edition webpage, scroll down the page until you see Download links.</p> 
       <p>Once you've downloaded the installer, follow the steps through.</p> 
       <p><strong>Upon completing installation</strong>, you will see a Splash Screen.</p> 
       <p><img src="https://i.imgur.com/lI6HCMJ.png" alt="splash"></p> 
       <hr> 
       <h2 id="setting-up-your-project-">Setting up your Project...</h2> 
       <p>Follow these steps:</p> 
       <ol> 
        <li><p><strong>We will click "Create New Project"</strong> <img src="https://i.imgur.com/TAjb2CD.png" alt="new-screen"></p> </li> 
        <li><p><strong>We will select <code>Maven</code></strong> <img src="https://i.imgur.com/CvMvl2J.png" alt="new-maven"></p> 
         <ul> 
          <li>If your "Project SDK" states "&lt;None&gt;" as in the picture, you'll need to click "New", then find the installation path of the JDK you have installed.</li> 
         </ul> </li> 
        <li><p><strong>Now let's fill out what's required of a new maven project</strong> <img src="https://i.imgur.com/dCWkwTY.png" alt="maven-step2"></p> 
         <ul> 
          <li>In Maven, a "GroupId" is the base java package that you will be using. (This will make sense later in the tutorial)</li> 
          <li>The ArtifactId is simply the name of the project we are working on. In our case, this is a Selenium project, so we will be using the name <code>"selenium"</code></li> 
          <li>Leave the "Version" as-is</li> 
         </ul> </li> 
        <li><p>In the next window that pops up, you will be able to fill out the project location, and the project name. We will name this project <code>selenium-tutorial</code>. <img src="https://i.imgur.com/5Fjg561.png" alt="project-name"></p> </li> 
        <li><p>Click finish. <em>Upon startup, you may see a "Tip of the Day" window pop up. Close this.</em> <strong>At this point,</strong> you will see an XML file open. This XML file is the Maven pom (or Project Object Model). The pom is a file dedicated to managing dependencies, and other configurations that your project has, such as plugins, and test goals.</p> </li> 
        <li><p>With the Maven pom still open, we are ready to bring in the <a href="http://conductor.ddavison.io">Conductor framework</a>. The Conductor Framework is a wrapper around Selenium WebDriver that is extremely fast to get up and running with Selenium WebDriver, as well as very easy to learn and easy to use. <strong>In the pom XML file that is open,</strong> We are going to type the following code under <code>&lt;version&gt;...&lt;/version&gt;</code>.</p> <pre><code class="lang-markup">&lt;project...&gt;
...
&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;

&lt;!-- copy the source below --&gt;

&lt;dependencies&gt;
   &lt;dependency&gt;
       &lt;groupId&gt;io.ddavison&lt;/groupId&gt;
       &lt;artifactId&gt;conductor&lt;/artifactId&gt;
       &lt;version&gt;1.1&lt;/version&gt;
   &lt;/dependency&gt;
&lt;/dependencies&gt;
&lt;/project&gt;
</code></pre> <p><em>After typing this in, IntelliJ should display a dialog box that says "Maven projects need to be imported" **</em>Click <code>"Import Changes"</code>** This is because Maven detected that we added a dependency to our project. <img src="https://i.imgur.com/Htx7gUY.png" alt="maven-dependency"></p> </li> 
       </ol> 
       <p>You are now ready to start writing your test! »</p> 
       <hr> 
       <h2 id="writing-our-first-test">Writing our first test</h2> 
       <p>In our project structure, you will see that we have a folder hierarchy that looks like this:</p> 
       <pre><code>|selenium-tutorial/
|  .idea/
|  src/
|    main/
|        java/
|        resources
|    test/
|        java/
</code></pre>
       <p>You are looking at the standard project hierarchy for Maven.</p> 
       <p><code>src/main/java</code> is where we are going to put our libraries for our webapp, and <code>src/test/java</code> is where we are going to put our actual automated tests.</p> 
       <p><strong>Today, we will be automating the SeleniumHQ <a href="http://seleniumhq.org">home page</a>.</strong></p> 
       <p>First, let's prepare our project with the Conductor framework.</p> 
       <h3 id="preparation">Preparation</h3> 
       <p>In order for Selenium to work, you need WebDriver executables. The Conductor framework makes this simple, and allows you to simply put them into the project path.</p> 
       <p>We are going to start out with the ChromeDriver executable to power Google Chrome. <strong><a href="https://github.com/ddavison/conductor/wiki/WebDriver-Executables">See the Conductor documentation</a> to install the ChromeDriver binary.</strong></p> 
       <p>After you follow the instructions for your respective platform, you will see the executable within the <code>selenium-tutorial/</code> project folder.</p> 
       <p>Now that we have our project all set up, and our WebDriver executable in place, we are ready to take a look at what we are going to be testing today.</p> 
       <h3 id="the-test-cases">The Test Cases</h3> 
       <p>We will be testing some very basic things on SeleniumHQ.org. The official Selenium project website.</p> 
       <p>We will have two test cases that we will be using Selenium to automate.</p> 
       <blockquote> 
        <p><strong>Test Case #1</strong>: When I navigate to seleniumhq.org, a "Download Selenium" link appears on the page.</p> 
       </blockquote> 
       <p><img src="https://i.imgur.com/xJ4XMsC.png" alt="case1"></p> 
       <blockquote> 
        <p><strong>Test Case #2</strong>: On the SeleniumHQ Home page, I expect to see a <em>Projects</em>, <em>Download</em>, <em>Documentation</em>, <em>Support</em>, and <em>About</em> tab.</p> 
       </blockquote> 
       <p><img src="https://i.imgur.com/3BgIoOo.png" alt="case2"></p> 
       <p>Now, before we start writing our tests, let's flesh out our page libraries.</p> 
       <hr> 
       <h2 id="writing-a-library">Writing a library</h2> 
       <p>In order for Selenium to know what to interact with, a good practice that the Conductor framework fits well with, is to map the elements you need in your application inside of a Java class.</p> 
       <p>Since we are automating SeleniumHQ's home page, our libraries will consist of objects that can be found on SeleniumHQ.</p> 
       <p><em>(If you haven't yet, please review the <a href="#the-test-cases">Test Cases</a> so you know what we are testing)</em></p> 
       <p>A library can be defined simply as: <code>"A Java Class that maps objects on the page, so the tests can use them."</code></p> 
       <p><em>Why a library?</em> Imagine we have a hundred test cases. What happens when SeleniumHQ changes the elements around? For example, then change a <code>&lt;div&gt;</code> element to a <code>&lt;span&gt;</code> element, or even change an <code>id=</code> attribute. Now we will have to find and replace a hundred selectors to get the tests working again. A library keeps things organized, and maintainable in one place. Once you update the library, all tests will be updated as well.</p> 
       <ul> 
        <li>Before we actually write the library, however, we need a package to put it under. Let's right click <code>src/main/java</code>, and click <code>"New Package"</code>.</li> 
       </ul> 
       <p><img src="https://i.imgur.com/p5vYVWN.png" alt="new package"></p> 
       <ul> 
        <li><p>Name the package the same name as we did in the pom XML file (i.e. the GroupId(<code>com.mysite</code>) that we filled into maven earlier, appended by the ArtifactId(<code>selenium</code>)) <strong>Fill in <code>com.mysite.selenium</code> for the package name</strong> and click OK</p> </li> 
        <li><p>Right click the new package, and click <code>New-&gt;Java Class</code> and name this class <code>HomePage</code></p> 
         <ul> 
          <li>This class is called <code>HomePage</code> because it is going to map out the objects we need, from SeleniumHQ</li> 
         </ul> </li> 
       </ul> 
       <p><img src="https://i.imgur.com/HhmQ2es.png" alt="new javaclass"> </p> 
       <ul> 
        <li><strong>Let's map out the objects we need</strong>. If you recall our test cases, we are going to be needing to interact with all of the following elements:
         <ul> 
          <li>"Projects" tab - <em>because #2 says we need to validate the tab is there</em></li> 
          <li>"Download" tab - <em>because #2 says we need to validate the tab is there</em></li> 
          <li>"Documentation" tab - <em>because #2 says we need to validate the tab is there</em></li> 
          <li>"Support" tab - <em>because #2 says we need to validate the tab is there</em></li> 
          <li>"About" tab - <em>because #2 says we need to validate the tab is there</em></li> 
          <li>"Download Selenium" link - <em>because #1 says we need to validate that the download link is there</em></li> 
         </ul> </li> 
       </ul> 
       <p>Each of these elements is going to be mapped out in our library.</p> 
       <p><strong>HomePage.java</strong></p> 
       <pre><code class="lang-java">package com.mysite.selenium;

import org.openqa.selenium.By;

public class HomePage {
    // the tabs
    public static final String LOC_LNK_PROJECTSTAB = "li#menu_projects a[href$='projects/']";
    public static final String LOC_LNK_DOWNLOADTAB = "li#menu_download a[href$='download/']";
    public static final By LOC_LNK_DOCUMENTATIONTAB = By.xpath("//li[@id='menu_documentation']/a[contains(@href, 'docs/')]");
    public static final String LOC_LNK_SUPPORTTAB = "li#menu_support a[href$='support/']";
    public static final String LOC_LNK_ABOUTTAB = "li#menu_about a[href$='about/']";

    // download link
    public static final By LOC_LNK_DOWNLOADSELENIUM = By.linkText("Download Selenium");
}
</code></pre> 
       <p><strong>Let's disect this...</strong></p> 
       <p>We are adding the <code>public static final</code> modifiers to these fields because <em>one</em>, they will not and should not be changed during runtime. <em>two</em>, because they need to be public, and statically accessed using <code>HomePage.LOC_ELEMENT</code> in your tests.</p> 
       <p>The name, <code>LOC_LNK_PROJECTSTAB</code> is an easy moniker to figure out what you are selecting. The <code>LOC_</code> simply means that this is a locator (so we dont get confused if we add things later). The <code>LNK_</code> part, is based on the application of <a href="http://wikipedia.org/wiki/Hungarian_notation">hungarian notation</a>. Since the element we are going to find is a Link, it is <code>LNK_</code>. Respectively, if we are going to interact with an Input, it will be <code>LOC_TXT_</code> since it's a text box. <code>LOC_BTN_</code> if it's a button. It helps keep your libraries organized.</p> 
       <p>The values of these fields are CSS Selectors, combined with other Selenium selector strategies like <code>xpath</code> and <code>linkText</code>. The Conductor framework is designed to utilize CSS most because of its simplicity, and readability, but of course the Conductor framework will still work if you prefer other selector strategies. We got these selectors (like <code>li#menu_about a[href$='about/']</code>) by using Google Chrome's Developer Tools to find out how to uniquely select the element we need. We can Right click an element, and click "Inspect Element" and we can then see the HTML. Based on the HTML, we can create CSS selectors.</p> 
       <p><img src="https://i.imgur.com/ItfQpvq.png" alt="inspect element"></p> 
       <p><em><a href="http://ddavison.io/css/2014/02/18/effective-css-selectors.html">See more on writing CSS selectors for selenium</a></em>.</p> 
       <p><strong>Now that our library is prepared, let's write our tests...</strong></p> 
       <hr> 
       <h2 id="writing-the-tests">Writing the tests</h2> 
       <p><em>We will be using jUnit in this tutorial, which comes packaged with IntelliJ.</em></p> 
       <ol> 
        <li>Right click the <code>src/test/java</code> and click <code>New-&gt;Package</code></li> 
        <li><p>Type in <code>"com.mysite.selenium"</code> as we did in <a href="#writing-a-library">the library</a></p> </li> 
        <li><p>Right click the newly created package, and click <code>New-&gt;Java Class</code> and name this class <code>SeleniumHQTest</code></p> </li> 
        <li><p>Inside the newly created class, let's add one test method for each test case</p> </li> 
       </ol> 
       <pre><code class="lang-java">package com.mysite.selenium;

import org.junit.Test;

public class SeleniumHQTest {
    @Test
    public void testDownloadLinkExists() {

    }

    @Test
    public void testTabsExist() {

    }
}
</code></pre> 
       <p>Then let's configure our class to run against SeleniumHQ.org using the Chrome browser, and to extend <code>Locomotive</code>, the base test class from the Conductor framework.</p> 
       <pre><code class="lang-java">package com.mysite.selenium;

import io.ddavison.conductor.Browser;
import io.ddavison.conductor.Config;
import io.ddavison.conductor.Locomotive;
import org.junit.Test;

@Config(
        browser = Browser.CHROME,
        url     = "http://seleniumhq.org"
)
public class SeleniumHQTest extends Locomotive {
    @Test
    public void testDownloadLinkExists() {

    }

    @Test
    public void testTabsExist() {

    }
}
</code></pre> 
       <h3 id="test-case-1-validate-that-the-download-link-exists-">Test Case #1 - Validate that the download link exists.</h3> 
       <pre><code class="lang-java">    public void testDownloadLinkExists() {
        validatePresent(HomePage.LOC_LNK_DOWNLOADSELENIUM);
    }
</code></pre> 
       <p>Simple as that. By the time that this method starts, we will already be at the URL specified within <code>@Config</code> so we are ready to test.</p> 
       <p>Here, we are just validating that the <code>LOC_LNK_DOWNLOADSELENIUM</code> (The "Download Selenium" link that was put into the <code>HomePage</code> library) exists.</p> 
       <blockquote> 
        <p><strong>Right click the method <code>testDownloadLinkExists</code> and click <code>"Run testDownloadLinkExists()"</code></strong></p> 
       </blockquote> 
       <h3 id="test-case-2-validate-that-all-tabs-exist-">Test Case #2 - Validate that all tabs exist.</h3> 
       <pre><code class="lang-java">    public void testTabsExist() {
        validatePresent(HomePage.LOC_LNK_PROJECTSTAB)
        .validatePresent(HomePage.LOC_LNK_DOWNLOADTAB)
        .validatePresent(HomePage.LOC_LNK_DOCUMENTATIONTAB)
        .validatePresent(HomePage.LOC_LNK_SUPPORTTAB)
        .validatePresent(HomePage.LOC_LNK_ABOUTTAB)
        ;
    }
</code></pre> 
       <p>One of the beautiful things about the Conductor framework which makes it so easy to read and use, is the <a href="http://wikipedia.org/wiki/Fluent_interface">fluent interface</a>. when written like this, you are able to move lines around, comment them out, as well as read them like plain english.</p> 
       <blockquote> 
        <p><strong>Right click the method <code>testTabsExists</code> and click <code>"Run testTabsExists()"</code></strong> <br><br></p> 
       </blockquote> 
       <hr> 
       <h2 id="conclusion-next-steps">Conclusion / Next Steps</h2> 
       <p>This is the end of the tutorial, and I do hope this helped you see how Selenium can work using Java.</p> 
       <p>It should be noted that by no means are you required to use the Conductor framework in your Selenium future, we had used the Conductor framework in this tutorial to show you a good effective test writing strategy. I urge you to <a href="https://github.com/ddavison/conductor/blob/master/src/main/java/io/ddavison/conductor/Locomotive.java#L45">browse through the source</a> to see exactly how Conductor wraps Selenium to make it easier.</p> 
       <p>It also should be noted, that you are by no means restricted to IntelliJ IDEA Community Edition either.</p> 
       <p>Selenium allows you to automate your web browser, in many ways you see fit. Here is a list of things that you can and cannot do with Selenium</p> 
       <p>Selenium can...</p> 
       <ul> 
        <li>Fill in text boxes</li> 
        <li>Check checkboxes, radio buttons</li> 
        <li>Click buttons and links</li> 
        <li>Navigate to and from <code>&lt;iframe&gt;</code>'s</li> 
        <li>Navigate to and from new windows / tabs created from links</li> 
        <li>Interact with most elements just like a human would</li> 
       </ul> 
       <p>Selenium <strong>cannot</strong>...</p> 
       <ul> 
        <li>Interact with flash, PDF, or Java Applets</li> 
        <li>Cannot interact with any embedded object put in by either <code>&lt;object&gt;</code>, or <code>&lt;embed&gt;</code></li> 
       </ul> 
       <p>To give you a taste of what Conductor has to offer with Selenium, you can take a look through <a href="https://github.com/ddavison/conductor#actions">this page</a> to see what all you can do.</p> 
       <p>As an exercise using the framework we just set up, see what kind of things you can do on <a href="http://seleniumhq.org">http://seleniumhq.org</a> by creating new test methods in <code>SeleniumHQTest.java</code>.</p> 
       <hr> 
       <p><em>Author Information</em> / <em>Links</em>:</p> 
       <pre><code>Name: Daniel Davison
GitHub: http://github.com/ddavison
Conductor Framework: http://conductor.ddavison.io
Twitter: @sircapsalot
Website: http://ddavison.io

  Daniel is an avid pursuer of test automation,
  and the value that it can bring for companies.
  Daniel is on StackOverflow, and regulars the [selenium]
  tag, as well as contributes to the Selenium project in various ways.
</code></pre>
      </post> 
      <div class="share"> 
       <div class="pw-widget pw-size-large pw-counter-show" pw:twitter-via="airpair"> 
        <a class="pw-button-twitter"></a>
        <a class="pw-button-facebook"></a>
        <a class="pw-button-linkedin"></a>
        <a class="pw-button-googleplus"></a> 
        <a class="pw-button-post"></a> 
       </div> 
      </div> 
      <div class="rail1CTA"> 
      </div> 
     </article> 
     <div id="reviews" post-reviews reviews="[{&quot;_id&quot;:&quot;56f0f672cc7c1f1100adec68&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;KH&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/18001282?v=3&quot;,&quot;gh&quot;:&quot;Runner1968&quot;},&quot;val&quot;:5,&quot;said&quot;:&quot;Great introduction!&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;56fee2a6430e2b11006ef895&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;Vinay&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/18219566?v=3&quot;,&quot;gh&quot;:&quot;vinayiitkgp&quot;},&quot;val&quot;:4,&quot;said&quot;:&quot;Thoroughly enjoyed the tutorial and learnt a lot in a short period of time....Thanks!!&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;5500b0bea0a7a80c004763b9&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;egillespie&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/5572255?v=3&quot;,&quot;gh&quot;:&quot;egillespie&quot;},&quot;val&quot;:3,&quot;said&quot;:&quot;There's a lot here so I took two passes: a once-over and an at-length review.\n\nThe once-over reads really well but I would encourage you to add a brief overview at the top explaining what a reader should expect to get out of the tutorial. Currently the intro only describes what Selenium is.\n\nThe at-length review really worked best when I could follow along step-by-step and I think that's a pretty clear expectation. There are a few incomplete thoughts (e.g. \&quot;In order for Conductor (and Selenium for that matter,)\&quot; ... In order for Conductor to what?) and grammar nuances that would smooth out the tutorial. You could probably remove the anchors at the end of each section that link to the next section too. ;)\n\nOtherwise your article is fairly nutrient dense but not overall too difficult to digest.\n\n&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;5508751f6912810c007d63de&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;larskotthoff&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/579233?v=3&quot;,&quot;gh&quot;:&quot;larskotthoff&quot;},&quot;val&quot;:4,&quot;said&quot;:&quot;This is very detailed and thorough, but I found myself wondering what to do next at the end. It might be good to add a \&quot;Extensions\&quot; or \&quot;Other tests\&quot; section that briefly outlines what else you can do with Selenium. For getting started, the article is great, but it kind of leaves you on your own at the end. Oh and (this may be something more for the airpair staff) the screenshot is hard to read and doesn't become bigger when clicked. Maybe just describe the information in there in the text? It might be misleading for complete newcomers to show a screenshot that will almost certainly look different for them.&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;56198fc7cdb6b1110036880f&quot;,&quot;by&quot;:{&quot;pic&quot;:&quot;//0.gravatar.com/avatar/null&quot;},&quot;val&quot;:4,&quot;said&quot;:&quot;The instructions in the post are not always very specific. It took e a while to understand where to store the ChromeDriver, for example, or the link between last line of code and how to run the JUnit Test. Maybe I am a novice at this and hence a small struggle for me. \n\nThe good thing is that I was able to run the complete test in one go.&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;562e804340899311000ad62f&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;Sam Edwards&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/3466697?v=3&quot;,&quot;gh&quot;:&quot;Edman274&quot;},&quot;val&quot;:5,&quot;said&quot;:&quot;It exactly describes what needs to be done to have a working test, thoroughly. &quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;563a1c29bed84511003fe52d&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;Geir Lie&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/8605195?v=3&quot;,&quot;gh&quot;:&quot;geirvlie&quot;},&quot;val&quot;:4,&quot;said&quot;:&quot;Very instructional and although I needed a few seconds to sort out the ChromeDriver executable it was fine. Great work!!&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;568a56c90fd1dc11004d0e73&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;Bill Lennox&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/6418967?v=3&quot;,&quot;gh&quot;:&quot;Digitalbil&quot;},&quot;val&quot;:5,&quot;said&quot;:&quot;This is a good solid way to get a quick idea for easy automation of a browser. The setup is a bit more complex but well worth giving this a try. Coming from a different background of using visual studio with WatiN , I found this to be a neat and completely different perspective with what we do with WatiN but in some ways kind of the same. I would guess I would have to say that eating the same food everyday would get boring, so this was me trying Chinese instead of American food everyday. You might want to add something in your notes about the import stuff at the top of the classes, a new user would simply follow exactly what you did and then not understand why their stuff isn't working.. we want to encourage people so keeping the frustrating parts out of the experiment is really a super helpful way of doing that. &quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;568d8841fcd7601100675772&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;Brendan Tronconi&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/2722221?v=3&quot;,&quot;gh&quot;:&quot;betron&quot;},&quot;val&quot;:4,&quot;said&quot;:&quot;Thanks for this. After three days of searching around and trying to read through installation instructions, this was a very straightforward tutorial that I got through after a little bit of pain and retrying. \n\nThe first problem was \n\&quot;See the Conductor documentation to install the ChromeDriver binary.\&quot; \n\nThe script didn't work for me when trying to install on my Mac, but I got the file downloaded and in the right place manually. \n\nThe second problem was somehow missing the line: \nimport org.openqa.selenium.By;\n\nAfter reading the error messages and going back through I got a passed test. Thanks again for writing this. Will definitely pass it along to anyone looking for help.&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;569d202029e19c11000d1cbd&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;Chrs&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/16762631?v=3&quot;,&quot;gh&quot;:&quot;BigGulpsHuhWelp&quot;},&quot;val&quot;:4,&quot;said&quot;:&quot;Im sort of confused as to why the IDE isnt accepting my import statements for the conductor and packages...&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;569d767429e19c11000d1e2a&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;Nikos Katsarakis&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/7250446?v=3&quot;,&quot;gh&quot;:&quot;nkatsar&quot;},&quot;val&quot;:4,&quot;said&quot;:&quot;Nice tutorial, works fine by using Chrome. It would be great if there was some more information on how to test using other browsers, such as Firefox or even Internet Explorer.\n\nEven better would be a sample of running the same tests on multiple browsers, such a script would be great to test a website's cross-browser compatibility.&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;56aae6f922917711000bb1ab&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;Abir Khan&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/4990873?v=3&quot;,&quot;gh&quot;:&quot;ubir1&quot;},&quot;val&quot;:4,&quot;said&quot;:&quot;Example steps are almost clear.&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]},{&quot;_id&quot;:&quot;56b9da7a11c28d110001d75e&quot;,&quot;by&quot;:{&quot;name&quot;:&quot;Juanjo&quot;,&quot;pic&quot;:&quot;https://avatars.githubusercontent.com/u/8993924?v=3&quot;,&quot;gh&quot;:&quot;JuanjoRoig&quot;},&quot;val&quot;:3,&quot;said&quot;:&quot;Tutorial is quite good, but i can't test it because maven dependency to conductor is not working:\n\n<dependencies>\n   <dependency>\n       <groupId>io.ddavison</groupId>\n       <artifactId>conductor</artifactId>\n       <version>1.1</version>\n   </dependency>\n</dependencies>\n\n\n¿Can you help me?&quot;,&quot;votes&quot;:[],&quot;replies&quot;:[]}]" byid="522e3f7566a6f999a465f7b0"></div> 
     <footer class="postfooter "> 
      <h5>Tagged under</h5> 
      <ul class="posttags">
       <li><a href="/selenium" target="_self" title="selenium tutorials &amp; selenium guides">selenium</a></li>
       <li><a href="/selenium-webdriver" target="_self" title="selenium-webdriver tutorials &amp; selenium-webdriver guides">selenium-webdriver</a></li>
      </ul> 
      <div class="share-horizontal"> 
       <div class="pw-widget pw-counter-vertical" pw:twitter-via="airpair"> 
        <a class="pw-button-twitter pw-look-native"></a> 
        <a class="pw-button-googleplus pw-look-native"></a> 
        <a class="pw-button-facebook pw-look-native"></a> 
        <a class="pw-button-linkedin pw-look-native"></a> 
        <a class="pw-button-tumblr pw-look-native"></a> 
        <a class="pw-button-reddit pw-look-native"></a> 
        <a class="pw-button-email pw-look-native"></a> 
       </div> 
      </div> 
     </footer> 
     <div id="posts"> 
      <section id="allposts" class="similar"> 
       <h3 class="underline">Similar posts <a href="/software-experts" class="btn btn-sm btn-inverse" target="_self">All posts</a></h3> 
       <div class="similar nostars"> 
        <article class="posttile" itemscope itemtype="http://schema.org/BlogPosting" itemprop="blogPost"> 
         <a href="https://www.airpair.com/selenium/selenium-expert-daniel-davison" title="Web Automation Strategies by Selenium Expert Daniel Davison" target="_self" rel="bookmark"> 
          <header class="entry-header"> 
           <img class="entry-header-image" itemprop="image" src="https://gallery.mailchimp.com/707a79398ffed7972e1e87db6/images/AirPair___Kareem_Daniel__Selenium____YouTube_2.png" align="left"> 
           <div class="glass"></div> 
           <p> <span class="entry-categories"><em>selenium</em></span> Selenium expert Daniel Davison is an avid programmer coding in Perl, VB, C++, Ruby and Java with a decade of experience. Top answerer on Stack Overflow. </p> 
          </header> 
          <div class="entry-content" itemprop="text"> 
           <div class="stars"></div> 
           <h2 class="entry-title" itemprop="headline">Web Automation Strategies by Selenium Expert Daniel Davison</h2> 
           <span class="entry-author" itemprop="author" itemscope itemtype="http://schema.org/Person"> <span class="entry-author-name" itemprop="name">Daniel Davison</span> </span> 
          </div> </a> 
         <footer class="entry-footer"> 
          <img class="entry-author-img" itemprop="image" ng-src="https://avatars.githubusercontent.com/u/2972876?v=3?s=50"> 
         </footer> 
        </article> 
       </div> 
      </section> 
      <section id="allposts" class="byauthor"> 
       <h3 class="underline">Other posts Daniel Davison</h3> 
       <div class="similar nostars"> 
        <article class="posttile" itemscope itemtype="http://schema.org/BlogPosting" itemprop="blogPost"> 
         <a href="https://www.airpair.com/selenium/selenium-expert-daniel-davison" title="Web Automation Strategies by Selenium Expert Daniel Davison" target="_self" rel="bookmark"> 
          <header class="entry-header"> 
           <img class="entry-header-image" itemprop="image" src="https://gallery.mailchimp.com/707a79398ffed7972e1e87db6/images/AirPair___Kareem_Daniel__Selenium____YouTube_2.png" align="left"> 
           <div class="glass"></div> 
           <p></p>--}} 
          </header> 
          <div class="entry-content" itemprop="text"> 
           <h6></h6> 
           <div class="stars"></div> 
           <h2 class="entry-title" itemprop="headline">Web Automation Strategies by Selenium Expert Daniel Davison</h2> 
           <span class="entry-author" itemprop="author" itemscope itemtype="http://schema.org/Person"> <span class="entry-author-name" itemprop="name">Daniel Davison</span> </span> 
          </div> </a> 
         <footer class="entry-footer"> 
          <img class="entry-author-img" itemprop="image" ng-src="https://avatars.githubusercontent.com/u/2972876?v=3?s=50"> 
         </footer> 
        </article> 
       </div> 
      </section> 
     </div> 
    </div> 
   </main> 
  </div> 
  <script type="text/javascript" src="https://static.airpair.com/apcom/js/index-712b3af218.js"></script> 
  <script type="text/javascript">

  function bindTracking() {
    ga('send', 'pageview')
  }

  window.viewData = {
    session: {"authenticated":false,"id":"hQ-ojvUprzP0DoaW8_PCdMyP5Rb64LEg"}, 
    canonical: 'https://www.airpair.com/selenium/posts/selenium-tutorial-with-java', 
    post: {"_id":"54f245230701170c002d1339"}, 
  }

  </script> 
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  
    ga('create', 'UA-40569487-1', 'auto');
    ga('send', 'pageview');
  
  </script> 
  <script type="text/javascript">
    window.analytics = {};
    window.analytics.track = function(event, props) { console.log('off.track', event, props); }
  </script>   
 </body>
</html>