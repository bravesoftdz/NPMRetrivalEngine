<html>
 <head> 
  <title>Java Web Programming with Eclipse</title> 
  <link href="/turner/java_web_programming/styles.css" rel="stylesheet" type="text/css"> 
 </head> 
 <body> 
  <div class="page"> 
   <table> 
    <tbody>
     <tr style="vertical-align: top"> 
      <td> 
       <div style="font-size: small">
        Java&nbsp;Web&nbsp;Programming&nbsp;with&nbsp;Eclipse&nbsp;
        <a href="/turner/java_web_programming/contents/">contents</a>
       </div> </td> 
      <td width="100%"> 
       <div style="text-align: right; font-size: smaller">
        Last modified January 14, 2011 04:55 am
       </div> </td> 
     </tr> 
    </tbody>
   </table> 
   <div> 
    <p> <a href="../tomcat/"><img src="../back.png" alt="back"></a> <a href="../logging/"><img src="../next.png" alt="next"></a> </p> 
    <h1>Java Servlets</h1> 
    <h2>Objectives</h2> 
    <ul> 
     <li>Learn the organization of files for Java web applications</li> 
     <li>Learn how to create a Java project in Eclipse to develop a Web application</li> 
     <li>Learn how to write and run servlets</li> 
     <li>Learn how to deploy a web application in Tomcat</li> 
     <li>Learn how to attach source code for libraries</li> 
     <li>Learn how to turn off compiler warnings</li> 
     <li>Learn how to use the Organize Imports feature of Eclipse to resolve class names conveniently</li> 
     <!--
<li></li>
<li></li>
--> 
    </ul> 
    <h2>References</h2> 
    <ul> 
     <li><a href="http://java.sun.com/j2ee/1.4/docs/tutorial/doc/index.html">The J2EE 1.4 Tutorial</a> (See Chapter 11.) </li> 
     <li><a href="http://java.sun.com/j2ee/1.4/docs/api/">J2EE 1.4 API</a></li> 
     <li><a href="http://www.w3.org/TR/REC-html40/cover.html">HTML 4.01 Specification</a></li> 
     <li><a href="http://www.w3schools.com/html/default.asp">W3 Schools HTML Tutorial</a></li> 
     <!--
<li><a href=""></a></li>
--> 
    </ul> 
    <h2>Video</h2> 
    <ul> 
     <li><a href="http://www.youtube.com/watch?v=3FRD6eSNS8k">Java Web Programming with Eclipse: Servlets</a></li> 
    </ul> 
    <h2>Overview</h2> 
    <p> This section guides you through the creation of a Java servlet. The instructions in this section show you how to write the servlet in Eclipse and deploy it to the Tomcat web server. Actually, Tomcat is also classified as a <i>web container</i>, or <i>servlet container</i>, because servlets are placed inside a running instance of Tomcat. </p> 
    <p> The servlet that we create in this section simply generates a Web page that says <i>Hello, World!</i> This simple exercise will help you understand the basic structure of servlets, how to develop them in Eclipse, and how to deploy them in Tomcat. </p> 
    <p> If you have trouble using Eclipse commands in this chapter, you may want to go through the following two tutorials that are built into Eclipse and accessible through the Eclipse help menu. </p> 
    <ul> 
     <li>Workbench Basic Tutorial</li> 
     <li>Java Development Basic Tutorial</li> 
    </ul> 
    <h2>Project Creation</h2> 
    <p> We will develop the servlet inside an Eclipse project called <i>website</i>. The following steps show how to create a new Eclipse project that can be used to develop servlets. In these steps, we set the name of the project to <i>website</i>. We also associate jar files to the project that contain class definitions that implement the servlet API, which we need in order to develop servlets. These jar files are a part of the tomcat package; they provide the interface needed for application code to be called by the servlet container. </p> 
    <ol> 
     <li>Make sure you are in the Java Perspective.</li> 
     <li>Select <i>File</i> ... <i>New</i> ... <i>Project</i>.</li> 
     <li>Select <i>Java Project</i> and click the <i>Next</i> button.</li> 
     <li>Set the <i>Project</i> name to <b>website</b>.</li> 
     <li>Under <i>Project Layout</i>, make sure that the box next to <i>Create separate source and output folders</i> is checked.</li> 
     <li>Click the <i>Next</i> button.</li> 
     <li>Select the <i>Source</i> tab.</li> 
     <li>Set the <i>Default output folder</i> to <b>website/web/WEB-INF/classes</b>. The following screenshot shows the screen at this point. 
      <div>
       <img src="Source_tab_of_java_settings_window.jpg" alt="Source tab of java settings window">
      </div></li> 
     <li>Select the <i>Libraries</i> tab.</li> 
     <li>Click the <i>Add External JARs</i> button.</li> 
     <li>Navigate to <i>${TOMCAT_HOME}/lib</i>.</li> 
     <li>Select <i>servlet-api.jar</i> and click the <i>Open</i> button.</li> 
     <li>Click the <i>Add External JARs</i> button.</li> 
     <li>Select <i>jsp-api.jar</i>, and click the <i>Open</i> button. (Adding jsp-api.jar is optional at this point, but will be used later when developing custom JSP tags.) The following screenshot shows the screen at this point. 
      <div>
       <img src="Libraries_tab_of_java_settings_window.jpg" alt="Libraries tab of Java Settings window">
      </div></li> 
     <li>Click the <i>Finish</i> button to create the <i>website</i> project.</li> 
    </ol> 
    <h2>Attaching Source Code to Jar Files</h2> 
    <p> When we use Eclipse to generate code for us, it will obtain information from a class definition in a jar file. When it creates function signatures (function names, their return values and parameters), it uses the identifiers arg1, arg2 and arg3 for names of parameters in positions 1, 2 and 3 of the function parameter list. However, these names are not very descriptive of their function. To make the parameter names more meaningful, we attach the source code for the jar file so that Eclipse will use the parameter name as it appears in the source code. The other benefit from attaching source code is that comments in the source code become visible when you hover the mouse class names and method names. Execute the following instructions to attach the source code for the jar file that contains the servlet classes. </p> 
    <ol> 
     <li>Go to the Apache Tomcat website and download the source distribution for the version of Tomcat that you installed, but do not expand the zip file.</li> 
     <li>Locate the servlet-api.jar folder in the Package Explorer view of Eclipse.</li> 
     <li>Right click servlet-api.jar and select Properties from the pop-up menu.</li> 
     <li>Select <i>Java Source Attachment</i> and then the <i>Source</i> tab.</li> 
     <li>Select <i>External File</i> and navigate to and select the Tomcat source code zip file that you downloaded in the first step.</li> 
     <li>The following screen shot shows the result.</li> 
     <li>Click <i>OK</i> to complete the operation.</li> 
    </ol> 
    <div> 
     <img src="Java_source_attachment_window.jpg" alt="Java Source Attachment window"> 
    </div> 
    <h2>Deployment Descriptor</h2> 
    <p> Inside Eclipse we store files used for the development of the web application within a project folder. The files within the project are used for building the web application and are not necessarily used as a deployable unit of work. We will keep the folders and files that comprise a deployable instance of the web application in a folder called <i>web</i>, which is stored within the project. </p> 
    <p> Every Java Web application has a deployment descriptor that is located at <i>WEB-INF/web.xml</i>, relative to the root of the deployable folder. Because we store all deployable objects under a folder called web, this deployment descriptor will be located at <i>web/WEB-INF/web.xml</i>. </p> 
    <p> The web.xml file configures several aspects of the Web application, the most important information being the servlets and the url-patterns that lead to their invocation. </p> 
    <p> We will initially create a single servlet and have it invoked when the URL requested by the browser matches the url-pattern <i>/home</i>. To configure this, do the following. </p> 
    <ol> 
     <li>Expand the web folder.</li> 
     <li>Right-click on the WEB-INF folder and select New ... File.</li> 
     <li>Specify a name of <i>web.xml</i> and click the OK button.</li> 
     <li>In the text editor window that appears for web.xml, insert the contents of the following code listing, and save the file.</li> 
    </ol> 
    <p> If you can not edit the web.xml file in the window that Eclipse provides, it is because Eclipse is using the XML editor to provide access to the file. Close this window and right click on web.xml in the Project Explorer view and select Open With ... Text Editor. </p> 
    <h3>Deployment Descriptor web.xml</h3> 
    <pre>
&lt;?xml version="1.0"?&gt;
&lt;web-app
     xmlns="http://java.sun.com/xml/ns/j2ee"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
     version="2.4"&gt;
   &lt;servlet&gt;
      &lt;servlet-name&gt;home&lt;/servlet-name&gt;
      &lt;servlet-class&gt;website.web.HomeServlet&lt;/servlet-class&gt;
   &lt;/servlet&gt;
   &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;home&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/home&lt;/url-pattern&gt;
   &lt;/servlet-mapping&gt;
&lt;/web-app&gt;
</pre> 
    <p> Note: make sure there is no leading space in the web.xml file. In other words, the file should start with <code>&lt;?xml version="1.0"?&gt;</code> without any space before the left angle bracket. </p> 
    <p> The url-pattern <i>/home</i> is relative to the context path that identifies the <i>website</i> Web application. Although we haven't specified this yet, the context path will be <i>/website</i>. This means, for a browser to invoke the home servlet, it must request the following URL. </p> 
    <pre>
http://localhost:8080/website/home
</pre> 
    <p> The deployment descriptor can be used to tell tomcat many things. However, the most basic information provided in a deployment descriptor are the servlets and their associated url patterns. For each servlet in your web application, there should be a servlet element, such as the following. </p> 
    <pre>
   &lt;servlet&gt;
      &lt;servlet-name&gt;home&lt;/servlet-name&gt;
      &lt;servlet-class&gt;website.web.HomeServlet&lt;/servlet-class&gt;
   &lt;/servlet&gt;
</pre> 
    <p> The above servlet element tells the web container to create an instance of website.web.HomeServlet and call that instance by the name <i>home</i>. Although it is possible to create additional instances of HomeServlet, normally a single instance is made. </p> 
    <p> In addition to creating servlet instances, the web container should associate url patterns with these instances, so that when the web container receives an HTTP request from a web browser, it can determine which servlet to use to process the request. The following servlet-mapping element in our deployment descriptor tells tomcat that all incoming requests for <i>home</i> should be processed by the servlet instance with name <i>home</i>. </p> 
    <pre>
   &lt;servlet-mapping&gt;
      &lt;servlet-name&gt;home&lt;/servlet-name&gt;
      &lt;url-pattern&gt;/home&lt;/url-pattern&gt;
   &lt;/servlet-mapping&gt;
</pre> 
    <p> Multiple servlet-mapping elements can be used to associate any number of url patterns with a single servlet instance. </p> 
    <h2>Create Home Servlet</h2> 
    <p> The above deployment descriptor defines a servlet with name <i>home</i> to be an instance of the class <i>website.web.HomeServlet</i>. We will implement this servlet to return the string <i>Hello, World!</i>. To do this, do the following. </p> 
    <ol> 
     <li>Make sure you are in the Java perspective.</li> 
     <li>Expand the website project.</li> 
     <li>Right click on src, and select New - Class. </li> 
     <li>Set the Package to <i>website.web</i>.</li> 
     <li>Set the Name to HomeServlet.</li> 
     <li>Make the parent class <i>javax.servlet.http.HttpServlet</i>. You can do this in two ways. The first way is to simply replace <i>java.lang.Object</i> with <i>javax.servlet.http.HttpServlet</i>. The second way is to replace java.lang.Object with HttpServlet, then press Ctrl+space bar to get a list of replacement candidates. The following screen shot shows the result. 
      <div>
       <img src="Create_a_homeServlet_class.jpg" alt="Create a HomeServlet class">
      </div></li> 
     <li>Click the <i>Finish</i> button.</li> 
    </ol> 
    <p> Notice that there is a warning icon in the HomeServlet file next to the line starting with <i>public class HomeServlet</i>. If you hover over the warning icon with the mouse pointer, Eclipse will display a short description of the warning, which is that you have not declared a field called serialVersionUID. This warning is generated for every class the implements the Serializable interface, but that does not contain a serialVersionUID field. However, for our purposes, creating field serialVersionUID is not necessary. To turn off this warning, do the following. </p> 
    <ol> 
     <li>Select <i>Window</i> ... <i>Preferences</i>.</li> 
     <li>Select <i>Java</i> ... <i>Compiler</i> ... <i>Errors/Warnings</i>.</li> 
     <li>Select <i>Potential programming problems</i>.</li> 
     <li>Use the dropdown box to Ignore <i>Serializable class without serialVersionUID</i>. The following screen shot shows the result of carrying out steps 1 through 4.</li> 
     <div>
      <img src="Preferences_setting_window.jpg" alt="Preferences Setting window">
     </div> 
     <li>Click the OK button, and click the Yes button to do a full rebuild.</li> 
    </ol> 
    <p> Now, we override the <i>doGet()</i> method we inherit from the parent class. In the <i>HomeServlet.java</i> file, do the following. </p> 
    <ol> 
     <li>Select <i>Source ... Override/Implement</i> methods.</li> 
     <li>Select the <i>doGet()</i> method by checking the appropriate checkbox. The following screen shot shows the result of carrying out steps 1 through 2. </li> 
    </ol> 
    <div>
     <img src="Override_implement_methods_window.jpg" alt="Override/Implement Methods window">
    </div> 
    <ol> 
     <li>Click the OK button.</li> 
     <li>Replace the body of the <i>doGet</i> method with the following code.</li> 
    </ol> 
    <pre>
PrintWriter writer = resp.getWriter();
writer.println("<code>&lt;h1&gt;</code>Hello, World!<code>&lt;/h1&gt;</code>");
</pre> 
    <ol> 
     <li>The following screen shot shows the result of carrying out the previous step.</li> 
    </ol> 
    <div>
     <img src="HomeServlet.java_file.jpg" alt="HomeServlet.java file">
    </div> 
    <p> When you enter this code, observe the red error icon on the left-hand side of the window. You can read the error message by hovering over the icon with the mouse as shown in the following screen shot. </p> 
    <div>
     <img src="Error_message.jpg" alt="Error message">
    </div> 
    <p> The error message in this case is that certain classes "cannot be resolved to a type." You can either fully qualify the class names with their package names, as in <i>java.io.PrintWriter</i>, or you can identify the package location of the classes with an import statement. The standard practice is to use import statements. </p> 
    <p> Adding import statements are easy with Eclipse. To add the imports to HomeServlet, do the following. </p> 
    <pre>
Select Source ... Organize Imports.
</pre> 
    <p> Notice the asterisk (*) before the name <i>HomeServlet.java</i> in the window's tab. This indicates that changes to the file have not yet been saved. Save the file, and observe the disappearance of the asterisk. The following listing shows the <i>HomeServlet.java</i> file. </p> 
    <h3>HomeServlet.java</h3> 
    <pre>
package website.web;
 
import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
 
public class HomeServlet extends HttpServlet {
 
   protected void doGet(HttpServletRequest req, HttpServletResponse resp) 
   throws ServletException, IOException {
      PrintWriter writer = resp.getWriter();
      writer.println("&lt;h1&gt;Hello, World!&lt;/h1&gt;");
   }
}
</pre> 
    <h2>Web Application Deployment</h2> 
    <p> At this point our Web application can be deployed to the Tomcat server. There are several ways to deploy web applications in tomcat, which are detailed in the tomcat documentation. This book recommends that you deploy applications using the manager application that is installed with tomcat. To do this, do the following. (Make sure that you replace ${WORKSPACE} with the actual path to your Eclipse workspace.) </p> 
    <p> In Eclipse create a new file in the top level of your website project called <i>website.xml</i> with the following contents. (Convert the back slashes to forward slashes if you are working under Linux or MacOS. In all cases, the slash before <i>website</i> in the path attribute needs to be a forward slash.) </p> 
    <pre>
&lt;Context path="/website" docBase="${WORKSPACE}\website\web" /&gt;
</pre> 
    <p> Go to <a href="http://localhost:8080/manager/html/">the manager application</a> and locate the section called Deploy. Set the context path to <i>/website</i>. (Use a forward slash regardless of whether you are working in Windows, Linux or Mac.) Set the XML Configuration file URL to the following, where ${WORKSPACE} is the path to your Eclipse workspace. (Convert the back slashes to forward slashes if you are working under Linux or MacOS.) </p> 
    <pre>
${WORKSPACE}\website\website.xml
</pre> 
    <p> Click the Deploy button and then inspect the message section at the top of the manager application web page. If you see the following message, then you need to debug. </p> 
    <pre>
FAIL - Failed to deploy application at context path /website
</pre> 
    <p> If the application failed to start, you should check to make sure the path to website.xml is valid. You may also want to open the various tomcat log files and search for an error message that can give you a clue to solve the problem. </p> 
    <p> If the manager application reports successful deployment, the next step is to verify that the application is working correctly by going to <a href="http://localhost:8080/website/home">http://localhost:8080/website/home</a> in your browser. </p> 
    <p> If you make changes to Java code in a project, the changes will not be immediately deployed. To see the changes, you should reload the application through the manager application. If you make changes to the deployment descriptor (web.xml) in a project, reloading the application will not work. Instead, you need to stop and then start the application, which you can do in the manager application. </p> 
    <h2>Exercises</h2> 
    <h3>(1) Servlet Mapping Element</h3> 
    <p> Add an additional servlet mapping element to the deployment descriptor that associates the home servlet with the url pattern <i>index.html</i>. Test that the home servlet can be reached in the following 4 different ways. </p> 
    <ul> 
     <li><a href="http://localhost:8080/website/home">http://localhost:8080/website/home</a></li> 
     <li><a href="http://localhost:8080/website/index.html">http://localhost:8080/website/index.html</a></li> 
     <li><a href="http://localhost:8080/website/">http://localhost:8080/website/</a></li> 
     <li><a href="http://localhost:8080/website">http://localhost:8080/website</a></li> 
    </ul> 
    <h3>(2) Methods doGet and doPost</h3> 
    <p> Become familiar with the doGet and doPost methods by creating a servlet called TestServlet that accepts a string provided by the user and displays it back to the user. To do this, you need to create an HTML form with an input field and a submit button. This file should be located in the web folder in order to be visible to the browser. In the servlet, you need to call the getParameter method of the HTTPServletRequest object passed into doPost in order to get the value that the browser is sending. Make sure that the <i>method</i> attribute of the HTML form is <i>post</i>. The key that you pass into getParameter should match the name of the input field you used in the HTML form. </p> 
    <p> You can either add this servlet to the website application or to a newly created application. Creating a new application requires more work but will help you better understand the process of creating web applications. </p> 
    <h3>(3) Adding Two Numbers</h3> 
    <p> Similar to problem 2, create a new servlet called AddServlet and associated HTML file called add.html. The add.html file contains a form that accepts 2 numbers in input boxes and submits them to the AddServlet. The add servlet adds the numbers and presents the result to the user. </p> 
    <p> To solve this problem, you need to convert a string that you get from the form submission into a double (or an int if you prefer). For this purpose, you will need to use the <code>parseDouble</code> method of the Double class. </p> 
    <pre>
double doubleValue = Double.parseDouble(stringValue);
</pre> For integers, you whould use something like the following. 
    <pre>
int intValue = Integer.parseInt(stringValue);
</pre> 
    <p> <a href="../tomcat/"><img src="../back.png" alt="back"></a> <a href="../logging/"><img src="../next.png" alt="next"></a> </p> 
    <div style="text-align: center; margin-top: 3em">
     Copyright 2007-2009 David Turner and Jinseok Chae. All rights reserved.
    </div> 
   </div>   
  </div>
 </body>
</html>