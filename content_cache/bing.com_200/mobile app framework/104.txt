<!doctype html>
<html>
 <head> 
  <title>Rich JavaScript Applications – the Seven Frameworks (Throne of JS, 2012)</title> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta name="description" content="Steve Sanderson's Blog"> 
  <meta property="og:type" content="article"> 
  <meta property="og:site_name" content="Steve Sanderson's Blog"> 
  <meta property="og:title" content="Rich JavaScript Applications – the Seven Frameworks (Throne of JS, 2012)"> 
  <meta property="og:description" content="Steve Sanderson's Blog"> 
  <meta property="og:url" content="http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/"> 
  <meta property="og:image" content="http://blog.stevensanderson.com/images/"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:title" content="Rich JavaScript Applications – the Seven Frameworks (Throne of JS, 2012)"> 
  <meta name="twitter:description" content="Steve Sanderson's Blog"> 
  <meta name="twitter:url" content="http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/"> 
  <meta name="twitter:image" content="http://blog.stevensanderson.com/images/"> 
  <meta name="twitter:site" content="@http://twitter.com/StevenSanderson"> 
  <link rel="alternate" href="/feed/" type="application/rss+xml" title="Rich JavaScript Applications – the Seven Frameworks (Throne of JS, 2012)"> 
  <link rel="canonical" href="/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/"> 
  <link rel="stylesheet" href="/assets/normalize.css"> 
  <link rel="stylesheet" href="/assets/styles.css"> 
  <!--[if lt IE 9]>
      <script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]--> 
  <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-65756-6', 'auto');
        ga('send', 'pageview');
      </script> 
 </head> 
 <body> 
  <header> 
   <a href="http://twitter.com/StevenSanderson" class="toggle">Twitter</a> 
   <a href="/about.html" class="toggle">About</a> 
   <a href="/" class="toggle">Home</a> 
   <a href="/" title="Back to Homepage" class="logo">Steve Sanderson's Blog</a> 
  </header> 
  <section class="content"> 
   <article> 
    <header class="gradient-1"> 
     <div class="excerpt"> 
      <h1><a href="/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/" title="Rich JavaScript Applications – the Seven Frameworks (Throne of JS, 2012)">Rich JavaScript Applications – the Seven Frameworks (Throne of JS, 2012)</a></h1> 
      <p>A week ago was the <em><a href="http://throneofjs.com" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://throneofjs.com']);">Throne of JS</a></em> conference in Toronto, perhaps the most interesting and different conference I’ve been to for a while. Quoting its website: </p> 
      <span class="meta">Published <b>Aug 1, 2012</b> 
       <!--in <b>Javascript, SPA, Uncategorized</b>--></span> 
     </div> 
    </header> 
    <div class="body"> 
     <blockquote> 
      <p><em>It’s no longer good enough to build web apps around full page loads and then “progressively enhance” them to behave more dynamically. Building apps which are fast, responsive and modern require you to completely rethink your approach.</em></p> 
     </blockquote> 
     <p>The premise was to take the seven top JavaScript frameworks/libraries for single-page and rich JavaScript applications — <strong>AngularJS, Backbone, Batman, CanJS, Ember, Meteor, Knockout, Spine</strong> — get the creators of all of them in one location, and compare the technologies head to head.*</p> 
     <p><u>Disclaimer:</u> I was there to represent Knockout, so obviously I’m not neutral. In this post my focus is on what the creators said about the scope and philosophy of their technologies, and not so much on whether I agree or disagree.</p> 
     <p><small><em>* Yes, I know that’s eight frameworks, not seven. This part was never fully explained…</em></small></p> 
     <h2 id="tldr-executive-summary">TL;DR Executive Summary</h2> 
     <ul> 
      <li>For many web developers, it’s now taken for granted that such <strong>client-side frameworks are the way to build rich web apps</strong>. If you’re not using one, you’re either not building an application, or you’re just missing out.</li> 
      <li>There’s <strong>lots of consensus</strong> among the main frameworks about how to do it (Model-View-* architecture, declarative bindings, etc. — details below), so to some extent you get similar benefits whichever you choose.</li> 
      <li>Some major <strong>philosophical differences</strong> remain, especially the big split between frameworks and libraries. Your choice will deeply influence your architecture.</li> 
      <li>The conference itself was stylish and upbeat, with a lot of socialising and conversations across different technology groups. I’d like to see more like this.</li> 
     </ul> 
     <h2 id="technologies-agreement-and-disagreement">Technologies: Agreement and Disagreement</h2> 
     <p>As each SPA technology was presented, some fairly clear patterns of similarity and difference emerged.</p> 
     <h3 id="agreement-progressive-enhancement-isn8217t-for-building-real-apps">Agreement: Progressive enhancement isn’t for building real apps.</h3> 
     <p>All the technologies follow from the view that serious JavaScript applications require proper data models and ability to do client-side rendering, not just server rendering plus some Ajax and jQuery code.&lt;/strong&gt;</p> 
     <p>Quote from Jeremy Ashkenas, the Backbone creator: “<em>At this point, saying ‘single-page application’ is like saying ‘horseless carriage’</em>” (i.e., it’s not even a novelty any more).</p> 
     <h3 id="agreement-model-view-whatever">Agreement: Model-View-Whatever.</h3> 
     <p>All the technologies made use of model-view separation. Some specifically talked about MVC, some about MVVM, and some specifically refused to define the third piece (just saying it’s models, views, and some kind of application thing that makes them work together). The net result in each case was similar.</p> 
     <h3 id="agreement-data-binding-is-good">Agreement: Data binding is good.</h3> 
     <p>All except Backbone and Spine have a built-in notion of declarative data binding in their views (Backbone instead has a “bring your own view technology” design).</p> 
     <h3 id="agreement-ie-6-is-dead-already">Agreement: IE 6 is dead already.</h3> 
     <p>In a panel discussion, most framework creators said their IE support focus was limited to version 7+ (in fact, Ember and AngularJS only go for IE8, and Batman requires an ES5 shim to run on IE older than v9). This is the way of things to come: even <a href="http://blog.jquery.com/2012/06/28/jquery-core-version-1-9-and-beyond/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://blog.jquery.com']);">jQuery 2 is set to drop support for IE older than v9</a>.</p> 
     <p>The only stalwarts here appear to be Backbone and Knockout which support IE6+ (I don’t know about Backbone’s internals, but for KO this means transparently working around a lot of crazy edge-case IE6/7 rendering and eventing weirdnesses).</p> 
     <h3 id="agreement-licensing-and-source-control">Agreement: Licensing and source control.</h3> 
     <p>Every single one is MIT licensed and hosted on GitHub.</p> 
     <h3 id="disagreement-libraries-vs-frameworks">Disagreement: Libraries vs frameworks.</h3> 
     <p>This is the biggest split right now. You could group them as follows:</p> 
     <table class="gridtable" width="100%"> 
      <tbody>
       <tr> 
        <td> <strong>Libraries</strong> </td> 
        <td> <strong>Frameworks</strong> </td> 
       </tr> 
       <tr> 
        <td> <p> Backbone (9552) </p> <p> Knockout (2357) </p> <p> Spine (2017) </p> <p> CanJS (321) </p> </td> 
        <td> <p> Ember (3993) </p> <p> AngularJS (2925) </p> <p> Batman (958) </p> <p> Meteor (4172) — unusual, see later </p> </td> 
       </tr> 
      </tbody>
     </table> 
     <p><em>Numbers in brackets are a point-in-time snapshot of the number of GitHub watchers, as a crude indicator of relative influence.</em></p> 
     <p>What does this mean?</p> 
     <ul> 
      <li><strong>Libraries</strong> slot into your existing architecture and add specific functionality</li> 
      <li><strong>Frameworks</strong> give you an architecture (file structure, etc.) that you are meant to follow and, if you do, are intended to handle all common requirements</li> 
     </ul> 
     <p>By far the most passionate advocate of the framework model is Ember, whose creator Yehuda Katz is formerly of the Rails and SproutCore projects (similar philosophy). His argument was that anything less is just not ambitious enough and isn’t seriously advancing the state of the art. The counter-argument is that libraries are more focused, and hence can be easier to learn, adopt, customize, and help minimise project risk because your architecture isn’t so deeply tied to a specific external project. Based on my conversations, I’d say the audience was split and supported both sides of this debate.</p> 
     <p>Note that AngularJS is arguably somewhere in between library and framework: it doesn’t require a particular layout of files at development time (library-like), but at runtime it provides an “app lifecycle” that you fit your code into (framework-like). I’m listing it as a framework because that’s the terminology the AngularJS team prefers.</p> 
     <h3 id="disagreement-what8217s-flexible-what8217s-integrated">Disagreement: What’s flexible, what’s integrated.</h3> 
     <p>Each technology has different levels of prescriptiveness:</p> 
     <table class="gridtable"> 
      <tbody>
       <tr> 
        <td valign="top"> </td> 
        <td valign="top"> <p> <strong>Views</strong> </p> </td> 
        <td valign="top"> <p> <strong>URL routing</strong> </p> </td> 
        <td> <p> <strong>Data storage</strong> </p> </td> 
       </tr> 
       <tr> 
        <td> <p> <strong>AngularJS</strong> </p> </td> 
        <td> <p> Built-in DOM-based templates (mandatory) </p> </td> 
        <td> <p> Built-in (optional) </p> </td> 
        <td> <p> Built-in system (optional) </p> </td> 
       </tr> 
       <tr> 
        <td> <p> <strong>Backbone</strong> </p> </td> 
        <td> <p> Choose your own (most used handlebars.js, a string-based template library) </p> </td> 
        <td> <p> Built-in (optional) </p> </td> 
        <td> <p> Built-in (overridable) </p> </td> 
       </tr> 
       <tr> 
        <td> <p> <strong>Batman</strong> </p> </td> 
        <td> <p> Built-in DOM-based templates (mandatory) </p> </td> 
        <td> <p> Built-in (mandatory) </p> </td> 
        <td> <p> Built-in system (mandatory) </p> </td> 
       </tr> 
       <tr> 
        <td> <p> <strong>CanJS</strong> </p> </td> 
        <td> <p> Built-in string-based templates (mandatory) </p> </td> 
        <td> <p> Built in (optional) </p> </td> 
        <td> <p> Built in (optional) </p> </td> 
       </tr> 
       <tr> 
        <td> <p> <strong>Ember</strong> </p> </td> 
        <td> <p> Built-in string-based templates (mandatory) </p> </td> 
        <td> <p> Built-in (mandatory) </p> </td> 
        <td> <p> Built-in (overridable) </p> </td> 
       </tr> 
       <tr> 
        <td> <p> <strong>Knockout</strong> </p> </td> 
        <td> <p> Built-in DOM-based templates (optional, can do string-based too) </p> </td> 
        <td> <p> Choose your own (most use sammy.js or history.js) </p> </td> 
        <td> <p> Choose your own (e.g., knockout.mapping or just $.ajax) </p> </td> 
       </tr> 
       <tr> 
        <td> <p> <strong>Meteor</strong> </p> </td> 
        <td> <p> Built-in string-based templates (mandatory) </p> </td> 
        <td> <p> Built-in (mandatory?) </p> </td> 
        <td> <p> Built-in (Mongo, mandatory) </p> </td> 
       </tr> 
       <tr> 
        <td> <p> <strong>Spine</strong> </p> </td> 
        <td> <p> Choose your own string-based templates </p> </td> 
        <td> <p> Built-in (optional) </p> </td> 
        <td> <p> Built-in (optional?) </p> </td> 
       </tr> 
      </tbody>
     </table> 
     <p>As expected, whenever a library leaves a decision open, they argue it is better overall to guarantee composablity with arbitrary 3<sup>rd</sup>-party libraries. And the obvious counter-argument is that integration can be more seamless if built-in. Again, based on my conversations, the audience was split and opinions went in all directions — usually based on how much other technology stack an individual was wedded to.</p> 
     <p>Quote from Tom Dale of Ember: “<em>We do a lot of magic, but it’s <u>good magic</u>, which means it decomposes into sane primitives.</em>“</p> 
     <h3 id="disagreement-string-based-vs-dom-based-templates">Disagreement: String-based vs DOM-based templates</h3> 
     <p>(As shown in the above table.) For string-based templates, almost everyone used Handlebars.js as the template engine, which seems to dominate this space, though CanJS used EJS. Arguments in favour of string-based templates include “<em>it’s faster</em>” (debatable) and “<em>theoretically, the server can render them too</em>” (also debatable, as that’s only true if you can actually run all of your model code on the server, and nobody actually does that in practice).</p> 
     <p>DOM-based templates means doing control flow (each, if, etc.) purely via bindings in your actual markup and not relying on any external templating library. Argument include “<em>it’s faster</em>” (debatable) and “<em>the code is easier to read and write, because there’s no weird chasm between markup and templates, and it’s obvious how CSS will interact with it</em>“.</p> 
     <p>In my view, the strongest argument here came from the AngularJS guys who stated that in the near future, they expect DOM-based templating will be native in browsers, so we’ll best prepare ourselves for the future by adopting it now. AngularJS is from Google, so they are already working on this with Chromium and standards bodies.</p> 
     <h3 id="disagreement-levels-of-server-agnosticism">Disagreement: Levels of server-agnosticism</h3> 
     <p>Batman and Meteor express explicit demands on the server: Batman is designed for Rails, and Meteor is its own server. Most others have a goal of being indifferent to what’s on your server, but in practice the architecture, conventions, and some tooling in Ember leans towards Rails developers. Ember absolutely works on other server technologies too, though today it takes a little more manual setup.</p> 
     <h2 id="the-technologies-mdash-quick-overview">The technologies — quick overview</h2> 
     <p>Here’s a rundown of the basic details of each technology covered:</p> 
     <h3 id="backbone">Backbone</h3> 
     <ul> 
      <li><strong>Who</strong>: Jeremy Ashkenas and DocumentCloud</li> 
      <li><strong>What</strong>: 
       <ul> 
        <li>Model-View in JavaScript, MIT licensed</li> 
        <li>Most minimal of all the libraries — only one file, 800 lines of code!</li> 
        <li>Extremely tightly-scoped functionality — just provides REST-persistable models with simple routing and callbacks so you know when to render views (you supply your own view-rendering mechanism).</li> 
        <li>The best-known of them all, with the most production deployments on big-name sites (perhaps easy to adopt because it’s so minimal)</li> 
       </ul> </li> 
      <li><strong>Why</strong>: 
       <ul> 
        <li>It’s so small, you can read and understand all of the source before you use it.</li> 
        <li>No impact on your server architecture or file layout. Can work in a small section of your page — doesn’t need to control whole page.</li> 
        <li>Jeremy seems to exist in a kind of zen state of calm, reasonable opinions about everything. He was like the grown up, supervising all the arguing kids.</li> 
       </ul> </li> 
      <li><strong>Where</strong>: <a href="https://github.com/documentcloud/backbone/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">GitHub</a> and <a href="http://backbonejs.org/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://backbonejs.org']);">own site</a></li> 
      <li><strong>When</strong>: In production for nearly 2 years now</li> 
     </ul> 
     <h3 id="meteor">Meteor</h3> 
     <ul> 
      <li><strong>Who</strong>: The <a href="http://www.meteor.com/about/people" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.meteor.com']);">Meteor development group</a>, who <a href="http://www.prnewswire.com/news-releases/andreessen-horowitz-matrix-partners-invest-112-million-in-meteor-163687206.html" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.prnewswire.com']);">just raised $11.2 Million</a> so they can do this full-time</li> 
      <li><strong>What</strong>: 
       <ul> 
        <li>Crazy amazing framework from the future, barely reminiscent of anything you’ve ever seen (except perhaps <a href="http://derbyjs.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://derbyjs.com']);">Derby</a>)</li> 
        <li>Bridges a server-side runtime (on Node+Mongo) with a client-side one, so your code appears to run on both, including the database. WebSockets syncs between all client(s) and server.</li> 
        <li>Does “live deployments” every time you edit your code – client-side runtimes are updated on the fly without losing their state</li> 
        <li>Makes more sense if you <a href="http://www.meteor.com/screencast" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.meteor.com']);">watch the video</a></li> 
        <li>Like everyone I spoke to at the event, I really want this to succeed — web development needs something this radical to move forwards</li> 
       </ul> </li> 
      <li><strong>Why</strong>: You’ve had enough of conventional web development and now want to live on the bleeding edge.</li> 
      <li><strong>Where</strong>: <a href="https://github.com/meteor/meteor" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">GitHub</a> and <a href="http://www.meteor.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.meteor.com']);">own site</a></li> 
      <li><strong>When</strong>: It’s still early days; I don’t know if there are any production Meteor sites yet except built by the core team. They’re totally serious about doing this, though.</li> 
     </ul> 
     <h3 id="ember">Ember</h3> 
     <ul> 
      <li><strong>Who</strong>: Yehuda Katz (formerly of jQuery and Rails), the Ember team, and Yehuda’s company <a href="http://www.facebook.com/tildeinc" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.facebook.com']);">Tilde</a></li> 
      <li><strong>What</strong>: 
       <ul> 
        <li>Everything you need to build an “ambitious web application”, MIT license</li> 
        <li>Biggest framework of them all in both functionality and code size</li> 
        <li>Lots of thought has gone into how you can decompose your page into a hierarchy of controls, and how this ties in with a statemachine-powered hierarchical routing system</li> 
        <li>Very sophisticated data access library (Ember.Data) currently in development</li> 
        <li>Intended to control your whole page at runtime, so not suitable for use in small “islands of richness” on a wider page</li> 
        <li>Pretty heavily opinionated about files, URLs, etc., but everything is overridable if you know how</li> 
        <li>Design inspired by Rails and Cocoa</li> 
        <li>Tooling: They supply project templates for Rails (but you can use other server platforms if you write the code manually)</li> 
       </ul> </li> 
      <li><strong>Why</strong>: Common problems should have common solutions — Ember makes all the common solutions so you only have to think about what’s unique to your own application</li> 
      <li><strong>Where</strong>: <a href="https://github.com/emberjs/ember.js/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">GitHub</a> and <a href="http://emberjs.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://emberjs.com']);">own site</a></li> 
      <li><strong>When</strong>: Not yet at 1.0, but aiming for it soon. API will solidify then.</li> 
     </ul> 
     <h3 id="angularjs">AngularJS</h3> 
     <ul> 
      <li><strong>Who</strong>: Developed by Google; used internally by them and MIT licensed.</li> 
      <li><strong>What</strong>: 
       <ul> 
        <li>Model-View-Whatever in JavaScript, MIT licensed</li> 
        <li>DOM-based templating with observability, declarative bindings, and an almost-MVVM code style (they say Model-View-Whatever)</li> 
        <li>Basic URL routing and data persistence built in</li> 
        <li>Tooling: they ship a Chrome debugger plugin that lets you explore your models while debugging, and a plugin for the Jasmine testing framework.</li> 
       </ul> </li> 
      <li><strong>Why</strong>: 
       <ul> 
        <li>Conceptually, they say it’s a polyfill between what browsers can do today and what they will do natively in a few years (declarative binding and observability), so we should start coding this way right now</li> 
        <li>No impact on your server architecture or file layout. Can work in a small section of your page — doesn’t need to control whole page.</li> 
       </ul> </li> 
      <li><strong>Where</strong>: <a href="https://github.com/AngularJS/AngularJS.js" onclick="javascript:_gaq.push(['_trackEvent','download','http://github.com/AngularJS/AngularJS.js']);">GitHub</a> and <a href="http://AngularJSjs.org/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://AngularJSjs.org']);">own site</a></li> 
      <li><strong>When</strong>: In production now (has been at Google for a while)</li> 
     </ul> 
     <h3 id="knockout">Knockout</h3> 
     <ul> 
      <li><strong>Who</strong>: The Knockout team and community (currently three on the core team, including me)</li> 
      <li><strong>What</strong>: 
       <ul> 
        <li>Model-View-ViewModel (MVVM) in JavaScript, MIT licensed</li> 
        <li>Tightly focused on rich UIs: DOM-based templates with declarative bindings, and observable models with automatic dependency detection</li> 
        <li>Not opinionated about URL routing or data access — combines with arbitrary third-party libraries (e.g., Sammy.js for routing and plain ajax for storage)</li> 
        <li>Big focus on approachability, with extensive documentation and <a href="http://learn.knockoutjs.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://learn.knockoutjs.com']);">interactive examples</a></li> 
       </ul> </li> 
      <li><strong>Why</strong>: 
       <ul> 
        <li>Does one thing well (UI), right back to IE 6</li> 
        <li>No impact on your server architecture or file layout. Can work in a small section of your page — doesn’t need to control whole page.</li> 
       </ul> </li> 
      <li><strong>Where</strong>: <a href="http://github.com/SteveSanderson/knockout" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">GitHub</a> and <a href="http://knockoutjs.com" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://knockoutjs.com']);">own site</a></li> 
      <li><strong>When</strong>: In production for nearly 2 years now</li> 
     </ul> 
     <h3 id="spine">Spine</h3> 
     <ul> 
      <li><strong>Who</strong>: Alex MacCaw</li> 
      <li><strong>What</strong>: 
       <ul> 
        <li>MVC in JavaScript, MIT license</li> 
        <li>Worked example originally written for an O’Reilly book grew into an actual OSS project</li> 
        <li>Is a kind of modified clone of Backbone (hence the name)</li> 
       </ul> </li> 
      <li><strong>Why</strong>: You like Backbone, but want <a href="http://stackoverflow.com/questions/6530444/backbone-js-vs-spine-js" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://stackoverflow.com']);">a few things to be different</a>.</li> 
      <li><strong>Where</strong>: <a href="https://github.com/maccman/spine" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">GitHub</a> and <a href="http://spinejs.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://spinejs.com']);">own site</a></li> 
      <li><strong>When</strong>: It’s past v1.0.0 now</li> 
     </ul> 
     <h3 id="batman">Batman</h3> 
     <ul> 
      <li><strong>Who</strong>: the team at <a href="http://www.shopify.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://www.shopify.com']);">Shopify</a> (an eCommerce platform company)</li> 
      <li><strong>What</strong>: 
       <ul> 
        <li>MVC in JavaScript, almost exclusively for Rails+CoffeeScript developers, MIT licensed</li> 
        <li>Most opinionated of them all. You <em>must</em> follow their conventions (e.g., for file layout and URLs) or, as they say in their presentation,”<em>go use another framework</em>“</li> 
        <li>Full-stack framework with pretty rich models, views, and controllers and routing. And observability mechanism of course.</li> 
        <li>DOM-based templating.</li> 
       </ul> </li> 
      <li><strong>Why</strong>: If you use Rails and CoffeeScript, you’ll be right at home</li> 
      <li><strong>Where</strong>: <a href="https://github.com/Shopify/batman" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">GitHub</a> and <a href="http://batmanjs.org/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://batmanjs.org']);">own site</a></li> 
      <li><strong>When</strong>: Currently at 0.9. Aiming for 1.0 in coming months.</li> 
     </ul> 
     <h3 id="canjs">CanJS</h3> 
     <ul> 
      <li><strong>Who</strong>: the team at <a href="http://bitovi.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://bitovi.com']);">Bitovi</a> (a JavaScript consulting/training company)</li> 
      <li><strong>What</strong>: 
       <ul> 
        <li>MVC in JavaScript, MIT licensed</li> 
        <li>REST-persistable models, basic routing, string-based templating</li> 
        <li>Not widely known (I hadn’t heard of it before last week), though is actually a reboot of the older <a href="http://javascriptmvc.com/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://javascriptmvc.com']);">JavaScriptMVC</a> project</li> 
       </ul> </li> 
      <li><strong>Why:</strong> Aims to be the best of all worlds by delivering features similar to the above libraries while also being small</li> 
      <li><strong>Where:</strong> <a href="https://github.com/jupiterjs/canjs" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://github.com']);">GitHub</a> and <a href="http://canjs.us/" onclick="javascript:_gaq.push(['_trackEvent','outbound-article','http://canjs.us']);">own site</a></li> 
      <li><strong>When:</strong> Past 1.0 already</li> 
     </ul> 
     <h2 id="summary">Summary</h2> 
     <p>If you’re trying to make sense of which of these is a good starting point for your project, I’d suggest two questions areas to consider:</p> 
     <ul> 
      <li><strong>Scope</strong>. How much do you want a framework or library to do for you? Are you starting from blank and want a complete pre-prepared architecture to guide you from beginning to end? Or do you prefer to pick your own combinations of patterns and libraries? Either choice has value and is right for different projects and teams.</li> 
      <li><strong>Design aesthetic</strong>. Have you actually looked at code and tried building something small with each of your candidates? Do you <em>like doing it</em>? Don’t choose based on descriptions or feature lists alone: they’re relevant but limited. Ignoring your own subjective coding experience would be like picking a novel based on the number of chapters, or a spouse based on their resume/CV.</li> 
     </ul> 
     <p>Despite the differences, I’d argue there is one killer feature all the above technologies share: the idea of Model/View separation. This is a classic design pattern that predates the web itself by about 20 years. If you’re building even the most basic kind of web application UI, you’ll almost certainly benefit from applying this on the client.</p> 
    </div> 
    <footer> 
     <div class="pagination"> 
      <a href="/2012/07/11/node-js-development-with-webmatrix-2-express-part-3/" title="View Older Posts" class="button older">Older</a> 
      <a href="/2012/08/17/using-jshint-inside-visual-studio-the-basics/" title="View Newer Posts" class="button newer">Newer</a> 
     </div> 
     <div class="meta"> 
      <div class="author"> 
       <span class="title">Written by</span> 
       <h4>Steve Sanderson</h4> 
       <p>A web developer with a particular interest in building rich JavaScript apps. I work at Microsoft on the ASP.NET team. <a href="http://twitter.com/StevenSanderson">Follow me on Twitter</a>.</p> 
       <ul> 
        <li><a href="http://twitter.com/StevenSanderson" title="Twitter" class="icon twitter">Twitter</a></li> 
        <li><a href="http://blog.stevensanderson.com/feed/" title="RSS" class="icon rss">RSS</a></li> 
       </ul> 
      </div> 
      <div class="share"> 
       <span class="title">Share</span> 
       <ul> 
        <li><a href="https://twitter.com/home?status=Steve%20Sanderson's%20Blog%20http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/" title="Tweet" class="icon twitter">Tweet</a></li> 
        <li><a href="https://www.facebook.com/sharer/sharer.php?u=http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/" title="Like" class="icon facebook">Like</a></li> 
        <li><a href="https://plus.google.com/share?url=http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/" title="+1" class="icon google">+1</a></li> 
       </ul> 
      </div> 
     </div> 
     <div class="comments"> 
      <span class="title">Comments</span> 
      <div id="disqus_thread"></div> 
      <script type="text/javascript">
      var disqus_shortname = 'stevesandersonblog';
      (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
      })();
    </script> 
      <noscript>
        Please enable JavaScript to view the 
       <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a> 
      </noscript> 
     </div> 
    </footer> 
   </article> 
  </section> 
  <section class="teaser gradient-1"> 
   <div class="excerpt"> 
    <span class="title">READ NEXT</span> 
    <h1><a href="/2012/07/11/node-js-development-with-webmatrix-2-express-part-3/" title="Node.js development with WebMatrix 2 + Express (Part 3)">Node.js development with WebMatrix 2 + Express (Part 3)</a></h1> 
    <p>This is the <strong>third in a three-part series</strong> of videos about building a mobile web app with Node.js, Express, and WebMatrix: </p> 
    <span class="meta">Published <b>Jul 11, 2012</b> 
     <!--in <b>Javascript, Node.js</b>--></span> 
   </div> 
  </section> 
  <footer> 
   <div class="copyright"> 
    <b>(c) Steven Sanderson</b> | all rights reserved | 
    <a href="/feed/" title="Subscribe to Feed">RSS</a> 
   </div> 
  </footer>  
 </body>
</html>