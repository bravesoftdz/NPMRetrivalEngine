<!doctype html>
<!--[if lt IE 7]><html id="html" class="ie oldie ie6" lang="en"><![endif]-->
<!--[if IE 7]><html id="html" class="ie oldie ie7" lang="en"><![endif]-->
<!--[if IE 8]><html id="html" class="ie oldie ie8" lang="en"><![endif]-->
<!--[if IE 9]><html id="html" class="ie ie9" lang="en"><![endif]-->
<!--[if !IE]>-->
<html id="html" lang="en">
 <!--<![endif]-->
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
  <title>What To Expect From JavaScript In 2016 &nbsp;- Frameworks -&nbsp;</title> 
  <meta name="viewport" content="width=device-width,initial-scale=1"> 
  <link href="https://developer.telerik.com/wp-content/themes/tdnv2/style.css?1504121756" rel="stylesheet"> 
  <link rel="alternate" type="application/rss+xml" title="RSS 2.0" href="https://developer.telerik.com/feed/"> 
  <link rel="pingback" href="https://developer.telerik.com/xmlrpc.php"> 
  <link rel="shortcut icon" href="https://developer.telerik.com/wp-content/themes/tdnv2/assets/img/favicon.ico"> 
  <script async defer src="//survey.g.doubleclick.net/async_survey?site=l2o5nmhmescld5tf6mvsjxeb6m"></script> 
  <!-- This site is optimized with the Yoast SEO plugin v5.4.2 - https://yoast.com/wordpress/plugins/seo/ --> 
  <meta name="description" content="A look at what to expect in 2016 from JavaScript frameworks and libraries across the JavaScript spectrum by Burke Holland."> 
  <link rel="canonical" href="https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/"> 
  <meta property="og:locale" content="en_US"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="What To Expect From JavaScript In 2016 &nbsp;- Frameworks -&nbsp;"> 
  <meta property="og:description" content="A look at what to expect in 2016 from JavaScript frameworks and libraries across the JavaScript spectrum by Burke Holland."> 
  <meta property="og:url" content="https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/"> 
  <meta property="og:site_name" content="Telerik Developer Network"> 
  <meta property="article:section" content="Featured"> 
  <meta property="article:published_time" content="2016-01-11T07:02:08-04:00"> 
  <meta property="article:modified_time" content="2016-02-15T16:20:31-04:00"> 
  <meta property="og:updated_time" content="2016-02-15T16:20:31-04:00"> 
  <meta property="og:image" content="https://developer.telerik.com/wp-content/uploads/2016/01/javascript_2016_header.jpg"> 
  <meta property="og:image:secure_url" content="https://developer.telerik.com/wp-content/uploads/2016/01/javascript_2016_header.jpg"> 
  <meta property="og:image:width" content="1170"> 
  <meta property="og:image:height" content="297"> 
  <script type="application/ld+json">{"@context":"http:\/\/schema.org","@type":"WebSite","@id":"#website","url":"https:\/\/developer.telerik.com\/","name":"Telerik Developer Network","potentialAction":{"@type":"SearchAction","target":"https:\/\/developer.telerik.com\/?s={search_term_string}","query-input":"required name=search_term_string"}}</script> 
  <script type="application/ld+json">{"@context":"http:\/\/schema.org","@type":"Organization","url":"https:\/\/developer.telerik.com\/featured\/what-to-expect-from-javascript-in-2016-frameworks\/","sameAs":[],"@id":"#organization","name":"Telerik","logo":"http:\/\/developer.telerik.com\/wp-content\/uploads\/2016\/03\/telerik-small.png"}</script> 
  <!-- / Yoast SEO plugin. --> 
  <link rel="dns-prefetch" href="//kendo.cdn.telerik.com"> 
  <link rel="dns-prefetch" href="//s.w.org"> 
  <link rel="alternate" type="application/rss+xml" title="Telerik Developer Network » What To Expect From JavaScript In 2016  – Frameworks Comments Feed" href="https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/feed/"> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/developer.telerik.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.8.2"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,56826,8203,55356,56819),0,0),c=j.toDataURL(),b!==c&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55358,56794,8205,9794,65039),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55358,56794,8203,9794,65039),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="stylesheet" id="cm-ad-ouibounce-css" href="https://developer.telerik.com/wp-content/plugins/cm-ad-changer-server-pro/assets/css/ouibounce.css?ver=4.8.2" type="text/css" media="all"> 
  <link rel="stylesheet" id="kendo-common-css" href="https://kendo.cdn.telerik.com/2016.2.714/styles/kendo.common.min.css?ver=4.8.2" type="text/css" media="all"> 
  <link rel="stylesheet" id="kendo-default-css" href="https://kendo.cdn.telerik.com/2016.2.714/styles/kendo.default.min.css?ver=4.8.2" type="text/css" media="all"> 
  <link rel="stylesheet" id="prism-line-numbers-css" href="https://developer.telerik.com/wp-content/plugins/prism-wp/libs/prism/plugins/line-numbers/prism-line-numbers.css?ver=1.0.0" type="text/css" media="all"> 
  <link rel="stylesheet" id="minqueue-b4790aa0-575b2bde-css" href="https://developer.telerik.com/wp-content/uploads/minqueue-cache/minqueue-b4790aa0-575b2bde.css" type="text/css" media="all"> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-includes/js/jquery/jquery.js?ver=1.12.4"></script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var cmac_data = {"ajaxurl":"https:\/\/developer.telerik.com\/wp-admin\/admin-ajax.php","pluginurl":"https:\/\/developer.telerik.com\/wp-content\/plugins\/cm-ad-changer-server-pro"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-content/plugins/cm-ad-changer-server-pro/assets/js/front-scripts.js?ver=4.8.2"></script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-content/plugins/cm-ad-changer-server-pro/assets/js/jquery.tcycle.js?ver=4.8.2"></script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-content/plugins/cm-ad-changer-server-pro/assets/js/ouibounce.js?ver=4.8.2"></script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-content/plugins/cm-ad-changer-server-pro/assets/js/flyingBottom.js?ver=4.8.2"></script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-content/uploads/minqueue-cache/minqueue-ab0cd199-b6b64d22.js"></script> 
  <link rel="https://api.w.org/" href="https://developer.telerik.com/wp-json/"> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://developer.telerik.com/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://developer.telerik.com/wp-includes/wlwmanifest.xml"> 
  <link rel="shortlink" href="https://developer.telerik.com/?p=65921"> 
  <link rel="alternate" type="application/json+oembed" href="https://developer.telerik.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdeveloper.telerik.com%2Ffeatured%2Fwhat-to-expect-from-javascript-in-2016-frameworks%2F"> 
  <link rel="alternate" type="text/xml+oembed" href="https://developer.telerik.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fdeveloper.telerik.com%2Ffeatured%2Fwhat-to-expect-from-javascript-in-2016-frameworks%2F&amp;format=xml"> 
  <link rel="amphtml" href="https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/amp/">
 </head> 
 <body> 
  <!-- Google Tag Manager --> 
  <noscript> 
   <iframe src="//www.googletagmanager.com/ns.html?id=GTM-6X92" height="0" width="0" style="display: none; visibility: hidden"></iframe> 
  </noscript> 
  <script>(function (w, d, s, l, i) {
    w[l] = w[l] || [];
    w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' });
    var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
    j.async = true;
    j.src = '//www.googletagmanager.com/gtm.js?id=' + i + dl;
    f.parentNode.insertBefore(j, f);
})(window, document, 'script', 'dataLayer', 'GTM-6X92');</script> 
  <!-- End Google Tag Manager --> 
  <!-- Article Page Banner --> 
  <script async src="https://www.googletagservices.com/tag/js/gpt.js"></script> 
  <script>
  var googletag = googletag || {};
  googletag.cmd = googletag.cmd || [];
</script> 
  <script>
  googletag.cmd.push(function() {
    googletag.defineSlot('/22061388/tdn_topics', [210, 410], 'div-gpt-ad-1477482962874-0').setTargeting('tdn_topic', ['cloud', 'desktop', 'mobile-development', 'net', 'progress-labs', 'testing', 'web-development']).addService(googletag.pubads());
    googletag.pubads().enableSingleRequest();
    googletag.enableServices();
  });
</script> 
  <div class="container">
   <div class="row">
    <div class="col-3">
     <figure class="TK-Hat-Brand">
      <a href="https://www.progress.com" class="TK-PRGS-Logo">
       <svg xmlns="http://www.w3.org/2000/svg" width="94" height="40" viewbox="0 0 512 120">
        <path fill="#5ce500" d="M95.52 29.33v51a3.93 3.93 0 0 1-1.78 3.08l-1.67 1-12.72 7.35-8.59 5-1.78 1V42.6L21.23 15 43.91 1.93 46 .74a3.94 3.94 0 0 1 3.56 0L81 18.9l14.51 8.38v2.05zM58.36 48.72l-9.79-5.66-22.91-13.23a4 4 0 0 0-3.56 0L1.77 41.57 0 42.6l34.49 19.91v39.83l20.3-11.73 1.79-1a3.94 3.94 0 0 0 1.78-3.08V48.72zM0 82.43l23.86 13.78V68.63z"></path>
        <path fill="#4b4e52" d="M148.09 27.28h-26v70.48h11.55V70.1h14.57c15.77 0 24.45-7.7 24.45-21.69 0-6.35-2.4-21.12-24.55-21.12m12.78 21.31c0 7.95-4.12 11.19-14.24 11.19h-13v-22.1h14.57c8.56 0 12.71 3.57 12.71 10.91M207 46.41l.87.42-2 10.42-1.35-.42a11.32 11.32 0 0 0-3.34-.51c-10.79 0-11.67 8.59-11.67 19v22.44h-10.64V46h10v6.24c2.73-4.2 6-6.37 10.37-6.9a14.55 14.55 0 0 1 7.76 1.07M233.29 45c-8.42 0-15.16 3.2-19.5 9.27-4.56 6.37-5.23 13.85-5.23 17.74 0 16.36 9.7 26.92 24.73 26.92 18.26 0 24.73-14.71 24.73-27.3 0-7.25-2.15-13.82-6-18.51-4.41-5.31-10.87-8.12-18.7-8.12m0 44.38c-8.37 0-13.57-6.66-13.57-17.37s5.2-17.55 13.57-17.55S247 61.23 247 71.78c0 10.83-5.24 17.56-13.66 17.56m114.55-42.93l.87.42-2 10.42-1.35-.42a11.26 11.26 0 0 0-3.33-.51c-10.78 0-11.66 8.59-11.66 19v22.44h-10.66V46h10v6.24c2.73-4.2 6-6.37 10.37-6.9a14.54 14.54 0 0 1 7.73 1.06m38.4 34.76l-.2.57c-2.23 6.36-7.57 7.7-11.65 7.7-8.09 0-13.3-5.37-13.81-14.09h36.59l.13-1a31.26 31.26 0 0 0 .12-4.12v-.93C396.93 54.78 387.48 45 374 45c-7.9 0-14.37 3.1-18.73 9a30.85 30.85 0 0 0-5.54 18c0 16 9.95 26.74 24.74 26.74 11.45 0 19.33-5.82 22.2-16.38l.33-1.2h-10.7zM361 66.05c.9-7.17 5.81-11.73 12.79-11.73 5.33 0 11.64 3.1 12.52 11.73H361zm-60.7-15.71c-3.45-3.58-8.06-5.39-13.76-5.39-15.69 0-22.83 13.81-22.83 26.63 0 13.16 7.06 26.44 22.83 26.44a18.33 18.33 0 0 0 13.35-5.42c0 2.28-.1 4.45-.16 5.38-.58 8.54-4.68 12.51-12.91 12.51-4.47 0-9.61-1.59-10.6-6l-.22-1h-10.54l.17 1.41c1.1 9.12 9.11 14.79 20.9 14.79 10.34 0 17.7-3.9 21.28-11.26 1.73-3.55 2.6-8.72 2.6-15.37V46h-10.13v4.34zm-13.11 38.15c-3.74 0-12.43-1.69-12.43-17.37 0-10.3 4.87-16.7 12.71-16.7 6.06 0 12.52 4.39 12.52 16.7 0 10.87-4.79 17.37-12.81 17.37m159.67-6.31c0 8.23-6.83 16.53-22.09 16.53-13.5 0-21.53-5.85-22.61-16.45l-.15-1.1h10.52l.21.84c1.29 6.38 7.37 7.72 12.24 7.72 5.34 0 11-1.72 11-6.54 0-2.44-1.59-4.18-4.73-5.16-1.86-.55-4.15-1.2-6.56-1.87-4.16-1.16-8.47-2.38-11.12-3.29-6.56-2.35-10.33-6.93-10.33-12.56 0-10.43 10.16-15.11 20.22-15.11 13.46 0 20.42 5.07 21.3 15.49l.09 1.07H434.5l-.14-.82c-1-6-7-6.9-10.48-6.9-3 0-10 .53-10 5.5 0 2.25 1.93 3.91 5.89 5.06 1.18.33 2.94.78 5 1.31 4.22 1.09 9.48 2.46 12.13 3.37 6.59 2.32 9.93 6.67 9.93 13m49.39 0c0 8.23-6.83 16.53-22.09 16.53-13.5 0-21.53-5.85-22.61-16.45l-.11-1.09H462l.12.74c1.29 6.38 7.37 7.72 12.24 7.72 5.34 0 11-1.72 11-6.54 0-2.44-1.59-4.18-4.72-5.16-1.86-.55-4.15-1.2-6.57-1.87-4.16-1.16-8.46-2.38-11.11-3.29-6.57-2.35-10.33-6.93-10.33-12.56 0-10.43 10.16-15.11 20.22-15.11 13.46 0 20.42 5.07 21.29 15.49l.09 1.07H483.9l-.14-.82c-1-6-7-6.9-10.48-6.9-3 0-9.95.53-9.95 5.5 0 2.25 1.93 3.91 5.89 5.06 1.18.33 2.94.78 5 1.31 4.22 1.09 9.48 2.46 12.13 3.37 6.58 2.32 9.93 6.67 9.93 13m8.43-30.78a7.37 7.37 0 1 1 7.29-7.37 7.23 7.23 0 0 1-7.29 7.37m0-13.49a6.12 6.12 0 1 0 6 6.12 5.91 5.91 0 0 0-6-6.12m-.85 7.49v2.46h-2.17v-7.74h3.62a2.58 2.58 0 0 1 2.86 2.7 2.26 2.26 0 0 1-1.49 2.34l1.77 2.7H506l-1.49-2.46h-.68zm1.21-3.49h-1.21v1.73h1.21a.86.86 0 0 0 1-.85.88.88 0 0 0-1-.89"></path>
       </svg></a>
     </figure>
    </div>
   </div>
  </div> 
  <div class="Bar"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-3"> 
      <a href="https://developer.telerik.com/" class="Bar-Logo"><img src="https://developer.telerik.com/wp-content/themes/tdnv2/assets/img/TDN_logo_new.png"></a> 
      <div class="Bar-Nav"> 
       <div class="Bar-Dropdown icon-menu">
        <a href="#">Topics</a>
        <ul> 
         <li><a href="https://developer.telerik.com/category/topics/web-development/">Web</a></li> 
         <li><a href="https://developer.telerik.com/category/topics/mobile-development/">Mobile</a></li> 
         <li><a href="https://developer.telerik.com/category/topics/net/">.NET</a></li> 
         <li><a href="https://developer.telerik.com/category/topics/progress-labs/">Progress Labs</a></li> 
         <li><a href="https://developer.telerik.com/category/topics/cloud/">Cloud</a></li> 
         <li><a href="https://developer.telerik.com/category/topics/testing/">Testing</a></li> 
         <li><a href="https://developer.telerik.com/category/topics/desktop/">Desktop</a></li> 
        </ul>
       </div> 
       <a href="https://developer.telerik.com/community/" class="Bar-Link icon-community">Community</a> 
       <a href="/feed" class="Bar-Link icon-rss">RSS</a> 
       <a href="http://www.telerik.com" class="Bar-Link icon-external">Telerik.com</a> 
      </div> 
     </div> 
     <div class="col-1"> 
      <div class="Bar-Search"> 
       <form action="https://developer.telerik.com/" role="search" name="searchForm" method="get"> 
        <input name="s" type="text"> 
        <button type="submit" class="icon-search"></button> 
       </form> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div class="container u-tac u-pb1"> 
   <div class="u-oh u-pt2"> 
    <div class="Label Label--l Label--web-development">
     <a href="https://developer.telerik.com/category/topics/web-development/">Web</a>
    </div> 
   </div> 
   <h1 class="u-mb1">What To Expect From JavaScript In 2016 – Frameworks</h1> 
   <ul class="Meta u-mb1"> 
    <li><a href="https://developer.telerik.com/category/content-types/opinion/">Opinion</a> by <img src="https://developer.telerik.com/wp-content/uploads/userphoto/1.png" alt="Burke Holland" width="149" height="150" class="photo" style="margin-right:0px;">&nbsp; <a href="https://developer.telerik.com/author/burkeholland/" class="author">Burke Holland</a> </li> 
    <li class="icon-time">January 11, 2016</li> 
    <li class="icon-comment"><a href="https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/#disqus_thread">Comments</a></li> 
   </ul> 
  </div> 
  <div class="container"> 
   <div class="row Content"> 
    <div class="col-3 Content-main"> 
     <img width="1170" height="297" src="https://developer.telerik.com/wp-content/uploads/2016/01/javascript_2016_header.jpg" class="attachment-full size-full wp-post-image" alt="" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/javascript_2016_header.jpg 1170w, https://developer.telerik.com/wp-content/uploads/2016/01/javascript_2016_header-300x76.jpg 300w, https://developer.telerik.com/wp-content/uploads/2016/01/javascript_2016_header-768x195.jpg 768w, https://developer.telerik.com/wp-content/uploads/2016/01/javascript_2016_header-1024x260.jpg 1024w" sizes="(max-width: 1170px) 100vw, 1170px"> 
     <div class="Nav"> 
      <div class="container"> 
       <div class="row"> 
        <div class="col-3"> 
         <div class="Label Label--l Label--web-development">
          <a href="https://developer.telerik.com/category/topics/web-development/">Web</a>
         </div> 
         <h2>What To Expect From JavaScript In 2016 – Frameworks</h2> 
        </div> 
        <div class="col-1"> 
         <div class="SocialIcons"> 
          <a onclick="window.open('http://www.facebook.com/share.php?u=https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/','facebook','width=450,height=300,left='+(screen.availWidth/2-375)+',top='+(screen.availHeight/2-150)+'');return false;" href="http://www.facebook.com/share.php?u=https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/" title="What To Expect From JavaScript In 2016  – Frameworks" target="blank" class="icon-facebook"></a> 
          <a onclick="window.open('http://twitter.com/home?status=What+To+Expect+From+JavaScript+In+2016++%E2%80%93+Frameworks - https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/','twitter','width=450,height=300,left='+(screen.availWidth/2-375)+',top='+(screen.availHeight/2-150)+'');return false;" href="http://twitter.com/home?status=What+To+Expect+From+JavaScript+In+2016++%E2%80%93+Frameworks - https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/" title="What To Expect From JavaScript In 2016  – Frameworks" target="blank" class="icon-twitter"></a> 
          <a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/&amp;title=What+To+Expect+From+JavaScript+In+2016++%E2%80%93+Frameworks&amp;source=Telerik Developer Network" target="_blank" class="icon-linkedin"></a> 
          <a href="https://plus.google.com/share?url=https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/" onclick="window.open('https://plus.google.com/share?url=https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/','gplusshare','width=450,height=300,left='+(screen.availWidth/2-375)+',top='+(screen.availHeight/2-150)+'');return false;" class="icon-google"></a> 
         </div> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="Article"> 
      <div class="SocialIcons"> 
       <a onclick="window.open('http://www.facebook.com/share.php?u=https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/','facebook','width=450,height=300,left='+(screen.availWidth/2-375)+',top='+(screen.availHeight/2-150)+'');return false;" href="http://www.facebook.com/share.php?u=https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/" title="What To Expect From JavaScript In 2016  – Frameworks" target="blank" class="icon-facebook"></a> 
       <a onclick="window.open('http://twitter.com/home?status=What+To+Expect+From+JavaScript+In+2016++%E2%80%93+Frameworks - https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/','twitter','width=450,height=300,left='+(screen.availWidth/2-375)+',top='+(screen.availHeight/2-150)+'');return false;" href="http://twitter.com/home?status=What+To+Expect+From+JavaScript+In+2016++%E2%80%93+Frameworks - https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/" title="What To Expect From JavaScript In 2016  – Frameworks" target="blank" class="icon-twitter"></a> 
       <a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/&amp;title=What+To+Expect+From+JavaScript+In+2016++%E2%80%93+Frameworks&amp;source=Telerik Developer Network" target="_blank" class="icon-linkedin"></a> 
       <a href="https://plus.google.com/share?url=https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/" onclick="window.open('https://plus.google.com/share?url=https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/','gplusshare','width=450,height=300,left='+(screen.availWidth/2-375)+',top='+(screen.availHeight/2-150)+'');return false;" class="icon-google"></a> 
      </div> 
      <p><em>This is the first part of a 3 part series on what to expect from JavaScript in 2016 taken from our whitepaper, “<a href="http://www.telerik.com/campaigns/kendo-ui/javascript-future">The Future of JavaScript: 2016 and Beyond</a>“. <a href="http://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-language-enhancements/">Part 2</a> covers JavaScript language enhancements and <a href="http://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-beyond-the-browser/">part 3</a> covers JavaScript in environments beyond the browser. Today’s post focuses on the future of JavaScript frameworks.</em></p> 
      <p>JavaScript developers stand at the edge of a great divide. On one side are legacy browsers, differing standards, competing module systems and ES5, a language woefully inadequate for building modern applications. On the other side are evergreen standards compliant browsers and ES6, a monumental leap forward that brings JavaScript into the age of legitimate application development languages.</p> 
      <p>Many developers are already beginning to cross this chasm. The bridge over which they migrate is composed of JavaScript libraries and frameworks.</p> 
      <h2>Libraries and Frameworks</h2> 
      <p>Web developers have long relied on libraries and frameworks to supplement API’s and functionality that browsers either don’t provide, or don’t implement consistently. The rise in popularity of the JavaScript language has resulted in what is sometimes referred to as a “<a href="https://en.wikipedia.org/wiki/Cambrian_explosion">Cambrian Explosion</a>” of JavaScript libraries, frameworks and miscellaneous tools.</p> 
      <p>There has been some amount of debate surrounding this Cambrian Explosion in JavaScript. Is JavaScript really as popular as it appears to be? It turns out this is rather difficult to measure.</p> 
      <p><a href="http://spectrum.ieee.org/">IEEE Spectrum</a> ranks Java as the most popular language, with C as a close second. This measure is a combination of GitHub stats, CareerBuilder postings and their own IEEE Xplore library. This measurement appears to be more of a “market value” of language proficiency.</p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/ieee.jpg" alt="ieee" width="620" height="368" class="alignnone size-full wp-image-65941" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/ieee.jpg 620w, https://developer.telerik.com/wp-content/uploads/2016/01/ieee-300x178.jpg 300w" sizes="(max-width: 620px) 100vw, 620px"></p> 
      <p><a href="http://redmonk.com/">Redmonk</a>, which measures languages relative to one another on GitHub and StackOverflow ranks JavaScript just under Java as of June 2015.</p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/redmonk.jpg" alt="redmonk" width="520" height="369" class="alignnone size-full wp-image-65951" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/redmonk.jpg 520w, https://developer.telerik.com/wp-content/uploads/2016/01/redmonk-300x213.jpg 300w" sizes="(max-width: 520px) 100vw, 520px"></p> 
      <p><a href="http://githut.info/">GitHut</a>, a site which ranks over 2 million active repositories on GitHub, ranks JavaScript as the language with the most active repositories and total pushes. Detection for languages in repos is done by the <a href="https://github.com/github/linguist">GitHub Linguist library</a>.</p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/githut.jpg" alt="githut" width="800" height="490" class="alignnone size-full wp-image-65961" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/githut.jpg 800w, https://developer.telerik.com/wp-content/uploads/2016/01/githut-300x184.jpg 300w, https://developer.telerik.com/wp-content/uploads/2016/01/githut-768x470.jpg 768w" sizes="(max-width: 800px) 100vw, 800px"></p> 
      <p>It’s this last GitHub statistic that pulls the curtain on the state of JavaScript frameworks and libraries. The situation is at critical mass.</p> 
      <h2>Critical Mass</h2> 
      <p>JavaScript developers are deluged with a simply astonishing amount of third party software. Even more interesting is the fact that <em>almost all of these third party libraries are open source</em>. The net result is an environment in which it is extremely difficult for companies to pick a set of JavaScript tools on which to build the digital portion of their business.</p> 
      <p>There is also very strong sentiment behind each of the numerous frameworks. The rhetoric around which framework or library is the single “right way” to build applications makes it even more difficult to find the signal in the noise. Furthermore, creators of frameworks and those that adopt those frameworks are hesitant to honestly critique their choice.</p> 
      <blockquote> 
       <p>I think there’s a huge collective anxiety – a sort of sunk-cost fallacy – at play with web developers. We invest deeply in some tool, and so we’re eager to justify, to ourselves and others, why the decision to use one tool over was rational. I think this makes it hard to have a good dialog about how tools compare.</p> 
       <p>Brian Ford – Angular Team</p> 
      </blockquote> 
      <p>For this article, we asked several key developers in the community to help us gauge the future of some of the most popular third party libraries and frameworks available. Some of these developers are the very authors of these frameworks, and some are implementers with a lot of experience on real world projects.</p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/jquery_logo.jpg" alt="jquery_logo" width="400" height="98" class="alignnone size-full wp-image-65971" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/jquery_logo.jpg 400w, https://developer.telerik.com/wp-content/uploads/2016/01/jquery_logo-300x74.jpg 300w" sizes="(max-width: 400px) 100vw, 400px"></p> 
      <p>Whether or not you find yourself a fan of jQuery, it cannot be denied that jQuery is still the most popular and widely used JavaScript library in the world. At the time of this writing, it is the most starred repository on GitHub.</p> 
      <p>jQuery is now a decade old. In the last year, it has weathered some rather heavy criticism claiming that jQuery is no longer necessary.</p> 
      <p>In his recent article, “<a href="http://developer.telerik.com/featured/jquerys-relevancy-there-and-back-again/">jQuery’s Relevancy: There And Back Again</a>“, <a href="https://twitter.com/codylindley">Cody Lindley</a>, author of “JavaScript Enlightenment”, writes that “jQuery is as relevant today as it was when it was first written.” Lindley goes on to explain that this is not because developers need jQuery to perform basic DOM manipulation or XHR operations, but because jQuery provides a much cleaner API than native DOM code.</p> 
      <blockquote> 
       <p>jQuery is simply a helpful library that you can optionally use when scripting HTML elements. And the fact is, most developers choose to use it when scripting the DOM because the API helps them get more things done with less code.</p> 
       <p>Cody Lindley: <a href="http://developer.telerik.com/featured/jquerys-relevancy-there-and-back-again/">jQuery’s Relevancy – There and Back Again</a></p> 
      </blockquote> 
      <h3>jQuery Predictions For 2016</h3> 
      <p>The <a href="http://builtwith.com/">BuiltWith</a> site shows a steadily growing usage of jQuery. There is no indication that the use of jQuery is in decline. There is one jump in the top 1 million sites during the month of October, but the overall picture is of a steady rise. Over 70% of the top 10K sites still use jQuery.</p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/built-with.jpg" alt="built-with" width="800" height="431" class="alignnone size-full wp-image-65981" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/built-with.jpg 800w, https://developer.telerik.com/wp-content/uploads/2016/01/built-with-300x162.jpg 300w, https://developer.telerik.com/wp-content/uploads/2016/01/built-with-768x414.jpg 768w" sizes="(max-width: 800px) 100vw, 800px"></p> 
      <p>By all indications, jQuery usage will continue to rise during 2016. Evidence to suggest otherwise is anecdotal at best.</p> 
      <p>The level of hype around jQuery will continue to die, but the actual utility of the library will remain intact. Even newer frameworks and libraries offer some level of DOM abstraction. For instance, Angular 1.x uses jqLite, which is essentially the DOM selection and manipulation subset of jQuery. The API is almost identical to the actual jQuery library.</p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/react_logo.jpg" alt="react_logo" width="400" height="131" class="alignnone size-full wp-image-65991" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/react_logo.jpg 400w, https://developer.telerik.com/wp-content/uploads/2016/01/react_logo-300x98.jpg 300w" sizes="(max-width: 400px) 100vw, 400px"></p> 
      <p>We would be remiss if we started our discussion of popular JavaScript libraries and we didn’t open with ReactJS. The hype that React has garnered in just the past 12 months is nothing short of astounding. Add to this the list of big companies that are using React, such as Netflix, and it cannot be denied that React has captured the hearts and minds of many developers.</p> 
      <p>ReactJS is a far simpler library than its larger brothers and sisters such as Angular or Ember. However, it also does far less.</p> 
      <p>React is meant to be the just the V in any MV* implementation. That means that React is primarily concerned with how visual components are built and rendered, and doesn’t deal with the flow of data or the actual physical structure of the application. In order to achieve that, a full framework such as Flux or Redux must be added to the React equation.</p> 
      <p>The main features of React are the virtual DOM, and the way that it treats every UI component as just that – a component. However, the appeal to developers is the number of large, high load applications that are already running on React. These would be applications like Facebook and Instagram. The appeal then becomes, “If it’s good enough for Facebook, it should be good enough for my project too.”</p> 
      <h3>React Predictions For 2016</h3> 
      <p>Expect the adoption of React to remain strong among large consumer applications. As developer Elijah Manor pointed out, React was picked for the Dave Ramsey Every Dollar project based on its existing use in large, well known applications.</p> 
      <blockquote> 
       <p>One compelling reason, and the reason we started using [React], is that we were launching a new product called <a href="https://www.everydollar.com/">EveryDollar</a>. We were expecting a lot of load initially […]. We wanted something that would scale well. React was really new, but it came out by Facebook and Instagram, and obviously those are two applications that scale really well.</p> 
       <p>Elijah Manor – <a href="http://polymorphicpodcast.com/shows/react">Polymorphic Podcast</a></p> 
      </blockquote> 
      <p>Developers can expect to see continued controversy around React’s model of mixing markup with JavaScript, which will probably reach a peak point during 2016. While some developers like that the logic and markup for a component is all contained in the same place, many have pointed out that it violates separation of concerns, which has long been a fundamental tenet of programming in general.</p> 
      <blockquote> 
       <p>I see a willingness of many frameworks or libraries to assist developers in abandoning the authoring of SOLID code. Decades of learning should be taken seriously into account when you create a framework. React is again an example of this. We’ve learned hard lessons about not mixing JavaScript into our HTML. So, why now the eagerness to embrace mixing HTML into our JavaScript?</p> 
       <p>Rob Eisenberg – Creator of Aurelia</p> 
      </blockquote> 
      <p>2016 will also be the year of commercial React components. While <a href="http://react-components.com/">the React ecosystem is quite large</a>, it is fragmented and is quickly going the way of jQuery plugins. Developers will begin to look for comprehensive solutions backed by a partner.</p> 
      <p>Enterprises will continue to watch React from a distance in 2016. The fact that React is such a small part of the overall application solution leaves developers to stitch together data access, routing and all of the other components needed for a full application stack. This will keep larger more conservative shops from adopting React, in light of the lack of a complete story out of the box.</p> 
      <p>Developers should make it a point to learn React in 2016. It’s likely that the component model React has introduced will begin to bleed into other libraries and frameworks.</p> 
      <p><em>Note: The React team did not return a request for input on this article.</em></p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/angular_logo.jpg" alt="angular_logo" width="400" height="103" class="alignnone size-full wp-image-66001" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/angular_logo.jpg 400w, https://developer.telerik.com/wp-content/uploads/2016/01/angular_logo-300x77.jpg 300w" sizes="(max-width: 400px) 100vw, 400px"></p> 
      <p>The rapid rise of Angular during 2014 was remarkable to watch because it was one of the rare times that the enterprise sector has so completely adopted an open source library. Angular seemed to answer so many outstanding questions for developers coming from more structured languages, such as Java or C#.</p> 
      <p>Angular has received some amount of criticism for its documentation and performance. Some feel that Angular is <a href="http://eldar.djafarov.com/2014/04/angular-is-evil-overengineering/">over-engineered</a> and too complicated when compared with other frameworks. However, that has not stopped its adoption and legions of adoring fans.</p> 
      <p>The Angular ecosystem also grew drastically. Currently, there are 132,639 questions on StackOverflow that are tagged with Angular. Compare that with 6,969 for ReactJS, and 19,031 for Backbone. There are several commercial UI libraries for Angular, including <a href="http://www.telerik.com/kendo-ui">Kendo UI from Telerik</a>.</p> 
      <h3>Angular Predictions For 2016</h3> 
      <p>With the recent announcement the <a href="http://angularjs.blogspot.com/2015/12/angular-2-beta.html">Angular 2 beta release</a>, developers can safely expect to see the full release of Angular 2 in the first quarter of 2016. Brian Ford from the Angular team explained the intentions behind Angular 2, and what was accomplished in 2015.</p> 
      <blockquote> 
       <p>Our main motivation for Angular 2 is to do the things in Angular 1 that were impossible without significant breaking changes in Angular 1 apps. Mostly, we wanted to improve speed and robustness. We spent most of 2015 getting the core concepts in Angular 2 right. We took everything we learned from Angular 1, and from other open source projects in the same space (React, Ember, etc.). We’re using a benchmark-driven approach. We’re already as much as 10x faster than AngularJS 1, and we’re only improving.</p> 
       <p>Brian Ford – Angular Team</p> 
      </blockquote> 
      <p>The Angular documentation and tooling will also improve significantly in 2015. The Angular team will spend a non-trivial amount of time on helping developers migrate from Angular 1 to Angular 2. “If you try to get started with Angular 2, you’ll probably notice it has a lot of rough edges. We’re working hard to make the experience as productive and enjoyable as possible.” says Ford, “a huge part of that [improving tooling, documentation and ecosystem] is going to be making migration a good experience, which will involve writing guides, building tools, and making improvements to AngularJS 1.x to support migration.”</p> 
      <p>It’s unlikely that swaths developers will abandon Angular 1 for 2 in 2016, even if a smooth migration path is forged. Angular 1 will have a long tail, especially in the enterprise, where we will likely continue to see Angular 1 continue to thrive in 2016.</p> 
      <p><em>Special thanks to</em> <a href="https://twitter.com/briantford">Brian Ford</a> <em>from the Angular team for his input on this article.</em></p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/aurelia_logo.jpg" alt="aurelia_logo" width="400" height="114" class="alignnone size-full wp-image-66011" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/aurelia_logo.jpg 400w, https://developer.telerik.com/wp-content/uploads/2016/01/aurelia_logo-300x86.jpg 300w" sizes="(max-width: 400px) 100vw, 400px"></p> 
      <p>Rob Eisenberg made internet headlines in April of 2014 when he announced plans to join the Angular core team, with the intention of merging Durandal into Angular 2. He made headlines again in November when he announced that he would be leaving the Angular team to work on a JavaScript framework of his own, called Aurelia.</p> 
      <p>Aurelia tries to embrace existing/emerging standards to provide a full application framework. It relies heavily on ES6, a standards-based module loader and a component model that is compatible with the web components standard.</p> 
      <blockquote> 
       <p>Rather than invent non-standard tech, or even buck against the web itself like some libraries do, we’ve chosen to embrace the web platform itself and to help developers use it to build future-compatible apps.</p> 
       <p>Rob Eisenberg – Creator of Aurelia</p> 
      </blockquote> 
      <p>The most interesting thing about Aurelia, is that it’s possible to build applications using mainly ES6 classes, and not referencing the Aurelia framework at all. This goes a long way to make sure that applications are “future proof”. When the next emerging standard arrives, or a different framework is used in the future, code written in Aurelia can be directly ported since it is primarily just ES6 classes.</p> 
      <h3>Aurelia Predications For 2016</h3> 
      <p>Developers will begin to adopt ES6 in droves starting in 2016. This will cause Aurelia to gain significant momentum, specifically in the .NET community and developers who are familiar with Eisenberg’s previous work, such as Caliburn.Micro.</p> 
      <p>Aurelia has aggressive plans to be far more than a single-page app framework. “We’ve always seen Aurelia as a platform and ecosystem for building rich interactive applications on every device. In 2016, you’ll see the next phase of that vision realized as we move beyond Aurelia’s v1 release and on to other things we’re planning.” said Eisenberg. This may mean that Aurelia has plans to provide a <a href="http://developer.telerik.com/featured/defining-a-new-breed-of-cross-platform-mobile-apps/">JavaScript Native</a> approach for mobile apps, similar to <a href="http://www.nativescript.org/">NativeScript</a> and React Native.</p> 
      <p>More large enterprises will adopt Aurelia based on the fact that it is a supported product. So far, larger entities whose core business proposition is not technology have been slow to adopt JavaScript frameworks since they are, for the most part, supported by the community. Aurelia’s model of having a core team of developers and offering support will cause many enterprises to choose it in favor of alternatives, specifically for the business partnership that Aurelia offers.</p> 
      <p><em>Special thanks to</em> <a href="https://twitter.com/eisenbergeffect">Rob Eisenberg</a> <em>from the Aurelia team for his input on this article.</em></p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/kendoui_logo.jpg" alt="kendoui_logo" width="400" height="183" class="alignnone size-full wp-image-66021" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/kendoui_logo.jpg 400w, https://developer.telerik.com/wp-content/uploads/2016/01/kendoui_logo-300x137.jpg 300w" sizes="(max-width: 400px) 100vw, 400px"></p> 
      <p>Kendo UI was launched in November of 2011, strictly as a set of jQuery based user interface components. At the time, developers were struggling with drastically different browser versions and feature support, as well as a wilderness of jQuery plugins that made it hard to assemble a cohesive application. Kendo UI was built on the premise that a developer could leverage a single set of UI components that would be guaranteed to work across all browsers, all the way back to IE 7.</p> 
      <p>While Kendo UI started as a UI library, it grew to include binding, routing, views, models and everything else developers needed for a full application solution. Despite offering those capabilities, developers continued to gravitate towards community standard frameworks, such as Angular, Ember and Durandal. However, they still wanted to the robust widgets that Kendo UI offered.</p> 
      <p>Today Kendo UI is the largest open source jQuery-based UI library available. It is also a very successful commercial library, specifically in the areas of <a href="http://www.telerik.com/kendo-ui/grid">data grids</a>, schedulers, data visualization and document processing.</p> 
      <h3>Kendo UI Predictions For 2016</h3> 
      <p>Kendo UI will begin to decouple itself from its own binding framework in 2016 to provide better integration with Angular, React, Ember, Aurelia and any other framework that developers prefer to use. Kendo UI will focus on being a set of UI components, and offer abstractions for the various larger frameworks so that it can be plugged in anywhere.</p> 
      <blockquote> 
       <p>There are too many frameworks and not enough libraries. We need reusable, functional blocks that play well together.</p> 
       <p>Tsvetomir Tsonev – Kendo UI Team Lead</p> 
      </blockquote> 
      <p>Kendo UI will continue to invest heavily into complex UI widgets, such as the <a href="http://www.telerik.com/kendo-ui/grid">Grid</a>, PivotGrid, and Spreadsheets widgets. This will entail adding new features and continuing to refine these components. Also look for Kendo UI to ship additional widgets, such as an Interactive Timeline.</p> 
      <p>Kendo UI will also deliver more sample applications for other noteable frameworks, such as Angular, Angular 2 and React.</p> 
      <p><em>Special thanks to</em> <a href="https://twitter.com/t_tsonev?lang=en">Tsvetomir Tsonev</a> <em>from the Kendo UI team for his input on this article.</em></p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/ember_logo.jpg" alt="ember_logo" width="300" height="285" class="alignnone size-full wp-image-66031"></p> 
      <p>Ember has long been a staple of the JavaScript framework ecosystem. Grown from the remnants of <a href="http://sproutcore.com/">SproutCore</a>, it is an industry standard framework with many notable implementations. Although popular sites such as Discourse, Groupon, Vine and even the Apple Music desktop application use Ember, it does not get the same amount of attention as frameworks such as React. This may be due in part to its age.</p> 
      <p>Ember also places a premium on future web standards. It has historically been an early adopter of many of the standards in future versions of JavaScript, such as promises. In addition, one of Ember’s creators, Yehuda Katz, is on the TC39 committee, which is responsible for future versions of JavaScript.</p> 
      <p>Ember also tries to help developers write better code. This is done via the use of a rigid and opinionated framework which seeks to guide developers into best practices, so that they fall into the “pit of success”.</p> 
      <h3>Ember Predictions For 2016</h3> 
      <p>Ember will continue to be a “sleeper” framework. While it won’t be getting near as much air time as its React and Angular peers, it will be the choice for many large applications that need to service users at a massive scale. Look for other large sites to choose Ember for their next releases.</p> 
      <p>Ember will serve as the diametric comparison for React in terms of separating logic from markup. More and more developers will begin to draw this comparison in their own minds before deciding if they want to blend all of their component logic together as React prescribes, or separate it out as much as possible the way Ember dictates.</p> 
      <p><em>Note: The Ember team did not respond to a request for input on this article.</em></p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/meteor_logo.jpg" alt="meteor_logo" width="400" height="95" class="alignnone size-full wp-image-66041" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/meteor_logo.jpg 400w, https://developer.telerik.com/wp-content/uploads/2016/01/meteor_logo-300x71.jpg 300w" sizes="(max-width: 400px) 100vw, 400px"></p> 
      <p>Meteor is another library that can’t really be compared to your standard application frameworks such as Angular, Ember or Aurelia. While the aforementioned all do <a href="https://medium.com/@mjackson/universal-javascript-4761051b7ae9#.3trxseksf">Universal</a> or Portable JavaScript (server-side rendering), Meteor takes the concept the rest of the way by providing both the server tier and database. It is a true application platform.</p> 
      <p>Meteor falls into the “Full Stack JavaScript” camp. It uses Node.js on the server-side, along with MongoDB. It uses an in-browser version of Mongo called MiniMongo to allow client-side code direct access to the data store. Developers are then free to choose if they want their code evaluated on the server, or the client.</p> 
      <p>The ecosystem around Meteor is currently centered around a Meteor proprietary package management system called, Atmosphere. Developers can add the necessary meta data to their libraries so that they are compatible with the Atmosphere format. These libraries can then be pulled into any project with a simple command.</p> 
      <h3>Meteor Predictions For 2016</h3> 
      <p>Meteor will begin to announce large scale applications that currently use Meteor. This will be the first time that many developers are aware of Meteor as they learn of some very high profile sites that are built on the technology.</p> 
      <p>Meteor will offer a free tier on its hosting platform called Galaxy. Right now the cheapest package for Galaxy subscribers is a non-trivial $495 per month.</p> 
      <p>Look for Meteor to make a big announcement in 2016 regarding the mobile web. Currently, mobile support in JavaScript frameworks is not quite what it is on the desktop. The mobile web is still a far cry performance-wise from native apps, and this is a gap that Meteor would like to close.</p> 
      <blockquote> 
       <p>I believe that the biggest [gaps in existing frameworks] is true mobile support. We are still not there. There are many paths for [closing that gap] but it is still not a better experience than native apps</p> 
       <p>Uri Goldshtein – Meteor Team</p> 
      </blockquote> 
      <p><em>Special thanks to</em> <a href="https://twitter.com/urigoldshtein"><em>Uri Goldsein</em></a> <em>from the Meteor team for his input on this article.</em></p> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/web_components_logo.jpg" alt="web_components_logo" width="300" height="199" class="alignnone size-full wp-image-66051"></p> 
      <h2>Web Components</h2> 
      <p>This wouldn’t be a proper article without considering the implications on all of these frameworks when it comes to Web Components. Web Components are the technologies that are generally thought of as the emerging standards for creating interface components. However, web components can be used to create any piece of functionality that is possible with JavaScript, HTML and CSS.</p> 
      <p>In his article, “<a href="http://developer.telerik.com/featured/web-components-arent-ready-production-yet/">Why Web Components Aren’t Ready For Production…Yet</a>“, <a href="https://twitter.com/tjvantoll">TJ VanToll</a> describes several of the major drawbacks to web components that have so far kept them from being adopted by developers. The main hang-up so far has been browser support.</p> 
      <blockquote> 
       <p>The obvious reason to avoid web components is browser support. Although web components landed in Chrome 36, they only have partial support in Firefox, and they are not present in Safari or IE. Because cross-browser support won’t be possible for a very long time, if it happens at all, a polyfill is a long-term necessity for developers that want to use web components outside of Chrome.</p> 
       <p>TJ VanToll – <a href="http://developer.telerik.com/featured/web-components-arent-ready-production-yet/">Why Web Components Aren’t Ready For Production…Yet</a></p> 
      </blockquote> 
      <p>At one point, despite agreement from both Microsoft and Mozilla, Apple removed Shadow DOM from Safari altogether. Unfortunately, since users have no choice of browsers on iOS, Mobile Safari currently holds the rest of the web hostage. If a technology is not supported in Mobile Safari, it’s likely that it will not be used by developers, especially if it’s as hard to pollyfil as web components are.</p> 
      <h3>Web Components Predictions For 2016</h3> 
      <p>All major browsers will support web components by the second half of 2016. This prediction is based on the <a href="https://www.webkit.org/blog/4096/introducing-shadow-dom-api/">recent addition of Shadow DOM to WebKit</a>.</p> 
      <p>All JavaScript frameworks will begin to swap out their own technology for web component standards as those standards become widely supported.</p> 
      <blockquote> 
       <p>“Web components” is an umbrella term for a bunch of upcoming APIs, and there’s more than one way to break apart your app into smaller parts. The general idea is for Angular to pragmatically adopt new browser features as they become more available.</p> 
       <p>Brian Ford – Angular Team</p> 
      </blockquote> 
      <p><img src="http://developer.telerik.com/wp-content/uploads/2016/01/polymer_logo.jpg" alt="polymer_logo" width="400" height="107" class="alignnone size-full wp-image-66061" srcset="https://developer.telerik.com/wp-content/uploads/2016/01/polymer_logo.jpg 400w, https://developer.telerik.com/wp-content/uploads/2016/01/polymer_logo-300x80.jpg 300w" sizes="(max-width: 400px) 100vw, 400px"></p> 
      <p>The Polymer project from Google is often mistaken for, and used interchangeably with web components. Polymer is an application framework that is built on the concept of web components, and attempts to pollyfill certain web components APIs (such as Shadow DOM) for browsers where those APIs don’t exist.</p> 
      <p>Despite Google throwing what appears to be the entirety of their influence into the web components arena, Polymer has not yet garnered mainstream support. This is most likely due to the same browser compatibility issues that web components suffer from.</p> 
      <p>Google has created an impressive list of components for Polymer that encompass UI, animation and even seamless integration with Google’s own APIs. Developers looking to adopt Polymer will find virtually everything they need for their applications, especially if they are interested in doing Material Design.</p> 
      <p>At the 2015 Chrome Dev Summit, Google announced that there are now 1 million sites running on Polymer. These include some big name companies, such as GE. It also includes many of Google’s own internal properties, such as Google Play Music.</p> 
      <h3>Polymer Predictions For 2016</h3> 
      <p>Expect to see Google transition the majority of its applications over to Polymer in 2016. Google obviously sees web components as a strategic advantage. Given that it has little developer adoption, it is clear that Google will continue to push web components and Polymer by adopting it internally.</p> 
      <p>Google will release application framework, routing and internationalization components for Polymer in 2016. These are already on the roadmap.</p> 
      <p>Web Components will begin to take hold in the development community during the second half of 2016. This will cause an identity crisis for web developers who have been coding to frameworks for so long.</p> 
      <p>Expect to see the first batch of commercial web components by the later months in 2016.</p> 
      <p><em>Note: The Polymer team did not respond to a request for input on this article.</em></p> 
      <h2>Final Developer Predictions</h2> 
      <p>Lastly, here are some generic predictions for developers that I gathered based on my own research and conversations with those who provided input for this article.</p> 
      <ul> 
       <li>Universal/Portable JavaScript will be big in 2016 seeing as how React, Angular 2, Meteor, Ember and Aurelia all support it.</li> 
       <li>Developers will be expected to know ES6. Learn it.</li> 
       <li>Browser compatibility will largely be a non-issue, based on the fact that fundamental pollyfilling has essentially been mastered.</li> 
       <li>JavaScript frameworks will begin to target more than the web. This is already happening with React Native and NativeScript. Expect Ember and Aurelia to get in this game as well.</li> 
      </ul> 
     </div> 
     <div class="Article-NextPrev"> 
      <div class="row"> 
       <div class="col-2"> 
        <a href="https://developer.telerik.com/featured/net-developers-love-thy-command-line/" class="Article-Prev"> <img src="https://developer.telerik.com/wp-content/themes/tdnv2/assets/img/arrow-left.png"> <h6>Prev</h6> <span>.NET Developers - Love Thy Command Line</span> </a> 
       </div> 
       <div class="col-2"> 
        <a href="https://developer.telerik.com/featured/three-ds-of-web-development-1-declarative-vs-imperative/" class="Article-Next"> <img src="https://developer.telerik.com/wp-content/themes/tdnv2/assets/img/arrow-right.png"> <h6>Next</h6> <span>Three D's of Web Development #1: Declarative vs. Imperative</span> </a> 
       </div> 
      </div> 
     </div> 
     <div class="Article-AuthorBox"> 
      <img src="https://developer.telerik.com/wp-content/uploads/userphoto/1.png" alt="Burke Holland" width="149" height="150" class="avatar"> 
      <a href="https://developer.telerik.com/author/burkeholland/" class="author">Burke Holland</a>
      <br> 
      <a href="https://plus.google.com/115884468463036224504/">Burke Holland</a> is a developer living in Nashville, TN; the greatest city in the world.
      <!--more--> Burke enjoys JavaScript a lot because it's a giant band aid over his statically typed inadequacies. Burke writes only slightly better than he codes and definitely not as good as he talks about himself in the third person. You can find him on Twitter (the only Burke approved social media platform) as 
      <a href="http://twitter.com/burkeholland">@burkeholland</a>. Burke is currently part of Developer Relations at Microsoft. 
     </div> 
     <h3 class="above-list">Comments</h3> 
     <div id="disqus_thread"> 
      <div id="dsq-content"> 
       <ul id="dsq-comments"> 
        <li class="post pingback"> <p>Pingback: <a href="http://www.alvinashcraft.com/2016/01/11/dew-drop-january-11-2016-2164/" rel="external nofollow" class="url">Dew Drop – January 11, 2016 (#2164) | Morning Dew</a>()</p> </li> 
        <!-- #comment-## --> 
        <li class="comment even thread-even depth-1" id="dsq-comment-32521"> 
         <div id="dsq-comment-header-32521" class="dsq-comment-header"> 
          <cite id="dsq-cite-32521"> <span id="dsq-author-user-32521">jcreamer898</span> </cite> 
         </div> 
         <div id="dsq-comment-body-32521" class="dsq-comment-body"> 
          <div id="dsq-comment-message-32521" class="dsq-comment-message">
           <p>Good stuff as always!</p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment odd alt depth-2" id="dsq-comment-58841"> 
           <div id="dsq-comment-header-58841" class="dsq-comment-header"> 
            <cite id="dsq-cite-58841"> <span id="dsq-author-user-58841">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58841" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58841" class="dsq-comment-message">
             <p>Thanks man! When are we going to the Monkey again?</p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even depth-2" id="dsq-comment-58851"> 
           <div id="dsq-comment-header-58851" class="dsq-comment-header"> 
            <cite id="dsq-cite-58851"> <span id="dsq-author-user-58851">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58851" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58851" class="dsq-comment-message">
             <p>Thanks man! When are we going to the Monkey again?</p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="post pingback"> <p>Pingback: <a href="http://blog.cwa.me.uk/2016/01/12/the-morning-brew-2007/" rel="external nofollow" class="url">The Morning Brew - Chris Alcock » The Morning Brew #2007</a>()</p> </li> 
        <!-- #comment-## --> 
        <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-32591"> 
         <div id="dsq-comment-header-32591" class="dsq-comment-header"> 
          <cite id="dsq-cite-32591"> <a id="dsq-author-user-32591" href="http://techpush.net/" target="_blank" rel="nofollow">Dong Nguyen</a> </cite> 
         </div> 
         <div id="dsq-comment-body-32591" class="dsq-comment-body"> 
          <div id="dsq-comment-message-32591" class="dsq-comment-message">
           <p>Very helpful. Thank you for your informative post!</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="post pingback"> <p>Pingback: <a href="http://blog.vitalishcharbin.com/tech-news-jan-13/" rel="external nofollow" class="url">Tech News (Jan-13) - Vitali Shcharbin</a>()</p> </li> 
        <!-- #comment-## --> 
        <li class="comment even thread-even depth-1" id="dsq-comment-32631"> 
         <div id="dsq-comment-header-32631" class="dsq-comment-header"> 
          <cite id="dsq-cite-32631"> <span id="dsq-author-user-32631">zweiundeinzig</span> </cite> 
         </div> 
         <div id="dsq-comment-body-32631" class="dsq-comment-body"> 
          <div id="dsq-comment-message-32631" class="dsq-comment-message">
           <p>I missed vue.js ? Great framework! ?</p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment odd alt depth-2" id="dsq-comment-58701"> 
           <div id="dsq-comment-header-58701" class="dsq-comment-header"> 
            <cite id="dsq-cite-58701"> <span id="dsq-author-user-58701">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58701" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58701" class="dsq-comment-message">
             <p>Yeah. Couldn’t get them all. Probably should have included that one though. </p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-32691"> 
         <div id="dsq-comment-header-32691" class="dsq-comment-header"> 
          <cite id="dsq-cite-32691"> <span id="dsq-author-user-32691">CuiZinieR</span> </cite> 
         </div> 
         <div id="dsq-comment-body-32691" class="dsq-comment-body"> 
          <div id="dsq-comment-message-32691" class="dsq-comment-message">
           <p>Dear author of this good article,</p> 
           <p>I can’t help noticing that although you seem to be a native English speaker, you obviously don’t understand the difference between “it’s”, the contraction of the subject “it” and the verb “is”, and “its”, the 3rd person pronoun. As a result, you constantly made the same mistake through your article, always using “it’s” when it should be “its”. It’s rather surprising since it’s so easy to know which one to use: just replace “it’s” by “it is” in your sentence and see whether it sounds good or not.</p> 
           <p>You may want to change “it’s” with “its” in the following parts:</p> 
           <p>1/ “Angular has received some amount of criticism for it’s documentation and performance”</p> 
           <p>2/ “Kendo UI will begin to decouple itself from it’s own binding framework”</p> 
           <p>3/ “This may be due in part to it’s age.”</p> 
           <p>4/ “as it’s React and Angular peers”</p> 
           <p>5/ “Meteor will offer a free tier on it’s hosting platform called Galaxy”</p> 
           <p>6/ “Expect to see Google transition the majority of it’s applications”</p> 
           <p>Besides, 2 other mistakes you may want to correct:</p> 
           <p>7/ “larger entities who’s core business proposition is not technology” =&gt; “whose”, not “who is”…</p> 
           <p>8/ “However, they still wanted to the robust widgets that Kendo UI offered” =&gt; I guess you missed a verb such as “wanted to use the robust”…</p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment odd alt depth-2" id="dsq-comment-33001"> 
           <div id="dsq-comment-header-33001" class="dsq-comment-header"> 
            <cite id="dsq-cite-33001"> <a id="dsq-author-user-33001" href="https://franciskim.co" target="_blank" rel="nofollow">Francis Kim</a> </cite> 
           </div> 
           <div id="dsq-comment-body-33001" class="dsq-comment-body"> 
            <div id="dsq-comment-message-33001" class="dsq-comment-message">
             <p>Hahaha… great work! ?</p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even depth-2" id="dsq-comment-36411"> 
           <div id="dsq-comment-header-36411" class="dsq-comment-header"> 
            <cite id="dsq-cite-36411"> <a id="dsq-author-user-36411" href="http://safwan.in/" target="_blank" rel="nofollow">Safwan Erooth</a> </cite> 
           </div> 
           <div id="dsq-comment-body-36411" class="dsq-comment-body"> 
            <div id="dsq-comment-message-36411" class="dsq-comment-message">
             <p>@disqus_DmYiqEgCqf:disqus Thank you. “just replace “it’s” by “it is” in your sentence and see whether it sounds good or not.” This piece if advice really helped me to understand. I had the same trouble english being my third language. ?</p> 
            </div> 
           </div> 
           <ul class="children"> 
            <li class="comment odd alt depth-3" id="dsq-comment-58941"> 
             <div id="dsq-comment-header-58941" class="dsq-comment-header"> 
              <cite id="dsq-cite-58941"> <span id="dsq-author-user-58941">CuiZinieR</span> </cite> 
             </div> 
             <div id="dsq-comment-body-58941" class="dsq-comment-body"> 
              <div id="dsq-comment-message-58941" class="dsq-comment-message">
               <p>You’re welcome ?</p> 
              </div> 
             </div> </li>
            <!-- #comment-## --> 
           </ul>
           <!-- .children --> </li>
          <!-- #comment-## --> 
          <li class="comment even depth-2" id="dsq-comment-58711"> 
           <div id="dsq-comment-header-58711" class="dsq-comment-header"> 
            <cite id="dsq-cite-58711"> <span id="dsq-author-user-58711">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58711" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58711" class="dsq-comment-message">
             <p>Now now. Its not that big of a deal. </p> 
            </div> 
           </div> 
           <ul class="children"> 
            <li class="comment odd alt depth-3" id="dsq-comment-58951"> 
             <div id="dsq-comment-header-58951" class="dsq-comment-header"> 
              <cite id="dsq-cite-58951"> <span id="dsq-author-user-58951">CuiZinieR</span> </cite> 
             </div> 
             <div id="dsq-comment-body-58951" class="dsq-comment-body"> 
              <div id="dsq-comment-message-58951" class="dsq-comment-message">
               <p>“It’s” ?</p> 
              </div> 
             </div> </li>
            <!-- #comment-## --> 
           </ul>
           <!-- .children --> </li>
          <!-- #comment-## --> 
          <li class="comment even depth-2" id="dsq-comment-61171"> 
           <div id="dsq-comment-header-61171" class="dsq-comment-header"> 
            <cite id="dsq-cite-61171"> <span id="dsq-author-user-61171">Phil</span> </cite> 
           </div> 
           <div id="dsq-comment-body-61171" class="dsq-comment-body"> 
            <div id="dsq-comment-message-61171" class="dsq-comment-message">
             <p>lol. this is such a long reply. i love how it starts.</p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="comment odd alt thread-even depth-1" id="dsq-comment-33101"> 
         <div id="dsq-comment-header-33101" class="dsq-comment-header"> 
          <cite id="dsq-cite-33101"> <a id="dsq-author-user-33101" href="http://superrune.dk/" target="_blank" rel="nofollow">memborg</a> </cite> 
         </div> 
         <div id="dsq-comment-body-33101" class="dsq-comment-body"> 
          <div id="dsq-comment-message-33101" class="dsq-comment-message">
           <p>It seems to me that ExtJS is missing from this list or are you only taking freely available frameworks into account?</p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment even depth-2" id="dsq-comment-33681"> 
           <div id="dsq-comment-header-33681" class="dsq-comment-header"> 
            <cite id="dsq-cite-33681"> <span id="dsq-author-user-33681">gotofritz</span> </cite> 
           </div> 
           <div id="dsq-comment-body-33681" class="dsq-comment-body"> 
            <div id="dsq-comment-message-33681" class="dsq-comment-message">
             <p>It’s “What To Expect From JavaScript in <b>2016</b>” not 2012… ?</p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt depth-2" id="dsq-comment-58391"> 
           <div id="dsq-comment-header-58391" class="dsq-comment-header"> 
            <cite id="dsq-cite-58391"> <span id="dsq-author-user-58391">Ivan Jouikov</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58391" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58391" class="dsq-comment-message">
             <p>Kendo is like “poor man’s ExtJS”. 4 years late to the party and trying to play catch up. Of course they aren’t going to mention the gorilla in the room as it’s bad for the marketing purpose of this article.</p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-33541"> 
         <div id="dsq-comment-header-33541" class="dsq-comment-header"> 
          <cite id="dsq-cite-33541"> <span id="dsq-author-user-33541">Ben Boney</span> </cite> 
         </div> 
         <div id="dsq-comment-body-33541" class="dsq-comment-body"> 
          <div id="dsq-comment-message-33541" class="dsq-comment-message">
           <p>Burke,</p> 
           <p>If you are not already planning to cover requireJS in part 2 or 3, I would be curious of your opinion about staying with RequireJS in 2016. Specifically alongside Kendo.</p> 
           <p>Thanks!</p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment odd alt depth-2" id="dsq-comment-58831"> 
           <div id="dsq-comment-header-58831" class="dsq-comment-header"> 
            <cite id="dsq-cite-58831"> <span id="dsq-author-user-58831">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58831" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58831" class="dsq-comment-message">
             <p>I’d go with ES6 modules and webpack. </p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="comment even thread-even depth-1" id="dsq-comment-34151"> 
         <div id="dsq-comment-header-34151" class="dsq-comment-header"> 
          <cite id="dsq-cite-34151"> <span id="dsq-author-user-34151">Owen Densmore</span> </cite> 
         </div> 
         <div id="dsq-comment-body-34151" class="dsq-comment-body"> 
          <div id="dsq-comment-message-34151" class="dsq-comment-message">
           <p>Do you see React’s approach as similar to Web Components?</p> 
           <p>Personally, I like the idea of keeping the html rendering close to the JS. Similar to modules, moving importing modules to where they are used is far better than </p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment odd alt depth-2" id="dsq-comment-58811"> 
           <div id="dsq-comment-header-58811" class="dsq-comment-header"> 
            <cite id="dsq-cite-58811"> <span id="dsq-author-user-58811">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58811" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58811" class="dsq-comment-message">
             <p>I think the component model provided by both react and angular is something that resonates with developers. For some reason, web components haven’t had the same level of acceptance. </p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even depth-2" id="dsq-comment-58821"> 
           <div id="dsq-comment-header-58821" class="dsq-comment-header"> 
            <cite id="dsq-cite-58821"> <span id="dsq-author-user-58821">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58821" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58821" class="dsq-comment-message">
             <p>I think the component model provided by both react and angular is something that resonates with developers. For some reason, web components haven’t had the same level of acceptance. </p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34311"> 
         <div id="dsq-comment-header-34311" class="dsq-comment-header"> 
          <cite id="dsq-cite-34311"> <span id="dsq-author-user-34311">Sean</span> </cite> 
         </div> 
         <div id="dsq-comment-body-34311" class="dsq-comment-body"> 
          <div id="dsq-comment-message-34311" class="dsq-comment-message">
           <p>In my opinion you will see a major die off on React once angular2 is out… sure whoever is using it will continue to do so, but all new adoptions will be on Angular2 as it will provide A LOT more… ng2 universal, ng2 animate + a ton of new tools.. no kidding, that’s why Google is calling: Angular2 – One Framework. In fact, mark my word, Angular2 will consolidate the entire JS eco in &lt;5 years…</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment even thread-even depth-1" id="dsq-comment-34313"> 
         <div id="dsq-comment-header-34313" class="dsq-comment-header"> 
          <cite id="dsq-cite-34313"> <span id="dsq-author-user-34313">Broc Seib</span> </cite> 
         </div> 
         <div id="dsq-comment-body-34313" class="dsq-comment-body"> 
          <div id="dsq-comment-message-34313" class="dsq-comment-message">
           <p>I’ve been using angular from the beginning… Funny thing about those 132,639 angular questions on SO — those are people seeking help/understanding/clarification — me included! I think that volume (or perhaps “density”) of questions speaks to the (unintended) complexity of angular. I still love it. But it could be better.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34321"> 
         <div id="dsq-comment-header-34321" class="dsq-comment-header"> 
          <cite id="dsq-cite-34321"> <span id="dsq-author-user-34321">DA</span> </cite> 
         </div> 
         <div id="dsq-comment-body-34321" class="dsq-comment-body"> 
          <div id="dsq-comment-message-34321" class="dsq-comment-message">
           <p>Anyone considering React, had better try it on a very small project first. I am amazed that few are complaining about the sheer volume of boilerplate code necessary to accomplish even the most trivial of tasks. It’s astounding, really. It feels like a complete 180, or ode to a bygone era where backbone was dominant. </p> 
           <p>It should have been DOA, as was Polymer; but developers simply couldn’t look away from the novelty of the Virtual DOM (ahem..dirty checking). But hey, I am not complaining. Thanks to Facebook, I can now add another specialty to my resume. I can’t wait until companies are rife with humongous React applications and nobody is left to maintain them.</p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment even depth-2" id="dsq-comment-35221"> 
           <div id="dsq-comment-header-35221" class="dsq-comment-header"> 
            <cite id="dsq-cite-35221"> <span id="dsq-author-user-35221">nascent123</span> </cite> 
           </div> 
           <div id="dsq-comment-body-35221" class="dsq-comment-body"> 
            <div id="dsq-comment-message-35221" class="dsq-comment-message">
             <p>Yeah, not the same experience here. I tried React on a small project with intense skepticism, especially about JSX, and became a complete believer. For now, React absolutely rules the the UI framework arena. I’m guessing that I’m not the only one who feels this way, considering its meteoric rise in popularity. Some don’t get it, but that’s your loss, in my opinion. </p> 
             <p>You want to talk horror stories, just look at any Angular code-base that has been in development for more than a month. That’s some nightmare material, and exactly where React wins.</p> 
            </div> 
           </div> 
           <ul class="children"> 
            <li class="comment odd alt depth-3" id="dsq-comment-35251"> 
             <div id="dsq-comment-header-35251" class="dsq-comment-header"> 
              <cite id="dsq-cite-35251"> <span id="dsq-author-user-35251">DA</span> </cite> 
             </div> 
             <div id="dsq-comment-body-35251" class="dsq-comment-body"> 
              <div id="dsq-comment-message-35251" class="dsq-comment-message">
               <p>I applaud your dedication and willingness to experiment, especially if it’s at the expense of a fortune 5000 company. I love it when a few half-baked ideas get slathered in band-aids, then all the nascent (see what I did there) developers flock to it like it’s some kind of holy grail for corporate woes.</p> 
               <p>How is this for loss.. In my present surroundings, I am the only one who even understands React, because they fired the the fanboy who embraced it to build a simple 12 page app. After about 8 months and nothing but excuses to show for his efforts, they had enough. Cha-ching!</p> 
               <p>I have built some massive Angular apps, by the way. Sorry to anyone who happens upon those freshly steaming prototypes. Hindsight is more bountiful than beer in this business, unfortunately. What I learned from past mistakes is that the problems are actually inherent in the language; there I said it. </p> 
               <p>Oh and here’s another shocker, Babel is pointless. It’s nothing more than a distraction away from things that might actually work and make a difference. If you really want things to improve in the UI bizsnach, embrace TypeScript, just like the Angular team did ?</p> 
              </div> 
             </div> </li>
            <!-- #comment-## --> 
            <li class="comment even depth-3" id="dsq-comment-58931"> 
             <div id="dsq-comment-header-58931" class="dsq-comment-header"> 
              <cite id="dsq-cite-58931"> <span id="dsq-author-user-58931">adevx5</span> </cite> 
             </div> 
             <div id="dsq-comment-body-58931" class="dsq-comment-body"> 
              <div id="dsq-comment-message-58931" class="dsq-comment-message">
               <p>Actually, Angular’s rigid project structure (dirs for controllers, services, templates, directives, etc), separation of concerns, strong opinion, and monumental developer interest makes me very happy to work on year old Angular projects. </p> 
              </div> 
             </div> 
             <ul class="children"> 
              <li class="comment odd alt depth-4" id="dsq-comment-59121"> 
               <div id="dsq-comment-header-59121" class="dsq-comment-header"> 
                <cite id="dsq-cite-59121"> <span id="dsq-author-user-59121">nascent123</span> </cite> 
               </div> 
               <div id="dsq-comment-body-59121" class="dsq-comment-body"> 
                <div id="dsq-comment-message-59121" class="dsq-comment-message">
                 <p>Angular doesn’t have a rigid project structure, that’s up to you (same with React). But I was talking about the many different Angular 1.x paradigms that you can easily make a mess with, because it’s *not* rigid. Angular 2 improved this hugely, but IMO React simplifies it a lot more by eliminating a proprietary expression/binding engine in HTML, you just write JS.</p> 
                </div> 
               </div> </li>
              <!-- #comment-## --> 
             </ul>
             <!-- .children --> </li>
            <!-- #comment-## --> 
           </ul>
           <!-- .children --> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="comment even thread-even depth-1" id="dsq-comment-34341"> 
         <div id="dsq-comment-header-34341" class="dsq-comment-header"> 
          <cite id="dsq-cite-34341"> <span id="dsq-author-user-34341">Dirk Porsche</span> </cite> 
         </div> 
         <div id="dsq-comment-body-34341" class="dsq-comment-body"> 
          <div id="dsq-comment-message-34341" class="dsq-comment-message">
           <p>Hope you tackle desktop apps in JS in your second or third article. (Electron and NW.js)</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="post pingback"> <p>Pingback: <a href="http://dev.sortingthoughts.de/2016/02/05/javascript-universe-trends-in-2016/" rel="external nofollow" class="url">JavaScript universe trends in 2016? | dev/Sorting/Thoughts</a>()</p> </li> 
        <!-- #comment-## --> 
        <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-34913"> 
         <div id="dsq-comment-header-34913" class="dsq-comment-header"> 
          <cite id="dsq-cite-34913"> <a id="dsq-author-user-34913" href="http://cartamagna.org" target="_blank" rel="nofollow">cartamagnaorg</a> </cite> 
         </div> 
         <div id="dsq-comment-body-34913" class="dsq-comment-body"> 
          <div id="dsq-comment-message-34913" class="dsq-comment-message">
           <p>There is a misunderstanding about Meteor, this looks like it will be a difficult year for the community, which is not satisfied with the difficulty in scaling their applications. The Meteor team announced it will launch support for GraphQL, and among other changes, already supports packages directly from the NPM and ES2015</p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment even depth-2" id="dsq-comment-58791"> 
           <div id="dsq-comment-header-58791" class="dsq-comment-header"> 
            <cite id="dsq-cite-58791"> <span id="dsq-author-user-58791">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58791" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58791" class="dsq-comment-message">
             <p>Good resources! Although I don’t like to speculate on the demise of anything. </p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt depth-2" id="dsq-comment-58801"> 
           <div id="dsq-comment-header-58801" class="dsq-comment-header"> 
            <cite id="dsq-cite-58801"> <span id="dsq-author-user-58801">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58801" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58801" class="dsq-comment-message">
             <p>Good resources! Although I don’t like to speculate on the demise of anything. </p> 
            </div> 
           </div> 
           <ul class="children"> 
            <li class="comment even depth-3" id="dsq-comment-59431"> 
             <div id="dsq-comment-header-59431" class="dsq-comment-header"> 
              <cite id="dsq-cite-59431"> <span id="dsq-author-user-59431">Jam</span> </cite> 
             </div> 
             <div id="dsq-comment-body-59431" class="dsq-comment-body"> 
              <div id="dsq-comment-message-59431" class="dsq-comment-message">
               <p>I’m a big fan of Meteor, it’s definitely in flux though. Currently Meteor is undergoing a lot of changes. It used to be a full house platform/framework. Now though its becoming a set of smaller modular libraries that can be added dropped or changed with something else.</p> 
               <p>We used to be happy with blaze. Now we have the hard choice of picking either react/angular/blaze of which are the templating engines that are fully supported by Meteor. Meteor will also soon be database agnostic with <a href="http://www.apollostack.com" rel="nofollow">http://www.apollostack.com</a> so thats another choice to make too: sqlite/mongoDB/mysql/couchDB etc.</p> 
               <p>All of this is greatly freeing but it comes at a cost of more complexity/boilerplate and a higher learning curve. the ecosystem also starts to become fragmented. Its also hard to keep up with the changes. … too many choices! However the many choices will hopefully bring in many new customers.</p> 
              </div> 
             </div> </li>
            <!-- #comment-## --> 
           </ul>
           <!-- .children --> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="comment odd alt thread-even depth-1" id="dsq-comment-35291"> 
         <div id="dsq-comment-header-35291" class="dsq-comment-header"> 
          <cite id="dsq-cite-35291"> <span id="dsq-author-user-35291">nascent123</span> </cite> 
         </div> 
         <div id="dsq-comment-body-35291" class="dsq-comment-body"> 
          <div id="dsq-comment-message-35291" class="dsq-comment-message">
           <p>Rob Eisenberg’s criticism about “mixing HTML and JS” in JSX is really disappointing. It’s an incredibly amateur and naive argument. First of all, mixing concerns is a problem, mixing declarative and imperative syntax while sharing the same concern is a good thing. It’s not the same as using template strings, which is nasty, and ironically what Aurelia uses in many examples. In fact Angular and Aurelia both use JS-ish expression syntax directly in their HTML, which is the exact same thing except worse: now you need special framework-specific expression language knowledge, and the browser has no idea what you’re doing so debugging is always harder, and frankly you *are* abusing HTML when you do this. Aurelia is great, but once I went React, I will never go back.</p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment even depth-2" id="dsq-comment-58771"> 
           <div id="dsq-comment-header-58771" class="dsq-comment-header"> 
            <cite id="dsq-cite-58771"> <span id="dsq-author-user-58771">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58771" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58771" class="dsq-comment-message">
             <p>I think he makes a good point about separation of concerns. Does React at least provide a way to separate the .jsx into a separate file?</p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt depth-2" id="dsq-comment-58781"> 
           <div id="dsq-comment-header-58781" class="dsq-comment-header"> 
            <cite id="dsq-cite-58781"> <span id="dsq-author-user-58781">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58781" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58781" class="dsq-comment-message">
             <p>I think he makes a good point about separation of concerns. Does React at least provide a way to separate the .jsx into a separate file?</p> 
            </div> 
           </div> 
           <ul class="children"> 
            <li class="comment even depth-3" id="dsq-comment-59131"> 
             <div id="dsq-comment-header-59131" class="dsq-comment-header"> 
              <cite id="dsq-cite-59131"> <span id="dsq-author-user-59131">nascent123</span> </cite> 
             </div> 
             <div id="dsq-comment-body-59131" class="dsq-comment-body"> 
              <div id="dsq-comment-message-59131" class="dsq-comment-message">
               <p>Separate what concerns? HTML and JS are not concerns. They are languages. A concern is a component responsible for X vs a component responsible for Y. You could split your component into two different files (HTML and JS) but why? And what are you compromising to do this? In the case of Angular/Aurelia the cost is that you end up with tons of stuff in HTML that isn’t really HTML, it’s basically re-inventing JS (look at those expression bindings and logical tags — tell me that’s not “mixing concerns” but JSX somehow is different.) React actually makes separating concerns and isolating responsibility *way* easier than Angular ever was in my experience — maybe I (and everyone I know) was just really bad at Angular.</p> 
              </div> 
             </div> </li>
            <!-- #comment-## --> 
           </ul>
           <!-- .children --> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-35441"> 
         <div id="dsq-comment-header-35441" class="dsq-comment-header"> 
          <cite id="dsq-cite-35441"> <span id="dsq-author-user-35441">Thiago Porciúncula</span> </cite> 
         </div> 
         <div id="dsq-comment-body-35441" class="dsq-comment-body"> 
          <div id="dsq-comment-message-35441" class="dsq-comment-message">
           <p>Bootstrap has been the most starred GitHub repository for a while now. Even Angular has more stars than jQuery. Right now, Bootstrap has 92,785 stars, while jQuery has 38,179. I’m pretty sure Bootstrap had more stars than jQuery at the time you wrote this article.</p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment even depth-2" id="dsq-comment-58561"> 
           <div id="dsq-comment-header-58561" class="dsq-comment-header"> 
            <cite id="dsq-cite-58561"> <span id="dsq-author-user-58561">Stephen Smyth</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58561" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58561" class="dsq-comment-message">
             <p>I think this says more about jQuery’s ubiquity though–would you bookmark google.com for example.</p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt depth-2" id="dsq-comment-58571"> 
           <div id="dsq-comment-header-58571" class="dsq-comment-header"> 
            <cite id="dsq-cite-58571"> <span id="dsq-author-user-58571">Stephen Smyth</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58571" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58571" class="dsq-comment-message">
             <p>I think this says more about jQuery’s ubiquity though–would you bookmark google.com for example.</p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even depth-2" id="dsq-comment-58751"> 
           <div id="dsq-comment-header-58751" class="dsq-comment-header"> 
            <cite id="dsq-cite-58751"> <span id="dsq-author-user-58751">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58751" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58751" class="dsq-comment-message">
             <p>Bootstrap is definitely the most popular front end library, but it’s not a JavaScript Framework. </p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt depth-2" id="dsq-comment-58761"> 
           <div id="dsq-comment-header-58761" class="dsq-comment-header"> 
            <cite id="dsq-cite-58761"> <span id="dsq-author-user-58761">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58761" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58761" class="dsq-comment-message">
             <p>Bootstrap is definitely the most popular front end library, but it’s not a JavaScript Framework. </p> 
            </div> 
           </div> 
           <ul class="children"> 
            <li class="comment even depth-3" id="dsq-comment-58891"> 
             <div id="dsq-comment-header-58891" class="dsq-comment-header"> 
              <cite id="dsq-cite-58891"> <span id="dsq-author-user-58891">Thiago Porciúncula</span> </cite> 
             </div> 
             <div id="dsq-comment-body-58891" class="dsq-comment-body"> 
              <div id="dsq-comment-message-58891" class="dsq-comment-message">
               <p>I know it’s not, but the author stated the jQuery was “the most starred repository on GitHub”, not “the most starred JavaScript Framework on GitHub”.</p> 
              </div> 
             </div> </li>
            <!-- #comment-## --> 
           </ul>
           <!-- .children --> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="comment odd alt thread-even depth-1" id="dsq-comment-57961"> 
         <div id="dsq-comment-header-57961" class="dsq-comment-header"> 
          <cite id="dsq-cite-57961"> <span id="dsq-author-user-57961">Danny Hadley</span> </cite> 
         </div> 
         <div id="dsq-comment-body-57961" class="dsq-comment-body"> 
          <div id="dsq-comment-message-57961" class="dsq-comment-message">
           <p>“Universal/Portable JavaScript will be big in 2016 seeing as how React, Angular 2, Meteor, Ember and Aurelia all support it.”</p> 
           <p>Is this a good thing? I appreciate javascript getting huge traction as a server-side programming language, but I fear that it has caused people to be too hasty to wed their codebases together in a single messy amalgamation of javascript code. </p> 
           <p>In my experience, some of the best platforms I’ve worked in have made a complete separation between server-side and client-side code (be it browser, native ios, native android, etc…). Keeping server side code separate from browser side code allows teams to:</p> 
           <p>– establish independent release cycles, which:<br> – allows faster development in front-end codebases (which should operate on faster release cycles)<br> – prevent release rollbacks for server-side code when front-end bugs are introduces<br> – maintain clearer distinction between codebases, which:<br> – decreases overall platform learning curve for new developers<br> – improves ability for individual codebases to be thoroughly tested<br> – increases independence from any single framework/architecture</p> 
           <p>Is creating solutions for separating code – rather than creating solutions for a one-size-fits-all approach – not what we should be striving for? Is there a reason for the “api” layer of a platform to be anything more than a JSON REST api?</p> 
          </div> 
         </div> 
         <ul class="children"> 
          <li class="comment even depth-2" id="dsq-comment-58721"> 
           <div id="dsq-comment-header-58721" class="dsq-comment-header"> 
            <cite id="dsq-cite-58721"> <span id="dsq-author-user-58721">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58721" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58721" class="dsq-comment-message">
             <p>I think having the option to do it is a big deal. Any time we can leverage all parts of the stack, that’s a good thing. </p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt depth-2" id="dsq-comment-58731"> 
           <div id="dsq-comment-header-58731" class="dsq-comment-header"> 
            <cite id="dsq-cite-58731"> <span id="dsq-author-user-58731">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58731" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58731" class="dsq-comment-message">
             <p>I think having the option to do it is a big deal. Any time we can leverage all parts of the stack, that’s a good thing. </p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even depth-2" id="dsq-comment-58741"> 
           <div id="dsq-comment-header-58741" class="dsq-comment-header"> 
            <cite id="dsq-cite-58741"> <span id="dsq-author-user-58741">burkeholland</span> </cite> 
           </div> 
           <div id="dsq-comment-body-58741" class="dsq-comment-body"> 
            <div id="dsq-comment-message-58741" class="dsq-comment-message">
             <p>I think having the option to do it is a big deal. Any time we can leverage all parts of the stack, that’s a good thing. </p> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
         </ul>
         <!-- .children --> </li>
        <!-- #comment-## --> 
        <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-60061"> 
         <div id="dsq-comment-header-60061" class="dsq-comment-header"> 
          <cite id="dsq-cite-60061"> <span id="dsq-author-user-60061">Faisal</span> </cite> 
         </div> 
         <div id="dsq-comment-body-60061" class="dsq-comment-body"> 
          <div id="dsq-comment-message-60061" class="dsq-comment-message">
           <p>As a developer, my impression is that only ReactJS has made some out of the box thing stuff. Until now we’ve been watching evolving our libraries with new complex and huge API’s that needed time and energy to invest in. Besides they were all doing the same thing, providing us a top wrapper above traditional Javascript and DOM interaction.<br> Its only React which has challenged our decades old understanding of web and showed us a way how things can be better organized and perform fast with little effort ans same set of resources. In my opinion coupling of HTML tags with JS is not a big issue.<br> Personally I also support that one component should do fully its job what it is being supposed to do. Navigating between files for finding code blocks related to templates especially is a big mess for any developer. Besides accessing DOM elements using jquery selectors and regular JS statements like document.getElementById() are literally frustrating and in my opinion have gotten obsolete in fact. React greatly solves out this problem. Coupled along with frameworks like Flux and Redux they make code management much easier which is of great advantage when coding a complex UI side app.<br> Change is always criticized by peers and so is this case with React.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="post pingback"> <p>Pingback: <a href="https://invesd.org/review1lisk/" rel="external nofollow" class="url">Community Review #1 Lisk is not a great product, it is…. | Invesd</a>()</p> </li> 
        <!-- #comment-## --> 
       </ul> 
      </div> 
     </div> 
     <script type="text/javascript">
var disqus_url = 'https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/';
var disqus_identifier = '65921 http://developer.telerik.com/?p=65921';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'telerikdev';
var disqus_title = "What To Expect From JavaScript In 2016  &#8211; Frameworks";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
        this.callbacks.onReady.push(function () {

        // sync comments in the background so we don't block the page
        var script = document.createElement('script');
        script.async = true;
        script.src = '?cf_action=sync_comments&post_id=65921';

        var firstScript = document.getElementsByTagName('script')[0];
        firstScript.parentNode.insertBefore(script, firstScript);
    });
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script> 
    </div> 
    <div class="col-1"> 
     <div class="Content-sidebar"> 
      <div id="banner" style="text-align:center;margin-bottom: 20px;"> 
       <div class="widget">
        <div id="CMACWidget">
         <a href="http://www.telerik.com/campaigns/october-2017-release-webinar?utm_medium=cpm-owned&amp;utm_source=tdn&amp;utm_campaign=devcraft-webinar-r3oct17" data-href="http://www.telerik.com/campaigns/october-2017-release-webinar?utm_medium=cpm-owned&amp;utm_source=tdn&amp;utm_campaign=devcraft-webinar-r3oct17" banner_id="1364" class="acc_banner_link0833b48eda0b4f48f088ebf6697fac7e "><img src="https://developer.telerik.com/wp-content/uploads/ac_uploads/974695739.jpg" alt="Telerik UI Tools R3 Release Webinar" title="Telerik UI Tools R3 Release Webinar"></a>
         <script type="text/javascript">
                            jQuery(document).ready(function(){cm_bind_click_banner0833b48eda0b4f48f088ebf6697fac7e();cm_init_slider0833b48eda0b4f48f088ebf6697fac7e();
                            });
                          </script>
         <script type="text/javascript">
            function cm_bind_click_banner0833b48eda0b4f48f088ebf6697fac7e(){
                    var currentEl = jQuery(".acc_banner_link0833b48eda0b4f48f088ebf6697fac7e");
                    jQuery(currentEl).on("click",function(e){
                            meBannerObject = this;
                            if (meBannerObject.getAttribute("target") == "_blank"){
                            var newWindowObject = window.open("", "_blank");
                            }
                            jQuery.ajax({url: "https://developer.telerik.com/wp-admin/admin-ajax.php?action=acc_trigger_click_event",
                                              type: "post",
                                              async: false,
                                              data: {campaign_id: 21, banner_id: jQuery(this).attr("banner_id")},
                                              complete:
                                                function(){
                                                    var href = meBannerObject.dataset.href;

                                                    if(!href){
                                                        return false;
                                                    }

                                                    if (meBannerObject.getAttribute("target") == "_blank"){
                                                        newWindowObject.location = href;
                                                    }else {
                                                        document.location = meBannerObject.href;
                                                    }
                                                }
                            });
                            e.preventDefault();
                            return false;
                    });
            }function cm_bind_impression_banner0833b48eda0b4f48f088ebf6697fac7e(){jQuery.ajax({url: "https://developer.telerik.com/wp-admin/admin-ajax.php?action=acc_trigger_impression_event",
                                            type: "post",
                                            data: {
                                                campaign_id: 21,
                                                banner_id: jQuery(".acc_banner_link0833b48eda0b4f48f088ebf6697fac7e").attr("banner_id")
                                            }
                                        });}
                function cm_init_slider0833b48eda0b4f48f088ebf6697fac7e(){}</script>
        </div>
       </div> 
      </div> 
      <h4>Telerik Developer Digest</h4> 
      <p class="newsletter-sidebar">Software development articles from the Telerik Developer Network and around the web.</p> 
      <div class="List"> 
       <span id="newsletterNotification"></span> 
       <script>
        jQuery(document).ready(function() {
            var newsletterNotification = jQuery("#newsletterNotification").kendoNotification({
                    autoHideAfter: 0
                }).data("kendoNotification");
            });
    </script> 
       <form method="post" action="https://digest.telerik.com/subscribe"> 
        <input type="hidden" name="redirectTo" value="https://developer.telerik.com/featured/what-to-expect-from-javascript-in-2016-frameworks/"> 
        <input type="email" name="email" placeholder="Email"> 
        <input type="submit" value="Sign Up"> 
       </form> 
       <br> 
       <p class="newsletter-sidebar"><a href="https://digest.telerik.com/latest">Click here</a> to sample the latest issue.</p> 
      </div> 
      <h4>Featured Opinions</h4> 
      <div class="List"> 
       <div> 
        <h5><a href="https://developer.telerik.com/category/content-types/opinion/">Opinion</a></h5> 
        <a href="https://developer.telerik.com/content-types/opinion/tech-event-needs-money/">So Your Tech Event Needs Money?</a> 
        <h6>August 15, 2017</h6> 
       </div> 
       <div> 
        <h5><a href="https://developer.telerik.com/category/content-types/podcast/">Podcast</a></h5> 
        <a href="https://developer.telerik.com/content-types/podcast/developer-digest-net-core-nativescript/">Developer Digest .NET Core and NativeScript</a> 
        <h6>July 26, 2017</h6> 
       </div> 
      </div>
      <h4 class="u-pt4">Telerik Announcements</h4> 
      <div class="List"> 
       <div> 
        <!--<img src="http://placehold.it/40x40" class="Thumb" />--> 
        <a href="http://www.telerik.com/blogs/progress-telerik-ui-for-uwp-joins-net-foundation">Progress Telerik UI for UWP Joins the .NET Foundation</a> 
       </div> 
       <div> 
        <!--<img src="http://placehold.it/40x40" class="Thumb" />--> 
        <a href="http://www.telerik.com/blogs/react-and-vue-support-coming-to-kendo-ui">React and Vue Support Coming to Kendo UI</a> 
       </div> 
      </div> 
      <h4>Follow Us</h4> 
      <div class="SocialIcons"> 
       <a href="https://www.facebook.com/Telerik" class="icon-facebook"></a> 
       <a href="https://twitter.com/telerik" class="icon-twitter"></a> 
       <a href="https://plus.google.com/+telerik" class="icon-google"></a> 
       <a href="https://github.com/telerik" class="icon-github"></a> 
       <a href="https://www.linkedin.com/company/telerik" class="icon-linkedin"></a> 
       <a href="http://developer.telerik.com/feed" class="icon-rss"></a> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div class="Footer"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-1"> 
      <h4>Browse by Topic</h4> 
      <a href="https://developer.telerik.com/category/topics/net/">.NET</a> 
      <a href="https://developer.telerik.com/category/topics/cloud/">Cloud</a> 
      <a href="https://developer.telerik.com/category/topics/desktop/">Desktop</a> 
      <a href="https://developer.telerik.com/category/topics/iot/">IoT &amp; Bots</a> 
      <a href="https://developer.telerik.com/category/topics/machine-learning/">Machine Learning</a> 
      <a href="https://developer.telerik.com/category/topics/mobile-development/">Mobile</a> 
      <a href="https://developer.telerik.com/category/topics/progress-labs/">Progress Labs</a> 
      <a href="https://developer.telerik.com/category/topics/testing/">Testing</a> 
      <a href="https://developer.telerik.com/category/topics/web-development/">Web</a> 
     </div> 
     <div class="col-1"> 
      <h4>Browse by Content Type</h4> 
      <a href="https://developer.telerik.com/category/content-types/opinion/">Opinion</a> 
      <a href="https://developer.telerik.com/category/content-types/podcast/">Podcast</a> 
      <a href="https://developer.telerik.com/category/content-types/slackchats/">Slack Chats</a> 
      <a href="https://developer.telerik.com/category/content-types/tutorials/">Tutorials</a> 
      <a href="https://developer.telerik.com/category/content-types/video/">Video</a> 
     </div> 
     <div class="col-1 col--offset-1"> 
      <h4>Contact</h4> 
      <ul class="ListClean"> 
       <li><span>USA: </span>+1 888 365 2779</li> 
       <li><span>UK: </span>+44 13 4436 0444</li> 
       <li><span>India: </span>+91 124 4300987</li> 
       <li><span>Bulgaria: </span>+359 2 8099850</li> 
       <li><span>Australia: </span>+61 3 9805 8670</li> 
       <li><a href="mailto:sales@telerik.com">sales@telerik.com</a></li> 
      </ul> 
     </div> 
    </div> 
    <div class="Footer-Info"> 
     <a href="http://www.telerik.com/company/terms-of-use">Terms of Use</a>|
     <a href="http://www.telerik.com/company/feedback">Site Feedback</a>|
     <a href="http://www.telerik.com/company/privacy-policy">Privacy Policy</a> 
     <p>Copyright © , Progress Software Corporation and/or its subsidiaries or affiliates. All Rights Reserved.</p> 
     <p>Progress, Telerik, and certain product names used herein are trademarks or registered trademarks of Progress Software Corporation and/or one of its subsidiaries or affiliates in the U.S. and/or other countries. See <a href="https://www.progress.com/legal/trademarks">Trademarks</a> or appropriate markings.</p> 
    </div> 
   </div> 
  </div> 
  <script type="text/javascript">
var disqus_shortname = 'telerikdev';
/* * * DON'T EDIT BELOW THIS LINE * * */
(function () {
var s = document.createElement('script'); s.async = true;
s.type = 'text/javascript';
s.src = '//' + disqus_shortname + '.disqus.com/count.js';
(document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
}());
</script> 
  <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'telerikdev';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1 && nodes[i].parentNode.tagName == 'A') {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('data-dsqidentifier'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script');
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-includes/js/jquery/ui/core.min.js?ver=1.11.4"></script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-includes/js/jquery/ui/datepicker.min.js?ver=1.11.4"></script> 
  <script type="text/javascript">
jQuery(document).ready(function(jQuery){jQuery.datepicker.setDefaults({"closeText":"Close","currentText":"Today","monthNames":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthNamesShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"nextText":"Next","prevText":"Previous","dayNames":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"dayNamesShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"dayNamesMin":["S","M","T","W","T","F","S"],"dateFormat":"MM d, yy","firstDay":1,"isRTL":false});});
</script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-content/plugins/page-links-to/js/new-tab.min.js?ver=2.9.8"></script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-content/uploads/minqueue-cache/minqueue-d6bfbe77-a0e32db9.js"></script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-content/plugins/prism-wp/libs/prism/plugins/line-numbers/prism-line-numbers.min.js?ver=1.0.0"></script> 
  <script type="text/javascript" src="https://developer.telerik.com/wp-includes/js/wp-embed.min.js?ver=4.8.2"></script> 
  <script>
window.onload = function() {
    Gifffer();
}
</script>   
 </body>
</html>