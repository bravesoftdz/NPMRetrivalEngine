<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
  <title>Date/Epoch Time Converter - JavaScript Utilities/Tools - ESQSoft</title> 
  <meta name="description" content="
  This is a JavaScript utility for converting date-to-epoch time or epoch-to-date. 
  keywords: What is Epoch, Convert Epoch Time, Epoch Conversion Tool
  Be sure to bookmark us. Visit us at http://ESQSoft.com
"> 
  <meta name="keywords" content="date epoch time conversion converter convert epoc javascript epoch to date conversion date to epoch converter"> 
 </head>
 <body>
  <script type="text/javascript" src="../template/template1.js"></script> 
  <script type="text/javascript">
document.write(header())
</script> 
  <h1>Date/Epoch Converter</h1> 
  <form name="ivnForm" onsubmit="return false" style="margin:0;"> 
   <br>
   <br>
   <b>Option <u>1</u>: Enter a human readable date</b> 
   <h3> 
    <table width="420" style="border:1px black solid;border-left:0;border-right:0;background-color:#ffd;"> 
     <tbody>
      <tr> 
       <td class="content" nowrap>New Date:</td> 
       <td width="100"> <select name="month" accesskey="1" onchange="if(window.getDays) window.getDays(this,this.form.day,this.form.year)"> <option value="0">January</option> <option value="1">February</option> <option value="2">March</option> <option value="3">April</option> <option value="4">May</option> <option value="5">June</option> <option value="6">July</option> <option value="7">August</option> <option value="8">September</option> <option value="9">October</option> <option value="10">November</option> <option value="11">December</option> </select> </td> 
       <td width="50"> <select name="day" nchange="getDays(this.form.month,this.form.day,this.form.year)"></select> </td> 
       <td width="40"> <input type="text" name="year" maxlength="4" onchange="getDays(this.form.month,this.form.day,this.form.year)" value="" style="width:50px;"> </td> 
       <td width="150" nowrap>&nbsp;&nbsp; <script type="text/javascript">
      var html = '<select name="hour">'
      for(var i=0; i<=24; i++){ html+='<option value="'+i+'">'+i }
      html += '</select>:<select name="minute">'
      for(var i=0; i<=59; i++){ html+='<option value="'+i+'">'+i }
      html += '</select>:<select name="second">'
      for(var i=0; i<=59; i++){ html+='<option value="'+i+'">'+i }
      document.write(html)
      </script> </td> 
      </tr> 
      <tr> 
       <td align="right" width="100%" colspan="5"> <button accesskey="c" style="width:90px;" onclick="toEpoch(this.form.month,this.form.day,this.form.year,this.form.hour,this.form.minute,this.form.second)">To Epo<u>c</u>h</button> </td> 
      </tr> 
     </tbody>
    </table> </h3> 
   <br>
   <br>
   <b>Option <u>2</u>: Enter an epoch time value</b> 
   <h3> 
    <table width="420" style="border:1px black solid;border-left:0;border-right:0;background-color:#ffd;"> 
     <tbody>
      <tr> 
       <td class="content" nowrap>New Epoch Time Value:</td> 
       <td width="100%"><input name="epoch" accesskey="2" value="[|| form.epoch]"></td> 
      </tr> 
      <tr> 
       <td align="right" colspan="2"> <button style="width:90px;" onclick="document.getElementById('dynamo').innerHTML = toDate(this.form.epoch)" accesskey="o">T<u>o</u> Date</button> </td> 
      </tr> 
     </tbody>
    </table> </h3> 
   <br>
   <br>
   <b>Conversion Output:</b> 
   <h3> 
    <div id="dynamo" class="code" style="border:1px black solid;border-left:0;border-right:0;background-color:#ffd;height:100px;">
      (the conversion will appear here) 
    </div> <p><input type="checkbox" name="GMT" accesskey="g" onchange="populateDates();"> <u>G</u>MT (if unchecked, it uses your local time without attempting the offset.) </p></h3> 
  </form> 
  <p></p>
  <h1>Current Time (from your computer)</h1> 
  <h3> 
   <table width="100%" cellpadding="5"> 
    <tbody>
     <tr valign="top">
      <td> <b>Current Date/Time: (JavaScript)</b> <p></p>
       <div id="jdate1">
        (Sorry, it doesn't appear that your browser currently supports JavaScript.)
       </div> </td>
      <td> <b>Current Date/Time: (PerlScript)</b> <p></p>
       <div id="pdate1">
        (Sorry, it doesn't appear that you have 
        <a href="http://www.xav.com/perl/Components/Windows/PerlScript.html" target="_blank">PerlScript</a> installed.)
       </div> </td>
     </tr> 
    </tbody>
   </table> <p></p>
   <table width="100%" cellpadding="5"> 
    <tbody>
     <tr valign="top"> 
      <td colspan="2" style="border-top:1px black solid;"> This section shows the output of two client-side scripting languages: JavaScript and PerlScript. Why JavaScript? (It's arguably the de facto standard for client-side scripting on the web.) Why PerlScript? (I just thought it was cool that there is a PERL interpreter for browsers, rare though it is.) I've left out VBScript, ...sorry. How the output for this section is generated is really secondary to the core date-to-epoch and epoch-to-date conversion topic. It's relevance in this example is that DHTML techniques using a client-side scripting language is what updates this webpage with your input without a reload from the server. </td> 
     </tr> 
    </tbody>
   </table> </h3> 
  <p></p>
  <h1>What is Epoch</h1> 
  <h3> Epoch has a few meanings (see also <a href="http://dictionary.reference.com/search?q=epoch">http://dictionary.reference.com/search?q=epoch</a>). The definition that we'll use is "0" in computer time. While there are folks who will argue this, for our purposes, this "0" time on our calendar was January 1, 1970 00:00:00 GMT. Epoch is useful in the programming world because it allows us to mathematically compare dates with other dates or some other measure of time. Said another way, it allows us to use a programming algorithm to make decisions regarding a human readable date or time. See the examples of usage section below for more detail. </h3> 
  <p></p>
  <h1>How to Convert between Date and Epoch</h1> 
  <h3> I've had a number of inquiries into how to do the conversion. I figured folks interested in that level of detail would use the source code for this page to ascertain the approach used here. However, I suppose assuming everyone enjoys deciphering the idiosyncrasies of JavaScript for fun was a bit naive... my bad. I'll take a stab at explaining what the code does. <p>First off, the easiest way to get the current time in epoch (using JavaScript), is to call getTime() method of the JavaScript Date object and divide the return value by 1000. getTime returns the number of milliseconds elapsed, in your computer's timezone, since 1/1/1970 GMT. Because epoch is measured in seconds, you then want to divide the return value by 1000 to change milliseconds into seconds. Keep in mind that the JavaScript Date object will get it's time from your computer's clock. Here's a really simple example doing this. </p><p></p>
   <div id="ivnS1"> 
    <script type="text/javascript">
function epochExample1(){
  var d = new Date(); prompt('Cut/Paste into the converter to Test',(d.getTime()-d.getMilliseconds())/1000)
}
</script> 
    <a href="#" onclick="epochExample1(); return false;">Click to Show Current Epoch Time</a> 
   </div><p></p>
   <div id="ivnT1" class="code" style="height:125px;"></div> <script type="text/javascript">
if(document && document.getElementById){
  sObj = document.getElementById('ivnS1'); tObj = document.getElementById('ivnT1');
  if(sObj && sObj.innerHTML && tObj) tObj.innerHTML = '<xmp>'+sObj.innerHTML+'</xmp>'
}
</script> <p>Note: We're subtracting the milliseconds in order to get a whole number instead of a fraction. You could probably use parseInt similarly, in fact, here's another mini-example demonstrating the differences between (a) getTime()/1000 alone -- sometimes a fraction is returned, (b) method above, (getTime - milliseconds)/1000, and (c) parseInt(getTime/1000). </p>
   <div id="ivnS3"> 
    <script type="text/javascript">
function testMethods1(){
  /* testing differences between getTime/1000 vs. subtracting milliseconds vs. parseInt(getTime/1000) */
  var d1 = new Date();
  var d1t0 = d1.getTime()/1000;
  var d1t1 = (d1.getTime()-d1.getMilliseconds())/1000;
  var d1t2 = parseInt(d1.getTime()/1000);
  var msg = 'Testing various methods:'
  +'\n1) Date.getTime()/1000                          = '+d1t0
  +'\n2) (Date.getTime()-Date.getMilliseconds())/1000 = '+d1t1
  +'\n3) parseInt(Date.getTime()/1000)                = '+d1t2
  alert(msg)
  return false
}
</script> 
    <p><a href="#" onclick="return testMethods1()">Click to test</a> </p>
   </div><p></p>
   <div id="ivnT3" class="code" style="height:125px;"></div> <script type="text/javascript">
if(document && document.getElementById){
  sObj = document.getElementById('ivnS3'); tObj = document.getElementById('ivnT3');
  if(sObj && sObj.innerHTML && tObj) tObj.innerHTML = '<xmp>'+sObj.innerHTML+'</xmp>'
}



/* have the date in the example generated dynamically */
var d = new Date(); 
var syear = d.getFullYear() + 1;  // next year
var tyears = syear-1970;
var tdays = tyears * 365;
var tseconds = 0;
function dw(x){ document.write(x); }
function years_2_seconds(n){ return n * 86400 }
function days_2_seconds(n){ /* ? */ }
function sanity_check(n,note){
  if(!note) note = '';
  var d=new Date();
  alert('Converting what we\'ve got so far into seconds...\n\nEpoch = '+d.getTime(n)+'\nDate = '+d+'\n\n'+note);
  return false;
}
</script> <p><b>"Tools are all well and good, but I like pain, how do you do this manually"</b> </p><p>Er ok... if you have a human friendly date/time that you want to convert, but you are shall we say "tool averse" or you just enjoy mental gymnastics (good for you, btw), I'll take a stab at explaining a process for doing this manually. </p><p>Keep in mind that an accurate description of what the JavaScript Date Object methods are doing isn't in scope--rather my effort to explain will be conceptual. (So easy even a Geico customer could do it, my caveman friend likes to say ;-) </p><p>You could do a rough calculation as follows: </p><p>For kicks and giggles let's use for our example a day that many folks will recognize, April 15, <script>dw(syear);</script>. And, we'll say it's 08:30 in the morning just to add some spice to this effort. </p><p><b>Years</b> </p><p>Start with the year: <script>dw(syear);</script>. Subtract out 1970 from the year. <script>dw(syear);</script> - 1970 leaves us with <script>dw(syear-1970)</script> years. (<a href="#" onclick="return sanity_check(years_2_seconds(syear-1970),'Note: this isn\'t complete yet, it\'s short leap year days to get us to Jan 1.')">Sanity check</a>) </p><p>Convert the years to days. So <script>dw(syear-1970)</script> years multiplied by 365 days in each of those years. This gives us <script>dw((syear-1970)*365)</script> days. 
    <!--  (<a href="#" onclick="return sanity_check(cvt_2_seconds(syear-1970),'Note: this isn\'t complete yet, it\'s short leap year days to get us to Jan 1.')">Sanity check</a>) --> </p><p>Now the first relatively difficult issue--dealing with leap years. Like me, you may have had it explained to you that roughly every four years can be a leap year...with some caveats. Actually, (as a helpful individual has pointed out to me) the real rule is as follows: Years that are evenly divisible by 100 are not leap years, unless they are also evenly divisible by 400, in which case they are leap years, bringing the total number of days in that year to 366. </p><p>We need to examine each of the <script>dw(syear-1970)</script> years between our target and the 1970 starting point. (This is one reason a tool is so great. You don't have to brute force the effort.) Writing a quick script to determine the calculation... </p>
   <div id="ivnS4"> 
    <script type="text/javascript">
/* note: syear variable set in earlier script -- it's the starting year from our example */

function isLeapYear(year){
  if( !year.toString().match(/[0-9]{0,4}/) ){ /* invalid input */ return false; }
  if( (year % 4)==0 ){
    if( (year % 100)==0 ){
      if( (year % 400)==0 ){ return true; } 
      else{ return false; } 
    }
    else{ return true; }
  } 
  else { return false; }
}

var leap_days = 0;
var str = 'Leap years in the range are: ';
for(var i=syear; i>1970; i--){ 
  if(isLeapYear(i)){ leap_days++; str += ''+i+', '; }
}
str = str.replace(/,\s$/,'');
document.write('The number of extra days due to leap years between 1970 and '+syear+' is [' + leap_days +'] days. ');
document.write(str);
</script> 
   </div><p></p>
   <div id="ivnT4" class="code" style="height:125px;"></div> <script type="text/javascript">
if(document && document.getElementById){
  sObj = document.getElementById('ivnS4'); tObj = document.getElementById('ivnT4');
  if(sObj && sObj.innerHTML && tObj) tObj.innerHTML = '<xmp>'+sObj.innerHTML+'</xmp>'
}
</script> <p>Want to <a href="#" onclick="
  try{
    year = prompt('Enter a year to check',syear);
    bool = isLeapYear(year);
    alert( year + ' is'+ (bool?'':' NOT') +' a leap year.');
  } catch(e) { alert('Trapping error: '+e); }
  return false;
">sanity check</a> whether a specific year is a leap year? (Uses algorithm in isLeapYear function code example above to calculate leap year.) </p><p>So, we need to add <script>dw(leap_days +' to our original '+tdays+' which brings us to '+(tdays+leap_days)+' total days so far'); tdays += leap_days;</script>. </p><p><b>Months in Days</b> </p><p>Now we need to factor in the months in the current year and convert to days. In our example, we're using April 15, so we have 15 days for the current month. January has 31 days, February has 28--unless this year is a leap year in which case it has 29. If this is a leap year, we caught it in our leap year check above. March has 31 days. Adding these up we get 15 + 31 + 28 + 31 = 105 days. Adding that back in to our running total of days we get <script>dw(tdays+' + 105 = '+(tdays+105)); tdays += 105;</script> </p><p>Now that we've got all of the days, let's convert those to seconds. It turns out that there are roughly 86,400 seconds in each day. (See the chart below for more useful conversions.) So we take <script>dw(tdays);</script> and multiply it by 86400 to get <script>tseconds = tdays * 86400; dw(tseconds);</script> seconds which have elapsed up until the beginning of April 15. </p><p><b>Hours, Minutes, ...Seconds?</b> </p><p>Now we need to factor in the hours and minutes that have passed in the current hypothetical day. It's 08:30. In each minute there are 60 seconds, in each hour there are 60 minutes, so we convert the 8 o'clock hour as 8 * 60 * 60. This gives us <script>dw(8 * 60 * 60); tseconds += (8 * 60 * 60);</script>. Further, we'll convert the 30 minutes since the 8 o'clock hour into seconds, 30 * 60 which gives us <script>dw(30 * 60); tseconds += (30 * 60);</script>. And we add those all back into the seconds so far to get <script>dw(tseconds);</script> </p><p><b>Add a dash of craziness...</b> </p><p>Lastly, we need to calculate our offset from GMT. Er, and then factor in daylight savings (ugh). In my case, PST, we're 8 hours different--and we participate in daylight savings. So I add (8 * 60 * 60) + (1 * 60 * 60) which gives <script>var offset_plus_dt = (8*60*60)+(1*60*60);dw(offset_plus_dt);</script>, back into my running seconds to get my local time. <script>tseconds += offset_plus_dt; /* PST offset from GMT, 8 hours different */ dw(tseconds);</script> </p><p>This should be the epoch time we're looking for. (See sanity checking your results below.) So, we're saying <script>dw(tseconds);</script> have elapsed since 1/1/1970--"0" in computer time. It's not very friendly from a human standpoint, but it's pure gold from a computer programming standpoint. </p><p><b>Sanity checking your results</b> </p><p>Plug <script>dw(tseconds);</script> back into the converter and see how far off March 15, 2006 you are. It's likely that you are off by some amount, probably the offset for your own local timezone. In general, you should always sanity check your results. Two good tests are, checking your results against today (using the current epoch from getTime/1000 for example), and "0" time. If your mechanism passes both tests, that's a good sign. </p><p>Another interesting note: I've heard folks suggest using UTC rather than local time. UTC is certainly an appropriate "global" approach to time based applications, particularly when your audience spans the globe; In that case, having a standard time to fallback on is excellent. In order to apply it to your specific locale, you would calculate the target timezone offset from UTC. There are some strange issues that come up. Calculating an offset accurately can be really tough in the real world. For example, Arizona time while correct in Windows, isn't correct in JavaScript. And that's just one example. I'm not an expert on timezones, so I don't know how prolific timezone offset problems are. I'd appreciate feedback from anyone in the know. </p></h3> 
  <p></p>
  <h1>Examples of Usage</h1> 
  <h3> Of course, the most relevant question in all of this is "why would I want to do any of this?" I've had the need for this arise many times. One notable example which occurred while working for a web hosting company was that we wanted to turn messaging chunks on/off 3 days after a new signup for services. We had a marketing manager that wanted to play some messaging to our audience of webmasters three days into their experience. Because there is a steady inflow of customers, the exercise is an ongoing one, and relative to each specific account. We needed a way to identify a member of the 3+ day audience and then some logic to trigger the messaging. In turning that need into programming routines, we did the following steps. 
   <ol> 
    <li>First, we stored the epoch value of the date of each signup (for example, Jan 1, 2003 is 1041459471 in epoch). Now that the date value is an integer, we can do math with it. </li>
    <li>Second, we calculate 3 days in epoch measures (seconds) as follows... (86400 * 3) </li>
    <li>Third, compare the current time with the signup time, plus the 3 days epoch value. </li>
   </ol> <p>By making signup date a variable, this rule can apply to anyone for whom we want to know 3 days into the future of their signup. <br>ex: $signup_date = 1041459471 (or whatever the epoch is for any given site) </p><pre>
if ($current_time &gt; ($signup_date + (86400 * 3))) { 
  /*  ...then this site was signed up more than 3 days ago
        show them the relevant message
  */
}
</pre> </h3> 
  <p></p>
  <h1>Common Time Measures in Epoch</h1> 
  <h3> 1 Millisecond = 1/1000 in Epoch (used frequently with JavaScript conversions) <br>1 Second = 1 in Epoch <br>1 Minute = 60 in Epoch <br>10 Minutes = 600 in Epoch <br>1 Hour = 3600 in Epoch <br>6 Hours = 21600 in Epoch <br>12 Hours = 43200 in Epoch <br>1 Day = 86400 in Epoch (24 Hours) <br>1 Week = 604800 in Epoch (7 Days / 168 Hours) <br>1 Month = (see below... number of days in the month) <br>&nbsp;28 Days = 2419200 in Epoch (672 Hours) <br>&nbsp;29 Days = 2505600 in Epoch (696 Hours) <br>&nbsp;30 Days = 2592000 in Epoch (720 Hours) <br>&nbsp;31 Days = 2678400 in Epoch (744 Hours) <br>&nbsp;AVERAGE MONTHS IN YEAR = 2628000 in Epoch <br>&nbsp;&nbsp;(365 / 12 = 30.416666666666666666666666666667) (average months) <br>&nbsp;&nbsp;(30.416666666666666666666666666667 * 86400 = 2628000) (average months in Epoch) <br>1 Year = 31536000 in Epoch (365 days * 86400 seconds) </h3> 
  <p></p>
  <h1>Source Code for Converter and Examples</h1> 
  <h3> 
   <div id="ivnS2"> 
    <script type="text/javascript">
/*
  Date/Epoch Functions
  Author: Thomas Ballard (http://thomas.ballard.ws)

  Note: slightly polluted to attempt to support a GMT/non-GMT (local) timezone offset feature. 
  Hack and slash resulted in a form input having a toggle state... but these functions need 
  to know that form and input to access the property for evaluation. Need to come back 
  and make these methods more agnostic.
*/
if(!window.dDate) window.dDate = new Date()


window.getEpoch = function(){
  var GMT = document.ivnForm.GMT.checked
  if(GMT){ 
    var x = parseInt(Date.UTC(dDate.getUTCFullYear(),dDate.getUTCMonth(),dDate.getUTCDate(),dDate.getUTCHours(),dDate.getUTCMinutes(),dDate.getUTCSeconds(),dDate.getUTCMilliseconds())/1000);
    return x;
  } else {
    var x = (dDate.getTime()-dDate.getMilliseconds())/1000;
//    x += dDate.getTimezoneOffset();
    return x;
  }
}



window.getDays = function(mObj,dObj,yObj){
  // build array of days in a select container based on selected month and year
  iMonth=parseInt(mObj.options[mObj.selectedIndex].value)+1
  iYear=(yObj.value?yObj.value:1900);

  var iDays=31;
  switch(iMonth){ /* determine the number of days this month including leap years */
    case 4: case 6: case 9: case 11:  --iDays; break;
    case 2: iDays=29; if (!((iYear%4==0)&&(iYear%100!= 0))||(iYear%400== 0)) --iDays;
  }

  dObj.options.length = 0;
  for(var i=0; i<iDays; i++){
    dObj.options[i] = new Option(i+1,i+1)
  }
}


window.toDate = function(eObj){
  var mEpoch = parseInt(eObj.value); 
  if(mEpoch<10000000000) mEpoch *= 1000; // convert to milliseconds (Epoch is usually expressed in seconds, but Javascript uses Milliseconds)

  dDate.setTime(mEpoch)
  return dDate;
}


window.toEpoch = function(mObj,dObj,yObj,hrObj,minObj,secObj){
  var month = mObj.options[mObj.selectedIndex].value
  var day = dObj.options[dObj.selectedIndex].value
  var year = yObj.value
  var hour = hrObj.options[hrObj.selectedIndex].value
  var minute = minObj.options[minObj.selectedIndex].value
  var second = secObj.options[secObj.selectedIndex].value

  //alert(month+']['+day+']['+year)
  dDate.setMonth(month,day)
  dDate.setFullYear(year)
  dDate.setHours(hour,minute,second)
  //alert(dDate)

  var zObj = document.getElementById('dynamo')
  zObj.innerHTML = window.getEpoch()
  if(window && window.clipboardData && window.clipboardData.setData)
    bResult = window.clipboardData.setData("Text",zObj.innerHTML); //stuff the text onto the clipboard

}
</script> 
    <script type="text/javascript">
function populateDates(){
  var fobj = document.forms.ivnForm
  if(fobj.GMT.checked){
    // GMT TIME
    window.dDate = new Date(Date.UTC(dDate.getUTCFullYear(),dDate.getUTCMonth(),dDate.getUTCDate(),dDate.getUTCHours(),dDate.getUTCMinutes(),dDate.getUTCSeconds(),dDate.getUTCMilliseconds()));
    fobj.month.selectedIndex = dDate.getUTCMonth(); // set initial month to current
    fobj.year.value = dDate.getUTCFullYear()
    getDays(fobj.month,fobj.day,fobj.year)
    fobj.day.selectedIndex = dDate.getUTCDate()-1
    fobj.epoch.value = window.getEpoch()
    fobj.hour.selectedIndex = dDate.getUTCHours();
    fobj.minute.selectedIndex = dDate.getUTCMinutes();
    fobj.second.selectedIndex = dDate.getUTCSeconds();
  } else {
    // LOCAL TIME
    window.dDate = new Date();
    fobj.month.selectedIndex = dDate.getMonth(); // set initial month to current
    fobj.year.value = dDate.getFullYear()
    getDays(fobj.month,fobj.day,fobj.year)
    fobj.day.selectedIndex = dDate.getDate()-1
    fobj.epoch.value = window.getEpoch()
    fobj.hour.selectedIndex = dDate.getHours();
    fobj.minute.selectedIndex = dDate.getMinutes();
    fobj.second.selectedIndex = dDate.getSeconds();
  }
  
  var GMT = document.ivnForm.GMT.checked
  if(GMT){
    var html = parseInt(Date.UTC(dDate.getUTCFullYear(),dDate.getUTCMonth(),dDate.getUTCDate(),dDate.getUTCHours(),dDate.getUTCMinutes(),dDate.getUTCSeconds(),dDate.getUTCMilliseconds())/1000)+' (Epoch)'
    + '<br>'+dDate.toUTCString()+' (Standard)'
  } else {
    var html = (dDate.getTime()-dDate.getMilliseconds())/1000+' (Epoch)'
    + '<br>'+dDate+' (Standard)'
  }
  if(document && document.getElementById){
    obj = document.getElementById('jdate1')
    if(obj) obj.innerHTML = html
  }
}
populateDates();
</script> 
    <script type="text/perlscript">
$obj = $window->document->getElementById('pdate1');
$obj->{innerHTML} = time . " (Epoch)<br>" . localtime(time) . " (Standard)";
</script> 
   </div><p></p>
   <div id="ivnT2" class="code"></div> <script type="text/javascript">
if(document && document.getElementById){
  sObj = document.getElementById('ivnS2'); tObj = document.getElementById('ivnT2');
  if(sObj && sObj.innerHTML && tObj) tObj.innerHTML = '<xmp>'+sObj.innerHTML+'</xmp>'
}
</script> </h3> 
  <p></p>
  <h1>Other Popular and Related Resources</h1> 
  <ul class="list1"> 
   <li><a href="http://www.esqsoft.com/javascript/expose-properties-and-methods-of-an-object.htm">Expose the properties and methods of an Object</a> </li>
   <li><a href="http://www.thomas.ballard.ws/notes/ccstal-html-templates-described.htm">CCSTAL - A method for client-side dynamic templating</a> </li>
  </ul> 
  <p></p>
  <h2>Additional Keywords: date epoch time conversion converter convert epoc javascript epoch to date conversion date to epoch converter</h2> 
  <!-- end: content --> 
  <script type="text/javascript">
document.write(footer(''))
</script>
 </body>
</html>