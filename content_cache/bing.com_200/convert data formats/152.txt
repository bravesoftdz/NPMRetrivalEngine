<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <meta http-equiv="language" content="en"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta name="author" content="Michael Scharhag"> 
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"> 
  <link rel="stylesheet" property="stylesheet" href="/res/css/styles-4fe2d746e0757c96bcb4e8f60ad2e1c5.css"> 
  <link rel="icon" type="image/x-icon" href="/res/images/favicon.ico"> 
  <link rel="apple-touch-icon" href="/res/images/apple-touch-icon.png"> 
  <link rel="alternate" type="application/atom+xml" title="Michael Scharhag's java development blog" href="http://www.mscharhag.com/feeds/atom"> 
  <title>Java 8 Date Time API - JSR 310</title> 
  <meta name="description" content="Java 8 added a new API for working with date and time values (JSR-310). This post shows various examples how the new date/time API can be used."> 
  <meta name="keywords" content="Java"> 
  <link rel="canonical" href="http://www.mscharhag.com/java/java-8-date-time-api"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:site" content="@mscharhag"> 
  <meta name="twitter:creator" content="@mscharhag"> 
  <meta name="twitter:url" content="http://www.mscharhag.com/java/java-8-date-time-api"> 
  <meta name="twitter:description" content="Java 8 added a new API for working with date and time values (JSR-310). This post shows various examples how the new date/time API can be used."> 
  <meta name="twitter:title" content="A deeper look into the Java 8 Date and Time API"> 
 </head> 
 <body> 
  <div class="cookie-hint"> 
   <div class="container"> 
    <span>By browsing the site you agree to the use of cookies (<a href="/disclaimer">more</a>)</span> 
    <a id="close-cookie-hint" href="#">Accept an close</a> 
   </div> 
  </div> 
  <div class="container"> 
   <div class="row header"> 
    <header> 
     <a title="Home" class="banner hidden-xs" href="/"> <img alt="header" src="/res/images/header-large-5c43f449754e4d2657d4df887fc812a1.png"> </a> 
     <div class="info"> 
      <p class="title"> <a title="Home" href="/">mscharhag, Programming and Stuff;</a> <span class="title-comment hidden-sm hidden-xs">// Blog of Michael Scharhag</span> </p> 
      <p class="subtitle">A blog about programming and software development topics, mostly focused on Java technologies including Java EE, Spring and Grails.</p> 
      <div class="line"></div> 
     </div> 
    </header> 
   </div> 
   <div class="row main"> 
    <main> 
     <div class="col-md-9 col-sm-8 col-xs-12"> 
      <div class="post post-full"> 
       <p class="date">Monday, 24 February, 2014</p> 
       <h1 class="title">A deeper look into the Java 8 Date and Time API</h1> 
       <div class="text">
        <p>Within this post we will have a deeper look into the new Date/Time API we get with Java 8 (<a href="https://java.net/projects/jsr-310/">JSR 310</a>). Please note that this post is mainly driven by code examples that show the new API functionality. I think the examples are self-explanatory so I did not spent much time writing text around them :-)<br> <br> Let's get started!</p> 
        <h2>Working with date and time objects</h2> 
        <p>All classes of the Java 8 Date/Time API are located within the <span class="code">java.time</span> package. The first class we want to look at is <span class="code">java.time.LocalDate</span>. A <a href="https://docs.oracle.com/javase/8/docs/api/java/time/LocalDate.html" title="Java 8 LocalDate API documentation"><span class="code">LocalDate</span></a> represents a year-month-day date without time. We start with creating new <span class="code">LocalDate</span> instances:</p> 
        <pre class="brush: java">
//&nbsp;the&nbsp;current&nbsp;date
LocalDate&nbsp;currentDate&nbsp;=&nbsp;LocalDate.now();

//&nbsp;2014-02-10
LocalDate&nbsp;tenthFeb2014&nbsp;=&nbsp;LocalDate.of(2014,&nbsp;Month.FEBRUARY,&nbsp;10);

//&nbsp;months&nbsp;values&nbsp;start&nbsp;at&nbsp;1&nbsp;(2014-08-01)
LocalDate&nbsp;firstAug2014&nbsp;=&nbsp;LocalDate.of(2014,&nbsp;8,&nbsp;1);

//&nbsp;the&nbsp;65th&nbsp;day&nbsp;of&nbsp;2010&nbsp;(2010-03-06)
LocalDate&nbsp;sixtyFifthDayOf2010&nbsp;=&nbsp;LocalDate.ofYearDay(2010,&nbsp;65);</pre> 
        <p><a href="https://docs.oracle.com/javase/8/docs/api/java/time/LocalTime.html" title="Java 8 LocalTime API documentation"><span class="code">LocalTime</span></a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html" title="Java 8 LocalDateTime API documentation"><span class="code">LocalDateTime</span></a> are the next classes we look at. Both work similar to <span class="code">LocalDate</span>. A <span class="code">LocalTime</span> works with time (without dates) while <span class="code">LocalDateTime</span> combines date and time in one class:</p> 
        <pre class="brush: java">
LocalTime&nbsp;currentTime&nbsp;=&nbsp;LocalTime.now();&nbsp;//&nbsp;current&nbsp;time
LocalTime&nbsp;midday&nbsp;=&nbsp;LocalTime.of(12,&nbsp;0);&nbsp;//&nbsp;12:00
LocalTime&nbsp;afterMidday&nbsp;=&nbsp;LocalTime.of(13,&nbsp;30,&nbsp;15);&nbsp;//&nbsp;13:30:15

//&nbsp;12345th&nbsp;second&nbsp;of&nbsp;day&nbsp;(03:25:45)
LocalTime&nbsp;fromSecondsOfDay&nbsp;=&nbsp;LocalTime.ofSecondOfDay(12345);

//&nbsp;dates&nbsp;with&nbsp;times,&nbsp;e.g.&nbsp;2014-02-18 19:08:37.950
LocalDateTime&nbsp;currentDateTime&nbsp;=&nbsp;LocalDateTime.now();

//&nbsp;2014-10-02&nbsp;12:30
LocalDateTime&nbsp;secondAug2014&nbsp;=&nbsp;LocalDateTime.of(2014,&nbsp;10,&nbsp;2,&nbsp;12,&nbsp;30);

//&nbsp;2014-12-24&nbsp;12:00
LocalDateTime&nbsp;christmas2014&nbsp;=&nbsp;LocalDateTime.of(2014,&nbsp;Month.DECEMBER,&nbsp;24,&nbsp;12,&nbsp;0);</pre> 
        <p>By default <span class="code">LocalDate</span>/<span class="code">Time</span> classes will use the system clock in the default time zone. We can change this by providing a time zone or an alternative <a href="https://docs.oracle.com/javase/8/docs/api/java/time/Clock.html" title="Java 8 Clock API documentation"><span class="code">Clock</span></a> implementation:</p> 
        <pre class="brush: java">
//&nbsp;current&nbsp;(local)&nbsp;time&nbsp;in&nbsp;Los&nbsp;Angeles
LocalTime&nbsp;currentTimeInLosAngeles&nbsp;=&nbsp;LocalTime.now(ZoneId.of("America/Los_Angeles"));

//&nbsp;current&nbsp;time&nbsp;in&nbsp;UTC&nbsp;time&nbsp;zone
LocalTime&nbsp;nowInUtc&nbsp;=&nbsp;LocalTime.now(Clock.systemUTC());</pre> 
        <p>From <span class="code">LocalDate</span>/<span class="code">Time</span> objects we can get all sorts of useful information we might need. Some examples:</p> 
        <pre class="brush: java">
LocalDate&nbsp;date&nbsp;=&nbsp;LocalDate.of(2014,&nbsp;2,&nbsp;15);&nbsp;//&nbsp;2014-02-15

boolean&nbsp;isBefore&nbsp;=&nbsp;LocalDate.now().isBefore(date);&nbsp;//&nbsp;false

//&nbsp;information&nbsp;about&nbsp;the&nbsp;month
Month&nbsp;february&nbsp;=&nbsp;date.getMonth();&nbsp;//&nbsp;FEBRUARY
int&nbsp;februaryIntValue&nbsp;=&nbsp;february.getValue();&nbsp;//&nbsp;2
int&nbsp;minLength&nbsp;=&nbsp;february.minLength();&nbsp;//&nbsp;28
int&nbsp;maxLength&nbsp;=&nbsp;february.maxLength();&nbsp;//&nbsp;29
Month&nbsp;firstMonthOfQuarter&nbsp;=&nbsp;february.firstMonthOfQuarter();&nbsp;//&nbsp;JANUARY

//&nbsp;information&nbsp;about&nbsp;the&nbsp;year
int&nbsp;year&nbsp;=&nbsp;date.getYear();&nbsp;//&nbsp;2014
int&nbsp;dayOfYear&nbsp;=&nbsp;date.getDayOfYear();&nbsp;//&nbsp;46
int&nbsp;lengthOfYear&nbsp;=&nbsp;date.lengthOfYear();&nbsp;//&nbsp;365
boolean&nbsp;isLeapYear&nbsp;=&nbsp;date.isLeapYear();&nbsp;//&nbsp;false

DayOfWeek&nbsp;dayOfWeek&nbsp;=&nbsp;date.getDayOfWeek();
int&nbsp;dayOfWeekIntValue&nbsp;=&nbsp;dayOfWeek.getValue();&nbsp;//&nbsp;6
String&nbsp;dayOfWeekName&nbsp;=&nbsp;dayOfWeek.name();&nbsp;//&nbsp;SATURDAY

int&nbsp;dayOfMonth&nbsp;=&nbsp;date.getDayOfMonth();&nbsp;//&nbsp;15
LocalDateTime&nbsp;startOfDay&nbsp;=&nbsp;date.atStartOfDay();&nbsp;//&nbsp;2014-02-15 00:00

//&nbsp;time&nbsp;information
LocalTime&nbsp;time&nbsp;=&nbsp;LocalTime.of(15,&nbsp;30);&nbsp;//&nbsp;15:30:00
int&nbsp;hour&nbsp;=&nbsp;time.getHour();&nbsp;//&nbsp;15
int&nbsp;second&nbsp;=&nbsp;time.getSecond();&nbsp;//&nbsp;0
int&nbsp;minute&nbsp;=&nbsp;time.getMinute();&nbsp;//&nbsp;30
int&nbsp;secondOfDay&nbsp;=&nbsp;time.toSecondOfDay();&nbsp;//&nbsp;55800</pre> 
        <p>Some information can be obtained without providing a specific date. For example, we can use the <a href="https://docs.oracle.com/javase/8/docs/api/java/time/Year.html" title="Java 8 Year API documentation"><span class="code">Year</span></a> class if we need information about a specific year:</p> 
        <pre class="brush: java">
Year&nbsp;currentYear&nbsp;=&nbsp;Year.now();
Year&nbsp;twoThousand&nbsp;=&nbsp;Year.of(2000);
boolean&nbsp;isLeap&nbsp;=&nbsp;currentYear.isLeap();&nbsp;//&nbsp;false
int&nbsp;length&nbsp;=&nbsp;currentYear.length();&nbsp;//&nbsp;365

//&nbsp;sixtyFourth&nbsp;day&nbsp;of&nbsp;2014&nbsp;(2014-03-05)
LocalDate&nbsp;date&nbsp;=&nbsp;Year.of(2014).atDay(64);</pre> 
        <p>We can use the <span class="code">plus</span> and <span class="code">minus</span> methods to add or subtract specific amounts of time. Note that these methods always return a new instance (Java 8 date/time classes are immutable).</p> 
        <pre class="brush: java">
LocalDate&nbsp;tomorrow&nbsp;=&nbsp;LocalDate.now().plusDays(1);

//&nbsp;before&nbsp;5&nbsp;houres&nbsp;and&nbsp;30&nbsp;minutes
LocalDateTime&nbsp;dateTime&nbsp;=&nbsp;LocalDateTime.now().minusHours(5).minusMinutes(30);</pre> 
        <p><span class="code">TemporalAdjusters</span> are another nice way for date manipulation. <span class="code"><a href="https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAdjuster.html" title="Java 8 TemporalAdjuster API documentation">TemporalAdjuster</a></span> is a single method interface that is used to separate the process of adjustment from actual date/time objects. A set of common <span class="code">TemporalAdjusters</span> can be accessed using static methods of the <span class="code"><a href="https://docs.oracle.com/javase/8/docs/api/java/time/temporal/TemporalAdjusters.html" title="Java 8 TemporalAdjusters API documentation">TemporalAdjusters</a></span> class.</p> 
        <pre class="brush: java">
LocalDate&nbsp;date&nbsp;=&nbsp;LocalDate.of(2014,&nbsp;Month.FEBRUARY,&nbsp;25);&nbsp;//&nbsp;2014-02-25

//&nbsp;first&nbsp;day&nbsp;of&nbsp;february&nbsp;2014&nbsp;(2014-02-01)
LocalDate&nbsp;firstDayOfMonth&nbsp;=&nbsp;date.with(TemporalAdjusters.firstDayOfMonth());

//&nbsp;last&nbsp;day&nbsp;of&nbsp;february&nbsp;2014&nbsp;(2014-02-28)
LocalDate&nbsp;lastDayOfMonth&nbsp;=&nbsp;date.with(TemporalAdjusters.lastDayOfMonth());</pre> 
        <p>Static imports make this more fluent to read:</p> 
        <pre class="brush: java">
import&nbsp;static&nbsp;java.time.temporal.TemporalAdjusters.*;

...

//&nbsp;last&nbsp;day&nbsp;of&nbsp;2014&nbsp;(2014-12-31)
LocalDate&nbsp;lastDayOfYear&nbsp;=&nbsp;date.with(lastDayOfYear());

//&nbsp;first&nbsp;day&nbsp;of&nbsp;next&nbsp;month&nbsp;(2014-03-01)
LocalDate&nbsp;firstDayOfNextMonth&nbsp;=&nbsp;date.with(firstDayOfNextMonth());

//&nbsp;next&nbsp;sunday&nbsp;(2014-03-02)
LocalDate&nbsp;nextSunday&nbsp;=&nbsp;date.with(next(DayOfWeek.SUNDAY));</pre> 
        <h2>Time zones</h2> 
        <p>Working with time zones is another big topic that is simplified by the new API. The <span class="code">LocalDate</span>/<span class="code">Time</span> classes we have seen so far do not contain information about a time zone. If we want to work with a date/time in a certain time zone we can use <a href="https://docs.oracle.com/javase/8/docs/api/java/time/ZonedDateTime.html" title="Java 8 ZonedDateTime API documentation"><span class="code">ZonedDateTime</span></a> or <a href="https://docs.oracle.com/javase/8/docs/api/java/time/OffsetDateTime.html" title="Java 8 OffsetDateTime API documentation"><span class="code">OffsetDateTime</span></a>:</p> 
        <pre class="brush: java">
ZoneId&nbsp;losAngeles&nbsp;=&nbsp;ZoneId.of("America/Los_Angeles");
ZoneId&nbsp;berlin&nbsp;=&nbsp;ZoneId.of("Europe/Berlin");

//&nbsp;2014-02-20&nbsp;12:00
LocalDateTime&nbsp;dateTime&nbsp;=&nbsp;LocalDateTime.of(2014,&nbsp;02,&nbsp;20,&nbsp;12,&nbsp;0);

//&nbsp;2014-02-20&nbsp;12:00,&nbsp;Europe/Berlin&nbsp;(+01:00)
ZonedDateTime&nbsp;berlinDateTime&nbsp;=&nbsp;ZonedDateTime.of(dateTime,&nbsp;berlin);

//&nbsp;2014-02-20&nbsp;03:00,&nbsp;America/Los_Angeles&nbsp;(-08:00)
ZonedDateTime&nbsp;losAngelesDateTime&nbsp;=&nbsp;berlinDateTime.withZoneSameInstant(losAngeles);

int&nbsp;offsetInSeconds&nbsp;=&nbsp;losAngelesDateTime.getOffset().getTotalSeconds();&nbsp;//&nbsp;-28800

//&nbsp;a&nbsp;collection&nbsp;of&nbsp;all&nbsp;available&nbsp;zones
Set&lt;String&gt;&nbsp;allZoneIds&nbsp;=&nbsp;ZoneId.getAvailableZoneIds();

//&nbsp;using&nbsp;offsets
LocalDateTime&nbsp;date&nbsp;=&nbsp;LocalDateTime.of(2013,&nbsp;Month.JULY,&nbsp;20,&nbsp;3,&nbsp;30);
ZoneOffset&nbsp;offset&nbsp;=&nbsp;ZoneOffset.of("+05:00");

//&nbsp;2013-07-20 03:30&nbsp;+05:00
OffsetDateTime&nbsp;plusFive&nbsp;=&nbsp;OffsetDateTime.of(date,&nbsp;offset);

//&nbsp;2013-07-19&nbsp;20:30&nbsp;-02:00
OffsetDateTime&nbsp;minusTwo&nbsp;=&nbsp;plusFive.withOffsetSameInstant(ZoneOffset.ofHours(-2));</pre> 
        <h2>Timestamps</h2> 
        <p>Classes like <span class="code">LocalDate</span> and <span class="code">ZonedDateTime</span> provide a human view on time. However, often we need to work with time viewed from a machine perspective. For this we can use the <a href="https://docs.oracle.com/javase/8/docs/api/java/time/Instant.html" title="Java 8 Instant API documentation"><span class="code">Instant</span></a> class which represents timestamps. An <span class="code">Instant</span> counts the time beginning from the first second of January 1, 1970 (1970-01-01 00:00:00) also called the <a href="http://download.java.net/jdk8/docs/api/java/time/Instant.html#EPOCH">EPOCH</a>. Instant values can be negative if they occured before the epoch. They follow <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> the standard for representing date and time.</p> 
        <pre class="brush: java">
//&nbsp;current&nbsp;time
Instant&nbsp;now&nbsp;=&nbsp;Instant.now();

//&nbsp;from&nbsp;unix&nbsp;timestamp,&nbsp;2010-01-01&nbsp;12:00:00
Instant&nbsp;fromUnixTimestamp&nbsp;=&nbsp;Instant.ofEpochSecond(1262347200);

//&nbsp;same&nbsp;time&nbsp;in&nbsp;millis
Instant&nbsp;fromEpochMilli&nbsp;=&nbsp;Instant.ofEpochMilli(1262347200000l);

//&nbsp;parsing&nbsp;from&nbsp;ISO&nbsp;8601
Instant&nbsp;fromIso8601&nbsp;=&nbsp;Instant.parse("2010-01-01T12:00:00Z");

//&nbsp;toString()&nbsp;returns&nbsp;ISO&nbsp;8601&nbsp;format, e.g. 2014-02-15T01:02:03Z
String&nbsp;toIso8601&nbsp;=&nbsp;now.toString();

//&nbsp;as&nbsp;unix&nbsp;timestamp
long&nbsp;toUnixTimestamp&nbsp;=&nbsp;now.getEpochSecond();

//&nbsp;in&nbsp;millis
long&nbsp;toEpochMillis&nbsp;=&nbsp;now.toEpochMilli();

// plus/minus methods are available too
Instant&nbsp;nowPlusTenSeconds&nbsp;=&nbsp;now.plusSeconds(10);</pre> 
        <h2>Periods and Durations</h2> 
        <p><a href="https://docs.oracle.com/javase/8/docs/api/java/time/Period.html" title="Java 8 Period API documentation"><span class="code">Period</span></a> and <a href="https://docs.oracle.com/javase/8/docs/api/java/time/Duration.html" title="Java 8 Duration API documentation"><span class="code">Duration</span></a> are two other important classes. Like the names suggest they represent a quantity or amount of time. A <span class="code">Period</span> uses date based values (years, months, days) while a <span class="code">Duration</span> uses seconds or nanoseconds to define an amount of time. <span class="code">Duration</span> is most suitable when working with Instants and machine time. <span class="code">Periods</span> and <span class="code">Durations </span>can contain negative values if the end point occurs before the starting point.</p> 
        <pre class="brush: java">
//&nbsp;periods

LocalDate&nbsp;firstDate&nbsp;=&nbsp;LocalDate.of(2010,&nbsp;5,&nbsp;17);&nbsp;//&nbsp;2010-05-17
LocalDate&nbsp;secondDate&nbsp;=&nbsp;LocalDate.of(2015,&nbsp;3,&nbsp;7);&nbsp;//&nbsp;2015-03-07
Period&nbsp;period&nbsp;=&nbsp;Period.between(firstDate,&nbsp;secondDate);

int&nbsp;days&nbsp;=&nbsp;period.getDays();&nbsp;//&nbsp;18
int&nbsp;months&nbsp;=&nbsp;period.getMonths();&nbsp;//&nbsp;9
int&nbsp;years&nbsp;=&nbsp;period.getYears();&nbsp;//&nbsp;4
boolean&nbsp;isNegative&nbsp;=&nbsp;period.isNegative();&nbsp;//&nbsp;false

Period&nbsp;twoMonthsAndFiveDays&nbsp;=&nbsp;Period.ofMonths(2).plusDays(5);
LocalDate&nbsp;sixthOfJanuary&nbsp;=&nbsp;LocalDate.of(2014,&nbsp;1,&nbsp;6);

//&nbsp;add&nbsp;two&nbsp;months&nbsp;and&nbsp;five&nbsp;days&nbsp;to&nbsp;2014-01-06,&nbsp;result&nbsp;is&nbsp;2014-03-11
LocalDate&nbsp;eleventhOfMarch&nbsp;=&nbsp;sixthOfJanuary.plus(twoMonthsAndFiveDays);


//&nbsp;durations

Instant&nbsp;firstInstant=&nbsp;Instant.ofEpochSecond(&nbsp;1294881180&nbsp;);&nbsp;//&nbsp;2011-01-13&nbsp;01:13
Instant&nbsp;secondInstant&nbsp;=&nbsp;Instant.ofEpochSecond(1294708260);&nbsp;//&nbsp;2011-01-11&nbsp;01:11

Duration&nbsp;between&nbsp;=&nbsp;Duration.between(firstInstant,&nbsp;secondInstant);

//&nbsp;negative&nbsp;because&nbsp;firstInstant&nbsp;is&nbsp;after&nbsp;secondInstant&nbsp;(-172920)
long&nbsp;seconds&nbsp;=&nbsp;between.getSeconds();

//&nbsp;get&nbsp;absolute&nbsp;result&nbsp;in&nbsp;minutes&nbsp;(2882)
long&nbsp;absoluteResult&nbsp;=&nbsp;between.abs().toMinutes();

//&nbsp;two&nbsp;hours&nbsp;in&nbsp;seconds&nbsp;(7200)
long&nbsp;twoHoursInSeconds&nbsp;=&nbsp;Duration.ofHours(2).getSeconds();</pre> 
        <h2>Formatting and parsing</h2> 
        <p>Formatting and parsing is another big topic when working with dates and times. In Java 8 this can be accomplished by using the <span class="code">format()</span> and <span class="code">parse()</span> methods:</p> 
        <pre class="brush: java">
//&nbsp;2014-04-01&nbsp;10:45
LocalDateTime&nbsp;dateTime&nbsp;=&nbsp;LocalDateTime.of(2014,&nbsp;Month.APRIL,&nbsp;1,&nbsp;10,&nbsp;45);

//&nbsp;format&nbsp;as&nbsp;basic&nbsp;ISO&nbsp;date&nbsp;format&nbsp;(20140220)
String&nbsp;asBasicIsoDate&nbsp;=&nbsp;dateTime.format(DateTimeFormatter.BASIC_ISO_DATE);

//&nbsp;format&nbsp;as&nbsp;ISO&nbsp;week&nbsp;date&nbsp;(2014-W08-4)
String&nbsp;asIsoWeekDate&nbsp;=&nbsp;dateTime.format(DateTimeFormatter.ISO_WEEK_DATE);

//&nbsp;format&nbsp;ISO&nbsp;date&nbsp;time&nbsp;(2014-02-20T20:04:05.867)
String&nbsp;asIsoDateTime&nbsp;=&nbsp;dateTime.format(DateTimeFormatter.ISO_DATE_TIME);

//&nbsp;using&nbsp;a&nbsp;custom&nbsp;pattern&nbsp;(01/04/2014)
String&nbsp;asCustomPattern&nbsp;=&nbsp;dateTime.format(DateTimeFormatter.ofPattern("dd/MM/yyyy"));

//&nbsp;french&nbsp;date&nbsp;formatting&nbsp;(1.&nbsp;avril&nbsp;2014)
String&nbsp;frenchDate&nbsp;=&nbsp;dateTime.format(DateTimeFormatter.ofPattern("d.&nbsp;MMMM&nbsp;yyyy",&nbsp;new&nbsp;Locale("fr")));

//&nbsp;using&nbsp;short&nbsp;german&nbsp;date/time&nbsp;formatting&nbsp;(01.04.14&nbsp;10:45)
DateTimeFormatter&nbsp;formatter&nbsp;=&nbsp;DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)
&nbsp;&nbsp;&nbsp;&nbsp;.withLocale(new&nbsp;Locale("de"));
String&nbsp;germanDateTime&nbsp;=&nbsp;dateTime.format(formatter);

//&nbsp;parsing&nbsp;date&nbsp;strings
LocalDate&nbsp;fromIsoDate&nbsp;=&nbsp;LocalDate.parse("2014-01-20");
LocalDate&nbsp;fromIsoWeekDate&nbsp;=&nbsp;LocalDate.parse("2014-W14-2",&nbsp;DateTimeFormatter.ISO_WEEK_DATE);
LocalDate&nbsp;fromCustomPattern&nbsp;=&nbsp;LocalDate.parse("20.01.2014",&nbsp;DateTimeFormatter.ofPattern("dd.MM.yyyy"));</pre> 
        <h2>Conversion between different date / time objects</h2> 
        <p>Of course we do not always have objects of the type we need. Therefore, we need an option to convert different date/time related objects between each other. The following examples show some of the possible conversion options:</p> 
        <pre class="brush: java">
//&nbsp;LocalDate/LocalTime&nbsp;&lt;-&gt;&nbsp;LocalDateTime
LocalDate&nbsp;date&nbsp;=&nbsp;LocalDate.now();
LocalTime&nbsp;time&nbsp;=&nbsp;LocalTime.now();
LocalDateTime&nbsp;dateTimeFromDateAndTime&nbsp;=&nbsp;LocalDateTime.of(date,&nbsp;time);
LocalDate&nbsp;dateFromDateTime&nbsp;=&nbsp;LocalDateTime.now().toLocalDate();
LocalTime&nbsp;timeFromDateTime&nbsp;=&nbsp;LocalDateTime.now().toLocalTime();

//&nbsp;Instant&nbsp;&lt;-&gt;&nbsp;LocalDateTime
Instant&nbsp;instant&nbsp;=&nbsp;Instant.now();
LocalDateTime&nbsp;dateTimeFromInstant&nbsp;=&nbsp;LocalDateTime.ofInstant(instant,&nbsp;ZoneId.of("America/Los_Angeles"));
Instant&nbsp;instantFromDateTime&nbsp;=&nbsp;LocalDateTime.now().toInstant(ZoneOffset.ofHours(-2));

//&nbsp;convert old&nbsp;date/calendar/timezone&nbsp;classes
Instant&nbsp;instantFromDate&nbsp;=&nbsp;new&nbsp;Date().toInstant();
Instant&nbsp;instantFromCalendar&nbsp;=&nbsp;Calendar.getInstance().toInstant();
ZoneId&nbsp;zoneId&nbsp;=&nbsp;TimeZone.getDefault().toZoneId();
ZonedDateTime&nbsp;zonedDateTimeFromGregorianCalendar&nbsp;=&nbsp;new&nbsp;GregorianCalendar().toZonedDateTime();

// convert to old classes
Date&nbsp;dateFromInstant&nbsp;=&nbsp;Date.from(Instant.now());
TimeZone&nbsp;timeZone&nbsp;=&nbsp;TimeZone.getTimeZone(ZoneId.of("America/Los_Angeles"));
GregorianCalendar&nbsp;gregorianCalendar&nbsp;=&nbsp;GregorianCalendar.from(ZonedDateTime.now());</pre> 
        <p class="h2">Conclusion</p> 
        <p>With Java 8 we get a very rich API for working with date and time located in the <span class="code">java.time</span> package. The API can completely replace old classes like <span class="code">java.util.Date</span> or <span class="code">java.util.Calendar</span> with newer, more flexible classes. Due to mostly immutable classes the new API helps in building thread safe systems.</p> 
        <p>The source of the examples can be found on <a href="https://github.com/mscharhag/Java-8-playground/tree/master/date-time">GitHub</a>.</p> 
       </div> 
       <div class="info"> 
        <div class="social"> 
         <a title="Share on Facebook" href="http://www.facebook.com/sharer/sharer.php?s=100&amp;p[url]=http://www.mscharhag.com/java/java-8-date-time-api&amp;p[images][0]=&amp;p[title]=&amp;p[summary]="> <span class="share share-facebook"></span> </a> 
         <a title="Share on Twitter" href="http://twitter.com/home?status=http://www.mscharhag.com/java/java-8-date-time-api @mscharhag"> <span class="share share-twitter"></span> </a> 
         <a title="Share on Google+" href="https://plus.google.com/share?url=http://www.mscharhag.com/java/java-8-date-time-api"> <span class="share share-googlePlus"></span> </a> 
         <a title="Share on Reddit" href="//www.reddit.com/submit?title=A+deeper+look+into+the+Java+8+Date+and+Time+API&amp;url=http%3A%2F%2Fwww.mscharhag.com%2Fjava%2Fjava-8-date-time-api"> <span class="share share-reddit"></span> </a> 
        </div> 
        <div class="pull-right hidden-xs tags-normal">
         <div class="tags"> 
          <p> Tags: <a title="View other posts tagged with Java" href="/tags/java">Java</a> </p> 
         </div>
        </div> 
        <div class="hidden-sm hidden-md hidden-lg tags-small">
         <div class="tags"> 
          <p> Tags: <a title="View other posts tagged with Java" href="/tags/java">Java</a> </p> 
         </div>
        </div> 
        <!--<div th:if="${!post.tags.isEmpty()}" class="tags">--> 
        <!--<p >--> 
        <!--<span th:text="#{public.post.tags}" th:remove="tag"></span>--> 
        <!--<div th:each="tag, status : ${post.tags}" th:remove="tag">--> 
        <!--<a th:href="@{${urls.tag(tag)}}" th:text="${tag.name}"></a><span th:remove="tag" th:if="${!status.last}">,</span>--> 
        <!--</div>--> 
        <!--</p>--> 
        <!--</div>--> 
        <div class="relatedPosts"> 
         <p>Related posts:</p> 
         <ul> 
          <li> <a href="/java/regular-expression-matching-latin-script-characters">Matching Latin characters with regular expressions in Java</a> </li> 
          <li> <a href="/java/java-lambda-retrolambda">Using Java 8 Lambda expressions in Java 7 or older</a> </li> 
          <li> <a href="/java/java-8-type-annotations">Java 8 Type Annotations</a> </li> 
          <li> <a href="/java/java-8-string-join">Java can finally join strings</a> </li> 
         </ul> 
        </div> 
       </div> 
       <div class="comments"> 
        <h4>Comments</h4> 
        <ul class="list"> 
         <li class="comment"> <p class="author"> The Gray Geek - Wednesday, 26 February, 2014 </p> <p class="text">Nice set of examples, but your comment on the following is not correct: <br>LocalDate date = LocalDate.of(2014, 2, 15); // 2014-06-15</p> </li> 
         <li class="comment"> <p class="author"> Werner Keil - Wednesday, 26 February, 2014 </p> <p class="text">It will never fully replace java.util.Date and Calendar due to a complete lack of modularity and a very bad design (no Spec just RI;-/) of JSR 310. It is Joda with a few twists, but even bigger than that used to be and you have 3(!) other Date/Time APIs (low level Concurrency, the good old Date/Calendar classes in java.util and newly added JavaFX with its own Duration/Date handling) competing with it in Java 8 alone...</p> </li> 
         <li class="comment"> <p class="author"> Michael Scharhag - Wednesday, 26 February, 2014 </p> <p class="text">You are right. <br>I fixed it. Thanks for the info :-)</p> </li> 
         <li class="comment"> <p class="author"> congdoan - Tuesday, 27 May, 2014 </p> <p class="text">Thanks, nice post</p> </li> 
         <li class="comment"> <p class="author"> Rohitth - Friday, 2 October, 2015 </p> <p class="text">I read that LocalDate is date only without timezone then why some people use atZone() etc? Am I missing somthing?</p> </li> 
         <li class="comment"> <p class="author"> Michael Scharhag - Friday, 2 October, 2015 </p> <p class="text">Hi Rohitth, <br>with LocalDateTime.atZone(ZoneId) you can create a ZonedDateTime object out of a LocalDateTime and a ZoneId. <br>See: https://docs.oracle.com/javase/8/docs/api/java/time/LocalDateTime.html#atZone-java.time.ZoneId-</p> </li> 
         <li class="comment"> <p class="author"> Nitish - Saturday, 30 January, 2016 </p> <p class="text">Bookmarked it! <br> <br>I like the extensive set of examples that you have provided. I'm using this as a reference for quick peek into java.time APIs. THANK YOU :)</p> </li> 
         <li class="comment"> <p class="author"> Venkat - Monday, 7 March, 2016 </p> <p class="text">Good examples. It is a quick reference for most things you would like to do.</p> </li> 
         <li class="comment"> <p class="author"> Ruben Espinoza - Monday, 19 December, 2016 </p> <p class="text">Hi, good job, can I set the time like this? , 10:30:20 PM ,,, 12hour fortmat?</p> </li> 
        </ul> 
        <h4>Leave a reply</h4> 
        <form class="col-xs-12 col-md-8" method="post" action="/java/java-8-date-time-api/comments"> 
         <div class="form-group"> 
          <label for="text">Your comment</label> 
          <textarea class="form-control" rows="3" id="text" name="text"></textarea> 
         </div> 
         <div class="form-group"> 
          <label for="comment-name">Name</label> 
          <input type="text" class="form-control" id="comment-name" name="name" value=""> 
         </div> 
         <div class="form-group"> 
          <label for="comment-email">Email address (optional)</label> 
          <input type="text" class="form-control" id="comment-email" name="email" value=""> 
         </div> 
         <div class="g-recaptcha" data-sitekey="6LfanAsTAAAAAJ8Bd0JaTHdBmQ48GUZ2wnPevZBj"></div> 
         <br> 
         <button type="submit" class="btn btn-default">Submit</button> 
         <input type="hidden" name="_csrf" value="6fca215c-ef59-4c3a-b138-0bfc9601cf57">
        </form> 
       </div> 
      </div> 
      <script src="https://www.google.com/recaptcha/api.js"></script> 
     </div> 
    </main> 
    <div class="col-md-3 col-sm-4 col-xs-12"> 
     <div class="line visible-xs"></div> 
     <div>
      <div class="box box-author"> 
       <p>Michael Scharhag</p> 
       <p>I am a Java Web Developer, Stackoverflower and 3D graphic hobbyist living in Mainz, Germany.</p> 
       <ul class="list"> 
        <li> <a title="About the author" href="/about">More about me</a> </li> 
        <li> <a href="https://twitter.com/mscharhag" title="Twitter profile @mscharhag">Follow me on Twitter</a> </li> 
        <li> <a href="/feeds">Subscribe this blog</a> </li> 
       </ul> 
      </div> 
     </div> 
     <div>
      <div class="box box-popular"> 
       <p>Most popular</p> 
       <ul> 
        <li> <a href="/java/java-8-string-join">Java can finally join strings</a> </li> 
        <li> <a href="/java/java-8-date-time-api">A deeper look into the Java 8 Date and Time API</a> </li> 
        <li> <a href="/java/understanding-junits-runner-architecture">Understanding JUnit's Runner architecture</a> </li> 
        <li> <a href="/java-ee-mvc/ozark-getting-started">Java EE 8 MVC: Getting started with Ozark</a> </li> 
        <li> <a href="/java/java-jsr-354-money-and-currency-api">Looking into Java's new Money and Currency API (JSR 354)</a> </li> 
        <li> <a href="/spring/spring-data-solr-getting-started">Getting started with Spring Data Solr</a> </li> 
        <li> <a href="/java/java-8-type-annotations">Java 8 Type Annotations</a> </li> 
        <li> <a href="/groovy/groovy-null-nullobject">Groovy's magical NullObject</a> </li> 
       </ul> 
      </div> 
     </div> 
     <div>
      <div class="box box-tags"> 
       <p>Tags</p> 
       <ul> 
        <li> <a title="View posts tagged with Android" href="/tags/android">Android</a> </li> 
        <li> <a title="View posts tagged with Code Quality" href="/tags/code-quality">Code Quality</a> </li> 
        <li> <a title="View posts tagged with Grails" href="/tags/grails">Grails</a> </li> 
        <li> <a title="View posts tagged with Groovy" href="/tags/groovy">Groovy</a> </li> 
        <li> <a title="View posts tagged with Hibernate" href="/tags/hibernate">Hibernate</a> </li> 
        <li> <a title="View posts tagged with IntelliJ IDEA" href="/tags/intellij-idea">IntelliJ IDEA</a> </li> 
        <li> <a title="View posts tagged with Java" href="/tags/java">Java</a> </li> 
        <li> <a title="View posts tagged with Java EE" href="/tags/java-ee">Java EE</a> </li> 
        <li> <a title="View posts tagged with JPA" href="/tags/jpa">JPA</a> </li> 
        <li> <a title="View posts tagged with JUnit" href="/tags/junit">JUnit</a> </li> 
        <li> <a title="View posts tagged with Localization" href="/tags/localization">Localization</a> </li> 
        <li> <a title="View posts tagged with MongoDB" href="/tags/mongodb">MongoDB</a> </li> 
        <li> <a title="View posts tagged with MySQL" href="/tags/mysql">MySQL</a> </li> 
        <li> <a title="View posts tagged with Solr" href="/tags/solr">Solr</a> </li> 
        <li> <a title="View posts tagged with Spring" href="/tags/spring">Spring</a> </li> 
        <li> <a title="View posts tagged with Spring Data" href="/tags/spring-data">Spring Data</a> </li> 
        <li> <a title="View posts tagged with Spring Security" href="/tags/spring-security">Spring Security</a> </li> 
       </ul> 
      </div> 
     </div> 
     <div>
      <div class="box box-badges hidden-xs"> 
       <ul class="list"> 
        <li> <a title="Dzone profile" href="http://java.dzone.com/users/mischar"> <img alt="dzone" src="/res/images/badge-dzone-536ebeb1a6bbcf0d4623ad114fe38580.png"> </a> </li> 
        <li> <a title="Java code geeks profile" href="http://www.javacodegeeks.com/author/michael-scharhag/"> <img alt="java code geeks" src="/res/images/badge-jcg-7e54dc3f039ff412b4092c42a0a07c97.png"> </a> </li> 
       </ul> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="row footer"> 
    <div class="col-xs-12"> 
     <div class="line"></div> 
     <a href="/disclaimer">Disclaimer / Legal</a> 
     <span class="pull-right version">v1.3.1</span> 
    </div> 
   </div> 
  </div> 
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script> 
  <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> 
  <script type="text/javascript" src="/res/syntaxhighlighter/scripts/shFull.min-2cd13a25d8dde869c721e9226e8376cc.js"></script> 
  <script type="application/javascript">
            /*<![CDATA[*/
            SyntaxHighlighter.defaults.toolbar = false;
            SyntaxHighlighter.all();
            /*]]>*/
        </script> 
  <script>
            $(function() {
                $('#close-cookie-hint').on('click', function() {
                    $('.cookie-hint').hide();

                    var date = new Date();
                    date.setTime(date.getTime() + (365 * 10 * 24 * 60 * 60 * 1000));
                    var expires = "; expires=" + date.toGMTString();
                    document.cookie = encodeURIComponent('cookies-accepted') + "=" + encodeURIComponent(true) + expires + "; path=/";
                });
            });
        </script> 
  <script>
            var gaProperty = 'UA-43451962-1';

            // Disable tracking if the opt-out cookie exists.
            var disableStr = 'ga-disable-' + gaProperty;
            if (document.cookie.indexOf(disableStr + '=true') > -1) {
                window[disableStr] = true;
            }

            function gaOptout() {
                document.cookie = disableStr + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
                window[disableStr] = true;
                alert("Google Analytics Opt-out cookie successfully created.")
            }

            (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
            })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

            ga('create', gaProperty, 'auto');
            ga('set', 'anonymizeIp', true);
            ga('send', 'pageview');
        </script>  
 </body>
</html>