<!doctype html>
<html class="no-js hasSidebar hasPageActions hasBreadcrumb " lang="en-us" dir="ltr">
 <head> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <meta property="og:title" content="Analyze real-time Twitter sentiment with HBase - Azure"> 
  <meta property="og:image" content="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/microsoft-header.png"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:site" content="@docsmsft"> 
  <meta name="twitter:title" content="Analyze real-time Twitter sentiment with HBase - Azure"> 
  <meta name="twitter:description" content="Learn how to do real-time sentiment analysis of big data from Twitter using HBase in an HDInsight (Hadoop) cluster."> 
  <meta name="twitter:image" content="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/microsoft-header.png"> 
  <meta name="twitter:image:alt" content="Microsoft Logo"> 
  <meta name="breadcrumb_path" content="/azure/bread/toc.json"> 
  <meta name="ms.custom" content="hdinsightactive"> 
  <meta name="ms.devlang" content="na"> 
  <meta name="ms.tgt_pltfrm" content="na"> 
  <meta name="ms.assetid" content="5c798ad3-a20d-4385-a463-f4f7705f9566"> 
  <meta name="author" content="mumian"> 
  <meta name="editor" content="cgronlun"> 
  <meta name="description" content="Learn how to do real-time sentiment analysis of big data from Twitter using HBase in an HDInsight (Hadoop) cluster."> 
  <meta name="ms.author" content="jgao"> 
  <meta name="manager" content="jhubbard"> 
  <meta name="documentationcenter" content=""> 
  <meta name="ms.topic" content="article"> 
  <meta name="services" content="hdinsight"> 
  <meta name="ms.service" content="hdinsight"> 
  <meta name="ms.date" content="07/24/2017"> 
  <meta name="ms.workload" content="big-data"> 
  <meta name="search.ms_sitename" content="Docs"> 
  <meta name="search.ms_docsetname" content="azure-documents"> 
  <meta name="version" content="0"> 
  <meta name="locale" content="en-us"> 
  <meta name="site_name" content="Docs"> 
  <meta name="search.ms_product" content="Azure"> 
  <meta name="depot_name" content="Azure.azure-documents"> 
  <meta name="updated_at" content="2017-09-19 10:16 PM"> 
  <meta name="gitcommit" content="https://github.com/MicrosoftDocs/azure-docs-pr/blob/4c2be7c35f678430d0ad83a3374ef25f68fd2509/articles/hdinsight/hdinsight-hbase-analyze-twitter-sentiment.md"> 
  <meta name="original_content_git_url" content="https://github.com/MicrosoftDocs/azure-docs-pr/blob/live/articles/hdinsight/hdinsight-hbase-analyze-twitter-sentiment.md"> 
  <meta name="document_id" content="94581991-cb2c-ec6a-a2ca-94aeb6b231e4"> 
  <meta name="pagetype" content="Conceptual"> 
  <meta name="toc_rel" content="TOC.json"> 
  <meta name="pdf_url_template" content="https://docs.microsoft.com/pdfstore/en-us/Azure.azure-documents/{branchName}{pdfName}"> 
  <meta name="word_count" content="4395"> 
  <meta name="scope" content="Azure"> 
  <link href="https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hbase-analyze-twitter-sentiment" rel="canonical"> 
  <title>Analyze real-time Twitter sentiment with HBase - Azure | Microsoft Docs</title> 
  <link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/css/870b0825531b1b071dff.site.css "> 
  <link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/css/870b0825531b1b071dff.conceptual.css "> 
  <link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/global/css/azureHeader.css?v=4"> 
  <link rel="stylesheet" href="https://azure.microsoft.com/en-us/asset/menucss/"> 
  <script>
	var msDocs = {
		data:{
			contentLocale: 'en-us',
			contentDir: 'ltr',
			userLocale: 'en-us',
			userDir: 'ltr',
			pathToTheme: '/_themes/docs.theme/master/en-us/_themes/',
			pageTemplate: 'Conceptual',
			brand: 'azure',
			forceVersionPicker:false		},
		functions:{},
		settings:{
			extendBreadcrumb: false
		}
	};
	if (!('Promise' in window && 'resolve' in window.Promise && 'reject' in window.Promise && 'all' in window.Promise && 'race' in window.Promise)) {
		document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/bluebird.min.js"><\/script>');
	}
	</script> 
  <!--[if lt IE 9]>
		<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.12.4.min.js"></script>
		<script src="/_themes/docs.theme/master/en-us/_themes/global/js/polyfills/all.js"></script>
<script src="/_themes/docs.theme/master/en-us/_themes/global/js/azureHeader/respond_and_ie8Setup_combine.js"></script>	<![endif]--> 
  <!--[if gte IE 9]><!--> 
  <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.2.4.min.js"></script> 
  <!--<![endif]--> 
  <script>window.jQuery || document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/jquery/jquery-1.12.4.min.js"><\/script>')</script> 
  <script src="/_themes/docs.theme/master/en-us/_themes/global/js/global.min.js?v=263"></script> 
  <script src="/_themes/docs.theme/master/en-us/_themes/global/js/azureHeader/loader.js?v=4"></script> 
 </head> 
 <body> 
  <div id="lca-cookie-notification" class="cookieContainer"> 
  </div> 
  <div id="headerAreaHolder" class="az_h default" ms.pgarea="header" data-bi-name="header"> 
   <div class="azure-header_holder"> 
    <div class="azure-header"> 
     <header class="azure-header_temp"> 
      <div class="row column"> 
       <a href="https://azure.microsoft.com/en-us/" class="logo" title="Microsoft Azure"> 
        <svg x="0px" y="0px" width="165px" height="20px" viewbox="0 0 165 20"> 
         <path fill="#29A5DE" d="M18,19H16V7.1C16,6.2,16,5,16.1,3.7h0c-0.2,0.8-0.4,1.4-0.5,1.7L9.5,19h-1l-6-13.5c-0.2-0.4-0.3-1-0.5-1.8
							h0C2,4.4,2,5.5,2,7.1V19H0V1.3h2.7l5.4,12.3c0.4,0.9,0.7,1.7,0.8,2.1H9c0.4-1,0.6-1.7,0.9-2.2l5.5-12.3H18V19z" /> 
         <path fill="#29A5DE" d="M22.8,3.1c-0.4,0-0.7-0.1-0.9-0.4s-0.4-0.6-0.4-0.9s0.1-0.7,0.4-0.9c0.3-0.3,0.6-0.4,0.9-0.4
							c0.4,0,0.7,0.1,0.9,0.4c0.3,0.3,0.4,0.6,0.4,0.9c0,0.4-0.1,0.7-0.4,0.9C23.5,3,23.2,3.1,22.8,3.1z M23.8,19h-2V6.3h2V19z" /> 
         <path fill="#29A5DE" d="M35.8,18.4c-1,0.6-2.1,0.9-3.5,0.9c-1.8,0-3.3-0.6-4.4-1.8c-1.1-1.2-1.7-2.7-1.7-4.6c0-2.1,0.6-3.7,1.8-5
							C29.4,6.7,30.9,6,32.9,6C34,6,35,6.2,35.9,6.7v2.1c-0.9-0.7-1.9-1-3-1c-1.3,0-2.3,0.5-3.2,1.4c-0.8,0.9-1.2,2.1-1.2,3.6
							c0,1.5,0.4,2.6,1.2,3.5c0.8,0.9,1.8,1.3,3.1,1.3c1.1,0,2.1-0.4,3.1-1.1V18.4z" /> 
         <path fill="#29A5DE" d="M44.9,8.4C44.5,8.1,44,8,43.3,8c-0.9,0-1.6,0.4-2.2,1.2c-0.6,0.8-0.9,1.9-0.9,3.3V19h-2V6.3h2v2.6h0
							c0.3-0.9,0.7-1.6,1.3-2.1c0.6-0.5,1.3-0.7,2-0.7c0.5,0,0.9,0.1,1.2,0.2V8.4z" /> 
         <path fill="#29A5DE" d="M51.4,19.3c-1.9,0-3.4-0.6-4.5-1.8c-1.1-1.2-1.7-2.7-1.7-4.7c0-2.1,0.6-3.8,1.7-5S49.7,6,51.7,6
							c1.9,0,3.4,0.6,4.4,1.7c1.1,1.2,1.6,2.8,1.6,4.8c0,2-0.6,3.6-1.7,4.8C54.8,18.6,53.3,19.3,51.4,19.3z M51.5,7.7
							c-1.3,0-2.3,0.4-3.1,1.3c-0.8,0.9-1.1,2.1-1.1,3.7c0,1.5,0.4,2.7,1.1,3.5c0.8,0.9,1.8,1.3,3.1,1.3c1.3,0,2.3-0.4,3-1.3
							c0.7-0.8,1.1-2,1.1-3.6c0-1.6-0.4-2.8-1.1-3.6C53.8,8.2,52.8,7.7,51.5,7.7z" /> 
         <path fill="#29A5DE" d="M59.5,18.5v-2.2c1.1,0.8,2.3,1.2,3.6,1.2c1.8,0,2.7-0.6,2.7-1.8c0-0.3-0.1-0.6-0.2-0.9
							c-0.2-0.2-0.4-0.4-0.6-0.6c-0.3-0.2-0.6-0.3-0.9-0.5c-0.3-0.1-0.7-0.3-1.1-0.4c-0.6-0.2-1-0.4-1.5-0.7c-0.4-0.2-0.8-0.5-1.1-0.8
							c-0.3-0.3-0.5-0.6-0.6-1c-0.1-0.4-0.2-0.8-0.2-1.3c0-0.6,0.1-1.1,0.4-1.6C60.2,7.7,60.5,7.3,61,7c0.5-0.3,1-0.5,1.5-0.7
							C63.1,6.1,63.7,6,64.3,6c1.1,0,2.1,0.2,2.9,0.6v2c-0.9-0.6-2-0.9-3.2-0.9c-0.4,0-0.7,0-1,0.1c-0.3,0.1-0.6,0.2-0.8,0.4
							c-0.2,0.2-0.4,0.3-0.5,0.6c-0.1,0.2-0.2,0.5-0.2,0.7c0,0.3,0.1,0.6,0.2,0.8c0.1,0.2,0.3,0.4,0.5,0.6c0.2,0.2,0.5,0.3,0.8,0.5
							c0.3,0.1,0.7,0.3,1.1,0.5c0.6,0.2,1.1,0.4,1.5,0.7c0.4,0.2,0.8,0.5,1.1,0.8c0.3,0.3,0.6,0.6,0.7,1c0.2,0.4,0.3,0.8,0.3,1.3
							c0,0.6-0.1,1.2-0.4,1.6c-0.3,0.5-0.6,0.8-1.1,1.1c-0.5,0.3-1,0.5-1.6,0.7c-0.6,0.1-1.2,0.2-1.9,0.2C61.6,19.3,60.4,19,59.5,18.5z" /> 
         <path fill="#29A5DE" d="M75.6,19.3c-1.9,0-3.4-0.6-4.5-1.8c-1.1-1.2-1.7-2.7-1.7-4.7c0-2.1,0.6-3.8,1.7-5C72.4,6.6,73.9,6,75.9,6
							c1.9,0,3.4,0.6,4.4,1.7c1.1,1.2,1.6,2.8,1.6,4.8c0,2-0.6,3.6-1.7,4.8C79,18.6,77.5,19.3,75.6,19.3z M75.7,7.7
							c-1.3,0-2.3,0.4-3.1,1.3c-0.8,0.9-1.1,2.1-1.1,3.7c0,1.5,0.4,2.7,1.1,3.5c0.8,0.9,1.8,1.3,3.1,1.3c1.3,0,2.3-0.4,3-1.3
							c0.7-0.8,1.1-2,1.1-3.6c0-1.6-0.4-2.8-1.1-3.6C78.1,8.2,77,7.7,75.7,7.7z" /> 
         <path fill="#29A5DE" d="M97.6,8.1V6.3h-3.2V2.6l-2,0.7v3.1h-2.6h-1.5h-1.4V4.4c0-1.8,0.7-2.7,2.1-2.7c0.5,0,0.9,0.1,1.3,0.3V0.2
							C89.9,0.1,89.4,0,88.8,0c-1.1,0-2.1,0.4-2.9,1.2c-0.8,0.8-1.1,1.8-1.1,3.1v2h-2.2v1.7h2.2V19h2V8.1h1.4h1.5h2.6v7.5
							c0,2.5,1.1,3.7,3.3,3.7c0.8,0,1.4-0.1,1.9-0.4v-1.7c-0.4,0.3-0.8,0.4-1.3,0.4c-0.7,0-1.1-0.2-1.4-0.5c-0.3-0.4-0.4-1-0.4-1.8V8.1
							H97.6z" /> 
         <path fill="#29A5DE" d="M119.9,19h-2.3l-1.9-5h-7.5l-1.8,5h-2.3L111,1.3h2.1L119.9,19z M115.1,12.1l-2.8-7.5
							c-0.1-0.2-0.2-0.6-0.3-1.2h0c-0.1,0.5-0.2,0.9-0.3,1.2l-2.7,7.5H115.1z" /> 
         <path fill="#29A5DE" d="M130.4,6.9l-7.5,10.3h7.4V19H120v-0.6l7.5-10.3h-6.8V6.3h9.7V6.9z" /> 
         <path fill="#29A5DE" d="M142.6,19h-2v-2h0c-0.8,1.5-2.1,2.3-3.9,2.3c-3,0-4.5-1.8-4.5-5.4V6.3h2v7.2c0,2.7,1,4,3.1,4
							c1,0,1.8-0.4,2.4-1.1c0.6-0.7,1-1.7,1-2.9V6.3h2V19z" /> 
         <path fill="#29A5DE" d="M152.6,8.4c-0.4-0.3-0.9-0.4-1.5-0.4c-0.9,0-1.6,0.4-2.2,1.2c-0.6,0.8-0.9,1.9-0.9,3.3V19h-2V6.3h2v2.6h0
							c0.3-0.9,0.7-1.6,1.3-2.1c0.6-0.5,1.3-0.7,2-0.7c0.5,0,0.9,0.1,1.2,0.2V8.4z" /> 
         <path fill="#29A5DE" d="M164,13.1h-8.9c0,1.4,0.4,2.5,1.1,3.3c0.7,0.8,1.7,1.1,3,1.1c1.4,0,2.7-0.5,3.9-1.4V18
							c-1.1,0.8-2.6,1.2-4.4,1.2c-1.8,0-3.2-0.6-4.2-1.7c-1-1.1-1.5-2.8-1.5-4.8c0-2,0.6-3.6,1.7-4.8c1.1-1.2,2.5-1.9,4.1-1.9
							s2.9,0.5,3.8,1.6s1.4,2.6,1.4,4.4V13.1z M161.9,11.4c0-1.2-0.3-2.1-0.8-2.7c-0.6-0.6-1.3-1-2.3-1c-1,0-1.8,0.3-2.4,1
							c-0.7,0.7-1.1,1.6-1.2,2.7H161.9z" /> 
        </svg> </a> 
       <a href="#" class="small-search" onclick="return false"><span class="icon icon-search"></span></a> 
      </div> 
     </header> 
    </div> 
   </div> 
  </div> 
  <div class="container mainContainer" lang="en-us" dir="ltr" ms.pgarea="body" data-bi-name="body"> 
   <main role="main" ms.cmpgrp="content" data-bi-name="content"> 
    <div id="main"> 
     <h1 id="analyze-real-time-twitter-sentiment-with-hbase-in-hdinsight" sourcefile="articles/hdinsight/hdinsight-hbase-analyze-twitter-sentiment.md" sourcestartlinenumber="21" sourceendlinenumber="21">Analyze real-time Twitter sentiment with HBase in HDInsight</h1> 
     <div class="metadata loading" ms.cmpgrp="page info" data-bi-name="page info"> 
      <div> 
       <time class="date" datetime="7/24/2017 12:00:00 AM">2017-7-24</time> 
       <span class="reading-time">21 minutes to read</span> 
       <span class="contributors-text">Contributors</span> 
       <ul class="contributors" ms.cmpgrp="contributors" data-bi-name="contributors"> 
        <li><a href="https://github.com/mumian" title="Jonathan Gao" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/mumian.png?size=16" alt="Jonathan Gao"></a></li> 
        <li><a href="https://github.com/cephalin" title="Cephas Lin" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/cephalin.png?size=16" alt="Cephas Lin"></a></li> 
        <li><a href="https://github.com/cjgronlund" title="C.J. Gronlund" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/cjgronlund.png?size=16" alt="C.J. Gronlund"></a></li> 
        <li><a href="https://github.com/JimVance" title="Jim Vance" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/JimVance.png?size=16" alt="Jim Vance"></a></li> 
        <li><a href="https://github.com/sdwheeler" title="Sean Wheeler" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/sdwheeler.png?size=16" alt="Sean Wheeler"></a></li> 
        <li><a href="https://github.com/Microsoft/azure-docs/blob/master/articles/hdinsight/hdinsight-hbase-analyze-twitter-sentiment.md" ms.cmpnm="contributorshowall" data-bi-name="contributorshowall">all</a></li> 
       </ul> 
      </div> 
      <nav id="center-doc-outline" class="doc-outline" ms.cmpgrp="intopic toc" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation"> 
       <h3>In this article</h3> 
      </nav> 
     </div> 
     <div>
      <div class="content"> 
       <p>Learn how to do real-time <a href="http://en.wikipedia.org/wiki/Sentiment_analysis" data-linktype="external">sentiment analysis</a> of big data from Twitter by using a HBase cluster in HDInsight.</p> 
       <p>Social websites are one of the major driving forces for big data adoption. Public APIs provided by sites like Twitter are a useful source of data for analyzing and understanding popular trends. In this tutorial, you develop a console streaming service application and an ASP.NET web application to perform the following:</p> 
       <p><img src="media/hdinsight-hbase-analyze-twitter-sentiment/apparchitecture.png" alt="HDInsight HBase Analyze Twitter sentiment" data-linktype="relative-path"></p> 
       <ul> 
        <li><p>The streaming application</p> 
         <ul> 
          <li>get geo-tagged tweets in real time by using the Twitter streaming API</li> 
          <li>evaluate the sentiment of these tweets</li> 
          <li>store the sentiment information in HBase by using the Microsoft HBase SDK</li> 
         </ul> </li> 
        <li><p>The Azure Websites application</p> 
         <ul> 
          <li><p>plot the real-time statistical results on Bing maps by using an ASP.NET web application. A visualization of the tweets is similar to the following screenshot:</p> <p><img src="media/hdinsight-hbase-analyze-twitter-sentiment/twittersentimentbingmap.png" alt="hdinsight.hbase.twitter.sentiment.bing.map" data-linktype="relative-path"></p> <p>You are able to query tweets with certain keywords to get a sense of if the expressed opinion in the tweets is positive, negative, or neutral.</p> </li> 
         </ul> </li> 
       </ul> 
       <p>A complete Visual Studio solution sample can be found on GitHub: <a href="https://github.com/maxluk/tweet-sentiment" data-linktype="external">Realtime social sentiment analysis app</a>.</p> 
       <h3 id="prerequisites">Prerequisites</h3> 
       <p>Before you begin this tutorial, you must have the following:</p> 
       <ul> 
        <li><p><strong>An HBase cluster in HDInsight</strong>. For instructions about creating clusters, see <a href="hdinsight-hbase-tutorial-get-started-linux" data-linktype="relative-path">Get started using HBase with Hadoop in HDInsight</a>. </p> </li> 
        <li><p><strong>A workstation</strong> with Visual Studio 2013/2015/2017 installed. For instructions, see <a href="http://msdn.microsoft.com/library/e2h7fzkw.aspx" data-linktype="external">Installing Visual Studio</a>.</p> </li> 
       </ul> 
       <h2 id="create-a-twitter-application-id-and-secrets">Create a Twitter application ID and secrets</h2> 
       <p>The Twitter streaming APIs use <a href="http://oauth.net/" data-linktype="external">OAuth</a> to authorize requests. The first step to use OAuth is to create a new application on the Twitter developer site.</p> 
       <p><strong>To create Twitter application ID and secrets</strong></p> 
       <ol> 
        <li>Sign in to <a href="https://apps.twitter.com/" data-linktype="external">Twitter Apps</a>. Click the <strong>Sign up now</strong> link if you don't have a Twitter account.</li> 
        <li>Click <strong>Create New App</strong>.</li> 
        <li>Enter a <strong>Name</strong>, <strong>Description</strong>, and <strong>Website</strong>. The Twitter application name must be a unique name. The Website field is not really used. It doesn't have to be a valid URL.</li> 
        <li>Check <strong>Yes, I agree</strong>, and then click <strong>Create your Twitter application</strong>.</li> 
        <li>Click the <strong>Permissions</strong> tab, and then click <strong>Read only</strong>. The read-only permission is sufficient for this tutorial.</li> 
        <li>Click the <strong>Keys and Access Tokens</strong> tab.</li> 
        <li>Click <strong>Create my access token</strong> on the bottom of the page.</li> 
        <li><p>Copy the <strong>Consumer Key (API Key)</strong>, <strong>Consumer Secret (API Secret)</strong>, <strong>Access token</strong>, and <strong>Access token secret</strong> values. You need these values later in the tutorial.</p> 
         <blockquote>
          <p>![NOTE] The Test OAuth button does not work anymore.</p> 
         </blockquote> </li> 
       </ol> 
       <h2 id="create-twitter-streaming-service">Create Twitter streaming service</h2> 
       <p>You need to create an application to get tweets, calculate tweet sentiment score, and send the processed tweet words to HBase.</p> 
       <p><strong>To create the streaming application</strong></p> 
       <ol> 
        <li>Open <strong>Visual Studio</strong>, and create a Visual C# console application called <strong>TweetSentimentStreaming</strong>.</li> 
        <li><p>From <strong>Package Manager Console</strong>, run the following commands:</p> <pre><code> Install-Package Microsoft.HBase.Client -version 0.4.2.0
 Install-Package TweetinviAPI -version 1.0.0.0
</code></pre><p> These commands install the <a href="https://www.nuget.org/packages/Microsoft.HBase.Client/" data-linktype="external">HBase .NET SDK</a> package, which is the client library to access the HBase cluster, and the <a href="https://www.nuget.org/packages/TweetinviAPI/" data-linktype="external">Tweetinvi API</a> package, which is used to access the Twitter API.</p> 
         <div class="NOTE">
          <h5>Note</h5>
          <p>The sample used in this article has been tested using the version specified above. You can remove the -version switch to install the latest version.</p> 
         </div> </li> 
        <li>From <strong>Solution Explorer</strong>, add <strong>System.Configuration</strong> to the reference.</li> 
        <li><p>Add a new class file to the project called <strong>HBaseWriter.cs</strong>, and then replace the code with the following:</p> <pre><code> using System;
 using System.Collections.Generic;
 using System.IO;
 using System.Linq;
 using System.Text;
 using System.Threading;
 using Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling;
 using org.apache.hadoop.hbase.rest.protobuf.generated;
 using Microsoft.HBase.Client;
 using Tweetinvi.Models;

 namespace TweetSentimentStreaming
 {
     class HBaseWriter
     {
         // HDinsight HBase cluster and HBase table information
         const string CLUSTERNAME = "https://&lt;Enter Your Cluster Name&gt;.azurehdinsight.net/";
         const string HADOOPUSERNAME = "admin"; //the default name is "admin"
         const string HADOOPUSERPASSWORD = "&lt;Enter the Hadoop User Password&gt;";

         const string HBASETABLENAME = "tweets_by_words";
         const string COUNT_ROW_KEY = "~ROWCOUNT";
         const string COUNT_COLUMN_NAME = "d:COUNT";

         long rowCount = 0;

         // Sentiment dictionary file and the punctuation characters
         const string DICTIONARYFILENAME = @"..\..\dictionary.tsv";
         private static char[] _punctuationChars = new[] {
     ' ', '!', '\"', '#', '$', '%', '&amp;', '\'', '(', ')', '*', '+', ',', '-', '.', '/',   //ascii 23--47
     ':', ';', '&lt;', '=', '&gt;', '?', '@', '[', ']', '^', '_', '`', '{', '|', '}', '~' };   //ascii 58--64 + misc.

         // For writting to HBase
         HBaseClient client;

         // a sentiment dictionary for estimate sentiment. It is loaded from a physical file.
         Dictionary&lt;string, DictionaryItem&gt; dictionary;

         // use multithread write
         Thread writerThread;
         Queue&lt;ITweet&gt; queue = new Queue&lt;ITweet&gt;();
         bool threadRunning = true;

         // This function connects to HBase, loads the sentiment dictionary, and starts the thread for writting.
         public HBaseWriter()
         {
             ClusterCredentials credentials = new ClusterCredentials(new Uri(CLUSTERNAME), HADOOPUSERNAME, HADOOPUSERPASSWORD);
             client = new HBaseClient(credentials);

             // create the HBase table if it doesn't exist
             if (!client.ListTablesAsync().Result.name.Contains(HBASETABLENAME))
             {
                 TableSchema tableSchema = new TableSchema();
                 tableSchema.name = HBASETABLENAME;
                 tableSchema.columns.Add(new ColumnSchema { name = "d" });
                 client.CreateTableAsync(tableSchema).Wait();
                 Console.WriteLine("Table \"{0}\" is created.", HBASETABLENAME);
             }

             // Read current row count cell
             rowCount = GetRowCount();

             // Load sentiment dictionary from a file
             LoadDictionary();

             // Start a thread for writting to HBase
             writerThread = new Thread(new ThreadStart(WriterThreadFunction));
             writerThread.Start();
         }

         ~HBaseWriter()
         {
             threadRunning = false;
         }

         private long GetRowCount()
         {
             try
             {
                 RequestOptions options = RequestOptions.GetDefaultOptions();
                 options.RetryPolicy = RetryPolicy.NoRetry;
                 var cellSet = client.GetCellsAsync(HBASETABLENAME, COUNT_ROW_KEY, null, null, options).Result;
                 if (cellSet.rows.Count != 0)
                 {
                     var countCol = cellSet.rows[0].values.Find(cell =&gt; Encoding.UTF8.GetString(cell.column) == COUNT_COLUMN_NAME);
                     if (countCol != null)
                     {
                         return Convert.ToInt64(Encoding.UTF8.GetString(countCol.data));
                     }
                 }
             }
             catch(Exception ex)
             {
                 if (ex.InnerException.Message.Equals("The remote server returned an error: (404) Not Found.", StringComparison.OrdinalIgnoreCase))
                 {
                     return 0;
                 }
                 else
                 {
                     throw ex;
                 }

             }

             return 0;
         }

         // Enqueue the Tweets received
         public void WriteTweet(ITweet tweet)
         {
             lock (queue)
             {
                 queue.Enqueue(tweet);
             }
         }

         // Load sentiment dictionary from a file
         private void LoadDictionary()
         {
             List&lt;string&gt; lines = File.ReadAllLines(DICTIONARYFILENAME).ToList();
             var items = lines.Select(line =&gt;
             {
                 var fields = line.Split('\t');
                 var pos = 0;
                 return new DictionaryItem
                 {
                     Type = fields[pos++],
                     Length = Convert.ToInt32(fields[pos++]),
                     Word = fields[pos++],
                     Pos = fields[pos++],
                     Stemmed = fields[pos++],
                     Polarity = fields[pos++]
                 };
             });

             dictionary = new Dictionary&lt;string, DictionaryItem&gt;();
             foreach (var item in items)
             {
                 if (!dictionary.Keys.Contains(item.Word))
                 {
                     dictionary.Add(item.Word, item);
                 }
             }
         }

         // Calculate sentiment score
         private int CalcSentimentScore(string[] words)
         {
             Int32 total = 0;
             foreach (string word in words)
             {
                 if (dictionary.Keys.Contains(word))
                 {
                     switch (dictionary[word].Polarity)
                     {
                         case "negative": total -= 1; break;
                         case "positive": total += 1; break;
                     }
                 }
             }
             if (total &gt; 0)
             {
                 return 1;
             }
             else if (total &lt; 0)
             {
                 return -1;
             }
             else
             {
                 return 0;
             }
         }

         // Popular a CellSet object to be written into HBase
         private void CreateTweetByWordsCells(CellSet set, ITweet tweet)
         {
             // Split the Tweet into words
             string[] words = tweet.Text.ToLower().Split(_punctuationChars);

             // Calculate sentiment score base on the words
             int sentimentScore = CalcSentimentScore(words);
             var word_pairs = words.Take(words.Length - 1)
                                 .Select((word, idx) =&gt; string.Format("{0} {1}", word, words[idx + 1]));
             var all_words = words.Concat(word_pairs).ToList();

             // For each word in the Tweet add a row to the HBase table
             foreach (string word in all_words)
             {
                 string time_index = (ulong.MaxValue - (ulong)tweet.CreatedAt.ToBinary()).ToString().PadLeft(20) + tweet.IdStr;
                 string key = word + "_" + time_index;

                 // Create a row
                 var row = new CellSet.Row { key = Encoding.UTF8.GetBytes(key) };

                 // Add columns to the row, including Tweet identifier, language, coordinator(if available), and sentiment
                 var value = new Cell { column = Encoding.UTF8.GetBytes("d:id_str"), data = Encoding.UTF8.GetBytes(tweet.IdStr) };
                 row.values.Add(value);

                 value = new Cell { column = Encoding.UTF8.GetBytes("d:lang"), data = Encoding.UTF8.GetBytes(tweet.Language.ToString()) };
                 row.values.Add(value);

                 if (tweet.Coordinates != null)
                 {
                     var str = tweet.Coordinates.Longitude.ToString() + "," + tweet.Coordinates.Latitude.ToString();
                     value = new Cell { column = Encoding.UTF8.GetBytes("d:coor"), data = Encoding.UTF8.GetBytes(str) };
                     row.values.Add(value);
                 }

                 value = new Cell { column = Encoding.UTF8.GetBytes("d:sentiment"), data = Encoding.UTF8.GetBytes(sentimentScore.ToString()) };
                 row.values.Add(value);

                 set.rows.Add(row);
             }
         }

         // Write a Tweet (CellSet) to HBase
         public void WriterThreadFunction()
         {
             try
             {
                 while (threadRunning)
                 {
                     if (queue.Count &gt; 0)
                     {
                         CellSet set = new CellSet();
                         lock (queue)
                         {
                             do
                             {
                                 ITweet tweet = queue.Dequeue();
                                 CreateTweetByWordsCells(set, tweet);
                             } while (queue.Count &gt; 0);
                         }

                         // Write the Tweet by words cell set to the HBase table
                         client.StoreCellsAsync(HBASETABLENAME, set).Wait();
                         Console.WriteLine("\tRows written: {0}", set.rows.Count);
                     }
                     Thread.Sleep(100);
                 }
             }
             catch (Exception ex)
             {
                 Console.WriteLine("Exception: " + ex.Message);
             }
         }
     }
     public class DictionaryItem
     {
         public string Type { get; set; }
         public int Length { get; set; }
         public string Word { get; set; }
         public string Pos { get; set; }
         public string Stemmed { get; set; }
         public string Polarity { get; set; }
     }
 }
</code></pre></li> 
        <li>Set the constants in the previous code, including <strong>CLUSTERNAME</strong>, <strong>HADOOPUSERNAME</strong>, <strong>HADOOPUSERPASSWORD</strong>, and DICTIONARYFILENAME. The DICTIONARYFILENAME is the filename and the location of the direction.tsv. The file can be downloaded from <strong><a href="https://hditutorialdata.blob.core.windows.net/twittersentiment/dictionary.tsv" data-linktype="external">https://hditutorialdata.blob.core.windows.net/twittersentiment/dictionary.tsv</a></strong>. If you want to change the HBase table name, you must change the table name in the web application accordingly.</li> 
        <li><p>Open <strong>Program.cs</strong>, and replace the code with the following:</p> <pre><code> using System;
 using System.Diagnostics;
 using Tweetinvi;
 using Tweetinvi.Models;

 namespace TweetSentimentStreaming
 {
     class Program
     {
         const string TWITTERAPPACCESSTOKEN = "&lt;Enter Twitter App Access Token&gt;";
         const string TWITTERAPPACCESSTOKENSECRET = "&lt;Enter Twitter Access Token Secret&gt;";
         const string TWITTERAPPAPIKEY = "&lt;Enter Twitter App API Key&gt;";
         const string TWITTERAPPAPISECRET = "&lt;Enter Twitter App API Secret&gt;";

         static void Main(string[] args)
         {
             Auth.SetUserCredentials(TWITTERAPPAPIKEY, TWITTERAPPAPISECRET, TWITTERAPPACCESSTOKEN, TWITTERAPPACCESSTOKENSECRET);

             Stream_FilteredStreamExample();
         }

         private static void Stream_FilteredStreamExample()
         {
             for (;;)
             {
                 try
                 {
                     HBaseWriter hbase = new HBaseWriter();
                     var stream = Stream.CreateFilteredStream();
                     stream.AddLocation(new Coordinates(90, -180), new Coordinates(-90,180));

                     var tweetCount = 0;
                     var timer = Stopwatch.StartNew();

                     stream.MatchingTweetReceived += (sender, args) =&gt;
                     {
                         tweetCount++;
                         var tweet = args.Tweet;

                         // Write Tweets to HBase
                         hbase.WriteTweet(tweet);

                         if (timer.ElapsedMilliseconds &gt; 1000)
                         {
                             if (tweet.Coordinates != null)
                             {
                                 Console.ForegroundColor = ConsoleColor.Green;
                                 Console.WriteLine("\n{0}: {1} {2}", tweet.Id, tweet.Language.ToString(), tweet.Text);
                                 Console.ForegroundColor = ConsoleColor.White;
                                 Console.WriteLine("\tLocation: {0}, {1}", tweet.Coordinates.Longitude, tweet.Coordinates.Latitude);
                             }

                             timer.Restart();
                             Console.WriteLine("\tTweets/sec: {0}", tweetCount);
                             tweetCount = 0;
                         }
                     };

                     stream.StartStreamMatchingAllConditions();
                 }
                 catch (Exception ex)
                 {
                     Console.WriteLine("Exception: {0}", ex.Message);
                 }
             }
         }

     }
 }
</code></pre></li> 
        <li>Set the constants including <strong>TWITTERAPPACCESSTOKEN</strong>, <strong>TWITTERAPPACCESSTOKENSECRET</strong>, <strong>TWITTERAPPAPIKEY</strong> and <strong>TWITTERAPPAPISECRET</strong>.</li> 
       </ol> 
       <p>To run the streaming service, press <strong>F5</strong>. The following is a screenshot of the console application:</p> 
       <p><img src="media/hdinsight-hbase-analyze-twitter-sentiment/streamingservice.png" alt="hdinsight.hbase.twitter.sentiment.streaming.service" data-linktype="relative-path"></p> 
       <p>Keep the streaming console application running while you develop the web application, so you have more data to use. To examine the data inserted into the table, you can use HBase Shell. See <a href="hdinsight-hbase-tutorial-get-started-linux#create-tables-and-insert-data" data-linktype="relative-path">Get started with HBase in HDInsight</a>.</p> 
       <h2 id="visualize-real-time-sentiment">Visualize real-time sentiment</h2> 
       <p>In this section, you create an ASP.NET MVC web application to read the real-time sentiment data from HBase and plot the data on Bing maps.</p> 
       <p><strong>To create an ASP.NET MVC Web application</strong></p> 
       <ol> 
        <li>Open Visual Studio.</li> 
        <li>Click <strong>File</strong>, click <strong>New</strong>, and then click <strong>Project</strong>.</li> 
        <li><p>Enter the following information:</p> 
         <ul> 
          <li>Template category: <strong>Visual C#/Web</strong></li> 
          <li>Template: <strong>ASP.NET Web Application</strong></li> 
          <li>Name: <strong>TweetSentimentWeb</strong></li> 
          <li>Location: <strong>C:\Tutorials</strong></li> 
         </ul> </li> 
        <li>Click <strong>OK</strong>.</li> 
        <li>In <strong>Select a template</strong>, click <strong>MVC</strong>.</li> 
        <li>In <strong>Microsoft Azure</strong>, click <strong>Manage Subscriptions</strong>.</li> 
        <li>From <strong>Manage Microsoft Azure Subscriptions</strong>, click <strong>Sign in</strong>.</li> 
        <li>Enter your Azure credentials. Your Azure subscription information is shown on the <strong>Accounts</strong> tab.</li> 
        <li>Click <strong>Close</strong> to close the <strong>Manage Microsoft Azure Subscriptions</strong> window.</li> 
        <li>From <strong>New ASP.NET Project - TweetSentimentWeb</strong>, click <strong>OK</strong>.</li> 
        <li>From <strong>Configure Microsoft Azure Site Settings</strong>, select the <strong>Region</strong> that is closest to you. You don't need to specify a database server.</li> 
        <li>Click <strong>OK</strong>.</li> 
       </ol> 
       <p><strong>To install NuGet packages</strong></p> 
       <ol> 
        <li>From the <strong>Tools</strong> menu, click <strong>Nuget Package Manager</strong>, and then click <strong>Package Manager Console</strong>. The console panel is opened at the bottom of the page.</li> 
        <li><p>Use the following command to install the <a href="https://www.nuget.org/packages/Microsoft.HBase.Client/" data-linktype="external">HBase .NET SDK</a> package, which is the client library to access HBase cluster:</p> <pre><code> Install-Package Microsoft.HBase.Client
</code></pre></li> 
       </ol> 
       <p><strong>To add HBaseReader class</strong></p> 
       <ol> 
        <li>From <strong>Solution Explorer</strong>, expand <strong>TweetSentiment</strong>.</li> 
        <li>Right-click <strong>Models</strong>, click <strong>Add</strong>, and then click <strong>Class</strong>.</li> 
        <li>In the <strong>Name</strong> field, type <strong>HBaseReader.cs</strong>, and then click <strong>Add</strong>.</li> 
        <li><p>Replace the code with the following:</p> <pre><code> using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Web;

 using System.Configuration;
 using System.Threading.Tasks;
 using System.Text;
 using Microsoft.HBase.Client;
 using org.apache.hadoop.hbase.rest.protobuf.generated;

 namespace TweetSentimentWeb.Models
 {
     public class HBaseReader
     {
         // For reading Tweet sentiment data from HDInsight HBase
         HBaseClient client;

         // HDinsight HBase cluster and HBase table information
         const string CLUSTERNAME = "&lt;HBaseClusterName&gt;";
         const string HADOOPUSERNAME = "&lt;HBaseClusterHadoopUserName&gt;"
         const string HADOOPUSERPASSWORD = "&lt;HBaseCluserUserPassword&gt;";
         const string HBASETABLENAME = "tweets_by_words";

         // The constructor
         public HBaseReader()
         {
             ClusterCredentials creds = new ClusterCredentials(
                             new Uri(CLUSTERNAME),
                             HADOOPUSERNAME,
                             HADOOPUSERPASSWORD);
             client = new HBaseClient(creds);
         }

         // Query Tweets sentiment data from the HBase table asynchronously
         public async Task&lt;IEnumerable&lt;Tweet&gt;&gt; QueryTweetsByKeywordAsync(string keyword)
         {
             List&lt;Tweet&gt; list = new List&lt;Tweet&gt;();

             // Demonstrate Filtering the data from the past 6 hours the row key
             string timeIndex = (ulong.MaxValue -
                 (ulong)DateTime.UtcNow.Subtract(new TimeSpan(6, 0, 0)).ToBinary()).ToString().PadLeft(20);
             string startRow = keyword + "_" + timeIndex;
             string endRow = keyword + "|";
             Scanner scanSettings = new Scanner
             {
                 batch = 100000,
                 startRow = Encoding.UTF8.GetBytes(startRow),
                 endRow = Encoding.UTF8.GetBytes(endRow)
             };

             // Make async scan call
             ScannerInformation scannerInfo =
                 await client.CreateScannerAsync(HBASETABLENAME, scanSettings);

             CellSet next;

             while ((next = await client.ScannerGetNextAsync(scannerInfo)) != null)
             {
                 foreach (CellSet.Row row in next.rows)
                 {
                     // find the cell with string pattern "d:coor"
                     var coordinates =
                         row.values.Find(c =&gt; Encoding.UTF8.GetString(c.column) == "d:coor");

                     if (coordinates != null)
                     {
                         string[] lonlat = Encoding.UTF8.GetString(coordinates.data).Split(',');

                         var sentimentField =
                             row.values.Find(c =&gt; Encoding.UTF8.GetString(c.column) == "d:sentiment");
                         Int32 sentiment = 0;
                         if (sentimentField != null)
                         {
                             sentiment = Convert.ToInt32(Encoding.UTF8.GetString(sentimentField.data));
                         }

                         list.Add(new Tweet
                         {
                             Longtitude = Convert.ToDouble(lonlat[0]),
                             Latitude = Convert.ToDouble(lonlat[1]),
                             Sentiment = sentiment
                         });
                     }

                     if (coordinates != null)
                     {
                         string[] lonlat = Encoding.UTF8.GetString(coordinates.data).Split(',');
                     }
                 }
             }

             return list;
         }
     }

     public class Tweet
     {
         public string IdStr { get; set; }
         public string Text { get; set; }
         public string Lang { get; set; }
         public double Longtitude { get; set; }
         public double Latitude { get; set; }
         public int Sentiment { get; set; }
     }
 }
</code></pre></li> 
        <li><p>Inside the <strong>HBaseReader</strong> class, change the constant values as follows:</p> 
         <ul> 
          <li><strong>CLUSTERNAME</strong>: The HBase cluster name, for example, <em>https://
            <hbaseclustername>
             .azurehdinsight.net/
            </hbaseclustername></em>.</li> 
          <li><strong>HADOOPUSERNAME</strong>: The HBase cluster Hadoop user user name. The default name is <em>admin</em>.</li> 
          <li><strong>HADOOPUSERPASSWORD</strong>: The HBase cluster Hadoop user password.</li> 
          <li><p><strong>HBASETABLENAME</strong> = "tweets_by_words";</p> <p>The HBase table name is <strong>"tweets_by_words";</strong>. The values must match the values you sent in the streaming service, so that the web application reads the data from the same HBase table.</p> </li> 
         </ul> </li> 
       </ol> 
       <p><strong>To add TweetsController controller</strong></p> 
       <ol> 
        <li>From <strong>Solution Explorer</strong>, expand <strong>TweetSentimentWeb</strong>.</li> 
        <li>Right-click <strong>Controllers</strong>, click <strong>Add</strong>, and then click <strong>Controller</strong>.</li> 
        <li>Click <strong>Web API 2 Controller - Empty</strong>, and then click <strong>Add</strong>.</li> 
        <li>In the <strong>Controller name</strong> field, type <strong>TweetsController</strong>, and then click <strong>Add</strong>.</li> 
        <li>From <strong>Solution Explorer</strong>, double-click TweetsController.cs to open the file.</li> 
        <li><p>Modify the file, so it looks like the following:</p> <pre><code> using System;
 using System.Collections.Generic;
 using System.Linq;
 using System.Net;
 using System.Net.Http;
 using System.Web.Http;

 using System.Threading.Tasks;
 using TweetSentimentWeb.Models;

 namespace TweetSentimentWeb.Controllers
 {
     public class TweetsController : ApiController
     {
         HBaseReader hbase = new HBaseReader();

         public async Task&lt;IEnumerable&lt;Tweet&gt;&gt; GetTweetsByQuery(string query)
         {
             return await hbase.QueryTweetsByKeywordAsync(query);
         }
     }
 }
</code></pre></li> 
       </ol> 
       <p><strong>To add heatmap.js</strong></p> 
       <ol> 
        <li>From <strong>Solution Explorer</strong>, expand <strong>TweetSentimentWeb</strong>.</li> 
        <li>Right-click <strong>Scripts</strong>, click <strong>Add</strong>, click <strong>JavaScript File</strong>.</li> 
        <li>In the <strong>Item name</strong> field, type <strong>heatmap.js</strong>.</li> 
        <li><p>Paste the following code into the file. The code was written by Alastair Aitchison. For more information, see <a href="http://alastaira.wordpress.com/2011/04/15/bing-maps-ajax-v7-heatmap-library/" data-linktype="external">Bing Maps AJAX v7 HeatMap Library</a>.</p> <pre><code> /*******************************************************************************
 * Author: Alastair Aitchison
 * Website: http://alastaira.wordpress.com
 * Date: 15th April 2011
 *
 * Description:
 * This JavaScript file provides an algorithm that can be used to add a heatmap
 * overlay on a Bing Maps v7 control. The intensity and temperature palette
 * of the heatmap are designed to be easily customisable.
 *
 * Requirements:
 * The heatmap layer itself is created dynamically on the client-side using
 * the HTML5 &amp;lt;canvas&gt; element, and therefore requires a browser that supports
 * this element. It has been tested on IE9, Firefox 3.6/4 and
 * Chrome 10 browsers. If you can confirm whether it works on other browsers or
 * not, I'd love to hear from you!
 *
 * Usage:
 * The HeatMapLayer constructor requires:
 * - A reference to a map object
 * - An array or Microsoft.Maps.Location items
 * - Optional parameters to customise the appearance of the layer
 *  (Radius,, Unit, Intensity, and ColourGradient), and a callback function
 */

 var HeatMapLayer = function (map, locations, options) {

     /* Private Properties */
     var _map = map,
         _canvas,
         _temperaturemap,
         _locations = [],
         _viewchangestarthandler,
         _viewchangeendhandler;

     // Set default options
     var _options = {
         // Opacity at the centre of each heat point
         intensity: 0.5,

         // Affected radius of each heat point
         radius: 1000,

         // Whether the radius is an absolute pixel value or meters
         unit: 'meters',

         // Colour temperature gradient of the map
         colourgradient: {
             "0.00": 'rgba(255,0,255,20)',  // Magenta
             "0.25": 'rgba(0,0,255,40)',    // Blue
             "0.50": 'rgba(0,255,0,80)',    // Green
             "0.75": 'rgba(255,255,0,120)', // Yellow
             "1.00": 'rgba(255,0,0,150)'    // Red
         },

         // Callback function to be fired after heatmap layer has been redrawn
         callback: null
     };

     /* Private Methods */
     function _init() {
         var _mapDiv = _map.getRootElement();

         if (_mapDiv.childNodes.length &gt;= 3 &amp;&amp; _mapDiv.childNodes[2].childNodes.length &gt;= 2) {
             // Create the canvas element
             _canvas = document.createElement('canvas');
             _canvas.style.position = 'relative';

             var container = document.createElement('div');
             container.style.position = 'absolute';
             container.style.left = '0px';
             container.style.top = '0px';
             container.appendChild(_canvas);

             _mapDiv.childNodes[2].childNodes[1].appendChild(container);

             // Override defaults with any options passed in the constructor
             _setOptions(options);

             // Load array of location data
             _setPoints(locations);

             // Create a colour gradient from the suppied colourstops
             _temperaturemap = _createColourGradient(_options.colourgradient);

             // Wire up the event handler to redraw heatmap canvas
             _viewchangestarthandler = Microsoft.Maps.Events.addHandler(_map, 'viewchangestart', _clearHeatMap);
             _viewchangeendhandler = Microsoft.Maps.Events.addHandler(_map, 'viewchangeend', _createHeatMap);

             _createHeatMap();

             delete _init;
         } else {
             setTimeout(_init, 100);
         }
     }

     // Resets the heat map
     function _clearHeatMap() {
         var ctx = _canvas.getContext("2d");
         ctx.clearRect(0, 0, _canvas.width, _canvas.height);
     }

     // Creates a colour gradient from supplied colour stops on initialisation
     function _createColourGradient(colourstops) {
         var ctx = document.createElement('canvas').getContext('2d');
         var grd = ctx.createLinearGradient(0, 0, 256, 0);
         for (var c in colourstops) {
             grd.addColorStop(c, colourstops[c]);
         }
         ctx.fillStyle = grd;
         ctx.fillRect(0, 0, 256, 1);
         return ctx.getImageData(0, 0, 256, 1).data;
     }

     // Applies a colour gradient to the intensity map
     function _colouriseHeatMap() {
         var ctx = _canvas.getContext("2d");
         var dat = ctx.getImageData(0, 0, _canvas.width, _canvas.height);
         var pix = dat.data; // pix is a CanvasPixelArray containing height x width x 4 bytes of data (RGBA)
         for (var p = 0, len = pix.length; p &lt; len;) {
             var a = pix[p + 3] * 4; // get the alpha of this pixel
             if (a != 0) { // If there is any data to plot
                 pix[p] = _temperaturemap[a]; // set the red value of the gradient that corresponds to this alpha
                 pix[p + 1] = _temperaturemap[a + 1]; //set the green value based on alpha
                 pix[p + 2] = _temperaturemap[a + 2]; //set the blue value based on alpha
             }
             p += 4; // Move on to the next pixel
         }
         ctx.putImageData(dat, 0, 0);
     }

     // Sets any options passed in
     function _setOptions(options) {
         for (attrname in options) {
             _options[attrname] = options[attrname];
         }
     }

     // Sets the heatmap points from an array of Microsoft.Maps.Locations  
     function _setPoints(locations) {
         _locations = locations;
     }

     // Main method to draw the heatmap
     function _createHeatMap() {
         // Ensure the canvas matches the current dimensions of the map
         // This also has the effect of resetting the canvas
         _canvas.height = _map.getHeight();
         _canvas.width = _map.getWidth();

         _canvas.style.top = -_canvas.height / 2 + 'px';
         _canvas.style.left = -_canvas.width / 2 + 'px';

         // Calculate the pixel radius of each heatpoint at the current map zoom
         if (_options.unit == "pixels") {
             radiusInPixel = _options.radius;
         } else {
             radiusInPixel = _options.radius / _map.getMetersPerPixel();
         }

         var ctx = _canvas.getContext("2d");

         // Convert lat/long to pixel location
         var pixlocs = _map.tryLocationToPixel(_locations, Microsoft.Maps.PixelReference.control);
         var shadow = 'rgba(0, 0, 0, ' + _options.intensity + ')';
         var mapWidth = 256 * Math.pow(2, _map.getZoom());

         // Create the Intensity Map by looping through each location
         for (var i = 0, len = pixlocs.length; i &lt; len; i++) {
             var x = pixlocs[i].x;
             var y = pixlocs[i].y;

             if (x &lt; 0) {
                 x += mapWidth * Math.ceil(Math.abs(x / mapWidth));
             }

             // Create radial gradient centred on this point
             var grd = ctx.createRadialGradient(x, y, 0, x, y, radiusInPixel);
             grd.addColorStop(0.0, shadow);
             grd.addColorStop(1.0, 'transparent');

             // Draw the heatpoint onto the canvas
             ctx.fillStyle = grd;
             ctx.fillRect(x - radiusInPixel, y - radiusInPixel, 2 * radiusInPixel, 2 * radiusInPixel);
         }

         // Apply the specified colour gradient to the intensity map
         _colouriseHeatMap();

         // Call the callback function, if specified
         if (_options.callback) {
             _options.callback();
         }
     }

     /* Public Methods */

     this.Show = function () {
         if (_canvas) {
             _canvas.style.display = '';
         }
     };

     this.Hide = function () {
         if (_canvas) {
             _canvas.style.display = 'none';
         }
     };

     // Sets options for intensity, radius, colourgradient etc.
     this.SetOptions = function (options) {
         _setOptions(options);
     }

     // Sets an array of Microsoft.Maps.Locations from which the heatmap is created
     this.SetPoints = function (locations) {
         // Reset the existing heatmap layer
         _clearHeatMap();
         // Pass in the new set of locations
         _setPoints(locations);
         // Recreate the layer
         _createHeatMap();
     }

     // Removes the heatmap layer from the DOM
     this.Remove = function () {
         _canvas.parentNode.parentNode.removeChild(_canvas.parentNode);

         if (_viewchangestarthandler) { Microsoft.Maps.Events.removeHandler(_viewchangestarthandler); }
         if (_viewchangeendhandler) { Microsoft.Maps.Events.removeHandler(_viewchangeendhandler); }

         _locations = null;
         _temperaturemap = null;
         _canvas = null;
         _options = null;
         _viewchangestarthandler = null;
         _viewchangeendhandler = null;
     }

     // Call the initialisation routine
     _init();
 };

 // Call the Module Loaded method
 Microsoft.Maps.moduleLoaded('HeatMapModule');
</code></pre></li> 
       </ol> 
       <p><strong>To add twitterStream.js</strong></p> 
       <ol> 
        <li>From <strong>Solution Explorer</strong>, expand <strong>TweetSentimentWeb</strong>.</li> 
        <li>Right-click <strong>Scripts</strong>, click <strong>Add</strong>, click <strong>JavaScript File</strong>.</li> 
        <li>In the <strong>Item name</strong> field, type<strong>twitterStream.js</strong>.</li> 
        <li><p>Copy and paste the following code into the file:</p> <pre><code> var liveTweetsPos = [];
 var liveTweets = [];
 var liveTweetsNeg = [];
 var map;
 var heatmap;
 var heatmapNeg;
 var heatmapPos;

 function initialize() {
     // Initialize the map
     var options = {
         credentials: "AvFJTZPZv8l3gF8VC3Y7BPBd0r7LKo8dqKG02EAlqg9WAi0M7la6zSIT-HwkMQbx",
         center: new Microsoft.Maps.Location(23.0, 8.0),
         mapTypeId: Microsoft.Maps.MapTypeId.ordnanceSurvey,
         labelOverlay: Microsoft.Maps.LabelOverlay.hidden,
         zoom: 2.5
     };
     var map = new Microsoft.Maps.Map(document.getElementById('map_canvas'), options);

     // Heatmap options for positive, neutral and negative layers

     var heatmapOptions = {
         // Opacity at the centre of each heat point
         intensity: 0.5,

         // Affected radius of each heat point
         radius: 15,

         // Whether the radius is an absolute pixel value or meters
         unit: 'pixels'
     };

     var heatmapPosOptions = {
         // Opacity at the centre of each heat point
         intensity: 0.5,

         // Affected radius of each heat point
         radius: 15,

         // Whether the radius is an absolute pixel value or meters
         unit: 'pixels',

         colourgradient: {
             0.0: 'rgba(0, 255, 255, 0)',
             0.1: 'rgba(0, 255, 255, 1)',
             0.2: 'rgba(0, 255, 191, 1)',
             0.3: 'rgba(0, 255, 127, 1)',
             0.4: 'rgba(0, 255, 63, 1)',
             0.5: 'rgba(0, 127, 0, 1)',
             0.7: 'rgba(0, 159, 0, 1)',
             0.8: 'rgba(0, 191, 0, 1)',
             0.9: 'rgba(0, 223, 0, 1)',
             1.0: 'rgba(0, 255, 0, 1)'
         }
     };

     var heatmapNegOptions = {
         // Opacity at the centre of each heat point
         intensity: 0.5,

         // Affected radius of each heat point
         radius: 15,

         // Whether the radius is an absolute pixel value or meters
         unit: 'pixels',

         colourgradient: {
             0.0: 'rgba(0, 255, 255, 0)',
             0.1: 'rgba(0, 255, 255, 1)',
             0.2: 'rgba(0, 191, 255, 1)',
             0.3: 'rgba(0, 127, 255, 1)',
             0.4: 'rgba(0, 63, 255, 1)',
             0.5: 'rgba(0, 0, 127, 1)',
             0.7: 'rgba(0, 0, 159, 1)',
             0.8: 'rgba(0, 0, 191, 1)',
             0.9: 'rgba(0, 0, 223, 1)',
             1.0: 'rgba(0, 0, 255, 1)'
         }
     };

     // Register and load the Client Side HeatMap Module
     Microsoft.Maps.registerModule("HeatMapModule", "scripts/heatmap.js");
     Microsoft.Maps.loadModule("HeatMapModule", {
         callback: function () {
             // Create heatmap layers for positive, neutral and negative tweets
             heatmapPos = new HeatMapLayer(map, liveTweetsPos, heatmapPosOptions);
             heatmap = new HeatMapLayer(map, liveTweets, heatmapOptions);
             heatmapNeg = new HeatMapLayer(map, liveTweetsNeg, heatmapNegOptions);
         }
     });

     $("#searchbox").val("xbox");
     $("#searchBtn").click(onsearch);
     $("#positiveBtn").click(onPositiveBtn);
     $("#negativeBtn").click(onNegativeBtn);
     $("#neutralBtn").click(onNeutralBtn);
     $("#neutralBtn").button("toggle");
 }

 function onsearch() {
     var uri = 'api/tweets?query=';
     var query = $('#searchbox').val();
     $.getJSON(uri + query)
         .done(function (data) {
             liveTweetsPos = [];
             liveTweets = [];
             liveTweetsNeg = [];

             // On success, 'data' contains a list of tweets.
             $.each(data, function (key, item) {
                 addTweet(item);
             });

             if (!$("#neutralBtn").hasClass('active')) {
                 $("#neutralBtn").button("toggle");
             }
             onNeutralBtn();
         })
         .fail(function (jqXHR, textStatus, err) {
             $('#statustext').text('Error: ' + err);
         });
 }

 function addTweet(item) {
     //Add tweet to the heat map arrays.
     var tweetLocation = new Microsoft.Maps.Location(item.Latitude, item.Longtitude);
     if (item.Sentiment &gt; 0) {
         liveTweetsPos.push(tweetLocation);
     } else if (item.Sentiment &lt; 0) {
         liveTweetsNeg.push(tweetLocation);
     } else {
         liveTweets.push(tweetLocation);
     }
 }

 function onPositiveBtn() {
     if ($("#neutralBtn").hasClass('active')) {
         $("#neutralBtn").button("toggle");
     }
     if ($("#negativeBtn").hasClass('active')) {
         $("#negativeBtn").button("toggle");
     }

     heatmapPos.SetPoints(liveTweetsPos);
     heatmapPos.Show();
     heatmapNeg.Hide();
     heatmap.Hide();

     $('#statustext').text('Tweets: ' + liveTweetsPos.length + "   " + getPosNegRatio());
 }

 function onNeutralBtn() {
     if ($("#positiveBtn").hasClass('active')) {
         $("#positiveBtn").button("toggle");
     }
     if ($("#negativeBtn").hasClass('active')) {
         $("#negativeBtn").button("toggle");
     }

     heatmap.SetPoints(liveTweets);
     heatmap.Show();
     heatmapNeg.Hide();
     heatmapPos.Hide();

     $('#statustext').text('Tweets: ' + liveTweets.length + "   " + getPosNegRatio());
 }

 function onNegativeBtn() {
     if ($("#positiveBtn").hasClass('active')) {
         $("#positiveBtn").button("toggle");
     }
     if ($("#neutralBtn").hasClass('active')) {
         $("#neutralBtn").button("toggle");
     }

     heatmapNeg.SetPoints(liveTweetsNeg);
     heatmapNeg.Show();
     heatmap.Hide();;
     heatmapPos.Hide();;

     $('#statustext').text('Tweets: ' + liveTweetsNeg.length + "\t" + getPosNegRatio());
 }

 function getPosNegRatio() {
     if (liveTweetsNeg.length == 0) {
         return "";
     }
     else {
         var ratio = liveTweetsPos.length / liveTweetsNeg.length;
         var str = parseFloat(Math.round(ratio * 10) / 10).toFixed(1);
         return "Positive/Negative Ratio: " + str;
     }
 }
</code></pre></li> 
       </ol> 
       <p><strong>To modify the layout.cshtml</strong></p> 
       <ol> 
        <li>From <strong>Solution Explorer</strong>, expand <strong>TweetSentimentWeb</strong>, expand <strong>Views</strong>, expand <strong>Shared</strong>, and then double-click _<strong>Layout.cshtml</strong>.</li> 
        <li><p>Replace the content with the following:</p> <pre><code> &lt;!DOCTYPE html&gt;
 &lt;html&gt;
 &lt;head&gt;
     &lt;meta charset="utf-8" /&gt;
     &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;
     &lt;title&gt;@ViewBag.Title&lt;/title&gt;
     @Styles.Render("~/Content/css")
     @Scripts.Render("~/bundles/modernizr")
     &lt;!-- Bing Maps --&gt;
     &lt;script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0&amp;mkt=en-gb"&gt;&lt;/script&gt;
     &lt;!-- Spatial Dashboard JavaScript --&gt;
     &lt;script src="~/Scripts/twitterStream.js" type="text/javascript"&gt;&lt;/script&gt;
 &lt;/head&gt;
 &lt;body onload="initialize()"&gt;
     &lt;div class="navbar navbar-inverse navbar-fixed-top"&gt;
         &lt;div class="container"&gt;
             &lt;div class="navbar-header"&gt;
                 &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"&gt;
                     &lt;span class="icon-bar"&gt;&lt;/span&gt;
                     &lt;span class="icon-bar"&gt;&lt;/span&gt;
                     &lt;span class="icon-bar"&gt;&lt;/span&gt;
                 &lt;/button&gt;
             &lt;/div&gt;
             &lt;div class="navbar-collapse collapse"&gt;
                 &lt;div class="row"&gt;
                     &lt;ul class="nav navbar-nav col-lg-5"&gt;
                         &lt;li class="col-lg-12"&gt;
                             &lt;div class="navbar-form"&gt;
                                 &lt;input id="searchbox" type="search" class="form-control"&gt;
                                 &lt;button type="button" id="searchBtn" class="btn btn-primary"&gt;Go&lt;/button&gt;
                             &lt;/div&gt;
                         &lt;/li&gt;
                     &lt;/ul&gt;
                     &lt;ul class="nav navbar-nav col-lg-7"&gt;
                         &lt;li&gt;
                             &lt;div class="navbar-form"&gt;
                                 &lt;div class="btn-group" data-toggle="buttons-radio"&gt;
                                     &lt;button type="button" id="positiveBtn" class="btn btn-primary"&gt;Positive&lt;/button&gt;
                                     &lt;button type="button" id="neutralBtn" class="btn btn-primary"&gt;Neutral&lt;/button&gt;
                                     &lt;button type="button" id="negativeBtn" class="btn btn-primary"&gt;Negative&lt;/button&gt;
                                 &lt;/div&gt;
                             &lt;/div&gt;
                         &lt;/li&gt;
                         &lt;li&gt;&lt;span id="statustext" class="navbar-text"&gt;&lt;/span&gt;&lt;/li&gt;
                     &lt;/ul&gt;
                 &lt;/div&gt;
             &lt;/div&gt;
         &lt;/div&gt;
     &lt;/div&gt;
     &lt;div class="map_container"&gt;
         @RenderBody()
     &lt;/div&gt;
     @Scripts.Render("~/bundles/jquery")
     @Scripts.Render("~/bundles/bootstrap")
     @RenderSection("scripts", required: false)
 &lt;/body&gt;
 &lt;/html&gt;
</code></pre></li> 
       </ol> 
       <p><strong>To modify the Index.cshtml</strong></p> 
       <ol> 
        <li>From <strong>Solution Explorer</strong>, expand <strong>TweetSentimentWeb</strong>, expand <strong>Views</strong>, expand <strong>Home</strong>, and then double-click <strong>Index.cshtml</strong>.</li> 
        <li><p>Replace the content with the following:</p> <pre><code> @{
     ViewBag.Title = "Tweet Sentiment";
 }

 &lt;div class="map_container"&gt;
     &lt;div id="map_canvas"/&gt;
 &lt;/div&gt;
</code></pre></li> 
       </ol> 
       <p><strong>To modify the site.css file</strong></p> 
       <ol> 
        <li>From <strong>Solution Explorer</strong>, expand <strong>TweetSentimentWeb</strong>, expand <strong>Content</strong>, and then double-click <strong>Site.css</strong>.</li> 
        <li><p>Append the following code to the file:</p> <pre><code> /* make container, and thus map, 100% width */
 .map_container {
     width: 100%;
     height: 100%;
 }

 #map_canvas{
   height:100%;
 }

 #tweets{
   position: absolute;
   top: 60px;
   left: 75px;
   z-index:1000;
   font-size: 30px;
 }
</code></pre></li> 
       </ol> 
       <p><strong>To modify the global.asax file</strong></p> 
       <ol> 
        <li>From <strong>Solution Explorer</strong>, expand <strong>TweetSentimentWeb</strong>, and then double-click <strong>Global.asax</strong>.</li> 
        <li><p>Add the following <strong>using</strong> statement:</p> <pre><code> using System.Web.Http;
</code></pre></li> 
        <li><p>Add the following lines inside the <strong>Application_Start()</strong> function:</p> <pre><code> // Register API routes
 GlobalConfiguration.Configure(WebApiConfig.Register);
</code></pre><p> Modify the registration of the API routes to make the Web API controller work inside the MVC application.</p> </li> 
       </ol> 
       <p><strong>To run the web application</strong></p> 
       <ol> 
        <li>Verify that the streaming service console application is still running so you can see the real-time changes.</li> 
        <li><p>Press <strong>F5</strong> to run the web application:</p> <p> <img src="media/hdinsight-hbase-analyze-twitter-sentiment/twittersentimentbingmap.png" alt="hdinsight.hbase.twitter.sentiment.bing.map" data-linktype="relative-path"></p> </li> 
        <li>In the text box, enter a keyword, and then click <strong>Go</strong>. Depending on the data collected in the HBase table, some keywords might not be found. Try some common keywords, such as "love," "xbox," and "playstation."</li> 
        <li>Toggle among <strong>Positive</strong>, <strong>Neutral</strong>, and <strong>Negative</strong> to compare sentiment on the subject.</li> 
        <li>Let the streaming service run for another hour, and then search the same keywords, and compare the results.</li> 
       </ol> 
       <p>Optionally, you can deploy the application to Azure Websites. For instructions, see <a href="../app-service/app-service-web-get-started-dotnet" data-linktype="relative-path">Get started with Azure Websites and ASP.NET</a>.</p> 
       <h2 id="next-steps">Next Steps</h2> 
       <p>In this tutorial, you learned how to get tweets, analyze the sentiment of tweets, save the sentiment data to HBase, and present the real-time Twitter sentiment data to Bing maps. To learn more, see:</p> 
       <ul> 
        <li><a href="hdinsight-hadoop-linux-tutorial-get-started" data-linktype="relative-path">Get started with HDInsight</a></li> 
        <li><a href="hdinsight-hbase-replication" data-linktype="relative-path">Configure HBase replication in HDInsight</a></li> 
        <li><a href="hdinsight-analyze-twitter-data" data-linktype="relative-path">Analyze Twitter data with Hadoop in HDInsight</a></li> 
        <li><a href="hdinsight-analyze-flight-delay-data" data-linktype="relative-path">Analyze flight delay data using HDInsight</a></li> 
        <li><a href="hdinsight-develop-deploy-java-mapreduce-linux" data-linktype="relative-path">Develop Java MapReduce programs for HDInsight</a></li> 
       </ul> 
      </div>
     </div> 
     <div id="comments-container" ms.cmpgrp="comments" data-bi-name="comments" role="form"></div> 
    </div> 
   </main> 
   <div class="pageActions"> 
    <div id="page-actions" ms.cmpgrp="pageactions" data-bi-name="pageactions" role="complementary"> 
     <div id="page-actions-content"> 
      <ul class="action-list"> 
       <li> <a href="#comments-container" id="comments-link" ms.cmpnm="comments" data-bi-name="comments"> <i class="icon icon-comments"></i>Comments </a> </li> 
       <li id="contenteditbtn"> <a href="https://github.com/Microsoft/azure-docs/blob/master/articles/hdinsight/hdinsight-hbase-analyze-twitter-sentiment.md" title="Edit This Document" ms.cmpnm="edit" data-bi-name="edit"> <i class="icon icon-editor"></i>Edit </a> </li> 
       <li> <a href="#" class="sharebutton" title="Share This Document" ms.cmpnm="share" data-bi-name="share"><i class="icon icon-share"></i>Share</a> 
        <div class="share-container"> 
         <div>
          <a href="" class="share-twitter" ms.cmpnm="twitter" data-bi-name="twitter"><i class="icon icon-twitter"></i>Twitter</a>
         </div> 
         <div>
          <a href="" class="share-linkedin" ms.cmpnm="share-linkedin" data-bi-name="linkedin"><i class="icon icon-linkedin"></i>LinkedIn</a>
         </div> 
         <div>
          <a href="" class="share-facebook" ms.cmpnm="facebook" data-bi-name="facebook"><i class="icon icon-facebook"></i>Facebook</a>
         </div> 
         <div>
          <a href="" class="share-email" ms.cmpnm="email" data-bi-name="email"><i class="icon icon-email"></i>Email</a>
         </div> 
        </div> </li> 
       <li class="typeSep">|</li> 
       <li> <label for="theme-selector">Theme</label> <select id="theme-selector" data-bi-name="select-theme"> <option value="" class="removedOnload"></option> <option value="">Light</option> <option value="theme_night">Dark</option> </select> </li> 
      </ul> 
      <nav id="side-doc-outline" class="doc-outline" ms.cmpnm="intopic toc" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation"> 
       <h3>In this article</h3> 
      </nav> 
     </div> 
    </div> 
   </div> 
   <ul class="breadcrumbs" ms.cmpgrp="breadcrumb" data-bi-name="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList" role="navigation" aria-label="Breadcrumb">
    <li></li>
   </ul> 
   <div class="sidebar" id="sidebar" ms.cmpgrp="left toc" data-bi-name="left toc" role="navigation" aria-label="Main Navigation" lang="en-us" dir="ltr"> 
    <div id="sidebarContent"> 
     <div class="filterHolder"> 
     </div> 
     <nav class="toc"></nav> 
     <div class="pdfDownloadHolder"></div> 
    </div> 
    <div class="tocSpace"></div> 
   </div> 
   <div id="menu-nav" class="dropdown-container" lang="en-us" dir="ltr"> 
    <div class="dropdown dropdown-full mobilenavi"> 
     <select> </select> 
    </div> 
   </div> 
  </div> 
  <div id="openFeedbackContainer" class="openfeedback-container footer-layout"></div> 
  <div class="container footerContainer"> 
   <footer id="footer" ms.pgarea="footer" data-bi-name="footer" class="footer-layout"> 
    <div class="container" role="contentinfo"> 
     <a data-mscc-ic="false" id="locale-selector-link" href="#" data-bi-name="select-locale" ms.cmpnm="select-locale"></a> 
     <ul class="links" ms.cmpgrp="footerlinks" data-bi-name="footerlinks"> 
      <li><a data-mscc-ic="false" href="https://docs.microsoft.com/teamblog" ms.cmpnm="bloglink" data-bi-name="bloglink">Blog</a></li> 
      <li><a data-mscc-ic="false" href="//privacy.microsoft.com/en-us/" ms.cmpnm="privacy" data-bi-name="privacy">Privacy &amp; Cookies</a></li> 
      <li><a data-mscc-ic="false" href="/en-us/legal/termsofuse" ms.cmpnm="termsofuse" data-bi-name="termsofuse">Terms of Use</a></li> 
      <li><a data-mscc-ic="false" href="//aka.ms/sitefeedback" ms.cmpnm="feedback" data-bi-name="feedback">Feedback</a></li> 
      <li id="impressum-section" hidden><a data-mscc-ic="false" id="impressum-link" href="#" ms.cmpnm="impressum" data-bi-name="impressum">Impressum</a></li> 
      <li><a data-mscc-ic="false" href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" ms.cmpnm="trademarks" data-bi-name="trademarks">Trademarks</a></li> 
     </ul> 
    </div> 
   </footer> 
  </div> 
  <script src="/_themes/docs.theme/master/en-us/_themes/javascript/870b0825531b1b071dff.conceptual.js"></script>  
 </body>
</html>