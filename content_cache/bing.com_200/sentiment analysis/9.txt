<!doctype html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:fb="https://www.facebook.com/2008/fbml" itemscope itemtype="http://schema.org/Product" ng-app="hub">
 <head prefix="og: http://ogp.me/ns# nodejsexpressdemo: http://ogp.me/ns/apps/nodejsexpressdemo#">
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="readme-deploy" content="cc6c0184baf8865c9d7f25ae372295984ae888da">
  <title>Tutorial: Building a Twitter Sentiment Analysis Process · Text Analysis API | Documentation</title>
  <meta http-equiv="Content-type" content="text/html;charset=UTF-8">
  <meta name="description" content="AYLIEN Text Analysis API is a package of Natural Language Processing and Machine Learning-powered tools for analyzing and extracting various kinds of information from text and images.">
  <link href="https://files.readme.io/Zc1AlaAQOW7t9Dsi3nVL_favicon.ico" rel="shortcut icon" type="image/x-icon">
  <meta property="og:title" content="Tutorial: Building a Twitter Sentiment Analysis Process · Text Analysis API | Documentation">
  <meta property="og:description" content="AYLIEN Text Analysis API is a package of Natural Language Processing and Machine Learning-powered tools for analyzing and extracting various kinds of information from text and images.">
  <!-- Removed due to XSS-->
  <!--meta(property="og:url", content=og('url'))-->
  <meta property="og:image" content="https://files.readme.io/uH5d2GqTPiAg5j25nn2T_Full-transparent-background-256.png">
  <meta property="og:site_name" content="Text Analysis API | Documentation">
  <meta id="config-proxy-url" content="https://proxy.readme.io/proxy">
  <link rel="canonical" href="http://docs.aylien.com/docs/tutorial-tweet-sentiment-rapidminer">
  <link rel="alternate" type="application/rss+xml" title="RSS Feed for Text Analysis API | Documentation" href="/blog.rss">
  <!-- Application styles-->
  <link rel="stylesheet" href="https://d2sl9eawlu179j.cloudfront.net/css/bundle-hub.css?1506643237790">
  <!--if lt IE 9script(src="http://html5shim.googlecode.com/svn/trunk/html5.js")
-->
  <script>var is_hub = true;
var is_hub_edit = false;
var is_hub2 = false;

</script>
  <script src="https://d2sl9eawlu179j.cloudfront.net/js/bundle-hub1.js?1506643237790"></script>
  <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-52479696-1', 'auto');
ga('send', 'pageview');
</script>
  <script>ga('create', 'UA-45848414-1', 'auto', {'name': 'custom'});
ga('custom.send', 'pageview');
</script>
  <meta name="google-site-verification" content="LPmLMhmo2AfnnpyrDK_F4xxO0UzZZqPloaabd3GyYHQ">
  <link href="//fonts.googleapis.com/css?family=Open+Sans:400:sans-serif|Open+Sans:400:sans-serif" rel="stylesheet" type="text/css">
  <style>.theme-line header {  border-bottom-color: #3f5673;}.theme-line header a.btn {  background-color: #3f5673;}.theme-line header a.btn:hover {  background-color: #1b2531;}.theme-line header .navbar-nav a:hover ,.theme-line header .navbar-nav .open > a {  color: #3f5673;}.theme-line header .navbar-nav .tt-cursor {  background-color: #3f5673;}.theme-line .navbar-nav .active a {  font-weight: bold;  color: #9cc42c;}.theme-line .navbar-nav .active a:hover {  color: #5a7119;}.theme-line .main-links .links a:hover {  color: #9cc42c;}.theme-line .main-content a {  color: #9cc42c;}.theme-line .main-content a:hover {  color: #5a7119;}.theme-line .sidebar-nav ul li a.active:before {  background-color: #9cc42c;}.theme-line .sidebar-nav ul li a.active {  color: #9cc42c;}.theme-line .sidebar-nav ul li a:hover,.theme-line .sidebar-nav ul li a.active:hover {  color: #5a7119;}.theme-line .btn-primary {  background-color: #9cc42c;}.theme-line .btn-primary:hover {  background-color: #5a7119;}.theme-line .main-content .nav-horizontal a.active {  border-color: #9cc42c;  color: #9cc42c;}.theme-line .main-content .nav-horizontal a:hover {  color: #5a7119;}.theme-line .main-content .nav-horizontal a.active:hover {  border-color: #5a7119;}.theme-line header .navbar-nav a.active ,.theme-line #versions-list li a:hover strong,.theme-line #versions-list li a.active .current,.theme-line #versions-list li a:active .current {  color: #9cc42c;}.theme-line.body-threes .section-right .threes-nav .btn-default:hover,.theme-line.page-docs.body-threes .section-right .threes-nav .pull-right a:hover {  color: #9cc42c;  border-color: #9cc42c;}.theme-solid header {  background-color: #3f5673;}.theme-solid.header-custom header a.btn {  background-color: #1b2531;}.theme-solid.header-custom header a.btn:hover {  background-color: #000000;}.theme-solid header .navbar-nav .dropdown-menu a:hover {  color: #9cc42c;}.theme-line.lumosity-light header .navbar-nav a:hover,.theme-line.lumosity-light header .navbar-nav .open > a {  color: #9cc42c;}.theme-line.lumosity-light header a.btn {  background-color: #9cc42c;}.theme-line.lumosity-light header a.btn:hover {  background-color: #5a7119;}.theme-solid .main-links .links a:hover {  color: #9cc42c;}.theme-solid .main-content a {  color: #9cc42c;}.theme-solid .main-content a:hover {  color: #5a7119;}.theme-solid .sidebar-nav ul li a.active:before {  background-color: #9cc42c;}.theme-solid .sidebar-nav ul li a.active {  color: #9cc42c;}.theme-solid .sidebar-nav ul li a:hover,.theme-solid .sidebar-nav ul li a.active:hover {  color: #5a7119;}.theme-solid .btn-primary {  background-color: #9cc42c;}.theme-solid .btn-primary:hover {  background-color: #5a7119;}.theme-solid .main-content .nav-horizontal a.active {  border-color: #9cc42c;  color: #9cc42c;}.theme-solid .main-content .nav-horizontal a:hover {  color: #5a7119;}.theme-solid .main-content .nav-horizontal a.active:hover {  border-color: #5a7119;}.theme-solid header .navbar-nav a.active ,.theme-solid #versions-list li a:hover strong,.theme-solid #versions-list li a.active .current,.theme-solid #versions-list li a:active .current {  color: #9cc42c;}.theme-solid.body-threes .section-right .threes-nav .btn-default:hover,.theme-solid.page-docs.body-threes .section-right .threes-nav .pull-right a:hover {  color: #9cc42c;  border-color: #9cc42c;}.theme-solid.header-gradient header {  background: -moz-linear-gradient(top, #3f5673, #243142);  background: -webkit-gradient(linear, left top, #3f5673, #243142);  background: -webkit-linear-gradient(top, #3f5673, #243142);  background: linear-gradient(to bottom, #3f5673, #243142);}.theme-solid.header-custom .header {  background-image: url("undefined");  background-position: center center;}body {  font-weight: 400;font-family: Open Sans, sans-serif;;}h1, h2, h3, h4, h5, h6 {  font-weight: 400;font-family: Open Sans, sans-serif;;}.submit-vote.submit-vote-parent.voted a.submit-vote-button,.submit-vote.submit-vote-parent a.submit-vote-button:hover {  background-color: #9cc42c;}div.submit-vote.submit-vote-parent.voted a.submit-vote-button:hover {  background-color: #5a7119;}a,.link .title {  color: #9cc42c;}a:hover,.link:hover .title {  color: #5a7119;}.header h1.navbar-brand a {  background-image: url("https://files.readme.io/uH5d2GqTPiAg5j25nn2T_Full-transparent-background-256.png")}.header h1.navbar-brand {  width: 111px;}
</style>
  <style>@import url("https://s3.amazonaws.com/aylien-main/misc/readme.io/font-mfizz-1.2/font-mfizz.css");</style>
 </head>
 <body ng-controller="Root" class="layout page-docs body-none theme-solid header-solid header-bg-size-auto header-bg-pos-tl header-overlay-circuits lumosity-normal undefined theme-threes">
  <div class="wrapper">
   <header id="header" class="header">
    <div class="container">
     <h1 class="navbar-brand"><a href="/">Text Analysis API | Documentation</a></h1>
     <div class="navbar-collapse collapse">
      <div id="project-info">
       {"id":"55a7aee84a33f92b00b7a150","name":"Text Analysis API | Documentation","subdomain":"text-analysis-api","versions":[{"_id":"55a7aee84a33f92b00b7a153","releaseDate":"2015-07-16T13:17:28.411Z","is_deprecated":false,"is_hidden":false,"is_beta":false,"is_stable":true,"codename":"","version_clean":"1.0.0","version":"1.0"}],"doc_slug":"","current_version":{"version_clean":"1.0.0","version":"1.0"},"oauth":{"enabled":false},"api":{"name":"","url":"https://api.aylien.com/api/v1","contenttype":"form","auth":"token","explorer":true,"proxyEnabled":true,"jwt":false,"authextra":[{"_id":"55a7e7584a33f92b00b7a210","type":"header","default":"[[app:key]]","key":"X-AYLIEN-TextAPI-Application-Key"},{"_id":"55a7e7584a33f92b00b7a20f","type":"header","default":"[[app:id]]","key":"X-AYLIEN-TextAPI-Application-ID"}],"headers":[],"object_definitions":[]},"apiAlt":[],"plan_details":{"name":"Developer Hub","is_active":true,"cost":59,"versions":10000,"custom_domain":true,"custom_pages":true,"whitelabel":false,"errors":false,"password":true,"landing_page":true,"themebuilder":true,"stylesheet":true,"javascript":false,"html":true,"extra_html":false,"admins":true,"apps":true},"apps":{"enabled":false},"intercom":"avndlx2d","intercom_secure_emailonly":false,"flags":{"allow_hub2":false,"hub2":false,"migrationRun":false,"oauth":false,"swagger":false,"correctnewlines":false,"speedyRender":false,"allowXFrame":false,"jwt":false,"hideGoogleAnalytics":false,"stripe":false,"ssl":false,"autoSslGeneration":true},"asset_base_url":""}
      </div>
      <ul class="nav navbar-nav">
       <li><a href="/discuss" title="Support">Support</a></li>
       <li><a href="https://developer.aylien.com/signup">Get an API Key</a></li>
      </ul>
      <ul class="nav navbar-nav pull-right">
       <li><a href="/blog">Announcements</a></li>
       <li><a href="http://developer.aylien.com/login">Login</a></li>
       <li>
        <div class="searchbox">
         <div class="fa fa-search"></div>
         <input type="text" placeholder="Search" class="typeahead">
        </div></li>
      </ul>
     </div>
    </div>
   </header>
   <div class="container body-container">
    <div class="main-content">
     <div class="main-head">
      <div ng-controller="ShowPage">
       <div scope-scoop>
        <pre var="page" ng-non-bindable>{"_id":"5624e72b06e8040d005ed6e4","category":{"_id":"5624db675a86b423009462e1","pages":["5624db8f85a31117001c5428","5624e72b06e8040d005ed6e4","5624ed3b6ff1010d009b1646","562502255473621900689514"],"__v":4,"project":"55a7aee84a33f92b00b7a150","version":"55a7aee84a33f92b00b7a153","sync":{"url":"","isSync":false},"reference":false,"createdAt":"2015-10-19T12:00:39.932Z","from_sync":false,"order":9999,"slug":"rapidminer-extension","title":"RapidMiner Extension"},"parentDoc":null,"project":"55a7aee84a33f92b00b7a150","__v":18,"user":"55a7ae50bf1be93100d89df1","version":{"_id":"55a7aee84a33f92b00b7a153","__v":6,"project":"55a7aee84a33f92b00b7a150","createdAt":"2015-07-16T13:17:28.411Z","releaseDate":"2015-07-16T13:17:28.411Z","categories":["55a7aee94a33f92b00b7a154","55a7fefa3efe0c2f0074cbdf","55a8fb10c8bd450d000dd130","55a936b1cf45e1390093f362","55abddeaa36ccd0d00fdebe1","5624db675a86b423009462e1"],"is_deprecated":false,"is_hidden":false,"is_beta":false,"is_stable":true,"codename":"","version_clean":"1.0.0","version":"1.0"},"updates":[],"next":{"pages":[],"description":""},"createdAt":"2015-10-19T12:50:51.701Z","link_external":false,"link_url":"","githubsync":"","sync_unique":"","hidden":false,"api":{"results":{"codes":[]},"settings":"","auth":"required","params":[],"url":""},"isReference":false,"order":1,"body":"In this tutorial were going to walk you through using the Text Analysis by AYLIEN Extension for RapidMiner, to collect and analyze tweets. If youre new to RapidMiner, or its your first time using the Text Analysis Extension you should first read our [Getting Started](doc:getting-started-rapidminer) tutorial which takes you through the installation process. Also, If you havent got an AYLIEN account, which youll need to use the Extension, you can grab one [here](http://developer.aylien.com/signup?source=rapidminer).\n\nSo, heres what were going to do:\n\n1. Collect tweets using the **Twitter Search** Operator\n2. Analyze their Sentiment using the **Analyze Sentiment** Operator\n3. Assign the tweets to different categories using the **Categorize** Operator\n4. Visualize our results and make them more consumable and understandable\n\n**You can download the finished Process from our [Sample Processes](doc:sample-processes-rapidminer) page.** \n[block:api-header]\n{\n  \"type\": \"basic\",\n  \"title\": \"Step 1. Gathering tweets\"\n}\n[/block]\nCreate a new Process in RapidMiner and add a **Search Twitter** Operator. Build your desired search as you would using the Twitter search API. You can see from the screenshot below were searching for tweets containing the keyword Samsung. Weve cleaned up our search a little by removing retweets (`-rt`) and links (`-http`). Weve also restricted the number of tweets to collect to 20 and decided we only want to see English tweets by adding en in the `language` parameter. Weve also indicated that we want only recent or popular tweets to be returned using the `Result type` parameter.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/dByapgjWRdawNRCUUGio_Screen%20Shot%202015-10-13%20at%205.16.00%20PM.png\",\n        \"Screen Shot 2015-10-13 at 5.16.00 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#5ab278\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\nLet's have a look at what kind of results our search returns. Once you hit Run (dont forget to connect your Operators) the results from the Twitter search are displayed in an ExampleSet tab, like the one below:\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/XoEo24LLSeaR3a1vt6GI_Screen%20Shot%202015-10-13%20at%205.16.33%20PM.png\",\n        \"Screen Shot 2015-10-13 at 5.16.33 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#988a66\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n\n[block:api-header]\n{\n  \"type\": \"basic\",\n  \"title\": \"Step 2. Analyzing tweets for Sentiment\"\n}\n[/block]\nSo now we have a collection of 20 tweets stored in an ExampleSet that are ready to be  further analyzed. The first thing were going to do from an analysis point of view is, try and determine what the Sentiment of each tweet is, i.e. whether they are Positive, Negative or Neutral.\n\nWe do this by adding the **Analyze Sentiment** Operator to our Process and selecting text as our Input attribute on the right hand side, as shown in the screenshot below:\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/EXQtKIPURvezpeCUacHi_Screen%20Shot%202015-10-13%20at%205.20.04%20PM.png\",\n        \"Screen Shot 2015-10-13 at 5.20.04 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#5bb36f\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\nSo now we have a relatively simple Twitter Sentiment Analysis Process that collects tweets about Samsung and analyzes them to determine the Polarity (i.e. positive, neutral or negative) and Subjectivity (i.e. subjective or objective) of each tweet.\n\nAs is displayed in the ExampleSet below, the results now contain not only the tweets that were pulled in but their corresponding Polarity and Subjectivity as well as a confidence score for both:\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/NiVzXIScQCX8sIe7PB5c_Screen%20Shot%202015-10-13%20at%205.21.12%20PM.png\",\n        \"Screen Shot 2015-10-13 at 5.21.12 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#d36133\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n\n[block:api-header]\n{\n  \"type\": \"basic\",\n  \"title\": \"Step 3. Categorizing tweets\"\n}\n[/block]\nSo weve determined the sentiment of the tweets but like we said in the beginning, we also want to categorize them in some way. We can do this pretty easily by using the **Categorize** Operator from the Text Analysis Extension, but before we do we need to prepare our data for analysis.\n\nFirstly were going to use a **Data to Documents** Operator to generate Documents from our existing data set making it easier to categorize:\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/NAn2Zs99Tme9JW4x30l5_Screen%20Shot%202015-10-14%20at%207.36.47%20PM.png\",\n        \"Screen Shot 2015-10-14 at 7.36.47 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#c85f33\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\nWell then add a Categorize Operator which will basically classify our text based on a particular taxonomy (simply put, a set of predefined categories), in this case were using the IAB QAG taxonomy, which is a standard used in the digital advertising industry for categorizing content:\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/2tSKdqQmTUOtcjTt4xD1_Screen%20Shot%202015-10-14%20at%207.36.49%20PM.png\",\n        \"Screen Shot 2015-10-14 at 7.36.49 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#c95f33\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\nNow our Process is starting to take shape, but because we previously transformed our data into documents before they were categorized, we need to reverse the process and create a dataset from the resulting categorized documents, which in turn will make it easier to visualize and understand as a whole.\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/pI9UJLKdQvyYFhsrcv3q_Screen%20Shot%202015-10-14%20at%207.36.50%20PM.png\",\n        \"Screen Shot 2015-10-14 at 7.36.50 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#c95f33\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\nSo heres what our completed Process looks like:\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/a9Y4OdtwRaGHiQbg63AD_Screen%20Shot%202015-10-14%20at%207.36.40%20PM.png\",\n        \"Screen Shot 2015-10-14 at 7.36.40 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#5bb375\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\nConnect the Operators and hit Run.\n\nThe Process we've built now collects tweets, analyzes the Sentiment of those tweets, prepares them for categorization against a taxonomy and finally displays the results in an ExampleSet, like the one below:\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/mT4sSxeSrCrtiePN0uUz_Screen%20Shot%202015-10-13%20at%205.40.53%20PM.png\",\n        \"Screen Shot 2015-10-13 at 5.40.53 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#a78c58\",\n        \"\"\n      ]\n    }\n  ]\n}\n[/block]\n\n[block:api-header]\n{\n  \"type\": \"basic\",\n  \"title\": \"Step 4. Visualizing the results\"\n}\n[/block]\nWe have our results stored in a table (ExampleSet) but in order to make them more presentable we want to visualize them a bit better.\n\nRapidMiner lets you display and visualize results of your Process really easily using simple charts and visualizations like the ones below, which can all be created using the Charts widget on the left hand side of your results display:\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/eqWg5RjQBKZPs6hDaoXz_Screen%20Shot%202015-10-13%20at%205.22.35%20PM.png\",\n        \"Screen Shot 2015-10-13 at 5.22.35 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#1f1fbf\",\n        \"\"\n      ],\n      \"caption\": \"Bar chart showing the total number of positive, negative and neutral tweets\"\n    }\n  ]\n}\n[/block]\n\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/QtP7cD2zRA2w6xpN4QZU_Screen%20Shot%202015-10-13%20at%205.22.53%20PM.png\",\n        \"Screen Shot 2015-10-13 at 5.22.53 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#1c1dc4\",\n        \"\"\n      ],\n      \"caption\": \"Pie chart showing the percentage of positive, negative and neutral tweets\"\n    }\n  ]\n}\n[/block]\n\n[block:image]\n{\n  \"images\": [\n    {\n      \"image\": [\n        \"https://files.readme.io/uVsZoHgKReetZgjWVPTu_Screen%20Shot%202015-10-13%20at%205.45.08%20PM.png\",\n        \"Screen Shot 2015-10-13 at 5.45.08 PM.png\",\n        \"1552\",\n        \"1072\",\n        \"#1eba82\",\n        \"\"\n      ],\n      \"caption\": \"Pie chart showing a breakdown of tweets by their top-level category\"\n    }\n  ]\n}\n[/block]","excerpt":"","slug":"tutorial-tweet-sentiment-rapidminer","type":"basic","title":"Tutorial: Building a Twitter Sentiment Analysis Process"}</pre>
       </div>
       <div class="row">
        <div class="col-sm-3 border-right section-left">
         <div saveheight="1" class="sidebar-nav">
          <h4>Getting Started</h4>
          <ul>
           <li><a href="/docs/introduction"><span>Introduction</span></a></li>
           <li><a href="/docs/api-key"><span>API Key</span></a></li>
           <li><a href="/docs/usage"><span>Usage</span></a></li>
           <li><a href="/docs/rate-limits"><span>Rate Limits</span></a></li>
           <li><a href="/docs/language-support"><span>Language Support</span></a></li>
           <li><a href="/docs/reporting-problems"><span>Reporting problems</span></a></li>
           <li><a href="/docs/frequently-asked-questions"><span>Frequently Asked Questions</span></a></li>
           <li><a href="/v1.0/page/common-scenarios-solutions" target="_self"><span>Common Scenarios &amp; Solutions</span>
             <div class="fa fa-external-link-square external"></div></a></li>
          </ul>
          <h4>SDKs</h4>
          <ul>
           <li><a href="/docs/node-sdk"><span>NodeJS SDK</span></a></li>
           <li><a href="/docs/python-sdk"><span>Python SDK</span></a></li>
           <li><a href="/docs/php-sdk"><span>PHP SDK</span></a></li>
           <li><a href="/docs/java-sdk"><span>Java SDK</span></a></li>
           <li><a href="/docs/ruby-sdk"><span>Ruby SDK</span></a></li>
           <li><a href="/docs/go-sdk"><span>Go SDK</span></a></li>
           <li><a href="/docs/csharp-sdk"><span>C# SDK</span></a></li>
          </ul>
          <h4>Endpoints</h4>
          <ul>
           <li><a href="/docs/classify"><span title="get" class="pg-type type-get">get</span><span>Classification</span></a></li>
           <li><a href="/docs/classify-taxonomy"><span title="get" class="pg-type type-get">get</span><span>Classification by Taxonomy</span></a></li>
           <li><a href="/docs/sentiment"><span title="get" class="pg-type type-get">get</span><span>Sentiment Analysis</span></a></li>
           <li><a href="/docs/absa"><span title="get" class="pg-type type-get">get</span><span>Aspect-based Sentiment Analysis</span></a></li>
           <li><a href="/docs/entities"><span title="get" class="pg-type type-get">get</span><span>Entity Extraction</span></a></li>
           <li><a href="/docs/concepts"><span title="get" class="pg-type type-get">get</span><span>Concept Extraction</span></a></li>
           <li><a href="/docs/summarize"><span title="get" class="pg-type type-get">get</span><span>Summarization</span></a></li>
           <li><a href="/docs/extract"><span title="get" class="pg-type type-get">get</span><span>Article Extraction</span></a></li>
           <li><a href="/docs/image-tags"><span title="get" class="pg-type type-get">get</span><span>Image Tagging</span></a></li>
           <li><a href="/docs/hashtags"><span title="get" class="pg-type type-get">get</span><span>Hashtag Suggestion</span></a></li>
           <li><a href="/docs/language"><span title="get" class="pg-type type-get">get</span><span>Language Detection</span></a></li>
           <li><a href="/docs/microformats"><span title="get" class="pg-type type-get">get</span><span>Microformat Extraction</span></a></li>
           <li><a href="/docs/related"><span title="get" class="pg-type type-get">get</span><span>Related Phrases</span></a></li>
           <li><a href="/docs/classify-unsupervised"><span title="get" class="pg-type type-get">get</span><span>Semantic Labeling</span></a></li>
           <li><a href="/docs/combined"><span title="get" class="pg-type type-get">get</span><span>Combined Calls</span></a></li>
          </ul>
          <h4>Batch Processing</h4>
          <ul>
           <li><a href="/docs/batch"><span title="post" class="pg-type type-post">post</span><span>Submit Batch Job</span></a></li>
           <li><a href="/docs/queue"><span title="get" class="pg-type type-get">get</span><span>Retrieve Status/Results</span></a></li>
          </ul>
          <h4>Google Sheets Add-on</h4>
          <ul>
           <li><a href="/docs/addon-introduction"><span>Introduction</span></a></li>
           <li><a href="/docs/getting-started"><span>Getting Started</span></a></li>
           <li><a href="/docs/topping-up-credits"><span>Topping Up (Credits)</span></a></li>
           <li><a href="/docs/addon-sentiment-analysis"><span>Sentiment Analysis</span></a></li>
           <li><a href="/docs/blog-news-analysis"><span>Blog &amp; News Analysis</span></a></li>
           <li><a href="/docs/formulas"><span>Formulas</span></a></li>
          </ul>
          <h4>RapidMiner Extension</h4>
          <ul>
           <li><a href="/docs/getting-started-rapidminer"><span>Getting Started</span></a></li>
           <li><a href="/docs/tutorial-tweet-sentiment-rapidminer" class="active"><span>Tutorial: Building a Twitter Sentiment Analysis Process</span></a></li>
           <li><a href="/docs/tutorial-news-analyzer-rapidminer"><span>Tutorial: Building an RSS/News Analyzer Process</span></a></li>
           <li><a href="/docs/sample-processes-rapidminer"><span>Sample Processes</span></a></li>
          </ul>
         </div>
        </div>
        <div class="col-sm-9 border-left section-right">
         <div class="docs-content">
          <div class="docs-header">
           <nav class="pull-right">
            <a href="https://dash.readme.io/project/text-analysis-api/v1.0/docs/tutorial-tweet-sentiment-rapidminer" require-login ng-show="u.user.is_admin" ng-cloak class="suggest">
             <div class="fa fa-pencil fa-right"></div>Edit this Page</a>
            <a href="/docs/tutorial-tweet-sentiment-rapidminer/edit" require-login ng-hide="u.user.is_admin" class="suggest">
             <div class="fa fa-pencil fa-right"></div>Suggest Edits</a>
           </nav>
           <h1>Tutorial: Building a Twitter Sentiment Analysis Process</h1>
           <div marked></div>
           <hr>
          </div>
          <div class="docs-body">
           <content ng-cloak class="content">
            In this tutorial were going to walk you through using the Text Analysis by AYLIEN Extension for RapidMiner, to collect and analyze tweets. If youre new to RapidMiner, or its your first time using the Text Analysis Extension you should first read our [Getting Started](doc:getting-started-rapidminer) tutorial which takes you through the installation process. Also, If you havent got an AYLIEN account, which youll need to use the Extension, you can grab one [here](http://developer.aylien.com/signup?source=rapidminer). So, heres what were going to do: 1. Collect tweets using the **Twitter Search** Operator 2. Analyze their Sentiment using the **Analyze Sentiment** Operator 3. Assign the tweets to different categories using the **Categorize** Operator 4. Visualize our results and make them more consumable and understandable **You can download the finished Process from our [Sample Processes](doc:sample-processes-rapidminer) page.** [block:api-header] { "type": "basic", "title": "Step 1. Gathering tweets" } [/block] Create a new Process in RapidMiner and add a **Search Twitter** Operator. Build your desired search as you would using the Twitter search API. You can see from the screenshot below were searching for tweets containing the keyword Samsung. Weve cleaned up our search a little by removing retweets (`-rt`) and links (`-http`). Weve also restricted the number of tweets to collect to 20 and decided we only want to see English tweets by adding en in the `language` parameter. Weve also indicated that we want only recent or popular tweets to be returned using the `Result type` parameter. [block:image] { "images": [ { "image": [ "https://files.readme.io/dByapgjWRdawNRCUUGio_Screen%20Shot%202015-10-13%20at%205.16.00%20PM.png", "Screen Shot 2015-10-13 at 5.16.00 PM.png", "1552", "1072", "#5ab278", "" ] } ] } [/block] Let's have a look at what kind of results our search returns. Once you hit Run (dont forget to connect your Operators) the results from the Twitter search are displayed in an ExampleSet tab, like the one below: [block:image] { "images": [ { "image": [ "https://files.readme.io/XoEo24LLSeaR3a1vt6GI_Screen%20Shot%202015-10-13%20at%205.16.33%20PM.png", "Screen Shot 2015-10-13 at 5.16.33 PM.png", "1552", "1072", "#988a66", "" ] } ] } [/block] [block:api-header] { "type": "basic", "title": "Step 2. Analyzing tweets for Sentiment" } [/block] So now we have a collection of 20 tweets stored in an ExampleSet that are ready to be further analyzed. The first thing were going to do from an analysis point of view is, try and determine what the Sentiment of each tweet is, i.e. whether they are Positive, Negative or Neutral. We do this by adding the **Analyze Sentiment** Operator to our Process and selecting text as our Input attribute on the right hand side, as shown in the screenshot below: [block:image] { "images": [ { "image": [ "https://files.readme.io/EXQtKIPURvezpeCUacHi_Screen%20Shot%202015-10-13%20at%205.20.04%20PM.png", "Screen Shot 2015-10-13 at 5.20.04 PM.png", "1552", "1072", "#5bb36f", "" ] } ] } [/block] So now we have a relatively simple Twitter Sentiment Analysis Process that collects tweets about Samsung and analyzes them to determine the Polarity (i.e. positive, neutral or negative) and Subjectivity (i.e. subjective or objective) of each tweet. As is displayed in the ExampleSet below, the results now contain not only the tweets that were pulled in but their corresponding Polarity and Subjectivity as well as a confidence score for both: [block:image] { "images": [ { "image": [ "https://files.readme.io/NiVzXIScQCX8sIe7PB5c_Screen%20Shot%202015-10-13%20at%205.21.12%20PM.png", "Screen Shot 2015-10-13 at 5.21.12 PM.png", "1552", "1072", "#d36133", "" ] } ] } [/block] [block:api-header] { "type": "basic", "title": "Step 3. Categorizing tweets" } [/block] So weve determined the sentiment of the tweets but like we said in the beginning, we also want to categorize them in some way. We can do this pretty easily by using the **Categorize** Operator from the Text Analysis Extension, but before we do we need to prepare our data for analysis. Firstly were going to use a **Data to Documents** Operator to generate Documents from our existing data set making it easier to categorize: [block:image] { "images": [ { "image": [ "https://files.readme.io/NAn2Zs99Tme9JW4x30l5_Screen%20Shot%202015-10-14%20at%207.36.47%20PM.png", "Screen Shot 2015-10-14 at 7.36.47 PM.png", "1552", "1072", "#c85f33", "" ] } ] } [/block] Well then add a Categorize Operator which will basically classify our text based on a particular taxonomy (simply put, a set of predefined categories), in this case were using the IAB QAG taxonomy, which is a standard used in the digital advertising industry for categorizing content: [block:image] { "images": [ { "image": [ "https://files.readme.io/2tSKdqQmTUOtcjTt4xD1_Screen%20Shot%202015-10-14%20at%207.36.49%20PM.png", "Screen Shot 2015-10-14 at 7.36.49 PM.png", "1552", "1072", "#c95f33", "" ] } ] } [/block] Now our Process is starting to take shape, but because we previously transformed our data into documents before they were categorized, we need to reverse the process and create a dataset from the resulting categorized documents, which in turn will make it easier to visualize and understand as a whole. [block:image] { "images": [ { "image": [ "https://files.readme.io/pI9UJLKdQvyYFhsrcv3q_Screen%20Shot%202015-10-14%20at%207.36.50%20PM.png", "Screen Shot 2015-10-14 at 7.36.50 PM.png", "1552", "1072", "#c95f33", "" ] } ] } [/block] So heres what our completed Process looks like: [block:image] { "images": [ { "image": [ "https://files.readme.io/a9Y4OdtwRaGHiQbg63AD_Screen%20Shot%202015-10-14%20at%207.36.40%20PM.png", "Screen Shot 2015-10-14 at 7.36.40 PM.png", "1552", "1072", "#5bb375", "" ] } ] } [/block] Connect the Operators and hit Run. The Process we've built now collects tweets, analyzes the Sentiment of those tweets, prepares them for categorization against a taxonomy and finally displays the results in an ExampleSet, like the one below: [block:image] { "images": [ { "image": [ "https://files.readme.io/mT4sSxeSrCrtiePN0uUz_Screen%20Shot%202015-10-13%20at%205.40.53%20PM.png", "Screen Shot 2015-10-13 at 5.40.53 PM.png", "1552", "1072", "#a78c58", "" ] } ] } [/block] [block:api-header] { "type": "basic", "title": "Step 4. Visualizing the results" } [/block] We have our results stored in a table (ExampleSet) but in order to make them more presentable we want to visualize them a bit better. RapidMiner lets you display and visualize results of your Process really easily using simple charts and visualizations like the ones below, which can all be created using the Charts widget on the left hand side of your results display: [block:image] { "images": [ { "image": [ "https://files.readme.io/eqWg5RjQBKZPs6hDaoXz_Screen%20Shot%202015-10-13%20at%205.22.35%20PM.png", "Screen Shot 2015-10-13 at 5.22.35 PM.png", "1552", "1072", "#1f1fbf", "" ], "caption": "Bar chart showing the total number of positive, negative and neutral tweets" } ] } [/block] [block:image] { "images": [ { "image": [ "https://files.readme.io/QtP7cD2zRA2w6xpN4QZU_Screen%20Shot%202015-10-13%20at%205.22.53%20PM.png", "Screen Shot 2015-10-13 at 5.22.53 PM.png", "1552", "1072", "#1c1dc4", "" ], "caption": "Pie chart showing the percentage of positive, negative and neutral tweets" } ] } [/block] [block:image] { "images": [ { "image": [ "https://files.readme.io/uVsZoHgKReetZgjWVPTu_Screen%20Shot%202015-10-13%20at%205.45.08%20PM.png", "Screen Shot 2015-10-13 at 5.45.08 PM.png", "1552", "1072", "#1eba82", "" ], "caption": "Pie chart showing a breakdown of tweets by their top-level category" } ] } [/block]
           </content>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <!-- Include partials-->
  <div>
   <script type="text/ng-template" id="content"><div class="block-content"><div class="blocks-parent"><div ng-repeat="(k, section) in sections" data-pos="{{ k }}" ng-if="is_sidebar === undefined || is_sidebar == !!section.sidebar" class="block section"><div ng-switch="section.type"><div ng-switch-when="textarea"><div marked="section.text"></div></div><!-- TODO: Make this generic using 'default' --><div ng-switch-when="api-header"><div type="section.type" ng-model="section.data" class="block-api-header"></div></div><div ng-switch-when="code"><div type="section.type" ng-model="section.data" class="block-code"></div></div><div ng-switch-when="image"><div type="section.type" ng-model="section.data" class="block-image"></div></div><div ng-switch-when="embed"><div type="section.type" ng-model="section.data" class="block-embed"></div></div><div ng-switch-when="callout"><div type="section.type" ng-model="section.data" class="block-callout"></div></div><div ng-switch-when="parameters"><div type="section.type" ng-model="section.data" class="block-parameters"></div></div><div ng-switch-when="html"><div type="section.type" ng-model="section.data" class="block-html"></div></div></div></div></div></div></script>
  </div>
  <div>
   <script type="text/ng-template" id="blocks/api-header/show"><div class="block-display-api-header">
  <!--
  <div class="picker-offset">
    <input type-picker ng-cloak ng-model="doc.type">
  </div>
  -->
  <h2 id="{{ slugify(data.title) }}">
    <span ng-show="data.type && data.type != 'basic'" class="pg-type-big pg-type type-{{data.type}}">{{data.type}}</span>
    {{ data.title }}
    <a class="fa fa-anchor fa-left" href="#{{ slugify(data.title) }}"></a>
  </h2>
  <hr>
</div>
</script>
   <script type="text/ng-template" id="blocks/callout/show"><div class="block-show-callout {{ !data.title? 'no-title' : ''}} type-{{data.type}}">
  <h3>
    <i class="fa fa-info-circle {{data.type == 'info' ? 'on' : ''}}" title="Info"></i>
    <i class="fa fa-exclamation-circle {{data.type == 'warning' ? 'on' : ''}}" title="Warning"></i>
    <i class="fa fa-exclamation-triangle {{data.type == 'danger' ? 'on' : ''}}" title="Danger"></i>
    <i class="fa fa-check-square {{data.type == 'success' ? 'on' : ''}}" title="Success"></i>

    <span>{{ data.title }}</span>
  </h3>

  <div marked="data.body"></div>
</div>
</script>
   <script type="text/ng-template" id="blocks/code/show"><div class="block-show-code">
  <div class="code-tabs">
    <div ng-class="{tab: true, on:$index==current, off:$index!=current}" ng-repeat="tab in data.codes track by $id($index)">
      <a href="" ng-click="choose($index)">
        <span ng-if="tab.status">
          <span ng-if="tab.status" class="status-icon status-icon-{{ getStatusCode(tab.status)[2] }}"></span>
          <em ng-if="!getStatusCode(tab.status)[3]">{{getStatusCode(tab.status)[0]}}</em>
          {{ tab.name ? tab.name : getStatusCode(tab.status)[1] }}
        </span>
        <span ng-if="!tab.status">
          {{ tab.name ? tab.name : code_types_obj[tab.language] }}
        </span>
      </a><span ng-hide="$last">&middot;</span>
    </div>
  </div>

  <div ng-repeat="tab in data.codes track by $id($index)" ng-show="$index==current">
  <pre ng-if='data.codes[$index].code == ""' class="{{theme}}" data-mode='text'><div class='text-muted'>No Content</div></pre>
  <pre ng-if='data.codes[$index].code != ""' class="{{theme}}" data-mode="{{ data.codes[$index].language }}">{{ data.codes[$index].code }}</pre>
</div>
</div>
</script>
   <script type="text/ng-template" id="blocks/image/show"><div class="block-display-image" ng-show="data.images.length > 0">
  <figure ng-show="data.images[0].image.length">
    <a href="{{ data.images[0].image[0] }}" class="block-display-image-parent block-display-image-size-{{data.images[0].sizing || 'smart'}} {{data.images[0].border ? 'block-display-image-border' : ''}}">
      <img ng-src="{{ data.images[0].image[0] }}">
    </a>
    <figcaption>{{ data.images[0].caption }}</figcaption>
  </figure>
</div>
</script>
   <script type="text/ng-template" id="blocks/parameters/show"><div class="block-display-parameters">
  <table>
    <tr ng-if="data.data['h-0'] || data.data['h-1']"> <!-- Rough check -->
      <th ng-repeat="(c, col) in getNumber(data.cols) track by $index">
        {{ data.data['h-' + c] }}
      </th>
    </tr>
    <tr ng-repeat="(r, row) in getNumber(data.rows) track by $index">
      <td ng-repeat="(c, col) in getNumber(data.cols) track by $index">
        <div marked="data.data[r + '-' + c]"></div>
      </th>
    </tr>
  </table>
</div>

</script>
   <script type="text/ng-template" id="blocks/html/show"><div class="block-display-html"></div>

</script>
   <script type="text/ng-template" id="blocks/embed/show"><div class="block-display-embed">
  <div class="html-replace" ng-if="data.html"></div>
  <div ng-if="!data.html">
    <div ng-if="data.iframe" class="iframe-replace"></div>
    <div ng-if="!data.iframe">
      <strong>
        <img ng-src="{{data.favicon}}" class="favicon" ng-if="data.favicon">
        <a href="{{ data.url }}" target="_new">{{ data.title || data.url }}</a>
      </strong>
    </div>
  </div>
</div>

</script>
  </div>
  <div class="container container-footer">
   <footer>
    <div class="pull-right">
     <a href="https://readme.io" class="poweredby">readme.io</a>
    </div>
   </footer>
  </div>
  <script>(function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',intercomSettings);}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement('script');s.type='text/javascript';s.async=true;
s.src='https://widget.intercom.io/widget/avndlx2d';
var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);}if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})()
</script>
 </body>
</html>