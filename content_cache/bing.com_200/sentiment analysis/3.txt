<!doctype html>
<!--[if IE 6]>
<html id="ie6" lang="en-US">
<![endif]-->
<!--[if IE 7]>
<html id="ie7" lang="en-US">
<![endif]-->
<!--[if IE 8]>
<html id="ie8" lang="en-US">
<![endif]-->
<!--[if !(IE 6) | !(IE 7) | !(IE 8)  ]><!-->
<html lang="en-US">
 <!--<![endif]-->
 <head> 
  <meta charset="UTF-8"> 
  <title> » Lesson 6: Basic sentiment analysis Blogclub Tworkshops</title> 
  <link rel="stylesheet" type="text/css" media="screen" href="http://www.alex-hanna.com/tworkshops/wp-content/themes/manifest/style.css"> 
  <!--[if IE 7]>
	<link rel="stylesheet" type="text/css" media="screen" href="http://www.alex-hanna.com/tworkshops/wp-content/themes/manifest/style_ie.css" />
<![endif]--> 
  <link rel="pingback" href="http://www.alex-hanna.com/tworkshops/xmlrpc.php"> 
  <!--[if lt IE 9]>
	<script src="http://www.alex-hanna.com/tworkshops/wp-content/themes/manifest/js/html5.js" type="text/javascript"></script>
<![endif]--> 
  <link rel="dns-prefetch" href="//s.w.org"> 
  <link rel="alternate" type="application/rss+xml" title="Blogclub Tworkshops » Feed" href="http://www.alex-hanna.com/tworkshops/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="Blogclub Tworkshops » Comments Feed" href="http://www.alex-hanna.com/tworkshops/comments/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="Blogclub Tworkshops » Lesson 6: Basic sentiment analysis Comments Feed" href="http://www.alex-hanna.com/tworkshops/lesson-6-basic-sentiment-analysis/feed/"> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/svg\/","svgExt":".svg","source":{"concatemoji":"http:\/\/www.alex-hanna.com\/tworkshops\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.8.2"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,56826,8203,55356,56819),0,0),c=j.toDataURL(),b!==c&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55358,56794,8205,9794,65039),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55358,56794,8203,9794,65039),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="https://api.w.org/" href="http://www.alex-hanna.com/tworkshops/wp-json/"> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://www.alex-hanna.com/tworkshops/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://www.alex-hanna.com/tworkshops/wp-includes/wlwmanifest.xml"> 
  <meta name="generator" content="WordPress 4.8.2"> 
  <link rel="canonical" href="http://www.alex-hanna.com/tworkshops/lesson-6-basic-sentiment-analysis/"> 
  <link rel="shortlink" href="http://www.alex-hanna.com/tworkshops/?p=180"> 
  <link rel="alternate" type="application/json+oembed" href="http://www.alex-hanna.com/tworkshops/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.alex-hanna.com%2Ftworkshops%2Flesson-6-basic-sentiment-analysis%2F"> 
  <link rel="alternate" type="text/xml+oembed" href="http://www.alex-hanna.com/tworkshops/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwww.alex-hanna.com%2Ftworkshops%2Flesson-6-basic-sentiment-analysis%2F&amp;format=xml"> 
  <link rel="stylesheet" type="text/css" href="http://www.alex-hanna.com/tworkshops/wp-content/plugins/wp-code-highlight/css/.css" media="screen"> 
 </head> 
 <body class="page-template-default page page-id-180"> 
  <div id="site-wrapper"> 
   <h1 class="vcard author" id="site-title"><a href="http://www.alex-hanna.com/tworkshops/" title="Home" class="fn">Blogclub Tworkshops</a></h1> 
   <nav id="main-nav"> 
    <ul> 
     <li class="page_item page-item-10"><a href="http://www.alex-hanna.com/tworkshops/">Home</a></li> 
     <li class="page_item page-item-31"><a href="http://www.alex-hanna.com/tworkshops/using-the-terminal/">Lesson 1: Twitter API and an Introduction to the Terminal</a></li> 
     <li class="page_item page-item-76"><a href="http://www.alex-hanna.com/tworkshops/lesson-2-more-terminal-and-your-first-python-script/">Lesson 2: More Terminal and your first Python script</a></li> 
     <li class="page_item page-item-114"><a href="http://www.alex-hanna.com/tworkshops/lesson-3-basic-python/">Lesson 3: Basic Python</a></li> 
     <li class="page_item page-item-137"><a href="http://www.alex-hanna.com/tworkshops/lesson-4-python-modules-and-io/">Lesson 4: Python Modules and I/O</a></li> 
     <li class="page_item page-item-149"><a href="http://www.alex-hanna.com/tworkshops/lesson-5-hadoop-and-mapreduce/">Lesson 5: Hadoop and MapReduce</a></li> 
     <li class="page_item page-item-180 current_page_item"><a href="http://www.alex-hanna.com/tworkshops/lesson-6-basic-sentiment-analysis/">Lesson 6: Basic sentiment analysis</a></li> 
     <li class="page_item page-item-196"><a href="http://www.alex-hanna.com/tworkshops/lesson-7-mention-network-analysis/">Lesson 7: Mention network analysis</a></li> 
    </ul> 
   </nav> 
   <div id="site-description">
     Processing large Twitter datasets for fun and profit 
   </div> 
   <div id="core-content"> 
    <div class="post hentry single" id="post-180"> 
     <div class="post-content"> 
      <h2 class="entry-title">Lesson 6: Basic sentiment analysis</h2> 
      <div class="entry-content"> 
       <p>Moving on to something a little more useful, we turn to actual Twitter data and to a transform of the actual text into something meaningful: sentiment across time. Even more so, we can look at metrics across time. This allows us to do some cool stuff to lots of data at once.</p> 
       <p>There’s lots of ways to do sentiment analysis, which include using stuff like a <a href="http://en.wikipedia.org/wiki/Naive_Bayes_classifier" target="_blank">Naive Bayes classifier</a>, <a href="http://en.wikipedia.org/wiki/Support_vector_machine" target="_blank">support vector machines</a>, or some other flavor of machine learning algorithm. What we’re going to use today is incredibly naive and will be based off a derivative of the <a href="http://www.cs.pitt.edu/mpqa/" target="_blank">MPQA Subjectivity Lexicon</a> with word lists that <a href="http://nealcaren.web.unc.edu/an-introduction-to-text-analysis-with-python-part-3/" target="_blank">Neal Caren</a>, sociology faculty at UNC-Chapel Hill, put together. There’s not a one-to-one correspondence between the two word lists, but for the sake of demonstration we’re not going to worry about that right now.</p> 
       <p>All I’m saying is that you probably don’t want to try to publish the results of this analysis.</p> 
       <h2>Outlining the algorithms</h2> 
       <p>Let’s break out the three processes like we did for the word count.</p> 
       <ol> 
        <li>Mapper <pre class="wp-code-highlight prettyprint">positiveWords = load positive words
negativeWords = load negative words
for each tweet:
    parse the tweet
    date  = date of the tweet down to the minute
    tweetWords = all the words in the tweet text
    positiveCount = 0
    negativeCount = 0
    for candidate in 'obama' and 'romney':
        if candidate is in the text:
            if a positive word is in the text:
               positiveCount = positiveCount + 1
            if a negative word is in the text:
               negativeCount = negativeCount + 1
        positiveRatio = positiveCount / count of all words
        negativeRatio = negativeCount / count of all words

        emit date, candidate, positiveRatio - negativeRatio</pre> </li> 
        <li>Intermediate – <code>sort keys</code></li> 
        <li>Reducer <pre class="wp-code-highlight prettyprint">for each key:
   sum = sum of the values associated with this key
   n   = number of values
   emit key, sum/n</pre> </li> 
       </ol> 
       <p>The basic idea for the mapper is that we are taking the tweet, normalizing the text, looking for a keyword of interest (in this case, it is “Obama” or “Romney”), counting the positive and negative keywords, then subtracting the ratio of negative words from the ratio of positive words.</p> 
       <p>Here’s the actual code, which you should have in <code>sentimentMapper.py</code>. This code is a little more complicated that other code you’ve seen, mostly because it relies heavily on the use of self-defined functions like <code>main</code>. You don’t have to worry about this right now, but functions are an important part of Python so if you do more work with the language in the future you should <a href="http://docs.python.org/2/tutorial/controlflow.html#defining-functions" target="_blank">learn about them</a>.</p> 
       <pre class="wp-code-highlight prettyprint">#!/usr/bin/env python

from __future__ import division
import json, string, sys, time

sentimentDict = {
    'positive': {},
    'negative': {}
}

def loadSentiment():
    f = open('../data/positive.txt', 'r')
    for line in f:
        sentimentDict['positive'][line.strip()] = 1
    f.close()

    f = open('../data/negative.txt', 'r')
    for line in f:
        sentimentDict['negative'][line.strip()] = 1
    f.close()

def main():
    loadSentiment()

    for line in sys.stdin:
        line = line.strip()

        data = ''
        try:
            data = json.loads(line)
        except ValueError as detail:
            sys.stderr.write(detail.__str__() + "\n")
            continue

        if 'text' in data:
            # Parse data in the format of
            # Sat Mar 12 01:49:55 +0000 2011
            d  = string.split( data['created_at'], ' ')
            ds = ' '.join([d[1], d[2], d[3], d[5] ])
            dt = time.strptime(ds, '%b %d %H:%M:%S %Y')

            date = time.strftime('%Y-%m-%d %H:%M:00', dt)

            ## turn text into lower case
            text = data['text'].lower()

            ## encode in UTF-8 to get rid of Unicode errors
            text   = text.encode('utf-8')
            text   = text.translate( string.maketrans(string.punctuation, ' ' * len(string.punctuation)) )

            words = {}
            for w in text.split(None): 
                if len(w) &gt; 0:
                    words[ w ] = 1

            lwords = len(words)

            counts = {
                'positive':0,
                'negative':0
                }

            ratios = {
                'positive':0,
                'negative':0
            }

            for c in ['obama', 'romney']:
                if c in text:
                    for a in ['positive', 'negative']:
                        for w in sentimentDict[a]:
                            if w in words:
                                counts[a] += 1

                        ratios[a] = counts[a]/lwords

                    ## calculate overall sentiment by subtracting one from another 
                    print "\t".join([date, c, str(ratios['positive'] - ratios['negative'])])

if __name__ == '__main__':
    main()</pre> 
       <p>Now let’s look at the reducer, which is implemented in the file <code>avgNReduce.py</code>. It’s very similar to <code>nReducer.py</code> except that it outputs averages across keys instead of sums.</p> 
       <pre class="wp-code-highlight prettyprint">#!/usr/bin/env python

from __future__ import division
from operator import itemgetter
import sys

def main():
    if len(sys.argv) &lt; 2:
        print "Usage: avgNReduce.py "
        sys.exit(0)

    c_key  = None
    c_Savg = 0
    c_n    = 0
    nkey   = int(sys.argv[1])

    # input comes from STDIN
    for line in sys.stdin:
        # remove leading and trailing whitespace
        line = line.strip()

        # parse the input we got from mapper
        row  = line.split('\t')
        key  = "\t".join( row[0:nkey] )
        Savg = row[nkey]

        # convert count (currently a string) to int
        try:
            Savg = float(Savg)
        except ValueError:
            # count was not a number, so silently
            # ignore/discard this line
            continue

        # this IF-switch only works because Hadoop sorts map output
        # by key (here: word) before it is passed to the reducer
        if c_key == key:
            c_Savg += Savg
            c_n    += 1
        else:
            if c_key:
                # write result to STDOUT
                print '%s\t%s' % (c_key, c_Savg/c_n)
            c_n    = 1
            c_Savg = Savg
            c_key  = key

    # do not forget to output the last word if needed!
    if c_key == key:
        print '%s\t%s' % (c_key, c_Savg/c_n)

if __name__ == '__main__':
    main()</pre> 
       <p>Let’s move to doing this in code.</p> 
       <h2>Implementation</h2> 
       <p>First you should grab the file called <code>elex2012.2012November5.json</code> from <code>~ahanna/public</code>. Stash it in <code>sandbox/november-tworkshop/data</code>. I’m having you grab it from this directory for two reasons: 1) it’s a somewhat large file (at most 20,000 tweets, 72 MB); and 2) Twitter’s Terms of Service doesn’t allow for public distribution of raw tweets. These tweets are from our focused sample from a fairly busy time from Monday, November 5, the day before the election.</p> 
       <pre class="wp-code-highlight prettyprint">me@blogclub:~/sandbox/november-tworkshop/data$ cp /home/ahanna/public/elex2012.2012November5.json .</pre> 
       <p>Next, check out the first 10 lines of the file using <code>head</code>.</p> 
       <pre class="wp-code-highlight prettyprint">me@blogclub:~/sandbox/november-tworkshop/data$ head -10 elex2012.2012November5.json</pre> 
       <p>Generally messy. Let’s try to make sense of this. Let’s run the mapper across these first 10 tweets. <code>cd</code> into your <code>bin</code> directory.</p> 
       <pre class="wp-code-highlight prettyprint">me@blogclub:~/sandbox/november-tworkshop/bin$ head -10 ../data/elex2012.2012November5.json | python sentimentMapper.py 
2012-11-06 01:49:00	obama	0.0
2012-11-06 01:49:00	obama	0.0</pre> 
       <p>Pretty boring — two tweets mention Obama but have no sentiment attached to them. Now try the first 100 lines. By the way, the time is “01:49” because tweets record time in <a href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time" target="_blank">UTC</a>, which can be easily converted to your preferred timezone. It is equivalent to 7:49 PM CST.</p> 
       <pre class="wp-code-highlight prettyprint">me@blogclub:~/sandbox/november-tworkshop/bin$ head -100 ../data/elex2012.2012November5.json | python sentimentMapper.py 
...</pre> 
       <p>If you did this right you should see a few more values. Now try sorting them.</p> 
       <pre class="wp-code-highlight prettyprint">me@blogclub:~/sandbox/november-tworkshop/bin$ head -100 ../data/elex2012.2012November5.json | python sentimentMapper.py | sort
...</pre> 
       <p>If you did this right you should see the values sorted by date, candidate, then value.</p> 
       <p>Finally, run it through the reducer. You need to put the number “2” after the command <code>python avgNReduce.py</code> or else it will not function. You should get the following.</p> 
       <pre class="wp-code-highlight prettyprint">me@blogclub:~/sandbox/november-tworkshop/bin$ head -100 ../data/elex2012.2012November5.json | python sentimentMapper.py | sort | python avgNReduce.py 2
2012-11-06 01:49:00	obama	0.00725749559082
2012-11-06 01:49:00	romney	0.0195280564846</pre> 
       <p>So what this presumably tells us is that Romney-sentiment was a little better than Obama-sentiment in those 100 tweets.</p> 
       <p>Finally, run the entire file through the process.</p> 
       <pre class="wp-code-highlight prettyprint">me@blogclub:~/sandbox/november-tworkshop/bin$ cat ../data/elex2012.2012November5.json | python sentimentMapper.py | sort | python avgNReduce.py 2</pre> 
       <p>This should take a few seconds. Compare your output with your neighbor’s.</p> 
       <p>Again, once you have this you can throw this in your favorite stat pack and graph the change over time. Here’s the output of this algorithm across a few months of our focused sample.</p> 
       <p><a href="http://www.alex-hanna.com/tworkshops/wp-content/uploads/2012/11/sentimentExample.png"><img class="alignnone size-large wp-image-193" title="sentimentExample" src="http://www.alex-hanna.com/tworkshops/wp-content/uploads/2012/11/sentimentExample-1024x682.png" alt="" width="750" height="500" srcset="http://www.alex-hanna.com/tworkshops/wp-content/uploads/2012/11/sentimentExample-1024x682.png 1024w, http://www.alex-hanna.com/tworkshops/wp-content/uploads/2012/11/sentimentExample-300x200.png 300w" sizes="(max-width: 750px) 100vw, 750px"></a></p> 
       <h2>Going Forward</h2> 
       <p>That’s it for this portion for the analysis. Again, since there’s a 101 ways to process text, this is only scratching the surface of what’s possible with this kind of analysis. If you want to see what else you can do with Python, check out the <a href="https://code.google.com/p/nltk/" target="_blank">Natural Language ToolKit</a> for other sorts of text processing that is possible.</p> 
      </div> 
     </div> 
    </div> 
    <div id="disqus_thread"> 
     <div id="dsq-content"> 
      <ul id="dsq-comments"> 
       <li class="post pingback"> <p>Pingback: <a href="http://www.vidalquevedo.com/hadoop-mapreduce-and-processing-large-twitter-datasets-for-fun-and-profit" rel="external nofollow" class="url">Hadoop, MapReduce and processing large Twitter datasets for fun and profit | Vidal Quevedo</a>()</p> </li> 
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="dsq-comment-11"> 
        <div id="dsq-comment-header-11" class="dsq-comment-header"> 
         <cite id="dsq-cite-11"> <span id="dsq-author-user-11">heman</span> </cite> 
        </div> 
        <div id="dsq-comment-body-11" class="dsq-comment-body"> 
         <div id="dsq-comment-message-11" class="dsq-comment-message">
          <p>Where is this directory ~ahanna/public? I am not able to download the file that you have told us to download.</p> 
         </div> 
        </div> 
        <ul class="children"> 
         <li class="comment odd alt depth-2" id="dsq-comment-12"> 
          <div id="dsq-comment-header-12" class="dsq-comment-header"> 
           <cite id="dsq-cite-12"> http://alex-hanna.com/ <span id="dsq-author-user-12">Alex Hanna</span> </cite> 
          </div> 
          <div id="dsq-comment-body-12" class="dsq-comment-body"> 
           <div id="dsq-comment-message-12" class="dsq-comment-message">
            <p>It’s on the server, blogclub.alex-hanna.com. I’ve taken the offline for the moment, however. Email at <a href="mailto:alex.hanna@gmail.com">alex.hanna@gmail.com</a> and I can help you further.</p> 
           </div> 
          </div> 
          <ul class="children"> 
           <li class="comment even depth-3" id="dsq-comment-13"> 
            <div id="dsq-comment-header-13" class="dsq-comment-header"> 
             <cite id="dsq-cite-13"> <span id="dsq-author-user-13">heman</span> </cite> 
            </div> 
            <div id="dsq-comment-body-13" class="dsq-comment-body"> 
             <div id="dsq-comment-message-13" class="dsq-comment-message">
              <p>Hi… Thanks for the reply. I have downloaded real-time data from twitter so as to make this approach more general. Btw, Awesum tutorial! ? Thanks for sharing such useful info.<br> But I have a question, How much useful will it be to do sentiment analysis on phrase-level?As of now, you have demonstrated word-level sentiment analysis, but don’t you think phrase-level sentiment anlaysis will be more applicable/apt ?</p> 
             </div> 
            </div> 
            <ul class="children"> 
             <li class="comment odd alt depth-4" id="dsq-comment-14"> 
              <div id="dsq-comment-header-14" class="dsq-comment-header"> 
               <cite id="dsq-cite-14"> http://alex-hanna.com/ <span id="dsq-author-user-14">Alex Hanna</span> </cite> 
              </div> 
              <div id="dsq-comment-body-14" class="dsq-comment-body"> 
               <div id="dsq-comment-message-14" class="dsq-comment-message">
                <p>Thanks!</p> 
                <p>There are a number of strategies for sentiment analysis. I just chose a simple algorithm for demonstration purposes. I would probably prefer using a supervised classifier that trained on messages from the corpus. But that takes a lot of work.</p> 
               </div> 
              </div> 
              <ul class="children"> 
               <li class="comment even depth-5" id="dsq-comment-36"> 
                <div id="dsq-comment-header-36" class="dsq-comment-header"> 
                 <cite id="dsq-cite-36"> <span id="dsq-author-user-36">jihao</span> </cite> 
                </div> 
                <div id="dsq-comment-body-36" class="dsq-comment-body"> 
                 <div id="dsq-comment-message-36" class="dsq-comment-message">
                  <p>thanks for your work, Alex Hanna.<br> I also want to get the JSON files used here ~ahanna/public, can you help me?</p> 
                  <p>my email address is: <a href="mailto:jihao.sn@outlook.com">jihao.sn@outlook.com</a>,<br> I have sent an email to you.</p> 
                 </div> 
                </div> </li>
               <!-- #comment-## --> 
               <li class="comment odd alt depth-5" id="dsq-comment-83"> 
                <div id="dsq-comment-header-83" class="dsq-comment-header"> 
                 <cite id="dsq-cite-83"> <span id="dsq-author-user-83">Anna Anna</span> </cite> 
                </div> 
                <div id="dsq-comment-body-83" class="dsq-comment-body"> 
                 <div id="dsq-comment-message-83" class="dsq-comment-message">
                  <p>Sir,</p> 
                  <p>Thank you so much for this tutorial.<br> I am also in need of directory ~ahanna/public. Can you please send me in </p> 
                  <p><a href="mailto:annanna.1671992@gmail.com">annanna.1671992@gmail.com</a>.</p> 
                  <p>I have already sent mail to you.</p> 
                 </div> 
                </div> </li>
               <!-- #comment-## --> 
              </ul>
              <!-- .children --> </li>
             <!-- #comment-## --> 
            </ul>
            <!-- .children --> </li>
           <!-- #comment-## --> 
          </ul>
          <!-- .children --> </li>
         <!-- #comment-## --> 
        </ul>
        <!-- .children --> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-15"> 
        <div id="dsq-comment-header-15" class="dsq-comment-header"> 
         <cite id="dsq-cite-15"> <span id="dsq-author-user-15">Praveen Gr</span> </cite> 
        </div> 
        <div id="dsq-comment-body-15" class="dsq-comment-body"> 
         <div id="dsq-comment-message-15" class="dsq-comment-message">
          <p>It is a great tutorial… what is the format of positive.txt and negative.txt ? can you provide the sample positive.txt file.</p> 
         </div> 
        </div> 
        <ul class="children"> 
         <li class="comment odd alt depth-2" id="dsq-comment-16"> 
          <div id="dsq-comment-header-16" class="dsq-comment-header"> 
           <cite id="dsq-cite-16"> http://alex-hanna.com/ <span id="dsq-author-user-16">Alex Hanna</span> </cite> 
          </div> 
          <div id="dsq-comment-body-16" class="dsq-comment-body"> 
           <div id="dsq-comment-message-16" class="dsq-comment-message">
            <p>Thanks! Basic one word per line: <a href="http://www.unc.edu/~ncaren/haphazard/positive.txt" rel="nofollow">http://www.unc.edu/~ncaren/haphazard/positive.txt</a></p> 
           </div> 
          </div> 
          <ul class="children"> 
           <li class="comment even depth-3" id="dsq-comment-17"> 
            <div id="dsq-comment-header-17" class="dsq-comment-header"> 
             <cite id="dsq-cite-17"> <span id="dsq-author-user-17">Praveen Gr</span> </cite> 
            </div> 
            <div id="dsq-comment-body-17" class="dsq-comment-body"> 
             <div id="dsq-comment-message-17" class="dsq-comment-message">
              <p>Thanks Alex for your quick reply</p> 
             </div> 
            </div> 
            <ul class="children"> 
             <li class="comment odd alt depth-4" id="dsq-comment-18"> 
              <div id="dsq-comment-header-18" class="dsq-comment-header"> 
               <cite id="dsq-cite-18"> <span id="dsq-author-user-18">Praveen Gr</span> </cite> 
              </div> 
              <div id="dsq-comment-body-18" class="dsq-comment-body"> 
               <div id="dsq-comment-message-18" class="dsq-comment-message">
                <p>Hi Alex can you help me with sentiment analysis code which gives considerably good result ?</p> 
               </div> 
              </div> 
              <ul class="children"> 
               <li class="comment even depth-5" id="dsq-comment-19"> 
                <div id="dsq-comment-header-19" class="dsq-comment-header"> 
                 <cite id="dsq-cite-19"> http://alex-hanna.com/ <span id="dsq-author-user-19">Alex Hanna</span> </cite> 
                </div> 
                <div id="dsq-comment-body-19" class="dsq-comment-body"> 
                 <div id="dsq-comment-message-19" class="dsq-comment-message">
                  <p>You can look into different sentiment analysis packages for R and Python. I don’t know of any off the top of my head but I know they;re out there.</p> 
                 </div> 
                </div> </li>
               <!-- #comment-## --> 
              </ul>
              <!-- .children --> </li>
             <!-- #comment-## --> 
            </ul>
            <!-- .children --> </li>
           <!-- #comment-## --> 
          </ul>
          <!-- .children --> </li>
         <!-- #comment-## --> 
        </ul>
        <!-- .children --> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-even depth-1" id="dsq-comment-41"> 
        <div id="dsq-comment-header-41" class="dsq-comment-header"> 
         <cite id="dsq-cite-41"> <span id="dsq-author-user-41">Andrew Martin</span> </cite> 
        </div> 
        <div id="dsq-comment-body-41" class="dsq-comment-body"> 
         <div id="dsq-comment-message-41" class="dsq-comment-message">
          <p>Need to ask you another question about this awesome tutorial series. Again, I may be doing something obviously wrong. In your reducer, you have the following two lines:</p> 
          <p> key = “t”.join( row[0:nkey] )<br> Savg = row[nkey]</p> 
          <p>The first line splits “row” along its tabs and joins the tabs contained in row from 0 to the number input (which is 2), and is used to combine date and time.<br> The Savg is used to store the contents of row[2] which is the sentiment.</p> 
          <p>Why does the first line know to stop BEFORE the contents of the sentiment, yet the second line knows to BEGIN with the contents of the sentiment, when they’re both the same number?<br> i.e. why does the first line not end with column 2 and then second line begin with column 3, or something to that effect?</p> 
         </div> 
        </div> 
        <ul class="children"> 
         <li class="comment even depth-2" id="dsq-comment-42"> 
          <div id="dsq-comment-header-42" class="dsq-comment-header"> 
           <cite id="dsq-cite-42"> http://alex-hanna.com/ <span id="dsq-author-user-42">Alex Hanna</span> </cite> 
          </div> 
          <div id="dsq-comment-body-42" class="dsq-comment-body"> 
           <div id="dsq-comment-message-42" class="dsq-comment-message">
            <p>Python does do this. That’s how Python indexing works.</p> 
            <p>&gt;&gt;&gt; nkey = 2<br> &gt;&gt;&gt; a = [0,1,2,3,4,5]<br> &gt;&gt;&gt; a[0:nkey]<br> [0, 1]<br> &gt;&gt;&gt; a[nkey]<br> 2</p> 
           </div> 
          </div> 
          <ul class="children"> 
           <li class="comment odd alt depth-3" id="dsq-comment-43"> 
            <div id="dsq-comment-header-43" class="dsq-comment-header"> 
             <cite id="dsq-cite-43"> <span id="dsq-author-user-43">Andrew Martin</span> </cite> 
            </div> 
            <div id="dsq-comment-body-43" class="dsq-comment-body"> 
             <div id="dsq-comment-message-43" class="dsq-comment-message">
              <p>Brilliant, should have known. I’m used to Java and it’s not quite the same. I do have (what I hope!) is one final question.<br> In the reducer, c_key is initially set to None. As soon as the for loop begins, it has its value “collected” from the Mapper (as a simple print statement inside the loop shows). How does the system know to store it in this variable. Is it to do with the None key word?</p> 
             </div> 
            </div> </li>
           <!-- #comment-## --> 
          </ul>
          <!-- .children --> </li>
         <!-- #comment-## --> 
        </ul>
        <!-- .children --> </li>
       <!-- #comment-## --> 
       <li class="post pingback"> <p>Pingback: <a href="http://www.blogosfera.co.uk/2013/08/no-json-object-could-be-decoded-error-on-mapreduce-job/" rel="external nofollow" class="url">No JSON object could be decoded error on mapreduce job | BlogoSfera</a>()</p> </li> 
       <!-- #comment-## --> 
       <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-46"> 
        <div id="dsq-comment-header-46" class="dsq-comment-header"> 
         <cite id="dsq-cite-46"> <span id="dsq-author-user-46">Andrew Martin</span> </cite> 
        </div> 
        <div id="dsq-comment-body-46" class="dsq-comment-body"> 
         <div id="dsq-comment-message-46" class="dsq-comment-message">
          <p>Hey Alex,</p> 
          <p>Can I ask you one further question! I am now trying to plug my adapation of this into Hadoop to run it as a mapreduce job. But I’m getting stuck on loading the sentiment word files. How do you do this in Hadoop, when you can’t just simply point to the local file system like in the examples above?</p> 
         </div> 
        </div> 
        <ul class="children"> 
         <li class="comment odd alt depth-2" id="dsq-comment-47"> 
          <div id="dsq-comment-header-47" class="dsq-comment-header"> 
           <cite id="dsq-cite-47"> http://alex-hanna.com/ <span id="dsq-author-user-47">Alex Hanna</span> </cite> 
          </div> 
          <div id="dsq-comment-body-47" class="dsq-comment-body"> 
           <div id="dsq-comment-message-47" class="dsq-comment-message">
            <p>What errors are you getting?</p> 
           </div> 
          </div> 
          <ul class="children"> 
           <li class="comment even depth-3" id="dsq-comment-48"> 
            <div id="dsq-comment-header-48" class="dsq-comment-header"> 
             <cite id="dsq-cite-48"> <span id="dsq-author-user-48">Andrew Martin</span> </cite> 
            </div> 
            <div id="dsq-comment-body-48" class="dsq-comment-body"> 
             <div id="dsq-comment-message-48" class="dsq-comment-message">
              <p>Hadoop goes like this:</p> 
              <p>Map 0% Reduce 0%<br> Map 100% Reduce 100%</p> 
              <p>ERROR streaming.StreamJob Job not successful. Error: # of failed Map Tasks exceeded allowed limit. FailedCount: 1. LastFailedTask: task_20138271431_0077_m_000001<br> INFO streaming.StreamJob: killJob…<br> Streaming Command Failed!</p> 
              <p>When I check the logs, it’s always the same (unhelpful!) error:</p> 
              <p>java.lang.RuntimeException: PipeMapRed.waitOutputThreads(): subprocess failed with code 1</p> 
              <p>I’m currently running the job like this:</p> 
              <p>bin/hadoop jar contrib/streaming/hadoop-streaming-1.1.2.jar -D mapred.reduce.tasks = 0 -files hdfs://localhost:54310/mapreduce/SentimentWordLists/positive_words.txt, hdfs://localhost:54310/mapreduce/SentimentWordLists/positive_words.txt -file map.py mapper map.py -input /tweetsToBeInput output /finishedTweets</p> 
              <p>I’ve tried removing the -files part and accessing the files within the code using the hdfs address, but no matter how I try, I can’t access these files.</p> 
             </div> 
            </div> 
            <ul class="children"> 
             <li class="comment odd alt depth-4" id="dsq-comment-49"> 
              <div id="dsq-comment-header-49" class="dsq-comment-header"> 
               <cite id="dsq-cite-49"> http://alex-hanna.com/ <span id="dsq-author-user-49">Alex Hanna</span> </cite> 
              </div> 
              <div id="dsq-comment-body-49" class="dsq-comment-body"> 
               <div id="dsq-comment-message-49" class="dsq-comment-message">
                <p>I think you need to put local files in the -files directive. I also think you need to write “-mapper” and “-output” as well.</p> 
               </div> 
              </div> 
              <ul class="children"> 
               <li class="comment even depth-5" id="dsq-comment-50"> 
                <div id="dsq-comment-header-50" class="dsq-comment-header"> 
                 <cite id="dsq-cite-50"> <span id="dsq-author-user-50">Andrew Martin</span> </cite> 
                </div> 
                <div id="dsq-comment-body-50" class="dsq-comment-body"> 
                 <div id="dsq-comment-message-50" class="dsq-comment-message">
                  <p>Thanks Alex. I got it fixed. I ended up using the -file directory and had to add a line to the top of my python script to find it. Thanks</p> 
                 </div> 
                </div> </li>
               <!-- #comment-## --> 
               <li class="comment odd alt depth-5" id="dsq-comment-51"> 
                <div id="dsq-comment-header-51" class="dsq-comment-header"> 
                 <cite id="dsq-cite-51"> http://alex-hanna.com/ <span id="dsq-author-user-51">Alex Hanna</span> </cite> 
                </div> 
                <div id="dsq-comment-body-51" class="dsq-comment-body"> 
                 <div id="dsq-comment-message-51" class="dsq-comment-message">
                  <p>Great!</p> 
                 </div> 
                </div> </li>
               <!-- #comment-## --> 
              </ul>
              <!-- .children --> </li>
             <!-- #comment-## --> 
            </ul>
            <!-- .children --> </li>
           <!-- #comment-## --> 
          </ul>
          <!-- .children --> </li>
         <!-- #comment-## --> 
        </ul>
        <!-- .children --> </li>
       <!-- #comment-## --> 
       <li class="post pingback"> <p>Pingback: <a href="http://www.sajuria.com/obama-syria-speech/" rel="external nofollow" class="url">Quick report: Obama’s speech on Syria | Javier Sajuria</a>()</p> </li> 
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="dsq-comment-80"> 
        <div id="dsq-comment-header-80" class="dsq-comment-header"> 
         <cite id="dsq-cite-80"> <span id="dsq-author-user-80">Amit Sharma</span> </cite> 
        </div> 
        <div id="dsq-comment-body-80" class="dsq-comment-body"> 
         <div id="dsq-comment-message-80" class="dsq-comment-message">
          <p>Hi, I am trying to run the job in map-reduce and it is failing on mapper it self. Please fine the below error message.</p> 
          <p>16/08/14 20:27:10 INFO client.RMProxy: Connecting to ResourceManager at<br> 16/08/14 20:27:11 INFO impl.TimelineClientImpl: Timeline service address:<br> 16/08/14 20:27:11 INFO client.RMProxy: Connecting to ResourceManager at<br> 16/08/14 20:27:12 INFO mapred.FileInputFormat: Total input paths to process : 1<br> 16/08/14 20:27:12 INFO mapreduce.JobSubmitter: number of splits:2<br> 16/08/14 20:27:12 INFO mapreduce.JobSubmitter: Submitting tokens for job: job_1471219268759_0004<br> 16/08/14 20:27:12 INFO impl.YarnClientImpl: Submitted application application_1471219268759_0004<br> 16/08/14 20:27:12 INFO mapreduce.Job: The url to track the job:<br> 16/08/14 20:27:12 INFO mapreduce.Job: Running job: job_1471219268759_0004<br> 16/08/14 20:27:23 INFO mapreduce.Job: Job job_1471219268759_0004 running in uber mode : false<br> 16/08/14 20:27:23 INFO mapreduce.Job: map 0% reduce 0%<br> 16/08/14 20:27:29 INFO mapreduce.Job: Task Id : attempt_1471219268759_0004_m_000000_0, Status : FAILED<br> Error: java.lang.RuntimeException: PipeMapRed.waitOutputThreads(): subprocess failed with code 1<br> at org.apache.hadoop.streaming.PipeMapRed.waitOutputThreads(PipeMapRed.java:322)<br> at org.apache.hadoop.streaming.PipeMapRed.mapRedFinished(PipeMapRed.java:535)<br> at org.apache.hadoop.streaming.PipeMapper.close(PipeMapper.java:130)<br> at org.apache.hadoop.mapred.MapRunner.run(MapRunner.java:61)<br> at org.apache.hadoop.streaming.PipeMapRunner.run(PipeMapRunner.java:34)<br> at org.apache.hadoop.mapred.MapTask.runOldMapper(MapTask.java:453)<br> at org.apache.hadoop.mapred.MapTask.run(MapTask.java:343)<br> at org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:168)<br> at java.security.AccessController.doPrivileged(Native Method)<br> at javax.security.auth.Subject.doAs(Subject.java:422)<br> at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1657)<br> at org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:162)</p> 
          <p>16/08/14 20:27:32 INFO mapreduce.Job: Task Id : attempt_1471219268759_0004_m_000000_1, Status : FAILED</p> 
         </div> 
        </div> 
        <ul class="children"> 
         <li class="comment odd alt depth-2" id="dsq-comment-81"> 
          <div id="dsq-comment-header-81" class="dsq-comment-header"> 
           <cite id="dsq-cite-81"> http://alex-hanna.com/ <span id="dsq-author-user-81">Alex Hanna</span> </cite> 
          </div> 
          <div id="dsq-comment-body-81" class="dsq-comment-body"> 
           <div id="dsq-comment-message-81" class="dsq-comment-message">
            <p>I can’t really tell you what’s happening here without more information.</p> 
           </div> 
          </div> </li>
         <!-- #comment-## --> 
        </ul>
        <!-- .children --> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-odd thread-alt depth-1" id="dsq-comment-82"> 
        <div id="dsq-comment-header-82" class="dsq-comment-header"> 
         <cite id="dsq-cite-82"> <span id="dsq-author-user-82">noman</span> </cite> 
        </div> 
        <div id="dsq-comment-body-82" class="dsq-comment-body"> 
         <div id="dsq-comment-message-82" class="dsq-comment-message">
          <p>sir i want c# code of this sentiment analysis…this is difficult to understand..<br> please send me proper code.<br> <a href="mailto:noman.bilal37@gmail.com">noman.bilal37@gmail.com</a></p> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
      </ul> 
     </div> 
    </div> 
    <script type="text/javascript">
var disqus_url = 'http://www.alex-hanna.com/tworkshops/lesson-6-basic-sentiment-analysis/';
var disqus_identifier = '180 http://www.alex-hanna.com/tworkshops/?page_id=180';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'blogclubtworkshops';
var disqus_title = "Lesson 6: Basic sentiment analysis";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
        this.callbacks.onReady.push(function () {

        // sync comments in the background so we don't block the page
        var script = document.createElement('script');
        script.async = true;
        script.src = '?cf_action=sync_comments&post_id=180';

        var firstScript = document.getElementsByTagName('script')[0];
        firstScript.parentNode.insertBefore(script, firstScript);
    });
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script> 
   </div>
   <!-- #core-content --> 
   <!--WP Code Highlight_start--> 
   <script type="text/javascript">
		window.onload = function(){prettyPrint();};
	</script> 
   <script type="text/javascript" src="http://www.alex-hanna.com/tworkshops/wp-content/plugins/wp-code-highlight/js/wp-code-highlight.js"></script> 
   <!--WP Code Highlight_end--> 
  </div>
  <!-- #site-wrapper --> 
  <div id="footer"> 
   <!-- Search Field --> 
   <div class="footer-content"> 
    <form method="get" id="searchform" action="http://www.alex-hanna.com/tworkshops/"> 
     <div id="search"> 
      <input type="text" value="" name="s" id="s"> 
      <input type="submit" id="searchsubmit" value="Search"> 
     </div> 
    </form> 
    <p> <a href="http://wordpress.org/" rel="generator">Proudly powered by WordPress</a> Theme: Manifest by <a href="http://jimbarraud.com/" rel="designer">Jim Barraud</a>. </p> 
   </div> 
  </div>
  <!-- #footer --> 
  <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'blogclubtworkshops';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1) {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('data-dsqidentifier'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script'); 
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script> 
  <script type="text/javascript" src="http://www.alex-hanna.com/tworkshops/wp-includes/js/comment-reply.min.js?ver=4.8.2"></script> 
  <script type="text/javascript" src="http://www.alex-hanna.com/tworkshops/wp-includes/js/wp-embed.min.js?ver=4.8.2"></script> 
  <!-- 
			Plugin: Super Simple Google Analytics 
	Plugin URL: Super Simple Google Analytics


	--> 
  <script type="text/javascript">
	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-3833784-9']);
	  _gaq.push(['_trackPageview']);
	
	  (function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	  })();
	</script>  
 </body>
</html>