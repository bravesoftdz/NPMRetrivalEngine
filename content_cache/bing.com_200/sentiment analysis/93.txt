<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <title>First shot: Sentiment Analysis in R :  Andy Bromberg</title> 
  <!--[if gte IE 7]><!--> 
  <link rel="stylesheet" href="http://andybromberg.com/wp-content/themes/manifest_v1.1/style.css" type="text/css" media="screen" charset="utf-8"> 
  <!-- <![endif]--> 
  <!--[if IE 7]>
  <link rel="stylesheet" href="http://andybromberg.com/wp-content/themes/manifest_v1.1/style_ie.css" type="text/css" media="screen" charset="utf-8" />
<![endif]--> 
  <!--[if IE 6]>
<link rel="stylesheet" type="text/css" media="screen" href="http://andybromberg.com/wp-content/themes/manifest_v1.1/styles_ie6.css" />
<![endif]--> 
  <link rel="alternate" type="application/rss+xml" title="Andy Bromberg RSS Feed" href="http://andybromberg.com/feed/"> 
  <link rel="alternate" type="application/atom+xml" title="Andy Bromberg Atom Feed" href="http://andybromberg.com/feed/atom/"> 
  <script type="text/javascript" src="http://andybromberg.com/wp-content/themes/manifest_v1.1/js/jquery-1.3.2.min.js" charset="utf-8">
    
  </script> 
  <link rel="pingback" href="http://andybromberg.com/xmlrpc.php"> 
  <link rel="dns-prefetch" href="//s.w.org"> 
  <link rel="alternate" type="application/rss+xml" title="Andy Bromberg » First shot: Sentiment Analysis in R Comments Feed" href="http://andybromberg.com/sentiment-analysis/feed/"> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2\/svg\/","svgExt":".svg","source":{"concatemoji":"http:\/\/andybromberg.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.6"}};
			!function(a,b,c){function d(a){var c,d,e,f,g,h=b.createElement("canvas"),i=h.getContext&&h.getContext("2d"),j=String.fromCharCode;if(!i||!i.fillText)return!1;switch(i.textBaseline="top",i.font="600 32px Arial",a){case"flag":return i.fillText(j(55356,56806,55356,56826),0,0),!(h.toDataURL().length<3e3)&&(i.clearRect(0,0,h.width,h.height),i.fillText(j(55356,57331,65039,8205,55356,57096),0,0),c=h.toDataURL(),i.clearRect(0,0,h.width,h.height),i.fillText(j(55356,57331,55356,57096),0,0),d=h.toDataURL(),c!==d);case"diversity":return i.fillText(j(55356,57221),0,0),e=i.getImageData(16,16,1,1).data,f=e[0]+","+e[1]+","+e[2]+","+e[3],i.fillText(j(55356,57221,55356,57343),0,0),e=i.getImageData(16,16,1,1).data,g=e[0]+","+e[1]+","+e[2]+","+e[3],f!==g;case"simple":return i.fillText(j(55357,56835),0,0),0!==i.getImageData(16,16,1,1).data[0];case"unicode8":return i.fillText(j(55356,57135),0,0),0!==i.getImageData(16,16,1,1).data[0];case"unicode9":return i.fillText(j(55358,56631),0,0),0!==i.getImageData(16,16,1,1).data[0]}return!1}function e(a){var c=b.createElement("script");c.src=a,c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i;for(i=Array("simple","flag","unicode8","diversity","unicode9"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="stylesheet" id="wp-syntax-css-css" href="http://andybromberg.com/wp-content/plugins/wp-syntax/css/wp-syntax.css?ver=1.0" type="text/css" media="all"> 
  <link rel="stylesheet" id="wp-markdown-prettify-css" href="http://andybromberg.com/wp-content/plugins/wp-markdown/css/prettify.css?ver=1.5.1" type="text/css" media="all"> 
  <!-- This site uses the Google Analytics by MonsterInsights plugin v5.5.2 - Universal enabled - https://www.monsterinsights.com/ --> 
  <script type="text/javascript">
	(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	})(window,document,'script','//www.google-analytics.com/analytics.js','__gaTracker');

	__gaTracker('create', 'UA-10845213-1', 'auto');
	__gaTracker('set', 'forceSSL', true);
	__gaTracker('send','pageview');

</script> 
  <!-- / Google Analytics by MonsterInsights --> 
  <script type="text/javascript" src="http://andybromberg.com/wp-includes/js/jquery/jquery.js?ver=1.12.4"></script> 
  <script type="text/javascript" src="http://andybromberg.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1"></script> 
  <script type="text/javascript" src="http://andybromberg.com/wp-content/plugins/wp-markdown/js/prettify.min.js?ver=1.5.1"></script> 
  <link rel="https://api.w.org/" href="http://andybromberg.com/wp-json/"> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://andybromberg.com/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://andybromberg.com/wp-includes/wlwmanifest.xml"> 
  <link rel="next" title="Second Try: Sentiment Analysis in Python" href="http://andybromberg.com/sentiment-analysis-python/"> 
  <meta name="generator" content="WordPress 4.6"> 
  <link rel="canonical" href="http://andybromberg.com/sentiment-analysis/"> 
  <link rel="shortlink" href="http://andybromberg.com/?p=12"> 
  <link rel="alternate" type="application/json+oembed" href="http://andybromberg.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fandybromberg.com%2Fsentiment-analysis%2F"> 
  <link rel="alternate" type="text/xml+oembed" href="http://andybromberg.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fandybromberg.com%2Fsentiment-analysis%2F&amp;format=xml"> 
  <script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
    }
  });
</script> 
  <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script> 
 </head> 
 <body class="single single-post postid-12 single-format-standard"> 
  <div id="siteWrapper"> 
   <h1 class="vcard author"><a href="http://andybromberg.com/" title="Home" class="fn">Andy Bromberg</a></h1> 
   <div id="mainNav"> 
    <ul> 
     <li class="page_item page-item-19"><a href="http://andybromberg.com/contact/">Contact Me</a></li> 
     <li class="page_item page-item-51"><a href="http://andybromberg.com/rss-feed/">Feed</a></li> 
    </ul> 
   </div> 
   <div id="siteDescription"> 
   </div> 
   <div id="coreContent"> 
    <div class="post single hentry"> 
     <div class="postContent"> 
      <h3 class="entry-title">First shot: Sentiment Analysis in R</h3> 
      <h4 class="vcard author">by <span class="fn">andy</span></h4> 
      <div class="entry-content"> 
       <h2>Introduction</h2> 
       <p>Over the past few weeks, I’ve become very interested in statistics and machine learning. During my first semester at school, I learned a huge amount about the <a href="http://www.r-project.org/" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://www.r-project.org/', 'R programming language');">R programming language</a> (thanks to a couple of my classes and a very helpful TA — more on that in a later post), but I quickly ran out of ideas to code up.</p> 
       <p>About two weeks ago, I realized that I should really have more of a background in statistics (I’ve never taken a statistics class) if I wanted to keep advancing my knowledge of R. I watched a lot of <a href="https://www.khanacademy.org/math/probability" onclick="__gaTracker('send', 'event', 'outbound-article', 'https://www.khanacademy.org/math/probability', 'Khan Academy');">Khan Academy</a> videos and read tutorials and papers to begin getting a basic understanding of the field and some of the techniques used in it.</p> 
       <p>Then, a few days ago, I started looking again for projects to work on. I came upon Jeffrey Breen’s excellent discussion of <a href="http://www.inside-r.org/howto/mining-twitter-airline-consumer-sentiment" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://www.inside-r.org/howto/mining-twitter-airline-consumer-sentiment', 'mining Twitter for airline customer sentiment');">mining Twitter for airline customer sentiment</a>. This launched me into research of sentiment analysis using R.</p> 
       <p>Around the same time, I also came upon some of the basic concepts of <a href="http://en.wikipedia.org/wiki/Machine_learning" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://en.wikipedia.org/wiki/Machine_learning', 'machine learning');">machine learning</a>, including <a href="http://en.wikipedia.org/wiki/Statistical_classification" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://en.wikipedia.org/wiki/Statistical_classification', 'classification algorithms');">classification algorithms</a>. I then decided on a project to work on that would combine my learning so far in all four of these areas: R, statistics, sentiment analysis and data mining, and classification algorithms (the last two being closely related).</p> 
       <p>Here was my (very) basic workflow for the project:</p> 
       <ol> 
        <li>Select content to analyze</li> 
        <li>Analyze content using dataset of positive and negative elements</li> 
        <li>Train a classification algorithm based on the data</li> 
        <li>Use a classification algorithm to attempt to re-classify the same content and see how well it does</li> 
       </ol> 
       <p>This post will be peppered with the code I wrote (in R) for this project. If you’d like to take a look at all of it at once, either scroll to the bottom of the post or check it out on GitHub <a href="https://github.com/abromberg/sentiment_analysis" onclick="__gaTracker('send', 'event', 'outbound-article', 'https://github.com/abromberg/sentiment_analysis', 'here');">here</a>.</p> 
       <h2>The Process</h2> 
       <p>I quickly decided that for my first sentiment analysis project, I didn’t want to mine Twitter. Tweets are too varied, not only in intention but also in language (<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>). I found that sentiment analysts often use product and movie reviews to test their analyses, so I settled on those. I found Cornell professor Bo Pang’s page on <a href="http://www.cs.cornell.edu/people/pabo/movie-review-data/" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://www.cs.cornell.edu/people/pabo/movie-review-data/', 'movie review data');">movie review data</a> and selected his <em>sentence polarity dataset v1.0</em>, which has 10,663 sentences from movie reviews, each classified as either positive or negative. This would be my base content.</p> 
       <p>Here’s the code to load up the positive and negative sentences and split them onto individual lines (using str_split() from the <a href="http://cran.r-project.org/web/packages/stringr/index.html" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://cran.r-project.org/web/packages/stringr/index.html', 'stringr package');">stringr package</a>) (<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>):</p> 
       <div class="wp_syntax">
        <table>
         <tbody>
          <tr>
           <td class="line_numbers"><pre>1
2
3
4
5
6
</pre></td>
           <td class="code"><pre class="r" style="font-family:monospace;">posText &lt;- read.delim(file='polarityData/rt-polaritydata/rt-polarity-pos.txt', header=FALSE, stringsAsFactors=FALSE)
posText &lt;- posText$V1
posText &lt;- unlist(lapply(posText, function(x) { str_split(x, "\n") }))
negText &lt;- read.delim(file='polarityData/rt-polaritydata/rt-polarity-neg.txt', header=FALSE, stringsAsFactors=FALSE)
negText &lt;- negText$V1
negText &lt;- unlist(lapply(negText, function(x) { str_split(x, "\n") }))</pre></td>
          </tr>
         </tbody>
        </table>
       </div> 
       <p>After a lot of searching around for a dataset to analyze the sentence content, I found the <a href="http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://www2.imm.dtu.dk/pubdb/views/publication_details.php?id=6010', 'AFINN wordlist');">AFINN wordlist</a>, which has 2477 words and phrases rated from -5 [very negative] to +5 [very positive]. I reclassified the AFINN words into four categories (<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>):</p> 
       <ul> 
        <li>Very Negative (rating -5 or -4)</li> 
        <li>Negative (rating -3, -2, or -1)</li> 
        <li>Positive (rating 1, 2, or 3)</li> 
        <li>Very Positive (rating 4 or 5)</li> 
       </ul> 
       <p>I also added in a few more words specific to movies (<a href="http://member.tokoha-u.ac.jp/~dixonfdm/Writing%20Topics%20htm/Movie%20Review%20Folder/movie_descrip_vocab.htm" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://member.tokoha-u.ac.jp/~dixonfdm/Writing%20Topics%20htm/Movie%20Review%20Folder/movie_descrip_vocab.htm', 'found here');">found here</a>) to round out my wordlist. Here’s the code for all that:</p> 
       <div class="wp_syntax">
        <table>
         <tbody>
          <tr>
           <td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td>
           <td class="code"><pre class="r" style="font-family:monospace;">#load up word polarity list and format it
afinn_list &lt;- read.delim(file='AFINN/AFINN-111.txt', header=FALSE, stringsAsFactors=FALSE)
names(afinn_list) &lt;- c('word', 'score')
afinn_list$word &lt;- tolower(afinn_list$word)
&nbsp;
#categorize words as very negative to very positive and add some movie-specific words
vNegTerms &lt;- afinn_list$word[afinn_list$score==-5 | afinn_list$score==-4]
negTerms &lt;- c(afinn_list$word[afinn_list$score==-3 | afinn_list$score==-2 | afinn_list$score==-1], "second-rate", "moronic", "third-rate", "flawed", "juvenile", "boring", distasteful", "ordinary", "disgusting", "senseless", "static", "brutal", "confused", "disappointing", "bloody", "silly", "tired", "predictable", "stupid", "uninteresting", "trite", uneven", "outdated", "dreadful", "bland")
posTerms &lt;- c(afinn_list$word[afinn_list$score==3 | afinn_list$score==2 | afinn_list$score==1], "first-rate", "insightful", "clever", "charming", "comical", "charismatic", "enjoyable", "absorbing", "sensitive", "intriguing", "powerful", "pleasant", "surprising", "thought-provoking", "imaginative", "unpretentious")
vPosTerms &lt;- c(afinn_list$word[afinn_list$score==5 | afinn_list$score==4], "uproarious", "riveting", "fascinating", "dazzling", "legendary")</pre></td>
          </tr>
         </tbody>
        </table>
       </div> 
       <p>I chose to ignore neutral words because I didn’t believe these would help my classification. I then counted the number of words in each review that fit one of those four categories. This left me with a big data table (10,663 rows) of the form:</p> 
       <p>sentence | #vNeg | #neg | #pos | #vPos | sentiment</p> 
       <p>For example:</p> 
       <p>Though it is by no means his best work, laissez-passer is a distinguished and distinctive effort by a bona-fide master, a fascinating film replete with rewards to be had by all willing to make the effort to reap them. | 0 | 1 | 3 | 1 | positive</p> 
       <p>In this example, it means that sentence had 1 negative word, 3 positive words, and 1 very positive word. It was also classified as positive by the database creator.</p> 
       <p>I wrote a bunch of code (heavily based off Jeffrey Breen’s code) to accomplish all this. Here it is (I used the laply function from the <a href="http://cran.r-project.org/web/packages/plyr/index.html" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://cran.r-project.org/web/packages/plyr/index.html', 'plyr package');">plyr package</a> in there):</p> 
       <div class="wp_syntax">
        <table>
         <tbody>
          <tr>
           <td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
</pre></td>
           <td class="code"><pre class="r" style="font-family:monospace;">#function to calculate number of words in each category within a sentence
sentimentScore &lt;- function(sentences, vNegTerms, negTerms, posTerms, vPosTerms){
  final_scores &lt;- matrix('', 0, 5)
  scores &lt;- laply(sentences, function(sentence, vNegTerms, negTerms, posTerms, vPosTerms){
    initial_sentence &lt;- sentence
    #remove unnecessary characters and split up by word 
    sentence &lt;- gsub('[[:punct:]]', '', sentence)
    sentence &lt;- gsub('[[:cntrl:]]', '', sentence)
    sentence &lt;- gsub('\\d+', '', sentence)
    sentence &lt;- tolower(sentence)
    wordList &lt;- str_split(sentence, '\\s+')
    words &lt;- unlist(wordList)
    #build vector with matches between sentence and each category
    vPosMatches &lt;- match(words, vPosTerms)
    posMatches &lt;- match(words, posTerms)
    vNegMatches &lt;- match(words, vNegTerms)
    negMatches &lt;- match(words, negTerms)
    #sum up number of words in each category
    vPosMatches &lt;- sum(!is.na(vPosMatches))
    posMatches &lt;- sum(!is.na(posMatches))
    vNegMatches &lt;- sum(!is.na(vNegMatches))
    negMatches &lt;- sum(!is.na(negMatches))
    score &lt;- c(vNegMatches, negMatches, posMatches, vPosMatches)
    #add row to scores table
    newrow &lt;- c(initial_sentence, score)
    final_scores &lt;- rbind(final_scores, newrow)
    return(final_scores)
  }, vNegTerms, negTerms, posTerms, vPosTerms)
  return(scores)
 }    
&nbsp;
#build tables of positive and negative sentences with scores
posResult &lt;- as.data.frame(sentimentScore(posText, vNegTerms, negTerms, posTerms, vPosTerms))
negResult &lt;- as.data.frame(sentimentScore(negText, vNegTerms, negTerms, posTerms, vPosTerms))
posResult &lt;- cbind(posResult, 'positive')
colnames(posResult) &lt;- c('sentence', 'vNeg', 'neg', 'pos', 'vPos', 'sentiment')
negResult &lt;- cbind(negResult, 'negative')
colnames(negResult) &lt;- c('sentence', 'vNeg', 'neg', 'pos', 'vPos', 'sentiment')    
&nbsp;
#combine the positive and negative tables
results &lt;- rbind(posResult, negResult)</pre></td>
          </tr>
         </tbody>
        </table>
       </div> 
       <p>In Jeffrey Breen’s analysis of airline customer sentiment, he used a very simple algorithm to classify the Tweets: he simply took the number of negative terms and subtracted them from the number of positive terms. He then compared these negative and positive values to each other to visualize their sentiment. I decided to implement an algorithm I had learned while researching machine learning: the <a href="http://en.wikipedia.org/wiki/Naive_Bayes_classifier" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://en.wikipedia.org/wiki/Naive_Bayes_classifier', 'Naive Bayes classifier');">Naive Bayes classifier</a>. I picked up the idea to run a classification algorithm from <a href="http://danzambonini.com/self-improving-bayesian-sentiment-analysis-for-twitter/" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://danzambonini.com/self-improving-bayesian-sentiment-analysis-for-twitter/', 'this post');">this post</a>, which used a similar process to the one described by Breen but relied on a Bayes classifier instead of his additive method.</p> 
       <p>At this point, I used the naiveBayes classifier from the <a href="http://cran.r-project.org/web/packages/e1071/index.html" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://cran.r-project.org/web/packages/e1071/index.html', 'e1071 package');">e1071 package</a> to attempt to classify the sentences as positive or negative (of course, without looking at the sentiment column). As the name suggests, this works by implementing a Naive Bayes algorithm. I won’t go into great detail here as to how it works (check out the Wikipedia page I linked to if you want to learn more), but the essential idea is that it looks at how the number of words in each of the four categories relates to whether the sentence is positive or negative. It then tries to guess whether a sentence is positive or negative by examining how many words it has in each category and relating this to the probabilities of those numbers appearing in positive and negative sentences.</p> 
       <p>Here’s all I needed to do to run the classifier:</p> 
       <div class="wp_syntax">
        <table>
         <tbody>
          <tr>
           <td class="line_numbers"><pre>1
</pre></td>
           <td class="code"><pre class="r" style="font-family:monospace;">classifier &lt;- naiveBayes(results[,2:5], results[,6])</pre></td>
          </tr>
         </tbody>
        </table>
       </div> 
       <p>A <a href="http://en.wikipedia.org/wiki/Confusion_matrix" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://en.wikipedia.org/wiki/Confusion_matrix', 'confusion matrix');">confusion matrix</a> can help visualize the results of a classification algorithm. The matrix for my result was:</p> 
       <pre><code>                   actual
predicted   positive   negative
  positive   2847        1546
  negative   2484        3786
</code></pre> 
       <p>This was generated by this code:</p> 
       <div class="wp_syntax">
        <table>
         <tbody>
          <tr>
           <td class="line_numbers"><pre>1
2
</pre></td>
           <td class="code"><pre class="r" style="font-family:monospace;">confTable &lt;- table(predict(classifier, results), results[,6], dnn=list('predicted','actual'))
confTable</pre></td>
          </tr>
         </tbody>
        </table>
       </div> 
       <p>Since this experiment conforms to a <a href="http://en.wikipedia.org/wiki/Bernoulli_distribution" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://en.wikipedia.org/wiki/Bernoulli_distribution', 'Bernoulli Distribution');">Bernoulli Distribution</a>, I was able to run a binomial test to assess a confidence interval for my results. I found that, within a 95% confidence interval, the population mean of the percent my program would get correct would be between 61.28% and 63.13%. I learned about the Bernoulli Distribution and the binomial test from the excellent Khan Academy statistics videos I had been watching. Here’s what I wrote for the binomial test:</p> 
       <div class="wp_syntax">
        <table>
         <tbody>
          <tr>
           <td class="line_numbers"><pre>1
</pre></td>
           <td class="code"><pre class="r" style="font-family:monospace;">binom.test(confTable[1,1] + confTable[2,2], nrow(results), p=0.5)</pre></td>
          </tr>
         </tbody>
        </table>
       </div> 
       <h2>Conclusion</h2> 
       <p>I learned a lot from this project. I’m so glad that I was able to pull together what I’ve learned in several different areas to work on one unified program.</p> 
       <p>Taking a look at my results, though, I have a few comments.</p> 
       <ol> 
        <li>My classification results aren’t that great. I had hoped to get much higher than a 60-65% correct classification rate. That’s quite alright with me, though; it means I have plenty of room to improve this program! I could try different classification algorithms, different wordlists, even different training data. There’s lots of space to work.</li> 
        <li>My code isn’t particularly pretty, and I would like to change that. I’ve just started to read <a href="http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://google-styleguide.googlecode.com/svn/trunk/google-r-style.html', 'Google’s Style Guide for R');">Google’s Style Guide for R</a> and I’ve noticed a few things I do wrong. I’ll set out to fix those in later versions of this program if I choose to move forward with it.</li> 
        <li>I’d like to try <a href="http://en.wikipedia.org/wiki/Web_scraping" onclick="__gaTracker('send', 'event', 'outbound-article', 'http://en.wikipedia.org/wiki/Web_scraping', 'scraping');">scraping</a> my data in the future rather than relying on premade databases for analysis. Even though there are undoubtedly advantages to the premade ones (they’ve likely been cleaned up and/or additional attributes have been added to them), I’d like to get more practice with scraping if I can. I could also use this as an opportunity to try to interface between PHP or Python (for the scraping) and R (for the analysis).</li> 
       </ol> 
       <p>If you’d like to grab the code from GitHub, please feel free. It’s <a href="https://github.com/abromberg/sentiment_analysis" onclick="__gaTracker('send', 'event', 'outbound-article', 'https://github.com/abromberg/sentiment_analysis', 'right here');">right here</a>.</p> 
       <p>As I said, I just started to learn all of this within the past couple weeks; I wouldn’t be surprised if I made a misstep somewhere. If you spot one — or just found this interesting and would like to chat — please <a href="mailto:andy@andybromberg.com">email me</a>!</p> 
       <p>I wrote a followup post to this in Python. You can check it out <a href="http://andybromberg.com/sentiment-analysis-python/">here</a>.</p> 
       <p>As promised, here’s the full code</p> 
       <div class="wp_syntax">
        <table>
         <tbody>
          <tr>
           <td class="line_numbers"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
</pre></td>
           <td class="code"><pre class="r" style="font-family:monospace;">#import libraries to work with
library(plyr)
library(stringr)
library(e1071)    
&nbsp;
#load up word polarity list and format it
afinn_list &lt;- read.delim(file='AFINN/AFINN-111.txt', header=FALSE, stringsAsFactors=FALSE)
names(afinn_list) &lt;- c('word', 'score')
afinn_list$word &lt;- tolower(afinn_list$word)    
&nbsp;
#categorize words as very negative to very positive and add some movie-specific words
vNegTerms &lt;- afinn_list$word[afinn_list$score==-5 | afinn_list$score==-4]
negTerms &lt;- c(afinn_list$word[afinn_list$score==-3 | afinn_list$score==-2 | afinn_list$score==-1], "second-rate", "moronic", "third-rate", "flawed", "juvenile", "boring", "distasteful", "ordinary", "disgusting", "senseless", "static", "brutal", "confused", "disappointing", "bloody", "silly", "tired", "predictable", "stupid", "uninteresting", "trite", "uneven", "outdated", "dreadful", "bland")
posTerms &lt;- c(afinn_list$word[afinn_list$score==3 | afinn_list$score==2 | afinn_list$score==1], "first-rate", "insightful", "clever", "charming", "comical", "charismatic", "enjoyable", "absorbing", "sensitive", "intriguing", "powerful", "pleasant", "surprising", "thought-provoking", "imaginative", "unpretentious")
vPosTerms &lt;- c(afinn_list$word[afinn_list$score==5 | afinn_list$score==4], "uproarious", "riveting", "fascinating", "dazzling", "legendary")    
&nbsp;
#load up positive and negative sentences and format
posText &lt;- read.delim(file='polarityData/rt-polaritydata/rt-polarity-pos.txt', header=FALSE, stringsAsFactors=FALSE)
posText &lt;- posText$V1
posText &lt;- unlist(lapply(posText, function(x) { str_split(x, "\n") }))
negText &lt;- read.delim(file='polarityData/rt-polaritydata/rt-polarity-neg.txt', header=FALSE, stringsAsFactors=FALSE)
negText &lt;- negText$V1
negText &lt;- unlist(lapply(negText, function(x) { str_split(x, "\n") }))    
&nbsp;
#function to calculate number of words in each category within a sentence
sentimentScore &lt;- function(sentences, vNegTerms, negTerms, posTerms, vPosTerms){
  final_scores &lt;- matrix('', 0, 5)
  scores &lt;- laply(sentences, function(sentence, vNegTerms, negTerms, posTerms, vPosTerms){
    initial_sentence &lt;- sentence
    #remove unnecessary characters and split up by word 
    sentence &lt;- gsub('[[:punct:]]', '', sentence)
    sentence &lt;- gsub('[[:cntrl:]]', '', sentence)
    sentence &lt;- gsub('\\d+', '', sentence)
    sentence &lt;- tolower(sentence)
    wordList &lt;- str_split(sentence, '\\s+')
    words &lt;- unlist(wordList)
    #build vector with matches between sentence and each category
    vPosMatches &lt;- match(words, vPosTerms)
    posMatches &lt;- match(words, posTerms)
    vNegMatches &lt;- match(words, vNegTerms)
    negMatches &lt;- match(words, negTerms)
    #sum up number of words in each category
    vPosMatches &lt;- sum(!is.na(vPosMatches))
    posMatches &lt;- sum(!is.na(posMatches))
    vNegMatches &lt;- sum(!is.na(vNegMatches))
    negMatches &lt;- sum(!is.na(negMatches))
    score &lt;- c(vNegMatches, negMatches, posMatches, vPosMatches)
    #add row to scores table
    newrow &lt;- c(initial_sentence, score)
    final_scores &lt;- rbind(final_scores, newrow)
    return(final_scores)
  }, vNegTerms, negTerms, posTerms, vPosTerms)
  return(scores)
}    
&nbsp;
#build tables of positive and negative sentences with scores
posResult &lt;- as.data.frame(sentimentScore(posText, vNegTerms, negTerms, posTerms, vPosTerms))
negResult &lt;- as.data.frame(sentimentScore(negText, vNegTerms, negTerms, posTerms, vPosTerms))
posResult &lt;- cbind(posResult, 'positive')
colnames(posResult) &lt;- c('sentence', 'vNeg', 'neg', 'pos', 'vPos', 'sentiment')
negResult &lt;- cbind(negResult, 'negative')
colnames(negResult) &lt;- c('sentence', 'vNeg', 'neg', 'pos', 'vPos', 'sentiment')    
&nbsp;
#combine the positive and negative tables
results &lt;- rbind(posResult, negResult)    
&nbsp;
#run the naive bayes algorithm using all four categories
classifier &lt;- naiveBayes(results[,2:5], results[,6])    
&nbsp;
#display the confusion table for the classification ran on the same data
confTable &lt;- table(predict(classifier, results), results[,6], dnn=list('predicted','actual'))
confTable    
&nbsp;
#run a binomial test for confidence interval of results
binom.test(confTable[1,1] + confTable[2,2], nrow(results), p=0.5)</pre></td>
          </tr>
         </tbody>
        </table>
       </div> 
       <div class="footnotes"> 
        <hr> 
        <ol> 
         <li id="fn:1"> <p>Not only did the test Tweets I downloaded have plenty of misspellings and abbreviations, but a decent portion of them were in different languages entirely!&nbsp;<a href="#fnref:1" rev="footnote">?</a></p> </li> 
         <li id="fn:2"> <p>read.delim() appeared to split <em>most</em> of the sentences onto individual lines but not all of them (hence the use of str_split()). If you’re a reader who knows why and wouldn’t mind explaining that to me, I’d love to hear from you! You can <a href="mailto:andy@andybromberg.com">email me here</a>.&nbsp;<a href="#fnref:2" rev="footnote">?</a></p> </li> 
         <li id="fn:3"> <p>I recategorized the AFINN wordlist to 4 categories rather than 10 (11 if you count the 0’s) because I knew that since I was working with short content — just a sentence each — there might be some issues where certain word categories don’t appear enough for there isn’t a strong correlation due to the lack of words of each sentiment.&nbsp;<a href="#fnref:3" rev="footnote">?</a></p> </li> 
        </ol> 
       </div> 
      </div> 
     </div> 
     <div class="postMeta"> 
      <div class="postDate">
       <span>Published:</span> 
       <abbr class="published" title="2013-01-05T19:03:34+0000"><a href="http://andybromberg.com/2013/01/05/">January 5, 2013</a></abbr>
      </div> 
      <div class="categories">
       <span>Filed Under:</span> 
       <a href="http://andybromberg.com/category/project/" rel="category tag">project</a>
      </div> 
     </div> 
    </div> 
    <!-- You can start editing here. --> 
    <div id="comments"> 
     <h3 id="comments">2 Responses to “First shot: Sentiment Analysis in R”</h3> 
     <div class="navigation"> 
      <div class="alignleft"></div> 
      <div class="alignright"></div> 
     </div> 
     <ol class="commentlist"> 
      <li class="comment even thread-even depth-1" id="comment-23"> 
       <div id="div-comment-23" class="comment-body"> 
        <div class="comment-author vcard"> 
         <img alt="" src="http://0.gravatar.com/avatar/6ab25467e258f303d8d9a9fa75145c93?s=48&amp;d=mm&amp;r=g" srcset="http://0.gravatar.com/avatar/6ab25467e258f303d8d9a9fa75145c93?s=96&amp;d=mm&amp;r=g 2x" class="avatar avatar-48 photo" height="48" width="48"> 
         <cite class="fn"><a href="http://www.imm.dtu.dk/~faan/" rel="external nofollow" class="url">Finn Årup Nielsen</a></cite> 
         <span class="says">says:</span> 
        </div> 
        <div class="comment-meta commentmetadata">
         <a href="http://andybromberg.com/sentiment-analysis/#comment-23"> February 27, 2013 at 3:04 pm</a> 
        </div> 
        <p>Dear Andy Bromberg,</p> 
        <p>Thanks for using my AFINN word list! ?</p> 
        <p>I have also tried AFINN on the movie reviews data set. See my blogpost: “Entertained by scandalous deceiving melancholy, hurrah!”</p> 
        <p><a href="http://finnaarupnielsen.wordpress.com/2011/11/30/entertained-by-scandalous-deceiving-melanchol/" onclick="__gaTracker('send', 'event', 'outbound-comment', 'http://finnaarupnielsen.wordpress.com/2011/11/30/entertained-by-scandalous-deceiving-melanchol/', 'http://finnaarupnielsen.wordpress.com/2011/11/30/entertained-by-scandalous-deceiving-melanchol/');" rel="nofollow">http://finnaarupnielsen.wordpress.com/2011/11/30/entertained-by-scandalous-deceiving-melanchol/</a></p> 
        <p>My conclussion was that the reviews stand out against other texts as they refer to the content of the reviewed item rather than the quality of the film, e.g., a word such as ‘evil’ are in general contexts mostly negative, but a review might mention that there is an evil character and that might be a ‘good’ movie (think Psycho, Hannibal Lecter). So standard sentiment words lists (including mine) perform poorly on movie reviews.</p> 
        <p>I see you Python NLTK get reasonable performance. ?</p> 
        <div class="reply">
         <a rel="nofollow" class="comment-reply-link" href="http://andybromberg.com/sentiment-analysis/?replytocom=23#respond" onclick="return addComment.moveForm( &quot;div-comment-23&quot;, &quot;23&quot;, &quot;respond&quot;, &quot;12&quot; )" aria-label="Reply to Finn Årup Nielsen">Reply</a>
        </div> 
       </div> </li>
      <!-- #comment-## --> 
      <li class="comment byuser comment-author-andy bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-27"> 
       <div id="div-comment-27" class="comment-body"> 
        <div class="comment-author vcard"> 
         <img alt="" src="http://1.gravatar.com/avatar/7c45718582f30e0c0a2bc1975066c019?s=48&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/7c45718582f30e0c0a2bc1975066c019?s=96&amp;d=mm&amp;r=g 2x" class="avatar avatar-48 photo" height="48" width="48"> 
         <cite class="fn">andy</cite> 
         <span class="says">says:</span> 
        </div> 
        <div class="comment-meta commentmetadata">
         <a href="http://andybromberg.com/sentiment-analysis/#comment-27"> March 2, 2013 at 2:20 am</a> 
        </div> 
        <p>Hi Mr. Nielsen —</p> 
        <p>Thank you so much for the comment and for building such an excellent dataset! I definitely noticed a difference between the two methods I used, but I don’t think that difference would hold true for all types of content.</p> 
        <p>Thanks again!</p> 
        <div class="reply">
         <a rel="nofollow" class="comment-reply-link" href="http://andybromberg.com/sentiment-analysis/?replytocom=27#respond" onclick="return addComment.moveForm( &quot;div-comment-27&quot;, &quot;27&quot;, &quot;respond&quot;, &quot;12&quot; )" aria-label="Reply to andy">Reply</a>
        </div> 
       </div> </li>
      <!-- #comment-## --> 
     </ol> 
     <div class="navigation"> 
      <div class="alignleft"></div> 
      <div class="alignright"></div> 
     </div> 
     <div id="respond"> 
      <form action="http://andybromberg.com/wp-comments-post.php" method="post" id="commentform"> 
       <div class="leaveComment"> 
        <fieldset> 
         <legend><span>Leave a Comment</span></legend> 
         <div class="commentForm"> 
          <div class="commentAuthorInfo"> 
           <label>Name: <em>Required</em> <input type="text" name="author" id="author" value=""></label> 
           <label>Email: <em>Required, not published</em> <input type="text" name="email" id="email" value=""></label> 
           <label>Homepage: <input type="text" name="url" id="url" value=""></label> 
          </div> 
          <label>Comment: <textarea name="comment" id="comment" cols="50" rows="20"></textarea></label> 
          <div id="cancel-comment-reply"> 
           <small><a rel="nofollow" id="cancel-comment-reply-link" href="/sentiment-analysis/#respond" style="display:none;">Cancel Reply</a></small> 
          </div> 
          <input type="submit" value="Post Comment"> 
          <input type="hidden" name="comment_post_ID" value="12"> 
         </div> 
        </fieldset> 
       </div> 
       <input type="hidden" name="comment_post_ID" value="12" id="comment_post_ID"> 
       <input type="hidden" name="comment_parent" id="comment_parent" value="0"> 
       <p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="f0b899ccc3"></p>
       <p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="15"></p> 
      </form> 
     </div> 
    </div> 
    <div class="pageNav"> 
     <div class="prev"></div> 
     <div class="next">
      <a href="http://andybromberg.com/sentiment-analysis-python/" rel="next">Next Post »</a>
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="footer"> 
   <!-- Footer Links --> 
   <h5>Elsewhere</h5> 
   <ul class="elsewhere"> 
    <li><a href="http://linkedin.com/in/andybromberg">LinkedIn</a></li> 
    <li><a href="http://github.com/abromberg">GitHub</a></li> 
   </ul> 
   <!-- Search Field --> 
   <div class="footerContent"> 
    <form method="get" id="searchform" action="http://andybromberg.com/"> 
     <div id="search"> 
      <input type="text" value="" name="s" id="s"> 
      <input type="submit" id="searchsubmit" value="Search"> 
     </div> 
    </form> 
    <p>© Andy Bromberg. Powered by <a href="http://wordpress.org/">WordPress</a> and <a href="http://jimbarraud.com/manifest/">Manifest</a></p> 
   </div> 
  </div> 
  <script type="text/javascript" src="http://andybromberg.com/wp-content/plugins/akismet/_inc/form.js?ver=3.1.11"></script> 
  <script type="text/javascript" src="http://andybromberg.com/wp-includes/js/comment-reply.min.js?ver=4.6"></script> 
  <script type="text/javascript" src="http://andybromberg.com/wp-includes/js/wp-embed.min.js?ver=4.6"></script> 
  <script type="text/javascript" src="http://andybromberg.com/wp-content/plugins/wp-markdown/js/markdown.min.js?ver=1.5.1"></script>   
  <!-- Dynamic page generated in 0.475 seconds. --> 
  <!-- Cached page generated by WP-Super-Cache on 2017-10-03 13:06:43 --> 
  <!-- Compression = gzip -->
 </body>
</html>