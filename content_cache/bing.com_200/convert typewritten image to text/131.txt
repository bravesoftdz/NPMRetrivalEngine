<!DOCTYPE html PUBLIC "-//IETF//DTD HTML//EN">
<html>
 <head> 
  <title>Distributing your Application as an Executable JAR file</title> 
 </head> 
 <body> 
  <h2 align="center">Distributing your Application as an executable JAR file</h2> 
  <p><br> A JAR (Java ARchive) is a way of packaging together all of the resources associated with a program (class files, images, sounds, etc.). Putting your program in a JAR allows it to be distributed as a single executable file, saving space and simplifying the download process. The information in this tutorial applies to Java version 1.2 or higher. For more information about JAR files, follow <a href="http://java.sun.com/tutorial/jar">Sun's tutorial</a>. To learn about <a href="sign.html">signing the JAR</a> and <a href="webstart.html">Java Web Start</a>. </p> 
  <p> </p>
  <p><b>A simple example.</b> Let's say we wanted to distribute the simple program <a href="Hello.java">Hello.java</a> as a JAR. First, we create a text file named <tt>Hello.mf</tt> which contains: </p>
  <blockquote>
   <pre>
Manifest-Version: 1.0
Main-Class: Hello
</pre>
  </blockquote> Then, we create the archive by typing: 
  <blockquote>
   <pre>
jar cmf Hello.mf Hello.jar Hello.class Hello.java
</pre>
  </blockquote> and run it by typing: 
  <blockquote>
   <pre>
java -jar Hello.jar
</pre>
  </blockquote> The file 
  <a href="Hello.jar">Hello.jar</a> can now be downloaded and executed. 
  <p> </p>
  <p><b>Creating an executable JAR file.</b> Here is the general procedure for creating an executable JAR: </p>
  <ol> 
   <p></p>
   <li> Compile your java code, generating all of the program's class files. <p></p></li>
   <li> Create a <em>manifest file</em> containing the following 2 lines: 
    <blockquote>
     <pre>
Manifest-Version: 1.0
Main-Class: <em>name of class containing main</em>
</pre>
    </blockquote> The name of the file should end with the <tt>.mf</tt> suffix. It is important that the file ends with a blank line. <p></p></li>
   <li> To create the JAR, type the following command: 
    <blockquote>
     <pre>jar cmf <i>manifest-file</i> <i>jar-file</i> <i>input-files</i></pre>
    </blockquote> The <i>input-files</i> must include any class files, images, sounds, etc. that your program uses. Optionally, you can include the program's <code>.java</code> files in the JAR. See below for adding directories ot the JAR. <p></p></li>
   <li> To view the contents of the JAR, type: 
    <blockquote>
     <pre>jar tf <i>jar-file</i></pre>
    </blockquote> <p></p></li>
   <li> Execute the application from the command line by typing: 
    <blockquote>
     <pre>java -jar <i>jar-file</i></pre>
    </blockquote> If the application is GUI-based, you can also launch it by double-clicking the JAR file. </li>
  </ol> 
  <p><b>Accessing resources in a JAR.</b> In general, the first step in accessing a JAR resource involves creating a URL. This might require modifying your program. For example, you can no longer use the following code fragment to read in an image that is stored in a file as follows </p>
  <blockquote>
   <pre>Image image = Toolkit.getDefaultToolkit().getImage(filename);
</pre>
  </blockquote> Instead, create the 
  <tt>URL</tt> object using 
  <blockquote>
   <pre>
URL url = getClass.getResource(filename); 
Image image = Toolkit.getDefaultToolkit().getImage(url);</pre>
  </blockquote> Or, if the code is in a static method of class 
  <tt>X</tt>, then create the URL with 
  <blockquote>
   <pre>URL url = X.class.getResource(filename); </pre>
  </blockquote> Now, the resource can be accessed the same way, regardless of whether it is in a JAR or the current directory. See the method 
  <code>play(filename)</code> in 
  <a href="/introcs/stdlib/StdDraw.java.html">StdDraw.java</a> for an example involving audio clips, and and the constructor 
  <code>In(String s)</code> in 
  <a href="/introcs/stdlib/In.java.html">In.java</a> for an example involving text files. 
  <p><b>JAR Subdirectories.</b> The JAR format also support storing files in a directory structure. Consider a program <code>Sample.java</code>, which uses the Turtle Graphics interface to display a collection of pictures stored in a subdirectory called <code>images</code>. Our <a href="sample">working directory</a> looks like: </p>
  <p><br><img height="490" src="chart2.gif"><br></p> 
  <p> The Manifest should read: </p>
  <blockquote>
   <pre>
Manifest-Version: 1.0
Main-Class: Sample
</pre>
  </blockquote> 
  <p> To create the JAR, type: </p>
  <blockquote>
   <pre>
jar cmf Sample.mf Sample.jar Sample.class Turtle.class Sample.java Turtle.java images
</pre>
  </blockquote> 
  <p> The contents listing appears as: </p>
  <blockquote>
   <pre>
META-INF/
META-INF/MANIFEST.MF
Sample.class
Turtle.class
Sample.java
Turtle.java
images/
images/image1.gif
images/image2.gif
images/image3.gif
</pre>
  </blockquote> 
  <p> Notice that the directory structure is still preserved (the META-INF directory is created to hold the manifest and other general information about the JAR). </p>
  <p> </p>
  <hr> 
  <address> <a href="mailto:tventimi@rayban.CS.Princeton.EDU">Thomas P. Ventimiglia</a></address> 
  <a href="../../">Introduction to Computer Science</a> Last modified: Wed Jul 30 16:25:37 EDT 2003
  <br> 
  <!-- hhmts end -->   
 </body>
</html>