<html>
 <head> 
  <meta http-equiv="Content-Language" content="en-us"> 
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252"> 
  <meta name="GENERATOR" content="Microsoft FrontPage 4.0"> 
  <meta name="ProgId" content="FrontPage.Editor.Document"> 
  <title>JAVA: GETTING PIXEL DATA FROM A GIF FILE</title> 
  <link REL="stylesheet" HREF="../../style/main.css"> 
 </head> 
 <body> 
  <p align="CENTER"> &nbsp; </p>
  <center> 
   <!-- ValueClick Media 468x60 and 728x90 Banner CODE for Permadi.com --> 
   <script language="javascript" src="http://media.fastclick.net/w/get.media?sid=13433&amp;m=1&amp;tp=5&amp;d=j&amp;t=n"></script> 
   <noscript>
    <a href="http://media.fastclick.net/w/click.here?sid=13433&amp;m=1&amp;c=1" target="_blank"> <img src="http://media.fastclick.net/w/get.media?sid=13433&amp;m=1&amp;tp=5&amp;d=s&amp;c=1" width="728" height="90" border="1"></a>
   </noscript> 
   <!-- ValueClick Media 468x60 and 728x90 Banner CODE for Permadi.com --> 
   <p></p> 
   <center> 
   </center>
   <table border="1" cellpadding="0" cellspacing="0" bordercolor="#CCCCFF" bgcolor="#FFFFFF" width="700"> 
    <tbody>
     <tr> 
      <td align="center" bgcolor="#3399FF"><font color="#FFFFFF" size="5"><b>&nbsp;&nbsp;<br> <img border="0" src="../images/header_tutorial.gif" width="273" height="55"><br> <br> JAVA: GETTING PIXEL DATA FROM A GIF FILE</b></font></td> 
     </tr> 
     <tr> 
      <td align="center" bgcolor="#3399FF"><font color="#FFFFFF">BACKGROUND</font></td> 
     </tr>  
     <tr> 
      <td align="center"> 
       <blockquote> 
        <p align="left">The Image object in Java is very nice.&nbsp; It handles many details for you and it is sufficient for most programming tasks; however, there are times when you might want to be able to access the pixel data within an Image object.&nbsp; For example:</p> 
        <ul> 
         <li> <p align="left">To change the transparent color key</p></li> 
         <li> <p align="left">To swap a color</p></li> 
         <li> <p align="left">To check a pixel value on a particular position (hot spot check)</p></li> 
        </ul> 
       </blockquote> </td> 
     </tr> 
     <tr> 
      <td align="center" bgcolor="#3399FF"><b><font color="#FFFFFF">OVERVIEW</font></b></td> 
     </tr>  
     <tr> 
      <td align="center"> 
       <blockquote> 
        <p align="left">There are at least two distinct ways to get the pixel data from an Image object.&nbsp; One way is to write your own ImageProducer code.&nbsp; This will mean that you will need to understand (or at least dig into) the compression method used by the image format.&nbsp; For gif, it is not so trivial task, and you could spend days just to do this; although there must be some readily available libraries somewhere on the web.&nbsp;</p> 
        <p align="left">The second option is to use the<b> java.awt.image.PixelGrabber </b>class.&nbsp; This class does exactly what its name says: it takes an Image object an an input, grab the pixels; and it can output the pixels data of the Image.&nbsp; In the case of gif image, you can either get the RGB pixels, or the indexed pixels.&nbsp; (See here for indexed pixels va RGB pixels).<br> <br> The are several constructors for the PixelGrabber class.:&nbsp;</p> 
        <table> 
         <tbody>
          <tr> 
           <td valign="top" align="left" bgcolor="#CCCCCC"><font face="VERDANA,ARIAL,HELVETICA" size="2"><b>PixelGrabber(Image <i>img</i>, int<i> x</i>, int<i> y</i>, int<i> w</i>, int<i> h</i>, boolean<i> forceRGB</i>)</b></font></td> 
          </tr> 
          <tr> 
           <td valign="top" align="left" bgcolor="#CCCCCC"><font face="VERDANA,ARIAL,HELVETICA" size="2"><b>PixelGrabber(Image <i>img</i>, int<i> x</i>, int<i> y</i>, int<i> w</i>, int<i> h</i>, int<i> pix[]</i>, int<i> off</i>, int<i> scansize</i>)</b></font></td> 
          </tr> 
          <tr> 
           <td valign="top" align="left" bgcolor="#CCCCCC"><font face="VERDANA,ARIAL,HELVETICA" size="2"><b>PixelGrabber(ImageProducer <i>ip</i>, int<i> x</i>, int<i> y</i>, int<i> w</i>, int<i> h</i>, int<i> pix[]</i>, int<i> off</i>, int<i>&nbsp;scansize</i>)</b></font></td> 
          </tr> 
         </tbody>
        </table> 
        <center> 
         <p> 
          <!-- GOOGLE AD BEGIN--> <script type="text/javascript"><!--
google_ad_client = "pub-2969475232836602";
/* JavaGetImagePixels Leaderboard 728x90, created 3/30/10 */
google_ad_slot = "5057026579";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script> <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
          <!-- GOOGLE AD ENDS--> </p>
        </center> 
        <p align="left"> When you consult the Java SDK documentation, they're quite straightforward, but here are a few things to clarify: </p>
        <ul> 
         <li> <p align="left">To grab in indexed mode, you need to use the constructor that takes the forceRGB parameter.&nbsp;&nbsp;</p></li> 
         <li> <p align="left"> The pix[] parameter is a pointer that takes an array of already allocated memory location for the pixel values.&nbsp; This parameter will be the same one returned by <b>getPixels()</b>.&nbsp; (Why don't the first constructor takes this parameter?&nbsp; Yes, that seems inconsistent, and I have no idea why.)&nbsp;&nbsp;</p></li> 
         <li> <p align="left"> The scansize is generally the width of the image.&nbsp; I said generally because it is possible that an ImageProducer allocates some padding to optimize a memory addressing optimization.&nbsp; However, for gif and jpg, it will be the width of the image (at least I haven't seen one that doesn't).</p></li> 
        </ul> 
       </blockquote> </td> 
     </tr> 
     <tr> 
      <td align="center" bgcolor="#3399FF"><b><font color="#FFFFFF">METHOD</font></b></td> 
     </tr> 
     <tr> 
      <td align="center"> <p> 
        <!-- GOOGLE AD BEGIN--> <script type="text/javascript"><!--
google_ad_client = "pub-2969475232836602";
/* JavaGetImagePixels Leaderboard 728x90, created 3/30/10 */
google_ad_slot = "5057026579";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script> <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
        <!-- GOOGLE AD ENDS--> </p>
       <blockquote> 
        <p align="left">There are three major steps required in using the PixelGrabber class.</p> 
        <p align="left">1) Create an instance of a PixelGrabber class.&nbsp; For an indexed image (ie: gif files), use the first constructor above.&nbsp; The constructor takes an Image object of which you want to get the pixels data from.&nbsp; The Image does not necessarily have to be loaded yet.<br> 2) Grab the pixels of the image using <b>PixelGrabber::grabPixels()</b>.&nbsp; Again, before calling grabPixels(), you generally want to be sure that the Image has finished loading.&nbsp; If not, then grabPixels will fail and you'd have to devise a mechanism to retry the process until it's successfull.<br> 3) Get a pointer to the pixels data using <b>PixelGrabber::getPixels()</b>.</p> 
        <p align="left">To illustrate the process, let us write a class that does the three steps above.&nbsp; I will call the class MyPixelGrabber.&nbsp;&nbsp;</p> 
        <table border="0" width="80%" bgcolor="#CCCCCC" cellspacing="3"> 
         <tbody>
          <tr> 
           <td width="100%"> <pre>import java.awt.image.*;
import java.awt.*;
// notice here that I extends an image observer, this is
// not necessary, but I need the ImageObserver to be passed as
// a paramater to get the width and height of the image
public final class MyGifPixelGrabber implements ImageObserver
{
  private Image m_image=null;   // pointer to original image
  private Object m_pixels=null; // will contains either array of 
				// (for gif, it will be bytes)
  private int m_iNumOfColors=0;  
  private int m_iWidth, m_iHeight;

  MyGifPixelGrabber(Image img)
  {
    m_image=img;
  }

  public void grabPixels()
  {
    m_iWidth=m_image.getWidth(this);
    m_iHeight=m_image.getHeight(this); 
    // the parameter false below tells java that we want to open indexed
    // file.  When used with a gif file, this will cause
    // palletized mode grab.  When used with jpg, you'll get DirectColorModel
    // data
    // you can set that to true and it will cause all images to be grabbed
    // in DirectColorModel

    // CONSTRUCT
    PixelGrabber pixelGrabber=new PixelGrabber(m_image, 0,0, 
      m_iWidth, m_iHeight, false);  

    // GRAB
    try
    {
      pixelGrabber.grabPixels();
    }
    catch (Exception e)
    {
      System.out.println("PixelGrabber exception"); 
    }

    // GET
    m_pixels=(Object)pixelGrabber.getPixels();
    // get the palette of the image, if possible
    m_colorModel=pixelGrabber.getColorModel();
    // if loading a gif, you will get IndexedColorModel, if jpg, you will
    // get DirectColorModel
    if (!(m_colorModel instanceof IndexColorModel))
    {
      // not an indexed file (ie: not a gif file)
    }
    else
    {
      m_iNumOfColors=((IndexColorModel)m_colorModel).getMapSize();
    }
  }

  // you'd need to cast the return values, which will be an array of bytes
  // or an array of ints.  if the file is a gif file, it will return an 
  // array of bytes, if jpg, you will get an array of ints
  public Object getPixels()
  {
    return m_pixels; 
  }

  public int getWidth()
  {
    return m_iWidth;
  }

  public int getHeight()
  {
    return m_iHeight;
  }

  // this won't contain a valid value if you're grabbing
  // a non palletized image (such as jpgs)
  public int getNumOfColors()
  {
    return m_iNumOfColors;
  }

  // returns the red component value of a pixel
  public int getRed(int pixel)
  {
    if ((m_colorModel instanceof IndexColorModel))	  
	return ((IndexColorModel)m_colorModel).getRed(pixel);
    else
	return ((DirectColorModel)m_colorModel).getRed(pixel);
  }

  // returns the green component value of a pixel
  public int getGreen(int pixel)
  {
    if ((m_colorModel instanceof IndexColorModel))	  
	return ((IndexColorModel)m_colorModel).getGreen(pixel);
    else
	return ((DirectColorModel)m_colorModel).getGreen(pixel);
  }

  // returns the blue component value of a pixel
  public int getBlue(int pixel)
  {
    if ((m_colorModel instanceof IndexColorModel))	  
	return ((IndexColorModel)m_colorModel).getBlue(pixel);
    else
	return ((DirectColorModel)m_colorModel).getBlue(pixel);
  }

  public void destroy()
  {
    m_image=null;
    m_pixels=null;
  }

  // we need this method just because we're extending ImageObserver.
  public boolean imageUpdate(Image img, int infoflags, int x, int y, 
    int width, int height) 
  {
    return true;	  
  }  
}</pre> </td> 
          </tr> 
         </tbody>
        </table> 
       </blockquote> </td> 
     </tr> 
     <tr> 
      <td align="center" bgcolor="#3399FF"> <b><font color="#FFFFFF"> EXAMPLE</font></b> </td> 
     </tr> 
     <tr> 
      <td align="center"> 
       <blockquote> 
        <p align="left"> Below is an applet that takes a gif image, grab the pixels of the gif, and displays the pixel values on a separate window.&nbsp; You can also click on the picture and it will display the pixel value of the pixel you clicked.&nbsp; <a class="contentlink" href="TestImagePixels.java">The full source is here</a>.</p> 
        <p align="left">&nbsp;</p> 
        <applet code="TestImagePixels.class" name="Applet1" width="250" height="140" viewastext> 
         <param name="img" value="test.gif"> 
        </applet> 
       </blockquote> </td> 
     </tr> 
     <tr> 
      <td align="center"> <b><font color="#CC0000">&lt;&lt;</font></b><font face="Arial" color="#0099CC"><b><a class="backbutton" href="/java/">Try some of permadi.com's Java applets</a></b></font><font color="#CC0000"><b>&gt;&gt; <br> <b><font color="#CC0000">&lt;&lt;</font></b><font face="Arial" color="#0099CC"><b><a class="backbutton" href="../index.html">INDEX</a></b></font><font color="#CC0000"><b>&gt;&gt;<br> </b>(C) F. Permadi<b>&nbsp; <br> &nbsp; </b></font> </b></font></td> 
     </tr> 
    </tbody>
   </table> 
   <center> 
    <p> 
     <!-- GOOGLE AD BEGIN--> <script type="text/javascript"><!--
google_ad_client = "pub-2969475232836602";
/* JavaGetImagePixels Leaderboard 728x90, created 3/30/10 */
google_ad_slot = "5057026579";
google_ad_width = 728;
google_ad_height = 90;
//-->
</script> <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
     <!-- GOOGLE AD ENDS--> </p>
   </center>   
  </center>
 </body>
</html>