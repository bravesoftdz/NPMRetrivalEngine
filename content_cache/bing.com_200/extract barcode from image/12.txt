<!doctype html>
<!--[if IE 6]>
<html id="ie6" lang="en">
<![endif]-->
<!--[if IE 7]>
<html id="ie7" lang="en">
<![endif]-->
<!--[if IE 8]>
<html id="ie8" lang="en">
<![endif]-->
<!--[if !(IE 6) & !(IE 7) & !(IE 8)]><!-->
<html lang="en">
 <!--<![endif]-->
 <head> 
  <meta charset="UTF-8"> 
  <meta name="viewport" content="width=device-width"> 
  <title>Parsing Exif client-side using JavaScript  | code.flickr.com</title> 
  <link rel="profile" href="http://gmpg.org/xfn/11"> 
  <link rel="stylesheet" type="text/css" media="all" href="https://s0.wp.com/wp-content/themes/vip/flickr-code/style.css"> 
  <link rel="pingback" href="http://code.flickr.net/xmlrpc.php"> 
  <!--[if lt IE 9]>
<script src="https://s0.wp.com/wp-content/themes/pub/twentyeleven/js/html5.js" type="text/javascript"></script>
<![endif]--> 
  <script src="https://r-login.wordpress.com/remote-login.php?action=js&amp;host=code.flickr.net&amp;id=39034126&amp;t=1505676210&amp;back=http%3A%2F%2Fcode.flickr.net%2F2012%2F06%2F01%2Fparsing-exif-client-side-using-javascript-2%2F" type="text/javascript"></script> 
  <script type="text/javascript">
		/* <![CDATA[ */
			if ( 'function' === typeof WPRemoteLogin ) {
				document.cookie = "wordpress_test_cookie=test; path=/";
				if ( document.cookie.match( /(;|^)\s*wordpress_test_cookie\=/ ) ) {
					WPRemoteLogin();
				}
			}
		/* ]]> */
		</script> 
  <link rel="dns-prefetch" href="//s2.wp.com"> 
  <link rel="dns-prefetch" href="//s0.wp.com"> 
  <link rel="dns-prefetch" href="//s1.wp.com"> 
  <link rel="dns-prefetch" href="//flickrcode.wordpress.com"> 
  <link rel="alternate" type="application/rss+xml" title="code.flickr.com » Feed" href="http://code.flickr.net/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="code.flickr.com » Comments Feed" href="http://code.flickr.net/comments/feed/"> 
  <script type="text/javascript">
		/* <![CDATA[ */
		function addLoadEvent(func) {
			var oldonload = window.onload;
			if (typeof window.onload != 'function') {
				window.onload = func;
			} else {
				window.onload = function () {
					oldonload();
					func();
				}
			}
		}
		/* ]]> */
	</script> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/wpcom-smileys\/twemoji\/2\/72x72\/","ext":".png","svgUrl":"https:\/\/s0.wp.com\/wp-content\/mu-plugins\/wpcom-smileys\/twemoji\/2\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/s1.wp.com\/wp-includes\/js\/wp-emoji-release.min.js?m=1496863874h&ver=4.8.1-RC2-41203"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,56826,8203,55356,56819),0,0),c=j.toDataURL(),b===c&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55358,56794,8205,9794,65039),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55358,56794,8203,9794,65039),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="stylesheet" id="all-css-0-1" href="https://s0.wp.com/_static/??-eJx9kN1uwyAMhV9ozMpW7edi2rMQ4hI3BiMgjfr2c5ZWarSVG/Cxv2MbYEnGSawYK4TZJJ49xQJMExY4YU3WTeZXPbtSnuB/3ElGzYdk60oEHMgiY1CsZQvp7eZaw1FnNccsSWnT9yljKUbPQHMwddRBf31bGtLcQ100cdGFzhih1AvjI/pMCY5MbspaGfABfL8SDR5rgSKOLBtSZC82M0GUuhVvQaurRzEszlaSuBPmyJZyy5qxZ/EaelDqTrZMSUrdWkMZbV7N17vluj5T+8tePPrd8QCepbe8At/hqzt8vr98dN1rd/oBpQDzHw==" type="text/css" media="all"> 
  <script type="text/javascript" src="https://s1.wp.com/_static/??-eJyFztEKwjAMBdAfsquTiXsRv6XWOFKXtDbphn69HeiDMBQCgdzDJXZOBtmP5QJiQ517gfx4rybIxv4ChnDITqEh5A/2kRVYF0vxjCOYIpDdUG+16BpXXIqiBCIVraTfLyFPCPNfFkCT8zeTQfC5tJ7o2Hb9Yde3+24bXjRNW9I="></script> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://flickrcode.wordpress.com/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://s1.wp.com/wp-includes/wlwmanifest.xml"> 
  <meta name="generator" content="WordPress.com"> 
  <link rel="canonical" href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/"> 
  <link rel="shortlink" href="http://wp.me/p2DMyG-vt"> 
  <link rel="alternate" type="application/json+oembed" href="https://public-api.wordpress.com/oembed/?format=json&amp;url=http%3A%2F%2Fcode.flickr.net%2F2012%2F06%2F01%2Fparsing-exif-client-side-using-javascript-2%2F&amp;for=wpcom-auto-discovery">
  <link rel="alternate" type="application/xml+oembed" href="https://public-api.wordpress.com/oembed/?format=xml&amp;url=http%3A%2F%2Fcode.flickr.net%2F2012%2F06%2F01%2Fparsing-exif-client-side-using-javascript-2%2F&amp;for=wpcom-auto-discovery">
  <link rel="shortcut icon" type="image/x-icon" href="http://0.gravatar.com/blavatar/8b1d73fba9c0d02a3e78929d8cecfd82?s=32" sizes="16x16"> 
  <link rel="icon" type="image/x-icon" href="http://0.gravatar.com/blavatar/8b1d73fba9c0d02a3e78929d8cecfd82?s=32" sizes="16x16"> 
  <link rel="apple-touch-icon-precomposed" href="http://0.gravatar.com/blavatar/8b1d73fba9c0d02a3e78929d8cecfd82?s=114"> 
  <link rel="openid.server" href="http://flickrcode.wordpress.com/?openidserver=1"> 
  <link rel="openid.delegate" href="http://flickrcode.wordpress.com/"> 
  <link rel="search" type="application/opensearchdescription+xml" href="http://code.flickr.net/osd.xml" title="code.flickr.com"> 
  <link rel="search" type="application/opensearchdescription+xml" href="https://s1.wp.com/opensearch.xml" title="WordPress.com"> 
  <meta name="application-name" content="code.flickr.com">
  <meta name="msapplication-window" content="width=device-width;height=device-height">
  <meta name="msapplication-task" content="name=Subscribe;action-uri=http://code.flickr.net/feed/;icon-uri=http://0.gravatar.com/blavatar/8b1d73fba9c0d02a3e78929d8cecfd82?s=16"> 
  <style type="text/css" id="twentyeleven-header-css">
			#site-title,
		#site-description {
			position: absolute;
			clip: rect(1px 1px 1px 1px); /* IE6, IE7 */
			clip: rect(1px, 1px, 1px, 1px);
		}
		</style> 
  <link rel="amphtml" href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/amp/">
  <style type="text/css" id="syntaxhighlighteranchor"></style> 
  <link rel="stylesheet" id="custom-css-css" type="text/css" href="https://s1.wp.com/?custom-css=1&amp;csblog=2DMyG&amp;cscache=6&amp;csrev=106"> 
 </head> 
 <body class="post-template-default single single-post postid-1951 single-format-standard custom-background mp6 customizer-styles-applied singular two-column right-sidebar highlander-enabled highlander-light"> 
  <div id="page" class="hfeed"> 
   <header id="branding" role="banner"> 
    <hgroup> 
     <h1 id="site-title"><span><a href="http://code.flickr.net/" rel="home">code.flickr.com</a></span></h1> 
     <h2 id="site-description"></h2> 
    </hgroup> 
    <a href="http://code.flickr.net/"> <img src="http://flickrcode.files.wordpress.com/2012/09/code-flickr-com-drawn-header-grey-large.png" width="1000" height="157" alt=""> </a> 
    <div class="only-search with-image"> 
     <form method="get" id="searchform" action="http://code.flickr.net/"> 
      <label for="s" class="assistive-text">Search</label> 
      <input type="text" class="field" name="s" id="s" placeholder="Search"> 
      <input type="submit" class="submit" name="submit" id="searchsubmit" value="Search"> 
     </form> 
    </div> 
    <nav id="access" role="navigation"> 
     <h3 class="assistive-text">Main menu</h3> 
     <div class="skip-link">
      <a class="assistive-text" href="#content">Skip to primary content</a>
     </div> 
     <div class="menu-menu-container">
      <ul id="menu-menu" class="menu">
       <li id="menu-item-2084" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2084"><a href="http://www.flickr.com/">Flickr</a></li> 
       <li id="menu-item-2085" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2085"><a href="http://blog.flickr.net/">Flickr Blog</a></li> 
       <li id="menu-item-2250" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2250"><a href="http://twitter.com/flickr">@flickr</a></li> 
       <li id="menu-item-2086" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2086"><a href="http://twitter.com/flickrapi">@flickrapi</a></li> 
       <li id="menu-item-2087" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2087"><a href="http://developer.flickr.com/">Developer Guidelines</a></li> 
       <li id="menu-item-2088" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2088"><a href="http://www.flickr.com/services/api/">API</a></li> 
       <li id="menu-item-2089" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2089"><a href="http://www.flickr.com/jobs/">Jobs</a></li> 
      </ul>
     </div> 
    </nav>
    <!-- #access --> 
   </header>
   <!-- #branding --> 
   <div id="main"> 
    <div id="primary"> 
     <div id="content" role="main"> 
      <nav id="nav-single"> 
       <h3 class="assistive-text">Post navigation</h3> 
       <span class="nav-previous"><a href="http://code.flickr.net/2012/05/24/group-apis/" rel="prev"><span class="meta-nav">?</span> Previous</a></span> 
       <span class="nav-next"><a href="http://code.flickr.net/2012/06/06/web-workers-and-yui/" rel="next">Next <span class="meta-nav">?</span></a></span> 
      </nav>
      <!-- #nav-single --> 
      <article id="post-1951" class="post-1951 post type-post status-publish format-standard hentry category-uploadr"> 
       <header class="entry-header"> 
        <h1 class="entry-title">Parsing Exif client-side using&nbsp;JavaScript</h1> 
        <div class="entry-meta"> 
         <span class="sep">Posted on </span>
         <a href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/" title="6:48 pm" rel="bookmark"><time class="entry-date" datetime="2012-06-01T18:48:57+00:00">June 1, 2012</time></a>
         <span class="by-author"> <span class="sep"> by </span> <span class="author vcard"><a class="url fn n" href="http://code.flickr.net/author/mustardpizza/" title="View all posts by cberry" rel="author">cberry</a></span></span> 
        </div>
        <!-- .entry-meta --> 
       </header>
       <!-- .entry-header --> 
       <div class="entry-content"> 
        <h3>What is Exif? A short primer.</h3> 
        <p>Exif is short for Exchangeable image file format. A standard that specifies the formats to be used in images, sounds, and tags used by digital still cameras. In this case we are concerned with the tags standard and how it is used in still images.</p> 
        <h3>How Flickr currently parses Exif data.</h3> 
        <p>Currently we parse an images Exif data after it is uploaded to the Flickr servers and then expose that data on the photos metadata page (<a href="http://www.flickr.com/photos/rubixdead/7192796744/meta/in/photostream">http://www.flickr.com/photos/rubixdead/7192796744/meta/in/photostream</a>). This page will show you all the data recorded from your camera when a photo was taken, the camera type, lens, aperture, exposure settings, etc. We currently use ExifTool (<a href="http://www.sno.phy.queensu.ca/~phil/exiftool/">http://www.sno.phy.queensu.ca/~phil/exiftool/</a>) to parse all of this data, which is a robust, albeit server side only, solution.</p> 
        <h3>An opportunity to parse Exif data on the client-side</h3> 
        <p>Sometime in the beginning phases of specing out the Uploadr project we realized modern browsers can read an images data directly from the disk, using the FileReader API (<a href="http://www.w3.org/TR/FileAPI/#FileReader-interface">http://www.w3.org/TR/FileAPI/#FileReader-interface</a>). This lead to the realization that we could parse Exif data while the photo is being uploaded, then expose this to the user while they are editing their photos in the Uploadr before they even hit the Upload button.</p> 
        <h3>Why client-side Exif?</h3> 
        <p>Why would we need to parse Exif on the client-side, if we are parsing it already on the server-side? Parsing Exif on the client-side is both fast and efficient. It allows us to show the user a thumbnail without putting the entire image in the DOM, which uses a lot of memory and kills performance. Users can also add titles, descriptions, and tags in a third-party image editing program saving the metadata into the photos Exif. When they drag those photos into the Uploadr, BOOM, we show them the data they have already entered and organized, eliminating the need to enter it twice.</p> 
        <h3>Using Web Workers</h3> 
        <p>We started doing some testing and research around parsing Exif data by reading a files bytes in JavaScript. We found a few people had accomplished this already, its not a difficult feat, but a messy one. We then quickly realized that making a users browser run through 10 megabytes of data can be a heavy operation. Web workers allow us to offload the parsing of byte data into a separate cpu thread. Therefore freeing up the users browser, so they can continue using Uploadr while Exif is being parsed.</p> 
        <h3>Exif Processing Flow</h3> 
        <p>Once we had a web worker prototype setup, we next had to write to code that would parse the actual bytes.</p> 
        <p>The first thing we do is pre-fetch the JavaScript used in the web worker thread. Then when a user adds an image to the Uploadr we create event handlers for the worker. When a web worker calls postMessage() we capture that, check for Exif data and then display it on the page. Any additional processing is also done at this time. Parsing XMP data, for example, is done outside of the worker because the DOM isnt available in worker threads.</p> 
        <p>Using Blob.slice() we pull out the first 128kb of the image to limit load on the worker and speed things up. The Exif specification states that all of the data should exist in the first 64kb, but IPTC sometimes goes beyond that, especially when formatted as XMP.</p> 
        <pre class="brush: jscript; gutter: false; title: ; notranslate" title="">
if (file.slice) {
	filePart = file.slice(0, 131072);
} else if (file.webkitSlice) {
	filePart = file.webkitSlice(0, 131072);
} else if (file.mozSlice) {
	filePart = file.mozSlice(0, 131072);
} else {
	filePart = file;
}
</pre> 
        <p>We create a new FileReader object and pass in the Blob slice to be read. An event handler is created at this point to handle the reading of the Blob data and pass it into the worker. FileReader.readAsBinaryString() is called, passing in the blob slice, to read it as a binary string into the worker.</p> 
        <pre class="brush: jscript; gutter: false; title: ; notranslate" title="">
binaryReader = new FileReader();

binaryReader.onload = function () {

	worker.postMessage({
		guid: guid,
		binary_string: binaryReader.result
	});

};

binaryReader.readAsBinaryString(filePart);
</pre> 
        <p>The worker receives the binary string and passes it through multiple Exif processors in succession. One for Exif data, one for XMP formatted IPTC data and one for unformatted IPTC data. Each of the processors uses postMessage() to post the Exif data back out and is caught by the module. The data is displayed in the uploadr, which is later sent along to the API with the uploaded batch.</p> 
        <h3>On asynchronous Exif parsing</h3> 
        <p>When reading in Exif data asynchronously we ran into a few problems, because processing does not happen immediately. We had to prevent the user from sorting their photos until all the Exif data was parsed, namely the date and time for order by sorting. We also ran into a race condition when getting tags out of the Exif data. If a user had already entered tags we want to amend those tags with what was possibly saved in their photo. We also update the Uploadr with data from Exiftool once it is processed on the back-end.</p> 
        <h3>The Nitty Gritty: Creating EXIF Parsers and dealing with typed arrays support</h3> 
        <p class="flickr-photo"> <a href="http://www.flickr.com/photos/dret/6021263096/" title="pre-electronic binary code by dret, on Flickr"><img src="http://farm7.staticflickr.com/6014/6021263096_9c4a742be8_b.jpg" width="800" height="613" alt="pre-electronic binary code"></a><br> <span class="caption"><a href="http://www.flickr.com/photos/dret/6021263096/">pre-electronic binary code</a> by <a href="http://www.flickr.com/photos/dret/">dret</a></span> </p> 
        <p>Creating an Exif parser is no simple task, but there are a few things to consider:</p> 
        <ul> 
         <li>What specification of Exif are we dealing with? (Exif, XMP, IPTC, any and all of the above?)</li> 
         <li>When processing the binary string data, is it big or little endian?</li> 
         <li>How do we read binary data in a browser?</li> 
         <li>Do we have typed arrays support or do we need to create our own data view?</li> 
        </ul> 
        <h3>First things first, how do we read binary data?</h3> 
        <p>As we saw above our worker is fed a binary string, meaning this is a stream of ASCII characters representing values from 0-255. We need to create a way to access and parse this data. The Exif specification defines a few different data value types we will encounter:</p> 
        <ul> 
         <li>1 = BYTE An 8-bit unsigned integer</li> 
         <li>2 = ASCII An 8-bit byte containing one 7-bit ASCII code. The final byte is terminated with NULL.</li> 
         <li>3 = SHORT A 16-bit (2-byte) unsigned integer</li> 
         <li>4 = LONG A 32-bit (4-byte) unsigned integer</li> 
         <li>5 = RATIONAL Two LONGs. The first LONG is the numerator and the second LONG expresses the denominator.</li> 
         <li>7 = UNDEFINED An 8-bit byte that can take any value depending on the field definition</li> 
         <li>9 = SLONG A 32-bit (4-byte) signed integer (2s complement notation)</li> 
         <li>10 = SRATIONAL Two SLONGs. The first SLONG is the numerator and the second SLONG is the denominator</li> 
        </ul> 
        <p>So, we need to be able to read an unsigned int (1 byte), an unsigned short (2 bytes), an unsigned long (4 bytes), an slong (4 bytes signed), and an ASCII string. Since the we read the stream as a binary string it is already in ASCII, that one is done for us. The others can be accomplished by using typed arrays, if supported, or some fun binary math.</p> 
        <h3>Typed Array Support</h3> 
        <p>Now that we know what types of data we are expecting, we just need a way to translate the binary string we have into useful values. The easiest approach would be typed arrays (<a href="https://developer.mozilla.org/en/JavaScript_typed_arrays">https://developer.mozilla.org/en/JavaScript_typed_arrays</a>), meaning we can create an ArrayBuffer using the string we received from from the FileReader, and then create typed arrays, or views, as needed to read values from the string. Unfortunately array buffer views do not support endianness, so the preferred method is to use DataView (<a href="http://www.khronos.org/registry/typedarray/specs/latest/#8">http://www.khronos.org/registry/typedarray/specs/latest/#8</a>), which essentially creates a view to read into the buffer and spit out various integer types. Due to lack of great support, Firefox does not support DataView and Safaris typed array support can be slow, we are currently using a combination of manual byte conversion and ArrayBuffer views.</p> 
        <pre class="brush: jscript; gutter: false; title: ; notranslate" title="">
var arrayBuffer = new ArrayBuffer(this.data.length);
var int8View = new Int8Array(arrayBuffer);

for (var i = 0; i &amp;lt; this.data.length; i++) {
	int8View[i] = this.data[i].charCodeAt(0);
}

this.buffer = arrayBuffer;

this.getUint8 = function(offset) {
	if (compatibility.ArrayBuffer) {

	return new Uint8Array(this.buffer, offset, 1)[0];
	}
	else {
		return this.data.charCodeAt(offset) &amp;amp; 0xff;
	}
}
</pre> 
        <p>Above we are creating an ArrayBuffer of length to match the data being passed in, and then creating a view consisting of 8-bit signed integers which allows us to store data into the ArrayBuffer from the data passed in. We then process the charCode() at each location in the data string passed in and store it in the array buffer via the int8View. Next you can see an example function, getUint8(), where we get an unsigned 8-bit value at a specified offset. If typed arrays are supported we use a Uint8Array view to access data from the buffer at an offset, otherwise we just get the character code at an offset and then mask the least significant 8 bits.</p> 
        <p>To read a short or long value we can do the following:</p> 
        <pre class="brush: jscript; gutter: false; title: ; notranslate" title="">
this.getLongAt = function(offset,littleEndian) {

	//DataView method
	return new DataView(this.buffer).getUint32(offset, littleEndian);

	//ArrayBufferView method always littleEndian
	var uint32Array = new Uint32Array(this.buffer);
	return uint32Array[offset];

	//The method we are currently using
	var b3 = this.getUint8(this.endianness(offset, 0, 4, littleEndian)),
	b2 = this.getUint8(this.endianness(offset, 1, 4, littleEndian)),
	b1 = this.getUint8(this.endianness(offset, 2, 4, littleEndian)),
	b0 = this.getUint8(this.endianness(offset, 3, 4, littleEndian));

	return (b3 * Math.pow(2, 24)) + (b2 &amp;lt;&amp;lt; 16) + (b1 &amp;lt;&amp;lt; 8) + b0;

}
</pre> 
        <p>The DataView method is pretty straight forward, as is the ArrayBufferView method, but without concern for endianness. The last method above, the one we are currently using, gets the unsigned int at each byte location for the 4 bytes. Transposes them based on endianness and then creates a long integer value out of it. This is an example of the custom binary math needed to support data view in Firefox.</p> 
        <p>When originally beginning to build out the Exif parser I found this jDataView (<a href="https://github.com/vjeux/jDataView">https://github.com/vjeux/jDataView</a>) library written by Christopher Chedeau aka Vjeux (<a href="http://blog.vjeux.com/">http://blog.vjeux.com/</a>). Inspired by Christophers jDataView module we created a DataView module for YUI.</p> 
        <h3>Translating all of this into useful data</h3> 
        <p>There are a few documents you should become familiar with if you are considering writing your own Exif parser:</p> 
        <ul> 
         <li>The Exif specification in its entirety: 
          <ul> 
           <li><a href="http://www.kodak.com/global/plugins/acrobat/en/service/digCam/exifStandard2.pdf">http://www.kodak.com/global/plugins/acrobat/en/service/digCam/exifStandard2.pdf</a></li> 
          </ul> </li> 
         <li>The TIFF 6.0 specification which has a good breakdown of the tags and Tiff header: 
          <ul> 
           <li><a href="http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf">http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf</a></li> 
          </ul> </li> 
         <li>A breakdown of the Exif specification originally put together by TsuruZoh Tachibanaya, but hosted now at MIT: 
          <ul> 
           <li><a href="http://www.media.mit.edu/pia/Research/deepview/exif.html">http://www.media.mit.edu/pia/Research/deepview/exif.html</a></li> 
          </ul> </li> 
        </ul> 
        <p class="undersized-image-container"><img src="http://farm9.staticflickr.com/8002/7315733808_6dcfd91f88_o.gif"></p> 
        <p>The diagram above is taken straight from the Exif specification section 4.5.4, it describes the basic structure for Exif data in compressed JPEG images. Exif data is broken up into application segments (APP0, APP1, etc.). Each application segment contains a maker, length, Exif identification code, TIFF header, and usually 2 image file directories (IFDs). These IFD subdirectories contain a series of tags, of which each contains the tag number, type, count or length, and the data itself or offset to the data. These tags are described in <i>Appendix A of the <a href="http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf">TIFF6 Spec</a></i>, or at <i>Table 41 JPEG Compressed (4:2:0) File APP1 Description Sample in the <a href="http://www.kodak.com/global/plugins/acrobat/en/service/digCam/exifStandard2.pdf">Exif spec</a></i> and also broken down on the <a href="http://www.media.mit.edu/pia/Research/deepview/exif.html">Exif spec page</a> created by TsuruZoh Tachibanaya.</p> 
        <h3>Finding APP1</h3> 
        <p>The first thing we want to find is the APP1 marker, so we know we are in the right place. For APP1, this is always the 2 bytes 0xFFE1, We usually check the last byte of this for the value 0xE1, or 225 in decimal, to prevent any endianness problems. The next thing we want to know is the size of the APP1 data, we can use this to optimize and know when to stop reading, which is also 2 bytes. Next up is the Exif header, which is always the 4 bytes 0x45, 0x78, 0x69, 0x66, or Exif in ASCII, which makes it easy. This is always followed up 2 null bytes 0x0000. Then begins the TIFF header and then the 0th IFD, where our Exif is stored, followed by the 1st IFD, which usually contains a thumbnail of the image.</p> 
        <p>We are concerned with application segment 1 (APP1). APP2 and others can contain other metadata about this compressed image, but we are interested in the Exif attribute information.</p> 
        <h3>Wherefore art thou, TIFF header?</h3> 
        <p>Once we know we are at APP1 we can move on to the TIFF header which starts with the byte alignment, 0x4949 (II, Intel) or 0x4D4D (MM, Motorola), Intel being little endian and Motorola being big endian. Then we have the tag marker, which is always 0x2A00 (or 0x002A for big endian): an arbitrary but carefully chosen number (42) that further identifies the file as a TIFF file. Next we have the offset to the first IFD, which is usually 0x08000000, or 8 bytes from the beginning of the TIFF header (The 8 bytes: 0x49 0x49 0x2A 0x00 0x08 0x00 0x00 0x00). Now we can begin parsing the 0th IFD!</p> 
        <p class="undersized-image-container"><img src="http://farm9.staticflickr.com/8024/7315733770_7a850b8cb6_o.gif"></p> 
        <p>The diagram above (taken from the TIFF6.0 specification found here:<a href="http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf"> http://partners.adobe.com/public/developer/en/tiff/TIFF6.pdf</a>), shows the structure of the TIFF header, the following IFD and a directory entry contained within the IFD.</p> 
        <p>The IFD starts off with the number of directory entries in the IFD, 2 bytes, then follows with all of the directory entries and ends with the offset to the next IFD if there is one. Each directory entry is 12 bytes long and comprised of 4 parts: the tag number, the data format, the number of components, and the data itself or an offset to the data value in the file. Then follows the offset to the next IFD which is again 8 bytes.</p> 
        <h3>Example: Processing some real world bytes</h3> 
        <p>Lets run through an example below! I took a screen shot from hexfiend (<a href="http://ridiculousfish.com/hexfiend/">http://ridiculousfish.com/hexfiend/</a>, which is an awesome little program for looking at raw hex data from any file, I highly recommend it) and highlighted the appropriate bytes from start of image (SOI) to some tag examples.</p> 
        <p class="undersized-image-container"><img src="http://farm9.staticflickr.com/8009/7315733860_d8288b3607_o.gif"></p> 
        <p>This is the first 48 bytes of the image file. Ive grouped everything into 2 byte groups and 12 byte columns, because IFD entries are 12 bytes it makes it easier to read. You can see the start of image marker (SOI), APP1 mark and size, Exif mark and null bytes. Next is the beginning of the TIFF header including byte align, the 42 TIFF verification mark, the offset to the 0th IFD, the number of directory entries, and then the first 2 directory entries. These entries are in little endian and I wrote them out as big endian to make them easier to read. Both of these first entries are of ASCII type, which always point to an offset in the file and ends with a null terminator byte.</p> 
        <h3>Writing code to parse Exif</h3> 
        <p>Now that we understand the tag structure and what we are looking for in our 128k of data we sliced from the beginning of the image, we can write some code to do just that. A lot of insipration for this code comes from an exif parser written by Jacob Seidelin, <a href="http://blog.nihilogic.dk/">http://blog.nihilogic.dk</a>, the original you can find here:<a href="http://www.nihilogic.dk/labs/exif/exif.js"> http://www.nihilogic.dk/labs/exif/exif.js</a>. We used a lot of his tag mapping objects to translate the Exif tag number values into tag names as well as his logic that applies to reading and finding Exif data in a binary string.</p> 
        <p>First we start looking for the APP1 marker, by looping through the binary string recording our offset and moving it up as we go along.</p> 
        <pre class="brush: jscript; gutter: false; title: ; notranslate" title="">
if (dataview.getByteAt(0) != 0xFF || dataview.getByteAt(1) != 0xD8) {
	return;
}
else {
	offset = 2;
	length = dataview.length;
	
	while (offset &amp;lt; length) {
		marker = dataview.getByteAt(offset+1);
		if (marker == 225) {
			readExifData(dataview, offset + 4, dataview.getShortAt(offset+2, true)-2);
			break;
		}
		else if(marker == 224) {
			offset = 20;
		}
		else {
			offset += 2 + dataview.getShortAt(offset+2, true);
		}
	}
}
</pre> 
        <p>We check for a valid SOI marker (0xFFD8) and then loop through the string we passed in. If we find the APP1 marker (225) we start reading Exif data, if we find a APP0 marker (224) we move the offset up by 20 and continue reading, otherwise we move the offset up by 2 plus the length of the APP data segment we are at, because it is not APP1, we are not interested.</p> 
        <p>Once we find what we are looking for we can look for the Exif header, endianness, the TIFF header, and look for IFD0.</p> 
        <pre class="brush: jscript; gutter: false; title: ; notranslate" title="">
function readExifData(dataview, start, length) {

	var littleEndian;
	var TIFFOffset = start + 6;

	if (dataview.getStringAt(iStart, 4) != "Exif") {
		return false;
	}

	if (dataview.getShortAt(TIFFOffset) == 0x4949) {
		littleEndian = true;
		self.postMessage({msg:"----Yes Little Endian"});
	}
	else if (dataview.getShortAt(TIFFOffset) == 0x4D4D) {
		littleEndian = false;
		self.postMessage({msg:"----Not Little Endian"});
	}
	else {
		return false;
	}

	if (dataview.getShortAt(TIFFOffset+2, littleEndian) != 0x002A) {
		return false;
	}

	if (dataview.getLongAt(TIFFOffset+4, littleEndian) != 0x00000008) {
		return false;
	}

	var tags = ExifExtractorTags.readTags(dataview, TIFFOffset, TIFFOffset+8, ExifExtractorTags.Exif.TiffTags, littleEndian);
</pre> 
        <p>This is the first part of the readExifData function that is called once we find our APP1 segment marker. We start by verifying the Exif marker, then figuring out endianness, then checking if our TIFF header verification marker exists (42), and then getting our tags and values by calling ExifExtractorTags.readTags. We pass in the dataview to our binary string, the offset, the offset plus 8, which bypasses the TIFF header, the tags mapping object, and the endianness.</p> 
        <p>Next we pass that data into a function that creates an object which maps all of the tag numbers to real world descriptions, and includes maps for tags that have mappable values.</p> 
        <pre class="brush: jscript; gutter: false; title: ; notranslate" title="">
this.readTags = function(dataview, TIFFStart, dirStart, strings, littleEndian) {
	var entries = dataview.getShortAt(dirStart, littleEndian);
	var tags = {};
	var i;

	for (i = 0; i &amp;lt; entries; i++) {
		var entryOffset = dirStart + i*12 + 2;
		var tag = strings[dataview.getShortAt(entryOffset, littleEndian)];

		tags[tag] = this.readTagValue(dataview, entryOffset, TIFFStart, dirStart, littleEndian);
	}

	if(tags.ExifIFDPointer) {
		var entryOffset = dirStart + i*12 + 2;
		var IFD1Offset = dataview.getLongAt(entryOffset,littleEndian);

		tags.IFD1Offset = IFD1Offset;
	}

	return tags;
}
</pre> 
        <p>This function is quite simple, once we know where we are at of course. For each entry we get the tag name from our tag strings and create a key on a tags object with a value of the tag. If there is an IFD1, we store that offset in the tags object as well. The readTagValue function takes the dataview object, the entrys offset, the TIFF starting point, the directory starting point (TIFFStart + 8), and then endianness. It returns the tags value based on the data type (byte, short, long, ASCII).</p> 
        <p>We return a tags object which has keys and values for various Exif tags that were found in the IFD. We check if ExifIFDPointer exists on this object, if so, we have IFD entries to pass back out of the worker and show the user. We also check for GPS data and an offset to the next IFD, IFD1Offset, if that exists we know we have another IFD, which is usually a thumbnail image.</p> 
        <pre class="brush: jscript; gutter: false; title: ; notranslate" title="">
if (tags.ExifIFDPointer) {

	var ExifTags = ExifExtractorTags.readTags(dataview, TIFFOffset, TIFFOffset + tags.ExifIFDPointer, ExifExtractorTags.Exif.Tags, littleEndian);

	for (var tag in ExifTags) {
		switch (tag) {
			case "LightSource" :
			case "Flash" :
			case "MeteringMode" :
			case "ExposureProgram" :
			case "SensingMethod" :
			case "SceneCaptureType" :
			case "SceneType" :
			case "CustomRendered" :
			case "WhiteBalance" :
			case "GainControl" :
			case "Contrast" :
			case "Saturation" :
			case "Sharpness" :
			case "SubjectDistanceRange" :
			case "FileSource" :
				ExifTags[tag] = ExifExtractorTags.Exif.StringValues[tag][ExifTags[tag]];
				break;
			case "ExifVersion" :
			case "FlashpixVersion" :
				ExifTags[tag] = String.fromCharCode(ExifTags[tag][0], ExifTags[tag][1], ExifTags[tag][2], ExifTags[tag][3]);
				break;
			case "ComponentsConfiguration" :
				ExifTags[tag] =
					ExifExtractorTags.Exif.StringValues.Components[ExifTags[tag][0]]
					+ ExifExtractorTags.Exif.StringValues.Components[ExifTags[tag][1]]
					+ ExifExtractorTags.Exif.StringValues.Components[ExifTags[tag][2]]
					+ ExifExtractorTags.Exif.StringValues.Components[ExifTags[tag][3]];
				break;
		}
		
		tags[tag] = ExifTags[tag];
	}
}
</pre> 
        <p>This is the rest of the readTags function, basically we are checking if ExifIFDPointer exists and then reading tags again at that offset pointer. Once we get another tags object back, we check to see if that tag has a value that needs to be mapped to a readable value. For example if the Flash Exif tag returns 0x0019 we can map that to Flash fired, auto mode.</p> 
        <pre class="brush: jscript; gutter: false; title: ; notranslate" title="">
if(tags.IFD1Offset) {
	IFD1Tags = ExifExtractorTags.readTags(dataview, TIFFOffset, tags.IFD1Offset + TIFFOffset, ExifExtractorTags.Exif.TiffTags, littleEndian);
	
	if(IFD1Tags.JPEGInterchangeFormat) {
		readThumbnailData(dataview, IFD1Tags.JPEGInterchangeFormat, IFD1Tags.JPEGInterchangeFormatLength, TIFFOffset, littleEndian);
	}
}

function readThumbnailData(dataview, ThumbStart, ThumbLength, TIFFOffset, littleEndian) {

	if (dataview.length &amp;lt; ThumbStart+TIFFOffset+ThumbLength) {
		return;
	}

	var data = dataview.getBytesAt(ThumbStart+TIFFOffset,ThumbLength);
	var hexData = new Array();
	var i;

	for(i in data) {
		if (data[i] &amp;lt; 16) {
			hexData[i] = "0"+data[i].toString(16);
		}
		else {
			hexData[i] = data[i].toString(16);
		}
	}

	self.postMessage({guid:dataview.guid, thumb_src:"data:image/jpeg,%"+hexData.join('%')});
}
</pre> 
        <p>The directory entry for the thumbnail image is just like the others. If we find the IFD1 offset at the end of IFD0, we pass the data back into the readTags function looking for two specific tags: JPEGInterchangeFormat (the offset to the thumbnail) and JPEGInterchangeFormatLength (the size of the thumbnail in bytes). We read in the correct amount of raw bytes at the appropriate offset, convert each byte into hex, and pass it back as a data URI to be inserted into the DOM showing the user a thumbnail while their photo is being uploaded.</p> 
        <p>As we get data back from the readTags function, we post a message out of the worker with the tags as an object. Which will be caught caught by our event handlers from earlier, shown the user, and stored as necessary to be uploaded when the user is ready.</p> 
        <p>We use this same process to parse older IPTC data. Essentially we look for an APP14 marker, a Photoshop 3.0 marker, a 8BIM marker, and then begin running through the bytes looking for segment type, size, and data. We map the segment type against a lookup table to get the segment name and get size number of bytes at the offset to get the segment data. This is all stored in a tags object and passed out of the worker.</p> 
        <p>XMP data is a little different, even easier. Basically we look for the slice of data surrounded by the values &lt;x:xmpmeta to &lt;/x:xmpmeta&gt; in the binary string, then pass that out of the worker to be parsed via Y.DataType.XML.parse().</p> 
        <h3>Conclusion</h3> 
        <p>In conclusion the major steps we take to process an images Exif are:</p> 
        <ol> 
         <li>Initialize a web worker</li> 
         <li>Get a file reference</li> 
         <li>Get a slice of the files data</li> 
         <li>Read a byte string</li> 
         <li>Look for APP1/APP0 markers</li> 
         <li>Look for Exif and TIFF header markers</li> 
         <li>Look for IFD0 and IFD1</li> 
         <li>Process entries from IFD0 and IFD1</li> 
         <li>Pass data back out of the worker</li> 
        </ol> 
        <p>That is pretty much all there is to reading Exif! The key is to be very forgiving in the parsing of Exif data, because there are a lot of different cameras out there and the format has changed over the years.</p> 
        <p>One final note: Web workers have made client-side Exif processing feasible at scale. Tasks like this can be performed without web workers, but run the risk of locking the UI thread  certainly not ideal for a web app that begs for user interaction.</p> 
        <div class="hiring-banner"> 
         <p class="group-photo"> <a href="http://www.flickr.com/photos/morozgrafix/7803402076/" title="Flickr flamily floto by morozgrafix, on Flickr"><img src="http://farm9.staticflickr.com/8436/7803402076_c06f87bf1f_m.jpg" width="120" height="80" alt="Flickr flamily floto"></a> </p> 
         <p> Like this post? Have a love of online photography? Want to work with us? Flickr is hiring <strong>engineers</strong>, <strong>designers</strong> and <strong>product managers</strong> in our San Francisco office. <strong>Find out more at <a href="http://www.flickr.com/jobs/">flickr.com/jobs</a></strong>. </p> 
        </div> 
        <div id="jp-post-flair" class="sharedaddy sd-like-enabled sd-sharing-enabled">
         <div class="sharedaddy sd-sharing-enabled">
          <div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing">
           <h3 class="sd-title">Share this:</h3>
           <div class="sd-content">
            <ul>
             <li class="share-email"><a rel="nofollow" data-shared="" class="share-email sd-button share-icon" href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/?share=email" target="_blank" title="Click to email"><span>Email</span></a></li>
             <li class="share-twitter"><a rel="nofollow" data-shared="sharing-twitter-1951" class="share-twitter sd-button share-icon" href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/?share=twitter" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li>
             <li class="share-facebook"><a rel="nofollow" data-shared="sharing-facebook-1951" class="share-facebook sd-button share-icon" href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/?share=facebook" target="_blank" title="Share on Facebook"><span>Facebook</span></a></li>
             <li class="share-tumblr"><a rel="nofollow" data-shared="" class="share-tumblr sd-button share-icon" href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/?share=tumblr" target="_blank" title="Click to share on Tumblr"><span>Tumblr</span></a></li>
             <li class="share-reddit"><a rel="nofollow" data-shared="" class="share-reddit sd-button share-icon" href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/?share=reddit" target="_blank" title="Click to share on Reddit"><span>Reddit</span></a></li>
             <li><a href="#" class="sharing-anchor sd-button share-more"><span>More</span></a></li>
             <li class="share-end"></li>
            </ul>
            <div class="sharing-hidden">
             <div class="inner" style="display: none;">
              <ul>
               <li class="share-google-plus-1"><a rel="nofollow" data-shared="sharing-google-1951" class="share-google-plus-1 sd-button share-icon" href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/?share=google-plus-1" target="_blank" title="Click to share on Google+"><span>Google</span></a></li>
               <li class="share-linkedin"><a rel="nofollow" data-shared="sharing-linkedin-1951" class="share-linkedin sd-button share-icon" href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/?share=linkedin" target="_blank" title="Click to share on LinkedIn"><span>LinkedIn</span></a></li>
               <li class="share-end"></li>
               <li class="share-end"></li>
              </ul>
             </div>
            </div>
           </div>
          </div>
         </div>
         <div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" id="like-post-wrapper-39034126-1951-59becbb2e6245" data-src="//widgets.wp.com/likes/#blog_id=39034126&amp;post_id=1951&amp;origin=flickrcode.wordpress.com&amp;obj_id=39034126-1951-59becbb2e6245" data-name="like-post-frame-39034126-1951-59becbb2e6245">
          <h3 class="sd-title">Like this:</h3>
          <div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;">
           <span class="button"><span>Like</span></span> 
           <span class="loading">Loading...</span>
          </div>
          <span class="sd-text-color"></span>
          <a class="sd-link-color"></a>
         </div>
        </div> 
       </div>
       <!-- .entry-content --> 
       <footer class="entry-meta">
         This entry was posted in 
        <a href="http://code.flickr.net/category/uploadr/" rel="category tag">uploadr</a> by 
        <a href="http://code.flickr.net/author/mustardpizza/">cberry</a>. Bookmark the 
        <a href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javascript-2/" title="Permalink to Parsing Exif client-side using&nbsp;JavaScript" rel="bookmark">permalink</a>. 
        <div id="author-info"> 
         <div id="author-avatar"> 
          <img alt="" src="http://2.gravatar.com/avatar/e1ef4b0eab3085d5a7f3bbc7cbcda364?s=68&amp;d=identicon&amp;r=G" class="avatar avatar-68" height="68" width="68"> 
         </div>
         <!-- #author-avatar --> 
         <div id="author-description"> 
          <h2>About cberry</h2> I am a Frontend Engineer at Flickr. 
          <div id="author-link"> 
           <a href="http://code.flickr.net/author/mustardpizza/" rel="author"> View all posts by cberry <span class="meta-nav">?</span> </a> 
          </div>
          <!-- #author-link	--> 
         </div>
         <!-- #author-description --> 
        </div>
        <!-- #author-info --> 
       </footer>
       <!-- .entry-meta --> 
      </article>
      <!-- #post-1951 --> 
      <div id="comments"> 
      </div>
      <!-- #comments --> 
     </div>
     <!-- #content --> 
    </div>
    <!-- #primary --> 
   </div>
   <!-- #main --> 
   <footer id="colophon" role="contentinfo"> 
    <div id="site-generator">
      Theme: Twenty Eleven 
     <span class="sep"> | </span> Powered by 
     <a href="https://vip.wordpress.com/?utm_source=vip_powered_wpcom&amp;utm_medium=web&amp;utm_campaign=VIP%20Footer%20Credit&amp;utm_term=code.flickr.net" rel="generator nofollow" class="powered-by-wpcom">WordPress.com VIP</a> 
    </div> 
   </footer>
   <!-- #colophon --> 
  </div>
  <!-- #page --> 
  <!-- wpcom_wp_footer --> 
  <script type="text/javascript" src="//0.gravatar.com/js/gprofiles.js?ver=201737y"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://s1.wp.com/wp-content/mu-plugins/gravatar-hovercards/wpgroho.js?m=1380573781h"></script> 
  <script>
		//initialize and attach hovercards to all gravatars
		jQuery( document ).ready( function( $ ) {

			if (typeof Gravatar === "undefined"){
				return;
			}

			if ( typeof Gravatar.init !== "function" ) {
				return;
			}			

			Gravatar.profile_cb = function( hash, id ) {
				WPGroHo.syncProfileData( hash, id );
			};
			Gravatar.my_hash = WPGroHo.my_hash;
			Gravatar.init( 'body', '#wp-admin-bar-my-account' );
		});
	</script> 
  <div style="display:none"> 
   <div class="grofile-hash-map-e1ef4b0eab3085d5a7f3bbc7cbcda364"> 
   </div> 
  </div> 
  <div id="carousel-reblog-box"> 
   <form action="#" name="carousel-reblog"> 
    <textarea id="carousel-reblog-content" name="carousel-reblog-content" placeholder="Add your thoughts here... (optional)"></textarea> 
    <label for="carousel-reblog-to-blog-id" id="carousel-reblog-lblogid">Post to</label> 
    <select name="carousel-reblog-to-blog-id" id="carousel-reblog-to-blog-id"> </select> 
    <div class="submit"> 
     <span class="canceltext"><a href="#" class="cancel">Cancel</a></span> 
     <input type="submit" name="carousel-reblog-submit" class="button" id="carousel-reblog-submit" value="Reblog Post"> 
     <input type="hidden" id="carousel-reblog-blog-id" value="39034126"> 
     <input type="hidden" id="carousel-reblog-blog-url" value="http://code.flickr.net"> 
     <input type="hidden" id="carousel-reblog-blog-title" value="code.flickr.com"> 
     <input type="hidden" id="carousel-reblog-post-url" value=""> 
     <input type="hidden" id="carousel-reblog-post-title" value=""> 
    </div> 
    <input type="hidden" id="_wpnonce" name="_wpnonce" value="eeebe856c0">
    <input type="hidden" name="_wp_http_referer" value="/2012/06/01/parsing-exif-client-side-using-javascript-2/"> 
   </form> 
   <div class="arrow"></div> 
  </div> 
  <script type="text/javascript">
		window.WPCOM_sharing_counts = {"http:\/\/code.flickr.net\/2012\/06\/01\/parsing-exif-client-side-using-javascript-2\/":1951};
	</script> 
  <div id="sharing_email" style="display: none;"> 
   <form action="/2012/06/01/parsing-exif-client-side-using-javascript-2/" method="post"> 
    <label for="target_email">Send to Email Address</label> 
    <input type="email" name="target_email" id="target_email" value=""> 
    <label for="source_name">Your Name</label> 
    <input type="text" name="source_name" id="source_name" value=""> 
    <label for="source_email">Your Email Address</label> 
    <input type="email" name="source_email" id="source_email" value=""> 
    <input type="text" id="jetpack-source_f_name" name="source_f_name" class="input" value="" size="25" autocomplete="off"> 
    <script> document.getElementById('jetpack-source_f_name').value = ''; </script> 
    <div class="recaptcha" id="sharing_recaptcha"></div>
    <input type="hidden" name="recaptcha_public_key" id="recaptcha_public_key" value="6LcYW8MSAAAAADBAuEH9yaPcF7lWh11Iq62ZKtoo"> 
    <img style="float: right; display: none" class="loading" src="http://s2.wp.com/wp-content/mu-plugins/post-flair/sharing/images/loading.gif?m=1315610318h" alt="loading" width="16" height="16"> 
    <input type="submit" value="Send Email" class="sharing_send"> 
    <a rel="nofollow" href="#cancel" class="sharing_cancel">Cancel</a> 
    <div class="errors errors-1" style="display: none;">
      Post was not sent - check your email addresses! 
    </div> 
    <div class="errors errors-2" style="display: none;">
      Email check failed, please try again 
    </div> 
    <div class="errors errors-3" style="display: none;">
      Sorry, your blog cannot share posts by email. 
    </div> 
   </form> 
  </div> 
  <script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-twitter' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomtwitter', 'menubar=1,resizable=1,width=600,height=350' );
				return false;
			});
		});
		</script> 
  <script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-facebook' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomfacebook', 'menubar=1,resizable=1,width=600,height=400' );
				return false;
			});
		});
		</script> 
  <script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-tumblr' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomtumblr', 'menubar=1,resizable=1,width=450,height=450' );
				return false;
			});
		});
		</script> 
  <script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-google-plus-1' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomgoogle-plus-1', 'menubar=1,resizable=1,width=480,height=550' );
				return false;
			});
		});
		</script> 
  <script type="text/javascript">
			var windowOpen;
		jQuery(document).on( 'ready post-load', function(){
			jQuery( 'a.share-linkedin' ).on( 'click', function() {
				if ( 'undefined' !== typeof windowOpen ){ // If there's another sharing window open, close it.
					windowOpen.close();
				}
				windowOpen = window.open( jQuery(this).attr( 'href' ), 'wpcomlinkedin', 'menubar=1,resizable=1,width=580,height=450' );
				return false;
			});
		});
		</script> 
  <script type="text/javascript" src="https://s1.wp.com/_static/??-eJzTLy/QTc7PK0nNK9EvyClNz8wr1i+uzCtJrMjITM/IAeKS1CJMEWP94uSizIISoOIM5/yiVL2sYh19yo1yKiotzvAKBvOBRtrn2hqaGBkZmxgZGptkAQCazUE2"></script> 
  <script type="text/javascript">
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "http://s0.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?m=1422342134h&amp;ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "http://s0.wp.com/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?m=1363304414h&amp;ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();

// Infinite scroll support
jQuery( function( $ ) {
	$( document.body ).on( 'post-load', function() {
		SyntaxHighlighter.highlight();
	} );
} );
</script> 
  <link rel="stylesheet" id="all-css-0-2" href="https://s1.wp.com/wp-content/mu-plugins/carousel/jetpack-carousel.css?m=1481571546h" type="text/css" media="all"> 
  <!--[if lte IE 8]>
<link rel='stylesheet' id='jetpack-carousel-ie8fix-css'  href='http://s1.wp.com/wp-content/mu-plugins/carousel/jetpack-carousel-ie8fix.css?m=1412618825h&#038;ver=20121024' type='text/css' media='all' />
<![endif]--> 
  <script type="text/javascript">
/* <![CDATA[ */
var wpcomVipAnalytics = {"is_404":"0","is_home":"0","is_single":"1","is_front_page":"0","is_archive":"0","percentToTrack":"1"};
/* ]]> */
</script> 
  <script type="text/javascript">
/* <![CDATA[ */
var jetpackCarouselStrings = {"widths":[370,700,1000,1200,1400,2000],"is_logged_in":"","lang":"en","ajaxurl":"http:\/\/code.flickr.net\/wp-admin\/admin-ajax.php","nonce":"16ba0dfd14","display_exif":"1","display_geo":"1","single_image_gallery":"1","single_image_gallery_media_file":"","background_color":"black","comment":"Comment","post_comment":"Post Comment","write_comment":"Write a Comment...","loading_comments":"Loading Comments...","download_original":"View full size <span class=\"photo-size\">{0}<span class=\"photo-size-times\">\u00d7<\/span>{1}<\/span>","no_comment_text":"Please be sure to submit some text with your comment.","no_comment_email":"Please provide an email address to comment.","no_comment_author":"Please provide your name to comment.","comment_post_error":"Sorry, but there was an error posting your comment. Please try again later.","comment_approved":"Your comment was approved.","comment_unapproved":"Your comment is in moderation.","camera":"Camera","aperture":"Aperture","shutter_speed":"Shutter Speed","focal_length":"Focal Length","comment_registration":"0","require_name_email":"1","login_url":"https:\/\/flickrcode.wordpress.com\/wp-login.php?redirect_to=http%3A%2F%2Fcode.flickr.net%2F2012%2F06%2F01%2Fparsing-exif-client-side-using-javascript-2%2F","blog_id":"39034126","local_comments_commenting_as":"<fieldset><label for=\"email\">Email (Required)<\/label> <input type=\"text\" name=\"email\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-email-field\" \/><\/fieldset><fieldset><label for=\"author\">Name (Required)<\/label> <input type=\"text\" name=\"author\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-author-field\" \/><\/fieldset><fieldset><label for=\"url\">Website<\/label> <input type=\"text\" name=\"url\" class=\"jp-carousel-comment-form-field jp-carousel-comment-form-text-field\" id=\"jp-carousel-comment-form-url-field\" \/><\/fieldset>","reblog":"Reblog","reblogged":"Reblogged","reblog_add_thoughts":"Add your thoughts here... (optional)","reblogging":"Reblogging...","post_reblog":"Post Reblog","stats_query_args":"blog=39034126&v=wpcom&tz=0&user_id=0&subd=flickrcode","is_public":"1","reblog_enabled":""};
/* ]]> */
</script> 
  <script type="text/javascript">
/* <![CDATA[ */
var sharing_js_options = {"lang":"en","counts":"1"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://s0.wp.com/_static/??-eJx9j01Ow0AMhS+E4zYSlA3iLGZiWk/nD3smkNszlRrIosrqWc/+nm38LuByqpwqesOJZ3FcfgZvT7hpxQYltLMkwyBXNvxq3PhCaQqs67AkF9rUmz3I5Rg7CMolLEOUtJM4wizlBnUBShSWKs52AJp6IHyQYiSrrL2CPLOq3Lb/eY/usvJ/ytb3/SFd7jJspx7sd6S5GQf0XAu5K6zGDlOyVfgMJIp2IZV0XrVD7/Ht+HwYX16Pp/HgfwEj7ZaK"></script> 
  <script type="text/javascript">
// <![CDATA[
(function() {
try{
  if ( window.external &&'msIsSiteMode' in window.external) {
    if (window.external.msIsSiteMode()) {
      var jl = document.createElement('script');
      jl.type='text/javascript';
      jl.async=true;
      jl.src='/wp-content/plugins/ie-sitemode/custom-jumplist.php';
      var s = document.getElementsByTagName('script')[0];
      s.parentNode.insertBefore(jl, s);
    }
  }
}catch(e){}
})();
// ]]>
</script> 
  <iframe src="http://widgets.wp.com/likes/master.html?ver=20170206#ver=20170206" scrolling="no" id="likes-master" name="likes-master" style="display:none;"></iframe> 
  <div id="likes-other-gravatars">
   <div class="likes-text">
    <span>%d</span> bloggers like this:
   </div>
   <ul class="wpl-avatars sd-like-gravatars"></ul>
  </div> 
  <script src="//stats.wp.com/w.js?56" type="text/javascript" async defer></script> 
  <script type="text/javascript">
_tkq = window._tkq || [];
_stq = window._stq || [];
_tkq.push(['storeContext', {'blog_id':'39034126','blog_tz':'0','user_lang':'en','blog_lang':'en','user_id':'0'}]);
_stq.push(['view', {'blog':'39034126','v':'wpcom','tz':'0','user_id':'0','post':'1951','subd':'flickrcode'}]);
function st_vt() {var x=document.createElement("img");x.src="http://pixel.wp.com/g.gif?blog=39034126&v=wpcomvt&tz=0&user_id=0&post=1951&subd=flickrcode&rand="+Math.random();}
_stq.push(['extra', {'crypt':'UE40eW5QN0p8M2Y/RE1BNmNJfGhxNCVxUDExYmtib2E/SzdEJm0lUEtbdFU0fFk4cHZvcUFrZT90Tn4yQm1+R3NyNTd1LERUSXUlJUR4VXctdEJxVkl1M2x0YkMlZVZTRmItR0UzMWxFbng0PS1sbDZ3OG5dZm1qbEFMc1c0WGxOQltvRHMmLFE0dVtqXVdmREZ8UGZCUWtOLzlDdVo2LVhXZkFCLTZwVk4lM1RIXTNpSzZQcHZWV1U9Z1tudGlxW29FVzVZb3RnfFtCNXIweEQwWzUlZGk9QUIrOWlfNldGZ0dfNnRaek00fkVPU3VGW3FiMUVyWFk3bDQ4SVlUfG16QnVSOUomekg='}]);
_stq.push([ 'clickTrackerInit', '39034126', '1951' ]);
	</script> 
  <noscript>
   <img src="http://pixel.wp.com/b.gif?v=noscript" style="height:0px;width:0px;overflow:hidden" alt="">
  </noscript> 
  <script>
if ( 'object' === typeof wpcom_mobile_user_agent_info ) {

	wpcom_mobile_user_agent_info.init();
	var mobileStatsQueryString = "";
	
	if( false !== wpcom_mobile_user_agent_info.matchedPlatformName )
		mobileStatsQueryString += "&x_" + 'mobile_platforms' + '=' + wpcom_mobile_user_agent_info.matchedPlatformName;
	
	if( false !== wpcom_mobile_user_agent_info.matchedUserAgentName )
		mobileStatsQueryString += "&x_" + 'mobile_devices' + '=' + wpcom_mobile_user_agent_info.matchedUserAgentName;
	
	if( wpcom_mobile_user_agent_info.isIPad() )
		mobileStatsQueryString += "&x_" + 'ipad_views' + '=' + 'views';

	if( "" != mobileStatsQueryString ) {
		new Image().src = document.location.protocol + '//pixel.wp.com/g.gif?v=wpcom-no-pv' + mobileStatsQueryString + '&baba=' + Math.random();
	}
	
}
</script> 
  <script async src="https://embedr.flickr.com/assets/client-code.js" charset="utf-8"></script>   
 </body>
</html>