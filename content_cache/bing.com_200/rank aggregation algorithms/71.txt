<!doctype html>
<html lang="en">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
  <base href="http://www.theprojectspot.com"> 
  <title>Creating a genetic algorithm for beginners</title> 
  <meta property="og:title" content="Creating a genetic algorithm for beginners"> 
  <meta name="description" content="An introductory tutorial to genetic algorithms (GA) for beginners. Step by step guide of how to create a basic binary genetic algorithm (GA) in Java with example code."> 
  <meta property="og:description" content="An introductory tutorial to genetic algorithms (GA) for beginners. Step by step guide of how to create a basic binary genetic algorithm (GA) in Java with example code."> 
  <meta name="keywords" content="Lee Jacobson, The Project Spot, genetic algorithms, artificial intelligence, neural networks, algorithms"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <link rel="stylesheet" type="text/css" href="templates/new2/css/style.css?v=1482995576">
  <link rel="canonical" href="/tutorial-post/creating-a-genetic-algorithm-for-beginners/3"> 
  <meta property="og:url" content="http://www.theprojectspot.com/tutorial-post/creating-a-genetic-algorithm-for-beginners/3"> 
  <link href="http://fonts.googleapis.com/css?family=Droid+Serif:400" rel="stylesheet" type="text/css"> 
  <link rel="shortcut icon" href="http://www.theprojectspot.com/favicon.ico" type="image/x-icon"> 
  <meta itemprop="image" content="/images/favicon.png"> 
  <link type="application/rss+xml" rel="alternate" title="RSS" href="/feed/"> 
  <link href="https://plus.google.com/102308414709447205951" rel="author"> 
  <script type="text/javascript" src="https://apis.google.com/js/platform.js" async defer"></script> 
  <script type="text/x-mathjax-config">
      MathJax.Hub.Config({
        tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]},
        messageStyle: "none",
        showMathMenu: false
      });
    </script> 
  <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script> 
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js" type="text/javascript"></script> 
  <meta property="og:image" content="http://www.theprojectspot.com/post-img/t/3.jpg"> 
  <link rel="image_src" type="image/jpeg" href="http://www.theprojectspot.com/post-img/t/3.jpg"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:site" content="@leejacobson_"> 
  <meta name="twitter:title" content="Creating a genetic algorithm for beginners"> 
  <meta name="twitter:description" content="An introductory tutorial to genetic algorithms (GA) for beginners. Step by step guide of how to create a basic binary genetic algorithm (GA) in Java with example code."> 
  <meta name="twitter:image" content="http://www.theprojectspot.com/post-img/t/3.jpg"> 
  <meta name="twitter:image:width" content="300"> 
  <meta name="twitter:image:height" content="300"> 
  <meta name="twitter:url" content="/tutorial-post/creating-a-genetic-algorithm-for-beginners/3"> 
  <script type="text/javascript">
	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-28517906-1']);
	  _gaq.push(['_trackPageview']);
	
	  (function() {
		var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	  })();
	  
	  window.onerror = function(message, file, line) {
	   var sFormattedMessage = '[' + file + ' (' + line + ')] ' + message;
	   _gaq.push(['_trackEvent', 'Exceptions', 'Application', sFormattedMessage, null, true]);
	}
	</script> 
  <script type="text/javascript">
    function loadPopup(params, callback){
        function hidePopup(event){
            $(".popup-wrap").hide();
            $(".popup-msg").hide();

            if (callback != undefined) {
                callback();
            }
            
            return false;
        }
        $(".popup-wrap").bind("click", hidePopup);
        $("#confirm-btn").bind("click", function(){
            if(callback != undefined){
                callback();
            }
            hidePopup();
            return false;
        });
        $("#cancel-btn, #dismiss-btn").bind("click", hidePopup);
        $('.popup-msg').bind("click", function(event){
            event.stopPropagation();
        });

        if (params.confirm != undefined) {
            $(".popup-confirm").show();
            $(".popup-message").hide();
        } else {
            $(".popup-confirm").hide();
            $(".popup-message").show();
        }
        
        if (params.msg != undefined) {
            $(".popup-text").text(params.msg);
        }
        if (params.header != undefined) {
            $('.popup-msg .popup-msg-header').text(params.header).show();
        } else {
            $('.popup-msg .popup-msg-header').hide();
        }
        
        $(".popup-wrap").fadeIn(250);
        $(".popup-msg").show();
        
        var bodyHeight = $('html').height();
        var boxHeight = $('.popup-msg').height();
        if(bodyHeight > boxHeight){
            var boxMargin = ((boxHeight / 2) * -1) + 10;
            $('.popup-msg').css('marginTop', boxMargin).css('top', '50%');
            $('.popup-msg').animate({marginTop: boxMargin - 10}, 80);
        }

        return false;
    }
    </script> 
 </head> 
 <body> 
  <script type="text/javascript">
var velocity = 0.28;
var menuFixed = false;
function fixMenu(){
    var pos = $(window).scrollTop();
    if(($("#menu-placeholder").offset().top - pos) <= 0){
        $("#menu-wrap").addClass('fixed');
        $("#menu-wrap").css('position', 'fixed');
        if (!menuFixed) {
            //$("#menu-wrap").hide();
            //$("#menu-wrap").fadeIn(300);
        }
        menuFixed = true;
    } else {
        $("#menu-wrap").removeClass('fixed');
        $("#menu-wrap").css('position', 'relative');

        $('#header_wrap').css('transform', 'translate3d(0, '+ (pos * velocity) + 'px, 0)');
        
        menuFixed = false;
    }
}
$(document).ready(function(){
    var _document = $(document);
    _document.on('scroll', fixMenu);
    fixMenu();
    
    var menuVisable = false;
    $('#mob-menu-selector-wrap').click(function(){
        if (menuVisable) {
            $('#mobMenu').slideUp(200);
            menuVisable = false;
        } else {
            $('#mobMenu').slideDown(200);
            menuVisable = true;
        }
    });
});
</script> 
  <div id="header_wrap" class="no-mobile"> 
   <div id="header"> 
    <div id="little-robot">
     <div id="robot-hello"></div>
    </div> 
   </div> 
  </div> 
  <div id="menu-placeholder" class="no-mobile"> 
   <div id="menu-wrap"> 
    <div id="topMenu"> 
     <ul> 
      <li class="menuItem"><a href="http://www.theprojectspot.com/home">Home</a></li> 
      <li class="menuItem"><a href="http://www.theprojectspot.com/about-me">About Me</a></li> 
      <li class="menuItem"><a href="http://www.theprojectspot.com/tutorials">Tutorials</a></li> 
      <li class="menuItem"><a href="http://www.theprojectspot.com/blog">Blog</a></li> 
      <li class="menuItem"><a href="http://www.theprojectspot.com/news">News</a></li> 
     </ul> 
    </div> 
   </div> 
  </div> 
  <div id="mob-header-wrap" class="mobile-only"> 
   <div id="mob-header">
    <a href="/"></a>
   </div> 
   <div id="mob-menu-selector-wrap"> 
    <div id="mob-menu-selector"></div> 
   </div> 
  </div> 
  <div class="mobile-only"> 
   <div id="mobMenu" class="mobile-only" style="display:none;"> 
    <ul> 
     <li class="menuItem"><a href="http://www.theprojectspot.com/home">Home</a></li> 
     <li class="menuItem"><a href="http://www.theprojectspot.com/about-me">About Me</a></li> 
     <li class="menuItem"><a href="http://www.theprojectspot.com/tutorials">Tutorials</a></li> 
     <li class="menuItem"><a href="http://www.theprojectspot.com/blog">Blog</a></li> 
     <li class="menuItem"><a href="http://www.theprojectspot.com/news">News</a></li> 
    </ul> 
   </div> 
  </div> 
  <div id="body-wrap"> 
   <div id="content-wrap"> 
    <div id="content"> 
     <div id="blog" class="pad fill"> 
      <div class="meta lvpad">
       12th February 2012 · By 
       <a href="/about-me">Lee Jacobson</a>
      </div> 
      <h1><a href="http://www.theprojectspot.com/tutorial-post/creating-a-genetic-algorithm-for-beginners/3">Creating a genetic algorithm for beginners</a></h1> 
      <h2>Introduction</h2>A genetic algorithm (GA) is great for finding solutions to complex search problems. They're often used in fields such as engineering to create incredibly high quality products thanks to their ability to search a through a huge combination of parameters to find the best match. For example, they can search through different combinations of materials and designs to find the perfect combination of both which could result in a stronger, lighter and overall, better final product. They can also be used to design computer algorithms, to schedule tasks, and to solve other optimization problems. Genetic algorithms are based on the process of evolution by natural selection which has been observed in nature. They essentially replicate the way in which life uses evolution to find solutions to real world problems. Surprisingly although genetic algorithms can be used to find solutions to incredibly complicated problems, they are themselves pretty simple to use and understand.
      <br> 
      <br> 
      <h2>How they work</h2>As we now know they're based on the process of natural selection, this means they take the fundamental properties of natural selection and apply them to whatever problem it is we're trying to solve.
      <br> 
      <br> The basic process for a genetic algorithm is:
      <ol>
       <li>Initialization - Create an initial population. This population is usually randomly generated and can be any desired size, from only a few individuals to thousands.</li>
       <li>Evaluation - Each member of the population is then evaluated and we calculate a 'fitness' for that individual. The fitness value is calculated by how well it fits with our desired requirements. These requirements could be simple, 'faster algorithms are better', or more complex, 'stronger materials are better but they shouldn't be too heavy'. </li>
       <li>Selection - We want to be constantly improving our populations overall fitness. Selection helps us to do this by discarding the bad designs and only keeping the best individuals in the population.&nbsp;&nbsp;There are a few different selection methods but the basic idea is the same, make it more likely that fitter individuals will be selected for our next generation.</li>
       <li>Crossover - During crossover we create new individuals by combining aspects of our selected individuals. We can think of this as mimicking how sex works in nature. The hope is that by combining certain traits from two or more individuals we will create an even 'fitter' offspring which will inherit the best traits from each of it's parents.</li>
       <li>Mutation - We need to add a little bit randomness into our populations' genetics otherwise every combination of solutions we can create would be in our initial population. Mutation typically works by making very small changes at random to an individuals genome.</li>
       <li>And repeat! - Now we have our next generation we can start again from step two until we reach a termination condition.</li>
       <br> 
      </ol>
      <h2>Termination</h2>There are a few reasons why you would want to terminate your genetic algorithm from continuing it's search for a solution. The most likely reason is that your algorithm has found a solution which is good enough and meets a predefined minimum criteria. Offer reasons for terminating could be constraints such as time or money.
      <br> 
      <br> 
      <h2>Limitations</h2>Imagine you were told to wear a blindfold then you were placed at the bottom of a hill with the instruction to find your way to the peak. You're only option is to set off climbing the hill until you notice you're no longer ascending anymore. At this point you might declare you've found the peak, but how would you know? In this situation because of your blindfolded you couldn't see if you're actually at the peak or just at the peak of smaller section of the hill. We call this a local optimum. Below is an example of how this local optimum might look:
      <br> 
      <img src="/images/post-assets/tutorials/ga1/localopt.jpg">
      <br> Unlike in our blindfolded hill climber, genetic algorithms can often escape from these local optimums if they are shallow enough. Although like our example we are often never able to guarantee that our genetic algorithm has found the global optimum solution to our problem. For more complex problems it is usually an unreasonable exception to find a global optimum, the best we can do is hope for is a close approximation of the optimal solution.
      <br> 
      <br> 
      <h2>Implementing a basic binary genetic algorithm in Java</h2>These examples are build in Java. If you don't have Java installed and you want to follow along please head over to the Java downloads page, http://
      <a href="www.oracle.com/technetwork/java/javase/downloads/index.html" class="betaLink">www.oracle.com/technetwork/java/javase/downloads/index.html</a>
      <br> 
      <br> Let's take a look at the classes we're going to create for our GA:
      <br> 
      <ul>
       <li>Population - Manages all individuals of a population</li>
       <li>Individual - Manages an individuals</li>
       <li>Algorithm - Manages our evolution algorithms such as crossover and mutation</li>
       <li>FitnessCalc - Allows us set a candidate solution and calculate an individual's fitness</li>
      </ul>
      <br> 
      <h3>Population.java</h3>
      <div class="code">
       <span class="code_format statement">package</span> simpleGa;
       <br> 
       <br> 
       <span class="code_format statement">public</span> 
       <span class="code_format statement">class</span> Population {
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;Individual[] individuals;
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">/*<br> &nbsp;&nbsp;&nbsp;&nbsp; * Constructors<br> &nbsp;&nbsp;&nbsp;&nbsp; */</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Create a population</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> Population(
       <span class="code_format data_type">int</span> populationSize, 
       <span class="code_format data_type">boolean</span> initialise) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;individuals = 
       <span class="code_format statement">new</span> Individual[populationSize];
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Initialise population</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">if</span> (initialise) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Loop and create individuals</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = 0; i &lt; size(); i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Individual newIndividual = 
       <span class="code_format statement">new</span> Individual();
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newIndividual.generateIndividual();
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveIndividual(i, newIndividual);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">/* Getters */</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> Individual getIndividual(
       <span class="code_format data_type">int</span> index) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> individuals[index];
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> Individual getFittest() {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Individual fittest = individuals[0];
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Loop through individuals to find fittest</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = 0; i &lt; size(); i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">if</span> (fittest.getFitness() &lt;= getIndividual(i).getFitness()) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fittest = getIndividual(i);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> fittest;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">/* Public methods */</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Get population size</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format data_type">int</span> size() {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> individuals.length;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Save individual</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format statement">void</span> saveIndividual(
       <span class="code_format data_type">int</span> index, Individual indiv) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;individuals[index] = indiv;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> }
       <br> 
      </div>
      <br> 
      <h3>Individual.java</h3>
      <div class="code">
       <span class="code_format statement">package</span> simpleGa;
       <br> 
       <br> 
       <span class="code_format statement">public</span> 
       <span class="code_format statement">class</span> Individual {
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">static</span> 
       <span class="code_format data_type">int</span> defaultGeneLength = 64;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">private</span> 
       <span class="code_format data_type">byte</span>[] genes = 
       <span class="code_format statement">new</span> 
       <span class="code_format data_type">byte</span>[defaultGeneLength];
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Cache</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">private</span> 
       <span class="code_format data_type">int</span> fitness = 0;
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Create a random individual</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format statement">void</span> generateIndividual() {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = 0; i &lt; size(); i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format data_type">byte</span> gene = (
       <span class="code_format data_type">byte</span>) Math.round(Math.random());
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genes[i] = gene;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">/* Getters and setters */</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Use <span class="code_format statement">this</span> <span class="code_format control_structure">if</span> you want to create individuals with different gene lengths</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format statement">static</span> 
       <span class="code_format statement">void</span> setDefaultGeneLength(
       <span class="code_format data_type">int</span> length) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultGeneLength = length;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format data_type">byte</span> getGene(
       <span class="code_format data_type">int</span> index) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> genes[index];
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format statement">void</span> setGene(
       <span class="code_format data_type">int</span> index, 
       <span class="code_format data_type">byte</span> value) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genes[index] = value;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fitness = 0;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">/* Public methods */</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format data_type">int</span> size() {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> genes.length;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format data_type">int</span> getFitness() {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">if</span> (fitness == 0) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fitness = FitnessCalc.getFitness(
       <span class="code_format statement">this</span>);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> fitness;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;@Override
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> String toString() {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String geneString = 
       <span class="code_format string">""</span>;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = 0; i &lt; size(); i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geneString += getGene(i);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> geneString;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> }
       <br> 
      </div>
      <br> 
      <br> 
      <h3>Algorithm.java</h3>
      <div class="code">
       <span class="code_format statement">package</span> simpleGa;
       <br> 
       <br> 
       <span class="code_format statement">public</span> 
       <span class="code_format statement">class</span> Algorithm {
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">/* GA parameters */</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">private</span> 
       <span class="code_format statement">static</span> 
       <span class="code_format statement">final</span> 
       <span class="code_format data_type">double</span> uniformRate = 0.5;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">private</span> 
       <span class="code_format statement">static</span> 
       <span class="code_format statement">final</span> 
       <span class="code_format data_type">double</span> mutationRate = 0.015;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">private</span> 
       <span class="code_format statement">static</span> 
       <span class="code_format statement">final</span> 
       <span class="code_format data_type">int</span> tournamentSize = 5;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">private</span> 
       <span class="code_format statement">static</span> 
       <span class="code_format statement">final</span> 
       <span class="code_format data_type">boolean</span> elitism = 
       <span class="code_format statement">true</span>;
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">/* Public methods */</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Evolve a population</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format statement">static</span> Population evolvePopulation(Population pop) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Population newPopulation = 
       <span class="code_format statement">new</span> Population(pop.size(), 
       <span class="code_format statement">false</span>);
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Keep our best individual</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">if</span> (elitism) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPopulation.saveIndividual(0, pop.getFittest());
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Crossover population</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format data_type">int</span> elitismOffset;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">if</span> (elitism) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elitismOffset = 1;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
       <span class="code_format control_structure">else</span> {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elitismOffset = 0;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Loop over the population size and create <span class="code_format statement">new</span> individuals with</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// crossover</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = elitismOffset; i &lt; pop.size(); i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Individual indiv1 = tournamentSelection(pop);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Individual indiv2 = tournamentSelection(pop);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Individual newIndiv = crossover(indiv1, indiv2);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newPopulation.saveIndividual(i, newIndiv);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Mutate population</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = elitismOffset; i &lt; newPopulation.size(); i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mutate(newPopulation.getIndividual(i));
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> newPopulation;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Crossover individuals</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">private</span> 
       <span class="code_format statement">static</span> Individual crossover(Individual indiv1, Individual indiv2) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Individual newSol = 
       <span class="code_format statement">new</span> Individual();
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Loop through genes</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = 0; i &lt; indiv1.size(); i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Crossover</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">if</span> (Math.random() &lt;= uniformRate) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newSol.setGene(i, indiv1.getGene(i));
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
       <span class="code_format control_structure">else</span> {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newSol.setGene(i, indiv2.getGene(i));
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> newSol;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Mutate an individual</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">private</span> 
       <span class="code_format statement">static</span> 
       <span class="code_format statement">void</span> mutate(Individual indiv) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Loop through genes</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = 0; i &lt; indiv.size(); i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">if</span> (Math.random() &lt;= mutationRate) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Create random gene</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format data_type">byte</span> gene = (
       <span class="code_format data_type">byte</span>) Math.round(Math.random());
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indiv.setGene(i, gene);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Select individuals <span class="code_format control_structure">for</span> crossover</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">private</span> 
       <span class="code_format statement">static</span> Individual tournamentSelection(Population pop) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Create a tournament population</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Population tournament = 
       <span class="code_format statement">new</span> Population(tournamentSize, 
       <span class="code_format statement">false</span>);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// For each place in the tournament get a random individual</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = 0; i &lt; tournamentSize; i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format data_type">int</span> randomId = (
       <span class="code_format data_type">int</span>) (Math.random() * pop.size());
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tournament.saveIndividual(i, pop.getIndividual(randomId));
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Get the fittest</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Individual fittest = tournament.getFittest();
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> fittest;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> }
       <br> 
      </div>
      <br> 
      <h3>FitnessCalc.java</h3>
      <div class="code">
       <span class="code_format statement">package</span> simpleGa;
       <br> 
       <br> 
       <span class="code_format statement">public</span> 
       <span class="code_format statement">class</span> FitnessCalc {
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">static</span> 
       <span class="code_format data_type">byte</span>[] solution = 
       <span class="code_format statement">new</span> 
       <span class="code_format data_type">byte</span>[64];
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">/* Public methods */</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Set a candidate solution as a <span class="code_format data_type">byte</span> array</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format statement">static</span> 
       <span class="code_format statement">void</span> setSolution(
       <span class="code_format data_type">byte</span>[] newSolution) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution = newSolution;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// To make it easier we can use <span class="code_format statement">this</span> method to set our candidate solution </span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// with string of 0s and 1s</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">static</span> 
       <span class="code_format statement">void</span> setSolution(String newSolution) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution = 
       <span class="code_format statement">new</span> 
       <span class="code_format data_type">byte</span>[newSolution.length()];
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Loop through each character of our string and save it in our <span class="code_format data_type">byte</span> </span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// array</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = 0; i &lt; newSolution.length(); i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String character = newSolution.substring(i, i + 1);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">if</span> (character.contains(
       <span class="code_format string">"0"</span>) || character.contains(
       <span class="code_format string">"1"</span>)) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution[i] = Byte.parseByte(character);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
       <span class="code_format control_structure">else</span> {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;solution[i] = 0;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Calculate inidividuals fittness by comparing it to our candidate solution</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">static</span> 
       <span class="code_format data_type">int</span> getFitness(Individual individual) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format data_type">int</span> fitness = 0;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Loop through our individuals genes and compare them to our cadidates</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">for</span> (
       <span class="code_format data_type">int</span> i = 0; i &lt; individual.size() &amp;&amp; i &lt; solution.length; i++) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">if</span> (individual.getGene(i) == solution[i]) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fitness++;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> fitness;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Get optimum fitness</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">static</span> 
       <span class="code_format data_type">int</span> getMaxFitness() {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format data_type">int</span> maxFitness = solution.length;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">return</span> maxFitness;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> }
       <br> 
      </div>
      <br> Now let's create our main class. 
      <br> 
      <br> First we need to set a candidate solution (feel free to change this if you want to).
      <br> 
      <div class="code">
       FitnessCalc.setSolution(
       <span class="code_format string">"1111000000000000000000000000000000000000000000000000000000001111"</span>); 
      </div> 
      <br> Now we'll create our initial population, a population of 50 should be fine. 
      <br> 
      <div class="code">
       Population myPop = 
       <span class="code_format statement">new</span> Population(50,
       <span class="code_format statement">true</span>); 
      </div>
      <br> Now we can evolve our population until we reach our optimum fitness 
      <br> 
      <div class="code">
       <span class="code_format data_type">int</span> generationCount = 0; 
       <br> 
       <span class="code_format control_structure">while</span>(myPop.getFittest().getFitness() &lt; FitnessCalc.getMaxFitness()){ 
       <br> &nbsp;&nbsp;generationCount++; 
       <br> &nbsp;&nbsp;System.out.println(
       <span class="code_format string">"Generation: "</span>+generationCount+
       <span class="code_format string">" Fittest: "</span>+myPop.getFittest().getFitness()); 
       <br> &nbsp;&nbsp;myPop = Algorithm.evolvePopulation(myPop); 
       <br> } 
       <br> System.out.println(
       <span class="code_format string">"Solution found!"</span>); 
       <br> System.out.println(
       <span class="code_format string">"Generation: "</span>+generationCount); 
       <br> System.out.println(
       <span class="code_format string">"Genes:"</span>); 
       <br> System.out.println(myPop.getFittest()); 
       <br> 
      </div> 
      <br> Here's the complete code for our main class:
      <br> 
      <br> 
      <h3>GA.java</h3>
      <div class="code">
       <span class="code_format statement">package</span> simpleGa;
       <br> 
       <br> 
       <span class="code_format statement">public</span> 
       <span class="code_format statement">class</span> GA {
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format statement">public</span> 
       <span class="code_format statement">static</span> 
       <span class="code_format statement">void</span> main(String[] args) {
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Set a candidate solution</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FitnessCalc.setSolution(
       <span class="code_format string">"1111000000000000000000000000000000000000000000000000000000001111"</span>);
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Create an initial population</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Population myPop = 
       <span class="code_format statement">new</span> Population(50, 
       <span class="code_format statement">true</span>);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format comment">// Evolve our population until we reach an optimum solution</span>
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format data_type">int</span> generationCount = 0;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
       <span class="code_format control_structure">while</span> (myPop.getFittest().getFitness() &lt; FitnessCalc.getMaxFitness()) {
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;generationCount++;
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(
       <span class="code_format string">"Generation: "</span> + generationCount + 
       <span class="code_format string">" Fittest: "</span> + myPop.getFittest().getFitness());
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myPop = Algorithm.evolvePopulation(myPop);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(
       <span class="code_format string">"Solution found!"</span>);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(
       <span class="code_format string">"Generation: "</span> + generationCount);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(
       <span class="code_format string">"Genes:"</span>);
       <br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(myPop.getFittest());
       <br> 
       <br> &nbsp;&nbsp;&nbsp;&nbsp;}
       <br> }
      </div> 
      <br> If everything's right, you should get an output similar to the following:
      <div class="code">
       Generation: 1 Fittest: 40
       <br> Generation: 2 Fittest: 43
       <br> Generation: 3 Fittest: 50
       <br> Generation: 4 Fittest: 50
       <br> Generation: 5 Fittest: 52
       <br> Generation: 6 Fittest: 59
       <br> Generation: 7 Fittest: 59
       <br> Generation: 8 Fittest: 61
       <br> Generation: 9 Fittest: 61
       <br> Generation: 10 Fittest: 61
       <br> Generation: 11 Fittest: 63
       <br> Generation: 12 Fittest: 63
       <br> Generation: 13 Fittest: 63
       <br> Generation: 14 Fittest: 63
       <br> Generation: 15 Fittest: 63
       <br> Solution found!
       <br> Generation: 15
       <br> Genes:
       <br> 1111000000000000000000000000000000000000000000000000000000001111
       <br> 
      </div>
      <br> Remember you're output isn't going to be exactly the same as above because of the inherent characteristics of a genetic algorithm.
      <br> 
      <br> And there you have it, that's a very basic binary GA. The great thing about a binary GA is that it is easy to represent any problem, although it might not always be the best way of going about it. 
      <br> 
      <br> Want to apply a genetic algorithm to a real search problem? Check out the following tutorial, 
      <a href="/tutorial-post/applying-a-genetic-algorithm-to-the-travelling-salesman-problem/5">applying a genetic algorithm to the traveling salesman problem</a>
      <br> 
      <div id="end-content" class="clear"></div> 
      <br> 
      <h2>Author</h2> 
      <div class="boxed"> 
       <a href="/about-me"><img src="/images/me.jpg" alt="Lee Jacobson" style="float:left; margin-top:0px; margin-right:8px; border-radius:3px;"></a>Hello, I'm Lee.
       <br> I'm a developer from the UK who loves technology and business. Here you'll find articles and tutorials about things that interest me. If you want to hire me or know more about me head over to my 
       <a href="/about-me">about me</a> page
       <br> 
      </div> 
      <br>
      <h2>Social Links</h2> 
      <div id="social-links"> 
       <div class="no-mobile"> 
        <div style="height:22px; margin-top:5px;"> 
         <div class="left" style="padding-right:20px;"> 
          <a href="http://twitter.com/share" class="twitter-share-button" data-count="horizontal" data-via="leejacobson_" data-url="http://www.theprojectspot.com/tutorial-post/creating-a-genetic-algorithm-for-beginners/3">Tweet</a>
          <script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script> 
         </div> 
         <div class="left" style="height:22px; padding-top:0px;"> 
          <!-- Place this tag where you want the +1 button to render --> 
          <g:plusone size="medium" href="http://www.theprojectspot.com/tutorial-post/creating-a-genetic-algorithm-for-beginners/3"></g:plusone> 
          <!-- Place this tag after the last plusone tag --> 
          <script type="text/javascript">
  (function() {
    var po = document.createElement('script'); po.type = 'text/javascript'; po.async = true;
    po.src = 'https://apis.google.com/js/plusone.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(po, s);
  })();
</script> 
         </div> 
         <div class="left" style="height:22px; margin-top:-2px;"> 
          <div id="fb-root"></div>
          <script src="http://connect.facebook.net/en_US/all.js#appId=234685839903693&amp;xfbml=1"></script> 
          <fb:like href="http://www.theprojectspot.com/tutorial-post/creating-a-genetic-algorithm-for-beginners/3" send="false" layout="button_count" width="90" show_faces="false" action="like" share="true"></fb:like> 
         </div> 
         <div class="left" style="height:22px; padding-top:0px; margin-left:28px"> 
          <a class="addthis_counter addthis_pill_style" addthis:url="http://www.theprojectspot.com/tutorial-post/creating-a-genetic-algorithm-for-beginners/3"></a> 
          <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-52a4b5ec2eeb667f"></script> 
         </div> 
         <div class="left" style="height:22px; padding-top:0px; margin-left:24px;"> 
          <a href="https://twitter.com/leejacobson_" class="twitter-follow-button" data-show-count="false" data-show-screen-name="false">Follow</a> 
          <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="//platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script> 
         </div> 
        </div> 
       </div> 
       <div class="mobile-only"> 
        <a href="https://twitter.com/share?text=Creating+a+genetic+algorithm+for+beginners&amp;url=http%3A%2F%2Fwww.theprojectspot.com%2Ftutorial-post%2Fcreating-a-genetic-algorithm-for-beginners%2F3&amp;counturl=http%3A%2F%2Fwww.theprojectspot.com%2Ftutorial-post%2Fcreating-a-genetic-algorithm-for-beginners%2F3&amp;via=leejacobson_"><img src="/images/social/2/64/01_twitter.png"></a> 
        <a href="http://facebook.com/share.php?u=http%3A%2F%2Fwww.theprojectspot.com%2Ftutorial-post%2Fcreating-a-genetic-algorithm-for-beginners%2F3"><img src="/images/social/2/64/02_facebook.png"></a> 
        <a href="https://plus.google.com/share?url=http%3A%2F%2Fwww.theprojectspot.com%2Ftutorial-post%2Fcreating-a-genetic-algorithm-for-beginners%2F3"><img src="/images/social/2/64/14_google+.png"></a> 
        <a href="http://www.pinterest.com/pin/create/button/?url=http%3A%2F%2Fwww.theprojectspot.com%2Ftutorial-post%2Fcreating-a-genetic-algorithm-for-beginners%2F3&amp;media=http%3A%2F%2Fwww.theprojectspot.com%2Fpost-img%2Ft%2F3.jpg"><img src="/images/social/2/64/13_pinterest.png"></a> 
       </div> 
      </div> 
      <div style="clear:both; padding-top:10px;"> 
       <h2>Tags</h2> 
       <div style="margin-top:5px;"> 
        <a class="tag" href="/tag/genetic-algorithms">genetic-algorithms</a>
        <a class="tag" href="/tag/artificial-intelligence">artificial-intelligence</a>
        <a class="tag" href="/tag/java">java</a>
        <a class="tag" href="/tag/algorithm">algorithm</a> 
       </div> 
      </div> 
     </div> 
     <div class="pad fill"> 
      <h1>Related Articles</h1> 
      <div>
       <a href="/tutorial_post/simulated-annealing-algorithm-for-beginners/6">Simulated Annealing for beginners</a>
      </div>
      <div>
       <a href="/tutorial_post/applying-a-genetic-algorithm-to-the-travelling-salesman-problem/5">Applying a genetic algorithm to the traveling salesman problem</a>
      </div>
      <div>
       <a href="/post/consciousness-coming-to-a-machine-near-you/12">Consciousness, coming to a machine near you.</a>
      </div>
      <div>
       <a href="/post/workplace-automation/24">Workplace Automation</a>
      </div>
      <div>
       <a href="/post/the-bionic-limb/22">The Bionic Limb</a>
      </div>
     </div> 
     <div id="bottom_ad"> 
      <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> 
      <!-- tps_bottom --> 
      <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-4872572854596627" data-ad-slot="9730153947" data-ad-format="auto"></ins> 
      <script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script> 
     </div>
     <div class="pad fill"> 
      <h1>Comments</h1> 
      <div id="disqus_thread"></div> 
      <script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'theprojectspot'; // required: replace example with your forum shortname
	var disqus_identifier = '/tutorial-post/creating-a-genetic-algorithm-for-beginners/3';
	var disqus_url = 'http://www.theprojectspot.com/tutorial-post/creating-a-genetic-algorithm-for-beginners/3';

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script> 
      <noscript>
       Please enable JavaScript to view the 
       <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
      </noscript> 
      <a href="http://disqus.com" class="dsq-brlink">blog comments powered by <span class="logo-disqus">Disqus</span></a> 
     </div> 
     <div id="bottom_ad"> 
      <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> 
      <!-- tps_bottom --> 
      <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-4872572854596627" data-ad-slot="9730153947" data-ad-format="auto"></ins> 
      <script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script> 
     </div> 
    </div> 
    <div id="menuBar" class="no-mobile"> 
     <div class="pad fill"> 
      <h3>Twitter Feed</h3> 
      <div id="twitter" style="word-wrap: break-word;">
       <div class="twitter-post-wrap">
        <div class="twitter-post">
         "This explorable tomb in the middle of the countryside is older than Stonehenge, yet many people have never even hea https://t.co/6w8R7vsrcD"
         <br>
         <span class="post-date">7th October 2017, 15:06:06 <span class="divide">|</span> <a href="https://twitter.com/leejacobson_/status/916771641958588416">Link</a></span>
        </div>
        <div class="tweet1"></div>
       </div>
       <div class="twitter-post-wrap">
        <div class="twitter-post two">
         "Leaked footage from Citron Research
         <br> https://t.co/K1GsViMe7j"
         <br>
         <span class="post-date">6th October 2017, 03:05:24 <span class="divide">|</span> <a href="https://twitter.com/leejacobson_/status/916227883114356736">Link</a></span>
        </div>
        <div class="tweet2"></div>
       </div>
       <div class="twitter-post-wrap">
        <div class="twitter-post">
         "This sums up every other post on /r/stocks https://t.co/FKzrBeW4nd"
         <br>
         <span class="post-date">30th September 2017, 10:38:37 <span class="divide">|</span> <a href="https://twitter.com/leejacobson_/status/914167609343475713">Link</a></span>
        </div>
        <div class="tweet1"></div>
       </div>
       <div class="twitter-post-wrap">
        <div class="twitter-post two">
         "Something I wrote a few years back,
         <br> https://t.co/dmKmzjV4h9"
         <br>
         <span class="post-date">22nd September 2017, 16:26:55 <span class="divide">|</span> <a href="https://twitter.com/leejacobson_/status/911356159818334209">Link</a></span>
        </div>
        <div class="tweet2"></div>
       </div>
       <div class="twitter-post-wrap">
        <div class="twitter-post">
         "What if You Only Invested at Market Peaks? by @awealthofcs https://t.co/knA8U5G6ou"
         <br>
         <span class="post-date">15th September 2017, 18:43:03 <span class="divide">|</span> <a href="https://twitter.com/leejacobson_/status/908853705935654912">Link</a></span>
        </div>
        <div class="tweet1"></div>
       </div>
       <div class="twitter-post-wrap">
        <div class="twitter-post two">
         "My mate just sent this shit to some chicks he likes from uni. I'm litterally dying from laughter ??? https://t.co/3KxgMwW2n2"
         <br>
         <span class="post-date">8th September 2017, 18:45:33 <span class="divide">|</span> <a href="https://twitter.com/leejacobson_/status/906317620181434368">Link</a></span>
        </div>
        <div class="tweet2"></div>
       </div>
       <a href="http://twitter.com/leejacobson_">@leejacobson_</a>
      </div> 
     </div> 
     <div class="pad fill"> 
      <h3>Popular Tags</h3> 
      <a style="float:left; font-size:16px; padding:0px 3px;" href="/tag/tsp">tsp</a>
      <a style="float:left; font-size:16px; padding:0px 3px;" href="/tag/self-improvement">self-improvement</a>
      <a style="float:left; font-size:10px; padding:0px 3px;" href="/tag/ant-colony-optimization">ant-colony-optimization</a>
      <a style="float:left; font-size:14px; padding:0px 3px;" href="/tag/startups">startups</a>
      <a style="float:left; font-size:10px; padding:0px 3px;" href="/tag/space">space</a>
      <a style="float:left; font-size:10px; padding:0px 3px;" href="/tag/interviews">interviews</a>
      <a style="float:left; font-size:12px; padding:0px 3px;" href="/tag/node-js">node-js</a>
      <a style="float:left; font-size:18px; padding:0px 3px;" href="/tag/algorithm">algorithm</a>
      <a style="float:left; font-size:10px; padding:0px 3px;" href="/tag/multi-layer-perceptron">multi-layer-perceptron</a>
      <a style="float:left; font-size:10px; padding:0px 3px;" href="/tag/genetic-algorithm">genetic-algorithm</a>
      <a style="float:left; font-size:10px; padding:0px 3px;" href="/tag/ACO">ACO</a>
      <a style="float:left; font-size:10px; padding:0px 3px;" href="/tag/multilayer-perceptron">multilayer-perceptron</a>
      <a style="float:left; font-size:12px; padding:0px 3px;" href="/tag/artificial-neural-networks">artificial-neural-networks</a>
      <a style="float:left; font-size:14px; padding:0px 3px;" href="/tag/java">java</a>
      <a style="float:left; font-size:10px; padding:0px 3px;" href="/tag/supervised-learning">supervised-learning</a>
      <a style="float:left; font-size:10px; padding:0px 3px;" href="/tag/hello-world">hello-world</a>
      <a style="float:left; font-size:18px; padding:0px 3px;" href="/tag/artificial-intelligence">artificial-intelligence</a>
      <a style="float:left; font-size:10px; padding:0px 3px;" href="/tag/single-layer-perceptron">single-layer-perceptron</a> 
     </div> 
     <div class="pad fill"> 
      <h3>Hire Me</h3> I'm available for freelance work,
      <br> lee@cwpstudios[dot]com 
     </div> 
     <div class="pad fill"> 
      <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script> 
      <!-- tps1 --> 
      <ins class="adsbygoogle" style="display:block" data-ad-client="ca-pub-4872572854596627" data-ad-slot="7359417142" data-ad-format="auto"></ins> 
      <script>
(adsbygoogle = window.adsbygoogle || []).push({});
</script> 
     </div> 
     <div class="right-ad"> 
     </div> 
    </div> 
    <div class="clear"></div> 
   </div> 
  </div> 
  <div class="clear"></div> 
  <div class="popup-wrap" style="display:none;"></div> 
  <div class="popup-msg" style="display:none;"> 
   <div class="popup-msg-header">
    Notice
   </div> 
   <div class="popup-text"> 
   </div> 
   <div class="popup-confirm"> 
    <a href="#" id="confirm-btn" class="large-btn">Confirm</a> 
    <a href="#" id="cancel-btn" class="large-btn">Cancel</a> 
   </div> 
   <div class="popup-message"> 
    <a href="#" id="dismiss-btn" class="large-btn">Dismiss</a> 
   </div> 
  </div> 
  <div id="footer-wrap"> 
   <div id="footer"> 
    <div id="footer-content"> 
     <div style="float:left;"> 
      <div id="footer-logo"></div> 
      <strong>Thanks for visiting!</strong>
      <br> 
      <br>Lets keep in touch,
      <br> 
      <a href="mailto:lee@cwpstudios.com">Send me an email</a> or 
      <a rel="author" href="https://plus.google.com/102308414709447205951?rel=author">follow me on Google+</a> 
     </div> 
     <div style="float:right;" class="no-mobile"> 
      <a href="http://www.theprojectspot.com/home">Home</a> 
      <span class="divide">|</span> 
      <a href="http://www.theprojectspot.com/about-me">About Me</a> 
      <span class="divide">|</span> 
      <a href="http://www.theprojectspot.com/projects">Projects</a> 
      <span class="divide">|</span> 
      <a href="http://www.theprojectspot.com/articles">Articles</a> 
      <span class="divide">|</span> 
      <a href="http://www.theprojectspot.com/tutorials">Tutorials</a> 
      <span class="divide">|</span> 
      <a href="http://www.theprojectspot.com/blog">Blog</a>
      <br> 
      <br> Built by 
      <a href="http://www.cwpstudios.com">cwpStudios.com</a>
      <br> Maintained and updated 
      <span class="author_info">by <a href="/about-me">Lee Jacobson</a></span>
      <br> 
      <br>Copyright © 2017 The Project Spot. All rights reserved. 
     </div> 
     <div style="clear:both;"></div> 
    </div> 
   </div> 
  </div> 
  <script type="text/javascript">
        var disqus_shortname = 'theprojectspot'; 
        (function () {
            var s = document.createElement('script'); s.async = true;
            s.type = 'text/javascript';
			s.id = 'disqus_comments';
            s.src = 'http://'+disqus_shortname +'.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || 

document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        </script>  
 </body>
</html>