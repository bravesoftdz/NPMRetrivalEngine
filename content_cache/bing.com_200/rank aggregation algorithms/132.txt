<!doctype html>
<html xmlns:cc="http://creativecommons.org/ns#">
 <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# medium-com: http://ogp.me/ns/fb/medium-com#">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>NBEAM: How I Wrote an Ultra-Fast DNA Sequence Alignment Algorithm in JavaScript</title>
  <link rel="canonical" href="https://medium.com/@keithwhor/nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da">
  <meta name="title" content="NBEAM: How I Wrote an Ultra-Fast DNA Sequence Alignment Algorithm in JavaScript">
  <meta name="referrer" content="unsafe-url">
  <meta name="description" content="Unfortunately, the idea that these three concepts are mutually exclusive is a widely-held belief for many developers (and scientists). Bioinformatics packages are written by biologists-turned…">
  <meta name="theme-color" content="#000000">
  <meta property="og:title" content="NBEAM: How I Wrote an Ultra-Fast DNA Sequence Alignment Algorithm in JavaScript">
  <meta property="og:url" content="https://medium.com/@keithwhor/nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da">
  <meta property="fb:app_id" content="542599432471018">
  <meta property="og:description" content="Science. JavaScript. Speed. Can we pick only one?">
  <meta name="twitter:description" content="Science. JavaScript. Speed. Can we pick only one?">
  <link rel="publisher" href="https://plus.google.com/103654360130207659246">
  <link rel="author" href="https://medium.com/@keithwhor">
  <meta property="author" content="Keith Horwood">
  <meta property="og:type" content="article">
  <meta name="twitter:card" content="summary">
  <meta property="article:publisher" content="https://www.facebook.com/medium">
  <meta property="article:author" content="https://medium.com/@keithwhor">
  <meta name="robots" content="index, follow">
  <meta property="article:published_time" content="2015-02-23T09:04:25.951Z">
  <meta name="twitter:creator" content="@keithwhor">
  <meta name="twitter:site" content="@Medium">
  <meta property="og:site_name" content="Medium">
  <meta name="twitter:label1" value="Reading time">
  <meta name="twitter:data1" value="16 min read">
  <meta name="twitter:app:name:iphone" content="Medium">
  <meta name="twitter:app:id:iphone" content="828256236">
  <meta name="twitter:app:url:iphone" content="medium://p/c199e936da">
  <meta property="al:ios:app_name" content="Medium">
  <meta property="al:ios:app_store_id" content="828256236">
  <meta property="al:android:package" content="com.medium.reader">
  <meta property="al:android:app_name" content="Medium">
  <meta property="al:ios:url" content="medium://p/c199e936da">
  <meta property="al:android:url" content="medium://p/c199e936da">
  <meta property="al:web:url" content="https://medium.com/@keithwhor/nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da">
  <link rel="search" type="application/opensearchdescription+xml" title="Medium" href="/osd.xml">
  <link rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/c199e936da">
  <script type="application/ld+json">{"@context":"http://schema.org","@type":"NewsArticle","image":{"@type":"ImageObject","width":1920,"height":534,"url":"https://cdn-images-1.medium.com/max/2000/1*5ztbgEt4NqpVaxTc64C-XA.png"},"datePublished":"2015-02-23T09:04:25.951Z","dateModified":"2017-07-18T22:18:04.015Z","headline":"NBEAM: How I Wrote an Ultra-Fast DNA Sequence Alignment Algorithm in JavaScript","name":"NBEAM: How I Wrote an Ultra-Fast DNA Sequence Alignment Algorithm in JavaScript","keywords":["JavaScript","Algorithms","Dna"],"author":{"@type":"Person","name":"Keith Horwood","url":"https://medium.com/@keithwhor"},"creator":["Keith Horwood"],"publisher":{"@type":"Organization","name":"Medium","url":"https://medium.com/","logo":{"@type":"ImageObject","width":215,"height":60,"url":"https://cdn-images-1.medium.com/max/430/1*5ztbgEt4NqpVaxTc64C-XA.png"}},"mainEntityOfPage":"https://medium.com/@keithwhor/nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da"}</script>
  <link rel="stylesheet" type="text/css" href="https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m.css">
  <link rel="stylesheet" href="https://cdn-static-1.medium.com/_/fp/css/main-base.qu5Ysm5LyYB5mVHSYnpQ3w.css">
  <script>if (window.top !== window.self) window.top.location = window.self.location.href;var OB_startTime = new Date().getTime(); var OB_loadErrors = []; function _onerror(e) { OB_loadErrors.push(e) }; if (document.addEventListener) document.addEventListener("error", _onerror, true); else if (document.attachEvent) document.attachEvent("onerror", _onerror); function _asyncScript(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("script"); s.type = "text/javascript"; s.async = true; s.src = u; f.parentNode.insertBefore(s, f);}function _asyncStyles(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("link"); s.rel = "stylesheet"; s.href = u; f.parentNode.insertBefore(s, f); return s}(new Image()).src = "/_/stat?event=pixel.load&origin=" + encodeURIComponent(location.origin);</script>
  <script>window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date; ga("create", "UA-24232453-2", "auto", {"allowLinker": true, "legacyCookieDomain": window.location.hostname}); ga("send", "pageview");</script>
  <script async src="https://www.google-analytics.com/analytics.js"></script>
  <!--[if lt IE 9]><script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js"></script><![endif]-->
  <link rel="icon" href="https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico" class="js-favicon">
  <link rel="apple-touch-icon" sizes="152x152" href="https://cdn-images-1.medium.com/fit/c/304/304/1*8I-HPL0bfoIzGied-dzOvA.png">
  <link rel="apple-touch-icon" sizes="120x120" href="https://cdn-images-1.medium.com/fit/c/240/240/1*8I-HPL0bfoIzGied-dzOvA.png">
  <link rel="apple-touch-icon" sizes="76x76" href="https://cdn-images-1.medium.com/fit/c/152/152/1*8I-HPL0bfoIzGied-dzOvA.png">
  <link rel="apple-touch-icon" sizes="60x60" href="https://cdn-images-1.medium.com/fit/c/120/120/1*8I-HPL0bfoIzGied-dzOvA.png">
  <link rel="mask-icon" href="https://cdn-static-1.medium.com/_/fp/icons/monogram-mask.KPLCSFEZviQN0jQ7veN2RQ.svg" color="#171717">
 </head>
 <body itemscope class=" postShowScreen browser-chrome os-windows is-withMagicUnderlines v-glyph v-glyph--m is-noJs">
  <script>document.body.className = document.body.className.replace(/(^|\s)is-noJs(\s|$)/, "$1is-js$2")</script>
  <div class="site-main" id="container">
   <div class="butterBar butterBar--error"></div>
   <div class="surface">
    <div id="prerendered" class="screenContent">
     <canvas class="canvas-renderer"></canvas>
     <div class="container u-maxWidth740 u-xs-margin0 notesPositionContainer js-notesPositionContainer"></div>
     <div class="metabar u-clearfix js-metabar u-boxShadowBottomThinLighter u-fixed u-backgroundTransparentWhiteDarkest u-xs-sizeFullViewportWidth">
      <div class="metabar-inner u-marginAuto u-maxWidth1000 u-flexCenter u-justifyContentSpaceBetween u-paddingLeft20 u-paddingRight20 u-height65 u-xs-height56 js-metabarMiddle">
       <div class="metabar-block u-flex1 u-flexCenter">
        <div class="js-metabarLogoLeft u-xs-show">
         <a href="https://medium.com/" data-log-event="home" class="siteNav-logo"><span class="svgIcon svgIcon--logoWordmark svgIcon--138x27px is-flushLeft u-xs-hide u-textColorDarker">
           <svg class="svgIcon-use" width="138" height="27" viewbox="0 0 138 27">
            <path d="M130 27V16.96c0-3.26-.154-5.472-2.437-5.472-1.16 0-2.138.57-2.863 1.512.217.906.3 1.968.3 3.127 0 2.247.036 5.11 0 7.973 0 .472-.046.58.244.87L127 27h-8V16.96c0-3.297-.461-5.472-2.708-5.472-1.16 0-1.64.653-2.292 1.595V24.1c0 .472-.026.58.3.87L116 27h-8V11.56c0-.47-.07-.579-.36-.905L106 9h8v3.612c.906-2.537 2.437-4.112 5.372-4.112 2.682 0 4.494 1.466 5.255 4.257.834-2.392 3.008-4.257 6.053-4.257 3.588 0 5.32 2.626 5.32 7.627 0 2.392.036 5.11 0 7.973 0 .472.004.652.25.87L138 27h-8zm-27-3.045c0 .472-.149.617.178.906L105 27h-8v-4c-.906 2.465-2.956 4-5.637 4C87.775 27 86 24.39 86 19.461c0-2.391-.036-5 0-7.936 0-.471-.11-.58-.4-.87L84 9h8v9.628c0 3.225.269 5.4 2.298 5.4 1.16 0 2.086-.725 2.702-1.63V11.56c0-.471-.129-.58-.419-.906L95 9h8v14.955zM78.002.25A3.248 3.248 0 0 1 81.25 3.5 3.25 3.25 0 1 1 78.002.25zM75 27V11.56c0-.47.168-.579-.122-.905L73 9h8v15.1c0 .472-.01.678.24.9L83 27h-8zM64 11.706c-.507-.652-1.418-1.123-2.396-1.123-1.957 0-3.842 1.775-3.842 7.03 0 4.93 1.631 6.669 3.66 6.669.907 0 1.853-.436 2.578-1.378V11.706zm6 12.286c0 .47-.026.58.3.87L72 27h-8v-3.697C62.913 25.804 60.951 27 58.632 27 54.5 27 51.5 23.738 51.5 17.795c0-5.582 3.254-9.314 7.784-9.314 2.356 0 3.919 1.123 4.716 2.899V3.878c0-.471-.077-.617-.403-.906L62 1.305 70 .29v23.702zM43.9 16c.037-.471.037-.67.037-.815 0-4.747-.937-5.435-2.437-5.435-1.5 0-2.854.995-2.927 6.25h5.328zm-5.327 1c0 4.711 2.392 6.63 5.183 6.63 2.174 0 4.313-.943 5.509-3.335h.072c-.942 4.566-3.77 6.705-8.01 6.705-4.566 0-8.879-2.755-8.879-9.133 0-6.705 4.277-9.386 9.097-9.386 3.842 0 7.937 1.811 7.937 7.646 0 .109 0 .438-.036.873H38.573zM31.5 27h-12l2.39-2.646c.084-.084.11-.399.11-.87V7l-7.866 20L5.581 8.372C5.364 7.9 5.181 7.285 5 6.777V20.62c0 .58-.035.653.364 1.196L9 27H0l3.64-5.183c.399-.543.36-.616.36-1.196V6.27c0-.617.095-.69-.195-1.051L1 1h8.495l7.355 16.3L23.24 1h8.26l-2.2 2.75c-.326.326-.3.599-.3 1.106v18.629c0 .47.005.75.138.87L31.5 27z" />
           </svg></span><span class="svgIcon svgIcon--logoWordmark svgIcon--122x45px is-flushLeft u-xs-show u-textColorDarker">
           <svg class="svgIcon-use" width="122" height="45" viewbox="0 0 122 45">
            <path d="M61.6 31.806c0 .412 0 .505.28.758l1.574 1.537v.065h-6.979v-2.95a4.852 4.852 0 0 1-4.627 3.203c-3.588 0-6.192-2.81-6.192-7.981 0-4.843 2.81-8.075 6.754-8.075a4.122 4.122 0 0 1 4.056 2.51v-6.51a.806.806 0 0 0-.319-.787l-1.499-1.443v-.065l6.951-.815v20.553zm-5.125-.937v-9.714a2.614 2.614 0 0 0-2.08-.975c-1.695 0-3.334 1.537-3.334 6.099 0 4.271 1.414 5.78 3.175 5.78a2.81 2.81 0 0 0 2.24-1.19zm9.752 3.297V21.051a.88.88 0 0 0-.281-.786L64.4 18.672v-.065h6.98v13.302c0 .412 0 .505.28.758l1.536 1.443v.066l-6.97-.01zm-.253-20.356a2.81 2.81 0 1 1 5.62 0 2.81 2.81 0 0 1-5.62 0zm24.234 17.967c0 .413 0 .534.281.787l1.574 1.537v.065h-7.017v-3.363a5.077 5.077 0 0 1-4.805 3.616c-3.11 0-4.778-2.267-4.778-6.557 0-2.07 0-4.337.066-6.885a.796.796 0 0 0-.281-.76l-1.546-1.545v-.065h6.923v8.552c0 2.81.412 4.684 2.173 4.684a2.81 2.81 0 0 0 2.267-1.415v-9.367a.88.88 0 0 0-.28-.787l-1.556-1.602v-.065h6.979v13.17zm23.756 2.39c0-.507.094-6.952.094-8.432 0-2.81-.44-4.75-2.417-4.75a3.138 3.138 0 0 0-2.482 1.35c.198.876.292 1.772.28 2.67 0 1.948-.065 4.43-.093 6.913a.796.796 0 0 0 .281.759l1.574 1.442v.066h-7.045c0-.468.094-6.95.094-8.431 0-2.857-.44-4.75-2.389-4.75a2.81 2.81 0 0 0-2.323 1.387v9.555c0 .412 0 .506.281.759l1.537 1.442v.066h-6.97V21.098a.88.88 0 0 0-.281-.787l-1.546-1.639v-.065h6.98v3.334a5.002 5.002 0 0 1 5.002-3.587c2.323 0 3.896 1.292 4.562 3.747a5.433 5.433 0 0 1 5.245-3.747c3.11 0 4.872 2.295 4.872 6.632 0 2.07-.066 4.43-.094 6.913a.75.75 0 0 0 .318.759l1.537 1.443v.065h-7.017zm-87.671-2.043l2.07 1.977v.065H17.862v-.065l2.107-1.977a.796.796 0 0 0 .281-.759V18.728c0-.534 0-1.255.094-1.873l-7.082 17.564h-.084L5.843 18.26c-.16-.402-.206-.43-.31-.702v10.595c-.087.71.034 1.429.348 2.07l2.95 3.879v.065H1v-.065l2.95-3.888a3.69 3.69 0 0 0 .347-2.06v-11.71a2.267 2.267 0 0 0-.487-1.602l-2.089-2.708v-.065h7.494l6.277 13.686 5.527-13.686h7.335v.065l-2.061 2.296a.806.806 0 0 0-.319.786v16.15a.75.75 0 0 0 .319.759zm8.215-6.332v.065c0 4.01 2.07 5.62 4.497 5.62a5.105 5.105 0 0 0 4.777-2.894h.066c-.844 3.963-3.298 5.836-6.97 5.836-3.962 0-7.7-2.389-7.7-7.925 0-5.817 3.747-8.14 7.887-8.14 3.335 0 6.886 1.573 6.886 6.632v.806h-9.443zm0-.806h4.618v-.815c0-4.122-.852-5.218-2.136-5.218-1.555 0-2.5 1.64-2.5 6.033h.018z" />
           </svg></span><span class="u-textScreenReader">Homepage</span></a>
        </div>
        <a class="link link--darken u-accentColor--textDarken u-xs-hide js-upgradeMembershipAction u-baseColor--link" href="https://medium.com/membership?source=upgrade_membership---nav_full">About membership</a>
       </div>
       <div class="metabar-block u-flex0">
        <div class="buttonSet u-block u-margin0 u-flexCenter">
         <a class="button button--primary button--chromeless u-accentColor--buttonNormal is-inSiteNavBar u-xs-hide js-signInButton" href="https://medium.com/m/signin?redirect=https%3A%2F%2Fmedium.com%2F%40keithwhor%2Fnbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da&amp;source=--------------------------nav_reg&amp;operation=login">Sign in</a>
         <a class="button button--primary button--withChrome u-accentColor--buttonNormal is-inSiteNavBar js-signUpButton" href="https://medium.com/m/signin?redirect=https%3A%2F%2Fmedium.com%2F%40keithwhor%2Fnbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da&amp;source=--------------------------nav_reg">Get started</a>
        </div>
       </div>
       <div class="u-absolute u-sizeFullWidth u-top0 u-right0 u-textAlignCenter js-metabarLogoCentered u-xs-hide">
        <a href="https://medium.com/" data-log-event="home" class="siteNav-logo"><span class="svgIcon svgIcon--logoWordmark svgIcon--138x27px is-flushLeft u-xs-hide u-textColorDarker">
          <svg class="svgIcon-use" width="138" height="27" viewbox="0 0 138 27">
           <path d="M130 27V16.96c0-3.26-.154-5.472-2.437-5.472-1.16 0-2.138.57-2.863 1.512.217.906.3 1.968.3 3.127 0 2.247.036 5.11 0 7.973 0 .472-.046.58.244.87L127 27h-8V16.96c0-3.297-.461-5.472-2.708-5.472-1.16 0-1.64.653-2.292 1.595V24.1c0 .472-.026.58.3.87L116 27h-8V11.56c0-.47-.07-.579-.36-.905L106 9h8v3.612c.906-2.537 2.437-4.112 5.372-4.112 2.682 0 4.494 1.466 5.255 4.257.834-2.392 3.008-4.257 6.053-4.257 3.588 0 5.32 2.626 5.32 7.627 0 2.392.036 5.11 0 7.973 0 .472.004.652.25.87L138 27h-8zm-27-3.045c0 .472-.149.617.178.906L105 27h-8v-4c-.906 2.465-2.956 4-5.637 4C87.775 27 86 24.39 86 19.461c0-2.391-.036-5 0-7.936 0-.471-.11-.58-.4-.87L84 9h8v9.628c0 3.225.269 5.4 2.298 5.4 1.16 0 2.086-.725 2.702-1.63V11.56c0-.471-.129-.58-.419-.906L95 9h8v14.955zM78.002.25A3.248 3.248 0 0 1 81.25 3.5 3.25 3.25 0 1 1 78.002.25zM75 27V11.56c0-.47.168-.579-.122-.905L73 9h8v15.1c0 .472-.01.678.24.9L83 27h-8zM64 11.706c-.507-.652-1.418-1.123-2.396-1.123-1.957 0-3.842 1.775-3.842 7.03 0 4.93 1.631 6.669 3.66 6.669.907 0 1.853-.436 2.578-1.378V11.706zm6 12.286c0 .47-.026.58.3.87L72 27h-8v-3.697C62.913 25.804 60.951 27 58.632 27 54.5 27 51.5 23.738 51.5 17.795c0-5.582 3.254-9.314 7.784-9.314 2.356 0 3.919 1.123 4.716 2.899V3.878c0-.471-.077-.617-.403-.906L62 1.305 70 .29v23.702zM43.9 16c.037-.471.037-.67.037-.815 0-4.747-.937-5.435-2.437-5.435-1.5 0-2.854.995-2.927 6.25h5.328zm-5.327 1c0 4.711 2.392 6.63 5.183 6.63 2.174 0 4.313-.943 5.509-3.335h.072c-.942 4.566-3.77 6.705-8.01 6.705-4.566 0-8.879-2.755-8.879-9.133 0-6.705 4.277-9.386 9.097-9.386 3.842 0 7.937 1.811 7.937 7.646 0 .109 0 .438-.036.873H38.573zM31.5 27h-12l2.39-2.646c.084-.084.11-.399.11-.87V7l-7.866 20L5.581 8.372C5.364 7.9 5.181 7.285 5 6.777V20.62c0 .58-.035.653.364 1.196L9 27H0l3.64-5.183c.399-.543.36-.616.36-1.196V6.27c0-.617.095-.69-.195-1.051L1 1h8.495l7.355 16.3L23.24 1h8.26l-2.2 2.75c-.326.326-.3.599-.3 1.106v18.629c0 .47.005.75.138.87L31.5 27z" />
          </svg></span><span class="svgIcon svgIcon--logoWordmark svgIcon--122x45px is-flushLeft u-xs-show u-textColorDarker">
          <svg class="svgIcon-use" width="122" height="45" viewbox="0 0 122 45">
           <path d="M61.6 31.806c0 .412 0 .505.28.758l1.574 1.537v.065h-6.979v-2.95a4.852 4.852 0 0 1-4.627 3.203c-3.588 0-6.192-2.81-6.192-7.981 0-4.843 2.81-8.075 6.754-8.075a4.122 4.122 0 0 1 4.056 2.51v-6.51a.806.806 0 0 0-.319-.787l-1.499-1.443v-.065l6.951-.815v20.553zm-5.125-.937v-9.714a2.614 2.614 0 0 0-2.08-.975c-1.695 0-3.334 1.537-3.334 6.099 0 4.271 1.414 5.78 3.175 5.78a2.81 2.81 0 0 0 2.24-1.19zm9.752 3.297V21.051a.88.88 0 0 0-.281-.786L64.4 18.672v-.065h6.98v13.302c0 .412 0 .505.28.758l1.536 1.443v.066l-6.97-.01zm-.253-20.356a2.81 2.81 0 1 1 5.62 0 2.81 2.81 0 0 1-5.62 0zm24.234 17.967c0 .413 0 .534.281.787l1.574 1.537v.065h-7.017v-3.363a5.077 5.077 0 0 1-4.805 3.616c-3.11 0-4.778-2.267-4.778-6.557 0-2.07 0-4.337.066-6.885a.796.796 0 0 0-.281-.76l-1.546-1.545v-.065h6.923v8.552c0 2.81.412 4.684 2.173 4.684a2.81 2.81 0 0 0 2.267-1.415v-9.367a.88.88 0 0 0-.28-.787l-1.556-1.602v-.065h6.979v13.17zm23.756 2.39c0-.507.094-6.952.094-8.432 0-2.81-.44-4.75-2.417-4.75a3.138 3.138 0 0 0-2.482 1.35c.198.876.292 1.772.28 2.67 0 1.948-.065 4.43-.093 6.913a.796.796 0 0 0 .281.759l1.574 1.442v.066h-7.045c0-.468.094-6.95.094-8.431 0-2.857-.44-4.75-2.389-4.75a2.81 2.81 0 0 0-2.323 1.387v9.555c0 .412 0 .506.281.759l1.537 1.442v.066h-6.97V21.098a.88.88 0 0 0-.281-.787l-1.546-1.639v-.065h6.98v3.334a5.002 5.002 0 0 1 5.002-3.587c2.323 0 3.896 1.292 4.562 3.747a5.433 5.433 0 0 1 5.245-3.747c3.11 0 4.872 2.295 4.872 6.632 0 2.07-.066 4.43-.094 6.913a.75.75 0 0 0 .318.759l1.537 1.443v.065h-7.017zm-87.671-2.043l2.07 1.977v.065H17.862v-.065l2.107-1.977a.796.796 0 0 0 .281-.759V18.728c0-.534 0-1.255.094-1.873l-7.082 17.564h-.084L5.843 18.26c-.16-.402-.206-.43-.31-.702v10.595c-.087.71.034 1.429.348 2.07l2.95 3.879v.065H1v-.065l2.95-3.888a3.69 3.69 0 0 0 .347-2.06v-11.71a2.267 2.267 0 0 0-.487-1.602l-2.089-2.708v-.065h7.494l6.277 13.686 5.527-13.686h7.335v.065l-2.061 2.296a.806.806 0 0 0-.319.786v16.15a.75.75 0 0 0 .319.759zm8.215-6.332v.065c0 4.01 2.07 5.62 4.497 5.62a5.105 5.105 0 0 0 4.777-2.894h.066c-.844 3.963-3.298 5.836-6.97 5.836-3.962 0-7.7-2.389-7.7-7.925 0-5.817 3.747-8.14 7.887-8.14 3.335 0 6.886 1.573 6.886 6.632v.806h-9.443zm0-.806h4.618v-.815c0-4.122-.852-5.218-2.136-5.218-1.555 0-2.5 1.64-2.5 6.033h.018z" />
          </svg></span><span class="u-textScreenReader">Homepage</span></a>
       </div>
      </div>
     </div>
     <div class="metabar metabar--spacer js-metabarSpacer u-height65 u-xs-height56"></div>
     <main role="main">
      <article class=" u-minHeight100vhOffset65 u-overflowHidden postArticle postArticle--full u-marginBottom40" lang="en">
       <header class="container u-maxWidth740">
        <div class="uiScale uiScale-ui--regular uiScale-caption--regular postMetaHeader u-paddingBottom10 row">
         <div class="col u-size12of12 js-postMetaLockup">
          <div class="uiScale uiScale-ui--regular uiScale-caption--regular postMetaLockup postMetaLockup--authorWithBio u-flex js-postMetaLockup">
           <div class="u-flex0">
            <a class="link avatar u-baseColor--link" href="https://medium.com/@keithwhor?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="29963203626" data-action-type="hover" data-user-id="29963203626" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/120/120/0*wFS04iPrwoOkEPYH.png" class="avatar-image avatar-image--small" alt="Go to the profile of Keith Horwood"></a>
           </div>
           <div class="u-flex1 u-paddingLeft15 u-overflowHidden">
            <a class="link ui-captionStrong link link--darken link--darker u-baseColor--link" href="https://medium.com/@keithwhor?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="29963203626" data-action-type="hover" data-user-id="29963203626" dir="auto">Keith Horwood</a>
            <span class="followState js-followState" data-user-id="29963203626"><button class="button button--smallest u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton u-marginLeft10 u-marginTopNegative2 u-xs-hide" data-action="sign-up-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-redirect="https://medium.com/@keithwhor/nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da" data-action-source="post_header_lockup"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--smallest u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton u-marginLeft10 u-marginTopNegative2 u-xs-hide" data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/29963203626" data-action-source="post_header_lockup-29963203626-------------------------follow_byline"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span>
            <div class="ui-caption postMetaInline u-noWrapWithEllipsis u-xs-normalWrap u-xs-lineClamp2 u-xs-maxHeight2LineHeightBase">
             Solving problems since 1988.
            </div>
            <div class="ui-caption postMetaInline js-testPostMetaInlineSupplemental">
             <time datetime="2015-02-23T09:04:25.951Z">Feb 23, 2015</time>
             <span class="middotDivider u-fontSize12"></span>
             <span class="readingTime" title="16 min read"></span>
            </div>
           </div>
          </div>
         </div>
        </div>
       </header>
       <div class="postArticle-content js-postField js-notesSource js-trackedPost" data-post-id="c199e936da" data-source="post_page" data-tracking-context="postPage">
        <section name="f9b6" class="section section--body section--first section--last">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h1 name="3d5a" id="3d5a" class="graf graf--h3 graf--leading graf--title">NBEAM: How I Wrote an Ultra-Fast DNA Sequence Alignment Algorithm in JavaScript</h1>
           <h2 name="c40f" id="c40f" class="graf graf--h4 graf-after--h3 graf--subtitle">Science. JavaScript. Speed. Can we pick only&nbsp;one?</h2>
           <p name="b5c0" id="b5c0" class="graf graf--p graf-after--h4">Unfortunately, the idea that these three concepts are mutually exclusive is a widely-held belief for many developers (and scientists). Bioinformatics packages are written by biologists-turned-developers, frequently in Python and Perl, and are often not optimized for speed (or even usability). JavaScript has a spotty history, riddled with complaints of implementation details (<a href="http://en.wikipedia.org/wiki/Brendan_Eich#Netscape_and_JavaScript" data-href="http://en.wikipedia.org/wiki/Brendan_Eich#Netscape_and_JavaScript" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">Brendan Eich wrote in in only ten days, c’mon!</a>). It’s common to assume that if you want <em class="markup--em markup--p-em">speed </em>you need to work <em class="markup--em markup--p-em">with the hardware. </em>How can you achieve “close to the metal” speed with JavaScript?</p>
           <p name="e100" id="e100" class="graf graf--p graf-after--p">Google’s <a href="http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29" data-href="http://en.wikipedia.org/wiki/V8_(JavaScript_engine)" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">V8 JavaScript Engine</a> has come a long way. In this article I’m going to explain how I wrote and implemented an ungapped degenerate DNA sequence alignment algorithm in JavaScript (browser + node) using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" data-href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">ArrayBuffers</a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" data-href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">bitwise operators</a>.</p>
           <p name="39d4" id="39d4" class="graf graf--p graf-after--p">A full JavaScript library containing containing the algorithm and other useful features is available in a <a href="http://github.com/keithwhor/NtSeq" data-href="http://github.com/keithwhor/NtSeq" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">github repository, keitwhor/NtSeq</a>. Before I go into the nitty-gritty details of the algorithm, NBEAM (Nucleotide Bitwise Exhaustive Alignment Mapping), I would like to clarify some definitions for the biologists and developers alike.</p>
           <p name="71f3" id="71f3" class="graf graf--p graf-after--p">First, to <strong class="markup--strong markup--p-strong">biologists</strong>: The algorithm contained here is for matching <em class="markup--em markup--p-em">ungapped</em> sequences and implements no substitution matrix. It scores <em class="markup--em markup--p-em">exact</em> matching only, being <strong class="markup--strong markup--p-strong">1</strong> for match (degenerate nucleotide or not) and <strong class="markup--strong markup--p-strong">0</strong> for no match. I’m sure it can be expanded upon to use a more complex scoring system. It’s MIT licenced, so go nuts! Just give credit where credit is due.</p>
           <p name="a0c0" id="a0c0" class="graf graf--p graf-after--p">For <strong class="markup--strong markup--p-strong">developers</strong>: Some lingo!</p>
           <p name="0d6b" id="0d6b" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Nucleotide:<br></strong>A “letter” of DNA. Typically <em class="markup--em markup--p-em">A</em>, <em class="markup--em markup--p-em">T</em>, <em class="markup--em markup--p-em">G</em> or <em class="markup--em markup--p-em">C</em>. In RNA, <em class="markup--em markup--p-em">U </em>is used instead of <em class="markup--em markup--p-em">T.</em></p>
           <p name="cf75" id="cf75" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Degenerate Nucleotide:<br></strong>A “letter” representing one or more possible nucleotides. There are 15 possible symbols, 16 if you include <em class="markup--em markup--p-em">no matches</em> (represented as “<em class="markup--em markup--p-em">-</em>”). For more information, you can check out <a href="http://en.wikipedia.org/wiki/Nucleic_acid_notation" data-href="http://en.wikipedia.org/wiki/Nucleic_acid_notation" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">nucleic acid notation on Wikipedia</a>.</p>
           <p name="25f6" id="25f6" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Ungapped:</strong><br>The DNA sequence contains no “gaps” or null nucleotides. While the algorithm itself supports gaps, it doesn’t make any effort to check gapped variants of sequences. It will always count a gap in a provided sequence as “not a match.”</p>
           <p name="b1d9" id="b1d9" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Substitution Matrix:</strong><br>A way of scoring nucleotide comparisons based upon how likely one nucleotide is to randomly mutate to a different type of nucleotide over a certain amount of time. This type of scoring is not used here, but it’s good to clarify.</p>
           <p name="1a07" id="1a07" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Genome:</strong><br>You’ve probably heard this one. A string of nucleotides containing all of the genetic information of a specific organism.</p>
           <h3 name="ed77" id="ed77" class="graf graf--h3 graf-after--p">The Problem</h3>
           <p name="99c6" id="99c6" class="graf graf--p graf-after--h3">First, let’s consider what we want to do. We have two sequences, let’s call them s<em class="markup--em markup--p-em">eqSearch</em> and <em class="markup--em markup--p-em">seqGenome</em>. The problem we’re trying to solve is that we want to find A) the best match of <em class="markup--em markup--p-em">seqSearch</em> in <em class="markup--em markup--p-em">seqGenome</em> and B) all subsequent “close” matches of <em class="markup--em markup--p-em">seqSearch</em> in <em class="markup--em markup--p-em">seqGenome</em>, ranked by similarity, along with the position of where they match.</p>
           <p name="f091" id="f091" class="graf graf--p graf-after--p">So, if <em class="markup--em markup--p-em">seqSearch</em> is “ATGC” and <em class="markup--em markup--p-em">seqGenome </em>is “ATGGCATGC”, we would expect a match list that looks like the following (with position 0-indexed):</p>
           <p name="51e4" id="51e4" class="graf graf--p graf-after--p">Rank: 1, Position: 5, Matches: 4 / 4, Result: ATGC<br>Rank: 2, Position: 0, Matches: 3 / 4, Result: ATGG<br>Rank: 3, Position: 1, Matches: 2 / 4, Result: TGGC<br>… etc.</p>
           <p name="ca27" id="ca27" class="graf graf--p graf-after--p">An algorithm to implement this is relatively straightforward:</p>
           <pre name="5fb3" id="5fb3" class="graf graf--pre graf-after--p">function search(seqSearch, seqGenome) {</pre>
           <pre name="42e7" id="42e7" class="graf graf--pre graf-after--pre">  var sLen = seqSearch.length;<br>  var gLen = seqGenome.length;</pre>
           <pre name="2c8d" id="2c8d" class="graf graf--pre graf-after--pre">  // Create a Uint32Array to initialize all values to 0<br>  var map = new Uint32Array(gLen + sLen);</pre>
           <pre name="ed7d" id="ed7d" class="graf graf--pre graf-after--pre">  var curChar;<br>  var offset;</pre>
           <pre name="0b3e" id="0b3e" class="graf graf--pre graf-after--pre">  for (var j = 0; j &lt; sLen; j++) {</pre>
           <pre name="6a3f" id="6a3f" class="graf graf--pre graf-after--pre">    curChar = seqSearch[j];</pre>
           <pre name="30cf" id="30cf" class="graf graf--pre graf-after--pre">    /* As we progress through our seqSearch,<br>       our offset in our map (the position<br>       we're matching at) gets changed.<br>       This is because we're trying to compare<br>       and aggregate match count based on the<br>       alignment of seqSearch as compared to<br>       its first (0-index) position. */</pre>
           <pre name="45f8" id="45f8" class="graf graf--pre graf-after--pre">    offset = sLen — j;</pre>
           <pre name="db0b" id="db0b" class="graf graf--pre graf-after--pre">    for (var i = 0; i &lt; gLen; i++) {<br>      if (curChar === seqGenome[i]) {<br>        ++map[offset + i];<br>      }<br>    }<br>  <br>  }</pre>
           <pre name="1d56" id="1d56" class="graf graf--pre graf-after--pre">  /* Convert map back into regular array,<br>     so we can use array methods */<br>  return [].slice.call(map);</pre>
           <pre name="f5c0" id="f5c0" class="graf graf--pre graf-after--pre">};</pre>
           <pre name="6700" id="6700" class="graf graf--pre graf-after--pre">// Call our search<br>var alignmentMap = search(seqSearch, seqGenome);</pre>
           <pre name="3f2e" id="3f2e" class="graf graf--pre graf-after--pre">// Map position values<br>alignmentMap = alignmentMap.map(function(value, index) {<br>  return {position: index - seqSearch.length, matches: value};<br>});</pre>
           <pre name="d517" id="d517" class="graf graf--pre graf-after--pre">// Sort position values<br>alignmentMap.sort(function(a, b) {<br>   return a.matches - b.matches;<br>});</pre>
           <p name="7b87" id="7b87" class="graf graf--p graf-after--pre">This is dead simple. Looking at aggregating and sorting the results, our <em class="markup--em markup--p-em">map</em> call will run in <em class="markup--em markup--p-em">O(n)</em> and our <em class="markup--em markup--p-em">sort</em> call (with a quicksort implementation) should run with an average time complexity of <em class="markup--em markup--p-em">O(n log n)</em>. However, since we have a nested loop comparing every nucleotide of <em class="markup--em markup--p-em">seqSearch</em> with <em class="markup--em markup--p-em">seqGenome</em>, we’re going to run into a time complexity of <em class="markup--em markup--p-em">O(n²) </em>for our <em class="markup--em markup--p-em">search </em>call— yikes!</p>
           <p name="d95f" id="d95f" class="graf graf--p graf-after--p">Let’s take a break right here?—?the following algorithm makes no attempt to achieve better performance in terms of <em class="markup--em markup--p-em">time complexity</em>. It still runs in <em class="markup--em markup--p-em">O(n²)</em>. However, knowing that this is a bottleneck of such exhaustive sequence comparisons, we can try to optimize this simple search algorithm to be as performant as possible.</p>
           <h3 name="27cb" id="27cb" class="graf graf--h3 graf-after--p">Initial Implementation Issues</h3>
           <p name="31da" id="31da" class="graf graf--p graf-after--h3">The first problem with the above implementation is that it does not match <em class="markup--em markup--p-em">degenerate</em> nucleotides. For example, if <em class="markup--em markup--p-em">seqSearch</em> contains “W” (which should match “A” or “T”), it will only accurately increase the match counter if <em class="markup--em markup--p-em">seqGenome</em> contains a “W” as well. No good!</p>
           <p name="b590" id="b590" class="graf graf--p graf-after--p">The second problem (and it relates to the first) is our conditional statement. Normally, branch prediction (to learn more, read <a href="http://stackoverflow.com/a/11227902" data-href="http://stackoverflow.com/a/11227902" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">my favorite Stack Overflow answer of all time</a>) would try to speed this up for us:</p>
           <pre name="d4af" id="d4af" class="graf graf--pre graf-after--p">if (curChar === seqGenome[i]) {<br>  ++map[offset + i];<br>}</pre>
           <p name="4dc0" id="4dc0" class="graf graf--p graf-after--pre">If there are no matches in the entire sequence (let’s say all <em class="markup--em markup--p-em">A</em>s versus all <em class="markup--em markup--p-em">T</em>s), you have the potential for a branch predictor to guess that it can skip the command contained within every time, it will always be right, and voila?—?you’ll run very quickly! (The benchmarks for <a href="https://github.com/keithwhor/NtSeq" data-href="https://github.com/keithwhor/NtSeq" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">NtSeq</a> actually show this result for cases of 0% identity between sequences. Neat!)</p>
           <p name="e465" id="e465" class="graf graf--p graf-after--p">However, in the case of genomic data, matches are (more or less) randomly distributed, meaning a branch predictor is going to perform very poorly (and always check the conditional statement).</p>
           <p name="042a" id="042a" class="graf graf--p graf-after--p">These conditional checks take time. You’re doing string / array accession and character comparison for every single nucleotide in both <em class="markup--em markup--p-em">seqSearch</em> and <em class="markup--em markup--p-em">seqGenome</em>.</p>
           <p name="3e74" id="3e74" class="graf graf--p graf-after--p">What if there were a way to A) match degenerate nucleotides adequately and B) match and count <em class="markup--em markup--p-em">multiple</em> nucleotides in a sequence at once instead of one at a time?</p>
           <p name="8efd" id="8efd" class="graf graf--p graf-after--p">It turns out there’s a way to do both, and JavaScript is very good at it!</p>
           <h3 name="afe3" id="afe3" class="graf graf--h3 graf-after--p">Storing Sequence Information Using Binary&nbsp;Data</h3>
           <p name="cfe8" id="cfe8" class="graf graf--p graf-after--h3">What if instead of using <em class="markup--em markup--p-em">strings</em> to compare sequence data, we used <em class="markup--em markup--p-em">integers</em>?</p>
           <p name="caff" id="caff" class="graf graf--p graf-after--p">First of all, why would we do that?</p>
           <p name="23b6" id="23b6" class="graf graf--p graf-after--p">Let’s start with a quick rundown of integers. All integers in JavaScript are signed 32-bit integers. This means they have 1 sign bit and 31 bits containing the information about the number.</p>
           <p name="2cc4" id="2cc4" class="graf graf--p graf-after--p">1 represented in binary as a 32-bit integer is:</p>
           <pre name="0c11" id="0c11" class="graf graf--pre graf-after--p">00000000 00000000 00000000 00000001</pre>
           <p name="6ed2" id="6ed2" class="graf graf--p graf-after--pre">I’ve separated the bytes of the 32-bit integer here for readability. As a refresher, every time you set an integer value in JavaScript (i.e. var a = 1;), you’re actually allocating <strong class="markup--strong markup--p-strong">4 bytes</strong> (<strong class="markup--strong markup--p-strong">32-bits)</strong> of memory.</p>
           <p name="e19f" id="e19f" class="graf graf--p graf-after--p">Well, neat. It turns out we can use this property of integers to store <strong class="markup--strong markup--p-strong">eight</strong> degenerate nucleotide values in <strong class="markup--strong markup--p-strong">one</strong> integer.</p>
           <p name="6fa3" id="6fa3" class="graf graf--p graf-after--p">How, you ask? Remember that for degenerate nucleotides, there are 16 possible symbols (including “no match”). This is, conveniently, 2? different possibilities and can thus be represented using only four bits of data. We can now create some semantics for how to read these four bits of data and interpret them as nucleotides (or degenerate versions of such).</p>
           <p name="d8b1" id="d8b1" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">1000</strong> is A (8)<br><strong class="markup--strong markup--p-strong">0100</strong> is T (4)<br><strong class="markup--strong markup--p-strong">0010</strong> is G (2)<br><strong class="markup--strong markup--p-strong">0001</strong> is C (1)</p>
           <p name="93e7" id="93e7" class="graf graf--p graf-after--p">This allows us to do some wonderful things!</p>
           <p name="a89d" id="a89d" class="graf graf--p graf-after--p">To get the values of degenerate nucleotides:<br>W = (A | T) = (1000 | 0100) = 1100<br>N = (A | T | G | C) = (1000 | 0100 | 0010 | 0001) = 1111</p>
           <p name="c13f" id="c13f" class="graf graf--p graf-after--p">To match nucleotides:<br>A &amp; A = (1000 &amp; 1000) = 1000<br>A &amp; W = (1000 &amp; 1100) = 1000<br>A &amp; T = (1000 &amp; 0100) = 0000</p>
           <p name="cf29" id="cf29" class="graf graf--p graf-after--p">And so on! If you’re confused, please check up on <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" data-href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">Bitwise Operators</a> before reading further. You should at least understand <strong class="markup--strong markup--p-strong">OR (|)</strong>, <strong class="markup--strong markup--p-strong">AND (&amp;)</strong>, <strong class="markup--strong markup--p-strong">UNSIGNED BITSHIFT RIGHT (&gt;&gt;&gt;)</strong> and <strong class="markup--strong markup--p-strong">BITSHIFT LEFT (&lt;&lt;)</strong>.</p>
           <p name="2f9e" id="2f9e" class="graf graf--p graf-after--p">Now that we have all our potential nucleotide symbols stored in four bits of data, we can lump strings of eight nucleotides into one 32-bit integer (32 / 4 = 8). “ATGCATGC” becomes 1000 0100 0010 0001 1000 0100 0010 0001, for example.</p>
           <h3 name="984f" id="984f" class="graf graf--h3 graf-after--p">… Introducing ArrayBuffers!</h3>
           <p name="cbef" id="cbef" class="graf graf--p graf-after--h3">Luckily, JavaScript has a really, really easy way to deal with binary data. That’s using the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" data-href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">ArrayBuffer</a>. An ArrayBuffer is simply an array of bytes that can be interfaced with as (signed or unsigned) 8-bit, 16-bit or 32-bit integers using <em class="markup--em markup--p-em">Uint8Array, Uint16Array</em> and <em class="markup--em markup--p-em">Uint32Array</em>. For simplicity sake I’m not using signed integers in these examples?—?the “U” preceding the interface names means “unsigned.”</p>
           <p name="e661" id="e661" class="graf graf--p graf-after--p">Keep in mind that you can only modify ArrayBuffers using <em class="markup--em markup--p-em">views</em>, or the <em class="markup--em markup--p-em">Uint8Array</em> (etc.) data types. Instantiating a new data view on an ArrayBuffer will not change the underlying data, merely how it is presented. This means we can set the values of an ArrayBuffer using a Uint8Array and convert it to a Uint32Array by simply instantiating a new view on the underlying buffer.</p>
           <p name="11f0" id="11f0" class="graf graf--p graf-after--p">Reading our sequence data into an array of 32-bit integers can now be simplified:</p>
           <pre name="33e7" id="33e7" class="graf graf--pre graf-after--p">function convertSequenceToArrayOfIntegers(sequenceString) {</pre>
           <pre name="e136" id="e136" class="graf graf--pre graf-after--pre">  // two nucleotides per byte (4 bits each)<br>  var sequenceBytes = Math.ceil(sequenceString.length / 2);<br>  var sequenceBuffer = new ArrayBuffer(sequenceBytes);<br>  var uint8view = new Uint8Array(sequenceBuffer);</pre>
           <pre name="d6fc" id="d6fc" class="graf graf--pre graf-after--pre">  /*</pre>
           <pre name="53e5" id="53e5" class="graf graf--pre graf-after--pre">     lookupTable should be an object mapping each of the 16<br>     nucleotide characters to their respective 4-bit integer<br>     value.</pre>
           <pre name="c6a0" id="c6a0" class="graf graf--pre graf-after--pre">     The following would do this for string "AT"<br>     uint8view[i] starts as 0000 0000 (binary)<br>     uint8view[i] = (1000) &lt;&lt; 4 ("A" in binary bit shift left 4)<br>     uint8view[i] is now 1000 0000 (binary)<br>     uint8view[i] |= (0100) ("T" in binary)<br>     uint8view[i] is 1000 0000 and gets OR (|) with 0100,<br>       resulting in 1000 0100<br>     <br>   */</pre>
           <pre name="c1a3" id="c1a3" class="graf graf--pre graf-after--pre">  for (var i = 0, len = sequenceBuffer.length; i &lt; len; i++) {<br>    uint8view[i] = lookupTable[sequenceString[i * 2]] &lt;&lt; 4;<br>    uint8view[i] |= lookupTable[sequenceString[i * 2 + 1];<br>  }</pre>
           <pre name="056c" id="056c" class="graf graf--pre graf-after--pre">  // sequenceBuffer was modified by uint8view<br>  // you can now return it as an array of 32-bit ints<br>  <br>  return new Uint32Array(sequenceBuffer);</pre>
           <pre name="cb3f" id="cb3f" class="graf graf--pre graf-after--pre">}</pre>
           <p name="53fd" id="53fd" class="graf graf--p graf-after--pre">If we run this method on both of our input sequences, we’ll have transformed each of them into arrays of 32-bit integers. We can then use these arrays to perform some very quick nucleotide comparisons.</p>
           <h3 name="4e89" id="4e89" class="graf graf--h3 graf-after--p">Comparing Sequences Using Bitwise Operators</h3>
           <p name="246d" id="246d" class="graf graf--p graf-after--h3">Now, the fun stuff! Earlier on I mentioned that we can compare two 4-bit nucleotides for a match using the BIT AND (&amp;) operator.</p>
           <p name="c5b5" id="c5b5" class="graf graf--p graf-after--p">A &amp; A = (1000 &amp; 1000) = 1000, for example.</p>
           <p name="a156" id="a156" class="graf graf--p graf-after--p">In this case, any time you AND two matching nucleotides, you get a sequence of bits that contains <em class="markup--em markup--p-em">at least one 1</em>. When there’s no match, the sequence of four bits will <em class="markup--em markup--p-em">always be 0000</em>.</p>
           <p name="53c6" id="53c6" class="graf graf--p graf-after--p">The wonderful thing about bitwise operators is that (ideally, running on the processor level) they only take one processor cycle (your processor likely runs over <em class="markup--em markup--p-em">2 billion</em> cycles per second) and act on <em class="markup--em markup--p-em">an entire 32-bit register at once</em>. What does that mean? It means we can compare <em class="markup--em markup--p-em">eight degenerate nucleotides at a time </em>when they’re stored as 32-bit integers, and it only takes <em class="markup--em markup--p-em">a fraction of a nanosecond</em>.</p>
           <p name="4f77" id="4f77" class="graf graf--p graf--startsWithDoubleQuote graf-after--p">“ATGCATGW &amp; ATATWWNN” would become:</p>
           <pre name="c62e" id="c62e" class="graf graf--pre graf-after--p">1000 0100 0010 0001 1000 0100 0010 1100 &amp;<br>1000 0100 1000 0100 1100 1100 1111 1111<br>=======================================<br>1000 0100 0000 0000 1000 0100 0010 1100</pre>
           <p name="d1ca" id="d1ca" class="graf graf--p graf-after--pre">Awesome! Now how do we count the number of matches in the resulting bit string efficiently?</p>
           <p name="6d03" id="6d03" class="graf graf--p graf-after--p">First, make note that: Comparing two degenerate nucleotides will result in a 4-bit sequence that contains more than one bit. This means we can’t simply count bits for a match. (W &amp; W = (1100 &amp; 1100) = 1100).</p>
           <p name="e301" id="e301" class="graf graf--p graf-after--p">However, <em class="markup--em markup--p-em">non-matching </em>nucleotides will <em class="markup--em markup--p-em">always</em> result in 0000.</p>
           <p name="ee6b" id="ee6b" class="graf graf--p graf-after--p">So what we can do is <em class="markup--em markup--p-em">collect a match flag</em> for every 4-bit sequence. We do this with UNSIGNED RIGHT BIT SHIFT (&gt;&gt;&gt;) and BIT OR (|). We can group every set of four-bits in their rightmost spot indicating a match or no match (whether it’s a 1 or a 0).</p>
           <pre name="f26d" id="f26d" class="graf graf--pre graf-after--p">// matches = 1000 0100 0000 0000 1000 0100 0010 1100 (binary)</pre>
           <pre name="c88f" id="c88f" class="graf graf--pre graf-after--pre">matches |= matches &gt;&gt;&gt; 1;</pre>
           <pre name="eb8c" id="eb8c" class="graf graf--pre graf-after--pre">/*<br>  1000 0100 0000 0000 1000 0100 0010 1100 (matches) |<br>  0100 0010 0000 0000 0100 0010 0001 0110 (matches &gt;&gt;&gt; 1)<br>  =======================================<br>  1100 0110 0000 0000 1100 0110 0011 1110<br>*/</pre>
           <pre name="7fad" id="7fad" class="graf graf--pre graf-after--pre">matches |= matches &gt;&gt;&gt; 2;</pre>
           <pre name="6183" id="6183" class="graf graf--pre graf-after--pre">/*<br>  1100 0110 0000 0000 1100 0110 0011 1110 (matches) |<br>  0011 0001 1000 0000 0011 0001 1000 1111 (matches &gt;&gt;&gt; 2)<br>  =======================================<br>  111<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 011<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 100<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">0</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">0</em></strong> 111<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 011<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 101<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 111<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong><br>*/</pre>
           <p name="db6a" id="db6a" class="graf graf--p graf-after--pre">You’ll notice that the value of matches, though modified (and looking nothing like our original integer!) now actually has only <em class="markup--em markup--p-em">eight important bits. </em>Those are the rightmost bits of each group of four. Every where there was a match there is a 1, and everywhere there was no match, there’s a 0.</p>
           <p name="ce2d" id="ce2d" class="graf graf--p graf-after--p">We can clear out the unneeded bits with a simple &amp; with the hex flag 0x11111111. (0001 0001 0001 0001 0001 0001 0001 0001).</p>
           <pre name="8bd8" id="8bd8" class="graf graf--pre graf-after--p">matches &amp;= 0x11111111;</pre>
           <pre name="3bcd" id="3bcd" class="graf graf--pre graf-after--pre">/*<br>  111<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 011<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 100<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">0</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">0</em></strong> 111<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 011<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 101<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 111<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> (matches) &amp;<br>  0001 0001 0001 0001 0001 0001 0001 0001<br>  =======================================<br>  0001 0001 0000 0000 0001 0001 0001 0001<br>*/</pre>
           <p name="6ad7" id="6ad7" class="graf graf--p graf-after--pre">Beautiful! Now it comes down to counting the number of <strong class="markup--strong markup--p-strong">1</strong>-bits in the bitstring.</p>
           <p name="b542" id="b542" class="graf graf--p graf-after--p">There are a number of ways to do this. One <a href="http://www.dotnetperls.com/bitcount" data-href="http://www.dotnetperls.com/bitcount" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">is an algorithm that runs in <em class="markup--em markup--p-em">O(n)</em></a><em class="markup--em markup--p-em">:</em></p>
           <pre name="10d1" id="10d1" class="graf graf--pre graf-after--p">function countBits(n) {<br>  var count = 0;<br>  	while (n !== 0) {<br>  	  count++;<br>  	  n &amp;= (n - 1);<br>  	}<br>  	return count;<br>}</pre>
           <p name="91ac" id="91ac" class="graf graf--p graf-after--pre">There’s also the <a href="http://en.wikipedia.org/wiki/Hamming_weight" data-href="http://en.wikipedia.org/wiki/Hamming_weight" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">Hamming weight</a> algorithm <a href="http://stackoverflow.com/a/109025" data-href="http://stackoverflow.com/a/109025" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">referenced on another beautiful StackOverflow answer</a> that runs in <em class="markup--em markup--p-em">O(1)</em>:</p>
           <pre name="838e" id="838e" class="graf graf--pre graf-after--p">function countBits(n) {<br>  n = n - ((n &gt;&gt; 1) &amp; 0x55555555);<br>  n = (n &amp; 0x33333333) + ((n &gt;&gt; 2) &amp; 0x33333333);<br>  return (((n + (n &gt;&gt; 4)) &amp; 0x0F0F0F0F) * 0x01010101) &gt;&gt; 24;<br>}</pre>
           <p name="5de8" id="5de8" class="graf graf--p graf-after--pre">Aha! <em class="markup--em markup--p-em">O(1)</em>! Must be better! The big problem we encounter, however, is that our bit count in our actual integer is relatively <em class="markup--em markup--p-em">sparse</em>.</p>
           <p name="ffeb" id="ffeb" class="graf graf--p graf-after--p">We only have a maximum of <em class="markup--em markup--p-em">eight</em> bits that could be counted. This means our <em class="markup--em markup--p-em">O(n)</em> solution will take a <em class="markup--em markup--p-em">maximum</em> of about 32 processor cycles (conditional check, increment, bit AND, subtraction?—?all multiplied by 8 is 32) and <em class="markup--em markup--p-em">minimum</em> of 0 cycles<em class="markup--em markup--p-em">, </em>whereas our <em class="markup--em markup--p-em">O(1)</em> Hamming Weight solution always takes around 14 processor cycles based on the number of operations (rough count, correct me if I’m wrong).</p>
           <p name="3fbb" id="3fbb" class="graf graf--p graf-after--p">Now to our actual data?—?in two randomly distributed sequences of DNA, you’re only likely to encounter a match 25% of the time, meaning our <em class="markup--em markup--p-em">O(n)</em> solution will average 8 processor cycles when confronted with real data. This will outperform Hamming Weight.</p>
           <p name="31fe" id="31fe" class="graf graf--p graf-after--p">Cool, so we’ll use that, right?</p>
           <p name="20ad" id="20ad" class="graf graf--p graf-after--p">Not so fast! Turns out there’s a better <em class="markup--em markup--p-em">O(1)</em> solution than Hamming Weight. You can use a lookup table (as an array) to count bits in a bitstring. LookupBits[0] would be 0, LookupBits[1] would be 1, LookupBits[2] would be 1, LookupBits[3] would be 2… etc. The problem with this solution is that it takes a ton of memory. There are 4,294,967,295 different unsigned 32-bit integers, each containing a value in the lookup table between 0 and 32 (up to 3 bytes!) meaning the lookup table would be 12GB in size. Ugh.</p>
           <ol class="postList">
            <li name="15e9" id="15e9" class="graf graf--li graf-after--p">You probably don’t have 12GB of memory to allocate</li>
            <li name="e722" id="e722" class="graf graf--li graf-after--li">Even if you did, a lookup table this size is unmanageable. Cache misses will slow down your process to a screeching halt.</li>
           </ol>
           <p name="a2a2" id="a2a2" class="graf graf--p graf-after--li">So how is this usable? Well, we know we only actually have <em class="markup--em markup--p-em">eight important bits</em>. Let’s look at our resultant bit string again:</p>
           <pre name="b334" id="b334" class="graf graf--pre graf-after--p">0001 0001 0000 0000 0001 0001 0001 0001</pre>
           <p name="6d32" id="6d32" class="graf graf--p graf-after--pre">Every important bit is contained in the rightmost grouping of every four bits. There are only <em class="markup--em markup--p-em">eight</em> of them, too. Meaning there’s only actually <em class="markup--em markup--p-em">one byte</em> of relevant data and 256 possible combinations of results. Turns out we can use bit shifts again to aggregate our data to the rightmost byte!</p>
           <pre name="f54c" id="f54c" class="graf graf--pre graf-after--p">// matches = 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">0</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">0</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong></pre>
           <pre name="c578" id="c578" class="graf graf--pre graf-after--pre">matches |= matches &gt;&gt;&gt; 3;</pre>
           <pre name="0cba" id="0cba" class="graf graf--pre graf-after--pre">/*<br>  0001 0001 0000 0000 0001 0001 0001 0001 (matches) |<br>  0000 0010 0010 0000 0000 0010 0010 0010 (matches &gt;&gt;&gt; 3)<br>  =======================================<br>  0001 0011 0010 0000 0001 0011 0011 0011<br>*/</pre>
           <pre name="25c7" id="25c7" class="graf graf--pre graf-after--pre">matches |= matches &gt;&gt;&gt; 6;</pre>
           <pre name="ade9" id="ade9" class="graf graf--pre graf-after--pre">/*<br>  0001 0011 0010 0000 0001 0011 0011 0011 (matches) |<br>  0000 0000 0100 1100 1000 0000 0100 1100 (matches &gt;&gt;&gt; 6)<br>  =======================================<br>  0001 0011 0110 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1100</em></strong> 1001 0011 0111 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1111</em></strong><br>*/</pre>
           <p name="7a82" id="7a82" class="graf graf--p graf-after--pre">You’ll notice the variable storing our match data, though looking much different again indeed, has now aggregated match data to the rightmost four bits of each set of 16 bits.</p>
           <pre name="63bc" id="63bc" class="graf graf--pre graf-after--p">000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">0</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">0</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong> 000<strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1</em></strong></pre>
           <p name="4d7c" id="4d7c" class="graf graf--p graf-after--pre">has become:</p>
           <pre name="7471" id="7471" class="graf graf--pre graf-after--p">0001 0011 0110 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1100</em></strong> 1001 0011 0111 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1111</em></strong></pre>
           <p name="d8bf" id="d8bf" class="graf graf--p graf-after--pre">We can now shift <strong class="markup--strong markup--p-strong">1100</strong> over 12 bits, clear out the unimportant bits, and BIT OR (|) it with <strong class="markup--strong markup--p-strong">1111</strong> on the right:</p>
           <pre name="bb8e" id="bb8e" class="graf graf--pre graf-after--p">matches = ((matches &gt;&gt;&gt; 12) &amp; 0xF0) | (matches &amp; 0xF)</pre>
           <pre name="d1fd" id="d1fd" class="graf graf--pre graf-after--pre">/*<br>  First:<br>  0000 0000 0000 0001 0011 0110 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1100</em></strong> 1001 (matches &gt;&gt;&gt; 12) &amp;<br>  0000 0000 0000 0000 0000 0000 1111 0000 (0xF0)<br>  =======================================<br>  0000 0000 0000 0000 0000 0000 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1100</em></strong> 0000<br>  <br>  Then:<br>  0001 0011 0110 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1100</em></strong> 1001 0011 0111 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1111 </em></strong>(matches) &amp;<br>  0000 0000 0000 0000 0000 0000 0000 1111 (0xF)<br>  =======================================<br>  0000 0000 0000 0000 0000 0000 0000 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1111</em></strong></pre>
           <pre name="0f66" id="0f66" class="graf graf--pre graf-after--pre">  Finally:<br>  0000 0000 0000 0000 0000 0000 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1100</em></strong> 0000 |<br>  0000 0000 0000 0000 0000 0000 0000 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1111</em></strong><br>  =======================================<br>  0000 0000 0000 0000 0000 0000 <strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">1100 1111<br>*/</em></strong></pre>
           <p name="93e4" id="93e4" class="graf graf--p graf-after--pre">Awesome! We now have all of our match data in the rightmost byte, and can check it in a lookup table that only has 256 entries! (Phew! You can pre-generate this lookup table as a Uint8Array when your program loads using either Hamming Weight or our sparse bitcount example above.)</p>
           <pre name="27f1" id="27f1" class="graf graf--pre graf-after--p">return bitCountLookup[matches];</pre>
           <p name="2f0a" id="2f0a" class="graf graf--p graf-after--pre">Great, now we can count matches of nucleotides eight comparisons at a time. All that’s left to do is rewrite our initial <em class="markup--em markup--p-em">search</em> function.</p>
           <h3 name="11de" id="11de" class="graf graf--h3 graf-after--p">Final Implementation</h3>
           <p name="25f3" id="25f3" class="graf graf--p graf-after--h3">If you’ve been following through so far, we can now go back to our first string comparison implementation but replace our conditional check with some bit operations to run the full algorithm. I won’t go through the full explanation, but for every set of two integers we have to make sure we “walk” the integers over each other (bit shifting left and right appropriately) to make sure we catch the potential matches at every position, and store the matches relative to the offset.</p>
           <p name="c554" id="c554" class="graf graf--p graf-after--p">The following code is the full excerpt from the <strong class="markup--strong markup--p-strong">NtSeq.MatchMap</strong> in my <a href="https://github.com/keithwhor/NtSeq" data-href="https://github.com/keithwhor/NtSeq" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">NtSeq Library</a>. I’ve commented parts that may be confusing. The wording and variables names are a bit different than above.</p>
           <pre name="cc88" id="cc88" class="graf graf--pre graf-after--p">MatchMap.prototype.__countMatches = function(int, bitCount) {<br>  int |= int &gt;&gt;&gt; 1;<br>  int |= int &gt;&gt;&gt; 2;<br>  int &amp;= 0x11111111;<br>  int |= int &gt;&gt;&gt; 3;<br>  int |= int &gt;&gt;&gt; 6;<br>  return bitCount[((int &gt;&gt;&gt; 12) &amp; 0xF0) | (int &amp; 0xF)];<br>};</pre>
           <pre name="1342" id="1342" class="graf graf--pre graf-after--pre">MatchMap.prototype.__execute = function(queryBuffer, searchSpaceBuffer) {<br>  <br>  var queryInts, spaceInts, queryIntsLength, spaceIntsLength, arrLen, mapBuffer, mapArray, A, B, A1, A2, T, cur, pos, move, i, k, adjustNeg, adjustPos, fnCountMatches, bitCount;<br>  <br>  queryInts = new Uint32Array(queryBuffer, 4);<br>  spaceInts = new Uint32Array(searchSpaceBuffer, 4);<br>  fnCountMatches = this.__countMatches;<br>  bitCount = __bitCount;</pre>
           <pre name="1f1f" id="1f1f" class="graf graf--pre graf-after--pre">  queryIntsLength = queryInts.length|0;<br>  spaceIntsLength = spaceInts.length|0;<br>  arrLen = (queryIntsLength + spaceIntsLength) &lt;&lt; 3;<br>  mapBuffer = new ArrayBuffer(4 * arrLen);<br>  mapArray = new Uint32Array(mapBuffer);</pre>
           <pre name="de9d" id="de9d" class="graf graf--pre graf-after--pre">  for (k = 0|0; k &lt; queryIntsLength; k++) {</pre>
           <pre name="09ca" id="09ca" class="graf graf--pre graf-after--pre">    A = queryInts[k];</pre>
           <pre name="846f" id="846f" class="graf graf--pre graf-after--pre">    // set offset, x &lt;&lt; 3 is shorthand for x * 8<br>    // because there are 8 nucleotides per int</pre>
           <pre name="4a8c" id="4a8c" class="graf graf--pre graf-after--pre">    cur = (queryIntsLength — k) &lt;&lt; 3;</pre>
           <pre name="7399" id="7399" class="graf graf--pre graf-after--pre">    for (i = 0|0; i &lt; spaceIntsLength; i++) {</pre>
           <pre name="500d" id="500d" class="graf graf--pre graf-after--pre">      // if match without shifting is non-zero, count matches</pre>
           <pre name="5220" id="5220" class="graf graf--pre graf-after--pre">      (T = A &amp; spaceInts[i]) &amp;&amp;<br>        (mapArray[(i &lt;&lt; 3) + cur] += fnCountMatches(T, bitCount));<br>    }</pre>
           <pre name="0a2e" id="0a2e" class="graf graf--pre graf-after--pre">    // start walking "A" along searchSpace (seqGenome) by<br>    // bitshifting left and right, adjust offsets accordingly</pre>
           <pre name="e472" id="e472" class="graf graf--pre graf-after--pre">    A1 = A &gt;&gt;&gt; 4;<br>    A2 = A &lt;&lt; 4;</pre>
           <pre name="d8a8" id="d8a8" class="graf graf--pre graf-after--pre">    adjustNeg = cur — 1;<br>    adjustPos = cur + 1;</pre>
           <pre name="c301" id="c301" class="graf graf--pre graf-after--pre">    // break loop if A1 and A2 have been shifted far enough<br>    // to zero them both out</pre>
           <pre name="4709" id="4709" class="graf graf--pre graf-after--pre">    while(A1 || A2) {</pre>
           <pre name="2b40" id="2b40" class="graf graf--pre graf-after--pre">      for (i = 0|0; i &lt; spaceIntsLength; i++) {<br>        B = spaceInts[i];<br>        pos = (i &lt;&lt; 3); // === i * 8</pre>
           <pre name="ba3a" id="ba3a" class="graf graf--pre graf-after--pre">        // if the match result is non-zero, count matches.</pre>
           <pre name="4b26" id="4b26" class="graf graf--pre graf-after--pre">        (T = A1 &amp; B) &amp;&amp;<br>          (mapArray[pos + adjustNeg] += fnCountMatches(T, bitCount));<br>        (T = A2 &amp; B) &amp;&amp;<br>          (mapArray[pos + adjustPos] += fnCountMatches(T, bitCount));<br>      }<br>      <br>      // keep "walking" / shifting current integer to each offset</pre>
           <pre name="f598" id="f598" class="graf graf--pre graf-after--pre">      A1 &gt;&gt;&gt;= 4;<br>      A2 &lt;&lt;= 4;<br>      --adjustNeg;<br>      ++adjustPos;</pre>
           <pre name="ff89" id="ff89" class="graf graf--pre graf-after--pre">    }<br>  }<br>  <br>  // return our buffer, we can instantiate a Uint32Array<br>  // on it if we wish<br>  <br>  return mapBuffer;</pre>
           <pre name="377a" id="377a" class="graf graf--pre graf-after--pre">};</pre>
           <p name="3a6d" id="3a6d" class="graf graf--p graf-after--pre">Now we’ve gotten somewhere. ?</p>
           <h3 name="760b" id="760b" class="graf graf--h3 graf-after--p">Benchmarks</h3>
           <p name="1e0f" id="1e0f" class="graf graf--p graf-after--h3">So how does this actually perform? Turns out pretty well. While it has the same time complexity, it runs 6–7x faster than the “simple” implementation. Here’s some data taken February 7th, 2015:</p>
           <pre name="4750" id="4750" class="graf graf--pre graf-after--p">Benchmark         |  naive | search |   naiveScore |  searchScore<br>------------------------------------------------------------------<br>1,000,000, 0%     |    9ms |    3ms |    9.00ns/nt |    3.00ns/nt<br>10,000,000, 0%    |   63ms |    5ms |    6.30ns/nt |    0.50ns/nt<br>100,000,000, 0%   |  621ms |   60ms |    6.21ns/nt |    0.60ns/nt<br>1,000,000, 25%    |   15ms |    6ms |   15.00ns/nt |    6.00ns/nt<br>10,000,000, 25%   |  124ms |   17ms |   12.40ns/nt |    1.70ns/nt<br>100,000,000, 25%  | 1249ms |  233ms |   12.49ns/nt |    2.33ns/nt<br>1,000,000, 50%    |   15ms |    2ms |   15.00ns/nt |    2.00ns/nt<br>10,000,000, 50%   |  131ms |   20ms |   13.10ns/nt |    2.00ns/nt<br>100,000,000, 50%  | 1305ms |  234ms |   13.05ns/nt |    2.34ns/nt<br>1,000,000, 100%   |   14ms |    2ms |   14.00ns/nt |    2.00ns/nt<br>10,000,000, 100%  |  144ms |   18ms |   14.40ns/nt |    1.80ns/nt<br>100,000,000, 100% | 1471ms |  240ms |   14.71ns/nt |    2.40ns/nt</pre>
           <p name="8ca5" id="8ca5" class="graf graf--p graf--startsWithDoubleQuote graf-after--pre">“naive” represents the first version of the alignment algorithm listed here (basic string comparison), and “search” represent the full implementation using bitwise operators. The score is measured in nanoseconds per nucleotide comparison, and was performed on a 2.4GHz processor.</p>
           <p name="b147" id="b147" class="graf graf--p graf-after--p">The trial titles represent total search space (seqSearch length multiplied by seqGenome length) and average sequence identity (match) between the two sequences.</p>
           <h3 name="a5c0" id="a5c0" class="graf graf--h3 graf-after--p">Conclusions</h3>
           <p name="473f" id="473f" class="graf graf--p graf-after--h3">Well, JavaScript performs this optimized bit op algorithm pretty quickly.</p>
           <p name="5f3c" id="5f3c" class="graf graf--p graf-after--p">As mentioned, the V8 engine in node.js averages about 5 processor cycles per nucleotide comparison (including accession, storage, aggregation of data) which is about as “close to the metal” as you can get.</p>
           <p name="1740" id="1740" class="graf graf--p graf-after--p">Personally, I think it’s time we start taking a look at using JavaScript more seriously as a “heavy-lifting” language. The V8 team at Google has done a fantastic job at making their JavaScript engine performant. As far as scientific computing is concerned, the potential is there. JavaScript is extremely accessible (requiring only a browser and text editor to execute) and can be introduced to young scientists and bioinformaticians easily. There are also arguments to be made for scaling node processes, but that can be saved for another day.</p>
           <p name="96d1" id="96d1" class="graf graf--p graf-after--p">Finally, the NBEAM algorithm as described here, though implemented in JavaScript, is actually language-agnostic. Please feel free to modify it to suit your needs (I’d be interested to see GPU implementations!), but credit is always appreciated. If anybody can aid in verifying the novelty of NBEAM and would like to help get it published, don’t hesitate to reach out!</p>
           <p name="1fa2" id="1fa2" class="graf graf--p graf-after--p">As a final reminder, the NtSeq JavaScript library and full implementation of the NBEAM algorithm is available at <a href="https://github.com/keithwhor/NtSeq" data-href="https://github.com/keithwhor/NtSeq" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">https://github.com/keithwhor/NtSeq</a>.</p>
           <h3 name="0e01" id="0e01" class="graf graf--h3 graf-after--p">Contact</h3>
           <p name="86ba" id="86ba" class="graf graf--p graf-after--h3">You can visit my personal website at <a href="http://keithwhor.com/" data-href="http://keithwhor.com/" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">keithwhor.com</a>, follow me on twitter <a href="http://twitter.com/keithwhor" data-href="http://twitter.com/keithwhor" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">@keithwhor</a>, <a href="http://github.com/keithwhor" data-href="http://github.com/keithwhor" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">visit my github</a> or just shout out “hi” if you happen to see me walking the streets of San Francisco.</p>
           <p name="4bf9" id="4bf9" class="graf graf--p graf-after--p graf--trailing">Thanks for the read!</p>
          </div>
         </div>
        </section>
       </div>
       <footer class="u-paddingTop10">
        <div class="container u-maxWidth740">
         <div class="row">
          <div class="col u-size12of12"></div>
         </div>
         <div class="row">
          <div class="col u-size12of12 js-postTags">
           <div class="u-paddingBottom10">
            <ul class="tags tags--postTags tags--borderless">
             <li><a class="link u-baseColor--link" href="https://medium.com/tag/javascript?source=post" data-action-source="post">JavaScript</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.com/tag/algorithms?source=post" data-action-source="post">Algorithms</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.com/tag/dna?source=post" data-action-source="post">Dna</a></li>
            </ul>
           </div>
          </div>
         </div>
         <section class="uiScale uiScale-ui--small uiScale-caption--regular u-paddingTop20 u-borderTopLightest u-marginTop10">
          <div class="ui-heading u-textColorDarker u-fontSize22 u-marginBottom5">
           Show your support
          </div>
          <p class="ui-body u-marginBottom20 u-textColorDark u-fontSize16">Clapping shows how much you appreciated Keith Horwood’s story.</p>
         </section>
         <div class="postActions u-flexCenter js-postActionsFooter">
          <div class="u-flex1">
           <div class="multirecommend js-actionMultirecommend u-flexCenter u-width60" data-post-id="c199e936da" data-is-icon-29px="true" data-is-circle="true" data-has-recommend-list="true" data-source="post_actions_footer-----c199e936da---------------------clap_footer">
            <div class="u-relative u-foreground">
             <button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal" data-action="sign-up-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/c199e936da" data-action-source="post_actions_footer-----c199e936da---------------------clap_footer" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0">
                <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
                 <path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd" />
                </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0">
                <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
                 <g fill-rule="evenodd">
                  <path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z" />
                  <path d="M13.285.48l-1.916.881 2.37 2.837z" />
                  <path d="M21.719 1.361L19.79.501l-.44 3.697z" />
                  <path d="M16.502 3.298L15.481 0h2.043z" />
                 </g>
                </svg></span></span></button>
             <div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;">
              <button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight" data-action="multivote-undo" data-action-value="c199e936da"><span class="svgIcon svgIcon--removeThin svgIcon--29px">
                <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
                 <path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd" />
                </svg></span></button>
             </div>
            </div>
            <span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-marginLeft10"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton" data-action="show-recommends" data-action-value="c199e936da">68</button></span>
           </div>
          </div>
          <div class="u-flex0 buttonSet buttonSet--narrow">
           <div class="buttonSet-inner">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" data-action="scroll-to-responses" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--response svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M21.27 20.058c1.89-1.826 2.754-4.17 2.754-6.674C24.024 8.21 19.67 4 14.1 4 8.53 4 4 8.21 4 13.384c0 5.175 4.53 9.385 10.1 9.385 1.007 0 2-.14 2.95-.41.285.25.592.49.918.7 1.306.87 2.716 1.31 4.19 1.31.276-.01.494-.14.6-.36a.625.625 0 0 0-.052-.65c-.61-.84-1.042-1.71-1.282-2.58a5.417 5.417 0 0 1-.154-.75zm-3.85 1.324l-.083-.28-.388.12a9.72 9.72 0 0 1-2.85.424c-4.96 0-8.99-3.706-8.99-8.262 0-4.556 4.03-8.263 8.99-8.263 4.95 0 8.77 3.71 8.77 8.27 0 2.25-.75 4.35-2.5 5.92l-.24.21v.32c0 .07 0 .19.02.37.03.29.1.6.19.92.19.7.49 1.4.89 2.08-.93-.14-1.83-.49-2.67-1.06-.34-.22-.88-.48-1.16-.74z" />
              </svg></span></button>
            <button class="button button--chromeless u-baseColor--buttonNormal" data-action="scroll-to-responses">3</button>
           </div>
           <div class="buttonSet-inner u-xs-hide">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--twitter svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z" />
              </svg></span></button>
           </div>
           <div class="buttonSet-inner u-xs-hide">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--facebook svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4" />
              </svg></span></button>
           </div>
           <div class="buttonSet-inner u-xs-show">
            <button class="button button--large button--dark button--chromeless u-baseColor--buttonDark button--withIcon button--withSvgIcon js-shareStoryButton" title="Share this story on Twitter or Facebook" aria-label="Share this story on Twitter or Facebook" data-action="show-share-popover" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--share svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M20.385 8H19a.5.5 0 1 0 .011 1h1.39c.43 0 .84.168 1.14.473.31.305.48.71.48 1.142v10.77c0 .43-.17.837-.47 1.142-.3.305-.71.473-1.14.473H8.62c-.43 0-.84-.168-1.144-.473a1.603 1.603 0 0 1-.473-1.142v-10.77c0-.43.17-.837.48-1.142A1.599 1.599 0 0 1 8.62 9H10a.502.502 0 0 0 0-1H8.615c-.67 0-1.338.255-1.85.766-.51.51-.765 1.18-.765 1.85v10.77c0 .668.255 1.337.766 1.848.51.51 1.18.766 1.85.766h11.77c.668 0 1.337-.255 1.848-.766.51-.51.766-1.18.766-1.85v-10.77c0-.668-.255-1.337-.766-1.848A2.61 2.61 0 0 0 20.384 8zm-8.67-2.508L14 3.207v8.362c0 .27.224.5.5.5s.5-.23.5-.5V3.2l2.285 2.285a.49.49 0 0 0 .704-.001.511.511 0 0 0 0-.708l-3.14-3.14a.504.504 0 0 0-.71 0L11 4.776a.501.501 0 0 0 .71.706" fill-rule="evenodd" />
              </svg></span></button>
           </div>
          </div>
         </div>
        </div>
        <div class="u-maxWidth740 u-paddingTop20 u-marginTop20 u-borderTopLightest container u-paddingBottom20 u-xs-paddingBottom10 js-postAttributionFooterContainer">
         <div class="row js-postFooterInfo">
          <div class="col u-size12of12">
           <li class="uiScale uiScale-ui--small uiScale-caption--regular u-block u-paddingBottom18 js-cardUser">
            <div class="u-marginLeft20 u-floatRight">
             <span class="followState js-followState" data-user-id="29963203626"><button class="button button--small u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton" data-action="sign-up-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-redirect="https://medium.com/@keithwhor/nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da" data-action-source="footer_card"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton" data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/29963203626" data-action-source="footer_card-29963203626-------------------------follow_footer"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span>
            </div>
            <div class="u-tableCell">
             <a class="link avatar u-baseColor--link" href="https://medium.com/@keithwhor?source=footer_card" title="Go to the profile of Keith Horwood" aria-label="Go to the profile of Keith Horwood" data-action-source="footer_card" data-user-id="29963203626" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/120/120/0*wFS04iPrwoOkEPYH.png" class="avatar-image avatar-image--small" alt="Go to the profile of Keith Horwood"></a>
            </div>
            <div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15">
             <h3 class="ui-header u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal" href="https://medium.com/@keithwhor" property="cc:attributionName" title="Go to the profile of Keith Horwood" aria-label="Go to the profile of Keith Horwood" rel="author cc:attributionUrl" data-user-id="29963203626" dir="auto">Keith Horwood</a></h3>
             <p class="ui-body u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">Solving problems since 1988.</p>
            </div></li>
          </div>
         </div>
        </div>
        <div class="js-postFooterPlacements"></div>
        <div class="u-padding0 u-clearfix u-backgroundGrayLightest u-print-hide supplementalPostContent js-responsesWrapper"></div>
        <div class="supplementalPostContent js-heroPromo"></div>
       </footer>
      </article>
     </main>
     <div class="u-marginAuto u-maxWidth1000">
      <div class="js-postShareWidget u-foreground u-sm-hide u-transition--fadeOut300 u-fixed">
       <ul>
        <li class="u-textAlignCenter u-marginVertical10">
         <div class="multirecommend js-actionMultirecommend u-flexColumn u-marginBottom10 u-width60" data-post-id="c199e936da" data-is-icon-29px="true" data-is-vertical="true" data-is-circle="true" data-is-compressed="true" data-has-recommend-list="true" data-source="post_share_widget-----c199e936da---------------------clap_sidebar">
          <div class="u-relative u-foreground">
           <button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal" data-action="sign-up-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/c199e936da" data-action-source="post_share_widget-----c199e936da---------------------clap_sidebar" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0">
              <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
               <path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd" />
              </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0">
              <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
               <g fill-rule="evenodd">
                <path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z" />
                <path d="M13.285.48l-1.916.881 2.37 2.837z" />
                <path d="M21.719 1.361L19.79.501l-.44 3.697z" />
                <path d="M16.502 3.298L15.481 0h2.043z" />
               </g>
              </svg></span></span></button>
           <div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;">
            <button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight" data-action="multivote-undo" data-action-value="c199e936da"><span class="svgIcon svgIcon--removeThin svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd" />
              </svg></span></button>
           </div>
          </div>
          <span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-flexOrderNegative1 u-height20 u-marginBottom7"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton u-block u-marginAuto" data-action="show-recommends" data-action-value="c199e936da">68</button></span>
         </div></li>
        <li class="u-textAlignCenter u-marginVertical10"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_share_widget"><span class="svgIcon svgIcon--twitter svgIcon--29px">
           <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
            <path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z" />
           </svg></span></button></li>
        <li class="u-textAlignCenter u-marginVertical10"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_share_widget"><span class="svgIcon svgIcon--facebook svgIcon--29px">
           <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
            <path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4" />
           </svg></span></button></li>
        <li class="u-textAlignCenter u-marginVertical10"><button class="button button--large button--dark button--chromeless is-touchIconFadeInPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon button--bookmark js-bookmarkButton" title="Bookmark this story to read later" aria-label="Bookmark this story to read later" data-action="sign-up-prompt" data-sign-in-action="add-to-bookmarks" data-requires-token="true" data-redirect="https://medium.com/_/bookmark/p/c199e936da" data-action-source="post_share_widget-----c199e936da---------------------bookmark_sidebar"><span class="button-defaultState"><span class="svgIcon svgIcon--bookmark svgIcon--29px">
            <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
             <path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4zM21 23l-5.91-3.955-.148-.107a.751.751 0 0 0-.884 0l-.147.107L8 23V6.615C8 5.725 8.725 5 9.615 5h9.77C20.275 5 21 5.725 21 6.615V23z" fill-rule="evenodd" />
            </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--bookmarkFilled svgIcon--29px">
            <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
             <path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4z" fill-rule="evenodd" />
            </svg></span></span></button></li>
       </ul>
      </div>
     </div>
     <div class="u-fixed u-bottom0 u-sizeFullWidth u-backgroundWhite u-boxShadowTop u-borderBox u-paddingTop10 u-paddingBottom10 u-zIndexMetabar u-xs-paddingLeft10 u-xs-paddingRight10 js-stickyFooter">
      <div class="u-maxWidth700 u-marginAuto u-flexCenter">
       <div class="u-fontSize16 u-flex1 u-flexCenter">
        <div class="u-flex0 u-inlineBlock u-paddingRight20 u-xs-paddingRight10">
         <a class="link avatar u-inline u-baseColor--link" href="https://medium.com/@keithwhor" data-action="show-user-card" data-action-value="29963203626" data-action-type="hover" data-user-id="29963203626" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/80/80/0*wFS04iPrwoOkEPYH.png" class="avatar-image avatar-image--smaller" alt="Go to the profile of Keith Horwood"></a>
        </div>
        <div class="u-flex1 u-inlineBlock">
         <div class="u-xs-hide">
          Never miss a story from
          <strong> Keith Horwood</strong>, when you sign up for Medium. 
          <a class="link link--accent u-accentColor--textNormal u-accentColor--textDarken u-baseColor--link" href="https://medium.com/@Medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg" data-action-source="sticky_footer">Learn more</a>
         </div>
         <div class="u-xs-show">
          Never miss a story from
          <strong> Keith Horwood</strong>
         </div>
        </div>
       </div>
       <div class="u-marginLeft50 u-xs-marginAuto">
        <span class="followState js-followState" data-user-id="29963203626"><button class="button u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton u-uiTextSemibold u-textUppercase u-fontSize12" data-action="sign-up-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-redirect="https://medium.com/@keithwhor/nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da" data-action-source="sticky_footer"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary is-active u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton u-uiTextSemibold u-textUppercase u-fontSize12" data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/29963203626" data-action-source="sticky_footer-29963203626-------------------------follow_metabar"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Get updates</span></button></span>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <div class="loadingBar"></div>
  <script>// <![CDATA[
window["obvInit"] = function (opt_embedded) {window["obvInit"]["embedded"] = opt_embedded; window["obvInit"]["ready"] = true;}
// ]]></script>
  <script>// <![CDATA[
var GLOBALS = {"audioUrl":"https://d1fcbxp97j4nb2.cloudfront.net","baseUrl":"https://medium.com","buildLabel":"30975","currentUser":{"userId":"lo_d613bbd06ee0","isVerified":false,"subscriberEmail":"","hasPastMemberships":false,"isEnrolledInHightower":false,"isEligibleForHightower":false},"currentUserHasUnverifiedEmail":false,"isAuthenticated":false,"isCurrentUserVerified":false,"mediumTwitterScreenName":"medium","miroUrl":"https://cdn-images-1.medium.com","moduleUrls":{"base":"https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.pWubqzC7vUwGdzM3DrvA7A.js","common-async":"https://cdn-static-1.medium.com/_/fp/gen-js/main-common-async.bundle.PIiSUy8B5K9Dfs89lMMlbA.js","home-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-home-screens.bundle._uzwF5lj954yrdhE-RWUxQ.js","misc-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-misc-screens.bundle.RrSJyTbNLwVvpAPQSpeJqQ.js","notes":"https://cdn-static-1.medium.com/_/fp/gen-js/main-notes.bundle.hgzflAyf5RTxbMtgptZUJA.js","payments":"https://cdn-static-1.medium.com/_/fp/gen-js/main-payments.bundle.3t2g-KGDVa-lbItiQssElw.js","posters":"https://cdn-static-1.medium.com/_/fp/gen-js/main-posters.bundle.ltNm8ABnNREzi-CT0CbtEQ.js","pubs":"https://cdn-static-1.medium.com/_/fp/gen-js/main-pubs.bundle.J70OVnn7kgh-gghT5JB17w.js","stats":"https://cdn-static-1.medium.com/_/fp/gen-js/main-stats.bundle.6iZYpjm_fB_rRMZUH4eC4g.js"},"previewConfig":{"weightThreshold":1,"weightImageParagraph":0.51,"weightIframeParagraph":0.8,"weightTextParagraph":0.08,"weightEmptyParagraph":0,"weightP":0.003,"weightH":0.005,"weightBq":0.003,"minPTextLength":60,"truncateBoundaryChars":20,"detectTitle":true,"detectTitleLevThreshold":0.15},"productName":"Medium","supportsEdit":true,"termsUrl":"//medium.com/policy/9db0094a1e0f","textshotHost":"textshot.medium.com","transactionId":"1507423372872:414eec9b5364","useragent":{"browser":"chrome","family":"chrome","os":"windows","version":45,"supportsDesktopEdit":true,"supportsInteract":true,"supportsView":true,"isMobile":false,"isTablet":false,"isNative":false,"supportsFileAPI":true,"isTier1":true,"clientVersion":"","unknownParagraphsBad":false,"clientChannel":"","supportsRealScrollEvents":true,"supportsVhUnits":true,"ruinsViewportSections":false,"supportsHtml5Video":true,"supportsMagicUnderlines":true,"isWebView":false,"isFacebookWebView":false,"supportsProgressiveMedia":true,"supportsPromotedPosts":true,"isBot":false,"isNativeIphone":false,"supportsCssVariables":false,"supportsVideoSections":false,"emojiSupportLevel":1,"supportsScrollableMetabar":true},"variants":{"allow_access":true,"allow_signup":true,"allow_test_auth":"disallow","signin_services":"twitter,facebook,google,email,google-fastidv","signup_services":"twitter,facebook,google,email,google-fastidv","android_rating_prompt_recommend_threshold":5,"google_sign_in_android":true,"enable_onboarding":true,"ios_custom_miro_url":"https://cdn-images-1.medium.com","reengagement_notification_duration":3,"browsable_stream_config_bucket":"curated-topics","ios_small_post_preview_truncation_length":5.5,"ios_large_post_preview_truncation_length":5.5,"disable_ios_catalog_badging":true,"enable_series_creation":true,"enable_your_series_pages":true,"enable_productionized_series":true,"enable_dedicated_series_tab_api_ios":true,"enable_clap_milestone_notifications":true,"enable_series_stats_page":true,"enable_post_import":true,"enable_sponsored_post_labelling":true,"enable_logged_in_follow_on_collection_post":true,"retire_ranked_feed":true,"enable_export_members":true,"enable_series_card_background_creation":true,"available_membership_plans":"60e220181034","available_monthly_plan":"60e220181034","available_annual_plan":"2c754bcc2995","enable_sms":true,"enable_series_in_user_profiles":true,"enable_new_logged_out_bento_operation":true,"is_not_medium_subscriber":true,"subs_landing_copy_experiments":"long","logged_out_homepage_promo":"content","enable_dynamic_topic_windows":true,"enable_emoji_in_editor":true,"enable_glyph":true,"glyph_font_set":"m","enable_branding":true,"enable_upsell_tracking":true,"enable_nav_upsell":true,"enable_sequence_carousel":true,"enable_multirecommends":true,"enable_updated_homepage_order":true,"enable_auto_grid_on_new_from_your_network":true,"enable_unbundled_you_might_like":true,"enable_noteworthy_promo":true,"enable_interest_graph_vtwo_topic_suggestions":true,"enable_popchunks":true,"enable_clementine":true,"enable_hightower":true,"enable_user_post_metering":true,"max_premium_content_per_user_under_metering":3,"enable_welcome_email_v2":true,"enable_topic_writer_onboarding":true,"enable_hightower_onboarding_blinker":true,"enable_algolia_search_reporting":true,"enable_direct_signin":true,"enable_strong_graph_chp_reorder":true,"enable_post_page_cleanup":"remove_all_except_recirc"},"xsrfToken":"","iosAppId":"828256236","supportEmail":"yourfriends@medium.com","fp":{"/icons/monogram-mask.svg":"https://cdn-static-1.medium.com/_/fp/icons/monogram-mask.KPLCSFEZviQN0jQ7veN2RQ.svg","/icons/favicon-dev-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-dev-editor.YKKRxBO8EMvIqhyCwIiJeQ.ico","/icons/favicon-hatch-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-hatch-editor.BuEyHIqlyh2s_XEk4Rl32Q.ico","/icons/favicon-medium-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-medium-editor.PiakrZWB7Yb80quUVQWM6g.ico"},"authBaseUrl":"https://medium.com","imageUploadSizeMb":25,"isAuthDomainRequest":true,"algoliaApiEndpoint":"https://MQ57UUUQZ2-dsn.algolia.net","algoliaAppId":"MQ57UUUQZ2","algoliaSearchOnlyApiKey":"394474ced050e3911ae2249ecc774921","iosAppStoreUrl":"https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8","iosAppLinkBaseUrl":"medium:","algoliaIndexPrefix":"medium_","androidPlayStoreUrl":"https://play.google.com/store/apps/details?id=com.medium.reader","googleClientId":"216296035834-k1k6qe060s2tp2a2jam4ljdcms00sttg.apps.googleusercontent.com","androidPackage":"com.medium.reader","androidPlayStoreMarketScheme":"market://details?id=com.medium.reader","googleAuthUri":"https://accounts.google.com/o/oauth2/auth","androidScheme":"medium","layoutData":{"useDynamicScripts":false,"googleAnalyticsTrackingCode":"UA-24232453-2","jsShivUrl":"https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js","useDynamicCss":false,"faviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico","faviconImageId":"1*8I-HPL0bfoIzGied-dzOvA.png","fontSets":[{"id":8,"url":"https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m.css"},{"id":9,"url":"https://glyph.medium.com/css/mkt.css"}],"editorFaviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium-editor.3Y6xpZ-0FSdWDnPM3hSBIA.ico","glyphUrl":"https://glyph.medium.com"},"authBaseUrlRev":"moc.muidem//:sptth","isDnt":false,"stripePublishableKey":"pk_live_7FReX44VnNIInZwrIIx6ghjl","archiveUploadSizeMb":100,"paymentData":{"currencies":{"1":{"label":"US Dollar","external":"usd"}},"countries":{"1":{"label":"United States of America","external":"US"}},"accountTypes":{"1":{"label":"Individual","external":"individual"},"2":{"label":"Company","external":"company"}}},"previewConfig2":{"weightThreshold":1,"weightImageParagraph":0.05,"raiseImage":true,"enforceHeaderHierarchy":true,"isImageInsetRight":true},"isAmp":false,"iosScheme":"medium","isSwBoot":false,"lightstep":{"accessToken":"ce5be895bef60919541332990ac9fef2","carrier":"{\"ot-tracer-spanid\":\"0fd065c10d51a7e8\",\"ot-tracer-traceid\":\"03891e6d0b915f0b\",\"ot-tracer-sampled\":\"true\"}","host":"collector-medium.lightstep.com"},"facebook":{"key":"542599432471018","namespace":"medium-com","scope":{"default":["public_profile","email","user_friends"],"connect":["public_profile","email","user_friends"],"login":["public_profile","email","user_friends"],"share":["public_profile","email","user_friends","publish_actions"]}},"mailingListArchiveUploadSizeMb":2,"availableMembershipPlans":["60e220181034"],"editorsPicksTopicId":"3985d2a191c5","popularOnMediumTopicId":"9d34e48ecf94","memberContentTopicId":"13d7efd82fb2","audioContentTopicId":"3792abbd134","brandedSequenceId":"7d337ddf1941","isDoNotAuth":false,"goldfinchUrl":"https://goldfinch.medium.com","buggle":{"url":"https://buggle.medium.com","videoUrl":"https://cdn-videos-1.medium.com","audioUrl":"https://cdn-audio-1.medium.com"}}
// ]]></script>
  <script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.pWubqzC7vUwGdzM3DrvA7A.js" async></script>
  <script>// <![CDATA[
window["obvInit"]({"value":{"id":"c199e936da","versionId":"b2b302735c04","creatorId":"29963203626","creator":{"userId":"29963203626","name":"Keith Horwood","username":"keithwhor","createdAt":1417721894864,"lastPostCreatedAt":1504846491822,"imageId":"0*wFS04iPrwoOkEPYH.png","backgroundImageId":"","bio":"Solving problems since 1988.","twitterScreenName":"keithwhor","socialStats":{"userId":"29963203626","usersFollowedCount":65,"usersFollowedByCount":1086,"type":"SocialStats"},"social":{"userId":"lo_d613bbd06ee0","targetUserId":"29963203626","type":"Social"},"facebookAccountId":"","allowNotes":1,"type":"User"},"homeCollectionId":"","title":"NBEAM: How I Wrote an Ultra-Fast DNA Sequence Alignment Algorithm in JavaScript","detectedLanguage":"en","latestVersion":"b2b302735c04","latestPublishedVersion":"b2b302735c04","hasUnpublishedEdits":false,"latestRev":3074,"createdAt":1424663275187,"updatedAt":1500416284015,"acceptedAt":0,"firstPublishedAt":1424682265951,"latestPublishedAt":1432066187914,"vote":false,"experimentalCss":"","displayAuthor":"","content":{"subtitle":"Science. JavaScript. Speed. Can we pick only one?","bodyModel":{"paragraphs":[{"name":"3d5a","type":3,"text":"NBEAM: How I Wrote an Ultra-Fast DNA Sequence Alignment Algorithm in JavaScript","markups":[]},{"name":"c40f","type":13,"text":"Science. JavaScript. Speed. Can we pick only one?","markups":[]},{"name":"b5c0","type":1,"text":"Unfortunately, the idea that these three concepts are mutually exclusive is a widely-held belief for many developers (and scientists). Bioinformatics packages are written by biologists-turned-developers, frequently in Python and Perl, and are often not optimized for speed (or even usability). JavaScript has a spotty history, riddled with complaints of implementation details (Brendan Eich wrote in in only ten days, c’mon!). It’s common to assume that if you want speed you need to work with the hardware. How can you achieve “close to the metal” speed with JavaScript?","markups":[{"type":3,"start":378,"end":424,"href":"http://en.wikipedia.org/wiki/Brendan_Eich#Netscape_and_JavaScript","title":"","rel":"","anchorType":0},{"type":2,"start":466,"end":472},{"type":2,"start":489,"end":508}]},{"name":"e100","type":1,"text":"Google’s V8 JavaScript Engine has come a long way. In this article I’m going to explain how I wrote and implemented an ungapped degenerate DNA sequence alignment algorithm in JavaScript (browser + node) using ArrayBuffers and bitwise operators.","markups":[{"type":3,"start":9,"end":29,"href":"http://en.wikipedia.org/wiki/V8_(JavaScript_engine)","title":"","rel":"","anchorType":0},{"type":3,"start":209,"end":221,"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer","title":"","rel":"","anchorType":0},{"type":3,"start":226,"end":243,"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators","title":"","rel":"","anchorType":0}]},{"name":"39d4","type":1,"text":"A full JavaScript library containing containing the algorithm and other useful features is available in a github repository, keitwhor/NtSeq. Before I go into the nitty-gritty details of the algorithm, NBEAM (Nucleotide Bitwise Exhaustive Alignment Mapping), I would like to clarify some definitions for the biologists and developers alike.","markups":[{"type":3,"start":106,"end":139,"href":"http://github.com/keithwhor/NtSeq","title":"","rel":"","anchorType":0}]},{"name":"71f3","type":1,"text":"First, to biologists: The algorithm contained here is for matching ungapped sequences and implements no substitution matrix. It scores exact matching only, being 1 for match (degenerate nucleotide or not) and 0 for no match. I’m sure it can be expanded upon to use a more complex scoring system. It’s MIT licenced, so go nuts! Just give credit where credit is due.","markups":[{"type":1,"start":10,"end":20},{"type":1,"start":162,"end":163},{"type":1,"start":209,"end":210},{"type":2,"start":67,"end":75},{"type":2,"start":135,"end":140}]},{"name":"a0c0","type":1,"text":"For developers: Some lingo!","markups":[{"type":1,"start":4,"end":14}]},{"name":"0d6b","type":1,"text":"Nucleotide:\nA “letter” of DNA. Typically A, T, G or C. In RNA, U is used instead of T.","markups":[{"type":1,"start":0,"end":12},{"type":2,"start":41,"end":42},{"type":2,"start":44,"end":45},{"type":2,"start":47,"end":48},{"type":2,"start":52,"end":53},{"type":2,"start":63,"end":65},{"type":2,"start":84,"end":86}]},{"name":"cf75","type":1,"text":"Degenerate Nucleotide:\nA “letter” representing one or more possible nucleotides. There are 15 possible symbols, 16 if you include no matches (represented as “-”). For more information, you can check out nucleic acid notation on Wikipedia.","markups":[{"type":3,"start":203,"end":237,"href":"http://en.wikipedia.org/wiki/Nucleic_acid_notation","title":"","rel":"","anchorType":0},{"type":1,"start":0,"end":23},{"type":2,"start":130,"end":140},{"type":2,"start":158,"end":159}]},{"name":"25f6","type":1,"text":"Ungapped:\nThe DNA sequence contains no “gaps” or null nucleotides. While the algorithm itself supports gaps, it doesn’t make any effort to check gapped variants of sequences. It will always count a gap in a provided sequence as “not a match.”","markups":[{"type":1,"start":0,"end":9}]},{"name":"b1d9","type":1,"text":"Substitution Matrix:\nA way of scoring nucleotide comparisons based upon how likely one nucleotide is to randomly mutate to a different type of nucleotide over a certain amount of time. This type of scoring is not used here, but it’s good to clarify.","markups":[{"type":1,"start":0,"end":20}]},{"name":"1a07","type":1,"text":"Genome:\nYou’ve probably heard this one. A string of nucleotides containing all of the genetic information of a specific organism.","markups":[{"type":1,"start":0,"end":7}]},{"name":"ed77","type":3,"text":"The Problem","markups":[]},{"name":"99c6","type":1,"text":"First, let’s consider what we want to do. We have two sequences, let’s call them seqSearch and seqGenome. The problem we’re trying to solve is that we want to find A) the best match of seqSearch in seqGenome and B) all subsequent “close” matches of seqSearch in seqGenome, ranked by similarity, along with the position of where they match.","markups":[{"type":2,"start":82,"end":90},{"type":2,"start":95,"end":104},{"type":2,"start":185,"end":194},{"type":2,"start":198,"end":207},{"type":2,"start":249,"end":258},{"type":2,"start":262,"end":271}]},{"name":"f091","type":1,"text":"So, if seqSearch is “ATGC” and seqGenome is “ATGGCATGC”, we would expect a match list that looks like the following (with position 0-indexed):","markups":[{"type":2,"start":7,"end":16},{"type":2,"start":31,"end":41}]},{"name":"51e4","type":1,"text":"Rank: 1, Position: 5, Matches: 4 / 4, Result: ATGC\nRank: 2, Position: 0, Matches: 3 / 4, Result: ATGG\nRank: 3, Position: 1, Matches: 2 / 4, Result: TGGC\n… etc.","markups":[]},{"name":"ca27","type":1,"text":"An algorithm to implement this is relatively straightforward:","markups":[]},{"name":"5fb3","type":8,"text":"function search(seqSearch, seqGenome) {","markups":[]},{"name":"42e7","type":8,"text":"  var sLen = seqSearch.length;\n  var gLen = seqGenome.length;","markups":[]},{"name":"2c8d","type":8,"text":"  // Create a Uint32Array to initialize all values to 0\n  var map = new Uint32Array(gLen + sLen);","markups":[]},{"name":"ed7d","type":8,"text":"  var curChar;\n  var offset;","markups":[]},{"name":"0b3e","type":8,"text":"  for (var j = 0; j \x3c sLen; j++) {","markups":[]},{"name":"6a3f","type":8,"text":"    curChar = seqSearch[j];","markups":[]},{"name":"30cf","type":8,"text":"    /* As we progress through our seqSearch,\n       our offset in our map (the position\n       we're matching at) gets changed.\n       This is because we're trying to compare\n       and aggregate match count based on the\n       alignment of seqSearch as compared to\n       its first (0-index) position. */","markups":[]},{"name":"45f8","type":8,"text":"    offset = sLen — j;","markups":[]},{"name":"db0b","type":8,"text":"    for (var i = 0; i \x3c gLen; i++) {\n      if (curChar === seqGenome[i]) {\n        ++map[offset + i];\n      }\n    }\n  \n  }","markups":[]},{"name":"1d56","type":8,"text":"  /* Convert map back into regular array,\n     so we can use array methods */\n  return [].slice.call(map);","markups":[]},{"name":"f5c0","type":8,"text":"};","markups":[]},{"name":"6700","type":8,"text":"// Call our search\nvar alignmentMap = search(seqSearch, seqGenome);","markups":[]},{"name":"3f2e","type":8,"text":"// Map position values\nalignmentMap = alignmentMap.map(function(value, index) {\n  return {position: index - seqSearch.length, matches: value};\n});","markups":[]},{"name":"d517","type":8,"text":"// Sort position values\nalignmentMap.sort(function(a, b) {\n   return a.matches - b.matches;\n});","markups":[]},{"name":"7b87","type":1,"text":"This is dead simple. Looking at aggregating and sorting the results, our map call will run in O(n) and our sort call (with a quicksort implementation) should run with an average time complexity of O(n log n). However, since we have a nested loop comparing every nucleotide of seqSearch with seqGenome, we’re going to run into a time complexity of O(n²) for our search call— yikes!","markups":[{"type":2,"start":73,"end":76},{"type":2,"start":94,"end":98},{"type":2,"start":107,"end":111},{"type":2,"start":197,"end":207},{"type":2,"start":276,"end":285},{"type":2,"start":291,"end":300},{"type":2,"start":347,"end":353},{"type":2,"start":361,"end":368}]},{"name":"d95f","type":1,"text":"Let’s take a break right here — the following algorithm makes no attempt to achieve better performance in terms of time complexity. It still runs in O(n²). However, knowing that this is a bottleneck of such exhaustive sequence comparisons, we can try to optimize this simple search algorithm to be as performant as possible.","markups":[{"type":2,"start":115,"end":130},{"type":2,"start":149,"end":154}]},{"name":"27cb","type":3,"text":"Initial Implementation Issues","markups":[]},{"name":"31da","type":1,"text":"The first problem with the above implementation is that it does not match degenerate nucleotides. For example, if seqSearch contains “W” (which should match “A” or “T”), it will only accurately increase the match counter if seqGenome contains a “W” as well. No good!","markups":[{"type":2,"start":74,"end":84},{"type":2,"start":114,"end":123},{"type":2,"start":224,"end":233}]},{"name":"b590","type":1,"text":"The second problem (and it relates to the first) is our conditional statement. Normally, branch prediction (to learn more, read my favorite Stack Overflow answer of all time) would try to speed this up for us:","markups":[{"type":3,"start":128,"end":173,"href":"http://stackoverflow.com/a/11227902","title":"","rel":"","anchorType":0}]},{"name":"d4af","type":8,"text":"if (curChar === seqGenome[i]) {\n  ++map[offset + i];\n}","markups":[]},{"name":"4dc0","type":1,"text":"If there are no matches in the entire sequence (let’s say all As versus all Ts), you have the potential for a branch predictor to guess that it can skip the command contained within every time, it will always be right, and voila — you’ll run very quickly! (The benchmarks for NtSeq actually show this result for cases of 0% identity between sequences. Neat!)","markups":[{"type":3,"start":276,"end":281,"href":"https://github.com/keithwhor/NtSeq","title":"","rel":"","anchorType":0},{"type":2,"start":62,"end":63},{"type":2,"start":76,"end":77}]},{"name":"e465","type":1,"text":"However, in the case of genomic data, matches are (more or less) randomly distributed, meaning a branch predictor is going to perform very poorly (and always check the conditional statement).","markups":[]},{"name":"042a","type":1,"text":"These conditional checks take time. You’re doing string / array accession and character comparison for every single nucleotide in both seqSearch and seqGenome.","markups":[{"type":2,"start":135,"end":144},{"type":2,"start":149,"end":158}]},{"name":"3e74","type":1,"text":"What if there were a way to A) match degenerate nucleotides adequately and B) match and count multiple nucleotides in a sequence at once instead of one at a time?","markups":[{"type":2,"start":94,"end":102}]},{"name":"8efd","type":1,"text":"It turns out there’s a way to do both, and JavaScript is very good at it!","markups":[]},{"name":"afe3","type":3,"text":"Storing Sequence Information Using Binary Data","markups":[]},{"name":"cfe8","type":1,"text":"What if instead of using strings to compare sequence data, we used integers?","markups":[{"type":2,"start":25,"end":32},{"type":2,"start":67,"end":75}]},{"name":"caff","type":1,"text":"First of all, why would we do that?","markups":[]},{"name":"23b6","type":1,"text":"Let’s start with a quick rundown of integers. All integers in JavaScript are signed 32-bit integers. This means they have 1 sign bit and 31 bits containing the information about the number.","markups":[]},{"name":"2cc4","type":1,"text":"1 represented in binary as a 32-bit integer is:","markups":[]},{"name":"0c11","type":8,"text":"00000000 00000000 00000000 00000001","markups":[]},{"name":"6ed2","type":1,"text":"I’ve separated the bytes of the 32-bit integer here for readability. As a refresher, every time you set an integer value in JavaScript (i.e. var a = 1;), you’re actually allocating 4 bytes (32-bits) of memory.","markups":[{"type":1,"start":181,"end":188},{"type":1,"start":190,"end":198}]},{"name":"e19f","type":1,"text":"Well, neat. It turns out we can use this property of integers to store eight degenerate nucleotide values in one integer.","markups":[{"type":1,"start":71,"end":76},{"type":1,"start":109,"end":112}]},{"name":"6fa3","type":1,"text":"How, you ask? Remember that for degenerate nucleotides, there are 16 possible symbols (including “no match”). This is, conveniently, 2? different possibilities and can thus be represented using only four bits of data. We can now create some semantics for how to read these four bits of data and interpret them as nucleotides (or degenerate versions of such).","markups":[]},{"name":"d8b1","type":1,"text":"1000 is A (8)\n0100 is T (4)\n0010 is G (2)\n0001 is C (1)","markups":[{"type":1,"start":0,"end":4},{"type":1,"start":14,"end":18},{"type":1,"start":28,"end":32},{"type":1,"start":42,"end":46}]},{"name":"93e7","type":1,"text":"This allows us to do some wonderful things!","markups":[]},{"name":"a89d","type":1,"text":"To get the values of degenerate nucleotides:\nW = (A | T) = (1000 | 0100) = 1100\nN = (A | T | G | C) = (1000 | 0100 | 0010 | 0001) = 1111","markups":[]},{"name":"c13f","type":1,"text":"To match nucleotides:\nA & A = (1000 & 1000) = 1000\nA & W = (1000 & 1100) = 1000\nA & T = (1000 & 0100) = 0000","markups":[]},{"name":"cf29","type":1,"text":"And so on! If you’re confused, please check up on Bitwise Operators before reading further. You should at least understand OR (|), AND (&), UNSIGNED BITSHIFT RIGHT (\x3e\x3e\x3e) and BITSHIFT LEFT (\x3c\x3c).","markups":[{"type":3,"start":50,"end":67,"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators","title":"","rel":"","anchorType":0},{"type":1,"start":123,"end":129},{"type":1,"start":131,"end":138},{"type":1,"start":140,"end":169},{"type":1,"start":174,"end":192}]},{"name":"2f9e","type":1,"text":"Now that we have all our potential nucleotide symbols stored in four bits of data, we can lump strings of eight nucleotides into one 32-bit integer (32 / 4 = 8). “ATGCATGC” becomes 1000 0100 0010 0001 1000 0100 0010 0001, for example.","markups":[]},{"name":"984f","type":3,"text":"… Introducing ArrayBuffers!","markups":[]},{"name":"cbef","type":1,"text":"Luckily, JavaScript has a really, really easy way to deal with binary data. That’s using the ArrayBuffer. An ArrayBuffer is simply an array of bytes that can be interfaced with as (signed or unsigned) 8-bit, 16-bit or 32-bit integers using Uint8Array, Uint16Array and Uint32Array. For simplicity sake I’m not using signed integers in these examples — the “U” preceding the interface names means “unsigned.”","markups":[{"type":3,"start":93,"end":104,"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer","title":"","rel":"","anchorType":0},{"type":2,"start":240,"end":263},{"type":2,"start":268,"end":279}]},{"name":"e661","type":1,"text":"Keep in mind that you can only modify ArrayBuffers using views, or the Uint8Array (etc.) data types. Instantiating a new data view on an ArrayBuffer will not change the underlying data, merely how it is presented. This means we can set the values of an ArrayBuffer using a Uint8Array and convert it to a Uint32Array by simply instantiating a new view on the underlying buffer.","markups":[{"type":2,"start":57,"end":62},{"type":2,"start":71,"end":81}]},{"name":"11f0","type":1,"text":"Reading our sequence data into an array of 32-bit integers can now be simplified:","markups":[]},{"name":"33e7","type":8,"text":"function convertSequenceToArrayOfIntegers(sequenceString) {","markups":[]},{"name":"e136","type":8,"text":"  // two nucleotides per byte (4 bits each)\n  var sequenceBytes = Math.ceil(sequenceString.length / 2);\n  var sequenceBuffer = new ArrayBuffer(sequenceBytes);\n  var uint8view = new Uint8Array(sequenceBuffer);","markups":[]},{"name":"d6fc","type":8,"text":"  /*","markups":[]},{"name":"53e5","type":8,"text":"     lookupTable should be an object mapping each of the 16\n     nucleotide characters to their respective 4-bit integer\n     value.","markups":[]},{"name":"c6a0","type":8,"text":"     The following would do this for string \"AT\"\n     uint8view[i] starts as 0000 0000 (binary)\n     uint8view[i] = (1000) \x3c\x3c 4 (\"A\" in binary bit shift left 4)\n     uint8view[i] is now 1000 0000 (binary)\n     uint8view[i] |= (0100) (\"T\" in binary)\n     uint8view[i] is 1000 0000 and gets OR (|) with 0100,\n       resulting in 1000 0100\n     \n   */","markups":[]},{"name":"c1a3","type":8,"text":"  for (var i = 0, len = sequenceBuffer.length; i \x3c len; i++) {\n    uint8view[i] = lookupTable[sequenceString[i * 2]] \x3c\x3c 4;\n    uint8view[i] |= lookupTable[sequenceString[i * 2 + 1];\n  }","markups":[]},{"name":"056c","type":8,"text":"  // sequenceBuffer was modified by uint8view\n  // you can now return it as an array of 32-bit ints\n  \n  return new Uint32Array(sequenceBuffer);","markups":[]},{"name":"cb3f","type":8,"text":"}","markups":[]},{"name":"53fd","type":1,"text":"If we run this method on both of our input sequences, we’ll have transformed each of them into arrays of 32-bit integers. We can then use these arrays to perform some very quick nucleotide comparisons.","markups":[]},{"name":"4e89","type":3,"text":"Comparing Sequences Using Bitwise Operators","markups":[]},{"name":"246d","type":1,"text":"Now, the fun stuff! Earlier on I mentioned that we can compare two 4-bit nucleotides for a match using the BIT AND (&) operator.","markups":[]},{"name":"c5b5","type":1,"text":"A & A = (1000 & 1000) = 1000, for example.","markups":[]},{"name":"a156","type":1,"text":"In this case, any time you AND two matching nucleotides, you get a sequence of bits that contains at least one 1. When there’s no match, the sequence of four bits will always be 0000.","markups":[{"type":2,"start":98,"end":112},{"type":2,"start":168,"end":182}]},{"name":"53c6","type":1,"text":"The wonderful thing about bitwise operators is that (ideally, running on the processor level) they only take one processor cycle (your processor likely runs over 2 billion cycles per second) and act on an entire 32-bit register at once. What does that mean? It means we can compare eight degenerate nucleotides at a time when they’re stored as 32-bit integers, and it only takes a fraction of a nanosecond.","markups":[{"type":2,"start":162,"end":171},{"type":2,"start":202,"end":235},{"type":2,"start":282,"end":321},{"type":2,"start":379,"end":405}]},{"name":"4f77","type":1,"text":"“ATGCATGW & ATATWWNN” would become:","markups":[]},{"name":"c62e","type":8,"text":"1000 0100 0010 0001 1000 0100 0010 1100 &\n1000 0100 1000 0100 1100 1100 1111 1111\n=======================================\n1000 0100 0000 0000 1000 0100 0010 1100","markups":[]},{"name":"d1ca","type":1,"text":"Awesome! Now how do we count the number of matches in the resulting bit string efficiently?","markups":[]},{"name":"6d03","type":1,"text":"First, make note that: Comparing two degenerate nucleotides will result in a 4-bit sequence that contains more than one bit. This means we can’t simply count bits for a match. (W & W = (1100 & 1100) = 1100).","markups":[]},{"name":"e301","type":1,"text":"However, non-matching nucleotides will always result in 0000.","markups":[{"type":2,"start":9,"end":22},{"type":2,"start":39,"end":45}]},{"name":"ee6b","type":1,"text":"So what we can do is collect a match flag for every 4-bit sequence. We do this with UNSIGNED RIGHT BIT SHIFT (\x3e\x3e\x3e) and BIT OR (|). We can group every set of four-bits in their rightmost spot indicating a match or no match (whether it’s a 1 or a 0).","markups":[{"type":2,"start":21,"end":41}]},{"name":"f26d","type":8,"text":"// matches = 1000 0100 0000 0000 1000 0100 0010 1100 (binary)","markups":[]},{"name":"c88f","type":8,"text":"matches |= matches \x3e\x3e\x3e 1;","markups":[]},{"name":"eb8c","type":8,"text":"/*\n  1000 0100 0000 0000 1000 0100 0010 1100 (matches) |\n  0100 0010 0000 0000 0100 0010 0001 0110 (matches \x3e\x3e\x3e 1)\n  =======================================\n  1100 0110 0000 0000 1100 0110 0011 1110\n*/","markups":[]},{"name":"7fad","type":8,"text":"matches |= matches \x3e\x3e\x3e 2;","markups":[]},{"name":"6183","type":8,"text":"/*\n  1100 0110 0000 0000 1100 0110 0011 1110 (matches) |\n  0011 0001 1000 0000 0011 0001 1000 1111 (matches \x3e\x3e\x3e 2)\n  =======================================\n  1111 0111 1000 0000 1111 0111 1011 1111\n*/","markups":[{"type":1,"start":162,"end":163},{"type":1,"start":167,"end":168},{"type":1,"start":172,"end":173},{"type":1,"start":177,"end":178},{"type":1,"start":182,"end":183},{"type":1,"start":187,"end":188},{"type":1,"start":192,"end":193},{"type":1,"start":197,"end":198},{"type":2,"start":162,"end":163},{"type":2,"start":167,"end":168},{"type":2,"start":172,"end":173},{"type":2,"start":177,"end":178},{"type":2,"start":182,"end":183},{"type":2,"start":187,"end":188},{"type":2,"start":192,"end":193},{"type":2,"start":197,"end":198}]},{"name":"db6a","type":1,"text":"You’ll notice that the value of matches, though modified (and looking nothing like our original integer!) now actually has only eight important bits. Those are the rightmost bits of each group of four. Every where there was a match there is a 1, and everywhere there was no match, there’s a 0.","markups":[{"type":2,"start":128,"end":150}]},{"name":"ce2d","type":1,"text":"We can clear out the unneeded bits with a simple & with the hex flag 0x11111111. (0001 0001 0001 0001 0001 0001 0001 0001).","markups":[]},{"name":"8bd8","type":8,"text":"matches &= 0x11111111;","markups":[]},{"name":"3bcd","type":8,"text":"/*\n  1111 0111 1000 0000 1111 0111 1011 1111 (matches) &\n  0001 0001 0001 0001 0001 0001 0001 0001\n  =======================================\n  0001 0001 0000 0000 0001 0001 0001 0001\n*/","markups":[{"type":1,"start":8,"end":9},{"type":1,"start":13,"end":14},{"type":1,"start":18,"end":19},{"type":1,"start":23,"end":24},{"type":1,"start":28,"end":29},{"type":1,"start":33,"end":34},{"type":1,"start":38,"end":39},{"type":1,"start":43,"end":44},{"type":2,"start":8,"end":9},{"type":2,"start":13,"end":14},{"type":2,"start":18,"end":19},{"type":2,"start":23,"end":24},{"type":2,"start":28,"end":29},{"type":2,"start":33,"end":34},{"type":2,"start":38,"end":39},{"type":2,"start":43,"end":44}]},{"name":"6ad7","type":1,"text":"Beautiful! Now it comes down to counting the number of 1-bits in the bitstring.","markups":[{"type":1,"start":55,"end":56}]},{"name":"b542","type":1,"text":"There are a number of ways to do this. One is an algorithm that runs in O(n):","markups":[{"type":3,"start":43,"end":76,"href":"http://www.dotnetperls.com/bitcount","title":"","rel":"","anchorType":0},{"type":2,"start":72,"end":77}]},{"name":"10d1","type":8,"text":"function countBits(n) {\n  var count = 0;\n  \twhile (n !== 0) {\n  \t  count++;\n  \t  n &= (n - 1);\n  \t}\n  \treturn count;\n}","markups":[]},{"name":"91ac","type":1,"text":"There’s also the Hamming weight algorithm referenced on another beautiful StackOverflow answer that runs in O(1):","markups":[{"type":3,"start":17,"end":31,"href":"http://en.wikipedia.org/wiki/Hamming_weight","title":"","rel":"","anchorType":0},{"type":3,"start":42,"end":94,"href":"http://stackoverflow.com/a/109025","title":"","rel":"","anchorType":0},{"type":2,"start":108,"end":112}]},{"name":"838e","type":8,"text":"function countBits(n) {\n  n = n - ((n \x3e\x3e 1) & 0x55555555);\n  n = (n & 0x33333333) + ((n \x3e\x3e 2) & 0x33333333);\n  return (((n + (n \x3e\x3e 4)) & 0x0F0F0F0F) * 0x01010101) \x3e\x3e 24;\n}","markups":[]},{"name":"5de8","type":1,"text":"Aha! O(1)! Must be better! The big problem we encounter, however, is that our bit count in our actual integer is relatively sparse.","markups":[{"type":2,"start":5,"end":9},{"type":2,"start":124,"end":130}]},{"name":"ffeb","type":1,"text":"We only have a maximum of eight bits that could be counted. This means our O(n) solution will take a maximum of about 32 processor cycles (conditional check, increment, bit AND, subtraction — all multiplied by 8 is 32) and minimum of 0 cycles, whereas our O(1) Hamming Weight solution always takes around 14 processor cycles based on the number of operations (rough count, correct me if I’m wrong).","markups":[{"type":2,"start":26,"end":31},{"type":2,"start":75,"end":79},{"type":2,"start":101,"end":108},{"type":2,"start":223,"end":230},{"type":2,"start":242,"end":244},{"type":2,"start":256,"end":260}]},{"name":"3fbb","type":1,"text":"Now to our actual data — in two randomly distributed sequences of DNA, you’re only likely to encounter a match 25% of the time, meaning our O(n) solution will average 8 processor cycles when confronted with real data. This will outperform Hamming Weight.","markups":[{"type":2,"start":140,"end":144}]},{"name":"31fe","type":1,"text":"Cool, so we’ll use that, right?","markups":[]},{"name":"20ad","type":1,"text":"Not so fast! Turns out there’s a better O(1) solution than Hamming Weight. You can use a lookup table (as an array) to count bits in a bitstring. LookupBits[0] would be 0, LookupBits[1] would be 1, LookupBits[2] would be 1, LookupBits[3] would be 2… etc. The problem with this solution is that it takes a ton of memory. There are 4,294,967,295 different unsigned 32-bit integers, each containing a value in the lookup table between 0 and 32 (up to 3 bytes!) meaning the lookup table would be 12GB in size. Ugh.","markups":[{"type":2,"start":40,"end":44}]},{"name":"15e9","type":10,"text":"You probably don’t have 12GB of memory to allocate","markups":[]},{"name":"e722","type":10,"text":"Even if you did, a lookup table this size is unmanageable. Cache misses will slow down your process to a screeching halt.","markups":[]},{"name":"a2a2","type":1,"text":"So how is this usable? Well, we know we only actually have eight important bits. Let’s look at our resultant bit string again:","markups":[{"type":2,"start":59,"end":79}]},{"name":"b334","type":8,"text":"0001 0001 0000 0000 0001 0001 0001 0001","markups":[]},{"name":"6d32","type":1,"text":"Every important bit is contained in the rightmost grouping of every four bits. There are only eight of them, too. Meaning there’s only actually one byte of relevant data and 256 possible combinations of results. Turns out we can use bit shifts again to aggregate our data to the rightmost byte!","markups":[{"type":2,"start":94,"end":99},{"type":2,"start":144,"end":152}]},{"name":"f54c","type":8,"text":"// matches = 0001 0001 0000 0000 0001 0001 0001 0001","markups":[{"type":1,"start":16,"end":17},{"type":1,"start":21,"end":22},{"type":1,"start":26,"end":27},{"type":1,"start":31,"end":32},{"type":1,"start":36,"end":37},{"type":1,"start":41,"end":42},{"type":1,"start":46,"end":47},{"type":1,"start":51,"end":52},{"type":2,"start":16,"end":17},{"type":2,"start":21,"end":22},{"type":2,"start":26,"end":27},{"type":2,"start":31,"end":32},{"type":2,"start":36,"end":37},{"type":2,"start":41,"end":42},{"type":2,"start":46,"end":47},{"type":2,"start":51,"end":52}]},{"name":"c578","type":8,"text":"matches |= matches \x3e\x3e\x3e 3;","markups":[]},{"name":"0cba","type":8,"text":"/*\n  0001 0001 0000 0000 0001 0001 0001 0001 (matches) |\n  0000 0010 0010 0000 0000 0010 0010 0010 (matches \x3e\x3e\x3e 3)\n  =======================================\n  0001 0011 0010 0000 0001 0011 0011 0011\n*/","markups":[]},{"name":"25c7","type":8,"text":"matches |= matches \x3e\x3e\x3e 6;","markups":[]},{"name":"ade9","type":8,"text":"/*\n  0001 0011 0010 0000 0001 0011 0011 0011 (matches) |\n  0000 0000 0100 1100 1000 0000 0100 1100 (matches \x3e\x3e\x3e 6)\n  =======================================\n  0001 0011 0110 1100 1001 0011 0111 1111\n*/","markups":[{"type":1,"start":174,"end":178},{"type":1,"start":194,"end":198},{"type":2,"start":174,"end":178},{"type":2,"start":194,"end":198}]},{"name":"7a82","type":1,"text":"You’ll notice the variable storing our match data, though looking much different again indeed, has now aggregated match data to the rightmost four bits of each set of 16 bits.","markups":[]},{"name":"63bc","type":8,"text":"0001 0001 0000 0000 0001 0001 0001 0001","markups":[{"type":1,"start":3,"end":4},{"type":1,"start":8,"end":9},{"type":1,"start":13,"end":14},{"type":1,"start":18,"end":19},{"type":1,"start":23,"end":24},{"type":1,"start":28,"end":29},{"type":1,"start":33,"end":34},{"type":1,"start":38,"end":39},{"type":2,"start":3,"end":4},{"type":2,"start":8,"end":9},{"type":2,"start":13,"end":14},{"type":2,"start":18,"end":19},{"type":2,"start":23,"end":24},{"type":2,"start":28,"end":29},{"type":2,"start":33,"end":34},{"type":2,"start":38,"end":39}]},{"name":"4d7c","type":1,"text":"has become:","markups":[]},{"name":"7471","type":8,"text":"0001 0011 0110 1100 1001 0011 0111 1111","markups":[{"type":1,"start":15,"end":19},{"type":1,"start":35,"end":39},{"type":2,"start":15,"end":19},{"type":2,"start":35,"end":39}]},{"name":"d8bf","type":1,"text":"We can now shift 1100 over 12 bits, clear out the unimportant bits, and BIT OR (|) it with 1111 on the right:","markups":[{"type":1,"start":17,"end":21},{"type":1,"start":91,"end":95}]},{"name":"bb8e","type":8,"text":"matches = ((matches \x3e\x3e\x3e 12) & 0xF0) | (matches & 0xF)","markups":[]},{"name":"d1fd","type":8,"text":"/*\n  First:\n  0000 0000 0000 0001 0011 0110 1100 1001 (matches \x3e\x3e\x3e 12) &\n  0000 0000 0000 0000 0000 0000 1111 0000 (0xF0)\n  =======================================\n  0000 0000 0000 0000 0000 0000 1100 0000\n  \n  Then:\n  0001 0011 0110 1100 1001 0011 0111 1111 (matches) &\n  0000 0000 0000 0000 0000 0000 0000 1111 (0xF)\n  =======================================\n  0000 0000 0000 0000 0000 0000 0000 1111","markups":[{"type":1,"start":44,"end":48},{"type":1,"start":196,"end":200},{"type":1,"start":234,"end":238},{"type":1,"start":254,"end":259},{"type":1,"start":398,"end":402},{"type":2,"start":44,"end":48},{"type":2,"start":196,"end":200},{"type":2,"start":234,"end":238},{"type":2,"start":254,"end":259},{"type":2,"start":398,"end":402}]},{"name":"0f66","type":8,"text":"  Finally:\n  0000 0000 0000 0000 0000 0000 1100 0000 |\n  0000 0000 0000 0000 0000 0000 0000 1111\n  =======================================\n  0000 0000 0000 0000 0000 0000 1100 1111\n*/","markups":[{"type":1,"start":43,"end":47},{"type":1,"start":92,"end":96},{"type":1,"start":171,"end":183},{"type":2,"start":43,"end":47},{"type":2,"start":92,"end":96},{"type":2,"start":171,"end":183}]},{"name":"93e4","type":1,"text":"Awesome! We now have all of our match data in the rightmost byte, and can check it in a lookup table that only has 256 entries! (Phew! You can pre-generate this lookup table as a Uint8Array when your program loads using either Hamming Weight or our sparse bitcount example above.)","markups":[]},{"name":"27f1","type":8,"text":"return bitCountLookup[matches];","markups":[]},{"name":"2f0a","type":1,"text":"Great, now we can count matches of nucleotides eight comparisons at a time. All that’s left to do is rewrite our initial search function.","markups":[{"type":2,"start":121,"end":127}]},{"name":"11de","type":3,"text":"Final Implementation","markups":[]},{"name":"25f3","type":1,"text":"If you’ve been following through so far, we can now go back to our first string comparison implementation but replace our conditional check with some bit operations to run the full algorithm. I won’t go through the full explanation, but for every set of two integers we have to make sure we “walk” the integers over each other (bit shifting left and right appropriately) to make sure we catch the potential matches at every position, and store the matches relative to the offset.","markups":[]},{"name":"c554","type":1,"text":"The following code is the full excerpt from the NtSeq.MatchMap in my NtSeq Library. I’ve commented parts that may be confusing. The wording and variables names are a bit different than above.","markups":[{"type":3,"start":69,"end":82,"href":"https://github.com/keithwhor/NtSeq","title":"","rel":"","anchorType":0},{"type":1,"start":48,"end":62}]},{"name":"cc88","type":8,"text":"MatchMap.prototype.__countMatches = function(int, bitCount) {\n  int |= int \x3e\x3e\x3e 1;\n  int |= int \x3e\x3e\x3e 2;\n  int &= 0x11111111;\n  int |= int \x3e\x3e\x3e 3;\n  int |= int \x3e\x3e\x3e 6;\n  return bitCount[((int \x3e\x3e\x3e 12) & 0xF0) | (int & 0xF)];\n};","markups":[]},{"name":"1342","type":8,"text":"MatchMap.prototype.__execute = function(queryBuffer, searchSpaceBuffer) {\n  \n  var queryInts, spaceInts, queryIntsLength, spaceIntsLength, arrLen, mapBuffer, mapArray, A, B, A1, A2, T, cur, pos, move, i, k, adjustNeg, adjustPos, fnCountMatches, bitCount;\n  \n  queryInts = new Uint32Array(queryBuffer, 4);\n  spaceInts = new Uint32Array(searchSpaceBuffer, 4);\n  fnCountMatches = this.__countMatches;\n  bitCount = __bitCount;","markups":[]},{"name":"1f1f","type":8,"text":"  queryIntsLength = queryInts.length|0;\n  spaceIntsLength = spaceInts.length|0;\n  arrLen = (queryIntsLength + spaceIntsLength) \x3c\x3c 3;\n  mapBuffer = new ArrayBuffer(4 * arrLen);\n  mapArray = new Uint32Array(mapBuffer);","markups":[]},{"name":"de9d","type":8,"text":"  for (k = 0|0; k \x3c queryIntsLength; k++) {","markups":[]},{"name":"09ca","type":8,"text":"    A = queryInts[k];","markups":[]},{"name":"846f","type":8,"text":"    // set offset, x \x3c\x3c 3 is shorthand for x * 8\n    // because there are 8 nucleotides per int","markups":[]},{"name":"4a8c","type":8,"text":"    cur = (queryIntsLength — k) \x3c\x3c 3;","markups":[]},{"name":"7399","type":8,"text":"    for (i = 0|0; i \x3c spaceIntsLength; i++) {","markups":[]},{"name":"500d","type":8,"text":"      // if match without shifting is non-zero, count matches","markups":[]},{"name":"5220","type":8,"text":"      (T = A & spaceInts[i]) &&\n        (mapArray[(i \x3c\x3c 3) + cur] += fnCountMatches(T, bitCount));\n    }","markups":[]},{"name":"0a2e","type":8,"text":"    // start walking \"A\" along searchSpace (seqGenome) by\n    // bitshifting left and right, adjust offsets accordingly","markups":[]},{"name":"e472","type":8,"text":"    A1 = A \x3e\x3e\x3e 4;\n    A2 = A \x3c\x3c 4;","markups":[]},{"name":"d8a8","type":8,"text":"    adjustNeg = cur — 1;\n    adjustPos = cur + 1;","markups":[]},{"name":"c301","type":8,"text":"    // break loop if A1 and A2 have been shifted far enough\n    // to zero them both out","markups":[]},{"name":"4709","type":8,"text":"    while(A1 || A2) {","markups":[]},{"name":"2b40","type":8,"text":"      for (i = 0|0; i \x3c spaceIntsLength; i++) {\n        B = spaceInts[i];\n        pos = (i \x3c\x3c 3); // === i * 8","markups":[]},{"name":"ba3a","type":8,"text":"        // if the match result is non-zero, count matches.","markups":[]},{"name":"4b26","type":8,"text":"        (T = A1 & B) &&\n          (mapArray[pos + adjustNeg] += fnCountMatches(T, bitCount));\n        (T = A2 & B) &&\n          (mapArray[pos + adjustPos] += fnCountMatches(T, bitCount));\n      }\n      \n      // keep \"walking\" / shifting current integer to each offset","markups":[]},{"name":"f598","type":8,"text":"      A1 \x3e\x3e\x3e= 4;\n      A2 \x3c\x3c= 4;\n      --adjustNeg;\n      ++adjustPos;","markups":[]},{"name":"ff89","type":8,"text":"    }\n  }\n  \n  // return our buffer, we can instantiate a Uint32Array\n  // on it if we wish\n  \n  return mapBuffer;","markups":[]},{"name":"377a","type":8,"text":"};","markups":[]},{"name":"3a6d","type":1,"text":"Now we’ve gotten somewhere. ?","markups":[]},{"name":"760b","type":3,"text":"Benchmarks","markups":[]},{"name":"1e0f","type":1,"text":"So how does this actually perform? Turns out pretty well. While it has the same time complexity, it runs 6–7x faster than the “simple” implementation. Here’s some data taken February 7th, 2015:","markups":[]},{"name":"4750","type":8,"text":"Benchmark         |  naive | search |   naiveScore |  searchScore\n------------------------------------------------------------------\n1,000,000, 0%     |    9ms |    3ms |    9.00ns/nt |    3.00ns/nt\n10,000,000, 0%    |   63ms |    5ms |    6.30ns/nt |    0.50ns/nt\n100,000,000, 0%   |  621ms |   60ms |    6.21ns/nt |    0.60ns/nt\n1,000,000, 25%    |   15ms |    6ms |   15.00ns/nt |    6.00ns/nt\n10,000,000, 25%   |  124ms |   17ms |   12.40ns/nt |    1.70ns/nt\n100,000,000, 25%  | 1249ms |  233ms |   12.49ns/nt |    2.33ns/nt\n1,000,000, 50%    |   15ms |    2ms |   15.00ns/nt |    2.00ns/nt\n10,000,000, 50%   |  131ms |   20ms |   13.10ns/nt |    2.00ns/nt\n100,000,000, 50%  | 1305ms |  234ms |   13.05ns/nt |    2.34ns/nt\n1,000,000, 100%   |   14ms |    2ms |   14.00ns/nt |    2.00ns/nt\n10,000,000, 100%  |  144ms |   18ms |   14.40ns/nt |    1.80ns/nt\n100,000,000, 100% | 1471ms |  240ms |   14.71ns/nt |    2.40ns/nt","markups":[]},{"name":"8ca5","type":1,"text":"“naive” represents the first version of the alignment algorithm listed here (basic string comparison), and “search” represent the full implementation using bitwise operators. The score is measured in nanoseconds per nucleotide comparison, and was performed on a 2.4GHz processor.","markups":[]},{"name":"b147","type":1,"text":"The trial titles represent total search space (seqSearch length multiplied by seqGenome length) and average sequence identity (match) between the two sequences.","markups":[]},{"name":"a5c0","type":3,"text":"Conclusions","markups":[]},{"name":"473f","type":1,"text":"Well, JavaScript performs this optimized bit op algorithm pretty quickly.","markups":[]},{"name":"5f3c","type":1,"text":"As mentioned, the V8 engine in node.js averages about 5 processor cycles per nucleotide comparison (including accession, storage, aggregation of data) which is about as “close to the metal” as you can get.","markups":[]},{"name":"1740","type":1,"text":"Personally, I think it’s time we start taking a look at using JavaScript more seriously as a “heavy-lifting” language. The V8 team at Google has done a fantastic job at making their JavaScript engine performant. As far as scientific computing is concerned, the potential is there. JavaScript is extremely accessible (requiring only a browser and text editor to execute) and can be introduced to young scientists and bioinformaticians easily. There are also arguments to be made for scaling node processes, but that can be saved for another day.","markups":[]},{"name":"96d1","type":1,"text":"Finally, the NBEAM algorithm as described here, though implemented in JavaScript, is actually language-agnostic. Please feel free to modify it to suit your needs (I’d be interested to see GPU implementations!), but credit is always appreciated. If anybody can aid in verifying the novelty of NBEAM and would like to help get it published, don’t hesitate to reach out!","markups":[]},{"name":"1fa2","type":1,"text":"As a final reminder, the NtSeq JavaScript library and full implementation of the NBEAM algorithm is available at https://github.com/keithwhor/NtSeq.","markups":[{"type":3,"start":113,"end":147,"href":"https://github.com/keithwhor/NtSeq","title":"","rel":"nofollow","anchorType":0}]},{"name":"0e01","type":3,"text":"Contact","markups":[]},{"name":"86ba","type":1,"text":"You can visit my personal website at keithwhor.com, follow me on twitter @keithwhor, visit my github or just shout out “hi” if you happen to see me walking the streets of San Francisco.","markups":[{"type":3,"start":37,"end":50,"href":"http://keithwhor.com/","title":"","rel":"","anchorType":0},{"type":3,"start":73,"end":83,"href":"http://twitter.com/keithwhor","title":"","rel":"","anchorType":0},{"type":3,"start":85,"end":100,"href":"http://github.com/keithwhor","title":"","rel":"","anchorType":0}]},{"name":"4bf9","type":1,"text":"Thanks for the read!","markups":[]}],"sections":[{"name":"f9b6","startIndex":0}]},"postDisplay":{"coverless":true}},"virtuals":{"allowNotes":true,"previewImage":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"wordCount":3988,"imageCount":0,"readingTime":15.049056603773584,"subtitle":"Science. JavaScript. Speed. Can we pick only one?","usersBySocialRecommends":[],"recommends":68,"socialRecommends":[],"isBookmarked":false,"tags":[{"slug":"javascript","name":"JavaScript","postCount":44188,"virtuals":{"isFollowing":false},"metadata":{"followerCount":40579,"postCount":44188,"coverImage":{"id":"1*_WL8zajmqcczto2bjiBqpw.jpeg","originalWidth":4096,"originalHeight":2730}},"type":"Tag"},{"slug":"algorithms","name":"Algorithms","postCount":3504,"virtuals":{"isFollowing":false},"metadata":{"followerCount":2327,"postCount":3504,"coverImage":{"id":"1*F-EDLK-OugJ_4KOgtJqnPA.png","originalWidth":300,"originalHeight":330}},"type":"Tag"},{"slug":"dna","name":"Dna","postCount":636,"virtuals":{"isFollowing":false},"metadata":{"followerCount":63,"postCount":636,"coverImage":{"id":"1*IhmC7v6wcZIkeeGoOuNG0A.jpeg","originalWidth":3306,"originalHeight":951}},"type":"Tag"}],"socialRecommendsCount":0,"responsesCreatedCount":3,"links":{"entries":[],"version":"0.3","generatedAt":1471935998717},"isLockedPreviewOnly":false,"takeoverId":"","metaDescription":"","totalClapCount":68,"sectionCount":1},"coverless":true,"slug":"nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript","translationSourcePostId":"","translationSourceCreatorId":"","isApprovedTranslation":false,"inResponseToPostId":"","inResponseToRemovedAt":0,"isTitleSynthesized":false,"allowResponses":true,"importedUrl":"","importedPublishedAt":0,"visibility":0,"uniqueSlug":"nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da","previewContent":{"bodyModel":{"paragraphs":[{"name":"3d5a","type":3,"text":"NBEAM: How I Wrote an Ultra-Fast DNA Sequence Alignment Algorithm in JavaScript","markups":[],"alignment":1},{"name":"c40f","type":13,"text":"Science. JavaScript. Speed. Can we pick only one?","markups":[],"alignment":1},{"name":"b5c0","type":1,"text":"Unfortunately, the idea that these three concepts are mutually exclusive is a widely…","markups":[],"alignment":1}],"sections":[{"startIndex":0}]},"isFullContent":false},"license":0,"inResponseToMediaResourceId":"","canonicalUrl":"https://medium.com/@keithwhor/nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da","approvedHomeCollectionId":"","newsletterId":"","webCanonicalUrl":"https://medium.com/@keithwhor/nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da","mediumUrl":"https://medium.com/@keithwhor/nbeam-how-i-wrote-an-ultra-fast-dna-sequence-alignment-algorithm-in-javascript-c199e936da","migrationId":"","notifyFollowers":true,"notifyTwitter":false,"isSponsored":false,"isRequestToPubDisabled":false,"notifyFacebook":false,"responseHiddenOnParentPostAt":0,"isSeries":false,"isSubscriptionLocked":false,"seriesLastAppendedAt":0,"audioVersionDurationSec":0,"sequenceId":"","isNsfw":false,"isEligibleForRevenue":false,"isBlockedFromHightower":false,"type":"Post"},"mentionedUsers":[],"collaborators":[],"membershipPlans":[],"collectionUserRelations":[],"mode":null,"references":{"User":{"29963203626":{"userId":"29963203626","name":"Keith Horwood","username":"keithwhor","createdAt":1417721894864,"lastPostCreatedAt":1504846491822,"imageId":"0*wFS04iPrwoOkEPYH.png","backgroundImageId":"","bio":"Solving problems since 1988.","twitterScreenName":"keithwhor","socialStats":{"userId":"29963203626","usersFollowedCount":65,"usersFollowedByCount":1086,"type":"SocialStats"},"social":{"userId":"lo_d613bbd06ee0","targetUserId":"29963203626","type":"Social"},"facebookAccountId":"","allowNotes":1,"type":"User"}},"Social":{"29963203626":{"userId":"lo_d613bbd06ee0","targetUserId":"29963203626","type":"Social"}},"SocialStats":{"29963203626":{"userId":"29963203626","usersFollowedCount":65,"usersFollowedByCount":1086,"type":"SocialStats"}}}})
// ]]></script>
 </body>
</html>