<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252"> 
  <meta name="author" content="J.Reiser"> 
  <meta name="description" content="Introduction to Java"> 
  <meta name="description" content="OOP, Object Oriented Programming, What is Object Oriented Programming?, Class, Object, GUI Examples in JAVA, Creating a Graphic User Interface (GUI) for your program in JAVA, setBackgroundColor, setFont, Window, Event objects , Clipboard, Color, Font, Graphics, Image, Toolkit, JFrame, AWT Events and Swing libraries, paintComponent, 

  "> 
  <title>Java Tutorial for Beginners: GUI Examples</title> 
  <link rel="stylesheet" type="text/css" href="layout.css"> 
  <link rel="stylesheet" type="text/css" href="color2.css"> 
 </head> 
 <body> 
  <h1>Java Tutorial for Beginners</h1> 
  <div id="main-menu"> 
   <h3>Main Menu</h3> 
   <ul id="left"> 
    <li><a href="introductiontojava.html">Introduction to Java</a></li> 
    <li><a href="objectorientedprogramming.html">Object Oriented Programming</a></li> 
    <li><a href="DevelopingaPrograminJava.html">Developing a Program in Java</a></li> 
    <li><a href="TheJavaLanguage.html">The Java Language</a></li> 
    <li><a href="WorkingwithObjects.html">Working with Objects</a></li> 
    <li><a href="UsingInheritance.html">Using Inheritance</a></li> 
    <li><a href="ExceptionHandling.html">Exception Handling</a></li> 
    <li><a href="GUIExamples.html"><font color="#990033">GUI Examples</font></a></li> 
    <li><a href="DatabaseExamples.html">Database Examples</a></li> 
   </ul> 
  </div> 
  <div id="content"> 
   <h2 id="top">&nbsp;</h2> 
   <h2 id="top">Creating a Graphic User Interface (GUI) for your program</h2> 
   <p>Java provides a hierarchy of classes useful in creating GUI’s. It’s useful to have an idea of how this hierarchy fits together, since classes inherit objects and methods from the classes above them in the hierarchy.</p> 
   <p>The diagram below illustrates this hierarchy:<br> </p> 
   <img src="pics/pic8.jpg"> 
   <p class="MsoNormal" style="margin-left:.25in">As you can see, everything in the hierarchy descends from the class Component. Component has lots of useful methods, such as <b>setBackgroundColor, setFont</b> etc. Container, the next class in the hierarchy, defines methods that are useful for maintaining a list of components that the container stores. For example, a panel can contain text boxes, labels etc. The Container class has methods such as <b>add</b> and <b>remove</b>.</p> 
   <p class="MsoNormal" style="margin-left:.25in">The <b>Window</b> branch of the hierarchy contains classes that are useful in creating windows (known as Frames), and the JComponent branch contains classes that can be used to create the GUI components used in the window. These include buttons, labels, text boxes, scroll bars etc. </p> 
   <p class="MsoNormal" style="margin-left:.25in">The original version of the Java language used the package java.awt to work with GUI’s. However, this was revised later, and newer programs make use of the javax.swing package. All of the classes beginning with J (Eg JFrame, JButton etc) belong to javax.swing. Many of them extend classes defined under java.awt. Gui programs often have to import both packages, as they may use classes from each.</p> 
   <p class="MsoNormal" style="margin-left:.25in">There are many GUI classes which do not fit into this hierarchy, but which are used in conjunction with screen components. These include:</p> 
   <p class="MsoNormal" style="margin-left:.25in"><b>Event objects </b>e.g. ActionEvent. These are used to store information about a GUI event that has occurred, for example, the user has clicked a button.</p> 
   <p class="MsoNormal" style="margin-left:.25in"><b>Clipboard</b> is an object used to hold information that the user has copied to the clipboard.</p> 
   <p class="MsoNormal" style="margin-left:.25in"><b>Color</b> stores the definition of a color.</p> 
   <p class="MsoNormal" style="margin-left:.25in"><b>Font</b> stores the definition of a font.</p> 
   <p class="MsoNormal" style="margin-left:.25in"><b>Graphics</b> stores the graphics context of a component, and has methods that can be used for drawing on the component.</p> 
   <p class="MsoNormal" style="margin-left:.25in"><b>Image</b> can be used to store an image in JPG or GIF format</p> 
   <p class="MsoNormal" style="margin-left:.25in"><b>Toolkit</b> is used to interface with the user’s environment. It can be used for many things, including loading images from a file.</p> 
   <p class="MsoNormal">Let’s have a look at a simple GUI program that displays an empty window.</p> 
   <p class="MsoNormal"><b>import java.awt.*;<br> </b><b>import java.awt.event.*;<br> </b><b>import javax.swing.*;<br> </b><b>//<br> </b><b>//* This is the public class, where program execution begins<br> </b><b>//* ************************************************<br> </b><b>public class GuiExample<br> </b><b>{</b></p>
   <div style="margin-left: 3%; ">
    <b> </b>
    <b>public static void main(String[] args)<br> </b>
    <b>{</b>
    <div style="margin-left: 3%; ">
     <b> </b>
     <b>JFrame win = new EgWindow(); //Create a window<br> </b>
     <b>win.show(); //Display it</b>
    </div>
    <b> </b>
    <b>}<br></b>
   </div>
   <b> </b>
   <b>}</b>
   <b>&nbsp;</b>
   <p></p> 
   <p class="MsoNormal"><b></b></p>
   <div style="margin-left: 3%; ">
    <b>// </b>
    <b>//* This is the definition of the window, which extends JFrame<br> </b>
    <b>//* **************************************************<br> </b>
    <b>class EgWindow extends JFrame<br> </b>
    <b>{ </b>
    <div style="margin-left: 3%; ">
     <b> </b>
     <b>//<br> </b>
     <b>//* The constructor for EgWindow<br> </b>
     <b>//* ***************************<br> </b>
     <b>public EgWindow()<br> </b>
     <b>{</b>
     <div style="margin-left: 3%; ">
      <b> </b>
      <b>setTitle("Example1");<br> </b>
      <b>setSize(400,300);<br> </b>
      <b>//<br> </b>
      <b>//* An inner class is defined as the window Listener<br> </b>
      <b>//* It is only interested in the windowClosing event,<br> </b>
      <b>//* which will shut down the program<br> </b>
      <b>//* *****************************************<br> </b>
      <b>addWindowListener(new WindowAdapter() {<br> </b>
      <b></b>
      <div style="margin-left: 3%; ">
       <b>public void windowClosing(WindowEvent e)<br> </b>
       <b>{
        <div style="margin-left: 3%; ">
         System.exit(0);
        </div>} // Terminate the program<br> </b>
       <b></b>
      </div>
      <b>});</b>
     </div>
     <b> </b>
     <b>}</b>
    </div>
    <b> </b>
    <b>}</b>
    <p></p> 
    <p class="MsoNormal"><b>Notes:</b></p> 
    <ul> 
     <li>Import statements are included for the AWT, AWT Events and Swing libraries</li> 
     <li>The public class creates an instance of the window,and shows it</li> 
     <li>The EgWindow class extends JFrame</li> 
     <li>Windows are affected by user-driven events, such as the window being closed or minimized. If your program doesn’t check whether the window has been closed, it will simply hang. The addWindowListener method below registers an inner class as a ‘listener’ for window events.You can pretty much cut and paste this code into any class that you write to work with JFrames.<br> <b> addWindowListener(new WindowAdapter() {</b> 
      <div style="margin-left: 3%; "> 
       <b> public void windowClosing(WindowEvent e)</b>
       <br> 
       <b> {
        <div style="margin-left: 3%; ">
         System.exit(0);
        </div>} // Terminate the program</b> 
       <b></b>
      </div><b>});</b></li> 
     <li>When the window is closed, the program will terminate using the <b>exit</b> method of the Java library class System.</li> 
     <li>This program produces a standard window as shown below. The user can move, resize, maximize, minimize and close the window in the standard way.</li> 
     <img name="image1" src="pics/pic9.jpg" alt="" style="background-color: #FFFFFF"> 
     <p class="MsoNormal">Try it!<b>&nbsp;</b></p> 
     <p class="MsoNormal">The next example shows how you can add another component into the window. Building on this example, you can write your own GUI programs that use text boxes, buttons, scrollbars and other things. This one just uses a simple JLabel to display some text.</p> 
     <p class="MsoNormal">Components are never added directly to the window. The window has a Content Pane that is used to store components. So this program first gets a pointer to the content pane, then adds the label to it.<b>&nbsp;</b></p> 
     <p class="MsoNormal"><b>import java.awt.*;<br> </b><b>import java.awt.event.*;<br> </b><b>import javax.swing.*;<br> </b></p>
     <div style="margin-left: 3%; ">
      <b>//<br> </b>
      <b>//* This is the public class, where program execution begins<br> </b>
      <b>//* ************************************************</b>
      <b>&nbsp;</b>
      <p></p> 
      <p class="MsoNormal"><b>public class example2<br> </b><b>{<br> </b><b></b></p>
      <div style="margin-left: 3%; ">
       <b>public static void main(String[] args)<br> </b>
       <b>{<br> </b>
       <b></b>
       <div style="margin-left: 3%; ">
        <b>JFrame Example2 = new EgWindow2(); //Create a window<br> </b>
        <b>Example2.show(); //Display it<br></b>
       </div>
       <b> </b>
       <b>}<br><br></b>
      </div>
      <b> </b>
      <b>}</b>
      <b>&nbsp;</b>
      <p></p> 
      <p class="MsoNormal"><b>//<br> </b><b>//* This is the definition of the window, which extends JFrame<br> </b><b>//* **************************************************<br> </b><b>class EgWindow2 extends JFrame<br> </b><b>{</b></p>
      <div style="margin-left: 3%; ">
       <b> </b>
       <b>//<br> </b>
       <b>//* The constructor for EgWindow2<br> </b>
       <b>//* ***************************<br> </b>
       <b>public EgWindow2()<br> </b>
       <b>{<br></b>
       <div style="margin-left: 3%; ">
        <b> </b>
        <b>setTitle("Example 2");<br> </b>
        <b>setSize(150,120);<br> </b>
        <b>//<br> </b>
        <b>//* Get a pointer to the content pane, create a label<br> </b>
        <b>//* and add it to the content pane<br> </b>
        <b>//* *****************************************<br> </b>
        <b>Container MyContentFrame = getContentPane();<br> </b>
        <b>JLabel NiceDay=new JLabel(" Have a nice day!");<br> </b>
        <b>MyContentFrame.add(NiceDay);<br> </b>
        <b>//<br> </b>
        <b>//* An inner class is defined as the window listener<br> </b>
        <b>//* It is only interested in the windowClosing event,<br> </b>
        <b>//* which will shut down the program<br> </b>
        <b>//* *****************************************<br> </b>
        <b>addWindowListener(new WindowAdapter() {<br> </b>
        <b></b>
        <div style="margin-left: 3%; ">
         <b>public void windowClosing(WindowEvent e)<br> </b>
         <b>{</b>
         <div style="margin-left: 3%; ">
          <b>System.exit(0);</b>
         </div>
         <b>}<br></b>
        </div>
        <b> </b>
        <b>});<br></b>
       </div>
       <b> </b>
       <b>}<br><br></b>
      </div>
      <b> </b>
      <b>}</b>
      <p></p>
     </div> 
     <img name="image1" src="pics/pic10.jpg" alt="" style="background-color: #FFFFFF"> 
     <p class="MsoNormal">We’ll finish off on GUI’s by having a quick look at how we can use the JPanel class to play with drawing and graphics.</p> 
     <p class="MsoNormal">In order to do this, it is necessary to write a new class which extends JPanel, and overwrite its <b>paintComponent</b> method. This method is called automatically by the system whenever the component is drawn on the screen, either initially or after the window has been minimised or hidden by the user.</p> 
     <p class="MsoNormal">The new <b>paintComponent </b>method receives the graphics context of the component as an argument. This is as an object of class Graphics. This Graphics object can then be used to draw the graphics. The first step in the method should be to call <b>paintComponent</b> from the superclass in order to draw the rest of the object.</p> 
     <p class="MsoNormal">This is demonstrated in the following sample program.<b>&nbsp;</b></p> 
     <p class="MsoNormal"><b>import java.awt.*;<br> </b><b>import java.awt.event.*;<br> </b><b>import javax.swing.*;<br> </b><b>//<br> </b><b>//* This is the public class, where program execution begins<br> </b><b>//* ************************************************<br> </b><b>public class example3<br> </b><b>{<br> </b><b></b></p>
     <div style="margin-left: 3%; ">
      <b>public static void main(String[] args)<br> </b>
      <b>{<br> </b>
      <b>JFrame Example3 = new EgWindow3(); //Create a window<br> </b>
      <b>Example3.show(); //Display it<br> </b>
      <b>}</b>
     </div>
     <b> </b>
     <b>}<br> </b>
     <b>//<br> </b>
     <b>//* This is the definition of the window, which extends JFrame<br> </b>
     <b>//* **************************************************<br> </b>
     <b>class EgWindow3 extends JFrame<br> </b>
     <b>{</b>
     <div style="margin-left: 3%; ">
      <b> </b>
      <b>//<br> </b>
      <b>//* The constructor for EgWindow<br> </b>
      <b>//* ***************************<br> </b>
      <b>public EgWindow()<br> </b>
      <b>{</b>
      <div style="margin-left: 3%; ">
       <b> </b>
       <b>setTitle("Example 4");<br> </b>
       <b>setSize(150,100);<br> </b>
       <b>Container Contents=getContentPane();<br> </b>
       <b>JPanel Panel = new PicturePanel();<br> </b>
       <b>Contents.add(Panel);<br> </b>
       <b>addWindowListener(new WindowAdapter() {<br> </b>
       <b></b>
       <div style="margin-left: 3%; ">
        <b>public void windowClosing(WindowEvent e)<br> </b>
        <b>{
         <div style="margin-left: 3%; ">
          System.exit(0);
         </div> </b>
        <b>}</b>
       </div>
       <b> </b>
       <b>});</b>
      </div>
      <b> </b>
      <b>}</b>
     </div>
     <b> </b>
     <b>}<br> </b>
     <b>//*<br> </b>
     <b>//* This class extends JPanel and includes some drawing<br> </b>
     <b>//* objects in the paintComponent method<br> </b>
     <b>// ***********************************************<br> </b>
     <b>class PicturePanel extends JPanel<br> </b>
     <b>{</b>
     <div style="margin-left: 3%; ">
      <b> </b>
      <b>public void paintComponent(Graphics Gr)<br> </b>
      <b>{</b>
      <div style="margin-left: 3%; ">
       <b> </b>
       <b>super.paintComponent(Gr);<br> </b>
       <b>Gr.setColor(Color.yellow);<br> </b>
       <b>Gr.fillOval(55,10,30,30);<br> </b>
       <b>Gr.setFont(new Font("Serif",Font.ITALIC,20));<br> </b>
       <b>Gr.drawString("Sunshine City",12,55);</b>
      </div>
      <b> </b>
      <b>}</b>
     </div>
     <b> </b>
     <b>}</b>
     <b>&nbsp;</b>
     <p></p> 
     <p class="MsoNormal">The program output should look like this:</p> 
     <img name="image1" src="pics/pic11.jpg" alt="" style="background-color: #FFFFFF"> 
    </ul>
   </div> 
   <div id="footer"> 
    <h5 style="font-color: red;">©<a href="http://www.javacodehelp.com" style="color: #000000;">www.javacodehelp.com</a></h5> 
   </div>   
  </div>
 </body>
</html>