<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
 <head> 
  <title>Java Package Tutorial (English version)</title> 
 </head> 
 <body bgcolor="#FFFFFF"> 
  <center>
   <h1>Java Package Tutorial</h1>
   <a href="index.html">(Thai version here)</a>
  </center> 
  <table border="0" cols="3" width="100%" valigh="top"> 
   <tbody>
    <tr> 
     <td width="10">&nbsp;</td> 
     <td><b>by <a href="mailto:pradu@jarticles.com">Patrick Bouklee</a></b> <br> 
      <hr SIZE="1" NOSHADE></td> 
     <td width="10">&nbsp;</td> 
    </tr> 
    <tr> 
     <td width="10">&nbsp;</td> 
     <td><b><h3>Introduction</h3></b> <p>Many times when we get a chance to work on a small project, one thing we intend to do is to put all java files into one single directory. It is quick, easy and harmless. However if our small project gets bigger, and the number of files is increasing, putting all these files into the same directory would be a nightmare for us. In java we can avoid this sort of problem by using Packages. </p><p>Packages are nothing more than the way we organize files into different directories according to their functionality, usability as well as category they should belong to. An obvious example of packaging is the JDK package from SUN (java.xxx.yyy) as shown below: </p><p> </p>
      <center>
       <img SRC="images/java_hierachy.gif"> 
       <p>Figure 1. Basic structure of JDK package</p>
      </center> <p>Basically, files in one directory (or package) would have different functionality from those of another directory. For example, files in java.io package do something related to I/O, but files in java.net package give us the way to deal with the Network. In GUI applications, it's quite common for us to see a directory with a name "ui" (user interface), meaning that this directory keeps files related to the presentation part of the application. On the other hand, we would see a directory called "engine", which stores all files related to the core functionality of the application instead. </p><p> Packaging also help us to avoid class name collision when we use the same class name as that of others. For example, if we have a class name called "<code>Vector</code>", its name would crash with the <code>Vector</code> class from JDK. However, this never happens because JDK use <code>java.util</code> as a package name for the Vector class (<code>java.util.Vector</code>). So our <code>Vector</code> class can be named as "<code>Vector</code>" or we can put it into another package like <code>com.mycompany.Vector</code> without fighting with anyone. The benefits of using package reflect the ease of maintenance, organization, and increase collaboration among developers. Understanding the concept of package will also help us manage and use files stored in jar files in more efficient ways. </p><p> <b></b></p><h3><b>How to create a package</b></h3> <p>Suppose we have a file called <code>HelloWorld.java</code>, and we want to put this file in a package <b><code>world</code></b>. First thing we have to do is to specify the keyword <b><code>package</code></b> with the name of the package we want to use (<b><code>world</code></b> in our case) on top of our source file, before the code that defines the real classes in the package, as shown in our HelloWorld class below: </p><p> </p>
      <blockquote>
       <pre>
<em>// only comment can be here</em>
<b>package world;</b>

public class HelloWorld {
  public static void main(String[] args) {
    System.out.println("Hello World");
  }
}
</pre>
      </blockquote> <p>One thing you must do after creating a package for the class is to create nested subdirectories to represent package hierachy of the class. In our case, we have the <b><code>world</code></b> package, which requires only one directory. So, we create a directory <b><code>world</code></b> and put our HelloWorld.java into it. </p><p> </p>
      <center>
       <img SRC="images/world_helloworld.gif"> 
       <p>Figure 2. HelloWorld in world package (C:\world\HelloWorld.java)</p>
      </center> <p>That's it!!! Right now we have <code>HelloWorld</code> class inside <code>world</code> package. Next, we have to introduce the <code>world</code> package into our <b><code>CLASSPATH</code></b>. </p><p> <b></b></p><h3><b>Setting up the CLASSPATH</b></h3> <p>From figure 2 we put the package <code>world</code> under C:. So we just set our <code>CLASSPATH</code> as: </p>
      <blockquote>
       <pre>set CLASSPATH=.;C:\;</pre>
      </blockquote> We set the <code>CLASSPATH</code> to point to 2 places, . (dot) and C:\ directory. <br>Note: If you used to play around with DOS or UNIX, you may be familiar with . (dot) and .. (dot dot). We use . as an alias for the current directory and .. for the parent directory. In our <code>CLASSPATH</code> we include this . for convenient reason. Java will find our class file not only from C: directory but from the current directory as well. Also, we use ; (semicolon) to separate the directory location in case we keep class files in many places. <p>When compiling <code>HelloWorld</code> class, we just go to the world directory and type the command: </p>
      <blockquote>
       <pre>C:\world\javac HelloWorld.java</pre>
      </blockquote> If you try to run this <code>HelloWorld</code> using <code><b>java HelloWorld</b></code>, you will get the following error: 
      <blockquote>
       <pre>
C:\world&gt;java HelloWorld
Exception in thread "main" java.lang.NoClassDefFoundError: HelloWorld (wrong name: 
world/HelloWorld)
        at java.lang.ClassLoader.defineClass0(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:442)
        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:101)
        at java.net.URLClassLoader.defineClass(URLClassLoader.java:248)
        at java.net.URLClassLoader.access$1(URLClassLoader.java:216)
        at java.net.URLClassLoader$1.run(URLClassLoader.java:197)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(URLClassLoader.java:191)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:290)
        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:286)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
</pre>
      </blockquote> The reason is right now the <code>HelloWorld</code> class belongs to the package <code>world</code>. If we want to run it, we have to tell JVM about its <b>fully-qualified class name</b> <code>(world.HelloWorld)</code> instead of its plain class name <code>(HelloWorld)</code>. 
      <blockquote>
       <pre>
C:\world&gt;java world.HelloWorld
C:\world&gt;Hello World
</pre>
      </blockquote> Note: <b>fully-qualified class name</b> is the name of the java class that includes its package name <p>To make this example more understandable, let's put the <code>HelloWorld</code> class along with its package (<code>world</code>) be under <b>C:\myclasses</b> directory instead. The new location of our <code>HelloWorld</code> should be as shown in Figure 3:</p><p> </p>
      <center>
       <img SRC="images/myclasses_world_helloworld.gif"> 
       <p>Figure 3. HelloWorld class (in world package) under <b>myclasses</b> directory</p>
      </center> <p>We just changed the location of the package from C:\world\HelloWorld.java to C:\myclasses\world\HelloWorld.java. Our <code>CLASSPATH</code> then needs to be changed to point to the new location of the package <code>world</code> accordingly. </p>
      <blockquote>
       <pre>
set CLASSPATH=.;<b>C:\myclasses;</b>
</pre>
      </blockquote> Thus, Java will look for java classes from the current directory and <b>C:\myclasses</b> directory instead. <p>Someone may ask "Do we have to run the <code>HelloWorld</code> at the directory that we store its class file everytime?". The answer is NO. We can run the <code>HelloWorld</code> from anywhere as long as we still include the package <code>world</code> in the <code>CLASSPATH</code>. For example, </p>
      <blockquote>
       <pre>
C:\&gt;set CLASSPATH=.;C:\;

C:\&gt;set CLASSPATH <em>// see what we have in CLSSPATH</em>
CLASSPATH=.;C:\;

C:\&gt;cd world

<b>C:\world&gt;java world.HelloWorld
Hello World</b>

C:\world&gt;cd ..

<b>C:\&gt;java world.HelloWorld
Hello World</b>
</pre>
      </blockquote> <p> <b></b></p><h3><b>Subpackage (package inside another package)</b></h3> Assume we have another file called <b>HelloMoon.java</b>. We want to store it in a subpackage <code><b>"moon"</b></code>, which stays inside package <code><b>world</b></code>. The <code>HelloMoon</code> class should look something like this: 
      <blockquote>
       <pre>
<b>package world.moon;</b>

public class HelloMoon {
  private String holeName = "rabbit hole";
  
  public getHoleName() {
    return hole;
  }
  
  public setHole(String holeName) {
    this.holeName = holeName;
  }
}
</pre>
      </blockquote> <p>If we store the package <code>world</code> under C: as before, the <b>HelloMoon.java</b> would be <b>c:\world\moon\HelloMoon.java</b> as shown in Figure 4 below: </p><p></p>
      <center>
       <img SRC="images/world_moon_hellomoon.gif">
       <p> Figure 4. HelloMoon in world.moon package</p>
      </center> <p> Although we add a subpackage under package world, we still don't have to change anything in our <code>CLASSPATH</code>. However, when we want to reference to the <code>HelloMoon</code> class, we have to use <code>world.moon.HelloMoon</code> as its fully-qualified class name. </p><p></p><h3><b>How to use package</b></h3> There are 2 ways in order to use the public classes stored in package. <br>1. Declare the fully-qualified class name. For example, 
      <blockquote>
       <pre>
...
world.HelloWorld helloWorld = new world.HelloWorld();
world.moon.HelloMoon helloMoon = new world.moon.HelloMoon();
String holeName = helloMoon.getHoleName();
...
</pre>
      </blockquote> 2) Use an "<code>import</code>" keyword: 
      <blockquote>
       <pre>
import world.*;  <em>// we can call any public classes inside the <b>world</b> package</em> 
import world.moon.*;  <em>// we can call any public classes inside the <b>world.moon</b> package</em>
import java.util.*;  <em>// import all public classes from <b>java.util</b> package</em>
import java.util.Hashtable;  <em>// import only <b>Hashtable</b> class (not all classes in java.util package)</em>
</pre>
      </blockquote> 
      <blockquote>
       Thus, the code that we use to call the HelloWorld and HelloMoon class should be 
       <pre>
...
  HelloWorld helloWorld = new HelloWorld(); <em>// don't have to explicitly specify world.HelloWorld anymore</em>
  HelloMoon helloMoon = new HelloMoon(); <em>// don't have to explicitly specify world.moon.HelloMoon anymore</em>
...  
</pre> 
      </blockquote> Note that we can call public classes stored in the package level we do the import only. We can't use any classes that belong to the subpackage of the package we import. For example, if we import package <code>world</code>, we can use only the <code>HelloWorld</code> class, but not the <code>HelloMoon</code> class. <p></p><h3><b>Using classes stored in jar file</b></h3> Jar files are the place where we put a lot of files to be together. We compress these files and make them as a single bundle. Jar files may also include directories, subdirectories to represent class and package hierachy. Normally, we can see what is inside a jar file by using the command <code><b>jar -tvf fileName.jar </b></code>as shown in Figure 5: <p> </p>
      <center> 
       <img SRC="images/jar.gif"> 
       <p>Figure 5. JSDK package viewed by <b>jar -tvf jsdk.jar</b> command</p>
      </center> <p> From figure 5 we see that there is a class called <code>javax.servlet.http.Cookie</code>. We can call this class by </p>
      <blockquote>
       <pre>
import javax.servlet.http.Cookie; <em>// import only Cookie class or</em>  
import javax.servlet.http.*; <em>// import the whole javax.servlet.http package</em>
</pre>
      </blockquote> <p>But we have to include this package in the <code>CLASSPATH</code> as well. </p>
      <blockquote>
       <pre>
set CLASSPATH=.;D:\JSDK2.0\lib\jsdk.jar;
</pre>
      </blockquote> Note that if the package is stored inside a jar file, we have to include the jar file with its extension (.jar) in the <code>CLASSPATH</code>. However, if the package is a plain directory, we just put the name of directory into the <code>CLASSPATH</code>. <br> 
      <hr SIZE="1" NOSHADE> 
      <center>
       <font face="Arial, Helvetica"><font size="-2">
         <nobr>
          Copyright (C) 2000-2001 
          <a href="http://www.jarticles.com">www.jarticles.com</a>
         </nobr>.</font></font>
      </center> 
      <!-- last updated 08/2/2001, Fairfield NJ --> </td> 
     <td width="10">&nbsp;</td> 
    </tr> 
   </tbody>
  </table> 
  <script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-37601040-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script> 
  <!-- WiredMinds eMetrics tracking with Enterprise Edition V5.4 START --> 
  <script type="text/javascript" src="https://count.carrierzone.com/app/count_server/count.js"></script> 
  <script type="text/javascript"><!--
wm_custnum='3393635a88d9dbf8';
wm_page_name='package_eng.html';
wm_group_name='/services/webpages/j/a/jarticles.com/public/package';
wm_campaign_key='campaign_id';
wm_track_alt='';
wiredminds.count();
// -->
</script> 
  <!-- WiredMinds eMetrics tracking with Enterprise Edition V5.4 END -->   
 </body>
</html>