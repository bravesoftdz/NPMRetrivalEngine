<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width initial-scale=1"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <title>
    
    Simple Android and Java Bluetooth Application | Luu Gia Thuy
    
  </title> 
  <meta name="author" content="Luu Gia Thuy"> 
  <meta name="description" content="A Bluetooth server/client application: A simple client Android app to control a server Java program (using Bluecove) via Bluetooth."> 
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"> 
  <link rel="alternate" type="application/rss+xml" href="/feed.xml"> 
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"> 
  <link rel="stylesheet" href="/css/styles.css"> 
  <link rel="apple-touch-icon" href="/apple-touch-icon.png"> 
  <script src="https://code.jquery.com/jquery-3.1.1.min.js" integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=" crossorigin="anonymous"></script> 
  <script src="/js/application.js"></script> 
  <link rel="canonical" href="http://luugiathuy.com/2011/02/android-java-bluetooth/"> 
  <!--[if lt IE 9]>
  <script src="lib/js/html5shiv.js"></script>
  <![endif]--> 
 </head> 
 <body> 
  <section class="sidebar"> 
   <a href="/"> <img src="/images/avatar.jpg" height="75" width="75" class="avatar" alt="Avatar"> </a> 
   <section class="name"> 
    <a href="/"> <span id="lname">Luu Gia Thuy</span> 
     <!-- <span id="fname">Luu Gia Thuy</span> --> </a> 
   </section> 
   <section class="meta"> 
    <a href="https://github.com/luugiathuy" target="_blank"> <i class="fa fa-github"></i> </a> 
    <a href="https://twitter.com/luugiathuy" target="_blank"> <i class="fa fa-twitter"></i> </a> 
    <a href="https://linkedin.com/in/luugiathuy" target="_blank"> <i class="fa fa-linkedin"></i> </a> 
    <a href="/feed.xml"> <i class="fa fa-rss"></i> </a> 
   </section> 
   <section class="sections"> 
    <ul> 
     <li><a class="page-link" href="/about">about</a></li> 
     <li><a class="page-link" href="/">posts</a></li> 
     <li><a class="page-link" href="/apps">apps</a></li> 
     <li><a class="page-link" href="/resources">resources</a></li> 
    </ul> 
   </section> 
  </section> 
  <section class="content"> 
   <h1> <a href="/2011/02/android-java-bluetooth/">Simple Android and Java Bluetooth Application</a> </h1> 
   <section class="byline">
     February 28, 2011 
   </section> 
   <p>Last week was my school’s recess week. I had a lot of free time and decided to learn Java and Android Bluetooth by reading the <a href="http://developer.android.com/guide/topics/wireless/bluetooth.html">Bluetooth development guide for Android</a>. Then I had an idea to make my Android phone become a simple remote control for my laptop, just for controlling the Power Point slides for presentation. The volume up and volume down become buttons for going to next and previous slide respectively. I write this post to share with you what I have done. I have used Ecipse IDE to write the program.</p> 
   <p><strong>REMOTE CONTROL SERVER (Java)</strong></p> 
   <p>Firstly, we need to write the remote control server to receive the signal from Android phone. I used a Java library for Bluetooth called <a href="http://bluecove.org">BlueCove</a> to implement the server. You can download the <a href="http://sourceforge.net/projects/bluecove/files/BlueCove/2.1.0">bluecove-2.1.0.jar</a> file and add it to your external library. Note that <strong>for Linux</strong>, you need to install the <code class="highlighter-rouge">bluez-libs</code> to your system and add <code class="highlighter-rouge">bluecove-gpl-2.1.0.jar</code> to external library of the project as well (more information <a href="http://bluecove.org/bluecove-gpl">here</a>).</p> 
   <p>Here is my <em>RemoteBluetoothServer</em> class:</p> 
   <div class="language-java highlighter-rouge">
    <pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">luugiathuy</span><span class="o">.</span><span class="na">apps</span><span class="o">.</span><span class="na">remotebluetooth</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RemoteBluetoothServer</span><span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Thread</span> <span class="n">waitThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">WaitThread</span><span class="o">());</span>
        <span class="n">waitThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre> 
   </div> 
   <p>The main method creates a thread to wait for connection from client and handle the signal.</p> 
   <div class="language-java highlighter-rouge">
    <pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">luugiathuy</span><span class="o">.</span><span class="na">apps</span><span class="o">.</span><span class="na">remotebluetooth</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.bluetooth.DiscoveryAgent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.bluetooth.LocalDevice</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.bluetooth.UUID</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.microedition.io.Connector</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.microedition.io.StreamConnection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.microedition.io.StreamConnectionNotifier</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WaitThread</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>

    <span class="cm">/** Constructor */</span>
    <span class="kd">public</span> <span class="nf">WaitThread</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">waitForConnection</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/** Waiting for connection from devices */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">waitForConnection</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// retrieve the local Bluetooth device object</span>
        <span class="n">LocalDevice</span> <span class="n">local</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="n">StreamConnectionNotifier</span> <span class="n">notifier</span><span class="o">;</span>
        <span class="n">StreamConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="c1">// setup the server to listen for connection</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">local</span> <span class="o">=</span> <span class="n">LocalDevice</span><span class="o">.</span><span class="na">getLocalDevice</span><span class="o">();</span>
            <span class="n">local</span><span class="o">.</span><span class="na">setDiscoverable</span><span class="o">(</span><span class="n">DiscoveryAgent</span><span class="o">.</span><span class="na">GIAC</span><span class="o">);</span>

            <span class="n">UUID</span> <span class="n">uuid</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UUID</span><span class="o">(</span><span class="mi">80087355</span><span class="o">);</span> <span class="c1">// "04c6093b-0000-1000-8000-00805f9b34fb"</span>
            <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"btspp://localhost:"</span> <span class="o">+</span> <span class="n">uuid</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">";name=RemoteBluetooth"</span><span class="o">;</span>
            <span class="n">notifier</span> <span class="o">=</span> <span class="o">(</span><span class="n">StreamConnectionNotifier</span><span class="o">)</span><span class="n">Connector</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">url</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
                <span class="c1">// waiting for connection</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"waiting for connection..."</span><span class="o">);</span>
                        <span class="n">connection</span> <span class="o">=</span> <span class="n">notifier</span><span class="o">.</span><span class="na">acceptAndOpen</span><span class="o">();</span>

                <span class="n">Thread</span> <span class="n">processThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">ProcessConnectionThread</span><span class="o">(</span><span class="n">connection</span><span class="o">));</span>
                <span class="n">processThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="k">return</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre> 
   </div> 
   <p>In <code class="highlighter-rouge">waitForConnection()</code> function, firstly it sets up the server by setting the device discoverable, creating the UUID for this application (the client needs this to communicate with server). Then it waits for a connection from a client. When it receives initial connection, it creates a <code class="highlighter-rouge">ProcessConnectionThread</code> to handle the client’s command. Here is the code for <code class="highlighter-rouge">ProcessConnectionThread</code> class:</p> 
   <div class="language-java highlighter-rouge">
    <pre class="highlight"><code><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">luugiathuy</span><span class="o">.</span><span class="na">apps</span><span class="o">.</span><span class="na">remotebluetooth</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.awt.Robot</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.KeyEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.microedition.io.StreamConnection</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProcessConnectionThread</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="n">StreamConnection</span> <span class="n">mConnection</span><span class="o">;</span>

    <span class="c1">// Constant that indicate command from devices</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">EXIT_CMD</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">KEY_RIGHT</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">KEY_LEFT</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ProcessConnectionThread</span><span class="o">(</span><span class="n">StreamConnection</span> <span class="n">connection</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="n">mConnection</span> <span class="o">=</span> <span class="n">connection</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c1">// prepare to receive data</span>
            <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">mConnection</span><span class="o">.</span><span class="na">openInputStream</span><span class="o">();</span>

            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"waiting for input"</span><span class="o">);</span>

            <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">command</span> <span class="o">=</span> <span class="n">inputStream</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>

                <span class="k">if</span> <span class="o">(</span><span class="n">command</span> <span class="o">==</span> <span class="n">EXIT_CMD</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"finish process"</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="n">processCommand</span><span class="o">(</span><span class="n">command</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="cm">/** * Process the command from client * @param command the command code */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">processCommand</span><span class="o">(</span><span class="kt">int</span> <span class="n">command</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Robot</span> <span class="n">robot</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Robot</span><span class="o">();</span>
            <span class="k">switch</span> <span class="o">(</span><span class="n">command</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">case</span> <span class="nl">KEY_RIGHT:</span>
                    <span class="n">robot</span><span class="o">.</span><span class="na">keyPress</span><span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">VK_RIGHT</span><span class="o">);</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Right"</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="nl">KEY_LEFT:</span>
                    <span class="n">robot</span><span class="o">.</span><span class="na">keyPress</span><span class="o">(</span><span class="n">KeyEvent</span><span class="o">.</span><span class="na">VK_LEFT</span><span class="o">);</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Left"</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre> 
   </div> 
   <p>The <code class="highlighter-rouge">ProcessConnectionThread</code> mainly waiting for the client’s inputs and process them. This is simple remote control only for going next/previous of Power Point slide so it only process <em>KEY_RIGHT</em> and <em>KEY_LEFT</em> input. I use <em>Robot</em> class from <code class="highlighter-rouge">java.awt.Robot</code> to generate the key events.</p> 
   <p>That’s all we need for the Remote Control Server. <em><strong>When you run the server on a computer, make sure that the Bluetooth is ON.</strong></em></p> 
   <p><strong>REMOTE CONTROL CLIENT (Android)</strong></p> 
   <p>For the client on Android phone, I have followed the guide from <a href="http://developer.android.com/guide/topics/wireless/bluetooth.html">Android Developer Guide</a> and the <a href="http://developer.android.com/resources/samples/BluetoothChat/index.html">sample Bluetooth Chat application</a> (You can find this application in the android sdk sample folder).</p> 
   <p>My program is based on the sample application. The <code class="highlighter-rouge">DeviceListActivity</code> class is for scanning devices around to find the remote server and connect to it. The <code class="highlighter-rouge">BluetoothCommandService</code> class is for setting up the connection and sending the command to our Remote Control Server. These two files are similar to the sample application. In BluetoothCommandService, I have removed the <code class="highlighter-rouge">AcceptThread</code> since the client not need to wait for any connection. The <code class="highlighter-rouge">ConnectThread</code> is for initializing the connection with server. The <code class="highlighter-rouge">ConnectedThread</code> is for sending the command to server.</p> 
   <p>The <code class="highlighter-rouge">RemoteBluetooth</code> class is our main activity for this application:</p> 
   <div class="language-java highlighter-rouge">
    <pre class="highlight"><code><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onStart</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">.</span><span class="na">onStart</span><span class="o">();</span>

    <span class="c1">// If BT is not on, request that it be enabled.</span>
    <span class="c1">// setupCommand() will then be called during onActivityResult</span>
    <span class="k">if</span> <span class="o">(!</span><span class="n">mBluetoothAdapter</span><span class="o">.</span><span class="na">isEnabled</span><span class="o">())</span> <span class="o">{</span>
        <span class="n">Intent</span> <span class="n">enableIntent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">BluetoothAdapter</span><span class="o">.</span><span class="na">ACTION_REQUEST_ENABLE</span><span class="o">);</span>
        <span class="n">startActivityForResult</span><span class="o">(</span><span class="n">enableIntent</span><span class="o">,</span> <span class="n">REQUEST_ENABLE_BT</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// otherwise set up the command service</span>
    <span class="k">else</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">mCommandService</span><span class="o">==</span><span class="kc">null</span><span class="o">)</span>
            <span class="n">setupCommand</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">void</span> <span class="nf">setupCommand</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// Initialize the BluetoothChatService to perform bluetooth connections</span>
    <span class="n">mCommandService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BluetoothCommandService</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">mHandler</span><span class="o">);</span>
<span class="o">}</span>
</code></pre> 
   </div> 
   <p>The <code class="highlighter-rouge">onStart()</code> function to check whether the bluetooth on our phone is enabled or not. If not, it creates an Intent to turn the bluetooth on. The <code class="highlighter-rouge">setupCommand()</code> to create <code class="highlighter-rouge">BluetoothCommandService</code> object to send the command when we push the Volume Up and Down buttons:</p> 
   <div class="language-java highlighter-rouge">
    <pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onKeyDown</span><span class="o">(</span><span class="kt">int</span> <span class="n">keyCode</span><span class="o">,</span> <span class="n">KeyEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">keyCode</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_VOLUME_UP</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mCommandService</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">BluetoothCommandService</span><span class="o">.</span><span class="na">VOL_UP</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">keyCode</span> <span class="o">==</span> <span class="n">KeyEvent</span><span class="o">.</span><span class="na">KEYCODE_VOLUME_DOWN</span><span class="o">){</span>
        <span class="n">mCommandService</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">BluetoothCommandService</span><span class="o">.</span><span class="na">VOL_DOWN</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">onKeyDown</span><span class="o">(</span><span class="n">keyCode</span><span class="o">,</span> <span class="n">event</span><span class="o">);</span>
<span class="o">}</span>
</code></pre> 
   </div> 
   <p>That’s it. Now we can run the server, install the application to the phone and run it :-)</p> 
   <p>You can go to <a href="https://github.com/luugiathuy/Remote-Bluetooth-Android">my GitHub</a> to download the project for client and server.</p> 
   <p><strong>Update:</strong> I developed this application using android sdk 2.1. And as comments below, the application is not working with Android SDK 3.x. I don’t have Android tablet to test it yet. Sorry about that.</p> 
   <!-- TODO: bio here --> 
   <section class="meta"> 
    <h3>Discussion, links, and tweets</h3> 
    <section class="copy"> 
     <a href="https://twitter.com/luugiathuy" target="_blank"> <img src="/images/avatar.jpg" height="50" width="50"> </a> 
     <a href="http://twitter.com/share" class="twitter-share-button" data-count="none" data-via="luugiathuy">Tweet</a> 
     <a href="http://twitter.com/luugiathuy" class="twitter-follow-button" data-show-count="false">Follow @luugiathuy</a> 
     <script src="http://platform.twitter.com/widgets.js" type="text/javascript"></script> 
    </section> 
   </section> 
  </section> 
  <footer> 
   <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    ga('create', 'UA-21689285-1', 'auto');
    ga('send', 'pageview');
  </script> 
   <script type="application/ld+json">
  {
    "@context": "http://schema.org",
    "@type": "WebSite",
    "name": "Luu Gia Thuy's Website",
    "alternateName": "Luu Gia Thuy's Website",
    "logo": "http://luugiathuy.com/images/avatar.jpg",
    "url": "http://luugiathuy.com"
  }
  </script> 
  </footer>   
 </body>
</html>