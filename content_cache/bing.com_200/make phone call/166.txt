<!doctype html>
<html class="client-nojs" lang="en" dir="ltr">
 <head> 
  <meta charset="UTF-8"> 
  <title>Java Programming/Print version - Wikibooks, open books for an open world</title> 
  <script>document.documentElement.className = document.documentElement.className.replace( /(^|\s)client-nojs(\s|$)/, "$1client-js$2" );</script> 
  <script>(window.RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Java_Programming/Print_version","wgTitle":"Java Programming/Print version","wgCurRevisionId":3302062,"wgRevisionId":3302062,"wgArticleId":90517,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Pages with deep filing","Book:Java Programming"],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Java_Programming/Print_version","wgRelevantArticleId":90517,"wgRequestId":"WdJ1MgpAMFEAAHS@JosAAAAF","wgIsProbablyEditable":true,"wgRelevantPageIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgFlaggedRevsParams":{"tags":{"value":{"levels":3,"quality":2,"pristine":3}}},"wgStableRevisionId":3302062,"wgWikiEditorEnabledModules":{"toolbar":true,"preview":false,"publish":false},"wgBetaFeaturesFeatures":[],"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":false,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en","usePageImages":false,"usePageDescriptions":true},"wgPreferredVariant":"en","wgMFExpandAllSectionsUserOption":false,"wgMFDisplayWikibaseDescriptions":{"search":true,"nearby":true,"watchlist":true,"tagline":false},"wgULSCurrentAutonym":"English","wgNoticeProject":"wikibooks","wgCentralNoticeCookiesToDelete":[],"wgCentralNoticeCategoriesUsingLegacy":["Fundraising","fundraising"],"wgCategoryTreePageCategoryOptions":"{\"mode\":0,\"hideprefix\":20,\"showcount\":true,\"namespaces\":false}","wgCentralAuthMobileDomain":false,"wgVisualEditorToolbarScrollOffset":0,"wgVisualEditorUnsupportedEditParams":["undo","undoafter","veswitched"],"wgEditSubmitButtonLabelPublish":true});mw.loader.state({"ext.globalCssJs.user.styles":"ready","ext.globalCssJs.site.styles":"ready","site.styles":"ready","noscript":"ready","user.styles":"ready","user":"ready","user.options":"ready","user.tokens":"loading","ext.cite.styles":"ready","ext.pygments":"ready","ext.math.styles":"ready","wikibase.client.init":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","ext.wikimediaBadges":"ready","ext.flaggedRevs.basic":"ready","mediawiki.legacy.shared":"ready","mediawiki.legacy.commonPrint":"ready","mediawiki.sectionAnchor":"ready","mediawiki.skinning.interface":"ready","skins.vector.styles":"ready","ext.globalCssJs.user":"ready","ext.globalCssJs.site":"ready"});mw.loader.implement("user.tokens@1dqfd7l",function ( $, jQuery, require, module ) {
mw.user.tokens.set({"editToken":"+\\","patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});/*@nomin*/

});mw.loader.load(["ext.cite.a11y","ext.math.scripts","site","mediawiki.page.startup","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","jquery.tablesorter","mediawiki.toc","mediawiki.searchSuggest","ext.gadget.wikidialog","ext.gadget.commons-file","ext.centralauth.centralautologin","mmv.head","mmv.bootstrap.autostart","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.eventLogging.subscriber","ext.wikimediaEvents","ext.navigationTiming","ext.uls.eventlogger","ext.uls.init","ext.uls.compactlinks","ext.uls.interface","ext.centralNotice.geoIP","ext.centralNotice.startUp","ext.flaggedRevs.advanced","skins.vector.js"]);});</script> 
  <link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=ext.cite.styles%7Cext.flaggedRevs.basic%7Cext.math.styles%7Cext.pygments%2CwikimediaBadges%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cmediawiki.legacy.commonPrint%2Cshared%7Cmediawiki.sectionAnchor%7Cmediawiki.skinning.interface%7Cskins.vector.styles%7Cwikibase.client.init&amp;only=styles&amp;skin=vector"> 
  <script async src="/w/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector"></script> 
  <meta name="ResourceLoaderDynamicStyles" content=""> 
  <link rel="stylesheet" href="/w/load.php?debug=false&amp;lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector"> 
  <meta name="generator" content="MediaWiki 1.31.0-wmf.1"> 
  <meta name="referrer" content="origin-when-cross-origin"> 
  <link rel="alternate" type="application/x-wiki" title="Edit" href="/w/index.php?title=Java_Programming/Print_version&amp;action=edit"> 
  <link rel="edit" title="Edit" href="/w/index.php?title=Java_Programming/Print_version&amp;action=edit"> 
  <link rel="shortcut icon" href="/static/favicon/wikibooks.ico"> 
  <link rel="search" type="application/opensearchdescription+xml" href="/w/opensearch_desc.php" title="Wikibooks (en)"> 
  <link rel="EditURI" type="application/rsd+xml" href="//en.wikibooks.org/w/api.php?action=rsd"> 
  <link rel="license" href="//creativecommons.org/licenses/by-sa/3.0/"> 
  <link rel="alternate" type="application/atom+xml" title="Wikibooks Atom feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom"> 
  <link rel="canonical" href="https://en.wikibooks.org/wiki/Java_Programming/Print_version"> 
  <link rel="dns-prefetch" href="//login.wikimedia.org"> 
  <link rel="dns-prefetch" href="//meta.wikimedia.org"> 
  <!--[if lt IE 9]><script src="/resources/lib/html5shiv/html5shiv.min.js"></script><![endif]--> 
 </head> 
 <body class="mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject page-Java_Programming_Print_version rootpage-Java_Programming vector-nav-directionality skin-vector action-view"> 
  <div id="mw-page-base" class="noprint"></div> 
  <div id="mw-head-base" class="noprint"></div> 
  <div id="content" class="mw-body" role="main"> 
   <a id="top"></a> 
   <div id="siteNotice" class="mw-body-content">
    <!-- CentralNotice -->
   </div> 
   <div class="mw-indicators mw-body-content"> 
   </div> 
   <h1 id="firstHeading" class="firstHeading" lang="en">Java Programming/Print version</h1> 
   <div id="bodyContent" class="mw-body-content"> 
    <div id="siteSub" class="noprint">
     From Wikibooks, open books for an open world
    </div> 
    <div id="contentSub">
     <span class="subpages">&lt; <a href="/wiki/Java_Programming" title="Java Programming">Java Programming</a></span>
    </div> 
    <div id="jump-to-nav" class="mw-jump">
      Jump to: 
     <a href="#mw-head">navigation</a>, 
     <a href="#p-search">search</a> 
    </div> 
    <div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr">
     <div class="mw-parser-output">
      <table class="metadata plainlinks ambox ambox-notice" style=""> 
       <tbody>
        <tr> 
         <td class="mbox-image"> 
          <div style="width: 52px;">
           <a href="/wiki/File:Printer.svg" class="image"><img alt="Printer.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/23/Printer.svg/40px-Printer.svg.png" width="40" height="40" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/23/Printer.svg/60px-Printer.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/23/Printer.svg/80px-Printer.svg.png 2x" data-file-width="48" data-file-height="48"></a>
          </div> </td> 
         <td class="mbox-text" style=""><b>This is the <a href="/wiki/Help:Print_versions" title="Help:Print versions">print version</a> of <a href="/wiki/Java_Programming" title="Java Programming">Java Programming</a></b><br> You won't see this message or any elements not part of the book's content when you print or <a class="external text" href="//en.wikibooks.org/w/index.php?title=Java_Programming/Print_version&amp;printable=yes">preview</a> this page.</td> 
        </tr> 
       </tbody>
      </table> 
      <p></p> 
      <div id="toc" class="toc"> 
       <div class="toctitle"> 
        <h2>Contents</h2> 
       </div> 
       <ul> 
        <li class="toclevel-1 tocsection-1"><a href="#Overview"><span class="tocnumber">1</span> <span class="toctext">Overview</span></a></li> 
        <li class="toclevel-1"><a href="#Preface"><span class="tocnumber">2</span> <span class="toctext">Preface</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Are_you_new_to_programming.3F"><span class="tocnumber">2.1</span> <span class="toctext">Are you new to programming?</span></a></li> 
          <li class="toclevel-2"><a href="#Programming_with_Java.E2.84.A2"><span class="tocnumber">2.2</span> <span class="toctext">Programming with Java™</span></a></li> 
          <li class="toclevel-2"><a href="#What_can_Java_not_do.3F"><span class="tocnumber">2.3</span> <span class="toctext">What can Java <i>not</i> do?</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#About_This_Book"><span class="tocnumber">3</span> <span class="toctext">About This Book</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Who_should_read_this_book.3F"><span class="tocnumber">3.1</span> <span class="toctext">Who should read this book?</span></a></li> 
          <li class="toclevel-2"><a href="#How_to_use_this_book"><span class="tocnumber">3.2</span> <span class="toctext">How to use this book</span></a></li> 
          <li class="toclevel-2"><a href="#How_can_you_participate"><span class="tocnumber">3.3</span> <span class="toctext">How can you participate</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#As_a_reader"><span class="tocnumber">3.3.1</span> <span class="toctext">As a reader</span></a></li> 
            <li class="toclevel-3"><a href="#As_a_contributor"><span class="tocnumber">3.3.2</span> <span class="toctext">As a contributor</span></a></li> 
           </ul> </li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#History"><span class="tocnumber">4</span> <span class="toctext">History</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Earlier_programming_languages"><span class="tocnumber">4.1</span> <span class="toctext">Earlier programming languages</span></a></li> 
          <li class="toclevel-2"><a href="#The_Green_team"><span class="tocnumber">4.2</span> <span class="toctext">The Green team</span></a></li> 
          <li class="toclevel-2"><a href="#Reshaping_thought"><span class="tocnumber">4.3</span> <span class="toctext">Reshaping thought</span></a></li> 
          <li class="toclevel-2"><a href="#The_demise_of_an_idea.2C_birth_of_another"><span class="tocnumber">4.4</span> <span class="toctext">The demise of an idea, birth of another</span></a></li> 
          <li class="toclevel-2"><a href="#Versions"><span class="tocnumber">4.5</span> <span class="toctext">Versions</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Initial_Release_.28versions_1.0_and_1.1.29"><span class="tocnumber">4.5.1</span> <span class="toctext">Initial Release (versions 1.0 and 1.1)</span></a></li> 
            <li class="toclevel-3"><a href="#Java_2_.28version_1.2.29"><span class="tocnumber">4.5.2</span> <span class="toctext">Java 2 (version 1.2)</span></a></li> 
            <li class="toclevel-3"><a href="#Kestrel_.28Java_1.3.29"><span class="tocnumber">4.5.3</span> <span class="toctext">Kestrel (Java 1.3)</span></a></li> 
            <li class="toclevel-3"><a href="#Merlin_.28Java_1.4.29"><span class="tocnumber">4.5.4</span> <span class="toctext">Merlin (Java 1.4)</span></a></li> 
            <li class="toclevel-3"><a href="#Tiger_.28version_1.5.0.3B_Java_SE_5.29"><span class="tocnumber">4.5.5</span> <span class="toctext">Tiger (version 1.5.0; Java SE 5)</span></a></li> 
            <li class="toclevel-3"><a href="#Mustang_.28version_1.6.0.3B_Java_SE_6.29"><span class="tocnumber">4.5.6</span> <span class="toctext">Mustang (version 1.6.0; Java SE 6)</span></a></li> 
            <li class="toclevel-3"><a href="#Dolphin_.28version_1.7.0.3B_Java_SE_7.29"><span class="tocnumber">4.5.7</span> <span class="toctext">Dolphin (version 1.7.0; Java SE 7)</span></a></li> 
            <li class="toclevel-3"><a href="#Spider_.28version_1.8.0.3B_Java_SE_8.29"><span class="tocnumber">4.5.8</span> <span class="toctext">Spider (version 1.8.0; Java SE 8)</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#References"><span class="tocnumber">4.6</span> <span class="toctext">References</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Java_Overview"><span class="tocnumber">5</span> <span class="toctext">Java Overview</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Object_orientation"><span class="tocnumber">5.1</span> <span class="toctext">Object orientation</span></a></li> 
          <li class="toclevel-2"><a href="#Platform_dependence"><span class="tocnumber">5.2</span> <span class="toctext">Platform dependence</span></a></li> 
          <li class="toclevel-2"><a href="#Standardization"><span class="tocnumber">5.3</span> <span class="toctext">Standardization</span></a></li> 
          <li class="toclevel-2"><a href="#Secure_execution"><span class="tocnumber">5.4</span> <span class="toctext">Secure execution</span></a></li> 
          <li class="toclevel-2"><a href="#Error_handling"><span class="tocnumber">5.5</span> <span class="toctext">Error handling</span></a></li> 
          <li class="toclevel-2"><a href="#Networking_capabilities"><span class="tocnumber">5.6</span> <span class="toctext">Networking capabilities</span></a></li> 
          <li class="toclevel-2"><a href="#Dynamic_class_loading"><span class="tocnumber">5.7</span> <span class="toctext">Dynamic class loading</span></a></li> 
          <li class="toclevel-2"><a href="#Automatic_memory_garbage_collection"><span class="tocnumber">5.8</span> <span class="toctext">Automatic memory garbage collection</span></a></li> 
          <li class="toclevel-2"><a href="#Applet"><span class="tocnumber">5.9</span> <span class="toctext">Applet</span></a></li> 
          <li class="toclevel-2"><a href="#Forbidden_bad_practices"><span class="tocnumber">5.10</span> <span class="toctext">Forbidden bad practices</span></a></li> 
          <li class="toclevel-2"><a href="#Evaluation"><span class="tocnumber">5.11</span> <span class="toctext">Evaluation</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#The_Java_Platform"><span class="tocnumber">6</span> <span class="toctext">The Java Platform</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Java_Runtime_Environment_.28JRE.29"><span class="tocnumber">6.1</span> <span class="toctext">Java Runtime Environment (JRE)</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Executing_native_Java_code_.28or_byte-code.29"><span class="tocnumber">6.1.1</span> <span class="toctext">Executing native Java code (or <i>byte-code</i>)</span></a></li> 
            <li class="toclevel-3"><a href="#Do_you_have_a_JRE.3F"><span class="tocnumber">6.1.2</span> <span class="toctext">Do you have a JRE?</span></a></li> 
            <li class="toclevel-3"><a href="#Java_Virtual_Machine_.28JVM.29"><span class="tocnumber">6.1.3</span> <span class="toctext">Java Virtual Machine (JVM)</span></a> 
             <ul> 
              <li class="toclevel-4"><a href="#Just-in-Time_Compilation"><span class="tocnumber">6.1.3.1</span> <span class="toctext">Just-in-Time Compilation</span></a></li> 
              <li class="toclevel-4"><a href="#Native_optimization"><span class="tocnumber">6.1.3.2</span> <span class="toctext">Native optimization</span></a></li> 
              <li class="toclevel-4"><a href="#Was_JVM_the_first_virtual_machine.3F"><span class="tocnumber">6.1.3.3</span> <span class="toctext">Was JVM the first <i>virtual machine</i>?</span></a></li> 
             </ul> </li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Java_Development_Kit_.28JDK.29"><span class="tocnumber">6.2</span> <span class="toctext">Java Development Kit (JDK)</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#The_Java_compiler"><span class="tocnumber">6.2.1</span> <span class="toctext">The Java compiler</span></a></li> 
            <li class="toclevel-3"><a href="#Applet_development"><span class="tocnumber">6.2.2</span> <span class="toctext">Applet development</span></a></li> 
            <li class="toclevel-3"><a href="#Annotation_processing"><span class="tocnumber">6.2.3</span> <span class="toctext">Annotation processing</span></a></li> 
            <li class="toclevel-3"><a href="#Integration_of_non-Java_and_Java_code"><span class="tocnumber">6.2.4</span> <span class="toctext">Integration of non-Java and Java code</span></a></li> 
            <li class="toclevel-3"><a href="#Class_library_conflicts"><span class="tocnumber">6.2.5</span> <span class="toctext">Class library conflicts</span></a></li> 
            <li class="toclevel-3"><a href="#Software_security_and_cryptography_tools"><span class="tocnumber">6.2.6</span> <span class="toctext">Software security and cryptography tools</span></a></li> 
            <li class="toclevel-3"><a href="#The_Java_archiver"><span class="tocnumber">6.2.7</span> <span class="toctext">The Java archiver</span></a></li> 
            <li class="toclevel-3"><a href="#The_Java_debugger"><span class="tocnumber">6.2.8</span> <span class="toctext">The Java debugger</span></a></li> 
            <li class="toclevel-3"><a href="#Documenting_code_with_Java"><span class="tocnumber">6.2.9</span> <span class="toctext">Documenting code with Java</span></a></li> 
            <li class="toclevel-3"><a href="#The_native2ascii_tool"><span class="tocnumber">6.2.10</span> <span class="toctext">The native2ascii tool</span></a></li> 
            <li class="toclevel-3"><a href="#Remote_Method_Invocation_.28RMI.29_tools"><span class="tocnumber">6.2.11</span> <span class="toctext">Remote Method Invocation (RMI) tools</span></a></li> 
            <li class="toclevel-3"><a href="#Java_IDL_and_RMI-IIOP_Tools"><span class="tocnumber">6.2.12</span> <span class="toctext">Java IDL and RMI-IIOP Tools</span></a></li> 
            <li class="toclevel-3"><a href="#Deployment_.26_Web_Start_Tools"><span class="tocnumber">6.2.13</span> <span class="toctext">Deployment &amp; Web Start Tools</span></a></li> 
            <li class="toclevel-3"><a href="#Browser_Plug-In_Tools"><span class="tocnumber">6.2.14</span> <span class="toctext">Browser Plug-In Tools</span></a></li> 
            <li class="toclevel-3"><a href="#Monitoring_and_Management_Tools_.2F_Troubleshooting_Tools"><span class="tocnumber">6.2.15</span> <span class="toctext">Monitoring and Management Tools / Troubleshooting Tools</span></a></li> 
            <li class="toclevel-3"><a href="#Java_class_libraries_.28JCL.29"><span class="tocnumber">6.2.16</span> <span class="toctext">Java class libraries (JCL)</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Similar_concepts"><span class="tocnumber">6.3</span> <span class="toctext">Similar concepts</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#The_.NET_framework"><span class="tocnumber">6.3.1</span> <span class="toctext">The .NET framework</span></a></li> 
            <li class="toclevel-3"><a href="#Third-party_compilers_targeting_the_JVM"><span class="tocnumber">6.3.2</span> <span class="toctext">Third-party compilers targeting the JVM</span></a></li> 
           </ul> </li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Getting_started"><span class="tocnumber">7</span> <span class="toctext">Getting started</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Understanding_systems"><span class="tocnumber">7.1</span> <span class="toctext">Understanding systems</span></a></li> 
          <li class="toclevel-2"><a href="#The_process_of_abstraction"><span class="tocnumber">7.2</span> <span class="toctext">The process of abstraction</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Thinking_in_objects"><span class="tocnumber">7.2.1</span> <span class="toctext">Thinking in objects</span></a></li> 
            <li class="toclevel-3"><a href="#Understanding_class_definitions_and_types"><span class="tocnumber">7.2.2</span> <span class="toctext">Understanding class definitions and types</span></a></li> 
            <li class="toclevel-3"><a href="#Expanding_your_class_definitions"><span class="tocnumber">7.2.3</span> <span class="toctext">Expanding your class definitions</span></a></li> 
            <li class="toclevel-3"><a href="#Adding_behavior_to_objects"><span class="tocnumber">7.2.4</span> <span class="toctext">Adding behavior to objects</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#The_process_of_encapsulation"><span class="tocnumber">7.3</span> <span class="toctext">The process of encapsulation</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Using_access_modifiers"><span class="tocnumber">7.3.1</span> <span class="toctext">Using access modifiers</span></a></li> 
           </ul> </li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Installation"><span class="tocnumber">8</span> <span class="toctext">Installation</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Availability_check_for_JRE"><span class="tocnumber">8.1</span> <span class="toctext">Availability check for JRE</span></a></li> 
          <li class="toclevel-2"><a href="#Availability_check_for_JDK"><span class="tocnumber">8.2</span> <span class="toctext">Availability check for JDK</span></a></li> 
          <li class="toclevel-2"><a href="#Advanced_availability_check_options_on_Windows_platform"><span class="tocnumber">8.3</span> <span class="toctext">Advanced availability check options on Windows platform</span></a></li> 
          <li class="toclevel-2"><a href="#Download_instructions"><span class="tocnumber">8.4</span> <span class="toctext">Download instructions</span></a></li> 
          <li class="toclevel-2"><a href="#Updating_environment_variables"><span class="tocnumber">8.5</span> <span class="toctext">Updating environment variables</span></a></li> 
          <li class="toclevel-2"><a href="#Start_writing_code"><span class="tocnumber">8.6</span> <span class="toctext">Start writing code</span></a></li> 
          <li class="toclevel-2"><a href="#Availability_check_for_JRE_2"><span class="tocnumber">8.7</span> <span class="toctext">Availability check for JRE</span></a></li> 
          <li class="toclevel-2"><a href="#Availability_check_for_JDK_2"><span class="tocnumber">8.8</span> <span class="toctext">Availability check for JDK</span></a></li> 
          <li class="toclevel-2"><a href="#Installation_using_Terminal"><span class="tocnumber">8.9</span> <span class="toctext">Installation using Terminal</span></a></li> 
          <li class="toclevel-2"><a href="#Download_instructions_2"><span class="tocnumber">8.10</span> <span class="toctext">Download instructions</span></a></li> 
          <li class="toclevel-2"><a href="#Start_writing_code_2"><span class="tocnumber">8.11</span> <span class="toctext">Start writing code</span></a></li> 
          <li class="toclevel-2"><a href="#Updating_Java_for_Mac_OS"><span class="tocnumber">8.12</span> <span class="toctext">Updating Java for Mac OS</span></a></li> 
          <li class="toclevel-2"><a href="#Availability_check_for_JDK_3"><span class="tocnumber">8.13</span> <span class="toctext">Availability check for JDK</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Compilation"><span class="tocnumber">9</span> <span class="toctext">Compilation</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Quick_compilation_procedure"><span class="tocnumber">9.1</span> <span class="toctext">Quick compilation procedure</span></a></li> 
          <li class="toclevel-2"><a href="#Automatic_Compilation_of_Dependent_Classes"><span class="tocnumber">9.2</span> <span class="toctext">Automatic Compilation of Dependent Classes</span></a></li> 
          <li class="toclevel-2"><a href="#Packages.2C_Subdirectories.2C_and_Resources"><span class="tocnumber">9.3</span> <span class="toctext">Packages, Subdirectories, and Resources</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Top_level_package"><span class="tocnumber">9.3.1</span> <span class="toctext">Top level package</span></a></li> 
            <li class="toclevel-3"><a href="#Subpackages"><span class="tocnumber">9.3.2</span> <span class="toctext">Subpackages</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Filename_Case"><span class="tocnumber">9.4</span> <span class="toctext">Filename Case</span></a></li> 
          <li class="toclevel-2"><a href="#Compiler_Options"><span class="tocnumber">9.5</span> <span class="toctext">Compiler Options</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Debugging_and_Symbolic_Information"><span class="tocnumber">9.5.1</span> <span class="toctext">Debugging and Symbolic Information</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Ant"><span class="tocnumber">9.6</span> <span class="toctext">Ant</span></a></li> 
          <li class="toclevel-2"><a href="#The_JIT_compiler"><span class="tocnumber">9.7</span> <span class="toctext">The JIT compiler</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Execution"><span class="tocnumber">10</span> <span class="toctext">Execution</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#JSE_code_execution"><span class="tocnumber">10.1</span> <span class="toctext">JSE code execution</span></a></li> 
          <li class="toclevel-2"><a href="#J2EE_code_execution"><span class="tocnumber">10.2</span> <span class="toctext">J2EE code execution</span></a></li> 
          <li class="toclevel-2"><a href="#Jini"><span class="tocnumber">10.3</span> <span class="toctext">Jini</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Understanding_a_Java_Program"><span class="tocnumber">11</span> <span class="toctext">Understanding a Java Program</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#The_Distance_Class:_Intent.2C_Source.2C_and_Use"><span class="tocnumber">11.1</span> <span class="toctext">The Distance Class: Intent, Source, and Use</span></a></li> 
          <li class="toclevel-2"><a href="#Detailed_Program_Structure_and_Overview"><span class="tocnumber">11.2</span> <span class="toctext">Detailed Program Structure and Overview</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Introduction_to_Java_Syntax"><span class="tocnumber">11.2.1</span> <span class="toctext">Introduction to Java Syntax</span></a></li> 
            <li class="toclevel-3"><a href="#Declarations_and_Definitions"><span class="tocnumber">11.2.2</span> <span class="toctext">Declarations and Definitions</span></a> 
             <ul> 
              <li class="toclevel-4"><a href="#Example:_Instance_Fields"><span class="tocnumber">11.2.2.1</span> <span class="toctext">Example: Instance Fields</span></a></li> 
              <li class="toclevel-4"><a href="#Example:_Constructor"><span class="tocnumber">11.2.2.2</span> <span class="toctext">Example: Constructor</span></a></li> 
              <li class="toclevel-4"><a href="#Example:_Methods"><span class="tocnumber">11.2.2.3</span> <span class="toctext">Example: Methods</span></a></li> 
              <li class="toclevel-4"><a href="#The_printDistance.28.29_method"><span class="tocnumber">11.2.2.4</span> <span class="toctext">The printDistance() method</span></a></li> 
              <li class="toclevel-4"><a href="#The_main.28.29_method"><span class="tocnumber">11.2.2.5</span> <span class="toctext">The main() method</span></a></li> 
              <li class="toclevel-4"><a href="#The_intValue.28.29_method"><span class="tocnumber">11.2.2.6</span> <span class="toctext">The intValue() method</span></a></li> 
              <li class="toclevel-4"><a href="#Static_vs._Instance_Methods"><span class="tocnumber">11.2.2.7</span> <span class="toctext">Static vs. Instance Methods</span></a></li> 
             </ul> </li> 
            <li class="toclevel-3"><a href="#Data_Types"><span class="tocnumber">11.2.3</span> <span class="toctext">Data Types</span></a> 
             <ul> 
              <li class="toclevel-4"><a href="#Primitive_Types"><span class="tocnumber">11.2.3.1</span> <span class="toctext">Primitive Types</span></a></li> 
              <li class="toclevel-4"><a href="#Reference_Types"><span class="tocnumber">11.2.3.2</span> <span class="toctext">Reference Types</span></a></li> 
              <li class="toclevel-4"><a href="#Array_Types"><span class="tocnumber">11.2.3.3</span> <span class="toctext">Array Types</span></a></li> 
              <li class="toclevel-4"><a href="#void"><span class="tocnumber">11.2.3.4</span> <span class="toctext">void</span></a></li> 
             </ul> </li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Whitespace"><span class="tocnumber">11.3</span> <span class="toctext">Whitespace</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Required_Whitespace"><span class="tocnumber">11.3.1</span> <span class="toctext">Required Whitespace</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Indentation"><span class="tocnumber">11.4</span> <span class="toctext">Indentation</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Java_IDEs"><span class="tocnumber">12</span> <span class="toctext">Java IDEs</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#What_is_a_Java_IDE.3F"><span class="tocnumber">12.1</span> <span class="toctext">What is a Java IDE?</span></a></li> 
          <li class="toclevel-2"><a href="#Eclipse"><span class="tocnumber">12.2</span> <span class="toctext">Eclipse</span></a></li> 
          <li class="toclevel-2"><a href="#NetBeans"><span class="tocnumber">12.3</span> <span class="toctext">NetBeans</span></a></li> 
          <li class="toclevel-2"><a href="#JCreator"><span class="tocnumber">12.4</span> <span class="toctext">JCreator</span></a></li> 
          <li class="toclevel-2"><a href="#Processing"><span class="tocnumber">12.5</span> <span class="toctext">Processing</span></a></li> 
          <li class="toclevel-2"><a href="#BlueJ"><span class="tocnumber">12.6</span> <span class="toctext">BlueJ</span></a></li> 
          <li class="toclevel-2"><a href="#Kawa"><span class="tocnumber">12.7</span> <span class="toctext">Kawa</span></a></li> 
          <li class="toclevel-2"><a href="#JBuilder"><span class="tocnumber">12.8</span> <span class="toctext">JBuilder</span></a></li> 
          <li class="toclevel-2"><a href="#DrJava"><span class="tocnumber">12.9</span> <span class="toctext">DrJava</span></a></li> 
          <li class="toclevel-2"><a href="#Other_IDEs"><span class="tocnumber">12.10</span> <span class="toctext">Other IDEs</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Language_Fundamentals"><span class="tocnumber">13</span> <span class="toctext">Language Fundamentals</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#The_Java_programming_syntax"><span class="tocnumber">13.1</span> <span class="toctext">The Java programming syntax</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Statements"><span class="tocnumber">14</span> <span class="toctext">Statements</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Variable_declaration_statement"><span class="tocnumber">14.1</span> <span class="toctext">Variable declaration statement</span></a></li> 
          <li class="toclevel-2"><a href="#Assignment_statements"><span class="tocnumber">14.2</span> <span class="toctext">Assignment statements</span></a></li> 
          <li class="toclevel-2"><a href="#Assertion"><span class="tocnumber">14.3</span> <span class="toctext">Assertion</span></a></li> 
          <li class="toclevel-2"><a href="#Program_Control_Flow"><span class="tocnumber">14.4</span> <span class="toctext">Program Control Flow</span></a></li> 
          <li class="toclevel-2"><a href="#Statement_Blocks"><span class="tocnumber">14.5</span> <span class="toctext">Statement Blocks</span></a></li> 
          <li class="toclevel-2"><a href="#Branching_Statements"><span class="tocnumber">14.6</span> <span class="toctext">Branching Statements</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Unconditional_Branching_Statements"><span class="tocnumber">14.6.1</span> <span class="toctext">Unconditional Branching Statements</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Return_statement"><span class="tocnumber">14.7</span> <span class="toctext">Return statement</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Conditional_Branching_Statements"><span class="tocnumber">14.7.1</span> <span class="toctext">Conditional Branching Statements</span></a> 
             <ul> 
              <li class="toclevel-4"><a href="#Conditional_Statements"><span class="tocnumber">14.7.1.1</span> <span class="toctext">Conditional Statements</span></a></li> 
              <li class="toclevel-4"><a href="#If...else_statements"><span class="tocnumber">14.7.1.2</span> <span class="toctext">If...else statements</span></a></li> 
              <li class="toclevel-4"><a href="#Switch_statements"><span class="tocnumber">14.7.1.3</span> <span class="toctext">Switch statements</span></a></li> 
             </ul> </li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Iteration_Statements"><span class="tocnumber">14.8</span> <span class="toctext">Iteration Statements</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#The_while_loop"><span class="tocnumber">14.8.1</span> <span class="toctext">The while loop</span></a></li> 
            <li class="toclevel-3"><a href="#The_do...while_loop"><span class="tocnumber">14.8.2</span> <span class="toctext">The do...while loop</span></a></li> 
            <li class="toclevel-3"><a href="#The_for_loop"><span class="tocnumber">14.8.3</span> <span class="toctext">The for loop</span></a></li> 
            <li class="toclevel-3"><a href="#The_foreach_loop"><span class="tocnumber">14.8.4</span> <span class="toctext">The foreach loop</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#The_continue_and_break_statements"><span class="tocnumber">14.9</span> <span class="toctext">The continue and break statements</span></a></li> 
          <li class="toclevel-2"><a href="#Throw_statement"><span class="tocnumber">14.10</span> <span class="toctext">Throw statement</span></a></li> 
          <li class="toclevel-2"><a href="#try.2Fcatch"><span class="tocnumber">14.11</span> <span class="toctext">try/catch</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Conditional_blocks"><span class="tocnumber">15</span> <span class="toctext">Conditional blocks</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#If"><span class="tocnumber">15.1</span> <span class="toctext">If</span></a></li> 
          <li class="toclevel-2"><a href="#If.2Felse"><span class="tocnumber">15.2</span> <span class="toctext">If/else</span></a></li> 
          <li class="toclevel-2"><a href="#If.2Felse-if.2Felse"><span class="tocnumber">15.3</span> <span class="toctext">If/else-if/else</span></a></li> 
          <li class="toclevel-2"><a href="#Conditional_expressions"><span class="tocnumber">15.4</span> <span class="toctext">Conditional expressions</span></a></li> 
          <li class="toclevel-2"><a href="#Switch"><span class="tocnumber">15.5</span> <span class="toctext">Switch</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Loop_blocks"><span class="tocnumber">16</span> <span class="toctext">Loop blocks</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#While"><span class="tocnumber">16.1</span> <span class="toctext">While</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Do..._while"><span class="tocnumber">16.1.1</span> <span class="toctext">Do... while</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#For"><span class="tocnumber">16.2</span> <span class="toctext">For</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#For-each"><span class="tocnumber">16.2.1</span> <span class="toctext">For-each</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Break_and_continue_keywords"><span class="tocnumber">16.3</span> <span class="toctext">Break and continue keywords</span></a></li> 
          <li class="toclevel-2"><a href="#Labels"><span class="tocnumber">16.4</span> <span class="toctext">Labels</span></a></li> 
          <li class="toclevel-2"><a href="#Try..._catch_blocks"><span class="tocnumber">16.5</span> <span class="toctext">Try... catch blocks</span></a></li> 
          <li class="toclevel-2"><a href="#Examples"><span class="tocnumber">16.6</span> <span class="toctext">Examples</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Boolean_expressions"><span class="tocnumber">17</span> <span class="toctext">Boolean expressions</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Comparative_operators"><span class="tocnumber">17.1</span> <span class="toctext">Comparative operators</span></a></li> 
          <li class="toclevel-2"><a href="#Boolean_operators"><span class="tocnumber">17.2</span> <span class="toctext">Boolean operators</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Variables"><span class="tocnumber">18</span> <span class="toctext">Variables</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Variables_in_Java_programming"><span class="tocnumber">18.1</span> <span class="toctext">Variables in Java programming</span></a></li> 
          <li class="toclevel-2"><a href="#Kinds_of_variables"><span class="tocnumber">18.2</span> <span class="toctext">Kinds of variables</span></a></li> 
          <li class="toclevel-2"><a href="#Creating_variables"><span class="tocnumber">18.3</span> <span class="toctext">Creating variables</span></a></li> 
          <li class="toclevel-2"><a href="#Assigning_values_to_variables"><span class="tocnumber">18.4</span> <span class="toctext">Assigning values to variables</span></a></li> 
          <li class="toclevel-2"><a href="#Grouping_variable_declarations_and_assignment_operations"><span class="tocnumber">18.5</span> <span class="toctext">Grouping variable declarations and assignment operations</span></a></li> 
          <li class="toclevel-2"><a href="#Identifiers"><span class="tocnumber">18.6</span> <span class="toctext">Identifiers</span></a></li> 
          <li class="toclevel-2"><a href="#Naming_conventions_for_identifiers"><span class="tocnumber">18.7</span> <span class="toctext">Naming conventions for identifiers</span></a></li> 
          <li class="toclevel-2"><a href="#Literals_.28values.29"><span class="tocnumber">18.8</span> <span class="toctext">Literals (values)</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Primitive_Types_2"><span class="tocnumber">19</span> <span class="toctext">Primitive Types</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Numbers_in_computer_science"><span class="tocnumber">19.1</span> <span class="toctext">Numbers in computer science</span></a></li> 
          <li class="toclevel-2"><a href="#Integer_types_in_Java"><span class="tocnumber">19.2</span> <span class="toctext">Integer types in Java</span></a></li> 
          <li class="toclevel-2"><a href="#Integer_numbers_and_floating_point_numbers"><span class="tocnumber">19.3</span> <span class="toctext">Integer numbers and floating point numbers</span></a></li> 
          <li class="toclevel-2"><a href="#Data_conversion_.28casting.29"><span class="tocnumber">19.4</span> <span class="toctext">Data conversion (casting)</span></a></li> 
          <li class="toclevel-2"><a href="#Notes"><span class="tocnumber">19.5</span> <span class="toctext">Notes</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Arithmetic_expressions"><span class="tocnumber">20</span> <span class="toctext">Arithmetic expressions</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Using_bitwise_operators_within_Java"><span class="tocnumber">20.1</span> <span class="toctext">Using bitwise operators within Java</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Literals"><span class="tocnumber">21</span> <span class="toctext">Literals</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Boolean_Literals"><span class="tocnumber">21.1</span> <span class="toctext">Boolean Literals</span></a></li> 
          <li class="toclevel-2"><a href="#Numeric_Literals"><span class="tocnumber">21.2</span> <span class="toctext">Numeric Literals</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Integer_Literals"><span class="tocnumber">21.2.1</span> <span class="toctext">Integer Literals</span></a></li> 
            <li class="toclevel-3"><a href="#Floating_Point_Literals"><span class="tocnumber">21.2.2</span> <span class="toctext">Floating Point Literals</span></a></li> 
            <li class="toclevel-3"><a href="#Character_Literals"><span class="tocnumber">21.2.3</span> <span class="toctext">Character Literals</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#String_Literals"><span class="tocnumber">21.3</span> <span class="toctext">String Literals</span></a></li> 
          <li class="toclevel-2"><a href="#null"><span class="tocnumber">21.4</span> <span class="toctext">null</span></a></li> 
          <li class="toclevel-2"><a href="#Mixed_Mode_Operations"><span class="tocnumber">21.5</span> <span class="toctext">Mixed Mode Operations</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Methods"><span class="tocnumber">22</span> <span class="toctext">Methods</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Parameter_passing"><span class="tocnumber">22.1</span> <span class="toctext">Parameter passing</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Primitive_type_parameter"><span class="tocnumber">22.1.1</span> <span class="toctext">Primitive type parameter</span></a></li> 
            <li class="toclevel-3"><a href="#Reference_type_parameter"><span class="tocnumber">22.1.2</span> <span class="toctext">Reference type parameter</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Variable_argument_list"><span class="tocnumber">22.2</span> <span class="toctext">Variable argument list</span></a></li> 
          <li class="toclevel-2"><a href="#Return_parameter"><span class="tocnumber">22.3</span> <span class="toctext">Return parameter</span></a></li> 
          <li class="toclevel-2"><a href="#Special_method.2C_the_constructor"><span class="tocnumber">22.4</span> <span class="toctext">Special method, the constructor</span></a></li> 
          <li class="toclevel-2"><a href="#Static_methods"><span class="tocnumber">22.5</span> <span class="toctext">Static methods</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#API.2Fjava.lang.String"><span class="tocnumber">23</span> <span class="toctext">API/java.lang.String</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Immutability"><span class="tocnumber">23.1</span> <span class="toctext">Immutability</span></a></li> 
          <li class="toclevel-2"><a href="#Concatenation"><span class="tocnumber">23.2</span> <span class="toctext">Concatenation</span></a></li> 
          <li class="toclevel-2"><a href="#Using_StringBuilder.2FStringBuffer_to_concatenate_strings"><span class="tocnumber">23.3</span> <span class="toctext">Using StringBuilder/StringBuffer to concatenate strings</span></a></li> 
          <li class="toclevel-2"><a href="#Comparing_Strings"><span class="tocnumber">23.4</span> <span class="toctext">Comparing Strings</span></a></li> 
          <li class="toclevel-2"><a href="#Splitting_a_String"><span class="tocnumber">23.5</span> <span class="toctext">Splitting a String</span></a></li> 
          <li class="toclevel-2"><a href="#Substrings"><span class="tocnumber">23.6</span> <span class="toctext">Substrings</span></a></li> 
          <li class="toclevel-2"><a href="#String_cases"><span class="tocnumber">23.7</span> <span class="toctext">String cases</span></a></li> 
          <li class="toclevel-2"><a href="#See_also"><span class="tocnumber">23.8</span> <span class="toctext">See also</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Classes.2C_Objects_and_Types"><span class="tocnumber">24</span> <span class="toctext">Classes, Objects and Types</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Instantiation_and_constructors"><span class="tocnumber">24.1</span> <span class="toctext">Instantiation and constructors</span></a></li> 
          <li class="toclevel-2"><a href="#Type"><span class="tocnumber">24.2</span> <span class="toctext">Type</span></a></li> 
          <li class="toclevel-2"><a href="#Autoboxing.2Funboxing"><span class="tocnumber">24.3</span> <span class="toctext">Autoboxing/unboxing</span></a></li> 
          <li class="toclevel-2"><a href="#Methods_in_the_Object_class"><span class="tocnumber">24.4</span> <span class="toctext">Methods in the Object class</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#The_clone_method"><span class="tocnumber">24.4.1</span> <span class="toctext">The clone method</span></a></li> 
            <li class="toclevel-3"><a href="#The_equals_method"><span class="tocnumber">24.4.2</span> <span class="toctext">The equals method</span></a></li> 
            <li class="toclevel-3"><a href="#The_finalize_method"><span class="tocnumber">24.4.3</span> <span class="toctext">The finalize method</span></a></li> 
            <li class="toclevel-3"><a href="#The_getClass_method"><span class="tocnumber">24.4.4</span> <span class="toctext">The getClass method</span></a></li> 
            <li class="toclevel-3"><a href="#The_hashCode_method"><span class="tocnumber">24.4.5</span> <span class="toctext">The hashCode method</span></a></li> 
            <li class="toclevel-3"><a href="#The_toString_method"><span class="tocnumber">24.4.6</span> <span class="toctext">The toString method</span></a></li> 
            <li class="toclevel-3"><a href="#The_wait_and_notify_thread_signaling_methods"><span class="tocnumber">24.4.7</span> <span class="toctext">The wait and notify thread signaling methods</span></a> 
             <ul> 
              <li class="toclevel-4"><a href="#The_wait_methods"><span class="tocnumber">24.4.7.1</span> <span class="toctext">The wait methods</span></a></li> 
              <li class="toclevel-4"><a href="#The_notify_and_notifyAll_methods"><span class="tocnumber">24.4.7.2</span> <span class="toctext">The notify and notifyAll methods</span></a></li> 
             </ul> </li> 
           </ul> </li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Keywords"><span class="tocnumber">25</span> <span class="toctext">Keywords</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#abstract"><span class="tocnumber">25.1</span> <span class="toctext">abstract</span></a></li> 
          <li class="toclevel-2"><a href="#assert"><span class="tocnumber">25.2</span> <span class="toctext">assert</span></a></li> 
          <li class="toclevel-2"><a href="#boolean"><span class="tocnumber">25.3</span> <span class="toctext">boolean</span></a></li> 
          <li class="toclevel-2"><a href="#break"><span class="tocnumber">25.4</span> <span class="toctext">break</span></a></li> 
          <li class="toclevel-2"><a href="#byte"><span class="tocnumber">25.5</span> <span class="toctext">byte</span></a></li> 
          <li class="toclevel-2"><a href="#case"><span class="tocnumber">25.6</span> <span class="toctext">case</span></a></li> 
          <li class="toclevel-2"><a href="#catch"><span class="tocnumber">25.7</span> <span class="toctext">catch</span></a></li> 
          <li class="toclevel-2"><a href="#char"><span class="tocnumber">25.8</span> <span class="toctext">char</span></a></li> 
          <li class="toclevel-2"><a href="#class"><span class="tocnumber">25.9</span> <span class="toctext">class</span></a></li> 
          <li class="toclevel-2"><a href="#const"><span class="tocnumber">25.10</span> <span class="toctext">const</span></a></li> 
          <li class="toclevel-2"><a href="#continue"><span class="tocnumber">25.11</span> <span class="toctext">continue</span></a></li> 
          <li class="toclevel-2"><a href="#See_also_2"><span class="tocnumber">25.12</span> <span class="toctext">See also</span></a></li> 
          <li class="toclevel-2"><a href="#default"><span class="tocnumber">25.13</span> <span class="toctext">default</span></a></li> 
          <li class="toclevel-2"><a href="#do"><span class="tocnumber">25.14</span> <span class="toctext">do</span></a></li> 
          <li class="toclevel-2"><a href="#double"><span class="tocnumber">25.15</span> <span class="toctext">double</span></a></li> 
          <li class="toclevel-2"><a href="#else"><span class="tocnumber">25.16</span> <span class="toctext">else</span></a></li> 
          <li class="toclevel-2"><a href="#enum"><span class="tocnumber">25.17</span> <span class="toctext">enum</span></a></li> 
          <li class="toclevel-2"><a href="#extends"><span class="tocnumber">25.18</span> <span class="toctext">extends</span></a></li> 
          <li class="toclevel-2"><a href="#final"><span class="tocnumber">25.19</span> <span class="toctext">final</span></a></li> 
          <li class="toclevel-2"><a href="#For_a_variable"><span class="tocnumber">25.20</span> <span class="toctext">For a variable</span></a></li> 
          <li class="toclevel-2"><a href="#For_a_class"><span class="tocnumber">25.21</span> <span class="toctext">For a class</span></a></li> 
          <li class="toclevel-2"><a href="#For_a_method"><span class="tocnumber">25.22</span> <span class="toctext">For a method</span></a></li> 
          <li class="toclevel-2"><a href="#Interest"><span class="tocnumber">25.23</span> <span class="toctext">Interest</span></a></li> 
          <li class="toclevel-2"><a href="#finally"><span class="tocnumber">25.24</span> <span class="toctext">finally</span></a></li> 
          <li class="toclevel-2"><a href="#float"><span class="tocnumber">25.25</span> <span class="toctext">float</span></a></li> 
          <li class="toclevel-2"><a href="#for_2"><span class="tocnumber">25.26</span> <span class="toctext">for</span></a></li> 
          <li class="toclevel-2"><a href="#goto"><span class="tocnumber">25.27</span> <span class="toctext">goto</span></a></li> 
          <li class="toclevel-2"><a href="#if_2"><span class="tocnumber">25.28</span> <span class="toctext">if</span></a></li> 
          <li class="toclevel-2"><a href="#implements"><span class="tocnumber">25.29</span> <span class="toctext">implements</span></a></li> 
          <li class="toclevel-2"><a href="#import"><span class="tocnumber">25.30</span> <span class="toctext">import</span></a></li> 
          <li class="toclevel-2"><a href="#instanceof"><span class="tocnumber">25.31</span> <span class="toctext">instanceof</span></a></li> 
          <li class="toclevel-2"><a href="#int"><span class="tocnumber">25.32</span> <span class="toctext">int</span></a></li> 
          <li class="toclevel-2"><a href="#interface"><span class="tocnumber">25.33</span> <span class="toctext">interface</span></a></li> 
          <li class="toclevel-2"><a href="#long"><span class="tocnumber">25.34</span> <span class="toctext">long</span></a></li> 
          <li class="toclevel-2"><a href="#native"><span class="tocnumber">25.35</span> <span class="toctext">native</span></a></li> 
          <li class="toclevel-2"><a href="#See_also_3"><span class="tocnumber">25.36</span> <span class="toctext">See also</span></a></li> 
          <li class="toclevel-2"><a href="#new"><span class="tocnumber">25.37</span> <span class="toctext">new</span></a></li> 
          <li class="toclevel-2"><a href="#package"><span class="tocnumber">25.38</span> <span class="toctext">package</span></a></li> 
          <li class="toclevel-2"><a href="#private"><span class="tocnumber">25.39</span> <span class="toctext">private</span></a></li> 
          <li class="toclevel-2"><a href="#protected"><span class="tocnumber">25.40</span> <span class="toctext">protected</span></a></li> 
          <li class="toclevel-2"><a href="#public"><span class="tocnumber">25.41</span> <span class="toctext">public</span></a></li> 
          <li class="toclevel-2"><a href="#return"><span class="tocnumber">25.42</span> <span class="toctext">return</span></a></li> 
          <li class="toclevel-2"><a href="#short"><span class="tocnumber">25.43</span> <span class="toctext">short</span></a></li> 
          <li class="toclevel-2"><a href="#static"><span class="tocnumber">25.44</span> <span class="toctext">static</span></a></li> 
          <li class="toclevel-2"><a href="#Interest_2"><span class="tocnumber">25.45</span> <span class="toctext">Interest</span></a></li> 
          <li class="toclevel-2"><a href="#strictfp"><span class="tocnumber">25.46</span> <span class="toctext">strictfp</span></a></li> 
          <li class="toclevel-2"><a href="#super"><span class="tocnumber">25.47</span> <span class="toctext">super</span></a></li> 
          <li class="toclevel-2"><a href="#switch_2"><span class="tocnumber">25.48</span> <span class="toctext">switch</span></a></li> 
          <li class="toclevel-2"><a href="#synchronized"><span class="tocnumber">25.49</span> <span class="toctext">synchronized</span></a></li> 
          <li class="toclevel-2"><a href="#Singleton_example"><span class="tocnumber">25.50</span> <span class="toctext">Singleton example</span></a></li> 
          <li class="toclevel-2"><a href="#this"><span class="tocnumber">25.51</span> <span class="toctext">this</span></a></li> 
          <li class="toclevel-2"><a href="#throw"><span class="tocnumber">25.52</span> <span class="toctext">throw</span></a></li> 
          <li class="toclevel-2"><a href="#See_also_4"><span class="tocnumber">25.53</span> <span class="toctext">See also</span></a></li> 
          <li class="toclevel-2"><a href="#throws"><span class="tocnumber">25.54</span> <span class="toctext">throws</span></a></li> 
          <li class="toclevel-2"><a href="#transient"><span class="tocnumber">25.55</span> <span class="toctext">transient</span></a></li> 
          <li class="toclevel-2"><a href="#try"><span class="tocnumber">25.56</span> <span class="toctext">try</span></a></li> 
          <li class="toclevel-2"><a href="#void_2"><span class="tocnumber">25.57</span> <span class="toctext">void</span></a></li> 
          <li class="toclevel-2"><a href="#volatile"><span class="tocnumber">25.58</span> <span class="toctext">volatile</span></a></li> 
          <li class="toclevel-2"><a href="#while_2"><span class="tocnumber">25.59</span> <span class="toctext">while</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Packages"><span class="tocnumber">26</span> <span class="toctext">Packages</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Package_declaration"><span class="tocnumber">26.1</span> <span class="toctext">Package declaration</span></a></li> 
          <li class="toclevel-2"><a href="#Import_and_class_usage"><span class="tocnumber">26.2</span> <span class="toctext">Import and class usage</span></a></li> 
          <li class="toclevel-2"><a href="#Wildcard_imports"><span class="tocnumber">26.3</span> <span class="toctext">Wildcard imports</span></a></li> 
          <li class="toclevel-2"><a href="#Package_convention"><span class="tocnumber">26.4</span> <span class="toctext">Package convention</span></a></li> 
          <li class="toclevel-2"><a href="#Importing_packages_from_.jar_files"><span class="tocnumber">26.5</span> <span class="toctext">Importing packages from .jar files</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Javac"><span class="tocnumber">26.5.1</span> <span class="toctext">Javac</span></a></li> 
            <li class="toclevel-3"><a href="#BlueJ_2"><span class="tocnumber">26.5.2</span> <span class="toctext">BlueJ</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Class_loading.2Fpackage"><span class="tocnumber">26.6</span> <span class="toctext">Class loading/package</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Arrays"><span class="tocnumber">27</span> <span class="toctext">Arrays</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Fundamentals"><span class="tocnumber">27.1</span> <span class="toctext">Fundamentals</span></a></li> 
          <li class="toclevel-2"><a href="#Two-Dimensional_Arrays"><span class="tocnumber">27.2</span> <span class="toctext">Two-Dimensional Arrays</span></a></li> 
          <li class="toclevel-2"><a href="#Multidimensional_Array"><span class="tocnumber">27.3</span> <span class="toctext">Multidimensional Array</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Mathematical_functions"><span class="tocnumber">28</span> <span class="toctext">Mathematical functions</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Math_constants"><span class="tocnumber">28.1</span> <span class="toctext">Math constants</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Math.E"><span class="tocnumber">28.1.1</span> <span class="toctext">Math.E</span></a></li> 
            <li class="toclevel-3"><a href="#Math.PI"><span class="tocnumber">28.1.2</span> <span class="toctext">Math.PI</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Math_methods"><span class="tocnumber">28.2</span> <span class="toctext">Math methods</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Exponential_methods"><span class="tocnumber">28.2.1</span> <span class="toctext">Exponential methods</span></a> 
             <ul> 
              <li class="toclevel-4"><a href="#Exponentiation"><span class="tocnumber">28.2.1.1</span> <span class="toctext">Exponentiation</span></a></li> 
             </ul> </li> 
            <li class="toclevel-3"><a href="#Logarithms"><span class="tocnumber">28.2.2</span> <span class="toctext">Logarithms</span></a></li> 
            <li class="toclevel-3"><a href="#Trigonometric_and_hyperbolic_methods"><span class="tocnumber">28.2.3</span> <span class="toctext">Trigonometric and hyperbolic methods</span></a> 
             <ul> 
              <li class="toclevel-4"><a href="#Trigonometric_functions"><span class="tocnumber">28.2.3.1</span> <span class="toctext">Trigonometric functions</span></a></li> 
              <li class="toclevel-4"><a href="#Inverse_trigonometric_functions"><span class="tocnumber">28.2.3.2</span> <span class="toctext">Inverse trigonometric functions</span></a></li> 
              <li class="toclevel-4"><a href="#Hyperbolic_functions"><span class="tocnumber">28.2.3.3</span> <span class="toctext">Hyperbolic functions</span></a></li> 
              <li class="toclevel-4"><a href="#Radian.2Fdegree_conversion"><span class="tocnumber">28.2.3.4</span> <span class="toctext">Radian/degree conversion</span></a></li> 
             </ul> </li> 
            <li class="toclevel-3"><a href="#Absolute_value:_Math.abs"><span class="tocnumber">28.2.4</span> <span class="toctext">Absolute value: Math.abs</span></a></li> 
            <li class="toclevel-3"><a href="#Maximum_and_minimum_values"><span class="tocnumber">28.2.5</span> <span class="toctext">Maximum and minimum values</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Functions_dealing_with_floating-point_representation"><span class="tocnumber">28.3</span> <span class="toctext">Functions dealing with floating-point representation</span></a></li> 
          <li class="toclevel-2"><a href="#Rounding_number_example"><span class="tocnumber">28.4</span> <span class="toctext">Rounding number example</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Large_numbers"><span class="tocnumber">29</span> <span class="toctext">Large numbers</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#BigInteger"><span class="tocnumber">29.1</span> <span class="toctext">BigInteger</span></a></li> 
          <li class="toclevel-2"><a href="#BigDecimal"><span class="tocnumber">29.2</span> <span class="toctext">BigDecimal</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Random_numbers"><span class="tocnumber">30</span> <span class="toctext">Random numbers</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Truly_random_numbers"><span class="tocnumber">30.1</span> <span class="toctext">Truly random numbers</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Unicode"><span class="tocnumber">31</span> <span class="toctext">Unicode</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Unicode_escape_sequences"><span class="tocnumber">31.1</span> <span class="toctext">Unicode escape sequences</span></a></li> 
          <li class="toclevel-2"><a href="#International_language_support"><span class="tocnumber">31.2</span> <span class="toctext">International language support</span></a></li> 
          <li class="toclevel-2"><a href="#References_2"><span class="tocnumber">31.3</span> <span class="toctext">References</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Comments"><span class="tocnumber">32</span> <span class="toctext">Comments</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Syntax"><span class="tocnumber">32.1</span> <span class="toctext">Syntax</span></a></li> 
          <li class="toclevel-2"><a href="#Comments_and_unicode"><span class="tocnumber">32.2</span> <span class="toctext">Comments and unicode</span></a></li> 
          <li class="toclevel-2"><a href="#Javadoc_comments"><span class="tocnumber">32.3</span> <span class="toctext">Javadoc comments</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Coding_conventions"><span class="tocnumber">33</span> <span class="toctext">Coding conventions</span></a></li> 
        <li class="toclevel-1"><a href="#Classes_and_Objects"><span class="tocnumber">34</span> <span class="toctext">Classes and Objects</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Classes_and_Objects_2"><span class="tocnumber">34.1</span> <span class="toctext">Classes and Objects</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Defining_Classes"><span class="tocnumber">35</span> <span class="toctext">Defining Classes</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Fundamentals_2"><span class="tocnumber">35.1</span> <span class="toctext">Fundamentals</span></a></li> 
          <li class="toclevel-2"><a href="#Constructors"><span class="tocnumber">35.2</span> <span class="toctext">Constructors</span></a></li> 
          <li class="toclevel-2"><a href="#Initializers"><span class="tocnumber">35.3</span> <span class="toctext">Initializers</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Static_initializers"><span class="tocnumber">35.3.1</span> <span class="toctext">Static initializers</span></a></li> 
            <li class="toclevel-3"><a href="#Instance_initializers"><span class="tocnumber">35.3.2</span> <span class="toctext">Instance initializers</span></a></li> 
           </ul> </li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Inheritance"><span class="tocnumber">36</span> <span class="toctext">Inheritance</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#The_Object_class"><span class="tocnumber">36.1</span> <span class="toctext">The Object class</span></a></li> 
          <li class="toclevel-2"><a href="#The_super_keyword"><span class="tocnumber">36.2</span> <span class="toctext">The <i>super</i> keyword</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Interfaces"><span class="tocnumber">37</span> <span class="toctext">Interfaces</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Interest_3"><span class="tocnumber">37.1</span> <span class="toctext">Interest</span></a></li> 
          <li class="toclevel-2"><a href="#Extending_interfaces"><span class="tocnumber">37.2</span> <span class="toctext">Extending interfaces</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Overloading_Methods_and_Constructors"><span class="tocnumber">38</span> <span class="toctext">Overloading Methods and Constructors</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Method_overloading"><span class="tocnumber">38.1</span> <span class="toctext">Method overloading</span></a></li> 
          <li class="toclevel-2"><a href="#Variable_Argument"><span class="tocnumber">38.2</span> <span class="toctext">Variable Argument</span></a></li> 
          <li class="toclevel-2"><a href="#Constructor_overloading"><span class="tocnumber">38.3</span> <span class="toctext">Constructor overloading</span></a></li> 
          <li class="toclevel-2"><a href="#Method_overriding"><span class="tocnumber">38.4</span> <span class="toctext">Method overriding</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Object_Lifecycle"><span class="tocnumber">39</span> <span class="toctext">Object Lifecycle</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Creating_object_with_the_new_keyword"><span class="tocnumber">39.1</span> <span class="toctext">Creating object with the new keyword</span></a></li> 
          <li class="toclevel-2"><a href="#Creating_object_by_cloning_an_object"><span class="tocnumber">39.2</span> <span class="toctext">Creating object by cloning an object</span></a></li> 
          <li class="toclevel-2"><a href="#Re-creating_an_object_received_from_a_remote_source"><span class="tocnumber">39.3</span> <span class="toctext">Re-creating an object received from a remote source</span></a></li> 
          <li class="toclevel-2"><a href="#Destroying_objects"><span class="tocnumber">39.4</span> <span class="toctext">Destroying objects</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#finalize.28.29"><span class="tocnumber">39.4.1</span> <span class="toctext">finalize()</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Class_loading"><span class="tocnumber">39.5</span> <span class="toctext">Class loading</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Scope"><span class="tocnumber">40</span> <span class="toctext">Scope</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Scope_2"><span class="tocnumber">40.1</span> <span class="toctext">Scope</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Scope_of_method_parameters"><span class="tocnumber">40.1.1</span> <span class="toctext">Scope of method parameters</span></a></li> 
            <li class="toclevel-3"><a href="#Scope_of_local_variables"><span class="tocnumber">40.1.2</span> <span class="toctext">Scope of local variables</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Access_modifiers"><span class="tocnumber">40.2</span> <span class="toctext">Access modifiers</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#For_a_class_2"><span class="tocnumber">40.2.1</span> <span class="toctext">For a class</span></a></li> 
            <li class="toclevel-3"><a href="#For_a_variable_2"><span class="tocnumber">40.2.2</span> <span class="toctext">For a variable</span></a></li> 
            <li class="toclevel-3"><a href="#For_a_method_2"><span class="tocnumber">40.2.3</span> <span class="toctext">For a method</span></a></li> 
            <li class="toclevel-3"><a href="#For_an_interface"><span class="tocnumber">40.2.4</span> <span class="toctext">For an interface</span></a></li> 
            <li class="toclevel-3"><a href="#Summary"><span class="tocnumber">40.2.5</span> <span class="toctext">Summary</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Utility"><span class="tocnumber">40.3</span> <span class="toctext">Utility</span></a></li> 
          <li class="toclevel-2"><a href="#Field_encapsulation"><span class="tocnumber">40.4</span> <span class="toctext">Field encapsulation</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Nested_Classes"><span class="tocnumber">41</span> <span class="toctext">Nested Classes</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Inner_classes"><span class="tocnumber">41.1</span> <span class="toctext">Inner classes</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Nesting_a_class_inside_a_class"><span class="tocnumber">41.1.1</span> <span class="toctext">Nesting a class inside a class</span></a></li> 
            <li class="toclevel-3"><a href="#Static_nested_classes"><span class="tocnumber">41.1.2</span> <span class="toctext">Static nested classes</span></a></li> 
            <li class="toclevel-3"><a href="#Nesting_a_class_inside_a_method"><span class="tocnumber">41.1.3</span> <span class="toctext">Nesting a class inside a method</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Anonymous_Classes"><span class="tocnumber">41.2</span> <span class="toctext">Anonymous Classes</span></a></li> 
         </ul> </li> 
        <li class="toclevel-1"><a href="#Generics"><span class="tocnumber">42</span> <span class="toctext">Generics</span></a> 
         <ul> 
          <li class="toclevel-2"><a href="#Generic_class"><span class="tocnumber">42.1</span> <span class="toctext">Generic class</span></a></li> 
          <li class="toclevel-2"><a href="#Generic_method"><span class="tocnumber">42.2</span> <span class="toctext">Generic method</span></a></li> 
          <li class="toclevel-2"><a href="#Wildcard_Types"><span class="tocnumber">42.3</span> <span class="toctext">Wildcard Types</span></a> 
           <ul> 
            <li class="toclevel-3"><a href="#Upper_bounded_wildcards"><span class="tocnumber">42.3.1</span> <span class="toctext">Upper bounded wildcards</span></a></li> 
            <li class="toclevel-3"><a href="#Lower_bounded_wildcards"><span class="tocnumber">42.3.2</span> <span class="toctext">Lower bounded wildcards</span></a></li> 
            <li class="toclevel-3"><a href="#Unbounded_wildcard"><span class="tocnumber">42.3.3</span> <span class="toctext">Unbounded wildcard</span></a></li> 
           </ul> </li> 
          <li class="toclevel-2"><a href="#Class.3CT.3E"><span class="tocnumber">42.4</span> <span class="toctext">Class&lt;T&gt;</span></a></li> 
          <li class="toclevel-2"><a href="#Motivation"><span class="tocnumber">42.5</span> <span class="toctext">Motivation</span></a></li> 
          <li class="toclevel-2"><a href="#Note_for_C.2B.2B_programmers"><span class="tocnumber">42.6</span> <span class="toctext">Note for C++ programmers</span></a></li> 
         </ul> </li> 
       </ul> 
      </div> 
      <p></p> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Overview">Overview</span></h1> 
      <h1><span class="mw-headline" id="Preface">Preface</span></h1> 
      <blockquote class="templatequote"> 
       <div>
        The beautiful thing about learning is nobody can take it away from you.
       </div> 
       <div class="templatequotecite">
        —
        <a href="https://en.wikipedia.org/wiki/B.B._King" class="extiw" title="w:B.B. King">B.B. King</a> (5 October 1997)
       </div> 
      </blockquote> 
      <p>Learning a computer programming language is like a toddler's first steps. You stumble, and fall, but when you start walking, programming becomes second nature. And once you start programming, you never cease evolving or picking up new tricks. Learn one programming language, and you will "know" them all — the logic of the world will begin to unravel around you.</p> 
      <h2><span id="Are_you_new_to_programming?"></span><span class="mw-headline" id="Are_you_new_to_programming.3F">Are you new to programming?</span></h2> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:302px;">
        <a href="/wiki/File:MarsSunsetCut.jpg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/dd/MarsSunsetCut.jpg/300px-MarsSunsetCut.jpg" width="300" height="91" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/dd/MarsSunsetCut.jpg/450px-MarsSunsetCut.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/dd/MarsSunsetCut.jpg/600px-MarsSunsetCut.jpg 2x" data-file-width="2352" data-file-height="713"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:MarsSunsetCut.jpg" class="internal" title="Enlarge"></a>
         </div> This stunning image of the sunset on planet Mars wouldn't have been possible without Java.
        </div> 
       </div> 
      </div> 
      <p>If you have chosen Java as your first programming language, be assured that Java is also the first choice for computer science programs in many universities. Its simple and intuitive <a href="https://en.wiktionary.org/wiki/syntax" class="extiw" title="wikt:syntax">syntax</a>, or grammar, helps beginners feel at ease with complex programming constructs quickly.</p> 
      <p>However, Java is not a <i>basic</i> programming language. In fact, NASA used Java as the driving force (quite literally) behind its Mars Rover missions. Robots, air traffic control systems and the self-checkout barcode scanners in your favorite supermarkets can all be programmed in Java.</p> 
      <h2><span id="Programming_with_Java™"></span><span class="mw-headline" id="Programming_with_Java.E2.84.A2">Programming with Java™</span></h2> 
      <p>By now, you might truly be able to grasp the power of the Java programming language. With Java, there are many possibilities. Yet not every programmer gets to program applications that take unmanned vehicles onto other planets. Software that we encounter in our daily life is somewhat humble in that respect. Software in Java, however, covers a vast area of the computing ecosphere. Here are just a few examples of the ubiquitous nature of Java applications in real-life:</p> 
      <ul> 
       <li><a href="https://en.wikipedia.org/wiki/OpenOffice.org" class="extiw" title="w:OpenOffice.org">OpenOffice.org</a>, a desktop office management suite that rivals the Microsoft Office suite has been written in Java.</li> 
       <li>The popular building game <a href="https://en.wikipedia.org/wiki/Minecraft" class="extiw" title="w:Minecraft">Minecraft</a> is written in Java.</li> 
       <li>Online browser-based games like <a href="https://en.wikipedia.org/wiki/Runescape" class="extiw" title="w:Runescape">Runescape</a>, a 3D massively multi-player online role playing game (MMORPG), run on graphics routines, 3D rendering and networking capabilities powered by the Java programming language.</li> 
       <li>Two of the world's renowned digital video recorders, <a href="https://en.wikipedia.org/wiki/TiVo" class="extiw" title="w:TiVo">TiVo</a> and BSkyB's <a href="https://en.wikipedia.org/wiki/Sky%2B" class="extiw" title="w:Sky+">Sky+</a> use built-in live television recording software to record, rewind and play your favorite television shows. These applications make extensive use of the Java programming language.</li> 
      </ul> 
      <p>The above mentioned applications illustrate the reach and ubiquity of Java applications. Here's another fact: almost 80% of mobile phone vendors adopt Java as their primary platform for the development of applications. The most widely used mobile-based operating system, <a href="https://en.wikipedia.org/wiki/Android_(operating_system)" class="extiw" title="w:Android (operating system)">Android</a>, uses Java as one of its key application platforms — developers are encouraged to develop applications for Android in the Java programming language.</p> 
      <h2><span id="What_can_Java_not_do?"></span><span class="mw-headline" id="What_can_Java_not_do.3F">What can Java <i>not</i> do?</span></h2> 
      <p>Well, to be honest, there is nothing that Java can't do, at least for application programming. Java is a "complete" language; the only limits are programmer imagination and ability. This book aims to get you acquainted with the basics of the language so you can create the software masterpiece of your dreams. The one area where Java can't be used is for direct interaction with computer hardware. If you want to write an operating system, you will need to look elsewhere!</p> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="About_This_Book">About This Book</span></h1> 
      <p>The Java Programming Wikibook is a shared effort in amassing a comprehensive guide of the complete Java platform — from programming advice and tutorials for the desktop computer to programming on mobile phones. The information presented in this book has been conceptualised with the combined efforts of various <a href="/wiki/Java_Programming/Authors_%26_Contributors" class="mw-redirect" title="Java Programming/Authors &amp; Contributors">contributors</a>, and anonymous editors.</p> 
      <p>The primary purpose of this book is to teach the Java programming language to an audience of beginners, but its progressive layout of tutorials increasing in complexity, it can be just as helpful for intermediate and experienced programmers. Thus, this book is meant to be used as:</p> 
      <ul> 
       <li>a collection of tutorials building upon one another in a progressive manner;</li> 
       <li>a guidebook for efficient programming with the Java programming language; and,</li> 
       <li>a comprehensive manual resource for the advanced programmer.</li> 
      </ul> 
      <p>This book is intended to be used in conjunction with various other online resources, such as:</p> 
      <ul> 
       <li>the <a rel="nofollow" class="external text" href="http://download.oracle.com/javase/8/docs/api/overview-summary.html">Java platform API documentation</a>;</li> 
       <li>the <a rel="nofollow" class="external text" href="http://www.oracle.com/us/technologies/java/index.html">official Java website</a>; and,</li> 
       <li>active Java communities online, such as <a rel="nofollow" class="external text" href="http://home.java.net">Java.net</a> and <a rel="nofollow" class="external text" href="http://www.javaranch.com">JavaRanch</a>, etc.</li> 
      </ul> 
      <h2><span id="Who_should_read_this_book?"></span><span class="mw-headline" id="Who_should_read_this_book.3F">Who should read this book?</span></h2> 
      <p>Everything you would need to know to write computer programs would be explained in this book. By the time you finish reading, you will find yourself proficient enough to tackle just about anything in Java and programs written using it. This book serves as the first few stepping stones of many you would need to cross the unfriendly waters of computer programming. We have put a lot of emphasis in structuring this book in a way that lets you start programming from scratch, with Java as your preferred language of choice. This book is designed for you if any one of the following is true.</p> 
      <ul> 
       <li>You are relatively new to programming and have heard how easy it is to learn Java.</li> 
       <li>You had some <a href="https://en.wikipedia.org/wiki/BASIC" class="extiw" title="w:BASIC">BASIC</a> or <a href="https://en.wikipedia.org/wiki/Pascal_(programming_language)" class="extiw" title="w:Pascal (programming language)">Pascal</a> in school, and have a grasp of basic programming and logic.</li> 
       <li>You already know and have been introduced to programming in earlier versions of Java.</li> 
       <li>You are an experienced developer and know how to program in other languages like <a href="https://en.wikipedia.org/wiki/C%2B%2B" class="extiw" title="w:C++">C++</a>, <a href="https://en.wikipedia.org/wiki/Visual_Basic" class="extiw" title="w:Visual Basic">Visual Basic</a>, <a href="https://en.wikipedia.org/wiki/Python_(programming_language)" class="extiw" title="w:Python (programming language)">Python</a>, <a href="https://en.wikipedia.org/wiki/Ruby_(programming_language)" class="extiw" title="w:Ruby (programming language)">Ruby</a>, etc.</li> 
       <li>You've heard that Java is great for web applications and web services programming.</li> 
      </ul> 
      <p>Although this book is generally meant to be for readers who are beginning to learn programming, it can be highly beneficial for intermediate and advanced programmers who may have missed out on some vital information. After completing this book you should be able to solve many complicated problems using the Java skills presented in the following chapters. Once you finish, you are also encouraged to undertake ambitious programming projects of your own.</p> 
      <p>This book assumes that the reader has no prior knowledge of programming in Java, or for that matter, any object-oriented programming language. Practical examples and exercises following each topic and module make it easy to understand the software development methodology. If you are a complete beginner, we suggest that you move slowly through this book and complete each exercise at your own pace.</p> 
      <h2><span class="mw-headline" id="How_to_use_this_book">How to use this book</span></h2> 
      <p>This book is a reference book of the Java language and its related technologies. Its goal is to give a complete picture of Java and its technologies. While the book can be read from the beginning to end, it is also designed to have individual sections that can be read independently. To help find information quickly, navigation boxes are given in the online version for access to individual topics.</p> 
      <p>This book is divided to sections. Pages are grouped together into section topics. To make this book expandable in the future via the addition of new sections, the sections navigation-wide are independent from each other. Each section can be considered as a mini book by itself. Pages that belong to the same topic can be navigated by the links on the right hand side.</p> 
      <h2><span class="mw-headline" id="How_can_you_participate">How can you participate</span></h2> 
      <p>Content is constantly being updated and enhanced in this book as is the nature of wiki-based content. This book is therefore in a constant state of evolution. Any Wikibooks users can participate in helping this book to a better standard as both a reader, or a contributor.</p> 
      <h3><span class="mw-headline" id="As_a_reader">As a reader</span></h3> 
      <p>If you are interested in reading the content present in this book, we encourage you to:</p> 
      <ul> 
       <li>share comments about the technical accuracy, content, or organization of this book by telling the contributors in the <b>Discussion</b> section for each page. You can find the link <b>Discussion</b> on each page in this book leading you to appropriate sections for discussion. Leave a signature when providing feedback, writing comments, or giving suggestion on the <b>Discussion</b> pages. This can be achieved by appending <code>-- ~~~~</code> to your messages. Do <i>not</i> add your signatures to the <b>Book</b> pages, they are only meant for the <b>Discussion</b> pages.</li> 
       <li>share news about the Java Programming Wikibook with your family and friends and let them know about this comprehensive Java guide online.</li> 
       <li>become a contributing author, if you think that you have information that could fill in some missing gaps in this book.</li> 
      </ul> 
      <h3><span class="mw-headline" id="As_a_contributor">As a contributor</span></h3> 
      <p>If you are intent on writing content for this book, you need to do the following:</p> 
      <ul> 
       <li>When writing content for this book, you can always pose as an anonymous contributor, however we recommend you sign-in into the Wikibooks website when doing so. It becomes easier to track and acknowledge changes to certain parts of the book. Furthermore, the opinions and views of logged-in users are given precedence over anonymous users.</li> 
       <li>Once you have started contributing content for this book, make sure that you add your name to <a href="/wiki/Java_Programming/Authors_%26_Contributors" class="mw-redirect" title="Java Programming/Authors &amp; Contributors">the contributor list</a>.</li> 
       <li><a href="/wiki/Wikibooks:Be_Bold" class="mw-redirect" title="Wikibooks:Be Bold">Be bold</a> and try to follow the <a href="/wiki/Java_Programming/Conventions" title="Java Programming/Conventions">conventions</a> for this Wikibook. It is important that the conventions for this book be followed to the letter to make content consistent and reliable throughout.</li> 
      </ul> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="History">History</span></h1> 
      <p>On 23 May 1995, <a href="https://en.wikipedia.org/wiki/John_Gage" class="extiw" title="w:John Gage">John Gage</a>, the director of the Science Office of the <a href="https://en.wikipedia.org/wiki/Sun_Microsystems" class="extiw" title="w:Sun Microsystems">Sun Microsystems</a> along with <a href="https://en.wikipedia.org/wiki/Marc_Andreesen" class="extiw" title="w:Marc Andreesen">Marc Andreesen</a>, co-founder and executive vice president at <a href="https://en.wikipedia.org/wiki/Netscape" class="extiw" title="w:Netscape">Netscape</a> announced to an audience of SunWorld<sup>TM</sup> that Java technology wasn't a myth and that it was going to be incorporated into <a href="https://en.wikipedia.org/wiki/Netscape_Navigator" class="extiw" title="w:Netscape Navigator">Netscape Navigator</a>.<sup id="cite_ref-CITEREFEarlyYearsSun1_1-0" class="reference"><a href="#cite_note-CITEREFEarlyYearsSun1-1">[1]</a></sup></p> 
      <p>At the time the total number of people working on Java was less than 30.<sup id="cite_ref-CITEREFEarlyYearsSun1_1-1" class="reference"><a href="#cite_note-CITEREFEarlyYearsSun1-1">[1]</a></sup> This team would shape the future in the next decade and no one had any idea as to what was in store. From running an unmanned vehicle on Mars to serving as the operating environment of most consumer electronics, e.g. cable set-top boxes, VCRs, toasters and <a href="https://en.wikipedia.org/wiki/Personal_digital_assistant" class="extiw" title="w:Personal digital assistant">PDAs</a>,<sup id="cite_ref-CITEREFClarkLindseyHistory1_2-0" class="reference"><a href="#cite_note-CITEREFClarkLindseyHistory1-2">[2]</a></sup> Java has come a long way from its inception. Let's see how it all began.</p> 
      <h2><span class="mw-headline" id="Earlier_programming_languages">Earlier programming languages</span></h2> 
      <p>Before Java emerged as a programming language, <a href="/wiki/C%2B%2B_Programming" title="C++ Programming">C++</a> was the dominant player in the trade. The primary goal of the creators of Java was to create a language that could tackle most of the things that C++ offered while getting rid of some of the more tedious tasks that came with the earlier languages.</p> 
      <p>Computer hardware went through a performance and price revolution from 1972 to 1991. Better, faster hardware was available at ever lower prices, and the demand for big and complex software exponentially increased. To accommodate the demand, new development technologies were invented.</p> 
      <p>The C language developed in 1972 by <a href="https://en.wikipedia.org/wiki/Dennis_Ritchie" class="extiw" title="w:Dennis Ritchie">Dennis Ritchie</a> had taken a decade to become the most popular language amongst programmers working on PCs and similar platforms (other languages, like <a href="https://en.wikipedia.org/wiki/COBOL" class="extiw" title="w:COBOL">COBOL</a> and <a href="https://en.wikipedia.org/wiki/FORTRAN" class="extiw" title="w:FORTRAN">FORTRAN</a>, dominated the mainframe market). But, with time programmers found that programming in C became tedious with its structural syntax.<sup id="cite_ref-3" class="reference"><a href="#cite_note-3">[3]</a></sup> Although people attempted to solve this problem, it would be later that a new development philosophy was introduced, one named <i><a href="https://en.wikipedia.org/wiki/Object-oriented_programming" class="extiw" title="w:Object-oriented programming">Object-Oriented Programming</a></i> (OOP). With OOP, one can write code that can be reused later without needing to rewrite the code over and over again. In 1979, <a href="https://en.wikipedia.org/wiki/Bjarne_Stroustrup" class="extiw" title="w:Bjarne Stroustrup">Bjarne Stroustrup</a> developed C++, an enhancement to the C language with included OOP fundamentals and features. Sun generated revenue from Java through the selling of licenses for specialized products such as the <a href="https://en.wikipedia.org/wiki/Java_Enterprise_System" class="extiw" title="w:Java Enterprise System">Java Enterprise System</a>.</p> 
      <h2><span class="mw-headline" id="The_Green_team">The Green team</span></h2> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:202px;">
        <a href="/wiki/File:James_Gosling_2008.jpg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/14/James_Gosling_2008.jpg/200px-James_Gosling_2008.jpg" width="200" height="201" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/14/James_Gosling_2008.jpg/300px-James_Gosling_2008.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/14/James_Gosling_2008.jpg/400px-James_Gosling_2008.jpg 2x" data-file-width="1460" data-file-height="1469"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:James_Gosling_2008.jpg" class="internal" title="Enlarge"></a>
         </div> 
         <a href="https://en.wikipedia.org/wiki/James_Gosling" class="extiw" title="w:James Gosling">James Gosling</a>, architect and designer of the compiler for the Java technology
        </div> 
       </div> 
      </div> 
      <p>In December of 1990, a project was initiated behind closed doors with the aim to create a programming tool that could render obsolete the C and C++ programming languages. Engineer <a href="https://en.wikipedia.org/wiki/Patrick_Naughton" class="extiw" title="w:Patrick Naughton">Patrick Naughton</a> had become extremely frustrated with the state of Sun's C++ and C APIs (<a href="https://en.wikipedia.org/wiki/Application_Programming_Interface" class="extiw" title="w:Application Programming Interface">Application Programming Interfaces</a>) and tools. While he was considering to move towards <a href="https://en.wikipedia.org/wiki/NeXT" class="extiw" title="w:NeXT">NeXT</a>, he was offered a chance to work on new technology and the <i>Stealth Project</i> was started, a secret nobody but he knew.</p> 
      <p>This Stealth Project was later named the <i>Green Project</i> when <a href="https://en.wikipedia.org/wiki/James_Gosling" class="extiw" title="w:James Gosling">James Gosling</a> and Mike Sheridan joined Patrick.<sup id="cite_ref-CITEREFEarlyYearsSun1_1-2" class="reference"><a href="#cite_note-CITEREFEarlyYearsSun1-1">[1]</a></sup> As the Green Project teethed, the prospects of the project started becoming clearer to the engineers working on it. No longer did it aim to create a new language far superior to the present ones, but it aimed to target devices other than the computer.</p> 
      <p>Staffed at 13 people, they began work in a small office on Sand Hill Road in <a href="https://en.wikipedia.org/wiki/Menlo_Park" class="extiw" title="w:Menlo Park">Menlo Park</a>, California. This team came to be called the <i>Green Team</i> henceforth in time. The project they underwent was chartered by Sun Microsystems to anticipate and plan for the "next wave" in computing. For the team, this meant at least one significant trend, that of the convergence of digitally controlled consumer devices and computers.<sup id="cite_ref-CITEREFEarlyYearsSun1_1-3" class="reference"><a href="#cite_note-CITEREFEarlyYearsSun1-1">[1]</a></sup><br style="clear:both;"></p> 
      <h2><span class="mw-headline" id="Reshaping_thought">Reshaping thought</span></h2> 
      <p>The team started thinking of replacing C++ with a better version, a faster version, a responsive version. But the one thing they hadn't thought of, as of yet, was that the language they were aiming for had to be developed for an <a href="https://en.wikipedia.org/wiki/embedded_system" class="extiw" title="w:embedded system">embedded system</a> with limited resources. An <b>embedded system</b> is a computer system scaled to a minimalistic interface demanding only a few functions from its design. For such a system, C++ or any successor would seem too large as all the languages at the time demanded a larger footprint than what was desired. The team thus had to think in a different way to go about solving all these problems.</p> 
      <p>Co-founder of Sun Microsystems, Bill Joy, envisioned a language combining the power of Mesa and C in a paper named <i>Further</i> he wrote for the engineers at Sun. Gathering ideas, Gosling began work on enhancing C++ and named it "C++ ++ --", a pun on the evolutionary structure of the language's name. The ++ and -- meant, <i>putting in</i> and <i>taking out stuff</i>. He soon abandoned the name and called it <b>Oak</b><sup id="cite_ref-CITEREFEarlyYearsSun1_1-4" class="reference"><a href="#cite_note-CITEREFEarlyYearsSun1-1">[1]</a></sup> after the tree that stood outside his office.</p> 
      <table class="sortable wikitable" style="width:100%;"> 
       <caption>
        <b>Table 1: Who's who of the Java technology</b>
        <sup id="cite_ref-CITEREFEarlyYearsSun1_1-5" class="reference"><a href="#cite_note-CITEREFEarlyYearsSun1-1">[1]</a></sup>
        <br> Has worked for GT (Green Team), FP (FirstPerson) and JP (Java Products Group)
       </caption> 
       <tbody>
        <tr> 
         <th style="width:120px;">Name</th> 
         <th>GT</th> 
         <th>FP</th> 
         <th>JP</th> 
         <th>Details</th> 
        </tr> 
        <tr> 
         <td>Lisa Friendly</td> 
         <td></td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td>FirstPerson employee and member of the Java Products Group</td> 
        </tr> 
        <tr> 
         <td>John Gage</td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td>Science Office (Director), Sun Microsystems</td> 
        </tr> 
        <tr> 
         <td>James Gosling</td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td>Lead engineer and key architect of the Java technology</td> 
        </tr> 
        <tr> 
         <td>Bill Joy</td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td>Co-founder and VP, Sun Microsystems; Principal designer of the UC Berkeley, version of the UNIX<sup>®</sup> OS</td> 
        </tr> 
        <tr> 
         <td>Jonni Kanerva</td> 
         <td></td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td></td> 
         <td>Java Products Group employee, author of The Java FAQ1</td> 
        </tr> 
        <tr> 
         <td>Tim Lindholm</td> 
         <td></td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td>FirstPerson employee and member Java Products Group</td> 
        </tr> 
        <tr> 
         <td>Scott McNealy</td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td>Chairman, President, and CEO of Sun Microsystems</td> 
        </tr> 
        <tr> 
         <td>Patrick Naughton</td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td></td> 
         <td>Green Team member, FirstPerson co-founder</td> 
        </tr> 
        <tr> 
         <td>George Paolini</td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td>Corporate Marketing (Director), Sun's Java Software Division</td> 
        </tr> 
        <tr> 
         <td>Kim Polese</td> 
         <td></td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td></td> 
         <td>FirstPerson product marketing</td> 
        </tr> 
        <tr> 
         <td>Lisa Poulson</td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td>Original director of public relations for Java technology (Burson-Marsteller)</td> 
        </tr> 
        <tr> 
         <td>Wayne Rosing</td> 
         <td></td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td></td> 
         <td>FirstPerson President</td> 
        </tr> 
        <tr> 
         <td>Eric Schmidt</td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td>Former Sun Microsystems Chief Technology Officer</td> 
        </tr> 
        <tr> 
         <td>Mike Sheridan</td> 
         <td style="text-align:center;"><a href="/wiki/File:Yes_check.svg" class="image"><img alt="Yes check.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/12px-Yes_check.svg.png" width="12" height="12" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/18px-Yes_check.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/fb/Yes_check.svg/24px-Yes_check.svg.png 2x" data-file-width="600" data-file-height="600"></a><small style="color:transparent;">Yes</small></td> 
         <td></td> 
         <td></td> 
         <td>Green Team member</td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span id="The_demise_of_an_idea,_birth_of_another"></span><span class="mw-headline" id="The_demise_of_an_idea.2C_birth_of_another">The demise of an idea, birth of another</span></h2> 
      <p>By now, the work on Oak had been significant but come the year 1993, people saw the demise of set-top boxes, interactive TV and the PDAs. A failure that completely ushered the inventors' thoughts to be reinvented. Only a miracle could make the project a success now. And such a miracle awaited anticipation.</p> 
      <p><a href="https://en.wikipedia.org/wiki/National_Center_for_Supercomputing_Applications" class="extiw" title="w:National Center for Supercomputing Applications">National Center for Supercomputing Applications</a> (NCSA) had just unveiled its new commercial web browser for the internet the previous year. The focus of the team, now diverted towards where they thought the "next-wave" of computing would be — the internet. The team then divulged into the realms of creating the same embeddable technology to be used in the web browser space calling it an <b><a href="/wiki/Java_Programming/Applets" title="Java Programming/Applets">applet</a></b> — <i>a small application</i>. Keeping all of this in mind, the team created a list of features tackling the C++ problems. In their opinion, the project should&nbsp;...</p> 
      <ul> 
       <li>..&nbsp;be simple and gather tested fundamentals and features from the earlier languages in it,</li> 
       <li>..&nbsp;have standard sets of APIs with basic and advanced features bundled with the language,</li> 
       <li>..&nbsp;get rid of concepts requiring direct manipulation of hardware (in this case, memory) to make the language safe,</li> 
       <li>..&nbsp;be platform independent and may written for every platform once (giving birth to the <a href="https://en.wikipedia.org/wiki/Write_once,_run_anywhere" class="extiw" title="w:Write once, run anywhere">WORA</a> idiom),</li> 
       <li>..&nbsp;be able to manipulate network programming out-of-the-box,</li> 
       <li>..&nbsp;be embeddable in web browsers, and&nbsp;...</li> 
       <li>..&nbsp;have the ability for a single program to multi-task and do multiple things at the same time.</li> 
      </ul> 
      <p>The team now needed a proper identity and they decided on naming the new technology they created Java ushering a new generation of products for the internet boom. A by-product of the project was a cartoon named "<a href="https://en.wikipedia.org/wiki/Duke_(mascot)" class="extiw" title="w:Duke (mascot)">Duke</a>" created by Joe Parlang which became its identity then.</p> 
      <p>Finally at the SunWorld<sup>TM</sup> conference, Andreesen unveiled the new technology to the masses. Riding along with the explosion of interest and publicity in the Internet, Java quickly received widespread recognition and expectations grew for it to become the dominant software for browser and consumer applications.<sup id="cite_ref-CITEREFClarkLindseyHistory1_2-1" class="reference"><a href="#cite_note-CITEREFClarkLindseyHistory1-2">[2]</a></sup></p> 
      <p>Initially Java was owned by Sun Microsystems, but later it was released to open source; the term Java was a trademark of Sun Microsystems. Sun released the source code for its HotSpot Virtual Machine and compiler in November 2006, and most of the source code of the class library in May 2007. Some parts were missing because they were owned by third parties, not by Sun Microsystems. The released parts were published under the terms of the <a href="https://en.wikipedia.org/wiki/GNU_General_Public_License" class="extiw" title="w:GNU General Public License">GNU General Public License</a>, a free software license.</p> 
      <h2><span class="mw-headline" id="Versions">Versions</span></h2> 
      <p>Unlike C and C++, Java's growth is pretty recent. Here, we'd quickly go through the development paths that Java took with age.</p> 
      <div class="center"> 
       <div class="thumb tnone"> 
        <div class="thumbinner" style="width:802px;">
         <a href="/wiki/File:Java_Development_Path.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/b/b8/Java_Development_Path.svg/800px-Java_Development_Path.svg.png" width="800" height="149" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/b/b8/Java_Development_Path.svg/1200px-Java_Development_Path.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/b/b8/Java_Development_Path.svg/1600px-Java_Development_Path.svg.png 2x" data-file-width="961" data-file-height="179"></a> 
         <div class="thumbcaption"> 
          <div class="magnify">
           <a href="/wiki/File:Java_Development_Path.svg" class="internal" title="Enlarge"></a>
          </div> Development of Java over the years. From version 1.0 to version 1.7, Java has displayed a steady growth.
         </div> 
        </div> 
       </div> 
      </div> 
      <h3><span id="Initial_Release_(versions_1.0_and_1.1)"></span><span class="mw-headline" id="Initial_Release_.28versions_1.0_and_1.1.29">Initial Release (versions 1.0 and 1.1)</span></h3> 
      <p>Introduced in 1996 for the <a href="https://en.wikipedia.org/wiki/Solaris_Operating_Environment" class="extiw" title="w:Solaris Operating Environment">Solaris</a>, <a href="https://en.wikipedia.org/wiki/Microsoft_Windows" class="extiw" title="w:Microsoft Windows">Windows</a>, <a href="https://en.wikipedia.org/wiki/Mac_OS" class="extiw" title="w:Mac OS">Mac OS</a> Classic and <a href="https://en.wikipedia.org/wiki/Linux" class="extiw" title="w:Linux">Linux</a>, Java was initially released as the Java Development Kit 1.0 (JDK 1.0). This included the Java runtime (the virtual machine and the class libraries), and the development tools (e.g., the Java compiler). Later, Sun also provided a runtime-only package, called the Java Runtime Environment (JRE). The first name stuck, however, so usually people refer to a particular version of Java by its JDK version (e.g., JDK 1.0).</p> 
      <h3><span id="Java_2_(version_1.2)"></span><span class="mw-headline" id="Java_2_.28version_1.2.29">Java 2 (version 1.2)</span></h3> 
      <p>Introduced in 1998 as a quick fix to the former versions, version 1.2 was the start of a new beginning for Java. The JDKs of version 1.2 and later versions are often called <i>Java 2</i> as well. For example, the official name of JDK 1.4 is <i>The Java(TM) 2 Platform, Standard Edition version 1.4</i>.</p> 
      <dl> 
       <dd>
        Major changes include: 
        <ul> 
         <li>Rewrite the event handling (add <a href="/wiki/Java_Programming/Event_Handling" title="Java Programming/Event Handling">Event Listeners</a>)</li> 
         <li>Change Thread synchronizations</li> 
         <li>Introduction of the JIT-Just in time compilers</li> 
        </ul> 
       </dd> 
      </dl> 
      <h3><span id="Kestrel_(Java_1.3)"></span><span class="mw-headline" id="Kestrel_.28Java_1.3.29">Kestrel (Java 1.3)</span></h3> 
      <p>Released in 8 May 2000. The most notable changes were:</p> 
      <ul> 
       <li>HotSpot JVM included (the HotSpot JVM was first released in April, 1999 for the J2SE 1.2 JVM)</li> 
       <li>RMI was modified to support optional compatibility with CORBA</li> 
       <li>JavaSound</li> 
       <li>Java Naming and Directory Interface (JNDI) included in core libraries (previously available as an extension)</li> 
       <li>Java Platform Debugger Architecture (JPDA)</li> 
       <li>Synthetic proxy classes</li> 
      </ul> 
      <h3><span id="Merlin_(Java_1.4)"></span><span class="mw-headline" id="Merlin_.28Java_1.4.29">Merlin (Java 1.4)</span></h3> 
      <p>Released in 6 February 2002, Java 1.4 has improved programmer productivity by expanding language features and available APIs:</p> 
      <ul> 
       <li>Assertion</li> 
       <li>Regular Expression</li> 
       <li>XML processing</li> 
       <li>Cryptography and Secure Socket Layer (SSL)</li> 
       <li>Non-blocking I/O (NIO)</li> 
       <li>Logging</li> 
      </ul> 
      <h3><span id="Tiger_(version_1.5.0;_Java_SE_5)"></span><span class="mw-headline" id="Tiger_.28version_1.5.0.3B_Java_SE_5.29">Tiger (version 1.5.0; Java SE 5)</span></h3> 
      <p>Released in September 2004</p> 
      <dl> 
       <dd>
        Major changes include: 
        <ul> 
         <li><a href="/wiki/Java_Programming/Generics" title="Java Programming/Generics">Generics</a> - Provides compile-time type safety for collections&nbsp;:and eliminates the drudgery of casting.</li> 
         <li><a href="/wiki/Java_Programming/Classes,_Objects_and_Types#Autoboxing.2Funboxing" title="Java Programming/Classes, Objects and Types">Autoboxing/unboxing</a> - Eliminates the drudgery of manual conversion between primitive types (such as int) and wrapper types (such as Integer).</li> 
         <li>Enhanced for - Shorten the for loop with Collections use.</li> 
         <li>Static imports - Lets you import all the static part of a class.</li> 
         <li><a href="/wiki/Java_Programming/Annotation" class="mw-redirect" title="Java Programming/Annotation">Annotation</a>/Metadata - Enabling tools to generate code and deployment descriptors from annotations in the source code. This leads to a "declarative" programming style where the programmer says what should be done and tools emit the code to do it. Annotations can be inspected through source parsing or by using the additional reflection APIs added in Java 5.</li> 
         <li>JVM Improvements - Most of the run time library is now mapped into memory as a memory image, as opposed to being loaded from a series of class files. Large portion of the runtime libraries will now be shared among multiple JVM instances.</li> 
        </ul> 
       </dd> 
      </dl> 
      <h3><span id="Mustang_(version_1.6.0;_Java_SE_6)"></span><span class="mw-headline" id="Mustang_.28version_1.6.0.3B_Java_SE_6.29">Mustang (version 1.6.0; Java SE 6)</span></h3> 
      <p>Released on 11 December 2006.</p> 
      <p>What's New in Java SE 6:</p> 
      <ul> 
       <li>Web Services - First-class support for writing XML web service client applications.</li> 
      </ul> 
      <ul> 
       <li>Scripting - You can now mix in JavaScript technology source code, useful for prototyping. Also useful when you have teams with a variety of skill sets. More advanced developers can plug in their own scripting engines and mix their favorite scripting language in with Java code as they see fit.</li> 
      </ul> 
      <ul> 
       <li>Database - No more need to find and configure your own JDBC database when developing a database application. Developers will also get the updated JDBC 4.0, a well-used API with many important improvements, such as special support for XML as an SQL datatype and better integration of Binary Large OBjects (BLOBs) and Character Large OBjects (CLOBs) into the APIs.</li> 
      </ul> 
      <ul> 
       <li>More Desktop APIs - GUI developers get a large number of new tricks to play like the ever popular yet newly incorporated SwingWorker utility to help you with threading in GUI apps, JTable sorting and filtering, and a new facility for quick splash screens to quiet impatient users.</li> 
      </ul> 
      <ul> 
       <li>Monitoring and Management - The really big deal here is that you don't need to do anything special to the startup to be able to attach on demand with any of the monitoring and management tools in the Java SE platform.</li> 
      </ul> 
      <ul> 
       <li>Compiler Access - Really aimed at people who create tools for Java development and for frameworks like JavaServer Pages (JSP) or Personal Home Page construction kit (PHP) engines that need to generate a bunch of classes on demand, the compiler API opens up programmatic access to javac for in-process compilation of dynamically generated Java code. The compiler API is not directly intended for the everyday developer, but for those of you deafened by your screaming inner geek, roll up your sleeves and give it a try. And the rest of us will happily benefit from the tools and the improved Java frameworks that use this.</li> 
      </ul> 
      <ul> 
       <li>Pluggable Annotations allows programmer to write annotation processor so that it can analyse your code semantically before javac compiles. For example, you could write an annotation processor that verifies whether your program obeys naming conventions.</li> 
      </ul> 
      <ul> 
       <li>Desktop Deployment - At long last, Java SE 6 unifies the Java Plug-in technology and Java WebStart engines, which just makes sense. Installation of the Java WebStart application got a much needed makeover.</li> 
      </ul> 
      <ul> 
       <li>Security - Java SE 6 has simplified the job of its security administrators by providing various new ways to access platform-native security services, such as native Public Key Infrastructure (PKI) and cryptographic services on Microsoft Windows for secure authentication and communication, Java Generic Security Services (Java GSS) and Kerberos services for authentication, and access to LDAP servers for authenticating users.</li> 
      </ul> 
      <ul> 
       <li>The -lities: Quality, Compatibility, Stability - Bug fixes ...</li> 
      </ul> 
      <h3><span id="Dolphin_(version_1.7.0;_Java_SE_7)"></span><span class="mw-headline" id="Dolphin_.28version_1.7.0.3B_Java_SE_7.29">Dolphin (version 1.7.0; Java SE 7)</span></h3> 
      <p>Released on 28 July 2011.</p> 
      <p>Feature additions for Java 7 include:</p> 
      <ul> 
       <li>JVM support for dynamic languages, following the prototyping work currently done on the Multi Language Virtual Machine</li> 
       <li>Compressed 64-bit pointers Available in Java 6 with <a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html">-XX:+UseCompressedOops</a></li> 
       <li>Small language changes (grouped under a project named Coin):</li> 
      </ul> 
      <dl> 
       <dd> 
        <ul> 
         <li>Strings in switch</li> 
         <li>Automatic resource management in try-statement</li> 
         <li>Improved type inference for generic instance creation</li> 
         <li>Simplified varargs method declaration</li> 
         <li>Binary integer literals</li> 
         <li>Allowing underscores in numeric literals</li> 
         <li>Catching multiple exception types and rethrowing exceptions with improved type checking</li> 
        </ul> 
       </dd> 
      </dl> 
      <ul> 
       <li>Concurrency utilities under JSR 166</li> 
       <li>New file I/O library to enhance platform independence and add support for metadata and symbolic links. The new packages are java.nio.file and java.nio.file.attribute</li> 
       <li>Library-level support for Elliptic curve cryptography algorithms</li> 
       <li>An XRender pipeline for Java 2D, which improves handling of features specific to modern GPUs</li> 
       <li>New platform APIs for the graphics features originally planned for release in Java version 6u10</li> 
       <li>Enhanced library-level support for new network protocols, including SCTP and Sockets Direct Protocol</li> 
       <li>Upstream updates to XML and Unicode</li> 
      </ul> 
      <p>Lambda (Java's implementation of lambda functions), Jigsaw (Java's implementation of modules), and part of Coin were dropped from Java 7.</p> 
      <h3><span id="Spider_(version_1.8.0;_Java_SE_8)"></span><span class="mw-headline" id="Spider_.28version_1.8.0.3B_Java_SE_8.29">Spider (version 1.8.0; Java SE 8)</span></h3> 
      <p>Java 8 was released on 18 March 2014, and included some features that were planned for Java 7 but later deferred.</p> 
      <p>Work on features was organized in terms of JDK Enhancement Proposals (JEPs).</p> 
      <ul> 
       <li>JSR 335, JEP 126: Language-level support for lambda expressions (officially, lambda expressions; unofficially, closures) under Project Lambda which allow the addition of methods to interfaces without breaking existing implementations. There was an ongoing debate in the Java community on whether to add support for lambda expressions. Supporting lambda expressions also allows the performance of functional-style operations on streams of elements, such as MapReduce-inspired transformations on collections. Default methods allow an author of an API to add new methods to an interface without breaking the old code using it. Although it was not their primary intent, default methods also allow multiple inheritance of behavior (but not state).</li> 
      </ul> 
      <ul> 
       <li>JSR 223, JEP 174: Project Nashorn, a JavaScript runtime which allows developers to embed JavaScript code within applications</li> 
       <li>JSR 308, JEP 104: Annotation on Java Types</li> 
       <li>Unsigned Integer Arithmetic</li> 
       <li>JSR 337, JEP 120: Repeating annotations</li> 
       <li>JSR 310, JEP 150: Date and Time API</li> 
       <li>JEP 178: Statically-linked JNI libraries</li> 
       <li>JEP 153: Launch JavaFX applications (direct launching of JavaFX application JARs)</li> 
       <li>JEP 122: Remove the permanent generation</li> 
      </ul> 
      <h2><span class="mw-headline" id="References">References</span></h2> 
      <div class="reflist references" style=""> 
       <ol class="references"> 
        <li id="cite_note-CITEREFEarlyYearsSun1-1"><span class="mw-cite-backlink">? <sup><a href="#cite_ref-CITEREFEarlyYearsSun1_1-0"><i><b>a</b></i></a></sup> <sup><a href="#cite_ref-CITEREFEarlyYearsSun1_1-1"><i><b>b</b></i></a></sup> <sup><a href="#cite_ref-CITEREFEarlyYearsSun1_1-2"><i><b>c</b></i></a></sup> <sup><a href="#cite_ref-CITEREFEarlyYearsSun1_1-3"><i><b>d</b></i></a></sup> <sup><a href="#cite_ref-CITEREFEarlyYearsSun1_1-4"><i><b>e</b></i></a></sup> <sup><a href="#cite_ref-CITEREFEarlyYearsSun1_1-5"><i><b>f</b></i></a></sup></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://java.sun.com/features/1998/05/birthday.html">"Java Technology: The Early Years"</a>. Sun Microsystems<span class="printonly">. <a rel="nofollow" class="external free" href="http://java.sun.com/features/1998/05/birthday.html">http://java.sun.com/features/1998/05/birthday.html</a></span><span class="reference-accessdate">. Retrieved 9 May 2008</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=Java+Technology%3A+The+Early+Years&amp;rft.atitle=&amp;rft.pub=Sun+Microsystems&amp;rft_id=http%3A%2F%2Fjava.sun.com%2Ffeatures%2F1998%2F05%2Fbirthday.html&amp;rfr_id=info:sid/en.wikibooks.org:Java_Programming/Print_version"><span style="display: none;">&nbsp;</span></span></span></li> 
        <li id="cite_note-CITEREFClarkLindseyHistory1-2"><span class="mw-cite-backlink">? <sup><a href="#cite_ref-CITEREFClarkLindseyHistory1_2-0"><i><b>a</b></i></a></sup> <sup><a href="#cite_ref-CITEREFClarkLindseyHistory1_2-1"><i><b>b</b></i></a></sup></span> <span class="reference-text"><span class="citation web"><a rel="nofollow" class="external text" href="http://www.particle.kth.se/~lindsey/JavaCourse/Book/Part1/Java/Chapter01/history.html">"History of Java"</a>. Lindsey, Clark S.<span class="printonly">. <a rel="nofollow" class="external free" href="http://www.particle.kth.se/~lindsey/JavaCourse/Book/Part1/Java/Chapter01/history.html">http://www.particle.kth.se/~lindsey/JavaCourse/Book/Part1/Java/Chapter01/history.html</a></span><span class="reference-accessdate">. Retrieved 7 May 2008</span>.</span><span class="Z3988" title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.btitle=History+of+Java&amp;rft.atitle=&amp;rft.pub=Lindsey%2C+Clark+S.&amp;rft_id=http%3A%2F%2Fwww.particle.kth.se%2F%7Elindsey%2FJavaCourse%2FBook%2FPart1%2FJava%2FChapter01%2Fhistory.html&amp;rfr_id=info:sid/en.wikibooks.org:Java_Programming/Print_version"><span style="display: none;">&nbsp;</span></span></span></li> 
        <li id="cite_note-3"><span class="mw-cite-backlink"><a href="#cite_ref-3">?</a></span> <span class="reference-text">Structural syntax is a linear way of writing code. A program is interpreted usually at the first line of the program's code until it reaches the end. One cannot hook a later part of the program to an earlier one. The flow follows a linear top-to-bottom approach.</span></li> 
       </ol> 
      </div> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Java_Overview">Java Overview</span></h1> 
      <p>The new features and upgrades included into Java changed the face of programming environment and gave a new definition to <a href="/wiki/Object_Oriented_Programming" title="Object Oriented Programming">Object Oriented Programming</a> (<i>OOP</i> in short). But unlike its predecessors, Java needed to be bundled with standard functionality and be independent of the host platform.</p> 
      <p>The primary goals in the creation of the Java language:</p> 
      <ul> 
       <li>It is simple.</li> 
       <li>It is object-oriented.</li> 
       <li>It is independent of the host platform.</li> 
       <li>It contains language facilities and libraries for networking.</li> 
       <li>It is designed to execute code from remote sources securely.</li> 
      </ul> 
      <p>The Java language introduces some new features that did not exist in other languages like C and C++.</p> 
      <h2><span class="mw-headline" id="Object_orientation">Object orientation</span></h2> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:302px;">
        <a href="/wiki/File:KP-UML-Generalization-20060325.svg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/66/KP-UML-Generalization-20060325.svg/300px-KP-UML-Generalization-20060325.svg.png" width="300" height="123" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/66/KP-UML-Generalization-20060325.svg/450px-KP-UML-Generalization-20060325.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/66/KP-UML-Generalization-20060325.svg/600px-KP-UML-Generalization-20060325.svg.png 2x" data-file-width="372" data-file-height="152"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:KP-UML-Generalization-20060325.svg" class="internal" title="Enlarge"></a>
         </div> Object oriented programming can be represented with 
         <a href="/wiki/Introduction_to_Software_Engineering/UML" title="Introduction to Software Engineering/UML">UML</a> diagrams.
        </div> 
       </div> 
      </div> 
      <p>Object orientation ("OO") refers to a method of programming and language technique. The main idea of OO is to design software around the "things" (i.e. objects) it manipulates, rather than the actions it performs.</p> 
      <p>As the hardware of the computer advanced, it brought about the need to create better software techniques to be able to create ever increasing complex applications. The intent is to make large software projects easier to manage, thus improving quality and reducing the number of failed projects. Object oriented solution is the latest software technique.</p> 
      <dl> 
       <dt>
        Assembly languages&nbsp;
       </dt> 
       <dd>
        Software techniques started with the assembly languages, that were close to machine instruction and were easy to convert into executable code. Each hardware had its own assembly language. Assembly language contains low level instructions like move data from memory to hardware registers, do arithmetic operations, and move data back to memory. Programmers had to know the detailed architecture of the computer in order to write programs.
       </dd> 
      </dl> 
      <dl> 
       <dt>
        Procedural languages&nbsp;
       </dt> 
       <dd>
        After the assembly languages, high level languages were developed. Here the language compiler is used to convert the high level program to machine instructions, freeing the programmers from the burden of knowing the computer hardware architecture. To promote the re-use of code and to minimize the use of GOTO instructions, "procedural" techniques were introduced. This simplified the creation and maintenance of software control flow, but left out the organization of data. It became a nightmare to debug and maintain programs having many global variables (i.e. variables that contain data that can be modified anywhere in the application).
       </dd> 
      </dl> 
      <dl> 
       <dt>
        Object oriented languages&nbsp;
       </dt> 
       <dd>
        In OO languages, data is taken seriously with information hiding. Data that is specific to an object can only be accessed by procedures in that object. As a result, objects contain data as well as control flow and a program becomes a series of interactions between objects.
       </dd> 
      </dl> 
      <h2><span class="mw-headline" id="Platform_dependence">Platform dependence</span></h2> 
      <p>In C or C++ programming, you start to write a source code:<br style="clear:both;"> <a href="/wiki/File:Gnome-mime-text-x-c.svg" class="image"><img alt="Gnome-mime-text-x-c.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/50px-Gnome-mime-text-x-c.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/75px-Gnome-mime-text-x-c.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/100px-Gnome-mime-text-x-c.svg.png 2x" data-file-width="60" data-file-height="60"></a><br style="clear:both;"></p> 
      <p>... you compile it to a machine code file:<br style="clear:both;"> <a href="/wiki/File:Gnome-mime-text-x-c.svg" class="image"><img alt="Gnome-mime-text-x-c.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/50px-Gnome-mime-text-x-c.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/75px-Gnome-mime-text-x-c.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/100px-Gnome-mime-text-x-c.svg.png 2x" data-file-width="60" data-file-height="60"></a> <a href="/wiki/File:Gnome-mime-application-x-executable.svg" class="image"><img alt="Gnome-mime-application-x-executable.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/50px-Gnome-mime-application-x-executable.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/75px-Gnome-mime-application-x-executable.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/100px-Gnome-mime-application-x-executable.svg.png 2x" data-file-width="60" data-file-height="60"></a><br style="clear:both;"></p> 
      <p>... and then you execute it:<br style="clear:both;"> <a href="/wiki/File:Gnome-mime-text-x-c.svg" class="image"><img alt="Gnome-mime-text-x-c.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/50px-Gnome-mime-text-x-c.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/75px-Gnome-mime-text-x-c.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/100px-Gnome-mime-text-x-c.svg.png 2x" data-file-width="60" data-file-height="60"></a> <a href="/wiki/File:Gnome-mime-application-x-executable.svg" class="image"><img alt="Gnome-mime-application-x-executable.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/50px-Gnome-mime-application-x-executable.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/75px-Gnome-mime-application-x-executable.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/100px-Gnome-mime-application-x-executable.svg.png 2x" data-file-width="60" data-file-height="60"></a> <a href="/wiki/File:Window_Dialog.svg" class="image"><img alt="Window Dialog.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Window_Dialog.svg/50px-Window_Dialog.svg.png" width="50" height="31" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Window_Dialog.svg/75px-Window_Dialog.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Window_Dialog.svg/100px-Window_Dialog.svg.png 2x" data-file-width="311" data-file-height="193"></a><br style="clear:both;"></p> 
      <p>In this situation, the machine code file and its execution are specific to the platform (Windows, Linux, Mac OS, ...) it was compiled for, that is to say to the <i>targeted platform</i>:</p> 
      <table> 
       <tbody>
        <tr> 
         <td> <p><a href="/wiki/File:Gnome-mime-text-x-c.svg" class="image"><img alt="Gnome-mime-text-x-c.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/50px-Gnome-mime-text-x-c.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/75px-Gnome-mime-text-x-c.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/100px-Gnome-mime-text-x-c.svg.png 2x" data-file-width="60" data-file-height="60"></a></p> </td> 
         <td style="border: 2px solid red;"> <p><a href="/wiki/File:Gnome-mime-application-x-executable.svg" class="image"><img alt="Gnome-mime-application-x-executable.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/50px-Gnome-mime-application-x-executable.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/75px-Gnome-mime-application-x-executable.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/100px-Gnome-mime-application-x-executable.svg.png 2x" data-file-width="60" data-file-height="60"></a><a href="/wiki/File:Window_Dialog.svg" class="image"><img alt="Window Dialog.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Window_Dialog.svg/50px-Window_Dialog.svg.png" width="50" height="31" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Window_Dialog.svg/75px-Window_Dialog.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/d9/Window_Dialog.svg/100px-Window_Dialog.svg.png 2x" data-file-width="311" data-file-height="193"></a></p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br style="clear:both;"></p> 
      <p>... because the compiled file is a machine code file designed to work on a specific platform and hardware. It would have produced a different results/output for another platform. So if you want your program to run on several platforms, you have to compile your program several times:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td style="text-align: center;"> <p><a href="/wiki/File:Gnome-mime-text-x-c.svg" class="image"><img alt="Gnome-mime-text-x-c.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/50px-Gnome-mime-text-x-c.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/75px-Gnome-mime-text-x-c.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Gnome-mime-text-x-c.svg/100px-Gnome-mime-text-x-c.svg.png 2x" data-file-width="60" data-file-height="60"></a></p> </td> 
        </tr> 
        <tr> 
         <td style="text-align: center;"> <p><a href="/wiki/File:Gnome-mime-application-x-executable.svg" class="image"><img alt="Gnome-mime-application-x-executable.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/50px-Gnome-mime-application-x-executable.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/75px-Gnome-mime-application-x-executable.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/100px-Gnome-mime-application-x-executable.svg.png 2x" data-file-width="60" data-file-height="60"></a><a href="/wiki/File:Gnome-mime-application-x-executable.svg" class="image"><img alt="Gnome-mime-application-x-executable.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/50px-Gnome-mime-application-x-executable.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/75px-Gnome-mime-application-x-executable.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/100px-Gnome-mime-application-x-executable.svg.png 2x" data-file-width="60" data-file-height="60"></a><a href="/wiki/File:Gnome-mime-application-x-executable.svg" class="image"><img alt="Gnome-mime-application-x-executable.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/50px-Gnome-mime-application-x-executable.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/75px-Gnome-mime-application-x-executable.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gnome-mime-application-x-executable.svg/100px-Gnome-mime-application-x-executable.svg.png 2x" data-file-width="60" data-file-height="60"></a></p> </td> 
        </tr> 
        <tr> 
         <td style="text-align: center;"> <p><a href="/wiki/File:Windows_icon.svg" class="image"><img alt="Windows icon.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/22/Windows_icon.svg/50px-Windows_icon.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/22/Windows_icon.svg/75px-Windows_icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/22/Windows_icon.svg/100px-Windows_icon.svg.png 2x" data-file-width="256" data-file-height="256"></a><a href="/wiki/File:Apple_Logo.svg" class="image"><img alt="Apple Logo.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Apple_Logo.svg/50px-Apple_Logo.svg.png" width="50" height="60" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Apple_Logo.svg/75px-Apple_Logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Apple_Logo.svg/100px-Apple_Logo.svg.png 2x" data-file-width="136" data-file-height="162"></a><a href="/wiki/File:Tux.svg" class="image"><img alt="Tux.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/50px-Tux.svg.png" width="50" height="59" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/75px-Tux.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/100px-Tux.svg.png 2x" data-file-width="280" data-file-height="330"></a></p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>It poses greater vulnerability risks. Note here that when a certain code is compiled into an executable format, the executable cannot be changed dynamically. It would need to be recompiled from the changed code for the changes to be reflected in the finished executable. <b>Modularity</b> (dividing code into modules) is <i>not</i> present in Java's predecessors. If instead of a single executable, the output application was in the form of modules, one could easily change a single module and review changes in the application. In C/C++ on the other hand, a slight change in code required the whole application to be recompiled.</p> 
      <p>The idea of Java is to compile the source code into an intermediate language that will be interpreted.</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Text-x-java-source.svg" class="image"><img alt="Text-x-java-source.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Text-x-java-source.svg/50px-Text-x-java-source.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Text-x-java-source.svg/75px-Text-x-java-source.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Text-x-java-source.svg/100px-Text-x-java-source.svg.png 2x" data-file-width="48" data-file-height="48"></a>
           </div> 
          </div> </td> 
         <td> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Application-x-executable.svg" class="image"><img alt="Application-x-executable.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Application-x-executable.svg/50px-Application-x-executable.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Application-x-executable.svg/75px-Application-x-executable.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/29/Application-x-executable.svg/100px-Application-x-executable.svg.png 2x" data-file-width="48" data-file-height="48"></a>
           </div> 
          </div> </td> 
         <td> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Java.png" class="image"><img alt="Java.png" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/50px-Java.png" width="50" height="41" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/75px-Java.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/100px-Java.png 2x" data-file-width="363" data-file-height="299"></a>
           </div> 
          </div> </td> 
        </tr> 
        <tr> 
         <td>The source code</td> 
         <td>The intermediate file</td> 
         <td>The interpretor</td> 
        </tr> 
       </tbody>
      </table> 
      <p>The intermediate language is the <i>byte code</i>. The interpretor is the <i>Java Virtual Machine</i> (JVM). The byte code file is universal and the JVM is platform specific:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td style="text-align: center;"> <p><a href="/wiki/File:Text-x-java-source.svg" class="image"><img alt="Text-x-java-source.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Text-x-java-source.svg/50px-Text-x-java-source.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Text-x-java-source.svg/75px-Text-x-java-source.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Text-x-java-source.svg/100px-Text-x-java-source.svg.png 2x" data-file-width="48" data-file-height="48"></a></p> </td> 
        </tr> 
        <tr> 
         <td style="text-align: center;"> <p><a href="/wiki/File:Application-x-executable.svg" class="image"><img alt="Application-x-executable.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Application-x-executable.svg/50px-Application-x-executable.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Application-x-executable.svg/75px-Application-x-executable.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/29/Application-x-executable.svg/100px-Application-x-executable.svg.png 2x" data-file-width="48" data-file-height="48"></a></p> </td> 
        </tr> 
        <tr> 
         <td style="text-align: center;"> <p><a href="/wiki/File:Java.png" class="image"><img alt="Java.png" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/50px-Java.png" width="50" height="41" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/75px-Java.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/100px-Java.png 2x" data-file-width="363" data-file-height="299"></a><a href="/wiki/File:Java.png" class="image"><img alt="Java.png" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/50px-Java.png" width="50" height="41" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/75px-Java.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/100px-Java.png 2x" data-file-width="363" data-file-height="299"></a><a href="/wiki/File:Java.png" class="image"><img alt="Java.png" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/50px-Java.png" width="50" height="41" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/75px-Java.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/26/Java.png/100px-Java.png 2x" data-file-width="363" data-file-height="299"></a></p> </td> 
        </tr> 
        <tr> 
         <td style="text-align: center;"> <p><a href="/wiki/File:Windows_icon.svg" class="image"><img alt="Windows icon.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/22/Windows_icon.svg/50px-Windows_icon.svg.png" width="50" height="50" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/22/Windows_icon.svg/75px-Windows_icon.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/22/Windows_icon.svg/100px-Windows_icon.svg.png 2x" data-file-width="256" data-file-height="256"></a><a href="/wiki/File:Apple_Logo.svg" class="image"><img alt="Apple Logo.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Apple_Logo.svg/50px-Apple_Logo.svg.png" width="50" height="60" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Apple_Logo.svg/75px-Apple_Logo.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/8/8a/Apple_Logo.svg/100px-Apple_Logo.svg.png 2x" data-file-width="136" data-file-height="162"></a><a href="/wiki/File:Tux.svg" class="image"><img alt="Tux.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/50px-Tux.svg.png" width="50" height="59" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/75px-Tux.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/100px-Tux.svg.png 2x" data-file-width="280" data-file-height="330"></a></p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>So a JVM should be coded for each platform. And that's the case. So you just have to generate a unique byte code file (a <code>.class</code> file).</p> 
      <p>The first implementations of the language used an interpreted virtual machine to achieve portability, and many implementations still do. These implementations produce programs that run more slowly than the fully-compiled programs created by the typical C++ compiler, so the language suffered a reputation for producing slow programs. Since Java 1.2, Java VM produces programs that run much faster, using multiple techniques.</p> 
      <p>The first of these is to simply compile directly into native code like a more traditional compiler, skipping bytecode entirely. This achieves great performance, but at the expense of portability. This is not really used any more.</p> 
      <p>Another technique, the <i>just-in-time</i> (JIT) compiler, compiles the Java bytecode into native code at the time the program is run, and keep the compiled code to be used again and again. More sophisticated VMs even use <i>dynamic recompilation</i>, in which the VM can analyze the behavior of the running program and selectively recompile and optimize critical parts of the program. Both of these techniques allow the program to take advantage of the speed of native code without losing portability.</p> 
      <p>Portability is a technically difficult goal to achieve, and Java's success at that goal is a matter of some controversy. Although it is indeed possible to write programs for the Java platform that behave consistently across many host platforms, the large number of available platforms with small errors or inconsistencies led some to parody Sun's "Write once, run anywhere" slogan as "Write once, debug everywhere".</p> 
      <h2><span class="mw-headline" id="Standardization">Standardization</span></h2> 
      <p>C++ was built atop the C language and as a result divergent ways of doing the same thing manifested around the language. For instance, creating an object could be done in three different ways in C++. Furthermore, C++ did not come with a standard library bundled with its compilers. Instead, it relied on resources created by other programmers; code which rarely fit together.</p> 
      <p>In Java, standardized libraries are provided to allow access to features of the host machines (such as graphics and networking) in unified ways. The Java language also includes support for multi-threaded programs—a necessity for many networking applications.</p> 
      <p>Platform independent Java is, however, very successful with server side applications, such as web services, servlets, or Enterprise JavaBeans.</p> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:302px;">
        <a href="/wiki/File:Gui-widgets.png" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Gui-widgets.png/300px-Gui-widgets.png" width="300" height="242" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Gui-widgets.png/450px-Gui-widgets.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/c/cc/Gui-widgets.png/600px-Gui-widgets.png 2x" data-file-width="644" data-file-height="519"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:Gui-widgets.png" class="internal" title="Enlarge"></a>
         </div> Swing does not rely on the underlying native user interface.
        </div> 
       </div> 
      </div> 
      <p>Java also made progress on the client side, first it had <a href="https://en.wikipedia.org/wiki/Abstract_Window_Toolkit" class="extiw" title="w:Abstract Window Toolkit">Abstract Window Toolkit</a> (AWT), then <a href="/wiki/Java_Swings" title="Java Swings">Swing</a>, and the most recent client side library is the <a href="https://en.wikipedia.org/wiki/Standard_Widget_Toolkit" class="extiw" title="w:Standard Widget Toolkit">Standard Widget Toolkit</a> (SWT). It is interesting to see how they tried to handle the two opposing consuming forces. Those are&nbsp;:</p> 
      <dl> 
       <dt>
        Efficient, fast code; port to most popular hardware (write once, test anywhere)&nbsp;
       </dt> 
       <dd>
        Use the underlying native subroutine to create a GUI component. This approach was taken by AWT, and SWT.
       </dd> 
      </dl> 
      <dl> 
       <dt>
        Portability to any hardware where JVM ported (write once, run anywhere)&nbsp;
       </dt> 
       <dd>
        To achieve this to the latter, the Java toolkit should not rely on the underlying native user interface. Swing took this approach.
       </dd> 
      </dl> 
      <p>It is interesting to see how the approach was switched back and forth. AWT ? Swing ? SWT.<br style="clear:both;"></p> 
      <h2><span class="mw-headline" id="Secure_execution">Secure execution</span></h2> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:302px;">
        <a href="/wiki/File:FreeBSD_kernel_panic.png" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/d4/FreeBSD_kernel_panic.png/300px-FreeBSD_kernel_panic.png" width="300" height="167" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/d4/FreeBSD_kernel_panic.png/450px-FreeBSD_kernel_panic.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/d4/FreeBSD_kernel_panic.png/600px-FreeBSD_kernel_panic.png 2x" data-file-width="720" data-file-height="400"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:FreeBSD_kernel_panic.png" class="internal" title="Enlarge"></a>
         </div> The segmentation fault, one of the most recurrent issues in C programming.
        </div> 
       </div> 
      </div> 
      <p>With the high-level of control built into the language to manipulate hardware, a C/C++ programmer could access almost any resource, either hardware or software on the system. This was intended to be one of the languages' strong points, but this very flexibility led to confusion and complex programming practices.</p> 
      <h2><span class="mw-headline" id="Error_handling">Error handling</span></h2> 
      <p>The old way of error handling was to let each function return an error code then let the caller check what was returned. The problem with this method was that if the return code was full of error-checking codes, this got in the way of the original one that was doing the actual work, which in turn did not make it very readable.</p> 
      <p>In the new way of error handling, functions/methods do not return error codes. Instead, when there is an error, an <a href="/wiki/Java_Programming/Exceptions" title="Java Programming/Exceptions">exception</a> is thrown. The exceptions can be handled by the <code><a href="/wiki/Java_Programming/Keywords/catch" title="Java Programming/Keywords/catch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">catch</font></a></code> keyword at the end of a <code><a href="/wiki/Java_Programming/Keywords/try" title="Java Programming/Keywords/try"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">try</font></a></code> block. This way, the code that is calling the function does not need to be mangled with error checking codes, thus making the code more readable. This new way of error handling is called <i>Exception handling</i>.</p> 
      <p>Exception handling was also added to C++. However, there are two differences between Java and C++ Exception handling:</p> 
      <ul> 
       <li>In Java, the exception that is thrown is a Java object like any other object in Java. It only has to implement <code>Throwable</code> interface.</li> 
       <li>In Java, the compiler checks whether an exception may be caught or not. The compiler gives an error if there is no catch block for a thrown exception.</li> 
      </ul> 
      <p>The optional exception handling in the Java predecessors leads the developers not to care about the error handling. As a consequence, unexpected errors often occur. Java forces the developers to handle exceptions. The programmer must handle exception or declare that the user must handle it. Someone must handle it.</p> 
      <h2><span class="mw-headline" id="Networking_capabilities">Networking capabilities</span></h2> 
      <p>However powerful, the predecessors of Java lacked a standard feature to network with other computers, and usually relied on the platforms' intricate networking capabilities. With almost all network protocols being standardized, the creators of Java technology wanted this to be a flagship feature of the language while keeping true to the spirit of earlier advances made towards standardizing <a href="https://en.wikipedia.org/wiki/Remote_procedure_call" class="extiw" title="w:Remote procedure call">Remote Procedure Call</a>. Another feature that the Java team focused on was its integration in the World Wide Web and the Internet.</p> 
      <p>The Java platform was one of the first systems to provide wide support for the execution of code from remote sources. The Java language was designed with <a href="https://en.wikipedia.org/wiki/Network_computing" class="extiw" title="w:Network computing">network computing</a> in mind.</p> 
      <p>An applet could run within a user's browser, executing code downloaded from a remote HTTP server. The remote code runs in a highly restricted "sandbox", which protects the user from misbehaving or malicious code; publishers could apply for a certificate that they could use to digitally sign applets as "safe", giving them permission to break out of the sandbox and access the local file system and network, presumably under user control.</p> 
      <h2><span class="mw-headline" id="Dynamic_class_loading">Dynamic class loading</span></h2> 
      <p>In conventional languages like C and C++, all code had to be compiled and linked to one executable program, before execution. In Java, classes are compiled as needed. If a class is not needed during an execution phase, that class is not even compiled into byte code.</p> 
      <p>This feature comes in handy especially in network programming when we do not know, beforehand, what code will be executed. A running program could load classes from the file system or from a remote server.</p> 
      <p>Also this feature makes it theoretically possible for a Java program to alter its own code during execution, in order to do some self-learning behavior. It would be more realistic to imagine, however, that a Java program would generate Java code before execution, and then, that code would be executed. With some feedback mechanism, the generated code could improve over time.</p> 
      <h2><span class="mw-headline" id="Automatic_memory_garbage_collection">Automatic memory garbage collection</span></h2> 
      <p>In conventional languages like C and C++, the programmer has to make sure that all memory that was allocated is freed. Memory leaks became a regular nuisance in instances where the programmers had to manually allocate the system's memory resources.</p> 
      <p>Memory resources or buffers have specific modes of operation for optimal performance. Once a buffer is filled with data, it needs to be cleaned up after there is no further use for its content. If a programmer forgets to clean it in his/her code, the memory is easily overloaded. Programming in C/C++ languages became tedious and unsafe because of these very quirks, and programs built in these languages were prone to memory leakages and sudden system crashes — sometimes even harming the hardware itself. Freeing memory is particularly important in servers, since it has to run without stopping for days. If a piece of memory is not freed after use and the server just keeps allocating memory, that memory leak can take down the server.</p> 
      <p>In Java, freeing up memory is taken out of the programmers hands; the Java Virtual Machine keeps track of all used memory. When memory is not used any more it is automatically freed up. A separate task is running in the background by the JVM, freeing up unreferenced, unused memory. That task is called the <i>Garbage Collector</i>.</p> 
      <p>The Garbage Collector is always running. This automatic memory garbage collection feature makes it easy to write robust server side programs in Java. The only thing the programmer has to watch for is the speed of object creation. If the application is creating objects faster than the Garbage Collector can free them, it can cause memory problems. Depending on how the JVM is configured, the application either can run out of memory by throwing the <code>NotEnoughMemoryException</code>, or can halt to give time for the Garbage Collector to do its job.</p> 
      <h2><span class="mw-headline" id="Applet">Applet</span></h2> 
      <p>The Java creators created the concept of the <i>applet</i>. A Java program can be run in a client browser program. Java was released in 1995; the time when the Internet was becoming more available and familiar to the general public. The promise of Java was in the client browser-side in that code would be downloaded and executed as a Java applet in the client browser program.</p> 
      <dl> 
       <dd>
        <i>See also <a href="/wiki/Java_Programming/Applets" title="Java Programming/Applets">Java Programming/Applets</a>.</i>
       </dd> 
      </dl> 
      <h2><span class="mw-headline" id="Forbidden_bad_practices">Forbidden bad practices</span></h2> 
      <p>Over the years, some features in C/C++ programming became abused by the programmers. Although the language allows it, it was known as bad practices. So the creators of Java have disabled them:</p> 
      <ul> 
       <li>Operator overloading</li> 
       <li>Multiple inheritance</li> 
       <li>Friend classes (access another object's private members)</li> 
       <li>Restrictions of explicit type casting (related to memory management)</li> 
      </ul> 
      <h2><span class="mw-headline" id="Evaluation">Evaluation</span></h2> 
      <p>In most people's opinions, Java technology delivers reasonably well on all these goals. The language is not, however, without drawbacks. Java tends to be more high-level than similar languages (such as C++), which means that the Java language lacks features such as hardware-specific data types, low-level pointers to arbitrary memory addresses, or programming methods like operator overloading. Although these features are frequently abused or misused by programmers, they are also powerful tools. However, Java technology includes <a href="/wiki/Java_Programming/Java_Native_Interface" title="Java Programming/Java Native Interface">Java Native Interface</a> (JNI), a way to call native code from Java language code. With JNI, it is still possible to use some of these features.</p> 
      <p>Some programmers also complain about its lack of multiple inheritance, a powerful feature of several object-oriented languages, among others C++. The Java language separates inheritance of type and implementation, allowing inheritance of multiple type definitions through interfaces, but only single inheritance of type implementation via class hierarchies. This allows most of the benefits of multiple inheritance while avoiding many of its dangers. In addition, through the use of concrete classes, abstract classes, as well as interfaces, a Java language programmer has the option of choosing full, partial, or zero implementation for the object type he defines, thus ensuring maximum flexibility in application design.</p> 
      <p>There are some who believe that for certain projects, object orientation makes work harder instead of easier. This particular complaint is not unique to the Java language but applies to other object-oriented languages as well.</p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="The_Java_Platform">The Java Platform</span></h1> 
      <p>The <b>Java platform</b> is the name given to the computing platform from Oracle that helps users to <i>run</i> and <i>develop</i> Java applications. The platform does not just enable a user to run and develop a Java application, but also features a wide variety of tools that can help developers work efficiently with the Java programming language.</p> 
      <p>The platform consists of two essential softwares:</p> 
      <ul> 
       <li>the <b>Java Runtime Environment (JRE)</b>, which is needed to <i>run</i> Java applications and applets; and,</li> 
       <li>the <b>Java Development Kit (JDK)</b>, which is needed to <i>develop</i> those Java applications and applets. If you have installed the JDK, you should know that it comes equipped with a JRE as well. So, for all the purposes of this book, you would only require the JDK.</li> 
      </ul> 
      <p>In this section, we will explore in further detail what these two software components of the Java platform do.</p> 
      <h2><span id="Java_Runtime_Environment_(JRE)"></span><span class="mw-headline" id="Java_Runtime_Environment_.28JRE.29">Java Runtime Environment (JRE)</span></h2> 
      <p>Any piece of code written in the Java programming language can be run on any operating system, platform or architecture — in fact, it can be run on any device that supports the Java platform. Before Java, this amount of ubiquity was very hard to achieve. If a software was written for a Unix-based system, it was impossible to run the same application on a Windows system — in this case, the application was native only to Unix-based systems.</p> 
      <p>A major milestone in the development of the Java programming language was to develop a special runtime environment that would execute any Java application <i>independent</i> of the computer's operating system, platform or architecture.</p> 
      <p>The <b>Java Runtime Environment (JRE)</b> sits on top of the machine's operating system, platform and architecture. If and when a Java application is run, the JRE acts as a liaison between the underlying platform and that application. It interprets the Java application to run in accordance with the underlying platform, such that upon running the application, it looks and behaves like a native application. The part of the JRE that accomplishes this complex liaison agreement is called the <b>Java Virtual Machine (JVM)</b>.</p> 
      <p><br></p> 
      <table align="center" style="border:solid 1px lightgray; padding:8px; background: #fdfdfd"> 
       <tbody>
        <tr> 
         <td style="text-align:center; padding:2px 8px;"> 
          <div style="color:#2a7fff; border-bottom:solid 1px #ddd; padding-bottom:4px;">
           <b>Figure 1:</b> Java applications can be 
           <i>written once</i> and 
           <i>run anywhere</i>. This feature of the Java platform
           <br> is commonly abbreviated to 
           <b>WORA</b> in formal Java texts.
          </div> </td> 
        </tr> 
        <tr> 
         <td style="padding-top:8px;"> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Explaining_Java_Runtime_Environment.svg" class="image"><img alt="Explaining Java Runtime Environment.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/60/Explaining_Java_Runtime_Environment.svg/638px-Explaining_Java_Runtime_Environment.svg.png" width="638" height="472" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/60/Explaining_Java_Runtime_Environment.svg/957px-Explaining_Java_Runtime_Environment.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/60/Explaining_Java_Runtime_Environment.svg/1276px-Explaining_Java_Runtime_Environment.svg.png 2x" data-file-width="638" data-file-height="472"></a>
           </div> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <h3><span id="Executing_native_Java_code_(or_byte-code)"></span><span class="mw-headline" id="Executing_native_Java_code_.28or_byte-code.29">Executing native Java code (or <i>byte-code</i>)</span></h3> 
      <p>Native Java applications are preserved in a special format called the <i><b><a href="/wiki/Java_Programming/Byte_Code" title="Java Programming/Byte Code">byte-code</a></b></i>. Byte-code remains the same, no matter what hardware architecture, operating system, or software platform it is running under. On a file-system, Java byte-code resides in files that have the <code>.class</code> (also known as a <i><b>class file</b></i>) or the <code>.jar</code> (also known as a <i><b>Java archive</b></i>) extension. To run byte-code, the JRE comes with a special tool (appropriately named <b>java</b>).</p> 
      <p>Suppose your byte-code is called <code>SomeApplication.class</code>. If you want to execute this Java byte-code, you would need to use the following command in Command Prompt (on Windows) or Terminal (on Linux or Mac OS):</p> 
      <table style="padding:2px; margin:2px; width:100%;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Execution</b> <pre style="background-color:#000; color:#fff;">
$ java SomeApplication
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <p>If you want to execute a Java byte-code with a <code>.jar</code> extension (say, <code>SomeApplication.jar</code>), you would need to use the following command in Command Prompt (on Windows) or Terminal (on Linux or Mac OS):</p> 
      <table style="padding:2px; margin:2px; width:100%;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Execution with a jar</b> <pre style="background-color:#000; color:#fff;">
$ java -jar SomeApplication.jar
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Bombilla_amarilla_-_yellow_Edison_lamp.svg" class="image" title="Note"><img alt="Note" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/30px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png" width="30" height="30" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/45px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/60px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 2x" data-file-width="200" data-file-height="200"></a></td> 
         <td style="background-color:#fffff0; border-left: 4px solid yellow; padding-left: 6px;">Not all Java class files or Java archives are executable. Therefore, the <b>java</b> tool would only be able to execute files that are executable. Non-executable class files and Java archives are simply called <i><b>class libraries</b></i>.</td> 
        </tr> 
       </tbody>
      </table> 
      <h3><span id="Do_you_have_a_JRE?"></span><span class="mw-headline" id="Do_you_have_a_JRE.3F">Do you have a JRE?</span></h3> 
      <p>Most computers come with a pre-installed copy of the JRE. If your computer doesn't have a JRE, then the above commands would not work. You can always check what version of the JRE is installed on the computer by writing the following command in Command Prompt (on Windows) or Terminal (on Linux or Mac OS):</p> 
      <table style="padding:2px; margin:2px; width:100%;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Java version</b> <pre style="background-color:#000; color:#fff;">
$ java -version
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <h3><span id="Java_Virtual_Machine_(JVM)"></span><span class="mw-headline" id="Java_Virtual_Machine_.28JVM.29">Java Virtual Machine (JVM)</span></h3> 
      <p>Quite possibly, the most important part of the JRE is the <b>Java Virtual Machine (JVM)</b>. The JVM acts like a <i>virtual</i> processor, enabling Java applications to be run on the local system. Its main purpose is to interpret (<i>read</i> translate) the received byte-code and make it appear as native code. The older Java architecture used this process of <b>interpretation</b> to execute Java byte-code. Even though the process of interpretation brought the WORA principle to diverse machines, it had a drawback — it consumed a lot of time and clocked the system processor intensively to load an application.</p> 
      <p><br></p> 
      <table align="center" style="border:solid 1px lightgray; padding:8px; background: #fdfdfd"> 
       <tbody>
        <tr> 
         <td style="text-align:center; padding:2px 8px;"> 
          <div style="color:#2a7fff; border-bottom:solid 1px #ddd; padding-bottom:4px;">
           <b>Figure 2:</b> A JVM interpreter 
           <i>translates</i> the byte-code line-by-line to make it appear as if a native application is being executed.
          </div> </td> 
        </tr> 
        <tr> 
         <td style="padding-top:8px;"> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:How_JVM_Interpreter_works.svg" class="image"><img alt="How JVM Interpreter works.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/18/How_JVM_Interpreter_works.svg/656px-How_JVM_Interpreter_works.svg.png" width="656" height="167" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/18/How_JVM_Interpreter_works.svg/984px-How_JVM_Interpreter_works.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/18/How_JVM_Interpreter_works.svg/1312px-How_JVM_Interpreter_works.svg.png 2x" data-file-width="656" data-file-height="167"></a>
           </div> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <h4><span class="mw-headline" id="Just-in-Time_Compilation">Just-in-Time Compilation</span></h4> 
      <p>Since version 1.2, the JRE features a more robust JVM. Instead of interpreting byte-code, it down-right converts the code straight into equivalent native code for the local system. This process of conversion is called <i><a href="https://en.wikipedia.org/wiki/just-in-time_compilation" class="extiw" title="w:just-in-time compilation">just-in-time compilation</a></i> or <i>JIT-compilation</i>. This process only occurs when the byte-code is executed for the first time. Unless the byte-code itself is changed, the JVM uses the compiled version of the byte-code on every successive execution. Doing so saves a lot of time and processor effort, allowing applications to execute much faster at the cost of a <i>small</i> delay on first execution.</p> 
      <p><br></p> 
      <table align="center" style="border:solid 1px lightgray; padding:8px; background: #fdfdfd"> 
       <tbody>
        <tr> 
         <td style="text-align:center; padding:2px 8px;"> 
          <div style="color:#2a7fff; border-bottom:solid 1px #ddd; padding-bottom:4px;">
           <b>Figure 3:</b> A just-in-time compiler only compiles the byte-code to equivalent native code at first execution. Upon every successive
           <br> execution, the JVM merely uses the already 
           <i>compiled</i> native code to optimize performance.
          </div> </td> 
        </tr> 
        <tr> 
         <td style="padding-top:8px;"> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:How_JIT_Compilation_works.svg" class="image"><img alt="How JIT Compilation works.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/How_JIT_Compilation_works.svg/756px-How_JIT_Compilation_works.svg.png" width="756" height="190" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/91/How_JIT_Compilation_works.svg/1134px-How_JIT_Compilation_works.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/91/How_JIT_Compilation_works.svg/1512px-How_JIT_Compilation_works.svg.png 2x" data-file-width="756" data-file-height="190"></a>
           </div> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <h4><span class="mw-headline" id="Native_optimization">Native optimization</span></h4> 
      <p>The JVM is an intelligent <i>virtual</i> processor. It has the ability to identify areas within the Java code itself that can be optimized for faster and better performance. Based on every successive run of your Java applications, the JVM would optimize it to run even better.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Bombilla_amarilla_-_yellow_Edison_lamp.svg" class="image" title="Note"><img alt="Note" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/30px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png" width="30" height="30" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/45px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/60px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 2x" data-file-width="200" data-file-height="200"></a></td> 
         <td style="background-color:#fffff0; border-left: 4px solid yellow; padding-left: 6px;">There are portions of Java code that do not require it to be JIT-compiled at runtime, e.g., the <a href="/wiki/Java_Programming/Reflection" title="Java Programming/Reflection">Reflection API</a>; therefore, code that uses such functions are not necessarily fully compiled to native code.</td> 
        </tr> 
       </tbody>
      </table> 
      <h4><span id="Was_JVM_the_first_virtual_machine?"></span><span class="mw-headline" id="Was_JVM_the_first_virtual_machine.3F">Was JVM the first <i>virtual machine</i>?</span></h4> 
      <p>Java was not the first virtual-machine-based platform, though it is by far the most successful and well-known. Previous uses for virtual machine technology primarily involved <a href="https://en.wikipedia.org/wiki/emulators" class="extiw" title="w:emulators">emulators</a> to aid development for not-yet-developed hardware or operating systems, but the JVM was designed to be implemented entirely in software, while making it easy to efficiently port an implementation to hardware of all kinds.</p> 
      <h2><span id="Java_Development_Kit_(JDK)"></span><span class="mw-headline" id="Java_Development_Kit_.28JDK.29">Java Development Kit (JDK)</span></h2> 
      <p>The JRE takes care of running the Java code on multiple platforms, however as developers, we are interested in writing pure code in Java which can then be converted into Java byte-code for mass deployment. As developers, we do <i>not</i> need to write Java byte-code; rather we write the code in the Java programming language (which is quite similar to writing C or C++ code).</p> 
      <p>Upon downloading the JDK, a developer ensures that their system has the appropriate JRE and additional tools to help with the development of applications in the Java programming language. Java code can be found in files with the extension <b>.java</b>. These files are called <i><b>Java source files</b></i>. In order to convert the Java code in these source files to Java byte-code, you need to use the <b>Java compiler</b> tool installed with your JDK.</p> 
      <h3><span class="mw-headline" id="The_Java_compiler">The Java compiler</span></h3> 
      <p>The <b>Java compiler</b> tool (named <b>javac</b> in the JDK) is the most important utility found with the JDK. In order to compile a Java source file (say, <code>SomeApplication.java</code>) to its respective Java byte-code, you would need to use the following command in Command Prompt (on Windows) or Terminal (on Linux or Mac OS):</p> 
      <table style="padding:2px; margin:2px; width:100%;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Compilation</b> <pre style="background-color:#000; color:#fff;">
javac SomeApplication.java
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <p>This command would convert the <code>SomeApplication.java</code> source file into its equivalent Java byte-code. The resultant byte-code would exist in a newly created file named <code>SomeApplication.class</code>. This process of converting Java source files into their equivalent byte-codes is known as <i><b>compilation</b></i>.</p> 
      <p><br></p> 
      <table align="center" style="border:solid 1px lightgray; padding:8px; background: #fdfdfd"> 
       <tbody>
        <tr> 
         <td style="text-align:center; padding:2px 8px;"> 
          <div style="color:#2a7fff; border-bottom:solid 1px #ddd; padding-bottom:4px;">
           <b>Figure 4:</b> The basic Java compilation process
          </div> </td> 
        </tr> 
        <tr> 
         <td style="padding-top:8px;"> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Java_Compilation_Basics.svg" class="image"><img alt="Java Compilation Basics.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Java_Compilation_Basics.svg/505px-Java_Compilation_Basics.svg.png" width="505" height="116" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Java_Compilation_Basics.svg/758px-Java_Compilation_Basics.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f2/Java_Compilation_Basics.svg/1010px-Java_Compilation_Basics.svg.png 2x" data-file-width="505" data-file-height="116"></a>
           </div> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        A list of other JDK tools
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p>There are a huge array of tools available with the JDK that will all be explained in due time as you progress with the book. These tools are briefly listed below in order of their usage:</p> 
        <h3><span class="mw-headline" id="Applet_development">Applet development</span></h3> 
        <ul> 
         <li><code>appletviewer</code> — Java applets require a particular environment to execute. Typically, this environment is provided by a browser with a Java plug-in, and a web server serving the applet. However, during development and testing of an applet it might be more convenient to start an applet without the need to fiddle with a browser and a web server. In such a case, Oracle's appletviewer from the JDK can be used to run an applet.</li> 
        </ul> 
        <h3><span class="mw-headline" id="Annotation_processing">Annotation processing</span></h3> 
        <dl> 
         <dd>
          <i>For more about annotation processing, <a rel="nofollow" class="external text" href="http://docs.oracle.com/javase/1.5.0/docs/guide/apt/GettingStarted.html">read this</a></i>
         </dd> 
        </dl> 
        <p>In Java 1.5 (alias Java 5.0) Oracle added a mechanism called <i>annotations</i>. Annotations allow the addition of meta-data to Java source code, and even provide mechanisms to carry that meta-data into compiled <code>.class</code> files.</p> 
        <ul> 
         <li><code>apt</code> — An annotation processing tool which digs through source code, finds annotation statements in the source code and executes actions if it finds known annotations. The most common task is to generate some particular source code. The actions apt performs when finding annotations in the source code are not hard-coded into apt. Instead, one has to code particular annotation handlers (in Java). These handlers are called annotation processors. It can also be described in a simple way without the Oracle terminology: apt can be seen as a source code preprocessor framework, and annotation processors are typically code generators.</li> 
        </ul> 
        <h3><span class="mw-headline" id="Integration_of_non-Java_and_Java_code">Integration of non-Java and Java code</span></h3> 
        <ul> 
         <li><code>javah</code> — A Java class can call native, or non-Java, code that has been prepared to be called from Java. The details and procedures are specified in the JNI (Java Native Interface). Commonly, native code is written in C (or C++). The JDK tool javah helps to write the necessary C code, by generating C header files and C stub code.</li> 
        </ul> 
        <h3><span class="mw-headline" id="Class_library_conflicts">Class library conflicts</span></h3> 
        <ul> 
         <li><code>extcheck</code> — It can be used prior to the installation of a Java extension into the JDK or JRE environment. It checks if a particular Jar file conflicts with an already installed extension. This tool appeared first with Java 1.5.</li> 
        </ul> 
        <h3><span class="mw-headline" id="Software_security_and_cryptography_tools">Software security and cryptography tools</span></h3> 
        <p>The JDK comes with a large number of tools related to the security features of Java. Usage of these tools first requires study of the particular security mechanisms. The tools are:</p> 
        <ul> 
         <li><code>keytool</code> — To manage keys and certificates</li> 
         <li><code>jarsigner</code> — To generate and verify digital signatures of JARs (Java ARchives)</li> 
         <li><code>policytool</code> — To edit policy files</li> 
         <li><code>kinit</code> — To obtain Kerberos v5 tickets</li> 
         <li><code>klist</code> — To manage Kerberos credential cache and key table</li> 
         <li><code>ktab</code> — To manage entries in a key table</li> 
        </ul> 
        <h3><span class="mw-headline" id="The_Java_archiver">The Java archiver</span></h3> 
        <ul> 
         <li><code>jar</code> — (short for Java archiver) is a tool for creating Java archives or jar files — a file with <code>.jar</code> as the extension. A Java archive is a collection of compiled Java classes and other resources which those classes may require (such as text files, configuration files, images) at runtime. Internally, a jar file is really a <a href="https://en.wikipedia.org/wiki/ZIP_(file_format)" class="extiw" title="w:ZIP (file format)">.zip file</a>.</li> 
        </ul> 
        <h3><span class="mw-headline" id="The_Java_debugger">The Java debugger</span></h3> 
        <ul> 
         <li><code>jdb</code> — (short for Java debugger) is a command-line console that provides a <a href="https://en.wikipedia.org/wiki/Debugging" class="extiw" title="w:Debugging">debugging</a> environment for Java programs. Although you can use this command line console, IDE's normally provide easier to use debugging environments.</li> 
        </ul> 
        <h3><span class="mw-headline" id="Documenting_code_with_Java">Documenting code with Java</span></h3> 
        <p>As programs grow large and complex, programmers need ways to track changes and to understand the code better at each step of its evolution. For decades, programmers have been employing the use of special programming constructs called comments — regions that help declare user definitions for a code snippet within the source code. But comments are prone to be verbose and incomprehensible, let alone be difficult to read in applications having hundreds of lines of code.</p> 
        <ul> 
         <li><code>javadoc</code> — Java provides the user with a way to easily publish documentation about the code using a special commenting system and the javadoc tool. The javadoc tool generates documentation about the Application Programming Interface (API) of a set of user-created Java classes. javadoc reads source file comments from the <code>.java</code> source files and generates HTML documents that are easier to read and understand without looking at the code itself.</li> 
        </ul> 
        <ul> 
         <li><code>javap</code> — Where Javadoc provide a detailed view into the API and documentation of a Java class, the javap tool prints information regarding members (constructors, methods and variables) in a class. In other words, it lists the class' API and/or the compiled instructions of the class. javap is a formatting disassembler for Java bytecode.</li> 
        </ul> 
        <h3><span class="mw-headline" id="The_native2ascii_tool">The native2ascii tool</span></h3> 
        <p><code>native2ascii</code> is an important, though underappreciated, tool for writing properties files — files containing configuration data — or resource bundles — files containing language translations of text.</p> 
        <p>Such files can contain only ASCII and Latin-1 characters, but international programmers need a full range of character sets. Text using these characters can appear in properties files and resource bundles only if the non-ASCII and non-Latin-^1 characters are converted into <a href="/wiki/Java_Programming/Syntax/Unicode_Escape_Sequences" class="mw-redirect" title="Java Programming/Syntax/Unicode Escape Sequences">Unicode escape sequences</a> (\uXXXX notation).</p> 
        <p>The task of writing such escape sequences is handled by <code>native2ascii</code>. You can write the international text in an editor using the appropriate character encoding, then use <code>native2ascii</code> to generate the necessary ASCII text with embedded Unicode escape sequences. Despite the name, <code>native2ascii</code> can also convert from ASCII to native, so it is useful for converting an existing properties file or resource bundle back to some other encoding.</p> 
        <p><code>native2ascii</code> makes most sense when integrated into a build system to automate the conversion.</p> 
        <h3><span id="Remote_Method_Invocation_(RMI)_tools"></span><span class="mw-headline" id="Remote_Method_Invocation_.28RMI.29_tools">Remote Method Invocation (RMI) tools</span></h3> 
        <div style="clear: both"></div> 
        <table style="background: #ffd; border: 1px solid #aaaaaa; padding: 6pt; margin: 12pt 8%; width: 60%; margin: auto;" class="notice noprint notice-todo"> 
         <tbody>
          <tr> 
           <td style="width: 58px;"> 
            <div class="floatleft">
             <img alt="Clipboard" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/45px-Clipboard.svg.png" width="45" height="45" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/68px-Clipboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/90px-Clipboard.svg.png 2x" data-file-width="48" data-file-height="48">
            </div> </td> 
           <td> <p><b>To do:</b><br> Add section</p> </td> 
          </tr> 
         </tbody>
        </table> 
        <div style="clear: both"></div> 
        <h3><span class="mw-headline" id="Java_IDL_and_RMI-IIOP_Tools">Java IDL and RMI-IIOP Tools</span></h3> 
        <div style="clear: both"></div> 
        <table style="background: #ffd; border: 1px solid #aaaaaa; padding: 6pt; margin: 12pt 8%; width: 60%; margin: auto;" class="notice noprint notice-todo"> 
         <tbody>
          <tr> 
           <td style="width: 58px;"> 
            <div class="floatleft">
             <img alt="Clipboard" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/45px-Clipboard.svg.png" width="45" height="45" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/68px-Clipboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/90px-Clipboard.svg.png 2x" data-file-width="48" data-file-height="48">
            </div> </td> 
           <td> <p><b>To do:</b><br> Add section</p> </td> 
          </tr> 
         </tbody>
        </table> 
        <div style="clear: both"></div> 
        <h3><span id="Deployment_&amp;_Web_Start_Tools"></span><span class="mw-headline" id="Deployment_.26_Web_Start_Tools">Deployment &amp; Web Start Tools</span></h3> 
        <div style="clear: both"></div> 
        <table style="background: #ffd; border: 1px solid #aaaaaa; padding: 6pt; margin: 12pt 8%; width: 60%; margin: auto;" class="notice noprint notice-todo"> 
         <tbody>
          <tr> 
           <td style="width: 58px;"> 
            <div class="floatleft">
             <img alt="Clipboard" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/45px-Clipboard.svg.png" width="45" height="45" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/68px-Clipboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/90px-Clipboard.svg.png 2x" data-file-width="48" data-file-height="48">
            </div> </td> 
           <td> <p><b>To do:</b><br> Add section</p> </td> 
          </tr> 
         </tbody>
        </table> 
        <div style="clear: both"></div> 
        <h3><span class="mw-headline" id="Browser_Plug-In_Tools">Browser Plug-In Tools</span></h3> 
        <div style="clear: both"></div> 
        <table style="background: #ffd; border: 1px solid #aaaaaa; padding: 6pt; margin: 12pt 8%; width: 60%; margin: auto;" class="notice noprint notice-todo"> 
         <tbody>
          <tr> 
           <td style="width: 58px;"> 
            <div class="floatleft">
             <img alt="Clipboard" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/45px-Clipboard.svg.png" width="45" height="45" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/68px-Clipboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/90px-Clipboard.svg.png 2x" data-file-width="48" data-file-height="48">
            </div> </td> 
           <td> <p><b>To do:</b><br> Add section</p> </td> 
          </tr> 
         </tbody>
        </table> 
        <div style="clear: both"></div> 
        <h3><span id="Monitoring_and_Management_Tools_/_Troubleshooting_Tools"></span><span class="mw-headline" id="Monitoring_and_Management_Tools_.2F_Troubleshooting_Tools">Monitoring and Management Tools / Troubleshooting Tools</span></h3> 
        <p>With Java 1.5 a set of monitoring and management tools have been added to the JDK, in addition to a set of troubleshooting tools.</p> 
        <p>The monitoring and management tools are intended for monitoring and managing the virtual machine and the execution environment. They allow, for example, monitoring memory usage during the execution of a Java program.</p> 
        <p>The troubleshooting tools provide rather esoteric insight into aspects of the virtual machine. (Interestingly, the Java debugger is not categorized as a troubleshooting tool.)</p> 
        <p>All the monitoring and management and troubleshooting tools are currently marked as "experimental" (which does not affect jdb). So they might disappear in future JDKs.</p> 
       </div> 
      </div> 
      <h3><span id="Java_class_libraries_(JCL)"></span><span class="mw-headline" id="Java_class_libraries_.28JCL.29">Java class libraries (JCL)</span></h3> 
      <p>In most modern operating systems, a large body of reusable code is provided to simplify the programmer's job. This code is typically provided as a set of <a href="https://en.wikipedia.org/wiki/Library_(computer_science)#Dynamic_linking" class="extiw" title="w:Library (computer science)">dynamically loadable libraries</a> that applications can call at runtime. Because the Java platform is not dependent on any specific operating system, applications cannot rely on any of the existing libraries. Instead, the Java platform provides a comprehensive set of standard class libraries, containing much of the same reusable functions commonly found in modern operating systems.</p> 
      <p>The Java class libraries serve three purposes within the Java platform. Like other standard code libraries, they provide the programmer with a well-known set of functions to perform common tasks, such as maintaining lists of items or performing complex string parsing. In addition, the class libraries provide an abstract interface to tasks that would normally depend heavily on the hardware and operating system. Tasks such as network access and file access are often heavily dependent on the native capabilities of the platform. The Java java.net and java.io libraries implement the required native code internally, then provide a standard interface for the Java applications to perform those tasks. Finally, some underlying platforms may not support all of the features a Java application expects. In these cases, the class libraries can either emulate those features using whatever is available, or provide a consistent way to check for the presence of a specific feature.</p> 
      <h2><span class="mw-headline" id="Similar_concepts">Similar concepts</span></h2> 
      <p>The success of the Java platform and the concepts of the write once, run anywhere principle has led to the development of similar frameworks and platforms. Most notable of these is the Microsoft's <a href="https://en.wikipedia.org/wiki/.NET_Framework" class="extiw" title="w:.NET Framework">.NET framework</a> and its open-source equivalent <a href="https://en.wikipedia.org/wiki/Mono_(software)" class="extiw" title="w:Mono (software)">Mono</a>.</p> 
      <h3><span class="mw-headline" id="The_.NET_framework">The .NET framework</span></h3> 
      <p>The .NET framework borrows many of the concepts and innovations of Java — their alternative for the JVM is called the <a href="https://en.wikipedia.org/wiki/Common_Language_Runtime" class="extiw" title="w:Common Language Runtime">Common Language Runtime (CLR)</a>, while their alternative for the byte-code is the <a href="https://en.wikipedia.org/wiki/Common_Intermediate_Language" class="extiw" title="w:Common Intermediate Language">Common Intermediate Language (CIL)</a>. In fact, the .NET platform had an implementation of a Java-like language called <a href="https://en.wikipedia.org/wiki/J_Sharp" class="extiw" title="w:J Sharp">Visual J#</a> (formerly known as <a href="https://en.wikipedia.org/wiki/J_plus_plus" class="extiw" title="w:J plus plus">J++</a>).</p> 
      <p>J# is normally not supported with the JVM because instead of compiling it in Java byte-code, the .NET platform compiles the code into CIL, thus making J# different from the Java programming language. Furthermore, because J# implements the .NET Base Class Libraries (BCL) instead of the Java Class Libraries, J# is nothing more than a non-standard extension of the Java programming language. Due to the lack of interest from developers, Microsoft had to withdraw their support for J#, and focused on a similar programming language: C#.</p> 
      <h3><span class="mw-headline" id="Third-party_compilers_targeting_the_JVM">Third-party compilers targeting the JVM</span></h3> 
      <p>The word Java, by itself, usually refers to the Java programming language which was designed for use with the Java platform. Programming languages are typically outside of the scope of the phrase "platform". However, Oracle does not encourage the use of any other languages with the platform, and lists the Java programming language as a core part of the Java 2 platform. The language and runtime are therefore commonly considered a single unit.</p> 
      <p>There are cases where you might want to program using a different language (say, <a href="https://en.wikipedia.org/wiki/Python_(programming_language)" class="extiw" title="w:Python (programming language)">Python</a>) and yet be able to generate Java byte-code (instead of the Python compiled code) to be run with the JVM. Many third-party programming language vendors provide compilers that can compile code written in their language to Java byte-code. For instance, Python developers can use <a href="https://en.wikipedia.org/wiki/Jython" class="extiw" title="w:Jython">Jython</a> compilers to compile Python code to the Java byte-code format (<i>as illustrated below</i>).</p> 
      <p><br></p> 
      <table align="center" style="border:solid 1px lightgray; padding:8px; background: #fdfdfd"> 
       <tbody>
        <tr> 
         <td style="text-align:center; padding:2px 8px;"> 
          <div style="color:#2a7fff; border-bottom:solid 1px #ddd; padding-bottom:4px;">
           <b>Figure 5:</b> Third-party JVM-targeted compilation for non-Java source compilation to Java byte-code. Illustrated example
           <br> shows Python source being compiled to both Python compiled code and Java byte-code.
          </div> </td> 
        </tr> 
        <tr> 
         <td style="padding-top:8px;"> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Third-party_JVM-targeted_Compilation.svg" class="image"><img alt="Third-party JVM-targeted Compilation.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/8/84/Third-party_JVM-targeted_Compilation.svg/508px-Third-party_JVM-targeted_Compilation.svg.png" width="508" height="240" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/8/84/Third-party_JVM-targeted_Compilation.svg/762px-Third-party_JVM-targeted_Compilation.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/8/84/Third-party_JVM-targeted_Compilation.svg/1016px-Third-party_JVM-targeted_Compilation.svg.png 2x" data-file-width="508" data-file-height="240"></a>
           </div> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> Of late, JVM-targeted third-party programming and scripting languages have seen tremendous growth. Some of these languages are also used to extend the functionalities of the Java language itself. A few examples include the following:</p> 
      <ul> 
       <li><a href="https://en.wikipedia.org/wiki/Groovy_(programming_language)" class="extiw" title="w:Groovy (programming language)">Groovy</a></li> 
       <li><a href="https://en.wikipedia.org/wiki/Pizza_(programming_language)" class="extiw" title="w:Pizza (programming language)">Pizza</a></li> 
       <li><a href="https://en.wikipedia.org/wiki/Generic_Java_(programming_language)" class="extiw" title="w:Generic Java (programming language)">GJ</a> (Generic Java) – later officially incorporated into Java SE 5.</li> 
       <li><a href="https://en.wikipedia.org/wiki/NetREXX" class="extiw" title="w:NetREXX">NetREXX</a></li> 
      </ul> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Getting_started">Getting started</span></h1> 
      <h2><span class="mw-headline" id="Understanding_systems">Understanding systems</span></h2> 
      <p>We conceptualize the world around us in terms of systems. A <b>system</b> is a web of interconnected objects working together in tandem. In the <a href="https://en.wikipedia.org/wiki/Systems_theory" class="extiw" title="w:Systems theory">systems theory</a>, a system is set out as a single entity within a world surrounded by an environment. A system interacts with its surrounding environment using messages of two distinct types:</p> 
      <ul> 
       <li><b>inputs:</b> messages received from the surrounding environment; and,</li> 
       <li><b>outputs:</b> messages given back to the surrounding environment.</li> 
      </ul> 
      <p><br></p> 
      <table align="center" style="border:solid 1px lightgray; padding:8px; background: #fdfdfd"> 
       <tbody>
        <tr> 
         <td style="text-align:center; padding:2px 8px;"> 
          <div style="color:#2a7fff; border-bottom:solid 1px #ddd; padding-bottom:4px;">
           <b>Figure 1:</b> A simple system interacting with its environment using input and output messages.
          </div> </td> 
        </tr> 
        <tr> 
         <td style="padding-top:8px;"> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Understanding_Systems.svg" class="image"><img alt="Understanding Systems.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Understanding_Systems.svg/333px-Understanding_Systems.svg.png" width="333" height="190" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Understanding_Systems.svg/500px-Understanding_Systems.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Understanding_Systems.svg/666px-Understanding_Systems.svg.png 2x" data-file-width="333" data-file-height="190"></a>
           </div> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> Life is a complicated mess of interconnected objects sending signals and messages. See the illustration below in figure 2 demonstrating a complex system for an economic ecosphere for a single company. Imagine what this system diagram would be like if you were to add a few more companies and their sub-systems. Computer software systems in general are a complex web of further interconnected <b>sub-systems</b> – where each sub-systems may or may not be divided into further sub-systems. Each sub-system communicates with others using <b>feedback</b> messages – that is, <i>inputs</i> and <i>outputs</i>.</p> 
      <p><br></p> 
      <table align="center" style="border:solid 1px lightgray; padding:8px; background: #fdfdfd"> 
       <tbody>
        <tr> 
         <td style="text-align:center; padding:2px 8px;"> 
          <div style="color:#2a7fff; border-bottom:solid 1px #ddd; padding-bottom:4px;">
           <b>Figure 2:</b> Example of a complex system with multiple sub-systems and interactions
          </div> </td> 
        </tr> 
        <tr> 
         <td style="padding-top:8px;"> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Complex_System.svg" class="image"><img alt="Complex System.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Complex_System.svg/805px-Complex_System.svg.png" width="805" height="474" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Complex_System.svg/1208px-Complex_System.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Complex_System.svg/1610px-Complex_System.svg.png 2x" data-file-width="805" data-file-height="474"></a>
           </div> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <h2><span class="mw-headline" id="The_process_of_abstraction">The process of abstraction</span></h2> 
      <p>Programming is essentially thinking of solutions to problems in real life as a system. With any programming language, you need to know how to address real-life problems into something that could be accurately represented within a computer system. In order to begin programming with the Java programming language (or in fact, with any programming language), a programmer must first understand the basics of abstraction.</p> 
      <p><b>Abstraction</b> is the process of <i>representing</i> real-life problems and objects into your programs.</p> 
      <p>Suppose a novelist, a painter and a programmer were asked to <i>abstract</i> (i.e., <i>represent</i>) a real-life object in their work. Suppose, the real-life object that needs to be abstracted is <i>an animal</i>. Abstraction for a novelist would include writing the description of the animal whilst the painter would draw a picture of the animal – but what about a computer programmer?</p> 
      <p>The Java programming language uses a programming paradigm called <a href="https://en.wikipedia.org/wiki/Object-oriented_programming" class="extiw" title="w:Object-oriented programming">object-oriented programming (OOP)</a>, which shows you exactly what a programmer needs to be doing. According to OOP, every object or problem in real-life can be translated into a virtual object within your computer system.</p> 
      <h3><span class="mw-headline" id="Thinking_in_objects">Thinking in objects</span></h3> 
      <p>In OOP, every abstraction of a real-life object is simply called an <b>object</b> within your code. An object is essentially the most basic representation of a real-life object as part of a computer system. With Java being an object-oriented language, everything within Java is represented as an object. To demonstrate this effect, if you were to define an abstraction of an animal in your code, you would write the following lines of code (as you would for any other abstraction):</p> 
      <p><br></p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span> <span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> The code above creates a space within your code where you can start <i>defining</i> an object; this space is called a <b>class (<i>or</i> type) definition</b>. All objects need to be defined using a class definition in order for them to be used in your program. Notice the curly brackets – anything you write within these brackets would serve as a definition or specification for your object. In the case of the example above, we created a class definition called <code>Animal</code> for objects that could serve as an abstract representation of any animal in real-life. The way that a Java environment evaluates this code to be a class definition is by looking at the prefix word we used to begin our class definition (i.e., <code>class</code>). Such predefined words in the Java language are known as <b>keywords</b> and make up the grammar for the language (known as <b>programming syntax</b>).</p> 
      <table class="notice notice-note noprint" style="background: #f2fff2; border: solid 1px #bfffbf; padding: 0.5em; width: 95%; margin: auto; vertical-align: top; -moz-border-radius:10px;"> 
       <tbody>
        <tr> 
         <td> <p><b>Note:</b><br> Class definitions have different names in different languages. They are sometimes called <b>type definitions</b>, <b>object specifications</b> or <b>templates</b> as well</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <h3><span class="mw-headline" id="Understanding_class_definitions_and_types">Understanding class definitions and types</span></h3> 
      <p><a href="https://en.wikipedia.org/wiki/Aristotle" class="extiw" title="w:Aristotle">Aristotle</a> was perhaps the first person to think of abstract types or typologies of objects. He started calling them classes – e.g., classes of birds, classes of mammals. Class definitions therefore serve the purpose well in defining the common characteristics or types of objects you would be creating. Upon declaring a class definition, you can create objects based on that definition. In order to do so however, you need to write a special syntax that goes like this:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="n">Animal</span> <span class="n">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Animal</span><span class="o">();</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> The code above effectively creates an object called <code>dog</code> based on the class definition for <code>Animal</code>. In non-programmer parlance, the code above would translate into something akin to saying, "Create a new object <code>dog</code> of type <code>Animal</code>." A single class definition enables you to create multiple objects as the code below indicates:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="n">Animal</span> <span class="n">dog</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Animal</span><span class="o">();</span>
<span class="n">Animal</span> <span class="n">cat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Animal</span><span class="o">();</span>
<span class="n">Animal</span> <span class="n">camel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Animal</span><span class="o">();</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> Basically, you just have to write the code for your class or type definition once, and then use it to create countless numbers of objects based on that specification. Although you might not grasp the importance of doing so, this little exercise saves you a lot of time (a luxury that was not readily available to programmers in the pre-Java days).</p> 
      <h3><span class="mw-headline" id="Expanding_your_class_definitions">Expanding your class definitions</span></h3> 
      <p>Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply <b>fields</b>) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: <b>name</b> (a common name given to any one of these animals) and <b>legs</b> (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:</p> 
      <p><br></p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>

  <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">legs</span><span class="o">;</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> In the code above you defined two object fields:</p> 
      <ul> 
       <li>a field called <code>name</code> of type <code>String</code>; and,</li> 
       <li>a field called <code>legs</code> of type <code>int</code>.</li> 
      </ul> 
      <p>These special pre-defined types are called <b>data types</b>. The <code>String</code> data type is used for fields that can hold <i>textual</i> values like names, while the <code>int</code> (integer) data type is used for fields that can hold <i>numeric</i> values</p> 
      <table class="notice notice-note noprint" style="background: #f2fff2; border: solid 1px #bfffbf; padding: 0.5em; width: 95%; margin: auto; vertical-align: top; -moz-border-radius:10px;"> 
       <tbody>
        <tr> 
         <td> <p><b>Note:</b><br> Fields are called different things in different languages. They may be called <b>state identifiers</b>, <b>properties</b> or <b>member variables</b> in other programming language syntax. Java uses the words <i>fields</i> and <i>properties</i> in different contexts, as would be understood from upcoming sections.</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <table align="center" style="border:solid 1px lightgray; padding:8px; background: #fdfdfd"> 
       <tbody>
        <tr> 
         <td style="text-align:center; padding:2px 8px;"> 
          <div style="color:#2a7fff; border-bottom:solid 1px #ddd; padding-bottom:4px;">
           <b>Figure 3:</b> In order to denote the 
           <code>Animal</code> object as a system within the Java Environment,
           <br> you present it as such. Note how fields are presented.
          </div> </td> 
        </tr> 
        <tr> 
         <td style="padding-top:8px;"> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Object_in_Java_Environment.svg" class="image"><img alt="Object in Java Environment.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Object_in_Java_Environment.svg/333px-Object_in_Java_Environment.svg.png" width="333" height="190" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Object_in_Java_Environment.svg/500px-Object_in_Java_Environment.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Object_in_Java_Environment.svg/666px-Object_in_Java_Environment.svg.png 2x" data-file-width="333" data-file-height="190"></a>
           </div> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> In order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="n">Animal</span> <span class="n">animal1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Animal</span><span class="o">();</span>
<span class="n">Animal</span> <span class="n">animal2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Animal</span><span class="o">();</span>

<span class="n">animal1</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"dog"</span><span class="o">;</span>
<span class="n">animal1</span><span class="o">.</span><span class="na">legs</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>

<span class="n">animal2</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="s">"duck"</span><span class="o">;</span>
<span class="n">animal2</span><span class="o">.</span><span class="na">legs</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> You can access the fields of your created objects by using the <code>.</code> (dot) or <b>membership operator</b>. In the example above, we created two objects: <code>animal1</code> and <code>animal2</code> of type <code>Animal</code>. And since, we had established that each <code>Animal</code> has two fields namely <code>name</code> and <code>legs</code>, we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current <b>state</b>. So, for instance:</p> 
      <ul> 
       <li>the <code>animal1</code> object is a <code>"dog"</code> with <code>4</code> legs to walk with; while,</li> 
       <li>the <code>animal2</code> object is a <code>"duck"</code> with <code>2</code> legs to walk with.</li> 
      </ul> 
      <p>What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.</p> 
      <h3><span class="mw-headline" id="Adding_behavior_to_objects">Adding behavior to objects</span></h3> 
      <p>At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called <b>method</b>.</p> 
      <p>In the case of the <code>Animal</code>, you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your <code>Animal</code> object to be able to walk in its environment. Thus, you need to add a method named <code>walk</code> to our object. To do so, we need to write the following code:</p> 
      <p><br></p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>

  <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">legs</span><span class="o">;</span>

  <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or <b>scope</b>) within your object. So the first set of curly brackets defined a scope for your class definition called the <b>class-level scope</b>. This new set of curly brackets alongside a method defines a scope for the further definition of your method called the <b>method-level scope</b>.</p> 
      <p>In this instance, the name of our method is <code>walk</code>. Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called <b>arguments</b>.</p> 
      <p>A method therefore enables an object to:</p> 
      <ol> 
       <li>Accept input: Receive some argument(s);</li> 
       <li>Process information: work on the received argument(s) within its curly brackets; and,</li> 
       <li>Generate ouput: <i>occasionally</i>, return something back.</li> 
      </ol> 
      <p>In essence, methods are what makes an object behave more like a system.</p> 
      <p>Notice the keyword <code>void</code> before the name of the method – this tells us that the method <code>walk</code> returns <i>nothing</i>. You can set a method to return any data type – it can be a <b>String</b> or an <b>int</b> as well.</p> 
      <table class="notice notice-note noprint" style="background: #f2fff2; border: solid 1px #bfffbf; padding: 0.5em; width: 95%; margin: auto; vertical-align: top; -moz-border-radius:10px;"> 
       <tbody>
        <tr> 
         <td> <p><b>Note:</b><br> Methods are known by different names in different programming language. They might be called <b>functions</b>, <b>procedures</b>, <b>routines</b> or <b>behaviors</b>.</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <table align="center" style="border:solid 1px lightgray; padding:8px; background: #fdfdfd"> 
       <tbody>
        <tr> 
         <td style="text-align:center; padding:2px 8px;"> 
          <div style="color:#2a7fff; border-bottom:solid 1px #ddd; padding-bottom:4px;">
           <b>Figure 4:</b> The 
           <code>Animal</code> object can now be denoted as having an interaction behavior within the Java Environment
           <br> as illustrated here. Note the difference between the presentation of fields and methods.
          </div> </td> 
        </tr> 
        <tr> 
         <td style="padding-top:8px;"> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Object_Behavior_in_Java_Environment.svg" class="image"><img alt="Object Behavior in Java Environment.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/19/Object_Behavior_in_Java_Environment.svg/333px-Object_Behavior_in_Java_Environment.svg.png" width="333" height="190" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/19/Object_Behavior_in_Java_Environment.svg/500px-Object_Behavior_in_Java_Environment.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/19/Object_Behavior_in_Java_Environment.svg/666px-Object_Behavior_in_Java_Environment.svg.png 2x" data-file-width="333" data-file-height="190"></a>
           </div> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <h2><span class="mw-headline" id="The_process_of_encapsulation">The process of encapsulation</span></h2> 
      <p>By now, we thoroughly understand that any object can interact with its environment and in turn be influenced by it. In our example, the <code>Animal</code> object exposed certain fields – <code>name</code> and <code>legs</code>, and a method – <code>walk()</code> to be used by the environment to manipulate the object. This form of exposure is implicit. Using the Java programming language, a programmer has the power to define the level of access other objects and the environment have on a certain object.</p> 
      <h3><span class="mw-headline" id="Using_access_modifiers">Using access modifiers</span></h3> 
      <p>Alongside declaring and defining objects, their fields and methods, a programmer also has the ability to define the levels of access on those elements. This is done using keywords known as <b>access modifiers</b>.</p> 
      <p>Let's modify our example to demonstrate this effect:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="n">legs</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> By declaring all fields and methods <code>public</code>, we have ensured that they can be used outside the scope of the <code>Animal</code> class. This means that any other object (other than <code>Animal</code>) has access to these member elements. However, to restrict access to certain member elements of a class, we can always use the <code>private</code> access modifier (as demonstrated below).</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">legs</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> In this example, the fields <code>name</code> and <code>legs</code> can only be accessed within the scope of the <code>Animal</code> class. No object outside the scope of this class can access these two fields. However, since the <code>walk()</code> method still has <code>public</code> access, it can be manipulated by actors and objects outside the scope of this class. Access modifiers are not just limited to fields or methods, they can be used for class definitions as well (as is demonstrated below).</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>

  <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">legs</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">walk</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> The following list of keywords show the valid access modifiers that can be used with a Java program:</p> 
      <table class="wikitable sortable"> 
       <tbody>
        <tr> 
         <th>keyword</th> 
         <th>description</th> 
        </tr> 
        <tr> 
         <td valign="top"><code>public</code></td> 
         <td>Opens access to a certain field or method to be used outside the scope of the class.</td> 
        </tr> 
        <tr> 
         <td valign="top"><code>private</code></td> 
         <td>Restricts access to a certain field or method to only be used within the scope of the class.</td> 
        </tr> 
        <tr> 
         <td valign="top"><code>protected</code></td> 
         <td>Access to certain field or methods is reserved for classes that inherit the current class.<br> More on this would be discussed in the section on <i>inheritance</i>.</td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Installation">Installation</span></h1> 
      <p>In order to make use of the content in this book, you would need to follow along each and every tutorial rather than simply reading through the book. But to do so, you would need access to a computer with the <b>Java platform</b> installed on it — the Java platform is the basic prerequisite for <i>running</i> and <i>developing</i> Java code, thus it is divided into two essential pieces of software:</p> 
      <ul> 
       <li>the <b>Java Runtime Environment (JRE)</b>, which is needed to <i>run</i> Java applications and applets;</li> 
       <li>the <b>Java Development Kit (JDK)</b>, which is needed to <i>develop</i> those Java applications and applets.</li> 
      </ul> 
      <p>However as a developer, you would only require the JDK which comes equipped with a JRE as well.</p> 
      <p>As Java is just a programming language that allows you to program the computer, it has multiple implementations available. The most popular implementation of JDK and JRE are the "Oracle Java SE" (formerly known as Sun JDK), maintained by Oracle as a commercial release. However another similarly popular implementation is the OpenJDK, with the benefit of being free software that could distribute freely under GPL v2 without the requirement of accepting the "Oracle Binary Code License Agreement for the Java SE Platform Products and JavaFX". The third option - the GCJ, as part of the GNU Compiler Collection, would also supply the JDK and JRE.</p> 
      <p>Given below are installation instruction for the Oracle Java SE JDK for various operating systems:</p> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Installation instructions for Windows
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <h4><span class="mw-headline" id="Availability_check_for_JRE">Availability check for JRE</span></h4> 
        <p>The Java Runtime Environment (JRE) is necessary to execute Java programs. To check which version of Java Runtime Environment (JRE) you have, follow the steps below.</p> 
        <table style="padding-left:1.5em;"> 
         <tbody>
          <tr> 
           <td></td> 
          </tr> 
          <tr> 
           <td valign="top">1.</td> 
           <td>For Window Vista or Windows 7, click <b>Start</b> › <b>Control Panel</b> › <b>System and Maintenance</b> › <b>System</b>.</td> 
          </tr> 
          <tr> 
           <td></td> 
           <td>For Windows XP, click <b>Start</b> › <b>Control Panel</b> › <b>System</b>.</td> 
          </tr> 
          <tr> 
           <td></td> 
           <td>For Windows 2000, click <b>Start</b> › <b>Settings</b> › <b>Control Panel</b> › <b>System</b>.</td> 
          </tr> 
          <tr> 
           <td></td> 
           <td>Alternatively, you can also press <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">? Win</kbd>+<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">R</kbd> to open the <b>Run</b> dialog. With the dialog open, type <code>cmd</code> at the prompt: 
            <div class="center"> 
             <div class="thumb tnone"> 
              <div class="thumbinner" style="width:349px;">
               <a href="/wiki/File:Java_Programming_Run_dialog.png" class="image"><img alt="" src="//upload.wikimedia.org/wikibooks/en/e/eb/Java_Programming_Run_dialog.png" width="347" height="186" class="thumbimage" data-file-width="347" data-file-height="186"></a> 
               <div class="thumbcaption">
                <span id="figure-1">Figure 1.1: Run dialog</span>
               </div> 
              </div> 
             </div> 
            </div> </td> 
          </tr> 
          <tr> 
           <td valign="top">2.</td> 
           <td>In the command window with black background graced with white text, type the following command: 
            <table style="padding:2px; margin:2px; width:100%;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>JRE availability check</b> <pre style="background-color:#000; color:#fff;">
java -version
</pre></td> 
              </tr> 
             </tbody>
            </table> <p>If you get an error, such as:</p> 
            <table style="padding:2px; margin:2px; width:100%;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Other output error</b> <pre style="background-color:#000; color:#fff;">
Bad command or file name
</pre></td> 
              </tr> 
             </tbody>
            </table> <p>..then the JDK may not be installed or it may not be in your path.</p> </td> 
          </tr> 
         </tbody>
        </table> 
        <dl> 
         <dd>
          <i>To learn more about the Command Prompt syntax, take a look at this <a rel="nofollow" class="external text" href="http://tnd.com/camosun/elex130/dostutor1.html">MS-DOS tutorial</a>.</i>
         </dd> 
        </dl> 
        <p>You may have other versions of Java installed; this command will only show the first in your PATH. You will be made familiar with the PATH environment variable later in this text. For now, if you have no idea what this is all about. Read through towards the end and we will provide you with a step-by-step guide on how to set your own environment variables.</p> 
        <p>You can use your system's file search utilities to see if there is a <code>javac.exe</code> executable installed. If it is, and it is a recent enough version (Java 1.4.2 or Java 1.5, for example), you should put the <code>bin</code> directory that contains <code>javac</code> in your system path. The Java runtime, <code>java</code>, is often in the same <code>bin</code> directory.</p> 
        <p>If the installed version is older (i.e. it is Java 1.3.1 or Java 1.4.2 and you wish to use the more recent Java 5 release), you should proceed below with downloading and installing a JDK.</p> 
        <p>It is possible that you have the Java runtime (JRE), but not the JDK. In that case the <code>javac</code> program won't be found, but the <code>java -version</code> will print the JRE version number.</p> 
        <h4><span class="mw-headline" id="Availability_check_for_JDK">Availability check for JDK</span></h4> 
        <p>Some Windows based systems come built-in with the JRE, however for the purposes of writing Java code by following the tutorials in this book, you would require the JDK nevertheless. The Java Development Kit (JDK) is necessary to build Java programs. First, check to see if a JDK is already installed on your system. To do so, first open a command window and execute the command below.</p> 
        <table style="padding:2px; margin:2px; width:100%;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
           <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Availability check</b> <pre style="background-color:#000; color:#fff;">
javac -version
</pre></td> 
          </tr> 
         </tbody>
        </table> 
        <p>If the JDK is installed and on your executable path, you should see some output which tells you the command line options. The output will vary depending on which version is installed and which vendor provided the Java installation.</p> 
        <h4><span class="mw-headline" id="Advanced_availability_check_options_on_Windows_platform">Advanced availability check options on Windows platform</span></h4> 
        <p>On a machine using the Windows operating system, one can invoke the Registry Editor utility by typing <code>REGEDIT</code> in the Run dialog. In the window that opens subsequently, if you traverse through the hierarchy <code><a href="https://en.wikipedia.org/wiki/HKEY_LOCAL_MACHINE#HKEY_LOCAL_MACHINE" class="extiw" title="w:HKEY LOCAL MACHINE">HKEY_LOCAL_MACHINE</a> &gt; SOFTWARE &gt; JavaSoft &gt; Java Development Kit</code> on the left-hand.</p> 
        <p>The resultant would be similar to <a href="#figure-2">figure 1.2</a>, with the only exception being the version entries for the Java Development Kit. At the time of writing this manuscript, the latest version for the Java Development Kit available from the Internet was 1.7 as seen in the Registry entry. If you see a resultant window that resembles the one presented above, it would prove that you have Java installed on your system, otherwise it is not.</p> 
        <div class="center"> 
         <div class="thumb tnone"> 
          <div class="thumbinner" style="width:683px;">
           <a href="/wiki/File:Java_Programming_Regedit_Av.png" class="image"><img alt="" src="//upload.wikimedia.org/wikibooks/en/4/47/Java_Programming_Regedit_Av.png" width="681" height="227" class="thumbimage" data-file-width="681" data-file-height="227"></a> 
           <div class="thumbcaption">
            <span id="figure-2">Figure 1.2: Registry Editor</span>
           </div> 
          </div> 
         </div> 
        </div> 
        <table style="padding:2px; margin:2px;"> 
         <tbody>
          <tr valign="top"> 
           <td><a href="/wiki/File:Bombilla_amarilla_-_yellow_Edison_lamp.svg" class="image" title="Note"><img alt="Note" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/30px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png" width="30" height="30" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/45px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/60px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 2x" data-file-width="200" data-file-height="200"></a></td> 
           <td style="background-color:#fffff0; border-left: 4px solid yellow; padding-left: 6px;">Caution should be exercised when traversing through the Registry Editor. Any changes to the keys and other entries may change the way your Windows operating system normally works. Even minor changes may result into catastrophic failures of the normal working of your machine. Better that you don't modify or tend to modify anything whilst you are in the Registry Editor.</td> 
          </tr> 
         </tbody>
        </table> 
        <h4><span class="mw-headline" id="Download_instructions">Download instructions</span></h4> 
        <p>To acquire the latest JDK (version 7), you can manually <a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">download the Java software</a> from the Oracle website.</p> 
        <p>For the convenience of our readers, the following table presents direct links to the latest JDK for the Windows operating system.</p> 
        <table class="wikitable sortable"> 
         <tbody>
          <tr> 
           <td>Operating system</td> 
           <td>Setup Installer</td> 
           <td>License</td> 
          </tr> 
          <tr> 
           <td>Windows x86</td> 
           <td><a rel="nofollow" class="external text" href="http://download.oracle.com/otn-pub/java/jdk/7u1-b08/jdk-7u1-windows-i586.exe">Download</a></td> 
           <td><a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/javasebusiness/documentation/java-se-bcl-license-430205.html">Oracle Binary Code License Agreement</a></td> 
          </tr> 
          <tr> 
           <td>Windows x64</td> 
           <td><a rel="nofollow" class="external text" href="http://download.oracle.com/otn-pub/java/jdk/7u1-b08/jdk-7u1-windows-x64.exe">Download</a></td> 
           <td><a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/javasebusiness/documentation/java-se-bcl-license-430205.html">Oracle Binary Code License Agreement</a></td> 
          </tr> 
         </tbody>
        </table> 
        <p>You must follow the instructions for the setup installer wizard step-by-step with the default settings to ensure that Java is properly installed on your system. Once the setup is completed, it is highly recommended to restart your Windows operating system.</p> 
        <p>If you kept the default settings for the setup installer wizard, your JDK should now be installed at <b>C:\Program Files\Java\jdk1.7.0_01</b>. You would require the location to your <b>bin</b> folder at a later time — this is located at <b>C:\Program Files\Java\jdk1.7.0_01\bin</b> It may be a hidden file, but no matter. Just don't use Program Files (x86)\ by mistake unless that's were installed Java.</p> 
        <h4><span class="mw-headline" id="Updating_environment_variables">Updating environment variables</span></h4> 
        <p>In order for you to start using the JDK compiler utility with the Command Prompt, you would need to set the environment variables that points to the <b>bin</b> folder of your recently installed JDK. To set permanently your environment variables, follow the steps below.</p> 
        <table style="padding-left:1.5em;"> 
         <tbody>
          <tr> 
           <td></td> 
          </tr> 
          <tr> 
           <td valign="top">1.</td> 
           <td>To open <b>System Properties</b> dialog box use, the Control Panel or type the following command in the command window: 
            <table style="padding:2px; margin:2px; width:100%;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>System properties</b> <pre style="background-color:#000; color:#fff;">
rundll32 shell32.dll,Control_RunDLL sysdm.cpl
</pre></td> 
              </tr> 
             </tbody>
            </table> </td> 
          </tr> 
          <tr> 
           <td valign="top">2.</td> 
           <td>Navigate to the <b>Advanced</b> tab on the top, and select <b>Environment Variables...</b></td> 
          </tr> 
          <tr> 
           <td valign="top">3.</td> 
           <td>Under <b>System variables</b>, select the variable named <b>Path</b> and click <b>Edit...</b></td> 
          </tr> 
          <tr> 
           <td valign="top">4.</td> 
           <td>In the <b>Edit System Variable</b> dialog, go to the <b>Variable value</b> field. This field is a list of directory paths separated by semi-colons (;).</td> 
          </tr> 
          <tr> 
           <td valign="top">5.</td> 
           <td>To add a new path, append the location of your JDK <b>bin</b> folder separated by a semi-colon (;).</td> 
          </tr> 
          <tr> 
           <td valign="top">6.</td> 
           <td>Click <b>OK</b> on every opened dialog to save changes and get past to where you started.</td> 
          </tr> 
         </tbody>
        </table> 
        <h4><span class="mw-headline" id="Start_writing_code">Start writing code</span></h4> 
        <p>Once you have successfully installed the JDK on your system, you are ready to program code in the Java programming language. However, to write code, you would need a decent text editor. Windows comes with a default text editor by default — <b>Notepad</b>. In order to use notepad to write code in Java, you need to follow the steps below:</p> 
        <table style="padding-left:1.5em;"> 
         <tbody>
          <tr> 
           <td></td> 
          </tr> 
          <tr> 
           <td valign="top">1.</td> 
           <td>Click <b>Start</b> › <b>All Programs</b> › <b>Accessories</b> › <b>Notepad</b> to invoke the application.</td> 
          </tr> 
          <tr> 
           <td></td> 
           <td>Alternatively, you can also press <kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">? Win</kbd>+<kbd class="keyboard-key nowrap" style="border: 1px solid #aaa; -moz-border-radius: 0.2em; -webkit-border-radius: 0.2em; border-radius: 0.2em; -moz-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); -webkit-box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); box-shadow: 0.1em 0.1em 0.2em rgba(0,0,0,0.1); background-color: #f9f9f9; background-image: -moz-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -o-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: -webkit-linear-gradient(top, #eee, #f9f9f9, #eee); background-image: linear-gradient(to bottom, #eee, #f9f9f9, #eee); padding: 0.1em 0.3em; font-family: inherit; font-size: 0.85em;">R</kbd> to open the <b>Run</b> dialog. With the dialog open, type the following command at the prompt: 
            <table style="padding:2px; margin:2px; width:100%;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Notepad launching</b> <pre style="background-color:#000; color:#fff;">
notepad
</pre></td> 
              </tr> 
             </tbody>
            </table> </td> 
          </tr> 
          <tr> 
           <td valign="top">2.</td> 
           <td>Once the <b>Notepad</b> application has fired up, you can use the editor to write code for the Java programming language.</td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Installation instructions for GNU/Linux
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <h4><span class="mw-headline" id="Availability_check_for_JRE_2">Availability check for JRE</span></h4> 
        <p>The Java Runtime Environment (JRE) is necessary to execute Java programs. To check which version of JRE you have, follow the steps below.</p> 
        <table style="padding-left:1.5em;"> 
         <tbody>
          <tr> 
           <td></td> 
          </tr> 
          <tr> 
           <td valign="top">1.</td> 
           <td>Open the <b>Terminal</b> window.</td> 
          </tr> 
          <tr> 
           <td valign="top">2.</td> 
           <td>Type the following command: 
            <table style="padding:2px; margin:2px; width:100%;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>JRE availability check</b> <pre style="background-color:#000; color:#fff;">
java -version
</pre></td> 
              </tr> 
             </tbody>
            </table> <p>If you get something like this:</p> 
            <table style="padding:2px; margin:2px; width:100%;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output on a particular Kubuntu 12.10 installation, with OpenJDK as the provider of JDK and JRE</b> <pre style="background-color:#000; color:#fff;">
java version "1.7.0_09"
OpenJDK Runtime Environment (IcedTea7 2.3.3) (7u9-2.3.3-0ubuntu1~12.10.1)
OpenJDK Client VM (build 23.2-b09, mixed mode, sharing)
</pre></td> 
              </tr> 
             </tbody>
            </table> <p>... then a JRE is installed. If you get an error, such as:</p> 
            <table style="padding:2px; margin:2px; width:100%;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output error</b> <pre style="background-color:#000; color:#fff;">
java: command not found
</pre></td> 
              </tr> 
             </tbody>
            </table> <p>... then the JDK may not be installed or it may not be in your PATH.</p> </td> 
          </tr> 
         </tbody>
        </table> 
        <p>You may have other versions of Java installed; this command will only show the first in your PATH. You will be made familiar with the PATH environment variable later in this text. For now, if you have no idea what this is all about, read through towards the end and we will provide you with a step-by-step guide on how to set your own environment variables.</p> 
        <p>You can use your system's file search utilities to see if there is a <code>javac</code> executable installed. If it is, and it is a recent enough version, you should put the <code>bin</code> directory that contains <code>javac</code> in your system PATH. The Java runtime, <code>java</code>, is often in the same <code>bin</code> directory.</p> 
        <p>If the installed version is older (i.e. it is Java 5 and you wish to use the more recent Java 7 release), you should proceed below with downloading and installing a JDK.</p> 
        <p>It is possible that you have the Java runtime (JRE), but not the JDK. In that case the <code>javac</code> program won't be found, but the <code>java -version</code> will print the JRE version number.</p> 
        <h4><span class="mw-headline" id="Availability_check_for_JDK_2">Availability check for JDK</span></h4> 
        <p>The Java Development Kit (JDK) is necessary to build Java programs. For our purposes, you must use a JDK. First, check to see if a JDK is already installed on your system. To do so, first open a terminal window and execute the command below.</p> 
        <table style="padding:2px; margin:2px; width:100%;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
           <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Availability check</b> <pre style="background-color:#000; color:#fff;">
javac -version
</pre></td> 
          </tr> 
         </tbody>
        </table> 
        <p>If the JDK is installed and on your executable path, you should see some output which tells you the command line options. The output will vary depending on which version is installed and which vendor provided the Java installation.</p> 
        <h4><span class="mw-headline" id="Installation_using_Terminal">Installation using Terminal</span></h4> 
        <p>Downloading and installing the Java platform on Linux machines is very easy and straight-forward. You have two choices to install the Java platforms: using a package manager such as DPKG/APT, YUM/RPM etc., or directly install them using the binary package. To use the terminal to download and install the Oracle Java SE platform, follow the instructions below.</p> 
        <table style="padding-left:1.5em;"> 
         <tbody>
          <tr> 
           <td></td> 
          </tr> 
          <tr> 
           <td valign="top">1.</td> 
           <td>Open the <b>Terminal</b> window.</td> 
          </tr> 
          <tr> 
           <td valign="top">2.</td> 
           <td>At the prompt, type in the line followed by the name of your package manager as shown below: 
            <table style="padding:2px; margin:2px; width:100%;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Retrieving the java packages</b> <pre style="background-color:#000; color:#fff;">
# APT - Ubuntu, Linux Mint
$ sudo add-apt-repository ppa:webupd8team/java
$ sudo apt update
$ sudo apt-get install oracle-java8-installer
# APT - Debian, etc.
$ echo "deb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main" | sudo tee /etc/apt/sources.list.d/webupd8team-java.list
$ echo "deb-src http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main" | sudo tee -a /etc/apt/sources.list.d/webupd8team-java.list
$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys EEA14886
$ sudo apt-get update
$ sudo apt-get install oracle-java8-installer
# Portage - Gentoo
# You need to accept the license and fetch the source code manually from http://www.oracle.com/technetwork/java/javase/downloads/index.html
#   and save it to /usr/portage/distfiles
$ echo "dev-java/oracle-jdk-bin Oracle-BCLA-JavaSE" | sudo tee -a /etc/portage/package.license # Accept the Oracle License
$ emerge oracle-jdk-bin
</pre></td> 
              </tr> 
             </tbody>
            </table> </td> 
          </tr> 
          <tr> 
           <td valign="top">3.</td> 
           <td>All Java softwares should be installed and instantly available now.</td> 
          </tr> 
         </tbody>
        </table> 
        <h4><span class="mw-headline" id="Download_instructions_2">Download instructions</span></h4> 
        <p>Alternatively, you can manually <a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">download the Java software</a> from the Oracle website.</p> 
        <p>For the convenience of our readers, the following table presents direct links to the latest JDK for the Linux operating system.</p> 
        <table class="wikitable sortable"> 
         <tbody>
          <tr> 
           <td>Operating system</td> 
           <td>RPM</td> 
           <td>Tarball</td> 
           <td>License</td> 
          </tr> 
          <tr> 
           <td>Linux x86</td> 
           <td><a rel="nofollow" class="external text" href="http://download.oracle.com/otn-pub/java/jdk/7u7-b10/jdk-7u7-linux-i586.rpm">Download</a></td> 
           <td><a rel="nofollow" class="external text" href="http://download.oracle.com/otn-pub/java/jdk/7u1-b08/jdk-7u1-linux-i586.tar.gz">Download</a></td> 
           <td><a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/javasebusiness/documentation/java-se-bcl-license-430205.html">Oracle Binary Code License Agreement</a></td> 
          </tr> 
          <tr> 
           <td>Linux x64</td> 
           <td><a rel="nofollow" class="external text" href="http://download.oracle.com/otn-pub/java/jdk/7u1-b08/jdk-7u1-linux-x64.rpm">Download</a></td> 
           <td><a rel="nofollow" class="external text" href="http://download.oracle.com/otn-pub/java/jdk/7u1-b08/jdk-7u1-linux-x64.tar.gz">Download</a></td> 
           <td><a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/javasebusiness/documentation/java-se-bcl-license-430205.html">Oracle Binary Code License Agreement</a></td> 
          </tr> 
         </tbody>
        </table> 
        <h4><span class="mw-headline" id="Start_writing_code_2">Start writing code</span></h4> 
        <p>The most widely available text editor on GNOME desktops is <b>Gedit</b>, while on the KDE desktops, one can find <b>Kate</b>. Both these editors support syntax highlighting and code completion and therefore are sufficient for our purposes.</p> 
        <p>However, if you require a robust and standalone text-editor like the Notepad++ editor on Windows, you would require the use of the minimalistic editor loaded with features – <b>SciTE</b>. Follow the instructions below if you wish to install <b>SciTE</b>:</p> 
        <table style="padding-left:1.5em;"> 
         <tbody>
          <tr> 
           <td></td> 
          </tr> 
          <tr> 
           <td valign="top">1.</td> 
           <td>Open the <b>Terminal</b> window.</td> 
          </tr> 
          <tr> 
           <td valign="top">2.</td> 
           <td>At the prompt, write the following: 
            <table style="padding:2px; margin:2px; width:100%;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Retrieving the java packages</b> <pre style="background-color:#000; color:#fff;">
$ sudo apt-get install scite
</pre></td> 
              </tr> 
             </tbody>
            </table> </td> 
          </tr> 
          <tr> 
           <td valign="top">3.</td> 
           <td>You should now be able to use SciTE for your programming needs. You may also want to try Geany. Installation instructions are similar to those for SciTE.</td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Installation instructions for Mac OS
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p>On Mac OS, both the JRE and the JDK are already installed. However, the version installed was the latest version when the computer was purchased, so you may want to update it.</p> 
        <h4><span class="mw-headline" id="Updating_Java_for_Mac_OS">Updating Java for Mac OS</span></h4> 
        <ol> 
         <li>Go to the <a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html">Java download page</a>.</li> 
         <li>Mechanically accept Oracle's license agreement.</li> 
         <li>Click on the link for Mac OS X.</li> 
         <li>Run the installer package.</li> 
        </ol> 
        <h4><span class="mw-headline" id="Availability_check_for_JDK_3">Availability check for JDK</span></h4> 
        <p>The Java Development Kit (JDK) is necessary to build Java programs. For our purposes, you must use a JDK. First, check to see if a JDK is already installed on your system. To do so, first open a terminal window and execute the command below.</p> 
        <table style="padding:2px; margin:2px; width:100%;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
           <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Availability check</b> <pre style="background-color:#000; color:#fff;">
java -version
</pre></td> 
          </tr> 
         </tbody>
        </table> 
        <p>If the JDK is installed and on your executable path, you should see some output which tells you the command line options. The output will vary depending on which version is installed and which vendor provided the Java installation.</p> 
       </div> 
      </div> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Installation instructions for Solaris
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <div style="clear: both"></div> 
        <table style="background: #ffd; border: 1px solid #aaaaaa; padding: 6pt; margin: 12pt 8%; width: 60%; margin: auto;" class="notice noprint notice-todo"> 
         <tbody>
          <tr> 
           <td style="width: 58px;"> 
            <div class="floatleft">
             <img alt="Clipboard" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/45px-Clipboard.svg.png" width="45" height="45" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/68px-Clipboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1f/Clipboard.svg/90px-Clipboard.svg.png 2x" data-file-width="48" data-file-height="48">
            </div> </td> 
           <td> <p><b>To do:</b><br> Add a section describing the installation of Java onto Solaris machines. Incorporate some of the information provided in the commented section of this page.</p> </td> 
          </tr> 
         </tbody>
        </table> 
        <div style="clear: both"></div> 
       </div> 
      </div> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        No Install Option for Programming Online
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p>If you already have the JRE installed, you can use the Java Wiki Integrated Development Environment (JavaWIDE) to code directly in your browser, no account or special software required.</p> 
        <p><a rel="nofollow" class="external text" href="http://sandbox.javawide.org"><b>Click here to visit the JavaWIDE Sandbox to get started.</b></a></p> 
        <p><a rel="nofollow" class="external text" href="http://www.javawide.org">For more information, click here to visit the JavaWIDE site.</a></p> 
       </div> 
      </div> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Compilation">Compilation</span></h1> 
      <p>In Java, programs are not compiled into executable files; they are compiled into <a href="https://en.wikipedia.org/wiki/Bytecode" class="extiw" title="w:Bytecode">bytecode</a> (as discussed <a href="/wiki/Java_Programming/The_Java_Platform" title="Java Programming/The Java Platform">earlier</a>), which the JVM (Java Virtual Machine) then executes at runtime. Java source code is compiled into bytecode when we use the <code>javac</code> compiler. The bytecode gets saved on the disk with the file extension <code>.class</code>. When the program is to be run, the bytecode is converted, using the <a href="https://en.wikipedia.org/wiki/Just-in-time_compiliation" class="extiw" title="w:Just-in-time compiliation">just-in-time</a> (JIT) compiler. The result is machine code which is then fed to the memory and is executed.</p> 
      <p>Java code needs to be compiled twice in order to be executed:</p> 
      <ol> 
       <li>Java programs need to be compiled to bytecode.</li> 
       <li>When the bytecode is run, it needs to be converted to machine code.</li> 
      </ol> 
      <p>The Java classes/bytecode are compiled to machine code and loaded into memory by the JVM when needed the first time. This is different from other languages like C/C++ where programs are to be compiled to machine code and linked to create an executable file before it can be executed.</p> 
      <h2><span class="mw-headline" id="Quick_compilation_procedure">Quick compilation procedure</span></h2> 
      <p>To execute your first Java program, follow the instructions below:</p> 
      <table style="padding-left:1.5em;"> 
       <tbody>
        <tr> 
         <td></td> 
        </tr> 
        <tr> 
         <td valign="top">1.</td> 
         <td>Proceed only if you have successfully installed and configured your system for Java as discussed <a href="/wiki/Java_Programming/Installation" title="Java Programming/Installation">here</a>.</td> 
        </tr> 
        <tr> 
         <td valign="top">2.</td> 
         <td>Open your preferred text editor — this is the editor you set while installing the Java platform.</td> 
        </tr> 
        <tr> 
         <td></td> 
         <td>For example, <b>Notepad</b> or <b>Notepad++</b> on Windows; <b>Gedit</b>, <b>Kate</b> or <b>SciTE</b> on Linux; or, <b>XCode</b> on Mac OS, etc.</td> 
        </tr> 
        <tr> 
         <td valign="top">3.</td> 
         <td>Write the following lines of code in a new text document: 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-1"><b>Code listing 2.5: HelloWorld.java</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello World!"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
        <tr> 
         <td valign="top">4.</td> 
         <td>Save the file as <b>HelloWorld.java</b> — the name of your file should be the same as the name of your class definition and followed by the <code>.java</code> extension. This name is <i>case-sensitive</i>, which means you need to capitalize the precise letters that were capitalized in the name for the class definition.</td> 
        </tr> 
        <tr> 
         <td valign="top">5.</td> 
         <td>Next, open your preferred command-line application.</td> 
        </tr> 
        <tr> 
         <td></td> 
         <td>For example, <b>Command Prompt</b> on Windows; and, <b>Terminal</b> on Linux and Mac OS.</td> 
        </tr> 
        <tr> 
         <td valign="top">6.</td> 
         <td>In your command-line application, navigate to the directory where you just created your file. If you do not know how to do this, consider reading through our crash courses for command-line applications for <a href="/wiki/Windows_Batch_Scripting#CD" title="Windows Batch Scripting">Windows</a> or <a href="/wiki/Linux_Guide/Using_the_shell#Using_cd" title="Linux Guide/Using the shell">Linux</a>.</td> 
        </tr> 
        <tr> 
         <td valign="top">7.</td> 
         <td>Compile the Java source file using the following command which you can copy and paste in if you want: 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Compilation</b> <pre style="background-color:#000; color:#fff;">
javac HelloWorld.java
</pre></td> 
            </tr> 
           </tbody>
          </table> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td><a href="/wiki/File:Nuvola_apps_important.svg" class="image" title="Warning"><img alt="Warning" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/32px-Nuvola_apps_important.svg.png" width="32" height="27" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/48px-Nuvola_apps_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/64px-Nuvola_apps_important.svg.png 2x" data-file-width="600" data-file-height="500"></a></td> 
             <td style="background-color:#fff0f0; border-left: 4px solid red; padding-left: 6px;">If you obtain an error message like <code>error: cannot read: HelloWorld.java 1 error</code>, your file is not in the current folder or it is badly spelled. Did you navigate to the program's location in the command prompt using the <a href="https://en.wikipedia.org/wiki/cd_(command)" class="extiw" title="w:cd (command)">cd</a> (<i>c</i>hange <i>d</i>irectory) command? <p>If you obtain another message ending by <code>1 error</code> or <code>... errors</code>, there may be a mistake in your code. Are you sure all words are spelled correctly and with the exact case as shown? Are there semicolons and brackets in the appropriate spot? Are you missing a quote? Usually, modern IDEs would try coloring the entire source as a quote in this case.</p> <p>If your computer emits beeps, then you may have illegal characters in your <code>HelloWorld.java</code>.</p> <p>If no <code>HelloWorld.class</code> file has been created in the same folder, then you've got an error. Are you launching the <code>javac</code> program correctly?</p> </td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
        <tr> 
         <td valign="top">8.</td> 
         <td>Once the compiler returns to the prompt, run the application using the following command: 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Execution</b> <pre style="background-color:#000; color:#fff;">
java HelloWorld
</pre></td> 
            </tr> 
           </tbody>
          </table> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td><a href="/wiki/File:Nuvola_apps_important.svg" class="image" title="Warning"><img alt="Warning" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/32px-Nuvola_apps_important.svg.png" width="32" height="27" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/48px-Nuvola_apps_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/64px-Nuvola_apps_important.svg.png 2x" data-file-width="600" data-file-height="500"></a></td> 
             <td style="background-color:#fff0f0; border-left: 4px solid red; padding-left: 6px;">If you obtain an error message like <code>Exception in thread "main" java.lang.NoClassDefFoundError: HelloWorld</code>, the <code>HelloWorld.class</code> file is not in the current folder or it is badly spelled. <p>If you obtain an error message like <code>Exception in thread "main" java.lang.NoSuchMethodError: main</code>, your source file may have been badly written.</p> </td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
        <tr> 
         <td valign="top">9.</td> 
         <td>The above command should result in your command-line application displaying the following result: 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output</b> <pre style="background-color:#000; color:#fff;">
Hello World!
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <dl> 
       <dd>
        <i>Ask for help if the program did not execute properly in the <a href="/wiki/Talk:Java_Programming/Getting_started" title="Talk:Java Programming/Getting started">Discussion page</a> for this chapter</i>.
       </dd> 
      </dl> 
      <h2><span class="mw-headline" id="Automatic_Compilation_of_Dependent_Classes">Automatic Compilation of Dependent Classes</span></h2> 
      <p>In Java, if you have used any reference to any other java object, then the class for that object will be automatically compiled, if that was not compiled already. These automatic compilations are nested, and this continues until all classes are compiled that are needed to run the program. So it is usually enough to compile only the high level class, since all the dependent classes will be automatically compiled.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Main class compilation</b> <pre style="background-color:#000; color:#fff;">
javac ... MainClass.java
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <p>However, you can't rely on this feature if your program is using reflection to create objects, or you are compiling for servlets or for a "jar", package. In these cases you should list these classes for explicit compilation.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Main class compilation</b> <pre style="background-color:#000; color:#fff;">
javac ... MainClass.java ServletOne.java ...
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span id="Packages,_Subdirectories,_and_Resources"></span><span class="mw-headline" id="Packages.2C_Subdirectories.2C_and_Resources">Packages, Subdirectories, and Resources</span></h2> 
      <p>Each Java top level class belongs to a package (covered in the chapter about <a href="/wiki/Java_Programming/Packages" title="Java Programming/Packages">Packages</a>). This may be declared in a <code>package</code> statement at the beginning of the file; if that is missing, the class belongs to the unnamed package.</p> 
      <p>For compilation, the file must be in the right directory structure. A file containing a class in the unnamed package must be in the current/root directory; if the class belongs to a package, it must be in a directory with the same name as the package.</p> 
      <p>The convention is that package names and directory names corresponding to the package consist of only lower case letters.</p> 
      <h3><span class="mw-headline" id="Top_level_package">Top level package</span></h3> 
      <p>A class with this package declaration</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.1: Package declaration</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kn">package</span> <span class="nn">example</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>has to be in a directory named <code>example</code>.</p> 
      <h3><span class="mw-headline" id="Subpackages">Subpackages</span></h3> 
      <p>A class with this package declaration</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.2: Package declaration with sub-packages</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kn">package</span> <span class="nn">org.wikibooks.en</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>has to be in a directory named <code>en</code> which has to be a sub-directory of <code>wikibooks</code> which in turn has to be a sub-directory of <code>org</code> resulting in <code>org/wikibooks/en</code> on Linux or <code>org\wikibooks\en</code> on Windows.</p> 
      <p>Java programs often contain non-code files such as images and properties files. These are referred to generally as <i>resources</i> and stored in directories local to the classes in which they're used. For example, if the class <code>com.example.ExampleApp</code> uses the <code>icon.png</code> file, this file could be stored as <code>/com/example/resources/icon.png</code>. These resources present a problem when a program is compiled, because <code>javac</code> does not copy them to wherever the <code>.class</code> files are being complied to (see above); it is up to the programmer to move the resource files and directories.</p> 
      <h2><span class="mw-headline" id="Filename_Case">Filename Case</span></h2> 
      <p>The Java source file name must be the same as the public class name that the file contains. There can be only one public class defined per file. The Java class name is case sensitive, as is the source file name.</p> 
      <p>The naming convention for the class name is for it to start with a capital letter.</p> 
      <h2><span class="mw-headline" id="Compiler_Options">Compiler Options</span></h2> 
      <h3><span class="mw-headline" id="Debugging_and_Symbolic_Information">Debugging and Symbolic Information</span></h3> 
      <h2><span class="mw-headline" id="Ant">Ant</span></h2> 
      <dl> 
       <dd>
        <i>For comprehensive information about all aspects of Ant, please see the <a href="/wiki/Programming:Apache_Ant" class="mw-redirect" title="Programming:Apache Ant">Ant Wikibook</a>.</i>
       </dd> 
      </dl> 
      <p>The best way to build your application is to use a build tool. This checks all the needed dependencies and compiles only the needed class for the build. <a href="/wiki/Java_Programming/Compilation#Ant" title="Java Programming/Compilation">Ant</a> tool is one of the best and the most popular build tools currently available. Ant is a build management tool designed to replace MAKE as the tool for automated builds of large Java applications. Like Java, and unlike MAKE, Ant is designed to be platform independent.</p> 
      <p>Using <a href="/wiki/Java_Programming/Compilation#Ant" title="Java Programming/Compilation">Ant</a> you would build your application from the command line by typing:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Ant building</b> <pre style="background-color:#000; color:#fff;">
ant build.xml
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <code>build.xml</code> file contains all the information needed to build the application.</p> 
      <p>Building a Java application requires certain tasks to be performed defined in a <code>build.xml</code> file. Those tasks may include not only compiling the code, but also copying code, packaging the program to a Jar, creating EJBs, running automated tests, doing ftp for the code to remote site, and so on. For some tasks a condition can be assigned, for example to compile only changed code, or do the task if that was not already done so. Tasks dependency can also be specified, which will make sure that the order of executions of the tasks are in the right order. For example, when compiling the code before packaging it to a jar, the package-to-jar task depends on the compilation task.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Bombilla_amarilla_-_yellow_Edison_lamp.svg" class="image" title="Note"><img alt="Note" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/30px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png" width="30" height="30" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/45px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/60px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 2x" data-file-width="200" data-file-height="200"></a></td> 
         <td style="background-color:#fffff0; border-left: 4px solid yellow; padding-left: 6px;">In rare cases, your code may appear to compile correctly but the program behaves as if you were using an old copy of the source code (or otherwise reports errors during runtime.) When this occurs, you may need to clean your compilation folder by either deleting the class files or using the Clean command from an IDE.</td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <code>build.xml</code> file is generally kept in the root directory of the java project. Ant parses this file and executes the tasks therein. Below we give an example <code>build.xml</code> file.</p> 
      <p>Ant tool is written in Java and is open source, so it can be extended if there is a task you'd like to be done during the build that is not in the predefined tasks list. It is very easy to hook your ant task code to the other tasks: your code only needs to be in the classpath, and the Ant tool will load it at runtime. For more information about writing your own Ant tasks, please see the project website at <a rel="nofollow" class="external free" href="http://ant.apache.org/">http://ant.apache.org/</a>.</p> 
      <div class="collapsible" style="border:1px solid #aaaaaa; width:100%; background:#ccccff;"> 
       <div class="title" style="text-align:left; padding:0.5em; background:#ccccff; color:black;">
        Example 
        <code>build.xml</code> file.
       </div> 
       <div class="NavContent" style="margin:0.5em; margin-top:0em; background:white; border:1px solid #aaaaaa;"> 
        <div class="mw-highlight mw-content-ltr" dir="ltr"> 
         <pre>
<span class="cp">&lt;?xml version="1.0"?&gt;</span>

<span class="nt">&lt;project</span> <span class="na">name=</span><span class="s">"ExampleApp"</span> <span class="na">basedir=</span><span class="s">"."</span> <span class="na">default=</span><span class="s">"main"</span><span class="nt">&gt;</span>

    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"source.dir"</span>    <span class="na">value=</span><span class="s">"source"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"libraries.dir"</span> <span class="na">value=</span><span class="s">"libraries"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"build.dir"</span>     <span class="na">value=</span><span class="s">"build"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"classes.dir"</span>   <span class="na">value=</span><span class="s">"${build.dir}/classes"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dist.dir"</span>      <span class="na">value=</span><span class="s">"${build.dir}/dist"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"main-class"</span>    <span class="na">value=</span><span class="s">"com.example.ExampleApp"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;path</span> <span class="na">id=</span><span class="s">"classpath"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">"${libraries.dir}"</span> <span class="na">includes=</span><span class="s">"**/*.jar"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/path&gt;</span>

    <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">"clean"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;delete</span> <span class="na">dir=</span><span class="s">"${build.dir}"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/target&gt;</span>

    <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">"compile"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">"${classes.dir}"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;javac</span> <span class="na">srcdir=</span><span class="s">"${source.dir}"</span> <span class="na">destdir=</span><span class="s">"${classes.dir}"</span> <span class="na">classpathref=</span><span class="s">"classpath"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;copy</span> <span class="na">todir=</span><span class="s">"${classes.dir}"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">"${src.dir}"</span> <span class="na">excludes=</span><span class="s">"**/*.java"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/copy&gt;</span>
    <span class="nt">&lt;/target&gt;</span>

    <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">"build"</span> <span class="na">depends=</span><span class="s">"compile"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;mkdir</span> <span class="na">dir=</span><span class="s">"${dist.dir}"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;copy</span> <span class="na">todir=</span><span class="s">"${dist.dir}/lib"</span> <span class="na">flatten=</span><span class="s">"true"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;path</span> <span class="na">refid=</span><span class="s">"classpath"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/copy&gt;</span>
        <span class="nt">&lt;path</span> <span class="na">id=</span><span class="s">"dist.classpath"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;fileset</span> <span class="na">dir=</span><span class="s">"${dist.dir}/lib"</span> <span class="na">includes=</span><span class="s">"*.jar"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/path&gt;</span>
        <span class="nt">&lt;manifestclasspath</span> <span class="na">property=</span><span class="s">"dist.manifest.classpath"</span> <span class="na">jarfile=</span><span class="s">"${dist.dir}/${ant.project.name}.jar"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;classpath</span> <span class="na">refid=</span><span class="s">"dist.classpath"</span> <span class="nt">/&gt;</span>
        <span class="nt">&lt;/manifestclasspath&gt;</span>
        <span class="nt">&lt;jar</span> <span class="na">destfile=</span><span class="s">"${dist.dir}/${ant.project.name}.jar"</span> <span class="nt">&gt;</span>
            <span class="nt">&lt;zipfileset</span> <span class="na">dir=</span><span class="s">"${classes.dir}"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;manifest&gt;</span>
                <span class="nt">&lt;attribute</span> <span class="na">name=</span><span class="s">"Class-Path"</span> <span class="na">value=</span><span class="s">"${dist.manifest.classpath}"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;attribute</span> <span class="na">name=</span><span class="s">"Main-Class"</span> <span class="na">value=</span><span class="s">"${main-class}"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/manifest&gt;</span>
        <span class="nt">&lt;/jar&gt;</span>
    <span class="nt">&lt;/target&gt;</span>

    <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">"run-build"</span> <span class="na">depends=</span><span class="s">"build"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;java</span> <span class="na">jar=</span><span class="s">"${dist.dir}/${ant.project.name}.jar"</span> <span class="na">fork=</span><span class="s">"true"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;classpath&gt;</span>
                <span class="nt">&lt;path</span> <span class="na">refid=</span><span class="s">"classpath"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;path</span> <span class="na">location=</span><span class="s">"${dist.dir}/${ant.project.name}.jar"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;/classpath&gt;</span>
        <span class="nt">&lt;/java&gt;</span>
    <span class="nt">&lt;/target&gt;</span>

    <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">"run"</span> <span class="na">depends=</span><span class="s">"compile"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;java</span> <span class="na">classname=</span><span class="s">"${main-class}"</span> <span class="nt">&gt;</span>
            <span class="nt">&lt;classpath&gt;</span>
                <span class="nt">&lt;path</span> <span class="na">refid=</span><span class="s">"classpath"</span><span class="nt">/&gt;</span>
                <span class="nt">&lt;pathelement</span> <span class="na">location=</span><span class="s">"${classes.dir}"</span> <span class="nt">/&gt;</span>
            <span class="nt">&lt;/classpath&gt;</span>
        <span class="nt">&lt;/java&gt;</span>
    <span class="nt">&lt;/target&gt;</span>

    <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">"clean-build"</span> <span class="na">depends=</span><span class="s">"clean, build"</span><span class="nt">/&gt;</span>

    <span class="nt">&lt;target</span> <span class="na">name=</span><span class="s">"main"</span> <span class="na">depends=</span><span class="s">"clean, run"</span><span class="nt">/&gt;</span>

<span class="nt">&lt;/project&gt;</span>
</pre>
        </div> 
       </div> 
      </div> 
      <p>The next most popular way to build applications is using an <a href="/wiki/Java_Programming/Java_IDEs" title="Java Programming/Java IDEs">Integrated Development Environment</a> (IDE).</p> 
      <h2><span class="mw-headline" id="The_JIT_compiler">The JIT compiler</span></h2> 
      <p>The Just-In-Time (JIT) compiler is the compiler that converts the byte-code to machine code. It compiles byte-code once and the compiled machine code is re-used again and again, to speed up execution. Early Java compilers compiled the byte-code to machine code each time it was used, but more modern compilers cache this machine code for reuse on the machine. Even then, java's JIT compiling was still faster than an "interpreter-language", where code is compiled from <b>high level language</b>, instead of from byte-code each time it was used.</p> 
      <p>The standard JIT compiler runs <i>on demand</i>. When a method is called repeatedly, the JIT compiler analyzes the bytecode and produces highly efficient machine code, which runs very fast. The JIT compiler is smart enough to recognize when the code has already been compiled, so as the application runs, compilation happens only as needed. As Java applications run, they tend to become faster and faster, because the JIT can perform runtime profiling and optimization to the code to meet the execution environment. Methods or code blocks which do not run often receive less optimization; those which run often (so called <i>hotspots</i>) receive more profiling and optimization.</p> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Execution">Execution</span></h1> 
      <p>There are various ways in which Java code can be executed. A complex Java application usually uses third party APIs or services. In this section we list the most popular ways a piece of Java code may be packed together and/or executed.</p> 
      <h2><span class="mw-headline" id="JSE_code_execution">JSE code execution</span></h2> 
      <p>Java language first edition came out in the client-server era. Thick clients were developed with rich GUI interfaces. Java first edition, JSE (Java Standard Edition) had/has the following in its belt:</p> 
      <ul> 
       <li>GUI capabilities (AWT, Swing)</li> 
       <li>Network computing capabilities (<a href="https://en.wikipedia.org/wiki/Java_remote_method_invocation" class="extiw" title="w:Java remote method invocation">RMI</a>)</li> 
       <li>Multi-tasking capabilities (Threads)</li> 
      </ul> 
      <p>With JSE the following Java code executions are possible:</p> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:182px;">
        <a href="/wiki/File:Java_stand_alone_appl.jpg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/7/7c/Java_stand_alone_appl.jpg" width="180" height="190" class="thumbimage" data-file-width="180" data-file-height="190"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:Java_stand_alone_appl.jpg" class="internal" title="Enlarge"></a>
         </div> Figure 1: Stand alone execution
        </div> 
       </div> 
      </div> 
      <dl> 
       <dt>
        Stand alone Java application&nbsp;
       </dt> 
       <dd>
        (Figure 1) Stand alone application refers to a Java program where both the user interface and business modules are running on the same computer. The application may or may not use a database to persist data. The user interface could be either AWT or Swing.
       </dd> 
       <dd>
        The application would start with a 
        <code>main()</code> method of a Class. The application stops when the 
        <code>main()</code> method exits, or if an exception is thrown from the application to the JVM. Classes are loaded to memory and compiled as needed, either from the file system or from a *.jar file, by the JVM.
       </dd> 
       <dd>
        Invocation of Java programs distributed in this manner requires usage of the command line. Once the user has all the class files, he needs to launch the application by the following command line (where Main is the name of the class containing the main() method.)
       </dd> 
      </dl> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Execution of class</b> <pre style="background-color:#000; color:#fff;">
java Main
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <dl> 
       <dt>
        Java 'jar' class libraries&nbsp;
       </dt> 
       <dd>
        Utility classes, framework classes, and/or third party classes are usually packaged and distributed in Java ' *.jar' files. These 'jar' files need to be put in the CLASSPATH of the java program from which these classes are going to be used.
       </dd> 
       <dd>
        If a jar file is executable, it can be run from the command line:
       </dd> 
      </dl> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Execution of archive</b> <pre style="background-color:#000; color:#fff;">
java -jar Application.jar
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:252px;">
        <a href="/wiki/File:Java_applet_appl.jpg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Java_applet_appl.jpg/250px-Java_applet_appl.jpg" width="250" height="161" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/2/2a/Java_applet_appl.jpg 1.5x" data-file-width="313" data-file-height="202"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:Java_applet_appl.jpg" class="internal" title="Enlarge"></a>
         </div> Figure 2: Applet Execution
        </div> 
       </div> 
      </div> 
      <dl> 
       <dt>
        Java Applet code&nbsp;
       </dt> 
       <dd>
        (Figure 2) Java Applets are Java code referenced from 
        <a href="https://en.wikipedia.org/wiki/HTML" class="extiw" title="w:HTML">HTML</a> pages, by the &lt;APPLET&gt; tag. The Java code is downloaded from a server and runs in the client browser JVM. Java has built-in support to render applets in the browser window.
       </dd> 
       <dd>
        Sophisticated GUI clients were found hard to develop, mostly because of download time, incompatibilities between browser JVM implementations, and communication requirements back to the server. Applets are rarely used today, and are most commonly used as small, separate graphic-like animation applets. The popularity of Java declined when Microsoft withdrew its Java support from 
        <a href="https://en.wikipedia.org/wiki/Internet_Explorer" class="extiw" title="w:Internet Explorer">Internet Explorer</a> default configuration, however, the plugin is still available as a free download from 
        <a rel="nofollow" class="external text" href="http://java.com/">java.com</a>.
       </dd> 
       <dd>
        More information can be found about applets at the 
        <a href="/wiki/Java_Programming/Applets" title="Java Programming/Applets">Applet Chapter</a>, in this book. Also, Wikipedia has an article about 
        <a href="https://en.wikipedia.org/wiki/Java_applet" class="extiw" title="w:Java applet">Java Applets</a>.
       </dd> 
      </dl> 
      <dl> 
       <dt>
        Client Server applications&nbsp;
       </dt> 
       <dd>
        The client server applications consist of a front-end, and a back-end part, each running on a separate computer. The idea is that the business logic would be on the back-end part of the program, which would be reused by all the clients. Here the challenge is to achieve a separation between front-end user interface code, and the back-end business logic code.
       </dd> 
       <dd>
        The communication between the front-end and the back-end can be achieved by two ways. 
        <dl> 
         <dd> 
          <ul> 
           <li>One way is to define a data communication <a href="https://en.wikipedia.org/wiki/Protocol_(computing)" class="extiw" title="w:Protocol (computing)">protocol</a> between the two tiers. The back-end part would listen for an incoming request. Based on the <a href="https://en.wikipedia.org/wiki/Protocol_(computing)" class="extiw" title="w:Protocol (computing)">protocol</a> it interprets the request and sends back the result in data form.</li> 
           <li>The other way is to use <a href="https://en.wikipedia.org/wiki/Java_remote_method_invocation" class="extiw" title="w:Java remote method invocation">Java Remote Invocation</a> (RMI). With the use of RMI, a remote object can be created and used by the client. In this case Java objects are transmitted across the network.</li> 
          </ul> 
         </dd> 
        </dl> 
       </dd> 
       <dd>
        More information can be found about client-server programming, with sample code, at the 
        <a href="/wiki/Java_Programming/Client_Server" title="Java Programming/Client Server">Client Server Chapter</a> in this book.
       </dd> 
      </dl> 
      <dl> 
       <dt>
        Web Applications&nbsp;
       </dt> 
       <dd>
        For applications needed by lots of client installations, the client-server model did not work. Maintaining and upgrading the hundreds or thousands of clients caused a problem. It was not practical. The solution to this problem was to create a unified, standard client, for all applications, and that is the 
        <i><a href="https://en.wikipedia.org/wiki/Web_browser" class="extiw" title="w:Web browser">Browser</a></i>.
       </dd> 
       <dd>
        Having a standard client, it makes sense to create a unified, standard back-end service as well, and that is the 
        <i><a href="https://en.wikipedia.org/wiki/Application_server" class="extiw" title="w:Application server">Application Server</a></i>.
       </dd> 
       <dd>
        <b>Web Application</b> is an application that is running in the 
        <a href="https://en.wikipedia.org/wiki/Application_server" class="extiw" title="w:Application server">Application Server</a>, and it can be accessed and used by the 
        <a href="https://en.wikipedia.org/wiki/Web_browser" class="extiw" title="w:Web browser">Browser</a> client.
       </dd> 
       <dd>
        There are three main area of interest in Web Applications, those are: 
        <ul> 
         <li>The <a href="https://en.wikipedia.org/wiki/Web_Browser" class="extiw" title="w:Web Browser">Web Browser</a>. This is the container of rendering HTML text, and running client scripts</li> 
         <li>The <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" class="extiw" title="w:Hypertext Transfer Protocol">HTTP</a> <a href="https://en.wikipedia.org/wiki/Protocol_(computing)" class="extiw" title="w:Protocol (computing)">protocol</a>. Text data are sent back and forth between Browser and the Server</li> 
         <li>The <a href="https://en.wikipedia.org/wiki/Web_server" class="extiw" title="w:Web server">Web server</a> to serve static content, <a href="https://en.wikipedia.org/wiki/Application_server" class="extiw" title="w:Application server">Application server</a> to serve dynamic content and host <a href="https://en.wikipedia.org/wiki/Enterprise_JavaBean" class="extiw" title="w:Enterprise JavaBean">EJBs</a>.</li> 
        </ul> 
       </dd> 
       <dd>
        Wikipedia also has an article about 
        <a href="https://en.wikipedia.org/wiki/Web_application" class="extiw" title="w:Web application">Web application</a>.
       </dd> 
      </dl> 
      <h2><span class="mw-headline" id="J2EE_code_execution">J2EE code execution</span></h2> 
      <p>As the focus was shifting from reaching GUI clients to thin client applications, with Java version 2, Sun introduced J2EE (Java 2 Extended Edition). J2EE added&nbsp;:</p> 
      <ul> 
       <li><a href="https://en.wikipedia.org/wiki/Software_componentry" class="extiw" title="w:Software componentry">Components Base Architecture</a>, (Servlet, JSP, EJB Containers)</li> 
      </ul> 
      <p>With J2EE the following Java component executions are possible:</p> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:252px;">
        <a href="/wiki/File:Java_servlet_appl.jpg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/73/Java_servlet_appl.jpg/250px-Java_servlet_appl.jpg" width="250" height="120" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/73/Java_servlet_appl.jpg/375px-Java_servlet_appl.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/7/73/Java_servlet_appl.jpg 2x" data-file-width="447" data-file-height="214"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:Java_servlet_appl.jpg" class="internal" title="Enlarge"></a>
         </div> Figure 3: Servlet Execution
        </div> 
       </div> 
      </div> 
      <dl> 
       <dt>
        Java Servlet code&nbsp;
       </dt> 
       <dd>
        (Figure 3) Java got its popularity with server side programming, more specifically with 
        <a href="https://en.wikipedia.org/wiki/Java_EE" class="extiw" title="w:Java EE">J2EE</a> servlets. Servlets are running in a simple J2EE framework to handle client 
        <a href="https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol" class="extiw" title="w:Hypertext Transfer Protocol">HTTP</a> requests. They are meant to replace 
        <a href="https://en.wikipedia.org/wiki/Common_Gateway_Interface" class="extiw" title="w:Common Gateway Interface">CGI programming</a> for web pages rendering dynamic content.
       </dd> 
       <dd>
        The servlet is running in a so called 
        <a href="https://en.wikipedia.org/wiki/Web_container" class="extiw" title="w:Web container">servlet-container/web container</a>. The servlet's responsibility is to: 
        <ul> 
         <li>Handle the request by doing the business logic computation,</li> 
         <li>Connecting to a database if needed,</li> 
         <li>Create HTML to present to the user through the browser</li> 
        </ul> 
       </dd> 
       <dd>
        The HTML output represents both the presention logic and the results of the business computations. This represents a huge problem, and there is no real application relying only on servlets to handle the presention part of the responsibility. There are two main solutions to this: 
        <ul> 
         <li>Use a template tool (Store the presentation part in an HTML file, marking the areas that need to be replaced after business logic computations).</li> 
         <li>Use JSP (See next section)</li> 
        </ul> 
       </dd> 
       <dd>
        Wikipedia also has an article about 
        <a href="https://en.wikipedia.org/wiki/Java_Servlet" class="extiw" title="w:Java Servlet">Servlets</a>.
       </dd> 
      </dl> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:252px;">
        <a href="/wiki/File:Java_jsp_appl.jpg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/5/52/Java_jsp_appl.jpg/250px-Java_jsp_appl.jpg" width="250" height="107" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/5/52/Java_jsp_appl.jpg/375px-Java_jsp_appl.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/5/52/Java_jsp_appl.jpg/500px-Java_jsp_appl.jpg 2x" data-file-width="612" data-file-height="262"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:Java_jsp_appl.jpg" class="internal" title="Enlarge"></a>
         </div> Figure 4: Jsp Execution
        </div> 
       </div> 
      </div> 
      <dl> 
       <dt>
        Java Server Pages (JSP) code&nbsp;
       </dt> 
       <dd>
        (Figure 4) JSP is an HTML file with embedded Java code inside. The first time the JSP is accessed, the JSP is converted to a Java Servlet. This servlet outputs HTML which has inside the result of the business logic computation. There are special JSP tags that helps to add data dynamically to the HTML. Also JSP technology allows to create custom tags.
       </dd> 
       <dd>
        Using the JSP technology correctly, business logic computations should not be in the embedded Java part of the JSP. JSP should be used to render the presentation of the static and dynamic data. Depending on the complexity of the data, 100% separation is not easy to achieve. Using custom tags, however may help to get closer to 100%. This is advocated also in 
        <a href="https://en.wikipedia.org/wiki/Model-view-controller" class="extiw" title="w:Model-view-controller">MVC</a> architecture (see below).
       </dd> 
      </dl> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:302px;">
        <a href="/wiki/File:Java_ejb_appl.jpg" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Java_ejb_appl.jpg/300px-Java_ejb_appl.jpg" width="300" height="181" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a2/Java_ejb_appl.jpg/450px-Java_ejb_appl.jpg 1.5x, //upload.wikimedia.org/wikipedia/commons/a/a2/Java_ejb_appl.jpg 2x" data-file-width="592" data-file-height="358"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:Java_ejb_appl.jpg" class="internal" title="Enlarge"></a>
         </div> Figure 5: EJB Execution
        </div> 
       </div> 
      </div> 
      <dl> 
       <dt>
        EJB code&nbsp;
       </dt> 
       <dd>
        (Figure 5) In the 1990s, with the client server computing, a trend started, that is to move away from Mainframe computing. That resulted in many small separate applications in a Company/Enterprise. Many times the same data was used in different applications. A new philosophy, "Enterprise Computing", was created to address these issues. The idea was to create components that can be reused throughout the Enterprise. The Enterprise Java Beans (EJBs) were supposed to address this.
       </dd> 
       <dd>
        An 
        <b>EJB</b> is an application component that runs in an EJB container. The client accesses the EJB modules through the container, never directly. The container manages the life cycle of the EJB modules, and handles all the issues that arise from network/enterpise computing. Some of those are 
        <a href="https://en.wikipedia.org/wiki/Access_control" class="extiw" title="w:Access control">security/access control</a>, 
        <a href="https://en.wikipedia.org/wiki/Object_pool" class="extiw" title="w:Object pool">object pooling</a>, 
        <a href="https://en.wikipedia.org/wiki/Transaction_processing" class="extiw" title="w:Transaction processing">transaction management</a>, ... .
       </dd> 
       <dd>
        EJBs have the same problems as any reusable code: they need to be generic enough to be able to be reused and the changes or maintenance of EJBs can affect existing clients. Many times EJBs are used unnecessarily when they are not really needed. An EJB should be designed as a separate application in the enterprise, fulfilling one function.
       </dd> 
      </dl> 
      <p><br></p> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:352px;">
        <a href="/wiki/File:Java_mvc_appl.gif" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Java_mvc_appl.gif/350px-Java_mvc_appl.gif" width="350" height="213" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Java_mvc_appl.gif/525px-Java_mvc_appl.gif 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/0/0d/Java_mvc_appl.gif/700px-Java_mvc_appl.gif 2x" data-file-width="753" data-file-height="459"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:Java_mvc_appl.gif" class="internal" title="Enlarge"></a>
         </div> Figure 6: MVC Execution
        </div> 
       </div> 
      </div> 
      <dl> 
       <dt>
        Combine J2EE components to create an MVC architecture&nbsp;
       </dt> 
       <dd>
        This leads us to the three layers/tiers as shown in (Figure 6).
       </dd> 
       <dd>
        In modern web applications, with lots of static data and nice graphics, how the data is presented to the user became very important and usually needs the help of a graphic artist.
       </dd> 
       <dd>
        To help programmers and graphic artists to work together, the separation between data, code, and how it is presented became crucial.
       </dd> 
       <dd> 
        <ul> 
         <li>The <b>view</b> (User Interface Logic) contains the logic that is necessary to construct the presentation. This could be handled by JSP technology.</li> 
         <li>The servlet acts as the <b>controller</b> and contains the logic that is necessary to process user events and to select an appropriate response.</li> 
         <li>The business logic (<b>model</b>) actually accomplishes the goal of the interaction. This might be a query or an update to a database. This could be handled by EJB technology.</li> 
        </ul> 
       </dd> 
       <dd>
        For more information about MVC, please see 
        <a href="https://en.wikipedia.org/wiki/Model-view-controller" class="extiw" title="w:Model-view-controller">MVC</a>.
       </dd> 
      </dl> 
      <h2><span class="mw-headline" id="Jini">Jini</span></h2> 
      <p>After J2EE Sun had a vision about the next step of network computing. That is <a href="https://en.wikipedia.org/wiki/Jini" class="extiw" title="w:Jini">Jini</a>. The main idea is that in a network environment, there would be many independent services and consumers. Jini would allow these services/consumers to interact dynamically with each other in a robust way. The basic features of Jini are:</p> 
      <ul> 
       <li><b>No user intervention</b> is needed when services are brought on or offline. (In contrast to EJBs where the client program has to know the server and port number where the EJB is deployed, in Jini the client is <i>supposed to find</i>, to discover, the service in the network.)</li> 
       <li><b>Self healing</b> by adapting when services (consumers of services) come and go. (Services periodically need to renew a lease to indicate that they are still available.)</li> 
       <li>Consumers of JINI services do not need prior knowledge of the service's implementation. The <b>implementation is downloaded dynamically</b> and run on the consumer JVM, without configuration and user intervention. (For example, the end user may be presented with a slightly different user interface depending upon which service is being used at the time. The implementation of the user interface code would be provided by the service being used.)</li> 
      </ul> 
      <p>A minimal Jini network environment consists of:</p> 
      <ul> 
       <li>One or more <b>services</b></li> 
       <li>A <b>lookup-service</b> keeping a list of registered services</li> 
       <li>One or more <b>consumers</b></li> 
      </ul> 
      <p>Jini is not widely used at the current writing (2006). There are two possible reasons for it. One is Jini a bit complicated to understand and to set it up. The other reason is that Microsoft pulled out from Java, which caused the industry to turn to the use of proprietary solutions.</p> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Understanding_a_Java_Program">Understanding a Java Program</span></h1> 
      <p>This article presents a small Java program which can be run from the console. It computes the distance between two points on a plane. You do not need to understand the structure and meaning of the program just yet; we will get to that soon. Also, because the program is intended as a simple introduction, it has some room for improvement, and later in the module we will show some of these improvements. But let's not get too far ahead of ourselves!</p> 
      <h2><span id="The_Distance_Class:_Intent,_Source,_and_Use"></span><span class="mw-headline" id="The_Distance_Class:_Intent.2C_Source.2C_and_Use">The Distance Class: Intent, Source, and Use</span></h2> 
      <p>This class is named <i>Distance</i>, so using your favorite editor or <a href="/wiki/Java_Programming/Java_IDEs" title="Java Programming/Java IDEs">Java IDE</a>, first create a file named <code>Distance.java</code>, then copy the source below, paste it into the file and save the file.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-1"><b>Code listing 2.1: Distance.java</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno"> 1 </span> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">Distance</span> <span class="o">{</span>
<span class="lineno"> 2 </span>   <span class="kd">private</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span> <span class="n">point0</span><span class="o">,</span> <span class="n">point1</span><span class="o">;</span>
<span class="lineno"> 3 </span> 
<span class="lineno"> 4 </span>   <span class="kd">public</span> <span class="nf">Distance</span><span class="o">(</span><span class="kt">int</span> <span class="n">x0</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y0</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y1</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 5 </span>     <span class="n">point0</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span><span class="o">(</span><span class="n">x0</span><span class="o">,</span> <span class="n">y0</span><span class="o">);</span>
<span class="lineno"> 6 </span>     <span class="n">point1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span><span class="o">(</span><span class="n">x1</span><span class="o">,</span> <span class="n">y1</span><span class="o">);</span>
<span class="lineno"> 7 </span>   <span class="o">}</span>
<span class="lineno"> 8 </span> 
<span class="lineno"> 9 </span>   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printDistance</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">10 </span>     <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Distance between "</span> <span class="o">+</span> <span class="n">point0</span> <span class="o">+</span> <span class="s">" and "</span> <span class="o">+</span> <span class="n">point1</span>
<span class="lineno">11 </span>                     <span class="o">+</span> <span class="s">" is "</span> <span class="o">+</span> <span class="n">point0</span><span class="o">.</span><span class="na">distance</span><span class="o">(</span><span class="n">point1</span><span class="o">));</span>
<span class="lineno">12 </span>   <span class="o">}</span>
<span class="lineno">13 </span> 
<span class="lineno">14 </span>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">15 </span>     <span class="n">Distance</span> <span class="n">dist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Distance</span><span class="o">(</span>
<span class="lineno">16 </span>              <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]),</span> <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]),</span>
<span class="lineno">17 </span>              <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]),</span> <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">3</span><span class="o">]));</span>
<span class="lineno">18 </span>     <span class="n">dist</span><span class="o">.</span><span class="na">printDistance</span><span class="o">();</span>
<span class="lineno">19 </span>   <span class="o">}</span>
<span class="lineno">20 </span> 
<span class="lineno">21 </span>   <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">intValue</span><span class="o">(</span><span class="n">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">22 </span>     <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
<span class="lineno">23 </span>   <span class="o">}</span>
<span class="lineno">24 </span> <span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>At this point, you may wish to review the source to see how much you might be able to understand. While perhaps not being the most literate of programming languages, someone with understanding of other procedural languages such as C, or other object oriented languages such as C++ or C#, will be able to understand most if not all of the sample program.</p> 
      <p>Once you save the file, <a href="/wiki/Java_Programming/Compilation" title="Java Programming/Compilation">compile</a> the program:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Compilation command</b> <pre style="background-color:#000; color:#fff;">
$ javac Distance.java
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <p>(If the <code>javac</code> command fails, review the <a href="/wiki/Java_Programming/Installation" title="Java Programming/Installation">installation instructions</a>.)</p> 
      <p>To run the program, you supply it with the <i>x</i> and <i>y</i> coordinates of two points on a plane separated by a space. For this version of Distance, only integer points are supported. The command sequence is <i><code>java Distance &lt;x<sub>0</sub>&gt; &lt;y<sub>0</sub>&gt; &lt;x<sub>1</sub>&gt; &lt;y<sub>1</sub>&gt;</code></i> to compute the distance between the points (<i>x<sub>0</sub>, y<sub>0</sub></i>) and (<i>x<sub>1</sub>, y<sub>1</sub></i>).</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Nuvola_apps_important.svg" class="image" title="Warning"><img alt="Warning" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/32px-Nuvola_apps_important.svg.png" width="32" height="27" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/48px-Nuvola_apps_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/64px-Nuvola_apps_important.svg.png 2x" data-file-width="600" data-file-height="500"></a></td> 
         <td style="background-color:#fff0f0; border-left: 4px solid red; padding-left: 6px;">If you get a <code>java.lang.NumberFormatException</code> exception, some arguments are not a number. If you get a <code>java.lang.ArrayIndexOutOfBoundsException</code> exception, you did not provide enough numbers.</td> 
        </tr> 
       </tbody>
      </table> 
      <p>Here are two examples:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for the distance between the points (0, 3) and (4, 0)</b> <pre style="background-color:#000; color:#fff;">
$ java Distance 0 3 4 0
Distance between java.awt.Point[x=0,y=3] and java.awt.Point[x=4,y=0] is 5.0
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for the distance between the points (-4, 5) and (11, 19)</b> <pre style="background-color:#000; color:#fff;">
$ java Distance -4 5 11 19
Distance between java.awt.Point[x=-4,y=5] and java.awt.Point[x=11,y=19] is 20.518284528683193
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <p>We'll explain this strange looking output, and also show how to improve it, later.</p> 
      <h2><span class="mw-headline" id="Detailed_Program_Structure_and_Overview">Detailed Program Structure and Overview</span></h2> 
      <p>As promised, we will now provide a detailed description of this Java program. We will discuss the syntax and structure of the program and the meaning of that structure.</p> 
      <h3><span class="mw-headline" id="Introduction_to_Java_Syntax">Introduction to Java Syntax</span></h3> 
      <table> 
       <tbody>
        <tr> 
         <td> <pre>
<span style="color: purple"><b>public</b></span> <span style="color: purple"><b>class</b></span> <span style="color: grey">Distance</span> {
   <span style="color: purple"><b>private</b></span> java.awt.<span style="color: grey">Point</span> <span style="color: grey">point0</span>, <span style="color: grey">point1</span>;

   <span style="color: purple"><b>public</b></span> <span style="color: grey">Distance</span>(<span style="color: purple"><b>int</b></span> <span style="color: grey">x0</span>, <span style="color: purple"><b>int</b></span> <span style="color: grey">y0</span>, <span style="color: purple"><b>int</b></span> <span style="color: grey">x1</span>, <span style="color: purple"><b>int</b></span> <span style="color: grey">y1</span>) {
     <span style="color: grey">point0</span> = <span style="color: purple"><b>new</b></span> java.awt.<span style="color: grey">Point</span>(<span style="color: grey">x0</span>, <span style="color: grey">y0</span>);
     <span style="color: grey">point1</span> = <span style="color: purple"><b>new</b></span> java.awt.<span style="color: grey">Point</span>(<span style="color: grey">x1</span>, <span style="color: grey">y1</span>);
   }

   <span style="color: purple"><b>public</b></span> <span style="color: purple"><b>void</b></span> <span style="color: grey">printDistance</span>() {
     <span style="color: grey">System</span>.<span style="color: grey">out</span>.<span style="color: grey">println</span>(<span style="color: blue">"Distance between "</span> <span style="color: red">+</span> <span style="color: grey">point0</span> <span style="color: red">+</span> <span style="color: blue">" and "</span> <span style="color: red">+</span> <span style="color: grey">point1</span>
                     <span style="color: red">+</span> <span style="color: blue">" is "</span> <span style="color: red">+</span> <span style="color: grey">point0</span>.<span style="color: grey">distance</span>(<span style="color: grey">point1</span>));
   }

   <span style="color: purple"><b>public</b></span> <span style="color: purple"><b>static</b></span> <span style="color: purple"><b>void</b></span> <span style="color: grey">main</span>(<span style="color: grey">String</span>[] <span style="color: grey">args</span>) {
     <span style="color: grey">Distance</span> <span style="color: grey">dist</span> = <span style="color: purple"><b>new</b></span> <span style="color: grey">Distance</span>(
              <span style="color: grey">intValue</span>(<span style="color: grey">args</span>[<span style="color: orange">0</span>]), <span style="color: grey">intValue</span>(<span style="color: grey">args</span>[<span style="color: orange">1</span>]),
              <span style="color: grey">intValue</span>(<span style="color: grey">args</span>[<span style="color: orange">2</span>]), <span style="color: grey">intValue</span>(<span style="color: grey">args</span>[<span style="color: orange">3</span>]));
     <span style="color: grey">dist.<span style="color: grey">printDistance(); } <span style="color: purple"><b>private</b></span> <span style="color: purple"><b>static</b></span> <span style="color: purple"><b>int</b></span> <span style="color: grey">intValue</span>(<span style="color: grey">String</span> <span style="color: grey">data</span>) { <span style="color: purple"><b>return</b></span> <span style="color: grey">Integer</span>.<span style="color: grey">parseInt</span>(<span style="color: grey">data</span>); } } </span></span>
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <dl> 
       <dd>
        <span id="figure-1">Figure 2.1</span>: Basic Java syntax. 
        <dl> 
         <dd>
          <i>For a further treatment of the syntax elements of Java, see also <a href="/wiki/Java_Programming/Syntax" class="mw-redirect" title="Java Programming/Syntax">Syntax</a>.</i>
         </dd> 
        </dl> 
       </dd> 
      </dl> 
      <p>The <i>syntax</i> of a Java class is the characters, symbols and their structure used to code the class. Java programs consist of a sequence of tokens. There are different kinds of tokens. For example, there are word tokens such as <code><a href="/wiki/Java_Programming/Keywords/class" title="Java Programming/Keywords/class"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">class</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/public" title="Java Programming/Keywords/public"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">public</font></a></code> which represent <i><a href="/wiki/Java_Programming/Keywords" title="Java Programming/Keywords"><span style="color: purple"><b>keywords</b></span></a></i> <span style="color: purple"><b>(in purple</b></span> <a href="#figure-1"><span style="color: purple"><b>above</b></span></a><span style="color: purple"><b>)</b></span> — special words with reserved meaning in Java. Other words such as <code>Distance</code>, <code>point0</code>, <code>x1</code>, and <code>printDistance</code> are not keywords but <span style="color: grey"><i>identifiers</i> (in grey)</span>. Identifiers have many different uses in Java but primarily they are used as names. Java also has tokens to represent numbers, such as <code>1</code> and <code>3</code>; these are known as <i><a href="/wiki/Java_Programming/Literals" title="Java Programming/Literals"><span style="color: orange">literals</span></a></i> <span style="color: orange">(in orange)</span>. <i><a href="/wiki/Java_Programming/Literals/String_Literals" class="mw-redirect" title="Java Programming/Literals/String Literals"><span style="color: blue">String literals</span></a></i> <span style="color: blue">(in blue)</span>, such as <code>"Distance between "</code>, consist of zero or more characters embedded in double quotes, and <i><a href="/wiki/Java_Programming/Operators" class="mw-redirect" title="Java Programming/Operators"><span style="color: red">operators</span></a></i> <span style="color: red">(in red)</span> such as <code>+</code> and <code>=</code> are used to express basic computation such as addition or String concatenation or assignment. There are also left and right braces (<code>{</code> and <code>}</code>) which enclose <i>blocks</i>. The body of a class is one such block. Some tokens are punctuation, such as periods <code>.</code> and commas <code>,</code> and semicolons <code>;</code>. You use <i>whitespace</i> such as spaces, tabs, and newlines, to separate tokens. For example, whitespace is required between keywords and identifiers: <code>publicstatic</code> is a single identifier with twelve characters, not two Java keywords.</p> 
      <h3><span class="mw-headline" id="Declarations_and_Definitions">Declarations and Definitions</span></h3> 
      <div style="border: blue solid 3px; background-color: #ccf"> 
       <p><code>public class Distance {</code></p> 
       <div style="border: green solid 3px; background-color: #cfc"> 
        <p><code>&nbsp;&nbsp;private java.awt.Point point0, point1;</code></p> 
       </div> 
       <p><br></p> 
       <div style="border: orange solid 3px; background-color: #fdc"> 
        <p><code>&nbsp;&nbsp;public Distance(int x0, int y0, int x1, int y1) {</code><br> <code>&nbsp;&nbsp;&nbsp;&nbsp;point0 = new java.awt.Point(x0, y0);</code><br> <code>&nbsp;&nbsp;&nbsp;&nbsp;point1 = new java.awt.Point(x1, y1);</code><br> <code>&nbsp;&nbsp;}</code></p> 
       </div> 
       <p><br></p> 
       <div style="border: red solid 3px; background-color: #fcc"> 
        <p><code>&nbsp;&nbsp;public void printDistance() {</code><br> <code>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println("Distance between " + point0 + " and " + point1</code><br> <code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ " is " + point0.distance(point1));</code><br> <code>&nbsp;&nbsp;}</code></p> 
       </div> 
       <p><br></p> 
       <div style="border: red solid 3px; background-color: #fcc"> 
        <p><code>&nbsp;&nbsp;public static void main(String[] args) {</code><br> <code>&nbsp;&nbsp;&nbsp;&nbsp;Distance dist = new Distance(</code><br> <code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intValue(args[0]), intValue(args[1]),</code><br> <code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intValue(args[2]), intValue(args[3]));</code><br> <code>&nbsp;&nbsp;&nbsp;&nbsp;dist.printDistance();</code><br> <code>&nbsp;&nbsp;}</code></p> 
       </div> 
       <p><br></p> 
       <div style="border: red solid 3px; background-color: #fcc"> 
        <p><code>&nbsp;&nbsp;private static int intValue(String data) {</code><br> <code>&nbsp;&nbsp;&nbsp;&nbsp;return Integer.parseInt(data);</code><br> <code>&nbsp;&nbsp;}</code></p> 
       </div> 
       <p><br> <code>}</code></p> 
      </div> 
      <dl> 
       <dd>
        <span id="figure-2">Figure 2.2</span>: Declarations and Definitions.
       </dd> 
      </dl> 
      <p>Sequences of tokens are used to construct the next building blocks of Java classes as shown <a href="#figure-2">above</a>: declarations and definitions. A class declaration provides the name and visibility of a class. In our example, <code>public class Distance</code> is the class declaration. It consists (in this case) of two keywords, <code><a href="/wiki/Java_Programming/Keywords/public" title="Java Programming/Keywords/public"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">public</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/class" title="Java Programming/Keywords/class"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">class</font></a></code> followed by the identifier <code>Distance</code>.</p> 
      <p>This means that we are defining a class named <code>Distance</code>. Other classes, or in our case, the command line, can refer to the class by this name. The <code>public</code> keyword is an <a href="/wiki/Java_Programming/Scope" title="Java Programming/Scope">access modifier</a> which declares that this class and its members may be accessed from other classes. The <code>class</code> keyword, obviously, identifies this declaration as a class. Java also allows declarations of <i><a href="/wiki/Java_Programming/Interfaces" title="Java Programming/Interfaces">interfaces</a></i> and <i><a href="/wiki/Java_Programming/Annotations" title="Java Programming/Annotations">annotations</a></i>.</p> 
      <p>The class declaration is then followed by a block (surrounded by curly braces) which provides the class's definition <span style="color: blue">(in blue in <a href="#figure-2">figure 2.2</a>)</span>. The definition is the implementation of the class – the declaration and definitions of the class's members. This class contains exactly six members, which we will explain in turn.</p> 
      <ol> 
       <li>Two field declarations, named <code>point0</code> and <code>point1</code> <span style="color: green">(in green)</span></li> 
       <li>A constructor declaration <span style="color: orange">(in orange)</span></li> 
       <li>Three method declarations <span style="color: red">(in red)</span></li> 
      </ol> 
      <h4><span class="mw-headline" id="Example:_Instance_Fields">Example: Instance Fields</span></h4> 
      <p>The declaration</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.1: Declaration.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span> <span class="n">point0</span><span class="o">,</span> <span class="n">point1</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>...declares two <i>instance fields</i>. Instance fields represent named values that are allocated whenever an instance of the class is constructed. When a Java program creates a <code>Distance</code> instance, that instance will contain space for <code>point0</code> and <code>point1</code>. When another <code>Distance</code> object is created, it will contain space for its <i>own</i> <code>point0</code> and <code>point1</code> values. The value of <code>point0</code> in the first <code>Distance</code> object can vary independently of the value of <code>point0</code> in the second <code>Distance</code> object.</p> 
      <p>This declaration consists of:</p> 
      <ol> 
       <li>The <code><a href="/wiki/Java_Programming/Keywords/private" title="Java Programming/Keywords/private">private</a></code> access modifier,<br> which means these instance fields are not visible to other classes.</li> 
       <li>The type of the instance fields. In this case, the type is <code>java.awt.Point</code>.<br> This is the class <code>Point</code> in the <code>java.awt</code> package.</li> 
       <li>The names of the instance fields in a comma separated list.</li> 
      </ol> 
      <p><br> These two fields could also have been declared with two separate but more verbose declarations,</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.2: Verbose declarations.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span> <span class="kd">private</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span> <span class="n">point0</span><span class="o">;</span>
<span class="lineno">2 </span> <span class="kd">private</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span> <span class="n">point1</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Since the type of these fields is a reference type (i.e. a field that <i>refers to</i> or can hold a <i>reference to</i> an object value), Java will implicitly initialize the values of <code>point0</code> and <code>point1</code> to null when a <code>Distance</code> instance is created. The null value means that a reference value does not refer to an object. The special Java literal <code><a href="/wiki/Java_Programming/Literals/null" class="mw-redirect" title="Java Programming/Literals/null"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">null</font></a></code> is used to represent the null value in a program. While you can explicitly assign null values in a declaration, as in</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.3: Declarations and assignments.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span> <span class="kd">private</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span> <span class="n">point0</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="lineno">2 </span> <span class="kd">private</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span> <span class="n">point1</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>It is not necessary and most programmers omit such default assignments.</p> 
      <h4><span class="mw-headline" id="Example:_Constructor">Example: Constructor</span></h4> 
      <p>A <i><a href="/wiki/Java_Programming/Methods#Special_method.2C_the_constructor" title="Java Programming/Methods">constructor</a></i> is a special method in a class which is used to construct an instance of the class. The constructor can perform initialization for the object, beyond that which the Java VM does automatically. For example, Java will automatically initialize the fields <code>point0</code> and <code>point1</code> to null.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.4: The constructor for the class</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="nf">Distance</span><span class="o">(</span><span class="kt">int</span> <span class="n">x0</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y0</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y1</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>   <span class="n">point0</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span><span class="o">(</span><span class="n">x0</span><span class="o">,</span> <span class="n">y0</span><span class="o">);</span>
<span class="lineno">3 </span>   <span class="n">point1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span><span class="o">(</span><span class="n">x1</span><span class="o">,</span> <span class="n">y1</span><span class="o">);</span>
<span class="lineno">4 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The constructor above consists of five parts:</p> 
      <ol> 
       <li>The optional <a href="/wiki/Java_Programming/Scope" title="Java Programming/Scope">access modifier(s)</a>.<br> In this case, the constructor is declared <code>public</code></li> 
       <li>The constructor name, which must match the class name exactly: <code>Distance</code> in this case.</li> 
       <li>The constructor parameters.<br> The parameter list is required. Even if a constructor does not have any parameters, you must specify the empty list <code>()</code>. The parameter list declares the type and name of each of the method's parameters.</li> 
       <li>An optional <code><a href="/wiki/Java_Programming/Keywords/throws" title="Java Programming/Keywords/throws"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">throws</font></a></code> clause which declares the <a href="/wiki/Java_Programming/Exceptions" title="Java Programming/Exceptions">exceptions</a> that the constructor may throw. This constructor does not declare any exceptions.</li> 
       <li>The constructor body, which is a Java block (enclosed in <code>{}</code>). This constructor's body contains two statements.</li> 
      </ol> 
      <p>This constructor accepts four parameters, named <code>x0, y0, x1</code> and <code>y1</code>. Each parameter requires a parameter type declaration, which in this example is <code><code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code></code> for all four parameters. The parameters in the parameter list are separated by commas.</p> 
      <p>The two assignments in this constructor use Java's <i><code><a href="/wiki/Java_Programming/Keywords/new" title="Java Programming/Keywords/new"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">new</font></a></code> operator</i> to allocate two <code>java.awt.Point</code> objects. The first allocates an object representing the first point, <code>(x0, y0)</code>, and assigns it to the <code>point0</code> instance variable (replacing the null value that the instance variable was initialized to). The second statement allocates a second <code>java.awt.Point</code> instance with <code>(x1, y1)</code> and assigns it to the <code>point1</code> instance variable.</p> 
      <p>This is the constructor for the Distance class. Distance implicitly extends from <code>java.lang.Object</code>. Java inserts a call to the super constructor as the first executable statement of the constructor if there is not one explicitly coded. The above constructor body is equivalent to the following body with the explicit super constructor call:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.5: Super constructor.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="o">{</span>
<span class="lineno">2 </span>   <span class="kd">super</span><span class="o">();</span>
<span class="lineno">3 </span>   <span class="n">point0</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span><span class="o">(</span><span class="n">x0</span><span class="o">,</span> <span class="n">y0</span><span class="o">);</span>
<span class="lineno">4 </span>   <span class="n">point1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">awt</span><span class="o">.</span><span class="na">Point</span><span class="o">(</span><span class="n">x1</span><span class="o">,</span> <span class="n">y1</span><span class="o">);</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>While it is true that this class could be implemented in other ways, such as simply storing the coordinates of the two points and computing the distance as <span class="mwe-math-element"><span class="mwe-math-mathml-inline mwe-math-mathml-a11y" style="display: none;">
         <math xmlns="http://www.w3.org/1998/Math/MathML"> 
          <semantics> 
           <mrow class="MJX-TeXAtom-ORD"> 
            <mstyle displaystyle="true" scriptlevel="0"> 
             <mrow class="MJX-TeXAtom-ORD"> 
              <msqrt> 
               <mo stretchy="false">
                (
               </mo> 
               <msub> 
                <mi>
                 x
                </mi> 
                <mrow class="MJX-TeXAtom-ORD"> 
                 <mn>
                  1
                 </mn> 
                </mrow> 
               </msub> 
               <mo>
                ?
                <!-- ? -->
               </mo> 
               <msub> 
                <mi>
                 x
                </mi> 
                <mrow class="MJX-TeXAtom-ORD"> 
                 <mn>
                  0
                 </mn> 
                </mrow> 
               </msub> 
               <msup> 
                <mo stretchy="false">
                 )
                </mo> 
                <mrow class="MJX-TeXAtom-ORD"> 
                 <mn>
                  2
                 </mn> 
                </mrow> 
               </msup> 
               <mo>
                +
               </mo> 
               <mo stretchy="false">
                (
               </mo> 
               <msub> 
                <mi>
                 y
                </mi> 
                <mrow class="MJX-TeXAtom-ORD"> 
                 <mn>
                  1
                 </mn> 
                </mrow> 
               </msub> 
               <mo>
                ?
                <!-- ? -->
               </mo> 
               <msub> 
                <mi>
                 y
                </mi> 
                <mrow class="MJX-TeXAtom-ORD"> 
                 <mn>
                  0
                 </mn> 
                </mrow> 
               </msub> 
               <msup> 
                <mo stretchy="false">
                 )
                </mo> 
                <mrow class="MJX-TeXAtom-ORD"> 
                 <mn>
                  2
                 </mn> 
                </mrow> 
               </msup> 
              </msqrt> 
             </mrow> 
            </mstyle> 
           </mrow> 
           <annotation encoding="application/x-tex">
            {\displaystyle {\sqrt {(x_{1}-x_{0})^{2}+(y_{1}-y_{0})^{2}}}}
           </annotation> 
          </semantics> 
         </math></span><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/c9f444d0ba1305414b35123df9f0529466f5ab63" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align: -1.671ex; width:25.897ex; height:4.843ex;" alt="{\sqrt  {(x_{1}-x_{0})^{2}+(y_{1}-y_{0})^{2}}}"></span>, this class instead uses the existing <code>java.awt.Point</code> class. This choice matches the abstract definition of this class: to print the distance between two points on the plane. We take advantage of existing behavior already implemented in the Java platform rather than implementing it again. We will see later how to make the program more flexible without adding much complexity, because we choose to use object abstractions here. However, the key point is that this class uses information hiding. That is, <i>how</i> the class stores its state or how it computes the distance is hidden. We can change this implementation without altering how clients use and invoke the class.</p> 
      <h4><span class="mw-headline" id="Example:_Methods">Example: Methods</span></h4> 
      <p><a href="/wiki/Java_Programming/Methods" title="Java Programming/Methods">Methods</a> are the third and most important type of class member. This class contains three <i>methods</i> in which the behavior of the <code>Distance</code> class is defined: <code>printDistance()</code>, <code>main()</code>, and <code>intValue()</code></p> 
      <h4><span id="The_printDistance()_method"></span><span class="mw-headline" id="The_printDistance.28.29_method">The printDistance() method</span></h4> 
      <p>The <code>printDistance()</code> method prints the distance between the two points to the standard output (normally the console).</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.6: <code>printDistance()</code> method.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">printDistance</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Distance between "</span> <span class="o">+</span> <span class="n">point0</span>
<span class="lineno">3 </span>    <span class="o">+</span> <span class="s">" and "</span> <span class="o">+</span> <span class="n">point1</span>
<span class="lineno">4 </span>    <span class="o">+</span> <span class="s">" is "</span> <span class="o">+</span> <span class="n">point0</span><span class="o">.</span><span class="na">distance</span><span class="o">(</span><span class="n">point1</span><span class="o">));</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>This <i>instance method</i> executes within the context of an implicit <code>Distance</code> object. The instance field references, <code>point0</code> and <code>point1</code>, refer to instance fields of that implicit object. You can also use the special variable <code>this</code> to explicitly reference the current object. Within an instance method, Java binds the name <code>this</code> to the object on which the method is executing, and the type of <code>this</code> is that of the current class. The body of the <code>printDistance</code> method could also be coded as</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.7: Explicit instance of the current class.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Distance between "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">point0</span>
<span class="lineno">2 </span>    <span class="o">+</span> <span class="s">" and "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">point1</span>
<span class="lineno">3 </span>    <span class="o">+</span> <span class="s">" is "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">point0</span><span class="o">.</span><span class="na">distance</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">point1</span><span class="o">));</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>to make the instance field references more explicit.</p> 
      <p>This method both computes the distance and prints it in one statement. The distance is computed with <code>point0.distance(point1)</code>; <code>distance()</code> is an instance method of the <code>java.awt.Point</code> class (of which <code>point0</code> and <code>point1</code> are instances). The method operates on <code>point0</code> (binding <code>this</code> to the object that <code>point0</code> refers to during the execution of the method) and accepting another Point as a parameter. Actually, it is slightly more complicated than that, but we'll explain later. The result of the <code>distance()</code> method is a double precision floating point number.</p> 
      <p>This method uses the syntax</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.8: String concatenation.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span> <span class="s">"Distance between "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">point0</span>
<span class="lineno">2 </span> <span class="o">+</span> <span class="s">" and "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">point1</span>
<span class="lineno">3 </span> <span class="o">+</span> <span class="s">" is "</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">point0</span><span class="o">.</span><span class="na">distance</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">point1</span><span class="o">)</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>to construct a String to pass to the <code>System.out.println()</code>. This expression is a series of <i>String concatenation</i> methods which concatenates Strings or the String representation of primitive types (such as doubles) or objects, and returns a long string. For example, the result of this expression for the points (0,3) and (4,0) is the String</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output</b> <pre style="background-color:#000; color:#fff;">
"Distance between java.awt.Point[x=0,y=3] and java.awt.Point[x=4,y=0] is 5.0"
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <p>which the method then prints to <code>System.out</code>.</p> 
      <p>In order to print, we invoke the <code>println()</code>. This is an instance method from <code>java.io.PrintStream</code>, which is the type of the static field <code>out</code> in the class <code>java.lang.System</code>. The Java VM binds <code>System.out</code> to the standard output stream when it starts a program.</p> 
      <h4><span id="The_main()_method"></span><span class="mw-headline" id="The_main.28.29_method">The main() method</span></h4> 
      <p>The <code>main()</code> method is the main entry point which Java invokes when you start a Java program from the command line. The command</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output</b> <pre style="background-color:#000; color:#fff;">
java Distance 0 3 4 0
</pre></td> 
        </tr> 
       </tbody>
      </table> 
      <p>instructs Java to locate the Distance class, put the four command line arguments into an array of String values, then pass those arguments to the <code>public static main(String[])</code> method of the class. We will introduce arrays shortly. Any Java class that you want to invoke from the command line or desktop shortcut must have a main method with this signature or the following signature: <code>public static main(String...)</code>.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.9: <code>main()</code> method.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>   <span class="n">Distance</span> <span class="n">dist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Distance</span><span class="o">(</span>
<span class="lineno">3 </span>         <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]),</span> <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]),</span>
<span class="lineno">4 </span>         <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]),</span> <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">3</span><span class="o">]));</span>
<span class="lineno">5 </span>   <span class="n">dist</span><span class="o">.</span><span class="na">printDistance</span><span class="o">();</span>
<span class="lineno">6 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <code>main()</code> method invokes the final method, <code>intValue()</code>, four times. The <code>intValue()</code> takes a single string parameter and returns the integer value represented in the string. For example, <code>intValue("3")</code> will return the integer 3.</p> 
      <p>People who do test-first programming or perform regression testing write a main() method in every Java class, and a <a href="/wiki/Python_Programming/Modules_and_how_to_use_them" class="mw-redirect" title="Python Programming/Modules and how to use them">main() function in every Python module</a>, to run automated tests. When a person executes the file directly, the main() method executes and runs the automated tests for that file. When a person executes some other Java file that in turn imports many other Java classes, only one main() method is executed -- the main() method of the directly-executed file.</p> 
      <h4><span id="The_intValue()_method"></span><span class="mw-headline" id="The_intValue.28.29_method">The <code>intValue()</code> method</span></h4> 
      <p>The <code>intValue()</code> method delegates its job to the <code>Integer.parseInt()</code> method. The main method could have called <code>Integer.parseInt()</code> directly; the <code>intValue()</code> method simply makes the <code>main()</code> method slightly more readable.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.10: <code>intValue()</code> method.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">intValue</span><span class="o">(</span><span class="n">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>   <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
<span class="lineno">3 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>This method is <code><a href="/wiki/Java_Programming/Keywords/private" title="Java Programming/Keywords/private"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">private</font></a></code> since, like the fields <code>point0</code> and <code>point1</code>, it is part of the internal implementation of the class and is not part of the external programming interface of the <code>Distance</code> class.</p> 
      <h4><span class="mw-headline" id="Static_vs._Instance_Methods">Static vs. Instance Methods</span></h4> 
      <p>Both the <code>main()</code> and <code>intValue()</code> methods are <i>static methods</i>. The <code><a href="/wiki/Java_Programming/Keywords/static" title="Java Programming/Keywords/static"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">static</font></a></code> keyword tells the compiler to create a single memory space associated with the class. Each individual object instantiated has its own private state variables and methods but use the same <b>static</b> methods and members common to the single class object created by the compiler when the first class object is instantiated or created. This means that the method executes in a static or non-object context — there is no implicit separate instance available when the static methods run from various objects, and the special variable <code>this</code> is not available. As such, static methods cannot access instance methods or instance fields (such as <code>printDistance()</code>) or <code>point0</code>) directly. The <code>main()</code> method can only invoke the instance method <code>printDistance()</code> method via an instance reference such as <code>dist</code>.</p> 
      <h3><span class="mw-headline" id="Data_Types">Data Types</span></h3> 
      <p>Most declarations have a data type. Java has several categories of data types: reference types, primitive types, array types, and a special type, void.</p> 
      <h4><span class="mw-headline" id="Primitive_Types">Primitive Types</span></h4> 
      <p>The <i><a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">primitive types</a></i> are used to represent boolean, character, and numeric values. This program uses only one primitive type explicitly, <code><i><code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code></i></code>, which represents 32 bit signed integer values. The program also implicitly uses <code><i><code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code></i></code>, which is the return type of the <code>distance()</code> method of <code>java.awt.Point</code>. <code>double</code> values are 64 bit IEEE floating point values. The <code>main()</code> method uses integer values 0, 1, 2, and 3 to access elements of the command line arguments. The <code>Distance()</code> constructor's four parameters also have the type <code>int</code>. Also, the <code>intValue()</code> method has a return type of <code>int</code>. This means a call to that method, such as <code>intValue(args[0])</code>, is an expression of type <code>int</code>. This helps explain why the main method cannot call:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Nuvola_apps_important.svg" class="image" title="Warning"><img alt="Warning" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/32px-Nuvola_apps_important.svg.png" width="32" height="27" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/48px-Nuvola_apps_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/64px-Nuvola_apps_important.svg.png 2x" data-file-width="600" data-file-height="500"></a></td> 
         <td style="background-color:#fff0f0; border-left: 4px solid red; padding-left: 6px;"><span style="color: red;"><b>Code section 2.11: Wrong type.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="k">new</span> <span class="n">Distance</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">],</span> <span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">],</span> <span class="n">args</span><span class="o">[</span><span class="mi">3</span><span class="o">])</span> <span class="c1">// This is an error</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Since the type of the <code>args</code> array element is String, and our constructor's parameters must be <code>int</code>, such a call would result in an error because Java will not automatically convert values of type String into <code>int</code> values.</p> 
      <p>Java's primitive types are <code><i><code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code></i></code>, <code><i><code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code></i></code>, <code><i><code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code></i></code>, <code><i><code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code></i></code>, <code><i><code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code></i></code>, <code><i><code><a href="/wiki/Java_Programming/Keywords/long" title="Java Programming/Keywords/long"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">long</font></a></code></i></code>, <code><i><code><a href="/wiki/Java_Programming/Keywords/float" title="Java Programming/Keywords/float"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">float</font></a></code></i></code> and <code><i><code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code></i></code>. Each of which are also Java language keywords.</p> 
      <h4><span class="mw-headline" id="Reference_Types">Reference Types</span></h4> 
      <p>In addition to primitive types, Java supports <i>reference type</i>. A reference type is a Java data type which is defined by a Java class or interface. Reference types derive this name because such values <i>refer to</i> an object or contain a <i>reference to</i> an object. The idea is similar to pointers in other languages like C.</p> 
      <p>Java represents sequences of character data, or <i><a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a></i>, with the reference type <code>java.lang.String</code> which is most commonly referred to as <code>String</code>. <i>String literals</i>, such as <code>"Distance between "</code> are constants whose type is String.</p> 
      <p>This program uses three separate reference types:</p> 
      <ol> 
       <li>java.lang.String (or simply String)</li> 
       <li>Distance</li> 
       <li>java.awt.Point</li> 
      </ol> 
      <dl> 
       <dd>
        <i>For more information see chapter: <a href="/wiki/Java_Programming/Classes,_Objects_and_Types" title="Java Programming/Classes, Objects and Types">Java Programming/Classes, Objects and Types</a>.</i>
       </dd> 
      </dl> 
      <h4><span class="mw-headline" id="Array_Types">Array Types</span></h4> 
      <p>Java supports <i><a href="/wiki/Java_Programming/Arrays" title="Java Programming/Arrays">arrays</a></i>, which are aggregate types which have a fixed element type (which can be any Java type) and an integral size. This program uses only one array, <code>String[] args</code>. This indicates that <code>args</code> has an array type and that the element type is <code>String</code>. The Java VM constructs and initializes the array that is passed to the <code>main</code> method. See <i><a href="/wiki/Java_Programming/Arrays" title="Java Programming/Arrays">arrays</a></i> for more details on how to create arrays and access their size.</p> 
      <p>The elements of arrays are accessed with integer indices. The first element of an array is always element 0. This program accesses the first four elements of the <code>args</code> array explicitly with the indices 0, 1, 2, and 3. This program does <i>not</i> perform any input validation, such as verifying that the user passed at least four arguments to the program. We will fix that later.</p> 
      <h4><span class="mw-headline" id="void">void</span></h4> 
      <p><code><a href="/wiki/Java_Programming/Keywords/void" title="Java Programming/Keywords/void"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">void</font></a></code> is not a type in Java; it represents the absence of a type. Methods which do not return values are declared as <i>void methods</i>.</p> 
      <p>This class defines two void methods:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.12: Void methods</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="lineno">2 </span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">printDistance</span><span class="o">()</span>  <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Whitespace">Whitespace</span></h2> 
      <p>Whitespace in Java is used to separate the tokens in a Java source file. Whitespace is required in some places, such as between <a href="/wiki/Java_Programming/Scope" title="Java Programming/Scope">access modifiers</a>, <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">type names</a> and Identifiers, and is used to improve readability elsewhere.</p> 
      <p>Wherever whitespace is required in Java, one or more whitespace characters may be used. Wherever whitespace is optional in Java, zero or more whitespace characters may be used.</p> 
      <p>Java whitespace consists of the</p> 
      <ul> 
       <li>space character <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">' '</font></code> (0x20),</li> 
       <li>the tab character (hex 0x09),</li> 
       <li>the form feed character (hex 0x0c),</li> 
       <li>the line separators characters newline (hex 0x0a) or carriage return (hex 0x0d) characters.</li> 
      </ul> 
      <p>Line separators are special whitespace characters in that they also terminate line comments, whereas normal whitespace does not.</p> 
      <p>Other Unicode space characters, including vertical tab, are not allowed as whitespace in Java.</p> 
      <h3><span class="mw-headline" id="Required_Whitespace">Required Whitespace</span></h3> 
      <p>Look at the <code><a href="/wiki/Java_Programming/Keywords/static" title="Java Programming/Keywords/static"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">static</font></a></code> method <code>intValue</code>:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.13: Method declaration</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">intValue</span><span class="o">(</span><span class="n">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
<span class="lineno">3 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Whitespace is required between <code><a href="/wiki/Java_Programming/Keywords/private" title="Java Programming/Keywords/private"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">private</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/static" title="Java Programming/Keywords/static"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">static</font></a></code>, between <code><a href="/wiki/Java_Programming/Keywords/static" title="Java Programming/Keywords/static"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">static</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code>, between <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code> and <code>intValue</code>, and between <code>String</code> and <code>data</code>.</p> 
      <p>If the code is written like this:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.14: Collapsed code</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">privatestaticint</span> <span class="nf">intValue</span><span class="o">(</span><span class="n">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
<span class="lineno">3 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>...it means something completely different: it declares a method which has the return type <code>privatestaticint</code> It is unlikely that this type exists and the method is no longer static, so the above would result in a semantic error.</p> 
      <h2><span class="mw-headline" id="Indentation">Indentation</span></h2> 
      <p>Java ignores all whitespace in front of a statement. As this, these two code snippets are identical for the compiler:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.15: Indented code</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 2 </span>  <span class="n">Distance</span> <span class="n">dist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Distance</span><span class="o">(</span>
<span class="lineno"> 3 </span>           <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]),</span> <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]),</span>
<span class="lineno"> 4 </span>           <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]),</span> <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">3</span><span class="o">]));</span>
<span class="lineno"> 5 </span>  <span class="n">dist</span><span class="o">.</span><span class="na">printDistance</span><span class="o">();</span>
<span class="lineno"> 6 </span><span class="o">}</span>
<span class="lineno"> 7 </span>
<span class="lineno"> 8 </span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">intValue</span><span class="o">(</span><span class="n">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 9 </span>  <span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
<span class="lineno">10 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2.16: Not indented code</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 2 </span><span class="n">Distance</span> <span class="n">dist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Distance</span><span class="o">(</span>
<span class="lineno"> 3 </span><span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]),</span> <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]),</span>
<span class="lineno"> 4 </span><span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]),</span> <span class="n">intValue</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">3</span><span class="o">]));</span>
<span class="lineno"> 5 </span><span class="n">dist</span><span class="o">.</span><span class="na">printDistance</span><span class="o">();</span>
<span class="lineno"> 6 </span><span class="o">}</span>
<span class="lineno"> 7 </span>
<span class="lineno"> 8 </span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">intValue</span><span class="o">(</span><span class="n">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 9 </span><span class="k">return</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
<span class="lineno">10 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>However, the first one's style (with whitespace) is preferred, as the readability is higher. The method body is easier to distinguish from the head, even at a higher reading speed.</p> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Java_IDEs">Java IDEs</span></h1> 
      <h2><span id="What_is_a_Java_IDE?"></span><span class="mw-headline" id="What_is_a_Java_IDE.3F">What is a Java IDE?</span></h2> 
      <p>A Java IDE (for <i>Integrated Development Environment</i>) is a software application which enables users to more easily write and debug Java programs. Many IDEs provide features like <a href="https://en.wikipedia.org/wiki/Syntax_highlighting" class="extiw" title="w:Syntax highlighting">syntax highlighting</a> and code completion, which help the user to code more easily.<br style="clear:both;"></p> 
      <h2><span class="mw-headline" id="Eclipse">Eclipse</span></h2> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:202px;">
        <a href="/wiki/File:Eclipse33_Ubuntu.png" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Eclipse33_Ubuntu.png/200px-Eclipse33_Ubuntu.png" width="200" height="153" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Eclipse33_Ubuntu.png/300px-Eclipse33_Ubuntu.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/d/d4/Eclipse33_Ubuntu.png/400px-Eclipse33_Ubuntu.png 2x" data-file-width="1274" data-file-height="976"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:Eclipse33_Ubuntu.png" class="internal" title="Enlarge"></a>
         </div> Eclipse on Ubuntu
        </div> 
       </div> 
      </div> 
      <p>Eclipse is a Free and Open Source IDE, plus a developer tool framework that can be extended for a particular development need. IBM was behind its development, and it replaced IBM VisualAge tool. The idea was to create a standard look and feel that can be extended via plugins. The extensibility distinguishes Eclipse from other IDEs. Eclipse was also meant to compete with Microsoft Visual Studio tools. Microsoft tools give a standard way of developing code in the Microsoft world. Eclipse gives a similar standard way of developing code in the Java world, with a big success so far. With the online error checking only, coding can be sped up by at least 50% (coding does not include programming).</p> 
      <p>The goals for Eclipse are twofold:</p> 
      <ol> 
       <li>Give a standard IDE for developing code</li> 
       <li>Give a starting point, and the same look and feel for all other more sophisticated tools built on Eclipse</li> 
      </ol> 
      <p>IBM's WSAD, and later IBM Rational Software Development Platform, are built on Eclipse.</p> 
      <p>Standard Eclipse features:</p> 
      <ul> 
       <li>Standard window management (perspectives, views, browsers, explorers, ...)</li> 
       <li>Error checking as you type (immediate error indications, ...)</li> 
       <li>Help window as you type (type ., or <code>&lt;ctrl&gt;</code> <code>space</code>, ...)</li> 
       <li>Automatic build (changes in source code are automatically compiled, ...)</li> 
       <li>Built-in debugger (full featured GUI debugger)</li> 
       <li>Source code generation (getters and setters, ...)</li> 
       <li>Searches (for implementation, for references, ...)</li> 
       <li>Code refactoring (global reference update, ...)</li> 
       <li>Plugin-based architecture (ability to build tools that integrate seamlessly with the environment, and some other tools)</li> 
       <li>...</li> 
      </ul> 
      <dl> 
       <dd>
        <i>More info: <a rel="nofollow" class="external text" href="http://www.eclipse.org/">Eclipse</a> and <a rel="nofollow" class="external text" href="http://www.eclipseplugincentral.com/">Plugincentral</a>.</i>
       </dd> 
      </dl> 
      <p><br style="clear:both;"></p> 
      <h2><span class="mw-headline" id="NetBeans">NetBeans</span></h2> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:202px;">
        <a href="/wiki/File:NetBeans_IDE_6.0_on_Linux.png" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9b/NetBeans_IDE_6.0_on_Linux.png/200px-NetBeans_IDE_6.0_on_Linux.png" width="200" height="155" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9b/NetBeans_IDE_6.0_on_Linux.png/300px-NetBeans_IDE_6.0_on_Linux.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9b/NetBeans_IDE_6.0_on_Linux.png/400px-NetBeans_IDE_6.0_on_Linux.png 2x" data-file-width="1062" data-file-height="825"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:NetBeans_IDE_6.0_on_Linux.png" class="internal" title="Enlarge"></a>
         </div> NetBeans on GNU/Linux
        </div> 
       </div> 
      </div> 
      <p>The NetBeans IDE is a Free and Open Source IDE for software developers. The IDE runs on many platforms including Windows, GNU/Linux, Solaris and Mac OS X. It is easy to install and use straight out of the box. You can easily create Java applications for mobile devices using Mobility Pack in NetBeans. With Netbeans 6.0, the IDE has become one of the most preferred development tools, whether it be designing a Swing UI, building a mobile application, an enterprise application or using it as a platform for creating your own IDE.</p> 
      <dl> 
       <dd>
        <i>More info: <a rel="nofollow" class="external text" href="http://www.netbeans.org/products/ide/">netbeans.org</a></i>
       </dd> 
      </dl> 
      <p><br style="clear:both;"></p> 
      <h2><span class="mw-headline" id="JCreator">JCreator</span></h2> 
      <p>JCreator is a simple and lightweight JAVA IDE from XINOX Software. It runs only on Windows platforms. It is very easy to install and starts quickly, as it is a native application. This is a good choice for beginners.</p> 
      <dl> 
       <dd>
        <i>More info: <a rel="nofollow" class="external free" href="http://www.apcomputerscience.com/ide/jcreator/index.htm">http://www.apcomputerscience.com/ide/jcreator/index.htm</a> or <a rel="nofollow" class="external text" href="http://www.jcreator.com/">JCreator</a></i>
       </dd> 
      </dl> 
      <h2><span class="mw-headline" id="Processing">Processing</span></h2> 
      <p>Processing is an <b>enhanced</b> IDE. It adds some extra commands and a simplified programming model. This makes it much easier for beginners to start programming in Java. It was designed to help graphic artists learn a bit of programming without struggling too much. Processing runs on Windows, GNU/Linux and Mac OS X platforms.</p> 
      <dl> 
       <dd>
        <i>More info: <a rel="nofollow" class="external text" href="http://www.processing.org">Processing</a>.</i>
       </dd> 
      </dl> 
      <h2><span class="mw-headline" id="BlueJ">BlueJ</span></h2> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:202px;">
        <a href="/wiki/File:BlueJ_screenshot.png" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/5/50/BlueJ_screenshot.png/200px-BlueJ_screenshot.png" width="200" height="133" class="thumbimage" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/5/50/BlueJ_screenshot.png/300px-BlueJ_screenshot.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/5/50/BlueJ_screenshot.png/400px-BlueJ_screenshot.png 2x" data-file-width="580" data-file-height="386"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:BlueJ_screenshot.png" class="internal" title="Enlarge"></a>
         </div> BlueJ on Mac OS X
        </div> 
       </div> 
      </div> 
      <p>BlueJ is an IDE that includes templates and will compile and run the applications for you. BlueJ is often used by classes because it is not necessary to set classpaths. BlueJ has its own sets of libraries and you can add your own under preferences. That sets the classpath for all compilations that come out of it to include those you have added and the BlueJ libraries.</p> 
      <p>BlueJ offers an interesting GUI for creation of packages and programs. Classes are represented as boxes with arrows running between them to represent inheritance/implementation or if on is constructed in another. The source code is generated by the <a href="/wiki/Introduction_to_Software_Engineering/UML" title="Introduction to Software Engineering/UML">UML diagram</a> or vice-versa. BlueJ adds all those classes (the project) into the classpath at compile time.</p> 
      <p>By default it doesn't display the line numbers, so this should be ticked into Options\Preferences...</p> 
      <dl> 
       <dd>
        <i>More info: <a rel="nofollow" class="external text" href="http://www.bluej.org">BlueJ Homesite</a></i>
       </dd> 
      </dl> 
      <h2><span class="mw-headline" id="Kawa">Kawa</span></h2> 
      <p>Kawa is basically a Java editor developed by Tek-Tools. It does not include wizards and GUI tools, best suited to experienced Java programmers in small and midsized development teams. It looks that there is no new development for Kawa.</p> 
      <p>See also a <a rel="nofollow" class="external text" href="http://www.javaworld.com/javaworld/jw-06-2000/jw-0602-iw-kawa.html">javaworld article</a></p> 
      <h2><span class="mw-headline" id="JBuilder">JBuilder</span></h2> 
      <p>JBuilder is an IDE with proprietary source code, sold by Embarcadero Technologies. One of the advantages is the integration with Together, a modeling tool.</p> 
      <dl> 
       <dd>
        <i>More info: <a rel="nofollow" class="external text" href="http://www.embarcadero.com/">Embarcadero</a>.</i>
       </dd> 
      </dl> 
      <h2><span class="mw-headline" id="DrJava">DrJava</span></h2> 
      <p>DrJava is an IDE developed by the JavaPLT group at Rice University. It is designed for students.</p> 
      <dl> 
       <dd>
        <i>For more information see <a rel="nofollow" class="external text" href="http://www.drjava.org">DrJava</a>.</i>
       </dd> 
      </dl> 
      <h2><span class="mw-headline" id="Other_IDEs">Other IDEs</span></h2> 
      <ul> 
       <li><a href="https://en.wikipedia.org/wiki/Geany" class="extiw" title="wikipedia:Geany">Geany</a></li> 
       <li><a href="https://en.wikipedia.org/wiki/IntelliJ_IDEA" class="extiw" title="wikipedia:IntelliJ IDEA">IntelliJ IDEA</a></li> 
       <li><a href="https://en.wikipedia.org/wiki/JDeveloper" class="extiw" title="wikipedia:JDeveloper">JDeveloper</a></li> 
       <li><a href="https://en.wikipedia.org/wiki/jGRASP" class="extiw" title="wikipedia:jGRASP">jGRASP</a></li> 
       <li><a href="https://en.wikipedia.org/wiki/jEdit" class="extiw" title="wikipedia:jEdit">jEdit</a></li> 
       <li><a href="https://en.wikipedia.org/wiki/MyEclipse" class="extiw" title="wikipedia:MyEclipse">MyEclipse</a></li> 
       <li><a href="https://en.wikipedia.org/wiki/Visual_Caf%C3%A9" class="extiw" title="wikipedia:Visual Café">Visual Café</a></li> 
       <li><a rel="nofollow" class="external text" href="http://www.gexperts.com/products/gel/download.php">Gel</a></li> 
       <li><a rel="nofollow" class="external text" href="http://jipe.sourceforge.net/">JIPE</a></li> 
       <li><a rel="nofollow" class="external text" href="http://www.zeusedit.com/java.html">Zeus</a></li> 
       <li><a rel="nofollow" class="external text" href="http://www.setuide.byethost14.com/SetuIDEeyesaving.htm">Setu Eye Saving Lightweight(fast)C,C++,JAVA IDE</a></li> 
      </ul> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Language_Fundamentals">Language Fundamentals</span></h1> 
      <p>The previous chapter <i>"<a href="/wiki/Java_Programming/Getting_started" title="Java Programming/Getting started">Getting started</a>"</i> was a primer course in the basics of understanding how Java programming works. Throughout the chapter, we tackled a variety of concepts that included:</p> 
      <ul> 
       <li>Objects and class definitions;</li> 
       <li>Abstract and data types;</li> 
       <li>Properties;</li> 
       <li>Methods;</li> 
       <li>Class-level and method-level scopes;</li> 
       <li>Keywords; and,</li> 
       <li>Access modifiers, etc.</li> 
      </ul> 
      <p>From this point on, we will be looking into the above mentioned concepts and many more in finer detail with a deeper and richer understanding of how each one of them works. This chapter on <b>Language fundamentals</b> introduces the fundamental elements of the Java programming language in detail. The discussions in this chapter will use the concepts we have already gathered from our previous discussions and build upon them in a progressive manner.</p> 
      <h2><span class="mw-headline" id="The_Java_programming_syntax">The Java programming syntax</span></h2> 
      <p>In <a href="https://en.wikipedia.org/wiki/Linguistics" class="extiw" title="w:Linguistics">linguistics</a>, the word <b>syntax</b> (which comes from <a href="https://en.wikipedia.org/wiki/Ancient_Greek" class="extiw" title="w:Ancient Greek">Ancient Greek</a> <i><a href="https://en.wiktionary.org/wiki/%CF%83%CF%8D%CE%BD%CF%84%CE%B1%CE%BE%CE%B9%CF%82" class="extiw" title="wikt:????????">????????</a></i> where <i>???</i> [syn] means "together", and <i>?????</i> [táxis] means "an ordering") refers to "the process of arranging things". It defines the principles and rules for constructing phrases and <a href="https://en.wikipedia.org/wiki/Sentence_(linguistics)" class="extiw" title="w:Sentence (linguistics)">sentences</a> in <a href="https://en.wikipedia.org/wiki/Natural_language" class="extiw" title="w:Natural language">natural languages</a>.</p> 
      <p>When learning a new language, the first step one must take is to learn its <b>programming syntax</b>. <i>Programming syntax</i> is to programming languages what <i>grammar</i> is to spoken languages. Therefore, in order to create effective code in the Java programming language, we need to learn its syntax — its principles and rules for constructing valid code statements and expressions.</p> 
      <p>Java uses a syntax similar to the <a href="/wiki/C_Programming" title="C Programming">C programming language</a> and therefore if one learns the Java programming syntax, they automatically would be able to read and write programs in similar languages — C, <a href="/wiki/C%2B%2B_Programming" title="C++ Programming">C++</a> and <a href="/wiki/C_Sharp_Programming" title="C Sharp Programming">C#</a></p> 
      <p>The next step one must take when learning a new language is to learn its keywords; by combining the knowledge of <a href="/wiki/Java_Programming/Keywords" title="Java Programming/Keywords">keywords</a> with an understanding of <a href="/wiki/Java_Programming/Syntax" class="mw-redirect" title="Java Programming/Syntax">syntax</a> rules, one can create <a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">statements</a>, Programming Blocks, Classes, Interfaces, et al.</p> 
      <p>Use <a href="/wiki/Java_Programming/Packages" title="Java Programming/Packages">packages</a> to avoid name collisions. To hide as much information as possible use the <a href="/wiki/Java_Programming/Access_Modifiers" class="mw-redirect" title="Java Programming/Access Modifiers">access modifiers</a> properly.</p> 
      <p>Create <a href="/wiki/Java_Programming/Methods" title="Java Programming/Methods">methods</a> that do one and if possible only one thing/task. If possible have separate method that changes the object state.</p> 
      <p>In an object oriented language, programs are run with objects; however, for ease of use and for historic reasons, Java has <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">primitive types</a>. Primitive Data Types only store values and have no methods. Primitive Types may be thought of as Raw Data and are usually embedded attributes inside objects or used as local variables in methods. Because primitive types are not subclasses of the object superclass, each type has a Wrapper Class which is a subclass of Object, and can thus be stored in a collection or returned as an object.</p> 
      <p>Java is a strong <a href="/wiki/Java_Programming/Classes,_Objects_and_Types" title="Java Programming/Classes, Objects and Types">type</a> checking language. There are two concepts regarding types and objects. One is the object type and the other the template/class the object was created from. When an object is created, the template/class is assigned to that object which can not be changed. Types of an object however can be changed by type casting. Types of an object is associated with the object reference that referencing the object and determines what operation can be performed on the object through that object reference. Assigning the value of one object reference to a different type of object reference is called type casting.</p> 
      <p>The most often used data structure in any language is a character string. For this reason java defines a special object that is <a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a>.</p> 
      <p>To aggregate same type java objects to an array, java has a special <a href="/wiki/Java_Programming/Arrays" title="Java Programming/Arrays">array</a> object for that. Both java objects and primitive types can be aggregated to arrays.</p> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Statements">Statements</span></h1> 
      <p>Now that we have the Java platform on our systems and have run the first program successfully, we are geared towards understanding how programs are actually made. As we have already discussed, a program is a set of instructions, which are tasks provided to a computer. These instructions are called <b>statements</b> in Java. Statements can be anything from a single line of code to a complex mathematical equation. Consider the following line:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.1: A simple assignment statement.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">24</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>This line is a simple instruction that tells the system to initialize a variable and set its value as 24. If the above statement was the only one in the program, it would look similar to this:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-1"><b>Code listing 3.1: A statement in a simple class.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyProgram</span> <span class="o">{</span>
<span class="lineno">2 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">3 </span><span class="hll">        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">24</span><span class="o">;</span>
</span><span class="lineno">4 </span>    <span class="o">}</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Java places its statements within a class declaration and, in the class declaration, the statements are usually placed in a method declaration, as above.</p> 
      <h2><span class="mw-headline" id="Variable_declaration_statement">Variable declaration statement</span></h2> 
      <p>The simplest statement is a variable declaration:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.2: A simple declaration statement.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>It defines a variable that can be used to store values for later use. The first token is the <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">data type</a> of the variable (which type of values this variable can store). The second token is the name of the variable, by which you will be referring to it. Then each declaration statement is ended by a semicolon (<code>;</code>).</p> 
      <h2><span class="mw-headline" id="Assignment_statements">Assignment statements</span></h2> 
      <p>Up until now, we've assumed the creation of variables as a single statement. In essence, we assign a value to those variables, and that's just what it is called. When you assign a value to a variable in a statement, that statement is called an <b>assignment statement</b> (also called an <a href="https://en.wikipedia.org/wiki/Initialization_(programming)" class="extiw" title="w:Initialization (programming)">initialization statement</a>). Did you notice one more thing? It's the semicolon (<code>;</code>), which is at the end of each statement. A clear indicator that a line of code is a statement is its termination with an ending semicolon. If one was to write multiple statements, it is usually done with each statement on a separate line ending with a semicolon. Consider the example below:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="section-3"><b>Code section 3.3: Multiple assignment statements.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
<span class="lineno">3 </span><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>You do not necessarily have to use a new line to write each statement. Just like English, you can begin writing the next statement where you ended the first one as depicted below:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.4: Multiple assignment statements on the same line.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span> <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>However, the only problem with putting multiple statements on one line is, it's very difficult to read it. It doesn't look that intimidating at first, but once you've got a significant amount of code, it's usually better to organize it in a way that makes sense. It would look more complex and incomprehensible written as it is in Listing 3.4.</p> 
      <p>Now that we have looked into the anatomy of a simple assignment statement, we can look back at what we've achieved. We know that...</p> 
      <ul> 
       <li>A statement is a unit of code in programming.</li> 
       <li>If we are assigning a variable a value, the statement is called an assignment statement.</li> 
       <li>An assignment statement includes three parts: a data type, the variable name (also called the identifier) and the value of a variable. We will look more into the nature of identifiers and values in the section <i><a href="/wiki/Java_Programming/Variables" title="Java Programming/Variables">Variables</a></i> later.</li> 
      </ul> 
      <p>Now, before we move on to the next topic, you need to try and understand what the code below does.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.5: Multiple assignment statements with expressions.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">firstNumber</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">int</span> <span class="n">secondNumber</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
<span class="lineno">3 </span><span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">firstNumber</span> <span class="o">+</span> <span class="n">secondNumber</span><span class="o">;</span>
<span class="lineno">4 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
<span class="lineno">5 </span><span class="n">secondNumber</span> <span class="o">=</span> <span class="mi">30</span><span class="o">;</span>
<span class="lineno">6 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The first two statements are pretty much similar to those in <a href="#section-3">Section 3.3</a> but with different variable names. The third however is a bit interesting. We've already talked of variables as being similar to gift boxes. Think of your computer's memory as a shelf where you put all those boxes. Whenever you need a box (or variable), you call its identifier (that's the name of the variable). So calling the variable identifier <code>firstNumber</code> gives you the number <code>10</code>, calling <code>secondNumber</code> would give you <code>20</code> hence when you add the two up, the answer should be <code>30</code>. That's what the value of the last variable <code>result</code> would be. The part of the third statement where you add the numbers, i.e., <code>firstNumber + secondNumber</code> is called an <b>expression</b> and the expression is what decides what the value is to be. If it's just a plain value, like in the first two statements, then it's called a <b>literal</b> (the value is <i>literally</i> the value, hence the name <i>literal</i>).</p> 
      <p>Note that after the assignment to <code>result</code> its value will not be changed if we assign different values to <code>firstNumber</code> or <code>secondNumber</code>, like in line 5.</p> 
      <p>With the information you have just attained, you can actually write a decent Java program that can sum up values.</p> 
      <h2><span class="mw-headline" id="Assertion">Assertion</span></h2> 
      <p>An assertion checks if a condition is true:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.6: A return statement.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">2 </span><span class="hll">        <span class="k">assert</span> <span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="lineno">3 </span>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
<span class="lineno">4 </span>    <span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Each <code>assert</code> statement is ended by a semi-colon (<code>;</code>). However, assertions are disabled by default, so you must run the program with the <i>-ea</i> argument in order for assertions to be enabled (<code>java -ea [name of compiled program]</code>).</p> 
      <h2><span class="mw-headline" id="Program_Control_Flow">Program Control Flow</span></h2> 
      <p>Statements are evaluated in the order as they occur. The execution of flow begins at the top most statement and proceed downwards till the last statement is encountered. A statement can be substituted by a statement block. There are special statements that can redirect the execution flow based on a condition, those statements are called <i>branching</i> statements, described in detail in a later section.</p> 
      <h2><span class="mw-headline" id="Statement_Blocks">Statement Blocks</span></h2> 
      <p>A bunch of statements can be placed in braces to be executed as a single block. Such a block of statements can be named or be provided with a condition for execution. Below is how you'd place a series of statements in a block.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.7: A statement block.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="o">{</span>
<span class="lineno">2 </span>    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="lineno">3 </span>    <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
<span class="lineno">4 </span>    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Branching_Statements">Branching Statements</span></h2> 
      <p>Program flow can be affected using function/method calls, loops and iterations. Of various types of branching constructs, we can easily pick out two generic branching methods.</p> 
      <ul> 
       <li>Unconditional Branching</li> 
       <li>Conditional Branching</li> 
      </ul> 
      <h3><span class="mw-headline" id="Unconditional_Branching_Statements">Unconditional Branching Statements</span></h3> 
      <p>If you look closely at a method, you'll see that a method is a named statement block that is executed by calling that particular name. An unconditional branch is created either by invoking the method or by calling <code>break</code>, <code>continue</code>, <code>return</code> or <code>throw</code>, all of which are described below.</p> 
      <p>When a name of a method is encountered in a flow, it stops execution in the current method and branches to the newly called method. After returning a value from the called method, execution picks up at the original method on the line below the method call.</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-8"><b>Code listing 3.8: UnconditionalBranching.java</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UnconditionalBranching</span> <span class="o">{</span>
<span class="lineno"> 2 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 3 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Inside main method! Invoking aMethod!"</span><span class="o">);</span>
<span class="lineno"> 4 </span><span class="hll">        <span class="n">aMethod</span><span class="o">();</span>
</span><span class="lineno"> 5 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Back in main method!"</span><span class="o">);</span>
<span class="lineno"> 6 </span>    <span class="o">}</span>
<span class="lineno"> 7 </span>
<span class="lineno"> 8 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">aMethod</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno"> 9 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Inside aMethod!"</span><span class="o">);</span>
<span class="lineno">10 </span>    <span class="o">}</span>
<span class="lineno">11 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output provided with the screen of information running the above code.</b> <pre style="background-color:#000; color:#fff;">
Inside main method! Invoking aMethod!
Inside aMethod!
Back in main method!
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The program flow begins in the <code>main</code> method. Just as <code>aMethod</code> is invoked, the flow travels to the called method. At this very point, the flow branches to the other method. Once the method is completed, the flow is returned to the point it left off and resumes at the next statement after the call to the method.</p> 
      <h2><span class="mw-headline" id="Return_statement">Return statement</span></h2> 
      <p>A <code>return</code> statement exits from a block, so it is often the last statement of a method:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.9: A return statement.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">2 </span>        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">24</span><span class="o">;</span>
<span class="lineno">3 </span><span class="hll">        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
</span><span class="lineno">4 </span>    <span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>A return statement can return the content of a variable or nothing. Beware not to write statements after a return statement which would not be executed! Each <code>return</code> statement is ended by a semi-colon (<code>;</code>).</p> 
      <h3><span class="mw-headline" id="Conditional_Branching_Statements">Conditional Branching Statements</span></h3> 
      <p>Conditional branching is attained with the help of the <code>if...else</code> and <code>switch</code> statements. A conditional branch occurs only if a certain condition expression evaluates to true.</p> 
      <h4><span class="mw-headline" id="Conditional_Statements">Conditional Statements</span></h4> 
      <p>Also referred to as <i><code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> statements</i>, these allow a program to perform a test and then take action based on the result of that test.</p> 
      <p>The form of the <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> statement:</p> 
      <pre>
<code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> (<i>condition</i>) {
  <i>do statements here if condition is true</i>
} <code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> {
  <i>do statements here if condition is false</i>
}
</pre> 
      <p>The <i>condition</i> is a boolean expression which can be either <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/true" title="Java Programming/Literals/Boolean Literals/true"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">true</font></a></code> or <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/false" title="Java Programming/Literals/Boolean Literals/false"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">false</font></a></code>. The actions performed will depend on the value of the condition.</p> 
      <p>Example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.10: An if statement.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"value stored in i is greater than zero"</span><span class="o">);</span>
<span class="lineno">3 </span><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">4 </span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"value stored is not greater than zero"</span><span class="o">);</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>If statements can also be made more complex using the else if combination:</p> 
      <pre>
<code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> (<i>condition 1</i>) {
   <i>do statements here if condition 1 is true</i>
} <code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> (<i>condition 2</i>) {
   <i>do statements here if condition 1 is false and condition 2 is true</i>
} <code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> {
  <i>do statements here if neither condition 1 nor condition 2 is true</i>
}
</pre> 
      <p>Example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.11: An if/else if/else statement.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"value stored in i is greater than zero"</span><span class="o">);</span>
<span class="lineno">3 </span><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">4 </span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"value stored in i is less than zero"</span><span class="o">);</span>
<span class="lineno">5 </span><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">6 </span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"value stored is equal to 0"</span><span class="o">);</span>
<span class="lineno">7 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>If there is only one statement to be executed after the condition, as in the above example, it is possible to omit the curly braces, however Oracle's <a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/index.html#449">Java Code Conventions</a> explicitly state that the braces should always be used.</p> 
      <p>There is no looping involved in an if statement so once the condition has been evaluated the program will continue with the next instruction after the statement.</p> 
      <h4><span class="mw-headline" id="If...else_statements">If...else statements</span></h4> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> ... <code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> statement is used to conditionally execute one of two blocks of statements, depending on the result of a boolean condition.</p> 
      <p>Example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.12: An if/else statement.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="k">if</span> <span class="o">(</span><span class="n">list</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="c1">// This block of statements executes if the condition is true.</span>
<span class="lineno">3 </span><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">4 </span>  <span class="c1">// This block of statements executes if the condition is false.</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Oracle's <a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/index.html#449">Java Code Conventions</a> recommend that the braces should always be used.</p> 
      <p>An <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> statement has two forms:</p> 
      <pre>
<code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> (boolean-condition)
   <i><a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">statement<sub>1</sub></a></i>
</pre> 
      <p>and</p> 
      <pre>
<code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> (boolean-condition)
   <i><a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">statement<sub>1</sub></a></i>
<code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code>
   <i><a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">statement<sub>2</sub></a></i>
</pre> 
      <p>Use the second form if you have different statements to execute if the <i><a href="/wiki/Java_Programming/Types/boolean" title="Java Programming/Types/boolean">boolean-condition</a></i> is true or if it is false. Use the first if you only wish to execute <i><a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">statement<sub>1</sub></a></i> if the condition is true and you do not wish to execute alternate statements if the condition is false.</p> 
      <p>The <a href="#code-section-13">code section 3.13</a> calls two <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code> methods, <code>f()</code> and <code>y()</code>, stores the results, then uses an <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> statement to test if <code>x</code> is less than y and if it is, the <i><a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">statement<sub>1</sub></a></i> body will swap the values. The end result is x always contains the larger result and y always contains the smaller result.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-13"><b>Code section 3.13: Value swap.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">f</span><span class="o">();</span>
<span class="lineno">2 </span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">();</span>
<span class="lineno">3 </span><span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">4 </span>  <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
<span class="lineno">5 </span>  <span class="n">x</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
<span class="lineno">6 </span>  <span class="n">y</span> <span class="o">=</span> <span class="n">z</span><span class="o">;</span>
<span class="lineno">7 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code>...<code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> statements also allow for the use of another statement, <code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code>. This statement is used to provide another <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> statement to the conditional that can only be executed if the others are not true. For example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.14: Multiple branching.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span>
<span class="lineno">2 </span>  <span class="n">x</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
<span class="lineno">3 </span><span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">==</span> <span class="mi">3</span><span class="o">)</span>
<span class="lineno">4 </span>  <span class="n">x</span> <span class="o">=</span> <span class="mi">6</span><span class="o">;</span>
<span class="lineno">5 </span><span class="k">else</span>
<span class="lineno">6 </span>  <span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> statement is useful in this case because if one of the conditionals is true, the other must be false. Keep in mind that if one is true, the other <i>will not</i> execute. For example, if the statement at line 2 contained in the first conditional were changed to <code>x = 3;</code>, the second conditional, the <code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code>, would still not execute. However, when dealing with primitive types in conditional statements, it is more desirable to use <code><a href="/wiki/Java_Programming/Statements#Switch_statements" title="Java Programming/Statements">switch statements</a></code> rather than multiple <code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> statements.</p> 
      <h4><span class="mw-headline" id="Switch_statements">Switch statements</span></h4> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code> conditional statement is basically a shorthand version of writing many <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code>...<code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> statements. The syntax for <code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code> statements is as follows:</p> 
      <pre>
<code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code>(&lt;variable&gt;) {
  case &lt;result&gt;: &lt;statements&gt;; break;
  case &lt;result&gt;: &lt;statements&gt;; break;
  default: &lt;statements&gt;; break;
}
</pre> 
      <p>This means that if the variable included equals one of the case results, the statements following that case, until the word <code>break</code> will run. The <code>default</code> case executes if none of the others are true. <b>Note:</b> the only types that can be analysed through <code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code> statements are <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code>, or <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code> primitive types. This means that <code><a href="/wiki/Java_Programming/API/java.lang.Object" title="Java Programming/API/java.lang.Object">Object</a></code> variables can not by analyzed through <code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code> statements. However, as of the JDK 7 release, you can use a String object in the expression of a switch statement.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.15: A switch.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno"> 1 </span><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">2</span><span class="o">,</span> <span class="n">x</span><span class="o">;</span>
<span class="lineno"> 2 </span><span class="k">switch</span> <span class="o">(</span><span class="n">n</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 3 </span>  <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno"> 4 </span>    <span class="k">break</span><span class="o">;</span>
<span class="lineno"> 5 </span>  <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
<span class="lineno"> 6 </span>    <span class="k">break</span><span class="o">;</span>
<span class="lineno"> 7 </span>  <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">6</span><span class="o">;</span>
<span class="lineno"> 8 </span>    <span class="k">break</span><span class="o">;</span>
<span class="lineno"> 9 </span>  <span class="k">case</span> <span class="mi">4</span><span class="o">:</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
<span class="lineno">10 </span>    <span class="k">break</span><span class="o">;</span>
<span class="lineno">11 </span><span class="o">}</span>
<span class="lineno">12 </span><span class="k">return</span> <span class="n">x</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>In this example, since the integer variable <code>n</code> is equal to 2, <code>case 2</code> will execute, make <code>x</code> equal to 4. Thus, 4 is returned by the method.</p> 
      <h2><span class="mw-headline" id="Iteration_Statements">Iteration Statements</span></h2> 
      <p>Iteration Statements are statements that are used to iterate a block of statements. Such statements are often referred to as loops. Java offers four kinds of iterative statements.</p> 
      <ul> 
       <li>The <code>while</code> loop</li> 
       <li>The <code>do...while</code> loop</li> 
       <li>The <code>for</code> loop</li> 
       <li>The <code>foreach</code> loop</li> 
      </ul> 
      <h3><span class="mw-headline" id="The_while_loop">The while loop</span></h3> 
      <dl> 
       <dd>
        <span class="noprint"><i>Main page: <a href="/wiki/Java_Programming/Keywords/while" title="Java Programming/Keywords/while">Java Programming/Keywords/while</a></i></span>
       </dd> 
      </dl> 
      <p>The <code>while</code> loop iterates a block of code while the condition it specifies is <code>true</code>.</p> 
      <p>The syntax for the loop is:</p> 
      <pre>
<code><a href="/wiki/Java_Programming/Keywords/while" title="Java Programming/Keywords/while"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">while</font></a></code> (condition) {
   statement;
 }
</pre> 
      <p>Here the condition is an expression. An expression as discussed earlier is any statement that returns a value. <code>While</code> condition statements evaluate to a boolean value, that is, either <code>true</code> or <code>false</code>. As long as the condition is <code>true</code>, the loop will iterate the block of code over and over and again. Once the condition evaluates to <code>false</code>, the loop exits to the next statement outside the loop.</p> 
      <h3><span class="mw-headline" id="The_do...while_loop">The do...while loop</span></h3> 
      <p>The do-while loop is functionally similar to the while loop, except the condition is evaluated AFTER the statement executes</p> 
      <pre>
<code><a href="/wiki/Java_Programming/Keywords/do" title="Java Programming/Keywords/do"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">do</font></a></code> {
   statement;
 } <code><a href="/wiki/Java_Programming/Keywords/while" title="Java Programming/Keywords/while"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">while</font></a></code> (condition);
</pre> 
      <h3><span class="mw-headline" id="The_for_loop">The for loop</span></h3> 
      <dl> 
       <dd>
        <span class="noprint"><i>Main page: <a href="/wiki/Java_Programming/Keywords/for" title="Java Programming/Keywords/for">Java Programming/Keywords/for</a></i></span>
       </dd> 
      </dl> 
      <p>The for loop is a specialized while loop whose syntax is designed for easy iteration through a sequence of numbers. Example:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-listing-16"><b>Code section 3.16: A for loop.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">"\t"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="o">);</span>
<span class="lineno">3 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for <a href="#code-listing-16">code listing 3.16</a> if you compile and run the statement above.</b> <pre style="background-color:#000; color:#fff;">
 0      0
 1      1
 2      4
 3      9
 ...
 99     9801
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The program prints the numbers 0 to 99 and their squares.</p> 
      <p>The same statement in a while loop:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.17: An alternative version.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno">2 </span><span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">3 </span>   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">"\t"</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">i</span><span class="o">);</span>
<span class="lineno">4 </span>   <span class="n">i</span><span class="o">++;</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h3><span class="mw-headline" id="The_foreach_loop">The foreach loop</span></h3> 
      <p>The foreach statement allows you to iterate through all the items in a collection, examining each item in turn while still preserving its type. The syntax for the foreach statement is:</p> 
      <pre>
<code><a href="/wiki/Java_Programming/Keywords/for" title="Java Programming/Keywords/for"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">for</font></a></code> (<i>type</i> item : collection) statement;
</pre> 
      <p>For an example, we'll take an array of <code>String</code>s denoting days in a week and traverse through the collection, examining one item at a time.</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-listing-18"><b>Code section 3.18: A foreach loop.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span><span class="o">[]</span> <span class="n">days</span> <span class="o">=</span> <span class="o">{</span><span class="s">"Monday"</span><span class="o">,</span> <span class="s">"Tuesday"</span><span class="o">,</span> <span class="s">"Wednesday"</span><span class="o">,</span> <span class="s">"Thursday"</span><span class="o">,</span> <span class="s">"Friday"</span><span class="o">,</span> <span class="s">"Saturday"</span><span class="o">,</span> <span class="s">"Sunday"</span><span class="o">};</span>
<span class="lineno">2 </span>
<span class="lineno">3 </span><span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">day</span> <span class="o">:</span> <span class="n">days</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">4 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">day</span><span class="o">);</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for <a href="#code-listing-18">code listing 3.18</a></b> <pre style="background-color:#000; color:#fff;">
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
Sunday
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Notice that the loop automatically exits after the last item in the collection has been examined in the statement block.</p> 
      <p>Although the enhanced for loop can make code much clearer, it can't be used in some common situations.</p> 
      <ul> 
       <li><b>Only access.</b> Elements can not be assigned to, eg, not to increment each element in a collection.</li> 
       <li><b>Only single structure.</b> It's not possible to traverse two structures at once, eg, to compare two arrays.</li> 
       <li><b>Only single element.</b> Use only for single element access, eg, not to compare successive elements.</li> 
       <li><b>Only forward.</b> It's possible to iterate only forward by single steps.</li> 
       <li><b>At least Java 5.</b> Don't use it if you need compatibility with versions before Java 5.</li> 
      </ul> 
      <h2><span class="mw-headline" id="The_continue_and_break_statements">The continue and break statements</span></h2> 
      <p>At times, you would like to re-iterate a loop without executing the remaining statement within the loop. The <code><code><a href="/wiki/Java_Programming/Keywords/continue" title="Java Programming/Keywords/continue"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">continue</font></a></code></code> statement causes the loop to re-iterate and start over from the top most statement inside the loop.</p> 
      <p>Where there is an ability to re-iterate the loop, there is an ability to exit the loop when required. At any given moment, if you'd like to exit a loop and end all further work within the loop, the <code><code><a href="/wiki/Java_Programming/Keywords/break" title="Java Programming/Keywords/break"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">break</font></a></code></code> ought to be used.</p> 
      <p>The <code><code><a href="/wiki/Java_Programming/Keywords/continue" title="Java Programming/Keywords/continue"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">continue</font></a></code></code> and <code><code><a href="/wiki/Java_Programming/Keywords/break" title="Java Programming/Keywords/break"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">break</font></a></code></code> statements can be used with a label like follows:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-listing-19"><b>Code section 3.19: Using a label.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">"A test string for the switch!\nLine two of test string..."</span><span class="o">;</span>
<span class="lineno">2 </span><span class="hll"><span class="nl">outer:</span> <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class="lineno">3 </span>  <span class="k">switch</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">))</span> <span class="o">{</span>
<span class="lineno">4 </span>    <span class="k">case</span> <span class="sc">'\n'</span><span class="o">:</span> <span class="k">break</span> <span class="n">outer</span><span class="o">;</span>
<span class="lineno">5 </span>    <span class="k">case</span> <span class="sc">' '</span><span class="o">:</span> <span class="k">break</span><span class="o">;</span>
<span class="lineno">6 </span>    <span class="k">default</span><span class="o">:</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
<span class="lineno">7 </span>  <span class="o">}</span>
<span class="lineno">8 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for <a href="#code-listing-19">code listing 3.19</a></b> <pre style="background-color:#000; color:#fff;">
 Ateststringfortheswitch!
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Throw_statement">Throw statement</span></h2> 
      <p>A <code>throw</code> statement exits from a method and so on and so on or it is caught by a <code>try</code>/<code>catch</code> block. It does not return a variable but an exception:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.20: A return statement.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">2 </span><span class="hll">        <span class="k">throw</span> <span class="k">new</span> <span class="n">NullPointerException</span><span class="o">();</span>
</span><span class="lineno">3 </span>    <span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Beware not to write statements after a <code>throw</code> statement which would not be executed too! Each <code>throw</code> statement is ended by a semi-colon (<code>;</code>).</p> 
      <h2><span id="try/catch"></span><span class="mw-headline" id="try.2Fcatch">try/catch</span></h2> 
      <p>A <code>try</code>/<code>catch</code> must at least contain the <code>try</code> block and the <code>catch</code> block:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.21: try/catch block.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="k">try</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="c1">// Some code</span>
<span class="lineno">3 </span><span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">4 </span>  <span class="c1">// Optional exception handling</span>
<span class="lineno">5 </span><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
<span class="lineno">6 </span>  <span class="c1">// This code is executed no matter what</span>
<span class="lineno">7 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.1: How many statements are there in this class?</b></p> 
        <table style="padding:2px; margin:2px;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
           <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Code listing 3.2: AProgram.java</b> 
            <div class="mw-highlight mw-content-ltr" dir="ltr"> 
             <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AProgram</span> <span class="o">{</span>
<span class="lineno"> 2 </span>
<span class="lineno"> 3 </span>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">24</span><span class="o">;</span>
<span class="lineno"> 4 </span>
<span class="lineno"> 5 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 6 </span>        <span class="kt">int</span> <span class="n">daysInAYear</span> <span class="o">=</span> <span class="mi">365</span><span class="o">;</span><span class="kt">int</span> <span class="n">ageInDay</span> <span class="o">=</span> <span class="mi">100000</span><span class="o">;</span>
<span class="lineno"> 7 </span>        <span class="kt">int</span> <span class="n">localAge</span> <span class="o">=</span> <span class="n">ageInDay</span> <span class="o">/</span> <span class="n">daysInAYear</span><span class="o">;</span>
<span class="lineno"> 8 </span>    <span class="o">}</span>
<span class="lineno"> 9 </span>
<span class="lineno">10 </span>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">11 </span>        <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
<span class="lineno">12 </span>    <span class="o">}</span>
<span class="lineno">13 </span><span class="o">}</span>
</pre>
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <p>5<br> One statement at line 3, two statements at line 6, one statement at line 7 and one statement at line 11.</p> 
         </div> 
        </div> 
       </div> 
      </div> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Conditional_blocks">Conditional blocks</span></h1> 
      <p>Conditional blocks allow a program to take a different path depending on some condition(s). These allow a program to perform a test and then take action based on the result of that test. In the code sections, the actually executed code lines will be highlighted.</p> 
      <h3><span class="mw-headline" id="If">If</span></h3> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> block executes only if the boolean expression associated with it is true. The structure of an <code>if</code> block is as follows:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>if (<i><b>boolean expression<sub>1</sub></b></i>) { 
          <dl> 
           <dd>
            <i><b>statement<sub>1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>n</sub></b></i>
           </dd> 
          </dl> <p>}</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Here is a double example to illustrate what happens if the condition is true and if the condition is false:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.22: Two <code>if</code> blocks.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="hll"><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">6</span><span class="o">;</span>
</span><span class="lineno"> 2 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello!"</span><span class="o">);</span>
</span><span class="lineno"> 3 </span>
<span class="lineno"> 4 </span><span class="hll"><span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">13</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 5 </span><span class="hll">  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm a child."</span><span class="o">);</span>
</span><span class="lineno"> 6 </span><span class="o">}</span>
<span class="lineno"> 7 </span>
<span class="lineno"> 8 </span><span class="hll"><span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 9 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I'm an adult."</span><span class="o">);</span>
<span class="lineno">10 </span><span class="o">}</span>
<span class="lineno">11 </span>
<span class="lineno">12 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Bye!"</span><span class="o">);</span>
</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.22</b> <pre style="background-color:#000; color:#fff;">
Hello!
I'm a child
Bye!
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Bombilla_amarilla_-_yellow_Edison_lamp.svg" class="image" title="Note"><img alt="Note" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/30px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png" width="30" height="30" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/45px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/60px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 2x" data-file-width="200" data-file-height="200"></a></td> 
         <td style="background-color:#fffff0; border-left: 4px solid yellow; padding-left: 6px;">If only one statement is to be executed after an <code>if</code> block, it does not have to be enclosed in curly braces. For example, <code>if (i == 0) i = 1;</code> is a perfectly valid portion of Java code. This works for most control structures, such as <code>else</code> and <code>while</code>. However Oracle's <a rel="nofollow" class="external text" href="http://www.oracle.com/technetwork/java/index.html#449">Java Code Conventions</a> explicitly state that the braces should always be used.</td> 
        </tr> 
       </tbody>
      </table> 
      <h3><span id="If/else"></span><span class="mw-headline" id="If.2Felse">If/else</span></h3> 
      <p>The <code>if</code> block may optionally be followed by an <code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> block which will execute if that boolean expression is false. The structure of an <code>if</code> block is as follows:</p> 
      <table style="margin: auto"> 
       <tbody>
        <tr> 
         <td>if (<i><b>boolean expression<sub>1</sub></b></i>) { 
          <dl> 
           <dd>
            <i><b>statement<sub>1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>n</sub></b></i>
           </dd> 
          </dl> <p>} else {</p> 
          <dl> 
           <dd>
            <i><b>statement<sub>1bis</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>2bis</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>nbis</sub></b></i>
           </dd> 
          </dl> <p>}</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <h3><span id="If/else-if/else"></span><span class="mw-headline" id="If.2Felse-if.2Felse">If/else-if/else</span></h3> 
      <p>An <code>else-if</code> block may be used when multiple conditions need to be checked. <code>else-if</code> statements come after the <code>if</code> block, but before the <code>else</code> block. The structure of an <code>if</code> block is as follows:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>if (<i><b>boolean expression<sub>1</sub></b></i>) { 
          <dl> 
           <dd>
            <i><b>statement<sub>1.1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>1.2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>n</sub></b></i>
           </dd> 
          </dl> <p>} else if (<i><b>boolean expression<sub>2</sub></b></i>) {</p> 
          <dl> 
           <dd>
            <i><b>statement<sub>2.1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>2.2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>2.n</sub></b></i>
           </dd> 
          </dl> <p>} else {</p> 
          <dl> 
           <dd>
            <i><b>statement<sub>3.1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>3.2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>3.n</sub></b></i>
           </dd> 
          </dl> <p>}</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Here is an example to illustrate:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Code listing 3.3: MyConditionalProgram.java</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyConditionalProgram</span> <span class="o">{</span>
<span class="lineno"> 2 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 3 </span><span class="hll">      <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class="lineno"> 4 </span><span class="hll">      <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 5 </span>          <span class="c1">// a is greater than 0, so this statement will execute</span>
<span class="lineno"> 6 </span><span class="hll">          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a is positive"</span><span class="o">);</span>
</span><span class="lineno"> 7 </span>      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 8 </span>          <span class="c1">// a case has already executed, so this statement will NOT execute</span>
<span class="lineno"> 9 </span>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a is positive or zero"</span><span class="o">);</span>
<span class="lineno">10 </span>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">11 </span>          <span class="c1">// a case has already executed, so this statement will NOT execute</span>
<span class="lineno">12 </span>          <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a is negative"</span><span class="o">);</span>
<span class="lineno">13 </span>      <span class="o">}</span>
<span class="lineno">14 </span>    <span class="o">}</span>
<span class="lineno">15 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code listing 3.3</b> <pre style="background-color:#000; color:#fff;">
a is positive
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Keep in mind that <i>only a single block</i> will execute, and it will be the first true condition.</p> 
      <p>All the conditions are evaluated when <code>if</code> is reached, no matter what the result of the condition is, after the execution of the <code>if</code> block:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.23: A new value for the variable a.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="hll"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class="lineno"> 2 </span><span class="hll"><span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 3 </span>    <span class="c1">// a is greater than 0, so this statement will execute</span>
<span class="lineno"> 4 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a is positive"</span><span class="o">);</span>
</span><span class="lineno"> 5 </span><span class="hll">    <span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5</span><span class="o">;</span>
</span><span class="lineno"> 6 </span><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 7 </span>    <span class="c1">// a WAS greater than 0, so this statement will not execute</span>
<span class="lineno"> 8 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a is negative"</span><span class="o">);</span>
<span class="lineno"> 9 </span><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">10 </span>    <span class="c1">// a does not equal 0, so this statement will not execute</span>
<span class="lineno">11 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"a is zero"</span><span class="o">);</span>
<span class="lineno">12 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.23</b> <pre style="background-color:#000; color:#fff;">
a is positive
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <h3><span class="mw-headline" id="Conditional_expressions">Conditional expressions</span></h3> 
      <p>Conditional expressions use the compound <code>?:</code> operator. Syntax:</p> 
      <table style="margin: auto"> 
       <tbody>
        <tr> 
         <td><i><b>boolean expression<sub>1</sub></b></i>&nbsp;? <i><b>expression<sub>1</sub></b></i>&nbsp;: <i><b>expression<sub>2</sub></b></i></td> 
        </tr> 
       </tbody>
      </table> 
      <p>This evaluates <code>boolean expression<sub>1</sub></code>, and if it is <code>true</code> then the conditional expression has the value of <code>expression<sub>1</sub></code>; otherwise the conditional expression has the value of <code>expression<sub>2</sub></code>.</p> 
      <p>Example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.24: Conditional expressions.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">(</span><span class="n">p</span> <span class="o">&lt;</span> <span class="mf">0.05</span><span class="o">)?</span> <span class="s">"reject"</span> <span class="o">:</span> <span class="s">"keep"</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>This is equivalent to the following code fragment:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.25: Equivalent code.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">answer</span><span class="o">;</span>
<span class="lineno">2 </span><span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">&lt;</span> <span class="mf">0.05</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">3 </span>    <span class="n">answer</span> <span class="o">=</span> <span class="s">"reject"</span><span class="o">;</span>
<span class="lineno">4 </span><span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">5 </span>    <span class="n">answer</span> <span class="o">=</span> <span class="s">"keep"</span><span class="o">;</span>
<span class="lineno">6 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h3><span class="mw-headline" id="Switch">Switch</span></h3> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code> conditional statement is basically a shorthand version of writing many <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code>...<code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> statements. The <code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code> block evaluates a <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code>, or <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code> (or <code><a href="/wiki/Java_Programming/Keywords/enum" title="Java Programming/Keywords/enum"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">enum</font></a></code>, starting in J2SE 5.0; or <code><a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a></code>, starting in J2SE 7.0), and, based on the value provided, jumps to a specific <code><a href="/wiki/Java_Programming/Keywords/case" title="Java Programming/Keywords/case"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">case</font></a></code> within the switch block and executes code until the <code><a href="/wiki/Java_Programming/Keywords/break" title="Java Programming/Keywords/break"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">break</font></a></code> command is encountered or the end of the block. If the switch value does not match any of the case values, execution will jump to the optional <code><a href="/wiki/Java_Programming/Keywords/default" title="Java Programming/Keywords/default"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">default</font></a></code> case.</p> 
      <p>The structure of a <code>switch</code> statement is as follows:</p> 
      <table style="margin: auto"> 
       <tbody>
        <tr> 
         <td>switch (<i><b>int<sub>1</sub> or char<sub>1</sub> or short<sub>1</sub> or byte<sub>1</sub> or enum<sub>1</sub> or String value<sub>1</sub></b></i>) { 
          <dl> 
           <dd>
            case 
            <i><b>case value<sub>1</sub></b></i>: 
            <dl> 
             <dd>
              <i><b>statement<sub>1.1</sub></b></i>
             </dd> 
             <dd>
              ...
             </dd> 
             <dd>
              <i><b>statement<sub>1.n</sub></b></i>
             </dd> 
             <dd>
              break;
             </dd> 
            </dl> 
           </dd> 
           <dd>
            case 
            <i><b>case value<sub>2</sub></b></i>: 
            <dl> 
             <dd>
              <i><b>statement<sub>2.1</sub></b></i>
             </dd> 
             <dd>
              ...
             </dd> 
             <dd>
              <i><b>statement<sub>2.n</sub></b></i>
             </dd> 
             <dd>
              break;
             </dd> 
            </dl> 
           </dd> 
           <dd>
            default: 
            <dl> 
             <dd>
              <i><b>statement<sub>n.1</sub></b></i>
             </dd> 
             <dd>
              ...
             </dd> 
             <dd>
              <i><b>statement<sub>n.n</sub></b></i>
             </dd> 
            </dl> 
           </dd> 
          </dl> <p>}</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Here is an example to illustrate:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.26: A switch block.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="hll"><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class="lineno"> 2 </span><span class="hll"><span class="k">switch</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 3 </span><span class="hll">    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class="lineno"> 4 </span>        <span class="c1">// i doesn't equal 1, so this code won't execute</span>
<span class="lineno"> 5 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"i equals 1"</span><span class="o">);</span>
<span class="lineno"> 6 </span>        <span class="k">break</span><span class="o">;</span>
<span class="lineno"> 7 </span><span class="hll">    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
</span><span class="lineno"> 8 </span>        <span class="c1">// i doesn't equal 2, so this code won't execute</span>
<span class="lineno"> 9 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"i equals 2"</span><span class="o">);</span>
<span class="lineno">10 </span>        <span class="k">break</span><span class="o">;</span>
<span class="lineno">11 </span><span class="hll">    <span class="k">default</span><span class="o">:</span>
</span><span class="lineno">12 </span>        <span class="c1">// i has not been handled so far, so this code will execute</span>
<span class="lineno">13 </span><span class="hll">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"i equals something other than 1 or 2"</span><span class="o">);</span>
</span><span class="lineno">14 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.26</b> <pre style="background-color:#000; color:#fff;">
i equals something other than 1 or 2
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>If a case does not end with the <code>break</code> statement, then the next case will be checked, otherwise the execution will jump to the end of the <code>switch</code> statement.</p> 
      <p>Look at this example to see how it's done:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.27: A switch block containing a case without break.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="hll"><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class="lineno"> 2 </span><span class="hll"><span class="k">switch</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 3 </span><span class="hll">    <span class="k">case</span> <span class="o">-</span><span class="mi">1</span><span class="o">:</span>
</span><span class="lineno"> 4 </span><span class="hll">    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
</span><span class="lineno"> 5 </span>        <span class="c1">// i is -1, so it will fall through to this case and execute this code</span>
<span class="lineno"> 6 </span><span class="hll">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"i is 1 or -1"</span><span class="o">);</span>
</span><span class="lineno"> 7 </span><span class="hll">        <span class="k">break</span><span class="o">;</span>
</span><span class="lineno"> 8 </span>    <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
<span class="lineno"> 9 </span>        <span class="c1">// The break command is used before this case, so if i is 1 or -1, this will not execute</span>
<span class="lineno">10 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"i is 0"</span><span class="o">);</span>
<span class="lineno">11 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.27</b> <pre style="background-color:#000; color:#fff;">
i is 1 or -1
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Starting in J2SE 5.0, the <code>switch</code> statement can also be used with an <code><a href="/wiki/Java_Programming/Keywords/enum" title="Java Programming/Keywords/enum"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">enum</font></a></code> value instead of an integer.</p> 
      <p>Though <code>enums</code> have not been covered yet, here is an example so you can see how it's done (note that the enum constants in the cases do not need to be qualified with the type:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.28: A switch block with an enum type.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="hll"><span class="n">Day</span> <span class="n">day</span> <span class="o">=</span> <span class="n">Day</span><span class="o">.</span><span class="na">MONDAY</span><span class="o">;</span> <span class="c1">// Day is a fictional enum type containing the days of the week</span>
</span><span class="lineno"> 2 </span><span class="hll"><span class="k">switch</span><span class="o">(</span><span class="n">day</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 3 </span><span class="hll">    <span class="k">case</span> <span class="n">MONDAY</span><span class="o">:</span>
</span><span class="lineno"> 4 </span>        <span class="c1">// Since day == Day.MONDAY, this statement will execute</span>
<span class="lineno"> 5 </span><span class="hll">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Mondays are the worst!"</span><span class="o">);</span>
</span><span class="lineno"> 6 </span><span class="hll">        <span class="k">break</span><span class="o">;</span>
</span><span class="lineno"> 7 </span>    <span class="k">case</span> <span class="n">TUESDAY</span><span class="o">:</span>
<span class="lineno"> 8 </span>    <span class="k">case</span> <span class="n">WEDNESDAY</span><span class="o">:</span>
<span class="lineno"> 9 </span>    <span class="k">case</span> <span class="n">THURSDAY</span><span class="o">:</span>
<span class="lineno">10 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Weekdays are so-so."</span><span class="o">);</span>
<span class="lineno">11 </span>        <span class="k">break</span><span class="o">;</span>
<span class="lineno">12 </span>    <span class="k">case</span> <span class="n">FRIDAY</span><span class="o">:</span>
<span class="lineno">13 </span>    <span class="k">case</span> <span class="n">SATURDAY</span><span class="o">:</span>
<span class="lineno">14 </span>    <span class="k">case</span> <span class="n">SUNDAY</span><span class="o">:</span>
<span class="lineno">15 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Weekends are the best!"</span><span class="o">);</span>
<span class="lineno">16 </span>        <span class="k">break</span><span class="o">;</span>
<span class="lineno">17 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.28</b> <pre style="background-color:#000; color:#fff;">
Mondays are the worst!
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Starting in J2SE 7.0, the <code>switch</code> statement can also be used with an <code><a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a></code> value instead of an integer.</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.29: A switch block with a String type.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="hll"><span class="n">String</span> <span class="n">day</span> <span class="o">=</span> <span class="s">"Monday"</span><span class="o">;</span>
</span><span class="lineno"> 2 </span><span class="hll"><span class="k">switch</span><span class="o">(</span><span class="n">day</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 3 </span><span class="hll">    <span class="k">case</span> <span class="s">"Monday"</span><span class="o">:</span>
</span><span class="lineno"> 4 </span>        <span class="c1">// Since day == "Monday", this statement will execute</span>
<span class="lineno"> 5 </span><span class="hll">        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Mondays are the worst!"</span><span class="o">);</span>
</span><span class="lineno"> 6 </span><span class="hll">        <span class="k">break</span><span class="o">;</span>
</span><span class="lineno"> 7 </span>    <span class="k">case</span> <span class="s">"Tuesday"</span><span class="o">:</span>
<span class="lineno"> 8 </span>    <span class="k">case</span> <span class="s">"Wednesday"</span><span class="o">:</span>
<span class="lineno"> 9 </span>    <span class="k">case</span> <span class="s">"Thursday"</span><span class="o">:</span>
<span class="lineno">10 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Weekdays are so-so."</span><span class="o">);</span>
<span class="lineno">11 </span>        <span class="k">break</span><span class="o">;</span>
<span class="lineno">12 </span>    <span class="k">case</span> <span class="s">"Friday"</span><span class="o">:</span>
<span class="lineno">13 </span>    <span class="k">case</span> <span class="s">"Saturday"</span><span class="o">:</span>
<span class="lineno">14 </span>    <span class="k">case</span> <span class="s">"Sunday"</span><span class="o">:</span>
<span class="lineno">15 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Weekends are the best!"</span><span class="o">);</span>
<span class="lineno">16 </span>        <span class="k">break</span><span class="o">;</span>
<span class="lineno">17 </span>    <span class="k">default</span><span class="o">:</span>
<span class="lineno">18 </span>        <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">"Invalid day of the week: "</span> <span class="o">+</span> <span class="n">day</span><span class="o">);</span>
<span class="lineno">19 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.29</b> <pre style="background-color:#000; color:#fff;">
Mondays are the worst!
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Loop_blocks">Loop blocks</span></h1> 
      <p>Loops are a handy tool that enables programmers to do repetitive tasks with minimal effort. Say we want a program that can count from 1 to 10, we could write the <a href="#code-listing-4">following program</a>.</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-4"><b>Code listing 3.4: Count.java</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kd">class</span> <span class="nc">Count</span> <span class="o">{</span>
<span class="lineno"> 2 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 3 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1 "</span><span class="o">);</span>
<span class="lineno"> 4 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2 "</span><span class="o">);</span>
<span class="lineno"> 5 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3 "</span><span class="o">);</span>
<span class="lineno"> 6 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"4 "</span><span class="o">);</span>
<span class="lineno"> 7 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"5 "</span><span class="o">);</span>
<span class="lineno"> 8 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"6 "</span><span class="o">);</span>
<span class="lineno"> 9 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"7 "</span><span class="o">);</span>
<span class="lineno">10 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"8 "</span><span class="o">);</span>
<span class="lineno">11 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"9 "</span><span class="o">;</span>
<span class="lineno">12 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"10 "</span><span class="o">);</span>
<span class="lineno">13 </span>    <span class="o">}</span>
<span class="lineno">14 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code listing 3.4</b> <pre style="background-color:black; color:white;">
1
2
3
4
5
6
7
8
9
10
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> The task will be completed just fine, the numbers 1 to 10 will be printed in the output, but there are a few problems with this solution:</p> 
      <ul> 
       <li><b>Flexibility</b>: what if we wanted to change the start number or end number? We would have to go through and change them, adding extra lines of code where they're needed.</li> 
       <li><b>Scalability</b>: 10 repeats are trivial, but what if we wanted 100 or even 1000 repeats? The number of lines of code needed would be overwhelming for a large number of iterations.</li> 
       <li><b>Maintenance</b>: where there is a large amount of code, one is more likely to make a mistake.</li> 
       <li><b>Feature</b>: the number of tasks is fixed and doesn't change at each execution.</li> 
      </ul> 
      <p>Using loops we can solve all these problems. Once you get you head around them they will be invaluable to solving many problems in programming.</p> 
      <p>Open up your editing program and create a new file saved as <code>Loop.java</code>. Now type or copy the <a href="#code-listing-5">following code</a>:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-5"><b>Code listing 3.5: Loop.java</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="kd">class</span> <span class="nc">Loop</span> <span class="o">{</span>
<span class="lineno">2 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">3 </span>        <span class="kt">int</span> <span class="n">i</span><span class="o">;</span>
<span class="lineno">4 </span>        <span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="lineno">5 </span><span class="hll">            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
</span><span class="lineno">6 </span>        <span class="o">}</span>
<span class="lineno">7 </span>    <span class="o">}</span>
<span class="lineno">8 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code listing 3.5</b> <pre style="background-color:black; color:white;">
1
2
3
4
5
6
7
8
9
10
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>If we run the program, the same result is produced, but looking at the code, we immediately see the advantages of loops. Instead of executing 10 different lines of code, line 5 executes ten times. 10 lines of code have been reduced to just 4. Furthermore, we may change the number 10 to any number we like. Try it yourself, replace the 10 with your own number.</p> 
      <h3><span class="mw-headline" id="While">While</span></h3> 
      <p><code><a href="/wiki/Java_Programming/Keywords/while" title="Java Programming/Keywords/while"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">while</font></a></code> loops are the simplest form of loop. The <code>while</code> loop repeats a block of code while the specified condition is true. Here is the structure of a <code>while</code> loop:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>while (<i><b>boolean expression<sub>1</sub></b></i>) { 
          <dl> 
           <dd>
            <i><b>statement<sub>1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>n</sub></b></i>
           </dd> 
          </dl> <p>}</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The loop's condition is checked before each iteration of the loop. If the condition is false at the start of the loop, the loop will not be executed at all. The <a href="#code-section-28">code section 3.28</a> sets in <code>squareHigherThan200</code> the smallest integer whose square exceeds 200.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-28"><b>Code section 3.28: The smallest integer whose square exceeds 200.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">squareHigherThan200</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno">2 </span>
<span class="lineno">3 </span><span class="k">while</span> <span class="o">(</span><span class="n">squareHigherThan200</span> <span class="o">*</span> <span class="n">squareHigherThan200</span> <span class="o">&lt;</span> <span class="mi">200</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">4 </span>  <span class="n">squareHigherThan200</span> <span class="o">=</span> <span class="n">squareHigherThan200</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Bombilla_amarilla_-_yellow_Edison_lamp.svg" class="image" title="Note"><img alt="Note" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/30px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png" width="30" height="30" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/45px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/60px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 2x" data-file-width="200" data-file-height="200"></a></td> 
         <td style="background-color:#fffff0; border-left: 4px solid yellow; padding-left: 6px;">If a loop's condition will never become false, such as if the <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/true" title="Java Programming/Literals/Boolean Literals/true"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">true</font></a></code> constant is used for the condition, said loop is known as an <i>infinite loop</i>. Such a loop will repeat indefinitely unless it is <a href="/wiki/Java_Programming/Keywords/break" title="Java Programming/Keywords/break">broken</a> out of. Infinite loops can be used to perform tasks that need to be repeated over and over again without a definite stopping point, such as updating a graphics display.</td> 
        </tr> 
       </tbody>
      </table> 
      <h4><span class="mw-headline" id="Do..._while">Do... while</span></h4> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/do" title="Java Programming/Keywords/do"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">do</font></a></code>-<code><a href="/wiki/Java_Programming/Keywords/while" title="Java Programming/Keywords/while"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">while</font></a></code> loop is functionally similar to the <code>while</code> loop, except the condition is evaluated AFTER the statement executes It is useful when we try to find a data that does the job by randomly browsing an amount of data.</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>do { 
          <dl> 
           <dd>
            <i><b>statement<sub>1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>n</sub></b></i>
           </dd> 
          </dl> <p>} while (<i><b>boolean expression<sub>1</sub></b></i>);</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <h3><span class="mw-headline" id="For">For</span></h3> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/for" title="Java Programming/Keywords/for"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">for</font></a></code> loop is a specialized <code>while</code> loop whose syntax is designed for easy iteration through a sequence of numbers. It consists of the keyword <code>for</code> followed by three extra statements enclosed in parentheses. The first statement is the variable declaration statement, which allows you to declare one or more integer variables. The second is the condition, which is checked the same way as the <code>while</code> loop. Last is the iteration statement, which is used to increment or decrement variables, though any statement is allowed.</p> 
      <p>This is the structure of a <code>for</code> loop:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>for (<i><b>variable declarations</b></i>; <i><b>condition</b></i>; <i><b>iteration statement</b></i>) { 
          <dl> 
           <dd>
            <i><b>statement<sub>1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>n</sub></b></i>
           </dd> 
          </dl> <p>}</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>To clarify how a for loop is used, here is an example:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.29: A <code>for</code> loop.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="lineno">2 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="lineno">3 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code listing 3.29</b> <pre style="background-color:black; color:white;">
1
2
3
4
5
6
7
8
9
10
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <code>for</code> loop is like a template version of the <code>while</code> loop. The alternative code using a <code>while</code> loop would be as follows:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.30: An iteration using a <code>while</code> loop.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">2 </span><span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">3 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="lineno">4 </span>  <span class="n">i</span><span class="o">++;</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <a href="#code-section-31">code section 3.31</a> shows how to iterate with the <code>for</code> loop using multiple variables and the <a href="#code-section-32">code section 3.32</a> shows how any of the parameters of a <code>for</code> loop can be skipped. Skip them all, and you have an infinitely repeating loop.</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-31"><b>Code section 3.31: The <code>for</code> loop using multiple variables.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++,</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
<span class="lineno">3 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
<span class="lineno">4 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-32"><b>Code section 3.32: The <code>for</code> loop without parameter.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="k">for</span> <span class="o">(;;)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="c1">// Some code</span>
<span class="lineno">3 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <h4><span class="mw-headline" id="For-each">For-each</span></h4> 
      <p><a href="/wiki/Java_Programming/Arrays" title="Java Programming/Arrays">Arrays</a> haven't been covered yet, but you'll want to know how to use the enhanced for loop, called the <code>for-each</code> loop. The <code>for-each</code> loop automatically iterates through a list or array and assigns the value of each index to a variable.</p> 
      <p>To understand the structure of a <code>for-each</code> loop, look at the following example:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.33: A <code>for-each</code> loop.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span><span class="o">[]</span> <span class="n">sentence</span> <span class="o">=</span> <span class="o">{</span><span class="s">"I"</span><span class="o">,</span> <span class="s">"am"</span><span class="o">,</span> <span class="s">"a"</span><span class="o">,</span> <span class="s">"Java"</span><span class="o">,</span> <span class="s">"program."</span><span class="o">};</span>
<span class="lineno">2 </span><span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">word</span> <span class="o">:</span> <span class="n">sentence</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">3 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">word</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
<span class="lineno">4 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.33</b> <pre style="background-color:black; color:white;">
I am a Java program.
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The example iterates through an array of words and prints them out like a sentence. What the loop does is iterate through <code>sentence</code> and assign the value of each index to <code>word</code>, then execute the code block.</p> 
      <p>Here is the general contract of the <code>for-each</code> loop:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>for (<i><b>variable declaration</b></i>&nbsp;: <i><b>array or list</b></i>) { 
          <dl> 
           <dd>
            <i><b>statement<sub>1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>n</sub></b></i>
           </dd> 
          </dl> <p>}</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Make sure that the type of the array or list is assignable to the declared variable, or you will get a compilation error. Notice that the loop automatically exits after the last item in the collection has been examined in the statement block.</p> 
      <p>Although the enhanced for loop can make code much clearer, it can't be used in some common situations.</p> 
      <ul> 
       <li><b>Only access.</b> Elements can not be assigned to, eg, not to increment each element in a collection.</li> 
       <li><b>Only single structure.</b> It's not possible to traverse two structures at once, eg, to compare two arrays.</li> 
       <li><b>Only single element.</b> Use only for single element access, eg, not to compare successive elements.</li> 
       <li><b>Only forward.</b> It's possible to iterate only forward by single steps.</li> 
       <li><b>At least Java 5.</b> Don't use it if you need compatibility with versions before Java 5.</li> 
      </ul> 
      <h2><span class="mw-headline" id="Break_and_continue_keywords">Break and continue keywords</span></h2> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/break" title="Java Programming/Keywords/break"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">break</font></a></code> keyword exits a flow control loop, such as a for loop. It basically <i>breaks</i> the loop.</p> 
      <p>In the <a href="#code-section-34">code section 3.34</a>, the loop would print out all the numbers from 1 to 10, but we have a check for when <code>i</code> equals 5. When the loop reaches its fifth iteration, it will be cut short by the <code>break</code> statement, at which point it will exit the loop.</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-34"><b>Code section 3.34: An interrupted <code>for</code> loop.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="lineno">2 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="lineno">3 </span>    <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">4 </span>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"STOP!"</span><span class="o">);</span>
<span class="lineno">5 </span>       <span class="k">break</span><span class="o">;</span>
<span class="lineno">6 </span>    <span class="o">}</span>
<span class="lineno">7 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.34</b> <pre style="background-color:black; color:white;">
1
2
3
4
5
STOP!
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/continue" title="Java Programming/Keywords/continue"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">continue</font></a></code> keyword jumps straight to the next iteration of a loop and evaluates the boolean expression controlling the loop. The <a href="#code-section-35">code section 3.35</a> is an example of the <code>continue</code> statement in action:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-35"><b>Code section 3.35: A <code>for</code> loop with a skipped iteration.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="lineno">2 </span>    <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">3 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Caught i == 5"</span><span class="o">);</span>
<span class="lineno">4 </span>        <span class="k">continue</span><span class="o">;</span>
<span class="lineno">5 </span>    <span class="o">}</span>
<span class="lineno">6 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="lineno">7 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.35</b> <pre style="background-color:black; color:white;">
1
2
3
4
Caught i == 5
6
7
8
9
10
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>As the <code>break</code> and <code>continue</code> statements reduce the readability of the code, it is recommended to reduce their use or replace them with the use of <code>if</code> and <code>while</code> blocks. Some IDE refactoring operations will fail because of such statements.</p> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.2</b>: Consider the following code:</p> 
        <table style="padding:2px; margin:2px;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
           <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="question-2"><b>Question 3.2: Loops and conditions.</b></span> 
            <div class="mw-highlight mw-content-ltr" dir="ltr"> 
             <pre>
<span class="lineno"> 1 </span><span class="kt">int</span> <span class="n">numberOfItems</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno"> 2 </span><span class="kt">int</span> <span class="n">currentItems</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno"> 3 </span><span class="kt">int</span> <span class="n">currentCandidate</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno"> 4 </span>
<span class="lineno"> 5 </span><span class="k">while</span> <span class="o">(</span><span class="n">currentItems</span> <span class="o">&lt;</span> <span class="n">numberOfItems</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 6 </span>  <span class="n">currentCandidate</span> <span class="o">=</span> <span class="n">currentCandidate</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno"> 7 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test with integer: "</span> <span class="o">+</span> <span class="n">currentCandidate</span><span class="o">);</span>
<span class="lineno"> 8 </span> 
<span class="lineno"> 9 </span>  <span class="kt">boolean</span> <span class="n">found</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="lineno">10 </span>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">currentCandidate</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
<span class="lineno">11 </span>   
<span class="lineno">12 </span>    <span class="c1">// Test if i is a divisor of currentCandidate</span>
<span class="lineno">13 </span>    <span class="k">if</span> <span class="o">((</span><span class="n">currentCandidate</span> <span class="o">%</span> <span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">14 </span>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Not matching..."</span><span class="o">);</span>
<span class="lineno">15 </span>      <span class="n">found</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="lineno">16 </span>      <span class="k">break</span><span class="o">;</span>
<span class="lineno">17 </span>    <span class="o">}</span>
<span class="lineno">18 </span>   
<span class="lineno">19 </span>  <span class="o">}</span>
<span class="lineno">20 </span> 
<span class="lineno">21 </span>  <span class="k">if</span> <span class="o">(</span><span class="n">found</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">22 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Matching!"</span><span class="o">);</span>
<span class="lineno">23 </span>    <span class="n">currentItems</span> <span class="o">=</span> <span class="n">currentItems</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">24 </span>  <span class="o">}</span>
<span class="lineno">25 </span><span class="o">}</span>
<span class="lineno">26 </span>
<span class="lineno">27 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Find the value: "</span> <span class="o">+</span> <span class="n">currentCandidate</span><span class="o">);</span>
</pre>
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
        <p>What will be printed in the standard output?</p> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Question 3.2</b> <pre style="background-color:black; color:white;">
Test with integer: 2
Matching!
Test with integer: 3
Matching!
Test with integer: 4
Not matching...
Test with integer: 5
Matching!
Test with integer: 6
Not matching...
Test with integer: 7
Matching!
Test with integer: 8
Not matching...
Test with integer: 9
Not matching...
Test with integer: 10
Not matching...
Test with integer: 11
Matching!
Find the value: 11
</pre></td> 
            </tr> 
           </tbody>
          </table> 
          <p>The snippet is searching the 5<sup>th</sup> <a href="https://en.wikipedia.org/wiki/Prime_number" class="extiw" title="w:Prime number">prime number</a>, that is to say: 11. It iterates on each positive integer from 2 (2, 3, 4, 5, 6, 7, 8, 9, 10, 11...), among them, it counts the prime numbers (2, 3, 5, 7, 11) and it stops at the 5<sup>th</sup> one.</p> 
          <p>So the snippet first iterates on each positive integer from 2 using the <code>while</code> loop:</p> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="answer-2-1"><b>Answer 3.2.1: <code>while</code> loop.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kt">int</span> <span class="n">numberOfItems</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno"> 2 </span><span class="kt">int</span> <span class="n">currentItems</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno"> 3 </span><span class="kt">int</span> <span class="n">currentCandidate</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno"> 4 </span>
<span class="lineno"> 5 </span><span class="k">while</span> <span class="o">(</span><span class="n">currentItems</span> <span class="o">&lt;</span> <span class="n">numberOfItems</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 6 </span><span class="hll">  <span class="n">currentCandidate</span> <span class="o">=</span> <span class="n">currentCandidate</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="lineno"> 7 </span><span class="hll">  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test with integer: "</span> <span class="o">+</span> <span class="n">currentCandidate</span><span class="o">);</span>
</span><span class="lineno"> 8 </span><span class="hll"> 
</span><span class="lineno"> 9 </span><span class="hll">  <span class="kt">boolean</span> <span class="n">found</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="lineno">10 </span><span class="hll">  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">currentCandidate</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class="lineno">11 </span><span class="hll">   
</span><span class="lineno">12 </span><span class="hll">    <span class="c1">// Test if i is a divisor of currentCandidate</span>
</span><span class="lineno">13 </span><span class="hll">    <span class="k">if</span> <span class="o">((</span><span class="n">currentCandidate</span> <span class="o">%</span> <span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">14 </span><span class="hll">      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Not matching..."</span><span class="o">);</span>
</span><span class="lineno">15 </span><span class="hll">      <span class="n">found</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="lineno">16 </span><span class="hll">      <span class="k">break</span><span class="o">;</span>
</span><span class="lineno">17 </span><span class="hll">    <span class="o">}</span>
</span><span class="lineno">18 </span><span class="hll">   
</span><span class="lineno">19 </span><span class="hll">  <span class="o">}</span>
</span><span class="lineno">20 </span><span class="hll"> 
</span><span class="lineno">21 </span><span class="hll">  <span class="k">if</span> <span class="o">(</span><span class="n">found</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">22 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Matching!"</span><span class="o">);</span>
</span><span class="lineno">23 </span><span class="hll">    <span class="n">currentItems</span> <span class="o">=</span> <span class="n">currentItems</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="lineno">24 </span><span class="hll">  <span class="o">}</span>
</span><span class="lineno">25 </span><span class="o">}</span>
<span class="lineno">26 </span>
<span class="lineno">27 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Find the value: "</span> <span class="o">+</span> <span class="n">currentCandidate</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> 
          <p>For each iteration, the current number is either a prime number or not. If it is a prime number, the code at the left will be executed. If it is not a prime number, the code at the right will be executed.</p> 
          <table style="width: 100%;"> 
           <tbody>
            <tr> 
             <td> 
              <table style="padding:2px; margin:2px;"> 
               <tbody>
                <tr valign="top"> 
                 <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
                 <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="answer-2-2"><b>Answer 3.2.2: A prime number.</b></span> 
                  <div class="mw-highlight mw-content-ltr" dir="ltr"> 
                   <pre>
<span class="lineno"> 1 </span><span class="kt">int</span> <span class="n">numberOfItems</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno"> 2 </span><span class="kt">int</span> <span class="n">currentItems</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno"> 3 </span><span class="kt">int</span> <span class="n">currentCandidate</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno"> 4 </span>
<span class="lineno"> 5 </span><span class="k">while</span> <span class="o">(</span><span class="n">currentItems</span> <span class="o">&lt;</span> <span class="n">numberOfItems</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 6 </span><span class="hll">  <span class="n">currentCandidate</span> <span class="o">=</span> <span class="n">currentCandidate</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="lineno"> 7 </span><span class="hll">  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test with integer: "</span> <span class="o">+</span> <span class="n">currentCandidate</span><span class="o">);</span>
</span><span class="lineno"> 8 </span><span class="hll"> 
</span><span class="lineno"> 9 </span><span class="hll">  <span class="kt">boolean</span> <span class="n">found</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="lineno">10 </span><span class="hll">  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">currentCandidate</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class="lineno">11 </span><span class="hll">   
</span><span class="lineno">12 </span><span class="hll">    <span class="c1">// Test if i is a divisor of currentCandidate</span>
</span><span class="lineno">13 </span><span class="hll">    <span class="k">if</span> <span class="o">((</span><span class="n">currentCandidate</span> <span class="o">%</span> <span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">14 </span>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Not matching..."</span><span class="o">);</span>
<span class="lineno">15 </span>      <span class="n">found</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="lineno">16 </span>      <span class="k">break</span><span class="o">;</span>
<span class="lineno">17 </span>    <span class="o">}</span>
<span class="lineno">18 </span><span class="hll">   
</span><span class="lineno">19 </span><span class="hll">  <span class="o">}</span>
</span><span class="lineno">20 </span><span class="hll"> 
</span><span class="lineno">21 </span><span class="hll">  <span class="k">if</span> <span class="o">(</span><span class="n">found</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">22 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Matching!"</span><span class="o">);</span>
</span><span class="lineno">23 </span><span class="hll">    <span class="n">currentItems</span> <span class="o">=</span> <span class="n">currentItems</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="lineno">24 </span><span class="hll">  <span class="o">}</span>
</span><span class="lineno">25 </span><span class="o">}</span>
<span class="lineno">26 </span>
<span class="lineno">27 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Find the value: "</span> <span class="o">+</span> <span class="n">currentCandidate</span><span class="o">);</span>
</pre>
                  </div> </td> 
                </tr> 
               </tbody>
              </table> </td> 
             <td> 
              <table style="padding:2px; margin:2px;"> 
               <tbody>
                <tr valign="top"> 
                 <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
                 <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="answer-2-3"><b>Answer 3.2.3: Not a prime number.</b></span> 
                  <div class="mw-highlight mw-content-ltr" dir="ltr"> 
                   <pre>
<span class="lineno"> 1 </span><span class="kt">int</span> <span class="n">numberOfItems</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno"> 2 </span><span class="kt">int</span> <span class="n">currentItems</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno"> 3 </span><span class="kt">int</span> <span class="n">currentCandidate</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno"> 4 </span>
<span class="lineno"> 5 </span><span class="k">while</span> <span class="o">(</span><span class="n">currentItems</span> <span class="o">&lt;</span> <span class="n">numberOfItems</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 6 </span><span class="hll">  <span class="n">currentCandidate</span> <span class="o">=</span> <span class="n">currentCandidate</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="lineno"> 7 </span><span class="hll">  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test with integer: "</span> <span class="o">+</span> <span class="n">currentCandidate</span><span class="o">);</span>
</span><span class="lineno"> 8 </span><span class="hll"> 
</span><span class="lineno"> 9 </span><span class="hll">  <span class="kt">boolean</span> <span class="n">found</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="lineno">10 </span><span class="hll">  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">currentCandidate</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class="lineno">11 </span><span class="hll">   
</span><span class="lineno">12 </span><span class="hll">    <span class="c1">// Test if i is a divisor of currentCandidate</span>
</span><span class="lineno">13 </span><span class="hll">    <span class="k">if</span> <span class="o">((</span><span class="n">currentCandidate</span> <span class="o">%</span> <span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">14 </span><span class="hll">      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Not matching..."</span><span class="o">);</span>
</span><span class="lineno">15 </span><span class="hll">      <span class="n">found</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="lineno">16 </span><span class="hll">      <span class="k">break</span><span class="o">;</span>
</span><span class="lineno">17 </span><span class="hll">    <span class="o">}</span>
</span><span class="lineno">18 </span><span class="hll">   
</span><span class="lineno">19 </span><span class="hll">  <span class="o">}</span>
</span><span class="lineno">20 </span><span class="hll"> 
</span><span class="lineno">21 </span><span class="hll">  <span class="k">if</span> <span class="o">(</span><span class="n">found</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">22 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Matching!"</span><span class="o">);</span>
<span class="lineno">23 </span>    <span class="n">currentItems</span> <span class="o">=</span> <span class="n">currentItems</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">24 </span>  <span class="o">}</span>
<span class="lineno">25 </span><span class="o">}</span>
<span class="lineno">26 </span>
<span class="lineno">27 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Find the value: "</span> <span class="o">+</span> <span class="n">currentCandidate</span><span class="o">);</span>
</pre>
                  </div> </td> 
                </tr> 
               </tbody>
              </table> </td> 
            </tr> 
           </tbody>
          </table> 
          <p>The prime numbers are counted using <code>currentItems</code>. When <code>currentItems</code> is equal to <code>numberOfItems</code> (5), the program go out of the <code>while</code> loop. <code>currentCandidate</code> contains the last number, that is to say the 5<sup>th</sup> prime number:</p> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="answer-2-4"><b>Answer 3.2.4: End of the program.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kt">int</span> <span class="n">numberOfItems</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno"> 2 </span><span class="kt">int</span> <span class="n">currentItems</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno"> 3 </span><span class="kt">int</span> <span class="n">currentCandidate</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno"> 4 </span>
<span class="lineno"> 5 </span><span class="hll"><span class="k">while</span> <span class="o">(</span><span class="n">currentItems</span> <span class="o">&lt;</span> <span class="n">numberOfItems</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno"> 6 </span>  <span class="n">currentCandidate</span> <span class="o">=</span> <span class="n">currentCandidate</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno"> 7 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Test with integer: "</span> <span class="o">+</span> <span class="n">currentCandidate</span><span class="o">);</span>
<span class="lineno"> 8 </span> 
<span class="lineno"> 9 </span>  <span class="kt">boolean</span> <span class="n">found</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="lineno">10 </span>  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">currentCandidate</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
<span class="lineno">11 </span>   
<span class="lineno">12 </span>    <span class="c1">// Test if i is a divisor of currentCandidate</span>
<span class="lineno">13 </span>    <span class="k">if</span> <span class="o">((</span><span class="n">currentCandidate</span> <span class="o">%</span> <span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">14 </span>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Not matching..."</span><span class="o">);</span>
<span class="lineno">15 </span>      <span class="n">found</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="lineno">16 </span>      <span class="k">break</span><span class="o">;</span>
<span class="lineno">17 </span>    <span class="o">}</span>
<span class="lineno">18 </span>   
<span class="lineno">19 </span>  <span class="o">}</span>
<span class="lineno">20 </span> 
<span class="lineno">21 </span>  <span class="k">if</span> <span class="o">(</span><span class="n">found</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">22 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Matching!"</span><span class="o">);</span>
<span class="lineno">23 </span>    <span class="n">currentItems</span> <span class="o">=</span> <span class="n">currentItems</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">24 </span>  <span class="o">}</span>
<span class="lineno">25 </span><span class="o">}</span>
<span class="lineno">26 </span><span class="hll">
</span><span class="lineno">27 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Find the value: "</span> <span class="o">+</span> <span class="n">currentCandidate</span><span class="o">);</span>
</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> 
         </div> 
        </div> 
       </div> 
      </div> 
      <h2><span class="mw-headline" id="Labels">Labels</span></h2> 
      <p>Labels can be used to give a name to a loop. The reason to do this is so we can break out of or continue with upper-level loops from a nested loop.</p> 
      <p>Here is how to label a loop:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td><i><b>label name</b></i>:<i><b>loop</b></i></td> 
        </tr> 
       </tbody>
      </table> 
      <p>To break out of or continue with a loop, use the <code>break</code> or <code>continue</code> keyword followed by the name of the loop.</p> 
      <p>For example:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-36"><b>Code section 3.36: A double <code>for</code> loop.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">;</span>
<span class="lineno"> 2 </span><span class="kt">int</span><span class="o">[][]</span> <span class="n">nums</span> <span class="o">=</span> <span class="o">{</span>
<span class="lineno"> 3 </span>    <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">},</span>
<span class="lineno"> 4 </span>    <span class="o">{</span><span class="mi">6</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">7</span><span class="o">},</span>
<span class="lineno"> 5 </span>    <span class="o">{</span><span class="mi">8</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">}</span>
<span class="lineno"> 6 </span><span class="o">};</span>
<span class="lineno"> 7 </span>
<span class="lineno"> 8 </span><span class="hll"><span class="nl">Outer:</span>
</span><span class="lineno"> 9 </span><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
<span class="lineno">10 </span>    <span class="k">for</span> <span class="o">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
<span class="lineno">11 </span>        <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">9</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">12 </span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Found number 9 at ("</span> <span class="o">+</span> <span class="n">i</span> <span class="o">+</span> <span class="s">", "</span> <span class="o">+</span> <span class="n">j</span> <span class="o">+</span> <span class="s">")"</span><span class="o">);</span>
<span class="lineno">13 </span>            <span class="k">break</span> <span class="n">Outer</span><span class="o">;</span>
<span class="lineno">14 </span>        <span class="o">}</span>
<span class="lineno">15 </span>    <span class="o">}</span>
<span class="lineno">16 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.36</b> <pre style="background-color:black; color:white;">
Found number 9 at (1, 1)
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>You needn't worry if you don't understand all the code, but look at how the label is used to break out of the outer loop from the inner loop. However, as such a code is hard to read and maintain, it is highly recommended not to use labels.</p> 
      <h2><span class="mw-headline" id="Try..._catch_blocks">Try... catch blocks</span></h2> 
      <dl> 
       <dd>
        <i>See also <a href="/wiki/Java_Programming/Throwing_and_Catching_Exceptions" title="Java Programming/Throwing and Catching Exceptions">Throwing and Catching Exceptions</a>.</i>
       </dd> 
      </dl> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/try" title="Java Programming/Keywords/try"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">try</font></a></code>-<code><a href="/wiki/Java_Programming/Keywords/catch" title="Java Programming/Keywords/catch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">catch</font></a></code> blocks are used to catch any exceptions or other throwable objects within the code.</p> 
      <p>Here's what <code>try-catch</code> blocks looks like:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>try { 
          <dl> 
           <dd>
            <i><b>statement<sub>1.1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>1.2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>1.n</sub></b></i>
           </dd> 
          </dl> <p>} catch (<i><b>exception<sub>1</sub></b></i>) {</p> 
          <dl> 
           <dd>
            <i><b>statement<sub>2.1</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>2.n</sub></b></i>
           </dd> 
          </dl> <p>}</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <a href="#code-listing-6">code listing 3.6</a> tries to print all the arguments that have been passed to the program. However, if there not enough arguments, it will throw an exception.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-6"><b>Code listing 3.6: Attempt.java</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Attempt</span> <span class="o">{</span>
<span class="lineno"> 2 </span>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 3 </span>    <span class="k">try</span> <span class="o">{</span>
<span class="lineno"> 4 </span>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
<span class="lineno"> 5 </span>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
<span class="lineno"> 6 </span>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>
<span class="lineno"> 7 </span>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">3</span><span class="o">]);</span>
<span class="lineno"> 8 </span>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ArrayIndexOutOfBoundsException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 9 </span>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Not enough arguments"</span><span class="o">);</span>
<span class="lineno">10 </span>    <span class="o">}</span>
<span class="lineno">11 </span>  <span class="o">}</span>
<span class="lineno">12 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>In addition to the try and catch blocks, a <code><a href="/wiki/Java_Programming/Keywords/finally" title="Java Programming/Keywords/finally"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">finally</font></a></code> block may be present. The finally block is always executed, even if an exception is thrown. It may appear with or without a catch block, but always with a try block.</p> 
      <p>Here is what a finally block looks like:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>try { 
          <dl> 
           <dd>
            <i><b>statement<sub>1.1</sub></b></i>
           </dd> 
           <dd>
            <i><b>statement<sub>1.2</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>1.n</sub></b></i>
           </dd> 
          </dl> <p>} catch (<i><b>exception<sub>1</sub></b></i>) {</p> 
          <dl> 
           <dd>
            <i><b>statement<sub>2.1</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>2.n</sub></b></i>
           </dd> 
          </dl> <p>} finally {</p> 
          <dl> 
           <dd>
            <i><b>statement<sub>3.1</sub></b></i>
           </dd> 
           <dd>
            ...
           </dd> 
           <dd>
            <i><b>statement<sub>3.n</sub></b></i>
           </dd> 
          </dl> <p>}</p> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Examples">Examples</span></h2> 
      <p>The <a href="#code-listing-7">code listing 3.7</a> recieves a number as parameter and print its binary representation.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-7"><b>Code listing 3.7: GetBinary.java</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GetBinary</span> <span class="o">{</span>
<span class="lineno"> 2 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 3 </span>        <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 4 </span>            <span class="c1">// Print usage</span>
<span class="lineno"> 5 </span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Usage: java GetBinary &lt;decimal integer&gt;"</span><span class="o">);</span>
<span class="lineno"> 6 </span>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="lineno"> 7 </span>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno"> 8 </span>            <span class="c1">// Print arguments</span>
<span class="lineno"> 9 </span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Received "</span> <span class="o">+</span> <span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">+</span> <span class="s">" arguments."</span><span class="o">);</span>
<span class="lineno">10 </span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The arguments are:"</span><span class="o">);</span>
<span class="lineno">11 </span>            <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">arg</span> <span class="o">:</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">12 </span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\t"</span> <span class="o">+</span> <span class="n">arg</span><span class="o">);</span>
<span class="lineno">13 </span>            <span class="o">}</span>
<span class="lineno">14 </span>        <span class="o">}</span>
<span class="lineno">15 </span>
<span class="lineno">16 </span>        <span class="kt">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno">17 </span>        <span class="n">String</span> <span class="n">binary</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
<span class="lineno">18 </span>
<span class="lineno">19 </span>        <span class="c1">// Get the input number</span>
<span class="lineno">20 </span>        <span class="k">try</span> <span class="o">{</span>
<span class="lineno">21 </span>            <span class="n">number</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
<span class="lineno">22 </span>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NumberFormatException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">23 </span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Error: argument must be a base-10 integer."</span><span class="o">);</span>
<span class="lineno">24 </span>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="lineno">25 </span>        <span class="o">}</span>
<span class="lineno">26 </span>
<span class="lineno">27 </span>        <span class="c1">// Convert to a binary string</span>
<span class="lineno">28 </span>        <span class="k">do</span> <span class="o">{</span>
<span class="lineno">29 </span>            <span class="k">switch</span> <span class="o">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">30 </span>                <span class="k">case</span> <span class="mi">0</span><span class="o">:</span> <span class="n">binary</span> <span class="o">=</span> <span class="sc">'0'</span> <span class="o">+</span> <span class="n">binary</span><span class="o">;</span> <span class="k">break</span><span class="o">;</span>
<span class="lineno">31 </span>                <span class="k">case</span> <span class="mi">1</span><span class="o">:</span> <span class="n">binary</span> <span class="o">=</span> <span class="sc">'1'</span> <span class="o">+</span> <span class="n">binary</span><span class="o">;</span> <span class="k">break</span><span class="o">;</span>
<span class="lineno">32 </span>            <span class="o">}</span>
<span class="lineno">33 </span>            <span class="n">number</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">34 </span>        <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">number</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">);</span>
<span class="lineno">35 </span>
<span class="lineno">36 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The binary representation of "</span> <span class="o">+</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s">" is "</span> <span class="o">+</span> <span class="n">binary</span><span class="o">);</span>
<span class="lineno">37 </span>    <span class="o">}</span>
<span class="lineno">38 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <a href="#code-listing-8">code listing 3.8</a> is a simulation of playing a game called Lucky Sevens. It is a dice game where the player rolls two dice. If the numbers on the dice add up to seven, he wins $4. If they do not, he loses $1. The game shows how to use control flow in a program as well as the fruitlessness of gambling.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-8"><b>Code listing 3.8: LuckySevens.java</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno"> 1 </span><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="lineno"> 2 </span>
<span class="lineno"> 3 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">LuckySevens</span> <span class="o">{</span>
<span class="lineno"> 4 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 5 </span>        <span class="n">Scanner</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
<span class="lineno"> 6 </span>        <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
<span class="lineno"> 7 </span>        <span class="n">String</span> <span class="n">input</span><span class="o">;</span>
<span class="lineno"> 8 </span>        <span class="kt">int</span> <span class="n">startingCash</span><span class="o">,</span> <span class="n">cash</span><span class="o">,</span> <span class="n">maxCash</span><span class="o">,</span> <span class="n">rolls</span><span class="o">,</span> <span class="n">roll</span><span class="o">;</span>
<span class="lineno"> 9 </span>
<span class="lineno">10 </span>        <span class="c1">// Loop until "quit" is input</span>
<span class="lineno">11 </span>        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">12 </span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Enter the amount of cash to start with (or \"quit\" to quit): "</span><span class="o">);</span>
<span class="lineno">13 </span>
<span class="lineno">14 </span>            <span class="n">input</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
<span class="lineno">15 </span>
<span class="lineno">16 </span>            <span class="c1">// Check if user wants to exit</span>
<span class="lineno">17 </span>            <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"quit"</span><span class="o">))</span> <span class="o">{</span>
<span class="lineno">18 </span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\tGoodbye."</span><span class="o">);</span>
<span class="lineno">19 </span>                <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="lineno">20 </span>            <span class="o">}</span>
<span class="lineno">21 </span>
<span class="lineno">22 </span>            <span class="c1">// Get number</span>
<span class="lineno">23 </span>            <span class="k">try</span> <span class="o">{</span>
<span class="lineno">24 </span>                <span class="n">startingCash</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
<span class="lineno">25 </span>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NumberFormatException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">26 </span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\tPlease enter a positive integer greater than 0."</span><span class="o">);</span>
<span class="lineno">27 </span>                <span class="k">continue</span><span class="o">;</span>
<span class="lineno">28 </span>            <span class="o">}</span>
<span class="lineno">29 </span>
<span class="lineno">30 </span>            <span class="c1">// You have to start with some money!</span>
<span class="lineno">31 </span>            <span class="k">if</span> <span class="o">(</span><span class="n">startingCash</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">32 </span>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\tPlease enter a positive integer greater than 0."</span><span class="o">);</span>
<span class="lineno">33 </span>                <span class="k">continue</span><span class="o">;</span>
<span class="lineno">34 </span>            <span class="o">}</span>
<span class="lineno">35 </span>
<span class="lineno">36 </span>            <span class="n">cash</span> <span class="o">=</span> <span class="n">startingCash</span><span class="o">;</span>
<span class="lineno">37 </span>            <span class="n">maxCash</span> <span class="o">=</span> <span class="n">cash</span><span class="o">;</span>
<span class="lineno">38 </span>            <span class="n">rolls</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno">39 </span>            <span class="n">roll</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno">40 </span>
<span class="lineno">41 </span>            <span class="c1">// Here is the game loop</span>
<span class="lineno">42 </span>            <span class="k">for</span> <span class="o">(;</span> <span class="n">cash</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">rolls</span><span class="o">++)</span> <span class="o">{</span>
<span class="lineno">43 </span>               <span class="n">roll</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">6</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">44 </span>               <span class="n">roll</span> <span class="o">+=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">6</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">45 </span>
<span class="lineno">46 </span>                <span class="k">if</span> <span class="o">(</span><span class="n">roll</span> <span class="o">==</span> <span class="mi">7</span><span class="o">)</span>
<span class="lineno">47 </span>                    <span class="n">cash</span> <span class="o">+=</span> <span class="mi">4</span><span class="o">;</span>
<span class="lineno">48 </span>                <span class="k">else</span>
<span class="lineno">49 </span>                    <span class="n">cash</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">50 </span>
<span class="lineno">51 </span>                <span class="k">if</span> <span class="o">(</span><span class="n">cash</span> <span class="o">&gt;</span> <span class="n">maxCash</span><span class="o">)</span>
<span class="lineno">52 </span>                    <span class="n">maxCash</span> <span class="o">=</span> <span class="n">cash</span><span class="o">;</span>
<span class="lineno">53 </span>            <span class="o">}</span>
<span class="lineno">54 </span>
<span class="lineno">55 </span>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"\tYou start with $"</span> <span class="o">+</span> <span class="n">startingCash</span> <span class="o">+</span> <span class="s">".\n"</span>
<span class="lineno">56 </span>                    <span class="o">+</span> <span class="s">"\tYou peak at $"</span> <span class="o">+</span> <span class="n">maxCash</span> <span class="o">+</span> <span class="s">".\n"</span>
<span class="lineno">57 </span>      <span class="o">+</span> <span class="s">"\tAfter "</span> <span class="o">+</span> <span class="n">rolls</span> <span class="o">+</span> <span class="s">" rolls, you run out of cash."</span><span class="o">);</span>
<span class="lineno">58 </span>        <span class="o">}</span>
<span class="lineno">59 </span>    <span class="o">}</span>
<span class="lineno">60 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Boolean_expressions">Boolean expressions</span></h1> 
      <p>Boolean values are values that evaluate to either <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/true" title="Java Programming/Literals/Boolean Literals/true"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">true</font></a></code> or <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/false" title="Java Programming/Literals/Boolean Literals/false"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">false</font></a></code>, and are represented by the <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code> data type. Boolean expressions are very similar to mathematical expressions, but instead of using mathematical operators such as "+" or "-", you use comparative or boolean operators such as "==" or "!".</p> 
      <h2><span class="mw-headline" id="Comparative_operators">Comparative operators</span></h2> 
      <p>Java has several operators that can be used to compare variables. For example, how would you tell if one variable has a greater value than another? The answer: use the "greater-than" operator.</p> 
      <p>Here is a list of the comparative operators in Java:</p> 
      <ul> 
       <li><code>&gt;</code>&nbsp;: Greater than</li> 
       <li><code>&lt;</code>&nbsp;: Less than</li> 
       <li><code>&gt;=</code>&nbsp;: Greater than or equal to</li> 
       <li><code>&lt;=</code>&nbsp;: Less than or equal to</li> 
       <li><code>==</code>&nbsp;: Equal to</li> 
       <li><code>!=</code>&nbsp;: Not equal to</li> 
      </ul> 
      <p>To see how these operators are used, look at this example:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-37"><b>Code section 3.37: Comparisons.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">5</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">);</span> <span class="c1">// Value is true because a is greater than b</span>
<span class="lineno">3 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="n">b</span><span class="o">);</span> <span class="c1">// Value is false because a does not equal b</span>
<span class="lineno">4 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">!=</span> <span class="n">b</span><span class="o">);</span> <span class="c1">// Value is true because a does not equal b</span>
<span class="lineno">5 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span> <span class="o">&lt;=</span> <span class="n">a</span><span class="o">);</span> <span class="c1">// Value is true because b is less than a</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.37</b> <pre style="background-color:#000; color:#fff;">
true
false
true
true
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Comparative operators can be used on any primitive types (except <code>boolean</code>), but only the "equals" and "does not equal" operators work on objects. This is because the less-than/greater-than operators cannot be applied to objects, but the equivalency operators can.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Bombilla_amarilla_-_yellow_Edison_lamp.svg" class="image" title="Note"><img alt="Note" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/30px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png" width="30" height="30" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/45px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/60px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 2x" data-file-width="200" data-file-height="200"></a></td> 
         <td style="background-color:#fffff0; border-left: 4px solid yellow; padding-left: 6px;">Specifically, the <code>==</code> and <code>!=</code> operators test whether both variables point to the same object. Objects will be covered later in the tutorial, in the "<a href="/wiki/Java_Programming/Classes,_Objects_and_Types" title="Java Programming/Classes, Objects and Types">Classes, Objects, and Types</a>" module.</td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Boolean_operators">Boolean operators</span></h2> 
      <p>The Java boolean operators are based on the operations of the <a href="https://en.wikipedia.org/wiki/Boolean_algebra" class="extiw" title="wikipedia:Boolean algebra">boolean algebra</a>. The boolean operators operate directly on boolean values.</p> 
      <p>Here is a list of four common boolean operators in Java:</p> 
      <ul> 
       <li><code>!</code>&nbsp;: Boolean NOT</li> 
       <li><code>&amp;&amp;</code>&nbsp;: Boolean AND</li> 
       <li><code>||</code>&nbsp;: Boolean inclusive OR</li> 
       <li><code>^</code>&nbsp;: Boolean exclusive XOR</li> 
      </ul> 
      <p>The boolean NOT operator ("!") inverts the value of a boolean expression. The boolean AND operator ("&amp;&amp;") will result in true if and only if the values on both sides of the operator are true. The boolean inclusive OR operator ("||") will result in true if either or both of the values on the sides of the operator is true. The boolean exclusive XOR operator ("^") will result in true if one and only of the values on the sides of the operator is true.</p> 
      <p>To show how these operators are used, here is an example:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-38"><b>Code section 3.38: Operands.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kt">boolean</span> <span class="n">iMTrue</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="lineno"> 2 </span><span class="kt">boolean</span> <span class="n">iMTrueToo</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
<span class="lineno"> 3 </span><span class="kt">boolean</span> <span class="n">iMFalse</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="lineno"> 4 </span><span class="kt">boolean</span> <span class="n">iMFalseToo</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="lineno"> 5 </span>
<span class="lineno"> 6 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"NOT operand:"</span><span class="o">);</span>
<span class="lineno"> 7 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(!</span><span class="n">iMTrue</span><span class="o">);</span>
<span class="lineno"> 8 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(!</span><span class="n">iMFalse</span><span class="o">);</span>
<span class="lineno"> 9 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(!(</span><span class="mi">4</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">));</span>
<span class="lineno">10 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"AND operand:"</span><span class="o">);</span>
<span class="lineno">11 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMTrue</span> <span class="o">&amp;&amp;</span> <span class="n">iMTrueToo</span><span class="o">);</span>
<span class="lineno">12 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMFalse</span> <span class="o">&amp;&amp;</span> <span class="n">iMFalseToo</span><span class="o">);</span>
<span class="lineno">13 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMTrue</span> <span class="o">&amp;&amp;</span> <span class="n">iMFalse</span><span class="o">);</span>
<span class="lineno">14 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMTrue</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">iMFalse</span><span class="o">);</span>
<span class="lineno">15 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"OR operand:"</span><span class="o">);</span>
<span class="lineno">16 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMTrue</span> <span class="o">||</span> <span class="n">iMTrueToo</span><span class="o">);</span>
<span class="lineno">17 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMFalse</span> <span class="o">||</span> <span class="n">iMFalseToo</span><span class="o">);</span>
<span class="lineno">18 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMTrue</span> <span class="o">||</span> <span class="n">iMFalse</span><span class="o">);</span>
<span class="lineno">19 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMFalse</span> <span class="o">||</span> <span class="o">!</span><span class="n">iMTrue</span><span class="o">);</span>
<span class="lineno">20 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"XOR operand:"</span><span class="o">);</span>
<span class="lineno">21 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMTrue</span> <span class="o">^</span> <span class="n">iMTrueToo</span><span class="o">);</span>
<span class="lineno">22 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMFalse</span> <span class="o">^</span> <span class="n">iMFalseToo</span><span class="o">);</span>
<span class="lineno">23 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMTrue</span> <span class="o">^</span> <span class="n">iMFalse</span><span class="o">);</span>
<span class="lineno">24 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iMFalse</span> <span class="o">^</span> <span class="o">!</span><span class="n">iMTrue</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.38</b> <pre style="background-color:#000; color:#fff;">
NOT operand:
false
true
false
AND operand:
true
false
false
true
OR operand:
true
false
true
false
XOR operand:
false
false
true
false
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Here are the truth tables for the boolean operators:</p> 
      <table class="wikitable"> 
       <tbody>
        <tr> 
         <th>a</th> 
         <th>!a</th> 
        </tr> 
        <tr> 
         <td><span style="color: green;">true</span></td> 
         <td><span style="color: red;">false</span></td> 
        </tr> 
        <tr> 
         <td><span style="color: red;">false</span></td> 
         <td><span style="color: green;">true</span></td> 
        </tr> 
       </tbody>
      </table> 
      <table class="wikitable"> 
       <tbody>
        <tr> 
         <th>a</th> 
         <th>b</th> 
         <th>a &amp;&amp; b</th> 
         <th>a || b</th> 
         <th>a ^ b</th> 
        </tr> 
        <tr> 
         <td><span style="color: green;">true</span></td> 
         <td><span style="color: green;">true</span></td> 
         <td><span style="color: green;">true</span></td> 
         <td><span style="color: green;">true</span></td> 
         <td><span style="color: red;">false</span></td> 
        </tr> 
        <tr> 
         <td><span style="color: green;">true</span></td> 
         <td><span style="color: red;">false</span></td> 
         <td><span style="color: red;">false</span></td> 
         <td><span style="color: green;">true</span></td> 
         <td><span style="color: green;">true</span></td> 
        </tr> 
        <tr> 
         <td><span style="color: red;">false</span></td> 
         <td><span style="color: green;">true</span></td> 
         <td><span style="color: red;">false</span></td> 
         <td><span style="color: green;">true</span></td> 
         <td><span style="color: green;">true</span></td> 
        </tr> 
        <tr> 
         <td><span style="color: red;">false</span></td> 
         <td><span style="color: red;">false</span></td> 
         <td><span style="color: red;">false</span></td> 
         <td><span style="color: red;">false</span></td> 
         <td><span style="color: red;">false</span></td> 
        </tr> 
       </tbody>
      </table> 
      <dl> 
       <dd>
        <i>For help on simplifying complex logic, see <a href="https://en.wikipedia.org/wiki/De_Morgan%27s_laws" class="extiw" title="wikipedia:De Morgan's laws">De Morgan's laws</a>.</i>
       </dd> 
      </dl> 
      <p>In Java, boolean logic has a useful property called <i>short circuiting</i>. This means that expressions will only be evaluated as far as necessary. In the expression <code>(a &amp;&amp; b)</code>, if a is false, then b will not be evaluated because the expression will be false no matter what. Here is an example that shows that the second expression is not automatically checked:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-39"><b>Code section 3.39: Short circuiting.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="mi">4</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">)</span> <span class="o">||</span> <span class="o">((</span><span class="mi">10</span> <span class="o">/</span> <span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="mi">2</span><span class="o">));</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for code section 3.39</b> <pre style="background-color:#000; color:#fff;">
true
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>To disable this property, you can use <code>&amp;</code> instead of <code>&amp;&amp;</code> and <code>|</code> instead of <code>||</code> but it's not recommended.</p> 
      <dl> 
       <dd>
        <i>For the bitwise operations on <code>&amp;</code> and <code>|</code>, see <a href="/wiki/Java_Programming/Basic_arithmetic#Using_bitwise_operators_within_Java" class="mw-redirect" title="Java Programming/Basic arithmetic">Arithmetic expressions</a>.</i>
       </dd> 
      </dl> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Variables">Variables</span></h1> 
      <p>In the Java programming language, the words <b>field</b> and <b>variable</b> are both one and the same thing. Variables are devices that are used to store data, such as a number, or a string of character data.</p> 
      <h2><span class="mw-headline" id="Variables_in_Java_programming">Variables in Java programming</span></h2> 
      <p>Java is considered as a <b>strongly typed</b> programming language. Thus all variables in the Java programming language ought to have a particular <b>data type</b>. This is either declared or inferred and the Java language only allows programs to run if they adhere to type constraints.</p> 
      <p>If you present a numeric type with data that is not numeric, say textual content, then such declarations would violate Java’s type system. This gives Java the ability of <b>type safety</b>. Java checks if an expression or data is encountered with an incorrect type or none at all. It then automatically flags this occurrence as an error at compile time. Most type-related errors are caught by the Java compiler, hence making a program more secure and safe once compiled completely and successfully. Some languages (such as C) define an interpretation of such a statement and use that interpretation without any warning; others (such as PL/I) define a conversion for almost all such statements and perform the conversion to complete the assignment. Some type errors can still occur at runtime because Java supports a cast operation which is a way of changing the type of one expression to another. However, Java performs run time type checking when doing such casts, so an incorrect type cast will cause a runtime exception rather than succeeding silently and allowing data corruption.</p> 
      <p>On the other hand, Java is also known as a <b>hybrid language</b>. While supporting <a href="/wiki/Object_Oriented_Programming" title="Object Oriented Programming">object oriented programming</a> (OOP), Java is not a pure OO language like <a href="/wiki/Programming:Smalltalk" class="mw-redirect" title="Programming:Smalltalk">Smalltalk</a> or <a href="/wiki/Ruby_Programming" title="Ruby Programming">Ruby</a>. Instead, Java offers both object types and <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">primitive types</a>. Primitive types are used for boolean, character, and numeric values and operations. This allows relatively good performance when manipulating numeric data, at the expense of flexibility. For example, you cannot subclass the primitive types and add new operations to them.</p> 
      <h2><span class="mw-headline" id="Kinds_of_variables">Kinds of variables</span></h2> 
      <p>In the Java programming language, there are four kinds of variables.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-9"><b>Code listing 3.9: ClassWithVariables.java</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassWithVariables</span> <span class="o">{</span>
<span class="lineno">2 </span><span class="hll">    <span class="kd">public</span> <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="lineno">3 </span><span class="hll">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="n">isClassUsed</span><span class="o">;</span>
</span><span class="lineno">4 </span>
<span class="lineno">5 </span><span class="hll">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">processData</span><span class="o">(</span><span class="n">String</span> <span class="n">parameter</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">6 </span><span class="hll">      <span class="n">Object</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="lineno">7 </span>    <span class="o">}</span>
<span class="lineno">8 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>In the <a href="#code-listing-9">code listing 3.9</a>, are examples of all four kinds of variables.</p> 
      <ul> 
       <li><b>Instance variables</b>: These are variables that are used to store the state of an object (for example, <code>id</code>). Every object created from a class definition would have its own copy of the variable. It is valid for and occupies storage for as long as the corresponding object is in memory.</li> 
       <li><b>Class variables</b>: These variables are explicitly defined within the class-level scope with a <code><a href="/wiki/Java_Programming/Keywords/static" title="Java Programming/Keywords/static"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">static</font></a></code> modifier (for example, <code>isClassUsed</code>). No other variables can have a <code>static</code> modifier attached to them. Because these variables are defined with the <code>static</code> modifier, there would always be a single copy of these variables no matter how many times the class has been instantiated. They live as long as the class is loaded in memory.</li> 
       <li><b>Parameters</b> or <b>Arguments</b>: These are variables passed into a method signature (for example, <code>parameter</code>). Recall the usage of the <code>args</code> variable in the main method. They are not attached to modifiers (i.e. <code>public</code>, <code>private</code>, <code>protected</code> or <code>static</code>) and they can be used everywhere in the method. They are in memory during the execution of the method and can't be used after the method returns.</li> 
       <li><b>Local variables</b>: These variables are defined and used specifically within the method-level scope (for example, <code>currentValue</code>) but not in the method signature. They do not have any modifiers attached to it. They no longer exist after the method has returned.</li> 
      </ul> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.5</b>: Consider the following code:</p> 
        <table style="padding:2px; margin:2px;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
           <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="question-5"><b>Question 3.5: SomeClass.java</b></span> 
            <div class="mw-highlight mw-content-ltr" dir="ltr"> 
             <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeClass</span> <span class="o">{</span>
<span class="lineno"> 2 </span>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno"> 3 </span>  <span class="kd">public</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
<span class="lineno"> 4 </span>  <span class="kd">private</span> <span class="kt">int</span> <span class="n">b</span><span class="o">;</span>
<span class="lineno"> 5 </span>
<span class="lineno"> 6 </span>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">someMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 7 </span>    <span class="n">d</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
<span class="lineno"> 8 </span>    <span class="kt">int</span> <span class="n">e</span><span class="o">;</span>
<span class="lineno"> 9 </span>  <span class="o">}</span>
<span class="lineno">10 </span><span class="o">}</span>
</pre>
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
        <p>In the example above, we created five variables: <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code> and <code>e</code>. All these variables have the same data type <code>int</code> (integer). However, can you tell what kind of variable each one is?</p> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <ul> 
           <li><code>a</code> and <code>b</code> are <b>instance variables</b>;</li> 
           <li><code>c</code> is a <b>class variable</b>;</li> 
           <li><code>d</code> is a <b>parameter</b> or <b>argument</b>; and,</li> 
           <li><code>e</code> is a <b>local variable</b>.</li> 
          </ul> 
         </div> 
        </div> 
       </div> 
      </div> 
      <h2><span class="mw-headline" id="Creating_variables">Creating variables</span></h2> 
      <div class="thumb tright"> 
       <div class="thumbinner" style="width:302px;">
        <a href="/wiki/File:Java_Numeric_Types_Memory.png" class="image"><img alt="" src="//upload.wikimedia.org/wikipedia/commons/9/93/Java_Numeric_Types_Memory.png" width="300" height="300" class="thumbimage" data-file-width="300" data-file-height="300"></a> 
        <div class="thumbcaption"> 
         <div class="magnify">
          <a href="/wiki/File:Java_Numeric_Types_Memory.png" class="internal" title="Enlarge"></a>
         </div> A graphical representation of computer memory
        </div> 
       </div> 
      </div> 
      <p>Variables and all the information they store are kept in the computer's memory for access. Think of a computer's memory as a table of data — where each cell corresponds to a variable.</p> 
      <p>Upon creating a variable, we basically create a new address space and give it a unique name. Java goes one step further and lets you define what you can place within the variable — in Java parlance you call this a <i>data type</i>. So, you essentially have to do two things in order to create a variable:</p> 
      <ul> 
       <li>Create a variable by giving it a unique name; and,</li> 
       <li>Define a data type for the variable.</li> 
      </ul> 
      <p>The following code demonstrates how a simple variable can be created. This process is known as <i>variable declaration</i>.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-40"><b>Code section 3.40: A simple variable declaration.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Assigning_values_to_variables">Assigning values to variables</span></h2> 
      <p>Because we have provided a data type for the variable, we have a hint as to what the variable can and cannot hold. We know that <code>int</code> (integer) data type supports numbers that are either positive or negative integers. Therefore once a variable is created, we can provide it with any integer value using the following syntax. This process is called an <i>assignment operation</i>.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-41"><b>Code section 3.41: Variable declaration and assignment operation (on different lines).</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Java provides programmers with a simpler way of combining both variable declaration and assignment operation in one line. Consider the following code:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-42"><b>Code section 3.42: Variable declaration and assignment operation (on the same line).</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Grouping_variable_declarations_and_assignment_operations">Grouping variable declarations and assignment operations</span></h2> 
      <p>Consider the following code:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-43"><b>Code section 3.43: Ungrouped declarations.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">a</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">int</span> <span class="n">b</span><span class="o">;</span>
<span class="lineno">3 </span><span class="n">String</span> <span class="n">c</span><span class="o">;</span>
<span class="lineno">4 </span><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="lineno">5 </span><span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
<span class="lineno">6 </span><span class="n">c</span> <span class="o">=</span> <span class="s">"some text"</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>There are various ways by which you can streamline the writing of this code. You can group the declarations of similar data types in one statement, for instance:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-44"><b>Code section 3.44: Grouped declarations.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">String</span> <span class="n">c</span><span class="o">;</span>
<span class="lineno">3 </span><span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="lineno">4 </span><span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
<span class="lineno">5 </span><span class="n">c</span> <span class="o">=</span> <span class="s">"some text"</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Alternatively, you can further reduce the syntax by doing group declarations and assignments together, as such:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-45"><b>Code section 3.45: Grouped declarations and assignments.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">20</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">String</span> <span class="n">c</span> <span class="o">=</span> <span class="s">"some text"</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Identifiers">Identifiers</span></h2> 
      <p>Although <a href="https://en.wikipedia.org/wiki/Address_space" class="extiw" title="w:Address space">memory spaces</a> have their own addresses — usually a hash number such as <code>0xCAD3</code>, etc. — it is much easier to remember a variable's location in the memory if we can give it a recognizable name. <b>Identifiers</b> are the names we give to our variables. You can name your variable anything like <code>aVariable</code>, <code>someVariable</code>, <code>age</code>, <code>someonesImportantData</code>, etcetera. But notice: none of the names we described here has a space within it. Hence, it is pretty obvious that spaces aren't allowed in variable names. In fact, there are a lot of other things that are not allowed in variable names. The things that <i>are</i> allowed are:</p> 
      <ul> 
       <li>Characters <code>A</code> to <code>Z</code> and their lower-case counterparts <code>a</code> to <code>z</code>.</li> 
       <li>Numbers <code>0</code> to <code>9</code>. However, numbers should not come at the beginning of a variable's name.</li> 
       <li>And finally, special characters that include only <code>$</code> (dollar sign) and <code>_</code> (underscore).</li> 
      </ul> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.6</b>: Which of the ones below are proper variable identifiers?</p> 
        <ol> 
         <li><code>f_name</code></li> 
         <li><code>lastname</code></li> 
         <li><code>someones name</code></li> 
         <li><code>$SomeoneElsesName</code></li> 
         <li><code>7days</code></li> 
         <li><code>TheAnswerIs42</code></li> 
        </ol> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <p>I can tell you that 3 and 5 are not the right way to do things around here, the rest are proper identifiers.</p> 
         </div> 
        </div> 
       </div> 
      </div> 
      <p>Any valid variable names might be correct but they are not always what you should be naming your variables for a few reasons as listed below:</p> 
      <ul> 
       <li>The name of the variable should reflect the value within them.</li> 
       <li>The identifier should be named following the naming guidelines or conventions for doing so. We will explain that in a bit.</li> 
       <li>The identifier shouldn't be a nonsense name like <code>lname</code>, you should always name it properly: <code>lastName</code> is the best way of naming a variable.</li> 
      </ul> 
      <h2><span class="mw-headline" id="Naming_conventions_for_identifiers">Naming conventions for identifiers</span></h2> 
      <p>When naming identifiers, you need to use the following guidelines which ensure that your variables are named accurately. As we discussed earlier, we should always name our variables in a way that tells us what they hold. Consider this example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-46"><b>Code section 3.46: Unknown process.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">24</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">365</span><span class="o">;</span>
<span class="lineno">3 </span><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Do you know what this program does? Well, it multiplies two values. That much you guessed right. But, do you know what those values are? Exactly, you don't. Now consider this code:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-47"><b>Code section 3.47: Time conversion.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">24</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">int</span> <span class="n">daysInYear</span> <span class="o">=</span> <span class="mi">365</span><span class="o">;</span>
<span class="lineno">3 </span><span class="kt">int</span> <span class="n">ageInDays</span> <span class="o">=</span> <span class="n">age</span> <span class="o">*</span> <span class="n">daysInYear</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Now you can tell what's happening, can't you? However, before we continue, notice the <i>case</i> of the variables. If a word contains CAPITAL LETTERS, it is in <b>UPPER CASE</b>. If a word has small letters, it is in <b>lower case</b>. Both cases in a word renders it as <b>mIxEd CaSe</b>.</p> 
      <p>The variables we studied so far had a mixed case. When there are two or more words making up the names of a variable, you need to use a special case called the <i>camel-case</i>. Just like the humps of a camel, your words need to stand out. Using this technique, the words <code>first</code> and <code>name</code> could be written as either <code>firstName</code> or <code>FirstName</code>.</p> 
      <p>The first instance, <code>firstName</code> is what we use as the names of variables. Remember though, <code>firstName</code> is not the same as <code>FirstName</code> because Java is <b>case-sensitive</b>. Case-sensitive basically implies that the case in which you wrote one word is the case you have to call that word in when using them later on. Anything other than that is not the same as you intended. You'll know more as you progress. You can hopefully tell now why the variables you were asked to identify weren't proper.</p> 
      <h2><span id="Literals_(values)"></span><span class="mw-headline" id="Literals_.28values.29">Literals (values)</span></h2> 
      <p>Now that we know how variables should be named, let us look at the values of those variables. Simple values like numbers are called <i>literals</i>. This section shows you what literals are and how to use them. Consider the following code:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-48"><b>Code section 3.48: Literals.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">24</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">long</span> <span class="n">bankBalance</span> <span class="o">=</span> <span class="mi">20000005L</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>By now, we've only seen how numbers work in assignment statements. Let's look at data types other than numbers. Characters are basically letters of the English alphabet. When writing a single character, we use single quotes to encapsulate them. Take a look at the code below:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-49"><b>Code section 3.49: Character.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="sc">'a'</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Why, you ask? Well, the explanation is simple. If written without quotes, the system would think it's a variable identifier. That's the very distinction you have to make when differentiating between variables and their literal values. Character data types are a bit unusual. First, they can only hold a single character. What if you had to store a complete name within them, say <i>John</i>, would you write something like:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-50"><b>Code section 3.50: Character list.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">char</span> <span class="n">firstChar</span> <span class="o">=</span> <span class="sc">'J'</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">char</span> <span class="n">secondChar</span> <span class="o">=</span> <span class="sc">'o'</span><span class="o">;</span>
<span class="lineno">3 </span><span class="kt">char</span> <span class="n">thirdChar</span> <span class="o">=</span> <span class="sc">'h'</span><span class="o">;</span>
<span class="lineno">4 </span><span class="kt">char</span> <span class="n">fourthChar</span> <span class="o">=</span> <span class="sc">'n'</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Now, that's pathetic. Thankfully, there's a data type that handles large number of characters, it's called a <code>String</code>. A string can be initialized as follows:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-51"><b>Code section 3.51: String.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="s">"John"</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Notice, the use of double quotation marks instead of single quotation marks. That's the only thing you need to worry about.</p> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Primitive_Types_2">Primitive Types</span></h1> 
      <p>Primitive types are the most basic data types available within the Java language. There are 8: <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/long" title="Java Programming/Keywords/long"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">long</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/float" title="Java Programming/Keywords/float"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">float</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code>. These types serve as the building blocks of data manipulation in Java. Such types serve only one purpose — containing pure, simple values of a kind. Because these data types are defined into the Java type system by default, they come with a number of operations predefined. You can not define a new operation for such primitive types. In the Java type system, there are three further categories of primitives:</p> 
      <ul> 
       <li>Numeric primitives: <code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/long" title="Java Programming/Keywords/long"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">long</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/float" title="Java Programming/Keywords/float"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">float</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code>. These primitive data types hold only numeric data. Operations associated with such data types are those of <a href="/wiki/Java_Programming/Basic_arithmetic" class="mw-redirect" title="Java Programming/Basic arithmetic">simple arithmetic</a> (addition, subtraction, etc.) or of <a href="/wiki/Java_Programming/Boolean_expressions" title="Java Programming/Boolean expressions">comparisons</a> (is greater than, is equal to, etc.)</li> 
       <li>Textual primitives: <code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code>. These primitive data types hold characters (that can be <a href="/wiki/Unicode" title="Unicode">Unicode</a> alphabets or even numbers). Operations associated with such types are those of textual manipulation (comparing two words, joining characters to make words, etc.). However, <code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code> can also support arithmetic operations.</li> 
       <li>Boolean and null primitives: <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code> and <code><a href="/wiki/Java_Programming/Literals/null" class="mw-redirect" title="Java Programming/Literals/null"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">null</font></a></code>.</li> 
      </ul> 
      <p>All the primitive types have a fixed size. Thus, the primitive types are limited to a range of values. A smaller primitive type (<code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code>) can contain less values than a bigger one (<code><a href="/wiki/Java_Programming/Keywords/long" title="Java Programming/Keywords/long"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">long</font></a></code>).</p> 
      <table class="wikitable" style="margin: auto;"> 
       <tbody>
        <tr> 
         <th>Category</th> 
         <th>Types</th> 
         <th>Size (bits)</th> 
         <th>Minimum Value</th> 
         <th>Maximum Value</th> 
         <th>Precision</th> 
         <th>Example</th> 
        </tr> 
        <tr> 
         <th rowspan="5">Integer</th> 
         <td><code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code></td> 
         <td>8</td> 
         <td>-128</td> 
         <td>127</td> 
         <td>From +127 to -128</td> 
         <td><code>byte b = 65;</code></td> 
        </tr> 
        <tr> 
         <td><code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code></td> 
         <td>16</td> 
         <td>0</td> 
         <td>2<sup>16</sup>-1</td> 
         <td>All Unicode characters</td> 
         <td><code>char c = 'A';<br> char c = 65;</code></td> 
        </tr> 
        <tr> 
         <td><code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code></td> 
         <td>16</td> 
         <td>-2<sup>15</sup></td> 
         <td>2<sup>15</sup>-1</td> 
         <td>From +32,767 to -32,768</td> 
         <td><code>short s = 65;</code></td> 
        </tr> 
        <tr> 
         <td><code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code></td> 
         <td>32</td> 
         <td>-2<sup>31</sup></td> 
         <td>2<sup>31</sup>-1</td> 
         <td>From +2,147,483,647 to -2,147,483,648</td> 
         <td><code>int i = 65;</code></td> 
        </tr> 
        <tr> 
         <td><code><a href="/wiki/Java_Programming/Keywords/long" title="Java Programming/Keywords/long"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">long</font></a></code></td> 
         <td>64</td> 
         <td>-2<sup>63</sup></td> 
         <td>2<sup>63</sup>-1</td> 
         <td>From +9,223,372,036,854,775,807 to -9,223,372,036,854,775,808</td> 
         <td><code>long l = 65L;</code></td> 
        </tr> 
        <tr> 
         <th rowspan="2">Floating-point</th> 
         <td><code><a href="/wiki/Java_Programming/Keywords/float" title="Java Programming/Keywords/float"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">float</font></a></code></td> 
         <td>32</td> 
         <td>2<sup>-149</sup></td> 
         <td>(2-2<sup>-23</sup>)·2<sup>127</sup></td> 
         <td>From 3.402,823,5&nbsp;E+38 to 1.4&nbsp;E-45</td> 
         <td><code>float f = 65f;</code></td> 
        </tr> 
        <tr> 
         <td><code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code></td> 
         <td>64</td> 
         <td>2<sup>-1074</sup></td> 
         <td>(2-2<sup>-52</sup>)·2<sup>1023</sup></td> 
         <td>From 1.797,693,134,862,315,7&nbsp;E+308 to 4.9&nbsp;E-324</td> 
         <td><code>double d = 65.55;</code></td> 
        </tr> 
        <tr> 
         <th rowspan="2">Other</th> 
         <td><code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code></td> 
         <td>1</td> 
         <td>--</td> 
         <td>--</td> 
         <td>false, true</td> 
         <td><code>boolean b = true;</code></td> 
        </tr> 
        <tr> 
         <td><code><a href="/wiki/Java_Programming/Keywords/void" title="Java Programming/Keywords/void"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">void</font></a></code></td> 
         <td>--</td> 
         <td>--</td> 
         <td>--</td> 
         <td>--</td> 
         <td>--</td> 
        </tr> 
       </tbody>
      </table> 
      <p>Integer primitive types silently overflow:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-52"><b>Code section 3.52: Several operators.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="lineno">3 </span><span class="hll"><span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
</span><span class="lineno">4 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
<span class="lineno">5 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Console for Code section 3.52</b> <pre style="background-color:#000; color:#fff;">
2147483647
-2147483648
-2147483648
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>As Java is strongly typed, you can't assign a floating point number (a number with a decimal point) to an integer variable:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Nuvola_apps_important.svg" class="image" title="Warning"><img alt="Warning" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/32px-Nuvola_apps_important.svg.png" width="32" height="27" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/48px-Nuvola_apps_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/64px-Nuvola_apps_important.svg.png 2x" data-file-width="600" data-file-height="500"></a></td> 
         <td style="background-color:#fff0f0; border-left: 4px solid red; padding-left: 6px;"><span id="code-section-53" style="color: red;"><b>Code section 3.53: Setting a floating point number as a value to an <code>int</code> (integer) type.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">age</span> <span class="o">=</span> <span class="mf">10.5</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>A primitive type should be set by an appropriate value. The primitive types can be initialized with a literal. Most of the literals are primitive type values, except <a href="/wiki/Java_Programming/Literals/String_Literals" class="mw-redirect" title="Java Programming/Literals/String Literals">String Literals</a>, which are instance of the <code><a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a></code> class.</p> 
      <h2><span class="mw-headline" id="Numbers_in_computer_science">Numbers in computer science</span></h2> 
      <p>Programming may not be as trivial or boring as just crunching huge numbers any more. However, huge chunks of code written in any programming language today, let alone Java, obsessively deal with numbers, be it churning out huge prime numbers,<sup id="cite_ref-note-1_4-0" class="reference"><a href="#cite_note-note-1-4">[1]</a></sup> or just calculating a cost of emission from your scooter. In 1965, <a href="https://en.wikipedia.org/wiki/Gemini_5" class="extiw" title="w:Gemini 5">Gemini V</a> space mission escaped a near-fatal accident because of a programming error.<sup id="cite_ref-note-2_5-0" class="reference"><a href="#cite_note-note-2-5">[2]</a></sup> Again in 1979, a computer program overestimated the ability of five nuclear reactors to withstand earthquakes; the plants shut down temporarily.<sup id="cite_ref-note-3_6-0" class="reference"><a href="#cite_note-note-3-6">[3]</a></sup> There is one thing common to both these programming errors: the subject data, being computed at the time the errors occurred, was numeric. Out of past experience, Java came bundled with revised type checking for numeric data and put significant emphasis on correctly identifying different types of it. You must recognise the importance of numeric data when it comes to programming.</p> 
      <p>Numbers are stored in memory using a binary system. The memory is like a grid of cells:</p> 
      <table class="wikitable" style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
        </tr> 
       </tbody>
      </table> 
      <p>Each cell can contain a <i>binary digit</i> (shortened to <i>bit</i>), that is to say, zero or one:</p> 
      <table class="wikitable" style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
        </tr> 
       </tbody>
      </table> 
      <p>Actually, each cell <b>does</b> contain a binary digit, as one bit is roughly equivalent to <code>1</code> and an empty cell in the memory signifies <code>0</code>. A single binary digit can only hold two possible values: a zero or a one.</p> 
      <table class="wikitable" style="margin: auto; border: 0px;"> 
       <tbody>
        <tr> 
         <td colspan="8" style="border: 0px; background-color: white; text-align: center;"><i>Memory state</i></td> 
         <td style="border: 0px; background-color: white;"></td> 
         <td style="border: 0px; background-color: white; text-align: center;"><i>Gives</i></td> 
        </tr> 
        <tr> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td style="border: 0px; background-color: white; text-align: center;">?</td> 
         <td style="border: 0px; background-color: white; text-align: center;">0</td> 
        </tr> 
        <tr> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;&nbsp;&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td style="border: 0px; background-color: white; text-align: center;">?</td> 
         <td style="border: 0px; background-color: white; text-align: center;">1</td> 
        </tr> 
       </tbody>
      </table> 
      <p>Multiple bits held together can hold multiple permutations — 2 bits can hold 4 possible values, 3 can hold 8, and so on. For instance, the maximum number 8 bits can hold (<code>11111111</code> in binary) is <code>255</code> in the decimal system. So, the numbers from 0 to 255 can fit within 8 bits.</p> 
      <table class="wikitable" style="margin: auto; border: 0px;"> 
       <tbody>
        <tr> 
         <td colspan="8" style="border: 0px; background-color: white; text-align: center;"><i>Memory state</i></td> 
         <td style="border: 0px; background-color: white;"></td> 
         <td style="border: 0px; background-color: white; text-align: center;"><i>Gives</i></td> 
        </tr> 
        <tr> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td style="border: 0px; background-color: white; text-align: center;">?</td> 
         <td style="border: 0px; background-color: white; text-align: center;">0</td> 
        </tr> 
        <tr> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td style="border: 0px; background-color: white; text-align: center;">?</td> 
         <td style="border: 0px; background-color: white; text-align: center;">1</td> 
        </tr> 
        <tr> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td style="border: 0px; background-color: white; text-align: center;">?</td> 
         <td style="border: 0px; background-color: white; text-align: center;">2</td> 
        </tr> 
        <tr> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>0</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td style="border: 0px; background-color: white; text-align: center;">?</td> 
         <td style="border: 0px; background-color: white; text-align: center;">3</td> 
        </tr> 
        <tr> 
         <td colspan="8" style="text-align: center;"><br> ...<br></td> 
         <td style="border: 0px; background-color: white; text-align: center;">...</td> 
        </tr> 
        <tr> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td>&nbsp;<code>1</code>&nbsp;</td> 
         <td style="border: 0px; background-color: white; text-align: center;">?</td> 
         <td style="border: 0px; background-color: white; text-align: center;">255</td> 
        </tr> 
       </tbody>
      </table> 
      <p>It is all good, but this way, we can only host positive numbers (or unsigned integers). They are called <i>unsigned integers</i>. Unsigned integers are whole number values that are all positive and do not attribute to negative values. For this very reason, we would ask one of the 8 bits to hold information about the sign of the number (positive or negative). This leaves us with just 7 bits to actually count out a number. The maximum number that these 7 bits can hold (<code>1111111</code>) is <code>127</code> in the decimal system.</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td style="border: 0px; background-color: white; text-align: center; font-size:200%;"><i>Positive numbers</i></td> 
         <td style="border: 0px; background-color: white; text-align: center; font-size:200%;"><i>Negative numbers</i></td> 
        </tr> 
        <tr> 
         <td> 
          <table class="wikitable" style="margin: auto; border: 0px;"> 
           <tbody>
            <tr> 
             <td colspan="9" style="border: 0px; background-color: white; text-align: center;"><i>Memory state</i></td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td style="border: 0px; background-color: white; text-align: center;"><i>Gives</i></td> 
            </tr> 
            <tr> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white; text-align: center;">?</td> 
             <td style="border: 0px; background-color: white; text-align: center;">0</td> 
            </tr> 
            <tr> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white; text-align: center;">?</td> 
             <td style="border: 0px; background-color: white; text-align: center;">1</td> 
            </tr> 
            <tr> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white; text-align: center;">?</td> 
             <td style="border: 0px; background-color: white; text-align: center;">2</td> 
            </tr> 
            <tr> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white; text-align: center;">?</td> 
             <td style="border: 0px; background-color: white; text-align: center;">3</td> 
            </tr> 
            <tr> 
             <td style="text-align: center;"><br> ...<br></td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td colspan="7" style="text-align: center;"><br> ...<br></td> 
             <td style="border: 0px; background-color: white; text-align: center;">...</td> 
            </tr> 
            <tr> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white; text-align: center;">?</td> 
             <td style="border: 0px; background-color: white; text-align: center;">127</td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td> 
          <table class="wikitable" style="margin: auto; border: 0px;"> 
           <tbody>
            <tr> 
             <td colspan="9" style="border: 0px; background-color: white; text-align: center;"><i>Memory state</i></td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td style="border: 0px; background-color: white; text-align: center;"><i>Gives</i></td> 
            </tr> 
            <tr> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white; text-align: center;">?</td> 
             <td style="border: 0px; background-color: white; text-align: center;">-128</td> 
            </tr> 
            <tr> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white; text-align: center;">?</td> 
             <td style="border: 0px; background-color: white; text-align: center;">-127</td> 
            </tr> 
            <tr> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white; text-align: center;">?</td> 
             <td style="border: 0px; background-color: white; text-align: center;">-126</td> 
            </tr> 
            <tr> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>0</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white; text-align: center;">?</td> 
             <td style="border: 0px; background-color: white; text-align: center;">-125</td> 
            </tr> 
            <tr> 
             <td style="text-align: center;"><br> ...<br></td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td colspan="7" style="text-align: center;"><br> ...<br></td> 
             <td style="border: 0px; background-color: white; text-align: center;">...</td> 
            </tr> 
            <tr> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white;"></td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td>&nbsp;<code>1</code>&nbsp;</td> 
             <td style="border: 0px; background-color: white; text-align: center;">?</td> 
             <td style="border: 0px; background-color: white; text-align: center;">-1</td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Altogether, using this method, 8 bits can hold numbers ranging from <code>-128</code> to <code>127</code> (including zero) — a total of 256 numbers. Not a bad pay-off one might presume. The opposite to an unsigned integer is a <i>signed integer</i> that have the capability of holding both positive and negative values.</p> 
      <p>But, what about larger numbers. You would need significantly more bits to hold larger numbers. That's where Java's numeric types come into play. Java has multiple numeric types — their size dependent on the number of bits that are at play.</p> 
      <p>In Java, numbers are dealt with using data types specially formulated to host numeric data. But before we dive into these types, we must first set some concepts in stone. Just like you did in high school (or even primary school), numbers in Java are placed in clearly distinct groups and systems. As you'd already know by now, number systems includes groups like the <i>integer</i> numbers (0, 1, 2 ... ?); <i>negative integers</i> (0, -1, -2 ... -?) or even <i>real</i> and <i>rational</i> numbers (<a href="https://en.wikipedia.org/wiki/Pi" class="extiw" title="w:Pi">value of Pi</a>, ¾, 0.333~, etcetera). Java simply tends to place these numbers in two distinct groups, <b>integers</b> (-? ... 0 ... ?) and <b>floating point</b> numbers (any number with decimal points or fractional representation). For the moment, we would only look into integer values as they are easier to understand and work with.</p> 
      <h2><span class="mw-headline" id="Integer_types_in_Java">Integer types in Java</span></h2> 
      <p>With what we have learned so far, we will identify the different types of signed integer values that can be created and manipulated in Java. Following is a table of the most basic numeric types: integers. As we have discussed earlier, the data types in Java for integers caters to both positive and negative values and hence are <b>signed numeric types</b>. The size in bits for a numeric type determines what its minimum and maximum value would be. If in doubt, one can always calculate these values.</p> 
      <p>Lets see how this new found knowledge of the basic integer types in Java fits into the picture. Say, you want to numerically manipulate the days in a year — all 365 days. What type would you use? Since the data type <code>byte</code> only goes up to 127, would you risk giving it a value greater than its allowed maximum. Such decisions might save you from dreaded errors that might occur out of the programmed code. A much more sensible choice for such a numeric operation might be a <code>short</code>. Oh, why couldn't they make just one data type to hold all kinds of numbers? Wouldn't you ask that question? Well, let's explore why.</p> 
      <p>When you tell a program you need to use an integer, say even a <code>byte</code>, the Java program allocates a space in the memory. It allocates whole 8 bits of memory. Where it wouldn't seem to matter for today's memory modules that have place for almost a dozen trillion such bits, it matters in other cases. Once allocated that part of the memory gets used and can only be claimed back after the operation is finished. Consider a complicated Java program where the only data type you'd be using would be <code>long</code> integers. What happens when there's no space for more memory allocation jobs? Ever heard of the <a href="https://en.wikipedia.org/wiki/Stack_overflow" class="extiw" title="w:Stack overflow">Stack Overflow errors</a>. That's exactly what happens — your memory gets completely used up and fast. So, choose your data types with extreme caution.</p> 
      <p>Enough talk, let's see how you can create a numeric type. A numeric type begins with the type's name (<code>short</code>, <code>int</code>, etc.) and then provides with a name for the allocated space in the memory. Following is how it's done. Say, we need to create a variable to hold the number of days in a year.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-54"><b>Code section 3.54: Days in a year.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">short</span> <span class="n">daysInYear</span> <span class="o">=</span> <span class="mi">365</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Here, <code>daysInYear</code> is the name of the variable that holds <code>365</code> as it's value, while <code>short</code> is the data type for that particular value. Other uses of integer data types in Java might see you write code such as this given below:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-55"><b>Code section 3.55: Integer data types in Java.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">byte</span> <span class="n">maxByte</span> <span class="o">=</span> <span class="mi">127</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">short</span> <span class="n">maxShort</span> <span class="o">=</span> <span class="mi">32767</span><span class="o">;</span>
<span class="lineno">3 </span><span class="kt">int</span> <span class="n">maxInt</span> <span class="o">=</span> <span class="mi">2147483647</span><span class="o">;</span>
<span class="lineno">4 </span><span class="kt">long</span> <span class="n">maxLong</span> <span class="o">=</span> <span class="mi">9223372036854775807L</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Integer_numbers_and_floating_point_numbers">Integer numbers and floating point numbers</span></h2> 
      <p>The data types that one can use for integer numbers are <code>byte</code>, <code>short</code>, <code>int</code> and <code>long</code> but when it comes to floating point numbers, we use <code>float</code> or <code>double</code>. Now that we know that, we can modify the code in the <a href="#code-section-53">code section 3.53</a> as:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-56"><b>Code section 3.56: Correct floating point declaration and assignment.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">double</span> <span class="n">age</span> <span class="o">=</span> <span class="mf">10.5</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Why not <code>float</code>, you say? If we'd used a <code>float</code>, we would have to append the number with a <code>f</code> as a suffix, so <code>10.5</code> should be <code>10.5f</code> as in:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-57"><b>Code section 3.57: The correct way to define floating point numbers of type <code>float</code>.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">float</span> <span class="n">age</span> <span class="o">=</span> <span class="mf">10.5f</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Floating-point math never throws exceptions. Dividing a non-zero value by <code>0</code> equals <code>infinity</code>. Dividing a non-infinite value by <code>infinity</code> equals <code>0</code>.</p> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.7</b>: Consider the following code:</p> 
        <table style="padding:2px; margin:2px;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
           <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="question-7"><b>Question 3.7: Primitive type assignments.</b></span> 
            <div class="mw-highlight mw-content-ltr" dir="ltr"> 
             <pre>
<span class="lineno"> 5 </span><span class="o">...</span>
<span class="lineno"> 6 </span>
<span class="lineno"> 7 </span><span class="n">a</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="lineno"> 8 </span><span class="n">b</span> <span class="o">=</span> <span class="mf">3.2</span><span class="o">;</span>
<span class="lineno"> 9 </span><span class="n">c</span> <span class="o">=</span> <span class="mi">35</span><span class="o">;</span>
<span class="lineno">10 </span><span class="n">d</span> <span class="o">=</span> <span class="o">-</span><span class="mi">93485L</span><span class="o">;</span>
<span class="lineno">11 </span><span class="n">e</span> <span class="o">=</span> <span class="sc">'q'</span><span class="o">;</span>
</pre>
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
        <p>These are five variables. There are a <code>long</code>, a <code>byte</code>, a <code>char</code>, a <code>double</code> and a <code>boolean</code>. Retrieve the type of each one.</p> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="answer-7"><b>Answer 3.7: Primitive type assignments and declarations.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="hll"><span class="kt">boolean</span> <span class="n">a</span><span class="o">;</span>
</span><span class="lineno"> 2 </span><span class="hll"><span class="kt">double</span> <span class="n">b</span><span class="o">;</span>
</span><span class="lineno"> 3 </span><span class="hll"><span class="kt">byte</span> <span class="n">c</span><span class="o">;</span>
</span><span class="lineno"> 4 </span><span class="hll"><span class="kt">long</span> <span class="n">d</span><span class="o">;</span>
</span><span class="lineno"> 5 </span><span class="hll"><span class="kt">char</span> <span class="n">e</span><span class="o">;</span>
</span><span class="lineno"> 6 </span>
<span class="lineno"> 7 </span><span class="n">a</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="lineno"> 8 </span><span class="n">b</span> <span class="o">=</span> <span class="mf">3.2</span><span class="o">;</span>
<span class="lineno"> 9 </span><span class="n">c</span> <span class="o">=</span> <span class="mi">35</span><span class="o">;</span>
<span class="lineno">10 </span><span class="n">d</span> <span class="o">=</span> <span class="o">-</span><span class="mi">93485L</span><span class="o">;</span>
<span class="lineno">11 </span><span class="n">e</span> <span class="o">=</span> <span class="sc">'q'</span><span class="o">;</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> 
          <ul> 
           <li><code>a</code> can only be the <code>boolean</code> because only a boolean can handle boolean values.</li> 
           <li><code>e</code> can only be the <code>char</code> because only a char can contain a character.</li> 
           <li><code>b</code> can only be the <code>double</code> because only a double can contain a decimal number here.</li> 
           <li><code>d</code> is the <code>long</code> because a <code>byte</code> can not contain such a low value.</li> 
           <li><code>c</code> is the remaining one so it is the <code>byte</code>.</li> 
          </ul> 
         </div> 
        </div> 
       </div> 
      </div> 
      <h2><span id="Data_conversion_(casting)"></span><span class="mw-headline" id="Data_conversion_.28casting.29">Data conversion (casting)</span></h2> 
      <p>Data conversion (casting) can happen between two primitive types. There are two kinds of casting:</p> 
      <ul> 
       <li>Implicit: casting operation is not required; the magnitude of the numeric value is always preserved. However, <i>precision</i> may be lost when converting from integer to floating point types</li> 
       <li>Explicit: casting operation required; the magnitude of the numeric value may not be preserved</li> 
      </ul> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-58"><b>Code section 3.58: Implicit casting (int is converted to long,</b> casting <b>is not needed).</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span>  <span class="n">i</span> <span class="o">=</span> <span class="mi">65</span><span class="o">;</span>
<span class="lineno">2 </span><span class="hll"><span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-59"><b>Code section 3.59: Explicit casting (long is converted to int,</b> casting <b>is needed).</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">656666L</span><span class="o">;</span>
<span class="lineno">2 </span><span class="hll"><span class="kt">int</span>  <span class="n">i</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">l</span><span class="o">;</span>
</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The following table shows the conversions between primitive types, it shows the casting operation for explicit conversions:</p> 
      <table class="wikitable" style="margin: auto;"> 
       <tbody>
        <tr> 
         <th></th> 
         <th>from <code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code></th> 
         <th>from <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code></th> 
         <th>from <code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code></th> 
         <th>from <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code></th> 
         <th>from <code><a href="/wiki/Java_Programming/Keywords/long" title="Java Programming/Keywords/long"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">long</font></a></code></th> 
         <th>from <code><a href="/wiki/Java_Programming/Keywords/float" title="Java Programming/Keywords/float"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">float</font></a></code></th> 
         <th>from <code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code></th> 
         <th>from <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code></th> 
        </tr> 
        <tr> 
         <th>to <code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code></th> 
         <td>-</td> 
         <td>(byte)</td> 
         <td>(byte)</td> 
         <td>(byte)</td> 
         <td>(byte)</td> 
         <td>(byte)</td> 
         <td>(byte)</td> 
         <td style="background-color: #aaa;">N/A</td> 
        </tr> 
        <tr> 
         <th>to <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code></th> 
         <td></td> 
         <td>-</td> 
         <td>(char)</td> 
         <td>(char)</td> 
         <td>(char)</td> 
         <td>(char)</td> 
         <td>(char)</td> 
         <td style="background-color: #aaa;">N/A</td> 
        </tr> 
        <tr> 
         <th>to <code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code></th> 
         <td></td> 
         <td>(short)</td> 
         <td>-</td> 
         <td>(short)</td> 
         <td>(short)</td> 
         <td>(short)</td> 
         <td>(short)</td> 
         <td style="background-color: #aaa;">N/A</td> 
        </tr> 
        <tr> 
         <th>to <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code></th> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td>-</td> 
         <td>(int)</td> 
         <td>(int)</td> 
         <td>(int)</td> 
         <td style="background-color: #aaa;">N/A</td> 
        </tr> 
        <tr> 
         <th>to <code><a href="/wiki/Java_Programming/Keywords/long" title="Java Programming/Keywords/long"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">long</font></a></code></th> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td>-</td> 
         <td>(long)</td> 
         <td>(long)</td> 
         <td style="background-color: #aaa;">N/A</td> 
        </tr> 
        <tr> 
         <th>to <code><a href="/wiki/Java_Programming/Keywords/float" title="Java Programming/Keywords/float"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">float</font></a></code></th> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td>-</td> 
         <td>(float)</td> 
         <td style="background-color: #aaa;">N/A</td> 
        </tr> 
        <tr> 
         <th>to <code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code></th> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td></td> 
         <td>-</td> 
         <td style="background-color: #aaa;">N/A</td> 
        </tr> 
        <tr> 
         <th>to <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code></th> 
         <td style="background-color: #aaa;">N/A</td> 
         <td style="background-color: #aaa;">N/A</td> 
         <td style="background-color: #aaa;">N/A</td> 
         <td style="background-color: #aaa;">N/A</td> 
         <td style="background-color: #aaa;">N/A</td> 
         <td style="background-color: #aaa;">N/A</td> 
         <td style="background-color: #aaa;">N/A</td> 
         <td>-</td> 
        </tr> 
       </tbody>
      </table> 
      <p>Unlike C, C++ and similar languages, Java can't represent <code>false</code> as <code>0</code> or <code>null</code> and can't represent <code>true</code> as non-zero. Java can't cast from boolean to a non-boolean primitive data type, or vice versa.</p> 
      <p><br> For non primitive types:</p> 
      <table class="wikitable sortable"> 
       <tbody>
        <tr> 
         <th></th> 
         <th>to Integer</th> 
         <th>to Float</th> 
         <th>to Double</th> 
         <th>to String</th> 
         <th>to Array</th> 
        </tr> 
        <tr> 
         <th>Integer</th> 
         <th>-</th> 
         <td>(float)x</td> 
         <td>(double)x<br> x.doubleValue()</td> 
         <td>x.toString()<br> Float.toString(x)</td> 
         <td>new int[] {x}</td> 
        </tr> 
        <tr> 
         <th>Float</th> 
         <td><small>java.text.DecimalFormat("#").format(x)</small></td> 
         <th>-</th> 
         <td>(double)x</td> 
         <td>x.toString()</td> 
         <td>new float[] {x}</td> 
        </tr> 
        <tr> 
         <th>Double</th> 
         <td><small>java.text.DecimalFormat("#").format(x)</small></td> 
         <td><small>java.text.DecimalFormat("#").format(x)</small></td> 
         <th>-</th> 
         <td>x.toString()</td> 
         <td>new double[] {x}</td> 
        </tr> 
        <tr> 
         <th>String</th> 
         <td>Integer.parseInt(x)</td> 
         <td>Float.parseFloat(x)</td> 
         <td>Double.parseDouble(x)</td> 
         <th>-</th> 
         <td>new String[] {x}</td> 
        </tr> 
        <tr> 
         <th>Array</th> 
         <td>x[0]</td> 
         <td>x[0]</td> 
         <td>x[0]</td> 
         <td>Arrays.toString(x)</td> 
         <th>-</th> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Notes">Notes</span></h2> 
      <div class="reflist references references-column-count references-column-count-3" style="column-count: 3; -moz-column-count: 3; -webkit-column-count: 3;"> 
       <ol class="references"> 
        <li id="cite_note-note-1-4"><small><span class="mw-cite-backlink"><a href="#cite_ref-note-1_4-0">?</a></span> <span class="reference-text">As of edit (11 December 2013), the <a href="https://en.wikipedia.org/wiki/Great_Internet_Mersenne_Prime_Search" class="extiw" title="w:Great Internet Mersenne Prime Search">Great Internet Mersenne Prime Search</a> project has so far identified the largest prime number as being 17,425,170 digits long. Prime numbers are valuable to cryptologists as the bigger the number, the securer they can make their data encryption logic using that particular number.</span></small></li> 
        <li id="cite_note-note-2-5"><small><span class="mw-cite-backlink"><a href="#cite_ref-note-2_5-0">?</a></span> <span class="reference-text">Gemini 5 landed 130 kilometers short of its planned Pacific Ocean landing point due to a software error. The Earth's rotation rate had been programmed as one revolution per <a href="https://en.wikipedia.org/wiki/solar_time" class="extiw" title="w:solar time">solar day</a> instead of the correct value, one revolution per <a href="https://en.wikipedia.org/wiki/sidereal_time" class="extiw" title="w:sidereal time">sidereal day</a>.</span></small></li> 
        <li id="cite_note-note-3-6"><small><span class="mw-cite-backlink"><a href="#cite_ref-note-3_6-0">?</a></span> <span class="reference-text">A program used in their design used an arithmetic sum of variables when it should have used the sum of their absolute values. (Evars Witt, "<i>The Little Computer and the Big Problem</i>", AP Newswire, 16 March 1979. See also Peter Neumann, "<i>An Editorial on Software Correctness and the Social Process</i>" Software Engineering Notes, Volume 4(2), April 1979, page 3)</span></small></li> 
       </ol> 
      </div> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Arithmetic_expressions">Arithmetic expressions</span></h1> 
      <p>In order to do arithmetic in Java, one must first declare at least one variable. Typically one declares a variable and assigns it a value before any arithmetic is done. Here's an example of declaring an integer variable:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-59"><b>Code section 3.59: Variable assignation.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>After creating a variable, one can manipulate its value by using Java's operators: <code>+</code> (addition), <code>-</code> (subtraction), <code>*</code> (multiplication), <code>/</code> (integer division), <code>%</code> (<a href="https://en.wikipedia.org/wiki/Modulo_operation" class="extiw" title="w:Modulo operation">modulo or remainder</a>), <code>++</code> (pre- &amp; postincrement by one), <code>--</code> (pre- &amp; postdecrement by one).</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-10"><b>Code listing 3.10: Operators.java</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Operators</span> <span class="o">{</span>
<span class="lineno"> 2 </span>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 3 </span>    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno"> 4 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x = "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno"> 5 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="lineno"> 6 </span>   
<span class="lineno"> 7 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Addition             ---"</span><span class="o">);</span>
<span class="lineno"> 8 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno"> 9 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x + 2 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">2</span><span class="o">));</span>
</span><span class="lineno">10 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x = "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">11 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="lineno">12 </span>   
<span class="lineno">13 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Subtraction          ---"</span><span class="o">);</span>
<span class="lineno">14 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">15 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x - 4 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">4</span><span class="o">));</span>
</span><span class="lineno">16 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x = "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">17 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="lineno">18 </span>   
<span class="lineno">19 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Multiplication       ---"</span><span class="o">);</span>
<span class="lineno">20 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">21 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x * 3 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span> <span class="o">*</span> <span class="mi">3</span><span class="o">));</span>
</span><span class="lineno">22 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x = "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">23 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="lineno">24 </span>   
<span class="lineno">25 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- (Integer) Division   ---"</span><span class="o">);</span>
<span class="lineno">26 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">27 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x / 2 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span> <span class="o">/</span> <span class="mi">2</span><span class="o">));</span>
</span><span class="lineno">28 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x = "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">29 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="lineno">30 </span>   
<span class="lineno">31 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Modulo (Remainder)   ---"</span><span class="o">);</span>
<span class="lineno">32 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">33 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x % 2 = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span> <span class="o">%</span> <span class="mi">2</span><span class="o">));</span>
</span><span class="lineno">34 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x = "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">35 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="lineno">36 </span>   
<span class="lineno">37 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Preincrement by one  ---"</span><span class="o">);</span>
<span class="lineno">38 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">39 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"++x = "</span> <span class="o">+</span> <span class="o">(++</span><span class="n">x</span>  <span class="o">));</span>
</span><span class="lineno">40 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x = "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">41 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="lineno">42 </span>   
<span class="lineno">43 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Predecrement by one  ---"</span><span class="o">);</span>
<span class="lineno">44 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">45 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--x = "</span> <span class="o">+</span> <span class="o">(--</span><span class="n">x</span>  <span class="o">));</span>
</span><span class="lineno">46 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x = "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">47 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="lineno">48 </span>   
<span class="lineno">49 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Postincrement by one ---"</span><span class="o">);</span>
<span class="lineno">50 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">51 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x++ = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span><span class="o">++</span>  <span class="o">));</span>
</span><span class="lineno">52 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x = "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">53 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="lineno">54 </span>   
<span class="lineno">55 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--- Postdecrement by one ---"</span><span class="o">);</span>
<span class="lineno">56 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">57 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x-- = "</span> <span class="o">+</span> <span class="o">(</span><span class="n">x</span><span class="o">--</span>  <span class="o">));</span>
</span><span class="lineno">58 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"x = "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">59 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
<span class="lineno">60 </span>  <span class="o">}</span>
<span class="lineno">61 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Console for Code listing 3.10</b> <pre style="background-color:#000; color:#fff;">

x = 5

--- Addition             ---
x + 2 = 7
x = 5

--- Subtraction          ---
x - 4 = 1
x = 5

--- Multiplication       ---
x * 3 = 15
x = 5

--- (Integer) Division   ---
x / 2 = 2
x = 5

--- Modulo (Remainder)   ---
x % 2 = 1
x = 5

--- Preincrement by one  ---
++x   = 6
x = 6

--- Predecrement by one  ---
--x   = 4
x = 4

--- Postincrement by one ---
x++   = 5
x = 6

--- Postdecrement by one ---
x--   = 5
x = 4
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The division operator rounds towards zero: <code>5/2</code> is 2, and <code>-5/2</code> is -2. The remainder operator has the same sign as the left operand; it is defined such that <code>((a/b)*b) + (a%b)</code> is always equal to a. The preincrement, predecrement, postincrement, and postdecrement operators are special: they also change the value of the variable, by adding or subtracting one. The only difference is that preincrement/decrement returns the new value of the variable; postincrement returns the original value of the variable.</p> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.8</b>: Consider the following code:</p> 
        <table style="padding:2px; margin:2px;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
           <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="question-8"><b>Question 3.8: Question8.java</b></span> 
            <div class="mw-highlight mw-content-ltr" dir="ltr"> 
             <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Question8</span> <span class="o">{</span>
<span class="lineno"> 2 </span>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 3 </span>    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="lineno"> 4 </span>    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">10</span><span class="o">;</span>
<span class="lineno"> 5 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span><span class="o">;</span>
<span class="lineno"> 6 </span>    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">19</span><span class="o">;</span>
<span class="lineno"> 7 </span>    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">/</span> <span class="mi">3</span><span class="o">;</span>
<span class="lineno"> 8 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
<span class="lineno"> 9 </span>  <span class="o">}</span>
<span class="lineno">10 </span><span class="o">}</span>
</pre>
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
        <p>What will be printed in the standard output?</p> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Question 3.8</b> <pre style="background-color:#000; color:#fff;">
7
</pre></td> 
            </tr> 
           </tbody>
          </table> 
          <p><code>int x = 10;</code> =&gt; 10<br> <code>x = x + 10;</code> =&gt; 20<br> <code>x = 2 * x;</code> =&gt; 40<br> <code>x = x - 19;</code> =&gt; 21<br> <code>x = x / 3;</code> =&gt; 7<br></p> 
         </div> 
        </div> 
       </div> 
      </div> 
      <p>When using several operators in the same expression, one must consider Java's order of precedence. Java uses the standard PEMDAS (Parenthesis, Exponents, Multiplication and Division, Addition and Subtraction) order. When there are multiple instances of the same precedence, Java reads from left to right. Consider what the output of the following code would be:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-60"><b>Code section 3.60: Several operators.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="mi">10</span><span class="o">*</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">100</span><span class="o">/</span><span class="mi">10</span> <span class="o">-</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">7</span><span class="o">%</span><span class="mi">2</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Console for Code section 3.60</b> <pre style="background-color:#000; color:#fff;">
56
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The following chart shows how Java would compute this expression:</p> 
      <p><br></p> 
      <table align="center" style="border:solid 1px lightgray; padding:8px; background: #fdfdfd"> 
       <tbody>
        <tr> 
         <td style="text-align:center; padding:2px 8px;"> 
          <div style="color:#2a7fff; border-bottom:solid 1px #ddd; padding-bottom:4px;">
           <b>Figure 3.1:</b> Computation of an arithmetic expression in the Java programming language
          </div> </td> 
        </tr> 
        <tr> 
         <td style="padding-top:8px;"> 
          <div class="center"> 
           <div class="floatnone">
            <a href="/wiki/File:Java_Computation_of_Arithmetic_Expression.svg" class="image"><img alt="Java Computation of Arithmetic Expression.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Java_Computation_of_Arithmetic_Expression.svg/204px-Java_Computation_of_Arithmetic_Expression.svg.png" width="204" height="261" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Java_Computation_of_Arithmetic_Expression.svg/306px-Java_Computation_of_Arithmetic_Expression.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Java_Computation_of_Arithmetic_Expression.svg/408px-Java_Computation_of_Arithmetic_Expression.svg.png 2x" data-file-width="204" data-file-height="261"></a>
           </div> 
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> Besides performing mathematical functions, there are also operators to assign numbers to variables (each example again uses the variable initialized as <code>x = 5</code>):</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-11"><b>Code listing 3.11: Assignments.java</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Assignments</span> <span class="o">{</span>
<span class="lineno"> 2 </span>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 3 </span>    <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno"> 4 </span><span class="hll">    <span class="n">x</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
</span><span class="lineno"> 5 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Assignment                                       (x = 3) : "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno"> 6 </span>
<span class="lineno"> 7 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno"> 8 </span><span class="hll">    <span class="n">x</span> <span class="o">+=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class="lineno"> 9 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Assign x plus another integer to itself          (x += 5): "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">10 </span>
<span class="lineno">11 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">12 </span><span class="hll">    <span class="n">x</span> <span class="o">-=</span> <span class="mi">4</span><span class="o">;</span>
</span><span class="lineno">13 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Assign x minus another integer to itself         (x -= 4): "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">14 </span>
<span class="lineno">15 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">16 </span><span class="hll">    <span class="n">x</span> <span class="o">*=</span> <span class="mi">6</span><span class="o">;</span>
</span><span class="lineno">17 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Assign x multiplied by another integer to itself (x *= 6): "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">18 </span>
<span class="lineno">19 </span>    <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
<span class="lineno">20 </span><span class="hll">    <span class="n">x</span> <span class="o">/=</span> <span class="mi">5</span><span class="o">;</span>
</span><span class="lineno">21 </span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Assign x divided by another integer to itself    (x /= 5): "</span> <span class="o">+</span> <span class="n">x</span><span class="o">);</span>
<span class="lineno">22 </span>  <span class="o">}</span>
<span class="lineno">23 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Console for Code listing 3.11</b> <pre style="background-color:#000; color:#fff;">
Assignment                                       (x = 3) : 3
Assign x plus another integer to itself          (x += 5): 10
Assign x minus another integer to itself         (x -= 4): 1
Assign x multiplied by another integer to itself (x *= 6): 30
Assign x divided by another integer to itself    (x /= 5): 1
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Using_bitwise_operators_within_Java">Using bitwise operators within Java</span></h2> 
      <p>Java has besides arithmetic operators a set of bit operators to manipulate the bits in a number, and a set of logical operators. The bitwise logical operators are</p> 
      <table class="wikitable"> 
       <tbody>
        <tr> 
         <th>Operator</th> 
         <th>Function</th> 
         <th>Value of<br> x before</th> 
         <th>Example<br> input</th> 
         <th>Example<br> output</th> 
         <th>Value of<br> x after</th> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>&amp;</code></td> 
         <td>Bitwise AND</td> 
         <td style="text-align:right;">7</td> 
         <td><code>x&amp;27</code></td> 
         <td style="text-align:right;">3</td> 
         <td style="text-align:right;">7</td> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>|</code></td> 
         <td>Bitwise OR</td> 
         <td style="text-align:right;">7</td> 
         <td><code>x|27</code></td> 
         <td style="text-align:right;">31</td> 
         <td style="text-align:right;">7</td> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>^</code></td> 
         <td>Bitwise XOR</td> 
         <td style="text-align:right;">7</td> 
         <td><code>x^27</code></td> 
         <td style="text-align:right;">28</td> 
         <td style="text-align:right;">7</td> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>~</code></td> 
         <td>Bitwise inversion</td> 
         <td style="text-align:right;">7</td> 
         <td><code>~x</code></td> 
         <td style="text-align:right;">-8</td> 
         <td style="text-align:right;">7</td> 
        </tr> 
       </tbody>
      </table> 
      <p>Besides these logical bitwise functions, there are also operators to assign numbers to variables (<code>x = -5</code>):</p> 
      <table class="wikitable"> 
       <tbody>
        <tr> 
         <th>Operator</th> 
         <th>Function</th> 
         <th>Example<br> input</th> 
         <th>Example output</th> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>&amp;=</code></td> 
         <td>Assign <code>x</code> bitwisely ANDed with another value to itself</td> 
         <td><code>x &amp;= 3</code></td> 
         <td style="text-align:right;">3</td> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>|=</code></td> 
         <td>Assign <code>x</code> bitwisely ORed with another value to itself</td> 
         <td><code>x</code> |<code>= 3</code></td> 
         <td style="text-align:right;">-5</td> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>^=</code></td> 
         <td>Assign <code>x</code> bitwisely XORed with another value to itself</td> 
         <td><code>x ^= 3</code></td> 
         <td style="text-align:right;">-8</td> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>&lt;&lt;=</code></td> 
         <td>Assign <code>x</code> divided by another integer to itself</td> 
         <td><code>x &lt;&lt;= 1</code></td> 
         <td style="text-align:right;">-10</td> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>&gt;&gt;=</code></td> 
         <td>Assign <code>x</code> bitwisely negated with another value to itself</td> 
         <td><code>x &gt;&gt;= 1</code></td> 
         <td style="text-align:right;">-3</td> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>&gt;&gt;&gt;=</code></td> 
         <td>Assign <code>x</code> bitwisely negated with another value to itself</td> 
         <td><code>x &gt;&gt;&gt;= 1</code></td> 
         <td style="text-align:right;">2,305,843,009,213,693,949 (64 bit)</td> 
        </tr> 
       </tbody>
      </table> 
      <p>The shift operators are used to shift the bits to the left or right, which is also a quick way to multiply/divide by two:</p> 
      <table class="wikitable"> 
       <tbody>
        <tr> 
         <th>Operator</th> 
         <th>Function</th> 
         <th>Value of<br> x before</th> 
         <th>Example<br> input</th> 
         <th>Example output</th> 
         <th>Value of<br> x after</th> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>&lt;&lt;</code></td> 
         <td>Logical shift left</td> 
         <td style="text-align:right;">-15</td> 
         <td><code>x &lt;&lt; 2</code></td> 
         <td style="text-align:right;">-60</td> 
         <td style="text-align:right;">-15</td> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>&gt;&gt;</code></td> 
         <td>Arithmetic shift right</td> 
         <td style="text-align:right;">-15</td> 
         <td><code>x &gt;&gt; 3</code></td> 
         <td style="text-align:right;">-2</td> 
         <td style="text-align:right;">-15</td> 
        </tr> 
        <tr> 
         <td style="text-align:center;"><code>&gt;&gt;&gt;</code></td> 
         <td>Logical shift right</td> 
         <td style="text-align:right;">-15</td> 
         <td><code>x &gt;&gt;&gt; 3</code></td> 
         <td style="text-align:right;">2,305,843,009,213,693,937 (64 bit)</td> 
         <td style="text-align:right;">-15</td> 
        </tr> 
       </tbody>
      </table> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Literals">Literals</span></h1> 
      <p>Java <b>Literals</b> are syntactic representations of boolean, character, numeric, or string data. Literals provide a means of expressing specific values in your program. For example, in the following statement, an integer variable named <code>count</code> is declared and assigned an integer value. The literal <code><b>0</b></code> represents, naturally enough, the value zero.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-61"><b>Code section 3.61: Numeric literal.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <a href="#code-section-62">code section 3.62</a> contains two number literals followed by two boolean literals at line 1, one string literal followed by one number literal at line 2, and one string literal followed by one real number literal at line 3:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-62"><b>Code section 3.62: Literals.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="o">(</span><span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="o">)</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="kc">false</span><span class="o">;</span>
<span class="lineno">2 </span><span class="s">"text"</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
<span class="lineno">3 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Display a hard coded float: "</span> <span class="o">+</span> <span class="mf">37.19f</span><span class="o">);</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Boolean_Literals">Boolean Literals</span></h2> 
      <p>There are two boolean literals</p> 
      <ul> 
       <li><code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/true" title="Java Programming/Literals/Boolean Literals/true"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">true</font></a></code> represents a true boolean value</li> 
       <li><code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/false" title="Java Programming/Literals/Boolean Literals/false"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">false</font></a></code> represents a false boolean value</li> 
      </ul> 
      <p>There are no other boolean literals, because there are no other boolean values!</p> 
      <h2><span class="mw-headline" id="Numeric_Literals">Numeric Literals</span></h2> 
      <p>There are three types of numeric literals in Java.</p> 
      <h3><span class="mw-headline" id="Integer_Literals">Integer Literals</span></h3> 
      <p>In Java, you may enter integer numbers in several formats:</p> 
      <ol> 
       <li>As decimal numbers such as <code>1995</code>, <code>51966</code>. Negative decimal numbers such as <code>-42</code> are actually <i>expressions</i> consisting of the integer literal with the unary negation operation <code>-</code>.</li> 
       <li>As octal numbers, using a leading <code>0</code> (zero) digit and one or more additional octal digits (digits between <code>0</code> and <code>7</code>), such as <code>077</code>. Octal numbers may evaluate to negative numbers; for example <code>037777777770</code> is actually the decimal value -8.</li> 
       <li>As hexadecimal numbers, using the form <code>0x</code> (or <code>0X</code>) followed by one or more hexadecimal digits (digits from <code>0</code> to <code>9</code>, <code>a</code> to <code>f</code> or <code>A</code> to <code>F</code>). For example, 0xCAFEBABEL is the long integer 3405691582. Like octal numbers, hexadecimal literals may represent negative numbers.</li> 
       <li>Starting in J2SE 7.0, as binary numbers, using the form <code>0b</code> (or <code>0B</code>) followed by one or more binary digits (0 or 1). For example, 0b101010 is the integer 42. Like octal and hex numbers, binary literals may represent negative numbers.</li> 
      </ol> 
      <p>By default, the integer literal primitive type is <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code>. If you want a <code><a href="/wiki/Java_Programming/Keywords/long" title="Java Programming/Keywords/long"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">long</font></a></code>, add a letter <i>el</i> suffix (either the character <code>l</code> or the character <code>L</code>) to the integer literal. This suffix denotes a <i>long integer</i> rather than a standard integer. For example, <code>3405691582L</code> is a long integer literal. Long integers are 8 bytes in length as opposed to the standard 4 bytes for <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code>. It is best practice to use the suffix <code>L</code> instead of <code>l</code> to avoid confusion with the digit <code>1</code> (one) which looks like <code>l</code> in many fonts: <code>200l</code> ? <code>2001</code>. If you want a short integer literal, you have to cast it.</p> 
      <p>Starting in J2SE 7.0, you may insert underscores between digits in a numeric literal. They are ignored but may help readability by allowing the programmer to group digits.</p> 
      <h3><span class="mw-headline" id="Floating_Point_Literals">Floating Point Literals</span></h3> 
      <p>Floating point numbers are expressed as decimal fractions or as exponential notation:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-63"><b>Code section 3.63: Floating point literals.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">double</span> <span class="n">decimalNumber</span> <span class="o">=</span> <span class="mf">5.0</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">decimalNumber</span> <span class="o">=</span> <span class="mf">5d</span><span class="o">;</span>
<span class="lineno">3 </span><span class="n">decimalNumber</span> <span class="o">=</span> <span class="mf">0.5</span><span class="o">;</span>
<span class="lineno">4 </span><span class="n">decimalNumber</span> <span class="o">=</span> <span class="mi">10</span><span class="n">f</span><span class="o">;</span>
<span class="lineno">5 </span><span class="n">decimalNumber</span> <span class="o">=</span> <span class="mf">3.14159e0</span><span class="o">;</span>
<span class="lineno">6 </span><span class="n">decimalNumber</span> <span class="o">=</span> <span class="mf">2.718281828459045D</span><span class="o">;</span>
<span class="lineno">7 </span><span class="n">decimalNumber</span> <span class="o">=</span> <span class="mf">1.0e-6D</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Floating point numbers consist of:</p> 
      <ol> 
       <li>an optional leading <code>+</code> or <code>-</code> sign, indicating a positive or negative value; if omitted, the value is positive,</li> 
       <li>one of the following number formats 
        <ul> 
         <li><i>integer digits</i> (must be followed by either an exponent or a suffix or both, to distinguish it from an integer literal)</li> 
         <li><i>integer digits</i> <code>.</code></li> 
         <li><i>integer digits</i> <code>.</code> <i>integer digits</i></li> 
         <li><code>.</code> <i>integer digits</i></li> 
        </ul> </li> 
       <li>an optional exponent of the form 
        <ul> 
         <li>the exponent indicator <code>e</code> or <code>E</code></li> 
         <li>an optional exponent sign <code>+</code> or <code>-</code> (the default being a positive exponent)</li> 
         <li><i>integer digits</i> representing the integer exponent value</li> 
        </ul> </li> 
       <li>an optional floating point suffix: 
        <ul> 
         <li>either <code>f</code> or <code>F</code> indicating a single precision (4 bytes) floating point number, or</li> 
         <li><code>d</code> or <code>D</code> indicating the number is a double precision floating point number (by default, thus the double precision (8 bytes) is default).</li> 
        </ul> </li> 
      </ol> 
      <p>Here, <i>integer digits</i> represents one or more of the digits <code>0</code> through <code>9</code>.</p> 
      <p>Starting in J2SE 7.0, you may insert underscores between digits in a numeric literal. They are ignored but may help readability by allowing the programmer to group digits.</p> 
      <h3><span class="mw-headline" id="Character_Literals">Character Literals</span></h3> 
      <p>Character literals are constant valued character expressions embedded in a Java program. Java characters are sixteen bit Unicode characters, ranging from 0 to 65535. Character literals are expressed in Java as a single quote, the character, and a closing single quote (<code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'a'</font></code>, <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'7'</font></code>, <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'$'</font></code>, <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'?'</font></code>). Character literals have the type <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code>, an unsigned integer <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">primitive type</a>. Character literals may be safely promoted to larger integer types such as <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/long" title="Java Programming/Keywords/long"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">long</font></a></code>. Character literals used where a <code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code> or <code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code> is called for must be cast to <code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code> or <code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code> since truncation may occur.</p> 
      <h2><span class="mw-headline" id="String_Literals">String Literals</span></h2> 
      <p>String literals consist of the double quote character (<code>"</code>) (ASCII 34, hex 0x22), zero or more characters (including Unicode characters), followed by a terminating double quote character (<code>"</code>), such as: <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"Ceci est une string."</font></code></p> 
      <p>So a string literal follows the following grammar:</p> 
      <pre>
&lt;STRING :
        "\""
        (    (~["\"","\\","\n","\r"])
        |("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            |["0"-"7"](["0"-"7"])?
            |["0"-"3"]["0"-"7"]["0"-"7"]
            )
        )
        )*
        "\""&gt;
</pre> 
      <p>Within string and character literals, the backslash character can be used to escape special characters, such as <a href="/wiki/Java_Programming/Syntax/Unicode_Escape_Sequences" class="mw-redirect" title="Java Programming/Syntax/Unicode Escape Sequences">unicode escape sequences</a>, or the following special characters:</p> 
      <table class="wikitable" style="margin: auto;"> 
       <tbody>
        <tr> 
         <th>Name</th> 
         <th>Character</th> 
         <th>ASCII</th> 
         <th>hex</th> 
        </tr> 
        <tr> 
         <td>Backspace</td> 
         <td><code>\b</code></td> 
         <td>8</td> 
         <td>0x08</td> 
        </tr> 
        <tr> 
         <td>TAB</td> 
         <td><code>\t</code></td> 
         <td>9</td> 
         <td>0x09</td> 
        </tr> 
        <tr> 
         <td>NUL character</td> 
         <td><code>\0</code></td> 
         <td>0</td> 
         <td>0x00</td> 
        </tr> 
        <tr> 
         <td>newline</td> 
         <td><code>\n</code></td> 
         <td>10</td> 
         <td>0x0a</td> 
        </tr> 
        <tr> 
         <td>carriage control</td> 
         <td><code>\r</code></td> 
         <td>13</td> 
         <td>0xd</td> 
        </tr> 
        <tr> 
         <td>double quote</td> 
         <td><code>\"</code></td> 
         <td>34</td> 
         <td>0x22</td> 
        </tr> 
        <tr> 
         <td>single quote</td> 
         <td><code>\'</code></td> 
         <td>39</td> 
         <td>0x27</td> 
        </tr> 
        <tr> 
         <td>backslash</td> 
         <td><code>\\</code></td> 
         <td>92</td> 
         <td>0x5c</td> 
        </tr> 
       </tbody>
      </table> 
      <p>String literals may not contain unescaped newline or linefeed characters. However, the Java compiler will evaluate compile time expressions, so the following String expression results in a string with three lines of text:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-64"><b>Code section 3.64: Multi-line string.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">"This is a String literal\n"</span>
<span class="lineno">2 </span>            <span class="o">+</span> <span class="s">"which spans not one and not two\n"</span>
<span class="lineno">3 </span>            <span class="o">+</span> <span class="s">"but three lines of text.\n"</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="null">null</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Literals/null" class="mw-redirect" title="Java Programming/Literals/null"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">null</font></a></code> is a special Java literal which represents a <i>null value</i>: a value which does not refer to any object. It is an error to attempt to dereference the null value — Java will throw a <code>NullPointerException</code>. <code><a href="/wiki/Java_Programming/Literals/null" class="mw-redirect" title="Java Programming/Literals/null"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">null</font></a></code> is often used to represent uninitialized state.</p> 
      <h2><span class="mw-headline" id="Mixed_Mode_Operations">Mixed Mode Operations</span></h2> 
      <p>In concatenation operations, the values in brackets are concatenated first. Then the values are concatenated from the left to the right. Be careful when mixing character literals and integers in String concatenation operations:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-65"><b>Code section 3.65: Concatenation operations.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">one</span> <span class="o">=</span> <span class="sc">'1'</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">int</span> <span class="n">zero</span> <span class="o">=</span> <span class="sc">'0'</span><span class="o">;</span>
<span class="lineno">3 </span>
<span class="lineno">4 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"120? "</span> <span class="o">+</span> <span class="n">one</span> <span class="o">+</span> <span class="sc">'2'</span> <span class="o">+</span> <span class="n">zero</span><span class="o">);</span>
</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Console for Code section 3.66</b> <pre style="background-color:#000; color:#fff;">
120? 49248
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The unexpected results arise because <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'1'</font></code> and <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'0'</font></code> are converted twice. The expression is concatenated as such:</p> 
      <table style="margin: auto; text-align: center;"> 
       <tbody>
        <tr> 
         <td><code>"120? " + one + '2' + zero</code></td> 
        </tr> 
        <tr> 
         <td><code><u>"120? " + <b>49</b></u> + '2' + <b>48</b></code></td> 
        </tr> 
        <tr> 
         <td><code><u><b>"120? 49"</b> + '2'</u> + 48</code></td> 
        </tr> 
        <tr> 
         <td><code><u><b>"120? 492"</b> + 48</u></code></td> 
        </tr> 
        <tr> 
         <td><code><b>"120? 49248"</b></code></td> 
        </tr> 
       </tbody>
      </table> 
      <ol> 
       <li><code>one</code> and <code>zero</code> are integers. So they store integer values. The integer value of <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'1'</font></code> is 49 and the integer value of <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'0'</font></code> is 48.</li> 
       <li>So the first concatenation concatenates <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"120? "</font></code> and <code>49</code>. <code>49</code> is first converted into String, yielding <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"49"</font></code> and the concatenation returns the string <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"120? 49"</font></code>.</li> 
       <li>The second concatenation concatenates <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"120? 49"</font></code> and <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'2'</font></code>. <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'2'</font></code> is converted into the String <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"2"</font></code> and the concatenation returns the string <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"120? 492"</font></code>.</li> 
       <li>The concatenation between <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"120? 492"</font></code> and <code><font style="color:DarkBlue; text-decoration: none; font-weight: bold;">'0'</font></code> returns the string <code><font style="color:DarkGreen; text-decoration: none; font-weight: bold;">"120? 49248"</font></code>.</li> 
      </ol> 
      <p>The <a href="#code-section-66">code section 66</a> yields the desired result:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-66"><b>Code section 3.66: Correct primitive type.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="kt">char</span> <span class="n">one</span> <span class="o">=</span> <span class="sc">'1'</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">char</span> <span class="n">zero</span> <span class="o">=</span> <span class="sc">'0'</span><span class="o">;</span>
<span class="lineno">3 </span>
<span class="lineno">4 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"120? "</span> <span class="o">+</span> <span class="n">one</span> <span class="o">+</span> <span class="sc">'2'</span> <span class="o">+</span> <span class="n">zero</span><span class="o">);</span>
</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Console for Code section 3.66</b> <pre style="background-color:#000; color:#fff;">
120? 120
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.9</b>: Consider the following code:</p> 
        <table style="width: 100%;"> 
         <tbody>
          <tr> 
           <td valign="top"> 
            <table style="padding:2px; margin:2px;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="question-9"><b>Question 3.9: New concatenation operations.</b></span> 
                <div class="mw-highlight mw-content-ltr" dir="ltr"> 
                 <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">one</span> <span class="o">=</span> <span class="sc">'1'</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">int</span> <span class="n">zero</span> <span class="o">=</span> <span class="sc">'0'</span><span class="o">;</span>
<span class="lineno">3 </span>
<span class="lineno">4 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">" 3? "</span> <span class="o">+</span> <span class="o">(</span><span class="n">one</span> <span class="o">+</span> <span class="sc">'2'</span> <span class="o">+</span> <span class="n">zero</span><span class="o">));</span>
</span><span class="lineno">5 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"102? "</span> <span class="o">+</span> <span class="mi">100</span> <span class="o">+</span> <span class="sc">'2'</span> <span class="o">+</span> <span class="mi">0</span><span class="o">);</span>
</span><span class="lineno">6 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"102? "</span> <span class="o">+</span> <span class="o">(</span><span class="mi">100</span> <span class="o">+</span> <span class="sc">'2'</span> <span class="o">+</span> <span class="mi">0</span><span class="o">));</span>
</span>
</pre>
                </div> </td> 
              </tr> 
             </tbody>
            </table> </td> 
           <td valign="top"> 
            <table style="padding:2px; margin:2px; width:100%;"> 
             <tbody>
              <tr valign="top"> 
               <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
               <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Console for Question 3.9</b> <pre style="background-color:#000; color:#fff;">
  3? 147
102? 10020
102? 150
</pre></td> 
              </tr> 
             </tbody>
            </table> </td> 
          </tr> 
         </tbody>
        </table> 
        <p>Explain the results seen.</p> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <p>For the first line:</p> 
          <table style="margin: auto; text-align: center;"> 
           <tbody>
            <tr> 
             <td><code>" 3? " + (one + '2' + zero)</code></td> 
            </tr> 
            <tr> 
             <td><code>" 3? " + (<u><b>49</b> + '2'</u> + <b>48</b>)</code></td> 
            </tr> 
            <tr> 
             <td><code>" 3? " + (<u><b>99</b> + 48</u>)</code></td> 
            </tr> 
            <tr> 
             <td><code><u>" 3? " + <b>147</b></u></code></td> 
            </tr> 
            <tr> 
             <td><code><b>" 3? 147"</b></code></td> 
            </tr> 
           </tbody>
          </table> 
          <p>For the second line:</p> 
          <table style="margin: auto; text-align: center;"> 
           <tbody>
            <tr> 
             <td><code><u>"102? " + 100</u> + '2' + 0</code></td> 
            </tr> 
            <tr> 
             <td><code><u><b>"102? 100"</b> + '2'</u> + 0</code></td> 
            </tr> 
            <tr> 
             <td><code><u><b>"102? 1002"</b> + 0</u></code></td> 
            </tr> 
            <tr> 
             <td><code><b>"102? 10020"</b></code></td> 
            </tr> 
           </tbody>
          </table> 
          <p>For the last line:</p> 
          <table style="margin: auto; text-align: center;"> 
           <tbody>
            <tr> 
             <td><code>"102? " + (<u>100 + '2'</u> + 0)</code></td> 
            </tr> 
            <tr> 
             <td><code>"102? " + (<u><b>150</b> + 0</u>)</code></td> 
            </tr> 
            <tr> 
             <td><code><u>"102? " + <b>150</b></u></code></td> 
            </tr> 
            <tr> 
             <td><code><b>"102? 150"</b></code></td> 
            </tr> 
           </tbody>
          </table> 
         </div> 
        </div> 
       </div> 
      </div> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Methods">Methods</span></h1> 
      <p><i>Methods</i> are how we communicate with objects. When we invoke or call a method we are asking the object to carry out a task. We can say methods implement the behaviour of objects. For each method we need to give a name, we need to define its input parameters and we need to define its return type. We also need to set its <a href="/wiki/Java_Programming/Scope" title="Java Programming/Scope">visibility</a> (private, protected or public). If the method throws a checked exception, that needs to be declared as well. It is called a <i>method definition</i>. The syntax of method definition is:</p> 
      <div class="mw-highlight mw-content-ltr" dir="ltr"> 
       <pre>
<span class="lineno">1 </span><span class="n">MyClass</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="o">...</span>
<span class="lineno">3 </span>  <span class="kd">public</span> <span class="n">ReturnType</span> <span class="nf">methodName</span><span class="o">(</span><span class="n">ParamOneType</span> <span class="n">parameter1</span><span class="o">,</span> <span class="n">ParamTwoType</span> <span class="n">parameter2</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">4 </span>      <span class="o">...</span>
<span class="lineno">5 </span>      <span class="k">return</span> <span class="n">returnType</span><span class="o">;</span>
<span class="lineno">6 </span>  <span class="o">}</span>
<span class="lineno">7 </span>  <span class="o">...</span>
<span class="lineno">8 </span><span class="o">}</span>
</pre>
      </div> 
      <p>We can declare that the method does not return anything using the <code><a href="/wiki/Java_Programming/Keywords/void" title="Java Programming/Keywords/void"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">void</font></a></code> Java keyword. For example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-67"><b>Code section 3.67: Method without returned data.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="kt">void</span> <span class="nf">methodName</span><span class="o">(</span><span class="n">String</span> <span class="n">parameter1</span><span class="o">,</span> <span class="n">String</span> <span class="n">parameter2</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="o">...</span>
<span class="lineno">3 </span>  <span class="k">return</span><span class="o">;</span>
<span class="lineno">4 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>When the method returns nothing, the <code><a href="/wiki/Java_Programming/Keywords/return" title="Java Programming/Keywords/return"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">return</font></a></code> keyword at the end of the method is optional. When the execution flow reaches the <code><a href="/wiki/Java_Programming/Keywords/return" title="Java Programming/Keywords/return"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">return</font></a></code> keyword, the method execution is stopped and the execution flow returns to the caller method. The <code><a href="/wiki/Java_Programming/Keywords/return" title="Java Programming/Keywords/return"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">return</font></a></code> keyword can be used anywhere in the method as long as there is a way to execute the instructions below:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Nuvola_apps_important.svg" class="image" title="Warning"><img alt="Warning" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/32px-Nuvola_apps_important.svg.png" width="32" height="27" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/48px-Nuvola_apps_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/64px-Nuvola_apps_important.svg.png 2x" data-file-width="600" data-file-height="500"></a></td> 
         <td style="background-color:#fff0f0; border-left: 4px solid red; padding-left: 6px;"><span id="code-section-68" style="color: red;"><b>Code section 3.68: <code><a href="/wiki/Java_Programming/Keywords/return" title="Java Programming/Keywords/return"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">return</font></a></code> keyword location.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno"> 1 </span><span class="kd">private</span> <span class="kt">void</span> <span class="nf">aMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 2 </span>  <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno"> 3 </span>  <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 4 </span>    <span class="n">c</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
<span class="lineno"> 5 </span><span class="hll">    <span class="k">return</span><span class="o">;</span>
</span><span class="lineno"> 6 </span>  <span class="o">}</span>
<span class="lineno"> 7 </span>  <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">c</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
<span class="lineno"> 8 </span><span class="hll">  <span class="k">return</span><span class="o">;</span>
</span><span class="lineno"> 9 </span>  <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">c</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno">10 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>In the <a href="#code-section-68">code section 3.68</a>, the <code><a href="/wiki/Java_Programming/Keywords/return" title="Java Programming/Keywords/return"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">return</font></a></code> keyword at line 5 is well placed because the instructions below can be reached when <code>a</code> is negative or equal to 0. However, the <code><a href="/wiki/Java_Programming/Keywords/return" title="Java Programming/Keywords/return"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">return</font></a></code> keyword at line 8 is badly placed because the instructions below can't be reached.</p> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.9</b>: Consider the following code:</p> 
        <table style="padding:2px; margin:2px;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
           <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="question-9"><b>Question 3.9: Compiler error.</b></span> 
            <div class="mw-highlight mw-content-ltr" dir="ltr"> 
             <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="kt">int</span> <span class="nf">myMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="n">b</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno">3 </span>  <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">4 </span>    <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
<span class="lineno">5 </span>    <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
<span class="lineno">6 </span>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">7 </span>    <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno">8 </span>  <span class="o">}</span>
<span class="lineno">9 </span><span class="o">}</span>
</pre>
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
        <p>The code above will return a compiler error. Why?</p> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="answer-9">Answer 3.9: Compiler error.</span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="hll"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">myMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">2 </span>  <span class="n">b</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno">3 </span>  <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">4 </span>    <span class="n">a</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
<span class="lineno">5 </span>    <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
<span class="lineno">6 </span>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
<span class="lineno">7 </span><span class="hll">    <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="lineno">8 </span>  <span class="o">}</span>
<span class="lineno">9 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> 
          <p>The method is supposed to return a <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code> but when <code>a</code> is negative or equal to 0, it returns nothing.</p> 
         </div> 
        </div> 
       </div> 
      </div> 
      <h2><span class="mw-headline" id="Parameter_passing">Parameter passing</span></h2> 
      <p>We can pass any <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">primitive data types</a> or reference data type to a method.</p> 
      <h3><span class="mw-headline" id="Primitive_type_parameter">Primitive type parameter</span></h3> 
      <p>The primitive types are <i>passed in by value</i>. It means that as soon as the primitive type is passed in, there is no more link between the value inside the method and the source variable:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-69"><b>Code section 3.69: A method modifying a variable.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="kt">void</span> <span class="nf">modifyValue</span><span class="o">(</span><span class="kt">int</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="n">number</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">3 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-70"><b>Code section 3.70: Passing primitive value to method.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno">2 </span><span class="hll"><span class="n">modifyValue</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class="lineno">3 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.70</b> <pre style="background-color:#000; color:#fff;">
0  
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>As you can see in <a href="#code-section-70">code section 3.70</a>, the <code>modifyValue()</code> method has not modified the value of <code>i</code>.</p> 
      <h3><span class="mw-headline" id="Reference_type_parameter">Reference type parameter</span></h3> 
      <p>The object references are passed by value. It means that:</p> 
      <ul> 
       <li>There is no more link between the reference inside the method and the source reference,</li> 
       <li>The source object itself and the object itself inside the method are still the same.</li> 
      </ul> 
      <p>You must understand the difference between the reference of an object and the object itself. A <i>object reference</i> is the link between a variable name and an instance of object:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td><code>Object object</code> ? <code>new Object()</code></td> 
        </tr> 
       </tbody>
      </table> 
      <p>An object reference is a pointer, an address to the object instance.</p> 
      <p>The object itself is the value of its attributes inside the object instance:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>object.firstName</td> 
         <td>?</td> 
         <td>"James"</td> 
        </tr> 
        <tr> 
         <td>object.lastName</td> 
         <td>?</td> 
         <td>"Gosling"</td> 
        </tr> 
        <tr> 
         <td>object.birthDay</td> 
         <td>?</td> 
         <td>"May 19"</td> 
        </tr> 
       </tbody>
      </table> 
      <p>Take a look at the example above:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-71"><b>Code section 3.71: A method modifying an object.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="kt">void</span> <span class="nf">modifyObject</span><span class="o">(</span><span class="n">FirstClass</span> <span class="n">anObject</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="n">anObject</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Susan"</span><span class="o">);</span>
<span class="lineno">3 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-72"><b>Code section 3.72: Passing reference value to method.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">FirstClass</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirstClass</span><span class="o">();</span>
<span class="lineno">2 </span><span class="n">object</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Christin"</span><span class="o">);</span>
<span class="lineno">3 </span>
<span class="lineno">4 </span><span class="hll"><span class="n">modifyObject</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class="lineno">5 </span>
<span class="lineno">6 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">object</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.72</b> <pre style="background-color:#000; color:#fff;">
Susan
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The name has changed because the method has changed the object itself and not the reference. Now take a look at the other example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-73"><b>Code section 3.73: A method modifying an object reference.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="kt">void</span> <span class="nf">modifyObject</span><span class="o">(</span><span class="n">FirstClass</span> <span class="n">anObject</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="n">anObject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirstClass</span><span class="o">();</span>
<span class="lineno">3 </span>  <span class="n">anObject</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Susan"</span><span class="o">);</span>
<span class="lineno">4 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-74"><b>Code section 3.74: Passing reference value to method.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">FirstClass</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirstClass</span><span class="o">();</span>
<span class="lineno">2 </span><span class="n">object</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Christin"</span><span class="o">);</span>
<span class="lineno">3 </span>
<span class="lineno">4 </span><span class="hll"><span class="n">modifyObject</span><span class="o">(</span><span class="n">object</span><span class="o">);</span>
</span><span class="lineno">5 </span>
<span class="lineno">6 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">object</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.74</b> <pre style="background-color:#000; color:#fff;">
Christin
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The name has not changed because the method has changed the reference and not the object itself. The behavior is the same as if the method was in-lined and the parameters were assigned to new variable names:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-75"><b>Code section 3.75: In-lined method.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="n">FirstClass</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirstClass</span><span class="o">();</span>
<span class="lineno"> 2 </span><span class="n">object</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Christin"</span><span class="o">);</span>
<span class="lineno"> 3 </span>
<span class="lineno"> 4 </span><span class="c1">// Start of the method</span>
<span class="lineno"> 5 </span><span class="hll"><span class="n">FirstClass</span> <span class="n">anObject</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
</span><span class="lineno"> 6 </span><span class="hll"><span class="n">anObject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FirstClass</span><span class="o">();</span>
</span><span class="lineno"> 7 </span><span class="hll"><span class="n">anObject</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Susan"</span><span class="o">);</span>
</span><span class="lineno"> 8 </span><span class="c1">// End of the method</span>
<span class="lineno"> 9 </span>
<span class="lineno">10 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">object</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.75</b> <pre style="background-color:#000; color:#fff;">
Christin
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Variable_argument_list">Variable argument list</span></h2> 
      <p>Java SE 5.0 added syntactic support for methods with <a rel="nofollow" class="external text" href="http://docs.oracle.com/javase/1.5.0/docs/guide/language/varargs.html">variable argument list</a>, which simplifies the typesafe usage of methods requiring a variable number of arguments. Less formally, these parameters are called <i>varargs</i><a rel="nofollow" class="external autonumber" href="http://www.javabeat.net/qna/645-varargs-in-java-50/">[2]</a>. The type of a variable parameter must be followed with <code>...</code>, and Java will box all the arguments into an array:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-76"><b>Code section 3.76: A method using vararg parameters.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="hll"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">drawPolygon</span><span class="o">(</span><span class="n">Point</span><span class="o">...</span> <span class="n">points</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">2 </span>  <span class="c1">//…</span>
<span class="lineno">3 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>When calling the method, a programmer can simply separate the points by commas, without having to explicitly create an <a href="/wiki/Java_Programming/Arrays" title="Java Programming/Arrays">array</a> of <code>Point</code> objects. Within the method, the points can be referenced as <code>points[0]</code>, <code>points[1]</code>, etc. If no points are passed, the array has a length of zero.</p> 
      <p>A method can have both normal parameters and a variable parameter but the variable parameter must always be the last parameter. For instance, if the programmer is required to use a minimum number of parameters, those parameters can be specified before the variable argument:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-77"><b>Code section 3.77: Variable arguments.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="c1">// A polygon needs at least three points.</span>
<span class="lineno">2 </span><span class="hll"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">drawPolygon</span><span class="o">(</span><span class="n">Point</span> <span class="n">p1</span><span class="o">,</span> <span class="n">Point</span> <span class="n">p2</span><span class="o">,</span> <span class="n">Point</span> <span class="n">p3</span><span class="o">,</span> <span class="n">Point</span><span class="o">...</span> <span class="n">otherPoints</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">3 </span>  <span class="c1">//…</span>
<span class="lineno">4 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Return_parameter">Return parameter</span></h2> 
      <p>A method may return a value (which can be a primitive type or an object reference). If the method does not return a value we use the <code><a href="/wiki/Java_Programming/Keywords/void" title="Java Programming/Keywords/void"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">void</font></a></code> Java keyword.</p> 
      <p>However, a method can return only one value so what if you want to return more than one value from a method? You can pass in an object reference to the method, and let the method modify the object properties so the modified values can be considered as an output value from the method. You can also create an Object array inside the method, assign the return values and return the array to the caller. However, this gives a problem if you want to mix primitive data types and object references as the output values from the method.</p> 
      <p>There is a better approach, define a special return object with the needed return values. Create that object inside the method, assign the values and return the reference to this object. This special object is "bound" to this method and used only for returning values, so do not use a public class. The best way is to use a nested class, see example below:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-12"><b>Code listing 3.12: Multiple returned variables.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyObject</span> <span class="o">{</span>
<span class="lineno"> 2 </span>  <span class="o">...</span>
<span class="lineno"> 3 </span> 
<span class="lineno"> 4 </span>  <span class="cm">/** Nested object is for return values from getPersonInfoById method */</span>
<span class="lineno"> 5 </span>  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ReturnObject</span> <span class="o">{</span>
<span class="lineno"> 6 </span>      <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<span class="lineno"> 7 </span>      <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
<span class="lineno"> 8 </span>
<span class="lineno"> 9 </span>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAge</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">10 </span>          <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
<span class="lineno">11 </span>      <span class="o">}</span>
<span class="lineno">12 </span> 
<span class="lineno">13 </span>      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getAge</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">14 </span>          <span class="k">return</span> <span class="n">age</span><span class="o">;</span>
<span class="lineno">15 </span>      <span class="o">}</span>
<span class="lineno">16 </span>
<span class="lineno">17 </span>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">18 </span>          <span class="n">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
<span class="lineno">19 </span>      <span class="o">}</span>
<span class="lineno">20 </span> 
<span class="lineno">21 </span>      <span class="kd">public</span> <span class="n">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">22 </span>          <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
<span class="lineno">23 </span>      <span class="o">}</span>
<span class="lineno">24 </span>  <span class="o">}</span> <span class="c1">// End of nested class definition</span>
<span class="lineno">25 </span>
<span class="lineno">26 </span>  <span class="cm">/** Method using the nested class to return values */</span>
<span class="lineno">27 </span>  <span class="kd">public</span> <span class="n">ReturnObject</span> <span class="nf">getPersonInfoById</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">28 </span>    <span class="kt">int</span>    <span class="n">age</span><span class="o">;</span>
<span class="lineno">29 </span>    <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
<span class="lineno">30 </span>    <span class="o">...</span>
<span class="lineno">31 </span>    <span class="c1">// Get the name and age based on the ID from the database</span>
<span class="lineno">32 </span>    <span class="o">...</span>
<span class="lineno">33 </span>    <span class="n">ReturnObject</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ReturnObject</span><span class="o">();</span>
<span class="lineno">34 </span>    <span class="n">result</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
<span class="lineno">35 </span>    <span class="n">result</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
<span class="lineno">36 </span>
<span class="lineno">37 </span><span class="hll">    <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</span><span class="lineno">38 </span>  <span class="o">}</span>
<span class="lineno">39 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>In the above example the <code>getPersonInfoById</code> method returns an object reference that contains both values of the name and the age. See below how you may use that object:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-78"><b>Code section 3.78: Retrieving the values.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">MyObject</span> <span class="n">object</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyObject</span><span class="o">();</span>
<span class="lineno">2 </span><span class="hll"><span class="n">MyObject</span><span class="o">.</span><span class="na">ReturnObject</span> <span class="n">person</span> <span class="o">=</span> <span class="n">object</span><span class="o">.</span><span class="na">getPersonInfoById</span><span class="o">(</span><span class="mi">102</span><span class="o">);</span>
</span><span class="lineno">3 </span>
<span class="lineno">4 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Person Name="</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
<span class="lineno">5 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Person Age ="</span> <span class="o">+</span> <span class="n">person</span><span class="o">.</span><span class="na">getAge</span><span class="o">());</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.10</b>: Consider the following code:</p> 
        <table style="padding:2px; margin:2px;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
           <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="question-10"><b>Question 3.10: Compiler error.</b></span> 
            <div class="mw-highlight mw-content-ltr" dir="ltr"> 
             <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="kt">int</span> <span class="nf">myMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="n">String</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">3 </span>    <span class="n">c</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
<span class="lineno">4 </span>    <span class="k">return</span> <span class="n">c</span><span class="o">;</span>
<span class="lineno">5 </span>  <span class="o">}</span>
<span class="lineno">6 </span>  <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno">7 </span>  <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
<span class="lineno">8 </span><span class="o">}</span>
</pre>
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
        <p>The code above will return a compiler error. Why?</p> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="answer-10">Answer 3.10: Compiler error.</span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="hll"><span class="kd">private</span> <span class="kt">int</span> <span class="nf">myMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="n">String</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">2 </span>  <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">3 </span>    <span class="n">c</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
<span class="lineno">4 </span><span class="hll">    <span class="k">return</span> <span class="n">c</span><span class="o">;</span>
</span><span class="lineno">5 </span>  <span class="o">}</span>
<span class="lineno">6 </span>  <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span> <span class="o">+</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno">7 </span>  <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
<span class="lineno">8 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> 
          <p>The method is supposed to return a <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code> but at line 4, it returns <code>c</code>, which is a String.</p> 
         </div> 
        </div> 
       </div> 
      </div> 
      <h2><span id="Special_method,_the_constructor"></span><span class="mw-headline" id="Special_method.2C_the_constructor">Special method, the constructor</span></h2> 
      <p>The constructor is a special method called automatically when an object is created with the <code><a href="/wiki/Java_Programming/Keywords/new" title="Java Programming/Keywords/new"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">new</font></a></code> keyword. Constructor does not have a return value and its name is the same as the class name. Each class must have a constructor. If we do not define one, the compiler will create a default so called <b>empty constructor</b> automatically.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-13"><b>Code listing 3.13: Automatically created constructor.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="cm">/**</span>
<span class="lineno">3 </span><span class="cm">  * MyClass Empty Constructor</span>
<span class="lineno">4 </span><span class="cm">  */</span>
<span class="lineno">5 </span><span class="hll">  <span class="kd">public</span> <span class="nf">MyClass</span><span class="o">()</span> <span class="o">{</span>
</span><span class="lineno">6 </span><span class="hll">  <span class="o">}</span>
</span><span class="lineno">7 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Static_methods">Static methods</span></h2> 
      <p>A <i>static method</i> is a method that can be called without an object instance. It can be called on the class directly. For example, the <code>valueOf(String)</code> method of the <code>Integer</code> class is a static method:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-79"><b>Code section 3.79: Static method.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">Integer</span> <span class="n">i</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="s">"10"</span><span class="o">);</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The static keyword makes attributes instance-agnostic. This means that you cannot reference a static attribute of a single object (because such a specific object attribute doesn't exist). Instead, only one instance of a static attribute exists, whether there is one object in the JVM or one hundred. Here is an example of using a static attribute in a static method:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-80"><b>Code section 3.80: Static attribute.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="lineno">2 </span>
<span class="lineno">3 </span><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">getNewInteger</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">4 </span>  <span class="k">return</span> <span class="n">count</span><span class="o">++;</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>You can notice that when you use <code>System.out.println()</code>, <code>out</code> is a static attribute of the <code>System</code> class. A static attribute is related to a class, not to any object instance. This is how Java achieves one universal output stream that we can use to print output. Here is a more complex use case:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-14"><b>Code listing 3.14: A static attribute.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyProgram</span> <span class="o">{</span>
<span class="lineno"> 2 </span>
<span class="lineno"> 3 </span><span class="hll">    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class="lineno"> 4 </span>
<span class="lineno"> 5 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span> <span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 6 </span>        <span class="n">MyProgram</span><span class="o">.</span><span class="na">count</span><span class="o">++;</span>
<span class="lineno"> 7 </span>
<span class="lineno"> 8 </span>        <span class="n">MyProgram</span> <span class="n">program1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyProgram</span><span class="o">();</span>
<span class="lineno"> 9 </span>        <span class="n">program1</span><span class="o">.</span><span class="na">count</span><span class="o">++;</span>
<span class="lineno">10 </span>
<span class="lineno">11 </span>        <span class="n">MyProgram</span> <span class="n">program2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyProgram</span><span class="o">();</span>
<span class="lineno">12 </span>        <span class="n">program2</span><span class="o">.</span><span class="na">count</span><span class="o">++;</span>
<span class="lineno">13 </span>
<span class="lineno">14 </span>        <span class="k">new</span> <span class="n">MyProgram</span><span class="o">().</span><span class="na">count</span><span class="o">++;</span>
<span class="lineno">15 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">MyProgram</span><span class="o">.</span><span class="na">count</span><span class="o">);</span>
<span class="lineno">16 </span>    <span class="o">}</span>
<span class="lineno">17 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code listing 3.14</b> <pre style="background-color:#000; color:#fff;">
4
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.11</b>: Visit the Oracle <a rel="nofollow" class="external text" href="http://docs.oracle.com/javase/7/docs/api/java/lang/Integer.html">JavaDoc of the class <code>java.lang.Integer</code></a>.</p> 
        <p>How many static fields does this class have?</p> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <p>4.</p> 
          <ul> 
           <li><code>int MAX_VALUE</code>,</li> 
           <li><code>int MIN_VALUE</code>,</li> 
           <li><code>int SIZE</code> and</li> 
           <li><code>Class&lt;Integer&gt; TYPE</code>.</li> 
          </ul> 
         </div> 
        </div> 
       </div> 
      </div> 
      <dl> 
       <dd>
        <i>To learn how to overload and override a method, see <a href="/wiki/Java_Programming/Overloading_Methods_and_Constructors" title="Java Programming/Overloading Methods and Constructors">Overloading Methods and Constructors</a>.</i>
       </dd> 
      </dl> 
      <p><br></p> 
      <p><br></p> 
      <h1><span id="API/java.lang.String"></span><span class="mw-headline" id="API.2Fjava.lang.String">API/java.lang.String</span></h1> 
      <p><code><a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a></code> is a class built into the Java language defined in the <code>java.lang</code> package. It represents character strings. Strings are ubiquitous in Java. Study the <code>String</code> class and its methods carefully. It will serve you well to know how to manipulate them skillfully. <a href="/wiki/Java_Programming/Literals#String_Literals" title="Java Programming/Literals">String literals</a> in Java programs, such as "abc", are implemented as instances of this class like this:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.81: String example.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"This is string literal"</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>On the right hand side a String object is created represented by the string literal. Its object reference is assigned to the <code>str</code> variable.</p> 
      <h2><span class="mw-headline" id="Immutability">Immutability</span></h2> 
      <p>Strings are <i>immutable</i>; that is, they cannot be modified once created. Whenever it looks as if a String object was modified actually a new String object was created. For instance, the <code>String.trim()</code> method returns the string with leading and trailing whitespace removed. Actually, it creates a new trimmed string and then returns it. Pay attention on what happens in <a href="#code-section-82">Code section 3.82</a>:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-82"><b>Code section 3.82: Immutability.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">badlyCutText</span> <span class="o">=</span> <span class="s">"     Java is great.     "</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">badlyCutText</span><span class="o">);</span>
<span class="lineno">3 </span>
<span class="lineno">4 </span><span class="hll"><span class="n">badlyCutText</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>
</span><span class="lineno">5 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">badlyCutText</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.82</b> <pre style="background-color:#000; color:#fff;">
     Java is great.    
     Java is great.    
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <code>trim()</code> method call does not modify the object so nothing happens. It creates a new trimmed string and then throws it away.</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-83"><b>Code section 3.83: Assignment.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">badlyCutText</span> <span class="o">=</span> <span class="s">"     Java is great.     "</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">badlyCutText</span><span class="o">);</span>
<span class="lineno">3 </span>
<span class="lineno">4 </span><span class="hll"><span class="n">badlyCutText</span> <span class="o">=</span> <span class="n">badlyCutText</span><span class="o">.</span><span class="na">trim</span><span class="o">();</span>
</span><span class="lineno">5 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">badlyCutText</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.83</b> <pre style="background-color:#000; color:#fff;">
     Java is great.    
Java is great.
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The returned string is assigned to the variable. It does the job as the <code>trim()</code> method has created a new <code>String</code> instance.</p> 
      <h2><span class="mw-headline" id="Concatenation">Concatenation</span></h2> 
      <p>The Java language provides special support for the string concatenation with operator <code>+</code>:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.84: Examples of concatenation.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"First part"</span><span class="o">);</span>
<span class="lineno">2 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">" second part"</span><span class="o">);</span>
<span class="lineno">3 </span><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"First part"</span> <span class="o">+</span> <span class="s">" second part"</span><span class="o">;</span>
<span class="lineno">4 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.84</b> <pre style="background-color:#000; color:#fff;">
First part
 second part
First part second part
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The concatenation is not always processed at the same time. <a href="/wiki/Java_Programming/Literals#String_Literals" title="Java Programming/Literals">Raw string literals</a> concatenation is done at compile time, hence there is a single string literal in the byte code of the class. Concatenation with at least one object is done at runtime.</p> 
      <p><code>+</code> operator can concatenate other objects with strings. For instance, integers will be converted to strings before the concatenation:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.85: Concatenation of integers.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Age="</span> <span class="o">+</span> <span class="mi">25</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.85</b> <pre style="background-color:#000; color:#fff;">
Age=25
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Each Java object has the <code>String toString()</code> inherited from the <code><a href="/wiki/Java_Programming/API/java.lang.Object" title="Java Programming/API/java.lang.Object">Object</a></code> class. This method provides a way to convert objects into <code>String</code>s. Most classes override the default behavior to provide more specific (and more useful) data in the returned <code>String</code>:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.86: Concatenation of objects.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Age="</span> <span class="o">+</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="mi">31</span><span class="o">));</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.86</b> <pre style="background-color:#000; color:#fff;">
Age=31
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span id="Using_StringBuilder/StringBuffer_to_concatenate_strings"></span><span class="mw-headline" id="Using_StringBuilder.2FStringBuffer_to_concatenate_strings">Using StringBuilder/StringBuffer to concatenate strings</span></h2> 
      <p>Remember that <code>String</code> objects are immutable objects. Once a <code>String</code> is created, it can not be modified, takes up memory until garbage collected. Be careful of writing a method like this:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.87: Raw concatenation.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="n">String</span> <span class="nf">convertToString</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
<span class="lineno">3 </span>  <span class="c1">// Loops through every element in words collection</span>
<span class="lineno">4 </span>  <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">5 </span><span class="hll">    <span class="n">str</span> <span class="o">=</span> <span class="n">str</span> <span class="o">+</span> <span class="n">word</span> <span class="o">+</span> <span class="s">" "</span><span class="o">;</span>
</span><span class="lineno">6 </span>  <span class="o">}</span>
<span class="lineno">7 </span>  <span class="k">return</span> <span class="n">str</span><span class="o">;</span>
<span class="lineno">8 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>On the <code>+</code> operation a new <code><a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a></code> object is created at each iteration. Suppose <code>words</code> contains the elements <code>["Foo", "Bar", "Bam", "Baz"]</code>. At runtime, the method creates thirteen <code>String</code>s:</p> 
      <ol> 
       <li><code>""</code></li> 
       <li><code>"Foo"</code></li> 
       <li><code>" "</code></li> 
       <li><code>"Foo "</code></li> 
       <li><code>"Foo Bar"</code></li> 
       <li><code>" "</code></li> 
       <li><code>"Foo Bar "</code></li> 
       <li><code>"Foo Bar Bam"</code></li> 
       <li><code>" "</code></li> 
       <li><code>"Foo Bar Bam "</code></li> 
       <li><code>"Foo Bar Bam Baz"</code></li> 
       <li><code>" "</code></li> 
       <li><code>"Foo Bar Bam Baz "</code></li> 
      </ol> 
      <p>Even though only the last one is actually useful.</p> 
      <p>To avoid unnecessary memory use like this, use the <code>StringBuilder</code> class. It provides similar functionality to <code><a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a></code>s, but stores its data in a mutable way. Only one <code>StringBuilder</code> object is created. Also because object creation is time consuming, using <code>StringBuilder</code> produces much faster code.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.88: Concatenation with <code>StringBuilder</code>.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="n">String</span> <span class="nf">convertToString</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">2 </span>  <span class="n">StringBuilder</span> <span class="n">buf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
<span class="lineno">3 </span>  <span class="c1">// Loops through every element in words collection</span>
<span class="lineno">4 </span>  <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">5 </span>    <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
<span class="lineno">6 </span>    <span class="n">buf</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
<span class="lineno">7 </span>  <span class="o">}</span>
<span class="lineno">8 </span>  <span class="k">return</span> <span class="n">buf</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
<span class="lineno">9 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>As <code>StringBuilder</code> isn't thread safe (see the chapter on <a href="/wiki/Java_Programming/Concurrent_Programming" title="Java Programming/Concurrent Programming">Concurrency</a>) you can't use it in more than one thread. For a multi-thread environment, use <code>StringBuffer</code> instead which does the same and is thread safe. However, <code>StringBuffer</code> is slower so only use it when it is required. Moreover, before Java 5 only <code>StringBuffer</code> existed.</p> 
      <h2><span class="mw-headline" id="Comparing_Strings">Comparing Strings</span></h2> 
      <p>Comparing strings is not as easy as it may first seem. Be aware of what you are doing when comparing <code>String</code>'s using <code>==</code>:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-89"><b>Code section 3.89: Dangerous comparison.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello World!"</span><span class="o">;</span>
<span class="lineno">2 </span><span class="k">if</span> <span class="o">(</span><span class="n">greeting</span> <span class="o">==</span> <span class="s">"Hello World!"</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">3 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match found."</span><span class="o">);</span>
</span><span class="lineno">4 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.89</b> <pre style="background-color:#000; color:#fff;">
Match found.
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The difference between the above and below code is that the above code checks to see if the <code>String</code>'s are the same objects in memory which they are. This is as a result of the fact that <code>String</code>'s are stored in a place in memory called the String Constant Pool. If the <code>new</code> keyword is not explicitly used when creating the <code>String</code> it checks to see if it already exists in the Pool and uses the existing one. If it does not exist, a new Object is created. This is what allows Strings to be immutable in Java. To test for equality, use the <code>equals(Object)</code> method inherited by every class and defined by <code>String</code> to return <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/true" title="Java Programming/Literals/Boolean Literals/true"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">true</font></a></code> if and only if the object passed in is a <code>String</code> contains the exact same data:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-90"><b>Code section 3.90: Right comparison.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello World!"</span><span class="o">;</span>
<span class="lineno">2 </span><span class="k">if</span> <span class="o">(</span><span class="n">greeting</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"Hello World!"</span><span class="o">))</span> <span class="o">{</span>
<span class="lineno">3 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match found."</span><span class="o">);</span>
</span><span class="lineno">4 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.90</b> <pre style="background-color:#000; color:#fff;">
Match found.
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Remember that the comparison is case sensitive.</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-91"><b>Code section 3.91: Comparison with lowercase.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello World!"</span><span class="o">;</span>
<span class="lineno">2 </span><span class="k">if</span> <span class="o">(</span><span class="n">greeting</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"hello world!"</span><span class="o">))</span> <span class="o">{</span>
<span class="lineno">3 </span><span class="hll">    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Match found."</span><span class="o">);</span>
</span><span class="lineno">4 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.91</b> <pre style="background-color:#000; color:#fff;">
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>To order <code>String</code> objects, use the <b><code>compareTo()</code></b> method, which can be accessed wherever we use a String datatype. The <code>compareTo()</code> method returns a negative, zero, or positive number if the parameter is less than, equal to, or greater than the object on which it is called. Let's take a look at an example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-92"><b>Code section 3.92: Order.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">person1</span> <span class="o">=</span> <span class="s">"Peter"</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">String</span> <span class="n">person2</span> <span class="o">=</span> <span class="s">"John"</span><span class="o">;</span>
<span class="lineno">3 </span><span class="hll"><span class="k">if</span> <span class="o">(</span><span class="n">person1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">person2</span><span class="o">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">4 </span>    <span class="c1">// Badly ordered</span>
<span class="lineno">5 </span>    <span class="n">String</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">person1</span><span class="o">;</span>
<span class="lineno">6 </span>    <span class="n">person1</span> <span class="o">=</span> <span class="n">person2</span><span class="o">;</span>
<span class="lineno">7 </span>    <span class="n">person2</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
<span class="lineno">8 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <a href="#code-section-92">code section 3.92</a> is comparing the String variable <code>person1</code> to <code>person2</code>. If <code>person1</code> is different even in the slightest manner, we will get a value above or below 0 depending on the exact difference. The result is negative if this String object lexicographically precedes the argument string. The result is positive if this String object lexicographically follows the argument string. Take a look at the <a rel="nofollow" class="external text" href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html#compareTo%28java.lang.String%29">Java API</a> for more details.</p> 
      <h2><span class="mw-headline" id="Splitting_a_String">Splitting a String</span></h2> 
      <p>Sometimes it is useful to split a string into separate strings, based on a <i><a href="/wiki/Regular_Expressions" title="Regular Expressions">regular expressions</a></i>. The <code><a href="/wiki/Java_Programming/API/java.lang.String" title="Java Programming/API/java.lang.String">String</a></code> class has a <b><code>split()</code></b> method, since Java 1.4, that will return a String array:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-93"><b>Code section 3.93: Order.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">person</span> <span class="o">=</span> <span class="s">"Brown, John:100 Yonge Street, Toronto:(416)777-9999"</span><span class="o">;</span>
<span class="lineno">2 </span><span class="o">...</span>
<span class="lineno">3 </span><span class="hll"><span class="n">String</span><span class="o">[]</span> <span class="n">personData</span> <span class="o">=</span> <span class="n">person</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">);</span>
</span><span class="lineno">4 </span><span class="o">...</span>
<span class="lineno">5 </span><span class="n">String</span> <span class="n">name</span>    <span class="o">=</span> <span class="n">personData</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
<span class="lineno">6 </span><span class="n">String</span> <span class="n">address</span> <span class="o">=</span> <span class="n">personData</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
<span class="lineno">7 </span><span class="n">String</span> <span class="n">phone</span>   <span class="o">=</span> <span class="n">personData</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Another useful application could be to <i>split</i> the String text based on the new line character, so you could process the text line by line.</p> 
      <h2><span class="mw-headline" id="Substrings">Substrings</span></h2> 
      <p>It may also be sometimes useful to create <b>substrings</b>, or strings using the order of letters from an existing string. This can be done in two methods.</p> 
      <p>The first method involves creating a substring out of the characters of a string from a given index to the end:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-94"><b>Code section 3.94: Truncating string.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"coffee"</span><span class="o">;</span>
<span class="lineno">2 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.94</b> <pre style="background-color:#000; color:#fff;">
fee
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The index of the first character in a string is 0.</p> 
      <table style="margin: auto;" cellspacing="0" cellpadding="2"> 
       <tbody>
        <tr> 
         <td style="color: blue;"><code>c</code></td> 
         <td style="color: blue;"><code>o</code></td> 
         <td style="color: blue;"><code>f</code></td> 
         <td style="color: blue; background: grey;"><code>f</code></td> 
         <td style="color: blue; background: grey;"><code>e</code></td> 
         <td style="color: blue; background: grey;"><code>e</code></td> 
        </tr> 
        <tr> 
         <td><i>0</i></td> 
         <td><i>1</i></td> 
         <td><i>2</i></td> 
         <td><i><b>3</b></i></td> 
         <td><i>4</i></td> 
         <td><i>5</i></td> 
        </tr> 
       </tbody>
      </table> 
      <p>By counting from there, it is apparent that the character in index 3 is the second "f" in "coffee". This is known as the <code>beginIndex</code>. All characters from the <code>beginIndex</code> until the end of the string will be copied into the new substring.</p> 
      <p>The second method involves a user-defined <code>beginIndex</code> and <code>endIndex</code>:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-95"><b>Code section 3.95: Extraction of string.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"supporting"</span><span class="o">;</span>
<span class="lineno">2 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">7</span><span class="o">));</span>
</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.95</b> <pre style="background-color:#000; color:#fff;">
port
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The string returned by <code>substring()</code> would be "port".</p> 
      <table style="margin: auto;" cellspacing="0" cellpadding="2"> 
       <tbody>
        <tr> 
         <td style="color: blue;"><code>s</code></td> 
         <td style="color: blue;"><code>u</code></td> 
         <td style="color: blue;"><code>p</code></td> 
         <td style="color: blue; background: grey;"><code>p</code></td> 
         <td style="color: blue; background: grey;"><code>o</code></td> 
         <td style="color: blue; background: grey;"><code>r</code></td> 
         <td style="color: blue; background: grey;"><code>t</code></td> 
         <td style="color: blue;"><code>i</code></td> 
         <td style="color: blue;"><code>n</code></td> 
         <td style="color: blue;"><code>g</code></td> 
        </tr> 
        <tr> 
         <td><i>0</i></td> 
         <td><i>1</i></td> 
         <td><i>2</i></td> 
         <td><i><b>3</b></i></td> 
         <td><i>4</i></td> 
         <td><i>5</i></td> 
         <td><i>6</i></td> 
         <td><i><b>7</b></i></td> 
         <td><i>8</i></td> 
         <td><i>9</i></td> 
        </tr> 
       </tbody>
      </table> 
      <p>Please note that the endIndex is <b>not</b> inclusive. This means that the last character will be of the index <code>endIndex-1</code>. Therefore, in this example, every character from index 3 to index 6, inclusive, was copied into the substring.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Bombilla_amarilla_-_yellow_Edison_lamp.svg" class="image" title="Note"><img alt="Note" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/30px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png" width="30" height="30" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/45px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/60px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 2x" data-file-width="200" data-file-height="200"></a></td> 
         <td style="background-color:#fffff0; border-left: 4px solid yellow; padding-left: 6px;">It is easy to mistake the method <code>substring()</code> for <code><span style="border-bottom: red 1px dashed">subString</span>()</code> (which does not exist and would return with a syntax error on compilation). <i>Substring</i> is considered to be one word. This is why the method name does not seem to follow the common syntax of Java. Just remember that this style only applies to methods or other elements that are made up of more than one word.</td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="String_cases">String cases</span></h2> 
      <p>The <code>String</code> class also allows for the modification of cases. The two methods that make this possible are <code>toLowerCase()</code> and <code>toUpperCase()</code>.</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-96"><b>Code section 3.96: Case modification.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="n">String</span> <span class="n">str</span> <span class="o">=</span> <span class="s">"wIkIbOoKs"</span><span class="o">;</span>
<span class="lineno">2 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">());</span>
</span><span class="lineno">3 </span><span class="hll"><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">());</span>
</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.96</b> <pre style="background-color:#000; color:#fff;">
wikibooks
WIKIBOOKS
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>These methods are useful to do a search which is not case sensitive:</p> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.97: Text search.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="n">String</span> <span class="n">word</span> <span class="o">=</span> <span class="s">"Integer"</span><span class="o">;</span>
<span class="lineno"> 2 </span><span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="s">"A number without a decimal part is an integer."</span>
<span class="lineno"> 3 </span>  <span class="o">+</span> <span class="s">" Integers are a list of digits."</span><span class="o">;</span>
<span class="lineno"> 4 </span>
<span class="lineno"> 5 </span><span class="o">...</span>
<span class="lineno"> 6 </span>
<span class="lineno"> 7 </span><span class="c1">// Remove the case</span>
<span class="lineno"> 8 </span><span class="hll"><span class="n">String</span> <span class="n">lowerCaseWord</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>
</span><span class="lineno"> 9 </span><span class="hll"><span class="n">String</span> <span class="n">lowerCaseText</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>
</span><span class="lineno">10 </span>
<span class="lineno">11 </span><span class="c1">// Search</span>
<span class="lineno">12 </span><span class="hll"><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">lowerCaseText</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">lowerCaseWord</span><span class="o">);</span>
</span><span class="lineno">13 </span><span class="k">while</span> <span class="o">(</span><span class="n">index</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">14 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">word</span>
<span class="lineno">15 </span>    <span class="o">+</span> <span class="s">" appears at column "</span>
<span class="lineno">16 </span>    <span class="o">+</span> <span class="o">(</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span>
<span class="lineno">17 </span>    <span class="o">+</span> <span class="s">"."</span><span class="o">);</span>
<span class="lineno">18 </span><span class="hll">  <span class="n">index</span> <span class="o">=</span> <span class="n">lowerCaseText</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">lowerCaseWord</span><span class="o">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="lineno">19 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 3.97</b> <pre style="background-color:#000; color:#fff;">
Integer appears at column 38.
Integer appears at column 47.
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.12</b>: You have mail addresses in the following form: <code><i>&lt;firstName&gt;</i>.<i>&lt;lastName&gt;</i>@<i>&lt;companyName&gt;</i>.org</code></p> 
        <p>Write the <code>String getDisplayName(String)</code> method that receives the mail string as parameter and returns the readable person name like this: <code>LASTNAME Firstname</code></p> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Answer 3.12: <code>getDisplayName()</code></b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno"> 1 </span><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getDisplayName</span><span class="o">(</span><span class="n">String</span> <span class="n">mail</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 2 </span>  <span class="n">String</span> <span class="n">displayName</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="lineno"> 3 </span> 
<span class="lineno"> 4 </span>  <span class="k">if</span> <span class="o">(</span><span class="n">mail</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno"> 5 </span>    <span class="n">String</span><span class="o">[]</span> <span class="n">mailParts</span> <span class="o">=</span> <span class="n">mail</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"@"</span><span class="o">);</span>
<span class="lineno"> 6 </span>    <span class="n">String</span> <span class="n">namePart</span> <span class="o">=</span> <span class="n">mailParts</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
<span class="lineno"> 7 </span>    <span class="n">String</span><span class="o">[]</span> <span class="n">namesParts</span> <span class="o">=</span> <span class="n">namePart</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"\\."</span><span class="o">);</span>
<span class="lineno"> 8 </span>   
<span class="lineno"> 9 </span>    <span class="c1">// The last name</span>
<span class="lineno">10 </span>    <span class="n">String</span> <span class="n">lastName</span> <span class="o">=</span> <span class="n">namesParts</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
<span class="lineno">11 </span>    <span class="n">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>
<span class="lineno">12 </span>   
<span class="lineno">13 </span>    <span class="c1">// The first name</span>
<span class="lineno">14 </span>    <span class="n">String</span> <span class="n">firstName</span> <span class="o">=</span> <span class="n">namesParts</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
<span class="lineno">15 </span>   
<span class="lineno">16 </span>    <span class="n">String</span> <span class="n">firstNameInitial</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
<span class="lineno">17 </span>    <span class="n">firstNameInitial</span> <span class="o">=</span> <span class="n">firstNameInitial</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">();</span>
<span class="lineno">18 </span>   
<span class="lineno">19 </span>    <span class="n">String</span> <span class="n">firstNameEnd</span> <span class="o">=</span> <span class="n">firstName</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="lineno">20 </span>    <span class="n">firstNameEnd</span> <span class="o">=</span> <span class="n">firstNameEnd</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">();</span>
<span class="lineno">21 </span>   
<span class="lineno">22 </span>    <span class="c1">// Concatenation</span>
<span class="lineno">23 </span>    <span class="n">StringBuilder</span> <span class="n">displayNameBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">lastName</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">firstNameInitial</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">firstNameEnd</span><span class="o">);</span>
<span class="lineno">24 </span>    <span class="n">displayName</span> <span class="o">=</span> <span class="n">displayNameBuilder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
<span class="lineno">25 </span>  <span class="o">}</span>
<span class="lineno">26 </span> 
<span class="lineno">27 </span>  <span class="k">return</span> <span class="n">displayName</span><span class="o">;</span>
<span class="lineno">28 </span><span class="o">}</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> 
          <ol> 
           <li>We only process non null strings,</li> 
           <li>We first split the mail into two parts to separate the personal information from the company information and we keep the name data,</li> 
           <li>Then we split the name information to separate the first name from the last name. As the <code>split()</code> method use regular expression and <code>.</code> is a wildcard character, we have to escape it (<code>\.</code>). However, in a string, the <code>\</code> is also a special character, so we need to escape it too (<code>\\.</code>),</li> 
           <li>The last name is just capitalized,</li> 
           <li>As the case of all the first name characters will not be the same, we have to cut the first name. Only the first name initial will be capitalized,</li> 
           <li>Now we can concatenate all the fragments. We prefer to use a <code>StringBuilder</code> to do that.</li> 
          </ol> 
         </div> 
        </div> 
       </div> 
      </div> 
      <h2><span class="mw-headline" id="See_also">See also</span></h2> 
      <ul> 
       <li><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html" rel="nofollow"><img alt="Oracle wordmark.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Oracle_wordmark.svg/40px-Oracle_wordmark.svg.png" width="40" height="5" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Oracle_wordmark.svg/60px-Oracle_wordmark.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/29/Oracle_wordmark.svg/80px-Oracle_wordmark.svg.png 2x" data-file-width="800" data-file-height="104"></a> <span class="plainlinks"><a rel="nofollow" class="external text" href="http://docs.oracle.com/javase/7/docs/api/java/lang/String.html">Java API: java.lang.String</a></span></li> 
       <li><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html" rel="nofollow"><img alt="Oracle wordmark.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Oracle_wordmark.svg/40px-Oracle_wordmark.svg.png" width="40" height="5" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Oracle_wordmark.svg/60px-Oracle_wordmark.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/29/Oracle_wordmark.svg/80px-Oracle_wordmark.svg.png 2x" data-file-width="800" data-file-height="104"></a> <span class="plainlinks"><a rel="nofollow" class="external text" href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuffer.html">Java API: java.lang.StringBuffer</a></span></li> 
       <li><a href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html" rel="nofollow"><img alt="Oracle wordmark.svg" src="//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Oracle_wordmark.svg/40px-Oracle_wordmark.svg.png" width="40" height="5" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/2/29/Oracle_wordmark.svg/60px-Oracle_wordmark.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/2/29/Oracle_wordmark.svg/80px-Oracle_wordmark.svg.png 2x" data-file-width="800" data-file-height="104"></a> <span class="plainlinks"><a rel="nofollow" class="external text" href="http://docs.oracle.com/javase/7/docs/api/java/lang/StringBuilder.html">Java API: java.lang.StringBuilder</a></span></li> 
      </ul> 
      <p><br></p> 
      <p><br></p> 
      <h1><span id="Classes,_Objects_and_Types"></span><span class="mw-headline" id="Classes.2C_Objects_and_Types">Classes, Objects and Types</span></h1> 
      <p>An <b>object</b> is composed of <b>fields</b> and <b>methods</b>. The fields, also called <i>data members</i>, <i>characteristics</i>, <i>attributes</i>, or <i>properties</i>, describe the state of the object. The methods generally describe the actions associated with a particular object. Think of an object as a noun, its fields as adjectives describing that noun, and its methods as the verbs that can be performed by or on that noun.</p> 
      <p>For example, a sports car is an object. Some of its fields might be its height, weight, acceleration, and speed. An object's fields just hold data about that object. Some of the methods of the sports car could be "drive", "park", "race", etc. The methods really don't mean much unless associated with the sports car, and the same goes for the fields.</p> 
      <p>The blueprint that lets us build our sports car object is called a <i>class</i>. A class doesn't tell us how fast our sports car goes, or what color it is, but it does tell us that our sports car will have a field representing speed and color, and that they will be say, a number and a word (or hex color code), respectively. The class also lays out the methods for us, telling the car how to park and drive, but these methods can't take any action with just the blueprint — they need an object to have an effect.</p> 
      <p>In Java, a class is located in a file similar to its own name. If you want to have a class called <code>SportsCar</code>, its source file needs to be <code>SportsCar.java</code>. The class is created by placing the following in the source file:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-13"><b>Code listing 3.13: SportsCar.java</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SportsCar</span> <span class="o">{</span>
<span class="lineno">2 </span>   <span class="cm">/* Insert your code here */</span>
<span class="lineno">3 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The class doesn't do anything yet, as you will need to add methods and field variables first.</p> 
      <p>The objects are different from the primitive types because:</p> 
      <ol> 
       <li>The primitive types are not instantiated.</li> 
       <li>In the memory, for a primitive type only its value is stored. For an object, also a reference to an instance can be stored.</li> 
       <li>In the memory, the allocated space of a primitive type is fixed, whatever their value. The allocated space of an object can vary, for instance either the object is instantiated or not.</li> 
       <li>The primitive types don't have methods callable on them.</li> 
       <li>A primitive type can't be inherited.</li> 
      </ol> 
      <h2><span class="mw-headline" id="Instantiation_and_constructors">Instantiation and constructors</span></h2> 
      <p>In order to get from class to object, we "build" our object by <i>instantiation</i>. Instantiation simply means to create an <i>instance</i> of a class. Instance and object are very similar terms and are sometimes interchangeable, but remember that an instance refers to a <i>specific object</i>, which was created from a class.</p> 
      <p>This instantiation is brought about by one of the class's methods, called a <i>constructor</i>. As its name implies, a constructor builds the object based on the blueprint. Behind the scenes, this means that computer memory is being allocated for the instance, and values are being assigned to the data members.</p> 
      <p>In general there are four constructor types: default, non-default, copy, and cloning.</p> 
      <p>A <b>default constructor</b> will build the most basic instance. Generally, this means assigning all the fields values like null, zero, or an empty string. Nothing would stop you, however, from setting the color of your default sports car color to red, but this is generally bad programming style. Another programmer would be confused if your basic car came out red instead of say, colorless.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.79: A default constructor.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">SportsCar</span> <span class="n">car</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SportsCar</span><span class="o">();</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>A <b>non-default constructor</b> is designed to create an object instance with prescribed values for most, if not all, of the object's fields. The car is red, goes from 0-60 in 12 seconds, tops out at 190mph, etc.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.80: A non-default constructor.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">SportsCar</span> <span class="n">car</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SportsCar</span><span class="o">(</span><span class="s">"red"</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">190</span><span class="o">);</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>A <b>copy constructor</b> is not included in the Java language, however one can easily create a constructor that does the same as a copy constructor. It's important to understand what it is. As the name implies, a copy constructor creates a new instance to be a duplicate of an already existing one. In Java, this can be also accomplished by creating the instance with the default constructor, and then using the assignment operator to equivocate them. This is not possible in all languages though, so just keep the terminology under your belt.</p> 
      <p>Java has the concept of <b>cloning an object</b>, and the end results are similar to the copy constructor. Cloning an object is faster than creation with the <code><a href="/wiki/Java_Programming/Keywords/new" title="Java Programming/Keywords/new"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">new</font></a></code> keyword, because all the object memory is copied at once to the destination cloned object. This is possible by implementing the <code>Cloneable</code> interface, which allows the method <code>Object.clone()</code> to perform a field-by-field copy.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.81: Cloning object.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">SportsCar</span> <span class="n">car</span> <span class="o">=</span> <span class="n">oldCar</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="Type">Type</span></h2> 
      <p>When an object is created, a reference to the object is also created. The object can not be accessed directly in Java, only through this object reference. This object reference has a <i>type</i> assigned to it. We need this type when passing the object reference to a method as a parameter. Java does strong type checking.</p> 
      <p>Type is basically a list of features/operations, that can be performed through that object reference. The object reference type is basically a contract that guarantees that those operations will be there at run time.</p> 
      <p>When a car is created, it comes with a list of features/operations listed in the user manual that guarantees that those will be there when the car is used.</p> 
      <p>When you create an object from a class by default its type is the same as its class. It means that all the features/operations the class defined are there and available, and can be used. See below:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.82: Default type.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="o">(</span><span class="k">new</span> <span class="n">ClassName</span><span class="o">()).</span><span class="na">operations</span><span class="o">();</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>You can assign this to a variable having the same type as the class:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.83: A variable having the same type as the class.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">ClassName</span> <span class="n">objRefVariable</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassName</span><span class="o">();</span>
<span class="lineno">2 </span><span class="n">objRefVariable</span><span class="o">.</span><span class="na">operations</span><span class="o">();</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>You can assign the created object reference to the class, super class, or to an interface the class implements:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.84: Using the super class.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">SuperClass</span> <span class="n">objectRef</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassName</span><span class="o">();</span> <span class="c1">// features/operations list are defined by the SuperClass class</span>
<span class="lineno">2 </span><span class="o">...</span>
<span class="lineno">3 </span><span class="n">Interface</span> <span class="n">inter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ClassName</span><span class="o">();</span> <span class="c1">// features/operations list are defined by the interface</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>In the car analogy, the created car may have different <b>Type</b>s of drivers. We create separate user manuals for them, an Average user manual, a Power user manual, a Child user manual, or a Handicapped user manual. Each type of user manual describes only those features/operations appropriate for the type of driver. For instance, the Power driver may have additional gears to switch to higher speeds, that are not available to other type of users...</p> 
      <p>When the car key is passed from an adult to a child we are replacing the user manuals, that is called <i>Type Casting</i>.</p> 
      <p>In Java, casts can occur in three ways:</p> 
      <ul> 
       <li>up casting going up in the inheritance tree, until we reach the <code><a href="/wiki/Java_Programming/API/java.lang.Object" title="Java Programming/API/java.lang.Object">Object</a></code></li> 
       <li>up casting to an interface the class implements</li> 
       <li>down casting until we reach the class the object was created from</li> 
      </ul> 
      <h2><span id="Autoboxing/unboxing"></span><span class="mw-headline" id="Autoboxing.2Funboxing">Autoboxing/unboxing</span></h2> 
      <p>Autoboxing and unboxing, language features since Java 1.5, make the programmer's life much easier when it comes to working with the primitive wrapper types. Consider this code fragment:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.85: Traditional object creation.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">23</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">Integer</span> <span class="n">ageObject</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Primitive wrapper objects were Java's way of allowing one to treat primitive data types as though they were objects. Consequently, one was expected to <i>wrap</i> one's primitive data type with the corresponding primitive wrapper object, as shown above.</p> 
      <p>Since Java 1.5, one may write as below and the compiler will automatically create the wrap object. The extra step of wrapping the primitive is no longer required. It has been <i>automatically boxed up</i> on your behalf:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.86: Autoboxing.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="mi">23</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">Integer</span> <span class="n">ageObject</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Bombilla_amarilla_-_yellow_Edison_lamp.svg" class="image" title="Note"><img alt="Note" src="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/30px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png" width="30" height="30" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/45px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/15/Bombilla_amarilla_-_yellow_Edison_lamp.svg/60px-Bombilla_amarilla_-_yellow_Edison_lamp.svg.png 2x" data-file-width="200" data-file-height="200"></a></td> 
         <td style="background-color:#fffff0; border-left: 4px solid yellow; padding-left: 6px;">Keep in mind that the compiler still creates the missing wrapper code, so one doesn't really gain anything performance-wise. Consider this feature a programmer convenience, not a performance booster.</td> 
        </tr> 
       </tbody>
      </table> 
      <p>Each primitive type has a class wrapper:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>Primitive type</td> 
         <td>Class wrapper</td> 
        </tr> 
        <tr> 
         <td><code>byte</code></td> 
         <td><code>java.lang.Byte</code></td> 
        </tr> 
        <tr> 
         <td><code>char</code></td> 
         <td><code>java.lang.Character</code></td> 
        </tr> 
        <tr> 
         <td><code>short</code></td> 
         <td><code>java.lang.Short</code></td> 
        </tr> 
        <tr> 
         <td><code>int</code></td> 
         <td><code>java.lang.Integer</code></td> 
        </tr> 
        <tr> 
         <td><code>long</code></td> 
         <td><code>java.lang.Long</code></td> 
        </tr> 
        <tr> 
         <td><code>float</code></td> 
         <td><code>java.lang.Float</code></td> 
        </tr> 
        <tr> 
         <td><code>double</code></td> 
         <td><code>java.lang.Double</code></td> 
        </tr> 
        <tr> 
         <td><code>boolean</code></td> 
         <td><code>java.lang.Boolean</code></td> 
        </tr> 
        <tr> 
         <td><code>void</code></td> 
         <td><code>java.lang.Void</code></td> 
        </tr> 
       </tbody>
      </table> 
      <p>Unboxing uses the same process in reverse. Study the following code for a moment. The <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> statement requires a <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code> primitive value, yet it was given a Boolean wrapper object. No problem! Java 1.5 will automatically <i>unbox</i> this.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 3.87: Unboxing.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">Boolean</span> <span class="n">canMove</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Boolean</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
<span class="lineno">2 </span> 
<span class="lineno">3 </span><span class="k">if</span> <span class="o">(</span><span class="n">canMove</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">4 </span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"This code is legal in Java 1.5"</span><span class="o">);</span>
<span class="lineno">5 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <div class="collapsible" style="width:100%; clear:both; border:none;"> 
       <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
        Test your knowledge
       </div> 
       <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
        <p><b>Question 3.11</b>: Consider the following code:</p> 
        <table style="padding:2px; margin:2px;"> 
         <tbody>
          <tr valign="top"> 
           <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
           <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="question-11"><b>Question 3.11: Autoboxing/unboxing.</b></span> 
            <div class="mw-highlight mw-content-ltr" dir="ltr"> 
             <pre>
<span class="lineno">5 </span><span class="n">Integer</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
<span class="lineno">6 </span><span class="n">Integer</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">2</span><span class="o">;</span>
<span class="lineno">7 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</pre>
            </div> </td> 
          </tr> 
         </tbody>
        </table> 
        <p>How many autoboxings and unboxings are there in this code?</p> 
        <div class="collapsible" style="width:100%; clear:both; border:none;"> 
         <div class="title" style="background:transparent; text-align:left; background:#cedff2;border:1px solid lightgrey;">
          Answer
         </div> 
         <div class="body" style="background:transparent; text-align:left; background:#e7eff9;border:solid 1px lightgrey;padding:8px;"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="question-11">Answer 3.11: Autoboxing/unboxing.</span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="hll"><span class="n">Integer</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
</span><span class="lineno">2 </span><span class="hll"><span class="n">Integer</span> <span class="n">b</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">2</span><span class="o">;</span>
</span><span class="lineno">3 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> 
          <p>3</p> 
          <ul> 
           <li>1 autoboxing at line 1 to assign.</li> 
           <li>1 unboxing at line 2 to do the addition.</li> 
           <li>1 autoboxing at line 2 to assign.</li> 
           <li>No autoboxing nor unboxing at line 3 as <code>println()</code> supports the <code>Integer</code> class as parameter.</li> 
          </ul> 
         </div> 
        </div> 
       </div> 
      </div> 
      <h2><span class="mw-headline" id="Methods_in_the_Object_class">Methods in the <code>Object</code> class</span></h2> 
      <p>Methods in the <code>java.lang.Object</code> class are inherited, and thus shared in common by all classes.</p> 
      <h3><span class="mw-headline" id="The_clone_method">The <code>clone</code> method</span></h3> 
      <p>The <code>java.lang.Object.clone()</code> method returns a new object that is a copy of the current object. Classes must implement the marker interface <code>java.lang.Cloneable</code> to indicate that they can be cloned.</p> 
      <h3><span class="mw-headline" id="The_equals_method">The <code>equals</code> method</span></h3> 
      <p>The <code>java.lang.Object.equals(java.lang.Object)</code> method compares the object to another object and returns a <code>boolean</code> result indicating if the two objects are equal. Semantically, this method compares the contents of the objects whereas the equality comparison operator "<code>==</code>" compares the object references. The <code>equals</code> method is used by many of the data structure classes in the <code>java.util</code> package. Some of these data structure classes also rely on the <code>Object.hashCode</code> method—see the <code>hashCode</code> method for details on the contract between <code>equals</code> and <code>hashCode</code>. Implementing equals() isn't always as easy as it seems, see '<a rel="nofollow" class="external text" href="http://www.angelikalanger.com/Articles/JavaSolutions/SecretsOfEquals/Equals.html">Secrets of equals()</a>' for more information.</p> 
      <h3><span class="mw-headline" id="The_finalize_method">The <code>finalize</code> method</span></h3> 
      <p>The <code>java.lang.Object.finalize()</code> method is called exactly once before the garbage collector frees the memory for object. A class overrides <code>finalize</code> to perform any clean up that must be performed before an object is reclaimed. Most objects do not need to override <code>finalize</code>.</p> 
      <p>There is no guarantee when the <code>finalize</code> method will be called, or the order in which the <code>finalize</code> method will be called for multiple objects. If the JVM exits without performing garbage collection, the OS may free the objects, in which case the <code>finalize</code> method doesn't get called.</p> 
      <p>The <code>finalize</code> method should always be declared <code>protected</code> to prevent other classes from calling the <code>finalize</code> method.</p> 
      <pre>
protected void finalize() throws Throwable { ... }
</pre> 
      <h3><span class="mw-headline" id="The_getClass_method">The <code>getClass</code> method</span></h3> 
      <p>The <code>java.lang.Object.getClass()</code> method returns the <code>java.lang.Class</code> object for the class that was used to instantiate the object. The class object is the base class of <a href="/wiki/Java_Programming/Reflection" title="Java Programming/Reflection">reflection</a> in Java. Additional reflection support is provided in the <code>java.lang.reflect</code> package.</p> 
      <h3><span class="mw-headline" id="The_hashCode_method">The <code>hashCode</code> method</span></h3> 
      <p>The <code>java.lang.Object.hashCode()</code> method returns an integer (<code>int</code>). This integer can be used to distinguish objects although not completely. It quickly separates most of the objects and those with the same <i>hash code</i> are separated later in another way. It is used by the classes that provide associative arrays, for instance, those that implement the <code>java.util.Map</code> interface . They use the <i>hash code</i> to store the object in the associative array. A good <code>hashCode</code> implementation will return a hash code:</p> 
      <ul> 
       <li>Stable: does not change</li> 
       <li>Evenly distributed: the hash codes of unequal objects tend to be unequal and the hash codes are evenly distributed across integer values.</li> 
      </ul> 
      <p>The second point means that two different objects can have the same <i>hash code</i> so two objects with the same <i>hash code</i> are <u>not necessarily the same</u>!</p> 
      <p>Since associative arrays depend on both the <code>equals</code> and <code>hashCode</code> methods, there is an important contract between these two methods that must be maintained if the objects are to be inserted into a <code>Map</code>:</p> 
      <dl> 
       <dd>
        For two objects 
        <i>a</i> and 
        <i>b</i> 
        <ul> 
         <li><code>a.equals(b) == b.equals(a)</code></li> 
         <li>if <code>a.equals(b)</code> then <code>a.hashCode() == b.hashCode()</code></li> 
         <li>but <del>if <code>a.hashCode() == b.hashCode()</code> then <code>a.equals(b)</code></del></li> 
        </ul> 
       </dd> 
      </dl> 
      <p>In order to maintain this contract, a class that overrides the <code>equals</code> method must also override the <code>hashCode</code> method, and vice versa, so that <code>hashCode</code> is based on the same properties (or a subset of the properties) as <code>equals</code>.</p> 
      <p>A further contract that the map has with the object is that the results of the <code>hashCode</code> and <code>equals</code> methods will not change once the object has been inserted into the map. For this reason, it is generally a good practice to base the hash function on immutable properties of the object.</p> 
      <h3><span class="mw-headline" id="The_toString_method">The <code>toString</code> method</span></h3> 
      <p>The <code>java.lang.Object.toString()</code> method returns a <code>java.lang.String</code> that contains a text representation of the object. The <code><i><b>toString</b></i></code> method is implicitly called by the compiler when an object operand is used with the string concatenation operators (<code>+</code> and <code>+=</code>).</p> 
      <h3><span class="mw-headline" id="The_wait_and_notify_thread_signaling_methods">The wait and notify thread signaling methods</span></h3> 
      <p>Every object has two wait lists for threads associated with it. One wait list is used by the <code>synchronized</code> keyword to acquire the mutex lock associated with the object. If the mutex lock is currently held by another thread, the current thread is added to the list of blocked threads waiting on the mutex lock. The other wait list is used for signaling between threads accomplished through the <code>wait</code> and <code>notify</code> and <code>notifyAll</code> methods.</p> 
      <p>Use of wait/notify allows efficient coordination of tasks between threads. When one thread needs to wait for another thread to complete an operation, or needs to wait until an event occurs, the thread can suspend its execution and wait to be notified when the event occurs. This is in contrast to polling, where the thread repeatedly sleeps for a short period of time and then checks a flag or other condition indicator. Polling is both more computationally expensive, as the thread has to continue checking, and less responsive since the thread won't notice the condition has changed until the next time to check.</p> 
      <h4><span class="mw-headline" id="The_wait_methods">The <code>wait</code> methods</span></h4> 
      <p>There are three overloaded versions of the <code>wait</code> method to support different ways to specify the timeout value: <code>java.lang.Object.wait()</code>, <code>java.lang.Object.wait(long)</code> and <code>java.lang.Object.wait(long, int)</code>. The first method uses a timeout value of zero (0), which means that the wait does not timeout; the second method takes the number of milliseconds as a timeout; the third method takes the number of nanoseconds as a timeout, calculated as <code>1000000 * timeout + nanos</code>.</p> 
      <p>The thread calling <code>wait</code> is blocked (removed from the set of executable threads) and added to the object's wait list. The thread remains in the object's wait list until one of three events occurs:</p> 
      <ol> 
       <li>another thread calls the object's <code>notify</code> or <code>notifyAll</code> method;</li> 
       <li>another thread calls the thread's <code>java.lang.Thread.interrupt</code> method; or</li> 
       <li>a non-zero timeout that was specified in the call to <code>wait</code> expires.</li> 
      </ol> 
      <p>The <code>wait</code> method must be called inside of a block or method synchronized on the object. This insures that there are no race conditions between <code>wait</code> and <code>notify</code>. When the thread is placed in the wait list, the thread releases the object's mutex lock. After the thread is removed from the wait list and added to the set of executable threads, it must acquire the object's mutex lock before continuing execution.</p> 
      <h4><span class="mw-headline" id="The_notify_and_notifyAll_methods">The <code>notify</code> and <code>notifyAll</code> methods</span></h4> 
      <p>The <code>java.lang.Object.notify()</code> and <code>java.lang.Object.notifyAll()</code> methods remove one or more threads from an object's wait list and add them to the set of executable threads. <code>notify</code> removes a single thread from the wait list, while <code>notifyAll</code> removes all threads from the wait list. Which thread is removed by <code>notify</code> is unspecified and dependent on the JVM implementation.</p> 
      <p>The notify methods must be called inside of a block or method synchronized on the object. This insures that there are no race conditions between <code>wait</code> and <code>notify</code>.</p> 
      <p><br></p> 
      <p><br></p> 
      <h1><span class="mw-headline" id="Keywords">Keywords</span></h1> 
      <p><b>Keywords</b> are special tokens in the language which have reserved use in the language. Keywords may not be used as identifiers in Java — you cannot declare a field whose name is a keyword, for instance.</p> 
      <p>Examples of keywords are the primitive types, <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code>; the control flow statements <code><a href="/wiki/Java_Programming/Keywords/for" title="Java Programming/Keywords/for"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">for</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code>; access modifiers such as <code><a href="/wiki/Java_Programming/Keywords/public" title="Java Programming/Keywords/public"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">public</font></a></code>, and special words which mark the declaration and definition of Java classes, packages, and interfaces: <code><a href="/wiki/Java_Programming/Keywords/class" title="Java Programming/Keywords/class"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">class</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/package" title="Java Programming/Keywords/package"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">package</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/interface" title="Java Programming/Keywords/interface"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">interface</font></a></code>.</p> 
      <p>Below are all the Java language keywords:</p> 
      <div class="references-small" style="column-count:3;-moz-column-count:3;"> 
       <ul> 
        <li><code><a href="/wiki/Java_Programming/Keywords/abstract" title="Java Programming/Keywords/abstract"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">abstract</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/assert" title="Java Programming/Keywords/assert"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">assert</font></a></code> (since Java 1.4)</li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/break" title="Java Programming/Keywords/break"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">break</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/case" title="Java Programming/Keywords/case"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">case</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/catch" title="Java Programming/Keywords/catch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">catch</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/class" title="Java Programming/Keywords/class"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">class</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/const" title="Java Programming/Keywords/const"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">const</font></a></code> (not used)</li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/continue" title="Java Programming/Keywords/continue"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">continue</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/default" title="Java Programming/Keywords/default"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">default</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/do" title="Java Programming/Keywords/do"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">do</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/enum" title="Java Programming/Keywords/enum"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">enum</font></a></code> (since Java 5.0)</li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/extends" title="Java Programming/Keywords/extends"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">extends</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/final" title="Java Programming/Keywords/final"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">final</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/finally" title="Java Programming/Keywords/finally"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">finally</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/float" title="Java Programming/Keywords/float"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">float</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/for" title="Java Programming/Keywords/for"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">for</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/goto" title="Java Programming/Keywords/goto"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">goto</font></a></code> (not used)</li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/implements" title="Java Programming/Keywords/implements"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">implements</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/import" title="Java Programming/Keywords/import"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">import</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/instanceof" title="Java Programming/Keywords/instanceof"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">instanceof</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/interface" title="Java Programming/Keywords/interface"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">interface</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/long" title="Java Programming/Keywords/long"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">long</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/native" title="Java Programming/Keywords/native"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">native</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/new" title="Java Programming/Keywords/new"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">new</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/package" title="Java Programming/Keywords/package"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">package</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/private" title="Java Programming/Keywords/private"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">private</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/protected" title="Java Programming/Keywords/protected"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">protected</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/public" title="Java Programming/Keywords/public"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">public</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/return" title="Java Programming/Keywords/return"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">return</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/short" title="Java Programming/Keywords/short"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">short</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/static" title="Java Programming/Keywords/static"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">static</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/strictfp" title="Java Programming/Keywords/strictfp"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">strictfp</font></a></code> (since Java 1.2)</li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/super" title="Java Programming/Keywords/super"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">super</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/synchronized" title="Java Programming/Keywords/synchronized"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">synchronized</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/this" title="Java Programming/Keywords/this"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">this</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/throw" title="Java Programming/Keywords/throw"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">throw</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/throws" title="Java Programming/Keywords/throws"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">throws</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/transient" title="Java Programming/Keywords/transient"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">transient</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/try" title="Java Programming/Keywords/try"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">try</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/void" title="Java Programming/Keywords/void"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">void</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/volatile" title="Java Programming/Keywords/volatile"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">volatile</font></a></code></li> 
        <li><code><a href="/wiki/Java_Programming/Keywords/while" title="Java Programming/Keywords/while"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">while</font></a></code></li> 
       </ul> 
      </div> 
      <table cellspacing="0" cellpadding="0" style="clear: right; margin-bottom: .5em; float: right; padding: .5em 0 .8em 1.4em; background: none; width: auto;"> 
       <tbody>
        <tr> 
         <td></td> 
        </tr> 
       </tbody>
      </table> 
      <p>In addition, the identifiers <code><a href="/wiki/Java_Programming/Literals/null" class="mw-redirect" title="Java Programming/Literals/null"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">null</font></a></code>, <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/true" title="Java Programming/Literals/Boolean Literals/true"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">true</font></a></code>, and <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/false" title="Java Programming/Literals/Boolean Literals/false"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">false</font></a></code> denote literal values and may not be used to create identifiers.</p> 
      <h2><span class="mw-headline" id="abstract">abstract</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/abstract" title="Java Programming/Keywords/abstract"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">abstract</font></a></code> is a Java keyword. It can be applied to a class and methods. An <i>abstract</i> class cannot be directly instantiated. It must be placed before the variable type or the method return type. It is recommended to place it after the access modifier and after the <code><a href="/wiki/Java_Programming/Keywords/static" title="Java Programming/Keywords/static"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">static</font></a></code> keyword. A non-abstract class is a <i>concrete</i> class. An abstract class cannot be <code><a href="/wiki/Java_Programming/Keywords/final" title="Java Programming/Keywords/final"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">final</font></a></code>.</p> 
      <p>Only an abstract class can have abstract methods. An abstract method is only declared, not implemented:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><span id="code-listing-1"><b>Code listing 1: AbstractClass.java</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractClass</span> <span class="o">{</span>
<span class="lineno">2 </span>    <span class="c1">// This method does not have a body; it is abstract.</span>
<span class="lineno">3 </span>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">abstractMethod</span><span class="o">();</span>
<span class="lineno">4 </span> 
<span class="lineno">5 </span>    <span class="c1">// This method does have a body; it is implemented in the abstract class and gives a default behavior.</span>
<span class="lineno">6 </span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">concreteMethod</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">7 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Already coded."</span><span class="o">);</span>
<span class="lineno">8 </span>    <span class="o">}</span>
<span class="lineno">9 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>An abstract method cannot be <code><a href="/wiki/Java_Programming/Keywords/final" title="Java Programming/Keywords/final"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">final</font></a></code>, <code><a href="/wiki/Java_Programming/Keywords/static" title="Java Programming/Keywords/static"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">static</font></a></code> nor <code><a href="/wiki/Java_Programming/Keywords/native" title="Java Programming/Keywords/native"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">native</font></a></code>. Either you instantiate a concrete sub-class, either you instantiate the abstract class by implementing its abstract methods alongside a new statement:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 1: Abstract class use.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="n">AbstractClass</span> <span class="n">myInstance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AbstractClass</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">2 </span>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">abstractMethod</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">3 </span>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Implementation."</span><span class="o">);</span>
<span class="lineno">4 </span>    <span class="o">}</span>
<span class="lineno">5 </span><span class="o">};</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>A private method cannot be <code><a href="/wiki/Java_Programming/Keywords/abstract" title="Java Programming/Keywords/abstract"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">abstract</font></a></code>.</p> 
      <p><br></p> 
      <h2><span class="mw-headline" id="assert">assert</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/assert" title="Java Programming/Keywords/assert"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">assert</font></a></code> is a Java <a href="/wiki/Java_Programming/Keywords" title="Java Programming/Keywords">keyword</a> used to define an <a href="/w/index.php?title=Java_Programming/Statements/assert&amp;action=edit&amp;redlink=1" class="new" title="Java Programming/Statements/assert (does not exist)"><i>assert statement</i></a>. An assert statement is used to declare an expected boolean condition in a program. If the program is running with assertions enabled, then the condition is checked at runtime. If the condition is false, the Java runtime system <a href="/w/index.php?title=Java_Programming/Statements/throw&amp;action=edit&amp;redlink=1" class="new" title="Java Programming/Statements/throw (does not exist)">throws</a> an <code><a href="/wiki/Java_Programming/API/java.lang.AssertionError" title="Java Programming/API/java.lang.AssertionError">AssertionError</a></code>.</p> 
      <p>Assertions may be declared using the following syntax:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="k">assert</span> <span class="n">expression1</span> <span class="o">[:</span> <span class="n">expression2</span><span class="o">];</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><tt>expression1</tt> is a boolean that will throw the assertion if it is false. When it is thrown, the assertion error exception is created with the parameter <tt>expression2</tt> (if applicable).</p> 
      <p>An example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="k">assert</span> <span class="n">list</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">:</span> <span class="s">"list variable is null or empty"</span><span class="o">;</span>
<span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>Assertions are usually used as a debugging aid. They should not be used instead of validating arguments to public methods, or in place of a more precise runtime error exception.</p> 
      <p>Assertions are enabled with the Java <code>-ea</code> or <code>-enableassertions</code> runtime option. See your Java environment documentation for additional options for controlling assertions.</p> 
      <h2><span class="mw-headline" id="boolean">boolean</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code> is a <a href="/wiki/Java_Programming/Keywords" title="Java Programming/Keywords">keyword</a> which designates the <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code> <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">primitive type</a>. There are only two possible <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code> values: <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/true" title="Java Programming/Literals/Boolean Literals/true"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">true</font></a></code> and <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/false" title="Java Programming/Literals/Boolean Literals/false"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">false</font></a></code>. The default value for <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code> fields is <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/false" title="Java Programming/Literals/Boolean Literals/false"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">false</font></a></code>.</p> 
      <p>The following is a declaration of a <code><a href="/wiki/Java_Programming/Keywords/private" title="Java Programming/Keywords/private"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">private</font></a></code> <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code> field named <code>initialized</code>, and its use in a method named <code>synchronizeConnection</code>.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-1"><b>Code section 1: Connection synchronization.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="hll"><span class="kd">private</span> <span class="kt">boolean</span> <span class="n">initialized</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="lineno">2 </span>
<span class="lineno">3 </span><span class="kd">public</span> <span class="kt">void</span> <span class="nf">synchronizeConnection</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">4 </span><span class="hll">   <span class="k">if</span> <span class="o">(!</span><span class="n">initialized</span><span class="o">)</span> <span class="o">{</span>
</span><span class="lineno">5 </span>      <span class="n">connection</span> <span class="o">=</span> <span class="n">connect</span><span class="o">();</span>
<span class="lineno">6 </span><span class="hll">      <span class="n">initialized</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class="lineno">7 </span>   <span class="o">}</span>
<span class="lineno">8 </span><span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The previous code only creates a connection once (at the first method call). Note that there is no automatic conversion between integer types (such as <code><a href="/wiki/Java_Programming/Keywords/int" title="Java Programming/Keywords/int"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">int</font></a></code>) to <code><a href="/wiki/Java_Programming/Keywords/boolean" title="Java Programming/Keywords/boolean"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">boolean</font></a></code> as is possible in some languages like <a href="/wiki/C_Programming" title="C Programming">C</a>. Instead, one must use an equivalent expression such as <code>(i&nbsp;!= 0)</code> which evaluates to <code><a href="/wiki/Java_Programming/Literals/Boolean_Literals/true" title="Java Programming/Literals/Boolean Literals/true"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">true</font></a></code> if <code>i</code> is not zero.</p> 
      <h2><span class="mw-headline" id="break">break</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/break" title="Java Programming/Keywords/break"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">break</font></a></code> is a Java keyword.</p> 
      <p>Jumps (breaks) out from a loop. Also used at <code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code> statement.</p> 
      <p>For example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxLoopIter</span><span class="o">;</span> <span class="n">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Iter="</span> <span class="o">+</span><span class="n">i</span><span class="o">);</span>
   <span class="k">if</span> <span class="o">(</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">5</span> <span class="o">)</span> <span class="o">{</span>
      <span class="k">break</span><span class="o">;</span>  <span class="c1">// -- 5 iteration is enough --</span>
   <span class="o">}</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> See also:</p> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch">Java Programming/Keywords/switch</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="byte">byte</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code> is a <a href="/wiki/Java_Programming/Keywords" title="Java Programming/Keywords">keyword</a> which designates the 8 bit signed integer <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">primitive type</a>.</p> 
      <p>The <code>java.lang.Byte</code> class is the nominal wrapper class when you need to store a <code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code> value but an object reference is required.</p> 
      <p>Syntax:</p> 
      <pre>
<code><a href="/wiki/Java_Programming/Keywords/byte" title="Java Programming/Keywords/byte"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">byte</font></a></code> &lt;variable-name&gt; = &lt;integer-value&gt;;
</pre> 
      <p>For example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kt">byte</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">65</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>or</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kt">byte</span> <span class="n">b</span> <span class="o">=</span> <span class="sc">'A'</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The number 65 is the code for 'A' in <a href="https://en.wikipedia.org/wiki/ASCII" class="extiw" title="w:ASCII">ASCII</a>.</p> 
      <p>See also:</p> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">Java Programming/Primitive Types</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="case">case</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/case" title="Java Programming/Keywords/case"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">case</font></a></code> is a Java keyword.</p> 
      <p>This is part of the <code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code> statement, to find if the value passed to the switch statement matches a value followed by case.</p> 
      <p>For example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
<span class="k">switch</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
<span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The number is 1."</span><span class="o">);</span>
   <span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The number is 2."</span><span class="o">);</span>
   <span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The number is 3."</span><span class="o">);</span> <span class="c1">// this line will print</span>
   <span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The number is 4."</span><span class="o">);</span>
   <span class="k">break</span><span class="o">;</span>
<span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The number is 5."</span><span class="o">);</span>
   <span class="k">break</span><span class="o">;</span>
<span class="k">default</span><span class="o">:</span>
  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The number is not 1, 2, 3, 4, or 5."</span><span class="o">);</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="catch">catch</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/catch" title="Java Programming/Keywords/catch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">catch</font></a></code> is a keyword.</p> 
      <p>It's part of a <code><a href="/wiki/Java_Programming/Keywords/try" title="Java Programming/Keywords/try"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">try</font></a></code> block. If an exception is thrown inside a try block, the exception will be compared to any of the catch part of the block. If the exception match with one of the exception in the catch part, the exception will be handled there.</p> 
      <p>For example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="k">try</span> <span class="o">{</span>
   <span class="c1">//...</span>
     <span class="k">throw</span> <span class="k">new</span> <span class="n">MyException_1</span><span class="o">();</span>
   <span class="c1">//...</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span> <span class="n">MyException_1</span> <span class="n">e</span> <span class="o">)</span> <span class="o">{</span>
   <span class="c1">// --- Handle the Exception_1 here --</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span> <span class="n">MyException_2</span> <span class="n">e</span> <span class="o">)</span> <span class="o">{</span>
   <span class="c1">// --- Handle the Exception_2 here --</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> See also:</p> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Keywords/try" title="Java Programming/Keywords/try">Java Programming/Keywords/try</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="char">char</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code> is a keyword. It defines a character <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">primitive type</a>. <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code> can be created from character literals and numeric representation. Character literals consist of a single quote character (<code>'</code>) (ASCII 39, hex 0x27), a single character, and a close quote (<code>'</code>), such as <code>'w'</code>. Instead of a character, you can also use <a href="/wiki/Java_Programming/Syntax/Unicode_Escape_Sequences" class="mw-redirect" title="Java Programming/Syntax/Unicode Escape Sequences">unicode escape sequences</a>, but there must be exactly one.</p> 
      <p>Syntax:</p> 
      <table style="margin: auto;"> 
       <tbody>
        <tr> 
         <td>char <i><b>variable name<sub>1</sub></b></i> = '<i><b>character<sub>1</sub></b></i>';</td> 
        </tr> 
       </tbody>
      </table> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 1: Three examples.</b> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="kt">char</span> <span class="n">oneChar1</span> <span class="o">=</span> <span class="sc">'A'</span><span class="o">;</span>
<span class="lineno">2 </span><span class="kt">char</span> <span class="n">oneChar2</span> <span class="o">=</span> <span class="mi">65</span><span class="o">;</span>
<span class="lineno">3 </span><span class="kt">char</span> <span class="n">oneChar3</span> <span class="o">=</span> <span class="sc">'\u0041'</span><span class="o">;</span>
<span class="lineno">4 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">oneChar1</span><span class="o">);</span>
<span class="lineno">5 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">oneChar2</span><span class="o">);</span>
<span class="lineno">6 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">oneChar3</span><span class="o">);</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
             <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Output for Code section 1</b> <pre style="background-color:#000; color:#fff;">
A
A
A
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>65 is the numeric representation of character 'A' , or its <a href="https://en.wikipedia.org/wiki/ASCII" class="extiw" title="w:ASCII">ASCII</a> code.</p> 
      <p>The nominal wrapper class is the <code>java.lang.Character</code> class when you need to store a <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code> value but an object reference is required.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><b>Code section 2: <code><a href="/wiki/Java_Programming/Keywords/char" title="Java Programming/Keywords/char"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">char</font></a></code> wrapping.</b> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kt">char</span> <span class="n">aCharPrimitiveType</span> <span class="o">=</span> <span class="sc">'A'</span><span class="o">;</span>
<span class="lineno">2 </span><span class="n">Character</span> <span class="n">aCharacterObject</span> <span class="o">=</span> <span class="n">aCharPrimitiveType</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>See also:</p> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">Java Programming/Primitive Types</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="class">class</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/class" title="Java Programming/Keywords/class"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">class</font></a></code> is a Java keyword which begins the declaration and definition of a <a href="/wiki/Java_Programming/Classes_and_Objects" title="Java Programming/Classes and Objects">class</a>.</p> 
      <p>The general syntax of a class declaration, using <a href="/wiki/Programming_Languages/Syntax_Specification" title="Programming Languages/Syntax Specification">Extended Backus-Naur Form</a>, is</p> 
      <pre>
class-declaration ::= [<i><a href="/wiki/Java_Programming/Access_Modifiers" class="mw-redirect" title="Java Programming/Access Modifiers">access-modifiers</a></i>] <code><a href="/wiki/Java_Programming/Keywords/class" title="Java Programming/Keywords/class"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">class</font></a></code> <code><a href="/w/index.php?title=Java_Programming/Keywords/identifier&amp;action=edit&amp;redlink=1" class="new" title="Java Programming/Keywords/identifier (does not exist)"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">identifier</font></a></code>
                      [<i>extends-clause</i>] [<i>implements-clause</i>] 
                      <i>class-body</i>

extends-clause ::= <code><a href="/wiki/Java_Programming/Keywords/extends" title="Java Programming/Keywords/extends"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">extends</font></a></code> <i>class-name</i>
implements-clause ::= <code><a href="/wiki/Java_Programming/Keywords/implements" title="Java Programming/Keywords/implements"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">implements</font></a></code> <i>interface-names</i> 
interface-names ::= <i>interface-name</i> [<code>,</code> <i>interface-names</i>]
class-body ::= <b><code>{</code></b> [<i>member-declarations</i>] <b><code>}</code></b>
member-declarations = <i>member-declaration</i> [<i>member-declarations</i>]
member-declaration = <i>field-declaration</i> 
                     | <i>initializer</i> 
                     | <i>constructor</i> 
                     | <i>method-declaration</i>
                     | <i>class-declaration</i>
</pre> 
      <p>The <code><a href="/wiki/Java_Programming/Keywords/extends" title="Java Programming/Keywords/extends"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">extends</font></a></code> word is optional. If omitted, the class extends the <code><a href="/wiki/Java_Programming/API/java.lang.Object" title="Java Programming/API/java.lang.Object">Object</a></code> class, as all Java classes inherit from it.</p> 
      <p>See also:</p> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Keywords/new" title="Java Programming/Keywords/new">Java Programming/Keywords/new</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="const">const</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/const" title="Java Programming/Keywords/const"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">const</font></a></code> is a <b>reserved keyword</b>, presently not being used.</p> 
      <p>In other programming languages, such as C, const is often used to declare a constant. However, in Java, <code><a href="/wiki/Java_Programming/Keywords/final" title="Java Programming/Keywords/final"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">final</font></a></code> is used instead.</p> 
      <h2><span class="mw-headline" id="continue">continue</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/continue" title="Java Programming/Keywords/continue"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">continue</font></a></code> is a Java keyword. It skips the remainder of the loop and continues with the next iteration.</p> 
      <p>For example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kt">int</span> <span class="n">maxLoopIter</span> <span class="o">=</span> <span class="mi">7</span><span class="o">;</span>

<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxLoopIter</span><span class="o">;</span> <span class="n">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
   <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">5</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">continue</span><span class="o">;</span>  <span class="c1">// -- 5 iteration is skipped --</span>
   <span class="o">}</span>
   <span class="n">System</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Iteration = "</span> <span class="o">+</span> <span class="n">i</span><span class="o">);</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> results in</p> 
      <pre>
0
1
2
3
4
6
7
</pre> 
      <h2><span class="mw-headline" id="See_also_2">See also</span></h2> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">Java Programming/Statements</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="default">default</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/default" title="Java Programming/Keywords/default"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">default</font></a></code> is a Java keyword.</p> 
      <p>This is an optional part of the <code><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">switch</font></a></code> statement, which only executes if none of the above cases are matched.</p> 
      <p>See also:</p> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Keywords/switch" title="Java Programming/Keywords/switch">Java Programming/Keywords/switch</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="do">do</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/do" title="Java Programming/Keywords/do"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">do</font></a></code> is a Java keyword.</p> 
      <p>It starts a do-while looping block. The do-while loop is functionally similar to the while loop, except the condition is evaluated <i>after</i> the statements execute</p> 
      <p>Syntax:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="k">do</span> <span class="o">{</span>
    <span class="c1">//statements;</span>
<span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">condition</span><span class="o">);</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>For example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="k">do</span> <span class="o">{</span>
    <span class="n">i</span><span class="o">++;</span>
<span class="o">}</span> <span class="k">while</span> <span class="o">(</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">maxLoopIter</span> <span class="o">);</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>See also:</p> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">Java Programming/Statements</a></li> 
       <li><a href="/wiki/Java_Programming/Keywords/for" title="Java Programming/Keywords/for">Java Programming/Keywords/for</a></li> 
       <li><a href="/wiki/Java_Programming/Keywords/while" title="Java Programming/Keywords/while">Java Programming/Keywords/while</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="double">double</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code> is a <a href="/wiki/Java_Programming/Keywords" title="Java Programming/Keywords">keyword</a> which designates the 64 bit float <a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">primitive type</a>.</p> 
      <p>The <code>java.lang.Double</code> class is the nominal wrapper class when you need to store a <code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code> value but an object reference is required.</p> 
      <p>Syntax:</p> 
      <pre>
<code><a href="/wiki/Java_Programming/Keywords/double" title="Java Programming/Keywords/double"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">double</font></a></code> &lt;variable-name&gt; = &lt;float-value&gt;;
</pre> 
      <p>For example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">65.55</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> See also:</p> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Primitive_Types" title="Java Programming/Primitive Types">Java Programming/Primitive Types</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="else">else</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> is a Java keyword. It is an optional part of a branching statement. It starts the 'false' statement block.</p> 
      <p>The general syntax of a <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code>, using <a href="/wiki/Programming_Languages/Syntax_Specification" title="Programming Languages/Syntax Specification">Extended Backus-Naur Form</a>, is</p> 
      <pre>
branching-statement ::= <code><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">if</font></a></code> <i>condition-clause</i> 
                                    <i>single-statement</i> | <i>block-statement</i>
                       [ <code><a href="/wiki/Java_Programming/Keywords/else" title="Java Programming/Keywords/else"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">else</font></a></code> 
                                    <i>single-statement</i> | <i>block-statement</i> ]
 
condition-clause    ::= <b><code>(</code></b> Boolean Expression <b><code>)</code></b>
single-statement    ::= <a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">Statement</a>
block-statement     ::= <b><code>{</code></b> <a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">Statement</a> [ <a href="/wiki/Java_Programming/Statements" title="Java Programming/Statements">Statement</a> ] <b><code>}</code></b>
</pre> 
      <p>For example:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="k">if</span> <span class="o">(</span> <span class="n">expression</span> <span class="o">)</span> <span class="o">{</span>
   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"'True' statement block"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"'False' statement block"</span><span class="o">);</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> See also:</p> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Keywords/if" title="Java Programming/Keywords/if">Java Programming/Keywords/if</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="enum">enum</span></h2> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="cm">/** Grades of courses */</span>
  <span class="kd">enum</span> <span class="n">Grade</span> <span class="o">{</span> <span class="n">A</span><span class="o">,</span> <span class="n">B</span><span class="o">,</span> <span class="n">C</span><span class="o">,</span> <span class="n">D</span><span class="o">,</span> <span class="n">F</span> <span class="o">};</span>
  <span class="c1">// ...</span>
  <span class="kd">private</span> <span class="n">Grade</span> <span class="n">gradeA</span> <span class="o">=</span> <span class="n">Grade</span><span class="o">.</span><span class="na">A</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> This enumeration constant then can be passed in to methods:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="n">student</span><span class="o">.</span><span class="na">assignGrade</span><span class="o">(</span><span class="n">gradeA</span><span class="o">);</span>
  <span class="cm">/**</span>
<span class="cm">   * Assigns the grade for this course to the student</span>
<span class="cm">   * @param GRADE  Grade to be assigned</span>
<span class="cm">   */</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">assignGrade</span><span class="o">(</span><span class="kd">final</span> <span class="n">Grade</span> <span class="n">GRADE</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">grade</span> <span class="o">=</span> <span class="n">GRADE</span><span class="o">;</span>
  <span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> An enumeration may also have parameters:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kd">public</span> <span class="kd">enum</span> <span class="n">DayOfWeek</span> <span class="o">{</span>
  <span class="cm">/** Enumeration constants */</span>
  <span class="n">MONDAY</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="n">TUESDAY</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="n">WEDNESDAY</span><span class="o">(</span><span class="mi">3</span><span class="o">),</span> <span class="n">THURSDAY</span><span class="o">(</span><span class="mi">4</span><span class="o">),</span> <span class="n">FRIDAY</span><span class="o">(</span><span class="mi">5</span><span class="o">),</span> <span class="n">SATURDAY</span><span class="o">(</span><span class="mi">6</span><span class="o">),</span> <span class="n">SUNDAY</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

  <span class="cm">/** Code for the days of the week */</span>
  <span class="kd">private</span> <span class="kt">byte</span> <span class="n">dayCode</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

  <span class="cm">/**</span>
<span class="cm">   * Private constructor</span>
<span class="cm">   * @param VALUE  Value that stands for a day of the week.</span>
<span class="cm">   */</span>
  <span class="kd">private</span> <span class="nf">DayOfWeek</span><span class="o">(</span><span class="kd">final</span> <span class="kt">byte</span> <span class="n">VALUE</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">dayCode</span> <span class="o">=</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">VALUE</span><span class="o">%</span><span class="mi">7</span><span class="o">);</span>
  <span class="o">}</span>
 
  <span class="cm">/**</span>
<span class="cm">   * Gets the day code</span>
<span class="cm">   * @return  The day code</span>
<span class="cm">   */</span>
  <span class="kd">public</span> <span class="kt">byte</span> <span class="nf">getDayCode</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">dayCode</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> It is also possible to let an enumeration implement interfaces other than <code lang="Java" xml:lang="Java">java.lang.Comparable</code> and <code>java.io.Serializable</code>, which are already implicitly implemented by each enumeration:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kd">public</span> <span class="kd">enum</span> <span class="n">DayOfWeek</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
  <span class="n">MONDAY</span><span class="o">,</span> <span class="n">TUESDAY</span><span class="o">,</span> <span class="n">WEDNESDAY</span><span class="o">,</span> <span class="n">THURSDAY</span><span class="o">,</span> <span class="n">FRIDAY</span><span class="o">,</span> <span class="n">SATURDAY</span><span class="o">,</span> <span class="n">SUNDAY</span><span class="o">;</span>
 
  <span class="cm">/**</span>
<span class="cm">   * Run method prints all elements</span>
<span class="cm">   */</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"name() = "</span> <span class="o">+</span> <span class="n">name</span><span class="o">()</span> <span class="o">+</span>
      <span class="s">", toString() = \""</span> <span class="o">+</span> <span class="n">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\""</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="extends">extends</span></h2> 
      <p><code><a href="/wiki/Java_Programming/Keywords/extends" title="Java Programming/Keywords/extends"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">extends</font></a></code> is a Java keyword.</p> 
      <p>Used in <code><a href="/wiki/Java_Programming/Keywords/class" title="Java Programming/Keywords/class"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">class</font></a></code> and <code><a href="/wiki/Java_Programming/Keywords/interface" title="Java Programming/Keywords/interface"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">interface</font></a></code> definition to declare the class or interface that is to be extended.</p> 
      <p>Syntax:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="kd">extends</span> <span class="n">SuperClass</span> 
<span class="o">{</span>
  <span class="c1">//...</span>
<span class="o">}</span>
 
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyInterface</span> <span class="kd">extends</span> <span class="n">SuperInterface</span>
<span class="o">{</span>
  <span class="c1">//...</span>
<span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> In Java 1.5 and later, the "extends" keyword is also used to specify an upper bound on a type parameter in Generics.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Computer code" src="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/32px-Gnome-settings-accessibility-keyboard.svg.png" title="Computer code" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/48px-Gnome-settings-accessibility-keyboard.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/7/78/Gnome-settings-accessibility-keyboard.svg/64px-Gnome-settings-accessibility-keyboard.svg.png 2x" data-file-width="60" data-file-height="60"></td> 
         <td style="background-color:#ffeee0; border-left: 4px solid orange; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="kd">class</span> <span class="nc">Foo</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="o">{</span> <span class="cm">/*...*/</span> <span class="o">}</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p><br> See also:</p> 
      <ul> 
       <li><a href="/wiki/Java_Programming/Creating_Objects" class="mw-redirect" title="Java Programming/Creating Objects">Java Programming/Creating Objects</a></li> 
       <li><a href="/wiki/Java_Programming/Keywords/class" title="Java Programming/Keywords/class">Java Programming/Keywords/class</a></li> 
      </ul> 
      <h2><span class="mw-headline" id="final">final</span></h2> 
      <p><code>final</code> is a keyword. Beware! It has distinct meanings depending whether it is used for a class, a method, or for a variable. It must be placed before the variable type or the method return type. It is recommended to place it after the access modifier and after the <code><a href="/wiki/Java_Programming/Keywords/static" title="Java Programming/Keywords/static"><font style="color:DodgerBlue4; text-decoration: none; font-weight: bold;">static</font></a></code> keyword.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-1"><b>Code section 1: Keyword order.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">long</span> <span class="n">serialVersionUID</span> <span class="o">=</span> <span class="o">-</span><span class="mi">5437975414336623381L</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <h2><span class="mw-headline" id="For_a_variable">For a variable</span></h2> 
      <p>The <code>final</code> keyword only allows a single assignment for the variable. That is to say, once the variable has been assigned, its value is in read-only. If the variable is a primitive type, its value will no longer change. If it is an object, only its reference will no longer change. Keep in mind that its value can still be changed.</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td><a href="/wiki/File:Nuvola_apps_important.svg" class="image" title="Warning"><img alt="Warning" src="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/32px-Nuvola_apps_important.svg.png" width="32" height="27" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/48px-Nuvola_apps_important.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/f/f7/Nuvola_apps_important.svg/64px-Nuvola_apps_important.svg.png 2x" data-file-width="600" data-file-height="500"></a></td> 
         <td style="background-color:#fff0f0; border-left: 4px solid red; padding-left: 6px;"><span style="color: red;"><b>Code section 2: Forbidden double assignment.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">final</span> <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="lineno">2 </span><span class="hll"><span class="n">a</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <table style="width: 100%;"> 
       <tbody>
        <tr> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-2"><b>Code section 3: Only modify the value of the object.</b></span> 
              <div class="mw-highlight mw-content-ltr" dir="ltr"> 
               <pre>
<span class="lineno">1 </span><span class="kd">final</span> <span class="n">ArrayList</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">();</span>
<span class="lineno">2 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
<span class="lineno">3 </span><span class="hll"><span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"One item"</span><span class="o">);</span>
</span><span class="lineno">4 </span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</pre>
              </div> </td> 
            </tr> 
           </tbody>
          </table> </td> 
         <td valign="top"> 
          <table style="padding:2px; margin:2px; width:100%;"> 
           <tbody>
            <tr valign="top"> 
             <td style="width:32px;"><img alt="Standard input or output" src="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/32px-Nuvola_apps_display.png" title="Standard input or output" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/48px-Nuvola_apps_display.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/9/9a/Nuvola_apps_display.png/64px-Nuvola_apps_display.png 2x" data-file-width="128" data-file-height="128"></td> 
             <td style="background-color:#f0f0ff; border-left: 4px solid blue; padding-left: 6px; font-family: Monaco, Consolas, 'Courier New', Courier; font-size:1.0em; line-height:1.5 !important;"><b>Console for Code section 3</b> <pre style="background-color:#000; color:#fff;">
0
1
</pre></td> 
            </tr> 
           </tbody>
          </table> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>A final variable is often used for universal constants, such as <a href="https://en.wikipedia.org/wiki/pi" class="extiw" title="w:pi">pi</a>:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"><img alt="Example" src="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/32px-Nuvola_apps_edu_miscellaneous.svg.png" title="Example" width="32" height="32" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/48px-Nuvola_apps_edu_miscellaneous.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/6/6a/Nuvola_apps_edu_miscellaneous.svg/64px-Nuvola_apps_edu_miscellaneous.svg.png 2x" data-file-width="128" data-file-height="128"></td> 
         <td style="background-color:#f0fff0; border-left: 4px solid green; padding-left: 6px;"><span id="code-section-4"><b>Code section 4: Pi constant.</b></span> 
          <div class="mw-highlight mw-content-ltr" dir="ltr"> 
           <pre>
<span class="lineno">1 </span><span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="n">PI</span> <span class="o">=</span> <span class="mf">3.1415926</span><span class="o">;</span>
</pre>
          </div> </td> 
        </tr> 
       </tbody>
      </table> 
      <p>The <code>final</code> keyword can also be used for method parameters:</p> 
      <table style="padding:2px; margin:2px;"> 
       <tbody>
        <tr valign="top"> 
         <td style="width:32px;"></td>
        </tr>
       </tbody>
      </table>
     </div>
    </div>
   </div>
  </div>
 </body>
</html>