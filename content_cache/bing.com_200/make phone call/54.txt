<!doctype html>
<html>
 <head> 
  <title>HOWTO: Native iPhone/iPad apps in JavaScript</title> 
  <link rel="alternate" type="application/rss+xml" title="RSS" href="http://matt.might.net/articles/feed.rss"> 
  <link rel="stylesheet" href="../../css/raised-paper-2.css"> 
  <meta name="viewport" content="width=480, initial-scale=1"> 
  <link rel="stylesheet" media="screen and (max-device-width: 480px)" href="../../css/raised-paper-2-handheld.css"> 
  <script type="text/javascript" src="../../matt.might.js"></script> 
  <script type="text/javascript">
  var ArticleVersion = 2 ;
 </script> 
  <script>
 <!--
  include("article-style.js");
 //-->
 </script> 
  <script type="text/javascript" src="../manifest.js"></script> 
  <script type="text/javascript" src="../index-manifest.js"></script> 
  <script type="text/javascript">
 <!--
//  var Key = "[an error occurred while processing the directive]";
 var Pathname = location.pathname ;
 var PathParts = Pathname.split(/\//) ;
 var Key = PathParts[PathParts.length-1] ;
 if (Key == "")
  Key = PathParts[PathParts.length-2] ;
 //-->
 </script> 
 </head> 
 <body> 
  <div id="body"> 
   <div id="abstract-container" class="module"> 
    <div id="abstract-content" class="fat-content"> 
     <h1>HOWTO: Create native-looking iPhone/iPad applications from HTML, CSS and JavaScript </h1> 
     <div>
       [
      <a href="../">article index</a>] [
      <script>
       var emailMatt = '<a href="mai'+'lto:matt-blog'+'@'+'migh'+'t.net">email me</a>'
document.write(emailMatt);
 //-->
</script>] [
      <a href="http://twitter.com/mattmight">@mattmight</a>] [
      <a href="http://gplus.to/mattmight">+mattmight</a>] [
      <a href="../feed.rss">rss</a>] 
     </div> 
     <p> Though it's not widely known, you can write native-feeling iOS apps for the iPhone and iPad in JavaScript (+ HTML and CSS). </p> 
     <p>In this article, I'll explain how to: </p>
     <ul> 
      <li>strip away the browser chrome (the url bar and button bar);</li> 
      <li>prevent viewport scrolling and scaling;</li> 
      <li>respond to multi-touch and gesture events;</li> 
      <li>use webkit CSS to get the iPhone OS look and feel;</li> 
      <li>cache the app so it runs without internet access;</li> 
      <li>get a custom icon on the home screen; and</li> 
      <li>have a splash screen load at the start.</li> 
     </ul> If you want to put it in the app store, you can even package your web app as a "native" Objective-C app. (Although, why you'd want to subject yourself to the app store approval process when you don't have to is beyond me.) 
     <p></p> 
     <p> I've put this HOWTO together, because--even on Apple's site--there's not one centralized page that tells you how to do all this. I've included templates, examples and a stubbed-out XCode project.</p> 
     <p> If you want to go deeper than what's in this post, I recommend the book <a href="http://www.amazon.com/gp/product/0596805780?ie=UTF8&amp;tag=ucmbread-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596805780">Building iPhone Apps with HTML, CSS, and JavaScript</a><img src="http://www.assoc-amazon.com/e/ir?t=ucmbread-20&amp;l=as2&amp;o=1&amp;a=0596805780" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;">. </p> 
     <p> My motivation for finally building an iPhone app was frustration with a paper-based medical logging system. My wife and I have to keep a medical log of just about <a href="http://overcomingmovementdisorder.blogspot.com/">everything my son does</a>: seizure types/lengths, caloric intake/composition, hydration, medication doses, sleep, urine chemistry, blood pressure, heart rate, weight, activities and bowel movements. Naturally, we're always trying to remember where we last had the log book. An iPhone/iPad app seemed like the perfect solution for medical logging, so I took the plunge. </p> 
     <p> <b>Update</b>: I built a second iOS app out of JavaScript, also for my son: it's a <a href="http://matt.might.net/articles/ios-multitouch-robot-control/">multitouch remote control for a robot</a>: use the rotate gesture to rotate the robot; use the swipe to move it forward and back; tilt to take a picture with its camera. </p> 
     <p> Read on for the details, tips and tricks I've learned. </p> 
    </div> 
    <!-- /#content --> 
   </div> 
   <!-- /#content-container --> 
   <div class="module fat-container"> 
    <div class="fat-content"> 
     <center> 
      <script type="text/javascript"><!--
google_ad_client = "pub-4400645483943138";
/* Header ad unit */
google_ad_slot = "8276008011";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script> 
      <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
     </center> 
    </div> 
   </div> 
   <div id="content-container" class="module"> 
    <div id="article-content"> 
     <script>
Might.enableSyntaxHighlighting("Xml") ;
</script> 
     <h2>More resources</h2> 
     <p> On top of the information below, I can recommend a few other resources: </p> 
     <ul> 
      <li> <a href="http://www.amazon.com/gp/product/0596805780?ie=UTF8&amp;tag=ucmbread-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596805780">Building iPhone Apps with HTML, CSS, and JavaScript</a><img src="http://www.assoc-amazon.com/e/ir?t=ucmbread-20&amp;l=as2&amp;o=1&amp;a=0596805780" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;"> is the only book I found that covered everything. I highly recommend it if you're planning on doing serious app development in JavaScript. </li> 
      <li> If you'd like to get into native app development, take a step back and learn Objective-C first. The best Objective-C book I've found is <a href="http://www.amazon.com/gp/product/0596804792?ie=UTF8&amp;tag=ucmbread-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596804792">Cocoa and Objective-C: Up and Running</a><img src="http://www.assoc-amazon.com/e/ir?t=ucmbread-20&amp;l=as2&amp;o=1&amp;a=0596804792" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;">. </li> 
      <li> My post on <a href="http://matt.might.net/articles/ios-multitouch-robot-control/">multitouch robot control with iOS</a>. It's another great example of what you can do with just JavaScript. </li> 
      <!--  
  <li>
  My <a href="../learning-javascript-in-small-bites/">learning JavaScript in small bites</a> series.
  </li>
  --> 
     </ul> 
     <h2>Making it full-screen</h2> 
     <p> Normally, if you press "+" in mobile Safari and then "Add to Home Screen," the icon it creates acts like a bookmark into Safari. When the browser opens up, you've got the URL bar at the top and the button bar at the bottom. If you're trying to deploy a real app, this just wastes screen real estate and detracts from its professional feel. </p> 
     <p> To get rid of the URL and button bars, just add a meta tag: </p> 
     <pre class="brush: html; gutter: false">
&lt;meta name="apple-mobile-web-app-capable"
      content="yes" /&gt;
</pre> 
     <p> This is what my log app looks like when launched from the home screen: </p> 
     <div class="graphic"> 
      <img src="./iphone-app.jpg"> 
     </div> 
     <h2>Changing the phone status bar</h2> 
     <p> You can also change how the phone's status bar is displayed with a meta tag. You can make it white, black or translucent: </p> 
     <pre class="brush: html; gutter: false">
&lt;meta name="apple-mobile-web-app-status-bar-style"
      content="default" /&gt;
</pre> 
     <p> The values for content are <code>default</code>, <code>black</code> and <code>black-translucent</code>. </p> 
     <h2>Preventing scaling</h2> 
     <p> If you pinch on a web app, it still responds like it's in a browser and zooms in. This can be a giveaway that the app isn't native. If you want to prevent scaling, use the viewport meta tag: </p> 
     <pre class="brush: html; gutter: false">
&lt;meta name="viewport"
    content="user-scalable=no, width=device-width" /&gt;
</pre> 
     <p> You'll almost certainly want to set the viewport width to the device width as well, so that the app shows up at its natural resolution. </p> 
     <h2>Preventing elastic scrolling</h2> 
     <p> If you a flick a web app past the bottom or top of the page, the page itself gets elastically tugged away from the URL bar or the button bar (or the bottom/top of the screen if it's in full-screen mode). </p> 
     <p> This behavior is another giveaway that your app isn't native, and it's rarely the behavior you want in a native app. </p> 
     <p> To stop this behavior, capture <code>touchmove</code> events on the document in JavaScript and cancel them. You can do this by adding a handler to the <code>body</code> tag, and invoking the <code>preventDefault</code> method on the event object: </p> 
     <pre class="brush: html; gutter: false">
&lt;script&gt;
 function BlockMove(event) {
  // Tell Safari not to move the window.
  event.preventDefault() ;
 }
&lt;/script&gt;

&lt;body ontouchmove="BlockMove(event);" &gt;
  ...
&lt;/body&gt;
</pre> 
     <h2>Creating a home screen icon</h2> 
     <p> To add a home screen icon, create a 114x114 .png file, and then link to it in the header: </p> 
     <pre class="brush: html; gutter: false">
&lt;link rel="apple-touch-icon"
      href="./apple-touch-icon.png" /&gt;
</pre> 
     <p> The iPhone automatically applies the glossy finish. </p> 
     <p> On older iPhones, which used 56x56 icons, and the iPad, which uses 72x72 icons, the graphic automatically scales down. </p> 
     <div class="graphic"> 
      <img src="./iphone-icon.jpg"> 
     </div> 
     <p> If you don't want the glossy finish applied automatically, use <code>apple-touch-icon-precomposed</code> instead of <code>apple-touch-icon</code>. </p> 
     <h2>Creating a splash screen</h2> 
     <p> To add a splash screen during loading, create a 320x460 .png file, and then link to it in the header: </p> 
     <pre class="brush: html; gutter: false">
&lt;link rel="apple-touch-startup-image"
      href="./startup.png" /&gt;
</pre> 
     <p> The file must be exactly 320x460, or else the iPhone ignores it. (The iPad requires 1004x768.) </p> 
     <div class="graphic"> 
      <img src="./iphone-startup.jpg"> 
     </div> 
     <h2>Caching application files</h2> 
     <p> If you want to be able to use your application without internet, or you want to improve its load time, create a cache manifest file, and link to it from the main file for the web app: </p> 
     <pre class="brush: html; gutter: false">
&lt;html manifest="cache.manifest"&gt;
</pre> 
     <p> Make sure your web server serves up .manifest files with the MIME type <code>text/cache-manifest</code>, or else this won't work. If you're using apache, put the following in your <code>.htaccess</code> file: </p> 
     <pre>
 AddType text/cache-manifest .manifest
</pre> 
     <p> And then check using <code>wget -S</code> that the content type in the response headers is correct. </p> 
     <p> Inside the <code>cache.manifest</code> file, list which files should be cached and which should be retrieved from the network: </p> 
     <pre>
CACHE MANIFEST
local1.file
local2.file

NETWORK:
network1.php
network2.cgi
</pre> 
     <p> If you find your app suddenly stopped working when you started using a cache manifest, make sure every URL you use is in the right section. </p> 
     <p> When a cache manifest is in use, the app launches with the last version of the files. </p> 
     <p> It pulls a new version of the manifest in the background if network connectivity is available, and on the next launch you'll see the new version if the manifest has changed. You'll want to include a serial number in a comment in the cache manifest, so that you can up it every time you release a new version; for example, here's my logging application's manifest: </p> 
     <pre>
CACHE MANIFEST

# Bump this with each release:
# Serial number 7

apple-touch-icon.png
jquery.js
scroll-bg.jpg
startup.png
medical-log.css
medical-log.js
cached.html

NETWORK:
show-log.php
insert-into-log.php
delete-log-entry.php
update-log-entry.php
</pre> 
     <p> I recommend renaming the manifest file so that it 404s during iterative development. </p> 
     <h2>Detecting touch and gesture events</h2> 
     <p> You can capture multi-touch and gesture events in JavaScript. And, there's a good reason to do this too: if you listen for traditional events like clicks, you'll get a one second delay while the iPhone highlights the element that was "clicked." If you're trying to mimic a real app, this behavior starts to feel tedious and slow. By capturing touch events directly, you can respond instantly to user input. </p> 
     <p></p> There are two ways to track touch events. When you capture raw touch events, you're tracking individual fingers. When you capture gesture events, you're capturing 
     <em>interpretations</em> of finger movement, like scaling and rotating. 
     <p></p> 
     <p> The touch handlers you can attach to are: </p> 
     <ul> 
      <li><code>ontouchstart</code> - a finger goes down.</li> 
      <li><code>ontouchmove</code> - a finger moves.</li> 
      <li><code>ontouchend</code> - a finger goes up.</li> 
     </ul> 
     <p> The gesture handlers you can attach to are: </p> 
     <ul> 
      <li><code>ongesturestart</code> - a scale or a rotation starts.</li> 
      <li><code>ongesturechange</code> - a scale or a rotation.</li> 
      <li><code>ongestureend</code> - a scale or a rotation ends.</li> 
     </ul> 
     <p> If you just want to use touching in place of clicking, then the <code>target</code> field of the event object contains the element that was touched. </p> 
     <p> I created an <a href="./graph.html">example app that uses gestures to scale a graph</a>. </p> 
     <p> There's also a <a href="http://www.sitepen.com/blog/2008/07/10/touching-and-gesturing-on-the-iphone/">great write-up</a> of touch and gesture events in JavaScript, if you want to provide deeper multi-touch support. </p> 
     <p> For more code and a second JavaScript app that uses gestures heavily, see my second iPhone app post: <a href="../ios-multitouch-robot-control/">a multitouch remote control for a robot</a>. </p> 
     <h2>Detecting rotation events</h2> 
     <p> If you want to take an action when the phone is rotated, listen for <code>onorientationchange</code> events on the <code>body</code> tag. The current orientation is in <code>window.orientation</code>, and it is encoded as the angle (in degrees) that the iPhone is rotated--0, -90 or 90--away from vertically upright. </p> 
     <h2>Mimicking iPhone OS components</h2> 
     <p> The webkit rendering engine supports a lot of CSS extensions, and you can use these to simulate native Cocoa components; for example, buttons are easy: </p> 
     <pre>
.button {
 font-family: Helvetica ;
 font-weight: bold ;
 padding: 15px; 
 border: 1px solid black ;
 -moz-border-radius: 8px ;
 -webkit-border-radius: 8px ; 
 margin-top: 10px ;
 margin-bottom: 10px ;
 background-color: white ;
}
</pre> 
     <p> I created the iPhone-like background for my logging app with a <code>background-image</code> for the document body. </p> 
     <p> The book <a href="http://www.amazon.com/gp/product/0596805780?ie=UTF8&amp;tag=ucmbread-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596805780">Building iPhone Apps with HTML, CSS, and JavaScript</a><img src="http://www.assoc-amazon.com/e/ir?t=ucmbread-20&amp;l=as2&amp;o=1&amp;a=0596805780" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;"> can show you how to simulate all of the standard iPhone UI elements. </p> 
     <h2>Creating a native "Objective-C" app</h2> 
     <p> If you want to publish your app in the app store, you'll need to write it in Objective-C. Fortunately, Cocoa includes a <code>UIWebView</code> class, which is just the Mobile Safari browser without its chrome. So, you can actually bundle your HTML/CSS/JavaScript app up natively by wrapping it in a few lines of canned Objective-C. </p> 
     <p> Of course, once you wrap your web app up as a native app, you can use Objective-C to access more features of the iPhone. If you want to get into Objective-C programming, I recommend the book <a href="http://www.amazon.com/gp/product/0596804792?ie=UTF8&amp;tag=ucmbread-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596804792">Cocoa and Objective-C: Up and Running</a><img src="http://www.assoc-amazon.com/e/ir?t=ucmbread-20&amp;l=as2&amp;o=1&amp;a=0596804792" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;"> as both a reference and a tutorial. </p> 
     <p> Here are the bare bones steps to turning a web app into a native app: </p> 
     <ol> 
      <li>Open XCode.</li> 
      <li>Create a new "View-based Application" iPhone project.</li> 
      <li>Move the files for your web app into the Resources folder in XCode, but strip out the cache manifest. (You don't want the manifest screwing things up, since everything is now local.)</li> 
      <li>Create a new instance variable, webView, inside the @interface ViewController header file: <pre>
   IBOutlet UIWebView* webView ;
   // IBOutlet means it's visible to Interface Builder.</pre> and create a property: <pre>
   @property (nonatomic, retain) UIWebView *webView;
  </pre> </li> 
      <li> In the ViewController implementation file, synthesize webView: <pre>
   @synthesize webView; </pre> </li> 
      <li> Open the ViewController interface file from Interface Builder Files folder. </li> 
      <li> From the Library's Objects menu, drag a Web View component into the layout/design window. </li> 
      <li> Select the ViewController.xib window, and then File's Owner. </li> 
      <li> Connect (by dragging) the webView outlet from the connections window to the Web View. </li> 
      <li> Return to XCode. </li> 
      <li> Implement the viewDidLoad method in the ViewController implementation file: <pre>
- (void)viewDidLoad {
 [super viewDidLoad];
  NSString *filePath =
   [[NSBundle mainBundle] pathForResource:@"index" ofType:@"html"];
  NSData *htmlData = [NSData dataWithContentsOfFile:filePath];

  if (htmlData) {
   NSBundle *bundle = [NSBundle mainBundle]; 
   NSString *path = [bundle bundlePath];
   NSString *fullPath = [NSBundle pathForResource:@"index"
                                  ofType:@"html" inDirectory:path];
   [webView loadRequest:[NSURLRequest requestWithURL:
                          [NSURL fileURLWithPath:fullPath]]];
  }
}
  </pre> This will load index.html from the Resources folder on launch. </li> 
      <li> Fire it up in the simulator. You should now see your app. </li> 
     </ol> 
     <p> Confused? Just download my <a href="./Native.zip">pre-configured web application XCode project</a>, and drop your files into Resources. </p> 
     <div class="graphic"> 
      <img src="./native-web-app.png"> 
     </div> 
     <h2>Tips</h2> 
     <ul> 
      <li> Download the iPhone SDK and test with the simulated iPhone/iPad Safari. Only do tests on the iPhone itself when you're checking to see if performance is good enough. </li> 
      <li>Install the app from an IP address rather than a hostname to cut out the DNS look-up time on application launch.</li> 
      <li>JavaScript on the iPhone doesn't handle lots of string manipulation well; prefer DOM tree manipulation for constructing user interfaces over mashing innerHTML.</li> 
      <li>Take advantage of JavaScript libraries like jQuery for cutting down on the tedium.</li> 
     </ul> 
     <h2>iPad quirks</h2> 
     <p> Creating native iPad web apps is almost identical to creating native iPhone web apps. The biggest changes are that your start-up image must be exactly 1004x768. Other than that, it's mostly the same. </p> 
     <h2>Detecting iPhone OS</h2> 
     <p> You might want your app to behave a little differently depending on where it's run. I used the following JavaScript to detect if the app is running inside an iPhone, an iPod Touch or an iPad: </p> 
     <pre>
 var IsiPhone = navigator.userAgent.indexOf("iPhone") != -1 ;
 var IsiPod = navigator.userAgent.indexOf("iPod") != -1 ;
 var IsiPad = navigator.userAgent.indexOf("iPad") != -1 ;

 var IsiPhoneOS = IsiPhone || IsiPad || IsiPod ; 
</pre> 
     <h2>Hosting</h2> 
     <p> If you're looking for a hosting provider for your web app, I recommend <a href="http://www.linode.com/?r=bf5d4e7c8a1af61855b5227279a6744c3bde8a8a">linode.com</a> </p> 
     <p> I've been running might.net on a linode for years, and I'm using them to host my medical logging app. </p> 
     <p> They're hard to beat for price, performance, flexibility and customer service. </p> 
     <h2>Code</h2> 
     <p> Feel free to use my <a href="./template.html">template.html</a>, a stubbed-out blank web app. </p> 
     <h3>Example: Multi-touch graph navigation</h3> 
     <p> I wrote an app that creates a full screen canvas and then lets you zoom in and out of the graph of <i>f</i>(<i>x</i>) = sin(<i>x</i>) using the pinch-to-zoom gesture. </p> 
     <p> This runs well on my iPad and in the simulator, but it's a little choppy on my first-gen iPhone. </p> 
     <p> Feel free to poke around and modify the code: <a href="./graph.html">graph.html</a>. </p> 
     <h3>Example: Medical logging application</h3> 
     <p> The medical logging app is a nice example because it caches much of itself locally, resorting to the network only for synchronization via PHP scripts that interact with a database.</p> 
     <p> And, it's been a major quality-of-life improvement for me and my wife. </p> 
     <p> Download the <a href="./medical-log.zip">medical logging app source code</a>. </p> 
     <script>
<!--
 SyntaxHighlighter.all() ;
//-->
</script> 
     <hr> 
     <div id="footer-links">
       [
      <a href="../">article index</a>] [
      <script>
       var emailMatt = '<a href="mai'+'lto:matt-blog'+'@'+'migh'+'t.net">email me</a>'
document.write(emailMatt);
 //-->
</script>] [
      <a href="http://twitter.com/mattmight">@mattmight</a>] [
      <a href="http://gplus.to/mattmight">+mattmight</a>] [
      <a href="../feed.rss">rss</a>] 
     </div> 
    </div> 
    <!-- /#content --> 
   </div> 
   <!-- /#content-container --> 
   <div id="footer-ad" class="module fat-container"> 
    <div class="fat-content"> 
     <center> 
      <script type="text/javascript"><!--
google_ad_client = "pub-4400645483943138";
/* Article footer banner */
google_ad_slot = "3531754286";
google_ad_width = 468;
google_ad_height = 60;
//-->
</script> 
      <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
     </center> 
    </div> 
    <!-- /footer-ad --> 
   </div> 
   <!-- /footer-ad-container --> 
   <div id="footer-linode" class="module fat-container"> 
    <div class="fat-content"> 
     <center>
       matt.might.net is powered by 
      <b><a href="http://www.linode.com/?r=bf5d4e7c8a1af61855b5227279a6744c3bde8a8a">linode</a></b> | 
      <a href="../legal/">legal information</a> 
     </center> 
    </div> 
   </div> 
  </div> 
  <!-- /#body --> 
  <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script> 
  <script type="text/javascript">
var pageTracker = _gat._getTracker("UA-3661244-1");
pageTracker._trackPageview();
</script>   
 </body>
</html>