<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head> 
  <meta http-equiv="content-type" content="text/html; charset=utf-8"> 
  <link rel="stylesheet" href="http://www.cs.usfca.edu/~parrt/lecture-wiki.css" type="text/css"> 
  <title>Compiling, Executing, and Jar'ing Java Code</title> 
 </head> 
 <body> 
  <h1>Compiling, Executing, and Jar'ing Java Code</h1> 
  <p><a href="http://www.cs.usfca.edu/~parrt"><b> Terence Parr</b></a> </p>
  <p>Last updated: August 31, 2005 </p>
  <h2>Compiling and Running Simple Java Code</h2> 
  <p>Here is the obligatory "hello world" application: </p>
  <div class="code">
   <pre>
public class T {
    public static void main(String[] args) {
        System.out.println("Salut, Le Monde");
    }
}
</pre>
  </div> 
  <p>which I have placed in <tt>~/USF/CS601/code/tools/T.java</tt>. </p>
  <p>Jumping into <tt>~/USF/CS601/code/tools</tt>, I can compile <tt>T.java</tt> with the <tt>javac</tt> tool: </p>
  <div class="code">
   <pre>
$ cd ~/USF/CS601/code/tools
$ javac T.java
</pre>
  </div> 
  <p>which leaves <tt>T.class</tt> in the current directory. </p>
  <p>To run the <tt>T.main()</tt> method, use the <tt>java</tt> interpreter/run-time-compiler tool: </p>
  <div class="code">
   <pre>
$ java T
Salut, Le Monde
$ 
</pre>
  </div> 
  <p>where <tt>java</tt> takes the name of a Java class, <tt>T</tt>, not the name of the file it is in, <tt>T.java</tt>. The java interpreter looks for <tt>T.class</tt> and then begins execution at the <tt>main()</tt> method within. Assume for now that <tt>java</tt> looks for <tt>T.class</tt> and any other class files in the current directory. </p>
  <p>Now, lets use two Java files; one, <tt>U.java</tt>: </p>
  <div class="code">
   <pre>
public class U {
    public static void main(String[] args) {
        Hello.speak();
    }
}
</pre>
  </div> 
  <p>that refers to a method in the new file, <tt>Hello.java</tt>: </p>
  <div class="code">
   <pre>
public class Hello {
    public static void speak() {
        System.out.println("hello");
    }
}
</pre>
  </div> 
  <p>To compile these two files, use </p>
  <div class="code">
   <pre>
$ javac U.java Hello.java
</pre>
  </div> 
  <p>or, more generally: </p>
  <div class="code">
   <pre>
$ javac *.java
$ ls | more
Hello.class
Hello.java
T.class
T.java
U.class
U.java
</pre>
  </div> 
  <p>Now you can run <tt>U</tt>'s <tt>main()</tt> method via: </p>
  <div class="code">
   <pre>
$ java U
hello
$ 
</pre>
  </div> 
  <h2>CLASSPATH Environment Variable</h2> 
  <p>Jump into <tt>/tmp</tt> and now try to run <tt>U</tt>: </p>
  <div class="code">
   <pre>
$ cd /tmp
$ java U
Exception in thread "main" java.lang.NoClassDefFoundError: U
</pre>
  </div> 
  <p>The problem is that the Java interpreter does not know where to find <tt>U.class</tt>. You can specify where to look directly: </p>
  <div class="code">
   <pre>
$ java -classpath ~/USF/CS601/code/tools T
Salut, Le Monde
$ java -classpath ~/USF/CS601/code/tools U
hello
</pre>
  </div> 
  <p>The notion of a <em>class path</em> is similar to the UNIX and DOS <tt>PATH</tt> environment variable that tells the command line where to find applications and tools. </p>
  <p>In general, however, you will not want to repeat the path each time. Java looks for a <tt>CLASSPATH</tt> environment variable and uses it as a colon-separated (on UNIX; PC's use semicolon I think) list of directories. These directories are understood to potentially contain your code. For example, I could set my <tt>CLASSPATH</tt> to include directory <tt>~/USF/CS601/code/tools</tt>: </p>
  <div class="code">
   <pre>
$ echo $CLASSPATH   # what is it set to currently?
.:/home/parrt/lib/antlr-2.7.2.jar:/home/parrt/lib/jguru.util.jar:...
$ export CLASSPATH="$CLASSPATH:/home/parrt/tmp"  # append
$ echo $CLASSPATH   # what is it now?
.:/home/parrt/lib/antlr-2.7.2.jar:/home/parrt/lib/jguru.util.jar:...:~/USF/CS601/code/tools
</pre>
  </div> 
  <p>Note that you should generally include dot ('.'), the current directory, in your <tt>CLASSPATH</tt>. </p>
  <p>Anyway, now from <tt>/tmp</tt>, you can run your programs without the explicit <tt>java</tt> option: </p>
  <div class="code">
   <pre>
$ cd /tmp
$ java T
Salut, Le Monde
$ java U
hello
$
</pre>
  </div> 
  <h2>Packages and Directory Structure</h2> 
  <p>Most of the time, Java code is organized into packages just like you organize your general files in your home directory. In fact, there is a prefix convention that is the reversal of your domain as the root package. For example, my ANTLR research code uses package <tt>org.antlr</tt> and jGuru uses <tt>com.jguru</tt>. For our purposes here, we will use a single package and move our test files into it. </p>
  <p>Modify the above code to live in package <tt>foo</tt>: </p>
  <div class="code">
   <pre>
$ cd ~/USF/CS601/code/tools
$ mkdir foo
$ cp *.java foo
$ cd foo
$ vi *.java
</pre>
  </div> 
  <p>Where, with your editor, you have added </p>
  <div class="code">
   <pre>
package foo;
</pre>
  </div> 
  <p>as the first line of every file. Also add <tt>"foo: "</tt> to the strings so that we can tell which version of our code is executing. So <tt>Hello.java</tt> looks like: </p>
  <div class="code">
   <pre>
package foo;

public class Hello {
    public static void speak() {
        System.out.println("foo: hello");
    }
}
</pre>
  </div> 
  <p>Note the obvious correlation between package and directory: if your class <tt>T</tt> is in package <tt>a.b.c</tt> then it must be in file <tt>a/b/c/T.java</tt>. </p>
  <p>Compile as before (except you are in the <tt>foo</tt>) subdirectory: </p>
  <div class="code">
   <pre>
$ javac *.java
</pre>
  </div> 
  <p>Now, try to run the simplest class <tt>T</tt>: </p>
  <div class="code">
   <pre>
$ java T
Exception in thread "main" java.lang.NoClassDefFoundError: T (wrong name: foo/T)
        at java.lang.ClassLoader.defineClass0(Native Method)
        at java.lang.ClassLoader.defineClass(ClassLoader.java:502)
...
</pre>
  </div> 
  <p>Java started looking for class <tt>T</tt>, which it knows will be in <tt>T.class</tt>. It found <tt>T.class</tt> in the current directory (remember '.' is in your <tt>CLASSPATH</tt> first), but the compiled code showed that it is actually class <tt>foo.T</tt> not <tt>T</tt>. </p>
  <p>Besides, you want to run the new class which is <tt>foo.T</tt> not <tt>T</tt>. Try that: </p>
  <div class="code">
   <pre>
$ cd ~/USF/CS601/code/tools/foo
$ java foo.T
Exception in thread "main" java.lang.NoClassDefFoundError: foo/T
</pre>
  </div> 
  <p>Now, java is looking for <tt>foo.T</tt> in a file called <tt>foo/T.class</tt>. You are in <tt>foo</tt>, which has no <tt>foo</tt> subdirectory. If you move up a directory, then <b>file</b> <tt>foo/T.class</tt> will be found when you ask for <b>class</b> <tt>foo.T</tt>: </p>
  <div class="code">
   <pre>
$ cd ..
$ pwd   # print working directory
/Users/parrt/tmp
$ java foo.T
foo: Salut, Le Monde
$ java foo.U
foo: hello
</pre>
  </div> 
  <p>To execute <tt>foo.T</tt>, java uses the following algorithm: </p>
  <ol> 
   <li>Convert class to filename; <tt>foo.T</tt> -&gt; <tt>foo/T.class</tt> </li> 
   <li>Look for a directory in the class path that contains directory <tt>foo</tt> </li> 
   <li>Find file <tt>T.class</tt> inside directory <tt>foo</tt>. </li> 
   <li>Execute method <tt>main()</tt> within </li> 
  </ol> 
  <h2>Jar'ing Java Code</h2> 
  <p>Tool <tt>jar</tt> (<em>java archive</em>) is analogous the UNIX <tt>tar</tt> utility and packs a bunch of Java source, Java .class files, resources etc... into a single file for easy deployment. </p>
  <h3>Without packages</h3> 
  <p>To make a jar of the simple test files in <tt>~/USF/CS601/code/tools</tt>, jump inside and say </p>
  <div class="code">
   <pre>
$ jar cvf /tmp/tools.jar *.class
added manifest
adding: Hello.class(in = 385) (out= 271)(deflated 29%)
adding: T.class(in = 411) (out= 286)(deflated 30%)
adding: U.class(in = 283) (out= 220)(deflated 22%)
</pre>
  </div> 
  <p>This "cvf /tmp/tools.jar" (create, verbose, filename ...) option jars up all the .class files and puts the jar file in <tt>/tmp/tools.jar</tt>. To see what is inside, use <tt>tvf</tt>: </p>
  <div class="code">
   <pre>
$ jar tvf /tmp/tools.jar
     0 Tue Sep 02 14:44:44 PDT 2003 META-INF/
    70 Tue Sep 02 14:44:44 PDT 2003 META-INF/MANIFEST.MF
   385 Tue Sep 02 14:05:50 PDT 2003 Hello.class
   411 Tue Sep 02 13:55:06 PDT 2003 T.class
   283 Tue Sep 02 14:05:50 PDT 2003 U.class
</pre>
  </div> 
  <h3>With packages</h3> 
  <p>When you have packages, you must be careful what directory you are in. Recall that class <tt>foo.T</tt> must be in file <tt>foo/T.class</tt>. So to ja up the second round of packaged examples, you would jar everything up for the same directory as before (that is, the directory containing <tt>foo</tt>): </p>
  <div class="code">
   <pre>
$ jar cvf /tmp/foo.jar foo
added manifest
adding: foo/(in = 0) (out= 0)(stored 0%)
adding: foo/Hello.class(in = 389) (out= 276)(deflated 29%)
adding: foo/Hello.java(in = 106) (out= 94)(deflated 11%)
adding: foo/T.class(in = 415) (out= 290)(deflated 30%)
adding: foo/T.java(in = 124) (out= 113)(deflated 8%)
adding: foo/U.class(in = 291) (out= 227)(deflated 21%)
adding: foo/U.java(in = 100) (out= 90)(deflated 10%)
$ jar tvf /tmp/foo.jar
     0 Tue Sep 02 14:47:44 PDT 2003 META-INF/
    70 Tue Sep 02 14:47:44 PDT 2003 META-INF/MANIFEST.MF
     0 Tue Sep 02 14:34:38 PDT 2003 foo/
   389 Tue Sep 02 14:34:50 PDT 2003 foo/Hello.class
   106 Tue Sep 02 14:34:30 PDT 2003 foo/Hello.java
   415 Tue Sep 02 14:34:50 PDT 2003 foo/T.class
   124 Tue Sep 02 14:34:32 PDT 2003 foo/T.java
   291 Tue Sep 02 14:34:50 PDT 2003 foo/U.class
   100 Tue Sep 02 14:34:36 PDT 2003 foo/U.java
</pre>
  </div> 
  <h3>Executing Java Within a Jar</h3> 
  <p>To execute code from within a jar, make sure the jar file is in your class path (either explicitly from the command line as shown here or from your <tt>CLASSPATH</tt> environment variable). </p>
  <div class="code">
   <pre>
$ cd some-random-directory
$ java -classpath /tmp/tools.jar T
foo: Salut, Le Monde
$ java -classpath /tmp/tools.jar U
foo: hello
</pre>
  </div> 
  <p>To access the code in a package, the same syntax is used: </p>
  <div class="code">
   <pre>
$ java -classpath /tmp/foo.jar foo.T
foo: Salut, Le Monde
~/USF/CS601/code/tools $ java -classpath /tmp/foo.jar foo.U
foo: hello
</pre>
  </div> 
  <p>In essence, a jar file is simply mimicking file system directory structure.   </p>
 </body>
</html>