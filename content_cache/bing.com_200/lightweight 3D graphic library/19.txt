<html>
 <head> 
  <title>Java 3D Graphics Library package</title> 
 </head>
 <body BGCOLOR="#FFFFFF" background="../../images/ACBLUPRT.GIF">
  <x-sas-window top="44" bottom="666" left="8" right="558"> 
   <meta NAME="description" CONTENT="A Java class package for working with 3D graphics and OpenGL in particular.">
   <meta NAME="keywords" CONTENT="Java, source code, 3D, graphics, OpenGL, GL4Java, class, package">   
   <h3>&nbsp;<a href="../index.html"><img SRC="../../images/leftArrow.gif" ALT="Back to Joe's Java Index" WIDTH="39" HEIGHT="39" X-SAS-UseImageWidth X-SAS-UseImageHeight ALIGN="middle"></a><img SRC="../../images/spacer.gif" WIDTH="7" HEIGHT="7" X-SAS-UseImageWidth X-SAS-UseImageHeight ALIGN="bottom">Back to 3D Graphics Index.</h3> 
   <h1 align="CENTER">
    <hr> GL Package</h1> 
   <p align="CENTER"><font size="6">jahuwaldt.gl</font>&nbsp;</p>
   <hr WIDTH="60%">
   <p></p> 
   <p>This library is provided as free software under the terms of the <a href="http://www.gnu.org/copyleft/lgpl.html">Library General Public License</a>.</p> 
   <p>I have written a Java class package for working with 3D graphics and OpenGL/GL4Java in particular. This package currently consists of the following classes:</p> 
   <ul> 
    <li>GLTools: A generic collection of small static methods for working with 3D graphics. These methods are not OpenGL specific, but are geared towards working with OpenGL. Currently, this class contains methods that do the following: normalize a 3D vector, calculate the cross product and dot product of two vectors, calculate the normal vector of a triangle surface, calculate 2D and 3D distance, calculate 2D and 3D approximate distance (fast!), calculate a fast fixed-point approximation for the arctangent, and fast table-lookup versions of sine and cosine.<br> <br> </li>
    <li>GLUtils: A collection of small utility methods for rendering simple shapes in OpenGL using GL4Java. Includes methods for efficiently rendering 2D circles, 2D inclined ellipses, and 2D inclined elliptical arcs.<br> <br> </li>
    <li>Matrix: A class of small static methods for working with transformation matrices. You should avoid working with transformation matrices in Java if you can (poor floating point performance), but if you must, then use these efficient methods. This class includes methods for the following: convert radians to degrees and vice-versa, load the identity matrix, set X, Y, &amp; Z axis rotation matrices, set a scale matrix, set a translate matrix, matrix multiplication, post-concatenation (fast!) X,Y, &amp; Z rotation, scale, and transformation matrix multiplication.<br> <br> </li>
    <li>VirtualSphere: A class that implements the virtual sphere algorithm for using a mouse to manipulate a 3D model or scene. Works by setting up an imaginary unit sphere in the window port where the rotation angle depends on the position of the mouse on the virtual sphere. This gives a <b>much</b> more intuitive user interface that simply changing the X and Y rotation angles linearly with mouse movement. </li>
   </ul> 
   <p>If you download my GL package and use it. Let me know what you think and especially let me know if there is something that should be corrected or added to this package.</p> 
   <p>My GL package can be downloaded by clicking here: <b><a href="GLPackage.zip">jahuwaldt.gl</a></b> (20k), Version: May 13, 2002.</p> 
   <p>Version <a href="History.html">history</a> .</p> 
   <p>Need <a href="../../DownloadHelp.html" target="">help</a>?</p> 
   <p></p>
   <hr>
   <font size="2">Created: January 31, 2001<br> Modified: June 11, 2002</font>
   <p></p> 
   <p>&nbsp;</p>   
  </x-sas-window>
 </body>
</html>