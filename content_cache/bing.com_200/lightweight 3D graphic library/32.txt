<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN" "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
 <!--
*******************************************************************************
  Google Analytics
*******************************************************************************
-->
 <head>
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-23819188-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script> 
  <!--
*******************************************************************************
  Page header
*******************************************************************************
-->  
  <title>G - Java 2D Graphics Library</title> 
  <meta name="Author" content="GeoSoft"> 
  <meta name="Keywords" content="geosoft, java, c#, 2D, 3D, eclipse, development, free, LGPL, software, graphics, rendering, renderer"> 
  <meta name="Description" content="GeoSoft develop software components in the areas of user interfaces and usability, software architecture, data modeling, graphics, data access, mathematics and geophysics among others. GeoSoft provides first class consultancy services within software strategy, architecture, design and development."> 
  <meta http-equiv="Content-Language" content="en"> 
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"> 
  <link rel="stylesheet" href="../style.css" type="text/css"> 
 </head> 
 <body marginwidth="20" marginheight="20" bgcolor="white" link="7a88a1" vlink="7a88a1"> 
  <!--
*******************************************************************************
   Content
*******************************************************************************
--> 
  <center> 
   <img src="heading.gif" alt="heading"> 
  </center> 
  <p> <em>G</em> is a generic graphics library built on top of Java 2D in order to make scene graph oriented 2D graphics available to client applications in a high level, easy to use way. </p>
  <p> <script type="text/javascript"><!--
  google_ad_client = "ca-pub-1737499834905788";
  /* Graphics */
  google_ad_slot = "5052406308";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
</script> <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> </p>
  <h1>G Features</h1> 
  <ul> 
   <li> Object oriented hierarchical scene graphs </li>
   <li> Layered graphics with visibility support </li>
   <li> Flexible 3D space world extents </li>
   <li> World and device coordinate support </li>
   <li> Powerful rendering style support </li>
   <li> Smart annotations </li>
   <li> Powerful object detection functions </li>
   <li> Extensible </li>
   <li> Interaction support </li>
   <li> Raster image support </li>
   <li> Embedded Swing component support </li>
   <li> Utilities for geometry generation and transformations </li>
   <li> Image export and printing support </li>
   <li> JDK 1.2, 1.3, 1.4 and 1.5 compatible </li>
   <li> Light weight (~80kB), self contained, simple to use </li>
   <li> Free, open source (<a href="http://www.gnu.org/copyleft/lesser.html">LGPL</a>), <a href="http://www.opensource.org">OSI certified</a> </li>
  </ul> 
  <script type="text/javascript"><!--
  google_ad_client = "ca-pub-1737499834905788";
  /* Graphics */
  google_ad_slot = "5052406308";
  google_ad_width = 728;
  google_ad_height = 90;
  //-->
</script> 
  <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script> 
  <p> Create a <tt>GWindow</tt> as top level graphics node and link to a Swing panel. Add a <tt>GScene</tt> which defines viewport and world extents. Build the graphics hierarchy by <tt>GObjects</tt> and add to the scene. <tt>GObject</tt>s consists of <tt>GSegment</tt>s (polylines) and other <tt>GObject</tt>s. Rendering information is supplied by <tt>GStyle</tt> objects added to any level of the graphics. Annotations (<tt>GText</tt>), raster images (<tt>GImage</tt>) and AWT/Swing components (<tt>GComponent</tt>) are added to segments with specified position hints. Interactions are implemented through the <tt>GInteraction</tt> interface. </p>
  <p> The graphics is double buffered to keep rendering smooth. The implementation makes heavy use of <em>regions</em> to keep track of objects and damage area in order to keep the rendering pipeline as efficient as possible. 
   <!--
***********************************************************
  Download
***********************************************************
--> </p>
  <h1>Download</h1> 
  <table cellpadding="5" border="1" cellspacing="0" width="100%"> 
   <tbody>
    <tr> 
     <td bgcolor="b0c4e8"><b>Version</b></td> 
     <td bgcolor="b0c4e8"><b>Library</b></td> 
     <td bgcolor="b0c4e8"><b>Source</b></td> 
     <td bgcolor="b0c4e8"><b>Demos</b></td> 
     <td bgcolor="b0c4e8"><b>Documentation</b></td> 
    </tr> 
    <tr> 
     <td bgcolor="ffffff">1.0 (December 2009)</td> 
     <td bgcolor="ffffff"><a href="G.jar">G.jar</a></td> 
     <td bgcolor="ffffff"><a href="G.src.jar">G.src.jar</a></td> 
     <td bgcolor="ffffff"><a href="G.demos.jar">G.demos.jar</a></td> 
     <td bgcolor="ffffff"><a href="G/docs.jar">docs.jar</a> (<a href="G/docs/index.html">online</a>)</td> 
    </tr> 
    <tr> 
     <td bgcolor="ffffff">1.1 (not scheduled)</td> 
     <td bgcolor="ffffff">&nbsp;</td> 
     <td bgcolor="ffffff">&nbsp;</td> 
     <td bgcolor="ffffff">&nbsp;</td> 
     <td bgcolor="ffffff">&nbsp;</td> 
    </tr> 
    <tr> 
     <td bgcolor="ffffff">2.0 (not scheduled)</td> 
     <td bgcolor="ffffff">&nbsp;</td> 
     <td bgcolor="ffffff">&nbsp;</td> 
     <td bgcolor="ffffff">&nbsp;</td> 
     <td bgcolor="ffffff">&nbsp;</td> 
    </tr> 
   </tbody>
  </table> 
  <!--
***********************************************************
  Demo Programs / Tutorial
***********************************************************
--> 
  <h1>Demo Programs / Tutorial</h1> Below is a collection of some simple 
  <b>G</b> programs that demonstrates the library features and the typical architecture for scene setup and user interactions. 
  <p> The programs are well suited as a tutorial, and also indicates frameworks for real applications based on the library. </p>
  <p> To keep the demo programs simple (within single files), model classes are implemented as <em>inner classes</em> of the main class. In real applications these will normally be in separate files. </p>
  <p> To run a demo program, follow these simple steps: </p>
  <ol> 
   <li> Download <a href="G.jar">G.jar</a> to some directory, for instance <code>.../gtest/G.jar</code> </li>
   <li> Copy/paste the demo program from the browser and store locally: <code>.../gtest/Demo1.java</code> </li>
   <li> Compile the demo program: <code>javac -classpath G.jar Demo1.java</code> </li>
   <li> Run the demo program: <code>java -classpath G.jar;. Demo1</code> (MS/Windows) or <code>java -classpath G.jar:. Demo1</code> (Unix). </li>
  </ol> 
  <br> 
  <p> </p>
  <table cellpadding="5" border="1" cellspacing="0" width="100%"> 
   <!--
  *****************************************************
    Demo 1
  *****************************************************
  --> 
   <tbody>
    <tr> 
     <td valign="top"> <b>Demo 1</b> <p> A program demonstrating: </p>
      <ul> 
       <li> Basic graphics window and scene setup </li>
       <li> Setting canvas background color </li>
       <li> Basic scene composition </li>
       <li> The use of style </li>
       <li> Example geometry generation </li>
       <li> Simple annotation with positioning </li>
      </ul> The program shows the basic steps involved when creating a graphics canvas; Creating the <tt>GWindow</tt> component, the <tt>GScene</tt> (defining the viewport and the world extent), creating a <tt>GObject</tt> (the graphics object) consisting of <tt>GSegments</tt> (polyline geometry) with optional <tt>GText</tt> annotation. Rendering style is specified through <tt>GStyle</tt> objects. <p> <a href="Demo1.java.html">Demo1.java</a> </p></td> 
     <td valign="top"> <a href="Demo1.gif"> <img vspace="0" src="Demo1.small.gif" alt="Demo1"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 1a
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 1a</b> <p> A program demonstrating: </p>
      <ul> 
       <li> World extent and world coordinates </li>
       <li> Defualt zoom interaction </li>
      </ul> This program is almost identical to the previous, but by specifying an explicit world extent and supplying geometry as world coordinates the canvas can be made zoomable as shown. <p> <a href="Demo1a.java.html">Demo1a.java</a> </p></td> 
     <td valign="top"> <a href="Demo1a.gif"> <img vspace="0" src="Demo1a.small.gif" alt="Demo1a"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 2
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 2</b> <p> A program demonstrating: </p>
      <ul> 
       <li> Positional feature among sibling graphical objects </li>
       <li> Simple selection interaction </li>
       <li> Dynamic style changes </li>
       <li> <tt>Matrix4x4</tt> for geometry generation </li>
       <li> Text elements and annotation strategy </li>
       <li> Device relative geometry </li>
      </ul> The program produce a set of graphics objects in a predetermined screen order. Selecting an object will highlight it, and the user can change its depth position through the GUI provided. <p> All elements has an associated text. Note that the text elements are in the front even if the object it annotates is in the back. This follows the <b>G</b> annotation strategy which is as follows: </p>
      <ol> 
       <li> All annotations are put in the front (annotations in the back are of limited use and therefore avoided) </li>
       <li> Annotations never hide other annotations (partly- or not visible annotations are of limited use and therefore avoided) </li>
       <li> Annotations are never cut (partly visible annotations are of limited use and therefore avoided) </li>
      </ol> A client application can override the annotation strategy by adding the <em>static</em> text hint. <p> <a href="Demo2.java.html">Demo2.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo2.gif"> <img vspace="0" src="Demo2.small.gif" alt="Demo2"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 3
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 3</b> <p> A program demonstrating: </p>
      <ul> 
       <li> Annotation layout mechanism </li>
       <li> Visibility settings </li>
       <li> Custom line style </li>
      </ul> A number of lines are created, each with an associated text with position hint <em>bottom</em>. The requested position of the annotations will cause them to overlap, but as this is not allowed by the rendering engine they are repositioned so they become visible and non-overlapping. Annotation that cannot fulfill these requirements are not rendered. This are further illustrated by resizing the the window. <p> This program also shows different visibility modes for <tt>GObjects</tt>. Accessing the toggle buttons at the top switch between geometry visible, annotation visible, both visible or neither visible. Visibility is a feature of <tt>GObjects</tt>, and affects the entire subtree of components rooted in that node. </p><p> <a href="Demo3.java.html">Demo3.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo3.gif"> <img vspace="0" src="Demo3.small.gif" alt="Demo3"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 4
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 4</b> <p> A program demonstrating: </p>
      <ul> 
       <li> Text position hints </li>
       <li> Annotation algorithm </li>
      </ul> A random polyline is regenerated on each re-transformation (i.e. resize) event. Several text elements has been added and resizing the window illustrates how the annotations are repositioned according to the new geometry of the polyline. <p> Text position hints has three components: </p>
      <ul> 
       <li>Position along the line - <em>first</em>, <em>last</em>, <em>top</em>, <em>bottom</em>, <em>left</em>, <em>right</em> and <em>middle</em> (center of polyline bounding box). </li>
       <li>Location relative to rendering point - <em>center</em>, <em>north</em>, <em>south</em>, <em>east</em>, <em>west</em>, <em>north east</em>, <em>north west</em>, <em>south east</em> and <em>south west</em>. </li>
       <li>Algorithm - <em>static</em> (place at requested position) <em>dynamic</em> (adjust to ensure visibility) </li>
      </ul> <p> <a href="Demo4.java.html">Demo4.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo4.gif"> <img vspace="0" src="Demo4.small.gif" alt="Demo4"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 5
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 5</b> <p> A program demonstrating: </p>
      <ul> 
       <li> Custom world extent </li>
       <li> Zoom interaction </li>
       <li> Text background color </li>
       <li> The effect of transparency </li>
       <li> Annotation layout algorithm </li>
      </ul> This demo program sets an explicit world extent and supply geometry as world coordinates (floating point coordinates are interpreted as <em>world</em> extent relative while integer coordinates is interpreted as <em>device</em> relative). <p> Specifying geometry relative to the world extent makes the scene zoomable and panable as shown in this program through the default <tt>ZoomInteraction</tt>. </p><p> The sample curve have a set of texts associated with it. Note during zoom how the annotation algorithm always ensure that they never overlap and that they are always on screen. </p><p> <a href="Demo5.java.html">Demo5.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo5.gif"> <img vspace="0" src="Demo5.small.gif" alt="Demo5"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 6
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 6</b> <p> A program demonstrating: </p>
      <ul> 
       <li> Custom selection interaction </li>
       <li> Object detection features </li>
       <li> Style inheritance </li>
       <li> Dynamic style setting </li>
      </ul> A random set of lines are rendered within the scene, and a custom interaction is implemented to select lines that either <em>intersects</em> or are <em>inside</em> the current selection rectangle. The selected objects are dynamically highlighted by switching style component. <p> <a href="Demo6.java.html">Demo6.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo6.gif"> <img vspace="0" src="Demo6.small.gif" alt="Demo6"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 7
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 7</b> <p> A program demonstrating: </p>
      <ul> 
       <li> More annotation techniques </li>
       <li> Custom interaction </li>
       <li> Using transparent colors </li>
       <li> True scale resize </li>
      </ul> To position the edge annotation, invisible vertical and horizontal lines are drawn, and the texts are positioned at the ends of these. <p> The program implements an interaction illustrating how the scene can be updated just by moving the cursor over it. The moving object use a transparent color so the background graphics shows through. </p><p> The program also illustrates the <em>true scale</em> feature of the scene; The scale ratio of this scene is fixed and independent of window shape as can be seen during resize. The default scene setting is to squeeze the world extent to fir the current viewport. </p><p> <a href="Demo7.java.html">Demo7.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo7.gif"> <img vspace="0" src="Demo7.small.gif" alt="Demo7"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 8
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 8</b> <p> A program demonstrating: </p>
      <ul> 
       <li> Nested <tt>GObject</tt> hierarchy </li>
       <li> Style inheritance </li>
       <li> Simple selection interaction </li>
      </ul> <em>Style</em> (color, line width, line style, fill, font etc.) determines how graphics elements are rendered and can be explicitly put on any level of the scene. Where a style property has <em>not</em> been explicitly specified, this property is inherited from an above level. <p> This program illustrates this feature. The graphic object contains children nodes as illustrated. Initially all nodes inherits background color from the scene where it is explicitly set (white). Clicking a node set a random background color on that node. This background color is inherited down the tree to nodes that does not explicitly define background color. Clicking mouse button 2 on a node <em>unsets</em> the background color at that node. </p><p> <a href="Demo8.java.html">Demo8.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo8.gif"> <img vspace="0" src="Demo8.small.gif" alt="Demo8"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 9
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 9</b> <p> A program demonstrating: </p>
      <ul> 
       <li> A simple animation </li>
       <li> Using the <tt>Geometry</tt> and <tt>Matrix4x4</tt> classes to generate geometry </li>
       <li> Dynamic annotation changes </li>
      </ul> The program creates a scene which depends on a circular angle. By drawing the object explicitly with changing angle, the result becomes an animation. <p> <a href="Demo9.java.html">Demo9.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo9.gif"> <img vspace="0" src="Demo9.small.gif" alt="Demo9"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 10
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 10</b> <p> A program demonstrating: </p>
      <ul> 
       <li> Simple image handling </li>
       <li> Simple drawing interaction </li>
      </ul> <tt>GSegment</tt>s can be associated with <em>images</em>. For large scale background images like the map in the demo, the common approach is to create a single device coordinate segment serving as the image anchor. <p> In this demo program, an additional segment (the red path) is put on top of the image, and filled with geometry through a simple drawing interaction. </p><p> Note that this program takes the image as input parameter. The image is not provided, but any image can be used. </p><p> <a href="Demo10.java.html">Demo10.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo10.gif"> <img vspace="0" src="Demo10.small.gif" alt="Demo10"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 11
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 11</b> <p> A program demonstrating: </p>
      <ul> 
       <li> A custom move interaction </li>
       <li> Switching interactions </li>
       <li> Update world extent geometry </li>
       <li> Scroll handling </li>
      </ul> The <tt>GObject</tt> consist of a set of randomly positioned <tt>GSegment</tt>s with geometry specified in world coordinates. The program implements a move interaction where the geometry of the moved object is permanently changed so it becomes persistent through later re-transformations. This can be verifyed using the zoom interaction provided. <p> This program also demonstrates how to use scrollbars with <b>G</b>. Simply pass the two scrollbar components to the <tt>GScene</tt> which will take care of the details. </p><p> <a href="Demo11.java.html">Demo11.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo11.gif"> <img vspace="0" src="Demo11.small.gif" alt="Demo11"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 12
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 12</b> <p> A program demonstrating: </p>
      <ul> 
       <li>Point annotations </li>
       <li>Annotation algorithm </li>
       <li>Annotation background color </li>
       <li>Point images </li>
       <li>Printing feature </li>
      </ul> A single line is created in a specified world extent. The geometry is independent on visual extent and viewport and therefore precomputed in the <tt>GObject</tt> constructor. All points are associated with a symbol (a <tt>GImage</tt>). Any image can be used for this purpose; in this case a predefined square symbol is used. An annotation is bound to each point. Text position algorithm is set to <em>static</em> to avoid text repositioning if a point becomes invisible due to zooming. <p> The program also demonstrates the simplicity of printing the <tt>GWindow</tt> content. </p><p> <a href="Demo12.java.html">Demo12.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo12.gif"> <img vspace="0" src="Demo12.small.gif" alt="Demo12"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 13
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 13</b> <p> A program demonstrating: </p>
      <ul> 
       <li>A sample interactive game application </li>
       <li>A custom interaction </li>
       <li>Dynamic graphics highlighting </li>
      </ul> The program implements the rules and graphics representation of the game <em>Reversi</em>. <p> The game alternates between white and black player moves. When the cursor is moved over the board, legal cells are highlighted. A piece is placed by clicking the left mouse button inside a legal cell. </p><p> <a href="Demo13.java.html">Demo13.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo13.gif"> <img vspace="0" src="Demo13.small.gif" alt="Demo13"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 14
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 14</b> <p> A program demonstrating: </p>
      <ul> 
       <li> A sample game application </li>
       <li> Graphics animation </li>
       <li> <tt>GObject</tt> re-parenting </li>
      </ul> The program animates the solution to the famous <em>Towers of Hanoi</em> puzzle. <p> The world extent is chosen to make it simple to position pegs and discs. Pegs and discs are objects inheriting from <tt>GObject</tt>. Initially the discs are children of the left-most peg, and during the solution they are re-parented according to their new position. </p><p> <a href="Demo14.java.html">Demo14.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo14.gif"> <img vspace="0" src="Demo14.small.gif" alt="Demo14"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 15
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 15</b> <p> A program demonstrating: </p>
      <ul> 
       <li>A rudimentary chart library </li>
       <li>The use of multiple scenes </li>
       <li>World extent usage </li>
       <li>Zooming and scrolling </li>
       <li><em>Nice number</em> generation </li>
      </ul> The example illustrates a rudimentary setup for a generic chart library. The graphics consists of two scenes: The <em>annotation scene</em> is in the back and contains axis annotation, title, chart background, grid lines etc. This scene covers the entire window, and geometry is specified in device coordinates. The <em>plot</em> scene is in the front and contains the graphs. This scene has a viewport that match the chart exactly and world extent settings that is chart relative so that chart values can be plotted directly. <p> The chart is zoomable and scrollable. The annotation scene has the plot world extent as <em>user data</em> in order to correctly update the axes annotation on redraw. </p><p> Note that <b>G</b> is <em>not</em> a chart library (like JFreeChart for instance). But it can easily be used as the foundation for one as this example illustrates. </p><p> Note also that this program utilize the <a href="../software/index.html#nicenumbers">nicenumbers</a> module for producing axes annotation. </p><p> <a href="Demo15.java.html">Demo15.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo15.gif"> <img vspace="0" src="Demo15.small.gif" alt="Demo15"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 16
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 16</b> <p> A program demonstrating: </p>
      <ul> 
       <li>A rudimentary pie chart class </li>
       <li>Annotation techniques </li>
       <li>Example geometry generation </li>
      </ul> The example illustrates a rudimentary pie chart class. It can hold a number of labeled <em>fractions</em> each rendered with a specified style. <p> The label and percentage are added to an invisible line that originate in each sector center and extends out of the pie chart. The annotation layout manager ensure that annotations follows these lines and don't overlap. </p><p> Note again that <b>G</b> is <em>not</em> a chart library, but that it can easily be used as the foundation for one as this example illustrates. </p><p> <a href="Demo16.java.html">Demo16.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo16.gif"> <img vspace="0" src="Demo16.small.gif" alt="Demo16"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 17
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 17</b> <p> A program demonstrating: </p>
      <ul> 
       <li>A rudimentary bar chart class </li>
       <li>Rendering techniques </li>
      </ul> The example illustrates a rudimentary bar chart class. It can hold a number of bars each rendered in 3D with a specified color. <p> As <b>G</b> is a foundation library it does not support complex shapes like 3D bars as shown. Such shapes can however easily be provided by extending <tt>GObject</tt>, and the geometry can be created through the generic <tt>Geometry</tt> class which comes as part of <b>G</b>. </p><p> <a href="Demo17.java.html">Demo17.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo17.gif"> <img vspace="0" src="Demo17.small.gif" alt="Demo17"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 18
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 18</b> <p> A program demonstrating: </p>
      <ul> 
       <li> Advanced image handling </li>
       <li> The use of multiple scenes </li>
      </ul> This program illustrates advanced image handling. As in Demo15, two scenes are used; A device relative scene for annotation, and a domain relative scene for data. The data in this case is a seismic image. The image scene is zoomable and scrollable. The annotation scene has the domain scene as <em>user data</em> in order to correctly update the axes annotation on redraw. <p> Note that <b>G</b> never scale images. When scaling is needed this must be handled by the client application, typically within the <tt>draw()</tt> method as shown here. This gives the application full control over the scaling process, and it avoids unnecessary caching and processing inside the rendering engine. </p><p> Note that this program takes the image and the image extent information as input parameters. The image is not provided, but any image can be used. Note also thet the program use the <a href="../software/index.html#nicenumbers">nicenumbers</a> module for producing annotation. </p><p> <a href="Demo18.java.html">Demo18.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo18.gif"> <img vspace="0" src="Demo18.small.gif" alt="Demo18"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 19
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 19</b> <p> A program demonstrating: </p>
      <ul> 
       <li> An actual game application </li>
       <li> Embedded AWT components </li>
       <li> Custom selection interaction </li>
       <li> Dynamic annotations </li>
       <li> Geometry generation </li>
      </ul> The program is an implementation of the game <em>Simon</em>. <p> The colored sectors are created by connecting two circle sectors of different radius and remove superfluous vertexes. </p><p> The game <em>start</em> button is a <tt>JButton</tt> embedded in the graphics using the <tt>GComponent</tt> wrapper attached to a <tt>GSegment</tt>. </p><p> <a href="Demo19.java.html">Demo19.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo19.gif"> <img vspace="0" src="Demo19.small.gif" alt="Demo19"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 20
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 20</b> <p> A program demonstrating: </p>
      <ul> 
       <li> A math application </li>
       <li> Polyline performance </li>
       <li> Geometry generation </li>
      </ul> The program generates the famous <em>Koch Snowflake</em>, a fractal geometric shape with infinite circumference and finite area. <p> Initially the snowflake has three edges. The user can add or remove levels to the snowflake using the <b>+</b> and <b>-</b> buttons. The graphics implementation is simple. A single <tt>GSegment</tt> holds the curve and its geometry is recomputed for each add/remove level command based on the current geometry. </p><p> The canvas is zoomable so that the fractal nature of the shape can be inspected. </p><p> Note that the number of points in the curve increase exponentially with number of levels, and that the performance of the program degrades accordingly. </p><p> <a href="Demo20.java.html">Demo20.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo20.gif"> <img vspace="0" src="Demo20.small.gif" alt="Demo20"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 21
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 21</b> <p> A program demonstrating: </p>
      <ul> 
       <li> A rudimentary sheet music library </li>
       <li> <tt>GObject</tt> extension </li>
       <li> Spline generation </li>
      </ul> The program illustrates how <tt>GObject</tt>s can be extended to represent reusable higher level objects, in this case a <em>stave</em> and a <em>note</em>. When properly implemented, these classes can be used in any graphics application. <p> A proper implementation would gather stave and note properties in suitable classes and take instances of these as input to the <tt>GStave</tt> and <tt>GNote</tt> outlined here. In this demo program only a few properties are included and they are part of the graphics classes to make the implementation compact. </p><p> The note representation is vector based and is therefore fully scalable. </p><p> Note that this program utilize the <a href="../software/index.html#spline">spline</a> module to generate note geometry. </p><p> <a href="Demo21.java.html">Demo21.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo21.gif"> <img vspace="0" src="Demo21.small.gif" alt="Demo21"></a> </td> 
    </tr> 
    <!--
  *****************************************************
    Demo 23
  *****************************************************
  --> 
    <tr> 
     <td valign="top"> <b>Demo 23</b> <p> A program demonstrating: </p>
      <ul> 
       <li> Advanced geometry generation </li>
       <li> Dynamic update </li>
       <li> Threading </li>
      </ul> The complete geometry for a clock is generated by use of the <tt>Geometry</tt> and the <tt>Matrix4x4</tt> classes. <p> The clock handle geometry is updated in response to a timer task running once a second. The scene is zoomable. </p><p> <a href="Demo23.java.html">Demo23.java</a> </p></td> 
     <td valign="top" halign="right"> <a href="Demo23.gif"> <img vspace="0" src="Demo23.small.gif" alt="Demo23"></a> </td> 
    </tr> 
   </tbody>
  </table> 
  <!--
***********************************************************
  License Information
***********************************************************
--> 
  <h1>License Information</h1> 
  <p> The above library is free software; you can redistribute it and/or modify it under the terms of the <a href="http://www.gnu.org/copyleft/lesser.html"> GNU Lesser General Public License </a> as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. </p>
  <p> The above library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the <a href="http://www.gnu.org/copyleft/lesser.html"> GNU Lesser General Public License </a> for more details. </p>
  <p> In short: </p>
  <ul> 
   <li> <a href="G.jar">G.jar</a> is free and can be used for any purposes (also commercial). </li>
   <li> The library <em>must</em> be accessed through <a href="G.jar">G.jar</a>; Its components may not be extracted and re-bundled with a client application. </li>
   <li> If classes or packages are added to <b>G</b>, or classes are renamed or modified in any other way; The resulting packages and classes must also be licensed under the GNU LGPL. </li>
  </ul> 
  <p> <a href="http://www.opensource.org/"> <img src="../images/osi-certified.gif" align="left" border="0" alt="osi certified"> </a>   </p>
 </body>
</html>