<!doctype html>
<!--[if lt IE 7]> <html class="lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if IE 7]> <html class="lt-ie9 lt-ie8" lang="en"> <![endif]-->
<!--[if IE 8]> <html class="lt-ie9" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->
<html lang="en">
 <!--<![endif]-->
 <!--[if IE 9]> <html class="lt-ie9" lang="en"> <![endif]-->
 <!--
-------------------------------------------------------------
-------------------------------------------------------------
   _____           __                    __    _        __
  / ___/___  ___  / /_ __ __ ____ __ __ / /   (_)___   / /__
 / /__ / -_)/ _ \/ __// // // __// // // /__ / // _ \ /  '_/
 \___/ \__//_//_/\__/ \_,_//_/   \_, //____//_//_//_//_/\_\
                               /___/

-------------------------------------------------------------
-------------------------------------------------------------
-->
 <head> 
  <meta charset="utf-8"> 
  <title>Build User Authentication with Node.js, Express, Passport, and MongoDB - CenturyLink Cloud Developer Center</title> 
  <link rel="shortcut icon"> 
  <meta name="description" content="One of the trickiest aspects of building my first application was implementing User Authentication...."> 
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"> 
  <link rel="shortcut icon" href="/developers/assets/images/favicon.ico" type="image/x-icon"> 
  <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js" />
  <![endif]--> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js"></script> 
  <link href="//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,300,400,600,700" rel="stylesheet" type="text/css"> 
  <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet"> 
  <link rel="stylesheet" href="/developers/assets/css/main.css"> 
  <link rel="alternate" type="application/rss+xml" title="CenturyLink Cloud Developer Center Blog" href="/developers/blog/rss"> 
  <!--GA Scripts for ctl.io so dev center will be tracked as part of the entire site--> 
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-45856849-1', 'auto');
    ga('send', 'pageview');

  </script> 
  <!-- Go to www.addthis.com/dashboard to customize your tools --> 
  <script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-564e3f7b3c6c4beb" async></script> 
  <!--GA Scripts for only the dev center web property so it can be tracked on its own--> 
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-45856849-2', 'auto');
    ga('send', 'pageview');

  </script> 
 </head> 
 <body class="blog single"> 
  <div id="header"> 
   <div class="container"> 
    <div role="navigation" class="navbar navbar-inverse navbar-fixed-top"> 
     <div class="container" style="position:relative;"> 
      <div class="navbar-logo"> 
       <a href="/developers/" class="navbar-brand"> <img src="/developers/assets/images/logo-dev.svg" height="30" alt="CenturyLink" class="hidden-xs"> <img src="/developers/assets/images/logo-dev.svg" height="25" alt="CenturyLink" class="visible-xs"> </a> 
      </div> 
      <div class="navbar-header"> 
       <button type="button" data-toggle="collapse" data-target=".navbar-collapse" class="navbar-toggle"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span> </button> 
      </div> 
      <div class="collapse navbar-collapse"> 
       <ul class="nav navbar-nav navbar-right"> 
        <li class="blog"> <a href="/developers/blog">Blog</a> </li> 
        <li class="tutorial"> <a href="/developers/blog?filter=Tutorial">Tutorial</a> </li> 
        <li class="events"> <a href="/developers/events">Events</a> </li> 
        <li class="sdks-tools"> <a href="/developers/sdks-tools">SDKs &amp; Tools</a> </li> 
        <li class="dropdown"> <a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false"> Support <span class="caret"></span> </a> 
         <ul class="dropdown-menu nav navbar-nav"> 
          <li> <a href="https://www.ctl.io/api-docs/" target="_blank">API Docs</a> </li> 
          <li> <a href="https://www.ctl.io/knowledge-base/" target="_blank">Knowledge Base</a> </li> 
          <li> <a href="https://www.ctl.io/guides/" target="_blank">Getting Started</a> </li> 
         </ul> </li> 
       </ul> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div class="hero hero--blog-post"> 
   <div class="hero-background-image" data-bg="/developers/assets/images/blog/orchestrate-strangeroom1.png" style="background-image:url(/developers/assets/images/blog/orchestrate-strangeroom1.png);"></div> 
   <div class="green-gradient"></div> 
   <div class="hero-inner"> 
    <div class="container"> 
     <div class="row"> 
      <div class="col-sm-9 col-md-7 col-md-push-2" style="z-index:10;"> 
       <h1 class="text-white">Build User Authentication with Node.js, Express, Passport, and MongoDB</h1> 
       <header class="post-header"> 
        <h3 class="post-header__author text-white weight-regular"> Erik Arneson </h3> 
        <h5 class="post-header__author2 text-leaf"> February 26, 2014 </h5> 
        <div class="pull-right"> 
         <div class="post-share"> 
          <div>
           Share 
           <span class="toggle-icon">+</span>
          </div> 
          <div class="addthis_custom_sharing"></div> 
         </div> 
        </div> 
       </header> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div class="post--single container"> 
   <div class="row"> 
    <div class="col-md-8 col-md-push-2 post"> 
     <div class="post-content copy"> 
      <p>One of the trickiest aspects of building my first application was implementing User Authentication. The hours I spent with my head against the keyboard trying to will it to work, instead of gleefully logging in and out, will never be regained. So, let me help you navigate these tricky waters! In this series we are going to build a simple application in order to explore implementing user authentication off of MongoDB with a Node application running an Express server combined with Passport. We will be building local authentication, as well as authenticating through Twitter, Google, and Facebook. Each installment of this series I will show how to implement a new User Authentication Strategy, as Passport calls them, addressing each of our four methods mentioned. This first post covers setting up our application and the joys of locally authenticating users!</p> 
      <h2>Getting Started</h2> 
      <p>To start, let's go over the technologies we will be using:</p> 
      <ul> 
       <li>A <a href="https://nodejs.org/en/">Node.js</a> application</li> 
       <li>Running an <a href="http://expressjs.com/">Express</a> server</li> 
       <li>With <a href="http://passportjs.org/">Passport</a> for authentication</li> 
       <li>MongoDB on a <a href="https://www.ctl.io/">CenturyLink Cloud Compute server</a> for storing and retrieving user information</li> 
       <li><a href="http://getbootstrap.com/">Twitter Bootstrap</a> for making our application pretty</li> 
       <li><a href="http://handlebarsjs.com/">Handlebars</a> for templating needs</li> 
      </ul> 
      <p>In this post we will:</p> 
      <ul> 
       <li>Set up a virtual server running MongoDB</li> 
       <li>Build our basic application</li> 
       <li>Create our template views</li> 
       <li>Write routes for our Local functionality</li> 
       <li>Configure Passport for Local login and signup</li> 
       <li>Test our Local login and signup</li> 
       <li>Pat ourselves on the back and tell our friends how cool we are!</li> 
      </ul> 
      <h2>Deploy a New Virtual Server with MongoDB</h2> 
      <p>If you don’t have a CenturyLink Cloud account yet, head over to our website and <a href="/free-trial/">sign up for a free trial</a>. You’ll need it to access CenturyLink Cloud products.</p> 
      <p>Our first step is to deploy a new CenturyLink Cloud virtual server. Follow the steps below.</p> 
      <ol> 
       <li>Log into the CenturyLink Cloud control portal at <a href="https://control.ctl.io/">https://control.ctl.io/</a></li> 
       <li><p>On the left side menu, click <strong>Infrastructure</strong> and then click <strong>Servers</strong>.</p> <p><img src="https://www.ctl.io/developers/assets/images/blog/auth 1.png" alt="Auth1"></p> </li> 
       <li><p>On the left-hand side of the server panel, click on the region for the server we will provision.</p> </li> 
       <li>Click <strong>create</strong> and then <strong>server</strong>.</li> 
       <li>Complete the setup form for your new server. Be sure to fill out the fields for <strong>server name</strong> and <strong>admin/root password</strong>.</li> 
       <li>For <strong>operating system</strong>, select "CentOS 7 | 64-bit".</li> 
       <li>Click <strong>create server</strong>.</li> 
       <li><p>Your server provisioning request will enter the queue. You can watch the progress of your request on the screen. Your server is provisioned when the status of all tasks in the queue is complete.</p> <p><img src="/developers/assets/images/blog/auth 2.png" alt="CLC Auth"></p> </li> 
       <li><p>After your new server is provisioned, in the CenturyLink control portal, click <strong>Infrastructure</strong> on the left side menu, and then click <strong>Servers</strong>.</p> </li> 
       <li>Navigate to your new server and click on its name.</li> 
       <li>Click the <strong>more</strong> menu, and then click <strong>add public ip</strong>.</li> 
       <li>Check the box for <strong>SSH/SFTP (22)</strong>.</li> 
       <li>Click <strong>custom port...</strong> and then <strong>single port</strong>.</li> 
       <li><p>Type "27017" in the blank box to open up the MongoDB server port.</p> <p><img src="https://www.ctl.io/developers/assets/images/blog/auth 3.png" alt="Passport authentication strategy"></p> </li> 
       <li><p>Click <strong>add public ip address</strong>.</p> </li> 
      </ol> 
      <h2>Installing and Configuring MongoDB</h2> 
      <ol> 
       <li>Navigate to your server in the CenturyLink Cloud control panel as in the previous section. Your server's public IP address will be noted on the screen.</li> 
       <li><p>From a shell on your local machine, connect to your new server with the following command. Replace "YOUR.VPS.IP" with your server's public IP address.</p> <pre><code>ssh root@YOUR.VPS.IP
</code></pre></li> 
       <li><p>Install the MongoDB server software by running the following commands.</p> <pre><code>$ yum install -y mongodb mongodb-server
</code></pre></li> 
       <li><p>With your favorite text editor, open <strong>/etc/mongod.conf</strong>. Look for the line that begins "bind_ip" and comment it out. The top of your file should now look like this:</p> <pre><code>##
### Basic Defaults
##

# Comma separated list of ip addresses to listen on (all local ips by default)
#bind_ip = 127.0.0.1
</code></pre></li> 
       <li><p>Start the MongoDB service by running the following command.</p> <pre><code>$ service mongod start
</code></pre></li> 
      </ol> 
      <h2>Basic Application</h2> 
      <p>First up, we need our basic application. If you already have Node.js and npm set up on your computer, then by all means carry on! If you do not, drop by the <a href="https://nodejs.org/en/">Node.js</a> website to set yourself up and we will be waiting for you here. Now then, let's go ahead and establish our dependencies and install them. You will need to either build your package.json file or you may clone the code from the GitHub repository linked at the end of this post. In your package.json make sure you have at least the following:</p> 
      <pre><code class="lang-json">{
  "name": "userAuth",
  "main": "index.js",
  "dependencies": {
    "bcryptjs": "^0.7.12",
    "express": "^3.5.0",
    "express-handlebars": "^3.0.0",
    "mongodb": "^2.2.11",
    "passport": "^0.2.0",
    "passport-facebook": "^1.0.3",
    "passport-google": "^0.3.0",
    "passport-local": "^1.0.0",
    "passport-twitter": "^1.0.2",
    "q": "^1.0.1"
  }
}
</code></pre> 
      <p>After making sure you list the above dependencies in your package.json go ahead and run:</p> 
      <pre><code class="lang-bash">$ npm install
</code></pre> 
      <p>It is time to build our server now that we have all of our dependencies. (Note: not all of these dependencies will be used in this post. That is alright since we will need them in the future) Let's move over to our index.js file, which will hold our server, and bring in our necessary dependencies:</p> 
      <pre><code class="lang-javascript">//index.js/
var express = require('express'),
    exphbs = require('express-handlebars'),
    logger = require('morgan'),
    cookieParser = require('cookie-parser'),
    bodyParser = require('body-parser'),
    methodOverride = require('method-override'),
    session = require('express-session'),
    passport = require('passport'),
    LocalStrategy = require('passport-local'),
    TwitterStrategy = require('passport-twitter'),
    GoogleStrategy = require('passport-google'),
    FacebookStrategy = require('passport-facebook');

//We will be creating these two files shortly
// var config = require('./config.js'), //config file contains all tokens and other private info
//    funct = require('./functions.js'); //funct file contains our helper functions for our Passport and database work

var app = express();

//===============PASSPORT===============

//This section will contain our work with Passport

//===============EXPRESS================
// Configure Express
app.use(logger('combined'));
app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());
app.use(methodOverride('X-HTTP-Method-Override'));
app.use(session({secret: 'supernova', saveUninitialized: true, resave: true}));
app.use(passport.initialize());
app.use(passport.session());

// Session-persisted message middleware
app.use(function(req, res, next){
  var err = req.session.error,
      msg = req.session.notice,
      success = req.session.success;

  delete req.session.error;
  delete req.session.success;
  delete req.session.notice;

  if (err) res.locals.error = err;
  if (msg) res.locals.notice = msg;
  if (success) res.locals.success = success;

  next();
});

// Configure express to use handlebars templates
var hbs = exphbs.create({
    defaultLayout: 'main', //we will be creating this layout shortly
});
app.engine('handlebars', hbs.engine);
app.set('view engine', 'handlebars');

//===============ROUTES===============

//This section will hold our Routes

//===============PORT=================
var port = process.env.PORT || 5000; //select your port or let it pull from your .env file
app.listen(port);
console.log("listening on " + port + "!");
</code></pre> 
      <p>Now that we have built our server we can test it:</p> 
      <pre><code>    $ node index.js
</code></pre>
      <p>If our application is functioning properly we should see a message, part of which reads, "listening on port 5000!" or whichever port you indicated your application to run on. Go ahead and kill the server by pressing <strong>Control-C</strong>, it is time to add our templates so that we will have something pretty to look at!</p> 
      <p>If you have not cloned the repo, create a "views" folder in your project's directory. Within that folder we will have two files (home.handlebars and signin.handlebars) and one folder (layouts). The layouts folder will contain one file (main.handlebars) which is the default layout we chose when we configured our Express application. Our main.handlebars file will look like the following:</p> 
      <pre><code class="lang-html">&lt;!-- views/layouts/main.handlebars --&gt;
&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
&lt;head&gt;
  &lt;meta charset="utf-8"&gt;
  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;
  &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
  &lt;meta name="description" content="User Authentication"&gt;
  &lt;meta name="author" content=""&gt;

  &lt;title&gt;User Authentication&lt;/title&gt;

  &lt;!-- Latest compiled and minified CSS --&gt;
  &lt;link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css"&gt;

  &lt;/head&gt;

  &lt;body&gt;

    &lt;div class="container"&gt;

      &lt;nav class="navbar navbar-default" role="navigation"&gt;
      &lt;div class="container-fluid"&gt;

      &lt;!-- Brand and toggle get grouped for better mobile display --&gt;
      &lt;div class="navbar-header"&gt;
        &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1"&gt;
          &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
        &lt;/button&gt;
      &lt;/div&gt;

        &lt;!-- Collect the nav links, forms, and other content for toggling --&gt;
        &lt;div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1"&gt;
          &lt;ul class="nav navbar-nav"&gt;
            &lt;li&gt;
              {{#if user}}
                &lt;p class="navbar-text"&gt;
                  &lt;strong&gt;Hi,&lt;/strong&gt;
                  &lt;img src="{{user.avatar}}" width="20" height="20"&gt;
                  {{user.username}}
                &lt;/p&gt;
                &lt;/li&gt;
                &lt;/ul&gt;
                &lt;ul class="nav navbar-nav navbar-right"&gt;
                  &lt;li&gt;
                    &lt;a href="/logout"&gt;Log Out&lt;/a&gt;
                  &lt;/li&gt;
              {{else}}
                &lt;a href="/signin"&gt;Sign In&lt;/a&gt;
                &lt;/li&gt;
              {{/if}}
          &lt;/ul&gt;
        &lt;/div&gt;&lt;!-- /.navbar-collapse --&gt;
      &lt;/div&gt;&lt;!-- /.container-fluid --&gt;
    &lt;/nav&gt;

    {{#if error}}
      &lt;p class="alert alert-warning"&gt;{{error}}&lt;/p&gt;
    {{/if}}

    {{#if success}}
      &lt;p class="alert alert-success"&gt;{{success}}&lt;/p&gt;
    {{/if}}

    {{#if notice}}
      &lt;p class="alert alert-info"&gt;{{notice}}&lt;/p&gt;
    {{/if}}

    &lt;!--where our other templates will insert--&gt;
    {{{body}}}

    &lt;/div&gt; &lt;!-- /container --&gt;

    &lt;!-- Bootstrap core JavaScript
    ================================================== --&gt;
    &lt;!-- Placed at the end of the document so the pages load faster --&gt;
    &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"&gt;&lt;/script&gt;

    &lt;!-- Latest compiled and minified JavaScript --&gt;
  &lt;script src="//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre> 
      <p>Our home.handlebars file should look like the following for now:</p> 
      <pre><code class="lang-html">&lt;!-- views/home.handlebars --&gt;
{{#if user}}
  &lt;div class="jumbotron"&gt;
    &lt;h1&gt;MongoDB User Authentication&lt;/h1&gt;
    &lt;p&gt;Below is your profile information!&lt;/p&gt;
  &lt;/div&gt;
  &lt;div class="panel panel-default"&gt;
    &lt;div class="panel-heading"&gt;
      &lt;h3 class="panel-title"&gt;Profile Information&lt;/h3&gt;
    &lt;/div&gt;
    &lt;div class="panel-body"&gt;
      &lt;p&gt;Username: {{user.username}}&lt;/p&gt;
      &lt;p&gt;Avatar: &lt;img src="{{user.avatar}}"/&gt;&lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;

{{else}}
  &lt;div class="jumbotron"&gt;
    &lt;h1&gt;MongoDB User Authentication&lt;/h1&gt;
    &lt;p&gt;Sign in and view your profile!&lt;/p&gt;
    &lt;p&gt;
      &lt;a href="/signin" class="btn btn-primary btn-lg" role="button"&gt;
        &lt;span class="glyphicon glyphicon-user"&gt;&lt;/span&gt;
        Sign in!
      &lt;/a&gt;
    &lt;/p&gt;
  &lt;/div&gt;

{{/if}}
</code></pre> 
      <p>Finally, our signin.handlebars file should look like the following:</p> 
      <pre><code class="lang-html">&lt;!-- views/signin.handlebars --&gt;
&lt;div class="jumbotron"&gt;
  &lt;h1&gt;Sign in&lt;/h1&gt;
  &lt;p&gt;We're using passport.js to demonstrate user authentication. Please sign-in with your Local, Twitter, Google, or Facebook account to view your profile.&lt;/p&gt;
  &lt;p&gt;
    &lt;a data-toggle="collapse" href="#local" class="btn btn-warning btn-lg" role="button"&gt;&lt;span class="glyphicon glyphicon-user"&gt;&lt;/span&gt; Sign in Locally&lt;/a&gt;
    &lt;a href="/auth/twitter" class="btn btn-info btn-lg" role="button"&gt;&lt;span class="glyphicon glyphicon-user"&gt;&lt;/span&gt; Sign in with Twitter&lt;/a&gt;
    &lt;a href="/auth/google" class="btn btn-danger btn-lg" role="button"&gt;&lt;span class="glyphicon glyphicon-user"&gt;&lt;/span&gt; Sign in with Google&lt;/a&gt;
    &lt;a href="/auth/facebook" class="btn btn-primary btn-lg" role="button"&gt;&lt;span class="glyphicon glyphicon-user"&gt;&lt;/span&gt; Sign in with Facebook&lt;/a&gt;
  &lt;/p&gt;

  &lt;div id="local" class="collapse"&gt;
    &lt;a data-toggle="collapse" href="#local-sign-in" class="btn btn-default btn-md" role="button"&gt;I already have an account&lt;/a&gt;
    &lt;a data-toggle="collapse" href="#local-reg" class="btn btn-default btn-md" role="button"&gt;I need to make an account&lt;/a&gt;
  &lt;/div&gt;

  &lt;form id="local-sign-in" class="collapse" action="/login" method="post"&gt;
    &lt;div&gt;
        &lt;p&gt;&lt;/p&gt;
        &lt;label&gt;Username:&lt;/label&gt;
        &lt;input type="text" name="username"/&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;label&gt;Password:&lt;/label&gt;
        &lt;input type="password" name="password"/&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;input type="submit" class="btn btn-primary btn-sm" value="Log In"/&gt;
    &lt;/div&gt;
  &lt;/form&gt;

  &lt;form id="local-reg" class="collapse" action="/local-reg" method="post"&gt;
    &lt;div&gt;
        &lt;p&gt;&lt;/p&gt;
        &lt;label&gt;New Username:&lt;/label&gt;
        &lt;input type="text" name="username"/&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;label&gt;New Password:&lt;/label&gt;
        &lt;input type="password" name="password"/&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;input type="submit" class="btn btn-primary btn-sm" value="Register"/&gt;
    &lt;/div&gt;
  &lt;/form&gt;
&lt;/div&gt;
</code></pre> 
      <h2>Routes</h2> 
      <p>Now that we have our layouts in place, let's write some routes so that we can see them! In the routes section of our index.js file add the following code to get us up and running:</p> 
      <pre><code class="lang-javascript">//===============ROUTES=================
//displays our homepage
app.get('/', function(req, res){
  res.render('home', {user: req.user});
});

//displays our signup page
app.get('/signin', function(req, res){
  res.render('signin');
});

//sends the request through our local signup strategy, and if successful takes user to homepage, otherwise returns then to signin page
app.post('/local-reg', passport.authenticate('local-signup', {
  successRedirect: '/',
  failureRedirect: '/signin'
  })
);

//sends the request through our local login/signin strategy, and if successful takes user to homepage, otherwise returns then to signin page
app.post('/login', passport.authenticate('local-signin', {
  successRedirect: '/',
  failureRedirect: '/signin'
  })
);

//logs user out of site, deleting them from the session, and returns to homepage
app.get('/logout', function(req, res){
  var name = req.user.username;
  console.log("LOGGIN OUT " + req.user.username)
  req.logout();
  res.redirect('/');
  req.session.notice = "You have successfully been logged out " + name + "!";
});
</code></pre> 
      <p>Even though we have not set up our Passport Strategies yet, we can now run our application and view the homepage and sign in page from our browsers. We are well on our way!</p> 
      <h2>Passport</h2> 
      <p>Speaking of those Passport Strategies, let's take a moment to discuss how Passport works. According to the <a href="http://passportjs.org/docs">Passport documentation</a>, different authentication mechanisms are known as Strategies which can be installed and used modularly as desired. In this post we are using the Local Strategy. Toon Ketels does a good job of explaining the Passport authentication flow on his <a href="http://toon.io/understanding-passportjs-authentication-flow/">blog</a>. The important information to note is that when a user submits their credentials, the request will be passed to Passport's authenticate() middleware we have established, and invoke which ever Strategy we have configured for that request route. These credentials (req.body.username and req.body.password) are passed into our Strategy and subjected to verification. If verified, the user will be serialized into the session and logged in to the application, if not verified the Strategy will return an error and the authenticate()middleware redirects to our designated failure location. This process looks like the following:</p> 
      <p><img src="https://www.ctl.io/developers/assets/images/blog/auth 4.png" alt="Passport authentication strategy"></p> 
      <p>Now that we have an understanding of how Passport functions, let's build our Local Strategy! For our application, we will need to use two Local Strategies, one for registering new users (local-signup) and one for logging in already registered users (local-signin). We already have routes using each of these Strategies, and will just need to make sure to name our two Strategies to match their routes. Before we build our Strategies, we will need to build some helper functions for storing and retrieving users from MongoDB, as well as a creating a file to hold our various token information. We will start by uncommenting these lines in our index.js file:</p> 
      <pre><code class="lang-javascript">// index.js/

var config = require('./config.js'), //config file contains all tokens and other private info
    funct = require('./functions.js'); //funct file contains our helper functions for our Passport and database work
</code></pre> 
      <p>Next we'll create our config.js file which will hold our MongoDB configuration. Replace "YOUR.MONGODB.HOST" with the IP address of your virtual server.</p> 
      <pre><code class="lang-javascript">// config.js
// This file contains private configuration details.
// Do not add it to your Git repository.
module.exports = {
  "mongodbHost" : "YOUR.MONGODB.HOST"
};
</code></pre> 
      <p>With this information established we can create functions.js to hold our helper functions:</p> 
      <pre><code class="lang-javascript">var bcrypt = require('bcryptjs'),
    Q = require('q'),
    config = require('./config.js'); //config file contains all tokens and other private info

// MongoDB connection information
var mongodbUrl = 'mongodb://' + config.mongodbHost + ':27017/users';
var MongoClient = require('mongodb').MongoClient

//used in local-signup strategy
exports.localReg = function (username, password) {
  var deferred = Q.defer();

  MongoClient.connect(mongodbUrl, function (err, db) {
    var collection = db.collection('localUsers');

    //check if username is already assigned in our database
    collection.findOne({'username' : username})
      .then(function (result) {
        if (null != result) {
          console.log("USERNAME ALREADY EXISTS:", result.username);
          deferred.resolve(false); // username exists
        }
        else  {
          var hash = bcrypt.hashSync(password, 8);
          var user = {
            "username": username,
            "password": hash,
            "avatar": "http://placepuppy.it/images/homepage/Beagle_puppy_6_weeks.JPG"
          }

          console.log("CREATING USER:", username);

          collection.insert(user)
            .then(function () {
              db.close();
              deferred.resolve(user);
            });
        }
      });
  });

  return deferred.promise;
};


//check if user exists
    //if user exists check if passwords match (use bcrypt.compareSync(password, hash); // true where 'hash' is password in DB)
      //if password matches take into website
  //if user doesn't exist or password doesn't match tell them it failed
exports.localAuth = function (username, password) {
  var deferred = Q.defer();

  MongoClient.connect(mongodbUrl, function (err, db) {
    var collection = db.collection('localUsers');

    collection.findOne({'username' : username})
      .then(function (result) {
        if (null == result) {
          console.log("USERNAME NOT FOUND:", username);

          deferred.resolve(false);
        }
        else {
          var hash = result.password;

          console.log("FOUND USER: " + result.username);

          if (bcrypt.compareSync(password, hash)) {
            deferred.resolve(result);
          } else {
            console.log("AUTHENTICATION FAILED");
            deferred.resolve(false);
          }
        }

        db.close();
      });
  });

  return deferred.promise;
}
</code></pre> 
      <p>The localReg function will be used in our Local Strategy to register new users and save their information into our database. It works by constructing a user object, including encrypting the password for protection. The function then checks if the user already exists in the database. If the user already exists it will reject the request by returning false to avoid overwriting the existing user. If the user does not already exist, the user object we created will be stored using its username as the key. This user will then be returned in order to be passed back to the Strategy so that it may proceed with the Verification process.</p> 
      <p>The localAuth function will be used to check if the user attempting to log in matches with the one stored in our database. This function checks the database for a user matching the given username. If a match is found, the retrieved password is compared to the one provided. If the passwords do not match the request is rejected by returning false. If the passwords do match, the user will then be returned in order to be passed back to the Strategy so that it may proceed with the Verification process.</p> 
      <p>Now that we have our helper functions, let's build our two Local Strategies! In the Passport section of index.js let's add:</p> 
      <pre><code class="lang-javascript">// index.js/
//===============PASSPORT=================
// Use the LocalStrategy within Passport to login/"signin" users.
passport.use('local-signin', new LocalStrategy(
  {passReqToCallback : true}, //allows us to pass back the request to the callback
  function(req, username, password, done) {
    funct.localAuth(username, password)
    .then(function (user) {
      if (user) {
        console.log("LOGGED IN AS: " + user.username);
        req.session.success = 'You are successfully logged in ' + user.username + '!';
        done(null, user);
      }
      if (!user) {
        console.log("COULD NOT LOG IN");
        req.session.error = 'Could not log user in. Please try again.'; //inform user could not log them in
        done(null, user);
      }
    })
    .fail(function (err){
      console.log(err.body);
    });
  }
));
// Use the LocalStrategy within Passport to register/"signup" users.
passport.use('local-signup', new LocalStrategy(
  {passReqToCallback : true}, //allows us to pass back the request to the callback
  function(req, username, password, done) {
    funct.localReg(username, password)
    .then(function (user) {
      if (user) {
        console.log("REGISTERED: " + user.username);
        req.session.success = 'You are successfully registered and logged in ' + user.username + '!';
        done(null, user);
      }
      if (!user) {
        console.log("COULD NOT REGISTER");
        req.session.error = 'That username is already in use, please try a different one.'; //inform user could not log them in
        done(null, user);
      }
    })
    .fail(function (err){
      console.log(err.body);
    });
  }
));
</code></pre> 
      <p>The final pieces of our Passport section we need to add are the serialization and deserialization of users into and out of the session. Since our user objects are very simple we will be serializing and deserializing the entire user object, but as they become larger and more complex using only one aspect of the user object can be more efficient. For our needs inserting the following at the start of our Passport section will suffice:</p> 
      <pre><code class="lang-javascript">// index.js/
//===============PASSPORT=================
// Passport session setup.
passport.serializeUser(function(user, done) {
  console.log("serializing " + user.username);
  done(null, user);
});

passport.deserializeUser(function(obj, done) {
  console.log("deserializing " + obj);
  done(null, obj);
});
</code></pre> 
      <p>As a side note, if you have any sections of your app you need to protect so that only authorized users can access them, Passport makes the process pretty easy. Simply use the following function on your route for the protection section:</p> 
      <pre><code class="lang-javascript">// Simple route middleware to ensure user is authenticated.
function ensureAuthenticated(req, res, next) {
  if (req.isAuthenticated()) { return next(); }
  req.session.error = 'Please sign in!';
  res.redirect('/signin');
}
</code></pre> 
      <p>Now we have a working application with Local User Authentication! Let's test it out. If we start up our server and visit our specified port, we should be able to proceed to "Sign in" by clicking the big blue button or selecting the menu item. From here our "Sign in Locally" button should yield two further options to log in or create an account. Since we do not have any users in our database we will need to create an account. You can test your security by trying to log into a non-existent account. You should be denied. Once you create your account you should be logged in! If you head over to your MongoDB database you should also now have one user in "local-users."</p> 
      <p>Congratulations! You have Local Authorization!</p> 
      <p>Happy authorizing!</p> 
      <p><a href="https://github.com/pymander/userAuth">View the Code on GitHub</a></p> 
     </div> 
    </div> 
   </div> 
  </div>
  <footer class="post-footer"> 
   <div class="row"> 
    <div class="col-md-8 col-md-push-2"> 
     <div class="post-share"> 
      <div>
       Share 
       <span class="toggle-icon">+</span>
      </div> 
      <div class="addthis_custom_sharing"></div> 
     </div> 
    </div> 
   </div> 
  </footer> 
  <section class="cream related-blog-posts"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-md-8 col-md-push-2"> 
      <h5 class="related-blog-posts__title text-shuttle-gray">Related Posts</h5> 
      <div class="row"> 
       <a class="col-sm-6 related-blog-post" href="/developers/blog/post/self-hosting-git-repository-gogs" title="Self-Hosting Git Repositories with Gogs and CenturyLink Cloud"> <h4 class="related-blog-post__title">Self-Hosting Git Repositories with Gogs and CenturyLink Cloud</h4> <p class="related-blog-post__description">Change tracking and version control are essential tools for software development. In fact, they are...</p> </a> 
       <a class="col-sm-6 related-blog-post" href="/developers/blog/post/deploy-wordpress-janrain-social-login" title="Deploying WordPress with Janrain Social Login on CenturyLink Cloud"> <h4 class="related-blog-post__title">Deploying WordPress with Janrain Social Login on CenturyLink Cloud</h4> <p class="related-blog-post__description">Keeping track of hundreds of different passwords for hundreds of different websites is not only a pa...</p> </a> 
      </div> 
     </div> 
    </div> 
   </div> 
  </section> 
  <section class="blog-post-discussion"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-md-8 col-md-push-2"> 
      <!-- DISQUS START --> 
      <div id="disqus_thread"></div> 
      <script type="text/javascript">
            /* * * CONFIGURATION VARIABLES * * */
            var disqus_shortname = 'centurylinkcloud';
            
            /* * * DON'T EDIT BELOW THIS LINE * * */
            (function() {
                var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
                (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
            })();
        </script> 
      <noscript>
       Please enable JavaScript to view the 
       <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a>
      </noscript> 
      <!-- DISQUS END --> 
     </div> 
    </div> 
   </div> 
  </section> 
  <div class="container"> 
   <div class="row"> 
    <div class="col-sm-6 col-sm-offset-3"> 
     <div id="dev-center-signup" class="cta-block"> 
      <iframe src="//go.pardot.com/l/86222/2015-07-31/28g9f" height="auto" type="text/html" frameborder="0" allowtransparency="true" style="border: 0"></iframe> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div class="hero hero--footer"> 
   <div class="hero-inner text-center"> 
    <h2 class="text-white">Start your free CenturyLink Cloud trial today</h2> 
    <p class="lead text-white"><a class="text-leaf btn-circular text-white" href="https://www.ctl.io/?create_account=true" title="Get Started" target="_blank">Get Started</a><a></a></p> 
   </div> 
  </div> 
  <div class="footer"> 
   <h3 class="weight-regular">© 2017 CenturyLink. All Rights Reserved.</h3> 
  </div> 
  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script> 
  <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script> 
  <script src="//cdn.jsdelivr.net/placeholders/3.0.2/placeholders.min.js"></script> 
  <script src="//cdnjs.cloudflare.com/ajax/libs/parsley.js/2.3.4/parsley.min.js"></script> 
  <script src="/developers/assets/js/vendor.js"></script> 
  <script src="/developers/assets/js/main.js"></script> 
  <script src="/developers/assets/lib/masonry.pkgd.min.js"></script> 
  <script type="text/javascript">
      /* * * CONFIGURATION VARIABLES * * */
      var disqus_shortname = 'centurylinkcloud';
      
      /* * * DON'T EDIT BELOW THIS LINE * * */
      (function () {
          var s = document.createElement('script'); s.async = true;
          s.type = 'text/javascript';
          s.src = '//' + disqus_shortname + '.disqus.com/count.js';
          (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
          window.Stats.handleCommentCount();
      }());
  </script> 
  <!-- dynect:ok -->   
 </body>
</html>