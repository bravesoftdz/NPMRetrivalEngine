<!doctype html>
<html lang="en-US" prefix="og: http://ogp.me/ns#" itemscope itemtype="http://schema.org/Blog">
 <head> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="initial-scale=1"> 
  <title>
Understanding Quicksort, and taking advantage of JS's native implementation - AntJanus</title> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
  <meta name="viewport" content="width=device-width"> 
  <link rel="shortcut icon" href="https://antjanusblog-antjanus.netdna-ssl.com/favicon.ico"> 
  <link rel="pingback" href="https://antjanus.com/xmlrpc.php"> 
  <link href="//fonts.googleapis.com/css?family=Open+Sans:300italic,300,400italic,400,600italic,600,700italic,700,800italic,800" rel="stylesheet" type="text/css"> 
  <!-- schema.org --> 
  <meta itemprop="name" content="AntJanus"> 
  <meta itemprop="url" content="https://antjanus.com"> 
  <meta itemprop="creator accountablePerson" content=""> 
  <link rel="archives" title="May 2017" href="https://antjanus.com/blog/2017/05/"> 
  <link rel="archives" title="April 2017" href="https://antjanus.com/blog/2017/04/"> 
  <link rel="archives" title="March 2017" href="https://antjanus.com/blog/2017/03/"> 
  <link rel="archives" title="February 2017" href="https://antjanus.com/blog/2017/02/"> 
  <link rel="archives" title="January 2017" href="https://antjanus.com/blog/2017/01/"> 
  <link rel="archives" title="December 2016" href="https://antjanus.com/blog/2016/12/"> 
  <link rel="archives" title="October 2016" href="https://antjanus.com/blog/2016/10/"> 
  <link rel="archives" title="March 2016" href="https://antjanus.com/blog/2016/03/"> 
  <link rel="archives" title="December 2015" href="https://antjanus.com/blog/2015/12/"> 
  <link rel="archives" title="October 2015" href="https://antjanus.com/blog/2015/10/"> 
  <link rel="archives" title="September 2015" href="https://antjanus.com/blog/2015/09/"> 
  <link rel="archives" title="July 2015" href="https://antjanus.com/blog/2015/07/"> 
  <link rel="archives" title="June 2015" href="https://antjanus.com/blog/2015/06/"> 
  <link rel="archives" title="March 2015" href="https://antjanus.com/blog/2015/03/"> 
  <link rel="archives" title="February 2015" href="https://antjanus.com/blog/2015/02/"> 
  <link rel="archives" title="January 2015" href="https://antjanus.com/blog/2015/01/"> 
  <link rel="archives" title="December 2014" href="https://antjanus.com/blog/2014/12/"> 
  <link rel="archives" title="September 2014" href="https://antjanus.com/blog/2014/09/"> 
  <link rel="archives" title="August 2014" href="https://antjanus.com/blog/2014/08/"> 
  <link rel="archives" title="July 2014" href="https://antjanus.com/blog/2014/07/"> 
  <link rel="archives" title="June 2014" href="https://antjanus.com/blog/2014/06/"> 
  <link rel="archives" title="May 2014" href="https://antjanus.com/blog/2014/05/"> 
  <link rel="archives" title="April 2014" href="https://antjanus.com/blog/2014/04/"> 
  <link rel="archives" title="March 2014" href="https://antjanus.com/blog/2014/03/"> 
  <link rel="archives" title="February 2014" href="https://antjanus.com/blog/2014/02/"> 
  <link rel="archives" title="January 2014" href="https://antjanus.com/blog/2014/01/"> 
  <link rel="archives" title="December 2013" href="https://antjanus.com/blog/2013/12/"> 
  <link rel="archives" title="November 2013" href="https://antjanus.com/blog/2013/11/"> 
  <link rel="archives" title="October 2013" href="https://antjanus.com/blog/2013/10/"> 
  <link rel="archives" title="September 2013" href="https://antjanus.com/blog/2013/09/"> 
  <link rel="archives" title="August 2013" href="https://antjanus.com/blog/2013/08/"> 
  <link rel="archives" title="July 2013" href="https://antjanus.com/blog/2013/07/"> 
  <link rel="archives" title="June 2013" href="https://antjanus.com/blog/2013/06/"> 
  <link rel="archives" title="May 2013" href="https://antjanus.com/blog/2013/05/"> 
  <link rel="archives" title="April 2013" href="https://antjanus.com/blog/2013/04/"> 
  <link rel="archives" title="March 2013" href="https://antjanus.com/blog/2013/03/"> 
  <link rel="archives" title="February 2013" href="https://antjanus.com/blog/2013/02/"> 
  <link rel="archives" title="January 2013" href="https://antjanus.com/blog/2013/01/"> 
  <link rel="archives" title="December 2012" href="https://antjanus.com/blog/2012/12/"> 
  <link rel="archives" title="November 2012" href="https://antjanus.com/blog/2012/11/"> 
  <link rel="archives" title="October 2012" href="https://antjanus.com/blog/2012/10/"> 
  <link rel="archives" title="September 2012" href="https://antjanus.com/blog/2012/09/"> 
  <link rel="archives" title="August 2012" href="https://antjanus.com/blog/2012/08/"> 
  <link rel="archives" title="July 2012" href="https://antjanus.com/blog/2012/07/"> 
  <link rel="archives" title="June 2012" href="https://antjanus.com/blog/2012/06/"> 
  <link rel="archives" title="May 2012" href="https://antjanus.com/blog/2012/05/"> 
  <link rel="archives" title="March 2012" href="https://antjanus.com/blog/2012/03/"> 
  <link rel="archives" title="February 2012" href="https://antjanus.com/blog/2012/02/"> 
  <link rel="archives" title="January 2012" href="https://antjanus.com/blog/2012/01/"> 
  <!-- This site is optimized with the Yoast SEO plugin v5.3.3 - https://yoast.com/wordpress/plugins/seo/ --> 
  <link rel="canonical" href="https://antjanus.com/blog/web-development-tutorials/understanding-quicksort-js-native-implementation/"> 
  <meta property="og:locale" content="en_US"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="Understanding Quicksort, and taking advantage of JS's native implementation - AntJanus"> 
  <meta property="og:description" content="Algorithms are a pretty interesting aspect of coding. Of course, they’re not solely part of coding, as the definition states: Algorithm: a set of rules for solving a problem in a finite number of steps, as for finding the greatest common divisor. But as a developer, I see algorithms as they pertain to developing systems …"> 
  <meta property="og:url" content="https://antjanus.com/blog/web-development-tutorials/understanding-quicksort-js-native-implementation/"> 
  <meta property="og:site_name" content="AntJanus"> 
  <meta property="article:section" content="Back End"> 
  <meta property="article:published_time" content="2014-02-27T12:47:19+00:00"> 
  <meta property="article:modified_time" content="2014-08-21T14:05:10+00:00"> 
  <meta property="og:updated_time" content="2014-08-21T14:05:10+00:00"> 
  <meta property="og:image" content="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/color-quicksort.jpg"> 
  <meta property="og:image:secure_url" content="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/color-quicksort.jpg"> 
  <meta property="og:image:width" content="747"> 
  <meta property="og:image:height" content="527"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:description" content="Algorithms are a pretty interesting aspect of coding. Of course, they’re not solely part of coding, as the definition states: Algorithm: a set of rules for solving a problem in a finite number of steps, as for finding the greatest common divisor. But as a developer, I see algorithms as they pertain to developing systems […]"> 
  <meta name="twitter:title" content="Understanding Quicksort, and taking advantage of JS's native implementation - AntJanus"> 
  <meta name="twitter:site" content="@antjanus"> 
  <meta name="twitter:image" content="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/color-quicksort.jpg"> 
  <meta name="twitter:creator" content="@antjanus"> 
  <script type="application/ld+json">{"@context":"http:\/\/schema.org","@type":"WebSite","@id":"#website","url":"https:\/\/antjanus.com\/","name":"AntJanus","potentialAction":{"@type":"SearchAction","target":"https:\/\/antjanus.com\/?s={search_term_string}","query-input":"required name=search_term_string"}}</script> 
  <!-- / Yoast SEO plugin. --> 
  <link rel="dns-prefetch" href="//s0.wp.com"> 
  <link rel="dns-prefetch" href="//secure.gravatar.com"> 
  <link rel="dns-prefetch" href="//cdnjs.cloudflare.com"> 
  <link rel="dns-prefetch" href="//maxcdn.bootstrapcdn.com"> 
  <link rel="dns-prefetch" href="//s.w.org"> 
  <link rel="alternate" type="application/rss+xml" title="AntJanus » Feed" href="https://antjanus.com/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="AntJanus » Comments Feed" href="https://antjanus.com/comments/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="AntJanus » Understanding Quicksort, and taking advantage of JS’s native implementation Comments Feed" href="https://antjanus.com/blog/web-development-tutorials/understanding-quicksort-js-native-implementation/feed/"> 
  <!-- This site uses the Google Analytics by MonsterInsights plugin v6.2.2 - Using Analytics tracking - https://www.monsterinsights.com/ --> 
  <script type="text/javascript" data-cfasync="false">
		var disableStr = 'ga-disable-UA-25700130-6';

	/* Function to detect opted out users */
	function __gaTrackerIsOptedOut() {
		return document.cookie.indexOf(disableStr + '=true') > -1;
	}

	/* Disable tracking if the opt-out cookie exists. */
	if ( __gaTrackerIsOptedOut() ) {
		window[disableStr] = true;
	}

	/* Opt-out function */
	function __gaTrackerOptout() {
	  document.cookie = disableStr + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
	  window[disableStr] = true;
	}
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	})(window,document,'script','//www.google-analytics.com/analytics.js','__gaTracker');

	__gaTracker('create', 'UA-25700130-6', 'auto');
	__gaTracker('set', 'forceSSL', true);
	__gaTracker('require', 'linkid', 'linkid.js');
	__gaTracker('send','pageview');
</script> 
  <!-- / Google Analytics by MonsterInsights --> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/antjanus.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.8.1"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,56826,8203,55356,56819),0,0),c=j.toDataURL(),b===c&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55358,56794,8205,9794,65039),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55358,56794,8203,9794,65039),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="stylesheet" id="simple-payments-css" href="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/plugins/jetpack/modules/simple-payments/simple-payments.css?ver=4.8.1" type="text/css" media="all"> 
  <link rel="stylesheet" id="open-sans-css" href="https://fonts.googleapis.com/css?family=Open+Sans%3A300italic%2C400italic%2C600italic%2C300%2C400%2C600&amp;subset=latin%2Clatin-ext&amp;ver=4.8.1" type="text/css" media="all"> 
  <link rel="stylesheet" id="main-css" href="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/themes/antjanus-tseczka/style.css" type="text/css" media="all"> 
  <link rel="stylesheet" id="highlightCSS-css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/styles/default.min.css" type="text/css" media="all"> 
  <link rel="stylesheet" id="highlightTheme-css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/styles/dark.min.css" type="text/css" media="all"> 
  <link rel="stylesheet" id="fontawesome-css" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css" type="text/css" media="all"> 
  <link rel="stylesheet" id="jetpack_css-css" href="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/plugins/jetpack/css/jetpack.css?ver=5.2.1" type="text/css" media="all"> 
  <script type="text/javascript" src="https://antjanusblog-antjanus.netdna-ssl.com/wp-includes/js/jquery/jquery.js?ver=1.12.4"></script> 
  <script type="text/javascript" src="https://antjanusblog-antjanus.netdna-ssl.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var related_posts_js_options = {"post_heading":"h4"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/plugins/jetpack/modules/related-posts/related-posts.js?ver=20150408"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var monsterinsights_frontend = {"js_events_tracking":"true","is_debug_mode":"false","download_extensions":"doc,exe,js,pdf,ppt,tgz,zip,xls","inbound_paths":"\/out\/","home_url":"https:\/\/antjanus.com","track_download_as":"event","internal_label":"outbound-aff","hash_tracking":"false"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/plugins/google-analytics-for-wordpress/assets/js/frontend.min.js?ver=6.2.2"></script> 
  <link rel="https://api.w.org/" href="https://antjanus.com/wp-json/"> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://antjanus.com/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://antjanusblog-antjanus.netdna-ssl.com/wp-includes/wlwmanifest.xml"> 
  <meta name="generator" content="WordPress 4.8.1"> 
  <link rel="shortlink" href="https://wp.me/p1R0ec-Sy"> 
  <link rel="alternate" type="application/json+oembed" href="https://antjanus.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fantjanus.com%2Fblog%2Fweb-development-tutorials%2Funderstanding-quicksort-js-native-implementation%2F"> 
  <link rel="alternate" type="text/xml+oembed" href="https://antjanus.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fantjanus.com%2Fblog%2Fweb-development-tutorials%2Funderstanding-quicksort-js-native-implementation%2F&amp;format=xml"> 
  <link rel="dns-prefetch" href="//v0.wordpress.com"> 
  <link rel="dns-prefetch" href="//widgets.wp.com"> 
  <link rel="dns-prefetch" href="//s0.wp.com"> 
  <link rel="dns-prefetch" href="//0.gravatar.com"> 
  <link rel="dns-prefetch" href="//1.gravatar.com"> 
  <link rel="dns-prefetch" href="//2.gravatar.com"> 
  <!--[if lt IE 9]>
	<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
	<![endif]--> 
 </head> 
 <body class="post-template-default single single-post postid-3382 single-format-standard"> 
  <header class="nav-container nav-white nav-right nav-additions"> 
   <div class="nav"> 
    <a href="https://antjanus.com" class="nav-title "><img src="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/themes/antjanus-tseczka/images/logo.png"></a> 
    <ul id="menu-main-menu" class="menu">
     <li id="menu-item-3326" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3326"><a href="/">Home</a></li> 
     <li id="menu-item-3332" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-3332"><a title="My Bio" href="https://antjanus.com/about-aj/">About Me</a></li> 
     <li id="menu-item-3723" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3723"><a href="http://antjanus.com/blog/web-development-tutorials/front-end-development/comprehensive-beginners-guide-to-reactjs/">React Guide</a></li> 
     <li id="menu-item-3328" class="nav-deal menu-item menu-item-type-custom menu-item-object-custom menu-item-3328"><a href="http://antjanus.com/blog/tutorials/the-beginners-preemptive-guide-to-angularjs-2-alpha/">Angular 2 Beta Guide</a></li> 
     <li id="menu-item-3652" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3652"><a href="http://github.com/antjanus"><span class="fa fa-github"></span></a></li> 
     <li id="menu-item-3653" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3653"><a href="http://twitter.com/antjanus"><span class="fa fa-twitter"></span></a></li> 
     <li id="menu-item-3654" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3654"><a href="https://www.linkedin.com/in/antjanus"><span class="fa fa-linkedin-square"></span></a></li> 
     <li id="menu-item-3806" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-3806"><a href="http://www.twitch.tv/antjanus"><span class="fa fa-twitch"></span></a></li> 
    </ul> 
   </div> 
  </header> 
  <div class="featured"> 
   <img width="747" height="527" src="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/color-quicksort.jpg" class="attachment-large size-large wp-post-image" alt="" srcset="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/color-quicksort.jpg 747w, https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/color-quicksort-300x211.jpg 300w" sizes="(max-width: 747px) 100vw, 747px">
  </div> 
  <div class="container"> 
   <section id="main-content" class="row"> 
    <h1 class="entry-title item fn">Understanding Quicksort, and taking advantage of JS’s native implementation <small>8 minutes to read</small></h1> 
    <section id="content-meta" class="col-2"> 
     <ul class="list-meta author vcard" itemscope itemtype="http://schema.org/Person" itemprop="author"> 
      <li><strong>by: <span itemprop="name"> <a href="https://antjanus.com/blog/author/antjanus/" title="Posts by Antonin Januska" rel="author">Antonin Januska</a></span></strong></li> 
      <li>Date: <time itemprop="datePublished" class="updated" datetime="2014-02-27T12:47:19+00:00" pubdate>27.02.2014</time></li> 
      <li>Categories: <a href="https://antjanus.com/blog/category/web-development-tutorials/back-end-development/" rel="category tag">Back End</a>, <a href="https://antjanus.com/blog/category/web-development-tutorials/" rel="category tag">Development</a></li> 
     </ul> 
    </section> 
    <section id="content-posts" class="col-8 last"> 
     <article id="post-3382" class="post single post-3382 type-post status-publish format-standard has-post-thumbnail hentry category-back-end-development category-web-development-tutorials" itemscope itemtype="http://schema.org/Article"> 
      <div class="post-content entry-content"> 
       <p><img class="aligncenter size-full wp-image-3385" alt="color-quicksort" src="http://antjanus.com/wp-content/uploads/2014/02/color-quicksort.jpg" width="747" height="527" srcset="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/color-quicksort.jpg 747w, https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/color-quicksort-300x211.jpg 300w" sizes="(max-width: 747px) 100vw, 747px"> Algorithms are a pretty interesting aspect of coding. Of course, they’re not solely part of coding, as the definition states:</p> 
       <blockquote>
        <p>Algorithm: a set of rules for solving a problem in a finite number of steps, as for finding the greatest common divisor.</p>
       </blockquote> 
       <p>But as a developer, I see algorithms as they pertain to developing systems and applications. What’s interesting about this topic is that when one hears about it, it’s in usually two contexts:</p> 
       <ul> 
        <li>CS students that learn all about it and have no idea how to apply them.</li> 
        <li>Developers that implement algorithms and later learn they’re based on already known ones.</li> 
       </ul> 
       <p>I’m in the second category, creating weighted sets of instructions to fulfill some kind of requests. It’s fun especially when you actually understand how the common ones work, why they’re important, and how to implement them in your workflow.</p> 
       <h2>The outdated literature</h2> 
       <p>Explanations today usually involve long drawn out encyclopedic, academic papers or Java/C/Faux code. That type of stuff rarely ever clicks with me and I have a hard time connecting since I rarely ever use Java or C. Fake code isn’t helpful either because it’s mostly stripped C. Seriously. The applications of algorithms are also outdated because they mostly deal with OS, Kernels, or non-applications. It’s time to look at sorts, mergers, and other tasks in terms of web applications.</p> 
       <h2>Why Learn?</h2> 
       <p>In short, speed. The longer explanation is that sooner or later, you’ll naturally find a similar or less performant solution. The usual process goes like this:</p> 
       <ol> 
        <li>intricate use of several “foreach” loops and “while” loops</li> 
        <li>realization of performance problems</li> 
        <li>iteration through several solutions to find a better one</li> 
        <li>repeat several times</li> 
        <li>realizing that recursion will significantly simplify the problem</li> 
        <li>go back to step 1</li> 
       </ol> 
       <p>The end result will often either resemble an already existing solution or will resemble a less performant solution. Now, that doesn’t mean you should not experiment. Nor that you should SOLELY use existing common algorithms. They will often not satisfy the problem you’re trying to solve. However, learning how algorithms work, how you can apply them, and what to do with them will help you tackle BIGGER problems.</p> 
       <h2>The Big O</h2> 
       <p>You may have heard of the Big O, or Big Omicron. The Big O is basically a way to describe an algorithms “abstract” performance in operation as the operation’s inputs grow in size toward infinity. The Big O can be further graphed to give you a neat visual representation of how the algorithm will perform under different circumstances.</p> 
       <blockquote>
        <p>Big O does not take into effect any factors outside of its mathematical description.</p>
       </blockquote> 
       <p>So for instance, certain sorting algorithms can quickly sort an array if that array is under 20 keys but may perform terribly when that array grows into several thousand. Note that Big O does not take into effect any factors outside of its mathematical description. Meaning that anything computer-related is ignored, including the cost of comparisons, the cost of moving elements, accessing memory, or doing whatever else. Big O is used to calculate: best case scenario, worst case scenario, and expected. The latter two are usually used to describe an algorithm. Keep in mind that the Big O gives us the “minimum” at all times.</p> 
       <h2>Part I – Sorting</h2> 
       <p>Sorting algorithms are the basics of the basic. They’re, in my opinion, some of the easiest to grasp and most powerful. <a href="http://en.wikipedia.org/wiki/Sorting_algorithm">Wikipedia</a> has a neat list of them and their <a href="http://en.wikipedia.org/wiki/Exponential_time">Time Complexities</a>.<br> <a href="https://github.com/AntJanus/utility-belt/blob/master/quicksort.js" class="button button-primary">View on Github</a></p> 
       <h3>Quicksort first</h3> 
       <p>Let’s start with the simplest, quicksort. <strong>Big O</strong> The “Big O” time complexity for this one is <code>n log n</code> for average and <code>n^2</code> for worst. Let’s visualize it. There’s a neat <a href="https://www.desmos.com/calculator">calculator</a> that let’s you compare graphs against each other. Rewritten as a graphic function, we can compare these as <code>y&gt;x * log(x)</code> and <code>y&gt;x*x</code>. <a href="http://antjanus.com/wp-content/uploads/2014/02/graph-1.jpg"><img class="aligncenter size-large wp-image-3383" alt="graph-1" src="http://antjanus.com/wp-content/uploads/2014/02/graph-1-616x1024.jpg" width="616" height="1024" srcset="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/graph-1-616x1024.jpg 616w, https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/graph-1-180x300.jpg 180w, https://antjanusblog-antjanus.netdna-ssl.com/wp-content/uploads/2014/02/graph-1.jpg 628w" sizes="(max-width: 616px) 100vw, 616px"></a> The blue is the worst case and the red is the best. Basically, the “x” is the number of inputs (the horizontal line) and the “y” is “complexity”, or how much “abstract time” it takes for the algorithm to complete its function. The best case would be if the line stayed constant and VERY low, that’s a dream. <strong>What is it?</strong> Quicksort is a way of sorting information by splitting the result set recursively. We always pick a pivot (one of the list members) and compare the list against it (less than/greater than) splitting the list into two lists. Each of those goes through the same process until all we’re left with is a fully sorted list. The image all the way above explains the entire process much better than words. <strong>Javascript</strong> Let’s build this out in Javascript. I’ll be posting these on Github for my “utility belt”. First of all, Javascript’s native <code>.sort()</code> function uses Quicksort. Actually, MOST programming languages use Quicksort as their main sorting mechanism. If you check out <a href="http://jsperf.com/search?q=quicksort">jsperf</a>, you’ll find that many have tried to out-do JS’s implementation of quicksort. Just as a sidenote, there are many different code implementation of the algorithm. I personally subscribed to using this one:</p> 
       <pre class="prettyprint linenums"><code>  
function quicksort(arr)
{
//if array is empty
if (arr.length === 0) {
return [];
}
  var left = [];
  var right = [];
  var pivot = arr[0];

  //go through each element in array
  for (var i = 1; i &lt; arr.length; i++) {

      if (arr[i] &lt; pivot) {
         left.push(arr[i]);
      } else {
         right.push(arr[i]);
      }
  }

  return quicksort(left).concat(pivot, quicksort(right));
}</code></pre> 
       <p>At first, it all looks jumbled. Let’s go through it line by line:</p> 
       <pre class="prettyprint linenums"><code>  if (arr.length === 0) {
      return [];
  }

  var left = [];
  var right = [];
  var pivot = arr[0];</code></pre> 
       <p>This first part basically checks if we sent an empty array in, if we did, we’ll return an empty array back. This is crucial to the process. If we don’t respond with an empty array, the process will continue and we’ll be trying to sort nothing, which will result in an error. Next, we’re creating a “left” and a “right” array, if you look at quicksort explanation, you’ll find out that quicksort deals with splitting the results into a “left” and a “right”. The “left” will be smaller than the “pivot” and the “right” will be larger. The pivot is basically a number to use to split the arrays.</p> 
       <pre class="prettyprint linenums"><code>  //go through each element in array
  for (var i = 1; i &lt; arr.length; i++) {

      if (arr[i] &lt; pivot) {
         left.push(arr[i]);
      } else {
         right.push(arr[i]);
      }
  }</code></pre> 
       <p>This loop goes through the entire array (skipping the first element which is our pivot). We make a comparison, if the number for the array is less than the pivot, we send it to the left array. If it’s larger (or equal to) then we send it to the right. And that’s it. The next step is to quicksort the left, add the pivot, and quicksort the right. You’ll probably realize what’s happening. Every number lower than the pivot will be on the left. That array will go through its own quicksort, pushing the lower numbers further left. Once all of the sorting is done, we’ll get an empty array back, and thus go back up the chain until we get to the initial instance of quicksort which will glue a sorted left with the pivot and the sorted right.</p> 
       <h3>Custom quick sort?</h3> 
       <p>Of course, what if you want to sort the array, the other way? Simple, switch the <code>arr[i] &lt; pivot</code> with <code>arr[i] &gt; pivot</code>. But you could also create your own custom comparison. Which brings me back to Javascript’s native sort function. The native <code>.sort()</code> function allows custom comparisons instead of the regular sorting. Javascript uses <code>-1</code> and <code>1</code> markers to specify how a value should be sorted (similar to using <code>true</code> or <code>false</code>). We can rewrite our own function to allow custom sorting like so:</p> 
       <pre class="prettyprint linenums"><code>function quicksort(arr, customSort){
   //if array is empty

  if(!customSort) {
    customSort = function(a, b) {
      return a &lt; b;
    };
  }

  if (arr.length === 0) {
    return [];
  }

  var left = [];
  var right = [];
  var pivot = arr[0];

  //go through each element in array
  for (var i = 1; i &lt; arr.length; i++) {

    if (customSort(arr[i], pivot)) {
     left.push(arr[i]);
    } else {
      right.push(arr[i]);
     }
  }

  return quicksort(left).concat(pivot, quicksort(right));
};</code></pre> 
       <p>Easy. And now, you can use a closure to use a custom sort.</p> 
       <h3>Example custom sort</h3> 
       <p>You may ask, “Well, what will I custom sort anyways?”. Well, by default, javascript’s sort converts all integers into strings, meaning that your results will be alphabetical, not numerical. For instance, if you had an array [0, 2, 1, 10], it would return as [0,1,10,2] as opposed to what you’d expect (my custom quicksort doesn’t do that by the way). Here’s the solution:</p> 
       <pre class="prettyprint linenums"><code>[0,2,1,10].sort(function(a, b) { return a - b; });</code></pre> 
       <p>This function will by pass the stringifying of the integers. There was also another instance that I used custom sorts for and it was while building my <a href="https://github.com/AntJanus/popstar-cms">popstar cms</a> which required sorting of file names based on their enumeration. The files were named like so <code>1-title</code> and <code>2-title</code>. And suffer from the same issue of being alphabetically sorted. On top of that, you can’t just do a <code>a-b</code> since these are string to begin with. I had to use <code>parseInt</code> in order to get the first digits and sort that way:</p> 
       <pre class="prettyprint linenums"><code>['1-title', '10-something', '5-other', '15-else'].sort(function(a, b) { return parseInt(a, 10) - parseInt(b, 10); });</code></pre> 
       <p>ParseInt will automatically grab the first number in the string and discard the rest so that works very well for me ?</p> 
       <h3>V8 Javascript implementation</h3> 
       <p>You can check out how the V8 engine (powers Node and Chromium-based projects) implements <a href="https://github.com/v8/v8/blob/master/src/array.js#L853">arraySort</a> as the <code>sort</code> function. A few things to note:</p> 
       <ul> 
        <li>if the array length is 22 or less, insertion sort is used instead.</li> 
        <li>comparison between values is made using a <code>comparefn</code> at all times. Either the built-in one or one that you pass through.</li> 
        <li>there’s no “return” because the function works directly on the dot-delimited array.</li> 
        <li>my compare function uses a true/false method (true goes to the left, false goes to the right), V8 uses a “a-b”, meaning that a negative value goes right and a positive value goes left (if b is bigger than a, it goes right, and the other way around)</li> 
       </ul> 
       <div id="jp-relatedposts" class="jp-relatedposts"> 
        <h3 class="jp-relatedposts-headline"><em>Related</em></h3> 
       </div> 
      </div> 
      <ul class="list-meta entry-meta"> 
       <li>Tags: </li> 
      </ul> 
      <div id="comments"> 
       <div class="comments-template"> 
        <div id="disqus_thread"> 
         <div id="dsq-content"> 
          <ul id="dsq-comments"> 
           <li class="comment even thread-even depth-1" id="dsq-comment-18541"> 
            <div id="dsq-comment-header-18541" class="dsq-comment-header"> 
             <cite id="dsq-cite-18541"> <span id="dsq-author-user-18541">Junkie</span> </cite> 
            </div> 
            <div id="dsq-comment-body-18541" class="dsq-comment-body"> 
             <div id="dsq-comment-message-18541" class="dsq-comment-message">
              <p>This is not a TRUE quicksort, its a bucket sort implemented to do a quicksort. A true quicksort operates in place on the array</p> 
             </div> 
            </div> </li>
           <!-- #comment-## --> 
           <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-18640"> 
            <div id="dsq-comment-header-18640" class="dsq-comment-header"> 
             <cite id="dsq-cite-18640"> <span id="dsq-author-user-18640">McGovern</span> </cite> 
            </div> 
            <div id="dsq-comment-body-18640" class="dsq-comment-body"> 
             <div id="dsq-comment-message-18640" class="dsq-comment-message">
              <p>duplicate values in the array are not included in your output…</p> 
             </div> 
            </div> </li>
           <!-- #comment-## --> 
          </ul> 
         </div> 
        </div> 
        <script type="text/javascript">
var disqus_url = 'https://antjanus.com/blog/web-development-tutorials/understanding-quicksort-js-native-implementation/';
var disqus_identifier = '3382 http://antjanus.com/?p=3382';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'antjanus';
var disqus_title = "Understanding Quicksort, and taking advantage of JS&#8217;s native implementation";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
        this.callbacks.onReady.push(function () {

        // sync comments in the background so we don't block the page
        var script = document.createElement('script');
        script.async = true;
        script.src = '?cf_action=sync_comments&post_id=3382';

        var firstScript = document.getElementsByTagName('script')[0];
        firstScript.parentNode.insertBefore(script, firstScript);
    });
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script> 
       </div> 
      </div> 
     </article> 
     <div class="pagination"> 
     </div> 
    </section> 
   </section> 
  </div> 
  <footer class="footer"> 
   <div class="container"> 
    <div id="inner-footer" class="row"> 
     <div class="col-4" id="footer-intro"> 
     </div> 
     <div class="col-4 " id="footer-mid"> 
     </div> 
     <div class="col-4 last " id="footer-end"> 
     </div> 
    </div> 
   </div> 
  </footer> 
  <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'antjanus';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1 && nodes[i].parentNode.tagName == 'A') {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('data-dsqidentifier'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script');
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script> 
  <div style="display:none"> 
  </div> 
  <script type="text/javascript" src="https://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201737"></script> 
  <script type="text/javascript" src="https://secure.gravatar.com/js/gprofiles.js?ver=2017Sepaa"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/plugins/jetpack/modules/wpgroho.js?ver=4.8.1"></script> 
  <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.9.0/highlight.min.js"></script> 
  <script type="text/javascript" src="https://antjanusblog-antjanus.netdna-ssl.com/wp-content/themes/antjanus-tseczka/js/src/main.js"></script> 
  <script type="text/javascript" src="https://antjanusblog-antjanus.netdna-ssl.com/wp-includes/js/wp-embed.min.js?ver=4.8.1"></script>   
 </body>
</html>