<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
  <title>
ScalaJson - 2.6.x
</title> 
  <meta name="description" content=""> 
  <meta name="viewport" content="width=device-width,maximum-scale=1"> 
  <style type="text/css">
        @import "/assets/lib/prettify/ecd4a5d6c0cbee10b168f6aa000c64ea-prettify.css";
        </style> 
  <link href="//fonts.googleapis.com/css?family=PT+Serif:700italic" rel="stylesheet" type="text/css"> 
  <link href="//fonts.googleapis.com/css?family=Open+Sans+Condensed:700,300" rel="stylesheet" type="text/css"> 
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.css"> 
  <link rel="stylesheet" href="/assets/css/dd4ce1a7aaeaf0ecdf6ded2eb68c7c65-main.min.css"> 
  <link rel="shortcut icon" href="/assets/images/61c6258130a63b29b78806e97b1deb6c-favicon.ico"> 
  <meta name="globalsign-domain-verification" content="wISFsU3SjLaCmI4hF3fuBebFOs4shuuBnKV7fGALYz"> 
  <meta name="google-site-verification" content="lmdBkIxpA3f3R1ihq2dHTweu7htj64s3S3eGx9wY3S0"> 
  <!--[if lt IE 9]>
        <script src="/assets/lib/html5shiv/3044234175ac91f49b03ff999c592b85-html5shiv.min.js"></script>
        <![endif]--> 
  <script src="/assets/lib/jquery/0b6ecf17e30037994d3ffee51b525914-jquery.min.js"></script> 
  <script src="/assets/javascripts/4a0f5c30a0fb9d6571789c4fa164a136-main.js"></script> 
  <script type="application/ld+json">
        {
          "@context" : "http://schema.org",
          "@type" : "WebSite",
          "name" : "Play Framework",
          "alternateName" : "The High Velocity Web Framework for Java and Scala",
          "url" : "https://playframework.com"
        }
        </script> 
 </head> 
 <body class="documentation"> 
  <!--[if lt IE 7]>
            <p class="outdated">You are using an outdated browser. <a href="http://browsehappy.com/">Upgrade your browser today</a> or <a href="//www.google.com/chrome/browser/">install Google Chrome Frame</a> to better experience this site.</p>
        <![endif]--> 
  <header id="navigation"> 
   <div class="wrapper"> 
    <a href="/" id="logo">Lightbend</a> 
    <nav id="sections"> 
     <a href="/download">Download</a> 
     <a href="/documentation">Documentation</a> 
     <a href="/get-involved">Get Involved</a> 
     <a href="https://blog.playframework.com/">Blog</a> 
    </nav> 
    <nav id="social"> 
     <a href="//groups.google.com/forum/#!forum/play-framework"><span>Mailing list</span></a> 
     <a href="//twitter.com/playframework"><span>Twitter</span></a> 
     <a href="//plus.google.com/106233335814246022600"><span>Google+</span></a> 
     <a href="//www.facebook.com/pages/Play-Framework/50884087887"><span>Facebook</span></a> 
     <a href="//github.com/playframework/playframework"><span>Github</span></a> 
     <a href="//stackoverflow.com/questions/tagged/playframework"><span>Stackoverflow</span></a> 
    </nav> 
   </div> 
  </header> 
  <div id="getLogo"> 
   <div class="pan"> 
    <q>Is that what you're looking for?</q> 
    <figure> 
     <img src="/assets/images/logos/play_full_color.svg"> 
     <figcaption> 
      <a href="/assets/images/logos/play_full_color.svg">(svg)</a> 
      <a href="/assets/images/logos/play_full_color.png">(png)</a> 
     </figcaption> 
    </figure> 
    <figure> 
     <img src="/assets/images/logos/play_icon_full_color.svg"> 
     <figcaption> 
      <a href="/assets/images/logos/play_icon_full_color.svg">(svg)</a> 
      <a href="/assets/images/logos/play_icon_full_color.png">(png)</a> 
     </figcaption> 
    </figure> 
    <figure class="reverse"> 
     <img src="/assets/images/logos/play_reverse.svg"> 
     <figcaption> 
      <a href="/assets/images/logos/play_reverse.svg">(svg)</a> 
      <a href="/assets/images/logos/play_reverse.png">(png)</a> 
     </figcaption> 
    </figure> 
    <figure class="reverse"> 
     <img src="/assets/images/logos/play_icon_reverse.svg"> 
     <figcaption> 
      <a href="/assets/images/logos/play_icon_reverse.svg">(svg)</a> 
      <a href="/assets/images/logos/play_icon_reverse.png">(png)</a> 
     </figcaption> 
    </figure> 
   </div> 
  </div> 
  <header id="top"> 
   <div class="wrapper"> 
    <h1>Documentation</h1> 
   </div> 
  </header> 
  <section id="content"> 
   <button id="extend">extend</button> 
   <aside> 
    <nav id="toolbar"> 
     <h3>Browse versions</h3> 
     <div class="switch"> 
      <a href="/documentation/switch/2.6.x/ScalaJson">2.6.x</a> 
      <dl class="dropdown"> 
       <dt>
        ?
       </dt> 
       <dd> 
        <a href="/documentation/switch/2.6.x/ScalaJson">2.6.x</a> 
        <a href="/documentation/switch/2.6.5/ScalaJson">2.6.5</a> 
        <a href="/documentation/switch/2.6.3/ScalaJson">2.6.3</a> 
        <a href="/documentation/switch/2.6.1/ScalaJson">2.6.1</a> 
        <a href="/documentation/switch/2.6.0/ScalaJson">2.6.0</a> 
        <a href="/documentation/switch/2.5.x/ScalaJson">2.5.x</a> 
        <a href="/documentation/switch/2.4.x/ScalaJson">2.4.x</a> 
        <a href="/documentation/switch/2.3.x/ScalaJson">2.3.x</a> 
        <a href="/documentation/switch/2.2.x/ScalaJson">2.2.x</a> 
        <a href="/documentation/switch/2.1.x/ScalaJson">2.1.x</a> 
        <a href="/documentation/switch/2.0.x/ScalaJson">2.0.x</a> 
        <a href="/documentation/switch/1.4.x/ScalaJson">1.4.x</a> 
        <a href="/documentation/switch/1.3.x/ScalaJson">1.3.x</a> 
        <a href="/documentation/switch/1.2.x/ScalaJson">1.2.x</a> 
        <a href="/documentation/switch/1.1.1/ScalaJson">1.1.1</a> 
        <a href="/documentation/switch/1.0.3.2/ScalaJson">1.0.3.2</a> 
       </dd> 
      </dl> 
     </div> 
     <h3>Browse APIs</h3> 
     <div class="switch"> 
      <a href="/documentation/2.6.x/api/scala/index.html">Scala</a> 
      <a href="/documentation/2.6.x/api/java/index.html">Java</a> 
     </div> 
     <h3>Language</h3> 
     <div class="switch"> 
      <a href="/preferredLang/en?path=%2Fdocumentation%2F2.6.x%2FScalaJson">English</a> 
      <dl class="dropdown"> 
       <dt>
        ?
       </dt> 
       <dd> 
        <a href="/preferredLang/en?path=%2Fdocumentation%2F2.6.x%2FScalaJson">English</a> 
        <a href="/preferredLang/ja?path=%2Fdocumentation%2Fja%2Flatest%2FHome">???</a> 
        <a href="/preferredLang/tr?path=%2Fdocumentation%2Ftr%2Flatest%2FHome">Türkçe</a> 
       </dd> 
      </dl> 
     </div> 
    </nav> 
    <h3>Working with Json</h3> 
    <ul> 
     <li><a href="ScalaJson">JSON basics</a></li> 
     <li><a href="ScalaJsonHttp">JSON with HTTP</a></li> 
     <li><a href="ScalaJsonCombinators">JSON Reads/Writes/Format Combinators</a></li> 
     <li><a href="ScalaJsonAutomated">JSON automated mapping</a></li> 
     <li><a href="ScalaJsonTransformers">JSON Transformers</a></li> 
    </ul> 
    <h3>Main concepts</h3> 
    <ul> 
     <li><a href="ScalaHome">Section introduction</a></li> 
     <li><a href="ScalaConfig">Configuration API</a></li> 
     <li><a href="ScalaActions">HTTP programming</a></li> 
     <li><a href="ScalaAsync">Asynchronous HTTP programming</a></li> 
     <li><a href="ScalaTemplates">The Twirl template engine</a></li> 
     <li><a href="ScalaForms">Form submission and validation</a></li> 
     <li><a href="ScalaJson">Working with Json</a></li> 
     <li><a href="ScalaXmlRequests">Working with XML</a></li> 
     <li><a href="ScalaFileUpload">Handling file upload</a></li> 
     <li><a href="ScalaDatabase">Accessing an SQL database</a></li> 
     <li><a href="ScalaCache">Using the Cache</a></li> 
     <li><a href="ScalaWS">Calling REST APIs with Play WS</a></li> 
     <li><a href="ScalaAkka">Integrating with Akka</a></li> 
     <li><a href="ScalaI18N">Internationalization with Messages</a></li> 
     <li><a href="ScalaDependencyInjection">Dependency injection</a></li> 
     <li><a href="ScalaApplication">Application Settings</a></li> 
     <li><a href="ScalaTestingYourApplication">Testing your application</a></li> 
     <li><a href="ScalaLogging">Logging</a></li> 
    </ul> 
    <h3>Play for Scala developers</h3> 
    <ul> 
     <li><a href="ScalaHome">Main concepts</a></li> 
     <li><a href="ScalaAdvanced">Advanced topics</a></li> 
    </ul> 
    <h3>Working with Play</h3> 
    <ul> 
     <li><a href="JavaHome">Play for Java developers</a></li> 
     <li><a href="ScalaHome">Play for Scala developers</a></li> 
     <li><a href="Build">Common topics</a></li> 
    </ul> 
    <h3>Home</h3> 
    <ul> 
     <li><a href="Home">Home</a></li> 
     <li><a href="LatestRelease">Latest release</a></li> 
     <li><a href="Installing">Getting started</a></li> 
     <li><a href="JavaHome">Working with Play</a></li> 
     <li><a href="BuildingFromSource">Contributing to Play</a></li> 
     <li><a href="Philosophy">About Play</a></li> 
     <li><a href="Releases">Play releases</a></li> 
     <li><a href="ModuleDirectory">Module directory</a></li> 
    </ul> 
    <h3>Books</h3> 
    <p><a title="Play in Practice" href="http://shop.oreilly.com/product/0636920035718.do"><img width="175" src="/assets/images/docs/0acf34d79e681e1dc559ea01c38a5c87-play-in-practice.gif"></a></p> 
    <p><a title="Play Framework Essentials" href="http://www.lightbend.com/resources/e-book/play-framework-essentials"><img width="175" src="/assets/images/docs/6e18005ab31a05c8efc886c6a21574c9-play-framework-essentials-cover.jpg"></a></p> 
    <p><a title="Reactive Web Applications" href="http://info.lightbend.com/EBK-20XX-Reactive-Web-Applications-with-Play_L.html?lst=PPS&amp;lsd=EBK-20XX-Reactive-Web-Applications-with-Play"><img width="175" src="/assets/images/docs/3e9d9e48437d82120f06881e1d5e462b-Reactive-Web-App-with-Play-Cover.jpg"></a></p> 
    <p><a title="Play for Scala" href="http://lightbend.com/resources/e-book/play-for-scala"><img width="175" src="/assets/images/docs/dff5bdcf197b3ee6c8d0c429558c8c74-play-for-scala-cover.jpg"></a></p> 
    <p><a title="Play for Java" href="http://lightbend.com/resources/e-book/play-for-java"><img width="175" src="/assets/images/docs/fd8771fc65686fbb3acfe3f7c7f46d5d-play-for-java-cover.jpg"></a></p> 
    <p><a title="Learning Play! Framework 2" href="http://www.packtpub.com/learning-play-framework-2/book"><img width="175" src="/assets/images/docs/facdb2ff2a72e4d7507e0e5085cd4d54-learning-play-cover.jpg"></a></p> 
   </aside> 
   <article> 
    <form id="search"> 
     <input id="search-input" type="text" autocomplete="off" spellcheck="false" autocorrect="off" placeholder="Search 2.6.x documentation" autofocus> 
     <button type="submit">Search</button> 
    </form> 
    <ol id="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList"> 
     <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"> <a itemprop="item" href="Home"><span itemprop="name" title="Home">Home</span></a> 
      <meta itemprop="position" content="1"> </li> 
     <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"> <a itemprop="item" href="JavaHome"><span itemprop="name" title="Working with Play">Working with Play</span></a> 
      <meta itemprop="position" content="2"> </li> 
     <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"> <a itemprop="item" href="ScalaHome"><span itemprop="name" title="Play for Scala developers">Play for Scala developers</span></a> 
      <meta itemprop="position" content="3"> </li> 
     <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"> <a itemprop="item" href="ScalaHome"><span itemprop="name" title="Main concepts">Main concepts</span></a> 
      <meta itemprop="position" content="4"> </li> 
     <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem"> <a itemprop="item" href="ScalaJson"><span itemprop="name" title="Working with Json">Working with Json</span></a> 
      <meta itemprop="position" content="5"> </li> 
    </ol> 
    <h1 id="JSON-basics"><a class="section-marker" href="#JSON-basics">§</a><a href="#json-basics" name="json-basics">JSON basics</a></h1> 
    <p>Modern web applications often need to parse and generate data in the JSON (JavaScript Object Notation) format. Play supports this via its <a href="api/libs/json/">JSON library</a>.</p> 
    <p>JSON is a lightweight data-interchange format and looks like this:</p> 
    <pre class="prettyprint"><code class="language-json">{
  "name" : "Watership Down",
  "location" : {
    "lat" : 51.235685,
    "long" : -1.309197
  },
  "residents" : [ {
    "name" : "Fiver",
    "age" : 4,
    "role" : null
  }, {
    "name" : "Bigwig",
    "age" : 6,
    "role" : "Owsla"
  } ]
}
</code></pre> 
    <blockquote> 
     <p>To learn more about JSON, see <a href="http://json.org/">json.org</a>.</p> 
    </blockquote>
    <h2 id="The-Play-JSON-library"><a class="section-marker" href="#The-Play-JSON-library">§</a><a href="#the-play-json-library" name="the-play-json-library">The Play JSON library</a></h2> 
    <p>The <a href="api/libs/json/"><code>play.api.libs.json</code></a> package contains data structures for representing JSON data and utilities for converting between these data structures and other data representations. Some of the features of this package are:</p> 
    <ul> 
     <li><a href="ScalaJsonAutomated">Automatic conversion</a> to and from case classes with minimal boilerplate. If you want to get up and running quickly with minimal code, this is probably the place to start.</li> 
     <li><a href="ScalaJsonCombinators#Validation-with-Reads">Custom validation</a> while parsing.</li> 
     <li><a href="ScalaBodyParsers#The-default-body-parser">Automatic parsing</a> of JSON in request bodies, with auto-generated errors if content isnt parseable or incorrect Content-type headers are supplied.</li> 
     <li>Can be used outside of a Play application as a standalone library. Just add <code>libraryDependencies += "com.typesafe.play" %% "play-json" % playVersion</code> to your <code>build.sbt</code> file.</li> 
     <li>Highly customizable.</li> 
    </ul> 
    <p>The package provides the following types:</p>
    <h3 id="JsValue"><a class="section-marker" href="#JsValue">§</a><a href="api/libs/json/JsValue.html"><code>JsValue</code></a></h3> 
    <p>This is a trait representing any JSON value. The JSON library has a case class extending <code>JsValue</code> to represent each valid JSON type:</p> 
    <ul> 
     <li><a href="api/libs/json/JsString.html"><code>JsString</code></a></li> 
     <li><a href="api/libs/json/JsNumber.html"><code>JsNumber</code></a></li> 
     <li><a href="api/libs/json/JsBoolean.html"><code>JsBoolean</code></a></li> 
     <li><a href="api/libs/json/JsObject.html"><code>JsObject</code></a></li> 
     <li><a href="api/libs/json/JsArray.html"><code>JsArray</code></a></li> 
     <li><a href="api/libs/json/JsNull$.html"><code>JsNull</code></a></li> 
    </ul> 
    <p>Using the various <code>JsValue</code> types, you can construct a representation of any JSON structure.</p>
    <h3 id="Json"><a class="section-marker" href="#Json">§</a><a href="api/libs/json/Json$.html"><code>Json</code></a></h3> 
    <p>The <code>Json</code> object provides utilities, primarily for conversion to and from <code>JsValue</code> structures.</p>
    <h3 id="JsPath"><a class="section-marker" href="#JsPath">§</a><a href="api/libs/json/JsPath.html"><code>JsPath</code></a></h3> 
    <p>Represents a path into a <code>JsValue</code> structure, analogous to XPath for XML. This is used for traversing <code>JsValue</code> structures and in patterns for implicit converters.</p>
    <h2 id="Converting-to-a-JsValue"><a class="section-marker" href="#Converting-to-a-JsValue">§</a>Converting to a <code>JsValue</code></h2>
    <h3 id="Using-string-parsing"><a class="section-marker" href="#Using-string-parsing">§</a><a href="#using-string-parsing" name="using-string-parsing">Using string parsing</a></h3> 
    <pre class="prettyprint"><code class="language-scala">import play.api.libs.json._

val json: JsValue = Json.parse("""
  {
    "name" : "Watership Down",
    "location" : {
      "lat" : 51.235685,
      "long" : -1.309197
    },
    "residents" : [ {
      "name" : "Fiver",
      "age" : 4,
      "role" : null
    }, {
      "name" : "Bigwig",
      "age" : 6,
      "role" : "Owsla"
    } ]
  }
  """)</code></pre>
    <h3 id="Using-class-construction"><a class="section-marker" href="#Using-class-construction">§</a><a href="#using-class-construction" name="using-class-construction">Using class construction</a></h3> 
    <pre class="prettyprint"><code class="language-scala">import play.api.libs.json._

val json: JsValue = JsObject(Seq(
  "name" -&gt; JsString("Watership Down"),
  "location" -&gt; JsObject(Seq("lat" -&gt; JsNumber(51.235685), "long" -&gt; JsNumber(-1.309197))),
  "residents" -&gt; JsArray(IndexedSeq(
    JsObject(Seq(
      "name" -&gt; JsString("Fiver"),
      "age" -&gt; JsNumber(4),
      "role" -&gt; JsNull
    )),
    JsObject(Seq(
      "name" -&gt; JsString("Bigwig"),
      "age" -&gt; JsNumber(6),
      "role" -&gt; JsString("Owsla")
    ))
  ))
))</code></pre> 
    <p><code>Json.obj</code> and <code>Json.arr</code> can simplify construction a bit. Note that most values dont need to be explicitly wrapped by JsValue classes, the factory methods use implicit conversion (more on this below).</p> 
    <pre class="prettyprint"><code class="language-scala">import play.api.libs.json.{ JsNull, Json, JsString, JsValue }

val json: JsValue = Json.obj(
  "name" -&gt; "Watership Down",
  "location" -&gt; Json.obj("lat" -&gt; 51.235685, "long" -&gt; -1.309197),
  "residents" -&gt; Json.arr(
    Json.obj(
      "name" -&gt; "Fiver",
      "age" -&gt; 4,
      "role" -&gt; JsNull
    ),
    Json.obj(
      "name" -&gt; "Bigwig",
      "age" -&gt; 6,
      "role" -&gt; "Owsla"
    )
  )
)</code></pre>
    <h3 id="Using-Writes-converters"><a class="section-marker" href="#Using-Writes-converters">§</a><a href="#using-writes-converters" name="using-writes-converters">Using Writes converters</a></h3> 
    <p>Scala to <code>JsValue</code> conversion is performed by the utility method <code>Json.toJson[T](T)(implicit writes: Writes[T])</code>. This functionality depends on a converter of type <a href="api/libs/json/Writes.html"><code>Writes[T]</code></a> which can convert a <code>T</code> to a <code>JsValue</code>.</p> 
    <p>The Play JSON API provides implicit <code>Writes</code> for most basic types, such as <code>Int</code>, <code>Double</code>, <code>String</code>, and <code>Boolean</code>. It also supports <code>Writes</code> for collections of any type <code>T</code> that a <code>Writes[T]</code> exists.</p> 
    <pre class="prettyprint"><code class="language-scala">import play.api.libs.json._

// basic types
val jsonString = Json.toJson("Fiver")
val jsonNumber = Json.toJson(4)
val jsonBoolean = Json.toJson(false)

// collections of basic types
val jsonArrayOfInts = Json.toJson(Seq(1, 2, 3, 4))
val jsonArrayOfStrings = Json.toJson(List("Fiver", "Bigwig"))
</code></pre> 
    <p>To convert your own models to <code>JsValue</code>s, you must define implicit <code>Writes</code> converters and provide them in scope.</p> 
    <pre class="prettyprint"><code class="language-scala">case class Location(lat: Double, long: Double)
case class Resident(name: String, age: Int, role: Option[String])
case class Place(name: String, location: Location, residents: Seq[Resident])</code></pre> 
    <pre class="prettyprint"><code class="language-scala">import play.api.libs.json._

implicit val locationWrites = new Writes[Location] {
  def writes(location: Location) = Json.obj(
    "lat" -&gt; location.lat,
    "long" -&gt; location.long
  )
}

implicit val residentWrites = new Writes[Resident] {
  def writes(resident: Resident) = Json.obj(
    "name" -&gt; resident.name,
    "age" -&gt; resident.age,
    "role" -&gt; resident.role
  )
}

implicit val placeWrites = new Writes[Place] {
  def writes(place: Place) = Json.obj(
    "name" -&gt; place.name,
    "location" -&gt; place.location,
    "residents" -&gt; place.residents
  )
}

val place = Place(
  "Watership Down",
  Location(51.235685, -1.309197),
  Seq(
    Resident("Fiver", 4, None),
    Resident("Bigwig", 6, Some("Owsla"))
  )
)

val json = Json.toJson(place)</code></pre> 
    <p>Alternatively, you can define your <code>Writes</code> using the combinator pattern:</p> 
    <blockquote> 
     <p>Note: The combinator pattern is covered in detail in <a href="ScalaJsonCombinators">JSON Reads/Writes/Formats Combinators</a>.</p> 
    </blockquote> 
    <pre class="prettyprint"><code class="language-scala">import play.api.libs.json._
import play.api.libs.functional.syntax._

implicit val locationWrites: Writes[Location] = (
  (JsPath \ "lat").write[Double] and
  (JsPath \ "long").write[Double]
)(unlift(Location.unapply))

implicit val residentWrites: Writes[Resident] = (
  (JsPath \ "name").write[String] and
  (JsPath \ "age").write[Int] and
  (JsPath \ "role").writeNullable[String]
)(unlift(Resident.unapply))

implicit val placeWrites: Writes[Place] = (
  (JsPath \ "name").write[String] and
  (JsPath \ "location").write[Location] and
  (JsPath \ "residents").write[Seq[Resident]]
)(unlift(Place.unapply))</code></pre>
    <h2 id="Traversing-a-JsValue-structure"><a class="section-marker" href="#Traversing-a-JsValue-structure">§</a><a href="#traversing-a-jsvalue-structure" name="traversing-a-jsvalue-structure">Traversing a JsValue structure</a></h2> 
    <p>You can traverse a <code>JsValue</code> structure and extract specific values. The syntax and functionality is similar to Scala XML processing.</p> 
    <blockquote> 
     <p>Note: The following examples are applied to the JsValue structure created in previous examples.</p> 
    </blockquote>
    <h3 id="Simple-path-\"><a class="section-marker" href="#Simple-path-\">§</a>Simple path <code>\</code></h3> 
    <p>Applying the <code>\</code> operator to a <code>JsValue</code> will return the property corresponding to the field argument in a <code>JsObject</code>, or the item at that index in a <code>JsArray</code></p> 
    <pre class="prettyprint"><code class="language-scala">val lat = (json \ "location" \ "lat").get
// returns JsNumber(51.235685)
val bigwig = (json \ "residents" \ 1).get
// returns {"name":"Bigwig","age":6,"role":"Owsla"}
</code></pre> 
    <p>The <code>\</code> operator returns a <code>JsLookupResult</code>, which is either <code>JsDefined</code> or <code>JsUndefined</code>. You can chain multiple <code>\</code> operators, and the result will be <code>JsUndefined</code> if any intermediate value cannot be found. Calling <code>get</code> on a <code>JsLookupResult</code> attempts to get the value if it is defined and throws an exception if it is not.</p> 
    <p>You can also use the Direct lookup <code>apply</code> method (below) to get a field in an object or index in an array. Like <code>get</code>, this method will throw an exception if the value does not exist.</p>
    <h3 id="Recursive-path-\\"><a class="section-marker" href="#Recursive-path-\\">§</a>Recursive path <code>\\</code></h3> 
    <p>Applying the <code>\\</code> operator will do a lookup for the field in the current object and all descendants.</p> 
    <pre class="prettyprint"><code class="language-scala">val names = json \\ "name"
// returns Seq(JsString("Watership Down"), JsString("Fiver"), JsString("Bigwig"))</code></pre>
    <h3 id="Direct-lookup"><a class="section-marker" href="#Direct-lookup">§</a><a href="#direct-lookup" name="direct-lookup">Direct lookup</a></h3> 
    <p>You can retrieve a value in a <code>JsArray</code> or <code>JsObject</code> using an <code>.apply</code> operator, which is identical to the Simple path <code>\</code> operator except it returns the value directly (rather than wrapping it in a <code>JsLookupResult</code>) and throws an exception if the index or key is not found:</p> 
    <pre class="prettyprint"><code class="language-scala">val name = json("name")
// returns JsString("Watership Down")

val bigwig2 = json("residents")(1)
// returns {"name":"Bigwig","age":6,"role":"Owsla"}

// (json("residents")(3)
// throws an IndexOutOfBoundsException

// json("bogus")
// throws a NoSuchElementException</code></pre> 
    <p>This is useful if you are writing quick-and-dirty code and are accessing some JSON values you <em>know</em> to exist, for example in one-off scripts or in the REPL.</p>
    <h2 id="Converting-from-a-JsValue"><a class="section-marker" href="#Converting-from-a-JsValue">§</a><a href="#converting-from-a-jsvalue" name="converting-from-a-jsvalue">Converting from a JsValue</a></h2>
    <h3 id="Using-String-utilities"><a class="section-marker" href="#Using-String-utilities">§</a><a href="#using-string-utilities" name="using-string-utilities">Using String utilities</a></h3> 
    <p>Minified:</p> 
    <pre class="prettyprint"><code class="language-scala">val minifiedString: String = Json.stringify(json)</code></pre> 
    <pre class="prettyprint"><code class="language-json">{"name":"Watership Down","location":{"lat":51.235685,"long":-1.309197},"residents":[{"name":"Fiver","age":4,"role":null},{"name":"Bigwig","age":6,"role":"Owsla"}]}
</code></pre> 
    <p>Readable:</p> 
    <pre class="prettyprint"><code class="language-scala">val readableString: String = Json.prettyPrint(json)</code></pre> 
    <pre class="prettyprint"><code class="language-json">{
  "name" : "Watership Down",
  "location" : {
    "lat" : 51.235685,
    "long" : -1.309197
  },
  "residents" : [ {
    "name" : "Fiver",
    "age" : 4,
    "role" : null
  }, {
    "name" : "Bigwig",
    "age" : 6,
    "role" : "Owsla"
  } ]
}
</code></pre>
    <h3 id="Using-JsValue.as/asOpt"><a class="section-marker" href="#Using-JsValue.as/asOpt">§</a>Using JsValue.as/asOpt</h3> 
    <p>The simplest way to convert a <code>JsValue</code> to another type is using <code>JsValue.as[T](implicit fjs: Reads[T]): T</code>. This requires an implicit converter of type <a href="api/libs/json/Reads.html"><code>Reads[T]</code></a> to convert a <code>JsValue</code> to <code>T</code> (the inverse of <code>Writes[T]</code>). As with <code>Writes</code>, the JSON API provides <code>Reads</code> for basic types.</p> 
    <pre class="prettyprint"><code class="language-scala">val name = (json \ "name").as[String]
// "Watership Down"

val names = (json \\ "name").map(_.as[String])
// Seq("Watership Down", "Fiver", "Bigwig")</code></pre> 
    <p>The <code>as</code> method will throw a <code>JsResultException</code> if the path is not found or the conversion is not possible. A safer method is <code>JsValue.asOpt[T](implicit fjs: Reads[T]): Option[T]</code>.</p> 
    <pre class="prettyprint"><code class="language-scala">val nameOption = (json \ "name").asOpt[String]
// Some("Watership Down")

val bogusOption = (json \ "bogus").asOpt[String]
// None</code></pre> 
    <p>Although the <code>asOpt</code> method is safer, any error information is lost.</p>
    <h3 id="Using-validation"><a class="section-marker" href="#Using-validation">§</a><a href="#using-validation" name="using-validation">Using validation</a></h3> 
    <p>The preferred way to convert from a <code>JsValue</code> to another type is by using its <code>validate</code> method (which takes an argument of type <code>Reads</code>). This performs both validation and conversion, returning a type of <a href="api/libs/json/JsResult.html"><code>JsResult</code></a>. <code>JsResult</code> is implemented by two classes:</p> 
    <ul> 
     <li><a href="api/libs/json/JsSuccess.html"><code>JsSuccess</code></a>: Represents a successful validation/conversion and wraps the result.</li> 
     <li><a href="api/libs/json/JsError.html"><code>JsError</code></a>: Represents unsuccessful validation/conversion and contains a list of validation errors.</li> 
    </ul> 
    <p>You can apply various patterns for handling a validation result:</p> 
    <pre class="prettyprint"><code class="language-scala">val json = { ... }

val nameResult: JsResult[String] = (json \ "name").validate[String]

// Pattern matching
nameResult match {
  case s: JsSuccess[String] =&gt; println("Name: " + s.get)
  case e: JsError =&gt; println("Errors: " + JsError.toJson(e).toString())
}

// Fallback value
val nameOrFallback = nameResult.getOrElse("Undefined")

// map
val nameUpperResult: JsResult[String] = nameResult.map(_.toUpperCase())

// fold
val nameOption: Option[String] = nameResult.fold(
  invalid = {
    fieldErrors =&gt;
      fieldErrors.foreach(x =&gt; {
        println("field: " + x._1 + ", errors: " + x._2)
      })
      None
  },
  valid = {
    name =&gt; Some(name)
  }
)</code></pre>
    <h3 id="JsValue-to-a-model"><a class="section-marker" href="#JsValue-to-a-model">§</a><a href="#jsvalue-to-a-model" name="jsvalue-to-a-model">JsValue to a model</a></h3> 
    <p>To convert from JsValue to a model, you must define implicit <code>Reads[T]</code> where <code>T</code> is the type of your model.</p> 
    <blockquote> 
     <p>Note: The pattern used to implement <code>Reads</code> and custom validation are covered in detail in <a href="ScalaJsonCombinators">JSON Reads/Writes/Formats Combinators</a>.</p> 
    </blockquote> 
    <pre class="prettyprint"><code class="language-scala">case class Location(lat: Double, long: Double)
case class Resident(name: String, age: Int, role: Option[String])
case class Place(name: String, location: Location, residents: Seq[Resident])</code></pre> 
    <pre class="prettyprint"><code class="language-scala">import play.api.libs.json._
import play.api.libs.functional.syntax._

implicit val locationReads: Reads[Location] = (
  (JsPath \ "lat").read[Double] and
  (JsPath \ "long").read[Double]
)(Location.apply _)

implicit val residentReads: Reads[Resident] = (
  (JsPath \ "name").read[String] and
  (JsPath \ "age").read[Int] and
  (JsPath \ "role").readNullable[String]
)(Resident.apply _)

implicit val placeReads: Reads[Place] = (
  (JsPath \ "name").read[String] and
  (JsPath \ "location").read[Location] and
  (JsPath \ "residents").read[Seq[Resident]]
)(Place.apply _)

val json = { ... }

val placeResult: JsResult[Place] = json.validate[Place]
// JsSuccess(Place(...),)

val residentResult: JsResult[Resident] = (json \ "residents")(1).validate[Resident]
// JsSuccess(Resident(Bigwig,6,Some(Owsla)),)</code></pre> 
    <blockquote>
     <p><strong>Next: </strong><a href="ScalaJsonHttp">JSON with HTTP</a></p>
    </blockquote> 
    <hr> 
    <p> Found an error in this documentation? The source code for this page can be found <a href="https://github.com/playframework/playframework/edit/2.6.x/documentation/manual/working/scalaGuide/main/json/ScalaJson.md">here</a>. After reading the <a href="/documentation/latest/Documentation">documentation guidelines</a>, please feel free to contribute a pull request. </p> 
   </article> 
   <hr class="clear"> 
   <script type="text/javascript">
            // On start, check if flex mod is enabled
            if (localStorage && localStorage['flex'] == "true" ) document.body.className += " flex"
        </script> 
   <script type="text/javascript" src="https://cdn.jsdelivr.net/docsearch.js/1/docsearch.min.js"></script> 
   <script type="text/javascript"> docsearch({
    apiKey: 'a0b34e68c804cf96e76adcb02d47159b',
    indexName: 'playframework',
    inputSelector: '#search-input',
    algoliaOptions: {
        'facetFilters': [
            
              "version: 2.6.x",
            
            "tags: en"
        ]
    }
});
</script> 
  </section> 
  <footer> 
   <div id="support"> 
    <article class="community"> 
     <h3>Community support</h3> 
     <ul> 
      <li><a href="//groups.google.com/forum/#!forum/play-framework">Mailing list</a></li> 
      <li><a href="//stackoverflow.com/questions/tagged/playframework">Stackoverflow</a></li> 
     </ul> 
    </article> 
    <article class="professional"> 
     <h3>Professional support</h3> 
     <ul> 
      <li><a href="//www.lightbend.com/services/expert-support">Lightbend Subscription</a></li> 
      <li><a href="//www.lightbend.com/services/training">Training</a></li> 
      <li><a href="//www.lightbend.com/services/consulting">Consulting</a></li> 
     </ul> 
    </article> 
   </div> 
   <div class="wrapper"> 
    <div> 
     <h3>Play Framework</h3> 
     <ul> 
      <li><a href="/download">Download</a></li> 
      <li><a href="/documentation/latest/Tutorials">Tutorials</a></li> 
      <li><a href="/documentation">Documentation</a></li> 
     </ul> 
    </div> 
    <div> 
     <h3>Community links</h3> 
     <ul> 
      <li><a href="//www.eventbrite.com/directory/?q=play+framework&amp;loc=Worldwide">Events <em>via Eventbrite</em></a></li> 
      <li><a href="http://www.indeed.com/jobs?q=%22play+framework%22&amp;l=">Jobs <em>via Indeed</em></a></li> 
      <li><a href="http://www.scoop.it/playframework">Blogs <em>via Scoop.it</em></a></li> 
     </ul> 
    </div> 
    <div> 
     <h3>Code &amp; contribution</h3> 
     <ul> 
      <li><a href="/code">Code &amp; contributors</a></li> 
      <li><a href="//github.com/playframework/playframework/issues">Bug tracker <em>GitHub</em></a></li> 
      <li><a href="/get-involved">Get involved</a></li> 
     </ul> 
    </div> 
    <div> 
     <h3>Social networks</h3> 
     <ul> 
      <li><a href="//twitter.com/playframework"><span>Twitter</span></a></li> 
      <li><a href="//plus.google.com/106233335814246022600"><span>Google+</span></a></li> 
      <li><a href="//www.facebook.com/pages/Play-Framework/50884087887"><span>Facebook</span></a></li> 
     </ul> 
    </div> 
   </div> 
   <div class="credits"> 
    <a href="/" class="logo"><img src="/assets/images/logos/play_reverse.svg"></a> 
    <a href="//lightbend.com" class="partner"><img src="/assets/images/logos/lightbend-reverse.svg"></a> 
    <a href="http://zengularity.com" class="partner"><img src="/assets/images/logos/zengularity.png"></a> 
    <p> Play Framework is released under the Apache 2 License </p> 
   </div> 
  </footer> 
  <a href="http://www.reactivemanifesto.org/" id="reactive_ribbon"> <img style="border: 0; position: fixed; right: 0; top:0; z-index: 9000" src="//d379ifj7s9wntv.cloudfront.net/reactivemanifesto/images/ribbons/we-are-reactive-black-right.png"> </a> 
  <script type="text/javascript">
        (function() {
          var didInit = false;
          function initMunchkin() {
            if(didInit === false) {
              didInit = true;
              Munchkin.init('558-NCX-702');
            }
          }
          var s = document.createElement('script');
          s.type = 'text/javascript';
          s.async = true;
          s.src = '//munchkin.marketo.net/munchkin.js';
          s.onreadystatechange = function() {
            if (this.readyState == 'complete' || this.readyState == 'loaded') {
              initMunchkin();
            }
          };
          s.onload = initMunchkin;
          document.getElementsByTagName('head')[0].appendChild(s);
        })();
        </script>   
  <script type="text/javascript" charset="utf-8" src="/assets/lib/prettify/d435ff18c832044c3ddf7a0cf826eb72-prettify.js"></script> 
  <script type="text/javascript" charset="utf-8" src="/assets/lib/prettify/d3bd091d7b84099d91e889bc7c0770cb-lang-scala.js"></script> 
  <script type="text/javascript">
$(function(){
window.prettyPrint && prettyPrint()
});
</script> 
  <script type="text/javascript" charset="utf-8" src="/assets/lib/clipboard.js/55db0ff82a3b6b247844ae0d07d85fc6-clipboard.min.js"></script> 
  <script type="text/javascript">
(function(){
    var pre = document.getElementsByClassName('prettyprint');
    for (var i = 0; i < pre.length; i++) {
        var button = document.createElement('button');
        button.className = 'copy-button';

        pre[i].appendChild(button);
    }

    // Run Clipboard
    var copyCode = new Clipboard('.copy-button', {
        target: function(trigger) {
            return trigger.previousElementSibling;
        }
    });

    // On success:
    copyCode.on('success', function(event) {
        event.clearSelection();
        event.trigger.textContent = ' Success';
        window.setTimeout(function() {
            event.trigger.textContent = '';
        }, 2000);
    });

    // On error (Safari):
    // - Change the  "Press Ctrl+C to copy"
    // - Swap it to "Copy" in 2s.
    copyCode.on('error', function(event) {
        event.trigger.textContent = 'Press "Ctrl + C" to copy';
        window.setTimeout(function() {
            event.trigger.textContent = '';
        }, 5000);
    });

})();
</script> 
 </body>
</html>