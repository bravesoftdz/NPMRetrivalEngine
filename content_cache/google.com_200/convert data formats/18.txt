<!doctype html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
 <!--<![endif]-->
 <head> 
  <meta charset="utf-8"> 
  <!-- Skona --> 
  <meta http-equiv="x-ua-compatible" content="ie=edge"> 
  <title>Snowflake Documentation</title> 
  <meta name="description" content=""> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <link rel="apple-touch-icon" sizes="180x180" href="../_static/apple-touch-icon.png"> 
  <link rel="icon" type="image/png" href="../_static/favicon-32x32.png" sizes="32x32"> 
  <link rel="icon" type="image/png" href="../_static/favicon-16x16.png" sizes="16x16"> 
  <link rel="manifest" href="../_static/manifest.json"> 
  <meta name="theme-color" content="#ffffff"> 
  <script src="../_static/js/vendor/modernizr-2.8.3.min.js"></script> 
  <meta name="snowflake-release" content="2.12.0"> 
  <!-- Built with Sphinx (http://sphinx-doc.org) using a theme based on the Read the Docs (http://readthedocs.org) theme (https://github.com/snide/sphinx_rtd_theme). --> 
  <!-- License for Read the Docs theme for Sphinx: https://docs.snowflake.net/manuals/sphinx_rtd_theme_license.html --> 
  <title>JavaScript UDFs — Snowflake Documentation</title> 
  <link rel="icon" type="image/png" href="../_static/favicon.ico"> 
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700,400italic,700italic|Roboto+Slab:400,700|Inconsolata:400,700&amp;subset=latin,cyrillic" rel="stylesheet" type="text/css"> 
  <!-- theme.css
    
    
      <link rel="stylesheet" href="../_static/css/theme.css" type="text/css" />
    
    --> 
  <!-- theme_overrides.css
    
      <link rel="stylesheet" href="../_static/theme_overrides.css" type="text/css" />
     --> 
  <link rel="index" title="Index" href="../genindex.html"> 
  <link rel="search" title="Search" href="../search.html"> 
  <link rel="top" title="Snowflake Documentation" href="../index.html"> 
  <link rel="up" title="User-Defined Functions" href="user-defined-functions.html"> 
  <link rel="next" title="Information Schema" href="info-schema.html"> 
  <link rel="prev" title="Overview of User-Defined Functions" href="udf-overview.html"> 
  <!-- Google Analytics Code --> 
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-48785629-1', 'auto');
    ga('send', 'pageview');
  </script> 
  <!-- Marketo Code --> 
  <script type="text/javascript">
  document.write(unescape("%3Cscript src='//munchkin.marketo.net/munchkin.js' type='text/javascript'%3E%3C/script%3E"));
  </script> 
  <script>Munchkin.init('252-RFO-227');</script> 
  <style>
  .wy-side-nav-search img.sf{
    display:block;margin:none;height:100;width:100;background-color:transparent;padding:0px;border-radius:0
    }
  </style> 
  <!-- Fancybox --> 
  <!-- jQuery library --> 
  <script type="text/javascript" src="http://code.jquery.com/jquery-latest.min.js"></script> 
  <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script> 
  <script type="text/javascript" src="../_static/js/sftoggle.js"></script> 
  <!-- fancyBox CSS --> 
  <link rel="stylesheet" href="../_static/fancybox/jquery.fancybox.min.css" type="text/css" media="screen"> 
  <link rel="stylesheet" href="../_static/css/style.css"> 
  <!-- RTD theme --> 
  <script src="../_static/js/modernizr.min.js"></script> 
 </head> 
 <body> 
  <!-- skona --> 
  <div id="page" class="site"> 
   <header class="site-header">
    <!-- disable shrinking header: <header class="site-header expanded-header"> --> 
    <a href="../index.html"><img src="../_static/img/snowflake-documentation.png" alt="Snowflake, Inc." class="header-logo"></a> 
    <i class="hamburger icon-hamburger"></i> 
    <div class="topright-links"> 
     <ul class="topright-link-nav"> 
      <li><a href="https://www.snowflake.net/engineering-blog" target="_blank">Blog</a></li> 
      <li><a href="https://support.snowflake.net/" target="_blank">Support</a></li> 
     </ul> 
    </div> 
    <form role="search" method="get" id="searchform" class="searchform header-search" action="/"> 
     <input type="text" value="" name="s" id="s"> 
    </form> 
    <div role="search"> 
     <form id="rtd-search-form" class="wy-form" action="../search.html" method="get"> 
      <input type="text" name="q" iaf-autocomplete="" autocomplete="off"> 
      <!-- Skona original input <input type="text" name="q" placeholder="Search the docs..." iaf-autocomplete="" autocomplete="off"> --> 
      <input type="hidden" name="check_keywords" value="yes"> 
      <input type="hidden" name="area" value="default"> 
      <i class="icon-search"></i> 
      <!-- Skona original magnifying glass <button type="submit" id="searchsubmit"><i class="icon-search"></i></button> --> 
      <button type="submit" id="searchsubmit">Search</button> 
     </form> 
    </div> 
   </header> 
   <div class="wy-grid-for-nav"> 
    <div id="content" class="site-content"> 
     <div class="site-flex-container"> 
      <div class="left-sidebar"> 
       <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation"> 
        <ul class="current"> 
         <li class="toctree-l1"><a class="reference internal" href="../release-notes.html">Release Notes</a></li> 
         <li class="toctree-l1"><a class="reference internal" href="../user-guide-getting-started.html">Getting Started</a></li> 
         <li class="toctree-l1"><a class="reference internal" href="../other-resources.html">Tutorials, Videos &amp; Other Resources</a></li> 
         <li class="toctree-l1"><a class="reference internal" href="../user-guide-intro.html">Introduction to Snowflake</a></li> 
         <li class="toctree-l1"><a class="reference internal" href="../user-guide-connecting.html">Connecting to Snowflake</a></li> 
         <li class="toctree-l1"><a class="reference internal" href="../user-guide-admin.html">Managing Snowflake</a></li> 
         <li class="toctree-l1"><a class="reference internal" href="../user-guide.html">Using Snowflake</a></li> 
         <li class="toctree-l1 current"><a class="reference internal" href="../sql-reference.html">General Reference</a>
          <ul class="current"> 
           <li class="toctree-l2"><a class="reference internal" href="intro-summary-sql.html">Summary of Supported SQL</a></li> 
           <li class="toctree-l2"><a class="reference internal" href="parameters.html">Parameters</a></li> 
           <li class="toctree-l2"><a class="reference internal" href="data-types.html">Data Types</a></li> 
           <li class="toctree-l2"><a class="reference internal" href="sql-format-models.html">SQL Format Models</a></li> 
           <li class="toctree-l2"><a class="reference internal" href="name-resolution.html">Object Name Resolution</a></li> 
           <li class="toctree-l2"><a class="reference internal" href="constraints.html">Constraints</a></li> 
           <li class="toctree-l2"><a class="reference internal" href="queries.html">Query Syntax</a></li> 
           <li class="toctree-l2"><a class="reference internal" href="session-variables.html">SQL Variables</a></li> 
           <li class="toctree-l2"><a class="reference internal" href="transactions.html">Transactions</a></li> 
           <li class="toctree-l2"><a class="reference internal" href="functions-table.html">Table Literals and Functions</a></li> 
           <li class="toctree-l2 current"><a class="reference internal" href="user-defined-functions.html">User-Defined Functions</a>
            <ul class="current"> 
             <li class="toctree-l3"><a class="reference internal" href="udf-overview.html">Overview of User-Defined Functions</a></li> 
             <li class="toctree-l3 current"><a class="current reference internal" href="#">JavaScript UDFs</a>
              <ul> 
               <li class="toctree-l4"><a class="reference internal" href="#javascript-data-types">JavaScript Data Types</a>
                <ul> 
                 <li class="toctree-l5"><a class="reference internal" href="#integers">Integers</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#doubles">Doubles</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#strings">Strings</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#binary-values">Binary Values</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#dates">Dates</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#variant-objects-and-arrays">Variant, Objects, and Arrays</a></li> 
                </ul> </li> 
               <li class="toctree-l4"><a class="reference internal" href="#javascript-arguments-and-returned-values">JavaScript Arguments and Returned Values</a>
                <ul> 
                 <li class="toctree-l5"><a class="reference internal" href="#null-and-undefined-values">Null and Undefined Values</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#type-conversion-within-javascript">Type Conversion within JavaScript</a></li> 
                </ul> </li> 
               <li class="toctree-l4"><a class="reference internal" href="#javascript-errors">JavaScript Errors</a></li> 
               <li class="toctree-l4"><a class="reference internal" href="#javascript-udf-limitations">JavaScript UDF Limitations</a>
                <ul> 
                 <li class="toctree-l5"><a class="reference internal" href="#memory">Memory</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#time">Time</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#stack-depth">Stack Depth</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#global-state">Global State</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#libraries">Libraries</a></li> 
                 <li class="toctree-l5"><a class="reference internal" href="#returned-variant-size-and-depth">Returned Variant Size and Depth</a></li> 
                </ul> </li> 
               <li class="toctree-l4"><a class="reference internal" href="#javascript-udf-security">JavaScript UDF Security</a></li> 
              </ul> </li> 
            </ul> </li> 
           <li class="toctree-l2"><a class="reference internal" href="info-schema.html">Information Schema</a></li> 
          </ul> </li> 
         <li class="toctree-l1"><a class="reference internal" href="../sql-reference-commands.html">SQL Command Reference</a></li> 
         <li class="toctree-l1"><a class="reference internal" href="../sql-reference-functions.html">Function Reference</a></li> 
         <li class="toctree-l1"><a class="reference internal" href="../sql-reference-appendices.html">Appendices</a></li> 
        </ul> 
       </div> 
      </div>
      <!-- end left sidebar --> 
      <!-- /skona --> 
      <!-- skona --> 
      <div class="main-content"> 
       <!-- START BREADCRUMBS --> 
       <!--
            
            <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
            <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
            <a href="../index.html">Snowflake</a>
            </nav>
        --> 
       <div role="navigation" aria-label="breadcrumbs navigation"> 
        <!-- Previous/Next links --> 
        <div class="navlinks"> 
         <a href="info-schema.html" class="pn-prev float-right" title="Information Schema">Next</a> 
         <a href="udf-overview.html" class="pn-next float-left" title="Overview of User-Defined Functions">Previous</a> | 
        </div> 
        <ul class="wy-breadcrumbs"> 
         <div class="wy-breadcrumbs-inner"> 
          <li><a href="../index.html">Docs</a> »</li> 
          <li><a href="../sql-reference.html">General Reference</a> »</li> 
          <li><a href="user-defined-functions.html">User-Defined Functions</a> »</li> 
          <li>JavaScript UDFs</li> 
         </div> 
        </ul> 
       </div> 
       <!-- END BREADCRUMBS --> 
       <!-- skona --> 
       <div class="main-content-inner"> 
        <!-- START DYNAMIC CONTENT --> 
        <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap"> 
         <div class="wy-nav-content"> 
          <div class="rst-content"> 
           <div role="main" class="document"> 
            <div class="section" id="javascript-udfs"> 
             <h1>JavaScript UDFs<a class="headerlink" href="#javascript-udfs" title="Permalink to this headline">¶</a></h1> 
             <div class="sidebar"> 
              <p class="first sidebar-title">Related Topics</p> 
              <ul class="last simple"> 
               <li><a class="reference internal" href="udf-overview.html"><span class="doc">Overview of User-Defined Functions</span></a></li> 
               <li><a class="reference internal" href="ddl-udf.html"><span class="doc">User-Defined Function DDL</span></a></li> 
              </ul> 
             </div> 
             <p>This topic covers concepts that are specific to JavaScript UDFs.</p> 
             <p><strong>In this Topic:</strong></p> 
             <div class="contents local topic" id="contents"> 
              <ul class="simple"> 
               <li><a class="reference internal" href="#javascript-data-types" id="id1">JavaScript Data Types</a>
                <ul> 
                 <li><a class="reference internal" href="#integers" id="id2">Integers</a></li> 
                 <li><a class="reference internal" href="#doubles" id="id3">Doubles</a></li> 
                 <li><a class="reference internal" href="#strings" id="id4">Strings</a></li> 
                 <li><a class="reference internal" href="#binary-values" id="id5">Binary Values</a></li> 
                 <li><a class="reference internal" href="#dates" id="id6">Dates</a></li> 
                 <li><a class="reference internal" href="#variant-objects-and-arrays" id="id7">Variant, Objects, and Arrays</a></li> 
                </ul> </li> 
               <li><a class="reference internal" href="#javascript-arguments-and-returned-values" id="id8">JavaScript Arguments and Returned Values</a>
                <ul> 
                 <li><a class="reference internal" href="#null-and-undefined-values" id="id9">Null and Undefined Values</a></li> 
                 <li><a class="reference internal" href="#type-conversion-within-javascript" id="id10">Type Conversion within JavaScript</a></li> 
                </ul> </li> 
               <li><a class="reference internal" href="#javascript-errors" id="id11">JavaScript Errors</a></li> 
               <li><a class="reference internal" href="#javascript-udf-limitations" id="id12">JavaScript UDF Limitations</a>
                <ul> 
                 <li><a class="reference internal" href="#memory" id="id13">Memory</a></li> 
                 <li><a class="reference internal" href="#time" id="id14">Time</a></li> 
                 <li><a class="reference internal" href="#stack-depth" id="id15">Stack Depth</a></li> 
                 <li><a class="reference internal" href="#global-state" id="id16">Global State</a></li> 
                 <li><a class="reference internal" href="#libraries" id="id17">Libraries</a></li> 
                 <li><a class="reference internal" href="#returned-variant-size-and-depth" id="id18">Returned Variant Size and Depth</a></li> 
                </ul> </li> 
               <li><a class="reference internal" href="#javascript-udf-security" id="id19">JavaScript UDF Security</a></li> 
              </ul> 
             </div> 
             <div class="admonition note"> 
              <p class="first admonition-title">Note</p> 
              <p>All the <a class="reference internal" href="sql/create-function.html"><span class="doc">CREATE FUNCTION</span></a> examples in this topic illustrate the syntax for creating UDFs using SnowSQL or the Worksheet (in the Snowflake web interface). If these examples are executed in <code class="docutils literal"><span class="pre">sfsql</span></code>, you must include a forward slash character (<code class="docutils literal"><span class="pre">/</span></code>) on a new line after the CREATE FUNCTION command to terminate the command.</p> 
              <p class="last">In SnowSQL and the Worksheet, a forward slash is <span class="emph">not</span> required and will return an error if specified.</p> 
             </div> 
             <div class="section" id="javascript-data-types"> 
              <h2>JavaScript Data Types<a class="headerlink" href="#javascript-data-types" title="Permalink to this headline">¶</a></h2> 
              <p>Snowflake SQL and JavaScript functions provide similar, but different data types. Objects within Snowflake and JavaScript are transferred using the following mappings.</p> 
              <div class="section" id="integers"> 
               <h3>Integers<a class="headerlink" href="#integers" title="Permalink to this headline">¶</a></h3> 
               <p>JavaScript has no integer type; all numbers are represented as doubles. JavaScript UDFs do not accept or return integer values except through type conversion (i.e. you can pass an integer to a JavaScript UDF that accepts a double).</p> 
              </div> 
              <div class="section" id="doubles"> 
               <h3>Doubles<a class="headerlink" href="#doubles" title="Permalink to this headline">¶</a></h3> 
               <p>Both Snowflake and JavaScript support double values. These values are transferred as-is.</p> 
              </div> 
              <div class="section" id="strings"> 
               <h3>Strings<a class="headerlink" href="#strings" title="Permalink to this headline">¶</a></h3> 
               <p>Both Snowflake and JavaScript support string values. These values are transferred as-is.</p> 
              </div> 
              <div class="section" id="binary-values"> 
               <h3>Binary Values<a class="headerlink" href="#binary-values" title="Permalink to this headline">¶</a></h3> 
               <p>All binary values are converted into JavaScript <code class="docutils literal"><span class="pre">Uint8Array</span></code> objects. These typed arrays can be accessed in the same way as regular JavaScript arrays, but they are more efficient and support additional methods.</p> 
               <p>If a JavaScript function returns a <code class="docutils literal"><span class="pre">Uint8Array</span></code> object, it is converted into a Snowflake binary value.</p> 
              </div> 
              <div class="section" id="dates"> 
               <h3>Dates<a class="headerlink" href="#dates" title="Permalink to this headline">¶</a></h3> 
               <p>All timestamp and date types are converted into JavaScript <code class="docutils literal"><span class="pre">Date()</span></code> objects. The JavaScript Date type is equivalent to TIMESTAMP_LTZ(3). Consider the following for JavaScript UDFs that accept a date or time:</p> 
               <ul class="simple"> 
                <li>All precision beyond milliseconds is lost.</li> 
                <li>JavaScript <code class="docutils literal"><span class="pre">Date</span></code> generated from SQL TIMESTAMP_NTZ no longer act as “wallclock” time; they are influenced by daylight saving. This is similar to behavior when converting TIMESTAMP_NTZ to TIMESTAMP_LTZ.</li> 
                <li>JavaScript <code class="docutils literal"><span class="pre">Date</span></code> generated from SQL TIMESTAMP_TZ lose time zone information, but represent the same moment in time as the input (similar to when converting TIMESTAMP_TZ to TIMESTAMP_LTZ).</li> 
                <li>SQL DATE is converted to JavaScript <code class="docutils literal"><span class="pre">Date</span></code> representing midnight of the current day in the local time zone.</li> 
               </ul> 
               <p>Additionally, consider the following for JavaScript functions that return DATE and TIMESTAMP types:</p> 
               <ul class="simple"> 
                <li>JavaScript <code class="docutils literal"><span class="pre">Date</span></code> objects are converted to the function’s result data type, adhering to the same conversion semantics as casts from SQL TIMESTAMP_LTZ(3) to the return data type.</li> 
                <li>JavaScript <code class="docutils literal"><span class="pre">Date</span></code> objects nested inside VARIANT objects are always of type TIMESTAMP_LTZ(3).</li> 
               </ul> 
              </div> 
              <div class="section" id="variant-objects-and-arrays"> 
               <h3>Variant, Objects, and Arrays<a class="headerlink" href="#variant-objects-and-arrays" title="Permalink to this headline">¶</a></h3> 
               <p>JavaScript UDFs allow easy, intuitive manipulation of variant and JSON data. Variant objects passed to a UDF are transformed to native JavaScript types and values. Any of the previously-listed values are translated into their corresponding JavaScript types. Variant objects and arrays are converted to JavaScript objects and arrays. Similarly, all values returned by the UDF are transformed into the appropriate variant values. Note that objects and arrays returned by the UDF are subject to size and depth limitations.</p> 
               <div class="highlight-sfexample">
                <div class="highlight">
                 <pre><span></span><span class="py">-- flatten all arrays and values of objects into a single array</span>
<span class="py">-- order of objects may be lost</span>
<span class="ni">CREATE</span> <span class="ni">OR</span> <span class="ni">REPLACE</span> <span class="ni">FUNCTION</span> <span class="gi">flatten_complete</span><span class="p">(</span><span class="err">v</span> <span class="ni">variant</span><span class="p">)</span>
  <span class="ni">RETURNS</span> <span class="ni">variant</span>
  <span class="ni">LANGUAGE</span> <span class="gi">JAVASCRIPT</span>
  <span class="ni">AS</span> <span class="nc">'</span>
<span class="nc">  // always returns an array</span>
<span class="nc">  function flatten(input) {</span>
<span class="nc">    var returnArray = [];</span>
<span class="nc">    if (Array.isArray(input)) {</span>
<span class="nc">      var arrayLength = input.length;</span>
<span class="nc">      for (var i = 0; i &lt; arrayLength; i++) {</span>
<span class="nc">        returnArray.push.apply(returnArray, flatten(input[i]));</span>
<span class="nc">      }</span>
<span class="nc">    } else if (typeof input === "object") {</span>
<span class="nc">      for (var key in input) {</span>
<span class="nc">        if (input.hasOwnProperty(key)) {</span>
<span class="nc">          returnArray.push.apply(returnArray, flatten(input[key]));</span>
<span class="nc">        }</span>
<span class="nc">      }</span>
<span class="nc">    } else {</span>
<span class="nc">      returnArray.push(input);</span>
<span class="nc">    }</span>
<span class="nc">    return returnArray;</span>
<span class="nc">  }</span>

<span class="nc">  return flatten(V);</span>
<span class="nc">  '</span><span class="p">;</span>

<span class="ni">select</span> <span class="gi">value</span> <span class="ni">from</span> <span class="ni">table</span><span class="p">(</span><span class="nd">flatten</span><span class="p">(</span><span class="gi">flatten_complete</span><span class="p">(</span><span class="nd">parse_json</span><span class="p">(</span>
<span class="nc">'[</span>
<span class="nc">  {"key1" : [1, 2], "key2" : ["string1", "string2"]},</span>
<span class="nc">  {"key3" : [{"inner key 1" : 10, "inner key 2" : 11}, 12]}</span>
<span class="nc">  ]'</span><span class="p">))));</span>

<span class="no">-----------+</span>
   <span class="no">VALUE   |</span>
<span class="no">-----------+</span>
 <span class="no">1         |</span>
 <span class="no">2         |</span>
 <span class="no">"string1" |</span>
 <span class="no">"string2" |</span>
 <span class="no">10        |</span>
 <span class="no">11        |</span>
 <span class="no">12        |</span>
<span class="no">-----------+</span>
</pre>
                </div> 
               </div> 
              </div> 
             </div> 
             <div class="section" id="javascript-arguments-and-returned-values"> 
              <h2>JavaScript Arguments and Returned Values<a class="headerlink" href="#javascript-arguments-and-returned-values" title="Permalink to this headline">¶</a></h2> 
              <p>Arguments may be referenced directly by name within JavaScript. Note that an unquoted identifier must be referenced with the capitalized variable name. As arguments and the function are referenced from within JavaScript, they must be legal JavaScript identifiers. Specifically, function and argument names must begin with a letter or <code class="docutils literal"><span class="pre">$</span></code>, while subsequent characters may be alphanumeric, <code class="docutils literal"><span class="pre">$</span></code>, or <code class="docutils literal"><span class="pre">_</span></code>. Additionally, names may not be JavaScript-reserved words.</p> 
              <p>The following three examples illustrate functions that use arguments referenced by name:</p> 
              <div class="highlight-sfexample">
               <div class="highlight">
                <pre><span></span><span class="py">-- Valid function.  'N' must be capitalized</span>

<span class="ni">CREATE</span> <span class="ni">OR</span> <span class="ni">REPLACE</span> <span class="ni">FUNCTION</span> <span class="gi">add5</span><span class="p">(</span><span class="err">n</span> <span class="ni">double</span><span class="p">)</span>
  <span class="ni">RETURNS</span> <span class="ni">double</span>
  <span class="ni">LANGUAGE</span> <span class="gi">JAVASCRIPT</span>
  <span class="ni">AS</span> <span class="nc">'return N + 5;'</span><span class="p">;</span>

<span class="ni">select</span> <span class="gi">add5</span><span class="p">(</span><span class="nt">0</span><span class="p">.</span><span class="nt">0</span><span class="p">);</span>

<span class="py">-- Valid function.  Lowercase argument is double-quoted</span>

<span class="ni">CREATE</span> <span class="ni">OR</span> <span class="ni">REPLACE</span> <span class="ni">FUNCTION</span> <span class="gi">add5_quoted</span><span class="p">(</span><span class="vi">"n"</span> <span class="ni">double</span><span class="p">)</span>
  <span class="ni">RETURNS</span> <span class="ni">double</span>
  <span class="ni">LANGUAGE</span> <span class="gi">JAVASCRIPT</span>
  <span class="ni">AS</span> <span class="nc">'return n + 5;'</span><span class="p">;</span>

<span class="ni">select</span> <span class="gi">add5_quoted</span><span class="p">(</span><span class="nt">0</span><span class="p">.</span><span class="nt">0</span><span class="p">);</span>

<span class="py">-- Invalid function. Error returned at runtime because JavaScript identifier 'n' cannot be resolved</span>

<span class="ni">CREATE</span> <span class="ni">OR</span> <span class="ni">REPLACE</span> <span class="ni">FUNCTION</span> <span class="gi">add5_lowercase</span><span class="p">(</span><span class="err">n</span> <span class="ni">double</span><span class="p">)</span>
  <span class="ni">RETURNS</span> <span class="ni">double</span>
  <span class="ni">LANGUAGE</span> <span class="gi">JAVASCRIPT</span>
  <span class="ni">AS</span> <span class="nc">'return n + 5;'</span><span class="p">;</span>

<span class="ni">select</span> <span class="gi">add5_lowercase</span><span class="p">(</span><span class="nt">0</span><span class="p">.</span><span class="nt">0</span><span class="p">);</span>
</pre>
               </div> 
              </div> 
              <div class="section" id="null-and-undefined-values"> 
               <h3>Null and Undefined Values<a class="headerlink" href="#null-and-undefined-values" title="Permalink to this headline">¶</a></h3> 
               <p>When using JavaScript UDFs, you should pay close attention to rows and variables that may contain null values. Specifically, Snowflake contains two distinct null values (SQL null and variant’s JSON null), while JavaScript contains the <code class="docutils literal"><span class="pre">undefined</span></code> value in addition to null.</p> 
               <p>SQL null arguments to a JavaScript UDF will translate to the JavaScript undefined value. Likewise, returned JavaScript undefined values translate back to SQL null. This is true for all data types, including variant. For non-variant types, a returned JavaScript null will also result in a SQL null value.</p> 
               <p>Arguments and returned values of the variant type distinguish between JavaScript’s undefined and null values. SQL null continues to translate to JavaScript undefined (and JavaScript undefined back to SQL null); variant JSON null translates to JavaScript null (and JavaScript null back to variant JSON null). An undefined value embedded in a JavaScript object (as the value) or array will cause the element to be omitted.</p> 
               <div class="highlight-sfexample">
                <div class="highlight">
                 <pre><span></span><span class="ni">CREATE</span> <span class="ni">OR</span> <span class="ni">REPLACE</span> <span class="ni">FUNCTION</span> <span class="gi">string_reverse_nulls</span><span class="p">(</span><span class="err">s</span> <span class="ni">string</span><span class="p">)</span>
  <span class="ni">RETURNS</span> <span class="ni">string</span>
  <span class="ni">LANGUAGE</span> <span class="gi">JAVASCRIPT</span>
  <span class="ni">AS</span> <span class="nc">'</span>
<span class="nc">  if (S === undefined) {</span>
<span class="nc">    return "string was null";</span>
<span class="nc">  } else</span>
<span class="nc">  {</span>
<span class="nc">    return undefined;</span>
<span class="nc">  }</span>
<span class="nc">  '</span><span class="p">;</span>
<span class="p">/</span>

<span class="ni">create</span> <span class="ni">or</span> <span class="ni">replace</span> <span class="ni">table</span> <span class="gi">strings</span> <span class="p">(</span><span class="err">s</span> <span class="ni">string</span><span class="p">);</span>
<span class="ni">insert</span> <span class="ni">into</span> <span class="gi">strings</span> <span class="ni">values</span> <span class="p">(</span><span class="ni">null</span><span class="p">),</span> <span class="p">(</span><span class="nc">'non-null string'</span><span class="p">);</span>
<span class="ni">select</span> <span class="gi">string_reverse_nulls</span><span class="p">(</span><span class="err">s</span><span class="p">)</span> <span class="ni">from</span> <span class="gi">strings</span><span class="p">;</span>

<span class="no">-------------------------+</span>
 <span class="no">STRING_REVERSE_NULLS(S) |</span>
<span class="no">-------------------------+</span>
 <span class="no">string was null         |</span>
 <span class="no">[NULL]                  |</span>
<span class="no">-------------------------+</span>
</pre>
                </div> 
               </div> 
               <div class="highlight-sfexample">
                <div class="highlight">
                 <pre><span></span><span class="ni">CREATE</span> <span class="ni">OR</span> <span class="ni">REPLACE</span> <span class="ni">FUNCTION</span> <span class="gi">variant_nulls</span><span class="p">(</span><span class="err">v</span> <span class="ni">variant</span><span class="p">)</span>
  <span class="ni">RETURNS</span> <span class="ni">variant</span>
  <span class="ni">LANGUAGE</span> <span class="gi">JAVASCRIPT</span>
  <span class="ni">AS</span> <span class="nc">'</span>
<span class="nc">  if (V === undefined) {</span>
<span class="nc">    return "input SQL null";</span>
<span class="nc">  } else if (V === null) {</span>
<span class="nc">    return "input variant null";</span>
<span class="nc">  } else if (V == 1) {</span>
<span class="nc">    return null;</span>
<span class="nc">  } else if (V == 2) {</span>
<span class="nc">    return undefined;</span>
<span class="nc">  } else if (V == 3) {</span>
<span class="nc">    return {</span>
<span class="nc">      key1 : undefined,</span>
<span class="nc">      key2 : null</span>
<span class="nc">    };</span>
<span class="nc">  } else {</span>
<span class="nc">    return V;</span>
<span class="nc">  }</span>
<span class="nc">  '</span><span class="p">;</span>
<span class="p">/</span>

<span class="ni">select</span> <span class="ni">null</span><span class="p">,</span> <span class="gi">variant_nulls</span><span class="p">(</span><span class="ni">cast</span><span class="p">(</span><span class="ni">null</span> <span class="ni">as</span> <span class="ni">variant</span><span class="p">)),</span> <span class="gi">variant_nulls</span><span class="p">(</span><span class="nt">1</span><span class="p">),</span> <span class="gi">variant_nulls</span><span class="p">(</span><span class="nt">2</span><span class="p">),</span> <span class="gi">variant_nulls</span><span class="p">(</span><span class="nt">3</span><span class="p">);</span>

<span class="no">--------+--------------------------------------+------------------+------------------+------------------+</span>
  <span class="no">NULL  | VARIANT_NULLS(CAST(NULL AS VARIANT)) | VARIANT_NULLS(1) | VARIANT_NULLS(2) | VARIANT_NULLS(3) |</span>
<span class="no">--------+--------------------------------------+------------------+------------------+------------------+</span>
 <span class="no">[NULL] | "input SQL null"                     | null             | [NULL]           | {                |</span>
        <span class="no">|                                      |                  |                  |   "key2": null   |</span>
        <span class="no">|                                      |                  |                  | }                |</span>
<span class="no">--------+--------------------------------------+------------------+------------------+------------------+</span>
</pre>
                </div> 
               </div> 
              </div> 
              <div class="section" id="type-conversion-within-javascript"> 
               <h3>Type Conversion within JavaScript<a class="headerlink" href="#type-conversion-within-javascript" title="Permalink to this headline">¶</a></h3> 
               <p>JavaScript will implicitly convert values between many different types. When any value is returned, the value is first converted to the requested return type before being translated to a SQL value. For example, if a number is returned, but the function is declared as returning a string, this number will converted to a string within JavaScript. Keep in mind that JavaScript programming errors, such as returning the wrong type, may be hidden by this behavior. In addition, if an error is thrown while converting the value’s type, an error will result.</p> 
              </div> 
             </div> 
             <div class="section" id="javascript-errors"> 
              <h2>JavaScript Errors<a class="headerlink" href="#javascript-errors" title="Permalink to this headline">¶</a></h2> 
              <p>Any errors encountered while executing JavaScript appear to the user as SQL errors. This includes parsing errors, runtime errors, and uncaught error thrown within the UDF. If the error contains a stacktrace, it will be printed along with the error message. It is acceptable to throw an error without catching it in order to end the query and produce a SQL error.</p> 
              <p>While debugging you may find it useful to print argument values along with the error message so that they appear in the SQL error message text. For deterministic functions, this provides the necessary data to reproduce errors in a local JavaScript engine. One common pattern is to place an entire JavaScript UDF body in a try-catch block, append argument values to the caught error’s message, and throw an error with the extended message. You should consider removing such mechanisms prior to deploying UDFs to a production environment; recording values in error messages may unintentionally reveal sensitive data.</p> 
             </div> 
             <div class="section" id="javascript-udf-limitations"> 
              <h2>JavaScript UDF Limitations<a class="headerlink" href="#javascript-udf-limitations" title="Permalink to this headline">¶</a></h2> 
              <p>We place several limitations on JavaScript user-defined functions. These constraints ensure stability within Snowflake’s environment.</p> 
              <div class="section" id="memory"> 
               <h3>Memory<a class="headerlink" href="#memory" title="Permalink to this headline">¶</a></h3> 
               <p>JavaScript UDFs will fail if they consume too much memory. The specific limit is subject to change. Using too much memory will result in an error being returned.</p> 
              </div> 
              <div class="section" id="time"> 
               <h3>Time<a class="headerlink" href="#time" title="Permalink to this headline">¶</a></h3> 
               <p>JavaScript functions that take too long will be killed and an error returned to the user. JavaScript UDFs that enter endless loops will result in errors.</p> 
              </div> 
              <div class="section" id="stack-depth"> 
               <h3>Stack Depth<a class="headerlink" href="#stack-depth" title="Permalink to this headline">¶</a></h3> 
               <p>Excessive stack depth due to recursion will result in an error.</p> 
              </div> 
              <div class="section" id="global-state"> 
               <h3>Global State<a class="headerlink" href="#global-state" title="Permalink to this headline">¶</a></h3> 
               <p>You should not rely on global data being available between function calls from one row to the next. The global state may be erased between UDF calls to distinct rows. It is safe to use global state within a UDF.</p> 
              </div> 
              <div class="section" id="libraries"> 
               <h3>Libraries<a class="headerlink" href="#libraries" title="Permalink to this headline">¶</a></h3> 
               <p>Snowflake JavaScript UDFs give access to the standard JavaScript library. Note that this excludes many objects and methods typically provided by browsers. There is no mechanism to import, include, or call additional libraries. All required code should be embedded within the UDF.</p> 
               <p>Additionally, the built-in JavaScript <code class="docutils literal"><span class="pre">eval()</span></code> function is disabled.</p> 
              </div> 
              <div class="section" id="returned-variant-size-and-depth"> 
               <h3>Returned Variant Size and Depth<a class="headerlink" href="#returned-variant-size-and-depth" title="Permalink to this headline">¶</a></h3> 
               <p>Returned variant objects are subject to size and nesting-depth limitations. Should any object be too large (several megabytes; subject to change) or too deep (currently allow a nesting depth of 1000 in objects and arrays; subject to change) you will receive an error.</p> 
              </div> 
             </div> 
             <div class="section" id="javascript-udf-security"> 
              <h2>JavaScript UDF Security<a class="headerlink" href="#javascript-udf-security" title="Permalink to this headline">¶</a></h2> 
              <p>Snowflake’s JavaScript UDFs are designed to be safe and secure by providing several layers of query and data isolation. Servers within virtual warehouses are accessible only from the warehouse’s account (warehouses are single-tenant). Table data is encrypted within the virtual warehouse to prevent unauthorized access. Snowflake JavaScript UDFs are executed within a restricted engine, preventing system calls from the JavaScript context (e.g., no network and disk access) and constraining the system resources available to the engine, specifically memory. As a result, Snowflake JavaScript UDFs may access only the data needed for the query and may not affect the state of the underlying system other than consuming a reasonable amount of memory and processor time.</p> 
             </div> 
            </div> 
           </div> 
           <footer> 
            <!-- Previous/Next links --> 
            <div class="navlinks"> 
             <a href="info-schema.html" class="pn-prev float-right" title="Information Schema">Next</a> 
             <a href="udf-overview.html" class="pn-next float-left" title="Overview of User-Defined Functions">Previous</a> | 
            </div> 
            <!--
  
    <div class="rst-footer-buttons" role="navigation" aria-label="footer navigation">
      
        <a href="info-schema.html" class="btn btn-neutral float-right" title="Information Schema">Next <span class="fa fa-arrow-circle-right"></span></a>
      
      
        <a href="udf-overview.html" class="btn btn-neutral float-left" title="Overview of User-Defined Functions"><span class="fa fa-arrow-circle-left"></span> Previous</a>
      
    </div>
  --> 
           </footer> 
          </div> 
         </div> 
         <!-- skona --> 
         <!-- END DYNAMIC CONTENT --> 
        </section> 
       </div>
       <!-- end main content inner --> 
      </div>
      <!-- end main content --> 
     </div>
     <!-- end site flex container --> 
    </div>
    <!-- #content --> 
    <!-- /skona --> 
    <footer class="site-footer"> 
     <!-- sticky links --> 
     <ul class="sticky-links sticky-stuck"> 
      <li><a href="mailto:doc-feedback@snowflake.net">Ask Doc Question</a></li> 
      <li><a href="mailto:support@snowflake.net">Contact Support</a></li> 
     </ul> 
     <div class="row"> 
      <div class="column small-12 u_centered"> 
       <ul id="footer-nav"> 
        <li> <h3>Solutions</h3> 
         <ul> 
          <li><a href="https://www.snowflake.net/use-cases/">Use Cases</a></li> 
          <li><a href="https://www.snowflake.net/media-and-advertising/">Media &amp; Advertising</a></li> 
          <li><a href="https://www.snowflake.net/healthcare/">Healthcare</a></li> 
          <li><a href="https://www.snowflake.net/software/">Software</a></li> 
          <li><a href="https://www.snowflake.net/gaming/">Gaming</a></li> 
         </ul> </li> 
        <li> <h3>Products</h3> 
         <ul> 
          <li><a href="https://www.snowflake.net/product/">Overview</a></li> 
          <li><a href="https://www.snowflake.net/product/why-snowflake/">Why Snowflake</a></li> 
          <li><a href="https://www.snowflake.net/product/architecture/">Architecture</a></li> 
          <li><a href="https://www.snowflake.net/product/security/">Security</a></li> 
          <li><a href="https://www.snowflake.net/product/pricing/">Pricing</a></li> 
         </ul> </li> 
        <li> <h3>Resources</h3> 
         <ul> 
          <li><a href="https://www.snowflake.net/resources/">Resource Center</a></li> 
          <li><a href="https://www.snowflake.net/support">Support &amp; Services</a></li> 
          <li><a href="https://docs.snowflake.net/">Documentation</a></li> 
         </ul> </li> 
        <li> <h3>Explore</h3> 
         <ul> 
          <li><a href="https://www.snowflake.net/our-customers/">Customers</a></li> 
          <li><a href="https://www.snowflake.net/about/press-and-news/">News</a></li> 
          <li><a href="https://www.snowflake.net/about/events/">Events</a></li> 
          <li><a href="https://www.snowflake.net/about/webinars/">Webinars</a></li> 
          <li><a href="https://www.snowflake.net/blog/">Blog</a></li> 
         </ul> </li> 
        <li> <h3>About</h3> 
         <ul> 
          <li><a href="https://www.snowflake.net/about/">About Snowflake</a></li> 
          <li><a href="https://www.snowflake.net/partners/">Partners</a></li> 
          <li><a href="https://www.snowflake.net/about/snowflake-team/">Team</a></li> 
          <li><a href="https://www.snowflake.net/about/board/">Board</a></li> 
          <li><a href="https://www.snowflake.net/about/careers/">Careers</a></li> 
          <li><a href="https://www.snowflake.net/contact/">Contact</a></li> 
         </ul> </li> 
       </ul> 
       <p class="follow-us">follow us</p> 
       <ul class="social-links"> 
        <li><a href="https://twitter.com/SnowflakeDB" title="Snowflake Twitter"><i class="icon-twitter"></i></a></li> 
        <li><a href="https://www.linkedin.com/company/3653845" title="Snowflake LinkedIn"><i class="icon-linkedin"></i></a></li> 
        <li><a href="https://www.youtube.com/user/snowflakecomputing" title="Snowflake YouTube"><i class="icon-youtube-play"></i></a></li> 
        <li><a href="https://www.facebook.com/Snowflake-Computing-709171695819345/" title="Snowflake Facebook"><i class="icon-facebook"></i></a></li> 
       </ul> 
       <img class="footer-logo" src="https://www.snowflake.net/wp-content/uploads/2016/12/logo.png" alt=""> 
       <div class="mobile-footer-tagline"> 
        <p></p> 
        <p>The data warehouse built for the cloud</p> 
       </div> 
       <ul class="mobile-footer-links"> 
        <li><a href="https://www.snowflake.net/contact/" title="Contact Us">Contact Us</a></li> 
        <li><a href="https://www.snowflake.net/about/" title="About Us">About Us</a></li> 
        <li><a href="https://www.snowflake.net/our-customers/" title="Customers">Customers</a></li> 
        <li><a href="https://www.snowflake.net/resources/" title="Resources">Resources</a></li> 
        <li><a href="https://www.snowflake.net/blog/" title="Blog">Blog</a></li> 
       </ul> 
       <div class="address-and-phone"> 
        <p><a href="https://www.google.com/maps/place/101+S+Ellsworth+Ave,+San+Mateo,+CA+94401/@37.5664104,-122.3264402,17z/data=!4m15!1m9!4m8!1m0!1m6!1m2!1s0x808f9e70dcc8c367:0xaef8beca22cc8032!2s101+S+Ellsworth+Ave,+San+Mateo,+CA+94401!2m2!1d-122.3242515!2d37.5664104!3m4!1s0x808f9e70dcc8c367:0xaef8beca22cc8032!8m2!3d37.5664104!4d-122.3242515" target="_blank">101 South Ellsworth Avenue, San Mateo, CA, United States</a> | <a href="tel:8447669355">844-SNOWFLK (844-766-9355)</a></p> 
       </div> 
       <div class="copyright-text"> 
        <p>© 2017 Snowflake Computing Inc. All Rights Reserved | <a href="https://www.snowflake.net/legal/">Legal</a> | <a href="https://www.snowflake.net/privacy-policy/">Privacy</a> | <a href="https://www.snowflake.net/terms-of-service/">Terms</a></p> 
       </div> 
      </div> 
     </div> 
    </footer> 
    <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../',
            VERSION:'2.12.0',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true
        };
    </script> 
    <script type="text/javascript" src="../_static/jquery.js"></script> 
    <script type="text/javascript" src="../_static/underscore.js"></script> 
    <script type="text/javascript" src="../_static/doctools.js"></script> 
    <script type="text/javascript" src="../_static/js/theme.js"></script> 
    <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script> 
    <!-- Search --> 
    <script src="//snowflake-search.inbenta.com/jsonp/inbenta.js"></script> 
    <!-- skona --> 
   </div>
   <!-- #page --> 
   <!-- Ignore. Conflicts with TOC expand/contract icons. Seems superfluous <script src="https://code.jquery.com/jquery-1.12.0.min.js"></script> 
  <script>window.jQuery || document.write('<script src="../_static/js/vendor/jquery-1.12.0.min.js"><\/script>')</script>--> 
   <script src="../_static/js/main.js"></script> 
   <!-- /skona --> 
   <!-- Fancybox JS 
  <script src="//code.jquery.com/jquery-3.2.1.min.js"></script> --> 
   <script type="text/javascript" src="../_static/fancybox/jquery.fancybox.min.js"></script>  
  </div>
 </body>
</html>