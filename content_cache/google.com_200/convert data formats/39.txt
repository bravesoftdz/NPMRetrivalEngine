<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta name="description" content=""> 
  <meta name="author" content=""> 
  <link rel="shortcut icon" href="/assets/img/scala-js-logo-32.png"> 
  <link rel="canonical" href="https://www.scala-js.org/doc/interoperability/types.html"> 
  <title> JavaScript types - Scala.js</title> 
  <meta property="og:title" content="JavaScript types">
  <meta property="og:type" content="website">
  <meta property="og:description" content="Build robust front-end web applications in Scala with Scala.js">
  <meta property="og:site_name" content="Scala.js">
  <meta property="og:image" content="https://www.scala-js.org/assets/img/scala-js-logo-256.png"> 
  <link type="text/css" rel="stylesheet" href="/assets/bundle-0e0ecc9034ffaf7fc9f72cdd359db110441f802736f7f22f80b941ca9a2f6a35.css"> 
  <script>
      var onloadFunctions = [];
    </script> 
  <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]--> 
 </head> 
 <body> 
  <div class="navbar navbar-default navbar-fixed-top" role="navigation"> 
   <div class="container"> 
    <div class="navbar-header"> 
     <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
     <a class="navbar-brand" href="/"><img width="120" alt="Scala.js" src="/assets/img/scala-js-site-logo.svg"></a> 
    </div> 
    <div class="navbar-collapse collapse navbar-right"> 
     <ul class="nav navbar-nav"> 
      <li class="active"><a href="/doc/">DOCUMENTATION</a></li> 
      <li><a href="/tutorial/">TUTORIALS</a></li> 
      <li><a href="/libraries/">LIBRARIES</a></li> 
      <li><a href="/community/">COMMUNITY</a></li> 
      <li><a href="/news/">NEWS</a></li> 
      <li><a href="#" id="search-icon"><i style="font-size: 20px" class="fa fa-search"></i></a></li> 
     </ul> 
    </div> 
   </div> 
  </div> 
  <div id="search-view" class="container"> 
   <div id="search-box"> 
    <input type="text" class="form-control" placeholder="Search" id="search-term"> 
    <div id="search-results" class="container"></div> 
   </div> 
  </div> 
  <div id="wrap"> 
   <div id="main"> 
    <div id="blue"> 
     <div class="container"> 
      <div class="row"> 
       <h3>JavaScript types</h3> 
      </div>
      <!-- /row --> 
     </div> 
     <!-- /container --> 
    </div>
    <!-- /blue --> 
    <div class="container mtb"> 
     <div class="row"> 
      <div class="col-md-9"> 
       <p>Understanding how different types are mapped between Scala.js and JavaScript is crucial for correct interoperability. Some types map quite directly (like <code class="highlighter-rouge">String</code>) where others require some conversions.</p> 
       <h2 id="a-nametype-correspondencea-type-correspondence"><a name="type-correspondence"></a> Type Correspondence</h2> 
       <p>Some Scala types are directly mapped to corresponding underlying JavaScript types. These correspondences can be used when calling Scala.js code from JavaScript and when defining typed interfaces for JavaScript code.</p> 
       <table class="table table-bordered"> 
        <thead> 
         <tr>
          <th>Scala type</th>
          <th>JavaScript type</th>
          <th>Restrictions</th>
         </tr> 
        </thead> 
        <tbody> 
         <tr>
          <td>java.lang.String</td>
          <td>string</td>
          <td></td>
         </tr> 
         <tr>
          <td>scala.Boolean</td>
          <td>boolean</td>
          <td></td>
         </tr> 
         <tr>
          <td>scala.Char</td>
          <td><i>opaque</i></td>
          <td></td>
         </tr> 
         <tr>
          <td>scala.Byte</td>
          <td>number</td>
          <td>integer, range (-128, 127)</td>
         </tr> 
         <tr>
          <td>scala.Short</td>
          <td>number</td>
          <td>integer, range (-32768, 32767)</td>
         </tr> 
         <tr>
          <td>scala.Int</td>
          <td>number</td>
          <td>integer, range (-2147483648, 2147483647)</td>
         </tr> 
         <tr>
          <td>scala.Long</td>
          <td><i>opaque</i></td>
          <td></td>
         </tr> 
         <tr>
          <td>scala.Float</td>
          <td>number</td>
          <td></td>
         </tr> 
         <tr>
          <td>scala.Double</td>
          <td>number</td>
          <td></td>
         </tr> 
         <tr>
          <td>scala.Unit</td>
          <td>undefined</td>
          <td></td>
         </tr> 
         <tr>
          <td>scala.Null</td>
          <td>null</td>
          <td></td>
         </tr> 
         <tr> 
          <td>subtypes of `js.Any`</td> 
          <td><i>themselves</i></td> 
          <td>see <a href="facade-types.html">the facade types guide</a></td> 
         </tr> 
         <tr> 
          <td> other Scala classes<br> <small>including value classes</small> </td> 
          <td> <i>opaque, except for exported methods</i><br> <small>Note: <code>toString()</code> is always exported</small> </td> 
          <td>see <a href="export-to-javascript.html">exporting Scala.js APIs to JavaScript</a></td> 
         </tr> 
        </tbody> 
       </table> 
       <p>On the other hand, some JavaScript (collection) types have similar types in Scala. Instead of mapping them directly, Scala.js provides conversions between them. We show with a couple of snippets how you can convert from JavaScript to Scala types and back. Please refer to the <a href="/doc/index.html#api">Scaladocs</a> for details.</p> 
       <h4 id="jsfunctionn----scalafunctionn"><code class="highlighter-rouge">js.FunctionN</code> &lt;–&gt; <code class="highlighter-rouge">scala.FunctionN</code></h4> 
       <p>Functions from JavaScript and Scala are not exactly the same thing, therefore they have different types. However, implicit conversions are available by default to go from one to the other, which means the following snippets compile out of the box:</p> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">import</span> <span class="nn">scala.scalajs.js</span>

<span class="k">val</span> <span class="n">scalaFun</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
<span class="k">val</span> <span class="n">jsFun</span><span class="k">:</span> <span class="kt">js.Function1</span><span class="o">[</span><span class="kt">Int</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">scalaFun</span>
<span class="k">val</span> <span class="n">scalaFunAgain</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="nc">Int</span> <span class="k">=</span> <span class="n">jsFun</span></code></pre>
       </figure> 
       <p>Most of the time, you don’t even need to worry about those, except if you <a href="facade-types.html">write facade types for JavaScript APIs</a>, in which case you have to use the JS function types.</p> 
       <h4 id="jsarrayt----mutableseqt"><code class="highlighter-rouge">js.Array[T]</code> &lt;–&gt; <code class="highlighter-rouge">mutable.Seq[T]</code></h4> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">import</span> <span class="nn">scala.scalajs.js</span>

<span class="k">val</span> <span class="n">jsArr</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="nc">Array</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>

<span class="c1">// Scala style operations on js.Array (returns a js.Array) </span><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">js.Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">jsArr</span><span class="o">.</span><span class="n">takeWhile</span><span class="o">(</span><span class="k">_</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">)</span>

<span class="c1">// Use a js.Array as a Scala mutable.Seq </span><span class="k">val</span> <span class="n">y</span><span class="k">:</span> <span class="kt">mutable.Seq</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">jsArr</span>

<span class="c1">// toArray (from js.ArrayOps) -- Copy into scala.Array </span><span class="k">val</span> <span class="n">z</span><span class="k">:</span> <span class="kt">scala.Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">jsArr</span><span class="o">.</span><span class="n">toArray</span>

<span class="k">import</span> <span class="nn">js.JSConverters._</span>

<span class="k">val</span> <span class="n">scSeq</span> <span class="k">=</span> <span class="nc">Seq</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>

<span class="c1">// Seq to js.Array -- Copy to js.Array </span><span class="k">val</span> <span class="n">jsArray</span><span class="k">:</span> <span class="kt">js.Array</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">scSeq</span><span class="o">.</span><span class="n">toJSArray</span></code></pre>
       </figure> 
       <h4 id="jsdictionaryt----mutablemapstring-t"><code class="highlighter-rouge">js.Dictionary[T]</code> &lt;–&gt; <code class="highlighter-rouge">mutable.Map[String, T]</code></h4> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">import</span> <span class="nn">scala.scalajs.js</span>

<span class="k">val</span> <span class="n">jsDict</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="nc">Dictionary</span><span class="o">(</span><span class="s">"a"</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="s">"b"</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">)</span>

<span class="c1">// Scala style operations on js.Dictionary (returns mutable.Map) </span><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">mutable.Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">jsDict</span><span class="o">.</span><span class="n">mapValues</span><span class="o">(</span><span class="k">_</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>

<span class="c1">// Use a js.Dictionary as Scala mutable.Map </span><span class="k">val</span> <span class="n">y</span><span class="k">:</span> <span class="kt">mutable.Map</span><span class="o">[</span><span class="kt">String</span>, <span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">jsDict</span>

<span class="k">import</span> <span class="nn">js.JSConverters._</span>

<span class="k">val</span> <span class="n">scMap</span> <span class="k">=</span> <span class="nc">Map</span><span class="o">(</span><span class="s">"a"</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="o">,</span> <span class="s">"b"</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">)</span>

<span class="c1">// Map to js.Dictionary -- Copy to js.Dictionary </span><span class="k">val</span> <span class="n">jsDictionary</span><span class="k">:</span> <span class="kt">js.Dictionary</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">scMap</span><span class="o">.</span><span class="n">toJSDictionary</span></code></pre>
       </figure> 
       <h4 id="jsundefort----optiont"><code class="highlighter-rouge">js.UndefOr[T]</code> &lt;–&gt; <code class="highlighter-rouge">Option[T]</code></h4> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">import</span> <span class="nn">scala.scalajs.js</span>

<span class="k">val</span> <span class="n">jsUndefOr</span><span class="k">:</span> <span class="kt">js.UndefOr</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="mi">1</span>

<span class="c1">// Convert to scala.Option </span><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Option</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">jsUndefOr</span><span class="o">.</span><span class="n">toOption</span>

<span class="k">import</span> <span class="nn">js.JSConverters._</span>

<span class="k">val</span> <span class="n">opt</span> <span class="k">=</span> <span class="nc">Some</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>

<span class="c1">// Convert to js.Undefined </span><span class="k">val</span> <span class="n">y</span><span class="k">:</span> <span class="kt">js.UndefOr</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=</span> <span class="n">opt</span><span class="o">.</span><span class="n">orUndefined</span></code></pre>
       </figure> 
       <h2 id="pre-defined-javascript-types">Pre-defined JavaScript types</h2> 
       <p>Primitive JavaScript types (<code class="highlighter-rouge">number</code>, <code class="highlighter-rouge">boolean</code>, <code class="highlighter-rouge">string</code>, <code class="highlighter-rouge">null</code> and <code class="highlighter-rouge">undefined</code>) are represented by their natural equivalent in Scala, as shown <a href="#type-correspondence">above</a>.</p> 
       <p>For other pre-defined JavaScript types, such as arrays and functions, the package <code class="highlighter-rouge">scala.scalajs.js</code> (<a href="https://www.scala-js.org/api/scalajs-library/0.6.20/#scala.scalajs.js.package">ScalaDoc</a>) provides dedicated definitions.</p> 
       <p>The class hierarchy for these standard types is as follows:</p> 
       <div class="highlighter-rouge">
        <pre class="highlight"><code>js.Any
 +- js.Object
 |   +- js.Date
 |   +- js.RegExp
 |   +- js.Array[A]
 |   +- js.Function
 |   |   +- js.Function0[+R]
 |   |   +- js.Function1[-T1, +R]
 |   |   +- ...
 |   |   +- js.Function22[-T1, ..., -T22, +R]
 |   |   +- js.ThisFunction
 |   |       +- js.ThisFunction0[-T0, +R]
 |   |       +- js.ThisFunction1[-T0, -T1, +R]
 |   |       +- ...
 |   |       +- js.ThisFunction21[-T0, ..., -T21, +R]
 |   +- js.Iterable[+A]
 |   +- js.Iterator[+A]
 |   +- js.Promise[+A]
 |   +- js.Thenable[+A]
 +- js.Dictionary[A]
 +- js.Symbol
</code></pre> 
       </div> 
       <p>Note that most of these types are similar to standard Scala types. For example, <code class="highlighter-rouge">js.Array[A]</code> is similar to <code class="highlighter-rouge">scala.Array[A]</code>, and <code class="highlighter-rouge">js.FunctionN</code> is similar to <code class="highlighter-rouge">scala.FunctionN</code>. However, they are not completely equivalent, and must not be confused.</p> 
       <p>With the exception of <code class="highlighter-rouge">js.Array[A]</code> and <code class="highlighter-rouge">js.Dictionary[A]</code>, these types have all the fields and methods available in the JavaScript API. The collection types feature the standard Scala collection API instead, so that they can be used idiomatically in Scala code.</p> 
       <h2 id="function-types">Function types</h2> 
       <h3 id="jsfunction-and-its-subtypes"><code class="highlighter-rouge">js.Function</code> and its subtypes</h3> 
       <p><code class="highlighter-rouge">js.FunctionN[T1, ..., TN, R]</code> is, as expected, the type of a JavaScript function taking N parameters of types <code class="highlighter-rouge">T1</code> to <code class="highlighter-rouge">TN</code>, and returning a value of type <code class="highlighter-rouge">R</code>.</p> 
       <p>There are implicit conversions from <code class="highlighter-rouge">scala.FunctionN</code> to <code class="highlighter-rouge">js.FunctionN</code> and back, with the obvious meaning. These conversions are the only way to create a <code class="highlighter-rouge">js.FunctionN</code> in Scala.js. For example:</p> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">f</span><span class="k">:</span> <span class="kt">js.Function1</span><span class="o">[</span><span class="kt">Double</span>, <span class="kt">Double</span><span class="o">]</span> <span class="k">=</span> <span class="o">{</span> <span class="o">(</span><span class="n">x</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">}</span></code></pre>
       </figure> 
       <p>defines a JavaScript <code class="highlighter-rouge">function</code> object which squares its argument. This corresponds to the following JavaScript code:</p> 
       <figure class="highlight">
        <pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span><span class="o">*</span><span class="nx">x</span><span class="p">;</span>
<span class="p">};</span></code></pre>
       </figure> 
       <p>You can call a <code class="highlighter-rouge">js.FunctionN</code> in Scala.js with the usual syntax:</p> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">y</span> <span class="k">=</span> <span class="n">f</span><span class="o">(</span><span class="mi">5</span><span class="o">)</span></code></pre>
       </figure> 
       <h3 id="jsthisfunction-and-its-subtypes"><code class="highlighter-rouge">js.ThisFunction</code> and its subtypes</h3> 
       <p>The series of <code class="highlighter-rouge">js.ThisFunctionN</code> solve the problem of modeling the <code class="highlighter-rouge">this</code> value of JavaScript in Scala. Consider the following call to the <code class="highlighter-rouge">each</code> method of a jQuery object:</p> 
       <figure class="highlight">
        <pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">lis</span> <span class="o">=</span> <span class="nx">jQuery</span><span class="p">(</span><span class="s2">"ol &gt; li"</span><span class="p">);</span>
<span class="nx">lis</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">jQuery</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">jQuery</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span> <span class="o">+</span> <span class="s2">" - transformed"</span><span class="p">)</span>
<span class="p">});</span></code></pre>
       </figure> 
       <p>Inside the closure, the value of <code class="highlighter-rouge">this</code> is the DOM element currently being enumerated. This usage of <code class="highlighter-rouge">this</code>, which is nonsense from a Scala point of view, is standard in JavaScript. <code class="highlighter-rouge">this</code> can actually be thought of as an additional parameter to the closure.</p> 
       <p>In Scala.js, the <code class="highlighter-rouge">this</code> keyword always follows the same rules as in Scala, i.e., it binds to the enclosing class, trait or object. It will never bind to the equivalent of the JavaScript <code class="highlighter-rouge">this</code> in an anonymous function.</p> 
       <p>To access the JavaScript <code class="highlighter-rouge">this</code> in Scala.js, it can be made explicit using <code class="highlighter-rouge">js.ThisFunctionN</code>. A <code class="highlighter-rouge">js.ThisFunctionN[T0, T1, ..., TN, R]</code> is the type of a JavaScript function taking a <code class="highlighter-rouge">this</code> parameter of type <code class="highlighter-rouge">T0</code>, as well as N normal parameters of types <code class="highlighter-rouge">T1</code> to <code class="highlighter-rouge">TN</code>, and returning a value of type <code class="highlighter-rouge">R</code>. From Scala.js, the <code class="highlighter-rouge">this</code> parameter appears as any other parameter: it has a non-keyword name, a type, and is listed first in the parameter list. Hence, a <code class="highlighter-rouge">scala.FunctionN</code> is convertible to/from a <code class="highlighter-rouge">js.ThisFunction{N-1}</code>.</p> 
       <p>The previous example would be written as follows in Scala.js:</p> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">lis</span> <span class="k">=</span> <span class="n">jQuery</span><span class="o">(</span><span class="s">"ol &gt; li"</span><span class="o">)</span>
<span class="n">lis</span><span class="o">.</span><span class="n">each</span><span class="o">({</span> <span class="o">(</span><span class="n">li</span><span class="k">:</span> <span class="kt">dom.HTMLElement</span><span class="o">)</span> <span class="k">=&gt;</span>
  <span class="n">jQuery</span><span class="o">(</span><span class="n">li</span><span class="o">).</span><span class="n">text</span><span class="o">(</span><span class="n">jQuery</span><span class="o">(</span><span class="n">li</span><span class="o">).</span><span class="n">text</span><span class="o">()</span> <span class="o">+</span> <span class="s">" - transformed"</span><span class="o">)</span>
<span class="o">}</span><span class="k">:</span> <span class="kt">js.ThisFunction</span><span class="o">)</span></code></pre>
       </figure> 
       <p>Skipping over the irrelevant details, note that the parameter <code class="highlighter-rouge">li</code> completely corresponds to the JavaScript <code class="highlighter-rouge">this</code>. Note also that we have ascribed the lambda with <code class="highlighter-rouge">: js.ThisFunction</code> explicitly to make sure that the right implicit conversion is being used (by default it would convert it to a <code class="highlighter-rouge">js.Function1</code>). If you call a statically typed API which expects a <code class="highlighter-rouge">js.ThisFunction0</code>, this is not needed.</p> 
       <p>The mapping between JS <code class="highlighter-rouge">this</code> and first parameter of a <code class="highlighter-rouge">js.ThisFunction</code> also works in the other direction, i.e., if calling the <code class="highlighter-rouge">apply</code> method of a <code class="highlighter-rouge">js.ThisFunction</code>, the first actual argument is transferred to the called function as its <code class="highlighter-rouge">this</code>. For example, the following snippet:</p> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">f</span><span class="k">:</span> <span class="kt">js.ThisFunction1</span><span class="o">[</span><span class="kt">js.Object</span>, <span class="kt">js.Number</span>, <span class="kt">js.Number</span><span class="o">]</span> <span class="k">=</span> <span class="o">???</span>
<span class="k">val</span> <span class="n">o</span> <span class="k">=</span> <span class="k">new</span> <span class="n">js</span><span class="o">.</span><span class="nc">Object</span>
<span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="n">f</span><span class="o">(</span><span class="n">o</span><span class="o">,</span> <span class="mi">4</span><span class="o">)</span></code></pre>
       </figure> 
       <p>will map to</p> 
       <figure class="highlight">
        <pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="p">...;</span>
<span class="kd">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">o</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span></code></pre>
       </figure> 
       <h2 id="dynamically-typed-interface-jsdynamic">Dynamically typed interface: <code class="highlighter-rouge">js.Dynamic</code></h2> 
       <p>Because JavaScript is dynamically typed, it is not often practical, sometimes impossible, to give sensible type definitions for JavaScript APIs.</p> 
       <p>Scala.js lets you call JavaScript in a dynamically typed fashion if you want to. The basic entry point is <code class="highlighter-rouge">js.Dynamic.global</code>, which is a dynamically typed view of the JavaScript global scope. You can select any global variable of JavaScript as a a member of <code class="highlighter-rouge">js.Dynamic.global</code>, e.g., <code class="highlighter-rouge">js.Dynamic.global.Math</code>, which will be typed as a <a href="https://www.scala-js.org/api/scalajs-library/latest/#scala.scalajs.js.Dynamic"><code class="highlighter-rouge">js.Dynamic</code></a>.</p> 
       <p>You can read and write any field of a <code class="highlighter-rouge">js.Dynamic</code>, as well as call any method with any number of arguments, and you always receive back a <code class="highlighter-rouge">js.Dynamic</code>.</p> 
       <p>For example, this snippet taken from the Hello World example uses the dynamically typed interface to manipulate the DOM model.</p> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">document</span> <span class="k">=</span> <span class="n">js</span><span class="o">.</span><span class="nc">Dynamic</span><span class="o">.</span><span class="n">global</span><span class="o">.</span><span class="n">document</span>
<span class="k">val</span> <span class="n">playground</span> <span class="k">=</span> <span class="n">document</span><span class="o">.</span><span class="n">getElementById</span><span class="o">(</span><span class="s">"playground"</span><span class="o">)</span>

<span class="k">val</span> <span class="n">newP</span> <span class="k">=</span> <span class="n">document</span><span class="o">.</span><span class="n">createElement</span><span class="o">(</span><span class="s">"p"</span><span class="o">)</span>
<span class="n">newP</span><span class="o">.</span><span class="n">innerHTML</span> <span class="k">=</span> <span class="s">"Hello world! &lt;i&gt;-- DOM&lt;/i&gt;"</span>
<span class="n">playground</span><span class="o">.</span><span class="n">appendChild</span><span class="o">(</span><span class="n">newP</span><span class="o">)</span></code></pre>
       </figure> 
       <p>In this example, <code class="highlighter-rouge">document</code>, <code class="highlighter-rouge">playground</code> and <code class="highlighter-rouge">newP</code> are all inferred to be of type <code class="highlighter-rouge">js.Dynamic</code>.</p> 
       <h3 id="literal-object-construction">Literal object construction</h3> 
       <p>Scala.js provides two syntaxes for creating JavaScript objects in a literal way. The following JavaScript object</p> 
       <figure class="highlight">
        <pre><code class="language-javascript" data-lang="javascript"><span class="p">{</span><span class="nl">foo</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="nx">bar</span><span class="err">:</span> <span class="s2">"foobar"</span><span class="p">}</span></code></pre>
       </figure> 
       <p>can be written in Scala.js either as</p> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="n">js</span><span class="o">.</span><span class="nc">Dynamic</span><span class="o">.</span><span class="n">literal</span><span class="o">(</span><span class="n">foo</span> <span class="k">=</span> <span class="mi">42</span><span class="o">,</span> <span class="n">bar</span> <span class="k">=</span> <span class="s">"foobar"</span><span class="o">)</span></code></pre>
       </figure> 
       <p>or as</p> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="n">js</span><span class="o">.</span><span class="nc">Dynamic</span><span class="o">.</span><span class="n">literal</span><span class="o">(</span><span class="s">"foo"</span> <span class="o">-&gt;</span> <span class="mi">42</span><span class="o">,</span> <span class="s">"bar"</span> <span class="o">-&gt;</span> <span class="s">"foobar"</span><span class="o">)</span></code></pre>
       </figure> 
       <h3 id="literal-object-construction-using-an-scala-object-interface">Literal object construction using an Scala object interface</h3> 
       <p>Sometimes for a nicer interface, literal objects can be implemented using a trait interface. The above JavaScript code can be implemented using following code:</p> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">trait</span> <span class="nc">MyObject</span> <span class="k">extends</span> <span class="n">js</span><span class="o">.</span><span class="nc">Object</span> <span class="o">{</span>
  <span class="k">val</span> <span class="n">foo</span><span class="k">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="n">js</span><span class="o">.</span><span class="n">native</span>
  <span class="k">val</span> <span class="n">bar</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">js</span><span class="o">.</span><span class="n">native</span>
<span class="o">}</span></code></pre>
       </figure> 
       <p>A Scala object should be added for typesafe creation, it would help the readability of the code by removing lots of <code class="highlighter-rouge">js.Dynamic.literal</code> all over the code.</p> 
       <figure class="highlight">
        <pre><code class="language-scala" data-lang="scala"><span class="k">object</span> <span class="nc">MyObject</span> <span class="o">{</span>
  <span class="k">def</span> <span class="n">apply</span><span class="o">(</span><span class="n">foo</span><span class="k">:</span> <span class="kt">Int</span><span class="o">,</span> <span class="n">bar</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">MyObject</span> <span class="o">=</span> 
    <span class="n">js</span><span class="o">.</span><span class="nc">Dynamic</span><span class="o">.</span><span class="n">literal</span><span class="o">(</span><span class="n">foo</span> <span class="k">=</span> <span class="n">foo</span><span class="o">,</span> <span class="n">bar</span> <span class="k">=</span> <span class="n">bar</span><span class="o">).</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">MyObject</span><span class="o">]</span>  
<span class="o">}</span></code></pre>
       </figure> 
       <p>Alternatively, you can use anonymous classes extending <code class="highlighter-rouge">js.Object</code> or a <a href="./sjs-defined-js-classes.html">Scala.js-defined JS trait</a>.</p> 
       <div class="spacing"></div> 
      </div> 
      <div class="col-md-3"> 
       <nav class="toc" role="navigation"> 
        <ul> 
         <li> <a href="/doc/"> Introduction </a> </li> 
         <li> <a href="/doc/sjs-for-js/"> Scala.js for JavaScript developers </a> </li> 
         <ul> 
          <li> <a href="/doc/sjs-for-js/es6-to-scala-part1.html"> From ES6 to Scala: Basics </a> </li> 
          <li> <a href="/doc/sjs-for-js/es6-to-scala-part2.html"> From ES6 to Scala: Collections </a> </li> 
          <li> <a href="/doc/sjs-for-js/es6-to-scala-part3.html"> From ES6 to Scala: Advanced </a> </li> 
         </ul> 
         <li> <a href="/doc/project/"> Project setup </a> </li> 
         <ul> 
          <li> <a href="/doc/project/building.html"> Building the application </a> </li> 
          <li> <a href="/doc/project/dependencies.html"> Dependencies </a> </li> 
          <li> <a href="/doc/project/module.html"> Emitting modules </a> </li> 
          <li> <a href="/doc/project/js-environments.html"> JavaScript Environments </a> </li> 
          <li> <a href="/doc/project/cross-build.html"> Cross-building </a> </li> 
          <li> <a href="/doc/project/testing.html"> Testing </a> </li> 
         </ul> 
         <li> <a href="/doc/interoperability/"> JavaScript interoperability </a> </li> 
         <ul> 
          <li> <a href="/doc/interoperability/types.html"> <b>JavaScript types</b> </a> </li> 
          <li> <a href="/doc/interoperability/facade-types.html"> Write facade types for JS APIs </a> </li> 
          <li> <a href="/doc/interoperability/global-scope.html"> Access to the JavaScript global scope (1.x only) </a> </li> 
          <li> <a href="/doc/interoperability/export-to-javascript.html"> Export Scala.js APIs </a> </li> 
          <li> <a href="/doc/interoperability/sjs-defined-js-classes.html"> Write JavaScript classes in Scala.js </a> </li> 
         </ul> 
         <li> <a href="/doc/api.html"> Scala.js API </a> </li> 
         <ul> 
          <li> <a href="/doc/all-api.html"> APIs of previous versions </a> </li> 
         </ul> 
         <li> <a href="/doc/semantics.html"> Semantics of Scala.js </a> </li> 
         <li> <a href="/doc/internals/"> Internals </a> </li> 
         <ul> 
          <li> <a href="/doc/internals/performance.html"> Performance </a> </li> 
          <li> <a href="/doc/internals/downloads.html"> Standalone distribution </a> </li> 
          <li> <a href="/doc/internals/version-history.html"> Version history </a> </li> 
         </ul> 
         <li> <a href="/doc/faq.html"> FAQ </a> </li> 
        </ul> 
       </nav> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="footerwrap"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-md-4"> 
      <h4>LEARN</h4> 
      <div class="hline-w"></div> 
      <a class="grey-text text-lighten-3" href="/doc/">Documentation</a>
      <br> 
      <a class="grey-text text-lighten-3" href="/tutorial/">Tutorial</a>
      <br> 
      <a class="grey-text text-lighten-3" href="/doc/faq.html">FAQ</a> 
     </div> 
     <div class="col-md-4"> 
      <h4>COMMUNITY</h4> 
      <div class="hline-w"></div> 
      <a class="grey-text text-lighten-3" href="https://gitter.im/scala-js/scala-js">Gitter chat</a>
      <br> 
      <a class="grey-text text-lighten-3" href="http://stackoverflow.com/questions/tagged/scala.js">Stackoverflow</a>
      <br> 
      <a class="grey-text text-lighten-3" href="https://groups.google.com/forum/?fromgroups#!forum/scala-js">Mailing list</a>
      <br> 
      <a class="grey-text text-lighten-3" href="http://twitter.com/scala_js">Twitter <i aria-hidden="true" class="fa fa-twitter"></i></a>
      <br> 
      <a href="http://github.com/scala-js/scala-js">GitHub <i aria-hidden="true" class="fa fa-github"></i></a> 
     </div> 
     <div class="col-md-4"> 
     </div> 
    </div> 
   </div> 
  </div> 
  <script type="text/javascript">
// delay loading of all JS assets only after first render
function downloadJSAtOnload() {
  var element = document.createElement("script");
  element.src = "/assets/bundle-98e245495d1b6a9e9a64bd1958b1c2b020c18a2df7a882b72edda13340b94e91.js";
  document.body.appendChild(element);
}
if (window.addEventListener)
  window.addEventListener("load", downloadJSAtOnload, false);
else if (window.attachEvent)
  window.attachEvent("onload", downloadJSAtOnload);
else window.onload = downloadJSAtOnload;
</script> 
  <script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-42008737-1', 'scala-js.org');
ga('send', 'pageview');
</script>  
 </body>
</html>