<!doctype html>
<html lang="en">
 <head> 
  <meta http-equiv="content-type" content="text/html; charset=utf-8"> 
  <meta name="title" content="JavaScript Client"> 
  <meta name="description" content="The opencpu.js JavaScript Client Library documentation."> 
  <meta name="author" content="Jeroen Ooms"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <title>OpenCPU - JavaScript Client</title> 
  <link rel="image_src" href="images/mediumlogo.jpg"> 
  <link rel="alternate" type="application/rss+xml" title="OpenCPU" href="atom.xml"> 
  <link href="//fonts.googleapis.com/css?family=Open+Sans:400,300" rel="stylesheet" type="text/css"> 
  <link rel="stylesheet" href="css/pages.css"> 
  <!--[if lt IE 9]>
  <script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]--> 
  <link rel="apple-touch-icon" sizes="57x57" href="/favicons/apple-touch-icon-57x57.png"> 
  <link rel="apple-touch-icon" sizes="114x114" href="/favicons/apple-touch-icon-114x114.png"> 
  <link rel="apple-touch-icon" sizes="72x72" href="/favicons/apple-touch-icon-72x72.png"> 
  <link rel="apple-touch-icon" sizes="144x144" href="/favicons/apple-touch-icon-144x144.png"> 
  <link rel="apple-touch-icon" sizes="60x60" href="/favicons/apple-touch-icon-60x60.png"> 
  <link rel="apple-touch-icon" sizes="120x120" href="/favicons/apple-touch-icon-120x120.png"> 
  <link rel="apple-touch-icon" sizes="76x76" href="/favicons/apple-touch-icon-76x76.png"> 
  <link rel="apple-touch-icon" sizes="152x152" href="/favicons/apple-touch-icon-152x152.png"> 
  <link rel="icon" type="image/png" href="/favicons/favicon-196x196.png" sizes="196x196"> 
  <link rel="icon" type="image/png" href="/favicons/favicon-160x160.png" sizes="160x160"> 
  <link rel="icon" type="image/png" href="/favicons/favicon-96x96.png" sizes="96x96"> 
  <link rel="icon" type="image/png" href="/favicons/favicon-16x16.png" sizes="16x16"> 
  <link rel="icon" type="image/png" href="/favicons/favicon-32x32.png" sizes="32x32"> 
  <meta name="msapplication-TileColor" content="#da532c"> 
  <meta name="msapplication-TileImage" content="/favicons/mstile-144x144.png"> 
  <script src="js/jquery.min.js"></script> 
 </head> 
 <body> 
  <div id="wrap"> 
   <div class="navbar navbar-inverse navbar-default navbar-fixed-top fancy"> 
    <div class="container"> 
     <div class="navbar-header"> 
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
      <a class="navbar-brand" href="."><img src="images/opencpulogo.png" alt="logo"></a> 
     </div> 
     <div class="navbar-collapse collapse"> 
      <ul class="nav navbar-nav"> 
       <li><a title="Blog" href="blog.html">Blog</a></li> 
       <li><a title="API" href="api.html">API</a></li> 
       <li><a title="Download" href="download.html">Download</a></li> 
       <li><a title="Apps" href="apps.html">Apps</a></li> 
       <li><a title="Cloud server" href="cloud.html">Cloud</a></li> 
       <li><a title="JS library" href="jslib.html">JS</a></li> 
       <li><a title="Papers" href="papers.html">Papers</a></li> 
       <li><a title="Help" href="help.html">Help</a></li> 
      </ul> 
      <ul class="nav navbar-nav pull-right"> 
       <li><a title="Atom Feed" href="atom.xml"><i class="icon icon-rss-sign"></i></a></li> 
      </ul> 
     </div> 
    </div> 
   </div> 
   <div class="page"> 
    <div class="container"> 
     <header class="pageheader" id="overview"> 
      <h1>JavaScript Client</h1> 
      <hr> 
     </header> 
     <div class="row"> 
      <div class="col-md-3"> 
       <div id="docmenu" class="bs-sidebar hidden-print" data-spy="affix" data-offset-top="150" role="complementary"> 
        <ul class="nav bs-sidenav"> 
         <li> <a class="active" href="#lib-library">About The Library</a> 
          <ul class="nav"> 
           <li><a href="#lib-apps">OpenCPU Apps</a></li> 
           <li><a href="#lib-jquery">OpenCPU and jQuery</a></li> 
           <li><a href="#lib-cors">Cross Domain (CORS)</a></li> 
           <li><a href="#lib-jsfiddle">JSfiddle Examples</a></li> 
          </ul> </li> 
         <li> <a href="#lib-stateless">Stateless functions</a> 
          <ul class="nav"> 
           <li><a href="#lib-plotwidget">Plotting Widget</a></li> 
           <li><a href="#lib-jsonrpc">Basic JSON RPC</a></li> 
          </ul> </li> 
         <li> <a href="#lib-callsandsessions">Calls and Sessions</a> 
          <ul class="nav"> 
           <li><a href="#lib-sessions">State in OpenCPU</a></li> 
           <li><a href="#lib-function">Call a Function</a></li> 
           <li><a href="#lib-arguments">Argument Types</a></li> 
           <li><a href="#lib-session">Session Object</a></li> 
          </ul> </li> 
        </ul> 
       </div> 
      </div> 
      <div class="col-md-9" role="main"> 
       <div class="page-header"> 
        <h1>CDN</h1> 
       </div> 
       <div class="row"> 
        <div class="col-md-10 col-md-offset-1"> 
         <figure class="highlight">
          <pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- OpenCPU client library --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//code.jquery.com/jquery-1.11.1.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdn.opencpu.org/opencpu-0.4.js"</span><span class="nt">&gt;&lt;/script&gt;</span></code></pre>
         </figure> 
        </div> 
       </div> 
       <div class="page-header" id="lib-library"> 
        <h1>About the Library</h1> 
       </div> 
       <p>The <a href="https://github.com/jeroenooms/opencpu.js">opencpu.js</a> JavaScript client library builds on <a target="_blank" href="http://jquery.com">jQuery</a> to provide Ajax wrappers for calling R from within a web page. The library works on all modern browsers, and lays the foundations for building scalable R web applications.</p> 
       <div class="panel panel-default" id="lib-apps"> 
        <div class="panel-heading">
         <h4>Apps<small><em> — develop, ship and deploy standalone R web applications</em></small></h4>
        </div> 
        <div class="panel-body"> 
         <p>The opencpu.js library is primarly designed for developing apps. An app is an R package which includes web page(s) that call R functions in the package through the OpenCPU API. Thereby you can easily package, ship and deploy portable, standalone R web applications. A repository of public OpenCPU apps is available at <a href="http://github.com/opencpu" target="_blank">http://github.com/opencpu</a>. Because apps are simply R packages, they are installed just like any other R package:</p> 
         <figure class="highlight">
          <pre><code class="language-r" data-lang="r"><span class="c1">#install apps: 'stocks', 'markdownapp' and 'nabel' </span><span class="n">library</span><span class="p">(</span><span class="n">devtools</span><span class="p">)</span><span class="w"> </span><span class="n">install_github</span><span class="p">(</span><span class="nf">c</span><span class="p">(</span><span class="s2">"stocks"</span><span class="p">,</span><span class="w"> </span><span class="s2">"markdownapp"</span><span class="p">,</span><span class="w"> </span><span class="s2">"nabel"</span><span class="p">),</span><span class="w"> </span><span class="n">username</span><span class="o">=</span><span class="s2">"opencpu"</span><span class="p">)</span></code></pre>
         </figure> 
         <p>By convention, the web pages are placed in the <code>/inst/www/</code> directory in the R package. To use an app locally, simply start the opencpu single-user server:</p> 
         <figure class="highlight">
          <pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">opencpu</span><span class="p">)</span><span class="w"> </span><span class="n">opencpu</span><span class="o">$</span><span class="n">browse</span><span class="p">(</span><span class="s2">"/library/stocks/www"</span><span class="p">)</span><span class="w"> </span><span class="n">opencpu</span><span class="o">$</span><span class="n">browse</span><span class="p">(</span><span class="s2">"/library/nabel/www"</span><span class="p">)</span></code></pre>
         </figure> 
         <p>The same apps can be installed and accessed on a cloud server by navigating to <code>/ocpu/library/[pkgname]/www/</code>:</p> 
         <ul> 
          <li><a href="https://cloud.opencpu.org/ocpu/library/stocks/www" target="_blank">https://cloud.opencpu.org/ocpu/library/stocks/www</a></li> 
          <li><a href="https://cloud.opencpu.org/ocpu/library/markdownapp/www" target="_blank">https://cloud.opencpu.org/ocpu/library/markdownapp/www</a></li> 
          <li><a href="https://cloud.opencpu.org/ocpu/library/nabel/www" target="_blank">https://cloud.opencpu.org/ocpu/library/nabel/www</a></li> 
         </ul> 
         <p>One app in the public repository is called <a href="https://cloud.opencpu.org/ocpu/library/appdemo/www">appdemo</a>. This application contains some minimal examples to demonstrate basic functionality and help you get started with building apps using <code>opencpu.js</code>. </p>
        </div> 
       </div> 
       <div class="panel panel-default" id="lib-jquery"> 
        <div class="panel-heading">
         <h4>OpenCPU and jQuery<small><em> — loading the libraries</em></small></h4>
        </div> 
        <div class="panel-body"> 
         <p>The latest version of <code>opencpu.js</code> is available from github: <a href="https://github.com/jeroenooms/opencpu.js">https://github.com/jeroenooms/opencpu.js</a>. The jQuery library must be included in your web page <strong>before</strong> opencpu.js, because one depends on the other. Your application code must be included <strong>after</strong> opencpu.js.</p> 
         <figure class="highlight">
          <pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/jquery.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/opencpu.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js/app.js"</span><span class="nt">&gt;&lt;/script&gt;</span></code></pre>
         </figure> 
         <p>It is recommended to ship a copy of the <code>opencpu.js</code> library with your application or website (as opposed to hotlinking it from some public location). This because the JavaScript library is in active development (0.x version) and the latest version might (radically) change from time to time. Shipping a version of <code>opencpu.js</code> with your app prevents it from breaking with upstream changes in the library. Also it is practical both for development and deployment if your app works offline.</p> 
         <p>Most functions in opencpu.js call out to <code>$.ajax</code> and return the <a href="http://api.jquery.com/jQuery.ajax/#jqXHR">jqXHR</a> object. Thereby you (the programmer) have full control over the request. Note that the A in Ajax stands for <strong>asynchronous</strong>, which means each ajax request returns immediately. Server responses are processed using <strong>callback functions</strong>. This paradigm can be a bit confusing to R users, but it results in flexible, non-blocking applications. If you are new to jQuery, at least familiarize yourself with the <code>jqXHR.done</code>, <code>jqXHR.fail</code> and <code>jqXHR.always</code> methods (see <a href="http://api.jquery.com/jQuery.ajax/#jqXHR">jqXHR</a>). </p> 
        </div> 
       </div> 
       <div class="panel panel-default" id="lib-cors"> 
        <div class="panel-heading">
         <h4>CORS<small><em> — cross-domain opencpu requests</em></small></h4>
        </div> 
        <div class="panel-body"> 
         <p>The recommended design for OpenCPU apps is to include the web pages in the R package. This results in a standalone application, which is easy to distribute and deploy and can also be used offline. Furthermore, it guarantees that the version of front-end and R code are in sync, and the package manager automatically takes care of dependencies when the app is installed on a server. </p> 
         <p>However it is also possible to use the <code>opencpu.js</code> library from an external site that is not hosted on OpenCPU. In this case, we must specify the external OpenCPU server using <code>ocpu.seturl()</code>:</p> 
         <figure class="highlight">
          <pre><code class="language-js" data-lang="js"><span class="c1">//set page to communicate to with "mypackage" on server below</span>
<span class="nx">ocpu</span><span class="p">.</span><span class="nx">seturl</span><span class="p">(</span><span class="s2">"//cloud.opencpu.org/ocpu/library/mypackage/R"</span><span class="p">)</span></code></pre>
         </figure> 
         <p>Cross domain requests are convenient for development and illustrative examples, see e.g: <a href="http://jsfiddle.net/user/opencpu/fiddles/">jsfiddle examples</a>. However, when possible it is still recommended to include a copy of your web pages in the R package for every release of your app. That way you get a nice redistributable app and there is no ambiguity over version compatibility of the front-end (web pages) and back-end (R functions). </p> 
         <p>Also note that even when using CORS, the <code>opencpu.js</code> library still requires that all R functions used by a certain application are contained in a single R package. This is on purpose, to force you to keep things organized. If you would like to use functionality from various R packages, you need to create an R package that includes some wrapper functions and formally declares its dependencies on the other packages. Writing an R package is really easy these days, so this should be no problem. </p> 
        </div> 
       </div> 
       <div class="panel panel-default" id="lib-jsfiddle"> 
        <div class="panel-heading">
         <h4>JSfiddle<small><em> — fiddle around with some examples</em></small></h4>
        </div> 
        <div class="panel-body">
          Since OpenCPU now supports CORS, and so do all major browsers, we started using JSfiddle to illustrate how to use the library. The 
         <a href="http://jsfiddle.net/user/opencpu/fiddles/">opencpu jsfiddle</a> homepage lists all our fiddles, and we will keep adding new examples. Many of these examples are actually referenced and explained in this manual page. But if this is all tl;dr, just 
         <a href="http://jsfiddle.net/user/opencpu/fiddles/">start playing</a>.
         <p></p> 
        </div> 
       </div> 
       <div class="page-header" id="lib-stateless"> 
        <h1>Stateless functions</h1> 
       </div> 
       <p>This chapter describes two high-level functions that are used to call R functions that generate either a plot or return some data. They are easy to use because they directly take the output from the R function; no session management is required.</p> 
       <div class="panel panel-default" id="lib-plotwidget"> 
        <div class="panel-heading">
         <h4>The Plot Widget <small><em> — generate an R plot in a div</em></small></h4>
        </div> 
        <div class="panel-body"> 
         <div class="panel panel-primary"> 
          <div class="panel-heading"> 
           <h3 class="panel-title"><tt>$("#mydiv").rplot( fun, [, args ] [, callback ]) <span class="pull-right">Returns: <a target="_blank" href="http://api.jquery.com/jQuery.ajax/#jqXHR"><code>jqXHR</code></a></span> </tt></h3> 
          </div> 
          <div class="panel-body"> 
           <strong>fun</strong> 
           <tt>(string)</tt> 
           <br>Name of the R function 
           <em>(required)</em> 
           <hr> 
           <strong>args</strong> 
           <tt>(object)</tt> 
           <br>Function arguments. 
           <hr> 
           <strong>callback</strong> 
           <tt>(function)</tt> 
           <br>Callback function. Not needed for plot widget. Called with session object. 
          </div> 
         </div> 
         <p>A fun an easy way to get started is by making plots. The <code>opencpu.js</code> library implements a jquery plugin called <code>rplot</code> which makes it easy to embed live plots in your webpage. For example, consider the R function <a href="http://cloud.opencpu.org/ocpu/library/stocks/R/smoothplot">smoothplot</a> in the <a href="http://github.com/opencpu/stocks">stocks package</a>:</p> 
         <figure class="highlight">
          <pre><code class="language-r" data-lang="r"><span class="c1">#The R function </span><span class="k">function</span><span class="p">(</span><span class="n">ticker</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"GOOG"</span><span class="p">,</span><span class="w"> </span><span class="n">from</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"2013-01-01"</span><span class="p">,</span><span class="w"> </span><span class="n">to</span><span class="o">=</span><span class="n">Sys.time</span><span class="p">()){</span><span class="w"> </span><span class="n">mydata</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">yahoodata</span><span class="p">(</span><span class="n">ticker</span><span class="p">,</span><span class="w"> </span><span class="n">from</span><span class="p">,</span><span class="w"> </span><span class="n">to</span><span class="p">);</span><span class="w"> </span><span class="n">qplot</span><span class="p">(</span><span class="n">Date</span><span class="p">,</span><span class="w"> </span><span class="n">Close</span><span class="p">,</span><span class="w"> </span><span class="n">data</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">mydata</span><span class="p">,</span><span class="w"> </span><span class="n">geom</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"line"</span><span class="p">,</span><span class="w"> </span><span class="s2">"smooth"</span><span class="p">));</span><span class="w"> </span><span class="p">}</span></code></pre>
         </figure> 
         <p>It defines three arguments, each of which optional: <code>ticker</code>, <code>from</code>, and <code>to</code>. These are the arguments that we can pass from the <code>opencpu.js</code> client app. In this example, we only pass the first two arguments.</p> 
         <figure class="highlight">
          <pre><code class="language-js" data-lang="js"><span class="c1">//JavaScript client code</span>
<span class="kd">var</span> <span class="nx">ticker</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">"#ticker"</span><span class="p">).</span><span class="nx">val</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">"#plotdiv"</span><span class="p">).</span><span class="nx">rplot</span><span class="p">(</span><span class="s2">"smoothplot"</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">ticker</span> <span class="p">:</span> <span class="nx">ticker</span><span class="p">,</span>
    <span class="na">from</span> <span class="p">:</span> <span class="s2">"2013-01-01"</span>
<span class="p">})</span>

<span class="c1">//optional: add custom callbacks</span>
<span class="nx">req</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">"R returned an error: "</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
<span class="p">});</span></code></pre>
         </figure> 
         <p>This creates a plot widget in the <code>#plotdiv</code> element (a div in your html). It calls the R function <code>smoothplot</code> and passes argument values as specified, and displays the generated plot including PNG, PDF, and SVG export links. The final lines specify an error handler, which is optional but recommended. Have a look at the <a href="http://jsfiddle.net/opencpu/MkAVF/">jsfiddle</a>, or the full <a href="https://cloud.opencpu.org/ocpu/library/stocks/www/">stocks app</a> to see all of this in action!</p> 
        </div> 
       </div> 
       <div class="panel panel-default" id="lib-jsonrpc"> 
        <div class="panel-heading">
         <h4>Basic JSON RPC <small><em> — a.k.a Data Processing Unit</em></small></h4>
        </div> 
        <div class="panel-body"> 
         <div class="panel panel-primary"> 
          <div class="panel-heading"> 
           <h3 class="panel-title"><tt>ocpu.rpc( fun, [, args ] [, complete ] ) <span class="pull-right">Returns: <a target="_blank" href="http://api.jquery.com/jQuery.ajax/#jqXHR"><code>jqXHR</code></a></span> </tt></h3> 
          </div> 
          <div class="panel-body"> 
           <strong>fun</strong> 
           <tt>(string)</tt> 
           <br>Name of the R function 
           <em>(required)</em> 
           <hr> 
           <strong>args</strong> 
           <tt>(object)</tt> 
           <br>Function arguments. 
           <hr> 
           <strong>complete</strong> 
           <tt>(function)</tt> 
           <br>Callback function. Is called only on success with one arg: R function return value. 
          </div> 
         </div> 
         <p>With opencpu.js we can use R as a remote calculator. Consider the very simple example of calculating the standard deviation for a vector of numbers. In this case we call the default R function sd in the stats package</p> 
         <figure class="highlight">
          <pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">mydata</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">];</span>

<span class="c1">//call R function: stats::sd(x=data)</span>
<span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">ocpu</span><span class="p">.</span><span class="nx">rpc</span><span class="p">(</span><span class="s2">"sd"</span><span class="p">,{</span>
    <span class="na">x</span> <span class="p">:</span> <span class="nx">mydata</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">output</span><span class="p">){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">"Standard Deviation equals: "</span> <span class="o">+</span> <span class="nx">output</span><span class="p">);</span>
<span class="p">});</span>

<span class="c1">//optional</span>
<span class="nx">req</span><span class="p">.</span><span class="nx">fail</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">"R returned an error: "</span> <span class="o">+</span> <span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
<span class="p">});</span></code></pre>
         </figure> 
         <p>See it in action <a href="http://jsfiddle.net/opencpu/T3cqH/">here</a>. When calling <code>ocpu.rpc</code>, the arguments as well as return value are transferred using JSON. On the R side, the <code>jsonlite</code> package is used to convert between JSON and R objects. Hence, the above code is equivalent to the R code below. The <code>output</code> object is a JSON string which is sent back to the client and parsed by JavaScript.</p> 
         <figure class="highlight">
          <pre><code class="language-r" data-lang="r"><span class="n">library</span><span class="p">(</span><span class="n">jsonlite</span><span class="p">)</span><span class="w"> </span><span class="c1">#parse input from JSON into R </span><span class="n">jsoninput</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="s1">'{"x" : [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]}'</span><span class="w"> </span><span class="n">fnargs</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">fromJSON</span><span class="p">(</span><span class="n">jsoninput</span><span class="p">)</span><span class="w"> </span><span class="c1">#the actual function call </span><span class="n">result</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">do.call</span><span class="p">(</span><span class="n">stats</span><span class="o">::</span><span class="n">sd</span><span class="p">,</span><span class="w"> </span><span class="n">fnargs</span><span class="p">)</span><span class="w"> </span><span class="c1">#convert result back to JSON </span><span class="n">jsonoutput</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">toJSON</span><span class="p">(</span><span class="n">result</span><span class="p">)</span></code></pre>
         </figure> 
         <p>Another example is available here: <a href="http://jsfiddle.net/opencpu/9nVd5/">http://jsfiddle.net/opencpu/9nVd5/</a>. This example calls the <code>lowess</code> function in R, to smooth a bunch of values. This can be useful to remove outliers from noisy data. One difference with the previous example, is that <code>lowess</code> does not return a single value, but a list with two vectors: <code>x</code> and <code>y</code>. See the lowess help page for more detail.</p> 
        </div> 
       </div> 
       <div class="page-header" id="lib-callsandsessions"> 
        <h1>Calls and Sessions</h1> 
       </div> 
       <p>The stateless functions are convenient for applications with a single R function call and a single output (either a plot or the function return value). However, other applications might require more sophisticated interaction with the R session. This section section talks about stateful applications; i.e. the client creates and manipulates objects on the server. Therefore, the difference with before is that calling functions (POST) is decoupled from retrieving output (GET).</p> 
       <div class="panel panel-default" id="lib-sessions"> 
        <div class="panel-heading">
         <h4>State in OpenCPU<small><em> — managing sessions</em></small></h4>
        </div> 
        <div class="panel-body"> 
         <p>Management of state in OpenCPU is quite different from what R users are used to, which can be confusing at first. In OpenCPU, the client does <strong>not</strong> have a single private R process on the server which handles all incoming requests, such as in e.g. Shiny or in an R terminal session. Instead, OpenCPU is plain HTTP, and therefore each requests is anonymous and <em>stateless</em>. After every function call, OpenCPU cleans (or kills) the R process that was used to handle the request. </p> 
         <p> However, all outputs of every function call, such as return value, graphics, stdout or files in working directory, are stored on the server, and a <strong>session ID</strong> is returned to the client. These session IDs can be used to control these outputs on the server in future requests. For example, a client can retrieve outputs in various formats, share them with others, or use stored R objects as arguments in subsequent function calls. Hence to build a <em>statefull</em> application, there is no point in assigning objects to the global environment. Instead, we need to design R functions to return the value of interest. This way the client can call the function, and use its return value in subsequent function calls. </p> 
         <p>This design has several advantages that are important for scalable applications:</p> 
         <ul> 
          <li>Non blocking: everything is async, your GUI won't block while waiting for R to return.</li> 
          <li>Robustness: if an R call gets stuck, errors or crashes, it doesn't take down your application.</li> 
          <li>Concurrency: applications are parallel by design. Clients can perform simultaneous requests and combine results later.</li> 
         </ul> 
        </div> 
       </div> 
       <div class="panel panel-default" id="lib-function"> 
        <div class="panel-heading">
         <h4>Call an R function <small><em> — decouple call from output</em></small></h4>
        </div> 
        <div class="panel-body"> 
         <div class="panel panel-primary"> 
          <div class="panel-heading"> 
           <h3 class="panel-title"><tt>ocpu.call( fun, [, args ] [, callback ] ) <span class="pull-right">Returns: <a target="_blank" href="http://api.jquery.com/jQuery.ajax/#jqXHR"><code>jqXHR</code></a></span> </tt></h3> 
          </div> 
          <div class="panel-body"> 
           <strong>fun</strong> 
           <tt>(string)</tt> 
           <br>Name of the R function 
           <em>(required)</em> 
           <hr> 
           <strong>args</strong> 
           <tt>(object)</tt> 
           <br>Function arguments. 
           <hr> 
           <strong>callback</strong> 
           <tt>(function)</tt> 
           <br>Callback function. 1 argument: Session object. 
          </div> 
         </div> 
         <p>The <code>ocpu.call</code> function is the stateful equivalent of <code>ocpu.rpc</code>. It has the same arguments, but the difference is in the callback function. The <code>ocpu.rpc</code> callback argument is a JSON object containing the data returned by the R function. The <code>ocpu.call</code> callback argument is a <em>Session object</em>. The session object is a javascript class that stores the session ID; it does not contain any actual data. However, from the session object, we can asynchronously retrieve data, plots, files, stdout, etc. See <a href="http://jsfiddle.net/opencpu/tmqab/">this jsfiddle</a> in action.</p> 
         <figure class="highlight">
          <pre><code class="language-js" data-lang="js"><span class="c1">//toy example</span>
<span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">ocpu</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">"rnorm"</span><span class="p">,</span> <span class="p">{</span><span class="na">n</span><span class="p">:</span> <span class="mi">100</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">session</span><span class="p">){</span>

    <span class="c1">//read the session properties (just for fun)</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">"#key"</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">getKey</span><span class="p">());</span>
    <span class="nx">$</span><span class="p">(</span><span class="s2">"#location"</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">getLoc</span><span class="p">());</span>

    <span class="c1">//retrieve session console (stdout) async</span>
    <span class="nx">session</span><span class="p">.</span><span class="nx">getConsole</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">outtxt</span><span class="p">){</span>
        <span class="nx">$</span><span class="p">(</span><span class="s2">"#output"</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">outtxt</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="c1">//retrieve the returned object async</span>
    <span class="nx">session</span><span class="p">.</span><span class="nx">getObject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
        <span class="c1">//data is the object returned by the R function</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s2">"Array of length "</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="s2">".\nFirst few values:"</span> <span class="o">+</span> <span class="nx">data</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">));</span>
    <span class="p">});</span>
<span class="p">})</span></code></pre>
         </figure> 
         <p>We can also use the Session object to pass the R value returned by the function call as an argument to a subsequent function call, without ever retrieving the object. All state in OpenCPU is managed by controlling R objects in sessions on the server. This <a href="http://jsfiddle.net/opencpu/ecwbd/">jsfiddle example</a> continues on the previous example, and calculates the variance of the vector generated before, by passing the session object as an argument. A more simple example <a href="http://jsfiddle.net/opencpu/mH52T/">here</a></p> 
         <figure class="highlight">
          <pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">req1</span> <span class="o">=</span> <span class="nx">ocpu</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">"rnorm"</span><span class="p">,</span> <span class="p">{</span><span class="na">n</span><span class="p">:</span> <span class="mi">100</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">session1</span><span class="p">){</span>
    <span class="kd">var</span> <span class="nx">req2</span> <span class="o">=</span> <span class="nx">ocpu</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">"var"</span><span class="p">,</span> <span class="p">{</span><span class="na">x</span> <span class="p">:</span> <span class="nx">session1</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">session2</span><span class="p">){</span>
        <span class="nx">session2</span><span class="p">.</span><span class="nx">getObject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
            <span class="nx">alert</span><span class="p">(</span><span class="s2">"Variance equals: "</span> <span class="o">+</span> <span class="nx">data</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">});</span>
<span class="p">});</span></code></pre>
         </figure> 
        </div> 
       </div> 
       <div class="panel panel-default" id="lib-arguments"> 
        <div class="panel-heading">
         <h4>Argument Types <small><em> — passing data to opencpu</em></small></h4>
        </div> 
        <div class="panel-body"> 
         <p>In <code>opencpu.js</code> there are 4 types of arguments: a basic JavaScript value/object (automatically converted to R via JSON), a session object (represents an R value from a previous function call), a file and a code snippet. We have already seen examples the first two argument types earlier. Below is an example of using a file as an argument. The file will automatically be uploaded and used to call the R function. See it in action using <a href="http://jsfiddle.net/opencpu/5Rqcm/">this jsfiddle</a>.</p> 
         <figure class="highlight">
          <pre><code class="language-js" data-lang="js"><span class="c1">//This must be HTML5 &lt;input type="file"&gt;</span>
<span class="kd">var</span> <span class="nx">myfile</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">"#csvfile"</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="nx">files</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="kd">var</span> <span class="nx">header</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

<span class="c1">//call read.csv in R. File is automatically uploaded</span>
<span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">ocpu</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">"read.csv"</span><span class="p">,</span> <span class="p">{</span>
    <span class="s2">"file"</span> <span class="p">:</span> <span class="nx">myfile</span><span class="p">,</span>
    <span class="s2">"header"</span> <span class="p">:</span> <span class="nx">myheader</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">session</span><span class="p">){</span>
    <span class="c1">//use output here</span>
<span class="p">});</span></code></pre>
         </figure> 
         <p>The final type of argument is a code snippet. This injects raw R code into the function call. It is usually recommended to use this type only when really needed, because it requires the client to understand R code, which kills interoperability. But this argument type is useful for example in applications that explicitly let the user do some R coding. See <a href="http://jsfiddle.net/opencpu/4dgdM/">here</a> for a basic example: </p> 
         <figure class="highlight">
          <pre><code class="language-js" data-lang="js"><span class="c1">//create snippet argument</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ocpu</span><span class="p">.</span><span class="nx">Snippet</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s2">"#input"</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>

<span class="c1">//perform the request</span>
<span class="kd">var</span> <span class="nx">req</span> <span class="o">=</span> <span class="nx">ocpu</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="s2">"mean"</span><span class="p">,</span> <span class="p">{</span>
    <span class="s2">"x"</span> <span class="p">:</span> <span class="nx">x</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">session</span><span class="p">){</span>
    <span class="c1">//use output here</span>
<span class="p">});</span></code></pre>
         </figure> 
         <p>One interesting special case is using a code Snippet when calling the <code>identity</code> function in R. This comes down to executing a raw block of code in a session. Try <a href="http://jsfiddle.net/opencpu/v42v3/">this jsfiddle</a> to see this in action.</p> 
        </div> 
       </div> 
       <div class="panel panel-default" id="lib-session"> 
        <div class="panel-heading">
         <h4>The Session Object <small><em> — controlling objects, plots, files, etc</em></small></h4>
        </div> 
        <div class="panel-body"> 
         <p>The callback argument for <code>ocpu.call()</code> is always a session object. This object does not contain actual data, it just holds a sessoin ID and which can be used to retrieve output from the server. All session objects have the following methods:</p> 
         <div class="panel panel-primary"> 
          <div class="panel-heading"> 
           <h3 class="panel-title"><tt>session.getKey() <span class="pull-right">Returns: string</span> </tt></h3> 
          </div> 
          <div class="panel-body">
            Read the session ID. For debugging only. 
          </div> 
         </div> 
         <div class="panel panel-primary"> 
          <div class="panel-heading"> 
           <h3 class="panel-title"><tt>session.getLoc() <span class="pull-right">Returns: string</span> </tt></h3> 
          </div> 
          <div class="panel-body">
            Read the session URL. For debugging only. 
          </div> 
         </div> 
         <div class="panel panel-primary"> 
          <div class="panel-heading"> 
           <h3 class="panel-title"><tt>session.getFileURL( path ) <span class="pull-right">Returns: string</span> </tt></h3> 
          </div> 
          <div class="panel-body"> 
           <strong>path</strong> 
           <tt>(string)</tt> 
           <br>Path of the file w.r.t. working directory. 
           <em>(required)</em> 
          </div> 
         </div> 
         <p>The methods below initiate an ajax request and return the jqXHR object. A callback is required to process output.</p> 
         <div class="panel panel-primary"> 
          <div class="panel-heading"> 
           <h3 class="panel-title"><tt>session.getObject( [ name ] [, data ] [, success ]) <span class="pull-right">Returns: jqXHR</span> </tt></h3> 
          </div> 
          <div class="panel-body"> 
           <strong>name</strong> 
           <tt>(string)</tt> 
           <br>Name of the object. Usually not required. Defaults to .val which means the function return value. 
           <hr> 
           <strong>data</strong> 
           <tt>(object)</tt> 
           <br>Arguments for the /json output format. 
           <hr> 
           <strong>success</strong> 
           <tt>(function)</tt> 
           <br>Callback argument: function return data. 
          </div> 
         </div> 
         <div class="panel panel-primary"> 
          <div class="panel-heading"> 
           <h3 class="panel-title"><tt>session.getConsole( [ success ] ) <span class="pull-right">Returns: jqXHR</span> </tt></h3> 
          </div> 
          <div class="panel-body"> 
           <strong>success</strong> 
           <tt>(function)</tt> 
           <br>Callback argument: session console text. 
          </div> 
         </div> 
         <div class="panel panel-primary"> 
          <div class="panel-heading"> 
           <h3 class="panel-title"><tt>session.getStdout( [ success ] ) <span class="pull-right">Returns: jqXHR</span> </tt></h3> 
          </div> 
          <div class="panel-body"> 
           <strong>success</strong> 
           <tt>(function)</tt> 
           <br>Callback argument: session stdout text. 
          </div> 
         </div> 
         <div class="panel panel-primary"> 
          <div class="panel-heading"> 
           <h3 class="panel-title"><tt>session.getFile( path [, success ] ) <span class="pull-right">Returns: jqXHR</span> </tt></h3> 
          </div> 
          <div class="panel-body"> 
           <strong>path</strong> 
           <tt>(string)</tt> 
           <br>Path of the file w.r.t. working directory. 
           <em>(required)</em> 
           <hr> 
           <strong>success</strong> 
           <tt>(function)</tt> 
           <br>Callback argument: file content. 
          </div> 
         </div> 
        </div> 
       </div> 
       <div style="height:500px;"></div> 
      </div> 
     </div> 
     <script>
$(function(){
	$('body').scrollspy({ target: '#docmenu', offset:80 })
});

//fancy scrolling animation
if(!(/iPhone|iPod|iPad|Android|BlackBerry/).test(navigator.userAgent)){
	$("#docmenu li a").on('click', function(e) {
		// prevent default anchor click behavior
		e.preventDefault();
		$(this).blur();

	 	// store hash
	 	var hash = this.hash;

		// animate
		$('html, body').animate({
			scrollTop: $(this.hash).offset().top - 65
		}, 500, function(){
			// when done, add hash to url
			// (default click behaviour)
			window.location.hash = hash;
		});
	});
}
</script> 
    </div> 
   </div> 
   <div id="push"></div> 
  </div> 
  <div id="footer" class="hidden-print fancy"> 
   <section class="meta"> 
    <div class="container"> 
     <div class="row"> 
      <div class="col-lg-2 col-lg-offset-2 col-sm-3 col-xs-6"> 
       <a href="https://www.opencpu.org"> <i class="icon icon-home icon-4x"></i>OpenCPU Home </a> 
      </div> 
      <div class="col-lg-2 col-sm-3 col-xs-6"> 
       <a href="https://twitter.com/opencpu"> <i class="icon icon-twitter icon-4x"></i>OpenCPU on Twitter </a> 
      </div> 
      <div class="col-lg-2 col-sm-3 col-xs-6"> 
       <a href="https://github.com/opencpu/opencpu"> <i class="icon icon-github icon-4x"></i>Github Development </a> 
      </div> 
      <div class="col-lg-2 col-sm-3 col-xs-6"> 
       <a href="https://github.com/rwebapps"> <i class="icon icon-archive icon-4x"></i>OpenCPU Apps </a> 
      </div> 
     </div> 
    </div> 
   </section> 
  </div> 
  <script type="text/javascript">

var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-701288-6']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

</script> 
  <script src="js/bootstrap.min.js"></script>  
 </body>
</html>