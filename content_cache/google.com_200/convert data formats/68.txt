<!doctype html>
<html ?>
 <head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,minimum-scale=1,initial-scale=1">
  <link rel="canonical" href="https://code.lengstorf.com/get-form-values-as-json/">
  <title>How to Convert HTML Form Field Values to a JSON Object</title>
  <meta name="description" content="Jason Lengstorf is a developer, designer, author, and speaker. He creates videos &amp; articles about development, tools, and building better websites.">
  <link rel="apple-touch-icon" sizes="57x57" href="https://code.lengstorf.com/apple-touch-icon-57x57.png">
  <link rel="apple-touch-icon" sizes="60x60" href="https://code.lengstorf.com/apple-touch-icon-60x60.png">
  <link rel="apple-touch-icon" sizes="72x72" href="https://code.lengstorf.com/apple-touch-icon-72x72.png">
  <link rel="apple-touch-icon" sizes="76x76" href="https://code.lengstorf.com/apple-touch-icon-76x76.png">
  <link rel="apple-touch-icon" sizes="114x114" href="https://code.lengstorf.com/apple-touch-icon-114x114.png">
  <link rel="apple-touch-icon" sizes="120x120" href="https://code.lengstorf.com/apple-touch-icon-120x120.png">
  <link rel="apple-touch-icon" sizes="144x144" href="https://code.lengstorf.com/apple-touch-icon-144x144.png">
  <link rel="apple-touch-icon" sizes="152x152" href="https://code.lengstorf.com/apple-touch-icon-152x152.png">
  <link rel="apple-touch-icon" sizes="180x180" href="https://code.lengstorf.com/apple-touch-icon-180x180.png">
  <link rel="icon" type="image/png" href="https://code.lengstorf.com/favicon-32x32.png?v=2" sizes="32x32">
  <link rel="icon" type="image/png" href="https://code.lengstorf.com/favicon-194x194.png?v=2" sizes="194x194">
  <link rel="icon" type="image/png" href="https://code.lengstorf.com/favicon-96x96.png?v=2" sizes="96x96">
  <link rel="icon" type="image/png" href="https://code.lengstorf.com/android-chrome-192x192.png?v=2" sizes="192x192">
  <link rel="icon" type="image/png" href="https://code.lengstorf.com/favicon-16x16.png?v=2" sizes="16x16">
  <link rel="manifest" href="https://code.lengstorf.com/manifest.json">
  <link rel="mask-icon" href="https://code.lengstorf.com/safari-pinned-tab.svg" color="#c319ff">
  <meta name="msapplication-TileColor" content="#c319ff">
  <meta name="msapplication-TileImage" content="/mstile-144x144.png">
  <meta name="theme-color" content="#faf8fd">
  <meta itemprop="wordCount" content="4459">
  <script type="application/ld+json">{
  "@context": "http://schema.org",
  "@type": "NewsArticle",
  "mainEntityOfPage": "https://code.lengstorf.com/get-form-values-as-json/",
  "headline": "",
  "datePublished": "2016-08-07T00:00:00Z",
  "dateModified": "2016-08-07T00:00:00Z",
  "description": "",
  "author": {
    "@type": "Person",
    "name": "Jason Lengstorf"
  },
  "publisher": {
    "@type": "Organization",
    "name": "Jason Lengstorf",
    "logo": {
      "@type": "ImageObject",
      "url": "https://code.lengstorf.com/images/code-lengstorf-logo.jpg",
      "width": 600,
      "height": 60
    }
  },
  "image": {
    "@type": "ImageObject",
    "url": "https://code.lengstorf.com/images/code-lengstorf.jpg",
    "width": 1380,
    "height": 690
  }
}</script>
  <meta property="og:title" content="How to Convert HTML Form Field Values to a JSON Object">
  <meta property="og:description" content="Using AJAX is really common, but it’s still tricky to get the values out of a form without using a library.
And that’s because it seems pretty intimidating to set up all the loops and checks required to deal with parsing a form and all its child elements. You get into heavy discussions of whether you should use for, for...in, for...of, or forEach, and after trying to keep up with the various performance, semantic, and stylistic reasons for making those choices, your brain starts to liquefy and drip out your ears — at which point it’s easy to just say, “Fuck it; let’s just use jQuery.">
  <meta property="og:type" content="article">
  <meta property="og:url" content="https://code.lengstorf.com/get-form-values-as-json/">
  <meta property="og:image" content="https://code.lengstorf.com/images/code-lengstorf.jpg">
  <meta property="og:updated_time" content="2016-08-07T00:00:00Z">
  <meta property="article:author" content="https://www.facebook.com/jlengstorf">
  <meta property="article:publisher" content="https://www.facebook.com/jlengstorf">
  <meta property="article:published_time" content="2016-08-07T00:00:00Z">
  <meta property="article:modified_time" content="2016-08-07T00:00:00Z">
  <meta property="article:section" content="blog">
  <meta property="fb:admins" content="1468448880">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:image" content="https://code.lengstorf.com/images/code-lengstorf.jpg">
  <meta name="twitter:title" content="How to Convert HTML Form Field Values to a JSON Object">
  <meta name="twitter:description" content="Using AJAX is really common, but it’s still tricky to get the values out of a form without using a library.
And that’s because it seems pretty intimidating to set up all the loops and checks required to deal with parsing a form and all its child elements. You get into heavy discussions of whether you should use for, for...in, for...of, or forEach, and after trying to keep up with the various performance, semantic, and stylistic reasons for making those choices, your brain starts to liquefy and drip out your ears — at which point it’s easy to just say, “Fuck it; let’s just use jQuery.">
  <style amp-custom>body{background:#fff;color:#110117}@font-face{font-family:mallory;src:url(/fonts/Mallory-Book.eot);src:url(/fonts/Mallory-Book.eot?#iefix) format('embedded-opentype'),url(/fonts/Mallory-Book.woff) format('woff');font-weight:400;font-style:normal}@font-face{font-family:mallory;src:url(/fonts/Mallory-Bold.eot);src:url(/fonts/Mallory-Bold.eot?#iefix) format('embedded-opentype'),url(/fonts/Mallory-Bold.woff) format('woff');font-weight:700;font-style:normal}@font-face{font-family:mallory;src:url(/fonts/Mallory-Black.eot);src:url(/fonts/Mallory-Black.eot?#iefix) format('embedded-opentype'),url(/fonts/Mallory-Black.woff) format('woff');font-weight:800;font-style:normal}@font-face{font-family:mallory-microplus;src:url(/fonts/MalloryMP-Book.eot);src:url(/fonts/MalloryMP-Book.eot?#iefix) format('embedded-opentype'),url(/fonts/MalloryMP-Book.woff) format('woff');font-weight:400;font-style:normal}@font-face{font-family:mallory-microplus;src:url(/fonts/MalloryMP-BookItalic.eot);src:url(/fonts/MalloryMP-BookItalic.eot?#iefix) format('embedded-opentype'),url(/fonts/MalloryMP-BookItalic.woff) format('woff');font-weight:400;font-style:italic}@font-face{font-family:mallory-microplus;src:url(/fonts/MalloryMP-Bold.eot);src:url(/fonts/MalloryMP-Bold.eot?#iefix) format('embedded-opentype'),url(/fonts/MalloryMP-Bold.woff) format('woff');font-weight:700;font-style:normal}@font-face{font-family:mallory-microplus;src:url(/fonts/MalloryMP-BoldItalic.eot);src:url(/fonts/MalloryMP-BoldItalic.eot?#iefix) format('embedded-opentype'),url(/fonts/MalloryMP-BoldItalic.woff) format('woff');font-weight:700;font-style:italic}body,html{color:#584d5d;font-family:mallory-microplus,sans-serif;font-size:14px;line-height:1.75;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}@media (min-width:768px){body,html{font-size:17.5px}}code,pre{font-family:monospace;text-transform:none}h1,h2,h3,h4,h5,h6{color:#110117;font-family:mallory,sans-serif;line-height:1}h2+*,h3+*{margin-top:8px;margin-top:.5rem}@media (min-width:768px){h2+*,h3+*{margin-top:.33333rem}}:not(.figure)+h2:not([class]),:not(.figure)+h3:not([class]),:not(.figure)+h4:not([class]),:not(.figure)+h5:not([class]),:not(.figure)+h6:not([class]){margin-top:32px;margin-top:2rem}h1{font-size:275%}h2{font-size:175%;font-weight:700}h2 strong{font-weight:400}h3{font-size:125%;font-weight:800}h3,h4{text-transform:uppercase}h4{color:#8a828e;font-size:115%;font-weight:400;letter-spacing:.05em}sup{position:relative;top:-8px;top:-.5rem;margin:0 .25em;font-size:10.5px;line-height:.75;vertical-align:baseline}sup>a[rel]{display:inline-block;height:14px;width:14px;background-color:#8a828e;border:0;border-radius:50%;color:#fff;font-size:9px;font-style:normal;font-weight:700;line-height:16px;text-align:center;text-decoration:none;-webkit-transition:background-color .2s linear;transition:background-color .2s linear}sup>a[rel]:active,sup>a[rel]:focus,sup>a[rel]:hover{background-color:#110117;border:0;outline:none}ol ol,ol ul,ul ol,ul ul{margin-bottom:8px;margin-bottom:.5rem}li,ol ol,ol ul,ul ol,ul ul{margin-top:4px;margin-top:.25rem}aside{font-family:mallory-microplus,sans-serif}code{display:inline-block;margin-top:0;padding:0 .25em;background:#faf8fd;border:1px solid #e1dfe4;border-radius:4px;font-size:100%;line-height:1.375}.code-caption{margin-top:-28px;margin-top:-1.75rem;color:#8a828e;font-size:9px;letter-spacing:.05em;line-height:1.2;text-transform:uppercase}.code-caption a{color:inherit}*{margin:0;box-sizing:border-box}*+*{margin-top:12px;margin-top:.75rem}@media (min-width:768px){*+*{margin-top:1.25rem}}body{margin:0}.sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);border:0}.highlight{background-color:#272822}.highlight code{background:transparent;border:0}.highlight .hll{background-color:#49483e}.highlight .c{color:#75715e}.highlight .err{color:#960050;background-color:#1e0010}.highlight .k{color:#66d9ef}.highlight .l{color:#ae81ff}.highlight .n{color:#f8f8f2}.highlight .o{color:#f92672}.highlight .p{color:#f8f8f2}.highlight .c1,.highlight .cm,.highlight .cp,.highlight .cs{color:#75715e}.highlight .ge{font-style:italic}.highlight .gs{font-weight:700}.highlight .kc,.highlight .kd{color:#66d9ef}.highlight .kn{color:#f92672}.highlight .kp,.highlight .kr,.highlight .kt{color:#66d9ef}.highlight .ld{color:#e6db74}.highlight .m{color:#ae81ff}.highlight .s{color:#e6db74}.highlight .na{color:#a6e22e}.highlight .nb{color:#f8f8f2}.highlight .nc{color:#a6e22e}.highlight .no{color:#66d9ef}.highlight .nd{color:#a6e22e}.highlight .ni{color:#f8f8f2}.highlight .ne,.highlight .nf{color:#a6e22e}.highlight .nl,.highlight .nn{color:#f8f8f2}.highlight .nx{color:#a6e22e}.highlight .py{color:#f8f8f2}.highlight .nt{color:#f92672}.highlight .nv{color:#f8f8f2}.highlight .ow{color:#f92672}.highlight .w{color:#f8f8f2}.highlight .mf,.highlight .mh,.highlight .mi,.highlight .mo{color:#ae81ff}.highlight .s2,.highlight .sb,.highlight .sc,.highlight .sd{color:#e6db74}.highlight .se{color:#ae81ff}.highlight .s1,.highlight .sh,.highlight .si,.highlight .sr,.highlight .ss,.highlight .sx{color:#e6db74}.highlight .bp,.highlight .vc,.highlight .vg,.highlight .vi{color:#f8f8f2}.highlight .il{color:#ae81ff}.highlight .gu{color:#75715e}.highlight .gd{color:#f92672}.highlight .gi{color:#a6e22e}.article{display:block}@supports (display:flex){.article{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}}.article__header{overflow:hidden}@supports (display:flex){.article__header{-webkit-box-flex:3;-ms-flex:3 100%;flex:3 100%;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}}@media (min-width:768px){.article__header{-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}}.article__header--front-end{color:#c319ff}.article__header--api{color:#1999ff}.article__header--build-tools{color:#65e200}.article__header--devops{color:#ff8a00}.article__header--cms{color:#ff2414}.article__heading-group{-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2;min-width:300px;padding:24px 5vw;padding:1.5rem 5vw}@media (min-width:768px){.article__heading-group{-webkit-box-flex:2;-ms-flex:2 75%;flex:2 75%;max-width:75vw;padding:4rem 2rem 1rem}}.article__heading{display:block;color:#110117;font-size:8vw}@media (min-width:480px){.article__heading{font-size:6vw}}@media (min-width:768px){.article__heading{max-width:750px;font-size:250%}}.article__heading-link{color:inherit;text-decoration:none}.article__subheading{margin-top:8px;margin-top:.5rem;font-family:mallory-microplus,sans-serif;font-size:4.75vw;font-weight:700;line-height:1.25}@media (min-width:480px){.article__subheading{font-size:3.25vw}}@media (min-width:768px){.article__subheading{max-width:750px;font-size:125%;line-height:1.1}}.article__meta-group{-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1;margin:0;min-width:25vw}@media (min-width:768px){.article__video{padding-right:5vw}}.article__table-of-contents-heading{padding-left:.5vw;border-left:2px solid transparent;color:#9b949e;font-size:62.5%;font-weight:400;letter-spacing:.05em;line-height:1;text-transform:uppercase}.article__table-of-contents{display:none;float:left;max-width:26vw;min-width:25vw;padding:24px 5vw;padding:1.5rem 5vw;line-height:1.5}@supports (display:flex){.article__table-of-contents{-webkit-box-flex:1;-ms-flex:1 25%;flex:1 25%;max-width:25vw;float:none}}@media (min-width:768px){.article__table-of-contents{display:block}}.article__table-of-contents nav{margin-top:0}.article__table-of-contents-list,.article__table-of-contents ul{list-style:none;margin:0;padding:0}ul.article__table-of-contents-list{border-bottom:2px solid transparent;padding-bottom:16px;padding-bottom:1rem}.article--front-end ul.article__table-of-contents-list{border-color:#c319ff}.article--api ul.article__table-of-contents-list{border-color:#1999ff}.article--build-tools ul.article__table-of-contents-list{border-color:#65e200}.article--devops ul.article__table-of-contents-list{border-color:#ff8a00}.article--cms ul.article__table-of-contents-list{border-color:#ff2414}.article__table-of-contents-list-item,.article__table-of-contents li li li{margin-top:4px;margin-top:.25rem;padding-left:.75vw;color:#8a828e;font-size:85%;font-weight:400}.article__table-of-contents-link,.article__table-of-contents nav>ul>li>ul>li{margin-top:8px;margin-top:.5rem;color:#584d5d;font-size:75%;font-weight:700}.article__table-of-contents-link{font-weight:400}.article__table-of-contents-link--selected{font-weight:700}.article__table-of-contents nav>ul>li>ul>li>ul>li{color:#695f6d}.article__table-of-contents nav>ul>li>ul>li>ul>li>ul>li{letter-spacing:.05em;line-height:1.2;text-transform:uppercase}.article__table-of-contents-link,.article__table-of-contents a{display:block;padding:0 .25vw 0 .5vw;color:inherit;text-decoration:none;border-left:2px solid transparent}.article__table-of-contents-link--selected,.article__table-of-contents-link:active,.article__table-of-contents-link:focus,.article__table-of-contents-link:hover,.article__table-of-contents a--selected,.article__table-of-contents a:active,.article__table-of-contents a:focus,.article__table-of-contents a:hover{background-color:#faf8fd;border-color:#e1dfe4;outline:none}.article--front-end .article__table-of-contents-link--selected,.article--front-end .article__table-of-contents-link:active,.article--front-end .article__table-of-contents-link:focus,.article--front-end .article__table-of-contents-link:hover,.article--front-end .article__table-of-contents a--selected,.article--front-end .article__table-of-contents a:active,.article--front-end .article__table-of-contents a:focus,.article--front-end .article__table-of-contents a:hover{background-color:#f9e8ff;border-color:#c319ff}.article--api .article__table-of-contents-link--selected,.article--api .article__table-of-contents-link:active,.article--api .article__table-of-contents-link:focus,.article--api .article__table-of-contents-link:hover,.article--api .article__table-of-contents a--selected,.article--api .article__table-of-contents a:active,.article--api .article__table-of-contents a:focus,.article--api .article__table-of-contents a:hover{background-color:#e8f5ff;border-color:#1999ff}.article--build-tools .article__table-of-contents-link--selected,.article--build-tools .article__table-of-contents-link:active,.article--build-tools .article__table-of-contents-link:focus,.article--build-tools .article__table-of-contents-link:hover,.article--build-tools .article__table-of-contents a--selected,.article--build-tools .article__table-of-contents a:active,.article--build-tools .article__table-of-contents a:focus,.article--build-tools .article__table-of-contents a:hover{background-color:#f0fce6;border-color:#65e200}.article--devops .article__table-of-contents-link--selected,.article--devops .article__table-of-contents-link:active,.article--devops .article__table-of-contents-link:focus,.article--devops .article__table-of-contents-link:hover,.article--devops .article__table-of-contents a--selected,.article--devops .article__table-of-contents a:active,.article--devops .article__table-of-contents a:focus,.article--devops .article__table-of-contents a:hover{background-color:#fff3e6;border-color:#ff8a00}.article--cms .article__table-of-contents-link--selected,.article--cms .article__table-of-contents-link:active,.article--cms .article__table-of-contents-link:focus,.article--cms .article__table-of-contents-link:hover,.article--cms .article__table-of-contents a--selected,.article--cms .article__table-of-contents a:active,.article--cms .article__table-of-contents a:focus,.article--cms .article__table-of-contents a:hover{background-color:#ffe9e8;border-color:#ff2414}.article__content{float:left;min-width:70vw;margin:0;padding:32px 5vw;padding:2rem 5vw;background-image:-webkit-linear-gradient(285deg,#fbf9fd,rgba(251,249,253,0) 50vw);background-image:linear-gradient(165deg,#fbf9fd,rgba(251,249,253,0) 50vw)}@supports (display:flex){.article__content{-webkit-box-flex:2;-ms-flex:2 100%;flex:2 100%;float:none}}@media (min-width:768px){.article__content{max-width:75vw;padding:3rem 0 5rem 2rem;border-left:2px solid #fff;border-top:2px solid #fff}@supports (display:flex){.article__content{-webkit-box-flex:2;-ms-flex:2 74%;flex:2 74%;min-width:0;max-width:75%}}}.article__content--front-end{background-image:-webkit-linear-gradient(285deg,#f9e8ff,rgba(249,232,255,0) 50vw);background-image:linear-gradient(165deg,#f9e8ff,rgba(249,232,255,0) 50vw)}.article__content--api{background-image:-webkit-linear-gradient(285deg,#e8f5ff,rgba(232,245,255,0) 50vw);background-image:linear-gradient(165deg,#e8f5ff,rgba(232,245,255,0) 50vw)}.article__content--build-tools{background-image:-webkit-linear-gradient(285deg,#f0fce6,hsla(93,79%,95%,0) 50vw);background-image:linear-gradient(165deg,#f0fce6,hsla(93,79%,95%,0) 50vw)}.article__content--devops{background-image:-webkit-linear-gradient(285deg,#fff3e6,rgba(255,243,230,0) 50vw);background-image:linear-gradient(165deg,#fff3e6,rgba(255,243,230,0) 50vw)}.article__content--cms{background-image:-webkit-linear-gradient(285deg,#ffe9e8,hsla(3,100%,95%,0) 50vw);background-image:linear-gradient(165deg,#ffe9e8,hsla(3,100%,95%,0) 50vw)}.article__content .codepen,.article__content>:not([class]){max-width:750px}@media (min-width:768px){.article__content .codepen,.article__content>:not([class]){margin-right:5vw}}.article__aside{display:block;max-width:750px;padding:16px 2vw;padding:1rem 2vw;font-size:75%;line-height:1.5;background:#faf8fd;border:1px solid #eeecf0}@media (min-width:768px){.article__aside{margin-right:5vw}}.article--front-end .article__aside{background-color:#f9e8ff;border-color:#f3d1ff}.article--api .article__aside{background-color:#e8f5ff;border-color:#d1ebff}.article--build-tools .article__aside{background-color:#f0fce6;border-color:#e0f9cc}.article--devops .article__aside{background-color:#fff3e6;border-color:#ffe8cc}.article--cms .article__aside{background-color:#ffe9e8;border-color:#ffd3d0}.article amp-youtube{max-width:950px;border:1px solid #eeecf0}.article amp-img{background:#eeecf0;border:1px solid #eeecf0;border-radius:50%}.article i-amp-scroll-container{margin-top:0}.article__discussion{max-width:750px;margin-top:48px;margin-top:3rem}.aside{display:inline-block;margin:0;background:#e6e6e6;line-height:1.25;text-decoration:none}.aside:before{content:'';right:calc(1vw * 5 + 200px);width:100px;height:.625em;border-bottom:1px dashed #ccc}.aside:after,.aside:before{position:absolute;display:block}.aside:after{content:attr(data-aside);right:5vw;-webkit-transform:translateY(-55%);transform:translateY(-55%);width:200px;margin:0;padding:16px;padding:1rem;font-size:75%;background:#e6e6e6;border:1px dashed #ccc}.figure{max-width:100%}.figure--alignright{display:block;max-width:300px;margin-left:auto;margin-right:auto;margin-bottom:32px;margin-bottom:2rem}@media (min-width:600px){.figure--alignright{float:right;margin-left:2rem;margin-right:2rem}}@media (min-width:768px){.figure--alignright{max-width:200px}}@media (min-width:1024px){.figure--alignright{max-width:300px}}@media (min-width:1500px){.figure--alignright{margin-right:calc(100% - 1050px)}}amp-img.figure__image{border-radius:0;max-width:100%}.figure__caption{margin-top:4px;margin-top:.25rem;color:#8a828e;font-size:9px;letter-spacing:.05em;line-height:1.2;text-transform:uppercase}.footer{display:block;width:100%;padding:32px 5vw;padding:2rem 5vw;background-color:#faf8fd;border-bottom:1px solid #eeecf0;border-top:1px solid #eeecf0;text-align:center}@media (min-width:650px){.footer{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;padding-left:0;padding-right:0}.footer__meta{-webkit-box-flex:1;-ms-flex:1 25%;flex:1 25%;min-width:25vw;padding-right:1rem;text-align:right}.footer__bio{-webkit-box-flex:2;-ms-flex:2 75%;flex:2 75%;min-width:75vw;margin-top:0;padding:0 2rem;text-align:left}}.footer__image{display:inline-block;width:150px;height:150px;border-radius:50%}.footer__links{max-width:750px;margin-left:auto;margin-right:auto}@media (min-width:650px){.footer__links{display:block;max-width:125px;margin-top:0;margin-right:0;text-align:center}}.footer__link{display:inline-block;max-width:30px;margin:0 16px;margin:0 1rem}@media (min-width:650px){.footer__link{max-width:20px;margin:0 .5rem}}.footer__link:active,.footer__link:focus,.footer__link:hover{outline:0}.footer__link:active path,.footer__link:focus path,.footer__link:hover path{fill:#110117}.footer__icon{width:100%}.footer__icon path{fill:#584d5d;-webkit-transition:fill .2s ease-in-out;transition:fill .2s ease-in-out}h3.footer__heading{max-width:750px;margin-left:auto;margin-right:auto;margin-top:8px;margin-top:.5rem}@media (min-width:650px){h3.footer__heading{margin:0}}.footer__worked-with{color:#8a828e;font-size:8px;font-weight:400;letter-spacing:.1em;text-transform:uppercase}amp-img.footer__worked-with-image{margin-top:0;background-color:transparent;border:0;border-radius:0;max-width:100%}.footer__blurb{max-width:750px;margin-left:auto;margin-right:auto}@media (min-width:650px){.footer__blurb{margin-left:0;margin-right:0}}@media (min-width:768px){.footer__blurb{font-size:85%}}.footnotes{max-width:750px;color:#8a828e;font-size:87.5%}.footnotes hr{border-top:1px solid #faf8fd}.footnotes ol{padding-left:0;counter-reset:a;list-style:none}.footnotes li{position:relative;margin:0;padding:7px;padding-left:28px;border:1px solid transparent;border-radius:7px;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.footnotes li:before{counter-increment:a;content:counter(a);position:absolute;left:7px;top:10px;display:inline-block;width:14px;height:14px;background-color:#8a828e;border:0;border-radius:50%;color:#fff;font-size:9px;font-weight:700;line-height:16px;text-align:center;text-decoration:none;-webkit-transition:background-color .2s linear;transition:background-color .2s linear}.highlight{clear:both;margin-bottom:32px;margin-bottom:2rem;margin-top:32px;margin-top:2rem;padding:16px 5vw;padding:1rem 5vw;border-right:20px solid #272822;overflow-x:scroll}@media (min-width:768px){.highlight{padding-left:20px;padding-right:20px}}.highlight pre{width:410px;color:#fff;font-size:80%}@media (min-width:768px){.highlight pre{width:600px;font-size:95%}}.meta{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row;background:#faf8fd;padding:8px 16px;padding:.5rem 1rem;text-align:center;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}@media (min-width:768px){.meta{-webkit-box-align:stretch;-ms-flex-align:stretch;align-items:stretch;-webkit-box-orient:vertical;-webkit-box-direction:normal;-ms-flex-direction:column;flex-direction:column;padding:1rem;text-align:right}}.meta--front-end{background-color:#c319ff}.meta--api{background-color:#1999ff}.meta--build-tools{background-color:#65e200}.meta--devops{background-color:#ff8a00}.meta--cms{background-color:#ff2414}.meta__item{display:inline-block;-webkit-box-flex:1;-ms-flex:1 20%;flex:1 20%;margin:0 2vw;color:#fff;font-family:mallory-microplus,sans-serif;font-size:62.5%;line-height:1.375}@media (min-width:768px){.meta__item{-webkit-box-flex:0;-ms-flex:none;flex:none;display:block;margin:0;line-height:1.75}}.meta__item--date{font-weight:700}@media (min-width:768px){.meta__item--date{margin-top:0;font-size:100%;line-height:2.5}@supports (display:flex){.meta__item--date{margin-top:auto}}}.meta__item--category:before{content:'Posted in '}.meta__tag{color:inherit;text-decoration:none;text-transform:lowercase}.meta__tag:before{content:'#'}.meta__tag:active,.meta__tag:focus,.meta__tag:hover{outline:0;text-decoration:underline}.nav{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;justify-conent:space-between;z-index:10}.nav__link{-webkit-box-flex:1;-ms-flex:1;flex:1;margin:0;margin-left:2px;padding:8px 1vw;padding:.5rem 1vw;min-width:55px;max-width:calc(1vw * 15 - 2px);background-color:#e7e6e8;border-bottom:4px solid #110117;color:#110117;font-family:mallory-microplus,sans-serif;font-size:62.5%;font-weight:700;line-height:1.2;text-align:center;text-decoration:none;-webkit-transition:all .25s ease-in-out;transition:all .25s ease-in-out}@media (min-width:768px){.nav__link{padding:.25rem 1vw;line-height:1.75;text-align:right}}.nav__link:active,.nav__link:focus,.nav__link:hover{outline:0;padding-bottom:8px;padding-bottom:.5rem;padding-top:8px;padding-top:.5rem;margin-bottom:-8px;margin-bottom:-.5rem}.nav__link--home{-webkit-box-flex:1;-ms-flex:1;flex:1;max-width:25vw;min-width:20px;margin-left:0;color:#fff;background-color:#110117;font-family:monospace;font-weight:400}.nav__link--home:active,.nav__link--home:focus,.nav__link--home:hover{margin-bottom:0;padding-bottom:4px;padding-bottom:.25rem;padding-top:4px;padding-top:.25rem;color:#ff2414}.nav__link--front-end{background-color:#f9e8ff;border-color:#c319ff}.nav__link--api{background-color:#e8f5ff;border-color:#1999ff}.nav__link--build-tools{background-color:#f0fce6;border-color:#65e200}.nav__link--devops{background-color:#fff3e6;border-color:#ff8a00}.nav__link--cms{background-color:#ffe9e8;border-color:#ff2414}.pagination{list-style:none;padding:0;text-align:center}.pagination__item{display:inline-block;margin:0 4px;margin:0 .25rem}.pagination__link{display:block;width:20px;width:1.25rem;background-color:transparent;border-radius:50%;color:#584d5d;font-size:10px;font-weight:700;line-height:20px;line-height:1.25rem;text-decoration:none;-webkit-transition:all .2s linear;transition:all .2s linear}.pagination__link--current,.pagination__link:active,.pagination__link:focus,.pagination__link:hover{background-color:#584d5d;color:#fff}.post-list__header{padding:8px 5vw;padding:.5rem 5vw;background-color:#faf8fd;text-align:center}.post-list__heading{font-size:75%;font-weight:400;letter-spacing:.1em;text-transform:uppercase}.post-list__article{margin-top:2px;border-bottom:2px solid #faf8fd}.post-list__article:first-child{margin-top:0}.post-list__article--front-end{border-color:#c319ff}.post-list__article--api{border-color:#1999ff}.post-list__article--build-tools{border-color:#65e200}.post-list__article--devops{border-color:#ff8a00}.post-list__article--cms{border-color:#ff2414}.post-list__read-more{display:block;margin-top:16px;margin-top:1rem;padding:4px 16px 2px;padding:.25rem 1rem .125rem;text-align:center;background:rgba(250,248,253,0);border:2px solid #110117;border-radius:8px;color:#110117;font-family:mallory-microplus,sans-serif;font-size:90%;font-weight:700;letter-spacing:.1em;line-height:1.5;text-decoration:none;text-transform:uppercase;-webkit-transition:all .1s linear;transition:all .1s linear}@media (min-width:360px){.post-list__read-more{max-width:240px;margin-left:auto;margin-right:auto}}@media (min-width:640px){.post-list__read-more{margin-left:0;margin-right:0}}.post-list__read-more--front-end{border-color:#c319ff;color:#c319ff}.post-list__read-more--front-end:active,.post-list__read-more--front-end:focus,.post-list__read-more--front-end:hover{background-color:#c319ff}.post-list__read-more--api{border-color:#1999ff;color:#1999ff}.post-list__read-more--api:active,.post-list__read-more--api:focus,.post-list__read-more--api:hover{background-color:#1999ff}.post-list__read-more--build-tools{border-color:#65e200;color:#65e200}.post-list__read-more--build-tools:active,.post-list__read-more--build-tools:focus,.post-list__read-more--build-tools:hover{background-color:#65e200}.post-list__read-more--devops{border-color:#ff8a00;color:#ff8a00}.post-list__read-more--devops:active,.post-list__read-more--devops:focus,.post-list__read-more--devops:hover{background-color:#ff8a00}.post-list__read-more--cms{border-color:#ff2414;color:#ff2414}.post-list__read-more--cms:active,.post-list__read-more--cms:focus,.post-list__read-more--cms:hover{background-color:#ff2414}.post-list__read-more:active,.post-list__read-more:focus,.post-list__read-more:hover{color:#fff;outline:0}.series-nav{padding:0}.series-nav__item{position:relative;display:block;max-width:750px;margin-top:16px;margin-top:1rem;line-height:1.25}.series-nav__item--current{padding-right:85px;font-weight:700}.series-nav__item--current a{text-decoration:none}.series-nav__item--current:after{content:'? YOU ARE HERE';position:absolute;right:0;top:50%;-webkit-transform:translateY(-50%);transform:translateY(-50%);width:80px;padding:2px 0 2px 4px;background-color:#584d5d;border-radius:.125rem;color:#fff;font-size:8px}.article--front-end .series-nav__item--current:after{background-color:#c319ff}.article--api .series-nav__item--current:after{background-color:#1999ff}.article--build-tools .series-nav__item--current:after{background-color:#65e200}.article--devops .series-nav__item--current:after{background-color:#ff8a00}.article--cms .series-nav__item--current:after{background-color:#ff2414}@media (min-width:650px){.series-nav__item{margin-left:85px}.series-nav__item--current{padding-right:0}.series-nav__item--current:after{content:'YOU ARE HERE ?';right:auto;left:-90px}}.site-footer{margin:0;padding:32px 5vw;padding:2rem 5vw;color:#9b949e;font-family:mallory-microplus,sans-serif;text-align:center}.site-footer__nav-links{margin-top:8px;margin-top:.5rem}.site-footer__nav-link{display:inline-block;margin:0;padding:0 .5vw;color:inherit;font-size:70%;text-decoration:none}.site-footer__nav-link:active,.site-footer__nav-link:focus,.site-footer__nav-link:hover{outline:none;text-decoration:underline}.site-footer__credits{font-size:75%}.site-footer__credits a{color:inherit;text-decoration:none}.site-footer__credits a:active,.site-footer__credits a:focus,.site-footer__credits a:hover{outline:none;text-decoration:underline}.site-header{margin-top:0;background-color:#fff;border-bottom:2px solid #fff}.site-content{margin-top:0}.site-content__article{position:relative}
 
</style>
  <style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}
</style>
  <noscript>
   <style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style>
  </noscript>
  <script async custom-element="amp-youtube" src="https://cdn.ampproject.org/v0/amp-youtube-0.1.js"></script>
  <script async custom-element="amp-analytics" src="https://cdn.ampproject.org/v0/amp-analytics-0.1.js"></script>
  <script async custom-element="amp-iframe" src="https://cdn.ampproject.org/v0/amp-iframe-0.1.js"></script>
  <script async src="https://cdn.ampproject.org/v0.js"></script>
 </head>
 <body class="no-js">
  <amp-analytics type="googleanalytics" id="analytics1">
   <script type="application/json">{
  "vars": {
    "account": "UA-39001606-2"
  },
  "triggers": {
    "trackPageview": {
      "on": "visible",
      "request": "pageview"
    }
  }
}</script>
  </amp-analytics>
  <header class="site-header">
   <nav class="site-header__nav nav nav--main">
    <a class="nav__link nav__link--home" href="https://code.lengstorf.com/" title="Jason Lengstorf on code">&lt;jl/&gt;</a> 
    <a class="nav__link nav__link--front-end" href="https://code.lengstorf.com/category/front-end/" title="">Front-End</a> 
    <a class="nav__link nav__link--api" href="https://code.lengstorf.com/category/api/" title="">APIs</a> 
    <a class="nav__link nav__link--build-tools" href="https://code.lengstorf.com/category/build-tools/" title="">Build Tools</a> 
    <a class="nav__link nav__link--devops" href="https://code.lengstorf.com/category/devops/" title="">DevOps</a> 
    <a class="nav__link nav__link--cms" href="https://code.lengstorf.com/category/cms/" title="">CMS</a> 
   </nav>
  </header>
  <main class="site-content">
   <article class="site-content__article article article--front-end">
    <header class="article__header article__header--front-end">
     <div class="article__heading-group">
      <h1 class="article__heading">How to Convert HTML Form Field Values to a JSON Object</h1>
      <p class="article__subheading">A simple, dependency-free way to use <code>reduce()</code> to convert all the fields in a form to a JSON object for AJAX (or whatever).</p>
     </div>
     <dl class="article__meta-group meta meta--front-end">
      <dt class="meta__label sr-only">
       Date:
      </dt>
      <dl class="meta__item meta__item--date">
       <time datetime="2016-08-07T00:00:00Z">Aug 7, 2016</time>
      </dl>
      <dt class="meta__label sr-only">
       Main Topic:
      </dt>
      <dl class="meta__item meta__item--category">
       JavaScript and CSS
      </dl>
      <dt class="meta__label sr-only">
       Tags:
      </dt>
      <dl class="meta__item meta__item--tags">
       <a class="meta__tag" href="https://code.lengstorf.com/tag/javascript/">javascript</a> 
       <a class="meta__tag" href="https://code.lengstorf.com/tag/reduce/">reduce</a> 
       <a class="meta__tag" href="https://code.lengstorf.com/tag/forms/">forms</a> 
       <a class="meta__tag" href="https://code.lengstorf.com/tag/ajax/">ajax</a> 
      </dl>
     </dl>
    </header>
    <aside class="article__table-of-contents">
     <h4 class="article__table-of-contents-heading">In This Article:</h4>
     <nav id="TableOfContents"> 
      <ul> 
       <li> 
        <ul> 
         <li><a href="#what-we-ll-be-building">What We’ll Be Building</a></li> 
         <li><a href="#before-we-get-started-goals-and-plans">Before We Get Started: Goals and Plans</a> 
          <ul> 
           <li><a href="#start-with-a-goal-what-should-we-end-up-with">Start with a goal: what should we end up with?</a></li> 
           <li><a href="#make-a-plan-how-can-we-convert-form-fields-to-json">Make a plan: how can we convert form fields to JSON?</a></li> 
          </ul></li> 
         <li><a href="#getting-started-create-a-form-for-testing">Getting Started: Create a Form for Testing</a></li> 
         <li><a href="#step-1-add-a-listener-to-the-submit-event-for-the-form">Step 1: Add a Listener to the <code>submit</code> Event for the Form</a> 
          <ul> 
           <li><a href="#create-a-handlesubmit-function">Create a <code>handleSubmit()</code> function.</a></li> 
           <li><a href="#attach-an-event-listener-to-the-form">Attach an event listener to the form.</a></li> 
          </ul></li> 
         <li><a href="#step-2-extract-the-values-of-form-fields-as-json">Step 2: Extract the Values of Form Fields As JSON</a> 
          <ul> 
           <li><a href="#step-2-1-understand-how-reduce-works">Step 2.1 — Understand how <code>reduce()</code> works.</a> 
            <ul> 
             <li><a href="#a-really-simple-example-of-reducing-an-array">A really simple example of reducing an array.</a></li> 
            </ul></li> 
           <li><a href="#step-2-2-deconstruct-the-function">Step 2.2&nbsp;—&nbsp;Deconstruct the function.</a></li> 
           <li><a href="#step-2-3-write-the-reducer-function">Step 2.3 — Write the reducer function.</a></li> 
           <li><a href="#step-2-4-call-the-reducer">Step 2.4 — Call the reducer.</a></li> 
          </ul></li> 
         <li><a href="#step-3-add-a-check-to-make-sure-only-the-fields-we-want-are-collected">Step 3: Add a Check to Make Sure Only the Fields We Want Are Collected</a> 
          <ul> 
           <li><a href="#step-3-1-create-a-function-to-check-for-valid-elements">Step 3.1 — Create a function to check for valid elements.</a></li> 
           <li><a href="#step-3-2-add-the-check-to-formtojson">Step 3.2 — Add the check to <code>formToJSON()</code>.</a></li> 
          </ul></li> 
         <li><a href="#step-4-only-store-checkable-fields-if-a-field-is-in-checked-state">Step 4: Only Store Checkable Fields If a Field Is In <code>checked</code> State</a> 
          <ul> 
           <li><a href="#step-4-1-create-a-function-to-check-for-checkable-elements">Step 4.1 — Create a function to check for checkable elements.</a></li> 
           <li><a href="#step-4-2-add-the-check-to-formtojson">Step 4.2 — Add the check to <code>formToJSON()</code>.</a></li> 
          </ul></li> 
         <li><a href="#step-5-if-a-field-allows-multiple-values-store-them-in-an-array">Step 5: If a Field Allows Multiple Values, Store Them In an Array</a> 
          <ul> 
           <li><a href="#step-5-1-create-checks-for-elements-that-accept-multiple-values">Step 5.1 — Create checks for elements that accept multiple values.</a></li> 
           <li><a href="#step-5-2-handle-checkboxes-in-formtojson">Step 5.2 — Handle checkboxes in <code>formToJSON()</code>.</a></li> 
           <li><a href="#step-5-3-write-a-function-to-retrieve-values-from-multi-selects">Step 5.3 — Write a function to retrieve values from multi-selects.</a></li> 
           <li><a href="#step-5-4-handle-multi-select-values-in-formtojson">Step 5.4 — Handle multi-select values in <code>formToJSON()</code>.</a> 
            <ul> 
             <li><a href="#run-a-quick-test-of-multi-select-values">Run a quick test of multi-select values.</a></li> 
            </ul></li> 
          </ul></li> 
         <li><a href="#the-final-result-form-field-values-are-collected-in-an-object-for-use-as-json">The Final Result: Form Field Values Are Collected in an Object for Use as JSON</a></li> 
        </ul></li> 
      </ul> 
     </nav>
    </aside>
    <article class="article__content article__content--front-end"> 
     <p>Using AJAX is really common, but it’s still tricky to get the values out of a form without using a library.</p> 
     <p>And that’s because it seems pretty intimidating to set up all the loops and checks required to deal with parsing a form and all its child elements. You get into <a href="http://stackoverflow.com/a/9329476/463471">heavy discussions of whether you should use <code>for</code>, <code>for...in</code>, <code>for...of</code>, or <code>forEach</code></a>, and after trying to keep up with the various performance, semantic, and stylistic reasons for making those choices, your brain starts to liquefy and drip out your ears — at which point it’s easy to just say, “Fuck it; let’s just use jQuery.”</p> 
     <p><strong>But for simple sites that don’t need much beyond grabbing form data as an object to use with JSON</strong>, jQuery (or any big library or framework) includes a lot of overhead for only one or two functions that you’ll be using.<sup class="footnote-ref" id="fnref:homework"><a rel="footnote" href="#fn:homework">1</a></sup></p> 
     <p>So in this walkthrough, we’ll be writing our own script — in plain JavaScript — to pull the values of a form’s fields into an object, which we could then use for AJAX, updating information on other parts of the page, and anything else you might want to do with a form’s data.</p> 
     <h2 id="what-we-ll-be-building">What We’ll Be Building</h2> 
     <p>At the end of this walkthrough, we’ll have built the form shown in this pen:</p> 
     <p>
      <amp-iframe width="750" height="1000" sandbox="allow-scripts allow-same-origin" layout="responsive" frameborder="0" src="https://codepen.io/jlengstorf/embed/YWJLwz/?height=990&amp;theme-id=dark&amp;default-tab=result&amp;embed-version=2"> 
      </amp-iframe></p> 
     <p>If you fill the form and hit the “Send It!” button, the form data will be output as JSON in the “Form Data” section below.</p> 
     <aside class="article__aside">
      <p><strong>NOTE:</strong> To show that <code>hidden</code> inputs will be included, an input called <code>secret</code> has been included in this form. Its value is a random GUID.</p> 
     </aside> 
     <h2 id="before-we-get-started-goals-and-plans">Before We Get Started: Goals and Plans</h2> 
     <p>To save ourselves a lot of headache and heartache, we’re going to <a href="https://lengstorf.com/effective-project-planning/">start our project with an clear plan</a>. This’ll keep our goals clear, and helps define the structure and purpose of the code before we ever write a line.</p> 
     <h3 id="start-with-a-goal-what-should-we-end-up-with">Start with a goal: what should we end up with?</h3> 
     <p>Before we write any JavaScript, let’s start by deciding how we want the output to look.</p> 
     <p>If I’ve filled out the form above completely, we’d want the resulting object to look like this:</p> 
     <div class="highlight">
      <pre><code class="language-json" data-lang="json"><span></span><span class="p">{</span>
  <span class="nt">"salutation"</span><span class="p">:</span> <span class="s2">"Mr."</span><span class="p">,</span>
  <span class="nt">"name"</span><span class="p">:</span> <span class="s2">"Jason Lengstorf"</span><span class="p">,</span>
  <span class="nt">"email"</span><span class="p">:</span> <span class="s2">"jason@lengstorf.com"</span><span class="p">,</span>
  <span class="nt">"subject"</span><span class="p">:</span> <span class="s2">"I have a general question."</span><span class="p">,</span>
  <span class="nt">"message"</span><span class="p">:</span> <span class="s2">"Is this thing on?"</span><span class="p">,</span>
  <span class="nt">"snacks"</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">"pizza"</span>
  <span class="p">],</span>
  <span class="nt">"secret"</span><span class="p">:</span> <span class="s2">"1b3a9374-1a8e-434e-90ab-21aa7b9b80e7"</span>
<span class="p">}</span>
</code></pre>
     </div> 
     <p>Each field’s <code>name</code> attribute is used as the object’s key, and the field’s <code>value</code> is set as the object’s value.</p> 
     <p>This is ideal, because it means that we can do something like this:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="c1">// Find our form in the DOM using its class name.</span>
<span class="kr">const</span> <span class="nx">form</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementByClassName</span><span class="p">(</span><span class="s1">'.contact-form'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>

<span class="c1">// Get the form data with our (yet to be defined) function.</span>
<span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">getFormDataAsJSON</span><span class="p">(</span><span class="nx">form</span><span class="p">);</span>

<span class="c1">// Do something with the email address.</span>
<span class="nx">doSomething</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">email</span><span class="p">);</span>
</code></pre>
     </div> 
     <p>This is straightforward, easy to read as a human, and also easy to send to APIs that accept <code>application/json</code> data in requests (which is most of them these days).</p> 
     <p>So let’s shoot for that.</p> 
     <h3 id="make-a-plan-how-can-we-convert-form-fields-to-json">Make a plan: how can we convert form fields to JSON?</h3> 
     <p>When we’re finished, our JavaScript should accomplish the following goals:</p> 
     <ol> 
      <li>Capture the form’s <code>submit</code> event and prevent the default submission.</li> 
      <li>Convert the form’s child elements to JSON.</li> 
      <li>Check to make sure only form field elements are added to the object.</li> 
      <li>Add a safeguard to only store checkable fields if the <code>checked</code> attribute is set.</li> 
      <li>Handle inputs that allow multiple values, like checkboxes.</li> 
     </ol> 
     <p><strong>Ready to flex that sexy-ass brain?</strong> Create a fork of the <a href="http://codepen.io/jlengstorf/pen/GqYZra">markup-and-styles-only pen</a>, and let’s jump in and start writing some JavaScript.</p> 
     <h2 id="getting-started-create-a-form-for-testing">Getting Started: Create a Form for Testing</h2> 
     <p>To avoid the hassle of setting up front-end tooling (we’re using Babel to transpile the newer features of JavaScript, such as <a href="https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/apC.md#appendix-c-lexical-this">fat-arrow functions</a>), we’re going to work through this project on Codepen.</p> 
     <p>To start, create a fork of <a href="http://codepen.io/jlengstorf/pen/GqYZra/">this pen</a>, which contains form markup with common inputs, and some styles to make it display nicely.</p> 
     <p>
      <amp-iframe width="750" height="1000" sandbox="allow-scripts allow-same-origin" layout="responsive" frameborder="0" src="https://codepen.io/jlengstorf/embed/GqYZra/?height=990&amp;theme-id=dark&amp;default-tab=result&amp;embed-version=2"> 
      </amp-iframe></p> 
     <aside class="article__aside">
      <p><strong>NOTE:</strong> The markup is written in Jade (which was recently renamed to <a href="https://github.com/pugjs/pug">Pug</a>) because I find it faster and easier to read. If you prefer to look at plain HTML, you can hit the “view compiled” button at the bottom right of the Jade pane in the pen above.</p> 
     </aside> 
     <aside class="article__aside">
      <p><strong>NOTE:</strong> The styles for the form use <a href="http://getbem.com/naming/">BEM-style naming conventions</a>, and I’m using <a href="http://postcss.org/">PostCSS</a> to make it easy to group my styles together without <em>actually</em> creating nested CSS. For me, this is <em>far</em> easier to read than other ways of writing CSS, but if you prefer regular CSS, click the “view compiled” button at the bottom-right of the PostCSS pane in the pen above.</p> 
     </aside> 
     <h2 id="step-1-add-a-listener-to-the-submit-event-for-the-form">Step 1: Add a Listener to the <code>submit</code> Event for the Form</h2> 
     <p>Before we do anything else, we need to listen for the <code>submit</code> event on our form, and prevent it from doing its usual thing.</p> 
     <p>To do this, let’s create a function called <code>handleSubmit()</code>, then use <code>getElementsByClassName()</code> to find our form, and attach the function to the form’s <code>submit</code> event.</p> 
     <h3 id="create-a-handlesubmit-function">Create a <code>handleSubmit()</code> function.</h3> 
     <p>At the moment, this function isn’t going to do much. To start, we’ll prevent the default <code>submit</code> action, create a variable called <code>data</code> to store the output (which we’ll be building in a moment), then find our output container and print out the <code>data</code> variable as JSON.</p> 
     <p>In order to prevent the default action, this function needs to accept one argument: the <code>event</code> that’s created when the user clicks the submit button on the form. We can stop the form from submitting the usual way (which triggers the browser to go somewhere else) using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault"><code>event.preventDefault()</code></a>.</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="cm">/**</span>
<span class="cm"> * A handler function to prevent default submission and run our custom script.</span>
<span class="cm"> * @param {Event} event the submit event triggered by the user</span>
<span class="cm"> * @return {void}</span>
<span class="cm"> */</span>
<span class="kr">const</span> <span class="nx">handleFormSubmit</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
  
  <span class="c1">// Stop the form from submitting since we’re handling that with AJAX.</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  
  <span class="c1">// TODO: Call our function to get the form data.</span>
  <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{};</span>
  
  <span class="c1">// Demo only: print the form data onscreen as a formatted JSON object.</span>
  <span class="kr">const</span> <span class="nx">dataContainer</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">'results__display'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
  
  <span class="c1">// Use `JSON.stringify()` to make the output valid, human-readable JSON.</span>
  <span class="nx">dataContainer</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">" "</span><span class="p">);</span>
  
  <span class="c1">// ...this is where we’d actually do something with the form data...</span>
<span class="p">};</span>
</code></pre>
     </div> 
     <aside class="article__aside">
      <p><strong>NOTE:</strong> The <code>data</code> variable is not JSON <em>yet</em>. This is kind of confusing at first, but it’s a matter of nuance. Typically, a function that converts “to JSON” is <em>actually</em> converting to an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Object_literals">object literal</a>. This allows us to access the data using JavaScript. In order to convert that data to a valid JSON string, we need to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"><code>JSON.stringify()</code></a>.</p> 
     </aside> 
     <h3 id="attach-an-event-listener-to-the-form">Attach an event listener to the form.</h3> 
     <p>With the event handler created, we need to add a listener to the form so we can actually handle the event.</p> 
     <p>To do this, we use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName"><code>getElementsByClassName()</code></a> to target the form, then store the first item in the resulting collection as <code>form</code>.</p> 
     <p>Next, using <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"><code>addEventListener()</code></a>, we hook <code>handleSubmit()</code> to the <code>submit</code> event, which will allow it to run whenever the user clicks to submit the form.</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="kr">const</span> <span class="nx">handleFormSubmit</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="cm">/* omitted for brevity */</span><span class="p">};</span>

<span class="cm">/*</span>
<span class="cm"> * This is where things actually get started. We find the form element using</span>
<span class="cm"> * its class name, then attach the `handleFormSubmit()` function to the </span>
<span class="cm"> * `submit` event.</span>
<span class="cm"> */</span>
<span class="kr">const</span> <span class="nx">form</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">'contact-form'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="nx">form</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'submit'</span><span class="p">,</span> <span class="nx">handleFormSubmit</span><span class="p">);</span>
</code></pre>
     </div> 
     <p>At this point we can test that things are working properly by clicking the “Send It!” button on the form. We should see <code>{}</code> in the “Form Data” output box.</p> 
     <h2 id="step-2-extract-the-values-of-form-fields-as-json">Step 2: Extract the Values of Form Fields As JSON</h2> 
     <p>Next up, we need to actually grab values from the form fields.</p> 
     <p>To do this, we’ll use something that — at first — might look scary as shit: <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"><code>reduce()</code></a> combined with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code>call()</code></a>.</p> 
     <p>We’ll dive into the dirty details of what <code>reduce()</code> is actually doing in the next section, but for now let’s focus on how we’re actually using it.</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="cm">/**</span>
<span class="cm"> * Retrieves input data from a form and returns it as a JSON object.</span>
<span class="cm"> * @param {HTMLFormControlsCollection} elements the form elements</span>
<span class="cm"> * @return {Object} form data as an object literal</span>
<span class="cm"> */</span>
<span class="kr">const</span> <span class="nx">formToJSON</span> <span class="o">=</span> <span class="nx">elements</span> <span class="o">=&gt;</span> <span class="p">[].</span><span class="nx">reduce</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">elements</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  
  <span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>

<span class="p">},</span> <span class="p">{});</span>

<span class="kr">const</span> <span class="nx">handleFormSubmit</span> <span class="o">=</span> <span class="nx">event</span> <span class="o">=&gt;</span> <span class="p">{</span>
  
  <span class="c1">// Stop the form from submitting since we’re handling that with AJAX.</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  
  <span class="c1">// Call our function to get the form data.</span>
  <span class="kr">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">formToJSON</span><span class="p">(</span><span class="nx">form</span><span class="p">.</span><span class="nx">elements</span><span class="p">);</span>

  <span class="c1">// Demo only: print the form data onscreen as a formatted JSON object.</span>
  <span class="kr">const</span> <span class="nx">dataContainer</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">'results__display'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
  
  <span class="c1">// Use `JSON.stringify()` to make the output valid, human-readable JSON.</span>
  <span class="nx">dataContainer</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s2">" "</span><span class="p">);</span>
  
  <span class="c1">// ...this is where we’d actually do something with the form data...</span>
<span class="p">};</span>

<span class="kr">const</span> <span class="nx">form</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementsByClassName</span><span class="p">(</span><span class="s1">'contact-form'</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
<span class="nx">form</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'submit'</span><span class="p">,</span> <span class="nx">handleFormSubmit</span><span class="p">);</span>
</code></pre>
     </div> 
     <p>I know. <em>I know.</em> It looks hairy. But let’s dig in and see what this is doing.</p> 
     <p>First, let’s break this into its component parts:</p> 
     <ol> 
      <li>We have a function called <code>formToJSON()</code>, which accepts one argument: <code>form</code></li> 
      <li>Inside that function, we return the value of <code>[].reduce.call()</code>, which accepts three arguments: a form, a function, and an empty object literal (<code>{}</code>)</li> 
      <li>The function argument accepts the arguments <code>data</code> and <code>child</code>, and adds a new property with the key of <code>child.name</code> and the value <code>child.value</code>, finally returning the <code>data</code> object</li> 
     </ol> 
     <p><strong>After we’ve added that code to our pen, we need to call the function from <code>handleSubmit()</code>.</strong> Find <code>const data = {};</code> inside the function and replace it with <code>const data = formToJSON(form.elements);</code>.</p> 
     <p>Now we can run it by clicking the “Send It!” button will now output this:</p> 
     <div class="highlight">
      <pre><code class="language-json" data-lang="json"><span></span><span class="p">{</span>
  <span class="nt">"salutation"</span><span class="p">:</span> <span class="s2">"Ms."</span><span class="p">,</span>
  <span class="nt">"name"</span><span class="p">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="nt">"email"</span><span class="p">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="nt">"subject"</span><span class="p">:</span> <span class="s2">"I have a problem."</span><span class="p">,</span>
  <span class="nt">"message"</span><span class="p">:</span> <span class="s2">""</span><span class="p">,</span>
  <span class="nt">"snacks"</span><span class="p">:</span> <span class="s2">"cake"</span><span class="p">,</span>
  <span class="nt">"secret"</span><span class="p">:</span> <span class="s2">"1b3a9374-1a8e-434e-90ab-21aa7b9b80e7"</span><span class="p">,</span>
  <span class="nt">""</span><span class="p">:</span> <span class="s2">""</span>
<span class="p">}</span>
</code></pre>
     </div> 
     <p>There are some issues here —&nbsp;for example, neither “Ms.” nor “Cake” was actually selected on the form, and there’s an empty entry at the bottom (which is our button) —&nbsp;but this isn’t too bad for a first step.</p> 
     <p>So how did that just happen? Let’s go step by step to figure it out.</p> 
     <aside class="article__aside">
      <p><strong>NOTE:</strong> Using <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements"><code>form.elements</code></a>, we get pretty decent access to the form. For example, we can get the email using <code>form.elements.email.value</code>. However, if we need to convert this to JSON for use with AJAX, it’s a disaster due to its inclusion of numerical indexes, IDs, and names. You can see this for yourself by adding <code>console.log(JSON.stringify(form.elements));</code> to <code>handleSubmit()</code>. That’s why we’re building our own function instead of just using this built-in access.</p> 
     </aside> 
     <h3 id="step-2-1-understand-how-reduce-works">Step 2.1 — Understand how <code>reduce()</code> works.</h3> 
     <p>The simplest explanation for <code>reduce()</code> is this:</p> 
     <blockquote> 
      <p>The <code>reduce()</code> method uses a function to convert an array into a single value.</p> 
     </blockquote> 
     <p>This method is part of the <code>Array</code> prototype, so it can be applied to any array value.</p> 
     <p>It takes two arguments:</p> 
     <ol> 
      <li>A reducer function, which is required.</li> 
      <li>An initial value, which is optional (defaults to <code>0</code>).</li> 
     </ol> 
     <p>The reducer function is applied to each element of the array. This function accepts four arguments:</p> 
     <ol> 
      <li>The value returned by the reducer function when it ran on the previous element (or the initial value, if this is the first element).</li> 
      <li>The current array element.</li> 
      <li>The current array index.</li> 
      <li>The whole array, in case the reducer needs a reference to it.</li> 
     </ol> 
     <p>For our reducer, we only need the first two arguments.</p> 
     <h4 id="a-really-simple-example-of-reducing-an-array">A really simple example of reducing an array.</h4> 
     <p>Let’s say we have an array of numbers, which represent sales for the day:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="kr">const</span> <span class="nx">sales</span> <span class="o">=</span> <span class="p">[</span><span class="mf">100.12</span><span class="p">,</span> <span class="mf">19.49</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">42.18</span><span class="p">,</span> <span class="mf">99.62</span><span class="p">];</span>
</code></pre>
     </div> 
     <p>We need to determine total sales for the day, so we set up this simple function to add up sales:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="kd">function</span> <span class="nx">getTotalSales</span><span class="p">(</span><span class="nx">previousTotal</span><span class="p">,</span> <span class="nx">currentSaleAmount</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">previousTotal</span> <span class="o">+</span> <span class="nx">currentSaleAmount</span><span class="p">;</span>
<span class="p">}</span>
</code></pre>
     </div> 
     <p>Then we use <code>reduce()</code> to apply the function to the array of sales:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="kr">const</span> <span class="nx">sales</span> <span class="o">=</span> <span class="p">[</span><span class="mf">100.12</span><span class="p">,</span> <span class="mf">19.49</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">42.18</span><span class="p">,</span> <span class="mf">99.62</span><span class="p">];</span>

<span class="kd">function</span> <span class="nx">getTotalSales</span><span class="p">(</span><span class="nx">previousTotal</span><span class="p">,</span> <span class="nx">currentSaleAmount</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">previousTotal</span> <span class="o">+</span> <span class="nx">currentSaleAmount</span><span class="p">;</span>
<span class="p">}</span>

<span class="nx">sales</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="nx">getTotalSales</span><span class="p">);</span>
<span class="c1">// result: 271.41</span>
</code></pre>
     </div> 
     <aside class="article__aside">
      <p><strong>TIP:</strong> You can run these examples in your browser’s console to see the results for yourself.</p> 
     </aside> 
     <p>Now, if we want to condense this code a little, we can actually write the whole thing like this:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="kr">const</span> <span class="nx">sales</span> <span class="o">=</span> <span class="p">[</span><span class="mf">100.12</span><span class="p">,</span> <span class="mf">19.49</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">42.18</span><span class="p">,</span> <span class="mf">99.62</span><span class="p">];</span>
<span class="nx">sales</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">curr</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">curr</span><span class="p">);</span>
<span class="c1">// result: 271.41</span>
</code></pre>
     </div> 
     <p>When this is called, <code>reduce()</code> starts with <code>0</code> as the value of <code>prev</code>, and takes the first element of the array, <code>100.12</code>, as the value of <code>curr</code>. It adds those together and returns them.</p> 
     <p>Now <code>reduce()</code> moves to the second element in the array, <code>19.49</code>, and this time the value of <code>prev</code> is the value returned last time: <code>100.12</code>.</p> 
     <p>This process is repeated until all of the elements have been added together, and we end up with our total sales for the day: <code>271.41</code>.</p> 
     <h3 id="step-2-2-deconstruct-the-function">Step 2.2&nbsp;—&nbsp;Deconstruct the function.</h3> 
     <p>As it stands, <code>formToJSON()</code> is actually made of three parts:</p> 
     <ol> 
      <li>A <em>reducer function</em> to combine our form elements into a single object.</li> 
      <li>An initial value of <code>{}</code> to hold our form data.</li> 
      <li>A call to <code>reduce()</code> using <code>call()</code>, which allows us to force <code>reduce()</code> to work with <code>elements</code>, even though it’s <em>technically</em> not an array.</li> 
     </ol> 
     <aside class="article__aside">
      <p><strong>NOTE:</strong> The form elements are actually what’s called an <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection"><code>HTMLFormControlsCollection</code></a>, which is “array-like”, meaning it’s basically an array, but it’s missing some of the array methods, and has some of its own special properties and methods.</p> 
     </aside> 
     <h3 id="step-2-3-write-the-reducer-function">Step 2.3 — Write the reducer function.</h3> 
     <p>First up, we need to have our reducer function. In the simple example of reducing an array, we used single values, which won’t work in this case. Instead, we want to add each field to an object with a format like this:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="p">{</span>
    <span class="nx">field_name</span><span class="o">:</span> <span class="s2">"field_value"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre>
     </div> 
     <p>So our reducer function works like this:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="c1">// This is the function that is called on each element of the array.</span>
<span class="kr">const</span> <span class="nx">reducerFunction</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="c1">// Add the current field to the object.</span>
  <span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>

  <span class="c1">// For the demo only: show each step in the reducer’s progress.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>

  <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">};</span>
</code></pre>
     </div> 
     <p>The <code>data</code> object is the previous value of the reducer, and <code>element</code> is the current form element in the array. We then add a new property to the object using the element’s <code>name</code> property — this is the input’s <code>name</code> attribute in the HTML&nbsp;—&nbsp;and store its <code>value</code> there.</p> 
     <p>When we return <code>data</code>, we make the updated object available to the next call of the funciton, which allows us to add each field to the object, one by one.</p> 
     <h3 id="step-2-4-call-the-reducer">Step 2.4 — Call the reducer.</h3> 
     <p>To make it a little more obvious what’s happening in the <code>formToJSON()</code> function, here’s what it looks like if we break it up into more verbose code:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="kr">const</span> <span class="nx">formToJSON_deconstructed</span> <span class="o">=</span> <span class="nx">elements</span> <span class="o">=&gt;</span> <span class="p">{</span>
  
  <span class="c1">// This is the function that is called on each element of the array.</span>
  <span class="kr">const</span> <span class="nx">reducerFunction</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    
    <span class="c1">// Add the current field to the object.</span>
    <span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    
    <span class="c1">// For the demo only: show each step in the reducer’s progress.</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">data</span><span class="p">));</span>

    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
  <span class="p">};</span>
  
  <span class="c1">// This is used as the initial value of `data` in `reducerFunction()`.</span>
  <span class="kr">const</span> <span class="nx">reducerInitialValue</span> <span class="o">=</span> <span class="p">{};</span>
  
  <span class="c1">// To help visualize what happens, log the inital value.</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Initial `data` value:'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">reducerInitialValue</span><span class="p">));</span>
  
  <span class="c1">// Now we reduce by `call`-ing `Array.prototype.reduce()` on `elements`.</span>
  <span class="kr">const</span> <span class="nx">formData</span> <span class="o">=</span> <span class="p">[].</span><span class="nx">reduce</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">elements</span><span class="p">,</span> <span class="nx">reducerFunction</span><span class="p">,</span> <span class="nx">reducerInitialValue</span><span class="p">);</span>
  
  <span class="c1">// The result is then returned for use elsewhere.</span>
  <span class="k">return</span> <span class="nx">formData</span><span class="p">;</span>
<span class="p">};</span>
</code></pre>
     </div> 
     <p>In the above example, we do exactly the same thing as in <code>formToJSON()</code>, but we’ve broken it down into its component parts.</p> 
     <p>We can see the output if we update <code>handleSubmit()</code> and change the call to <code>formToJSON(form.elements)</code> to <code>formToJSON_deconstructed(form.elements)</code>. Check the console to see this output:</p> 
     <div class="highlight">
      <pre><code class="language-text" data-lang="text"><span></span>Initial `data` value: {}
{"salutation":"Mr."}
{"salutation":"Mrs."}
{"salutation":"Ms."}
{"salutation":"Ms.","name":""}
{"salutation":"Ms.","name":"","email":""}
{"salutation":"Ms.","name":"","email":"","subject":"I have a problem."}
{"salutation":"Ms.","name":"","email":"","subject":"I have a problem.","message":""}
{"salutation":"Ms.","name":"","email":"","subject":"I have a problem.","message":"","snacks":"pizza"}
{"salutation":"Ms.","name":"","email":"","subject":"I have a problem.","message":"","snacks":"cake"}
{"salutation":"Ms.","name":"","email":"","subject":"I have a problem.","message":"","snacks":"cake","secret":"1b3a9374-1a8e-434e-90ab-21aa7b9b80e7"}
{"salutation":"Ms.","name":"","email":"","subject":"I have a problem.","message":"","snacks":"cake","secret":"1b3a9374-1a8e-434e-90ab-21aa7b9b80e7","":""}
</code></pre>
     </div> 
     <p>We can see here that the reducer is called for every form element, and the object grows with each subsequent call until we’ve got an entry for every <code>name</code> value in the form.</p> 
     <p><strong>Change <code>handleSubmit()</code> back to using <code>formToJSON(form.elements)</code></strong>, and let’s move on to cleaning up this output to only include fields it <em>should</em> include.</p> 
     <h2 id="step-3-add-a-check-to-make-sure-only-the-fields-we-want-are-collected">Step 3: Add a Check to Make Sure Only the Fields We Want Are Collected</h2> 
     <p>The first problem we can see in the output is that fields with both empty <code>name</code> and empty <code>value</code> attributes have been added to the array. This isn’t what we want in this case, so we need to add a quick check to verify that fields have both a <code>name</code> and a <code>value</code> before we add them.</p> 
     <h3 id="step-3-1-create-a-function-to-check-for-valid-elements">Step 3.1 — Create a function to check for valid elements.</h3> 
     <p>First, let’s add a new function to our pen called <code>isValidElement()</code>. This function will accept one argument — the <code>element</code> — and return either <code>true</code> or <code>false</code>.</p> 
     <p>To return <code>true</code>, the element must have:</p> 
     <ol> 
      <li>A non-empty <code>name</code> property.</li> 
      <li>A non-empty <code>value</code> property.</li> 
     </ol> 
     <p>Implement this check like so:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="cm">/**</span>
<span class="cm"> * Checks that an element has a non-empty `name` and `value` property.</span>
<span class="cm"> * @param {Element} element the element to check</span>
<span class="cm"> * @return {Bool} true if the element is an input, false if not</span>
<span class="cm"> */</span>
<span class="kr">const</span> <span class="nx">isValidElement</span> <span class="o">=</span> <span class="nx">element</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">element</span><span class="p">.</span><span class="nx">name</span> <span class="o">&amp;&amp;</span> <span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
<span class="p">};</span>
</code></pre>
     </div> 
     <p>Pretty simple, right?</p> 
     <p>This gives us a flag that lets us avoid unused elements (like the button) and unfilled fields (such as an empty Email field) from being added to the form data object.</p> 
     <h3 id="step-3-2-add-the-check-to-formtojson">Step 3.2 — Add the check to <code>formToJSON()</code>.</h3> 
     <p>Next, we need to add an <code>if</code> check for whether or not our <code>element</code> is valid in <code>formToJSON()</code>. Since we don’t want to add anything if the element is <em>not</em> valid, we can simply do the following:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="kr">const</span> <span class="nx">formToJSON</span> <span class="o">=</span> <span class="nx">elements</span> <span class="o">=&gt;</span> <span class="p">[].</span><span class="nx">reduce</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">elements</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  
  <span class="c1">// Make sure the element has the required properties.</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">isValidElement</span><span class="p">(</span><span class="nx">element</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">},</span> <span class="p">{});</span>
</code></pre>
     </div> 
     <p>Now when we submit our form, the output is much cleaner:</p> 
     <div class="highlight">
      <pre><code class="language-json" data-lang="json"><span></span><span class="p">{</span>
  <span class="nt">"salutation"</span><span class="p">:</span> <span class="s2">"Ms."</span><span class="p">,</span>
  <span class="nt">"subject"</span><span class="p">:</span> <span class="s2">"I have a problem."</span><span class="p">,</span>
  <span class="nt">"snacks"</span><span class="p">:</span> <span class="s2">"cake"</span><span class="p">,</span>
  <span class="nt">"secret"</span><span class="p">:</span> <span class="s2">"1b3a9374-1a8e-434e-90ab-21aa7b9b80e7"</span>
<span class="p">}</span>
</code></pre>
     </div> 
     <p>However, we’re still not there yet. In the next step, we’ll deal with checkable elements like radio inputs and checkboxes.</p> 
     <h2 id="step-4-only-store-checkable-fields-if-a-field-is-in-checked-state">Step 4: Only Store Checkable Fields If a Field Is In <code>checked</code> State</h2> 
     <p>Now we need another check to identify whether or not an element should be added to the array. For instance, right now the <code>salutation</code> field is being stored with the value <code>Ms.</code>, even though that value <em>is not selected</em> in the form.</p> 
     <p>Obviously, this is bad news. So let’s fix it.</p> 
     <h3 id="step-4-1-create-a-function-to-check-for-checkable-elements">Step 4.1 — Create a function to check for checkable elements.</h3> 
     <p>First, let’s add a new function to check whether or not an element’s value should be considered valid for inclusion in the object.</p> 
     <p>Our criteria for determining a “valid” element are:</p> 
     <ol> 
      <li>The element is <em>not</em> a checkbox or radio input.</li> 
      <li>If the element <em>is</em> a checkbox or radio input, it has the <code>checked</code> attribute.</li> 
     </ol> 
     <p>Add the following to create this check:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="cm">/**</span>
<span class="cm"> * Checks if an element’s value can be saved (e.g. not an unselected checkbox).</span>
<span class="cm"> * @param {Element} element the element to check</span>
<span class="cm"> * @return {Boolean} true if the value should be added, false if not</span>
<span class="cm"> */</span>
<span class="kr">const</span> <span class="nx">isValidValue</span> <span class="o">=</span> <span class="nx">element</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="o">!</span><span class="p">[</span><span class="s1">'checkbox'</span><span class="p">,</span> <span class="s1">'radio'</span><span class="p">].</span><span class="nx">includes</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="o">||</span> <span class="nx">element</span><span class="p">.</span><span class="nx">checked</span><span class="p">);</span>
<span class="p">};</span>
</code></pre>
     </div> 
     <aside class="article__aside">
      <p><strong>NOTE:</strong> The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"><code>includes()</code></a> method is an easy way to see if a value is present in an array. I prefer this to multiple <code>if</code> checks, switch statements, or other ways of matching a value against an array.</p> 
     </aside> 
     <h3 id="step-4-2-add-the-check-to-formtojson">Step 4.2 — Add the check to <code>formToJSON()</code>.</h3> 
     <p>Now we can add this check to <code>formToJSON()</code>, which is as simple as adding a second condition to our existing <code>if</code> check:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="kr">const</span> <span class="nx">formToJSON</span> <span class="o">=</span> <span class="nx">elements</span> <span class="o">=&gt;</span> <span class="p">[].</span><span class="nx">reduce</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">elements</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  
  <span class="c1">// Make sure the element has the required properties and should be added.</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">isValidElement</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">isValidValue</span><span class="p">(</span><span class="nx">element</span><span class="p">))</span> <span class="p">{</span>
    <span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">},</span> <span class="p">{});</span>
</code></pre>
     </div> 
     <p>Now we can run our code and see that the output is much cleaner:</p> 
     <div class="highlight">
      <pre><code class="language-json" data-lang="json"><span></span><span class="p">{</span>
  <span class="nt">"subject"</span><span class="p">:</span> <span class="s2">"I have a problem."</span><span class="p">,</span>
  <span class="nt">"secret"</span><span class="p">:</span> <span class="s2">"1b3a9374-1a8e-434e-90ab-21aa7b9b80e7"</span>
<span class="p">}</span>
</code></pre>
     </div> 
     <p>This is much better — now we only get elements that actually have a value set.</p> 
     <h2 id="step-5-if-a-field-allows-multiple-values-store-them-in-an-array">Step 5: If a Field Allows Multiple Values, Store Them In an Array</h2> 
     <p>But we’re not quite done yet, because the form is still fucking up the <code>snacks</code> field — which is <em>clearly</em> the most important field.</p> 
     <p>Try selecting both “Pizza” and “Cake” to see the problem:</p> 
     <div class="highlight">
      <pre><code class="language-json" data-lang="json"><span></span><span class="p">{</span>
  <span class="nt">"subject"</span><span class="p">:</span> <span class="s2">"I have a problem."</span><span class="p">,</span>
  <span class="nt">"snacks"</span><span class="p">:</span> <span class="s2">"cake"</span><span class="p">,</span>
  <span class="nt">"secret"</span><span class="p">:</span> <span class="s2">"1b3a9374-1a8e-434e-90ab-21aa7b9b80e7"</span>
<span class="p">}</span>
</code></pre>
     </div> 
     <p>Nope. This is a disaster. We need both pizza AND cake. So let’s make sure that can happen.</p> 
     <h3 id="step-5-1-create-checks-for-elements-that-accept-multiple-values">Step 5.1 — Create checks for elements that accept multiple values.</h3> 
     <p>The check for whether or not multiple values are allowed has two parts, because there are two elements that allow multiple values.</p> 
     <p>First, we need to add a check for any checkboxes. This is simple enough: we just check if the <code>type</code> is <code>checkbox</code>:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="cm">/**</span>
<span class="cm"> * Checks if an input is a checkbox, because checkboxes allow multiple values.</span>
<span class="cm"> * @param {Element} element the element to check</span>
<span class="cm"> * @return {Boolean} true if the element is a checkbox, false if not</span>
<span class="cm"> */</span>
<span class="kr">const</span> <span class="nx">isCheckbox</span> <span class="o">=</span> <span class="nx">element</span> <span class="o">=&gt;</span> <span class="nx">element</span><span class="p">.</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">'checkbox'</span><span class="p">;</span>
</code></pre>
     </div> 
     <p>Second, we need to add a check for a <code>select</code> element with the <code>multiple</code> attribute.</p> 
     <p>This is a bit trickier, but still pretty straightforward. A <code>select</code> has a property called <code>options</code>, so we’ll check for that first. Next, we check for the <code>multiple</code> property. If both exist, our check will return <code>true</code>:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="cm">/**</span>
<span class="cm"> * Checks if an input is a `select` with the `multiple` attribute.</span>
<span class="cm"> * @param {Element} element the element to check</span>
<span class="cm"> * @return {Boolean} true if the element is a multiselect, false if not</span>
<span class="cm"> */</span>
<span class="kr">const</span> <span class="nx">isMultiSelect</span> <span class="o">=</span> <span class="nx">element</span> <span class="o">=&gt;</span> <span class="nx">element</span><span class="p">.</span><span class="nx">options</span> <span class="o">&amp;&amp;</span> <span class="nx">element</span><span class="p">.</span><span class="nx">multiple</span><span class="p">;</span>
</code></pre>
     </div> 
     <h3 id="step-5-2-handle-checkboxes-in-formtojson">Step 5.2 — Handle checkboxes in <code>formToJSON()</code>.</h3> 
     <p>Inside <code>formToJSON()</code>, we need to add another <code>if</code> block for our <code>isCheckbox()</code> function.</p> 
     <p>If the current element is a checkbox, we need to store its value(s) in an array. Let’s take a look at the code first, and then we’ll talk about how it works.</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="kr">const</span> <span class="nx">formToJSON</span> <span class="o">=</span> <span class="nx">elements</span> <span class="o">=&gt;</span> <span class="p">[].</span><span class="nx">reduce</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">elements</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="c1">// Make sure the element has the required properties and should be added.</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">isValidElement</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">isValidValue</span><span class="p">(</span><span class="nx">element</span><span class="p">))</span> <span class="p">{</span>

    <span class="cm">/*</span>
<span class="cm"> * Some fields allow for more than one value, so we need to check if this</span>
<span class="cm"> * is one of those fields and, if so, store the values as an array.</span>
<span class="cm"> */</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">isCheckbox</span><span class="p">(</span><span class="nx">element</span><span class="p">))</span> <span class="p">{</span>
      
      <span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">||</span> <span class="p">[]).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">},</span> <span class="p">{});</span>
</code></pre>
     </div> 
     <p>Since we need to get the element’s values into an array, we use a bit of shorthand in <code>(data[element.name] || [])</code>, which means, “use the existing array, or a new, empty one”.</p> 
     <p>Then we use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat"><code>concat()</code></a> to add the current value to the array.</p> 
     <p>Now if we check the options for both pizza and cake, we see the following:</p> 
     <div class="highlight">
      <pre><code class="language-json" data-lang="json"><span></span><span class="p">{</span>
  <span class="nt">"subject"</span><span class="p">:</span> <span class="s2">"I have a problem."</span><span class="p">,</span>
  <span class="nt">"snacks"</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">"pizza"</span><span class="p">,</span>
    <span class="s2">"cake"</span>
  <span class="p">],</span>
  <span class="nt">"secret"</span><span class="p">:</span> <span class="s2">"1b3a9374-1a8e-434e-90ab-21aa7b9b80e7"</span>
<span class="p">}</span>
</code></pre>
     </div> 
     <p>Much better. Crisis averted, everyone!</p> 
     <h3 id="step-5-3-write-a-function-to-retrieve-values-from-multi-selects">Step 5.3 — Write a function to retrieve values from multi-selects.</h3> 
     <p>Our very last step before we can call this sucker done is to add a check for <code>select</code> fields that support multiple selected options. I’m not a big fan of this input type, because I think it’s a confusing input for people to use — one that’s easily replaced with checkboxes — but for the sake of covering bases we’ll plug it in.</p> 
     <p>The selected options from a multi-select are stored in their own array-like object, called an <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection"><code>HTMLOptionsCollection</code></a>, so we need to run <code>reduce()</code> on this as well.</p> 
     <p>Let’s keep things clean by moving this out into its own function.</p> 
     <p>This function will accept each options, check if the <code>selected</code> property is <code>true</code>, then add its value to an array called <code>values</code>, which will ultimately be returned containing the values of all selected options.</p> 
     <p>Add the following to the pen:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="cm">/**</span>
<span class="cm"> * Retrieves the selected options from a multi-select as an array.</span>
<span class="cm"> * @param {HTMLOptionsCollection} options the options for the select</span>
<span class="cm"> * @return {Array} an array of selected option values</span>
<span class="cm"> */</span>
<span class="kr">const</span> <span class="nx">getSelectValues</span> <span class="o">=</span> <span class="nx">options</span> <span class="o">=&gt;</span> <span class="p">[].</span><span class="nx">reduce</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="p">(</span><span class="nx">values</span><span class="p">,</span> <span class="nx">option</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">option</span><span class="p">.</span><span class="nx">selected</span> <span class="o">?</span> <span class="nx">values</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">option</span><span class="p">.</span><span class="nx">value</span><span class="p">)</span> <span class="o">:</span> <span class="nx">values</span><span class="p">;</span>
<span class="p">},</span> <span class="p">[]);</span>
</code></pre>
     </div> 
     <h3 id="step-5-4-handle-multi-select-values-in-formtojson">Step 5.4 — Handle multi-select values in <code>formToJSON()</code>.</h3> 
     <p>To put a bow on all this, we need to add an <code>else if</code> block in our <code>formToJSON()</code> function.</p> 
     <p>After the <code>isCheckbox()</code> check, we’ll add a <code>isMultiSelect()</code> check. If that returns <code>true</code>, we’ll add the select’s values to the object as an array using <code>getSelectValues()</code>.</p> 
     <p>Make the following updates to the pen:</p> 
     <div class="highlight">
      <pre><code class="language-javascript" data-lang="javascript"><span></span><span class="kr">const</span> <span class="nx">formToJSON</span> <span class="o">=</span> <span class="nx">elements</span> <span class="o">=&gt;</span> <span class="p">[].</span><span class="nx">reduce</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">elements</span><span class="p">,</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">element</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

  <span class="c1">// Make sure the element has the required properties and should be added.</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">isValidElement</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nx">isValidValue</span><span class="p">(</span><span class="nx">element</span><span class="p">))</span> <span class="p">{</span>

    <span class="cm">/*</span>
<span class="cm"> * Some fields allow for more than one value, so we need to check if this</span>
<span class="cm"> * is one of those fields and, if so, store the values as an array.</span>
<span class="cm"> */</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">isCheckbox</span><span class="p">(</span><span class="nx">element</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">||</span> <span class="p">[]).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">isMultiSelect</span><span class="p">(</span><span class="nx">element</span><span class="p">))</span> <span class="p">{</span>
      <span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">getSelectValues</span><span class="p">(</span><span class="nx">element</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="nx">data</span><span class="p">[</span><span class="nx">element</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">value</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
<span class="p">},</span> <span class="p">{});</span>
</code></pre>
     </div> 
     <h4 id="run-a-quick-test-of-multi-select-values">Run a quick test of multi-select values.</h4> 
     <p>Since our current form doesn’t have a select with the <code>multiple</code> attribute, so let’s quickly add that to the <code>subject</code> field in our pen.</p> 
     <p>Look for the <code>select</code> in the HTML pane and add the <code>multiple</code> attribute like so:</p> 
     <div class="highlight">
      <pre><code class="language-jade" data-lang="jade"><span></span>      <span class="nt">select</span><span class="nf">#subject</span><span class="nc">.contact-form__input.contact-form__input--select</span>(
        <span class="na">name=</span><span class="s">"subject"</span>
        <span class="na">multiple</span>
      )
</code></pre>
     </div> 
     <p>Now we can actually test. Click on both options and submit the form. The out put will now be:</p> 
     <div class="highlight">
      <pre><code class="language-json" data-lang="json"><span></span><span class="p">{</span>
  <span class="nt">"subject"</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">"I have a problem."</span><span class="p">,</span>
    <span class="s2">"I have a general question."</span>
  <span class="p">],</span>
  <span class="nt">"secret"</span><span class="p">:</span> <span class="s2">"1b3a9374-1a8e-434e-90ab-21aa7b9b80e7"</span>
<span class="p">}</span>
</code></pre>
     </div> 
     <p>After we’ve tested, we can remove the <code>multiple</code> attribute from the <code>select</code> input.</p> 
     <aside class="article__aside">
      <p><strong>NOTE:</strong> Reading values from a multi-select isn’t supported in IE11 and below using this script. Personally, I would recommend just using checkboxes — I think multi-selects are a confusing user experience for many people — but if you need to support them in older browsers you’ll need to modify this code.</p> 
     </aside> 
     <h2 id="the-final-result-form-field-values-are-collected-in-an-object-for-use-as-json">The Final Result: Form Field Values Are Collected in an Object for Use as JSON</h2> 
     <p>At this point, we’ve built a small script that will extract the values from a form as an object literal, which can easily be converted to JSON using <code>JSON.stringify()</code>.</p> 
     <p>We can test by filling out our form with dummy data and submitting it.</p> 
     <p>Use your own fork of the pen, or enter dummy data in the form below:</p> 
     <p>
      <amp-iframe width="750" height="1000" sandbox="allow-scripts allow-same-origin" layout="responsive" frameborder="0" src="https://codepen.io/jlengstorf/embed/YWJLwz/?height=990&amp;theme-id=dark&amp;default-tab=result&amp;embed-version=2"> 
      </amp-iframe></p> 
     <p>After submitting, we’ll see the info we entered, and it’ll look something like the following:</p> 
     <div class="highlight">
      <pre><code class="language-json" data-lang="json"><span></span><span class="p">{</span>
  <span class="nt">"salutation"</span><span class="p">:</span> <span class="s2">"Ms."</span><span class="p">,</span>
  <span class="nt">"name"</span><span class="p">:</span> <span class="s2">"Pac-Man"</span><span class="p">,</span>
  <span class="nt">"email"</span><span class="p">:</span> <span class="s2">"mspacman@example.com"</span><span class="p">,</span>
  <span class="nt">"subject"</span><span class="p">:</span> <span class="s2">"I have a problem."</span><span class="p">,</span>
  <span class="nt">"message"</span><span class="p">:</span> <span class="s2">"These ghosts keep chasing me!"</span><span class="p">,</span>
  <span class="nt">"snacks"</span><span class="p">:</span> <span class="p">[</span>
    <span class="s2">"pizza"</span><span class="p">,</span>
    <span class="s2">"cake"</span>
  <span class="p">],</span>
  <span class="nt">"secret"</span><span class="p">:</span> <span class="s2">"1b3a9374-1a8e-434e-90ab-21aa7b9b80e7"</span>
<span class="p">}</span>
</code></pre>
     </div> 
     <div class="footnotes"> 
      <hr> 
      <ol> 
       <li id="fn:homework">And even if it’s not something we’d ever use in production, writing our own utility scripts is a fantastic way to increase our understanding of how things work. If we rely too much on a tool’s “magic” to make our apps work, it becomes <em>really</em> hard to debug them when we find a problem that falls outside of the tool’s scope. <a class="footnote-return" href="#fnref:homework">?</a></li> 
      </ol> 
     </div> 
     <section class="article__discussion">
      <h2 class="article__discussion-heading">Question? Ideas for improvements? Spotted a bug?</h2>
      <p class="article__discussion-text">The code in this article is <a href="http://codepen.io/jlengstorf/pen/YWJLwz">available on Codepen</a>. You can <a href="http://codepen.io/jlengstorf/details/YWJLwz">add a comment, fork, or favorite</a> this pen. I'd really love to hear your ideas for optimizations, improvements, or improved clarity.</p>
     </section>
    </article>
    <footer class="article__footer footer">
     <div class="footer__meta">
      <amp-img class="footer__image" src="https://code.lengstorf.com/images/jason-lengstorf.jpg" srcset="https://code.lengstorf.com/images/jason-lengstorf.jpg 1x, https://code.lengstorf.com/images/jason-lengstorf@2x.jpg 2x" attribution="paint with stars photography" width="125" height="125"></amp-img>
      <div class="footer__links">
       <nav class="footer__links-nav">
        <a class="footer__link" href="https://twitter.com/jlengstorf">
         <svg class="footer__icon footer__icon--twitter" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 30 30">
          <path fill-rule="evenodd" d="M30 8c-1.2.5-2.4.8-3.7 1 1.3-.8 2.3-2 2.7-3.4-1.2.7-2.5 1.2-4 1.4-1-1-2.6-2-4.3-2-3.4 0-6.2 3-6.2 6.2 0 .5 0 1 .2 1.4C9.7 12.4 5 10 2 6.2c-.4 1-.7 2-.7 3 0 2.2 1 4 2.7 5.2-1 0-2-.3-2.8-.8 0 3 2 5.6 5 6-.6.3-1 .3-1.7.3-.4 0-.8 0-1-.2C4 22.3 6.4 24 9 24c-2 1.7-4.7 2.7-7.5 2.7H0c2.7 1.7 6 2.7 9.4 2.7 11.3 0 17.4-9.4 17.4-17.5v-1c1.2-.7 2.2-1.8 3-3z"></path>
         </svg></a> 
        <a class="footer__link" href="https://facebook.com/jlengstorf">
         <svg class="footer__icon footer__icon--facebook" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 30 30">
          <path fill-rule="evenodd" d="M11 5.8v4H8V15h3v15h6.2V15h4.2s.4-2.4.5-5H17V6.4c0-.5.7-1.2 1.4-1.2H22V0h-4.6C11 0 11 5 11 5.8z"></path>
         </svg></a> 
        <a class="footer__link" href="https://github.com/jlengstorf">
         <svg class="footer__icon footer__icon--github" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 30 30">
          <path fill-rule="evenodd" d="M15 0C6.7 0 0 6.7 0 15c0 6.6 4.3 12.2 10.3 14.2.7.2 1-.3 1-.7V26c-4.2 1-5-2-5-2-.8-1.8-1.8-2.2-1.8-2.2-1.3-1 0-1 0-1 1.7 0 2.4 1.6 2.4 1.6 1.3 2.3 3.5 1.6 4.3 1.2 0-1 .5-1.6 1-2-3.4-.3-7-1.6-7-7.4 0-1.6.7-3 1.7-4-.2-.4-.7-2 0-4 0 0 1.4-.4 4.2 1.6 1.2-.4 2.5-.5 3.8-.5 1.3 0 2.6 0 3.8.5 2.8-2 4-1.6 4-1.6 1 2 .4 3.6.2 4 1 1 1.6 2.4 1.6 4 0 5.8-3.5 7-7 7.4.7.5 1 1.4 1 2.8v4c0 .5.4 1 1.2.8 6-2 10.2-7.6 10.2-14.2 0-8.3-6.7-15-15-15"></path>
         </svg></a>
       </nav>
      </div>
     </div>
     <div class="footer__bio">
      <h3 class="footer__heading">Jason Lengstorf is a developer, designer, author, speaker, and traveler.</h3>
      <div class="footer__worked-with">
       <p class="footer__worked-with-lede">I’ve worked with great companies, including:</p>
       <amp-img class="footer__worked-with-image" src="https://code.lengstorf.com/images/worked-with-dark.png" srcset="https://code.lengstorf.com/images/worked-with-dark.png 1x, https://code.lengstorf.com/images/worked-with-dark@2x.png 2x" width="300" height="19"></amp-img>
      </div>
      <div class="footer__blurb">
       <p>Like so many of my generation, I’ve dedicated my life to learning a skill that’ll be worth jack shit when the zombies get here. Until then, I’ll be figuring out new ways to move lights in the box in exchange for social status and food money.</p>
       <p>You can <a href="https://code.lengstorf.com/hire-me/">hire me as a designer, developer, or a trainer</a> — I can show you how to build it, teach your team how to build it faster, or build it for you.</p>
       <p>I also write about non-code things at <a href="https://lengstorf.com/">lengstorf.com</a>.</p>
      </div>
     </div>
    </footer>
   </article>
  </main>
  <footer class="site-footer">
   <nav class="site-footer__nav">
    <a class="site-footer__nav-link" href="https://code.lengstorf.com/" title="Jason Lengstorf on code">Home</a> 
    <a class="site-footer__nav-link" href="https://code.lengstorf.com/category/front-end/" title="">Front-End</a> 
    <a class="site-footer__nav-link" href="https://code.lengstorf.com/category/api/" title="">APIs</a> 
    <a class="site-footer__nav-link" href="https://code.lengstorf.com/category/build-tools/" title="">Build Tools</a> 
    <a class="site-footer__nav-link" href="https://code.lengstorf.com/category/devops/" title="">DevOps</a> 
    <a class="site-footer__nav-link" href="https://code.lengstorf.com/category/cms/" title="">CMS</a> 
    <a class="site-footer__nav-link" href="https://code.lengstorf.com/hire-me/" title="">Hire Me</a> 
    <a class="site-footer__nav-link" href="https://lengstorf.com/contact/" title="">Contact</a> 
   </nav>
   <p class="site-footer__credits">All content © <a href="https://code.lengstorf.com/">Jason Lengstorf</a>.</p>
  </footer>
 </body>
</html>