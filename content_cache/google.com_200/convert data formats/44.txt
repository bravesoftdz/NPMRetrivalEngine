<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="initial-scale=1.0, maximum-scale=1.0, user-scalable=no"> 
  <!--[if lt IE 9]>
    <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
  <![endif]--> 
  <title>Chance.js: Utility library to generate anything random for JavaScript</title> 
  <meta name="description" content="Utility library to generate anything random for JavaScript
"> 
  <link rel="stylesheet" href="style.css"> 
  <meta name="apple-mobile-web-app-capable" content="yes"> 
  <meta name="apple-mobile-web-app-status-bar-style" content="white"> 
  <meta name="format-detection" content="telephone=no"> 
  <link rel="apple-touch-icon-precomposed" href="icon.png"> 
  <link rel="icon" type="image/png" href="favicon.png"> 
 </head> 
 <body> 
  <div id="menu_icon">
   ?
  </div> 
  <aside id="sidebar" class="interface"> 
   <a class="toc_title" href="#"> Chance.js <span class="version">(1.0.11)</span> </a> 
   <ul class="toc_section"> 
    <li><a href="#download">Download</a></li> 
    <li><a href="#todo">Todo</a></li> 
    <li><a href="#changelog">Change Log</a></li> 
    <li><a href="#thanks">Acknowledgements</a></li> 
   </ul> 
   <a class="toc_title" href="#usage">Usage</a> 
   <ul class="toc_section"> 
    <li><a href="#bower">bower</a></li> 
    <li><a href="#browser">browser</a></li> 
    <li><a href="#cli">cli</a></li> 
    <li><a href="#node">node</a></li> 
    <li><a href="#requirejs">requirejs</a></li> 
    <li><a href="#seed">seed</a></li> 
    <li><a href="#function">function</a></li> 
   </ul> 
   <a class="toc_title" href="#basics">Basics</a> 
   <ul class="toc_section"> 
    <li><a href="#bool">bool</a></li> 
    <li><a href="#character">character</a></li> 
    <li><a href="#floating">floating</a></li> 
    <li><a href="#integer">integer</a></li> 
    <li><a href="#letter">letter</a></li> 
    <li><a href="#natural">natural</a></li> 
    <li><a href="#string">string</a></li> 
   </ul> 
   <a class="toc_title" href="#text">Text</a> 
   <ul class="toc_section"> 
    <li><a href="#paragraph">paragraph</a></li> 
    <li><a href="#sentence">sentence</a></li> 
    <li><a href="#syllable">syllable</a></li> 
    <li><a href="#word">word</a></li> 
   </ul> 
   <a class="toc_title" href="#person">Person</a> 
   <ul class="toc_section"> 
    <li><a href="#age">age</a></li> 
    <li><a href="#birthday">birthday</a></li> 
    <li><a href="#cf">cf</a></li> 
    <li><a href="#cpf">cpf</a></li> 
    <li><a href="#first">first</a></li> 
    <li><a href="#gender">gender</a></li> 
    <li><a href="#last">last</a></li> 
    <li><a href="#name">name</a></li> 
    <li><a href="#prefix">prefix</a></li> 
    <li><a href="#ssn">ssn</a></li> 
    <li><a href="#suffix">suffix</a></li> 
   </ul> 
   <a class="toc_title" href="#mobile">Mobile</a> 
   <ul class="toc_section"> 
    <li><a href="#android_id">android_id</a></li> 
    <li><a href="#apple_token">apple_token</a></li> 
    <li><a href="#bb_pin">bb_pin</a></li> 
    <li><a href="#wp7_anid">wp7_anid</a></li> 
    <li><a href="#wp8_anid2">wp8_anid2</a></li> 
   </ul> 
   <a class="toc_title" href="#web">Web</a> 
   <ul class="toc_section"> 
    <li><a href="#avatar">avatar</a></li> 
    <li><a href="#color">color</a></li> 
    <li><a href="#domain">domain</a></li> 
    <li><a href="#email">email</a></li> 
    <li><a href="#fbid">fbid</a></li> 
    <li><a href="#google_analytics">google_analytics</a></li> 
    <li><a href="#hashtag">hashtag</a></li> 
    <li><a href="#ip">ip</a></li> 
    <li><a href="#ipv6">ipv6</a></li> 
    <li><a href="#klout">klout</a></li> 
    <li><a href="#tld">tld</a></li> 
    <li><a href="#twitter">twitter</a></li> 
    <li><a href="#url">url</a></li> 
   </ul> 
   <a class="toc_title" href="#location">Location</a> 
   <ul class="toc_section"> 
    <li><a href="#address">address</a></li> 
    <li><a href="#altitude">altitude</a></li> 
    <li><a href="#areacode">areacode</a></li> 
    <li><a href="#city">city</a></li> 
    <li><a href="#coordinates">coordinates</a></li> 
    <li><a href="#country">country</a></li> 
    <li><a href="#depth">depth</a></li> 
    <li><a href="#geohash">geohash</a></li> 
    <li><a href="#latitude">latitude</a></li> 
    <li><a href="#longitude">longitude</a></li> 
    <li><a href="#phone">phone</a></li> 
    <li><a href="#postal">postal</a></li> 
    <li><a href="#province">province</a></li> 
    <li><a href="#state">state</a></li> 
    <li><a href="#street">street</a></li> 
    <li><a href="#zip">zip</a></li> 
   </ul> 
   <a class="toc_title" href="#time">Time</a> 
   <ul class="toc_section"> 
    <li><a href="#ampm">ampm</a></li> 
    <li><a href="#date">date</a></li> 
    <li><a href="#hammertime">hammertime</a></li> 
    <li><a href="#hour">hour</a></li> 
    <li><a href="#millisecond">millisecond</a></li> 
    <li><a href="#minute">minute</a></li> 
    <li><a href="#month">month</a></li> 
    <li><a href="#second">second</a></li> 
    <li><a href="#timestamp">timestamp</a></li> 
    <li><a href="#timezone">timezone</a></li> 
    <li><a href="#year">year</a></li> 
   </ul> 
   <a class="toc_title" href="#finance">Finance</a> 
   <ul class="toc_section"> 
    <li><a href="#cc">cc</a></li> 
    <li><a href="#cc_type">cc_type</a></li> 
    <li><a href="#currency">currency</a></li> 
    <li><a href="#currency_pair">currency_pair</a></li> 
    <li><a href="#dollar">dollar</a></li> 
    <li><a href="#euro">euro</a></li> 
    <li><a href="#exp">exp</a></li> 
    <li><a href="#exp_month">exp_month</a></li> 
    <li><a href="#exp_year">exp_year</a></li> 
   </ul> 
   <a class="toc_title" href="#helpers">Helpers</a> 
   <ul class="toc_section"> 
    <li><a href="#capitalize">capitalize</a></li> 
    <li><a href="#mixin">mixin</a></li> 
    <li><a href="#pad">pad</a></li> 
    <li><a href="#pick">pick</a></li> 
    <li><a href="#pickone">pickone</a></li> 
    <li><a href="#pickset">pickset</a></li> 
    <li><a href="#set">set</a></li> 
    <li><a href="#shuffle">shuffle</a></li> 
   </ul> 
   <a class="toc_title" href="#miscellaneous">Miscellaneous</a> 
   <ul class="toc_section"> 
    <li><a href="#dice">dice</a></li> 
    <li><a href="#guid">guid</a></li> 
    <li><a href="#hash">hash</a></li> 
    <li><a href="#hidden">hidden</a></li> 
    <li><a href="#n">n</a></li> 
    <li><a href="#normal">normal</a></li> 
    <li><a href="#radio">radio</a></li> 
    <li><a href="#rpg">rpg</a></li> 
    <li><a href="#tv">tv</a></li> 
    <li><a href="#unique">unique</a></li> 
    <li><a href="#weighted">weighted</a></li> 
   </ul> 
  </aside> 
  <div class="container"> 
   <header> 
    <h1><img src="logo.png" alt="Chance.js"></h1> 
    <p> <b>Chance</b> is a minimalist generator of random <a href="#true-random">[1]</a> strings, numbers, etc. to help reduce some monotony particularly while writing automated tests or anywhere else you need anything random. </p> 
    <p> Chance is open source software and is released under the developer and business-friendly <a href="http://en.wikipedia.org/wiki/MIT_License">MIT license</a>. </p> 
    <p> <b>Chance</b> is loaded on this site so you can just open the console on your browser and play! <img class="image" src="inspector.png"> </p> 
    <p> <a href="http://twitter.com/share" class="twitter-share-button" data-url="http://chancejs.com/" data-text="Chance - Utility library to generate random things for JavaScript" data-count="horizontal" data-via="victorquinn">Tweet</a> </p> 
    <p> Written by <a href="https://www.victorquinn.com">Victor Quinn</a> </p> 
    <h3 id="npm">NPM</h3> 
    <p><a href="https://nodei.co/npm/chance/"><img src="https://nodei.co/npm/chance.png?downloads=true"></a></p> 
    <h3 id="download">Download Chance</h3> 
    <ul class="downloads"> 
     <li> <a href="chance.js" class="download" download="chance.js">chance.js v1.0.11 (for development)</a> - <i>95KB uncompressed</i> </li> 
     <li> <a href="chance.min.js" class="download">chance.min.js v1.0.11 (for production)</a> – <i>55KB, 17KB when gzipped</i> </li> 
    </ul> 
    <p> Or <b><a href="https://github.com/chancejs/chancejs">grab the latest version on Github</a></b>. </p> 
    <ul class="downloads"> 
     <li> <iframe src="http://ghbtns.com/github-btn.html?user=chancejs&amp;repo=chancejs&amp;type=watch&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20"></iframe> <iframe src="http://ghbtns.com/github-btn.html?user=chancejs&amp;repo=chancejs&amp;type=fork&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20"></iframe> </li> 
    </ul> 
    <a href="https://travis-ci.org/chancejs/chancejs"><img src="https://travis-ci.org/chancejs/chancejs.png"></a> 
   </header> 
   <section id="documentation"> 
    <hr> 
    <h2 id="usage">Usage</h2> 
    <article class="method" id="bower"> 
     <h3>bower </h3> 
     <p>It can also be used with <a href="http://bower.io">Bower</a></p> 
     <figure class="highlight">
      <pre><code class="language-bash" data-lang="bash">bower install chance</code></pre>
     </figure> 
     <p>then in the HTML of your app:</p> 
     <figure class="highlight">
      <pre><code class="language-html" data-lang="html"><span class="c">&lt;!-- Load Chance --&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"bower_components/chance/chance.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script&gt;</span>
  <span class="c1">// Use Chance</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">chance</span><span class="p">.</span><span class="nx">string</span><span class="p">());</span>
<span class="nt">&lt;/script&gt;</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="browser"> 
     <h3>browser </h3> 
     <h4 id="easy">Easy</h4> 
     <p><strong>Chance</strong> instantiates itself onto the window. This means that in the simplest case you can just include the script tag then use an instance of <strong>Chance</strong> immediately.</p> 
     <figure class="highlight">
      <pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"chance.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chance</span><span class="p">.</span><span class="nx">bool</span><span class="p">());</span>
<span class="nt">&lt;/script&gt;</span></code></pre>
     </figure> 
     <p>The above snippet would result in either true or false being logged to your console. Note how the instance is lowercase <em>chance</em>. Uppercase <em>Chance</em> is the constructor which will create a new instance of <strong>Chance</strong>.</p> 
     <h4 id="intermediate">Intermediate</h4> 
     <p>You can also ignore the global instantiation of <strong>Chance</strong> and create your own. This allows you to create multiple instances if you’d like. For convenience, we also bind <strong>Chance</strong> to window so it’s accessible globally in the browser at <em>window.Chance</em> or just <em>Chance</em>.</p> 
     <figure class="highlight">
      <pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"chance.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">my_chance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">my_chance</span><span class="p">.</span><span class="nx">bool</span><span class="p">());</span>
<span class="nt">&lt;/script&gt;</span></code></pre>
     </figure> 
     <h4 id="advanced">Advanced</h4> 
     <p>If you create your own instance of <strong>Chance</strong>, you can provide your own seed if you would like to be repeatable or if you’d like a more truly random seed. In the below example, I am doing an AJAX call to hit <a href="http://www.random.org">Random.org</a> to retrieve a <em>true</em> random number which I use to seed Chance.</p> 
     <figure class="highlight">
      <pre><code class="language-html" data-lang="html"><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://chancejs.com/chance.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"http://code.jquery.com/jquery-1.10.1.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script&gt;</span>
    <span class="kd">var</span> <span class="nx">mySeed</span><span class="p">;</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s2">"https://www.random.org/integers/"</span><span class="p">,</span> <span class="p">{</span><span class="na">num</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">,</span> <span class="na">col</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">,</span> <span class="na">min</span><span class="p">:</span> <span class="s2">"1"</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="s2">"1000000000"</span><span class="p">,</span> <span class="na">base</span><span class="p">:</span> <span class="s2">"10"</span><span class="p">,</span> <span class="na">format</span><span class="p">:</span> <span class="s2">"plain"</span><span class="p">,</span> <span class="na">rnd</span><span class="p">:</span> <span class="s2">"new"</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">randNum</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">mySeed</span> <span class="o">=</span> <span class="nx">randNum</span><span class="p">;</span>

      <span class="c1">// Instantiate Chance with this truly random number as the seed</span>
      <span class="kd">var</span> <span class="nx">my_seeded_chance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">(</span><span class="nx">mySeed</span><span class="p">);</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">my_seeded_chance</span><span class="p">.</span><span class="nx">natural</span><span class="p">());</span>
    <span class="p">});</span>
<span class="nt">&lt;/script&gt;</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="cli"> 
     <h3>cli </h3> 
     <p>To use Chance from the command line, install <code class="highlighter-rouge">chance-cli</code> globally with:</p> 
     <figure class="highlight">
      <pre><code class="language-bash" data-lang="bash">npm install -g chance-cli</code></pre>
     </figure> 
     <p>Then invoke any generator by name followed by options, like so:</p> 
     <figure class="highlight">
      <pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>chance name --prefix <span class="nb">true </span>Dr. Georgia Sanchez

<span class="gp">$ </span>chance latitude --min 12.34 --max 56.78
22.01836</code></pre>
     </figure> 
     <p>More details in the <a href="https://github.com/chancejs/chance-cli">chance-cli README</a></p> 
    </article> 
    <article class="method" id="node"> 
     <h3>node </h3> 
     <p>It can also be used in <a href="http://nodejs.org">Node.js</a></p> 
     <figure class="highlight">
      <pre><code class="language-bash" data-lang="bash">npm install chance</code></pre>
     </figure> 
     <p>then in your app</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="c1">// Load Chance</span>
<span class="kd">var</span> <span class="nx">Chance</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'chance'</span><span class="p">);</span>

<span class="c1">// Instantiate Chance so it can be used</span>
<span class="kd">var</span> <span class="nx">chance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">();</span>

<span class="c1">// Use Chance here.</span>
<span class="kd">var</span> <span class="nx">my_random_string</span> <span class="o">=</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">string</span><span class="p">();</span></code></pre>
     </figure> 
     <p>As of version 0.5.5, the following is also offered as a convenience for getting an instance of Chance</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="c1">// Load and instantiate Chance</span>
<span class="kd">var</span> <span class="nx">chance</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'chance'</span><span class="p">).</span><span class="nx">Chance</span><span class="p">();</span>

<span class="c1">// Use Chance here.</span>
<span class="kd">var</span> <span class="nx">my_random_string</span> <span class="o">=</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">string</span><span class="p">();</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="requirejs"> 
     <h3>requirejs </h3> 
     <p>Load Chance with <a href="http://requirejs.org">RequireJS</a></p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">require</span><span class="p">([</span><span class="s1">'Chance'</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Chance</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Instantiate</span>
    <span class="kd">var</span> <span class="nx">chance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">();</span>

    <span class="c1">// Then use it:</span>
    <span class="kd">var</span> <span class="nx">my_random_integer</span> <span class="o">=</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">integer</span><span class="p">();</span>
  <span class="p">});</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="seed"> 
     <h3>seed </h3> 
     <p>You can also instantiate your own instance of Chance with a known seed. This is useful for creating repeatable results.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">chance1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">(</span><span class="mi">12345</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">chance2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">(</span><span class="mi">12345</span><span class="p">);</span>

<span class="c1">// These yield the same values, in sequence</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chance1</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chance2</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span></code></pre>
     </figure> 
     <p>Since both copies of Chance had the same seed, they will both generate the same random number sequence each time they’re called.</p> 
     <p>This allows for repeatability, if desired.</p> 
     <p>This is possible because <strong>Chance</strong> is built atop a <a href="http://en.wikipedia.org/wiki/Mersenne_twister">Mersenne Twister</a>, a pseudo-random number generator which produces repeatable results given the same seed.</p> 
     <p>Optionally provide the seed as a string.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">chance1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">(</span><span class="s2">"foo"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">chance2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">(</span><span class="s2">"bar"</span><span class="p">);</span>

<span class="c1">// These will be different</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chance1</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chance2</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span></code></pre>
     </figure> 
     <p>Optionally provide multiple arguments as the seed.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">chance1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">(</span><span class="s2">"hold"</span><span class="p">,</span> <span class="s2">"me"</span><span class="p">,</span> <span class="s2">"closer"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">chance2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">(</span><span class="s2">"tony"</span><span class="p">,</span> <span class="s2">"danza"</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">chance3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">(</span><span class="s2">"hold"</span><span class="p">,</span> <span class="s2">"me"</span><span class="p">,</span> <span class="s2">"closer"</span><span class="p">);</span>

<span class="c1">// These will be different</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chance1</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chance2</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>

<span class="c1">// This will be the same as the value from chance1 above</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">chance3</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="function"> 
     <h3>function </h3> 
     <p>Instead of providing a seed, which will be used to seed our <a href="https://en.wikipedia.org/wiki/Mersenne_twister">Mersenne Twister</a>, you can also specify an arbitrary function to generate random numbers which the rest of the library will utilize when generating everything else.</p> 
     <p>A rather simple example, simply using Math.random() instead of our Mersenne Twister</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="c1">// Use Math.random() instead of our Mersenne Twister</span>
<span class="kd">var</span> <span class="nx">chance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Chance</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">);</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">address</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'131 Asmun Pike'</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">address</span><span class="p">()</span> 
<span class="o">=&gt;</span> <span class="s1">'261 Pawnaf Highway'</span></code></pre>
     </figure> 
     <p>Chance will appear to work just the same, but have a different underlying random generator.</p> 
     <p>This function should return any number between 0 and 1.</p> 
    </article> 
    <h2 id="basics">Basics</h2> 
    <article class="method" id="bool"> 
     <h3>bool </h3> 
     <pre class="signature"><code>chance.bool()
chance.bool({likelihood: 30})
</code></pre> 
     <p>Return a random boolean value (<code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code>).</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">bool</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="kc">true</span></code></pre>
     </figure> 
     <p>The default likelihood of success (returning <code class="highlighter-rouge">true</code>) is 50%. Can optionally specify the likelihood in percent:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">bool</span><span class="p">({</span><span class="na">likelihood</span><span class="p">:</span> <span class="mi">30</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="kc">false</span></code></pre>
     </figure> 
     <p>In this case only a 30% likelihood of <code class="highlighter-rouge">true</code>, and a 70% likelihood of <code class="highlighter-rouge">false</code>.</p> 
    </article> 
    <article class="method" id="character"> 
     <h3>character </h3> 
     <pre class="signature"><code>chance.character()
chance.character({pool: 'abcde'})
chance.character({alpha: true})
chance.character({casing: 'lower'})
chance.character({symbols: true})
</code></pre> 
     <p>Return a random character.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">character</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'v'</span></code></pre>
     </figure> 
     <p>By default it will return a string with random character from the following pool.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="s1">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()'</span></code></pre>
     </figure> 
     <p>Optionally specify a pool and the character will be generated with characters only from that pool.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">character</span><span class="p">({</span><span class="na">pool</span><span class="p">:</span> <span class="s1">'abcde'</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'c'</span></code></pre>
     </figure> 
     <p>Optionally specify alpha for only an alphanumeric character.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">character</span><span class="p">({</span><span class="na">alpha</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'N'</span></code></pre>
     </figure> 
     <p>Default includes both upper and lower case. It’s possible to specify one or the other.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">character</span><span class="p">({</span><span class="na">casing</span><span class="p">:</span> <span class="s1">'lower'</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'j'</span></code></pre>
     </figure> 
     <p><em>Note, wanted to call this key just <code class="highlighter-rouge">case</code> but unfortunately that’s a reserved word in JavaScript for use in a switch statement</em></p> 
     <p>Optionally return only symbols</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">character</span><span class="p">({</span><span class="na">symbols</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'%'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="floating"> 
     <h3>floating </h3> 
     <pre class="signature"><code>chance.floating()
chance.floating({fixed: 7})
chance.floating({min: 0, max: 100})
</code></pre> 
     <p class="pullquote" data-pullquote="Wanted to use float or double as the method name but both are JS reserved words"></p> 
     <p>Return a random floating point number.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">floating</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="o">-</span><span class="mf">211920142886.5024</span></code></pre>
     </figure> 
     <p>By default it will return a fixed number of at most 4 digits after the decimal.</p> 
     <p>Note: <em>at most</em> 4 digits. This because, unless we returned trailing zeroes (which aren’t allowed on the JavaScript float) we can’t guarantee 4 digits after the decimal. So if random chance comes back with <code class="highlighter-rouge">82383854.2000</code> then <code class="highlighter-rouge">82383854.2</code> is what will be returned.</p> 
     <p>To retrieve a set number of fixed digits after the decimal, provide it as an option.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">floating</span><span class="p">({</span><span class="na">fixed</span><span class="p">:</span> <span class="mi">7</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="o">-</span><span class="mf">749512327.7447168</span></code></pre>
     </figure> 
     <p>As with other number functions, can include a min and/or max.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">floating</span><span class="p">({</span><span class="na">min</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">100</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="mf">31.9021</span></code></pre>
     </figure> 
     <p>Or combine them.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">floating</span><span class="p">({</span><span class="na">min</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="na">fixed</span><span class="p">:</span> <span class="mi">8</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="mf">45.92367599</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="integer"> 
     <h3>integer </h3> 
     <pre class="signature"><code>chance.integer()
chance.integer({min: -20, max: 20})
</code></pre> 
     <p class="pullquote" data-pullquote="9007199254740992 is 2^53 and is the largest number value in JavaScript"></p> 
     <p>Return a random integer.</p> 
     <p><em>range: -9007199254740992 to 9007199254740992</em></p> 
     <p>See: <a href="http://vq.io/16qnIYj">Largest number in JavaScript</a></p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">integer</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="o">-</span><span class="mi">1293235</span></code></pre>
     </figure> 
     <p>Can optionally provide min and max.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">integer</span><span class="p">({</span><span class="na">min</span><span class="p">:</span> <span class="o">-</span><span class="mi">20</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">20</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="o">-</span><span class="mi">7</span></code></pre>
     </figure> 
     <p>These min and max are inclusive, so they are included in the range. This means <code class="highlighter-rouge">chance.integer({min: -2, max: 2});</code> would return either -2, -1, 0, 1, or 2.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="c1">// Specific case</span>
<span class="o">-</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="nx">random</span> <span class="nx">number</span> <span class="o">&lt;=</span> <span class="mi">2</span>

<span class="c1">// General case</span>
<span class="nx">min</span> <span class="o">&lt;=</span> <span class="nx">random</span> <span class="nx">number</span> <span class="o">&lt;=</span> <span class="nx">max</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="letter"> 
     <h3>letter </h3> 
     <pre class="signature"><code>chance.letter()
chance.letter({casing: 'lower'})
</code></pre> 
     <p>Return a random letter.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">letter</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'p'</span></code></pre>
     </figure> 
     <p>By default it will return a random lowercase letter.</p> 
     <p>It’s possible to specify upper case</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">letter</span><span class="p">({</span><span class="na">casing</span><span class="p">:</span> <span class="s1">'upper'</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'A'</span></code></pre>
     </figure> 
     <p><em>Note, wanted to call this key just <code class="highlighter-rouge">case</code> but unfortunately that’s a reserved word in JavaScript for use in a switch statement</em></p> 
    </article> 
    <article class="method" id="natural"> 
     <h3>natural </h3> 
     <pre class="signature"><code>chance.natural()
chance.natural({min: 1, max: 20})
</code></pre> 
     <p>Return a natural number.</p> 
     <p><em>range: 0 to 9007199254740992</em></p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">natural</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="mi">125019392395</span></code></pre>
     </figure> 
     <p>Can optionally provide min and max.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">natural</span><span class="p">({</span><span class="na">min</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">20</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="mi">14</span></code></pre>
     </figure> 
     <p>These are inclusive, so they are included in the range. This means <code class="highlighter-rouge">chance.natural({min: 1, max: 3});</code> would return either 1, 2, or 3 or:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="c1">// Specific case</span>
<span class="mi">1</span> <span class="o">&lt;=</span> <span class="nx">random</span> <span class="nx">number</span> <span class="o">&lt;=</span> <span class="mi">3</span>

<span class="c1">// General case</span>
<span class="nx">min</span> <span class="o">&lt;=</span> <span class="nx">random</span> <span class="nx">number</span> <span class="o">&lt;=</span> <span class="nx">max</span></code></pre>
     </figure> 
     <p><a href="https://en.wikipedia.org/wiki/Natural_number">Natural Number on Wikipedia</a></p> 
    </article> 
    <article class="method" id="string"> 
     <h3>string </h3> 
     <pre class="signature"><code>chance.string()
chance.string({length: 5})
chance.string({pool: 'abcde'})
</code></pre> 
     <p>Return a random string.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">string</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'Z&amp;Q78&amp;fqkPq'</span></code></pre>
     </figure> 
     <p>By default it will return a string with random length of 5-20 characters and will contain any of the following characters.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="s1">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&amp;*()[]'</span></code></pre>
     </figure> 
     <p>Can optionally specify a length and the string will be exactly that length.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">string</span><span class="p">({</span><span class="na">length</span><span class="p">:</span> <span class="mi">5</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'YN%fG'</span></code></pre>
     </figure> 
     <p>Can optionally specify a pool and the string will be generated with characters only from that pool.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">string</span><span class="p">({</span><span class="na">pool</span><span class="p">:</span> <span class="s1">'abcde'</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'cccdeeabedebb'</span></code></pre>
     </figure> 
     <p>Of course these options can also be combined.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">string</span><span class="p">({</span><span class="na">length</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="na">pool</span><span class="p">:</span> <span class="s1">'abcde'</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'cbbdc'</span></code></pre>
     </figure> 
    </article> 
    <h2 id="text">Text</h2> 
    <article class="method" id="paragraph"> 
     <h3>paragraph </h3> 
     <pre class="signature"><code>chance.paragraph()
chance.paragraph({sentences: 1})
</code></pre> 
     <p>Return a random paragraph generated from sentences populated by semi-pronounceable random (nonsense) words.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">paragraph</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'Lel fi huepe jupu akse zej ire vesik kojvulom zon is biwuwkef pa. Uv hokivej voh ebu numdogi akolo hik uwlez ta vacev ofdaimi acunetum suvet uhdab ir soglazo ju pafbeb. Pub cezeh fuc kebamnul he ok luumoabi rawkig me fov pin zup biv risugra. Ralpunad apkomgib alnirciw akel wa lus wahfum burog buol vecotihe abadahoj ugolo wovki ucojal fec.'</span></code></pre>
     </figure> 
     <p>Default is a paragraph with a random number of sentences from 3 to 7.</p> 
     <p>Optionally specify the number of sentences in the paragraph.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">paragraph</span><span class="p">({</span><span class="na">sentences</span><span class="p">:</span> <span class="mi">1</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Idefeulo foc omoemowa wahteze liv juvde puguprof epehuji upuga zige odfe igo sit pilamhul oto ukurecef.'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="sentence"> 
     <h3>sentence </h3> 
     <pre class="signature"><code>chance.sentence()
chance.sentence({words: 5})
</code></pre> 
     <p>Return a random sentence populated by semi-pronounceable random (nonsense) words.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">sentence</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'Witpevze mappos isoletu fo res bi geow pofin mu rupoho revzi utva ne.'</span></code></pre>
     </figure> 
     <p>The sentence starts with a capital letter, and ends with a period.</p> 
     <p>Default is a sentence with a random number of words from 12 to 18.</p> 
     <p><em>This length is chosen as the default as it works out to the average English sentence is in that range.</em></p> 
     <p>Optionally specify the number of words in the sentence.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">sentence</span><span class="p">({</span><span class="na">words</span><span class="p">:</span> <span class="mi">5</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Waddik jeasmov cakgilta ficub up.'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="syllable"> 
     <h3>syllable </h3> 
     <pre class="signature"><code>chance.syllable()
</code></pre> 
     <p>Return a semi-speakable syllable, 2 or 3 letters</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">syllable</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'fop'</span></code></pre>
     </figure> 
     <p>The syllable is returned in all lower case.</p> 
     <p>A syllable generally alternates between vowel and consanant and is used as the core building block for a word.</p> 
    </article> 
    <article class="method" id="word"> 
     <h3>word </h3> 
     <pre class="signature"><code>chance.word()
chance.word({syllables: 3})
chance.word({length: 5})
</code></pre> 
     <p>Return a semi-pronounceable random (nonsense) word.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">word</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'bappada'</span></code></pre>
     </figure> 
     <p>The word is returned in all lower case.</p> 
     <p>Default is a word with a random number of syllables from 1 to 3.</p> 
     <p><em>This length is chosen as it works out to the average word length of ~5-6 chars which seems about right.</em></p> 
     <p>Can optionally specify a number of syllables which the word will have.</p> 
     <p>Note these are not syllables in the strict language definition of the word, but syllables as we’ve defined here which is 2 or 3 characters, mostly alternating between vowel and consanant. This is the about the best we can do with purely random generation.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">word</span><span class="p">({</span><span class="na">syllables</span><span class="p">:</span> <span class="mi">3</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'tavnamgi'</span></code></pre>
     </figure> 
     <p>Can optionally specify a length and the word will obey that bounding.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">word</span><span class="p">({</span><span class="na">length</span><span class="p">:</span> <span class="mi">5</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'ralve'</span></code></pre>
     </figure> 
     <p>In this case these 2 options are mutually exclusive, that is they cannot be combined as they often make no sense. It wouldn’t be possible to have a word with 7 syllables and a length of 5 or a length of 30 but 2 syllables.</p> 
     <p>Therefore, if both are specified, an Exception will be thrown so the Developer can handle their broken case.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">word</span><span class="p">({</span><span class="na">length</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="na">syllables</span><span class="p">:</span> <span class="mi">20</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="k">new</span> <span class="nx">RangeError</span><span class="p">(</span><span class="s2">"Chance: Cannot specify both syllables AND length."</span><span class="p">);</span></code></pre>
     </figure> 
    </article> 
    <h2 id="person">Person</h2> 
    <article class="method" id="age"> 
     <h3>age </h3> 
     <pre class="signature"><code>chance.age()
chance.age({type: 'child'})
</code></pre> 
     <p>Generate a random age</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">age</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="mi">45</span></code></pre>
     </figure> 
     <p>Default range is between 1 and 120</p> 
     <p>Optionally specify one of a handful of enumerated age types:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">age</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="s1">'child'</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="mi">9</span></code></pre>
     </figure> 
     <p>Allowed types are: <code class="highlighter-rouge">child</code>, <code class="highlighter-rouge">teen</code>, <code class="highlighter-rouge">adult</code>, <code class="highlighter-rouge">senior</code></p> 
    </article> 
    <article class="method" id="birthday"> 
     <h3>birthday </h3> 
     <pre class="signature"><code>chance.birthday()
chance.birthday({string: true})
chance.birthday({type: 'child'})
</code></pre> 
     <p>Generate a random birthday</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">birthday</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="nx">Fri</span> <span class="nx">Aug</span> <span class="mi">16</span> <span class="mi">1985</span> <span class="mi">00</span><span class="err">:</span><span class="mi">00</span><span class="err">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0400</span> <span class="p">(</span><span class="nx">EDT</span><span class="p">)</span></code></pre>
     </figure> 
     <p>By default, returns an actual JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date">Date</a> object.</p> 
     <p>Optionally specify it be returned as a string.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">birthday</span><span class="p">({</span><span class="na">string</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'4/1/1968'</span></code></pre>
     </figure> 
     <p>By default returns in MM/DD/YYYY format. Can specify DD/MM/YYYY as follows:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">birthday</span><span class="p">({</span><span class="na">string</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">american</span><span class="p">:</span> <span class="kc">false</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'28/6/1993'</span></code></pre>
     </figure> 
     <p>For more complex date formats, use the <a href="http://momentjs.com">Moment</a> library.</p> 
     <p>Can also specify the type, same types as with <a href="#age">age</a>.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">birthday</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="s1">'child'</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="nx">Sat</span> <span class="nx">Sep</span> <span class="mi">08</span> <span class="mi">2001</span> <span class="mi">00</span><span class="err">:</span><span class="mi">00</span><span class="err">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0400</span> <span class="p">(</span><span class="nx">EDT</span><span class="p">)</span></code></pre>
     </figure> 
     <p>You can also compose with <code class="highlighter-rouge">chance.year</code> for interesting combinations. For example, let’s say we want to get the birthdays of some renaissance artists (born between 1450 and 1500). We can generate a year and then get a birthday from that year:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">year</span> <span class="o">=</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">year</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1450</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">1500</span> <span class="p">});</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">birthday</span><span class="p">({</span> <span class="na">year</span><span class="p">:</span> <span class="nx">year</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="nx">Wed</span> <span class="nx">Aug</span> <span class="mi">27</span> <span class="mi">1484</span> <span class="mi">11</span><span class="err">:</span><span class="mi">24</span><span class="err">:</span><span class="mi">14</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0400</span> <span class="p">(</span><span class="nx">EDT</span><span class="p">)</span>

<span class="c1">// Could be simplified down to one line</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">birthday</span><span class="p">({</span> <span class="na">year</span><span class="p">:</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">year</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="mi">1450</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">1500</span> <span class="p">})</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="nx">Fri</span> <span class="nx">Nov</span> <span class="mi">26</span> <span class="mi">1469</span> <span class="mi">09</span><span class="err">:</span><span class="mi">17</span><span class="err">:</span><span class="mi">13</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0500</span> <span class="p">(</span><span class="nx">EST</span><span class="p">)</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="cf"> 
     <h3>cf </h3> 
     <pre class="signature"><code>chance.cf()
</code></pre> 
     <p>Generate a random Italian social security number (Codice Fiscale).</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">cf</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'BRSMRT87S49A988X'</span></code></pre>
     </figure> 
     <p>Optionally specify any or all components: first name, last name, gender, birth date, place of birth (using ISTAT geocodes for Italian cities).</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">cf</span><span class="p">({</span><span class="na">first</span><span class="p">:</span> <span class="s1">'Sergio'</span><span class="p">,</span> <span class="na">last</span><span class="p">:</span> <span class="s1">'Leone'</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'LNESRG93P28F067V'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">cf</span><span class="p">({</span><span class="na">first</span><span class="p">:</span> <span class="s1">'Sophia'</span><span class="p">,</span> <span class="na">last</span><span class="p">:</span> <span class="s1">'Loren'</span><span class="p">,</span> <span class="na">gender</span><span class="p">:</span> <span class="s1">'Female'</span><span class="p">,</span> <span class="na">birthday</span><span class="p">:</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="mi">1934</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">20</span><span class="p">),</span> <span class="na">city</span><span class="p">:</span> <span class="s1">'h501'</span><span class="p">});</span>

<span class="o">=&gt;</span> <span class="s1">'LRNSPH34P60H501G'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="cpf"> 
     <h3>cpf </h3> 
     <pre class="signature"><code>chance.cpf()
</code></pre> 
     <p>Generate a random Brazilian tax id.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">cpf</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'607.116.899-62'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="first"> 
     <h3>first </h3> 
     <pre class="signature"><code>chance.first()
chance.first({nationality: 'us'})
</code></pre> 
     <p>Generate a random first name</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">Chance</span><span class="p">.</span><span class="nx">first</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'Leila'</span></code></pre>
     </figure> 
     <p>Optionally specify a gender to limit first names to that gender</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">Chance</span><span class="p">.</span><span class="nx">first</span><span class="p">({</span> <span class="na">gender</span><span class="p">:</span> <span class="s2">"female"</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'Emma'</span></code></pre>
     </figure> 
     <p>Optionally specify a nationality to limit first names to those most common of that nationality</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">Chance</span><span class="p">.</span><span class="nx">first</span><span class="p">({</span> <span class="na">nationality</span><span class="p">:</span> <span class="s2">"it"</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'Alberto'</span></code></pre>
     </figure> 
     <p>Note, currently support for nationality is limited to: <code class="highlighter-rouge">'us', 'it'</code>.</p> 
    </article> 
    <article class="method" id="gender"> 
     <h3>gender </h3> 
     <pre class="signature"><code>chance.gender()
</code></pre> 
     <p>Generate a random gender</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">Chance</span><span class="p">.</span><span class="nx">gender</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'Female'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="last"> 
     <h3>last </h3> 
     <pre class="signature"><code>chance.last()
chance.last({nationality: 'us'})
</code></pre> 
     <p>Generate a random last name</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">Chance</span><span class="p">.</span><span class="nx">last</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'Mago'</span></code></pre>
     </figure> 
     <p>Optionally specify a nationality to limit first names to those most common of that nationality</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">Chance</span><span class="p">.</span><span class="nx">last</span><span class="p">({</span> <span class="na">nationality</span><span class="p">:</span> <span class="s2">"it"</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'Giovannini'</span></code></pre>
     </figure> 
     <p>Note, currently support for nationality is limited to: <code class="highlighter-rouge">'us', 'it'</code>.</p> 
    </article> 
    <article class="method" id="name"> 
     <h3>name </h3> 
     <pre class="signature"><code>chance.name()
chance.name({middle: true})
chance.name({middle_initial: true})
chance.name({prefix: true})
chance.name({nationality: 'en'})
</code></pre> 
     <p>Generate a random name</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">name</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'Dafi Vatemi'</span></code></pre>
     </figure> 
     <p>Optionally include the middle name</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">name</span><span class="p">({</span> <span class="na">middle</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Nelgatwu Powuku Heup'</span></code></pre>
     </figure> 
     <p>Optionally include the middle initial</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">name</span><span class="p">({</span> <span class="na">middle_initial</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Ezme I Iza'</span></code></pre>
     </figure> 
     <p>Optionally include the prefix</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">name</span><span class="p">({</span> <span class="na">prefix</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Doctor Suosat Am'</span></code></pre>
     </figure> 
     <p>Optionally include the suffix</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">name</span><span class="p">({</span> <span class="na">suffix</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Fanny Baker Esq.'</span></code></pre>
     </figure> 
     <p>Optionally specify a gender</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">name</span><span class="p">({</span> <span class="na">gender</span><span class="p">:</span> <span class="s2">"male"</span> <span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s2">"Patrick Copeland"</span></code></pre>
     </figure> 
     <p>Optionally specify a nationality</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">name</span><span class="p">({</span> <span class="na">nationality</span><span class="p">:</span> <span class="s2">"it"</span> <span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s2">"Roberta Mazzetti"</span></code></pre>
     </figure> 
     <p>Note, currently support for nationality is limited to: <code class="highlighter-rouge">'en', 'it'</code>.</p> 
    </article> 
    <article class="method" id="prefix"> 
     <h3>prefix </h3> 
     <pre class="signature"><code>chance.prefix()
chance.prefix({full: true})
</code></pre> 
     <p>Generate a random name prefix</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">prefix</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'Mrs.'</span></code></pre>
     </figure> 
     <p>By default, returns the shorter version.</p> 
     <p>Optionally get back the full version.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">prefix</span><span class="p">({</span> <span class="na">full</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'Mister'</span></code></pre>
     </figure> 
     <p>Optionally specify a gender. Valid options are <code class="highlighter-rouge">male</code>, <code class="highlighter-rouge">female</code>, or <code class="highlighter-rouge">all</code> (the default).</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">prefix</span><span class="p">({</span> <span class="na">gender</span><span class="p">:</span> <span class="s2">"male"</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'Mr.'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">prefix</span><span class="p">({</span> <span class="na">gender</span><span class="p">:</span> <span class="s2">"female"</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'Miss'</span></code></pre>
     </figure> 
     <p><em>To maintain legacy support, this also responds to chance.name_prefix().</em></p> 
    </article> 
    <article class="method" id="ssn"> 
     <h3>ssn </h3> 
     <pre class="signature"><code>chance.ssn()
</code></pre> 
     <p>Generate a random social security number.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">ssn</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'411-90-0070'</span></code></pre>
     </figure> 
     <p>Optionally provide option of getting only the last four</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">ssn</span><span class="p">({</span> <span class="na">ssnFour</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'2938'</span></code></pre>
     </figure> 
     <p>Optionally specify dashes be removed</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">ssn</span><span class="p">({</span> <span class="na">dashes</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'293839295'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="suffix"> 
     <h3>suffix </h3> 
     <pre class="signature"><code>chance.suffix()
chance.suffix({full: true})
</code></pre> 
     <p>Generate a random name suffix</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">suffix</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'Sr.'</span></code></pre>
     </figure> 
     <p>By default, returns the shorter version.</p> 
     <p>Optionally get back the full version.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">suffix</span><span class="p">({</span> <span class="na">full</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'Juris Doctor'</span></code></pre>
     </figure> 
     <p><em>To maintain legacy support, this also responds to chance.name_suffix().</em></p> 
    </article> 
    <h2 id="mobile">Mobile</h2> 
    <article class="method" id="android_id"> 
     <h3>android_id </h3> 
     <pre class="signature"><code>chance.android_id()
</code></pre> 
     <p>Return a random GCM registration ID.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">android_id</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'APA91HHQyPlWqV2Nu61LRs41eE4vrR4bHLKTs0-Dh5nDLopcWZotLw77NEoJyADNJiq6cwY0jMM02y8aacLs6fe2_ynweFjZJVVevKON-32826v-EFoayyThU3-42YEUY9pCScU_n73yRNSOlTk5W6iPtrDkQ3a6_BvOxRbSYi3E6QEY0ZuIQF0'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="apple_token"> 
     <h3>apple_token </h3> 
     <pre class="signature"><code>chance.apple_token()
</code></pre> 
     <p>Return a random Apple Push Token</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">apple_token</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'b50edac575bfba07dd019b28b2af7189a3ddda17c806ef14a9abbfd00533f67e'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="bb_pin"> 
     <h3>bb_pin </h3> 
     <pre class="signature"><code>chance.bb_pin()
</code></pre> 
     <p>Return a random BlackBerry Device PIN</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">bb_pin</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'985de771'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="wp7_anid"> 
     <h3>wp7_anid </h3> 
     <pre class="signature"><code>chance.wp7_anid()
</code></pre> 
     <p>Return a random Windows Phone 7 ANID</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">wp7_anid</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'A=3FC2491A0E0C5AB7824B2F60DCE4DB02&amp;E=4e7&amp;W=6'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="wp8_anid2"> 
     <h3>wp8_anid2 </h3> 
     <pre class="signature"><code>chance.wp8_anid2()
</code></pre> 
     <p>Return a random Windows Phone 8 ANID2</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">wp8_anid2</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'OGI5ODk0MmNkZGI2OGE3YzAwODE1Y2NiYTc4MzEzZjM='</span></code></pre>
     </figure> 
    </article> 
    <h2 id="web">Web</h2> 
    <article class="method" id="avatar"> 
     <h3>avatar </h3> 
     <pre class="signature"><code>chance.avatar()
chance.avatar({protocol: 'https'})
chance.avatar({fileExtension: 'jpg'})
chance.avatar({email: 'mail@victorquinn.com'})
</code></pre> 
     <p>Return a URL to a random avatar from Gravatar.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">avatar</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'//www.gravatar.com/avatar/41f84bab4a852971eb1d26a287acb763'</span></code></pre>
     </figure> 
     <p>By default, a url is returned without a protocol. Specify one to get a random url but with a known protocol</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">avatar</span><span class="p">({</span><span class="na">protocol</span><span class="p">:</span> <span class="s1">'https'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'https://www.gravatar.com/avatar/f40260c4058cc904b7db652c26099966'</span></code></pre>
     </figure> 
     <p>Optionally specify a file extension to get one of a known type</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">avatar</span><span class="p">({</span><span class="na">fileExtension</span><span class="p">:</span> <span class="s1">'jpg'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'//www.gravatar.com/avatar/76697df5874c854e3cc8fde1200b4298.jpg'</span></code></pre>
     </figure> 
     <p>You can also use it with a known email address to just get that gravatar.</p> 
     <p>However, note this, of course, no longer makes it random, just more of a helper function:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">avatar</span><span class="p">({</span><span class="na">email</span><span class="p">:</span> <span class="s1">'mail@victorquinn.com'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'www.gravatar.com/avatar/8595c2591b0bca22e736813af33fa7c3'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="color"> 
     <h3>color </h3> 
     <pre class="signature"><code>chance.color()
chance.color({format: 'hex'})
chance.color({grayscale: true})
chance.color({casing: 'upper'})
</code></pre> 
     <p>Return a random color.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">color</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'#79c157'</span></code></pre>
     </figure> 
     <p>Colors have four base types: <code class="highlighter-rouge">hex</code>, <code class="highlighter-rouge">shorthex</code>, <code class="highlighter-rouge">rgb</code>, <code class="highlighter-rouge">0x</code></p> 
     <p>These are the kinds usable in HTML or CSS. The type can optionally be specified</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">color</span><span class="p">({</span><span class="na">format</span><span class="p">:</span> <span class="s1">'hex'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'#d67118'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">color</span><span class="p">({</span><span class="na">format</span><span class="p">:</span> <span class="s1">'shorthex'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'#60f'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">color</span><span class="p">({</span><span class="na">format</span><span class="p">:</span> <span class="s1">'rgb'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'rgb(110,52,164)'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">color</span><span class="p">({</span><span class="na">format</span><span class="p">:</span> <span class="s1">'0x'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'0x67ae0b'</span></code></pre>
     </figure> 
     <p>Can optionally specify that only grayscale colors be generated</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">color</span><span class="p">({</span><span class="na">grayscale</span><span class="p">:</span> <span class="kc">true</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'#e2e2e2'</span></code></pre>
     </figure> 
     <p>Optionally specify casing to get only uppercase letters in the color</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">color</span><span class="p">({</span><span class="na">casing</span><span class="p">:</span> <span class="s1">'upper'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'#29CFA7'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="domain"> 
     <h3>domain </h3> 
     <pre class="signature"><code>chance.domain()
chance.domain({tld: 'com'})
</code></pre> 
     <p>Return a random domain with a random <a href="#tld">tld</a>.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">domain</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'onaro.net'</span></code></pre>
     </figure> 
     <p>Optionally specify a tld and the domain will be random but the tld will not.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">domain</span><span class="p">({</span><span class="na">tld</span><span class="p">:</span> <span class="s1">'ie'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'gotaujo.ie'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="email"> 
     <h3>email </h3> 
     <pre class="signature"><code>chance.email()
chance.email({domain: "example.com"})
</code></pre> 
     <p>Return a random email with a random domain.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">email</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'kawip@piklojzob.gov'</span></code></pre>
     </figure> 
     <p>Optionally specify a domain and the email will be random but the domain will not.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">email</span><span class="p">({</span><span class="na">domain</span><span class="p">:</span> <span class="s1">'example.com'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'giigjom@example.com'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="fbid"> 
     <h3>fbid </h3> 
     <pre class="signature"><code>chance.fbid()
</code></pre> 
     <p>Return a random Facebook id, aka fbid.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">fbid</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s2">"1000039460258605"</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="google_analytics"> 
     <h3>google_analytics </h3> 
     <pre class="signature"><code>chance.google_analytics()
</code></pre> 
     <p>Return a random <a href="https://support.google.com/analytics/answer/1032385?hl=en">Google Analytics</a> tracking code. Takes the form <code class="highlighter-rouge">'UA-123456-01'</code></p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">google_analytics</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'UA-384555-17'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="hashtag"> 
     <h3>hashtag </h3> 
     <pre class="signature"><code>chance.hashtag()
</code></pre> 
     <p>Return a random hashtag. This is a string of the form ‘#thisisahashtag’.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">hashtag</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'#dichumwa'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="ip"> 
     <h3>ip </h3> 
     <pre class="signature"><code>chance.ip()
</code></pre> 
     <p>Return a random IP Address.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">ip</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'153.208.102.234'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="ipv6"> 
     <h3>ipv6 </h3> 
     <pre class="signature"><code>chance.ipv6()
</code></pre> 
     <p>Return a random IPv6 Address.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">ipv6</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'db2f:6123:f99e:00f7:a76e:7f68:9f91:bb08'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="klout"> 
     <h3>klout </h3> 
     <pre class="signature"><code>chance.klout()
</code></pre> 
     <p>Return a random <a href="http://klout.com">Klout</a> score. Range 1-99.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">klout</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="mi">21</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="tld"> 
     <h3>tld </h3> 
     <pre class="signature"><code>chance.tld()
</code></pre> 
     <p>Return a random tld (<a href="https://en.wikipedia.org/wiki/Top-level_domain">Top Level Domain</a>) from the set:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="p">[</span><span class="s1">'com'</span><span class="p">,</span> <span class="s1">'org'</span><span class="p">,</span> <span class="s1">'edu'</span><span class="p">,</span> <span class="s1">'gov'</span><span class="p">,</span> <span class="s1">'uk'</span><span class="p">,</span> <span class="s1">'net'</span><span class="p">,</span> <span class="s1">'io'</span><span class="p">]</span></code></pre>
     </figure> 
     <p>Note, these do not start with a period.</p> 
    </article> 
    <article class="method" id="twitter"> 
     <h3>twitter </h3> 
     <pre class="signature"><code>chance.twitter()
</code></pre> 
     <p>Return a random twitter handle.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">twitter</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s2">"@guspejani"</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="url"> 
     <h3>url </h3> 
     <pre class="signature"><code>chance.url()
chance.url({domain: 'www.socialradar.com'})
chance.url({path: 'images'})
chance.url({extensions: ['gif', 'jpg', 'png']})
</code></pre> 
     <p>Return a random url.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">url</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'http://vanogsi.io/pateliivi'</span></code></pre>
     </figure> 
     <p>Optionally specify a domain and the url will be random but the domain will not.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">url</span><span class="p">({</span><span class="na">domain</span><span class="p">:</span> <span class="s1">'www.socialradar.com'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'http://www.socialradar.com/hob'</span></code></pre>
     </figure> 
     <p>Optionally specify a path and it will be obeyed.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">url</span><span class="p">({</span><span class="na">path</span><span class="p">:</span> <span class="s1">'images'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'http://tainvoz.net/images'</span></code></pre>
     </figure> 
     <p>Optionally specify an array of extensions and one will be picked at random.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">url</span><span class="p">({</span><span class="na">extensions</span><span class="p">:</span> <span class="p">[</span><span class="s1">'gif'</span><span class="p">,</span> <span class="s1">'jpg'</span><span class="p">,</span> <span class="s1">'png'</span><span class="p">]})</span>
<span class="o">=&gt;</span> <span class="s1">'http://vagjiup.gov/udmopke.png'</span></code></pre>
     </figure> 
    </article> 
    <h2 id="location">Location</h2> 
    <article class="method" id="address"> 
     <h3>address </h3> 
     <pre class="signature"><code>chance.address()
chance.address({short_suffix: true})
</code></pre> 
     <p>Generate a random street address</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">address</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'5447 Bazpe Lane'</span></code></pre>
     </figure> 
     <p>Optionally mandate that it return a short suffix</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">address</span><span class="p">({</span><span class="na">short_suffix</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'536 Baner Rd'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="altitude"> 
     <h3>altitude </h3> 
     <pre class="signature"><code>chance.altitude()
chance.altitude({ fixed: 7 })
chance.altitude({ max: 1000 })
</code></pre> 
     <p>Generate a random altitude, in meters.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">altitude</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="mf">1863.21417</span></code></pre>
     </figure> 
     <p>By default, includes 5 digits of accuracy after the decimal. Can override with the <code class="highlighter-rouge">fixed</code> option.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">altitude</span><span class="p">({</span> <span class="na">fixed</span><span class="p">:</span> <span class="mi">7</span> <span class="p">})</span>
<span class="o">=&gt;</span> <span class="mf">6897.8978386</span></code></pre>
     </figure> 
     <p>By default, max of 8848m (height of Mount Everest), but this can be overridden with the <code class="highlighter-rouge">max</code> option.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">altitude</span><span class="p">({</span> <span class="na">max</span><span class="p">:</span> <span class="mi">1000</span> <span class="p">})</span>
<span class="o">=&gt;</span> <span class="mf">890.20665</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="areacode"> 
     <h3>areacode </h3> 
     <pre class="signature"><code>chance.areacode()
</code></pre> 
     <p>Generate a random area code</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">areacode</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'(526)'</span></code></pre>
     </figure> 
     <p><em>Note, this is a US area code, we have little support for internationalization at this time. Hope to fix that in the future!</em></p> 
    </article> 
    <article class="method" id="city"> 
     <h3>city </h3> 
     <pre class="signature"><code>chance.city()
</code></pre> 
     <p>Generate a random city name</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">city</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'Cowotba'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="coordinates"> 
     <h3>coordinates </h3> 
     <pre class="signature"><code>chance.coordinates()
chance.coordinates({fixed: 2})
</code></pre> 
     <p>Generate random coordinates, which are latitude and longitude, comma separated.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">coordinates</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s2">"-29.52974, 24.52815"</span></code></pre>
     </figure> 
     <p>By default includes 5 fixed digits after decimal, can specify otherwise.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">coordinates</span><span class="p">({</span><span class="na">fixed</span><span class="p">:</span> <span class="mi">2</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s2">"-49.16, 68.81"</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="country"> 
     <h3>country </h3> 
     <pre class="signature"><code>chance.country()
chance.country({ full: true })
</code></pre> 
     <p>Return a random country.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">country</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'LT'</span></code></pre>
     </figure> 
     <p>By default, returns only the 2 letter ISO 3166-1 code for the country.</p> 
     <p>Optionally specify that it ought to return a full country name.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">country</span><span class="p">({</span> <span class="na">full</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Venezuela'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="depth"> 
     <h3>depth </h3> 
     <pre class="signature"><code>chance.depth()
chance.depth({ fixed: 2 })
chance.depth({ min: -1000 })
</code></pre> 
     <p>Generate a random depth, in meters. Depths are always negative</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">depth</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="o">-</span><span class="mf">2126.95039</span></code></pre>
     </figure> 
     <p>By default, includes 5 digits of accuracy after the decimal. Can override with the <code class="highlighter-rouge">fixed</code> option.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">depth</span><span class="p">({</span> <span class="na">fixed</span><span class="p">:</span> <span class="mi">2</span> <span class="p">})</span>
<span class="o">=&gt;</span> <span class="o">-</span><span class="mf">1542.11</span></code></pre>
     </figure> 
     <p>By default, maximum (or minimum depending on your frame of reference) depth of -2550 (depth of the Mariana Trench), but this can be overridden with the <code class="highlighter-rouge">min</code> option.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">depth</span><span class="p">({</span> <span class="na">min</span><span class="p">:</span> <span class="o">-</span><span class="mi">1000</span> <span class="p">})</span>
<span class="o">=&gt;</span> <span class="o">-</span><span class="mf">718.41976</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="geohash"> 
     <h3>geohash </h3> 
     <pre class="signature"><code>chance.geohash()
chance.geohash({ length: 5 })
</code></pre> 
     <p>Generate a random geohash. <a href="http://en.wikipedia.org/wiki/Geohash">More details on what a geohash is</a>.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">geohash</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'h9xhn7y'</span></code></pre>
     </figure> 
     <p>By default, includes 7 characters of accuracy. Can override with the <code class="highlighter-rouge">length</code> option.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">geohash</span><span class="p">({</span> <span class="na">length</span><span class="p">:</span> <span class="mi">5</span> <span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'dr0kr'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="latitude"> 
     <h3>latitude </h3> 
     <pre class="signature"><code>chance.latitude()
chance.latitude({fixed: 7})
</code></pre> 
     <p>Generate a random latitude.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">latitude</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="mf">57.99514</span></code></pre>
     </figure> 
     <p><em>range: -90 to 90</em></p> 
     <p>By default includes 5 fixed digits after decimal, can specify otherwise.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">latitude</span><span class="p">({</span><span class="na">fixed</span><span class="p">:</span> <span class="mi">7</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="o">-</span><span class="mf">29.6443133</span></code></pre>
     </figure> 
     <p>By default includes entire range of allowed latitudes, can specify a min and/or max to bound it</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">latitude</span><span class="p">({</span><span class="na">min</span><span class="p">:</span> <span class="mf">38.7</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mf">38.9</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="mf">38.82358</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="longitude"> 
     <h3>longitude </h3> 
     <pre class="signature"><code>chance.longitude()
chance.longitude({fixed: 7})
</code></pre> 
     <p>Generate a random longitude.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">longitude</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="mf">149.41549</span></code></pre>
     </figure> 
     <p><em>range: -180 to 180</em></p> 
     <p>By default includes 5 fixed digits after decimal, can specify otherwise.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">longitude</span><span class="p">({</span><span class="na">fixed</span><span class="p">:</span> <span class="mi">7</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="mf">51.4549925</span></code></pre>
     </figure> 
     <p>By default includes entire range of allowed longitudes, can specify a min and/or max to bound it</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">longitude</span><span class="p">({</span><span class="na">min</span><span class="p">:</span> <span class="o">-</span><span class="mi">78</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="o">-</span><span class="mi">77</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="o">-</span><span class="mf">77.22644</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="phone"> 
     <h3>phone </h3> 
     <pre class="signature"><code>chance.phone()
chance.phone({ formatted: false })
chance.phone({ country: "fr" })
chance.phone({ country: "fr", mobile: true })
</code></pre> 
     <p>Generate a random phone</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">phone</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'(494) 927-2152'</span></code></pre>
     </figure> 
     <p>By default conforms to <a href="http://en.wikipedia.org/wiki/North_American_Numbering_Plan">NANP</a> for a proper US phone number.</p> 
     <p>Optionally disable formatting.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">phone</span><span class="p">({</span> <span class="na">formatted</span><span class="p">:</span> <span class="kc">false</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'2617613391'</span></code></pre>
     </figure> 
     <p>Optionally specify a country.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">phone</span><span class="p">({</span> <span class="na">country</span><span class="p">:</span> <span class="s1">'fr'</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'01 60 44 92 67'</span></code></pre>
     </figure> 
     <p>Note, at current we only have support for <code class="highlighter-rouge">'us'</code>, <code class="highlighter-rouge">'uk'</code>, or <code class="highlighter-rouge">'fr'</code> for countries.</p> 
     <p>For <code class="highlighter-rouge">uk</code> and <code class="highlighter-rouge">fr</code>, optionally specify a mobile phone.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">phone</span><span class="p">({</span> <span class="na">country</span><span class="p">:</span> <span class="s1">'uk'</span><span class="p">,</span> <span class="na">mobile</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'07624 321221'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="postal"> 
     <h3>postal </h3> 
     <pre class="signature"><code>chance.postal()
</code></pre> 
     <p>Return a Canadian Postal code. Returned postal code is valid with respect to the Postal District (first character) and format only.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">postal</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'R1S 3F4'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="province"> 
     <h3>province </h3> 
     <pre class="signature"><code>chance.province()
chance.province({full: true})
chance.province({full: true})
</code></pre> 
     <p>Return a random province.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">province</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'ON'</span></code></pre>
     </figure> 
     <p>By default, returns only the 2 letter abbreviation for province.</p> 
     <p>Optionally specify that it ought to return a full province name.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">province</span><span class="p">({</span><span class="na">full</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Nova Scotia'</span></code></pre>
     </figure> 
     <p>Optionally specify the country from which it should return the province name.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">province</span><span class="p">({</span><span class="na">country</span><span class="p">:</span> <span class="s1">'it'</span><span class="p">,</span> <span class="na">full</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Vicenza'</span></code></pre>
     </figure> 
     <p>Note, currently support for country is limited to: <code class="highlighter-rouge">'ca', 'it'</code>.</p> 
    </article> 
    <article class="method" id="state"> 
     <h3>state </h3> 
     <pre class="signature"><code>chance.state()
chance.state({ full: true })
chance.state({ territories: true })
chance.state({ armed_forces: true })
chance.state({ us_states_and_dc: false })
chance.state({ country: 'us' })
</code></pre> 
     <p>Return a random state.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">state</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'AK'</span></code></pre>
     </figure> 
     <p>By default, returns only the 2 letter abbreviation for state.</p> 
     <p>Optionally specify that it ought to return a full state name.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">state</span><span class="p">({</span> <span class="na">full</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Florida'</span></code></pre>
     </figure> 
     <p>Optionally add U.S. Territories (‘American Samoa’, ‘Federated States of Micronesia’, ‘Guam’, ‘Marshall Islands’, ‘Northern Mariana Islands’, ‘Puerto Rico’, ‘Virgin Islands, U.S.’) to the mix of randomly selected items:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">state</span><span class="p">({</span> <span class="na">territories</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">full</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
  <span class="o">=&gt;</span> <span class="s1">'Guam'</span></code></pre>
     </figure> 
     <p>Optionally add Armed Forces to the list as well:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">state</span><span class="p">({</span> <span class="na">armed_forces</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">full</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
  <span class="o">=&gt;</span> <span class="s1">'Armed Forces Pacific'</span></code></pre>
     </figure> 
     <p>For all U.S. states, territories, and armed forces, specify all of them:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">state</span><span class="p">({</span> <span class="na">armed_forces</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">territories</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
  <span class="o">=&gt;</span> <span class="s1">'NY'</span></code></pre>
     </figure> 
     <p>For just territories or armed forces, specify that it ought not return U.S. states:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">state</span><span class="p">({</span> <span class="na">territories</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">us_states_and_dc</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
  <span class="o">=&gt;</span> <span class="s1">'PR'</span></code></pre>
     </figure> 
     <p>Optionally specify a country (US specific options are ignored if country is specified and different from <code class="highlighter-rouge">'us'</code>):</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">state</span><span class="p">({</span> <span class="na">country</span><span class="p">:</span> <span class="s1">'it'</span><span class="p">,</span> <span class="na">full</span><span class="p">:</span> <span class="kc">true</span> <span class="p">})</span>
  <span class="o">=&gt;</span> <span class="s1">'Toscana'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="street"> 
     <h3>street </h3> 
     <pre class="signature"><code>chance.street()
chance.street({country:it})
</code></pre> 
     <p>Generate a random street</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">street</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'Tesca Circle'</span></code></pre>
     </figure> 
     <p>Optionally mandate that it returns a short suffix</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">street</span><span class="p">({</span><span class="na">short_suffix</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Jiled St'</span></code></pre>
     </figure> 
     <p>Optionally specify the number of syllables used to generate the street name</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">street</span><span class="p">({</span><span class="na">syllables</span><span class="p">:</span> <span class="mi">8</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Teniefitinusewjircor Junction'</span></code></pre>
     </figure> 
     <p>Optionally specify a country to localize street prefixes</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">street</span><span class="p">({</span><span class="na">country</span><span class="p">:</span> <span class="s1">'it'</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'Via Nefba'</span></code></pre>
     </figure> 
     <p>Note, currently support for country is limited to: <code class="highlighter-rouge">'us', 'it'</code>.</p> 
    </article> 
    <article class="method" id="zip"> 
     <h3>zip </h3> 
     <pre class="signature"><code>chance.zip()
chance.zip({plusfour: true})
</code></pre> 
     <p>Generate a random (U.S.) zip code.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">zip</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'90210'</span></code></pre>
     </figure> 
     <p>Can optionally specify that it ought to return a <a href="http://vq.io/19rzsve">Zip+4</a>:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">zip</span><span class="p">({</span><span class="na">plusfour</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'01035-1838'</span></code></pre>
     </figure> 
    </article> 
    <h2 id="time">Time</h2> 
    <p> <em>For more complex time manipulation, <a href="http://momentjs.com">Moment</a> is strongly recommended. It would be out of this library's core competency to try and provide date objects of all formats</em> </p> 
    <article class="method" id="ampm"> 
     <h3>ampm </h3> 
     <pre class="signature"><code>chance.ampm()
</code></pre> 
     <p>Return am or pm. Very simple.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">ampm</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'am'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="date"> 
     <h3>date </h3> 
     <pre class="signature"><code>chance.date()
chance.date({string: true})
chance.date({string: true, american: false})
chance.date({year: 1983})
</code></pre> 
     <p>Generate a random date</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">date</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="nx">Sat</span> <span class="nx">Apr</span> <span class="mi">09</span> <span class="mi">2072</span> <span class="mi">00</span><span class="err">:</span><span class="mi">00</span><span class="err">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0400</span> <span class="p">(</span><span class="nx">EDT</span><span class="p">)</span></code></pre>
     </figure> 
     <p>By default, returns an actual <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date">Date</a> object</p> 
     <p>Can optionally specify that a date be returned as a string</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">date</span><span class="p">({</span><span class="na">string</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s2">"5/27/2078"</span></code></pre>
     </figure> 
     <p>This will return a date string of the format MM/DD/YYYY.</p> 
     <p>Now of course MM/DD/YYYY is the “American” date method, but it’s the default because there isn’t much support for internationalization here yet. Further, it’s the format used by <a href="https://developers.facebook.com/docs/reference/api/user/">Facebook</a> and other services for birthdays and other non-Date object dates.</p> 
     <p>However, we support returning dates in DD/MM/YYYY format as well when requesting a date by a string and passing <code class="highlighter-rouge">american: false</code>.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">date</span><span class="p">({</span><span class="na">string</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">american</span><span class="p">:</span> <span class="kc">false</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s2">"13/2/2017"</span></code></pre>
     </figure> 
     <p>If you want richer control over date format, strongly suggest using the <a href="http://momentjs.com">Moment</a> library. Our formatting is very minimalist, and it’s out of our core competency to offer dates in a myriad of formats.</p> 
     <p>Can optionally specify defaults for any of day, month, or year.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">date</span><span class="p">({</span><span class="na">year</span><span class="p">:</span> <span class="mi">1983</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="nx">Wed</span> <span class="nx">May</span> <span class="mi">04</span> <span class="mi">1983</span> <span class="mi">00</span><span class="err">:</span><span class="mi">00</span><span class="err">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0400</span> <span class="p">(</span><span class="nx">EDT</span><span class="p">)</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">date</span><span class="p">({</span><span class="na">month</span><span class="p">:</span> <span class="mi">0</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="nx">Tue</span> <span class="nx">Jan</span> <span class="mi">18</span> <span class="mi">2084</span> <span class="mi">00</span><span class="err">:</span><span class="mi">00</span><span class="err">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0500</span> <span class="p">(</span><span class="nx">EST</span><span class="p">)</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">date</span><span class="p">({</span><span class="na">day</span><span class="p">:</span> <span class="mi">21</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="nx">Sun</span> <span class="nx">Oct</span> <span class="mi">21</span> <span class="mi">2103</span> <span class="mi">00</span><span class="err">:</span><span class="mi">00</span><span class="err">:</span><span class="mi">00</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0400</span> <span class="p">(</span><span class="nx">EDT</span><span class="p">)</span></code></pre>
     </figure> 
     <p>A random date is generated, but the default you specify is kept constant.</p> 
     <p>Note, month is 0-indexed. This is a carryover from the core JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date">Date</a> object which we use internally to generate the date. We considered</p> 
    </article> 
    <article class="method" id="hammertime"> 
     <h3>hammertime </h3> 
     <pre class="signature"><code>chance.hammertime()
</code></pre> 
     <p class="pullquote" data-pullquote="Stop. Hammertime."></p> 
     <p>Generate a random hammertime.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">hammertime</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="mi">2273327300317</span></code></pre>
     </figure> 
     <p>Hammertime is the name given to a <a href="http://en.wikipedia.org/wiki/Unix_time">Unix time</a> with milliseconds. Which is the same as saying the number of milliseconds since 1970. It has finer granularity than a normal Unix timestamp and thus is often used in realtime applications.</p> 
     <p>According to startup lore, Hammertime was coined by a startup whose founder had an interesting interaction with M.C. Hammer. There was no name given to “Unix time with milliseconds” and while brainstorming ideas (because Unix time with milliseconds is a confusing mouthful), someone suggested Hammertime and it stuck.</p> 
    </article> 
    <article class="method" id="hour"> 
     <h3>hour </h3> 
     <pre class="signature"><code>chance.hour()
chance.hour({twentyfour: true})
</code></pre> 
     <p>Generate a random hour</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">hour</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="mi">9</span></code></pre>
     </figure> 
     <p>By default, returns an hour from 1 to 12 for a standard <a href="https://en.wikipedia.org/wiki/12-hour_clock">12-hour clock</a>.</p> 
     <p>Can optionally specify a full twenty-four.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">hour</span><span class="p">({</span><span class="na">twentyfour</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="mi">21</span></code></pre>
     </figure> 
     <p>This will return an hour from 1 to 24.</p> 
    </article> 
    <article class="method" id="millisecond"> 
     <h3>millisecond </h3> 
     <pre class="signature"><code>chance.millisecond()
</code></pre> 
     <p>Generate a random millisecond</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">millisecond</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="mi">729</span></code></pre>
     </figure> 
     <p>By default, returns a millisecond from 0 to 999. Idea is for generating a clock time.</p> 
    </article> 
    <article class="method" id="minute"> 
     <h3>minute </h3> 
     <pre class="signature"><code>chance.minute()
</code></pre> 
     <p>Generate a random minute</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">minute</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="mi">35</span></code></pre>
     </figure> 
     <p>By default, returns a minute from 0 to 59. Idea is for generating a clock time.</p> 
    </article> 
    <article class="method" id="month"> 
     <h3>month </h3> 
     <pre class="signature"><code>chance.month()
</code></pre> 
     <p>Generate a random month.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">month</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'January'</span></code></pre>
     </figure> 
     <p>By default, returns just the full name.</p> 
     <p>Optionally specify raw to get the whole month object consisting of name, short_name, and numeric.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">month</span><span class="p">({</span><span class="na">raw</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'October'</span><span class="p">,</span> <span class="na">short_name</span><span class="p">:</span> <span class="s1">'Oct'</span><span class="p">,</span> <span class="na">numeric</span><span class="p">:</span> <span class="s1">'10'</span><span class="p">}</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="second"> 
     <h3>second </h3> 
     <pre class="signature"><code>chance.second()
</code></pre> 
     <p>Generate a random second</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">second</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="mi">19</span></code></pre>
     </figure> 
     <p>By default, returns a second from 0 to 59. Idea is for generating a clock time.</p> 
    </article> 
    <article class="method" id="timestamp"> 
     <h3>timestamp </h3> 
     <pre class="signature"><code>chance.timestamp()
</code></pre> 
     <p>Generate a random timestamp. This is a standard Unix time, so a random number of seconds since January 1, 1970.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">timestamp</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="mi">576556683</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="timezone"> 
     <h3>timezone </h3> 
     <pre class="signature"><code>chance.timezone()
</code></pre> 
     <p>Return a random timezone</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">timezone</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="p">{</span>  
      <span class="s2">"name"</span><span class="p">:</span> <span class="s2">"India Standard Time"</span><span class="p">,</span>
      <span class="s2">"abbr"</span><span class="p">:</span> <span class="s2">"IST"</span><span class="p">,</span>
      <span class="s2">"offset"</span><span class="p">:</span> <span class="mf">5.5</span><span class="p">,</span>
      <span class="s2">"isdst"</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
      <span class="s2">"text"</span><span class="p">:</span> <span class="s2">"(UTC+05:30) Chennai, Kolkata, Mumbai, New Delhi"</span><span class="p">,</span>
      <span class="s2">"utc"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"Asia/Calcutta"</span><span class="p">]</span>
  <span class="p">}</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="year"> 
     <h3>year </h3> 
     <pre class="signature"><code>chance.year()
chance.year({min: 1900, max: 2100})
</code></pre> 
     <p>Generate a random year</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">year</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'2053'</span></code></pre>
     </figure> 
     <p>By default, min is the current year and max is 100 years greater than min.</p> 
     <p>This is returned as a string. If for some reason you need it numeric, just parse it:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nb">parseInt</span><span class="p">(</span><span class="nx">chance</span><span class="p">.</span><span class="nx">year</span><span class="p">());</span>
  <span class="o">=&gt;</span> <span class="mi">2042</span></code></pre>
     </figure> 
     <p>Optionally specify min, max, or both to limit the range.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">year</span><span class="p">({</span><span class="na">min</span><span class="p">:</span> <span class="mi">1900</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">2100</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'1983'</span></code></pre>
     </figure> 
    </article> 
    <h2 id="finance">Finance</h2> 
    <article class="method" id="cc"> 
     <h3>cc </h3> 
     <pre class="signature"><code>chance.cc()
chance.cc({type: 'Mastercard'})
</code></pre> 
     <p class="pullquote" data-pullquote="Somewhat obvious warning: Do not use this to hit live payment gateways..."></p> 
     <p>Generate a random credit card number. This card number will pass the <a href="http://en.wikipedia.org/wiki/Luhn_algorithm">Luhn algorithm</a> so it looks like a legit card.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">cc</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'6304038511073827'</span></code></pre>
     </figure> 
     <p>Optionally specify a particular type of card to return:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">cc</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="s1">'Mastercard'</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'5171206237468496'</span></code></pre>
     </figure> 
     <p>The type can be specified by the long name, or by the short name:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">cc</span><span class="p">({</span><span class="na">type</span><span class="p">:</span> <span class="s1">'mc'</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'5103820202214116'</span></code></pre>
     </figure> 
     <p>The <a href="#cc_type">types</a> are enumerated below.</p> 
    </article> 
    <article class="method" id="cc_type"> 
     <h3>cc_type </h3> 
     <pre class="signature"><code>chance.cc_type()
chance.cc_type({raw: true})
</code></pre> 
     <p>Return a random credit card type.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">cc_type</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'Visa'</span></code></pre>
     </figure> 
     <p>Default returns just the name. To return the entire object (consisting of name, short name, numeric prefix, and length), specify so with the raw flag.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">cc_type</span><span class="p">({</span><span class="na">raw</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Discover Card'</span><span class="p">,</span> <span class="na">short_name</span><span class="p">:</span> <span class="s1">'discover'</span><span class="p">,</span> <span class="na">prefix</span><span class="p">:</span> <span class="s1">'6011'</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">16</span><span class="p">}</span></code></pre>
     </figure> 
     <p>The available types are (name - <em>short_name</em>):</p> 
     <ul> 
      <li>American Express - <em>amex</em></li> 
      <li>Bankcard - <em>bankcard</em></li> 
      <li>China UnionPay - <em>chinaunion</em></li> 
      <li>Diners Club Carte Blanche - <em>dccarte</em></li> 
      <li>Diners Club enRoute - <em>dcenroute</em></li> 
      <li>Diners Club International - <em>dcintl</em></li> 
      <li>Diners Club United States &amp; Canada - <em>dcusc</em></li> 
      <li>Discover Card - <em>discover</em></li> 
      <li>InstaPayment - <em>instapay</em></li> 
      <li>JCB - <em>jcb</em></li> 
      <li>Laser - <em>laser</em></li> 
      <li>Maestro - <em>maestro</em></li> 
      <li>Mastercard - <em>mc</em></li> 
      <li>Solo - <em>solo</em></li> 
      <li>Switch - <em>switch</em></li> 
      <li>Visa - <em>visa</em></li> 
      <li>Visa Electron - <em>electron</em></li> 
     </ul> 
    </article> 
    <article class="method" id="currency"> 
     <h3>currency </h3> 
     <pre class="signature"><code>chance.currency()
</code></pre> 
     <p>Generate a random currency.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">currency</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="p">{</span> <span class="na">code</span><span class="p">:</span> <span class="s2">"TVD"</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Tuvalu Dollar"</span> <span class="p">}</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="currency_pair"> 
     <h3>currency_pair </h3> 
     <pre class="signature"><code>chance.currency_pair()
</code></pre> 
     <p>Generate a currency pair. Handy for simulating currency conversions. Guaranteed to return a unique pair (and not the same currency twice).</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">currency_pair</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="p">[{</span> <span class="na">code</span><span class="p">:</span> <span class="s2">"ALL"</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Albania Lek"</span> <span class="p">},</span> <span class="p">{</span> <span class="na">code</span><span class="p">:</span> <span class="s2">"ZWD"</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Zimbabwe Dollar"</span> <span class="p">}]</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="dollar"> 
     <h3>dollar </h3> 
     <pre class="signature"><code>chance.dollar()
chance.dollar({max: 250})
</code></pre> 
     <p class="pullquote" data-pullquote="Dolla, dolla, bill ya'll"></p> 
     <p>Return a random dollar amount.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">dollar</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s2">"$2560.27"</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">dollar</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s2">"$750.99"</span></code></pre>
     </figure> 
     <p>By default returns dollar amount no larger than 10000. Optionally specify the max to make it larger (or smaller).</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">dollar</span><span class="p">({</span><span class="na">max</span><span class="p">:</span> <span class="mi">20</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s2">"$15.23"</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">dollar</span><span class="p">({</span><span class="na">max</span><span class="p">:</span> <span class="mi">10000000</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s2">"$5051205.49"</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="euro"> 
     <h3>euro </h3> 
     <pre class="signature"><code>chance.euro()
chance.euro({max: 250})
</code></pre> 
     <p>Return a random euro amount. Formatting depends on the current locale (samples are displayed with european formatting)</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">euro</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s2">"2.560,27€"</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">euro</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s2">"750.99€"</span></code></pre>
     </figure> 
     <p>By default returns euro amount no larger than 10000. Optionally specify the max to make it larger (or smaller).</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">euro</span><span class="p">({</span><span class="na">max</span><span class="p">:</span> <span class="mi">20</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s2">"15,23€"</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">euro</span><span class="p">({</span><span class="na">max</span><span class="p">:</span> <span class="mi">10000000</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s2">"5.051.205,49€"</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="exp"> 
     <h3>exp </h3> 
     <pre class="signature"><code>chance.exp()
chance.exp({raw: true})
</code></pre> 
     <p>Generate a random credit card expiration.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">exp</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'10/2020'</span></code></pre>
     </figure> 
     <p>Optionally specify that a raw object be returned rather than a string</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">exp</span><span class="p">({</span><span class="na">raw</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="p">{</span><span class="na">month</span><span class="p">:</span> <span class="s1">'11'</span><span class="p">,</span> <span class="na">year</span><span class="p">:</span> <span class="s1">'2017'</span><span class="p">}</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="exp_month"> 
     <h3>exp_month </h3> 
     <pre class="signature"><code>chance.exp_month()
chance.exp_month({future: true})
</code></pre> 
     <p>Generate a random credit card expiration month.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">exp_month</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'01'</span></code></pre>
     </figure> 
     <p>Optionally specify that it must be a later month than the current month.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">exp_month</span><span class="p">({</span><span class="na">future</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'10'</span></code></pre>
     </figure> 
     <p>So if called in June, this would return a random month from July - Dec. If called in October, would return November or December.</p> 
     <p>This because many credit card sandboxes require an expiration date later than the current date so it’s necessary when generating an expiration with the current year to generate a month later than the current month.</p> 
    </article> 
    <article class="method" id="exp_year"> 
     <h3>exp_year </h3> 
     <pre class="signature"><code>chance.exp_year()
</code></pre> 
     <p>Generate a random credit card expiration year.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">exp_year</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'2018'</span></code></pre>
     </figure> 
     <p>Returns a random year between today and 10 years in the future.</p> 
    </article> 
    <h2 id="helpers">Helpers</h2> 
    <article class="method" id="capitalize"> 
     <h3>capitalize </h3> 
     <pre class="signature"><code>chance.capitalize(string)
</code></pre> 
     <p>Capitalize the first letter of a word</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">capitalize</span><span class="p">(</span><span class="s1">'bread'</span><span class="p">)</span>
  <span class="o">=&gt;</span> <span class="s1">'Bread'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="mixin"> 
     <h3>mixin </h3> 
     <pre class="signature"><code>chance.mixin(&lt;Object&gt;)
</code></pre> 
     <p>Mixins are a very powerful way to extend <strong>Chance</strong> to fit the needs of your specific application.</p> 
     <p>First, if you are thinking of using a mixin for <strong>Chance</strong>, please consider first whether your use is something from which others may benefit. If so, please submit a <a href="https://github.com/victorquinn/chancejs/pulls">pull request</a> rather than using a mixin!</p> 
     <p>Spread the love and give everyone the benefit of your awesome generator :)</p> 
     <p>Now, that said, there are bound to be times when you want to generate something random that is specific to your application but not widely applicable. Enter mixins!</p> 
     <p><strong>Chance</strong> mixins allow you to add one-off methods to <strong>Chance</strong> which you can use later.</p> 
     <p>For example, let’s say I have a user object which consists of first, last, and email.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">first</span><span class="p">:</span> <span class="s1">'John'</span><span class="p">,</span>
  <span class="na">last</span><span class="p">:</span> <span class="s1">'Smith'</span><span class="p">,</span>
  <span class="na">email</span><span class="p">:</span> <span class="s1">'john@aol.com'</span>
<span class="p">};</span></code></pre>
     </figure> 
     <p>Let’s say I want to be able to randomly generate these user objects.</p> 
     <p>This is not the type of thing which would be widely applicable as it’s specific to my application so it’s perfect for a mixin!</p> 
     <p>To create a mixin, build an object whose keys are the names of the methods, and whose values are the functions to be called.</p> 
     <p>Note: Within each function, you will have access to <code class="highlighter-rouge">chance</code> itself!</p> 
     <p>For example, to create a <code class="highlighter-rouge">user</code> mixin:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">mixin</span><span class="p">({</span>
    <span class="s1">'user'</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="na">first</span><span class="p">:</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">first</span><span class="p">(),</span>
            <span class="na">last</span><span class="p">:</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">last</span><span class="p">(),</span>
            <span class="na">email</span><span class="p">:</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">email</span><span class="p">()</span>
        <span class="p">};</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// Then you can call your mixin</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">user</span><span class="p">();</span>

<span class="o">=&gt;</span> <span class="p">{</span><span class="na">first</span><span class="p">:</span> <span class="s1">'Eli'</span><span class="p">,</span> <span class="na">last</span><span class="p">:</span> <span class="s1">'Benson'</span><span class="p">,</span> <span class="na">email</span><span class="p">:</span> <span class="s1">'gembibuj@dugesan.com'</span><span class="p">}</span></code></pre>
     </figure> 
     <p>Mixins can even include other mixins!</p> 
     <p>For example, to “extend” the user object:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">mixin</span><span class="p">({</span>
  <span class="s1">'user'</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">first</span><span class="p">:</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">first</span><span class="p">(),</span>
      <span class="na">last</span><span class="p">:</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">last</span><span class="p">(),</span>
      <span class="na">email</span><span class="p">:</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">email</span><span class="p">()</span>
    <span class="p">};</span>
  <span class="p">},</span>
  <span class="s1">'social_user'</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">user</span><span class="p">();</span>
    <span class="nx">user</span><span class="p">.</span><span class="nx">network</span> <span class="o">=</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">pick</span><span class="p">([</span><span class="s1">'facebook'</span><span class="p">,</span> <span class="s1">'twitter'</span><span class="p">]);</span>
    <span class="k">return</span> <span class="nx">user</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">});</span></code></pre>
     </figure> 
     <p>So we have a second mixin here, <code class="highlighter-rouge">social_user</code> which is using the <code class="highlighter-rouge">user</code> mixin and adding to it! Note, these mixins can be defined in any order on the object if both declared at once.</p> 
    </article> 
    <article class="method" id="pad"> 
     <h3>pad </h3> 
     <pre class="signature"><code>chance.pad(number, width)
chance.pad(number, width, padder)
</code></pre> 
     <p>Pad a number with some string until it reaches a desired width.</p> 
     <p>By default, <code class="highlighter-rouge">chance.pad()</code> will pad with zeroes. For example, to zero-pad numbers such that the outcome width is 5, do the following.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">pad</span><span class="p">(</span><span class="mi">45</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s1">'00045'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">pad</span><span class="p">(</span><span class="mi">284</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s1">'00284'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">pad</span><span class="p">(</span><span class="mi">82843</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s1">'82843'</span></code></pre>
     </figure> 
     <p>Notice how every item returned is a string with leading zeroes until the width is 5 for each one.</p> 
     <p>Can optionally specify a character if the desire is to pad with something other than zero.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">pad</span><span class="p">(</span><span class="mi">81</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">'Z'</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s1">'ZZZ81'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">pad</span><span class="p">(</span><span class="mi">692</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="s1">'Z'</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s1">'ZZ692'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">pad</span><span class="p">(</span><span class="mi">52859</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="o">=&gt;</span> <span class="s1">'52859'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="pick"> 
     <h3>pick </h3> 
     <pre class="signature"><code>chance.pick(array)
chance.pick(array, count)
</code></pre> 
     <p><strong><code class="highlighter-rouge">pick()</code> is now deprecated in favor of <code class="highlighter-rouge">pickone()</code> and <code class="highlighter-rouge">pickset()</code></strong></p> 
    </article> 
    <article class="method" id="pickone"> 
     <h3>pickone </h3> 
     <pre class="signature"><code>chance.pickone(array)
</code></pre> 
     <p>Given an array, pick a random element and return it</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">pickone</span><span class="p">([</span><span class="s1">'alpha'</span><span class="p">,</span> <span class="s1">'bravo'</span><span class="p">,</span> <span class="s1">'charlie'</span><span class="p">,</span> <span class="s1">'delta'</span><span class="p">,</span> <span class="s1">'echo'</span><span class="p">]);</span>
  <span class="o">=&gt;</span> <span class="s1">'delta'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="pickset"> 
     <h3>pickset </h3> 
     <pre class="signature"><code>chance.pickset(array, quantity)
</code></pre> 
     <p>Given an array, pick some random elements and return them in a new array</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">pickset</span><span class="p">([</span><span class="s1">'alpha'</span><span class="p">,</span> <span class="s1">'bravo'</span><span class="p">,</span> <span class="s1">'charlie'</span><span class="p">,</span> <span class="s1">'delta'</span><span class="p">,</span> <span class="s1">'echo'</span><span class="p">],</span> <span class="mi">3</span><span class="p">);</span>
  <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'echo'</span><span class="p">,</span> <span class="s1">'alpha'</span><span class="p">,</span> <span class="s1">'bravo'</span><span class="p">]</span></code></pre>
     </figure> 
     <p>Optionally omit the quantity to retrieve a set with length 1</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">pickset</span><span class="p">([</span><span class="s1">'alpha'</span><span class="p">,</span> <span class="s1">'bravo'</span><span class="p">,</span> <span class="s1">'charlie'</span><span class="p">,</span> <span class="s1">'delta'</span><span class="p">,</span> <span class="s1">'echo'</span><span class="p">]);</span>
  <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'delta'</span><span class="p">]</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="set"> 
     <h3>set </h3> 
     <pre class="signature"><code>chance.set(key, value)
</code></pre> 
     <p>Used for overriding the default data used by Chance.</p> 
     <p>For example, if instead of the default set of last names (which were pulled from the U.S. census data and therefore obviously American biased), you could replace the data for the first names with something more suited to your task. For example, if you want instead to pick from last names of houses in <em>A Song of Ice and Fire</em>, you could do something like:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'lastNames'</span><span class="p">,</span> <span class="p">[</span><span class="s1">'Arryn'</span><span class="p">,</span> <span class="s1">'Baratheon'</span><span class="p">,</span> <span class="s1">'Bolton'</span><span class="p">,</span> <span class="s1">'Frey'</span><span class="p">,</span> <span class="s1">'Greyjoy'</span><span class="p">,</span> <span class="s1">'Lannister'</span><span class="p">,</span> <span class="s1">'Martell'</span><span class="p">,</span> <span class="s1">'Stark'</span><span class="p">,</span> <span class="s1">'Targaryen'</span><span class="p">,</span> <span class="s1">'Tully'</span><span class="p">,</span> <span class="s1">'Tyrell'</span><span class="p">]);</span>

<span class="c1">// then</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">last</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'Lannister'</span></code></pre>
     </figure> 
     <p>This is very handy for internationalization.</p> 
     <p>Available keys for datasets to override: <code class="highlighter-rouge">firstNames</code>, <code class="highlighter-rouge">lastNames</code>, <code class="highlighter-rouge">provinces</code>, <code class="highlighter-rouge">us_states_and_dc</code>, <code class="highlighter-rouge">territories</code>, <code class="highlighter-rouge">armed_forces</code>, <code class="highlighter-rouge">street_suffixes</code>, <code class="highlighter-rouge">months</code>, <code class="highlighter-rouge">cc_types</code>, <code class="highlighter-rouge">currency_types</code></p> 
    </article> 
    <article class="method" id="shuffle"> 
     <h3>shuffle </h3> 
     <pre class="signature"><code>chance.shuffle(array)
</code></pre> 
     <p>Given an array, scramble the order and return it.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">shuffle</span><span class="p">([</span><span class="s1">'alpha'</span><span class="p">,</span> <span class="s1">'bravo'</span><span class="p">,</span> <span class="s1">'charlie'</span><span class="p">,</span> <span class="s1">'delta'</span><span class="p">,</span> <span class="s1">'echo'</span><span class="p">]);</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="s1">'echo'</span><span class="p">,</span> <span class="s1">'delta'</span><span class="p">,</span> <span class="s1">'alpha'</span><span class="p">,</span> <span class="s1">'charlie'</span><span class="p">,</span> <span class="s1">'bravo'</span><span class="p">]</span></code></pre>
     </figure> 
    </article> 
    <h2 id="miscellaneous">Miscellaneous methods</h2> 
    <article class="method" id="dice"> 
     <h3>dice </h3> 
     <pre class="signature"><code>chance.d4()
chance.d6()
chance.d8()
chance.d10()
chance.d12()
chance.d20()
chance.d30()
chance.d100()
</code></pre> 
     <p class="pullquote" data-pullquote="&quot;Any dungeon master worth his weight in geldings goes nowhere without his 20 sided die.&quot;"></p> 
     <p>Return a value equal to the roll of a die.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">d20</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="mi">13</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">d6</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="mi">4</span></code></pre>
     </figure> 
     <p>These are just wrappers around natural() but are convenient for use by games.</p> 
    </article> 
    <article class="method" id="guid"> 
     <h3>guid </h3> 
     <pre class="signature"><code>chance.guid()
chance.guid({version: 5})
</code></pre> 
     <p>Return a random guid, version 5 by default.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="nx">chance</span><span class="p">.</span><span class="nx">guid</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="s1">'f0d8368d-85e2-54fb-73c4-2d60374295e3'</span>
  <span class="nx">chance</span><span class="p">.</span><span class="nx">guid</span><span class="p">({</span><span class="na">version</span><span class="p">:</span> <span class="mi">4</span><span class="p">});</span>
  <span class="o">=&gt;</span> <span class="s1">'c71f58e3-34af-43c0-b405-2764d6947d21'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="hash"> 
     <h3>hash </h3> 
     <pre class="signature"><code>chance.hash()
chance.hash({length: 25})
chance.hash({casing: 'upper'})
</code></pre> 
     <p>Return a random hex hash</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">hash</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s1">'e5162f27da96ed8e1ae51def1ba643b91d2581d8'</span></code></pre>
     </figure> 
     <p>By default, the hash is lowercase and 40 hex characters long (same as a git commit hash).</p> 
     <p>Optionally specify a length</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">hash</span><span class="p">({</span><span class="na">length</span><span class="p">:</span> <span class="mi">15</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'c28f57cb599ada4'</span></code></pre>
     </figure> 
     <p>Optionally specify casing to get a hash with only uppercase letters rather than the default lowercase</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">hash</span><span class="p">({</span><span class="na">casing</span><span class="p">:</span> <span class="s1">'upper'</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="s1">'3F2EB3FB85D88984C1EC4F46A3DBE740B5E0E56E'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="hidden"> 
     <h3>hidden </h3> 
     <pre class="signature"><code>chance.cc_types()
chance.mersenne_twister()
chance.mersenne_twister(12345)
chance.months()
chance.name_prefixes()
chance.provinces()
chance.states()
chance.street_suffix()
chance.street_suffixes()
</code></pre> 
     <p>These aren’t really hidden per se, but just utility methods intended to be used internally but exposed externally in case they’re useful to anyone.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js">  <span class="c1">// Return the list of cc types</span>
  <span class="nx">chance</span><span class="p">.</span><span class="nx">cc_types</span><span class="p">()</span>
  <span class="o">=&gt;</span> <span class="p">[{</span><span class="na">name</span><span class="p">:</span> <span class="s2">"American Express"</span><span class="p">,</span> <span class="na">short_name</span><span class="p">:</span> <span class="s1">'amex'</span><span class="p">,</span> <span class="na">prefix</span><span class="p">:</span> <span class="s1">'34'</span><span class="p">,</span> <span class="na">length</span><span class="p">:</span> <span class="mi">15</span><span class="p">},</span> <span class="p">...]</span>

  <span class="c1">// Return a new Mersenne Twister</span>
  <span class="nx">chance</span><span class="p">.</span><span class="nx">mersenne_twister</span><span class="p">()</span>
  <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">]</span> <span class="c1">// An instance of a Mersenne Twister</span>

  <span class="c1">// Optionally provide a seed for that twister</span>
  <span class="nx">chance</span><span class="p">.</span><span class="nx">mersenne_twister</span><span class="p">(</span><span class="mi">12345</span><span class="p">)</span>
  <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">object</span> <span class="nb">Object</span><span class="p">]</span> <span class="c1">// An instance of a twister with seed 12345</span>

  <span class="c1">// Return our list of name prefixes</span>
  <span class="nx">chance</span><span class="p">.</span><span class="nx">months</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="p">[{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'January'</span><span class="p">,</span> <span class="nx">short_name</span> <span class="s1">'Jan'</span><span class="p">,</span> <span class="na">numeric</span><span class="p">:</span> <span class="s1">'01'</span><span class="p">},</span> <span class="p">...]</span>

  <span class="c1">// Return our list of name prefixes</span>
  <span class="nx">chance</span><span class="p">.</span><span class="nx">name_prefixes</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="p">[{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Doctor'</span><span class="p">,</span> <span class="na">abbreviation</span><span class="p">:</span> <span class="s1">'Dr.'</span><span class="p">},</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Miss'</span><span class="p">,</span> <span class="na">abbreviation</span><span class="p">:</span> <span class="s1">'Miss'</span><span class="p">},</span> <span class="p">...]</span>

  <span class="c1">// Return the list of provinces</span>
  <span class="nx">chance</span><span class="p">.</span><span class="nx">provinces</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="p">[{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Alberta'</span><span class="p">,</span> <span class="na">abbreviation</span><span class="p">:</span> <span class="s1">'AB'</span><span class="p">},</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'British Columbia'</span><span class="p">,</span> <span class="na">abbreviation</span><span class="p">:</span> <span class="s1">'BC'</span><span class="p">},</span> <span class="p">...]</span>

  <span class="c1">// Return the list of states</span>
  <span class="nx">chance</span><span class="p">.</span><span class="nx">states</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="p">[{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Alabama'</span><span class="p">,</span> <span class="na">abbreviation</span><span class="p">:</span> <span class="s1">'AL'</span><span class="p">},</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Alaska'</span><span class="p">,</span> <span class="na">abbreviation</span><span class="p">:</span> <span class="s1">'AK'</span><span class="p">},</span> <span class="p">...]</span>

  <span class="c1">// Return a random street suffix</span>
  <span class="nx">chance</span><span class="p">.</span><span class="nx">street_suffix</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Street'</span><span class="p">,</span> <span class="na">abbreviation</span><span class="p">:</span> <span class="s1">'St'</span><span class="p">}</span>

  <span class="c1">// Return the list of street suffixes</span>
  <span class="nx">chance</span><span class="p">.</span><span class="nx">street_suffixes</span><span class="p">();</span>
  <span class="o">=&gt;</span> <span class="p">[{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Avenue'</span><span class="p">,</span> <span class="na">abbreviation</span><span class="p">:</span> <span class="s1">'Ave'</span><span class="p">},</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s1">'Boulevard'</span><span class="p">,</span> <span class="na">abbreviation</span><span class="p">:</span> <span class="s1">'Blvd'</span><span class="p">},</span> <span class="p">...]</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="n"> 
     <h3>n </h3> 
     <pre class="signature"><code>chance.n(chance.email, 5)
chance.n(chance.email, 5, { domain: "socialradar.com" })
</code></pre> 
     <p>Provide any function that generates random stuff (usually another <strong>Chance</strong> function) and a number and <code class="highlighter-rouge">n()</code> will generate an array of items with a length matching the length you specified.</p> 
     <p>For example, to generate 5 email addresses:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">n</span><span class="p">(</span><span class="nx">chance</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
<span class="o">=&gt;</span> <span class="p">[</span> <span class="s1">'nese@me.gov'</span><span class="p">,</span>
     <span class="s1">'tukvogi@novew.co.uk'</span><span class="p">,</span>
     <span class="s1">'worzi@jotok.edu'</span><span class="p">,</span>
     <span class="s1">'wicumafom@lalu.edu'</span><span class="p">,</span>
     <span class="s1">'hifebwo@abecusa.com'</span> <span class="p">]</span></code></pre>
     </figure> 
     <p>Any options that would be sent to the random function can be added following the number.</p> 
     <p>For example, <code class="highlighter-rouge">chance.email()</code> has options which can be specified, so you can generate 5 emails with a known domain as follows:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">n</span><span class="p">(</span><span class="nx">chance</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="p">{</span> <span class="na">domain</span><span class="p">:</span> <span class="s2">"socialradar.com"</span> <span class="p">})</span>
<span class="o">=&gt;</span> <span class="p">[</span> <span class="s1">'nuvvu@socialradar.com'</span><span class="p">,</span>
     <span class="s1">'icolul@socialradar.com'</span><span class="p">,</span>
     <span class="s1">'rig@socialradar.com'</span><span class="p">,</span>
     <span class="s1">'ca@socialradar.com'</span><span class="p">,</span>
     <span class="s1">'uc@socialradar.com'</span> <span class="p">]</span></code></pre>
     </figure> 
     <p>Note, these items are not guaranteed to be unique. If that is the intent, see <a href="http://chancejs.com/#unique"><code class="highlighter-rouge">chance.unique()</code></a></p> 
    </article> 
    <article class="method" id="normal"> 
     <h3>normal </h3> 
     <pre class="signature"><code>chance.normal()
chance.normal({mean: 100})
chance.normal({mean: 100, dev: 15})
</code></pre> 
     <p>Return a normally-distributed random variate.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">normal</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="mf">0.4244767651300604</span></code></pre>
     </figure> 
     <p>By default this starts with a mean of <code class="highlighter-rouge">0</code> and a standard deviation of <code class="highlighter-rouge">1</code> which is the standard normal distribution.</p> 
     <p>Optionally specify a mean and/or deviation.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="c1">// Notice, since no deviation was specified, using the default of `1`</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">normal</span><span class="p">({</span><span class="na">mean</span><span class="p">:</span> <span class="mi">100</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="mf">99.68352269988522</span>

<span class="c1">// For example, to get a random IQ (which by definition has a mean of 100</span>
<span class="c1">// and a standard deviation of 15)</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">normal</span><span class="p">({</span><span class="na">mean</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="na">dev</span><span class="p">:</span> <span class="mi">15</span><span class="p">})</span>
<span class="o">=&gt;</span> <span class="mf">85.11040121833615</span></code></pre>
     </figure> 
     <p>Used in combination with the above generators, this can be an extremely powerful way to get more realistic results as often “pure random” results fail to approximate the real world.</p> 
    </article> 
    <article class="method" id="radio"> 
     <h3>radio </h3> 
     <pre class="signature"><code>chance.radio()
</code></pre> 
     <p class="pullquote" data-pullquote="Broadcast call signs start with a W if east of the Mississippi River and K if west."></p> 
     <p>Generate a random radio call sign.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">radio</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'KCXW'</span></code></pre>
     </figure> 
     <p>Optionally specify a side of the Mississippi River to limit stations to that side.</p> 
     <p>See <a href="http://en.wikipedia.org/wiki/Call_signs_in_North_America#K_and_W">K and W</a> for more details</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">radio</span><span class="p">({</span><span class="na">side</span><span class="p">:</span> <span class="s1">'east'</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'WKOQ'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">radio</span><span class="p">({</span><span class="na">side</span><span class="p">:</span> <span class="s1">'east'</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'WNOW'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="rpg"> 
     <h3>rpg </h3> 
     <pre class="signature"><code>chance.rpg('#d#')
chance.rpg('#d#', {sum: true})
</code></pre> 
     <p>Given an input looking like #d#, where the first # is the number of dice to roll and the second # is the max of each die, returns an array of dice values.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">rpg</span><span class="p">(</span><span class="s1">'3d10'</span><span class="p">);</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">rpg</span><span class="p">(</span><span class="s1">'5d6'</span><span class="p">);</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span></code></pre>
     </figure> 
     <p>Optionally specify a sum be returned rather than an array of dice.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">rpg</span><span class="p">(</span><span class="s1">'3d10'</span><span class="p">,</span> <span class="p">{</span><span class="na">sum</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="mi">14</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="tv"> 
     <h3>tv </h3> 
     <pre class="signature"><code>chance.tv()
chance.tv({side: 'west'})
</code></pre> 
     <p>Generate a TV station call sign. This is an alias for <code class="highlighter-rouge">radio()</code> since they both follow the same rules.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">radio</span><span class="p">();</span>
<span class="o">=&gt;</span> <span class="s1">'WXTY'</span></code></pre>
     </figure> 
     <p>Optionally specify a side of the Mississippi River to limit stations to that side.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">radio</span><span class="p">({</span><span class="na">side</span><span class="p">:</span> <span class="s1">'west'</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'KCYL'</span>

<span class="nx">chance</span><span class="p">.</span><span class="nx">radio</span><span class="p">({</span><span class="na">side</span><span class="p">:</span> <span class="s1">'west'</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s1">'KQDV'</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="unique"> 
     <h3>unique </h3> 
     <pre class="signature"><code>chance.unique(chance.state, 5)
chance.unique(chance.state, 5, { comparator: func })
</code></pre> 
     <p>Provide any function that generates random stuff (usually another <strong>Chance</strong> function) and a number and <code class="highlighter-rouge">unique()</code> will generate a random array of unique (not repeating) items with a length matching the one you specified.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">chance</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="s2">"SC"</span><span class="p">,</span> <span class="s2">"WA"</span><span class="p">,</span> <span class="s2">"CO"</span><span class="p">,</span> <span class="s2">"TX"</span><span class="p">,</span> <span class="s2">"ND"</span><span class="p">]</span></code></pre>
     </figure> 
     <p>This is helpful when there are a limited number of options and you want a bunch but want to ensure each is different.</p> 
     <p>Optionally specify the comparator used to determine whether a generated item is in the list of already generated items. By default the comparator just checks to see if the newly generated item is in the array of already generated items. This works for most simple cases (such as <code class="highlighter-rouge">chance.state()</code>) but will not work if the generated item is an object (because the <code class="highlighter-rouge">Array.prototype.indexOf()</code> method will not work on an object since 2 objects will not be strictly equal, <code class="highlighter-rouge">===</code>, unless they are references to the same object).</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">chance</span><span class="p">.</span><span class="nx">currency</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">comparator</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">item</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">acc</span> <span class="o">||</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">code</span> <span class="o">===</span> <span class="nx">val</span><span class="p">.</span><span class="nx">code</span><span class="p">);</span>
        <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>
<span class="o">=&gt;</span> <span class="p">[{</span> <span class="na">code</span><span class="p">:</span> <span class="s2">"KYF"</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Cayman Islands Dollar"</span> <span class="p">},</span> <span class="p">{</span> <span class="na">code</span><span class="p">:</span> <span class="s2">"CDF"</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="s2">"Congo/Kinshasa Franc"</span> <span class="p">}]</span></code></pre>
     </figure> 
     <p>You can also specify any arbitrary options in this third argument and they’ll be passed along to the method you specify as the first.</p> 
     <p>For example, let’s say you want to retrieve 10 unique integers between 0 and 100. This is easily achievable by specifying <code class="highlighter-rouge">chance.integer</code> as hte function, 10 as the number to retrieve, and a min/max in the options.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">chance</span><span class="p">.</span><span class="nx">integer</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="p">{</span><span class="na">min</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="na">max</span><span class="p">:</span> <span class="mi">100</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="p">[</span><span class="mi">78</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">63</span><span class="p">]</span></code></pre>
     </figure> 
     <p>Note, there could be cases where it is impossible to generate the unique number. For example, if you choose <code class="highlighter-rouge">chance.state</code> as shown above as the random function and want say, 55 uniques, <strong>Chance</strong> will throw a RangeError because it is impossible to generate 55 uniques because there are only 51 states in the available pool (50 states plus the District of Columbia).</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">unique</span><span class="p">(</span><span class="nx">chance</span><span class="p">.</span><span class="nx">state</span><span class="p">,</span> <span class="mi">55</span><span class="p">);</span>
<span class="o">=&gt;</span> <span class="nx">RangeError</span><span class="err">:</span> <span class="nx">Chance</span><span class="err">:</span> <span class="nx">num</span> <span class="nx">is</span> <span class="nx">likely</span> <span class="nx">too</span> <span class="nx">large</span> <span class="k">for</span> <span class="nx">sample</span> <span class="nx">set</span></code></pre>
     </figure> 
    </article> 
    <article class="method" id="weighted"> 
     <h3>weighted </h3> 
     <pre class="signature"><code>chance.weighted(['a', 'b'], [100, 1])
chance.weighted(['a', 'b', 'c', 'd'], [1, 2, 3, 4])
</code></pre> 
     <p>Provide an array of items, and another array of items specifying the relative weights and <strong>Chance</strong> will select one of those items, obeying the specified weight.</p> 
     <p>For example, the following code:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">weighted</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">],</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span>
<span class="o">=&gt;</span> <span class="s1">'a'</span></code></pre>
     </figure> 
     <p>Will generate <code class="highlighter-rouge">'a'</code> 100 times more often than <code class="highlighter-rouge">'b'</code> but still choose one or the other randomly.</p> 
     <p>The weights are all relative, so if you have more than just two it will ensure that all items are generated relative to all of the weights.</p> 
     <p>For example, the following code:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">weighted</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]);</span>
<span class="o">=&gt;</span> <span class="s1">'c'</span></code></pre>
     </figure> 
     <p>Will generate a letter from the array but will pick <code class="highlighter-rouge">'b'</code> twice as often as it picks <code class="highlighter-rouge">'a'</code> and will pick <code class="highlighter-rouge">'c'</code> three times as often as it picks <code class="highlighter-rouge">'a'</code> and will pick <code class="highlighter-rouge">'d'</code> four times as often as it will pick <code class="highlighter-rouge">'a'</code> and will pick <code class="highlighter-rouge">'d'</code> two times as often as it will pick <code class="highlighter-rouge">'b'</code>.</p> 
     <p>The weights can be whole numbers as shown above or fractions.</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">weighted</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">]);</span>
<span class="o">=&gt;</span> <span class="s1">'d'</span></code></pre>
     </figure> 
     <p>There is no requirement that the weights sum to anything in particular, they are all compared relative to each other so all of the following are equivalent:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">weighted</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]);</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">weighted</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">]);</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">weighted</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">],</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">]);</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">weighted</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">],</span> <span class="p">[</span><span class="mi">17</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">68</span><span class="p">]);</span>
<span class="nx">chance</span><span class="p">.</span><span class="nx">weighted</span><span class="p">([</span><span class="s1">'a'</span><span class="p">,</span> <span class="s1">'b'</span><span class="p">,</span> <span class="s1">'c'</span><span class="p">,</span> <span class="s1">'d'</span><span class="p">],</span> <span class="p">[</span><span class="mf">0.17</span><span class="p">,</span> <span class="mf">0.34</span><span class="p">,</span> <span class="mf">0.51</span><span class="p">,</span> <span class="mf">0.68</span><span class="p">]);</span></code></pre>
     </figure> 
     <p>Recall JavaScript has first class functions so you could do something like the following:</p> 
     <figure class="highlight">
      <pre><code class="language-js" data-lang="js"><span class="nx">chance</span><span class="p">.</span><span class="nx">weighted</span><span class="p">([</span><span class="nx">chance</span><span class="p">.</span><span class="nx">fbid</span><span class="p">,</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">twitter</span><span class="p">,</span> <span class="nx">chance</span><span class="p">.</span><span class="nx">ip</span><span class="p">],</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">])();</span>
<span class="o">=&gt;</span> <span class="mi">10000345166213</span></code></pre>
     </figure> 
     <p>That will pick one of the <strong>Chance</strong> methods with the relative weights specified and then immediately invoke it, so it will return a random fbid twice as often as it will return a twitter handle (because 10/5 is 2) and an fbid 10 times more often than it will return a random ip address (because 10/1 is 10). It will return a random twitter handle 5 times more often than it will return an ip address (because 5/1 is 5).</p> 
    </article> 
    <hr> 
    <h2 id="todo">Todo</h2> 
    <ul> 
     <li> 
      <article class="todo" id="todo-True Random"> 
       <p> <strong>True Random</strong></p>
       <p>By default, the underlying random() is based on the Mersenne Twister. This is rad for repeatability, so given a seed a “random” sequence can be recreated, but it’s only pseudo-random.</p> 
       <p>There is nothing that would prevent this library from choosing, on instantiation, another random underbase though so in theory this whole library could work with a “true” random base.</p> 
       <p>Getting it to be true random would require some external entropy somehow and this gets tricky when putting this in Node or something. The usual “move your mouse to generate entropy” won’t work. I considered integrating with <a href="http://www.random.org">http://www.random.org</a> but that would involve network latency which may be undesired and may work differently in Node or in the browser.</p> 
       <p>Anyway, none of these are insurmountable, but are tricky.</p> 
       <p></p> 
      </article> </li> 
     <li> 
      <article class="todo" id="todo-Regex"> 
       <p> <strong>Regex</strong></p>
       <p>It would be awesome to specify some sort of regex indicating that some things should be replaced within a word.</p> 
       <p></p> 
      </article> </li> 
     <li> 
      <article class="todo" id="todo-More Generators!!"> 
       <p> <strong>More Generators!!</strong></p>
       <p>This is a work in progress!! Expect the current generators to continue as stable (and we have automated tests to help ensure that) but we will be constantly adding more.</p> 
       <p></p> 
      </article> </li> 
     <li> 
      <article class="todo" id="todo-Internationalization"> 
       <p> <strong>Internationalization</strong></p>
       <p>At current, most of the address helpers are very US-centric. Fix that!</p> 
       <p></p> 
      </article> </li> 
     <li> 
      <article class="todo" id="todo-Better names"> 
       <p> <strong>Better names</strong></p>
       <p>The Social Security page has a <a href="http://www.ssa.gov/oact/babynames/limits.html">data dump</a> of the top 1000 baby names. Use it to provide better random names that don’t just look like gibberish but are actual names.</p> 
       <p></p> 
      </article> </li> 
    </ul> 
    <hr> 
    <h2 id="changelog">Change Log</h2> 
    <article class="changelog" id="changelog-1.0.0"> 
     <h3> 1.0.0 <small>— <i>12 Feb 2016</i> — <a href="https://github.com/chancejs/chancejs/compare/0.8.0...1.0.0">diff</a> </small> </h3> 
     <ul> 
      <li>Long overdue version bump. The Chance API has long been stable and should have had major version 1 long ago.</li> 
      <li>Added new generators: <code class="highlighter-rouge">file()</code>, <code class="highlighter-rouge">semver()</code>, <code class="highlighter-rouge">weekday()</code></li> 
      <li>Split apart <code class="highlighter-rouge">pick()</code> into <code class="highlighter-rouge">pickone()</code> and <code class="highlighter-rouge">pickset()</code>. The old <code class="highlighter-rouge">pick()</code> was very confusing, returning one item if no length supplied or an array if a multiple was supplied. Breaking these apart should make things far less confusing. Deprecated <code class="highlighter-rouge">pick()</code></li> 
      <li>More options for <code class="highlighter-rouge">color()</code> and <code class="highlighter-rouge">first()</code> and <code class="highlighter-rouge">last()</code> and <code class="highlighter-rouge">word()</code> and <code class="highlighter-rouge">syllable()</code></li> 
      <li>Bugfixes</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.8.0"> 
     <h3> 0.8.0 <small>— <i>11 Sep 2015</i> — <a href="https://github.com/chancejs/chancejs/compare/0.7.0...0.8.0">diff</a> </small> </h3> 
     <ul> 
      <li>Moved the CLI out into its own repo/project, now at <a href="https://github.com/victorquinn/chancejs-cli">https://github.com/victorquinn/chancejs-cli</a>. Minor version bump due to this potentially breaking change.</li> 
      <li>Added new generators: country(), mrz(), avatar(), md5()</li> 
      <li>Better jsdoc comments</li> 
      <li>Automated coveralls test coverage report</li> 
      <li>Bugfixes</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.7.0"> 
     <h3> 0.7.0 <small>— <i>05 Dec 2014</i> — <a href="https://github.com/chancejs/chancejs/compare/0.6.1...0.7.0">diff</a> </small> </h3> 
     <ul> 
      <li>Now with <a href="http://chancejs.com/#cli">cli</a> support! after <code class="highlighter-rouge">npm install -g chance</code> you can run <code class="highlighter-rouge">chance &lt;generator_name&gt;</code> on the command line and get a random result! Many thanks <a href="https://github.com/oliversalzburg">@oliversalzburg</a> for this excellent addition!</li> 
      <li>Added new generators: android_id(), bb_pin(), cpnj(), suffix(), wp7_anid(), wp8_anid(), url()</li> 
      <li>Now with webworker support</li> 
      <li>Now with UK and France phones</li> 
      <li>Now allowing strings to be provided as the seed for more convenient testing</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.6.1"> 
     <h3> 0.6.1 <small>— <i>03 Sep 2014</i> — <a href="https://github.com/chancejs/chancejs/compare/0.5.6...0.6.1">diff</a> </small> </h3> 
     <ul> 
      <li>Add a bunch of new generators including: altitude(), apple_token() cpf(), currency(), currency_pair(), depth(), geohash(), get(), mac_address(), n(), set(), ssn(), unique(), weighted()</li> 
      <li>Data now separated and replaceable via set(). Much better for internationalization or cases where the defaults are inadequate.</li> 
      <li>New options for: 
       <ul> 
        <li>email() - can now specify length of word before @</li> 
        <li>name_prefix() - now can specify gender</li> 
       </ul> </li> 
      <li>Possibly breaking changes (from 0.5.x): 
       <ul> 
        <li>age() - now default age range is far more sensical but this means it is generally lower (default max used to be 120 now only 65)</li> 
        <li>guid() - now returns all lowercase to accord with the majority of uses in the wild</li> 
        <li>states() - now only returns US states by default, territories and armed forces by flag</li> 
       </ul> </li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.5.5"> 
     <h3> 0.5.5 <small>— <i>16 Mar 2014</i> — <a href="https://github.com/chancejs/chancejs/compare/0.5.4...0.5.5">diff</a> </small> </h3> 
     <ul> 
      <li>Add range parameters to latitude() and longitude() so range can be bounded</li> 
      <li>Add pad() helper</li> 
      <li>Add google_analytics generator</li> 
      <li>Now allowing for creation of chance instance without using the <code class="highlighter-rouge">new</code> keyword to simplify usage in Node.js</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.5.4"> 
     <h3> 0.5.4 <small>— <i>17 Dec 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.5.3...0.5.4">diff</a> </small> </h3> 
     <ul> 
      <li>Add tv()</li> 
      <li>Fix issue with negative dollar amounts</li> 
      <li>Fix component.json so it works as expected</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.5.3"> 
     <h3> 0.5.3 <small>— <i>08 Nov 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.5.2...0.5.3">diff</a> </small> </h3> 
     <ul> 
      <li>Revamp date() a bit to fix a bug, clean up the code, add finer grained randomity</li> 
      <li>Add hammertime(), second(), millisecond()</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.5.2"> 
     <h3> 0.5.2 <small>— <i>05 Nov 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.5.1...0.5.2">diff</a> </small> </h3> 
     <ul> 
      <li>Incorporate valid GUID generator pull request</li> 
      <li>Add support for <a href="http://component.io">component</a></li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.5.1"> 
     <h3> 0.5.1 <small>— <i>29 Oct 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.5.0...0.5.1">diff</a> </small> </h3> 
     <ul> 
      <li>Fix a minor bug in the new date() function. See <a href="https://github.com/victorquinn/chancejs/issues/32">Issue 32</a> on Github for more details.</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.5.0"> 
     <h3> 0.5.0 <small>— <i>27 Oct 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.4.3...0.5.0">diff</a> </small> </h3> 
     <ul> 
      <li>Bugfixes: shuffle() was destroying incoming array, color() was ignoring default options</li> 
      <li>Tweaks to existing methods: allow pick() to return multiple elements, better first() and last() using actual names</li> 
      <li>Added yet more generators: age(), birthday(), date(), gender(), hashtag(), klout()</li> 
      <li>Now with <a href="#mixin">Mixin</a> support for extending Chance!</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.4.3"> 
     <h3> 0.4.3 <small>— <i>31 Jul 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.4.2...0.4.3">diff</a> </small> </h3> 
     <ul> 
      <li>Added yet more generators: color(), hash()</li> 
      <li>Major refactor of options handling to be much more DRY</li> 
      <li>Now with NANP support for phones</li> 
      <li>Other misc. refactoring to make things more clean</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.4.2"> 
     <h3> 0.4.2 <small>— <i>25 Jul 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.4.1...0.4.2">diff</a> </small> </h3> 
     <ul> 
      <li>Added yet more generators, rpg(), d30()</li> 
      <li>Added support for <a href="http://bower.io">Bower</a></li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.4.1"> 
     <h3> 0.4.1 <small>— <i>25 Jul 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.4.0...0.4.1">diff</a> </small> </h3> 
     <ul> 
      <li>Added yet more generators, radio(), shuffle(), ipv6()</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.4.0"> 
     <h3> 0.4.0 <small>— <i>18 Jul 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.3.0...0.4.0">diff</a> </small> </h3> 
     <ul> 
      <li>Added a ton more generators</li> 
      <li>Added floating point generation</li> 
      <li>Added ability to specify arbitrary random function</li> 
      <li>Added minified version</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.3.3"> 
     <h3> 0.3.3 <small>— <i>01 Jul 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.3.2...0.3.3">diff</a> </small> </h3> 
     <ul> 
      <li>Add floating()</li> 
      <li>Add latitude(), longitude(), coordinates() using floating() as the base</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.3.2"> 
     <h3> 0.3.2 <small>— <i>01 Jul 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.3.1...0.3.2">diff</a> </small> </h3> 
     <ul> 
      <li>Incorporate more pull requests for bug fixes</li> 
      <li>Now with Travis CI for automated running of tests</li> 
      <li>Add first(), last() and prefix()</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.3.1"> 
     <h3> 0.3.1 <small>— <i>25 Jun 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.3.0...0.3.1">diff</a> </small> </h3> 
     <ul> 
      <li>Added domain(), email(), and ip()</li> 
      <li>Pulled in some pull requests to fix minor bugs</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.3.0"> 
     <h3> 0.3.0 <small>— <i>23 Jun 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.2.1...0.3.0">diff</a> </small> </h3> 
     <ul> 
      <li>Updated README to include more info on usage</li> 
      <li>Added most text generators for character, string, syllable, word, phone number, more</li> 
      <li>Added name generators</li> 
      <li>Added address generators and guid</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.2"> 
     <h3> 0.2 <small>— <i>22 Jun 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.1...0.2">diff</a> </small> </h3> 
     <ul> 
      <li>Now with a Mersenne Twister rather than Math.random() as the base so tests are repeatable.</li> 
      <li>Restructured Chance as a module rather than a singleton</li> 
      <li>Constructor now takes a seed which can be used to instantiate a new copy with a Mersenne Twister base</li> 
      <li>Added some dice</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.2.1"> 
     <h3> 0.2.1 <small>— <i>22 Jun 2013</i> — <a href="https://github.com/chancejs/chancejs/compare/0.2...0.2.1">diff</a> </small> </h3> 
     <ul> 
      <li>Updated README to include more info on usage</li> 
      <li>Added most text generators for character, string, syllable, word</li> 
      <li>Added address generators and guid</li> 
     </ul> 
    </article> 
    <article class="changelog" id="changelog-0.1"> 
     <h3> 0.1 <small>— <i>21 Jun 2013</i> </small> </h3> 
     <p><a href="https://github.com/victorquinn/chancejs/blob/v0.1/src/chance.js">First Release!</a> Barely any generators.</p> 
    </article> 
   </section> 
   <h2 id="thanks">Acknowledgements &amp; Thanks</h2> 
   <p> This documentation is based on the layout of the <a href="https://zeptojs.com">Zepto.js</a> which itself is based on the layout of the <a href="https://github.com/documentcloud/backbone/">Backbone.js</a> documentation, which is released under the <a href="https://github.com/documentcloud/backbone/blob/master/LICENSE">MIT license</a>. </p> 
   <p> Thank you to <a href="https://github.com/banksean">Sean McCullough</a> for your <a href="https://gist.github.com/banksean/300494">Mersenne Twister gist</a> on which almost the entirety of this library is dependent. And to Takuji Nishimura and Makoto Matsumoto who wrote the original C version on which Sean's JavaScript gist is based. </p> 
   <p> And of course a monster thank you to all of the <a href="https://github.com/chancejs/chancejs/graphs/contributors">Contributors</a> to this project! </p> 
   <p> <small> © 2013 <a href="https://www.victorquinn.com">Victor Quinn</a><br> Chance and this documentation are released under the terms of the <a href="http://opensource.org/licenses/MIT">MIT license</a>. </small> </p> 
   <footer> 
    <p> <a id="true-random">[1]</a> - Of course true mathematicians out there would say that this ought to be considered as only generating pseudo-random things, not true random. For that we'd need some external entropy, not depending on a Mersenne Twister, blah, blah, blah. However, for most practical uses of this library for which it was created and intended, such as generating random names and addresses for automated tests, our random is good enough. But it should probably NOT be used for any cryptographic applications requiring true-random. See <a href="http://vq.io/12hBd84">Wikipedia's article</a> for more info. </p> 
   </footer> 
  </div> 
  <script src="chance.js"></script> 
  <script src="zepto.min.js"></script> 
  <script src="touch.js"></script> 
  <script>
  var reflowTimeout;

  function injectScript(src) {
    var s = document.createElement('script')
    s.src = src; s.async = true
    $('script').first().before(s)
  }

  // Reflow all elements on the page.
  function reflowFixedPositions() {
    var docStyle = document.documentElement.style
    docStyle.paddingRight = '1px'
    setTimeout(function(){ docStyle.paddingRight = '' }, 0)
  }

  $('.signature code').html(function(i, html){
    return html
      .replace(/\[([^\[]+)\]$/mg, '<span class=version>$1+</span>')
      .replace(/\)([^()]+)$/mg, ') <span class=return>$1</span>')
  })

  $(document).on('mouseover', 'span.version', function(){
    var el = $(this)
    if (!el.attr('title'))
      el.attr('title', "This feature is only available in Zepto " + el.text())
  })

  if ($.os.ios || /\bMac.+\bSafari\b/.test(navigator.userAgent))
    $(document.body).addClass('emoji-enabled')

  // don't follow links when the sidebar is tap-enabled
  $('#sidebar').on('click', 'a', function(e){
    return !$('body').hasClass('navigating')
  })

  $('#sidebar').on('tap', 'a', function(e){
    location.href = this.href;

    closeMenu()
    setTimeout(function(){
      // fixes sidebar becoming unscrollable in Safari 6
      reflowFixedPositions()
    }, 10)
    return false
  })

  $(window).on('scroll', function(){
    if(reflowTimeout) clearTimeout(reflowTimeout)
    reflowTimeout = setTimeout(reflowFixedPositions, 200)
  })

  function closeMenu(){
    if ($('body').hasClass('navigating')) {
      $('body').removeClass('navigating')
      setTimeout(function(){
        $('#sidebar').css('display','none')
      }, 350)
    }
  }

  // show/hide menu on mobile
  $('#menu_icon').on('tap', function(){
    if ($('body').hasClass('navigating')) {
      closeMenu()
    } else {
      $('#sidebar').css('display','block')
      $('#sidebar')[0].offsetLeft // force render
      $('body').addClass('navigating')
    }
    return false
  })

  // change the title of the page so bookmarks have a better default
  if ($.os.ios || $.os.android)
    document.title = 'Chance Docs'

  // For retina screens, use a hi-res version of the tour image.
  // We're swapping this out on-demand (not an ideal solution)
  // to avoid rendering bugs on iOS.
  /*
  $('#tour > img')[0].src =
    ('devicePixelRatio' in window && devicePixelRatio > 1) ?
    'intro2x.jpg' : 'intro.jpg'
  */
  var tour = $('#tour'), tourSlides = tour.children(),
      tourSlide = 0, tourSlidesTotal = 5

  function advanceTourSlide(delta){
    tourSlide = (tourSlide + delta + tourSlidesTotal) % tourSlidesTotal
    var offset = tourSlide * tour.width()
    tourSlides.animate({ translateX: -offset + 'px' })
  }

  tour.on('click swipeLeft', function(){ advanceTourSlide(+1) })
      .on('swipeRight', function(){ advanceTourSlide(-1) })

  if (/^(localhost|chancejs)|\.(dev|local)$/.test(location.hostname) && $.os.iphone && !/Simulator/.test(navigator.userAgent))
    injectScript('livereload.js')

  injectScript('http://platform.twitter.com/widgets.js')
</script> 
  <script type="text/javascript">
window.analytics=window.analytics||[],window.analytics.methods=["identify","group","track","page","pageview","alias","ready","on","once","off","trackLink","trackForm","trackClick","trackSubmit"],window.analytics.factory=function(t){return function(){var a=Array.prototype.slice.call(arguments);return a.unshift(t),window.analytics.push(a),window.analytics}};for(var i=0;i<window.analytics.methods.length;i++){var key=window.analytics.methods[i];window.analytics[key]=window.analytics.factory(key)}window.analytics.load=function(t){if(!document.getElementById("analytics-js")){var a=document.createElement("script");a.type="text/javascript",a.id="analytics-js",a.async=!0,a.src=("https:"===document.location.protocol?"https://":"http://")+"cdn.segment.io/analytics.js/v1/"+t+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(a,n)}},window.analytics.SNIPPET_VERSION="2.0.9",
window.analytics.load("5u8961mhro");
window.analytics.page();
</script>   
 </body>
</html>