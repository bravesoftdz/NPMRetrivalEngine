<!doctype html>
<html lang="en">
 <head> 
  <meta charset="UTF-8"> 
  <!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]--> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <meta name="generator" content="Asciidoctor 1.5.5"> 
  <meta name="keywords" content="javascript, java, jdk, nashorn"> 
  <meta name="author" content="Niko Köbler"> 
  <title>Riding the Nashorn: Programming JavaScript on the JVM</title> 
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700"> 
  <link rel="stylesheet" href="css/asciidoctor.css"> 
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.6.3/css/font-awesome.min.css"> 
  <link rel="stylesheet" href="css/coderay-asciidoctor.css"> 
 </head> 
 <body class="book toc2 toc-left"> 
  <div id="header"> 
   <h1>Riding the Nashorn: Programming JavaScript on the JVM</h1> 
   <div class="details"> 
    <span id="author" class="author">Niko Köbler</span>
    <br> 
    <span id="email" class="email"><a href="mailto:niko@n-k.de">niko@n-k.de</a>, <a href="http://www.n-k.de" class="bare">http://www.n-k.de</a>, <a href="https://twitter.com/dasniko">@dasniko</a></span>
    <br> 
   </div> 
   <div id="toc" class="toc2"> 
    <div id="toctitle">
     Table of Contents
    </div> 
    <ul class="sectlevel1"> 
     <li><a href="#_nashorn_at_the_command_line_interface_cli">1. Nashorn at the Command Line Interface (CLI)</a> 
      <ul class="sectlevel2"> 
       <li><a href="#_scripting_mode">1.1. Scripting mode</a></li> 
       <li><a href="#_shebang">1.2. Shebang</a></li> 
      </ul> </li> 
     <li><a href="#_nashorn_javascript_engine_from_within_java">2. Nashorn JavaScript Engine from within Java</a> 
      <ul class="sectlevel2"> 
       <li><a href="#_invoking_javascript_functions_from_java">2.1. Invoking JavaScript functions from Java</a></li> 
       <li><a href="#_invoking_java_methods_from_javascript">2.2. Invoking Java methods from JavaScript</a></li> 
       <li><a href="#_scriptobjectmirror">2.3. ScriptObjectMirror</a></li> 
       <li><a href="#_options_for_the_script_engine">2.4. Options for the script engine</a></li> 
       <li><a href="#_bindings_context">2.5. Bindings / Context</a></li> 
      </ul> </li> 
     <li><a href="#_api_and_language_extensions">3. API and Language Extensions</a> 
      <ul class="sectlevel2"> 
       <li><a href="#_print_function">3.1. Print Function</a></li> 
       <li><a href="#_reading_stdin">3.2. Reading Stdin</a></li> 
       <li><a href="#_reading_files">3.3. Reading Files</a></li> 
       <li><a href="#_string_interpolation">3.4. String Interpolation</a></li> 
       <li><a href="#_back_quote_exec_expressions">3.5. Back-quote exec expressions</a></li> 
       <li><a href="#_java_beans">3.6. Java Beans</a></li> 
       <li><a href="#_function_literals">3.7. Function Literals</a></li> 
       <li><a href="#_binding_properties">3.8. Binding Properties</a></li> 
       <li><a href="#_trimming_strings">3.9. Trimming Strings</a></li> 
       <li><a href="#_whereis">3.10. Whereis</a></li> 
       <li><a href="#_import_scopes">3.11. Import Scopes</a></li> 
       <li><a href="#_packages">3.12. Packages</a></li> 
       <li><a href="#_typed_arrays">3.13. Typed Arrays</a></li> 
       <li><a href="#_collections_and_for_each">3.14. Collections and For-Each</a></li> 
       <li><a href="#_convert_arrays">3.15. Convert Arrays</a></li> 
       <li><a href="#_lambdas_and_streams">3.16. Lambdas and Streams</a></li> 
       <li><a href="#_extending_classes">3.17. Extending Classes</a></li> 
       <li><a href="#_calling_super">3.18. Calling Super</a></li> 
       <li><a href="#_loading_scripts">3.19. Loading Scripts</a></li> 
       <li><a href="#_error_object">3.20. Error Object</a></li> 
       <li><a href="#_scripting_mode_extension_objects">3.21. Scripting Mode Extension Objects</a></li> 
      </ul> </li> 
     <li><a href="#_working_with_package_managers_repositories">4. Working with Package Managers &amp; Repositories</a> 
      <ul class="sectlevel2"> 
       <li><a href="#_npm">4.1. NPM</a></li> 
       <li><a href="#_maven">4.2. Maven</a></li> 
      </ul> </li> 
     <li><a href="#_isomorphic_javascript">5. Isomorphic JavaScript</a> 
      <ul class="sectlevel2"> 
       <li><a href="#_what_does_em_isomorphic_em_mean_what_can_i_do_with_it_and_why_should_i_use_it">5.1. What does <em>Isomorphic</em> mean, what can I do with it and why should I use it?</a></li> 
       <li><a href="#_react_js">5.2. React.js</a></li> 
       <li><a href="#_spring_boot_mvc_for_isomorphic_apps">5.3. Spring Boot MVC for Isomorphic Apps</a></li> 
       <li><a href="#_java_ee_8_mvc_1_0_for_isomorphic_apps">5.4. Java EE 8 MVC 1.0 for Isomorphic Apps</a></li> 
      </ul> </li> 
     <li><a href="#_javafx_with_javascript">6. JavaFX with JavaScript</a> 
      <ul class="sectlevel2"> 
       <li><a href="#_list_of_includes">6.1. List of includes</a></li> 
      </ul> </li> 
     <li><a href="#_testing_and_debugging_of_nashorn_scripts">7. Testing and Debugging of Nashorn Scripts</a> 
      <ul class="sectlevel2"> 
       <li><a href="#_testing">7.1. Testing</a></li> 
       <li><a href="#_debugging">7.2. Debugging</a></li> 
      </ul> </li> 
     <li><a href="#_contact">8. Contact</a></li> 
    </ul> 
   </div> 
  </div> 
  <div id="content"> 
   <div id="preamble"> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>Nashorn is the official JavaScript Engine in the Java Virtual Machine since Version 8. It supports and implements the <a href="http://www.ecma-international.org/ecma-262/5.1/">ECMAScript 5.1 specification</a> and competes among others directly with <a href="https://developers.google.com/v8/">Google V8</a> (the script engine behind <a href="https://nodejs.org">Node.js</a>). Nashorn compiles JavaScript to Java Bytecode during runtime and thus provides high interoperability of Java and JavaScript.</p> 
     </div> 
     <div class="imageblock" style="text-align: center"> 
      <div class="content"> 
       <img src="images/nashorn.jpg" alt="Nashorn" width="600"> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>In this script I want to dig into some of the (IMO) most used options, functions, features, and use-cases. After working through this tutorial you’ll be able to use Nashorn and its dynamic scripting features in your daily Java business.</p> 
     </div> 
     <div class="paragraph"> 
      <p><em>Another good starting point for Nashorn resources might be the <a href="http://openjdk.java.net/projects/nashorn/">Official Project Nashorn Website</a> with links to the mailing-list, the blog and the wiki pages. Check it out!</em></p> 
     </div> 
     <div class="admonitionblock important"> 
      <table> 
       <tbody>
        <tr> 
         <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> 
         <td class="content"> Nashorn in JDK 8 implements, as mentioned above, the ECMAScript 5.1 specification. But it’s Nashorn’s strategy to follow the ECMAScript spec. So the follow up major releases of Nashorn will implement <a href="http://www.ecma-international.org/ecma-262/6.0/">ECMAScript 2015 spec</a>. </td> 
        </tr> 
       </tbody>
      </table> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="_nashorn_at_the_command_line_interface_cli">1. Nashorn at the Command Line Interface (CLI)</h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>Nashorn comes with a command line client named <code>jjs</code>.</p> 
     </div> 
     <div class="paragraph"> 
      <p>This client is located in <code>$JAVA_HOME/bin</code>, but there’s no shortcut/link/path integration after installation of Java 8. So, if you want to work with <code>jjs</code> - and that’s what we want to do here - you should create a link to the tool:</p> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="bash">$ cd /usr/bin
$ ln -s $JAVA_HOME/bin/jjs jjs
$ jjs
jjs&gt; print('Hello World');</code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>You can now evaluate JavaScript code directly in the jjs shell.</p> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="js">jjs&gt; <span class="keyword">var</span> x = <span class="integer">10</span>;
jjs&gt; print(x);
<span class="integer">10</span></code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>Additionally you can load and execute JavaScript files with the <code>jjs</code> tool:</p> 
     </div> 
     <div class="listingblock"> 
      <div class="title">
       test.js
      </div> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="js"><span class="keyword">var</span> x = <span class="integer">10</span>;
<span class="keyword">var</span> y = <span class="integer">20</span>;
print(x + y);</code></pre> 
      </div> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="bash">$ jjs test.js
30</code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p><strong>Exiting</strong></p> 
     </div> 
     <div class="paragraph"> 
      <p>The <code>jjs</code> client can be exited by calling</p> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="js">jjs&gt; exit()  <span class="comment">// regular exit</span>
jjs&gt; exit(<span class="integer">1</span>) <span class="comment">// exit with an exit-code</span>

jjs&gt; quit()  <span class="comment">// regular exit</span>
jjs&gt; quit(<span class="integer">1</span>) <span class="comment">// exit with an exit-code</span></code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p><strong>Help / Options</strong></p> 
     </div> 
     <div class="paragraph"> 
      <p>List all options of <code>jjs</code> by calling it with the <code>-help</code> option:</p> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="bash">$ jjs -help</code></pre> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_scripting_mode">1.1. Scripting mode</h3> 
      <div class="paragraph"> 
       <p>In addition to the ECMAScript 5.1 specification, Nashorn implements a number of its own syntax and API extensions as well <em>(see one of the next chapters)</em>. Many of these extensions are only available in <code>scripting</code> mode. <code>Scripting</code> mode is turned on by using the cli option <code>--scripting</code>:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="bash">$ jjs --scripting</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>In <code>scripting</code> mode, Nashorn accepts shell style <code>#</code> single line comments:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="title">
        test.js
       </div> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="js"><span class="error">#</span> style line comment -scripting mode
<span class="error">#</span> prints hello

print(<span class="string"><span class="delimiter">'</span><span class="content">hello</span><span class="delimiter">'</span></span>);</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_shebang">1.2. Shebang</h3> 
      <div class="paragraph"> 
       <p>Nashorn supports shebang scripting. So, instead of calling your JavaScript file like the traditional way:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="title">
        test.js
       </div> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="js">print(<span class="string"><span class="delimiter">'</span><span class="content">hello</span><span class="delimiter">'</span></span>);</code></pre> 
       </div> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="bash">$ jjs test.js</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Just write your JavaScript file like the following with a <em>shebang</em> at first line:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="title">
        test.js
       </div> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="js"><span class="error">#</span>!<span class="regexp"><span class="delimiter">/</span><span class="content">usr</span><span class="delimiter">/</span></span>bin/jjs
print(<span class="string"><span class="delimiter">'</span><span class="content">hello</span><span class="delimiter">'</span></span>);</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>make it executable and call it from the command line, like any other shell script:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="bash">$ chmod 755 test.js
$ ./test.js</code></pre> 
       </div> 
      </div> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> You’ll need to have a link to <code>jjs</code> as mentioned at the beginning of this chapter.<br> Scripting mode is automatically enabled when running shebang Nashorn scripts. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="_nashorn_javascript_engine_from_within_java">2. Nashorn JavaScript Engine from within Java</h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>The Nashorn Engine is a JavaScript implementation of the <a href="https://www.jcp.org/en/jsr/detail?id=223">JSR-223</a> <em>(Scripting for the Java Platform)</em>. It implements the <code>javax.script</code> API. So, for being able to evaluate JavaScript code from Java, we just create a new Nashorn <code>javax.script.ScriptEngine</code>.</p> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="java">ScriptEngine engine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string"><span class="delimiter">"</span><span class="content">nashorn</span><span class="delimiter">"</span></span>);<i class="conum" data-value="1"></i><b>(1)</b>
engine.eval(<span class="string"><span class="delimiter">"</span><span class="content">print('Hello World');</span><span class="delimiter">"</span></span>);</code></pre> 
      </div> 
     </div> 
     <div class="colist arabic"> 
      <table> 
       <tbody>
        <tr> 
         <td><i class="conum" data-value="1"></i><b>1</b></td> 
         <td>The Nashorn engine names you can use here are <em>"nashorn"</em>, <em>"javascript"</em> and <em>"js"</em>.</td> 
        </tr> 
       </tbody>
      </table> 
     </div> 
     <div class="paragraph"> 
      <p>As seen above, JavaScript code can be evaluated directly by passing it as a string to the <code>eval()</code> method of the engine object. Alternatively you can parse (and evaluate) a <code>.js</code>-file by passing a <code>FileReader</code> object pointing to your file:</p> 
     </div> 
     <div class="listingblock"> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="java">ScriptEngine engine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string"><span class="delimiter">"</span><span class="content">nashorn</span><span class="delimiter">"</span></span>);
engine.eval(<span class="keyword">new</span> <span class="predefined-type">FileReader</span>(<span class="string"><span class="delimiter">"</span><span class="content">test.js</span><span class="delimiter">"</span></span>));</code></pre> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_invoking_javascript_functions_from_java">2.1. Invoking JavaScript functions from Java</h3> 
      <div class="paragraph"> 
       <p>It’s not only possible to run single JS statements or evaluate complete JS files, but it’s also possible to invoke JavaScript functions from within Java code. Additionally you can pass Java objects as function arguments and return data back from the function to the calling Java method.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Let’s assume our JavaScript file:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="title">
        example.js
       </div> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> <span class="function">sayHello</span> = <span class="keyword">function</span>(name) {
  print(<span class="string"><span class="delimiter">'</span><span class="content">Hello, </span><span class="delimiter">'</span></span> + name + <span class="string"><span class="delimiter">'</span><span class="content">!</span><span class="delimiter">'</span></span>);
  <span class="keyword">return</span> <span class="string"><span class="delimiter">'</span><span class="content">hello from javascript</span><span class="delimiter">'</span></span>;
};</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>To be able to call our defined <code>sayHello</code> function, we first have to cast the <code>engine</code> object to the <code>Invocable</code> interface, which is implemented by the <code>NashornScriptEngine</code> implementation. The <code>Invocable</code> interface provides the <code>invokeFunktion()</code> method, which allows to call JavaScript functions for a given name and pass arguments:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java">ScriptEngine engine = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string"><span class="delimiter">"</span><span class="content">nashorn</span><span class="delimiter">"</span></span>);
engine.eval(<span class="keyword">new</span> <span class="predefined-type">FileReader</span>(<span class="string"><span class="delimiter">"</span><span class="content">example.js</span><span class="delimiter">"</span></span>));

<span class="comment">// cast the script engine to an invocable instance</span>
Invocable invocable = (Invocable) engine;

<span class="predefined-type">Object</span> result = invocable.invokeFunction(<span class="string"><span class="delimiter">"</span><span class="content">sayHello</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">John Doe</span><span class="delimiter">"</span></span>);
<span class="predefined-type">System</span>.out.println(result);
<span class="predefined-type">System</span>.out.println(result.getClass());

<span class="comment">// Hello, John Doe!</span>
<span class="comment">// hello from javascript</span>
<span class="comment">// class java.lang.String</span></code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Our code prints three lines to the console: The JavaScript function <code>print()</code> pipes the result to <code>System.out</code>, afterwards, the two Java <code>System.out.println()</code> methods are evaluated.</p> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_invoking_java_methods_from_javascript">2.2. Invoking Java methods from JavaScript</h3> 
      <div class="paragraph"> 
       <p>Calling or invoking Java methods from JavaScript code is just as easy as vice-versa. Let’s assume a Java class with two methods:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="title">
        MyJavaClass.java
       </div> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">package</span> <span class="namespace">my.package</span>;

<span class="directive">public</span> <span class="type">class</span> <span class="class">MyJavaClass</span> {

    <span class="directive">public</span> <span class="directive">static</span> <span class="predefined-type">String</span> sayHello(<span class="predefined-type">String</span> name) {
        <span class="keyword">return</span> <span class="predefined-type">String</span>.format(<span class="string"><span class="delimiter">"</span><span class="content">Hello %s from Java!</span><span class="delimiter">"</span></span>, name);
    }

    <span class="directive">public</span> <span class="type">int</span> add(<span class="type">int</span> a, <span class="type">int</span> b) {
        <span class="keyword">return</span> a + b;
    }

}</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Our Java class can be referenced from JavaScript via the <code>Java.type</code> API extension. This is similar to the <code>import</code> statement in Java. After referencing our Java class, we can call the static method and print the result to <code>System.out</code>. Since the <code>sayHello()</code> method is static, we don’t have to create an instance as we have to do for calling the <code>add()</code> method.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> MyJavaClass = Java.type(<span class="string"><span class="delimiter">'</span><span class="content">my.package.MyJavaClass</span><span class="delimiter">'</span></span>);

<span class="comment">// call the static method</span>
<span class="keyword">var</span> greetingResult = MyJavaClass.sayHello(<span class="string"><span class="delimiter">'</span><span class="content">John Doe</span><span class="delimiter">'</span></span>);
print(greetingResult);

<span class="comment">// create a new intance of MyJavaClass</span>
<span class="keyword">var</span> myClass = <span class="keyword">new</span> MyJavaClass();
<span class="keyword">var</span> calcResult = myClass.add(<span class="integer">1</span>, <span class="integer">2</span>);
print(calcResult);

<span class="comment">// Hello John Doe from Java!</span>
<span class="comment">// 3</span></code></pre> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="_nashorn_type_conversions">2.2.1. Nashorn type conversions</h4> 
       <div class="paragraph"> 
        <p>With this little example, you can find out how Nashorn handles type conversions between Java and JavaScript, when calling Java methods from JavaScript.</p> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> printType(<span class="predefined-type">Object</span> object) {
    <span class="predefined-type">System</span>.out.println(object.getClass());
}</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>Now, call this static method with different JavaScript types:</p> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="javascript">MyJavaClass.printType(<span class="string"><span class="delimiter">'</span><span class="content">Hello</span><span class="delimiter">'</span></span>);
<span class="comment">// class java.lang.String</span>

MyJavaClass.printType(<span class="integer">123</span>);
<span class="comment">// class java.lang.Integer</span>

MyJavaClass.printType(<span class="float">12.34</span>);
<span class="comment">// class java.lang.Double</span>

MyJavaClass.printType(<span class="predefined-constant">true</span>);
<span class="comment">// class java.lang.Boolean</span>

MyJavaClass.printType(<span class="keyword">new</span> Number(<span class="integer">123</span>));
<span class="comment">// class jdk.nashorn.internal.objects.NativeNumber</span>
<span class="comment">// class jdk.nashorn.api.scripting.ScriptObjectMirror</span>

MyJavaClass.printType(<span class="keyword">new</span> Date());
<span class="comment">// class jdk.nashorn.internal.objects.NativeDate</span>
<span class="comment">// class jdk.nashorn.api.scripting.ScriptObjectMirror</span>

MyJavaClass.printType(<span class="keyword">new</span> RegExp());
<span class="comment">// class jdk.nashorn.internal.objects.NativeRegExp</span>
<span class="comment">// class jdk.nashorn.api.scripting.ScriptObjectMirror</span>

MyJavaClass.printType({<span class="key">foo</span>: <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>});
<span class="comment">// class jdk.nashorn.internal.scripts.J04</span>
<span class="comment">// class jdk.nashorn.api.scripting.ScriptObjectMirror</span></code></pre> 
        </div> 
       </div> 
       <div class="ulist"> 
        <ul> 
         <li> <p>Primitive JavaScript types are converted to the appropriate Java wrapper class.</p> </li> 
         <li> <p>Native JavaScript objects are represented by internal adapter classes, respectively to <code>ScriptObjectMirror</code>.</p> </li> 
        </ul> 
       </div> 
       <div class="admonitionblock important"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-important" title="Important"></i> </td> 
           <td class="content"> Don’t rely on programming against / using internal classes in <code>jdk.nashorn.internal</code> as they are likely subject to change! </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_scriptobjectmirror">2.3. ScriptObjectMirror</h3> 
      <div class="paragraph"> 
       <p>The <code>ScriptObjectMirror</code> is part of the <code>jdk.nashorn.api</code> and is intended to be used in client-code instead of the internal classes. This mirror object is a representation of the underlying JavaScript object and provides access to it and its methods and properties. The <code>ScriptObjectMirror</code> implements the <code>Map</code> interface.</p> 
      </div> 
      <div class="paragraph"> 
       <p>We edit our last method slightly to</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> printObjectMirror(ScriptObjectMirror mirror) {
    <span class="predefined-type">System</span>.out.println(mirror.getClassName() + <span class="string"><span class="delimiter">"</span><span class="content">: </span><span class="delimiter">"</span></span> + <span class="predefined-type">Arrays</span>.toString(mirror.getOwnKeys(<span class="predefined-constant">true</span>)));
}</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>When we call this method now with our last four JS function calls (number, date, regexp and object literal):</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript">MyJavaClass.printType(<span class="keyword">new</span> Number(<span class="integer">123</span>));
MyJavaClass.printType(<span class="keyword">new</span> Date());
MyJavaClass.printType(<span class="keyword">new</span> RegExp());
MyJavaClass.printType({
    <span class="key">foo</span>: <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>,
    <span class="key">bar</span>: <span class="string"><span class="delimiter">'</span><span class="content">foo</span><span class="delimiter">'</span></span>
});</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>we now get this result:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code>Number: []
Date: []
RegExp: [lastIndex, source, global, ignoreCase, multiline]
Object: [foo, bar]</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Also, we can call member functions on JavaScript objects from Java.<br> Let’s assume a JavaScript type <code>Person</code> with some properties and a function <code>getFullName()</code>.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">function</span> <span class="function">Person</span>(firstName, lastName) {
  <span class="local-variable">this</span>.firstName = firstName;
  <span class="local-variable">this</span>.lastName = lastName;
  <span class="local-variable">this</span>.<span class="function">getFullName</span> = <span class="keyword">function</span>() {
    <span class="keyword">return</span> <span class="local-variable">this</span>.firstName + <span class="string"><span class="delimiter">'</span><span class="content"> </span><span class="delimiter">'</span></span> + <span class="local-variable">this</span>.lastName;
  }
}</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>The function <code>getFullName()</code> can be called on <code>ScriptObjectMirror</code> via <code>callMember()</code>:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> getFullName(ScriptObjectMirror person) {
    <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">"</span><span class="content">Full name is: </span><span class="delimiter">"</span></span> + person.callMember(<span class="string"><span class="delimiter">"</span><span class="content">getFullName</span><span class="delimiter">"</span></span>));
}</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Now, our JavaScript code looks like this:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string"><span class="delimiter">'</span><span class="content">John</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">Doe</span><span class="delimiter">'</span></span>);
MyJavaClass.getFullName(person);

<span class="comment">// Full name is: John Doe</span></code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_options_for_the_script_engine">2.4. Options for the script engine</h3> 
      <div class="paragraph"> 
       <p>Nashorn script engine customization can be done by using <code>nashorn.args</code> system properties. Just specify the options you want with <code><strong>-Dnashorn.args=…?</strong></code> E.g. enabling the scripting mode:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="bash">$ java -Dnashorn.args=-scripting MyJavaClass</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>You can also create a Nashorn engine by passing customization options programmatically. In this case, you’ll have to instantiate <code>NashornScriptEngineFactory</code> directly:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java">NashornScriptEngineFactory factory = <span class="keyword">new</span> NashornScriptEngineFactory();
ScriptEngine engine = factory.getScriptEngine(<span class="keyword">new</span> <span class="predefined-type">String</span><span class="type">[]</span> { <span class="string"><span class="delimiter">"</span><span class="content">-scripting</span><span class="delimiter">"</span></span> });</code></pre> 
       </div> 
      </div> 
      <div class="admonitionblock tip"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> 
          <td class="content"> Available options can be determined from the <a href="#_nashorn_at_the_command_line_interface_cli">command line</a> when calling <code>jjs -help</code>. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_bindings_context">2.5. Bindings / Context</h3> 
      <div class="paragraph"> 
       <p>A <code>ScriptContext</code> contains one or more bindings, each associated to a scope. By default, there are two scopes:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><code>ENGINE_SCOPE</code></p> </li> 
        <li> <p><code>GLOBAL_SCOPE</code></p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>When a Nashorn engine is created, it creates a default context:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java">ScriptContext defaultContext = engine.getContext();</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>The default context’s <code>ENGINE_SCOPE</code> is the scope where ECMAScript "global" objects and functions (<code>Object</code>, <code>Function</code>, <code>Math</code>, <code>RegExp</code>, <code>parseInt</code>, etc.) are stored. The <code>GLOBAL_SCOPE</code> is shared between all engines created by the same <code>ScriptEngineManager</code>.</p> 
      </div> 
      <div class="paragraph"> 
       <p>You can store variables in the context (use of the scope is optional, default is <code>ENGINE_SCOPE</code>):</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript">ScriptContext context = engine.getContext();
<span class="comment">// stores an object under the key `myKey` in the (engine scoped) context</span>
context.setAttribute(<span class="string"><span class="delimiter">"</span><span class="content">myKey</span><span class="delimiter">"</span></span>, object, ScriptContext.ENGINE_SCOPE);
<span class="comment">// retrieves the object with key `myKey` from (engine scoped) context</span>
context.getAttribute(<span class="string"><span class="delimiter">"</span><span class="content">myKey</span><span class="delimiter">"</span></span>, ScriptContext.ENGINE_SCOPE);

Bindings b = context.getBindings(ScriptContext.ENGINE_SCOPE);
b.get(<span class="string"><span class="delimiter">"</span><span class="content">Object</span><span class="delimiter">"</span></span>);    <span class="comment">// gets ECMAScript "Object" constructor</span>
b.get(<span class="string"><span class="delimiter">"</span><span class="content">undefined</span><span class="delimiter">"</span></span>); <span class="comment">// ECMAScript 'undefined' value</span></code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>If a variable is not found in <code>ENGINE_SCOPE</code>, <code>GLOBAL_SCOPE</code> bindings are being searched.</p> 
      </div> 
      <div class="admonitionblock warning"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> 
          <td class="content"> There’s a confusion due to ECMAScript "global" properties being in <code>ENGINE_SCOPE</code> (top-level <em>"this"</em> in script) and not in <code>GLOBAL_SCOPE</code>. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <hr> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> More on ScriptContexts and Bindings: <a href="https://wiki.openjdk.java.net/display/Nashorn/Nashorn+jsr223+engine+notes" class="bare">https://wiki.openjdk.java.net/display/Nashorn/Nashorn+jsr223+engine+notes</a> </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="_api_and_language_extensions">3. API and Language Extensions</h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>Nashorn comes along with quite a few language and API extensions, in addition to the ECMAScript standard. Most of the API extensions exist due to backward compatibility to Rhino.</p> 
     </div> 
     <div class="paragraph"> 
      <p>Let’s have a look at some of the IMHO most useful and interesting ones.</p> 
     </div> 
     <div class="sect2"> 
      <h3 id="_print_function">3.1. Print Function</h3> 
      <div class="paragraph"> 
       <p>Nashorn comes with a handy <code>print</code> function, which prints its arguments (after converting it to a string) to standard out (<code>stdout</code>):</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript">print(<span class="string"><span class="delimiter">"</span><span class="content">Hello</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">World</span><span class="delimiter">"</span></span>);
<span class="comment">// Hello World</span></code></pre> 
       </div> 
      </div> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> <code>echo()</code> is an equivalent to the <code>print()</code> function. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="admonitionblock warning"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> 
          <td class="content"> Nashorn does not have a <code>console</code> object, where browsers do logging! </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_reading_stdin">3.2. Reading Stdin</h3> 
      <div class="paragraph"> 
       <p>If you want to read from the <code>stdin</code>, there’s the <code>readLine()</code> function:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript">jjs&gt; <span class="keyword">var</span> name = readLine(<span class="string"><span class="delimiter">"</span><span class="content">What is your name? </span><span class="delimiter">"</span></span>)
What is your name? John
jjs&gt; print(<span class="string"><span class="delimiter">"</span><span class="content">Hello, ${name}!</span><span class="delimiter">"</span></span>)
Hello, John!</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_reading_files">3.3. Reading Files</h3> 
      <div class="paragraph"> 
       <p>If <code>stdin</code> is just not enough, you can use <code>readFully()</code> to read complete file contents into a variable:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> content = readFully(<span class="string"><span class="delimiter">'</span><span class="content">text.txt</span><span class="delimiter">'</span></span>);</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_string_interpolation">3.4. String Interpolation</h3> 
      <div class="paragraph"> 
       <p>You can specify expressions inside string literals with the <code>${expression}</code> syntax. The string value is computed by substituting the name of the <code>${expr}</code> expression with the value of the corresponding variable.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> name = <span class="string"><span class="delimiter">"</span><span class="content">World</span><span class="delimiter">"</span></span>;
<span class="keyword">var</span> str = <span class="string"><span class="delimiter">"</span><span class="content">Hello, ${name}!</span><span class="delimiter">"</span></span>;
print(str);
<span class="comment">// Hello, World!</span></code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_back_quote_exec_expressions">3.5. Back-quote exec expressions</h3> 
      <div class="paragraph"> 
       <p>Nashorn supports Unix shell like back quote strings. Back quoted strings are evaluated by executing the programs mentioned in the string and returning value produced by the 'exec'-ed program.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> files = <span class="error">`</span>ls -l<span class="error">`</span>;  <span class="comment">// get file listing as a string</span>
<span class="keyword">var</span> lines = files.split(<span class="string"><span class="delimiter">"</span><span class="char">\n</span><span class="delimiter">"</span></span>);
<span class="keyword">for</span> (<span class="keyword">var</span> l <span class="keyword">in</span> lines) {
    <span class="keyword">var</span> line = lines[l];
    print(line);
}</code></pre> 
       </div> 
      </div> 
      <div class="admonitionblock caution"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-caution" title="Caution"></i> </td> 
          <td class="content"> Don’t mix this up with the new back quote string templates in ES6, they are similar to String interpolation mentioned above! </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_java_beans">3.6. Java Beans</h3> 
      <div class="paragraph"> 
       <p>With Nashorn, you get direct access to the properties of a Java bean, no need to use getters and setters any more:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> Date = Java.type(<span class="string"><span class="delimiter">'</span><span class="content">java.util.Date</span><span class="delimiter">'</span></span>);
<span class="keyword">var</span> date = <span class="keyword">new</span> Date();
date.year += <span class="integer">1900</span>; <span class="comment">// -&gt; no setter!</span>
print(date.year);  <span class="comment">// -&gt; no getter!</span>
<span class="comment">// 2016</span></code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_function_literals">3.7. Function Literals</h3> 
      <div class="paragraph"> 
       <p>For simple, one-line functions, we don’t necessarily have to use curly braces (and can also omit the <code>return</code> keyword):</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">function</span> <span class="function">add</span>(a, b) a + b;

print(add(<span class="integer">1</span>, <span class="integer">2</span>));  <span class="comment">// 3</span></code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_binding_properties">3.8. Binding Properties</h3> 
      <div class="paragraph"> 
       <p>You can bind properties from one object to another object:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> o1 = {};
<span class="keyword">var</span> o2 = { <span class="key">foo</span>: <span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span> };

Object.bindProperties(o1, o2);

print(o1.foo);    <span class="comment">// bar</span>
o1.foo = <span class="string"><span class="delimiter">'</span><span class="content">John</span><span class="delimiter">'</span></span>;
print(o2.foo);    <span class="comment">// John</span></code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_trimming_strings">3.9. Trimming Strings</h3> 
      <div class="paragraph"> 
       <p>Additionally to <code>.trim()</code>, you can just trim your string object on the left or the right:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript">print(<span class="string"><span class="delimiter">"</span><span class="content"> bar</span><span class="delimiter">"</span></span>.trimLeft());           <span class="comment">// bar</span>
print(<span class="string"><span class="delimiter">"</span><span class="content">foo </span><span class="delimiter">"</span></span>.trimRight() + <span class="string"><span class="delimiter">"</span><span class="content">bar</span><span class="delimiter">"</span></span>);  <span class="comment">// foobar</span></code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_whereis">3.10. Whereis</h3> 
      <div class="paragraph"> 
       <p>In case you get lost while programming:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript">print(__FILE__, __LINE__, __DIR__);</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_import_scopes">3.11. Import Scopes</h3> 
      <div class="paragraph"> 
       <p>Sometimes it’s useful to import many Java packages at once. We can use the class <code>JavaImporter</code> to be used in conjunction with the <code>with</code> statement. All class files from the imported packages are accessible within the local scope of the <code>with</code> statement:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> imports = <span class="keyword">new</span> JavaImporter(java.io, java.lang);
<span class="keyword">with</span> (imports) {
    <span class="keyword">var</span> file = <span class="keyword">new</span> File(__FILE__);
    System.out.println(file.getAbsolutePath());  <span class="comment">// /path/to/my/script.js</span>
}</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_packages">3.12. Packages</h3> 
      <div class="paragraph"> 
       <p>Packages and related objects are there to support Java package, class access from script. The properties of the <code>Packages</code> variable are all the top-level Java packages, such as <code>java</code>, <code>javax</code> etc.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> Vector = Packages.java.util.Vector;

<span class="comment">// but short-cuts defined for important package prefixes like</span>
<span class="comment">// Packages.java, Packages.javax, Packages.com</span>
<span class="comment">// Packages.edu, Packages.javafx, Packages.org</span>

<span class="keyword">var</span> JFrame = javax.swing.JFrame;  <span class="comment">// javax == Packages.javax</span>
<span class="keyword">var</span> List = java.util.List;        <span class="comment">// java == Packages.java</span></code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Let’s test it in <code>jjs</code>:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="bash">jjs&gt; Packages.java
[JavaPackage java]
jjs&gt; java
[JavaPackage java]
jjs&gt; java.util.Vector
[JavaClass java.util.Vector]
jjs&gt; javax
[JavaPackage javax]
jjs&gt; javax.swing.JFrame
[JavaClass javax.swing.JFrame]</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_typed_arrays">3.13. Typed Arrays</h3> 
      <div class="paragraph"> 
       <p>Native JavaScript arrays are untyped. Nashorn implements typed arrays as specified at <a href="https://www.khronos.org/registry/typedarray/specs/latest/" class="bare">https://www.khronos.org/registry/typedarray/specs/latest/</a>.</p> 
      </div> 
      <div class="paragraph"> 
       <p>For example, create an array of `int`s:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> IntArray = Java.type(<span class="string"><span class="delimiter">'</span><span class="content">int[]</span><span class="delimiter">'</span></span>);

<span class="keyword">var</span> array = <span class="keyword">new</span> IntArray(<span class="integer">3</span>);
array[<span class="integer">0</span>] = <span class="integer">3</span>;
array[<span class="integer">1</span>] = <span class="integer">2</span>;
array[<span class="integer">2</span>] = <span class="integer">1</span>;

<span class="keyword">try</span> {
    array[<span class="integer">3</span>] = <span class="integer">0</span>;  <span class="comment">// would be possible in pure JS</span>
} <span class="keyword">catch</span> (e) {
    print(e.message);  <span class="comment">// Array index out of range: 3</span>
}

array[<span class="integer">0</span>] = <span class="string"><span class="delimiter">'</span><span class="content">42</span><span class="delimiter">'</span></span>;
print(array[<span class="integer">0</span>]);  <span class="comment">// 42</span>

array[<span class="integer">0</span>] = <span class="string"><span class="delimiter">'</span><span class="content">some wrong type</span><span class="delimiter">'</span></span>;
print(array[<span class="integer">0</span>]);  <span class="comment">// 0</span>

array[<span class="integer">0</span>] = <span class="string"><span class="delimiter">'</span><span class="content">3.14</span><span class="delimiter">'</span></span>;
print(array[<span class="integer">0</span>]);  <span class="comment">// 3</span></code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Our <code>int[]</code> array behaves like a real Java <code>int</code> array. Additionally, Nashorn performs implicit type conversion when trying to add some non-integer values. Strings will automatically be converted to <code>int</code>, if possible.</p> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_collections_and_for_each">3.14. Collections and For-Each</h3> 
      <div class="paragraph"> 
       <p>Array handling in JavaScript is sometimes annoying. Let’s use Java collections instead!<br> <em>(BTW: this has become much better with ES6)</em></p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> ArrayList = Java.type(<span class="string"><span class="delimiter">'</span><span class="content">java.util.ArrayList</span><span class="delimiter">'</span></span>);
<span class="keyword">var</span> myList = <span class="keyword">new</span> ArrayList();
myList.add(<span class="string"><span class="delimiter">'</span><span class="content">John</span><span class="delimiter">'</span></span>);
myList.add(<span class="string"><span class="delimiter">'</span><span class="content">Jack</span><span class="delimiter">'</span></span>);
myList.add(<span class="string"><span class="delimiter">'</span><span class="content">Joe</span><span class="delimiter">'</span></span>);

<span class="keyword">for</span> each (<span class="keyword">var</span> e <span class="keyword">in</span> list) print(e);  <span class="comment">// John, Jack, Joe</span></code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Nashorn’s <code>for each</code> statement works like the <code>foreach</code> in Java.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Or, let’s use a <code>HashMap</code>:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> map = <span class="keyword">new</span> java.util.HashMap();
map.put(<span class="string"><span class="delimiter">'</span><span class="content">foo</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">red</span><span class="delimiter">'</span></span>);
map.put(<span class="string"><span class="delimiter">'</span><span class="content">bar</span><span class="delimiter">'</span></span>, <span class="string"><span class="delimiter">'</span><span class="content">green</span><span class="delimiter">'</span></span>);

<span class="keyword">for</span> each (<span class="keyword">var</span> e <span class="keyword">in</span> map.keySet()) print(e);  <span class="comment">// foo, bar</span>

<span class="keyword">for</span> each (<span class="keyword">var</span> e <span class="keyword">in</span> map.values()) print(e);  <span class="comment">// red, green</span></code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_convert_arrays">3.15. Convert Arrays</h3> 
      <div class="paragraph"> 
       <p>Some packages like <code>java.util</code> (and <code>java.lang</code>) can be accessed directly without utilizing <code>Java.type</code> or <code>JavaImporter</code>:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> list = <span class="keyword">new</span> java.util.ArrayList();
list.add(<span class="string"><span class="delimiter">'</span><span class="content">John</span><span class="delimiter">'</span></span>);
list.add(<span class="string"><span class="delimiter">'</span><span class="content">Jack</span><span class="delimiter">'</span></span>);
list.add(<span class="string"><span class="delimiter">'</span><span class="content">Joe</span><span class="delimiter">'</span></span>);</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>This code converts the Java list to a native JavaScript array:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> jsArray = Java.from(list);
print(jsArray);                                  <span class="comment">// John,Jack,Joe</span>
print(Object.prototype.toString.call(jsArray));  <span class="comment">// [object Array]</span></code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>And vice versa:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> javaArray = Java.to([<span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, <span class="integer">5</span>, <span class="integer">8</span>, <span class="integer">13</span>], <span class="string"><span class="delimiter">"</span><span class="content">int[]</span><span class="delimiter">"</span></span>);</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_lambdas_and_streams">3.16. Lambdas and Streams</h3> 
      <div class="paragraph"> 
       <p>As Lambdas and Streams are available since Java 8, it’s also possible to work with them in Nashorn! \o/</p> 
      </div> 
      <div class="paragraph"> 
       <p>Although ECMAScript 5.1 lacks the <em>compact arrow syntax</em> from the Java 8 lambda expressions, we can use function literals where ever lambda expressions are accepted.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> list = <span class="keyword">new</span> java.util.ArrayList();
list.add(<span class="string"><span class="delimiter">'</span><span class="content">a1</span><span class="delimiter">'</span></span>);
list.add(<span class="string"><span class="delimiter">'</span><span class="content">b1</span><span class="delimiter">'</span></span>);
list.add(<span class="string"><span class="delimiter">'</span><span class="content">c1</span><span class="delimiter">'</span></span>);
list.add(<span class="string"><span class="delimiter">'</span><span class="content">a3</span><span class="delimiter">'</span></span>);
list.add(<span class="string"><span class="delimiter">'</span><span class="content">b3</span><span class="delimiter">'</span></span>);
list.add(<span class="string"><span class="delimiter">'</span><span class="content">c3</span><span class="delimiter">'</span></span>);
list.add(<span class="string"><span class="delimiter">'</span><span class="content">a2</span><span class="delimiter">'</span></span>);
list.add(<span class="string"><span class="delimiter">'</span><span class="content">b2</span><span class="delimiter">'</span></span>);
list.add(<span class="string"><span class="delimiter">'</span><span class="content">c2</span><span class="delimiter">'</span></span>);

list
    .stream()
    .filter(<span class="keyword">function</span>(entry) {
        <span class="keyword">return</span> entry.startsWith(<span class="string"><span class="delimiter">'</span><span class="content">a</span><span class="delimiter">'</span></span>);
    })
    .sorted()
    .forEach(<span class="keyword">function</span>(entry) {
        print(entry);
    });
<span class="comment">// a1, a2, a3</span></code></pre> 
       </div> 
      </div> 
      <div class="admonitionblock tip"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> 
          <td class="content"> Where ever a Java 8 Lambda or SAM (single-abstract-method) type is required, an ECMAScript function can be passed as argument! </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="sect3"> 
       <h4 id="_every_lambda_is_a_javascript_function">3.16.1. Every Lambda is a JavaScript Function</h4> 
       <div class="paragraph"> 
        <p>Any Java object that is an instance of lambda type can be treated like a script function.</p> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> JFunction = Java.type(<span class="string"><span class="delimiter">'</span><span class="content">java.util.function.Function</span><span class="delimiter">'</span></span>)

<span class="keyword">var</span> obj = <span class="keyword">new</span> JFunction() {
   <span class="function">apply</span>: <span class="keyword">function</span>(x) { print(x * x) }
}

print(<span class="keyword">typeof</span> obj); <span class="comment">// prints "function"</span>

<span class="comment">// 'calls' lambda as though it is a function</span>
obj(<span class="integer">23</span>);</code></pre> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_extending_classes">3.17. Extending Classes</h3> 
      <div class="paragraph"> 
       <p>Java types can simply be extended with the <code>Java.extend</code> extension.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> Runnable = Java.type(<span class="string"><span class="delimiter">'</span><span class="content">java.lang.Runnable</span><span class="delimiter">'</span></span>);
<span class="keyword">var</span> Printer = Java.extend(Runnable, {
    <span class="function">run</span>: <span class="keyword">function</span>() {
        print(<span class="string"><span class="delimiter">'</span><span class="content">printed from a separate thread</span><span class="delimiter">'</span></span>);
    }
});

<span class="keyword">var</span> Thread = Java.type(<span class="string"><span class="delimiter">'</span><span class="content">java.lang.Thread</span><span class="delimiter">'</span></span>);
<span class="keyword">new</span> Thread(<span class="keyword">new</span> Printer()).start();

<span class="keyword">new</span> Thread(<span class="keyword">function</span>() {
    print(<span class="string"><span class="delimiter">'</span><span class="content">printed from another thread</span><span class="delimiter">'</span></span>);
}).start();

<span class="comment">// printed from a separate thread</span>
<span class="comment">// printed from another thread</span></code></pre> 
       </div> 
      </div> 
      <div class="admonitionblock tip"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> 
          <td class="content"> As you can see, even multi-threaded code is possible in Nashorn. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_calling_super">3.18. Calling Super</h3> 
      <div class="paragraph"> 
       <p>Accessing overridden members in JavaScript is traditionally awkward because Java’s <code>super</code> keyword doesn’t exist in ECMAScript. Luckily Nashorn comes to the rescue.</p> 
      </div> 
      <div class="paragraph"> 
       <p>First we define a super type in Java code:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java"><span class="type">class</span> <span class="class">SuperRunner</span> <span class="directive">implements</span> <span class="predefined-type">Runnable</span> {
    <span class="annotation">@Override</span>
    <span class="directive">public</span> <span class="type">void</span> run() {
        <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">"</span><span class="content">super run</span><span class="delimiter">"</span></span>);
    }
}</code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>Next we override <code>SuperRunner</code> from JavaScript. Pay attention to the extended Nashorn syntax when creating a new <code>Runner</code> instance: The syntax of overriding members is borrowed from Java’s anonymous objects.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> SuperRunner = Java.type(<span class="string"><span class="delimiter">'</span><span class="content">my.package.SuperRunner</span><span class="delimiter">'</span></span>);
<span class="keyword">var</span> Runner = Java.extend(SuperRunner);

<span class="keyword">var</span> runner = <span class="keyword">new</span> Runner() {
    <span class="function">run</span>: <span class="keyword">function</span>() {
        Java.<span class="reserved">super</span>(runner).run();
        print(<span class="string"><span class="delimiter">'</span><span class="content">local run</span><span class="delimiter">'</span></span>);
    }
}
runner.run();

<span class="comment">// super run</span>
<span class="comment">// local run</span></code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>We call the overridden method <code>SuperRunner.run()</code> by utilizing the <code>Java.super</code> extension.</p> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_loading_scripts">3.19. Loading Scripts</h3> 
      <div class="paragraph"> 
       <p>Loading and evaluating additional script files from Nashorn is quite easy with the <code>load</code> function. We can load local and external files.</p> 
      </div> 
      <div class="paragraph"> 
       <p>In our example, we load the <a href="http://momentjs.com/">moment.js</a> library to calculate some dates and times:</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript">load(<span class="string"><span class="delimiter">'</span><span class="content">https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.1/moment.min.js</span><span class="delimiter">'</span></span>);

<span class="keyword">var</span> now = <span class="keyword">new</span> moment();
print(now);
<span class="comment">// Thu Dec 31 2015 23:59:59 GMT+0100</span></code></pre> 
       </div> 
      </div> 
      <div class="paragraph"> 
       <p>The (external) script will be evaluated in the same context, so we can access the <code>moment</code> function directly.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="_load_in_new_global_context">3.19.1. Load in new Global Context</h4> 
       <div class="paragraph"> 
        <p>Loading external files can break your own code, when it is using same variable names as your code! To avoid this, files can be loaded into a new global scope:</p> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="javascript">loadWithNewGlobal(<span class="string"><span class="delimiter">'</span><span class="content">script.js</span><span class="delimiter">'</span></span>);</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>Of course, the script is then only available in the Nashorn global context (not current engine context).</p> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_error_object">3.20. Error Object</h3> 
      <div class="paragraph"> 
       <p>Nashorn extends the ECMAScript standard <code>Error</code> object with a few more interesting properties.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">function</span> <span class="function">func</span>() {
    <span class="keyword">throw</span> <span class="keyword">new</span> Error();
}

<span class="keyword">function</span> <span class="function">f</span>() {
    func();
}

<span class="keyword">try</span> {
    f();
} <span class="keyword">catch</span> (e) {
    print(e.stack);
    print(e.lineNumber);
    print(e.columnNumber);
    print(e.fileName);

    <span class="comment">// of course, also this is possible</span>
    e.printStackTrace();
}</code></pre> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_scripting_mode_extension_objects">3.21. Scripting Mode Extension Objects</h3> 
      <div class="paragraph"> 
       <p>There are some global objects defined in Nashorn, when <code>-scripting</code> mode is enabled.</p> 
      </div> 
      <div class="paragraph"> 
       <p>Most of them are self-explaining, so I provide just some source code examples:</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="__arg">3.21.1. $ARG</h4> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="bash">$ jjs -scripting -- arg1 arg2 arg3
jjs&gt; $ARG
arg1,arg2,arg3
jjs&gt; $ARG[1]
arg2</code></pre> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="_arguments">arguments</h5> 
        <div class="listingblock"> 
         <div class="content"> 
          <pre class="CodeRay highlight"><code data-lang="bash">$ jjs -scripting -- arg1 arg2 arg3
jjs&gt; arguments
arg1,arg2,arg3
jjs&gt; arguments[1]
arg2</code></pre> 
         </div> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="__env">3.21.2. $ENV</h4> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="javascript"><span class="comment">// print $JAVA_HOME and $PATH from the OS shell</span>
print(<span class="predefined">$ENV</span>[<span class="string"><span class="delimiter">"</span><span class="content">JAVA_HOME</span><span class="delimiter">"</span></span>])
print(<span class="predefined">$ENV</span>[<span class="string"><span class="delimiter">"</span><span class="content">PATH</span><span class="delimiter">"</span></span>])
print(<span class="predefined">$ENV</span>.JAVA_HOME)
print(<span class="predefined">$ENV</span>.PATH)</code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="__exec">3.21.3. $EXEC</h4> 
       <div class="paragraph"> 
        <p>Launch processes to run commands.</p> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="bash">jjs&gt; $EXEC("ls -l")
total 0
drwxr-xr-x+ 1 johndoe staff 4096 Dec 31 12:34 dir
-rwxrw-r--  1 johndoe staff  168 Dec 31 13:37 file.txt

jjs&gt; $EXEC("cat", "Send this to stdout")
Send this to stdout</code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="__out">3.21.4. $OUT</h4> 
       <div class="paragraph"> 
        <p>Store the latest standard output (<code>stdout</code>) of the process spawned by <code>$EXEC</code>.</p> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="javascript"><span class="comment">// use curl to download JSON weather data from the net</span>
<span class="keyword">var</span> str = <span class="error">`</span>curl http:<span class="comment">//api.openweathermap.org/data/2.5/weather?q=Hamburg,de&amp;units=metric&amp;appid=44db6a862fba0b067b1930da0d769e98`;</span>

<span class="comment">// parse JSON and print the current temperature</span>
<span class="keyword">var</span> weather = JSON.parse(<span class="predefined">$OUT</span>);
print(weather.main.temp);</code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="__err">3.21.5. $ERR</h4> 
       <div class="paragraph"> 
        <p>Store the latest standard error (<code>stderr</code>) of the process spawned by <code>$EXEC</code>.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="__exit">3.21.6. $EXIT</h4> 
       <div class="paragraph"> 
        <p>Store the exit code of the process spawned by <code>$EXEC</code>.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="__options">3.21.7. $OPTIONS</h4> 
       <div class="paragraph"> 
        <p>This property exposes command line options, which are passed (explicitly or implicitly) to Nashorn "command line".</p> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="javascript">print(<span class="string"><span class="delimiter">"</span><span class="content">-scripting = </span><span class="delimiter">"</span></span> + <span class="predefined">$OPTIONS</span>._scripting);         <span class="comment">// -scripting = true</span>
print(<span class="string"><span class="delimiter">"</span><span class="content">--compile-only = </span><span class="delimiter">"</span></span> + <span class="predefined">$OPTIONS</span>._compile_only);  <span class="comment">// --compile-only = false</span>
print(<span class="string"><span class="delimiter">"</span><span class="content">-timezone = </span><span class="delimiter">"</span></span> + <span class="predefined">$OPTIONS</span>._timezone.ID);        <span class="comment">// -timezone = Europe/Berlin</span></code></pre> 
        </div> 
       </div> 
       <hr> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> An explicit description of all language and API extensions in Nashorn can be found at the <a href="https://wiki.openjdk.java.net/display/Nashorn/Nashorn+extensions">Wiki page</a>. </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="_working_with_package_managers_repositories">4. Working with Package Managers &amp; Repositories</h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>When working with Nashorn, you probably don’t want to develop every function from scratch. There are already libraries which provide the functionalities you need. Just like using a dependency lib from Maven, you can use libraries with Nashorn. And more than that, you can choose out of various repositories and package managers, as there is Java, JavaScript and the perfect symbiosis of both.</p> 
     </div> 
     <div class="sect2"> 
      <h3 id="_npm">4.1. NPM</h3> 
      <div class="paragraph"> 
       <p><strong>N</strong>ode <strong>P</strong>ackage <strong>M</strong>anager - <a href="https://npmjs.org" class="bare">https://npmjs.org</a></p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>NPM is the <em>package manager</em> of choice when working with JavaScript only, no matter if for browser only or also server-side with Node.js.</p> </li> 
        <li> <p>The <em>NPM registry</em> is a public collection of packages of open-source code.</p> </li> 
        <li> <p>NPM is also a <em>command line client</em>.</p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>You can use packages from NPM within Nashorn! <em>But</em>…?</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="_jvm_npm">4.1.1. JVM-NPM</h4> 
       <div class="paragraph"> 
        <p>Most/many packages rely on <a href="http://www.commonjs.org/">CommonJS</a> with the <code>require()</code> syntax (kind like an <code>import</code> in Java). As Nashorn is just a JavaScript engine, it unfortunately doesn’t have support for a package manager and/or a dependency loading mechanism.</p> 
       </div> 
       <div class="paragraph"> 
        <p>Luckily there is a project called <a href="https://github.com/nodyn/jvm-npm">npm-jvm</a> (a <em>NPM compliant CommonJS module loader for the JVM</em>), which brings the <code>require()</code> function to Nashorn. So it becomes possible to use packages which rely on CommonJS in Nashorn and also load other modules by using the <code>require()</code> function into your Nashorn script context.</p> 
       </div> 
       <div class="sect4"> 
        <h5 id="_usage">Usage</h5> 
        <div class="paragraph"> 
         <p>Using the global <code>load()</code> function supplied by Nashorn to load <code>jvm-npm.js</code> into the global execution context. Then it’s possible to load any module with <code>require()</code>:</p> 
        </div> 
        <div class="listingblock"> 
         <div class="content"> 
          <pre class="CodeRay highlight"><code>nashorn&gt; load('./jvm-npm.js');
nashorn&gt; var x = require('some_module');</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p><span class="small">Alternatively there’s also a project called <a href="https://github.com/walterhiggins/commonjs-modules-javax-script">commonjs-modules-javax-script</a> which should do similar things.</span></p> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="_polyfill_js">4.1.2. Polyfill.js</h4> 
       <div class="paragraph"> 
        <p>Many libraries registered in NPM, make use of the Node.js and/or the common browser APIs. As Nashorn isn’t Node.js nor a browser, we have to add some glue to make it work. This glue is called <em>polyfill</em>, to provide functions to an environment, where these functions aren’t available by default.</p> 
       </div> 
       <div class="paragraph"> 
        <p>For most use cases, this <code>nashorn-polyfill.js</code> polyfill should work:</p> 
       </div> 
       <div class="listingblock"> 
        <div class="title">
         nashorn-polyfill.js
        </div> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> global = <span class="local-variable">this</span>;<i class="conum" data-value="1"></i><b>(1)</b>
<span class="keyword">var</span> window = <span class="local-variable">this</span>;<i class="conum" data-value="2"></i><b>(2)</b>
<span class="keyword">var</span> process = {<span class="key">env</span>:{}};<i class="conum" data-value="3"></i><b>(3)</b>

<span class="keyword">var</span> console = {};<i class="conum" data-value="4"></i><b>(4)</b>
console.debug = print;
console.log = print;
console.warn = print;
console.error = print;</code></pre> 
        </div> 
       </div> 
       <div class="colist arabic"> 
        <table> 
         <tbody>
          <tr> 
           <td><i class="conum" data-value="1"></i><b>1</b></td> 
           <td>Node.js has a <code>global</code> variable, which we have to provide - it’s just the global context.</td> 
          </tr> 
          <tr> 
           <td><i class="conum" data-value="2"></i><b>2</b></td> 
           <td>Browsers have a <code>window</code> variable, referring the global context, we have to provide it also.</td> 
          </tr> 
          <tr> 
           <td><i class="conum" data-value="3"></i><b>3</b></td> 
           <td>Some packages make use of the <code>process.env</code> object of Node.js, as this is also not available, we just provide an empty object.</td> 
          </tr> 
          <tr> 
           <td><i class="conum" data-value="4"></i><b>4</b></td> 
           <td>Nashorn doesn’t have a <code>console</code> and arbitrary <code>log</code> statements, so we assign the <code>print</code> function to the most used/common console output functions.</td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="_native_api_access">4.1.3. Native API access</h4> 
       <div class="paragraph"> 
        <p>Nashorn doesn’t have access to native language (C/C++) APIs. NPM packages using native APIs can’t be used in Nashorn.</p> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> There are discussions out in the wild, if it is possible to use <a href="http://www.jython.org">Jython</a> to run Python-based NPM packages inside the JVM, but I don’t know of any approach/project testing this. </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_maven">4.2. Maven</h3> 
      <div class="paragraph"> 
       <p>When using Nashorn within a Java project, it’s obvious to use Maven as repository and package manager. This is possible without problems, but with a few plugins and helpers!</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="_maven_and_npm_grunt_gulp_etc">4.2.1. Maven and NPM, Grunt, Gulp, etc.</h4> 
       <div class="paragraph"> 
        <p>If you don’t want to work without the Node.js ecosystem, NPM and frontend build tools like Grunt, Gulp and Webpack, there’s a handy Maven plugin, which solves all your problems:</p> 
       </div> 
       <div class="paragraph"> 
        <p><a href="https://github.com/eirslett/frontend-maven-plugin/" class="bare">https://github.com/eirslett/frontend-maven-plugin/</a></p> 
       </div> 
       <div class="paragraph"> 
        <p>Please refer to the GitHub page to get a detailed description and documentation of this plugin!</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="_webjars">4.2.2. WebJars</h4> 
       <div class="paragraph"> 
        <p>Many of the most popular and most used NPM packages are provided as <a href="http://www.webjars.org/">WebJars</a>. With WebJars, you can use NPM packages just as regular Maven dependencies in your project.</p> 
       </div> 
       <div class="paragraph"> 
        <p>Example for using <a href="http://momentjs.com/">Moment.js</a> as Maven dependency:</p> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
    <span class="tag">&lt;groupId&gt;</span>org.webjars.npm<span class="tag">&lt;/groupId&gt;</span>
    <span class="tag">&lt;artifactId&gt;</span>moment<span class="tag">&lt;/artifactId&gt;</span>
    <span class="tag">&lt;version&gt;</span>2.11.2<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>If there is no WebJar of your favourite NPM package available, it’s easy to create one. There’s a <a href="http://www.webjars.org/contributing">detailed documentation on the website</a>, on how to do it.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="_nasven">4.2.3. Nasven</h4> 
       <div class="paragraph"> 
        <p><a href="https://github.com/nasven/nasven">Nasven.js</a> is a server, desktop, and shell-script application runtime for apps written in Javascript possibly dependent on Maven artifacts.</p> 
       </div> 
       <div class="quoteblock"> 
        <blockquote> 
         <div class="paragraph"> 
          <p>Nasven = Nashorn + Maven. A tool to get Maven artifacts in scope for Nashorn script execution.</p> 
         </div> 
        </blockquote> 
        <div class="attribution">
          — 
         <a href="https://twitter.com/lukaseder">Lukas Eder</a> 
        </div> 
       </div> 
       <div class="listingblock"> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="bash">$ nasven package.json
nashorn full version 1.8.0_72-b15
[NASVEN] Building temporary Apache Maven project to find dependencies ...
[NASVEN] Done!
[NASVEN] About to run your nasven.js application under /Users/Niko/nasven/nasven-samples/camel/index.js ...

[NASVEN] Calling jjs for your application ...</code></pre> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="_some_examples">Some examples</h5> 
        <div class="ulist"> 
         <ul> 
          <li> <p><a href="https://github.com/nasven/samples/tree/master/jaxrs">JAX-RS</a></p> </li> 
          <li> <p><a href="https://github.com/nasven/samples/tree/master/camel">Apache Camel</a></p> </li> 
         </ul> 
        </div> 
        <hr> 
        <div class="admonitionblock note"> 
         <table> 
          <tbody>
           <tr> 
            <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
            <td class="content"> Nearly everything that I wrote about Maven is somehow available in similar ways/plugins for e.g. Gradle or any other popular build system. Just have a look around in the proper ecosystem! </td> 
           </tr> 
          </tbody>
         </table> 
        </div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="_isomorphic_javascript">5. Isomorphic JavaScript</h2> 
    <div class="sectionbody"> 
     <div class="sect2"> 
      <h3 id="_what_does_em_isomorphic_em_mean_what_can_i_do_with_it_and_why_should_i_use_it">5.1. What does <em>Isomorphic</em> mean, what can I do with it and why should I use it?</h3> 
      <div class="paragraph"> 
       <p>Isomorphic comes from the Greek <em>"isos"</em> for <em>"equal"</em> and <em>"morph"</em> for <em>"shape"</em>. So, it’s about the <em>same</em> or <em>equal shape</em> of something.</p> 
      </div> 
      <div class="quoteblock"> 
       <blockquote> 
        <div class="paragraph"> 
         <p>Isomorphism describes that if you look at the same entity &lt;1&gt; in two different contexts &lt;2&gt;, you should get the same thing &lt;3&gt;.</p> 
        </div> 
       </blockquote> 
       <div class="attribution">
         — 
        <a href="http://isomorphic.net/javascript" class="bare">http://isomorphic.net/javascript</a> 
       </div> 
      </div> 
      <div class="colist arabic"> 
       <table> 
        <tbody>
         <tr> 
          <td><i class="conum" data-value="1"></i><b>1</b></td> 
          <td>code</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="2"></i><b>2</b></td> 
          <td>client and server</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="3"></i><b>3</b></td> 
          <td>result, html, DOM, etc.</td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="paragraph"> 
       <p>In our case:</p> 
      </div> 
      <div class="quoteblock"> 
       <blockquote> 
        <div class="paragraph"> 
         <p>If we use the same code on client and server, we should get the same result/html.</p> 
        </div> 
       </blockquote> 
      </div> 
      <div class="imageblock"> 
       <div class="content"> 
        <img src="images/isomorphic.png" alt="Isomorphic"> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="_isomorphic_code">5.1.1. Isomorphic code</h4> 
       <div class="paragraph"> 
        <p>Isomorphic code supports you to code with the <strong>DRY principle</strong> (Don’t Repeat Yourself), as you can <strong>share the same logic</strong> on client and server side. You only have to develop your application logic once and <strong>maintain only one codebase</strong>. In cases of errors, there is only one <strong>single point of truth</strong> <em>(or failure)</em> to lookup for the fix. And last, but not least, isomorphic code leads you and your developers to be able to focus on a <strong>single technology</strong>, so you don’t have to be experts on multiple programming languages.</p> 
       </div> 
       <div class="sect4"> 
        <h5 id="_example">Example</h5> 
        <div class="paragraph"> 
         <p>Think of your perfect password validation function, which you developed in JavaScript for the usage in the browser.</p> 
        </div> 
        <div class="listingblock"> 
         <div class="content"> 
          <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">function</span> <span class="function">isPasswordValid</span>(password) {
    <span class="keyword">var</span> score = scorePasswordStrength(password);
    <span class="keyword">return</span> score &gt;= <span class="integer">3</span>;
}</code></pre> 
         </div> 
        </div> 
        <div class="paragraph"> 
         <p>This works pretty well, but to prevent that users disable JavaScript in the browser and pass an invalid password to the server, you’ll have to develop the same logic again in the programming language used on the server, perhaps Java. This is additional effort, can lead to implementation errors, something may be forgotten in implementation, latest on maintenance. <em>Why not re-use the above logic in your Java code?</em></p> 
        </div> 
        <div class="listingblock"> 
         <div class="content"> 
          <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="predefined-type">Boolean</span> isPasswordValid(<span class="predefined-type">String</span> password) {
    <span class="keyword">try</span> {
        <span class="keyword">return</span> (<span class="predefined-type">Boolean</span>) nashorn.invokeFunction(<span class="string"><span class="delimiter">"</span><span class="content">isPasswordValid</span><span class="delimiter">"</span></span>, password);
    } <span class="keyword">catch</span> (ScriptException | <span class="exception">NoSuchMethodException</span> e) {
        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">RuntimeException</span>(e);
    }
}</code></pre> 
         </div> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="_spas">5.1.2. SPAs</h4> 
       <div class="paragraph"> 
        <p>Most of modern <em>Single Page Web Applications</em> (SPA), only consist of just a html skeleton and one or more JavaScript libraries, which render the whole application UI and is responsible for all transitions, path routings, navigations and logic:</p> 
       </div> 
       <div class="listingblock"> 
        <div class="title">
         index.html
        </div> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;html&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;title&gt;</span>Awesome Website<span class="tag">&lt;/title&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">"</span><span class="content">./app-bundle.js</span><span class="delimiter">"</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/head&gt;</span>
<span class="tag">&lt;body&gt;</span><span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span></code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>These applications are (mostly) awesome, but have some drawbacks:</p> 
       </div> 
       <div class="sect4"> 
        <h5 id="_cons">Cons</h5> 
        <div class="olist arabic"> 
         <ol class="arabic"> 
          <li> <p><strong>UX / Performance</strong> - The user doesn’t see anything before the whole script code is loaded, evaluated and executed on the client/browser.</p> 
           <div class="olist loweralpha"> 
            <ol class="loweralpha" type="a"> 
             <li> <p>Long wait time, even on fast internet connections.</p> </li> 
             <li> <p>Users will possibly go away (3sec. rule!).</p> </li> 
             <li> <p>Think of slow internet connections!?</p> </li> 
            </ol> 
           </div> </li> 
          <li> <p><strong>Legacy Browsers</strong> (and there are still a lot out there!) can’t evaluate your fancy new JavaScript stuff.</p> </li> 
          <li> <p><strong>SEO</strong> - Search engines can’t index your website, because there is no content!</p> 
           <div class="olist loweralpha"> 
            <ol class="loweralpha" type="a"> 
             <li> <p>Even if Google can now evaluate JavaScript on websites, it’s still error-prone, a mess and you can’t rely on proper evaluation!</p> </li> 
            </ol> 
           </div> </li> 
         </ol> 
        </div> 
        <div class="paragraph"> 
         <p>So, perhaps it’s better to render the web pages <em>on the server!?</em></p> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="_pros">Pros</h5> 
        <div class="paragraph"> 
         <p>But what about</p> 
        </div> 
        <div class="ulist"> 
         <ul> 
          <li> <p><strong>UX</strong> - cool transition effects <em>(which are required nowadays to be able to compete on the market!)</em></p> </li> 
          <li> <p><strong>Performance</strong> - faster rendering of only parts/fragments of the entire page</p> </li> 
          <li> <p><strong>Performance</strong> - only send the needed data over the wire, instead of the whole html page</p> </li> 
         </ul> 
        </div> 
        <div class="paragraph"> 
         <p>These advantages can only be achieved by running the application and rendering the pages <em>on the client!</em></p> 
        </div> 
       </div> 
       <div class="sect4"> 
        <h5 id="_possible_solution">Possible Solution</h5> 
        <div class="olist arabic"> 
         <ol class="arabic"> 
          <li> <p>User requests (first) URL</p> </li> 
          <li> <p><strong>Server</strong> fetches content for that URL</p> </li> 
          <li> <p><strong>Server</strong> renders content to a response</p> </li> 
          <li> <p>User enjoys the content</p> </li> 
          <li> <p>in the meantime, the <strong>client is initialized</strong></p> </li> 
          <li> <p>User nagivates to a different URL</p> </li> 
          <li> <p><strong>Client</strong> fetches content for that URL</p> </li> 
          <li> <p><strong>Client</strong> renders content to the DOM</p> </li> 
         </ol> 
        </div> 
        <div class="paragraph"> 
         <p>So, every time a user makes an intial request to the app or an app path, the server should render the page and send it to the client. From that moment on, the client can take over control and proceed with rendering the content. This bridges the gap to initialize the client while the user can consume the initial server-side rendered page. Additionally, search engines get valid html with already rendered content if they want to index your site. And legacy browsers are also able to consume your site, if not only the client is able to render your pages.</p> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_react_js">5.2. React.js</h3> 
      <div class="paragraph"> 
       <p><a href="http://reactjs.org" target="_blank">React.js</a> is a <strong><em>JavaScript library for building user interfaces</em></strong>, invented by Facebook. It’s not a full-stack client framework for building apps. In means of MVC or MVVM, React.js only reflects the <strong><em>V</em></strong>(iew) part.</p> 
      </div> 
      <div class="paragraph"> 
       <p>React is component based and has a virtual DOM. With this virtual DOM and building <em>diffs</em>, it’s possible to have page/content transitions and updates without flickering. Additionally, React supports server-side rendering of templates.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="_flux">5.2.1. Flux</h4> 
       <div class="paragraph"> 
        <p>For building full-stack apps with React, there’s an architecture approach, called <a href="https://facebook.github.io/flux" target="_blank">Flux</a>. This architecture is a straight-forward approach and relies on immutable entities and collections. The state of the application is stored in a so called <code>Store</code>, the store represents the data for rendering the templates. The store may only be modified by a <code>Dispatcher</code>, which will get events (with data) from an <code>Action</code>. Actions are the (only) ones, who may/should communicate with the outside-world (e.g. service calls).</p> 
       </div> 
       <div class="imageblock"> 
        <div class="content"> 
         <img src="images/flux.png" alt="Flux Architecture"> 
        </div> 
        <div class="title">
         The Flux Architecture Principle
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>The currently most popular Flux implementation library is called <a href="http://redux.js.org/" target="_blank">Redux</a>, but there are a lot of others, too.</p> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="_jsx">5.2.2. JSX</h4> 
       <div class="paragraph"> 
        <p>React.js makes heavy use of <a href="https://jsx.github.io/" target="_blank">JSX</a>, a new JavaScript dialect, mixed with HTML elements. <em>Perhaps it’s a bit strange when using it first, but it comes handy while using it more and more.</em></p> 
       </div> 
       <div class="listingblock"> 
        <div class="title">
         app.jsx
        </div> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="javascript"><span class="reserved">class</span> Book <span class="reserved">extends</span> React.Component {
    render() {
        <span class="keyword">return</span> (
            <span class="tag">&lt;div</span> <span class="attribute-name">className</span>=<span class="string"><span class="delimiter">"</span><span class="content">book</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
                <span class="tag">&lt;h3&gt;</span>{this.props.author}<span class="tag">&lt;/h3&gt;</span>
                <span class="tag">&lt;div</span> <span class="attribute-name">className</span>=<span class="string"><span class="delimiter">"</span><span class="content">lead</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>{this.props.children.toString()}<span class="tag">&lt;/div&gt;</span>
            &lt;<span class="regexp"><span class="delimiter">/</span><span class="content">div&gt; ); } }</span></span></code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p><em>(Some people might be reminded of JSP when reading the code above…?)</em></p> 
       </div> 
       <div class="paragraph"> 
        <p>JSX will be transpiled (transformed) to executable JavaScript (ES5) by using <a href="https://babeljs.io" target="_blank">Babel.js</a>. (Formerly this was done by <code>JSXTransformer</code>, a library from Facebook, but they switched to Babel, b/c it’s more powerful.)</p> 
       </div> 
       <div class="listingblock"> 
        <div class="title">
         app.js
        </div> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> Book = React.createClass({<span class="key">displayName</span>: <span class="string"><span class="delimiter">"</span><span class="content">Book</span><span class="delimiter">"</span></span>,
    <span class="function">render</span>: <span class="keyword">function</span> () {
        <span class="keyword">return</span> (
            React.createElement(<span class="string"><span class="delimiter">"</span><span class="content">div</span><span class="delimiter">"</span></span>, {<span class="key">className</span>: <span class="string"><span class="delimiter">"</span><span class="content">book</span><span class="delimiter">"</span></span>},
                React.createElement(<span class="string"><span class="delimiter">"</span><span class="content">h3</span><span class="delimiter">"</span></span>, <span class="predefined-constant">null</span>, <span class="local-variable">this</span>.props.author),
                React.createElement(<span class="string"><span class="delimiter">"</span><span class="content">div</span><span class="delimiter">"</span></span>, {<span class="key">className</span>: <span class="string"><span class="delimiter">"</span><span class="content">lead</span><span class="delimiter">"</span></span>}, <span class="local-variable">this</span>.props.children.toString())
            )
        );
    }
});</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>At runtime, this JavaScript code will be rendered to proper HTML.</p> 
       </div> 
       <div class="listingblock"> 
        <div class="title">
         app.html
        </div> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;div</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">book</span><span class="delimiter">"</span></span> <span class="attribute-name">data-reactid</span>=<span class="string"><span class="delimiter">"</span><span class="content">.1c3dv7jhtco.1.$0</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;h3</span> <span class="attribute-name">data-reactid</span>=<span class="string"><span class="delimiter">"</span><span class="content">.1c3dv7jhtco.1.$0.0</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>George Orwell<span class="tag">&lt;/h3&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">lead</span><span class="delimiter">"</span></span> <span class="attribute-name">data-reactid</span>=<span class="string"><span class="delimiter">"</span><span class="content">.1c3dv7jhtco.1.$0.1</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>1984<span class="tag">&lt;/div&gt;</span>
<span class="tag">&lt;/div&gt;</span></code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>With the <code>data-reactid</code> attributes, React is able to locate the parts of the (virtual) DOM which have to be changed upon data change.</p> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> To learn more about React.js, JSX and Flux, please refer to their appropriate websites! </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_spring_boot_mvc_for_isomorphic_apps">5.3. Spring Boot MVC for Isomorphic Apps</h3> 
      <div class="paragraph"> 
       <p>There are several demos using Spring (Boot) MVC and React.js for server-side rendering:</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><a href="https://github.com/sdeleuze/spring-react-isomorphic" target="_blank">sdeleuze/spring-react-isomorphic</a><br> by <a href="https://twitter.com/sdeleuze" target="_blank">Sébastien Deleuze</a>, Developer on the Spring Framework team at Pivotal, France</p> </li> 
        <li> <p><a href="https://github.com/winterbe/spring-react-example" target="_blank">winterbe/spring-react-example</a><br> by <a href="https://twitter.com/winterbe_" target="_blank">Benjamin Winterberg</a>, Developer from Germany</p> </li> 
       </ul> 
      </div> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> Please refer to these links, if you are more interested in building isomorphic applications with Spring MVC. </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_java_ee_8_mvc_1_0_for_isomorphic_apps">5.4. Java EE 8 MVC 1.0 for Isomorphic Apps</h3> 
      <div class="paragraph"> 
       <p>For the new to come <em>Action-based Web-Framework</em> <a href="https://mvc-spec.java.net/" target="_blank">MVC 1.0</a> in Java EE 8 and its reference implementation <a href="https://ozark.java.net/" target="_blank">Ozark</a>, I wrote a <code>ViewEngine</code> based on React.js, and also a working example, based on the React.js tutorial.</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p><a href="https://github.com/dasniko/ozark-react" target="_blank">dasniko/ozark-react</a></p> </li> 
        <li> <p><a href="https://github.com/dasniko/ozark-react-example" target="_blank">dasniko/ozark-react-example</a></p> </li> 
       </ul> 
      </div> 
      <div class="paragraph"> 
       <p>The following, simplified(!) code fragments are taken from the two above mentioned repositories to show, how an isomorphic JavaScript/Java EE application is realized.</p> 
      </div> 
      <div class="admonitionblock caution"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-caution" title="Caution"></i> </td> 
          <td class="content"> Ensure to use the original code from the above mentioned repository when building applications with a React-based ViewEngine. These are much more flexible and powerful than this simplified example! </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="paragraph"> 
       <p>The <code>ReactController</code> is a standard MVC Controller, decorated with the new <code>@Controller</code> annotation.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="title">
        ReactController.java
       </div> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Controller</span><i class="conum" data-value="1"></i><b>(1)</b>
<span class="annotation">@Path</span>(<span class="string"><span class="delimiter">"</span><span class="content">/react</span><span class="delimiter">"</span></span>)
<span class="directive">public</span> <span class="type">class</span> <span class="class">ReactController</span> {

    <span class="annotation">@Inject</span>
    <span class="directive">private</span> Models models;<i class="conum" data-value="2"></i><b>(2)</b>

    <span class="annotation">@Inject</span>
    <span class="directive">private</span> BookService service;<i class="conum" data-value="3"></i><b>(3)</b>

    <span class="annotation">@GET</span>
    <span class="directive">public</span> <span class="predefined-type">String</span> index() <span class="directive">throws</span> <span class="exception">Exception</span> {
        <span class="predefined-type">List</span>&lt;<span class="predefined-type">Book</span>&gt; books = service.getBooks();
        models.put(<span class="string"><span class="delimiter">"</span><span class="content">data</span><span class="delimiter">"</span></span>, books);<i class="conum" data-value="4"></i><b>(4)</b>
        <span class="keyword">return</span> <span class="string"><span class="delimiter">"</span><span class="content">react:react.jsp</span><span class="delimiter">"</span></span>;<i class="conum" data-value="5"></i><b>(5)</b>
    }

}</code></pre> 
       </div> 
      </div> 
      <div class="colist arabic"> 
       <table> 
        <tbody>
         <tr> 
          <td><i class="conum" data-value="1"></i><b>1</b></td> 
          <td>MVC Controller annotation</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="2"></i><b>2</b></td> 
          <td>MVC internal models entity, just a <code>Map</code></td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="3"></i><b>3</b></td> 
          <td>some service to retrieve (and store) data</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="4"></i><b>4</b></td> 
          <td>get a <code>List</code> of books and put the Java representation into the models <code>Map</code></td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="5"></i><b>5</b></td> 
          <td>return the path to the template to use, with the <code>react:</code> prefix we’re saying that the <code>ReactViewEngine</code> should be used</td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="paragraph"> 
       <p>This is the actual <code>ViewEngine</code> implementation, interacting with React.js</p> 
      </div> 
      <div class="listingblock"> 
       <div class="title">
        ReactViewEngine.java
       </div> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="type">class</span> <span class="class">ReactViewEngine</span> <span class="directive">extends</span> ServletViewEngine {

    <span class="directive">private</span> <span class="directive">static</span> <span class="directive">final</span> <span class="predefined-type">String</span> viewPrefix = <span class="string"><span class="delimiter">"</span><span class="content">react:</span><span class="delimiter">"</span></span>;

    <span class="annotation">@Inject</span>
    React react;<i class="conum" data-value="1"></i><b>(1)</b>

    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();

    <span class="annotation">@Override</span>
    <span class="directive">public</span> <span class="type">boolean</span> supports(<span class="predefined-type">String</span> view) {<i class="conum" data-value="2"></i><b>(2)</b>
        <span class="keyword">return</span> view.startsWith(viewPrefix);
    }

    <span class="annotation">@Override</span>
    <span class="directive">public</span> <span class="type">void</span> processView(ViewEngineContext context) <span class="directive">throws</span> ViewEngineException {<i class="conum" data-value="3"></i><b>(3)</b>
        <span class="comment">// parse view and extract the actual template</span>
        <span class="predefined-type">String</span> template = context.getView().substring(viewPrefix.length());

        <span class="comment">// get "data" from model</span>
        Models models = context.getModels();
        <span class="predefined-type">Object</span> data = models.get(<span class="string"><span class="delimiter">"</span><span class="content">data</span><span class="delimiter">"</span></span>);

        <span class="comment">// call js function on data to generate html</span>
        <span class="predefined-type">String</span> content = react.render(data);

        <span class="comment">// and put results as string in model</span>
        models.put(<span class="string"><span class="delimiter">"</span><span class="content">content</span><span class="delimiter">"</span></span>, content);
        <span class="keyword">try</span> {
            <span class="comment">// additionally put the data as JSON also to the model</span>
            <span class="comment">// this overrides the List data stored previously under the same key</span>
            models.put(<span class="string"><span class="delimiter">"</span><span class="content">data</span><span class="delimiter">"</span></span>, mapper.writeValueAsString(data));
        } <span class="keyword">catch</span> (JsonProcessingException e) {
            <span class="keyword">throw</span> <span class="keyword">new</span> ViewEngineException(e);
        }

        <span class="comment">// create a new context with the actual view and forward to ServletViewEngine</span>
        ViewEngineContext ctx = <span class="keyword">new</span> ViewEngineContextImpl(template, models,
                context.getRequest(), context.getResponse(), context.getUriInfo(),
                context.getResourceInfo(), context.getConfiguration());

        <span class="keyword">try</span> {
            forwardRequest(ctx, <span class="string"><span class="delimiter">"</span><span class="content">*.jsp</span><span class="delimiter">"</span></span>, <span class="string"><span class="delimiter">"</span><span class="content">*.jspx</span><span class="delimiter">"</span></span>);
        } <span class="keyword">catch</span> (ServletException | <span class="exception">IOException</span> e) {
            <span class="keyword">throw</span> <span class="keyword">new</span> ViewEngineException(e);
        }
    }

}</code></pre> 
       </div> 
      </div> 
      <div class="colist arabic"> 
       <table> 
        <tbody>
         <tr> 
          <td><i class="conum" data-value="1"></i><b>1</b></td> 
          <td>The <code>React</code> class will interact with the React.js JavaScript code, see next class for details.</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="2"></i><b>2</b></td> 
          <td>The <code>supports()</code> method determines, if this class can be used as an appropriate <code>ViewEngine</code> for a return string of a controller.</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="3"></i><b>3</b></td> 
          <td>The <code>processView()</code> method actually handles the things to process the view, see inline comments for details.</td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="paragraph"> 
       <p>The <code>React</code> class for interacting with React.js JavaScript code.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="title">
        React.java
       </div> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="type">class</span> <span class="class">React</span> {

    <span class="directive">private</span> <span class="predefined-type">ThreadLocal</span>&lt;ScriptEngine&gt; engineHolder = <span class="predefined-type">ThreadLocal</span>.withInitial(() -&gt; {<i class="conum" data-value="1"></i><b>(1)</b>
        ScriptEngine nashorn = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string"><span class="delimiter">"</span><span class="content">nashorn</span><span class="delimiter">"</span></span>);
        <span class="keyword">try</span> {
            nashorn.eval(read(<span class="string"><span class="delimiter">"</span><span class="content">/nashorn-polyfill.js</span><span class="delimiter">"</span></span>));
            nashorn.eval(read(<span class="string"><span class="delimiter">"</span><span class="content">/META-INF/resources/webjars/react/0.14.2/react.min.js</span><span class="delimiter">"</span></span>));
            nashorn.eval(read(
                    <span class="string"><span class="delimiter">"</span><span class="content">/META-INF/resources/webjars/showdown/0.3.1/compressed/showdown.js</span><span class="delimiter">"</span></span>));
            nashorn.eval(read(<span class="string"><span class="delimiter">"</span><span class="content">/js/bookBox.js</span><span class="delimiter">"</span></span>));
        } <span class="keyword">catch</span> (ScriptException e) {
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">RuntimeException</span>(e);
        }
        <span class="keyword">return</span> nashorn;
    });

    <span class="directive">public</span> <span class="predefined-type">String</span> render(<span class="predefined-type">Object</span> object) {<i class="conum" data-value="2"></i><b>(2)</b>
        <span class="keyword">try</span> {
            <span class="predefined-type">Object</span> html =
                    ((Invocable) engineHolder.get()).invokeFunction(<span class="string"><span class="delimiter">"</span><span class="content">renderServer</span><span class="delimiter">"</span></span>, object);
            <span class="keyword">return</span> <span class="predefined-type">String</span>.valueOf(html);
        } <span class="keyword">catch</span> (<span class="exception">Exception</span> e) {
            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="exception">IllegalStateException</span>(<span class="string"><span class="delimiter">"</span><span class="content">failed to render react component</span><span class="delimiter">"</span></span>, e);
        }
    }

    <span class="directive">private</span> <span class="predefined-type">Reader</span> read(<span class="predefined-type">String</span> path) {<i class="conum" data-value="3"></i><b>(3)</b>
        <span class="keyword">return</span> <span class="keyword">new</span> <span class="predefined-type">InputStreamReader</span>(getClass().getClassLoader().getResourceAsStream(path));
    }

}</code></pre> 
       </div> 
      </div> 
      <div class="colist arabic"> 
       <table> 
        <tbody>
         <tr> 
          <td><i class="conum" data-value="1"></i><b>1</b></td> 
          <td>initializes a new <code>ThreadLocal&lt;ScriptEngine&gt;</code> with all the needed JS libs, b/c React.js is not thread-safe, so we have to use a dedicated <code>ScriptEngine</code> in each request</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="2"></i><b>2</b></td> 
          <td>call the <code>renderServer</code> function of our JSX/JS code and return the result as string (see next)</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="3"></i><b>3</b></td> 
          <td>just a private method for reducing redundant code</td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="paragraph"> 
       <p>The original JSX code (which will be rendered to JS before loading it into Nashorn, this can be made during build, or at runtime loading the Babel.js library into the Nashorn <code>ScriptEngine</code>, but this may be lead to even longer load times).</p> 
      </div> 
      <div class="listingblock"> 
       <div class="title">
        bookBox.jsx
       </div> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="javascript">...<i class="conum" data-value="1"></i><b>(1)</b>

<span class="keyword">var</span> <span class="function">renderClient</span> = <span class="keyword">function</span> (books) {<i class="conum" data-value="2"></i><b>(2)</b>
    <span class="keyword">var</span> data = books || [];
    React.render(
        <span class="tag">&lt;BookBox</span> <span class="attribute-name">data</span>=<span class="error">{</span><span class="attribute-value">data</span><span class="error">}</span> <span class="attribute-name">url</span>=<span class="string"><span class="delimiter">'</span><span class="content">books.json</span><span class="delimiter">'</span></span> <span class="attribute-name">pollInterval</span>=<span class="error">{</span><span class="attribute-value">5000</span><span class="error">}</span> <span class="tag">/&gt;</span>,<i class="conum" data-value="4"></i><b>(4)</b>
        document.getElementById(<span class="string"><span class="delimiter">"</span><span class="content">content</span><span class="delimiter">"</span></span>)
    );
};

<span class="keyword">var</span> <span class="function">renderServer</span> = <span class="keyword">function</span> (books) {<i class="conum" data-value="3"></i><b>(3)</b>
    <span class="keyword">var</span> data = Java.from(books);
    <span class="keyword">return</span> React.renderToString(
        <span class="tag">&lt;BookBox</span> <span class="attribute-name">data</span>=<span class="error">{</span><span class="attribute-value">data</span><span class="error">}</span> <span class="attribute-name">url</span>=<span class="string"><span class="delimiter">'</span><span class="content">books.json</span><span class="delimiter">'</span></span> <span class="attribute-name">pollInterval</span>=<span class="error">{</span><span class="attribute-value">5000</span><span class="error">}</span> <span class="tag">/&gt;</span><i class="conum" data-value="4"></i><b>(4)</b>
    );
};</code></pre> 
       </div> 
      </div> 
      <div class="colist arabic"> 
       <table> 
        <tbody>
         <tr> 
          <td><i class="conum" data-value="1"></i><b>1</b></td> 
          <td>there’s of course more code before, but that’s not interesting for us at this point</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="2"></i><b>2</b></td> 
          <td>this function will be called by the client to initialize the application and to render the content</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="3"></i><b>3</b></td> 
          <td>this function will be called by the server (see above) to render the content</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="4"></i><b>4</b></td> 
          <td>the <code>&lt;BookBox/&gt;</code> component is the code from &lt;1&gt;, which is omitted here, but the actual isomorphic code!</td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="paragraph"> 
       <p>The HTML skeleton, which will be enriched by the server-side rendered code, and send to the client.</p> 
      </div> 
      <div class="listingblock"> 
       <div class="title">
        react.jsp
       </div> 
       <div class="content"> 
        <pre class="CodeRay highlight"><code data-lang="xml"><span class="error">&lt;</span>%@ page contentType="text/html;charset=UTF-8" language="java" %<span class="error">&gt;</span>
<span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;html</span> <span class="attribute-name">lang</span>=<span class="string"><span class="delimiter">"</span><span class="content">en</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
<span class="tag">&lt;head&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">charset</span>=<span class="string"><span class="delimiter">"</span><span class="content">utf-8</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">http-equiv</span>=<span class="string"><span class="delimiter">"</span><span class="content">X-UA-Compatible</span><span class="delimiter">"</span></span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">"</span><span class="content">IE=edge</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;meta</span> <span class="attribute-name">name</span>=<span class="string"><span class="delimiter">"</span><span class="content">viewport</span><span class="delimiter">"</span></span> <span class="attribute-name">content</span>=<span class="string"><span class="delimiter">"</span><span class="content">width=device-width, initial-scale=1</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
    <span class="tag">&lt;title&gt;</span>ReactJS Bookstore with Ozark<span class="tag">&lt;/title&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">"</span><span class="content">${mvc.contextPath}/webjars/react/0.14.2/react.min.js</span><span class="delimiter">"</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span><i class="conum" data-value="1"></i><b>(1)</b>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">"</span><span class="content">${mvc.contextPath}/webjars/showdown/0.3.1/compressed/showdown.js</span><span class="delimiter">"</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;script</span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">"</span><span class="content">${mvc.contextPath}/webjars/jquery/1.11.3/jquery.min.js</span><span class="delimiter">"</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span>
    <span class="tag">&lt;link</span> <span class="attribute-name">href</span>=<span class="string"><span class="delimiter">"</span><span class="content">${mvc.contextPath}/webjars/bootstrap/3.3.5/css/bootstrap.css</span><span class="delimiter">"</span></span> <span class="attribute-name">rel</span>=<span class="string"><span class="delimiter">"</span><span class="content">stylesheet</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
<span class="tag">&lt;/head&gt;</span>

<span class="tag">&lt;body&gt;</span>
    <span class="tag">&lt;div</span> <span class="attribute-name">id</span>=<span class="string"><span class="delimiter">"</span><span class="content">content</span><span class="delimiter">"</span></span> <span class="attribute-name">class</span>=<span class="string"><span class="delimiter">"</span><span class="content">container</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>${content}<span class="tag">&lt;/div&gt;</span><i class="conum" data-value="2"></i><b>(2)</b>
    <span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">text/javascript</span><span class="delimiter">"</span></span> <span class="attribute-name">src</span>=<span class="string"><span class="delimiter">"</span><span class="content">${mvc.contextPath}/js/bookBox.js</span><span class="delimiter">"</span></span><span class="tag">&gt;</span><span class="tag">&lt;/script&gt;</span><i class="conum" data-value="3"></i><b>(3)</b>
    <span class="tag">&lt;script</span> <span class="attribute-name">type</span>=<span class="string"><span class="delimiter">"</span><span class="content">text/javascript</span><span class="delimiter">"</span></span><span class="tag">&gt;</span>
<span class="inline"> <span class="predefined">$</span>(<span class="keyword">function</span> () { renderClient(<span class="predefined">$</span>{data});<i class="conum" data-value="4"></i><b>(4)</b> });</span>
    <span class="tag">&lt;/script&gt;</span>
<span class="tag">&lt;/body&gt;</span>
<span class="tag">&lt;/html&gt;</span></code></pre> 
       </div> 
      </div> 
      <div class="colist arabic"> 
       <table> 
        <tbody>
         <tr> 
          <td><i class="conum" data-value="1"></i><b>1</b></td> 
          <td>JS libraries referenced as WebJars (dependency specified in Maven/Gradle build file)</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="2"></i><b>2</b></td> 
          <td>the <code>div</code> in which the rendered content will be put, regardless if client or server</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="3"></i><b>3</b></td> 
          <td>the actual application script (see above)</td> 
         </tr> 
         <tr> 
          <td><i class="conum" data-value="4"></i><b>4</b></td> 
          <td>the function which will be called, when the application is executed/initialized on the client-side (the function resides also in <code>bookBox.js</code></td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
      <div class="paragraph"> 
       <p>If the application is started without calling the <code>ReactViewEngine</code> in <code>ReactController</code> (e.g. by returning only <code>"react.jsp"</code>, this yields in using the standard JSP ViewEngine), there will be no HTML code visible in the <code>&lt;div id="content"/&gt;</code> element if you look at the initial source code received from the server. But the content will nevertheless be rendered and displayed in the browser, because of the client-side function call to <code>renderClient()</code>.</p> 
      </div> 
      <div class="paragraph"> 
       <p>As soon the application uses the <code>ReactViewEngine</code>, you will see the rendered content also in the <code>&lt;div id="content"/&gt;</code> element, received as source code from the server.</p> 
      </div> 
      <div class="paragraph"> 
       <p>The client-side execution of <code>renderClient()</code> is also performed, but as there is no change to the (virtual) DOM, the page stays as it is, there’s no re-rendering of DOM elements (and thus no flickering).</p> 
      </div> 
      <div class="admonitionblock tip"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-tip" title="Tip"></i> </td> 
          <td class="content"> Use two different browsers and play with the application. Have a look at the application updating itself every 5 seconds and how the source code relates to these updates (or not). </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="_javafx_with_javascript">6. JavaFX with JavaScript</h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>Nashorn comes with a special support for JavaFX. This support can be activated by using the <code>-fx</code> flag on the command-line when using <code>jjs</code>. Thus, no additional compile step for the scripted JavaFX and no additional bootstrapping is needed!</p> 
     </div> 
     <div class="paragraph"> 
      <p>The <code>-fx</code> flag on <code>jjs</code> will bootstrap scripts using a <code>javafx.application.Application</code>.</p> 
     </div> 
     <div class="paragraph"> 
      <p>Let’s assume this <em>"Hello World"</em> example written in plain old Java code:</p> 
     </div> 
     <div class="listingblock"> 
      <div class="title">
       HelloWorldFX.java
      </div> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">import</span> <span class="include">javafx.application.Application</span>;
<span class="keyword">import</span> <span class="include">javafx.event.ActionEvent</span>;
<span class="keyword">import</span> <span class="include">javafx.event.EventHandler</span>;
<span class="keyword">import</span> <span class="include">javafx.scene.Scene</span>;
<span class="keyword">import</span> <span class="include">javafx.scene.control.Button</span>;
<span class="keyword">import</span> <span class="include">javafx.scene.layout.StackPane</span>;
<span class="keyword">import</span> <span class="include">javafx.stage.Stage</span>;

<span class="directive">public</span> <span class="type">class</span> <span class="class">HelloWorldFX</span> <span class="directive">extends</span> Application {
    <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args) {
        launch(args);
    }

    <span class="annotation">@Override</span>
    <span class="directive">public</span> <span class="type">void</span> start(Stage primaryStage) {
        primaryStage.setTitle(<span class="string"><span class="delimiter">"</span><span class="content">Hello World!</span><span class="delimiter">"</span></span>);
        <span class="predefined-type">Button</span> btn = <span class="keyword">new</span> <span class="predefined-type">Button</span>();
        btn.setText(<span class="string"><span class="delimiter">"</span><span class="content">Say 'Hello World'</span><span class="delimiter">"</span></span>);
        btn.setOnAction(<span class="keyword">new</span> <span class="predefined-type">EventHandler</span>&lt;<span class="predefined-type">ActionEvent</span>&gt;() {
            <span class="annotation">@Override</span>
            <span class="directive">public</span> <span class="type">void</span> handle(<span class="predefined-type">ActionEvent</span> event) {
                <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">"</span><span class="content">Hello World!</span><span class="delimiter">"</span></span>);
            }
        });
        StackPane root = <span class="keyword">new</span> StackPane();
        root.getChildren().add(btn);
        primaryStage.setScene(<span class="keyword">new</span> Scene(root, <span class="integer">300</span>, <span class="integer">200</span>));
        primaryStage.show();
    }
}</code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>This is how it looks like in Nashorn JavaScript:</p> 
     </div> 
     <div class="listingblock"> 
      <div class="title">
       fxscript.js
      </div> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> Button = Java.type(<span class="string"><span class="delimiter">"</span><span class="content">javafx.scene.control.Button</span><span class="delimiter">"</span></span>);
<span class="keyword">var</span> StackPane = Java.type(<span class="string"><span class="delimiter">"</span><span class="content">javafx.scene.layout.StackPane</span><span class="delimiter">"</span></span>);
<span class="keyword">var</span> Scene = Java.type(<span class="string"><span class="delimiter">"</span><span class="content">javafx.scene.Scene</span><span class="delimiter">"</span></span>);

<span class="keyword">function</span> <span class="function">start</span>(stage) {
    stage.title = <span class="string"><span class="delimiter">"</span><span class="content">Hello World!</span><span class="delimiter">"</span></span>;
    <span class="keyword">var</span> button = <span class="keyword">new</span> Button();
    button.text = <span class="string"><span class="delimiter">"</span><span class="content">Say 'Hello World'</span><span class="delimiter">"</span></span>;
    button.<span class="function">onAction</span> = <span class="keyword">function</span>() {print(<span class="string"><span class="delimiter">"</span><span class="content">Hello World!</span><span class="delimiter">"</span></span>);}
    <span class="keyword">var</span> root = <span class="keyword">new</span> StackPane();
    root.children.add(button);
    stage.scene = <span class="keyword">new</span> Scene(root, <span class="integer">300</span>, <span class="integer">200</span>);
    stage.show();
}</code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>Run the script with</p> 
     </div> 
     <div class="literalblock"> 
      <div class="content"> 
       <pre>$ jjs -fx fxscript.js</pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>As seen above, a JavaFX script application contains a <code>start()</code> function, which is equivalent to the <code>start()</code> method in its Java counterpart. It also can contain the <code>init()</code> and <code>stop()</code> functions.</p> 
     </div> 
     <div class="paragraph"> 
      <p>In Nashorn, the explicit usage of the <code>start()</code> function is optional. You can use the global <code>$STAGE</code> variable instead of the <code>stage</code> argument of the <code>start()</code> function, which is the primary stage. Thus, our script looks like this:</p> 
     </div> 
     <div class="listingblock"> 
      <div class="title">
       fxscript.js
      </div> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> Button = Java.type(<span class="string"><span class="delimiter">"</span><span class="content">javafx.scene.control.Button</span><span class="delimiter">"</span></span>);
<span class="keyword">var</span> StackPane = Java.type(<span class="string"><span class="delimiter">"</span><span class="content">javafx.scene.layout.StackPane</span><span class="delimiter">"</span></span>);
<span class="keyword">var</span> Scene = Java.type(<span class="string"><span class="delimiter">"</span><span class="content">javafx.scene.Scene</span><span class="delimiter">"</span></span>);

<span class="predefined">$STAGE</span>.title = <span class="string"><span class="delimiter">"</span><span class="content">Hello World!</span><span class="delimiter">"</span></span>;
<span class="keyword">var</span> button = <span class="keyword">new</span> Button();
button.text = <span class="string"><span class="delimiter">"</span><span class="content">Say 'Hello World'</span><span class="delimiter">"</span></span>;
button.<span class="function">onAction</span> = <span class="keyword">function</span>() {print(<span class="string"><span class="delimiter">"</span><span class="content">Hello World!</span><span class="delimiter">"</span></span>);}
<span class="keyword">var</span> root = <span class="keyword">new</span> StackPane();
root.children.add(button);
<span class="predefined">$STAGE</span>.scene = <span class="keyword">new</span> Scene(root, <span class="integer">300</span>, <span class="integer">200</span>);
<span class="predefined">$STAGE</span>.show();</code></pre> 
      </div> 
     </div> 
     <div class="paragraph"> 
      <p>For further convenience, there are some predefined includes in the <code>fx:</code> namespace for all of the JavaFX classes. With these includes, our script now looks like this:</p> 
     </div> 
     <div class="listingblock"> 
      <div class="title">
       fxscript.js
      </div> 
      <div class="content"> 
       <pre class="CodeRay highlight"><code data-lang="javascript">load(<span class="string"><span class="delimiter">"</span><span class="content">fx:base.js</span><span class="delimiter">"</span></span>);
load(<span class="string"><span class="delimiter">"</span><span class="content">fx:controls.js</span><span class="delimiter">"</span></span>);
load(<span class="string"><span class="delimiter">"</span><span class="content">fx:graphics.js</span><span class="delimiter">"</span></span>);

<span class="predefined">$STAGE</span>.title = <span class="string"><span class="delimiter">"</span><span class="content">Hello World!</span><span class="delimiter">"</span></span>;
<span class="keyword">var</span> button = <span class="keyword">new</span> Button();
button.text = <span class="string"><span class="delimiter">"</span><span class="content">Say 'Hello World'</span><span class="delimiter">"</span></span>;
button.<span class="function">onAction</span> = <span class="keyword">function</span>() {print(<span class="string"><span class="delimiter">"</span><span class="content">Hello World!</span><span class="delimiter">"</span></span>);}
<span class="keyword">var</span> root = <span class="keyword">new</span> StackPane();
root.children.add(button);
<span class="predefined">$STAGE</span>.scene = <span class="keyword">new</span> Scene(root, <span class="integer">300</span>, <span class="integer">200</span>);
<span class="predefined">$STAGE</span>.show();</code></pre> 
      </div> 
     </div> 
     <div class="admonitionblock warning"> 
      <table> 
       <tbody>
        <tr> 
         <td class="icon"> <i class="fa icon-warning" title="Warning"></i> </td> 
         <td class="content"> It’s highly recommended to use/add only the classes needed by the application. But it can be convenient for prototyping and during development, to have all the includes at hand. </td> 
        </tr> 
       </tbody>
      </table> 
     </div> 
     <div class="sect2"> 
      <h3 id="_list_of_includes">6.1. List of includes</h3> 
      <table class="tableblock frame-all grid-all spread"> 
       <caption class="title">
        Table 1. FX Includes
       </caption> 
       <colgroup> 
        <col style="width: 50%;"> 
        <col style="width: 50%;"> 
       </colgroup> 
       <thead> 
        <tr> 
         <th class="tableblock halign-left valign-top">Script</th> 
         <th class="tableblock halign-left valign-top">Includes</th> 
        </tr> 
       </thead> 
       <tbody> 
        <tr> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">fx:base.js</p></td> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">javafx.stage.Stage<br> javafx.scene.Scene<br> javafx.scene.Group<br> javafx/beans<br> javafx/collections<br> javafx/events<br> javafx/util</p></td> 
        </tr> 
        <tr> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">fx:graphics.js</p></td> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">javafx/animation<br> javafx/application<br> javafx/concurrent<br> javafx/css<br> javafx/geometry<br> javafx/print<br> javafx/scene<br> javafx/stage<br></p></td> 
        </tr> 
        <tr> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">fx:controls.js</p></td> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">javafx/scene/chart<br> javafx/scene/control</p></td> 
        </tr> 
        <tr> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">fx:fxml.js</p></td> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">javafx/fxml</p></td> 
        </tr> 
        <tr> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">fx:web.js</p></td> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">javafx/scene/web</p></td> 
        </tr> 
        <tr> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">fx:media.js</p></td> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">javafx/scene/media</p></td> 
        </tr> 
        <tr> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">fx:swing.js</p></td> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">javafx/embed/swing</p></td> 
        </tr> 
        <tr> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">fx:swt.js</p></td> 
         <td class="tableblock halign-left valign-top"><p class="tableblock">javafx/embed/swt</p></td> 
        </tr> 
       </tbody> 
      </table> 
      <div class="admonitionblock note"> 
       <table> 
        <tbody>
         <tr> 
          <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
          <td class="content"> Official Oracle documentation including some more examples: <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/javafx.html" class="bare">https://docs.oracle.com/javase/8/docs/technotes/guides/scripting/nashorn/javafx.html</a> </td> 
         </tr> 
        </tbody>
       </table> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="_testing_and_debugging_of_nashorn_scripts">7. Testing and Debugging of Nashorn Scripts</h2> 
    <div class="sectionbody"> 
     <div class="sect2"> 
      <h3 id="_testing">7.1. Testing</h3> 
      <div class="paragraph"> 
       <p>Testing of Nashorn scripts is not that hard as it may look like when you’re not yet used to it.</p> 
      </div> 
      <div class="sect3"> 
       <h4 id="_function_al_testing_with_junit">7.1.1. Function(al) testing with JUnit</h4> 
       <div class="paragraph"> 
        <p>Because every JavaScript function has a return value (yes, every JavaScript function, even functions which have no explicit return value will return <code>undefined</code>), these values can be asserted. Just build up your JavaScript file properly and working with testable, independent, hopefully atomic, functions, just as you would develop your Java methods. Then, you can just call a JS function in your test and assert the result.</p> 
       </div> 
       <div class="paragraph"> 
        <p>Let’s assume we have the following JavaScript code:</p> 
       </div> 
       <div class="listingblock"> 
        <div class="title">
         calculator.js
        </div> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="javascript"><span class="keyword">var</span> <span class="function">add</span> = <span class="keyword">function</span>(a, b) {
    <span class="keyword">return</span> a + b;
}

<span class="keyword">var</span> <span class="function">square</span> = <span class="keyword">function</span>(a) {
    <span class="keyword">return</span> a * a;
}</code></pre> 
        </div> 
       </div> 
       <div class="paragraph"> 
        <p>You can then test the functions with a standard JUnit test</p> 
       </div> 
       <div class="listingblock"> 
        <div class="title">
         CalculatorTest.java
        </div> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="type">class</span> <span class="class">CalculatorTest</span> {

    ScriptEngine nashorn;

    <span class="annotation">@Before</span>
    <span class="directive">public</span> <span class="type">void</span> setup() {
        nashorn = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string"><span class="delimiter">"</span><span class="content">nashorn</span><span class="delimiter">"</span></span>);
        nashorn.eval(<span class="keyword">new</span> <span class="predefined-type">InputStreamReader</span>(
                getClass().getClassLoader().getResourceAsStream(<span class="string"><span class="delimiter">"</span><span class="content">/calculator.js</span><span class="delimiter">"</span></span>)));
    }

    <span class="annotation">@Test</span>
    <span class="directive">public</span> <span class="type">void</span> testAdd() <span class="directive">throws</span> <span class="exception">Exception</span> {
        <span class="predefined-type">Object</span> result = ((Invocable) nashorn).invokeFunction(<span class="string"><span class="delimiter">"</span><span class="content">add</span><span class="delimiter">"</span></span>, <span class="integer">1</span>, <span class="integer">2</span>);
        Assert.assertEquals(<span class="integer">1</span>, result);
    }

    <span class="annotation">@Test</span>
    <span class="directive">public</span> <span class="type">void</span> testSquare() <span class="directive">throws</span> <span class="exception">Exception</span> {
        <span class="predefined-type">Object</span> result = ((Invocable) nashorn).invokeFunction(<span class="string"><span class="delimiter">"</span><span class="content">square</span><span class="delimiter">"</span></span>, <span class="integer">2</span>);
        Assert.assertEquals(<span class="integer">4</span>, result);
    }
}</code></pre> 
        </div> 
       </div> 
      </div> 
      <div class="sect3"> 
       <h4 id="_mocking_javascript_functions_using_spock">7.1.2. Mocking JavaScript functions &amp; using Spock</h4> 
       <div class="paragraph"> 
        <p>A much more nicer (and also more powerful) way of testing Nashorn scripts is to use <a href="https://code.google.com/p/spock">Spock</a> instead of JUnit. Spock is based on Groovy code and since Groovy is also a dynamic language, it’s easier to handle objects and functions created with Groovy between Nashorn and your tests (or <em>specs</em>, as tests are called in Spock).</p> 
       </div> 
       <div class="paragraph"> 
        <p>With Spock it becomes very easy to mock functions, which aren’t under your control or which are not available in Nashorn. This could be callback functions (which are widely used in JavaScript), which you don’t want to execute during your test, or e.g. the <code>alert()</code> function, which Nashorn doesn’t know.</p> 
       </div> 
       <div class="listingblock"> 
        <div class="title">
         Callback.groovy
        </div> 
        <div class="content"> 
         <pre class="CodeRay highlight"><code data-lang="groovy"><span class="type">class</span> <span class="class">CallbackSpec</span> {

    <span class="annotation">@Shared</span> ScriptEngine nashorn = <span class="keyword">new</span> ScriptEngineManager().getEngineByName(<span class="string"><span class="delimiter">'</span><span class="content">nashorn</span><span class="delimiter">'</span></span>);

    <span class="keyword">def</span> <span class="string"><span class="delimiter">"</span><span class="content">callback</span><span class="delimiter">"</span></span>() { <i class="conum" data-value="1"></i><b>(1)</b>
        <span class="key">given</span>:
        nashorn.eval(<span class="string"><span class="delimiter">'</span><span class="content">function callMe(callback) { return callback("") + " Doe"; }</span><span class="delimiter">'</span></span>)

        <span class="key">when</span>:
        <span class="keyword">def</span> result = nashorn.invokeFunction(<span class="string"><span class="delimiter">'</span><span class="content">callMe</span><span class="delimiter">'</span></span>, { <span class="keyword">return</span> <span class="string"><span class="delimiter">'</span><span class="content">John</span><span class="delimiter">'</span></span> } <span class="keyword">as</span> Function)

        <span class="key">then</span>:
        result == <span class="string"><span class="delimiter">'</span><span class="content">John Doe</span><span class="delimiter">'</span></span>
    }

    <span class="keyword">def</span> <span class="string"><span class="delimiter">"</span><span class="content">mocked callback</span><span class="delimiter">"</span></span>() { <i class="conum" data-value="2"></i><b>(2)</b>
        <span class="key">given</span>:
        nashorn.eval(<span class="string"><span class="delimiter">'</span><span class="content">function callMe(callback) { return callback("") + " Doe"; }</span><span class="delimiter">'</span></span>)
        <span class="keyword">def</span> callback = Mock(Function)

        <span class="key">when</span>:
        <span class="keyword">def</span> result = nashorn.invokeFunction(<span class="string"><span class="delimiter">'</span><span class="content">callMe</span><span class="delimiter">'</span></span>, callback)

        <span class="key">then</span>:
        <span class="integer">1</span> * callback.apply(<span class="string"><span class="delimiter">'</span><span class="delimiter">'</span></span>) &gt;&gt; <span class="string"><span class="delimiter">'</span><span class="content">John</span><span class="delimiter">'</span></span>
        result == <span class="string"><span class="delimiter">'</span><span class="content">John Doe</span><span class="delimiter">'</span></span>
    }

    <span class="keyword">def</span> <span class="string"><span class="delimiter">"</span><span class="content">alert</span><span class="delimiter">"</span></span>() { <i class="conum" data-value="3"></i><b>(3)</b>
        <span class="key">given</span>:
        nashorn.eval(<span class="string"><span class="delimiter">'</span><span class="content">function alertMe() { alert("Huh!"); }</span><span class="delimiter">'</span></span>)
        <span class="keyword">def</span> alert = Mock(Function)
        nashorn.put(<span class="string"><span class="delimiter">'</span><span class="content">alert</span><span class="delimiter">'</span></span>, alert)

        <span class="key">when</span>:
        nashorn.invokeFunction(<span class="string"><span class="delimiter">'</span><span class="content">alertMe</span><span class="delimiter">'</span></span>)

        <span class="key">then</span>:
        <span class="integer">1</span> * alert.apply(<span class="string"><span class="delimiter">'</span><span class="content">Huh!</span><span class="delimiter">'</span></span>)
    }

}</code></pre> 
        </div> 
       </div> 
       <div class="colist arabic"> 
        <table> 
         <tbody>
          <tr> 
           <td><i class="conum" data-value="1"></i><b>1</b></td> 
           <td>This function gets a another callback function (of type <code>java.util.function.Function</code>) injected when invoking the test.</td> 
          </tr> 
          <tr> 
           <td><i class="conum" data-value="2"></i><b>2</b></td> 
           <td>In this function the callback function is being mocked and afterwards it’s being tested, if the mock function was called once with value <em>"John"</em>.</td> 
          </tr> 
          <tr> 
           <td><i class="conum" data-value="3"></i><b>3</b></td> 
           <td>Because there is no <code>alert()</code> function available in Nashorn, we have to mock it also and add it to the Nashorn context before invoking the actual function.</td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
       <div class="admonitionblock note"> 
        <table> 
         <tbody>
          <tr> 
           <td class="icon"> <i class="fa icon-note" title="Note"></i> </td> 
           <td class="content"> Further examples with Spock and Nashorn can be found in the GitHub repository <a href="https://github.com/dasniko/nashorn-spock-jasmine">dasniko/nashorn-spock-jasmine</a>. </td> 
          </tr> 
         </tbody>
        </table> 
       </div> 
      </div> 
     </div> 
     <div class="sect2"> 
      <h3 id="_debugging">7.2. Debugging</h3> 
      <div class="paragraph"> 
       <p>Debugging of Nashorn JavaScript is supported by major IDEs like</p> 
      </div> 
      <div class="ulist"> 
       <ul> 
        <li> <p>JetBrains <strong>IntelliJ IDEA</strong> (since version 13.1)</p> 
         <div class="ulist"> 
          <ul> 
           <li> <p><a href="https://blog.jetbrains.com/idea/2014/03/debugger-for-jdk8s-nashorn-javascript-in-intellij-idea-13-1/" class="bare">https://blog.jetbrains.com/idea/2014/03/debugger-for-jdk8s-nashorn-javascript-in-intellij-idea-13-1/</a></p> </li> 
          </ul> 
         </div> </li> 
        <li> <p>Oracle <strong>Netbeans</strong> (since version 8)</p> 
         <div class="ulist"> 
          <ul> 
           <li> <p><a href="http://wiki.netbeans.org/NetBeans_80_NewAndNoteworthy#JavaScript_in_Nashorn" class="bare">http://wiki.netbeans.org/NetBeans_80_NewAndNoteworthy#JavaScript_in_Nashorn</a></p> </li> 
           <li> <p><a href="https://blogs.oracle.com/geertjan/entry/youtube_debugger_for_jdk8_s" class="bare">https://blogs.oracle.com/geertjan/entry/youtube_debugger_for_jdk8_s</a></p> </li> 
           <li> <p><a href="https://blogs.oracle.com/sundararajan/entry/remote_debugging_of_nashorn_scripts" class="bare">https://blogs.oracle.com/sundararajan/entry/remote_debugging_of_nashorn_scripts</a></p> </li> 
          </ul> 
         </div> </li> 
        <li> <p><strong>Eclipse</strong></p> 
         <div class="ulist"> 
          <ul> 
           <li> <p>should be possible with <a href="https://github.com/Nodeclipse/nodeclipse-1">Nodeclipse</a></p> </li> 
           <li> <p><em>(no further info available, as I’m not an Eclipse user any more…?)</em></p> </li> 
          </ul> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sect1"> 
    <h2 id="_contact">8. Contact</h2> 
    <div class="sectionbody"> 
     <div class="paragraph"> 
      <p>Niko Köbler IT-Beratung</p> 
     </div> 
     <div class="paragraph"> 
      <p>E-Mail: <a href="mailto:info@n-k.de">info@n-k.de</a></p> 
     </div> 
     <div class="paragraph"> 
      <p>Web: <a href="http://www.n-k.de" class="bare">http://www.n-k.de</a></p> 
     </div> 
     <div class="paragraph"> 
      <p>Twitter: <a href="https://twitter.com/dasniko">@dasniko</a></p> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="footer"> 
   <div id="footer-text">
     Last updated 2016-11-27 15:30:22 UTC 
   </div> 
  </div>  
 </body>
</html>