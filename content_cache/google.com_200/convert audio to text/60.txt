<!doctype html>
<html xmlns:cc="http://creativecommons.org/ns#">
 <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# medium-com: http://ogp.me/ns/fb/medium-com#">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Building a desktop application with Electron – Developers Writing – Medium</title>
  <link rel="canonical" href="https://medium.com/developers-writing/building-a-desktop-application-with-electron-204203eeb658">
  <meta name="title" content="Building a desktop application with Electron – Developers Writing – Medium">
  <meta name="referrer" content="unsafe-url">
  <meta name="description" content="Desktop applications always had a special place in my heart. Ever since browsers and mobile devices got powerful, there’s been a steady decline of desktop applications which are getting replaced by…">
  <meta name="theme-color" content="#000000">
  <meta property="og:title" content="Building a desktop application with Electron – Developers Writing – Medium">
  <meta property="og:url" content="https://medium.com/developers-writing/building-a-desktop-application-with-electron-204203eeb658">
  <meta property="og:image" content="https://cdn-images-1.medium.com/max/1200/1*R4Id2_P8ZRw0lMaTATncjQ.jpeg">
  <meta property="fb:app_id" content="542599432471018">
  <meta property="og:description" content="A detailed guide on building your very own sound machine using JavaScript, Node.js and Electron">
  <meta name="twitter:description" content="A detailed guide on building your very own sound machine using JavaScript, Node.js and Electron">
  <meta name="twitter:image:src" content="https://cdn-images-1.medium.com/max/1200/1*R4Id2_P8ZRw0lMaTATncjQ.jpeg">
  <link rel="publisher" href="https://plus.google.com/103654360130207659246">
  <link rel="author" href="https://medium.com/@bojzi">
  <meta property="author" content="Kristian Poslek">
  <meta property="og:type" content="article">
  <meta name="twitter:card" content="summary_large_image">
  <meta property="article:publisher" content="https://www.facebook.com/medium">
  <meta property="article:author" content="https://medium.com/@bojzi">
  <meta name="robots" content="index, follow">
  <meta property="article:published_time" content="2015-08-10T14:19:23.312Z">
  <meta name="twitter:creator" content="@bojzi">
  <meta name="twitter:site" content="@Medium">
  <meta property="og:site_name" content="Medium">
  <meta name="twitter:label1" value="Reading time">
  <meta name="twitter:data1" value="20 min read">
  <meta name="twitter:app:name:iphone" content="Medium">
  <meta name="twitter:app:id:iphone" content="828256236">
  <meta name="twitter:app:url:iphone" content="medium://p/204203eeb658">
  <meta property="al:ios:app_name" content="Medium">
  <meta property="al:ios:app_store_id" content="828256236">
  <meta property="al:android:package" content="com.medium.reader">
  <meta property="al:android:app_name" content="Medium">
  <meta property="al:ios:url" content="medium://p/204203eeb658">
  <meta property="al:android:url" content="medium://p/204203eeb658">
  <meta property="al:web:url" content="https://medium.com/developers-writing/building-a-desktop-application-with-electron-204203eeb658">
  <link rel="search" type="application/opensearchdescription+xml" title="Medium" href="/osd.xml">
  <link rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/204203eeb658">
  <script type="application/ld+json">{"@context":"http://schema.org","@type":"NewsArticle","image":{"@type":"ImageObject","width":1920,"height":1280,"url":"https://cdn-images-1.medium.com/max/2000/1*R4Id2_P8ZRw0lMaTATncjQ.jpeg"},"datePublished":"2015-08-10T14:19:23.312Z","dateModified":"2017-09-17T14:56:10.248Z","headline":"Building a desktop application with Electron","name":"Building a desktop application with Electron","keywords":["JavaScript","Software Development","Desktop App"],"author":{"@type":"Person","name":"Kristian Poslek","url":"https://medium.com/@bojzi"},"creator":["Kristian Poslek"],"publisher":{"@type":"Organization","name":"Developers Writing","url":"https://medium.com/developers-writing","logo":{"@type":"ImageObject","width":288,"height":60,"url":"https://cdn-images-1.medium.com/max/576/1*BDmPU3IWQ5sTLaUgH-MDvA.jpeg"}},"mainEntityOfPage":"https://medium.com/developers-writing/building-a-desktop-application-with-electron-204203eeb658"}</script>
  <link rel="stylesheet" type="text/css" href="https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m.css">
  <link rel="stylesheet" href="https://cdn-static-1.medium.com/_/fp/css/main-branding-base.8XxDoQc2XpRsDGst14SGyQ.css">
  <script>if (window.top !== window.self) window.top.location = window.self.location.href;var OB_startTime = new Date().getTime(); var OB_loadErrors = []; function _onerror(e) { OB_loadErrors.push(e) }; if (document.addEventListener) document.addEventListener("error", _onerror, true); else if (document.attachEvent) document.attachEvent("onerror", _onerror); function _asyncScript(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("script"); s.type = "text/javascript"; s.async = true; s.src = u; f.parentNode.insertBefore(s, f);}function _asyncStyles(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("link"); s.rel = "stylesheet"; s.href = u; f.parentNode.insertBefore(s, f); return s}(new Image()).src = "/_/stat?event=pixel.load&origin=" + encodeURIComponent(location.origin);</script>
  <script>window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date; ga("create", "UA-24232453-2", "auto", {"allowLinker": true, "legacyCookieDomain": window.location.hostname}); ga("send", "pageview");</script>
  <script async src="https://www.google-analytics.com/analytics.js"></script>
  <!--[if lt IE 9]><script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js"></script><![endif]-->
  <link rel="icon" href="https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico" class="js-favicon">
  <link rel="apple-touch-icon" sizes="152x152" href="https://cdn-images-1.medium.com/fit/c/304/304/1*YljLzTDkbwryga9Je01MyA.jpeg">
  <link rel="apple-touch-icon" sizes="120x120" href="https://cdn-images-1.medium.com/fit/c/240/240/1*YljLzTDkbwryga9Je01MyA.jpeg">
  <link rel="apple-touch-icon" sizes="76x76" href="https://cdn-images-1.medium.com/fit/c/152/152/1*YljLzTDkbwryga9Je01MyA.jpeg">
  <link rel="apple-touch-icon" sizes="60x60" href="https://cdn-images-1.medium.com/fit/c/120/120/1*YljLzTDkbwryga9Je01MyA.jpeg">
  <link rel="mask-icon" href="https://cdn-static-1.medium.com/_/fp/icons/favicon.KjTfUJo7yJH_fCoUzzH3cg.svg" color="#171717">
 </head>
 <body itemscope class=" postShowScreen browser-chrome os-windows is-withMagicUnderlines v-glyph v-glyph--m is-noJs">
  <script>document.body.className = document.body.className.replace(/(^|\s)is-noJs(\s|$)/, "$1is-js$2")</script>
  <div class="site-main" id="container">
   <div class="butterBar butterBar--error"></div>
   <div class="surface">
    <div id="prerendered" class="screenContent">
     <canvas class="canvas-renderer"></canvas>
     <div class="container u-maxWidth740 u-xs-margin0 notesPositionContainer js-notesPositionContainer"></div>
     <div class="metabar u-clearfix js-metabar u-boxShadowBottomThinLighter u-fixed u-backgroundTransparentWhiteDarkest u-xs-sizeFullViewportWidth">
      <div class="metabar-inner u-marginAuto u-maxWidth1000 u-flexCenter u-justifyContentSpaceBetween u-paddingLeft20 u-paddingRight20 u-height65 js-metabarMiddle">
       <div class="metabar-block u-flex1 u-flexCenter">
        <div class="js-metabarLogoLeft">
         <a href="https://medium.com/" data-log-event="home" class="siteNav-logo u-flexCenter u-paddingTop0"><span class="svgIcon svgIcon--logoMonogram svgIcon--45px is-flushLeft u-textColorDarker">
           <svg class="svgIcon-use" width="45" height="45" viewbox="0 0 45 45">
            <path d="M5 40V5h35v35H5zm8.56-12.627c0 .555-.027.687-.318 1.03l-2.457 2.985v.396h6.974v-.396l-2.456-2.985c-.291-.343-.344-.502-.344-1.03V18.42l6.127 13.364h.714l5.256-13.364v10.644c0 .29 0 .342-.185.528l-1.848 1.796v.396h9.19v-.396l-1.822-1.796c-.184-.186-.21-.238-.21-.528V15.937c0-.291.026-.344.21-.528l1.823-1.797v-.396h-6.471l-4.622 11.542-5.203-11.542h-6.79v.396l2.14 2.64c.239.292.291.37.291.768v10.353z" />
           </svg></span><span class="u-textScreenReader">Homepage</span></a>
        </div>
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56">
         <div class="u-alignBlock">
          <span class="u-inlineBlock u-height28 u-xs-height24 u-verticalAlignTop u-marginRight20 u-borderRightLighter"></span>
         </div>
        </div>
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56 u-marginRight18">
         <div class="u-alignBlock">
          <a class="js-collectionLogoOrName" href="https://medium.com/developers-writing?source=logo-lo_a3dd1f682d8c---ce67810c8a52"><img height="36" width="173" class="u-paddingTop5" src="https://cdn-images-1.medium.com/letterbox/346/72/50/50/1*BDmPU3IWQ5sTLaUgH-MDvA.jpeg?source=logoAvatar-lo_a3dd1f682d8c---ce67810c8a52" alt="Developers Writing"></a>
         </div>
        </div>
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56 u-xs-hide">
         <div class="u-alignBlock">
          <div class="buttonSet u-lineHeightInherit u-marginLeft0">
           <div class="buttonSet-inner">
            <button class="button button--primary u-paddingLeft10 u-paddingRight10 u-height19 u-lineHeight13 u-verticalAlignMiddle u-fontSize12 u-uiTextMedium button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal js-relationshipButton is-smallPill" data-action="sign-in-prompt" data-sign-in-action="toggle-follow-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/developers-writing" data-action-source="----ce67810c8a52----------------------follow_header" data-collection-id="ce67810c8a52"><span class="button-label  js-buttonLabel">Follow</span></button>
           </div>
           <a class="button button--chromeless is-touchIconBlackPulse u-baseColor--buttonNormal button--withIcon button--withSvgIcon" href="https://twitter.com/devswriting" title="Visit “Developers Writing” on Twitter" aria-label="Visit “Developers Writing” on Twitter" rel="me" target="_blank"><span class="button-defaultState"><span class="svgIcon svgIcon--twitterFilled svgIcon--25px">
              <svg class="svgIcon-use" width="25" height="25" viewbox="0 0 25 25">
               <path d="M21.725 5.338c-.744.47-1.605.804-2.513 1.006a3.978 3.978 0 0 0-2.942-1.293c-2.22 0-4.02 1.81-4.02 4.02 0 .32.034.63.07.94-3.31-.18-6.27-1.78-8.255-4.23a4.544 4.544 0 0 0-.574 2.01c.04 1.43.74 2.66 1.8 3.38-.63-.01-1.25-.19-1.79-.5v.08c0 1.93 1.38 3.56 3.23 3.95-.34.07-.7.12-1.07.14-.25-.02-.5-.04-.72-.07.49 1.58 1.97 2.74 3.74 2.8a8.49 8.49 0 0 1-5.02 1.72c-.3-.03-.62-.04-.93-.07A11.447 11.447 0 0 0 8.88 21c7.386 0 11.43-6.13 11.414-11.414.015-.21.01-.38 0-.578a7.604 7.604 0 0 0 2.01-2.08 7.27 7.27 0 0 1-2.297.645 3.856 3.856 0 0 0 1.72-2.23" />
              </svg></span></span></a>
          </div>
         </div>
        </div>
       </div>
       <div class="metabar-block u-flex0 u-flexCenter">
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56">
         <div class="u-alignBlock">
          <div class="buttonSet u-lineHeightInherit u-block u-margin0">
           <a class="button button--primary button--chromeless u-accentColor--buttonNormal is-inSiteNavBar u-lineHeight30 u-height32" href="https://medium.com/m/signin?redirect=https%3A%2F%2Fmedium.com%2Fdevelopers-writing%2Fbuilding-a-desktop-application-with-electron-204203eeb658&amp;source=--------------------------nav_reg">Sign in / Sign up</a>
          </div>
         </div>
        </div>
       </div>
       <div class="u-absolute u-sizeFullWidth u-top0 u-right0 u-textAlignCenter js-metabarLogoCentered u-hide">
        <a href="https://medium.com/" data-log-event="home" class="siteNav-logo u-flexCenter u-paddingTop0"><span class="svgIcon svgIcon--logoMonogram svgIcon--45px is-flushLeft u-textColorDarker">
          <svg class="svgIcon-use" width="45" height="45" viewbox="0 0 45 45">
           <path d="M5 40V5h35v35H5zm8.56-12.627c0 .555-.027.687-.318 1.03l-2.457 2.985v.396h6.974v-.396l-2.456-2.985c-.291-.343-.344-.502-.344-1.03V18.42l6.127 13.364h.714l5.256-13.364v10.644c0 .29 0 .342-.185.528l-1.848 1.796v.396h9.19v-.396l-1.822-1.796c-.184-.186-.21-.238-.21-.528V15.937c0-.291.026-.344.21-.528l1.823-1.797v-.396h-6.471l-4.622 11.542-5.203-11.542h-6.79v.396l2.14 2.64c.239.292.291.37.291.768v10.353z" />
          </svg></span><span class="u-textScreenReader">Homepage</span></a>
       </div>
      </div>
     </div>
     <div class="metabar metabar--spacer js-metabarSpacer u-height65 u-xs-height56"></div>
     <main role="main">
      <article class=" u-sizeViewHeightMin100 u-overflowHidden postArticle postArticle--full is-withAccentColors u-marginBottom40" lang="en">
       <header class="container u-maxWidth740">
        <div class="postMetaHeader u-paddingBottom10 row">
         <div class="col u-size12of12 js-postMetaLockup">
          <div class="postMetaLockup postMetaLockup--authorWithBio u-flex js-postMetaLockup">
           <div class="u-flex0">
            <a class="link avatar u-baseColor--link" href="https://medium.com/@bojzi?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="5267c97a9fa1" data-action-type="hover" data-user-id="5267c97a9fa1" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*pRwc8SoQ6_O7qUzjsVxWkg.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Kristian Poslek"></a>
           </div>
           <div class="u-flex1 u-paddingLeft15 u-overflowHidden">
            <a class="link link link--darken link--darker u-baseColor--link" href="https://medium.com/@bojzi?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="5267c97a9fa1" data-action-type="hover" data-user-id="5267c97a9fa1" dir="auto">Kristian Poslek</a>
            <span class="followState js-followState" data-user-id="5267c97a9fa1"><button class="button u-paddingLeft10 u-paddingRight10 u-height19 u-lineHeight13 u-verticalAlignMiddle u-fontSize12 u-uiTextMedium u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton u-marginLeft10 u-marginTopNegative2 u-xs-hide" data-action="sign-in-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-action-source="post_header_lockup"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary u-paddingLeft10 u-paddingRight10 u-height19 u-lineHeight13 u-verticalAlignMiddle u-fontSize12 u-uiTextMedium u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton u-marginLeft10 u-marginTopNegative2 u-xs-hide" data-action="sign-in-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/5267c97a9fa1" data-action-source="post_header_lockup--------------------------follow_byline"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span>
            <div class="postMetaInline u-noWrapWithEllipsis u-xs-normalWrap u-xs-lineClamp2 u-xs-maxHeight2LineHeightBase">
             Agile UX Expert at comSysto and technology nut.
            </div>
            <div class="postMetaInline js-testPostMetaInlineSupplemental">
             <time datetime="2015-08-10T14:19:23.312Z">Aug 10, 2015</time>
             <span class="middotDivider u-fontSize12"></span>
             <span class="readingTime" title="20 min read"></span>
            </div>
           </div>
          </div>
         </div>
        </div>
       </header>
       <div class="postArticle-content js-postField js-notesSource js-trackedPost" data-post-id="204203eeb658" data-source="post_page" data-collection-id="ce67810c8a52" data-tracking-context="postPage">
        <section name="0cd9" class="section section--body section--bottomCenter section-image--aspectRatioViewport is-imageBackgrounded is-backgrounded is-darkBackgrounded u-imageSpectrum section--first">
         <div class="js-sectionPoint u-ignoreBlock u-textColorTransparentWhite u-absolute u-top0 u-left0" style="height: 1px; width: 1px;"></div>
         <div class="section-background u-sizeFullWidth u-absolute u-top0 u-cursorDefault u-bottom0" data-scroll="aspect-ratio-viewport" contenteditable="false" data-image-id="1*R4Id2_P8ZRw0lMaTATncjQ.jpeg" data-width="5616" data-height="3744">
          <div class="section-backgroundImage u-absolute u-top0 u-left0 u-right0 u-backgroundCover u-bottom0" style="background-image: url(&quot;https://cdn-images-1.medium.com/max/1400/1*R4Id2_P8ZRw0lMaTATncjQ.jpeg&quot;); background-position: 50% 50% !important;"></div>
          <div class="u-ignoreBlock u-absolute0 u-borderRadius3"></div>
          <br>
         </div>
         <div class="section-doubleWidthTable u-table u-ignoreBlock">
          <div class="section-contentCell u-tableCell u-verticalAlignTop u-ignoreBlock">
           <div class="section-aspectRatioViewportBottomSpacer u-ignoreBlock">
            <div class="u-ignoreBlock" style="padding-bottom: 33.3333%;"></div>
           </div>
           <div class="section-doubleWidthTable u-table u-ignoreBlock">
            <div class="section-contentCell u-tableCell u-ignoreBlock">
             <div class="section-content">
              <div class="section-inner sectionLayout--insetColumn">
               <h1 name="e891" id="e891" class="graf graf--h2 graf--leading graf--title">Building a desktop application with&nbsp;Electron</h1>
               <p name="2afe" id="2afe" class="graf graf--p graf-after--h2 graf--trailing"><strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">A detailed guide on building your very own sound machine<br>using JavaScript, Node.js and Electron</em></strong></p>
              </div>
             </div>
            </div>
            <div class="u-tableCell u-verticalAlignTop u-ignoreBlock">
             <div class="section-aspectRatioViewportPlaceholder u-ignoreBlock">
              <div class="u-ignoreBlock" style="padding-bottom: 66.6667%;"></div>
             </div>
             <div class="section-aspectRatioViewportBottomPlaceholder u-ignoreBlock">
              <div class="u-ignoreBlock" style="padding-bottom: 33.3333%;"></div>
             </div>
            </div>
           </div>
          </div>
          <div class="u-tableCell u-ignoreBlock">
           <div class="section-aspectRatioViewportCropPlaceholder u-ignoreBlock">
            <div class="u-ignoreBlock" style="padding-bottom: 66.6667%;"></div>
           </div>
          </div>
         </div>
         <div class="section-captionContent u-ignoreBlock"></div>
        </section>
        <section name="713c" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="c458" id="c458" class="graf graf--h3 graf--leading">The how and what of JavaScript desktop applications</h3>
           <p name="ce23" id="ce23" class="graf graf--p graf-after--h3">Desktop applications always had a special place in my heart. Ever since browsers and mobile devices got powerful, there’s been a steady decline of desktop applications which are getting replaced by mobile and web applications. Still, there’s are a lot of upsides to writing desktop applications?—?they are always present once they’re in your start menu or dock, they’re <em class="markup--em markup--p-em">alt(cmd)-tabbable</em> (I hope that’s a word) and mostly connect better with the underlying operating system (with its shortcuts, notifications, etc) than web applications.</p>
           <p name="3888" id="3888" class="graf graf--p graf-after--p">In this article, I’ll try to guide you through the process of building a simple desktop application and touch on important concepts for building desktop application with JavaScript.</p>
           <figure name="0c95" id="0c95" class="graf graf--figure graf--layoutInsetLeft graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 350px; max-height: 350px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 100%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*GS-t3eNz9Jy7YWKIxxmJPg.png" data-width="512" data-height="512" data-action="zoom" data-action-value="1*GS-t3eNz9Jy7YWKIxxmJPg.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*GS-t3eNz9Jy7YWKIxxmJPg.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/400/1*GS-t3eNz9Jy7YWKIxxmJPg.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/400/1*GS-t3eNz9Jy7YWKIxxmJPg.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             GitHub Electron
            </figcaption>
           </figure>
           <p name="d308" id="d308" class="graf graf--p graf-after--figure">The main idea behind developing desktop applications with JavaScript is that you build one codebase and package it for each operating system separately. This abstracts away the knowledge needed to build native desktop applications and makes maintenance easier. Nowadays, developing a desktop application with JavaScript relies on either <a href="http://electron.atom.io/" data-href="http://electron.atom.io/" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">Electron</a> or <a href="http://nwjs.io/" data-href="http://nwjs.io/" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">NW.js</a>. Although both tools offer more or less the same features, I went with Electron because it has <a href="https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md" data-href="https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">some advantages I found important</a>. At the end of the day, you can’t go wrong with either.</p>
           <h4 name="849d" id="849d" class="graf graf--h4 graf-after--p">Basic assumptions</h4>
           <p name="5975" id="5975" class="graf graf--p graf-after--h4">I assume that you’ve got your basic text editor (or IDE) and <a href="https://nodejs.org/download/" data-href="https://nodejs.org/download/" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">Node.js/npm installed</a>. I’ll also assume you’ve got HTML/CSS/JavaScript knowledge (Node.js knowledge with CommonJS modules would be great, but isn’t crucial) so we can focus on learning Electron concepts without worrying about building the user interface (which, as it turns out, are just common web pages). If not, you’ll probably feel somewhat lost and I recommend visiting <a href="https://medium.com/@bojzi/overview-of-the-javascript-ecosystem-8ec4a0b7a7be" data-href="https://medium.com/@bojzi/overview-of-the-javascript-ecosystem-8ec4a0b7a7be" class="markup--anchor markup--p-anchor" target="_blank">my previous blog post</a> to brush up on your basics.</p>
           <h4 name="ad42" id="ad42" class="graf graf--h4 graf-after--p">A 10,000 foot view of&nbsp;Electron</h4>
           <p name="bd65" id="bd65" class="graf graf--p graf-after--h4">In a nutshell, Electron provides a runtime to build desktop applications with pure JavaScript. The way it works is?—?Electron takes a <em class="markup--em markup--p-em">main</em> file defined in your <em class="markup--em markup--p-em">package.json</em> file and executes it. This main file (usually named <em class="markup--em markup--p-em">main.js</em>) then creates application windows which contain rendered web pages with the added power of interacting with the native GUI (graphical user interface) of your operating system.</p>
           <p name="e21e" id="e21e" class="graf graf--p graf-after--p">In detail, once you start up an application using Electron, a <em class="markup--em markup--p-em">main process</em> is created. This <em class="markup--em markup--p-em">main process</em> is responsible for interacting with the native GUI of your operating system and creates the GUI of your application (your application windows).</p>
           <figure name="b89a" id="b89a" class="graf graf--figure graf--layoutOutsetLeft graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 524px; max-height: 600px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 114.5%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*EJETq7XOPz5RVY5IfF6NIg@2x.png" data-width="1048" data-height="1200" data-action="zoom" data-action-value="1*EJETq7XOPz5RVY5IfF6NIg@2x.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*EJETq7XOPz5RVY5IfF6NIg@2x.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/600/1*EJETq7XOPz5RVY5IfF6NIg@2x.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/600/1*EJETq7XOPz5RVY5IfF6NIg@2x.png">
              </noscript>
             </div>
            </div>
           </figure>
           <p name="1a44" id="1a44" class="graf graf--p graf-after--figure">Purely starting the <em class="markup--em markup--p-em">main process</em> doesn’t give the users of your application any application windows. Those are created by the <em class="markup--em markup--p-em">main process</em> in the main file by using something called a <em class="markup--em markup--p-em">BrowserWindow</em> module. Each browser window then runs its own <em class="markup--em markup--p-em">renderer process</em>. This <em class="markup--em markup--p-em">renderer process</em> takes a web page (an HTML file which references the usual CSS files, JavaScript files, images, etc.) and renders it in the window. Your web pages are rendered with <a href="https://www.chromium.org/" data-href="https://www.chromium.org/" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">Chromium</a> so a very high level of compatibility with standards is guaranteed.</p>
           <p name="f2e8" id="f2e8" class="graf graf--p graf-after--p">For example, if you only had a calculator application, your <em class="markup--em markup--p-em">main process </em>would instantiate a window with a web page where your actual web page (calculator) is.</p>
           <p name="19af" id="19af" class="graf graf--p graf-after--p">Although it is said that only the <em class="markup--em markup--p-em">main process </em>interacts with the native GUI of your operating system, there are techniques to offload some of that work to <em class="markup--em markup--p-em">renderer processes (</em>we’ll look into building a feature leveraging such a technique<em class="markup--em markup--p-em">).</em></p>
           <p name="57e0" id="57e0" class="graf graf--p graf-after--p graf--trailing">The <em class="markup--em markup--p-em">main process</em> can access the native GUI through a series of modules <a href="https://github.com/atom/electron/tree/master/docs/api" data-href="https://github.com/atom/electron/tree/master/docs/api" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">available directly in Electron</a>. Your desktop application can access all Node modules like the excellent <a href="https://github.com/mikaelbr/node-notifier" data-href="https://github.com/mikaelbr/node-notifier" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank"><em class="markup--em markup--p-em">node-notifier</em></a> to show system notifications, <a href="https://www.npmjs.com/package/request" data-href="https://www.npmjs.com/package/request" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank"><em class="markup--em markup--p-em">request</em></a> to make HTTP calls, etc.</p>
          </div>
         </div>
        </section>
        <section name="2b06" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="6715" id="6715" class="graf graf--h3 graf--leading">Hello, world!</h3>
           <p name="a007" id="a007" class="graf graf--p graf-after--h3">Let’s get started with a traditional greeting and install all the necessary prerequisites.</p>
           <h4 name="608b" id="608b" class="graf graf--h4 graf-after--p">Accompanying repository</h4>
           <p name="b49d" id="b49d" class="graf graf--p graf-after--h4">This guide is accompanied by the <a href="https://github.com/bojzi/sound-machine-electron-guide" data-href="https://github.com/bojzi/sound-machine-electron-guide" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">sound-machine-tutorial repository</a>.<br>Use the repository to follow along or continue at certain points. Clone the repository to get started:</p>
           <pre name="ecff" id="ecff" class="graf graf--pre graf-after--p">git clone https://github.com/bojzi/sound-machine-electron-guide.git</pre>
           <p name="adea" id="adea" class="graf graf--p graf-after--pre">and then you can jump to a git tag in the <em class="markup--em markup--p-em">sound-machine-tutorial</em> folder with:</p>
           <pre name="615a" id="615a" class="graf graf--pre graf-after--p">git checkout <em class="markup--em markup--pre-em">&lt;tag-name&gt;</em></pre>
           <p name="3958" id="3958" class="graf graf--p graf-after--pre">I’ll let you know when a tag is available with a code block:</p>
           <pre name="2aae" id="2aae" class="graf graf--pre graf-after--p"><strong class="markup--strong markup--pre-strong">Follow along:</strong><br>git checkout 00-blank-repository</pre>
           <p name="3260" id="3260" class="graf graf--p graf-after--pre">Once you clone/checkout your desired tag, run:</p>
           <pre name="2010" id="2010" class="graf graf--pre graf-after--p">npm install</pre>
           <p name="bde3" id="bde3" class="graf graf--p graf-after--pre">so that you aren’t missing any Node modules.</p>
           <p name="75dd" id="75dd" class="graf graf--p graf-after--p">If you can’t switch to another tag, it would be easiest to just reset your repository state and then do the checkout:</p>
           <pre name="4cea" id="4cea" class="graf graf--pre graf-after--p">git add -A<br>git reset --hard</pre>
           <h4 name="869a" id="869a" class="graf graf--h4 graf-after--pre">Set up&nbsp;shop</h4>
           <pre name="002f" id="002f" class="graf graf--pre graf-after--h4"><strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">Follow along with the tag 00-blank-repository:</em></strong><em class="markup--em markup--pre-em"><br></em>git checkout 00-blank-repository</pre>
           <p name="f4e4" id="f4e4" class="graf graf--p graf-after--pre">In the project folder create a new <em class="markup--em markup--p-em">package.json</em> file in it with the following contents:</p>
           <figure name="705e" id="705e" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/1b98ec6885c1c8c10743ccf55d3665d1?postId=204203eeb658" data-media-id="1b98ec6885c1c8c10743ccf55d3665d1" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="8a2f" id="8a2f" class="graf graf--p graf-after--figure">This barebones <em class="markup--em markup--p-em">package.json:</em></p>
           <ul class="postList">
            <li name="c27d" id="c27d" class="graf graf--li graf-after--p">sets up the name and version of the application,</li>
            <li name="0170" id="0170" class="graf graf--li graf-after--li">lets Electron know which script the <em class="markup--em markup--li-em">main process</em> is going to run (<em class="markup--em markup--li-em">main.js</em>) and</li>
            <li name="ae3d" id="ae3d" class="graf graf--li graf-after--li">sets up a useful shortcut?—?an <em class="markup--em markup--li-em">npm</em> script to run the application easily by running “<em class="markup--em markup--li-em">npm start</em>” in your CLI (terminal or command prompt).</li>
           </ul>
           <p name="2a33" id="2a33" class="graf graf--p graf-after--li">It’s time to get <em class="markup--em markup--p-em">Electron</em>. The easiest way of accomplishing that is by installing a prebuilt binary for your operating system through <em class="markup--em markup--p-em">npm</em> and save it as a development dependency in your <em class="markup--em markup--p-em">package.json (</em>that happens automatically with<em class="markup--em markup--p-em"> --save-dev)</em>. Run the following in your CLI (in the project folder):</p>
           <pre name="e96f" id="e96f" class="graf graf--pre graf-after--p">npm install --save-dev electron-prebuilt</pre>
           <p name="01e6" id="01e6" class="graf graf--p graf-after--pre">The prebuilt binary is tailored to the operating system it’s being installed on and allows the running of “<em class="markup--em markup--p-em">npm start</em>”. We’re installing it as a development dependency because we will only need it during development.</p>
           <p name="aad6" id="aad6" class="graf graf--p graf-after--p">That’s, more or less, everything you need to start developing with <em class="markup--em markup--p-em">Electron</em>.</p>
           <h4 name="a803" id="a803" class="graf graf--h4 graf-after--p">Greeting the&nbsp;world</h4>
           <p name="b852" id="b852" class="graf graf--p graf-after--h4">Create an <strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">app</em></strong> folder and an <em class="markup--em markup--p-em">index.html</em> file in that folder with the following contents:</p>
           <figure name="c289" id="c289" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/bc8d762d3839619eb8ac2917abf73e18?postId=204203eeb658" data-media-id="bc8d762d3839619eb8ac2917abf73e18" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="bf6f" id="bf6f" class="graf graf--p graf-after--figure">In the root of the project create a <em class="markup--em markup--p-em">main.js </em>file. That’s the file that Electron’s main process is going to spin up and allow the creation of our “Hello, world!” web page. Create the file with the following contents:</p>
           <figure name="fc69" id="fc69" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/5b51b70fe173c646705245db1253885b?postId=204203eeb658" data-media-id="5b51b70fe173c646705245db1253885b" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="c25c" id="c25c" class="graf graf--p graf-after--figure">Nothing scary, right?<br>The <em class="markup--em markup--p-em">app </em>module controls your application lifecycle (for example?—?reacting to the ready state of your application)<em class="markup--em markup--p-em">.<br></em>The <em class="markup--em markup--p-em">BrowserWindow</em> module allows window creation.<br>The <em class="markup--em markup--p-em">mainWindow</em> object is going to be your main application window and is declared as <em class="markup--em markup--p-em">null</em> because the window would otherwise be closed once JavaScripts garbage collection kicks in.</p>
           <p name="f214" id="f214" class="graf graf--p graf-after--p">Once <em class="markup--em markup--p-em">app</em> gets the <em class="markup--em markup--p-em">ready</em> event, we create a new 800 pixels wide and 600 pixels high window using <em class="markup--em markup--p-em">BrowserWindow</em>.<br>That window’s <em class="markup--em markup--p-em">renderer process</em> is going to render our <em class="markup--em markup--p-em">index.html</em> file.</p>
           <p name="9310" id="9310" class="graf graf--p graf-after--p">Run our “Hello, World!” application by running the following in your CLI:</p>
           <pre name="c3a3" id="c3a3" class="graf graf--pre graf-after--p">npm start</pre>
           <p name="50bf" id="50bf" class="graf graf--p graf-after--pre">and bask in the glory that is your app.</p>
           <figure name="d249" id="d249" class="graf graf--figure graf-after--p graf--trailing">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 542px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 77.4%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*rPsf_UzNNKUpH39yQX-q_Q.png" data-width="1768" data-height="1368" data-action="zoom" data-action-value="1*rPsf_UzNNKUpH39yQX-q_Q.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*rPsf_UzNNKUpH39yQX-q_Q.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*rPsf_UzNNKUpH39yQX-q_Q.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/800/1*rPsf_UzNNKUpH39yQX-q_Q.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             Hello indeed.
            </figcaption>
           </figure>
          </div>
         </div>
        </section>
        <section name="5dfc" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="ffef" id="ffef" class="graf graf--h3 graf--leading">Developing a real application</h3>
           <h4 name="0799" id="0799" class="graf graf--h4 graf-after--h3">A glorious sound&nbsp;machine</h4>
           <p name="f4e9" id="f4e9" class="graf graf--p graf-after--h4">First things first?—?<em class="markup--em markup--p-em">what’s a sound machine</em>?<br>A sound machine is a little device that makes sounds when you press various buttons, mostly cartoon or reaction sounds. It’s a funny little tool to lighten up the mood in an office and a great use case to develop a desktop application as we’re going to explore quite a few concepts while developing it (and get a nifty sound machine to boot).</p>
           <figure name="b5d0" id="b5d0" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 368px; max-height: 724px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 196.70000000000002%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*El4nvvh3h3vjRgwh_wVO7A.png" data-width="368" data-height="724">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*El4nvvh3h3vjRgwh_wVO7A.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*El4nvvh3h3vjRgwh_wVO7A.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/800/1*El4nvvh3h3vjRgwh_wVO7A.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             The. Sound.&nbsp;Machine.
            </figcaption>
           </figure>
           <p name="8f2e" id="8f2e" class="graf graf--p graf-after--figure">The features we’re going to build and concepts we’re going to explore are:</p>
           <ul class="postList">
            <li name="11a8" id="11a8" class="graf graf--li graf-after--p">basic sound machine (basic browser window instantiation),</li>
            <li name="de1c" id="de1c" class="graf graf--li graf-after--li">closing the sound machine (remote messages between <em class="markup--em markup--li-em">main</em> and <em class="markup--em markup--li-em">renderer process),</em></li>
            <li name="2e6d" id="2e6d" class="graf graf--li graf-after--li">playing sounds without having the application in focus (global keyboard shortcuts),</li>
            <li name="2c65" id="2c65" class="graf graf--li graf-after--li">creating a settings screen for shortcut modifier keys (Shift, Ctrl and Alt) (storing user settings in home folder),</li>
            <li name="f383" id="f383" class="graf graf--li graf-after--li">adding a tray icon (remotely creating native GUI elements and getting to know menus and tray icon) and</li>
            <li name="aa77" id="aa77" class="graf graf--li graf-after--li graf--trailing">packaging your application (packaging your application for Mac, Windows and Linux).</li>
           </ul>
          </div>
         </div>
        </section>
        <section name="482c" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="8d18" id="8d18" class="graf graf--h3 graf--leading">Building the basic feature of a sound&nbsp;machine</h3>
           <h4 name="a7fe" id="a7fe" class="graf graf--h4 graf-after--h3">Starting point and application organisation</h4>
           <p name="22f1" id="22f1" class="graf graf--p graf-after--h4">With a working “Hello, world!” application under your belt, it’s high time to start building a sound machine.</p>
           <p name="fbad" id="fbad" class="graf graf--p graf-after--p">A typical sound machine features several rows of buttons which respond to presses by making sounds. The sounds are mostly cartoonish and/or reaction based (laughter, clapping, glass breaking, etc.).</p>
           <p name="871d" id="871d" class="graf graf--p graf-after--p">That’s also the very first feature we’ll build?—?a basic sound machine that responds to clicks.</p>
           <figure name="1ce8" id="1ce8" class="graf graf--figure graf--layoutInsetLeft graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 192px; max-height: 311px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 162%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*CsKlT-mLLFJlRoYZnAk9Tg@2x.png" data-width="384" data-height="622" data-action="zoom" data-action-value="1*CsKlT-mLLFJlRoYZnAk9Tg@2x.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*CsKlT-mLLFJlRoYZnAk9Tg@2x.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/400/1*CsKlT-mLLFJlRoYZnAk9Tg@2x.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/400/1*CsKlT-mLLFJlRoYZnAk9Tg@2x.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             Basic files and folders structure
            </figcaption>
           </figure>
           <p name="8594" id="8594" class="graf graf--p graf-after--figure">Our application structure is going to be very straightforward.</p>
           <p name="a417" id="a417" class="graf graf--p graf-after--p">In the <strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">root</em></strong> of the application we’ll keep the <em class="markup--em markup--p-em">package.json</em> file, the <em class="markup--em markup--p-em">main.js</em> file and any other application-wide files we need.</p>
           <p name="1696" id="1696" class="graf graf--p graf-after--p">The <strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">app</em></strong> folder will house our HTML files of various types within folders like <strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">css</em></strong>, <strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">js</em></strong>, <strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">wav</em></strong> and <strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">img</em></strong>.</p>
           <p name="b166" id="b166" class="graf graf--p graf-after--p">To make things easier, all the files needed for web page design have already been included in the initial state of the repository. Please check the tag 01-start-project out. If you followed along and created the “Hello, world!” application, you’ll have to reset your repository and then do the checkout:</p>
           <pre name="0a9c" id="0a9c" class="graf graf--pre graf-after--p"><strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">If you followed along with the "Hello, world!" example:</em></strong><br>git add -A<br>git reset --hard</pre>
           <pre name="846a" id="846a" class="graf graf--pre graf-after--pre"><strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">Follow along with the tag 01-start-project:</em></strong><em class="markup--em markup--pre-em"><br></em>git checkout 01-start-project</pre>
           <p name="488e" id="488e" class="graf graf--p graf-after--pre">To keep things simple, we’re going to have only two sounds but extending it to the full 16 sounds is simply a matter of finding extra sounds, extra icons and modifying <em class="markup--em markup--p-em">index.html</em>.</p>
           <h4 name="1626" id="1626" class="graf graf--h4 graf-after--p">Defining the rest of the main&nbsp;process</h4>
           <p name="36e7" id="36e7" class="graf graf--p graf-after--h4">Let’s revisit <em class="markup--em markup--p-em">main.js</em> to define the look of the sound machine. Replace the contents of the file with:</p>
           <figure name="5cc9" id="5cc9" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/f938ae58f6a720fc868656e74d91eee0?postId=204203eeb658" data-media-id="f938ae58f6a720fc868656e74d91eee0" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="b0a2" id="b0a2" class="graf graf--p graf-after--figure">We’re customising the window we’re creating by giving it a dimension, making it non-resizable and frameless. It’s going to look like a real sound machine hovering on your desktop.</p>
           <p name="c220" id="c220" class="graf graf--p graf-after--p">The question now is?—?how to move a frameless window (with no title bar) and close it?<br>I’ll talk about custom window (and application) closing very soon (and introduce a way of communicating between the <em class="markup--em markup--p-em">main process</em> and a <em class="markup--em markup--p-em">renderer process</em>), but the dragging part is easy. If you look at the <em class="markup--em markup--p-em">index.css</em> file (in <strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">app/css</em></strong>), you’ll see the following:</p>
           <figure name="548b" id="548b" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/a1adf1beb1d4dee1bcdd5ed7870a0bf1?postId=204203eeb658" data-media-id="a1adf1beb1d4dee1bcdd5ed7870a0bf1" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="0903" id="0903" class="graf graf--p graf-after--figure"><em class="markup--em markup--p-em">-webkit-app-region: drag; </em>allows the whole <em class="markup--em markup--p-em">html</em> to be a draggable object. There is a problem now, though?—?you can’t click buttons on a draggable object. The other piece of the puzzle is <em class="markup--em markup--p-em">-webkit-app-region: no-drag; </em>which allows you to define undraggable (and thus clickable elements). Consider the following excerpt from <em class="markup--em markup--p-em">index.css</em>:</p>
           <figure name="7dff" id="7dff" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/3a6f535a5249998496f54ed4a5bf93bf?postId=204203eeb658" data-media-id="3a6f535a5249998496f54ed4a5bf93bf" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <h4 name="572a" id="572a" class="graf graf--h4 graf-after--figure">Displaying the sound machine in its own&nbsp;window</h4>
           <p name="8776" id="8776" class="graf graf--p graf-after--h4">The <em class="markup--em markup--p-em">main.js</em> file can now make a new window and display the sound machine. And really, if you start your application with <em class="markup--em markup--p-em">npm start,</em> you’ll see the sound machine come alive. It’s not a surprise that nothing’s happening right now because we just have a static web page.</p>
           <p name="bbdc" id="bbdc" class="graf graf--p graf-after--p">Put the following in the <em class="markup--em markup--p-em">index.js</em> file (located in <strong class="markup--strong markup--p-strong"><em class="markup--em markup--p-em">app/js</em></strong>) to get the interactivity going:</p>
           <figure name="0ecc" id="0ecc" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/228b3fe739357279a04553f767dc9957?postId=204203eeb658" data-media-id="228b3fe739357279a04553f767dc9957" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="ab85" id="ab85" class="graf graf--p graf-after--figure">This code is pretty simple. We:</p>
           <ul class="postList">
            <li name="2974" id="2974" class="graf graf--li graf-after--p">query for the sound buttons,</li>
            <li name="deaf" id="deaf" class="graf graf--li graf-after--li">iterate through the buttons reading out the <em class="markup--em markup--li-em">data-sound</em> attribute,</li>
            <li name="e404" id="e404" class="graf graf--li graf-after--li">add a background image to each button</li>
            <li name="5f71" id="5f71" class="graf graf--li graf-after--li">and add a click event to each button that plays audio (using the <a href="https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement" data-href="https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement" class="markup--anchor markup--li-anchor" rel="nofollow noopener" target="_blank">HTMLAudioElement interface</a>)</li>
           </ul>
           <p name="a0c4" id="a0c4" class="graf graf--p graf-after--li">Test your application by running the following in your CLI:</p>
           <pre name="e454" id="e454" class="graf graf--pre graf-after--p">npm start</pre>
           <figure name="f8a3" id="f8a3" class="graf graf--figure graf-after--pre graf--trailing">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 452px; max-height: 806px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 178.29999999999998%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*Umzbl_QY7tatF_9Khm400Q@2x.png" data-width="904" data-height="1612" data-action="zoom" data-action-value="1*Umzbl_QY7tatF_9Khm400Q@2x.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*Umzbl_QY7tatF_9Khm400Q@2x.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*Umzbl_QY7tatF_9Khm400Q@2x.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/800/1*Umzbl_QY7tatF_9Khm400Q@2x.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             A working sound&nbsp;machine!
            </figcaption>
           </figure>
          </div>
         </div>
        </section>
        <section name="5858" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="6952" id="6952" class="graf graf--h3 graf--leading">Closing the application from a browser window via remote&nbsp;events</h3>
           <pre name="fd22" id="fd22" class="graf graf--pre graf-after--h3"><strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">Follow along with the tag 02-basic-sound-machine:</em></strong><em class="markup--em markup--pre-em"><br></em>git checkout 02-basic-sound-machine</pre>
           <p name="03e7" id="03e7" class="graf graf--p graf-after--pre">To recap?—?application windows (more exactly their <em class="markup--em markup--p-em">renderer process</em>) shouldn’t be interacting with the GUI (and that’s what closing a window is). The <a href="https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md" data-href="https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">official Electron quick start guide</a> says:</p>
           <blockquote name="661e" id="661e" class="graf graf--blockquote graf-after--p">
            In web pages, it is not allowed to call native GUI related APIs because managing native GUI resources in web pages is very dangerous and it is easy to leak resources. If you want to perform GUI operations in a web page, the renderer process of the web page must communicate with the main process to request the main process perform those operations.
           </blockquote>
           <p name="b6bb" id="b6bb" class="graf graf--p graf-after--blockquote">Electron provides the <a href="https://github.com/atom/electron/blob/master/docs/api/ipc-renderer.md" data-href="https://github.com/atom/electron/blob/master/docs/api/ipc-renderer.md" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank"><em class="markup--em markup--p-em">ipc</em> (inter-process communication) module</a> for that type of communication. <em class="markup--em markup--p-em">ipc</em> allows subscribing to messages on a <em class="markup--em markup--p-em">channel</em> and sending messages to subscribers of a <em class="markup--em markup--p-em">channel</em>. A channel is used to differentiate between receivers of messages and is represented by a string (for example “channel-1”, “channel-2”…). The message can also contain data. Upon receiving a message, the subscriber can react by doing some work and can even answer. The biggest benefit of messaging is separation of concerns?—?the <em class="markup--em markup--p-em">main process</em> doesn’t have to know which <em class="markup--em markup--p-em">renderer processes</em> there are or which one sent a message.</p>
           <figure name="0808" id="0808" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 274px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 39.2%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*VkIt0RY92_fSiZDa9RC6Ng@2x.png" data-width="1558" data-height="610" data-action="zoom" data-action-value="1*VkIt0RY92_fSiZDa9RC6Ng@2x.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*VkIt0RY92_fSiZDa9RC6Ng@2x.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*VkIt0RY92_fSiZDa9RC6Ng@2x.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/800/1*VkIt0RY92_fSiZDa9RC6Ng@2x.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             You’ve got&nbsp;mail.
            </figcaption>
           </figure>
           <p name="8f58" id="8f58" class="graf graf--p graf-after--figure">That’s exactly what we’ll do here?—?subscribe the <em class="markup--em markup--p-em">main process</em> (<em class="markup--em markup--p-em">main.js</em>) to the “<em class="markup--em markup--p-em">close-main-window</em>” channel and send a message on that <em class="markup--em markup--p-em">channel</em> from the <em class="markup--em markup--p-em">renderer process</em> (<em class="markup--em markup--p-em">index.js</em>) when someone clicks the close button.</p>
           <p name="0699" id="0699" class="graf graf--p graf-after--p">Add the following to <em class="markup--em markup--p-em">main.js </em>to subscribe to a channel:</p>
           <figure name="7f5f" id="7f5f" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/3ad7bc9c896bcaa70b22cbf05842a373?postId=204203eeb658" data-media-id="3ad7bc9c896bcaa70b22cbf05842a373" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="8ff6" id="8ff6" class="graf graf--p graf-after--figure">After requiring the module, subscribing to messages on a channel is very easy and involves using the <em class="markup--em markup--p-em">on()</em> method with the channel name and a callback function.</p>
           <p name="8889" id="8889" class="graf graf--p graf-after--p">To send a message on that channel, add the following to <em class="markup--em markup--p-em">index.js</em>:</p>
           <figure name="2c18" id="2c18" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/df77725b64153ad6f152e24d0a1cca36?postId=204203eeb658" data-media-id="df77725b64153ad6f152e24d0a1cca36" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="b11c" id="b11c" class="graf graf--p graf-after--figure">Again, we require the <em class="markup--em markup--p-em">ipc </em>module and bind a <em class="markup--em markup--p-em">click </em>event to the element with the close button. On clicking the close button we send a message via the “close-main-window” channel with the <em class="markup--em markup--p-em">send()</em> method.</p>
           <p name="485a" id="485a" class="graf graf--p graf-after--p">There’s one more detail that could bite you and we’ve talked about it already?—?the <em class="markup--em markup--p-em">clickability</em> of draggable areas. <em class="markup--em markup--p-em">index.css</em> has to define the close button as non-draggable.</p>
           <figure name="9956" id="9956" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/722fb4ff0af4ca602ea4d682c5a46f1e?postId=204203eeb658" data-media-id="722fb4ff0af4ca602ea4d682c5a46f1e" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="bec1" id="bec1" class="graf graf--p graf-after--figure graf--trailing">That’s all, our application can now be closed via the close button. Communicating via <em class="markup--em markup--p-em">ipc</em> can get complicated by examining the event or passing arguments and we’ll see an example of passing arguments later.</p>
          </div>
         </div>
        </section>
        <section name="0d6c" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="9293" id="9293" class="graf graf--h3 graf--leading">Playing sounds via global keyboard shortcuts</h3>
           <pre name="949e" id="949e" class="graf graf--pre graf-after--h3"><strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">Follow along with the tag 03-closable-sound-machine:</em></strong><em class="markup--em markup--pre-em"><br></em>git checkout 03-closable-sound-machine</pre>
           <p name="1b9a" id="1b9a" class="graf graf--p graf-after--pre">Our basic sound machine is working great. But we do have a usability issue?—?what use is a sound machine that has to sit in front of all your windows the whole time and be clicked repeatedly?</p>
           <p name="987f" id="987f" class="graf graf--p graf-after--p">This is where global keyboard shortcuts come in. Electron provides a <a href="https://github.com/atom/electron/blob/master/docs/api/global-shortcut.md" data-href="https://github.com/atom/electron/blob/master/docs/api/global-shortcut.md" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">global shortcut</a> module which allows you to listen to custom keyboard combinations and react. The keyboard combinations are known as <a href="https://github.com/atom/electron/blob/master/docs/api/accelerator.md" data-href="https://github.com/atom/electron/blob/master/docs/api/accelerator.md" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank"><em class="markup--em markup--p-em">Accelerators</em></a> and are string representations of a combination of keypresses (for example “Ctrl+Shift+1”).</p>
           <figure name="2b73" id="2b73" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 545px; max-height: 318px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 58.3%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*xx7pP0czBfFTskrN5tmyZQ@2x.png" data-width="1090" data-height="636" data-action="zoom" data-action-value="1*xx7pP0czBfFTskrN5tmyZQ@2x.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*xx7pP0czBfFTskrN5tmyZQ@2x.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*xx7pP0czBfFTskrN5tmyZQ@2x.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/800/1*xx7pP0czBfFTskrN5tmyZQ@2x.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             Plug… er, press and&nbsp;play!
            </figcaption>
           </figure>
           <p name="e6ab" id="e6ab" class="graf graf--p graf-after--figure">Since we want to catch a native GUI event (global keyboard shortcut) and do an application window event (play a sound), we’ll use our trusted <em class="markup--em markup--p-em">ipc</em> module to send a message from the <em class="markup--em markup--p-em">main process</em> to the <em class="markup--em markup--p-em">renderer process</em>.</p>
           <p name="9591" id="9591" class="graf graf--p graf-after--p">Before diving into the code, there are two things to consider:</p>
           <ol class="postList">
            <li name="7aa8" id="7aa8" class="graf graf--li graf-after--p">global shortcuts have to be registered after the <em class="markup--em markup--li-em">app “ready” </em>event (the code should be in that block) and</li>
            <li name="c8ce" id="c8ce" class="graf graf--li graf-after--li">when sending messages via <em class="markup--em markup--li-em">ipc</em> from the <em class="markup--em markup--li-em">main process</em> to a <em class="markup--em markup--li-em">renderer process </em>you have to use the reference to that window (something like <em class="markup--em markup--li-em">“createdWindow.webContents.send(‘channel’)</em>)</li>
           </ol>
           <p name="3658" id="3658" class="graf graf--p graf-after--li">With that in mind, let’s alter our <em class="markup--em markup--p-em">main.js </em>and<em class="markup--em markup--p-em"> </em>add the following code:</p>
           <figure name="ae8a" id="ae8a" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/83c10d7d1ce1161532321296c407218b?postId=204203eeb658" data-media-id="83c10d7d1ce1161532321296c407218b" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="1606" id="1606" class="graf graf--p graf-after--figure">First, we require the <em class="markup--em markup--p-em">global-shortcut</em> module. Then, once our application is ready, we register two shortcuts?—?one that will respond to pressing Ctrl, Shift and 1 together and the other that will respond to pressing Ctrl, Shift and 2 together. Each of those will send a message on the “<em class="markup--em markup--p-em">global-shortcut</em>” channel with an argument. We’ll use that argument to play the correct sound. Add the following to <em class="markup--em markup--p-em">index.js</em>:</p>
           <figure name="6570" id="6570" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/2d065d0bb6cf7973c6d193a3eb624ed0?postId=204203eeb658" data-media-id="2d065d0bb6cf7973c6d193a3eb624ed0" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="5c1c" id="5c1c" class="graf graf--p graf-after--figure graf--trailing">To keep thing simple, we’re going to simulate a button click and use the soundButtons selector that we’ve created while binding buttons to playing sounds. Once a message comes with an argument of 1, we’ll take the <em class="markup--em markup--p-em">soundButtons[1]</em> element and trigger a mouse click on it (<em class="markup--em markup--p-em">note</em>: in a production application, you’d want to encapsulate the sound playing code and execute that).</p>
          </div>
         </div>
        </section>
        <section name="439c" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="d93d" id="d93d" class="graf graf--h3 graf--leading">Configuring modifier keys via user settings in a new&nbsp;window</h3>
           <pre name="6eea" id="6eea" class="graf graf--pre graf-after--h3"><strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">Follow along with the tag 04-global-shortcuts-bound:</em></strong><em class="markup--em markup--pre-em"><br></em>git checkout 04-global-shortcuts-bound</pre>
           <p name="e18c" id="e18c" class="graf graf--p graf-after--pre">With so many applications running at the same time, it could very well be that the shortcuts we’ve envisioned are already taken. That’s why we’re going to introduce a settings screen and store which modifiers (Ctrl, Alt and/or Shift) we’re going to use.</p>
           <p name="d205" id="d205" class="graf graf--p graf-after--p">To accomplish all of that, we’ll need the following:</p>
           <ul class="postList">
            <li name="d94e" id="d94e" class="graf graf--li graf-after--p">a settings button in our main window,</li>
            <li name="1a58" id="1a58" class="graf graf--li graf-after--li">a settings window (with accompanying HTML, CSS and JavaScript files),</li>
            <li name="4957" id="4957" class="graf graf--li graf-after--li"><em class="markup--em markup--li-em">ipc</em> messages to open and close the settings window and update our global shortcuts and</li>
            <li name="cebe" id="cebe" class="graf graf--li graf-after--li">storing/reading of a settings JSON file from the user system.</li>
           </ul>
           <p name="6821" id="6821" class="graf graf--p graf-after--li">Phew, that’s quite a list.</p>
           <h4 name="ef08" id="ef08" class="graf graf--h4 graf-after--p">Settings button and settings&nbsp;window</h4>
           <p name="f5d2" id="f5d2" class="graf graf--p graf-after--h4">Similar to closing the main window, we’re going to send messages on a <em class="markup--em markup--p-em">channel</em> from <em class="markup--em markup--p-em">index.js </em>when the settings button gets clicked. Add the following to <em class="markup--em markup--p-em">index.js</em>:</p>
           <figure name="a487" id="a487" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/e05a7af18f0a48b4b05e034879372d6a?postId=204203eeb658" data-media-id="e05a7af18f0a48b4b05e034879372d6a" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="e2b1" id="e2b1" class="graf graf--p graf-after--figure">After clicking the settings button, a message on the channel “<em class="markup--em markup--p-em">open-settings-window</em>” gets sent. <em class="markup--em markup--p-em">main.js</em> can now react to that event and open up the new window. Add the following to <em class="markup--em markup--p-em">main.js</em>:</p>
           <figure name="c350" id="c350" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/9eaed185ab86a0c9ab2e3211da380040?postId=204203eeb658" data-media-id="9eaed185ab86a0c9ab2e3211da380040" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="e071" id="e071" class="graf graf--p graf-after--figure">Nothing new to see here, we’re opening up a new window just like we did with the main window. The only difference is that we’re checking if the settings window is already open so that we don’t open up two instances.</p>
           <p name="c295" id="c295" class="graf graf--p graf-after--p">Once that works, we need a way of closing that settings window. Again, we’ll send a message on a channel, but this time from <em class="markup--em markup--p-em">settings.js</em> (as that is where the settings close button is located). Create (or replace the contents of) <em class="markup--em markup--p-em">settings.js</em> with the following:</p>
           <figure name="c88b" id="c88b" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/ae900d448e2aad541b21b7c7b5baa116?postId=204203eeb658" data-media-id="ae900d448e2aad541b21b7c7b5baa116" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="b83c" id="b83c" class="graf graf--p graf-after--figure">And listen on that <em class="markup--em markup--p-em">channel</em> in <em class="markup--em markup--p-em">main.js</em>. Add the following:</p>
           <figure name="899b" id="899b" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/67b1f853bb4c6dd2e88401d8bd90daca?postId=204203eeb658" data-media-id="67b1f853bb4c6dd2e88401d8bd90daca" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="d2c2" id="d2c2" class="graf graf--p graf-after--figure">Our settings window is now ready to implement its own logic.</p>
           <h4 name="4b79" id="4b79" class="graf graf--h4 graf-after--p">Storing and reading user&nbsp;settings</h4>
           <pre name="a3a1" id="a3a1" class="graf graf--pre graf-after--h4"><strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">Follow along with the tag 05-settings-window-working:</em></strong><em class="markup--em markup--pre-em"><br></em>git checkout 05-settings-window-working</pre>
           <p name="f39d" id="f39d" class="graf graf--p graf-after--pre">The process of interacting with the setting windows, storing the settings and promoting them to our application will look like this:</p>
           <ul class="postList">
            <li name="b642" id="b642" class="graf graf--li graf-after--p">create a way of storing and reading user settings in a JSON file,</li>
            <li name="d6dc" id="d6dc" class="graf graf--li graf-after--li">use these settings to display the initial state of the settings window,</li>
            <li name="c1da" id="c1da" class="graf graf--li graf-after--li">update the settings upon user interaction and</li>
            <li name="c3b7" id="c3b7" class="graf graf--li graf-after--li">let the <em class="markup--em markup--li-em">main process</em> know of the changes.</li>
           </ul>
           <p name="d602" id="d602" class="graf graf--p graf-after--li">We could just implement the storing and reading of settings in our <em class="markup--em markup--p-em">main.js</em> file but it sounds like a great use case for writing a little module that we can then include in various places.</p>
           <p name="e85d" id="e85d" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Working with a JSON configuration</strong></p>
           <p name="ce8e" id="ce8e" class="graf graf--p graf-after--p">That’s why we’re going to create <em class="markup--em markup--p-em">configuration.js </em>file<em class="markup--em markup--p-em"> </em>and require it whenever we need it. Node.js uses the <a href="https://nodejs.org/docs/latest/api/modules.html" data-href="https://nodejs.org/docs/latest/api/modules.html" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">CommonJS module pattern</a> which means that you export only your API and other files require/use the functions available on that API.</p>
           <figure name="22ec" id="22ec" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 630px; max-height: 198px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 31.4%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*YnvmoGoSwPb-EMDK5GJwzA@2x.png" data-width="1260" data-height="396" data-action="zoom" data-action-value="1*YnvmoGoSwPb-EMDK5GJwzA@2x.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*YnvmoGoSwPb-EMDK5GJwzA@2x.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*YnvmoGoSwPb-EMDK5GJwzA@2x.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/800/1*YnvmoGoSwPb-EMDK5GJwzA@2x.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             Both main.js and settings.js make use of configuration.js.
            </figcaption>
           </figure>
           <p name="69bc" id="69bc" class="graf graf--p graf-after--figure">To make storing and reading easier, we’ll use the <em class="markup--em markup--p-em">nconf </em>module which abstracts the reading and writing of a JSON file for us. It’s a great fit. But first, we have to include it in the project with the following command executed in the CLI:</p>
           <pre name="376b" id="376b" class="graf graf--pre graf-after--p">npm install --save nconf</pre>
           <p name="3ffe" id="3ffe" class="graf graf--p graf-after--pre">This tells npm to install the <em class="markup--em markup--p-em">nconf </em>module as an application dependency and it will be included and used when we package our application for an end user (in contrast to installing with the <em class="markup--em markup--p-em">save-dev </em>argument which will only include modules for development purposes).</p>
           <p name="dbd0" id="dbd0" class="graf graf--p graf-after--p">The <em class="markup--em markup--p-em">configuration.js</em> file is pretty simple, so let’s examine it fully. Create a <em class="markup--em markup--p-em">configuration.js</em> file in the root of the project with the following contents:</p>
           <figure name="3ec2" id="3ec2" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/27c666d581bbdc0ce2a7caf7d3431746?postId=204203eeb658" data-media-id="27c666d581bbdc0ce2a7caf7d3431746" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="bbca" id="bbca" class="graf graf--p graf-after--figure"><em class="markup--em markup--p-em">nconf</em> only wants to know where to store your settings and we’re giving it the location of the user home folder and a file name. Getting the user home folder is simply a matter of asking Node.js (<em class="markup--em markup--p-em">process.env</em>) and differentiating between various platforms (as observed in the <em class="markup--em markup--p-em">getUserHome()</em> function).</p>
           <p name="8892" id="8892" class="graf graf--p graf-after--p">Storing or reading settings is then accomplished with the built-in methods of <em class="markup--em markup--p-em">nconf </em>(<em class="markup--em markup--p-em">set()</em> for storing, <em class="markup--em markup--p-em">get()</em> for reading with <em class="markup--em markup--p-em">save()</em> and <em class="markup--em markup--p-em">load()</em> for file operations) and exporting the API by using the standard CommonJS <em class="markup--em markup--p-em">module.exports</em> syntax.</p>
           <p name="dd8e" id="dd8e" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Initialising default shortcut key modifiers</strong></p>
           <p name="7f58" id="7f58" class="graf graf--p graf-after--p">Before moving on with settings interaction, let’s initialise the settings in case we’re starting the application for the first time. We’ll store the modifier keys as an array with the key “<em class="markup--em markup--p-em">shortcutKeys</em>” and initialise it in <em class="markup--em markup--p-em">main.js</em>. For all of that to work, we must first require our <em class="markup--em markup--p-em">configuration</em> module:</p>
           <figure name="ffc8" id="ffc8" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/ea4ade746582225a45b79422bfc625e1?postId=204203eeb658" data-media-id="ea4ade746582225a45b79422bfc625e1" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="9e05" id="9e05" class="graf graf--p graf-after--figure">We try reading if there’s anything stored under the setting key “<em class="markup--em markup--p-em">shortcutKeys</em>”. If not, we set an initial value.</p>
           <p name="2d92" id="2d92" class="graf graf--p graf-after--p">As an additional thing in <em class="markup--em markup--p-em">main.js</em>, we’ll rewrite the registering of global shortcut keys as a function that we can call later when we update our settings. Remove the registering of shortcut keys from <em class="markup--em markup--p-em">main.js</em> and alter the file this way:</p>
           <figure name="eb3e" id="eb3e" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/3dfb975512d79960ca75ba4c477991ca?postId=204203eeb658" data-media-id="3dfb975512d79960ca75ba4c477991ca" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="f81d" id="f81d" class="graf graf--p graf-after--figure">The function resets the global shortcuts so that we can set new ones, reads the modifier keys array from settings, transforms it to a <a href="https://github.com/atom/electron/blob/master/docs/api/accelerator.md" data-href="https://github.com/atom/electron/blob/master/docs/api/accelerator.md" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">Accelerator-compatible</a> string and does the usual global shortcut key registration.</p>
           <p name="283f" id="283f" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Interaction in the settings window</strong></p>
           <p name="a46a" id="a46a" class="graf graf--p graf-after--p">Back in the <em class="markup--em markup--p-em">settings.js</em> file, we need to bind click events which are going to change our global shortcuts. First, we’ll iterate through the checkboxes and mark the active ones (reading the values from the configuration module):</p>
           <figure name="7150" id="7150" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/6b428ee05fe643cdd8da2a88b825491c?postId=204203eeb658" data-media-id="6b428ee05fe643cdd8da2a88b825491c" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="106e" id="106e" class="graf graf--p graf-after--figure">And now we’ll bind the checkbox behaviour. Take into consideration that the settings window (and its <em class="markup--em markup--p-em">renderer process) </em>are not allowed to change GUI binding. That means that we’ll need to send an <em class="markup--em markup--p-em">ipc </em>message from <em class="markup--em markup--p-em">settings.js</em> (and handle that message later)<em class="markup--em markup--p-em">:</em></p>
           <figure name="eec3" id="eec3" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/79819c882747475b06d74e59dd11625f?postId=204203eeb658" data-media-id="79819c882747475b06d74e59dd11625f" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="a369" id="a369" class="graf graf--p graf-after--figure">It’s a bigger piece of code but still pretty simple.<br>We iterate through all the checkboxes, bind a click event and on each click check if the settings array contains the modifier key or not?—?and according to that result, modify the array, save the result to settings and send a message to the <em class="markup--em markup--p-em">main process</em> which should update our global shortcuts.</p>
           <p name="bac6" id="bac6" class="graf graf--p graf-after--p">All that’s left to do is subscribe to the <em class="markup--em markup--p-em">ipc</em> channel “<em class="markup--em markup--p-em">set-global-shortcuts</em>” in <em class="markup--em markup--p-em">main.js</em> and update our global shortcuts:</p>
           <figure name="aba6" id="aba6" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/1a2f49a86a5e8022baa6ca20ebe59aba?postId=204203eeb658" data-media-id="1a2f49a86a5e8022baa6ca20ebe59aba" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="72c2" id="72c2" class="graf graf--p graf-after--figure graf--trailing">Easy. And with that, our global shortcut keys are configurable!</p>
          </div>
         </div>
        </section>
        <section name="7556" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="5990" id="5990" class="graf graf--h3 graf--leading">What’s on the&nbsp;menu?</h3>
           <pre name="919f" id="919f" class="graf graf--pre graf-after--h3"><strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">Follow along with the tag 06-shortcuts-configurable:</em></strong><em class="markup--em markup--pre-em"><br></em>git checkout 06-shortcuts-configurable</pre>
           <p name="6bbe" id="6bbe" class="graf graf--p graf-after--pre">Another important concept in desktop applications are menus. There’s the always useful context menu (AKA right-click menu), tray menu (bound to a tray icon), application menu (on OS X), etc.</p>
           <figure name="2129" id="2129" class="graf graf--figure graf--layoutInsetLeft graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 247px; max-height: 136.5px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 55.300000000000004%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*HinA-91xPYoCKel_obvuug@2x.png" data-width="494" data-height="273" data-action="zoom" data-action-value="1*HinA-91xPYoCKel_obvuug@2x.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*HinA-91xPYoCKel_obvuug@2x.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/400/1*HinA-91xPYoCKel_obvuug@2x.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/400/1*HinA-91xPYoCKel_obvuug@2x.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             Megamenu.
            </figcaption>
           </figure>
           <p name="f1c9" id="f1c9" class="graf graf--p graf-after--figure">In this guide we’ll add a tray icon with a menu. We’ll also use this opportunity to explore an other way of inter-process communication?—<a href="https://github.com/atom/electron/blob/master/docs/api/remote.md" data-href="https://github.com/atom/electron/blob/master/docs/api/remote.md" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">?the <em class="markup--em markup--p-em">remote</em> module</a>.</p>
           <p name="ad67" id="ad67" class="graf graf--p graf-after--p">The <em class="markup--em markup--p-em">remote</em> module makes RPC style calls from the <em class="markup--em markup--p-em">renderer process</em> to the <em class="markup--em markup--p-em">main process</em>. You require modules and work with them in the <em class="markup--em markup--p-em">renderer process</em> but they’re being instantiated in the <em class="markup--em markup--p-em">main process</em> and methods that you call on them are being executed in the <em class="markup--em markup--p-em">main process</em>. In practice, it means that you remotely request native GUI modules in <em class="markup--em markup--p-em">index.js </em>and call methods on them but they get executed in <em class="markup--em markup--p-em">main.js</em>. In that way, you could require the BrowserWindow module from <em class="markup--em markup--p-em">index.js</em> and instantiate a new browser window. Behind the scenes, that’s still a synchronous call to the <em class="markup--em markup--p-em">main process</em> which actually creates that new browser window.</p>
           <figure name="2c79" id="2c79" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 660px; max-height: 338px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 51.2%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*vLP63PA79c_s3ZdbJCe-yg@2x.png" data-width="1320" data-height="676" data-action="zoom" data-action-value="1*vLP63PA79c_s3ZdbJCe-yg@2x.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*vLP63PA79c_s3ZdbJCe-yg@2x.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/800/1*vLP63PA79c_s3ZdbJCe-yg@2x.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/800/1*vLP63PA79c_s3ZdbJCe-yg@2x.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             Call me&nbsp;maybe?
            </figcaption>
           </figure>
           <p name="5231" id="5231" class="graf graf--p graf-after--figure">Let’s see how we’d create a menu and bind it to a tray icon while doing it in a <em class="markup--em markup--p-em">renderer process</em>. Add the following to <em class="markup--em markup--p-em">index.js</em>:</p>
           <figure name="eb73" id="eb73" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/1d0993482e49e17c4e094b79b36bfbdb?postId=204203eeb658" data-media-id="1d0993482e49e17c4e094b79b36bfbdb" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="5d29" id="5d29" class="graf graf--p graf-after--figure">The native GUI modules (<em class="markup--em markup--p-em">menu</em> and <em class="markup--em markup--p-em">tray</em>) were required remotely and that way it’s safe to use them here.</p>
           <p name="1ff0" id="1ff0" class="graf graf--p graf-after--p">A tray icon is defined through its icon. OS X supports image templates (by convention, an image is considered a template image if its filename ends with “Template”) which makes it easy to work with the dark and light themes. Other OSes get a regular icon.</p>
           <p name="1cb0" id="1cb0" class="graf graf--p graf-after--p graf--trailing">There are multiple ways of building a menu in Electron. This way creates a menu template (a simple array with menu items) and builds a menu from that template. At the end, the new menu is attached to the tray icon.</p>
          </div>
         </div>
        </section>
        <section name="ef94" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="1c2d" id="1c2d" class="graf graf--h3 graf--leading">Packaging your application</h3>
           <pre name="6624" id="6624" class="graf graf--pre graf-after--h3"><strong class="markup--strong markup--pre-strong"><em class="markup--em markup--pre-em">Follow along with the tag 07-ready-for-packaging:</em></strong><em class="markup--em markup--pre-em"><br></em>git checkout 07-ready-for-packaging</pre>
           <p name="c3db" id="c3db" class="graf graf--p graf-after--pre">What’s the use of an application which you can’t let people download and use?</p>
           <figure name="1d8e" id="1d8e" class="graf graf--figure graf--layoutInsetLeft graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 324px; max-height: 297px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 91.7%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*O-ZI4nwQON9kNosiyfEfMw@2x.png" data-width="648" data-height="594" data-action="zoom" data-action-value="1*O-ZI4nwQON9kNosiyfEfMw@2x.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/30/1*O-ZI4nwQON9kNosiyfEfMw@2x.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/400/1*O-ZI4nwQON9kNosiyfEfMw@2x.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/400/1*O-ZI4nwQON9kNosiyfEfMw@2x.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             Wrap it&nbsp;up.
            </figcaption>
           </figure>
           <p name="5d0d" id="5d0d" class="graf graf--p graf-after--figure">Packaging your application for all platforms is easy <a href="https://github.com/maxogden/electron-packager" data-href="https://github.com/maxogden/electron-packager" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">using <em class="markup--em markup--p-em">electron-packager</em></a>. In a nutshell, electron-packager abstracts away all work going into wrapping your app with Electron and generates all platforms for which you’re going to publish.</p>
           <p name="4926" id="4926" class="graf graf--p graf-after--p">It can be used as a CLI application or as part of a build process. Building a more complicated build scenario is not in the scope of this article, but we’ll leverage the power of <em class="markup--em markup--p-em">npm</em> scripts to make packaging easier. Using electron-packager is trivial, the general form when packaging an application is:</p>
           <pre name="fd55" id="fd55" class="graf graf--pre graf-after--p">electron-packager &lt;location of project&gt; &lt;name of project&gt; &lt;platform&gt; &lt;architecture&gt; &lt;electron version&gt; &lt;optional options&gt;</pre>
           <p name="f981" id="f981" class="graf graf--p graf-after--pre">where:</p>
           <ul class="postList">
            <li name="f9f5" id="f9f5" class="graf graf--li graf-after--p">location of project points to the folder where your project is,</li>
            <li name="a1a3" id="a1a3" class="graf graf--li graf-after--li">name of project defines the name of your project,</li>
            <li name="1424" id="1424" class="graf graf--li graf-after--li">platform decides for which platforms to build (<em class="markup--em markup--li-em">all </em>to build for Windows, Mac and Linux),</li>
            <li name="8c17" id="8c17" class="graf graf--li graf-after--li">architecture decides for which architectures to build (x86 or x64, <em class="markup--em markup--li-em">all</em> for both) and</li>
            <li name="a8fb" id="a8fb" class="graf graf--li graf-after--li">electron version lets you choose which Electron version to use.</li>
           </ul>
           <p name="f16d" id="f16d" class="graf graf--p graf-after--li">The first package is going to take a while because all the binaries for all platforms have to be downloaded. Subsequent packages are much faster.</p>
           <p name="41f6" id="41f6" class="graf graf--p graf-after--p">I package the sound machine typically like this (on a Mac):</p>
           <pre name="7570" id="7570" class="graf graf--pre graf-after--p">electron-packager ~/Projects/sound-machine SoundMachine --all --version=0.30.2 --out=~/Desktop --overwrite --icon=~/Projects/sound-machine/app/img/app-icon.icns</pre>
           <p name="d15b" id="d15b" class="graf graf--p graf-after--pre">The new options included in the command are self-explanatory. To get a nice icon, you’ll first have to convert it to&nbsp;.icns (for Mac) and/or&nbsp;.ico (for Windows). Just search for a tool to convert your PNG file to these formats like <a href="https://iconverticons.com/online/" data-href="https://iconverticons.com/online/" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">this one</a> (be sure to download the file with the&nbsp;<em class="markup--em markup--p-em">.icns</em> extension and not&nbsp;<em class="markup--em markup--p-em">.hqx</em>). If packaging for Windows from a non-Windows OS, you’ll need wine on your path (Mac users can use brew, while Linux users can use apt-get).</p>
           <p name="789e" id="789e" class="graf graf--p graf-after--p">It doesn’t make sense to run that big command every time. We can add another script to our <em class="markup--em markup--p-em">package.json</em>. First of all, install electron-packager as a development dependency:</p>
           <pre name="0a33" id="0a33" class="graf graf--pre graf-after--p">npm install --save-dev electron-packager</pre>
           <p name="77d7" id="77d7" class="graf graf--p graf-after--pre">Now we can add a new script to our <em class="markup--em markup--p-em">package.json</em> file:</p>
           <figure name="e976" id="e976" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/bf18bf5b60b11f11af18ed2bdd1ceea0?postId=204203eeb658" data-media-id="bf18bf5b60b11f11af18ed2bdd1ceea0" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
            <figcaption class="imageCaption">
             Packaging just got a lot easier.
            </figcaption>
           </figure>
           <p name="a3c0" id="a3c0" class="graf graf--p graf-after--figure">And then run the following in CLI:</p>
           <pre name="9902" id="9902" class="graf graf--pre graf-after--p">npm run-script package</pre>
           <p name="6a21" id="6a21" class="graf graf--p graf-after--pre">The package command starts the electron-packager, looks in the current directory and build to Desktop. The script should be changed if you are using Windows, but that is trivial.</p>
           <p name="1ba9" id="1ba9" class="graf graf--p graf-after--p">The sound machine in its current state ends up weighing a whopping 100 MB. Don’t worry, once you archive it (zip or an archive type of your choice), it’ll lose more than half its size.</p>
           <p name="067b" id="067b" class="graf graf--p graf-after--p graf--trailing">If you really want to go to town, take a look at <a href="https://github.com/loopline-systems/electron-builder" data-href="https://github.com/loopline-systems/electron-builder" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank"><em class="markup--em markup--p-em">electron-builder</em></a> which takes the packages produced by <em class="markup--em markup--p-em">electron-packager</em> and creates automated installers.</p>
          </div>
         </div>
        </section>
        <section name="8e4a" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="12f5" id="12f5" class="graf graf--h3 graf--leading">Additional features to&nbsp;add</h3>
           <p name="da5c" id="da5c" class="graf graf--p graf-after--h3">With the application packaged and ready to go, you can now start developing your own features.</p>
           <p name="31b4" id="31b4" class="graf graf--p graf-after--p">Here are some ideas:</p>
           <ul class="postList">
            <li name="8968" id="8968" class="graf graf--li graf-after--p">a help screen with info about the app, its shortcuts and author,</li>
            <li name="416d" id="416d" class="graf graf--li graf-after--li">adding an icon and a menu entry to open the info screen,</li>
            <li name="17a4" id="17a4" class="graf graf--li graf-after--li">build a nice packaging script for faster builds and distribution,</li>
            <li name="03ba" id="03ba" class="graf graf--li graf-after--li">add notifications using <a href="https://github.com/mikaelbr/node-notifier" data-href="https://github.com/mikaelbr/node-notifier" class="markup--anchor markup--li-anchor" rel="nofollow noopener" target="_blank">node-notifier</a> to let users know which sound they’re playing,</li>
            <li name="6fb2" id="6fb2" class="graf graf--li graf-after--li">use <em class="markup--em markup--li-em">lodash</em> to a greater extent for a cleaner code base (like iterating through arrays),</li>
            <li name="b3fe" id="b3fe" class="graf graf--li graf-after--li">minify all your CSS and JavaScript with a build tool before packaging,</li>
            <li name="5364" id="5364" class="graf graf--li graf-after--li">combine the aforementioned node-notifier with a server call to check for new versions of your app and notify users…</li>
           </ul>
           <p name="2b28" id="2b28" class="graf graf--p graf-after--li graf--trailing">For a nice challenge?—?try extracting your Sound machine browser windows logic and using something like browserify to create a web page with the same sound machine you’ve just created. One code base?—?two products (desktop application and web application). Nifty!</p>
          </div>
         </div>
        </section>
        <section name="0e04" class="section section--body">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="1020" id="1020" class="graf graf--h3 graf--leading">Diving deeper into&nbsp;Electron</h3>
           <p name="ee85" id="ee85" class="graf graf--p graf-after--h3">We’ve only scratched the surface of what Electron brings to the table. It’s pretty easy to do things like watching for power events on the host machine or getting various information on the screen (like cursor position).</p>
           <p name="2dca" id="2dca" class="graf graf--p graf-after--p">For all of those built-in utilities (and generally while developing applications with Electron), <a href="https://github.com/atom/electron/tree/master/docs/api" data-href="https://github.com/atom/electron/tree/master/docs/api" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">check out the Electron API docs</a>.</p>
           <p name="0cd6" id="0cd6" class="graf graf--p graf-after--p">These Electron API docs are a part of the docs folder at the Electron GitHub repository and that folder is well worth checking out.</p>
           <p name="2c0f" id="2c0f" class="graf graf--p graf-after--p">Sindre Sorhus maintans an <a href="https://github.com/sindresorhus/awesome-electron" data-href="https://github.com/sindresorhus/awesome-electron" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">awesome list of Electron resources</a> on which you can find really cool projects and information like an excellent overview of a typical Electron application architecture which can serve as a refresher on the code we’ve been developing up until now.</p>
           <p name="bf42" id="bf42" class="graf graf--p graf-after--p graf--trailing">In the end, Electron is based on io.js (which is going to be merged back into Node.js) and most of Node.js modules are compatible and can be used to extend your application. Just browse <a href="https://www.npmjs.com/" data-href="https://www.npmjs.com/" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">npmjs.com</a> and grab what you need.</p>
          </div>
         </div>
        </section>
        <section name="7bbc" class="section section--body section--last">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h3 name="8f10" id="8f10" class="graf graf--h3 graf--leading">Is that&nbsp;all?</h3>
           <p name="32b5" id="32b5" class="graf graf--p graf-after--h3">Not by a long shot.</p>
           <p name="488a" id="488a" class="graf graf--p graf-after--p">Now, it’s time to build a bigger application. I’ve mostly skipped on using extra libraries or build tools in this guide to concentrate on important issues but you can easily write your app in ES6 or Typescript, use Angular or React and simplify your build with gulp or Grunt.</p>
           <p name="ede4" id="ede4" class="graf graf--p graf-after--p">With your favorite language, framework and build tool, why not build a Flickr sync desktop application using the Flickr API and node-flickrapi or a GMail client using Google’s officiall Node.js client library?</p>
           <p name="4f2a" id="4f2a" class="graf graf--p graf-after--p graf--trailing">Pick an idea that’s going to motivate you, init a repository and just do it.</p>
          </div>
         </div>
        </section>
       </div>
       <footer class="u-paddingTop10">
        <div class="container u-maxWidth740">
         <div class="row">
          <div class="col u-size12of12"></div>
         </div>
         <div class="row">
          <div class="col u-size12of12 js-postTags">
           <div class="u-paddingBottom10">
            <ul class="tags tags--postTags tags--borderless">
             <li><a class="link u-baseColor--link" href="https://medium.com/tag/javascript?source=post" data-action-source="post">JavaScript</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.com/tag/software-development?source=post" data-action-source="post">Software Development</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.com/tag/desktop-app?source=post" data-action-source="post">Desktop App</a></li>
            </ul>
           </div>
          </div>
         </div>
         <section class="u-paddingTop20 u-borderTopLightest u-marginTop10">
          <div class="u-textColorDarker u-fontSize22 u-marginBottom7">
           Show your support
          </div>
          <p class="u-textColorDark u-fontSize16">Clapping shows how much you appreciated Kristian Poslek’s story.</p>
         </section>
         <div class="postActions u-flexCenter js-postActionsFooter">
          <div class="u-flex1">
           <div class="multirecommend js-actionMultirecommend u-flexCenter u-width60" data-post-id="204203eeb658" data-is-icon-29px="true" data-is-circle="true" data-has-recommend-list="true" data-source="post_actions_footer">
            <div class="u-relative u-foreground">
             <button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal" data-action="sign-in-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/204203eeb658" data-action-source="post_actions_footer" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0">
                <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
                 <path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd" />
                </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0">
                <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
                 <g fill-rule="evenodd">
                  <path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z" />
                  <path d="M13.285.48l-1.916.881 2.37 2.837z" />
                  <path d="M21.719 1.361L19.79.501l-.44 3.697z" />
                  <path d="M16.502 3.298L15.481 0h2.043z" />
                 </g>
                </svg></span></span></button>
             <div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;">
              <button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight" data-action="multivote-undo" data-action-value="204203eeb658"><span class="svgIcon svgIcon--removeThin svgIcon--29px">
                <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
                 <path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd" />
                </svg></span></button>
             </div>
            </div>
            <span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-marginLeft10"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton" data-action="show-recommends" data-action-value="204203eeb658">1.3K</button></span>
           </div>
          </div>
          <div class="u-flex0 buttonSet buttonSet--narrow">
           <div class="buttonSet-inner">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" data-action="scroll-to-responses" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--response svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M21.27 20.058c1.89-1.826 2.754-4.17 2.754-6.674C24.024 8.21 19.67 4 14.1 4 8.53 4 4 8.21 4 13.384c0 5.175 4.53 9.385 10.1 9.385 1.007 0 2-.14 2.95-.41.285.25.592.49.918.7 1.306.87 2.716 1.31 4.19 1.31.276-.01.494-.14.6-.36a.625.625 0 0 0-.052-.65c-.61-.84-1.042-1.71-1.282-2.58a5.417 5.417 0 0 1-.154-.75zm-3.85 1.324l-.083-.28-.388.12a9.72 9.72 0 0 1-2.85.424c-4.96 0-8.99-3.706-8.99-8.262 0-4.556 4.03-8.263 8.99-8.263 4.95 0 8.77 3.71 8.77 8.27 0 2.25-.75 4.35-2.5 5.92l-.24.21v.32c0 .07 0 .19.02.37.03.29.1.6.19.92.19.7.49 1.4.89 2.08-.93-.14-1.83-.49-2.67-1.06-.34-.22-.88-.48-1.16-.74z" />
              </svg></span></button>
            <button class="button button--chromeless u-baseColor--buttonNormal" data-action="scroll-to-responses">59</button>
           </div>
           <div class="buttonSet-inner u-xs-hide">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--twitter svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z" />
              </svg></span></button>
           </div>
           <div class="buttonSet-inner u-xs-hide">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--facebook svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4" />
              </svg></span></button>
           </div>
           <div class="buttonSet-inner u-xs-show">
            <button class="button button--large button--dark button--chromeless u-baseColor--buttonDark button--withIcon button--withSvgIcon js-shareStoryButton" title="Share this story on Twitter or Facebook" aria-label="Share this story on Twitter or Facebook" data-action="show-share-popover" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--share svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M20.385 8H19a.5.5 0 1 0 .011 1h1.39c.43 0 .84.168 1.14.473.31.305.48.71.48 1.142v10.77c0 .43-.17.837-.47 1.142-.3.305-.71.473-1.14.473H8.62c-.43 0-.84-.168-1.144-.473a1.603 1.603 0 0 1-.473-1.142v-10.77c0-.43.17-.837.48-1.142A1.599 1.599 0 0 1 8.62 9H10a.502.502 0 0 0 0-1H8.615c-.67 0-1.338.255-1.85.766-.51.51-.765 1.18-.765 1.85v10.77c0 .668.255 1.337.766 1.848.51.51 1.18.766 1.85.766h11.77c.668 0 1.337-.255 1.848-.766.51-.51.766-1.18.766-1.85v-10.77c0-.668-.255-1.337-.766-1.848A2.61 2.61 0 0 0 20.384 8zm-8.67-2.508L14 3.207v8.362c0 .27.224.5.5.5s.5-.23.5-.5V3.2l2.285 2.285a.49.49 0 0 0 .704-.001.511.511 0 0 0 0-.708l-3.14-3.14a.504.504 0 0 0-.71 0L11 4.776a.501.501 0 0 0 .71.706" fill-rule="evenodd" />
              </svg></span></button>
           </div>
          </div>
         </div>
        </div>
        <div class="js-postPromotionWrapper postPromotionWrapper" data-location-id="footer_above_post_attribution"></div>
        <div class="u-maxWidth740 u-paddingTop20 u-marginTop10 u-borderTopLightest container u-paddingBottom20 u-xs-paddingBottom10 js-postAttributionFooterContainer">
         <div class="row js-postFooterInfo">
          <div class="col u-size6of12 u-xs-size12of12">
           <li class="u-block u-paddingBottom18 js-cardUser">
            <div class="u-marginLeft20 u-floatRight">
             <span class="followState js-followState" data-user-id="5267c97a9fa1"><button class="button button--small u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton" data-action="sign-in-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-action-source="footer_card"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton" data-action="sign-in-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/5267c97a9fa1" data-action-source="footer_card--------------------------follow_footer"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span>
            </div>
            <div class="u-tableCell ">
             <a class="link avatar u-baseColor--link" href="https://medium.com/@bojzi?source=footer_card" title="Go to the profile of Kristian Poslek" aria-label="Go to the profile of Kristian Poslek" data-action-source="footer_card" data-user-id="5267c97a9fa1" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*pRwc8SoQ6_O7qUzjsVxWkg.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Kristian Poslek"></a>
            </div>
            <div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15">
             <h3 class="u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal" href="https://medium.com/@bojzi" property="cc:attributionName" title="Go to the profile of Kristian Poslek" aria-label="Go to the profile of Kristian Poslek" rel="author cc:attributionUrl" data-user-id="5267c97a9fa1" dir="auto">Kristian Poslek</a></h3>
             <p class="u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">Agile UX Expert at comSysto and technology nut.</p>
            </div></li>
          </div>
          <div class="col u-size6of12 u-xs-size12of12 u-xs-marginTop30">
           <li class="u-block u-paddingBottom18 js-cardCollection">
            <div class="u-marginLeft20 u-floatRight">
             <button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal js-relationshipButton" data-action="sign-in-prompt" data-sign-in-action="toggle-follow-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/developers-writing" data-action-source="----ce67810c8a52" data-collection-id="ce67810c8a52"><span class="button-label  js-buttonLabel">Follow</span></button>
            </div>
            <div class="u-tableCell ">
             <a class="link avatar avatar--roundedRectangle u-baseColor--link" href="https://medium.com/developers-writing?source=footer_card" title="Go to Developers Writing" aria-label="Go to Developers Writing" data-action-source="footer_card"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*YljLzTDkbwryga9Je01MyA.jpeg" class="avatar-image u-size60x60" alt="Developers Writing"></a>
            </div>
            <div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15">
             <h3 class="u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal" href="https://medium.com/developers-writing?source=footer_card" rel="collection" data-action-source="footer_card">Developers Writing</a></h3>
             <p class="u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">Developers may not need to blog; but here your words are not wasted.</p>
             <div class="buttonSet"></div>
            </div></li>
          </div>
         </div>
        </div>
        <div class="js-postFooterPlacements"></div>
        <div class="u-padding0 u-clearfix u-backgroundGrayLightest u-print-hide supplementalPostContent js-responsesWrapper"></div>
        <div class="supplementalPostContent js-readNext"></div>
        <div class="supplementalPostContent js-heroPromo"></div>
       </footer>
      </article>
     </main>
     <div class="u-marginAuto u-maxWidth1000">
      <div class="js-postShareWidget u-foreground u-sm-hide u-transition--fadeOut300 u-fixed">
       <ul>
        <li class="u-textAlignCenter">
         <div class="multirecommend js-actionMultirecommend u-flexColumn u-marginBottom10 u-width60" data-post-id="204203eeb658" data-is-icon-29px="true" data-is-vertical="true" data-is-circle="true" data-is-compressed="true" data-has-recommend-list="true" data-source="post_share_widget">
          <div class="u-relative u-foreground">
           <button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal" data-action="sign-in-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/204203eeb658" data-action-source="post_share_widget" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0">
              <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
               <path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd" />
              </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0">
              <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
               <g fill-rule="evenodd">
                <path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z" />
                <path d="M13.285.48l-1.916.881 2.37 2.837z" />
                <path d="M21.719 1.361L19.79.501l-.44 3.697z" />
                <path d="M16.502 3.298L15.481 0h2.043z" />
               </g>
              </svg></span></span></button>
           <div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;">
            <button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight" data-action="multivote-undo" data-action-value="204203eeb658"><span class="svgIcon svgIcon--removeThin svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd" />
              </svg></span></button>
           </div>
          </div>
          <span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-flexOrderNegative1 u-height20 u-marginBottom7"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton u-block u-marginAuto" data-action="show-recommends" data-action-value="204203eeb658">1.3K</button></span>
         </div></li>
        <li class="u-textAlignCenter"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_share_widget"><span class="svgIcon svgIcon--twitter svgIcon--29px">
           <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
            <path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z" />
           </svg></span></button></li>
        <li class="u-textAlignCenter"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_share_widget"><span class="svgIcon svgIcon--facebook svgIcon--29px">
           <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
            <path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4" />
           </svg></span></button></li>
        <li class="u-textAlignCenter"><button class="button button--large button--dark button--chromeless is-touchIconFadeInPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon button--bookmark js-bookmarkButton" title="Bookmark this story to read later" aria-label="Bookmark this story to read later" data-action="sign-in-prompt" data-sign-in-action="add-to-bookmarks" data-requires-token="true" data-redirect="https://medium.com/_/bookmark/p/204203eeb658"><span class="button-defaultState"><span class="svgIcon svgIcon--bookmark svgIcon--29px">
            <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
             <path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4zM21 23l-5.91-3.955-.148-.107a.751.751 0 0 0-.884 0l-.147.107L8 23V6.615C8 5.725 8.725 5 9.615 5h9.77C20.275 5 21 5.725 21 6.615V23z" fill-rule="evenodd" />
            </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--bookmarkFilled svgIcon--29px">
            <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
             <path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4z" fill-rule="evenodd" />
            </svg></span></span></button></li>
       </ul>
      </div>
     </div>
     <div class="u-fixed u-bottom0 u-sizeFullWidth u-backgroundWhite u-boxShadowTop u-borderBox u-paddingTop10 u-paddingBottom10 u-zIndexMetabar u-xs-paddingLeft10 u-xs-paddingRight10 js-stickyFooter">
      <div class="u-maxWidth700 u-marginAuto u-flexCenter">
       <div class="u-fontSize16 u-flex1 u-flexCenter">
        <div class="u-flex0 u-inlineBlock u-paddingRight20 u-xs-paddingRight10">
         <a class="link avatar avatar--roundedRectangle u-baseColor--link" href="https://medium.com/developers-writing" title="Go to Developers Writing" aria-label="Go to Developers Writing"><img src="https://cdn-images-1.medium.com/fit/c/80/80/1*YljLzTDkbwryga9Je01MyA.jpeg" class="avatar-image avatar-image--smaller" alt="Developers Writing"></a>
        </div>
        <div class="u-flex1 u-inlineBlock">
         <div class="u-xs-hide">
          Never miss a story from
          <strong> Developers Writing</strong>, when you sign up for Medium. 
          <a class="link link--accent u-accentColor--textNormal u-accentColor--textDarken u-baseColor--link" href="https://medium.com/@Medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg" data-action-source="sticky_footer">Learn more</a>
         </div>
         <div class="u-xs-show">
          Never miss a story from
          <strong> Developers Writing</strong>
         </div>
        </div>
       </div>
       <div class="u-marginLeft50 u-xs-marginAuto">
        <button class="button button--primary button--dark is-active u-noUserSelect button--withChrome u-accentColor--buttonDark u-uiTextSemibold u-textUppercase u-fontSize12 button--followCollection js-followCollectionButton" data-action="sign-in-prompt" data-sign-in-action="toggle-subscribe-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/developers-writing" data-action-source="sticky_footer----ce67810c8a52----------------------post_metabar"><span class="button-label  button-defaultState js-buttonLabel">Get updates</span><span class="button-label button-activeState">Get updates</span></button>
       </div>
      </div>
     </div>
     <div class="js-drawerContainer"></div>
     <style class="js-collectionStyle">
.u-accentColor--borderLight {border-color: #599187 !important;}
.u-accentColor--borderNormal {border-color: #599187 !important;}
.u-accentColor--borderDark {border-color: #507C74 !important;}
.u-accentColor--iconLight .svgIcon,.u-accentColor--iconLight.svgIcon {fill: #599187 !important;}
.u-accentColor--iconNormal .svgIcon,.u-accentColor--iconNormal.svgIcon {fill: #599187 !important;}
.u-accentColor--iconDark .svgIcon,.u-accentColor--iconDark.svgIcon {fill: #507C74 !important;}
.u-accentColor--textNormal {color: #507C74 !important;}
.u-accentColor--hoverTextNormal:hover {color: #507C74 !important;}
.u-accentColor--textNormal.u-accentColor--textDarken:hover {color: #4B716A !important;}
.u-accentColor--textDark {color: #4B716A !important;}
.u-accentColor--backgroundLight {background-color: #599187 !important;}
.u-accentColor--backgroundNormal {background-color: #599187 !important;}
.u-accentColor--backgroundDark {background-color: #507C74 !important;}
.u-accentColor--buttonDark {border-color: #507C74 !important; color: #4B716A !important;}
.u-accentColor--buttonDark:hover {border-color: #4B716A !important;}
.u-accentColor--buttonDark .icon:before,.u-accentColor--buttonDark .svgIcon{color: #507C74 !important; fill: #507C74 !important;}
.u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: #599187 !important; color: #507C74 !important;}
.u-accentColor--buttonNormal:hover {border-color: #507C74 !important;}
.u-accentColor--buttonNormal .icon:before,.u-accentColor--buttonNormal .svgIcon{color: #599187 !important; fill: #599187 !important;}
.u-accentColor--buttonNormal.button--filled .icon:before,.u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-accentColor--buttonDark.button--filled,.u-accentColor--buttonDark.button--withChrome.is-active,.u-accentColor--fillWhenActive.is-active {background-color: #507C74 !important; border-color: #507C74 !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: #599187 !important; border-color: #599187 !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.postArticle.is-withAccentColors .markup--user,.postArticle.is-withAccentColors .markup--query {color: #507C74 !important;}.u-tintBgColor {background-color: rgba(151, 209, 198, 1) !important;}.u-tintBgColor .u-fadeLeft:before {background-image: linear-gradient(to right, rgba(151, 209, 198, 1) 0%, rgba(151, 209, 198, 0) 100%) !important;}.u-tintBgColor .u-fadeRight:after {background-image: linear-gradient(to right, rgba(151, 209, 198, 0) 0%, rgba(151, 209, 198, 1) 100%) !important;}
.u-tintSpectrum .u-baseColor--borderLight {border-color: #5B938A !important;}
.u-tintSpectrum .u-baseColor--borderNormal {border-color: #41796F !important;}
.u-tintSpectrum .u-baseColor--borderDark {border-color: #225C53 !important;}
.u-tintSpectrum .u-baseColor--iconLight .svgIcon,.u-tintSpectrum .u-baseColor--iconLight.svgIcon {fill: #5B938A !important;}
.u-tintSpectrum .u-baseColor--iconNormal .svgIcon,.u-tintSpectrum .u-baseColor--iconNormal.svgIcon {fill: #41796F !important;}
.u-tintSpectrum .u-baseColor--iconDark .svgIcon,.u-tintSpectrum .u-baseColor--iconDark.svgIcon {fill: #225C53 !important;}
.u-tintSpectrum .u-baseColor--textNormal {color: #41796F !important;}
.u-tintSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: #0D4C44 !important;}
.u-tintSpectrum .u-baseColor--textDark {color: #0D4C44 !important;}
.u-tintSpectrum .u-baseColor--textDarker {color: #0D4C44 !important;}
.u-tintSpectrum .u-baseColor--backgroundLight {background-color: #5B938A !important;}
.u-tintSpectrum .u-baseColor--backgroundNormal {background-color: #41796F !important;}
.u-tintSpectrum .u-baseColor--backgroundDark {background-color: #225C53 !important;}
.u-tintSpectrum .u-baseColor--buttonLight {border-color: #5B938A !important; color: #5B938A !important;}
.u-tintSpectrum .u-baseColor--buttonLight:hover {border-color: #5B938A !important;}
.u-tintSpectrum .u-baseColor--buttonLight .icon:before,.u-tintSpectrum .u-baseColor--buttonLight .svgIcon {color: #5B938A !important; fill: #5B938A !important;}
.u-tintSpectrum .u-baseColor--buttonDark {border-color: #225C53 !important; color: #0D4C44 !important;}
.u-tintSpectrum .u-baseColor--buttonDark:hover {border-color: #0D4C44 !important;}
.u-tintSpectrum .u-baseColor--buttonDark .icon:before,.u-tintSpectrum .u-baseColor--buttonDark .svgIcon {color: #225C53 !important; fill: #225C53 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal {border-color: #41796F !important; color: #41796F !important;}
.u-tintSpectrum .u-baseColor--buttonNormal:hover {border-color: #225C53 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal .icon:before,.u-tintSpectrum .u-baseColor--buttonNormal .svgIcon {color: #41796F !important; fill: #41796F !important;}
.u-tintSpectrum .u-baseColor--buttonDark.button--filled,.u-tintSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: #225C53 !important; border-color: #225C53 !important; color: rgba(151, 209, 198, 1) !important; fill: rgba(151, 209, 198, 1) !important;}
.u-tintSpectrum .u-baseColor--buttonNormal.button--filled,.u-tintSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: #41796F !important; border-color: #41796F !important; color: rgba(151, 209, 198, 1) !important; fill: rgba(151, 209, 198, 1) !important;}
.u-tintSpectrum .u-baseColor--link {color: #41796F !important;}
.u-tintSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: #0D4C44 !important;}
.u-tintSpectrum .u-baseColor--link.link--darken:hover,.u-tintSpectrum .u-baseColor--link.link--darken:focus,.u-tintSpectrum .u-baseColor--link.link--darken:active {color: #0D4C44 !important;}
.u-tintSpectrum .u-baseColor--link.link--dark {color: #0D4C44 !important;}
.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:active {color: #0D4C44 !important;}
.u-tintSpectrum .u-baseColor--link.link--darker {color: #0D4C44 !important;}
.u-tintSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: #5B938A;}
.u-tintSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: #5B938A;}
.u-tintSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: #5B938A;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: #80B9AF !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: #74ADA3 !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: #5B938A !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: #41796F !important;}
.u-tintSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: #0D4C44 !important;}
.u-tintSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: #0D4C44 !important;}
.u-tintSpectrum .u-accentColor--borderLight {border-color: #5B938A !important;}
.u-tintSpectrum .u-accentColor--borderNormal {border-color: #41796F !important;}
.u-tintSpectrum .u-accentColor--borderDark {border-color: #225C53 !important;}
.u-tintSpectrum .u-accentColor--iconLight .svgIcon,.u-tintSpectrum .u-accentColor--iconLight.svgIcon {fill: #5B938A !important;}
.u-tintSpectrum .u-accentColor--iconNormal .svgIcon,.u-tintSpectrum .u-accentColor--iconNormal.svgIcon {fill: #41796F !important;}
.u-tintSpectrum .u-accentColor--iconDark .svgIcon,.u-tintSpectrum .u-accentColor--iconDark.svgIcon {fill: #225C53 !important;}
.u-tintSpectrum .u-accentColor--textNormal {color: #41796F !important;}
.u-tintSpectrum .u-accentColor--hoverTextNormal:hover {color: #41796F !important;}
.u-tintSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: #0D4C44 !important;}
.u-tintSpectrum .u-accentColor--textDark {color: #0D4C44 !important;}
.u-tintSpectrum .u-accentColor--backgroundLight {background-color: #5B938A !important;}
.u-tintSpectrum .u-accentColor--backgroundNormal {background-color: #41796F !important;}
.u-tintSpectrum .u-accentColor--backgroundDark {background-color: #225C53 !important;}
.u-tintSpectrum .u-accentColor--buttonDark {border-color: #225C53 !important; color: #0D4C44 !important;}
.u-tintSpectrum .u-accentColor--buttonDark:hover {border-color: #0D4C44 !important;}
.u-tintSpectrum .u-accentColor--buttonDark .icon:before,.u-tintSpectrum .u-accentColor--buttonDark .svgIcon{color: #225C53 !important; fill: #225C53 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: #41796F !important; color: #41796F !important;}
.u-tintSpectrum .u-accentColor--buttonNormal:hover {border-color: #225C53 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal .icon:before,.u-tintSpectrum .u-accentColor--buttonNormal .svgIcon{color: #41796F !important; fill: #41796F !important;}
.u-tintSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-tintSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(151, 209, 198, 1) !important; fill: rgba(151, 209, 198, 1) !important;}
.u-tintSpectrum .u-accentColor--buttonDark.button--filled,.u-tintSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-tintSpectrum .u-accentColor--fillWhenActive.is-active {background-color: #225C53 !important; border-color: #225C53 !important; color: rgba(151, 209, 198, 1) !important; fill: rgba(151, 209, 198, 1) !important;}
.u-tintSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-tintSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: #41796F !important; border-color: #41796F !important; color: rgba(151, 209, 198, 1) !important; fill: rgba(151, 209, 198, 1) !important;}
.u-tintSpectrum .postArticle.is-withAccentColors .markup--user,.u-tintSpectrum .postArticle.is-withAccentColors .markup--query {color: #41796F !important;}
.u-accentColor--highlightFaint {background-color: rgba(230, 245, 241, 1) !important;}
.u-accentColor--highlightStrong.is-active .svgIcon {fill: rgba(191, 235, 226, 1) !important;}
.postArticle.is-withAccentColors .markup--quote.is-other {background-color: rgba(230, 245, 241, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-other {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(230, 245, 241, 1), rgba(230, 245, 241, 1));}
.postArticle.is-withAccentColors .markup--quote.is-me {background-color: rgba(209, 239, 232, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-me {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(209, 239, 232, 1), rgba(209, 239, 232, 1));}
.postArticle.is-withAccentColors .markup--quote.is-targeted {background-color: rgba(191, 235, 226, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-targeted {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(191, 235, 226, 1), rgba(191, 235, 226, 1));}
.postArticle.is-withAccentColors .markup--quote.is-selected {background-color: rgba(191, 235, 226, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-selected {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(191, 235, 226, 1), rgba(191, 235, 226, 1));}
.postArticle.is-withAccentColors .markup--highlight {background-color: rgba(191, 235, 226, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--highlight {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(191, 235, 226, 1), rgba(191, 235, 226, 1));}</style>
     <style class="js-collectionStyleConstant">.u-imageBgColor {background-color: rgba(0, 0, 0, 0.24705882352941178);}
.u-imageSpectrum .u-baseColor--borderLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-baseColor--borderNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-baseColor--borderDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--iconLight .svgIcon,.u-imageSpectrum .u-baseColor--iconLight.svgIcon {fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--iconNormal .svgIcon,.u-imageSpectrum .u-baseColor--iconNormal.svgIcon {fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--iconDark .svgIcon,.u-imageSpectrum .u-baseColor--iconDark.svgIcon {fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textNormal {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textDark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textDarker {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--backgroundLight {background-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-baseColor--backgroundNormal {background-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--backgroundDark {background-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important; color: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--buttonLight:hover {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-baseColor--buttonLight .icon:before,.u-imageSpectrum .u-baseColor--buttonLight .svgIcon {color: rgba(255, 255, 255, 0.8) !important; fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--buttonDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonDark:hover {border-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonDark .icon:before,.u-imageSpectrum .u-baseColor--buttonDark .svgIcon {color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important; color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal:hover {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal .icon:before,.u-imageSpectrum .u-baseColor--buttonNormal .svgIcon {color: rgba(255, 255, 255, 0.9490196078431372) !important; fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonDark.button--filled,.u-imageSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: rgba(255, 255, 255, 1) !important; border-color: rgba(255, 255, 255, 1) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal.button--filled,.u-imageSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: rgba(255, 255, 255, 0.9490196078431372) !important; border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-baseColor--link {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--darken:hover,.u-imageSpectrum .u-baseColor--link.link--darken:focus,.u-imageSpectrum .u-baseColor--link.link--darken:active {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--dark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:active {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--darker {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: rgba(255, 255, 255, 0.4) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: rgba(255, 255, 255, 0.4980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--borderLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-accentColor--borderNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-accentColor--borderDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--iconLight .svgIcon,.u-imageSpectrum .u-accentColor--iconLight.svgIcon {fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-accentColor--iconNormal .svgIcon,.u-imageSpectrum .u-accentColor--iconNormal.svgIcon {fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--iconDark .svgIcon,.u-imageSpectrum .u-accentColor--iconDark.svgIcon {fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--textNormal {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--hoverTextNormal:hover {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--textDark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--backgroundLight {background-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-accentColor--backgroundNormal {background-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--backgroundDark {background-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark:hover {border-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark .icon:before,.u-imageSpectrum .u-accentColor--buttonDark .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: rgba(255, 255, 255, 0.8980392156862745) !important; color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal:hover {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal .icon:before,.u-imageSpectrum .u-accentColor--buttonNormal .svgIcon{color: rgba(255, 255, 255, 0.9490196078431372) !important; fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-imageSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-accentColor--buttonDark.button--filled,.u-imageSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-imageSpectrum .u-accentColor--fillWhenActive.is-active {background-color: rgba(255, 255, 255, 1) !important; border-color: rgba(255, 255, 255, 1) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-imageSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: rgba(255, 255, 255, 0.9490196078431372) !important; border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .postArticle.is-withAccentColors .markup--user,.u-imageSpectrum .postArticle.is-withAccentColors .markup--query {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--highlightFaint {background-color: rgba(255, 255, 255, 0.2) !important;}
.u-imageSpectrum .u-accentColor--highlightStrong.is-active .svgIcon {fill: rgba(255, 255, 255, 0.6) !important;}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-other {background-color: rgba(255, 255, 255, 0.2) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-other {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.2));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-me {background-color: rgba(255, 255, 255, 0.4) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-me {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-targeted {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-targeted {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-selected {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-selected {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--highlight {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--highlight {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}.u-resetSpectrum .u-tintBgColor {background-color: rgba(255, 255, 255, 1) !important;}.u-resetSpectrum .u-tintBgColor .u-fadeLeft:before {background-image: linear-gradient(to right, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 0) 100%) !important;}.u-resetSpectrum .u-tintBgColor .u-fadeRight:after {background-image: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%) !important;}
.u-resetSpectrum .u-baseColor--borderLight {border-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--borderNormal {border-color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--borderDark {border-color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--iconLight .svgIcon,.u-resetSpectrum .u-baseColor--iconLight.svgIcon {fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--iconNormal .svgIcon,.u-resetSpectrum .u-baseColor--iconNormal.svgIcon {fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--iconDark .svgIcon,.u-resetSpectrum .u-baseColor--iconDark.svgIcon {fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textNormal {color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textDark {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textDarker {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--backgroundLight {background-color: rgba(0, 0, 0, 0.09803921568627451) !important;}
.u-resetSpectrum .u-baseColor--backgroundNormal {background-color: rgba(0, 0, 0, 0.2) !important;}
.u-resetSpectrum .u-baseColor--backgroundDark {background-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight {border-color: rgba(0, 0, 0, 0.2980392156862745) !important; color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight:hover {border-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight .icon:before,.u-resetSpectrum .u-baseColor--buttonLight .svgIcon {color: rgba(0, 0, 0, 0.2980392156862745) !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonDark {border-color: rgba(0, 0, 0, 0.6) !important; color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonDark:hover {border-color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--buttonDark .icon:before,.u-resetSpectrum .u-baseColor--buttonDark .svgIcon {color: rgba(0, 0, 0, 0.6) !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal {border-color: rgba(0, 0, 0, 0.4980392156862745) !important; color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal:hover {border-color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal .icon:before,.u-resetSpectrum .u-baseColor--buttonNormal .svgIcon {color: rgba(0, 0, 0, 0.4980392156862745) !important; fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonDark.button--filled,.u-resetSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: rgba(0, 0, 0, 0.2980392156862745) !important; border-color: rgba(0, 0, 0, 0.2980392156862745) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal.button--filled,.u-resetSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: rgba(0, 0, 0, 0.2) !important; border-color: rgba(0, 0, 0, 0.2) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-baseColor--link {color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--darken:hover,.u-resetSpectrum .u-baseColor--link.link--darken:focus,.u-resetSpectrum .u-baseColor--link.link--darken:active {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--dark {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:active {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--link.link--darker {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: rgba(0, 0, 0, 0.2) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: rgba(0, 0, 0, 0.4) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-accentColor--borderLight {border-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--borderNormal {border-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--borderDark {border-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--iconLight .svgIcon,.u-resetSpectrum .u-accentColor--iconLight.svgIcon {fill: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--iconNormal .svgIcon,.u-resetSpectrum .u-accentColor--iconNormal.svgIcon {fill: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--iconDark .svgIcon,.u-resetSpectrum .u-accentColor--iconDark.svgIcon {fill: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--textNormal {color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--hoverTextNormal:hover {color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--textDark {color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundLight {background-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundNormal {background-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundDark {background-color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark {border-color: rgba(0, 171, 107, 1) !important; color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark:hover {border-color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark .icon:before,.u-resetSpectrum .u-accentColor--buttonDark .svgIcon{color: rgba(28, 153, 99, 1) !important; fill: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: rgba(2, 184, 117, 1) !important; color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal:hover {border-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal .icon:before,.u-resetSpectrum .u-accentColor--buttonNormal .svgIcon{color: rgba(0, 171, 107, 1) !important; fill: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-resetSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark.button--filled,.u-resetSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-resetSpectrum .u-accentColor--fillWhenActive.is-active {background-color: rgba(28, 153, 99, 1) !important; border-color: rgba(28, 153, 99, 1) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-resetSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: rgba(0, 171, 107, 1) !important; border-color: rgba(0, 171, 107, 1) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .postArticle.is-withAccentColors .markup--user,.u-resetSpectrum .postArticle.is-withAccentColors .markup--query {color: rgba(0, 171, 107, 1) !important;}</style>
    </div>
   </div>
  </div>
  <div class="loadingBar"></div>
  <script>// <![CDATA[
window["obvInit"] = function (opt_embedded) {window["obvInit"]["embedded"] = opt_embedded; window["obvInit"]["ready"] = true;}
// ]]></script>
  <script>// <![CDATA[
var GLOBALS = {"audioUrl":"https://d1fcbxp97j4nb2.cloudfront.net","baseUrl":"https://medium.com","buildLabel":"30638-a80936a","currentUser":{"userId":"lo_a3dd1f682d8c","isVerified":false,"subscriberEmail":"","hasPastMemberships":false,"isEnrolledInHightower":false,"isEligibleForHightower":false},"currentUserHasUnverifiedEmail":false,"isAuthenticated":false,"isCurrentUserVerified":false,"mediumTwitterScreenName":"medium","miroUrl":"https://cdn-images-1.medium.com","moduleUrls":{"base":"https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.LlQTJsqxzBKNE5_Waz_Olg.js","common-async":"https://cdn-static-1.medium.com/_/fp/gen-js/main-common-async.bundle.lPMw1fqY-MbzmJiPn21ZEg.js","home-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-home-screens.bundle.rjAdrN8hiy8LJTmX-zkQtg.js","misc-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-misc-screens.bundle.wxY8rWSrr9kWDpFoylLRXQ.js","notes":"https://cdn-static-1.medium.com/_/fp/gen-js/main-notes.bundle.UmS-2vco-MnrBEauwLXykA.js","payments":"https://cdn-static-1.medium.com/_/fp/gen-js/main-payments.bundle.wXXGZ5FDGEa-rsJQU5tC7Q.js","posters":"https://cdn-static-1.medium.com/_/fp/gen-js/main-posters.bundle.FxSkrZ0-dqo5ylCsFLQrDQ.js","pubs":"https://cdn-static-1.medium.com/_/fp/gen-js/main-pubs.bundle.i71piGpaVS2nC4z3-ojrhQ.js","stats":"https://cdn-static-1.medium.com/_/fp/gen-js/main-stats.bundle.D8O3DxBsbnP9GWl4kwKxUw.js"},"previewConfig":{"weightThreshold":1,"weightImageParagraph":0.51,"weightIframeParagraph":0.8,"weightTextParagraph":0.08,"weightEmptyParagraph":0,"weightP":0.003,"weightH":0.005,"weightBq":0.003,"minPTextLength":60,"truncateBoundaryChars":20,"detectTitle":true,"detectTitleLevThreshold":0.15},"productName":"Medium","supportsEdit":true,"termsUrl":"//medium.com/policy/9db0094a1e0f","textshotHost":"textshot.medium.com","transactionId":"1505672324499:6512d1dd2da3","useragent":{"browser":"chrome","family":"chrome","os":"windows","version":45,"supportsDesktopEdit":true,"supportsInteract":true,"supportsView":true,"isMobile":false,"isTablet":false,"isNative":false,"supportsFileAPI":true,"isTier1":true,"clientVersion":"","unknownParagraphsBad":false,"clientChannel":"","supportsRealScrollEvents":true,"supportsVhUnits":true,"ruinsViewportSections":false,"supportsHtml5Video":true,"supportsMagicUnderlines":true,"isWebView":false,"isFacebookWebView":false,"supportsProgressiveMedia":true,"supportsPromotedPosts":true,"isBot":false,"isNativeIphone":false,"supportsCssVariables":false,"supportsVideoSections":false,"emojiSupportLevel":1,"supportsScrollableMetabar":true},"variants":{"allow_access":true,"allow_signup":true,"allow_test_auth":"disallow","signin_services":"twitter,facebook,google,email,google-fastidv","signup_services":"twitter,facebook,google,email,google-fastidv","android_rating_prompt_recommend_threshold":5,"google_sign_in_android":true,"enable_onboarding":true,"ios_custom_miro_url":"https://cdn-images-1.medium.com","reengagement_notification_duration":3,"enable_adsnative_integration":true,"browsable_stream_config_bucket":"curated-topics","ios_small_post_preview_truncation_length":5.5,"ios_large_post_preview_truncation_length":5.5,"disable_ios_catalog_badging":true,"enable_series_creation":true,"enable_your_series_pages":true,"enable_productionized_series":true,"enable_dedicated_series_tab_api_ios":true,"enable_clap_milestone_notifications":true,"enable_series_stats_page":true,"enable_post_import":true,"enable_sponsored_post_labelling":true,"enable_logged_in_follow_on_collection_post":true,"promoted_story_placement_locations":"POST_PAGE_FOOTER","enable_chunky_home_page":true,"enable_export_members":true,"enable_series_card_background_creation":true,"enable_ios_onboarding_notifications":true,"available_membership_plans":"60e220181034","available_monthly_plan":"60e220181034","available_annual_plan":"2c754bcc2995","enable_annual_membership":true,"double_write_post_from_followed_tag_items":true,"enable_sms":true,"enable_series_in_user_profiles":true,"enable_new_logged_out_bento_operation":true,"is_not_medium_subscriber":true,"subs_landing_copy_experiments":"long","logged_out_homepage_promo":"content","daily_digest_topics":true,"enable_emoji_in_editor":true,"enable_glyph":true,"glyph_font_set":"m","enable_branding":true,"enable_upsell_tracking":true,"enable_post_page_signin":true,"post_page_signin_copy_count":true,"enable_sequence_carousel":true,"enable_multirecommends":true,"enable_updated_homepage_order":true,"enable_auto_grid_on_new_from_your_network":true,"enable_unbundled_you_might_like":true,"enable_noteworthy_promo":true,"enable_interest_graph_vtwo_topic_suggestions":true,"enable_popchunks":true,"enable_hightower":true,"enable_user_post_metering":true,"max_premium_content_per_user_under_metering":3,"enable_welcome_email_v2":true,"enable_hightower_onboarding_blinker":true,"enable_strong_graph_chp_reorder":true},"xsrfToken":"","iosAppId":"828256236","supportEmail":"yourfriends@medium.com","fp":{"/icons/favicon.svg":"https://cdn-static-1.medium.com/_/fp/icons/favicon.KjTfUJo7yJH_fCoUzzH3cg.svg","/icons/favicon-dev-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-dev-editor.YKKRxBO8EMvIqhyCwIiJeQ.ico","/icons/favicon-hatch-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-hatch-editor.BuEyHIqlyh2s_XEk4Rl32Q.ico","/icons/favicon-medium-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-medium-editor.PiakrZWB7Yb80quUVQWM6g.ico"},"authBaseUrl":"https://medium.com","imageUploadSizeMb":25,"isAuthDomainRequest":true,"algoliaApiEndpoint":"https://MQ57UUUQZ2-dsn.algolia.net","algoliaAppId":"MQ57UUUQZ2","algoliaSearchOnlyApiKey":"394474ced050e3911ae2249ecc774921","iosAppStoreUrl":"https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8","iosAppLinkBaseUrl":"medium:","algoliaIndexPrefix":"medium_","androidPlayStoreUrl":"https://play.google.com/store/apps/details?id=com.medium.reader","googleClientId":"216296035834-k1k6qe060s2tp2a2jam4ljdcms00sttg.apps.googleusercontent.com","androidPackage":"com.medium.reader","androidPlayStoreMarketScheme":"market://details?id=com.medium.reader","googleAuthUri":"https://accounts.google.com/o/oauth2/auth","androidScheme":"medium","layoutData":{"useDynamicScripts":false,"googleAnalyticsTrackingCode":"UA-24232453-2","jsShivUrl":"https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js","useDynamicCss":false,"faviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico","faviconImageId":"1*W0nmth_X8nFKjn6BZ388UQ.png","fontSets":[{"id":8,"url":"https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m.css"}],"editorFaviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium-editor.3Y6xpZ-0FSdWDnPM3hSBIA.ico","glyphUrl":"https://glyph.medium.com"},"authBaseUrlRev":"moc.muidem//:sptth","isDnt":false,"stripePublishableKey":"pk_live_7FReX44VnNIInZwrIIx6ghjl","archiveUploadSizeMb":100,"paymentData":{"currencies":{"1":{"label":"US Dollar","external":"usd"}},"countries":{"1":{"label":"United States of America","external":"US"}},"accountTypes":{"1":{"label":"Individual","external":"individual"},"2":{"label":"Company","external":"company"}}},"previewConfig2":{"weightThreshold":1,"weightImageParagraph":0.05,"raiseImage":true,"enforceHeaderHierarchy":true,"isImageInsetRight":true},"isAmp":false,"iosScheme":"medium","isSwBoot":false,"lightstep":{"accessToken":"ce5be895bef60919541332990ac9fef2","carrier":"{\"ot-tracer-spanid\":\"5eca2aa3642a1041\",\"ot-tracer-traceid\":\"58973fdc61cd9fc7\",\"ot-tracer-sampled\":\"true\"}","host":"collector-medium.lightstep.com"},"facebook":{"key":"542599432471018","namespace":"medium-com","scope":{"default":["public_profile","email","user_friends"],"connect":["public_profile","email","user_friends"],"login":["public_profile","email","user_friends"],"share":["public_profile","email","user_friends","publish_actions"]}},"mailingListArchiveUploadSizeMb":2,"availableMembershipPlans":["60e220181034"],"editorsPicksTopicId":"3985d2a191c5","popularOnMediumTopicId":"9d34e48ecf94","memberContentTopicId":"13d7efd82fb2","audioContentTopicId":"3792abbd134","brandedSequenceId":"7d337ddf1941","isDoNotAuth":false,"goldfinchUrl":"https://goldfinch.medium.com","buggle":{"url":"https://buggle.medium.com","videoUrl":"https://cdn-videos-1.medium.com","audioUrl":"https://cdn-audio-1.medium.com","accessToken":"pJN6XGc43dDJLHJQ2ixamOFHUnAgKvhp"}}
// ]]></script>
  <script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.LlQTJsqxzBKNE5_Waz_Olg.js" async></script>
  <script>// <![CDATA[
window["obvInit"]({"value":{"id":"204203eeb658","versionId":"bcd8ad88aa21","creatorId":"5267c97a9fa1","creator":{"userId":"5267c97a9fa1","name":"Kristian Poslek","username":"bojzi","createdAt":1411191835782,"lastPostCreatedAt":1470661716065,"imageId":"1*pRwc8SoQ6_O7qUzjsVxWkg.jpeg","backgroundImageId":"1*meI8JFnkIk5f_F6GN_aOnA.jpeg","bio":"Agile UX Expert at comSysto and technology nut.","twitterScreenName":"bojzi","socialStats":{"userId":"5267c97a9fa1","usersFollowedCount":61,"usersFollowedByCount":874,"type":"SocialStats"},"social":{"userId":"lo_598b541b3416","targetUserId":"5267c97a9fa1","type":"Social"},"facebookAccountId":"10152745105205970","allowNotes":1,"type":"User"},"homeCollection":{"id":"ce67810c8a52","name":"Developers Writing","slug":"developers-writing","tags":["DEVELOPER","CODE","DEVOPS"],"creatorId":"acaad8b8d21e","description":"Developers may not need to blog; but here your words are not wasted.","shortDescription":"Developers may not need to blog; but here your words are…","image":{"imageId":"1*YljLzTDkbwryga9Je01MyA.jpeg","filter":"","backgroundSize":"","originalWidth":617,"originalHeight":617,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":1563,"activeAt":1497879311380},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*BDmPU3IWQ5sTLaUgH-MDvA.jpeg","filter":"","backgroundSize":"","originalWidth":346,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"devswriting","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{"id":"1*33UPBWOo-rRGxEjrNHwCOw.jpeg","originalWidth":2000,"originalHeight":773},"logoImage":{"id":"1*1_o4NhRioinvp0lJYPDa0A@2x.jpeg","originalWidth":2000,"originalHeight":773,"alt":"Developers Writing"},"alignment":2,"layout":6}},{"type":1,"postListMetadata":{"source":3,"layout":2,"number":3,"postIds":["f761d45e75b9","292afc26c7bd","f39f12725377"]}},{"type":1,"postListMetadata":{"source":2,"layout":4,"number":3,"postIds":[],"sectionHeader":"Trending"}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":5,"postIds":[],"sectionHeader":"Latest"}}],"tintColor":"#FF97D1C6","lightText":false,"favicon":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF599187","point":0},{"color":"#FF55877E","point":0.1},{"color":"#FF507C74","point":0.2},{"color":"#FF4B716A","point":0.3},{"color":"#FF456660","point":0.4},{"color":"#FF3F5B56","point":0.5},{"color":"#FF384F4B","point":0.6},{"color":"#FF304340","point":0.7},{"color":"#FF283734","point":0.8},{"color":"#FF1F2A28","point":0.9},{"color":"#FF141C1A","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF97D1C6","point":0},{"color":"#FF8CC5BA","point":0.1},{"color":"#FF80B9AF","point":0.2},{"color":"#FF74ADA3","point":0.3},{"color":"#FF68A096","point":0.4},{"color":"#FF5B938A","point":0.5},{"color":"#FF4E867D","point":0.6},{"color":"#FF41796F","point":0.7},{"color":"#FF326A62","point":0.8},{"color":"#FF225C53","point":0.9},{"color":"#FF0D4C44","point":1}],"backgroundColor":"#FF97D1C6"},"highlightSpectrum":{"colorPoints":[{"color":"#FFEAF6F2","point":0},{"color":"#FFE6F5F1","point":0.1},{"color":"#FFE2F4EF","point":0.2},{"color":"#FFDDF3ED","point":0.3},{"color":"#FFD9F1EC","point":0.4},{"color":"#FFD5F0EA","point":0.5},{"color":"#FFD1EFE8","point":0.6},{"color":"#FFCCEEE7","point":0.7},{"color":"#FFC8EDE5","point":0.8},{"color":"#FFC3ECE3","point":0.9},{"color":"#FFBFEBE2","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[],"colorBehavior":1,"instantArticlesState":0,"acceleratedMobilePagesState":0,"ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{"id":"1*33UPBWOo-rRGxEjrNHwCOw.jpeg","originalWidth":2000,"originalHeight":773},"logoImage":{"id":"1*1_o4NhRioinvp0lJYPDa0A@2x.jpeg","originalWidth":2000,"originalHeight":773,"alt":"Developers Writing"},"alignment":2,"layout":6},"type":"Collection"},"homeCollectionId":"ce67810c8a52","title":"Building a desktop application with Electron","detectedLanguage":"en","latestVersion":"bcd8ad88aa21","latestPublishedVersion":"bcd8ad88aa21","hasUnpublishedEdits":true,"latestRev":6435,"createdAt":1438089079647,"updatedAt":1505660170248,"acceptedAt":0,"firstPublishedAt":1439216363312,"latestPublishedAt":1439216363312,"vote":false,"experimentalCss":"","displayAuthor":"","content":{"subtitle":"A detailed guide on building your very own sound machine using JavaScript, Node.js and Electron","bodyModel":{"paragraphs":[{"name":"e891","type":2,"text":"Building a desktop application with Electron","markups":[]},{"name":"2afe","type":1,"text":"A detailed guide on building your very own sound machine\nusing JavaScript, Node.js and Electron","markups":[{"type":1,"start":0,"end":95},{"type":2,"start":0,"end":95}]},{"name":"c458","type":3,"text":"The how and what of JavaScript desktop applications","markups":[]},{"name":"ce23","type":1,"text":"Desktop applications always had a special place in my heart. Ever since browsers and mobile devices got powerful, there’s been a steady decline of desktop applications which are getting replaced by mobile and web applications. Still, there’s are a lot of upsides to writing desktop applications — they are always present once they’re in your start menu or dock, they’re alt(cmd)-tabbable (I hope that’s a word) and mostly connect better with the underlying operating system (with its shortcuts, notifications, etc) than web applications.","markups":[{"type":2,"start":370,"end":387}]},{"name":"3888","type":1,"text":"In this article, I’ll try to guide you through the process of building a simple desktop application and touch on important concepts for building desktop application with JavaScript.","markups":[]},{"name":"0c95","type":4,"text":"GitHub Electron","markups":[],"layout":2,"metadata":{"id":"1*GS-t3eNz9Jy7YWKIxxmJPg.png","originalWidth":512,"originalHeight":512}},{"name":"d308","type":1,"text":"The main idea behind developing desktop applications with JavaScript is that you build one codebase and package it for each operating system separately. This abstracts away the knowledge needed to build native desktop applications and makes maintenance easier. Nowadays, developing a desktop application with JavaScript relies on either Electron or NW.js. Although both tools offer more or less the same features, I went with Electron because it has some advantages I found important. At the end of the day, you can’t go wrong with either.","markups":[{"type":3,"start":337,"end":345,"href":"http://electron.atom.io/","title":"","rel":"","anchorType":0},{"type":3,"start":349,"end":354,"href":"http://nwjs.io/","title":"","rel":"","anchorType":0},{"type":3,"start":450,"end":483,"href":"https://github.com/atom/electron/blob/master/docs/development/atom-shell-vs-node-webkit.md","title":"","rel":"","anchorType":0}]},{"name":"849d","type":13,"text":"Basic assumptions","markups":[]},{"name":"5975","type":1,"text":"I assume that you’ve got your basic text editor (or IDE) and Node.js/npm installed. I’ll also assume you’ve got HTML/CSS/JavaScript knowledge (Node.js knowledge with CommonJS modules would be great, but isn’t crucial) so we can focus on learning Electron concepts without worrying about building the user interface (which, as it turns out, are just common web pages). If not, you’ll probably feel somewhat lost and I recommend visiting my previous blog post to brush up on your basics.","markups":[{"type":3,"start":61,"end":82,"href":"https://nodejs.org/download/","title":"","rel":"","anchorType":0},{"type":3,"start":436,"end":457,"href":"https://medium.com/@bojzi/overview-of-the-javascript-ecosystem-8ec4a0b7a7be","title":"","rel":"","anchorType":0}]},{"name":"ad42","type":13,"text":"A 10,000 foot view of Electron","markups":[]},{"name":"bd65","type":1,"text":"In a nutshell, Electron provides a runtime to build desktop applications with pure JavaScript. The way it works is — Electron takes a main file defined in your package.json file and executes it. This main file (usually named main.js) then creates application windows which contain rendered web pages with the added power of interacting with the native GUI (graphical user interface) of your operating system.","markups":[{"type":2,"start":134,"end":138},{"type":2,"start":160,"end":172},{"type":2,"start":225,"end":232}]},{"name":"e21e","type":1,"text":"In detail, once you start up an application using Electron, a main process is created. This main process is responsible for interacting with the native GUI of your operating system and creates the GUI of your application (your application windows).","markups":[{"type":2,"start":62,"end":74},{"type":2,"start":92,"end":104}]},{"name":"b89a","type":4,"text":"","markups":[],"layout":4,"metadata":{"id":"1*EJETq7XOPz5RVY5IfF6NIg@2x.png","originalWidth":1048,"originalHeight":1200}},{"name":"1a44","type":1,"text":"Purely starting the main process doesn’t give the users of your application any application windows. Those are created by the main process in the main file by using something called a BrowserWindow module. Each browser window then runs its own renderer process. This renderer process takes a web page (an HTML file which references the usual CSS files, JavaScript files, images, etc.) and renders it in the window. Your web pages are rendered with Chromium so a very high level of compatibility with standards is guaranteed.","markups":[{"type":3,"start":448,"end":456,"href":"https://www.chromium.org/","title":"","rel":"","anchorType":0},{"type":2,"start":20,"end":32},{"type":2,"start":126,"end":138},{"type":2,"start":184,"end":197},{"type":2,"start":244,"end":260},{"type":2,"start":267,"end":283}]},{"name":"f2e8","type":1,"text":"For example, if you only had a calculator application, your main process would instantiate a window with a web page where your actual web page (calculator) is.","markups":[{"type":2,"start":60,"end":73}]},{"name":"19af","type":1,"text":"Although it is said that only the main process interacts with the native GUI of your operating system, there are techniques to offload some of that work to renderer processes (we’ll look into building a feature leveraging such a technique).","markups":[{"type":2,"start":34,"end":47},{"type":2,"start":156,"end":176},{"type":2,"start":238,"end":240}]},{"name":"57e0","type":1,"text":"The main process can access the native GUI through a series of modules available directly in Electron. Your desktop application can access all Node modules like the excellent node-notifier to show system notifications, request to make HTTP calls, etc.","markups":[{"type":3,"start":71,"end":101,"href":"https://github.com/atom/electron/tree/master/docs/api","title":"","rel":"","anchorType":0},{"type":3,"start":175,"end":188,"href":"https://github.com/mikaelbr/node-notifier","title":"","rel":"","anchorType":0},{"type":3,"start":219,"end":226,"href":"https://www.npmjs.com/package/request","title":"","rel":"","anchorType":0},{"type":2,"start":4,"end":16},{"type":2,"start":175,"end":188},{"type":2,"start":219,"end":226}]},{"name":"6715","type":3,"text":"Hello, world!","markups":[]},{"name":"a007","type":1,"text":"Let’s get started with a traditional greeting and install all the necessary prerequisites.","markups":[]},{"name":"608b","type":13,"text":"Accompanying repository","markups":[]},{"name":"b49d","type":1,"text":"This guide is accompanied by the sound-machine-tutorial repository.\nUse the repository to follow along or continue at certain points. Clone the repository to get started:","markups":[{"type":3,"start":33,"end":66,"href":"https://github.com/bojzi/sound-machine-electron-guide","title":"","rel":"","anchorType":0}]},{"name":"ecff","type":8,"text":"git clone https://github.com/bojzi/sound-machine-electron-guide.git","markups":[]},{"name":"adea","type":1,"text":"and then you can jump to a git tag in the sound-machine-tutorial folder with:","markups":[{"type":2,"start":42,"end":64}]},{"name":"615a","type":8,"text":"git checkout \x3ctag-name\x3e","markups":[{"type":2,"start":13,"end":23}]},{"name":"3958","type":1,"text":"I’ll let you know when a tag is available with a code block:","markups":[]},{"name":"2aae","type":8,"text":"Follow along:\ngit checkout 00-blank-repository","markups":[{"type":1,"start":0,"end":13}]},{"name":"3260","type":1,"text":"Once you clone/checkout your desired tag, run:","markups":[]},{"name":"2010","type":8,"text":"npm install","markups":[]},{"name":"bde3","type":1,"text":"so that you aren’t missing any Node modules.","markups":[]},{"name":"75dd","type":1,"text":"If you can’t switch to another tag, it would be easiest to just reset your repository state and then do the checkout:","markups":[]},{"name":"4cea","type":8,"text":"git add -A\ngit reset --hard","markups":[]},{"name":"869a","type":13,"text":"Set up shop","markups":[]},{"name":"002f","type":8,"text":"Follow along with the tag 00-blank-repository:\ngit checkout 00-blank-repository","markups":[{"type":1,"start":0,"end":46},{"type":2,"start":0,"end":47}]},{"name":"f4e4","type":1,"text":"In the project folder create a new package.json file in it with the following contents:","markups":[{"type":2,"start":35,"end":47}]},{"name":"705e","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"1b98ec6885c1c8c10743ccf55d3665d1"}},{"name":"8a2f","type":1,"text":"This barebones package.json:","markups":[{"type":2,"start":15,"end":28}]},{"name":"c27d","type":9,"text":"sets up the name and version of the application,","markups":[]},{"name":"0170","type":9,"text":"lets Electron know which script the main process is going to run (main.js) and","markups":[{"type":2,"start":36,"end":48},{"type":2,"start":66,"end":73}]},{"name":"ae3d","type":9,"text":"sets up a useful shortcut — an npm script to run the application easily by running “npm start” in your CLI (terminal or command prompt).","markups":[{"type":2,"start":31,"end":34},{"type":2,"start":84,"end":93}]},{"name":"2a33","type":1,"text":"It’s time to get Electron. The easiest way of accomplishing that is by installing a prebuilt binary for your operating system through npm and save it as a development dependency in your package.json (that happens automatically with --save-dev). Run the following in your CLI (in the project folder):","markups":[{"type":2,"start":17,"end":25},{"type":2,"start":134,"end":137},{"type":2,"start":186,"end":200},{"type":2,"start":231,"end":243}]},{"name":"e96f","type":8,"text":"npm install --save-dev electron-prebuilt","markups":[]},{"name":"01e6","type":1,"text":"The prebuilt binary is tailored to the operating system it’s being installed on and allows the running of “npm start”. We’re installing it as a development dependency because we will only need it during development.","markups":[{"type":2,"start":107,"end":116}]},{"name":"aad6","type":1,"text":"That’s, more or less, everything you need to start developing with Electron.","markups":[{"type":2,"start":67,"end":75}]},{"name":"a803","type":13,"text":"Greeting the world","markups":[]},{"name":"b852","type":1,"text":"Create an app folder and an index.html file in that folder with the following contents:","markups":[{"type":1,"start":10,"end":13},{"type":2,"start":10,"end":13},{"type":2,"start":28,"end":38}]},{"name":"c289","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"bc8d762d3839619eb8ac2917abf73e18"}},{"name":"bf6f","type":1,"text":"In the root of the project create a main.js file. That’s the file that Electron’s main process is going to spin up and allow the creation of our “Hello, world!” web page. Create the file with the following contents:","markups":[{"type":2,"start":36,"end":44}]},{"name":"fc69","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"5b51b70fe173c646705245db1253885b"}},{"name":"c25c","type":1,"text":"Nothing scary, right?\nThe app module controls your application lifecycle (for example — reacting to the ready state of your application).\nThe BrowserWindow module allows window creation.\nThe mainWindow object is going to be your main application window and is declared as null because the window would otherwise be closed once JavaScripts garbage collection kicks in.","markups":[{"type":2,"start":26,"end":30},{"type":2,"start":136,"end":138},{"type":2,"start":142,"end":155},{"type":2,"start":191,"end":201},{"type":2,"start":272,"end":276}]},{"name":"f214","type":1,"text":"Once app gets the ready event, we create a new 800 pixels wide and 600 pixels high window using BrowserWindow.\nThat window’s renderer process is going to render our index.html file.","markups":[{"type":2,"start":5,"end":8},{"type":2,"start":18,"end":23},{"type":2,"start":96,"end":109},{"type":2,"start":125,"end":141},{"type":2,"start":165,"end":175}]},{"name":"9310","type":1,"text":"Run our “Hello, World!” application by running the following in your CLI:","markups":[]},{"name":"c3a3","type":8,"text":"npm start","markups":[]},{"name":"50bf","type":1,"text":"and bask in the glory that is your app.","markups":[]},{"name":"d249","type":4,"text":"Hello indeed.","markups":[],"layout":1,"metadata":{"id":"1*rPsf_UzNNKUpH39yQX-q_Q.png","originalWidth":1768,"originalHeight":1368}},{"name":"ffef","type":3,"text":"Developing a real application","markups":[]},{"name":"0799","type":13,"text":"A glorious sound machine","markups":[]},{"name":"f4e9","type":1,"text":"First things first — what’s a sound machine?\nA sound machine is a little device that makes sounds when you press various buttons, mostly cartoon or reaction sounds. It’s a funny little tool to lighten up the mood in an office and a great use case to develop a desktop application as we’re going to explore quite a few concepts while developing it (and get a nifty sound machine to boot).","markups":[{"type":2,"start":21,"end":43}]},{"name":"b5d0","type":4,"text":"The. Sound. Machine.","markups":[],"layout":1,"metadata":{"id":"1*El4nvvh3h3vjRgwh_wVO7A.png","originalWidth":368,"originalHeight":724}},{"name":"8f2e","type":1,"text":"The features we’re going to build and concepts we’re going to explore are:","markups":[]},{"name":"11a8","type":9,"text":"basic sound machine (basic browser window instantiation),","markups":[]},{"name":"de1c","type":9,"text":"closing the sound machine (remote messages between main and renderer process),","markups":[{"type":2,"start":51,"end":55},{"type":2,"start":60,"end":78}]},{"name":"2e6d","type":9,"text":"playing sounds without having the application in focus (global keyboard shortcuts),","markups":[]},{"name":"2c65","type":9,"text":"creating a settings screen for shortcut modifier keys (Shift, Ctrl and Alt) (storing user settings in home folder),","markups":[]},{"name":"f383","type":9,"text":"adding a tray icon (remotely creating native GUI elements and getting to know menus and tray icon) and","markups":[]},{"name":"aa77","type":9,"text":"packaging your application (packaging your application for Mac, Windows and Linux).","markups":[]},{"name":"8d18","type":3,"text":"Building the basic feature of a sound machine","markups":[]},{"name":"a7fe","type":13,"text":"Starting point and application organisation","markups":[]},{"name":"22f1","type":1,"text":"With a working “Hello, world!” application under your belt, it’s high time to start building a sound machine.","markups":[]},{"name":"fbad","type":1,"text":"A typical sound machine features several rows of buttons which respond to presses by making sounds. The sounds are mostly cartoonish and/or reaction based (laughter, clapping, glass breaking, etc.).","markups":[]},{"name":"871d","type":1,"text":"That’s also the very first feature we’ll build — a basic sound machine that responds to clicks.","markups":[]},{"name":"1ce8","type":4,"text":"Basic files and folders structure","markups":[],"layout":2,"metadata":{"id":"1*CsKlT-mLLFJlRoYZnAk9Tg@2x.png","originalWidth":384,"originalHeight":622}},{"name":"8594","type":1,"text":"Our application structure is going to be very straightforward.","markups":[]},{"name":"a417","type":1,"text":"In the root of the application we’ll keep the package.json file, the main.js file and any other application-wide files we need.","markups":[{"type":1,"start":7,"end":11},{"type":2,"start":7,"end":11},{"type":2,"start":46,"end":58},{"type":2,"start":69,"end":76}]},{"name":"1696","type":1,"text":"The app folder will house our HTML files of various types within folders like css, js, wav and img.","markups":[{"type":1,"start":4,"end":7},{"type":1,"start":78,"end":81},{"type":1,"start":83,"end":85},{"type":1,"start":87,"end":90},{"type":1,"start":95,"end":98},{"type":2,"start":4,"end":7},{"type":2,"start":78,"end":81},{"type":2,"start":83,"end":85},{"type":2,"start":87,"end":90},{"type":2,"start":95,"end":98}]},{"name":"b166","type":1,"text":"To make things easier, all the files needed for web page design have already been included in the initial state of the repository. Please check the tag 01-start-project out. If you followed along and created the “Hello, world!” application, you’ll have to reset your repository and then do the checkout:","markups":[]},{"name":"0a9c","type":8,"text":"If you followed along with the \"Hello, world!\" example:\ngit add -A\ngit reset --hard","markups":[{"type":1,"start":0,"end":55},{"type":2,"start":0,"end":55}]},{"name":"846a","type":8,"text":"Follow along with the tag 01-start-project:\ngit checkout 01-start-project","markups":[{"type":1,"start":0,"end":43},{"type":2,"start":0,"end":44}]},{"name":"488e","type":1,"text":"To keep things simple, we’re going to have only two sounds but extending it to the full 16 sounds is simply a matter of finding extra sounds, extra icons and modifying index.html.","markups":[{"type":2,"start":168,"end":178}]},{"name":"1626","type":13,"text":"Defining the rest of the main process","markups":[]},{"name":"36e7","type":1,"text":"Let’s revisit main.js to define the look of the sound machine. Replace the contents of the file with:","markups":[{"type":2,"start":14,"end":21}]},{"name":"5cc9","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"f938ae58f6a720fc868656e74d91eee0"}},{"name":"b0a2","type":1,"text":"We’re customising the window we’re creating by giving it a dimension, making it non-resizable and frameless. It’s going to look like a real sound machine hovering on your desktop.","markups":[]},{"name":"c220","type":1,"text":"The question now is — how to move a frameless window (with no title bar) and close it?\nI’ll talk about custom window (and application) closing very soon (and introduce a way of communicating between the main process and a renderer process), but the dragging part is easy. If you look at the index.css file (in app/css), you’ll see the following:","markups":[{"type":1,"start":310,"end":317},{"type":2,"start":203,"end":215},{"type":2,"start":222,"end":238},{"type":2,"start":291,"end":300},{"type":2,"start":310,"end":317}]},{"name":"548b","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"a1adf1beb1d4dee1bcdd5ed7870a0bf1"}},{"name":"0903","type":1,"text":"-webkit-app-region: drag; allows the whole html to be a draggable object. There is a problem now, though — you can’t click buttons on a draggable object. The other piece of the puzzle is -webkit-app-region: no-drag; which allows you to define undraggable (and thus clickable elements). Consider the following excerpt from index.css:","markups":[{"type":2,"start":0,"end":26},{"type":2,"start":43,"end":47},{"type":2,"start":187,"end":216},{"type":2,"start":322,"end":331}]},{"name":"7dff","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"3a6f535a5249998496f54ed4a5bf93bf"}},{"name":"572a","type":13,"text":"Displaying the sound machine in its own window","markups":[]},{"name":"8776","type":1,"text":"The main.js file can now make a new window and display the sound machine. And really, if you start your application with npm start, you’ll see the sound machine come alive. It’s not a surprise that nothing’s happening right now because we just have a static web page.","markups":[{"type":2,"start":4,"end":11},{"type":2,"start":121,"end":131}]},{"name":"bbdc","type":1,"text":"Put the following in the index.js file (located in app/js) to get the interactivity going:","markups":[{"type":1,"start":51,"end":57},{"type":2,"start":25,"end":33},{"type":2,"start":51,"end":57}]},{"name":"0ecc","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"228b3fe739357279a04553f767dc9957"}},{"name":"ab85","type":1,"text":"This code is pretty simple. We:","markups":[]},{"name":"2974","type":9,"text":"query for the sound buttons,","markups":[]},{"name":"deaf","type":9,"text":"iterate through the buttons reading out the data-sound attribute,","markups":[{"type":2,"start":44,"end":54}]},{"name":"e404","type":9,"text":"add a background image to each button","markups":[]},{"name":"5f71","type":9,"text":"and add a click event to each button that plays audio (using the HTMLAudioElement interface)","markups":[{"type":3,"start":65,"end":91,"href":"https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement","title":"","rel":"","anchorType":0}]},{"name":"a0c4","type":1,"text":"Test your application by running the following in your CLI:","markups":[]},{"name":"e454","type":8,"text":"npm start","markups":[]},{"name":"f8a3","type":4,"text":"A working sound machine!","markups":[],"layout":1,"metadata":{"id":"1*Umzbl_QY7tatF_9Khm400Q@2x.png","originalWidth":904,"originalHeight":1612}},{"name":"6952","type":3,"text":"Closing the application from a browser window via remote events","markups":[]},{"name":"fd22","type":8,"text":"Follow along with the tag 02-basic-sound-machine:\ngit checkout 02-basic-sound-machine","markups":[{"type":1,"start":0,"end":49},{"type":2,"start":0,"end":50}]},{"name":"03e7","type":1,"text":"To recap — application windows (more exactly their renderer process) shouldn’t be interacting with the GUI (and that’s what closing a window is). The official Electron quick start guide says:","markups":[{"type":3,"start":150,"end":185,"href":"https://github.com/atom/electron/blob/master/docs/tutorial/quick-start.md","title":"","rel":"","anchorType":0},{"type":2,"start":51,"end":67}]},{"name":"661e","type":6,"text":"In web pages, it is not allowed to call native GUI related APIs because managing native GUI resources in web pages is very dangerous and it is easy to leak resources. If you want to perform GUI operations in a web page, the renderer process of the web page must communicate with the main process to request the main process perform those operations.","markups":[]},{"name":"b6bb","type":1,"text":"Electron provides the ipc (inter-process communication) module for that type of communication. ipc allows subscribing to messages on a channel and sending messages to subscribers of a channel. A channel is used to differentiate between receivers of messages and is represented by a string (for example “channel-1”, “channel-2”…). The message can also contain data. Upon receiving a message, the subscriber can react by doing some work and can even answer. The biggest benefit of messaging is separation of concerns — the main process doesn’t have to know which renderer processes there are or which one sent a message.","markups":[{"type":3,"start":22,"end":62,"href":"https://github.com/atom/electron/blob/master/docs/api/ipc-renderer.md","title":"","rel":"","anchorType":0},{"type":2,"start":22,"end":25},{"type":2,"start":95,"end":98},{"type":2,"start":135,"end":142},{"type":2,"start":184,"end":191},{"type":2,"start":521,"end":533},{"type":2,"start":561,"end":579}]},{"name":"0808","type":4,"text":"You’ve got mail.","markups":[],"layout":1,"metadata":{"id":"1*VkIt0RY92_fSiZDa9RC6Ng@2x.png","originalWidth":1558,"originalHeight":610}},{"name":"8f58","type":1,"text":"That’s exactly what we’ll do here — subscribe the main process (main.js) to the “close-main-window” channel and send a message on that channel from the renderer process (index.js) when someone clicks the close button.","markups":[{"type":2,"start":50,"end":62},{"type":2,"start":64,"end":71},{"type":2,"start":81,"end":98},{"type":2,"start":135,"end":142},{"type":2,"start":152,"end":168},{"type":2,"start":170,"end":178}]},{"name":"0699","type":1,"text":"Add the following to main.js to subscribe to a channel:","markups":[{"type":2,"start":21,"end":29}]},{"name":"7f5f","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"3ad7bc9c896bcaa70b22cbf05842a373"}},{"name":"8ff6","type":1,"text":"After requiring the module, subscribing to messages on a channel is very easy and involves using the on() method with the channel name and a callback function.","markups":[{"type":2,"start":101,"end":105}]},{"name":"8889","type":1,"text":"To send a message on that channel, add the following to index.js:","markups":[{"type":2,"start":56,"end":64}]},{"name":"2c18","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"df77725b64153ad6f152e24d0a1cca36"}},{"name":"b11c","type":1,"text":"Again, we require the ipc module and bind a click event to the element with the close button. On clicking the close button we send a message via the “close-main-window” channel with the send() method.","markups":[{"type":2,"start":22,"end":26},{"type":2,"start":44,"end":50},{"type":2,"start":186,"end":192}]},{"name":"485a","type":1,"text":"There’s one more detail that could bite you and we’ve talked about it already — the clickability of draggable areas. index.css has to define the close button as non-draggable.","markups":[{"type":2,"start":84,"end":96},{"type":2,"start":117,"end":126}]},{"name":"9956","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"722fb4ff0af4ca602ea4d682c5a46f1e"}},{"name":"bec1","type":1,"text":"That’s all, our application can now be closed via the close button. Communicating via ipc can get complicated by examining the event or passing arguments and we’ll see an example of passing arguments later.","markups":[{"type":2,"start":86,"end":89}]},{"name":"9293","type":3,"text":"Playing sounds via global keyboard shortcuts","markups":[]},{"name":"949e","type":8,"text":"Follow along with the tag 03-closable-sound-machine:\ngit checkout 03-closable-sound-machine","markups":[{"type":1,"start":0,"end":52},{"type":2,"start":0,"end":53}]},{"name":"1b9a","type":1,"text":"Our basic sound machine is working great. But we do have a usability issue — what use is a sound machine that has to sit in front of all your windows the whole time and be clicked repeatedly?","markups":[]},{"name":"987f","type":1,"text":"This is where global keyboard shortcuts come in. Electron provides a global shortcut module which allows you to listen to custom keyboard combinations and react. The keyboard combinations are known as Accelerators and are string representations of a combination of keypresses (for example “Ctrl+Shift+1”).","markups":[{"type":3,"start":69,"end":84,"href":"https://github.com/atom/electron/blob/master/docs/api/global-shortcut.md","title":"","rel":"","anchorType":0},{"type":3,"start":201,"end":213,"href":"https://github.com/atom/electron/blob/master/docs/api/accelerator.md","title":"","rel":"","anchorType":0},{"type":2,"start":201,"end":213}]},{"name":"2b73","type":4,"text":"Plug… er, press and play!","markups":[],"layout":1,"metadata":{"id":"1*xx7pP0czBfFTskrN5tmyZQ@2x.png","originalWidth":1090,"originalHeight":636}},{"name":"e6ab","type":1,"text":"Since we want to catch a native GUI event (global keyboard shortcut) and do an application window event (play a sound), we’ll use our trusted ipc module to send a message from the main process to the renderer process.","markups":[{"type":2,"start":142,"end":145},{"type":2,"start":180,"end":192},{"type":2,"start":200,"end":216}]},{"name":"9591","type":1,"text":"Before diving into the code, there are two things to consider:","markups":[]},{"name":"7aa8","type":10,"text":"global shortcuts have to be registered after the app “ready” event (the code should be in that block) and","markups":[{"type":2,"start":49,"end":61}]},{"name":"c8ce","type":10,"text":"when sending messages via ipc from the main process to a renderer process you have to use the reference to that window (something like “createdWindow.webContents.send(‘channel’))","markups":[{"type":2,"start":26,"end":29},{"type":2,"start":39,"end":51},{"type":2,"start":57,"end":74},{"type":2,"start":135,"end":177}]},{"name":"3658","type":1,"text":"With that in mind, let’s alter our main.js and add the following code:","markups":[{"type":2,"start":35,"end":43},{"type":2,"start":46,"end":47}]},{"name":"ae8a","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"83c10d7d1ce1161532321296c407218b"}},{"name":"1606","type":1,"text":"First, we require the global-shortcut module. Then, once our application is ready, we register two shortcuts — one that will respond to pressing Ctrl, Shift and 1 together and the other that will respond to pressing Ctrl, Shift and 2 together. Each of those will send a message on the “global-shortcut” channel with an argument. We’ll use that argument to play the correct sound. Add the following to index.js:","markups":[{"type":2,"start":22,"end":37},{"type":2,"start":286,"end":301},{"type":2,"start":401,"end":409}]},{"name":"6570","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"2d065d0bb6cf7973c6d193a3eb624ed0"}},{"name":"5c1c","type":1,"text":"To keep thing simple, we’re going to simulate a button click and use the soundButtons selector that we’ve created while binding buttons to playing sounds. Once a message comes with an argument of 1, we’ll take the soundButtons[1] element and trigger a mouse click on it (note: in a production application, you’d want to encapsulate the sound playing code and execute that).","markups":[{"type":2,"start":214,"end":229},{"type":2,"start":271,"end":275}]},{"name":"d93d","type":3,"text":"Configuring modifier keys via user settings in a new window","markups":[]},{"name":"6eea","type":8,"text":"Follow along with the tag 04-global-shortcuts-bound:\ngit checkout 04-global-shortcuts-bound","markups":[{"type":1,"start":0,"end":52},{"type":2,"start":0,"end":53}]},{"name":"e18c","type":1,"text":"With so many applications running at the same time, it could very well be that the shortcuts we’ve envisioned are already taken. That’s why we’re going to introduce a settings screen and store which modifiers (Ctrl, Alt and/or Shift) we’re going to use.","markups":[]},{"name":"d205","type":1,"text":"To accomplish all of that, we’ll need the following:","markups":[]},{"name":"d94e","type":9,"text":"a settings button in our main window,","markups":[]},{"name":"1a58","type":9,"text":"a settings window (with accompanying HTML, CSS and JavaScript files),","markups":[]},{"name":"4957","type":9,"text":"ipc messages to open and close the settings window and update our global shortcuts and","markups":[{"type":2,"start":0,"end":3}]},{"name":"cebe","type":9,"text":"storing/reading of a settings JSON file from the user system.","markups":[]},{"name":"6821","type":1,"text":"Phew, that’s quite a list.","markups":[]},{"name":"ef08","type":13,"text":"Settings button and settings window","markups":[]},{"name":"f5d2","type":1,"text":"Similar to closing the main window, we’re going to send messages on a channel from index.js when the settings button gets clicked. Add the following to index.js:","markups":[{"type":2,"start":70,"end":77},{"type":2,"start":83,"end":92},{"type":2,"start":152,"end":160}]},{"name":"a487","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"e05a7af18f0a48b4b05e034879372d6a"}},{"name":"e2b1","type":1,"text":"After clicking the settings button, a message on the channel “open-settings-window” gets sent. main.js can now react to that event and open up the new window. Add the following to main.js:","markups":[{"type":2,"start":62,"end":82},{"type":2,"start":95,"end":102},{"type":2,"start":180,"end":187}]},{"name":"c350","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"9eaed185ab86a0c9ab2e3211da380040"}},{"name":"e071","type":1,"text":"Nothing new to see here, we’re opening up a new window just like we did with the main window. The only difference is that we’re checking if the settings window is already open so that we don’t open up two instances.","markups":[]},{"name":"c295","type":1,"text":"Once that works, we need a way of closing that settings window. Again, we’ll send a message on a channel, but this time from settings.js (as that is where the settings close button is located). Create (or replace the contents of) settings.js with the following:","markups":[{"type":2,"start":125,"end":136},{"type":2,"start":230,"end":241}]},{"name":"c88b","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"ae900d448e2aad541b21b7c7b5baa116"}},{"name":"b83c","type":1,"text":"And listen on that channel in main.js. Add the following:","markups":[{"type":2,"start":19,"end":26},{"type":2,"start":30,"end":37}]},{"name":"899b","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"67b1f853bb4c6dd2e88401d8bd90daca"}},{"name":"d2c2","type":1,"text":"Our settings window is now ready to implement its own logic.","markups":[]},{"name":"4b79","type":13,"text":"Storing and reading user settings","markups":[]},{"name":"a3a1","type":8,"text":"Follow along with the tag 05-settings-window-working:\ngit checkout 05-settings-window-working","markups":[{"type":1,"start":0,"end":53},{"type":2,"start":0,"end":54}]},{"name":"f39d","type":1,"text":"The process of interacting with the setting windows, storing the settings and promoting them to our application will look like this:","markups":[]},{"name":"b642","type":9,"text":"create a way of storing and reading user settings in a JSON file,","markups":[]},{"name":"d6dc","type":9,"text":"use these settings to display the initial state of the settings window,","markups":[]},{"name":"c1da","type":9,"text":"update the settings upon user interaction and","markups":[]},{"name":"c3b7","type":9,"text":"let the main process know of the changes.","markups":[{"type":2,"start":8,"end":20}]},{"name":"d602","type":1,"text":"We could just implement the storing and reading of settings in our main.js file but it sounds like a great use case for writing a little module that we can then include in various places.","markups":[{"type":2,"start":67,"end":74}]},{"name":"e85d","type":1,"text":"Working with a JSON configuration","markups":[{"type":1,"start":0,"end":33}]},{"name":"ce8e","type":1,"text":"That’s why we’re going to create configuration.js file and require it whenever we need it. Node.js uses the CommonJS module pattern which means that you export only your API and other files require/use the functions available on that API.","markups":[{"type":3,"start":108,"end":131,"href":"https://nodejs.org/docs/latest/api/modules.html","title":"","rel":"","anchorType":0},{"type":2,"start":33,"end":50},{"type":2,"start":54,"end":55}]},{"name":"22ec","type":4,"text":"Both main.js and settings.js make use of configuration.js.","markups":[],"layout":1,"metadata":{"id":"1*YnvmoGoSwPb-EMDK5GJwzA@2x.png","originalWidth":1260,"originalHeight":396}},{"name":"69bc","type":1,"text":"To make storing and reading easier, we’ll use the nconf module which abstracts the reading and writing of a JSON file for us. It’s a great fit. But first, we have to include it in the project with the following command executed in the CLI:","markups":[{"type":2,"start":50,"end":56}]},{"name":"376b","type":8,"text":"npm install --save nconf","markups":[]},{"name":"3ffe","type":1,"text":"This tells npm to install the nconf module as an application dependency and it will be included and used when we package our application for an end user (in contrast to installing with the save-dev argument which will only include modules for development purposes).","markups":[{"type":2,"start":30,"end":36},{"type":2,"start":189,"end":198}]},{"name":"dbd0","type":1,"text":"The configuration.js file is pretty simple, so let’s examine it fully. Create a configuration.js file in the root of the project with the following contents:","markups":[{"type":2,"start":4,"end":20},{"type":2,"start":80,"end":96}]},{"name":"3ec2","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"27c666d581bbdc0ce2a7caf7d3431746"}},{"name":"bbca","type":1,"text":"nconf only wants to know where to store your settings and we’re giving it the location of the user home folder and a file name. Getting the user home folder is simply a matter of asking Node.js (process.env) and differentiating between various platforms (as observed in the getUserHome() function).","markups":[{"type":2,"start":0,"end":5},{"type":2,"start":195,"end":206},{"type":2,"start":274,"end":287}]},{"name":"8892","type":1,"text":"Storing or reading settings is then accomplished with the built-in methods of nconf (set() for storing, get() for reading with save() and load() for file operations) and exporting the API by using the standard CommonJS module.exports syntax.","markups":[{"type":2,"start":78,"end":84},{"type":2,"start":85,"end":90},{"type":2,"start":104,"end":109},{"type":2,"start":127,"end":133},{"type":2,"start":138,"end":144},{"type":2,"start":219,"end":233}]},{"name":"dd8e","type":1,"text":"Initialising default shortcut key modifiers","markups":[{"type":1,"start":0,"end":43}]},{"name":"7f58","type":1,"text":"Before moving on with settings interaction, let’s initialise the settings in case we’re starting the application for the first time. We’ll store the modifier keys as an array with the key “shortcutKeys” and initialise it in main.js. For all of that to work, we must first require our configuration module:","markups":[{"type":2,"start":189,"end":201},{"type":2,"start":224,"end":231},{"type":2,"start":284,"end":297}]},{"name":"ffc8","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"ea4ade746582225a45b79422bfc625e1"}},{"name":"9e05","type":1,"text":"We try reading if there’s anything stored under the setting key “shortcutKeys”. If not, we set an initial value.","markups":[{"type":2,"start":65,"end":77}]},{"name":"2d92","type":1,"text":"As an additional thing in main.js, we’ll rewrite the registering of global shortcut keys as a function that we can call later when we update our settings. Remove the registering of shortcut keys from main.js and alter the file this way:","markups":[{"type":2,"start":26,"end":33},{"type":2,"start":200,"end":207}]},{"name":"eb3e","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"3dfb975512d79960ca75ba4c477991ca"}},{"name":"f81d","type":1,"text":"The function resets the global shortcuts so that we can set new ones, reads the modifier keys array from settings, transforms it to a Accelerator-compatible string and does the usual global shortcut key registration.","markups":[{"type":3,"start":134,"end":156,"href":"https://github.com/atom/electron/blob/master/docs/api/accelerator.md","title":"","rel":"","anchorType":0}]},{"name":"283f","type":1,"text":"Interaction in the settings window","markups":[{"type":1,"start":0,"end":34}]},{"name":"a46a","type":1,"text":"Back in the settings.js file, we need to bind click events which are going to change our global shortcuts. First, we’ll iterate through the checkboxes and mark the active ones (reading the values from the configuration module):","markups":[{"type":2,"start":12,"end":23}]},{"name":"7150","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"6b428ee05fe643cdd8da2a88b825491c"}},{"name":"106e","type":1,"text":"And now we’ll bind the checkbox behaviour. Take into consideration that the settings window (and its renderer process) are not allowed to change GUI binding. That means that we’ll need to send an ipc message from settings.js (and handle that message later):","markups":[{"type":2,"start":101,"end":119},{"type":2,"start":196,"end":200},{"type":2,"start":213,"end":224},{"type":2,"start":256,"end":257}]},{"name":"eec3","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"79819c882747475b06d74e59dd11625f"}},{"name":"a369","type":1,"text":"It’s a bigger piece of code but still pretty simple.\nWe iterate through all the checkboxes, bind a click event and on each click check if the settings array contains the modifier key or not — and according to that result, modify the array, save the result to settings and send a message to the main process which should update our global shortcuts.","markups":[{"type":2,"start":294,"end":306}]},{"name":"bac6","type":1,"text":"All that’s left to do is subscribe to the ipc channel “set-global-shortcuts” in main.js and update our global shortcuts:","markups":[{"type":2,"start":42,"end":45},{"type":2,"start":55,"end":75},{"type":2,"start":80,"end":87}]},{"name":"aba6","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"1a2f49a86a5e8022baa6ca20ebe59aba"}},{"name":"72c2","type":1,"text":"Easy. And with that, our global shortcut keys are configurable!","markups":[]},{"name":"5990","type":3,"text":"What’s on the menu?","markups":[]},{"name":"919f","type":8,"text":"Follow along with the tag 06-shortcuts-configurable:\ngit checkout 06-shortcuts-configurable","markups":[{"type":1,"start":0,"end":52},{"type":2,"start":0,"end":53}]},{"name":"6bbe","type":1,"text":"Another important concept in desktop applications are menus. There’s the always useful context menu (AKA right-click menu), tray menu (bound to a tray icon), application menu (on OS X), etc.","markups":[]},{"name":"2129","type":4,"text":"Megamenu.","markups":[],"layout":2,"metadata":{"id":"1*HinA-91xPYoCKel_obvuug@2x.png","originalWidth":494,"originalHeight":273}},{"name":"f1c9","type":1,"text":"In this guide we’ll add a tray icon with a menu. We’ll also use this opportunity to explore an other way of inter-process communication — the remote module.","markups":[{"type":3,"start":137,"end":155,"href":"https://github.com/atom/electron/blob/master/docs/api/remote.md","title":"","rel":"","anchorType":0},{"type":2,"start":142,"end":148}]},{"name":"ad67","type":1,"text":"The remote module makes RPC style calls from the renderer process to the main process. You require modules and work with them in the renderer process but they’re being instantiated in the main process and methods that you call on them are being executed in the main process. In practice, it means that you remotely request native GUI modules in index.js and call methods on them but they get executed in main.js. In that way, you could require the BrowserWindow module from index.js and instantiate a new browser window. Behind the scenes, that’s still a synchronous call to the main process which actually creates that new browser window.","markups":[{"type":2,"start":4,"end":10},{"type":2,"start":49,"end":65},{"type":2,"start":73,"end":85},{"type":2,"start":133,"end":149},{"type":2,"start":188,"end":200},{"type":2,"start":261,"end":273},{"type":2,"start":345,"end":354},{"type":2,"start":404,"end":411},{"type":2,"start":474,"end":482},{"type":2,"start":579,"end":591}]},{"name":"2c79","type":4,"text":"Call me maybe?","markups":[],"layout":1,"metadata":{"id":"1*vLP63PA79c_s3ZdbJCe-yg@2x.png","originalWidth":1320,"originalHeight":676}},{"name":"5231","type":1,"text":"Let’s see how we’d create a menu and bind it to a tray icon while doing it in a renderer process. Add the following to index.js:","markups":[{"type":2,"start":80,"end":96},{"type":2,"start":119,"end":127}]},{"name":"eb73","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"1d0993482e49e17c4e094b79b36bfbdb"}},{"name":"5d29","type":1,"text":"The native GUI modules (menu and tray) were required remotely and that way it’s safe to use them here.","markups":[{"type":2,"start":24,"end":28},{"type":2,"start":33,"end":37}]},{"name":"1ff0","type":1,"text":"A tray icon is defined through its icon. OS X supports image templates (by convention, an image is considered a template image if its filename ends with “Template”) which makes it easy to work with the dark and light themes. Other OSes get a regular icon.","markups":[]},{"name":"1cb0","type":1,"text":"There are multiple ways of building a menu in Electron. This way creates a menu template (a simple array with menu items) and builds a menu from that template. At the end, the new menu is attached to the tray icon.","markups":[]},{"name":"1c2d","type":3,"text":"Packaging your application","markups":[]},{"name":"6624","type":8,"text":"Follow along with the tag 07-ready-for-packaging:\ngit checkout 07-ready-for-packaging","markups":[{"type":1,"start":0,"end":49},{"type":2,"start":0,"end":50}]},{"name":"c3db","type":1,"text":"What’s the use of an application which you can’t let people download and use?","markups":[]},{"name":"1d8e","type":4,"text":"Wrap it up.","markups":[],"layout":2,"metadata":{"id":"1*O-ZI4nwQON9kNosiyfEfMw@2x.png","originalWidth":648,"originalHeight":594}},{"name":"5d0d","type":1,"text":"Packaging your application for all platforms is easy using electron-packager. In a nutshell, electron-packager abstracts away all work going into wrapping your app with Electron and generates all platforms for which you’re going to publish.","markups":[{"type":3,"start":53,"end":76,"href":"https://github.com/maxogden/electron-packager","title":"","rel":"","anchorType":0},{"type":2,"start":59,"end":76}]},{"name":"4926","type":1,"text":"It can be used as a CLI application or as part of a build process. Building a more complicated build scenario is not in the scope of this article, but we’ll leverage the power of npm scripts to make packaging easier. Using electron-packager is trivial, the general form when packaging an application is:","markups":[{"type":2,"start":179,"end":182}]},{"name":"fd55","type":8,"text":"electron-packager \x3clocation of project\x3e \x3cname of project\x3e \x3cplatform\x3e \x3carchitecture\x3e \x3celectron version\x3e \x3coptional options\x3e","markups":[]},{"name":"f981","type":1,"text":"where:","markups":[]},{"name":"f9f5","type":9,"text":"location of project points to the folder where your project is,","markups":[]},{"name":"a1a3","type":9,"text":"name of project defines the name of your project,","markups":[]},{"name":"1424","type":9,"text":"platform decides for which platforms to build (all to build for Windows, Mac and Linux),","markups":[{"type":2,"start":47,"end":51}]},{"name":"8c17","type":9,"text":"architecture decides for which architectures to build (x86 or x64, all for both) and","markups":[{"type":2,"start":67,"end":70}]},{"name":"a8fb","type":9,"text":"electron version lets you choose which Electron version to use.","markups":[]},{"name":"f16d","type":1,"text":"The first package is going to take a while because all the binaries for all platforms have to be downloaded. Subsequent packages are much faster.","markups":[]},{"name":"41f6","type":1,"text":"I package the sound machine typically like this (on a Mac):","markups":[]},{"name":"7570","type":8,"text":"electron-packager ~/Projects/sound-machine SoundMachine --all --version=0.30.2 --out=~/Desktop --overwrite --icon=~/Projects/sound-machine/app/img/app-icon.icns","markups":[]},{"name":"d15b","type":1,"text":"The new options included in the command are self-explanatory. To get a nice icon, you’ll first have to convert it to .icns (for Mac) and/or .ico (for Windows). Just search for a tool to convert your PNG file to these formats like this one (be sure to download the file with the .icns extension and not .hqx). If packaging for Windows from a non-Windows OS, you’ll need wine on your path (Mac users can use brew, while Linux users can use apt-get).","markups":[{"type":3,"start":230,"end":238,"href":"https://iconverticons.com/online/","title":"","rel":"","anchorType":0},{"type":2,"start":278,"end":283},{"type":2,"start":302,"end":306}]},{"name":"789e","type":1,"text":"It doesn’t make sense to run that big command every time. We can add another script to our package.json. First of all, install electron-packager as a development dependency:","markups":[{"type":2,"start":91,"end":103}]},{"name":"0a33","type":8,"text":"npm install --save-dev electron-packager","markups":[]},{"name":"77d7","type":1,"text":"Now we can add a new script to our package.json file:","markups":[{"type":2,"start":35,"end":47}]},{"name":"e976","type":11,"text":"Packaging just got a lot easier.","markups":[],"layout":1,"iframe":{"mediaResourceId":"bf18bf5b60b11f11af18ed2bdd1ceea0"}},{"name":"a3c0","type":1,"text":"And then run the following in CLI:","markups":[]},{"name":"9902","type":8,"text":"npm run-script package","markups":[]},{"name":"6a21","type":1,"text":"The package command starts the electron-packager, looks in the current directory and build to Desktop. The script should be changed if you are using Windows, but that is trivial.","markups":[]},{"name":"1ba9","type":1,"text":"The sound machine in its current state ends up weighing a whopping 100 MB. Don’t worry, once you archive it (zip or an archive type of your choice), it’ll lose more than half its size.","markups":[]},{"name":"067b","type":1,"text":"If you really want to go to town, take a look at electron-builder which takes the packages produced by electron-packager and creates automated installers.","markups":[{"type":3,"start":49,"end":65,"href":"https://github.com/loopline-systems/electron-builder","title":"","rel":"","anchorType":0},{"type":2,"start":49,"end":65},{"type":2,"start":103,"end":120}]},{"name":"12f5","type":3,"text":"Additional features to add","markups":[]},{"name":"da5c","type":1,"text":"With the application packaged and ready to go, you can now start developing your own features.","markups":[]},{"name":"31b4","type":1,"text":"Here are some ideas:","markups":[]},{"name":"8968","type":9,"text":"a help screen with info about the app, its shortcuts and author,","markups":[]},{"name":"416d","type":9,"text":"adding an icon and a menu entry to open the info screen,","markups":[]},{"name":"17a4","type":9,"text":"build a nice packaging script for faster builds and distribution,","markups":[]},{"name":"03ba","type":9,"text":"add notifications using node-notifier to let users know which sound they’re playing,","markups":[{"type":3,"start":24,"end":37,"href":"https://github.com/mikaelbr/node-notifier","title":"","rel":"","anchorType":0}]},{"name":"6fb2","type":9,"text":"use lodash to a greater extent for a cleaner code base (like iterating through arrays),","markups":[{"type":2,"start":4,"end":10}]},{"name":"b3fe","type":9,"text":"minify all your CSS and JavaScript with a build tool before packaging,","markups":[]},{"name":"5364","type":9,"text":"combine the aforementioned node-notifier with a server call to check for new versions of your app and notify users…","markups":[]},{"name":"2b28","type":1,"text":"For a nice challenge — try extracting your Sound machine browser windows logic and using something like browserify to create a web page with the same sound machine you’ve just created. One code base — two products (desktop application and web application). Nifty!","markups":[]},{"name":"1020","type":3,"text":"Diving deeper into Electron","markups":[]},{"name":"ee85","type":1,"text":"We’ve only scratched the surface of what Electron brings to the table. It’s pretty easy to do things like watching for power events on the host machine or getting various information on the screen (like cursor position).","markups":[]},{"name":"2dca","type":1,"text":"For all of those built-in utilities (and generally while developing applications with Electron), check out the Electron API docs.","markups":[{"type":3,"start":97,"end":128,"href":"https://github.com/atom/electron/tree/master/docs/api","title":"","rel":"","anchorType":0}]},{"name":"0cd6","type":1,"text":"These Electron API docs are a part of the docs folder at the Electron GitHub repository and that folder is well worth checking out.","markups":[]},{"name":"2c0f","type":1,"text":"Sindre Sorhus maintans an awesome list of Electron resources on which you can find really cool projects and information like an excellent overview of a typical Electron application architecture which can serve as a refresher on the code we’ve been developing up until now.","markups":[{"type":3,"start":26,"end":60,"href":"https://github.com/sindresorhus/awesome-electron","title":"","rel":"","anchorType":0}]},{"name":"bf42","type":1,"text":"In the end, Electron is based on io.js (which is going to be merged back into Node.js) and most of Node.js modules are compatible and can be used to extend your application. Just browse npmjs.com and grab what you need.","markups":[{"type":3,"start":186,"end":195,"href":"https://www.npmjs.com/","title":"","rel":"","anchorType":0}]},{"name":"8f10","type":3,"text":"Is that all?","markups":[]},{"name":"32b5","type":1,"text":"Not by a long shot.","markups":[]},{"name":"488a","type":1,"text":"Now, it’s time to build a bigger application. I’ve mostly skipped on using extra libraries or build tools in this guide to concentrate on important issues but you can easily write your app in ES6 or Typescript, use Angular or React and simplify your build with gulp or Grunt.","markups":[]},{"name":"ede4","type":1,"text":"With your favorite language, framework and build tool, why not build a Flickr sync desktop application using the Flickr API and node-flickrapi or a GMail client using Google’s officiall Node.js client library?","markups":[]},{"name":"4f2a","type":1,"text":"Pick an idea that’s going to motivate you, init a repository and just do it.","markups":[]}],"sections":[{"name":"0cd9","startIndex":0,"backgroundImage":{"id":"1*R4Id2_P8ZRw0lMaTATncjQ.jpeg","originalWidth":5616,"originalHeight":3744},"textLayout":2,"imageLayout":9},{"name":"713c","startIndex":2},{"name":"2b06","startIndex":17},{"name":"5dfc","startIndex":54},{"name":"482c","startIndex":65},{"name":"5858","startIndex":98},{"name":"0d6c","startIndex":114},{"name":"439c","startIndex":128},{"name":"7556","startIndex":182},{"name":"ef94","startIndex":194},{"name":"8e4a","startIndex":220},{"name":"0e04","startIndex":231},{"name":"7bbc","startIndex":237}]},"postDisplay":{"coverless":true}},"virtuals":{"statusForCollection":"APPROVED","allowNotes":true,"previewImage":{"imageId":"1*R4Id2_P8ZRw0lMaTATncjQ.jpeg","filter":"","backgroundSize":"","originalWidth":5616,"originalHeight":3744,"strategy":"resample","height":0,"width":0},"wordCount":4769,"imageCount":13,"readingTime":19.39622641509434,"subtitle":"A detailed guide on building your very own sound machine using JavaScript, Node.js and Electron","publishedInCount":1,"usersBySocialRecommends":[],"recommends":1145,"socialRecommends":[],"isBookmarked":false,"tags":[{"slug":"javascript","name":"JavaScript","postCount":42119,"virtuals":{"isFollowing":false},"metadata":{"followerCount":39832,"postCount":42119,"coverImage":{"id":"1*bJGV6eJQenm0Fle7tpqCcA.png","originalWidth":2152,"originalHeight":834}},"type":"Tag"},{"slug":"software-development","name":"Software Development","postCount":26078,"virtuals":{"isFollowing":false},"metadata":{"followerCount":23344,"postCount":26078,"coverImage":{"id":"1*Y0UYuGcFGSCfs5Eexafq6A.png","originalWidth":1200,"originalHeight":653}},"type":"Tag"},{"slug":"desktop-app","name":"Desktop App","postCount":74,"virtuals":{"isFollowing":false},"metadata":{"followerCount":107,"postCount":74,"coverImage":{"id":"1*BYeFTcHFVhZAhOq_-Y_m1Q.jpeg","originalWidth":494,"originalHeight":470,"isFeatured":true}},"type":"Tag"}],"socialRecommendsCount":0,"responsesCreatedCount":59,"links":{"entries":[{"url":"https://medium.com/@bojzi/overview-of-the-javascript-ecosystem-8ec4a0b7a7be","alts":[{"type":2,"url":"medium://p/8ec4a0b7a7be"},{"type":3,"url":"medium://p/8ec4a0b7a7be"}]}],"version":"0.3","generatedAt":1471904991149},"isLockedPreviewOnly":false,"takeoverId":"","metaDescription":"","totalClapCount":1398,"sectionCount":13},"coverless":true,"slug":"building-a-desktop-application-with-electron","translationSourcePostId":"","translationSourceCreatorId":"","isApprovedTranslation":false,"inResponseToPostId":"","inResponseToRemovedAt":0,"isTitleSynthesized":false,"allowResponses":true,"importedUrl":"","importedPublishedAt":0,"visibility":0,"uniqueSlug":"building-a-desktop-application-with-electron-204203eeb658","previewContent":{"bodyModel":{"paragraphs":[{"name":"0cd9","type":4,"text":"","layout":10,"metadata":{"id":"1*R4Id2_P8ZRw0lMaTATncjQ.jpeg","originalWidth":5616,"originalHeight":3744}},{"name":"e891","type":2,"text":"Building a desktop application with Electron","markups":[],"alignment":1},{"name":"2afe","type":1,"text":"A detailed guide on building your very own sound machine\nusing JavaScript, Node.js…","markups":[{"type":1,"start":0,"end":82},{"type":2,"start":0,"end":82}],"alignment":1}],"sections":[{"startIndex":0}]},"isFullContent":false},"license":0,"inResponseToMediaResourceId":"","canonicalUrl":"https://medium.com/developers-writing/building-a-desktop-application-with-electron-204203eeb658","approvedHomeCollectionId":"ce67810c8a52","approvedHomeCollection":{"id":"ce67810c8a52","name":"Developers Writing","slug":"developers-writing","tags":["DEVELOPER","CODE","DEVOPS"],"creatorId":"acaad8b8d21e","description":"Developers may not need to blog; but here your words are not wasted.","shortDescription":"Developers may not need to blog; but here your words are…","image":{"imageId":"1*YljLzTDkbwryga9Je01MyA.jpeg","filter":"","backgroundSize":"","originalWidth":617,"originalHeight":617,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":1563,"activeAt":1497879311380},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*BDmPU3IWQ5sTLaUgH-MDvA.jpeg","filter":"","backgroundSize":"","originalWidth":346,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"devswriting","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{"id":"1*33UPBWOo-rRGxEjrNHwCOw.jpeg","originalWidth":2000,"originalHeight":773},"logoImage":{"id":"1*1_o4NhRioinvp0lJYPDa0A@2x.jpeg","originalWidth":2000,"originalHeight":773,"alt":"Developers Writing"},"alignment":2,"layout":6}},{"type":1,"postListMetadata":{"source":3,"layout":2,"number":3,"postIds":["f761d45e75b9","292afc26c7bd","f39f12725377"]}},{"type":1,"postListMetadata":{"source":2,"layout":4,"number":3,"postIds":[],"sectionHeader":"Trending"}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":5,"postIds":[],"sectionHeader":"Latest"}}],"tintColor":"#FF97D1C6","lightText":false,"favicon":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF599187","point":0},{"color":"#FF55877E","point":0.1},{"color":"#FF507C74","point":0.2},{"color":"#FF4B716A","point":0.3},{"color":"#FF456660","point":0.4},{"color":"#FF3F5B56","point":0.5},{"color":"#FF384F4B","point":0.6},{"color":"#FF304340","point":0.7},{"color":"#FF283734","point":0.8},{"color":"#FF1F2A28","point":0.9},{"color":"#FF141C1A","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF97D1C6","point":0},{"color":"#FF8CC5BA","point":0.1},{"color":"#FF80B9AF","point":0.2},{"color":"#FF74ADA3","point":0.3},{"color":"#FF68A096","point":0.4},{"color":"#FF5B938A","point":0.5},{"color":"#FF4E867D","point":0.6},{"color":"#FF41796F","point":0.7},{"color":"#FF326A62","point":0.8},{"color":"#FF225C53","point":0.9},{"color":"#FF0D4C44","point":1}],"backgroundColor":"#FF97D1C6"},"highlightSpectrum":{"colorPoints":[{"color":"#FFEAF6F2","point":0},{"color":"#FFE6F5F1","point":0.1},{"color":"#FFE2F4EF","point":0.2},{"color":"#FFDDF3ED","point":0.3},{"color":"#FFD9F1EC","point":0.4},{"color":"#FFD5F0EA","point":0.5},{"color":"#FFD1EFE8","point":0.6},{"color":"#FFCCEEE7","point":0.7},{"color":"#FFC8EDE5","point":0.8},{"color":"#FFC3ECE3","point":0.9},{"color":"#FFBFEBE2","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[],"colorBehavior":1,"instantArticlesState":0,"acceleratedMobilePagesState":0,"ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{"id":"1*33UPBWOo-rRGxEjrNHwCOw.jpeg","originalWidth":2000,"originalHeight":773},"logoImage":{"id":"1*1_o4NhRioinvp0lJYPDa0A@2x.jpeg","originalWidth":2000,"originalHeight":773,"alt":"Developers Writing"},"alignment":2,"layout":6},"type":"Collection"},"newsletterId":"","webCanonicalUrl":"https://medium.com/developers-writing/building-a-desktop-application-with-electron-204203eeb658","mediumUrl":"https://medium.com/developers-writing/building-a-desktop-application-with-electron-204203eeb658","migrationId":"","notifyFollowers":true,"notifyTwitter":false,"isSponsored":false,"isRequestToPubDisabled":false,"notifyFacebook":false,"responseHiddenOnParentPostAt":0,"isSeries":false,"isSubscriptionLocked":false,"seriesLastAppendedAt":0,"audioVersionDurationSec":0,"sequenceId":"","isNsfw":false,"isEligibleForRevenue":false,"type":"Post"},"mentionedUsers":[],"collaborators":[],"membershipPlans":[],"collectionUserRelations":[],"mode":null,"references":{"User":{"5267c97a9fa1":{"userId":"5267c97a9fa1","name":"Kristian Poslek","username":"bojzi","createdAt":1411191835782,"lastPostCreatedAt":1470661716065,"imageId":"1*pRwc8SoQ6_O7qUzjsVxWkg.jpeg","backgroundImageId":"1*meI8JFnkIk5f_F6GN_aOnA.jpeg","bio":"Agile UX Expert at comSysto and technology nut.","twitterScreenName":"bojzi","socialStats":{"userId":"5267c97a9fa1","usersFollowedCount":61,"usersFollowedByCount":874,"type":"SocialStats"},"social":{"userId":"lo_598b541b3416","targetUserId":"5267c97a9fa1","type":"Social"},"facebookAccountId":"10152745105205970","allowNotes":1,"type":"User"}},"Collection":{"ce67810c8a52":{"id":"ce67810c8a52","name":"Developers Writing","slug":"developers-writing","tags":["DEVELOPER","CODE","DEVOPS"],"creatorId":"acaad8b8d21e","description":"Developers may not need to blog; but here your words are not wasted.","shortDescription":"Developers may not need to blog; but here your words are…","image":{"imageId":"1*YljLzTDkbwryga9Je01MyA.jpeg","filter":"","backgroundSize":"","originalWidth":617,"originalHeight":617,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":1563,"activeAt":1497879311380},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*BDmPU3IWQ5sTLaUgH-MDvA.jpeg","filter":"","backgroundSize":"","originalWidth":346,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"devswriting","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{"id":"1*33UPBWOo-rRGxEjrNHwCOw.jpeg","originalWidth":2000,"originalHeight":773},"logoImage":{"id":"1*1_o4NhRioinvp0lJYPDa0A@2x.jpeg","originalWidth":2000,"originalHeight":773,"alt":"Developers Writing"},"alignment":2,"layout":6}},{"type":1,"postListMetadata":{"source":3,"layout":2,"number":3,"postIds":["f761d45e75b9","292afc26c7bd","f39f12725377"]}},{"type":1,"postListMetadata":{"source":2,"layout":4,"number":3,"postIds":[],"sectionHeader":"Trending"}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":5,"postIds":[],"sectionHeader":"Latest"}}],"tintColor":"#FF97D1C6","lightText":false,"favicon":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF599187","point":0},{"color":"#FF55877E","point":0.1},{"color":"#FF507C74","point":0.2},{"color":"#FF4B716A","point":0.3},{"color":"#FF456660","point":0.4},{"color":"#FF3F5B56","point":0.5},{"color":"#FF384F4B","point":0.6},{"color":"#FF304340","point":0.7},{"color":"#FF283734","point":0.8},{"color":"#FF1F2A28","point":0.9},{"color":"#FF141C1A","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF97D1C6","point":0},{"color":"#FF8CC5BA","point":0.1},{"color":"#FF80B9AF","point":0.2},{"color":"#FF74ADA3","point":0.3},{"color":"#FF68A096","point":0.4},{"color":"#FF5B938A","point":0.5},{"color":"#FF4E867D","point":0.6},{"color":"#FF41796F","point":0.7},{"color":"#FF326A62","point":0.8},{"color":"#FF225C53","point":0.9},{"color":"#FF0D4C44","point":1}],"backgroundColor":"#FF97D1C6"},"highlightSpectrum":{"colorPoints":[{"color":"#FFEAF6F2","point":0},{"color":"#FFE6F5F1","point":0.1},{"color":"#FFE2F4EF","point":0.2},{"color":"#FFDDF3ED","point":0.3},{"color":"#FFD9F1EC","point":0.4},{"color":"#FFD5F0EA","point":0.5},{"color":"#FFD1EFE8","point":0.6},{"color":"#FFCCEEE7","point":0.7},{"color":"#FFC8EDE5","point":0.8},{"color":"#FFC3ECE3","point":0.9},{"color":"#FFBFEBE2","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[],"colorBehavior":1,"instantArticlesState":0,"acceleratedMobilePagesState":0,"ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{"id":"1*33UPBWOo-rRGxEjrNHwCOw.jpeg","originalWidth":2000,"originalHeight":773},"logoImage":{"id":"1*1_o4NhRioinvp0lJYPDa0A@2x.jpeg","originalWidth":2000,"originalHeight":773,"alt":"Developers Writing"},"alignment":2,"layout":6},"type":"Collection"}},"Social":{"5267c97a9fa1":{"userId":"lo_598b541b3416","targetUserId":"5267c97a9fa1","type":"Social"}},"SocialStats":{"5267c97a9fa1":{"userId":"5267c97a9fa1","usersFollowedCount":61,"usersFollowedByCount":874,"type":"SocialStats"}}}})
// ]]></script>
 </body>
</html>