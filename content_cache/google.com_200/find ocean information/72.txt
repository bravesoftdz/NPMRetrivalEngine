<!doctype html>
<html lang="en-US">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="chrome=1"> 
  <meta name="HandheldFriendly" content="True"> 
  <meta name="MobileOptimized" content="320"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <meta name="referrer" content="no-referrer"> 
  <meta name="description" content="Better than yesterday, Worse than tomorrow."> 
  <meta property="og:title" content="Pain-free Meteor.js App deployment with Digital Ocean &amp; Namecheap"> 
  <meta property="og:description" content="I assume that, like me, you discovered the awesome Meteor framework and spent a few (several?) nights coding away and assembling a working version of a web application, which is now ready to be pushed to the rest of the world.
I also assume that, like me (back in the days) you don’t know much about web servers and domain hosts. I’ll also assume that you don’t want to spend a fortune on it (even if your hard-earned web application probably deserves it)."> 
  <meta property="og:type" content="article"> 
  <meta property="og:url" content="http://leoncvlt.com/blog/pain-free-meteor.js-app-deployment-with-digital-ocean--namecheap/"> 
  <meta property="article:published_time" content="2016-02-16T00:00:00+00:00"> 
  <meta property="article:modified_time" content="2016-02-16T00:00:00+00:00"> 
  <title>


     Pain-free Meteor.js App deployment with Digital Ocean &amp; Namecheap 

</title> 
  <link rel="canonical" href="http://leoncvlt.com/blog/pain-free-meteor.js-app-deployment-with-digital-ocean--namecheap/"> 
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/styles/default.min.css"> 
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:400,700|Ubuntu+Mono:400,400i,700,700i|Raleway:500"> 
  <link rel="stylesheet" href="http://leoncvlt.com/css/reset.css?t=2017-04-23%2016%3a52%3a02.7315573%20%2b0100%20BST"> 
  <link rel="stylesheet" href="http://leoncvlt.com/css/pygments.css?t=2017-04-23%2016%3a52%3a02.7315573%20%2b0100%20BST"> 
  <link rel="stylesheet" href="http://leoncvlt.com/css/main.css?t=2017-04-23%2016%3a52%3a02.7315573%20%2b0100%20BST"> 
  <link rel="stylesheet" href="http://leoncvlt.com/css/override.css?t=2017-04-23%2016%3a52%3a02.7315573%20%2b0100%20BST"> 
  <link rel="shortcut icon" href="http://leoncvlt.com/img/leaf.ico"> 
 </head> 
 <body lang="en"> 
  <section class="header"> 
   <div class="container"> 
    <div class="content"> 
     <a href="http://leoncvlt.com/">
      <div class="name"> 
       <span class="dark">Leon</span>
       <span class="bright">ardo</span> 
       <span class="dark">C</span>
       <span class="bright">a</span>
       <span class="dark">V</span>
       <span class="bright">a</span>
       <span class="dark">L</span>
       <span class="bright">e</span>
       <span class="dark">T</span>
       <span class="bright">ti</span> 
      </div></a> 
     <nav> 
      <ul> 
       <a href="http://leoncvlt.com/blog/"><li>Blog</li></a> 
       <a href="http://leoncvlt.com/about/"><li>About</li></a> 
       <a href="http://leoncvlt.com/resume/"><li>Resume</li></a> 
       <a href="http://leoncvlt.com/projects/"><li>Projects</li></a> 
      </ul> 
     </nav> 
    </div> 
   </div> 
  </section> 
  <section class="icons"> 
   <div class="container"> 
    <div class="content"> 
    </div> 
   </div> 
  </section> 
  <section class="main post non-narrow zero-top-spacing"> 
   <div class="container"> 
    <div class="content"> 
     <div class="front-matter"> 
      <div class="title-container"> 
       <div class="page-heading">
         Pain-free Meteor.js App deployment with Digital Ocean &amp; Namecheap 
       </div> 
       <div class="initials">
        <a href="http://leoncvlt.com">ad</a>
       </div> 
      </div> 
      <div class="meta"> 
       <div class="date" title="Tue Feb 16 2016 00:00:00 UTC">
        Feb, 2016
       </div> 
       <div class="reading-time">
        <div class="middot"></div>8 minutes read
       </div> 
      </div> 
     </div> 
     <div class="markdown"> 
      <p>I assume that, like me, you discovered the awesome Meteor framework and spent a few (several?) nights coding away and assembling a working version of a web application, which is now ready to be pushed to the rest of the world.</p> 
      <p>I also assume that, like me (back in the days) you don’t know much about web servers and domain hosts. I’ll also assume that you don’t want to spend a fortune on it (even if your hard-earned web application probably deserves it).</p> 
      <p>This guide will guide you through a very simple process of deploying your Meteor.js app to the vastness of the web for a modest price:</p> 
      <ul> 
       <li>$5 a month for a Digital Ocean Server</li> 
       <li>$0.8 to $10 a year for a Namecheap domain</li> 
       <li>30-ish minutes of your time (the most important currency!)</li> 
      </ul> 
      <p>It’s a seemingly simple process and several guides have already being written about this task.</p> 
      <p>However, I personally faced some annoying issues when deploying my first little web-app <a href="http://trackburnr.com">trackburnr</a>. I spent a glorious, sunny sunday afternoon to figuring them out?—?hopefully I can spare you the pain of doing that with this guide.</p> 
      <h3 id="create-a-server-droplet-on-digital-ocean">Create a server Droplet on Digital&nbsp;Ocean</h3> 
      <p>You first need a web server to host your application in (unless you want to leave your computer on until the end of time and pray for no power cut-offs).&nbsp; My weapon of choice is Digital Ocean. Use this affiliate link to sign up and you’ll get 10$ in credit?—?the equivalent of two free months of hosting. Neat.</p> 
      <p>Sign up and create a Droplet (their name for a server machine) with Ubuntu 14.04. The 5$ a month tier will do for now (you can resize the droplet at any moment afterwards?—?if your app is being used by a decent amount of loyal people it might be a good idea to bump it up to the 10$ one).</p> 
      <p>You’ll be emailed your droplets info (IP address and password) shortly afterwards. Write those in a napkin and keep it safe.</p> 
      <p>You can remotely access your new, personal server machine straight from your web browser by clicking the Console Access button in the Digital Ocean user dashboard. It’s a very bare-bone view, thought, and you won’t be able to copy-paste code in it.</p> 
      <p>I prefer using a SSH connection straight from your home machine. You can do this from a terminal on a Mac or Linux machine, or use the awesome <a href="http://cmder.net/">cmder</a> if you’re on Windows.</p> 
      <p>You can log on your droplet by typing <code>ssh [username]@[droplet_ip_address]</code> and confirm with your password.</p> 
      <h3 id="point-a-namecheap-domain-to-your-server">Point a Namecheap domain to your&nbsp;server</h3> 
      <p>You’ll likely want a shiny custom domain for your app. I have used Namecheap in the past and I’m happy with it?—?domains are cheap, the admin interface looks good and I have had no issues whatsoever.</p> 
      <p>Once you buy your domain, we’ll need to point it to your Droplet’s ID address. Digital Ocean’s guides advises you to move the DNS nameservers (DNS, or “Domain Name System”, is a naming system that is used to convert a server’s host name into an IP address.) from Namecheap to Digital Ocean to be able to manage them from Digital Ocean itself.&nbsp;</p> 
      <p>However, this step takes a few days to propagate and I found that Namecheap’s management panel is just as good, and way quicker to see changes with. So we’ll stick with it.</p> 
      <p>Click on the Manage button of your domain and then Advanced DNS. Click Add New Record, choose A Record, and input @ as the Host and the Droplet’s IP address (xxx.xxx.xxx.xxx) as the Value. Leave TTL to automatic, and save all changes.</p> 
      <p>Navigate to <a href="http://yourdomain.com">http://yourdomain.com</a> (this will be whatever domain you bought) and you should see the Droplet’s intro page, confirming that the DNS record is working fine.</p> 
      <p>Now go back to the Domain tab of your domain management page, and take a look at the Redirect Domain section. You should have a redirect setup, pointing from <a href="http://yourdomain.com">http://yourdomain.com</a> to www.yourdomain.com. It means that it you visit the www-less address for your domain, you will be automatically redirected to the www one.</p> 
      <p>We want to reverse this. Change the source url of the redirect to www.yourdomain.com and the destination URL to <a href="http://yourdomain.com">http://yourdomain.com</a>. This way when visiting the www version of the domain, you will be redirected to the www-less version.</p> 
      <p>We will shortly see why we need this specific setup. For now, let’s deploy our Meteor application to the server.</p> 
      <h3 id="setup-and-deploy-with-mupx">Setup and Deploy with&nbsp;mupx</h3> 
      <p>There’s a little awesome package that will automatically deploy any Meteor apps this procedure for you called Meteor-Up.</p> 
      <p>Provided you have node.js installed on your development machine, you can get Meteor-Up by typing: <code>npm install -g mupx</code>.</p> 
      <p>Make sure you install the mupx version. You might have heard about Meteor-Up as mup, but that version is deprecated and no longer maintened. mupx is the up-to-date package currently in development. Navigate to your project directory and type <code>mupx init</code>.</p> 
      <p>This will create two files into your Meteor project directory: * <code>mup.json</code>?—?the Meteor Up configuration file * <code>settings.json</code> —?Settings for Meteor’s settings API (We won’t touch this for now).</p> 
      <p>Let’s edit the mup.json file to set up our deployment settings:</p> 
      <pre><code>{
  // Server authentication info
  "servers": [
    {
      "host": "dropletaddress",
      "username": "root",
      "password": "password",
      // or pem file (ssh based authentication)
      // WARNING: Keys protected by a passphrase are not supported
      //"pem": "~/.ssh/id_rsa"
      // Also, for non-standard ssh port use this
      //"sshOptions": { "port" : 49154 },
      // server specific environment variables
      "env": {}
    }
  ],

  // Install MongoDB on the server. Does not destroy the local MongoDB on future setups
  "setupMongo": true,

  // Application name (no spaces).
  "appName": "yourappname",

  // Location of app (local directory). This can reference '~' as the users home directory.
  // i.e., "app": "~/Meteor/my-app",
  // This is the same as the line below.
  "app": ".",

  // Configure environment
  // ROOT_URL must be set to your correct domain (https or http)
  "env": {
    "PORT": 3000,
    "ROOT_URL": "dropletaddress",
    "UPSTART_UID": "meteoruser",
    "ROOT_URL": "http://yourappname.com",
  },

  // Meteor Up checks if the app comes online just after the deployment.
  // Before mup checks that, it will wait for the number of seconds configured below.
  "deployCheckWaitTime": 15,

  // show a progress bar while uploading.
  // Make it false when you deploy using a CI box.
  "enableUploadProgressBar": true
}
</code></pre> 
      <p>Make sure to change the settings accordingly to your setup, such as “host” and “ROOT_URL” to your Digital Ocean’s droplet IP address (<a href="http://xxx.xxx.xxx.xxx">http://xxx.xxx.xxx.xxx</a>), “appName” to your application name, and “password” to your droplet’s password. Afterwards, run <code>mupx setup</code> to setup the server for the upcoming deployment?—?this step will install node.js, mongo and all the packages required by Meteor on the droplet.</p> 
      <p>Finally, run <code>mupx deploy</code> to package up your Meteor application and upload it to the server accordingly to to the mup.json settings we specified earlier. This will take a few minutes, so feel free to get a (small) burrito.</p> 
      <p>If mupx incurs into a Verifying deployment: FAILED error during deployment, it means that the app didn’t start in time for mupx to check if was deployed correctly (chances are it was). You can likely fix this by increasing deployCheckWaitTime to 120:</p> 
      <pre><code>...
  // Meteor Up checks if the app comes online just after the deployment.
  // Before mup checks that, it will wait for the number of seconds configured below.
  "deployCheckWaitTime": 120,
...
</code></pre> 
      <p>After deploy is finish, navigate to yourdomain.com:3000 and you should be able to see your web app in action. However, we don’t want to type that ugly port number next to your shiny domain address, right? Next we’ll setup a tool called nginx to fix this.</p> 
      <h3 id="set-up-a-reverse-proxy-with-nginx">Set up a reverse proxy with&nbsp;nginx</h3> 
      <p>SSH back into your droplet, and type those commands to install nginx:</p> 
      <pre><code>sudo apt-get update
sudo apt-get install nginx
</code></pre> 
      <p>If you navigate back to your domain, you should see the nginx welcome page. We’ll change nginx settings to set up a proper URL and remove the port addresses. We’ll do this by creating a file in the sites-available nginx folder <code>sudo nano /etc/nginx/sites-available/yourappname.com.conf</code> Then, paste those contents in:</p> 
      <pre><code>server { 
    listen *:80; 
 
    server_name yourdomain.com; 
 
    access_log /var/log/nginx/app.dev.access.log; 
    error_log /var/log/nginx/app.dev.error.log;
    large_client_header_buffers 4 16k;
    location / { 
        proxy_pass http://127.0.0.1:3000; 
        proxy_http_version 1.1; 
        proxy_set_header Upgrade $http_upgrade; 
        proxy_set_header Connection ‘upgrade’; 
        proxy_set_header X-Forwarded-For $remote_addr; 
    } 
}
</code></pre> 
      <p>What this will do is forwarding any requests to <a href="http://yourdomain.com">http://yourdomain.com</a> to <a href="http://yourdomain.com:3000">http://yourdomain.com:3000</a>, taking you to your web app. That’s why it was important to set up the redirection in Namecheap earlier?—?navigating to <a href="http://www.yourdomain.com">http://www.yourdomain.com</a> would not have worked.</p> 
      <p>Save by the file by pressing Ctrl-X, typing Y and then pressing Enter. Then, enable your site by adding a symbolic link to your configuration in the nginx sites-enabled folder. You can do this by typing <code>ln -s /etc/nginx/sites-available/yourappname.com.conf /etc/nginx/sites-enabled/yourappname.com.conf</code>.</p> 
      <p>Afterwards, restart the nginx service by typing <code>service nginx restart</code>.</p> 
      <p>Navigate to <a href="http://yourdomain.com">http://yourdomain.com</a>. You should be able to see your web app without the need of specifying the port 3000.</p> 
      <p>You might find yourself incurring in 400 Bad requests errors. It’s a somewhat common issue caused by the cookies data sent to your server being too big.&nbsp; You can fix this by adding the large_client_header_buffers 4 16k line to the server tag in the nginx configuration file in sites-available:</p> 
      <pre><code>server { 
    ...
    large_client_header_buffers 4 16k;
    location / { 
        .... 
</code></pre> 
      <h3 id="conclusion">Conclusion</h3> 
      <p>This is the basic, bare-bone setup for deploying a Meteor app to a Digital Ocean server and going through the most common hiccups. There is a whole world of pain awaiting for you if you want to set up a SSL certificate, or having multiple websites and meteor applications on the same droplet. If I make it through it alive, I might tell you the story another time.</p> 
      <br> 
      <p><a href="http://leoncvlt.com/blog/">Back to posts</a></p> 
     </div> 
     <br> 
     <div class="disqus"> 
      <div id="disqus_thread"></div> 
      <script type="text/javascript">
    var disqus_shortname = 'leoncvlt';
    var disqus_identifier = 'http:\/\/leoncvlt.com\/blog\/pain-free-meteor.js-app-deployment-with-digital-ocean--namecheap\/';
    var disqus_title = 'Pain-free Meteor.js App deployment with Digital Ocean \x26 Namecheap';
    var disqus_url = 'http:\/\/leoncvlt.com\/blog\/pain-free-meteor.js-app-deployment-with-digital-ocean--namecheap\/';

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script> 
      <noscript>
       Please enable JavaScript to view the 
       <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
      </noscript> 
      <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> 
     </div> 
    </div> 
   </div> 
  </section> 
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.8.0/highlight.min.js"></script> 
  <script type="text/javascript">
    hljs.initHighlightingOnLoad();
  </script>   
 </body>
</html>