<!doctype html>
<html lang="en">
 <head> 
  <title>A Malicious Module on npm</title> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta name="author" content="^Lift Security Team"> 
  <meta name="description" content="security, secure apps, node.js, audits, advisories, security training"> 
  <link rel="icon" type="image/png" href="/theme/images/favicon.png"> 
  <script src="//use.typekit.net/jle1tuk.js"></script> 
  <script>
  try{Typekit.load({async:true});}catch(e){}
</script> 
  <link rel="stylesheet" href="/theme/css/main.css"> 
  <script src="/theme/js/highlight.min.js"></script> 
  <script>
  hljs.initHighlightingOnLoad();
  hljs.configure({classPrefix: '' });
</script> 
  <script src="/theme/js/google.js" async></script> 
  <script src="/theme/js/gs.js" async></script> 
  <link href="https://blog.liftsecurity.io/feeds/all.atom.xml" type="application/atom+xml" rel="alternate" title="The ^lift Security Blog — All Content Atom Feed"> 
  <link href="https://blog.liftsecurity.io/feeds/posts.atom.xml" type="application/atom+xml" rel="alternate" title="The ^lift Security Blog Categories Atom Feed"> 
  <meta name="tags" contents="security"> 
  <meta name="tags" contents="node.js"> 
  <meta name="tags" contents="npm"> 
  <meta name="tags" contents="malicious"> 
  <meta name="tags" contents="module"> 
  <script src="/theme/js/permalink.min.js" async></script> 
  <script>
    var emailInput = document.querySelector('[type=email]');
    if (emailInput) {
        emailInput.addEventListener('change', function () {
            var val = emailInput.value.replace(/\s*/g, '');
            if (val) {
                _kmq.push(['identify', val]);
            }
        });
    }
    _kmq.push(['trackSubmit', '.andyou-form', '&you Subscribe']);

    // autofocus input (the script is loaded async, so we don't know if we have it)
    var input = document.getElementById('subscribe-name')
    if (window.focusWhenFirstVisible) {
        window.focusWhenFirstVisible(input)
    } else {
        window.autofocus = input
    }
</script> 
 </head> 
 <body id="post"> 
  <header role="banner" class="header-has-logo cf header-has-logo header-short"> 
   <div class="container cf"> 
    <h1 class="pull-left mb0"><a href="//liftsecurity.io" title="^Lift Security" class="logo logo-lift transition transition-fadeout">^Lift Security</a></h1> 
    <nav role="navigation" class="pull-right top-nav cf mb0"> 
     <input type="checkbox" id="menu-toggle" class="menu-toggle"> 
     <label for="menu-toggle">Menu</label> 
     <ul class="list-unstyled list-inline cf"> 
      <li><a href="//liftsecurity.io/#services" title="Services">Services</a></li> 
      <li><a href="//liftsecurity.io/case-studies" title="Case Studies">Case Studies</a></li> 
      <li><a href="//liftsecurity.io/team" title="Team">Team</a></li> 
      <li><a href="//blog.liftsecurity.io" title="Blog">Blog</a></li> 
      <li><a href="//liftsecurity.io/contact" title="Contact">Contact</a></li> 
     </ul> 
    </nav> 
    <h2 class="headline-main">The Blog</h2> 
   </div> 
  </header> 
  <div class="container"> 
   <div class="grid-flex-container cf"> 
    <div role="main" class="grid-flex-cell"> 
     <div class="content" role="main"> 
      <article class="post"> 
       <h2 class="postTitle">A Malicious Module on npm</h2> 
       <div class="meta cf"> 
        <span> <a href="../../../../2015/01/27/a-malicious-module-on-npm" rel="bookmark" title="Permalink" class="permalink">Jan 27, 2015</a> </span> 
        <span> • <span> <a href="/authors/adam-baldwin">Adam Baldwin</a> </span> </span> 
       </div> 
       <div class="postContent">
        <p>Earlier this week a package called <code>rimrafall</code> was published to npm. This package had a preinstall hook that executed the command <code>rm -rf /*</code>. It was created on 01/26/2015 at 15:28 and immediately posted to Hacker News and then it was unpublished from the registry by npm at 17:06 -- giving it a lifespan of less than two hours.</p> 
        <p>The goal behind this example was to raise awareness of potential insecurities with how npm installs packages, and to highlight the necessary steps that are required to mitigate a rogue package from doing harm.</p> 
        <p>There are a couple of topics worth close examination in this post:</p> 
        <ul> 
         <li>The topic of security disclosure and how to disclose information responsibly</li> 
         <li>The responsibility of both developers and enterprises who use open source software</li> 
        </ul> 
        <h2>Full disclosure has its place, but it's not the first step.</h2> 
        <p>Over the years I've found and disclosed my share of bugs and I have usually taken the responsible disclosure route where you tell the vendor, let them fix it, and then publicly release the details. However, I've also dropped my share of "well I just want to feed my ego now" bugs, and it has taken me years to realize the effect of doing this.</p> 
        <p>There is an interesting yin and yang to discovering security vulnerabilities. A security researcher hits a high when a vulnerability is found, and at the same time the developer responsible for creating the code hits an emotional low. Disclosure is the only thing that's going to give the finder another hit to keep the high going, and that excitement is fleeting at best. In most cases, the discovery of the bug feeds the ego of the researcher, but there is little long term investment in the code base. Naturally, this can often feel like a "drive by attack" to a developer who has invested a lot of time and energy into building an application.</p> 
        <p><strong>Full disclosure does have its place when there has been no action from the vendor, and not communicating the problem to the community would be negligent on the finder's part.</strong></p> 
        <p>In this case, however, there was no attempt by João Jerónimo to communicate with the npm community, to try and address it before going full press by creating and publishing a package that was, in fact, malicious in nature. I believe he was well intentioned to highlight this risk with npm, but it was executed in bad form.</p> 
        <p>If you are a developer or researcher, and you are unsure about how to handle reporting a security issue, or are not getting the response you feel you should be getting, talk with us at the <a href="https://nodesecurity.io">Node Security Project</a>. We would be happy to help guide you through the process.</p> 
        <h2>You are responsible for what you require.</h2> 
        <p><strong>I've said it once and I'll say it again -- you are responsible for what you require.</strong> This is not the fault or failure of npm.</p> 
        <p>npm provides a set of tools to enable the module community to exist and thrive. They do their best to not police content, however when code exists that is directly malicious in nature, it gets removed (as <code>rimrafall</code> was).</p> 
        <p>This is not the first, nor will it be the last malicious package we will see on npm (or any other package distribution system for that matter).</p> 
        <p>Each published version of a package technically represents a threat to your system and as such, you should have a process in place to validate and vet what you and your developers want to use. While I understand that might be a daunting and ocean boiling process, you can't leave the quality of the code up to developers who are outside your sphere of influence.</p> 
        <h2>So how do I protect myself when I npm install something?</h2> 
        <p>npm allows the module author to specify a number of <a href="https://docs.npmjs.com/misc/scripts">hooks</a> to be run at different stages of the install or uninstall. These hooks are run by default when you perform these npm actions.</p> 
        <p>To know if a module you are about to install has hooks that will run, use the command <code>npm show $module scripts</code> (thanks to <a href="https://twitter.com/naholyr">@naholyr</a> for reminding me of this.)</p> 
        <h3>Inspect the source before you <code>npm install</code> it</h3> 
        <p>To make sure these hooks aren't run when you want to review a package, don't npm install it, but look at the source code in its repository first. Note that the repository does not have to represent the package in any way shape or form. A malicious package will most likely not show its cards here or even have a repository.</p> 
        <p>You can download the tarball of the module directly and inspect it.</p> 
        <p><code>http://registry.npmjs.org/MODULENAME/-/MODULENAME-VERSION.tgz</code></p> 
        <p>Example: <code>http://registry.npmjs.org/helmet/-/helmet-0.6.0.tgz</code></p> 
        <h3>Install it safely with <code>--ignore-scripts</code></h3> 
        <p>If you do just want to install it from npm, the easiest way is to use the npm install option <code>--ignore-scripts</code> which doesn't protect you from malicious or native code in the module, but does stop the script hooks from executing immediately on installation.</p> 
        <h3>Make sure you're installing the right thing</h3> 
        <p>Another issue is that of typo'd package names.</p> 
        <p>I did some research a few years back on the risk of installing the wrong module. Do developers actually make typos in module names they wish to install? Sure enough, they do. I was given access to review the 404's for the npm registry logs, and found some very interesting data.</p> 
        <p>Based on the top 100 most depended upon modules at the time, I generated common typo's using <a href="https://github.com/cfinke/Typo.js/">typojs</a> and looked to see how many people had tried to install the typo'd modules instead of the correct ones. There are a few interesting results that bubbled up to the surface.</p> 
        <p>coffee-script had the following high scoring typo's - coffeescript: 20354 - coffe-script: 3171</p> 
        <p>uglify-js - uglifyjs: 13315</p> 
        <p>socket.io - socketio: 7780</p> 
        <p>Notably, it was the modules with punctuation in them that tended to be the most commonly typo'd. Fortunately these modules don't exist, so trying to install them will just error on you, but it could be a lot worse if someone published a malicious package there instead. The point being that even if you use <code>--ignore-scripts</code> you still might end up with a malicious package on your system.</p> 
        <h2>Stay safe!</h2> 
        <p>With all this in mind, hopefully, you can now put processes in place and take responsibility for the modules you require.</p> 
        <p>If you would like a helping hand, check out <a href="https://requiresafe.com">requireSafe</a>. With requireSafe, the ^lift team will proactively monitor and audit the modules you depend on for vulnerabilities and risks, and notify you as soon as we find them. We'll be announcing more about requireSafe in the coming months.</p>
       </div> 
       <div class="postContent"> 
        <h4>You might also enjoy reading:</h4> 
        <ul> 
         <li> <a href="../../../../2015/02/10/introducing-requiresafe-peace-of-mind-third-party-node-modules">"Introducing requireSafe: peace of mind for third-party Node modules"</a> </li> 
         <li> <a href="../../../../2014/03/02/of-atom.io-and-security">of atom.io and security</a> </li> 
         <li> <a href="../../../../2014/10/07/node-security-performance-london-september">Node.js Security and Performance Training in London</a> </li> 
         <li> <a href="../../../../2014/06/24/two-reads-dont-make-a-write">Two Reads Don't Make a Write</a> </li> 
         <li> <a href="../../../../2015/09/21/xss.io-shutting-down">xss.io is Shutting Down</a> </li> 
        </ul> 
       </div> 
      </article> 
     </div> 
    </div> 
    <aside role="complementary" class="grid-flex-cell grid-flex-cell-1of3"> 
     <div class="center"> 
      <img src="/theme/images/logo-node-security-project.svg" height="80" alt="Node Security Project logo"> 
      <p><strong>Find and Fix Node.js Security Flaws</strong></p> 
      <p>Continuously monitor your node.js applications for the latest security flaws found and curated by our team.</p>
      <a href="https://nodesecurity.io" class="button button-outlined">Learn more</a> 
     </div> 
    </aside> 
   </div> 
  </div> 
  <footer role="contentinfo" class="footer-primary"> 
   <div class="container center"> 
    <nav role="navigation"> 
     <ul class="list-unstyled list-inline"> 
      <li><a href="//liftsecurity.io/#services">Services</a></li> 
      <li><a href="//liftsecurity.io/case-studies" title="Case Studies">Case Studies</a></li> 
      <li><a href="//liftsecurity.io/advisories" title="Advisories">Advisories</a></li> 
      <li><a href="//liftsecurity.io/jobs" title="Jobs">Jobs</a></li> 
      <li><a href="//blog.liftsecurity.io" title="Blog">Blog</a></li> 
      <li><a href="//liftsecurity.io/contact" title="Contact">Contact</a></li> 
     </ul> 
    </nav> 
    <p>© 2017, ^Lift Security</p> 
   </div> 
  </footer>  
 </body>
</html>