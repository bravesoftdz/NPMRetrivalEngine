<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="chrome=1"> 
  <title>PhysicsJS - A modular, extendable, and easy-to-use physics engine for javascript</title> 
  <meta name="description" content="A modular, extendable, and easy-to-use physics engine for javascript"> 
  <meta name="keywords" content="PhysicsJS, physics, engine, javascript"> 
  <meta name="author" content="Jasper Palfree"> 
  <link href="http://fonts.googleapis.com/css?family=Alice&amp;text=Well%20Caffeinated" rel="stylesheet" type="text/css"> 
  <link href="http://fonts.googleapis.com/css?family=Quattrocento+Sans:400,700" rel="stylesheet" type="text/css"> 
  <link rel="stylesheet" href="assets/fonts/Caviar-Dreams-fontfacekit/stylesheet.css"> 
  <link rel="stylesheet" href="docs/css/highlight-nearly-solarized.css"> 
  <link rel="stylesheet" href="assets/styles/codemirror.css"> 
  <link rel="stylesheet" href="assets/styles/styles.css"> 
  <script src="assets/scripts/scale.fix.js"></script> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]--> 
  <script src="assets/scripts/vendor/physicsjs-current/physicsjs-full.min.js"></script> 
 </head> 
 <body> 
  <div id="main" class="site"> 
   <section id="main-header"> 
    <header> 
     <h1 class="header"><a href="http://wellcaffeinated.net/PhysicsJS">Physics<span>JS</span></a></h1> 
     <ul class="menu"> 
      <li><a href="./">Showcase</a></li> 
      <li><a href="examples">More Demos</a></li> 
      <li><a href="installation">Getting Started</a></li> 
      <li><a href="basic-usage">Basic Usage</a></li> 
      <li><a href="tutorials">Tutorials</a></li> 
      <li><a href="https://github.com/wellcaffeinated/PhysicsJS/wiki">Documentation</a></li> 
      <li><a href="docs">API Reference</a></li> 
      <li><a href="contribute">Contribute</a></li> 
     </ul> 
     <ul> 
      <li>v0.7.0 (beta)</li> 
      <li class="button download"><a class="button download" href="https://github.com/wellcaffeinated/PhysicsJS/archive/v0.7.0.zip">Download</a></li> 
      <li class="button"> 
       <form action="http://codepen.io/pen/define" method="POST" target="_blank"> 
        <input id="data-input" type="hidden" name="data" value="{&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;description&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;css_external&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;js_external&amp;quot;:&amp;quot;http://requirejs.org/docs/release/2.1.15/minified/require.js&amp;quot;,&amp;quot;html&amp;quot;:&amp;quot;<div id=\&amp;quot;viewport\&amp;quot;></div>&amp;quot;,&amp;quot;css&amp;quot;:&amp;quot;html, body { height: 100%; margin: 0; }\n#viewport { position: relative; height: 100%; background: #1d1f20; }&amp;quot;,&amp;quot;js&amp;quot;:&amp;quot;require.config({\n  baseUrl: &amp;apos;http://wellcaffeinated.net/PhysicsJS/assets/scripts/vendor/&amp;apos;,\n  packages: [\n    {\n      name: &amp;apos;physicsjs&amp;apos;,\n      location: &amp;apos;physicsjs-current&amp;apos;,\n      main: &amp;apos;physicsjs-full.min&amp;apos;\n    }\n  ]\n});\n\nvar colors = [\n  [&amp;apos;0x268bd2&amp;apos;, &amp;apos;0x0d394f&amp;apos;]\n  ,[&amp;apos;0xc93b3b&amp;apos;, &amp;apos;0x561414&amp;apos;]\n  ,[&amp;apos;0xe25e36&amp;apos;, &amp;apos;0x79231b&amp;apos;]\n  ,[&amp;apos;0x6c71c4&amp;apos;, &amp;apos;0x393f6a&amp;apos;]\n  ,[&amp;apos;0x58c73c&amp;apos;, &amp;apos;0x30641c&amp;apos;]\n  ,[&amp;apos;0xcac34c&amp;apos;, &amp;apos;0x736a2c&amp;apos;]\n];\n\nfunction initWorld(world, Physics) {\n\n  // bounds of the window\n  var viewWidth = window.innerWidth\n    ,viewHeight = window.innerHeight\n    ,viewportBounds = Physics.aabb(0, 0, window.innerWidth, window.innerHeight)\n    ,edgeBounce\n    ,renderer\n    ,styles = {\n      &amp;apos;circle&amp;apos;: {\n        fillStyle: colors[0][0],\n        lineWidth: 1,\n        strokeStyle: colors[0][1],\n        angleIndicator: colors[0][1]\n      }\n      ,&amp;apos;rectangle&amp;apos;: {\n        fillStyle: colors[1][0],\n        lineWidth: 1,\n        strokeStyle: colors[1][1],\n        angleIndicator: colors[1][1]\n      }\n      ,&amp;apos;convex-polygon&amp;apos;: {\n        fillStyle: colors[2][0],\n        lineWidth: 1,\n        strokeStyle: colors[2][1],\n        angleIndicator: colors[2][1]\n      }\n    }\n    ;\n\n  // create a renderer\n  renderer = Physics.renderer(&amp;apos;pixi&amp;apos;, { el: &amp;apos;viewport&amp;apos;, styles: styles });\n  // add the renderer\n  world.add(renderer);\n  // render on each step\n  world.on(&amp;apos;step&amp;apos;, function () {\n    world.render();\n  });\n  \n  // constrain objects to these bounds\n  edgeBounce = Physics.behavior(&amp;apos;edge-collision-detection&amp;apos;, {\n    aabb: viewportBounds\n    ,restitution: 0.2\n    ,cof: 0.8\n  });\n\n  // resize events\n  window.addEventListener(&amp;apos;resize&amp;apos;, function () {\n\n    // as of 0.7.0 the renderer will auto resize... so we just take the values from the renderer\n    viewportBounds = Physics.aabb(0, 0, renderer.width, renderer.height);\n    // update the boundaries\n    edgeBounce.setAABB(viewportBounds);\n\n  }, true);\n\n  // add behaviors to the world\n  world.add([\n    Physics.behavior(&amp;apos;constant-acceleration&amp;apos;)\n    ,Physics.behavior(&amp;apos;body-impulse-response&amp;apos;)\n    ,Physics.behavior(&amp;apos;body-collision-detection&amp;apos;)\n    ,Physics.behavior(&amp;apos;sweep-prune&amp;apos;)\n    ,edgeBounce\n  ]);  \n}\n\nfunction startWorld( world, Physics ){\n  // subscribe to ticker to advance the simulation\n  Physics.util.ticker.on(function( time ) {\n    world.step( time );\n  });\n}\n\n//\n// Add some interaction\n//\nfunction addInteraction( world, Physics ){\n  // add the mouse interaction\n  world.add(Physics.behavior(&amp;apos;interactive&amp;apos;, { el: world.renderer().container }));\n  // add some fun extra interaction\n  var attractor = Physics.behavior(&amp;apos;attractor&amp;apos;, {\n    order: 0,\n    strength: 0.002\n  });\n  \n  world.on({\n    &amp;apos;interact:poke&amp;apos;: function( pos ){\n      world.wakeUpAll();\n      attractor.position( pos );\n      world.add( attractor );\n    }\n    ,&amp;apos;interact:move&amp;apos;: function( pos ){\n      attractor.position( pos );\n    }\n    ,&amp;apos;interact:release&amp;apos;: function(){\n      world.wakeUpAll();\n      world.remove( attractor );\n    }\n  });\n}\n\n// helper function (bind \&amp;quot;this\&amp;quot; to Physics)\nfunction makeBody( obj ){ \n  return this.body( obj.name, obj );\n}\n\n//\n// Add bodies to the world\n//\nfunction addBodies( world, Physics ){\n  var v = Physics.geometry.regularPolygonVertices;\n  var bodies = [\n    { name: &amp;apos;circle&amp;apos;, x: 100, y: 100, vx: 0.1, radius: 60 }\n    ,{ name: &amp;apos;rectangle&amp;apos;, x: 400, y: 100, vx: -0.1, width: 130, height: 130 }\n    ,{ name: &amp;apos;convex-polygon&amp;apos;, x: 150, y: 300, vertices: v( 5, 90 ) }\n  ];\n  \n  // functional programming FTW\n  world.add( bodies.map(makeBody.bind(Physics)) );\n}\n\n//\n// Load the libraries with requirejs and create the simulation\n//\nrequire([\n  &amp;apos;physicsjs&amp;apos;,\n  &amp;apos;pixi&amp;apos;\n], function( Physics, PIXI ){\n  window.PIXI = PIXI;\n  \n  var worldConfig = {\n    // timestep\n    timestep: 6,\n    // maximum number of iterations per step\n    maxIPF: 4,\n    // default integrator\n    integrator: &amp;apos;verlet&amp;apos;,\n    // is sleeping disabled?\n    sleepDisabled: false,\n    // speed at which bodies wake up\n    sleepSpeedLimit: 0.1,\n    // variance in position below which bodies fall asleep\n    sleepVarianceLimit: 2,\n    // time (ms) before sleepy bodies fall asleep\n    sleepTimeLimit: 500\n  };\n  \n  Physics( worldConfig, [\n    initWorld,\n    addInteraction,\n    addBodies,\n    startWorld\n  ]);\n  \n});\n&amp;quot;,&amp;quot;html_pre_processor&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;css_pre_processor&amp;quot;:&amp;quot;scss&amp;quot;,&amp;quot;js_library&amp;quot;:&amp;quot;&amp;quot;}"> 
        <button type="submit" class="btn-codepen-sandbox">Codepen Sandbox!</button> 
       </form> </li> 
      <li class="button"><a class="button github" href="https://github.com/wellcaffeinated/PhysicsJS">GitHub</a></li> 
      <li>MIT License</li> 
     </ul> 
    </header> 
    <footer> 
     <p><small>a <a href="http://wellcaffeinated.net" target="_blank" class="author">Well Caffeinated</a> project</small></p> 
     <script data-gittip-username="wellcaffeinated" src="//gttp.co/v1.js"></script> 
    </footer> 
   </section> 
   <section id="content"> 
    <div id="demo-area"> 
     <textarea class="demo" data-fold="6,0">
//
// PhysicsJS
// A modular, extendable, and easy-to-use physics engine for javascript
//
// Use the select box in the top right to see more examples!
//
Physics(function (world) {

    // bounds of the window
    var viewportBounds = Physics.aabb(0, 0, window.innerWidth, window.innerHeight)
    ,width = window.innerWidth
    ,height = window.innerHeight
    ,renderer
    ;

    // let's use the pixi renderer
    require(['vendor/pixi'], function( PIXI ){
        window.PIXI = PIXI;
        // create a renderer
        renderer = Physics.renderer('pixi', {
            el: 'viewport'
        });

        // add the renderer
        world.add(renderer);
        // render on each step
        world.on('step', function () {
            world.render();
        });
        // add the interaction
        world.add(Physics.behavior('interactive', { el: renderer.container }));
    });

    // some fun colors
    var colors = {
        blue: '0x1d6b98',
        blueDark: '0x14546f',
        red: '0xdc322f',
        darkRed: '0xa42222'
    };

    // scale relative to window width
    function S( n ){
        return n * window.innerWidth / 600;
    }

    // create the zero
    var zero = Physics.body('compound', {
        x: width/2 - S(80)
        ,y: height/2
        ,treatment: 'static'
        ,styles: {
            fillStyle: colors.red
            ,lineWidth: 1
            ,strokeStyle: colors.darkRed
            ,alpha: 0.0001 //pixi bug
        }
        ,children: [
        // coords of children are relative to the compound center of mass
        Physics.body('rectangle', {
            x: S(-50)
            ,y: 0
            ,width: S(20)
            ,height: S(97)
            ,mass: 20
        })
        ,Physics.body('rectangle', {
            x: S(50)
            ,y: 0
            ,width: S(20)
            ,height: S(97)
            ,mass: 20
        })
        ,Physics.body('rectangle', {
            x: 0
            ,y: S(75)
            ,width: S(48)
            ,height: S(20)
            ,mass: 20
        })
        ,Physics.body('rectangle', {
            x: -S(35)
            ,y: S(60)
            ,angle: Math.PI / 4
            ,width: S(50)
            ,height: S(20)
            ,mass: 20
        })
        ,Physics.body('rectangle', {
            x: S(35)
            ,y: S(60)
            ,angle: -Math.PI / 4
            ,width: S(50)
            ,height: S(20)
            ,mass: 20
        })
        ,Physics.body('rectangle', {
            x: 0
            ,y: S(-75)
            ,width: S(48)
            ,height: S(20)
            ,mass: 20
        })
        ,Physics.body('rectangle', {
            x: -S(35)
            ,y: -S(60)
            ,angle: -Math.PI / 4
            ,width: S(50)
            ,height: S(20)
            ,mass: 20
        })
        ,Physics.body('rectangle', {
            x: S(35)
            ,y: -S(60)
            ,angle: Math.PI / 4
            ,width: S(50)
            ,height: S(20)
            ,mass: 20
        })
        ]
    });

    // the point...
    var point = Physics.body('circle', {
        x: width/2 + S(6)
        ,y: height/2 + S(76)
        ,radius: S(13)
        ,treatment: 'static'
        ,styles: {
            fillStyle: colors.red
            ,lineWidth: 1
            ,strokeStyle: colors.darkRed
            ,alpha: 0.0001 //pixi bug
            ,mass: 80
        }
    });

    // the seven...
    var seven = Physics.body('compound', {
        x: width/2 + S(86)
        ,y: height/2 - S(34)
        ,treatment: 'static'
        ,styles: {
            fillStyle: colors.red
            ,lineWidth: 1
            ,strokeStyle: colors.darkRed
            ,alpha: 0.0001 //pixi bug
        }
        ,children: [
        Physics.body('rectangle', {
            x: S(35)
            ,y: -S(80)
            ,width: S(114)
            ,height: S(24)
            ,mass: 40
        })
        ,Physics.body('rectangle', {
            x: S(51.5)
            ,y: S(2.5)
            ,angle: -70 * Math.PI/180
            ,width: S(160)
            ,height: S(28)
            ,mass: 40
        })
        ]
    });

    // create 200 circles placed randomly
    var l = 100;
    var circles = [];
    while( l-- ){
        circles.push(Physics.body('circle', {
            x: Math.random() * width
            ,y: Math.random() * height
            ,radius: S(10)
            ,mass: 1
            ,restitution: 0.5
            ,styles: {
                strokeStyle: colors.darkBlue
                ,fillStyle: colors.blue
                ,lineWidth: 1
            }
        }));
    }

    world.add(circles);

    // add things to the world
    world.add([
    zero
    ,point
    ,seven
    ]);

    // when circles fall past the bottom. reset them
    function wrapY(){
        var b
        ,i
        ,l
        ,h = height + 100
        ,w =  width /2
        ,x = w
        ;

        for( i = 0, l = circles.length; i &lt; l; i++){
            b = circles[i];
            if ( b.state.pos.y &gt; height ){
                b.state.pos.y -= h;
                b.state.pos.x = x + w * (2 * Math.random() - 1);
                b.state.vel.zero();
            }
        }
    }

    world.on('step', wrapY);

    // slowly fade in the numbers
    function fadeIn(){
        zero.view.alpha = 0;
        seven.view.alpha = 0;

        new TWEEN.Tween( { alpha: 0 } )
        .to( { alpha: 1 }, 1000 )
        .onUpdate( function () {
            zero.view.alpha = this.alpha;
            point.view.alpha = this.alpha;
            seven.view.alpha = this.alpha;
        } )
        .start()
        ;
    }

    world.one('render', function(){
        // set the alpha on children to 1
        function setAlpha(c){
            c.alpha = 1;
        }
        zero.view.children.forEach(setAlpha);
        seven.view.children.forEach(setAlpha);
        zero.view.alpha = 0;
        seven.view.alpha = 0;

        // fade in after 2 seconds
        setTimeout(fadeIn, 3000);
    });

    // after 10 seconds to some more fun
    setTimeout(function(){
        // constrain objects to these bounds
        var edgeBounce = Physics.behavior('edge-collision-detection', {
            aabb: viewportBounds
            ,restitution: 0
            ,cof: 0.8
        });

        world.add( edgeBounce );

        // "detach" the 0.7
        zero.treatment = point.treatment = seven.treatment = 'dynamic';
        // wake up sleeping bodies
        world.wakeUpAll();
        world.off('step', wrapY);
    }, 10000)

    // add behaviors
    world.add([
    Physics.behavior('constant-acceleration')
    ,Physics.behavior('body-impulse-response')
    ,Physics.behavior('body-collision-detection')
    ,Physics.behavior('sweep-prune')
    ]);

    // For this example, we'll use a tweening engine
    // to transition the alpha
    require(['assets/scripts/vendor/tween.js'], function(){
        // only start the sim when tweening engine is ready

        // subscribe to ticker to advance the simulation
        Physics.util.ticker.on(function( time ) {
            TWEEN.update();
            world.step( time );
        });
    });
});

// go ahead... expand the code and play around...
</textarea> 
    </div> 
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script> 
    <script src="assets/scripts/vendor/jquery.selectric.min.js"></script> 
    <script>
jQuery(function( $ ){
    var editor = window.CodeEditors[0];
    var $changer = $('<select>');
    var idx;
    var demos = {
        'Simple': './demos/simple.js'
        ,'Newtonian Orbit': './demos/newtonian.js'
        ,'Newton\'s Revenge': './demos/newton-gravity.js'
        ,'Supermarket Catastrophy': './demos/supermarket-catastrophy.js'
        ,'Mixed Shapes': './demos/mixed-shapes.js'
        ,'Basket of Verlet Constraints': './demos/basket.js'
        ,'Tearable Cloth': './demos/cloth.js'
        ,'Fruitcake on Wheels': './demos/fruitcake.js'
        ,'Autumn Leaves': './demos/autumn-leaves.js'
        ,'Bullet Time': './demos/bullet-time.js'
        ,'Intro': 'intro'
    };
    $.each(demos, function( key, src ){
        $changer.append('<option value="'+src+'">'+key+'</option>');
    });
    $changer.val('intro');
    $('#demo-area .controls').append( $changer );
    $changer.selectric({
        maxHeight: 600
    });

    var introText = editor.getValue();

    function update( content ){
        var ed = editor.getWrapperElement();
        var d = ed.style.display;
        ed.style.display = '';
        editor.setValue( content );
        ed.style.display = d;
        $('#demo-area .ctrl-run').trigger('click');
    }

    $changer.on('change', function(){
        var $this = $(this);
        var src = $this.val();
        var idx = $.inArray( $this.children('[value="'+src+'"]')[0], $this.children() );
        window.location.hash = '#demo-'+idx;

        if ( src !== 'intro' ){
            $.get(src, function( content ){
                update( content );
            }, 'text');
        } else {
            update( introText );
        }
    });

    idx = window.location.hash.replace('#demo-', '')|0;
    if ( idx ){
        $changer.prop('selectedIndex', idx).selectric('refresh').trigger('change');
    }
});
</script> 
   </section> 
  </div> 
  <script src="assets/scripts/vendor/codemirror.js"></script> 
  <script src="assets/scripts/demo-editor.js"></script> 
  <!--[if !IE]><script>fixScale(document);</script><![endif]--> 
  <script type="text/javascript">
    var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
    document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
  </script> 
  <script type="text/javascript">
    try {
      var pageTracker = _gat._getTracker("UA-28341644-3");
      pageTracker._trackPageview();
    } catch(err) {}
  </script>   
 </body>
</html>