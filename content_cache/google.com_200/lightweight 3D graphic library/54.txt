<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"> 
  <!-- Title --> 
  <title>ArcGIS for Developers</title> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <!-- Search Metadata --> 
  <meta name="content-language" content="en"> 
  <meta name="last-modified" content="2017/06/16"> 
  <!-- PingBack / Favicon --> 
  <link rel="pingback" href="http://pingback.me/esri/xmlrpc"> 
  <link rel="shortcut icon" href="/favicon.ico"> 
  <!-- CSS  --> 
  <link rel="stylesheet" href="/assets/css/screen.css"> 
  <!-- Adobe Analytics --> 
  <script src="https://assets.adobedtm.com/2e9cd01e19dc5ac4867e752f17a2f1ea1923e5af/satelliteLib-0ed1001fd441a838aefe8e755be42aaafddcc46b.js"></script> 
  <!-- END: Adobe Analytics --> 
 </head> 
 <body class="claro logged-out"> 
  <!-- Google Tag Manager --> 
  <noscript>
   <iframe src="//www.googletagmanager.com/ns.html?id=GTM-NJGGV5" height="0" width="0" style="display:none;visibility:hidden"></iframe>
  </noscript> 
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-NJGGV5');</script> 
  <!-- Account Notifications --> 
  <developers-account-notifications></developers-account-notifications> 
  <!-- The wrapper exists for enabling certain animations
         as well as proper ARIA handling when the body
         document is occludded by a modal or drawer. --> 
  <div class="wrapper"> 
   <!-- Primary Navigation Begins --> 
   <developers-top-navigation> 
    <header class="top-nav"> 
     <!-- Constrain content to grid container --> 
     <div class="grid-container"> 
      <div class="column-24"> 
       <!-- Flex sizing is needed to perform tablet and mobile layout --> 
       <div class="top-nav-flex"> 
        <!-- This is Desktop exposed Navigation --> 
        <div class="tablet-hide"> 
         <!-- Skip to content jumps to body, avoiding navigation --> 
         <a class="skip-to-content" href="#skip-to-content">Skip To Content</a> 
         <!-- Site Title, always goes to root landing page. --> 
         <a href="/" class="top-nav-title font-size-1">ArcGIS for Developers</a> 
         <nav class="top-nav-list top-nav-animation" role="navigation" aria-labelledby="topnav"> 
          <span class="global-divider global-divider-right" aria-role="presentation"></span> 
          <!-- Logged In Specific Items --> 
          <a href="/dashboard/" class="icon-ui-dashboard top-nav-link hide-if-logged-out top-nav-margin-right">Dashboard</a> 
          <!-- Nav Dropdown --> 
          <div class="dropdown js-dropdown hide-if-logged-out hide-if-public-account"> 
           <a class="btn-transparent top-nav-link dropdown-btn dropdown-btn-filled js-dropdown-toggle text-no-wrap" tabindex="0" aria-haspopup="true" aria-expanded="false" role="button"> <span class="icon-ui-plus icon-ui-flush right"></span> </a> 
           <nav class="js-dropdown-menu dropdown-menu dropdown-left text-left"> 
            <a href="/applications/new/" class="icon-ui-applications dropdown-link">New Application</a> 
            <a href="/layers/new/" class="icon-ui-layers dropdown-link">New Layer</a> 
           </nav> 
          </div> 
          <span class="global-divider hide-if-logged-out" aria-role="presentation"></span> 
          <a href="/get-started/" class="top-nav-link">Get Started</a> 
          <a href="/documentation/" class="top-nav-link">Documentation</a> 
          <a href="/features/" class="top-nav-link hide-if-logged-in">Features</a> 
          <a href="/pricing/" class="top-nav-link">Pricing</a> 
          <a href="/support/" class="top-nav-link">Support</a> 
         </nav> 
        </div> 
        <!-- Collapse list of links to hamburger icon which activates above drawer --> 
        <nav class="tablet-show top-nav-flex-list" role="navigation" aria-labelledby="topnav"> 
         <!-- Icon and Word on Tablet --> 
         <a href="#" aria-label="Menu" class="top-nav-link js-drawer-toggle icon-ui-drag-horizontal" data-drawer="left">Menu</a> 
        </nav> 
        <!-- On Tablet, float Site Title to center --> 
        <header class="tablet-show top-nav-flex-title"> 
         <a href="/" class="top-nav-link">ArcGIS <span class="phone-hide">for Developers</span></a> 
        </header> 
        <!-- Web components handle Search and User experience --> 
        <nav class="top-nav-flex-list text-right top-nav-animation" role="navigation" aria-labelledby="usernav"> 
         <developers-user-navigation class="right"></developers-user-navigation> 
         <span class="global-divider global-divider-left global-divider-right right" aria-role="presentation"></span> 
         <developers-search class="flex-vertical-center right"></developers-search> 
        </nav> 
       </div> 
      </div> 
     </div> 
    </header> 
    <!-- End the Header --> 
   </developers-top-navigation> 
   <!-- Page Content --> 
   <div id="skip-to-content"> 
    <!-- Your Content Lives Here --> 
    <div class="sub-nav sub-nav-purple"> 
     <div class="grid-container"> 
      <div class="column-24"> 
       <nav class="breadcrumbs breadcrumbs-white leader-1 clearfix"> 
        <a href="/documentation/" class="crumb">Community Initiatives</a> 
        <span class="crumb is-active">Indexed 3D Scene Layers</span> 
       </nav> 
      </div> 
      <h1 class="column-24 sub-nav-title text-white">Indexed 3D Scene Layers</h1> 
     </div> 
    </div> 
    <div class="grid-container leader-2 trailer-1"> 
     <div class="column-20 gutter-left-2 gutter-right-2"> 
      <h1>Introduction</h1> 
      <p>With the release of the ArcGIS JavaScript 4.0 API and ArcGIS Runtime 100.0 SDKs developers now have first class APIs to work with 3D content and services. These APIs work with a new ArcGIS layer type called a Scene Layer. Many of you have asked how Scene Layers work, this article is designed to give you that information. If you would like more data structure and storage details the full i3S specification is available on GitHub <a href="https://github.com/Esri/i3s-spec">https://github.com/Esri/i3s-spec</a>.</p> 
      <p>I3S was released publicly in 2015 as an open specification for streaming large, heterogeneous geospatial data sets with 3D content including discrete 3D objects, large continuous meshes, 3D vector points, point clouds, and other content across enterprise systems that may consist of server components, cloud hosted components, and a variety of client software from desktop to web and mobile applications. I3S supports storage and transmission of very large data sets that may consist of millions of discrete 3D objects with attributes as well as integrated surface meshes that may cover many thousands of square kilometers of the Earth’s surface.</p> 
      <p><strong>Designed for 3D</strong></p> 
      <p>I3S is intrinsically designed to support 3D geospatial content and supports the requisite coordinate systems and height models in conjunction with a rich set of layer types.</p> 
      <h4 id="coordinate-systems">Coordinate Systems</h4> 
      <p>The specification supports both 3D Global Coordinate Systems as well as locally applicable 3D Map Coordinate systems that are based on well-known map projections for the x-y plane along with additional height information for the z axis.</p> 
      <h4 id="height-models">Height Models</h4> 
      <p>The specification accommodates declaration of a vertical coordinate system that may be ellipsoidal (elevation/ height defined with respect to a reference ellipsoid) or orthometric (elevation / height defined with respect to a reference geoid / gravity surface). This allows I3S to be applied across a diverse range of fields and applications where the particular definition of elevation/height is of importance.</p> 
      <p><strong>Designed for Web, Mobile and Cloud</strong></p> 
      <p>I3S is designed from the ground up to be cloud, web and mobile friendly. It is based on JSON, REST and modern web standards and is easy to handle, efficiently parse and render by Web and Mobile Clients. I3S is designed to stream large 3d datasets and is designed for performance and scalability.</p> 
      <p><strong>Open Specification</strong></p> 
      <p>I3S was introduced as an open specification for the purpose of encouraging community adoption, encouraging feedback, and for ensuring that adopting organizations would have flexibility in access to 3D data. The specification is licensed under the <em>Creative Commons Attribution-NoDerivs 3.0 Unported License</em>. Implementers can use the specification in services, clients or processing tools without restrictions.</p> 
      <p><strong>3D Layer Types</strong></p> 
      <p>A single I3S data set, referred to as a <em>Scene Layer</em> is a container for arbitrarily large amounts of heterogeneously distributed 3D geographic data. An I3S Layer is characterized by a combination of <em>layer type</em> and <em>profile</em> that fully describe the behavior of the layer and the manner in which it is realized within the specification.</p> 
      <p>The format is declarative and extendable and has been used to represent different types of 3D data.</p> 
      <p>The following layer types have been specified and the specifications validated via implementation and production deployments:</p> 
      <ul> 
       <li> <p><strong>3D Objects</strong></p> 
        <ul> 
         <li> <p>example : Building Exteriors</p> </li> 
         <li> <p>sources : Derived from GIS Data, as well as 3D models in various formats</p> </li> 
        </ul> </li> 
      </ul> 
      <figure> 
       <img src="/assets/img/3d/indexed-3d-scene-layers/image1.png" width="576" height="282"> 
       <figcaption>
        <b>Figure 1</b>: View of Manhattan textured buildings – exhibiting a wide range of distance and LODs…
       </figcaption> 
      </figure> 
      <ul> 
       <li> <p><strong>Integrated Meshes</strong></p> 
        <ul> 
         <li> <p>Example: Mesh surface representing the skin of the Earth, including vegetation, buildings and roads</p> </li> 
         <li> <p>Sources: Derived from satellite, aerial or drone imagery via dense matching photogrammetry, or calculated</p> </li> 
        </ul> </li> 
      </ul> 
      <figure> 
       <img src="/assets/img/3d/indexed-3d-scene-layers/image2.png" width="529" height="336"> 
       <figcaption>
        <b>Figure 2</b>: Integrated Mesh of Girona, Spain
       </figcaption> 
      </figure> 
      <ul> 
       <li> <p><strong>Points</strong></p> 
        <ul> 
         <li> <p>Examples: Hospitals, schools, trees, cars</p> </li> 
         <li> <p>Sources: feature locations combined with Instanced 3D models generated by hand</p> </li> 
        </ul> </li> 
      </ul> 
      <figure> 
       <img src="/assets/img/3d/indexed-3d-scene-layers/image3.png" width="550" height="335"> 
       <figcaption>
        <b>Figure 3</b>: Street furniture, vegetation, people, and vehicle represented as symbolized points
       </figcaption> 
      </figure> 
      <p>The following layer types are in development process with release of the specification in Q4 2016 and release of a production implementation in Q4 2016.</p> 
      <ul> 
       <li> <p><strong>Point Clouds</strong></p> 
        <ul> 
         <li> <p>Example: LiDAR data sets</p> </li> 
         <li> <p>Sources: Typically sensor-collected or Photogrammetrically derived</p> </li> 
        </ul> </li> 
      </ul> 
      <figure> 
       <img src="/assets/img/3d/indexed-3d-scene-layers/image4.png" width="576" height="420"> 
       <figcaption>
        <b>Figure 4</b>: LiDAR Point Cloud
       </figcaption> 
      </figure> 
      <p>The following layer types are planned for future inclusion:</p> 
      <ul> 
       <li> <p><strong>Lines</strong> (e.g. Roads and Pipes; from GIS Data)</p> </li> 
       <li> <p><strong>Polygons</strong> (e.g. Soil or Forest Cover; from GIS Data)</p> </li> 
      </ul> 
      <h4 id="data-access-and-visualization">Data Access and Visualization</h4> 
      <p>I3S Scene Layers are designed to provide clients access to data, regulated by visual extent and camera distance and type-dependent indexing. Clients have the ability to adjust or override visualization properties of layers independently according to their needs and according to the nature of the layer’s data. Data here refers to both the geometry and the attributes for 3D Object, Point, Line and Polygon Features as well as the vertex geometry and vertex attributes for vertices within layers that represent geographic fields, like with integrated meshes and point clouds.</p> 
      <p>The degree of separation between data and implied visualization varies depending on the type of layer – at one extreme an integrated mesh layer, representing [in effect] “3d imagery”, has a strong implication that clients will display the mesh geometry using the textures that are advertised by and available with the layer. At the other end layers representing 3D features/entities including space occupying 3D objects as well as Points carry a full representation of their attributes allowing clients to thematically map and visualize the data according to their needs. In both cases the I3S access API separates access to geometry from access to textures and attributes, giving clients needed flexibility. In many cases the GIS features’ data that is part of the I3S layer will itself be a cached, cooked or preprocessed version (the industry uses a variety of terms to denote the process of generating the 3D access optimized representation) of primary data that resides in a transactional system of record.</p> 
      <h4 id="level-of-detail">Level of Detail</h4> 
      <p>The concept of Level of Detail (LOD) is intrinsic to the specification. Scene Layers may include levels of detail that apply to the layer as whole and serve to generalize or summarize information for the layer, similar to image pyramids and also similar to raster and vector tiling schemes. A node in the I3S scene layer tree could be considered the analog of a tile in a raster or vector tiling scheme. Scene layers support levels of detail in a manner that preserves the identity and representation of the individual features that are retained within any level of detail.</p> 
      <h4 id="layer-types-and-profiles">Layer Types and Profiles</h4> 
      <p>Layers are described using two properties, type and profile. The type of a layer describes its semantic meaning to the consumer as described in the section above. The profile for a layer includes additional detail on the specific I3S implementation for the layer that is exposed to clients. In most cases the relationship between layer and profile is 1:1 but in certain cases multiple layers that represent semantically different types of information can make use of the same underlying profile. In other cases the same layer type can support multiple profiles optimized for different use cases. The following table shows the layer types and associated profiles, indicates which layers are used to represent features (entities) vs geographic fields, and also includes information on support for feature or vertex attributes for the layers.</p> 
      <table> 
       <thead> 
        <tr> 
         <th><strong>Layer Type&nbsp; <em>(example)</em></strong></th> 
         <th><strong>Profile</strong></th> 
         <th><strong>Features with Identity</strong></th> 
         <th><strong>Attributes</strong></th> 
        </tr> 
       </thead> 
       <tbody> 
        <tr> 
         <td>3D Object</td> 
         <td><em>mesh-pyramids</em></td> 
         <td>Yes</td> 
         <td>Yes</td> 
        </tr> 
        <tr> 
         <td>Integrated Mesh</td> 
         <td><em>mesh-pyramids</em></td> 
         <td>No</td> 
         <td><em>planned :</em> Triangle Attributes</td> 
        </tr> 
        <tr> 
         <td>Point</td> 
         <td><em>points</em></td> 
         <td>Yes</td> 
         <td>Yes</td> 
        </tr> 
        <tr> 
         <td>Pointcloud</td> 
         <td><em>pointclouds</em></td> 
         <td>No</td> 
         <td>Vertex Attributes</td> 
        </tr> 
        <tr> 
         <td><em>Line</em></td> 
         <td><em>lines</em></td> 
         <td>Yes</td> 
         <td>Yes</td> 
        </tr> 
        <tr> 
         <td><em>Polygon</em></td> 
         <td><em>polygons</em></td> 
         <td>Yes</td> 
         <td>Yes</td> 
        </tr> 
       </tbody> 
      </table> 
      <p><strong>Organization and structure</strong></p> 
      <p>I3S organizes information using a hierarchical, node-based spatial index structure in which each node’s payload may contain features with associated geometry, textures and attributes.</p> 
      <h4 id="indexing-model">Indexing Model</h4> 
      <p>I3S is agnostic with respect to the model used to index objects / features in 3D space. Both regular partitions of space (eg quadtrees and octtrees) as well as density dependent partitioning of space (e.g. R-Trees) are supported. The specific partitioning scheme is hidden from clients who navigate the nodes in the tree via REST API. The partitioning results in a hierarchical subdivision of 3D space into regions represented by nodes, organized in a bounding volume tree hierarchy (BVH). Each node has an address based on its tree-key.</p> 
      <figure> 
       <img src="/assets/img/3d/indexed-3d-scene-layers/image5.png" width="547" height="451"> 
       <figcaption>
        <b>Figure 5</b>: I3S node hierarchy
       </figcaption> 
      </figure> 
      <p>The information for a node is stored in multiple individually accessible resources. The node index document is a lightweight resource that captures the BVH tree topology for the node, in addition to the node’s bounding volume and meta-data used for LOD switching metrics. This resource allows for tree traversal without the need to access the more voluminous content associated with a node (geometry, texture data, attributes), where the decision to render the node is based on node’s bounding-volume visibility in the current 3D view and a visual quality determination made by the client using the information included in the node index document. The node’s quality is estimated as a function of current view parameters, the node’s bounding volume, and LOD Selection threshold value of the node.</p> 
      <p>The specification supports both bounding spheres (MBS) and oriented bounding boxes (OBB) as a node’s bounding volume.</p> 
      <p>Each interior node logically contains or covers the set of information covered by the nodes below it and participates in a path to the leaf nodes below it. Interior nodes may contain generalized or reduced detail versions of information contained in descendent nodes.</p> 
      <p>The physical organization of information within nodes is as follows:</p> 
      <ul> 
       <li> <p>The node index document is a lightweight resource that describes the topology of the node within the tree and includes references to other sub-resources.</p> </li> 
       <li> <p>The feature-data sub-resource for a node is a text resource that contains the identifiers for the set of features within a node. It stores the geometry and attributes for all of the features in the node by value or as references to sub-resources.</p> </li> 
       <li> <p>The geometry, attribute and texture sub-resources describe the geometry, attribute and texture for the node. Geometry and attribute sub-resources represent the geometries and attributes of all of the features within the node and include the identifiers of the owning features within the node as well as the mapping between individual feature identifiers and their geometry segments. Vertices within the geometry contain the appropriate texture coordinates.</p> </li> 
      </ul> 
      <p>An I3S profile can have either a single text-based feature-data sub-resource that contains all geometry and attribute information, or separate, binary and self-contained geometry and attribute sub-resources. Applications accessing the latter do not need to first fetch the feature-data resource in order to interpret them.</p> 
      <figure> 
       <img src="/assets/img/3d/indexed-3d-scene-layers/image6.png" width="585" height="291"> 
       <figcaption>
        <b>Figure 6</b>: Per-node I3S resources: Feature-Data, Geometry, Attributes, Textures, and Shared-Descriptors
       </figcaption> 
       <figure> 
        <figure> 
         <img src="/assets/img/3d/indexed-3d-scene-layers/image7.png" width="545" height="386"> 
         <figcaption>
          <b>Figure 6a</b>: I3S node content
         </figcaption> 
        </figure> 
        <p><em>Figure 7</em> below shows the node tree of an Indexed Scene Layer whose layer type is <em>3D Objects</em> and whose profile is <em>mesh-pyramid</em>. Nodes are in green, the numbers within the blue boxes represent the identifier or address for each node. The orange boxes indicate the features explicitly represented within the node, the numbers represent feature identifiers. Each node has associated geometry, texture and attribute resources that compactly store the geometries, attributes and textures of all of the features explicitly represented by the node, as typed arrays and texture atlases. The turquoise boxes show the geometry resource associated with each node, attribute and texture resources have been deliberately omitted. Each geometry resource is an array of geometries. The geometry resource also stores the mapping from each feature to the set of geometry elements within the larger geometry resource which is stored in a compact manner similar to run length encoding. A similar storage model is used for the attributes and textures associated with the features explicitly stored within a node.</p> 
        <p>Each node contains explicit references (the green lines) to the child nodes below it in the bounding volume hierarchy. Each node logically covers all of the features covered by the nodes in its sub-tree, though only some of them may be explicitly represented within the node. Applications make the decision on using the representation within the node vs descending to more detailed nodes. The specific example illustrated in <em>Figure 7</em> shows the situation within node “3” where “Feature 6” has been generalized away at this lower level of detail and is intentionally no longer explicitly represented within the payload of node 3.</p> 
        <figure> 
         <img src="/assets/img/3d/indexed-3d-scene-layers/image8.png" width="540" height="320"> 
         <figcaption>
          <b>Figure 7</b>: Example Nodes in a Mesh Pyramid. Orange boxes represent features stored explicitly within the node, the numbers represent feature identifiers. Turquoise boxes represent the geometry instances associated with each node – each geometry instance is an aggregate geometry (a geometry collection) that covers all the features in the node.
         </figcaption> 
        </figure> 
        <p>The node index document and associated metadata use JSON as the representation for storage, while more voluminous data, like Geometry or Feature Attributes, use binary representations in the form of <em>Array Buffers</em> and <em>Array Buffer Views</em> (following the Khronos Typed Array specification). These authoring decisions are captured as metadata for the layer as a whole.</p> 
        <h4 id="geometry-model-and-storage">Geometry Model and Storage</h4> 
        <p>All Scene Layer types make use of the same fundamental set of geometry types:</p> 
        <ul> 
         <li> <p>points</p> </li> 
         <li> <p>lines</p> </li> 
         <li> <p>triangles</p> </li> 
        </ul> 
        <p>Geometries use binary storage and consumption representation, controlled by <em>Array Buffer View</em> geometry property declarations. I3s provides full control over those properties, such as per-vertex layout of components (e.g. position, normal and texture coordinates), in order to ensure the same pattern for face and vertex elements across the Scene Layer.</p> 
        <p>I3S supports storage of triangle meshes via the <em>triangles</em> geometry type.</p> 
        <p>Both <em>3D Objects</em> and <em>Integrated Mesh</em> layer types model geometries as triangle meshes using the <em>mesh-pyramids</em> profile. The mesh-pyramids profile uses the <em>triangles</em> geometry type to store triangle meshes with reduced level of detail representations of the mesh, segmented by features, available in the interior nodes as described above.</p> 
        <p>In the future, polygons would be another layer type that would use triangle meshes and the <em>triangles</em> geometry type. Polygonal feature geometries would be tessellated and stored as triangle meshes within I3S, retaining the feature to geometry mapping so that clients could render features and reconstitute polygonal geometries as needed.</p> 
        <h4 id="textures">Textures</h4> 
        <p>Textures are stored as a binary resource associated with a node. The texture resource for a node contains the images that are used as textures for the features stored in the node. The <em>mesh-pyramids</em> profile supports either a single texture or a texture atlas per node.</p> 
        <h6 id="image-formats">Image Formats</h6> 
        <p>The following default texture formats are recommended by the I3S specification: JPEG for RGB and PNG for RGBA. These defaults were chosen because of low bandwidth consumption and widespread adoption in all steps of the tool chain, such as supporting alpha transparency rendering in WebGL.</p> 
        <p>I3S allows authoring applications to provide additional texture formats via ‘<em>textureEncoding</em>’ declarations that use MIME types. For example, most existing I3S services provide “image/vnd-ms.dds” (with S3TC inside) in addition to the default “image/jpeg” encoding.</p> 
        <h6 id="texture-atlas-usage-and-regions">Texture Atlas usage and Regions</h6> 
        <p>Individual textures, when aggregated into texture atlases, become sub-textures described by sub-image ‘<em>Regions</em>’.</p> 
        <p>The pixels belonging to a sub-texture are identified by the <em>subimageRegion</em>: [umin, vmin, umax, vmax] vertex attribute. Region information is meant to be passed on to the shader using a separate vertex attribute so that every vertex UV coordinate becomes an UVR coordinate, with the R encoding the [umin, vmin, umax, vmax] of the region.</p> 
        <h6 id="texture-coordinates">Texture coordinates</h6> 
        <p>Texture coordinates do not take atlas regions into account directly. They always range from 0...1 in U and V, except when using the "repeat" wrapping mode, where they may range from 0...n (n being the number of repeats). The client is expected to use the <em>subimageRegion</em> values and the texture coordinates to best handle repeating textures in atlases. This approach has been selected since client capabilities in dealing with more complex UV cases vary greatly.</p> 
        <h4 id="attribute-model-and-storage">Attribute Model and Storage</h4> 
        <p>I3S supports the following two patterns of accessing the attribute data:</p> 
        <ol> 
         <li> <p>From optional paired services that expose query-able and updatable RESTful endpoints that enable direct access to dynamic source data, including attributes. The query in this case uses the <em>unique feature-ID</em> key – which is always maintained within each node and is also available as part of the descriptor for any segmented geometry.</p> </li> 
         <li> <p>From fully cached attribute information, in binary or textual form, as part of the i3S layer.</p> </li> 
        </ol> 
        <p>I3S clients can still choose to access attributes through either of these modes even if the attributes are fully cached within the I3S store.</p> 
        <figure> 
         <img src="/assets/img/3d/indexed-3d-scene-layers/image9.png" width="576" height="331"> 
         <figcaption>
          <b>Figure 8</b>: Mesh Pyramid Attributes used in a pop-up
         </figcaption> 
        </figure> 
        <p>Cached attributes use a binary storage representation based on <em>Array Buffers</em> which provide significant performance benefits relative to paired services. The attribute values are stored as a geometry aligned, per field (column), key-value pair arrays.</p> 
        <h4 id="level-of-detail-lod-models-selection-metrics">Level of Detail – LOD Models, Selection Metrics</h4> 
        <p>The concept of Level of Detail (LOD) is intrinsic to the specification. I3S promotes the concept of discrete levels of details with multiple discrete representations of features <em>and</em> nodes, where a more detailed representation of a node and its features fully replaces a coarser representation of the node and the replacement applies across all features or elements covered by the nodes.</p> 
        <h6 id="discrete-lods">Discrete LODs</h6> 
        <p>Scene Layers may include discrete levels of detail that apply to the layer as whole and that generalize or summarize information for the features within a node using a generalization or summarization criterion that is based on the level of detail which corresponds to the depth of the node in the tree. The number of discrete levels of detail for the layer corresponds to the number of levels in the index tree for the scene layer. The I3S level of detail concept is analogous to the level of detail concepts for image pyramids as well as for standard raster and vector tiling schemes.</p> 
        <p>During navigation and traversal of the I3S tree, clients must decide to either</p> 
        <ol> 
         <li> <p>discontinue traversal to node’s descendants if the node is not visible in the current 3D view; or</p> </li> 
         <li> <p>to use/render the data within a node if its quality is appropriate for the current 3D view and discontinue traversal to node’s descendants; or</p> </li> 
         <li> <p>to continue traversal until descendant nodes with better quality are found.</p> </li> 
        </ol> 
        <p>These decisions are made using the advertised values for <em>lod selection metrics</em> that are part of the information payload of the node. The I3S specification supports multiple LOD selection models and metrics. An example lod selection metric is <em>the maximum screen size</em> that the node may occupy before it must be replaced with data from more detailed nodes. This model of discrete LOD rendering is referred to in I3S as <em>node switching</em>.</p> 
        <p>In addition to capturing the LOD model implied by the declared Profile for a layer, the I3S specification also explicitly captures the LOD Switching Model for a layer as described above. I3S Scene Layers also include additional optional metadata on the LOD generation process (e.g. <em>thinning, clustering, generalization</em>) as non-actionable (to clients) information that is of interest to some service consumers.</p> 
        <h6 id="generation-of-discrete-levels-of-detail-for-3d-objects-a-specific-example">Generation of Discrete Levels of Detail for 3D Objects – A specific Example</h6> 
        <p>This section outlines Esri’s implementation of automatic level of detail generation for a Scene Layer representing a collection of 3D GIS features from input data at some chosen resolution or explicitly defined level of detail. The first step is to build the I3S bounding volume tree based on the spatial distribution of the 3D GIS features. Once this has been completed, the generation of the information payloads for interior nodes can proceed:</p> 
        <ol> 
         <li> <p><em>Leaf-node</em> payloads capture the original information from 3D GIS features</p> </li> 
         <li> <p>The generation of information in <em>interior</em> nodes is based on a bottom up generalization of the feature information in its child nodes similar to the process of building an image-pyramid while factoring in the need of the process to work with both explicit geometry and associated textural representations.</p> </li> 
        </ol> 
        <h4 id="delivery-via-rest-or-as-locally-consumable-scene-layer-packages">Delivery via REST or as locally consumable Scene Layer Packages</h4> 
        <p>I3S scene layers can be delivered to web, mobile and desktop clients using a number of different patterns.</p> 
        <p>Most users will interact with scene layers using applications that access cloud or server based information using RESTful interfaces/services. In these cases the scene layer cache, including the i3S nodes and their payloads, resides on the server and is returned to clients via a RESTful interface that exposes the scene layer, its nodes and their associated resources (geometries, attributes, textures) as web addressable resources. The I3S specification contains a complete description of the web addressable resources and their url scheme.</p> 
        <p>Some users will also interact with a scene layer delivered to them as a single large Scene Layer Package – this is a single file that packages the complete node tree and its resources into an archive that supports direct access to the individual nodes and resources within it. Scene Layer Packages are part of the current I3S implementation with multiple generators and the ability by clients to consume packages containing hundreds of GB of content.</p> 
        <figure> 
         <img src="/assets/img/3d/indexed-3d-scene-layers/image10.png" width="544" height="296"> 
         <figcaption>
          <b>Figure 9</b>: An example of a Scene Layer Package with its structure.
         </figcaption> 
        </figure> 
        <p>An SLPK is an archive with, typically, a STORE compression schema applied to it. Note also that all SLPK content files, either text (.json), or binary (.bin), are individually compressed with GZIP compression (.gz). Though the SLPK in <em>Figure 9</em> contains many nodes (as indicated by “/nodes/…..”), it shows only node “1-4-2-0” as an example.</p> 
        <figure> 
         <img src="/assets/img/3d/indexed-3d-scene-layers/image11.png" width="576" height="324"> 
         <figcaption>
          <b>Figure 10</b>: Vricon integrated mesh Scene Layer Package shown in ArcGIS Earth.
         </figcaption> 
        </figure> 
        <h4 id="i3s-flexibility">I3S Flexibility</h4> 
        <p>I3S is flexible and allows for different implementation choices for different types of 3D data or even for the same type of 3D data. The profile for a layer indicates the set of choices made. Choices supported by I3D and made use of by different profiles are described below. In each case the profile listed is the canonical profile for the corresponding layer-type.</p> 
        <ol> 
         <li>The Minimum Bounding Volume (MBV) property can be represented as:</li> 
        </ol> 
        <!-- --> 
        <ol> 
         <li> <p>Minimum Bounding Sphere (MBS)</p> </li> 
         <li> <p>Oriented Bounding Box (OBB)</p> </li> 
        </ol> 
        <!-- --> 
        <ol> 
         <li> <p>The node structure may be</p> 
          <ol> 
           <li> <p>‘expanded’ – in support of clients that want to gain more complete meta-information about node’s position within BVH topology and its immediate neighborhood</p> 
            <ul> 
             <li> <p>Each index node provides pointers to its parent, all its children, and sibling neighbors (including their MBVs)</p> </li> 
             <li> <p>Used by: the <strong><em>mesh-pyramids</em></strong> and <strong><em>points</em></strong> profiles.</p> </li> 
            </ul> </li> 
           <li> <p>‘fixed-size’ – in support of ‘<em>paged</em>’ access pattern</p> 
            <ul> 
             <li> <p>A minimal structure – just the essentials: bounding volume; first-child reference; child-count; LOD selection data; etc.</p> </li> 
             <li> <p>Used by: the <strong><em>pointclouds</em></strong> profile.</p> </li> 
            </ul> </li> 
          </ol> </li> 
         <li> <p>Nodes may have “embedded” vs “binary” geometry content format</p> </li> 
        </ol> 
        <!-- --> 
        <ol> 
         <li> <p>Embedded geometry: as text (JSON) inlined with other metadata within <em>featureData</em> resource –&nbsp;to support profiles where run-length encoding of feature-IDs along the vertex data is suboptimal – used by: the canonical <strong><em>points</em></strong> profile.</p> </li> 
         <li> <p>Binary format: for voluminous, ready to render/use geometries and cached attributes. Both typed array buffer views as well as fixed format binary buffers are supported.</p> 
          <ul> 
           <li> <p>The <strong><em>mesh-pyramids</em></strong> profile uses ‘array buffer views’ (ArrayBufferView follows the Khronos Typed Array specification)</p> </li> 
           <li> <p>The <strong><em>pointclouds</em></strong> profile uses little-endian binary buffers in order to support a domain-specific data compression</p> </li> 
          </ul> </li> 
        </ol> 
        <!-- --> 
        <ol> 
         <li> <p>LOD Selection based on different metricTypes:</p> 
          <ol> 
           <li> <p><em>maxScreenThreshold</em> – LOD switching based on screen ‘size’ of the node’s MBV – used by: <strong><em>mesh-pyramids</em></strong> profile</p> </li> 
           <li> <p><em>screenSpaceRelative</em> – LOD switching based on screen ‘scale’ of the node’s MBV – used by: <strong><em>points</em></strong> profile</p> </li> 
           <li> <p><em>distancRangeFromDefaultCamera</em> – LOD switching based on normalized distance of the node’s MBV from the camera – used by: <strong><em>points</em></strong> profile</p> </li> 
           <li> <p><em>effectiveDensity</em> – estimation of the point density covered by the node – used by: <strong><em>pointclouds</em></strong> profile</p> </li> 
          </ol> </li> 
        </ol> 
        <h4 id="history">History</h4> 
        <p><strong><em>Open Specification</em></strong></p> 
        <p>I3S was released on Github as an open specification on April 30, 2015 [1].</p> 
        <p>The initial public specification included a general description of i3S along with a description of the profile for storing and streaming 3D Object scene layers, which may be any kind of monolithic or discrete 3D model that may have a consistent set of attribute information across the entire data set.</p> 
        <p>Additional profiles for 3D vector-based points and integrated meshes were introduced in software implementation in multiple releases leading up to June 2016 and were updated in the open specification September 12, 2016.</p> 
        <p>Future spec releases are planned to incorporate feedback from implementers as well as validation tools to streamline the implementation workflow.</p> 
        <p>The Integrated Mesh, 3D Object, and 3D Point layer types are in production use as part of deployed ArcGIS systems, including browser, mobile and desktop clients working against on-premises and cloud deployed servers.</p> 
        <p>The Point Cloud layer type has been developed and is currently undergoing beta testing. It is planned for incremental release across the range of supported clients starting in Dec 2016.</p> 
        <p><strong><em>Esri offerings</em></strong></p> 
        <p>Esri started demonstrating I3S capability in 2013. On July 16, 2015, ArcGIS Pro 1.1 was released which could publish 3D Object scene layers to ArcGIS for Server 10.3. Users could also follow a packaging and upload workflow to transfer scene layers from ArcGIS for Server to ArcGIS Online.</p> 
        <figure> 
         <img src="/assets/img/3d/indexed-3d-scene-layers/image12.png" width="472" height="312"> 
         <figcaption>
          <b>Figure 11</b>: Demonstration scene layers shown on stage at the 2013 Esri International User Conference
         </figcaption> 
        </figure> 
        <p>With ArcGIS for Server 10.4 and ArcGIS Pro 1.2 in February and March 2016, users could also share 3D Point scene layers directly from ArcGIS Pro to ArcGIS for Server. The ArcGIS Online JavaScript-based web scene viewer was able to demonstrate the capability to display demonstration scene layers shared by Esri starting in December 2014.</p> 
        <figure> 
         <img src="/assets/img/3d/indexed-3d-scene-layers/image13.png" width="496" height="262"> 
         <figcaption>
          <b>Figure 12</b>: I3S content shown in the officially supported 3D scene viewer served by ArcGIS Online shown from early 2015
         </figcaption> 
        </figure> 
        <p>With the release of ArcGIS Earth 1.0 in January 2016, non-GIS users could easily access 3D object scene layers shared through ArcGIS Online or ArcGIS for Server. Esri’s JavaScript API supported custom web interfaces that could access scene layers in beta in July 2015 and in production in May 2016. Web AppBuilder 2.0 entered beta with the ability to consume and display scene layers in configured web apps in April 2016 and entered production in July 2016.</p> 
        <figure> 
         <img src="/assets/img/3d/indexed-3d-scene-layers/image14.jpg" width="490" height="286"> 
         <figcaption>
          <b>Figure 13</b>: Scene layers used in a Web AppBuilder project from May 2016
         </figcaption> 
        </figure> 
        <p>In early 2016, data providers began engaging with Esri to start providing production-quality content in I3S format. Most notably Vricon and Bentley Systems.</p> 
        <p><strong><em>Vricon</em></strong></p> 
        <p>In May 2016, Vricon was able to successfully begin creating and testing I3S integrated mesh scene layer content. Vricon scene layers are typically created as multi-LOD scene layer packages covering approximately 10,000 km in area and typically ranging from 40 up to 120 GB in size when packaged on disk.</p> 
        <p><strong><em>Bentley Systems, Incorporated</em></strong></p> 
        <p>Also in May 2016, Bentley Systems demonstrated the ability to create integrated mesh scene layers from ContextCapture and uploaded demonstration services to ArcGIS Online.</p> 
        <figure> 
         <img src="/assets/img/3d/indexed-3d-scene-layers/image15.png" width="545" height="306"> 
         <figcaption>
          <b>Figure 14</b>: Integrated mesh scene layer from Bentley Systems' ContextCapture showing in a web scene
         </figcaption> 
        </figure> 
        <p>[1] <a href="https://github.com/esri/i3s-spec">https://github.com/esri/i3s-spec</a></p> 
        <p>[2] <a href="https://s3.amazonaws.com/webapps.esri.com/esri-proceedings/devsummit14/papers/dev-013.pdf">https://s3.amazonaws.com/webapps.esri.com/esri-proceedings/devsummit14/papers/dev-013.pdf</a></p> 
        <p><a href="http://proceedings.esri.com/library/userconf/devsummit15/papers/dev_int_189.pdf">http://proceedings.esri.com/library/userconf/devsummit15/papers/dev_int_189.pdf</a></p> 
        <p>[3] <a href="http://proceedings.esri.com/library/userconf/devsummit16/papers/dev_int_01.pdf">http://proceedings.esri.com/library/userconf/devsummit16/papers/dev_int_01.pdf</a></p> 
        <p>[4] SIGGRAPH 2016 Cartography Birds Of a Feather</p> 
        <p>[5] <a href="https://www.linkedin.com/pulse/bentleys-contextcapture-now-supporting-esri-i3s-3d-scene-john-taylor">https://www.linkedin.com/pulse/bentleys-contextcapture-now-supporting-esri-i3s-3d-scene-john-taylor</a></p> 
        <a class="icon-ui-contact right leader-1 trailer-1" href="/feedback">Feedback on this topic?</a> 
       </figure>
      </figure>
     </div> 
    </div> 
   </div> 
  </div> 
  <!-- Continue to footer below. --> 
  <!-- Footer --> 
  <footer class="footer leader-3 link-dark-gray" role="contentinfo"> 
   <div class="grid-container"> 
    <nav class="column-6"> 
     <h6>ArcGIS for Developers</h6> 
     <ul class="list-plain"> 
      <li><a href="/">Home</a></li> 
      <li><a href="/features">Features</a></li> 
      <li><a href="/documentation">Documentation</a></li> 
      <li><a href="/support/">Support</a></li> 
      <li><a href="/pricing/">Pricing</a></li> 
      <li><a href="/startups">Startups</a></li> 
      <li><a href="https://blogs.esri.com/esri/arcgis/category/developer/">Blog</a></li> 
     </ul> 
    </nav> 
    <nav class="column-6"> 
     <h6>ArcGIS Platform</h6> 
     <ul class="list-plain"> 
      <li><a href="http://arcgis.com">ArcGIS Online</a></li> 
      <li><a href="http://desktop.arcgis.com">ArcGIS Desktop</a></li> 
      <li><a href="http://server.arcgis.com">ArcGIS Enterprise</a></li> 
      <li><a href="http://developers.arcgis.com">ArcGIS for Developers</a></li> 
      <li><a href="http://solutions.arcgis.com">ArcGIS Solutions</a></li> 
      <li><a href="http://marketplace.arcgis.com">ArcGIS Marketplace</a></li> 
     </ul> 
    </nav> 
    <nav class="column-6"> 
     <h6>About Esri</h6> 
     <ul class="list-plain"> 
      <li><a href="http://www.esri.com/about-esri/">About Us</a></li> 
      <li><a href="http://www.esri.com/careers/">Careers</a></li> 
      <li><a href="https://blogs.esri.com/esri/esri-insider/">Insiders Blog</a></li> 
      <li><a href="http://www.esri.com/events/user-conference/index.html">User Conference</a></li> 
      <li><a href="http://www.esri.com/events/devsummit/index.html">Developer Summit</a></li> 
     </ul> 
    </nav> 
    <nav class="column-6"> 
     <a class="esri-logo" href="http://esri.com" aria-label="Esri Home"></a> 
     <section class="footer-social-nav leader-1"> 
      <a class="icon-social-twitter" aria-label="Esri on Twitter" href="https://twitter.com/Esri/"></a> 
      <a class="icon-social-facebook" aria-label="Esri on Facebook" href="https://www.facebook.com/esrigis/"></a> 
      <a class="icon-social-github" aria-label="Esri on GitHub" href="http://esri.github.com/"></a> 
      <a class="icon-social-contact" aria-label="Contact Esri" href="http://www.esri.com/about-esri/contact/"></a> 
     </section> 
    </nav> 
    <div class="column-24 leader-1"> 
     <p><small><a href="http://www.esri.com/legal/copyright-trademarks">Copyright © 2017 Esri</a>. All rights reserved. | <a href="http://www.esri.com/legal/privacy">Privacy</a> | <a href="http://www.esri.com/legal/software-license">Terms of use</a> | <a href="/terms/">Plain English</a> | <a href="/terms/faq/">FAQ</a></small></p> 
    </div> 
   </div> 
  </footer> 
  <script>
      if ((/esri_auth/).test(document.cookie)) {
        document.body.classList.add('logged-in');
        document.body.classList.remove('logged-out');
      }
    </script> 
  <!-- Javascript --> 
  <script src="/assets/js/config.js"></script> 
  <script src="/assets/js/index.js"></script> 
  <script type="text/javascript">if (_satellite && _satellite.pageBottom) { _satellite.pageBottom(); }</script> 
  <script type="text/javascript" src="https://go.pardot.com/dcjs/82202/1182/dc.js"></script>  
 </body>
</html>