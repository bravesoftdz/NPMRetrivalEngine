<!DOCTYPE html SYSTEM "about:legacy-compat">
<!-- saved from url=(0023)https://docs.oracle.com -->
<html xml:lang="en-us" lang="en-us">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="abstract" content="If you develop JavaScript-based mobile apps, you can use the client SDK that Oracle Mobile Cloud Service (MCS) provides for JavaScript. This SDK simplifies authentication with MCS and provides JavaScript wrapper classes for MCS platform APIs."> 
  <meta name="description" content="If you develop JavaScript-based mobile apps, you can use the client SDK that Oracle Mobile Cloud Service (MCS) provides for JavaScript. This SDK simplifies authentication with MCS and provides JavaScript wrapper classes for MCS platform APIs."> 
  <title>JavaScript Applications</title> 
  <meta property="og:site_name" content="Oracle Help Center"> 
  <meta property="og:title" content="Using Oracle Mobile Cloud Service "> 
  <meta property="og:description" content="If you develop JavaScript-based mobile apps, you can use the client SDK that Oracle Mobile Cloud Service (MCS) provides for JavaScript. This SDK simplifies authentication with MCS and provides JavaScript wrapper classes for MCS platform APIs."> 
  <link rel="stylesheet" href="/sp_common/book-template/ohc-book-template/css/book.css"> 
  <link rel="shortcut icon" href="/sp_common/book-template/ohc-common/img/favicon.ico"> 
  <meta name="application-name" content="Using Oracle Mobile Cloud Service "> 
  <meta name="generator" content="DITA Open Toolkit version 1.8.5 (Mode = doc)"> 
  <meta name="plugin" content="SP_docbuilder HTML plugin release 17.8.1"> 
  <link rel="alternate" href="using-oracle-mobile-cloud-service.pdf" title="PDF File" type="application/pdf"> 
  <link rel="alternate" href="using-oracle-mobile-cloud-service.epub" title="ePub File" type="application/epub+zip"> 
  <link rel="alternate" href="using-oracle-mobile-cloud-service.mobi" title="Mobi File" type="application/x-mobipocket-ebook"> 
  <meta name="robots" content="all"> 
  <link rel="schema.dcterms" href="http://purl.org/dc/terms/"> 
  <meta name="dcterms.created" content="2017-08-30T07:38:28-07:00"> 
  <meta name="dcterms.dateCopyrighted" content="2015, 2017"> 
  <meta name="dcterms.category" content="cloud"> 
  <meta name="dcterms.identifier" content="E81870-06"> 
  <meta name="dcterms.release" content="Latest Cloud Release"> 
  <link rel="prev" href="cordova-applications.html" title="Previous" type="text/html"> 
  <link rel="next" href="platform-apis1.html" title="Next" type="text/html"> 
  <script>
        document.write('<style type="text/css">');
        document.write('body > .noscript, body > .noscript ~ * { visibility: hidden; }');
        document.write('</style>');
     </script> 
  <script data-main="/sp_common/book-template/ohc-book-template/js/book-config" src="/sp_common/book-template/requirejs/require.js"></script> 
  <script>
            if (window.require === undefined) {
                document.write('<script data-main="sp_common/book-template/ohc-book-template/js/book-config" src="sp_common/book-template/requirejs/require.js"><\/script>');
                document.write('<link href="sp_common/book-template/ohc-book-template/css/book.css" rel="stylesheet"/>');
            }
        </script> 
  <script type="application/json" id="ssot-metadata">
            {
                "primary":
                {
                    "category":{
                      "short_name":"cloud",
                      "element_name":"Cloud",
                      "display_in_url":true
                    },
                    "suite":{
                      "short_name":"paas",
                      "element_name":"Platform as a Service (PaaS)",
                      "display_in_url":true
                    },
                    "product_group":{
                      "short_name":"app-dev",
                      "element_name":"Application Development",
                      "display_in_url":false
                    },
                    "product":{
                      "short_name":"mobile-cloud",
                      "element_name":"Mobile Cloud Service",
                      "display_in_url":true
                    },
                    "release":{
                      "short_name":"latest",
                      "element_name":"Latest Cloud Release",
                      "display_in_url":false
                    },
                    "platform":{
                      "short_name":"",
                      "element_name":"",
                      "display_in_url":false
                    },
                    "component":{
                      "short_name":"",
                      "element_name":"",
                      "display_in_url":false
                    }
                }
            }
            </script> 
  <meta name="dcterms.title" content="Using Oracle Mobile Cloud Service"> 
  <meta name="dcterms.isVersionOf" content="MCSUA"> 
  <meta name="dcterms.product" content="en/cloud/paas/mobile-cloud"> 
 </head> 
 <body> 
  <div class="noscript alert alert-danger text-center" role="alert"> 
   <a href="cordova-applications.html" class="pull-left"><span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>Previous</a> 
   <a href="platform-apis1.html" class="pull-right">Next<span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span></a> 
   <span class="fa fa-exclamation-triangle" aria-hidden="true"></span> JavaScript must be enabled to correctly display this content 
  </div> 
  <article> 
   <header> 
    <ol class="breadcrumb" vocab="http://schema.org/" typeof="BreadcrumbList"> 
     <li property="itemListElement" typeof="ListItem"><a href="index.html" property="item" typeof="WebPage"><span property="name">Using Oracle Mobile Cloud Service </span></a></li> 
     <li property="itemListElement" typeof="ListItem"><a href="setting-mobile-apps.html" property="item" typeof="WebPage"><span property="name">Setting up Mobile Apps</span></a></li> 
     <li class="active" property="itemListElement" typeof="ListItem">JavaScript Applications</li> 
    </ol> 
    <a id="GUID-7DF6C234-8DFE-4143-B138-FA4EB1EC9958" name="GUID-7DF6C234-8DFE-4143-B138-FA4EB1EC9958"></a> 
    <h2 id="MCSUA-GUID-7DF6C234-8DFE-4143-B138-FA4EB1EC9958" class="sect2"><span class="enumeration_chapter">10 </span>JavaScript Applications </h2> 
   </header> 
   <div class="ind"> 
    <div> 
     <p>If you develop JavaScript-based mobile apps, you can use the client SDK that <span>Oracle Mobile Cloud Service</span> (<span>MCS</span>) provides for JavaScript. This SDK simplifies authentication with <span>MCS</span> and provides JavaScript wrapper classes for <span>MCS</span> platform APIs. </p> 
     <p>This SDK is primarily geared toward browser-based apps but can also be used for hybrid frameworks. If you develop Cordova-based apps, use the Cordova SDK. See <a href="cordova-applications.html#GUID-31E21FD2-37BD-4B19-80E7-3B3A00A77784" title="If you develop hybrid apps based on the Apache Cordova framework, you can use the client SDK that Oracle Mobile Cloud Service (MCS)) provides for Cordova. This SDK simplifies authentication with MCS and provides Cordova wrapper classes for MCS platform APIs as well as libraries for Data Offline and Sync and Sync Express.">Cordova Applications</a>. </p> 
    </div> 
    <div class="sect2">
     <a id="GUID-31690F55-040C-40DD-AD4A-9BB5A94134F0" name="GUID-31690F55-040C-40DD-AD4A-9BB5A94134F0"></a>
     <h3 id="MCSUA-GUID-31690F55-040C-40DD-AD4A-9BB5A94134F0" class="sect3">Getting the SDK for JavaScript</h3> 
     <div> 
      <p>To get the <span>MCS</span> client SDK for JavaScript, go to the Oracle Technology Network’s <a href="http://www.oracle.com/technetwork/topics/cloud/downloads/mobile-cloud-service-3636470.html">MCS download page</a>. </p> 
     </div> 
    </div> 
    <div class="sect2">
     <a id="GUID-B41714BA-0489-4166-B980-F6DA72ADA1EE" name="GUID-B41714BA-0489-4166-B980-F6DA72ADA1EE"></a>
     <h3 id="MCSUA-GUID-B41714BA-0489-4166-B980-F6DA72ADA1EE" class="sect3">Contents of the JavaScript SDK Bundle</h3> 
     <div> 
      <p>The JavaScript SDK contains the following items:</p> 
      <ul style="list-style-type: disc;"> 
       <li> <p><code class="codeph">jsdocs.zip</code> - The compiled documentation for the library. </p> </li> 
       <li> <p><code class="codeph">mcs.js</code> - The uncompressed version of the SDK. This version contains code comments and is best used as you are developing and debugging your app. </p> </li> 
       <li> <p><code class="codeph">mcs.sync.js</code> - The uncompressed version of the Sync Express library. </p> </li> 
       <li> <p><code class="codeph">mcs.min.js</code> - The compressed version of the SDK. Use this version when you deploy the completed app. </p> </li> 
       <li> <p><code class="codeph">mcs.sync.min.js</code> - The compressed version of the Sync Express library. </p> </li> 
       <li> <p><code class="codeph">oracle_mobile_cloud_config.js</code> - The MCS configuration file. In this file, you insert environment and authentication details for the mobile backends that your app will access. </p> </li> 
       <li> <p><code class="codeph">\pako</code> - This folder includes the <code class="codeph">pako</code> JavaScript library, which is required to use SSO with a third-party token. </p> </li> 
       <li> <p><code class="codeph">mcs-tools.zip</code> - The MCS Custom Code Test Tools, a set of command line tools for debugging custom APIs that you have associated with your app's mobile backend. Detailed instructions are located in the <code class="codeph">README</code> file included in the zip. </p> </li> 
      </ul> 
     </div> 
    </div> 
    <div class="sect2">
     <a id="GUID-F6A00F12-6C0B-47C3-8816-188FF795C699" name="GUID-F6A00F12-6C0B-47C3-8816-188FF795C699"></a>
     <h3 id="MCSUA-GUID-F6A00F12-6C0B-47C3-8816-188FF795C699" class="sect3">Adding the SDK to a JavaScript App</h3> 
     <div> 
      <ol> 
       <li><span>If you haven’t already done so, unzip the JavaScript SDK zip.</span></li> 
       <li><span>Copy<code class="codeph"> mcs.min.js</code> and <code class="codeph">oracle_mobile_cloud_config.js</code> into the directory where you keep your JavaScript libraries.</span></li> 
       <li><span>Fill in your backend details in <code class="codeph">oracle_mobile_cloud_config.js</code>.</span></li> 
      </ol> 
     </div> 
    </div> 
    <div class="sect2">
     <a id="GUID-0BA99A45-F593-4FA0-9792-F19EF4E16A4D" name="GUID-0BA99A45-F593-4FA0-9792-F19EF4E16A4D"></a>
     <h3 id="MCSUA-GUID-0BA99A45-F593-4FA0-9792-F19EF4E16A4D" class="sect3">Configuring SDK Properties for JavaScript</h3> 
     <div> 
      <p>To use the SDK in a JavaScript app, you need to add the <code class="codeph">oracle_mobile_cloud_config.js</code> configuration file to the app and fill it in with environment details for your mobile backend. In turn, the SDK classes draw on this file for the details needed to access the mobile backend and use them to construct HTTP headers for REST calls made to APIs. </p> 
      <p>You package the configuration file in the same folder as the <code class="codeph">mcs.min.js</code> file. </p> 
      <p>The following example shows the structure of a generic <code class="codeph">oracle_mobile_cloud_config.js</code> file: </p>
      <pre class="pre codeblock"><code>var mcs_config = {
  "logLevel": mcs.LOG_LEVEL.INFO,
  "logHTTP": true,
  "mobileBackends": {
    "YOUR_BACKEND_NAME": {
      "default": true,
      "baseUrl": "YOUR_BACKEND_BASE_URL",
      "applicationKey": "YOUR_BACKEND_APPLICATION_KEY",
      "authorization": {
        "basicAuth": {
          "backendId": "YOUR_BACKEND_ID",
          "anonymousToken": "YOUR_BACKEND_ANONYMOUS_TOKEN"
        },
      }
    }
  }
};</code></pre>
      <p>Here’s a list of the file’s elements. The values that you need to fill in for a given mobile backend can be found on the Settings and Clients pages for that mobile backend.</p> 
      <ul style="list-style-type: disc;"> 
       <li> <p><code class="codeph">logLevel</code> — Determines how much SDK logging is displayed in the app’s console. The default value is <code class="codeph">mcs.LOG_LEVEL.INFO</code> (where only important events are logged). Other possible values are <code class="codeph">mcs.LOG_LEVEL.ERROR</code> (only errors are logged) and <code class="codeph">mcs.LOG_LEVEL.VERBOSE</code>. </p> </li> 
       <li> <p><code class="codeph">logHTTP</code> — When set to true, enables additional logging capability that includes the complete HTTP headers and body in requests and responses to MCS. </p> </li> 
       <li> <p><code class="codeph">mobileBackends</code> — The config file’s root element, containing a JSON object for each mobile backend. </p> </li> 
       <li> <p><code class="codeph">baseUrl</code> — The URL your app uses to connect to its mobile backend. </p> </li> 
       <li> <p><code class="codeph">applicationKey</code> — The application key, which is a unique string assigned to your app when you register it in MCS. </p> </li> 
       <li> <p><code class="codeph">backendId</code> — The unique identifier assigned to a specific mobile backend. </p> </li> 
       <li> <p><code class="codeph">anonymousToken</code> — A unique string that allows your app to access APIs that don’t require login. In this scenario, the anonymous key is passed to MCS instead of an encoded user name and password combination. </p> </li> 
       <li> <p><code class="codeph">authorization</code> — JSON object containing the authentication details for connecting your app to MCS. In turn, it must contain one or more objects of type <code class="codeph">basicAuth</code>, <code class="codeph">oAuth</code>, or <code class="codeph">tokenAuth</code>. The contents of the object depend on the type of authentication. </p> </li> 
      </ul> 
      <div class="section"> 
       <p class="subhead2">HTTP Basic</p> 
       <p>For HTTP Basic, you need to nest an <code class="codeph">basicAuth</code> object within the <code class="codeph">authorization</code> object and fill in the HTTP Basic credentials provided by the mobile backend. The resulting authorization property might look something like this: </p>
       <pre class="pre codeblock"><code>"authorization": {
  "basicAuth": {
    "backendId": "3b113ad5-07dc-4143-8b6a-a2ef62a175c1",
    "anonymousToken": "UFJJTUVfREVDRVBUSUNPTl9NT0JJTEVfQU5PTllNT1VTX0FQUElEOnZrZWJxUmwuamEwbTdu"
  }
}</code></pre>
      </div> 
      <!-- class="section" --> 
      <div class="section"> 
       <p class="subhead2">OAuth Consumer</p> 
       <p>For OAuth, you need to nest an <code class="codeph">oAuth</code> object within the <code class="codeph">authorization</code> object and fill in the OAuth credentials provided by the mobile backend. The resulting authorization property might look something like this: </p>
       <pre class="pre codeblock"><code>"authorization": {
  "oAuth": {
    "clientID": "b20a34b4-e646-44dc-a787-3a8715f4bb46",
    "clientSecret": "chIkehuDPYsaosPEMyE2",
    "tokenEndpoint": "http://abc09xyz.oracle.com:14100/oam/oauth2/tokens",
  }
}</code></pre>
      </div> 
      <!-- class="section" --> 
      <div class="section"> 
       <p class="subhead2">SSO with a Third-Party Token</p> 
       <p>For SSO with a third-party token, nest a <code class="codeph">tokenAuth</code> object within the <code class="codeph">authorization</code> object and fill in the mobile backend ID. The resulting <code class="codeph">authorization</code> property might look something like this: </p>
       <pre class="pre codeblock"><code>"authorization": {
  "tokenAuth": {
    "backendId": "3b113ad5-07dc-4143-8b6a-a2ef62a175c1",
  }
}</code></pre>
      </div> 
      <!-- class="section" --> 
     </div> 
    </div> 
    <div class="sect2">
     <a id="GUID-E4286A66-D55E-4337-8441-1EDBE01B66C1" name="GUID-E4286A66-D55E-4337-8441-1EDBE01B66C1"></a>
     <h3 id="MCSUA-GUID-E4286A66-D55E-4337-8441-1EDBE01B66C1" class="sect3">Loading a Mobile Backend's Configuration into a JavaScript App</h3> 
     <div> 
      <p>For any calls to MCS APIs using the JavaScript SDK to successfully complete, you need to have the mobile backend’s configuration loaded. You do this using the <code class="codeph">mobileBackendManager</code> and <code class="codeph">mobileBackend</code> objects. </p> 
      <p>The root object in the SDK is the <code class="codeph">mcs.mobileBackendManager</code>. The <code class="codeph">mcs.mobileBackendManager</code> object manages one or more <code class="codeph">mobileBackend</code> objects. A <code class="codeph">mobileBackend</code> object is used to manage connectivity, authentication, and other transactions between your application and its associated mobile backend, including calls to platform APIs and any custom APIs you have defined. </p> 
      <p>Using <code class="codeph">mobileBackendManager.setConfig</code>, you specify a configuration that is defined in the app’s <code class="codeph">oracle_mobile_cloud_config.js</code> file. This configuration includes info such as the mobile backend name and version, base URL, and authentication details. </p> 
      <p>Here’s some code you can insert into the app class establish the mobile backend and retrieve data from the <code class="codeph">oracle_mobile_cloud_config.js</code> file. </p>
      <pre class="pre codeblock"><code>mcs.mobileBackendManager.platform = new mcs.BrowserPlatform();
mcs.mobileBackendManager.setConfig(mcs_config);

this.backend = mcs.mobileBackendManager.getMobileBackend("YOUR_BACKEND_NAME");</code></pre>
     </div> 
    </div> 
    <div class="sect2">
     <a id="GUID-0B4BE7C2-CC75-47AE-84CC-2DE8978F3EC2" name="GUID-0B4BE7C2-CC75-47AE-84CC-2DE8978F3EC2"></a>
     <h3 id="MCSUA-GUID-0B4BE7C2-CC75-47AE-84CC-2DE8978F3EC2" class="sect3">Authenticating and Logging In Using the SDK for JavaScript</h3> 
     <div> 
      <p>Here are some examples of how to use the <code class="codeph">Authorization</code> class of the JavaScript SDK in your code. </p> 
      <div class="section"> 
       <p class="subhead2">OAuth and HTTP Basic</p> 
      </div> 
      <!-- class="section" --> 
      <p>Get the mobile backend and set the authentication type to <code class="codeph">oAuth</code> or <code class="codeph">basicAuth</code>. </p>
      <pre class="pre codeblock"><code>function initializeMCS(){
  mcs.mobileBackendManager.setConfig(mcs_config);
  mcsBackend = mcs.mobileBackendManager.getMobileBackend("YOUR_BACKEND_NAME");
  if(mcsBackend != null){
    <span class="bold">mcsBackend.setAuthenticationType("oAuth");</span>
  }
}</code></pre>
      <p>Then add a function that calls <code class="codeph">Authorization.authenticate</code> and pass it a user name and password. </p>
      <pre class="pre codeblock"><code>function login(username, password){
  var deferred = $q.defer();
  mcsBackend.Authorization.authenticate(username, password, success, failed);

  return deferred.promise;

  function success(response,data){
    deferred.resolve();
    logAnalyticsEvent();
  }

  function failed(statusCode,data){
    deferred.reject();
  }
}</code></pre>
      <div class="section"> 
       <p class="subhead2">SSO with a Third-Party Token</p> 
       <p>To use SSO with a third-party token, first your app needs to get a token from the third-party token issuer. The way you can obtain the token varies by issuer. For detailed information on obtaining third-party tokens and configuring identity providers in MCS, see <a href="authentication-mcs.html#GUID-5CBBECB0-0156-4C88-96DC-706010E7C035" title="A remote identity provider can issue tokens that you can use to authenticate and authorize users in MCS.">Using Tokens From Third-Party Identity Providers</a>. </p> 
       <div class="infoboxnote" id="GUID-0B4BE7C2-CC75-47AE-84CC-2DE8978F3EC2__GUID-9CEE8125-0825-4B24-829C-8DC412F9F1E6"> 
        <p class="notep1">Note:</p>Third-party token exchange requires the pako JavaScript library, so make sure to add it to your app. Pako is distributed with the SDK in the \pako subdirectory. 
       </div> 
       <p>Get the mobile backend and set the authentication type to <code class="codeph">tokenAuth</code>. </p>
       <pre class="pre codeblock"><code>function initializeMCS(){
  mcs.mobileBackendManager.platform = new mcs.JSPlatform();
  mcs.mobileBackendManager.setConfig(mcs_config);
  mcsBackend = mcs.mobileBackendManager.getMobileBackend("YOUR_BACKEND_NAME");
  if (mcsBackend != null) {
    <span class="bold">mcsBackend.setAuthenticationType("tokenAuth");</span>
  }
},
</code></pre>
       <p>Then pass the token you got from the third-party token issuer to a function that calls <code class="codeph">Authorization.authenticate</code>. </p>
       <pre class="pre codeblock"><code>mcsBackend.Authorization.authenticate(thirdPartyToken).then(
    function() {
      console.log("MCS authenticate() worked");
     }
   ).catch(
     function() {
       console.log("MCS authenticate() FAILED");
     }
  );
</code></pre>
      </div> 
      <!-- class="section" --> 
     </div> 
    </div> 
    <div class="sect2">
     <a id="GUID-3B8BD29F-63DB-44CA-BC61-72726B635905" name="GUID-3B8BD29F-63DB-44CA-BC61-72726B635905"></a>
     <h3 id="MCSUA-GUID-3B8BD29F-63DB-44CA-BC61-72726B635905" class="sect3">Securing Browser-Based Apps Against Cross-Site Request Forgery Attacks</h3> 
     <div> 
      <p>If any of your apps will be browser-based, you need to manage cross-origin resource sharing (CORS) for access to MCS APIs to protect against Cross-Site Request Forgery (CSRF) attacks. Do this by setting the <code class="codeph">Security_AllowOrigin</code> environment to either <code class="codeph">disallow</code> (the default value) or to a comma-separated whitelist of trusted URLs from which cross-site requests can be made. For more information and details on how to use the wildcard character (*), see <a href="authentication-mcs.html#GUID-B5445574-1EEB-4431-9599-CA6215ACC96F">Securing Cross-Site Requests to MCS APIs</a>. </p> 
      <div class="infoboxnote" id="GUID-3B8BD29F-63DB-44CA-BC61-72726B635905__GUID-D08CC35F-9139-453F-92EE-6BD127414DD0"> 
       <p class="notep1">Note:</p>For convenience, during the development of a browser-based application or during testing of a hybrid application running in the browser, you can set 
       <code class="codeph">Security_AllowOrigin</code> to 
       <code class="codeph">http://localhost:<span class="codeinlineitalic">[port]</span></code>, but be sure to update the value in production. 
      </div> 
     </div> 
    </div> 
    <div class="sect2">
     <a id="GUID-7A62C080-C2C4-4014-9590-382152E33B24" name="GUID-7A62C080-C2C4-4014-9590-382152E33B24"></a>
     <h3 id="MCSUA-GUID-7A62C080-C2C4-4014-9590-382152E33B24" class="sect3">Calling Platform APIs Using the SDK for JavaScript</h3> 
     <div> 
      <p>Once you include the SDK libraries in your application, and adjust configuration settings, you’re ready to use the SDK classes in your apps.</p> 
      <p>The root class in the JavaScript SDK is the <code class="codeph">mcs.mobileBackendManager</code>. An instance of <code class="codeph">mcs.mobileBackendManager</code> manages one or more<code class="codeph">mobileBackend</code> objects. A <code class="codeph">mobileBackend</code> object is used to manage connectivity, authentication, and other transactions between your application and its associated mobile backend, including calls to platform APIs and any custom APIs you have defined. In turn, a <code class="codeph">mobileBackend</code> instance manages instances of <code class="codeph">ServiceProxy</code>. These instances correspond to platform services in MCS (for example, Analytics, Notifications, Offline Data, and so on). </p> 
      <p>It retrieves the information it needs about each mobile backend (such as the mobile backend name and authentication information) from the app’s <code class="codeph">oracle_mobile_cloud_config.js</code> file. </p> 
      <p>Here’s an example of how you could use these classes to get a Storage collection in the mobile backend, create a storage object (in this case, a text file), and then upload that object to the collection. The code here manages calls to the Storage API, including the constructing of the HTTP headers with the mobile backend credentials necessary to access the API:</p>
      <pre class="pre codeblock"><code>var backend;
var collection_id = 'YOUR_STORAGE_COLLECTION_NAME';

function uploadTextFile() {

  return getCollection()
    .then(success);

  function success(collection){
    //create new Storage object and set its name and payload
    <span class="bold">var obj = new mcs.StorageObject(collection);</span>
    <span class="bold">obj.setDisplayName("JSFile.txt");</span>
    <span class="bold">obj.loadPayload("Hello World from Oracle Mobile Cloud Service Javascript SDK", "text/plain");</span>

    return postObject(collection, obj).then(function(object){
      return readObject(collection, object.id);
    });
  }
}

function getCollection(){
  var deferred = $q.defer();

  //return a storage collection with the name assigned to the collection_id variable.
  <span class="bold">backend.Storage.getCollection(collection_id, null, onGetCollectionSuccess, onGetCollectionFailed);</span>

  return deferred.promise;

  function onGetCollectionSuccess(collection){
    deferred.resolve(collection);
  }

  function onGetCollectionFailed(statusCode, headers, data){
    deferred.reject(statusCode);
  }
}

function postObject(collection, obj){
  var deferred = $q.defer();

  //post an object to the collection
  <span class="bold">collection.postObject(obj, onPostObjectSuccess, onPostObjectFailed);</span>

  return deferred.promise;

  function onPostObjectSuccess(object){
    deferred.resolve(object);
  }

  function onPostObjectFailed(statusCode, headers, data){
    deferred.reject(statusCode);
  }
}
</code></pre>
      <p>For more information on the individual platform APIs, see <a href="platform-apis1.html">Platform APIs</a>. </p> 
     </div> 
     <div class="sect3">
      <a id="GUID-AB53EF2E-E267-48B4-AF19-482BE6009FEF" name="GUID-AB53EF2E-E267-48B4-AF19-482BE6009FEF"></a>
      <h4 id="MCSUA-GUID-AB53EF2E-E267-48B4-AF19-482BE6009FEF" class="sect4">Avoiding Unsafe Header Errors</h4> 
      <div> 
       <p>When you have JavaScript web apps that call the Storage APIs, you need to set the <code class="codeph">Security_ExposeHeaders</code> policy to allow headers returned by these APIs to be accessed by the browser. For example, setting the value of that policy to the following would allow you to use all Storage API endpoints: </p>
       <pre class="pre codeblock"><code>*.*.Security_ExposeHeaders=Oracle-Mobile-Created-By,Oracle-Mobile-Created-On,Oracle-Mobile-Modified-By,Oracle-Mobile-Modified-On,Accept-Encoding,Oracle-Mobile-Name,ETag</code></pre>
       <p>For instructions on setting policies, see <a href="mcs-environments1.html#GUID-901A2E18-32C3-4770-9BDB-23543907D27F" title="Environment policies are environment settings and artifact properties that are specific to a particular environment. They let you override given values per environment.">Environment Policies</a>. </p> 
      </div> 
     </div> 
    </div> 
    <div class="sect2">
     <a id="GUID-ABA9EDB2-7083-481B-8CBB-D994E13EFDB6" name="GUID-ABA9EDB2-7083-481B-8CBB-D994E13EFDB6"></a>
     <h3 id="MCSUA-GUID-ABA9EDB2-7083-481B-8CBB-D994E13EFDB6" class="sect3">Calling Custom APIs Using the SDK for JavaScript</h3> 
     <div> 
      <p>The SDK provides the <code class="codeph">CustomCode</code> class to simplify the calling of custom APIs in MCS. You can use this class to call a REST method (GET, PUT, POST, or DELETE) on an endpoint where the request payload is JSON or empty and the response payload is JSON or empty. </p> 
      <p>To make a call to a custom API endpoint, you could use something like this:</p>
      <pre class="pre codeblock"><code>mcs.mobileBackendManager.setConfig(mcs_config);
backend = mcs.mobileBackendManager.getMobileBackend("JSBackend");
.....
  
backend.CustomCode.invokeCustomCodeJSONRequest("TaskApi1/tasks/100" , "GET" , null, function(statusCode, data){
  mcs._Logger.log(mcs.LOG_LEVEL.INFO, statusCode);
  //The statusCode parameter returns the status code from the HTTP REST Call.
  mcs._Logger.log(mcs.LOG_LEVEL.INFO, data);
  //The data parameter is the HTTP payload from the server, if available, or an error message.
    Example:
      statusCode: 200,
      data: {}
      //Depends on the response format defined in the API.
}, 
function(statusCode, data){
  mcs._Logger.log(mcs.LOG_LEVEL.INFO, statusCode);
  //The statusCode parameter returns the status code from the HTTP REST Call.
  mcs._Logger.log(mcs.LOG_LEVEL.INFO, data);
  //The data parameter is the HTTP payload from the server, if available, or an error message. 
    Example:
      statusCode: 404,
      data: {
        "type":"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4.1",
        "status":404,"title":"API not found",
        "detail":"We cannot find the API JSApi2 in Mobile Backend JSBackend(1.0). Check that this Mobile Backend is associated with the API.",
        "o:ecid":"005Bojjhp2j2FSHLIug8yf00052t000Jao, 0:2", "o:errorCode":"MOBILE-57926", "o:errorPath":"/mobile/custom/JSApi2/tasks" }
        //Depends on the response format defined in the API.
  });</code></pre>
     </div> 
    </div> 
   </div> 
  </article>  
 </body>
</html>