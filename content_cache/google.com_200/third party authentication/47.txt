<!--?xml version="1.0" encoding="UTF-8" standalone="no"?--><!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml">
 <head>
  <script type="text/javascript">var NREUMQ=NREUMQ||[];NREUMQ.push(["mark","firstbyte",new Date().getTime()]);</script> 
  <title>Programming JavaScript Applications</title> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <link href="http://dwn0odqttrkhc.cloudfront.net/assets/book-f1caceafd9c9f3a6ff72d40c54d173ab.css" media="screen" rel="stylesheet" type="text/css"> 
  <link href="http://dwn0odqttrkhc.cloudfront.net/assets/default-24583441b4f47382b8932338cd56ed23.css" media="screen" rel="stylesheet" type="text/css"> 
  <script src="http://dwn0odqttrkhc.cloudfront.net/assets/application-47d6ffb0c77b868d29a43eb65e940505.js" type="text/javascript"></script> 
  <script src="http://dwn0odqttrkhc.cloudfront.net/assets/book-756862b9ed04d945ca53de5b8f106a83.js" type="text/javascript"></script> 
  <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script> 
  <link href="http://dwn0odqttrkhc.cloudfront.net/assets/janrain-53eb5abed55992e21943b9d3373923e8.css" media="all" rel="stylesheet" type="text/css"> 
  <meta content="authenticity_token" name="csrf-param"> 
  <meta content="YE10N0Uv5s8IA9n/0MQL/YghvZPqM/6sGHZ1wnQyw+4=" name="csrf-token"> 
  <script type="text/javascript" charset="utf-8">
  	
		app.data = new classes.Data({"controller":{"controller":"books","action":"html"},"capturable":{"capture_server":"https://oreilly.janraincapture.com","client_id":"6n5q2k9vesqgn93k3mhevka6c3c3rsre","app_url":"https://login.oreilly.com","app_id":"xsnca5wmqe9vxv97ygh5vfejkd","load_js":"d16s8pqtk4uodx.cloudfront.net/login.oreilly.com/load.js"},"user":{"id":null,"account":"LoggedOutAccount","email":"","name":null,"gravatar_url":"http://www.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e?s=40&d=identicon"},"book":{"isbn":"1234000000262","chapter":"ch06.html","toc_url":"/books/1234000000262/toc_html","metadata_url":"http://d4bb7yl96lyl1.cloudfront.net/1234000000262/metadata/metadata_e1aae0072acf90f6575ddcd5fd8a57bf4abe3358.json"},"abilities":{"can_destroy_all_comments":false,"can_create_comments":false},"advertisement":{"body":"<style>      \r\n.ad-profile-image {\r\n  padding: 0;\r\n  margin: 0;\r\n  max-height: 30px;\r\n }\r\n\r\n.top-banner {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 34px;\r\n  z-index: 99999;\r\n}\r\n\r\np.banner-text {\r\n  margin: 0;\r\n  text-align: center;\r\n  padding-right: 10px;\r\n  width: 550px;\r\n}\r\n\r\n@media screen and (max-width: 600px) {\r\n   p.banner-text {\r\n     width: 100%;\r\n     text-align: center;\r\n  }\r\n}\r\n\r\nspan.ebook-advantage {\r\n  font-size: smaller;\r\n  display: block;\r\n}\r\n\r\ndiv.banner-container {\r\n  margin: 0 auto;\r\n}\r\n\r\ndiv.banner-container ul {\r\n  margin: 0 auto;\r\n}\r\n\r\ndiv.topad { padding-bottom: 5px; }\r\n\r\ndiv.banner-container ul li {\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n}\r\n\r\ndiv.banner-container li p {\r\n  padding-top: 0;\r\n  margin-top: 0;\r\n}\r\n\r\ndiv.banner-container li.sponsor {\r\n  border-right: 1px solid rgb(125, 154, 180);\r\n  margin-right: 5px;\r\n  padding-right: 10px;\r\n}\r\n\r\ndiv.banner-container .webbutton {\r\n  background-color: #3994b6;\r\n  display: inline-block;\r\n  padding: 10px;\r\n  -webkit-border-radius: 5px;\r\n  -moz-border-radius: 5px;\r\n  border-radius: 5px;\r\n  color: #FFF;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n}\r\n\r\n</style>\r\n   \r\n<div style=\"color: rgb(125, 154, 180);\">\r\n\r\n<div class=\"banner-container\">\r\n\r\n<ul>\r\n\r\n<li class=\"sponsor\">\r\n<!--CONFERENCE SPONSOR IMAGE-->\r\n<a href=\"http://www.oscon.com/oscon2014\">\r\n<!--<img src=\"http://orm-other.s3.amazonaws.com/fluent_logo.png\" class=\"ad-profile-image\"/>-->\r\n<img src=\"http://orm-other.s3.amazonaws.com/oscon_logo.png\" class=\"ad-profile-image\"/>\r\n<!--<img src=\"http://orm-other.s3.amazonaws.com/strata_logo.png\" class=\"ad-profile-image\"/>\r\n<img src=\"http://orm-other.s3.amazonaws.com/StrataRx_logo.png\" class=\"ad-profile-image\"/>\r\n<img src=\"http://orm-other.s3.amazonaws.com/velocity_logo.png\" class=\"ad-profile-image\"/>-->\r\n</a>\r\n</li>\r\n\r\n<li>\r\n<!--AD TEXT, 2 LINES, REPLACE LINK URL AS WELL-->\r\n<p class=\"banner-text\">Enjoy this complimentary version of <em>Programming JavaScript Applications</em>.<br/> Purchase and download the DRM-free ebook on <a href=\"http://shop.oreilly.com/product/0636920033141.do\">oreilly.com</a>.<span class=\"ebook-advantage\">Learn more about the O’Reilly <a href=\"http://shop.oreilly.com/category/ebooks.do\">Ebook Advantage</a>.</span></p>\r\n</li>\r\n\r\n<li>\r\n<!--BUY BUTTON-->\r\n<a class=\"webbutton\" href=\"http://shop.oreilly.com/product/0636920033141.do\">Buy the Ebook</a>\r\n</li> \r\n\r\n</ul>\r\n\r\n</div>\r\n\r\n<!--CORNER BANNER (IF NEEDED)-->\r\n<!--<a href=\"http://shop.oreilly.com/product/0636920026365.do\" class=\"top-banner\"><img src=\"http://orm-other.s3.amazonaws.com/banner.png\" /></a>-->\r\n\r\n</div>"}});

		/* Janrain setup */
  	var janrainModal = new JanrainView();
  	$("head").append(janrainModal.render().el);

  	/* segment.io setup */
  	var analytics=analytics||[];analytics.load=function(e){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"===document.location.protocol?"https://":"http://")+"d2dq2ahtl5zl1z.cloudfront.net/analytics.js/v1/"+e+"/analytics.min.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n);var r=function(e){return function(){analytics.push([e].concat(Array.prototype.slice.call(arguments,0)))}},i=["identify","track","trackLink","trackForm","trackClick","trackSubmit","pageview","ab","alias","ready"];for(var s=0;s<i.length;s++)analytics[i[s]]=r(i[s])};
  	
  	analytics.load("hg9h6b9pae");

  	$(function() {
			app.bookapp = new BookApp();
		});
	
	</script> 
 </head> 
 <body> 
  <div id="menu"> 
   <ul id="menu-left"> 
    <li id="home-link"><a href="/"><i class="icon-house"></i></a></li> 
    <li><a href="/books/1234000000262">Programming JavaScript Applications</a></li> 
    <div class="clear"></div> 
   </ul> 
   <ul id="menu-right"> 
    <li id="comments-link"><a>&nbsp;</a></li> 
    <li> <a href="#" class="dropdown-toggle" data-toggle="dropdown">Chapters</a> 
     <div id="toc-popup" class="dropdown-menu"></div> </li> 
    <li><a href="#" class="capture_modal_open" id="capture_signin_link">Log In / Sign Up</a></li> 
    <li id="search-li"> 
     <form accept-charset="UTF-8" action="/searches" id="search-form" method="get">
      <div style="margin:0;padding:0;display:inline">
       <input name="utf8" type="hidden" value="?">
      </div> 
      <input name="search[q]" type="text" placeholder="Search book..." id="book-search"> 
      <input id="search_bookId" name="search[bookId]" type="hidden" value="1234000000262"> 
      <div style="display:none">
        sorted by: 
       <select name="search[sort]"> <option value="relevance">Relevance</option> <option value="authors">Author(s)</option> <option value="title">Title</option> </select> returning 
       <select name="search[limit]"> <option value="5">5</option> <option value="10">10</option> <option value="20">20</option> <option selected value="50">50</option> <option value="100">100</option> </select> values at a time. 
      </div> 
     </form> </li> 
    <div class="clear"></div> 
   </ul> 
   <div class="clear"></div> 
  </div> 
  <header>
   <div class="navheader"> 
    <table style="width: 100%; "> 
     <tbody>
      <tr>
       <td style="text-align: center; " colspan="3">Chapter&nbsp;6.&nbsp;Access Control</td>
      </tr> 
      <tr> 
       <td style="width: 20%; text-align: left; "> <a accesskey="p" href="ch05.html">Prev</a>&nbsp;</td> 
       <td style="width: 60%; text-align: center; ">&nbsp;</td> 
       <td style="width: 20%; text-align: right; ">&nbsp;<a accesskey="n" href="ch07.html">Next</a> </td> 
      </tr> 
     </tbody>
    </table> 
    <hr> 
   </div>
  </header>
  <section class="chapter" data-original-filename="ch06.xml" id="chjxvugoz00005b7r8cm9jo8a">
   <div class="titlepage">
    <div>
     <div>
      <h1 class="title">Chapter&nbsp;6.&nbsp;Access Control</h1>
     </div>
    </div>
   </div> 
   <p id="access_control_">Access control models <a id="id453230" class="indexterm"></a>are responsible for granting or restricting access to resources. They depend on two things: user identification (verified by one or more authentication schemes) and feature authorization.</p> 
   <p id="before_you_gran">Before you grant access to a resource, you need to know that the user is who she claims to be (authentication) and whether or not the user should have access to a given resource (authorization).</p> 
   <div class="sect1" data-original-filename="ch06.xml" id="authentication"> 
    <div class="titlepage">
     <div>
      <div>
       <h2 class="title">Authentication</h2>
      </div>
     </div>
    </div> 
    <p id="authentication_">Authentication is the <a id="ac6.1" class="indexterm"></a><a id="se6.1" class="indexterm"></a><a id="id453291" class="indexterm"></a>mechanism that confirms the identity of users trying to access a system. In order for users to be granted access to a resource, they must first prove that they are who they claim to be. Generally this is handled by passing a key with each request (often called an access token). The server verifies that the access token is genuine, and that the user does indeed have the required privileges to access the requested resource. Only then is the request granted.</p> 
    <p id="there_are_many__id6">There are many ways to grant a user an access token. The most common is a password challenge.</p> 
    <div class="sect2" id="passwords"> 
     <div class="titlepage">
      <div>
       <div>
        <h3 class="title">Passwords</h3>
       </div>
      </div>
     </div> 
     <p id="passwords_authe">Passwords <a id="au6.1.1" class="indexterm"></a><a id="id453340" class="indexterm"></a>should be stored with a one-way encryption hash, so that even if a malicious intruder obtains access to the user database, he still won't have access to user passwords. The hash should be long enough to prevent an attack from a single machine and to prevent an attack from a large cluster of machines. I recommend 512 bits (64 bytes).</p> 
     <p id="worms_targeting">Worms targeting vulnerable versions of popular website platforms such as WordPress and Drupal have become common. Once such worm takes control of a website and installs its payload, recruits all of the site's traffic into a JavaScript botnet, and, among other things, uses visitor CPU power to crack stolen password databases that fail to implement the security precautions outlined here.</p> 
     <p id="there_are_botne">There are botnets that <a id="id453367" class="indexterm"></a>exist today with <a class="ulink" href="http://onforb.es/1pFKBSH" target="_top">over 90,000 nodes</a>. Such botnets could crack MD5 password hashes at a rate of nine billion per second.</p> 
     <p id="passwords_are_v">Passwords are vulnerable <a id="id453388" class="indexterm"></a>to the following common attacks:</p> 
     <div class="itemizedlist" id="rainbow_tablesb">
      <ul class="itemizedlist"> 
       <li class="listitem"><p id="rainbow_tables">Rainbow tables</p></li> 
       <li class="listitem"><p id="brute_force">Brute force</p></li> 
       <li class="listitem"><p id="variable_time_e">Variable time equality</p></li> 
       <li class="listitem"><p id="passwords_stole">Passwords stolen from third parties</p></li> 
      </ul>
     </div> 
     <div class="sect3" id="rainbow-tables"> 
      <div class="titlepage">
       <div>
        <div>
         <h4 class="title">Rainbow tables</h4>
        </div>
       </div>
      </div> 
      <p id="rainbow_tables__id1">Rainbow tables are <a id="pa6.1.1.1" class="indexterm"></a><a id="ra6.1.1.1" class="indexterm"></a>precomputed tables used to look up passwords using stolen hashes. Once bad guys get their hands on user passwords, they'll attempt to attack popular services such as email and bank accounts—which spells very bad PR for your service.</p> 
      <p id="there_are_rainb">There are <a class="ulink" href="http://bit.ly/1pFKFBT" target="_top">rainbow tables that exist today</a> that can discover almost every possible password up to 14 characters. To prevent password theft by rainbow table, users should choose <a class="ulink" href="http://en.wikipedia.org/wiki/Rainbow_table" target="_top">passwords of at least 14 characters</a>. Sadly, such passwords are definitely not convenient, particularly on mobile devices. In other words, don't trust users to select appropriate passwords.</p> 
      <p id="rainbow_tables__id2">Rainbow tables can significantly reduce the time it takes to find a password, at the cost of memory, but with terabyte hard drives and gigabytes of RAM, it's a trade-off that is easily made. That said, it is possible to protect your service against rainbow table attacks.</p> 
      <div class="sect4" id="password-salts"> 
       <div class="titlepage">
        <div>
         <div>
          <h5 class="title">Password salts</h5>
         </div>
        </div>
       </div> 
       <p id="one_defense_you">One defense you <a id="id453519" class="indexterm"></a><a id="id453527" class="indexterm"></a><a id="id453533" class="indexterm"></a>can employ against rainbow tables is password salting. A salt is a sequence of random characters that gets paired with a password during the hashing process. Salts should be cryptographically secure random values of a length equal to the hash size. Salts are not secrets and can be safely stored in plain text alongside the user's other credentials.</p> 
       <p id="salting_can_pro">Salting can protect passwords in a couple of ways:</p> 
       <p id="first_a_unique">First, a uniquely generated salt can protect your password databases against existing rainbow tables. Using a random salt makes your site immune from these attacks. However, if you use the same salt for every password, a new rainbow table can be generated to attack the password database.</p> 
       <p id="second_if_two_">Second, if two different users utilize the same password, the compromised password will grant access to both user accounts. To prevent that, you must use a unique salt for each password. Doing so makes a rainbow table attack impractical.</p> 
       <p id="nodejs_supplie">Node.js supplies a <a id="id453572" class="indexterm"></a><a id="id453580" class="indexterm"></a>suitable random <a id="id453587" class="indexterm"></a>generator called <code class="literal">crypto.randomBytes()</code>. It returns a buffer. Wrap it to get a suitable salt string:</p> 
       <pre class="programlisting" data-language="javascript" id="_createsal">    <code class="cm">/**</code>
<code class="cm">     * createSalt(keylength, callback) callback(err, salt)</code>
<code class="cm">     *</code>
<code class="cm">     * Generates a cryptographically secure random string for</code>
<code class="cm">     * use as a password salt using Node's built-in</code>
<code class="cm">     * crypto.randomBytes().</code>
<code class="cm">     *</code>
<code class="cm">     * @param  {Number} keyLength</code>
<code class="cm">     * @param  {Function} callback </code>
<code class="cm">     * @return {undefined}</code>
<code class="cm">     */</code>
    <code class="kd">var</code> <code class="nx">createSalt</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">createSalt</code><code class="p">(</code><code class="nx">keyLength</code><code class="p">,</code> <code class="nx">callback</code><code class="p">)</code> <code class="p">{</code>
      <code class="nx">crypto</code><code class="p">.</code><code class="nx">randomBytes</code><code class="p">(</code><code class="nx">keyLength</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">err</code><code class="p">,</code> <code class="nx">buff</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">err</code><code class="p">)</code> <code class="p">{</code>
          <code class="k">return</code> <code class="nx">callback</code><code class="p">(</code><code class="nx">err</code><code class="p">);</code>
        <code class="p">}</code>
        <code class="nx">callback</code><code class="p">(</code><code class="kc">null</code><code class="p">,</code> <code class="nx">buff</code><code class="p">.</code><code class="nx">toString</code><code class="p">(</code><code class="s1">'base64'</code><code class="p">));</code>
      <code class="p">});</code>
    <code class="p">};</code></pre> 
       <p id="the_operation_i">The operation is asynchronous because the cryptographically secure random-number generator takes time to collect enough entropy to complete the operation.</p> 
      </div> 
     </div> 
     <div class="sect3" id="brute-force"> 
      <div class="titlepage">
       <div>
        <div>
         <h4 class="title">Brute force</h4>
        </div>
       </div>
      </div> 
      <p id="rainbow_tables__id3">Rainbow tables <a id="pa6.1.1.2" class="indexterm"></a><a id="br6.1.1.2" class="indexterm"></a>get all the blogger attention, but Moore's law is alive and well, and brute force has become a very real threat. Attackers are employing GPUs, super-computing clusters that cost less than $2,000, and JavaScript <a id="id453945" class="indexterm"></a>botnets comprised of tens of thousands of browsers visiting infected websites.</p> 
      <p id="a_bruteforce_a">A brute-force attack will attempt to crack a password by seeking a match using every possible character combination. A simple single-iteration hash can be tested at the rate of millions of hashes per second on modern systems.</p> 
      <p id="one_way_to_thwa">One way to thwart brute-force attacks is to programatically lock a user's account after a handful of failed login attempts. However, that strategy won't protect passwords if an attacker gains access to the password database.</p> 
      <p id="key_stretching_">Key stretching <a id="id453975" class="indexterm"></a>can make brute-force attacks impractical by increasing the time it takes to hash the password. This can be done by applying the hash function in a loop. The delay will be relatively unnoticed by a user trying to sign in, but will significantly hamper an attacker attempting to discover a password through brute force.</p> 
      <p id="dont_pick_any_">Don't pick any random hash function and apply it in a loop. You could unwittingly open up attack vectors. Instead, use an established standard for iterative hashing, such as bcrypt or PBKDF2.</p> 
      <p id="i_discovered_">I discovered 100 hashes in less than 1 ms using a simple MD5 algorithm, and then tried the same thing with Node's <a id="id454000" class="indexterm"></a>built-in <code class="literal">crypto.pbkdf2()</code> function (HMAC-SHA1) set to 80,000 iterations. PBKDF2 took 15.48 seconds. To a user performing a single login attempt per response, the slowdown is barely noticed, but it slows brute force to a crawl.</p> 
      <p id="usage_is_decept">Usage is deceptively simple:</p> 
      <pre class="programlisting" data-language="javascript" id="cryptopbkdfp">    <code class="nx">crypto</code><code class="p">.</code><code class="nx">pbkdf2</code><code class="p">(</code><code class="nx">password</code><code class="p">,</code> <code class="nx">salt</code><code class="p">,</code>
      <code class="nx">iterations</code><code class="p">,</code> <code class="nx">keyLength</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">err</code><code class="p">,</code> <code class="nx">hash</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">err</code><code class="p">)</code> <code class="p">{</code>
          <code class="k">return</code> <code class="nx">callback</code><code class="p">(</code><code class="nx">err</code><code class="p">);</code>
        <code class="p">}</code>
        <code class="nx">callback</code><code class="p">(</code><code class="kc">null</code><code class="p">,</code> <code class="k">new</code> <code class="nx">Buffer</code><code class="p">(</code><code class="nx">hash</code><code class="p">).</code><code class="nx">toString</code><code class="p">(</code><code class="s1">'base64'</code><code class="p">));</code>
      <code class="p">});</code></pre> 
      <p id="however_there_">However, there are important considerations that shouldn't be overlooked, such as generating the appropriate unique, crytographically secure random salt of the right length, and calculating the number of iterations in order to balance user experience and <a id="id454247" class="indexterm"></a><a id="id454257" class="indexterm"></a>security.</p> 
     </div> 
     <div class="sect3" id="variable-time-equality"> 
      <div class="titlepage">
       <div>
        <div>
         <h4 class="title">Variable time equality</h4>
        </div>
       </div>
      </div> 
      <p id="if_it_takes_you">If it takes your <a id="id454282" class="indexterm"></a>service longer to say no to a slightly wrong password than a mostly wrong password, attackers can use that data to guess the password, similar to how you guess a word-playing hangman. You might think that random time delays and network timing jitter would sufficiently mask those timing differences, but it turns out an attacker just needs to take more timing samples to filter out the noise and obtain statistically relevant <a id="id454296" class="indexterm"></a>timing data:</p> 
      <p id="from_crosby_et_">From Crosby et al. <a class="ulink" href="http://www.cs.rice.edu/~dwallach/pub/crosby-timing2009.pdf" target="_top">"Opportunities And Limits Of Remote Timing Attacks"</a>:</p> 
      <div class="blockquote">
       <blockquote class="blockquote">
        <p id="we_have_shown_t">We have shown that, even though the Internet induces significant timing jitter, we can reliably distinguish remote timing differences as low as 20 µs. A LAN environment has lower timing jitter, allowing us to reliably distinguish remote timing differences as small as 100 ns (possibly even smaller). These precise timing differences can be distinguished with only hundreds or possibly thousands of measurements.</p>
       </blockquote>
      </div> 
      <p id="the_best_way_to_id2">The best way to beat these attacks is to use a <a id="id454337" class="indexterm"></a>constant time hash equality check, rather than an optimized check. That is easily achieved by iterating through the full hash before returning the answer, regardless of how soon the answer is known.</p> 
      <p id="for_more_inform_id2">For more information, see <a class="ulink" href="http://codahale.com/a-lesson-in-timing-attacks/" target="_top">Coda Hale's "A Lesson in Timing Attacks"</a>.</p> 
      <p id="here_is_an_exam">Here is an example of a constant time string equality algorithm in JavaScript:</p> 
      <pre class="programlisting" data-language="javascript" id="_constante">    <code class="cm">/**</code>
<code class="cm">     * constantEquals(x, y)</code>
<code class="cm">     *</code>
<code class="cm">     * Compare two strings, x and y with a constant time</code>
<code class="cm">     * algorithm to prevent attacks based on timing statistics.</code>
<code class="cm">     */</code>
    <code class="nx">constantEquals</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">constantEquals</code><code class="p">(</code><code class="nx">x</code><code class="p">,</code> <code class="nx">y</code><code class="p">)</code> <code class="p">{</code>
      <code class="kd">var</code> <code class="nx">result</code> <code class="o">=</code> <code class="kc">true</code><code class="p">,</code>
        <code class="nx">length</code> <code class="o">=</code> <code class="p">(</code><code class="nx">x</code><code class="p">.</code><code class="nx">length</code> <code class="o">&gt;</code> <code class="nx">y</code><code class="p">.</code><code class="nx">length</code><code class="p">)</code> <code class="o">?</code> <code class="nx">x</code><code class="p">.</code><code class="nx">length</code> <code class="o">:</code> <code class="nx">y</code><code class="p">.</code><code class="nx">length</code><code class="p">,</code>
        <code class="nx">i</code><code class="p">;</code>

      <code class="k">for</code> <code class="p">(</code><code class="nx">i</code><code class="o">=</code><code class="mi">0</code><code class="p">;</code> <code class="nx">i</code><code class="o">&lt;</code><code class="nx">length</code><code class="p">;</code> <code class="nx">i</code><code class="o">++</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">if</code> <code class="p">(</code><code class="nx">x</code><code class="p">.</code><code class="nx">charCodeAt</code><code class="p">(</code><code class="nx">i</code><code class="p">)</code> <code class="o">!==</code> <code class="nx">y</code><code class="p">.</code><code class="nx">charCodeAt</code><code class="p">(</code><code class="nx">i</code><code class="p">))</code> <code class="p">{</code>
          <code class="nx">result</code> <code class="o">=</code> <code class="kc">false</code><code class="p">;</code>
        <code class="p">}</code>
      <code class="p">}</code>
      <code class="k">return</code> <code class="nx">result</code><code class="p">;</code>
    <code class="p">};</code></pre> 
     </div> 
     <div class="sect3" id="stolen-passwords"> 
      <div class="titlepage">
       <div>
        <div>
         <h4 class="title">Stolen passwords</h4>
        </div>
       </div>
      </div> 
      <p id="by_far_the_pass">By far the <a id="id454784" class="indexterm"></a><a id="id454793" class="indexterm"></a>biggest threat to password security is the fact that these tactics have already worked against other websites, and users have a tendency to reuse passwords across different sites. Since you don't have access to the user's other accounts for verification, there's little you can do to enforce unique passwords on your website.</p> 
      <p id="as_you_have_see">As you have seen, passwords alone are an ineffective authentication system, but they can still be useful in combination with other authentication <a id="id454810" class="indexterm"></a>factors.</p> 
     </div> 
    </div> 
    <div class="sect2" id="credential"> 
     <div class="titlepage">
      <div>
       <div>
        <h3 class="title">Credential</h3>
       </div>
      </div>
     </div> 
     <p id="i_searched_for_">I searched for a suitable <a id="au6.1.2" class="indexterm"></a><a id="cr6.1.2" class="indexterm"></a>open source password authentication module in npm, but I couldn't find one that met all of the criteria you should consider when you're implementing password authentication in your applications. This is a critical component of your system security, so it's important to get it right. I created a library to make it easy.</p> 
     <p id="credential_was__id1"></p> 
     <div class="warning" id="credential_was__id2">
      <p id="credential_was__id3">Credential was reviewed by a small army of security and JavaScript experts before publishing. Unless you're a security expert with access to a whole lot of other security experts, it's generally a really bad idea to roll your own security library. It's a much better idea to use something that's already well established and well tested.</p>
     </div> 
     <p id="install_credent">Install credential:</p> 
     <pre class="programlisting" id="npm_install__id2">    $ npm install --save credential</pre> 
     <p id="hash"><code class="literal">.hash()</code>:</p> 
     <pre class="programlisting" data-language="javascript" id="var_pw__requir_id1">    <code class="kd">var</code> <code class="nx">pw</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'credential'</code><code class="p">),</code>
      <code class="nx">newPassword</code> <code class="o">=</code> <code class="s1">'I have a really great password.'</code><code class="p">;</code>

    <code class="nx">pw</code><code class="p">.</code><code class="nx">hash</code><code class="p">(</code><code class="nx">newPassword</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">err</code><code class="p">,</code> <code class="nx">hash</code><code class="p">)</code> <code class="p">{</code>
      <code class="k">if</code> <code class="p">(</code><code class="nx">err</code><code class="p">)</code> <code class="p">{</code> <code class="k">throw</code> <code class="nx">err</code><code class="p">;</code> <code class="p">}</code>
      <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="s1">'Store the password hash.'</code><code class="p">,</code> <code class="nx">hash</code><code class="p">);</code>
    <code class="p">});</code></pre> 
     <p id="verify"><code class="literal">.verify()</code>:</p> 
     <pre class="programlisting" data-language="javascript" id="var_pw__requir_id2">    <code class="kd">var</code> <code class="nx">pw</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'credential'</code><code class="p">),</code>
      <code class="nx">storedHash</code> <code class="o">=</code> <code class="s1">'{"hash":...'</code><code class="p">,</code> <code class="c1">// truncated to fit on page</code>
      <code class="nx">userInput</code> <code class="o">=</code> <code class="s1">'I have a really great password.'</code><code class="p">;</code>

    <code class="nx">pw</code><code class="p">.</code><code class="nx">verify</code><code class="p">(</code><code class="nx">storedHash</code><code class="p">,</code> <code class="nx">userInput</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">err</code><code class="p">,</code> <code class="nx">isValid</code><code class="p">)</code> <code class="p">{</code>
      <code class="kd">var</code> <code class="nx">msg</code><code class="p">;</code>
      <code class="k">if</code> <code class="p">(</code><code class="nx">err</code><code class="p">)</code> <code class="p">{</code> <code class="k">throw</code> <code class="nx">err</code><code class="p">;</code> <code class="p">}</code>
      <code class="nx">msg</code> <code class="o">=</code> <code class="nx">isValid</code> <code class="o">?</code> <code class="s1">'Passwords match!'</code> <code class="o">:</code> <code class="s1">'Wrong password.'</code><code class="p">;</code>
      <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="nx">msg</code><code class="p">);</code>
    <code class="p">});</code></pre> 
     <p id="you_can_wrap_th">You can wrap this to supply a simple <code class="literal">verify()</code> function that takes a username and password, and then calls a callback:</p> 
     <pre class="programlisting" data-language="javascript" id="var_users__req">    <code class="kd">var</code> <code class="nx">users</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'./users.js'</code><code class="p">);</code>

    <code class="kd">var</code> <code class="nx">verify</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">verify</code><code class="p">(</code><code class="nx">username</code><code class="p">,</code> <code class="nx">password</code><code class="p">,</code> <code class="nx">verified</code><code class="p">)</code> <code class="p">{</code>
      <code class="kd">var</code> <code class="nx">user</code> <code class="o">=</code> <code class="nx">users</code><code class="p">.</code><code class="nx">findOne</code><code class="p">(</code><code class="nx">username</code><code class="p">);</code>
      <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">user</code><code class="p">)</code> <code class="p">{</code>
        <code class="c1">// No unexpected error, no user, reason for failure</code>
        <code class="k">return</code> <code class="nx">verified</code><code class="p">(</code><code class="kc">null</code><code class="p">,</code> <code class="kc">false</code><code class="p">,</code> <code class="p">{</code>
          <code class="nx">message</code><code class="o">:</code> <code class="s1">'User not found'</code>
        <code class="p">});</code>
      <code class="p">}</code>

      <code class="nx">pw</code><code class="p">.</code><code class="nx">verify</code><code class="p">(</code><code class="nx">user</code><code class="p">.</code><code class="nx">hash</code><code class="p">,</code> <code class="nx">password</code><code class="p">,</code> <code class="kd">function</code> <code class="p">(</code><code class="nx">isValid</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">isValid</code><code class="p">)</code> <code class="p">{</code>
          <code class="c1">// No unexpected error, no user, reason for failure</code>
          <code class="k">return</code> <code class="nx">verified</code><code class="p">(</code><code class="kc">null</code><code class="p">,</code> <code class="kc">false</code><code class="p">,</code> <code class="p">{</code>
            <code class="nx">message</code><code class="o">:</code> <code class="s1">'Incorrect password.'</code>
          <code class="p">});</code>
        <code class="p">}</code>
        <code class="k">return</code> <code class="nx">verified</code><code class="p">(</code><code class="kc">null</code><code class="p">,</code> <code class="nx">user</code><code class="p">);</code>
      <code class="p">});</code>
    <code class="p">};</code></pre> 
     <p id="you_can_then_pl">You can then plug that into something <a id="id455896" class="indexterm"></a><a id="id455906" class="indexterm"></a>like <code class="literal">passport-local</code>:</p> 
     <pre class="programlisting" data-language="javascript" id="var_express__r_id3">    <code class="kd">var</code> <code class="nx">express</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'express'</code><code class="p">),</code>
      <code class="nx">passport</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'passport'</code><code class="p">),</code>
      <code class="nx">LocalStrategy</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'passport-local'</code><code class="p">),</code>
      <code class="nx">verify</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'./lib/password-auth.js'</code><code class="p">),</code>
      <code class="nx">app</code> <code class="o">=</code> <code class="nx">express</code><code class="p">();</code>

    <code class="nx">passport</code><code class="p">.</code><code class="nx">use</code><code class="p">(</code> <code class="k">new</code> <code class="nx">LocalStrategy</code><code class="p">(</code><code class="nx">verify</code><code class="p">)</code> <code class="p">);</code>

    <code class="nx">app</code><code class="p">.</code><code class="nx">post</code><code class="p">(</code><code class="s1">'/login'</code><code class="p">,</code> 
      <code class="nx">passport</code><code class="p">.</code><code class="nx">authenticate</code><code class="p">(</code><code class="s1">'local'</code><code class="p">,</code> <code class="p">{</code> <code class="nx">failureRedirect</code><code class="o">:</code> <code class="s1">'/login'</code> <code class="p">}),</code>
      <code class="kd">function</code><code class="p">(</code><code class="nx">req</code><code class="p">,</code> <code class="nx">res</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">res</code><code class="p">.</code><code class="nx">redirect</code><code class="p">(</code><code class="s1">'/'</code><code class="p">);</code>
      <code class="p">});</code>

    <code class="nx">app</code><code class="p">.</code><code class="nx">listen</code><code class="p">(</code><code class="mi">3000</code><code class="p">);</code></pre> 
    </div> 
    <div class="sect2" id="multi-factor-authentication"> 
     <div class="titlepage">
      <div>
       <div>
        <h3 class="title">Multifactor Authentication</h3>
       </div>
      </div>
     </div> 
     <p id="because_of_the__id1">Because of the threat <a id="au6.1.3" class="indexterm"></a><a id="id456316" class="indexterm"></a>of stolen passwords, any policy that relies solely on password protection is unsafe. In order to protect your system from intruders, another line of defense is necessary.</p> 
     <p id="multifactor_aut_id1">Multifactor authentication is an authentication strategy that requires the user to present authentication proof from two or more authentication factors: the knowledge factor (something the user knows, like a password); the possession factor (something the user has, like a mobile phone); and the inherence factor (something the user is, like a <span class="keep-together">fingerprint</span>).</p> 
     <div class="sect3" id="knowledge-factor"> 
      <div class="titlepage">
       <div>
        <div>
         <h4 class="title">Knowledge factor</h4>
        </div>
       </div>
      </div> 
      <p id="a_common_second">A common secondary <a id="id456355" class="indexterm"></a><a id="id456363" class="indexterm"></a>security mechanism that was widely implemented in the financial industry just a few years ago are "security questions." Pairing a password with security questions does not qualify as multifactor authentication, though, because you need the user to pass challenges from two or more authentication factors. Using multiple knowledge factor challenges does not prevent a determined snoop from breaking in.</p> 
      <p id="multifactor_aut_id2">Multifactor authentication means that an attacker would have to be both a snoop and a thief, for instance.</p> 
     </div> 
     <div class="sect3" id="possession-factor"> 
      <div class="titlepage">
       <div>
        <div>
         <h4 class="title">Possession factor</h4>
        </div>
       </div>
      </div> 
      <p id="for_corporate_a">For corporate and <a id="id456394" class="indexterm"></a><a id="id456402" class="indexterm"></a><a id="id456408" class="indexterm"></a>government intranets, it's common to require some type of physical token or key to grant access to systems. Mechanisms include USB dongles and flash card keys.</p> 
      <p id="otps_onetime_">OTPs (one-time passwords)<a id="id456422" class="indexterm"></a><a id="id456428" class="indexterm"></a> are short-lived passwords that work only for a single use. They satisfy the possession factor because they're usually generated by a dedicated piece of hardware, or by an app on the user's mobile phone. The device is paired with the service that is being authenticated against in a way that cannot be easily spoofed by impostors.</p> 
      <p id="google_released">Google released a product called Google Authenticator<a id="id456444" class="indexterm"></a> that generates one time passwords for mobile devices. There is a node <a id="id456452" class="indexterm"></a>module called <code class="literal">speakeasy</code> that lets you take advantage of Google authenticator to authenticate users using the possession factor.</p> 
      <p id="install_speakea">Install Speakeasy:</p> 
      <pre class="programlisting" id="npm_install__id3">    $ npm install --save speakeasy</pre> 
      <p id="then_take_it_fo">Then take it for a spin:</p> 
      <pre class="programlisting" data-language="javascript" id="var_speakeasy_">    <code class="kd">var</code> <code class="nx">speakeasy</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'speakeasy'</code><code class="p">);</code>

    <code class="c1">// Returns a key object with ascii, hex, base32, and</code>
    <code class="c1">// QR code representations (the QR code value is a</code>
    <code class="c1">// Google image URL):</code>
    <code class="kd">var</code> <code class="nx">key</code> <code class="o">=</code> <code class="nx">speakeasy</code><code class="p">.</code><code class="nx">generate_key</code><code class="p">({</code>
      <code class="nx">length</code><code class="o">:</code> <code class="mi">20</code><code class="p">,</code>
      <code class="nx">google_auth_qr</code><code class="o">:</code> <code class="kc">true</code>
    <code class="p">});</code>

    <code class="c1">// This should match the number on your phone:</code>
    <code class="nx">speakeasy</code><code class="p">.</code><code class="nx">time</code><code class="p">({</code><code class="nx">key</code><code class="o">:</code> <code class="nx">key</code><code class="p">.</code><code class="nx">base32</code><code class="p">,</code> <code class="nx">encoding</code><code class="o">:</code> <code class="s1">'base32'</code><code class="p">});</code></pre> 
      <p id="authy_is_a_auth">Authy is a <a id="id456694" class="indexterm"></a>product similar to Google Authenticator that recently announced support for Bluetooth pairing. If your phone is near your computer, the Authy desktop agent will detect your phone's key over Bluetooth so that you won't have to type the token manually.</p> 
     </div> 
     <div class="sect3" id="inherence-factor"> 
      <div class="titlepage">
       <div>
        <div>
         <h4 class="title">Inherence factor</h4>
        </div>
       </div>
      </div> 
      <p id="the_inherence_f">The inherence factor is <a id="id456717" class="indexterm"></a><a id="id456725" class="indexterm"></a>something the user is—in other words, some information that discloses some physical property of the user. Common examples include <a id="id456735" class="indexterm"></a><a id="id456740" class="indexterm"></a>fingerprint and retina scanners. While technology does exist to scan fingerprints, retinas, palm prints, and more, it's possible to defeat security devices such as fingerprint scanners if an attacker can convince the scanner that a printed image is actually the user's fingerprint. Printed images have been used to defeat <a id="id456750" class="indexterm"></a>facial recognition and fingerprint scanners in cell phone devices.</p> 
      <p id="because_of_the__id2">Because of the risk of compromise and a user's inability to change her own fingerprints, security experts like to say that the inherence factor is equivalent to a username, not a password. In other words, inherence can be used to make user recognition more convenient but should not be used to prove the user's identity.</p> 
      <p id="the_closest_i_h">The closest I have seen to a security-enhancing inherence factor is a process known as <a id="id456773" class="indexterm"></a>geofencing. Geofencing allows you to use location APIs to determine what part of the world the current user is in. Because users travel, geofencing should be used as a warning mechanism. For example, it could be used to trigger an additional authentication using another factor. It's also worth mentioning that geofencing can be defeated by a simple web-proxy mechanism. It may discourage a casual or unsophisticated attacker, but a determined attacker may eventually defeat it.</p> 
      <p id="you_can_use_the_id2">You can use the new <a id="id456790" class="indexterm"></a><a id="id456796" class="indexterm"></a>HTML Geolocation API to establish compliance the location of the user, provided that the user grants permission. The following function will return the user's geolocation in latitude and longitude:</p> 
      <pre class="programlisting" data-language="javascript" id="var_getlocation_id1">    <code class="kd">var</code> <code class="nx">getLocation</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">getLocation</code><code class="p">(</code><code class="nx">cb</code><code class="p">)</code> <code class="p">{</code>
      <code class="k">if</code> <code class="p">(</code><code class="o">!</code><code class="nx">navigator</code><code class="p">.</code><code class="nx">geolocation</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">return</code> <code class="nx">cb</code><code class="p">(</code><code class="k">new</code> <code class="nb">Error</code><code class="p">(</code><code class="s1">'Geolocation is not supported by this browser.'</code><code class="p">));</code>
      <code class="p">}</code>
      <code class="nx">navigator</code><code class="p">.</code><code class="nx">geolocation</code><code class="p">.</code><code class="nx">getCurrentPosition</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">position</code><code class="p">)</code> <code class="p">{</code>
        <code class="nx">cb</code><code class="p">(</code><code class="kc">null</code><code class="p">,</code> <code class="nx">position</code><code class="p">);</code>
      <code class="p">});</code>
    <code class="p">};</code>
    
    <code class="nx">getLocation</code><code class="p">(</code><code class="kd">function</code> <code class="p">(</code><code class="nx">err</code><code class="p">,</code> <code class="nx">position</code><code class="p">)</code> <code class="p">{</code>
      <code class="k">if</code> <code class="p">(</code><code class="nx">err</code><code class="p">)</code> <code class="p">{</code>
        <code class="k">return</code> <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="nx">err</code><code class="p">);</code>
      <code class="p">}</code>
      <code class="nx">console</code><code class="p">.</code><code class="nx">log</code><code class="p">(</code><code class="nx">position</code><code class="p">);</code>
    <code class="p">});</code></pre> 
      <p id="to_use_the_data">To use the data for geofencing, simply save users’ preferred locations along with their profile, and ask them to authorize any new locations that they log in from. The size of the geofence perimeter should depend on your particular security needs. For example, a bank may chose a 5-mile radius, whereas a discussion forum may select a 50-mile r<a id="id457175" class="indexterm"></a>adius.</p> 
     </div> 
    </div> 
    <div class="sect2" id="federated-and-delegated-authentication"> 
     <div class="titlepage">
      <div>
       <div>
        <h3 class="title">Federated and Delegated Authentication</h3>
       </div>
      </div>
     </div> 
     <p id="federated_authe">Federated <a id="au6.1.4" class="indexterm"></a><a id="fe6.1.4" class="indexterm"></a>authentication is a mechanism that allows users to share their identity across multiple services with a <a id="id457229" class="indexterm"></a><a id="id457235" class="indexterm"></a>single-sign-on (SSO) solution. <a id="id457242" class="indexterm"></a>OpenID is a good example of a federated SSO solution, but it hasn't been widely adopted by users due to usability concerns. That could change soon with OpenID Connect, an identity solution built on top of OAuth 2.0 (similar to Facebook Connect).</p> 
     <div class="sect3" id="mozilla-persona"> 
      <div class="titlepage">
       <div>
        <div>
         <h4 class="title">Mozilla Persona</h4>
        </div>
       </div>
      </div> 
      <p id="mozillas_perso">Mozilla's <a class="ulink" href="http://www.mozilla.org/en-US/persona/" target="_top">Persona</a> is an open source <a id="id457271" class="indexterm"></a><a id="id457276" class="indexterm"></a><a id="id457282" class="indexterm"></a>federated identity system that uses email addresses and short-lived tokens for identification. Persona allows you to add login and logout buttons to your website, and <code class="literal">watch()</code> for login and logout actions. Persona has identity provider bridge support for both Yahoo! and Gmail. Sadly, Persona has failed to catch fire, and Mozilla announced in March 2014 that it would no longer actively develop the service.</p> 
     </div> 
     <div class="sect3" id="webid"> 
      <div class="titlepage">
       <div>
        <div>
         <h4 class="title">WebID</h4>
        </div>
       </div>
      </div> 
      <p id="webid_is_a_wc">WebID is a W3C-backed <a id="id457314" class="indexterm"></a>federated identity system that works in all current browsers built on top of existing web standards. Unfortunately, it currently relies on certificate selection UIs that are built into browsers—parts of the browser user interface that have long been neglected and are rather ugly and cumbersome for users. Several years after the first WebID specification was published, the UIs have not improved much.</p> 
      <p id="the_primary_adv">The primary advantages of WebID are that it works over TLS and does not rely on email to prove identity. That said, no website can afford to rely on an authentication mechanism that is unfriendly to its user community.</p> 
      <p id="for_this_reason">For this reason, I can't recommend WebID for production use today, and neither does the W3C. At the time of this writing, it has not yet evolved into an official working group, and it is probably years from reaching an official recommendation state, if that ever <a id="id457345" class="indexterm"></a><a id="id457355" class="indexterm"></a>happens.</p> 
     </div> 
     <div class="sect3" id="delegated-authentication"> 
      <div class="titlepage">
       <div>
        <div>
         <h4 class="title">Delegated authentication</h4>
        </div>
       </div>
      </div> 
      <p id="delegated_authe">Delegated authentication<a id="de6.1.4.3" class="indexterm"></a><a id="au6.1.4.3" class="indexterm"></a> allows you to delegate authentication to a specific third-party provider (such as Facebook or Twitter). Unlike federated authentication, delegated authentication systems are not distributed, meaning that there is a single, centralized provider for identity. Your site can implement multiple delegate providers, of course. For example, you can give your users the choice to log in with <a id="id457411" class="indexterm"></a>Twitter or Facebook, but from the perspective of end users, they're presented with a choice of providers, and they are forced to remember which one they use to log in to your site (unless you detect that the accounts belong to the same user and link the accounts).</p> 
      <p id="a_single_federa">A single federated login mechanism tends to present a better user experience than offering users a choice of mechanisms because the user doesn't have to remember which mechanism they chose. For example, if your site implements Persona, all the user has to remember is his email address.</p> 
      <p id="facebook_login_">Facebook login <a id="id457437" class="indexterm"></a>is the most successful delegated authentication system as of this writing, by virtue of the size of its user base. It has a huge market saturation, and most users will be familiar with both the branding and the Facebook login and authorization flow.</p> 
      <p id="to_enable_faceb">To enable Facebook login on your site, first, create a new Facebook app, and then retrieve the app ID and app secret. To create a Facebook app, visit the <a class="ulink" href="https://developers.facebook.com/apps" target="_top">Facebook Apps page</a>.</p> 
      <p id="facebook_suppli">Facebook supplies a JavaScript SDK to help you interact with their API. Here's the code you need to work with it:</p> 
      <pre class="programlisting" data-language="javascript" id="div_idfbroo">    <code class="o">&lt;</code><code class="nx">div</code> <code class="nx">id</code><code class="o">=</code><code class="s2">"fb-root"</code><code class="o">&gt;&lt;</code><code class="err">/div&gt;</code>
    <code class="o">&lt;</code><code class="nx">script</code><code class="o">&gt;</code>
      <code class="nb">window</code><code class="p">.</code><code class="nx">fbAsyncInit</code> <code class="o">=</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
        <code class="nx">FB</code><code class="p">.</code><code class="nx">init</code><code class="p">({</code>
          <code class="nx">appId</code>      <code class="o">:</code> <code class="s1">'YOUR_APP_ID'</code><code class="p">,</code> <code class="c1">// App ID</code>

          <code class="c1">// Channel File</code>
          <code class="nx">channelUrl</code> <code class="o">:</code> <code class="s1">'//WWW.YOUR_DOMAIN.COM/channel.html'</code><code class="p">,</code> 
          <code class="nx">status</code>     <code class="o">:</code> <code class="kc">true</code><code class="p">,</code> <code class="c1">// check login status</code>
          <code class="c1">// enable cookies to allow the server to access </code>
          <code class="c1">// the session</code>
          <code class="nx">cookie</code>     <code class="o">:</code> <code class="kc">true</code><code class="p">,</code> 
          <code class="nx">xfbml</code>      <code class="o">:</code> <code class="kc">true</code>  <code class="c1">// parse XFBML</code>
        <code class="p">});</code>

        <code class="c1">// Additional init code here</code>

      <code class="p">};</code>

      <code class="c1">// Load the SDK asynchronously</code>
      <code class="p">(</code><code class="kd">function</code><code class="p">(</code><code class="nx">d</code><code class="p">){</code>
         <code class="kd">var</code> <code class="nx">js</code><code class="p">,</code>
           <code class="nx">id</code> <code class="o">=</code> <code class="s1">'facebook-jssdk'</code><code class="p">,</code>
           <code class="nx">ref</code> <code class="o">=</code> <code class="nx">d</code><code class="p">.</code><code class="nx">getElementsByTagName</code><code class="p">(</code><code class="s1">'script'</code><code class="p">)[</code><code class="mi">0</code><code class="p">];</code>

         <code class="k">if</code> <code class="p">(</code><code class="nx">d</code><code class="p">.</code><code class="nx">getElementById</code><code class="p">(</code><code class="nx">id</code><code class="p">))</code> <code class="p">{</code><code class="k">return</code><code class="p">;}</code>
         <code class="nx">js</code> <code class="o">=</code> <code class="nx">d</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="s1">'script'</code><code class="p">);</code>
         <code class="nx">js</code><code class="p">.</code><code class="nx">id</code> <code class="o">=</code> <code class="nx">id</code><code class="p">;</code>
         <code class="nx">js</code><code class="p">.</code><code class="nx">async</code> <code class="o">=</code> <code class="kc">true</code><code class="p">;</code>
         <code class="nx">js</code><code class="p">.</code><code class="nx">src</code> <code class="o">=</code> <code class="s2">"//connect.facebook.net/en_US/all.js"</code><code class="p">;</code>
         <code class="nx">ref</code><code class="p">.</code><code class="nx">parentNode</code><code class="p">.</code><code class="nx">insertBefore</code><code class="p">(</code><code class="nx">js</code><code class="p">,</code> <code class="nx">ref</code><code class="p">);</code>
       <code class="p">}(</code><code class="nb">document</code><code class="p">));</code>
    <code class="o">&lt;</code><code class="err">/script&gt;</code></pre> 
      <p id="the_channel_fil">The channel file is a single-line file that addresses cross-domain issues in some browsers. It only needs to be one line:</p> 
      <pre class="programlisting" data-language="html" id="script_src">    <code class="nt">&lt;script </code><code class="na">src=</code><code class="s">"//connect.facebook.net/en_US/all.js"</code><code class="nt">&gt;&lt;/script&gt;</code></pre> 
      <p id="the_facebook_ap">The Facebook API is notorious for changing. Visit <a class="ulink" href="http://bit.ly/1pFLFWv" target="_top">Facebook's “Getting Started With Facebook Login” webpage</a> for the latest <a id="id458123" class="indexterm"></a><a id="id458134" class="indexterm"></a><a id="id458145" class="indexterm"></a><a id="id458156" class="indexterm"></a>details.</p> 
     </div> 
    </div> 
   </div> 
   <div class="sect1" data-original-filename="ch06.xml" id="authorization"> 
    <div class="titlepage">
     <div>
      <div>
       <h2 class="title">Authorization</h2>
      </div>
     </div>
    </div> 
    <p id="authorization_a">Authorization <a id="ac6.2" class="indexterm"></a><a id="se6.2" class="indexterm"></a><a id="id458212" class="indexterm"></a>ensures that agents (users or applications) have access to only the resources they are allowed to access according to some attributes of the agent; resource policies, such as <a id="id458223" class="indexterm"></a><a id="id458228" class="indexterm"></a>ACLs (access control lists); or both, as in <a id="id458236" class="indexterm"></a><a id="id458242" class="indexterm"></a>MAC (mandatory access control) models.</p> 
    <p id="an_acl_is_essen">An ACL is essentially a table that lists each user with access to a particular resource. ACLs can be stored at the system level, listing each user and what she can do or see within the system, or they can be stored at the resource level.</p> 
    <p id="in_a_mac_system">In a MAC system, each resource has an associated minimum trust level, and each user has an associated trust level. If the user is not trusted enough, access to the resource is denied.</p> 
    <p id="rolebased_acce">Role-based access controls (RBAC) <a id="id458271" class="indexterm"></a><a id="id458277" class="indexterm"></a>allow you to authorize users with specific roles. A user can have any number of roles, and a user is granted privileges based on her role. For example, a blog might have a small number of administrators who can change anything, a larger set of editors who can edit and publish posts, an even larger number of contributors who can contribute blog posts, and an open membership whereby anybody can register to post comments.</p> 
    <p id="it_is_possible_">It is possible to implement MAC using role-based access controls, and it is also possible to combine the use of RBAC and ACLs.</p> 
    <p id="protecting_expr">Protecting express resources with an authorization strategy is easy:</p> 
    <pre class="programlisting" data-language="javascript" id="appputposts">  <code class="nx">app</code><code class="p">.</code><code class="nx">put</code><code class="p">(</code><code class="s1">'/posts/:id'</code><code class="p">,</code> <code class="nx">authorize</code><code class="p">(),</code> <code class="nx">putPost</code><code class="p">);</code></pre> 
    <p id="the_authorize">The <code class="literal">authorize()</code> function returns a middleware function that can check to see whether or not the user has permission to access the requested resource before the route handler has the chance to run. For example, if you want to ensure that the user is logged in, you can use an authorize function that looks like this:</p> 
    <pre class="programlisting" data-language="javascript" id="var_authorize_">  <code class="kd">var</code> <code class="nx">authorize</code> <code class="o">=</code> <code class="kd">function</code> <code class="nx">authorize</code><code class="p">(</code><code class="nx">options</code><code class="p">)</code> <code class="p">{</code>
    <code class="k">return</code> <code class="kd">function</code> <code class="nx">auth</code><code class="p">(</code><code class="nx">req</code><code class="p">,</code> <code class="nx">res</code><code class="p">,</code> <code class="nx">next</code><code class="p">)</code> <code class="p">{</code>
      <code class="k">if</code> <code class="p">(</code><code class="nx">options</code><code class="p">.</code><code class="nx">requiresAuth</code> <code class="o">&amp;&amp;</code>
          <code class="o">!</code><code class="p">(</code><code class="nx">req</code><code class="p">.</code><code class="nx">session</code> <code class="o">&amp;&amp;</code> <code class="nx">req</code><code class="p">.</code><code class="nx">session</code><code class="p">.</code><code class="nx">user</code><code class="p">))</code> <code class="p">{</code>
        <code class="k">return</code> <code class="nx">res</code><code class="p">.</code><code class="nx">send</code><code class="p">(</code><code class="mi">403</code><code class="p">);</code>
      <code class="p">}</code>
      <code class="nx">next</code><code class="p">();</code>
    <code class="p">};</code>
  <code class="p">};</code></pre> 
    <div class="sect2" id="authorizing-applications"> 
     <div class="titlepage">
      <div>
       <div>
        <h3 class="title">Authorizing Applications</h3>
       </div>
      </div>
     </div> 
     <p id="applications_ca">Applications can <a id="id458635" class="indexterm"></a>act as user agents in order to access a user's data from a third-party system or even perform actions on the user's behalf, such as sharing on social networks or posting content. In order for an app to be granted such access, it must first prove that the user has authorized it. Typically that is accomplished by sending a token along with the request.</p> 
     <p id="applications_ga">Applications gain the token using an application authorization grant. The user is directed to the target application and presented with an authorization request. If the user grants the requested permissions, a token is set and delivered to the requesting <span class="keep-together">application</span>.</p> 
     <p id="facebooks_auth">Facebook's authorization is <a id="id458668" class="indexterm"></a>tied to the authentication system (Facebook Login). When a user attempts to log in to your app for the first time with Facebook, he will be presented with an authorization screen which displays the permissions your app asked for (called <code class="literal">scope</code>).</p> 
     <p id="facebook_recomm">Facebook recommends that you ask for as few permissions as possible upfront. Requesting more than four permissions severely impedes the success rate of the authorization grant. Ask for as few as possible for your app to function properly, and then request additional permissions on an as-needed basis.</p> 
     <p id="for_example_in">For example, initially you may only want to request access to the user's email and likes. Later on, let user actions trigger permission requests. That way, the user has context and knowledge of why you need that particular permission. Say the user wants to share a photo from your app on her own timeline. You'll want to check to see if you have been granted that permission, and if you haven't yet, ask for the <code class="literal">publish_actions</code> permission in <a id="id458709" class="indexterm"></a>response to her request.</p> 
     <p id="the_user_is_muc">The user is much more likely to grant permission if you need it to complete an action that she directly requested.</p> 
     <p id="this_principle_">This principle holds true whether you're dealing with Facebook or any other third-party authorization.</p> 
    </div> 
    <div class="sect2" id="oauth-2.0"> 
     <div class="titlepage">
      <div>
       <div>
        <h3 class="title">OAuth 2.0</h3>
       </div>
      </div>
     </div> 
     <p id="oauth__is_an">OAuth 2.0 is an <a id="id458743" class="indexterm"></a><a id="id458751" class="indexterm"></a>open standard for application authorization that allows clients to access resources on behalf of the resource owner. Essentially, it allows you to grant applications limited access to your accounts on third-party services. For example, <a id="id458760" class="indexterm"></a>Facebook, Google Docs, and Dropbox all allow you to access resources on behalf of their users via their OAuth 2.0 based public APIs.</p> 
     <p id="by_way_of_contr">By way of contrast, <a id="id458776" class="indexterm"></a>OpenID provides a means to request the user's identity from a federated ID provider (such as Google). That identity includes details such as the user's name and email address. Google returns proof to the application that the user is who he says he is (the owner of the identity in question).</p> 
     <p id="oauth__on_t">OAuth 2.0, on the other hand, returns a token that grants the app access to a specific set of API resources. Think of it this way: using an authentication system like OpenID is similar to showing your driver's license or passport. Using OAuth 2.0 is like giving the app a temporary key that it can use to access your resources on another site (but only those resources you have explicitly authorized).</p> 
     <p id="oauth__is_a_">OAuth 2.0 is a framework that exposes several authorization grant flows. There are specific flows for desktop apps, web apps, native mobile apps, and other devices.</p> 
     <p id="a_basic_oauth_">A basic OAuth 2.0 flow goes something like this:</p> 
     <div class="orderedlist" id="client_requests_id1">
      <ol class="orderedlist" type="1"> 
       <li class="listitem"><p id="client_requests_id2">Client requests permissions from the user.</p></li> 
       <li class="listitem"><p id="the_user_is_dir">The user is directed to the third-party service that provides those permissions, where the user is authenticated and the request is granted or rejected.</p></li> 
       <li class="listitem"><p id="the_grant_is_pa">The grant is passed back to the requesting client.</p></li> 
       <li class="listitem"><p id="the_client_exch">The client exchanges the grant for an access token.</p></li> 
       <li class="listitem"><p id="in_subsequent_c">In subsequent calls, the client provides the access token in order to prove that she has permission to access the requested resources.</p></li> 
       <li class="listitem"><p id="optionally_the">Optionally, the service can implement a token exchange, whereby a client can exchange an expiring token for a fresh token.</p></li> 
      </ol>
     </div> 
     <p id="if_youd_like_y">If you'd like your app to be an OAuth 2.0 provider, check out <a class="ulink" href="https://github.com/jaredhanson/oauth2orize" target="_top">oauth2orize</a>.</p> 
     <p id="to_verify_issue">To verify issued bearer tokens, you'll also need a strategy to authenticate bearer tokens. Take a look at <a class="ulink" href="https://github.com/jaredhanson/passport-http-bearer" target="_top">passport-http-bearer</a>.</p> 
     <p id="oauth__has_b">OAuth 2.0 has been the subject of a lot of security criticism. Security experts cite the large attack surface and the difficulty of correct implementation as reasons to avoid using the specification as-is. However, Facebook and other providers offer bounties for users who are able to uncover security vulnerabilities in their implementations, and those bounties have led to vulnerability discoveries and patches.</p> 
     <p id="despite_securit">Despite security concerns, OAuth 2.0 is currently the dominant form of third-party API authorization. It has the best tooling and community <a id="id458909" class="indexterm"></a><a id="id458919" class="indexterm"></a>support.</p> 
    </div> 
   </div> 
   <div class="sect1" data-original-filename="ch06.xml" id="id_d1e34468"> 
    <div class="titlepage">
     <div>
      <div>
       <h2 class="title">Conclusion</h2>
      </div>
     </div>
    </div> 
    <p id="security_is_an_">Security is an <a id="id458946" class="indexterm"></a><a id="id458955" class="indexterm"></a>essential component of your application, and it's very important to get it right. Here are some keys to remember:</p> 
    <div class="itemizedlist" id="use_a_good_auth_id1">
     <ul class="itemizedlist"> 
      <li class="listitem"><p id="use_a_good_auth_id2">Use a good authentication library, such as Credential.</p></li> 
      <li class="listitem"><p id="passwords_alone">Passwords alone are never secure. Allow multifactor authentication for your app.</p></li> 
      <li class="listitem"><p id="http_uses_plain">HTTP uses plain-text communication. In order to protect user passwords and data, enable HTTPS site-wide.</p></li> 
      <li class="listitem"><p id="as_a_general_ru">As a general rule, it's a good idea to use an <code class="code">authorize()</code> middleware for all of your routes.</p></li> 
      <li class="listitem"><p id="enable_oauth_">Enable OAuth 2.0 support to discourage third-party application vendors from requesting your user's login credentials.</p></li> 
     </ul>
    </div> 
   </div>
  </section>
  <footer>
   <div class="navfooter"> 
    <hr> 
    <table style="width: 100%; "> 
     <tbody>
      <tr> 
       <td style="width: 40%; text-align: left; "> <a accesskey="p" href="ch05.html">Prev</a>&nbsp;</td> 
       <td style="width: 20%; text-align: center; ">&nbsp;</td> 
       <td style="width: 40%; text-align: right; ">&nbsp;<a accesskey="n" href="ch07.html">Next</a> </td> 
      </tr> 
      <tr> 
       <td style="width: 40%; text-align: left; vertical-align: top; ">Chapter&nbsp;5.&nbsp;Separation of Concerns&nbsp;</td> 
       <td style="width: 20%; text-align: center; "><a accesskey="h" href="index.html">Home</a></td> 
       <td style="width: 40%; text-align: right; vertical-align: top; ">&nbsp;Chapter&nbsp;7.&nbsp;Logging</td> 
      </tr> 
     </tbody>
    </table> 
   </div>
  </footer> 
  <div class="extra-footer"> 
   <p>© 2013, O’Reilly Media, Inc.</p> 
   <ul> 
    <li><a href="http://oreilly.com/terms/">Terms of Service</a></li> 
    <li><a href="http://oreilly.com/oreilly/privacy.csp">Privacy Policy</a></li> 
    <li>Interested in <a href="mailto:scordesse@oreilly.com">sponsoring content?</a></li> 
   </ul> 
  </div> 
  <script type="text/javascript">if (!NREUMQ.f) { NREUMQ.f=function() {
NREUMQ.push(["load",new Date().getTime()]);
var e=document.createElement("script");
e.type="text/javascript";
e.src=(("http:"===document.location.protocol)?"http:":"https:") + "//" +
  "js-agent.newrelic.com/nr-100.js";
document.body.appendChild(e);
if(NREUMQ.a)NREUMQ.a();
};
NREUMQ.a=window.onload;window.onload=NREUMQ.f;
};
NREUMQ.push(["nrfj","bam.nr-data.net","3e361aebcf","2194180","IApbRUBZXg1WEEoHDAwORh5aQl8N",9,62,new Date().getTime(),"","","","",""]);</script> 
 </body>
</html>