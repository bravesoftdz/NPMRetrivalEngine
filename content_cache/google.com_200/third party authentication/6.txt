<!doctype html>
<html lang="en-us">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
  <meta name="viewport" content="width=device-width, minimum-scale=0.75, maximum-scale=1"> 
  <meta name="format-detection" content="telephone=no"> 
  <link rel="shortcut icon" href="/images/favicon.png" type="image/png"> 
  <link rel="logo" type="image/svg" href="http://www.sitepen.com/images/sitepen.svg"> 
  <link rel="stylesheet" href="/css/main.css?v=1504039164" media="screen, print"> 
  <script>var dojoConfig = { async: 1, selectorEngine: 'lite' }; 'ontouchstart' in document && (document.documentElement.className += ' has-touch');</script> 
  <link rel="stylesheet" type="text/css" href="/css/syntaxHighlighter.css"> 
  <title>  Protected Cross-Domain Authentication with JavaScript - Blog | SitePen</title> 
  <link rel="pingback" href="https://www.sitepen.com/blog/xmlrpc.php"> 
  <!-- BEGIN Metadata added by the Add-Meta-Tags WordPress plugin --> 
  <meta name="description" content="Google and Yahoo have JavaScript APIs that let you perform searches. Wikipedia has a JavaScript API that lets you grab data from its pages. These APIs can be accessed cross-domain with a transport method known as JSONP."> 
  <meta name="keywords" content="ajax, dojo, javascript, news, cross-domain, window.name, x-domain"> 
  <meta property="og:site_name" content="SitePen Blog"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="Protected Cross-Domain Authentication with JavaScript"> 
  <meta property="og:url" content="https://www.sitepen.com/blog/2008/07/30/protected-cross-domain-authentication-with-javascript/"> 
  <meta property="og:description" content="Google and Yahoo have JavaScript APIs that let you perform searches. Wikipedia has a JavaScript API that lets you grab data from its pages. These APIs can be accessed cross-domain with a transport method known as JSONP."> 
  <meta property="og:locale" content="en_US"> 
  <meta property="og:updated_time" content="2013-04-15T09:06:55+00:00"> 
  <meta property="og:image" content="http://www.sitepen.com/images/og/sitepen.png"> 
  <meta property="og:image:secure_url" content="https://www.sitepen.com/images/og/sitepen.png"> 
  <meta property="og:image:type" content="image/png"> 
  <meta property="article:published_time" content="2008-07-30T00:01:48+00:00"> 
  <meta property="article:modified_time" content="2013-04-15T09:06:55+00:00"> 
  <meta property="article:author" content="https://www.sitepen.com/blog/author/nroberts/"> 
  <meta property="article:publisher" content="https://www.facebook.com/SitePen"> 
  <meta property="article:section" content="ajax"> 
  <meta property="article:section" content="Dojo"> 
  <meta property="article:section" content="JavaScript"> 
  <meta property="article:section" content="News"> 
  <meta property="article:tag" content="ajax"> 
  <meta property="article:tag" content="dojo"> 
  <meta property="article:tag" content="javascript"> 
  <meta property="article:tag" content="news"> 
  <meta property="article:tag" content="cross-domain"> 
  <meta property="article:tag" content="window.name"> 
  <meta property="article:tag" content="x-domain"> 
  <!-- END Metadata added by the Add-Meta-Tags WordPress plugin --> 
  <link rel="dns-prefetch" href="//s.w.org"> 
  <link rel="alternate" type="application/rss+xml" title="SitePen Blog » Protected Cross-Domain Authentication with JavaScript Comments Feed" href="https://www.sitepen.com/blog/2008/07/30/protected-cross-domain-authentication-with-javascript/feed/"> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.sitepen.com\/blog\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.8"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,56826,8203,55356,56819),0,0),c=j.toDataURL(),b===c&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55358,56794,8205,9794,65039),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55358,56794,8203,9794,65039),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="stylesheet" id="avatar-manager-css" href="https://www.sitepen.com/blog/wp-content/plugins/avatar-manager/assets/css/avatar-manager.min.css?ver=1.2.1" type="text/css" media="all"> 
  <link rel="stylesheet" id="light-style-css" href="https://www.sitepen.com/blog/wp-content/plugins/organize-series/orgSeriesLightTheme.css?ver=4.8" type="text/css" media="all"> 
  <script type="text/javascript" src="https://www.sitepen.com/blog/wp-includes/js/jquery/jquery.js?ver=1.12.4"></script> 
  <script type="text/javascript" src="https://www.sitepen.com/blog/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1"></script> 
  <script type="text/javascript" src="https://www.sitepen.com/blog/wp-content/plugins/avatar-manager/assets/js/avatar-manager.min.js?ver=1.2.1"></script> 
  <link rel="https://api.w.org/" href="https://www.sitepen.com/blog/wp-json/"> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.sitepen.com/blog/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.sitepen.com/blog/wp-includes/wlwmanifest.xml"> 
  <link rel="prev" title="Interview on Dojo on Ajax, Comet, Bayeux, RIAs and the Dojo Toolbox" href="https://www.sitepen.com/blog/2008/07/23/interview-on-dojo-on-ajax-comet-bayeux-rias-and-the-dojo-toolbox/"> 
  <link rel="next" title="Cross-Site XHR Plugin Registry" href="https://www.sitepen.com/blog/2008/07/31/cross-site-xhr-plugin-registry/"> 
  <meta name="generator" content="WordPress 4.8"> 
  <link rel="canonical" href="https://www.sitepen.com/blog/2008/07/30/protected-cross-domain-authentication-with-javascript/"> 
  <link rel="shortlink" href="https://www.sitepen.com/blog/?p=437"> 
  <link rel="alternate" type="application/json+oembed" href="https://www.sitepen.com/blog/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.sitepen.com%2Fblog%2F2008%2F07%2F30%2Fprotected-cross-domain-authentication-with-javascript%2F"> 
  <link rel="alternate" type="text/xml+oembed" href="https://www.sitepen.com/blog/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.sitepen.com%2Fblog%2F2008%2F07%2F30%2Fprotected-cross-domain-authentication-with-javascript%2F&amp;format=xml"> 
  <script type="text/javascript"><!--
function powerpress_pinw(pinw_url){window.open(pinw_url, 'PowerPressPlayer','toolbar=0,status=0,resizable=1,width=460,height=320');	return false;}
//-->
</script> 
  <style type="text/css" id="syntaxhighlighteranchor"></style> 
  <!-- Start of Google Analytics Code --> 
  <script async>
		(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
			(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
			m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

		/* global ga */
		ga('create', 'UA-3242977-2', 'auto');
		ga('send', 'pageview');
	</script> 
  <!-- End of Google Analytics Code --> 
 </head> 
 <body class="page-blog"> 
  <header class="site-header"> 
   <div class="container"> 
    <nav class="navbar is-transparent"> 
     <div class="navbar-brand"> 
      <a class="navbar-item siteLogo" href="/"> 
       <svg width="117" height="31" xmlns="http://www.w3.org/2000/svg" role="img" aria-labelledby="logo-title"> 
        <title id="logo-title">Sitepen Logo</title> 
        <g fill="none" fill-rule="evenodd"> 
         <g fill="#fff" class="logo"> 
          <path d="M18 11.4l-5.6.6L6 18.4c-1.2 1.2-2.6.7-2.4 1l6.2-.5 6.7-6.8c.5-.4 1-.7 1.6-.8z" opacity=".4" /> 
          <path d="M14.5 1L1 14.4C-.4 15.8-.4 17.8 1 19 2 20.4 4 20.4 5.4 19L19 5.6c1.3-1.3 1.3-3.3 0-4.6C18-.4 16-.4 14.6 1zM3 25.5c-1.3 1.3-1.3 3.3 0 4.6C4 31.4 6 31.4 7.4 30L21 16.6c1.3-1.3 1.3-3.3 0-4.6-1.2-1.3-3.2-1.3-4.5 0L3 25.4z" /> 
         </g> 
         <g fill="#fff" class="logoType"> 
          <path d="M37 23c1 .5 2.3 1 3.8 1 3.3 0 5-1.7 5-4 0-2-1-3.2-3.4-4-2-.8-2.7-1.3-2.7-2.4 0-1 .8-2 2.3-2 1.4 0 2.3.6 3 1l.4-1.8c-.7-.5-2-.8-3.3-.8-3 0-4.6 1.7-4.6 4 0 1.5 1 2.8 3.6 3.7 2 .7 2.6 1.3 2.6 2.5 0 1-1 2-2.7 2-1.4 0-2.7-.5-3.4-1L37 23zM50.6 24V10.5h-2.3V24h2.3zm-1-19c-1 0-1.6.7-1.6 1.5S48.6 8 49.4 8c1 0 1.5-.7 1.5-1.5 0-1-.7-1.5-1.5-1.5zM55 7.7v2.6h-2V12h2v7.4c0 1.8.4 3 1 3.6.6.6 1.5 1 2.7 1 1 0 1.7-.3 2.2-.4l-.2-1.6-1.5.2c-1.3 0-1.8-1-1.8-2.7V12H61v-1.7h-3.5V7l-2.4.7zM74 17.3v-1c0-2.5-1-6.3-5.5-6.3-4 0-6.5 3-6.5 7 0 4.4 2.5 7 6.8 7 2.2 0 3.7-.5 4.6-.8l-.5-1.7c-1 .4-2 .7-4 .7-2.4 0-4.6-1.4-4.7-5H74zm-9.6-1.7c.2-1.7 1.3-4 4-4s3.4 2.5 3.4 4h-7.4zM76 29.3h2.4V22c1 1.2 2.6 2 4.5 2 3.3 0 6-2.3 6-7.3 0-4-2.2-6.7-5.7-6.7-2.3 0-4 .8-5 2.4l-.2-2.2h-2v19.1zM78.5 16c0-.4 0-.7.2-1 .5-2 2.2-3.3 4-3.3 2.7 0 4.2 2.4 4.2 5 0 3.3-1.6 5.5-4.3 5.5-2 0-3.5-1.2-4-3V16zM103 17.3v-1c0-2.5-1-6.3-5.5-6.3-4 0-6.5 3-6.5 7 0 4.4 2.5 7 6.8 7 2.2 0 3.7-.5 4.6-.8l-.5-1.7c-1 .4-2 .7-4 .7-2.4 0-4.6-1.4-4.7-5h9.7zm-9.6-1.7c.2-1.7 1.3-4 4-4s3.4 2.5 3.4 4h-7.4zM105 23.7h2.4v-8.3c0-.4 0-.8.2-1 .5-1.5 1.8-2.7 3.5-2.7 2.5 0 3.3 2 3.3 4v8h2.3v-8.2c0-4.5-2.8-5.5-4.7-5.5-2.4 0-4 1-4.7 2.2l-.2-2h-2V23.6z" /> 
         </g> 
        </g> 
       </svg> </a> 
      <div class="nav-toggle navbar-burger"> 
       <span></span> 
       <span></span> 
       <span></span> 
      </div> 
     </div> 
     <div class="navbar-menu"> 
      <div class="navbar-start"></div> 
      <div class="navbar-end"> 
       <div class="navbar-item has-dropdown is-hoverable"> 
        <a class="navbar-link">Solutions</a> 
        <div class="navbar-dropdown"> 
         <a class="navbar-item " href="/support/index"> <img src="/images/icons/icon-ondemand.svg" class="service-icon"> <span>On-Demand Development</span> </a> 
         <a class="navbar-item " href="/development/index"> <img src="/images/icons/icon-webappdev.svg" class="service-icon"> <span>Web App Development</span> </a> 
         <a class="navbar-item " href="/development/mobile"> <img src="/images/icons/icon-mobileappdev.svg" class="service-icon"> <span>Mobile App Development</span> </a> 
         <a class="navbar-item " href="/workshops/index"> <img src="/images/icons/icon-teamtraining.svg" class="service-icon"> <span>Team Training</span> </a> 
         <a class="navbar-item " href="/development/modernization"> <img src="/images/icons/icon-techstack.svg" class="service-icon"> <span>Tech Stack Modernization</span> </a> 
         <a class="navbar-item " href="/development/consulting"> <img src="/images/icons/icon-consulting.svg" class="service-icon"> <span>Technical Consulting</span> </a> 
        </div> 
       </div> 
       <a href="/about/index" class="navbar-item nav-about">Our Work</a> 
       <a href="/blog/" class="navbar-item nav-blog">Blog</a> 
       <a href="/site/contact" class="navbar-item nav-contact">Contact</a> 
      </div> 
     </div> 
    </nav> 
   </div> 
  </header> 
  <div class="main-content"> 
   <div class="hero header-blog-single" id="header-blog-single"> 
    <div class="hero-body"> 
     <div class="container"> 
      <div class="headerText"> 
       <h3 class="title">Protected Cross-Domain Authentication with JavaScript</h3> 
       <div class="author">
        By 
        <a href="https://www.sitepen.com/blog/author/nroberts/" title="Posts by Neil Roberts" rel="author">Neil Roberts</a> on July 30, 2008 12:01 am 
        <div class="postMetadata">
         <a href="https://www.sitepen.com/blog/category/ajax/" rel="category tag">ajax</a> 
         <a href="https://www.sitepen.com/blog/category/dojo/" rel="category tag">Dojo</a> 
         <a href="https://www.sitepen.com/blog/category/javascript/" rel="category tag">JavaScript</a> 
         <a href="https://www.sitepen.com/blog/category/news/" rel="category tag">News</a>
        </div> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <section class="section"> 
    <div class="container blog-single-container"> 
     <article class="blog-single post-437 post type-post status-publish format-standard hentry category-ajax category-dojo category-javascript category-news tag-cross-domain tag-windowname tag-x-domain"> 
      <div class="post-content"> 
       <p><a href="http://code.google.com/apis/ajaxsearch/documentation/">Google</a> and <a href="http://developer.yahoo.com/search/web/V1/webSearch.html">Yahoo</a> have JavaScript APIs that let you perform searches. <a href="http://en.wikipedia.org/w/api.php">Wikipedia</a> has a JavaScript API that lets you grab data from its pages. These APIs can be accessed cross-domain with a transport method known as <a href="http://www.sitepen.com/blog/2008/03/19/pluggable-web-services-with-smd/">JSONP</a>. JSONP works by allowing you add a script tag to your page which points to a URL on their server. The server outputs JavaScript that will call a method (defined as part of the query string in the URL), passing it <a href="http://www.json.org/example.html">JSON</a>-formatted data.</p> 
       <p>Youll notice that these services are read-only. I dont currently know of any cross-domain JavaScript APIs that allow you to write data in any meaningful way. An example of this sort of data would be a way, through JavaScript, to update your status on a social networking web site.</p> 
       <p><span id="more-437"></span></p> 
       <p>Is this lack of functionality simply because developers havent taken the time to implement it? To some extent, yes. Almost all of the sites where this would be useful havent implemented a JavaScript API at all. At the same time, this has been a pretty tough feature to implement in a way that both protects the user while still making it a relatively painless process.</p> 
       <p>Right now, several sites have APIs that work through HTTP using <a href="http://en.wikipedia.org/wiki/Basic_authentication_scheme">HTTP Basic Authentication</a> (e.g. <a href="http://groups.google.com/group/twitter-development-talk/web/api-documentation">Twitter</a>). If a site were to try to utilize these HTTP APIs through JavaScript, they would have to use their server as a proxy. And in so doing, you would have to trust the server with your username and password.</p> 
       <h2>Why not just check to see if theyre logged in?</h2> 
       <p>This may be better explained through an example. You work for <a href="http://www.sitepen.com/blog/2007/11/06/simple-dojo-grids/">Gaskets, Inc.</a>, and your supplier has just sent you an email announcing their new JavaScript API. They explain that in addition to searching their inventory, the API will allow customers to view their order history. You only need to be logged in to your suppliers site, and the API will work from any other site.</p> 
       <p>Gaskets, Inc. decides that they dont currently have the resources to use this API. But meanwhile, over at Evil Gizmos, Ltd., a clever (evil) engineer has decided that the API could prove very valuable to the company.</p> 
       <p>You see, every time someone visits the home page of Evil Gizmos, Ltd., some JavaScript on the page calls the <code>getOrderHistory</code> API function on the suppliers site. During your day working at Gaskets, Inc., you browse over to Evil Gizmos, Ltd. to see what theyre up to. When you visit, their site pulls down the complete order history of Gaskets, Inc. and saves it on their server.</p> 
       <p>How did this happen? Well, your supplier was so excited about providing this new functionality, that they ignored the warnings from their engineers about security. The evil engineer at Evil Gizmos Ltd. noticed that, in the email, the only mention of authentication was that you were logged in to their site.</p> 
       <p>JSONP works by adding a script tag to a page to load data from an external site. Adding a script tag is simply another method of making an HTTP request. When an HTTP request is made by the browser, no matter what site it originates from, all your cookies related to that domain are sent to that site, as part of the official HTTP specifications. If you were logged in to that site, your cookies are what authenticate you and restore your session. No matter what site adds this script tag, the server will always think that youre logged in. A malicious callback function can accept this data, and use Ajax to save it back to their site.</p> 
       <h2>Just being logged in isnt enough</h2> 
       <p>First of all, if all you are verifying when sending sensitive data through JSONP is that a user has logged in, stop right now. Does this mean that youve just lost the functionality you were hoping to provide? Not totally, the simplest fix is to add a configuration screen to your site that lets a user specify what sites they trust. Then, when you receive an API request, after verifying that a user is logged in, you can compare the referrer specified in the HTTP request against the users list of authorized sites.</p> 
       <p>While this patches the security problem, it requires extra work on the users part. Now, in order for someone to use this API, a user must be logged in to the API site first, as well as granting the third-party site API permission.</p> 
       <h2>What should it look like?</h2> 
       <p>Everything should originate from the site you visit, and you shouldnt be required to leave the page in order to perform your authentication or authorization.</p> 
       <p>Nowhere should the site youre visiting be able to access your username and password. And if you arrived at the site already authenticated, you should explicitly authorize the site to have access to that sites API.</p> 
       <h2>Is this possible?</h2> 
       <p>Really only one possibility exists that fits our requirements. The iframe tag will allow us to nest a page from any URL in a way that obeys <a href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policies</a>.</p> 
       <p>An iframe presents several important properties: It allows you to nest a third-party site in the page, it allows multi-page interaction with the third-party site, and it has security restrictions that prevent the parent and child frames from accessing any data in the other. But most importantly, a single property exists that can transport data between documents: <a href="http://www.sitepen.com/blog/2008/07/22/windowname-transport/">window.name</a>.</p> 
       <p>Lets quickly go over the mechanisms that make the exchange of data possible. First, in order for the parent frame to read the window.name property of the child frame, it needs to contain a document in the same domain. During authentication, while the iframe is pointed at a different domain, we have no way of reading the <code>window.name</code> property. Nor can we determine when a user is done authenticating. Its up to the authenticating server to decide how many steps the user takes in order to log in. For example, if the authenticating server allows a username and password to be entered in the iframe, the user might mistype their password before getting it correct. So well need to make sure that the server has a way to return the iframe to a state in which <code>window.name</code> can be read when the authentication and authorization phase is complete.</p> 
       <p>We start out by creating an iframe containing an HTML file in the same domain. This file sets <code>window.name</code> to a location that the authenticating server can use to redirect to after authentication and authorization. Once this is done, the iframe gets redirected to the third-party authentication page. On this page, the server can do anything it wants to confirm authorization, but it will ultimately output a script that grabs the redirect location from <code>window.name</code>, rewrites <code>window.name</code> with some information well get to in a second, and then, using <code>window.location</code>, redirects back to the original site. After redirection, using this new value in <code>window.name</code>, authorization can be confirmed, and using the JSONP API in an authenticated way is now possible.</p> 
       <p>Throughout the whole process, everything you did inside of the iframe was invisible to the originating site.</p> 
       <h2>The library: xauth</h2> 
       <p>In addition to support within the forthcoming Dojo 1.2 release, Ive written a <a href="http://code.google.com/p/xauth/">tiny library</a> that provides a lightweight API and the local file that should be in the iframe when the page loads.</p> 
       <pre lang="html4strict">
&lt;div id="wrapper"&gt;
	&lt;iframe src="js/xauth/blank.html"&gt;&lt;/iframe&gt;
&lt;/div&gt;
</pre> 
       <pre lang="javascript">
&lt;script src="js/xauth/xauth.js"&gt;&lt;/script&gt;
&lt;script&gt;
	window.onload = function(){
		xauth.init({
			node: document.getElementById("wrapper"),
			url: "http://gaskets.inc/api/approval.php"
		}).addCallback(function(status, token, node){
			alert([status, token, node]);
			node.style.display = "none";
		});
	};
&lt;/script&gt;
</pre> 
       <h2>Breaking it down</h2> 
       <p>We have a wrapper node, which would typically contain an item on the sidebar of your page with a header that makes it clear what the iframe contains (eg. Authorize Gasket Supplier). Because we probably want to destroy this node once the user is authorized, it makes sense that we would pass this wrapper node to the <code>init</code> function. The function is smart enough to look for the first iframe in the DOM beneath this passed node, and work with that.</p> 
       <p>Along with that node, we need to specify where to send the user to for authorization.</p> 
       <p>Were only adding a single callback here via <code>addCallback</code>, though many can be added. An integer indicating status, a token, and the wrapper node are passed to the function. The status and token will make sense once we cover the server side of things.</p> 
       <h2>The server side of things</h2> 
       <p>I wont tell you how to write your server-side code (though the Google Code project has some <a href="http://code.google.com/p/xauth/source/browse/#svn/trunk/tests">examples</a>. But the important stuff looks like this:</p> 
       <pre lang="php">
&lt;?php if($authorized): ?&gt;
&lt;html&gt;
&lt;script&gt;
var redirect = window.name;
window.name = "&lt;?php print $token; ?&gt;";
window.location = redirect + "#xauth=1";
&lt;/script&gt;
&lt;/html&gt;
&lt;?php endif; ?&gt;
</pre> 
       <p>Adding the hash <code>xauth=1</code> is a way to pass status to the callbacks. I like to use 1 to indicate success and 0 to indicate failure, but the codes are up to you and youre free to give them any meaning that you want.</p> 
       <p>You should always change the value of window.name, and whatever value you set it to will be passed as the second parameter to the callback. This is useful for providing a token to the user. The idea is that, although you can save a list of trusted sites for a given user, if you would prefer the authorization to take place for every page rather than every site, you can simply create a unique token (bound to the users session) that you expect to be passed in any future API calls. But this is completely optional.</p> 
       <h2>Displaying the login form</h2> 
       <p>Though you are free to place a login form inside of the iframe, this might freak some users out. Users that are particularly security conscious, not being able to easily see the URL of the iframe, will likely give up, leave, and not use your service. An easy solution to this is to present a link that will pop up a small login form on your site that automatically closes on successful login, and a Continue button that will finish the process up in the iframe.</p> 
       <p>Its tempting to worry that using a login form inside of an iframe makes your users more susceptible to <a href="http://en.wikipedia.org/wiki/Phishing">phishing</a> attacks. Ultimately, any site could put any form inside of an iframe claiming its your login form, with or without your approval. You are slightly better off by not having your login form inside of an iframe because your users will become accustomed to you never having a login form embedded in another page, but theres really no way to fix another site claiming that a user can log in through a form on their page.</p> 
       <h2>I dont think I can trust this newfangled technology</h2> 
       <p>Well, old-timer, none of this is new. Although it might be better said that all the security policies that browser enforces remain in effect using this technique. In fact, the only data that gets exchanged between the two sites involved in the transaction is the data that each site <strong>explicitly</strong> assigns to what is technically nothing more than a shared variable.</p> 
       <ul> 
        <li>Your cookies cannot be read or modified by the third-party site</li> 
        <li>Your HTML is only available to your pages</li> 
        <li>You will always get a reliable HTTP referrer value</li> 
        <li>Your server handles all authentication, period. You can theoretically tell the third-party site that the user is authenticated even if they arent. Simply telling them they have authentication doesnt mean its true</li> 
       </ul> 
       <p>The trick to this technique is simply utilizing window.name to tell the server where the iframe should be returned to once the authorization is complete, and to use it again to tell the client whether the user approved or denied the authorization request. Everything that matters as far as security goes is up to your server, and there are plenty of options to choose from.</p> 
       <h2>Summarizing server options</h2> 
       <ul> 
        <li>User does not have a session (is not logged in) with the API site: 
         <ul> 
          <li>A form is presented for the user to enter their username and password: 
           <ul> 
            <li>On successful login, <code>window.name</code> gets set, iframe is returned to originating site.</li> 
            <li>Optionally, the HTTP referrer might be saved for later automatic authorization.</li> 
           </ul> </li> 
          <li>A link is presented along with a Continue button: 
           <ul> 
            <li>When the user clicks the link, a new window pops up with a login screen.</li> 
            <li>On successful login, <code>window.close();</code> returns the user to the previous window.</li> 
            <li>Pressing the continue button confirms a valid session <code>window.name</code> gets set, iframe is returned to originating site.</li> 
            <li>Optionally, the HTTP referrer might be saved for later automatic authorization.</li> 
           </ul> </li> 
         </ul> </li> 
        <li>User has a session (is logged in) with the API site: 
         <ul> 
          <li>User has a list of authenticated sites: 
           <ul> 
            <li>If the HTTP referrer is in the list, <code>window.name</code> gets set, iframe is returned to originating site.</li> 
            <li>If the originating referrer is not in the list, authorization is requested. Depending on whether Yes or No is chosen, <code>window.name</code> will likely start with a different status code. In either case, iframe is returned to originating site.</li> 
           </ul> </li> 
          <li>If the user does not have a list of authenticated sites, a random token is generated, associated with the users session, and placed into <code>window.name</code> after the status code. The iframe is returned to the originating site and future API calls expect to see this token present.</li> 
         </ul> </li> 
       </ul> 
       <h2>In action</h2> 
       <p>Check out our <a href="http://sitepen.com/labs/code/xauth/">fictional third-party site</a> that uses Zone Productss API, and follow the login instructions.</p> 
       <p>After youre logged in, visit <a href="http://someclosure.com/xauth/">Sketchy Site, Inc.</a>to see that just because youve logged in, a site still needs your explicit approval for you to continue.</p> 
      </div> 
     </article> 
    </div> 
   </section> 
   <section class="section"> 
    <div class="container blog-single-container comments"> 
     <h1 class="title is-2">Comments</h1> 
     <div id="disqus_thread"> 
      <div id="dsq-content"> 
       <ul id="dsq-comments"> 
        <li class="comment even thread-even depth-1" id="dsq-comment-87599"> 
         <div id="dsq-comment-header-87599" class="dsq-comment-header"> 
          <cite id="dsq-cite-87599"> <a id="dsq-author-user-87599" href="http://ajaxian.com/" target="_blank" rel="nofollow">Dion Almaer</a> </cite> 
         </div> 
         <div id="dsq-comment-body-87599" class="dsq-comment-body"> 
          <div id="dsq-comment-message-87599" class="dsq-comment-message">
           <p>Neil,</p> 
           <p>Very nice indeed.</p> 
           <p>We have some write APIs though.</p> 
           <p><a href="http://ajaxian.com/archives/bloggears-an-offline-blogger-client-using-the-new-gdata-blogger-javascript-client" rel="nofollow">http://ajaxian.com/archives/bloggears-an-offline-blogger-client-using-the-new-gdata-blogger-javascript-client</a></p> 
           <p><a href="http://ajaxian.com/archives/google-launches-javascript-api-that-allows-you-to-write-back" rel="nofollow">http://ajaxian.com/archives/google-launches-javascript-api-that-allows-you-to-write-back</a></p> 
           <p>Cheers,</p> 
           <p>Dion</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-87602"> 
         <div id="dsq-comment-header-87602" class="dsq-comment-header"> 
          <cite id="dsq-cite-87602"> <a id="dsq-author-user-87602" href="http://www.sitepen.com/blog/author/kzyp/" target="_blank" rel="nofollow">Kris Zyp</a> </cite> 
         </div> 
         <div id="dsq-comment-body-87602" class="dsq-comment-body"> 
          <div id="dsq-comment-message-87602" class="dsq-comment-message">
           <p>Dion,<br> Neil has described a full reusable architecture for accessing protected resources between mutually suspicious parties, this is far beyond GData. GData is a library that Google provides that utilizes some (not all) of these concepts, but largely black boxes the communication (GData has a published protocol for server communication, but not from the browser). This means a user must fully trust the library provided by Google, there is no safety measure against the service provider. This is intended to be used with any service provider (not just Google), untrusted or not, and so it is critical to have the protection that the window.name protocol provides (and GData does not), with open protocol definition that anyone can implement. Second, GData relies on full page redirection for authorization. window.name authorization can do immediate in page (in an iframe) authorization. This can provide a much more fluid user experience. Finally, Neil has also detailed how to separate authentication and authorization aspects of providing access to protected resource. This is an extremely critical part of building secure protected cross-domain accessible web services, and is beyond just what the library provides.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment byuser comment-author-nroberts bypostauthor even thread-even depth-1" id="dsq-comment-87604"> 
         <div id="dsq-comment-header-87604" class="dsq-comment-header"> 
          <cite id="dsq-cite-87604"> <a id="dsq-author-user-87604" href="http://www.sitepen.com" target="_blank" rel="nofollow">nroberts</a> </cite> 
         </div> 
         <div id="dsq-comment-body-87604" class="dsq-comment-body"> 
          <div id="dsq-comment-message-87604" class="dsq-comment-message">
           <p>Kris, I think the bigger point Dion was making relates to when I said I dont currently know of any cross-domain JavaScript APIs that allow you to write data in any meaningful way</p> 
           <p>When I wrote this, I fully expected to hear about a few APIs that do allow writable data, and seeing that Google has it to some extent is good to hear.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-87605"> 
         <div id="dsq-comment-header-87605" class="dsq-comment-header"> 
          <cite id="dsq-cite-87605"> <a id="dsq-author-user-87605" href="http://www.littleshoot.org" target="_blank" rel="nofollow">Adam Fisk</a> </cite> 
         </div> 
         <div id="dsq-comment-body-87605" class="dsq-comment-body"> 
          <div id="dsq-comment-message-87605" class="dsq-comment-message">
           <p>Great post, Neil. So this will be included in Dojo 1.2, is that correct? </p> 
           <p>Is this pretty much the same as IBMs smash work, or are there differences?</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment byuser comment-author-nroberts bypostauthor even thread-even depth-1" id="dsq-comment-87606"> 
         <div id="dsq-comment-header-87606" class="dsq-comment-header"> 
          <cite id="dsq-cite-87606"> <a id="dsq-author-user-87606" href="http://www.sitepen.com" target="_blank" rel="nofollow">nroberts</a> </cite> 
         </div> 
         <div id="dsq-comment-body-87606" class="dsq-comment-body"> 
          <div id="dsq-comment-message-87606" class="dsq-comment-message">
           <p>No, this is toolkit agnostic,</p> 
           <p>Dojo 1.2 will have this type of communication built into the window name transport, though.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment byuser comment-author-kzyp odd alt thread-odd thread-alt depth-1" id="dsq-comment-87607"> 
         <div id="dsq-comment-header-87607" class="dsq-comment-header"> 
          <cite id="dsq-cite-87607"> <a id="dsq-author-user-87607" href="http://www.sitepen.com" target="_blank" rel="nofollow">kzyp</a> </cite> 
         </div> 
         <div id="dsq-comment-body-87607" class="dsq-comment-body"> 
          <div id="dsq-comment-message-87607" class="dsq-comment-message">
           <p>@Adam: IBMs smash work is built on fragment identifier messaging (FIM) for inter-frame messaging. We have been investigating using a derivative of the window.name technique for inter-frame messaging and this might be used in lieu FIM for hub style cross-domain widget interaction, but this is still in research.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment even thread-even depth-1" id="dsq-comment-87626"> 
         <div id="dsq-comment-header-87626" class="dsq-comment-header"> 
          <cite id="dsq-cite-87626"> <a id="dsq-author-user-87626" href="http://dojotoolkit.org" target="_blank" rel="nofollow">James Burke</a> </cite> 
         </div> 
         <div id="dsq-comment-body-87626" class="dsq-comment-body"> 
          <div id="dsq-comment-message-87626" class="dsq-comment-message">
           <p>Neil: AOLs OpenAuth (<a href="http://dev.aol.com/api/openauth" rel="nofollow">http://dev.aol.com/api/openauth</a>) does something like this to allow other sites to get an authorization token for AOL/AIM/ICQ and certain OpenID accounts.</p> 
           <p>However, since the iframe requires a redirect back to your site, instead of using window.name, it just returns the token as an URL parameter to your page, and it can include auth status (failure type).</p> 
           <p>The extra URLS params have the added benefit of avoiding cache issues with the iframe document.</p> 
           <p>Also, using an iframe to host the authorization page has problems in Safari, at least in Safari 2  Safari 3 seems to have Accept All as default for cookies now? At least in Safari 2, if your auth site saves your auth state in a cookie: Safari (with the default options set) would not allow the iframe to set the auth cookie for that auth page in the iframe, since it is considered a 3rd party cookie.</p> 
           <p>So I would always open the auth page in a new window. Some folks do not like that UI flow, but it allowed Safari 2 to work, works for people who turn off accepting cookies from other sites, and hopefully gets the user trained to look at the URL bar for validating the site (although most users do not look at it).</p> 
           <p>Oh, and BTW (you expected this :), the Web AIM API (<a href="http://dev.aol.com/aim/web/serverapi_reference" rel="nofollow">http://dev.aol.com/aim/web/serverapi_reference</a>) does allow write access via a jsonp API  you can do things like set your status and send IMs. That Web AIM API URL also describes how the API interacts with the auth API provided by OpenAuth.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="post pingback"> <p>Pingback: <a href="http://www.sitepen.com/blog/2008/08/18/protected-cross-domain-access-with-dojos-windowname/" rel="external nofollow" class="url">SitePen Blog » Protected Cross-Domain Access with Dojos windowName</a>()</p> </li> 
        <!-- #comment-## --> 
        <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-87828"> 
         <div id="dsq-comment-header-87828" class="dsq-comment-header"> 
          <cite id="dsq-cite-87828"> <span id="dsq-author-user-87828">Neil</span> </cite> 
         </div> 
         <div id="dsq-comment-body-87828" class="dsq-comment-body"> 
          <div id="dsq-comment-message-87828" class="dsq-comment-message">
           <p>Hi,</p> 
           <p>Ive always been wary of relying on the referrer header for security purposes because of referrer spoofing. It sounds like youve thought this through, though, so I was wondering if you could expand on the statement, You will always get a reliable HTTP referrer value. Is there something about the context in which xauth operates that makes referrer spoofing irrelevant?</p> 
           <p>Thanks,</p> 
           <p>Neil</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment byuser comment-author-nroberts bypostauthor even thread-even depth-1" id="dsq-comment-87834"> 
         <div id="dsq-comment-header-87834" class="dsq-comment-header"> 
          <cite id="dsq-cite-87834"> <a id="dsq-author-user-87834" href="http://www.sitepen.com" target="_blank" rel="nofollow">nroberts</a> </cite> 
         </div> 
         <div id="dsq-comment-body-87834" class="dsq-comment-body"> 
          <div id="dsq-comment-message-87834" class="dsq-comment-message">
           <p>Its probably better said that if youre getting valid cookies, its safe to assume that the referrer value is coming from a web browser, and thus be reliable. If someone has stolen your authentication cookie, they dont need to hack your API, they can use the cookie for direct access to your site.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment byuser comment-author-kzyp odd alt thread-odd thread-alt depth-1" id="dsq-comment-87835"> 
         <div id="dsq-comment-header-87835" class="dsq-comment-header"> 
          <cite id="dsq-cite-87835"> <a id="dsq-author-user-87835" href="http://www.sitepen.com" target="_blank" rel="nofollow">kzyp</a> </cite> 
         </div> 
         <div id="dsq-comment-body-87835" class="dsq-comment-body"> 
          <div id="dsq-comment-message-87835" class="dsq-comment-message">
           <p>@Neil: My explanation was indeed too vague, using the Referer header is actually rather nuanced due to some of the exploits that are available. First, as nroberts pointed out you should only use it conjunction with cookies (or HTTP authentication, as cookies or authentication mean that the browser user agent has actually authenticated the user, otherwise one can easily just craft their own HTTP requests to exploit a site. Next, you should ensure that you do not have a crossdomain.xml file to prevent cross-domain access through Flash. Older versions of Flash have allowed the Referer header to be modified, and if cross-domain access is allowed requests can be made with forged Referer headers and cookies still present. Next, you should be aware that IE allows the Referer header to be forged in XHR for same-origin requests, but this is not really problem for any real use case, because the same-origin has the default authorization and forging the Referer header should only lower the users authorization level. Finally, you should be aware that some users (very small percentage) disable the Referer header in their browser. If no Referer header is included, the server cant make the proper authorization decisions and should respond with such a message to the user, indicating that they should enable the Referer header if they want authorization.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment even thread-even depth-1" id="dsq-comment-91051"> 
         <div id="dsq-comment-header-91051" class="dsq-comment-header"> 
          <cite id="dsq-cite-91051"> <a id="dsq-author-user-91051" href="http://kinsey.no/blog" target="_blank" rel="nofollow">Sean Kinsey</a> </cite> 
         </div> 
         <div id="dsq-comment-body-91051" class="dsq-comment-body"> 
          <div id="dsq-comment-message-91051" class="dsq-comment-message">
           <p>Or you could do it using easyxss, <a href="http://code.google.com/p/easyxss/" rel="nofollow">http://code.google.com/p/easyxss/</a>.<br> One of the examples is communicating with a popup from a different domain. This could easily be used for authentication aswell.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment odd alt thread-odd thread-alt depth-1" id="dsq-comment-101338"> 
         <div id="dsq-comment-header-101338" class="dsq-comment-header"> 
          <cite id="dsq-cite-101338"> <span id="dsq-author-user-101338">Manish Goregaokar</span> </cite> 
         </div> 
         <div id="dsq-comment-body-101338" class="dsq-comment-body"> 
          <div id="dsq-comment-message-101338" class="dsq-comment-message">
           <p>Actually, Wikipedia does have a write api. Its used for certain apps to help editors.</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
        <li class="comment even thread-even depth-1" id="dsq-comment-133064"> 
         <div id="dsq-comment-header-133064" class="dsq-comment-header"> 
          <cite id="dsq-cite-133064"> <span id="dsq-author-user-133064">Chris Terry</span> </cite> 
         </div> 
         <div id="dsq-comment-body-133064" class="dsq-comment-body"> 
          <div id="dsq-comment-message-133064" class="dsq-comment-message">
           <p>Hi,</p> 
           <p>Not sure exactly what to do on the server side  could you explain a bit further?</p> 
          </div> 
         </div> </li>
        <!-- #comment-## --> 
       </ul> 
      </div> 
     </div> 
     <script type="text/javascript">
var disqus_url = 'https://www.sitepen.com/blog/2008/07/30/protected-cross-domain-authentication-with-javascript/';
var disqus_identifier = '437 http://www.sitepen.com/blog/2008/07/30/protected-cross-domain-authentication-with-javascript/';
var disqus_container_id = 'disqus_thread';
var disqus_shortname = 'sitepen';
var disqus_title = "Protected Cross-Domain Authentication with JavaScript";
var disqus_config_custom = window.disqus_config;
var disqus_config = function () {
    /*
    All currently supported events:
    onReady: fires when everything is ready,
    onNewComment: fires when a new comment is posted,
    onIdentify: fires when user is authenticated
    */
    
    
    this.language = '';
        this.callbacks.onReady.push(function () {

        // sync comments in the background so we don't block the page
        var script = document.createElement('script');
        script.async = true;
        script.src = '?cf_action=sync_comments&post_id=437';

        var firstScript = document.getElementsByTagName('script')[0];
        firstScript.parentNode.insertBefore(script, firstScript);
    });
    
    if (disqus_config_custom) {
        disqus_config_custom.call(this);
    }
};

(function() {
    var dsq = document.createElement('script'); dsq.type = 'text/javascript';
    dsq.async = true;
    dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
})();
</script> 
    </div> 
   </section> 
  </div> 
  <footer class="section masterFooter dark"> 
   <div class="container"> 
    <div class="columns is-mobile is-multiline"> 
     <div class="column is-half-mobile company"> 
      <h4 class="title is-4">Company</h4> 
      <nav class="noPrint"> 
       <ul id="yw0"> 
        <li><a href="/about/jobs.html">Join Our Team</a></li> 
        <li><a href="/site/page.html?view=privacy">Privacy Policy</a></li> 
        <li><a href="/site/page.html?view=tos">Terms of Use</a></li> 
       </ul> 
      </nav> 
     </div> 
     <div class="column is-half-mobile customers"> 
      <h4 class="title is-4">Customers</h4> 
      <nav> 
       <ul> 
        <li><a href="http://hub.sitepen.com/">Hub Login</a></li> 
        <li><a href="http://support.sitepen.com/">Support Login</a></li> 
       </ul> 
      </nav> 
     </div> 
     <div class="column is-half-mobile services"> 
      <h4 class="title is-4">Let's Connect</h4> 
      <nav class="noPrint"> 
       <ul> 
        <li>530 Lytton Avenue</li> 
        <li>Second Floor</li> 
        <li>Palo Alto, CA 94301</li> 
       </ul> 
      </nav> 
     </div> 
     <div class="column is-half-mobile services"> 
      <nav class="noPrint no-header"> 
       <ul> 
        <li>650-968-8787</li> 
        <li>hello@sitepen.com</li> 
       </ul> 
      </nav> 
      <div class="action"> 
       <a href="http://www.twitter.com/sitepen" class="icon-twitter"><span class="visually-hidden">Sitepen Twitter</span></a> 
       <a href="https://www.facebook.com/SitePen" class="icon-facebook"><span class="visually-hidden">Sitepen Facebook</span></a> 
       <a href="https://plus.google.com/103329577501148757527/posts" class="icon-google"><span class="visually-hidden">Sitepen Google Plus</span></a> 
       <a href="/blog/feed/" class="icon-rss"><span class="visually-hidden">Blog RSS feed</span></a> 
      </div> 
     </div> 
    </div> 
    <p class="copyright">© 2017 SitePen, Inc. All Rights Reserved</p> 
   </div> 
  </footer> 
  <script type="text/javascript"><!--
			var seriesdropdown = document.getElementById("orgseries_dropdown");
			if (seriesdropdown) {
			 function onSeriesChange() {
					if ( seriesdropdown.options[seriesdropdown.selectedIndex].value != ( 0 || -1 ) ) {
						location.href = "http://www.sitepen.com/blog/series/"+seriesdropdown.options[seriesdropdown.selectedIndex].value;
					}
				}
				seriesdropdown.onchange = onSeriesChange;
			}
			--></script> 
  <script type="text/javascript">
        // <![CDATA[
        var disqus_shortname = 'sitepen';
        (function () {
            var nodes = document.getElementsByTagName('span');
            for (var i = 0, url; i < nodes.length; i++) {
                if (nodes[i].className.indexOf('dsq-postid') != -1 && nodes[i].parentNode.tagName == 'A') {
                    nodes[i].parentNode.setAttribute('data-disqus-identifier', nodes[i].getAttribute('data-dsqidentifier'));
                    url = nodes[i].parentNode.href.split('#', 1);
                    if (url.length == 1) { url = url[0]; }
                    else { url = url[1]; }
                    nodes[i].parentNode.href = url + '#disqus_thread';
                }
            }
            var s = document.createElement('script');
            s.async = true;
            s.type = 'text/javascript';
            s.src = '//' + disqus_shortname + '.disqus.com/count.js';
            (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
        }());
        // ]]>
        </script> 
  <script type="text/javascript" src="https://www.sitepen.com/blog/wp-includes/js/comment-reply.min.js?ver=4.8"></script> 
  <script type="text/javascript" src="https://www.sitepen.com/blog/wp-includes/js/wp-embed.min.js?ver=4.8"></script> 
  <!-- Start of Async HubSpot Analytics Code --> 
  <script type="text/javascript" async>
	(function(d,s,i,r) {
		if (d.getElementById(i)){return;}
		var n=d.createElement(s),e=d.getElementsByTagName(s)[0];
		n.id=i;n.src='//js.hs-analytics.net/analytics/'+(Math.ceil(new Date()/r)*r)+'/2059467.js';
		e.parentNode.insertBefore(n, e);
	})(document,"script","hs-analytics",300000);
</script> 
  <!-- End of Async HubSpot Analytics Code --> 
  <!-- Start of LinkedIn Code --> 
  <script type="text/javascript" async>
_linkedin_data_partner_id = "26438";
</script>
  <script type="text/javascript">
(function(){var s = document.getElementsByTagName("script")[0];
var b = document.createElement("script");
b.type = "text/javascript";b.async = true;
b.src = "https://snap.licdn.com/li.lms-analytics/insight.min.js";
s.parentNode.insertBefore(b, s);})();
</script> 
  <!-- End of LinkedIn Code --> 
  <!-- Facebook Pixel Code --> 
  <script async>
!function(f,b,e,v,n,t,s){if(f.fbq)return;n=f.fbq=function(){n.callMethod?
n.callMethod.apply(n,arguments):n.queue.push(arguments)};if(!f._fbq)f._fbq=n;
n.push=n;n.loaded=!0;n.version='2.0';n.queue=[];t=b.createElement(e);t.async=!0;
t.src=v;s=b.getElementsByTagName(e)[0];s.parentNode.insertBefore(t,s)}(window,
document,'script','https://connect.facebook.net/en_US/fbevents.js');

fbq('init', '610366229111803');
fbq('track', "PageView");</script> 
  <noscript>
   <img height="1" width="1" style="display:none" src="https://www.facebook.com/tr?id=610366229111803&amp;ev=PageView&amp;noscript=1">
  </noscript> 
  <!-- End Facebook Pixel Code --> 
  <script type="text/javascript" src="/js/syntaxHighlighter.js"></script> 
  <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/dojo/1.10.3/dojo/dojo.js"></script> 
  <script type="text/javascript" src="/js/site.js"></script> 
  <script type="text/javascript" src="/js/blog.js"></script>   
 </body>
</html>