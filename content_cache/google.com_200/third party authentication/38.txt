<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta name="generator" content="pandoc"> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes"> 
  <meta name="description" content="The Javascript Activation Method enables you to simply add a block of javascript to your webpage to begin authenticating your online payments."> 
  <meta name="keywords" content="Developer Center, CardinalCommerce, dev center, consumer authentication, 3ds"> 
  <script type="text/javascript" src="/assets/js/jquery-1.9.js"></script> 
  <script type="text/javascript" src="/assets/js/functions.js"></script> 
  <link rel="stylesheet" href="/assets/css/main.css" type="text/css" media="screen"> 
  <link rel="shortcut icon" href="/assets/images/favicon.ico" type="image/x-icon"> 
  <link rel="icon" href="/assets/images/favicon.ico" type="image/x-icon"> 
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,300,100italic,300italic" rel="stylesheet" type="text/css"> 
  <script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script> 
  <title>Javascript Activation Method for Cardinal Consumer Authentication</title> 
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]--> 
  <script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
	
	  ga('create', 'UA-76041658-1', 'auto');
	  ga('send', 'pageview');
	
	</script> 
 </head> 
 <body class="docs"> 
  <!-- Google Tag Manager --> 
  <noscript>
   <iframe src="//www.googletagmanager.com/ns.html?id=GTM-WMNKRV" height="0" width="0" style="display:none;visibility:hidden"></iframe>
  </noscript> 
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
	new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
	j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
	'//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
	})(window,document,'script','dataLayer','GTM-WMNKRV');</script> 
  <!-- End Google Tag Manager --> 
  <div id="headerWrap" class="shadow"> 
   <div id="header" class="pageWidth"> 
    <div id="headerLeft"> 
     <a href="https://www.cardinalcommerce.com/" title="CardinalCommerce.com"><img src="/assets/images/cc-logo.jpg" alt="CardinalCommerce Corporation"></a> 
    </div> 
    <div id="headerRight"> 
     <h3></h3> 
     <div id="launchMobileMenu" class="mobileOnly"> 
      <img src="/assets/images/hamburger.png" alt="Open Menu"> 
     </div> 
     <ul id="headerNav"> 
      <li class="mobileOnly" id="closeMobileMenu"><a><img src="/assets/images/hamburger.png" alt="close menu"></a></li> 
      <li><a href="/index.shtml" onclick="dataLayer.push({'event': 'hdrNav -- Overview - clicked'});">Overview</a></li> 
      <li><a href="/getting-started.shtml" onclick="dataLayer.push({'event': 'hdrNav -- Get Started - clicked'});">Getting Started</a></li> 
      <li id="hasMore"> <a href="/get-the-code.shtml" onclick="dataLayer.push({'event': 'hdrNav -- Get the Code - clicked'});">Get the Code</a> 
       <ul id="intOptions"> 
        <li><a href="/cardinal-cruise-activation.shtml" onclick="dataLayer.push({'event': 'hdrNav -- Cruise Dropdown - clicked'});">Cardinal Cruise Javascript Activation</a></li> 
        <li><a href="/direct-activation.shtml" onclick="dataLayer.push({'event': 'hdrNav -- Other Methods Dropdown - clicked'});">Other Activation Methods</a></li> 
        <li><a href="/assets/pdf/Integration_Guide/Cardinal_Consumer_Authentication_Integration_Guide.pdf" target="_blank" onclick="dataLayer.push({'event': 'hdrNav -- Download Guide Dropdown - clicked'});">Download the Activation Guide PDF</a></li> 
       </ul> </li> 
      <li><a href="/try-it-now.shtml" onclick="dataLayer.push({'event': 'hdrNav -- Try It Now - clicked'});">Try It Now!</a></li> 
      <li><a href="/register.shtml" onclick="dataLayer.push({'event': 'hdrNav -- Register Now - clicked'});">Register Now</a></li> 
      <li><a href="https://centinelportal.cardinalcommerce.com/" target="_blank" onclick="dataLayer.push({'event': 'hdrNav -- Login - clicked'});">Login</a></li> 
      <div class="clear"></div> 
     </ul> 
    </div> 
    <div class="clear"></div> 
   </div> 
  </div> 
  <div id="header-space"></div> 
  <div id="bannerWrap"> 
   <div id="banner" class="pageWidth"> 
    <div class="bannerLeft"> 
     <h3>CardinalCommerce<sup class="header">®</sup></h3> 
     <h4>Consumer Authentication</h4> 
    </div> 
    <div class="bannerRight"> 
     <h4>Dev Center</h4> 
    </div> 
    <div class="clear"></div> 
   </div> 
  </div> 
  <div id="docsMenu"> 
   <h4>Menu</h4> 
   <ul> 
    <li><a href="#gettingStarted">Getting Started</a></li> 
    <li class="docsMenuHeader">Activation Steps 
     <ul> 
      <li><a href="#step1">Step 1</a></li> 
      <li><a href="#step2">Step 2</a></li> 
      <li><a href="#step3">Step 3</a></li> 
      <li><a href="#step4">Step 4</a></li> 
      <li><a href="#step5">Step 5</a></li> 
      <li><a href="#furtherReading">Further Reading</a></li> 
      <li><a href="#availConfigOptions">Available Configuration Options</a></li> 
     </ul> </li> 
    <li class="docsMenuHeader">JWT Creation 
     <ul> 
      <li><a href="#generatingServerJWT">Generating a Server JWT</a></li> 
      <li><a href="#cardinalCredentials">Cardinal Credentials</a></li> 
      <li><a href="#jwtPayloadExample">JWT Payload Example</a></li> 
      <li><a href="#generatingServerJWTnet">Generating a Server JWT in .NET</a></li> 
      <li><a href="#generatingServerJWTjava">Generating a Server JWT in Java</a></li> 
      <li><a href="#generatingServerJWTphp">Generating a Server JWT in PHP</a></li> 
     </ul> </li> 
    <li class="docsMenuHeader">JWT Validation 
     <ul> 
      <li><a href="#validatingResponseJWT">Validating a Cardinal Response JWT</a></li> 
      <li><a href="#responseJwtPayloadExample">Response JWT Example</a></li> 
      <li><a href="#validatingResponseJWTnet">Validating a Cardinal Response JWT in .NET</a></li> 
      <li><a href="#validatingResponseJWTjava">Validating a Cardinal Response JWT in Java</a></li> 
      <li><a href="#validatingResponseJWTphp">Validating a Cardinal Response JWT in PHP</a></li> 
     </ul> </li> 
    <li class="docsMenuHeader">Objects 
     <ul> 
      <li><a href="#objectDefinitions">Object Definitions</a></li> 
      <li><a href="#requestOrderObject">Request Order Object</a></li> 
      <li><a href="#responseObject">Response Object</a></li> 
      <li><a href="#accountObject">Account Object</a></li> 
      <li><a href="#addressObject">Address Object</a></li> 
      <li><a href="#authObject">Authorization Object</a></li> 
      <li><a href="#cartItemObject">CartItem Object</a></li> 
      <li><a href="#consumerObject">Consumer Object</a></li> 
      <li><a href="#paymentObject">Payment Object</a></li> 
      <li><a href="#tokenObject">Token Object</a></li> 
      <li><a href="#optionsObject">Options Object</a></li> 
      <li><a href="#orderDetailsObject">OrderDetails Object</a></li> 
      <li><a href="#paymentExtensions">Payment Extensions Object</a></li> 
     </ul> </li> 
    <li class="docsMenuHeader">Error Handling 
     <ul> 
      <li><a href="#javascriptErrorHandling">Javascript Error Handling</a></li> 
      <li><a href="#detectMissingNamespace">Detect Missing Cardinal Namespace</a></li> 
      <li><a href="#handlingConnectionErrors">Handling Connection Errors</a></li> 
     </ul> </li> 
   </ul> 
  </div> 
  <div class="pageWidth"> 
   <div id="docsContent"> 
    <div id="gettingStarted" class="jumps"> 
     <h1>Cardinal Cruise Documentation</h1> 
     <p>The Cardinal Cruise libraries make it easy for you to activate CCA (Cardinal Consumer Authentication) into your checkout flow. In a few simple steps, you will be prepared to provide a great user experience to your consumers, while providing the benefits of 3-D Secure.</p> 
     <h2 id="getting-started">Getting Started</h2> 
     <p><i>Last updated - 2016-08-17</i></p> 
     <h2 id="prerequisites">Prerequisites</h2> 
     <p>Authentication within the Cardinal Cruise ecosystem is handled via <a href="http://jwt.io/" target="_blank" title="Learn about JWT's from their website">JWT</a> (JSON Web Token). In order to initialize the system for processing, it is required that a JWT is generated and passed into the first call in the chain.</p> 
     <p>Within the JWT, you will be required to specify your OrgUnitId, APIKey, &amp; APIIdentifier. If you were not provided these values upon registration, please contact your account manager.</p> 
     <p>For more information on generating a JWT, please see the following instructions:</p> 
     <div class="topLayer"> 
      <p><a href="#generatingServerJWT">Generating a Server JWT</a></p> 
     </div> 
    </div> 
    <div id="step1" class="jumps"> 
     <h2 id="integration-steps">Activation Steps</h2> 
     <p>It is Cardinal's goal to get you up and running with CCA as quickly, and painlessly, as possible. This section of the document will outline the simple steps necessary in order to take advantage of Cardinal Cruise.</p> 
     <h3 id="">Step 1 - Include the JavaScript</h3> 
     <p>This script tag can be placed directly on your page, or as part of a bundling tool within your framework of choice.</p> 
     <pre class="prettyprint">
&lt;script src="https://includestest.ccdc02.com/cardinalcruise/v1/songbird.js"&gt;&lt;/script&gt;
</pre> 
    </div> 
    <div id="step2" class="jumps"> 
     <h3>Step 2 - Configure Cardinal Cruise</h3> 
     <p>There are a number of configuration options for Cardinal Cruise. During your development, you will most likely want control over the logging volume from the library. Configure logging as follows:</p> 
     <p>For available configuration options, please see <a href="#availConfigOptions">here</a>.</p> 
     <pre class="prettyprint">
Cardinal.configure({
	logging: {
		level: "on"
	}
});
</pre> 
    </div> 
    <div id="step3" class="jumps"> 
     <h3>Step 3 - Setup the Initial Call to Cardinal Cruise</h3> 
     <p>Next we need to authenticate you and set up CCA for use. Calling <code>Cardinal.setup()</code> will begin communicating with Cardinal to ensure your consumer's experience is seamless. By the time the consumer is ready to checkout, all pre-processing necessary will be completed.</p> 
     <p><strong>NOTE:</strong> the following function must be placed <strong>after</strong> the script include shown in Step 1.</p> 
     <pre class="prettyprint">
Cardinal.setup("init", {
	jwt: [Insert your JWT here]
});
</pre> 
     <div class="hintBox"> 
      <p>A common way to pass your JWT into this JavaScript function is to place the JWT value into a hidden input on page load. Within <code>Cardinal.setup()</code>, you can then look for that element and select its value.</p> 
      <p><b>Hidden Input Example:</b></p> 
      <pre class="prettyprint">
&lt;input type="hidden" id="JWTContainer" value="[Insert your JWT here]" /&gt;
</pre> 
     </div>
     <!-- hintBox --> 
     <pre class="prettyprint">
Cardinal.setup("init", {
	jwt: document.getElementById("JWTContainer").value
});
</pre> 
     <p>Once you have added the calling function for <code>Cardinal.setup()</code>, you can then subscribe to the completion of it. You may want to do this to perform additional processing on the page after all of your payment options have successfully loaded.</p> 
     <pre class="prettyprint">
Cardinal.on("payments.setupComplete", function() {
	// For example, you may have your Submit button disabled on page load. Once you are setup
	// for CCA, you may then enable it. This will prevent users from submitting their order
	// before CCA is ready.
    document.getElementById("submitButton").disabled = false;
});
</pre> 
    </div> 
    <div id="step4" class="jumps"> 
     <h3>Step 4 - Invoke CCA (Cardinal Consumer Authentication)</h3> 
     <p>Now that Cardinal Cruise is configured and set up on your page, we are now ready to accept a consumer payment. You have the ability to invoke CCA on any event, such as a button click.</p> 
     <p>The function to invoke is as follows:</p> 
     <pre class="prettyprint">
Cardinal.start("cca", data);
</pre> 
     <p>In this example, the second argument of <code>data</code> is a <a href="#requestOrderObject">Request Order Object</a>. You can construct this object ahead of time or pass it directly, as shown here:</p> 
     <pre class="prettyprint linenums">
Cardinal.start("cca", {
  OrderDetails: {
    OrderNumber: "1234567890"
  },
  Consumer: {
    Account: {
    AccountNumber: "XXXXXXXXXXXX1234",
    ExpirationMonth: "01",
    ExpirationYear: "2099"
  }
}
  ...
});
</pre> 
     <div class="hintBox"> 
      <p><strong>Note:</strong> AccountNumber in the above example is splatted only for security in this document. You must pass the full AccountNumber. The Order Object used in the example was shortened for brevity.</p> 
     </div> 
     <p>As seen previously in <code>Cardinal.setup()</code> to retrieve the JWT value, a similar method is commonly used to fill the Order Object.</p> 
     <pre class="prettyprint linenums">
var order = {
  OrderDetails: {
    OrderNumber: document.getElementById("OrderNumber").value
  },
  Consumer: {
    Account: {
    AccountNumber: document.getElementById("AccountNumber").value,
    ExpirationMonth: document.getElementById("ExpirationMonth").value,
    ExpirationYear: document.getElementById("ExpirationYear").value
  }
 }
   ...
}
</pre> 
     <h6>Note: Request Order Object was shortened for brevity.</h6> 
    </div> 
    <div id="step5" class="jumps"> 
     <h3>Step 5 - Handle CCA Response</h3> 
     <p>Once the <code>Cardinal.start()</code> call completes, we need to handle its response. This is done by adding an event handler to your page for the <code>payments.validated</code> event. Inside of this event is where you will place your logic instructing the page what to do on a CCA success and a CCA failure. The first argument of the <code>payments.validated</code> event will contain the response Payload, which has been decoded from the JWT for your convenience. Using these values, you will be able to conduct conditional logic in each CCA response case on the front end. The second argument passed into the <code>payments.validated</code> event is the full response JWT returned to you from Cardinal. This value should be passed back to the server side and <a href="#validatingResponseJWT">validated</a> prior to accepting any success cases. We recommend that any values sent to a third party come from the JWT since you can detect when values have been tampered with.</p> 
     <div class="hintBox"> 
      <p>Before moving forward with a transaction be sure to verify the response values by <a href="#validatingResponseJWT">validating the JWT</a> on the server side.</p> 
     </div> 
     <pre class="prettyprint linenums">
Cardinal.on("payments.validated", function (data, jwt) {
	switch(data.ActionCode){
	  case "SUCCESS":
	  // Handle successful authentication scenario
	  break;
    
	  case "NOACTION":
	  // Handle unenrolled scenario
	  break;
    
	  case "FAILURE":
	  // Handle authentication failed or error encounter scenario
	  break;
    
	  case "ERROR":
	  // Handle service level error
	  break;
  }
});
</pre> 
    </div> 
    <div id="furtherReading" class="jumps"> 
     <h2>Further Reading</h2> 
     <p>This guide has walked you through the basics of integrating Cardinal Cruise, however we have additional documentation we recommend you review before releasing your product.</p> 
     <div class="topLayer"> 
      <p><a href="#javascriptErrorHandling">Error Handling</a></p> 
     </div> 
    </div> 
    <div id="availConfigOptions" class="jumps"> 
     <h2 id="available-configuration-options">Available Configuration Options</h2> 
     <table> 
      <thead> 
       <tr class="header"> 
        <th>Configuration Key</th> 
        <th>Type</th> 
        <th>Description</th> 
        <th>Possible Values</th> 
        <th>Default</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr class="odd"> 
        <td>logging</td> 
        <td>object</td> 
        <td>An object for configuring logging settings</td> 
        <td></td> 
        <td></td> 
       </tr> 
       <tr> 
        <td>logging.level</td> 
        <td>String</td> 
        <td>Set the level of logging to output to console.</td> 
        <td> 
         <ul> 
          <li><b>Off</b> - Disable logging, use this in Production environments</li> 
          <li><b>On</b> - Output some helpful logs to console</li> 
          <li><b>verbose</b> - Output all logs to console</li> 
         </ul> </td> 
        <td>Off</td> 
       </tr> 
       <tr class="odd"> 
        <td>timeout</td> 
        <td>Int</td> 
        <td>Set the default timeout value in milliseconds for making requests to Cardinal</td> 
        <td></td> 
        <td>8000</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="generatingServerJWT" class="jumps"> 
     <h2>Generating a Server JWT</h2> 
     <p>Cardinal Cruise utilizes a JWT to handle authentication and to assist in passing secure data between you and Cardinal. The JWT <strong>must</strong> be created server-side and sent to the front end to be injected into the JavaScript initialization code. Creating a JWT client-side is <strong>not</strong> a valid activation option. Each order should have a uniquely generated JWT associated with it.</p> 
     <p>The current intergration you're reviewing uses JWT's as a method of transmitting transactional data. The below examples will reflect the passing of transactional data. Please be aware if you're integrating more than 1 Songbird.js call you may have different JWT data requirements between the 2 calls.</p> 
     <p><a href="http://jwt.io/" target="_blank" title="Learn about JWT's from their website">Learn more about JWT's </a></p> 
     <h3>JWT Fields</h3> 
     <p>A valid Cardinal Cruise JWT used for to pass transactional data must have the following elements:<br> <br> </p>
     <h4>Required Fields</h4> 
     <p>Please note that each Claim key is case sensitive.</p> 
     <table> 
      <thead> 
       <tr class="header"> 
        <th>Claim</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr class="odd"> 
        <td>jti</td> 
        <td><strong>JWT Id</strong> - This is created by you and is a unique identifier that can be used to reference a particular JWT within Cardinal's system.</td> 
       </tr> 
       <tr class="even"> 
        <td>iat</td> 
        <td><strong>Issued At Time</strong> - This is a timestamp of when the JWT was created. A JWT will be considered expired by Cardinal after 2hrs.</td> 
       </tr> 
       <tr class="odd"> 
        <td>iss</td> 
        <td><strong>Issuer</strong> - Identifies who is generating the JWT. This field should contain your API Identifier value provided to you during merchant registration.</td> 
       </tr> 
       <tr class="even"> 
        <td>OrgUnitId</td> 
        <td><strong>Organization Unit Id</strong> - This value was provided to you during merchant registration.</td> 
       </tr> 
       <tr class="odd"> 
        <td>Payload</td> 
        <td>The JSON Order object that describes the Order the JWT is being created for. We strongly recommend to include as much data within the JWT as possible.</td> 
       </tr> 
       <tr class="even"> 
        <td>ObjectifyPayload</td> 
        <td>A Boolean value that indicates the type of the Payload claim. When set to true the Payload field is an object literal. When set to false the Payload claim is a serialized object. Refer to your Jwt libraries documentation on how it handles object claims. Some libraries will automatically serialize the object while others do not.</td> 
       </tr> 
      </tbody> 
     </table> 
     <div class="jumps" id="optionalFields"> 
      <h4>Optional Fields</h4> 
      <p>The following Claims are available for use but are not currently required for a valid JWT:</p> 
      <table> 
       <thead> 
        <tr class="header"> 
         <th>Claim</th> 
         <th>Description</th> 
        </tr> 
       </thead> 
       <tbody> 
        <tr class="odd"> 
         <td>exp</td> 
         <td><strong>Expiration</strong> - The time you would like Cardinal to consider your JWT expired. This value is only valid when it is less than Cardinal's max expiration time of 2hrs. This can be leveraged to create a shorter expiration period if your security requirements prefer a shorter TTL (Time-To-Live).</td> 
        </tr> 
        <tr class="even"> 
         <td>ReferenceId</td> 
         <td>This is an optional field that can be used to reference this session.</td> 
        </tr> 
        <tr class="odd"> 
         <td>ConfirmUrl</td> 
         <td>The return url Cardinal should redirect users to when the user has been redirected away from your website to complete an alternative payment brand. This url will need to receive a post with the response JWT.</td> 
        </tr> 
       </tbody> 
      </table> 
     </div> 
    </div> 
    <div id="cardinalCredentials" class="jumps"> 
     <div class="hintBox"> 
      <h3>Cardinal Credentials</h3> 
      <p>As part of registering for Cardinal Cruise you will have received 3 values that are used to authenticate yourself with Cardinal. Failure to properly authenticate using these values will result in API failures and will prevent transaction processing.</p> 
      <p><strong>API Identifier</strong> - A non-secure value that should be passed within the JWT under the <code>iss</code> claim.</p> 
      <p><strong>Org Unit Id</strong> - a non-secure value that should be passed within the JWT under the <code>OrgUnitId</code> claim.</p> 
      <p><strong>API Key</strong> - A secure value that should only ever be known between you and Cardinal. This value should never be rendered or displayed anywhere your users could find it. The API Key should only be used to sign the JWT and to verify a JWT signature from Cardinal. It should <strong>never</strong> be included within the JWT itself. </p> 
     </div> 
    </div> 
    <div id="jwtPayloadExample" class="jumps"> 
     <h3 id="jwt-payload-example">JWT Payload Example</h3> 
     <p>Below is an example of the JSON content of a basic JWT Payload where we are passing an object within the Payload claim:</p> 
     <pre class="prettyprint"><code>
{
	"jti": "a5a59bfb-ac06-4c5f-be5c-351b64ae608e",
	"iat": 1448997865,
	"iss": "56560a358b946e0c8452365ds",
	"OrgUnitId": "565607c18b946e058463ds8r",
	"Payload": {
		"OrderDetails": {
			"OrderNumber": "0e5c5bf2-ea64-42e8-9ee1-71fff6522e15",
			"Amount": "1500",
			"CurrencyCode": "840"
		}
	},
	"ObjectifyPayload": true,
	"ReferenceId": "c88b20c0-5047-11e6-8c35-8789b865ff15",
	"exp": 1449001465,
	"ConfirmUrl": 'https://mywebsite.com/confirmHandler'
}
</code></pre> 
     <p>Below is an example of the JSON content of a basic JWT Payload where we are passing a string within the Payload claim:</p> 
     <pre class="prettyprint"><code>
{
	"jti": "29311a10-5048-11e6-8c35-8789b865ff15",
	"iat": 1448997875,
	"iss": "56560a358b946e0c8452365ds",
	"OrgUnitId": "565607c18b946e058463ds8r",
	"Payload": "{\"OrderDetails\":{\"OrderNumber\":\"19ec6910-5048-11e6-8c35-8789b865ff15\",\"Amount\":\"1500\",\"CurrencyCode\":\"840\"}}",
	"ObjectifyPayload" false
	"ReferenceId": "074fda80-5048-11e6-8c35-8789b865ff15"
	"exp":1449001465,
	"ConfirmUrl": 'https://mywebsite.com/confirmHandler'
}
</code></pre> 
    </div> 
    <div id="generatingServerJWTnet" class="jumps"> 
     <h2 id="generating-a-server-jwt-in-.net">Generating a Server JWT in .NET</h2> 
     <p>We recommend using an existing third party library to assist you in generating a JWT. Some of our recommendations are:</p> 
     <p><a href="https://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt/" target="_blank" title="Third party JWT library resource">JSON Web Token Handler - <i>www.nuget.org</i></a></p> 
     <p><a href="https://github.com/jwt-dotnet/jwt" target="_blank" title="Third party JWT library resource">JWT - <i>GitHub.com</i></a></p> 
     <p>The JWT.io website contains a list of additional approved libraries, with their feature sets. <a href="http://jwt.io/#libraries-io" target="_blank" title="Find additional JWT library resources from their website">Check it out here</a>.</p> 
     <pre class="prettyprint linenums"><code>
// This sample code was written using the JSON Web Token Handler library.

using System.Configuration;
using System.Web.Mvc;
using CardinalCruiseDemoSite.Helpers;
using CardinalCruiseDemoSite.Models.View;

namespace CardinalCruiseDemoSite.Controllers
{
    public class HomeController : Controller
    {
        private readonly JwtHelper _jwtHelper = new JwtHelper();

        public ActionResult Index()
        {
            var apiKey = ConfigurationManager.AppSettings["APIKey"];
            var apiIdentifier = ConfigurationManager.AppSettings["APIIdentifier"];
            var orgUnitId = ConfigurationManager.AppSettings["OrgUnitId"];

            var jwt = _jwtHelper.GenerateJwt(apiKey, apiIdentifier, orgUnitId);

            return View(new CardinalCruiseViewModel {JWT = jwt});
        }
    }
}
</code></pre> 
     <pre class="prettyprint linenums"><code>
namespace CardinalCruiseDemoSite.Models.View
{
    public class CardinalCruiseViewModel
    {
        public string JWT { get; set; }
    }
}
</code></pre> 
     <p>This is an example of a JWT object class.</p> 
     <pre class="prettyprint linenums"><code>
using System;
using System.Collections.Generic;
using CardinalCruiseDemoSite.Models;
using JWT;

namespace CardinalCruiseDemoSite.Helpers
{
    public class JwtHelper
    {
        public string GenerateJwt(string apiKey, string apiIdentifier, string orgUnitId)
        {
            var payload = new Dictionary&lt;string, object&gt;
            {
                {"exp", DateTime.UtcNow.AddDays(365).ToUnixTime()},
                {"iat", DateTime.Now.ToUnixTime()},
                {"jti", Guid.NewGuid()},
                {"iss", apiIdentifier},
                {"OrgUnitId", orgUnitId},
                {
                    "Payload", new Order
                    {
                        OrderDetails = new OrderDetails
                        {
                            OrderNumber = Guid.NewGuid().ToString()
                        }
                    }
                }
            };

            return JsonWebToken.Encode(payload, apiKey, JwtHashAlgorithm.HS256);
        }
    }
}
</code></pre> 
     <div class="hintBox"> 
      <p>It is important that you generate the JWT expiration using UNIX time. We recommend using a library such as <strong>NodaTime</strong> from <a href="http://nodatime.org/" target="_blank" title="NodaTime library website">NodaTime.org</a> to help with this. If you are unable to use a third party library, here is a helper function you may use (this is used in the example above):</p> 
     </div> 
     <pre class="prettyprint linenums"><code>
using System;

namespace CardinalCruiseDemoSite.Helpers
{
    public static class DateTimeHelper
    {
        public static long ToUnixTime(this DateTime date)
        {
            var epoch = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            return Convert.ToInt64((date - epoch).TotalSeconds);
        }
    }
}
</code></pre> 
    </div> 
    <div id="generatingServerJWTjava" class="jumps"> 
     <h2>Generating a Server JWT in Java</h2> 
     <p>We recommend using an existing third party library to assist you in generating a JWT. The JWT.io website contains a list of approved libraries, with their feature sets. <a href="http://jwt.io/#libraries-io" target="_blank" title="Find additional JWT library resources from their website">Check it out here</a>.</p> 
     <pre class="prettyprint linenums"><code>
// This sample code was written using the Java JWT
// library (https://github.com/jwtk/jjwt) found at JWT.io

import io.jsonwebtoken.JwtBuilder;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;

import java.security.Key;
import java.util.Date;
import java.util.UUID;

import javax.crypto.spec.SecretKeySpec;

public class generateJWT {
  
	public static String apiKey = "";
	public static String apiIdentifier = "";
	public static String orgUnitId = "";
  
	// Sample method to construct a JWT
	public static String createJWT(String jwtId, long ttlMillis, Order orderObject) {
  
		// The JWT signature algorithm we will be using to sign the token
		SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;
  
		long nowMillis = System.currentTimeMillis();
		Date now = new Date(nowMillis);
  
		// We will sign our JWT with our API Key
		byte[] apiKeySecretBytes = apiKey.getBytes();
		Key signingKey = new SecretKeySpec(apiKeySecretBytes, 
		signatureAlgorithm.getJcaName());
  
		// Let's set the JWT Claims
		JwtBuilder builder = Jwts.builder()
			.setId(jwtId)     
			.setIssuedAt(now)
			.setIssuer(apiIdentifier)
			.claim("OrgUnitId", orgUnitId)
			.claim("Payload", orderObject)
			.signWith(signatureAlgorithm, signingKey);
  
		// Add the expiration or TTL (Time To Live) for this JWT
		if (ttlMillis &gt; 0) {
			long expMillis = nowMillis + ttlMillis;
			Date exp = new Date(expMillis);
			builder.setExpiration(exp);
		}
  
		// Builds the JWT and serializes it to a compact, URL-safe string
		return builder.compact();
	}
}
</code></pre> 
    </div> 
    <div id="generatingServerJWTphp" class="jumps"> 
     <h2>Generating a Server JWT in PHP</h2> 
     <p>We recommend using an existing third party library to assist you in generating a JWT. The JWT.io website contains a list of approved libraries, with their feature sets. <a href="http://jwt.io/#libraries-io" target="_blank" title="Find additional JWT library resources from their website">Check it out here</a>.</p> 
     <pre class="prettyprint linenums"><code>
&lt;?php
	/* 
	composer.json Example:
	{
		"require": {
			"lcobucci/jwt": "3.1.0" // Note: Requires PHP 7
			}
	}
	*/
	
	require "vendor/autoload.php"; // Autoload.php is generated by Composer
	
	use Lcobucci\JWT\Builder;
	use Lcobucci\JWT\Signer\Hmac\Sha256;
	
	$GLOBALS['ApiKey'] = '[INSERT_API_KEY_HERE]';
	$GLOBALS['ApiId'] = '[INSERT_API_KEY_ID_HERE]';
	$GLOBALS['OrgUnitId'] = '[INSERT_ORG_UNIT_ID_HERE]';
	
	$_SESSION['TransactionId'] = uniqid();
	
	$_SESSION['Order'] = array(
		"OrderDetails" =&gt; array(
			"OrderNumber" =&gt;  'ORDER-' . strval(mt_rand(1000, 10000)),
			"Amount" =&gt; '1500',
			"CurrencyCode" =&gt; '840'
			)
	);
	
	function generateJwt($orderTransactionId, $orderObj){
	
		$currentTime = time();
		$expireTime = 3600; // expiration in seconds - this equals 1hr
	
		$token = (new Builder())-&gt;setIssuer($GLOBALS['ApiId']) // API Key Identifier (iss claim)
					-&gt;setId($orderTransactionId, true) // The Transaction Id (jti claim)
					-&gt;setIssuedAt($currentTime) // Configures the time that the token was issued (iat claim)
					-&gt;setExpiration($currentTime + $expireTime) // Configures the expiration time of the token (exp claim)
					-&gt;set('OrgUnitId', $GLOBALS['OrgUnitId']) // Configures a new claim, called "OrgUnitId"
					-&gt;set('Payload', $_SESSION['Order']) // Configures a new claim, called "Payload", containing the OrderDetails
					-&gt;set('ObjectifyPayload', true)
					-&gt;sign(new Sha256(), $GLOBALS['ApiKey']) // Sign with API Key
					-&gt;getToken(); // Retrieves the generated token
	
		return $token; // The JWT String
	}
	
	echo generateJwt($_SESSION['TransactionId'], $_SESSION['Order']);
?&gt;
</code></pre> 
    </div> 
    <div id="validatingResponseJWT" class="jumps"> 
     <h2>Validating a Cardinal Response JWT</h2> 
     <p>Cardinal will respond back to all requests made through Cardinal Cruise with a JWT when it can. To validate that the response data was sent by Cardinal and can be trusted, you should always validate the JWT signature on the server side. It's recommended that you choose a JWT library with signature verification built in instead of doing this by hand. In most cases validating a JWT with a library is a simple 1 line command</p> 
     <p>The <code>payments.validated</code> event will pass back 2 arguments. The decoded data object from the JWT and the raw response JWT. The decoded data object is the decoded JWT payload passed back for your convience to allow front end logic to be easily executed based on the response. The decoded data object is returned without validating the data hasn't been tampered with. Once you validate the raw response JWT, the values pulled from the raw JWT should always be more trusted than values passed back in the decoded data object. Response JWT validation should always take place in your backend systems to ensure that the Api Key is kept secrete.</p> 
     <div class="hintBox"> 
      <p>When passing response fields to third parties, we recommend using the JWT values since you're able to determine if they have been tampered with.</p> 
     </div> 
     <p>There are some limited cases where a response JWT will not be returned to the <code>payments.validated</code> event. Each cases will result in an ActionCode of <code>ERROR</code>.</p> 
     <ul class="styled-list"> 
      <li>Songbird.js times out when sending messages to Cardinal servers. Since no connection was made to Cardinal servers we will not be able to return back a response JWT.</li> 
      <li>Cardinal Servers were unable to verify the callers identity. This can occur if there is a problem with how the credentials are being used on the request JWT. Often a missing require field or the wrong API key was used to sign the request JWT.</li> 
     </ul> 
     <div class="hintBox"> 
      <p>If you ever receive an ActionCode of <code>SUCCESS</code> or <code>NOACTION</code> and do not receive a JWT, you should consider this to be a failure and reject the transaction.</p> 
     </div> 
     <h3>JWT Fields</h3> 
     <p>A valid Cardinal Cruise JWT used for to pass transactional data must have the following elements:<br> <br> </p>
     <h4>Required Fields</h4> 
     <p>Please note that each Claim key is case sensitive.</p> 
     <table> 
      <thead> 
       <tr class="header"> 
        <th>Claim</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr class="odd"> 
        <td>aud</td> 
        <td><strong>Merchant jti Id</strong> - This is the 'jti' field from your request JWT echoed back. This field allows you to match up your request JWT with Cardinals response JWT.</td> 
       </tr> 
       <tr class="odd"> 
        <td>jti</td> 
        <td><strong>JWT Id</strong> - A unique identifier for this response JWT. This value is generated by Cardinal.</td> 
       </tr> 
       <tr class="even"> 
        <td>iat</td> 
        <td><strong>Issued At Time</strong> - This is a timestamp of when the JWT was created.</td> 
       </tr> 
       <tr class="odd"> 
        <td>iss</td> 
        <td><strong>Issuer</strong> - The request JWT's iss field echoed back.</td> 
       </tr> 
       <tr class="odd"> 
        <td>ConsumerSessionId</td> 
        <td>The unique session Id for the current user.</td> 
       </tr> 
       <tr class="even"> 
        <td>OrgUnitId</td> 
        <td><strong>Organization Unit Id</strong> - The request JWT's OrgUnitId echoed back.</td> 
       </tr> 
       <tr class="odd"> 
        <td>Payload</td> 
        <td>The <a href="#responseObject">response object</a> for your request. This field will contain any actual state information on the transaction. This is the decoded data object that is passed into the <code>payments.validated</code> event as the first argument.</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="responseJwtPayloadExample" class="jumps"> 
     <h3 id="response-Jwt-Payload-Example">JWT Payload Example</h3> 
     <p>Below is an example of the JSON content of a basic response JWT Payload where we are passing an object within the Payload claim:</p> 
     <pre class="prettyprint"><code>
{
    "iss": "56560a358b946e0c8452365ds",
    "iat": 1471014492,
    "exp": 1471021692,
    "jti": "8af34811-f97d-495a-ad19-ec2f68004f28",
    "ConsumerSessionId": "0e1ae450-df2b-4872-94f7-f129a2ddab18",
    "Payload": {
        "Validated": true,
        "Payment": {
            "Type": "CCA",
            "ExtendedData": {
                "CAVV": "AAABAWFlmQAAAABjRWWZEEFgFz+=",
                "ECIFlag": "05",
                "PAResStatus": "Y",
                "SignatureVerification": "Y",
                "XID": "MHEyQjFRQkttemdpaFlRdHowWTA=",
                "Enrolled": "Y"
            }
        },
        "ActionCode": "SUCCESS",
        "ErrorNumber": 0,
        "ErrorDescription": "Success"
    }
}
    </code></pre> 
     <p>Below is an example of the JSON content of a basic response JWT Payload where we are passing a string within the Payload claim. This would occur when the request JWT included a <code>ObjectifyPayload</code> flag set to false:</p> 
     <pre class="prettyprint"><code>
}
    "iss": "56560a358b946e0c8452365ds",
    "iat": 1471015342,
    "exp": 1471022542,
    "jti": "55ebfa2a-665f-4d6b-81ea-37d1d4d12d9e",
    "ConsumerSessionId": "fb3a97a3-0344-4d3d-93ea-6482d866ec97",
    "Payload": "{\"Validated\":true,\"Payment\":{\"Type\":\"CCA\",\"ExtendedData\":{\"CAVV\":\"AAABAWFlmQAAAABjRWWZEEFgFz+\\u003d\",\"ECIFlag\":\"05\",\"PAResStatus\":\"Y\",\"SignatureVerification\":\"Y\",\"XID\":\"MFpjUVpwb0FXcHdwMWJBdldwNDA\\u003d\",\"Enrolled\":\"Y\"}},\"ActionCode\":\"SUCCESS\",\"ErrorNumber\":0,\"ErrorDescription\":\"Success\"}"
}
    </code></pre> 
    </div> 
    <div id="validatingResponseJWTnet" class="jumps"> 
     <h2 id="validating-a-server-jwt-in-.net">Validating a Response JWT in .NET</h2> 
     <p>We recommend using an existing third party library to assist you in generating and validating JWTs. Some of our recommendations are:</p> 
     <p><a href="https://www.nuget.org/packages/System.IdentityModel.Tokens.Jwt/" target="_blank" title="Third party JWT library resource">JSON Web Token Handler - <i>www.nuget.org</i></a></p> 
     <p><a href="https://github.com/jwt-dotnet/jwt" target="_blank" title="Third party JWT library resource">JWT - <i>GitHub.com</i></a></p> 
     <p>The JWT.io website contains a list of additional approved libraries, with their feature sets. <a href="http://jwt.io/#libraries-io" target="_blank" title="Find additional JWT library resources from their website">Check it out here</a>.</p> 
     <pre class="prettyprint linenums"><code>
    public string DecodeAndValidateResponseJwt(string responseJwt)
    {
        string jsonPayload = string.Empty;
        try
        {
            var apiKey = ConfigurationManager.AppSettings["APIKey"];

            jsonPayload = JWT.JsonWebToken.Decode(responseJwt, apiKey);
            Console.WriteLine(jsonPayload);
        }
        catch (JWT.SignatureVerificationException)
        {
            Console.WriteLine("Signature validation failed! JWT is not valid!");
        }

        return jsonPayload;
    }
    </code></pre> 
    </div> 
    <div id="validatingResponseJWTjava" class="jumps"> 
     <h2>Validating a Response JWT in Java</h2> 
     <p>We recommend using an existing third party library to assist you in generating and validating JWTs. The JWT.io website contains a list of approved libraries, with their feature sets. <a href="http://jwt.io/#libraries-io" target="_blank" title="Find additional JWT library resources from their website">Check it out here</a>.</p> 
     <pre class="prettyprint linenums"><code>
    // The jwt argument is the Cardinal response jwt handed back to the payments.validated event. 
    // This value is NOT the request jwt generated by the merchant and sent to Cardinal.
    public static boolean validateJwt(String jwt) {
        
        try{
            // The API Key used here to validate the Cardinal response is the same 
            // API Key you use to generate your request jwt.
            Claims claims = (Claims) Jwts.parser()
                .setSigningKey(apiKey.getBytes())
                .parse(jwt)
                .getBody();
                
            System.out.println("Signature Verified");
                        
            return true;
            
        } catch(SignatureException se) {
            System.out.println("Signature Validation Failed! JWT is not valid.");
        } catch(Exception ex){
        	System.out.println("General Error: " + ex.getMessage());
        }
        
        return false;
    }
    </code></pre> 
    </div> 
    <div id="validatingResponseJWTphp" class="jumps"> 
     <h2>Validating a Response JWT in PHP</h2> 
     <p>We recommend using an existing third party library to assist you in generating and validating JWTs. The JWT.io website contains a list of approved libraries, with their feature sets. <a href="http://jwt.io/#libraries-io" target="_blank" title="Find additional JWT library resources from their website">Check it out here</a>.</p> 
     <pre class="prettyprint linenums"><code>
&lt;?php

    /* 
    composer.json Example:
    {
        "require": {
            "firebase/php-jwt": "^4.0"
        }
    }
    */

    require "vendor/autoload.php"; // Autoload.php generated by Composer
    
    use Firebase\JWT\JWT;

    $GLOBALS['ApiKey'] = '[INSERT_API_KEY_HERE]';
    $GLOBALS['ApiId'] = '[INSERT_API_KEY_ID_HERE]';
    $GLOBALS['OrgUnitId'] = '[INSERT_ORG_UNIT_ID_HERE]';

    function validateJwt($jwt) {
        // This will validate JWT Requests or Responses from Cardinal.
        try{
            // Validate the JWT by virtue of successful decoding
            $decoded = JWT::decode($jwt, $GLOBALS['ApiKey'], array('HS256'));
            // Cardinal JWT Request &amp; Responses should always contain the Merchants OrgUnitId
            return strcmp($decoded-&gt;OrgUnitId,  $GLOBALS['OrgUnitId']) == 0;
        } catch (Exception $e) {
            echo "Exception in validateJwt: ", $e-&gt;getMessage(), "\n";
        }
        return false;
    }
?&gt;
    </code></pre> 
    </div> 
    <!-- ========================================= 
		Objects Section
============================================== --> 
    <div id="objectDefinitions" class="jumps"> 
     <h2>Object Definitions</h2> 
     <p>Below are the objects needed to complete a Cardinal Cruise activation. Most objects will be re-used between Request and Response. </p> 
    </div> 
    <div id="requestOrderObject" class="jumps"> 
     <h3>Request Order Object</h3> 
     <p>This object is used in the <code>Cardinal.start()</code> event to pass Order data to Cardinal.</p> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>OrderDetails</td> 
        <td>OrderDetails</td> 
        <td>The object that describes basic details about the order</td> 
       </tr> 
       <tr> 
        <td>Consumer</td> 
        <td>Consumer</td> 
        <td>Consumer object containing BillingAddress, ShippingAddress, and Account</td> 
       </tr> 
       <tr> 
        <td>Cart</td> 
        <td>List&lt;CartItem&gt;</td> 
        <td>The items in the cart for the current transaction</td> 
       </tr> 
       <tr> 
        <td>Token</td> 
        <td>Token</td> 
        <td>The token details associated with this transaction</td> 
       </tr> 
       <tr> 
        <td>Options</td> 
        <td>Options</td> 
        <td>An object containing any additional option flags</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="responseObject" class="jumps"> 
     <h3 id="response-object">Response Object</h3> 
     <p>This object is returned on the <code>payments.validated</code> event to pass the results of <code>Cardinal.start()</code> back to you.</p> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>ActionCode</td> 
        <td>AN(30)</td> 
        <td>The resulting state of the transaction. Possible values: 
         <ul> 
          <li><strong>SUCCESS</strong> - The transaction resulted in success for the payment type used. For example, with a CCA transaction this would indicate the user has successfully completed authentication.</li> 
          <li><strong>NOACTION</strong> - The transaction was successful but requires in no additional action. For example, with a CCA transaction this would indicate that the user is not currently enrolled in 3-D Secure, but the API calls were successful. </li> 
          <li><strong>FAILURE</strong> - The transaction resulted in an error. For example, with a CCA transaction this would indicate that the user failed authentication or an error was encountered while processing the transaction.</li> 
          <li><strong>ERROR</strong> - A service level error was encountered. These are generally reserved for connectivity or API authentication issues. For example if your JWT was incorrectly signed, or Cardinal services are currently unreachable.</li> 
         </ul> </td> 
       </tr> 
       <tr> 
        <td>Validated</td> 
        <td>bool</td> 
        <td>This value represents whether CCA was run successfully or not.</td> 
       </tr> 
       <tr> 
        <td>ErrorNumber</td> 
        <td>AN(255)</td> 
        <td>Application error number. A non-zero value represents the error encountered while attempting the process the message request. </td> 
       </tr> 
       <tr> 
        <td>ErrorDescription</td> 
        <td>AN(255)</td> 
        <td>Application error description for the associated error number.</td> 
       </tr> 
       <tr> 
        <td>Payment</td> 
        <td>Payment</td> 
        <td>Payment object. Please see the specification below.</td> 
       </tr> 
       <tr> 
        <td>Consumer</td> 
        <td>Consumer</td> 
        <td>Consumer object. Please see the specification below.</td> 
       </tr> 
       <tr> 
        <td>Token</td> 
        <td>Token</td> 
        <td>Token object. Please see the specification below.</td> 
       </tr> 
       <tr> 
        <td>Authorization</td> 
        <td>Authorization</td> 
        <td>Authorization object. Please see the specification below.</td> 
       </tr> 
       <tr> 
        <td>AuthorizationProcessor</td> 
        <td>AuthorizationProcessor</td> 
        <td>AuthorizationProcessor object. Please see the specification below.</td> 
       </tr> 
       <tr> 
        <td>JWE</td> 
        <td>String</td> 
        <td>An optional response field that will only be present when secure data that needs to be transported encrypted is being returned on the response. This is most commonly seen in wallet integrations, like Visa Wallet, where a card number is returned for the merchant to authorize and capture against.</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="accountObject" class="jumps"> 
     <h3 id="account">Account Object</h3> 
     <p>This object should be used to pass account information to Cardinal.</p> 
     <p><strong>NOTE:</strong> If you are using tokenization, either the Account object should be passed on a CCA request or a Token object. A valid CCA request cannot have both.</p> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>AccountNumber</td> 
        <td>N(19)</td> 
        <td>Consumer's Account Number. This represents the Consumer's Credit Card Number.</td> 
       </tr> 
       <tr> 
        <td>ExpirationMonth</td> 
        <td>N(2)</td> 
        <td>Account/Credit Card Expiration Month in MM format.<br> <strong>Example:</strong> January = 01</td> 
       </tr> 
       <tr> 
        <td>ExpirationYear</td> 
        <td>N(4)</td> 
        <td>Account/Credit Card Expiration Year in YYYY format.<br><strong>Example:</strong> 2016</td> 
       </tr> 
       <tr> 
        <td>NameOnAccount</td> 
        <td>AN(50)</td> 
        <td>Name on the Consumer's Account/Credit Card.</td> 
       </tr> 
       <tr> 
        <td>CardCode</td> 
        <td>N(4)</td> 
        <td>This is the CVV Code present on the back (or on the front in the case of AMEX) of a Consumer's Credit Card . This is <strong>required</strong> on Credit Card transactions.</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="addressObject" class="jumps"> 
     <h3 id="address">Address Object</h3> 
     <p>This object will be used for both Billing and Shipping address information.</p> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>FirstName</td> 
        <td>AN(50)</td> 
        <td>Consumer's First Name.</td> 
       </tr> 
       <tr> 
        <td>MiddleName</td> 
        <td>AN(50)</td> 
        <td>Consumer's Middle Name.</td> 
       </tr> 
       <tr> 
        <td>LastName</td> 
        <td>AN(50)</td> 
        <td>Consumer's Last Name.</td> 
       </tr> 
       <tr> 
        <td>Address1</td> 
        <td>AN(50)</td> 
        <td>Consumer's address information.</td> 
       </tr> 
       <tr> 
        <td>Address2</td> 
        <td>AN(50)</td> 
        <td>Consumer's address information.</td> 
       </tr> 
       <tr> 
        <td>Address3</td> 
        <td>AN(50)</td> 
        <td>Consumer's address information.</td> 
       </tr> 
       <tr> 
        <td>City</td> 
        <td>AN(50)</td> 
        <td>Consumer's City.</td> 
       </tr> 
       <tr> 
        <td>State</td> 
        <td>AN(50)</td> 
        <td>Consumer's State.</td> 
       </tr> 
       <tr> 
        <td>PostalCode</td> 
        <td>AN(10)</td> 
        <td>Consumer's Postal Code.</td> 
       </tr> 
       <tr> 
        <td>CountryCode</td> 
        <td>AN(3)</td> 
        <td>Consumer's Country Code.</td> 
       </tr> 
       <tr> 
        <td>Phone1</td> 
        <td>AN(20)</td> 
        <td>Consumer's primary Phone Number.</td> 
       </tr> 
       <tr> 
        <td>Phone2</td> 
        <td>AN(20)</td> 
        <td>Consumer's alternative Phone Number.</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="authObject" class="jumps"> 
     <h3 id="authorization">Authorization Object</h3> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>AuthorizeAccount</td> 
        <td>bool</td> 
        <td>An indicator of whether you would like to run an authorization on this transaction or not. This value will default to your preference inside of your Merchant profile, if not provided.</td> 
       </tr> 
       <tr> 
        <td>Status</td> 
        <td>AN(50)</td> 
        <td>Possible Values:<br> 
         <ul> 
          <li><strong>Success</strong> - Authorization was completed successfully.</li> 
          <li><strong>Declined</strong> - Authorization was declined.</li> 
          <li><strong>NA</strong></li> 
         </ul> </td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="authProcessorObject" class="jumps"> 
     <h3 id="authorizationProcessor">Authorization Processor Object</h3> 
     <p>This object describes the result of seeding a transaction for authorization with a 3rd party gateway service.</p> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>ProcessorOrderId</td> 
        <td>AN(255)</td> 
        <td>The OrderId returned back from the Processor.</td> 
       </tr> 
       <tr> 
        <td>ProcessorTransactionId</td> 
        <td>AN(255)</td> 
        <td>The Transaction Identifier returned back from the Processor.</td> 
       </tr> 
       <tr> 
        <td>ReasonCode</td> 
        <td>AN(255)</td> 
        <td>Third party error number. A non-zero value represents the error encountered while attempting the process the message request. </td> 
       </tr> 
       <tr> 
        <td>ReasonDescription</td> 
        <td>AN(255)</td> 
        <td>Third party error description for the associated ReasonCode.</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="authResult" class="jumps"> 
     <h3 id="authorizationResult">Authorization Result Object</h3> 
     <p>This object describes the result of an authorization attempt.</p> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>Status</td> 
        <td>AN(30)</td> 
        <td> The result of the authorization attempt. Possible Values: 
         <ul> 
          <li><b>Success</b> - The authorization attempt was successful and you will be accepting this payment.</li> 
          <li><b>Failure</b> - The authorization attempt failed, and you will not be accepting this payment.</li> 
         </ul> </td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="cartItemObject" class="jumps"> 
     <h3 id="cartitem">CartItem Object</h3> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>Name</td> 
        <td>AN(128)</td> 
        <td>Name of Item Purchased.</td> 
       </tr> 
       <tr> 
        <td>SKU</td> 
        <td>AN(20)</td> 
        <td>Merchant SKU of Item.</td> 
       </tr> 
       <tr> 
        <td>Quantity</td> 
        <td>N(20)</td> 
        <td>Count of Item being purchased.</td> 
       </tr> 
       <tr> 
        <td>Description</td> 
        <td>AN(256)</td> 
        <td>Brief description of the Item being purchased.</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="consumerObject" class="jumps"> 
     <h3 id="consumer">Consumer Object</h3> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>Email1</td> 
        <td>AN(255)</td> 
        <td>Consumer's primary E-mail Address .</td> 
       </tr> 
       <tr> 
        <td>Email2</td> 
        <td>AN(255)</td> 
        <td>Consumer's alternate E-mail Address.</td> 
       </tr> 
       <tr> 
        <td>ShippingAddress</td> 
        <td>Address</td> 
        <td>Consumer's Shipping Address.</td> 
       </tr> 
       <tr> 
        <td>BillingAddress</td> 
        <td>Address</td> 
        <td>Consumer's Billing Address.</td> 
       </tr> 
       <tr> 
        <td>Account</td> 
        <td>Account</td> 
        <td>Consumer's Account information.</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="paymentObject" class="jumps"> 
     <h3 id="payment">Payment Object</h3> 
     <p>The payment object is a generic container for the response fields of the specific payment action that has been completed. The ExtendedData field will contain a single payment extension object of the type passed back in the <code>Type</code> field. So for example a CCA response object would contain a Payment object with a <code>Type</code> of 'CCA' and a CCAExtension ExtendedData object. </p>
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>Type</td> 
        <td>AN(50)</td> 
        <td> The payment type of this transaction. <br>Possible Values:<br> 
         <ul> 
          <li><strong>CCA</strong> - Cardinal Consumer Authentication</li> 
          <li><strong>Paypal</strong></li> 
          <li><strong>Wallet</strong></li> 
          <li><strong>VisaCheckout</strong></li> 
          <li><strong>ApplePay</strong></li> 
          <li><strong>DiscoverWallet</strong></li> 
         </ul> </td> 
       </tr> 
       <tr> 
        <td>ReasonCode</td> 
        <td>AN(255)</td> 
        <td>Third party error number. A non-zero value represents the error encountered while attempting the process the message request. </td> 
       </tr> 
       <tr> 
        <td>ReasonDescription</td> 
        <td>AN(255)</td> 
        <td>Third party error description for the associated ReasonCode.</td> 
       </tr> 
       <tr> 
        <td>ProcessorTransactionId</td> 
        <td>AN(255)</td> 
        <td>The Transaction Identifier returned back from the Processor.</td> 
       </tr> 
       <tr> 
        <td>OrderId</td> 
        <td>AN(255)</td> 
        <td>Centinel generated order identifier. Used to link multiple actions (authorize, capture, refund, etc) on a single order to a single identifier. Mod-10 compliant and unique BIN range to CardinalCommerce services.</td> 
       </tr> 
       <tr> 
        <td>OrderNumber</td> 
        <td>AN(255)</td> 
        <td>Order Number or transaction identifier from the Merchant website.</td> 
       </tr> 
       <tr> 
        <td>BillingAddress</td> 
        <td>Address</td> 
        <td>Consumers billing address. This field may not be present in every payment brand.</td> 
       </tr> 
       <tr> 
        <td>ShippingAddress</td> 
        <td>Address</td> 
        <td>Consumers shipping address. This field may not be present in every payment brand.</td> 
       </tr> 
       <tr> 
        <td>ExtendedData</td> 
        <td>Payment Extension Object</td> 
        <td>This will contain an extension object that corresponds to the Payment Type of this transaction. Refer to the Payment object Type field for what extension type this field is.</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="tokenObject" class="jumps"> 
     <h3 id="token">Token Object</h3> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>Token</td> 
        <td>AN(20)</td> 
        <td>If the merchant account has tokenization enabled through Cardinal or another payment platform, the token will be returned in this field</td> 
       </tr> 
       <tr> 
        <td>ExpirationMonth</td> 
        <td>N(2)</td> 
        <td>Account/Credit Card Expiration Month in MM format.<br> <strong>Example:</strong> January = 01</td> 
       </tr> 
       <tr> 
        <td>ExpirationYear</td> 
        <td>N(4)</td> 
        <td>Account/Credit Card Expiration Year in YYYY format.<br><strong>Example:</strong> 2016</td> 
       </tr> 
       <tr> 
        <td>ReasonCode</td> 
        <td>AN(255)</td> 
        <td>Third party error number. A non-zero value represents the error encountered while attempting the process the message request. </td> 
       </tr> 
       <tr> 
        <td>ReasonDescription</td> 
        <td>AN(255)</td> 
        <td>Third party error description for the associated ReasonCode.</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="optionsObject" class="jumps"> 
     <h3 id="options">Options Object</h3> 
     <p>The options object is used to enable or disable different functionality in Cardinal Cruise. This object is optional, but can be used in advanced activations to further customize the Cardinal Cruise experiece.</p> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>EnableCCA</td> 
        <td>bool</td> 
        <td> <p>A flag that will enable or disable CCA processing for this transaction.</p> Possible Values:<br> 
         <ul> 
          <li><strong>true</strong> - Enables CCA for this transaction</li> 
          <li><strong>false</strong> - Disables CCA for this transaction</li> 
         </ul> <p><strong>NOTE:</strong> While this flag can be used to enable CCA, your merchant account must be configured to process CCA beforehand. This flag simply lets you control when CCA will be used to authenticate consumers.</p> </td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="orderDetailsObject" class="jumps"> 
     <h3 id="orderdetails">OrderDetails Object</h3> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Required</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>OrderNumber</td> 
        <td>AN(50)</td> 
        <td>YES</td> 
        <td>This represents your Order Number or transaction identifier.</td> 
       </tr> 
       <tr> 
        <td>Amount</td> 
        <td>N(20)</td> 
        <td>YES</td> 
        <td>Unformatted total transaction amount without any decimalization.<br><strong>Example</strong>: $100.00 = 10000, $123.67 = 12367, $.99 = 99</td> 
       </tr> 
       <tr> 
        <td>CurrencyCode</td> 
        <td>N(3)</td> 
        <td>YES</td> 
        <td>3 digit ISO 4217 value. Accepts either the Currency Number or Currency Code.<br><strong>Example</strong>: "840" or "USD"</td> 
       </tr> 
       <tr> 
        <td>OrderDescription</td> 
        <td>AN(256)</td> 
        <td></td> 
        <td>Brief Description of Items purchased.</td> 
       </tr> 
       <tr> 
        <td>OrderChannel</td> 
        <td>AN(16)</td> 
        <td></td> 
        <td>Specifies the order channel where the transaction was initiated.<br> 
         <ul> 
          <li><strong>M</strong>  MOTO (Mail Order Telephone Order)</li> 
          <li><strong>R</strong>  Retail</li> 
          <li><strong>S</strong>  eCommerce</li> 
          <li><strong>P</strong>  Mobile Device</li> 
          <li><strong>T</strong>  Tablet</li> 
         </ul> </td> 
       </tr> 
       <tr> 
        <td>TransactionId</td> 
        <td>AN(50)</td> 
        <td></td> 
        <td>This value is the TransactionId field from a cmpi_lookup response from Centinel. This field is only used with a hybrid integration. This field is <b>required</b> for a hybrid integration.</td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <div id="paymentExtensions" class="jumps"> 
     <h3 id="payment-extensions">Payment Extensions</h3> 
     <h4 id="ccaextension">CCAExtension</h4> 
     <p>This object contains the specific response values used in CCA.</p> 
     <table> 
      <thead> 
       <tr> 
        <th>Field</th> 
        <th>Type</th> 
        <th>Description</th> 
       </tr> 
      </thead> 
      <tbody> 
       <tr> 
        <td>Enrolled</td> 
        <td>AN(1)</td> 
        <td><p>Status of Authentication eligibility.</p> Possible Values: 
         <ul> 
          <li><strong>Y</strong> = Yes- Bank is participating in 3D Secure protocol and will return the ACSUrl</li> 
          <li><strong>N</strong> = No - Bank is not participating in 3D Secure protocol</li> 
          <li><strong>U</strong> = Unavailable - The DS or ACS is not available for authentication at the time of the request</li> 
          <li><strong>B</strong> = Bypass- Merchant authentication rule is triggered to bypass authentication in this use case</li> 
         </ul> <br> <strong>NOTE</strong>: If the Enrolled value is NOT Y, then the Consumer is NOT eligible for Authentication. </td> 
       </tr> 
       <tr> 
        <td>CAVV</td> 
        <td>AN(40)</td> 
        <td>Cardholder Authentication Verification Value (CAVV). Also known as:<br> 
         <ul> 
          <li>Authentication Verification Value (AVV)</li> 
          <li>Universal Cardholder Authentication Field (UCAF).</li> 
         </ul> <br> <p>This value should be appended to the authorization message signifying that the transaction has been successfully authenticated. This value will be encoded according to the your merchant profile configuration in either Base64 or Hex encoding. A Base64 encoding configuration will produce values of 28 or 32 characters. A Hex encoding configuration will produce values of 40 or 48 characters. The value when decoded will either be 20 bytes for CAVV or 20 or 24 bytes if the value is AAV (MasterCard UCAF).</p> </td> 
       </tr> 
       <tr> 
        <td>ECIFlag</td> 
        <td>AN(40)</td> 
        <td>Electronic Commerce Indicator (ECI). The ECI value is part of the 2 data elements that indicate the transaction was processed electronically. This should be passed on the authorization transaction to the gateway/processor. <br><br> 
         <table> 
          <tbody>
           <tr> 
            <th>MasterCard</th> 
            <th>Visa</th> 
            <th>Amex</th> 
            <th>JCB</th> 
            <th>Diners Club</th> 
            <th>Elo</th> 
           </tr> 
           <tr> 
            <td>00</td> 
            <td>05</td> 
            <td>05</td> 
            <td>05</td> 
            <td>05</td> 
            <td>05</td> 
           </tr> 
           <tr> 
            <td>01</td> 
            <td>06</td> 
            <td>06</td> 
            <td>06</td> 
            <td>06</td> 
            <td>06</td> 
           </tr> 
           <tr> 
            <td>02</td> 
            <td>07</td> 
            <td>07</td> 
            <td>07</td> 
            <td>07</td> 
            <td>07</td> 
           </tr> 
          </tbody>
         </table> </td> 
       </tr> 
       <tr> 
        <td>PAResStatus</td> 
        <td>AN(1)</td> 
        <td>Transaction status result identifier.<br><br>Possible Values:
         <ul>
          <li><strong>Y</strong>  Successful Authentication</li>
          <li><strong>N</strong>  Failed Authentication</li>
          <li><strong>U</strong>  Unable to Complete Authentication</li>
          <li><strong>A</strong>  Successful Attempts Transaction</li>
         </ul></td> 
       </tr> 
       <tr> 
        <td>SignatureVerification</td> 
        <td>AN(1)</td> 
        <td>Transaction Signature status identifier.<br><br>Possible Values:<br>
         <ul>
          <li><strong>Y</strong> - Indicates that the signature of the PARes has been validated successfully and the message contents can be trusted.</li>
          <li><strong>N</strong> - Indicates that the PARes could not be validated. This result could be for a variety of reasons; tampering, certificate expiration, etc., and the result should not be trusted.</li>
         </ul></td> 
       </tr> 
       <tr> 
        <td>XID</td> 
        <td>AN(2)</td> 
        <td>Transaction identifier resulting from authentication processing.<br><br> <strong>NOTE:</strong> Gateway/Processor API specification may require this value to be appended to the authorization message. This value will be encoded according to the your merchant profile configuration in either Base64 or Hex encoding. A Base64 encoding configuration will produce values of 28 characters. A Hex encoding configuration will produce values of 40 characters.</td> 
       </tr> 
       <tr> 
        <td>UCAFIndicator</td> 
        <td>AN(1)</td> 
        <td><p>Universal Cardholder Authentication Field (UCAF) Indicator value provided by the issuer.</p> Possible Values: 
         <ul> 
          <li><strong>0</strong> - Non-SecureCode transaction, bypassed by the Merchant</li> 
          <li><strong>1</strong> - Merchant-Only SecureCode transaction</li> 
          <li><strong>2</strong> - Fully authenticated SecureCode transaction</li> 
         </ul> <br> NOTE: This field is only returned for MasterCard transactions </td> 
       </tr> 
      </tbody> 
     </table> 
    </div> 
    <!-- ========================================= 
		Error Handling Section
============================================== --> 
    <div id="javascriptErrorHandling" class="jumps"> 
     <h2>Error Handling</h2> 
     <p>In the event Songbird.js encounters an error and is unable to continue with the transaction, it will always trigger the <code>payments.validated</code> event and pass back as much data as it has. Songbird will always keep to the standard response object when triggering an error flow like this so there is no need to worry about having to handle 2 types of objects within <code>payments.validated</code>. However in all likelyhood it will not include a valid JWT if the error occurred within Songbird itself. Errors that Songbird may throw include events like timeouts to Cardinal and miss configuration. Below are the possible errors Songbird will generate itself. </p>
     <table> 
      <tbody>
       <tr> 
        <th>Error Number</th> 
        <th>Description</th> 
       </tr> 
       <tr> 
        <td>10001</td> 
        <td>Connection failure while trying to complete an Init request.</td> 
       </tr> 
       <tr> 
        <td>10002</td> 
        <td>Connection failure while trying to complete a Start request.</td> 
       </tr> 
       <tr> 
        <td>10003</td> 
        <td>Connection failure while trying to complete a Validate request.</td> 
       </tr> 
       <tr> 
        <td>10004</td> 
        <td>A general error has occurred.</td> 
       </tr> 
       <tr> 
        <td>10005</td> 
        <td>No JWT was found configured in a flow that requires JWTs.</td> 
       </tr> 
       <tr> 
        <td>10006</td> 
        <td>A required configuration value is missing, the transaction is unable to continue.</td> 
       </tr> 
       <tr> 
        <td>10007</td> 
        <td>Connection failure while trying to complete a Confirm request.</td> 
       </tr> 
       <tr> 
        <td>10008</td> 
        <td>A required cardinal response JWT was not passed into setup.</td> 
       </tr> 
       <tr> 
        <td>10009</td> 
        <td>Connection failure while trying to complete a Continue request.</td> 
       </tr> 
       <tr> 
        <td>10010</td> 
        <td>The response JWT was malformed and could not be parsed.</td> 
       </tr> 
      </tbody>
     </table> 
     <h3>JavaScript Error Handling</h3> 
     <p>Its good practice to wrap all JavaScript within a try / catch block to prevent JavaScript errors going unhandled. We recommend that all your Cardinal Cruise related functions are wrapped within a try / catch block. This will help catch any errors that occur when you're calling or processing a Cardinal Cruise transaction, and allow you to handle them as your business logic dictates. Below is an example of creating an in browser order object wrapped with a try / catch. You can read more about the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch" target="_blank" title="Learn about try/catch blocks at Mozilla.org">use of try / catch here</a> at Mozilla.org.</p> 
     <pre class="prettyprint linenums"><code>
function generateOrderObject(){
	  var cardData;
	
	  try{
	    cardData = {
	      Consumer: {
	        Account: {
	          AccountNumber: $("#cardNumber").val(),
	          NameOnAccount: $("#nameOnCard").val(),
	          ExpirationMonth: $("#expMo").val(),
	          ExpirationYear: $("#expYr").val(),
	          CardCode: $("#cardCode").val()
	        },
	        BillingAddress: {
	          FirstName: $("#billingFirstName").val(),
	          LastName: $("#billingLastName").val()
	        },
	      },
	      OrderDetails: {
	        Amount: $("#amount").val(),
	        CurrencyCode: $("#currencyCode").val()
	      }
	    };
	
	  } catch(e){
	    // An error occurred within the order object creation call
	    console.log("Error while building order object: " + e);
	  }
	
	  return cardData;
	}
</code></pre> 
    </div> 
    <div id="detectMissingNamespace" class="jumps"> 
     <h2 id="detect-missing-cardinal-namespace">Detect Missing Cardinal Namespace</h2> 
     <p>It's possible that there could be issues on the client side when download the Cardinal Cruise library. Your activation should be able to detect and handle this to match your business requirements. This can be done a number of ways but the easiest way is to wrap all calls utilizing the <code>Cardinal</code> namespace in a try / catch block. Below is an example of how this could be done.</p> 
     <h3 id="passively-catch-a-reference-error">Passively Catch a Reference Error</h3> 
     <p>This methodology will catch any error your scripts generate. So it has the added benefit of allowing you to catch any error and handle it in a centralized place. This may or may not fit your activation well.</p> 
     <pre class="prettyprint linenums"><code>
try{
  Cardinal.setup("init", {
    jwt:"[jwt here]"
  });

  Cardinal.configure({
    logging: {
    debug: "verbose"
    }
  });

  function startTransaction() {
    Cardinal.start("cca", {
      OrderDetails: {
        OrderNumber: Math.random(0, 1000000) + "-shzs", // OrderNumbers need to be unique
        Amount:"100",
        CurrencyCode:" 840"
      },
      Consumer:{
        Account: {
          AccountNumber: "4000000000000002",
          ExpirationMonth: "01",
          ExpirationYear: "2099",
          CardCode: "123",    // Required for Tokenization
          NameOnAccount:"John Smith"
        }
      }
    });
  }     

  Cardinal.on("payments.validated", function (data, jwt) {
    switch(data.ActionCode){
      case "SUCCESS":
        // Handle successful authentication scenario
        break;
      
      case "NOACTION":
        // Handle unenrolled scenario
        break;
      
      case "FAILURE":
        // Handle authentication failed or error encounter scenario
        break;
      
      case "ERROR":
        // Handle service level error
        break;
    }
  });

} catch(e){
  // An error occurred
  console.log( (window["Cardinal"] === undefined ? "Cardinal Cruise did not load properly. " : "An error occurred during processing. ") + e );
}
</code></pre> 
     <h3>Actively Checking for the Namespace Before Use</h3> 
     <p>As an alternative methodology, you can also test for the <code>Cardinal</code> namespace on the window object prior to using it. If you use this strategy we recommend you still wrap all your JavaScript calls in try / catch blocks.</p> 
     <pre class="prettyprint"><code>
if(window["Cardinal"] !== undefined){
  // Cardinal namespace was found, we are ok to use 'Cardinal'
} else {
  // Cardinal namespace was not found, handle error
}
</code></pre> 
    </div> 
    <div id="handlingConnectionErrors" class="jumps"> 
     <h2>Handling Connection Errors</h2> 
     <p>While it should never happen, its important to include code that handles the case where the consumer's browser is unable to reach Cardinal servers to complete a transaction. In this case we will always hand back control to the <code>payments.validated</code> event with the familiar json response object and no JWT. The JWT is not included and will be <code>undefined</code> because there was no response from the service that generates JWT's in a normal flow.</p> 
     <pre class="prettyprint linenums"><code>
Cardinal.on("payments.validated", function (data, jwt) {
  switch(data.ActionCode){
    case "SUCCESS":
      // Handle successful authentication scenario
      break;

    case "NOACTION":
      // Handle unenrolled scenario
      break;

    case "FAILURE":
      // Handle authentication failed or error encounter scenario
      break;

    case "ERROR":
      // An ActionCode of 'ERROR' indicates there was a fatal connection issue somewhere within the transaction.
      // This could be to a 3rd party, to a dependent system within the Cardinal infrastructure, or to the Cardinal
      // servers all together. We need to review the ErrorNumber for more details.

      // ErrorNumbers in the 10,000 range are generated by Cardinal Cruise.
      if(data.ErrorNumber === 10001 || data.ErrorNumber === 10002 || data.ErrorNumber === 10003){
      	// Cardinal Cruise is unable to contact the Cardinal servers.
      }
      break;
  }  
}
</code></pre> 
    </div> 
   </div>
   <!-- docsContent --> 
   <div class="clear"></div> 
  </div>
  <!-- pageWidth -->   
 </body>
</html>