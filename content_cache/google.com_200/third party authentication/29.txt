<!doctype html>
<html lang="en-US">
 <head> 
  <meta charset="UTF-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <title>Clementine.js - The elegant and lightweight boilerplate for full stack JavaScript</title> 
  <script>
			if (window.location.origin === 'http://johnstonbl01.github.io') {
				window.location.replace('http://www.clementinejs.com/');
			}
		</script> 
  <script>
			(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
			(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
			m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
			})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

			ga('create', 'UA-69644934-1', 'auto');
			ga('send', 'pageview');
		</script> 
  <link rel="canonical" href="http://www.clementinejs.com"> 
  <link href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300,400" rel="stylesheet" type="text/css"> 
  <link href="/css/bootstrap.min.css" rel="stylesheet"> 
  <link href="/css/jquery.tocify.css" rel="stylesheet"> 
  <link href="/css/overrides.css" rel="stylesheet"> 
  <link href="/css/syntax.css" rel="stylesheet"> 
 </head> 
 <body> 
  <div id="top" class="page"> 
   <header class="navbar navbar-default"> 
    <div class="container"> 
     <div class="navbar-header"> 
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"> <span class="sr-only">Toggle Navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
      <a href="/" class="navbar-brand"> <img src="/img/clementine_nav.png" alt="Clementine.js" itemprop="image"> Clementine.js </a> 
     </div> 
     <nav class="collapse navbar-collapse"> 
      <ul class="nav navbar-nav navbar-right"> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">Versions <span class="caret"></span></a> 
        <ul class="dropdown-menu"> 
         <li><a href="/versions/standard.html">Standard</a></li> 
         <li><a href="/versions/angular.html">Angular</a></li> 
         <li><a href="/versions/fcc.html">Free Code Camp</a></li> 
        </ul> </li> 
       <li class="dropdown"> <a href="#" class="dropdown-toggle" data-toggle="dropdown">Developers <span class="caret"></span></a> 
        <ul class="dropdown-menu"> 
         <li><a href="/developers/contributing.html">Contributing</a></li> 
         <li><a href="/developers/code-conventions.html">Code Conventions</a></li> 
        </ul> </li> 
       <li><a href="/tutorials/tutorials.html">Tutorials</a></li> 
       <li><a href="/faq.html">FAQ</a></li> 
       <li><a href="/about.html">About</a></li> 
      </ul> 
     </nav> 
    </div> 
   </header> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-md-9"> 
      <h1 id="clementinejs-passport-authentication-tutorial">Clementine.js Passport Authentication Tutorial</h1> 
      <h2 id="prerequisites">Prerequisites</h2> 
      <p>This tutorial assumes that you have a working version of the application built in the <a href="/tutorials/tutorial-beginner.html">previous tutorial</a>.</p> 
      <p><em>Note</em>: This tutorial assumes that you have a GitHub account.</p> 
      <p><em>Additional Note</em>: The previous tutorial used port <code class="highlighter-rouge">3000</code>, but this tutorial will use port <code class="highlighter-rouge">8080</code> instead. This change was made to align this tutorial with the Free Code Camp version of Clementine.js. Port <code class="highlighter-rouge">8080</code> makes setup a bit easier when using c9.io.</p> 
      <h2 id="attack-of-the-auth">Attack of the Auth</h2> 
      <p>Let’s assume that we only want people to see our coveted click-counting application who have registered on the site using their GitHub Account. After all, the app is super secret and anonymous users aren’t allowed!</p> 
      <p>In order to accomplish this, we’ll need to integrate some sort of authorization and authentication system into our application. Additionally, we’ll want to give users the option to sign up for the site if they haven’t already. It’s important to understand that although authorization and authentication sound similar, they have very different meanings:</p> 
      <ul> 
       <li><em>authorization</em> is the set of rules put in place that determine what a user can do within the application based on his or her credentials (i.e. an admin often has more functionality at her fingertips than a normal user)</li> 
       <li><em>authentication</em> is the act of identifying and verifying users (i.e. username / password verification, etc)</li> 
      </ul> 
      <p>Normally, this requires worrying about securing and encrypting passwords, but luckily we’re going to use a very common JavaScript library named <a href="http://passportjs.org/">Passport.js</a>. As an extension of this library, we’re going to focus on a feature known as <a href="https://en.wikipedia.org/wiki/OAuth">OAuth</a>.</p> 
      <p>OAuth is an open standard for authentication that allows 3rd-party sites (like ours) to use Twitter (Microsoft, Google and Facebook are also included) credentials to log into the 3rd party site. This is great because we don’t have to worry about securely storing the passwords or managing any of the encryption.</p> 
      <p>This advanced tutorial, created specifically for <a href="http://www.freecodecamp.com/">Free Code Camp</a> students, will walk you through integrating this library with the Clementine.js demo application created during <a href="/tutorials/tutorial-beginner.html">part 1 of the tutorial</a>.</p> 
      <h2 id="setup">Setup</h2> 
      <h3 id="install-npm-packages">Install NPM Packages</h3> 
      <p>Before we get started in earnest, let’s install some of the packages we’ll require throughout the installation.</p> 
      <div class="language-bash highlighter-rouge">
       <pre class="highlight"><code><span class="gp">$ </span>npm install passport --save
</code></pre> 
      </div> 
      <p>Passport is the authentication and authorization library that will be used to validate users.</p> 
      <div class="language-bash highlighter-rouge">
       <pre class="highlight"><code><span class="gp">$ </span>npm install passport-github --save
</code></pre> 
      </div> 
      <p>This will install the GitHub “Strategy” for Passport. Strategies are Passport’s term for different methods of authentication. As an example, there’s a Facebook Strategy and a Google Strategy as well.</p> 
      <div class="language-bash highlighter-rouge">
       <pre class="highlight"><code><span class="gp">$ </span>npm install express-session --save
</code></pre> 
      </div> 
      <p>This package is <a href="https://en.wikipedia.org/wiki/Middleware">middleware</a> for the Express framework. You can think of middleware as an “add-on” or “plugin” that will allow additional functionality within Express. In this case, it’s going to allow us to use <a href="http://stackoverflow.com/questions/3804209/what-are-sessions-how-do-they-work">sessions</a>.</p> 
      <p>Sessions are essentially server-side storage where information like a user ID are stored and persist through interaction with a website. This essentially means that the site “remembers” your user ID and that you’ve been authenticated. In the case of this app, it will allow us to interact with the website without having to constantly re-authenticate.</p> 
      <div class="language-bash highlighter-rouge">
       <pre class="highlight"><code><span class="gp">$ </span>npm uninstall mongodb --save
</code></pre> 
      </div> 
      <p>This will uninstall the MongoDB Node driver used in the last tutorial, since we’ll be using Mongoose in its place.</p> 
      <div class="language-bash highlighter-rouge">
       <pre class="highlight"><code><span class="gp">$ </span>npm install mongoose --save
</code></pre> 
      </div> 
      <p><a href="http://mongoosejs.com/">Mongoose</a> is an object modeling tool for MongoDB. It sits on top of the database and provides additional querying and validation support for the database. Most importantly, it allows for the definition of <a href="https://en.wikipedia.org/wiki/Database_schema">database schemas</a>.</p> 
      <p>Think of a database schema as a set of rules that determine the type of data that can be inserted into the database. As an example, we could set up a schema so that a username in the database will always be a string, and that it is a required field. If someone were to try and insert a number or any other data type, an error would be thrown.</p> 
      <p>It’s extremely common to see Mongoose paired with Passport, and even more common to see Mongoose used in place of the default MongoDB Node.js driver. This, in part is due to the schemas mentioned above, but also due to the enhanced syntax. We’ll see some of that a bit later.</p> 
      <div class="language-bash highlighter-rouge">
       <pre class="highlight"><code><span class="gp">$ </span>npm install dotenv --save
</code></pre> 
      </div> 
      <p>The <a href="https://www.npmjs.com/package/dotenv">dotenv</a> package will allow us to store our private GitHub API information without it being exposed when uploading to a remote repository.</p> 
      <p>The <code class="highlighter-rouge">package.json</code> file should now look like:</p> 
      <div class="language-json highlighter-rouge">
       <pre class="highlight"><code><span class="p">{</span><span class="w"> </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"beginner-app"</span><span class="p">,</span><span class="w"> </span><span class="nt">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.0"</span><span class="p">,</span><span class="w"> </span><span class="nt">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="nt">"main"</span><span class="p">:</span><span class="w"> </span><span class="s2">"server.js"</span><span class="p">,</span><span class="w"> </span><span class="nt">"scripts"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"test"</span><span class="p">:</span><span class="w"> </span><span class="s2">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="nt">"author"</span><span class="p">:</span><span class="w"> </span><span class="s2">""</span><span class="p">,</span><span class="w"> </span><span class="nt">"license"</span><span class="p">:</span><span class="w"> </span><span class="s2">"MIT"</span><span class="p">,</span><span class="w"> </span><span class="nt">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"dotenv"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.2.0"</span><span class="p">,</span><span class="w"> </span><span class="nt">"express"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.12.4"</span><span class="p">,</span><span class="w"> </span><span class="nt">"express-session"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.11.3"</span><span class="p">,</span><span class="w"> </span><span class="nt">"mongoose"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^4.1.0"</span><span class="p">,</span><span class="w"> </span><span class="nt">"passport"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^0.2.2"</span><span class="p">,</span><span class="w"> </span><span class="nt">"passport-github"</span><span class="p">:</span><span class="w"> </span><span class="s2">"^1.0.0"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
      </div> 
      <h3 id="updating-the-folder-structure">Updating the Folder Structure</h3> 
      <p>Let’s go ahead and modify the folder structure to include some of the new functionality we’ll be covering.</p> 
      <div class="highlighter-rouge">
       <pre class="highlight"><code>+--	Project Folder
	+--	app
	|	\-- common
	|	\-- config
	|	\-- controllers
	|	\-- models
	|	\-- routes
	|
	+-- public
	|	\-- css
	|	\-- img
</code></pre> 
      </div> 
      <p><strong>Project / Root Folder</strong> - The project directory. This directory contains:</p> 
      <ul> 
       <li><strong>app/common</strong> - This directory will contain common JS functions that will be used across more than one of our controllers.</li> 
       <li><strong>app/config</strong> - The directory containing configuration files for Passport.</li> 
       <li><strong>app/models</strong> - Directory for database models. In this case, this is where the Mongoose schemas will be defined. These models are definitions of desired data structure that will be inserted into the database.</li> 
      </ul> 
      <p>The remainder of the folders are the same as the previous version of the app.</p> 
      <h2 id="mongoose-integration">Mongoose Integration</h2> 
      <p>Before we begin the integrating Passport and authentication, we need to update the current app to work with Mongoose instead of the MongoDB Node.js driver. This will require a bit of refactoring in our current code.</p> 
      <h3 id="serverjs-cleanup">Server.js Cleanup</h3> 
      <p>The first step will be to update the current <code class="highlighter-rouge">server.js</code> file so that it connects to the database using Mongoose instead of the current MongoDB Node.js driver.</p> 
      <p><em>server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express'</span><span class="p">),</span>
	<span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./app/routes/index.js'</span><span class="p">),</span>
	<span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'mongoose'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="s1">'mongodb://localhost:27017/clementinejs'</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">'/controllers'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'/app/controllers'</span><span class="p">));</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">'/public'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'/public'</span><span class="p">));</span>

<span class="nx">routes</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="mi">8080</span><span class="p">;</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Node.js listening on port '</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">+</span> <span class="s1">'...'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre> 
      </div> 
      <p>There are 3 changes to the code:</p> 
      <ol> 
       <li>Remove the <code class="highlighter-rouge">mongo = require(...)</code> statement and replace it by requiring Mongoose instead.</li> 
       <li>Remove the <code class="highlighter-rouge">mongo.connect(...)</code> wrapping function, including the conditional <code class="highlighter-rouge">if</code> statement. This gets replaced with a Mongoose connection function.</li> 
       <li>Remove the <code class="highlighter-rouge">db</code> argument for the routes, as we will no longer need to provide that information since Mongoose will do it for us via the schema. Don’t worry if this part doesn’t make too much sense, we’ll go into more detail once we get to that part.</li> 
      </ol> 
      <h3 id="create-a-mongoose-model">Create a Mongoose Model</h3> 
      <p>To start, we need to define a schema for the clicks document in the database. Think back to the previous tutorial. The API looked something like:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">[{</span> <span class="s1">'clicks'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">}]</span>
</code></pre> 
      </div> 
      <p>In terms of a schema, we’re going to define the properties within the object and its corresponding data type. In this case, the property is <code class="highlighter-rouge">'clicks'</code> and the data type is <code class="highlighter-rouge">Number</code>. Defining this will prevent a <code class="highlighter-rouge">String</code> data type being passed as a value to the <code class="highlighter-rouge">'clicks'</code> property.</p> 
      <p>Begin by creating a new file named <code class="highlighter-rouge">clicks.js</code> in the <code class="highlighter-rouge">/app/models</code> directory.</p> 
      <p><em>clicks.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'mongoose'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">Schema</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">Click</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">(</span>
	<span class="p">{</span> <span class="na">clicks</span><span class="p">:</span> <span class="nb">Number</span> <span class="p">},</span>
	<span class="p">{</span> <span class="na">versionKey</span><span class="p">:</span> <span class="kc">false</span> <span class="p">}</span>
	<span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">'Click'</span><span class="p">,</span> <span class="nx">Click</span><span class="p">);</span>
</code></pre> 
      </div> 
      <p>First, Mongoose is included in the file with <code class="highlighter-rouge">require('mongoose');</code>. Next, we’re creating a new Schema object with <code class="highlighter-rouge">mongoose.Schema</code>. Each Mongoose schema corresponds to a MongoDB collection. In turn, each key in the schema defines and casts its corresponding property in the MongoDB document.</p> 
      <p>The <code class="highlighter-rouge">Click</code> object is our Mongoose Schema. Predictably, we’re defining the <code class="highlighter-rouge">clicks</code> property and casting its value as a <code class="highlighter-rouge">Number</code> type. Mongoose automatically adds a property to every schema called <code class="highlighter-rouge">__v</code>. This property is used for versioning. In this particular case, we’ve disabled this using <code class="highlighter-rouge">versionKey: false</code>.</p> 
      <p>Finally, we must convert our schema to a Mongoose <a href="http://mongoosejs.com/docs/models.html">model</a>. The model is an object <a href="https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)">constructor</a> that represents documents within the database.</p> 
      <p>The <code class="highlighter-rouge">mongoose.model</code> method accepts two arguments:</p> 
      <ul> 
       <li>The first is the <em>singular</em> name of the collection in the database. For example, ours is named ‘Click’ which corresponds to our ‘clicks’ collection in the database. It’s important to note that Mongoose will automatically search for the plural version of this argument in the database.</li> 
       <li>The second argument is the name of the schema to be converted to the model. In this case, it’s our <code class="highlighter-rouge">Click</code> schema.</li> 
      </ul> 
      <p>This model is exported with <a href="https://nodejs.org/api/modules.html#modules_module_exports"><code class="highlighter-rouge">module.exports</code></a>, which is a Node function that exports the function or object for use within another file using the <code class="highlighter-rouge">require</code> function. This is a common Node pattern.</p> 
      <h3 id="updating-the-routes">Updating the Routes</h3> 
      <p>Next, let’s move on to our route file in the <code class="highlighter-rouge">/app/routes</code> directory. There are only a few small changes here.</p> 
      <p><em>index.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>

<span class="kd">var</span> <span class="nx">ClickHandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">'/app/controllers/clickHandler.server.js'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">app</span><span class="p">)</span> <span class="p">{</span>

	<span class="kd">var</span> <span class="nx">clickHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ClickHandler</span><span class="p">();</span>

	<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">'/public/index.html'</span><span class="p">);</span>
		<span class="p">});</span>

	<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/api/clicks'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">clickHandler</span><span class="p">.</span><span class="nx">getClicks</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">clickHandler</span><span class="p">.</span><span class="nx">addClick</span><span class="p">)</span>
		<span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">clickHandler</span><span class="p">.</span><span class="nx">resetClicks</span><span class="p">);</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>We’ve removed the <code class="highlighter-rouge">db</code> argument from both the <code class="highlighter-rouge">module.exports = function (app) {... }</code> line and the <code class="highlighter-rouge">new ClickHandler()</code>. We’ve done this because the database information itself is inherent in using a Mongoose schema. The model we created earlier gets exported for use within our controllers. We’ll see this shortly. For now, these are the only changes required to the route file. Wasn’t that easy?</p> 
      <h3 id="refactor-server-side-controller">Refactor Server-Side Controller</h3> 
      <p>This is where we’re going to see the majority of Mongoose changes. In general, these changes are due to Mongoose’s similar-but-different query syntax for MongoDB. Additionally, as alluded to in the previous section, we’ll now be importing our Mongoose model here for manipulation. Let’s walk through the changes one at a time.</p> 
      <p>The first change we’ll make is including (importing) our Mongoose model for use within the controller file. In the <code class="highlighter-rouge">/app/controllers</code> directory.</p> 
      <p><em>clickHandler.server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">Clicks</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'../models/clicks.js'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">clickHandler</span> <span class="p">(</span><span class="nx">db</span><span class="p">)</span> <span class="p">{...}</span>
</code></pre> 
      </div> 
      <p>We’re importing and storing our <code class="highlighter-rouge">mongoose.model</code> within the <code class="highlighter-rouge">Clicks</code> variable, so that we can update the clickHandler methods to query this collection. Remember that Mongoose will automatically find the correct collection in the database (it looks for the plural version of the model name we provided in the <code class="highlighter-rouge">mongoose.model(...)</code> function). Additionally, keep in mind that MongoDB will create the collection if it does not already exist.</p> 
      <p>Next, we need to remove the <code class="highlighter-rouge">db</code> argument from the clickHandler function. In addition, we want to remove the <code class="highlighter-rouge">var clicks = db.collection('clicks');</code> line because that’s no longer needed. Our database model is already being stored in the <code class="highlighter-rouge">Clicks</code> variable. Now we’ll move on to modifying each of the methods within this file.</p> 
      <p><strong>getClicks Method</strong></p> 
      <p>The <code class="highlighter-rouge">getClicks</code> method will need a number of modifications. Again, these modifications are due to Mongoose syntax, which is a bit easier to read than the default MongoDB Node.js driver.</p> 
      <p><em>clickHandler.server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">getClicks</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">Clicks</span>
		<span class="p">.</span><span class="nx">findOne</span><span class="p">({},</span> <span class="p">{</span> <span class="s1">'_id'</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
		<span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>

				<span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="kd">var</span> <span class="nx">newDoc</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Clicks</span><span class="p">({</span> <span class="s1">'clicks'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">});</span>
					<span class="nx">newDoc</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
						<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>

						<span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>
					<span class="p">});</span>

				<span class="p">}</span>
			<span class="p">});</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>Let’s breakdown each of the changes:</p> 
      <ul> 
       <li>Remove <code class="highlighter-rouge">var clickProjection = { ... };</code>. Removal of the <code class="highlighter-rouge">_id</code> field is inherent in the Mongoose schema, so this statement is no longer needed.</li> 
       <li><code class="highlighter-rouge">clicks</code> replaced with <code class="highlighter-rouge">Clicks</code> 
        <ul> 
         <li>this is to accommodate our newly imported Mongoose model.</li> 
        </ul> </li> 
       <li><code class="highlighter-rouge">findOne({}, { '_id': false } function (err, result) {...})</code> replaced by <code class="highlighter-rouge">findOne({}, { '_id': false }).exec(function (err, result) {...})</code> 
        <ul> 
         <li>This is simply different syntax that will accomplish the same result. The Mongoose <a href="http://mongoosejs.com/docs/api.html#query_Query-exec"><code class="highlighter-rouge">.exec()</code></a> function simply executes the query when called.</li> 
         <li>This is different from the MongoDB driver in that it does not execute the query immediately. Mongoose will execute the function only when the <code class="highlighter-rouge">.exec</code> method is called.</li> 
        </ul> </li> 
       <li>Conditional <code class="highlighter-rouge">else {...}</code> changes 
        <ul> 
         <li>The biggest change is in the conditional else, where we are inserting data into the database if no results are found. All of the former code is removed, and replaced by new (and much easier to read) Mongoose code.</li> 
         <li><code class="highlighter-rouge">var newDoc ...</code> creates a new document using the parameters defined within the Click model and stores it in the <code class="highlighter-rouge">newDoc</code> variable</li> 
         <li>We’re then saving the <code class="highlighter-rouge">newDoc</code> using the Mongoose <a href="http://mongoosejs.com/docs/api.html#model_Model-save"><code class="highlighter-rouge">.save()</code></a> method. This method simply saves the current document to the database.</li> 
        </ul> </li> 
      </ul> 
      <p><strong>addClick Method</strong></p> 
      <p>The remaining two methods in our clickHandler function object require fewer changes. For the <code class="highlighter-rouge">addClick</code> method, we simply change the function from <code class="highlighter-rouge">clicks.findAndModify()</code> to <code class="highlighter-rouge">Clicks.findOneAndUpdate()</code>. The <a href="http://mongoosejs.com/docs/api.html#query_Query-findOneAndUpdate"><code class="highlighter-rouge">findOneAndUpdate()</code></a> Mongoose function will find the first result from the query parameter (<code class="highlighter-rouge"><span class="p">{}</span></code> in our case will pull back all records).</p> 
      <p>Since our collection only has a single document, it will return the appropriate record. Again, we’re using the Mongoose <code class="highlighter-rouge">exec()</code> function to execute the query. And lastly, we remove the <code class="highlighter-rouge"><span class="p">{</span><span class="w"> </span><span class="err">'_id':</span><span class="w"> </span><span class="err">1</span><span class="w"> </span><span class="p">}</span></code> projection from the query. Removing the projection here is not required, because by default Mongoose will not return the <code class="highlighter-rouge">_id</code> field.</p> 
      <p><em>clickHandler.server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">addClick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">Clicks</span>
		<span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">({},</span> <span class="p">{</span> <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span> <span class="s1">'clicks'</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">})</span>
		<span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>

				<span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">);</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p><strong>resetClicks Method</strong></p> 
      <p>Now, we make similar changes to the <code class="highlighter-rouge">addClick</code> method.</p> 
      <p><em>clickHandler.server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="k">this</span><span class="p">.</span><span class="nx">resetClicks</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">Clicks</span>
		<span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">({},</span> <span class="p">{</span> <span class="s1">'clicks'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">})</span>
		<span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>

				<span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">);</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>As you’ll notice, the above method is nearly identical to the <code class="highlighter-rouge">addClick</code> method. The only difference is that we’re resetting the ‘clicks’ value in the document to be 0 rather than incrementing it by 1.</p> 
      <p>Finally, it’s time to export our clickHandler function object:</p> 
      <p><em>clickhandler.server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">Clicks</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'../models/clicks.js'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">ClickHandler</span> <span class="p">()</span> <span class="p">{</span>

	<span class="p">...</span>
	<span class="p">...</span>

<span class="p">}</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">ClickHandler</span><span class="p">;</span>
</code></pre> 
      </div> 
      <p>This syntax should be familiar now. Before we test if the application still works, we first need to edit our <code class="highlighter-rouge">clickController.client.js</code> so that the <code class="highlighter-rouge">port</code> in our <code class="highlighter-rouge">apiUrl</code> reflects the port change to <code class="highlighter-rouge">8080</code> in our application.</p> 
      <p><em>clickController.client.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code> <span class="s1">'use strict'</span><span class="p">;</span>
 
 <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
 	<span class="kd">var</span> <span class="nx">addButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'.btn-add'</span><span class="p">);</span>
    	<span class="kd">var</span> <span class="nx">deleteButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'.btn-delete'</span><span class="p">);</span>
    	<span class="kd">var</span> <span class="nx">clickNbr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'#click-nbr'</span><span class="p">);</span>
    	<span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="s1">'http://localhost:8080/api/clicks'</span><span class="p">;</span>
 
 	<span class="p">...</span>
 	<span class="p">...</span>
</code></pre> 
      </div> 
      <p>Now in the terminal window of the project directory, type <code class="highlighter-rouge">node server</code>, and then browse to <code class="highlighter-rouge">localhost:8080</code>. The app should function just as it did before – adding and resetting clicks!</p> 
      <h2 id="passport-server-side-integration">Passport Server-Side Integration</h2> 
      <h3 id="github-app-setup">GitHub App Setup</h3> 
      <p>Before getting to the coding portion, we need to register our app with GitHub and obtain an API key. An API key is like a password between your app and GitHub, so they can identify who is using the API and ensure that the program has permission to view/modify information from the site.</p> 
      <p>Head to GitHub and log in.</p> 
      <ol> 
       <li>Click your profile picture in the top right corner and choose the ‘Settings’ option.</li> 
       <li>On the left-hand side, click on ‘Applications’.</li> 
       <li>At the top of the page, click on ‘Developer applications’.</li> 
       <li>Click the ‘Register new application’ button.</li> 
      </ol> 
      <p><img src="/img/passporttut01.png" alt="GitHub Settings"></p> 
      <ol> 
       <li>Fill out the form: 
        <ul> 
         <li>Name: Whatever you’d like to name your app. Mine says ‘clementinejs-fcc’, of course. This app name needs to be unique.</li> 
         <li>Homepage URL: Since we’re using localhost, simply use <code class="highlighter-rouge">http://127.0.0.1:8080/</code>. <code class="highlighter-rouge">127.0.0.1</code> is the default IP address for localhost. For some reason, simply entering ‘localhost’ instead wouldn’t work for me.</li> 
         <li>Description: A short description of your app.</li> 
         <li>Authorization callback URL: <code class="highlighter-rouge">http://127.0.0.1:8080/auth/github/callback</code>. This will be the URL that gets passed in when we’re authenticated. We’ll add a route for this URL later.</li> 
        </ul> </li> 
       <li>Click ‘Register application’.</li> 
      </ol> 
      <p><img src="/img/passporttut02.png" alt="GitHub App Registration"></p> 
      <p>Once this is done, it will take you to a page with information about your application. On the top right, there will be codes for Client ID (API Key) and the Client Secret (API Secret). We’ll use these later in our app.</p> 
      <p><img src="/img/passporttut03.png" alt="GitHub API Keys"></p> 
      <p>The difference between the API Key and the API Secret is that the key is considered <em>public</em>, while the secret is known only to the vendor (GitHub in this case) and you.</p> 
      <h3 id="create-environmental-variables">Create Environmental Variables</h3> 
      <p>Now let’s take advantage of the dotenv module we installed earlier. Begin by creating a new file named <code class="highlighter-rouge">.env</code> in the root project directory. Within this file, we will define variables which will be kept private. When the dotenv module is initialized (we’ll get to this shortly), it stores these values on Node’s <code class="highlighter-rouge">process.env</code> object. Each value in the <code class="highlighter-rouge">.env</code> file will create a new property on the object.</p> 
      <p>In our case, we need to store 5 variables for GitHub authentication:</p> 
      <ol> 
       <li>The GitHub API Client ID</li> 
       <li>The GitHub API Client Secret</li> 
       <li>The MongoDB URI</li> 
       <li>The Port number</li> 
       <li>The URL for our app</li> 
      </ol> 
      <p>The URL, MONGO_URI and PORT aren’t private information, but are used at various points within the application. Indeed, these are typically stored in a file such as this.</p> 
      <p>In the <code class="highlighter-rouge">.env</code> file:</p> 
      <div class="highlighter-rouge">
       <pre class="highlight"><code>GITHUB_KEY=your-client-id-here
GITHUB_SECRET=your-client-secret-here
MONGO_URI=mongodb://localhost:27017/clementinejs
PORT=8080
APP_URL=http://localhost:8080/
</code></pre> 
      </div> 
      <p>You’ll simply need to paste the keys GitHub provides as part of the app registration into this file.</p> 
      <p><code class="highlighter-rouge">MONGO_URI</code> is the same as the URI we’re passing to to the <code class="highlighter-rouge">mongoose.connect()</code> method in the <code class="highlighter-rouge">server.js</code> file. Hang on… What’s a URI? URIs are <a href="https://en.wikipedia.org/wiki/Uniform_Resource_Identifier">Uniform Resource Identifiers</a> and are strings of characters which identify the name of a resource. In our case, the resource is the MongoDB database and its port (<code class="highlighter-rouge">27017</code> and subsequent database (<code class="highlighter-rouge">clementinejs</code>).</p> 
      <p>Next, we need to include this <code class="highlighter-rouge">.env</code> file as part of our <code class="highlighter-rouge">.gitignore</code> file so that this file does not get tracked by Git. This is an important step to ensure that these private keys remain private.</p> 
      <p><em>.gitignore</em></p> 
      <div class="highlighter-rouge">
       <pre class="highlight"><code>node_modules/
.eslintrc
.env
</code></pre> 
      </div> 
      <h3 id="create-the-user-model">Create the User Model</h3> 
      <p>One new feature of our application will be to store the number of clicks for each user instead of inside a global document within MongoDB. This means that each user will have their own number of clicks, and will also allow us to show of some of Express’ parameter routing (more on this later).</p> 
      <p>To begin, let’s work on defining our user model. Create a new file in the <code class="highlighter-rouge">/app/models</code> directory named <code class="highlighter-rouge">users.js</code>.</p> 
      <p><em>users.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'mongoose'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">Schema</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Schema</span><span class="p">({</span>
	<span class="na">github</span><span class="p">:</span> <span class="p">{</span>
		<span class="na">id</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
		<span class="na">displayName</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
		<span class="na">username</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
      <span class="na">publicRepos</span><span class="p">:</span> <span class="nb">Number</span>
	<span class="p">},</span>
   <span class="na">nbrClicks</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">clicks</span><span class="p">:</span> <span class="nb">Number</span>
   <span class="p">}</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">'User'</span><span class="p">,</span> <span class="nx">User</span><span class="p">);</span>
</code></pre> 
      </div> 
      <p>Most of this code should be familiar from the Click model we defined previously. Inside our Schema, we’re defining the fields to be stored in the database after we authenticate with GitHub. These are put in their own object because it’s common to have a model with several types of authentication: Facebook, Twitter, etc. Each of these would store their information within different objects of the User model.</p> 
      <p>The GitHub API allows us to view quite a bit of information. You can see the <a href="https://developer.github.com/v3/users/">full specification here</a>, but we’ll just be focusing on these fields:</p> 
      <ul> 
       <li>id: The numeric ID associated with the GitHub account.</li> 
       <li>displayName: The full name (i.e. first and last) for the GitHub account.</li> 
       <li>username: The GitHub username for the account</li> 
       <li>public_repos: The number of public repositories associated with the GitHub account</li> 
      </ul> 
      <p>Next we’ll move on to setting up our authorization file.</p> 
      <h3 id="authorization-configuration">Authorization Configuration</h3> 
      <p>We need a way to reference the app-specific GitHub authentication information so that GitHub can confirm the application has permission to access its API and retrieve user information. Previously, we created a <code class="highlighter-rouge">.env</code> file and stored our private keys within. We’ll need to reference the Node <code class="highlighter-rouge">process.env</code> object somewhere in our to retrieve this information.</p> 
      <p>We’ll use this information when we contact the GitHub API with Passport, so we’ll export it and make it available to <code class="highlighter-rouge">require</code> in other parts of our app. Create a new file named <code class="highlighter-rouge">auth.js</code> in the <code class="highlighter-rouge">/app/config</code> directory.</p> 
      <p><em>auth.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s1">'githubAuth'</span><span class="p">:</span> <span class="p">{</span>
		<span class="s1">'clientID'</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">GITHUB_KEY</span><span class="p">,</span>
		<span class="s1">'clientSecret'</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">GITHUB_SECRET</span><span class="p">,</span>
		<span class="s1">'callbackURL'</span><span class="p">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">APP_URL</span> <span class="o">+</span> <span class="s1">'auth/github/callback'</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>The <code class="highlighter-rouge">'callbackURL'</code> is the URL we entered when registering our app, and this is where GitHub will send information once the user has been authenticated. We’ll handle this callback in our routes later. For now, just know that GitHub first authenticates the user, then sends information back to to our application via the <code class="highlighter-rouge">'callbackURL'</code>.</p> 
      <p>For the other two properties, we simply reference the values provided by dotenv and the <code class="highlighter-rouge">.env</code> file. Again, these are created as object properties and values on the Node <code class="highlighter-rouge">process.env</code> object, so it’s in that manner that we reference those values.</p> 
      <p>While this file is uploaded when committed to a remote Git repository, the actual values associated with these fields are hidden in a private <code class="highlighter-rouge">.env</code> file that is not tracked by Git. This keeps our information safe.</p> 
      <h3 id="passport-configuration">Passport Configuration</h3> 
      <p>The next step in integrating Passport will be to set up the actual authentication portion of the application. Let’s begin by creating a new file named <code class="highlighter-rouge">passport.js</code> in the <code class="highlighter-rouge">/app/config</code> directory.</p> 
      <p>During the setup phase for this project, we installed <code class="highlighter-rouge">passport-github</code> via NPM. This is the module that will install the code necessary to authenticate with GitHub. In Passport, this is referred to as a “strategy” as noted above.</p> 
      <p>Let’s start by requiring the Node modules we’ll need:</p> 
      <p><em>passport.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">GitHubStrategy</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'passport-github'</span><span class="p">).</span><span class="nx">Strategy</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">User</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'../models/users'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">configAuth</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./auth'</span><span class="p">);</span>
</code></pre> 
      </div> 
      <p>We’re importing the Passport GitHub strategy object, our user model and our authorization configuration (i.e. GitHub API keys). Next, we’ll create an exported function object that will take <code class="highlighter-rouge">passport</code> as an argument, and allow us to use Passport’s methods inside our Node module. This will require us to pass in Passport to as an argument when calling this module, but we’ll get to that in a bit. For right now, let’s just define the function.</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">passport</span><span class="p">)</span> <span class="p">{</span>
	
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>This function will contain all of our Passport code. To begin, we’ll serialize and deserialize our users. What’s serialization? <a href="https://en.wikipedia.org/wiki/Serialization">Serialization</a> is the process of taking information and transforming it into a state (a series of bytes) that can be stored in persistent storage and streamed across a network. This information can then be deserialized into a copy of the original object.</p> 
      <p>In the case of authentication, we’re transforming our user object into a format that can be stored within the session. The bulk of this is done by Passport, but it’s important to understand what’s happening conceptually. More information on this can be found within the <a href="http://passportjs.org/docs/configure">configure documentation on the Passport site</a>.</p> 
      <p><em>passport.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">passport</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">passport</span><span class="p">.</span><span class="nx">serializeUser</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
	<span class="p">});</span>

	<span class="nx">passport</span><span class="p">.</span><span class="nx">deserializeUser</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">User</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">id</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
		<span class="p">});</span>
	<span class="p">});</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>In <code class="highlighter-rouge">serializeUser</code>, we’re passing in a callback function with the user object and <code class="highlighter-rouge">done</code> as arguments. <code class="highlighter-rouge">done</code> is a function native to Passport, which tells Passport to proceed in the authentication process. When <code class="highlighter-rouge">done(null, user.id)</code> is called, Passport takes this information and passes it to the authenticate function. The information is stored in the <code class="highlighter-rouge">req.session.passport.user</code> user object.</p> 
      <p>When subsequent calls are made, Passport will deserialize this information, and search our <code class="highlighter-rouge">User</code> model for the deserialized ID. This information is then stored in the <code class="highlighter-rouge">req.user</code> object.</p> 
      <p>Serialization is not an easy subject – especially in the beginning. For now, it’s mostly just important to understand:</p> 
      <ul> 
       <li>Information sent over the network is compressed into bytes (serialization) and stored within a session (a small amount of persistent storage)</li> 
       <li>The user information submitted via serialization must then be de-compressed</li> 
       <li>Afterward, the database is searched to find the user information that corresponds to the matching user ID and provided back to the browser</li> 
      </ul> 
      <p>Now we need to tell Passport what type of strategy we’re going to use for authentication, and define what information we will get back from GitHub’s API.</p> 
      <p><em>passport.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">passport</span><span class="p">)</span> <span class="p">{</span>
	<span class="p">...</span>
	<span class="p">...</span>

	<span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">GitHubStrategy</span><span class="p">({</span>
		<span class="na">clientID</span><span class="p">:</span> <span class="nx">configAuth</span><span class="p">.</span><span class="nx">githubAuth</span><span class="p">.</span><span class="nx">clientID</span><span class="p">,</span>
		<span class="na">clientSecret</span><span class="p">:</span> <span class="nx">configAuth</span><span class="p">.</span><span class="nx">githubAuth</span><span class="p">.</span><span class="nx">clientSecret</span><span class="p">,</span>
		<span class="na">callbackURL</span><span class="p">:</span> <span class="nx">configAuth</span><span class="p">.</span><span class="nx">githubAuth</span><span class="p">.</span><span class="nx">callbackURL</span>
	<span class="p">}));</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>In the above code, we’re instantiating a new <a href="https://github.com/jaredhanson/passport-github">GitHub Strategy</a> object, and setting the authorization properties of that object to the configuration file we completed earlier. Passport will use this information to authorize that our application has the privilege of accessing the GitHub API.</p> 
      <p>Next we need to implement what Passport refers to as the <a href="http://passportjs.org/docs/configure">“verify callback.”</a> This is a callback function required by each type of strategy which will ensure the validity of the credentials and supply Passport with the user information that authenticated.</p> 
      <p><em>passport.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">passport</span><span class="p">)</span> <span class="p">{</span>
	<span class="p">...</span>
	<span class="p">...</span>

	<span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">GitHubStrategy</span><span class="p">({</span>
		<span class="na">clientID</span><span class="p">:</span> <span class="nx">configAuth</span><span class="p">.</span><span class="nx">githubAuth</span><span class="p">.</span><span class="nx">clientID</span><span class="p">,</span>
		<span class="na">clientSecret</span><span class="p">:</span> <span class="nx">configAuth</span><span class="p">.</span><span class="nx">githubAuth</span><span class="p">.</span><span class="nx">clientSecret</span><span class="p">,</span>
		<span class="na">callbackURL</span><span class="p">:</span> <span class="nx">configAuth</span><span class="p">.</span><span class="nx">githubAuth</span><span class="p">.</span><span class="nx">callbackURL</span>
	<span class="p">},</span>
	<span class="kd">function</span> <span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">refreshToken</span><span class="p">,</span> <span class="nx">profile</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
			<span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="s1">'github.id'</span><span class="p">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
				<span class="p">}</span>

				<span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">});</span>
		<span class="p">});</span>
	<span class="p">}));</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>The first 3 arguments for this function (<code class="highlighter-rouge">token</code>, <code class="highlighter-rouge">refreshToken</code>, <code class="highlighter-rouge">profile</code>) contain objects with information provided back from the GitHub API. Once we receive this information back, it’s Passport’s job to determine whether or not this user exists in the application database.</p> 
      <p>Let’s take a look at what this function is doing so far:</p> 
      <ul> 
       <li> <p><a href="https://nodejs.org/api/process.html#process_process_nexttick_callback"><code class="highlighter-rouge">process.nextTick()</code></a> is Node syntax that makes the code asynchronous. Node will wait until the current “tick” of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop">event loop</a> completes before executing the callback function. This essentially makes Node wait until the user information comes back from GitHub before processing the results</p> </li> 
       <li> <p><code class="highlighter-rouge">User.findOne({...})</code> will search the database for a username where <code class="highlighter-rouge">github.id</code> is equal to the <code class="highlighter-rouge">profile.id</code> from the arguments passed back from GitHub. This should look really familiar to the queries in the <code class="highlighter-rouge">clickHandler</code> object we modified earlier.</p> </li> 
       <li> <p><code class="highlighter-rouge">function (err, user) {...}</code> is a callback function which will execute only when the database query has been completed.</p> </li> 
       <li> <p><code class="highlighter-rouge">if (err) {...}</code>: if the query returns an error, then pass the <code class="highlighter-rouge">done</code> argument to Passport with the <code class="highlighter-rouge">err</code> object.</p> </li> 
       <li> <p><code class="highlighter-rouge">if (user) {...}</code>: if a user is found, then return that user object to the Passport authentication function.</p> </li> 
      </ul> 
      <p>But what happens if a user is not found? What if the user is new, and he or she isn’t in the database yet? Let’s add some additional functionality to this to handle such a case.</p> 
      <p><em>passport.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">passport</span><span class="p">)</span> <span class="p">{</span>
	<span class="p">...</span>
	<span class="p">...</span>

	<span class="nx">passport</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="k">new</span> <span class="nx">GitHubStrategy</span><span class="p">({</span>
		<span class="na">clientID</span><span class="p">:</span> <span class="nx">configAuth</span><span class="p">.</span><span class="nx">githubAuth</span><span class="p">.</span><span class="nx">clientID</span><span class="p">,</span>
		<span class="na">clientSecret</span><span class="p">:</span> <span class="nx">configAuth</span><span class="p">.</span><span class="nx">githubAuth</span><span class="p">.</span><span class="nx">clientSecret</span><span class="p">,</span>
		<span class="na">callbackURL</span><span class="p">:</span> <span class="nx">configAuth</span><span class="p">.</span><span class="nx">githubAuth</span><span class="p">.</span><span class="nx">callbackURL</span>
	<span class="p">},</span>
	<span class="kd">function</span> <span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">refreshToken</span><span class="p">,</span> <span class="nx">profile</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">process</span><span class="p">.</span><span class="nx">nextTick</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
			<span class="nx">User</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="s1">'github.id'</span><span class="p">:</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
				<span class="p">}</span>

				<span class="k">if</span> <span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
				<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
					<span class="kd">var</span> <span class="nx">newUser</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">();</span>

					<span class="nx">newUser</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
					<span class="nx">newUser</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">username</span> <span class="o">=</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">username</span><span class="p">;</span>
					<span class="nx">newUser</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">displayName</span> <span class="o">=</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">displayName</span><span class="p">;</span>
					<span class="nx">newUser</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">publicRepos</span> <span class="o">=</span> <span class="nx">profile</span><span class="p">.</span><span class="nx">_json</span><span class="p">.</span><span class="nx">public_repos</span><span class="p">;</span>
					<span class="nx">newUser</span><span class="p">.</span><span class="nx">nbrClicks</span><span class="p">.</span><span class="nx">clicks</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

					<span class="nx">newUser</span><span class="p">.</span><span class="nx">save</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
						<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
							<span class="k">throw</span> <span class="nx">err</span><span class="p">;</span>
						<span class="p">}</span>

						<span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">newUser</span><span class="p">);</span>
					<span class="p">});</span>
				<span class="p">}</span>
			<span class="p">});</span>
		<span class="p">});</span>
	<span class="p">}));</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>Here, we’re creating a new instance of our User model, and then mapping database object properties like <code class="highlighter-rouge">newUser.github.id</code> to the information sent back by the GitHub API (<code class="highlighter-rouge">profile.id</code>). Note that we are setting the <code class="highlighter-rouge">nbrClicks.clicks</code> value to <code class="highlighter-rouge">0</code> so that every new user begins with the 0 clicks property. Finally, we insert this information into the database with <code class="highlighter-rouge">newUser.save(...)</code>, passing our user information back to Passport with <code class="highlighter-rouge">return done(null, newUser)</code>.</p> 
      <p>This is far and away the most complicated part of integrating authentication and authorization. If it’s still a bit fuzzy, please reach out to me on Twitter and we can discuss. Let’s move on, shall we?</p> 
      <h3 id="further-server-side-controller-modifications">Further Server-Side Controller Modifications</h3> 
      <p>There are a few additional changes that we need to make to the server-side controller. These changes are primarily due to the fact that in our new application, the number of clicks will be coming from the user model instead of the old Clicks model.</p> 
      <p>Begin by deleting the <code class="highlighter-rouge">clicks.js</code> file from <code class="highlighter-rouge">/app/models</code>. We’ll no longer need this Mongoose model, as it has been replaced with <code class="highlighter-rouge">users.js</code>.</p> 
      <p>Now let’s take care of the changes in the <code class="highlighter-rouge">clickHandler.server.js</code> file:</p> 
      <p><em>clickHandler.server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">Users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'../models/users.js'</span><span class="p">);</span>

<span class="p">...</span>
</code></pre> 
      </div> 
      <p>Here we have simply replaced the <code class="highlighter-rouge">Clicks</code> variable with <code class="highlighter-rouge">Users</code>. Because we are now looking for a specific user when we are updating the click count, we must provide a query condition for Mongo to find the appropriate user in the database. In this case, we’ll be searching by the GitHub ID for the account (these IDs are numeric and unique to each account).</p> 
      <p><em>clickHandler.server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">Users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'../models/users.js'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">ClickHandler</span> <span class="p">()</span> <span class="p">{</span>

	<span class="k">this</span><span class="p">.</span><span class="nx">getClicks</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">Users</span>
			<span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="s1">'github.id'</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="s1">'_id'</span><span class="p">:</span> <span class="kc">false</span> <span class="p">})</span>
			<span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>

				<span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">nbrClicks</span><span class="p">);</span>
			<span class="p">});</span>
	<span class="p">};</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <p>Now we update the <code class="highlighter-rouge">this.getClicks()</code> method by changing <code class="highlighter-rouge">Clicks</code> to the new <code class="highlighter-rouge">Users</code> variable we just defined. This will execute queries using the <code class="highlighter-rouge">Users</code> model rather than the old <code class="highlighter-rouge">Clicks</code> model. Additionally, the <code class="highlighter-rouge">.findOne()</code> method arguments are updated to include the <code class="highlighter-rouge"><span class="p">{</span><span class="w"> </span><span class="err">'github.id':</span><span class="w"> </span><span class="err">req.user.github.id</span><span class="w"> </span><span class="p">}</span></code> query parameter.</p> 
      <p>Previously, this was simply set to <code class="highlighter-rouge"><span class="p">{}</span></code>, which will return all results in the database. That was a fine solution when we only had one document in the database. Now that we potentially have multiple users in the database, we have to ensure that the <code class="highlighter-rouge">findOne</code> query will return the appropriate record. As mentioned above, we want to match the record where the <code class="highlighter-rouge">'github.id'</code> field in the database matches the <code class="highlighter-rouge">req.user.github.id</code> object property from the request object. The properties and values of this request object are populated by passport once the authentication has completed.</p> 
      <p>Also note that we have completely removed the conditional <code class="highlighter-rouge">if</code> statement that checks for a result from the query and inserts a new document if none exists. Remember that this functionality has now been added to our <code class="highlighter-rouge">passport.js</code> file, and is no longer needed as part of this method.</p> 
      <p>Lastly, we updated the response query to <em>only</em> return the <code class="highlighter-rouge">nbrClicks</code> object for the user. next, let’s perform some these updates for the two other methods.</p> 
      <p><em>clickHandler.server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">Users</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'../models/users.js'</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">ClickHandler</span> <span class="p">()</span> <span class="p">{</span>

	<span class="k">this</span><span class="p">.</span><span class="nx">getClicks</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">};</span>

	<span class="k">this</span><span class="p">.</span><span class="nx">addClick</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">Users</span>
			<span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">({</span> <span class="s1">'github.id'</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="na">$inc</span><span class="p">:</span> <span class="p">{</span> <span class="s1">'nbrClicks.clicks'</span><span class="p">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">})</span>
			<span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>

					<span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">nbrClicks</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">);</span>
	<span class="p">};</span>

	<span class="k">this</span><span class="p">.</span><span class="nx">resetClicks</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">Users</span>
			<span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">({</span> <span class="s1">'github.id'</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">github</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span> <span class="p">{</span> <span class="s1">'nbrClicks.clicks'</span><span class="p">:</span> <span class="mi">0</span> <span class="p">})</span>
			<span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
					<span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="k">throw</span> <span class="nx">err</span><span class="p">;</span> <span class="p">}</span>

					<span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">nbrClicks</span><span class="p">);</span>
				<span class="p">}</span>
			<span class="p">);</span>
	<span class="p">};</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <p>The changes for these two additional methods are nearly identical to the changes for the <code class="highlighter-rouge">getClicks</code> method. For <code class="highlighter-rouge">addClick</code>, we’ve updated <code class="highlighter-rouge">Clicks</code> to <code class="highlighter-rouge">Users</code> and added the same query parameter as a condition of the <code class="highlighter-rouge">.findOneAndUpdate()</code> method. Additionally, we’ve update the field to increment each time this method is called from simply <code class="highlighter-rouge">clicks</code> to <code class="highlighter-rouge">nbrClicks.clicks</code>. Again, this change is becaues the <code class="highlighter-rouge">clicks</code> object is now embedded within the user object. And lastly, we change the respones to send <code class="highlighter-rouge">result.nbrClicks</code> – just like the <code class="highlighter-rouge">getClicks</code> method.</p> 
      <p>The changes for the <code class="highlighter-rouge">resetClicks</code> method are similar to the changes for <code class="highlighter-rouge">addClick</code>:</p> 
      <ul> 
       <li>Change <code class="highlighter-rouge">Clicks</code> to <code class="highlighter-rouge">Users</code></li> 
       <li>Add <code class="highlighter-rouge"><span class="p">{</span><span class="w"> </span><span class="err">'github.id':</span><span class="w"> </span><span class="err">req.user.github.id</span><span class="w"> </span><span class="p">}</span></code> as the query parameter to the Mongoose method</li> 
       <li>Change object property from <code class="highlighter-rouge">clicks</code> to <code class="highlighter-rouge">nbrClicks.clicks</code> in the function parameters</li> 
       <li>Update result response to <code class="highlighter-rouge">result.nbrClicks</code></li> 
      </ul> 
      <p>That’s it for the server-side controller. We won’t touch it again, I promise!</p> 
      <h3 id="update-and-create-routes">Update and Create Routes</h3> 
      <p>We’re introducing a lot of new functionality on our site, and that means we need to update and define additional routes for our users. Let’s take a step back to examine the overall strategy for our routes:</p> 
      <ul> 
       <li>The <code class="highlighter-rouge">/</code> or <code class="highlighter-rouge">/index.html</code> route will be the default route, but should only be accessible if a user has been authenticated. After all, we don’t want unauthorized users seeing our awesome button-click app!</li> 
       <li>We need to create a <code class="highlighter-rouge">/login</code> route that will authenticate users with GitHub.</li> 
       <li>Additionally, we’ll want a <code class="highlighter-rouge">/profile</code> page that shows a user’s information</li> 
       <li>A user will also want to <code class="highlighter-rouge">/logout</code>.</li> 
       <li>We’ll want to include a few application specific routes to post user information via an API, and define the previously mentioned <code class="highlighter-rouge">/auth/github</code> and <code class="highlighter-rouge">/auth/github/callback</code> routes</li> 
      </ul> 
      <p>Let’s start by including passport as an argument for our function. This will allow us access to Passport’s internal methods and functionality within our routes.</p> 
      <p><em>app/routes/index.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">ClickHandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(...);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">passport</span><span class="p">)</span> <span class="p">{</span>

	<span class="p">...</span>
	<span class="p">...</span>

<span class="p">};</span>
</code></pre> 
      </div> 
      <p>Next, let’s create a function that we can use in our routes that will determine if the user is authenticated.</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">passport</span><span class="p">)</span> <span class="p">{</span>

	<span class="kd">function</span> <span class="nx">isLoggedIn</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">isAuthenticated</span><span class="p">())</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="p">...</span>
	<span class="p">...</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>This function is what’s known as <a href="http://expressjs.com/guide/using-middleware.html">Express middleware</a>. Essentially, Express itself is simply a series of middleware calls (i.e. the routing in Express is considered middleware).</p> 
      <p>It’s going to take the <code class="highlighter-rouge">req</code> and <code class="highlighter-rouge">res</code> objects as arguments along with <code class="highlighter-rouge">next</code>. Next is a common convention used to tell Express to pass control to the next handler (or middleware) in the process. This can be found in the <a href="http://expressjs.com/guide/routing.html">Express routing docs</a>.</p> 
      <p>So what is this function doing?</p> 
      <p><code class="highlighter-rouge">if (req.isAuthenticated()) {...}</code>: <a href="https://github.com/jaredhanson/passport/blob/a892b9dc54dce34b7170ad5d73d8ccfba87f4fcf/lib/passport/http/request.js#L74"><code class="highlighter-rouge">req.isAuthenticated()</code></a> is a Passport method which will return a <code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code> value if the user has been authenticated.</p> 
      <p>If this method returns <code class="highlighter-rouge">true</code>, then we are returning the <code class="highlighter-rouge">next()</code> function, which returns control to the next middleware. This entire statement is saying, “if the user has been verified, then carry on.”</p> 
      <p>If the user is <em>not</em> authenticated, then we are redirecting them back to the login page with <code class="highlighter-rouge">res.redirect('/login')</code>. Now let’s add our additional authentication routes.</p> 
      <p><strong>/index</strong></p> 
      <p>These routes will look very similar to the routes from the previous tutorial, with a small amount of added functionality. Don’t worry, we’ll break each one down step-by-step.</p> 
      <p>Before moving onto new routes, we must first make a small edit to our <code class="highlighter-rouge">/</code> route. Since this is the default route for our application, and users shouldn’t see this unless authenticated, we need Express to call the <code class="highlighter-rouge">isLoggedIn</code> function when a <code class="highlighter-rouge">get</code> request is made to the server.</p> 
      <p><em>index.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>

<span class="kd">function</span> <span class="nx">isLoggedIn</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

<span class="kd">var</span> <span class="nx">clickHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">clickHandler</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">'/public/index.html'</span><span class="p">);</span>
	<span class="p">});</span>

<span class="p">...</span>
</code></pre> 
      </div> 
      <p>You’ll notice that immediately after the get request, we’re going to check that a user is authenticated and logged in via the <code class="highlighter-rouge">isLoggedIn</code> function. Remember that if the user is not authenticated, this function will redirect to the <code class="highlighter-rouge">/login</code> route. However, if the user <em>is</em> authenticated, then Express passes control back to the app.route middleware and proceeds processing the route.</p> 
      <p><strong>/login</strong></p> 
      <p>This route will be one of the only routes in our application that does not require a user to be logged in. In essence, this becomes the default URL when a user has not been authenticated.</p> 
      <p><em>index.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...)</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">'/public/login.html'</span><span class="p">);</span>
	<span class="p">});</span>

<span class="p">...</span>
</code></pre> 
      </div> 
      <p>This route is fairly straightforward. We don’t need to check to see if the user is logged in, since this will be our view which asks the user to authenticate with GitHub.</p> 
      <p><strong>/logout</strong></p> 
      <p>This is the route that will be used when a user would like to log out of the application. Once logged out, the user will be redirected back to the <code class="highlighter-rouge">/login</code> page.</p> 
      <p><em>index.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...)</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/logout'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">req</span><span class="p">.</span><span class="nx">logout</span><span class="p">();</span>
		<span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">);</span>
	<span class="p">});</span>
<span class="p">...</span>
</code></pre> 
      </div> 
      <p>Here, we’re introducing a bit of new functionality. When a <code class="highlighter-rouge">get</code> request is made to the <code class="highlighter-rouge">/logout</code> route, we are calling the <code class="highlighter-rouge">logout()</code> function, which <a href="http://passportjs.org/docs/logout">Passport includes</a> on the <code class="highlighter-rouge">req</code> object. This function will remove the <code class="highlighter-rouge">req.user</code> property and clear out any sessions that are present.</p> 
      <p>Once the session has been cleared and the <code class="highlighter-rouge">req.user</code> property removed, the app is then redirected to the <code class="highlighter-rouge">/login</code> route.</p> 
      <p><strong>/profile</strong></p> 
      <p>This will be a very small profile page that will show the user’s GitHub information. Of course, the user must be authenticated in order to see this content.</p> 
      <p><em>index.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...)</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/logout'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/profile'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">'/public/profile.html'</span><span class="p">);</span>
	<span class="p">});</span>

<span class="p">...</span>
</code></pre> 
      </div> 
      <p>There’s not any new functionality here, so this should look really familiar by this point.</p> 
      <p><strong>/api/user</strong></p> 
      <p>This route will be our user API that will store the user’s GitHub information for us to retrieve on the front end.</p> 
      <p><em>index.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...)</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/logout'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/profile'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/api/:id'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
		<span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">github</span><span class="p">);</span>
	<span class="p">});</span>

<span class="p">...</span>
</code></pre> 
      </div> 
      <p>Here we’re introducing some new Express functionality. We’ve added <code class="highlighter-rouge">:id</code> to the API route. This is known as a route parameter. When the <code class="highlighter-rouge">/auth/github</code> route is requested and Passport authenticates successfully with GitHub, Passport creates a <code class="highlighter-rouge">user</code> property on the Express <code class="highlighter-rouge">req</code> object. This object contains all of the fields requested from the GitHub API (i.e. username, display name, number of repos, ID, etc.).</p> 
      <p>When the route is requested, the ID from this user object is passed as part of the URL (i.e. the URL would look like <code class="highlighter-rouge">/api/1234567</code>). This makes these requested URLs unique to each user.</p> 
      <p>When a <code class="highlighter-rouge">get</code> request is made to this route, Express should reply with a JSON object that contains the <code class="highlighter-rouge">req.user.github</code> object from Passport. This is the object which contains all the relevant user information, and we will query this from the front end later for the profile page.</p> 
      <p><strong>/auth/github</strong></p> 
      <p>This is the route that will be used when the user clicks the “Login” button and will initiate authentication with GitHub via Passport.</p> 
      <p><em>index.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...)</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/logout'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/profile'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/api/:id'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/auth/github'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">'github'</span><span class="p">));</span>

<span class="p">...</span>
</code></pre> 
      </div> 
      <p>Again, this route will call the Passport <a href="http://passportjs.org/docs/authenticate"><code class="highlighter-rouge">authenticate</code></a> function, which will authenticate using the appropriate strategy (in this case, <code class="highlighter-rouge">'github'</code>).</p> 
      <p><strong>/auth/github/callback</strong></p> 
      <p>Remember setting up the GitHub app configuration and specifying a callback URL? Now we’re going to specify what should be done when this URL is called by GitHub. This route will only be called after GitHub authentication has completed, and thus we need to be able to handle both success and failure conditions.</p> 
      <p><em>index.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...)</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/logout'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/profile'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/api/:id'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/auth/github'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/auth/github/callback'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">'github'</span><span class="p">,</span> <span class="p">{</span>
		<span class="na">successRedirect</span><span class="p">:</span> <span class="s1">'/'</span><span class="p">,</span>
		<span class="na">failureRedirect</span><span class="p">:</span> <span class="s1">'/login'</span>
	<span class="p">}));</span>

<span class="p">...</span>
</code></pre> 
      </div> 
      <p>In addition to the Passport authentication, we’re passing an object that will tell Passport where to redirect to pending both a successful and failed authentication attempt.</p> 
      <p>In the case of successful authentication, the user should be redirected to our click application (<code class="highlighter-rouge">/</code>), but should be <a href="http://passportjs.org/docs/authenticate">redirected</a> back to the login page (<code class="highlighter-rouge">/login</code>) if the authentication is unsuccessful.</p> 
      <p>Next, let’s update the routes that get the click information. We’ll be posting the number of user clicks to a separate API. This is done mostly for illustrative purposes, and it’s completely fine to simply take the number of clicks from the current user API instead.</p> 
      <p><em>index.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>

<span class="p">...</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/auth/github/callback'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(...);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/api/:id/clicks'</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="nx">clickHandler</span><span class="p">.</span><span class="nx">getClicks</span><span class="p">)</span>
	<span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="nx">clickHandler</span><span class="p">.</span><span class="nx">addClick</span><span class="p">)</span>
	<span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="nx">clickHandler</span><span class="p">.</span><span class="nx">resetClicks</span><span class="p">);</span>
</code></pre> 
      </div> 
      <p>We’re making the clicks API user specific by inserting the <code class="highlighter-rouge">:id</code> parameter into the API. Additionally, we’re ensuring that the user is logged in and authenticated by including our <code class="highlighter-rouge">isLoggedIn</code> function as part of the route.</p> 
      <p>Finally, here’s the full <code class="highlighter-rouge">index.js</code> file:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">path</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">ClickHandler</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">'/app/controllers/clickHandler.server.js'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">passport</span><span class="p">)</span> <span class="p">{</span>

	<span class="kd">function</span> <span class="nx">isLoggedIn</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">isAuthenticated</span><span class="p">())</span> <span class="p">{</span>
			<span class="k">return</span> <span class="nx">next</span><span class="p">();</span>
		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
			<span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="kd">var</span> <span class="nx">clickHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ClickHandler</span><span class="p">();</span>

	<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">'/public/index.html'</span><span class="p">);</span>
		<span class="p">});</span>

	<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">'/public/login.html'</span><span class="p">);</span>
		<span class="p">});</span>

	<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/logout'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">req</span><span class="p">.</span><span class="nx">logout</span><span class="p">();</span>
			<span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">'/login'</span><span class="p">);</span>
		<span class="p">});</span>

	<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/profile'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">res</span><span class="p">.</span><span class="nx">sendFile</span><span class="p">(</span><span class="nx">path</span> <span class="o">+</span> <span class="s1">'/public/profile.html'</span><span class="p">);</span>
		<span class="p">});</span>

	<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/api/:id'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">github</span><span class="p">);</span>
		<span class="p">});</span>

	<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/auth/github'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">'github'</span><span class="p">));</span>

	<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/auth/github/callback'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">'github'</span><span class="p">,</span> <span class="p">{</span>
			<span class="na">successRedirect</span><span class="p">:</span> <span class="s1">'/'</span><span class="p">,</span>
			<span class="na">failureRedirect</span><span class="p">:</span> <span class="s1">'/login'</span>
		<span class="p">}));</span>

	<span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="s1">'/api/:id/clicks'</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="nx">clickHandler</span><span class="p">.</span><span class="nx">getClicks</span><span class="p">)</span>
		<span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="nx">clickHandler</span><span class="p">.</span><span class="nx">addClick</span><span class="p">)</span>
		<span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="nx">isLoggedIn</span><span class="p">,</span> <span class="nx">clickHandler</span><span class="p">.</span><span class="nx">resetClicks</span><span class="p">);</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>That’s all of the routes for our application! Let’s move on to modifying our server file and finishing up the backend modifications.</p> 
      <h3 id="updating-the-server-file">Updating the Server File</h3> 
      <p>Now we’ll begin making the final server-side modifications. The first step is to include our additional NPM modules (express-session and passport) in the <code class="highlighter-rouge">server.js</code> file.</p> 
      <p><em>server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express'</span><span class="p">),</span>
	<span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./app/routes/index.js'</span><span class="p">),</span>
	<span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'mongoose'</span><span class="p">),</span>
	<span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'passport'</span><span class="p">),</span>
	<span class="nx">session</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express-session'</span><span class="p">);</span>
</code></pre> 
      </div> 
      <p>Next, we need to pass in this <code class="highlighter-rouge">passport</code> NPM Module to the Passport configuration file we created earlier (<code class="highlighter-rouge">app/config/passport.js</code>). Remember that the exported module from that file takes <code class="highlighter-rouge">passport</code> as an argument, so we’re essentially initializing the Passport functionality when the <code class="highlighter-rouge">server.js</code> file is run by Node.</p> 
      <p>In addition, here me initialize the dotenv Node module, which will add our GitHub API information from <code class="highlighter-rouge">.env</code> to the Node <code class="highlighter-rouge">process.env</code> object.</p> 
      <p><em>server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'dotenv'</span><span class="p">).</span><span class="nx">load</span><span class="p">();</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'./app/config/passport'</span><span class="p">)(</span><span class="nx">passport</span><span class="p">);</span>
</code></pre> 
      </div> 
      <p>The next step is to setup the Express session information and initialize Passport and the Passport session.</p> 
      <p><em>server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">'/controllers'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'/app/controllers'</span><span class="p">));</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">'/public'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'/public'</span><span class="p">));</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">session</span><span class="p">({</span>
	<span class="na">secret</span><span class="p">:</span> <span class="s1">'secretClementine'</span><span class="p">,</span>
	<span class="na">resave</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
	<span class="na">saveUninitialized</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">}));</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">initialize</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>

<span class="p">...</span>
</code></pre> 
      </div> 
      <p>Here we’re using the Express <a href="http://expressjs.com/4x/api.html#app.use">app.use</a> function to configure the session options.</p> 
      <p><code class="highlighter-rouge">secret</code> is our session secret. This is essentially a “password” that is used to create the session and prevent it from being hijacked. This makes hacking session information harder to hack and helps prevent others from impersonating specific users.</p> 
      <p>The newest version of Express-Session requires settings for <code class="highlighter-rouge">resave</code> and <code class="highlighter-rouge">saveUninitialized</code>. <a href="https://github.com/expressjs/session#resave"><code class="highlighter-rouge">resave</code></a> simply tells Express if you want to re-save the session to storage even when it has not been modified. This value is typically set to <code class="highlighter-rouge">false</code>, and we’re using that setting as well. <a href="https://github.com/expressjs/session#saveuninitialized"><code class="highlighter-rouge">saveUninitialized</code></a> will force a new session (which has not been modified) to be created and stored. The default setting is <code class="highlighter-rouge">true</code>, so that’s what we’re using in our app.</p> 
      <p><a href="http://passportjs.org/docs/configure"><code class="highlighter-rouge">passport.initialize</code></a> is required by Passport in order to initialize the Passport application. Similar to the Express initialization, this will instantiate the Passport functionality. Additionally, we use the <a href="http://passportjs.org/docs/configure"><code class="highlighter-rouge">passport.session()</code></a> middleware to enable the usage of session storage.</p> 
      <p>Next, we need to pass the Passport object into our routes file as an argument. Remember that we used Passport functionality within our routes, so we need to ensure that we enable the use of the Passport methods by passing it into our routes module.</p> 
      <p><em>server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">session</span><span class="p">({</span>
	<span class="na">secret</span><span class="p">:</span> <span class="s1">'secretClementine'</span><span class="p">,</span>
	<span class="na">resave</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
	<span class="na">saveUninitialized</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">}));</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">initialize</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>

<span class="nx">routes</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">passport</span><span class="p">);</span>

<span class="p">...</span>
</code></pre> 
      </div> 
      <p>Remember when we defined the <code class="highlighter-rouge">MONGO_URI</code> and <code class="highlighter-rouge">PORT</code> variables in the <code class="highlighter-rouge">.env</code> file in an <a href="#create-environmental-variables">earlier section</a>? Let’s remove the repetitive references and update them to point to the new variables in the <code class="highlighter-rouge">.env</code> file.</p> 
      <p><em>server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code>
<span class="p">...</span>

<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'dotenv'</span><span class="p">).</span><span class="nx">load</span><span class="p">();</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'./app/config/passport'</span><span class="p">)(</span><span class="nx">passport</span><span class="p">);</span>

<span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGO_URI</span><span class="p">);</span>

<span class="p">...</span>
<span class="p">...</span>

<span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8080</span><span class="p">;</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
   <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Node.js listening on port '</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">+</span> <span class="s1">'...'</span><span class="p">);</span>
<span class="p">});</span>

</code></pre> 
      </div> 
      <p>In the above, we’ve changed the argument for the <code class="highlighter-rouge">mongoose.connect()</code> method to reference the property in the <code class="highlighter-rouge">process.env</code> object. Additionally, we’ve included <code class="highlighter-rouge">var port = process.env.PORT || 8080;</code> This statement uses the JavaScript <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR_()">OR operator</a> (<code class="highlighter-rouge">||</code>).</p> 
      <p>If what’s left of the <code class="highlighter-rouge">||</code> evaluates to <code class="highlighter-rouge">true</code>, then that is the value that is used. However, if the value left of <code class="highlighter-rouge">||</code> evaluates to <code class="highlighter-rouge">false</code>, then JS will check the value on the right. If that value evaluates as <code class="highlighter-rouge">true</code>, then it is used. We’re saying “if there is a <code class="highlighter-rouge">process.env.PORT</code> variable, use it – else use the port <code class="highlighter-rouge">8080</code>.”</p> 
      <p>The full <code class="highlighter-rouge">server.js</code> file:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express'</span><span class="p">),</span>
	<span class="nx">routes</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'./app/routes/index.js'</span><span class="p">),</span>
	<span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'mongoose'</span><span class="p">),</span>
	<span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'passport'</span><span class="p">),</span>
	<span class="nx">session</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express-session'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'dotenv'</span><span class="p">).</span><span class="nx">load</span><span class="p">();</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'./app/config/passport'</span><span class="p">)(</span><span class="nx">passport</span><span class="p">);</span>

<span class="nx">mongoose</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">MONGO_URI</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">'/controllers'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'/app/controllers'</span><span class="p">));</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">'/public'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'/public'</span><span class="p">));</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">session</span><span class="p">({</span>
	<span class="na">secret</span><span class="p">:</span> <span class="s1">'secretClementine'</span><span class="p">,</span>
	<span class="na">resave</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
	<span class="na">saveUninitialized</span><span class="p">:</span> <span class="kc">true</span>
<span class="p">}));</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">initialize</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>

<span class="nx">routes</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="nx">passport</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">port</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PORT</span> <span class="o">||</span> <span class="mi">8080</span><span class="p">;</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="nx">port</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Node.js listening on port '</span> <span class="o">+</span> <span class="nx">port</span> <span class="o">+</span> <span class="s1">'...'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre> 
      </div> 
      <p>Let’s run a quick test. Within the project directory, start the application using <code class="highlighter-rouge">node server</code>. Then, point a browser to <code class="highlighter-rouge">localhost:8080</code>. There should be an error message referencing the <code class="highlighter-rouge">/login</code> route. This means that the app is working as intended at the moment - we tried to access the <code class="highlighter-rouge">/</code> route, but were redirected to <code class="highlighter-rouge">/login</code>. Since we’ve yet to create the view for that page, we get an error.</p> 
      <h2 id="passport-client-side-integration">Passport Client-Side Integration</h2> 
      <p>To integrate our newly created authentication routines on the client side, we’ll take the following approach:</p> 
      <ul> 
       <li>Refactor our common AJAX controller functions into their own file</li> 
       <li>Update click controller to pull from new user-specific click API</li> 
       <li>Create a user controller to retrieve user information and pass it to the view</li> 
       <li>Create views for each of the routes</li> 
       <li>Apply CSS</li> 
      </ul> 
      <h3 id="refactor-common-ajax-functions">Refactor Common AJAX Functions</h3> 
      <p>Since we’ll have multiple controllers in our application making AJAX requests, we’ll be reusing a bit of functionality. It’s best to follow the DRY (don’t repeat yourself) principle as much as possible when coding. In this case, let’s take these common functions make them available across each of our controllers without having to type them out more than once.</p> 
      <p>Let’s start by creating a new file in <code class="highlighter-rouge">/app/common</code> named <code class="highlighter-rouge">ajax-functions.js</code>. Begin by creating a new variable with our app URL and an object named <code class="highlighter-rouge">ajaxFunctions</code>:</p> 
      <p><em>ajax-functions.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="kd">var</span> <span class="nx">appUrl</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">origin</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">ajaxFunctions</span> <span class="o">=</span> <span class="p">{};</span>
</code></pre> 
      </div> 
      <p>The <code class="highlighter-rouge">appUrl</code> will prevent us from having to type out the information multiple times and allow us to simply concatenate the value of <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLUtils/origin"><code class="highlighter-rouge">window.location.origin</code> property</a> with API information in our client-side controllers. This property will return the root URL of the current browser window (i.e. it should always reference <code class="highlighter-rouge">http://localhost:8080/</code>).</p> 
      <p>Let’s now expand upon this object by adding our functions as methods! We’ll extract these functions from the <code class="highlighter-rouge">clickController.client.js</code> file.</p> 
      <p><em>ajax-functions.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="kd">var</span> <span class="nx">ajaxFunctions</span> <span class="o">=</span> <span class="p">{</span>
   <span class="na">ready</span><span class="p">:</span> <span class="kd">function</span> <span class="nx">ready</span> <span class="p">(</span><span class="nx">fn</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">fn</span> <span class="o">!==</span> <span class="s1">'function'</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="s1">'complete'</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="nx">fn</span><span class="p">();</span>
      <span class="p">}</span>

      <span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'DOMContentLoaded'</span><span class="p">,</span> <span class="nx">fn</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
   <span class="p">},</span>
   <span class="na">ajaxRequest</span><span class="p">:</span> <span class="kd">function</span> <span class="nx">ajaxRequest</span> <span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">xmlhttp</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>

      <span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">onreadystatechange</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
         <span class="k">if</span> <span class="p">(</span><span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">readyState</span> <span class="o">===</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">status</span> <span class="o">===</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">callback</span><span class="p">(</span><span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">response</span><span class="p">);</span>
         <span class="p">}</span>
      <span class="p">};</span>

      <span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="nx">method</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
      <span class="nx">xmlhttp</span><span class="p">.</span><span class="nx">send</span><span class="p">();</span>
   <span class="p">}</span>
<span class="p">};</span>
</code></pre> 
      </div> 
      <p>The functions themselves should be familiar from the previous tutorial. We can now remove these functions from our <code class="highlighter-rouge">clickController.client.js</code> file, which should now look like:</p> 
      <p><em>clickController.client.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

   <span class="kd">var</span> <span class="nx">addButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'.btn-add'</span><span class="p">);</span>
   <span class="kd">var</span> <span class="nx">deleteButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'.btn-delete'</span><span class="p">);</span>
   <span class="kd">var</span> <span class="nx">clickNbr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'#click-nbr'</span><span class="p">);</span>
   <span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="s1">'http://localhost:8080/api/clicks'</span><span class="p">;</span>

   <span class="kd">function</span> <span class="nx">updateClickCount</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">clicksObject</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
      <span class="nx">clickNbr</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">clicksObject</span><span class="p">.</span><span class="nx">clicks</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="nx">ready</span><span class="p">(</span><span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="nx">updateClickCount</span><span class="p">));</span>

   <span class="nx">addButton</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

      <span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'POST'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
         <span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="nx">updateClickCount</span><span class="p">);</span>
      <span class="p">});</span>

   <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>

   <span class="nx">deleteButton</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

      <span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'DELETE'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
         <span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="nx">updateClickCount</span><span class="p">);</span>
      <span class="p">});</span>

   <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>

<span class="p">})();</span>
</code></pre> 
      </div> 
      <p>We’ll come back to this file momentarily to make a few additional modifications. First, let’s ensure that the new common functions are included in the <code class="highlighter-rouge">index.html</code> file and we provide a static path to file in the <code class="highlighter-rouge">server.js</code> file. It’s important that the common function file comes <em>before</em> the other controller files.</p> 
      <p><em>index.html</em>:</p> 
      <div class="language-html highlighter-rouge">
       <pre class="highlight"><code>		...
		<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"common/ajax-functions.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
		<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"controllers/clickController.client.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
	<span class="nt">&lt;/body&gt;</span>
</code></pre> 
      </div> 
      <p><em>server.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="p">...</span>
<span class="p">...</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">'/controllers'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'/app/controllers'</span><span class="p">));</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">'/public'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'/public'</span><span class="p">));</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="s1">'/common'</span><span class="p">,</span> <span class="nx">express</span><span class="p">.</span><span class="kr">static</span><span class="p">(</span><span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">()</span> <span class="o">+</span> <span class="s1">'/app/common'</span><span class="p">));</span>

<span class="p">...</span>
</code></pre> 
      </div> 
      <p>In <code class="highlighter-rouge">server.js</code>, we’ve added an additional static path for the <code class="highlighter-rouge">/app/common</code> folder.</p> 
      <h3 id="updating-the-click-controller">Updating the Click Controller</h3> 
      <p>Since we moved the location of our <code class="highlighter-rouge">clicks</code> property to be within the user object, we need to make a few additional small modifications to the current <code class="highlighter-rouge">clickController</code>.</p> 
      <p>The first modification should be to update the <code class="highlighter-rouge">apiURL</code> variable. We created a global variable named <code class="highlighter-rouge">appurl</code> with the base URL of our app. Here we’ll use that and concatenate it with the API information to create the entire API URL. Additionally, we’ve moved the location of our clicks API to <code class="highlighter-rouge">/api/:id/clicks</code>, so this variable should reflect that.</p> 
      <p><em>clickController.client.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
<span class="p">...</span>
<span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="nx">appUrl</span> <span class="o">+</span> <span class="s1">'/api/:id/clicks'</span><span class="p">;</span>

<span class="p">...</span>
<span class="p">})();</span>
</code></pre> 
      </div> 
      <p>Next, we need to update where we’re calling our AJAX functions from, since they’ve been moved to their own object. This can be done by using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#Dot_notation">dot notation</a> for the function calls using the syntax <code class="highlighter-rouge">objectname.method()</code>. As an example, we’ll update the <code class="highlighter-rouge">ready(...)</code> function call to be <code class="highlighter-rouge">ajaxFunctions.read(...)</code>. This needs to be done any time a method is invoked. Here’s what the revised file should look like:</p> 
      <p><em>clickController.client.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

   <span class="kd">var</span> <span class="nx">addButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'.btn-add'</span><span class="p">);</span>
   <span class="kd">var</span> <span class="nx">deleteButton</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'.btn-delete'</span><span class="p">);</span>
   <span class="kd">var</span> <span class="nx">clickNbr</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'#click-nbr'</span><span class="p">);</span>
   <span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="nx">appUrl</span> <span class="o">+</span> <span class="s1">'/api/:id/clicks'</span><span class="p">;</span>

   <span class="kd">function</span> <span class="nx">updateClickCount</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">clicksObject</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
      <span class="nx">clickNbr</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">clicksObject</span><span class="p">.</span><span class="nx">clicks</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="nx">ajaxFunctions</span><span class="p">.</span><span class="nx">ready</span><span class="p">(</span><span class="nx">ajaxFunctions</span><span class="p">.</span><span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="nx">updateClickCount</span><span class="p">));</span>

   <span class="nx">addButton</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

      <span class="nx">ajaxFunctions</span><span class="p">.</span><span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'POST'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
         <span class="nx">ajaxFunctions</span><span class="p">.</span><span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="nx">updateClickCount</span><span class="p">);</span>
      <span class="p">});</span>

   <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>

   <span class="nx">deleteButton</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>

      <span class="nx">ajaxFunctions</span><span class="p">.</span><span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'DELETE'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
         <span class="nx">ajaxFunctions</span><span class="p">.</span><span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="nx">updateClickCount</span><span class="p">);</span>
      <span class="p">});</span>

   <span class="p">},</span> <span class="kc">false</span><span class="p">);</span>

<span class="p">})();</span>
</code></pre> 
      </div> 
      <p>That’s the last of the click controller modifications. Let’s work on the views next.</p> 
      <h3 id="creating-new-views">Creating New Views</h3> 
      <h4 id="login-view">Login View</h4> 
      <p>Let’s begin by creating the view for our login page. Create a new file named <code class="highlighter-rouge">login.html</code> in the <code class="highlighter-rouge">/public</code> directory. Next, create the “template” HTML site we’ve used previously:</p> 
      <p><em>login.html</em>:</p> 
      <div class="language-html highlighter-rouge">
       <pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>

<span class="nt">&lt;html&gt;</span>

	<span class="nt">&lt;head&gt;</span>
		<span class="nt">&lt;title&gt;</span>Clementine.js - The elegant and lightweight full stack JavaScript boilerplate.<span class="nt">&lt;/title&gt;</span>
		
		<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"http://fonts.googleapis.com/css?family=Roboto:400,500"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"/public/css/main.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;/head&gt;</span>

	<span class="nt">&lt;body&gt;</span>
		
	<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre> 
      </div> 
      <p>I’m not going to go into the specifics of the above snippet since it’s been covered previously in the tutorial. We’ll use this again for our other HTML pages.</p> 
      <p>Before moving forward, head to <a href="https://github.com/johnstonbl01/clementinejs-fcc/blob/master/public/img/github_32px.png">this URL</a> and download a copy of the GitHub logo. Save it within the <code class="highlighter-rouge">/public/img</code> directory.</p> 
      <p>Now, let’s create a container <code class="highlighter-rouge">div</code> in the <code class="highlighter-rouge">body</code> with the remainder of our functionality.</p> 
      <p><em>login.html</em>:</p> 
      <div class="language-html highlighter-rouge">
       <pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
	<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>	
		<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"login"</span><span class="nt">&gt;</span>
			<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"/public/img/clementine_150.png"</span> <span class="nt">/&gt;</span>
			<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
			<span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"clementine-text"</span><span class="nt">&gt;</span>Clementine.js<span class="nt">&lt;/p&gt;</span>
			<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"/auth/github"</span><span class="nt">&gt;</span>
				<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"btn"</span> <span class="na">id=</span><span class="s">"login-btn"</span><span class="nt">&gt;</span>
					<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"/public/img/github_32px.png"</span> <span class="na">alt=</span><span class="s">"github logo"</span> <span class="nt">/&gt;</span>
					<span class="nt">&lt;p&gt;</span>LOGIN WITH GITHUB<span class="nt">&lt;/p&gt;</span>
				<span class="nt">&lt;/div&gt;</span>
			<span class="nt">&lt;/a&gt;</span>
		<span class="nt">&lt;/div&gt;</span>
	<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre> 
      </div> 
      <p>Ignore the CSS classes, as the stylesheet will be provided for these pages as it was in the previous tutorial. We create a <code class="highlighter-rouge">&lt;div&gt;</code> element for our login components, followed by inserting the Clementine.js logo. Next, the title <code class="highlighter-rouge">Clementine.js</code> is added in a <code class="highlighter-rouge">&lt;p&gt;</code> element.</p> 
      <p>Finally, we’re going to create an anchor element (<code class="highlighter-rouge">&lt;a&gt;</code>) and point the hyperlink to our <code class="highlighter-rouge">/auth/github</code> route. Remember that this is the route that will prompt authentication with GitHub.</p> 
      <p>Inside the anchor element, we’re including a <code class="highlighter-rouge">&lt;div&gt;</code> with the GitHub logo and the phrase, “LOGIN WITH GITHUB”. After CSS is applied, this anchor element will wrap the <code class="highlighter-rouge">&lt;div&gt;</code>. We do this so that whenever a user clicks anywhere on the <code class="highlighter-rouge">div</code>, it will fire the anchor element.</p> 
      <p>That’s it for the login page. We’re keeping it extremely simple.</p> 
      <h4 id="profile-view">Profile View</h4> 
      <p>Next, let’s create a new view for our GitHub profile information. Again, this page will be extremely simple, but will illustrate how to pull information from the API into our application.</p> 
      <p>Create a new file named <code class="highlighter-rouge">profile.html</code> in the <code class="highlighter-rouge">/public</code> directory. Start with the same beginning template as last time:</p> 
      <p><em>profile.html</em>:</p> 
      <div class="language-html highlighter-rouge">
       <pre class="highlight"><code><span class="nt">&lt;html&gt;</span>

	<span class="nt">&lt;head&gt;</span>
		<span class="nt">&lt;title&gt;</span>Clementine.js - The elegant and lightweight full stack JavaScript boilerplate.<span class="nt">&lt;/title&gt;</span>
		
		<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"http://fonts.googleapis.com/css?family=Roboto:400,500"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"/public/css/main.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;/head&gt;</span>

	<span class="nt">&lt;body&gt;</span>
		
	<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre> 
      </div> 
      <p>Next, we need to create the “profile card.” This will be a simple box with the GitHub logo and the user’s GitHub profile information. Again, head to <a href="https://github.com/johnstonbl01/clementinejs-fcc/blob/master/public/img/gh-mark-32px.png">this link</a> to download the GitHub logo (this one is black instead of white). Save it in the <code class="highlighter-rouge">/public/img/</code> directory.</p> 
      <p><em>profile.html</em>:</p> 
      <div class="language-html highlighter-rouge">
       <pre class="highlight"><code><span class="nt">&lt;body&gt;</span>
	<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"github-profile"</span><span class="nt">&gt;</span>
			<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"/public/img/gh-mark-32px.png"</span> <span class="na">alt=</span><span class="s">"github logo"</span> <span class="nt">/&gt;</span>
			<span class="nt">&lt;p&gt;&lt;span&gt;</span>ID: <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">id=</span><span class="s">"profile-id"</span> <span class="na">class=</span><span class="s">"profile-value"</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
			<span class="nt">&lt;p&gt;&lt;span&gt;</span>Username: <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">id=</span><span class="s">"profile-username"</span> <span class="na">class=</span><span class="s">"profile-value"</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
			<span class="nt">&lt;p&gt;&lt;span&gt;</span>Display Name: <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">id=</span><span class="s">"display-name"</span> <span class="na">class=</span><span class="s">"profile-value"</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
			<span class="nt">&lt;p&gt;&lt;span&gt;</span>Repositories: <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">id=</span><span class="s">"profile-repos"</span> <span class="na">class=</span><span class="s">"profile-value"</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
			<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"menu"</span> <span class="na">href=</span><span class="s">"/"</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;</span>
			<span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">"menu-divide"</span><span class="nt">&gt;</span>|<span class="nt">&lt;/p&gt;</span>
			<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"menu"</span> <span class="na">href=</span><span class="s">"/logout"</span><span class="nt">&gt;</span>Logout<span class="nt">&lt;/a&gt;</span>
		<span class="nt">&lt;/div&gt;</span>
	<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/body&gt;</span>
</code></pre> 
      </div> 
      <p>We begin by creating a container div for the profile. The following <code class="highlighter-rouge">div</code> element will be the actual profile card (<code class="highlighter-rouge">&lt;div class="github-profile"&gt;</code>). The first element within the card will be the black GitHub logo we used inside our login page button. Afterward, we’ll add paragraph elements which will contain the name of the field (i.e. <code class="highlighter-rouge">ID:</code>) followed by a <code class="highlighter-rouge">&lt;span&gt;</code> element that will be used to emphasize the names of the field names in the profile cards (i.e. making them bold instead of normal font weight).</p> 
      <p>The next <code class="highlighter-rouge">&lt;span&gt;</code> element that we will target with our AJAX calls to fill with the profile information (i.e. <code class="highlighter-rouge">&lt;span id="profile-username" class="profile-value"&gt;</code>). Lastly, we will add links at the bottom of the menu to return to the Home (<code class="highlighter-rouge">index.html</code> page or to logout). Notice that when we’re using anchor (<code class="highlighter-rouge">&lt;a&gt;</code>) elements again, and in order for a user to log out, we’re simply directing them to our <code class="highlighter-rouge">/logout</code> route as the <code class="highlighter-rouge">href</code> attribute value.</p> 
      <p>Finally, the last step for this view will be to add links to all of our JavaScript files (we’ll create the user controller shortly).</p> 
      <p><em>profile.html</em>:</p> 
      <div class="language-html highlighter-rouge">
       <pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>

<span class="nt">&lt;html&gt;</span>

	<span class="nt">&lt;head&gt;</span>
		<span class="nt">&lt;title&gt;</span>Clementine.js - The elegant and lightweight full stack JavaScript boilerplate.<span class="nt">&lt;/title&gt;</span>
		
		<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"http://fonts.googleapis.com/css?family=Roboto:400,500"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"/public/css/main.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;/head&gt;</span>

	<span class="nt">&lt;body&gt;</span>
		<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
			<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"github-profile"</span><span class="nt">&gt;</span>
				<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"/public/img/gh-mark-32px.png"</span> <span class="na">alt=</span><span class="s">"github logo"</span> <span class="nt">/&gt;</span>
				<span class="nt">&lt;p&gt;&lt;span&gt;</span>ID: <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">id=</span><span class="s">"profile-id"</span> <span class="na">class=</span><span class="s">"profile-value"</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
				<span class="nt">&lt;p&gt;&lt;span&gt;</span>Username: <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">id=</span><span class="s">"profile-username"</span> <span class="na">class=</span><span class="s">"profile-value"</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
				<span class="nt">&lt;p&gt;&lt;span&gt;</span>Display Name: <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">id=</span><span class="s">"display-name"</span> <span class="na">class=</span><span class="s">"profile-value"</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
				<span class="nt">&lt;p&gt;&lt;span&gt;</span>Repositories: <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">id=</span><span class="s">"profile-repos"</span> <span class="na">class=</span><span class="s">"profile-value"</span><span class="nt">&gt;&lt;/span&gt;&lt;/p&gt;</span>
				<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"menu"</span> <span class="na">href=</span><span class="s">"/"</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;</span>
				<span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">"menu-divide"</span><span class="nt">&gt;</span>|<span class="nt">&lt;/p&gt;</span>
				<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"menu"</span> <span class="na">href=</span><span class="s">"/logout"</span><span class="nt">&gt;</span>Logout<span class="nt">&lt;/a&gt;</span>
			<span class="nt">&lt;/div&gt;</span>
		<span class="nt">&lt;/div&gt;</span>
		
		<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"common/ajax-functions.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
		<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"controllers/userController.client.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
	<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre> 
      </div> 
      <h4 id="updating-indexhtml">Updating Index.html</h4> 
      <p>The last step in creating the views is to update our existing <code class="highlighter-rouge">index.html</code> to include a few new features. We want to display the user’s name when they log in, and provide a way for them to visit the profile page and log out.</p> 
      <p>Let’s put the user information and navigation at the top of the page. We’ll want to wrap this within a <code class="highlighter-rouge">&lt;header&gt;</code> element between the <code class="highlighter-rouge">&lt;head&gt;</code> and <code class="highlighter-rouge">&lt;body&gt;</code> sections of the page.</p> 
      <p><em>index.html</em>:</p> 
      <div class="language-html highlighter-rouge">
       <pre class="highlight"><code><span class="nt">&lt;head&gt;</span>
	...
<span class="nt">&lt;/head&gt;</span>

<span class="nt">&lt;header&gt;</span>
	<span class="nt">&lt;p&gt;</span>Welcome, <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"display-name"</span><span class="nt">&gt;&lt;/span&gt;</span>!<span class="nt">&lt;/p&gt;</span>
	<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"menu"</span> <span class="na">href=</span><span class="s">"/profile"</span><span class="nt">&gt;</span>Profile<span class="nt">&lt;/a&gt;</span>
	<span class="nt">&lt;p&gt;</span>|<span class="nt">&lt;/p&gt;</span>
	<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"menu"</span> <span class="na">href=</span><span class="s">"/logout"</span><span class="nt">&gt;</span>Logout<span class="nt">&lt;/a&gt;</span>
<span class="nt">&lt;/header&gt;</span>

<span class="nt">&lt;body&gt;</span>
	...
<span class="nt">&lt;/body&gt;</span>
</code></pre> 
      </div> 
      <p>We’re creating a paragraph element with another <code class="highlighter-rouge">&lt;span&gt;</code> element that we’ll use to target with AJAX from the user controller. Next, we create another simple, text-based means of navigation for the user to reach the profile page and logout.</p> 
      <p><em>index.html</em>:</p> 
      <div class="language-html highlighter-rouge">
       <pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>

<span class="nt">&lt;html&gt;</span>

	<span class="nt">&lt;head&gt;</span>
		<span class="nt">&lt;title&gt;</span>Clementine.js - The elegant and lightweight full stack JavaScript boilerplate.<span class="nt">&lt;/title&gt;</span>
		
		<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"http://fonts.googleapis.com/css?family=Roboto:400,500"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">"/public/css/main.css"</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;/head&gt;</span>

	<span class="nt">&lt;header&gt;</span>
		<span class="nt">&lt;p&gt;</span>Welcome, <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"display-name"</span><span class="nt">&gt;&lt;/span&gt;</span>!<span class="nt">&lt;/p&gt;</span>
		<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"menu"</span> <span class="na">href=</span><span class="s">"/profile"</span><span class="nt">&gt;</span>Profile<span class="nt">&lt;/a&gt;</span>
		<span class="nt">&lt;p&gt;</span>|<span class="nt">&lt;/p&gt;</span>
		<span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">"menu"</span> <span class="na">href=</span><span class="s">"/logout"</span><span class="nt">&gt;</span>Logout<span class="nt">&lt;/a&gt;</span>
	<span class="nt">&lt;/header&gt;</span>

	<span class="nt">&lt;body&gt;</span>
		<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
			<span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"/public/img/clementine_150.png"</span> <span class="nt">/&gt;</span>
			<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
			<span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"clementine-text"</span><span class="nt">&gt;</span>Clementine.js<span class="nt">&lt;/p&gt;</span>
		<span class="nt">&lt;/div&gt;</span>
	
		<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
			<span class="nt">&lt;p&gt;</span>You have clicked the button <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">"click-nbr"</span><span class="nt">&gt;&lt;/span&gt;</span> times.<span class="nt">&lt;/p&gt;</span>
			<span class="nt">&lt;br</span> <span class="nt">/&gt;</span>
			<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"btn-container"</span><span class="nt">&gt;</span>
				<span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">class=</span><span class="s">"btn btn-add"</span><span class="nt">&gt;</span>CLICK ME!<span class="nt">&lt;/button&gt;</span>
				<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn btn-delete"</span><span class="nt">&gt;</span>RESET<span class="nt">&lt;/button&gt;</span>
			<span class="nt">&lt;/div&gt;</span>
		<span class="nt">&lt;/div&gt;</span>
		
		<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"common/ajax-functions.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
		<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"controllers/clickController.client.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
		<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"controllers/userController.client.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
	<span class="nt">&lt;/body&gt;</span>

<span class="nt">&lt;/html&gt;</span>
</code></pre> 
      </div> 
      <h3 id="create-the-user-controller">Create the User Controller</h3> 
      <p>The next problem we need to solve is to write a controller which will retrieve the user information from the API and update the appropriate values in the view. This controller is slightly different in that we want to be able to use this controller for both the <code class="highlighter-rouge">index.html</code> and <code class="highlighter-rouge">profile.html</code> views.</p> 
      <p>The profile page will have fields that we don’t want to show on the <code class="highlighter-rouge">index.html</code> page, so we have to think about how to write the code so that it is dynamic enough to not produce errors a page is missing certain HTML elements. We’ll work through this problem shortly.</p> 
      <p>Fist, create a new file in the <code class="highlighter-rouge">/app/controllers/</code> directory named <code class="highlighter-rouge">userController.client.js</code>. Then, let’s begin simlar to the click controller, by specifing strict mode with <code class="highlighter-rouge">'use strict';</code> and creating an <a href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression">IIFE</a>.</p> 
      <p><em>userController.client.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
	
<span class="p">})();</span>
</code></pre> 
      </div> 
      <p>Next, let’s store our HTML elements and API URL within variables for use within the AJAX functions.</p> 
      <p><em>userController.client.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
   <span class="kd">var</span> <span class="nx">profileId</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'#profile-id'</span><span class="p">)</span> <span class="o">||</span> <span class="kc">null</span><span class="p">;</span>
   <span class="kd">var</span> <span class="nx">profileUsername</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'#profile-username'</span><span class="p">)</span> <span class="o">||</span> <span class="kc">null</span><span class="p">;</span>
   <span class="kd">var</span> <span class="nx">profileRepos</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'#profile-repos'</span><span class="p">)</span> <span class="o">||</span> <span class="kc">null</span><span class="p">;</span>
   <span class="kd">var</span> <span class="nx">displayName</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'#display-name'</span><span class="p">);</span>
   <span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="nx">appUrl</span> <span class="o">+</span> <span class="s1">'/api/:id'</span><span class="p">;</span>
<span class="p">})();</span>
</code></pre> 
      </div> 
      <p>Notice that for the <code class="highlighter-rouge">profileId</code>, <code class="highlighter-rouge">profileUsername</code> and <code class="highlighter-rouge">profileRepos</code>, we’re adding the <code class="highlighter-rouge">|| null</code> condition at the end of the statement. What is this doing? JavaScript will interpret this <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Logical_OR">logical OR</a> expression in the following way:</p> 
      <ul> 
       <li>If what’s left of the <code class="highlighter-rouge">||</code> evaluates to <code class="highlighter-rouge">true</code>, then that value is returned</li> 
       <li>If what’s left of the <code class="highlighter-rouge">||</code> evaluates to <code class="highlighter-rouge">false</code> and the expression to the right evaluates to true, then the value on the right is returned.</li> 
       <li>If both expressions are true, then the left value is returned.</li> 
       <li>If both expressions are false, then neither value is returned.</li> 
      </ul> 
      <p>Our <code class="highlighter-rouge">var</code> statements will set the variable value equal to the HTML element if it exists, and if not it will set it equal to <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"><code class="highlighter-rouge">null</code></a>. We don’t do this for the <code class="highlighter-rouge">displayName</code> variable because it will be used in both the <code class="highlighter-rouge">profile</code> and <code class="highlighter-rouge">index</code> views. We’ll take advantage of this HTML element or null value within our AJAX function.</p> 
      <p>Before doing that, we have also created the <code class="highlighter-rouge">apiUrl</code> similar to the <code class="highlighter-rouge">clickController</code>, which references the API for our user information as defined in the routes file (<code class="highlighter-rouge">index.js</code>). Again, we’re referencing the global variable created in <code class="highlighter-rouge">ajax-functions.js</code> to prevent us form typing the URL multiple times.</p> 
      <p>Now, let’s create the function that will be called as the callback for the AJAX functions. This function will need to update the HTML elements, but also be flexible enough so that we can re-use it without writing a new function for every element.</p> 
      <p><em>userController.client.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
   <span class="p">...</span>

   <span class="kd">function</span> <span class="nx">updateHtmlElement</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">userProperty</span><span class="p">)</span> <span class="p">{</span>
   	<span class="nx">element</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">userProperty</span><span class="p">];</span>
   <span class="p">}</span>
<span class="p">})();</span>
</code></pre> 
      </div> 
      <p>This new function will take 3 arguments:</p> 
      <ul> 
       <li><code class="highlighter-rouge">data</code> will be the object containing the user information from the API</li> 
       <li><code class="highlighter-rouge">element</code> will be the variable of the HTML element we want to update</li> 
       <li><code class="highlighter-rouge">userProperty</code> will be a string representing the property on the user object</li> 
      </ul> 
      <p>Then we’re setting the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML"><code class="highlighter-rouge">innerHTML</code></a> value of the element passed in as an argument to the value of the <code class="highlighter-rouge">userProperty</code> argument on the <code class="highlighter-rouge">data</code> object. We have to use <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors#Bracket_notation">bracket notation</a> because we are passing in a string as the property name. It’s not possible to use dot notation with a string as the property name.</p> 
      <p>Next we’ll create the AJAX function to query the API and return the user information. This will be very similar to the AJAX function within the click controller.</p> 
      <p><em>userController.client.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
   <span class="p">...</span>

   <span class="kd">function</span> <span class="nx">updateHtmlElement</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">userProperty</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

   <span class="nx">ajaxFunctions</span><span class="p">.</span><span class="nx">ready</span><span class="p">(</span><span class="nx">ajaxFunctions</span><span class="p">.</span><span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>

   <span class="p">})</span>
<span class="p">})();</span>
</code></pre> 
      </div> 
      <p>This should look familiar so far. The only difference is that rather than passing a named callback function, we’re passing in an anonymous function (<code class="highlighter-rouge">function (data) {...}</code>). We’re doing this so that we can make multiple changes to the DOM with this one request since it contains all the information we need.</p> 
      <p>We’ll start by parsing the AJAX data and storing the object in a variable that we can pass into subsequent functions. We’ll then update the value of the <code class="highlighter-rouge">displayName</code> elements, and then move to making conditional statements for our other HTML elements.</p> 
      <p>These are the elements that may or may not exist depending on the page. We’ll create <code class="highlighter-rouge">if</code> blocks that will test if the variable is equal to <code class="highlighter-rouge">null</code>. If it’s not, then we’ll update the HTML element. If the variable is equal to <code class="highlighter-rouge">null</code>, then no action will be taken.</p> 
      <p><em>userController.client.js</em>:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="highlight"><code><span class="s1">'use strict'</span><span class="p">;</span>

<span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
   <span class="p">...</span>

   <span class="kd">function</span> <span class="nx">updateHtmlElement</span> <span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">userProperty</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

   <span class="nx">ajaxFunctions</span><span class="p">.</span><span class="nx">ready</span><span class="p">(</span><span class="nx">ajaxFunctions</span><span class="p">.</span><span class="nx">ajaxRequest</span><span class="p">(</span><span class="s1">'GET'</span><span class="p">,</span> <span class="nx">apiUrl</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">userObject</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>

      <span class="nx">updateHtmlElement</span><span class="p">(</span><span class="nx">userObject</span><span class="p">,</span> <span class="nx">displayName</span><span class="p">,</span> <span class="s1">'displayName'</span><span class="p">);</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">profileId</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">updateHtmlElement</span><span class="p">(</span><span class="nx">userObject</span><span class="p">,</span> <span class="nx">profileId</span><span class="p">,</span> <span class="s1">'id'</span><span class="p">);</span>   
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">profileUsername</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">updateHtmlElement</span><span class="p">(</span><span class="nx">userObject</span><span class="p">,</span> <span class="nx">profileUsername</span><span class="p">,</span> <span class="s1">'username'</span><span class="p">);</span>   
      <span class="p">}</span>

      <span class="k">if</span> <span class="p">(</span><span class="nx">profileRepos</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
         <span class="nx">updateHtmlElement</span><span class="p">(</span><span class="nx">userObject</span><span class="p">,</span> <span class="nx">profileRepos</span><span class="p">,</span> <span class="s1">'publicRepos'</span><span class="p">);</span>   
      <span class="p">}</span>
   <span class="p">}))</span>
<span class="p">})();</span>
</code></pre> 
      </div> 
      <p>And that’s it for user controller. All we have left to do is make it pretty!</p> 
      <h2 id="make-it-pretty">Make It Pretty</h2> 
      <p>As in the previous tutorial, I’m simply going to provide the CSS file in its entirety. If you have specific questions about why something within the file was done in a particular way, feel free to reach out to me!</p> 
      <p><em>public/css/main.css</em>:</p> 
      <div class="language-css highlighter-rouge">
       <pre class="highlight"><code><span class="c">/****** Main Styling ******/</span>

<span class="nt">body</span> <span class="p">{</span>
	<span class="nl">font-family</span><span class="p">:</span> <span class="s2">'Roboto'</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span>
	<span class="nl">font-size</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">header</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#00BCD4</span><span class="p">;</span>
	<span class="nl">height</span><span class="p">:</span> <span class="m">56px</span><span class="p">;</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">14px</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">p</span> <span class="p">{</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">8px</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.container</span> <span class="nt">p</span> <span class="p">{</span>
	<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/****** Header Styling ******/</span>

<span class="nt">header</span> <span class="nt">p</span> <span class="p">{</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">16px</span> <span class="m">0</span> <span class="m">5px</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.menu</span> <span class="p">{</span>
	<span class="nl">text-decoration</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">6px</span><span class="p">;</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#727272</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.menu</span><span class="nd">:visited</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#727272</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.menu</span><span class="nd">:hover</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#FFA000</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.menu</span><span class="nd">:active</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#FF630D</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">header</span> <span class="nt">a</span> <span class="o">~</span> <span class="nt">p</span> <span class="p">{</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">display</span><span class="p">:</span> <span class="nb">inline</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#ECEFF1</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#display-name</span> <span class="p">{</span>
	<span class="nl">font-weight</span><span class="p">:</span> <span class="m">400</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/****** Login Styling ******/</span>

<span class="nc">.login</span> <span class="p">{</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">86px</span> <span class="nb">auto</span> <span class="m">0</span> <span class="nb">auto</span><span class="p">;</span>
	<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#login-btn</span> <span class="p">{</span>
	<span class="nl">width</span><span class="p">:</span> <span class="m">225px</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">7px</span> <span class="m">5px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.btn</span> <span class="nt">p</span> <span class="p">{</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">8px</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.btn</span> <span class="o">&gt;</span> <span class="nt">img</span> <span class="p">{</span>
	<span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
	<span class="nl">margin-left</span><span class="p">:</span> <span class="m">10px</span>
<span class="p">}</span>

<span class="c">/****** Logo Div Styling ******/</span>

<span class="nt">img</span> <span class="p">{</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="nb">auto</span><span class="p">;</span>
	<span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.clementine-text</span> <span class="p">{</span> <span class="c">/* Styling for the Clementine.js text */</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">-25px</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">font-weight</span><span class="p">:</span> <span class="m">500</span><span class="p">;</span>
	<span class="nl">font-size</span><span class="p">:</span> <span class="m">60px</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#FFA000</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/****** Click Styling ******/</span>

<span class="nc">.btn-container</span> <span class="p">{</span>	<span class="c">/* Styling for the div that contains the buttons */</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">-10px</span> <span class="nb">auto</span> <span class="m">0</span> <span class="nb">auto</span><span class="p">;</span>
	<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.btn</span> <span class="p">{</span>	<span class="c">/* Styling for buttons */</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="m">8px</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
	<span class="nl">background-color</span><span class="p">:</span> <span class="m">#00BCD4</span><span class="p">;</span>
	<span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span>
	<span class="nl">border</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
	<span class="nl">font-size</span><span class="p">:</span> <span class="m">14px</span><span class="p">;</span>
	<span class="nl">border-radius</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
	<span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span> <span class="m">5px</span><span class="p">;</span>
	<span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
	<span class="nl">font-weight</span><span class="p">:</span> <span class="m">500</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.btn</span><span class="nd">:focus</span> <span class="p">{</span>	<span class="c">/* Remove outline when hovering over button */</span>
	<span class="nl">outline</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.btn</span><span class="nd">:active</span> <span class="p">{</span>	<span class="c">/* Scale the button down by 10% when clicking on button */</span>
	<span class="nl">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0.9</span><span class="p">,</span> <span class="m">0.9</span><span class="p">);</span>
	<span class="nl">-webkit-transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0.9</span><span class="p">,</span> <span class="m">0.9</span><span class="p">);</span>
	<span class="nl">-moz-transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="m">0.9</span><span class="p">,</span> <span class="m">0.9</span><span class="p">);</span>
<span class="p">}</span>

<span class="nc">.btn-delete</span> <span class="p">{</span>	<span class="c">/* Styling for delete button */</span>
	<span class="nl">background-color</span><span class="p">:</span> <span class="m">#ECEFF1</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#212121</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#click-nbr</span> <span class="p">{</span>
	<span class="nl">font-weight</span><span class="p">:</span> <span class="m">400</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/****** Profile Styling ******/</span>

<span class="nc">.github-profile</span> <span class="p">{</span>
	<span class="nl">width</span><span class="p">:</span> <span class="m">350px</span><span class="p">;</span>
	<span class="nl">height</span><span class="p">:</span> <span class="m">200px</span><span class="p">;</span>
	<span class="nl">border-radius</span><span class="p">:</span> <span class="m">3px</span><span class="p">;</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">86px</span> <span class="nb">auto</span> <span class="m">0</span> <span class="nb">auto</span><span class="p">;</span>
	<span class="nl">background-color</span><span class="p">:</span> <span class="m">#EEE</span><span class="p">;</span>
	<span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#000</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.github-profile</span> <span class="nt">p</span><span class="nd">:first-child</span> <span class="p">{</span>
	<span class="nl">padding-top</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.github-profile</span> <span class="nt">p</span><span class="nd">:nth-child</span><span class="o">(</span><span class="nt">5</span><span class="o">)</span> <span class="p">{</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">16px</span>
<span class="p">}</span>

<span class="nc">.github-profile</span> <span class="nt">p</span> <span class="p">{</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">0</span> <span class="m">16px</span><span class="p">;</span>
	<span class="nl">text-align</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.profile-value</span> <span class="p">{</span>
	<span class="nl">font-weight</span><span class="p">:</span> <span class="m">400</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">span</span> <span class="p">{</span>
	<span class="nl">font-weight</span><span class="p">:</span> <span class="m">500</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.github-profile</span> <span class="o">&gt;</span> <span class="nt">img</span> <span class="p">{</span>
	<span class="nl">padding-top</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
	<span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.github-profile</span> <span class="nc">.menu</span><span class="nd">:hover</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#FFA000</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.github-profile</span> <span class="nc">.menu</span><span class="nd">:active</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#FF630D</span><span class="p">;</span>
<span class="p">}</span>

<span class="nf">#menu-divide</span> <span class="p">{</span>
	<span class="nl">color</span><span class="p">:</span> <span class="m">#FFFFFF</span><span class="p">;</span>
	<span class="nl">display</span><span class="p">:</span> <span class="nb">inline</span><span class="p">;</span>
	<span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre> 
      </div> 
      <p>You can now re-run the app. It should look much more organized! Here’s what each screen of our application should look like:</p> 
      <p><em>/login</em>:</p> 
      <p><img src="/img/passporttut04.png" alt="Login Screenshot"></p> 
      <p><em>/index</em>:</p> 
      <p><img src="/img/passporttut05.png" alt="Index Screenshot"></p> 
      <p><em>/profile</em>:</p> 
      <p><img src="/img/passporttut06.png" alt="Profile Screenshot"></p> 
      <h2 id="conclusion">Conclusion</h2> 
      <p>And that’s it! Congratulations, you’ve just integrated authentication into your application using Passport! You definitely deserve a pat on the back. If you run into any issues or have any questions, feel free to <a href="https://twitter.com/johnstonbl01">reach out to me on Twitter</a>. The source code for this application can be <a href="https://github.com/johnstonbl01/clementinejs-fcc">found on GitHub</a>.</p> 
      <p>Happy coding!</p> 
     </div> 
     <div class="col-md-3"> 
      <div id="toc"></div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div class="container pre-footer"> 
   <footer> 
    <a href="https://github.com/johnstonbl01/clementinejs" target="_blank"><img src="/img/gh-mark-32px.png"></a> 
    <a href="https://twitter.com/johnstonbl01" target="_blank"><img src="/img/TwitterLogo-32px.png"></a> 
    <p>Copyright Blake Johnston 2015. MIT License.</p> 
   </footer> 
  </div> 
  <script src="/js/vendor/jquery-1.11.3.min.js"></script> 
  <script src="/js/vendor/jquery-ui.min.js"></script> 
  <script src="/js/vendor/jquery.tocify.min.js"></script> 
  <script src="/js/vendor/bootstrap.min.js"></script> 
  <script src="/js/toc.js"></script>  
 </body>
</html>