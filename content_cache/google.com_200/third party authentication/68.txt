<!doctype html>
<html>
 <head> 
  <title>HTTP API - Wrappers - SoundCloud Developers</title> 
  <script src="/assets/application-d9a60bae78d5a7f9f459a2f3852c8107.js" type="text/javascript"></script> 
  <link href="https://style.sndcdn.com/css/interstate-0ab59479718c8235122cad6b16a66953d725c43a.css" media="screen" rel="stylesheet" type="text/css"> 
  <link href="https://style.sndcdn.com/css/sc-2a570b50658785a42b5e465d6f88aee4b1423a58.css" media="screen" rel="stylesheet" type="text/css"> 
  <link href="/assets/application-93c7b42aea16b74c4b10ce33e93f99f1.css" media="screen" rel="stylesheet" type="text/css"> 
 </head> 
 <body class="docs"> 
  <div class="sc-header"> 
   <nav> 
    <a href="http://soundcloud.com/" class="sc-logo" title="Go to SoundCloud.com">SoundCloud</a> 
    <ul> 
     <li><a href="/" class="current">Developers</a></li> 
     <li><a href="http://blog.soundcloud.com">Blog</a></li> 
     <li><a href="http://soundcloud.tumblr.com/">Tumblr</a></li> 
     <li><a href="https://soundcloud.com/jobs">Jobs</a></li> 
    </ul> 
   </nav> 
   <hgroup> 
    <h1>SoundCloud for Developers</h1> 
    <h2>Discover, connect and build</h2> 
   </hgroup> 
  </div> 
  <div class="sc-header-wipeout"> 
   <div class="two-columns"> 
    <aside class="menu">
     <div class="main-menu"> 
      <ul> 
       <li class="head"> <a href="/">Developers</a> </li> 
       <li class="head"> <a href="http://soundcloud.com/you/apps" target="_blank">Your Apps</a> </li> 
       <li class="head"> <a href="http://soundcloud.com/you/apps/new" target="_blank"><span style="text-decoration: line-through"> Register a new app </span> <span> (Currently unavailable) </span> </a></li> 
       <li class="head"> <a href="/docs/api/guide">HTTP API Guide</a> </li> 
       <li class="head"> <a href="/docs/api/reference">HTTP API Reference</a> </li> 
       <li class="active head"> <a href="/docs/api/sdks">HTTP API Wrappers</a> </li>
       <li class="sub"> <a href="#javascript">JavaScript SDK</a> </li> 
       <li class="sub"> <a href="https://github.com/soundcloud/soundcloud-ruby" target="_blank">Ruby</a> </li> 
       <li class="sub"> <a href="https://github.com/soundcloud/soundcloud-python" target="_blank">Python</a> </li>  
       <li class="head"> <a href="/docs/api/html5-widget">Widget API</a> </li> 
       <li class="head"> <a href="/docs/api/rate-limits">Rate Limits</a> </li> 
       <li class="head"> <a href="/support">Support</a> </li> 
       <li class="head"> <a href="/blog">Backstage Blog</a> </li> 
       <li class="head"> <a href="/docs/api/buttons-logos">Buttons &amp; Logos</a> </li> 
       <li class="head"> <a href="/docs/api/terms-of-use">Terms of Use</a> </li> 
      </ul> 
     </div> 
    </aside> 
    <section id="content"> 
     <h1>HTTP API Wrappers</h1> 
     <p> The SDKs will make it easier to access the SoundCloud API on your framework of choice. We officially provide and support Ruby, Python and JavaScript. All other SDKs are supported by third-party developers. </p> 
     <p> We welcome contributions to the open source projects so imagine how happy we'd be if you submit an SDK of your own for any additional language. </p> 
     <h2 id="javascript">JavaScript SDK</h2> 
     <section> 
      <p>The JavaScript SDK lets you easily integrate SoundCloud into your website or webapp.</p> 
      <div class="note"> 
       <p> <strong> In this section: </strong> </p>
       <ul> 
        <li> <a href="#basic">Basic Usage</a> </li> 
        <li> <a href="#authentication">Authentication</a> </li> 
        <li> <a href="#http">HTTP API</a> </li> 
        <li> <a href="#streaming">Streaming</a> </li> 
        <li> <a href="#recording">Recording</a> </li> 
        <li> <a href="#uploading">Uploading</a> </li> 
        <li> <a href="#embedding">Embedding</a> </li> 
        <li> <a href="#examples">Examples</a> </li> 
        <li> <a href="#promises">Promises</a> </li> 
        <li> <a href="#documentation">API Documentation</a> </li> 
        <li> <a href="#player">Player (methods &amp; events)</a> </li> 
       </ul> 
       <p></p> 
      </div> 
      <h3 id="basic">Basic Use</h3> 
      <p>To start using the SDK just add this script to your HTML and initialize the client with your own <code>client_id</code> and optionally your <code>redirect_uri</code> in case you want to use authentication:</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">&lt;script src="https://connect.soundcloud.com/sdk/sdk-3.2.2.js"&gt;&lt;/script&gt;
&lt;script&gt;
  SC.initialize({
    client_id: 'YOUR_CLIENT_ID',
    redirect_uri: 'http://example.com/callback'
  });
&lt;/script&gt;</code></pre> 
      </div> 
      <p>You can also install the SDK via <a href="https://www.npmjs.com/package/soundcloud" target="_blank">NPM</a> now: <code>npm install soundcloud</code>.</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">var SC = require('soundcloud');

SC.initialize({
  client_id: 'YOUR_CLIENT_ID',
  redirect_uri: 'http://example.com/callback'
});</code></pre> 
      </div> 
      <p>Once that's done you are all set and ready to use the SoundCloud API. For example getting a user's latest track:</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">SC.get('/user/183/tracks').then(function(tracks){
  alert('Latest track: ' + tracks[0].title);
});</code></pre> 
      </div> 
      <p>The JavaScript SDK is open source and can be found <a href="https://github.com/soundcloud/soundcloud-javascript">on Github</a>. If you are looking for example applications, have a look at <a href="#examples">the examples on this page</a>.</p> 
      <h3 id="authentication">Authentication</h3> 
      <p>To use the authentication you have to host a <code>callback.html</code> file on your server and set it as the <code>redirect_uri</code> in your <a href="http://soundcloud.com/you/apps">app settings</a> and when initializing the SDK. This <code>callback.html</code> file needs to contain just a few lines:</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt;
    &lt;title&gt;Connect with SoundCloud&lt;/title&gt;
  &lt;/head&gt;
  &lt;body onload="window.setTimeout(window.opener.SC.connectCallback, 1)"&gt;
    &lt;b style="text-align: center;"&gt;This popup should automatically close in a few seconds&lt;/b&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre> 
      </div> 
      <p>You initiate the connect flow by calling <code>SC.connect()</code>. Once your users are authenticated and authorized, your app is allowed to use the HTTP methods <a href="#post">SC.post</a>, <a href="#put">SC.put</a> and <a href="#delete">SC.delete</a> to create comments, liking a track or updating user profiles. The following example shows how to follow a user, after connecting the current user:</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">SC.initialize({
  client_id: 'YOUR_CLIENT_ID',
  redirect_uri: 'http://example.com/callback'
});

SC.connect().then(function(){
  return SC.put('/me/followings/183');
}).then(function(user){
  alert('You are now following ' + user.username);
}).catch(function(error){
  alert('Error: ' + error.message);
});</code></pre> 
      </div> 
      <p>Relevant methods: <a href="#connect">SC.connect</a>, <a href="#post">SC.post</a>, <a href="#put">SC.put</a>, <a href="#delete">SC.delete</a></p> 
      <h3 id="http">HTTP API</h3> 
      <p>The SDK provides easy access to all HTTP endpoints through the <a href="#get">SC.get</a>, <a href="#post">SC.post</a>, <a href="#put">SC.put</a> and <a href="#delete">SC.delete</a> methods.</p> 
      <p>For a list of available endpoints, check the <a href="/docs/api/reference">HTTP API Reference</a>.</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">SC.put('/me', {
  user: { description: 'I am using the SoundCloud API!' }
}).then(function(){
  return SC.get('/me');
}).then(function(me){
  console.log(me.description);
}).catch(function(error){
  alert('Error: ' + error.message);
});</code></pre> 
      </div> 
      <h3 id="streaming">Streaming</h3> 
      <p>Streaming sounds from the SDK is powered by the same player that is also used on <a href="https://soundcloud.com">soundcloud.com</a> to ensure the best playback experience.</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">SC.stream('/tracks/293').then(function(player){
  player.play();
});</code></pre> 
      </div> 
      <p>The player has all basic methods to control the playback flow like <code>play()</code>, <code>seek()</code>, <code>pause()</code>, <code>setVolume()</code>, etc.</p> 
      <p>Relevant methods: <a href="#stream">SC.stream</a></p> 
      <h3 id="recording">Recording</h3> 
      <p>The SDK uses <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia">getUserMedia</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker">Web Workers</a> and the <a href="http://webaudio.github.io/web-audio-api/">Web Audio API</a> to record from a user's computer, so make sure to check if the user's browser supports all of it (<a href="http://caniuse.com/#feat=stream">1</a>, <a href="http://caniuse.com/#feat=webworkers">2</a>, <a href="http://caniuse.com/#feat=audio-api">3</a>) before you start recording. This example will record 5 seconds and play it back right away:</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">var recorder = new SC.Recorder();
recorder.start();

setTimeout(function(){
  recorder.stop();
  recorder.play();
}, 5000);</code></pre> 
      </div> 
      <p>In addition to recording from the user's computer, the SDK also supports recording from an arbitrary AudioNode by passing it to the Recorder's constructor. Check out the <a href="#record">documentation</a> and the <a href="#examples">examples</a> for more information.</p> 
      <p>Relevant methods: <a href="#record">SC.Recorder</a></p> 
      <h3 id="uploading">Uploading</h3> 
      <p>You can upload recordings and files using the SDK's <code>SC.upload</code> method. This method requires the user's browser to support <a href="https://developer.mozilla.org/en/docs/Web/API/FormData">FormData</a> (supported in all modern browsers and IE10+, <a href="http://caniuse.com/#feat=xhr2">1</a>).</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">SC.upload({
  file: theBlob, // a Blob of your WAV, MP3...
  title: 'This is my sound'
});</code></pre> 
      </div> 
      <p>Uploads can take a while and it makes sense to inform the user about the progress. For this reason, <code>SC.upload</code> returns the original request as well so that you can calculate the progress yourself.</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">var upload = SC.upload({
  file: aBigBlob, // a Blob of your WAV, MP3...
  title: 'This upload took quite some while'
});

upload.request.addEventListener('progress', function(e){
  console.log('progress: ', (e.loaded / e.total) * 100, '%');
});

upload.then(function(track){
  alert('Upload is done! Check your sound at ' + track.permalink_url);
});</code></pre> 
      </div> 
      <p>Relevant methods: <a href="#upload">SC.upload</a></p> 
      <h3 id="embedding">Embedding</h3> 
      <p>The <code>SC.oEmbed</code> function is a wrapper for the SoundCloud <a href="/docs/oembed">oEmbed endpoint</a>.</p> 
      <p>It takes the URL you want to embed as an argument, and an optional options object that can contain an element that should be replaced by the embed code. All of the <code>options</code> object's properties will be passed as parameters to the oEmbed endpoint. For example <code>maxwidth</code>, <code>maxheight</code>, or <code>auto_play</code>. The options are described in detail in the <a href="/docs/api/reference#oembed">oEmbed documentation</a>.</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">SC.oEmbed('http://soundcloud.com/forss/flickermood', {
  auto_play: true
}).then(function(embed){
  console.log('oEmbed response: ', embed);
});</code></pre> 
      </div> 
      <p>Or:</p> 
      <div class="code-example"> 
       <pre><code class="standalone" data-language="javascript">&lt;div id="putTheWidgetHere"&gt;&lt;/div&gt;
&lt;script type="text/javascript"&gt;
  SC.oEmbed('http://soundcloud.com/forss/sets/soulhack', {
    element: document.getElementById('putTheWidgetHere')
  });
&lt;/script&gt;</code></pre> 
      </div> 
      <p>Relevant methods: <a href="#oEmbed">SC.oEmbed</a></p> 
      <h3 id="examples">Examples</h3> 
      <p>If you want to check out more SDK usage examples, head over to the <a href="/docs/api/guide">HTTP API Guide</a>. It shows how to use API methods in all available SDKs.</p> 
      <p>An example of an application that is using a combination of several SDK methods can be found <a href="https://github.com/soundcloud/soundcloud-javascript/blob/master/examples/recording.html">on Github</a>. It records a user's microphone and uploads it together with an artwork that is generated from the user's webcam. (no Flash required!)</p> 
      <h3 id="promises">Promises</h3> 
      <p>The SDK uses <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promises</a> for most of its methods. They provide a way to easily compose API calls and offer a sane way to handle the various errors that can occur.</p> 
      <p>Promises can be chained by using their <code>then()</code> method and errors can be handled in a <code>catch()</code> handler. If you are new to Promises, check out this introductory blog artice on HTML5 rocks: <a href="http://www.html5rocks.com/en/tutorials/es6/promises/">html5rocks.com/en/tutorials/es6/promises</a>.</p> 
      <p>In order to conform with the ES6 standard, the SDK uses <a href="https://github.com/jakearchibald/es6-promise">es6-promise</a> which shims the <code>Promise</code> object on systems where it is not available. We also expose the library via <a href="#scpromise">SC.Promise</a>, so that you can use methods like <code>Promise.all</code> or <code>Promise.race</code> even if your user's browser is not supporting Promises yet.</p> 
      <p>Relevant methods: <a href="#scpromise">SC.Promise</a></p> 
      <h2 id="documentation">API Documentation</h2> 
      <h3 id="initialize">SC.initialize(options)</h3> 
      <p>Initializes the SDK.</p> 
      <p> <strong>Parameters:</strong> </p> 
      <ul> 
       <li> <code>options (Object)</code>: 
        <ul> 
         <li><code>client_id</code>: You application's client id</li> 
         <li><code>redirect_uri</code> (optional): Only needed if you want to authenticate users</li> 
         <li><code>oauth_token</code> (optional): If you want to reuse an access token</li> 
        </ul> </li> 
      </ul> 
      <h3 id="connect">SC.connect(options)</h3> 
      <p>Initiate the OAuth2 connect flow.</p> 
      <p> <strong>Parameters:</strong> </p> 
      <ul> 
       <li> <code>options (Object, optional)</code>: 
        <ul> 
         <li><code>client_id</code>: override the before set client id.</li> 
         <li><code>redirect_uri</code>: the redirect URI as defined in your app settings.</li> 
         <li><code>scope</code>: additional OAuth2 scopes (default: "*")</li> 
        </ul> </li> 
      </ul> 
      <p> <strong>Returns:</strong> A promise that will resolve with a session data object </p> 
      <h3 id="get">SC.get(path, [params])</h3> 
      <p>Execute a GET request.</p> 
      <p> <strong>Parameters:</strong> </p> 
      <ul> 
       <li><code>path (String)</code>: the path to the requested resource e.g. '/users/183'</li> 
       <li><code>params (Object, optional)</code>: an object of additional parameters to pass in the request.</li> 
      </ul> 
      <p> <strong>Returns:</strong> A promise that will resolve with the requested resource </p> 
      <h3 id="post">SC.post(path, [params])</h3> 
      <p>Execute a POST request.</p> 
      <p> <strong>Parameters:</strong> </p> 
      <ul> 
       <li><code>path (String)</code>: the path to the requested resource e.g. '/me/followings'</li> 
       <li><code>params (Object / FormData, optional)</code>: an object of additional parameters to pass in the request body.</li> 
      </ul> 
      <p> <strong>Returns:</strong> A promise that will resolve with the requested resource </p> 
      <h3 id="put">SC.put(path, [params])</h3> 
      <p>Execute a PUT request.</p> 
      <p> <strong>Parameters:</strong> </p> 
      <ul> 
       <li><code>path (String)</code>: the path to the requested resource e.g. '/me'</li> 
       <li><code>params (Object / FormData, optional)</code>: an object of additional parameters to pass in the request body.</li> 
      </ul> 
      <p> <strong>Returns:</strong> A promise that will resolve with the requested resource </p> 
      <h3 id="delete">SC.delete(path)</h3> 
      <p>Execute a DELETE request.</p> 
      <p> <strong>Parameters:</strong> </p> 
      <ul> 
       <li><code>path (String)</code>: the path to the requested resource</li> 
      </ul> 
      <p> <strong>Returns:</strong> A promise that will resolve when the resource has been deleted </p> 
      <h3 id="upload">SC.upload(options)</h3> 
      <p>Uploads a file or a recording to SoundCloud</p> 
      <p> <strong>Parameters:</strong> </p> 
      <ul> 
       <li> <code>options (Object)</code>: 
        <ul> 
         <li><code>file (Blob)</code>: a <a href="https://developer.mozilla.org/en/docs/Web/API/Blob">Blob</a> of the file or the recording (see <a href="#recordgetwav">recorder.getWAV()</a>).</li> 
         <li><code>title (String)</code>: a title for the recording.</li> 
         <li><code>progress (Function)</code>: a progress callback.</li> 
         <li>It also accepts all other params for upload requests, such as <code>artwork_data</code> or <code>sharing</code> (see <a href="/docs/api/reference">HTTP API Reference</a> for a full list).</li> 
        </ul> </li> 
      </ul> 
      <p> <strong>Returns:</strong> A promise that will resolve when the resource has been uploaded. It also contains a reference to the original request (see <a href="#uploading">Uploading</a>) </p> 
      <h3 id="resolve">SC.resolve(url)</h3> 
      <p>Resolves a SoundCloud URL to a JSON representation of the requested resource</p> 
      <p> <strong>Parameters:</strong> </p>
      <ul> 
       <li><code>url (String)</code>: a URL to a track, playlist or user on SoundCloud.</li> 
      </ul> 
      <p></p> 
      <p> <strong>Returns:</strong> A promise that will resolve with a JSON object </p> 
      <h3 id="oEmbed">SC.oEmbed(url, [params])</h3> 
      <p>Will lookup the embed code for the passed URL (track, set or user) using <a href="/docs/api/reference#oembed">oEmbed</a></p> 
      <p> <strong>Parameters:</strong> </p>
      <ul> 
       <li><code>url (String)</code>: a URL to a track, set or user on SoundCloud.</li> 
       <li><code>params (Object, optional)</code>: additional parameters for oEmbed. See <a href="/docs/api/reference#oembed">oEmbed docs</a>. In addition to that, it accepts an <code>element</code> property that will replace the HTML element with the widget.</li> 
      </ul> 
      <p></p> 
      <p> <strong>Returns:</strong> A promise that will resolve with the oEmbed info for the resource </p> 
      <h3 id="stream">SC.stream(trackPath, [secretToken])</h3> 
      <p>Creates a player for this stream</p> 
      <p> <strong>Parameters:</strong> </p> 
      <ul> 
       <li><code>trackPath (String)</code>: the path of the track to be streamed e.g. /tracks/293</li> 
       <li><code>secretToken (String, optional)</code>: a secret token for the track</li> 
      </ul> 
      <p> <strong>Returns: A promise that will resolve with a player for the track</strong> </p> 
      <h3 id="record">SC.Recorder(options)</h3> 
      <p>The constructor function which returns an instance of the Web Audio Recorder (has to be called with <code>new</code>)</p> 
      <p> <strong>Parameters:</strong> </p> 
      <ul> 
       <li> <code>options (Object, optional)</code>: 
        <ul> 
         <li><code>context</code>: You can pass an AudioContext if you want to reuse it</li> 
         <li><code>source</code>: Pass a source if you want to record from an AudioNode</li> 
        </ul> </li> 
      </ul> 
      <h3 id="recordstart">recorder.start()</h3> 
      <p>Starts recording from the user's computer or the <code>source</code> that was passed into the constructor</p> 
      <p>Requires the <a href="http://caniuse.com/#feat=audio-api">Web Audio API</a>, <a href="http://caniuse.com/#feat=webworkers">Web Workers</a> and <a href="http://caniuse.com/#feat=stream">getUserMedia</a> to be available in the user's browser</p> 
      <h3 id="recordstop">recorder.stop()</h3> 
      <p>Stops the current recording</p> 
      <h3 id="recordplay">recorder.play()</h3> 
      <p>Plays back what was just recorded</p> 
      <p> <strong>Returns:</strong> The <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioNode">AudioNode</a> that is used to play the sound </p> 
      <h3 id="recordgetwav">recorder.getWAV()</h3> 
      <p> <strong>Returns:</strong> A promise that resolves with a WAV Blob of the current recording </p> 
      <h3 id="recordgetbuffer">recorder.getBuffer()</h3> 
      <p> <strong>Returns:</strong> A promise that resolves with an <a href="https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer">AudioBuffer</a> of the current recording </p> 
      <h3 id="recordsaveas">recorder.saveAs(filename)</h3> 
      <p>Downloads the recorded WAV to the user's computer</p> 
      <p> <strong>Parameters:</strong> </p> 
      <ul> 
       <li><code>filename (String)</code>: The desired name of the file</li> 
      </ul> 
      <h3 id="recorddelete">recorder.delete()</h3> 
      <p>Stops and deletes the recording</p> 
      <h2 id="scpromise">SC.Promise</h2> 
      <p>The promise prototype that is used in the SDK internally (<a href="https://github.com/jakearchibald/es6-promise">es6-promise</a>). Use it to create your own promises or to use methods like <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all">Promise.all</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race">Promise.race</a>.</p> 
      <h2 id="player">Player (methods &amp; events)</h2> 
      <h3 id="playermethods">Methods</h3> 
      <p>You can use the methods below to control the player that is returned from <a href="#stream">SC.stream</a></p> 
      <ul> 
       <li><code>play()</code>: Starts to play the sound</li> 
       <li><code>pause()</code>: Pauses the player</li> 
       <li><code>seek(time)</code>: Seeks to the position in the song (in milliseconds)</li> 
       <li><code>currentTime()</code>: Returns the current position (in milliseconds)</li> 
       <li><code>setVolume(volume)</code>: Sets the volume (from 0 to 1)</li> 
       <li><code>getVolume()</code>: Returns the current volume</li> 
       <li><code>on(event, handler)</code>: Subscribes the handler to the given event</li> 
      </ul> 
      <h3 id="playerevents">Events</h3> 
      <p>You can subscribe to the events below by using the player's <code>on(event, handler)</code> method.</p> 
      <ul> 
       <li><code>state-change</code>: when audio controller changes state (e.g. from pause to play)</li> 
       <li><code>play</code>: when <code>play</code> method is called</li> 
       <li><code>play-start</code>: before playback is actually triggered</li> 
       <li><code>play-resume</code>: when playback transits from any idle/loading/seeking state into playing state</li> 
       <li><code>pause</code>: when playback is paused</li> 
       <li><code>finish</code>: when sound is finished</li> 
       <li><code>seek</code>: when <code>seek</code> method is called</li> 
       <li><code>seeked</code>: when playback position is updated after calling <code>seek</code> method</li> 
       <li><code>geo_blocked</code>: when there's no available streams for a sound, as it is not allowed to be played in the user's territory.</li> 
       <li><code>buffering_start</code>: when buffering starts</li> 
       <li><code>buffering_end</code>: when buffering stops</li> 
       <li><code>audio_error</code>: when an error occurs</li> 
       <li><code>time</code>: when playback position is updated</li> 
       <li><code>no_streams</code>: when we failed fetching stream information</li> 
       <li><code>no_protocol</code>: when no supported protocol could be found</li> 
       <li><code>no_connection</code>: when we failed to connect to an endpoint due to missing transport or request timeout</li> 
      </ul> 
     </section> 
     <footer> 
      <ul> 
       <li><a href="http://status.soundcloud.com" data-tracking-action="Status" data-tracking-category="Footer" target="_blank">Status</a></li> 
       <li><a href="/docs/api/privacy" data-tracking-category="Footer">Privacy</a></li> 
       <li><a href="/docs/api/cookies" data-tracking-category="Footer">Cookies</a></li> 
       <li><a href="https://soundcloud.com/imprint" data-tracking-category="Footer" target="_blank">Imprint</a></li> 
      </ul> 
      <ul> 
       <li><a href="http://twitter.com/soundclouddev" class="twitter" data-tracking-action="@SoundCloudDev" data-tracking-category="Footer" target="_blank">@SoundCloudDev</a></li> 
      </ul> 
     </footer> 
    </section> 
   </div> 
  </div> 
  <noscript> 
   <img src="http://b.scorecardresearch.com/p?c1=2&amp;c2=16601931&amp;cv=2.0&amp;cj=1"> 
  </noscript>   
 </body>
</html>