<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"> 
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"> 
  <title>API Reference</title> 
  <style>
      .highlight table td { padding: 5px; }
.highlight table pre { margin: 0; }
.highlight, .highlight .w {
  color: #f8f8f2;
  background-color: #272822;
}
.highlight .err {
  color: #151515;
  background-color: #ac4142;
}
.highlight .c, .highlight .cd, .highlight .cm, .highlight .c1, .highlight .cs {
  color: #505050;
}
.highlight .cp {
  color: #f4bf75;
}
.highlight .nt {
  color: #f4bf75;
}
.highlight .o, .highlight .ow {
  color: #d0d0d0;
}
.highlight .p, .highlight .pi {
  color: #d0d0d0;
}
.highlight .gi {
  color: #90a959;
}
.highlight .gd {
  color: #ac4142;
}
.highlight .gh {
  color: #6a9fb5;
  background-color: #151515;
  font-weight: bold;
}
.highlight .k, .highlight .kn, .highlight .kp, .highlight .kr, .highlight .kv {
  color: #aa759f;
}
.highlight .kc {
  color: #d28445;
}
.highlight .kt {
  color: #d28445;
}
.highlight .kd {
  color: #d28445;
}
.highlight .s, .highlight .sb, .highlight .sc, .highlight .sd, .highlight .s2, .highlight .sh, .highlight .sx, .highlight .s1 {
  color: #90a959;
}
.highlight .sr {
  color: #75b5aa;
}
.highlight .si {
  color: #8f5536;
}
.highlight .se {
  color: #8f5536;
}
.highlight .nn {
  color: #f4bf75;
}
.highlight .nc {
  color: #f4bf75;
}
.highlight .no {
  color: #f4bf75;
}
.highlight .na {
  color: #6a9fb5;
}
.highlight .m, .highlight .mf, .highlight .mh, .highlight .mi, .highlight .il, .highlight .mo, .highlight .mb, .highlight .mx {
  color: #90a959;
}
.highlight .ss {
  color: #90a959;
}
    </style> 
  <link href="stylesheets/screen-980e132f.css" rel="stylesheet" media="screen"> 
  <link href="stylesheets/print-2ebed071.css" rel="stylesheet" media="print"> 
  <script src="javascripts/all-b7d7e117.js"></script> 
 </head> 
 <body class="index" data-languages="[&quot;Javascript&quot;]"> 
  <a href="#" id="nav-button"> <span> NAV <img src="images/navbar-cad8cdcb.png"> </span> </a> 
  <div class="tocify-wrapper"> 
   <a href="http://callstats.io/"> <img width="240px" src="images/logo-28d803fe.png"> </a> 
   <div class="lang-selector"> 
    <a href="#" data-language-name="Javascript">Javascript</a> 
   </div> 
   <div class="search"> 
    <input type="text" class="search" id="input-search" placeholder="Search"> 
   </div> 
   <ul class="search-results"></ul> 
   <div id="toc"> 
   </div> 
   <ul class="toc-footer"> 
    <li><a href="https://www.callstats.io/">Made by hand in Finland</a></li> 
   </ul> 
  </div> 
  <div class="page-wrapper"> 
   <div class="dark-box"></div> 
   <div class="content"> 
    <h1 id="introduction">Introduction</h1> 
    <p>Welcome to the <em>callstats.io</em> API! </p> 
    <p>The callstats.io’s Javascript client library enables performance monitoring features in browser-based WebRTC endpoints. The communication with callstats.io occurs over <em>Secure HTTP</em> (<code class="prettyprint">https://</code>) and <em>Secure WebSocket</em> (<code class="prettyprint">wss://</code>). The endpoint (the browser in this case) MUST support <a href="https://www.w3.org/TR/websockets/">WebSockets</a>. Additionally, the origin server MUST allow <em>Cross-Origin Resource Sharing</em> (<a href="http://enable-cors.org/server.html">CORS</a>) and MAY need to serve its own pages over HTTPS to avoid mixed content warnings.</p> 
    <h2 id="versioning">Versioning</h2> 
    <p><code class="prettyprint">callstats.js</code> uses <a href="http://semver.org">semantic versioning</a>. The latest version is in the changelog. However, programmatically the version can be fetched by invoking <code class="prettyprint">callstats.version</code>.</p> 
    <h1 id="api">API</h1> 
    <h2 id="callstats-initialize-with-app-secret">callstats.initialize() with app secret</h2> 
    <pre class="highlight javascript"><code><span class="nx">callstats</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">AppID</span><span class="p">,</span> <span class="nx">AppSecret</span><span class="p">,</span> <span class="nx">localUserID</span><span class="p">,</span> <span class="nx">csInitCallback</span><span class="p">,</span> <span class="nx">csStatsCallback</span><span class="p">,</span> <span class="nx">configParams</span><span class="p">);</span>
</code></pre> 
    <table>
     <thead> 
      <tr> 
       <th>Params</th> 
       <th>Argument</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">AppID</code></td> 
       <td>Required</td> 
       <td>String</td> 
       <td>Application ID is obtained from callstats.io.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">AppSecret</code></td> 
       <td>Required</td> 
       <td>String</td> 
       <td>Application secret is obtained from callstats.io.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">localUserID</code></td> 
       <td>Required</td> 
       <td>String (128 bytes) or Object</td> 
       <td>it is provided by the developer and MUST NOT be null or empty.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">csInitCallback</code></td> 
       <td>Optional</td> 
       <td>Callback</td> 
       <td>asynchronously reports failure or success of the protocol messages.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">csStatsCallback</code></td> 
       <td>Optional</td> 
       <td>Callback</td> 
       <td>asynchronously reports the conference statistics.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">configParams</code></td> 
       <td>Optional</td> 
       <td>JSON</td> 
       <td>it is the set of parameters to enable/disable certain features in the library.</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="json-for-userid-supported-since-v3-14">JSON for UserID (supported since v3.14)</h3> 
    <p>In some cases, customers want to provide the actual username in addition to the alias to callstats.io. Since callstats.js version 3.14, it accepts userID both as a String or an object. Section on <a href="#generating-userid-conferenceid-and-jwt">generating userID</a> provides more guidelines on choosing a <code class="prettyprint">localUserID</code>.</p> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">userId</span> <span class="o">=</span> <span class="p">{};</span>
<span class="nx">userId</span><span class="p">.</span><span class="nx">userName</span> <span class="o">=</span> <span class="s2">"Clark Kent"</span><span class="p">;</span>
<span class="nx">userId</span><span class="p">.</span><span class="nx">aliasName</span> <span class="o">=</span> <span class="s2">"superman"</span><span class="p">;</span>
</code></pre> 
    <table>
     <thead> 
      <tr> 
       <th>Keys</th> 
       <th>Required</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">userName</code></td> 
       <td>Yes</td> 
       <td>Strint of maximum lenth <strong>128 characters</strong>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">aliasName</code></td> 
       <td>Yes</td> 
       <td>String of maximum length <strong>128 characters</strong>.</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="json-for-configparams">JSON for configParams</h3> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">configParams</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">disableBeforeUnloadHandler</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="c1">// disables callstats.js's window.onbeforeunload parameter.</span>
  <span class="na">applicationVersion</span><span class="p">:</span> <span class="s2">"app_version"</span> <span class="c1">// Application version specified by the developer.</span>
<span class="p">};</span>
</code></pre> 
    <p>It provides developers a method to enable or disable certain features or functions within the <code class="prettyprint">callstats.js</code> library. It is a javascript object with the following OPTIONAL key-value pairs. They are:</p> 
    <table>
     <thead> 
      <tr> 
       <th>Keys</th> 
       <th>Required</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">disableBeforeUnloadHandler</code></td> 
       <td>No</td> 
       <td>by default the value is <code class="prettyprint">false</code>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">applicationVersion</code></td> 
       <td>No</td> 
       <td>String of maximum length <strong>30 characters</strong>.</td> 
      </tr> 
     </tbody>
    </table> 
    <aside class="error">
      Setting `disableBeforeUnloadHandler` to `true` disengages callstats.js’s `window.onbeforeunload` handler, and you will need to send the fabricTerminated event for each active PeerConnection. See more details on `fabricTerminated` [event](#step-5-optional-sendfabricevent) 
    </aside> 
    <h2 id="callstats-initialize-with-third-party-authentication">callstats.initialize() with third party authentication</h2> 
    <ul> 
     <li>Authenticates with the callstats.io backend to setup a trusted relationship with it.</li> 
    </ul> 
    <table>
     <thead> 
      <tr> 
       <th>Params</th> 
       <th>Argument</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">AppID</code></td> 
       <td>Required</td> 
       <td>String</td> 
       <td>Application ID is obtained from callstats.io.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">tokenGenerator</code></td> 
       <td>Required</td> 
       <td>callback</td> 
       <td>Callback to generate token.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">localUserID</code></td> 
       <td>Required</td> 
       <td>String (128 bytes) or Object</td> 
       <td>it is provided by the developer and MUST NOT be null or empty.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">csInitCallback</code></td> 
       <td>Optional</td> 
       <td>callback</td> 
       <td>asynchronously reports failure or success of the protocol messages.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">csStatsCallback</code></td> 
       <td>Optional</td> 
       <td>callback</td> 
       <td>asynchronously reports the conference statistics.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">configParams</code></td> 
       <td>Optional</td> 
       <td>JSON</td> 
       <td>it is the set of parameters to enable/disable certain features in the library.</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="callstats-addnewfabric">callstats.addNewFabric()</h2> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">fabricAttributes</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">remoteEndpointType</span><span class="p">:</span>   <span class="nx">callstats</span><span class="p">.</span><span class="nx">endpointType</span><span class="p">.</span><span class="nx">peer</span><span class="p">,</span>
  <span class="na">fabricTransmissionDirection</span><span class="p">:</span>  <span class="nx">callstats</span><span class="p">.</span><span class="nx">transmissionDirection</span><span class="p">.</span><span class="nx">sendrecv</span>
<span class="p">};</span>

 <span class="nx">callstats</span><span class="p">.</span><span class="nx">addNewFabric</span><span class="p">(</span><span class="nx">pcObject</span><span class="p">,</span> <span class="nx">remoteUserID</span><span class="p">,</span> <span class="nx">fabricUsage</span><span class="p">,</span> <span class="nx">conferenceID</span><span class="p">,</span> <span class="nx">fabricAttributes</span><span class="p">,</span> <span class="nx">pcCallback</span><span class="p">);</span>
</code></pre> 
    <ul> 
     <li>Indicates that the WebRTC application requests callstats.js to monitor the performance of the <em>PeerConnection</em> between the two endpoints (represented by the corresponding UserIDs).</li> 
    </ul> 
    <table>
     <thead> 
      <tr> 
       <th>Params</th> 
       <th>Argument</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">pcObject</code></td> 
       <td>Required</td> 
       <td>Object</td> 
       <td><em>PeerConnection</em> object.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">remoteUserID</code></td> 
       <td>Required</td> 
       <td>String (128 bytes) or Object</td> 
       <td>It is generated by the origin server.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">fabricUsage</code></td> 
       <td>Required</td> 
       <td>Enum</td> 
       <td>Valid values are discussed in a later <a href="#enumeration-of-fabricusage">section</a>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">conferenceID</code></td> 
       <td>Required</td> 
       <td>String (256 bytes)</td> 
       <td>It is generated by the origin server.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">fabricAttributes</code></td> 
       <td>Optional</td> 
       <td>Object</td> 
       <td>Contains two attributes <a href="#enumeration-of-endpointtype">section</a> and <a href="#enumeration-of-transmissiondirection">section</a>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">pcCallback</code></td> 
       <td>Optional</td> 
       <td>Callback</td> 
       <td>the callback asynchronously reports failure or success for pcObject.</td> 
      </tr> 
     </tbody>
    </table> 
    <aside class="error"> 
     <ul> 
      <li> fabricAttributes is optional and default value is peer and sendrecv</li> 
     </ul> 
    </aside> 
    <h2 id="callstats-reporterror">callstats.reportError()</h2> 
    <pre class="highlight javascript"><code><span class="nx">callstats</span><span class="p">.</span><span class="nx">reportError</span><span class="p">(</span><span class="nx">pcObject</span><span class="p">,</span> <span class="nx">conferenceID</span><span class="p">,</span> <span class="nx">callstats</span><span class="p">.</span><span class="nx">webRTCFunctions</span><span class="p">.</span><span class="nx">createOffer</span><span class="p">);</span>
</code></pre> 
    <ul> 
     <li>Notifies the callstats.io back-end about conference setup failure reason.</li> 
    </ul> 
    <table>
     <thead> 
      <tr> 
       <th>Params</th> 
       <th>Argument</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">pcObject</code></td> 
       <td>Required</td> 
       <td>Object</td> 
       <td><em>PeerConnection</em> object</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">conferenceID</code></td> 
       <td>Required</td> 
       <td>String (256 bytes)</td> 
       <td>It is generated by the origin server.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">wrtcFuncName</code></td> 
       <td>Required</td> 
       <td>Enum</td> 
       <td>Name of the <a href="#enumeration-of-wrtcfuncnames">WebRTC function</a> that failed.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">domError</code></td> 
       <td>Optional</td> 
       <td>Object</td> 
       <td><a href="https://developer.mozilla.org/en-US/docs/Web/API/DOMError">DOMError object</a></td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">localSDP</code></td> 
       <td>Optional</td> 
       <td>Object</td> 
       <td>Local SDP collected when errors occur.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">remoteSDP</code></td> 
       <td>Optional</td> 
       <td>Object</td> 
       <td>Remote SDP collected when errors occur.</td> 
      </tr> 
     </tbody>
    </table> 
    <aside class="error"> 
     <ul> 
      <li> pcObject MAY be set to NULL when passing in errors that occur when getUserMedia() is called.</li> 
      <li> localSDP MAY be set to NULL, in case you do not want SDPs to be collected. </li> 
      <li> remoteSDP MAY be set to NULL, in case you do not want SDPs to be collected. </li> 
     </ul> 
    </aside> 
    <h2 id="callstats-associatemstwithuserid">callstats.associateMstWithUserID()</h2> 
    <pre class="highlight javascript"><code><span class="c1">// Extracting SSRC from SDP</span>
<span class="kd">var</span> <span class="nx">validLine</span> <span class="o">=</span> <span class="nb">RegExp</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">test</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="sr">/^</span><span class="se">([</span><span class="sr">a-z</span><span class="se">])</span><span class="sr">=</span><span class="se">(</span><span class="sr">.*</span><span class="se">)</span><span class="sr">/</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">reg</span> <span class="o">=</span> <span class="sr">/^ssrc:</span><span class="se">(\d</span><span class="sr">*</span><span class="se">)</span><span class="sr"> </span><span class="se">([\w</span><span class="sr">_</span><span class="se">]</span><span class="sr">*</span><span class="se">)</span><span class="sr">:</span><span class="se">(</span><span class="sr">.*</span><span class="se">)</span><span class="sr">/</span><span class="p">;</span>

<span class="nx">pc</span><span class="p">.</span><span class="nx">remoteDescription</span><span class="p">.</span><span class="nx">sdp</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/</span><span class="se">(\r\n</span><span class="sr">|</span><span class="se">\r</span><span class="sr">|</span><span class="se">\n)</span><span class="sr">/</span><span class="p">).</span><span class="nx">filter</span><span class="p">(</span><span class="nx">validLine</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">l</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">type</span> <span class="o">=</span> <span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="kd">var</span> <span class="nx">content</span> <span class="o">=</span> <span class="nx">l</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">'a'</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">reg</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">content</span><span class="p">))</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">content</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">reg</span><span class="p">);</span>
            <span class="k">if</span><span class="p">((</span><span class="nx">$</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">ssrcs</span><span class="p">)</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
              <span class="nx">ssrcs</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">});</span>

    <span class="nx">ssrcs</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">ssrc</span><span class="p">)</span> <span class="p">{</span>
      <span class="nb">window</span><span class="p">.</span><span class="nx">callstats</span><span class="p">.</span><span class="nx">associateMstWithUserID</span><span class="p">(</span><span class="nx">pcObject</span><span class="p">,</span> <span class="nx">userID</span><span class="p">,</span> <span class="nx">conferenceID</span><span class="p">,</span> <span class="nx">ssrc</span><span class="p">,</span> <span class="nx">usageLabel</span><span class="p">,</span> <span class="nx">associatedVideoTag</span><span class="p">);</span>
    <span class="p">});</span>
</code></pre> 
    <ul> 
     <li>Maps the SSRC to the userID that generated it. This is useful when multiple <em>MediaStreamTracks</em> (MSTs) are sent or received in a single <em>PeerConnection</em>.</li> 
    </ul> 
    <table>
     <thead> 
      <tr> 
       <th>Params</th> 
       <th>Argument</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">pcObject</code></td> 
       <td>Required</td> 
       <td>Object</td> 
       <td><em>PeerConnection</em> object.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">userID</code></td> 
       <td>Required</td> 
       <td>String (128 bytes) or Object</td> 
       <td>It is generated by the origin server.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">conferenceID</code></td> 
       <td>Required</td> 
       <td>String (256 bytes)</td> 
       <td>It is generated by the origin server.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">SSRC</code></td> 
       <td>Required</td> 
       <td>Object</td> 
       <td>Synchronization Source Identifier, as defined in <a href="https://tools.ietf.org/html/rfc3550">RFC3550</a>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">usageLabel</code></td> 
       <td>Required</td> 
       <td>String (20 bytes)</td> 
       <td>it is generated by the origin server.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">associatedVideoTag</code></td> 
       <td>Optional</td> 
       <td>String</td> 
       <td>handler to the user’s video tag.</td> 
      </tr> 
     </tbody>
    </table> 
    <aside class="error"> 
     <ul> 
      <li> `userID` is `localUserID` for local MSTs and `remoteUserID` for remote MSTs.</li> 
      <li> SSRC is typically generated by the user-agent and MUST not be null or empty.</li> 
      <li> usageLabel can be set to front-camera, back-camera, screen, audio-in, mic, system-sound, enumeration-of-wrtcfuncname or anything that allows stream usage identification. </li> 
      <li> `associatedVideoTag` is the DOM element name, if you do not provide `associatedVideoTag` then callstats.js is not able to collect <b>Time-to-First-Media</b> metric</li> 
     </ul> 
    </aside> 
    <h2 id="callstats-sendfabricevent">callstats.sendFabricEvent()</h2> 
    <ul> 
     <li>Notifies the callstats.io back-end about user specific events (e.g., ‘Hold’, 'Mute’, etc.) on a <em>PeerConnection</em>. It is usually generated due to local user interaction at a <em>PeerConnection</em>.</li> 
    </ul> 
    <table>
     <thead> 
      <tr> 
       <th>Params</th> 
       <th>Argument</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">pcObject</code></td> 
       <td>Required</td> 
       <td>Object</td> 
       <td><em>PeerConnection</em> object.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">fabricEvent</code></td> 
       <td>Required</td> 
       <td>Enum</td> 
       <td>with valid values discussed in a later <a href="#enumeration-of-fabricevent">section</a>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">conferenceID</code></td> 
       <td>Required</td> 
       <td>String (256 bytes)</td> 
       <td>It is generated by the origin server.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">eventData</code></td> 
       <td>Optional</td> 
       <td>Object</td> 
       <td>event related data.</td> 
      </tr> 
     </tbody>
    </table> 
    <!--
## callstats.reportUserIDChange()
```javascript

callstats.reportUserIDChange(pcObject, conferenceID, newUserID, callstats.userIDType.local)

```
- This API can be used to change local or remote userID's during the conference.

   Params  |  Argument | Type | Description
-----------  | ----------- | -------- | ----------
`pcObject`  | Required  |  Object | _PeerConnection_ object.
`conferenceID`   | Required  | String (256 bytes) | It is generated by the origin server.
`newUserID`  |  Required  | String (128 bytes) or Object| It is generated by the origin server.
`userIDType`  | Required   | Enum | with valid values discussed in a later [section](#enumeration-of-useridtype).
---> 
    <h2 id="callstats-senduserfeedback">callstats.sendUserFeedback()</h2> 
    <ul> 
     <li>Send the feedback on conference performance indicated by the user.</li> 
    </ul> 
    <table>
     <thead> 
      <tr> 
       <th>Params</th> 
       <th>Argument</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">conferenceID</code></td> 
       <td>Required</td> 
       <td>String (256 bytes)</td> 
       <td>It is generated by the origin server.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">feedback</code></td> 
       <td>Required</td> 
       <td>Object</td> 
       <td>JSON object.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">pcCallback</code></td> 
       <td>Optional</td> 
       <td>Callback</td> 
       <td>the callback asynchronously reports failure or success of feedback submission.</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="json-for-feedback">JSON for <code class="prettyprint">feedback</code></h3> 
    <table>
     <thead> 
      <tr> 
       <th>Keys</th> 
       <th>Required</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">userID</code></td> 
       <td>Required</td> 
       <td>String (128 bytes)</td> 
       <td>It is generated by the origin server. Discussed in a <a href="#generating-userid-conferenceid-and-jwt">later section</a>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">overall</code></td> 
       <td>Required</td> 
       <td>Integer (between 1-5)</td> 
       <td>Typically the scores correspond to the <a href="https://en.wikipedia.org/wiki/Mean_opinion_score">mean opinion score</a>, in this case this value represents the overall quality perceived by the userID.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">audio</code>, <code class="prettyprint">video</code>, <code class="prettyprint">screen</code></td> 
       <td>Optional</td> 
       <td>Integer (between 1-5)</td> 
       <td>Similar to the definition of <code class="prettyprint">overall</code>, except these values correspond to specific types of media streams.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">comment</code></td> 
       <td>Optional</td> 
       <td>String</td> 
       <td>Detailed user feedback.</td> 
      </tr> 
     </tbody>
    </table> 
    <h1 id="callbacks-and-error-handling">Callbacks and Error Handling</h1> 
    <p>The WebRTC application can provide two callback functions for callstats.js:</p> 
    <ul> 
     <li>csInitCallback</li> 
     <li>csStatsCallback</li> 
    </ul> 
    <h2 id="csinitcallback">csInitCallback</h2> 
    <pre class="highlight javascript"><code><span class="kd">function</span> <span class="nx">csInitCallback</span><span class="p">(</span><span class="nx">csError</span><span class="p">,</span> <span class="nx">csErrMsg</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Status: errCode= "</span> <span class="o">+</span> <span class="nx">csError</span> <span class="o">+</span> <span class="s2">" errMsg= "</span> <span class="o">+</span> <span class="nx">csErrMsg</span> <span class="p">);</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre> 
    <p>To report different success and failure cases, they can occur during <code class="prettyprint">initialize()</code> or sending measurements to callstats.io. The callback takes the form of:</p> 
    <p>csError and csErrMsg are of type <em>String</em>. <code class="prettyprint">csErrMsg</code> is a descriptive error returned by callstats.io.</p> 
    <h2 id="csstatscallback">csStatsCallback</h2> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">reportType</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">inbound</span><span class="p">:</span> <span class="s1">'inbound'</span><span class="p">,</span>
  <span class="na">outbound</span><span class="p">:</span> <span class="s1">'outbound'</span>
<span class="p">};</span>

<span class="c1">// callback function to receive the stats</span>
<span class="kd">var</span> <span class="nx">csStatsCallback</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">stats</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">ssrc</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="nx">ssrc</span> <span class="k">in</span> <span class="nx">stats</span><span class="p">.</span><span class="nx">streams</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"SSRC is: "</span><span class="p">,</span> <span class="nx">ssrc</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">dataSsrc</span> <span class="o">=</span> <span class="nx">stats</span><span class="p">.</span><span class="nx">streams</span><span class="p">[</span><span class="nx">ssrc</span><span class="p">];</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"SSRC Type "</span><span class="p">,</span> <span class="nx">dataSsrc</span><span class="p">.</span><span class="nx">reportType</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">dataSsrc</span><span class="p">.</span><span class="nx">reportType</span> <span class="o">===</span> <span class="nx">reportType</span><span class="p">.</span><span class="nx">outbound</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"RTT is: "</span><span class="p">,</span> <span class="nx">dataSsrc</span><span class="p">.</span><span class="nx">rtt</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">dataSsrc</span><span class="p">.</span><span class="nx">reportType</span> <span class="o">===</span> <span class="nx">reportType</span><span class="p">.</span><span class="nx">inbound</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Inbound loss rate is: "</span><span class="p">,</span> <span class="nx">dataSsrc</span><span class="p">.</span><span class="nx">fractionLoss</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// initialize the callstats js API</span>
<span class="kd">var</span> <span class="nx">callstats</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">callstats</span><span class="p">();</span>
<span class="nx">callstats</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">AppID</span><span class="p">,</span> <span class="nx">AppSecret</span><span class="p">,</span> <span class="nx">localUserId</span><span class="p">,</span> <span class="nx">csInitCallback</span><span class="p">,</span> <span class="nx">csStatsCallback</span><span class="p">);</span>
</code></pre> 
    <p>The <code class="prettyprint">initialize()</code> API authenticates the javascript WebRTC application with the callstats.io back-end, and sets up a trusted relationship with it. The API is extended by adding a <code class="prettyprint">csStatsCallback</code> parameter. The callback parameter is OPTIONAL.</p> 
    <p>The <code class="prettyprint">csStatsCallback()</code> will be called by the callstats.js for each PeerConnection independently at regular intervals. By default the interval is set as 10 seconds to make sure we do not overwhelm the app with too many messages. For more information, please check out our blog on <a href="http://www.callstats.io/2015/08/24/statscallback-webrtc-media-quality-status/"><code class="prettyprint">csStatsCallback()</code></a></p> 
    <h1 id="api-enums">API Enums</h1> 
    <h2 id="enumeration-of-fabricusage">Enumeration of fabricUsage</h2> 
    <table>
     <thead> 
      <tr> 
       <th>Usage</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">multiplex</code></td> 
       <td>Describes a <em>PeerConnection</em> carrying multiple media streams on the same port.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">audio</code></td> 
       <td>Describes an audio-only <em>PeerConnection</em>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">video</code></td> 
       <td>Describes a video-only <em>PeerConnection</em>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">screen</code></td> 
       <td>Describes a screen-sharing <em>PeerConnection</em>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">data</code></td> 
       <td>Describes a <em>PeerConnection</em> with only DataChannels.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">unbundled</code></td> 
       <td>Describes a <em>PeerConnection</em> carrying media streams on different ports.</td> 
      </tr> 
     </tbody>
    </table> 
    <p>When using a single <em>PeerConnection</em> between a pair of userIDs for sending and receiving audio and video, application MUST use <code class="prettyprint">multiplex</code>.</p> 
    <!-- Currently monitoring DATA traffic is NOT SUPPORTED, because the browser does not yet implement any DataChannel statistics. --> 
    <h2 id="enumeration-of-fabricevent">Enumeration of fabricEvent</h2> 
    <table>
     <thead> 
      <tr> 
       <th>Name</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">fabricHold</code></td> 
       <td>The fabric is currently not sending and receiving any media, but the connection is still active.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">fabricResume</code></td> 
       <td>The fabric is resuming communication with the remote endpoint.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">audioMute</code></td> 
       <td>The fabric is currently not sending any Audio, but MAY be sending video.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">audioUnmute</code></td> 
       <td>The fabric is resuming Audio communication.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">videoPause</code></td> 
       <td>The fabric is currently not sending any Video, but MAY be sending audio.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">videoResume</code></td> 
       <td>The fabric is resuming Video communication.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">fabricTerminated</code></td> 
       <td>The <em>PeerConnection</em> is destroyed and is no longer sending or receiving any media.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">screenShareStart</code></td> 
       <td>The <em>PeerConnection</em> started the screen sharing.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">screenShareStop</code></td> 
       <td>The <em>PeerConnection</em> stopped the screen sharing.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">dominantSpeaker</code></td> 
       <td>The userID reports that it is the dominant speaker and not the remote participants.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">activeDeviceList</code></td> 
       <td>The userID reports the active devices used by him during the conference.</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="enumeration-of-wrtcfuncnames">Enumeration of wrtcFuncNames</h2> 
    <table>
     <thead> 
      <tr> 
       <th>Function Name</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">getUserMedia</code></td> 
       <td>The failure occurred in getUserMedia function (added in callstats.js version 3.4.x).</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">createOffer</code></td> 
       <td>The failure occurred in createOffer function.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">createAnswer</code></td> 
       <td>The failure occurred in createAnswer function.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">setLocalDescription</code></td> 
       <td>The failure occurred in setLocalDescription function.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">setRemoteDescription</code></td> 
       <td>The failure occurred in setRemoteDescription function.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">addIceCandidate</code></td> 
       <td>The failure occurred in addIceCandidate function.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">iceConnectionFailure</code></td> 
       <td>Ice connection failure detected by the application.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">signalingError</code></td> 
       <td>Signaling related errors in the application.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">applicationLog</code></td> 
       <td>Application related logs, this will not be considered as a failure.</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="enumeration-of-endpointtype">Enumeration of endpointType</h2> 
    <table>
     <thead> 
      <tr> 
       <th>Name</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">peer</code></td> 
       <td>The endpoint is a WebRTC client/peer.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">server</code></td> 
       <td>The endpoint is a media server or a middle-box.</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="enumeration-of-transmissiondirection">Enumeration of transmissionDirection</h2> 
    <table>
     <thead> 
      <tr> 
       <th>Name</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">sendonly</code></td> 
       <td>PeerConnection is for sending only.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">receiveonly</code></td> 
       <td>PeerConnection is for receiving only.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">sendrecv</code></td> 
       <td>PeerConnection is for sending and receiving.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">inactive</code></td> 
       <td>PeerConnection is inactive.</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="enumeration-of-useridtype">Enumeration of userIDType</h2> 
    <table>
     <thead> 
      <tr> 
       <th>Name</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">local</code></td> 
       <td>Set the localUserID</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">remote</code></td> 
       <td>Set the remoteUserID</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="cserror-types">csError Types</h2> 
    <table>
     <thead> 
      <tr> 
       <th>Name</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">httpError</code></td> 
       <td>HTTP error, the <code class="prettyprint">csErrMsg</code> string is reported by the browser.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">authError</code></td> 
       <td>Authentication failed, AppID or AppSecret is incorrect.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">wsChannelFailure</code></td> 
       <td>Connection failed, could not connect to callstats.io over WebSockets.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">csProtoError</code></td> 
       <td>The client library is sending malformed messages.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">success</code></td> 
       <td>The back-end has accepted the request and the endpoint is authenticated, or capable of sending measurement data.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">appConnectivityError</code></td> 
       <td>The connectivity checks for given <em>PeerConnection</em> object failed, i.e., iceConnectionState is set to disconnected.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">tokenGenerationError</code></td> 
       <td>Application could not generate the JWT.</td> 
      </tr> 
     </tbody>
    </table> 
    <ul> 
     <li><code class="prettyprint">csProtoError</code>: This may happen due to a change in the metrics or formatting of the current statistics API implemented by the browser.</li> 
    </ul> 
    <h1 id="authentication">Authentication</h1> 
    <h2 id="basic-authentication-over-https">Basic Authentication over HTTPS</h2> 
    <p>The application requires an <code class="prettyprint">AppID</code> and <code class="prettyprint">AppSecret</code> to authenticate with callstats.io. The origin server is expected to pass the <code class="prettyprint">userID</code> for each endpoint in a WebRTC call. The <code class="prettyprint">callstats.js</code> internally implements a 4-way handshake, based on simple <a href="https://en.wikipedia.org/wiki/Challenge%E2%80%93response_authentication">challenge-response</a> protocol. If successful, the callstats.js generates a token valid for 2 hours. The <code class="prettyprint">token</code> is subsequently used by the callstats.js to send event and measurement data to callstats.io.</p> 
    <h3 id="white-listing-optional-but-highly-recommended">White-listing (Optional but highly recommended)</h3> 
    <p>callstats.io uses the “Origin” header in the HTTP request to fetch the request’s origin. <a href="http://tools.ietf.org/html/rfc6454#section-4">RFC6454</a> explains the algorithm used by user-agents to compute the “Origin” header.</p> 
    <p>callstats.io compares the Origin URL sent by the HTTP user-agent in the authentication message with the stored Origin URL for that particular AppID. If the origins match, callstats.io returns a new token and associates the token to the requesting userID. Alternatively, if the origins does not match, callstats.io rejects the request, and denies access to that particular user-agent.</p> 
    <h2 id="3rd-party-authentication">3rd party authentication</h2> 
    <p>Instead of relying only on the endpoint for authentication, the callstats.io also implements third-party authentication, which requires the origin server to generate token for the endpoint which is then used to authenticate the endpoint. 3rd party authentication is discussed in detail in a later <a href="#3rd-party-authentication">section</a>.</p> 
    <h1 id="integrating-with-your-app">Integrating with your App</h1> 
    <h2 id="step-1-include-callstats-js">Step 1: Include callstats.js</h2> 
    <aside class="error">
      You can track your integration progress from our 
     <a href="https://dashboard.callstats.io/apps/integration"> dashboard </a>. 
    </aside> 
    <pre class="highlight javascript"><code>  <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"https://api.callstats.io/static/callstats.min.js"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt; </span></code></pre> 
    <blockquote> 
     <p>Everything in the <code class="prettyprint">callstats.js</code> is scoped under the callstats namespace, hence create the object.</p> 
    </blockquote> 
    <pre class="highlight javascript"><code>  <span class="kd">var</span> <span class="nx">callstats</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">callstats</span><span class="p">();</span>
</code></pre> 
    <p>Add the <code class="prettyprint">callstats.js</code> in the HEAD tag.</p> 
    <aside class="error">
      If you are using require.js, please refer to the following 
     <a href="#loading-with-require-js"> section </a> 
    </aside> 
    <h2 id="step-2-initialize-with-appsecret">Step 2: Initialize() with AppSecret</h2> 
    <pre class="highlight javascript"><code>  <span class="c1">//initialize the app with application tokens</span>
  <span class="kd">var</span> <span class="nx">AppID</span>     <span class="o">=</span> <span class="s2">"YOUR APPLICATION ID"</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">AppSecret</span> <span class="o">=</span> <span class="s2">"YOUR APPLICATION SECRET"</span><span class="p">;</span>

  <span class="c1">//localUserID is generated or given by the origin server</span>
  <span class="nx">callstats</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">AppID</span><span class="p">,</span> <span class="nx">AppSecret</span><span class="p">,</span> <span class="nx">localUserID</span><span class="p">,</span> <span class="nx">csInitCallback</span><span class="p">,</span> <span class="nx">csStatsCallback</span><span class="p">,</span> <span class="nx">configParams</span><span class="p">);</span>
</code></pre> 
    <p>After the user is authenticated with the origin server (or when the page loads), call <code class="prettyprint">initialize()</code> with appropriate parameters (see <a href="#api">API section</a>). Check the callback for errors. If the authentication succeeds, <code class="prettyprint">callstats.js</code> will receive a valid authentication token to make subsequent API calls.</p> 
    <p>For more information on callbacks, please refer to <a href="#csinitcallback">csInitCallback</a> and <a href="#csstatscallback">csStatsCallback</a>. Also have a look at <a href="#step-8-optional-handling-stats-from-statscallback">step 8</a> for csStatsCallback data handling.</p> 
    <p>ALTERNATIVE: If you are interested in using the third-party authentication, see the details described in a <a href="/#third-party-authentication">later section</a>.</p> 
    <h2 id="step-3-addnewfabric">Step 3: addNewFabric()</h2> 
    <pre class="highlight javascript"><code>  <span class="c1">//adding Fabrics</span>
  <span class="kd">var</span> <span class="nx">pc_config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"iceServers"</span><span class="p">:</span> <span class="p">[{</span><span class="na">url</span><span class="p">:</span> <span class="s2">"stun:stun.example.org:3478"</span><span class="p">}]};</span>
  <span class="kd">var</span> <span class="nx">pcObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RTCPeerConnection</span><span class="p">(</span><span class="nx">pc_config</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nx">pcCallback</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Monitoring status: "</span><span class="o">+</span> <span class="nx">err</span> <span class="o">+</span> <span class="s2">" msg: "</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="c1">// pcObject is created, tell callstats about it</span>
  <span class="c1">// pick a fabricUsage enumeration, if pc is sending both media and data: use multiplex.</span>

  <span class="kd">var</span> <span class="nx">usage</span> <span class="o">=</span> <span class="nx">callstats</span><span class="p">.</span><span class="nx">fabricUsage</span><span class="p">.</span><span class="nx">multiplex</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">fabricAttributes</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">remoteEndpointType</span><span class="p">:</span>   <span class="nx">callstats</span><span class="p">.</span><span class="nx">endpointType</span><span class="p">.</span><span class="nx">peer</span><span class="p">,</span>
    <span class="na">fabricTransmissionDirection</span><span class="p">:</span>  <span class="nx">callstats</span><span class="p">.</span><span class="nx">transmissionDirection</span><span class="p">.</span><span class="nx">sendrecv</span>
    <span class="p">};</span> 

  <span class="c1">//remoteUserID is the recipient's userID</span>
  <span class="c1">//conferenceID is generated or provided by the origin server (webrtc service)</span>
  <span class="nx">callstats</span><span class="p">.</span><span class="nx">addNewFabric</span><span class="p">(</span><span class="nx">pcObject</span><span class="p">,</span> <span class="nx">remoteUserID</span><span class="p">,</span> <span class="nx">usage</span><span class="p">,</span> <span class="nx">conferenceID</span><span class="p">,</span> <span class="nx">fabricAttributes</span><span class="p">,</span> <span class="nx">pcCallback</span><span class="p">);</span>

</code></pre> 
    <p>When creating a <em>PeerConnection</em>, call <code class="prettyprint">addNewFabric()</code> with appropriate parameters (see <a href="#callstats-addnewfabric">API section</a>). It is important to make the request only after the <em>PeerConnection</em> is created. The <em>PeerConnection</em> object MUST NOT be “undefined” or NULL because <code class="prettyprint">callstats.js</code> uses <a href="http://dev.w3.org/2011/webrtc/editor/webrtc.html#statistics-model"><code class="prettyprint">getStats()</code></a> to query the metrics from the browser internals. The application SHOULD call <code class="prettyprint">addNewFabric()</code> immediately after the <em>PeerConnection</em> object is created.</p> 
    <p>Time stamp of <code class="prettyprint">addNewFabric()</code> is used as a reference point to calculate fabric failure delay or fabric setup delay:</p> 
    <aside class="error"> 
     <ul> 
      <li> Fabric failure delay = timestamp of fabricSetupFailed - timestamp of addNewFabric</li> 
      <li> Fabric setup delay = timestamp of fabricSetup - timestamp of addNewFabric </li> 
     </ul> 
    </aside> 
    <p>In any WebRTC endpoint, where multiple <em>PeerConnections</em> are created between each participant (e.g., audio and video sent over different <em>PeerConnections</em> or a mesh call), the <code class="prettyprint">addNewFabric()</code> MUST be called for each <em>PeerConnection</em>.</p> 
    <h2 id="step-4-reporterror">Step 4: reportError()</h2> 
    <pre class="highlight javascript"><code>  <span class="c1">//adding Fabrics</span>
  <span class="kd">var</span> <span class="nx">pc_config</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"iceServers"</span><span class="p">:</span> <span class="p">[{</span><span class="na">url</span><span class="p">:</span> <span class="s2">"stun:stun.example.org:3478"</span><span class="p">}]};</span>
  <span class="kd">var</span> <span class="nx">pcObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">RTCPeerConnection</span><span class="p">(</span><span class="nx">pc_config</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nx">pcCallback</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Monitoring status: "</span><span class="o">+</span> <span class="nx">err</span> <span class="o">+</span> <span class="s2">" msg: "</span> <span class="o">+</span> <span class="nx">msg</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">function</span> <span class="nx">createOfferError</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">callstats</span><span class="p">.</span><span class="nx">reportError</span><span class="p">(</span><span class="nx">pcObject</span><span class="p">,</span> <span class="nx">conferenceID</span><span class="p">,</span> <span class="nx">callstats</span><span class="p">.</span><span class="nx">webRTCFunctions</span><span class="p">.</span><span class="nx">createOffer</span><span class="p">,</span> <span class="nx">err</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">// remoteUserID is the recipient's userID</span>
  <span class="c1">// conferenceID is generated or provided by the origin server (webrtc service)</span>
  <span class="c1">// pcObject is created, tell callstats about it</span>
  <span class="c1">// pick a fabricUsage enumeration, if pc is sending both media and data: use multiplex.</span>

  <span class="kd">var</span> <span class="nx">usage</span> <span class="o">=</span> <span class="nx">callstats</span><span class="p">.</span><span class="nx">fabricUsage</span><span class="p">.</span><span class="nx">multiplex</span><span class="p">;</span>
  <span class="nx">callstats</span><span class="p">.</span><span class="nx">addNewFabric</span><span class="p">(</span><span class="nx">pcObject</span><span class="p">,</span> <span class="nx">remoteUserID</span><span class="p">,</span> <span class="nx">usage</span><span class="p">,</span> <span class="nx">conferenceID</span><span class="p">,</span> <span class="nx">pcCallback</span><span class="p">);</span>

  <span class="c1">// let the "negotiationneeded" event trigger offer generation</span>
  <span class="nx">pcObject</span><span class="p">.</span><span class="nx">onnegotiationneeded</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="c1">// create offer</span>
    <span class="nx">pcObject</span><span class="p">.</span><span class="nx">createOffer</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span>
      <span class="nx">localDescriptionCreatedCallback</span><span class="p">,</span>
      <span class="nx">createOfferErrorCallback</span>
    <span class="p">);</span>
  <span class="p">}</span>
</code></pre> 
    <p>Sometimes WebRTC endpoints fail to establish connectivity, this may occur when user-agents and/or bridges implement differing flavors of the Session Description Protocol (SDP) or may not support some features that others implement.</p> 
    <p>The WebRTC APIs either have a callback or a Promise associated to them. Since <code class="prettyprint">callstats.js ver. 3.2.x</code>, WebRTC applications can use <code class="prettyprint">reportError()</code> to capture at which stage the negotiation fails and pass on the <a href="http://www.w3.org/TR/dom/#interface-domerror">DomError</a> returned by the callback or Promise to callstats.io. The failure reason will appear both in the conference time-line and aggregate on the main dashboard. See Section enumerating <a href="#enumeration-of-wrtcfuncnames">WebRTC functions</a> for details. The example below reports error when creating an SDP offer:</p> 
    <aside class="success">
      Congratulations! You have now completed the basic integration steps, read more for advanced features! 
    </aside> 
    <h2 id="step-5-optional-sendfabricevent">Step 5: (OPTIONAL) sendFabricEvent()</h2> 
    <pre class="highlight javascript"><code><span class="c1">// send fabricEvent: videoPause</span>
<span class="nx">callstats</span><span class="p">.</span><span class="nx">sendFabricEvent</span><span class="p">(</span><span class="nx">pcObject</span><span class="p">,</span> <span class="nx">callstats</span><span class="p">.</span><span class="nx">fabricEvent</span><span class="p">.</span><span class="nx">videoPause</span><span class="p">,</span> <span class="nx">conferenceID</span><span class="p">);</span>

<span class="c1">// devices are returned by the</span>
<span class="cm">/* var devices = navigator.mediaDevices.getUserMedia({ audio: true, video: true }); //a typical device looks like: //device= { "deviceId":"default","kind":"videoinput","label":"FaceTime HD Camera","groupId":"2004946474"} */</span>

<span class="kd">var</span> <span class="nx">eventData</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">deviceList</span><span class="p">:</span> <span class="nx">devices</span> <span class="c1">// array of active device</span>
<span class="p">};</span>

<span class="c1">// send fabricEvent: activeDeviceList</span>
<span class="nx">callstats</span><span class="p">.</span><span class="nx">sendFabricEvent</span><span class="p">(</span><span class="nx">pcObject</span><span class="p">,</span> <span class="nx">callstats</span><span class="p">.</span><span class="nx">fabricEvent</span><span class="p">.</span><span class="nx">activeDeviceList</span><span class="p">,</span> <span class="nx">conferenceID</span><span class="p">,</span> <span class="nx">eventData</span><span class="p">);</span>
</code></pre> 
    <p>During the conference, users might perform several actions impacting the measurements and conference analysis. The user might mute the audio or switch off the camera or do screen sharing during a conference. These events can directly impact the measurement data (For example, you can see a significant drop in throughput when camera is switched off). For the list of all possible conference events, please refer <a href="#enumeration-of-fabricevent">here</a></p> 
    <p>Send the appropriate <code class="prettyprint">fabricEvent</code> via <code class="prettyprint">sendFabricEvent()</code>.</p> 
    <!-- - send `fabricSetup` after [`onaddstream` event is fired by the WebRTC API](http://dev.w3.org/2011/webrtc/editor/webrtc.html)
  and the endpoint starts to render media. The callstats javascript expects both local
  and remote endpoints to generate this event. After this event is fired, the
  callstats javascript begins performance monitoring and sending data to the
  [callstats.io]({{site.callstats.backend-url}}) backend. --> 
    <ul> 
     <li><code class="prettyprint">fabricSetup</code> and <code class="prettyprint">fabricSetupFailed</code> has been <strong>deprecated</strong> in v2.1.0 and v3.10.0, respectively, these events are now generated automatically by the JS library.</li> 
    </ul> 
    <!-- - send `fabricFailed` when a call fails to connect to the remote peer or
  to the conferencing server. For example, failing to traverse a NAT or
  middlebox (ICE failure). This event MUST be reported by a local endpoint
  when the call fails without engaging the remote endpoint. In cases where
  the call fails after signaling to the remote endpoint succeeds, each
  endpoint MUST report the event independently. --> 
    <ul> 
     <li><p>send <code class="prettyprint">fabricTerminated</code> when an endpoint or participant disconnects from the conference, it notifies callstats.js to stop monitoring the local <em>PeerConnection</em>. Depending on the implementation of the hangup in your WebRTC application (may have to rely on signaling), the remote endpoint sends a <code class="prettyprint">fabricTerminated</code> event before destroying its local <em>PeerConnection</em> object. callstats.io monitors each <em>PeerConnection</em> in real-time, and generates summary statistics when the participant leaves. The summary of statistics for each conference is aggregated when all the participant have left. If no <code class="prettyprint">fabricTerminated</code> event is received, callstats.io will summarize and aggregate the summary statistics <em>30 seconds</em> after the last measurement for a conference is received.</p></li> 
     <li><p>send <code class="prettyprint">fabricHold</code> or <code class="prettyprint">fabricResume</code> whenever the user holds and resumes the call. This is usually done when a user gets multiple incoming conference calls, and has to stop transmitting (hold) on one conference call to transmit on the other, and then returns to earlier call to resume transmitting (unhold).</p></li> 
     <li><p>send <code class="prettyprint">dominantSpeaker</code> when a particular userID appears to be the only participant speaking. Typically, each endpoint calculates the dominant speaker over the set of participants in a sliding time-window (say, 10 seconds). Then the endpoint that notices that it is the dominant speaker sends the event.</p></li> 
     <li><p>send <code class="prettyprint">activeDeviceList</code> whenever the audio input, audio output, or video input device changes.</p></li> 
    </ul> 
    <h2 id="step-6-optional-associatemstwithuserid">Step 6: (OPTIONAL) associateMstWithUserID()</h2> 
    <pre class="highlight javascript"><code>  <span class="c1">// After O/A is complete, i.e., onAddStream is fired</span>
  <span class="kd">var</span> <span class="nx">localUserID</span>  <span class="o">=</span> <span class="s2">"Alice"</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">remoteUserID</span> <span class="o">=</span> <span class="s2">"Bob"</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">conferenceID</span> <span class="o">=</span> <span class="s2">"AliceAndBobAndCharlie"</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">mstLabel</span> <span class="o">=</span> <span class="s2">"front-camera"</span><span class="p">;</span>
  <span class="c1">// SSRC1 is the SSRCs of the local video stream</span>
  <span class="c1">// SSRC2 is the SSRC of the remote video stream, usually received in the remote SDP</span>
  <span class="c1">// mstLabel is a developer provided string that lets them identify</span>
  <span class="c1">// various tracks (e.g., front-camera, back-camera, without looking at the</span>
  <span class="c1">// configurations of the individual MSTs). In this example, we assume it is the</span>
  <span class="c1">// front-camera.</span>
  <span class="nx">callstats</span><span class="p">.</span><span class="nx">associateMstWithUserID</span><span class="p">(</span><span class="nx">pc</span><span class="p">,</span> <span class="nx">localUserID</span><span class="p">,</span> <span class="nx">conferenceID</span><span class="p">,</span> <span class="nx">ssrc1</span><span class="p">,</span> <span class="nx">mstLabel</span><span class="p">);</span>
  <span class="nx">callstats</span><span class="p">.</span><span class="nx">associateMstWithUserID</span><span class="p">(</span><span class="nx">pc</span><span class="p">,</span> <span class="nx">remoteUserID</span><span class="p">,</span> <span class="nx">conferenceID</span><span class="p">,</span> <span class="nx">ssrc2</span><span class="p">,</span> <span class="nx">mstLabel</span><span class="p">);</span>
</code></pre> 
    <p>When interacting with the conference server, the developer is most likely going to use the name or identifier associated with the conference server as the <code class="prettyprint">remoteUserID</code>. A typical conference bridge (for example, <a href="https://jitsi.org/Projects/JitsiVideobridge">Jitsi Videobridge</a>) transmits <a href="https://hacks.mozilla.org/2015/06/firefox-multistream-and-renegotiation-for-jitsi-videobridge/">multiple media stream tracks within a peer connection</a>. In which case, using a remote participant’s userID is impractical as there maybe several participants.</p> 
    <p>Since <code class="prettyprint">callstats.js ver. 3.3.x</code>, we allow mapping <a href="http://tools.ietf.org/html/rfc3550#section-5.1">Synchronization Source Identifier (SSRC)</a> for a mediastreamtrack to a userID (both local and remote). By default the local and remote <em>MediaStreamTracks</em> are automatically mapped to the localUserID and remoteUserID. With <code class="prettyprint">associateMstWithUserID()</code>, you can override the actual local and remote userIDs to the correct association. If the DOM identifiers of the video tags associated to each participant, callstats.js will calculate better quality scores for each participant. The code example shows how the API can be integrated:</p> 
    <p><img src="images/2015-mst-association-c4df7af1.gif" alt="Associationg userID with MST" width="700"></p> 
    <p>More discussion related to the motivation of <code class="prettyprint">associateMstWithUserID()</code> is covered in the following <a href="/2015/07/17/api-update-handling-multiple-media-stream-tracks-callstats/">blog post</a>.</p> 
    <h2 id="step-7-optional-senduserfeedback">Step 7: (OPTIONAL) sendUserFeedback()</h2> 
    <pre class="highlight javascript"><code>  <span class="kd">var</span> <span class="nx">overallRating</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="c1">// 1-5 rating, typically according to MOS scale.</span>
  <span class="kd">var</span> <span class="nx">feedback</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">"userID"</span><span class="p">:</span> <span class="nx">localUserID</span><span class="p">,</span> <span class="c1">//mandatory</span>
    <span class="s2">"overall"</span><span class="p">:</span> <span class="nx">overallRating</span><span class="p">,</span> <span class="c1">//mandatory</span>
  <span class="p">};</span>
  <span class="nx">callstats</span><span class="p">.</span><span class="nx">sendUserFeedback</span><span class="p">(</span><span class="nx">conferenceID</span><span class="p">,</span> <span class="nx">feedback</span><span class="p">,</span> <span class="nx">pcCallback</span><span class="p">);</span>
</code></pre> 
    <p>The developers are expected to design an appropriate UI to get user input on quality at the end of the call. Typically, services collect user feedback based on the Mean Opinion Score (MOS). However, it is not neccessary to use all values of the MOS scale, for example a service using only 2 point scale: it can associate 1 and 5 to bad and excellent, respectively and not use the values 2 to 4.</p> 
    <h2 id="step-8-optional-handling-stats-from-csstatscallback">Step 8: (OPTIONAL) Handling stats from csStatsCallback()</h2> 
    <p>The developers can handle the stats received from csStatsCallback function in a way suitable to their application. It can be used for displaying bitrate or based on the conference quality indicators applications can change their settings etc. For more details check this <a href="/2015/08/24/statscallback-webrtc-media-quality-status/">blog post</a>.</p> 
    <h2 id="step-9-optional-submitting-application-logs">Step 9: (OPTIONAL) Submitting application logs</h2> 
    <p>The developers can send application error logs using <code class="prettyprint">reportError()</code> API and track them on callstats.io dashboard. The logs will help in debugging the corresponding conferences. The <code class="prettyprint">error</code> can be an object or a string.</p> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">error1</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">message</span><span class="p">:</span> <span class="s2">"Error message"</span><span class="p">,</span>
    <span class="na">error</span><span class="p">:</span> <span class="s2">"Error 1"</span><span class="p">,</span>
    <span class="na">stack</span><span class="p">:</span> <span class="s2">"stack trace for the error"</span>
<span class="p">};</span>

<span class="nx">callstats</span><span class="p">.</span><span class="nx">reportError</span><span class="p">(</span><span class="nx">pc</span><span class="p">,</span> <span class="nx">confID</span><span class="p">,</span> <span class="nx">callstats</span><span class="p">.</span><span class="nx">webRTCFunctions</span><span class="p">.</span><span class="nx">applicationLog</span><span class="p">,</span> <span class="nx">error1</span><span class="p">);</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="nx">error2</span> <span class="o">=</span> <span class="s2">"application error "</span><span class="p">;</span>

<span class="nx">callstats</span><span class="p">.</span><span class="nx">reportError</span><span class="p">(</span><span class="nx">pc</span><span class="p">,</span> <span class="nx">confID</span><span class="p">,</span> <span class="nx">callstats</span><span class="p">.</span><span class="nx">webRTCFunctions</span><span class="p">.</span><span class="nx">applicationLog</span><span class="p">,</span> <span class="nx">error2</span><span class="p">);</span>
</code></pre> 
    <aside class="error">
      Please note that the application log size is limited to 20KB. Any application log greater than 20KB will be truncated to 20KB and a warning message will be displayed on the console log. 
    </aside> 
    <h1 id="loading-with-require-js">Loading with require.js</h1> 
    <blockquote> 
     <p>Script loading with require.js</p> 
    </blockquote> 
    <pre class="highlight javascript"><code>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">data</span><span class="o">-</span><span class="nx">main</span><span class="o">=</span><span class="s2">"YOUR REQUIRE JS CONFIG FILE"</span> <span class="nx">src</span><span class="o">=</span><span class="s2">"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.1.15/require.js"</span><span class="o">&gt;&lt;</span><span class="sr">/script</span><span class="err">&gt; </span>
<span class="nx">requirejs</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span>
  <span class="c1">// 1. define source paths to other dependencies</span>
  <span class="na">paths</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">//jQuery usage is deprecated from the version 3.10.0 onwards and socket.io is deprecated from 3.16.0</span>
    <span class="na">callstats</span><span class="p">:</span> <span class="s2">"https://api.callstats.io/static/callstats.min"</span>
  <span class="p">},</span>
  <span class="na">shim</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'callstats'</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">deps</span><span class="p">:</span> <span class="p">[],</span>
    <span class="p">},</span>
    <span class="s1">'WebRTCApp'</span><span class="p">:</span> <span class="p">{</span>
      <span class="nl">deps</span><span class="p">:</span> <span class="p">[</span><span class="s1">'callstats'</span><span class="p">,...</span> <span class="o">&lt;</span><span class="nx">other</span> <span class="nx">dependencies</span><span class="o">&gt;</span> <span class="p">...],</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="c1">// 3. load your main webRTCApp which depends on callstats</span>
<span class="nx">require</span><span class="p">([</span><span class="s1">'WebRTCApp'</span><span class="p">]);</span>

</code></pre> 
    <p>The <a href="http://www.requirejs.org/">require.js</a> helps load dependencies at the origin server. Below is an example snippet:</p> 
    <h1 id="generating-userid-conferenceid-and-jwt">Generating userID, conferenceID, and JWT</h1> 
    <!-- ## Obtaining the AppID and AppSecret --> 
    <!-- These are generated by [callstats.io]({{site.callstats.backend-url}}) --> 
    <!-- when the customer creates a new WebRTC application. --> 
    <h2 id="userid">userID</h2> 
    <p>The <code class="prettyprint">userID</code> is expected to be unique, and the max length is <strong>256 bytes</strong>. It is used by callstats.io to distinguish between different endpoints. The userIDs generated by the origin server and therefore the origin server decides if these identifiers are ephemeral or actual usernames.</p> 
    <p>callstats.io treats <code class="prettyprint">userIDs</code> as opaque identifiers, the origin server MAY choose to pass the same identifiers as it is using or send a SHA1 hash of the username instead (where the username and domain are the ones used by the origin server). If you are not going to search by userID, we prefer that you use ephemeral userIDs. Alternatively, we support internationalization, and non-English named usernames, we automatically encode all incoming <code class="prettyprint">userID</code> strings into <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a>, and they are case-sensitive.</p> 
    <p>Typically, if the same user joins the conference via multiple means (devices or browsers) at the same time, the origin server MAY use the same userID. If the <code class="prettyprint">userID</code> changes, the app MUST call <code class="prettyprint">initialize()</code> again.</p> 
    <ul> 
     <li><p>localUserID: The local userID that creates the <em>PeerConnection</em>, this userID is used when calling <code class="prettyprint">initialize()</code></p></li> 
     <li><p>remoteUserID: This is the userID of the remote peer, in a mesh topology this is the userID of the remote participant. Alternative, when communicating with a conferencing server there are two choices.</p></li> 
    </ul> 
    <ol> 
     <li><p>Using multiple <em>PeerConnections</em> between a local userID and conference server: The number of <em>PeerConnections</em> perhaps uniquely match 1:1 with the number of participants in the session. That is, there may be one <em>PeerConnection</em> which just sends media to the conference server and multiple <em>PeerConnections</em> carrying <em>MediaStreamTracks</em> (MSTs) associated with different participants. In this case, it may be advisable to use the <code class="prettyprint">conferenceServerID</code> as the remoteUserID for the outbound media, and the actual remoteUserIDs for the inbound media.</p></li> 
     <li><p>Multiple MSTs in a <em>PeerConnection</em>: There is only one <em>PeerConnection</em> between the localUserID and the conference bridge and the <em>PeerConnection</em> carries all the <em>MediaStreamTracks</em> (MSTs) received at the bridge from the various participants. In this case, the remoteUserID is the name of the conference bridge (e.g., conferenceServerID). More discussion about this is covered in the following <a href="/2015/07/17/api-update-handling-multiple-media-stream-tracks-callstats/">blog post</a>.</p></li> 
    </ol> 
    <p><img src="images/2015-mesh-conf-server-97fee0cd.png" alt="WebRTC conference star topology" width="700"></p> 
    <h3 id="userid-objects">UserID objects</h3> 
    <p>In some cases, customers want to provide the actual username in addition to the alias to callstats.io. For example, the actual username can be accessed by the customer support, while the alias is shown to engineering team. The customer service representative needs to know the real names of the users to perform their work, while the engineering team does not. This functionality helps callstats.io separate the userID information and show the correct end-user information based on the user role.</p> 
    <p>Since callstats.js version 3.14, it accepts userID both as a String or an object.</p> 
    <h2 id="conferenceid">conferenceID</h2> 
    <p>The <code class="prettyprint">conferenceID</code> is a unique call identifier to associate all userIDs in a conference. Therefore, all participants in a common call MUST use the same <code class="prettyprint">conferenceID</code>. It is also generated by the origin server and MUST be temporally unique (i.e., for the duration of the call), the origin server MAY reuse the <code class="prettyprint">conferenceID</code> identifier again for separate conferences at a later time, after the previous call using it has ended. The maximum length of the conferenceID is <strong>256 bytes</strong>.</p> 
    <p>Like userIDs, callstats.io treats <code class="prettyprint">conferenceIDs</code> as opaque identifiers, the origin server MAY use the same identifier as the one generated by the conference bridge, or use the URL of the page where the WebRTC call is taking place (e.g., www.example.com/conferenceID), concatenate current time-stamp with a random number, or pass a SHA1 hash of one of the above schemes. To enable internationalization, and non-English named conferenceIDs, we automatically encode all incoming <code class="prettyprint">conferenceID</code> strings into <a href="https://en.wikipedia.org/wiki/UTF-8">UTF-8</a>, and these strings are case-sensitive. This helps you as an app-developer or WebRTC service operator to easily perform dashboard search by directly copy-pasting (e.g., ???????, ????????, ??????????).</p> 
    <p>The origin server MAY reuse the <code class="prettyprint">userID</code> within the same conference call, i.e., two or more endpoints report using the same <code class="prettyprint">userID</code> and <code class="prettyprint">conferenceID</code>. while this is NOT RECOMMENDED, the <a href="https://dashboard.callstats.io">callstats.io</a> will still attempt to distinguish these <code class="prettyprint">userIDs</code> as distinct entities.</p> 
    <aside class="error">
      If the value of any developer generated String is empty, undefined, or null, the dashboard will show an empty string. 
    </aside> 
    <h1 id="third-party-authentication">Third-party authentication</h1> 
    <p>Token format used by callstats.io’s third party authentication system is <a href="https://jwt.io/">JWT</a>. Currently the only supported algorithm is ES256.</p> 
    <h2 id="api">API</h2> 
    <p>The API is defined <a href="#callstats-initialize-with-third-party-authentication">above</a>. </p> 
    <h2 id="token-claims">Token claims</h2> 
    <pre class="highlight json"><code><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"userID"</span><span class="p">:</span><span class="s2">"4358"</span><span class="p">,</span><span class="w"> </span><span class="nt">"appID"</span><span class="p">:</span><span class="s2">"545619706"</span><span class="p">,</span><span class="w"> </span><span class="nt">"keyID"</span><span class="p">:</span><span class="s2">"0123456789abcedf00"</span><span class="p">,</span><span class="w"> </span><span class="nt">"iat"</span><span class="p">:</span><span class="mi">1465221382</span><span class="p">,</span><span class="w"> </span><span class="nt">"nbf"</span><span class="p">:</span><span class="mi">1465221682</span><span class="p">,</span><span class="w"> </span><span class="nt">"exp"</span><span class="p">:</span><span class="mi">1465221682</span><span class="p">,</span><span class="w"> </span><span class="nt">"jti"</span><span class="p">:</span><span class="s2">"25b30fb33a7764d2971534507718f35274bb"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <p>Token supports following claims:</p> 
    <table>
     <thead> 
      <tr> 
       <th>Claim</th> 
       <th>Required/optional</th> 
       <th>Type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>appID</td> 
       <td>Required</td> 
       <td>String</td> 
       <td>This is your AppID.</td> 
      </tr> 
      <tr> 
       <td>userID</td> 
       <td>Required</td> 
       <td>String</td> 
       <td>This is endpoint’s local user identifier.</td> 
      </tr> 
      <tr> 
       <td>keyID</td> 
       <td>Required</td> 
       <td>String</td> 
       <td>ID of the key that was used to generate this token. This can be obtained from secrets configuration page</td> 
      </tr> 
      <tr> 
       <td>exp</td> 
       <td>Optional</td> 
       <td>NumericDate</td> 
       <td>&nbsp;<a href="https://tools.ietf.org/html/rfc7519#section-4.1.4">Token expiration time</a>. It’s recommended that this is set 5-10 minutes into the future.</td> 
      </tr> 
      <tr> 
       <td>nbf</td> 
       <td>&nbsp;Optional</td> 
       <td>NumericDate</td> 
       <td><a href="https://tools.ietf.org/html/rfc7519#section-4.1.5">Token not valid before</a>. It’s recommended that this is set 5-10 minutes into the past.</td> 
      </tr> 
      <tr> 
       <td>jti</td> 
       <td>&nbsp;Optional</td> 
       <td>&nbsp;String</td> 
       <td><a href="https://tools.ietf.org/html/rfc7519#section-4.1.7">JWT ID</a>. This is used for audit logging.</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="alternative-step-2-initialize-with-jwt-client-example">Alternative Step 2: Initialize() with JWT (Client example)</h2> 
    <pre class="highlight javascript"><code>  <span class="c1">//initialize the app with application tokens</span>
  <span class="kd">var</span> <span class="nx">AppID</span>     <span class="o">=</span> <span class="s2">"YOUR APPLICATION ID"</span><span class="p">;</span>

  <span class="kd">function</span> <span class="nx">exampleTokenGenerator</span><span class="p">(</span><span class="nx">initialToken</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">cached</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">initalToken</span><span class="p">)</span>
     <span class="kd">var</span> <span class="nx">cached</span> <span class="o">=</span> <span class="nx">initialToken</span><span class="p">;</span>
    <span class="c1">// forcenew = set to true if application should generate new token and false if</span>
    <span class="c1">// it's okay to use cached token</span>
    <span class="c1">// callback(error, token). error should be set to non-null if there was an</span>
    <span class="c1">// non-recoverable error. Token should be the JWT. Please see section</span>
    <span class="c1">// "Third-party Authentication" for more complete documentation</span>
    <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">forcenew</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">forcenew</span> <span class="o">&amp;&amp;</span> <span class="nx">cached</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">)</span>
        <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">cached</span><span class="p">);</span>
      <span class="c1">// 1. get new token</span>
      <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">();</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s1">'POST'</span><span class="p">,</span> <span class="s1">'/getToken'</span><span class="p">);</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">setRequestHeader</span><span class="p">(</span><span class="s1">'Content-Type'</span><span class="p">,</span> <span class="s1">'application/json; charset=UTF-8'</span><span class="p">);</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Did we get 200 OK response?</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">xhr</span><span class="p">.</span><span class="nx">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">)</span> <span class="p">{</span>
          <span class="c1">// Get token and send it to callback</span>
          <span class="kd">var</span> <span class="nx">resp</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
          <span class="c1">// the token should contain the claims defined in third party authentication</span>
          <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">token</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Couldn't get the token"</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
        <span class="c1">// if uncorrectable error happens, inform callstats.io</span>
        <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="s1">'Unknown error'</span><span class="p">);</span>
      <span class="p">};</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nx">csInitCallback</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Initializing Status: err="</span><span class="o">+</span><span class="nx">err</span><span class="o">+</span><span class="s2">" msg="</span><span class="o">+</span><span class="nx">msg</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c1">//userID is generated or given by the origin server</span>
  <span class="nx">callstats</span><span class="p">.</span><span class="nx">initialize</span><span class="p">(</span><span class="nx">AppID</span><span class="p">,</span> <span class="nx">exampleTokenGenerator</span><span class="p">(</span><span class="nx">initialToken</span><span class="p">),</span> <span class="nx">userID</span><span class="p">,</span> <span class="nx">csInitCallback</span><span class="p">,</span> <span class="nx">csStatsCallback</span><span class="p">,</span> <span class="nx">configParams</span><span class="p">);</span>
</code></pre> 
    <p>After the user is authenticated with the origin server (or when the page loads), call <code class="prettyprint">initialize()</code> with appropriate parameters (see <a href="#api">API section</a>). Check the callback for errors. If the authentication succeeds, <code class="prettyprint">callstats.js</code> will receive an appropriate authentication token to make subsequent API calls.</p> 
    <h2 id="generating-a-json-web-token-jwt">Generating a JSON Web Token (JWT)</h2> 
    <pre class="highlight javascript"><code>  <span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express'</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'jsonwebtoken'</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
  <span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">);</span>

  <span class="kd">var</span> <span class="nx">crypto</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'crypto'</span><span class="p">);</span>

  <span class="c1">// Your ECDSA private key for which the public key is submitted to</span>
  <span class="c1">// callstats.io dashboard</span>
  <span class="kd">var</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">'ecprivate.key'</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">keyid</span> <span class="o">=</span> <span class="s1">'0102030405060709'</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">appid</span> <span class="o">=</span> <span class="mi">12345678</span><span class="p">;</span>
  <span class="c1">// Dummy audit log</span>
  <span class="kd">var</span> <span class="nx">audit</span> <span class="o">=</span> <span class="p">{</span><span class="na">log</span><span class="p">:</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">};</span>

  <span class="c1">// Dummy session middleware</span>
  <span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">req</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="p">{</span><span class="na">id</span><span class="p">:</span> <span class="mi">300</span><span class="p">};</span>
    <span class="nx">next</span><span class="p">();</span>
  <span class="p">});</span>

  <span class="c1">// Dummy JWT ID generator</span>
  <span class="kd">var</span> <span class="nx">randomIdGenerator</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="mi">42</span><span class="p">;</span>
  <span class="p">};</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">'/getToken'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">403</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">error</span><span class="p">:</span> <span class="s2">"User not logged in"</span><span class="p">}));</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">randomid</span> <span class="o">=</span> <span class="nx">randomIdGenerator</span><span class="p">().</span><span class="nx">toString</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="nx">token</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">.</span><span class="nx">sign</span><span class="p">(</span>
        <span class="p">{</span>
          <span class="na">userID</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">.</span><span class="nx">toString</span><span class="p">(),</span>
          <span class="na">appID</span><span class="p">:</span> <span class="nx">appid</span><span class="p">,</span>
          <span class="na">keyID</span><span class="p">:</span> <span class="nx">keyid</span>
        <span class="p">},</span> <span class="nx">key</span><span class="p">,</span>
        <span class="p">{</span>
          <span class="na">algorithm</span><span class="p">:</span> <span class="s2">"ES256"</span><span class="p">,</span>
          <span class="na">jwtid</span><span class="p">:</span> <span class="nx">randomid</span><span class="p">,</span>
          <span class="na">expiresIn</span><span class="p">:</span> <span class="mi">300</span><span class="p">,</span> <span class="c1">//5 minutes</span>
          <span class="na">notBefore</span><span class="p">:</span> <span class="o">-</span><span class="mi">300</span> <span class="c1">//-5 minutes</span>
        <span class="p">});</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
      <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">500</span><span class="p">);</span>
      <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">error</span><span class="p">:</span> <span class="s2">"Token creation failed"</span><span class="p">}));</span>
    <span class="p">}</span>
    <span class="nx">audit</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span><span class="na">action</span><span class="p">:</span> <span class="s2">"GrantToken"</span><span class="p">,</span> <span class="na">user</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="na">tokenid</span><span class="p">:</span> <span class="nx">randomid</span><span class="p">});</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">(</span><span class="mi">200</span><span class="p">);</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span><span class="na">token</span><span class="p">:</span> <span class="nx">token</span><span class="p">}));</span>
  <span class="p">});</span>

  <span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Example app listening on port 3000!'</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre> 
    <p>You can use following code as an example to generate JWT for authenticating the endpoint. </p> 
    <h1 id="support">Support</h1> 
    <p>If you have comments or have new feature requests, join the discussion on the <a href="https://groups.google.com/forum/#!forum/callstats-dev">mailing list</a> or drop us an <a href="mailto:support@callstats.io?Subject=Integration help">email</a>.</p> 
    <h1 id="webhook-notifications">Webhook Notifications</h1> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="nt">"reason"</span><span class="p">:</span><span class="s2">"dissatisfactoryUserFeedback"</span><span class="p">,</span><span class="nt">"timestamp"</span><span class="p">:</span><span class="mi">1471354044616</span><span class="p">,</span><span class="nt">"appId"</span><span class="p">:</span><span class="s2">"xxxxx"</span><span class="p">,</span><span class="nt">"triggerType"</span><span class="p">:</span><span class="s2">"interval"</span><span class="p">,</span><span class="w"> </span><span class="nt">"actualValue"</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="nt">"threshold"</span><span class="p">:</span><span class="mf">0.2</span><span class="p">,</span><span class="nt">"fractionalValue"</span><span class="p">:</span><span class="mf">0.3333333333333333</span><span class="p">,</span><span class="w"> </span><span class="nt">"period"</span><span class="p">:{</span><span class="nt">"start"</span><span class="p">:</span><span class="mi">1458125913802</span><span class="p">,</span><span class="nt">"end"</span><span class="p">:</span><span class="mi">1458129519080</span><span class="p">},</span><span class="w"> </span><span class="nt">"url"</span><span class="p">:</span><span class="s2">"https:\/\/dashboard.callstats.io\/search?feedback12=1"</span><span class="p">,</span><span class="w"> </span><span class="nt">"text"</span><span class="p">:</span><span class="s2">"33% of the conferences had dissatisfactory feedback in the last hour i.e., 5 of 15 total conferences with appID xxxxx. The current trigger threshold is 20%."</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="nt">"reason"</span><span class="p">:</span><span class="s2">"failedConferences"</span><span class="p">,</span><span class="nt">"timestamp"</span><span class="p">:</span><span class="mi">1471354046133</span><span class="p">,</span><span class="nt">"appId"</span><span class="p">:</span><span class="s2">"xxxxx"</span><span class="p">,</span><span class="nt">"triggerType"</span><span class="p">:</span><span class="s2">"interval"</span><span class="p">,</span><span class="w"> </span><span class="nt">"actualValue"</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="nt">"threshold"</span><span class="p">:</span><span class="mf">0.1</span><span class="p">,</span><span class="nt">"fractionalValue"</span><span class="p">:</span><span class="mf">0.11290322580645161</span><span class="p">,</span><span class="w"> </span><span class="nt">"period"</span><span class="p">:{</span><span class="nt">"start"</span><span class="p">:</span><span class="mi">1458125913802</span><span class="p">,</span><span class="nt">"end"</span><span class="p">:</span><span class="mi">1458129519080</span><span class="p">},</span><span class="w"> </span><span class="nt">"url"</span><span class="p">:</span><span class="s2">"https:\/\/dashboard.callstats.io\/search?failureGroup=totalFailure"</span><span class="p">,</span><span class="w"> </span><span class="nt">"text"</span><span class="p">:</span><span class="s2">"11% of the conferences failed in the last hour i.e., 7 of 62 total conferences with appID xxxxx. The current trigger threshold is 10%."</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <h3 id="json-encoding">JSON encoding</h3> 
    <p>callstats.io sends periodic notifications (JSON encoded messages) to webhook URLs. The notification messages are sent when either a single event occurs (<strong>individual notification</strong>) or a metric exceeds a threshold value in a defined interval (<strong>interval notification</strong>), in the message these are identified by the <code class="prettyprint">triggerType</code>. Details of the notification message structure are below: </p> 
    <table>
     <thead> 
      <tr> 
       <th>Keys</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td><code class="prettyprint">reason</code></td> 
       <td>camelCase string identifying the notification.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">timestamp</code></td> 
       <td>Unix timestamp in seconds when the message was sent.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">appId</code></td> 
       <td>The application identifier corresponding to the message.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">triggerType</code></td> 
       <td>One of <code class="prettyprint">interval</code> or <code class="prettyprint">individual</code>.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">actualValue</code></td> 
       <td>The actual measured value of the metric when the message was triggered.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">threshold</code></td> 
       <td>The threshold over which the notification is triggered. For individual metrics, this value is 1.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">fractionalValue</code></td> 
       <td>The ratio of the actualValue of a certain metric and the total measurement points of that metric. e.g., failed/total conferences.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">period</code></td> 
       <td>Object containing start and end timestamps.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">url</code></td> 
       <td>The search URL that will find the conference on callstats.io dashboard.</td> 
      </tr> 
      <tr> 
       <td><code class="prettyprint">text</code></td> 
       <td>Notification in english text.</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="keys-for-the-notification-reason">Keys for the Notification reason</h3> 
    <table>
     <thead> 
      <tr> 
       <th>Keys</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>failedConferences</td> 
       <td>ratio of failed conferences exceeded threshold</td> 
      </tr> 
      <tr> 
       <td>dissatisfactoryUserFeedback</td> 
       <td>ratio of user feedback with dissatisfactory rating exceeded threshold</td> 
      </tr> 
     </tbody>
    </table> 
   </div> 
   <div class="dark-box"> 
    <div class="lang-selector"> 
     <a href="#" data-language-name="Javascript">Javascript</a> 
    </div> 
   </div> 
  </div> 
  <!-- tracking codes --> 
  <!-- Google Analytics --> 
  <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    
      ga('create', "UA-44808794-1", 'callstats.io');
      ga('send', 'pageview');
    
    </script> 
  <!-- Start of StatCounter Code --> 
  <script type="text/javascript">
      	var sc_project=9498734;
      	var sc_invisible=1;
      	var sc_security="b8f34278";
      	var scJsHost = (("https:" == document.location.protocol) ?
      	"https://secure." : "http://www.");
      	document.write("<sc"+"ript type='text/javascript' src='" +
      	scJsHost+
      	"statcounter.com/counter/counter.js'></"+"script>");
      </script> 
  <noscript> 
   <div class="statcounter">
    <a title="click tracking" href="http://statcounter.com/" target="_blank"><img class="statcounter" src="http://c.statcounter.com/9498734/0/b8f34278/1/" alt="click tracking"></a>
   </div> 
  </noscript> 
  <!-- End of StatCounter Code --> 
  <!-- Autopilot --> 
  <script type="text/javascript">(function(o){var b="https://api.autopilothq.com/anywhere/",t="a29ad76bf7534e12b4f3aeb806e49e97a59ba5b3fee54afa857d46997a4e8157",a=window.AutopilotAnywhere={_runQueue:[],run:function(){this._runQueue.push(arguments);}},c=encodeURIComponent,s="SCRIPT",d=document,l=d.getElementsByTagName(s)[0],p="t="+c(d.title||"")+"&u="+c(d.location.href||"")+"&r="+c(d.referrer||""),j="text/javascript",z,y;if(!window.Autopilot) window.Autopilot=a;if(o.app) p="devmode=true&"+p;z=function(src,asy){var e=d.createElement(s);e.src=src;e.type=j;e.async=asy;l.parentNode.insertBefore(e,l);};if(!o.noaa){z(b+"aa/"+t+'?'+p,false)};y=function(){z(b+t+'?'+p,true);};if(window.attachEvent){window.attachEvent("onload",y);}else{window.addEventListener("load",y,false);}})({});</script> 
  <!-- End of Autopilot --> 
  <!-- Heap Analytics --> 
  <script type="text/javascript">
      window.heap=window.heap||[],heap.load=function(e,t){window.heap.appid=e,window.heap.config=t=t||{};var n=t.forceSSL||"https:"===document.location.protocol,a=document.createElement("script");a.type="text/javascript",a.async=!0,a.src=(n?"https:":"http:")+"//cdn.heapanalytics.com/js/heap-"+e+".js";var o=document.getElementsByTagName("script")[0];o.parentNode.insertBefore(a,o);for(var r=function(e){return function(){heap.push([e].concat(Array.prototype.slice.call(arguments,0)))}},p=["clearEventProperties","identify","setEventProperties","track","unsetEventProperty"],c=0;c<p.length;c++)heap[p[c]]=r(p[c])};
      heap.load("2544645076");
    </script> 
  <!-- End of Heap Analytics --> 
  <!-- Start of Async HubSpot Analytics Code --> 
  <script type="text/javascript">
    (function(d,s,i,r) {
      if (d.getElementById(i)){return;}
      var n=d.createElement(s),e=d.getElementsByTagName(s)[0];
      n.id=i;n.src='//js.hs-analytics.net/analytics/'+(Math.ceil(new Date()/r)*r)+'2596108.js';
      e.parentNode.insertBefore(n, e);
    })(document,"script","hs-analytics",300000);
  </script> 
  <!-- End of Async HubSpot Analytics Code -->   
 </body>
</html>