<!doctype html>
<html itemscope itemtype="http://schema.org/Blog">
 <head> 
  <title>Sentiment analysis on tweets -- Guillaume Laforge's Blog</title> 
  <script src="/js/highlight.js" type="text/javascript"></script> 
  <script src="/js/languages/groovy.js" type="text/javascript"></script> 
  <script src="/js/languages/java.js" type="text/javascript"></script> 
  <script src="/js/languages/xml.js" type="text/javascript"></script> 
  <script src="/js/languages/css.js" type="text/javascript"></script> 
  <script src="/js/languages/javascript.js" type="text/javascript"></script> 
  <script type="text/javascript" src="/js/jquery-1.6.2.min.js"></script> 
  <script type="text/javascript">
    jQuery(document).ready(function () {
        jQuery(".post-body pre").wrapInner("<code/>");
        //jQuery(".post-body pre > *").wrap("<code/>").remove(".post-body pre code br");
        hljs.initHighlighting();
    });
</script> 
  <link rel="stylesheet" href="/css/idea.css"> 
  <meta http-equiv="content-type" content="text/html; charset=UTF-8"> 
  <meta name="description" content="Guillaume Laforge's blog"> 
  <meta name="keywords" content="Guillaume Laforge, blog, Guillaume Laforge blog, groovy, groovy language, groovy programming, groovy programming language, gaelyk, grails, java, dynamic language, programming, springsource, vmware, gradle, spock, griffon, conference"> 
  <meta name="author" content="Guillaume Laforge"> 
  <link rel="stylesheet" type="text/css" href="/css/style.css" media="screen"> 
  <link rel="alternate" type="application/atom+xml" href="http://feeds.feedburner.com/glaforge" title="Guillaume Laforge's blog feed"> 
  <script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-257558-8']);
    _gaq.push(['_trackPageview']);

    (function () {
        var ga = document.createElement('script');
        ga.type = 'text/javascript';
        ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0];
        s.parentNode.insertBefore(ga, s);
    })();
</script> 
  <meta itemprop="name" content="Sentiment analysis on tweets"> 
  <meta itemprop="description" content="    What’s the mood on Twitter today?   Looking at my little    twitter demo    from a few weeks ago (using    Glide         Gaelyk    on    Google App Engine   ), I thought I could enrich the visuali..."> 
  <script type="text/javascript">var switchTo5x = true;</script> 
  <script type="text/javascript" src="http://w.sharethis.com/button/buttons.js"></script> 
  <script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script> 
  <script type="text/javascript">stLight.options({publisher:'4ebd393c-0ce9-4527-a07c-7c97bf04495f'});</script> 
 </head> 
 <body id="top"> 
  <div id="header-wrapper"> 
   <div id="header-wrapper-2"> 
    <div class="center-wrapper"> 
     <div id="header"> 
      <div id="logo"> 
       <h1 id="site-title"><a href="/">Guillaume <span>Laforge</span></a></h1> 
       <h2 id="site-slogan">On all things Groovy!</h2> 
      </div> 
      <div id="help-wrapper"> 
       <a href="http://feeds.feedburner.com/glaforge"> <img src="/images/feed.png" alt="Atom feed" align="left" style="position: relative; top: 12px; left: -10px"> </a> 
       <div id="help"> 
        <a href="/page/contact-me">Contact me</a> 
        <span class="text-separator">|</span> 
        <a href="/page/about-this-site">About this site</a> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="navigation-wrapper"> 
   <div id="navigation-wrapper-2"> 
    <div class="center-wrapper"> 
     <div id="navigation"> 
      <ul class="tabbed"> 
       <li class="current_page_item"><a href="/">Home</a></li> 
       <li class=""><a href="/archives">Archives</a></li> 
       <li class=""><a href="/search">Search</a></li> 
      </ul> 
      <div class="clearer">
       &nbsp;
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="content-wrapper"> 
   <div class="center-wrapper"> 
    <div class="content" id="content-two-columns"> 
     <div id="main-wrapper"> 
      <div id="main"> 
       <div class="post"> 
        <div class="post-title">
         <h1>Sentiment analysis on tweets</h1>
        </div> 
        <div class="post-date">
          Posted on 20 July, 2016 (1 year ago) 
        </div> 
        <div class="text-center"> 
         <br> 
         <script type="text/javascript"><!--
                            google_ad_client = "ca-pub-2993103784418650";
                            /* glaforge.appspot.com */
                            google_ad_slot = "4475788649";
                            google_ad_width = 468;
                            google_ad_height = 60;
                            //-->
                            </script> 
         <script type="text/javascript" src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
                            </script> 
        </div> 
        <div class="post-body"> 
         <div style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;">
          <span style="font-weight:normal;" id="docs-internal-guid-f9743aaf-07ca-50ca-2497-391e15c976ed"><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="color: rgb(0, 0, 0); font-family: Roboto; font-size: 14.6667px; font-style: normal; font-weight: 400; white-space: pre-wrap; line-height: normal; background-color: transparent;">What’s the mood on Twitter today?</span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> Looking at my little </span><a href="http://glaforge.appspot.com/article/getting-started-with-glide-and-gaelyk-on-google-app-engine" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">twitter demo</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> from a few weeks ago (using </span><a href="http://glide-gae.appspot.com/" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">Glide</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &amp; </span><a href="http://gaelyk.appspot.com/" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">Gaelyk</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> on </span><a href="https://cloud.google.com/appengine/" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">Google App Engine</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">), I thought I could enrich the visualization with some </span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 700; font-style: normal; white-space: pre-wrap; background-color: transparent;">sentiment analysis</span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> to give more color to those tweets. Fortunately, there’s a new API in Google-town, the </span><a href="https://cloud.google.com/natural-language/docs/" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">Cloud Natural Language API</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> (some more info in the <a href="https://cloudplatform.googleblog.com/2016/07/the-latest-for-Cloud-customers-machine-learning-and-west-coast-expansion.html">announcement</a> and a great post showing textual <a href="https://cloud.google.com/blog/big-data/2016/07/using-the-cloud-natural-language-api-to-analyze-harry-potter-and-the-new-york-times">analysis of Harry Potter and New York Times</a>)!</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">The brand-new Cloud Natural Language API provides three key services:</span></p>
           <ul style="margin-top:0pt;margin-bottom:0pt;">
            <li dir="ltr" style="list-style-type: disc; font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; background-color: transparent;"><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 700; font-style: normal; white-space: pre-wrap; background-color: transparent;">Sentiment analysis</span><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">: </span><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 400; font-style: italic; white-space: pre-wrap; background-color: transparent;">“inspects the given text and identifies the prevailing emotional opinion within the text, especially to determine a writer's attitude as positive, negative, or neutral”</span><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">.</span></p></li>
            <li dir="ltr" style="list-style-type: disc; font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; background-color: transparent;"><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 700; font-style: normal; white-space: pre-wrap; background-color: transparent;">Entity recognition</span><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">: </span><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 400; font-style: italic; white-space: pre-wrap; background-color: transparent;">“inspects the given text for known entities (proper nouns such as public figures, landmarks, etc.) and returns information about those entities”</span><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">.</span></p></li>
            <li dir="ltr" style="list-style-type: disc; font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; background-color: transparent;"><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 700; font-style: normal; white-space: pre-wrap; background-color: transparent;">Syntax analysis</span><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">: </span><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 400; font-style: italic; white-space: pre-wrap; background-color: transparent;">“extracts linguistic information, breaking up the given text into a series of sentences and tokens (generally, word boundaries), providing further analysis on those tokens”</span><span style="font-size: 14.6667px; font-family: Roboto; font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">.</span></p></li>
           </ul><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">I’m going to focus only on the sentiment analysis in this article. When analyzing some text, the API tells you whether the content is negative, neutral or positive, returning “polarity” values ranging from -1 for negative to +1 for positive. And you also get a “magnitude”, from 0 to +Infinity to say how strong the emotions expressed are. You can read more about </span><a href="https://cloud.google.com/natural-language/docs/basics#interpreting_sentiment_analysis_values" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">what polarity and magnitude mean</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> for a more thorough understanding.</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 700; font-style: normal; white-space: pre-wrap; background-color: transparent;">Let’s get started!</span></p><br><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">With the code base of my </span><a href="http://glaforge.appspot.com/article/getting-started-with-glide-and-gaelyk-on-google-app-engine" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">first article</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">, I will add the sentiment analysis associated with the tweets I’m fetching. The idea is to come up with a colorful wall of tweets like this</span></span>
          <span style="color: rgb(0, 0, 0); font-family: Roboto; font-size: 14.6667px; font-style: normal; font-weight: 400; white-space: pre-wrap; background-color: transparent;">, with a range of colors from red for negative, to green for positive, through yellow for neutral</span>
          <span style="color: rgb(0, 0, 0); font-family: Roboto; font-size: 14.6667px; font-style: normal; font-weight: 400; white-space: pre-wrap; background-color: transparent;">:</span>
         </div>
         <div style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;">
          <span style="font-weight:normal;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"><br></span></span>
         </div>
         <div style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;">
          <img src="/media/tweetmood-final-small.png" style="font-family: Arial, Verdana; font-style: normal; font-weight: normal;">
         </div>
         <div style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;">
          <br>
         </div>
         <div style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;">
          <span style="font-weight:normal;" id="docs-internal-guid-f9743aaf-07ca-ebd5-1ecc-99109ae0bbf7"><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">I’ll create a new controller (mood.groovy) that will call the Cloud NL service, passing the text as input. I’ll take advantage of App Engine’s Memcache support to cache the calls to the service, as tweets are immutable, their sentiment won’t change. The controller will return a JSON structure to hold the result of the sentiment analysis. From the index.gtpl view template, I’ll add a bit of JavaScript and AJAX to call my newly created controller.</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 700; font-style: normal; white-space: pre-wrap; background-color: transparent;">Setting up the dependencies</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">You can either use the Cloud NL REST API or the Java SDK. I decided to use the latter</span><span style="color: rgb(0, 0, 0); font-family: Roboto; font-size: 14.6667px; font-style: normal; font-weight: 400; white-space: pre-wrap; line-height: normal; background-color: transparent;">, essentially just to benefit from code completion in my IDE</span><span style="font-style: normal; font-weight: 400; font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); white-space: pre-wrap; background-color: transparent;">. You can have a look at the </span><a href="https://cloud.google.com/natural-language/docs/samples" style="font-size: 13.3333px; line-height: 1.38; text-decoration: none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">Java samples</span></a><span style="font-style: normal; font-weight: 400; font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); white-space: pre-wrap; background-color: transparent;"> provided. I’m updating the glide.gradle file to define my dependencies, including the google-api-services-language artifact which contains the Cloud NL service. I also needed to depend on the Google API client JARs, and Guava. Here’s what my Gradle dependencies ended up looking like:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">dependencies {<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;compile "com.google.api-client:google-api-client:1.21.0"<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;compile "com.google.api-client:google-api-client-appengine:1.21.0"<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;compile "com.google.api-client:google-api-client-servlet:1.21.0"</span><span style="font-weight:normal;"><br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;compile "com.google.guava:guava:19.0"</span><span style="font-weight:normal;"><br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;compile "com.google.apis:google-api-services-language:v1beta1-rev1-1.22.0"</span><span style="font-weight:normal;"><br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;compile "org.twitter4j:twitter4j-appengine:4.0.4"<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">}</span></pre></span>
          <span style="font-weight:normal;"><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 700; font-style: normal; white-space: pre-wrap; background-color: transparent;">Creating a new route for the mood controller</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">First, let’s create a new route in _routes.groovy to point at the new controller:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">post "/mood", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;forward: &nbsp;"/mood.groovy"</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 700; font-style: normal; white-space: pre-wrap; background-color: transparent;">Coding the mood controller</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">Now let’s code the mood.groovy controller!</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">We’ll need quite a few imports for the Google API client classes, and a couple more for the Cloud Natural Language API:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">import com.google.api.client.googleapis.json.GoogleJsonResponseException<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">import com.google.api.client.http.*<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">import com.google.api.client.googleapis.auth.oauth2.GoogleCredential<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">import com.google.api.client.json.jackson2.JacksonFactory<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">import com.google.api.services.language.v1beta1.*<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">import com.google.api.services.language.v1beta1.model.*</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">We’re retrieving the text as a parameter, with the params map:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">def text = params.txt</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">We’ve set up a few local variables that we’ll use for storing and returning the result of the sentiment analysis invocation:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">def successOutcome = true<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">def reason = ""<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">def polarity = 0<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">def magnitude = 0</span></pre><br><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">Let’s check if we have already got the sentiment analysis for the text parameter in Memcache:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">def cachedResult = memcache[text]</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">If it’s in the cache, we’ll be able to return it, otherwise, it’s time to compute it:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">if (!cachedResult) {<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;try {<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the sentiment analysis calling will be here<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;} catch (Throwable t) {<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;successOutcome = false<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reason = t.message<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;}</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">We’re going to wrap our service call with a bit of exception handling, in case something goes wrong, we want to alert the user of what’s going on. And in lieu of the comment, </span><span style="color: rgb(0, 0, 0); font-family: Roboto; font-size: 14.6667px; font-style: normal; font-weight: 400; white-space: pre-wrap; line-height: normal; background-color: transparent;">we’ll add some logic to analyze the sentiment</span></p></span>
          <span style="font-weight:normal;"><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">We must define the Google credentials allowing us to access the API. Rather than explaining the whole process, please follow the </span><a href="https://cloud.google.com/natural-language/docs/common/auth" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">authentication process</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> explained in the documentation to create an API key and a service account:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def credential = GoogleCredential.applicationDefault.createScoped(CloudNaturalLanguageAPIScopes.all())</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">Now we can create our Cloud Natural Language API caller:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def api = new CloudNaturalLanguageAPI.Builder(<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GoogleNetHttpTransport.newTrustedTransport(),<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JacksonFactory.defaultInstance,<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new HttpRequestInitializer() {<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void initialize(HttpRequest httpRequest) throws IOException {<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;credential.initialize(httpRequest)<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.setApplicationName('TweetMood').build()</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">The caller requires some parameters like an HTTP transport, a JSON factory, and a request initializer that double checks that we’re allowed to make those API calls. Now that the API is set up, we can call it:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;def sentimentResponse = api.documents().analyzeSentiment(<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new AnalyzeSentimentRequest(document: new Document(content: text, type: "PLAIN_TEXT"))<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;).execute()</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">We created an AnalyzeSentimentRequest, passing a Document to analyze </span><span style="color: rgb(0, 0, 0); font-family: Roboto; font-size: 14.6667px; font-style: normal; font-weight: 400; white-space: pre-wrap; line-height: normal; background-color: transparent;">with the text of our tweets</span><span style="color: rgb(0, 0, 0); font-family: Roboto; font-size: 14.6667px; font-style: normal; font-weight: 400; white-space: pre-wrap; line-height: 1.38; background-color: transparent;">. Finally, we execute that request. With the values from the response, we’re going to assign our polarity and magnitude variables:</span></p></span>
          <span style="font-weight:normal;"><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;polarity = sentimentResponse.documentSentiment.polarity<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;magnitude = sentimentResponse.documentSentiment.magnitude</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">Then, we’re going to store the result (successful or not) in Memcache:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;cachedResult = [<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success: successOutcome,<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message: reason,<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;polarity: sentiment?.polarity ?: 0.0,<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;magnitude: sentiment?.magnitude ?: 0.0<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;]</span><span style="font-weight:normal;"><br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;memcache[text] = cachedResult<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">}</span></pre></span>
          <span style="font-weight:normal;"><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">Now, we setup the JSON content type for the answer, and we can render the cachedResult map as a JSON object with the Groovy JSON builder available inside all controllers:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">response.contentType = 'application/json'</span><span style="font-weight:normal;"><br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">json.result cachedResult</span></pre></span>
          <span style="font-weight:normal;"><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 700; font-style: normal; white-space: pre-wrap; background-color: transparent;">Calling our controller from the view</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">A bit of JavaScript &amp; AJAX to the rescue to call the mood controller! I wanted something a bit lighter than jQuery, so I went with </span><a href="http://zeptojs.com/" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">Zepto.js</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> for fun. It’s pretty much the same API as jQuery anyway. Just before the end of the body, you can install Zepto from a CDN with:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">&lt;script src="</span><a href="https://cdnjs.cloudflare.com/ajax/libs/zepto/1.1.6/zepto.min.js" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">https://cdnjs.cloudflare.com/ajax/libs/zepto/1.1.6/zepto.min.js</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">"&gt;&lt;/script&gt;</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">Then, we’ll open up our script tag for some coding:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">&lt;script language="javascript"&gt;<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;Zepto(function(z) {<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// some magic here!<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;});<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">&lt;/script&gt;</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">As the sentiment analysis API call doesn’t support batch requests, we’ll have to call the API for &nbsp;each and every tweet. So let’s iterate over each tweet:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z('.tweet').forEach(function(e, idx) {<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var txt = z(e).data('text');<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// ....<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">Compared to the previous article, I’ve added a data-text attribute to contain the text of the tweet, stripped from hashtags, twitter handles and links (</span><span style="font-weight:normal;" id="docs-internal-guid-f9743aaf-086a-72aa-17a8-d5301a87fc99"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">I’ll let you use some regex magic to scratch those bits of text!</span></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">).</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">Next, I call my mood controller, passing the trimmed text as input, and check if the response is successful:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z.post('/mood', { txt: txt }, function(resp) {<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (resp.result.success) {<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// …<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">I retrieve the polarity and magnitude from the JSON payload returned by my mood controller:</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var polarity = resp.result.polarity;<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var magnitude = resp.result.magnitude;</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">Then I update the background color of my tweets with the following approach. I’m using the HSL color space: Hue, Saturation, Lightness. </span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">The hue ranges from 0 to 360°, and for my tweets, I’m using the first third, from red / 0°, through yellow / 60°, up to green / 120° to represent the polarity, respectively with negative / -1, neutral / 0 and positive / +1. </span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">The saturation (in percents) corresponds to the magnitude. For tweets which are small, the magnitude rarely goes beyond 1, so I simply multiply the magnitude by 100 to get percentages, and floors the results to 100% if it goes beyond.</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">For the lightness, I’ve got a fixed value of 80%, as 100% would always be full white!</span></p><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">Here’s a more explicit visualization of this color encoding with the following graph:</span></p>
           <div>
            <span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"><br></span>
           </div></span>
         </div>
         <div style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;">
          <img src="/media/mood-color-scheme-small.png" style="font-size: 13.3333px;">
         </div>
         <div style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;">
          <span style="font-weight:normal;" id="docs-internal-guid-f9743aaf-07cb-2cd5-d41e-766db4c801ba"><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">So what does the code looks like, with the DOM updates with Zepto?</span></p><br><pre style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var hsl = 'hsl(' +<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Math.floor((polarity + 1) * 60) + ', ' +<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Math.min(Math.floor(magnitude * 100), 100) + '%, ' +<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'80%) !important';<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z(e)<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.css('background-color', hsl)<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.data('polarity', polarity)<br></span><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.data('magnitude', magnitude);</span></pre><br><p dir="ltr" style="line-height:1.38;margin-top:0pt;margin-bottom:0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">For the fun, I’ve also added some smileys to represent five buckets of positivity / negativity (very negative, negative, neutral, positive, very positive), and from 0 to 3 exclamation marks for 4 buckets of magnitude. That’s what you see in the bottom of the tweet cards in the final screenshot:</span></p>
           <div>
            <br>
           </div></span>
         </div>
         <div style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;">
          <img src="/media/example-colored-tweet-small.png">
         </div>
         <div style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;">
          <br>
         </div>
         <div>
          <span id="docs-internal-guid-f9743aaf-07cb-4cdd-b90e-7403da5b8af3"><p dir="ltr" style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 700; font-style: normal; white-space: pre-wrap; background-color: transparent;">Summary</span></p><br><p dir="ltr" style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1.38; margin-top: 0pt; margin-bottom: 0pt;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">But we’re actually done! We have our controller fetching the tweets forwarding to the view template from the last article, and we added a bit of JavaScript &amp; AJAX to call our new mood controller, to display some fancy colors to represent the mood of our tweets, using the brand new </span><a href="https://cloud.google.com/natural-language/docs/" style="text-decoration:none;"><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(17, 85, 204); font-weight: 400; font-style: normal; text-decoration: underline; white-space: pre-wrap; background-color: transparent;">Cloud Natural Language API</span></a><span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;">.</span></p>
           <div style="font-family: Arial, Verdana; font-size: 10pt; font-style: normal; font-variant: normal; font-weight: normal; line-height: normal;">
            <span style="font-size: 14.6667px; font-family: Roboto; color: rgb(0, 0, 0); font-weight: 400; font-style: normal; white-space: pre-wrap; background-color: transparent;"><br></span>
           </div>
           <div>
            <span id="docs-internal-guid-f9743aaf-07e0-ff15-10c5-e12453cbacee"><span style="background-color: transparent;"><span style="color: rgb(0, 0, 0); font-family: Roboto; font-size: 14.6667px; line-height: normal; white-space: pre-wrap;">When playing with sentiment analysis, I was generally on the same opinion regarding sentiment of the tweets, but I was sometimes surprised by the outcome. It’s hard for short bursts of text like tweets to decipher things like irony, sarcasm, etc, and a particular tweet might appear positive when reality it isn’t, and vice versa. Sentiment analysis is probably not an exact science, and you need more context to decide what’s really positive or negative. </span></span></span>
           </div>
           <div>
            <span><span style="background-color: transparent;"><span style="color: rgb(0, 0, 0); font-family: Roboto; font-size: 14.6667px; line-height: normal; white-space: pre-wrap;"><br></span></span></span>
           </div>
           <div>
            <span><span style="background-color: transparent;"><span style="color: rgb(0, 0, 0); font-family: Roboto; font-size: 14.6667px; line-height: normal; white-space: pre-wrap;">Without even speaking of sarcasm or irony, sometimes certain tweets were deemed negative when some particular usually negative words appeared: a “no” or “not” is not necessarily negative when it’s negating something already negative, turning it into something more positive (“it’s not uncool”). For longer text, the general sentiment seems more accurate, so perhaps it’s more appropriate to use sentiment analysis in such cases than on short snippets.</span></span></span>
           </div></span>
         </div> 
        </div> 
        <div class="post-meta">
          In categories: 
         <a href="/category/Gaelyk">Gaelyk</a> 
         <a href="/category/Google Cloud Platform">Google Cloud Platform</a> 
         <a href="/category/Groovy">Groovy</a> 
        </div> 
       </div> 
       <div class="text-center"> 
        <!-- Place this tag where you want the +1 button to render --> 
        <g:plusone count="false"></g:plusone> 
        <span class="st_twitter_large"></span> 
        <span class="st_dzone_large"></span> 
        <span class="st_delicious_large"></span> 
        <span class="st_reddit_large"></span> 
        <span class="st_linkedin_large"></span> 
        <span class="st_google_reader_large"></span> 
        <span class="st_facebook_large"></span> 
        <span class="st_email_large"></span> 
        <span class="st_sharethis_large"></span> 
        <p>&nbsp;</p> 
       </div> 
       <div class="archive-separator"></div> 
       <div id="comments"> 
        <script>
                            var idcomments_acct = '6315ecb7a0c4effe19c78c6858ab628e';
                            var idcomments_post_id = 'sentiment-analysis-on-tweets';
                            var idcomments_post_url;
                        </script> 
        <span id="IDCommentsPostTitle" style="display:none"></span> 
        <script type="text/javascript" src="http://www.intensedebate.com/js/genericCommentWrapperV2.js"></script> 
       </div> 
      </div> 
     </div> 
     <div id="sidebar-wrapper"> 
      <div id="sidebar"> 
       <div class="box"> 
        <div class="box-title">
         Categories
        </div> 
        <div class="box-content"> 
         <ul class="nice-list"> 
          <li> <a href="/category/Conference" alt="Conference related posts">Conference (58)</a> </li> 
          <li> <a href="/category/Cooking" alt="Cooking - recettes de cuisine">Cooking (3)</a> </li> 
          <li> <a href="/category/DSL" alt="Domain-Specific Languages">DSL (7)</a> </li> 
          <li> <a href="/category/French" alt="En français dans le texte">French (21)</a> </li> 
          <li> <a href="/category/Gaelyk" alt="The Gaelyk lightweight Groovy toolkit for Google App Engine">Gaelyk (18)</a> </li> 
          <li> <a href="/category/Geek" alt="Geeky things, techno-related">Geek (54)</a> </li> 
          <li> <a href="/category/Google Cloud Platform" alt="Posts on the Google Cloud Platform products and services">Google Cloud Platform (39)</a> </li> 
          <li> <a href="/category/Groovy" alt="The dynamic language for the JVM">Groovy (315)</a> </li> 
          <li> <a href="/category/Groovy Weekly" alt="Groovy Weekly column">Groovy Weekly (77)</a> </li> 
          <li> <a href="/category/Web APIs" alt="About the Web API economy and ecosystem">Web APIs (2)</a> </li> 
         </ul> 
        </div> 
       </div> 
       <div class="box"> 
        <div class="box-title">
         Resources
        </div> 
        <div class="box-content"> 
         <ul class="nice-list"> 
          <li><a href="http://groovy.codehaus.org">Groovy</a> dynamic language</li> 
          <li><a href="http://grails.org">Grails</a> web application framework</li> 
          <li><a href="http://gaelyk.appspot.com">Gaelyk</a> lightweight toolkit for GAE</li> 
          <li><a href="http://www.gradle.org">Gradle</a> project automation</li> 
          <li><a href="http://gpars.codehaus.org/">GPars</a> concurrency library</li> 
          <li><a href="http://griffon.codehaus.org/">Griffon</a> desktop app framework</li> 
          <li><a href="http://spockframework.org/">Spock</a> testing framework</li> 
          <li><a href="http://codenarc.sourceforge.net/">CodeNarc</a> static code analysis</li> 
         </ul> 
        </div> 
       </div> 
       <div class="box nobborder"> 
        <div class="box-title">
         About
        </div> 
        <div class="box-content"> 
         <p> <a href="/page/contact-me">Guillaume Laforge</a> is blogging here about whatever comes to his mind, but mostly about technology, and especially topics related to the <a href="http://groovy.codehaus.org">Groovy</a> dynamic language, the <a href="http://gaelyk.appspot.com">Gaelyk</a> lightweight toolkit for developing applications for Google App Engine, and all the other cool things in the Java and Groovy ecosystem. </p> 
        </div> 
       </div> 
      </div> 
     </div> 
     <div class="clearer">
      &nbsp;
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="footer-wrapper"> 
   <div class="center-wrapper"> 
    <div id="footer"> 
     <div class="left"> 
      <a href="/">Home</a> 
      <span class="text-separator">|</span> 
      <a href="/archives">Archives</a> 
      <span class="text-separator">|</span> 
      <a href="/search">Search</a> 
      <span class="text-separator">|</span> 
      <a href="/admin/posts">Administration</a> 
      <span class="text-separator">|</span> 
      <a href="/page/contact-me">Contact me</a> 
      <span class="text-separator">|</span> 
      <a href="/page/about-this-site">About this site</a> 
     </div> 
     <div class="right"> 
      <a href="#">Top ^</a> 
     </div> 
     <div class="clearer">
      &nbsp;
     </div> 
    </div> 
   </div> 
  </div> 
  <div id="bottom"> 
   <div class="center-wrapper"> 
    <div class="left">
      © 2012 Guillaume Laforge 
     <span class="text-separator">|</span> The views and opinions expressed here are mine and don't reflect the ones from my employer. 
    </div> 
    <div class="right"> 
     <a href="http://templates.arcsin.se/">Website template</a> by 
     <a href="http://arcsin.se/">Arcsin</a> 
    </div> 
    <div class="clearer">
     &nbsp;
    </div> 
   </div> 
  </div>  
 </body>
</html>