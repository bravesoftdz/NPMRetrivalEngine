<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta name="description" content="Test your JavaScript, CSS, HTML or CoffeeScript online with JSFiddle code editor."> 
  <meta name="keywords" content="online javascript editor, testing javascript online, online ide, online code editor, html, css, coffeescript, scss online editor"> 
  <meta name="author" content="JSFiddle"> 
  <meta name="copyright" content="share alike"> 
  <!-- <meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests"> --> 
  <meta name="robots" content="index, follow"> 
  <meta name="googlebot" content="index, follow"> 
  <meta name="google-site-verification" content="9m4aWTtDLfQ1kJNm3NtNsCrtpsOx_QoOPQRJ7jAwup8"> 
  <!--meta name="viewport" content="width=device-width, maximum-scale=0.5" /--> 
  <meta name="apple-mobile-web-app-capable" content="yes"> 
  <meta name="apple-touch-fullscreen" content="yes"> 
  <script type="text/javascript" src="/js/_dist-editor.js?update_14_05_2017_1"></script> 
  <link rel="stylesheet" type="text/css" href="/css/_dist-editor.css?update_14_05_2017_1"> 
  <link rel="stylesheet" type="text/css" href="/css/light.css?update_14_05_2017_1"> 
  <script type="text/javascript">
        var fiddleOptions = {
          example_id: "291849650",
          exampleURL: "//jsfiddle.net/bkanber/DHU7J/",
          slug: "DHU7J",
          userId: "None"
        };
        var csspath = "/css/",
          jspath = "/js/",
          imgpath = "/img/",
          mediapath = "/mooshellmedia/",
          codemirrorpath = "/codemirror/",
          panel_html = 'html',
          panel_css = 'css',
          panel_js = 'javascript',
          makefavouritepath = "/_make_favourite/",
          example_server = "//jsfiddle.net",
          username = "",
          static_hash = "update_14_05_2017_1",
          csrfToken = Cookie.read('csrftoken'),
          editor_save = "",
          mooshell,
          preload_resources;

        

        Layout.skin = "light";// "light"
        window.addEvent('domready', function() {
          if (panel_js != 'javascript' && $('jslint')) {
            $('jslint').getParent('li').hide();
          }

          $extend(Layout, new Events());
          mooshell = new MooShellActions({
            example_id: fiddleOptions.example_id,
            exampleURL: fiddleOptions.exampleURL,
            exampleSaveUrl: '/_save/',
            // sendCallbackURL: '',
            loadDependenciesURL: '/_get_dependencies/{lib_id}/',
            loadLibraryVersionsURL: '/_get_library_versions/{group_id}/'
          });
          new MooShellEditor.JS(document.id('id_code_js'), {
            language: panel_js
          }); // add user defined parameters
          new MooShellEditor.HTML(document.id('id_code_html'), {
            language: panel_html
          }); // add user defined parameters
          new MooShellEditor.CSS(document.id('id_code_css'), {
            language: panel_css
          }); // add user defined parameters
          Layout.render();

          

          // show editors and content when the last editor loads
          // this will prevent flickering, plus looks nice
          document.id('content').setStyle('opacity', 1);

          // always keep this at the bottom
          $$('select.panelChoice').each(function(sel) {
            this.switchLanguage(sel);
          }, mooshell);
        });
      </script> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  var GA_LOCAL_STORAGE_KEY = 'ga:clientId';
  if (window.localStorage) {
    ga('create', 'UA-366077-13', {
      'storage': 'none',
      'clientId': localStorage.getItem(GA_LOCAL_STORAGE_KEY)
    });
    ga(function(tracker) {
      localStorage.setItem(GA_LOCAL_STORAGE_KEY, tracker.get('clientId'));
    });
    ga('send', 'pageview', '/[user]/[fiddle]/'); // where `url_structure` is for example `/[user]/[fiddle]/[revision]/embedded/js,css/`
  }
</script> 
  <!-- Hotjar Tracking Code for jsfiddle.net --> 
  <!-- <script>
        (function(h,o,t,j,a,r){
          h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
          h._hjSettings={hjid:13981,hjsv:5};
          a=o.getElementsByTagName('head')[0];
          r=o.createElement('script');r.async=1;
          r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
          a.appendChild(r);
        })(window,document,'//static.hotjar.com/c/hotjar-','.js?sv=');
      </script> --> 
  <script>
      var HW_config = {
        selector: ".changelog-badge",
        account: "1xGMJQ"
      };
    </script> 
  <script async src="//cdn.headwayapp.co/widget.js"></script> 
  <link rel="icon" href="/favicon.png"> 
  <link href="//fonts.googleapis.com/css?family=Inconsolata" rel="stylesheet" type="text/css"> 
  <!-- <link href="//fonts.googleapis.com/css?family=Lato:400|Inconsolata" rel="stylesheet" type="text/css"> --> 
  <title>Sentiment Analysis - JSFiddle</title> 
 </head> 
 <body> 
  <h1>Test your JavaScript, CSS, HTML or CoffeeScript online with JSFiddle code editor.</h1> 
  <h2>online javascript editor, testing javascript online, online ide, online code editor, html, css, coffeescript, scss online editor</h2> 
  <form method="post" id="show-result" target="result" action="//fiddle.jshell.net/_display/"> 
   <div style="display:none">
    <input type="hidden" name="csrfmiddlewaretoken" value="zKtAK4qDspNGUi5qdyqDWmaK3YrC3NVB">
   </div> 
   <div id="header"> 
    <div id="branding"> 
     <p id="name" class="changelog-badge"><a title="JSFiddle " href="/" id="home" class="drop-target">JSFiddle</a></p> 
    </div> 
    <div id="actions"> 
     <nav class="actionCont collapsed"> 
      <div class="actionItem"> 
       <a class="aiButton" id="run" title="Run (CTRL + Return)" href="#run"><i class="bts bt-play"></i>Run</a> 
      </div> 
      <div class="actionItem hidden"> 
       <a class="aiButton" id="savenew" title="Save new Fiddle (CTRL + S)" href="#save"><i class="bts bt-pencil"></i>Save</a> 
      </div> 
      <div class="actionItem visible"> 
       <a class="aiButton" id="update" title="Update (CTRL + S)" href="#update"><i class="bts bt-pencil"></i>Update</a> 
      </div> 
      <div class="actionItem visible"> 
       <a class="aiButton" id="fork" title="Fork into a new Fiddle" href="#fork"><i class="bts bt-fork"></i>Fork</a> 
      </div> 
      <div class="actionItem"> 
       <a class="aiButton" id="tidy" title="Tidy messy code" href="#tidy"><i class="bts bt-align-left"></i>Tidy</a> 
      </div> 
      <!-- <div class="actionItem">
      <a class="aiButton" id="showjscode" title="Show JavaScript code" href="#showjs"><i class="bts bt-code"></i>Show JS</a>
    </div --> 
      <div class="actionItem"> 
       <a class="aiButton" id="collaborate" title="Collaborate on code" href="#collaborate"><i class="bts bt-commenting"></i>Collaborate</a> 
      </div> 
     </nav> 
     <ul class="actionCont dropdown"> 
      <li class="actionItem visible"> <a class="aiButton dropdownTrigger" id="share" title="Embed this Fiddle" href="#embed">Embed<i class="bts bt-angle-down rightIcon"></i></a> 
       <div class="dropdownCont center"> 
        <div class="dcWrapper embed"> 
         <div id="creator"> 
          <section> 
           <h3>Tabs:</h3> 
           <div class="inlineFields"> 
            <label class="inputCont_checkbox checkboxCont"> <input type="checkbox" name="tabs" value="js" checked> <span class="checkbox"><i class="bts bt-check"></i></span> JavaScript </label> 
            <label class="inputCont_checkbox checkboxCont"> <input type="checkbox" name="tabs" value="html" checked> <span class="checkbox"><i class="bts bt-check"></i></span> HTML </label> 
            <label class="inputCont_checkbox checkboxCont"> <input type="checkbox" name="tabs" value="css" checked> <span class="checkbox"><i class="bts bt-check"></i></span> CSS </label> 
            <label class="inputCont_checkbox checkboxCont"> <input type="checkbox" name="tabs" value="result" checked> <span class="checkbox"><i class="bts bt-check"></i></span> Result </label> 
           </div> 
           <!-- /inlineFields --> 
          </section> 
          <section class="noborder"> 
           <h3>Visual:</h3> 
           <div class="inlineFields"> 
            <label class="inputCont_checkbox checkboxCont"> <input type="radio" name="skin" value="light" checked> <span class="radio"></span> Light </label> 
            <label class="inputCont_checkbox checkboxCont"> <input type="radio" name="skin" value="dark"> <span class="radio"></span> Dark </label> 
           </div> 
           <!-- /inlineFields --> 
           <label class="inputCont_text"> <input type="text" name="accentColor" maxlength="7" placeholder="Accent color"> </label> 
           <label class="inputCont_text"> <input type="text" name="fontColor" maxlength="7" placeholder="Font color"> </label> 
           <label class="inputCont_text"> <input type="text" name="menuColor" maxlength="7" placeholder="Menu background"> </label> 
           <label class="inputCont_text"> <input type="text" name="bodyColor" maxlength="7" placeholder="Code background"> </label> 
          </section> 
          <section class="noborder"> 
           <h3>Embed code <a href="#" class="codeTypeToggle">Prefer iframe?</a>:</h3> 
           <div class="embedCodeWrap"> 
            <textarea class="embedCode" id="share_embedded_dropdown" data-view="embed" data-pattern-value="<script async src=&quot;{embedSrc}&quot;></script>">
&lt;script async src="{embedSrc}"&gt;&lt;/script&gt;
</textarea> 
           </div> 
           <!-- /embedCodeWrap --> 
           <div class="embedCodeWrap hidden"> 
            <textarea class="embedCode" data-view="embedded" data-pattern-value="<iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;{embedSrc}&quot; allowfullscreen=&quot;allowfullscreen&quot; frameborder=&quot;0&quot;></iframe>">
&lt;iframe width="100%" height="300" src="{embedSrc}" allowfullscreen frameborder="0"&gt;&lt;/iframe&gt;
</textarea> 
            <p><strong>No autoresizing</strong> to fit the code</p> 
            <p><strong>Render blocking</strong> of the parent page</p> 
           </div> 
           <!-- /embedCodeWrap --> 
          </section> 
         </div> 
         <!-- /creator --> 
         <div id="preview"></div> 
         <!-- /preview --> 
        </div> 
        <!-- /dcWrapper --> 
       </div> 
       <!-- /dropdownCont --> </li> 
      <!-- /actionItem --> 
     </ul> 
     <!-- /actionCont --> 
     <ul class="actionCont dropdown right"> 
      <li class="actionItem hidden draftTriggerCont"> <a class="aiButton dropdownTrigger applyDraft" href="#"> <i class="bts bt-flag"></i>Your fiddle has an unsaved draft </a> 
       <div class="dropdownCont"> 
        <div class="dcWrapper diffCont"> 
         <h4>Diff between the <strong>saved</strong> and <strong>locally drafted</strong> fiddle:</h4> 
         <div class="diffPanels"> 
          <div class="diffWrap" id="diff-html"></div> 
          <div class="diffWrap" id="diff-js"></div> 
          <div class="diffWrap" id="diff-css"></div> 
         </div>
         <!-- /diffCont --> 
         <p><a class="apply" href="#" id="apply-draft">Apply local draft version</a> or <a href="#" id="discard-draft">discard it</a></p> 
        </div>
        <!-- /actionItem --> 
       </div>
       <!-- /dcWrapper --> </li> 
      <!-- /actionItem --> 
      <li class="actionItem"> <a class="aiButton dropdownTrigger" href="#editor-options"> <i class="bts bt-gear"></i>Settings <i class="bts bt-angle-down rightIcon"></i> </a> 
       <div class="dropdownCont"> 
        <div class="dcWrapper" id="editor-options"> 
         <p> <label class="checkboxCont"> <input type="checkbox" name="autoCloseTags" checked> <span class="checkbox"><i class="bts bt-check"></i></span> Auto-close HTML tags </label> </p> 
         <p> <label class="checkboxCont"> <input type="checkbox" name="lineNumbers" checked> <span class="checkbox"><i class="bts bt-check"></i></span> Show line numbers </label> </p> 
         <p> <label class="checkboxCont"> <input type="checkbox" name="lineWrapping" checked> <span class="checkbox"><i class="bts bt-check"></i></span> Enable line wrapping </label> </p> 
         <p> <label class="checkboxCont"> <input type="checkbox" name="indentWithTabs"> <span class="checkbox"><i class="bts bt-check"></i></span> Indent with tabs </label> </p> 
         <div class="selectPair"> 
          <span class="label">Indent size:</span> 
          <div class="selectCont"> 
           <select name="indentUnit"> <option value="2">2 spaces</option> <option value="3">3 spaces</option> <option value="4">4 spaces</option> </select> 
           <label><i class="bts bt-angle-down"></i></label> 
          </div> 
          <!-- /selectCont --> 
         </div> 
         <!-- /selectPair --> 
         <div class="selectPair"> 
          <span class="label">Key map:</span> 
          <div class="selectCont"> 
           <select name="keyMap"> <option value="default">Default</option> <option value="sublime">Sublime Text</option> <option value="vim">VIM</option> <option value="emacs">EMACS</option> </select> 
           <label><i class="bts bt-angle-down"></i></label> 
          </div> 
          <!-- /selectCont --> 
         </div> 
         <!-- /selectPair --> 
        </div> 
       </div> </li> 
      <!-- /actionItem --> 
      <li class="actionItem noIcon"><a class="aiButton" id="login" title="Login" href="/user/login/"><i class="bts bt-smile"></i>Sign in</a></li> 
     </ul> 
    </div> 
    <div id="progressbar">
     <div class="pb"></div>
    </div> 
   </div> 
   <div id="sidebar"> 
    <section id="s-cont"> 
     <h3 id="author_toggler" class="toggler">Fiddle Author</h3> 
     <div class="element"> 
      <div class="elementBody"> 
       <div class="ebCont"> 
        <div class="avatar"> 
         <img src="//www.gravatar.com/avatar/ea3d702936ff752b2c52376b4460192c/?default=&amp;s=80" height="40" width="40"> 
         <a title="See public fiddles" href="/user/bkanber/fiddles/"> bkanber </a> 
        </div> 
        <!-- /avatar --> 
        <ul class="userDetails"> 
        </ul> 
        <!-- /userDetails --> 
       </div> 
       <!-- /ebCont --> 
      </div> 
      <!-- /elementBody --> 
     </div> 
     <!-- /element --> 
     <h3 id="about_toggler" class="toggler" title="Posted on 03 Feb 2017">Fiddle Meta</h3> 
     <div class="element"> 
      <div class="elementBody"> 
       <div class="ebCont"> 
        <p> <label> <input id="id_title" type="text" name="title" maxlength="255" value="Sentiment Analysis" placeholder="Untitled fiddle"> </label> </p> 
        <p> <label> <textarea id="id_description" rows="10" cols="40" name="description" placeholder="No description">A simple Sentiment Analysis example using a Naive Bayes Classifier. See http://burakkanber.com/blog for details.</textarea> </label> </p> 
        <p class="metaInfo">Add title to make the fiddle public.</p> 
       </div> 
      </div> 
     </div> 
     <h3 class="toggler filled" id="resources_toggler"> External Resources <em>5</em> </h3> 
     <div class="element" id="resources_element"> 
      <div class="elementBody"> 
       <div class="ebCont"> 
        <div id="external-resources-form"> 
         <input id="external_resource" type="text" value="" placeholder="JavaScript/CSS URI"> 
         <a id="add_external_resource" class="submit" href="#" title="Add resource"><i class="bts bt-plus-circle"></i></a> 
        </div> 
        <input type="hidden" value="" id="external_resources_id" name="add_external_resources"> 
        <ul id="external_resources_list"> 
         <script type="text/javascript">var resources = [];</script> 
         <li id="external_resource_2288128"> <a class="filename" target="_blank" href="http://burakkanber.com/~/bayes/negative.js/" title="http://burakkanber.com/~/bayes/negative.js/"> </a> <a onclick="remove_resource(2288128)" class="remove"> <i class="bts bt-minus-circle"></i> </a> </li> 
         <script type="text/javascript">resources.push(2288128)</script> 
         <li id="external_resource_2288130"> <a class="filename" target="_blank" href="https://burakkanber.com/~/bayes/negative.js" title="https://burakkanber.com/~/bayes/negative.js"> negative.js </a> <a onclick="remove_resource(2288130)" class="remove"> <i class="bts bt-minus-circle"></i> </a> </li> 
         <script type="text/javascript">resources.push(2288130)</script> 
         <li id="external_resource_2288132"> <a class="filename" target="_blank" href="https://burakkanber.com/~/bayes/positive.js" title="https://burakkanber.com/~/bayes/positive.js"> positive.js </a> <a onclick="remove_resource(2288132)" class="remove"> <i class="bts bt-minus-circle"></i> </a> </li> 
         <script type="text/javascript">resources.push(2288132)</script> 
         <li id="external_resource_2288134"> <a class="filename" target="_blank" href="https://burakkanber.com/~/bayes/PorterStemmer1980.min.js" title="https://burakkanber.com/~/bayes/PorterStemmer1980.min.js"> PorterStemmer1980.min.js </a> <a onclick="remove_resource(2288134)" class="remove"> <i class="bts bt-minus-circle"></i> </a> </li> 
         <script type="text/javascript">resources.push(2288134)</script> 
         <li id="external_resource_2288136"> <a class="filename" target="_blank" href="https://burakkanber.com/~/bayes/bayes.js" title="https://burakkanber.com/~/bayes/bayes.js"> bayes.js </a> <a onclick="remove_resource(2288136)" class="remove"> <i class="bts bt-minus-circle"></i> </a> </li> 
         <script type="text/javascript">resources.push(2288136)</script> 
        </ul> 
       </div> 
      </div> 
     </div> 
     <script type="text/javascript">
  var default_text = 'JavaScript/CSS URL',
      add_external_resource_url = "/_add_external_resource/";
</script> 
     <h3 class="toggler">AJAX Requests</h3> 
     <div class="element"> 
      <div class="elementBody"> 
       <div class="ebCont"> 
        <p><code>/echo</code> simulates AJAX calls:<br> JSON: <code>/echo/json/</code><br> JSONP: <code>//jsfiddle.net/echo/jsonp/</code><br> HTML: <code>/echo/html/</code><br> XML: <code>/echo/xml/</code> </p> 
        <p>See <a href="http://doc.jsfiddle.net/use/echo.html" target="_new">docs</a> for more info.</p> 
       </div> 
      </div> 
     </div> 
     <h3 class="toggler">Legal, Credits and Links</h3> 
     <div class="element"> 
      <div class="elementBody"> 
       <div class="ebCont"> 
        <p class="maintainers">Created and maintained by <a title="Piotr's twitter" href="http://twitter.com/zalun" target="_blank">Piotr</a> and <a title="UX and UI Designer" href="http://twitter.com/oskar" target="_blank">@oskar</a>.</p> 
        <p>Hosted on <a href="https://m.do.co/c/52e7a0ad196d" target="_blank"><strong>DigitalOcean</strong></a></p> 
        <p><strong>License</strong></p> 
        <p>All code belongs to the poster and no license is enforced.</p> 
        <p>JSFiddle or its authors are not responsible or liable for any loss or damage of any kind during the usage of provided code.</p> 
        <p><strong>Links</strong></p> 
        <p> <a href="https://jsfiddle.net/about" target="_blank">About JSFiddle</a><br> 
         <!-- <a href="http://doc.jsfiddle.net/" target="_blank">Docs</a><br> --> <a href="http://status.jsfiddle.net" target="_blank">Status page</a> by <a href="https://updown.io/r/bzxdq" target="_blank">updown.io</a> </p> 
       </div> 
      </div> 
     </div> 
     <style media="screen">
  .maintainers {
    position: absolute;
    top: -900em;
    left: -900em;
  }
</style> 
     <div id="roadmap"> 
      <a href="https://trello.com/b/LakLkQBW/jsfiddle-roadmap" target="_blank">JSFiddle Roadmap <span>suggest and vote for features</span></a> 
     </div> 
    </section> 
    <section id="s-bottom"> 
     <div class="twitterCont"> 
      <!-- <script async type="text/javascript" src="//cdn.carbonads.com/carbon.js?zoneid=1673&serve=C6AILKT&placement=jsfiddlenet" id="_carbonads_js"></script> --> 
      <script async type="text/javascript" src="//crbcdn.jsfiddle.net/carbon.js?zoneid=1673&amp;serve=C6AILKT&amp;placement=jsfiddlenet&amp;cd=crbsrv.jsfiddle.net" id="_carbonads_js"></script> 
     </div> 
     <div id="keep-us-running"> 
      <p>Like JSFiddle?</p> 
      <p>Keep us running by whitelisting JSFiddle in your ad blocker.</p> 
      <p>We're serving quality, tech-related ads only.</p> 
      <p>Thank you!</p> 
     </div> 
     <script type="text/javascript">
              window.onload = function(){
                setTimeout(function(){
                  var info = document.getElementById("keep-us-running");
                  var ads = document.getElementById("carbonads");

                  if (ads === null){
                    info.className = "show";
                    info.addEvent("click", function(){
                      info.className = "";
                    });
                  }
                }, 2000)
              }
            </script> 
    </section> 
   </div> 
   <div id="content"> 
    <input type="hidden" name="version" value="77" id="id_version"> 
    <input type="hidden" id="id_slug" name="slug" value="DHU7J"> 
    <fieldset class="column left"> 
     <div class="window top" id="panel_html" data-panel_type="html"> 
      <textarea id="id_code_html" rows="10" cols="40" name="code_html">&lt;body&gt;
    &lt;p&gt;Training progress: &lt;span id="trainingProgressValue"&gt;0&lt;/span&gt;%&lt;/p&gt;
    &lt;div class="progress-wrapper"&gt;
        &lt;div class="progress" id="trainingProgressBar"&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;p&gt;Test results: &lt;span id="testResultsValue"&gt;0&lt;/span&gt;% accuracy&lt;/p&gt;
    &lt;div class="progress-wrapper"&gt;
        &lt;div class="progress" id="testResultsBar"&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;p&gt;Test your own:&lt;/p&gt;
    &lt;textarea id="testBox" placeholder="eg: The director is a master at manupulating your emotions, making you laugh and cry."&gt;&lt;/textarea&gt;
    &lt;button id="testButton"&gt;Guess Sentiment&lt;/button&gt;
    &lt;p id="testResult" style="display:none;"&gt;Guess: &lt;span id="testResultLabel"&gt;&lt;/span&gt; (&lt;span id="testResultProbability"&gt;&lt;/span&gt;% probability)&lt;/p&gt;
&lt;/body&gt;</textarea> 
      <a href="#" class="windowLabel" data-panel="html"> <span class="label">HTML</span><i class="bts bt-gear"></i> </a> 
     </div> 
     <div class="handler handler_horizontal"></div> 
     <div class="window bottom" id="panel_js" data-panel_type="javascript"> 
      <textarea id="id_code_js" rows="10" cols="40" name="code_js">/*
The following is not free software. You may use it for educational purposes, but you may not redistribute or use it commercially.
(C) All Rights Reserved, Burak Kanber 2013
*/

// Define a couple of global variables so we can easily inspect data points we guessed incorrectly on.
var incorrectNegs = [];
var incorrectPos = [];

// A list of negation terms that we'll use to flag nearby tokens
var negations = new RegExp("^(never|no|nothing|nowhere|noone|none|not|havent|hasnt|hadnt|cant|couldnt|shouldnt|wont|wouldnt|dont|doesnt|didnt|isnt|arent|aint)$");

// Use 85% of our data set for training, the remaining 15% will be used for testing.
var length = negatives.length;
var split = Math.floor(0.85 * length);

// Don't spit out console.log stuff during training and guessing. 
Bayes.debug = false;

// Close-proximity negation-marked unigram ("eMSU")
Bayes.tokenizer = function (text) {
    // Standard unigram tokenizer; lowercase, strip special characters, split by whitespace
    text = Bayes.unigramTokenizer(text);
    // Step through our array of tokens
    for (var i = 0, len = text.length; i &lt; len; i++) {
        // If we find a negation word, add an exclamation point to the word preceding and following it.
        if (text[i].match(negations)) {
            if (typeof text[i + 1] !== 'undefined') text[i + 1] = "!" + text[i + 1];
            if (typeof text[i - 1] !== 'undefined') text[i - 1] = "!" + text[i - 1];
        }
    }
    // Porter Stemmer; this reduces entropy a bit
    text = text.map(function (t) { return stemmer(t); });
    return text;
};

// Set the storage engine to in-memory; this example has too much data for localStorage.
Bayes.storage = Storage;

// Runs a single training and testing experiment.
function go() {

    // Start from scratch.
    var correct = 0;
    var incorrect = 0;
    var skipped = 0;
    var trainingBar = document.getElementById("trainingProgressBar");
    var trainingVal = document.getElementById("trainingProgressValue");
    var trainingPct = 0;
    var resultsBar = document.getElementById("testResultsBar");
    var resultsVal = document.getElementById("testResultsValue");
    var resultsPct = 0.0;
    
    Bayes.storage._data = {};

    // Shuffle our arrays. I'm sure some really astute CS genius will find a flaw with this ;)
    negatives.sort(function () { return Math.random() - 0.5; });
    positives.sort(function () { return Math.random() - 0.5; });

    // First we train. Walk through the data until we hit our split/pivot point.
    // Unfortunately our progress bar doesn't work because of the browser's JS event loop,
    // And retooling to use animation frames is more annoying than it's worth.
    
    for (var i = 0; i &lt; split; i++) {
        Bayes.train(negatives[i], 'negative');
        Bayes.train(positives[i], 'positive');
        if (i % 500 === 0) {       
            // Next three lines are largely useless.
            trainingPct = Math.round(i*100 / split);
            trainingVal.innerHTML = trainingPct;
            trainingBar.style.width = trainingPct + '%';
            // If you want live updates, look at the console.
            console.log("Training progress: " + trainingPct + "%");
        }
    }
    
    // Clean up the progress bar for the final state.
    trainingPct = 100;
    trainingVal.innerHTML = trainingPct;
    trainingBar.style.width = trainingPct + '%';

    // Now we guess. Look at the remainder of the data set and test each of those.
    for (var i = split; i &lt; length; i++) {
        var negResult = Bayes.extractWinner(Bayes.guess(negatives[i]));
        var posResult = Bayes.extractWinner(Bayes.guess(positives[i]));

        // Probability less than 75%? Skip it. No sense in making guesses that we know are uncertain.
        if (negResult.score &lt; 0.75) skipped++;
        else if (negResult.label === 'negative') correct++;
        else {
            incorrect++;
            incorrectNegs.push(negatives[i]);
        }

        // Repeat for the corresponding positive data point.
        if (posResult.score &lt; 0.75) skipped++;
        else if (posResult.label === 'positive') correct++;
        else {
            incorrect++;
            incorrectPos.push(positives[i]);
        }
    }

    // Show the accuracy for this training/testing run.
    resultsPct = Math.round(10000 * correct / (correct + incorrect)) / 100;
    resultsBar.style.width = Math.round(resultsPct) + '%';
    resultsVal.innerHTML = resultsPct;
    return resultsPct;
}

document.getElementById("testButton").addEventListener('click', function() {
    var text = document.getElementById("testBox").value;
    var result = Bayes.extractWinner(Bayes.guess(text));
    document.getElementById("testBox").value = '';
    document.getElementById("testResultLabel").innerHTML = result.label;
    document.getElementById("testResultProbability").innerHTML = Math.round(100*result.score);
    document.getElementById("testResult").style.display = 'block';
});

setTimeout(go, 500);

// We're not using this function in the public example, but this is a simple helper to run 30 tests at a time and record and average their scores.
function run() {
    var n = 30;
    var i = n;
    var scores = [];
    var sum = 0;
    while (i--) scores.push(go());
    scores.forEach(function (score) {
        sum += score;
    });

    console.log(scores);
    console.log("Average " + sum / n);
}</textarea> 
      <a href="#" class="windowLabel" data-panel="js"> <span class="label">JavaScript</span><i class="bts bt-gear"></i> </a> 
     </div> 
     <div class="shim"></div> 
    </fieldset> 
    <div class="handler" id="handler_vertical"></div> 
    <fieldset class="column right"> 
     <div class="window top" id="panel_css" data-panel_type="css"> 
      <textarea id="id_code_css" rows="10" cols="40" name="code_css">body, textarea {
    font-family: Helvetica, Arial, sans-serif;
    width: 300px;
    margin: 10px auto;
    font-size: 13px;
}
.progress-wrapper {
    border: 1px solid #CCC;
    height: 15px;
    width: 100%;
}
.progress {
    background: #DDD;
    height: 100%;
    width: 0%;
}

textarea, button {
    border: 1px solid #CCC;
}

textarea {
    padding: 10px;
    resize: none;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    margin-top: 0;
}

button {
    background: white;
    padding: 5px;
    cursor: pointer;
}
</textarea> 
      <a href="#" class="windowLabel" data-panel="css"> <span class="label">CSS</span><i class="bts bt-gear"></i> </a> 
     </div> 
     <div class="handler handler_horizontal"></div> 
     <div id="result" class="window bottom"> 
      <iframe name="result" sandbox="allow-forms allow-scripts allow-same-origin allow-modals allow-popups" allowfullscreen frameborder="0" src="//fiddle.jshell.net/bkanber/DHU7J/show/"></iframe> 
     </div> 
     <div class="shim"></div> 
    </fieldset> 
    <div class="windowSettings html"> 
     <h3>Language</h3> 
     <div class="selectCont"> 
      <select name="panel_html" class="panelChoice" id="panel_html_choice" disabled data-panel_id="id_code_html" data-panel="html"> <option data-mime-type="text/html" value="0" selected>HTML</option> </select> 
      <label for="js_lib"><i class="bts bt-angle-down"></i></label> 
     </div> 
     <!-- /selectCont --> 
     <h3>Doctype</h3> 
     <div class="selectCont"> 
      <select name="doctype"> <option id="dtd_XHTML 1.0 Strict" value="1">XHTML 1.0 Strict</option> <option id="dtd_XHTML 1.0 Transitional" value="2">XHTML 1.0 Transitional</option> <option selected id="dtd_HTML 5" value="3">HTML 5</option> <option id="dtd_HTML 4.01 Strict" value="4">HTML 4.01 Strict</option> <option id="dtd_HTML 4.01 Transitional" value="5">HTML 4.01 Transitional</option> <option id="dtd_HTML 4.01 Frameset" value="6">HTML 4.01 Frameset</option> </select> 
      <label for="doctype"><i class="bts bt-angle-down"></i></label> 
     </div> 
     <h3>Body tag</h3> 
     <p> <label> <input id="id_body_tag" type="text" name="body_tag" maxlength="255"> </label> </p> 
    </div> 
    <!-- /windowSettings --> 
    <div class="windowSettings js"> 
     <h3>Language</h3> 
     <div class="selectCont"> 
      <select name="panel_js" class="panelChoice" id="panel_js_choice" data-panel_id="id_code_js" data-panel="js"> <option data-mime-type="text/javascript" value="0" selected>JavaScript</option> <option data-mime-type="text/x-coffeescript" value="1">CoffeeScript</option> <option data-mime-type="application/javascript;version=1.7" value="2">JavaScript 1.7</option> <option data-mime-type="text/babel" value="3">Babel + JSX</option> <option data-mime-type="text/typescript" value="4">TypeScript</option> </select> 
      <label for="js_lib"><i class="bts bt-angle-down"></i></label> 
     </div> 
     <!-- /selectCont --> 
     <h3>Frameworks &amp; Extensions</h3> 
     <div class="selectCont"> 
      <select name="js_lib" id="js_lib"> <optgroup label="AngularJS"> <option value="281">AngularJS 2.0.0-alpha.47</option> <option value="283">AngularJS 1.4.8</option> <option value="180">AngularJS 1.2.1</option> <option value="137">AngularJS 1.1.1</option> </optgroup> <optgroup label="Bonsai"> <option value="120">Bonsai 0.4.1</option> </optgroup> <optgroup label="Brick"> <option value="176">Brick edge</option> </optgroup> <optgroup label="CreateJS"> <option value="279">CreateJS 2015.05.21</option> <option value="170">CreateJS 2013.09.25</option> </optgroup> <optgroup label="D3"> <option value="134">D3 3.x</option> </optgroup> <optgroup label="Dojo"> <option value="87">Dojo (nightly)</option> <option value="356">Dojo 1.12.2</option> <option value="358">Dojo 1.11.4</option> <option value="360">Dojo 1.10.8</option> <option value="362">Dojo 1.9.11</option> <option value="364">Dojo 1.8.14</option> <option value="366">Dojo 1.7.12</option> <option value="368">Dojo 1.6.5</option> <option value="370">Dojo 1.5.6</option> <option value="372">Dojo 1.4.8</option> </optgroup> <optgroup label="Ember"> <option value="190">Ember (latest)</option> </optgroup> <optgroup label="Enyo"> <option value="115">Enyo (nightly)</option> <option value="299">Enyo 2.7.0</option> <option value="238">Enyo 2.5.1</option> <option value="214">Enyo 2.4.0</option> <option value="145">Enyo 2.2.0</option> <option value="121">Enyo 2.1</option> <option value="116">Enyo 2.0.1</option> </optgroup> <optgroup label="ExtJS"> <option value="338">ExtJS 6.2.0</option> <option value="256">ExtJS 5.1.0</option> <option value="258">ExtJS 5.0.0</option> <option value="147">ExtJS 4.2.0</option> <option value="80">ExtJS 4.1.1</option> <option value="107">ExtJS 4.1.0</option> <option value="109">ExtJS 3.4.0</option> <option value="23">ExtJS 3.1.0</option> </optgroup> <optgroup label="FabricJS"> <option value="378">FabricJS 1.7.15</option> <option value="342">FabricJS 1.7.7</option> <option value="250">FabricJS 1.5.0</option> </optgroup> <optgroup label="Glow"> </optgroup> <optgroup label="Inferno"> <option value="336">Inferno 1.0.0-beta9</option> </optgroup> <optgroup label="jQuery"> <option value="46">jQuery (edge)</option> <option value="376">jQuery 3.2.1</option> <option value="333">jQuery 3.1.1</option> <option value="319">jQuery 2.2.4</option> <option value="248">jQuery 2.1.3</option> <option value="131">jQuery 1.9.1</option> </optgroup> <optgroup label="jQuery Slim"> <option value="335">jQuery Slim 3.1.1 Slim</option> <option value="323">jQuery Slim 3.1.0 Slim</option> <option value="313">jQuery Slim 3.0.0 Slim</option> </optgroup> <optgroup label="JSBlocks"> <option value="252">JSBlocks (edge)</option> </optgroup> <optgroup label="jTypes"> <option value="165">jTypes 2.1.0</option> </optgroup> <optgroup label="KineticJS"> <option value="139">KineticJS 4.3.1</option> <option value="124">KineticJS 4.0.5</option> </optgroup> <optgroup label="Knockout.js"> <option value="277">Knockout.js 3.4.0</option> <option value="172">Knockout.js 3.0.0</option> <option value="163">Knockout.js 2.3.0</option> <option value="122">Knockout.js 2.2.1</option> <option value="117">Knockout.js 2.1.0</option> <option value="104">Knockout.js 2.0.0</option> </optgroup> <optgroup label="Lo-Dash"> <option value="167">Lo-Dash 2.2.1</option> </optgroup> <optgroup label="Minified"> <option value="164">Minified 1.0 beta1</option> </optgroup> <optgroup label="MithrilJS"> <option value="273">MithrilJS 0.2.0</option> </optgroup> <optgroup label="Mootools"> <option value="59">Mootools (nightly)</option> <option value="327">Mootools 1.6.0 (compat)</option> <option value="325">Mootools 1.6.0</option> <option value="329">Mootools 1.5.2 (compat)</option> <option value="263">Mootools 1.5.2</option> <option value="216">Mootools 1.5.1</option> <option value="208">Mootools 1.5.0</option> <option value="96">Mootools 1.4.5 (compat)</option> <option value="95">Mootools 1.4.5</option> <option value="63">Mootools 1.3.2 (compat)</option> <option value="62">Mootools 1.3.2</option> </optgroup> <optgroup label="No-Library"> <option value="11" selected>No-Library (pure JS)</option> </optgroup> <optgroup label="OpenUI5"> <option value="271">OpenUI5 (latest, mobile)</option> </optgroup> <optgroup label="Paper.js"> <option value="158">Paper.js 0.22</option> </optgroup> <optgroup label="Pixi"> <option value="331">Pixi 4.0.0</option> <option value="315">Pixi 3.0.11</option> </optgroup> <optgroup label="Processing.js"> <option value="206">Processing.js 1.4.7</option> <option value="135">Processing.js 1.4.1</option> <option value="81">Processing.js 1.3.6</option> <option value="67">Processing.js 1.2.3</option> </optgroup> <optgroup label="Prototype"> <option value="265">Prototype 1.7.3</option> <option value="4">Prototype 1.6.1.0</option> </optgroup> <optgroup label="qooxdoo"> <option value="126">qooxdoo 2.1</option> <option value="127">qooxdoo 2.0.3</option> </optgroup> <optgroup label="RactiveJS"> <option value="287">RactiveJS 0.7.3</option> </optgroup> <optgroup label="Raphael"> <option value="76">Raphael 2.1.0</option> <option value="36">Raphael 1.5.2 (min)</option> <option value="30">Raphael 1.4</option> </optgroup> <optgroup label="React"> <option value="285">React 0.14.3</option> <option value="192">React 0.9.0</option> <option value="184">React 0.8.0</option> <option value="166">React 0.4.0</option> <option value="159">React 0.3.2</option> </optgroup> <optgroup label="RightJS"> <option value="136">RightJS 2.3.1</option> <option value="45">RightJS 2.1.1</option> </optgroup> <optgroup label="Shipyard"> <option value="99">Shipyard (nightly)</option> <option value="105">Shipyard 0.2</option> </optgroup> <optgroup label="svg.js"> <option value="346">svg.js 2.5.0</option> <option value="348">svg.js 2.4.0</option> <option value="350">svg.js 2.3.7</option> <option value="352">svg.js 2.2.5</option> <option value="269">svg.js 2.1.1</option> <option value="354">svg.js 2.0.5</option> </optgroup> <optgroup label="The X Toolkit"> <option value="106">The X Toolkit edge</option> </optgroup> <optgroup label="Thorax"> <option value="174">Thorax 2.0.0rc6</option> <option value="143">Thorax 2.0.0rc3</option> </optgroup> <optgroup label="Three.js"> <option value="82">Three.js r54</option> </optgroup> <optgroup label="Underscore"> <option value="267">Underscore 1.8.3</option> <option value="160">Underscore 1.4.4</option> <option value="133">Underscore 1.4.3</option> <option value="111">Underscore 1.3.3</option> </optgroup> <optgroup label="Vue"> <option value="236">Vue (edge)</option> <option value="344">Vue 2.2.1</option> <option value="289">Vue 1.0.12</option> </optgroup> <optgroup label="WebApp Install"> <option value="142">WebApp Install 0.1</option> </optgroup> <optgroup label="YUI"> <option value="230">YUI 3.17.2</option> <option value="204">YUI 3.16.0</option> <option value="182">YUI 3.14.0</option> <option value="153">YUI 3.10.1</option> <option value="130">YUI 3.8.0</option> <option value="123">YUI 3.7.3</option> <option value="118">YUI 3.6.0</option> <option value="102">YUI 3.5.0</option> <option value="9">YUI 2.8.0r4</option> </optgroup> <optgroup label="Zepto"> <option value="90">Zepto 1.0rc1</option> </optgroup> </select> 
      <label for="js_lib"><i class="bts bt-angle-down"></i></label> 
     </div> 
     <ul id="js_dependency"> 
     </ul> 
     <h3>Load type</h3> 
     <div class="selectCont"> 
      <select name="js_wrap" id="id_js_wrap"> <option value="l" selected>onLoad</option> <option value="d">onDomready</option> <option value="h">No wrap - in &lt;head&gt;</option> <option value="b">No wrap - in &lt;body&gt;</option> </select> 
      <label for="js_wrap"><i class="bts bt-angle-down"></i></label> 
     </div> 
     <h3>Framework &lt;script&gt; attribute</h3> 
     <p class="libraryTagAttributes"> <label> <input id="id_js_lib_option" type="text" name="js_lib_option" maxlength="255" placeholder="ie. data-type=&quot;&quot;" value=""> </label> </p> 
     <script type="text/javascript">
  window.addEvent('load', function() {
    $('js_lib').addEvent('change', function() {
      mooshell.loadDependencies(this.value);
    })
    if ($('library_group')) $('library_group').addEvent('change', function() {
      mooshell.loadLibraryVersions(this.value);
    })
  });
</script> 
    </div> 
    <!-- /windowSettings --> 
    <div class="windowSettings css"> 
     <h3>Language</h3> 
     <div class="selectCont"> 
      <select name="panel_css" class="panelChoice" id="panel_css_choice" data-panel_id="id_code_css" data-panel="css"> <option data-mime-type="text/x-scss" value="0" selected>CSS</option> <option data-mime-type="text/x-scss" value="1">SCSS</option> </select> 
      <label for="js_lib"><i class="bts bt-angle-down"></i></label> 
     </div> 
     <!-- /selectCont --> 
     <h3>Options</h3> 
     <p id="normalize_check"> <label class="checkboxCont"><input type="checkbox" name="normalize_css" id="id_normalize_css"><span class="checkbox"><i class="bts bt-check"></i></span> Normalized CSS</label> </p> 
    </div> 
    <!-- /windowSettings --> 
   </div> 
  </form> 
  <script>
  TogetherJSConfig_enableAnalytics = true;
  TogetherJSConfig_cloneClicks = "#run, .toggler";
  TogetherJSConfig_toolName = "Collaboration"
</script> 
  <script defer src="https://togetherjs.com/togetherjs.js"></script> 
  <script type="application/ld+json">
    {
      "@context": "http://schema.org/",
      "@type": "Code",
      "name": "Sentiment Analysis",
      
      "description": "A simple Sentiment Analysis example using a Naive Bayes Classifier. See http://burakkanber.com/blog for details.",
      
      "url": "//jsfiddle.net/bkanber/DHU7J/",
      "dateCreated": "",
      
        
        "author": {
          "@type": "Person",
          "name": "bkanber",
          
          
          "image": "//www.gravatar.com/avatar/ea3d702936ff752b2c52376b4460192c/?default=&amp;s=80"
        },
      
      "codeSampleType": [
        {
          "@type": "SoftwareSourceCode",
          "programmingLanguage": "javascript",
          "text": "/*
The following is not free software. You may use it for educational purposes, but you may not redistribute or use it commercially.
(C) All Rights Reserved, Burak Kanber 2013
*/

// Define a couple of global variables so we can easily inspect data points we guessed incorrectly on.
var incorrectNegs = [];
var incorrectPos = [];

// A list of negation terms that we&#39;ll use to flag nearby tokens
var negations = new RegExp(&quot;^(never|no|nothing|nowhere|noone|none|not|havent|hasnt|hadnt|cant|couldnt|shouldnt|wont|wouldnt|dont|doesnt|didnt|isnt|arent|aint)$&quot;);

// Use 85% of our data set for training, the remaining 15% will be used for testing.
var length = negatives.length;
var split = Math.floor(0.85 * length);

// Don&#39;t spit out console.log stuff during training and guessing. 
Bayes.debug = false;

// Close-proximity negation-marked unigram (&quot;eMSU&quot;)
Bayes.tokenizer = function (text) {
    // Standard unigram tokenizer; lowercase, strip special characters, split by whitespace
    text = Bayes.unigramTokenizer(text);
    // Step through our array of tokens
    for (var i = 0, len = text.length; i &lt; len; i++) {
        // If we find a negation word, add an exclamation point to the word preceding and following it.
        if (text[i].match(negations)) {
            if (typeof text[i + 1] !== &#39;undefined&#39;) text[i + 1] = &quot;!&quot; + text[i + 1];
            if (typeof text[i - 1] !== &#39;undefined&#39;) text[i - 1] = &quot;!&quot; + text[i - 1];
        }
    }
    // Porter Stemmer; this reduces entropy a bit
    text = text.map(function (t) { return stemmer(t); });
    return text;
};

// Set the storage engine to in-memory; this example has too much data for localStorage.
Bayes.storage = Storage;

// Runs a single training and testing experiment.
function go() {

    // Start from scratch.
    var correct = 0;
    var incorrect = 0;
    var skipped = 0;
    var trainingBar = document.getElementById(&quot;trainingProgressBar&quot;);
    var trainingVal = document.getElementById(&quot;trainingProgressValue&quot;);
    var trainingPct = 0;
    var resultsBar = document.getElementById(&quot;testResultsBar&quot;);
    var resultsVal = document.getElementById(&quot;testResultsValue&quot;);
    var resultsPct = 0.0;
    
    Bayes.storage._data = {};

    // Shuffle our arrays. I&#39;m sure some really astute CS genius will find a flaw with this ;)
    negatives.sort(function () { return Math.random() - 0.5; });
    positives.sort(function () { return Math.random() - 0.5; });

    // First we train. Walk through the data until we hit our split/pivot point.
    // Unfortunately our progress bar doesn&#39;t work because of the browser&#39;s JS event loop,
    // And retooling to use animation frames is more annoying than it&#39;s worth.
    
    for (var i = 0; i &lt; split; i++) {
        Bayes.train(negatives[i], &#39;negative&#39;);
        Bayes.train(positives[i], &#39;positive&#39;);
        if (i % 500 === 0) {       
            // Next three lines are largely useless.
            trainingPct = Math.round(i*100 / split);
            trainingVal.innerHTML = trainingPct;
            trainingBar.style.width = trainingPct + &#39;%&#39;;
            // If you want live updates, look at the console.
            console.log(&quot;Training progress: &quot; + trainingPct + &quot;%&quot;);
        }
    }
    
    // Clean up the progress bar for the final state.
    trainingPct = 100;
    trainingVal.innerHTML = trainingPct;
    trainingBar.style.width = trainingPct + &#39;%&#39;;

    // Now we guess. Look at the remainder of the data set and test each of those.
    for (var i = split; i &lt; length; i++) {
        var negResult = Bayes.extractWinner(Bayes.guess(negatives[i]));
        var posResult = Bayes.extractWinner(Bayes.guess(positives[i]));

        // Probability less than 75%? Skip it. No sense in making guesses that we know are uncertain.
        if (negResult.score &lt; 0.75) skipped++;
        else if (negResult.label === &#39;negative&#39;) correct++;
        else {
            incorrect++;
            incorrectNegs.push(negatives[i]);
        }

        // Repeat for the corresponding positive data point.
        if (posResult.score &lt; 0.75) skipped++;
        else if (posResult.label === &#39;positive&#39;) correct++;
        else {
            incorrect++;
            incorrectPos.push(positives[i]);
        }
    }

    // Show the accuracy for this training/testing run.
    resultsPct = Math.round(10000 * correct / (correct + incorrect)) / 100;
    resultsBar.style.width = Math.round(resultsPct) + &#39;%&#39;;
    resultsVal.innerHTML = resultsPct;
    return resultsPct;
}

document.getElementById(&quot;testButton&quot;).addEventListener(&#39;click&#39;, function() {
    var text = document.getElementById(&quot;testBox&quot;).value;
    var result = Bayes.extractWinner(Bayes.guess(text));
    document.getElementById(&quot;testBox&quot;).value = &#39;&#39;;
    document.getElementById(&quot;testResultLabel&quot;).innerHTML = result.label;
    document.getElementById(&quot;testResultProbability&quot;).innerHTML = Math.round(100*result.score);
    document.getElementById(&quot;testResult&quot;).style.display = &#39;block&#39;;
});

setTimeout(go, 500);

// We&#39;re not using this function in the public example, but this is a simple helper to run 30 tests at a time and record and average their scores.
function run() {
    var n = 30;
    var i = n;
    var scores = [];
    var sum = 0;
    while (i--) scores.push(go());
    scores.forEach(function (score) {
        sum += score;
    });

    console.log(scores);
    console.log(&quot;Average &quot; + sum / n);
}"
        },
        {
          "@type": "SoftwareSourceCode",
          "programmingLanguage": "html",
          "text": "&lt;body&gt;
    &lt;p&gt;Training progress: &lt;span id=&quot;trainingProgressValue&quot;&gt;0&lt;/span&gt;%&lt;/p&gt;
    &lt;div class=&quot;progress-wrapper&quot;&gt;
        &lt;div class=&quot;progress&quot; id=&quot;trainingProgressBar&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;p&gt;Test results: &lt;span id=&quot;testResultsValue&quot;&gt;0&lt;/span&gt;% accuracy&lt;/p&gt;
    &lt;div class=&quot;progress-wrapper&quot;&gt;
        &lt;div class=&quot;progress&quot; id=&quot;testResultsBar&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
    
    &lt;p&gt;Test your own:&lt;/p&gt;
    &lt;textarea id=&quot;testBox&quot; placeholder=&quot;eg: The director is a master at manupulating your emotions, making you laugh and cry.&quot;&gt;&lt;/textarea&gt;
    &lt;button id=&quot;testButton&quot;&gt;Guess Sentiment&lt;/button&gt;
    &lt;p id=&quot;testResult&quot; style=&quot;display:none;&quot;&gt;Guess: &lt;span id=&quot;testResultLabel&quot;&gt;&lt;/span&gt; (&lt;span id=&quot;testResultProbability&quot;&gt;&lt;/span&gt;% probability)&lt;/p&gt;
&lt;/body&gt;"
        },
        {
          "@type": "SoftwareSourceCode",
          "programmingLanguage": "css",
          "text": "body, textarea {
    font-family: Helvetica, Arial, sans-serif;
    width: 300px;
    margin: 10px auto;
    font-size: 13px;
}
.progress-wrapper {
    border: 1px solid #CCC;
    height: 15px;
    width: 100%;
}
.progress {
    background: #DDD;
    height: 100%;
    width: 0%;
}

textarea, button {
    border: 1px solid #CCC;
}

textarea {
    padding: 10px;
    resize: none;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    margin-top: 0;
}

button {
    background: white;
    padding: 5px;
    cursor: pointer;
}
"
        }
      ]
    }
  </script> 
  <script type="text/javascript">
        window.addEvent('load', function() {
          
        });
      </script>   
 </body>
</html>