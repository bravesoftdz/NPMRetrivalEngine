<!doctype html>
<html lang="en-US">
 <head> 
  <title>Introduction To JavaScript Unit Testing – Smashing Magazine</title> 
  <meta charset="UTF-8"> 
  <link rel="dns-prefetch" href="https://media-mediatemple.netdna-ssl.com/"> 
  <link rel="dns-prefetch" href="https://auslieferung.commindo-media-resourcen.de/"> 
  <link rel="preconnect" href="https://media-mediatemple.netdna-ssl.com"> 
  <link rel="preconnect" href="https://auslieferung.commindo-media-resourcen.de/"> 
  <style id="smash-above-the-fold-css">body,svg:not(:root){overflow:hidden}a,button,input{margin:0}.cahe,.ntb,h4{text-transform:uppercase}.bobo08{border-bottom:.08em solid rgba(0,0,0,.1)}.bo08{border:.08em solid rgba(0,0,0,.1)}article,aside,b,body,div,figcaption,figure,form,h1,h2,h3,h4,html,img,label,li,nav,p,span,strong,ul{font-size:100%;vertical-align:baseline;margin:0;padding:0;outline:0;border:0;background:0 0}html{-moz-osx-font-smoothing:grayscale;text-rendering:optimizelegibility;-webkit-font-feature-settings:"liga","kern";font-feature-settings:"liga","kern";overflow-y:scroll;overflow-x:hidden}body{line-height:1.46;max-width:2000px;color:#333;background-image:url(https://media-mediatemple.netdna-ssl.com/wp-content/themes/smashing-magazine/assets/images/smbg.png)}a{font-size:100%;text-decoration:none;vertical-align:baseline;padding:0;background:0 0;color:#41b7d8}a:active{color:#fff;background-color:#e53b2c}.pap a,li a,p a{border-bottom:.08em solid rgba(0,0,0,.1);padding-bottom:.08em}br+em a,figcaption a{border-bottom:.09em solid rgba(0,0,0,.1);padding-bottom:.09em}.pmd a,nav a{padding-bottom:0;border:0}img{max-width:100%;height:auto;border:0}ul{list-style:none}ol{list-style:decimal}article ul{list-style:disc}article ol,article ul{font-size:1.125em;margin:.5em 1.5em}article li{padding:.25em 0}article li ol,article li ul{font-size:1em;margin:0 1.5em}input{vertical-align:middle}[type=submit],button,label{cursor:pointer}[type=text],button{font-size:1.125em;outline:0;-webkit-transition:border-color .3s;transition:border-color .3s}button{vertical-align:top;overflow:visible;padding:.75em 2em;border:.08em solid #c73a11;color:#fff;background-color:#e95c33;background:-webkit-linear-gradient(top,#e85c33 0,#e53a2b 100%);background:linear-gradient(to bottom,#e85c33 0,#e53a2b 100%);border-radius:.5em}.sr,.stb{overflow:hidden;white-space:nowrap}[type=text]:placeholder{color:#777}[type=text]{line-height:1.5;margin-bottom:1em;padding:.5em;color:#777;border:.08em solid rgba(0,0,0,.1);background-color:#fff;border-radius:.5em 0 0 .5em}@-ms-viewport{width:device-width}body,button,input,label{font-family:"Proxima Nova Regular","Segoe UI",Roboto,"Droid Sans","Helvetica Neue",Arial,sans-serif;font-style:normal;font-weight:400}.cahe,.cat h3,.category .cat h2,.ntb,b,h4,strong{font-family:'Proxima Nova Bold',"Segoe UI",Roboto,"Droid Sans","Helvetica Neue",Arial,sans-serif;font-style:normal;font-weight:700}.ed+p,.pmd .a,.pmd+p{font-family:"Skolar Regular","Roboto Slab","Droid Serif",Cambria,Georgia,"Times New Roman",Times,serif;font-weight:400;font-style:normal}.ed+p em,.pmd+p em{font-family:'Skolar Italic',"Roboto Slab","Droid Serif",Cambria,Georgia,"Times New Roman",Times,serif;font-weight:400;font-style:italic}.ed+p b,.ed+p strong,.pmd+p b,.pmd+p strong{font-family:'Skolar Bold',"Roboto Slab","Droid Serif",Cambria,Georgia,"Times New Roman",Times,serif;font-weight:700;font-style:normal}h2,h3{font-family:"Skolar Bold","Segoe UI Bold","Roboto Slab","Droid Serif",AvenirNext-Bold,"Avenir Bold",Georgia,"Times New Roman",Times,serif;font-weight:700;font-style:normal}.clearfix::after,.clearfix::before{content:" ";display:table}.clearfix::after{clear:both}.sr{text-indent:200%;height:.008em;width:.008em}.blocked,.ch,.mise,.mn ul,.mnc,.ms form,.msc,.nw,.pmd .pt,.po,.sb,.short,.sn{display:none}.ad .declare,.cahe,.long,.pmd li,.sr,article,figure,label,nav{display:block}.poptag a h2 a,.tags a,h3 .hsl,h4 .hsl{display:inline-block}.awithus,.blocked figure,.gra,.ntb,.stb{float:right}.mn,.mnb,.ms,.pt,.sr{position:absolute}.h,.h .awithus,.poptag a,.pt img,aside,button,div,form,h3 .hsl,h4 .hsl,li,ul{position:relative}.h{z-index:80;width:38.2%;margin-left:5.5%;padding:1.25em 0}.ntb,.stb{padding:.4em}.mnb{top:1.5em;right:1.5em;z-index:90}.ntb,.stb{box-sizing:border-box;border:.08em solid #c73a11;border-radius:.25em;box-shadow:0 .08em .08em rgba(0,0,0,.25)}.ntb{margin-left:1em;color:#fff;background:#e95c33}.stb{text-indent:150%;width:2.9375em;background:url(https://media-mediatemple.netdna-ssl.com/wp-content/themes/smashing-magazine/assets/images/search-icon.svg) 50% 50% no-repeat,#e95c33;background-size:1.875em auto;-webkit-background-size:1.875em}.mn,.ms{width:100%;height:0;max-height:0;padding-top:0;opacity:0;-webkit-transition:none;transition:none}.cc,.post{margin-bottom:2em}.fluid{padding-bottom:1.5em;background-color:#fff;box-shadow:0 0 .625em .08em rgba(0,0,0,.05)}.grid{margin-top:1.25em}.post{padding:.5em 5.5% 4em;border-bottom:.3125em solid #41b7d8}h2{font-size:2em;line-height:1.1}h2 a{color:#333}.cahe{font-size:.45em;line-height:1.5;letter-spacing:.08em;padding-bottom:.5em;color:#41b7d8}article{line-height:1.55}article p{font-size:1.125em}.ed+p,.pmd .a,.pmd+p{font-size:1.375em;line-height:1.35;margin:0}h3{font-size:1.625em;line-height:1.3}h4{font-size:1.125em;letter-spacing:.125em}h3,h4{padding:1.5em 0 .5em}figure img,p,p img{padding:.5em 0}figure{margin:1em 0}.mcc{padding-top:1em;width:12.5em}.pmd{padding-bottom:2em;margin:0}.pmd li{padding-left:1.5em;margin-top:1em;color:rgba(0,0,0,.3)}.pmd .a{padding:.5em .5em .5em 0;border-bottom:.08em solid rgba(0,0,0,.1)}.tags a{margin:0 1em .5em 0;border-bottom:.08em solid transparent}.tags a:first-child{margin-top:0}.tags a::after{content:", "}.tags a:last-child::after{content:""}.cat{border-top:.625em solid;border-bottom:.08em solid;border-color:#e5e5e5;margin:2em 5.5% 3em;padding:1em 0 1.25em}.cat h2{margin-bottom:.5em}.cat h3{font-size:1.25em}.poptag a{padding:.25em .5em;margin:0 .5em .5em 0;border-bottom:.08em solid rgba(0,0,0,.1);background:#a1a1a1;border-radius:.25em}.gra{padding:1.25em .75em 1.25em 1.5em}.avatar{border-radius:50%}.sf label,.sfm label{font-weight:400;color:rgba(0,0,0,.25);margin:-.8em 0 .5em}.sf button{line-height:2.25;left:-.3125em;width:23%;height:2.375em;padding:0 1%;border-left:0;border-radius:0 .5em .5em 0}.sf [type=text]{width:73%;height:1.5em;padding:.375em 0 .375em 2%;margin-bottom:0;border-right:0}.declare{float:left;margin:.875em 0 .5em;color:rgba(0,0,0,.25)}.awithus{margin-top:.875em;z-index:9}.ad .declare{font-size:1em;float:none;padding:1em 0 .5em;margin-top:0}.cad{margin-bottom:1.5em}.blocked{margin:1em 5.5%;padding:1em 1.5em;background:#f9f9f9;border-radius:.5em}.blocked figure{float:right;margin:0 0 0 1em}.pt{top:0;right:-2em}.pt img{float:left;border:.08em solid rgba(0,0,0,.1);border-radius:.3125em}@media screen and (min-width:31.25em){.h{width:28.55%}.pmd li{display:inline-block;padding-right:2em}.pmd .a{display:block}.tags a{display:inline;margin:0}}@media screen and (min-width:38.125em){.grid{padding:.5em 0}.pmd .pt{display:block}}@media screen and (min-width:40.625em){.ad{float:right;margin:0 0 1em 2em}}@media screen and (min-width:50em){body{border-left:.625em solid transparent}.h,.mn,.mn+.mnc,.mn:target,.mn:target+.mnc,.ms,.ms+.msc,.ms:target,.ms:target+.msc{display:none}.ch,.ch li a,.mise,.nw,.nw a,.sn,.sn li a{display:block}.mnb,.mnb a{overflow:hidden;top:-.5em;right:0;height:.01em;width:.01em;padding:0}.ch,.main{float:right}.cc,.ch li,.col,.nw,.nw li{float:left}.nw{width:79%}.nw li{border-right:.08em solid rgba(0,0,0,.05)}.nw li a{padding:2.5em 1em .5em;height:1.75em;color:rgba(0,0,0,.3);-webkit-transition:color .3s,background-color .3s;transition:color .3s,background-color .3s}.nw .current{z-index:2;width:24%;background:#fff}.nw .current a{padding:1.5em 1em 0;height:3.3125em;-webkit-transition:none;transition:none}.nw .current a:focus,.nw .current a:hover{background-color:#fff}.nw .current img{position:relative;top:-.125em}.ch{margin:2.5em 4% 0 0;z-index:50}.ch li{margin-left:.625em}.ch li a{text-indent:100%;overflow:hidden;white-space:nowrap;width:1.4375em;height:1.4375em;background-image:url(https://media-mediatemple.netdna-ssl.com/wp-content/themes/smashing-magazine/assets/images/channels.svg);background-size:353% 600%;opacity:.45;-webkit-transition:all .3s;transition:all .3s}.rss a{background-position:76% 35.5%}.fb a{background-position:76% 62%}.tw a{background-position:76% 90%}.nl a{background-position:76% 9%}.cc{width:100%}.main{width:80%;padding:0;margin-top:1.5em}.mise form{margin:1em 0 2em 5.5%}.mise [type=text]{height:1.125em;padding:1em 2.5%}.mise button{line-height:3.125;width:17.5%;height:3.25em}.sn{width:20%}.sct{margin:2em 0}.sn ul{margin-left:-.08em}.sn li{border-left-width:.625em;border-left-style:solid;padding-bottom:2.25em;-webkit-transition:border-color .3s;transition:border-color .3s}.sn li a{font-family:'Proxima Nova Bold',"Segoe UI",Roboto,"Droid Sans","Helvetica Neue",Arial,sans-serif;font-style:normal;font-weight:700;text-transform:uppercase;letter-spacing:.175em;color:#333;padding:.25em .5em .25em 20%;border-bottom:.08em solid transparent;-webkit-transition:background-color .3s;transition:background-color .3s}.sn li li{border:0;margin-left:.08em;padding-bottom:0}.sn li li a{font-family:"Proxima Nova Regular","Segoe UI",Roboto,"Droid Sans","Helvetica Neue",Arial,sans-serif;font-style:normal;font-weight:400;letter-spacing:0;text-transform:none;color:#777;border:0;padding-left:20%;margin:0;-webkit-transition:color .3s,background-color .3s;transition:color .3s,background-color .3s}.menu-item-coding{border-left-color:#C9E9E5}.menu-item-design{border-left-color:#CDEEAA}.menu-item-mobile{border-left-color:#F9F0A8}.menu-item-graphics{border-left-color:#E0CFDF}.menu-item-uxdesign{border-left-color:#FACED2}.menu-item-wordpress{border-left-color:#BCD8F0}.cat{padding-left:5.5%;padding-right:5.5%}.post{padding-left:11%}.blocked{margin-left:11%}article img{max-width:31.25em}.fwi img{max-width:100%}}@media screen and (min-width:63.75em){.wg h3,.wg h3 a{position:relative}.so img,.so p{overflow:hidden}.mise,.sn li ul{display:none}.sb,.sb .sf{display:block}.sn li,.so img{float:left}.bnnr-list,.wg{clear:both}.nw .current{width:21%}.main,.sn{width:100%}.ch{margin-right:1em}.main{margin-top:-.5em}.post{padding-left:5.5%}.blocked{margin-left:5.5%}.sn{margin-top:0;margin-bottom:0}.sn ul{margin:1em 0 0;padding:0 0 0 5.5%;border-bottom:.3125em solid rgba(0,0,0,.06)}.sn li{border-left-width:0;border-right:.08em solid #e5e5e5;border-bottom-width:.3125em;border-bottom-style:solid;margin-bottom:-.3125em;padding-bottom:0}.sn li:last-child{border-right:0}.sn li a{font-size:.75em;border:0;padding:.75em .9em}.sct{margin-top:-.5em}.menu-item-coding{border-bottom-color:#C9E9E5}.menu-item-design{border-bottom-color:#CDEEAA}.menu-item-mobile{border-bottom-color:#F9F0A8}.menu-item-graphics{border-bottom-color:#E0CFDF}.menu-item-uxdesign{border-bottom-color:#FACED2}.menu-item-wordpress{border-bottom-color:#BCD8F0}h2{padding-top:.5em}.cc{margin-right:-28.125em}.fluid{margin-right:28.125em;border-radius:0 .625em .625em 0}.cat{padding-left:0;padding-right:0;margin-top:2em;margin-right:5.5%}.sb{z-index:3}.sb .sf form{margin:0}.sb .sf .sl{padding:2em 0 .125em}.sb .sf [type=text]{height:1.5em;padding:.375em 0 .375em 2%}.sb .sf button{line-height:2.25;width:23%;height:2.375em}.side{padding:0 0 0 1.25em;width:26.25em;top:-3.325em}.bw{margin:0 0 1.25em}.bw .awithus{margin-right:.5em}.bw p{padding-top:0}.faw{margin-top:1.5em}.bnnr-list li{font-size:.75em;text-align:center;width:48%;display:inline-block;margin:0 2% 1em 0}.bnnr-list a{border-bottom:0}.bnnr-list .double{width:34.16667em}.wg{margin:1.5em 0 1.5em -1.25em;padding:0 1.25em 2em;border:.08em solid rgba(0,0,0,.1);border-left:0;background:rgba(255,255,255,.55);border-radius:0 .625em .625em 0}.wg form{margin:.75em 0 1em}.wg li{list-style:none;padding:1em 0}.wg h3{padding-left:2.5em}.wg h3 img{position:absolute;left:-2.5em;top:0}.sb .mcf input{width:66%}.sb .mcf input+.submit{width:30%}.so div,.wg li{border-bottom:.08em solid rgba(0,0,0,.05)}.so div{margin-top:.5em}.so p{line-height:1.55;padding-top:1.125em}.so img{margin:1.5em 1.5em 0 0;border-radius:.5em}.fir{padding:0 1.5em 1.75em 0}.sec{padding-bottom:1.75em}}@media screen and (min-width:76.25em){.sn li,.sn ul{border-bottom:0}.nw{width:50%}.nw .current{width:29%}.nw .current img{top:-.4375em}.main{width:78%;margin-top:1.8%}.archive .main,.sn{margin-top:4%}.post{padding-top:0}.sn{width:22%}.sn ul{margin:0;padding:0 2.5% 0 0}.sn li{border-right:0;border-left-width:.625em;border-left-style:solid;float:none;margin-bottom:0;padding-bottom:2.25em}.sn li a{font-size:1em;border:none;border-bottom:.08em solid transparent;padding:.25em .5em .25em 25%}.sn li ul{padding:0;margin-left:-.08em;display:block}.sn li ul li{padding-bottom:0;border:0}.sn li ul li a{margin-top:0;padding-left:25%;border:0}.sct{margin:0 0 1em;z-index:99}.menu-item-coding{border-left-color:#C9E9E5}.menu-item-design{border-left-color:#CDEEAA}.menu-item-mobile{border-left-color:#F9F0A8}.menu-item-graphics{border-left-color:#E0CFDF}.menu-item-uxdesign{border-left-color:#FACED2}.menu-item-wordpress{border-left-color:#BCD8F0}.cat{margin-top:0;padding-left:5.5%;padding-right:5.5%}.ch{margin-right:28.125em}}@media screen and (min-width:90.625em){.nw li,body{border:0}.ch,.nw,.nw li{float:none}.tn{float:left;width:10%}.nw{width:auto}.nw li{border-bottom:.08em solid rgba(0,0,0,.1)}.nw li a{padding:1em 0 1em 1.375em}.nw .current{margin:.6em 0 0;width:auto;box-shadow:none}.nw .current a{padding:1.5em 0 1em 1.5em;height:auto}.nw .current img{top:0;left:-.5em}.ch{margin:1.25em 0 0 .875em}.ch li{margin-left:0;margin-right:.5em}.cc{width:90%;border-top:.625em solid transparent}.fluid{border-radius:0 .625em .625em}.grid{margin-top:2.3em}.side{top:0}.mise{top:1.65em;padding-bottom:1em}.sb .sf .sl{margin:1.5em 0 0;padding-top:0}}@media screen and (min-width:100em){body{font-size:1.15em}.post{padding-left:11%;padding-right:11%}.blocked{margin:1em 11%}.sn{margin-top:3.65%}.sn ul li ul{margin-left:-.08em}.ch{margin:1.5em 0 0 1.5em}.ad,.ch{font-size:.86957em}.wg{margin-left:-1.08696em}.cc{margin-right:-24.45652em}.fluid{margin-right:24.45652em}.side{width:22.82609em;padding-left:1.08696em}.bnnr-list .double{width:29.71015em}article p{padding:.75em 0}article li{padding:.5em 0}article img{max-width:27.17391em}.fwi img{max-width:100%}.cat{margin-left:5.5%}.pt{top:-.5em;right:-5em}}@media screen and (min-width:63.75em) and (max-width:70.3125em){.long{display:none}.short{display:block}}</style>
  <script>!function(e){"use strict";function t(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent&&e.attachEvent("on"+t,n)}function n(t,n){return e.localStorage&&localStorage[t+"_content"]&&localStorage[t+"_file"]===n}function o(t,o){if(e.localStorage&&e.XMLHttpRequest)n(t,o)?r(localStorage[t+"_content"]):a(t,o);else{var i=l.createElement("link");i.href=o,i.id=t,i.rel="stylesheet",i.type="text/css",l.getElementsByTagName("head")[0].appendChild(i),l.cookie=t}}function a(e,t){var n=new XMLHttpRequest;n.open("GET",t,!0),n.onreadystatechange=function(){4===n.readyState&&200===n.status&&(r(n.responseText),localStorage[e+"_content"]=n.responseText,localStorage[e+"_file"]=t)},n.send()}function r(e){var t=l.createElement("style");t.setAttribute("type","text/css"),l.getElementsByTagName("head")[0].appendChild(t),t.styleSheet?t.styleSheet.cssText=e:t.innerHTML=e}var l=e.document,i=function(e,t,n){function o(e){return l.body?e():void setTimeout(function(){o(e)})}function a(){i.addEventListener&&i.removeEventListener("load",a),i.media=n||"all"}var r,i=l.createElement("link");if(t)r=t;else{var s=(l.body||l.getElementsByTagName("head")[0]).childNodes;r=s[s.length-1]}var c=l.styleSheets;i.rel="stylesheet",i.href=e,i.media="only x",o(function(){r.parentNode.insertBefore(i,t?r:r.nextSibling)});var d=function(e){for(var t=i.href,n=c.length;n--;)if(c[n].href===t)return e();setTimeout(function(){d(e)})};return i.addEventListener&&i.addEventListener("load",a),i.onloadcssdefined=d,d(a),i};"undefined"!=typeof exports?exports.loadCSS=i:e.loadCSS=i,e.loadLocalStorageCSS=function(a,r){n(a,r)||l.cookie.indexOf(a)>-1?o(a,r):t(e,"load",function(){o(a,r)})}}(this);</script> 
  <link rel="preload" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/main.min.css?ver=6.4.13" as="style" onload="this.rel='stylesheet'">
  <noscript>
   <link rel="stylesheet" id="smash-main-css" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/main.min.css?ver=6.4.13" type="text/css" media="all"> 
  </noscript>
  <link rel="preload" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/articles-only.min.css?ver=6.4.13" as="style" onload="this.rel='stylesheet'">
  <noscript>
   <link rel="stylesheet" id="smash-article-only-css" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/articles-only.min.css?ver=6.4.13" type="text/css" media="all"> 
  </noscript>
  <script id="loadcss__smash-below-articles">loadCSS( "https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/below-articles.min.css?ver=6.4.13", false, "all" );</script>
  <noscript>
   <link rel="stylesheet" id="smash-below-articles-css" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/below-articles.min.css?ver=6.4.13" type="text/css" media="all"> 
  </noscript>
  <script id="loadcss__smash-comments">loadCSS( "https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/comments.min.css?ver=6.4.13", false, "all" );</script>
  <noscript>
   <link rel="stylesheet" id="smash-comments-css" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/comments.min.css?ver=6.4.13" type="text/css" media="all"> 
  </noscript>
  <link rel="stylesheet" id="smash-print-css" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/print.min.css?ver=6.4.13" type="text/css" media="print"> 
  <script id="loadcss__smash-webfonts">loadLocalStorageCSS( "smash-webfonts", "https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/webfonts.min.css?ver=6.4.13" );</script>
  <!--[if IE 8]>
<link rel='stylesheet' id='smash-ie8-css'  href='https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/css/ie8-nu.min.css?ver=6.4.13' type='text/css' media='all' />
<![endif]--> 
  <!-- This site is optimized with the Yoast SEO Premium plugin v4.6 - https://yoast.com/wordpress/plugins/seo/ --> 
  <meta name="description" content="JavaScript unit testing is about extracting existing code and test the important parts, potentially uncovering and fixing bugs in the code."> 
  <link rel="canonical" href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/"> 
  <link rel="publisher" href="https://plus.google.com/+SmashingMagazine?"> 
  <meta property="DC.date.issued" content="2012-06-27T00:31:31+02:00"> 
  <!-- / Yoast SEO Premium plugin. --> 
  <link rel="alternate" type="application/rss+xml" title="Smashing Magazine » Feed" href="https://www.smashingmagazine.com/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="Smashing Magazine » Comments Feed" href="https://www.smashingmagazine.com/comments/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="Smashing Magazine » Introduction To JavaScript Unit Testing Comments Feed" href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/feed/"> 
  <script type="text/javascript">
/* <![CDATA[ */
var SmashingServiceWorkerData = {"url":"https:\/\/www.smashingmagazine.com\/serviceWorker.js"};
/* ]]> */
</script> 
  <script>
var SmashingServiceWorkerData=SmashingServiceWorkerData||{url:""};(function(a,b){if(b.url&&"serviceWorker" in a){a.serviceWorker.register(b.url);window.addEventListener("load",function(){if(a.serviceWorker.controller){a.serviceWorker.controller.postMessage({command:"trimCaches"})}})}})(navigator,SmashingServiceWorkerData);
</script> 
  <!--[if IE 8]>
<script type='text/javascript' src='https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/js/html5shiv.min.js?ver=6.4.13'></script>
<![endif]--> 
  <link rel="https://api.w.org/" href="https://www.smashingmagazine.com/wp-json/"> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.smashingmagazine.com/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://www.smashingmagazine.com/wp-includes/wlwmanifest.xml"> 
  <link rel="shortlink" href="https://www.smashingmagazine.com/?p=118593"> 
  <link rel="alternate" type="application/json+oembed" href="https://www.smashingmagazine.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.smashingmagazine.com%2F2012%2F06%2Fintroduction-to-javascript-unit-testing%2F"> 
  <link rel="alternate" type="text/xml+oembed" href="https://www.smashingmagazine.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.smashingmagazine.com%2F2012%2F06%2Fintroduction-to-javascript-unit-testing%2F&amp;format=xml"> 
  <!-- Stream WordPress user activity plugin v3.0.7 --> 
  <link rel="manifest" href="/manifest.json"> 
  <script>
	dataLayer = [
		{
			'site': {"ID":"1","name":"Smashing Magazine","home":"https:\/\/www.smashingmagazine.com"},
			'user': {"isLoggedIn":false,"ID":0,"role":"visitor"}		}
	];
</script> 
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
		new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
		j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
		'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
	})(window,document,'script','dataLayer','GTM-NWC9FPF');
</script> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <link rel="mask-icon" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/s.svg" color="#e53b2c" sizes="any"> 
  <!--[if IE]><link href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/favicon.ico" rel="icon" /><![endif]--> 
  <link rel="icon" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/favicon.png"> 
  <meta name="application-name" content="Smashing Magazine"> 
  <meta name="msapplication-TileColor" content="#fff"> 
  <meta name="msapplication-square70x70logo" content="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/smashing-windows-icon-70-70.png"> 
  <meta name="msapplication-square150x150logo" content="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/smashing-windows-icon-150-150.png"> 
  <meta name="msapplication-wide310x150logo" content="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/smashing-windows-icon-310-150.png"> 
  <meta name="msapplication-square310x310logo" content="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/smashing-windows-icon-310-310.png"> 
  <meta name="msapplication-notification" content="frequency=30;polling-uri1=http://notifications.buildmypinnedsite.com/?feed=https://www.smashingmagazine.com/feed/&amp;id=1;polling-uri2=http://notifications.buildmypinnedsite.com/?feed=https://www.smashingmagazine.com/feed/&amp;id=2;polling-uri3=http://notifications.buildmypinnedsite.com/?feed=https://www.smashingmagazine.com/feed/&amp;id=3;polling-uri4=http://notifications.buildmypinnedsite.com/?feed=https://www.smashingmagazine.com/feed/&amp;id=4;cycle=1"> 
  <link rel="apple-touch-icon-precomposed" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/apple-touch-icon-precomposed.png"> 
  <link rel="apple-touch-icon-precomposed" sizes="57x57" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/apple-touch-icon-57x57-precomposed.png"> 
  <link rel="apple-touch-icon-precomposed" sizes="72x72" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/apple-touch-icon-72x72-precomposed.png"> 
  <link rel="apple-touch-icon-precomposed" sizes="114x114" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/apple-touch-icon-114x114-precomposed.png"> 
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/apple-touch-icon-144x144-precomposed.png"> 
 </head> 
 <body id="top" class="single single-post postid-118593 single-format-standard www-section"> 
  <noscript>
   <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-NWC9FPF" height="0" width="0" style="display:none;visibility:hidden"></iframe>
  </noscript> 
  <div class="mnb"> 
   <a href="#mn" class="ntb js-toggle-btn" title="Jump to the main navigation"> Menu </a> 
   <a href="#ms" class="stb js-toggle-btn" title="Jump to the search"> Search </a> 
  </div>
  <a class="sr" href="#content">Jump to the content</a> 
  <header class="h" role="banner"> 
   <h1 class="logo"> <span class="sr">Smashing Magazine</span> <a href="https://www.smashingmagazine.com/"><img src="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/logo.png" alt="Smashing Magazine Logo" srcset="https://media-mediatemple.netdna-ssl.com/wp-content/themes/smashing-magazine/assets/images/logo.svg"></a> </h1> 
  </header> 
  <nav class="mn" id="mn" role="navigation menu"> 
   <h2>Smashing Pages:</h2> 
   <ul id="menu-smashing-mobile-network" class="mnu">
    <li id="menu-item-218248" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-218248 menu-item-books"><a href="https://www.smashingmagazine.com/books/">Books</a></li> 
    <li id="menu-item-218249" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-218249 menu-item-tickets"><a href="https://www.smashingmagazine.com/workshops/">Tickets</a></li> 
    <li id="menu-item-219109" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-219109 menu-item-shop"><a href="https://shop.smashingmagazine.com/">Shop</a></li> 
    <li id="menu-item-188959" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-188959 menu-item-email-newsletter"><a href="https://www.smashingmagazine.com/the-smashing-newsletter/">Email Newsletter</a></li> 
    <li id="menu-item-188961" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-188961 menu-item-jobs"><a href="http://jobs.smashingmagazine.com">Jobs</a></li> 
    <li id="menu-item-188958" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-188958 menu-item-about-us-impressum"><a href="https://www.smashingmagazine.com/about/">About us / Impressum</a></li> 
   </ul> 
   <h2>Categories:</h2> 
   <ul id="menu-mobile-categories" class="mnu">
    <li id="menu-item-181575" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-181575 menu-item-coding"><a href="https://www.smashingmagazine.com/category/coding/">Coding</a></li> 
    <li id="menu-item-181576" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-181576 menu-item-design"><a href="https://www.smashingmagazine.com/category/design/">Design</a></li> 
    <li id="menu-item-181580" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-181580 menu-item-mobile"><a href="https://www.smashingmagazine.com/category/mobile/">Mobile</a></li> 
    <li id="menu-item-181579" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-181579 menu-item-graphics"><a href="https://www.smashingmagazine.com/category/graphics/">Graphics</a></li> 
    <li id="menu-item-181577" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-181577 menu-item-ux-design"><a href="https://www.smashingmagazine.com/category/uxdesign/">UX Design</a></li> 
    <li id="menu-item-181578" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-181578 menu-item-wordpress"><a href="https://www.smashingmagazine.com/category/wordpress/"><span class="long"><span>Word</span><span>Press</span></span><span class="short">WP</span></a></li> 
   </ul>
  </nav> 
  <a class="mnc js-toggle-btn" href="#top" data-toggle-target="mn" title="Close the navigation">X</a>
  <div class="ms" id="ms" role="search"> 
   <form id="mobile-searching" class="sfm clearfix" method="get" action="https://www.smashingmagazine.com/search-results/" target="_top"> 
    <label for="mobile-search-input">Search on Smashing Magazine</label> 
    <input name="q" id="mobile-search-input" type="text" placeholder="e.g. CSS"> 
    <button class="submit" type="submit">Search</button> 
    <input type="hidden" name="cx" value="partner-pub-6779860845561969:5884617103"> 
    <input type="hidden" name="cof" value="FORID:10"> 
    <input type="hidden" name="ie" value="UTF-8"> 
   </form> 
  </div> 
  <a role="button" class="msc js-toggle-btn" href="#top" data-toggle-target="ms" title="Close the search">X</a> 
  <nav class="tn clearfix" role="navigation"> 
   <ul id="menu-network-menu" class="nw clearfix">
    <li class="current"><a href="https://www.smashingmagazine.com"><img src="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/logo.png" alt="Smashing Magazine" srcset="https://media-mediatemple.netdna-ssl.com/wp-content/themes/smashing-magazine/assets/images/logo.svg"></a></li>
    <li id="menu-item-218245" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-218245 menu-item-books"><a href="https://www.smashingmagazine.com/books/">Books</a></li> 
    <li id="menu-item-231721" class="cody menu-item menu-item-type-custom menu-item-object-custom menu-item-231721 menu-item-ebooks"><a href="https://shop.smashingmagazine.com/products/the-smashing-library">eBooks</a></li> 
    <li id="menu-item-218696" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-218696 menu-item-tickets"><a href="https://www.smashingmagazine.com/smashing-workshops/">Tickets</a></li> 
    <li id="menu-item-231722" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-231722 menu-item-shop"><a href="https://shop.smashingmagazine.com/">Shop</a></li> 
    <li id="menu-item-2" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2 menu-item-jobs"><a href="http://jobs.smashingmagazine.com/">Jobs</a></li> 
   </ul>
   <nav id="social-media-nav" role="menu"> 
    <ul class="ch"> 
     <li class="rss"> <a href="https://www.smashingmagazine.com/feed/" title="Subscribe to our RSS-feed (120K)">RSS</a> </li> 
     <li class="fb"> <a href="//www.facebook.com/smashmag" title="Join our Facebook page! (267k)">Facebook</a> </li> 
     <li class="tw"> <a href="//twitter.com/smashingmag" title="Follow us on Twitter! (956k)">Twitter</a> </li> 
     <li class="nl"> <a href="https://www.smashingmagazine.com/the-smashing-newsletter/" title="Subscribe to our Email Newsletter (180k)">Newsletter</a> </li> 
    </ul> 
   </nav> 
  </nav> 
  <main> 
   <div class="cc"> 
    <div class="fluid clearfix"> 
     <div class="grid clearfix"> 
      <section class="mise sf clearfix" role="search"> 
       <form id="search_1" method="get" action="https://www.smashingmagazine.com/search-results/" target="_top"> 
        <label class="sl" for="searching_1">Search on Smashing Magazine</label> 
        <input id="searching_1" name="q" type="text" placeholder="e.g. JavaScript"> 
        <button class="search_submit" type="submit">Search</button> 
        <input type="hidden" name="cx" value="partner-pub-6779860845561969:5884617103"> 
        <input type="hidden" name="cof" value="FORID:10"> 
        <input type="hidden" name="ie" value="UTF-8"> 
       </form> 
      </section> 
      <div class="col sn"> 
       <div class="sct">
        <ul id="menu-category-menu" class="clearfix">
         <li id="menu-item-116" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-has-children menu-item-116 menu-item-coding"><a href="https://www.smashingmagazine.com/category/coding/">Coding</a> 
          <ul class="sub-menu"> 
           <li id="menu-item-2014" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-2014 menu-item-css"><a href="https://www.smashingmagazine.com/tag/css/">CSS</a></li> 
           <li id="menu-item-134810" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-134810 menu-item-html"><a href="https://www.smashingmagazine.com/tag/html/">HTML</a></li> 
           <li id="menu-item-2015" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-2015 menu-item-javascript"><a href="https://www.smashingmagazine.com/tag/javascript/">JavaScript</a></li> 
           <li id="menu-item-2016" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-2016 menu-item-techniques"><a href="https://www.smashingmagazine.com/tag/techniques/">Techniques</a></li> 
          </ul> </li> 
         <li id="menu-item-117" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-117 menu-item-design"><a href="https://www.smashingmagazine.com/category/design/">Design</a> 
          <ul class="sub-menu"> 
           <li id="menu-item-2017" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-2017 menu-item-web-design"><a href="https://www.smashingmagazine.com/tag/web-design/">Web Design</a></li> 
           <li id="menu-item-231166" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-231166 menu-item-responsive"><a title="Responsive Web Design" href="https://www.smashingmagazine.com/tag/responsive-web-design/">Responsive</a></li> 
           <li id="menu-item-2032" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-2032 menu-item-typography"><a href="https://www.smashingmagazine.com/tag/typography/">Typography</a></li> 
           <li id="menu-item-2063" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-2063 menu-item-inspiration"><a href="https://www.smashingmagazine.com/tag/inspiration/">Inspiration</a></li> 
          </ul> </li> 
         <li id="menu-item-119" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-119 menu-item-mobile"><a href="https://www.smashingmagazine.com/category/mobile/">Mobile</a> 
          <ul class="sub-menu"> 
           <li id="menu-item-142132" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-142132 menu-item-iphone-ipad"><a href="https://www.smashingmagazine.com/tag/ios/">iPhone &amp; iPad</a></li> 
           <li id="menu-item-143596" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-143596 menu-item-android"><a href="https://www.smashingmagazine.com/tag/android/">Android</a></li> 
           <li id="menu-item-143608" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-143608 menu-item-design-patterns"><a href="https://www.smashingmagazine.com/tag/design-patterns/">Design Patterns</a></li> 
          </ul> </li> 
         <li id="menu-item-118" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-118 menu-item-graphics"><a href="https://www.smashingmagazine.com/category/graphics/">Graphics</a> 
          <ul class="sub-menu"> 
           <li id="menu-item-2264" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-2264 menu-item-photoshop"><a href="https://www.smashingmagazine.com/tag/photoshop/">Photoshop</a></li> 
           <li id="menu-item-160" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-160 menu-item-fireworks"><a href="https://www.smashingmagazine.com/category/fireworks/">Fireworks</a></li> 
           <li id="menu-item-2283" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-2283 menu-item-wallpapers"><a href="https://www.smashingmagazine.com/tag/wallpapers/">Wallpapers</a></li> 
           <li id="menu-item-2305" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-2305 menu-item-freebies"><a href="https://www.smashingmagazine.com/tag/freebies/">Freebies</a></li> 
          </ul> </li> 
         <li id="menu-item-120" class="menu-item-uxdesign menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-120 menu-item-ux-design"><a href="https://www.smashingmagazine.com/category/uxdesign/">UX Design</a> 
          <ul class="sub-menu"> 
           <li id="menu-item-143609" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-143609 menu-item-usability"><a href="https://www.smashingmagazine.com/tag/usability/">Usability</a></li> 
           <li id="menu-item-143610" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-143610 menu-item-user-experience"><a href="https://www.smashingmagazine.com/tag/user-experience/">User Experience</a></li> 
           <li id="menu-item-143611" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-143611 menu-item-ui-design"><a href="https://www.smashingmagazine.com/tag/ui/">UI Design</a></li> 
           <li id="menu-item-143612" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-143612 menu-item-e-commerce"><a href="https://www.smashingmagazine.com/tag/e-commerce/">E-Commerce</a></li> 
          </ul> </li> 
         <li id="menu-item-121" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-121 menu-item-wordpress"><a href="https://www.smashingmagazine.com/category/wordpress/"><span class="long"><span>Word</span><span>Press</span></span><span class="short">WP</span></a> 
          <ul class="sub-menu"> 
           <li id="menu-item-143677" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-143677 menu-item-essentials"><a href="https://www.smashingmagazine.com/tag/essentials/">Essentials</a></li> 
           <li id="menu-item-143678" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-143678 menu-item-techniques"><a href="https://www.smashingmagazine.com/tag/techniques-wp/">Techniques</a></li> 
           <li id="menu-item-143679" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-143679 menu-item-plugins"><a href="https://www.smashingmagazine.com/tag/plugins/">Plugins</a></li> 
           <li id="menu-item-143680" class="menu-item menu-item-type-taxonomy menu-item-object-post_tag menu-item-143680 menu-item-themes"><a href="https://www.smashingmagazine.com/tag/themes/">Themes</a></li> 
          </ul> </li> 
        </ul>
       </div> 
      </div> 
      <div id="content" class="col main"> 
       <div id="blocked" class="blocked clearfix"> 
        <figure style="max-width: 24%;min-width: 90px;"> 
         <a href="https://smashingconf.com/barcelona-2017"> <img src="https://www.smashingmagazine.com/wp-content/uploads/2017/06/smashingconf-barcelona-round-v2.png" alt="Smashing Conf Barcelona"> </a> 
        </figure> 
        <p style="font-size: calc(1em + ((0.4vw + 0.25vh) / 2));"> <strong>You know, we use ad-blockers as well.</strong> We gotta keep those servers running though. Did you know that we publish <a href="https://www.smashingmagazine.com/books/">useful books</a> and run <a href="https://www.smashingmagazine.com/smashing-workshops/">friendly conferences</a> — crafted for pros like yourself? E.g. our upcoming <a href="https://smashingconf.com/barcelona-2017">SmashingConf Barcelona</a>, dedicated to smart front-end techniques and design patterns. </p> 
       </div>
       <article class="post-118593 post type-post status-publish format-standard has-post-thumbnail hentry category-coding tag-javascript tag-testing" vocab="http://schema.org/" typeof="TechArticle"> 
        <h2> <a property="url" href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/" rel="bookmark" title="Read 'Introduction To JavaScript Unit Testing'"><span property="name">Introduction To JavaScript Unit Testing</span></a> </h2> 
        <ul class="pmd clearfix"> 
         <li class="a" property="author" typeof="person" resource="#authorname">By <a href="https://www.smashingmagazine.com/author/joern-zaefferer/" title="Posts by Jörn Zaefferer" rel="author">Jörn Zaefferer</a></li> 
         <li class="rd" property="datePublished" content="June 27th, 2012">June 27th, 2012</li> 
         <li class="tags" property="keywords"><a href="https://www.smashingmagazine.com/tag/javascript/">JavaScript</a><a href="https://www.smashingmagazine.com/tag/testing/">Testing</a></li> 
         <li class="comments" property="discussionUrl"><a href="#comments" title="Comment on Introduction To JavaScript Unit Testing">15 Comments</a> </li> 
        </ul> 
        <div class="ad ed"> 
         <div class="oa_zone--ad cad" id="cad" data-ad-name="Medium Rectangle" data-ad-zone="22" data-ad-media="all"></div> 
        </div> 
        <p>You probably know that testing is good, but the first hurdle to overcome when trying to write unit tests for client-side code is the lack of any actual units; JavaScript code is written for each page of a website or each module of an application and is closely intermixed with back-end logic and related HTML. In the worst case, the code is&nbsp;completely&nbsp;mixed with HTML, as inline events handlers.</p> 
        <p>This is likely the case when no JavaScript library for some DOM abstraction is being used; writing inline event handlers is much easier than using the DOM APIs to bind those events. More and more developers are picking up a library such as jQuery to handle the DOM abstraction, allowing them to move those inline events to distinct scripts, either on the same page or even in a separate JavaScript file. However, putting the code into&nbsp;separate files doesn’t mean that it is ready to be tested as a unit.</p> 
        <h3 id="further-reading-on-smashingmag"><span class="rh">Further Reading</span> on SmashingMag: <a href="#further-reading-on-smashingmag" aria-label="Link to section 'Further Reading on SmashingMag:'" class="sr hsl">Link</a></h3> 
        <ul> 
         <li><a title="Read 'Writing Fast, Memory-Efficient JavaScript'" href="https://www.smashingmagazine.com/2012/11/writing-fast-memory-efficient-javascript/" rel="bookmark"><span class="headline">Writing Fast, Memory-Efficient JavaScript</span></a><sup class="po" id="note-1"><a href="#1">1</a></sup></li> 
         <li><a title="Read 'Terrible JavaScript Mistakes To Avoid With A Static Code Analyzer'" href="https://www.smashingmagazine.com/2015/02/avoid-javascript-mistakes-with-static-code-analyzer/" rel="bookmark">JavaScript Mistakes To Avoid With A Static Code Analyzer</a><sup class="po" id="note-2"><a href="#2">2</a></sup></li> 
         <li><a title="Read 'Analyzing Network Characteristics Using JavaScript And The DOM, Part 1'" href="https://www.smashingmagazine.com/2011/11/analyzing-network-characteristics-using-javascript-and-the-dom-part-1/" rel="bookmark">Analyzing Network Characteristics Using JavaScript And DOM</a><sup class="po" id="note-3"><a href="#3">3</a></sup></li> 
         <li><a title="Read 'Find The Right JavaScript Solution With A 7-Step Test'" href="https://www.smashingmagazine.com/2010/01/find-the-right-javascript-solution-with-a-7-step-test/" rel="bookmark">Find The Right JavaScript Solution With A 7-Step Test</a><sup class="po" id="note-4"><a href="#4">4</a></sup></li> 
        </ul> 
        <p>What is a unit anyway? In the best case, it is a pure function that you can deal with in some way — a function that always gives you the same result for a given input. This makes unit testing pretty easy, but most of the time you need to deal with side effects, which here means DOM manipulations. It’s still useful to figure out which units we can structure our code into and to build unit tests accordingly.</p> 
        <h3 id="building-unit-tests">Building Unit Tests <a href="#building-unit-tests" aria-label="Link to section 'Building Unit Tests'" class="sr hsl">Link</a></h3> 
        <p>With that in mind, we can obviously say that starting with unit testing is much easier when starting something from scratch. But that’s not what this article is about. This article is to help you with the harder problem: extracting existing code and testing the important parts, potentially uncovering and fixing bugs in the code.</p> 
        <p>The process of extracting code and putting it into a different form, without modifying its current&nbsp;behavior, is called refactoring. Refactoring is an excellent method of improving the code design of a program; and because any change could actually modify the behaviour of the program, it is safest to do when unit tests are in place.</p> 
        <p>This chicken-and-egg problem means that to add tests to existing code, you have to take the risk of breaking things. So, until you have solid coverage with unit tests, you need to continue manually testing to minimize that risk.</p> 
        <p>That should be enough theory for now. Let’s look at a practical example, testing some JavaScript code that is currently mixed in with and connected to a page. The code looks for links with <code>title</code> attributes, using those titles to display when something was posted, as a relative time value, like “5 days ago”:</p> 
        <pre><code class="language-markup tmp-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
    &lt;title&gt;Mangled date examples&lt;/title&gt;
    &lt;script&gt;
    function prettyDate(time){
        var date = new Date(time || ""),
            diff = ((new Date().getTime() - date.getTime()) / 1000),
            day_diff = Math.floor(diff / 86400);

        if (isNaN(day_diff) || day_diff &lt; 0 || day_diff &gt;= 31) {
            return;
        }

        return day_diff == 0 &amp;&amp; (
                diff &lt; 60 &amp;&amp; "just now" ||
                diff &lt; 120 &amp;&amp; "1 minute ago" ||
                diff &lt; 3600 &amp;&amp; Math.floor( diff / 60 ) + " minutes ago" ||
                diff &lt; 7200 &amp;&amp; "1 hour ago" ||
                diff &lt; 86400 &amp;&amp; Math.floor( diff / 3600 ) + " hours ago") ||
            day_diff == 1 &amp;&amp; "Yesterday" ||
            day_diff &lt; 7 &amp;&amp; day_diff + " days ago" ||
            day_diff &lt; 31 &amp;&amp; Math.ceil( day_diff / 7 ) + " weeks ago";
    }
    window.onload = function(){
        var links = document.getElementsByTagName("a");
        for (var i = 0; i &lt; links.length; i++) {
            if (links[i].title) {
                var date = prettyDate(links[i].title);
                if (date) {
                    links[i].innerHTML = date;
                }
            }
        }
    };
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;ul&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;a href="/2008/01/blah/57/" title="2008-01-28T20:24:17Z"&gt;January 28th, 2008&lt;/a&gt;
        by &lt;a href="/john/"&gt;John Resig&lt;/a&gt;
    &lt;/small&gt;
&lt;/li&gt;
&lt;!-- more list items --&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre> 
        <p>If you ran that example, you’d see a problem: none of the dates get replaced. The code works, though. It loops through all anchors on the page and checks for a <code>title</code> property on each. If there is one, it passes it to the <code>prettyDate</code> function. If <code>prettyDate</code> returns a result, it updates the <code>innerHTML</code> of the link with the result.</p> 
        <section> 
         <div class="oa_zone--ad icad" id="cad-middle" data-ad-name="Content Ad Middle" data-ad-zone="110" data-ad-media="all"></div> 
        </section> 
        <h3 id="make-things-testable">Make Things Testable <a href="#make-things-testable" aria-label="Link to section 'Make Things Testable'" class="sr hsl">Link</a></h3> 
        <p>The problem is that for any date older than 31 days, <code>prettyDate</code> just returns undefined (implicitly, with a single <code>return</code> statement), leaving the text of the anchor as is. So, to see what’s supposed to happen, we can hardcode a “current” date:</p> 
        <pre><code class="language-markup tmp-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
    &lt;title&gt;Mangled date examples&lt;/title&gt;
    &lt;script&gt;
    function prettyDate(now, time){
        var date = new Date(time || ""),
            diff = (((new Date(now)).getTime() - date.getTime()) / 1000),
            day_diff = Math.floor(diff / 86400);

        if (isNaN(day_diff) || day_diff &lt; 0 || day_diff &gt;= 31) {
            return;
        }

        return day_diff == 0 &amp;&amp; (
                diff &lt; 60 &amp;&amp; "just now" ||
                diff &lt; 120 &amp;&amp; "1 minute ago" ||
                diff &lt; 3600 &amp;&amp; Math.floor( diff / 60 ) + " minutes ago" ||
                diff &lt; 7200 &amp;&amp; "1 hour ago" ||
                diff &lt; 86400 &amp;&amp; Math.floor( diff / 3600 ) + " hours ago") ||
            day_diff == 1 &amp;&amp; "Yesterday" ||
            day_diff &lt; 7 &amp;&amp; day_diff + " days ago" ||
            day_diff &lt; 31 &amp;&amp; Math.ceil( day_diff / 7 ) + " weeks ago";
    }
    window.onload = function(){
        var links = document.getElementsByTagName("a");
        for (var i = 0; i &lt; links.length; i++) {
            if (links[i].title) {
                var date = prettyDate("2008-01-28T22:25:00Z", links[i].title);
                if (date) {
                    links[i].innerHTML = date;
                }
            }
        }
    };
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;ul&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;a href="/2008/01/blah/57/" title="2008-01-28T20:24:17Z"&gt;January 28th, 2008&lt;/a&gt;
        by &lt;a href="/john/"&gt;John Resig&lt;/a&gt;
    &lt;/small&gt;
&lt;/li&gt;
&lt;!-- more list items --&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre> 
        <ul> 
         <li><a href="http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/1-mangled.html">Run this example.</a><sup class="po" id="note-5"><a href="#5">5</a></sup></li> 
        </ul> 
        <p>Now, the links should say “2 hours ago,” “Yesterday” and so on. That’s something, but still not an actual testable unit. So, without changing the code further, all we can do is try to test the resulting DOM changes. Even if that did work, any small change to the markup would likely break the test, resulting in a really bad cost-benefit ratio for a test like that.</p> 
        <h3 id="refactoring-stage-0">Refactoring, Stage 0 <a href="#refactoring-stage-0" aria-label="Link to section 'Refactoring, Stage 0'" class="sr hsl">Link</a></h3> 
        <p>Instead, let’s refactor the code just enough to have something that we can unit test.</p> 
        <p>We need to make two changes for this to happen: pass the current date to the <code>prettyDate</code> function as an argument, instead of having it just use <code>new Date</code>, and extract the function to a separate file so that we can include the code on a separate page for unit tests.</p> 
        <pre><code class="language-markup tmp-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
    &lt;title&gt;Refactored date examples&lt;/title&gt;
    &lt;script src="prettydate.js"&gt;&lt;/script&gt;
    &lt;script&gt;
    window.onload = function() {
        var links = document.getElementsByTagName("a");
        for ( var i = 0; i &lt; links.length; i++ ) {
            if (links[i].title) {
                var date = prettyDate("2008-01-28T22:25:00Z", links[i].title);
                if (date) {
                    links[i].innerHTML = date;
                }
            }
        }
    };
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;ul&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;a href="/2008/01/blah/57/" title="2008-01-28T20:24:17Z"&gt;January 28th, 2008&lt;/a&gt;
        by &lt;a href="/john/"&gt;John Resig&lt;/a&gt;
    &lt;/small&gt;
&lt;/li&gt;
&lt;!-- more list items --&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre> 
        <p>&nbsp;</p> 
        <p>Here’s the contents of <code>prettydate.js</code>:</p> 
        <pre><code class="language-javascript">function prettyDate(now, time){
    var date = new Date(time || ""),
        diff = (((new Date(now)).getTime() - date.getTime()) / 1000),
        day_diff = Math.floor(diff / 86400);

    if (isNaN(day_diff) || day_diff &lt; 0 || day_diff &gt;= 31) {
        return;
    }

    return day_diff == 0 &amp;&amp; (
            diff &lt; 60 &amp;&amp; "just now" ||
            diff &lt; 120 &amp;&amp; "1 minute ago" ||
            diff &lt; 3600 &amp;&amp; Math.floor( diff / 60 ) + " minutes ago" ||
            diff &lt; 7200 &amp;&amp; "1 hour ago" ||
            diff &lt; 86400 &amp;&amp; Math.floor( diff / 3600 ) + " hours ago") ||
        day_diff == 1 &amp;&amp; "Yesterday" ||
        day_diff &lt; 7 &amp;&amp; day_diff + " days ago" ||
        day_diff &lt; 31 &amp;&amp; Math.ceil( day_diff / 7 ) + " weeks ago";
}</code></pre> 
        <ul> 
         <li><a href="http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/2-getting-somewhere.html">Run this example.</a><sup class="po" id="note-6"><a href="#6">6</a></sup></li> 
        </ul> 
        <p>Now that we have something to test, let’s write some actual unit tests:</p> 
        <pre><code class="language-markup tmp-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
    &lt;title&gt;Refactored date examples&lt;/title&gt;
    &lt;script src="prettydate.js"&gt;&lt;/script&gt;
    &lt;script&gt;
    function test(then, expected) {
        results.total++;
        var result = prettyDate("2008-01-28T22:25:00Z", then);
        if (result !== expected) {
            results.bad++;
            console.log("Expected " + expected + ", but was " + result);
        }
    }
    var results = {
        total: 0,
        bad: 0
    };
    test("2008/01/28 22:24:30", "just now");
    test("2008/01/28 22:23:30", "1 minute ago");
    test("2008/01/28 21:23:30", "1 hour ago");
    test("2008/01/27 22:23:30", "Yesterday");
    test("2008/01/26 22:23:30", "2 days ago");
    test("2007/01/26 22:23:30", undefined);
    console.log("Of " + results.total + " tests, " + results.bad + " failed, "
        + (results.total - results.bad) + " passed.");
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre> 
        <ul> 
         <li><a href="http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/3-first-test.html">Run this example.</a><sup class="po" id="note-7"><a href="#7">7</a></sup> (Make sure to enable a console such as Firebug or Chrome’s Web Inspector.)</li> 
        </ul> 
        <p>This will create an ad-hoc testing framework, using only the console for output. It has no dependencies to the DOM at all, so you could just as well run it in a non-browser JavaScript environment, such as Node.js or Rhino, by extracting the code in the <code>script</code> tag to its own file.</p> 
        <p>If a test fails, it will output the expected and actual result for that test. In the end, it will output a test summary with the total, failed and passed number of tests.</p> 
        <p>If all tests have passed, like they should here, you would see the following in the console:</p> 
        <blockquote>
         <p>Of 6 tests, 0 failed, 6 passed.</p>
        </blockquote> 
        <p>To see what a failed assertion looks like, we can change something to break it:</p> 
        <blockquote>
         <p>Expected 2 day ago, but was 2 days ago.</p> 
         <p>Of 6 tests, 1 failed, 5 passed.</p>
        </blockquote> 
        <p>While this ad-hoc approach is interesting as a proof of concept (you really can write a test runner in just a few lines of code), it’s much more practical to use an existing unit testing framework that provides better output and more infrastructure for writing and organizing tests.</p> 
        <h3 id="the-qunit-javascript-test-suite">The QUnit JavaScript Test Suite <a href="#the-qunit-javascript-test-suite" aria-label="Link to section 'The QUnit JavaScript Test Suite'" class="sr hsl">Link</a></h3> 
        <p>The choice of framework is mostly a matter of taste. For the rest of this article, we’ll use&nbsp;<a href="http://qunitjs.com">QUnit</a><sup class="po" id="note-8"><a href="#8">8</a></sup> (pronounced “q-unit”), because its style of describing tests is close to that of our ad-hoc test framework.</p> 
        <pre><code class="language-markup tmp-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
    &lt;title&gt;Refactored date examples&lt;/title&gt;

    &lt;link rel="stylesheet" href="qunit.css" /&gt;
    &lt;script src="qunit.js"&gt;&lt;/script&gt;
    &lt;script src="prettydate.js"&gt;&lt;/script&gt;

    &lt;script&gt;
    test("prettydate basics", function() {
        var now = "2008/01/28 22:25:00";
        equal(prettyDate(now, "2008/01/28 22:24:30"), "just now");
        equal(prettyDate(now, "2008/01/28 22:23:30"), "1 minute ago");
        equal(prettyDate(now, "2008/01/28 21:23:30"), "1 hour ago");
        equal(prettyDate(now, "2008/01/27 22:23:30"), "Yesterday");
        equal(prettyDate(now, "2008/01/26 22:23:30"), "2 days ago");
        equal(prettyDate(now, "2007/01/26 22:23:30"), undefined);
    });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="qunit"&gt;&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre> 
        <ul> 
         <li><a href="http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/4-qunit-test.html">Run this example.</a><sup class="po" id="note-9"><a href="#9">9</a></sup></li> 
        </ul> 
        <p>Three sections are worth a closer look here.&nbsp;Along with the usual HTML boilerplate, we have three included files: two files for QUnit (<code>qunit.css</code> and <code>qunit.js</code>) and the previous <code>prettydate.js</code>.</p> 
        <p>Then, there’s another script block with the actual tests. The <code>test</code> method is called once, passing a string as the first argument (naming the test) and passing a function as the second argument (which will run the actual code for this test). This code then defines the <code>now</code> variable, which gets reused below, then calls the <code>equal</code> method a few times with varying arguments. The <code>equal</code> method is one of several assertions that QUnit provides. The first argument is the result of a call to <code>prettyDate</code>, with the <code>now</code> variable as the first argument and a <code>date</code> string as the second. The second argument to <code>equal</code> is the expected result. If the two arguments to <code>equal</code> are the same value, then the assertion will pass; otherwise, it will fail.</p> 
        <p>Finally, in the body element is some QUnit-specific markup. These elements are optional. If present, QUnit will use them to output the test results.</p> 
        <p>The result is this:</p> 
        <p><a href="https://www.smashingmagazine.com/wp-content/uploads/2012/03/4a-green.png"><img class="alignnone wp-image-118914 size-full" title="4a-green" src="https://www.smashingmagazine.com/wp-content/uploads/2012/03/4a-green.png" alt="javascript unit testing" width="491" height="204"></a><sup class="po" id="note-10"><a href="#10">10</a></sup></p> 
        <p>With a failed test, the result would look something like this:</p> 
        <p><a href="https://www.smashingmagazine.com/wp-content/uploads/2012/03/4b-red.png"><img class="alignnone wp-image-118915 size-full" title="4b-red" src="https://www.smashingmagazine.com/wp-content/uploads/2012/03/4b-red.png" alt="javascript unit testing" width="495" height="454"></a><sup class="po" id="note-11"><a href="#11">11</a></sup></p> 
        <p>Because the test contains a failing assertion, QUnit doesn’t collapse the results for that test, and we can see immediately what went wrong. Along with the output of the expected and actual values, we get a <code>diff</code> between the two, which can be useful for comparing larger strings. Here, it’s pretty obvious what went wrong.</p> 
        <h3 id="refactoring-stage-1">Refactoring, Stage 1 <a href="#refactoring-stage-1" aria-label="Link to section 'Refactoring, Stage 1'" class="sr hsl">Link</a></h3> 
        <p>The assertions are currently somewhat incomplete because we aren’t yet testing the <code>n weeks ago</code> variant. Before adding it, we should consider refactoring the test code. Currently, we are calling <code>prettyDate</code> for each assertion and passing the <code>now</code> argument. We could easily refactor this into a custom assertion method:</p> 
        <pre><code class="language-javascript">test("prettydate basics", function() {
    function date(then, expected) {
        equal(prettyDate("2008/01/28 22:25:00", then), expected);
    }
    date("2008/01/28 22:24:30", "just now");
    date("2008/01/28 22:23:30", "1 minute ago");
    date("2008/01/28 21:23:30", "1 hour ago");
    date("2008/01/27 22:23:30", "Yesterday");
    date("2008/01/26 22:23:30", "2 days ago");
    date("2007/01/26 22:23:30", undefined);
});</code></pre> 
        <ul> 
         <li><a href="http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/5-qunit-test-refactored.html">Run this example.</a><sup class="po" id="note-12"><a href="#12">12</a></sup></li> 
        </ul> 
        <p>Here we’ve extracted the call to <code>prettyDate</code> into the <code>date</code> function, inlining the <code>now</code> variable into the function. We end up with just the relevant data for each assertion, making it easier to read, while the underlying abstraction remains pretty obvious.</p> 
        <h3 id="testing-the-dom-manipulation">Testing The DOM manipulation <a href="#testing-the-dom-manipulation" aria-label="Link to section 'Testing The DOM manipulation'" class="sr hsl">Link</a></h3> 
        <p>Now that the <code>prettyDate</code> function is tested well enough, let’s shift our focus back to the initial example. Along with the <code>prettyDate</code> function, it also selected some DOM elements and updated them, within the <code>window</code> load event handler. Applying the same principles as before, we should be able to refactor that code and test it. In addition, we’ll introduce a module for these two functions, to avoid cluttering the global namespace and to be able to give these individual functions more meaningful names.</p> 
        <pre><code class="language-markup tmp-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
    &lt;title&gt;Refactored date examples&lt;/title&gt;
    &lt;link rel="stylesheet" href="qunit.css" /&gt;
    &lt;script src="qunit.js"&gt;&lt;/script&gt;
    &lt;script src="prettydate2.js"&gt;&lt;/script&gt;
    &lt;script&gt;
    test("prettydate.format", function() {
        function date(then, expected) {
            equal(prettyDate.format("2008/01/28 22:25:00", then), expected);
        }
        date("2008/01/28 22:24:30", "just now");
        date("2008/01/28 22:23:30", "1 minute ago");
        date("2008/01/28 21:23:30", "1 hour ago");
        date("2008/01/27 22:23:30", "Yesterday");
        date("2008/01/26 22:23:30", "2 days ago");
        date("2007/01/26 22:23:30", undefined);
    });

    test("prettyDate.update", function() {
        var links = document.getElementById("qunit-fixture").getElementsByTagName("a");
        equal(links[0].innerHTML, "January 28th, 2008");
        equal(links[2].innerHTML, "January 27th, 2008");
        prettyDate.update("2008-01-28T22:25:00Z");
        equal(links[0].innerHTML, "2 hours ago");
        equal(links[2].innerHTML, "Yesterday");
    });

    test("prettyDate.update, one day later", function() {
        var links = document.getElementById("qunit-fixture").getElementsByTagName("a");
        equal(links[0].innerHTML, "January 28th, 2008");
        equal(links[2].innerHTML, "January 27th, 2008");
        prettyDate.update("2008-01-28T22:25:00Z");
        equal(links[0].innerHTML, "Yesterday");
        equal(links[2].innerHTML, "2 days ago");
    });
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="qunit"&gt;&lt;/div&gt;
    &lt;div id="qunit-fixture"&gt;
        &lt;ul&gt;
            &lt;li class="entry" id="post57"&gt;
                &lt;p&gt;blah blah blah…&lt;/p&gt;
                &lt;small class="extra"&gt;
                    Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-28T20:24:17Z"&gt;January 28th, 2008&lt;/a&gt;&lt;/span&gt;
                    by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
                &lt;/small&gt;
            &lt;/li&gt;
            &lt;li class="entry" id="post57"&gt;
                &lt;p&gt;blah blah blah…&lt;/p&gt;
                &lt;small class="extra"&gt;
                    Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-27T22:24:17Z"&gt;January 27th, 2008&lt;/a&gt;&lt;/span&gt;
                    by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
                &lt;/small&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre> 
        <p>Here’s the contents of <code>prettydate2.js</code>:</p> 
        <pre><code class="language-javascript">var prettyDate = {
    format: function(now, time){
        var date = new Date(time || ""),
            diff = (((new Date(now)).getTime() - date.getTime()) / 1000),
            day_diff = Math.floor(diff / 86400);

        if (isNaN(day_diff) || day_diff &lt; 0 || day_diff &gt;= 31) {
            return;
        }

        return day_diff === 0 &amp;&amp; (
                diff &lt; 60 &amp;&amp; "just now" ||
                diff &lt; 120 &amp;&amp; "1 minute ago" ||
                diff &lt; 3600 &amp;&amp; Math.floor( diff / 60 ) + " minutes ago" ||
                diff &lt; 7200 &amp;&amp; "1 hour ago" ||
                diff &lt; 86400 &amp;&amp; Math.floor( diff / 3600 ) + " hours ago") ||
            day_diff === 1 &amp;&amp; "Yesterday" ||
            day_diff &lt; 7 &amp;&amp; day_diff + " days ago" ||
            day_diff &lt; 31 &amp;&amp; Math.ceil( day_diff / 7 ) + " weeks ago";
    },

    update: function(now) {
        var links = document.getElementsByTagName("a");
        for ( var i = 0; i &lt; links.length; i++ ) {
            if (links[i].title) {
                var date = prettyDate.format(now, links[i].title);
                if (date) {
                    links[i].innerHTML = date;
                }
            }
        }
    }
};</code></pre> 
        <ul> 
         <li><a href="http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/6-qunit-dom.html">Run this example.</a><sup class="po" id="note-13"><a href="#13">13</a></sup></li> 
        </ul> 
        <p>The new <code>prettyDate.update</code> function is an extract of the initial example, but with the <code>now</code> argument to pass through to <code>prettyDate.format</code>. The QUnit-based test for that function starts by selecting all <code>a</code> elements within the <code>#qunit-fixture</code> element. In the updated markup in the body element, the <code>&lt;div id="qunit-fixture"&gt;…&lt;/div&gt;</code> is new. It contains an extract of the markup from our initial example, enough to write useful tests against. By putting it in the <code>#qunit-fixture</code> element, we don’t have to worry about DOM changes from one test affecting other tests, because QUnit will automatically reset the markup after each test.</p> 
        <p>Let’s look at the first test for <code>prettyDate.update</code>. After selecting those anchors, two assertions verify that these have their initial text values. Afterwards, <code>prettyDate.update</code> is called, passing along a fixed date (the same as in previous tests). Afterwards, two more assertions are run, now verifying that the <code>innerHTML</code> property of these elements have the correctly formatted date, “2 hours ago” and “Yesterday.”</p> 
        <h3 id="refactoring-stage-2">Refactoring, Stage 2 <a href="#refactoring-stage-2" aria-label="Link to section 'Refactoring, Stage 2'" class="sr hsl">Link</a></h3> 
        <p>The next test, <code>prettyDate.update, one day later</code>, does nearly the same thing, except that it passes a different date to <code>prettyDate.update</code> and, therefore, expects different results for the two links. Let’s see if we can refactor these tests to remove the duplication.</p> 
        <pre><code class="language-markup tmp-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
    &lt;title&gt;Refactored date examples&lt;/title&gt;
    &lt;link rel="stylesheet" href="qunit.css" /&gt;
    &lt;script src="qunit.js"&gt;&lt;/script&gt;
    &lt;script src="prettydate2.js"&gt;&lt;/script&gt;
    &lt;script&gt;
    test("prettydate.format", function() {
        function date(then, expected) {
            equal(prettyDate.format("2008/01/28 22:25:00", then), expected);
        }
        date("2008/01/28 22:24:30", "just now");
        date("2008/01/28 22:23:30", "1 minute ago");
        date("2008/01/28 21:23:30", "1 hour ago");
        date("2008/01/27 22:23:30", "Yesterday");
        date("2008/01/26 22:23:30", "2 days ago");
        date("2007/01/26 22:23:30", undefined);
    });

    function domtest(name, now, first, second) {
        test(name, function() {
            var links = document.getElementById("qunit-fixture").getElementsByTagName("a");
            equal(links[0].innerHTML, "January 28th, 2008");
            equal(links[2].innerHTML, "January 27th, 2008");
            prettyDate.update(now);
            equal(links[0].innerHTML, first);
            equal(links[2].innerHTML, second);
        });
    }
    domtest("prettyDate.update", "2008-01-28T22:25:00Z:00", "2 hours ago", "Yesterday");
    domtest("prettyDate.update, one day later", "2008-01-29T22:25:00Z:00", "Yesterday", "2 days ago");
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;div id="qunit"&gt;&lt;/div&gt;
    &lt;div id="qunit-fixture"&gt;
        &lt;ul&gt;
            &lt;li class="entry" id="post57"&gt;
                &lt;p&gt;blah blah blah…&lt;/p&gt;
                &lt;small class="extra"&gt;
                    Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-28T20:24:17Z"&gt;January 28th, 2008&lt;/a&gt;&lt;/span&gt;
                    by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
                &lt;/small&gt;
            &lt;/li&gt;
            &lt;li class="entry" id="post57"&gt;
                &lt;p&gt;blah blah blah…&lt;/p&gt;
                &lt;small class="extra"&gt;
                    Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-27T22:24:17Z"&gt;January 27th, 2008&lt;/a&gt;&lt;/span&gt;
                    by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
                &lt;/small&gt;
            &lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre> 
        <ul> 
         <li><a href="http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/7-qunit-dom-refactored.html">Run this example.</a><sup class="po" id="note-14"><a href="#14">14</a></sup></li> 
        </ul> 
        <p>Here we have a new function called <code>domtest</code>, which encapsulates the logic of the two previous calls to test, introducing arguments for the test name, the date string and the two expected strings. It then gets called twice.</p> 
        <h3 id="back-to-the-start">Back To The Start <a href="#back-to-the-start" aria-label="Link to section 'Back To The Start'" class="sr hsl">Link</a></h3> 
        <p>With that in place, let’s go back to our initial example and see what that looks like now, after the refactoring.</p> 
        <pre><code class="language-markup tmp-html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /&gt;
    &lt;title&gt;Final date examples&lt;/title&gt;
    &lt;script src="prettydate2.js"&gt;&lt;/script&gt;
    &lt;script&gt;
    window.onload = function() {
        prettyDate.update("2008-01-28T22:25:00Z");
    };
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;ul&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-28T20:24:17Z"&gt;&lt;span&gt;January 28th, 2008&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;
        by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
    &lt;/small&gt;
&lt;/li&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-27T22:24:17Z"&gt;&lt;span&gt;January 27th, 2008&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;
        by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
    &lt;/small&gt;
&lt;/li&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-26T22:24:17Z"&gt;&lt;span&gt;January 26th, 2008&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;
        by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
    &lt;/small&gt;
&lt;/li&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-25T22:24:17Z"&gt;&lt;span&gt;January 25th, 2008&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;
        by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
    &lt;/small&gt;
&lt;/li&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-24T22:24:17Z"&gt;&lt;span&gt;January 24th, 2008&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;
        by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;

    &lt;/small&gt;
&lt;/li&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-14T22:24:17Z"&gt;&lt;span&gt;January 14th, 2008&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;
        by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
    &lt;/small&gt;
&lt;/li&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2008-01-04T22:24:17Z"&gt;&lt;span&gt;January 4th, 2008&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;
        by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
    &lt;/small&gt;
&lt;/li&gt;
&lt;li class="entry" id="post57"&gt;
    &lt;p&gt;blah blah blah…&lt;/p&gt;
    &lt;small class="extra"&gt;
        Posted &lt;span class="time"&gt;&lt;a href="/2008/01/blah/57/" title="2007-12-15T22:24:17Z"&gt;&lt;span&gt;December 15th, 2008&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;
        by &lt;span class="author"&gt;&lt;a href="/john/"&gt;John Resig&lt;/a&gt;&lt;/span&gt;
    &lt;/small&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre> 
        <ul> 
         <li><a href="http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/8-endstate.html">Run this example.</a><sup class="po" id="note-15"><a href="#15">15</a></sup></li> 
        </ul> 
        <p>For a non-static example, we’d remove the argument to <code>prettyDate.update</code>. All in all, the refactoring is a huge improvement over the first example. And thanks to the <code>prettyDate</code> module that we introduced, we can add even more functionality without clobbering the global namespace.</p> 
        <h3 id="conclusion">Conclusion <a href="#conclusion" aria-label="Link to section 'Conclusion'" class="sr hsl">Link</a></h3> 
        <p>Testing JavaScript code is not just a matter of using some test runner and writing a few tests; it usually requires some heavy structural changes when applied to code that has been tested only manually before. We’ve walked through an example of how to change the code structure of an existing module to run some tests using an ad-hoc testing framework, then replacing that with a more full-featured framework to get useful visual results.</p> 
        <p>QUnit itself has a lot more to offer, with specific support for testing asynchronous code such as timeouts, AJAX and events. Its visual test runner helps to debug code by making it easy to rerun specific tests and by providing stack traces for failed assertions and caught exceptions. For further reading, check out the <a href="http://qunitjs.com/cookbook">QUnit Cookbook</a><sup class="po" id="note-16"><a href="#16">16</a></sup>.</p> 
        <p><em>(al) (km)</em></p> 
        <h4 class="po" id="footnotes">Footnotes <a href="#footnotes" aria-label="Link to section 'Footnotes'" class="sr hsl">Link</a></h4>
        <ol class="po">
         <li id="#1"><a href="#note-1">1 https://www.smashingmagazine.com/2012/11/writing-fast-memory-efficient-javascript/</a></li>
         <li id="#2"><a href="#note-2">2 https://www.smashingmagazine.com/2015/02/avoid-javascript-mistakes-with-static-code-analyzer/</a></li>
         <li id="#3"><a href="#note-3">3 https://www.smashingmagazine.com/2011/11/analyzing-network-characteristics-using-javascript-and-the-dom-part-1/</a></li>
         <li id="#4"><a href="#note-4">4 https://www.smashingmagazine.com/2010/01/find-the-right-javascript-solution-with-a-7-step-test/</a></li>
         <li id="#5"><a href="#note-5">5 http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/1-mangled.html</a></li>
         <li id="#6"><a href="#note-6">6 http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/2-getting-somewhere.html</a></li>
         <li id="#7"><a href="#note-7">7 http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/3-first-test.html</a></li>
         <li id="#8"><a href="#note-8">8 http://qunitjs.com</a></li>
         <li id="#9"><a href="#note-9">9 http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/4-qunit-test.html</a></li>
         <li id="#10"><a href="#note-10">10 https://www.smashingmagazine.com/wp-content/uploads/2012/03/4a-green.png</a></li>
         <li id="#11"><a href="#note-11">11 https://www.smashingmagazine.com/wp-content/uploads/2012/03/4b-red.png</a></li>
         <li id="#12"><a href="#note-12">12 http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/5-qunit-test-refactored.html</a></li>
         <li id="#13"><a href="#note-13">13 http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/6-qunit-dom.html</a></li>
         <li id="#14"><a href="#note-14">14 http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/7-qunit-dom-refactored.html</a></li>
         <li id="#15"><a href="#note-15">15 http://provide.smashingmagazine.com/introduction-to-js-unit-testing-code/8-endstate.html</a></li>
         <li id="#16"><a href="#note-16">16 http://qunitjs.com/cookbook</a></li>
        </ol> 
        <div class="lt">
         <a href="https://www.smashingmagazine.com/tag/javascript/">JavaScript</a>
         <a href="https://www.smashingmagazine.com/tag/testing/">Testing</a>
        </div> 
        <p> <a href="#top" class="top">? Back to top</a> <a onclick="clicky.log('#sharelink-clicked');" class="sot single" href="https://twitter.com/intent/tweet?original_referer=https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/&amp;source=tweetbutton&amp;text=Introduction%20To%20JavaScript%20Unit%20Testing&amp;url=https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/&amp;via=smashingmag">Tweet it</a><a onclick="clicky.log('#sharelink-clicked');" class="sot single" href="http://www.facebook.com/sharer/sharer.php?u=https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/">Share on Facebook</a></p> 
        <p></p> 
       </article> 
       <div class="bio clearfix"> 
        <div class="grv"> 
         <img src="https://secure.gravatar.com/avatar/?s=78&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/8ba7af140cf671c5cab61154d5ee19ef?s=78&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/8ba7af140cf671c5cab61154d5ee19ef?s=156&amp;d=mm&amp;r=g" class="avatar" height="78" width="78"> 
        </div> 
        <div class="about"> 
         <a rel="author" class="poa" href="https://www.smashingmagazine.com/author/joern-zaefferer/?rel=author" title="Posts by Jörn Zaefferer">Jörn Zaefferer</a> 
         <p>Jörn is a freelance web developer, consultant and trainer, residing in Cologne, Germany. Jörn evolved jQuery’s testsuite into QUnit, a JavaScript unit testing framework, and maintains it. He created and maintains a number of popular plugins. As a jQuery UI development lead, he focuses on the development of new plugins, widgets and utilities.</p> 
        </div> 
       </div>
       <div class="adv"> 
        <div class="oa_zone--ad commentspnsrtarget" id="commentspnsrtarget" data-ad-name="Comment Sponsor" data-ad-zone="26" data-ad-media="all"></div> 
       </div> 
       <ul id="comments" class="sub-tabs clearfix"> 
        <li><a href="#show-comments" class="active">15 Comments</a></li> 
       </ul> 
       <div id="discussion" class="subtab-pages discussion"> 
        <div id="show-comments"> 
         <ol id="comments-overview" class="cl"> 
          <li class="comment even thread-even depth-1 clearfix"> <span class="cn">1</span> 
           <div class="c" id="comment-209924"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/083ccee2857070514ce4348d316313af?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/083ccee2857070514ce4348d316313af?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>charles</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209924" title="Jump to Commentlink #1">June 27, 2012 4:53 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>Thanks. Still trying to get my head round it all. but once I have should work great</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209924" class="rating__value">
               0
              </div> 
              <div class="rating__stars" data-comment_id="209924"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="44188c0516" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="6278050b1a" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt thread-odd thread-alt depth-1 clearfix"> <span class="cn">2</span> 
           <div class="c" id="comment-209925"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/a252f25af8c4aacff800760b0b5433b2?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/a252f25af8c4aacff800760b0b5433b2?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Hugo Cabrera</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209925" title="Jump to Commentlink #2">June 27, 2012 4:56 pm</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>Excellent no words!!!!</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209925" class="rating__value">
               0
              </div> 
              <div class="rating__stars" data-comment_id="209925"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="21b821c874" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="e6b9274dbd" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even thread-even depth-1 clearfix"> <span class="cn">3</span> 
           <div class="c" id="comment-209926"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/9d2e715baab928f5bedb837bfcb70b2b?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/9d2e715baab928f5bedb837bfcb70b2b?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>blacksonic</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209926" title="Jump to Commentlink #3">June 28, 2012 4:59 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>Good article but…<br> Making a global object literal and in its methods reference it globally gives u bad karma</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209926" class="rating__value rating__value--negative">
               -1
              </div> 
              <div class="rating__stars" data-comment_id="209926"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="81973f89f4" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="8641c6979a" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt thread-odd thread-alt depth-1 clearfix"> <span class="cn">4</span> 
           <div class="c" id="comment-209927"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/329331e1689461ba761fb1e85b27422e?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/329331e1689461ba761fb1e85b27422e?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Mark Simchock</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209927" title="Jump to Commentlink #4">June 29, 2012 5:10 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>Good stuff. Thanks.</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209927" class="rating__value">
               0
              </div> 
              <div class="rating__stars" data-comment_id="209927"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="9f31cb3c91" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="2b1ff47abb" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even thread-even depth-1 clearfix"> <span class="cn">5</span> 
           <div class="c" id="comment-209928"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/c72094919478984cbb8c2aa1626199b8?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/c72094919478984cbb8c2aa1626199b8?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Pat</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209928" title="Jump to Commentlink #5">June 29, 2012 10:28 pm</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>I generally write my JS modules using the Revealing Module Pattern, i.e. only exposing some methods while keeping others internal to object. I’m looking to integrate writing tests (in particular jasmine.js) into my development workflow but still can’t figure out how to apply tests to my “private” code.</p> 
             <p>Have you had any experience with this? In all the examples I’ve seen, the functions being tested are all public.</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209928" class="rating__value rating__value--positive">
               1
              </div> 
              <div class="rating__stars" data-comment_id="209928"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="f93e8ac769" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="222559327e" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt thread-odd thread-alt depth-1 clearfix"> <span class="cn">6</span> 
           <div class="c" id="comment-209929"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/c2bde7d7dfc8623f121b0eb5a7102930?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/c2bde7d7dfc8623f121b0eb5a7102930?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Raymond Camden</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209929" title="Jump to Commentlink #6">July 1, 2012 8:02 pm</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>Good article. Btw, the last link, to the QUnit Cookbook, is incorrect. Remove the “.html” and it will be ok.</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209929" class="rating__value">
               0
              </div> 
              <div class="rating__stars" data-comment_id="209929"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="c7f49f86ef" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="93264f88c8" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even thread-even depth-1 clearfix"> <span class="cn">7</span> 
           <div class="c" id="comment-209930"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/b3a0892f572b985f6db42d7e565d08f8?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/b3a0892f572b985f6db42d7e565d08f8?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Pedja</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209930" title="Jump to Commentlink #7">July 2, 2012 3:26 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>Great article!<br> PS. Please update link for QUnit Cookbook (should be <a href="http://qunitjs.com/cookbook/" rel="nofollow">http://qunitjs.com/cookbook/</a>)</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209930" class="rating__value">
               0
              </div> 
              <div class="rating__stars" data-comment_id="209930"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="bf893fc716" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="141c18c648" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment byuser comment-author-admin odd alt thread-odd thread-alt depth-1 clearfix"> <span class="cn">8</span> 
           <div class="c" id="comment-209931"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/8ba7af140cf671c5cab61154d5ee19ef?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/8ba7af140cf671c5cab61154d5ee19ef?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Jörn Zaefferer</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209931" title="Jump to Commentlink #8">July 2, 2012 8:17 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>@Pat: Why make methods private in the first place? You can already see the obvious drawback to that.</p> 
             <p>Less obvious are the performance implications of that pattern. Usually a prototypal based inheritance has much less overhead and encourages keeping individual methods public, which makes testing quite easy. If you actually worry about defining a public API, consider making it clear which methods are actually part of the public API, and which aren’t, but don’t try to actually hide anything. In my experience: Not worth it.</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209931" class="rating__value rating__value--negative">
               -2
              </div> 
              <div class="rating__stars" data-comment_id="209931"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="1d003f80a8" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="ba0c5ce677" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even thread-even depth-1 clearfix"> <span class="cn">9</span> 
           <div class="c" id="comment-209932"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/c7773cc658b976a0de5eed4d257ff5c5?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/c7773cc658b976a0de5eed4d257ff5c5?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Clayton</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209932" title="Jump to Commentlink #9">July 3, 2012 8:45 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>@Pat To answer your question, you can write unit tests for objects with private methods by testing the behavior of your object, not the specific implementation. If you’re using Jasmine, you should find this pretty straightforward since so many of the examples are geared towards describing behavior.</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209932" class="rating__value rating__value--positive">
               3
              </div> 
              <div class="rating__stars" data-comment_id="209932"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="02732e634f" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="3c98212ed8" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt thread-odd thread-alt depth-1 clearfix"> <span class="cn">10</span> 
           <div class="c" id="comment-209933"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/0091d2ebb2e4f2ded73026881efcb6a2?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/0091d2ebb2e4f2ded73026881efcb6a2?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Polly</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209933" title="Jump to Commentlink #10">August 6, 2012 9:50 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>Great article!</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209933" class="rating__value">
               0
              </div> 
              <div class="rating__stars" data-comment_id="209933"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="d9a5da5743" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="4ecaaa409b" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even thread-even depth-1 clearfix"> <span class="cn">11</span> 
           <div class="c" id="comment-209934"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/02e17fc40e24223e0052e886e752d93d?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/02e17fc40e24223e0052e886e752d93d?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Bleyder</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209934" title="Jump to Commentlink #11">March 27, 2013 5:31 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>I think there is a typo in the code of section “Testing The DOM manipulation”. In the “prettyDate.update, one day later” test, the date argument passed to prettyDate.update function should be “2008-01-29T22:25:00Z”, not “2008-01-28T22:25:00Z”.</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209934" class="rating__value rating__value--positive">
               1
              </div> 
              <div class="rating__stars" data-comment_id="209934"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="3d48205e57" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="2a4eb1abdb" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt thread-odd thread-alt depth-1 clearfix"> <span class="cn">12</span> 
           <div class="c" id="comment-209935"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/6203aa93f3c69bae574287cad3b54518?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/6203aa93f3c69bae574287cad3b54518?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Ivan Ketler</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209935" title="Jump to Commentlink #12">February 18, 2014 2:10 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>I see that it’s a bit old, however…</p> 
             <p>First of all, thanks for the paper and the info. Currently I’m involved in GUI unit testing, and with the heavyweight stuff like Java Swing I’m quite fine, but I needed something for the HTML5/Ajax/JS world too, and this QUnit seems to be a good start for me.</p> 
             <p>The point is well taken, and makes it easy even for a newbie to start unit testing JS code. Great work.</p> 
             <p>There’s just one note. IMHO, the “Refactoring, Stage 1” rather hides the meaning than makes it easier to understand. That “date” function gives no real value, just hinders the “now” into somewhere else. I’m not sure that I’d even introduce the “now” local variable, and I’m pretty sure that I wouldn’t ever refactor it. The first version is much more readable for me, and I suggest others to consider why we should make the tests any shorter. The easier to understand a test is the better, especially if one wants to write the tests first, and design the code only afterwards (Test Driven Development, or even better, Behaviour Driven Development). As far as I see, the JavaScript has the general assumption of being “unreadable”, and thus hardly maintainable, mostly because many of the JS experts “abbreviate” their code (that is, obfuscate it).</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209935" class="rating__value">
               0
              </div> 
              <div class="rating__stars" data-comment_id="209935"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="7c96f8e54f" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="59bd9f90be" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even thread-even depth-1 clearfix"> <span class="cn">13</span> 
           <div class="c" id="comment-209936"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/f611c8e07bf9df907b5961793f933aa5?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/f611c8e07bf9df907b5961793f933aa5?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Diego</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-209936" title="Jump to Commentlink #13">February 26, 2014 1:48 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>Good introduction.</p> 
             <p>@Ivan</p> 
             <p>In all languages ??there unreadable code and there readable code (and structured).<br> The readability, mainly depends on the developer.</p> 
             <p>There are other javascript frameworks for writing unit tests expressive :</p> 
             <p><a href="https://github.com/moll/js-must" rel="nofollow">https://github.com/moll/js-must</a><br> <a href="https://github.com/visionmedia/should.js/" rel="nofollow">https://github.com/visionmedia/should.js/</a><br> <a href="http://unitjs.com" rel="nofollow">http://unitjs.com</a><br> <a href="http://nodejs.org/api/assert.html" rel="nofollow">http://nodejs.org/api/assert.html</a></p> 
             <p>and many other :)</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--209936" class="rating__value rating__value--negative">
               -1
              </div> 
              <div class="rating__stars" data-comment_id="209936"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="826dc9fb1f" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="67f40eae8a" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment odd alt thread-odd thread-alt depth-1 clearfix"> <span class="cn">14</span> 
           <div class="c" id="comment-1221260"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/6ed68cdda5505b10186c3dea25a71ecb?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/6ed68cdda5505b10186c3dea25a71ecb?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>Jimmy</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-1221260" title="Jump to Commentlink #14">August 17, 2014 11:29 pm</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p>As Bleyder mentioned over a year ago, there’s a typo in the test for ‘prettyDate.update, one day late’. Regrettably, the typo is that the ‘now’ date is identical to the previous test, which is only obviously wrong because of the refactoring in the next section. On first reading, it’s not obvious what is being demonstrated, due to this typo.</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--1221260" class="rating__value rating__value--positive">
               2
              </div> 
              <div class="rating__stars" data-comment_id="1221260"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="3d9b0839c5" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="30c61fdcc8" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
          <li class="comment even thread-even depth-1 clearfix"> <span class="cn">15</span> 
           <div class="c" id="comment-1247460"> 
            <div class="cau clearfix"> 
             <img src="https://secure.gravatar.com/avatar/?s=38&amp;d=mm&amp;r=g" data-src="https://secure.gravatar.com/avatar/f6ce95a97cecbde087c8763ab1e82e3b?s=38&amp;d=mm&amp;r=g" data-src-retina="https://secure.gravatar.com/avatar/f6ce95a97cecbde087c8763ab1e82e3b?s=76&amp;d=mm&amp;r=g" class="avatar" height="38" width="38"> 
             <div class="aum"> 
              <h3>dsfafdas</h3> 
              <span class="dati"><a href="https://www.smashingmagazine.com/2012/06/introduction-to-javascript-unit-testing/#comment-1247460" title="Jump to Commentlink #15">November 22, 2014 11:29 am</a></span> 
             </div> 
            </div> 
            <div class="ctx"> 
             <p> for(i=0;i&lt;=10;i++)<br> {<br> window.open();<br> }</p> 
            </div> 
            <div class="com"> 
             <div class="reply"></div> 
             <div class="rating__container clearfix" aria-live="polite"> 
              <div id="rating__value--1247460" class="rating__value rating__value--negative">
               -18
              </div> 
              <div class="rating__stars" data-comment_id="1247460"> 
               <a class="rating__button rating__button--up" href="#" data-id="1" data-nonce="df86415e3d" title="Vote up!"></a> 
               <a class="rating__button rating__button--down" href="#" data-id="-1" data-nonce="2a2283742c" title="Vote down!"></a> 
              </div> 
             </div> 
            </div> 
           </div> </li>
          <!-- #comment-## --> 
         </ol> 
        </div> 
       </div> 
      </div> 
     </div> 
     <p><a href="#top" class="top" title="Jump to the top of the page">? Back to top</a></p> 
    </div>
   </div>
  </main> 
  <aside id="wpsidebar" class="sb" role="complementary"> 
   <div class="col side"> 
    <section class="mise sf clearfix" role="search"> 
     <form id="search_2" method="get" action="https://www.smashingmagazine.com/search-results/" target="_top"> 
      <label class="sl" for="searching_2">Search on Smashing Magazine</label> 
      <input id="searching_2" name="q" type="text" placeholder="e.g. JavaScript"> 
      <button class="search_submit" type="submit">Search</button> 
      <input type="hidden" name="cx" value="partner-pub-6779860845561969:5884617103"> 
      <input type="hidden" name="cof" value="FORID:10"> 
      <input type="hidden" name="ie" value="UTF-8"> 
     </form> 
    </section> 
    <section class="bw faw"> 
     <p class="awithus"> <a class="ed-us" href="mailto:sponsoring@smashingmagazine.com"> Become a sponsor! </a> </p> 
     <div id="spnsrlist-a" class="oa_zone--sponsor" data-sponsor-lines="1"></div> 
    </section> 
    <section class="sf wg"> 
     <h3> <a href="https://www.smashingmagazine.com/the-smashing-newsletter/"> <img src="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/smnl.png" alt="198,064 fine folks have signed up to our Newsletter already, when will you?"> Smashing Newsletter </a> </h3> 
     <p>Subscribe to our email newsletter for useful tips and valuable resources, sent out every second Tuesday.</p> 
     <div id="mc_embed_signup" class="mcf"> 
      <form action="//smashingmagazine.us1.list-manage.com/subscribe/post?u=16b832d9ad4b28edf261f34df&amp;id=a1666656e0" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate"> 
       <label for="mcer-EMAIL" class="sr">Please provide us with your email address:</label> 
       <input id="mcer-EMAIL" name="email" autocomplete="email" type="text" placeholder="email address"> 
       <button id="mc-embedded-subscribe" name="subscribe" class="submit" type="submit">Subscribe</button> 
      </form> 
      <a href="https://www.smashingmagazine.com/the-smashing-newsletter/"><img class="mcc" src="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/mc-counter.svg" alt="Currently, we have 191728 subscribers to our newsletter"></a> 
     </div> 
    </section> 
    <section class="bw"> 
     <div id="spnsrlist-b" class="oa_zone--sponsor" data-sponsor-lines="3"></div> 
    </section> 
    <section class="so wg"> 
     <div class="fir"> 
      <a href="https://www.smashingmagazine.com/design-systems-book" style="border:0;"> <img src="https://www.smashingmagazine.com/wp-content/uploads/2017/06/cover-design-systems-2-sidebar.png" alt="Design Systems Book" width="94" height="131"> </a> 
      <p> As designing static pages has become untenable, many have started to approach design in a modular way. In this book, we’ll identify what makes an <strong>effective design system</strong> that empowers teams to create great digital products. <a href="https://www.smashingmagazine.com/design-systems-book/">Get the book now ?</a> </p> 
     </div> 
     <div class="sec"> 
      <a href="https://www.smashingmagazine.com/inclusive-design-patterns" style="border: 0;"> <img src="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/inclusive-design-patterns.png" alt="Inclusive Design Patterns by Heydon Pickering" width="94" height="135"> </a> 
      <p> Today, too many websites are still inaccessible. In our new book <em>Inclusive Design Patterns</em>, we explore how to craft <strong>flexible front-end design patterns</strong> and make future-proof and accessible interfaces without extra effort. Hardcover, 312 pages. <a href="https://www.smashingmagazine.com/inclusive-design-patterns">Get the book ?</a> </p> 
     </div> 
     <div class="thi"> 
      <a href="https://www.smashingmagazine.com/sketch-handbook" style="border:0;"> <img src="https://www.smashingmagazine.com/wp-content/uploads/2016/11/sketch-handbook-sidebar-opt-v2.png" alt="The Sketch Handbook, with tips and tricks for designing with Sketch." width="94" height="142"></a> 
      <p>Meet the new <em>Sketch Handbook</em>, our brand <strong>new Smashing book</strong> that will help you master all the tricky, advanced facets of Sketch. Filled with <strong>practical examples and tutorials in 12 chapters</strong>, the book will help you become more proficient in your work. <a href="https://www.smashingmagazine.com/sketch-handbook">Get the book</a>.</p> 
     </div> 
    </section> 
    <section class="bw"> 
     <div id="spnsrlist-c" class="oa_zone--sponsor" data-sponsor-lines="2"></div> 
    </section> 
    <section class="mt wg"> 
     <a href="http://mediatemple.net"> <img data-src="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/mediatemple.svg" alt="Media Temple Logo" width="94" height="94"> </a> 
     <p>We are proudly hosted on<br><a href="http://mediatemple.net/webhosting/vps/dedicated-server/">Media Temple Dedicated Servers</a>. Performance matters.</p> 
    </section> 
    <section> 
     <div class="oa_zone--ad" id="sidebar_special-1" data-ad-name="Sidebar Special 1" data-ad-zone="72"></div> 
    </section> 
    <section> 
     <div class="oa_zone--ad" id="sidebar_special-2" data-ad-name="Sidebar Special 2" data-ad-zone="72"></div> 
    </section> 
    <section> 
     <div class="oa_zone--ad" id="sidebar_special-3" data-ad-name="Sidebar Special 3" data-ad-zone="72"></div> 
    </section> 
    <section> 
     <div class="oa_zone--ad" id="sidebar_special-4" data-ad-name="Sidebar Special 4" data-ad-zone="72"></div> 
    </section> 
    <section class="wg"> 
     <div id="jobs"> 
      <h3> <a href="http://jobs.smashingmagazine.com/?pk_campaign=sm&amp;piwik_kwd=widget"> <span>Smashing Job Board</span> <img data-src="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/images/sm-jobs.png" alt="Smashing Jobs" width="36" height="34"> </a> </h3> 
      <ul class="tl">
       <li class="clearfix"><a href="http://feedproxy.google.com/~r/smjobs/~3/tIwStCTwaB4/2503551">Project Manager - Digital, Websites, Apps - Morley - (Saginaw) - FullTime</a><p> Project Manager - Digital, Websites, Apps We're looking for someone to lead digital projects from concept to completion and can communicate via ...</p></li>
       <li class="clearfix"><a href="http://feedproxy.google.com/~r/smjobs/~3/IJFsA_ueSpM/2503466">Senior Graphic Designer - Verily Magazine - (New York, New York) - FullTime</a><p>Graphic Designer Want to create something meaningful? This is your chance. Verily is currently looking for a full-time Graphic Designer t...</p></li>
      </ul> 
      <a class="cr" href="http://jobs.smashingmagazine.com?pk_campaign=sm&amp;piwik_kwd=widget"> View more job openings… </a> 
     </div> 
    </section> 
    <section class="clearfix"> 
     <div class="oa_zone--ad sidebar_sky" id="sidebar_sky-1" data-ad-name="Sidebar 1" data-ad-zone="40"></div> 
    </section> 
    <section class="clearfix"> 
     <div class="oa_zone--ad sidebar_sky" id="sidebar_sky-2" data-ad-name="Sidebar 2" data-ad-zone="40"></div> 
    </section> 
    <section class="so wg conf"> 
     <div class="fir"> 
      <a href="https://smashingconf.com/barcelona-2017"> <img data-src="https://www.smashingmagazine.com/wp-content/uploads/2017/06/smashingconf-barcelona-sidebar.png" alt="SmashingConf Barcelona 2017" height="100" width="100"> </a> 
      <p> Trends don’t matter, but techniques do. With <a href="https://smashingconf.com/barcelona-2017/">SmashingConf Barcelona</a>, we’ll explore problems, smart solutions and lessons learned from actual projects. Taking place on October 17–18 at the Palau de la Música Catalana. <a href="https://smashingconf.com/barcelona-2017/registration">To the tickets ?</a> </p> 
     </div> 
    </section> 
    <section class="bw"> 
     <div id="spnsrlist-d" class="oa_zone--sponsor" data-sponsor-lines="2"></div> 
    </section> 
    <section class="clearfix"> 
     <div class="oa_zone--ad sidebar_sky" id="sidebar_sky-3" data-ad-name="Sidebar 3" data-ad-zone="40"></div> 
    </section> 
   </div> 
  </aside> 
  <footer class="f" id="footer" role="contentinfo"> 
   <p class="stmt"> <em>With a commitment to quality content for the design community.</em> <br>Founded by Vitaly Friedman and Sven Lennartz. 2006-2017. <br>Made in Germany. <span class="flinks"> ? <a href="https://www.smashingmagazine.com/write-for-us/">Write for us</a> – <a href="https://www.smashingmagazine.com/contact/">Contact us</a> – <a href="https://www.smashingmagazine.com/privacy-policy-2/">Datenschutzerklärung</a> – <a href="https://www.smashingmagazine.com/about/">Impressum</a>. </span> </p> 
  </footer> 
  <script type="text/javascript">
/* <![CDATA[ */
var iec_config = {"ajax_url":"https:\/\/www.smashingmagazine.com\/wp-json\/inpsyde-extended-comments\/rate\/","nonce":"24d67f9092"};
/* ]]> */
</script> 
  <script id="loadjs__inpsyde_extended_comments_rating">!function(a){"use strict";a.loadOnloadJS=function(b,c){a.addEventListener("load",function(){loadJS(b,c)},!1)},a.loadJS=function(b,c){var d=a.document.createElement("script");d.src=b,d.async=c||!1,a.document.body.appendChild(d)}}(window);
 loadOnloadJS( "https://www.smashingmagazine.com/wp-content/plugins/extended-comments/assets/js/build.min.js?ver=1.0", 1 );</script>
  <script id="inlinejs__preload-polfill">!function(t){"use strict";var e=t.document,r={};r.isPreloadSupported=function(){try{return e.createElement("link").relList.supports("preload")}catch(t){return!1}},r.init=function(){for(var t=e.getElementsByTagName("link"),r=0;r<t.length;r++){var n=t[r];"preload"===n.rel&&"style"===n.getAttribute("as")&&(loadCSS(n.href,n),n.rel=null)}},window.loadCSS&&!r.isPreloadSupported()&&r.init()}(this);</script>
  <script id="loadjs__comment-reply"> loadOnloadJS( "https://www.smashingmagazine.com/wp-includes/js/comment-reply.min.js", 1 );</script>
  <script id="loadjs__smash-onload"> loadOnloadJS( "https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/js/onload.min.js?ver=6.4.13", 1 );</script>
  <script id="loadjs__smash-fastclick"> loadOnloadJS( "https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/js/fastclick.min.js?ver=6.4.13", 1 );</script>
  <script id="loadjs__smash-lazy-images"> loadOnloadJS( "https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/js/lazy-images.min.js?ver=6.4.13", 1 );</script>
  <script id="loadjs__smash-blocked"> loadOnloadJS( "https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/js/blocked.min.js?ver=6.4.13", 1 );</script>
  <script id="loadjs__codepen"> loadOnloadJS( "https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/js/codepen.js?ver=6.4.13", 1 );</script>
  <script id="loadjs__prism"> loadOnloadJS( "https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/js/prism.js?ver=6.4.13", 1 );</script>
  <script type="text/javascript">
/* <![CDATA[ */
var AdsI18N = {"Advertisement":"Advertisement"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://www.smashingmagazine.com/wp-content/themes/smashing-magazine/assets/js/ads.min.js?ver=6.4.13"></script> 
  <script id="inlinejs__wp-embed">!function(a,b){"use strict";function c(){if(!e){e=!0;var a,c,d,f,g=-1!==navigator.appVersion.indexOf("MSIE 10"),h=!!navigator.userAgent.match(/Trident.*rv:11\./),i=b.querySelectorAll("iframe.wp-embedded-content");for(c=0;c<i.length;c++)if(d=i[c],!d.getAttribute("data-secret")){if(f=Math.random().toString(36).substr(2,10),d.src+="#?secret="+f,d.setAttribute("data-secret",f),g||h)a=d.cloneNode(!0),a.removeAttribute("security"),d.parentNode.replaceChild(a,d)}else;}}var d=!1,e=!1;if(b.querySelector)if(a.addEventListener)d=!0;if(a.wp=a.wp||{},!a.wp.receiveEmbedMessage)if(a.wp.receiveEmbedMessage=function(c){var d=c.data;if(d.secret||d.message||d.value)if(!/[^a-zA-Z0-9]/.test(d.secret)){var e,f,g,h,i,j=b.querySelectorAll('iframe[data-secret="'+d.secret+'"]'),k=b.querySelectorAll('blockquote[data-secret="'+d.secret+'"]');for(e=0;e<k.length;e++)k[e].style.display="none";for(e=0;e<j.length;e++)if(f=j[e],c.source===f.contentWindow){if(f.removeAttribute("style"),"height"===d.message){if(g=parseInt(d.value,10),g>1e3)g=1e3;else if(200>~~g)g=200;f.height=g}if("link"===d.message)if(h=b.createElement("a"),i=b.createElement("a"),h.href=f.getAttribute("src"),i.href=d.value,i.host===h.host)if(b.activeElement===f)a.top.location.href=d.value}else;}},d)a.addEventListener("message",a.wp.receiveEmbedMessage,!1),b.addEventListener("DOMContentLoaded",c,!1),a.addEventListener("load",c,!1)}(window,document);</script> 
  <script>try {
			SmashingAds.loadAds();
		} catch ( e ) {
		}</script> 
  <script>try {
			SmashingAds.render( OA_output );
		} catch ( e ) {
		}</script>  
 </body>
</html>