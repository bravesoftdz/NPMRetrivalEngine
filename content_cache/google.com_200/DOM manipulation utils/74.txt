<!doctype html>
<html lang="en">
 <head profile="http://gmpg.org/xfn/11"> 
  <meta http-equiv="X-UA-Compatible" content="IE=10"> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <title>25 Techniques for Javascript Performance Optimization »  desalasworks | Steven de Salas | Melbourne Full Stack Developer, DevOps, Databases, JavaScript Developer, Interface Designer - AWS C# .NET Framework, Javascript</title> 
  <meta name="robots" content="index,follow"> 
  <meta name="keywords" content="steven, de salas, salas, desalas, desalasworks, user, interface, development, websites, design, web, applications"> 
  <meta name="description" content="Steven de Salas is a freelance web application developer based out of Melbourne. Steven specialises in creating rich interfaces and low-latency backend storage / data feeds for web and mobile platforms featuring financial data"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta name="google-site-verification" content="t_Q03qyW4Qql_p5ZxuXE4F7U7qhAt5Eb64O-CE8fdmA"> 
  <link rel="stylesheet" href="http://desalasworks.com/wp-content/themes/desalasworks.v1.6/style.css" type="text/css" media="all"> 
  <link rel="pingback" href=""> 
  <link rel="shortcut icon" href="http://desalasworks.com/wp-content/themes/desalasworks.v1.6/favicon.ico" type="image/x-icon"> 
  <script type="text/javascript" src="http://desalasworks.com/wp-content/themes/desalasworks.v1.6/js/tinybox.js"></script> 
  <script type="text/javascript" src="http://desalasworks.com/wp-content/themes/desalasworks.v1.6/js/common.js"></script> 
  <style type="text/css">
img, div, a { behavior: url(http://desalasworks.com/wp-content/themes/desalasworks.v1.6/js/iepngfix.htc) }
</style> 
  <link rel="alternate" type="application/rss+xml" title="desalasworks » 25 Techniques for Javascript Performance Optimization Comments Feed" href="http://desalasworks.com/article/javascript-performance-techniques/feed/"> 
  <link rel="https://api.w.org/" href="http://desalasworks.com/wp-json/"> 
  <link rel="prev" title="Object-Oriented JavaScript Inheritance" href="http://desalasworks.com/article/object-oriented-javascript-inheritance/"> 
  <link rel="next" title="How to Build a Cross-Platform Metal Detector App" href="http://desalasworks.com/article/how-to-build-a-cross-platform-metal-detector-app-ios-android/"> 
  <meta name="generator" content="WordPress 4.7.6"> 
  <link rel="canonical" href="http://desalasworks.com/article/javascript-performance-techniques/"> 
  <link rel="shortlink" href="http://desalasworks.com/?p=1177"> 
  <link rel="alternate" type="application/json+oembed" href="http://desalasworks.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fdesalasworks.com%2Farticle%2Fjavascript-performance-techniques%2F"> 
  <link rel="alternate" type="text/xml+oembed" href="http://desalasworks.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fdesalasworks.com%2Farticle%2Fjavascript-performance-techniques%2F&amp;format=xml"> 
 </head> 
 <body class="dw-article-template-default single single-dw-article postid-1177"> 
  <div class="header-wrap"> 
   <a id="responsive-nav" onmouseup="toggleClass('nav', 'show')">=</a> 
   <h1 class="logo"><a href="http://desalasworks.com/" title="desalasworks">desalasworks</a><span class="presents"> presents:</span></h1> 
   <h2 class="description">a selection of works by steven de salas</h2> 
   <ul id="nav"> 
    <li class="post_tag"><a href="http://desalasworks.com">Skills</a>
     <ul> 
      <li class="cat-item cat-item-28"><a href="http://desalasworks.com/skills/javascript/">JavaScript</a> </li> 
      <li class="cat-item cat-item-19"><a href="http://desalasworks.com/skills/sql-server/">SQL Server</a> </li> 
      <li class="cat-item cat-item-20"><a href="http://desalasworks.com/skills/c/">C#</a> </li> 
      <li class="cat-item cat-item-31"><a href="http://desalasworks.com/skills/css3/">CSS3</a> </li> 
      <li class="cat-item cat-item-23"><a href="http://desalasworks.com/skills/xml/">XML</a> </li> 
      <li class="cat-item cat-item-30"><a href="http://desalasworks.com/skills/html5/">HTML5</a> </li> 
      <li class="cat-item cat-item-45"><a href="http://desalasworks.com/skills/php/">PHP</a> </li> 
      <li class="cat-item cat-item-29"><a href="http://desalasworks.com/skills/performance-optimization/">Performance Optimization</a> </li> 
      <li class="cat-item cat-item-58"><a href="http://desalasworks.com/skills/net-framework/">NET Framework</a> </li> 
      <li class="cat-item cat-item-49"><a href="http://desalasworks.com/skills/asp/">ASP</a> </li> 
      <li class="cat-item cat-item-26"><a href="http://desalasworks.com/skills/investment-banking/">Investment Banking</a> </li> 
      <li class="cat-item cat-item-48"><a href="http://desalasworks.com/skills/iphone/">iPhone</a> </li> 
     </ul></li> 
    <li class="categories"><a href="http://desalasworks.com">Categories</a>
     <ul> 
      <li class="cat-item cat-item-14"><a href="http://desalasworks.com/category/code/">Code</a> </li> 
      <li class="cat-item cat-item-5"><a href="http://desalasworks.com/category/websites/">Websites</a> </li> 
      <li class="cat-item cat-item-3"><a href="http://desalasworks.com/category/web-applications/">Web Applications</a> </li> 
      <li class="cat-item cat-item-17"><a href="http://desalasworks.com/category/ui/">UI</a> </li> 
      <li class="cat-item cat-item-10"><a href="http://desalasworks.com/category/cms/">CMS</a> </li> 
      <li class="cat-item cat-item-6"><a href="http://desalasworks.com/category/graphic-design/">Graphic Design</a> </li> 
      <li class="cat-item cat-item-15"><a href="http://desalasworks.com/category/mobile/">Mobile</a> </li> 
      <li class="cat-item cat-item-62"><a href="http://desalasworks.com/category/competitions/">Competitions</a> </li> 
      <li class="cat-item cat-item-7"><a href="http://desalasworks.com/category/drawings/">Drawings</a> </li> 
      <li class="cat-item cat-item-9"><a href="http://desalasworks.com/category/e-commerce/">E-Commerce</a> </li> 
      <li class="cat-item cat-item-12"><a href="http://desalasworks.com/category/intranet/">Intranet</a> </li> 
      <li class="cat-item cat-item-11"><a href="http://desalasworks.com/category/print/">Print</a> </li> 
     </ul></li> 
    <li><a href="#contact">Contact</a></li> 
    <li><a href="#more">More</a></li> 
   </ul> 
  </div> 
  <script type="text/javascript">
function toggleClass(id, cls) {
	var dom = document.getElementById(id);
	if (dom) {
		var current = dom.className;
		var pat = new RegExp("\\b" + cls + "\\b");
		if (current.match(pat)) dom.className = current.replace(pat, '');
		else dom.className = dom.className + " " + cls;
	}
}
</script> 
  <div class="body-wrap" style="background-color: #f5f5f5;"> 
   <div class="body-main"> 
    <div id="container" class="clearfix"> 
     <h3 class="page-title">25 Techniques for Javascript Performance Optimization</h3> 
     <div class="container-box"> 
      <div class="tags"> 
       <a href="http://desalasworks.com/skills/javascript/" rel="tag">JavaScript</a> 
       <a href="http://desalasworks.com/skills/performance-optimization/" rel="tag">Performance Optimization</a> 
      </div> 
      <p><em>These are some the techniques I use for enhancing the performance of JavaScript, they have mostly been collected over various years of using the language to improve the interactivity of websites and web applications.</em></p> 
      <p>My thanks go out to Marco of <a href="http://www.zingzing.co.uk/tvguide/" target="_blank">zingzing.co.uk</a> for reminding me of the importance of optimizing JavaScript, and for teaching me some of the techniques below.</p> 
      <p>Most of the techniques involve common sense once you have understood the underlying problem. I’ve categorised them into 5 broad categories, each with an underlying problem and solution as follows:</p> 
      <h2>1. Avoid interaction with host objects</h2> 
      <div id="attachment_1301" style="width: 610px" class="wp-caption alignnone">
       <a href="http://desalasworks.com/wp-content/uploads/javascript-host-object-agents.jpg"><img class="size-full wp-image-1301" title="Repeated interaction with host objects will kill your performance." src="http://desalasworks.com/wp-content/uploads/javascript-host-object-agents.jpg" alt="" width="600" height="234"></a>
       <p class="wp-caption-text">Watch out for these guys. Repeated interaction with them will kill your performance.</p>
      </div> 
      <p><strong>THE PROBLEM:</strong></p> 
      <p>Native JavaScript is compiled into machine code by most scripting engines offering incredible performance boost, however interaction with host (browser) objects outside the javascript native environment raises unpredictability and considerable performance lag, particularly when dealing with screen-rendered DOM objects or objects which cause Disk I/O (such as WebSQL).</p> 
      <p><strong>THE SOLUTION:</strong></p> 
      <p>You can’t really get away from them, but keep your interaction with host objects to an absolute minimum.</p> 
      <p><strong>THE TECHNIQUES:</strong></p> 
      <ol> 
       <li> <h4>Use CSS classes instead of JavaScript for DOM animation.</h4> <p>Its a good habit to try an implement <em>any animation</em> (or DOM interaction) with CSS if you can get away with it. <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions" target="_blank">CSS3 Transitions</a> have been around for a while now, so there are few excuses <em>not</em> to use them. You can even <a href="http://stackoverflow.com/questions/5344745/polyfill-shim-for-css-transitions-and-animations" target="_blank">use a polyfill</a> if you are worried about older browsers. Think also of hover menus using the <code>:hover</code> pseudo-class, or styling and display of elements using <a href="http://tympanus.net/codrops/2013/05/22/examples-of-pseudo-elements-animations-and-transitions/"><code>@keyframes</code>, <code>:before</code> and <code>:after</code></a>, this is because unlike JavaScript, CSS solutions are heavily optimized by the browser, often down to the level of <a href="https://www.urbaninsight.com/2013/01/04/improving-html5-app-performance-gpu-accelerated-css-transitions" target="_blank">using the GPU for extra processing power</a>.</p> <p>I realize this might sound like irony (if you want to optimize JavaScript – avoid using it for animation), but the reality is that this technique is executed from within your JavaScript code, it just involves putting more effort on the CSS classes. </p></li> 
       <li> <h4>Use fast DOM traversal with <code>document.getElementById()</code>.</h4> <p>Given the availability of jQuery, it is now easier than ever to produce highly specific selectors based on a combination of tag names, classes and CSS3. You need to be aware that this approach involves several iterations while jQuery loops thorough each subset of DOM elements and tries to find a match. You can improve DOM traversal speeds by picking nodes by ID.</p> <pre lang="javascript">
// jQuery will need to iterate many times until it finds the right element
var button = jQuery('body div.dialog &gt; div.close-button:nth-child(2)')[0];

// A far more optimized way is to skip jQuery altogether.
var button = document.getElementById('dialog-close-button');

// But if you need to use jQuery you can do it this way.
var button = jQuery('#dialog-close-button')[0];
</pre> </li> 
       <li> <h4>Store pointer references to in-browser objects.</h4> <p>Use this technique to reduce DOM traversal trips by storing references to browser objects during instantiation for later usage. For example, if you are not expecting your DOM to change you should store a reference to DOM or jQuery objects you are going to use when your page is created; if you are building a DOM structure such as a dialog window, make sure you store a few handy reference to DOM objects inside it during instantiation, so you dont need to find the same DOM object over an over again when a user clicks on something or drags the dialog window.</p> <p>If you haven’t stored a reference to a DOM object, and you need to iterate inside a function, you can create a local variable containing a reference to that DOM object, this will considerably speed up the iteration as the local variable is stored in the most accessible part of the stack.</p></li> 
       <li> <h4>Keep your HTML super-lean (get rid of all those useless DIV and SPAN tags)</h4> <p>This is extremely important, the time needed to query and modify DOM is directly proportional the the amount and complexity of HTML that needs to be rendered. </p> <p>Using half the amount of HTML will roughly double the DOM speed, and since DOM creates the&nbsp;greatest&nbsp;performance drag on any complex JavaScript app, this can produce a considerable improvement. See&nbsp;<a href="http://developer.yahoo.com/performance/rules.html#min_dom" target="_blank">‘Reduce Number of DOM Elements’ guidance</a>&nbsp;in Yahoo YSlow.</p></li> 
       <li> <h4>Batch your DOM changes, especially when updating styles.</h4>When making calls to modify DOM make sure you batch them up so as to avoid repeated screen rendering, for example when applying styling changes. The ideal approach here is to make many styling changes in one go by adding or removing a class, rather than apply each individual style separately. This is because every DOM change prompts the browser to re-render the whole UI using the boxing model. If you need to move an item across the page using X+Y coordinates, make sure that these two are applied at the same time rather than separately. See these examples in jQuery:<p></p> <pre lang="javascript">// This will incurr 5 screen refreshes
jQuery('#dialog-window').width(600).height(400).css('position': 'absolute')
                       .css('top', '200px').css('left', '200px');</pre> <pre lang="javascript">// Let jQuery handle the batching
jQuery('#dialog-window').css({
     width: '600px',
     height: '400px',
     position: 'absolute',
     top: '200px',
     left: '200px'
);</pre> <pre lang="javascript">// Or even better use a CSS class.
jQuery('#dialog-window').addClass('mask-aligned-window');</pre> </li> 
       <li> <h4>Build DOM separately before adding it to the page.</h4> <p>As per the last item, every DOM update requires the whole screen to be refreshed, you can minimize the impact here by building DOM for your widget ‘off-line’ and then appending your DOM structure in one go.</p></li> 
       <li> <h4>Use buffered DOM inside scrollable DIVs.</h4> <p>This is an extension of the fourth point above (Keep HTML super-lean), you can use this technique to remove items from DOM that are not being visually rendered on screen, such as the area outside the viewport of a scrollable DIV, and append the nodes again when they are needed. This will reduce memory usage and DOM traversal speeds. Using this technique the guys at ExtJS have managed to produce an <a href="http://www.sencha.com/blog/infinite-grid-scrolling-in-ext-js-4" target="_blank">infinitely scrollable grid</a> that doesn’t grind the browser down to a halt.</p></li> 
      </ol> 
      <h2>2. Manage and Actively reduce your Dependencies</h2> 
      <div id="attachment_1209" style="width: 610px" class="wp-caption alignnone">
       <img class="size-full wp-image-1209" title="Poorly managed JavaScript dependencies degrade user experience." src="http://desalasworks.com/wp-content/uploads/javascript-depedency-performance.png" alt="" width="600" height="281" srcset="http://desalasworks.com/wp-content/uploads/javascript-depedency-performance.png 600w, http://desalasworks.com/wp-content/uploads/javascript-depedency-performance-300x140.png 300w" sizes="(max-width: 600px) 100vw, 600px">
       <p class="wp-caption-text">Poorly managed JavaScript dependencies degrade user experience.</p>
      </div> 
      <p><strong>THE PROBLEM:</strong></p> 
      <p>On-screen visual rendering and user experience is usually delayed while waiting for script dependencies load onto the browser. This is particularly bad for mobile users who have limited bandwidth capacity.</p> 
      <p><strong>THE SOLUTION:</strong></p> 
      <p>Actively manage and reduce dependency payload in your code.</p> 
      <p><strong>THE TECHNIQUES:&nbsp;</strong></p> 
      <ol> 
       <li> <h4>Write code that reduces library dependencies to an absolute minimum.</h4> <p>Use this approach to reduce the number of libraries your code requires to a minimum, ideally to none, thus creating an incredible boost to the loading times required for your page. </p> <p>You can reduce dependency on external libraries by making use of as much in-browser technology as you can, for example you can use <code>document.getElementById('nodeId')</code> instead of <code>jQuery('#nodeId')</code>, or <code>document.getElementsByTagName('INPUT')</code> instead of <code>jQuery('INPUT')</code> which will allow you to get rid of jQuery library dependency.</p> <p>If you need complex CSS selectors use <a href="http://sizzlejs.com/">Sizzle.js </a>instead of jQuery, which is far more lightweight (4kb instead of 80kb+).</p> <p>Also, before adding any new library to the codebase, evaluate whether or you really need it. Perhaps you are just after 1 single feature in the whole library? If that’s the case then take the code apart and add the feature separately (but don’t forget to check the license and acknowledge author if necessary).</p></li> 
       <li> <h4>Minimize and combine your code into modules.</h4> <p>You can bundle distinct components of your application into combined *.js files and pass them through a javascript minimizer tool such as <a href="http://code.google.com/closure/">Google Closures</a> or <a href="http://www.crockford.com/javascript/jsmin.html">JsMin </a>that gets rid of comments and whitespacing.</p> <p>The logic here is that a single minimized request for a 10Kb .js file <a href="http://developer.yahoo.com/performance/rules.html#num_http">completes faster </a>than 10 requests for files that are 1-2kb each due to lower bandwidth usage and network latency.</p></li> 
       <li> <h4>Use a post-load dependency manager for your libraries and modules.</h4> <p>Much of your functionality will not need to be implemented until after the page loads. By using a dependency manager (such as <a href="http://requirejs.org/" target="_blank">RequireJS</a> or <a href="http://webpack.github.io/" target="_blank">Webpack</a>) to load your scripts after the page has completed rendering you are giving the user a few extra seconds to familiarise themselves with the layout and options before them. </p> <p>Make sure that your dependency manager can ‘remember’ which dependencies have been loaded so you dont end up loading the same libraries twice for each module. See guidance for <a href="http://developer.yahoo.com/performance/rules.html#postload">Pre-Loading and Post-loading</a>&nbsp;in Yahoo YSLow, and be mindful about loading only what is necessary at each stage of the user journey.</p></li> 
       <li> <h4>Maximise use of caching (eTags, .js files, etc).</h4> <p>Cache is your best friend when it comes to loading pages faster. Try to maximise the use of cache by&nbsp;<a href="http://developer.yahoo.com/blogs/ydn/posts/2007/07/high_performanc_11/">applying ETags liberally</a>&nbsp;and putting all your javascript into files ending in *.js found in static URI locations (avoid dynamic Java/C# bundle generations ending with *.jsp and *.ashx) . This will tell the browser to use the locally cached copy of your scripts for any pages loaded after the initial one.</p></li> 
       <li> <h4>Move scripts to the end of the page (not recommended).</h4> <p>This is the lazy way of handling post-load dependencies, ideally you should implement a post-load dependency manager, but if you only have one or two scripts to load into the page you can add them at the very end of the HTML document where the browser will start loading them after the page is rendered, giving the user a few extra seconds of interaction.</p></li> 
      </ol> 
      <h2>3. Be disciplined with event binding</h2> 
      <div id="attachment_1244" style="width: 610px" class="wp-caption alignnone">
       <a href="http://desalasworks.com/wp-content/uploads/javascript-event-handling.png"><img class="size-full wp-image-1244" title="Be a ninja when using event handling." src="http://desalasworks.com/wp-content/uploads/javascript-event-handling.png" alt="" width="600" height="250" srcset="http://desalasworks.com/wp-content/uploads/javascript-event-handling.png 600w, http://desalasworks.com/wp-content/uploads/javascript-event-handling-300x125.png 300w" sizes="(max-width: 600px) 100vw, 600px"></a>
       <p class="wp-caption-text">Be a ninja when using event handling.</p>
      </div> 
      <p><strong>THE PROBLEM:</strong></p> 
      <p>Browser and custom event handlers are an incredible tool for improving user experience and reducing the depth of the call stack (so you avoid having a function calling a function which calls another function etc), but since they are hard to track due to their ‘hidden’ execution they can fire many times repeatedly and quickly get out of hand, causing performance degradation. </p> 
      <p><strong>THE SOLUTION:</strong></p> 
      <p>Be mindful and disciplined when creating event handlers. Get to know your weapons too, if you are using a framework then find out what’s going on underneath the hood.</p> 
      <p><strong>THE TECHNIQUES:</strong></p> 
      <ol> 
       <li> <h4>Use event binding but do it carefully.</h4> <p>Event binding is great for creating responsive applications. However, it is important that you walk through the execution and various user journeys <em>to make sure they are not firing multiple times</em> or using up unnecessary resources behind the scenes. Comment your code well so they next guy (which may be you a few months down the line) can follow what’s going on and avoid this issue as well.</p> <p>If you are using <u>AngularJS</u> make sure you are getting <a href="http://www.alexkras.com/11-tips-to-improve-angularjs-performance/#watchers" target="_blank">rid of unnecessary ‘watchers’</a>. These are background events that involve heavy processing and will slow down your app, particularly on mobile devices.</p> </li> 
       <li> <h4>Pay special attention event handlers that fire in quick succession (ie, ‘mousemove’).</h4> <p>Browser events such as ‘mousemove’ and ‘resize’ are executed in quick succession up to <em>several hundred times each second</em>, this means that you need to ensure that an event handler bound to either of these events is coded optimally and can complete in less than 2-3 milliseconds. </p> <p>Any overhead greater than that will create a patchy user experience, specially in browsers such as IE that have poor rendering capabilities.</p></li> 
       <li> <h4>Remember to unbind events when they are not needed.</h4> <p>Unbinding events is almost as important as binding them. When you add a new event handler to your code make sure that you provide for it to stop firing when it is no longer needed, ideally using once-off execution constructs like <em>jQuery.one()</em> or coding in the unbind behaviour at that point. This will avoid you having the same handler bound multiple times degrading performance, or events firing when they are no longer needed, this often points to memory leaks in your app as pointed out by the <a href="https://facebook.github.io/react/blog/2015/12/16/ismounted-antipattern.html" target="_blank">React developers in this blog post</a>.</p> <p>If you are using jQuery to bind and unbind events, make sure your selector points to a unique node, as a loose selector can create or remove more handlers than you intend to.</p> </li> 
       <li> <h4>Learn about event bubbling.</h4> <p>If you are going to use event handlers, it is important that you understand how event bubbling propagates an event up the DOM tree to every ancestor node. You can use this knowledge to limit your dependency on event bubbling with approaches such as jQuery.live() and jQuery.delegate() that require full DOM traversal upon handling each event, or to &nbsp;stop event bubbling for improved performance. See this <a href="http://www.alfajango.com/blog/the-difference-between-jquerys-bind-live-and-delegate/" target="_blank">great post</a> on the subject.</p></li> 
       <li> <h4>Use ‘mouseup’ instead of ‘click’.</h4> <p>Remember that user interaction via the mouse or keyboard fires several events in a specific order. It is useful to remember the order in which these events fire so you can squeeze in your functionality<em> before anything else gets handled, </em>including native browser event handlers.</p> <p>A good example of this is to bind your functionality to the ‘mouseup’ event which fires <em>before</em> the ‘click’ event, this can produce a surprising performance boost in older browsers such as IE, making the difference between handling every interaction or missing some of the action if the user triggers clicks many times in succession.</p></li> 
      </ol> 
      <h2>4. Maximise the efficiency of your iterations</h2> 
      <div id="attachment_1237" style="width: 610px" class="wp-caption alignnone">
       <a href="http://desalasworks.com/wp-content/uploads/javascript-string-performance.png"><img class="size-full wp-image-1237" title="String concatenation performance becomes critical during long iterations." src="http://desalasworks.com/wp-content/uploads/javascript-string-performance.png" alt="" width="600" height="227" srcset="http://desalasworks.com/wp-content/uploads/javascript-string-performance.png 600w, http://desalasworks.com/wp-content/uploads/javascript-string-performance-300x113.png 300w" sizes="(max-width: 600px) 100vw, 600px"></a>
       <p class="wp-caption-text">Performance becomes critical during long iterations.</p>
      </div> 
      <p><strong>THE PROBLEM:</strong></p> 
      <p>Due to the processing time used, iterations are usually the first&nbsp;places where you can address performance flaws in an application.</p> 
      <p><strong>THE SOLUTION:</strong></p> 
      <p>Get rid of unnecessary loops and calls made inside loops.</p> 
      <p><strong>THE TECHNIQUES:</strong></p> 
      <ol> 
       <li> <h4>Harness the indexing power of JavaScript objects.</h4> <p>Native JavaScript objects <code>{}</code> can be used as powerful <a href="http://en.wikipedia.org/wiki/Hash_table" target="_blank">Hashtable data structures</a> with quick-lookup indexes to store references to other objects, acting similarly to the way database indexes work for speeding up search operations by preventing needless looping.&nbsp;</p> <p>So why bother iterating to find something? You can simply use a plain object as an index (think of a phone-book) to get to your desired item quickly and efficiently. Here is an example as follows:</p> <pre lang="javascript">var data = {
  index: {
            "joeb": {name: "joe", surname: "bloggs", age: 29 },
            "marys": {name: "mary", surname: "smith", age: 25 }
            // another 1000 records
         },
  get: function(username) {
            return this.index[username];
         }
}</pre> </li> 
       <li> <h4>Harness the power of array structures with push() and pop() and shift().</h4> <p>Array <code>push()</code> <code>pop()</code> and <code>shift()</code> instructions have&nbsp;<a href="http://stackoverflow.com/questions/8423493/what-is-the-performance-of-objects-arrays-in-javascript-specifically-for-googl/8584173#8584173" target="_blank">minimal processing overhead</a> (20x that of object manipulation) due to being language constructs closely related to their low-level assembly language counterparts. In addition, using <a href="http://en.wikipedia.org/wiki/Queue_(abstract_data_type)" target="_blank">queue</a>&nbsp;and <a href="http://en.wikipedia.org/wiki/Stack_(data_structure)" target="_blank">stack</a> data structures can help simplify your code logic and get rid of unnecessarily loops. See more on the topic in <a href="http://jclaes.blogspot.com/2011/07/stacks-and-queues-in-javascript.html" target="_blank">this article</a>.</p></li> 
       <li> <h4>Take advantage of reference types.</h4> <p>JavaScript, much like other C-based languages, has both <a href="http://docstore.mik.ua/orelly/webprog/jscript/ch11_02.htm" target="_blank">primitive and reference value types</a>. Primitive types such as strings, booleans and integers are copied whenever they are passed into a new function, however reference types such as arrays, objects and dates are passed only as a light-weight reference.You can use this to get the most performance out of recursive functions, such as by passing a DOM node reference recursively to minimise DOM traversal, or by passing a reference parameter into a function that executes within an iteration. Also, remember that comparing object references is far more efficient than comparing strings.</p></li> 
       <li> <h4>Use <code>Array.prototype.join()</code> for string concatenation.</h4> <p><em><strong>PLEASE NOTE:</strong> This article was first written in 2012 when string concatenation was a hazard to be aware of. However, these days most JavaScript engines have compilation tricks that have made this issue obsolete. The wording below is only really relevant for historical purposes.</em></p> <p>Joining strings using the plus sign (ie <code>var ab = 'a' + 'b';</code>) creates performance issues in IE when used within an iteration. This is because, like Java and C#, <a href="http://stackoverflow.com/questions/51185/are-javascript-strings-immutable-do-i-need-a-string-builder-in-js" target="_blank">JavaScript uses unmutable strings</a>. </p> <p>Basically, when you concatenate two strings, a third string is constructed for gathering the results with its own object instantiation logic and memory allocation. While other browsers have various compilation tricks around this, IE is particularly bad at it.A far better approach is to use an array for carrying out the donkey work, creating an array outside the loop, using <code>push()</code> to add items into to the array and then a <code>join()</code> to output the results. See <a href="http://www.sitepen.com/blog/2008/05/09/string-performance-an-analysis/" target="_blank">this link</a> for a more in-depth article on the subject.</p></li> 
      </ol> 
      <h2>5. Become friends with the JavaScript lexicon</h2> 
      <div id="attachment_1239" style="width: 610px" class="wp-caption alignnone">
       <a href="http://desalasworks.com/wp-content/uploads/javascript-lexical-performance.png"><img class="size-full wp-image-1239" title="Become a friend of the ECMA Standard and it make your code faster." src="http://desalasworks.com/wp-content/uploads/javascript-lexical-performance.png" alt="" width="600" height="302" srcset="http://desalasworks.com/wp-content/uploads/javascript-lexical-performance.png 600w, http://desalasworks.com/wp-content/uploads/javascript-lexical-performance-300x151.png 300w" sizes="(max-width: 600px) 100vw, 600px"></a>
       <p class="wp-caption-text">Become a friend of the ECMA Standard and it make your code faster.</p>
      </div> 
      <p><strong>THE PROBLEM:</strong></p> 
      <p>Due to its loosely-typed and free-for-all nature, JavaScript can be written using a very limited subset of lexical constructs with no discipline or controls applied to its use. Using simple function patterns repetitively often leads to poorly thought-out ‘spaghetti’ code that is inefficient in terms of resource use.</p> 
      <p><strong>THE SOLUTION:</strong></p> 
      <p>Learn when and how to apply the constructs of the <a href="http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf">ECMAScript language standard</a> to maximise performance.</p> 
      <p><strong>THE TECHNIQUES:</strong></p> 
      <ol> 
       <li> <h4>Shorten the scope chain</h4> <p>In JavaScript, whenever a function is executed, a set of first order variables are instantiated as part of that function. These include the immediate scope of a function (the <code>this</code> variable) with its own scope chain, the <code>arguments</code> of the function and all locally-declared variables.</p> <p>If you try and access a globally-declared variable or a closure further up the scope chain, it will take extra effort to traverse up the chain every level util the compiler can wire up the variable you are after. You can thus improve execution by reducing the depth of the call stack, and by only using the local scope (<code>this</code>), the <code>arguments</code> of the function, as well as locally declared variables. <a href="http://homepage.mac.com/rue/JS_Optimization_Techniques/" target="_blank">This article</a> explains the matter further.</p></li> 
       <li> <h4>Make use of ‘this’, by passing correct scope using ‘call’ and ‘apply’.</h4> <p>This is particularly useful for writing asynchronous code using callbacks, however it also improves performance because you are not relying on global or&nbsp;<a href="http://www.javascriptkit.com/javatutors/closures.shtml" target="_blank">closure variables</a>&nbsp;held further up the scope chain. You can get the most out of the scope variable (<code>this</code>) by rewiring it using the <a href="http://odetocode.com/blogs/scott/archive/2007/07/05/function-apply-and-function-call-in-javascript.aspx" target="_blank">special call() and apply() methods</a>&nbsp;that are built into each function. See the example below:</p> <pre lang="javascript">var Person = Object.create({
  init: function(name) {
     this.name = name;
  },
  do: function(callback) {
     callback.apply(this);
  }
});
var john = new Person('john');
john.do(function() {
    alert(this.name); // 'john' gets alerted because we rewired 'this'.
});</pre> </li> 
       <li> <h4>Learn and use native functions and constructs.</h4> <p>ECMAScript provides a whole host of native constructs that save you having to write your own algorithms or rely on host objects. Some examples include <code>Math.floor()</code>, <code>Math.round()</code>, <code>(new Date()).getTime()</code> for timestamps, <code>String.prototype.match()</code> and <code>String.prototype.replace()</code> for regexes, <code>parseInt(n, radix)</code> for changing numeral systems, <code>===</code> instead of <code>==</code> for faster type-based comparsion, <code>instanceof</code> for checking type up the hierarchy, <code>&amp;</code> and <code>|</code> for <a href="https://developer.mozilla.org/en/JavaScript/Reference/Operators/Bitwise_Operators" target="_blank">bitwise comparisons</a>. And the list goes on and on. </p> <p>Make sure you use all these instead of trying to work out your own algorithms as you will not only be reinventing the wheel but affecting performance.</p></li> 
       <li> <h4>Use ‘switch’ instead of lengthy ‘if-then-else’ statements.</h4> <p>This is because &nbsp;‘switch’ statements can be <a href="http://en.wikipedia.org/wiki/Switch_statement#Compilation">optimized more easily during compilation</a>. There is an interesting article in O’Reily about using <a href="http://oreilly.com/server-administration/excerpts/even-faster-websites/writing-efficient-javascript.html#the_switch_statement" target="_blank">this approach with JavaScript</a>.</p></li> 
      </ol> 
      <p>&nbsp;</p> 
     </div> 
     <!-- .container-box --> 
     <h3 class="page-title">Comments</h3> 
     <div class="container-box"> 
      <!-- You can start editing here. --> 
      <div class="comments-header clearfix"> 
       <h3 id="comments">12 comments</h3> 
       <div class="comments-header-meta"> 
        <a href="#respond">Add your comment</a> 
        <!--
      |
      <a href="http://desalasworks.com/article/javascript-performance-techniques/trackback/" rel="trackback">trackback</a>
      --> 
       </div> 
      </div> 
      <!-- comments-header --> 
      <div class="navigation"> 
       <div class="alignleft"></div> 
       <div class="alignright"></div> 
      </div> 
      <ol class="comment-list"> 
       <li class="comment even thread-even depth-1" id="comment-6446"> 
        <div id="div-comment-6446" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/cb3188ec6b5a6c617a9acc2eee350fd2?s=32&amp;d=mm&amp;r=g" srcset="http://0.gravatar.com/avatar/cb3188ec6b5a6c617a9acc2eee350fd2?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn"><a href="http://www.jeilers.nl" rel="external nofollow" class="url">Jesse Eilers</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-6446"> February 16, 2012 at 7:40 am</a> 
         </div> 
         <p>Great article! Helped me a lot!</p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-6447"> 
        <div id="div-comment-6447" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/0280b2ac1c2fa7bb1ad8768585d433cc?s=32&amp;d=mm&amp;r=g" srcset="http://0.gravatar.com/avatar/0280b2ac1c2fa7bb1ad8768585d433cc?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn"><a href="http://aussieian.net" rel="external nofollow" class="url">ian</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-6447"> February 16, 2012 at 3:29 pm</a> 
         </div> 
         <p>Great read mate! Good tips.</p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-6452"> 
        <div id="div-comment-6452" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/3132c30555c1cab3a10eed179fda39b8?s=32&amp;d=mm&amp;r=g" srcset="http://0.gravatar.com/avatar/3132c30555c1cab3a10eed179fda39b8?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn">A Visitor</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-6452"> February 22, 2012 at 1:20 pm</a> 
         </div> 
         <p>22 Feb 2012 13:20:12 – I Like This!</p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-6457"> 
        <div id="div-comment-6457" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/c3daa16af3c912ca6785309e76e22868?s=32&amp;d=mm&amp;r=g" srcset="http://0.gravatar.com/avatar/c3daa16af3c912ca6785309e76e22868?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn"><a href="http://www.plyojump.com" rel="external nofollow" class="url">Pete Markiewicz</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-6457"> February 29, 2012 at 2:59 am</a> 
         </div> 
         <p>Really good summary, and especially good since most of it can be implemented by a less than “world class” JS programmer – for example, intermediate web programming students. I’m adding it to my “Web Sustainability” list at <a href="http://sustainablevirtualdesign.wordpress.com" rel="nofollow">http://sustainablevirtualdesign.wordpress.com</a></p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment byuser comment-author-steven bypostauthor even thread-even depth-1" id="comment-6458"> 
        <div id="div-comment-6458" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://2.gravatar.com/avatar/e3b505293493b6f61a863750537f9aa8?s=32&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/e3b505293493b6f61a863750537f9aa8?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn">steven</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-6458"> February 29, 2012 at 8:55 am</a> 
         </div> 
         <p>Thanks Pete, my aim was to try and help as many people as possible with this tricky topic, specially now that the mobile web explosion is making JavaScript performance so much more critical.</p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-7244"> 
        <div id="div-comment-7244" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/63f0c1e7a14922919a54161860038fce?s=32&amp;d=mm&amp;r=g" srcset="http://0.gravatar.com/avatar/63f0c1e7a14922919a54161860038fce?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn"><a href="http://www.linosilva.com" rel="external nofollow" class="url">Lino Silva</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-7244"> May 24, 2012 at 9:57 am</a> 
         </div> 
         <p>Bookmarked. This should be common knowledge for every Javascript developer. A great, well structured and very simply explained article, congratulations.</p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-8718"> 
        <div id="div-comment-8718" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://2.gravatar.com/avatar/bc7e893b6d4605000478c871b7ce8862?s=32&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/bc7e893b6d4605000478c871b7ce8862?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn"><a href="http://darwinweb.net" rel="external nofollow" class="url">Gabe da Silveira</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-8718"> December 17, 2012 at 9:43 pm</a> 
         </div> 
         <p>Solid article, but when was it written? I ask because as JS engines improve, specific advice often needs to be revisited. The screenshot of a performance chart is showing very old browser versions, but this article seems newer than that…</p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment byuser comment-author-steven bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-8720"> 
        <div id="div-comment-8720" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://2.gravatar.com/avatar/e3b505293493b6f61a863750537f9aa8?s=32&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/e3b505293493b6f61a863750537f9aa8?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn">steven</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-8720"> January 2, 2013 at 11:46 am</a> 
         </div> 
         <p>Hi Gabe, this article is from a year ago (Feb 2012), you can see that in the homepage where you linked into it. The performance comparison chart is there for illustration purposes, all this info should be current for a few years yet, at least until someone takes the browser crown off from Google Chrome.</p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-8729"> 
        <div id="div-comment-8729" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/969e43c61055efec8e8920ce13327a6c?s=32&amp;d=mm&amp;r=g" srcset="http://0.gravatar.com/avatar/969e43c61055efec8e8920ce13327a6c?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn">Brian</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-8729"> October 8, 2013 at 5:23 pm</a> 
         </div> 
         <p>Great article, thank you so much. Bookmarked this one, and look forward to reading more from your list! I’ll be passing this along to the rest of my team ?</p> 
         <p>Gabe makes a really good point – is there any way that you could include the dates on these articles? The landscape changes quickly.</p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-8736"> 
        <div id="div-comment-8736" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://2.gravatar.com/avatar/5a061a72feb5b6580dadd5dcbc92d3b5?s=32&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/5a061a72feb5b6580dadd5dcbc92d3b5?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn">Jakub Mareda</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-8736"> April 14, 2014 at 11:22 am</a> 
         </div> 
         <p>It might be a good point to add, that it’s significantly faster to cache .length property of arrays:</p> 
         <p>for(var i=0, l=array.length; i&lt;l; i++);</p> 
         <p>I have tested this on JSlint and it gets even mor important with DOM object collections traversing.</p> 
         <p>But, do not forget to change both i and l when removing elements of array:</p> 
         <p>for(var i=0, l=array.length; i&lt;l; i++) {<br> if(/*condition*/) {<br> //Remove element of array or collection<br> /**Must change i and l*/<br> i–;<br> l–;<br> }<br> }</p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-8758"> 
        <div id="div-comment-8758" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/a3acedb322e99a3db0f0e6599c7a152f?s=32&amp;d=mm&amp;r=g" srcset="http://1.gravatar.com/avatar/a3acedb322e99a3db0f0e6599c7a152f?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn">elfwind</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-8758"> July 1, 2014 at 4:25 pm</a> 
         </div> 
         <p>The Object.create example throws an error, you cannot use new in this context.</p> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment byuser comment-author-steven bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-8772"> 
        <div id="div-comment-8772" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://2.gravatar.com/avatar/e3b505293493b6f61a863750537f9aa8?s=32&amp;d=mm&amp;r=g" srcset="http://2.gravatar.com/avatar/e3b505293493b6f61a863750537f9aa8?s=64&amp;d=mm&amp;r=g 2x" class="avatar avatar-32 photo" height="32" width="32"> 
          <cite class="fn">steven</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://desalasworks.com/article/javascript-performance-techniques/#comment-8772"> August 29, 2014 at 6:18 am</a> 
         </div> 
         <p>Hi Elfwind, </p> 
         <p>I think ECMA Script 5 introduced Object.prototype.create(), I was referring to alternative ways of doing the same thing in the more ubiquitous ECMAScript 3 version available on (almost) all browsers. </p> 
         <p>Regards,<br> Steven</p> 
        </div> </li>
       <!-- #comment-## --> 
      </ol> 
      <div class="navigation"> 
       <div class="alignleft"></div> 
       <div class="alignright"></div> 
      </div> 
     </div> 
     <!-- .container-box --> 
    </div>
    <!-- #container --> 
    <div id="sidebar"> 
     <div class="sidebar-box"> 
      <!--ul class="sb-tools clearfix">
	<li class="previous-post"><a href="http://desalasworks.com/article/object-oriented-javascript-inheritance/" rel="prev"><span>Previous Entry</span> Object-Oriented JavaScript Inheritance</a></li>	<li class="next-post"><a href="http://desalasworks.com/article/how-to-build-a-cross-platform-metal-detector-app-ios-android/" rel="next"><span>Next Entry</span> How to Build a Cross-Platform Metal Detector App</a></li></ul--> 
      <ul class="group"> 
       <li class="tags">
        <div class="sb-title">
         Skills
        </div>
        <ul> 
         <li class="tag-item tag-item-59"><a href="http://desalasworks.com/skills/agile/" title="View all posts filed under Agile">Agile</a> (4) </li>
         <li class="tag-item tag-item-38"><a href="http://desalasworks.com/skills/ajax/" title="View all posts filed under AJAX">AJAX</a> (1) </li>
         <li class="tag-item tag-item-52"><a href="http://desalasworks.com/skills/android/" title="View all posts filed under Android">Android</a> (3) </li>
         <li class="tag-item tag-item-69"><a href="http://desalasworks.com/skills/angular-js/" title="View all posts filed under Angular.js">Angular.js</a> (1) </li>
         <li class="tag-item tag-item-73"><a href="http://desalasworks.com/skills/arduino/" title="View all posts filed under Arduino">Arduino</a> (1) </li>
         <li class="tag-item tag-item-72"><a href="http://desalasworks.com/skills/artificial-learning/" title="View all posts filed under Artificial Learning">Artificial Learning</a> (1) </li>
         <li class="tag-item tag-item-49"><a href="http://desalasworks.com/skills/asp/" title="View all posts filed under ASP">ASP</a> (5) </li>
         <li class="tag-item tag-item-68"><a href="http://desalasworks.com/skills/backbone-js/" title="View all posts filed under Backbone.js">Backbone.js</a> (1) </li>
         <li class="tag-item tag-item-20"><a href="http://desalasworks.com/skills/c/" title="View all posts filed under C#">C#</a> (8) </li>
         <li class="tag-item tag-item-65"><a href="http://desalasworks.com/skills/cordova/" title="View all posts filed under Cordova">Cordova</a> (3) </li>
         <li class="tag-item tag-item-31"><a href="http://desalasworks.com/skills/css3/" title="View all posts filed under CSS3">CSS3</a> (7) </li>
         <li class="tag-item tag-item-25"><a href="http://desalasworks.com/skills/data-feeds/" title="View all posts filed under Data Feeds">Data Feeds</a> (1) </li>
         <li class="tag-item tag-item-57"><a href="http://desalasworks.com/skills/distributed-computing/" title="View all posts filed under Distributed Computing">Distributed Computing</a> (4) </li>
         <li class="tag-item tag-item-32"><a href="http://desalasworks.com/skills/dom/" title="View all posts filed under DOM">DOM</a> (1) </li>
         <li class="tag-item tag-item-79"><a href="http://desalasworks.com/skills/electron/" title="View all posts filed under Electron">Electron</a> (1) </li>
         <li class="tag-item tag-item-43"><a href="http://desalasworks.com/skills/extjs/" title="View all posts filed under ExtJS">ExtJS</a> (1) </li>
         <li class="tag-item tag-item-60"><a href="http://desalasworks.com/skills/facebook/" title="View all posts filed under Facebook">Facebook</a> (2) </li>
         <li class="tag-item tag-item-35"><a href="http://desalasworks.com/skills/github/" title="View all posts filed under GitHub">GitHub</a> (2) </li>
         <li class="tag-item tag-item-61"><a href="http://desalasworks.com/skills/heroku/" title="View all posts filed under Heroku">Heroku</a> (2) </li>
         <li class="tag-item tag-item-30"><a href="http://desalasworks.com/skills/html5/" title="View all posts filed under HTML5">HTML5</a> (6) </li>
         <li class="tag-item tag-item-26"><a href="http://desalasworks.com/skills/investment-banking/" title="View all posts filed under Investment Banking">Investment Banking</a> (4) </li>
         <li class="tag-item tag-item-48"><a href="http://desalasworks.com/skills/iphone/" title="View all posts filed under iPhone">iPhone</a> (4) </li>
         <li class="tag-item tag-item-67"><a href="http://desalasworks.com/skills/jasmine/" title="View all posts filed under Jasmine">Jasmine</a> (1) </li>
         <li class="tag-item tag-item-41"><a href="http://desalasworks.com/skills/java/" title="View all posts filed under Java">Java</a> (1) </li>
         <li class="tag-item tag-item-28"><a href="http://desalasworks.com/skills/javascript/" title="View all posts filed under JavaScript">JavaScript</a> (25) </li>
         <li class="tag-item tag-item-33"><a href="http://desalasworks.com/skills/jquery/" title="View all posts filed under jQuery">jQuery</a> (3) </li>
         <li class="tag-item tag-item-44"><a href="http://desalasworks.com/skills/json/" title="View all posts filed under JSON">JSON</a> (2) </li>
         <li class="tag-item tag-item-40"><a href="http://desalasworks.com/skills/jsp/" title="View all posts filed under JSP">JSP</a> (1) </li>
         <li class="tag-item tag-item-63"><a href="http://desalasworks.com/skills/mobile/" title="View all posts filed under Mobile">Mobile</a> (1) </li>
         <li class="tag-item tag-item-47"><a href="http://desalasworks.com/skills/mysql/" title="View all posts filed under MySQL">MySQL</a> (3) </li>
         <li class="tag-item tag-item-58"><a href="http://desalasworks.com/skills/net-framework/" title="View all posts filed under NET Framework">NET Framework</a> (5) </li>
         <li class="tag-item tag-item-71"><a href="http://desalasworks.com/skills/node-js/" title="View all posts filed under Node.js">Node.js</a> (1) </li>
         <li class="tag-item tag-item-42"><a href="http://desalasworks.com/skills/object-orientation/" title="View all posts filed under Object Orientation">Object Orientation</a> (3) </li>
         <li class="tag-item tag-item-29"><a href="http://desalasworks.com/skills/performance-optimization/" title="View all posts filed under Performance Optimization">Performance Optimization</a> (5) </li>
         <li class="tag-item tag-item-51"><a href="http://desalasworks.com/skills/photoshop/" title="View all posts filed under Photoshop">Photoshop</a> (3) </li>
         <li class="tag-item tag-item-45"><a href="http://desalasworks.com/skills/php/" title="View all posts filed under PHP">PHP</a> (6) </li>
         <li class="tag-item tag-item-34"><a href="http://desalasworks.com/skills/qunit/" title="View all posts filed under QUnit">QUnit</a> (2) </li>
         <li class="tag-item tag-item-75"><a href="http://desalasworks.com/skills/react/" title="View all posts filed under React">React</a> (2) </li>
         <li class="tag-item tag-item-76"><a href="http://desalasworks.com/skills/redux/" title="View all posts filed under Redux">Redux</a> (2) </li>
         <li class="tag-item tag-item-74"><a href="http://desalasworks.com/skills/robotics/" title="View all posts filed under Robotics">Robotics</a> (1) </li>
         <li class="tag-item tag-item-22"><a href="http://desalasworks.com/skills/soap/" title="View all posts filed under SOAP">SOAP</a> (2) </li>
         <li class="tag-item tag-item-19"><a href="http://desalasworks.com/skills/sql-server/" title="View all posts filed under SQL Server">SQL Server</a> (11) </li>
         <li class="tag-item tag-item-24"><a href="http://desalasworks.com/skills/stored-procedures/" title="View all posts filed under Stored Procedures">Stored Procedures</a> (3) </li>
         <li class="tag-item tag-item-64"><a href="http://desalasworks.com/skills/test-driven-development/" title="View all posts filed under Test-Driven Development">Test-Driven Development</a> (3) </li>
         <li class="tag-item tag-item-27"><a href="http://desalasworks.com/skills/trading-platform/" title="View all posts filed under Trading Platform">Trading Platform</a> (2) </li>
         <li class="tag-item tag-item-21"><a href="http://desalasworks.com/skills/web-services/" title="View all posts filed under Web Services">Web Services</a> (3) </li>
         <li class="tag-item tag-item-81"><a href="http://desalasworks.com/skills/webgl/" title="View all posts filed under WebGL">WebGL</a> (1) </li>
         <li class="tag-item tag-item-80"><a href="http://desalasworks.com/skills/websockets/" title="View all posts filed under WebSockets">WebSockets</a> (1) </li>
         <li class="tag-item tag-item-46"><a href="http://desalasworks.com/skills/wordpress/" title="View all posts filed under Wordpress">Wordpress</a> (3) </li>
         <li class="tag-item tag-item-23"><a href="http://desalasworks.com/skills/xml/" title="View all posts filed under XML">XML</a> (6) </li>
         <li class="tag-item tag-item-39"><a href="http://desalasworks.com/skills/xslt/" title="View all posts filed under XSLT">XSLT</a> (2) </li>
        </ul></li> 
      </ul> 
      <ul class="group"> 
      </ul> 
      <ul class="viewing"> 
      </ul> 
     </div> 
     <!-- .sidebar-box --> 
     <div class="sidebar-heading">
      OTHER WORKS
     </div> 
     <div class="small-box pos-0 pos-even"> 
      <a class="thumbnail" href="http://desalasworks.com/autotrader-uk/" title="Role working as an Interface Developer on Trader Media's online marketplace with over 1 billion page impressions per month." style=""> <img src="http://desalasworks.com/wp-content/themes/desalasworks.v1.6/img/spacer5x4.png" width="100%"> </a> 
      <p class="title"><a href="http://desalasworks.com/autotrader-uk/" rel="bookmark" title="See AutoTrader UK">AutoTrader UK</a></p> 
      <p class="category"><a href="http://desalasworks.com/category/code/" rel="category tag">Code</a>, <a href="http://desalasworks.com/category/ui/" rel="category tag">UI</a>, <a href="http://desalasworks.com/category/websites/" rel="category tag">Websites</a></p> 
     </div> 
     <div class="small-box pos-1 pos-odd"> 
      <a class="thumbnail" href="http://desalasworks.com/nandos-end-of-day-upload/" title="A daily upload process carried out by each of Nandos' stores that copies daily Point-of-Sale information into a central database repository for analysis." style="background-image: url(http://desalasworks.com/wp-content/uploads/2005/02/nandos__endofday_week.gif);"> <img src="http://desalasworks.com/wp-content/themes/desalasworks.v1.6/img/spacer5x4.png" width="100%"> </a> 
      <p class="title"><a href="http://desalasworks.com/nandos-end-of-day-upload/" rel="bookmark" title="See Nandos’ End of Day Uploads">Nandos’ End of Day Uploads</a></p> 
      <p class="category"><a href="http://desalasworks.com/category/web-applications/" rel="category tag">Web Applications</a></p> 
     </div> 
     <div class="small-box pos-2 pos-even"> 
      <a class="thumbnail" href="http://desalasworks.com/article/faster-web-applications-with-indexed-views/" title="A short introduction into 'Indexed Views', a really handy performance-improvement tool available in SQL Server." style="background-image: url(http://desalasworks.com/wp-content/uploads/indexed-sql-views.png);"> <img src="http://desalasworks.com/wp-content/themes/desalasworks.v1.6/img/spacer5x4.png" width="100%"> </a> 
      <p class="title"><a href="http://desalasworks.com/article/faster-web-applications-with-indexed-views/" rel="bookmark" title="See Faster Web Applications with Indexed Views">Faster Web Applications with Indexed Views</a></p> 
      <p class="category"><a href="http://desalasworks.com/category/code/" rel="category tag">Code</a>, <a href="http://desalasworks.com/category/web-applications/" rel="category tag">Web Applications</a></p> 
     </div> 
    </div> 
    <!-- #sidebar --> 
    <div style="clear:both;"></div> 
   </div> 
  </div> 
  <div class="footer-wrapper"> 
   <div class="footer"> 
    <div class="footer-top"> 
     <a name="contact"></a>
     <a name="more"></a> 
     <div class="profile"> 
      <i class="profile-pic">Pic</i> 
      <h4>Steven de Salas</h4> 
      <h5>Full Stack Developer</h5> 
     </div> 
    </div> 
    <div class="footer-left"> 
     <h1>contact</h1> 
     <p>Steven is a web application developer based in Melbourne, Australia. Steven specialises in creating rich interfaces and low-latency backend storage / data feeds for web, mobile and hardware platforms.</p> 
     <p>He recently finished developing the <a href="/mbta-mticket">MBTA mTicketing HTML5 mobile app</a> which grossed $1,000,000 in the first ten weeks of operation. He is currently helping a Melbourne startup with an interface for a 3D laser cutter.</p> 
     <p></p>
     <div style="border:1px solid #fff;padding:5px 10px;font-weight: bold;font-size:14px;text-align:center;background-color:#b4520a;;color:#fff;-moz-border-radius:10px;border-radius:10px;">
       AVAILABLE IN: 3 MONTHS 
     </div>
     <p></p> 
     <!--p><div style="border:1px solid #fff;padding:5px 10px;font-weight: bold;font-size:14px;text-align:center;background-color:#008800;;color:#fff;-moz-border-radius:10px;border-radius:10px;">
		AVAILABLE IN -18 WEEKS!!
		</div></p--> 
     <!--p><div style="border:1px solid #fff;padding:5px 10px;font-weight: bold;font-size:14px;text-align:center;background-color:#008800;;color:#fff;-moz-border-radius:10px;border-radius:10px;">
		AVAILABLE NOW 
		</div></p--> 
     <!--p><div style="border:1px solid #fff;padding:5px 10px;font-weight: bold;font-size:14px;text-align:center;background-color:#b4520a;;color:#fff;-moz-border-radius:10px;border-radius:10px;">
		AVAILABLE HALF TIME
		</div></p--> 
     <!--p><div style="border:1px solid #fff;padding:5px 10px;font-weight: bold;font-size:14px;text-align:center;background-color:#b4520a;;color:#fff;-moz-border-radius:10px;border-radius:10px;">
		UNAVAILABLE - FAMILY COMMITMENTS
		</div></p--> 
     <p>If you are after a quotation for a web site or web application feel free to get in touch on any of the following:</p> 
     <div class="block icon-linkedin">
      <a href="http://uk.linkedin.com/in/sdesalas" target="_blank">au.linkedin.com/in/sdesalas</a>
     </div> 
     <div class="block icon-facebook">
      <a href="http://www.facebook.com/sdesalas" target="_blank">www.facebook.com/sdesalas</a>
     </div> 
     <div class="block icon-mobile">
      +61 (0)49
      <span style="display:none;">21</span>8 6
      <script type="text/javascript">document.write("65 3");</script>04
     </div> 
     <div class="block icon-email">
      ste
      <span style="display:none;">da</span>ven
      <script type="text/javascript">document.write("@de");</script>salasworks.com
     </div> 
     <div style="clear:both;"></div> 
     <h1>tools of the trade</h1> 
     <p>While each project has a different technology stack, these are some of the languages and applications that Steven uses more regularly.</p> 
     <div class="panel"> 
      <p>For front-end work:</p> 
      <div class="block icon-angular">
       <a href="/skills/angular-js">Angular</a>
      </div> 
      <div class="block icon-vuejs">
       <a href="/skills/javascript">Vue.js</a>
      </div> 
      <div class="block icon-feeds">
       <a href="/skills/javascript">OO Javascript + AJAX</a>
      </div> 
      <div class="block icon-css">
       <a href="/skills/css3">CSS</a>
      </div> 
      <div class="block icon-html">
       <a href="skills/html5">HTML5</a>
      </div> 
      <div class="block icon-photoshop">
       <a href="/skills/photoshop">Photoshop</a>
      </div> 
      <div style="clear:both;"></div> 
      <p>For back-end integration:</p> 
      <div class="block icon-csharp">
       <a href="/skills/c">C#</a>
      </div> 
      <div class="block icon-nodejs">
       <a href="/skills/javascript">Node.js</a>
      </div> 
      <div style="clear:both;"></div> 
      <p>For data storage:</p> 
      <div class="block icon-sqlserver">
       <a href="/skills/sql-server">SQL Server</a>
      </div> 
      <div class="block icon-aws">
       <a href="/skills/aws">AWS (DynamoDB, S3)</a>
      </div> 
      <div style="clear:both;"></div> 
     </div>  
    </div> 
    <div class="footer-right"> 
     <h1>more</h1> 
     <p class="association"><a href="https://aws.amazon.com/certification/" target="_blank"> <img src="http://desalasworks.com/wp-content/themes/desalasworks.v1.4/img/aws-logo.png" alt="StackOverflow" title="AWS Certified Developer" style="background:#fff;width:75px;"> </a> <strong>AWS Certified Developer</strong><br> <em>Since 2017</em> </p> 
     <p class="association"><a href="http://stackoverflow.com/users/448568/steven-de-salas" target="_blank"> <img src="http://desalasworks.com/wp-content/themes/desalasworks.v1.4/img/stackoverflow-logo.png" alt="StackOverflow" title="Stack Overflow Contributor" style="background:#fff;width:75px;"> </a> <strong>StackOverflow Contributor</strong><br> <em>Since 2011</em> </p> 
     <p class="association"><a href="https://github.com/sdesalas/" target="_blank"> <img src="http://desalasworks.com/wp-content/themes/desalasworks.v1.4/img/github-logo.png" alt="Github" title="Github Contributor" style="background:#fff;width:75px;"> </a> <strong>Github Contributor</strong><br> <em>Since 2010</em> </p> 
     <p class="association"><a href="http://en.wikipedia.org/wiki/Microsoft_Certified_Professional" target="_blank"> <img src="http://desalasworks.com/wp-content/themes/desalasworks.v1.4/img/mcpd-logo.gif" alt="Microsoft Certified Professional Developer" title="Microsoft Certified Professional Developer"> </a> <strong>Microsoft Certified <br>Professional Developer</strong><br> <em>Since 2010</em> </p> 
     <p class="association"><a href="http://www.pcg.org.uk" target="_blank"> <img src="http://desalasworks.com/wp-content/themes/desalasworks.v1.3/img/pcg-logo.jpg" alt="Professional Contractors Group" title="Professional Contractors Group"> </a> <strong>Professional Contractors Group</strong><br> <em>Member since 2004</em> </p> 
    </div> 
   </div> 
  </div> 
  <script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script> 
  <script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-12999251-1");
pageTracker._setDomainName(".desalasworks.com");
pageTracker._trackPageview();
} catch(err) {}</script>  
 </body>
</html>