<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <script>var _sf_startpt=(new Date()).getTime()</script> 
  <title>Working with React and TypeScript</title> 
  <script>(function(d) {var config = {kitId: 'znf0vyy',scriptTimeout: 1000,async: true},h=d.documentElement,t=setTimeout(function(){h.className=h.className.replace(/\bwf-loading\b/g,"")+" wf-inactive";},config.scriptTimeout),tk=d.createElement("script"),f=false,s=d.getElementsByTagName("script")[0],a;h.className+=" wf-loading";tk.src='https://use.typekit.net/'+config.kitId+'.js';tk.async=true;tk.onload=tk.onreadystatechange=function(){a=this.readyState;if(f||a&&a!="complete"&&a!="loaded")return;f=true;clearTimeout(t);try{Typekit.load(config)}catch(e){}};s.parentNode.insertBefore(tk,s)})(document);</script> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <link rel="shortcut icon" href="https://d1yg14i6wd46hx.cloudfront.net/assets/favicon-5ed3591b57f6a4f0d5cb82c6680b33bb1058fe757c71ccb094952824e7e00b17.ico"> 
  <meta name="generator" content="Svbtle.com"> 
  <meta name="description" content="An introduction to the development of React applications with Atom and TypeScript We are about to develop the famous TODO App from the TodoMVC project using React and TypeScript: In this post you will learn about the following: 1. Setting up the... | Wolk Software Engineering | A group of young and ambitious people dedicated to creating cutting-edge applications in combination with beautiful and functional design."> 
  <link rel="canonical" href="http://blog.wolksoftware.com/working-with-react-and-typescript"> 
  <meta name="og:url" content="http://blog.wolksoftware.com/working-with-react-and-typescript"> 
  <meta property="twitter:card" content="summary"> 
  <meta property="twitter:site" content="@svbtle"> 
  <meta property="twitter:title" content="Working with React and TypeScript"> 
  <meta property="twitter:description" content="An introduction to the development of React applications with Atom and TypeScript We are about to develop the famous TODO App from the TodoMVC project using React and TypeScript: In this post you will learn about the following: 1. Setting up the... | Wolk Software Engineering | A group of young and ambitious people dedicated to creating cutting-edge applications in combination with beautiful and functional design."> 
  <meta property="twitter:creator" content="@WolkSoftwareLtd"> 
  <meta property="twitter:image:src" content="https://svbtleusercontent.com/7yjwysnxnekg.png"> 
  <meta property="twitter:domain" content="http://blog.wolksoftware.com"> 
  <meta property="og:title" content="Working with React and TypeScript • Wolk Software Engineering"> 
  <meta property="og:type" content="article"> 
  <meta property="og:description" content="An introduction to the development of React applications with Atom and TypeScript We are about to develop the famous TODO App from the TodoMVC project using React and TypeScript: In this post you will learn about the following: 1. Setting up the... | Wolk Software Engineering | A group of young and ambitious people dedicated to creating cutting-edge applications in combination with beautiful and functional design."> 
  <meta property="og:image" content="https://svbtleusercontent.com/7yjwysnxnekg.png"> 
  <meta property="og:site_name" content="Wolk Software Engineering on Svbtle"> 
  <meta property="fb:app_id" content="346346195413177"> 
  <link rel="author" href="https://plus.google.com/+100899594633411690332"> 
  <link rel="alternate" type="application/rss+xml" href="http://blog.wolksoftware.com/feed"> 
  <link rel="stylesheet" media="all" href="https://d1yg14i6wd46hx.cloudfront.net/assets/build.blog-5cd027a39286cb2c7c79cdf5aba3d14c60d38aacbeb0602a03fe41e6fde4477b.css" data-turbolinks-track="reload"> 
  <script src="https://d1yg14i6wd46hx.cloudfront.net/assets/build.blog-c870ad038a39111dd005c79acb23fcaaecb3a88913d8663a5a1aa64ed496b26d.js" data-turbolinks-track="reload"></script> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-41994323-1');
  ga('send', 'pageview');
  // Create a new tracker for the user on analytics.js and send the pageview
  ga('create', 'UA-62778406-1', {'name': 'userTracker'});
  ga('userTracker.send', 'pageview');
  // Backwards compatibility--create an old ga.js for the user
  var _gaq = _gaq || [];
  _gaq.push( ['_setAccount', 'UA-41994323-1'],['_setDomainName', 'none'],['_setAllowLinker', true],['_trackPageview'],['b._setAccount', 'UA-62778406-1'],['b._setDomainName', 'blog.wolksoftware.com'],['b._setAllowLinker', true],['b._trackPageview']);
  (function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);})();
  </script> 
  <script src="https://d1yg14i6wd46hx.cloudfront.net/assets/share_buttons-b84bd2675e44d2e7a19b3f6351d6fd9fb748f9966ed6939aa3d88c55b53598b9.js" data-turbolinks-track="true"></script> 
  <script src="//platform.twitter.com/widgets.js" async></script> 
 </head> 
 <body class="overlord blog"> 
  <style scoped>
figure.avatar a,
figure#user_logo a,
figure#user_foot a,
nav#overlord.user_top figure#logo_top a,
figure.kudo.complete div.filling {
  background-image: url('https://a.svbtleusercontent.com/oDUaBPhXkhNlbmkybTNsXxVxln8hU_medium.png')
}

figure.kudo.activated div.filling,
figure.kudo.complete div.filling {
  background-color: #3A67C9;
}

figure.kudo.activated a,
figure.kudo.complete a {
  border-color: #3A67C9;
}

blockquote,
a blockquote,
div#readnext:hover span.flank_title,
div#foot_more:hover a,
div#foot_userbar a#bottom_tagline span:hover,
article.linked h1.article_title a:hover,
a.continue_button:hover,
article p a:hover,
ul#lightning_drop,
figure#user_logo,
figure#user_foot,
ul#user_links li a:hover,
ul#foot_links li a:hover,
a.buttonize:hover,
button.buttonize:hover,
a.buttonize.outline:hover,
button.buttonize.outline:hover,
nav.pagination span.next a:hover,
nav.pagination span.prev a:hover,
section#readnext:hover p span,
nav#overlord.user_top figure#logo_top {
  border-color: #3A67C9;
}

figure.avatar,
nav#overlord.user_top figure#logo_top a,
ul#user_links li a:hover,
ul#foot_links li a:hover,
a.buttonize:hover,
button.buttonize:hover,
a.buttonize.outline:hover,
button.buttonize.outline:hover,
nav.pagination span.next a:hover,
nav.pagination span.prev a:hover,
figure#user_logo a,
figure#user_foot a  {
	background-color: #3A67C9;
}

h6.separator_title.read_first,
header#user_top h2 a,
footer#blog_foot h5 a,
article.post h1 a:hover,
div.preview strong,
nav#overlord h2#nav_title.user_top a,
section#readnext:hover h3,
section#readnext:hover p span {
  color: #3A67C9;
}

@keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #3A67C9;
  }
  100% {
    color: #000000;
  }
}

@-moz-keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #3A67C9;
  }
  100% {
    color: #000000;
  }
}

@-webkit-keyframes titlePulse
  {
  0% {
    color: #000000;
  }
  50% {
    color: #3A67C9;
  }
  100% {
    color: #000000;
  }
}


</style> 
  <figure id="loading">
   &nbsp;
  </figure> 
  <nav id="overlord" class="user_top"> 
   <figure id="logo_top" class=""> 
    <a href="/">Svbtle</a> 
   </figure> 
   <h2 id="nav_title" class="user_top"><a href="//blog.wolksoftware.com">Wolk Software Engineering</a></h2> 
   <figure id="hamburger"> 
    <a href="#menu" id="hamburger_button">Menu</a> 
   </figure> 
   <ul id="dropdown" class="onblog"> 
    <li class="dropdown_message"> <a href="https://svbtle.com">Wolk Software Engineering is writing on the <span class="logoize">Svbtle</span> network.</a> </li> 
    <li><a href="https://twitter.com/WolkSoftwareLtd">@WolkSoftwareLtd</a></li> 
    <li><a href="http://wolksoftware.com" target="_blank">wolksoftware.com</a></li> 
    <li><a href="/feed">rss feed</a></li> 
    <li style="margin: 0; padding: 0;">
     <hr class="overlord_nav"></li> 
    <li><a href="https://svbtle.com/about">about svbtle</a></li> 
    <li><a href="https://svbtle.com/signup">sign up</a></li> 
   </ul> 
  </nav> 
  <div id="whiteout"></div> 
  <section id="container" class="blog user_post"> 
   <article id="1o8InjbZ8hWWWCic1jY" class="post  historical"> 
    <time datetime="2015-10-12" class="article_time">October 12, 2015</time> 
    <h1 class="article_title"> <a href="//blog.wolksoftware.com/working-with-react-and-typescript">Working with React and TypeScript</a> </h1> 
    <p><strong>An introduction to the development of React applications with Atom and TypeScript</strong></p> 
    <p>We are about to develop the famous TODO App from the <a href="http://todomvc.com/examples/typescript-react/">TodoMVC</a> project using React and TypeScript:</p> 
    <p><a href="https://svbtleusercontent.com/7yjwysnxnekg.png"><img src="https://svbtleusercontent.com/7yjwysnxnekg_small.png" alt="Screen Shot 2015-10-12 at 12.20.29 a.m..png"></a></p> 
    <p>In this post you will learn about the following:</p> 
    <ul> 
     <li><strong>1. Setting up the environment</strong></li> 
     <li><strong>2. Setting up the project</strong></li> 
     <li><strong>3. The basics about React components</strong></li> 
     <li><strong>4. Developing React components with TypeScript</strong></li> 
     <li><strong>5. Compiling the application</strong></li> 
     <li><strong>6. Running the application</strong></li> 
    </ul> 
    <p>Let’s get started!</p> 
    <h1 id="1-setting-up-the-environment_1"><a class="head_anchor" href="#1-setting-up-the-environment_1">&nbsp;</a>1. Setting up the environment</h1> 
    <p>We will start by setting up the environment:</p> 
    <ul> 
     <li><p>Download an install Node.js from <a href="https://nodejs.org/">https://nodejs.org</a>.</p></li> 
     <li><p>Install TypeScript and tsd using npm:</p></li> 
    </ul> 
    <pre><code class="prettyprint">$ npm install -g typescript tsd
</code></pre> 
    <blockquote class="large">
     <p>Note: use sudo if you are using OSX</p> 
    </blockquote> 
    <ul> 
     <li>Download and install atom from <a href="https://atom.io/">https://atom.io/</a>.</li> 
    </ul> 
    <p><a href="https://svbtleusercontent.com/poybtywe40rjbq.png"><img src="https://svbtleusercontent.com/poybtywe40rjbq_small.png" alt="Screen Shot 2015-10-11 at 11.58.23 p.m..png"></a></p> 
    <ul> 
     <li>Install the <a href="https://atom.io/packages/atom-typescript">atom-typescript</a> plugin for atom:</li> 
    </ul> 
    <pre><code class="prettyprint">$ apm install atom-typescript
</code></pre> 
    <p>This plugin has some cool features like HTML to TSX:</p> 
    <p><a href="https://svbtleusercontent.com/livogugozhshlq.gif"><img src="https://svbtleusercontent.com/livogugozhshlq_small.gif" alt="68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f547970655374726f6e672f61746f6d2d747970657363726970742d6578616d706c65732f6d61737465722f73637265656e732f68746d6c746f7473782e676966.gif"></a></p> 
    <p>Or dependency view:</p> 
    <p><a href="https://svbtleusercontent.com/bontsmxoxxadda.png"><img src="https://svbtleusercontent.com/bontsmxoxxadda_small.png" alt="68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f547970655374726f6e672f61746f6d2d747970657363726970742d6578616d706c65732f6d61737465722f73637265656e732f646570656e64656e6379566965772f7465617365722e706e67.png"></a></p> 
    <p>Please visit the <a href="https://github.com/TypeStrong/atom-typescript">project’s page on GitHub</a> to learn more about the atom-typescript features.</p> 
    <ul> 
     <li>Install the <a href="https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en">React developer tools extension for chrome</a>.</li> 
    </ul> 
    <p>This extension helps us to debug React applications by displaying the value of the properties and state of a selected component. </p> 
    <p><a href="https://svbtleusercontent.com/td99h20vs5yzq.png"><img src="https://svbtleusercontent.com/td99h20vs5yzq_small.png" alt="Screen Shot 2015-10-12 at 9.50.35 p.m..png"></a></p> 
    <h1 id="2-setting-up-the-project_1"><a class="head_anchor" href="#2-setting-up-the-project_1">&nbsp;</a>2. Setting up the project</h1> 
    <p>By the end of this tutorial the project structure will be similar to the following one:</p> 
    <pre><code class="prettyprint">??? index.html
??? js
?&nbsp;&nbsp; ??? app.js
?&nbsp;&nbsp; ??? app.tsx
?&nbsp;&nbsp; ??? constants.js
?&nbsp;&nbsp; ??? constants.ts
?&nbsp;&nbsp; ??? footer.js
?&nbsp;&nbsp; ??? footer.tsx
?&nbsp;&nbsp; ??? interfaces.d.ts
?&nbsp;&nbsp; ??? todoItem.js
?&nbsp;&nbsp; ??? todoItem.tsx
?&nbsp;&nbsp; ??? todoModel.js
?&nbsp;&nbsp; ??? todoModel.ts
?&nbsp;&nbsp; ??? tsconfig.json
?&nbsp;&nbsp; ??? utils.js
?&nbsp;&nbsp; ??? utils.ts
??? node_modules
?&nbsp;&nbsp; ??? director
?&nbsp;&nbsp; ??? react
?&nbsp;&nbsp; ??? todomvc-app-css
??? package.json
??? tsd.json
??? typings
    ??? react
    ?&nbsp;&nbsp; ??? react-global.d.ts
    ?&nbsp;&nbsp; ??? react.d.ts
    ??? tsd.d.ts
</code></pre> 
    <p>Let’s start by creating the application’s root folder. </p> 
    <pre><code class="prettyprint">$ mkdir typescript-react
$ cd typescript-react
</code></pre> 
    <p>Then create new <code class="prettyprint">package.json</code> file inside the application’s root folder:</p> 
    <pre><code class="prettyprint">{
private: true,
  dependencies: {
    director: "^1.2.0",
    react: "^0.13.3",
    todomvc-app-css: "^2.0.0"
  }
}
</code></pre> 
    <p>You can then install the project dependencies using npm:</p> 
    <pre><code class="prettyprint"># from the application's root folder
$ npm install
</code></pre> 
    <p>This command should create a folder named <code class="prettyprint">node_modules</code> inside the application’s root folder. The <code class="prettyprint">node_modules</code> should contain 3 folders named: <code class="prettyprint">director</code>, <code class="prettyprint">react</code> and <code class="prettyprint">todomvc-app-css</code>.</p> 
    <pre><code class="prettyprint">??? node_modules
?   ??? director
?   ??? react
?   ??? todomvc-app-css
</code></pre> 
    <p>We will now install some TypeScript type definitions files. </p> 
    <p>Type definitions files are used to declare the interfaces of the public API of third party libraries like React. These interfaces can be used by the IDEs to help us during the development of TypeScript applications with features like IntelliSense. </p> 
    <p>The type definitions files are also used by the TypeScript compiler to ensure that we are using the third party libraries correctly. </p> 
    <p>We are going to need the React type definitions. We can install them using the following command:</p> 
    <pre><code class="prettyprint"># from the application's root folder
$ tsd init
$ tsd install react --save
</code></pre> 
    <p>The command above will create a file named <code class="prettyprint">tsd.json</code> and a folder named <code class="prettyprint">typings</code> in the application’s root folder. The <code class="prettyprint">typings</code> folder should contain a folder named <code class="prettyprint">react</code>.</p> 
    <p>We also need to manually <strong><a href="https://raw.githubusercontent.com/borisyankov/DefinitelyTyped/master/react/react-global.d.ts">download</a></strong> and save a file named <code class="prettyprint">react-global.d.ts</code> under the <code class="prettyprint">typings/react</code> folder.</p> 
    <pre><code class="prettyprint">??? typings
    ??? react
    ?   ??? react-global.d.ts
    ?   ??? react.d.ts
    ??? tsd.d.ts
</code></pre> 
    <p>Now, let’s create the <code class="prettyprint">index.html</code> file inside the application’s root folder:</p> 
    <pre><code class="prettyprint">&lt;!doctype html&gt;
&lt;html lang="en" data-framework="typescript"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;React • TodoMVC&lt;/title&gt;
    &lt;link rel="stylesheet" 
          href="node_modules/todomvc-common/base.css"&gt;

    &lt;link rel="stylesheet" 
          href="node_modules/todomvc-app-css/index.css"&gt;

  &lt;/head&gt;
  &lt;body&gt;
    &lt;section class="todoapp"&gt;&lt;/section&gt;
    &lt;footer class="info"&gt;
      &lt;p&gt;Double-click to edit a todo&lt;/p&gt;
      &lt;p&gt;
        Created by 
        &lt;a href="http://github.com/remojansen/"&gt;Remo H. Jansen&lt;/a&gt;
      &lt;/p&gt;
      &lt;p&gt;Part of &lt;a href="http://todomvc.com"&gt;TodoMVC&lt;/a&gt;&lt;/p&gt;
    &lt;/footer&gt;

    &lt;script type="text/javascript" 
            src="node_modules/react/dist/react-with-addons.js"&gt;
    &lt;/script&gt;

    &lt;script type="text/javascript" 
            src="node_modules/director/build/director.js"&gt;
    &lt;/script&gt;

    &lt;script type="text/javascript" src="js/constants.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/utils.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/todoModel.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/todoItem.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/footer.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="js/app.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre> 
    <p>At this point you should have the following files and folders in place:</p> 
    <pre><code class="prettyprint">??? index.html
??? node_modules
?&nbsp;&nbsp; ??? director
?&nbsp;&nbsp; ??? react
?&nbsp;&nbsp; ??? todomvc-app-css
??? package.json
??? tsd.json
??? typings
    ??? react
    ?&nbsp;&nbsp; ??? react-global.d.ts
    ?&nbsp;&nbsp; ??? react.d.ts
    ??? tsd.d.ts
</code></pre> 
    <p>You may have noticed that some of the JavaScript files referenced by our <code class="prettyprint">index.html</code> file are missing. We will now proceed to solve that problem.</p> 
    <h1 id="3-the-basics-about-react-components_1"><a class="head_anchor" href="#3-the-basics-about-react-components_1">&nbsp;</a>3. The basics about React components</h1> 
    <p>Components are he main building block of a React application. A component represents a self-contained piece of UI. A component will usually display some data and be able handle some kind of user interaction.</p> 
    <p>A component can contain child components. The application that we are about to develop is really small, so we will only develop one top-level component named <code class="prettyprint">TodoApp</code>. </p> 
    <p>The <code class="prettyprint">TodoApp</code> component will be composed of multiple components, including one <code class="prettyprint">TodoFooter</code> component and a list of <code class="prettyprint">TodoItem</code> components.</p> 
    <p><a href="https://svbtleusercontent.com/plmlol7n2cfq.png"><img src="https://svbtleusercontent.com/plmlol7n2cfq_small.png" alt="7yjwysnxnekg_retina.png"></a></p> 
    <p>Components differentiate two different sets of data: <strong>properties and state</strong>.</p> 
    <h2 id="properties_2"><a class="head_anchor" href="#properties_2">&nbsp;</a>Properties</h2>
    <blockquote class="large">
     <p>Props (short for properties) are a Component’s configuration, its options if you may. They are received from above and immutable as far as the Component receiving them is concerned.</p> 
     <p>A Component cannot change its props, but it is responsible for putting together the props of its child Components.</p> 
    </blockquote>
    <h2 id="state_2"><a class="head_anchor" href="#state_2">&nbsp;</a>State</h2>
    <blockquote class="large">
     <p>The state starts with a default value when a Component mounts and then suffers from mutations in time (mostly generated from user events). It’s a serialisable representation of one point in time—a snapshot.</p> 
     <p>A Component manages its own state internally, but—besides setting an initial state—has no business fiddling with the state of its children. You could say the state is private.</p> 
    </blockquote> 
    <p>When we declare a new React component using TypeScript we must declare the interface of its properties and state as follows:</p> 
    <pre><code class="prettyprint">class SomeComponent extends React.Component&lt;ISomeComponentProps, ISomeComponentState&gt; {
  // ...
}
</code></pre> 
    <p>Now that we have our project structure in place and we know the basics about components it is time to start developing our components.</p> 
    <h1 id="4-developing-react-components-with-typescript_1"><a class="head_anchor" href="#4-developing-react-components-with-typescript_1">&nbsp;</a>4. Developing React components with TypeScript</h1> 
    <p>Let’s create a new folder named <code class="prettyprint">js</code> under the application’s root folder.</p> 
    <p>We are going to create the following files:</p> 
    <pre><code class="prettyprint">??? js
?&nbsp;&nbsp; ???interfaces.d.ts
?&nbsp;&nbsp; ??? constants.ts
?&nbsp;&nbsp; ??? utils.ts
?&nbsp;&nbsp; ??? todoModel.js
?&nbsp;&nbsp; ??? footer.tsx
?&nbsp;&nbsp; ??? todoItem.tsx
?&nbsp;&nbsp; ??? app.tsx
</code></pre> 
    <p>Feel free to create them now or do it as we implement each one of them.</p> 
    <h1 id="interfacesdts_1"><a class="head_anchor" href="#interfacesdts_1">&nbsp;</a>interfaces.d.ts</h1> 
    <p>We will use this file to define all the interfaces in our application. We use the extension <code class="prettyprint">.d.ts</code> (which is also used by the type definition files) instead of <code class="prettyprint">.ts</code> because this file will not be transpiled into a JavaScript file. The file is not transpiled because TypeScript interfaces are not transformed into JavaScript code during the compilation process.</p> 
    <pre><code class="prettyprint">// Defines the interface of the structure of a task
interface ITodo {
  id: string,
  title: string,
  completed: boolean
}

// Defines the interface of the properties of the TodoItem component
interface ITodoItemProps {
  key : string,
  todo : ITodo;
  editing? : boolean;
  onSave: (val: any) =&gt; void;
  onDestroy: () =&gt; void;
  onEdit: ()  =&gt; void;
  onCancel: (event : any) =&gt; void;
  onToggle: () =&gt; void;
}

// Defines the interface of the state of the TodoItem component
interface ITodoItemState {
  editText : string
}

// Defines the interface of the properties of the Footer component
interface ITodoFooterProps {
  completedCount : number;
  onClearCompleted : any;
  nowShowing : string;
  count : number;
}

// Defines the TodoModel interface
interface ITodoModel {
  key : any;
  todos : Array&lt;ITodo&gt;;
  onChanges : Array&lt;any&gt;;
  subscribe(onChange);
  inform();
  addTodo(title : string);
  toggleAll(checked);
  toggle(todoToToggle);
  destroy(todo);
  save(todoToSave, text);
  clearCompleted();
}

// Defines the interface of the properties of the App component
interface IAppProps {
  model : ITodoModel;
}

// Defines the interface of the state of the App component
interface IAppState {
  editing? : string;
  nowShowing? : string
}
</code></pre> 
    <h1 id="constantsts_1"><a class="head_anchor" href="#constantsts_1">&nbsp;</a>constants.ts</h1> 
    <p>This file is used to expose some constants. The constants are used to store the numeric value of the keyboard keys (<code class="prettyprint">ENTER_KEY</code> and <code class="prettyprint">ESCAPE_KEY</code>) that we will use later to set some events listeners.</p> 
    <p>We will also use some values to identify the currently displayed list of tasks by its status:</p> 
    <ul> 
     <li><code class="prettyprint">COMPLETED_TODOS</code> Used when displaying completed tasks</li> 
     <li><code class="prettyprint">ACTIVE_TODOS</code> Used when displaying incomplete tasks </li> 
     <li><code class="prettyprint">ALL_TODOS</code> Used when displaying all tasks</li> 
    </ul> 
    <pre><code class="prettyprint">namespace app.constants {
  export var ALL_TODOS = 'all';
  export var ACTIVE_TODOS = 'active';
  export var COMPLETED_TODOS = 'completed';
  export var ENTER_KEY = 13;
  export var ESCAPE_KEY = 27;
}
</code></pre> 
    <h1 id="utilsts_1"><a class="head_anchor" href="#utilsts_1">&nbsp;</a>utils.ts</h1> 
    <p>This file contains a class named <code class="prettyprint">Utils</code>. The <code class="prettyprint">Utils</code> class is no more that a collection of utility static functions.</p> 
    <pre><code class="prettyprint">namespace app.miscelanious {

  export class Utils {

    // generates a new Universally unique identify (UUID) 
    // the UUID is used to identify each of the tasks
    public static uuid() : string {
      /*jshint bitwise:false */
      var i, random;
      var uuid = '';

      for (i = 0; i &lt; 32; i++) {
        random = Math.random() * 16 | 0;
        if (i === 8 || i === 12 || i === 16 || i === 20) {
          uuid += '-';
        }
        uuid += (i === 12 ? 4 : (i === 16 ? (random &amp; 3 | 8) : random))
          .toString(16);
      }

      return uuid;
    }

    // adds 's' to the end of a given world when count &gt; 1
    public static pluralize(count, word) {
      return count === 1 ? word : word + 's';
    }

    // stores data using the localStorage API
    public static store(namespace, data?) {
      if (data) {
        return localStorage.setItem(namespace, JSON.stringify(data));
      }

      var store = localStorage.getItem(namespace);
      return (store &amp;&amp; JSON.parse(store)) || [];
    }

    // just a helper for inheritance
    public static extend(...objs : any[]) : any {
      var newObj = {};
      for (var i = 0; i &lt; objs.length; i++) {
        var obj = objs[i];
        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            newObj[key] = obj[key];
          }
        }
      }
      return newObj;
    }

  }
}
</code></pre> 
    <h1 id="todomodelts_1"><a class="head_anchor" href="#todomodelts_1">&nbsp;</a>todoModel.ts</h1> 
    <p>TodoModel is a generic “model” object. Since this application is really small it may not even be worth separating this logic out, but we do this to demonstrate one way to separate out parts of your application.</p> 
    <pre><code class="prettyprint">/// &lt;reference path="../typings/react/react-global.d.ts" /&gt;
/// &lt;reference path="./interfaces.d.ts"/&gt;

namespace app.models {

  export class TodoModel implements ITodoModel {

    public key : string;            // key used for local storage
    public todos : Array&lt;ITodo&gt;;    // a list of tasks
    public onChanges : Array&lt;any&gt;;  // a list of events

    constructor(key) {
      this.key = key;
      this.todos = app.miscelanious.Utils.store(key);
      this.onChanges = [];
    }

    // the following are some methods 
    // used to manipulate the list of tasks

    public subscribe(onChange) {
      this.onChanges.push(onChange);
    }

    public inform() {
      app.miscelanious.Utils.store(this.key, this.todos);
      this.onChanges.forEach(function (cb) { cb(); });
    }

    public addTodo(title : string) {
      this.todos = this.todos.concat({
        id: app.miscelanious.Utils.uuid(),
        title: title,
        completed: false
      });

      this.inform();
    }

    public toggleAll(checked) {
      // Note: it's usually better to use immutable 
      // data structures since they're easier to 
      // reason about and React works very 
      // well with them. That's why we use 
      // map() and filter() everywhere instead of 
      // mutating the array or todo items themselves.
      this.todos = this.todos.map&lt;ITodo&gt;((todo : ITodo) =&gt; {
        return app.miscelanious.Utils.extend(
          {}, todo, {completed: checked}
        );
      });

      this.inform();
    }

    public toggle(todoToToggle) {
      this.todos = this.todos.map&lt;ITodo&gt;((todo : ITodo) =&gt; {
        return todo !== todoToToggle ?
          todo :
          app.miscelanious.Utils.extend(
            {}, todo, {completed: !todo.completed}
          );
      });

      this.inform();
    }

    public destroy(todo) {
      this.todos = this.todos.filter(function (candidate) {
        return candidate !== todo;
      });

      this.inform();
    }

    public save(todoToSave, text) {
      this.todos = this.todos.map(function (todo) {
        return todo !== todoToSave ? todo : app.miscelanious.Utils.extend({}, todo, {title: text});
      });

      this.inform();
    }

    public clearCompleted() {
      this.todos = this.todos.filter(function (todo) {
        return !todo.completed;
      });

      this.inform();
    }
  }

}
</code></pre> 
    <h1 id="footertsx_1"><a class="head_anchor" href="#footertsx_1">&nbsp;</a>footer.tsx</h1> 
    <p>This file uses the <code class="prettyprint">.tsx</code> extension instead of the <code class="prettyprint">.ts</code> extension because it contains some TSX code. </p> 
    <p>TSX is a typed superset of JSX. We will use TSX instead of HTML of client-side templates like Handlebars because TSX and JSX are used to generate an in-memory representation of the DOM. When the components state or properties change Reacts calculates the most efficient way to update the in-memory representation of the DOM and then proceeds to apply those changes to the real DOM. This process makes React highly efficient when it comes to DOM manipulation.</p> 
    <blockquote class="large">
     <p>Note: We need use some extra compiler options to compile <code class="prettyprint">.tsx</code>. We will learn more about this topic towards the end of this post.</p> 
    </blockquote> 
    <p>The footer component allows users to filter the lists of tasks by their status and displays the count of tasks. This component has no state (Note how <code class="prettyprint">{}</code> is passed to <code class="prettyprint">React.Component</code> as the interface of its state) but it has some properties (<code class="prettyprint">ITodoFooterProps</code>) that are set by its parent component (the <code class="prettyprint">TodoApp</code> component).</p> 
    <pre><code class="prettyprint">/// &lt;reference path="../typings/react/react-global.d.ts" /&gt;
/// &lt;reference path="./interfaces.d.ts"/&gt;

namespace app.components {

  export class TodoFooter extends React.Component&lt;ITodoFooterProps, {}&gt; {

    public render() {
      var activeTodoWord = app.miscelanious.Utils.pluralize(this.props.count, 'item');
      var clearButton = null;

      if (this.props.completedCount &gt; 0) {
        clearButton = (
          &lt;button
            className="clear-completed"
            onClick={this.props.onClearCompleted}&gt;
            Clear completed
          &lt;/button&gt;
        );
      }

      // React idiom for shortcutting to `classSet` since it'll be used often
      var cx = React.addons.classSet;
      var nowShowing = this.props.nowShowing;
      return (
        &lt;footer className="footer"&gt;
          &lt;span className="todo-count"&gt;
            &lt;strong&gt;{this.props.count}&lt;/strong&gt; {activeTodoWord} left
          &lt;/span&gt;
          &lt;ul className="filters"&gt;
            &lt;li&gt;
              &lt;a
                href="#/"
                className={cx({selected: nowShowing === app.constants.ALL_TODOS})}&gt;
                  All
              &lt;/a&gt;
            &lt;/li&gt;
            {' '}
            &lt;li&gt;
              &lt;a
                href="#/active"
                className={cx({selected: nowShowing === app.constants.ACTIVE_TODOS})}&gt;
                  Active
              &lt;/a&gt;
            &lt;/li&gt;
            {' '}
            &lt;li&gt;
              &lt;a
                href="#/completed"
                className={cx({selected: nowShowing === app.constants.COMPLETED_TODOS})}&gt;
                  Completed
              &lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
          {clearButton}
        &lt;/footer&gt;
      );
    }
  }

}
</code></pre> 
    <h1 id="todoitemtsx_1"><a class="head_anchor" href="#todoitemtsx_1">&nbsp;</a>todoItem.tsx</h1> 
    <p>The <code class="prettyprint">TodoItem</code> component represents one of the tasks in the list of tasks. </p> 
    <p>This component has both properties (<code class="prettyprint">ITodoItemProps</code>) and state (<code class="prettyprint">ITodoItemState</code>). </p> 
    <p>The component initial’s state is set in the component’s constructor by itself while the properties are passed as constructor arguments and are set by the component’s parent component (the <code class="prettyprint">TodoApp</code> component).</p> 
    <pre><code class="prettyprint">/// &lt;reference path="../typings/react/react-global.d.ts" /&gt;
/// &lt;reference path="./interfaces.d.ts"/&gt;

namespace app.components {

  export class TodoItem extends React.Component&lt;ITodoItemProps, ITodoItemState&gt; {

    constructor(props : ITodoItemProps){
      super(props);
      // set initial state
      this.state = { editText: this.props.todo.title };
    }

    public handleSubmit(event) {
      var val = this.state.editText.trim();
      if (val) {
        this.props.onSave(val);
        this.setState({editText: val});
      } else {
        this.props.onDestroy();
      }
    }

    public handleEdit() {
      this.props.onEdit();
      this.setState({editText: this.props.todo.title});
    }

    public handleKeyDown(event) {
      if (event.which === app.constants.ESCAPE_KEY) {
        this.setState({editText: this.props.todo.title});
        this.props.onCancel(event);
      } else if (event.which === app.constants.ENTER_KEY) {
        this.handleSubmit(event);
      }
    }

    public handleChange(event) {
      this.setState({editText: event.target.value});
    }

    // This is a completely optional performance enhancement 
    // that you can implement on any React component. If you 
    // were to delete this method the app would still work 
    // correctly (and still be very performant!), we just use it 
    // as an example of how little code it takes to get an order
    // of magnitude performance improvement.
    public shouldComponentUpdate(nextProps, nextState) {
      return (
        nextProps.todo !== this.props.todo ||
        nextProps.editing !== this.props.editing ||
        nextState.editText !== this.state.editText
      );
    }

    // Safely manipulate the DOM after updating the state 
    // when invoking this.props.onEdit() in the handleEdit
    // method above. 
    public componentDidUpdate(prevProps) {
      if (!prevProps.editing &amp;&amp; this.props.editing) {
        var node = React.findDOMNode&lt;HTMLInputElement&gt;(this.refs["editField"]);
        node.focus();
        node.setSelectionRange(node.value.length, node.value.length);
      }
    }

    public render() {
      return (
        &lt;li className={React.addons.classSet({
          completed: this.props.todo.completed,
          editing: this.props.editing
        })}&gt;
          &lt;div className="view"&gt;
            &lt;input
              className="toggle"
              type="checkbox"
              checked={this.props.todo.completed}
              onChange={this.props.onToggle}
            /&gt;
            &lt;label onDoubleClick={ e =&gt; this.handleEdit() }&gt;
              {this.props.todo.title}
            &lt;/label&gt;
            &lt;button className="destroy" onClick={this.props.onDestroy} /&gt;
          &lt;/div&gt;
          &lt;input
            ref="editField"
            className="edit"
            value={this.state.editText}
            onBlur={ e =&gt; this.handleSubmit(e) }
            onChange={ e =&gt; this.handleChange(e) }
            onKeyDown={ e =&gt; this.handleKeyDown(e) }
          /&gt;
        &lt;/li&gt;
      );
    }
  }

}
</code></pre> 
    <h1 id="apptsx_1"><a class="head_anchor" href="#apptsx_1">&nbsp;</a>app.tsx</h1> 
    <p>This file contains the application’s entry point and the declaration of the <code class="prettyprint">TodoApp</code> component which is the only top-level component in this application. </p> 
    <pre><code class="prettyprint">/// &lt;reference path="../typings/react/react-global.d.ts" /&gt;
/// &lt;reference path="./interfaces.d.ts"/&gt;

// We should have installed a type declaration file but
// for the director npm package but it is not available
// so we will use this declaration to avoid compilation 
// errors for now.
declare var Router : any;

var TodoModel = app.models.TodoModel;
var TodoFooter = app.components.TodoFooter;
var TodoItem = app.components.TodoItem;

namespace app.components {

  export class TodoApp extends React.Component&lt;IAppProps, IAppState&gt; {

    constructor(props : IAppProps) {
      super(props);
      this.state = {
        nowShowing: app.constants.ALL_TODOS,
        editing: null
      };
    }

    public componentDidMount() {
      var setState = this.setState;
      // we will configure the Router here
      // our router is provided by the
      // director npm module
      // the router observes changes in the URL and 
      // triggers some component's event accordingly 
      var router = Router({
        '/': setState.bind(this, {nowShowing: app.constants.ALL_TODOS}),
        '/active': setState.bind(this, {nowShowing: app.constants.ACTIVE_TODOS}),
        '/completed': setState.bind(this, {nowShowing: app.constants.COMPLETED_TODOS})
      });
      router.init('/');
    }

    public handleNewTodoKeyDown(event) {
      if (event.keyCode !== app.constants.ENTER_KEY) {
        return;
      }

      event.preventDefault();

      var val = React.findDOMNode&lt;HTMLInputElement&gt;(this.refs["newField"]).value.trim();

      if (val) {
        this.props.model.addTodo(val);
        React.findDOMNode&lt;HTMLInputElement&gt;(this.refs["newField"]).value = '';
      }
    }

    public toggleAll(event) {
      var checked = event.target.checked;
      this.props.model.toggleAll(checked);
    }

    public toggle(todoToToggle) {
      this.props.model.toggle(todoToToggle);
    }

    public destroy(todo) {
      this.props.model.destroy(todo);
    }

    public edit(todo) {
      this.setState({editing: todo.id});
    }

    public save(todoToSave, text) {
      this.props.model.save(todoToSave, text);
      this.setState({editing: null});
    }

    public cancel() {
      this.setState({editing: null});
    }

    public clearCompleted() {
      this.props.model.clearCompleted();
    }

    // the JSX syntax is quite intuitive but check out
    // https://facebook.github.io/react/docs/jsx-in-depth.html
    // if you need additional help
    public render() {
      var footer;
      var main;
      var todos = this.props.model.todos;

      var shownTodos = todos.filter(function (todo) {
        switch (this.state.nowShowing) {
        case app.constants.ACTIVE_TODOS:
          return !todo.completed;
        case app.constants.COMPLETED_TODOS:
          return todo.completed;
        default:
          return true;
        }
      }, this);

      var todoItems = shownTodos.map(function (todo) {
        return (
          &lt;TodoItem
            key={todo.id}
            todo={todo}
            onToggle={this.toggle.bind(this, todo)}
            onDestroy={this.destroy.bind(this, todo)}
            onEdit={this.edit.bind(this, todo)}
            editing={this.state.editing === todo.id}
            onSave={this.save.bind(this, todo)}
            onCancel={ e =&gt; this.cancel() }
          /&gt;
        );
      }, this);

      var activeTodoCount = todos.reduce(function (accum, todo) {
        return todo.completed ? accum : accum + 1;
      }, 0);

      var completedCount = todos.length - activeTodoCount;

      if (activeTodoCount || completedCount) {
        footer =
          &lt;TodoFooter
            count={activeTodoCount}
            completedCount={completedCount}
            nowShowing={this.state.nowShowing}
            onClearCompleted={ e=&gt; this.clearCompleted() }
          /&gt;;
      }

      if (todos.length) {
        main = (
          &lt;section className="main"&gt;
            &lt;input
              className="toggle-all"
              type="checkbox"
              onChange={ e =&gt; this.toggleAll(e) }
              checked={activeTodoCount === 0}
            /&gt;
            &lt;ul className="todo-list"&gt;
              {todoItems}
            &lt;/ul&gt;
          &lt;/section&gt;
        );
      }

      return (
        &lt;div&gt;
          &lt;header className="header"&gt;
            &lt;h1&gt;todos&lt;/h1&gt;
            &lt;input
              ref="newField"
              className="new-todo"
              placeholder="What needs to be done?"
              onKeyDown={ e =&gt; this.handleNewTodoKeyDown(e) }
              autoFocus={true}
            /&gt;
          &lt;/header&gt;
          {main}
          {footer}
        &lt;/div&gt;
      );
    }
  }
}

var model = new TodoModel('react-todos');
var TodoApp = app.components.TodoApp;

function render() {
  React.render(
    &lt;TodoApp model={model}/&gt;,
    document.getElementsByClassName('todoapp')[0]
  );
}

model.subscribe(render);
render();
</code></pre> 
    <p>Make sure that the <code class="prettyprint">this</code> operator is pointing to the right element at all times. For example, you should use arrow functions:</p> 
    <pre><code class="prettyprint">onKeyDown={ e =&gt; this.handleNewTodoKeyDown(e) }
</code></pre> 
    <p>instead of </p> 
    <pre><code class="prettyprint">onKeyDown={ this.handleNewTodoKeyDown }
</code></pre> 
    <p>To ensure that the <code class="prettyprint">this</code> operator is pointing to the component inside the <code class="prettyprint">handleNewTodoKeyDown</code> function.</p> 
    <h1 id="5-compiling-the-application_1"><a class="head_anchor" href="#5-compiling-the-application_1">&nbsp;</a>5. Compiling the application</h1> 
    <p>To compile our application we must add a file named <code class="prettyprint">tsconfig.json</code> under the <code class="prettyprint">js</code> folder:</p> 
    <pre><code class="prettyprint">{
    "compilerOptions": {
        "target": "es5",
        "module": "commonjs",
        "moduleResolution": "node",
        "isolatedModules": false,
        "jsx": "react",
        "experimentalDecorators": true,
        "emitDecoratorMetadata": true,
        "declaration": false,
        "noImplicitAny": false,
        "removeComments": true,
        "noLib": false,
        "preserveConstEnums": true,
        "suppressImplicitAnyIndexErrors": true
    },
    "filesGlob": [
        "**/*.ts",
        "**/*.tsx",
        "!node_modules/**"
    ],
    "files": [
        "constants.ts",
        "interfaces.d.ts",
        "todoModel.ts",
        "utils.ts",
        "app.tsx",
        "footer.tsx",
        "todoItem.tsx"
    ],
    "exclude": []
}
</code></pre> 
    <p>If we check out the <a href="https://github.com/Microsoft/TypeScript/wiki/Compiler-Options">TypeScript compiler options</a> we can find out how to use the <code class="prettyprint">tsconfig.json</code> file:</p> 
    <blockquote class="large">
     <p>The <code class="prettyprint">--project</code> or <code class="prettyprint">-p</code> can be used to compile the project in the given directory. The directory needs to contain a <code class="prettyprint">tsconfig.json</code> file to direct compilation. </p> 
    </blockquote> 
    <p>We can compile our application using the following command:</p> 
    <pre><code class="prettyprint"># from the application's root folder
$ tsc -p js
</code></pre> 
    <p>This should create the following JavaScript files under the <code class="prettyprint">js</code> folder:</p> 
    <pre><code class="prettyprint">??? js
?   ??? app.js
?   ??? constants.js
?   ??? footer.js
?   ??? todoItem.js
?   ??? todoModel.js
?   ??? utils.ts
</code></pre> 
    <p>These are the files that were referenced in our <code class="prettyprint">index.html</code> file: </p> 
    <pre><code class="prettyprint">&lt;script type="text/javascript" src="js/constants.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/utils.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/todoModel.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/todoItem.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/footer.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="js/app.js"&gt;&lt;/script&gt;
</code></pre> 
    <p>We are now ready to run our application.</p> 
    <h1 id="6-running-the-application_1"><a class="head_anchor" href="#6-running-the-application_1">&nbsp;</a>6. Running the application</h1> 
    <p>To run the application, we need a web server. We will use the npm module <a href="https://www.npmjs.com/package/http-server">http-server</a>.</p> 
    <p>We can install this package using the following commmand:</p> 
    <pre><code class="prettyprint">$ npm install -g http-server
</code></pre> 
    <blockquote class="large">
     <p>Note: use sudo if you are using OSX</p> 
    </blockquote> 
    <p>Use the following command to run the application:</p> 
    <pre><code class="prettyprint"># from the application's root folder
$ http-server
</code></pre> 
    <p>If you open a browser and navigate to <code class="prettyprint">http://127.0.0.1:8080/</code> you should be able to see the application running:</p> 
    <p><a href="https://svbtleusercontent.com/7yjwysnxnekg.png"><img src="https://svbtleusercontent.com/7yjwysnxnekg_small.png" alt="Screen Shot 2015-10-12 at 12.20.29 a.m..png"></a></p> 
    <p>Remember to open the chrome developer tools to take a look to the React developer tools extension for chrome and how the value of the properties and state of the components change as you interact with the application.</p> 
    <p><a href="https://svbtleusercontent.com/td99h20vs5yzq.png"><img src="https://svbtleusercontent.com/td99h20vs5yzq_small.png" alt="Screen Shot 2015-10-12 at 9.50.35 p.m..png"></a></p> 
    <h1 id="7-conclusions_1"><a class="head_anchor" href="#7-conclusions_1">&nbsp;</a>7. Conclusions</h1> 
    <p>In this post we have learned how to set up a development environment and create a new project to work with TypeScript and React.</p> 
    <p>You can browse the source code online at <a href="https://github.com/tastejs/todomvc/tree/master/examples/typescript-react">GitHub</a>.</p> 
    <p>Are you thirsty for more? If so, check out <a href="http://jaysoo.ca/2015/09/26/typed-react-and-redux/">Typed React and Redux</a> by <a href="https://twitter.com/jay_soo">Jack Hsu</a>.</p> 
    <p>We will keep this blog updated and write more about React and TypeScript in the future. <a href="http://blog.wolksoftware.com/feed">Don’t forget to subscribe</a> if you don’t want to miss it out!</p> 
    <p>Please feel free to talk about this article with us via <a href="https://twitter.com/OweR_ReLoaDeD">@OweR_ReLoaDeD</a> and <a href="https://twitter.com/WolkSoftwareLtd">@WolkSoftwareLtd</a>.</p> 
    <figure class="postend kudo able clearfix" id="kudo_1o8InjbZ8hWWWCic1jY"> 
     <a href="#kudo"> 
      <div class="filling">
       &nbsp;
      </div> </a> 
     <div class="num">
      2,024
     </div> 
     <div class="txt">
      Kudos
     </div> 
    </figure> 
    <figure class="side kudo able clearfix" id="kudo_side_1o8InjbZ8hWWWCic1jY"> 
     <a href="#kudo"> 
      <div class="filling">
       &nbsp;
      </div> </a> 
     <div class="num">
      2,024
     </div> 
     <div class="txt">
      Kudos
     </div> 
    </figure> 
   </article> 
   <div id="share_links" data-no-turbolink> 
    <a href="https://twitter.com/share" class="twitter-share-button" data-via="WolkSoftwareLtd" data-related="svbtle" data-no-turbolink>Tweet</a> 
    <div style="margin-top: 4px; margin-bottom: 8px; margin-left: 0px; display: block;" class="fb-share-button" data-href="http://blog.wolksoftware.com/working-with-react-and-typescript" data-layout="button_count" data-no-turbolink></div> 
    <div> 
    </div>
   </div>
  </section> 
  <section id="readnext"> 
   <a href="//blog.wolksoftware.com/about-classes-inheritance-and-object-oriented-design-in-typescript-and-es6"> <h4 class="readnext_header">Now read this</h4> <h3 class="readnext_title">About object-oriented design and the “class” &amp; “extends” keywords in TypeScript / ES6</h3> <p class="readnext_content">A few weeks ago I found an interesting article titled In Defense of JavaScript Classes. The article exposed some concerns about the class keyword in ES6 / TypeScript: These days it feels like everyone is attacking classes in JavaScript.... <span class="continue_btn">Continue&nbsp;?</span></p> </a> 
  </section> 
  <footer id="blog_foot" class="cf"> 
   <ul id="foot_links"> 
    <li><a href="https://twitter.com/WolkSoftwareLtd">@WolkSoftwareLtd</a></li> 
    <li><a href="http://wolksoftware.com">wolksoftware.com</a></li> 
   </ul> 
   <figure id="user_foot">
    <a href="/">Svbtle</a>
   </figure> 
   <h5><a href="//blog.wolksoftware.com">Wolk Software Engineering</a></h5> 
  </footer> 
  <footer id="foot"> 
   <figure id="logo_foot">
    <a href="https://svbtle.com">Svbtle</a>
   </figure> 
   <a href="https://svbtle.com/terms" style="color: #ccc; margin-left: 25px;">Terms</a> 
   <span style="color: #ccc;">•</span> 
   <a href="https://svbtle.com/privacy" style="color: #ccc;">Privacy</a> 
   <span style="color: #ccc;">•</span> 
   <a href="https://svbtle.com/promise" style="color: #ccc; margin-right: 15px;">Promise</a> 
   <br>
   <br> 
  </footer> 
  <div id="lights">
   &nbsp;
  </div> 
  <script>
  var _sf_async_config = { uid: 1721, domain: 'svbtle.com'};
  (function() {
    function loadChartbeat() {
      window._sf_endpt = (new Date()).getTime();
      var e = document.createElement('script');
      e.setAttribute('language', 'javascript');
      e.setAttribute('type', 'text/javascript');
      e.setAttribute('src','//static.chartbeat.com/js/chartbeat.js');
      document.body.appendChild(e);
    };
    var oldonload = window.onload;
    window.onload = (typeof window.onload != 'function') ?
      loadChartbeat : function() { oldonload(); loadChartbeat(); };
  })();
</script>   
 </body>
</html>