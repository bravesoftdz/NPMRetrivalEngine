<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
  <title>FAQ — CasperJS 1.1.0-DEV documentation</title> 
  <link rel="stylesheet" href="_static/basic.css" type="text/css"> 
  <link rel="stylesheet" href="_static/pygments.css" type="text/css"> 
  <link rel="stylesheet" href="https://media.readthedocs.org/css/badge_only.css" type="text/css"> 
  <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    './',
        VERSION:     '1.1.0-DEV',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true,
        SOURCELINK_SUFFIX: '.txt'
      };
    </script> 
  <script type="text/javascript" src="https://media.readthedocs.org/javascript/jquery/jquery-2.0.3.min.js"></script> 
  <script type="text/javascript" src="https://media.readthedocs.org/javascript/jquery/jquery-migrate-1.2.1.min.js"></script> 
  <script type="text/javascript" src="https://media.readthedocs.org/javascript/underscore.js"></script> 
  <script type="text/javascript" src="https://media.readthedocs.org/javascript/doctools.js"></script> 
  <script type="text/javascript" src="https://media.readthedocs.org/javascript/readthedocs-doc-embed.js"></script> 
  <link rel="shortcut icon" href="_static/casperjs-favicon.ico"> 
  <link rel="index" title="Index" href="genindex.html"> 
  <link rel="search" title="Search" href="search.html"> 
  <link rel="next" title="Cookbook" href="cookbook.html"> 
  <link rel="prev" title="Debugging" href="debugging.html"> 
  <link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Asap:400,700,400italic,700italic&amp;subset=latin,latin-ext"> 
  <link rel="stylesheet" title="Dark theme" href="_static/casperjs-dark.css"> 
  <link rel="alternate stylesheet" title="Light theme" href="_static/casperjs-light.css"> 
  <script type="text/javascript" src="_static/style-switcher.js"></script> 
  <!-- RTD Extra Head --> 
  <!-- 
Always link to the latest version, as canonical.
http://docs.readthedocs.org/en/latest/canonical.html
--> 
  <link rel="canonical" href="http://docs.casperjs.org/en/latest/faq.html"> 
  <link rel="stylesheet" href="https://media.readthedocs.org/css/readthedocs-doc-embed.css" type="text/css"> 
  <script type="text/javascript" src="_static/readthedocs-data.js"></script> 
  <!-- Add page-specific data, which must exist in the page js, not global --> 
  <script type="text/javascript">
READTHEDOCS_DATA['page'] = 'faq' 		
READTHEDOCS_DATA['source_suffix'] = '.rst'
</script> 
  <script type="text/javascript" src="_static/readthedocs-dynamic-include.js"></script> 
  <!-- end RTD <extrahead> -->
 </head> 
 <body role="document"> 
  <div class="related" role="navigation" aria-label="related navigation"> 
   <h3>Navigation</h3> 
   <ul> 
    <li class="right" style="margin-right: 10px"> <a href="genindex.html" title="General Index" accesskey="I">index</a></li> 
    <li class="right"> <a href="cookbook.html" title="Cookbook" accesskey="N">next</a> |</li> 
    <li class="right"> <a href="debugging.html" title="Debugging" accesskey="P">previous</a> |</li> 
    <li class="nav-item nav-item-0"><a href="index.html">CasperJS 1.1.0-DEV documentation</a> »</li> 
   </ul> 
  </div> 
  <div class="document"> 
   <div class="documentwrapper"> 
    <div class="bodywrapper"> 
     <div class="body" role="main"> 
      <span class="target" id="faq"></span>
      <div class="section" id="index-0"> 
       <span id="id1"></span>
       <h1>FAQ<a class="headerlink" href="#index-0" title="Permalink to this headline">¶</a></h1> 
       <div class="contents local topic" id="here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers"> 
        <p class="topic-title first">Here’s a selection of the most frequently asked questions by CasperJS newcomers:</p> 
        <ul class="simple"> 
         <li><a class="reference internal" href="#is-casperjs-a-node-js-library" id="id2">Is CasperJS a node.js library?</a></li> 
         <li><a class="reference internal" href="#i-m-stuck-i-think-there-s-a-bug-what-can-i-do" id="id3">I’m stuck! I think there’s a bug! What can I do?</a></li> 
         <li><a class="reference internal" href="#the-casper-test-property-is-undefined-i-can-t-write-any-test" id="id4">The <code class="docutils literal"><span class="pre">casper.test</span></code> property is undefined, I can’t write any test!</a></li> 
         <li><a class="reference internal" href="#i-keep-copy-and-pasting-stuff-in-my-test-scripts-that-s-boring" id="id5">I keep copy and pasting stuff in my test scripts, that’s boring</a></li> 
         <li><a class="reference internal" href="#what-is-the-versioning-policy-of-casperjs" id="id6">What is the versioning policy of CasperJS?</a></li> 
         <li><a class="reference internal" href="#can-i-use-jquery-with-casperjs" id="id7">Can I use jQuery with CasperJS?</a></li> 
         <li><a class="reference internal" href="#can-i-use-casperjs-without-using-the-casperjs-executable" id="id8">Can I use CasperJS without using the <code class="docutils literal"><span class="pre">casperjs</span></code> executable?</a></li> 
         <li><a class="reference internal" href="#how-can-i-catch-http-404-and-other-status-codes" id="id9">How can I catch HTTP 404 and other status codes?</a></li> 
         <li><a class="reference internal" href="#where-does-casperjs-write-its-logfile" id="id10">Where does CasperJS write its logfile?</a></li> 
         <li><a class="reference internal" href="#what-s-this-mysterious-utils-object" id="id11">What’s this mysterious <code class="docutils literal"><span class="pre">__utils__</span></code> object?</a></li> 
         <li><a class="reference internal" href="#how-does-then-and-the-step-stack-work" id="id12">How does <code class="docutils literal"><span class="pre">then()</span></code> and the step stack work?</a></li> 
         <li><a class="reference internal" href="#i-m-having-hard-times-downloading-files-using-download" id="id13">I’m having hard times downloading files using <code class="docutils literal"><span class="pre">download()</span></code></a></li> 
         <li><a class="reference internal" href="#is-it-possible-to-achieve-parallel-browsing-using-casperjs" id="id14">Is it possible to achieve parallel browsing using CasperJS?</a></li> 
         <li><a class="reference internal" href="#can-i-access-manipulate-dom-elements-directly-from-the-casperjs-environment" id="id15">Can I access &amp; manipulate DOM elements directly from the CasperJS environment?</a></li> 
         <li><a class="reference internal" href="#why-can-t-i-create-a-new-casper-instance-in-a-test-environment" id="id16">Why can’t I create a new <cite>casper</cite> instance in a test environment?</a></li> 
         <li><a class="reference internal" href="#okay-honestly-i-m-stuck-with-javascript" id="id17">Okay, honestly, I’m stuck with Javascript.</a></li> 
         <li><a class="reference internal" href="#how-do-i-use-phantomjs-page-module-api-in-casperjs" id="id18">How do I use PhantomJS page module API in casperjs?</a></li> 
         <li><a class="reference internal" href="#how-do-i-provide-my-implementation-of-a-remote-resource" id="id19">How do I provide my implementation of a remote resource?</a></li> 
         <li><a class="reference internal" href="#i-m-getting-intermittent-test-failure-what-can-i-do-to-fix-them" id="id20">I’m getting intermittent test failure, what can I do to fix them?</a></li> 
        </ul> 
       </div> 
       <span class="target" id="faq-node"></span>
       <div class="section" id="is-casperjs-a-node-js-library"> 
        <span id="index-1"></span>
        <h2>Is CasperJS a <a class="reference external" href="http://nodejs.org/">node.js</a> library?<a class="headerlink" href="#is-casperjs-a-node-js-library" title="Permalink to this headline">¶</a></h2> 
        <p><strong>No.</strong> CasperJS is written on top of <a class="reference external" href="http://phantomjs.org/">PhantomJS</a>, which is a node-independent <a class="reference external" href="http://qt.digia.com/">Qt</a>/<a class="reference external" href="http://www.webkit.org/">WebKit</a> based library. If you try to run your CasperJS script with node, it just won’t work out of the box.</p> 
        <div class="admonition hint"> 
         <p class="first admonition-title">Hint</p> 
         <p class="last">If you want to drive CasperJS from node, try <a class="reference external" href="https://github.com/WaterfallEngineering/SpookyJS">SpookyJS</a>.</p> 
        </div> 
       </div> 
       <div class="section" id="i-m-stuck-i-think-there-s-a-bug-what-can-i-do"> 
        <span id="index-2"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">I’m stuck! I think there’s a bug! What can I do?</a><a class="headerlink" href="#i-m-stuck-i-think-there-s-a-bug-what-can-i-do" title="Permalink to this headline">¶</a></h2> 
        <p>Before rage-tweeting:</p> 
        <ol class="arabic simple"> 
         <li>Read the <a class="reference external" href="http://casperjs.org/">docs</a></li> 
         <li>Check if an <a class="reference external" href="https://github.com/casperjs/casperjs/issues">issue</a> has been open about your problem already</li> 
         <li>Check you’re running the <a class="reference external" href="https://github.com/casperjs/casperjs/tags">latest stable tag</a></li> 
         <li>Check you’re running the <a class="reference external" href="http://code.google.com/p/phantomjs/downloads/list">latest version</a> of <a class="reference external" href="http://phantomjs.org/">PhantomJS</a></li> 
         <li>Ask on the <a class="reference external" href="https://groups.google.com/forum/#!forum/casperjs">project mailing list</a>:
          <ol class="loweralpha"> 
           <li>try to post a reproducible, minimal test case</li> 
           <li>compare casperjs results with native phantomjs ones</li> 
           <li>if the problem also occurs with native phantomjs, ask on <a class="reference external" href="https://groups.google.com/forum/#!forum/phantomjs">phantomjs mailing list</a></li> 
          </ol> </li> 
         <li>Eventually, <a class="reference external" href="https://github.com/casperjs/casperjs/issues/new">file an issue</a>.</li> 
        </ol> 
       </div> 
       <div class="section" id="the-casper-test-property-is-undefined-i-can-t-write-any-test"> 
        <span id="index-3"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">The <code class="docutils literal"><span class="pre">casper.test</span></code> property is undefined, I can’t write any test!</a><a class="headerlink" href="#the-casper-test-property-is-undefined-i-can-t-write-any-test" title="Permalink to this headline">¶</a></h2> 
        <p>That’s because as of 1.1, the <code class="docutils literal"><span class="pre">casper.test</span></code> property is only set to a <a class="reference internal" href="modules/tester.html"><span class="doc">Tester</span></a> instance when using the <code class="docutils literal"><span class="pre">casperjs</span> <span class="pre">test</span></code> subcommand.</p> 
        <p>You may want to read the <a class="reference internal" href="testing.html"><span class="doc">testing documentation</span></a> for more information.</p> 
       </div> 
       <div class="section" id="i-keep-copy-and-pasting-stuff-in-my-test-scripts-that-s-boring"> 
        <span id="index-4"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">I keep copy and pasting stuff in my test scripts, that’s boring</a><a class="headerlink" href="#i-keep-copy-and-pasting-stuff-in-my-test-scripts-that-s-boring" title="Permalink to this headline">¶</a></h2> 
        <p>Have a look at <a class="reference external" href="https://gist.github.com/3813361">this gist</a>, it might help.</p> 
        <p>Also, don’t forget that CasperJS supports a <a class="reference external" href="http://wiki.commonjs.org/wiki/Modules/1.1">CommonJS-compliant module pattern</a> implementation.</p> 
        <div class="admonition note"> 
         <p class="first admonition-title">Note</p> 
         <p class="last">CasperJS’ implementation of <code class="docutils literal"><span class="pre">require()</span></code> differs a bit from the one provided by <a class="reference external" href="http://phantomjs.org/">PhantomJS</a>, but I personally never encountered any functional difference.</p> 
        </div> 
       </div> 
       <div class="section" id="what-is-the-versioning-policy-of-casperjs"> 
        <span id="index-5"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">What is the versioning policy of CasperJS?</a><a class="headerlink" href="#what-is-the-versioning-policy-of-casperjs" title="Permalink to this headline">¶</a></h2> 
        <p>Releases will follow the <a class="reference external" href="http://semver.org/">SemVer standard</a>; they will be numbered with the follow format:</p> 
        <div class="highlight-text">
         <div class="highlight">
          <pre><span></span>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;[-&lt;identifier&gt;]
</pre>
         </div> 
        </div> 
        <p>And constructed with the following guidelines:</p> 
        <ul class="simple"> 
         <li>Breaking backwards compatibility bumps the major</li> 
         <li>New additions without breaking backwards compatibility bumps the minor</li> 
         <li>Bug fixes and misc changes bump the patch</li> 
         <li>Unstable, special and trunk versions will have a proper identifier</li> 
        </ul> 
       </div> 
       <div class="section" id="can-i-use-jquery-with-casperjs"> 
        <span id="index-6"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">Can I use jQuery with CasperJS?</a><a class="headerlink" href="#can-i-use-jquery-with-casperjs" title="Permalink to this headline">¶</a></h2> 
        <p>Sure, you can use <a class="reference external" href="http://jquery.com/">jQuery</a>, as every single other javascript library on Earth.</p> 
        <p>A first solution is to inject it into the remote DOM environment by hand using the standard <code class="docutils literal"><span class="pre">WebPage.injectJs()</span></code> method:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="nx">casper</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">injectJs</span><span class="p">(</span><span class="s1">'/path/to/jquery.js'</span><span class="p">);</span>
</pre>
         </div> 
        </div> 
        <p>In the event that you require jQuery being available on every page, you can make use of the <code class="docutils literal"><span class="pre">clientScripts</span></code> option of CasperJS:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">).</span><span class="nx">create</span><span class="p">({</span>
    <span class="nx">clientScripts</span><span class="o">:</span> <span class="p">[</span><span class="s2">"includes/jquery.min.js"</span><span class="p">]</span>
<span class="p">});</span>
</pre>
         </div> 
        </div> 
        <div class="admonition note"> 
         <p class="first admonition-title">Note</p> 
         <p class="last">You can’t <em>inject</em> scripts using the HTTP protocol, you actually have to use a relative/absolute filesystem path to the script resource.</p> 
        </div> 
       </div> 
       <div class="section" id="can-i-use-casperjs-without-using-the-casperjs-executable"> 
        <span id="index-7"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">Can I use CasperJS without using the <code class="docutils literal"><span class="pre">casperjs</span></code> executable?</a><a class="headerlink" href="#can-i-use-casperjs-without-using-the-casperjs-executable" title="Permalink to this headline">¶</a></h2> 
        <p>Yes, you can call a CasperJS script directly with the <code class="docutils literal"><span class="pre">phantomjs</span></code> executable, but if you do so, you must set the <code class="docutils literal"><span class="pre">phantom.casperPath</span></code> property to the path where the library root is located on your system:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="c1">// casperscript.js</span>
<span class="nx">phantom</span><span class="p">.</span><span class="nx">casperPath</span> <span class="o">=</span> <span class="s1">'/path/to/casperjs'</span><span class="p">;</span>
<span class="nx">phantom</span><span class="p">.</span><span class="nx">injectJs</span><span class="p">(</span><span class="nx">phantom</span><span class="p">.</span><span class="nx">casperPath</span> <span class="o">+</span> <span class="s1">'/bin/bootstrap.js'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>
<span class="c1">// ...</span>
</pre>
         </div> 
        </div> 
        <p>You can run such a script like any other standard <a class="reference external" href="http://phantomjs.org/">PhantomJS</a> script:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="nx">$</span> <span class="nx">phantomjs</span> <span class="nx">casperscript</span><span class="p">.</span><span class="nx">js</span>
</pre>
         </div> 
        </div> 
        <p><strong>If you’re on Windows</strong>, this is the way you may manage to get casper working the most easily:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="nx">phantom</span><span class="p">.</span><span class="nx">casperPath</span> <span class="o">=</span> <span class="s1">'C:\\path\\to\\your\\repo\\lib\\casperjs-0.6.X'</span><span class="p">;</span>
<span class="nx">phantom</span><span class="p">.</span><span class="nx">injectJs</span><span class="p">(</span><span class="nx">phantom</span><span class="p">.</span><span class="nx">casperPath</span> <span class="o">+</span> <span class="s1">'\\bin\\bootstrap.js'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>

<span class="c1">// do stuff</span>
</pre>
         </div> 
        </div> 
       </div> 
       <div class="section" id="how-can-i-catch-http-404-and-other-status-codes"> 
        <span id="index-8"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">How can I catch HTTP 404 and other status codes?</a><a class="headerlink" href="#how-can-i-catch-http-404-and-other-status-codes" title="Permalink to this headline">¶</a></h2> 
        <p>You can define your own <a class="reference external" href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">HTTP status code</a> handlers by using the <code class="docutils literal"><span class="pre">httpStatusHandlers</span></code> option of the Casper object. You can also catch other HTTP status codes as well, as demoed below:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>

<span class="nx">casper</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'http.status.404'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">resource</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'wait, this url is 404: '</span> <span class="o">+</span> <span class="nx">resource</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">casper</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">'http.status.500'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">resource</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'woops, 500 error: '</span> <span class="o">+</span> <span class="nx">resource</span><span class="p">.</span><span class="nx">url</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">casper</span><span class="p">.</span><span class="nx">start</span><span class="p">(</span><span class="s1">'http://mywebsite/404'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'We suppose this url return an HTTP 404'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">casper</span><span class="p">.</span><span class="nx">thenOpen</span><span class="p">(</span><span class="s1">'http://mywebsite/500'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'We suppose this url return an HTTP 500'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">casper</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'Done.'</span><span class="p">).</span><span class="nx">exit</span><span class="p">();</span>
<span class="p">});</span>
</pre>
         </div> 
        </div> 
        <div class="admonition hint"> 
         <p class="first admonition-title">Hint</p> 
         <p class="last">Check out all the other cool <a class="reference internal" href="events-filters.html"><span class="doc">events</span></a> you may use as well.</p> 
        </div> 
       </div> 
       <div class="section" id="where-does-casperjs-write-its-logfile"> 
        <span id="index-9"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">Where does CasperJS write its logfile?</a><a class="headerlink" href="#where-does-casperjs-write-its-logfile" title="Permalink to this headline">¶</a></h2> 
        <p>Nowhere. CasperJS doesn’t write logs on the filesystem. You have to implement this by yourself if needed.</p> 
       </div> 
       <div class="section" id="what-s-this-mysterious-utils-object"> 
        <span id="index-10"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">What’s this mysterious <code class="docutils literal"><span class="pre">__utils__</span></code> object?</a><a class="headerlink" href="#what-s-this-mysterious-utils-object" title="Permalink to this headline">¶</a></h2> 
        <p>The <code class="docutils literal"><span class="pre">__utils__</span></code> object is actually a <a class="reference internal" href="modules/clientutils.html#clientutils-prototype"><span class="std std-ref">ClientUtils object</span></a> which have been automatically injected into the page DOM and is therefore always available.</p> 
        <p>So everytime to perform an <a class="reference internal" href="modules/casper.html#casper-evaluate"><span class="std std-ref">evaluate()</span></a> call, you have this instance available to perform common operation like:</p> 
        <ul class="simple"> 
         <li>fetching nodes using CSS3 or XPath selectors,</li> 
         <li>retrieving information about element properties (attributes, size, bounds, etc.),</li> 
         <li>sending AJAX requests,</li> 
         <li>triggering DOM events</li> 
        </ul> 
        <p>Check out the <a class="reference internal" href="modules/clientutils.html"><span class="doc">whole API</span></a>. You even have <a class="reference internal" href="modules/clientutils.html#bookmarklet"><span class="std std-ref">a bookmarklet</span></a> to play around with this <code class="docutils literal"><span class="pre">__utils__</span></code> instance right within your browser console!</p> 
        <div class="admonition note"> 
         <p class="first admonition-title">Note</p> 
         <p class="last">You’re not obliged at all to use the <code class="docutils literal"><span class="pre">__utils__</span></code> instance in your scripts. It’s just there because it’s used by CasperJS internals.</p> 
        </div> 
       </div> 
       <div class="section" id="how-does-then-and-the-step-stack-work"> 
        <span id="index-11"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">How does <code class="docutils literal"><span class="pre">then()</span></code> and the step stack work?</a><a class="headerlink" href="#how-does-then-and-the-step-stack-work" title="Permalink to this headline">¶</a></h2> 
        <p>Disclaimer This entry is based on an <a class="reference external" href="http://stackoverflow.com/a/11957919/330911">answer I made on Stack Overflow</a>.</p> 
        <p>The <code class="docutils literal"><span class="pre">then()</span></code> method basically adds a new navigation step in a stack. A step is a javascript function which can do two different things:</p> 
        <ol class="arabic simple"> 
         <li>waiting for the previous step - if any - being executed</li> 
         <li>waiting for a requested url and related page to load</li> 
        </ol> 
        <p>Let’s take a simple navigation scenario:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">).</span><span class="nx">create</span><span class="p">();</span>

<span class="nx">casper</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>

<span class="nx">casper</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="nx">step1</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'this is step one'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">casper</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="nx">step2</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'this is step two'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">casper</span><span class="p">.</span><span class="nx">thenOpen</span><span class="p">(</span><span class="s1">'http://google.com/'</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">step3</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'this is step 3 (google.com is loaded)'</span><span class="p">);</span>
<span class="p">});</span>
</pre>
         </div> 
        </div> 
        <p>You can print out all the created steps within the stack like this:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="nx">require</span><span class="p">(</span><span class="s1">'utils'</span><span class="p">).</span><span class="nx">dump</span><span class="p">(</span><span class="nx">casper</span><span class="p">.</span><span class="nx">steps</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">step</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">step</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
<span class="p">}));</span>
</pre>
         </div> 
        </div> 
        <p>That gives:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="nx">$</span> <span class="nx">casperjs</span> <span class="nx">test</span><span class="o">-</span><span class="nx">steps</span><span class="p">.</span><span class="nx">js</span>
<span class="p">[</span>
    <span class="s2">"function step1() { this.echo('this is step one'); }"</span><span class="p">,</span>
    <span class="s2">"function step2() { this.echo('this is step two'); }"</span><span class="p">,</span>
    <span class="s2">"function _step() { this.open(location, settings); }"</span><span class="p">,</span>
    <span class="s2">"function step3() { this.echo('this is step 3 (google.com is loaded)'); }"</span>
<span class="p">]</span>
</pre>
         </div> 
        </div> 
        <p>Notice the <code class="docutils literal"><span class="pre">_step()</span></code> function which has been added automatically by CasperJS to load the url for us; when the url is loaded, the next step available in the stack — which is <code class="docutils literal"><span class="pre">step3()</span></code> — is <em>then</em> called.</p> 
        <p>When you have defined your navigation steps, <code class="docutils literal"><span class="pre">run()</span></code> executes them one by one sequentially:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="nx">casper</span><span class="p">.</span><span class="nx">run</span><span class="p">();</span>
</pre>
         </div> 
        </div> 
        <div class="admonition note"> 
         <p class="first admonition-title">Note</p> 
         <p class="last">The callback/listener stuff is an implementation of the <a class="reference external" href="http://blog.thepete.net/blog/2011/07/02/javascript-promises/">Promise pattern</a>.</p> 
        </div> 
        <span class="target" id="faq-web-security"></span>
       </div> 
       <div class="section" id="i-m-having-hard-times-downloading-files-using-download"> 
        <span id="index-12"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">I’m having hard times downloading files using <code class="docutils literal"><span class="pre">download()</span></code></a><a class="headerlink" href="#i-m-having-hard-times-downloading-files-using-download" title="Permalink to this headline">¶</a></h2> 
        <p>You should try to disable <cite>web security</cite>. Using the <code class="docutils literal"><span class="pre">--web-security</span></code> command line option:</p> 
        <div class="highlight-text">
         <div class="highlight">
          <pre><span></span>$ casperjs --web-security=no myscript.js
</pre>
         </div> 
        </div> 
        <p>Within code:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="kd">var</span> <span class="nx">casper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'casper'</span><span class="p">).</span><span class="nx">create</span><span class="p">({</span>
    <span class="nx">pageSettings</span><span class="o">:</span> <span class="p">{</span>
        <span class="nx">webSecurityEnabled</span><span class="o">:</span> <span class="kc">false</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre>
         </div> 
        </div> 
        <p>Or anytime:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="nx">casper</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">settings</span><span class="p">.</span><span class="nx">webSecurityEnabled</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</pre>
         </div> 
        </div> 
       </div> 
       <div class="section" id="is-it-possible-to-achieve-parallel-browsing-using-casperjs"> 
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">Is it possible to achieve parallel browsing using CasperJS?</a><a class="headerlink" href="#is-it-possible-to-achieve-parallel-browsing-using-casperjs" title="Permalink to this headline">¶</a></h2> 
        <p><a class="reference external" href="https://groups.google.com/d/topic/casperjs/Scx4Cjqp7hE/discussion">Officially no</a>, but you may want to try.</p> 
       </div> 
       <div class="section" id="can-i-access-manipulate-dom-elements-directly-from-the-casperjs-environment"> 
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">Can I access &amp; manipulate DOM elements directly from the CasperJS environment?</a><a class="headerlink" href="#can-i-access-manipulate-dom-elements-directly-from-the-casperjs-environment" title="Permalink to this headline">¶</a></h2> 
        <p>No. Like in PhantomJS, you have to use <a class="reference internal" href="modules/casper.html#casper-evaluate"><span class="std std-ref">Casper#evaluate()</span></a> to access actual page DOM and manipulate elements.</p> 
        <p>For example, you <strong>can’t</strong> do this:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="c1">// this won't work</span>
<span class="nx">casper</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">titleNode</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'h1'</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'Title is: '</span> <span class="o">+</span> <span class="nx">titleNode</span><span class="p">.</span><span class="nx">textContent</span><span class="p">);</span>
    <span class="nx">titleNode</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">'New title'</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'Title is now: '</span> <span class="o">+</span> <span class="nx">titleNode</span><span class="p">.</span><span class="nx">textContent</span><span class="p">);</span>
<span class="p">});</span>
</pre>
         </div> 
        </div> 
        <p>You have to use the <a class="reference internal" href="modules/casper.html#casper-evaluate"><span class="std std-ref">Casper#evaluate()</span></a> method in order to communicate with the page DOM:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="c1">// this will</span>
<span class="nx">casper</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">titleText</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'h1'</span><span class="p">).</span><span class="nx">textContent</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'Title is: '</span> <span class="o">+</span> <span class="nx">titleText</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'h1'</span><span class="p">).</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">'New title'</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'Title is now: '</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'h1'</span><span class="p">).</span><span class="nx">textContent</span><span class="p">;</span>
    <span class="p">}));</span>
<span class="p">});</span>
</pre>
         </div> 
        </div> 
        <p>Of course, it’s a whole lot more verbose, but Casper provides convenient methods to ease accessing elements properties, eg. <a class="reference internal" href="modules/casper.html#casper-fetchtext"><span class="std std-ref">Casper#fetchText()</span></a> and <a class="reference internal" href="modules/casper.html#casper-getelementinfo"><span class="std std-ref">Casper#getElementInfo()</span></a>:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="c1">// this will</span>
<span class="nx">casper</span><span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'Title is: '</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">fetchText</span><span class="p">(</span><span class="s1">'h1'</span><span class="p">));</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">evaluate</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">'h1'</span><span class="p">).</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">'New title'</span><span class="p">;</span>
    <span class="p">});</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="s1">'Element HTML is now: '</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">getElementInfo</span><span class="p">(</span><span class="s1">'h1'</span><span class="p">).</span><span class="nx">html</span><span class="p">);</span>
<span class="p">});</span>
</pre>
         </div> 
        </div> 
       </div> 
       <div class="section" id="why-can-t-i-create-a-new-casper-instance-in-a-test-environment"> 
        <span id="faq-test-casper-instance"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">Why can’t I create a new <cite>casper</cite> instance in a test environment?</a><a class="headerlink" href="#why-can-t-i-create-a-new-casper-instance-in-a-test-environment" title="Permalink to this headline">¶</a></h2> 
        <p>The <cite>casperjs test</cite> <a class="reference internal" href="testing.html#test-subcomand"><span class="std std-ref">subcommand</span></a> is a convenient utility which bootstraps and configures a <a class="reference internal" href="testing.html#testing"><span class="std std-ref">test environment</span></a> for you, so a preconfigured <cite>casper</cite> object is already available in your test script when using this command.</p> 
        <p>As of 1.1-beta3, you’re prevented from overriding this preconfigured instance as this practice prevents the test runner from working properly. If you try to create a new casper instance in a test script, you’ll get an error and CasperJS will exit with an error message with a link pointing to the documentation.</p> 
        <p>One may argue this is mostly related to some historical bad design decisions, and this might be true. This behavior is not likely to exist anymore in a future 2.0.</p> 
       </div> 
       <div class="section" id="okay-honestly-i-m-stuck-with-javascript"> 
        <span id="faq-javascript"></span>
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">Okay, honestly, I’m stuck with Javascript.</a><a class="headerlink" href="#okay-honestly-i-m-stuck-with-javascript" title="Permalink to this headline">¶</a></h2> 
        <p>Don’t worry, you’re not alone. Javascript is a great language, but it’s far more difficult to master than one might expect at first look.</p> 
        <p>Here are some great resources to get started efficiently with the language:</p> 
        <ul class="simple"> 
         <li>Learn and practice Javascript online at <a class="reference external" href="http://www.codecademy.com/tracks/javascript">Code Academy</a></li> 
         <li><a class="reference external" href="http://eloquentjavascript.net/contents.html">Eloquent Javascript</a></li> 
         <li><a class="reference external" href="http://www.javascriptenlightenment.com/JavaScript_Enlightenment.pdf">JavaScript Enlightenment</a> (PDF)</li> 
         <li>last, a <a class="reference external" href="http://ejohn.org/apps/learn/">great tutorial on Advanced Javascript Techniques</a> by John Resig, the author of jQuery. If you master this one, you’re almost done with the language.</li> 
        </ul> 
       </div> 
       <div class="section" id="how-do-i-use-phantomjs-page-module-api-in-casperjs"> 
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">How do I use PhantomJS page module API in casperjs?</a><a class="headerlink" href="#how-do-i-use-phantomjs-page-module-api-in-casperjs" title="Permalink to this headline">¶</a></h2> 
        <p>After casperjs.start(), you have phantomjs page module available in casper.page (<a class="reference external" href="http://docs.casperjs.org/en/latest/modules/casper.html#page">http://docs.casperjs.org/en/latest/modules/casper.html#page</a>)</p> 
        <p>You can simply do like below:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="nx">casper</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">nameOfMethod</span><span class="p">()</span>
</pre>
         </div> 
        </div> 
        <p>PhantomJS Web Page API: <a class="reference external" href="http://phantomjs.org/api/webpage/">http://phantomjs.org/api/webpage/</a></p> 
       </div> 
       <div class="section" id="how-do-i-provide-my-implementation-of-a-remote-resource"> 
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">How do I provide my implementation of a remote resource?</a><a class="headerlink" href="#how-do-i-provide-my-implementation-of-a-remote-resource" title="Permalink to this headline">¶</a></h2> 
        <p>Using phantomjs native <cite>onResourceRequested</cite> event, you can override remote resource url to your own implementation. Your own implementation file can be provided from local path too:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="nx">casper</span><span class="p">.</span><span class="nx">page</span><span class="p">.</span><span class="nx">onResourceRequested</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">requestData</span><span class="p">,</span> <span class="nx">networkRequest</span><span class="p">)</span> <span class="p">{</span>
   <span class="kd">var</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">requestData</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/wordfamily.js/g</span><span class="p">);</span>
   <span class="k">if</span> <span class="p">(</span><span class="nx">match</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Request (#'</span> <span class="o">+</span> <span class="nx">requestData</span><span class="p">.</span><span class="nx">id</span> <span class="o">+</span> <span class="s1">'): '</span> <span class="o">+</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">requestData</span><span class="p">));</span>

      <span class="c1">// overrides wordfamily.js to local newWordFamily.js</span>
      <span class="nx">networkRequest</span><span class="p">.</span><span class="nx">changeUrl</span><span class="p">(</span><span class="s1">'newWordFamily.js'</span><span class="p">);</span>
   <span class="p">}</span>
<span class="p">};</span>
</pre>
         </div> 
        </div> 
       </div> 
       <div class="section" id="i-m-getting-intermittent-test-failure-what-can-i-do-to-fix-them"> 
        <h2><a class="toc-backref" href="#here-s-a-selection-of-the-most-frequently-asked-questions-by-casperjs-newcomers">I’m getting intermittent test failure, what can I do to fix them?</a><a class="headerlink" href="#i-m-getting-intermittent-test-failure-what-can-i-do-to-fix-them" title="Permalink to this headline">¶</a></h2> 
        <p>This is probably because you are executing a test before the resource or element is available and the page is fully loaded/rendered. This can even happen on things like modals and dynamic content.</p> 
        <p>You can solve this problem by using the <cite>wait*</cite> operations:</p> 
        <div class="highlight-javascript">
         <div class="highlight">
          <pre><span></span><span class="nx">casper</span><span class="p">.</span><span class="nx">thenOpen</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="kd">function</span> <span class="nx">initialAppearance</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">casper</span><span class="p">.</span><span class="nx">waitForText</span><span class="p">(</span><span class="s1">'Text in deep part of page or modal'</span><span class="p">);</span>
<span class="p">});</span>
</pre>
         </div> 
        </div> 
        <p>It is good practice to wait for DOM nodes, text, or resources before beginning your tests. It will help make them stable and predictable while still running fast.</p> 
       </div> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="sphinxsidebar" role="navigation" aria-label="main navigation"> 
    <div class="sphinxsidebarwrapper"> 
     <h3><a href="index.html">Table Of Contents</a></h3> 
     <ul class="current"> 
      <li class="toctree-l1"><a class="reference internal" href="installation.html">Installation</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="quickstart.html">Quickstart</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="cli.html">Using the command line</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="selectors.html">Selectors</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="testing.html">Testing</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="modules/index.html">API Documentation</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="writing_modules.html">Writing CasperJS modules</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="events-filters.html">Events &amp; Filters</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="logging.html">Logging</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="extending.html">Extending</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="debugging.html">Debugging</a></li> 
      <li class="toctree-l1 current"><a class="current reference internal" href="#">FAQ</a>
       <ul> 
        <li class="toctree-l2"><a class="reference internal" href="#is-casperjs-a-node-js-library">Is CasperJS a node.js library?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#i-m-stuck-i-think-there-s-a-bug-what-can-i-do">I’m stuck! I think there’s a bug! What can I do?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#the-casper-test-property-is-undefined-i-can-t-write-any-test">The <code class="docutils literal"><span class="pre">casper.test</span></code> property is undefined, I can’t write any test!</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#i-keep-copy-and-pasting-stuff-in-my-test-scripts-that-s-boring">I keep copy and pasting stuff in my test scripts, that’s boring</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#what-is-the-versioning-policy-of-casperjs">What is the versioning policy of CasperJS?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#can-i-use-jquery-with-casperjs">Can I use jQuery with CasperJS?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#can-i-use-casperjs-without-using-the-casperjs-executable">Can I use CasperJS without using the <code class="docutils literal"><span class="pre">casperjs</span></code> executable?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#how-can-i-catch-http-404-and-other-status-codes">How can I catch HTTP 404 and other status codes?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#where-does-casperjs-write-its-logfile">Where does CasperJS write its logfile?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#what-s-this-mysterious-utils-object">What’s this mysterious <code class="docutils literal"><span class="pre">__utils__</span></code> object?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#how-does-then-and-the-step-stack-work">How does <code class="docutils literal"><span class="pre">then()</span></code> and the step stack work?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#i-m-having-hard-times-downloading-files-using-download">I’m having hard times downloading files using <code class="docutils literal"><span class="pre">download()</span></code></a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#is-it-possible-to-achieve-parallel-browsing-using-casperjs">Is it possible to achieve parallel browsing using CasperJS?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#can-i-access-manipulate-dom-elements-directly-from-the-casperjs-environment">Can I access &amp; manipulate DOM elements directly from the CasperJS environment?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#why-can-t-i-create-a-new-casper-instance-in-a-test-environment">Why can’t I create a new <cite>casper</cite> instance in a test environment?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#okay-honestly-i-m-stuck-with-javascript">Okay, honestly, I’m stuck with Javascript.</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#how-do-i-use-phantomjs-page-module-api-in-casperjs">How do I use PhantomJS page module API in casperjs?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#how-do-i-provide-my-implementation-of-a-remote-resource">How do I provide my implementation of a remote resource?</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="#i-m-getting-intermittent-test-failure-what-can-i-do-to-fix-them">I’m getting intermittent test failure, what can I do to fix them?</a></li> 
       </ul> </li> 
      <li class="toctree-l1"><a class="reference internal" href="cookbook.html">Cookbook</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="changelog.html">Changelog</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="upgrading/index.html">Upgrading</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="known_issues.html">Known Issues</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="credits.html">Credits</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="license.html">License</a></li> 
     </ul> 
     <h4>Previous topic</h4> 
     <p class="topless"><a href="debugging.html" title="previous chapter">Debugging</a></p> 
     <h4>Next topic</h4> 
     <p class="topless"><a href="cookbook.html" title="next chapter">Cookbook</a></p>
     <h3>Index</h3> 
     <p><a href="genindex.html">Thesaurus</a></p> 
     <h3>This Page</h3> 
     <ul class="this-page-menu"> 
      <li><a href="_sources/faq.rst.txt" rel="nofollow">Show Source</a></li> 
      <li><a href="https://github.com/casperjs/casperjs/blob/master/docs/faq.rst"> Show on GitHub</a></li> 
      <li><a href="https://github.com/casperjs/casperjs/edit/master/docs/faq.rst"> Edit on GitHub</a></li> 
     </ul> 
     <div id="searchbox" style="display: none" role="search"> 
      <h3>Quick search</h3> 
      <form class="search" action="search.html" method="get"> 
       <div>
        <input type="text" name="q">
       </div> 
       <div>
        <input type="submit" value="Go">
       </div> 
       <input type="hidden" name="check_keywords" value="yes"> 
       <input type="hidden" name="area" value="default"> 
      </form> 
     </div> 
     <script type="text/javascript">$('#searchbox').show(0);</script>
     <h3>Donate</h3> 
     <div class="donate"> 
      <div class="paypal"> 
       <form action="https://www.paypal.com/cgi-bin/webscr" method="post"> 
        <input type="hidden" name="cmd" value="_s-xclick"> 
        <input type="hidden" name="encrypted" value="-----BEGIN PKCS7-----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-----END PKCS7-----"> 
        <input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif" border="0" name="submit" alt="Donate" title="Donate"> 
        <img alt="" border="0" src="https://www.paypalobjects.com/fr_FR/i/scr/pixel.gif" width="1" height="1"> 
       </form> 
       <small>(ghosts have bills, you know)</small> 
      </div> 
      <div class="flattr"> 
       <a href="http://flattr.com/thing/586241/CasperJS-a-navigation-scripting-and-testing-utility-for-PhantomJS" class="flattr" target="_blank"><img src="http://api.flattr.com/button/flattr-badge-large.png" alt="Flattr this" title="Flattr this" border="0"></a> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div class="clearer"></div> 
  </div> 
  <div class="related" role="navigation" aria-label="related navigation"> 
   <h3>Navigation</h3> 
   <ul> 
    <li class="right" style="margin-right: 10px"> <a href="genindex.html" title="General Index">index</a></li> 
    <li class="right"> <a href="cookbook.html" title="Cookbook">next</a> |</li> 
    <li class="right"> <a href="debugging.html" title="Debugging">previous</a> |</li> 
    <li class="nav-item nav-item-0"><a href="index.html">CasperJS 1.1.0-DEV documentation</a> »</li> 
   </ul> 
  </div> 
  <div class="footer" role="contentinfo">
    © Copyright 2011-2017 Nicolas Perriault and contributors. CasperJS logo by Jeremy Forveille. Created using 
   <a href="http://sphinx-doc.org/">Sphinx</a> 1.5.3. 
  </div>  
 </body>
</html>