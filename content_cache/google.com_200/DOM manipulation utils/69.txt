<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta property="og:url" content="https://yarnpkg.com/blog/2017/07/11/lets-dev-a-package-manager/"> 
  <meta property="og:site_name" content="Yarn"> 
  <meta property="og:title" content="Let's Dev: A Package Manager"> 
  <meta property="og:image" content="https://yarnpkg.com/assets/og_image.png"> 
  <meta property="og:description" content="Hello everyone! Today, we’re gonna write a new package manager, even better than Yarn! Ok, maybe not, but at least we’re gonna have some fun, learn how packa..."> 
  <title>Let's Dev: A Package Manager | Yarn Blog</title> 
  <meta name="description" content="Hello everyone! Today, we’re gonna write a new package manager, even better than Yarn! Ok, maybe not, but at least we’re gonna have some fun, learn how packa..."> 
  <link rel="canonical" href="https://yarnpkg.com/blog/2017/07/11/lets-dev-a-package-manager/"> 
  <link rel="alternate" type="application/rss+xml" title="Yarn" href="https://yarnpkg.com/feed.xml"> 
  <link rel="icon" href="/favicon.ico" type="image/x-icon"> 
  <link rel="search" href="/opensearch.xml" type="application/opensearchdescription+xml" title="Yarn"> 
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/fontawesome/4.7.0/css/font-awesome.min.css"> 
  <link rel="stylesheet" href="/css/main.css?t=2017-10-06T07:36:22+00:00"> 
  <script src="https://cdn.polyfill.io/v2/polyfill.min.js?unknown=polyfill"></script> 
 </head> 
 <body> 
  <nav class="navbar navbar-static-top navbar-light"> 
   <div class="container"> 
    <a href="/"> 
     <svg class="logo navbar-logo" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 1154.8 518"> 
      <defs> 
       <path id="main" d="
      M718.6 257.8c-8 27.6-20.8 47.6-35.2 63.6V181c0-9.6-8.4-17.6-21.6-17.6-5.6 0-10.4 2.8-10.4 6.8 0 2.8 1.6 5.2 1.6 12.8v64.4c-4.8 28-16.8 54-32.8 54-11.6 0-18.4-11.6-18.4-33.2 0-33.6 4.4-51.2 11.6-80.8 1.6-6 13.2-22-6.4-22-21.2 0-18.4 8-21.2 14.8 0 0-13.4 47.6-13.4 90 0 34.8 14.6 57.6 41.4 57.6 17.2 0 29.6-11.6 39.2-27.6V351c-26.4 23.2-49.6 43.6-49.6 84 0 25.6 16 46 38.4 46 20.4 0 41.6-14.8 41.6-56.8V355c21.6-18.8 44.8-42.4 58.4-88.8.4-1.6.4-3.6.4-4 0-7.6-7.6-16.4-14-16.4-4 0-7.2 3.6-9.6 12zm-76.8 198c-6.4 0-10.4-9.6-10.4-22 0-24 8.8-39.2 21.6-52.4v42.8c0 7.6 1.6 31.6-11.2 31.6z
      M833.4 301c-9.6 0-13.6-9.6-13.6-18.4v-66c0-9.6-8.4-17.6-21.6-17.6-5.6 0-10.4 2.8-10.4 6.8 0 2.8 1.6 5.2 1.6 12.8v61.6C785 291.4 777.8 301 767 301c-14 0-22.8-12-22.8-32.8 0-57.6 35.6-83.6 66-83.6 4 0 8 .8 11.6.8 4 0 5.2-2.4 5.2-9.2 0-10.4-7.6-16.8-18.4-16.8-48.8 0-95.2 40.8-95.2 107.6 0 34 16.4 60.4 47.6 60.4 15.2 0 26.4-7.2 34.4-16.4 6 9.6 16.8 16.4 30.8 16.4 34.4 0 50.4-36 57.2-62.4.4-1.6.4-2.4.4-2.8 0-7.6-7.6-16.4-14-16.4-4 0-8 3.6-9.6 12-3.6 17.6-10.8 43.2-26.8 43.2z
      M949 327.4c34.4 0 50-36 57.2-62.4 0-.8.4-1.6.4-2.8 0-7.6-7.6-16.4-14-16.4-4 0-8 3.6-9.6 12-3.6 17.6-10.4 43.2-28.8 43.2-10.8 0-16-10.4-16-21.6 0-40 18-87.2 18-92 1.6-9.2-14.4-22.4-19.2-22.4h-20.8c-4 0-8 0-21.2-1.6-4.4-16.4-15.6-21.2-25.2-21.2-10.4 0-20 7.2-20 18.4 0 11.6 7.2 20 17.2 25.6-.4 20.4-2 53.6-6.4 69.6-3.6 13.6 17.2 28 22.4 11.2 7.2-23.2 9.6-58 10-73.6h34.8c-12.8 34.4-20 62.8-20 88.4 0 35.2 22.4 45.6 41.2 45.6z
      M984.6 309.8c0 14.8 11.2 17.6 19.2 17.6 11.6 0 11.2-9.6 11.2-17.2v-58.4c2.8-31.6 27.6-66 39.2-66 7.6 0 8.4 10.4 8.4 22.8v81.2c0 20.4 12.4 37.6 33.6 37.6 34.4 0 51.4-36 58.2-62.4.4-1.6.4-2.4.4-2.8 0-7.6-7.6-16.4-14-16.4-4 0-8 3.6-9.6 12-3.6 17.6-11.8 43.2-27.8 43.2-10.4 0-10.4-14.8-10.4-18.4v-82.8c0-18.4-6.4-40.4-33.2-40.4-19.6 0-34 17.2-44.8 39.6v-18c0-9.6-8.4-17.6-21.6-17.6-5.6 0-10.4 2.8-10.4 6.8 0 2.8 1.6 5.2 1.6 12.8v126.8z
      M259 0c143 0 259 116 259 259S402 518 259 518 0 402 0 259 116 0 259 0z" /> 
      </defs> 
      <use class="logo-primary" xlink:href="#main" x="0" y="0" /> 
      <path class="logo-secondary" d="M435.2 337.5c-1.8-14.2-13.8-24-29.2-23.8-23 .3-42.3 12.2-55.1 20.1-5 3.1-9.3 5.4-13 7.1.8-11.6.1-26.8-5.9-43.5-7.3-20-17.1-32.3-24.1-39.4 8.1-11.8 19.2-29 24.4-55.6 4.5-22.7 3.1-58-7.2-77.8-2.1-4-5.6-6.9-10-8.1-1.8-.5-5.2-1.5-11.9.4C293.1 96 289.6 93.8 286.9 92c-5.6-3.6-12.2-4.4-18.4-2.1-8.3 3-15.4 11-22.1 25.2-1 2.1-1.9 4.1-2.7 6.1-12.7.9-32.7 5.5-49.6 23.8-2.1 2.3-6.2 4-10.5 5.6h.1c-8.8 3.1-12.8 10.3-17.7 23.3-6.8 18.2.2 36.1 7.1 47.7-9.4 8.4-21.9 21.8-28.5 37.5-8.2 19.4-9.1 38.4-8.8 48.7-7 7.4-17.8 21.3-19 36.9-1.6 21.8 6.3 36.6 9.8 42 1 1.6 2.1 2.9 3.3 4.2-.4 2.7-.5 5.6.1 8.6 1.3 7 5.7 12.7 12.4 16.3 13.2 7 31.6 10 45.8 2.9 5.1 5.4 14.4 10.6 31.3 10.6h1c4.3 0 58.9-2.9 74.8-6.8 7.1-1.7 12-4.7 15.2-7.4 10.2-3.2 38.4-12.8 65-30 18.8-12.2 25.3-14.8 39.3-18.2 13.6-3.3 22.1-15.7 20.4-29.4zm-23.8 14.7c-16 3.8-24.1 7.3-43.9 20.2-30.9 20-64.7 29.3-64.7 29.3s-2.8 4.2-10.9 6.1c-14 3.4-66.7 6.3-71.5 6.4-12.9.1-20.8-3.3-23-8.6-6.7-16 9.6-23 9.6-23s-3.6-2.2-5.7-4.2c-1.9-1.9-3.9-5.7-4.5-4.3-2.5 6.1-3.8 21-10.5 27.7-9.2 9.3-26.6 6.2-36.9.8-11.3-6 .8-20.1.8-20.1s-6.1 3.6-11-3.8c-4.4-6.8-8.5-18.4-7.4-32.7 1.2-16.3 19.4-32.1 19.4-32.1s-3.2-24.1 7.3-48.8c9.5-22.5 35.1-40.6 35.1-40.6s-21.5-23.8-13.5-45.2c5.2-14 7.3-13.9 9-14.5 6-2.3 11.8-4.8 16.1-9.5 21.5-23.2 48.9-18.8 48.9-18.8s13-39.5 25-31.8c3.7 2.4 17 32 17 32s14.2-8.3 15.8-5.2c8.6 16.7 9.6 48.6 5.8 68-6.4 32-22.4 49.2-28.8 60-1.5 2.5 17.2 10.4 29 43.1 10.9 29.9 1.2 55 2.9 57.8.3.5.4.7.4.7s12.5 1 37.6-14.5c13.4-8.3 29.3-17.6 47.4-17.8 17.5-.3 18.4 20.2 5.2 23.4z" /> 
     </svg> <span class="sr-only">Yarn</span> </a> 
    <div class="clearfix hidden-lg-up"> 
     <button class="navbar-toggler hidden-lg-up float-right" type="button" data-toggle="collapse" data-target="#navbar" aria-controls="exCollapsingNavbar2" aria-expanded="false" aria-label="Toggle navigation"></button> 
    </div> 
    <div class="collapse navbar-toggleable-md" id="navbar"> 
     <ul class="nav navbar-nav"> 
      <li class="nav-item"> <a class="nav-link" href="/docs/getting-started">Getting Started</a> </li> 
      <li class="nav-item"> <a class="nav-link" href="/docs">Docs</a> </li> 
      <li class="nav-item"> <a class="nav-link" href="/packages">Packages</a> </li> 
      <li class="nav-item"> <a class="nav-link" href="/blog">Blog</a> </li> 
     </ul> 
     <ul class="nav navbar-nav float-lg-right"> 
      <li class="nav-item"> <a class="nav-link" href="https://discord.gg/yarnpkg"> 
        <svg class="discord navbar-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 175 200" role="img" aria-labelledby="discord-svg"> 
         <title id="discord-svg">Discord</title> 
         <path d="M69.4 83.9c-5.7 0-10.2 5-10.2 11.1s4.6 11.1 10.2 11.1c5.7 0 10.2-5 10.2-11.1.1-6.1-4.5-11.1-10.2-11.1zm36.5 0c-5.7 0-10.2 5-10.2 11.1s4.6 11.1 10.2 11.1c5.7 0 10.2-5 10.2-11.1s-4.5-11.1-10.2-11.1z" />
         <path d="M154.5 0h-134C9.2 0 0 9.2 0 20.6v135.2c0 11.4 9.2 20.6 20.5 20.6h113.4l-5.3-18.5 12.8 11.9 12.1 11.2 21.5 19V20.6C175 9.2 165.8 0 154.5 0zm-38.6 130.6s-3.6-4.3-6.6-8.1c13.1-3.7 18.1-11.9 18.1-11.9-4.1 2.7-8 4.6-11.5 5.9-5 2.1-9.8 3.5-14.5 4.3-9.6 1.8-18.4 1.3-25.9-.1-5.7-1.1-10.6-2.7-14.7-4.3-2.3-.9-4.8-2-7.3-3.4-.3-.2-.6-.3-.9-.5-.2-.1-.3-.2-.4-.3-1.8-1-2.8-1.7-2.8-1.7s4.8 8 17.5 11.8c-3 3.8-6.7 8.3-6.7 8.3-22.1-.7-30.5-15.2-30.5-15.2 0-32.2 14.4-58.3 14.4-58.3 14.4-10.8 28.1-10.5 28.1-10.5l1 1.2c-18 5.2-26.3 13.1-26.3 13.1s2.2-1.2 5.9-2.9c10.7-4.7 19.2-6 22.7-6.3.6-.1 1.1-.2 1.7-.2 6.1-.8 13-1 20.2-.2 9.5 1.1 19.7 3.9 30.1 9.6 0 0-7.9-7.5-24.9-12.7l1.4-1.6s13.7-.3 28.1 10.5c0 0 14.4 26.1 14.4 58.3 0 0-8.5 14.5-30.6 15.2z" /> 
        </svg> <span class="sr-only">Discord</span> </a> </li> 
      <li class="nav-item"> <a class="nav-link" href="https://twitter.com/yarnpkg"> 
        <svg class="twitter navbar-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 250 203.1" role="img" aria-labelledby="twitter-svg"> 
         <title id="twitter-svg">Twitter</title> 
         <path d="M78.6 203.1c94.3 0 145.9-78.2 145.9-145.9 0-2.2 0-4.4-.1-6.6 10-7.3 18.7-16.3 25.6-26.5-9.4 4.1-19.3 6.9-29.5 8.1 10.7-6.4 18.7-16.5 22.5-28.4-10.1 6-21.1 10.2-32.6 12.4C191-4.5 158.5-5.5 137.8 14c-13.3 12.5-19 31.2-14.8 49C81.9 60.9 43.4 41.4 17.4 9.4 3.8 32.8 10.7 62.8 33.3 77.8c-8.2-.2-16.1-2.4-23.3-6.4v.6c0 24.4 17.2 45.4 41.2 50.3-7.6 2.1-15.5 2.4-23.2.9 6.7 20.9 26 35.2 47.9 35.6-18.2 14.3-40.6 22-63.7 22-4.1 0-8.2-.3-12.2-.7 23.5 15.1 50.7 23 78.6 23" /> 
        </svg> <span class="sr-only">Twitter</span> </a> </li> 
      <li class="nav-item"> <a class="nav-link" href="https://www.facebook.com/yarnpkg"> 
        <svg class="facebook navbar-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 266.9 266.9" role="img" aria-labelledby="facebook-svg"> 
         <title id="facebook-svg">Facebook</title> 
         <path d="M252.2 0H14.7C6.6 0 0 6.6 0 14.7v237.4c0 8.1 6.6 14.7 14.7 14.7h127.8V163.5h-34.8v-40.3h34.8V93.6c0-34.5 21.1-53.2 51.8-53.2 14.7 0 27.4 1.1 31.1 1.6v36h-21.3c-16.7 0-20 7.9-20 19.6v25.7H224l-5.2 40.3h-34.7V267h68c8.1 0 14.7-6.6 14.7-14.7V14.7c.1-8.1-6.5-14.7-14.6-14.7z" /> 
        </svg> <span class="sr-only">Facebook</span> </a> </li> 
      <li class="nav-item"> <a class="nav-link" href="https://github.com/yarnpkg"> 
        <svg class="github navbar-icon" xmlns="http://www.w3.org/2000/svg" viewbox="0 0 32.6 31.8" role="img" aria-labelledby="github-svg"> 
         <title id="github-svg">Github</title> 
         <path d="M16.3 0C7.3 0 0 7.3 0 16.3c0 7.2 4.7 13.3 11.1 15.5.8.1 1.1-.4 1.1-.8v-2.8c-4.5 1-5.5-2.2-5.5-2.2-.7-1.9-1.8-2.4-1.8-2.4-1.5-1 .1-1 .1-1 1.6.1 2.5 1.7 2.5 1.7 1.5 2.5 3.8 1.8 4.7 1.4.1-1.1.6-1.8 1-2.2-3.6-.4-7.4-1.8-7.4-8.1 0-1.8.6-3.2 1.7-4.4-.1-.3-.7-2 .2-4.2 0 0 1.4-.4 4.5 1.7 1.3-.4 2.7-.5 4.1-.5 1.4 0 2.8.2 4.1.5 3.1-2.1 4.5-1.7 4.5-1.7.9 2.2.3 3.9.2 4.3 1 1.1 1.7 2.6 1.7 4.4 0 6.3-3.8 7.6-7.4 8 .6.5 1.1 1.5 1.1 3V31c0 .4.3.9 1.1.8 6.5-2.2 11.1-8.3 11.1-15.5C32.6 7.3 25.3 0 16.3 0z" /> 
        </svg> <span class="sr-only">GitHub</span> </a> </li> 
     </ul> 
    </div> 
   </div> 
  </nav> 
  <div id="search"> 
   <!-- Here to avoid flash of unstyled content on page load --> 
   <div class="ais-InstantSearch__root"> 
    <form novalidate class="ais-SearchBox__root"> 
     <div role="search" class="ais-SearchBox__wrapper"></div> 
    </form> 
   </div> 
  </div> 
  <main>
   <div class="hero"> 
    <div class="container"> 
     <h1 class="hero-text display-4 text-md-center">Let's Dev: A Package Manager</h1> 
    </div> 
   </div> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-md-8 offset-md-2 blog-content"> 
      <p class="text-muted text-md-center"> Posted Jul 11, 2017 by <a href="https://twitter.com/arcanis">Maël Nison</a> </p> 
      <p>Hello everyone! Today, we’re gonna write a new package manager, even better than Yarn! Ok, maybe not, but at least we’re gonna have some fun, learn how package managers work, and think about what could come next on Yarn.</p> 
      <blockquote> 
       <p><strong>The devil is in the details</strong></p> 
       <p>This article omits small details and environment quirks, and focuses on the high-level architecture of a package manager, in an effort to stay succinct. For example, we’re gonna assume that all paths are regular POSIX paths.</p> 
       <p>That being said, there’s much to say about these compatibility layers, and maybe talking about them could be an interesting follow up! Feel free to tweet at <a href="https://twitter.com/yarnpkg">@yarnpkg</a> if you’re interested to know more about them! ?</p> 
      </blockquote> 
      <p>To fully understand how things work, we’re gonna go step by step, incrementally, adding or extending a single function at a time. We’ll treat each of those steps as a separate chapter, and you will find an index of all chapters below this paragraph. Don’t worry - they’re all relatively short! Note that ES2017 features will be used all through the article - if you’re unfamiliar with them, we recommend you to take a look at the great books <a href="http://exploringjs.com/es6/">Explore ES6</a> and/or <a href="https://leanpub.com/understandinges6/read">Understanding ECMAScript 6</a>, and <a href="http://exploringjs.com/es2016-es2017/">Explore ES2017</a>. Good lecture!</p> 
      <hr> 
      <ul> 
       <li> <p><strong><a href="#chapter-1---bravely-download">#</a> Chapter 1 - Bravely Download</strong></p> <p><em>Or: where we download package tarballs</em></p> </li> 
       <li> <p><strong><a href="#chapter-2---one-reference-to-rule-them-all">#</a> Chapter 2 - One Reference to Rule Them All</strong></p> <p><em>Or: where we resolve package ranges</em></p> </li> 
       <li> <p><strong><a href="#chapter-3---dependencies-of-our-dependencies-are-our-dependencies">#</a> Chapter 3 - Dependencies of Our Dependencies Are Our Dependencies</strong></p> <p><em>Or: where we extract dependencies from packages</em></p> </li> 
       <li> <p><strong><a href="#chapter-4---super-dependency-world">#</a> Chapter 4 - Super Dependency World</strong></p> <p><em>Or: where we do the same thing, but recursively</em></p> </li> 
       <li> <p><strong><a href="#chapter-5---links-awakening">#</a> Chapter 5 - Links Awakening</strong></p> <p><em>Or: where we install our dependencies on the filesystem</em></p> </li> 
       <li> <p><strong><a href="#chapter-6---lord-of-the-optimization">#</a> Chapter 6 - Lord of the Optimization</strong></p> <p><em>Or: where we try not to install the whole world on our system</em></p> </li> 
       <li> <p><strong><a href="#conclusion---there-really-was-a-cakehttpsgithubcomyarnpkglets-dev-demo">#</a> Conclusion - There Really Was a <a href="https://github.com/yarnpkg/lets-dev-demo">Cake</a></strong></p> <p><em>Or: where we reflect on what we’ve learned</em></p> </li> 
      </ul> 
      <hr> 
      <h2 id="chapter-1---bravely-download">Chapter 1 - Bravely Download</h2> 
      <p>So, where should we start? First we have to think about what a package manager is. Let’s forget the caches, the mirrors, the lockfiles, and all of the fancy command-line stuff, and let’s focus on the very core: a package manager is a download manager. You ask it to download a package, and it happily executes. That’s how we’ll begin our adventure: with a very basic function that simply downloads something from the internet.</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="kr">import</span> <span class="nx">fetch</span> <span class="nx">from</span> <span class="s1">'node-fetch'</span><span class="p">;</span>

<span class="nx">async</span> <span class="kd">function</span> <span class="nx">fetchPackage</span><span class="p">(</span><span class="nx">reference</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">let</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">reference</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">response</span><span class="p">.</span><span class="nx">ok</span><span class="p">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="err">`</span><span class="nx">Couldn</span><span class="err">'</span><span class="nx">t</span> <span class="nx">fetch</span> <span class="kr">package</span> <span class="s2">"${reference}"</span><span class="err">`</span><span class="p">);</span>

    <span class="k">return</span> <span class="nx">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">buffer</span><span class="p">();</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <p>Nice job! We just have to give this function a URL, and we’ll eventually get the referenced package back! Of course, it only works if you know the exact URL for your package, but it’s a good start. Rome wasn’t built in one day, and our package manager won’t be built with a single function either.</p> 
      <p>Ok, what’s next? Let’s take a break and look at a classic package.json file to see what we could implement.</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="p">{</span>
    <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"react"</span><span class="err">:</span> <span class="s2">"^15.5.4"</span><span class="p">,</span>
        <span class="s2">"babel-core"</span><span class="err">:</span> <span class="s2">"6.25.0"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre> 
      </div> 
      <p>Oh, right, version ranges! It would be nice if we were able to just pass a version number to our fetcher, and let it convert it to an URL, right? Then let’s do this! To make it easier, we’ll only add support for pinned references (ie. <code class="highlighter-rouge">1.0.0</code> will be supported, but not <code class="highlighter-rouge">^1.0.0</code>). Finding the right regexp could be tedious, but thankfully we can rely on the excellent <a href="https://github.com/npm/node-semver">semver</a> module, which will handle the bulk of the work for us! That being said, we’ll still need to make a small change to the signature of our <code class="highlighter-rouge">fetchPackage</code> function. Instead of using a string to describe a package, we’ll now use a <code class="highlighter-rouge"><span class="p">{</span><span class="err">name,</span><span class="w"> </span><span class="err">reference</span><span class="p">}</span></code> object, where the name is the package name and the reference is the identifier that allows us to unequivocally locate this package. Thanks to this change, we can now write:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="kr">import</span> <span class="nx">semver</span> <span class="nx">from</span> <span class="s1">'semver'</span><span class="p">;</span>

<span class="nx">async</span> <span class="kd">function</span> <span class="nx">fetchPackage</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">})</span> <span class="p">{</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">semver</span><span class="p">.</span><span class="nx">valid</span><span class="p">(</span><span class="nx">reference</span><span class="p">))</span>
        <span class="k">return</span> <span class="nx">await</span> <span class="nx">fetchPackage</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="err">`</span><span class="na">https</span><span class="p">:</span><span class="c1">//registry.yarnpkg.com/${name}/-/${name}-${reference}.tgz`});</span>

    <span class="c1">// ... same code as before</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <p>What do you think? If we detect that the reference is a semver version, then we convert it to an actual URL located on the Yarn registry. That’s a nice download manager we have here, right? Ok, let’s add a quick support for filesystem paths before we call it a day:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="kr">import</span> <span class="nx">fs</span> <span class="nx">from</span> <span class="s1">'fs-extra'</span><span class="p">;</span>

<span class="nx">async</span> <span class="kd">function</span> <span class="nx">fetchPackage</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">})</span> <span class="p">{</span>

    <span class="c1">// In a pure JS fashion, if it looks like a path, it must be a path.</span>
    <span class="k">if</span> <span class="p">([</span><span class="err">`</span><span class="o">/</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="p">.</span><span class="o">/</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="p">..</span><span class="o">/</span><span class="err">`</span><span class="p">].</span><span class="nx">some</span><span class="p">(</span><span class="nx">prefix</span> <span class="o">=&gt;</span> <span class="nx">reference</span><span class="p">.</span><span class="nx">startsWith</span><span class="p">(</span><span class="nx">prefix</span><span class="p">)))</span>
        <span class="k">return</span> <span class="nx">await</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">reference</span><span class="p">);</span>

    <span class="c1">// ... same code as before</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <p>What do you think? Pretty simple, right?</p> 
      <hr> 
      <h2 id="chapter-2---one-reference-to-rule-them-all">Chapter 2 - One Reference to Rule Them All</h2> 
      <p>Our <code class="highlighter-rouge">fetchPackage</code> function is great, but it has one shortcoming, and a big one: As we said, our function can currently only serve pinned references. Ranges such as <code class="highlighter-rouge">^1.0.0</code> cannot be served, because they can potentially refer to multiple different versions, each of them having their own tarballs. So, in order to serve them, we’ll need to find a way to extract a unique pinned reference from those ranges. Fortunately, it’s not that hard! See for yourself:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="kr">import</span> <span class="nx">semver</span> <span class="nx">from</span> <span class="s1">'semver'</span><span class="p">;</span>

<span class="nx">async</span> <span class="kd">function</span> <span class="nx">getPinnedReference</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">})</span> <span class="p">{</span>

    <span class="c1">// 1.0.0 is a valid range per semver syntax, but since it's also a pinned</span>
    <span class="c1">// reference, we don't actually need to process it. Less work, yeay!~</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">semver</span><span class="p">.</span><span class="nx">validRange</span><span class="p">(</span><span class="nx">reference</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">semver</span><span class="p">.</span><span class="nx">valid</span><span class="p">(</span><span class="nx">reference</span><span class="p">))</span> <span class="p">{</span>

        <span class="kd">let</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="err">`</span><span class="nx">https</span><span class="err">:</span><span class="c1">//registry.yarnpkg.com/${name}`);</span>
        <span class="kd">let</span> <span class="nx">info</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>

        <span class="kd">let</span> <span class="nx">versions</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">info</span><span class="p">.</span><span class="nx">versions</span><span class="p">);</span>
        <span class="kd">let</span> <span class="nx">maxSatisfying</span> <span class="o">=</span> <span class="nx">semver</span><span class="p">.</span><span class="nx">maxSatisfying</span><span class="p">(</span><span class="nx">versions</span><span class="p">,</span> <span class="nx">reference</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">maxSatisfying</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="err">`</span><span class="nx">Couldn</span><span class="err">'</span><span class="nx">t</span> <span class="nx">find</span> <span class="nx">a</span> <span class="nx">version</span> <span class="nx">matching</span> <span class="s2">"${reference}"</span> <span class="k">for</span> <span class="kr">package</span> <span class="s2">"${name}"</span><span class="err">`</span><span class="p">);</span>

        <span class="nx">reference</span> <span class="o">=</span> <span class="nx">maxSatisfying</span><span class="p">;</span>

    <span class="p">}</span>

    <span class="k">return</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">};</span>

<span class="p">}</span>

<span class="c1">// getPinnedReference({name: "react", reference: "~15.3.0"})</span>
<span class="c1">// ? {name: "react", reference: "15.3.2"}</span>

<span class="c1">// getPinnedReference({name: "react", reference: "15.3.0"})</span>
<span class="c1">// ? {name: "react", reference: "15.3.0"}</span>

<span class="c1">// getPinnedReference({name: "react", reference: "/tmp/react-15.3.2.tar.gz"})</span>
<span class="c1">// ? {name: "react", reference: "/tmp/react-15.3.2.tar.gz"}</span>
</code></pre> 
      </div> 
      <p>And … that’s it! If we see a semver range, we just have to query the NPM registry to retrieve the list of all available versions. Once we’ve obtained it, it’s just a matter of selecting the best one (which is made easy thanks to the <code class="highlighter-rouge">maxSatisfying</code> function provided by the semver module), and we’re all set.</p> 
      <p>Note that we don’t need to do anything particular with semver versions, direct URLs, nor filesystem paths, since they’ll always refer to a single package at any given time. So when we encounter them, we can just return them back without doing anything fancy.</p> 
      <p>Thanks to this function, we can now rest assured that the references we’ll send to our <code class="highlighter-rouge">fetchPackage</code> function will always be pinned references! Another day, another great victory for us.</p> 
      <hr> 
      <h2 id="chapter-3---dependencies-of-our-dependencies-are-our-dependencies">Chapter 3 - Dependencies of Our Dependencies Are Our Dependencies</h2> 
      <p>In Chapter 1 we saw how to make a magic function that would download any package from anywhere, and return it. In Chapter 2, we saw how to convert volatile dependencies into pinned dependencies. That’s a great start! But now we’ll need to resolve a bigger issue: dependencies. See, the Node ecosystem being what it is, most packages rely on other packages in order to work properly. Fortunately, they all agreed on using a single standard to list those dependencies (remember the <code class="highlighter-rouge">package.json</code> file we’ve seen above), and so we should be able to make good use of this. Let’s write our function. Given a package, we want it to return the dependencies this package relies on.</p> 
      <blockquote> 
       <p><strong>Can’t escape the tooling</strong></p> 
       <p>Even if this article tries to stay focused on the core principle of package managers, we will need some utility function from time to time. When you encounter a symbol imported from <code class="highlighter-rouge">./utilities</code>, just don’t bother understanding how it works under the hood. It’s usually some boring and verbose code. That being said, all sources are available in the repository linked at the end of this post, including the utilities, so if you’re really interested, give it a look later!</p> 
      </blockquote> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="c1">// This function reads a file stored within an archive</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">readPackageJsonFromArchive</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">'./utilities'</span><span class="p">;</span>

<span class="nx">async</span> <span class="kd">function</span> <span class="nx">getPackageDependencies</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">})</span> <span class="p">{</span>

    <span class="kd">let</span> <span class="nx">packageBuffer</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetchPackage</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">});</span>
    <span class="kd">let</span> <span class="nx">packageJson</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">await</span> <span class="nx">readPackageJsonFromArchive</span><span class="p">(</span><span class="nx">packageBuffer</span><span class="p">));</span>

    <span class="c1">// Some packages have no dependency field</span>
    <span class="kd">let</span> <span class="nx">dependencies</span> <span class="o">=</span> <span class="nx">packageJson</span><span class="p">.</span><span class="nx">dependencies</span> <span class="o">||</span> <span class="p">{};</span>

    <span class="c1">// It's much easier for us to just keep using the same {name, reference}</span>
    <span class="c1">// data structure across all of our code, so we convert it there.</span>
    <span class="k">return</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">dependencies</span><span class="p">).</span><span class="nx">map</span><span class="p">(</span><span class="nx">name</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="nx">dependencies</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="p">};</span>
    <span class="p">});</span>

<span class="p">}</span>

<span class="c1">// getPackageDependencies({name: "react", reference: "15.6.1"})</span>
<span class="c1">// ? [{name: "create-react-class", reference: "^15.6.0"},</span>
<span class="c1">// {name: "prop-types", reference: "^15.5.10"}]</span>
</code></pre> 
      </div> 
      <p>What do you think? We’ve even been able to use our very own <code class="highlighter-rouge">fetchPackage</code> implementation to get the archive from where we extract the package information! From now on, whatever package people send us, we’ll be able to know what other packages it depends on. That’s a good start, but we’ll now have to expand this ability a bit further: instead of resolving the first level of dependencies only, we’ll want to resolve <em>everything</em>. And that’s what the next chapter is about!</p> 
      <hr> 
      <h2 id="chapter-4---super-dependency-world">Chapter 4 - Super Dependency World</h2> 
      <p>Time we go full recursion. See, the idea is that before being able to install your packages into your <code class="highlighter-rouge">node_modules</code> folder, we’ll first have to “install” them in memory. Why, you say? Well, proceeding this way will allow us to manipulate the tree before actually persisting it on the filesystem. Whether it’s deduplication or hoisting, everything will have to be applied on this tree rather than on the actual disk (which would be really slow otherwise). But we’ll cover that in another chapter! Right now, let’s focus on extracting a complete dependency tree from a single root dependency. Since we’ve already written all the needed pieces (first the function to convert a volatile reference to a pinned reference, then the function to obtain a package dependencies), it will be quick. Let’s get down to it:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="nx">async</span> <span class="kd">function</span> <span class="nx">getPackageDependencyTree</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">})</span> <span class="p">{</span>

    <span class="k">return</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="nx">await</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">async</span> <span class="p">(</span><span class="nx">volatileDependency</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

        <span class="kd">let</span> <span class="nx">pinnedDependency</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">getPinnedReference</span><span class="p">(</span><span class="nx">volatileDependency</span><span class="p">);</span>
        <span class="kd">let</span> <span class="nx">subDependencies</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">getPackageDependencies</span><span class="p">(</span><span class="nx">pinnedDependency</span><span class="p">);</span>

        <span class="k">return</span> <span class="nx">await</span> <span class="nx">getPackageDependencyTree</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">pinnedDependency</span><span class="p">,</span> <span class="p">{</span><span class="na">dependencies</span><span class="p">:</span> <span class="nx">subDependencies</span><span class="p">}));</span>

    <span class="p">}))};</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <p>This one might look hard to digest, but bear with me! We start from a single package with its list of dependencies. Then, for each one of those dependencies, we first resolve the dependency’s reference to become a pinned reference, then fetch its own dependencies, and then repeat the cycle on those sub-dependencies. In the end, we’ll have a tree structure, where each package will be a node that contains its own dependencies!</p> 
      <p>In order to use this function, we just have to read the initial dependencies from the <code class="highlighter-rouge">package.json</code> file located in the local working directory - everything inside is there for us to use!</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="kr">import</span> <span class="p">{</span><span class="nx">resolve</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">'path'</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">util</span>      <span class="nx">from</span> <span class="s1">'util'</span><span class="p">;</span>

<span class="c1">// We'll use the first command line argument (argv[2]) as working directory,</span>
<span class="c1">// but if there's none we'll just use the directory from which we've executed</span>
<span class="c1">// the script</span>
<span class="kd">let</span> <span class="nx">cwd</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">||</span> <span class="nx">process</span><span class="p">.</span><span class="nx">cwd</span><span class="p">();</span>
<span class="kd">let</span> <span class="nx">packageJson</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">cwd</span><span class="p">,</span> <span class="err">`</span><span class="kr">package</span><span class="p">.</span><span class="nx">json</span><span class="err">`</span><span class="p">));</span>

<span class="c1">// Remember that because we use a different format for our dependencies than</span>
<span class="c1">// a simple dictionary, we also need to convert it when reading this file</span>
<span class="nx">packageJson</span><span class="p">.</span><span class="nx">dependencies</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">packageJson</span><span class="p">.</span><span class="nx">dependencies</span> <span class="o">||</span> <span class="p">{}).</span><span class="nx">map</span><span class="p">(</span><span class="nx">name</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="nx">packageJson</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="p">};</span>
<span class="p">});</span>

<span class="nx">getPackageDependencyTree</span><span class="p">(</span><span class="nx">packageJson</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="nx">tree</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">util</span><span class="p">.</span><span class="nx">inspect</span><span class="p">(</span><span class="nx">tree</span><span class="p">,</span> <span class="p">{</span><span class="na">depth</span><span class="p">:</span> <span class="kc">Infinity</span><span class="p">}));</span>
<span class="p">});</span>
</code></pre> 
      </div> 
      <p>Now, let’s test this code. Try running it inside a directory that contains the following <code class="highlighter-rouge">package.json</code>:</p> 
      <div class="language-json highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="p">{</span><span class="w"> </span><span class="nt">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"my-awesome-package"</span><span class="p">,</span><span class="w"> </span><span class="nt">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nt">"tar-stream"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
      </div> 
      <p>If everything goes According To Plan, here’s what you should obtain (or similar, depending on whether a package has been upgraded since the time this article has been written):</p> 
      <blockquote> 
       <p><strong>Undefined Reference</strong></p> 
       <p>You might notice a weird reference on the following snippet: <code class="highlighter-rouge">undefined</code>. It’s actually expected! This reference is used on the root package in order to inform the linker (more on that later) that this package is a bit special. In a real-life situation, we would probably want to use a special type of reference (for example <code class="highlighter-rouge">root:///path/to/package</code>), but in our case it’s not necessary.</p> 
      </blockquote> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="p">{</span> <span class="nl">name</span><span class="p">:</span> <span class="s2">"my-awesome-package"</span><span class="p">,</span>
  <span class="nx">reference</span><span class="err">:</span> <span class="kc">undefined</span><span class="p">,</span>
  <span class="nx">dependencies</span><span class="err">:</span>
   <span class="p">[</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'tar-stream'</span><span class="p">,</span>
       <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.5.4'</span><span class="p">,</span>
       <span class="na">dependencies</span><span class="p">:</span>
        <span class="p">[</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'bl'</span><span class="p">,</span>
            <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.2.1'</span><span class="p">,</span>
            <span class="na">dependencies</span><span class="p">:</span>
             <span class="p">[</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'readable-stream'</span><span class="p">,</span>
                 <span class="na">reference</span><span class="p">:</span> <span class="s1">'2.2.11'</span><span class="p">,</span>
                 <span class="na">dependencies</span><span class="p">:</span>
                  <span class="p">[</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'core-util-is'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.2'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
                    <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'inherits'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'2.0.3'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
                    <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'isarray'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.0'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
                    <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'process-nextick-args'</span><span class="p">,</span>
                      <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.7'</span><span class="p">,</span>
                      <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
                    <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'safe-buffer'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'5.0.1'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
                    <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'string_decoder'</span><span class="p">,</span>
                      <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.2'</span><span class="p">,</span>
                      <span class="na">dependencies</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'safe-buffer'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'5.0.1'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">}</span> <span class="p">]</span> <span class="p">},</span>
                    <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'util-deprecate'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.2'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">}</span> <span class="p">]</span> <span class="p">}</span> <span class="p">]</span> <span class="p">},</span>
          <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'end-of-stream'</span><span class="p">,</span>
            <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.4.0'</span><span class="p">,</span>
            <span class="na">dependencies</span><span class="p">:</span>
             <span class="p">[</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'once'</span><span class="p">,</span>
                 <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.4.0'</span><span class="p">,</span>
                 <span class="na">dependencies</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'wrappy'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.2'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">}</span> <span class="p">]</span> <span class="p">}</span> <span class="p">]</span> <span class="p">},</span>
          <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'readable-stream'</span><span class="p">,</span>
            <span class="na">reference</span><span class="p">:</span> <span class="s1">'2.2.11'</span><span class="p">,</span>
            <span class="na">dependencies</span><span class="p">:</span>
             <span class="p">[</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'core-util-is'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.2'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
               <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'inherits'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'2.0.3'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
               <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'isarray'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.0'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
               <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'process-nextick-args'</span><span class="p">,</span>
                 <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.7'</span><span class="p">,</span>
                 <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
               <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'safe-buffer'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'5.0.1'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">},</span>
               <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'string_decoder'</span><span class="p">,</span>
                 <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.2'</span><span class="p">,</span>
                 <span class="na">dependencies</span><span class="p">:</span> <span class="p">[</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'safe-buffer'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'5.0.1'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">}</span> <span class="p">]</span> <span class="p">},</span>
               <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'util-deprecate'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'1.0.2'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">}</span> <span class="p">]</span> <span class="p">},</span>
          <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'xtend'</span><span class="p">,</span> <span class="na">reference</span><span class="p">:</span> <span class="s1">'4.0.1'</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="p">[]</span> <span class="p">}</span> <span class="p">]</span> <span class="p">}</span> <span class="p">]</span> <span class="p">}</span>
</code></pre> 
      </div> 
      <p>Perfect. Now, let’s try to run it with larger packages. Let’s try with babel-core! Use the following <code class="highlighter-rouge">package.json</code> file :</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="p">{</span>
    <span class="s2">"dependencies"</span><span class="err">:</span> <span class="p">{</span>
        <span class="s2">"babel-core"</span><span class="err">:</span> <span class="s2">"*"</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre> 
      </div> 
      <p>Don’t worry, I’ll wait.</p> 
      <p>… Still waiting.</p> 
      <p>… Still… wait, is this script still running? That’s not good, right?</p> 
      <p>At this point we can safely assume that there’s something wrong in our code - Babel is not that large, and the execution should have stopped a long time ago. In order to better understand what happened, open the <a href="https://yarnpkg.com/en/package/babel-core">babel-core</a> page on Yarnpkg, and check its dependencies. You should see babel-register. Good. Now, open the <a href="https://yarnpkg.com/en/package/babel-runtime">babel-register</a> page on Yarnpkg, and check its own dependencies. You should see… Yup. Babel-core. Now can you guess what happened? Because of the circular dependency, we’ve been iterating over babel-core, then babel-register, then babel-core, then… etc. Eventually, our code will end up using too much RAM and will get killed by the OS. That’s really not good.</p> 
      <p>Fortunately, the fix is fairly easy! Remember that in Node, <code class="highlighter-rouge">node_modules</code> directories can be nested. If a package can’t be located inside the current directory <code class="highlighter-rouge">node_modules</code>, Node will try looking for it inside the parent directory <code class="highlighter-rouge">node_modules</code>, then its grandparent <code class="highlighter-rouge">node_modules</code>, etc, until it finds a satisfying match. Let’s take advantage of that:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="c1">// Look, we've added an extra optional parameter! ---------------------------------v</span>
<span class="nx">async</span> <span class="kd">function</span> <span class="nx">getPackageDependencyTree</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">},</span> <span class="nx">available</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">())</span> <span class="p">{</span>

    <span class="k">return</span> <span class="p">{</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="na">dependencies</span><span class="p">:</span> <span class="nx">await</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="nx">volatileDependency</span> <span class="o">=&gt;</span> <span class="p">{</span>

        <span class="kd">let</span> <span class="nx">availableReference</span> <span class="o">=</span> <span class="nx">available</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">volatileDependency</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>

        <span class="c1">// If the volatile reference exactly matches the available reference (for</span>
        <span class="c1">// example in the case of two URLs, or two file paths), it means that it</span>
        <span class="c1">// is already satisfied by the package provided by its parent. In such a</span>
        <span class="c1">// case, we can safely ignore this dependency!</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">volatileDependency</span><span class="p">.</span><span class="nx">reference</span> <span class="o">===</span> <span class="nx">availableReference</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>

        <span class="c1">// If the volatile dependency is a semver range, and if the package</span>
        <span class="c1">// provided by its parent satisfies it, we can also safely ignore the</span>
        <span class="c1">// dependency.</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">semver</span><span class="p">.</span><span class="nx">validRange</span><span class="p">(</span><span class="nx">volatileDependency</span><span class="p">.</span><span class="nx">reference</span><span class="p">)</span>
         <span class="o">&amp;&amp;</span> <span class="nx">semver</span><span class="p">.</span><span class="nx">satisfies</span><span class="p">(</span><span class="nx">availableReference</span><span class="p">,</span> <span class="nx">volatileDependency</span><span class="p">.</span><span class="nx">reference</span><span class="p">))</span>
            <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>

        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>

    <span class="p">}).</span><span class="nx">map</span><span class="p">(</span><span class="nx">async</span> <span class="p">(</span><span class="nx">volatileDependency</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>

        <span class="kd">let</span> <span class="nx">pinnedDependency</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">getPinnedReference</span><span class="p">(</span><span class="nx">volatileDependency</span><span class="p">);</span>
        <span class="kd">let</span> <span class="nx">subDependencies</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">getPackageDependencies</span><span class="p">(</span><span class="nx">pinnedDependency</span><span class="p">);</span>

        <span class="kd">let</span> <span class="nx">subAvailable</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Map</span><span class="p">(</span><span class="nx">available</span><span class="p">);</span>
        <span class="nx">subAvailable</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">pinnedDependency</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="nx">pinnedDependency</span><span class="p">.</span><span class="nx">reference</span><span class="p">);</span>

        <span class="k">return</span> <span class="nx">await</span> <span class="nx">getPackageDependencyTree</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">pinnedDependency</span><span class="p">,</span> <span class="p">{</span><span class="na">dependencies</span><span class="p">:</span> <span class="nx">subDependencies</span><span class="p">}),</span> <span class="nx">subAvailable</span><span class="p">);</span>

    <span class="p">}))};</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <p>This change adds a filtering pass to our dependencies processing: if any of them happens to be already satisfied by a package made available somewhere in the upstream dependency chain, then we can just skip it, since there isn’t any point in resolving it. Otherwise, we continue as usual, except that we insert them into the registry that contains our dependency chain packages. This way, our own dependencies will be able to skip installing us later on.</p> 
      <p>If we go back to our babel-core example, it will go like this:</p> 
      <div class="highlighter-rouge">
       <pre class="rougeHighlight"><code>- seeing babel-core@*

  - is it available in a parent module? NO
  - resolve it to babel-core@6.25.0
  - resolve its dependencies

    - seeing babel-register@^6.24.1
    - is it available in a parent module? NO
    - resolve it to babel-register@6.24.1
    - resolve its dependencies

      - seeing babel-core@^6.24.1
      - is it available in a parent module? YES, BECAUSE 6.25.0 MATCHES ^6.24.1
      - skip resolution
</code></pre> 
      </div> 
      <p>Awesome. We now have a working algorithm to compute our full dependency tree. We’re almost done, just two more mandatory steps before we reach the fun and optional parts!</p> 
      <hr> 
      <h2 id="chapter-5---links-awakening">Chapter 5 - Links Awakening</h2> 
      <p>In Chapter 4, we saw how to obtain a complete tree of all of our dependencies. Now, we just have to download their tarballs somewhere, and extract them on the disk. The first part being made trivial by this awesome <code class="highlighter-rouge">fetchPackage</code> function we’ve conveniently written not so long ago, our linker will only be a matter of a few lines:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="c1">// This function extracts an archive somewhere on the disk</span>
<span class="kr">import</span> <span class="p">{</span><span class="nx">extractNpmArchiveTo</span><span class="p">}</span> <span class="nx">from</span> <span class="s1">'./utilities'</span><span class="p">;</span>

<span class="nx">async</span> <span class="kd">function</span> <span class="nx">linkPackages</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">},</span> <span class="nx">cwd</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">let</span> <span class="nx">dependencyTree</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">getPackageDependencyTree</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">});</span>

    <span class="c1">// As we previously seen, the root package will be the only one containing</span>
    <span class="c1">// no reference. We can simply skip its linking, since by definition it already</span>
    <span class="c1">// contains the entirety of its own code :)</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">reference</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">let</span> <span class="nx">packageBuffer</span> <span class="o">=</span> <span class="nx">await</span> <span class="nx">fetchPackage</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">});</span>
        <span class="nx">await</span> <span class="nx">extractNpmArchiveTo</span><span class="p">(</span><span class="nx">packageBuffer</span><span class="p">,</span> <span class="nx">cwd</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nx">await</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">async</span> <span class="p">(</span><span class="nx">dependency</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">await</span> <span class="nx">linkPackages</span><span class="p">(</span><span class="nx">dependency</span><span class="p">,</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">cwd</span><span class="p">}</span><span class="sr">/node_modules/</span><span class="nx">$</span><span class="p">{</span><span class="nx">dependency</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="err">`</span><span class="p">);</span>
    <span class="p">}));</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <p>And that’s about it. This code will traverse your tree, unpack each package inside its designated directory (check the repository at the end of the article for the <code class="highlighter-rouge">extractArchiveTo</code> implementation if you care about it), then iterate over its children and do the same for each of them. Seems good enough, but I feel like we might be forgetting something… oh right! The binaries! See, NPM’s <code class="highlighter-rouge">package.json</code> files offers a way for packages to expose utilities to the public (more details <a href="https://docs.npmjs.com/files/package.json#bin">here</a>). We’ll need to add a few extra lines to support this use case:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="kr">import</span> <span class="nx">fs</span> <span class="nx">from</span> <span class="s1">'fs-extra'</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">path</span> <span class="nx">from</span> <span class="s1">'path'</span><span class="p">;</span>

<span class="nx">async</span> <span class="kd">function</span> <span class="nx">linkPackages</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">},</span> <span class="nx">cwd</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// ... same code as before, except for the end:</span>

    <span class="nx">await</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">async</span> <span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>

        <span class="kd">let</span> <span class="nx">target</span> <span class="o">=</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">cwd</span><span class="p">}</span><span class="sr">/node_modules/</span><span class="nx">$</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="err">`</span><span class="p">;</span>
        <span class="kd">let</span> <span class="nx">binTarget</span> <span class="o">=</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">cwd</span><span class="p">}</span><span class="sr">/node_modules/</span><span class="p">.</span><span class="nx">bin</span><span class="err">`</span><span class="p">;</span>

        <span class="nx">await</span> <span class="nx">linkPackages</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">},</span> <span class="nx">target</span><span class="p">);</span>

        <span class="kd">let</span> <span class="nx">dependencyPackageJson</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">target</span><span class="p">}</span><span class="sr">/package.json`</span><span class="se">)</span><span class="err">; </span>        <span class="kd">let</span> <span class="nx">bin</span> <span class="o">=</span> <span class="nx">dependencyPackageJson</span><span class="p">.</span><span class="nx">bin</span> <span class="o">||</span> <span class="p">{};</span>

        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">bin</span> <span class="o">===</span> <span class="err">`</span><span class="nx">string</span><span class="err">`</span><span class="p">)</span>
            <span class="nx">bin</span> <span class="o">=</span> <span class="p">{[</span><span class="nx">name</span><span class="p">]:</span> <span class="nx">bin</span><span class="p">};</span>

        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">binName</span> <span class="nx">of</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">bin</span><span class="p">))</span> <span class="p">{</span>

            <span class="kd">let</span> <span class="nx">source</span> <span class="o">=</span> <span class="nx">resolve</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">bin</span><span class="p">[</span><span class="nx">binName</span><span class="p">]);</span>
            <span class="kd">let</span> <span class="nx">dest</span> <span class="o">=</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">binTarget</span><span class="p">}</span><span class="sr">/${binName}`</span><span class="err">; </span>
            <span class="nx">await</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">mkdirp</span><span class="p">(</span><span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">cwd</span><span class="p">}</span><span class="sr">/node_modules/</span><span class="p">.</span><span class="nx">bin</span><span class="err">`</span><span class="p">);</span>
            <span class="nx">await</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">symlink</span><span class="p">(</span><span class="nx">relative</span><span class="p">(</span><span class="nx">binTarget</span><span class="p">,</span> <span class="nx">source</span><span class="p">),</span> <span class="nx">dest</span><span class="p">);</span>

        <span class="p">}</span>

    <span class="p">}));</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <p>Good. But still, I can shake this feeling that… scripts! We’re missing install scripts! Packages can specify commands that should run after a package has been installed (for example, they might want to compile or transpile some code depending on your environment). We don’t execute them yet, but that should be fairly easy:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="kr">import</span> <span class="nx">cp</span> <span class="nx">from</span> <span class="s1">'child_process'</span><span class="p">;</span>
<span class="kr">import</span> <span class="nx">util</span> <span class="nx">from</span> <span class="s1">'util'</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">exec</span> <span class="o">=</span> <span class="nx">util</span><span class="p">.</span><span class="nx">promisify</span><span class="p">(</span><span class="nx">cp</span><span class="p">.</span><span class="nx">exec</span><span class="p">);</span>

<span class="nx">async</span> <span class="kd">function</span> <span class="nx">linkPackages</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">},</span> <span class="nx">cwd</span><span class="p">)</span> <span class="p">{</span>

    <span class="c1">// ... same code as before except the end:</span>

    <span class="nx">await</span> <span class="nx">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">async</span> <span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>

        <span class="c1">// ... same code as before</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">dependencyPackageJson</span><span class="p">.</span><span class="nx">scripts</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">scriptName</span> <span class="nx">of</span> <span class="p">[</span><span class="err">`</span><span class="nx">preinstall</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="nx">install</span><span class="err">`</span><span class="p">,</span> <span class="err">`</span><span class="nx">postinstall</span><span class="err">`</span><span class="p">])</span> <span class="p">{</span>

                <span class="kd">let</span> <span class="nx">script</span> <span class="o">=</span> <span class="nx">dependencyPackageJson</span><span class="p">.</span><span class="nx">scripts</span><span class="p">[</span><span class="nx">scriptName</span><span class="p">];</span>

                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">script</span><span class="p">)</span>
                    <span class="k">continue</span><span class="p">;</span>

                <span class="nx">await</span> <span class="nx">exec</span><span class="p">(</span><span class="nx">script</span><span class="p">,</span> <span class="p">{</span><span class="na">cwd</span><span class="p">:</span> <span class="nx">target</span><span class="p">,</span> <span class="na">env</span><span class="p">:</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">({},</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">,</span> <span class="p">{</span>
                    <span class="na">PATH</span><span class="p">:</span> <span class="err">`</span><span class="nx">$</span><span class="p">{</span><span class="nx">target</span><span class="p">}</span><span class="sr">/node_modules/</span><span class="p">.</span><span class="na">bin</span><span class="p">:</span><span class="nx">$</span><span class="p">{</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">PATH</span><span class="p">}</span><span class="err">`</span>
                <span class="p">})});</span>

            <span class="p">}</span>
        <span class="p">}</span>

    <span class="p">}));</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <blockquote> 
       <p><strong>All your environments are belong to it</strong></p> 
       <p>Note that we’ve only set the <code class="highlighter-rouge">PATH</code> environment variable inside this snippet, but packages usually have access to a whole lot of extra environment variables (more details <a href="https://docs.npmjs.com/misc/scripts#environment">here</a>). They are rarely used, but if you plan to write a package manager then you’ll have to make sure that you actually define them one way or the other.</p> 
      </blockquote> 
      <p>Now, calling our linker function will install everything we need on the filesystem! Better yet, all build scripts will be run correctly, meaning you will end up with a working <code class="highlighter-rouge">node_modules</code> directory! Good job! Our next chapter will be about performances, things will now start to get really interesting.</p> 
      <hr> 
      <h2 id="chapter-6---lord-of-the-optimization">Chapter 6 - Lord of the Optimization</h2> 
      <p>Our package manager is working! However, you may notice something … Because we’re not taking advantage of Node’s resolution algorithm, and because we don’t try to remove duplicates from our package tree, we might end up with a really huge <code class="highlighter-rouge">node_modules</code> folder! You might think that it’s not that much of a problem, but it has proven to <a href="https://scottaddie.com/2015/08/16/npm-vs-windows-max_path-limitation/">cause issues in the past</a>. For example, on most Windows installations, paths have a hard limit of 260 characters. For packages that are deeply nested, this limit is often exceeded and it breaks things. Fortunately, Node’s resolution algorithm help us by allowing us to move the dependencies lower in the tree, as long as there is no conflicts.</p> 
      <p>So let’s go! Our job in this chapter will be to decrease the number of packages that get installed on the filesystem, by any means necessary. However, we will also do the best we can to keep our algorithm both simple and encapsulated, so that it can be easily understood by maintainers and contributors alike, and can be switched or disabled in a single line if we need to.</p> 
      <p>Here’s a possible implementation. It’s not perfect, but it’s a good start! Don’t be scared by its length, most of this is just comments:</p> 
      <div class="language-js highlighter-rouge">
       <pre class="rougeHighlight"><code><span class="kd">function</span> <span class="nx">optimizePackageTree</span><span class="p">({</span><span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span><span class="p">})</span> <span class="p">{</span>

    <span class="c1">// This is a Divide &amp; Conquer algorithm - we split the large problem into</span>
    <span class="c1">// subproblems that we solve on their own, then we combine their results</span>
    <span class="c1">// to find the final solution.</span>
    <span class="c1">//</span>
    <span class="c1">// In this particular case, we will say that our optimized tree is the result</span>
    <span class="c1">// of optimizing a single depth of already-optimized dependencies (ie we first</span>
    <span class="c1">// optimize each one of our dependencies independently, then we aggregate their</span>
    <span class="c1">// results and optimize them all a last time).</span>
    <span class="nx">dependencies</span> <span class="o">=</span> <span class="nx">dependencies</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">dependency</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">optimizePackageTree</span><span class="p">(</span><span class="nx">dependency</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="c1">// Now that our dependencies have been optimized, we can start working on</span>
    <span class="c1">// doing the second pass to combine their results together. We'll iterate on</span>
    <span class="c1">// each one of those "hard" dependencies (called as such because they are</span>
    <span class="c1">// strictly required by the package itself rather than one of its dependencies),</span>
    <span class="c1">// and check if they contain any sub-dependency that we could "adopt" as our own.</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">hardDependency</span> <span class="nx">of</span> <span class="nx">dependencies</span><span class="p">.</span><span class="nx">slice</span><span class="p">())</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">subDependency</span> <span class="nx">of</span> <span class="nx">hardDependency</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">slice</span><span class="p">())</span> <span class="p">{</span>

            <span class="c1">// First we look for a dependency we own that is called</span>
            <span class="c1">// just like the sub-dependency we're iterating on.</span>
            <span class="kd">let</span> <span class="nx">availableDependency</span> <span class="o">=</span> <span class="nx">dependencies</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">dependency</span> <span class="o">=&gt;</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">dependency</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="nx">subDependency</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
            <span class="p">});</span>

            <span class="c1">// If there's none, great! It means that there won't be any collision</span>
            <span class="c1">// if we decide to adopt this one, so we can just go ahead.</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">availableDependency</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>
                <span class="nx">dependencies</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">subDependency</span><span class="p">);</span>

            <span class="c1">// If we've adopted the sub-dependency, or if the already existing</span>
            <span class="c1">// dependency has the exact same reference than the sub-dependency,</span>
            <span class="c1">// then it becames useless and we can simply delete it.</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">availableDependency</span> <span class="o">||</span> <span class="nx">availableDependency</span><span class="p">.</span><span class="nx">reference</span> <span class="o">===</span> <span class="nx">subDependency</span><span class="p">.</span><span class="nx">reference</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">hardDependency</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">hardDependency</span><span class="p">.</span><span class="nx">dependencies</span><span class="p">.</span><span class="nx">findIndex</span><span class="p">(</span><span class="nx">dependency</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="nx">dependency</span><span class="p">.</span><span class="nx">name</span> <span class="o">===</span> <span class="nx">subDependency</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
                <span class="p">}));</span>
            <span class="p">}</span>

        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="p">{</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">reference</span><span class="p">,</span> <span class="nx">dependencies</span> <span class="p">};</span>

<span class="p">}</span>
</code></pre> 
      </div> 
      <p>And that’s it. We’ll just have to call this function after resolving and before linking, and we’ll get a much simpler tree that will still produce a valid output according to Node’s resolution algorithm!</p> 
      <blockquote> 
       <p><strong>The devil really was in the details</strong></p> 
       <p>As we saw in the introduction of this article, a large amount of what makes package managers complex software lies in the details. Our optimizer code suffers from this: despite it working in many cases, it actually has an unfortunate bug related to how binaries are linked. With the code shown above, package binaries will not be installed where they should, because when optimizing we lost the information that would allow the linker to correctly link each binary to the right location. Because of this, they will not be found when running the <code class="highlighter-rouge">build</code> scripts. Oops!</p> 
       <p>Solving this would require adding some fields into our resolution tree nodes that we would then use to track the nodes original locations in the tree. The linker would then be able to link the binaries directly inside its children in a post-processing pass. Unfortunately, it would also make the code much less clear, so we opted not to implement this here. Such is the tough life of package manager writers…</p> 
      </blockquote> 
      <hr> 
      <h2 id="conclusion---there-really-was-a-cakehttpsgithubcomyarnpkglets-dev-demo">Conclusion - There Really Was a <a href="https://github.com/yarnpkg/lets-dev-demo">Cake</a></h2> 
      <p>Finally! After all this time, we have our tiny package manager! You can even see its full code on <a href="https://github.com/yarnpkg/lets-dev-demo">this repository</a> - you can try it, it really works! It is admittedly pretty basic, kind of slow, and without much features, but we love it nevertheless and that’s all that matters. And because it’s young, there is still room for a lot of evolutions and improvements:</p> 
      <ul> 
       <li> <p>We could implement a powerful CLI that would be similar to Yarn! With progress bars, and emojis, and all those fancy things! In fact, the demo already has progress bars, so that’s a good start!</p> </li> 
       <li> <p>We could split our functions into modules! Our package manager would then be a simple CLI, and our fetchers / resolvers / linkers would be loaded from a configuration file. Want to link everything using symlinks or hardlinks instead of copying files? Just use another linker than the default one! Want to add support for extra fetchers? Add them to your config files and be done with it! In fact, we even <a href="https://github.com/yarnpkg/yarn/pull/3501">started experimenting with something similar in Yarn</a>.</p> </li> 
       <li> <p>We could also improve our optimizer so that it would actually work in every case! ;) And assuming a plugin architecture like the one we talked about in the previous bullet point, we could even implement different optimization strategies — from the <code class="highlighter-rouge">[--flat](https://yarnpkg.com/lang/en/docs/cli/install/#toc-yarn-install-flat)</code> option to ensure that we wouldn’t use multiple versions of any single package, up to the more esoteric ones that would use more complex algorithms, such as <a href="https://github.com/yarnpkg/yarn/issues/422">SAT solvers</a> — and all the while without any risk of hurting the package manager core experience!</p> </li> 
       <li> <p>We could persist our resolution tree to a file on the disk, which we would call <code class="highlighter-rouge">yarn.lock</code>, and each time we would need to process a package from within our <code class="highlighter-rouge">getPinnedReference</code> and <code class="highlighter-rouge">getPackageDependencies</code> functions, we would instead extract that information from the file instead of over the network! (In case you’re wondering, that’s exactly how both Yarn’s <code class="highlighter-rouge">yarn.lock</code> and NPM@5’s <code class="highlighter-rouge">package-lock.json</code> files work)</p> </li> 
       <li> <p>We could save the tarballs in some sort of a cache, so that we wouldn’t have to download them from the network multiple times. By doing this we could even install our packages offline, if our cache is sufficiently well furnished!</p> </li> 
      </ul> 
      <p>This is only a short list, far from being exhaustive! Package managers can implement a wide range of features, and all of them can each be improved in a lot of different ways. As you can see, the future looks bright: who can tell what new features and improvements will come during the incoming years? No one can tell for sure, but what I <em>can</em> tell you is to watch this blog for the next Yarn announcement!</p> 
      <hr> 
      <blockquote> 
       <p>I hope you’ve enjoyed this article as much as I’ve taken pleasure in writing it! If you want to discuss it, whether it’s to correct some mistake or to just talk about package managers, ping me on Twitter via <a href="https://twitter.com/arcanis">@arcanis</a>, or on Yarn’s <a href="https://discord.gg/yarnpkg">Discord</a> server where the core team regularly lurks :)</p> 
      </blockquote> 
     </div> 
    </div> 
   </div> 
  </main> 
  <hr class="footer-divider"> 
  <div class="container"> 
   <footer class="footer"> 
    <div class="footer-left"> 
     <span class="footer-item">Yarn</span> 
     <span class="footer-item"><a href="https://github.com/yarnpkg/yarn/blob/master/LICENSE">Distributed under BSD License</a></span> 
     <span class="footer-item"><a href="/org/code-of-conduct">Code of Conduct</a></span> 
    </div> 
    <div class="footer-right"> 
     <span class="footer-item"><a href="https://github.com/yarnpkg/website/edit/master/_posts/2017-07-11-lets-dev-a-package-manager.md">Edit this page</a></span> 
    </div> 
   </footer> 
  </div> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-85522875-1', 'auto');
  ga('send', 'pageview');
</script> 
  <script>
  var i18n_default = {"search_placeholder":"Search packages (i.e. babel, webpack, react…)","search_by_algolia":"Search by Algolia","search_by_read_more":"read how it works","no_package_found":"No package {name} was found","no_results_docsearch":"Were you looking for something in the {documentation_link}?","documentation":"documentation","downloads_in_last_30_days":"{count} downloads in the last 30 days","npm_page_for":"npm page for {name}","github_repo_of":"GitHub repository of {name}","npm":"npm","github":"GitHub","homepage":"Homepage","deprecated":"deprecated","result_stats":"found {number_packages} packages in {time_search}ms","time_ago":"{time_distance} ago","last_updated":"last updated {update_date}","detail":{"over_a_year_ago":"over a year ago","less_than_a_week_ago":"less than a week ago","one_week_ago":"one week ago","weeks_ago":"{count} weeks ago","activity":"Activity","commits_last_three_months":"Commits last 3 months","last_commit":"Last commit","loading":"Loading...","use_it":"Use it","try_in_runkit":"Try in RunKit","back_to_details":"Back to Details","browse_files":"Browse Files","contributors":"Contributors","display_full_readme":"Display full readme","display_full_changelog":"Display full changelog","files_error":"Could not load file listing: {error}","files_header":"Files in {name}","collapse":"Collapse","readme":"readme","no_readme_found":"no readme found ?","changelog":"changelog","popularity":"Popularity","github_stargazers":"GitHub stargazers","downloads_last_30_days":"Downloads last 30 days","dependents":"Dependents","usage":"Usage","dependencies":"Dependencies","devdependencies":"DevDependencies","packages":"Packages","see_package_json":"see package.json","tags":"Tags","versions":"Versions","display_all":"Display all","hide":"Hide","not_found":{"whoa":"Whoa, {package_name} does not exist yet","yours":"But that means it is now yours!","make":"Make your package"}}};
  window.i18n = {"search_placeholder":"Search packages (i.e. babel, webpack, react…)","search_by_algolia":"Search by Algolia","search_by_read_more":"read how it works","no_package_found":"No package {name} was found","no_results_docsearch":"Were you looking for something in the {documentation_link}?","documentation":"documentation","downloads_in_last_30_days":"{count} downloads in the last 30 days","npm_page_for":"npm page for {name}","github_repo_of":"GitHub repository of {name}","npm":"npm","github":"GitHub","homepage":"Homepage","deprecated":"deprecated","result_stats":"found {number_packages} packages in {time_search}ms","time_ago":"{time_distance} ago","last_updated":"last updated {update_date}","detail":{"over_a_year_ago":"over a year ago","less_than_a_week_ago":"less than a week ago","one_week_ago":"one week ago","weeks_ago":"{count} weeks ago","activity":"Activity","commits_last_three_months":"Commits last 3 months","last_commit":"Last commit","loading":"Loading...","use_it":"Use it","try_in_runkit":"Try in RunKit","back_to_details":"Back to Details","browse_files":"Browse Files","contributors":"Contributors","display_full_readme":"Display full readme","display_full_changelog":"Display full changelog","files_error":"Could not load file listing: {error}","files_header":"Files in {name}","collapse":"Collapse","readme":"readme","no_readme_found":"no readme found ?","changelog":"changelog","popularity":"Popularity","github_stargazers":"GitHub stargazers","downloads_last_30_days":"Downloads last 30 days","dependents":"Dependents","usage":"Usage","dependencies":"Dependencies","devdependencies":"DevDependencies","packages":"Packages","see_package_json":"see package.json","tags":"Tags","versions":"Versions","display_all":"Display all","hide":"Hide","not_found":{"whoa":"Whoa, {package_name} does not exist yet","yours":"But that means it is now yours!","make":"Make your package"}}} || {};
  window.i18n.url_base = "";
  window.i18n.active_language = "en";
  
  // give defaults
  for (var key in i18n_default) {
    if (window.i18n.hasOwnProperty(key) === false || window.i18n[key] === null) {
      window.i18n[key] = i18n_default[key];
    }
  }
</script> 
  <script src="/js/build/vendor.53223bc0876707cdfb47.js"></script> 
  <script src="/js/build/common.3d2ce2aeb50dd1161b8f.js"></script>   
 </body>
</html>