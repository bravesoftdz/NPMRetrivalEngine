<!doctype html>
<html lang="en-US" prefix="og: http://ogp.me/ns#" ng-app="AP" ng-strict-di>
 <head> 
  <title>Utilities for Everyday Node.js Development</title> 
  <meta charset="UTF-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta name="robots" content="index, follow"> 
  <meta name="description" content="Node.js expert Sean Canton discusses some of of the most useful utilities that every Node developer should have in their arsenal."> 
  <meta property="og:locale" content="en_US">
  <meta property="og:type" content="article">
  <meta property="og:title" content="Utilities for Everyday Node.js Development">
  <meta property="og:description" content="Node.js expert Sean Canton discusses some of of the most useful utilities that every Node developer should have in their arsenal.">
  <meta property="og:image" content="https://i.imgur.com/RHBW5y1.png">
  <meta property="og:url" content="http://www.airpair.com/node.js/posts/utilities-for-everyday-node-development">
  <link rel="canonical" href="http://www.airpair.com/node.js/posts/utilities-for-everyday-node-development"> 
  <link rel="alternate" href="https://www.airpair.com/rss" type="application/rss+xml" title="AirPair RSS"> 
  <link rel="stylesheet" href="https://static.airpair.com/css/libs-9dca10bf21.css" type="text/css"> 
  <link rel="stylesheet" href="https://static.airpair.com/css/app-6174feeeb2.css" type="text/css">
  <meta name="msapplication-TileColor" content="#ffffff"> 
  <meta name="msapplication-TileImage" content="https://static.airpair.com/ico/ms-icon-144x144.png"> 
  <base href="/"> 
 </head> 
 <body> 
  <header> 
   <a href="https://www.airpair.com/" tile="Top software developers | AirPair" target="_self"></a> 
   <ul> 
    <li><a href="/software-experts" target="_self">Software experts</a></li>
   </ul> 
  </header> 
  <div class="main-wrap"> 
   <div notifications></div> 
   <main ng-view> 
    <div id="srv">
     <article class="blogpost"> 
      <h1 class="entry-title" itemprop="headline">Utilities for Everyday Node.js Development</h1> 
      <div class="railMarker"></div> 
      <h4 id="table-of-contents">Table of Contents</h4> 
      <ul> 
       <li><a href="#1-introduction">1 Introduction</a></li> 
       <li><a href="#2-node-modules">2 Node Modules</a></li> 
       <li><a href="#3-npm">3 NPM</a>
        <ul> 
         <li><a href="#3-1-npm-init">3.1 npm init</a></li> 
         <li><a href="#3-2-package-json">3.2 package.json</a></li> 
         <li><a href="#3-3-npm-npm-install-global-vs-local-">3.3 npm &amp; npm install (global vs local)</a></li> 
         <li><a href="#3-4-npm-search">3.4 npm search</a></li> 
         <li><a href="#3-5-npm-repo-npm-docs">3.5 npm repo / npm docs</a></li> 
        </ul> </li> 
       <li><a href="#4-must-use-modules">4 Must-use modules</a>
        <ul> 
         <li><a href="#4-1-lodash">4.1 Lodash</a></li> 
         <li><a href="#4-2-async-https-github-com-caolan-async-">4.2 </a><a href="https://github.com/caolan/async">Async</a></li> 
         <li><a href="#4-3-what-s-next-">4.3 What's next?</a></li> 
        </ul> </li> 
       <li><a href="#5-conclusion">5 Conclusion</a></li> 
      </ul> 
      <figure class="author"> 
       <img alt="Sean Canton" src="https://avatars.githubusercontent.com/u/405274?v=3?s=100"> 
       <hr> 
       <div> 
        <label>Sean Canton</label> 
        <figcaption>
          Sean Canton leads technology efforts at Rokk3r Labs, a specialized team of engineers, creatives, and strategists dedicated to cobuilding amazing companies. He also teaches full stack web development at Wyncode, Florida's first state-licensed code school. 
        </figcaption> 
       </div> 
       <hr> 
      </figure> 
      <p class="asset"><img src="https://i.imgur.com/RHBW5y1.png"></p> 
      <hr> 
      <post no-compile>
       <h2 id="1-introduction">1 Introduction</h2> 
       <p>One of the things which makes working with Node fundamentally different from other server-side scripting languages is the functional paradigm provided by JavaScript, which structurally allows for asynchronous, non-blocking transactions through the use of callbacks. What this means is instead of executing a script from beginning to end, Node is always running, with listeners attached to functions ready to do our bidding.</p> 
       <p>Node does not force you into an architecture, nor does it offer a firm opinion outside of providing JavaScript as a connector between file systems, operating systems, and the internet at large. This interconnection is the core of what Node provides, supplanted by thousands of community written modules: the Node 'ecosystem'.</p> 
       <h2 id="2-node-modules">2 Node Modules</h2> 
       <p>Node modules are written in JavaScript and compiled at runtime, which offers developers the ability to see how modules work, evaluate differing development practices, and diagnose the inevitable bugs that show up. Due to their modular implementation, Node modules don't especially need to be compatible with each other. Several standards, such as Express and Connect, have established a common API to handle common problems, so there are many modules that offer Express compatibility, or use Express as part of their core functionality.</p> 
       <p>Node modules provide an interchangeable extensibility that is important to get comfortable with; we'll dive into <code>npm</code> first so you can find and utilize modules for your project. At the end of the day, much of what Node developers wrangle with are event callbacks and object manipulation, so we will also explore the <code>async</code> and <code>lodash</code> modules which make these two tasks much easier.</p> 
       <h2 id="3-npm">3 NPM</h2> 
       <p>The Node philosophy aligns with the UNIX philosophy of modularity and reusability, and this is highlighted by <code>npm</code>, the Node package manager.</p> 
       <h3 id="3-1-npm-init">3.1 npm init</h3> 
       <p>The best place to start using <code>npm</code> with a project is to run <code>npm init</code>, which will walk you through some questions and create a <code>package.json</code> in your folder. </p> 
       <h3 id="3-2-package-json">3.2 package.json</h3> 
       <p>Every Node module uses a <code>package.json</code> file to determine what modules need to be installed in order to function properly. Use <code>npm init</code> to generate your own. </p> 
       <p>This file also holds (other meta information)[<a href="https://www.npmjs.org/doc/files/package.json.html">https://www.npmjs.org/doc/files/package.json.html</a>], such as version, descriptions, authors, license, and script hooks. After downloading / cloning a Node project, run <code>npm install</code> to download all the dependencies. </p> 
       <p>Make sure to <code>.gitignore</code> your _node<em>modules</em> folder, lest you embarrassingly commit all your modules to your repository, an act which will require some non-trivial git sorcery to erase.</p> 
       <p>When using <code>npm</code> in non-trivial projects, append <code>--save</code>, e.g. <code>npm install &lt;module&gt; --save</code>, in order to add the package information to <code>package.json</code> automagically.</p> 
       <h3 id="3-3-npm-npm-install-global-vs-local-">3.3 npm &amp; npm install (global vs local)</h3> 
       <p><code>npm</code> offers two 'locations' for packages, local and global. Local packages are installed in a project's _node<em>modules</em> folder, using the command <code>npm install &lt;modulename&gt;</code>. Global packages are installed using the <code>-g</code> flag, e.g. <code>npm install -g &lt;modulename&gt;</code>, and -- if they are designed for it -- can be installed in your environment and accessed from the command line.</p> 
       <p>Here's an example:</p> 
       <p>Suppose I have a home weather system that writes the average temperature for a day to a file. As I have been deeply immersed with developing Node, I haven't been outside in two weeks. I still want to know the hot days so I can have a point of common reference with other humans when I see them. Reading a line of numbers, however, would be an undue cognitive burden, so I desire a graphical representation that I can summon from my command line. Enter global Node module 'sparkly'.</p> 
       <p><code>npm install -g sparkly</code> provides a simple command line driven sparkline that can be piped into. Given any set of numeric information, we can get a rough overview of their relationship. <code>tail -n14 weather.tmp | sparkly</code> shows me how the week would have been had I stepped outside; now I can complain accordingly and accurately, thanks to my weather station, Node and sparkly. </p> 
       <p>Admittedly, by itself, this is a limited utility, but every Node module this can be combined with other modules, or UNIX tools in the case of global modules. The universe of small pieces can be assembled into greater wholes, and despite there being thousands of modules, there is still plenty of room for improvements and innovations.</p> 
       <h3 id="3-4-npm-search">3.4 npm search</h3> 
       <p>One of the headaches of navigating the sea of modules is discovery and documentation. At the time of this writing, <code>npm search cli</code> returns 7500 modules, many of which are referring to 'client', but the rest can be used on the command line. </p> 
       <p>npm searching for any sort of adapter, protocol or standard often turns up a match. Many modules are wrappers on top of C++ codebases, which brings many of the advances of the past decades of computing, to your JavaScript-sullied fingertips.</p> 
       <h3 id="3-5-npm-repo-npm-docs">3.5 npm repo / npm docs</h3> 
       <p>Navigating the documentation for so many modules can be overwhelming, <code>npm repo &lt;modulename&gt;</code> or <code>npm docs &lt;modulename&gt;</code> will bring you to a website (often a GitHub page) where you can read up on how to use a given module. As you will be accessing said documentation very often, it is useful to know how to get there quickly and with a minimum of effort. </p> 
       <p>As previously mentioned, module source code is readily accessible, where it is hopefully well commented and clearly written, so one can understand the underlying mechanisms which may be causing headaches or frustrations in implementation.</p> 
       <h2 id="4-must-use-modules">4 Must-use modules</h2> 
       <p>Two modules I use in almost every project are <code>async</code> and <code>lodash</code>.</p> 
       <p>Async helps to manage the 'callback hell' that nested callbacks can create. Since the depth of a function becomes its execution order, it becomes very visually confusing after a depth of 4 or 5 functions and any amount of conditionals or forking.</p> 
       <p><a href="https://lodash.com/">Lodash</a> helps to manipulate objects and arrays. Moving information between databases, clients and servers is a big part of working with Node, and having powerful tools, like lodash, help tremendously in this regard.</p> 
       <h3 id="4-1-lodash">4.1 Lodash</h3> 
       <p>The spiritual successor to underscore.js, lodash maintains backwards compatibility with underscore code (if you use the compatible version), and takes bold steps forward to help you manipulate those objects and arrays quickly and easily.</p> 
       <p>There are many more methods to lodash then I've covered here, these are the ones I find myself using the most.</p> 
       <h4 id="4-1-1-array-">4.1.1 Array - []</h4> 
       <p><strong>first</strong></p> 
       <p>Pop, shift, slice? How about just give me the <code>_.first</code> x numbers of elements.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var array = [ 1, 2, 3, 4 ,5 ];
_.first(array, 3);
// returns [1,2,3]
</code></pre>
       <p><strong>rest</strong></p> 
       <p>Push, unshift or splice? What about when you just want the last few items of an array?</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>    var array = [ 1, 2, 3, 4 ,5 ];
    _.rest(array, 3);
    // returns [1,2,3]
</code></pre>
       <p><strong>compact</strong></p> 
       <p>Sometimes you end up with a bunch of empty fields in an array. <code>_.compact</code> removes everything which evaluates to <code>false</code>, <code>null</code>, <code>0</code>, <code>undefined</code> or <code>NaN</code>. Useful for keeping data tidy.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var array = [ 0, 1, 0, 2, false, true ];
_.compact(array);
// returns [ 1,2, true]
</code></pre>
       <p><strong>flatten</strong></p> 
       <p>Nested arrays are often part of working with JavaScript, use <code>_.flatten</code> to get rid of the un-needed structure.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var array = [[ 1,2 ], [3,4]];
_.flatten(array);
// returns [1,2,3,4]
</code></pre>
       <p><strong>each</strong></p> 
       <p>Good old forEach, except it works in all browsers and is a little trimmer.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var array = [1,2,3];
_.each(array, function(v,i){
  array[i] = v*2;
});
// does not return anything, just sets array to [ 2, 4, 6 ];
</code></pre>
       <p>It's important to notice that lodash uses the following formats on anonymous functions:</p> 
       <p>Dealing with arrays</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>function(value, i)
</code></pre>
       <p>Dealing with objects</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>function(value, key)
</code></pre>
       <p>This may be second nature to anyone used to <code>for-in</code> loops, but it could be a stumbling block for anyone used to the key, value notation.</p> 
       <p>Collections are arrays of objects, and while the above functions work perfectly well on them, there are other ways we can traverse and manipulate them. </p> 
       <h4 id="4-1-2-collections-">4.1.2 Collections - [{},{},{}]</h4> 
       <p><strong>map</strong></p> 
       <p><code>Map</code> is useful when you need to transform values of an array or object. Unlike each, this generates a new array. </p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>function toDogYears(dog){
  return dog.age*7;
};
var dogs = [{ name: "arf", age: 3}, {name:'bark', age: 5}]


_.map(dogs, toDogYears);
//returns [21,35]
</code></pre>
       <p><strong>reduce</strong></p> 
       <p><code>_.reduce</code> turns an array or collection into a single value, using an accumulator as a starting point and passing it into a function for each iteration.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>// array reduction
var array = [ 1,2,3 ];
_.reduce(array, function(total, number){
  return total + number;
}, 0);

// object reduction
var workers = [{ name: 'john', years: 5 }, {name: 'susan', years: 3}, {name: 'lucy', years: 2 }];

_.reduce(workers, function(combined, worker){
  return combined.years += worker.years
},{});
// returns { years: 10 };
</code></pre>
       <p><strong>filter</strong></p> 
       <p>For the next three functions, assume this dataset:</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var cats = [{ name: 'fuzzy', color: 'orange', age: 12 },
{ name: 'tiny', color: 'red', age: 7 },
{ name: 'grumpy', color: 'white', age: 5 } ]
</code></pre>
       <p><code>_.filter</code> returns an array of objects which all pass a truth test.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>_.filter(cats, function getYoungerCats(cat){
return (cat.age &lt; 10);
});
// returns [ { name: 'tiny', color: 'red', age: 7 }, { name: 'grumpy', color: 'white', age: 5 } ]
</code></pre>
       <p><strong>pluck</strong></p> 
       <p>Pluck is similar to reduce, except you get an ordered list of properties as an array, instead of an accumulated value. Useful when you need to build isolated datasets out of large collections.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>_.pluck(cats, 'name');
// return [ 'fuzzy', 'tiny', 'grumpy']
</code></pre>
       <p><strong>where</strong></p> 
       <p>Where is a shorthand for what you might otherwise accomplish with <code>_.filter</code>.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>_.where(cats, { color: 'red'});
// returns [{ name: 'fuzzy', color: 'orange', age: 12 }]
</code></pre>
       <h4 id="4-1-3-objects-">4.1.3 Objects - {}</h4> 
       <p><strong>clone</strong></p> 
       <p>One of the gotchas in JavaScript-land is using an object as a property of another object, and we change that property, thinking that we are affecting a copy of the object. Not true. Only a pointer to the original object is stored.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var obj = { 'a' : true, 'b': true };
var smartContainer = { foo: _.clone(obj) }
smartContainer.foo.a = false;
// obj.a == true
// original object was not changed

var container = { foo: obj };
container.foo.a = false;
// obj.a == false
// original object changed, even though it's inside another object
</code></pre>
       <p><strong>extend</strong></p> 
       <p><code>_.extend</code> divides your development experience into before you used extend and after you used extend. Simply, it merges objects. Properties of subsequent objects will override earlier.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>_.extend({ type: 'ball', color: 'blue' }, { name: 'bob', color: 'red' });
// { type: 'ball', color: 'red', name: 'bob' }
</code></pre>
       <p><strong>has</strong></p> 
       <p>Useful as a safe alternative to <code>if (obj.prop)</code> conditional testing.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>if ( _.has(obj, 'prop')) { }
</code></pre>
       <p><strong>isEmpty / isPlainObject / isUndefined / isEqual / isNull</strong></p> 
       <p>These simple conditional tests are extremely useful, abstract away all sorts of edge cases, and are easy to use.</p> 
       <p><strong>transform</strong></p> 
       <p><code>_.transform</code> is similar to reduce, in that it runs a function for each element of an array or object. Transform does not need an explicit starting point for the accumulator however.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var coords = { lat: 35.34534534534, long: 40.3552523434 };
_.transform( coords, function roundCoords(result, val, key){
return result["short"+key] = Math.round(val);
});
// returns { shortlat: 35, shortlong: 40 }
</code></pre>
       <p><strong>pick</strong></p> 
       <p><code>_.pick</code> can be handy when you need to turn a large object into a specific smaller one.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var userModel = { attributes: [ 'username' , 'email'] };
var customerData = { username: 'foo', email: "a@a.com", address:"123 Fine St", phone:"1234561231" }}

_.pick(customerData, _.(userModel);
// returns { username: 'foo', email: "a@a.com" }
</code></pre>
       <h4 id="4-1-4-chains-_-">4.1.4 Chains - _.()</h4> 
       <p>Chains allow you to put together all your lodash knowledge in a very powerful sequence of code. </p> 
       <p>Chains can be started with <code>_.chain(value)</code> or the shorthand <code>_(value)</code>.</p> 
       <p>The value is then substituted for the input value for each chainable function that supports it. You can see a list of what methods are and aren't supported <a href="https://lodash.com/docs#_">here</a>, as well as the native Array methods supported by lodash. </p> 
       <p>If you want your chain to return a value, not just manipulate provided arrays, you have to use <code>.value()</code> at the end of your chain. </p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var array = [1,2,3,4];
_(array)
    .map( function(val){ return val*val; } )
    .filter( function(val){ return ( val % 2 === 0) } )
    .reverse()
    .value();
// returns [16,4]
</code></pre>
       <p>Chains keep code concise and readable for easy maintenance. If, for debugging, or for detailed manipulation, you need to access an array in the middle of chaining, you can use the <code>_.tap</code> method.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var array = [1,2,3,4];
_(array)
    .tap(function(arr){ arr.splice(2,1,'three'); })
    .filter( function(val){ return ( val % 2 !== 0 )} )
    .value();
// returns [1, 'three']
</code></pre>
       <h3 id="4-2-async-https-github-com-caolan-async-">4.2 <a href="https://github.com/caolan/async">Async</a></h3> 
       <p>One of the major stumbling blocks for new people trying to use Node is learning the difference between asynchronous and blocking code.</p> 
       <p>A good rule of thumb that I use to teach new Noders:</p> 
       <blockquote> 
        <p>If it uses an <code>=</code>, it's blocking, and there is no need for async. If you find this particular calculation is taking too long, you may wish to consider a Worker. If a function uses a callback, <code>callFoo(bar, function(err, data)</code> it's asynchronous, and you may wish to manage this complexity with async. </p> 
       </blockquote> 
       <h4 id="4-2-1-arrays">4.2.1 Arrays</h4> 
       <p><strong>each</strong></p> 
       <p><code>async.each</code> applies an asynchronous function to each element in an array. </p> 
       <p>The final function is passed the combined results of the first function. This is a pattern you will see frequently throughout async.</p> 
       <p>(<code>each</code> and <code>filter</code> examples borrowed from the <a href="https://github.com/caolan/async#quick-examples">async docs</a>)</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>async.map(['file1','file2','file3'], fs.stat, function(err, results){
    // results is now an array of stats for each file
});
</code></pre>
       <p><strong>eachSeries</strong></p> 
       <p>Just like <code>each</code>, except this guarantees the order of operations will be the same as the parent array.</p> 
       <p><strong>filter</strong></p> 
       <p>Async.filter, just like in lodash, passes results if they return true for a testing function. In this case, <code>fs.exists</code> returns true for files that exist and false for files that do not.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>async.filter(['file1','file2','file3'], fs.exists, function(results){
    // results now equals an array of the existing files
});
</code></pre>
       <p><strong>map</strong></p> 
       <p>Async.map runs arrays through an asynchronous transformation function. If your database adapter does not support arrays, this may help get the results you need.</p> 
       <pre><code>async.map([1,2,3,4], function( id, cb ){
    db.find({ id: id }).success(function( result ){
        cb(null, result.name);
    })
}, function( err, names ){
    // names is a list of names that correspond to the id numbers provided
});
</code></pre>
       <h4 id="4-2-3-control-flow">4.2.3 Control flow</h4> 
       <p>Controlling the order of operations is a critically important part of working with Node, as you cannot rely on procedurally executed code to ensure completion. With great power comes great responsibility, so we move forth.</p> 
       <p>If any of the child functions throw an error, the operation will stop and the final function will handle the error. </p> 
       <p><strong>series / parallel</strong></p> 
       <p><code>async.series</code> and <code>async.parallel</code> are functionally identical in structure. They have an array or an object full of functions as the first parameter, and a final callback in the second. </p> 
       <p>With the array declaration while using series, it will determine the order which the asynchronous operations are executed. Using an object with series does not guarantee order of execution.</p> 
       <p>Unless there is a logical reason for to use series, most asynchronous operations should be done in parallel, as async will open a number of processes to execute the functions, and execution will happen very quickly. </p> 
       <p>Parallel/Series has two styles of declaration; object and array.</p> 
       <p><strong>Array declaration</strong></p> 
       <p>Will return the results in the order defined by the array, regardless of execution time.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>async.parallel([
    function(cb){
        db.find(1, cb);
    }, 
    function(cb){
        db.find(2, cb);
    }
    ], function( err, results ){
    // results = [ { id : 1 }, { id : 2 } ]
})
</code></pre>
       <p><strong>Object declaration</strong></p> 
       <p>Will return an keyed object in the final results.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>async.parallel({
    name: function(cb){
        db.findName(1, cb);
    },
    address: function(cb){
        db.findAddress(1, cb);
    }
    }, function(err, results){
        // results = { name: 'john smith', address: '123 red st'}
    });
</code></pre>
       <p><strong>whilst</strong></p> 
       <p><code>async.whilst</code> is <code>do-while</code>, asynchronous style, continuously executing until a conditional returns true.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var customerIds = [ 2, 3, 5, 7 ];
async.whilst(
  // as long as this function returns true
  function(){ return customerIds.length &gt; 0 },
  // do this function
  function(cb) { 
    Order.makeForCustomer(customerIds.pop(), cb);
  },
  // when the function returns false
  function(err) { }
);
</code></pre>
       <p><code>whilst</code> tests the function first, then runs the function. <code>doWhilst</code> runs the function first, and then does the test, note that the order of the functions are reversed, the first is the function, the second the conditional for <code>doWhilst</code></p> 
       <p><strong>until</strong></p> 
       <p><code>async.until</code> is the logical inverse of <code>whilst</code>, executing a function until the conditional returns false.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var songs = [];
async.until(
  function(){ songs.length &gt; 10 }),
  function(cb){ 
    Song.getRandomSong( function(err, song ){
      songs.push(song);
      cb();
    )}
  },
  function(err){}
);
</code></pre>
       <p><code>doWhilst</code> runs the test after the function, and the parameters are switched accordingly.</p> 
       <p><strong>queue</strong></p> 
       <p><code>async.queue</code> is a quick worker delegation system, for managing the execution of asynchronous functions with a dynamic approach. Useful for when you have a variable number of functions, or want to spin up a bunch of processes at once.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>var users = [ { name: 'John' }, { name: 'Carl' }, { name: 'Mike' }];

// this is where your tasks are executed
var userQueue = async.queue( function ( task, cb ){
  User.create({ name: task.name } , cb );
}, 2);
// concurrency : 2

// object declaration
userQueue.push({ name: 'Brandon' }, function(err){
  // when this is done, this is called
});

//array declaration
userQueue.push( users, function(err){
  // when these are done, this is called
});
</code></pre>
       <p>Queue can pause and resume, much like a stream, so you can have very fine grained control over execution. If you need more control, also examine <code>queuePriority</code>. </p> 
       <p><strong>waterfall</strong></p> 
       <p><code>async.waterfall</code> is a very useful function that will overtake your development world if you let it. It abstracts one of the most common asynchronous patterns, taking information from one callback and using it to inform another in a linear order.</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>async.waterfall([
  function getUser(cb){ 
    User.findOne(123, cb)
  },
  function getOrderForUser(user, cb) {
    Order.findOne({ userId: user.id }, function(err, order){
      cb(err, {user: user, order: order})
    });
  }],
  function putAddressOnUser(err, obj){
    obj.user.address = obj.order.address;
    obj.user.save();
  });
</code></pre>
       <p><strong>waterfall-queue</strong></p> 
       <p>Async opens the door for all sorts of design patterns to re-use throughout your projects. One that I find very enjoyable to use is waterfall-queue.</p> 
       <p>In the waterfall we build up a series of objects with database calls. In the queue, we save all the modified instances.</p> 
       <p>The following example assumes some sort of ORM like Mongoose or Waterline:</p> 
       <!-- code lang=javascript linenums=true --> 
       <pre><code>async.waterfall([
    function getCustomer(cb){
        Customer.find({name: custName}, function(err, c){
            cb(null, { customer: c })
        });
    },
    function getOrder(obj, cb){
        Order.find({id: orderId}, function(err,o){
            obj.order = o;
            cb(null, obj )
        });
    },
    function associate(obj, cb){
        obj.order.customer.add(obj.customer);
        obj.customer.order.add(obj.order);
        cb(null, obj)
    },
    function saveAllTheThings(obj, cb){
        var q = async.queue(function(task, cb){
            task.payload.save(cb);
        }, 5);

        q.drain = function(){
            cb();
        };

        _.forIn( obj, function( v, k ){
            q.push({payload: v}, function(){
                // console.log('done saving ', k);
          });
      });
    }
])
</code></pre>
       <h3 id="4-3-what-s-next-">4.3 What's next?</h3> 
       <p>A recently introduced module called <a href="http://highlandjs.org/">Highland</a> (by the creator of Async) seems to combine data manipulation with asynchronicity -- utilizing a stream-based approach -- and seems promising.</p> 
       <h2 id="5-conclusion">5 Conclusion</h2> 
       <p>We learned about the entry point to the Node ecosystem, <code>npm</code>. Now you can find any module for almost any use scenario to make your development faster, or educate yourself about how to approach a problem.</p> 
       <p>We scraped the surface of <code>lodash</code>, which will save you from writing hundreds of lines of repetitive code, countless iterators, loops and conditionals, and ultimately save the sanity of you and whoever has to maintain your code. </p> 
       <p>Finally, we dove into the most used parts of <code>async</code>, to help soften the Node learning curve and make it less painful to move from a procedural world to a functional one. </p> 
       <p>I hope reading this was as enjoyable as it was writing it, and if you'd like to engage in irreverent coding banter, I'm <a href="http://twitter.com/seancanton">@seancanton</a>, or we can AirPair!</p> 
      </post> 
      <div class="share"> 
       <div class="pw-widget pw-size-large pw-counter-show" pw:twitter-via="airpair"> 
        <a class="pw-button-twitter"></a>
        <a class="pw-button-facebook"></a>
        <a class="pw-button-linkedin"></a>
        <a class="pw-button-googleplus"></a> 
        <a class="pw-button-post"></a> 
       </div> 
      </div> 
      <div class="rail1CTA"> 
      </div> 
     </article> 
     <footer class="postfooter "> 
      <h5>Tagged under</h5> 
      <ul class="tags">
       <li><a href="/node.js" target="_self" title="Node.JS tutorials &amp; Node guides">node.js</a></li>
      </ul> 
      <div class="share-horizontal"> 
       <div class="pw-widget pw-counter-vertical" pw:twitter-via="airpair"> 
        <a class="pw-button-twitter pw-look-native"></a> 
        <a class="pw-button-googleplus pw-look-native"></a> 
        <a class="pw-button-facebook pw-look-native"></a> 
        <a class="pw-button-linkedin pw-look-native"></a> 
        <a class="pw-button-tumblr pw-look-native"></a> 
        <a class="pw-button-reddit pw-look-native"></a> 
        <a class="pw-button-email pw-look-native"></a> 
       </div> 
      </div> 
     </footer> 
     <div id="posts"> 
      <section id="allposts" class="similar"> 
       <h3 class="underline">Similar posts <a href="/software-experts" class="btn btn-sm btn-inverse" target="_self">All posts</a></h3> 
       <div class="similar ">
        <article class="posttile" itemscope itemtype="http://schema.org/BlogPosting" itemprop="blogPost"> 
         <a href="https://www.airpair.com/javascript/posts/the-chemical-wedding-of-rethinkdb-and-nodejs" title="The chemical wedding of RethinkDB and Node.js" target="_self" rel="bookmark"> 
          <header class="entry-header"> 
           <img class="entry-header-image" itemprop="image" src="https://pbs.twimg.com/media/CBiX5wZUYAE1VXc.png" align="left"> 
           <div class="glass"></div> 
           <p> <span class="entry-categories"> <em>node.js</em> <em>rethinkdb</em> </span> Discover the power of ReQL allied with Node.js! </p> 
          </header> 
          <div class="entry-content" itemprop="text"> 
           <h6><b>5</b> x</h6> 
           <ul class="stars">
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li></li>
           </ul> 
           <h2 class="entry-title" itemprop="headline">The chemical wedding of RethinkDB and Node.js</h2> 
           <span class="entry-author" itemprop="author" itemscope itemtype="http://schema.org/Person"> <span class="entry-author-name" itemprop="name">Alisson Cavalcante Agiani</span> </span> 
          </div> </a> 
         <footer class="entry-footer"> 
          <img class="entry-author-img" itemprop="image" src="https://avatars.githubusercontent.com/u/5043?v=3?s=50"> 
         </footer> 
        </article> 
        <article class="posttile" itemscope itemtype="http://schema.org/BlogPosting" itemprop="blogPost"> 
         <a href="https://www.airpair.com/javascript/posts/location-based-content-with-mean-and-contentful" title="Location Based Content With a MEAN Stack and Contentful" target="_self" rel="bookmark"> 
          <header class="entry-header"> 
           <img class="entry-header-image" itemprop="image" src="https://i.imgur.com/vj92vYS.png" align="left"> 
           <div class="glass"></div> 
           <p> <span class="entry-categories"> <em>javascript</em> <em>node.js</em> <em>html</em> <em>angularjs</em> </span> An insight into how Contentful and mapping solutions were used to build core location based features in the new Leeds Living site by We Are Living. </p> 
          </header> 
          <div class="entry-content" itemprop="text"> 
           <h6><b>14</b> x</h6> 
           <ul class="stars">
            <li></li>
            <li></li>
            <li></li>
            <li></li>
            <li class="half"></li>
           </ul> 
           <h2 class="entry-title" itemprop="headline">Location Based Content With a MEAN Stack and Contentful</h2> 
           <span class="entry-author" itemprop="author" itemscope itemtype="http://schema.org/Person"> <span class="entry-author-name" itemprop="name">Rich Cooper</span> </span> 
          </div> </a> 
         <footer class="entry-footer"> 
          <img class="entry-author-img" itemprop="image" src="https://avatars.githubusercontent.com/u/11181309?v=3?s=50"> 
         </footer> 
        </article> 
        <article class="posttile" itemscope itemtype="http://schema.org/BlogPosting" itemprop="blogPost"> 
         <a href="https://www.airpair.com/angularjs/posts/travel-app-in-2-hours" title="Travel app in 2 hours: Sabre, LumX, NodeJS and Angular" target="_self" rel="bookmark"> 
          <header class="entry-header"> 
           <img class="entry-header-image" itemprop="image" src="https://www.anony.ws/i/2015/05/12/getlost.png" align="left"> 
           <div class="glass"></div> 
           <p> <span class="entry-categories"> <em>angularjs</em> <em>node.js</em> <em>express</em> <em>sabre</em> <em>lumx</em> <em>amazon-ec2</em> <em>git</em> <em>github</em> </span> Follow along step by step and see how I build a basic travel web app using Sabre APIs, LumX, NodeJS and AngularJS in just 2 hours! </p> 
          </header> 
          <div class="entry-content" itemprop="text"> 
           <h6><b>12</b> x</h6> 
           <ul class="stars">
            <li></li>
            <li></li>
            <li></li>
            <li></li>
           </ul> 
           <h2 class="entry-title" itemprop="headline">Travel app in 2 hours: Sabre, LumX, NodeJS and Angular</h2> 
           <span class="entry-author" itemprop="author" itemscope itemtype="http://schema.org/Person"> <span class="entry-author-name" itemprop="name">Arun Rajappa</span> </span> 
          </div> </a> 
         <footer class="entry-footer"> 
          <img class="entry-author-img" itemprop="image" src="https://0.gravatar.com/avatar/9a69cfaaf977fa8b6a5486ecaaae7c5c?s=50"> 
         </footer> 
        </article> 
       </div> 
      </section> 
     </div> 
    </div> 
   </main> 
  </div> 
  <script type="text/javascript" src="https://static.airpair.com/js/app-bf30f0b10d.js"></script> 
  <script type="text/javascript">

  function trackpageview() { ga('send', 'pageview') }

  window.pageData = {
    session: {"authenticated":false,"id":"9dwP9HsFEyyW6iDnAnm_FcoYlpMCBpLq"}, 
  }

  </script> 
  <script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  
    ga('create', 'UA-40569487-1', 'auto');
    trackpageview();
  
  </script>   
 </body>
</html>