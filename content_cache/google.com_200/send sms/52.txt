<!doctype html>
<html lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:fb="https://www.facebook.com/2008/fbml" itemscope itemtype="http://schema.org/Product" ng-app="hub">
 <head prefix="og: http://ogp.me/ns# nodejsexpressdemo: http://ogp.me/ns/apps/nodejsexpressdemo#">
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <meta name="readme-deploy" content="f06f25ce538e6c770643d149dcf11348ff4e30bc">
  <title>Send SMS Messages · Dynmark</title>
  <meta http-equiv="Content-type" content="text/html;charset=UTF-8">
  <meta name="description" content="Sending text messages via the REST API">
  <link href="https://files.readme.io/okLtczzWRnqrlJ9fh7n1_favicon.ico" rel="shortcut icon" type="image/x-icon">
  <meta property="og:title" content="Send SMS Messages · Dynmark">
  <meta property="og:description" content="Sending text messages via the REST API">
  <!-- Removed due to XSS-->
  <!--meta(property="og:url", content=og('url'))-->
  <meta property="og:image" content="https://files.readme.io/ESwclQvpTTKaD6QY6Gzh_Dynmark.png">
  <meta property="og:site_name" content="Dynmark">
  <meta id="config-proxy-url" content="https://proxy.readme.io/proxy">
  <link rel="canonical" href="http://docs.dynmark.com/docs/qs-node-send-sms-messages">
  <link rel="alternate" type="application/rss+xml" title="RSS Feed for Dynmark" href="/blog.rss">
  <!-- Application styles-->
  <link rel="stylesheet" href="https://d2sl9eawlu179j.cloudfront.net/css/bundle-hub.css?1505513482963">
  <!--if lt IE 9script(src="http://html5shim.googlecode.com/svn/trunk/html5.js")
-->
  <script>var is_hub = true;
var is_hub_edit = false;
var is_hub2 = false;

</script>
  <script src="https://d2sl9eawlu179j.cloudfront.net/js/bundle-hub1.js?1505513482963"></script>
  <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-52479696-1', 'auto');
ga('send', 'pageview');
</script>
  <script>ga('create', 'UA-4344975-13', 'auto', {'name': 'custom'});
ga('custom.send', 'pageview');
</script>
  <link href="//fonts.googleapis.com/css?family=Open+Sans:400:sans-serif|Open+Sans:400:sans-serif" rel="stylesheet" type="text/css">
  <style>.theme-line header {  border-bottom-color: #222222;}.theme-line header a.btn {  background-color: #222222;}.theme-line header a.btn:hover {  background-color: #000000;}.theme-line header .navbar-nav a:hover ,.theme-line header .navbar-nav .open > a {  color: #222222;}.theme-line header .navbar-nav .tt-cursor {  background-color: #222222;}.theme-line .navbar-nav .active a {  font-weight: bold;  color: #27AAE3;}.theme-line .navbar-nav .active a:hover {  color: #136b91;}.theme-line .main-links .links a:hover {  color: #27AAE3;}.theme-line .main-content a {  color: #27AAE3;}.theme-line .main-content a:hover {  color: #136b91;}.theme-line .sidebar-nav ul li a.active:before {  background-color: #27AAE3;}.theme-line .sidebar-nav ul li a.active {  color: #27AAE3;}.theme-line .sidebar-nav ul li a:hover,.theme-line .sidebar-nav ul li a.active:hover {  color: #136b91;}.theme-line .btn-primary {  background-color: #27AAE3;}.theme-line .btn-primary:hover {  background-color: #136b91;}.theme-line .main-content .nav-horizontal a.active {  border-color: #27AAE3;  color: #27AAE3;}.theme-line .main-content .nav-horizontal a:hover {  color: #136b91;}.theme-line .main-content .nav-horizontal a.active:hover {  border-color: #136b91;}.theme-line header .navbar-nav a.active ,.theme-line #versions-list li a:hover strong,.theme-line #versions-list li a.active .current,.theme-line #versions-list li a:active .current {  color: #27AAE3;}.theme-line.body-threes .section-right .threes-nav .btn-default:hover,.theme-line.page-docs.body-threes .section-right .threes-nav .pull-right a:hover {  color: #27AAE3;  border-color: #27AAE3;}.theme-solid header {  background-color: #222222;}.theme-solid.header-custom header a.btn {  background-color: #000000;}.theme-solid.header-custom header a.btn:hover {  background-color: #000000;}.theme-solid header .navbar-nav .dropdown-menu a:hover {  color: #27AAE3;}.theme-line.lumosity-light header .navbar-nav a:hover,.theme-line.lumosity-light header .navbar-nav .open > a {  color: #27AAE3;}.theme-line.lumosity-light header a.btn {  background-color: #27AAE3;}.theme-line.lumosity-light header a.btn:hover {  background-color: #136b91;}.theme-solid .main-links .links a:hover {  color: #27AAE3;}.theme-solid .main-content a {  color: #27AAE3;}.theme-solid .main-content a:hover {  color: #136b91;}.theme-solid .sidebar-nav ul li a.active:before {  background-color: #27AAE3;}.theme-solid .sidebar-nav ul li a.active {  color: #27AAE3;}.theme-solid .sidebar-nav ul li a:hover,.theme-solid .sidebar-nav ul li a.active:hover {  color: #136b91;}.theme-solid .btn-primary {  background-color: #27AAE3;}.theme-solid .btn-primary:hover {  background-color: #136b91;}.theme-solid .main-content .nav-horizontal a.active {  border-color: #27AAE3;  color: #27AAE3;}.theme-solid .main-content .nav-horizontal a:hover {  color: #136b91;}.theme-solid .main-content .nav-horizontal a.active:hover {  border-color: #136b91;}.theme-solid header .navbar-nav a.active ,.theme-solid #versions-list li a:hover strong,.theme-solid #versions-list li a.active .current,.theme-solid #versions-list li a:active .current {  color: #27AAE3;}.theme-solid.body-threes .section-right .threes-nav .btn-default:hover,.theme-solid.page-docs.body-threes .section-right .threes-nav .pull-right a:hover {  color: #27AAE3;  border-color: #27AAE3;}.theme-solid.header-gradient header {  background: -moz-linear-gradient(top, #222222, #000000);  background: -webkit-gradient(linear, left top, #222222, #000000);  background: -webkit-linear-gradient(top, #222222, #000000);  background: linear-gradient(to bottom, #222222, #000000);}.theme-solid.header-custom .header {  background-image: url("undefined");  background-position: center center;}body {  font-weight: 400;font-family: Open Sans, sans-serif;;}h1, h2, h3, h4, h5, h6 {  font-weight: 400;font-family: Open Sans, sans-serif;;}.submit-vote.submit-vote-parent.voted a.submit-vote-button,.submit-vote.submit-vote-parent a.submit-vote-button:hover {  background-color: #27AAE3;}div.submit-vote.submit-vote-parent.voted a.submit-vote-button:hover {  background-color: #136b91;}a,.link .title {  color: #27AAE3;}a:hover,.link:hover .title {  color: #136b91;}.header h1.navbar-brand a {  background-image: url("https://files.readme.io/imGsKdazQS6uYlWJTUc3_dynmark-header-logo.png")}.header h1.navbar-brand {  width: 159px;}
</style>
  <style>.theme-line .sidebar-nav ul li a, .theme-solid .sidebar-nav ul li a {
    color: #555;
}
.theme-line .sidebar-nav h4, .theme-solid .sidebar-nav h4 {
    color: #888;
}
.nav > li
{
    font-size: 15px;
    text-transform: uppercase;
    letter-spacing: 2px;
}
.glossary dt {
	clear: both;
	position: relative;
	width: 33%;
	padding: 10px 5px;
}
.glossary dd {
	margin-left: 38%;
	padding: 10px 5px;
}
.glossary:before {
	content: "";
	width: 1px;
	position: absolute;
	border-left: 1px solid #dfdfdf;
	top: 0;
	bottom: 0;
	left: 36%;
}
.glossary dt:before {
	content: "";
	width: 30px;
	position: absolute;
	border-top: 1px solid #dfdfdf;
	top: -5px;
	right: -15px;
}
.glossary dt:after {
	content: "";
	width: 5px;
	height: 5px;
	background: #333;
	border: 1px solid #dfdfdf;
	position: absolute;
	border-radius: 6px;
	top: -8px;
	right: -4px;
}
code,
kbd,
pre,
samp {
  font-family: Menlo, Monaco, Consolas, "Courier New", monospace;
}
code {
  padding: 2px 4px;
  font-size: 90%;
  color: #c7254e;
  background-color: #f9f2f4;
  border-radius: 4px;
}
kbd {
  padding: 2px 4px;
  font-size: 90%;
  color: #fff;
  background-color: #333;
  border-radius: 3px;
  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);
          box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);
}
kbd kbd {
  padding: 0;
  font-size: 100%;
  font-weight: bold;
  -webkit-box-shadow: none;
          box-shadow: none;
}
pre {
  display: block;
  padding: 9.5px;
  margin: 0 0 10px;
  font-size: 13px;
  line-height: 1.42857143;
  color: #333;
  word-break: break-all;
  word-wrap: break-word;
  background-color: #f5f5f5;
  border: 1px solid #ccc;
  border-radius: 4px;
}
pre code {
  padding: 0;
  font-size: inherit;
  color: inherit;
  white-space: pre-wrap;
  background-color: transparent;
  border-radius: 0;
}
.pre-scrollable {
  max-height: 340px;
  overflow-y: scroll;
}
.c-danger, .c-primary, .c-success, .c-warning, .c-info {
  font-weight: bold;
}
.c-danger
{
    color: #e51937;
}
.c-primary
{
    color: #1b75bb;
}
.c-success
{
    color: #5cb85c;
}
.c-purple
{
    color: #652f8e;
}
.c-warning
{
    color: #f0ad4e;
}
.c-info
{
    color: #278FE0;
}</style>
 </head>
 <body ng-controller="Root" class="layout page-docs body-none theme-solid header-solid header-bg-size-auto header-bg-pos-tl header-overlay-triangles lumosity-dark undefined theme-threes">
  <div class="wrapper">
   <header id="header" class="header">
    <div class="container">
     <h1 class="navbar-brand"><a href="/">Dynmark</a></h1>
     <div class="navbar-collapse collapse">
      <div id="project-info">
       {"id":"568fce2a04440a1700e4cb47","name":"Dynmark","subdomain":"dynmark","versions":[{"_id":"568fce2b04440a1700e4cb4a","releaseDate":"2016-01-08T14:56:43.101Z","is_deprecated":false,"is_hidden":false,"is_beta":false,"is_stable":true,"codename":"","version_clean":"1.0.0","version":"1.0"},{"_id":"56efcd002498ce190088f9bd","releaseDate":"2016-03-21T10:29:20.131Z","is_deprecated":false,"is_hidden":false,"is_beta":false,"is_stable":false,"codename":"Reseller","version_clean":"1.1.0","version":"1.1"}],"doc_slug":"","current_version":{"version_clean":"1.0.0","version":"1.0"},"oauth":{"enabled":false},"api":{"name":"","url":"https://services.dynmark.com","contenttype":"json","auth":"basic","explorer":false,"proxyEnabled":true,"jwt":false,"authextra":[],"headers":[],"object_definitions":[]},"apiAlt":[{"_id":"56a26437eedde7170038f3ce","object_definitions":[],"headers":[],"authextra":[],"jwt":false,"proxyEnabled":true,"explorer":true,"auth":"","contenttype":"form","url":"","name":"SOAP"}],"plan_details":{"name":"Developer Hub","is_active":true,"cost":59,"versions":10000,"custom_domain":true,"custom_pages":true,"whitelabel":false,"errors":false,"password":true,"landing_page":true,"themebuilder":true,"stylesheet":true,"javascript":false,"html":true,"extra_html":false,"admins":true,"apps":true},"apps":{"enabled":false},"intercom":"","intercom_secure_emailonly":false,"flags":{"allow_hub2":true,"hub2":false,"migrationRun":false,"oauth":false,"swagger":false,"correctnewlines":false,"speedyRender":false,"allowXFrame":false,"jwt":false,"hideGoogleAnalytics":false,"stripe":false,"cacheEnabled":true,"autoSslGeneration":true},"asset_base_url":""}
      </div>
      <ul class="nav navbar-nav">
       <li class="active"><a href="/docs" title="Documentation">Documentation</a></li>
       <li><a href="https://dynmark.zendesk.com/hc/en-us">Help</a></li>
      </ul>
      <ul class="nav navbar-nav pull-right">
       <li>
        <div class="searchbox">
         <div class="fa fa-search"></div>
         <input type="text" placeholder="Search" class="typeahead">
        </div></li>
      </ul>
     </div>
    </div>
   </header>
   <div class="container body-container">
    <div class="main-content">
     <div class="main-head">
      <div ng-controller="ShowPage">
       <div scope-scoop>
        <pre var="page" ng-non-bindable>{"_id":"56b201173b6f690d00bdb68e","project":"568fce2a04440a1700e4cb47","category":{"_id":"56b200c6f48f270d00e0de70","pages":["56b22b962d96461700599228","56b3240705daaa2300363143","56b33a9978a12121009006a1","56b33ab2af176a0d00964ce1","56cae5309f4ae20b00644dca","56d412878001e30b00896dd2","56d6c28947f18a2d0088d620","56d87228a957fb1500765a63"],"project":"568fce2a04440a1700e4cb47","version":"568fce2b04440a1700e4cb4a","__v":8,"sync":{"url":"","isSync":false},"reference":false,"createdAt":"2016-02-03T13:29:42.367Z","from_sync":false,"order":2,"slug":"node","title":"Node.js Quickstarts"},"user":"55116f88e2990b0d00fb0552","version":{"_id":"568fce2b04440a1700e4cb4a","project":"568fce2a04440a1700e4cb47","__v":20,"createdAt":"2016-01-08T14:56:43.101Z","releaseDate":"2016-01-08T14:56:43.101Z","categories":["568fce2b04440a1700e4cb4b","568fd1b8b700ce0d002f4b1c","568fd23804440a1700e4cb5b","568fd2444719c119002ce5d8","568ff21204440a1700e4cbc1","5693732c8aa8040d009f2c28","5693738393445b0d00abdad0","5693740093445b0d00abdad1","56937445974aaa0d001ca699","5693b82173f48f0d0075c90d","5694c4cd1005590d0062cb25","569f854466a5640d00efa54c","56a264cdd15dd70d008d825b","56aa56bf318e6c1700a19ddb","56b0e6347ae4550d000627bd","56b200c0f48f270d00e0de6f","56b200c6f48f270d00e0de70","56b22a9665ddf50d0076ba40","56e92ef71996862200fd7f42","574d6577fb835c0e00ca316a"],"is_deprecated":false,"is_hidden":false,"is_beta":false,"is_stable":true,"codename":"","version_clean":"1.0.0","version":"1.0"},"__v":12,"parentDoc":null,"updates":[],"next":{"pages":[],"description":""},"createdAt":"2016-02-03T13:31:03.865Z","link_external":false,"link_url":"","githubsync":"","sync_unique":"","hidden":false,"api":{"settings":"","results":{"codes":[]},"auth":"required","params":[],"url":""},"isReference":false,"order":0,"body":"[block:callout]\n{\n  \"type\": \"info\",\n  \"title\": \"\",\n  \"body\": \"Full source for these quickstarts can be downloaded from http://download.dynmark.com/Files/API/Quickstart/Node.zip\"\n}\n[/block]\n##Prerequisites\nYou'll need a Dynmark account to be able to send messages. You can use a trial account to send a limited number of free messages for testing.\n\n##Hello World via SMS\nWe're going to create a simple Node.js based web application that sends a hello message when the user lands on a page. We'll make use of the Express package to handle the site framework and the Request package to handle the REST call to the Dynmark API.\n\n1. Create a new Node site\n2. Import *express* and *request-promise* packages using npm\n3. Create sendMessage.js containing a single function \n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"var express = require('express');\\nvar request = require('request-promise');\\nvar router = express.Router();\\n\\nrouter.get('/sendMessage', function(req, res, next) {\\n    request({\\n        method: 'POST',\\n        url: 'https://services.dynmark.com/webapi/message/send',\\n        auth: {\\n            'user': ':::at:::Username@',\\n            'pass': '@Password@'\\n        },\\n        timeout: 130000,\\n        json: true,\\n        body: [{\\n            from: \\\"Example\\\",\\n            to: \\\"447700900000\\\",\\n            body: \\\"Hello, this is a test message\\\",\\n            deliveryStatusUrl: \\\"https://inbound.example.com/SmsReceipts\\\",\\n            clientRef: \\\"msg-\\\" + (++messageId).toString()\\n        }]\\n    })\\n    .then(function(body) {\\n      \\tconsole.log(body);\\n    });\\n});\\n\\nmodule.exports = router;\\n\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\nLets look at the details:\n1. You'll need your Dynmark username and password to authenticate calls.\n2. We use the [Request-Promise](https://www.npmjs.com/package/request-promise) package to send our REST calls to the Dynmark API. You could alternatively use Node's native http.request.\n3. We create an Express route that accepts HTTP GET\n4. We define an SMS message request containing the bare minimum details to send an SMS.\n4. Results are output to the console\n\nUsers often make mistakes entering their details, so we check the HTTP status for common failures and for  Let's add some code to check the response from the API for validation failures:\n\n1. Change the *request* call to check results and add code to check for HTTP 200 OK. This shows that the API call was in a valid format.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"    .then(function(body) {\\n        if (body[0].successful)\\n        {\\n            res.write(\\\"&lt;div&gt;We sent you a message.&lt;/div&gt;\\\")\\n        }\\n        else\\n        {\\n            res.write(\\\"&lt;div&gt;Sorry, we couldn't sent you a message.&lt;/div&gt;\\\");\\n            if (body[0].validationFailures.some(r =&gt; r.failureCode == \\\"ToInvalid\\\"))\\n            {\\n                res.write(\\\"&lt;div&gt;Your phone number doesn't look like a valid number.&lt;/div&gt;\\\");\\n            }\\n        }\\n        res.end();\\n    })\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]\n3. We should also check for HTTP 401 Unauthorised to ensure we're using the right credentials, and since we're using an anonymous type to build the request, HTTP 400 Bad Request to ensure we've submitted a request with no typos or incorrect property names.\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"    .catch(function(err)\\n    {\\n        if (err.statusCode == 401)\\n        {\\n            res.write(\\\"&lt;div&gt;Invalid credentials&lt;/div&gt;\\\")\\n        }\\n        else if (err.statusCode == 400)\\n        {\\n            res.write(\\\"&lt;div&gt;Bad request format&lt;/div&gt;\\\")\\n        }\\n        else\\n        {\\n            res.write(\\\"&lt;div&gt;Non success response&lt;/div&gt;\\\")\\n        }\\n        res.end();\\n    });\",\n      \"language\": \"javascript\"\n    }\n  ]\n}\n[/block]","excerpt":"Sending text messages via the REST API","slug":"qs-node-send-sms-messages","type":"basic","title":"Send SMS Messages"}</pre>
       </div>
       <div class="row">
        <div class="col-sm-3 border-right section-left">
         <div saveheight="1" class="sidebar-nav">
          <h4>Dynmark Docs</h4>
          <ul>
           <li><a href="/docs/dynmark-docs"><span>Home</span></a></li>
          </ul>
          <h4>C# Quickstarts</h4>
          <ul>
           <li><a href="/docs/qs-cs-send-sms-messages"><span>Send SMS Messages</span></a></li>
           <li><a href="/docs/qs-cs-receive-sms-receipts"><span>Receive SMS Receipts</span></a></li>
           <li><a href="/docs/qs-cs-receive-sms-messages"><span>Receive SMS Messages</span></a></li>
           <li><a href="/docs/qs-cs-validate-phone-numbers"><span>Validate Phone Numbers</span></a></li>
           <li><a href="/docs/qs-cs-verify"><span>Use Verify to check mobile number ownership</span></a></li>
          </ul>
          <h4>Node.js Quickstarts</h4>
          <ul>
           <li><a href="/docs/qs-node-send-sms-messages" class="active"><span>Send SMS Messages</span></a></li>
           <li><a href="/docs/qs-node-receive-sms-receipts"><span>Receive SMS Receipts</span></a></li>
           <li><a href="/docs/qs-node-receive-sms-messages"><span>Receive SMS Messages</span></a></li>
           <li><a href="/docs/qs-node-validate-phone-numbers"><span>Validate Phone Numbers</span></a></li>
           <li><a href="/docs/qs-node-verify"><span>Use Verify to check mobile number ownership</span></a></li>
          </ul>
          <h4>Java Quickstarts</h4>
          <ul>
           <li><a href="/docs/qs-java-send-sms-messages"><span>Send SMS Messages</span></a></li>
           <li><a href="/docs/qs-java-receive-sms-receipts"><span>Receive SMS Receipts</span></a></li>
           <li><a href="/docs/qs-java-receive-sms-messages"><span>Receive SMS Messages</span></a></li>
           <li><a href="/docs/qs-java-validate-phone-numbers"><span>Validate Phone Numbers</span></a></li>
           <li><a href="/docs/qs-java-verify"><span>Use Verify to check mobile number ownership</span></a></li>
          </ul>
          <h4>PHP Quickstarts</h4>
          <ul>
           <li><a href="/docs/qs-php-send-sms-messages"><span>Send SMS Messages</span></a></li>
           <li><a href="/docs/qs-php-receive-sms-receipts"><span>Receive SMS Receipts</span></a></li>
           <li><a href="/docs/qs-php-receive-sms-messages"><span>Receive SMS Messages</span></a></li>
           <li><a href="/docs/qs-php-validate-phone-numbers"><span>Validate Phone Numbers</span></a></li>
           <li><a href="/docs/qs-php-verify"><span>Use Verify to check mobile number ownership</span></a></li>
          </ul>
          <h4>REST API</h4>
          <ul>
           <li><a href="/docs/rest-messaging-overview"><span>REST Messaging API</span></a></li>
           <li><a href="/docs/rest-messaging-send-messages"><span title="fn" class="pg-type type-fn">fn</span><span>Send Messages</span></a></li>
           <li><a href="/docs/rest-messaging-error-codes"><span>Error Codes</span></a></li>
           <li><a href="/docs/rest-pnv-overview"><span>Phone Number Validation</span></a></li>
           <li><a href="/docs/rest-pnv-validatenumber"><span title="fn" class="pg-type type-fn">fn</span><span>ValidateNumber</span></a></li>
           <li><a href="/docs/rest-pnv-validatenumbers"><span title="fn" class="pg-type type-fn">fn</span><span>ValidateNumbers</span></a></li>
           <li><a href="/docs/rest-pnv-validatenumbersforusernames"><span title="fn" class="pg-type type-fn">fn</span><span>ValidateNumbersForUserNames</span></a></li>
           <li><a href="/docs/rest-pnv-number-status-values"><span>Number Status Values</span></a></li>
           <li><a href="/docs/rest-verify-api"><span>REST Verify API</span></a></li>
           <li><a href="/docs/rest-verify-create"><span title="fn" class="pg-type type-fn">fn</span><span>Create and Send Code</span></a></li>
           <li><a href="/docs/rest-verify-validate"><span title="fn" class="pg-type type-fn">fn</span><span>Validate</span></a></li>
           <li><a href="/docs/rest-verify-error-codes"><span>Error Codes</span></a></li>
          </ul>
          <h4>HTTP API</h4>
          <ul>
           <li><a href="/docs/http-messaging-overview"><span>Overview</span></a></li>
           <li><a href="/docs/http-messaging-sendmessage"><span title="get" class="pg-type type-get">get</span><span>SendMessage</span></a></li>
           <li><a href="/docs/http-messaging-sendmessage-post"><span title="post" class="pg-type type-post">post</span><span>SendMessage</span></a></li>
          </ul>
          <h4>SOAP API</h4>
          <ul>
           <li><a href="/docs/soap-messaging-overview"><span>SOAP Messaging API</span></a></li>
           <li><a href="/docs/soap-messaging-sendmessagecollection"><span title="fn" class="pg-type type-fn">fn</span><span>SendMessageCollection</span></a></li>
           <li><a href="/docs/pnv-soap-overview"><span>Phone Number Validation</span></a></li>
           <li><a href="/docs/soap-pnv-validatenumber"><span title="fn" class="pg-type type-fn">fn</span><span>ValidateNumber</span></a></li>
           <li><a href="/docs/soap-pnv-validatenumbers"><span title="fn" class="pg-type type-fn">fn</span><span>ValidateNumbers</span></a></li>
           <li><a href="/docs/soap-pnv-validatenumbersforusernames"><span title="fn" class="pg-type type-fn">fn</span><span>ValidateNumbersForUserNames</span></a></li>
           <li><a href="/docs/soap-polling-overview"><span>Polling APIs</span></a></li>
           <li><a href="/docs/soap-polling-pollmessagereceipts"><span title="fn" class="pg-type type-fn">fn</span><span>PollMessageReceipts</span></a></li>
           <li><a href="/docs/soap-polling-pollinboundmessages"><span title="fn" class="pg-type type-fn">fn</span><span>PollInboundMessages</span></a></li>
           <li><a href="/docs/soap-polling-pollclickdetails"><span title="fn" class="pg-type type-fn">fn</span><span>PollClickDetails</span></a></li>
          </ul>
          <h4>Forwarding</h4>
          <ul>
           <li><a href="/docs/receipt-forwarding"><span>Receipt Forwarding</span></a></li>
           <li><a href="/docs/inbound-message-forwarding"><span>Inbound Message Forwarding</span></a></li>
           <li><a href="/docs/tracking-converstations"><span>Tracking Conversations</span></a></li>
           <li><a href="/docs/url-click-forwarding"><span>URL Click Forwarding</span></a></li>
           <li><a href="/docs/forwarding-retries"><span>Forwarding Retries</span></a></li>
          </ul>
          <h4>Email to SMS</h4>
          <ul>
           <li><a href="/docs/registering-email-addresses"><span>Registering email addresses</span></a></li>
           <li><a href="/docs/composing-an-email"><span>Composing an email</span></a></li>
          </ul>
          <h4>Reference</h4>
          <ul>
           <li><a href="/docs/common-data-types"><span>Common Data Types</span></a></li>
           <li><a href="/docs/message-encoding"><span>Message Encoding</span></a></li>
           <li><a href="/docs/message-segmentation"><span>Message Segmentation</span></a></li>
           <li><a href="/docs/message-statuses"><span>Message Statuses</span></a></li>
           <li><a href="/docs/number-status"><span>Phone Number Statuses</span></a></li>
          </ul>
          <h4>3rd Party Integration</h4>
          <ul>
           <li><a href="/docs/zapier"><span>Zapier</span></a></li>
          </ul>
         </div>
        </div>
        <div class="col-sm-9 border-left section-right">
         <div class="docs-content">
          <div class="docs-header">
           <nav class="pull-right">
            <a href="https://dash.readme.io/project/dynmark/v1.0/docs/qs-node-send-sms-messages" require-login ng-show="u.user.is_admin" ng-cloak class="suggest">
             <div class="fa fa-pencil fa-right"></div>Edit this Page</a>
            <a href="/docs/qs-node-send-sms-messages/edit" require-login ng-hide="u.user.is_admin" class="suggest">
             <div class="fa fa-pencil fa-right"></div>Suggest Edits</a>
           </nav>
           <h1>Send SMS Messages</h1>
           <div marked>
            Sending text messages via the REST API
           </div>
           <hr>
          </div>
          <div class="docs-body">
           <content ng-cloak class="content">
            [block:callout] { "type": "info", "title": "", "body": "Full source for these quickstarts can be downloaded from http://download.dynmark.com/Files/API/Quickstart/Node.zip" } [/block] ##Prerequisites You'll need a Dynmark account to be able to send messages. You can use a trial account to send a limited number of free messages for testing. ##Hello World via SMS We're going to create a simple Node.js based web application that sends a hello message when the user lands on a page. We'll make use of the Express package to handle the site framework and the Request package to handle the REST call to the Dynmark API. 1. Create a new Node site 2. Import *express* and *request-promise* packages using npm 3. Create sendMessage.js containing a single function [block:code] { "codes": [ { "code": "var express = require('express');\nvar request = require('request-promise');\nvar router = express.Router();\n\nrouter.get('/sendMessage', function(req, res, next) {\n request({\n method: 'POST',\n url: 'https://services.dynmark.com/webapi/message/send',\n auth: {\n 'user': '@Username@',\n 'pass': '@Password@'\n },\n timeout: 130000,\n json: true,\n body: [{\n from: \"Example\",\n to: \"447700900000\",\n body: \"Hello, this is a test message\",\n deliveryStatusUrl: \"https://inbound.example.com/SmsReceipts\",\n clientRef: \"msg-\" + (++messageId).toString()\n }]\n })\n .then(function(body) {\n \tconsole.log(body);\n });\n});\n\nmodule.exports = router;\n", "language": "javascript" } ] } [/block] Lets look at the details: 1. You'll need your Dynmark username and password to authenticate calls. 2. We use the [Request-Promise](https://www.npmjs.com/package/request-promise) package to send our REST calls to the Dynmark API. You could alternatively use Node's native http.request. 3. We create an Express route that accepts HTTP GET 4. We define an SMS message request containing the bare minimum details to send an SMS. 4. Results are output to the console Users often make mistakes entering their details, so we check the HTTP status for common failures and for Let's add some code to check the response from the API for validation failures: 1. Change the *request* call to check results and add code to check for HTTP 200 OK. This shows that the API call was in a valid format. [block:code] { "codes": [ { "code": " .then(function(body) {\n if (body[0].successful)\n {\n res.write(\"&lt;div&gt;We sent you a message.&lt;/div&gt;\")\n }\n else\n {\n res.write(\"&lt;div&gt;Sorry, we couldn't sent you a message.&lt;/div&gt;\");\n if (body[0].validationFailures.some(r =&gt; r.failureCode == \"ToInvalid\"))\n {\n res.write(\"&lt;div&gt;Your phone number doesn't look like a valid number.&lt;/div&gt;\");\n }\n }\n res.end();\n })", "language": "javascript" } ] } [/block] 3. We should also check for HTTP 401 Unauthorised to ensure we're using the right credentials, and since we're using an anonymous type to build the request, HTTP 400 Bad Request to ensure we've submitted a request with no typos or incorrect property names. [block:code] { "codes": [ { "code": " .catch(function(err)\n {\n if (err.statusCode == 401)\n {\n res.write(\"&lt;div&gt;Invalid credentials&lt;/div&gt;\")\n }\n else if (err.statusCode == 400)\n {\n res.write(\"&lt;div&gt;Bad request format&lt;/div&gt;\")\n }\n else\n {\n res.write(\"&lt;div&gt;Non success response&lt;/div&gt;\")\n }\n res.end();\n });", "language": "javascript" } ] } [/block]
           </content>
          </div>
         </div>
        </div>
       </div>
      </div>
     </div>
    </div>
   </div>
  </div>
  <!-- Include partials-->
  <div>
   <script type="text/ng-template" id="content"><div class="block-content"><div class="blocks-parent"><div ng-repeat="(k, section) in sections" data-pos="{{ k }}" ng-if="is_sidebar === undefined || is_sidebar == !!section.sidebar" class="block section"><div ng-switch="section.type"><div ng-switch-when="textarea"><div marked="section.text"></div></div><!-- TODO: Make this generic using 'default' --><div ng-switch-when="api-header"><div type="section.type" ng-model="section.data" class="block-api-header"></div></div><div ng-switch-when="code"><div type="section.type" ng-model="section.data" class="block-code"></div></div><div ng-switch-when="image"><div type="section.type" ng-model="section.data" class="block-image"></div></div><div ng-switch-when="embed"><div type="section.type" ng-model="section.data" class="block-embed"></div></div><div ng-switch-when="callout"><div type="section.type" ng-model="section.data" class="block-callout"></div></div><div ng-switch-when="parameters"><div type="section.type" ng-model="section.data" class="block-parameters"></div></div><div ng-switch-when="html"><div type="section.type" ng-model="section.data" class="block-html"></div></div></div></div></div></div></script>
  </div>
  <div>
   <script type="text/ng-template" id="blocks/api-header/show"><div class="block-display-api-header">
  <!--
  <div class="picker-offset">
    <input type-picker ng-cloak ng-model="doc.type">
  </div>
  -->
  <h2 id="{{ slugify(data.title) }}">
    <span ng-show="data.type && data.type != 'basic'" class="pg-type-big pg-type type-{{data.type}}">{{data.type}}</span>
    {{ data.title }}
    <a class="fa fa-anchor fa-left" href="#{{ slugify(data.title) }}"></a>
  </h2>
  <hr>
</div>
</script>
   <script type="text/ng-template" id="blocks/callout/show"><div class="block-show-callout {{ !data.title? 'no-title' : ''}} type-{{data.type}}">
  <h3>
    <i class="fa fa-info-circle {{data.type == 'info' ? 'on' : ''}}" title="Info"></i>
    <i class="fa fa-exclamation-circle {{data.type == 'warning' ? 'on' : ''}}" title="Warning"></i>
    <i class="fa fa-exclamation-triangle {{data.type == 'danger' ? 'on' : ''}}" title="Danger"></i>
    <i class="fa fa-check-square {{data.type == 'success' ? 'on' : ''}}" title="Success"></i>

    <span>{{ data.title }}</span>
  </h3>

  <div marked="data.body"></div>
</div>
</script>
   <script type="text/ng-template" id="blocks/code/show"><div class="block-show-code">
  <div class="code-tabs">
    <div ng-class="{tab: true, on:$index==current, off:$index!=current}" ng-repeat="tab in data.codes track by $id($index)">
      <a href="" ng-click="choose($index)">
        <span ng-if="tab.status">
          <span ng-if="tab.status" class="status-icon status-icon-{{ getStatusCode(tab.status)[2] }}"></span>
          <em ng-if="!getStatusCode(tab.status)[3]">{{getStatusCode(tab.status)[0]}}</em>
          {{ tab.name ? tab.name : getStatusCode(tab.status)[1] }}
        </span>
        <span ng-if="!tab.status">
          {{ tab.name ? tab.name : code_types_obj[tab.language] }}
        </span>
      </a><span ng-hide="$last">&middot;</span>
    </div>
  </div>

  <div ng-repeat="tab in data.codes track by $id($index)" ng-show="$index==current">
  <pre ng-if='data.codes[$index].code == ""' class="{{theme}}" data-mode='text'><div class='text-muted'>No Content</div></pre>
  <pre ng-if='data.codes[$index].code != ""' class="{{theme}}" data-mode="{{ data.codes[$index].language }}">{{ data.codes[$index].code }}</pre>
</div>
</div>
</script>
   <script type="text/ng-template" id="blocks/image/show"><div class="block-display-image" ng-show="data.images.length > 0">
  <figure ng-show="data.images[0].image.length">
    <a href="{{ data.images[0].image[0] }}" class="block-display-image-parent block-display-image-size-{{data.images[0].sizing || 'smart'}} {{data.images[0].border ? 'block-display-image-border' : ''}}">
      <img ng-src="{{ data.images[0].image[0] }}">
    </a>
    <figcaption>{{ data.images[0].caption }}</figcaption>
  </figure>
</div>
</script>
   <script type="text/ng-template" id="blocks/parameters/show"><div class="block-display-parameters">
  <table>
    <tr ng-if="data.data['h-0'] || data.data['h-1']"> <!-- Rough check -->
      <th ng-repeat="(c, col) in getNumber(data.cols) track by $index">
        {{ data.data['h-' + c] }}
      </th>
    </tr>
    <tr ng-repeat="(r, row) in getNumber(data.rows) track by $index">
      <td ng-repeat="(c, col) in getNumber(data.cols) track by $index">
        <div marked="data.data[r + '-' + c]"></div>
      </th>
    </tr>
  </table>
</div>

</script>
   <script type="text/ng-template" id="blocks/html/show"><div class="block-display-html"></div>

</script>
   <script type="text/ng-template" id="blocks/embed/show"><div class="block-display-embed">
  <div class="html-replace" ng-if="data.html"></div>
  <div ng-if="!data.html">
    <div ng-if="data.iframe" class="iframe-replace"></div>
    <div ng-if="!data.iframe">
      <strong>
        <img ng-src="{{data.favicon}}" class="favicon" ng-if="data.favicon">
        <a href="{{ data.url }}" target="_new">{{ data.title || data.url }}</a>
      </strong>
    </div>
  </div>
</div>

</script>
  </div>
  <div class="container container-footer">
   <footer>
    <div class="pull-right">
     <a href="https://readme.io" class="poweredby">readme.io</a>
    </div>
   </footer>
  </div>
 </body>
</html>