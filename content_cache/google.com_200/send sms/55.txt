<!--?xml version="1.0" encoding="UTF-8"?-->
<html>
 <head>
  <title>Tasker: JavaScript Support</title>
 </head> 
 <body> 
  <h2> JavaScript Support <img style="float:right" SRC="icon_tasker.png"> </h2> 
  <ul> 
   <li><a href="#intro">Introduction</a> </li>
   <li><a href="#localvars">Local Variables</a> </li>
   <li><a href="#globalvars">Global Variables</a> </li>
   <li><a href="#array">Arrays</a> </li>
   <li><a href="#settings">Settings</a> </li>
   <li><a href="#exe">Execution</a> </li>
   <li><a href="#offdevice">Working Off-Device</a> </li>
   <li><a href="#builtin">Builtin Functions</a> <br> <a href="#alarmVol">alarmVol</a> <a href="#audioRecord">audioRecord</a> <a href="#audioRecordStop">audioRecordStop</a> <br> <a href="#btVoiceVol">btVoiceVol</a> <a href="#browseURL">browseURL</a> <a href="#button">button</a> <br> <a href="#call">call</a> <a href="#callBlock">callBlock</a> <a href="#callDivert">callDivert</a> <a href="#callRevert">callRevert</a> <a href="#callVol">callVol</a> <a href="#carMode">carMode</a> <a href="#clearKey">clearKey</a> <a href="#composeEmail">composeEmail</a> <a href="#composeMMS">composeMMS</a> <a href="#composeSMS">composeSMS</a> <a href="#convert">convert</a> <a href="#createDir">createDir</a> <a href="#createScene">createScene</a> <a href="#cropImage">cropImage</a> <br> <a href="#decryptDir">decryptDir</a> <a href="#decryptFile">decryptFile</a> <a href="#deleteDir">deleteDir</a> <a href="#deleteFile">deleteFile</a> <a href="#destroyScene">destroyScene</a> <a href="#displayAutoBright">displayAutoBright</a> <a href="#displayAutoRotate">displayAutoRotate</a> <a href="#displayTimeout">displayTimeout</a> <a href="#dpad">dpad</a> <a href="#dtmfVol">dtmfVol</a> <br> <a href="#elemBackColour">elemBackColour</a> <a href="#elemBorder">elemBorder</a> <a href="#elemPosition">elemPosition</a> <a href="#elemText">elemText</a> <a href="#elemTextColour">elemTextColour</a> <a href="#elemTextSize">elemTextSize</a> <a href="#elemVisibility">elemVisibility</a> <a href="#enableProfile">enableProfile</a> <a href="#encryptDir">encryptDir</a> <a href="#encryptFile">encryptFile</a> <a href="#endCall">endCall</a> <a href="#enterKey">enterKey</a> <a href="#exit">exit</a> <br> <a href="#filterImage">filterImage</a> <a href="#flash">flash</a> <a href="#flashLong">flashLong</a> <a href="#flipImage">flipImage</a> <br> <a href="#getLocation">getLocation</a> <a href="#getVoice">getVoice</a> <a href="#global">global</a> <a href="#goHome">goHome</a> <br> <a href="#haptics">haptics</a> <a href="#hideScene">hideScene</a> <br> <a href="#listFiles">listFiles</a> <a href="#loadApp">loadApp</a> <a href="#loadImage">loadImage</a> <a href="#local">local</a> <a href="#lock">lock</a> <br> <a href="#mediaControl">mediaControl</a> <a href="#mediaVol">mediaVol</a> <a href="#micMute">micMute</a> <a href="#mobileData">mobileData</a> <a href="#musicBack">musicBack</a> <a href="#musicPlay">musicPlay</a> <a href="#musicSkip">musicSkip</a> <a href="#musicStop">musicStop</a> <br> <a href="#nightMode">nightMode</a> <a href="#notificationVol">notificationVol</a> <br> <a href="#performTask">performTask</a> <a href="#popup">popup</a> <a href="#profileActive">profileActive</a> <a href="#pulse">pulse</a> <br> <a href="#readFile">readFile</a> <a href="#reboot">reboot</a> <a href="#resizeImage">resizeImage</a> <a href="#ringerVol">ringerVol</a> <a href="#rotateImage">rotateImage</a> <br> <a href="#saveImage">saveImage</a> <a href="#say">say</a> <a href="#scanCard">scanCard</a> <a href="#sendIntent">sendIntent</a> <a href="#sendSMS">sendSMS</a> <a href="#setAirplaneMode">setAirplaneMode</a> <a href="#setAirplaneRadios">setAirplaneRadios</a> <a href="#setAlarm">setAlarm</a> <a href="#setAutoSync">setAutoSync</a> <a href="#setBT">setBT</a> <a href="#setBTID">setBTID</a> <a href="#setClip">setClip</a> <a href="#setGlobal">setGlobal</a> <a href="#setKey">setKey</a> <a href="#setLocal">setLocal</a> <a href="#settings">settings</a> <a href="#setWallpaper">setWallpaper</a> <a href="#setWifi">setWifi</a> <a href="#shell">shell</a> <a href="#showScene">showScene</a> <a href="#shutdown">shutdown</a> <a href="#silentMode">silentMode</a> <a href="#sl4a">sl4a</a> <a href="#soundEffects">soundEffects</a> <a href="#speakerphone">speakerphone</a> <a href="#statusBar">statusBar</a> <a href="#stayOn">stayOn</a> <a href="#stopLocation">stopLocation</a> 
    <!--A HREF="#stopTask">stopTask</A --> <a href="#systemLock">systemLock</a> <a href="#systemVol">systemVol</a> <br> <a href="#takeCall">takeCall</a> <a href="#takePhoto">takePhoto</a> <a href="#taskRunning">taskRunning</a> <a href="#type">type</a> <br> <a href="#usbTether">usbTether</a> <a href="#unzip">unzip</a> <br> <a href="#vibrate">vibrate</a> <a href="#vibratePattern">vibratePattern</a> <br> <a href="#wait">wait</a> <a href="#wifiTether">wifiTether</a> <a href="#writeFile">writeFile</a> <br> <a href="#zip">zip</a> </li>
   <li><a href="#notes">Function Notes</a> </li>
  </ul> 
  <a NAME="intro"></a> 
  <h3>Introduction</h3> 
  <p> Tasker supports running JavaScript code in tasks or <a href="element_web.html">WebView</a> scene elements. Most Tasker actions can be accessed direct from the JavaScript. JSON and XMLHTTPRequest are also directly available from the JavaScript code.</p> 
  <h4>JavaScript in Tasks</h4> 
  <p> JavaScript can be embedded inline in tasks via the <i>JavaScriptlet</i> (direct specification of JavaScript to run) or <i>JavaScript</i> (load script from file) actions. </p> 
  <p> In both cases, the JavaScript executes in sequence with the other actions in the task and variables are transparently converted so pieces of JavaScript can be interwoven throughout the task. </p> 
  <h4>Embedded in HTML</h4> WebView elements allow specification of mixed HTML and JS for the element content. 
  <blockquote> 
   <code> &lt;H1 onClick="setWifi( false )"&gt;ClickMeToTurnOffWifi&lt;/H1&gt; </code> 
  </blockquote> 
  <p> This allows a single WebView to present a complete user-interface. </p> 
  <a NAME="localvars"></a> 
  <h3>Local Variables</h3> 
  <p> In <code>JavaScript(let)</code> actions, local variables (all lower case, e.g. <b>%myvar</b>) are directly accessible in the JavaScript without the % sign (e.g. <b>myvar</b>). If the script changes the value, the new value is transparently used by subsequent actions in the task. </p> 
  <p> The values of new (all lower case) variables declared in JavaScript (with the <code>var</code> keyword) are also available to subsequent actions, with the exception of those which are chain-declared e.g. <code>var one = 'aval', two = 'bval';</code> </p> 
  <p> In JavaScript embedded in HTML, the functions <a href="#local">local</a> and <a href="#setLocal">setLocal</a> must be used to access variables local to the scene hosting the WebView. </p> 
  <a NAME="globalvars"></a> 
  <h3>Global Variables</h3> Tasker global variables need to be accessed via 
  <a href="#global">global()</a> and set via 
  <a href="#setGlobal">setGlobal()</a>. Global arrays are not supported due to an Android limitation. 
  <a NAME="array"></a> 
  <h3>Arrays</h3> 
  <p> Local Tasker arrays are transparently available in <i>Javascript(let)</i>s and vice-versa. They are not available in WebViews. </p> 
  <p> Arrays which are not existing Tasker arrays must be declared in the JS as such i.e. in this case <i>arr</i> will not be visible to the remainder of the task: </p> 
  <pre>
	var arr = getSomeArray();
</pre> 
  <p> Whereas in this case it will: </p> 
  <pre>
	var arr = [];
	arr = getSomeArray();
</pre> 
  <p> Note that: </p> 
  <ul> 
   <li>JavaScript array indices start at 0, whereas Tasker array indices start at 1 </li>
   <li>JavaScript uses <code>[]</code> while Tasker uses <code>()</code> </li>
  </ul> 
  <p> So, for example, <code>%arr(1)</code> (Tasker) is equivalent to <code>arr[0]</code> (JavaScript). </p> 
  <a NAME="settings"></a> 
  <h3>Settings</h3> Unlike normal Tasker actions, settings which are changed in JavaScript as part of a profile's enter task are 
  <b>not</b> restored when the profile exits. 
  <a NAME="exe"></a> 
  <h3>Execution</h3> 
  <h4>Execution Instances</h4> Only one script can execute at one time. Once a piece of JavaScript is executing, it cannot be interrupted by another piece. 
  <a NAME="offdevice"></a> 
  <h4>Working Off-Device</h4> You might wish to develop long and/or complicated tasks off-device e.g. on a PC. There are two strategies for that: 
  <h4>1. <code>JavaScript</code> action</h4> For off-device testing, use 
  <code>Menu / More / Developer / Save JS Library Template</code> to get dummy definitions for the built in functions. Include that file when developing on your PC. 
  <p> To test in your JavaScript code whether you're on-device or not, use </p>
  <blockquote>
   <code> var onAndroid = ( global( 'sdk' ) &gt; 0 ); </code>
  </blockquote> 
  <p></p> 
  <p> By using the <code>JavaScript</code> action rather than <code>JavaScriptlet</code> you can easily access a file synced from PC to a file on the Android device. </p> 
  <h4>2. Using WebView</h4> 
  <p> If you specify a website URL as the content for your WebView, then testing the code on the target device is a simple matter of pushing the new version to your webserver and reloading the WebView on the device (see action <a href="help/ah_scene_element_web_control.html">Element Web Control</a>) </p> 
  <h4>Builtin Function Execution</h4> 
  <p> Calls to most Tasker builtin functions (see below) are executed as normal single-action tasks and thus may be blocked by other executing tasks. </p> 
  <p> They execute at the priority of the task that executed the JavaScript <b>plus two</b>. </p> 
  <h4>JavaScript(let): Alert,Confirm,Prompt</h4> Scripts using these functions require a 'user-interface' and may cause interference with the currently running app (though in most cases they will not). 
  <h4>JavaScript(let): Auto Exit</h4> 
  <p> By default, the <code>JavaScript(let)</code> action will end when the main execution sequence is finished. </p> 
  <p> If you are using asynchronous code e.g. via <i>setTimeout()</i> or other callbacks, you should deselect <i>Auto Exit</i>. You are then responsible yourself for telling Tasker to continue the task by calling <i>exit()</i>. </p> 
  <p> In any case, execution will stop when the timeout configured for the action is reached. </p> 
  <h4>JavaScript(let): Libraries</h4> You can specify as many libraries as you want in the 
  <i>Libraries</i> parameter, separated by newlines. 
  <p> Several popular libraries are pre-selectable. </p> 
  <p> You may wish to download them manually to your local storage and change the <i>http</i> URL to a <i>file</i> URL so that Internet is not required to run your script. </p> 
  <p> Warning: library code will have access to local files, data providers etc. on the device </p> 
  <p> Important: if you are using your own libraries developed on Windows, you may need to convert CRLF style line endings to Unix style LF. </p> 
  <a NAME="builtin"></a> 
  <h3>Builtin Functions</h3> 
  <p> Tasker makes most of it's actions available via functions which can be called directly via name in <code>JavaScript(let)</code> actions and WebView elements. </p> 
  <p> Exceptions: </p> 
  <ul> 
   <li>in WebView content where mode is set to <b>URL</b>, the functions must be prefixed by <b>tk</b> e.g. <code>tk.flash('Woo!')</code> </li>
   <li>when executing code via <i>eval</i> the functions must be prefixed by <b>tk.</b> </li>
  </ul> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="alarmVol"></a> 
  <a NAME="btVoiceVol"></a> 
  <a NAME="callVol"></a> 
  <a NAME="dtmfVol"></a> 
  <a NAME="mediaVol"></a> 
  <a NAME="notificationVol"></a> 
  <a NAME="systemVol"></a> 
  <a NAME="ringerVol"></a> 
  <h5>alarmVol / btVoiceVol / callVol / dtmfVol / mediaVol / notificationVol / systemVol / ringerVol</h5> 
  <p> <code>var ok = alarmVol( int level, bool display, bool sound )</code> </p> 
  <p>Set the relevant system volume to <i>level</i>. </p> 
  <p>If <i>display</i> is true, the new level will be flashed up on-screen.</p> 
  <p>If <i>sound</i> is true, a tone will sound at the new level.</p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="audioRecord"></a> 
  <h5>audioRecord</h5> 
  <p> <code>var ok = audioRecord( str destPath, str source, str codec, str format )</code> </p> 
  <ul> 
   <li><i>destPath</i>: where to put the recording. Note that a file extension is not necessary, it will correspond to the selected <i>format</i>. </li>
   <li><i>source</i>: <b>def, mic, call, callout</b> or <b>callin</b> </li>
   <li><i>codec</i>: <b>amrn, amrw</b> or <b>aac</b> </li>
   <li><i>format</i>: <b>mp4, 3gpp, amrn</b> or <b>amrw</b> </li>
  </ul> 
  <p> The JavaScript does <b>not</b> wait for the audio recording to complete. </p> 
  <p>See also: <a href="#audioRecordStop">audioRecordStop()</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="audioRecordStop"></a> 
  <h5>audioRecordStop</h5> 
  <p> <code>var ok = audioRecordStop()</code> </p> 
  <p> Stop recording previously initiated by <a href="#audioRecord">audioRecord()</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="browseURL"></a> 
  <h5>browseURL</h5> 
  <p> <code>var ok = browseURL( str URL )</code> </p> 
  <p> Open the default browser at the specifed URL. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="button"></a> 
  <h5>button</h5> 
  <p> <code>var ok = button( str name )</code> </p> 
  <p> Simulate a press of the named button. </p> 
  <p><i>name</i> must be one of <b>back, call, camera, endcall, menu, volup, voldown</b> or <b>search</b>. </p>
  <p> This function requires a rooted device. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="call"></a> 
  <h5>call</h5> 
  <p> <code>var ok = call( str num, bool autoDial )</code> </p> 
  <p> Make a phone call. </p> 
  <p>If <i>autoDial</i> is <b>false</b>, the phone app will be brought up with the number pre-inserted, if <b>true</b> the number will also be dialed. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="callBlock"></a> 
  <h5>callBlock</h5> 
  <p> <code>var ok = callBlock( str numMatch, bool showInfo )</code> </p> 
  <p> Block <b>outgoing</b> calls <a href="matching.html">matching</a> <i>numMatch</i>. </p> 
  <p> If <i>showInfo</i> is set, Tasker will flash a message when a call is blocked. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="callDivert"></a> 
  <h5>callDivert</h5> 
  <p> <code>var ok = callDivert( str fromMatch, str to, bool showInfo )</code> </p> 
  <p> Divert <b>outgoing</b> calls <a href="matching.html">matching</a> <i>fromMatch</i> to the number <i>to</i>. </p> 
  <p> If <i>showInfo</i> is set, Tasker will flash a message when a call is diverted. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="callRevert"></a> 
  <h5>callRevert</h5> 
  <p> <code>var ok = callRevert( str numMatch )</code> </p> 
  <p> Stop blocking or diverting outgoing calls previously specified with <a href="#callBlock">callBlock</a> or <a href="#callDivert">callDivert</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="carMode"></a> 
  <h5>carMode</h5> 
  <p> <code>var ok = carMode( bool onFlag )</code> </p> 
  <p> Turn on or off Android Car Mode. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="clearKey"></a> 
  <h5>clearKey</h5> 
  <code>var ok = clearKey( str keyName )</code> 
  <p> Clear the passphrase for the specified <i>keyName</i>. </p> 
  <p>See Also: <a href="encryption.html">Encryption</a> in the Userguide.</p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="composeEmail"></a> 
  <h5>composeEmail</h5> 
  <code>var ok = composeEmail( str to, str subject, str message )</code> 
  <p> Show an email composition dialog with any specified fields pre-filled. </p> 
  <p> The JavaScript does <b>not</b> wait for the email to be sent before continuing. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="composeMMS"></a> 
  <h5>composeMMS</h5> 
  <code>var ok = composeMMS( str to, str subject, str message, str attachmentPath )</code> 
  <p> Show an MMS composition dialog with any specified fields pre-filled. </p> 
  <p> The JavaScript does <b>not</b> wait for the MMS to be sent before continuing. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="composeSMS"></a> 
  <h5>composeSMS</h5> 
  <code>var ok = composeSMS( str to, str message )</code> 
  <p> Show an SMS composition dialog with any specified fields pre-filled. </p> 
  <p> The JavaScript does <b>not</b> wait for the SMS to be sent before continuing. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="convert"></a> 
  <h5>convert</h5> 
  <code>var result = convert( str val, str conversionType )</code> 
  <p> Convert from one type of value to another. </p> 
  <p> <i>conversionType</i> must be one of the string constants: <b>byteToKbyte, byteToMbyte, byteToGbyte, datetimeToSec, secToDatetime, secToDatetimeM, secToDatetimeL, htmlToText, celsToFahr, fahrToCels, inchToCent, metreToFeet, feetToMetre, kgToPound, poundToKg, kmToMile, mileToKm, urlDecode, urlEncode, binToDec, decToBin, hexToDec, decToHex, base64encode base64decode, toMd5, toSha1, toLowerCase, toUpperCase, toUpperCaseFirst</b>. </p> See also: action 
  <a href="help/ah_convert_variable.html">Variable Convert</a>. 
  <p></p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="createDir"></a> 
  <h5>createDir</h5> 
  <p> <code>var ok = createDir( str dirPath, bool createParent, bool useRoot )</code> </p> 
  <p> Create the named <i>dirPath</i>. If <i>createParent</i> is specified and any parent directory does not exist, it will also be created. </p> 
  <p> If <i>useRoot</i> is specified, the operation will be performed as the root user (where available). </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="createScene"></a> 
  <h5>createScene</h5> 
  <p> <code>var ok = createScene( str sceneName )</code> </p> 
  <p> Create the named <a href="scenes.html">scene</a> without displaying it. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="cropImage"></a> 
  <h5>cropImage</h5> 
  <p> <code>var ok = cropImage( int fromLeftPercent, int fromRightPercent, int fromTopPercent, int fromBottomPercent )</code> </p> 
  <p> Crop an image in Tasker's image buffer previously loaded via <a href="#loadImage">loadImage</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="decryptDir"></a> 
  <h5>decryptDir</h5> 
  <p> <code>var ok = decryptDir( str path, str key, bool removeKey )</code> </p> 
  <p> As <a href="#decryptFile">decryptFile()</a>, but decrypts each file in the specified directory in turn. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="decryptFile"></a> 
  <h5>decryptFile</h5> 
  <p> <code>var ok = decryptFile( str path, str key, bool removeKey )</code> </p> 
  <p> </p>
  <p> Decrypt the specified file using the encryption parameters specified in <code>Menu / Prefs / Action</code>. </p> 
  <p> If <i>removeKey</i> is not set, the entered passphrase will be reapplied automatically to the next encryption/decryption operation with the specified <i>keyName</i>. </p> 
  <p> </p>
  <p>See Also: <a href="encryption.html">Encryption</a> in the Userguide, <a href="help/ah_decrypt_file.html">Decrypt File</a> action.</p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="deleteDir"></a> 
  <h5>deleteDir</h5> 
  <p> <code>var ok = deleteDir( str dirPath, bool recurse, bool useRoot )</code> </p> 
  <p> Delete the named <i>dirPath</i>. <i>recurse</i> must be specified if the directory is not empty. </p> 
  <p> If <i>useRoot</i> is specified, the operation will be performed as the root user (where available). </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="deleteFile"></a> 
  <h5>deleteFile</h5> 
  <p> <code>var ok = deleteFile( str filePath, int shredTimes, bool useRoot )</code> </p> 
  <p> Delete the named <i>filePath</i>. </p> 
  <p><i>shredTimes</i> has range 0-10. </p> 
  <p> If <i>useRoot</i> is specified, the operation will be performed as the root user (where available). </p> 
  <p> See also: action <a href="help/ah_delete_file.html">Delete File</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="destroyScene"></a> 
  <h5>destroyScene</h5> 
  <p> <code>var ok = destroyScene( str sceneName )</code> </p> 
  <p> Hide the named <a href="scenes.html">scene</a> if it's visible, then destroy it. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="displayAutoBright"></a> 
  <h5>displayAutoBright</h5> 
  <p> <code>var ok = displayAutoBright( bool onFlag )</code> </p> 
  <p> Whether the display brightness should automatically adjust to the ambient light or not. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="displayAutoRotate"></a> 
  <h5>displayAutoRotate</h5> 
  <p> <code>var ok = displayRotate( bool onFlag )</code> </p> 
  <p> Whether the display orientation should change based on the physical orientation of the device. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="displayTimeout"></a> 
  <h5>displayTimeout</h5> 
  <p> <code>var ok = displayTimeout( int hours, int minutes, int seconds )</code> </p> 
  <p> How long the period of no-activity should be before the display is turned off. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="dpad"></a> 
  <h5>dpad</h5> 
  <p> <code>var ok = dpad( str direction, int noRepeats )</code> </p> 
  <p> Simulate a movement or press of the hardware dpad (or trackball). </p> 
  <p><i>direction</i> must be one of <b>up, down, left, right</b> or <b>press</b>. </p>
  <p> This function requires a rooted device. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="enableProfile"></a> 
  <h5>enableProfile</h5> 
  <p> <code>var ok = enableProfile( str name, boolean enable )</code> </p> 
  <p> Enable or disable the named Tasker profile. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="encryptDir"></a> 
  <h5>encryptDir</h5> 
  <p> <code>var ok = encryptDir( str path, str keyName, bool rememberKey, bool shredOriginal )</code> </p> 
  <p> As <a href="#encryptFile">encryptFile()</a>, but encrypts each file in the specified directory in turn. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="elemBackColour"></a> 
  <h5>elemBackColour</h5> 
  <p> <code>var ok = elemBackColour( str scene, str element, str startColour, str endColour )</code> </p> 
  <p> Set the background <a href="#colour">colour</a> of the specified <a href="scenes.html">scene</a> element. </p> 
  <p> See also: action <a href="help/ah_scene_element_background_colour.html">Element Back Colour</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="elemBorder"></a> 
  <h5>elemBorder</h5> 
  <p> <code>var ok = elemBorder( str scene, str element, int width, str colour )</code> </p> 
  <p> Set the border <a href="#colour">colour</a> and width of the specified <a href="scenes.html">scene</a> element. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="elemPosition"></a> 
  <h5>elemPosition</h5> 
  <p> <code>var ok = elemPosition( str scene, str element, str orientation, int x, int y, int animMS )</code> </p> 
  <p> Move an element within it's scene. </p> 
  <p> <i>orientation</i> must be one of <b>port</b> or <b>land</b>. <i>animMS</i> indicates the duration of the corresponding animation in MS. A zero-value indicates no animation. </p> 
  <p> See also: action <a href="help/ah_scene_element_position.html">Element Position</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="elemText"></a> 
  <h5>elemText</h5> 
  <p> <code>var ok = elemText( str scene, str element, str position, str text )</code> </p> 
  <p> Set the text of the specified <a href="scenes.html">scene</a> element. </p> 
  <p> <i>pos</i> must be one of <b>repl</b> (replace existing text completely), <b>start</b> (insert before existing text) or <b>end</b> (append after existing text). </p> 
  <p> See also: action <a href="help/ah_scene_element_text.html">Element Text</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="elemTextColour"></a> 
  <h5>elemTextColour</h5> 
  <p> <code>var ok = elemTextColour( str scene, str element, str colour )</code> </p> 
  <p> Set the text <a href="#colour">colour</a> of the specified <a href="scenes.html">scene</a> element. </p> 
  <p> See also: action <a href="help/ah_scene_element_text_colour.html">Element Text Colour</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="elemTextSize"></a> 
  <h5>elemTextSize</h5> 
  <p> <code>var ok = elemTextSize( str scene, str element, int size )</code> </p> 
  <p> Set the text size of the specified <a href="scenes.html">scene</a> element. </p> 
  <p> See also: action <a href="help/scene_element_text_size.html">Element Text Size</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="elemVisibility"></a> 
  <h5>elemVisibility</h5> 
  <p> <code>var ok = elemVisibility( str scene, str element, boolean visible, int animationTimeMS )</code> </p> 
  <p> Make the specified <a href="scenes.html">scene</a> element visible or invisible. </p> 
  <p> See also: action <a href="help/ah_scene_element_visibility.html">Element Visibility</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="endCall"></a> 
  <h5>endCall</h5> 
  <p> <code>var ok = endCall()</code> </p> 
  <p> Terminate the current call (if there is one). </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="encryptFile"></a> 
  <h5>encryptFile</h5> 
  <p> <code>var ok = encryptFile( str path, str keyName, bool rememberKey, bool shredOriginal )</code> </p> 
  <p> Encrypt the specified file using the encryption parameters specified in <code>Menu / Prefs / Action</code>. </p> 
  <p> If <i>rememberKey</i> is set, the entered passphrase will be reapplied automatically to the next encryption/decryption operation with the specified <i>keyName</i>. </p> 
  <p> If <i>shredOriginal</i> is specified, the original file will be overwritten several times with random bits if encryption is successful. </p> 
  <p>See Also: <a href="encryption.html">Encryption</a> in the Userguide, <a href="help/ah_encrypt_file.html">Encrypt File</a> action.</p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="enterKey"></a> 
  <h5>enterKey</h5> 
  <p> <code>var ok = enterKey( str title, str keyName, bool showOverKeyguard, bool confirm, str background, str layout, int timeoutSecs )</code> </p> 
  <p> Show a dialog to enter the passphrase for the specified <i>keyName</i>. The JavaScript waits until the dialog has been dismissed or the timeout reached. </p> 
  <ul> 
   <li><i>confirm</i>: if set, the passphrase must be entered twice to ensure it is correct. </li>
   <li><i>background</i>: [optional] a file path or file URI to a background image. </li>
   <li><i>layout</i>: the name of a user-created <a href="scenes.html">scene</a> to use in place of the built-in scene. </li>
  </ul> 
  <p>See Also: <a href="encryption.html">Encryption</a> in the Userguide</p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="filterImage"></a> 
  <h5>filterImage</h5> 
  <p> <code>bool ok = filterImage( str mode, int value )</code> </p> 
  <p> Filter an image previously loaded into Tasker's image buffer via <a href="#loadImage">loadImage()</a></p> 
  <p></p> 
  <p> Possible values of <i>mode</i> are: </p> 
  <ul> 
   <li><b>bw</b>: convert to black &amp; white, using <i>value</i> as a threshold </li>
   <li><b>eblue</b>: enhance blue values by <i>value</i> </li>
   <li><b>egreen</b>: enhance green values by <i>value</i> </li>
   <li><b>ered</b>: enhance red values by <i>value</i> </li>
   <li><b>grey</b>: convert to greyscale, <i>value</i> is unused </li>
   <li><b>alpha</b>: set pixel alpha (opposite of transparency) to <i>value</i> </li>
  </ul> 
  <p><i>value</i> should be 1-254.</p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="flipImage"></a> 
  <h5>flipImage</h5> 
  <p> <code>bool ok = flipImage( bool horizontal )</code> </p> 
  <p> Flip an image previously loaded into Tasker's image buffer via <a href="#loadImage">loadImage()</a></p> 
  <p></p> 
  <p> If <i>horizontal</i> is false, the image is flipped vertically. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="exit"></a> 
  <h5>exit</h5> 
  <p> <code>exit()</code> </p> 
  <p> Stop execution of the JavaScript. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="flash"></a> 
  <h5>flash</h5> 
  <p> <code>flash( str message )</code> </p> Flash a short-duration Android 'Toast' message. 
  <!-- ___________________________________________________________________ --> 
  <a NAME="flashLong"></a> 
  <h5>flashLong</h5> 
  <p> <code>flashLong( str message )</code> </p> Flash a long-duration Android 'Toast' message. 
  <!-- ___________________________________________________________________ --> 
  <a NAME="getLocation"></a> 
  <h5>getLocation</h5> 
  <p> <code>var ok = getLocation( str source, bool keepTracking, int timeoutSecs )</code> </p> 
  <p> Try to get a fix of the current device location. </p> 
  <p><i>source</i> must be one of <b>gps, net</b> or <b>any</b>. </p> 
  <p> If <i>keepTracking</i> is set, the specified source(s) will be left tracking with the purpose of providing a much quicker fix next time the function is called. </p> 
  <p> Fix coordinates are stored in the global Tasker variables <b>%LOC</b> (GPS) and/or <b>%LOCN</b> (Net). The value can be retrieved with the <a href="#global">global</a> function. Several other parameters of the fix are also available, see <a href="variables.html">Variables</a>. </p> 
  <p>Example</p> 
  <pre>
<code>
	var lastFix = global( 'LOC' );
	if ( 
		getLocation( 'gps' ) &amp;&amp;
		( global( 'LOC' ) != lastFix ) 
	) {
		flash( "New fix: " + global( 'LOC' ) );
	}
</code>
</pre> 
  <p> See also: action <a href="help/ah_get_fix.html">Get Location</a>, function <a href="#stopLocation">stopLocation</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="getVoice"></a> 
  <h5>getVoice</h5> 
  <p> <code>str result = getVoice( str prompt, str languageModel, int timeout )</code> </p> 
  <p> Get voice input and convert to text. </p> 
  <p> <i>result</i> is 'undefined' if the voice acquisition failed, otherwise it's an array of possible matching texts. </p> 
  <p> <i>prompt</i> is a label for the dialog that is shown during voice acquisition. </p> 
  <p> <i>languageMode</i> gives the speech recognition engine a clue as to the context of the speech. It must be one of <b>web</b> for 'web search' or <b>free</b> for 'free-form'. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="goHome"></a> 
  <h5>goHome</h5> 
  <p> <code>goHome( int screenNum )</code> </p> 
  <p> Go to the Android home screen. <i>screenNum</i> is not supported by all home screens. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="haptics"></a> 
  <h5>haptics</h5> 
  <p> <code>var ok = haptics( bool onFlag )</code> </p> 
  <p> Enable/disable system setting Haptic Feedback. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="hideScene"></a> 
  <h5>hideScene</h5> 
  <p> <code>var ok = hideScene( str sceneName )</code> </p> 
  <p> Hide the named <a href="scenes.html">scene</a> if it's visible. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="global"></a> 
  <h5>global</h5> 
  <code>var value = global( str varName )</code> 
  <p> Retrieve the value of a Tasker global variable. Prefixing the name with % is optional. </p> 
  <p> Example: </p> 
  <pre><code>
	flash( global( '%DogName' ) );
</code></pre> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="listFiles"></a> 
  <h5>listFiles</h5> 
  <p> <code>str files = listFiles( str dirPath, bool hiddenToo )</code> </p> 
  <p> List all files in the specified <i>dirPath</i>. </p> 
  <p> <i>files</i> is a newline-separated list of subfiles. </p> 
  <p> If no files or found or an error occurs, the returned value will be <code>undef</code>. </p> 
  <p></p>If 
  <i>hiddenToo</i> is specified, files starting with period are included, otherwise they are not. 
  <p></p> 
  <p>Example: </p> 
  <pre>
	var files = listFiles( '/sdcard' );
	var arr = files.split( '\n' );
	flash( 'Found ' + arr.length + ' files' );
</pre> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="loadApp"></a> 
  <h5>loadApp</h5> 
  <p> <code>var ok = loadApp( str name, str data, bool excludeFromRecents )</code> </p> 
  <p> Start up the named app. </p> 
  <p> <i>Name</i> can be a package name or app label, it's tested first against known package names. <b>Note</b>: app label could be localized to another language if the script is used in an exported app. </p> 
  <p> <i>Data</i> is in URI format and app-specific. </p> 
  <p> When <i>excludeFromRecents</i> is true, the app will not appear in the home screen 'recent applications' list. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="loadImage"></a> 
  <h5>loadImage</h5> 
  <p> <code>var ok = loadImage( str uri )</code> </p> 
  <p> Load an image into Tasker's internal image buffer. </p> 
  <p> The following uri formats are currently supported: </p> 
  <ul> 
   <li><i>file://</i> followed by a local file path </li>
  </ul> 
  <p> See also <a href="help/ah_load_image.html">Load Image</a> action.</p> 
  <p></p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="lock"></a> 
  <h5>lock</h5> 
  <p> <code>var ok = lock( str title, str code, bool allowCancel, bool rememberCode, bool fullScreen, str background, str layout )</code> </p> 
  <p> Show a lock screen, preventing user interaction with the covered part of the screen. The JavaScript waits until the code has been entered or the lock cancelled (see below). </p> 
  <ul> 
   <li><i>code</i>: the numeric code which must be entered for unlock </li>
   <li><i>allowCancel</i>: show a button to remove the lockscreen, which causes a return to the Android home screen </li>
   <li><i>rememberCode</i>: the code will be remembered and automatically entered when the lock screen is show in future, until the display next turns off </li>
   <li><i>background</i>: [optional] a file path or file URI to a background image. </li>
   <li><i>layout</i>: the name of a user-created <a href="scenes.html">scene</a> to use in place of the built-in lock scene </li>
  </ul> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="local"></a> 
  <h5>local</h5> 
  <code>var value = local( str varName )</code> 
  <p> Retrieve the value of a Tasker scene-local variable. The name should <b>not</b> be prefixed with <i>%</i>. </p> 
  <p> This function is only for use by JavaScript embedded in HTML and accessed via a WebView scene element. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="mediaControl"></a> 
  <h5>mediaControl</h5> 
  <code>var ok = mediaControl( str action )</code> 
  <p> Control media via simulation of hardware buttons. </p> 
  <p> Possible <i>action</i>s are <b>next, pause, prev, toggle, stop</b> or <b>play</b>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="micMute"></a> 
  <h5>micMute</h5> 
  <code>var ok = micMute( bool shouldMute )</code> 
  <p> Mute or unmute the device's microphone (if present), </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="mobileData"></a> 
  <h5>mobileData</h5> 
  <code>var ok = mobileData( bool set )</code> 
  <p> Enable or disable the system Mobile Data setting. </p> 
  <p> See also: action <a href="help/ah_mobile_data_direct.html">Mobile Data</a> 
   <!-- ___________________________________________________________________ --> <a NAME="musicBack"></a> </p>
  <h5>musicBack</h5> 
  <code>var ok = musicBack( int seconds )</code> 
  <p> Skip back by <i>seconds</i> during playback of a music file previously started by <a href="#musicPlay">musicPlay</a>. </p> 
  <p> See also: <a href="#musicSkip">musicSkip</a>, <a href="#musicStop">musicStop</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="musicPlay"></a> 
  <h5>musicPlay</h5> 
  <code>var ok = musicPlay( str path, int offsetSecs, bool loop, str stream )</code> 
  <p> Play a music file via Tasker's internal music player. </p> 
  <p> <i>stream</i> to which <a href="#streams">audio stream</a> the music should be played </p> 
  <p>This function does <b>not</b> not wait for completion.</p> 
  <p>The last 3 arguments may be ommitted, in which case they default to <b>0</b>, <b>false</b> and <b>media</b> respectively. </p> 
  <p> See also: <a href="#musicStop">musicStop</a>, <a href="#musicBack">musicBack</a>, <a href="#musicSkip">musicSkip</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="musicSkip"></a> 
  <h5>musicSkip</h5> 
  <code>var ok = musicSkip( int seconds )</code> 
  <p> Skip forwards by <i>seconds</i> during playback of a music file previously started by <a href="#musicPlay">musicPlay</a>. </p> 
  <p> See also: <a href="#musicBack">musicBack</a>, <a href="#musicStop">musicStop</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="musicStop"></a> 
  <h5>musicStop</h5> 
  <code>var ok = musicStop()</code> 
  <p> Stop playback of a music file previously started by <a href="#musicPlay">musicPlay</a>. </p> 
  <p> See also: <a href="#musicBack">musicBack</a>, <a href="#musicSkip">musicSkip</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="nightMode"></a> 
  <h5>nightMode</h5> 
  <p> <code>var ok = nightMode( bool onFlag )</code> </p> 
  <p> Turn on or off Android Night Mode. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="popup"></a> 
  <h5>popup</h5> 
  <p> <code>var ok = popup( str title, str text, bool showOverKeyguard, str background, str layout, int timeoutSecs )</code> </p> 
  <p> Show a popup dialog. The JavaScript waits until the popup has been dismissed or the timeout reached. </p> 
  <ul> 
   <li><i>background</i>: [optional] a file path or file URI to a background image. </li>
   <li><i>layout</i>: the name of a user-created <a href="scenes.html">scene</a> to use in place of the built-in popup scene. </li>
  </ul> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="performTask"></a> 
  <h5>performTask</h5> 
  <code>var ok = performTask( str taskName, int priority, str parameterOne, str parameterTwo )</code> 
  <p> Run the Tasker task <i>taskName</i>. </p> 
  <p> Note that the JavaScript does not wait for the task to complete. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="profileActive"></a> 
  <h5>profileActive</h5> 
  <code>bool active = profileActive( str profileName )</code> 
  <p> Whether the named Tasker profile is currently active. Returns false if the profile name is unknown. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="pulse"></a> 
  <h5>pulse</h5> 
  <code>bool ok = pulse( bool onFlag )</code> 
  <p> Enable or disable the Android Notification Pulse system setting. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="readFile"></a> 
  <h5>readFile</h5> 
  <code>var contents = readFile( str path )</code> 
  <p> Read the contents of a text file. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="reboot"></a> 
  <h5>reboot</h5> 
  <code>var ok = reboot( str type )</code> 
  <p> Reboot the device. </p> 
  <p><i>type</i> is one of <b>normal, recovery</b> or <b>bootloader</b>. It can be ommitted and defaults to <b>normal</b>. </p>
  <p> Requires a rooted device. </p> 
  <p> See also: function <a href="#shutdown">shutdown</a> 
   <!-- ___________________________________________________________________ --> <a NAME="resizeImage"></a> </p>
  <h5>resizeImage</h5> 
  <code>var ok = resizeImage( int width, int height )</code> 
  <p> Scale the current image in Tasker's image buffer to the specified dimensions. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="rotateImage"></a> 
  <h5>rotateImage</h5> 
  <code>var ok = rotateImage( str dir, int degrees )</code> 
  <p> Rotate the current image in Tasker's image buffer. </p> 
  <p> <i>dir</i> must be one of <b>left</b> or <b>right</b>. <i>degrees</i> must be one of <b>45, 90, 135</b> or <b>180</b>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="saveImage"></a> 
  <h5>saveImage</h5> 
  <code>var ok = saveImage( str path, int qualityPercent, bool deleteFromMemoryAfter )</code> 
  <p> Save the current image in Tasker's image buffer to the specified file <i>path</i>. </p> 
  <p> <a href="help/ah_save_image.html">Save Image</a> action.</p> 
  <p></p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="say"></a> 
  <h5>say</h5> 
  <code>var ok = say( str text, str engine, str voice, str stream, int pitch, int speed )</code> 
  <p> Cause the device to say <i>text</i> out loud. </p> 
  <ul> 
   <li><i>engine</i>: the speech engine e.g. <b>com.svox.classic</b> Defaults to the system default (specify <i>undefined</i> for that) </li>
   <li><i>voice</i>: the voice to use (must be supported by <i>engine</i>). Defaults to the current system language (specify <i>undefined</i> for that) </li>
   <li><i>stream</i>: to which <a href="#streams">audio stream</a> the speech should be made </li>
   <li><i>pitch</i>: 1-10 </li>
   <li><i>speed</i>: 1-10 </li>
  </ul> 
  <p> The script waits for the speech to be finished. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="sendIntent"></a> 
  <h5>sendIntent</h5> 
  <code>var ok = sendIntent( str action, str targetComp, str package, str class, str category, str data, str mimeType, str[] extras );</code> 
  <p> Send an intent. Intents are Android's high-level application interaction system. </p> 
  <p> Any parameter may be specified as undefined. </p> 
  <ul> 
   <li><i>targetComp</i>: the type of application component to target, one of <b>receiver, activity</b> or <b>service</b>. Defaults to <b>receiver</b>. </li>
   <li><i>package</i>: the application package to limt the intent to </li>
   <li><i>class</i>: the application class to limit the intent to </li>
   <li><i>category</i>: one of <b>none, alt, browsable, cardock, deskdock, home, info, launcher, preference, selectedalt, tab</b> or <b>test</b>, defaults to <b>none</b> </li>
   <li><i>extras</i>: extra data to pass, in the format key:value. May be undefined. Maximum length 2. </li>
  </ul> 
  <p> See also: action <a href="help/ah_send_intent.html">Send Intent</a>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="sendSMS"></a> 
  <h5>sendSMS</h5> 
  <code>var ok = sendSMS( str number, str text, boolean storeInMessagingApp );</code> 
  <p> Send an SMS. </p> 
  <p> See also: action <a href="help/ah_send_sms.html">Send SMS</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setAirplaneMode"></a> 
  <h5>setAirplaneMode</h5> 
  <code>var ok = setAirplaneMode( bool setOn )</code> 
  <p> Enable or disable Airplane Mode. </p> 
  <p> Get the current value with: </p> 
  <p> <code> var enabled = global( 'AIR' ); </code> </p> 
  <p>See also: function <a href="#setAirplaneRadios">setAirplaneRadios</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setAirplaneRadios"></a> 
  <h5>setAirplaneRadios</h5> 
  <code>var ok = setAirplaneRadios( str disableRadios )</code> 
  <p> Specify the radios which will be <b>disabled</b> when the device enters Airplane Mode. </p> 
  <p><i>disableRadios</i> is a comma-separated list with radio names from the following set: <b>cell, nfc, wifi, wimax, bt</b>. </p> 
  <p> Get the current value with: </p> 
  <p> <code> var radios = global( 'AIRR' ); </code> </p> 
  <p>See also: function <a href="#setAirplaneMode">setAirplaneMode</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setAlarm"></a> 
  <h5>setAlarm</h5> 
  <code>var ok = setAlarm( int hour, int min, str message, bool confirmFlag )</code> 
  <p> Create an alarm in the default alarm clock app. </p> 
  <p> <i>confirmFlag</i> specifies whether the app should confirm that the alarm has been set. </p> 
  <p><i>message</i> is optional. </p>
  <p> Requires Android version 2.3+. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setAutoSync"></a> 
  <h5>setAutoSync</h5> 
  <code>var ok = setAutoSync( bool setOn )</code> 
  <p> Enable or disable the global auto-sync setting. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="scanCard"></a> 
  <h5>scanCard</h5> 
  <p> <code>var ok = scanCard( str path )</code> </p> 
  <p> Force the system to scan the external storage card for new/deleted media. </p> 
  <p> If <i>path</i> is defined, only that will be scanned. </p> 
  <p> See also: action <a href="help/ah_scan_card.html">Scan Card</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setBT"></a> 
  <h5>setBT</h5> 
  <p> <code>var ok = setBT( bool setOn )</code> </p> 
  <p> Enable or disable the Bluetooth radio (if present). </p> 
  <p> Test BT state with: </p> 
  <p> <code> if ( global( 'BLUE' ) == "on" ) { doSomething(); } </code> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setBTID"></a> 
  <h5>setBTID</h5> 
  <p> <code>var ok = setBTID( str toSet )</code> </p> 
  <p> Set the bluetooth adapter ID (the name as seen by other devices). </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setGlobal"></a> 
  <h5>setGlobal</h5> 
  <code>setGlobal( str varName, str newValue )</code> 
  <p> Set the value of a Tasker global user variable. Prefixing varName with % is optional. </p> 
  <p> Arrays are <b>not</b> supported due to limitations of the Android JS interface. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setKey"></a> 
  <h5>setKey</h5> 
  <code>var ok = setKey( str keyName, str passphrase )</code> 
  <p> Set the passphrase for the specified <i>keyName</i>. </p> 
  <p>See Also: <a href="encryption.html">Encryption</a> in the Userguide.</p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setLocal"></a> 
  <h5>setLocal</h5> 
  <code>setLocal( str varName, str newValue )</code> 
  <p> Set the value of a Tasker <b>scene-local</b> user variable. Variable names should <b>not</b> be prefixed with <i>%</i>. </p> 
  <p> This function is only for use by JavaScript embedded in HTML and accessed via a WebView scene element. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setClip"></a> 
  <h5>setClip</h5> 
  <code>var ok = setClip( str text, bool appendFlag )</code> 
  <p> Set the global system clipboard. </p> 
  <p> Test the value with: </p>
  <p> <code> var clip = global( 'CLIP' ); </code> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="settings"></a> 
  <h5>settings</h5> 
  <code>var ok = settings( str screenName )</code> 
  <p> Show an Android System Settings screen. </p> 
  <p><i>screenName</i> must be one of <b>all, accessibility, addacount, airplanemode, apn, app, batteryinfo, appmanage bluetooth, date, deviceinfo, dictionary, display, inputmethod, internalstorage, locale, location, memorycard, networkoperator, powerusage, privacy, quicklaunch, security, mobiledata, search, sound, sync, wifi, wifiip</b> or <b>wireless</b>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setWallpaper"></a> 
  <h5>setWallpaper</h5> 
  <code>var ok = setWallpaper( str path )</code> 
  <p> Set the system home screen wallpaper. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="setWifi"></a> 
  <h5>setWifi</h5> 
  <p> <code>var ok = setWifi( bool setOn )</code> </p> 
  <p> Enable or disable the Wifi radio (if present). </p> 
  <p> Test wifi state with: </p> 
  <p> <code> if ( global( 'WIFI' ) == "on" ) { doSomething(); } </code> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="shell"></a> 
  <h5>shell</h5> 
  <code>var output = shell( str command, bool asRoot, int timoutSecs )</code> 
  <p> Run the shell command <i>command</i>. </p> 
  <p> <i>asRoot</i> will only have effect if the device is rooted. </p> 
  <p> <i>output</i> is 'undefined' if the shell command failed. It's maximum size is restricted to around 750K. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="showScene"></a> 
  <h5>showScene</h5> 
  <code>var ok = showScene( str name, str displayAs, int hoffset, int voffset, bool showExitIcon, bool waitForExit )</code> 
  <p> Show the named <a href="scenes.html">scene</a>, creating it first if necessary. </p> 
  <ul> 
   <li><i>displayAs</i>: options: <code>Overlay, OverBlocking, OverBlockFullDisplay, Dialog, DialogBlur, DialogDim, ActivityFullWindow, ActivityFullDisplay, ActivityFullDisplayNoTitle</code> </li>
   <li><i>hoffset, voffset</i>: percentage vertical and horizontal offset for the scene -100% to 100% (not relevant for full screen/window display types) </li>
   <li><i>showExitIcon</i>: display a small icon in the bottom right which destroys the scene when pressed </li>
   <li><i>waitForExit</i>: whether to wait for the scene to exit before continuing the script </li>
  </ul> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="shutdown"></a> 
  <h5>shutdown</h5> 
  <code>var ok = shutdown()</code> 
  <p> Shutdown the device. </p> 
  <p> Requires a rooted device. </p> 
  <p>See also: <a href="#reboot">reboot</a></p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="silentMode"></a> 
  <h5>silentMode</h5> 
  <code>var ok = silentMode( str mode )</code> 
  <p> Set the system silent ('ringer') mode. </p> 
  <p><i>mode</i> must be one of <b>off, vibrate</b> or <b>on</b></p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="sl4a"></a> 
  <h5>sl4a</h5> 
  <code>var ok = sl4a( str scriptName, boolean inTerminal )</code> 
  <p> Run a previously created <a href="https://code.google.com/p/android-scripting/">SL4A</a> script. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="soundEffects"></a> 
  <h5>soundEffects</h5> 
  <code>var ok = soundEffects( bool setTo )</code> 
  <p> Setting the system <i>Sound Effects</i> setting (sound from clicking on buttons etc. </p> 
  <p></p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="speakerphone"></a> 
  <h5>speakerphone</h5> 
  <code>var ok = speakerPhone( bool setFlag )</code> 
  <p> Enable or disable the speakerphone function. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="statusBar"></a> 
  <h5>statusBar</h5> 
  <code>var ok = statusBar( bool expanded )</code> 
  <p> Expand or contract the system status bar. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="stayOn"></a> 
  <h5>stayOn</h5> 
  <code>var ok = stayOn( str mode )</code> 
  <p> Specify whether the device should remain on when power is connected. </p> 
  <p> Possible <i>mode</i>s are <b>never, ac, usb, any</b>. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="stopLocation"></a> 
  <h5>stopLocation</h5> 
  <code>var ok = stopLocation()</code> 
  <p> Stop tracking a location provider. This is only relevant when a <a href="#getLocation">getLocation</a> function has been previously called with the <i>keepTracking</i> parameter set. </p> 
  <!-- ___________________________________________________________________ --> 
  <!-- A NAME="stopTask" />
<H5>stopTask</H5>

<CODE>var ok = stopTask( bool err )</CODE>

<P>
Stop the task (and therefore also the JavaScript) that the JavaScript is part off
</P --> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="systemLock"></a> 
  <h5>systemLock</h5> 
  <code>var ok = systemLock()</code> 
  <p> Turn off the display and activate the keyguard. </p> 
  <p> Requires Tasker's Device Administrator to be enabled in Android settings. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="taskRunning"></a> 
  <h5>taskRunning</h5> 
  <code>bool running = taskRunning( str taskName )</code> 
  <p> Whether the named Tasker task is currently running. Returns false if the task name is unknown. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="takeCall"></a> 
  <h5>takeCall</h5> 
  <p> <code>bool ok = takeCall();</code> </p> 
  <p> Auto-accept an incoming call (if there is one). </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="takePhoto"></a> 
  <h5>takePhoto</h5> 
  <p> <code>bool ok = takePhoto( int camera, str fileName, str resolution, bool insertGallery )</code> </p> 
  <p> Take a photo with the builtin camera. </p> 
  <ul> 
   <li><i>camera</i>: 0 = rear camera, 1 = front camera </li>
   <li><i>resolution</i>: format WxH e.g. 640x840 </li>
   <li><i>insertGallery</i>: whether to insert the resulting picture in the Android Gallery application </li>
  </ul> 
  <p> See also: action <a href="help/ah_take_photo.html">Take Photo</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="type"></a> 
  <h5>type</h5> 
  <p> <code>var ok = type( str text, int repeatCount )</code> </p> 
  <p> Simulate keyboard typing. </p> 
  <p> Requires a rooted device. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="unzip"></a> 
  <h5>unzip</h5> 
  <code>boolean ok = unzip( str zipPath, bool deleteZipAfter )</code> 
  <p> Unpack a Zip archive into the parent directory of the archive. </p> 
  <p> <i>deleteZip</i> causes the zip archive to be deleted after successful unpacking. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="usbTether"></a> 
  <h5>usbTether</h5> 
  <code>usbTether( bool set )</code> 
  <p> Enable or disable USB tethering. </p> 
  <p> See also: action <a href="help/ah_tether_usb.html">USB Tether</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="vibrate"></a> 
  <h5>vibrate</h5> 
  <code>vibrate( int durationMilliseconds )</code> 
  <p> Cause the device to vibrate for the specified time. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="vibratePattern"></a> 
  <h5>vibratePattern</h5> 
  <code>vibratePattern( str pattern )</code> 
  <p> Cause the device to vibrate following the specified <i>pattern</i>, which consists of a sequence of off then on millisecond durations e.g. </p> 
  <p> <code>500,1000,750,1000</code> </p> 
  <p> wait for 500ms, vibrates 1000ms, wait for 750ms, then vibrate for 1000ms. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="wait"></a> 
  <h5>wait</h5> 
  <code>wait( int durationMilliseconds )</code> 
  <p> Pause the script for the specified time. </p> 
  <p> Warning: may cause some preceeding functions not to complete in some situations. If in doubt, use JavaScript setTimeout() instead. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="wifiTether"></a> 
  <h5>wifiTether</h5> 
  <code>var ok = wifiTether( bool set )</code> 
  <p> Enable or disable Wifi tethering. </p> 
  <p> See also: action <a href="help/ah_tether_wifi.html">Wifi Tether</a> </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="writeFile"></a> 
  <h5>writeFile</h5> 
  <code>var ok = writeFile( str path, str text, bool append )</code> 
  <p> Write <i>text</i> to file <i>path</i>. </p> 
  <p>If <i>append</i> is specified, the text will be attached to the end of the existing file contents (if there are any). </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="zip"></a> 
  <h5>zip</h5> 
  <code>boolean ok = zip( str path, int level, bool deleteOriginalAfter )</code> 
  <p> Zip a file or directory. </p> 
  <p> <i>level</i> is the desired compression level from 1-9, with 9 resulting in the smallest file and the longest compression time. </p> 
  <p> <i>deleteOriginal</i> causes <i>path</i> to be deleted if the zip operation is successful. </p> 
  <!-- ___________________________________________________________________ --> 
  <a NAME="notes"></a> 
  <h3>Notes</h3> 
  <a name="streams"> <h4>Audio Streams</h4> Must be one of <b>call, system, ringer, media, alarm</b> or <b>notification</b> </a>
  <a name="colour"> <h4>Colours</h4> Colours are specified in <i>AARRGGBB</i> hexadecimal format, with solid white being <b>FFFFFFFF</b>. </a>
  <a NAME="paths"></a> 
  <h4>File Paths</h4> File paths can be specified as either absolute (start with 
  <b>/</b>) or relative (don't start with 
  <b>/</b>). 
  <p> Relative file paths are relative to the root of the internal storage media. So, for example, <code>pics/me.jpg</code> might resolve to <code>/sdcard/pics/me.jpg</code>. </p>   
 </body>
</html>