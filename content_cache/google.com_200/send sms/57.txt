<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <title>Sending JSON over TCP in Node.js using sockets - Sebastian Seilund</title> 
  <link rel="stylesheet" href="/css/app-25cffa5e1615126a73f96b3cc77147dc.css?vsn=d"> 
 </head> 
 <body> 
  <header class="top"> 
   <div class="top-name"> 
    <a href="/"> <img class="top-name-img" src="/images/logos/sebastian-seilund-logo-b9962eb403e1317f649d2369010a7dc4.png?vsn=d" alt="Sebastian Seilund"> <span class="top-name-text">Sebastian Seilund</span> </a> 
   </div> 
   <button class="top-menu-button"> 
    <div class="top-menu-button-line"></div> 
    <div class="top-menu-button-line"></div> 
    <div class="top-menu-button-line"></div> </button> 
   <div class="top-expandable"> 
    <nav class="top-menu"> 
     <li><a href="/">Blog</a></li> 
     <li><a href="/about">About</a></li> 
     <li><a href="/work">Work</a></li> 
     <li><a href="/contact">Contact</a></li> 
    </nav> 
    <div class="top-social"> 
     <a href="https://twitter.com/seilund" class="twitter-follow-button" data-show-count="false">Follow @seilund</a> 
     <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script> 
    </div> 
   </div> 
  </header> 
  <main class="main"> 
   <div class="content"> 
    <article class="post"> 
     <time class="post-time" datetime="2012-11-12T00:00:00"> 
      <div>
        Nov 12 2012 
      </div> </time> 
     <div class="post-title"> 
      <h1>Sending JSON over TCP in Node.js using sockets</h1> 
     </div> 
     <p>Today I have released my first Node.js open source module on npm. It’s called <a href="https://github.com/sebastianseilund/node-json-socket">json-socket</a>.</p> 
     <p>It makes it easy to send JSON over TCP in Node.js using sockets.</p> 
     <p>Normally when you send data through sockets using Node’s net package, you need to worry about data chunking and multiple messages in one chunk. JsonSocket automatically takes care of all that for you.</p> 
     <p>JsonSocket works by decorating the built-in <code>net.Socket</code> class.</p> 
     <p>Here is a simple example where a client can connect to the server and send two numbers (a and b) that the server multiplies and sends back the result.</p> 
     <p><strong>Server</strong></p> 
     <pre><code class="language-js">var net = require('net'),
    JsonSocket = require('json-socket');

var port = 9838;
var server = net.createServer();
server.listen(port);
server.on('connection', function(socket) { //This is a standard net.Socket
    socket = new JsonSocket(socket); //Now we've decorated the net.Socket to be a JsonSocket
    socket.on('message', function(message) {
        var result = message.a + message.b;
        socket.sendEndMessage({result: result});
    });
});</code></pre> 
     <p><strong>Client</strong></p> 
     <pre><code class="language-js">var net = require('net'),
    JsonSocket = require('json-socket');

var port = 9838; //The same port that the server is listening on
var host = '127.0.0.1';
var socket = new JsonSocket(new net.Socket()); //Decorate a standard net.Socket with JsonSocket
socket.connect(port, host);
socket.on('connect', function() { //Don't send until we're connected
    socket.sendMessage({a: 5, b: 7});
    socket.on('message', function(message) {
        console.log('The result is: '+message.result);
    });
});</code></pre> 
     <p>Check out the <a href="https://github.com/sebastianseilund/node-json-socket#readme">readme on GitHub</a> or install it directly using npm:</p> 
     <pre><code class="language-sh">npm install json-socket</code></pre> 
     <p>I’m going to use this module as a helper for another module that I have coming up. It’s a library that makes it easy to distribute workloads across multiple servers.</p> 
     <p>You’ll be able to write code like this:</p> 
     <pre><code class="language-js">var xxx = require('xxx'); //The new module

for (var someNumber = 1; someNumber &lt; 100; someNumber++) {
    xxx.runFunction(performAdvancedCalculation, someNumber, function(err, result) {
        //result was calculated on another server than this one.
    });
}

function performAdvancedCalculation(someNumber, callback) {
    callback(null, somethingThatTakesUpAllCpuAndIsVeryIntensive(someNumber));
}</code></pre> 
     <p>Which will run the function <code>performAdvancedCalculation</code> 100 times on different servers. All the other servers have to do is:</p> 
     <pre><code class="language-js">var xxx = require('xxx');
xxx.listen();</code></pre> 
     <p>It’s a very handy functionality, and I use it with great success in one of my large scale Node.js projects.</p> 
     <div id="disqus_thread"></div> 
     <script type="text/javascript">
    var disqus_shortname = 'sebastianseilund';
    var disqus_identifier = '2012-12-02-json-socket';
    (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
  </script> 
    </article> 
   </div> 
  </main> 
  <script src="/js/app-70dcc344e6a26fa7af9fb23030ad60db.js?vsn=d"></script> 
  <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-36546786-1', 'auto');
        ga('send', 'pageview');
      </script>   
 </body>
</html>