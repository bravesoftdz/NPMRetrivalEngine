<!doctype html>
<html xmlns:cc="http://creativecommons.org/ns#">
 <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# medium-com: http://ogp.me/ns/fb/medium-com#">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Internationalization in React – freeCodeCamp</title>
  <link rel="canonical" href="https://medium.freecodecamp.org/internationalization-in-react-7264738274a0">
  <meta name="title" content="Internationalization in React – freeCodeCamp">
  <meta name="referrer" content="unsafe-url">
  <meta name="description" content="Internationalization is a big problem. If you want your application to make a worldwide impact, you have to deal with language barriers. Unfortunately, the road from “Your funds will arrive by July…">
  <meta name="theme-color" content="#000000">
  <meta property="og:title" content="Internationalization in React – freeCodeCamp">
  <meta property="og:url" content="https://medium.freecodecamp.org/internationalization-in-react-7264738274a0">
  <meta property="og:image" content="https://cdn-images-1.medium.com/max/1200/1*hhTdD39DodXWsVl1OCdEpA.jpeg">
  <meta property="fb:app_id" content="542599432471018">
  <meta property="og:description" content="Internationalization is a big problem. If you want your application to make a worldwide impact, you have to deal with language barriers.">
  <meta name="twitter:description" content="Internationalization is a big problem. If you want your application to make a worldwide impact, you have to deal with language barriers.">
  <meta name="twitter:image:src" content="https://cdn-images-1.medium.com/max/1200/1*hhTdD39DodXWsVl1OCdEpA.jpeg">
  <link rel="publisher" href="https://plus.google.com/103654360130207659246">
  <link rel="author" href="https://medium.freecodecamp.org/@preethikasireddy">
  <meta property="author" content="Preethi Kasireddy">
  <meta property="og:type" content="article">
  <meta name="twitter:card" content="summary_large_image">
  <meta property="article:publisher" content="https://www.facebook.com/freecodecamp">
  <meta property="article:author" content="10152986375997506">
  <meta name="robots" content="index, follow">
  <meta property="article:published_time" content="2016-08-05T15:09:41.661Z">
  <meta name="twitter:creator" content="@iam_preethi">
  <meta name="twitter:site" content="@freecodecamp">
  <meta property="og:site_name" content="freeCodeCamp">
  <meta name="twitter:label1" value="Reading time">
  <meta name="twitter:data1" value="10 min read">
  <meta name="twitter:app:name:iphone" content="Medium">
  <meta name="twitter:app:id:iphone" content="828256236">
  <meta name="twitter:app:url:iphone" content="medium://p/7264738274a0">
  <meta property="al:ios:app_name" content="Medium">
  <meta property="al:ios:app_store_id" content="828256236">
  <meta property="al:android:package" content="com.medium.reader">
  <meta property="al:android:app_name" content="Medium">
  <meta property="al:ios:url" content="medium://p/7264738274a0">
  <meta property="al:android:url" content="medium://p/7264738274a0">
  <meta property="al:web:url" content="https://medium.freecodecamp.org/internationalization-in-react-7264738274a0">
  <link rel="search" type="application/opensearchdescription+xml" title="Medium" href="/osd.xml">
  <link rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/7264738274a0">
  <script type="application/ld+json">{"@context":"http://schema.org","@type":"NewsArticle","image":{"@type":"ImageObject","width":1920,"height":559,"url":"https://cdn-images-1.medium.com/max/2000/1*hhTdD39DodXWsVl1OCdEpA.jpeg"},"datePublished":"2016-08-05T15:09:41.661Z","dateModified":"2017-10-03T11:56:28.939Z","headline":"Internationalization in React","name":"Internationalization in React","keywords":["JavaScript","React","Web Development","Programming","Tech"],"author":{"@type":"Person","name":"Preethi Kasireddy","url":"https://medium.freecodecamp.org/@preethikasireddy"},"creator":["Preethi Kasireddy"],"publisher":{"@type":"Organization","name":"freeCodeCamp","url":"https://medium.freecodecamp.org","logo":{"@type":"ImageObject","width":500,"height":60,"url":"https://cdn-images-1.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}},"mainEntityOfPage":"https://medium.freecodecamp.org/internationalization-in-react-7264738274a0"}</script>
  <link rel="stylesheet" type="text/css" href="https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m.css">
  <link rel="stylesheet" href="https://cdn-static-1.medium.com/_/fp/css/main-branding-base.KaG5owo1xJGIHfGeaAmI2A.css">
  <script>if (window.top !== window.self) window.top.location = window.self.location.href;var OB_startTime = new Date().getTime(); var OB_loadErrors = []; function _onerror(e) { OB_loadErrors.push(e) }; if (document.addEventListener) document.addEventListener("error", _onerror, true); else if (document.attachEvent) document.attachEvent("onerror", _onerror); function _asyncScript(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("script"); s.type = "text/javascript"; s.async = true; s.src = u; f.parentNode.insertBefore(s, f);}function _asyncStyles(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("link"); s.rel = "stylesheet"; s.href = u; f.parentNode.insertBefore(s, f); return s}(new Image()).src = "/_/stat?event=pixel.load&origin=" + encodeURIComponent(location.origin);</script>
  <script>window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date; ga("create", "UA-24232453-2", "auto", {"allowLinker": true, "legacyCookieDomain": window.location.hostname}); ga("send", "pageview");ga("create", "UA-55446531-3", "auto", 'tracker0'); ga("tracker0.send", "pageview");</script>
  <script async src="https://www.google-analytics.com/analytics.js"></script>
  <!--[if lt IE 9]><script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js"></script><![endif]-->
  <link rel="icon" href="https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico" class="js-favicon">
  <link rel="apple-touch-icon" sizes="152x152" href="https://cdn-images-1.medium.com/fit/c/304/304/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="apple-touch-icon" sizes="120x120" href="https://cdn-images-1.medium.com/fit/c/240/240/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="apple-touch-icon" sizes="76x76" href="https://cdn-images-1.medium.com/fit/c/152/152/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="apple-touch-icon" sizes="60x60" href="https://cdn-images-1.medium.com/fit/c/120/120/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="mask-icon" href="https://cdn-static-1.medium.com/_/fp/icons/favicon.KjTfUJo7yJH_fCoUzzH3cg.svg" color="#171717">
 </head>
 <body itemscope class=" postShowScreen browser-chrome os-windows is-withMagicUnderlines v-glyph v-glyph--m is-noJs">
  <script>document.body.className = document.body.className.replace(/(^|\s)is-noJs(\s|$)/, "$1is-js$2")</script>
  <div class="site-main" id="container">
   <div class="butterBar butterBar--error"></div>
   <div class="surface">
    <div id="prerendered" class="screenContent">
     <canvas class="canvas-renderer"></canvas>
     <div class="container u-maxWidth740 u-xs-margin0 notesPositionContainer js-notesPositionContainer"></div>
     <div class="metabar u-clearfix js-metabar u-boxShadowBottomThinLighter u-textColorTransparentWhiteDarker u-fixed u-backgroundTransparentWhiteDarkest u-xs-sizeFullViewportWidth u-tintBgColor u-tintSpectrum">
      <div class="metabar-inner u-marginAuto u-maxWidth1000 u-flexCenter u-justifyContentSpaceBetween u-paddingLeft20 u-paddingRight20 u-height65 u-xs-height56 js-metabarMiddle">
       <div class="metabar-block u-flex1 u-flexCenter">
        <div class="js-metabarLogoLeft">
         <a href="https://medium.com/" data-log-event="home" class="siteNav-logo u-flexCenter u-paddingTop0"><span class="svgIcon svgIcon--logoMonogram svgIcon--45px is-flushLeft u-textColorDarker">
           <svg class="svgIcon-use" width="45" height="45" viewbox="0 0 45 45">
            <path d="M5 40V5h35v35H5zm8.56-12.627c0 .555-.027.687-.318 1.03l-2.457 2.985v.396h6.974v-.396l-2.456-2.985c-.291-.343-.344-.502-.344-1.03V18.42l6.127 13.364h.714l5.256-13.364v10.644c0 .29 0 .342-.185.528l-1.848 1.796v.396h9.19v-.396l-1.822-1.796c-.184-.186-.21-.238-.21-.528V15.937c0-.291.026-.344.21-.528l1.823-1.797v-.396h-6.471l-4.622 11.542-5.203-11.542h-6.79v.396l2.14 2.64c.239.292.291.37.291.768v10.353z" />
           </svg></span><span class="u-textScreenReader">Homepage</span></a>
        </div>
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56 u-marginRight18">
         <div class="u-alignBlock">
          <a class="js-collectionLogoOrName" href="https://medium.freecodecamp.org?source=logo-lo_1db8d9c968f3---336d898217ee"><img height="36" width="300" class="u-paddingTop5" src="https://cdn-images-1.medium.com/letterbox/600/72/50/50/1*wViBNJ1o9rM5p6b-gf3vxg.png?source=logoAvatar-lo_1db8d9c968f3---336d898217ee" alt="freeCodeCamp"></a>
         </div>
        </div>
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56 u-xs-hide">
         <div class="u-alignBlock">
          <div class="buttonSet u-lineHeightInherit u-marginLeft0">
           <div class="buttonSet-inner">
            <button class="button button--primary u-paddingLeft10 u-paddingRight10 u-height19 u-lineHeight13 u-verticalAlignMiddle u-fontSize12 u-uiTextMedium button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal js-relationshipButton is-smallPill" data-action="sign-up-prompt" data-sign-in-action="toggle-follow-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/free-code-camp" data-action-source="----336d898217ee----------------------follow_header" data-collection-id="336d898217ee"><span class="button-label  js-buttonLabel">Follow</span></button>
           </div>
           <a class="button button--light button--chromeless is-touchIconBlackPulse u-baseColor--buttonLight button--withIcon button--withSvgIcon" href="https://twitter.com/freecodecamp" title="Visit “freeCodeCamp” on Twitter" aria-label="Visit “freeCodeCamp” on Twitter" rel="me" target="_blank"><span class="button-defaultState"><span class="svgIcon svgIcon--twitterFilled svgIcon--25px">
              <svg class="svgIcon-use" width="25" height="25" viewbox="0 0 25 25">
               <path d="M21.725 5.338c-.744.47-1.605.804-2.513 1.006a3.978 3.978 0 0 0-2.942-1.293c-2.22 0-4.02 1.81-4.02 4.02 0 .32.034.63.07.94-3.31-.18-6.27-1.78-8.255-4.23a4.544 4.544 0 0 0-.574 2.01c.04 1.43.74 2.66 1.8 3.38-.63-.01-1.25-.19-1.79-.5v.08c0 1.93 1.38 3.56 3.23 3.95-.34.07-.7.12-1.07.14-.25-.02-.5-.04-.72-.07.49 1.58 1.97 2.74 3.74 2.8a8.49 8.49 0 0 1-5.02 1.72c-.3-.03-.62-.04-.93-.07A11.447 11.447 0 0 0 8.88 21c7.386 0 11.43-6.13 11.414-11.414.015-.21.01-.38 0-.578a7.604 7.604 0 0 0 2.01-2.08 7.27 7.27 0 0 1-2.297.645 3.856 3.856 0 0 0 1.72-2.23" />
              </svg></span></span></a>
           <a class="button button--light button--chromeless is-touchIconBlackPulse u-baseColor--buttonLight button--withIcon button--withSvgIcon u-paddingLeft0" href="//facebook.com/freecodecamp" title="Visit “freeCodeCamp” on Facebook" aria-label="Visit “freeCodeCamp” on Facebook" rel="me" target="_blank"><span class="button-defaultState"><span class="svgIcon svgIcon--facebookFilled svgIcon--25px">
              <svg class="svgIcon-use" width="25" height="25" viewbox="0 0 25 25">
               <path d="M21 12.646C21 7.65 16.97 3.6 12 3.6s-9 4.05-9 9.046a9.026 9.026 0 0 0 7.59 8.924v-6.376H8.395V12.64h2.193v-1.88c0-2.186 1.328-3.375 3.267-3.375.93 0 1.728.07 1.96.1V9.77H14.47c-1.055 0-1.26.503-1.26 1.242v1.63h2.517l-.33 2.554H13.21V21.6c4.398-.597 7.79-4.373 7.79-8.954" />
              </svg></span></span></a>
          </div>
         </div>
        </div>
       </div>
       <div class="metabar-block u-flex0 u-flexCenter">
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56">
         <div class="u-alignBlock">
          <div class="buttonSet u-lineHeightInherit u-block u-margin0 u-flexCenter">
           <a class="button button--primary button--light button--chromeless u-accentColor--buttonNormal is-inSiteNavBar js-signUpButton" href="https://medium.com/m/signin?redirect=https%3A%2F%2Fmedium.freecodecamp.org%2Finternationalization-in-react-7264738274a0&amp;source=--------------------------nav_reg">Sign in / Sign up</a>
          </div>
         </div>
        </div>
       </div>
       <div class="u-absolute u-sizeFullWidth u-top0 u-right0 u-textAlignCenter js-metabarLogoCentered u-hide">
        <a href="https://medium.com/" data-log-event="home" class="siteNav-logo u-flexCenter u-paddingTop0"><span class="svgIcon svgIcon--logoMonogram svgIcon--45px is-flushLeft u-textColorDarker">
          <svg class="svgIcon-use" width="45" height="45" viewbox="0 0 45 45">
           <path d="M5 40V5h35v35H5zm8.56-12.627c0 .555-.027.687-.318 1.03l-2.457 2.985v.396h6.974v-.396l-2.456-2.985c-.291-.343-.344-.502-.344-1.03V18.42l6.127 13.364h.714l5.256-13.364v10.644c0 .29 0 .342-.185.528l-1.848 1.796v.396h9.19v-.396l-1.822-1.796c-.184-.186-.21-.238-.21-.528V15.937c0-.291.026-.344.21-.528l1.823-1.797v-.396h-6.471l-4.622 11.542-5.203-11.542h-6.79v.396l2.14 2.64c.239.292.291.37.291.768v10.353z" />
          </svg></span><span class="u-textScreenReader">Homepage</span></a>
       </div>
      </div>
      <div class="metabar-inner u-marginAuto u-maxWidth1000 js-metabarBottom">
       <nav role="navigation" class="metabar-block metabar-block--below u-overflowHiddenY u-height40">
        <ul class="u-textAlignLeft u-noWrap u-overflowX js-collectionNavItems u-sm-paddingLeft20 u-sm-paddingRight20 u-paddingBottom100">
         <li class="metabar-navItem js-collectionNavItem u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken js-homeNav u-baseColor--link" href="https://medium.freecodecamp.org">Home</a></li>
         <li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://medium.freecodecamp.org/tagged/web-development">Dev</a></li>
         <li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://medium.freecodecamp.org/tagged/design">Design</a></li>
         <li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://medium.freecodecamp.org/tagged/data-science">Data</a></li>
         <span class="u-borderLeft1 u-paddingLeft22 u-xs-paddingLeft12 u-baseColor--borderLight"></span>
         <li class="metabar-navItem js-collectionNavItem  is-external u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darkenOnHover u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://freecodecamp.com?ref=mn" rel="nofollow noopener" target="_blank">Learn to code for free</a></li>
         <li class="metabar-navItem js-collectionNavItem u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-top1" href="https://medium.freecodecamp.org/search" title="Search" aria-label="Search"><span class="button-defaultState"><span class="svgIcon svgIcon--search svgIcon--25px">
             <svg class="svgIcon-use" width="25" height="25" viewbox="0 0 25 25">
              <path d="M20.067 18.933l-4.157-4.157a6 6 0 1 0-.884.884l4.157 4.157a.624.624 0 1 0 .884-.884zM6.5 11c0-2.62 2.13-4.75 4.75-4.75S16 8.38 16 11s-2.13 4.75-4.75 4.75S6.5 13.62 6.5 11z" />
             </svg></span></span></a></li>
        </ul>
       </nav>
      </div>
     </div>
     <div class="metabar metabar--spacer js-metabarSpacer u-tintBgColor  u-height105 u-xs-height95"></div>
     <main role="main">
      <article class=" u-sizeViewHeightMin100 u-overflowHidden postArticle postArticle--full is-withAccentColors u-marginBottom40" lang="en">
       <header class="container u-maxWidth740">
        <div class="postMetaHeader u-paddingBottom10 row">
         <div class="col u-size12of12 js-postMetaLockup">
          <div class="postMetaLockup postMetaLockup--authorWithBio u-flex js-postMetaLockup">
           <div class="u-flex0">
            <a class="link avatar u-baseColor--link" href="https://medium.freecodecamp.org/@preethikasireddy?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="d446dafbe292" data-action-type="hover" data-user-id="d446dafbe292" data-collection-slug="free-code-camp" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*lHIefjTQECM96G6Ef8xn6g.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Preethi Kasireddy"></a>
           </div>
           <div class="u-flex1 u-paddingLeft15 u-overflowHidden">
            <a class="link link link--darken link--darker u-baseColor--link" href="https://medium.freecodecamp.org/@preethikasireddy?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="d446dafbe292" data-action-type="hover" data-user-id="d446dafbe292" data-collection-slug="free-code-camp" dir="auto">Preethi Kasireddy</a>
            <span class="followState js-followState" data-user-id="d446dafbe292"><button class="button u-paddingLeft10 u-paddingRight10 u-height19 u-lineHeight13 u-verticalAlignMiddle u-fontSize12 u-uiTextMedium u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton u-marginLeft10 u-marginTopNegative2 u-xs-hide" data-action="sign-up-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-redirect="https://medium.freecodecamp.org/internationalization-in-react-7264738274a0" data-action-source="post_header_lockup"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary u-paddingLeft10 u-paddingRight10 u-height19 u-lineHeight13 u-verticalAlignMiddle u-fontSize12 u-uiTextMedium u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton u-marginLeft10 u-marginTopNegative2 u-xs-hide" data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/d446dafbe292" data-action-source="post_header_lockup-d446dafbe292-------------------------follow_byline"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span>
            <div class="postMetaInline u-noWrapWithEllipsis u-xs-normalWrap u-xs-lineClamp2 u-xs-maxHeight2LineHeightBase">
             Blockchain Engineer. I have a passion for understanding things at a fundamental level and sharing it as clearly as possible.
            </div>
            <div class="postMetaInline js-testPostMetaInlineSupplemental">
             <time datetime="2016-08-05T15:09:41.661Z">Aug 5, 2016</time>
             <span class="middotDivider u-fontSize12"></span>
             <span class="readingTime" title="10 min read"></span>
            </div>
           </div>
          </div>
         </div>
        </div>
       </header>
       <div class="postArticle-content js-postField js-notesSource js-trackedPost" data-post-id="7264738274a0" data-source="post_page" data-collection-id="336d898217ee" data-tracking-context="postPage">
        <section name="90aa" class="section section--body section--first section--last">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--insetColumn">
           <h1 name="aaee" id="aaee" class="graf graf--h3 graf--leading graf--title">Internationalization in&nbsp;React</h1>
          </div>
          <div class="section-inner sectionLayout--fullWidth">
           <figure name="18e5" id="18e5" class="graf graf--figure graf--layoutFillWidth graf-after--h3">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 29.099999999999998%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*hhTdD39DodXWsVl1OCdEpA.jpeg" data-width="2716" data-height="791">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*hhTdD39DodXWsVl1OCdEpA.jpeg?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/2000/1*hhTdD39DodXWsVl1OCdEpA.jpeg">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/2000/1*hhTdD39DodXWsVl1OCdEpA.jpeg">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             <a href="http://globalfragrancebusiness.com/?page_id=31" data-href="http://globalfragrancebusiness.com/?page_id=31" class="markup--anchor markup--figure-anchor" rel="noopener" target="_blank">Image credit</a>
            </figcaption>
           </figure>
          </div>
          <div class="section-inner sectionLayout--insetColumn">
           <p name="19a5" id="19a5" class="graf graf--p graf-after--figure">Internationalization is a big problem. If you want your application to make a worldwide impact, you have to deal with language barriers.</p>
           <p name="08fb" id="08fb" class="graf graf--p graf-after--p">Unfortunately, the road from “Your funds will arrive by July 7th” to “Vos fonds arriveront le 7 Juillet” is far from simple.</p>
           <p name="bdc2" id="bdc2" class="graf graf--p graf-after--p">Before your application can succeed outside the English-speaking world, you’ll have to adapt all your strings, dates, and numbers to the conventions of different cultures.</p>
           <p name="b663" id="b663" class="graf graf--p graf-after--p">Developers call this practice <strong class="markup--strong markup--p-strong">internationalization </strong>(which is often abbreviated to “<strong class="markup--strong markup--p-strong">i18n</strong>,” because there are 18 letters between the ‘<strong class="markup--strong markup--p-strong">I</strong>’ and the ’<strong class="markup--strong markup--p-strong">n</strong>’ in the word <strong class="markup--strong markup--p-strong">I</strong>nternationalizatio<strong class="markup--strong markup--p-strong">n</strong>.)</p>
           <p name="3877" id="3877" class="graf graf--p graf-after--p">One reason we overlook internationalization is simply because it’s hard to get right. Every language has different rules and conventions. Adapting to these rules and conventions takes time and effort.</p>
           <h3 name="3cfb" id="3cfb" class="graf graf--h3 graf-after--p">The solution: React&nbsp;Intl</h3>
           <p name="5e39" id="5e39" class="graf graf--p graf-after--h3">But internationalization doesn’t have to be hard, thanks to a new React library. <a href="https://github.com/yahoo/react-intl" data-href="https://github.com/yahoo/react-intl" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"><strong class="markup--strong markup--p-strong">React Intl</strong></a> is an open-source project from Yahoo, and part of <a href="http://formatjs.io/" data-href="http://formatjs.io/" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Format.js</a>, a collection of JavaScript libraries for internationalization that builds on Javascript’s built-in Intl API.</p>
           <p name="43fa" id="43fa" class="graf graf--p graf-after--p">The <a href="https://github.com/yahoo/react-intl" data-href="https://github.com/yahoo/react-intl" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">React Intl</a> library makes internalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization.</p>
           <p name="f562" id="f562" class="graf graf--p graf-after--p">Let’s give it a walk-through.</p>
           <h3 name="3f6f" id="3f6f" class="graf graf--h3 graf-after--p">Core concepts</h3>
           <p name="b4ba" id="b4ba" class="graf graf--p graf-after--h3">Here are the core concepts you’ll need under your belt to get the most out of React Intl:</p>
           <h4 name="0cfd" id="0cfd" class="graf graf--h4 graf-after--p">JavaScript’s Internationalization API</h4>
           <p name="1107" id="1107" class="graf graf--p graf-after--h4">JavaScript has an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" data-href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Internationalization API</a> specification which defines the <strong class="markup--strong markup--p-strong">Intl</strong> object as a standard built-in global object.</p>
           <p name="a2ef" id="a2ef" class="graf graf--p graf-after--p">React Intl essentially uses and builds on this API. As long as the browser supports these APIs, React Intl will continue to work its magic.</p>
           <p name="1bb2" id="1bb2" class="graf graf--p graf-after--p"><em class="markup--em markup--p-em">Note: the only browser that doesn’t currently support these APIs is Safari. We’ll use a polyfill to overcome this in the sample project below.</em></p>
           <h4 name="1ff3" id="1ff3" class="graf graf--h4 graf-after--p">Module bundlers</h4>
           <p name="7cba" id="7cba" class="graf graf--p graf-after--h4">React Intl distributes its package via ES6, CommonJS, and UMD modules. Hence, it works really well with bundlers like Webpack, Browserify and Rollup.</p>
           <p name="51ff" id="51ff" class="graf graf--p graf-after--p">In the sample project, we’ll be using Webpack as our module bundler.</p>
           <p name="3230" id="3230" class="graf graf--p graf-after--p">If you don’t plan to use a module bundler to load React Intl into your application, I recommend the documentation for more information on other approaches (e.g. via Node.js).</p>
           <h4 name="f451" id="f451" class="graf graf--h4 graf-after--p">Loading Locale&nbsp;data</h4>
           <p name="48cd" id="48cd" class="graf graf--p graf-after--h4">React Intl relies on this locale data to support plural and relative-time formatting. Locale data defines the following for each specific locale:</p>
           <ul class="postList">
            <li name="707d" id="707d" class="graf graf--li graf-after--p">Locale-specific patterns for formatting and parsing dates, times, time zones, numbers and currency values</li>
            <li name="eee9" id="eee9" class="graf graf--li graf-after--li">Translations for names of currencies, eras, months, weekdays, etc.</li>
            <li name="2d27" id="2d27" class="graf graf--li graf-after--li">Language and script information (plural cases, characters used, gender of lists, capitalization, writing direction, etc.)</li>
            <li name="3432" id="3432" class="graf graf--li graf-after--li">Country information (currency, calendar preference, week conventions, telephone codes, etc.)</li>
           </ul>
           <p name="1498" id="1498" class="graf graf--p graf-after--li">If you’re using Browserify, Webpack or Rollup to bundle React Intl for the browser, it will only contain locale data for basic English by default. The rest of the locale data is <strong class="markup--strong markup--p-strong">not</strong> included in the main library. So in this sample project we’ll cover how to import the locale data per language you choose to support in your app.</p>
           <p name="e3d5" id="e3d5" class="graf graf--p graf-after--p">Keep in mind that if you’re using React Intl via Node.js, all locale data will be loaded into memory, so you can skip this step.</p>
           <h4 name="916a" id="916a" class="graf graf--h4 graf-after--p">Formatting Data using React Components vs. the&nbsp;API</h4>
           <p name="ca79" id="ca79" class="graf graf--p graf-after--h4">The library provides two ways to format strings, numbers, and dates: <strong class="markup--strong markup--p-strong">React</strong> <strong class="markup--strong markup--p-strong">components</strong> or an <strong class="markup--strong markup--p-strong">API</strong>.</p>
           <p name="0456" id="0456" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">React Component:</strong></p>
           <figure name="ebfc" id="ebfc" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/00b78e1e3cdc4b0432b4125a04e3dfbb?postId=7264738274a0" data-media-id="00b78e1e3cdc4b0432b4125a04e3dfbb" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
            <figcaption class="imageCaption">
             Component
            </figcaption>
           </figure>
           <p name="89a0" id="89a0" class="graf graf--p graf-after--figure"><strong class="markup--strong markup--p-strong">API:</strong></p>
           <figure name="e6cd" id="e6cd" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/ef9779c11134f63c89135b18bd0f1e34?postId=7264738274a0" data-media-id="ef9779c11134f63c89135b18bd0f1e34" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
            <figcaption class="imageCaption">
             API
            </figcaption>
           </figure>
           <p name="d6d2" id="d6d2" class="graf graf--p graf-after--figure">I take the first approach whenever possible, using declarative idiomatic-React components to format data over the imperative API.</p>
           <p name="d385" id="d385" class="graf graf--p graf-after--p">The benefit of this approach is that it lets us a) compose components with other components, b) allows for rich text and string formatting, c) provides prop type warnings for formatting options, and d) implements <em class="markup--em markup--p-em">shouldComponentUpdate</em> to avoid costly formatting operations.</p>
           <p name="ce6a" id="ce6a" class="graf graf--p graf-after--p">Of course, there are times when your only choice is to use the API (For example: passing a string as a prop, a name attribute of an HTML element, etc.), so it still comes in handy.</p>
           <h3 name="5f09" id="5f09" class="graf graf--h3 graf-after--p">Sample project</h3>
           <p name="9821" id="9821" class="graf graf--p graf-after--h3">The best way to learn is to see a live example. For this post, I made a <a href="https://github.com/iam-peekay/inbox-react-intl" data-href="https://github.com/iam-peekay/inbox-react-intl" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">simple React project</a> which consists of a main header component, a subheader component, and a few widget components, each with their own headers and body.</p>
           <p name="72bd" id="72bd" class="graf graf--p graf-after--p">First, we’ll walk through the process of setting up React Intl. Then we’ll use the components and API to convert strings, numbers, and dates used within the components.</p>
           <h3 name="620e" id="620e" class="graf graf--h3 graf-after--p">Setting up</h3>
           <p name="d086" id="d086" class="graf graf--p graf-after--h3">Let’s assume we have an existing React application that we’re working from. First, you’ll need to install the React Intl package:</p>
           <figure name="98a1" id="98a1" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/445882fb2c2584f1d20659a016565789?postId=7264738274a0" data-media-id="445882fb2c2584f1d20659a016565789" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="dcf8" id="dcf8" class="graf graf--p graf-after--figure">Next, we’ll need to install the babel plugin for React Intl:</p>
           <figure name="f740" id="f740" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/c5c439d8c43ab07f6b5865fd29c5c252?postId=7264738274a0" data-media-id="c5c439d8c43ab07f6b5865fd29c5c252" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="0caa" id="0caa" class="graf graf--p graf-after--figure">To actually have the babel plugin do its magic, we need to set up our&nbsp;<strong class="markup--strong markup--p-strong">.babelrc</strong> file to include this plugin. Here’s what my&nbsp;<strong class="markup--strong markup--p-strong">.babelrc </strong>looks like with the react-intl plugin added to it (lines 6–11):</p>
           <figure name="4131" id="4131" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/57fa407140c8cb38786b8e3198a4e9d5?postId=7264738274a0" data-media-id="57fa407140c8cb38786b8e3198a4e9d5" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="61f2" id="61f2" class="graf graf--p graf-after--figure">What this babel plugin does is it extract all the string messages in your application that are defined using either <strong class="markup--strong markup--p-strong">defineMessages</strong>, <strong class="markup--strong markup--p-strong">&lt;FormattedMessage&gt;</strong>, or <strong class="markup--strong markup--p-strong">&lt;FormattedHTMLMessage&gt;</strong>.</p>
           <p name="e2ad" id="e2ad" class="graf graf--p graf-after--p">(Note that <strong class="markup--strong markup--p-strong">defineMessages</strong>, <strong class="markup--strong markup--p-strong">&lt;FormattedMessage&gt;</strong>, and <strong class="markup--strong markup--p-strong">&lt;FormattedHTMLMessage&gt;</strong> are all named exports of the React Intl package).</p>
           <p name="3f7b" id="3f7b" class="graf graf--p graf-after--p">Once extracted, it generates JSON files which contain the string messages and places them in the directory you defined in the <strong class="markup--strong markup--p-strong">messagesDir</strong> path above.</p>
           <figure name="f7f3" id="f7f3" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 588px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 84%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*KMLhO1bgMHip2XhcH3ZmMw.png" data-width="860" data-height="722" data-action="zoom" data-action-value="1*KMLhO1bgMHip2XhcH3ZmMw.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*KMLhO1bgMHip2XhcH3ZmMw.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*KMLhO1bgMHip2XhcH3ZmMw.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*KMLhO1bgMHip2XhcH3ZmMw.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             Extracted messages
            </figcaption>
           </figure>
           <h3 name="4b14" id="4b14" class="graf graf--h3 graf-after--figure">Loading data</h3>
           <p name="7256" id="7256" class="graf graf--p graf-after--h3">Next, let’s load the appropriate locale data for the languages that we need to support.</p>
           <p name="e0b4" id="e0b4" class="graf graf--p graf-after--p">As I mentioned above, if you’re bundling for the browser using Webpack, Browserify or Rollup, React Intl comes English-only by default. So we have to add the other locale data manually.</p>
           <p name="f573" id="f573" class="graf graf--p graf-after--p">In the root component file, we add the locale data using the <strong class="markup--strong markup--p-strong">addLocaleData</strong> API. The data will then be passed the contents of the locale data module, which will then be registered in its locale data registry.</p>
           <p name="70b2" id="70b2" class="graf graf--p graf-after--p">For this sample project, I’m going to assume we’re supporting 4 languages: English, Spanish, French and Italian.</p>
           <figure name="b452" id="b452" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/bb200e6c67817af13a40eb10c3be91e4?postId=7264738274a0" data-media-id="bb200e6c67817af13a40eb10c3be91e4" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
            <figcaption class="imageCaption">
             Loading locale data
            </figcaption>
           </figure>
           <p name="eb36" id="eb36" class="graf graf--p graf-after--figure"><strong class="markup--strong markup--p-strong">Note</strong>: If your app supports a lot more, the recommended approach to adding locale data is to dynamically load the locale data based on the current user’s language. Read the React Intl docs for more info on this approach.</p>
           <h3 name="10c8" id="10c8" class="graf graf--h3 graf-after--p">Create the i18n context in your React application</h3>
           <p name="dba0" id="dba0" class="graf graf--p graf-after--h3">So far, we’ve installed the React Intl package, set up our<strong class="markup--strong markup--p-strong">&nbsp;.babelrc</strong> plugin, and loaded the appropriate locale data.</p>
           <p name="97c7" id="97c7" class="graf graf--p graf-after--p">One final step is to create an <strong class="markup--strong markup--p-strong">i18n</strong> context for all our React components so that the current user’s locale and translated message (based on the user’s locale) can be loaded into the React Intl Components that you define in your app.</p>
           <p name="ee9c" id="ee9c" class="graf graf--p graf-after--p">To do this, we first define the messages to pass to <strong class="markup--strong markup--p-strong">IntlProvider</strong> based on the user’s locale (see lines 18–26 below). Then we wrap the root React component with <strong class="markup--strong markup--p-strong">IntlProvider, </strong>which is<strong class="markup--strong markup--p-strong"> </strong>a named export provided by React-Intl (see lines 31–33):</p>
           <figure name="2871" id="2871" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/29792f23c46ee7806270d31978336316?postId=7264738274a0" data-media-id="29792f23c46ee7806270d31978336316" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="d1f3" id="d1f3" class="graf graf--p graf-after--figure">In this setup, we’re assuming that our translated data will live in <strong class="markup--strong markup--p-strong">build/locales/data.json</strong> and that the data is grouped by language, like so:</p>
           <figure name="823f" id="823f" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/80a2fc965ef5942efa34bd75bb033bd0?postId=7264738274a0" data-media-id="80a2fc965ef5942efa34bd75bb033bd0" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <h3 name="1bb4" id="1bb4" class="graf graf--h3 graf-after--figure">Build a script for translating</h3>
           <p name="238d" id="238d" class="graf graf--p graf-after--h3">Now that we have the configuration all done, let’s take a look at how we can build a simple script that will grab all the strings that babel extracts for us into multiple JSON files, and combine them into one file.</p>
           <p name="95eb" id="95eb" class="graf graf--p graf-after--p">The point of this script is to accumulate all the English strings so that we can then upload these strings to a translation service, have them be translated into the different languages we support, and then place the results into the <strong class="markup--strong markup--p-strong">build/locales/data.json</strong> file we used above. Once there, the <strong class="markup--strong markup--p-strong">IntlProvider</strong> component can finally load them into our root component.</p>
           <p name="4acd" id="4acd" class="graf graf--p graf-after--p">Since we don’t need to actually do the translations in this post, we’ll skip this step and just build a script that puts everything in one file. Just remember to loop in a translation service provider in real-world applications&nbsp;:)</p>
           <p name="7066" id="7066" class="graf graf--p graf-after--p">All credit goes to the React Intl library authors for generating this script below:</p>
           <figure name="a2b3" id="a2b3" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/62a356fcd5eb80105371ca777f132d81?postId=7264738274a0" data-media-id="62a356fcd5eb80105371ca777f132d81" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <h3 name="1ee1" id="1ee1" class="graf graf--h3 graf-after--figure">Steps to convert dates, numbers and strings with React&nbsp;Intl</h3>
           <p name="ccdd" id="ccdd" class="graf graf--p graf-after--h3">Okay?—?we’re finally ready to do some formatting!</p>
           <p name="47fa" id="47fa" class="graf graf--p graf-after--p">The sample app is a simple layout with a <strong class="markup--strong markup--p-strong">header</strong>, <strong class="markup--strong markup--p-strong">subheader</strong>, and <strong class="markup--strong markup--p-strong">widgets</strong>, each of which contains strings, numbers, and/or a dates:</p>
           <figure name="0e06" id="0e06" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 365px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 52.1%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*CcUQumAeLtKuNb9BpQmp_g.png" data-width="2864" data-height="1492" data-action="zoom" data-action-value="1*CcUQumAeLtKuNb9BpQmp_g.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*CcUQumAeLtKuNb9BpQmp_g.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*CcUQumAeLtKuNb9BpQmp_g.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*CcUQumAeLtKuNb9BpQmp_g.png">
              </noscript>
             </div>
            </div>
           </figure>
           <p name="6d6e" id="6d6e" class="graf graf--p graf-after--figure">Nothing sophisticated, but it’s enough to get us started.</p>
           <h4 name="b5a6" id="b5a6" class="graf graf--h4 graf-after--p">Header</h4>
           <p name="7b8e" id="7b8e" class="graf graf--p graf-after--h4">First, we’ll look at the header which says: <em class="markup--em markup--p-em">“Welcome to your dashboard, Preethi!”</em></p>
           <p name="c7bf" id="c7bf" class="graf graf--p graf-after--p">To convert this, we’ll use the <strong class="markup--strong markup--p-strong">FormattedMessage</strong> component:</p>
           <figure name="1430" id="1430" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/91036d12b3aa77d97fd9a193533d4214?postId=7264738274a0" data-media-id="91036d12b3aa77d97fd9a193533d4214" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="8001" id="8001" class="graf graf--p graf-after--figure">The <strong class="markup--strong markup--p-strong">FormattedMessage</strong> component has props that correspond something called a “<strong class="markup--strong markup--p-strong">Message</strong> <strong class="markup--strong markup--p-strong">Descriptor</strong>” in React Intl. The <strong class="markup--strong markup--p-strong">Message Descriptor</strong> is the format used to define default messages/strings, and is useful for providing the data necessary for having the strings/messages translated. It contains the following properties:</p>
           <ul class="postList">
            <li name="a8ac" id="a8ac" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">id</strong>: A unique, stable identifier for the message</li>
            <li name="3357" id="3357" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">description</strong>: Context for the translator about how it’s used in the UI (optional)</li>
            <li name="0f5a" id="0f5a" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">defaultMessage</strong>: The default message (in English)</li>
           </ul>
           <p name="39d9" id="39d9" class="graf graf--p graf-after--li">The <strong class="markup--strong markup--p-strong">id</strong> prop must be unique for every message defined in your app. What’s awesome is that the <strong class="markup--strong markup--p-strong">defaultMessage</strong> can be passed data from the props, as is the case in <strong class="markup--strong markup--p-strong">name</strong> above. (Note that the values that are passed as data won’t get translated?—?they’re simply inserted into the final translated string as-is.)</p>
           <h4 name="73c3" id="73c3" class="graf graf--h4 graf-after--p">SubHeader</h4>
           <p name="c333" id="c333" class="graf graf--p graf-after--h4">Next, let’s look at the Subheader, which is slightly more involved:</p>
           <figure name="5ac0" id="5ac0" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/8da9c3afb2b7c82550e1a8be013b3ca4?postId=7264738274a0" data-media-id="8da9c3afb2b7c82550e1a8be013b3ca4" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="4cf3" id="4cf3" class="graf graf--p graf-after--figure">The ability to compose components within other components (i.e. have <strong class="markup--strong markup--p-strong">Formatted</strong>* items within another <strong class="markup--strong markup--p-strong">Formatted</strong>* item) is a powerful feature of React Intl.</p>
           <p name="fc63" id="fc63" class="graf graf--p graf-after--p">You can see in the above example that <strong class="markup--strong markup--p-strong">unreadCount</strong> is a <strong class="markup--strong markup--p-strong">FormattedNumber</strong>, and <strong class="markup--strong markup--p-strong">notifications</strong> is a <strong class="markup--strong markup--p-strong">FormattedPlural</strong>, and that both are values passed into <strong class="markup--strong markup--p-strong">FormattedMessages</strong>’s <strong class="markup--strong markup--p-strong">defaultMessage</strong>. Beautiful!</p>
           <p name="c889" id="c889" class="graf graf--p graf-after--p">Another slick feature is <strong class="markup--strong markup--p-strong">FormattedRelative</strong>, which will render the formatted relative time:</p>
           <figure name="a724" id="a724" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/11e3cd60a040986b4a0807f0603c7099?postId=7264738274a0" data-media-id="11e3cd60a040986b4a0807f0603c7099" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="e455" id="e455" class="graf graf--p graf-after--figure">Once translated and formatted, it will read: <em class="markup--em markup--p-em">“You last logged in 4 hours ago!” </em>(Or however long ago lastLogin was.)</p>
           <h3 name="3b52" id="3b52" class="graf graf--h3 graf-after--p">Passing formatted strings as components</h3>
           <p name="71c1" id="71c1" class="graf graf--p graf-after--h3">In the above two snippets, we saw how to use the <strong class="markup--strong markup--p-strong">Formatted</strong>* Components to define strings, numbers, dates, and pluralization.</p>
           <p name="e372" id="e372" class="graf graf--p graf-after--p">However, there are plenty of instances where it’s necessary to pass formatted strings as props or use formatted strings to name an HTML component. The <strong class="markup--strong markup--p-strong">FormattedMessage</strong> component doesn’t well work in cases like this.</p>
           <p name="80e0" id="80e0" class="graf graf--p graf-after--p">Luckily, React Intl’s <strong class="markup--strong markup--p-strong">defineMessages</strong> API lets us imperatively define all of a component’s strings, then pass them as props to the component.</p>
           <p name="e739" id="e739" class="graf graf--p graf-after--p">Let’s try this approach for the widget headers and body. First, we use <strong class="markup--strong markup--p-strong">defineMessages</strong> to define our strings:</p>
           <figure name="5c43" id="5c43" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/4fb36cfed13f80af5b79e54bd07caec4?postId=7264738274a0" data-media-id="4fb36cfed13f80af5b79e54bd07caec4" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="7652" id="7652" class="graf graf--p graf-after--figure">Then, assuming we have a Widget component that expects header and body props, we can continue like so:</p>
           <figure name="40d2" id="40d2" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/a20a1a1e718cf1e94307826d64aa49da?postId=7264738274a0" data-media-id="a20a1a1e718cf1e94307826d64aa49da" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="e3e1" id="e3e1" class="graf graf--p graf-after--figure">One thing you might have noticed in the first widget is that we can also pass data to the strings defined in <strong class="markup--strong markup--p-strong">defineMessages</strong>. Here, we passed the current formatted date as the value <strong class="markup--strong markup--p-strong">date</strong>. Pretty neat, huh?</p>
           <p name="19f9" id="19f9" class="graf graf--p graf-after--p">The API also works well for formatting numbers, dates, times, relative times, and pluralization (check out their <a href="https://github.com/yahoo/react-intl/wiki/API" data-href="https://github.com/yahoo/react-intl/wiki/API" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">docs</a> for more on this)</p>
           <h3 name="a29b" id="a29b" class="graf graf--h3 graf-after--p">How to make it work in&nbsp;Safari</h3>
           <p name="2950" id="2950" class="graf graf--p graf-after--h3">Now that we’re almost done, I’ll throw one last curve ball at you:</p>
           <p name="2150" id="2150" class="graf graf--p graf-after--p">The current setup will not work for Safari browsers&nbsp;:(</p>
           <p name="dafb" id="dafb" class="graf graf--p graf-after--p">As mentioned above, this is because Safari does not currently have native support for Javascript’s Internationalization API.</p>
           <p name="152b" id="152b" class="graf graf--p graf-after--p">Fortunately, there’s still a way to make this work for Safari users. What we need to do is use the <strong class="markup--strong markup--p-strong">Intl polyfill</strong>. There are a few different ways to load this in. Let’s continue using Webpack, for the sake of example:</p>
           <p name="0c7c" id="0c7c" class="graf graf--p graf-after--p">First, we install the <strong class="markup--strong markup--p-strong">intl</strong> package from npm:</p>
           <figure name="6e8b" id="6e8b" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/9103178f0ca1f481ff8f0ea4003e6e71?postId=7264738274a0" data-media-id="9103178f0ca1f481ff8f0ea4003e6e71" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="4aa1" id="4aa1" class="graf graf--p graf-after--figure">Next, we’ll write a simple if-statement to only load the polyfill if there is no native browser support for <strong class="markup--strong markup--p-strong">Intl </strong>(see lines 30–57). This is to avoid loading the library and all the locale data into your app when not needed.</p>
           <figure name="c175" id="c175" class="graf graf--figure graf--iframe graf-after--p">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 35.699999999999996%;"></div>
             <div class="iframeContainer">
              <iframe width="700" height="250" src="/media/408d042d48df912f29c3cbe8507ed5c1?postId=7264738274a0" data-media-id="408d042d48df912f29c3cbe8507ed5c1" allowfullscreen frameborder="0"></iframe>
             </div>
            </div>
           </figure>
           <p name="1e7b" id="1e7b" class="graf graf--p graf-after--figure">As you can see, the first thing to check is if the <strong class="markup--strong markup--p-strong">intl</strong> global is <em class="markup--em markup--p-em">not</em> available on window. If not, then we load the intl polyfill and associated locale data and then render the component. Otherwise, we simply render the component.</p>
           <p name="302a" id="302a" class="graf graf--p graf-after--p">And at last, here’s our pre-translated app (still in English of course). I’ll leave you with the final step, which is finding a translation provider and getting these strings translated!</p>
           <figure name="d0b8" id="d0b8" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 365px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 52.1%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*CcUQumAeLtKuNb9BpQmp_g.png" data-width="2864" data-height="1492" data-action="zoom" data-action-value="1*CcUQumAeLtKuNb9BpQmp_g.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*CcUQumAeLtKuNb9BpQmp_g.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*CcUQumAeLtKuNb9BpQmp_g.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*CcUQumAeLtKuNb9BpQmp_g.png">
              </noscript>
             </div>
            </div>
           </figure>
           <h3 name="1891" id="1891" class="graf graf--h3 graf-after--figure">Other tips</h3>
           <p name="1db8" id="1db8" class="graf graf--p graf-after--h3">I hope this post is enough to start turning your spazzy React application into one that’s amicable to other cultures and languages.</p>
           <p name="b6cb" id="b6cb" class="graf graf--p graf-after--p">Before I sign off, here are a few other tips to consider when internationalizing your app:</p>
           <ul class="postList">
            <li name="c22b" id="c22b" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">Flexible components:</strong> Build your components such that they are flexible and allow for text expansion and shrinkage. Some languages can expand much larger or shrink much smaller than English. If you don’t account for this, your layout can look unbearable after translation.</li>
            <li name="3b34" id="3b34" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Appropriate font size:</strong> Use a font size that will work well with all the languages you support. Some languages, like Japanese and Chinese, need larger font sizes.</li>
            <li name="5953" id="5953" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">UTF-8</strong>: Use UTF-8 everywhere. This includes in your HTML, server-side language, database, etc. Unlike other encodings, UTF-8 encoding handles almost all languages really well.</li>
            <li name="86bb" id="86bb" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">No text in images:</strong> Avoid using text in images because translating text in graphics is extremely difficult, and not worth the pain.</li>
            <li name="7c25" id="7c25" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Don’t split your strings:</strong> For example, if you have “Your funds will arrive by July 7th,” avoid splitting strings like “Your funds will arrive by” and “July 7th”. The combination might only work in English due to word order variations in other languages.</li>
           </ul>
           <h3 name="9918" id="9918" class="graf graf--h3 graf-after--li">Conclusion</h3>
           <p name="867f" id="867f" class="graf graf--p graf-after--h3">As always, feel free to comment with suggestions and questions. I’d love to hear it&nbsp;:)</p>
           <p name="4d91" id="4d91" class="graf graf--p graf-after--p graf--trailing">All the code for the sample application can be found on github here: <a href="https://github.com/iam-peekay/inbox-react-intl" data-href="https://github.com/iam-peekay/inbox-react-intl" class="markup--anchor markup--p-anchor" rel="nofollow noopener" target="_blank">https://github.com/iam-peekay/inbox-react-intl</a></p>
          </div>
         </div>
        </section>
       </div>
       <footer class="u-paddingTop10">
        <div class="container u-maxWidth740">
         <div class="row">
          <div class="col u-size12of12"></div>
         </div>
         <div class="row">
          <div class="col u-size12of12 js-postTags">
           <div class="u-paddingBottom10">
            <ul class="tags tags--postTags tags--borderless">
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/javascript?source=post" data-action-source="post" data-collection-slug="free-code-camp">JavaScript</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/react?source=post" data-action-source="post" data-collection-slug="free-code-camp">React</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/web-development?source=post" data-action-source="post" data-collection-slug="free-code-camp">Web Development</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/programming?source=post" data-action-source="post" data-collection-slug="free-code-camp">Programming</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/tech?source=post" data-action-source="post" data-collection-slug="free-code-camp">Tech</a></li>
            </ul>
           </div>
          </div>
         </div>
         <section class="u-paddingTop20 u-borderTopLightest u-marginTop10">
          <div class="u-textColorDarker u-fontSize22 u-marginBottom7">
           Show your support
          </div>
          <p class="u-textColorDark u-fontSize16">Clapping shows how much you appreciated Preethi Kasireddy’s story.</p>
         </section>
         <div class="postActions u-flexCenter js-postActionsFooter">
          <div class="u-flex1">
           <div class="multirecommend js-actionMultirecommend u-flexCenter u-width60" data-post-id="7264738274a0" data-is-icon-29px="true" data-is-circle="true" data-has-recommend-list="true" data-source="post_actions_footer-----7264738274a0---------------------clap_footer">
            <div class="u-relative u-foreground">
             <button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal" data-action="sign-up-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/7264738274a0" data-action-source="post_actions_footer-----7264738274a0---------------------clap_footer" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0">
                <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
                 <path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd" />
                </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0">
                <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
                 <g fill-rule="evenodd">
                  <path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z" />
                  <path d="M13.285.48l-1.916.881 2.37 2.837z" />
                  <path d="M21.719 1.361L19.79.501l-.44 3.697z" />
                  <path d="M16.502 3.298L15.481 0h2.043z" />
                 </g>
                </svg></span></span></button>
             <div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;">
              <button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight" data-action="multivote-undo" data-action-value="7264738274a0"><span class="svgIcon svgIcon--removeThin svgIcon--29px">
                <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
                 <path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd" />
                </svg></span></button>
             </div>
            </div>
            <span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-marginLeft10"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton" data-action="show-recommends" data-action-value="7264738274a0">571</button></span>
           </div>
          </div>
          <div class="u-flex0 buttonSet buttonSet--narrow">
           <div class="buttonSet-inner">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" data-action="scroll-to-responses" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--response svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M21.27 20.058c1.89-1.826 2.754-4.17 2.754-6.674C24.024 8.21 19.67 4 14.1 4 8.53 4 4 8.21 4 13.384c0 5.175 4.53 9.385 10.1 9.385 1.007 0 2-.14 2.95-.41.285.25.592.49.918.7 1.306.87 2.716 1.31 4.19 1.31.276-.01.494-.14.6-.36a.625.625 0 0 0-.052-.65c-.61-.84-1.042-1.71-1.282-2.58a5.417 5.417 0 0 1-.154-.75zm-3.85 1.324l-.083-.28-.388.12a9.72 9.72 0 0 1-2.85.424c-4.96 0-8.99-3.706-8.99-8.262 0-4.556 4.03-8.263 8.99-8.263 4.95 0 8.77 3.71 8.77 8.27 0 2.25-.75 4.35-2.5 5.92l-.24.21v.32c0 .07 0 .19.02.37.03.29.1.6.19.92.19.7.49 1.4.89 2.08-.93-.14-1.83-.49-2.67-1.06-.34-.22-.88-.48-1.16-.74z" />
              </svg></span></button>
            <button class="button button--chromeless u-baseColor--buttonNormal" data-action="scroll-to-responses">25</button>
           </div>
           <div class="buttonSet-inner u-xs-hide">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--twitter svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z" />
              </svg></span></button>
           </div>
           <div class="buttonSet-inner u-xs-hide">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--facebook svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4" />
              </svg></span></button>
           </div>
           <div class="buttonSet-inner u-xs-show">
            <button class="button button--large button--dark button--chromeless u-baseColor--buttonDark button--withIcon button--withSvgIcon js-shareStoryButton" title="Share this story on Twitter or Facebook" aria-label="Share this story on Twitter or Facebook" data-action="show-share-popover" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--share svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M20.385 8H19a.5.5 0 1 0 .011 1h1.39c.43 0 .84.168 1.14.473.31.305.48.71.48 1.142v10.77c0 .43-.17.837-.47 1.142-.3.305-.71.473-1.14.473H8.62c-.43 0-.84-.168-1.144-.473a1.603 1.603 0 0 1-.473-1.142v-10.77c0-.43.17-.837.48-1.142A1.599 1.599 0 0 1 8.62 9H10a.502.502 0 0 0 0-1H8.615c-.67 0-1.338.255-1.85.766-.51.51-.765 1.18-.765 1.85v10.77c0 .668.255 1.337.766 1.848.51.51 1.18.766 1.85.766h11.77c.668 0 1.337-.255 1.848-.766.51-.51.766-1.18.766-1.85v-10.77c0-.668-.255-1.337-.766-1.848A2.61 2.61 0 0 0 20.384 8zm-8.67-2.508L14 3.207v8.362c0 .27.224.5.5.5s.5-.23.5-.5V3.2l2.285 2.285a.49.49 0 0 0 .704-.001.511.511 0 0 0 0-.708l-3.14-3.14a.504.504 0 0 0-.71 0L11 4.776a.501.501 0 0 0 .71.706" fill-rule="evenodd" />
              </svg></span></button>
           </div>
          </div>
         </div>
        </div>
        <div class="js-postPromotionWrapper postPromotionWrapper" data-location-id="footer_above_post_attribution"></div>
        <div class="u-maxWidth740 u-paddingTop20 u-marginTop10 u-borderTopLightest container u-paddingBottom20 u-xs-paddingBottom10 js-postAttributionFooterContainer">
         <div class="row js-postFooterInfo">
          <div class="col u-size6of12 u-xs-size12of12">
           <li class="u-block u-paddingBottom18 js-cardUser">
            <div class="u-marginLeft20 u-floatRight">
             <span class="followState js-followState" data-user-id="d446dafbe292"><button class="button button--small u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton" data-action="sign-up-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-redirect="https://medium.freecodecamp.org/internationalization-in-react-7264738274a0" data-action-source="footer_card"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton" data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/d446dafbe292" data-action-source="footer_card-d446dafbe292-------------------------follow_footer"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span>
            </div>
            <div class="u-tableCell ">
             <a class="link avatar u-baseColor--link" href="https://medium.freecodecamp.org/@preethikasireddy?source=footer_card" title="Go to the profile of Preethi Kasireddy" aria-label="Go to the profile of Preethi Kasireddy" data-action-source="footer_card" data-user-id="d446dafbe292" data-collection-slug="free-code-camp" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*lHIefjTQECM96G6Ef8xn6g.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Preethi Kasireddy"></a>
            </div>
            <div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15">
             <h3 class="u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal" href="https://medium.freecodecamp.org/@preethikasireddy" property="cc:attributionName" title="Go to the profile of Preethi Kasireddy" aria-label="Go to the profile of Preethi Kasireddy" rel="author cc:attributionUrl" data-user-id="d446dafbe292" data-collection-slug="free-code-camp" dir="auto">Preethi Kasireddy</a></h3>
             <p class="u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">Blockchain Engineer. I have a passion for understanding things at a fundamental level and sharing it as clearly as possible.</p>
            </div></li>
          </div>
          <div class="col u-size6of12 u-xs-size12of12 u-xs-marginTop30">
           <li class="u-block u-paddingBottom18 js-cardCollection">
            <div class="u-marginLeft20 u-floatRight">
             <button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal js-relationshipButton" data-action="sign-up-prompt" data-sign-in-action="toggle-follow-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/free-code-camp" data-action-source="----336d898217ee----------------------follow_footer" data-collection-id="336d898217ee"><span class="button-label  js-buttonLabel">Follow</span></button>
            </div>
            <div class="u-tableCell ">
             <a class="link avatar avatar--roundedRectangle u-baseColor--link" href="https://medium.freecodecamp.org?source=footer_card" title="Go to freeCodeCamp" aria-label="Go to freeCodeCamp" data-action-source="footer_card" data-collection-slug="free-code-camp"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*MotlWcSa2n6FrOx3ul89kw.png" class="avatar-image u-size60x60" alt="freeCodeCamp"></a>
            </div>
            <div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15">
             <h3 class="u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal" href="https://medium.freecodecamp.org?source=footer_card" rel="collection" data-action-source="footer_card" data-collection-slug="free-code-camp">freeCodeCamp</a></h3>
             <p class="u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">Our community publishes stories worth reading on development, design, and data science.</p>
             <div class="buttonSet"></div>
            </div></li>
          </div>
         </div>
        </div>
        <div class="js-postFooterPlacements"></div>
        <div class="u-padding0 u-clearfix u-backgroundGrayLightest u-print-hide supplementalPostContent js-responsesWrapper"></div>
        <div class="supplementalPostContent js-heroPromo"></div>
       </footer>
      </article>
     </main>
     <div class="u-marginAuto u-maxWidth1000">
      <div class="js-postShareWidget u-foreground u-sm-hide u-transition--fadeOut300 u-fixed">
       <ul>
        <li class="u-textAlignCenter">
         <div class="multirecommend js-actionMultirecommend u-flexColumn u-marginBottom10 u-width60" data-post-id="7264738274a0" data-is-icon-29px="true" data-is-vertical="true" data-is-circle="true" data-is-compressed="true" data-has-recommend-list="true" data-source="post_share_widget-----7264738274a0---------------------clap_sidebar">
          <div class="u-relative u-foreground">
           <button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal" data-action="sign-up-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/7264738274a0" data-action-source="post_share_widget-----7264738274a0---------------------clap_sidebar" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0">
              <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
               <path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd" />
              </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0">
              <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
               <g fill-rule="evenodd">
                <path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z" />
                <path d="M13.285.48l-1.916.881 2.37 2.837z" />
                <path d="M21.719 1.361L19.79.501l-.44 3.697z" />
                <path d="M16.502 3.298L15.481 0h2.043z" />
               </g>
              </svg></span></span></button>
           <div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;">
            <button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight" data-action="multivote-undo" data-action-value="7264738274a0"><span class="svgIcon svgIcon--removeThin svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd" />
              </svg></span></button>
           </div>
          </div>
          <span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-flexOrderNegative1 u-height20 u-marginBottom7"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton u-block u-marginAuto" data-action="show-recommends" data-action-value="7264738274a0">571</button></span>
         </div></li>
        <li class="u-textAlignCenter"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_share_widget"><span class="svgIcon svgIcon--twitter svgIcon--29px">
           <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
            <path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z" />
           </svg></span></button></li>
        <li class="u-textAlignCenter"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_share_widget"><span class="svgIcon svgIcon--facebook svgIcon--29px">
           <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
            <path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4" />
           </svg></span></button></li>
        <li class="u-textAlignCenter"><button class="button button--large button--dark button--chromeless is-touchIconFadeInPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon button--bookmark js-bookmarkButton" title="Bookmark this story to read later" aria-label="Bookmark this story to read later" data-action="sign-up-prompt" data-sign-in-action="add-to-bookmarks" data-requires-token="true" data-redirect="https://medium.com/_/bookmark/p/7264738274a0" data-action-source="post_share_widget-----7264738274a0---------------------bookmark_sidebar"><span class="button-defaultState"><span class="svgIcon svgIcon--bookmark svgIcon--29px">
            <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
             <path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4zM21 23l-5.91-3.955-.148-.107a.751.751 0 0 0-.884 0l-.147.107L8 23V6.615C8 5.725 8.725 5 9.615 5h9.77C20.275 5 21 5.725 21 6.615V23z" fill-rule="evenodd" />
            </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--bookmarkFilled svgIcon--29px">
            <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
             <path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4z" fill-rule="evenodd" />
            </svg></span></span></button></li>
       </ul>
      </div>
     </div>
     <div class="u-fixed u-bottom0 u-sizeFullWidth u-backgroundWhite u-boxShadowTop u-borderBox u-paddingTop10 u-paddingBottom10 u-zIndexMetabar u-xs-paddingLeft10 u-xs-paddingRight10 js-stickyFooter">
      <div class="u-maxWidth700 u-marginAuto u-flexCenter">
       <div class="u-fontSize16 u-flex1 u-flexCenter">
        <div class="u-flex0 u-inlineBlock u-paddingRight20 u-xs-paddingRight10">
         <a class="link avatar avatar--roundedRectangle u-baseColor--link" href="https://medium.freecodecamp.org" title="Go to freeCodeCamp" aria-label="Go to freeCodeCamp" data-collection-slug="free-code-camp"><img src="https://cdn-images-1.medium.com/fit/c/80/80/1*MotlWcSa2n6FrOx3ul89kw.png" class="avatar-image avatar-image--smaller" alt="freeCodeCamp"></a>
        </div>
        <div class="u-flex1 u-inlineBlock">
         <div class="u-xs-hide">
          Never miss a story from
          <strong> freeCodeCamp</strong>, when you sign up for Medium. 
          <a class="link link--accent u-accentColor--textNormal u-accentColor--textDarken u-baseColor--link" href="https://medium.com/@Medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg" data-action-source="sticky_footer">Learn more</a>
         </div>
         <div class="u-xs-show">
          Never miss a story from
          <strong> freeCodeCamp</strong>
         </div>
        </div>
       </div>
       <div class="u-marginLeft50 u-xs-marginAuto">
        <button class="button button--primary button--dark is-active u-noUserSelect button--withChrome u-accentColor--buttonDark u-uiTextSemibold u-textUppercase u-fontSize12 button--followCollection js-followCollectionButton" data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/free-code-camp" data-action-source="sticky_footer----336d898217ee----------------------follow_metabar"><span class="button-label  button-defaultState js-buttonLabel">Get updates</span><span class="button-label button-activeState">Get updates</span></button>
       </div>
      </div>
     </div>
     <style class="js-collectionStyle">
.u-accentColor--borderLight {border-color: #429A35 !important;}
.u-accentColor--borderNormal {border-color: #429A35 !important;}
.u-accentColor--borderDark {border-color: #3E8432 !important;}
.u-accentColor--iconLight .svgIcon,.u-accentColor--iconLight.svgIcon {fill: #429A35 !important;}
.u-accentColor--iconNormal .svgIcon,.u-accentColor--iconNormal.svgIcon {fill: #429A35 !important;}
.u-accentColor--iconDark .svgIcon,.u-accentColor--iconDark.svgIcon {fill: #3E8432 !important;}
.u-accentColor--textNormal {color: #3E8432 !important;}
.u-accentColor--hoverTextNormal:hover {color: #3E8432 !important;}
.u-accentColor--textNormal.u-accentColor--textDarken:hover {color: #3B7830 !important;}
.u-accentColor--textDark {color: #3B7830 !important;}
.u-accentColor--backgroundLight {background-color: #429A35 !important;}
.u-accentColor--backgroundNormal {background-color: #429A35 !important;}
.u-accentColor--backgroundDark {background-color: #3E8432 !important;}
.u-accentColor--buttonDark {border-color: #3E8432 !important; color: #3B7830 !important;}
.u-accentColor--buttonDark:hover {border-color: #3B7830 !important;}
.u-accentColor--buttonDark .icon:before,.u-accentColor--buttonDark .svgIcon{color: #3E8432 !important; fill: #3E8432 !important;}
.u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: #429A35 !important; color: #3E8432 !important;}
.u-accentColor--buttonNormal:hover {border-color: #3E8432 !important;}
.u-accentColor--buttonNormal .icon:before,.u-accentColor--buttonNormal .svgIcon{color: #429A35 !important; fill: #429A35 !important;}
.u-accentColor--buttonNormal.button--filled .icon:before,.u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-accentColor--buttonDark.button--filled,.u-accentColor--buttonDark.button--withChrome.is-active,.u-accentColor--fillWhenActive.is-active {background-color: #3E8432 !important; border-color: #3E8432 !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: #429A35 !important; border-color: #429A35 !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.postArticle.is-withAccentColors .markup--user,.postArticle.is-withAccentColors .markup--query {color: #3E8432 !important;}.u-tintBgColor {background-color: rgba(0, 100, 0, 1) !important;}.u-tintBgColor .u-fadeLeft:before {background-image: linear-gradient(to right, rgba(0, 100, 0, 1) 0%, rgba(0, 100, 0, 0) 100%) !important;}.u-tintBgColor .u-fadeRight:after {background-image: linear-gradient(to right, rgba(0, 100, 0, 0) 0%, rgba(0, 100, 0, 1) 100%) !important;}
.u-tintSpectrum .u-baseColor--borderLight {border-color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--borderNormal {border-color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--borderDark {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--iconLight .svgIcon,.u-tintSpectrum .u-baseColor--iconLight.svgIcon {fill: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--iconNormal .svgIcon,.u-tintSpectrum .u-baseColor--iconNormal.svgIcon {fill: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--iconDark .svgIcon,.u-tintSpectrum .u-baseColor--iconDark.svgIcon {fill: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--textNormal {color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--textDark {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--textDarker {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--backgroundLight {background-color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--backgroundNormal {background-color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--backgroundDark {background-color: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--buttonLight {border-color: #8ABF7C !important; color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--buttonLight:hover {border-color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--buttonLight .icon:before,.u-tintSpectrum .u-baseColor--buttonLight .svgIcon {color: #8ABF7C !important; fill: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--buttonDark {border-color: #DFF8D4 !important; color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--buttonDark:hover {border-color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--buttonDark .icon:before,.u-tintSpectrum .u-baseColor--buttonDark .svgIcon {color: #DFF8D4 !important; fill: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal {border-color: #B5DDA8 !important; color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal:hover {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal .icon:before,.u-tintSpectrum .u-baseColor--buttonNormal .svgIcon {color: #B5DDA8 !important; fill: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--buttonDark.button--filled,.u-tintSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: #DFF8D4 !important; border-color: #DFF8D4 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-baseColor--buttonNormal.button--filled,.u-tintSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: #B5DDA8 !important; border-color: #B5DDA8 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-baseColor--link {color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--darken:hover,.u-tintSpectrum .u-baseColor--link.link--darken:focus,.u-tintSpectrum .u-baseColor--link.link--darken:active {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--dark {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:active {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--darker {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: #8ABF7C;}
.u-tintSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: #8ABF7C;}
.u-tintSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: #8ABF7C;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: #458C39 !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: #5D9E50 !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: #8ABF7C !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: #B5DDA8 !important;}
.u-tintSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: #F3FFEA !important;}
.u-tintSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--borderLight {border-color: #8ABF7C !important;}
.u-tintSpectrum .u-accentColor--borderNormal {border-color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--borderDark {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--iconLight .svgIcon,.u-tintSpectrum .u-accentColor--iconLight.svgIcon {fill: #8ABF7C !important;}
.u-tintSpectrum .u-accentColor--iconNormal .svgIcon,.u-tintSpectrum .u-accentColor--iconNormal.svgIcon {fill: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--iconDark .svgIcon,.u-tintSpectrum .u-accentColor--iconDark.svgIcon {fill: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--textNormal {color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--hoverTextNormal:hover {color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--textDark {color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--backgroundLight {background-color: #8ABF7C !important;}
.u-tintSpectrum .u-accentColor--backgroundNormal {background-color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--backgroundDark {background-color: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--buttonDark {border-color: #DFF8D4 !important; color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--buttonDark:hover {border-color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--buttonDark .icon:before,.u-tintSpectrum .u-accentColor--buttonDark .svgIcon{color: #DFF8D4 !important; fill: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: #B5DDA8 !important; color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal:hover {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal .icon:before,.u-tintSpectrum .u-accentColor--buttonNormal .svgIcon{color: #B5DDA8 !important; fill: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-tintSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-accentColor--buttonDark.button--filled,.u-tintSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-tintSpectrum .u-accentColor--fillWhenActive.is-active {background-color: #DFF8D4 !important; border-color: #DFF8D4 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-tintSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: #B5DDA8 !important; border-color: #B5DDA8 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .postArticle.is-withAccentColors .markup--user,.u-tintSpectrum .postArticle.is-withAccentColors .markup--query {color: #B5DDA8 !important;}
.u-accentColor--highlightFaint {background-color: rgba(222, 250, 211, 1) !important;}
.u-accentColor--highlightStrong.is-active .svgIcon {fill: rgba(172, 246, 153, 1) !important;}
.postArticle.is-withAccentColors .markup--quote.is-other {background-color: rgba(222, 250, 211, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-other {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(222, 250, 211, 1), rgba(222, 250, 211, 1));}
.postArticle.is-withAccentColors .markup--quote.is-me {background-color: rgba(195, 248, 179, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-me {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(195, 248, 179, 1), rgba(195, 248, 179, 1));}
.postArticle.is-withAccentColors .markup--quote.is-targeted {background-color: rgba(172, 246, 153, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-targeted {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(172, 246, 153, 1), rgba(172, 246, 153, 1));}
.postArticle.is-withAccentColors .markup--quote.is-selected {background-color: rgba(172, 246, 153, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-selected {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(172, 246, 153, 1), rgba(172, 246, 153, 1));}
.postArticle.is-withAccentColors .markup--highlight {background-color: rgba(172, 246, 153, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--highlight {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(172, 246, 153, 1), rgba(172, 246, 153, 1));}.u-baseColor--iconNormal.avatar-halo {fill: rgba(0, 0, 0, 0.4980392156862745) !important;}</style>
     <style class="js-collectionStyleConstant">.u-imageBgColor {background-color: rgba(0, 0, 0, 0.24705882352941178);}
.u-imageSpectrum .u-baseColor--borderLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-baseColor--borderNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-baseColor--borderDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--iconLight .svgIcon,.u-imageSpectrum .u-baseColor--iconLight.svgIcon {fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--iconNormal .svgIcon,.u-imageSpectrum .u-baseColor--iconNormal.svgIcon {fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--iconDark .svgIcon,.u-imageSpectrum .u-baseColor--iconDark.svgIcon {fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textNormal {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textDark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textDarker {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--backgroundLight {background-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-baseColor--backgroundNormal {background-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--backgroundDark {background-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important; color: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--buttonLight:hover {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-baseColor--buttonLight .icon:before,.u-imageSpectrum .u-baseColor--buttonLight .svgIcon {color: rgba(255, 255, 255, 0.8) !important; fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--buttonDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonDark:hover {border-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonDark .icon:before,.u-imageSpectrum .u-baseColor--buttonDark .svgIcon {color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important; color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal:hover {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal .icon:before,.u-imageSpectrum .u-baseColor--buttonNormal .svgIcon {color: rgba(255, 255, 255, 0.9490196078431372) !important; fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonDark.button--filled,.u-imageSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: rgba(255, 255, 255, 1) !important; border-color: rgba(255, 255, 255, 1) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal.button--filled,.u-imageSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: rgba(255, 255, 255, 0.9490196078431372) !important; border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-baseColor--link {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--darken:hover,.u-imageSpectrum .u-baseColor--link.link--darken:focus,.u-imageSpectrum .u-baseColor--link.link--darken:active {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--dark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:active {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--darker {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: rgba(255, 255, 255, 0.4) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: rgba(255, 255, 255, 0.4980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--borderLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-accentColor--borderNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-accentColor--borderDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--iconLight .svgIcon,.u-imageSpectrum .u-accentColor--iconLight.svgIcon {fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-accentColor--iconNormal .svgIcon,.u-imageSpectrum .u-accentColor--iconNormal.svgIcon {fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--iconDark .svgIcon,.u-imageSpectrum .u-accentColor--iconDark.svgIcon {fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--textNormal {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--hoverTextNormal:hover {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--textDark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--backgroundLight {background-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-accentColor--backgroundNormal {background-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--backgroundDark {background-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark:hover {border-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark .icon:before,.u-imageSpectrum .u-accentColor--buttonDark .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: rgba(255, 255, 255, 0.8980392156862745) !important; color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal:hover {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal .icon:before,.u-imageSpectrum .u-accentColor--buttonNormal .svgIcon{color: rgba(255, 255, 255, 0.9490196078431372) !important; fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-imageSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-accentColor--buttonDark.button--filled,.u-imageSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-imageSpectrum .u-accentColor--fillWhenActive.is-active {background-color: rgba(255, 255, 255, 1) !important; border-color: rgba(255, 255, 255, 1) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-imageSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: rgba(255, 255, 255, 0.9490196078431372) !important; border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .postArticle.is-withAccentColors .markup--user,.u-imageSpectrum .postArticle.is-withAccentColors .markup--query {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--highlightFaint {background-color: rgba(255, 255, 255, 0.2) !important;}
.u-imageSpectrum .u-accentColor--highlightStrong.is-active .svgIcon {fill: rgba(255, 255, 255, 0.6) !important;}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-other {background-color: rgba(255, 255, 255, 0.2) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-other {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.2));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-me {background-color: rgba(255, 255, 255, 0.4) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-me {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-targeted {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-targeted {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-selected {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-selected {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--highlight {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--highlight {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}.u-resetSpectrum .u-tintBgColor {background-color: rgba(255, 255, 255, 1) !important;}.u-resetSpectrum .u-tintBgColor .u-fadeLeft:before {background-image: linear-gradient(to right, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 0) 100%) !important;}.u-resetSpectrum .u-tintBgColor .u-fadeRight:after {background-image: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%) !important;}
.u-resetSpectrum .u-baseColor--borderLight {border-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--borderNormal {border-color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--borderDark {border-color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--iconLight .svgIcon,.u-resetSpectrum .u-baseColor--iconLight.svgIcon {fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--iconNormal .svgIcon,.u-resetSpectrum .u-baseColor--iconNormal.svgIcon {fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--iconDark .svgIcon,.u-resetSpectrum .u-baseColor--iconDark.svgIcon {fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textNormal {color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textDark {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textDarker {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--backgroundLight {background-color: rgba(0, 0, 0, 0.09803921568627451) !important;}
.u-resetSpectrum .u-baseColor--backgroundNormal {background-color: rgba(0, 0, 0, 0.2) !important;}
.u-resetSpectrum .u-baseColor--backgroundDark {background-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight {border-color: rgba(0, 0, 0, 0.2980392156862745) !important; color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight:hover {border-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight .icon:before,.u-resetSpectrum .u-baseColor--buttonLight .svgIcon {color: rgba(0, 0, 0, 0.2980392156862745) !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonDark {border-color: rgba(0, 0, 0, 0.6) !important; color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonDark:hover {border-color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--buttonDark .icon:before,.u-resetSpectrum .u-baseColor--buttonDark .svgIcon {color: rgba(0, 0, 0, 0.6) !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal {border-color: rgba(0, 0, 0, 0.4980392156862745) !important; color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal:hover {border-color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal .icon:before,.u-resetSpectrum .u-baseColor--buttonNormal .svgIcon {color: rgba(0, 0, 0, 0.4980392156862745) !important; fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonDark.button--filled,.u-resetSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: rgba(0, 0, 0, 0.2980392156862745) !important; border-color: rgba(0, 0, 0, 0.2980392156862745) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal.button--filled,.u-resetSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: rgba(0, 0, 0, 0.2) !important; border-color: rgba(0, 0, 0, 0.2) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-baseColor--link {color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--darken:hover,.u-resetSpectrum .u-baseColor--link.link--darken:focus,.u-resetSpectrum .u-baseColor--link.link--darken:active {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--dark {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:active {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--link.link--darker {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: rgba(0, 0, 0, 0.2) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: rgba(0, 0, 0, 0.4) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-accentColor--borderLight {border-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--borderNormal {border-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--borderDark {border-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--iconLight .svgIcon,.u-resetSpectrum .u-accentColor--iconLight.svgIcon {fill: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--iconNormal .svgIcon,.u-resetSpectrum .u-accentColor--iconNormal.svgIcon {fill: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--iconDark .svgIcon,.u-resetSpectrum .u-accentColor--iconDark.svgIcon {fill: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--textNormal {color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--hoverTextNormal:hover {color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--textDark {color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundLight {background-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundNormal {background-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundDark {background-color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark {border-color: rgba(0, 171, 107, 1) !important; color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark:hover {border-color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark .icon:before,.u-resetSpectrum .u-accentColor--buttonDark .svgIcon{color: rgba(28, 153, 99, 1) !important; fill: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: rgba(2, 184, 117, 1) !important; color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal:hover {border-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal .icon:before,.u-resetSpectrum .u-accentColor--buttonNormal .svgIcon{color: rgba(0, 171, 107, 1) !important; fill: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-resetSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark.button--filled,.u-resetSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-resetSpectrum .u-accentColor--fillWhenActive.is-active {background-color: rgba(28, 153, 99, 1) !important; border-color: rgba(28, 153, 99, 1) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-resetSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: rgba(0, 171, 107, 1) !important; border-color: rgba(0, 171, 107, 1) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .postArticle.is-withAccentColors .markup--user,.u-resetSpectrum .postArticle.is-withAccentColors .markup--query {color: rgba(0, 171, 107, 1) !important;}</style>
    </div>
   </div>
  </div>
  <div class="loadingBar"></div>
  <script>// <![CDATA[
window["obvInit"] = function (opt_embedded) {window["obvInit"]["embedded"] = opt_embedded; window["obvInit"]["ready"] = true;}
// ]]></script>
  <script>// <![CDATA[
var GLOBALS = {"audioUrl":"https://d1fcbxp97j4nb2.cloudfront.net","baseUrl":"https://medium.freecodecamp.org","buildLabel":"30896-984552c","currentUser":{"userId":"lo_1db8d9c968f3","isVerified":false,"subscriberEmail":"","hasPastMemberships":false,"isEnrolledInHightower":false,"isEligibleForHightower":false},"currentUserHasUnverifiedEmail":false,"isAuthenticated":false,"isCurrentUserVerified":false,"mediumTwitterScreenName":"medium","miroUrl":"https://cdn-images-1.medium.com","moduleUrls":{"base":"https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.Oty0kW8MpxxfXYEYUCl8gw.js","common-async":"https://cdn-static-1.medium.com/_/fp/gen-js/main-common-async.bundle.Nrpddu7_2oXRI1Nm7-OoBA.js","home-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-home-screens.bundle.Fp2Qr5Lg9DQ7xqnIXdNWjg.js","misc-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-misc-screens.bundle.b0FeKH3_Mcj-q_sQqwLfbw.js","notes":"https://cdn-static-1.medium.com/_/fp/gen-js/main-notes.bundle.1Y2yt5HlKRYFi3yxDJ2J5A.js","payments":"https://cdn-static-1.medium.com/_/fp/gen-js/main-payments.bundle.ocZz_d_UwVkyjO_n-YN7sQ.js","posters":"https://cdn-static-1.medium.com/_/fp/gen-js/main-posters.bundle.snQNwZGKeDjwgMI3E1_vDA.js","pubs":"https://cdn-static-1.medium.com/_/fp/gen-js/main-pubs.bundle.s3L1rX3BTbilWRdgiYuFug.js","stats":"https://cdn-static-1.medium.com/_/fp/gen-js/main-stats.bundle.YYXgqq3uOhmNJ5GwyXMVkg.js"},"previewConfig":{"weightThreshold":1,"weightImageParagraph":0.51,"weightIframeParagraph":0.8,"weightTextParagraph":0.08,"weightEmptyParagraph":0,"weightP":0.003,"weightH":0.005,"weightBq":0.003,"minPTextLength":60,"truncateBoundaryChars":20,"detectTitle":true,"detectTitleLevThreshold":0.15},"productName":"Medium","supportsEdit":true,"termsUrl":"//medium.com/policy/9db0094a1e0f","textshotHost":"textshot.medium.com","transactionId":"1507036751072:b735942db750","useragent":{"browser":"chrome","family":"chrome","os":"windows","version":45,"supportsDesktopEdit":true,"supportsInteract":true,"supportsView":true,"isMobile":false,"isTablet":false,"isNative":false,"supportsFileAPI":true,"isTier1":true,"clientVersion":"","unknownParagraphsBad":false,"clientChannel":"","supportsRealScrollEvents":true,"supportsVhUnits":true,"ruinsViewportSections":false,"supportsHtml5Video":true,"supportsMagicUnderlines":true,"isWebView":false,"isFacebookWebView":false,"supportsProgressiveMedia":true,"supportsPromotedPosts":true,"isBot":false,"isNativeIphone":false,"supportsCssVariables":false,"supportsVideoSections":false,"emojiSupportLevel":1,"supportsScrollableMetabar":true},"variants":{"allow_access":true,"allow_signup":true,"allow_test_auth":"disallow","signin_services":"twitter,facebook,google,email,google-fastidv","signup_services":"twitter,facebook,google,email,google-fastidv","android_rating_prompt_recommend_threshold":5,"google_sign_in_android":true,"enable_onboarding":true,"ios_custom_miro_url":"https://cdn-images-1.medium.com","reengagement_notification_duration":3,"enable_adsnative_integration":true,"browsable_stream_config_bucket":"curated-topics","ios_small_post_preview_truncation_length":5.5,"ios_large_post_preview_truncation_length":5.5,"disable_ios_catalog_badging":true,"enable_series_creation":true,"enable_your_series_pages":true,"enable_productionized_series":true,"enable_dedicated_series_tab_api_ios":true,"enable_clap_milestone_notifications":true,"enable_series_stats_page":true,"enable_post_import":true,"enable_sponsored_post_labelling":true,"enable_logged_in_follow_on_collection_post":true,"promoted_story_placement_locations":"POST_PAGE_FOOTER","enable_chunky_home_page":true,"retire_ranked_feed":true,"enable_export_members":true,"enable_series_card_background_creation":true,"enable_ios_onboarding_notifications":true,"available_membership_plans":"60e220181034","available_monthly_plan":"60e220181034","available_annual_plan":"2c754bcc2995","double_write_post_from_followed_tag_items":true,"enable_sms":true,"enable_series_in_user_profiles":true,"enable_new_logged_out_bento_operation":true,"is_not_medium_subscriber":true,"subs_landing_copy_experiments":"short","logged_out_homepage_promo":"content","enable_dynamic_topic_windows":true,"enable_emoji_in_editor":true,"enable_glyph":true,"glyph_font_set":"m","enable_branding":true,"enable_upsell_tracking":true,"enable_post_page_signin":true,"post_page_signin_copy_count":true,"enable_sequence_carousel":true,"enable_multirecommends":true,"enable_updated_homepage_order":true,"enable_auto_grid_on_new_from_your_network":true,"enable_unbundled_you_might_like":true,"enable_noteworthy_promo":true,"enable_interest_graph_vtwo_topic_suggestions":true,"enable_popchunks":true,"enable_hightower":true,"enable_user_post_metering":true,"max_premium_content_per_user_under_metering":3,"enable_welcome_email_v2":true,"enable_topic_writer_onboarding":true,"enable_hightower_onboarding_blinker":true,"enable_algolia_search_reporting":true,"enable_direct_signin":true,"enable_strong_graph_chp_reorder":true,"enable_post_page_cleanup":"remove_all_except_recirc"},"xsrfToken":"","iosAppId":"828256236","supportEmail":"yourfriends@medium.com","fp":{"/icons/favicon.svg":"https://cdn-static-1.medium.com/_/fp/icons/favicon.KjTfUJo7yJH_fCoUzzH3cg.svg","/icons/favicon-dev-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-dev-editor.YKKRxBO8EMvIqhyCwIiJeQ.ico","/icons/favicon-hatch-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-hatch-editor.BuEyHIqlyh2s_XEk4Rl32Q.ico","/icons/favicon-medium-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-medium-editor.PiakrZWB7Yb80quUVQWM6g.ico"},"authBaseUrl":"https://medium.com","imageUploadSizeMb":25,"isAuthDomainRequest":false,"domainCollectionSlug":"free-code-camp","algoliaApiEndpoint":"https://MQ57UUUQZ2-dsn.algolia.net","algoliaAppId":"MQ57UUUQZ2","algoliaSearchOnlyApiKey":"394474ced050e3911ae2249ecc774921","iosAppStoreUrl":"https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8","iosAppLinkBaseUrl":"medium:","algoliaIndexPrefix":"medium_","androidPlayStoreUrl":"https://play.google.com/store/apps/details?id=com.medium.reader","googleClientId":"216296035834-k1k6qe060s2tp2a2jam4ljdcms00sttg.apps.googleusercontent.com","androidPackage":"com.medium.reader","androidPlayStoreMarketScheme":"market://details?id=com.medium.reader","googleAuthUri":"https://accounts.google.com/o/oauth2/auth","androidScheme":"medium","layoutData":{"useDynamicScripts":false,"googleAnalyticsTrackingCode":"UA-24232453-2","jsShivUrl":"https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js","useDynamicCss":false,"faviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico","faviconImageId":"1*8I-HPL0bfoIzGied-dzOvA.png","fontSets":[{"id":8,"url":"https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m.css"},{"id":9,"url":"https://glyph.medium.com/css/mkt.css"}],"editorFaviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium-editor.3Y6xpZ-0FSdWDnPM3hSBIA.ico","glyphUrl":"https://glyph.medium.com"},"authBaseUrlRev":"moc.muidem//:sptth","isDnt":false,"stripePublishableKey":"pk_live_7FReX44VnNIInZwrIIx6ghjl","archiveUploadSizeMb":100,"paymentData":{"currencies":{"1":{"label":"US Dollar","external":"usd"}},"countries":{"1":{"label":"United States of America","external":"US"}},"accountTypes":{"1":{"label":"Individual","external":"individual"},"2":{"label":"Company","external":"company"}}},"previewConfig2":{"weightThreshold":1,"weightImageParagraph":0.05,"raiseImage":true,"enforceHeaderHierarchy":true,"isImageInsetRight":true},"isAmp":false,"iosScheme":"medium","isSwBoot":false,"lightstep":{"accessToken":"ce5be895bef60919541332990ac9fef2","carrier":"{\"ot-tracer-spanid\":\"5a51532f42d0a8f8\",\"ot-tracer-traceid\":\"709a07696bff5195\",\"ot-tracer-sampled\":\"true\"}","host":"collector-medium.lightstep.com"},"facebook":{"key":"542599432471018","namespace":"medium-com","scope":{"default":["public_profile","email","user_friends"],"connect":["public_profile","email","user_friends"],"login":["public_profile","email","user_friends"],"share":["public_profile","email","user_friends","publish_actions"]}},"mailingListArchiveUploadSizeMb":2,"availableMembershipPlans":["60e220181034"],"editorsPicksTopicId":"3985d2a191c5","popularOnMediumTopicId":"9d34e48ecf94","memberContentTopicId":"13d7efd82fb2","audioContentTopicId":"3792abbd134","brandedSequenceId":"7d337ddf1941","isDoNotAuth":false,"goldfinchUrl":"https://goldfinch.medium.com","buggle":{"url":"https://buggle.medium.com","videoUrl":"https://cdn-videos-1.medium.com","audioUrl":"https://cdn-audio-1.medium.com"}}
// ]]></script>
  <script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.Oty0kW8MpxxfXYEYUCl8gw.js" async></script>
  <script>// <![CDATA[
window["obvInit"]({"value":{"id":"7264738274a0","versionId":"bdd93ec2a258","creatorId":"d446dafbe292","creator":{"userId":"d446dafbe292","name":"Preethi Kasireddy","username":"preethikasireddy","createdAt":1405994076258,"lastPostCreatedAt":1506968555442,"imageId":"1*lHIefjTQECM96G6Ef8xn6g.jpeg","backgroundImageId":"","bio":"Blockchain Engineer. I have a passion for understanding things at a fundamental level and sharing it as clearly as possible.","twitterScreenName":"iam_preethi","socialStats":{"userId":"d446dafbe292","usersFollowedCount":270,"usersFollowedByCount":32349,"type":"SocialStats"},"social":{"userId":"lo_1db8d9c968f3","targetUserId":"d446dafbe292","type":"Social"},"facebookAccountId":"10152986375997506","allowNotes":1,"type":"User"},"homeCollection":{"id":"336d898217ee","name":"freeCodeCamp","slug":"free-code-camp","tags":["TECHNOLOGY","DESIGN","TECH","STARTUP","PRODUCTIVITY"],"creatorId":"8b318225c16a","description":"Our community publishes stories worth reading on development, design, and data science.","shortDescription":"Our community publishes stories worth reading on…","image":{"imageId":"1*MotlWcSa2n6FrOx3ul89kw.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":329952,"activeAt":1507027665032},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*wViBNJ1o9rM5p6b-gf3vxg.png","filter":"","backgroundSize":"","originalWidth":600,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"freecodecamp","facebookPageName":"freecodecamp","publicEmail":"quincy@freecodecamp.com","collectionMastheadId":"af94c9c16d4","domain":"medium.freecodecamp.org","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4}},{"type":1,"postListMetadata":{"source":3,"layout":6,"number":1,"postIds":["ee82d15c576d"]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":25,"postIds":[]}},{"type":1,"postListMetadata":{"source":2,"layout":6,"number":25,"postIds":[],"sectionHeader":"Trending"}}],"tintColor":"#FF006400","lightText":true,"favicon":{"imageId":"1*B6_f-_SxscJ9FCuIjOrQAQ.jpeg","filter":"","backgroundSize":"","originalWidth":657,"originalHeight":654,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF429A35","point":0},{"color":"#FF408F33","point":0.1},{"color":"#FF3E8432","point":0.2},{"color":"#FF3B7830","point":0.3},{"color":"#FF376C2D","point":0.4},{"color":"#FF33602A","point":0.5},{"color":"#FF2E5426","point":0.6},{"color":"#FF284721","point":0.7},{"color":"#FF223A1C","point":0.8},{"color":"#FF1A2C15","point":0.9},{"color":"#FF111E0D","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF006400","point":0},{"color":"#FF2A7920","point":0.1},{"color":"#FF458C39","point":0.2},{"color":"#FF5D9E50","point":0.3},{"color":"#FF74AF66","point":0.4},{"color":"#FF8ABF7C","point":0.5},{"color":"#FFA0CE92","point":0.6},{"color":"#FFB5DDA8","point":0.7},{"color":"#FFCAEBBE","point":0.8},{"color":"#FFDFF8D4","point":0.9},{"color":"#FFF3FFEA","point":1}],"backgroundColor":"#FF006400"},"highlightSpectrum":{"colorPoints":[{"color":"#FFE3FBD9","point":0},{"color":"#FFDEFAD3","point":0.1},{"color":"#FFD9FACC","point":0.2},{"color":"#FFD3F9C6","point":0.3},{"color":"#FFCEF9C0","point":0.4},{"color":"#FFC9F8B9","point":0.5},{"color":"#FFC3F8B3","point":0.6},{"color":"#FFBDF7AD","point":0.7},{"color":"#FFB8F7A6","point":0.8},{"color":"#FFB2F6A0","point":0.9},{"color":"#FFACF699","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":1,"title":"Dev","tagSlug":"web-development","url":"https://medium.freecodecamp.org/tagged/web-development","source":"tagSlug"},{"type":1,"title":"Design","tagSlug":"design","url":"https://medium.freecodecamp.org/tagged/design","source":"tagSlug"},{"type":1,"title":"Data","tagSlug":"data-science","url":"https://medium.freecodecamp.org/tagged/data-science","source":"tagSlug"},{"type":3,"title":"Learn to code for free","url":"https://freecodecamp.com?ref=mn"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-55446531-3","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4},"type":"Collection"},"homeCollectionId":"336d898217ee","title":"Internationalization in React","detectedLanguage":"en","latestVersion":"bdd93ec2a258","latestPublishedVersion":"bdd93ec2a258","hasUnpublishedEdits":false,"latestRev":876,"createdAt":1470363386281,"updatedAt":1507031788939,"acceptedAt":0,"firstPublishedAt":1470409781661,"latestPublishedAt":1471833993131,"vote":false,"experimentalCss":"","displayAuthor":"","content":{"subtitle":"Internationalization is a big problem. If you want your application to make a worldwide impact, you have to deal with language barriers.","bodyModel":{"paragraphs":[{"name":"aaee","type":3,"text":"Internationalization in React","markups":[]},{"name":"18e5","type":4,"text":"Image credit","markups":[{"type":3,"start":0,"end":12,"href":"http://globalfragrancebusiness.com/?page_id=31","title":"","rel":"","anchorType":0}],"layout":5,"metadata":{"id":"1*hhTdD39DodXWsVl1OCdEpA.jpeg","originalWidth":2716,"originalHeight":791}},{"name":"19a5","type":1,"text":"Internationalization is a big problem. If you want your application to make a worldwide impact, you have to deal with language barriers.","markups":[]},{"name":"08fb","type":1,"text":"Unfortunately, the road from “Your funds will arrive by July 7th” to “Vos fonds arriveront le 7 Juillet” is far from simple.","markups":[]},{"name":"bdc2","type":1,"text":"Before your application can succeed outside the English-speaking world, you’ll have to adapt all your strings, dates, and numbers to the conventions of different cultures.","markups":[]},{"name":"b663","type":1,"text":"Developers call this practice internationalization (which is often abbreviated to “i18n,” because there are 18 letters between the ‘I’ and the ’n’ in the word Internationalization.)","markups":[{"type":1,"start":30,"end":51},{"type":1,"start":83,"end":87},{"type":1,"start":132,"end":133},{"type":1,"start":144,"end":145},{"type":1,"start":159,"end":160},{"type":1,"start":178,"end":179}]},{"name":"3877","type":1,"text":"One reason we overlook internationalization is simply because it’s hard to get right. Every language has different rules and conventions. Adapting to these rules and conventions takes time and effort.","markups":[]},{"name":"3cfb","type":3,"text":"The solution: React Intl","markups":[]},{"name":"5e39","type":1,"text":"But internationalization doesn’t have to be hard, thanks to a new React library. React Intl is an open-source project from Yahoo, and part of Format.js, a collection of JavaScript libraries for internationalization that builds on Javascript’s built-in Intl API.","markups":[{"type":3,"start":81,"end":91,"href":"https://github.com/yahoo/react-intl","title":"","rel":"","anchorType":0},{"type":3,"start":142,"end":151,"href":"http://formatjs.io/","title":"","rel":"","anchorType":0},{"type":1,"start":81,"end":91}]},{"name":"43fa","type":1,"text":"The React Intl library makes internalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization.","markups":[{"type":3,"start":4,"end":14,"href":"https://github.com/yahoo/react-intl","title":"","rel":"","anchorType":0}]},{"name":"f562","type":1,"text":"Let’s give it a walk-through.","markups":[]},{"name":"3f6f","type":3,"text":"Core concepts","markups":[]},{"name":"b4ba","type":1,"text":"Here are the core concepts you’ll need under your belt to get the most out of React Intl:","markups":[]},{"name":"0cfd","type":13,"text":"JavaScript’s Internationalization API","markups":[]},{"name":"1107","type":1,"text":"JavaScript has an Internationalization API specification which defines the Intl object as a standard built-in global object.","markups":[{"type":3,"start":18,"end":42,"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl","title":"","rel":"","anchorType":0},{"type":1,"start":75,"end":79}]},{"name":"a2ef","type":1,"text":"React Intl essentially uses and builds on this API. As long as the browser supports these APIs, React Intl will continue to work its magic.","markups":[]},{"name":"1bb2","type":1,"text":"Note: the only browser that doesn’t currently support these APIs is Safari. We’ll use a polyfill to overcome this in the sample project below.","markups":[{"type":2,"start":0,"end":142}]},{"name":"1ff3","type":13,"text":"Module bundlers","markups":[]},{"name":"7cba","type":1,"text":"React Intl distributes its package via ES6, CommonJS, and UMD modules. Hence, it works really well with bundlers like Webpack, Browserify and Rollup.","markups":[]},{"name":"51ff","type":1,"text":"In the sample project, we’ll be using Webpack as our module bundler.","markups":[]},{"name":"3230","type":1,"text":"If you don’t plan to use a module bundler to load React Intl into your application, I recommend the documentation for more information on other approaches (e.g. via Node.js).","markups":[]},{"name":"f451","type":13,"text":"Loading Locale data","markups":[]},{"name":"48cd","type":1,"text":"React Intl relies on this locale data to support plural and relative-time formatting. Locale data defines the following for each specific locale:","markups":[]},{"name":"707d","type":9,"text":"Locale-specific patterns for formatting and parsing dates, times, time zones, numbers and currency values","markups":[]},{"name":"eee9","type":9,"text":"Translations for names of currencies, eras, months, weekdays, etc.","markups":[]},{"name":"2d27","type":9,"text":"Language and script information (plural cases, characters used, gender of lists, capitalization, writing direction, etc.)","markups":[]},{"name":"3432","type":9,"text":"Country information (currency, calendar preference, week conventions, telephone codes, etc.)","markups":[]},{"name":"1498","type":1,"text":"If you’re using Browserify, Webpack or Rollup to bundle React Intl for the browser, it will only contain locale data for basic English by default. The rest of the locale data is not included in the main library. So in this sample project we’ll cover how to import the locale data per language you choose to support in your app.","markups":[{"type":1,"start":178,"end":181}]},{"name":"e3d5","type":1,"text":"Keep in mind that if you’re using React Intl via Node.js, all locale data will be loaded into memory, so you can skip this step.","markups":[]},{"name":"916a","type":13,"text":"Formatting Data using React Components vs. the API","markups":[]},{"name":"ca79","type":1,"text":"The library provides two ways to format strings, numbers, and dates: React components or an API.","markups":[{"type":1,"start":69,"end":74},{"type":1,"start":75,"end":85},{"type":1,"start":92,"end":95}]},{"name":"0456","type":1,"text":"React Component:","markups":[{"type":1,"start":0,"end":16}]},{"name":"ebfc","type":11,"text":"Component","markups":[],"layout":1,"iframe":{"mediaResourceId":"00b78e1e3cdc4b0432b4125a04e3dfbb"}},{"name":"89a0","type":1,"text":"API:","markups":[{"type":1,"start":0,"end":4}]},{"name":"e6cd","type":11,"text":"API","markups":[],"layout":1,"iframe":{"mediaResourceId":"ef9779c11134f63c89135b18bd0f1e34"}},{"name":"d6d2","type":1,"text":"I take the first approach whenever possible, using declarative idiomatic-React components to format data over the imperative API.","markups":[]},{"name":"d385","type":1,"text":"The benefit of this approach is that it lets us a) compose components with other components, b) allows for rich text and string formatting, c) provides prop type warnings for formatting options, and d) implements shouldComponentUpdate to avoid costly formatting operations.","markups":[{"type":2,"start":213,"end":234}]},{"name":"ce6a","type":1,"text":"Of course, there are times when your only choice is to use the API (For example: passing a string as a prop, a name attribute of an HTML element, etc.), so it still comes in handy.","markups":[]},{"name":"5f09","type":3,"text":"Sample project","markups":[]},{"name":"9821","type":1,"text":"The best way to learn is to see a live example. For this post, I made a simple React project which consists of a main header component, a subheader component, and a few widget components, each with their own headers and body.","markups":[{"type":3,"start":72,"end":92,"href":"https://github.com/iam-peekay/inbox-react-intl","title":"","rel":"","anchorType":0}]},{"name":"72bd","type":1,"text":"First, we’ll walk through the process of setting up React Intl. Then we’ll use the components and API to convert strings, numbers, and dates used within the components.","markups":[]},{"name":"620e","type":3,"text":"Setting up","markups":[]},{"name":"d086","type":1,"text":"Let’s assume we have an existing React application that we’re working from. First, you’ll need to install the React Intl package:","markups":[]},{"name":"98a1","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"445882fb2c2584f1d20659a016565789"}},{"name":"dcf8","type":1,"text":"Next, we’ll need to install the babel plugin for React Intl:","markups":[]},{"name":"f740","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"c5c439d8c43ab07f6b5865fd29c5c252"}},{"name":"0caa","type":1,"text":"To actually have the babel plugin do its magic, we need to set up our .babelrc file to include this plugin. Here’s what my .babelrc looks like with the react-intl plugin added to it (lines 6–11):","markups":[{"type":1,"start":70,"end":78},{"type":1,"start":123,"end":132}]},{"name":"4131","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"57fa407140c8cb38786b8e3198a4e9d5"}},{"name":"61f2","type":1,"text":"What this babel plugin does is it extract all the string messages in your application that are defined using either defineMessages, \x3cFormattedMessage\x3e, or \x3cFormattedHTMLMessage\x3e.","markups":[{"type":1,"start":116,"end":130},{"type":1,"start":132,"end":150},{"type":1,"start":155,"end":177}]},{"name":"e2ad","type":1,"text":"(Note that defineMessages, \x3cFormattedMessage\x3e, and \x3cFormattedHTMLMessage\x3e are all named exports of the React Intl package).","markups":[{"type":1,"start":11,"end":25},{"type":1,"start":27,"end":45},{"type":1,"start":51,"end":73}]},{"name":"3f7b","type":1,"text":"Once extracted, it generates JSON files which contain the string messages and places them in the directory you defined in the messagesDir path above.","markups":[{"type":1,"start":126,"end":137}]},{"name":"f7f3","type":4,"text":"Extracted messages","markups":[],"layout":1,"metadata":{"id":"1*KMLhO1bgMHip2XhcH3ZmMw.png","originalWidth":860,"originalHeight":722}},{"name":"4b14","type":3,"text":"Loading data","markups":[]},{"name":"7256","type":1,"text":"Next, let’s load the appropriate locale data for the languages that we need to support.","markups":[]},{"name":"e0b4","type":1,"text":"As I mentioned above, if you’re bundling for the browser using Webpack, Browserify or Rollup, React Intl comes English-only by default. So we have to add the other locale data manually.","markups":[]},{"name":"f573","type":1,"text":"In the root component file, we add the locale data using the addLocaleData API. The data will then be passed the contents of the locale data module, which will then be registered in its locale data registry.","markups":[{"type":1,"start":61,"end":74}]},{"name":"70b2","type":1,"text":"For this sample project, I’m going to assume we’re supporting 4 languages: English, Spanish, French and Italian.","markups":[]},{"name":"b452","type":11,"text":"Loading locale data","markups":[],"layout":1,"iframe":{"mediaResourceId":"bb200e6c67817af13a40eb10c3be91e4"}},{"name":"eb36","type":1,"text":"Note: If your app supports a lot more, the recommended approach to adding locale data is to dynamically load the locale data based on the current user’s language. Read the React Intl docs for more info on this approach.","markups":[{"type":1,"start":0,"end":4}]},{"name":"10c8","type":3,"text":"Create the i18n context in your React application","markups":[]},{"name":"dba0","type":1,"text":"So far, we’ve installed the React Intl package, set up our .babelrc plugin, and loaded the appropriate locale data.","markups":[{"type":1,"start":58,"end":67}]},{"name":"97c7","type":1,"text":"One final step is to create an i18n context for all our React components so that the current user’s locale and translated message (based on the user’s locale) can be loaded into the React Intl Components that you define in your app.","markups":[{"type":1,"start":31,"end":35}]},{"name":"ee9c","type":1,"text":"To do this, we first define the messages to pass to IntlProvider based on the user’s locale (see lines 18–26 below). Then we wrap the root React component with IntlProvider, which is a named export provided by React-Intl (see lines 31–33):","markups":[{"type":1,"start":52,"end":64},{"type":1,"start":160,"end":174},{"type":1,"start":182,"end":183}]},{"name":"2871","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"29792f23c46ee7806270d31978336316"}},{"name":"d1f3","type":1,"text":"In this setup, we’re assuming that our translated data will live in build/locales/data.json and that the data is grouped by language, like so:","markups":[{"type":1,"start":68,"end":91}]},{"name":"823f","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"80a2fc965ef5942efa34bd75bb033bd0"}},{"name":"1bb4","type":3,"text":"Build a script for translating","markups":[]},{"name":"238d","type":1,"text":"Now that we have the configuration all done, let’s take a look at how we can build a simple script that will grab all the strings that babel extracts for us into multiple JSON files, and combine them into one file.","markups":[]},{"name":"95eb","type":1,"text":"The point of this script is to accumulate all the English strings so that we can then upload these strings to a translation service, have them be translated into the different languages we support, and then place the results into the build/locales/data.json file we used above. Once there, the IntlProvider component can finally load them into our root component.","markups":[{"type":1,"start":234,"end":257},{"type":1,"start":294,"end":306}]},{"name":"4acd","type":1,"text":"Since we don’t need to actually do the translations in this post, we’ll skip this step and just build a script that puts everything in one file. Just remember to loop in a translation service provider in real-world applications :)","markups":[]},{"name":"7066","type":1,"text":"All credit goes to the React Intl library authors for generating this script below:","markups":[]},{"name":"a2b3","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"62a356fcd5eb80105371ca777f132d81"}},{"name":"1ee1","type":3,"text":"Steps to convert dates, numbers and strings with React Intl","markups":[]},{"name":"ccdd","type":1,"text":"Okay — we’re finally ready to do some formatting!","markups":[]},{"name":"47fa","type":1,"text":"The sample app is a simple layout with a header, subheader, and widgets, each of which contains strings, numbers, and/or a dates:","markups":[{"type":1,"start":41,"end":47},{"type":1,"start":49,"end":58},{"type":1,"start":64,"end":71}]},{"name":"0e06","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*CcUQumAeLtKuNb9BpQmp_g.png","originalWidth":2864,"originalHeight":1492}},{"name":"6d6e","type":1,"text":"Nothing sophisticated, but it’s enough to get us started.","markups":[]},{"name":"b5a6","type":13,"text":"Header","markups":[]},{"name":"7b8e","type":1,"text":"First, we’ll look at the header which says: “Welcome to your dashboard, Preethi!”","markups":[{"type":2,"start":44,"end":81}]},{"name":"c7bf","type":1,"text":"To convert this, we’ll use the FormattedMessage component:","markups":[{"type":1,"start":31,"end":47}]},{"name":"1430","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"91036d12b3aa77d97fd9a193533d4214"}},{"name":"8001","type":1,"text":"The FormattedMessage component has props that correspond something called a “Message Descriptor” in React Intl. The Message Descriptor is the format used to define default messages/strings, and is useful for providing the data necessary for having the strings/messages translated. It contains the following properties:","markups":[{"type":1,"start":4,"end":20},{"type":1,"start":77,"end":84},{"type":1,"start":85,"end":95},{"type":1,"start":116,"end":134}]},{"name":"a8ac","type":9,"text":"id: A unique, stable identifier for the message","markups":[{"type":1,"start":0,"end":2}]},{"name":"3357","type":9,"text":"description: Context for the translator about how it’s used in the UI (optional)","markups":[{"type":1,"start":0,"end":11}]},{"name":"0f5a","type":9,"text":"defaultMessage: The default message (in English)","markups":[{"type":1,"start":0,"end":14}]},{"name":"39d9","type":1,"text":"The id prop must be unique for every message defined in your app. What’s awesome is that the defaultMessage can be passed data from the props, as is the case in name above. (Note that the values that are passed as data won’t get translated — they’re simply inserted into the final translated string as-is.)","markups":[{"type":1,"start":4,"end":6},{"type":1,"start":93,"end":107},{"type":1,"start":161,"end":165}]},{"name":"73c3","type":13,"text":"SubHeader","markups":[]},{"name":"c333","type":1,"text":"Next, let’s look at the Subheader, which is slightly more involved:","markups":[]},{"name":"5ac0","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"8da9c3afb2b7c82550e1a8be013b3ca4"}},{"name":"4cf3","type":1,"text":"The ability to compose components within other components (i.e. have Formatted* items within another Formatted* item) is a powerful feature of React Intl.","markups":[{"type":1,"start":69,"end":78},{"type":1,"start":101,"end":110}]},{"name":"fc63","type":1,"text":"You can see in the above example that unreadCount is a FormattedNumber, and notifications is a FormattedPlural, and that both are values passed into FormattedMessages’s defaultMessage. Beautiful!","markups":[{"type":1,"start":38,"end":49},{"type":1,"start":55,"end":70},{"type":1,"start":76,"end":89},{"type":1,"start":95,"end":110},{"type":1,"start":149,"end":166},{"type":1,"start":169,"end":183}]},{"name":"c889","type":1,"text":"Another slick feature is FormattedRelative, which will render the formatted relative time:","markups":[{"type":1,"start":25,"end":42}]},{"name":"a724","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"11e3cd60a040986b4a0807f0603c7099"}},{"name":"e455","type":1,"text":"Once translated and formatted, it will read: “You last logged in 4 hours ago!” (Or however long ago lastLogin was.)","markups":[{"type":2,"start":45,"end":79}]},{"name":"3b52","type":3,"text":"Passing formatted strings as components","markups":[]},{"name":"71c1","type":1,"text":"In the above two snippets, we saw how to use the Formatted* Components to define strings, numbers, dates, and pluralization.","markups":[{"type":1,"start":49,"end":58}]},{"name":"e372","type":1,"text":"However, there are plenty of instances where it’s necessary to pass formatted strings as props or use formatted strings to name an HTML component. The FormattedMessage component doesn’t well work in cases like this.","markups":[{"type":1,"start":151,"end":167}]},{"name":"80e0","type":1,"text":"Luckily, React Intl’s defineMessages API lets us imperatively define all of a component’s strings, then pass them as props to the component.","markups":[{"type":1,"start":22,"end":36}]},{"name":"e739","type":1,"text":"Let’s try this approach for the widget headers and body. First, we use defineMessages to define our strings:","markups":[{"type":1,"start":71,"end":85}]},{"name":"5c43","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"4fb36cfed13f80af5b79e54bd07caec4"}},{"name":"7652","type":1,"text":"Then, assuming we have a Widget component that expects header and body props, we can continue like so:","markups":[]},{"name":"40d2","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"a20a1a1e718cf1e94307826d64aa49da"}},{"name":"e3e1","type":1,"text":"One thing you might have noticed in the first widget is that we can also pass data to the strings defined in defineMessages. Here, we passed the current formatted date as the value date. Pretty neat, huh?","markups":[{"type":1,"start":109,"end":123},{"type":1,"start":181,"end":185}]},{"name":"19f9","type":1,"text":"The API also works well for formatting numbers, dates, times, relative times, and pluralization (check out their docs for more on this)","markups":[{"type":3,"start":113,"end":117,"href":"https://github.com/yahoo/react-intl/wiki/API","title":"","rel":"","anchorType":0}]},{"name":"a29b","type":3,"text":"How to make it work in Safari","markups":[]},{"name":"2950","type":1,"text":"Now that we’re almost done, I’ll throw one last curve ball at you:","markups":[]},{"name":"2150","type":1,"text":"The current setup will not work for Safari browsers :(","markups":[]},{"name":"dafb","type":1,"text":"As mentioned above, this is because Safari does not currently have native support for Javascript’s Internationalization API.","markups":[]},{"name":"152b","type":1,"text":"Fortunately, there’s still a way to make this work for Safari users. What we need to do is use the Intl polyfill. There are a few different ways to load this in. Let’s continue using Webpack, for the sake of example:","markups":[{"type":1,"start":99,"end":112}]},{"name":"0c7c","type":1,"text":"First, we install the intl package from npm:","markups":[{"type":1,"start":22,"end":26}]},{"name":"6e8b","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"9103178f0ca1f481ff8f0ea4003e6e71"}},{"name":"4aa1","type":1,"text":"Next, we’ll write a simple if-statement to only load the polyfill if there is no native browser support for Intl (see lines 30–57). This is to avoid loading the library and all the locale data into your app when not needed.","markups":[{"type":1,"start":108,"end":113}]},{"name":"c175","type":11,"text":"","markups":[],"layout":1,"iframe":{"mediaResourceId":"408d042d48df912f29c3cbe8507ed5c1"}},{"name":"1e7b","type":1,"text":"As you can see, the first thing to check is if the intl global is not available on window. If not, then we load the intl polyfill and associated locale data and then render the component. Otherwise, we simply render the component.","markups":[{"type":1,"start":51,"end":55},{"type":2,"start":66,"end":69}]},{"name":"302a","type":1,"text":"And at last, here’s our pre-translated app (still in English of course). I’ll leave you with the final step, which is finding a translation provider and getting these strings translated!","markups":[]},{"name":"d0b8","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*CcUQumAeLtKuNb9BpQmp_g.png","originalWidth":2864,"originalHeight":1492}},{"name":"1891","type":3,"text":"Other tips","markups":[]},{"name":"1db8","type":1,"text":"I hope this post is enough to start turning your spazzy React application into one that’s amicable to other cultures and languages.","markups":[]},{"name":"b6cb","type":1,"text":"Before I sign off, here are a few other tips to consider when internationalizing your app:","markups":[]},{"name":"c22b","type":9,"text":"Flexible components: Build your components such that they are flexible and allow for text expansion and shrinkage. Some languages can expand much larger or shrink much smaller than English. If you don’t account for this, your layout can look unbearable after translation.","markups":[{"type":1,"start":0,"end":20}]},{"name":"3b34","type":9,"text":"Appropriate font size: Use a font size that will work well with all the languages you support. Some languages, like Japanese and Chinese, need larger font sizes.","markups":[{"type":1,"start":0,"end":22}]},{"name":"5953","type":9,"text":"UTF-8: Use UTF-8 everywhere. This includes in your HTML, server-side language, database, etc. Unlike other encodings, UTF-8 encoding handles almost all languages really well.","markups":[{"type":1,"start":0,"end":5}]},{"name":"86bb","type":9,"text":"No text in images: Avoid using text in images because translating text in graphics is extremely difficult, and not worth the pain.","markups":[{"type":1,"start":0,"end":18}]},{"name":"7c25","type":9,"text":"Don’t split your strings: For example, if you have “Your funds will arrive by July 7th,” avoid splitting strings like “Your funds will arrive by” and “July 7th”. The combination might only work in English due to word order variations in other languages.","markups":[{"type":1,"start":0,"end":25}]},{"name":"9918","type":3,"text":"Conclusion","markups":[]},{"name":"867f","type":1,"text":"As always, feel free to comment with suggestions and questions. I’d love to hear it :)","markups":[]},{"name":"4d91","type":1,"text":"All the code for the sample application can be found on github here: https://github.com/iam-peekay/inbox-react-intl","markups":[{"type":3,"start":69,"end":115,"href":"https://github.com/iam-peekay/inbox-react-intl","title":"","rel":"nofollow","anchorType":0}]}],"sections":[{"name":"90aa","startIndex":0}]},"postDisplay":{"coverless":true}},"virtuals":{"statusForCollection":"APPROVED","allowNotes":true,"previewImage":{"imageId":"1*hhTdD39DodXWsVl1OCdEpA.jpeg","filter":"","backgroundSize":"","originalWidth":2716,"originalHeight":791,"strategy":"resample","height":0,"width":0},"wordCount":2206,"imageCount":4,"readingTime":9.024528301886791,"subtitle":"Internationalization is a big problem. If you want your application to make a worldwide impact, you have to deal with language barriers.","publishedInCount":1,"usersBySocialRecommends":[],"recommends":368,"socialRecommends":[],"isBookmarked":false,"tags":[{"slug":"javascript","name":"JavaScript","postCount":43721,"virtuals":{"isFollowing":false},"metadata":{"followerCount":40409,"postCount":43721,"coverImage":{"id":"1*Pmm5N4hr9cANciDL5nbDpw.png","originalWidth":1363,"originalHeight":516}},"type":"Tag"},{"slug":"react","name":"React","postCount":10094,"virtuals":{"isFollowing":false},"metadata":{"followerCount":17668,"postCount":10094,"coverImage":{"id":"1*Pmm5N4hr9cANciDL5nbDpw.png","originalWidth":1363,"originalHeight":516}},"type":"Tag"},{"slug":"web-development","name":"Web Development","postCount":52557,"virtuals":{"isFollowing":false},"metadata":{"followerCount":44464,"postCount":52557,"coverImage":{"id":"1*ueWmI48uuShON-hX7LwI0w.png","originalWidth":1217,"originalHeight":689}},"type":"Tag"},{"slug":"programming","name":"Programming","postCount":44602,"virtuals":{"isFollowing":false},"metadata":{"followerCount":47373,"postCount":44602,"coverImage":{"id":"1*ueWmI48uuShON-hX7LwI0w.png","originalWidth":1217,"originalHeight":689}},"type":"Tag"},{"slug":"tech","name":"Tech","postCount":99335,"virtuals":{"isFollowing":false},"metadata":{"followerCount":1071524,"postCount":99335,"coverImage":{"id":"1*ueWmI48uuShON-hX7LwI0w.png","originalWidth":1217,"originalHeight":689}},"type":"Tag"}],"socialRecommendsCount":0,"responsesCreatedCount":25,"links":{"entries":[],"version":"0.3","generatedAt":1471904292586},"isLockedPreviewOnly":false,"takeoverId":"","metaDescription":"","totalClapCount":571,"sectionCount":1},"coverless":true,"slug":"internationalization-in-react","translationSourcePostId":"","translationSourceCreatorId":"","isApprovedTranslation":false,"inResponseToPostId":"","inResponseToRemovedAt":0,"isTitleSynthesized":true,"allowResponses":true,"importedUrl":"","importedPublishedAt":0,"visibility":0,"uniqueSlug":"internationalization-in-react-7264738274a0","previewContent":{"bodyModel":{"paragraphs":[{"name":"aaee","type":3,"text":"Internationalization in React","markups":[],"alignment":1},{"name":"18e5","type":4,"text":"","markups":[{"type":3,"start":0,"end":12,"href":"http://globalfragrancebusiness.com/?page_id=31","title":"","rel":"","anchorType":0}],"layout":10,"metadata":{"id":"1*hhTdD39DodXWsVl1OCdEpA.jpeg","originalWidth":2716,"originalHeight":791}},{"name":"19a5","type":1,"text":"Internationalization is a big problem. If you want your application to make a worldwide impact, you have to…","markups":[],"alignment":1}],"sections":[{"startIndex":0}]},"isFullContent":false},"license":0,"inResponseToMediaResourceId":"","canonicalUrl":"https://medium.freecodecamp.org/internationalization-in-react-7264738274a0","approvedHomeCollectionId":"336d898217ee","approvedHomeCollection":{"id":"336d898217ee","name":"freeCodeCamp","slug":"free-code-camp","tags":["TECHNOLOGY","DESIGN","TECH","STARTUP","PRODUCTIVITY"],"creatorId":"8b318225c16a","description":"Our community publishes stories worth reading on development, design, and data science.","shortDescription":"Our community publishes stories worth reading on…","image":{"imageId":"1*MotlWcSa2n6FrOx3ul89kw.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":329952,"activeAt":1507027665032},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*wViBNJ1o9rM5p6b-gf3vxg.png","filter":"","backgroundSize":"","originalWidth":600,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"freecodecamp","facebookPageName":"freecodecamp","publicEmail":"quincy@freecodecamp.com","collectionMastheadId":"af94c9c16d4","domain":"medium.freecodecamp.org","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4}},{"type":1,"postListMetadata":{"source":3,"layout":6,"number":1,"postIds":["ee82d15c576d"]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":25,"postIds":[]}},{"type":1,"postListMetadata":{"source":2,"layout":6,"number":25,"postIds":[],"sectionHeader":"Trending"}}],"tintColor":"#FF006400","lightText":true,"favicon":{"imageId":"1*B6_f-_SxscJ9FCuIjOrQAQ.jpeg","filter":"","backgroundSize":"","originalWidth":657,"originalHeight":654,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF429A35","point":0},{"color":"#FF408F33","point":0.1},{"color":"#FF3E8432","point":0.2},{"color":"#FF3B7830","point":0.3},{"color":"#FF376C2D","point":0.4},{"color":"#FF33602A","point":0.5},{"color":"#FF2E5426","point":0.6},{"color":"#FF284721","point":0.7},{"color":"#FF223A1C","point":0.8},{"color":"#FF1A2C15","point":0.9},{"color":"#FF111E0D","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF006400","point":0},{"color":"#FF2A7920","point":0.1},{"color":"#FF458C39","point":0.2},{"color":"#FF5D9E50","point":0.3},{"color":"#FF74AF66","point":0.4},{"color":"#FF8ABF7C","point":0.5},{"color":"#FFA0CE92","point":0.6},{"color":"#FFB5DDA8","point":0.7},{"color":"#FFCAEBBE","point":0.8},{"color":"#FFDFF8D4","point":0.9},{"color":"#FFF3FFEA","point":1}],"backgroundColor":"#FF006400"},"highlightSpectrum":{"colorPoints":[{"color":"#FFE3FBD9","point":0},{"color":"#FFDEFAD3","point":0.1},{"color":"#FFD9FACC","point":0.2},{"color":"#FFD3F9C6","point":0.3},{"color":"#FFCEF9C0","point":0.4},{"color":"#FFC9F8B9","point":0.5},{"color":"#FFC3F8B3","point":0.6},{"color":"#FFBDF7AD","point":0.7},{"color":"#FFB8F7A6","point":0.8},{"color":"#FFB2F6A0","point":0.9},{"color":"#FFACF699","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":1,"title":"Dev","tagSlug":"web-development","url":"https://medium.freecodecamp.org/tagged/web-development","source":"tagSlug"},{"type":1,"title":"Design","tagSlug":"design","url":"https://medium.freecodecamp.org/tagged/design","source":"tagSlug"},{"type":1,"title":"Data","tagSlug":"data-science","url":"https://medium.freecodecamp.org/tagged/data-science","source":"tagSlug"},{"type":3,"title":"Learn to code for free","url":"https://freecodecamp.com?ref=mn"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-55446531-3","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4},"type":"Collection"},"newsletterId":"","webCanonicalUrl":"https://medium.freecodecamp.org/internationalization-in-react-7264738274a0","mediumUrl":"https://medium.freecodecamp.org/internationalization-in-react-7264738274a0","migrationId":"","notifyFollowers":true,"notifyTwitter":false,"isSponsored":false,"isRequestToPubDisabled":false,"notifyFacebook":false,"responseHiddenOnParentPostAt":0,"isSeries":false,"isSubscriptionLocked":false,"seriesLastAppendedAt":0,"audioVersionDurationSec":0,"sequenceId":"","isNsfw":false,"isEligibleForRevenue":false,"isBlockedFromHightower":false,"type":"Post"},"mentionedUsers":[],"collaborators":[],"membershipPlans":[],"collectionUserRelations":[],"mode":null,"references":{"User":{"d446dafbe292":{"userId":"d446dafbe292","name":"Preethi Kasireddy","username":"preethikasireddy","createdAt":1405994076258,"lastPostCreatedAt":1506968555442,"imageId":"1*lHIefjTQECM96G6Ef8xn6g.jpeg","backgroundImageId":"","bio":"Blockchain Engineer. I have a passion for understanding things at a fundamental level and sharing it as clearly as possible.","twitterScreenName":"iam_preethi","socialStats":{"userId":"d446dafbe292","usersFollowedCount":270,"usersFollowedByCount":32349,"type":"SocialStats"},"social":{"userId":"lo_1db8d9c968f3","targetUserId":"d446dafbe292","type":"Social"},"facebookAccountId":"10152986375997506","allowNotes":1,"type":"User"}},"Collection":{"336d898217ee":{"id":"336d898217ee","name":"freeCodeCamp","slug":"free-code-camp","tags":["TECHNOLOGY","DESIGN","TECH","STARTUP","PRODUCTIVITY"],"creatorId":"8b318225c16a","description":"Our community publishes stories worth reading on development, design, and data science.","shortDescription":"Our community publishes stories worth reading on…","image":{"imageId":"1*MotlWcSa2n6FrOx3ul89kw.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":329952,"activeAt":1507027665032},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*wViBNJ1o9rM5p6b-gf3vxg.png","filter":"","backgroundSize":"","originalWidth":600,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"freecodecamp","facebookPageName":"freecodecamp","publicEmail":"quincy@freecodecamp.com","collectionMastheadId":"af94c9c16d4","domain":"medium.freecodecamp.org","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4}},{"type":1,"postListMetadata":{"source":3,"layout":6,"number":1,"postIds":["ee82d15c576d"]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":25,"postIds":[]}},{"type":1,"postListMetadata":{"source":2,"layout":6,"number":25,"postIds":[],"sectionHeader":"Trending"}}],"tintColor":"#FF006400","lightText":true,"favicon":{"imageId":"1*B6_f-_SxscJ9FCuIjOrQAQ.jpeg","filter":"","backgroundSize":"","originalWidth":657,"originalHeight":654,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF429A35","point":0},{"color":"#FF408F33","point":0.1},{"color":"#FF3E8432","point":0.2},{"color":"#FF3B7830","point":0.3},{"color":"#FF376C2D","point":0.4},{"color":"#FF33602A","point":0.5},{"color":"#FF2E5426","point":0.6},{"color":"#FF284721","point":0.7},{"color":"#FF223A1C","point":0.8},{"color":"#FF1A2C15","point":0.9},{"color":"#FF111E0D","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF006400","point":0},{"color":"#FF2A7920","point":0.1},{"color":"#FF458C39","point":0.2},{"color":"#FF5D9E50","point":0.3},{"color":"#FF74AF66","point":0.4},{"color":"#FF8ABF7C","point":0.5},{"color":"#FFA0CE92","point":0.6},{"color":"#FFB5DDA8","point":0.7},{"color":"#FFCAEBBE","point":0.8},{"color":"#FFDFF8D4","point":0.9},{"color":"#FFF3FFEA","point":1}],"backgroundColor":"#FF006400"},"highlightSpectrum":{"colorPoints":[{"color":"#FFE3FBD9","point":0},{"color":"#FFDEFAD3","point":0.1},{"color":"#FFD9FACC","point":0.2},{"color":"#FFD3F9C6","point":0.3},{"color":"#FFCEF9C0","point":0.4},{"color":"#FFC9F8B9","point":0.5},{"color":"#FFC3F8B3","point":0.6},{"color":"#FFBDF7AD","point":0.7},{"color":"#FFB8F7A6","point":0.8},{"color":"#FFB2F6A0","point":0.9},{"color":"#FFACF699","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":1,"title":"Dev","tagSlug":"web-development","url":"https://medium.freecodecamp.org/tagged/web-development","source":"tagSlug"},{"type":1,"title":"Design","tagSlug":"design","url":"https://medium.freecodecamp.org/tagged/design","source":"tagSlug"},{"type":1,"title":"Data","tagSlug":"data-science","url":"https://medium.freecodecamp.org/tagged/data-science","source":"tagSlug"},{"type":3,"title":"Learn to code for free","url":"https://freecodecamp.com?ref=mn"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-55446531-3","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4},"type":"Collection"}},"Social":{"d446dafbe292":{"userId":"lo_1db8d9c968f3","targetUserId":"d446dafbe292","type":"Social"}},"SocialStats":{"d446dafbe292":{"userId":"d446dafbe292","usersFollowedCount":270,"usersFollowedByCount":32349,"type":"SocialStats"}}}})
// ]]></script>
 </body>
</html>