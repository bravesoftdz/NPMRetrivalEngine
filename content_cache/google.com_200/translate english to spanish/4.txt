<!doctype html>
<html>
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="chrome=1"> 
  <title>Polyglot.js by airbnb</title> 
  <link rel="stylesheet" href="/polyglot.js/assets/css/style.css?v=3965c94748c67e1840010eb146732fd3ce4d32dc"> 
  <meta name="viewport" content="width=device-width"> 
  <!--[if lt IE 9]>
    <script src="//html5shiv.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]--> 
 </head> 
 <body> 
  <div class="wrapper"> 
   <header> 
    <h1>Polyglot.js</h1> 
    <p>Give your JavaScript the ability to speak many languages.</p> 
    <p class="view"><a href="https://github.com/airbnb/polyglot.js">View the Project on GitHub <small></small></a></p> 
    <ul> 
     <li><a href="https://github.com/airbnb/polyglot.js/zipball/gh-pages">Download <strong>ZIP File</strong></a></li> 
     <li><a href="https://github.com/airbnb/polyglot.js/tarball/gh-pages">Download <strong>TAR Ball</strong></a></li> 
     <li><a href="https://github.com/airbnb/polyglot.js">View On <strong>GitHub</strong></a></li> 
    </ul> 
   </header> 
   <section> 
    <h1 id="polyglotjs">Polyglot.js</h1> 
    <p><a href="https://travis-ci.org/airbnb/polyglot.js"><img src="https://travis-ci.org/airbnb/polyglot.js.svg" alt="Build Status"></a></p> 
    <p><a href="https://gitter.im/airbnb/polyglot.js?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/airbnb/polyglot.js"></a></p> 
    <p>Polyglot.js is a tiny I18n helper library written in JavaScript, made to work both in the browser and in CommonJS environments (Node). It provides a simple solution for interpolation and pluralization, based off of Airbnb’s experience adding I18n functionality to its Backbone.js and Node apps. Polyglot has zero dependencies.</p> 
    <p>I18n is incredibly important for us at <a href="https://www.airbnb.com/">Airbnb</a>, as we have listings in 192 countries, and we translate our site into 30-odd different languages. We’re also <a href="https://www.airbnb.com/jobs/departments/engineering">hiring talented engineers</a> to help us scale up to meet the challenges of buliding a global marketplace.</p> 
    <p>View the <a href="http://airbnb.github.com/polyglot.js">documentation on Github</a>.</p> 
    <p>View the <a href="http://airbnb.github.com/polyglot.js/polyglot.html">annotated source</a>.</p> 
    <p>Download the <a href="https://raw.github.com/airbnb/polyglot.js/master/build/polyglot.js">development version</a>: 7.9kb, unminified with comments.</p> 
    <p>Download the <a href="https://raw.github.com/airbnb/polyglot.js/master/build/polyglot.min.js">production version</a>: 2.8kb, minified (1.3kb gzipped).</p> 
    <p>Polylglot is agnostic to your translation backend. It doesn’t perform any translation; it simply gives you a way to manage translated phrases from your client- or server-side JavaScript application.</p> 
    <h2 id="installation">Installation</h2> 
    <p>For use with Node, install with <a href="http://npmjs.org">NPM</a>:</p> 
    <div class="highlighter-rouge"> 
     <pre class="highlight"><code>$ npm install node-polyglot
</code></pre> 
    </div> 
    <h3 id="running-the-tests">Running the tests</h3> 
    <p>Clone the repo, run <code class="highlighter-rouge">npm install</code>, and <code class="highlighter-rouge">npm test</code>.</p> 
    <h2 id="usage">Usage</h2> 
    <h3 id="instantiation">Instantiation</h3> 
    <p>First, create an instance of the <code class="highlighter-rouge">Polyglot</code> class, which you will use for translation.</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="kd">var</span> <span class="nx">polyglot</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Polyglot</span><span class="p">();</span>
</code></pre> 
    </div> 
    <p>Polyglot is class-based so you can maintain different sets of phrases at the same time, possibly in different locales. This is very useful for example when serving requests with <a href="http://expressjs.com">Express</a>, because each request may have a different locale, and you don’t want concurrent requests to clobber each other’s phrases.</p> 
    <h3 id="translation">Translation</h3> 
    <p>Tell Polyglot what to say by simply giving it a phrases object, where the key is the canonical name of the phrase and the value is the already-translated string.</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="nx">polyglot</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="s2">"hello"</span><span class="p">:</span> <span class="s2">"Hello"</span>
<span class="p">});</span>

<span class="nx">polyglot</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">"hello"</span><span class="p">);</span>
<span class="o">=&gt;</span> <span class="s2">"Hello"</span>
</code></pre> 
    </div> 
    <p>You can also pass a mapping at instantiation, using the key <code class="highlighter-rouge">phrases</code>:</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="kd">var</span> <span class="nx">polyglot</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Polyglot</span><span class="p">({</span><span class="na">phrases</span><span class="p">:</span> <span class="p">{</span><span class="s2">"hello"</span><span class="p">:</span> <span class="s2">"Hello"</span><span class="p">}});</span>
</code></pre> 
    </div> 
    <p>Polyglot doesn’t do the translation for you. It’s up to you to give it the proper phrases for the user’s locale.</p> 
    <p>A common pattern is to gather a hash of phrases in your backend, and output them in a <code class="highlighter-rouge">&lt;script&gt;</code> tag at the bottom of the document. For example, in Rails:</p> 
    <p><code class="highlighter-rouge">app/controllers/home_controller.rb</code></p> 
    <div class="language-ruby highlighter-rouge"> 
     <pre class="highlight"><code><span class="k">def</span> <span class="nf">index</span>
  <span class="vi">@phrases</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s2">"home.login"</span> <span class="o">=&gt;</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s2">"home.login"</span><span class="p">),</span>
    <span class="s2">"home.signup"</span> <span class="o">=&gt;</span> <span class="no">I18n</span><span class="p">.</span><span class="nf">t</span><span class="p">(</span><span class="s2">"home.signup"</span><span class="p">),</span>
    <span class="p">.</span><span class="nf">.</span><span class="o">.</span>
  <span class="p">}</span>
<span class="k">end</span>
</code></pre> 
    </div> 
    <p><code class="highlighter-rouge">app/views/home/index.html.erb</code></p> 
    <div class="language-html highlighter-rouge"> 
     <pre class="highlight"><code><span class="nt">&lt;script&gt;</span>
  <span class="kd">var</span> <span class="nx">polyglot</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Polyglot</span><span class="p">({</span><span class="na">phrases</span><span class="p">:</span> <span class="o">&lt;%=</span> <span class="nx">raw</span> <span class="err">@</span><span class="nx">phrases</span><span class="p">.</span><span class="nx">to_json</span> <span class="o">%&gt;</span><span class="p">});</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre> 
    </div> 
    <p>And now you can utilize i.e. <code class="highlighter-rouge">polyglot.t("home.login")</code> in your JavaScript application or Handlebars templates.</p> 
    <h3 id="interpolation">Interpolation</h3> 
    <p><code class="highlighter-rouge">Polyglot.t()</code> also provides interpolation. Pass an object with key-value pairs of interpolation arguments as the second parameter.</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="nx">polyglot</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="s2">"hello_name"</span><span class="p">:</span> <span class="s2">"Hola, %{name}."</span>
<span class="p">});</span>

<span class="nx">polyglot</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">"hello_name"</span><span class="p">,</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="s2">"DeNiro"</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s2">"Hola, DeNiro."</span>
</code></pre> 
    </div> 
    <p>Polyglot also supports nested phrase objects.</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="nx">polyglot</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="s2">"nav"</span><span class="p">:</span> <span class="p">{</span>
    <span class="s2">"hello"</span><span class="p">:</span> <span class="s2">"Hello"</span><span class="p">,</span>
    <span class="s2">"hello_name"</span><span class="p">:</span> <span class="s2">"Hello, %{name}"</span><span class="p">,</span>
    <span class="s2">"sidebar"</span><span class="p">:</span> <span class="p">{</span>
      <span class="s2">"welcome"</span><span class="p">:</span> <span class="s2">"Welcome"</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="nx">polyglot</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">"nav.sidebar.welcome"</span><span class="p">);</span>
<span class="o">=&gt;</span> <span class="s2">"Welcome"</span>
</code></pre> 
    </div> 
    <h3 id="pluralization">Pluralization</h3> 
    <p>For pluralization to work properly, you need to tell Polyglot what the current locale is. You can use <code class="highlighter-rouge">polyglot.locale("fr")</code> to set the locale to, for example, French. This method is also a getter:</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="nx">polyglot</span><span class="p">.</span><span class="nx">locale</span><span class="p">()</span>
<span class="o">=&gt;</span> <span class="s2">"fr"</span>
</code></pre> 
    </div> 
    <p>You can also pass this in during instantiation.</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="kd">var</span> <span class="nx">polyglot</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Polyglot</span><span class="p">({</span><span class="na">locale</span><span class="p">:</span> <span class="s2">"fr"</span><span class="p">});</span>
</code></pre> 
    </div> 
    <p>Currently, the <em>only</em> thing that Polyglot uses this locale setting for is pluralization.</p> 
    <p>Polyglot provides a very basic pattern for providing pluralization based on a single string that contains all plural forms for a given phrase. Because various languages have different nominal forms for zero, one, and multiple, and because the noun can be before or after the count, we have to be overly explicit about the possible phrases.</p> 
    <p>To get a pluralized phrase, still use <code class="highlighter-rouge">polyglot.t()</code> but use a specially-formatted phrase string that separates the plural forms by the delimeter <code class="highlighter-rouge">||||</code>, or four vertical pipe characters.</p> 
    <p>For pluralizing “car” in English, Polyglot assumes you have a phrase of the form:</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="nx">polyglot</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="s2">"num_cars"</span><span class="p">:</span> <span class="s2">"%{smart_count} car |||| %{smart_count} cars"</span><span class="p">,</span>
<span class="p">});</span>
</code></pre> 
    </div> 
    <p>In English (and German, Spanish, Italian, and a few others) there are only two plural forms: singular and not-singular.</p> 
    <p>Some languages get a bit more complicated. In Czech, there are three separate forms: 1, 2 through 4, and 5 and up. Russian is even crazier.</p> 
    <p><code class="highlighter-rouge">polyglot.t()</code> will choose the appropriate phrase based on the provided <code class="highlighter-rouge">smart_count</code> option, whose value is a number.</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="nx">polyglot</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">"num_cars"</span><span class="p">,</span> <span class="p">{</span><span class="na">smart_count</span><span class="p">:</span> <span class="mi">0</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s2">"0 cars"</span>

<span class="nx">polyglot</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">"num_cars"</span><span class="p">,</span> <span class="p">{</span><span class="na">smart_count</span><span class="p">:</span> <span class="mi">1</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s2">"1 car"</span>

<span class="nx">polyglot</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">"num_cars"</span><span class="p">,</span> <span class="p">{</span><span class="na">smart_count</span><span class="p">:</span> <span class="mi">2</span><span class="p">});</span>
<span class="o">=&gt;</span> <span class="s2">"2 cars"</span>
</code></pre> 
    </div> 
    <p>As a shortcut, you can also pass a number to the second parameter:</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="nx">polyglot</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">"num_cars"</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="o">=&gt;</span> <span class="s2">"2 cars"</span>
</code></pre> 
    </div> 
    <h2 id="public-methods">Public Methods</h2> 
    <h3 id="polyglotprototypeextendphrases">Polyglot.prototype.extend(phrases)</h3> 
    <p>Use <code class="highlighter-rouge">extend</code> to tell Polyglot how to translate a given key.</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="nx">polyglot</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="s2">"hello"</span><span class="p">:</span> <span class="s2">"Hello"</span><span class="p">,</span>
  <span class="s2">"hello_name"</span><span class="p">:</span> <span class="s2">"Hello, %{name}"</span>
<span class="p">});</span>
</code></pre> 
    </div> 
    <p>The key can be any string. Feel free to call <code class="highlighter-rouge">extend</code> multiple times; it will override any phrases with the same key, but leave existing phrases untouched.</p> 
    <h3 id="polyglotprototypeclear">Polyglot.prototype.clear()</h3> 
    <p>Clears all phrases. Useful for special cases, such as freeing up memory if you have lots of phrases but no longer need to perform any translation. Also used internally by <code class="highlighter-rouge">replace</code>.</p> 
    <h3 id="polyglotprototypereplacephrases">Polyglot.prototype.replace(phrases)</h3> 
    <p>Completely replace the existing phrases with a new set of phrases. Normally, just use <code class="highlighter-rouge">extend</code> to add more phrases, but under certain circumstances, you may want to make sure no old phrases are lying around.</p> 
    <h3 id="polyglotprototypetkey-interpolationoptions">Polyglot.prototype.t(key, interpolationOptions)</h3> 
    <p>The most-used method. Provide a key, and <code class="highlighter-rouge">t()</code> will return the phrase.</p> 
    <div class="highlighter-rouge"> 
     <pre class="highlight"><code>polyglot.t("hello");
=&gt; "Hello"
</code></pre> 
    </div> 
    <p>The phrase value is provided first by a call to <code class="highlighter-rouge">polyglot.extend()</code> or <code class="highlighter-rouge">polyglot.replace()</code>.</p> 
    <p>Pass in an object as the second argument to perform interpolation.</p> 
    <div class="highlighter-rouge"> 
     <pre class="highlight"><code>polyglot.t("hello_name", {name: "Spike"});
=&gt; "Hello, Spike"
</code></pre> 
    </div> 
    <p>Pass a number as the second argument as a shortcut to <code class="highlighter-rouge">smart_count</code>:</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="c1">// same as: polyglot.t("car", {smart_count: 2});</span>
<span class="nx">polyglot</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">"car"</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="o">=&gt;</span> <span class="s2">"2 cars"</span>
</code></pre> 
    </div> 
    <p>If you like, you can provide a default value in case the phrase is missing. Use the special option key “_” to specify a default.</p> 
    <div class="language-js highlighter-rouge"> 
     <pre class="highlight"><code><span class="nx">polyglot</span><span class="p">.</span><span class="nx">t</span><span class="p">(</span><span class="s2">"i_like_to_write_in_language"</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">_</span><span class="p">:</span> <span class="s2">"I like to write in %{language}."</span><span class="p">,</span>
  <span class="na">language</span><span class="p">:</span> <span class="s2">"JavaScript"</span>
<span class="p">});</span>
<span class="o">=&gt;</span> <span class="s2">"I like to write in JavaScript."</span>
</code></pre> 
    </div> 
    <h2 id="historypolyglotjschangeloghtml"><a href="/polyglot.js/CHANGELOG.html">History</a></h2> 
    <h2 id="related-projects">Related projects</h2> 
    <ul> 
     <li> <a href="https://github.com/oliviertassinari/i18n-extract">i18n-extract</a>: Manage localization with static analysis. (E.g. key usage extraction)</li> 
    </ul> 
   </section> 
   <footer> 
    <p>This project is maintained by <a href="https://github.com/airbnb">airbnb</a></p> 
    <p><small>Hosted on GitHub Pages — Theme by <a href="https://github.com/orderedlist">orderedlist</a></small></p> 
   </footer> 
  </div> 
  <script src="/polyglot.js/assets/js/scale.fix.js"></script>   
 </body>
</html>