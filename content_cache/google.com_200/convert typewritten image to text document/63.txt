<!doctype html>
<html lang="en">
 <head>
  <meta charset="utf-8">
  <meta content="IE=edge" http-equiv="X-UA-Compatible"> 
  <script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","errorBeacon":"bam.nr-data.net","licenseKey":"7f87698888","applicationID":"11175475","transactionName":"Ig0MR0NWXVhRRRo2Cg8DFkFQFnJBV0JYBwYTWFhkVFtCXUBSD18iERJNdHRtERtQWFYWTBMHBFZDXF9XUQ==","queueTime":8,"applicationTime":225,"agent":""}</script> 
  <script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function(e,n,t){function r(t){if(!n[t]){var o=n[t]={exports:{}};e[t][0].call(o.exports,function(n){var o=e[t][1][n];return r(o||n)},o,o.exports)}return n[t].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<t.length;o++)r(t[o]);return r}({1:[function(e,n,t){function r(){}function o(e,n,t){return function(){return i(e,[c.now()].concat(u(arguments)),n?null:this,t),n?void 0:this}}var i=e("handle"),a=e(2),u=e(3),f=e("ee").get("tracer"),c=e("loader"),s=NREUM;"undefined"==typeof window.newrelic&&(newrelic=s);var p=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],d="api-",l=d+"ixn-";a(p,function(e,n){s[n]=o(d+n,!0,"api")}),s.addPageAction=o(d+"addPageAction",!0),s.setCurrentRouteName=o(d+"routeName",!0),n.exports=newrelic,s.interaction=function(){return(new r).get()};var m=r.prototype={createTracer:function(e,n){var t={},r=this,o="function"==typeof n;return i(l+"tracer",[c.now(),e,t],r),function(){if(f.emit((o?"":"no-")+"fn-start",[c.now(),r,o],t),o)try{return n.apply(this,arguments)}finally{f.emit("fn-end",[c.now()],t)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(e,n){m[n]=o(l+n)}),newrelic.noticeError=function(e){"string"==typeof e&&(e=new Error(e)),i("err",[e,c.now()])}},{}],2:[function(e,n,t){function r(e,n){var t=[],r="",i=0;for(r in e)o.call(e,r)&&(t[i]=n(r,e[r]),i+=1);return t}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],3:[function(e,n,t){function r(e,n,t){n||(n=0),"undefined"==typeof t&&(t=e?e.length:0);for(var r=-1,o=t-n||0,i=Array(o<0?0:o);++r<o;)i[r]=e[n+r];return i}n.exports=r},{}],4:[function(e,n,t){n.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],ee:[function(e,n,t){function r(){}function o(e){function n(e){return e&&e instanceof r?e:e?f(e,u,i):i()}function t(t,r,o,i){if(!d.aborted||i){e&&e(t,r,o);for(var a=n(o),u=m(t),f=u.length,c=0;c<f;c++)u[c].apply(a,r);var p=s[y[t]];return p&&p.push([b,t,r,a]),a}}function l(e,n){v[e]=m(e).concat(n)}function m(e){return v[e]||[]}function w(e){return p[e]=p[e]||o(t)}function g(e,n){c(e,function(e,t){n=n||"feature",y[t]=n,n in s||(s[n]=[])})}var v={},y={},b={on:l,emit:t,get:w,listeners:m,context:n,buffer:g,abort:a,aborted:!1};return b}function i(){return new r}function a(){(s.api||s.feature)&&(d.aborted=!0,s=d.backlog={})}var u="nr@context",f=e("gos"),c=e(2),s={},p={},d=n.exports=o();d.backlog=s},{}],gos:[function(e,n,t){function r(e,n,t){if(o.call(e,n))return e[n];var r=t();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(e,n,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return e[n]=r,r}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],handle:[function(e,n,t){function r(e,n,t,r){o.buffer([e],r),o.emit(e,n,t)}var o=e("ee").get("handle");n.exports=r,r.ee=o},{}],id:[function(e,n,t){function r(e){var n=typeof e;return!e||"object"!==n&&"function"!==n?-1:e===window?0:a(e,i,function(){return o++})}var o=1,i="nr@id",a=e("gos");n.exports=r},{}],loader:[function(e,n,t){function r(){if(!x++){var e=h.info=NREUM.info,n=d.getElementsByTagName("script")[0];if(setTimeout(s.abort,3e4),!(e&&e.licenseKey&&e.applicationID&&n))return s.abort();c(y,function(n,t){e[n]||(e[n]=t)}),f("mark",["onload",a()+h.offset],null,"api");var t=d.createElement("script");t.src="https://"+e.agent,n.parentNode.insertBefore(t,n)}}function o(){"complete"===d.readyState&&i()}function i(){f("mark",["domContent",a()+h.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(u=Math.max((new Date).getTime(),u))-h.offset}var u=(new Date).getTime(),f=e("handle"),c=e(2),s=e("ee"),p=window,d=p.document,l="addEventListener",m="attachEvent",w=p.XMLHttpRequest,g=w&&w.prototype;NREUM.o={ST:setTimeout,SI:p.setImmediate,CT:clearTimeout,XHR:w,REQ:p.Request,EV:p.Event,PR:p.Promise,MO:p.MutationObserver};var v=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1044.min.js"},b=w&&g&&g[l]&&!/CriOS/.test(navigator.userAgent),h=n.exports={offset:u,now:a,origin:v,features:{},xhrWrappable:b};e(1),d[l]?(d[l]("DOMContentLoaded",i,!1),p[l]("load",r,!1)):(d[m]("onreadystatechange",o),p[m]("onload",r)),f("mark",["firstbyte",u],null,"api");var x=0,E=e(4)},{}]},{},["loader"]);</script>
  <meta content="width=device-width, initial-scale=1" name="viewport">
  <meta content="cucumber, gherkin, testing, bdd, tdd, atdd, sbe, specification by example, requirements" name="keywords">
  <meta content="Cucumber. Simple, Human Collaboration" name="description">
  <meta content="Cucumber Limited" name="author">
  <meta content="Cucumber Limited" name="copyright">
  <link href="https://cucumber.io/feed.xml" rel="alternate" title="Cucumber News" type="application/rss+xml">
  <link href="https://cucumber.io/events-feed.xml" rel="alternate" title="Cucumber Events" type="application/rss+xml">
  <title>Reference·Cucumber</title>
  <meta content="Reference" property="st:title">
  <link href="/images/favicon.png" rel="icon" type="image/png">
  <link rel="stylesheet" href="/assets/main-36f40b20adcd6551fd75c9651901231a07e83e7bf243d25a0a75005a439cbe3f.css" media="screen">
 </head>
 <body>
  <nav class="navbar navbar-default navbar-fixed-top community-nav docs">
   <div class="container">
    <div class="navbar-header">
     <button class="navbar-toggle collapsed" data-target="#main-nav-collapse" data-toggle="collapse" type="button"><span class="sr-only">Toggle navigation</span><span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span></button>
     <a class="navbar-brand" href="/"><img alt="Cucumber" src="/images/cucumber-mark-white.svg" title="cucumber.io"></a>
    </div>
    <div class="collapse navbar-collapse" id="main-nav-collapse">
     <ul class="nav navbar-nav">
      <li><a class="active" href="/docs">Docs</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/events">Events</a></li>
      <li><a href="/talks">Talks</a></li>
      <li><a href="/school">Videos</a></li>
      <li><a href="/training">Learn BDD</a></li>
      <li><a href="/pro">Cucumber Pro</a></li>
      <li><a href="/support">Support</a></li>
     </ul>
    </div>
   </div>
  </nav>
  <div class="container"> 
   <div class="row"> 
    <div class="col-md-3" role="complementary"> 
     <nav id="side-nav" class="affix hidden-sm hidden-xs"> 
      <ul class="nav nav-stacked" role="tablist"> 
       <li role="presentation"><a href="#gherkin">Gherkin</a> 
        <ul class="nav nav-stacked" role="tablist"> 
         <li role="presentation"><a href="#feature">Feature</a> </li> 
         <li role="presentation"><a href="#descriptions">Descriptions</a> </li> 
         <li role="presentation"><a href="#scenario">Scenario</a> </li> 
         <li role="presentation"><a href="#steps">Steps</a> 
          <ul class="nav nav-stacked" role="tablist"> 
           <li role="presentation"><a href="#given">Given</a> </li> 
           <li role="presentation"><a href="#when">When</a> </li> 
           <li role="presentation"><a href="#then">Then</a> </li> 
          </ul> </li> 
         <li role="presentation"><a href="#background">Background</a> </li> 
         <li role="presentation"><a href="#scenario-outline">Scenario Outline</a> 
          <ul class="nav nav-stacked" role="tablist"> 
           <li role="presentation"><a href="#examples">Examples</a> </li> 
           <li role="presentation"><a href="#scenario-outlines-and-ui">Scenario Outlines and UI</a> </li> 
          </ul> </li> 
         <li role="presentation"><a href="#step-arguments">Step Arguments</a> 
          <ul class="nav nav-stacked" role="tablist"> 
           <li role="presentation"><a href="#doc-strings">Doc Strings</a> </li> 
           <li role="presentation"><a href="#data-tables">Data Tables</a> </li> 
          </ul> </li> 
         <li role="presentation"><a href="#tags">Tags</a> </li> 
         <li role="presentation"><a href="#comments">Comments</a> </li> 
        </ul> </li> 
       <li role="presentation"><a href="#step-definitions">Step Definitions</a> 
        <ul class="nav nav-stacked" role="tablist"> 
         <li role="presentation"><a href="#simple-arguments">Simple Arguments</a> </li> 
         <li role="presentation"><a href="#argument-transformations">Argument Transformations</a> </li> 
         <li role="presentation"><a href="#doc-string-argument">Doc String Argument</a> </li> 
         <li role="presentation"><a href="#data-table-argument">Data Table Argument</a> 
          <ul class="nav nav-stacked" role="tablist"> 
           <li role="presentation"><a href="#diff-comparison">Diff comparison</a> </li> 
           <li role="presentation"><a href="#data-table-transformation">Data Table Transformation</a> </li> 
          </ul> </li> 
        </ul> </li> 
       <li role="presentation"><a href="#hooks">Hooks</a> 
        <ul class="nav nav-stacked" role="tablist"> 
         <li role="presentation"><a href="#tagged-hooks">Tagged Hooks</a> </li> 
        </ul> </li> 
       <li role="presentation"><a href="#command-line">Command line</a> </li> 
       <li role="presentation"><a href="#reports">Reports</a> 
        <ul class="nav nav-stacked" role="tablist"> 
         <li role="presentation"><a href="#pretty">Pretty</a> </li> 
         <li role="presentation"><a href="#html">HTML</a> </li> 
         <li role="presentation"><a href="#json">JSON</a> </li> 
         <li role="presentation"><a href="#progress">Progress</a> </li> 
         <li role="presentation"><a href="#usage">Usage</a> </li> 
         <li role="presentation"><a href="#junit">JUnit</a> </li> 
         <li role="presentation"><a href="#rerun">Rerun</a> </li> 
        </ul> </li> 
       <li role="presentation"><a href="#report-attachments">Report attachments</a> 
        <ul class="nav nav-stacked" role="tablist"> 
         <li role="presentation"><a href="#screenshots">Screenshots</a> </li> 
         <li role="presentation"><a href="#text">Text</a> </li> 
        </ul> </li> 
       <li role="presentation"><a href="#browser-automation">Browser Automation</a> </li> 
       <li role="presentation"><a href="#databases-and-state">Databases and State</a> </li> 
      </ul> 
     </nav> 
    </div> 
    <div class="col-md-9" role="main"> 
     <a name="reference"></a>
     <h1 class="header" data-swiftype-name="title" data-swiftype-type="string">Reference</h1> 
     <p>This is the general reference for all Cucumber implementations. Please refer to the <a href="/docs">documentation overview</a> for links to platform-specific documentation.</p> 
     <a name="gherkin"></a>
     <h2 class="header" data-swiftype-name="title" data-swiftype-type="string">Gherkin</h2> 
     <p>Cucumber executes your <code>.feature</code> files, and those files contain executable specifications written in a language called Gherkin.</p> 
     <p>Gherkin is plain-text English (or one of 60+ other languages) with a little extra structure. Gherkin is designed to be easy to learn by non-programmers, yet structured enough to allow concise description of examples to illustrate business rules in most real-world domains.</p> 
     <p>Here is a sample Gherkin document:</p> 
     <div class="highlight">
      <pre><span class="k">Feature:</span><span class="nf"> Refund item</span>

<span class="nf">  </span><span class="k">Scenario:</span><span class="nf"> Jeff returns a faulty microwave</span>
<span class="k">    Given </span><span class="nf">Jeff has bought a microwave for $</span><span class="s">100</span><span class="nf"></span>
<span class="nf">    </span><span class="k">And </span><span class="nf">he has a receipt</span>
<span class="nf">    </span><span class="k">When </span><span class="nf">he returns the microwave</span>
<span class="nf">    </span><span class="k">Then </span><span class="nf">Jeff should be refunded $</span><span class="s">100</span><span class="nf"></span>
</pre>
     </div> 
     <p>In Gherkin, each line that isn't blank has to start with a Gherkin <em>keyword</em>, followed by any text you like. The main keywords are:</p> 
     <ul> 
      <li><code>Feature</code></li> 
      <li><code>Scenario</code></li> 
      <li><code>Given</code>, <code>When</code>, <code>Then</code>, <code>And</code>, <code>But</code> (Steps)</li> 
      <li><code>Background</code></li> 
      <li><code>Scenario Outline</code></li> 
      <li><code>Examples</code></li> 
     </ul> 
     <p>There are a few extra keywords as well:</p> 
     <ul> 
      <li><code>"""</code> (Doc Strings)</li> 
      <li><code>|</code> (Data Tables)</li> 
      <li><code>@</code> (Tags)</li> 
      <li><code>#</code> (Comments)</li> 
     </ul> 
     <a name="feature"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Feature</h3> 
     <p>A <code>.feature</code> file is supposed to describe a single feature of the system, or a particular aspect of a feature. It's just a way to provide a high-level description of a software feature, and to group related scenarios.</p> 
     <p>A feature has three basic elements---the <code>Feature:</code> keyword, a <em>name</em> (on the same line) and an optional (but highly recommended) <em>description</em> that can span multiple lines.</p> 
     <p>Cucumber does not care about the name or the description---the purpose is simply to provide a place where you can document important aspects of the feature, such as a brief explanation and a list of business rules (general acceptance criteria).</p> 
     <p>Here is an example:</p> 
     <div class="highlight">
      <pre><span class="k">Feature:</span><span class="nf"> Refund item</span>

<span class="nf">  Sales assistants should be able to refund customers' purchases.</span>
<span class="nf">  This is required by the law, and is also essential in order to</span>
<span class="nf">  keep customers happy.</span>

<span class="nf">  Rules:</span>
<span class="nf">  - Customer must present proof of purchase</span>
<span class="nf">  - Purchase must be less than 30 days ago</span>
</pre>
     </div> 
     <p>In addition to a <em>name</em> and a <em>description</em>, features contain a list of <a href="#scenario">Scenarios</a> or <a href="#scenario-outline">Scenario Outlines</a>, and an optional <a href="#background">Background</a>.</p> 
     <a name="descriptions"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Descriptions</h3> 
     <p>Some parts of Gherkin documents do not have to start with a keyword.</p> 
     <p>On the lines following a <code>Feature</code>, <code>Scenario</code>, <code>Scenario Outline</code> or <code>Examples</code> you can write anything you like, as long as no line starts with a key a keyword.</p> 
     <a name="scenario"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Scenario</h3> 
     <p>A scenario is a <em>concrete example</em> that <em>illustrates</em> a business rule. It consists of a list of <a href="#steps">steps</a>.</p> 
     <p>You can have as many steps as you like, but we recommend you keep the number at 3-5 per scenario. If they become longer than that they lose their expressive power as specification and documentation.</p> 
     <p>In addition to being a specification and documentation, a scenario is also a <em>test</em>. As a whole, your scenarios are an <em>executable specification</em> of the system.</p> 
     <p>Scenarios follow the same pattern:</p> 
     <ul> 
      <li>Describe an initial context</li> 
      <li>Describe an event</li> 
      <li>Describe an expected outcome</li> 
     </ul> 
     <p>This is done with steps.</p> 
     <a name="steps"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Steps</h3> 
     <p>A step typically starts with <code>Given</code>, <code>When</code> or <code>Then</code>. If there are multiple <code>Given</code> or <code>When</code> steps underneath each other, you can use <code>And</code> or <code>But</code>. Cucumber does not differentiate between the keywords, but choosing the right one is important for the readability of the scenario as a whole.</p> 
     <a name="given"></a>
     <h4 class="header" data-swiftype-name="title" data-swiftype-type="string">Given</h4> 
     <p><code>Given</code> steps are used to describe the initial context of the system---the <em>scene</em> of the scenario. It is typically something that happened in the <em>past</em>.</p> 
     <p>When Cucumber executes a <code>Given</code> step it will configure the system to be in a well-defined state, such as creating and configuring objects or adding data to the test database.</p> 
     <p>It's ok to have several <code>Given</code> steps (just use <code>And</code> or <code>But</code> for number 2 and upwards to make it more readable).</p> 
     <a name="when"></a>
     <h4 class="header" data-swiftype-name="title" data-swiftype-type="string">When</h4> 
     <p><code>When</code> steps are used to describe an event, or an <em>action</em>. This can be a person interacting with the system, or it can be an event triggered by another system.</p> 
     <p>It's strongly recommended you only have a single <code>When</code> step per scenario. If you feel compelled to add more it's usually a sign that you should split the scenario up in multiple scenarios.</p> 
     <a name="then"></a>
     <h4 class="header" data-swiftype-name="title" data-swiftype-type="string">Then</h4> 
     <p><code>Then</code> steps are used to describe an <em>expected</em> outcome, or result.</p> 
     <p>The <a href="#step-definitions">step definition</a> of a <code>Then</code> step should use an <em>assertion</em> to compare the <em>actual</em> outcome (what the system actually does) to the <em>expected</em> outcome (what the step says the system is supposed to do).</p> 
     <a name="background"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Background</h3> 
     <p>Occasionally you'll find yourself repeating the same <code>Given</code> steps in all of the scenarios in a feature file. Since it is repeated in every scenario it is an indication that those steps are not <em>essential</em> to describe the scenarios, they are <em>incidental details</em>.</p> 
     <p>You can literally move such <code>Given</code> steps to the background by grouping them under a <code>Background</code> section before the first scenario:</p> 
     <div class="highlight">
      <pre><span class="k">Background:</span><span class="nf"></span>
<span class="k">  Given </span><span class="nf">a $</span><span class="s">100</span><span class="nf"> microwave was sold on </span><span class="s">2015</span><span class="nf">-</span><span class="s">11</span><span class="nf">-</span><span class="s">03</span><span class="nf"></span>
<span class="nf">  </span><span class="k">And </span><span class="nf">today is </span><span class="s">2015</span><span class="nf">-</span><span class="s">11</span><span class="nf">-</span><span class="s">18</span><span class="nf"></span>
</pre>
     </div>
     <a name="scenario-outline"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Scenario Outline</h3> 
     <p>When you have a complex business rule with severable variable inputs or outputs you might end up creating several scenarios that only differ by their values.</p> 
     <p>Let's take an example from <a href="http://www.nutrientmanagement.org/assets/12028">feed planning for cattle and sheep</a>:</p> 
     <div class="highlight">
      <pre><span class="k">Scenario:</span><span class="nf"> feeding a small suckler cow</span>
<span class="k">  Given </span><span class="nf">the cow weighs </span><span class="s">450</span><span class="nf"> kg</span>
<span class="nf">  </span><span class="k">When </span><span class="nf">we calculate the feeding requirements</span>
<span class="nf">  </span><span class="k">Then </span><span class="nf">the energy should be </span><span class="s">26500</span><span class="nf"> MJ</span>
<span class="nf">  </span><span class="k">And </span><span class="nf">the protein should be </span><span class="s">215</span><span class="nf"> kg</span>

<span class="k">Scenario:</span><span class="nf"> feeding a medium suckler cow</span>
<span class="k">  Given </span><span class="nf">the cow weighs </span><span class="s">500</span><span class="nf"> kg</span>
<span class="nf">  </span><span class="k">When </span><span class="nf">we calculate the feeding requirements</span>
<span class="nf">  </span><span class="k">Then </span><span class="nf">the energy should be </span><span class="s">29500</span><span class="nf"> MJ</span>
<span class="nf">  </span><span class="k">And </span><span class="nf">the protein should be </span><span class="s">245</span><span class="nf"> kg</span>

<span class="c"># There are 2 more examples - I'm already bored</span><span class="nf"></span>
</pre>
     </div> 
     <p>If there are many examples, this becomes tedious. We can simplify it with a Scenario Outline:</p> 
     <div class="highlight">
      <pre><span class="k">Scenario Outline:</span><span class="nf"> feeding a suckler cow</span>
<span class="k">  Given </span><span class="nf">the cow weighs </span><span class="nv">&lt;weight&gt;</span><span class="nf"> kg</span>
<span class="nf">  </span><span class="k">When </span><span class="nf">we calculate the feeding requirements</span>
<span class="nf">  </span><span class="k">Then </span><span class="nf">the energy should be </span><span class="nv">&lt;energy&gt;</span><span class="nf"> MJ</span>
<span class="nf">  </span><span class="k">And </span><span class="nf">the protein should be </span><span class="nv">&lt;protein&gt;</span><span class="nf"> kg</span>

<span class="nf">  </span><span class="k">Examples:</span>
<span class="k">    |</span><span class="nv"> weight</span><span class="k"> |</span><span class="nv"> energy</span><span class="k"> |</span><span class="nv"> protein</span><span class="k"> |</span><span class="nf"></span>
<span class="k">    |</span><span class="s">    450</span><span class="k"> |</span><span class="s">  26500</span><span class="k"> |</span><span class="s">     215</span><span class="k"> |</span><span class="nf"></span>
<span class="k">    |</span><span class="s">    500</span><span class="k"> |</span><span class="s">  29500</span><span class="k"> |</span><span class="s">     245</span><span class="k"> |</span><span class="nf"></span>
<span class="k">    |</span><span class="s">    575</span><span class="k"> |</span><span class="s">  31500</span><span class="k"> |</span><span class="s">     255</span><span class="k"> |</span><span class="nf"></span>
<span class="k">    |</span><span class="s">    600</span><span class="k"> |</span><span class="s">  37000</span><span class="k"> |</span><span class="s">     305</span><span class="k"> |</span>
</pre>
     </div> 
     <p>This is much easier to read.</p> 
     <p>Variables in the Scenario Outline steps are marked up with <code>&lt;</code> and <code>&gt;</code>.</p> 
     <a name="examples"></a>
     <h4 class="header" data-swiftype-name="title" data-swiftype-type="string">Examples</h4> 
     <p>A <code>Scenario Outline</code> section is always followed by one or more <code>Examples</code> sections, which are a container for a table.</p> 
     <p>The table must have a header row corresponding to the variables in the Scenario Outline steps.</p> 
     <p>Each of the rows below will create a new Scenario, filling in the variable values.</p> 
     <a name="scenario-outlines-and-ui"></a>
     <h4 class="header" data-swiftype-name="title" data-swiftype-type="string">Scenario Outlines and UI</h4> 
     <p>Automating Scenario Outlines using UI automation such as Selenium WebDriver is considered a bad practice.</p> 
     <p>The only good reason to use Scenario Outlines is to validate the implementation of business rule that behaves differently based on several input parameters.</p> 
     <p>Validating a business rule through a UI is slow, and when there is a failure it is difficult to pinpoint where the error is.</p> 
     <p>The automation code for Scenario Outlines should communicate directly with the business rule implementation, going through as few layers as possible. This is fast, and errors become easy to diagnose fix.</p> 
     <a name="step-arguments"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Step Arguments</h3> 
     <p>In some cases you might want to pass a larger chunk of text or a table of data to a step---something that doesn't fit on a single line.</p> 
     <p>For this purpose Gherkin has <a href="#doc-strings">Doc Strings</a> and <a href="#data-tables">Data Tables</a>.</p> 
     <a name="doc-strings"></a>
     <h4 class="header" data-swiftype-name="title" data-swiftype-type="string">Doc Strings</h4> 
     <p>Doc Strings are handy for passing a larger piece of text to a step definition. The syntax is inspired from Python's <a href="http://www.python.org/dev/peps/pep-0257/">Docstring</a> syntax.</p> 
     <p>The text should be offset by delimiters consisting of three double-quote marks on lines of their own:</p> 
     <div class="highlight">
      <pre><span class="k">Given </span><span class="nf">a blog post named "</span><span class="s">Random</span><span class="nf">" with Markdown body</span>
<span class="nf">  </span><span class="k">"""</span><span class="s"></span>
<span class="s">  Some Title, Eh?</span>
<span class="s">  ===============</span>
<span class="s">  Here is the first paragraph of my blog post. Lorem ipsum dolor sit amet,</span>
<span class="s">  consectetur adipiscing elit.</span>
<span class="s">  </span><span class="k">"""</span><span class="nf"></span>
</pre>
     </div> 
     <p>In your <a href="#step-definitions">Step Definition</a>, theres no need to find this text and match it in your pattern. It will automatically be passed as the last parameter in the step definition.</p> 
     <p>Indentation of the opening <code>"""</code> is unimportant, although common practice is two spaces in from the enclosing step. The indentation inside the triple quotes, however, <em>is</em> significant. Each line of the Doc String will be de-indented according to the opening <code>"""</code>. Indentation beyond the column of the opening <code>"""</code> will therefore be preserved.</p> 
     <a name="data-tables"></a>
     <h4 class="header" data-swiftype-name="title" data-swiftype-type="string">Data Tables</h4> 
     <p>Data Tables are handy for passing a list of values to a step definition:</p> 
     <div class="highlight">
      <pre><span class="k">Given </span><span class="nf">the following users exist:</span>
<span class="k">  |</span><span class="s"> name</span><span class="k">   |</span><span class="s"> email</span><span class="k">              |</span><span class="s"> twitter</span><span class="k">         |</span><span class="nf"></span>
<span class="k">  |</span><span class="s"> Aslak</span><span class="k">  |</span><span class="s"> <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ceafbda2afa58eadbbadbba3acabbce0a7a1">[email&nbsp;protected]</a></span><span class="k">  |</span><span class="s"> @aslak_hellesoy</span><span class="k"> |</span><span class="nf"></span>
<span class="k">  |</span><span class="s"> Julien</span><span class="k"> |</span><span class="s"> <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ec869980858982ac8f998f99818e899ec28583">[email&nbsp;protected]</a></span><span class="k"> |</span><span class="s"> @jbpros</span><span class="k">         |</span><span class="nf"></span>
<span class="k">  |</span><span class="s"> Matt</span><span class="k">   |</span><span class="s"> <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bfd2decbcbffdccadccad2dddacd91d6d0">[email&nbsp;protected]</a></span><span class="k">   |</span><span class="s"> @mattwynne</span><span class="k">      |</span>
</pre>
     </div> 
     <p>Just like <a href="#doc-strings">Doc Strings</a>, Data Tables will be passed to the <a href="#step-definitions">Step Definition</a> as the last argument.</p> 
     <p>The type of this argument will be <code>DataTable</code>. See the API docs for more details about how to access the rows and cells.</p> 
     <a name="tags"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Tags</h3> 
     <p>Tags are a way to group Scenarios. They are <code>@</code>-prefixed strings and you can place as many tags as you like above <code>Feature</code>, <code>Scenario</code>, <code>Scenario Outline</code> or <code>Examples</code> keywords. Space character are invalid in tags and may separate them.</p> 
     <p>Tags are inherited from parent elements. For example, if you place a tag above a <code>Feature</code>, all scenarios in that feature will get that tag.</p> 
     <p>Similarly, if you place a tag above a <code>Scenario Outline</code> or <code>Examples</code> keyword, all scenarios derived from examples rows will inherit the tags.</p> 
     <p>You can tell Cucumber to only run scenarios with certain tags, or to exclude scenarios with certain tags.</p> 
     <p>Cucumber can perform different operations before and after each scenario based on what tags are present on a scenario.</p> 
     <p>See <a href="#tagged-hooks">tagged hooks</a> for more details.</p> 
     <a name="comments"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Comments</h3> 
     <p>Gherkin provides lots of places to document your features and scenarios. The preferred place is <a href="#descriptions">descriptions</a>. Choosing good names is also useful.</p> 
     <p>If none of these places suit you, you can start a line with a <code>#</code> to tell Cucumber that the remainder of the line is a comment, and shouldn't be executed.</p> 
     <a name="step-definitions"></a>
     <h2 class="header" data-swiftype-name="title" data-swiftype-type="string">Step Definitions</h2> 
     <p>Cucumber doesn't know how to execute your scenarios out-of-the-box. It needs <em>Step Definitions</em> to translate plain text Gherkin steps into actions that will interact with the system.</p> 
     <p>When Cucumber executes a <a href="#steps">Step</a> in a <a href="/#scenario">Scenario</a> it will look for a matching <em>Step Definition</em> to execute.</p> 
     <p>A Step Definition is a small piece of <em>code</em> with a <em>pattern</em> attached to it. The pattern is used to link the step definition to all the matching <a href="#steps">Steps</a>, and the <em>code</em> is what Cucumber will execute when it sees a Gherkin Step.</p> 
     <p>To understand how Step Definitions work, consider the following Scenario:</p> 
     <div class="highlight">
      <pre><span class="k">Scenario:</span><span class="nf"> Some cukes</span>
<span class="k">  Given </span><span class="nf">I have </span><span class="s">48</span><span class="nf"> cukes in my belly</span>
</pre>
     </div> 
     <p>The <code>I have 48 cukes in my belly</code> part of the step (the text following the <code>Given</code> keyword) will match the Step Definition below:</p> 
     <div class="carousel-container">
      <div class="dropdown"> 
       <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <span class="current-slide">ruby</span> <span class="caret"></span> </button> 
       <ul class="dropdown-menu" role="menu">
        <li role="menuitem" class="slide-link" data-slide="0">ruby</li>
        <li role="menuitem" class="slide-link" data-slide="1">java</li>
        <li role="menuitem" class="slide-link" data-slide="2">php</li>
        <li role="menuitem" class="slide-link" data-slide="3">groovy</li>
        <li role="menuitem" class="slide-link" data-slide="4">javascript</li>
        <li role="menuitem" class="slide-link" data-slide="5">clojure</li>
        <li role="menuitem" class="slide-link" data-slide="6">cpp</li>
        <li role="menuitem" class="slide-link" data-slide="7">csharp</li>
        <li role="menuitem" class="slide-link" data-slide="8">fsharp</li>
        <li role="menuitem" class="slide-link" data-slide="9">lua</li>
        <li role="menuitem" class="slide-link" data-slide="10">python</li>
        <li role="menuitem" class="slide-link" data-slide="11">scala</li>
        <li role="menuitem" class="slide-link" data-slide="12">tcl</li>
       </ul> 
      </div> 
      <div class="carousel"> 
       <div class="highlight">
        <pre><span class="no">Given</span><span class="p">(</span><span class="sr">/I have (\d+) cukes in my belly/</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">cukes</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s2">"Cukes: </span><span class="si">#{</span><span class="n">cukes</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="nd">@Given</span><span class="o">(</span><span class="s">"I have (\\d+) cukes in my belly"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">I_have_cukes_in_my_belly</span><span class="o">(</span><span class="kt">int</span> <span class="n">cukes</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Cukes: %n\n"</span><span class="o">,</span> <span class="n">cukes</span><span class="o">);</span>
<span class="o">}</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="cp">&lt;?php</span>
<span class="sd">/**</span>
<span class="sd"> * @Given /^I have (\d+) cukes in my belly"$/</span>
<span class="sd"> */</span>
<span class="k">public</span> <span class="k">function</span> <span class="nf">iHaveCukesInMyBelly</span><span class="p">(</span><span class="nv">$cukes</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">print</span> <span class="s2">"Cukes: </span><span class="si">{</span><span class="nv">$cukes</span><span class="si">}</span><span class="s2">"</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="n">Given</span><span class="o">(~</span><span class="s1">'^I have (\\d+) cukes in my belly'</span><span class="o">)</span> <span class="o">{</span> <span class="kt">int</span> <span class="n">cukes</span> <span class="o">-&gt;</span>
  <span class="n">println</span> <span class="s2">"Cukes: "</span> <span class="o">+</span> <span class="n">cukes</span>
<span class="o">}</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="nx">Given</span><span class="p">(</span><span class="sr">/^I have (\d+) cukes in my belly$/</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">cukes</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Cukes: "</span> <span class="o">+</span> <span class="nx">cukes</span><span class="p">);</span>
<span class="p">});</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="p">(</span><span class="nf">Given</span> <span class="o">#</span><span class="s">"^I have (\d+) cukes in my belly$"</span> <span class="p">[</span><span class="nv">cukes</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">println </span><span class="p">(</span><span class="nb">str </span><span class="s">"Cukes: "</span> <span class="nv">cukes</span><span class="p">)))</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="n">GIVEN</span><span class="p">(</span><span class="s">"^I have (</span><span class="se">\\</span><span class="s">d+) cukes in my belly$"</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">REGEX_PARAM</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="n">cukes</span><span class="p">);</span>
  <span class="n">USING_CONTEXT</span><span class="p">(</span><span class="n">MyAppCtx</span><span class="p">,</span> <span class="n">context</span><span class="p">);</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Cukes: "</span> <span class="o">&lt;&lt;</span> <span class="n">cukes</span><span class="p">;</span>
<span class="p">}</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="na">[Given(@"^I have (\d+) cukes in my belly$")]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">iHaveCukesInTheBelly</span><span class="p">(</span><span class="kt">int</span> <span class="n">cukes</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">"Cukes: {0}, world!"</span><span class="p">));</span>
<span class="p">}</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="k">let</span> <span class="o">[&lt;</span><span class="n">Given</span><span class="o">&gt;]</span> <span class="o">``^</span><span class="n">I</span> <span class="n">have</span> <span class="o">(</span><span class="err">\</span><span class="n">d</span><span class="o">+)</span> <span class="n">cukes</span> <span class="k">in</span> <span class="n">my</span> <span class="n">belly</span><span class="o">$``(</span><span class="n">cukes</span><span class="o">:</span><span class="n">int</span><span class="o">)</span> <span class="o">=</span>
  <span class="n">printfn</span> <span class="nn">String</span><span class="p">.</span><span class="n">Format</span><span class="o">(</span><span class="s">"Cukes: {0}"</span><span class="o">,</span> <span class="n">cukes</span><span class="o">)</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="n">Given</span><span class="p">(</span><span class="s2">"</span><span class="s">^I have (%d+) cukes in my belly$"</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="n">cukes</span><span class="p">)</span>
    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="s">Cukes: "</span> <span class="o">..</span> <span class="n">cukes</span><span class="p">)</span>
<span class="k">end</span><span class="p">)</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="nd">@Given</span><span class="p">(</span><span class="s">'^I have (\d+) cukes in my belly$'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">i_have_cukes_in_my_belly</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cukes</span><span class="p">):</span>
  <span class="k">print</span> <span class="s">"Cukes: "</span> <span class="o">+</span> <span class="n">cukes</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="nc">Given</span><span class="o">(</span><span class="s">"""^I have (\d+) cukes in my belly$"""</span><span class="o">){</span> <span class="o">(</span><span class="n">cukes</span><span class="k">:</span><span class="kt">Int</span><span class="o">)</span> <span class="k">=&gt;</span>
  <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"Cukes: $cukes"</span><span class="o">)</span>
<span class="o">}</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="nv">Given</span> <span class="k">{</span><span class="o">^</span><span class="nv">I</span> have <span class="k">(</span><span class="err">\</span><span class="nv">d</span><span class="o">+</span><span class="k">)</span> cukes <span class="ow">in</span> my belly<span class="err">$</span><span class="k">}</span> <span class="k">{</span><span class="nv">cukes</span><span class="k">}</span> <span class="k">{</span>
  <span class="nb">puts</span> <span class="s2">"Cukes: $quantity"</span>
<span class="k">}</span>
</pre>
       </div> 
      </div>
     </div> 
     <p>When Cucumber matches a Step against a pattern in a Step Definition, it passes the value of all the capture groups to the Step Definition's arguments.</p> 
     <p>Capture groups are strings (even when they match digits like <code>\d+</code>). For statically typed languages, Cucumber will automatically transform those strings into the appropriate type. For dynamically typed languages, no transformation happens by default, as there is no type information.</p> 
     <p>Cucumber does not differentiate between the five step keywords <code>Given</code>, <code>When</code>, <code>Then</code>, <code>And</code> and <code>But</code>.</p> 
     <a name="simple-arguments"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Simple Arguments</h3> 
     <p>TODO</p> 
     <a name="argument-transformations"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Argument Transformations</h3> 
     <p>TODO</p> 
     <a name="doc-string-argument"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Doc String Argument</h3> 
     <p>TODO</p> 
     <a name="data-table-argument"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Data Table Argument</h3> 
     <p>TODO</p> 
     <a name="diff-comparison"></a>
     <h4 class="header" data-swiftype-name="title" data-swiftype-type="string">Diff comparison</h4> 
     <p>TODO</p> 
     <a name="data-table-transformation"></a>
     <h4 class="header" data-swiftype-name="title" data-swiftype-type="string">Data Table Transformation</h4> 
     <p>TODO</p> 
     <a name="hooks"></a>
     <h2 class="header" data-swiftype-name="title" data-swiftype-type="string">Hooks</h2> 
     <p>TODO</p> 
     <a name="tagged-hooks"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Tagged Hooks</h3> 
     <p>TODO</p> 
     <a name="command-line"></a>
     <h2 class="header" data-swiftype-name="title" data-swiftype-type="string">Command line</h2> 
     <p>TODO</p> 
     <a name="reports"></a>
     <h2 class="header" data-swiftype-name="title" data-swiftype-type="string">Reports</h2> 
     <p>Cucumber can report results in several different formats, using <em>formatter plugins</em>. The available formatters plugins are:</p> 
     <ul> 
      <li><a href="#pretty">Pretty</a></li> 
      <li><a href="#html">HTML</a></li> 
      <li><a href="#json">JSON</a></li> 
      <li><a href="#progress">Progress</a></li> 
      <li><a href="#usage">Usage</a></li> 
      <li><a href="#junit">JUnit</a></li> 
      <li><a href="#rerun">Rerun</a></li> 
     </ul> 
     <p>Note that some Cucumber implementations might not provide all of these formatter plugins, and some implementations might provide additional ones.</p> 
     <a name="pretty"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Pretty</h3> 
     <p>Prints the <a href="/docs/reference#gherkin">Gherkin</a> source to <code>STDOUT</code> along with additional colours and stack traces for errors.</p> 
     <a name="html"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">HTML</h3> 
     <p>Generates a HTML file, suitable for publishing.</p> 
     <a name="json"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">JSON</h3> 
     <p>Generates a JSON file, suitable for post-processing to generate custom reports.</p> 
     <a name="progress"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Progress</h3> 
     <p>This report prints results to STDOUT, one character at a time. It looks like this:</p> 
     <div class="highlight shell">
      <pre>....F--U.......
</pre>
     </div>
     <a name="usage"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Usage</h3> 
     <p>Prints statistics to <code>STDOUT</code>. Programmers may find it useful to find slow or unused Step Definitions.</p> 
     <a name="junit"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">JUnit</h3> 
     <p>Generates XML files just like <a href="https://ant.apache.org/">Apache Ant</a>s <a href="https://ant.apache.org/manual/Tasks/junitreport.html">junitreport</a> task. This XML format is understood by most <a href="http://en.wikipedia.org/wiki/Continuous_integration">Continuous Integration</a> servers, who will use it to generate visual reports.</p> 
     <a name="rerun"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Rerun</h3> 
     <p>The rerun report is a file that lists the location of failed Scenarios. This can be picked up by subsequent Cucumber runs:</p> 
     <div class="highlight shell">
      <pre>cucumber @rerun.txt
</pre>
     </div> 
     <p>This is useful while fixing broken scenarios, as only the scenarios that failed in the previous run will be run again. This can reduce time spent fixing a bug when running all scenarios is time-consuming.</p> 
     <p>If you are looking for a way to automatically rerun non-deterministic, or <em>flickering</em> scenarios in the same Cucumber run, the rerun report will not help you. It's meant to be used in a workflow where your scenarios are failing deterministically, and where you change scenarios or the system to make them pass between each Cucumber run.</p> 
     <p>If you have non-deterministic scenarios you have a deeper problem that Cucumber can't solve. You have to determine the root cause of the non-determinism, and address that yourself.</p> 
     <a name="report-attachments"></a>
     <h2 class="header" data-swiftype-name="title" data-swiftype-type="string">Report attachments</h2> 
     <p>Text, images and even video can be embedded into certain reports via an API that is available in <a href="#step-definitions">Step Definitions</a> and <a href="#hooks">Hooks</a>.</p> 
     <p>This can make it easier to diagnose failures. Some <a href="#reports">reports</a> will ignore embedded data while others will include it.</p> 
     <a name="screenshots"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Screenshots</h3> 
     <p>The recommended approach is to embed images in an <a href="#after">After Hook</a> if the Scenario fails:</p> 
     <div class="carousel-container">
      <div class="dropdown"> 
       <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <span class="current-slide">ruby</span> <span class="caret"></span> </button> 
       <ul class="dropdown-menu" role="menu">
        <li role="menuitem" class="slide-link" data-slide="0">ruby</li>
        <li role="menuitem" class="slide-link" data-slide="1">java</li>
        <li role="menuitem" class="slide-link" data-slide="2">php</li>
        <li role="menuitem" class="slide-link" data-slide="3">groovy</li>
        <li role="menuitem" class="slide-link" data-slide="4">javascript</li>
        <li role="menuitem" class="slide-link" data-slide="5">clojure</li>
        <li role="menuitem" class="slide-link" data-slide="6">cpp</li>
        <li role="menuitem" class="slide-link" data-slide="7">csharp</li>
        <li role="menuitem" class="slide-link" data-slide="8">fsharp</li>
        <li role="menuitem" class="slide-link" data-slide="9">lua</li>
        <li role="menuitem" class="slide-link" data-slide="10">python</li>
        <li role="menuitem" class="slide-link" data-slide="11">scala</li>
        <li role="menuitem" class="slide-link" data-slide="12">tcl</li>
       </ul> 
      </div> 
      <div class="carousel"> 
       <div class="highlight">
        <pre><span class="c1"># This example assumes the use of Capybara with Selenium WebDriver</span>
<span class="no">After</span> <span class="k">do</span> <span class="o">|</span><span class="n">scenario</span><span class="o">|</span>
  <span class="k">if</span><span class="p">(</span><span class="n">scenario</span><span class="o">.</span><span class="n">failed?</span><span class="p">)</span>
    <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">browser</span><span class="o">.</span><span class="n">save_screenshot</span><span class="p">(</span><span class="s2">"html-report/</span><span class="si">#{</span><span class="n">scenario</span><span class="o">.</span><span class="n">__id__</span><span class="si">}</span><span class="s2">.png"</span><span class="p">)</span>
    <span class="n">embed</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="n">scenario</span><span class="o">.</span><span class="n">__id__</span><span class="si">}</span><span class="s2">.png"</span><span class="p">,</span> <span class="s2">"image/png"</span><span class="p">,</span> <span class="s2">"SCREENSHOT"</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// This example assumes the use of Selenium WebDriver</span>
<span class="nd">@After</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">embedScreenshot</span><span class="o">(</span><span class="n">Scenario</span> <span class="n">scenario</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">screenshot</span> <span class="o">=</span> <span class="n">webDriver</span><span class="o">.</span><span class="na">getScreenshotAs</span><span class="o">(</span><span class="n">OutputType</span><span class="o">.</span><span class="na">BYTES</span><span class="o">);</span>
        <span class="n">scenario</span><span class="o">.</span><span class="na">embed</span><span class="o">(</span><span class="n">screenshot</span><span class="o">,</span> <span class="s">"image/png"</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">WebDriverException</span> <span class="n">somePlatformsDontSupportScreenshots</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">somePlatformsDontSupportScreenshots</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="x">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">; TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">-- TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c"># TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c"># TODO</span>
</pre>
       </div> 
      </div>
     </div> 
     <a name="text"></a>
     <h3 class="header" data-swiftype-name="title" data-swiftype-type="string">Text</h3> 
     <p>Text can be embedded into the report from both <a href="#step-definitions">Step Definitions</a> and <a href="#hooks">Hooks</a>:</p> 
     <div class="carousel-container">
      <div class="dropdown"> 
       <button type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"> <span class="current-slide">ruby</span> <span class="caret"></span> </button> 
       <ul class="dropdown-menu" role="menu">
        <li role="menuitem" class="slide-link" data-slide="0">ruby</li>
        <li role="menuitem" class="slide-link" data-slide="1">java</li>
        <li role="menuitem" class="slide-link" data-slide="2">php</li>
        <li role="menuitem" class="slide-link" data-slide="3">groovy</li>
        <li role="menuitem" class="slide-link" data-slide="4">javascript</li>
        <li role="menuitem" class="slide-link" data-slide="5">clojure</li>
        <li role="menuitem" class="slide-link" data-slide="6">cpp</li>
        <li role="menuitem" class="slide-link" data-slide="7">csharp</li>
        <li role="menuitem" class="slide-link" data-slide="8">fsharp</li>
        <li role="menuitem" class="slide-link" data-slide="9">lua</li>
        <li role="menuitem" class="slide-link" data-slide="10">python</li>
        <li role="menuitem" class="slide-link" data-slide="11">scala</li>
        <li role="menuitem" class="slide-link" data-slide="12">tcl</li>
       </ul> 
      </div> 
      <div class="carousel"> 
       <div class="highlight">
        <pre><span class="no">When</span> <span class="sr">/I do the deed/</span> <span class="k">do</span>
  <span class="nb">puts</span> <span class="s1">'This goes into the report'</span>
  <span class="no">Kernel</span><span class="o">.</span><span class="n">puts</span> <span class="s1">'This goes to STDOUT, but not into the report'</span>
<span class="k">end</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="nd">@Before</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">keepScenario</span><span class="o">(</span><span class="n">Scenario</span> <span class="n">scenario</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">scenario</span> <span class="o">=</span> <span class="n">scenario</span><span class="o">;</span>
<span class="o">}</span>

<span class="nd">@When</span><span class="o">(</span><span class="s">"I do the deed"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">do_the_deed</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">scenario</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"This goes into the report"</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"This goes to STDOUT, but not into the report"</span><span class="o">);</span>
<span class="o">}</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="x">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">; TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">-- TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c"># TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c1">// TODO</span>
</pre>
       </div>
       <div class="highlight">
        <pre><span class="c"># TODO</span>
</pre>
       </div> 
      </div>
     </div> 
     <a name="browser-automation"></a>
     <h2 class="header" data-swiftype-name="title" data-swiftype-type="string">Browser Automation</h2> 
     <p>See <a href="/docs/reference/browser-automation">Browser Automation</a>.</p> 
     <a name="databases-and-state"></a>
     <h2 class="header" data-swiftype-name="title" data-swiftype-type="string">Databases and State</h2> 
     <p>See <a href="/docs/reference/state">State</a>.</p> 
    </div> 
   </div> 
  </div> 
  <footer class="main-footer">
   <div class="container">
    <div class="row">
     <div class="col-md-2">
      <h1 class="main-footer-title">Links</h1>
      <ul class="list-unstyled">
       <li><a href="/privacy">Privacy Policy</a></li>
       <li><a href="https://github.com/cucumber/cucumber/blob/master/CODE_OF_CONDUCT.md">Code of Conduct</a></li>
       <li><a href="/docs">Docs</a></li>
       <li><a href="/school">School</a></li>
       <li><a href="/training">Training</a></li>
       <li><a href="/pro">Cucumber Pro</a></li>
       <li><a href="/support">Support</a></li>
      </ul>
     </div>
     <div class="col-md-2">
      <h1 class="main-footer-title">Community</h1>
      <ul class="list-unstyled">
       <li><a href="https://gitter.im/orgs/cucumber/rooms">Gitter</a></li>
       <li><a href="https://twitter.com/cucumberbdd">Twitter</a></li>
       <li><a href="/blog">Blog</a></li>
       <li><a href="/events">Events</a></li>
       <li><a href="/support">Contact us</a></li>
       <li><a href="https://plus.google.com/116902988985414518476" rel="publisher">Google+</a></li>
      </ul>
     </div>
     <div class="col-md-4"></div>
     <div class="col-md-4">
      <div class="main-footer-company text-right">
       <img alt="Cucumber Ltd' logo" src="/images/cukeup/logos/cucumber-ltd.svg" title="Cucumber Ltd">
       <p>The company behind Cucumber &amp; Cucumber Pro.</p>
      </div>
      <form action="https://www.getdrip.com/forms/50389825/submissions" class="main-footer-newsletter text-right" data-drip-embedded-form="50389825" method="post">
       <input name="fields[email]" placeholder="Stay informed!" type="email">
       <button>Subscribe</button>
      </form>
      <p class="main-footer-email text-right"><a href="/cdn-cgi/l/email-protection#2a424f4646456a495f495f47484f58044345"><span class="__cf_email__" data-cfemail="7d15181111123d1e081e08101f180f531412">[email&nbsp;protected]</span></a> </p>
      <p class="main-footer-phones text-right"><a href="tel:+442087206842">+44 20 8720 6842 (Europe)</a> | <a href="tel:+18444144961">1-844-414-4961 (USA)</a></p>
     </div>
    </div>
    <div class="row">
     <div class="col-md-12">
      <p class="main-footer-copyright text-center">© Cucumber Limited. All rights reserved.</p>
     </div>
     <p class="text-center" id="js-edit"><a href="https://github.com/cucumber/website/edit/master/apps/dynamic/views/docs/reference.md">Edit this page</a></p>
    </div>
   </div>
  </footer>
  <script>!function(e,t,r,n,c,a,l){function i(t,r){return r=e.createElement('div'),r.innerHTML='<a href="'+t.replace(/"/g,'&quot;')+'"></a>',r.childNodes[0].getAttribute('href')}function o(e,t,r,n){for(r='',n='0x'+e.substr(t,2)|0,t+=2;t<e.length;t+=2)r+=String.fromCharCode('0x'+e.substr(t,2)^n);return i(r)}try{for(c=e.getElementsByTagName('a'),l='/cdn-cgi/l/email-protection#',n=0;n<c.length;n++)try{(t=(a=c[n]).href.indexOf(l))>-1&&(a.href='mailto:'+o(a.href,t+l.length))}catch(e){}for(c=e.querySelectorAll('.__cf_email__'),n=0;n<c.length;n++)try{(a=c[n]).parentNode.replaceChild(e.createTextNode(o(a.getAttribute('data-cfemail'),0)),a)}catch(e){}}catch(e){}}(document);</script>
  <script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-6729167-1', 'auto');
ga('send', 'pageview');

!function(e,n,u,a){e.twq||(a=e.twq=function(){a.exe?a.exe.apply(a,arguments):
a.queue.push(arguments);},a.version='1',a.queue=[],t=n.createElement(u),
t.async=!0,t.src='//static.ads-twitter.com/uwt.js',s=n.getElementsByTagName(u)[0],
s.parentNode.insertBefore(t,s))}(window,document,'script');
// Insert Twitter Pixel ID and Standard Event data below
twq('init','nvgcg');
twq('track','PageView');</script>
  <script type="text/javascript">
  (function(w,d,t,u,n,s,e){w['SwiftypeObject']=n;w[n]=w[n]||function(){
  (w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);
  e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);
  })(window,document,'script','//s.swiftypecdn.com/install/v1/st.js','_st');

  _st('install','WJocVXDz7oqLfAspSX98');
</script> 
  <script src="/assets/main-cc558c362bab7263dea4d939386d7ac906982a1816c9acdc5476ef644fd5d48d.js"></script>
 </body>
</html>