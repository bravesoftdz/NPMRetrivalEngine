<!doctype html>
<html lang="en">
 <head> 
  <meta charset="UTF-8"> 
  <meta name="description" content="Learn about the Node OpenTok server SDK, which makes it easy to use many of OpenTok's REST API's functionality. Use the SDK to generate sessions and tokens, and more."> 
  <script type="application/ld+json">
    {
    "@context": "http://schema.org",
    "@graph": [
    { "@type" : "WebSite", "name" : "TokBox", "url" : "https://tokbox.com/" }
    ,
    { "@type" : "Organization", "url" : "https://tokbox.com/", "logo" : "https://tokbox.com/img/styleguide/tokbox-logo-vertical.png", "sameAs": [ "https://www.linkedin.com/company/tokbox/", "https://www.youtube.com/channel/UC4WuhoxEQlsftp-VI7hlyJA","https://www.facebook.com/tokbox/", "https://twitter.com/tokbox/", "https://plus.google.com/+tokbox/", "https://www.instagram.com/tokboxinc/" ] }
    ]
    }
  </script> 
  <title>OpenTok Node SDK</title> 
  <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Raleway:300,300italic" type="text/css"> 
  <link rel="stylesheet" href="/developer/css/vendors/skeleton.css"> 
  <link rel="stylesheet" href="/developer/css/vendors/normalize.css"> 
  <link rel="stylesheet" href="/developer/css/vendors/animate.css"> 
  <link rel="stylesheet" href="/developer/css/vendors/docco.css"> 
  <link rel="shortcut icon" type="image/x-ico" href="/developer/favicon.ico"> 
  <script src="/developer/js/vendors/jquery-1.11.2.min.js"></script> 
  <script src="/developer/js/vendors/js.cookie-2.1.0.min.js"></script> 
  <script src="https://static.opentok.com/js/hlg/v1.0/hlg-instrument-v1.0.1.js"></script> 
  <script src="https://cdn.jsdelivr.net/clipboard.js/1.6.0/clipboard.min.js"> </script> 
  <script type="text/javascript" src="//cdn.bizible.com/scripts/bizible.js" async></script> 
  <script>(function(){
	/* Did we just livereload? */
var log = !!(localStorage && console && console.log && true);
if ( log && localStorage.getItem('/docpad-livereload/reloaded') === 'yes' ) {
	localStorage.removeItem('/docpad-livereload/reloaded');
	console.log('LiveReload completed at', new Date())
}

/* Listen for the regenerated event and perform a reload of the page when the event occurs */
var listen = function(){
	var primus = new Primus('/docpad-livereload');
	primus.on('data', function(data){
		if ( data && data.message ) {
			if ( data.message === 'generateBefore' ) {
				if ( log ) {
					console.log('LiveReload started at', new Date());
				}
				if ( typeof document.getElementsByTagName !== 'undefined' ) {
	document.getElementsByTagName('html')[0].className += ' wait';
}
			}
			else if ( data.message === 'generateAfter' ) {
				if ( log ) {
					localStorage.setItem('/docpad-livereload/reloaded', 'yes');
				}
				document.location.reload();
			}
		}
	});
};
	/* Inject socket into our page */
var inject = function(){
	var t = document.createElement('script');
	t.type = 'text/javascript';
	t.async = 'async';
	t.src = '/docpad-livereload/primus.js';
	t.onload = listen;
	var s = document.getElementsByTagName('script')[0];
	s.parentNode.insertBefore(t, s);
};
	if ( typeof Primus !== 'undefined' ) {
		listen();
	} else {
		inject();
	}
})();</script> 
  <style>html.wait {
	cursor: wait !important;
	opacity: 0;
	transition: opacity 0.5s ease;
}</style>
  <link rel="stylesheet" href="/developer/css/style.css">
  <link rel="stylesheet" href="/developer/css/pages/docs.css"> 
  <script>
    //
    // Mike's HLG infrstructure
    //
    if(typeof hlg_instrument == 'undefined'){
      var hlg_instrument = function(){
        console.error("hlg_instrument does not exist. Using a place-holder");
        return {
          log_event: function(){}
        }
      };
    };

    var hlg_analytics = hlg_instrument({
      app_namespace: "dc",
      production: window.location.hostname === "tokbox.com"
    });

    //START: GA script
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-462500-22', 'auto');
    ga('send', 'pageview');

    var trackOutboundLink = function(url) {
      ga('send', 'event', 'outbound', 'click', url);
    };

    var gaEvent = function(category, label) {
      ga('send', 'event', category, 'click', label);
    };

    //END: GA script

    // Jeff's notification's script:

    $(document).ready(function() {
      var notificationId = $('.notification')[0].id;
      if (notificationId == '') {
        return;
      }
      var closedNotifications = Cookies.getJSON('closedNotifications');
      if(!closedNotifications || !closedNotifications[notificationId]) {
        $('.notification').show();
      } else {
        return;
      }
      $('#close-box').click(function() {
        if (!closedNotifications) {
          closedNotifications = {};
        }
        closedNotifications[notificationId] = true;
        Cookies.set('closedNotifications', closedNotifications);
        $('.notification').hide();
      });
      $('.notification > .righthand').click(function() {
        window.location = 'https://support.tokbox.com/hc/en-us/categories/201138663-Announcements';
      });
    });

    // CrazyEgg

    setTimeout(function(){var a=document.createElement("script");
    var b=document.getElementsByTagName("script")[0];
    a.src=document.location.protocol+"//script.crazyegg.com/pages/scripts/0034/7354.js?"+Math.floor(new Date().getTime()/3600000);
    a.async=true;a.type="text/javascript";b.parentNode.insertBefore(a,b)}, 1);

  </script> 
  <!-- Google Tag Manager --> 
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push(
  {'gtm.start': new Date().getTime(),event:'gtm.js'}
  );var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-TK89G4C');</script> 
  <!-- End Google Tag Manager --> 
 </head> 
 <body> 
  <!-- Google Tag Manager (noscript) --> 
  <noscript>
   <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-TK89G4C" height="0" width="0" style="display:none;visibility:hidden"></iframe>
  </noscript> 
  <!-- End Google Tag Manager (noscript) --> 
  <div id="main-nav"> 
   <ul class="navs"> 
    <li class="tb-dev-logo"> <a href="https://tokbox.com"> <img src="/developer/img/OT_logo.png" alt="" height="22"> </a> </li> 
    <li class="auth-links"> <a href="/account/user/signup">Sign up</a>&nbsp;&nbsp; |&nbsp;&nbsp;<a href="/account">Log in</a> </li> 
    <li class="auth-links logged-in"> <a href="/account">My Account</a> </li> 
   </ul> 
  </div> 
  <div id="secondary-nav"> 
   <ul> 
    <li class="sec-nav"> <a href="https://tokbox.com/pricing">Pricing</a> </li> 
    <li class="sec-nav"> <a href="https://support.tokbox.com/hc/en-us">Help</a> </li> 
   </ul> 
  </div> 
  <div id="search-results"> 
   <div class="container"> 
    <h3>Suggestions</h3> 
    <a class="close" href="">close search</a> 
    <ul class="content"> 
     <p>Searching ...</p> 
    </ul> 
    <div class="pagination"> 
     <a class="prev" href="">prev</a> 
     <a class="next" href="">next</a> 
     <span>-</span> 
     <span class="cur-page">Page 0</span> 
    </div> 
   </div> 
  </div> 
  <div id="left-nav"> 
   <div id="search-container"> 
    <input id="search" type="text" placeholder="Search"> 
    <span id="search-btn"></span> 
   </div> 
   <ul> 
    <li> <a href="/developer/">Home</a> </li> 
    <div class="divider-line"></div> 
    <li class="left-header"> BUILD YOUR APP </li> 
    <li> <a href="/developer/get-started-options/">Getting Started</a> </li> 
    <li> <a href="/developer/tutorials/">Tutorials</a> </li> 
    <li class="has-sub"> <a href="/developer/guides/">Developer Guides</a> 
     <ul> 
      <li> <a href="/developer/guides/">Overview</a> </li> 
      <li> <a href="/developer/guides/basics">Basics</a> </li> 
      <li> <a href="/developer/guides/create-session/">Session Creation</a> </li> 
      <li> <a href="/developer/guides/create-token/">Token Creation</a> </li> 
      <li> <a data-clientsdk="true" href="/developer/guides/connect-session/">Joining a Session</a> </li> 
      <li> <a data-clientsdk="true" href="/developer/guides/publish-stream/">Publishing Streams</a> </li> 
      <li> <a data-clientsdk="true" href="/developer/guides/subscribe-stream/">Subscribing to Streams</a> </li> 
      <li> <a data-clientsdk="true" href="/developer/guides/audio-video/">Adjusting Audio &amp; Video</a> </li> 
      <li> <a data-clientsdk="true" href="/developer/guides/customize-ui/">Customizing the UI</a> </li> 
      <li> <a data-clientsdk="true" href="/developer/guides/screen-sharing/">Screen Sharing</a> </li> 
      <li> <a href="/developer/guides/session-monitoring/">Session Monitoring</a> </li> 
      <li> <a href="/developer/guides/moderation/js/">Moderation</a> </li> 
      <li> <a data-clientsdk="true" href="/developer/guides/signaling/">Signaling</a> </li> 
      <li> <a href="/developer/guides/archiving/">Archiving</a> </li> 
      <li> <a href="/developer/guides/broadcast/">Broadcast</a> </li> 
      <li> <a href="/developer/guides/sip/">SIP Interconnect</a> </li> 
      <li> <a href="/developer/guides/voice/">Voice-Only</a> </li> 
      <li> <a data-clientsdk="true" href="/developer/guides/mobile/">Mobile Guidelines</a> </li> 
      <li> <a href="/developer/guides/exception-handling/js/">Exception Handling</a> </li> 
      <li> <a data-clientsdk="true" href="/developer/guides/debugging/">Debugging</a> </li> 
      <li> <a href="/developer/guides/security/">Security</a> </li> 
      <li> <a href="/developer/guides/account-management/">Account Management</a> </li> 
     </ul> </li>
    <li> <a href="/developer/samples/">Sample Apps</a> </li> 
    <li> <a href="/developer/embeds/">Video Chat Embeds</a> </li>  
    <div class="divider-line"></div> 
    <li class="left-header"> SDK REFERENCE </li> 
    <li> <a href="/developer/sdks/js/">Web</a> </li> 
    <li> <a href="/developer/sdks/ios/">iOS</a> </li> 
    <li> <a href="/developer/sdks/android/">Android</a> </li> 
    <li> <a href="/developer/sdks/windows/">Windows</a> </li> 
    <li class="has-sub"> <a href="/developer/sdks/server/">Server SDKs</a> 
     <ul> 
      <li> <a href="/developer/sdks/server/">Overview</a> </li> 
      <li> <a href="/developer/sdks/dot-net/">.Net</a> </li> 
      <li> <a href="/developer/sdks/java/">Java</a> </li> 
      <li> <a href="/developer/sdks/node/">Node.js</a> </li> 
      <li> <a href="/developer/sdks/php/">PHP</a> </li> 
      <li> <a href="/developer/sdks/python/">Python</a> </li> 
      <li> <a href="/developer/sdks/ruby/">Ruby</a> </li> 
      <li> <a href="/developer/rest/">REST API Reference</a> </li> 
     </ul> </li> 
    <div class="divider-line"></div> 
    <li class="left-header"> RESOURCES </li> 
    <li> <a href="/developer/guides/basics/">OpenTok Basics</a> </li> 
    <li class="has-sub"> <a href="/developer/tools/">Developer Tools</a> 
     <ul> 
      <li> <a href="/developer/tools/">Overview</a> </li> 
      <li> <a href="/developer/tools/inspector_doc/">Inspector</a> </li> 
      <li> <a href="/developer/tools/playground_doc/">OpenTok Playground</a> </li> 
      <li> <a href="/developer/tools/precall_doc/">Pre-call Test</a> </li> 
     </ul> </li> 
    <li> <a href="/developer/beta/">Beta Programs</a> </li> 
   </ul> 
  </div> 
  <div id="doc_content" tabindex="1"> 
   <!-- Use www.guidgenerator.com to generate a unique ID when the content changes.
       Set id to an empty string if there is no current notification to display to the user.
  --> 
   <div class="notification" id="1e0db615-3801-4921-9004-ef586a20340c" style="display:none"> 
    <div class="notification-content"> 
     <img src="/developer/img/icons/safari_logo.svg">
     <strong>Safari Browser Support (beta)</strong>
     <span class="extra-text">: You can now test OpenTok functionality in the upcoming Safari 11 browser for Mac and iOS.</span> 
     <a href="/developer/beta/safari" onclick="ga('send', 'event', 'SafariBanner', 'banner_click', 1);"><button>View docs</button></a> 
    </div> 
    <div id="close-box"></div> 
    <div id="image-loader"></div> 
   </div> 
   <div class="section-header"> 
    <div class="container"> 
     <h1>OpenTok Node SDK</h1> 
     <strong></strong> 
    </div> 
   </div> 
   <div class="container"> 
    <p class="topic-summary"> <a class="btn btn-white btn-padding ctaarrow-blue-thin" href="reference/">API reference</a><a class="download" href="https://github.com/opentok/opentok-node/archive/master.zip">Download</a><a class="samples" href="https://github.com/opentok/opentok-node#samples">Samples</a><a class="github" href="https://github.com/opentok/opentok-node">GitHub</a> </p> 
    <p>The OpenTok Node SDK lets you generate <a href="/developer/guides/create-session/">sessions</a> and <a href="/developer/guides/create-token/">tokens</a> for <a href="http://www.tokbox.com/">OpenTok</a> applications, and <a href="/developer/guides/archiving">archive</a> OpenTok sessions.</p> 
    <h2 id="installation-using-npm-recommended-">Installation using npm (recommended):</h2> 
    <p>npm helps manage dependencies for node projects. Find more info here: <a href="http://npmjs.org" onclick="trackOutboundLink('http://npmjs.org')">http://npmjs.org</a></p> 
    <p>Run this command to install the package and adding it to your <code>package.json</code>:</p> 
    <pre class="highlight"><code class="hljs sql">$ npm <span class="hljs-operator"><span class="hljs-keyword">install</span> opentok <span class="hljs-comment">--save</span> </span></code></pre>
    <h2 id="usage">Usage</h2> 
    <h3 id="initializing">Initializing</h3> 
    <p>Import the module to get a constructor function for an OpenTok object, then call it with <code>new</code> to instantiate an OpenTok object with your own API Key and API Secret.</p> 
    <pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">var</span> OpenTok = <span class="hljs-built_in">require</span>(<span class="hljs-string">'opentok'</span>),
    opentok = <span class="hljs-keyword">new</span> OpenTok(apiKey, apiSecret);
</code></pre> 
    <h3 id="creating-sessions">Creating Sessions</h3> 
    <p>To create an OpenTok Session, use the <code>opentok.createSession(properties, callback)</code> method. The <code>properties</code> parameter is an optional object used to specify whether the session uses the OpenTok Media Router, to specify a location hint, and to specify whether the session will be automatically archived or not. The callback has the signature <code>function(error, session)</code>. The <code>session</code> returned in the callback is an instance of Session. Session objects have a <code>sessionId</code> property that is useful to be saved to a persistent store (such as a database).</p> 
    <pre class="highlight"><code class="hljs javascript"><span class="hljs-comment">// Create a session that will attempt to transmit streams directly between</span>
<span class="hljs-comment">// clients. If clients cannot connect, the session uses the OpenTok TURN server:</span>
opentok.createSession(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, session)</span> </span>{
  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);

  <span class="hljs-comment">// save the sessionId</span>
  db.save(<span class="hljs-string">'session'</span>, session.sessionId, done);
});

<span class="hljs-comment">// The session will the OpenTok Media Router:</span>
opentok.createSession({mediaMode:<span class="hljs-string">"routed"</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, session)</span> </span>{
  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);

  <span class="hljs-comment">// save the sessionId</span>
  db.save(<span class="hljs-string">'session'</span>, session.sessionId, done);
});

<span class="hljs-comment">// A Session with a location hint</span>
opentok.createSession({location:<span class="hljs-string">'12.34.56.78'</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, session)</span> </span>{
  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);

  <span class="hljs-comment">// save the sessionId</span>
  db.save(<span class="hljs-string">'session'</span>, session.sessionId, done);
});

<span class="hljs-comment">// A Session with an automatic archiving</span>
opentok.createSession({mediaMode:<span class="hljs-string">'routed'</span>, archiveMode:<span class="hljs-string">'always'</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, session)</span> </span>{
  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);

  <span class="hljs-comment">// save the sessionId</span>
  db.save(<span class="hljs-string">'session'</span>, session.sessionId, done);
});
</code></pre> 
    <h3 id="generating-tokens">Generating Tokens</h3> 
    <p>Once a Session is created, you can start generating Tokens for clients to use when connecting to it. You can generate a token by calling the <code>opentok.generateToken(sessionId, options)</code> method. Another way is to call the <code>session.generateToken(options)</code> method of a Session object. The <code>options</code> parameter is an optional object used to set the role, expire time, and connection data of the Token. For layout control in archives and broadcasts, the initial layout class list of streams published from connections using this token can be set as well.</p> 
    <pre class="highlight"><code class="hljs javascript"><span class="hljs-comment">// Generate a Token from just a sessionId (fetched from a database)</span>
token = opentok.generateToken(sessionId);

<span class="hljs-comment">// Generate a Token from a session object (returned from createSession)</span>
token = session.generateToken();

<span class="hljs-comment">// Set some options in a Token</span>
token = session.generateToken({
  role :                   <span class="hljs-string">'moderator'</span>,
  expireTime :             (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>().getTime() / <span class="hljs-number">1000</span>)+(<span class="hljs-number">7</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>), <span class="hljs-comment">// in one week</span>
  data :                   <span class="hljs-string">'name=Johnny'</span>,
  initialLayoutClassList : [<span class="hljs-string">'focus'</span>]
});
</code></pre> 
    <h3 id="working-with-archives">Working with archives</h3> 
    <p>You can start the recording of an OpenTok Session using the <code>opentok.startArchive(sessionId, options, callback)</code> method. The <code>options</code> parameter is an optional object used to set the name of the Archive. The callback has the signature <code>function(err, archive)</code>. The <code>archive</code> returned in the callback is an instance of <code>Archive</code>. Note that you can only start an archive on a Session with connected clients.</p> 
    <pre class="highlight"><code class="hljs javascript">opentok.startArchive(sessionId, { name: <span class="hljs-string">'Important Presentation'</span> }, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, archive)</span> </span>{
  <span class="hljs-keyword">if</span> (err) {
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-comment">// The id property is useful to save off into a database</span>
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"new archive:"</span> + archive.id);
  }
});
</code></pre> 
    <p>You can also disable audio or video recording by setting the <code>hasAudio</code> or <code>hasVideo</code> property of the <code>options</code> parameter to <code>false</code>:</p> 
    <pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">var</span> archiveOptions = {
  name: <span class="hljs-string">'Important Presentation'</span>,
  hasVideo: <span class="hljs-literal">false</span>  <span class="hljs-comment">// Record audio only</span>
};
opentok.startArchive(sessionId, archiveOptions, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, archive)</span> </span>{
  <span class="hljs-keyword">if</span> (err) {
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-comment">// The id property is useful to save off into a database</span>
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"new archive:"</span> + archive.id);
  }
});
</code></pre> 
    <p>By default, all streams are recorded to a single (composed) file. You can record the different streams in the session to individual files (instead of a single composed file) by setting the <code>outputMode</code> option to <code>'individual'</code> when you call the <code>opentok.startArchive()</code>:</p> 
    <pre class="highlight"><code class="hljs javascript"><span class="hljs-keyword">var</span> archiveOptions = {
  name: <span class="hljs-string">'Important Presentation'</span>,
  outputMode: <span class="hljs-string">'individual'</span>
};
opentok.startArchive(sessionId, archiveOptions, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, archive)</span> </span>{
  <span class="hljs-keyword">if</span> (err) {
    <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-comment">// The id property is useful to save off into a database</span>
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"new archive:"</span> + archive.id);
  }
});
</code></pre> 
    <p>You can stop the recording of a started Archive using the <code>opentok.stopArchive(archiveId, callback)</code> method. You can also do this using the <code>archive.stop(callback)</code> method an <code>Archive</code> instance. The callback has a signature <code>function(err, archive)</code>. The <code>archive</code> returned in the callback is an instance of <code>Archive</code>.</p> 
    <pre class="highlight"><code class="hljs javascript">opentok.stopArchive(archiveId, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, archive)</span> </span>{
  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);

  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Stopped archive:"</span> + archive.id);
});

archive.stop(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, archive)</span> </span>{
  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);
});
</code></pre> 
    <p>To get an <code>Archive</code> instance (and all the information about it) from an <code>archiveId</code>, use the <code>opentok.getArchive(archiveId, callback)</code> method. The callback has a function signature <code>function(err, archive)</code>. You can inspect the properties of the archive for more details.</p> 
    <pre class="highlight"><code class="hljs javascript">opentok.getArchive(archiveId, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err, archive)</span> </span>{
  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(err);

  <span class="hljs-built_in">console</span>.log(archive);
});
</code></pre> 
    <p>To delete an Archive, you can call the <code>opentok.deleteArchive(archiveId, callback)</code> method or the <code>delete(callback)</code> method of an <code>Archive</code> instance. The callback has a signature <code>function(err)</code>.</p> 
    <pre class="highlight"><code class="hljs javascript"><span class="hljs-comment">// Delete an Archive from an archiveId (fetched from database)</span>
opentok.deleteArchive(archiveId, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err)</span> </span>{
  <span class="hljs-keyword">if</span> (err) <span class="hljs-built_in">console</span>.log(err);
});

<span class="hljs-comment">// Delete an Archive from an Archive instance (returned from archives.create, archives.find)</span>
archive.delete(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(err)</span> </span>{
  <span class="hljs-keyword">if</span> (err) <span class="hljs-built_in">console</span>.log(err);
});
</code></pre> 
    <p>You can also get a list of all the Archives you've created (up to 1000) with your API Key. This is done using the <code>opentok.listArchives(options, callback)</code> method. The parameter <code>options</code> is an optional object used to specify an <code>offset</code> and <code>count</code> to help you paginate through the results. The callback has a signature <code>function(err, archives, totalCount)</code>. The <code>archives</code> returned from the callback is an array of <code>Archive</code> instances. The <code>totalCount</code> returned from the callback is the total number of archives your API Key has generated.</p> 
    <pre class="highlight"><code class="hljs javascript">opentok.listArchives({offset:<span class="hljs-number">100</span>, count:<span class="hljs-number">50</span>}, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error, archives, totalCount)</span> </span>{
  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"error:"</span>, error);

  <span class="hljs-built_in">console</span>.log(totalCount + <span class="hljs-string">" archives"</span>);
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; archives.length; i++) {
    <span class="hljs-built_in">console</span>.log(archives[i].id);
  }
});
</code></pre> 
    <p>Note that you can also create an automatically archived session, by passing in <code>'always'</code> as the <code>archiveMode</code> option when you call the <code>opentok.createSession()</code> method (see "Creating Sessions," above).</p> 
    <p>For more information on archiving, see the <a href="/developer/guides/archiving/">OpenTok archiving</a> programming guide.</p> 
    <h2 id="disconnecting-participants">Disconnecting participants</h2> 
    <p>You can disconnect participants from an OpenTok Session using the <code>opentok.forceDisconnect(sessionId, connectionId, callback)</code> method.</p> 
    <pre class="highlight"><code class="hljs javascript">opentok.forceDisconnect(sessionId, connectionId, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(error)</span> </span>{
  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"error:"</span>, error);
});
</code></pre> 
    <p>This is the server-side equivalent to the forceDisconnect() method in OpenTok.js: <a href="https://www.tokbox.com/developer/guides/moderation/js/#force_disconnect">https://www.tokbox.com/developer/guides/moderation/js/#force_disconnect</a>.</p> 
    <h3 id="working-with-sip-interconnect">Working with SIP Interconnect</h3> 
    <p>You can add an audio-only stream from an external third party SIP gateway using the SIP Interconnect feature. This requires a SIP URI, the session ID you wish to add the audio-only stream to, and a token to connect to that session ID.</p> 
    <pre class="highlight"><code class="hljs javascript">opentok.dial(sessionId, token, sipUri, options, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(error, sipCall)</span> </span>{
  <span class="hljs-keyword">if</span> (error) <span class="hljs-keyword">return</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"error: "</span>, error);

  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'SIP audio stream Id: '</span> + sipCall.streamId+ <span class="hljs-string">' added to session ID: '</span> + sipCall.sessionId);
});
</code></pre> 
    <h2 id="requirements">Requirements</h2> 
    <p>You need an OpenTok API key and API secret, which you can obtain by logging into your <a href="/account/">TokBox account</a>.</p> 
    <p>The OpenTok Node SDK requires node 0.10 or higher.</p> 
    <h2 id="release-notes">Release Notes</h2> 
    <p>See the <a href="https://github.com/opentok/opentok-node/releases" onclick="gaEvent('node_sdk', 'body: releases-info')">Releases</a> page for details about each release.</p> 
    <h3 id="important-changes-since-v2-2-0">Important changes since v2.2.0</h3> 
    <p><strong>Changes in v2.2.3:</strong></p> 
    <p>The default setting for the <code>createSession()</code> method is to create a session with the media mode set to relayed. In previous versions of the SDK, the default setting was to use the OpenTok Media Router (media mode set to routed). In a relayed session, clients will attempt to send streams directly between each other (peer-to-peer); if clients cannot connect due to firewall restrictions, the session uses the OpenTok TURN server to relay audio-video streams.</p> 
    <p><strong>Changes in v2.2.0:</strong></p> 
    <p>This version of the SDK includes support for working with OpenTok archives.</p> 
    <p>The <code>createSession()</code> method has changed to take one parameter: an <code>options</code> object that has <code>location</code> and <code>mediaMode</code> properties. The <code>mediaMode</code> property replaces the <code>properties.p2p.preference</code> parameter in the previous version of the SDK.</p> 
    <p>The <code>generateToken()</code> has changed to take two parameters: the session ID and an <code>options</code> object that has <code>role</code>, <code>expireTime</code> and <code>data</code> properties.</p> 
    <script>
  var currentPage = 'node_sdk';
  var elementNames = ['download', 'samples', 'github'];
  for (var i = 0; i < elementNames.length; i++){
    var el = document.getElementsByClassName(elementNames[i])[0];
    if (el.addEventListener) {
      (function(i){
        el.addEventListener("click", function(){gaEvent(currentPage, 'top_banner: ' + elementNames[i])}, false);
      }(i))
    } else {
      (function(i){
        el.attachEvent('onclick', function(){gaEvent(currentPage, 'top_banner: ' + elementNames[i])});
      }(i))
    }
  }
</script> 
   </div> 
  </div> 
  <script>(function(){
	/* Did we just livereload? */
var log = !!(localStorage && console && console.log && true);
if ( log && localStorage.getItem('/docpad-livereload/reloaded') === 'yes' ) {
	localStorage.removeItem('/docpad-livereload/reloaded');
	console.log('LiveReload completed at', new Date())
}

/* Listen for the regenerated event and perform a reload of the page when the event occurs */
var listen = function(){
	var primus = new Primus('/docpad-livereload');
	primus.on('data', function(data){
		if ( data && data.message ) {
			if ( data.message === 'generateBefore' ) {
				if ( log ) {
					console.log('LiveReload started at', new Date());
				}
				if ( typeof document.getElementsByTagName !== 'undefined' ) {
	document.getElementsByTagName('html')[0].className += ' wait';
}
			}
			else if ( data.message === 'generateAfter' ) {
				if ( log ) {
					localStorage.setItem('/docpad-livereload/reloaded', 'yes');
				}
				document.location.reload();
			}
		}
	});
};
	/* Inject socket into our page */
var inject = function(){
	var t = document.createElement('script');
	t.type = 'text/javascript';
	t.async = 'async';
	t.src = '/docpad-livereload/primus.js';
	t.onload = listen;
	var s = document.getElementsByTagName('script')[0];
	s.parentNode.insertBefore(t, s);
};
	if ( typeof Primus !== 'undefined' ) {
		listen();
	} else {
		inject();
	}
})();</script>
  <script defer src="/developer/js/change-ui-if-logged-in.js"></script>
  <script defer src="/developer/js/pages/quick-start-widget.js"></script>
  <script defer src="/developer/js/layout.js"></script>
  <script defer src="/developer/js/left-nav.js"></script>
  <script defer src="/developer/js/pages/cta.js"></script> 
  <script>
    (function(d,b,a,s,e){ var t = b.createElement(a),
        fs = b.getElementsByTagName(a)[0]; t.async=1; t.id=e; t.src=s;
        fs.parentNode.insertBefore(t, fs); })
    (window,document,'script','https://scripts.demandbase.com/wv2Z2oAW.min.js','demandbase_js_lib');
  </script>   
 </body>
</html>