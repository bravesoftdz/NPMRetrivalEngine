<!doctype html>
<!--[if IE 8]><html class="no-js lt-ie9" lang="en" > <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
 <!--<![endif]-->
 <head> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <title>Kurento Utils JS — Kurento 6.6.1 documentation</title> 
  <link rel="shortcut icon" href="../_static/favicon.ico"> 
  <link href="https://fonts.googleapis.com/css?family=Lato:400,700|Roboto+Slab:400,700|Inconsolata:400,700" rel="stylesheet" type="text/css"> 
  <link rel="stylesheet" href="https://media.readthedocs.org/css/sphinx_rtd_theme.css" type="text/css"> 
  <link rel="stylesheet" href="../_static/examplecode.css" type="text/css"> 
  <link rel="index" title="Index" href="../genindex.html"> 
  <link rel="search" title="Search" href="../search.html"> 
  <link rel="top" title="Kurento 6.6.1 documentation" href="../index.html"> 
  <link rel="up" title="Mastering Kurento" href="../mastering_kurento.html"> 
  <link rel="next" title="Securing Kurento Applications" href="securing-kurento-applications.html"> 
  <link rel="prev" title="WebRTC Statistics" href="webrtc_statistics.html"> 
  <script src="https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js"></script> 
  <!-- RTD Extra Head --> 
  <!-- 
Always link to the latest version, as canonical.
http://docs.readthedocs.org/en/latest/canonical.html
--> 
  <link rel="canonical" href="http://doc-kurento.readthedocs.io/en/stable/mastering/kurento_utils_js.html"> 
  <link rel="stylesheet" href="https://media.readthedocs.org/css/readthedocs-doc-embed.css" type="text/css"> 
  <script type="text/javascript" src="../_static/readthedocs-data.js"></script> 
  <!-- Add page-specific data, which must exist in the page js, not global --> 
  <script type="text/javascript">
READTHEDOCS_DATA['page'] = 'mastering/kurento_utils_js' 		
READTHEDOCS_DATA['source_suffix'] = '.rst'
</script> 
  <script type="text/javascript" src="../_static/readthedocs-dynamic-include.js"></script> 
  <!-- end RTD <extrahead> -->
 </head> 
 <body class="wy-body-for-nav" role="document"> 
  <div class="wy-grid-for-nav"> 
   <nav data-toggle="wy-nav-shift" class="wy-nav-side"> 
    <div class="wy-side-nav-search"> 
     <a href="../index.html" class="fa fa-home"><img style="width:159px;border-radius:0" src="../_static/img/kurento-rect-logo2.png"><span style="font-size:0.8em">v6.6.1</span></a> 
     <div role="search"> 
      <form id="rtd-search-form" class="wy-form" action="../search.html" method="get"> 
       <input type="text" name="q" placeholder="Search docs"> 
       <input type="hidden" name="check_keywords" value="yes"> 
       <input type="hidden" name="area" value="default"> 
      </form> 
     </div> 
    </div> 
    <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation"> 
     <ul class="current"> 
      <li class="toctree-l1"><a class="reference internal" href="../what_is_kurento.html">What’s Kurento?</a></li> 
      <li class="toctree-l1"><a class="reference internal" href="../introducing_kurento.html">Introducing Kurento</a>
       <ul> 
        <li class="toctree-l2"><a class="reference internal" href="../introducing_kurento.html#webrtc-media-servers">WebRTC media servers</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../introducing_kurento.html#kurento-media-server">Kurento Media Server</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../introducing_kurento.html#kurento-api-clients-and-protocol">Kurento API, Clients, and Protocol</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../introducing_kurento.html#creating-applications-with-kurento">Creating applications with Kurento</a></li> 
       </ul> </li> 
      <li class="toctree-l1"><a class="reference internal" href="../installation_guide.html">Kurento Media Server Installation</a>
       <ul> 
        <li class="toctree-l2"><a class="reference internal" href="../installation_guide.html#migrating-from-kms-v5-to-v6">Migrating from KMS v5 to v6</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../installation_guide.html#stun-and-turn-servers">STUN and TURN servers</a></li> 
       </ul> </li> 
      <li class="toctree-l1"><a class="reference internal" href="../tutorials.html">Kurento Tutorials</a>
       <ul> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#hello-world">Hello world</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#webrtc-magic-mirror">WebRTC magic mirror</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#webrtc-one-to-many-broadcast">WebRTC one-to-many broadcast</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#webrtc-one-to-one-video-call">WebRTC one-to-one video call</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#webrtc-one-to-one-video-call-with-recording-and-filtering">WebRTC one-to-one video call with recording and filtering</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#webrtc-many-to-many-video-call-group-call">WebRTC many-to-many video call (Group call)</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#media-elements-metadata">Media Elements metadata</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#play-media-to-webrtc">Play media to WebRTC</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#webrtc-outgoing-data-channels">WebRTC outgoing data channels</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#webrtc-incoming-data-channel">WebRTC incoming data channel</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#webrtc-recording">WebRTC recording</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#webrtc-repository">WebRTC repository</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../tutorials.html#webrtc-statistics">WebRTC statistics</a></li> 
       </ul> </li> 
      <li class="toctree-l1 current"><a class="reference internal" href="../mastering_kurento.html">Mastering Kurento</a>
       <ul class="current"> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#kurento-architecture">Kurento Architecture</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#kurento-api-reference">Kurento API Reference</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#kurento-protocol">Kurento Protocol</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#advanced-installation-guide">Advanced Installation Guide</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#working-with-nightly-builds">Working with Nightly Builds</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#kurento-modules">Kurento Modules</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#webrtc-statistics">WebRTC Statistics</a></li> 
        <li class="toctree-l2 current"><a class="reference internal" href="../mastering_kurento.html#kurento-utils-js">Kurento Utils JS</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#kurento-java-client-javadoc">Kurento Java Client JavaDoc</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#kurento-javascript-client-jsdoc">Kurento JavaScript Client JsDoc</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#kurento-javascript-utils-jsdoc">Kurento JavaScript Utils JsDoc</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../mastering_kurento.html#securing-kurento-applications">Securing Kurento Applications</a></li> 
       </ul> </li> 
      <li class="toctree-l1"><a class="reference internal" href="../faq.html">Kurento FAQ</a>
       <ul> 
        <li class="toctree-l2"><a class="reference internal" href="../faq.html#how-do-i">How do I...</a></li> 
        <li class="toctree-l2"><a class="reference internal" href="../faq.html#why-do-i-get-the-error">Why do I get the error...</a></li> 
       </ul> </li> 
      <li class="toctree-l1"><a class="reference internal" href="../glossary.html">Glossary</a></li> 
     </ul> 
    </div> &nbsp; 
   </nav> 
   <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap"> 
    <nav class="wy-nav-top" role="navigation" aria-label="top navigation"> 
     <i data-toggle="wy-nav-top" class="fa fa-bars"></i> 
     <a href="../index.html">Kurento</a> 
    </nav> 
    <div class="wy-nav-content"> 
     <div class="rst-content"> 
      <div role="navigation" aria-label="breadcrumbs navigation"> 
       <ul class="wy-breadcrumbs"> 
        <li><a href="../index.html">Docs</a> »</li> 
        <li><a href="../mastering_kurento.html">Mastering Kurento</a> »</li> 
        <li>Kurento Utils JS</li> 
        <li class="wy-breadcrumbs-aside"> <a href="https://github.com/Kurento/doc-kurento-readthedocs/blob/3f3fcf1e9675c045d7edc2410f9d6d5f4690a228/source/mastering/kurento_utils_js.rst" class="fa fa-github"> Edit on GitHub</a> </li> 
       </ul> 
       <hr> 
      </div> 
      <div role="main"> 
       <div class="section" id="kurento-utils-js"> 
        <h1>Kurento Utils JS<a class="headerlink" href="#kurento-utils-js" title="Permalink to this headline">¶</a></h1> 
        <div class="section" id="overview"> 
         <h2>Overview<a class="headerlink" href="#overview" title="Permalink to this headline">¶</a></h2> 
         <p>Kurento Utils is a wrapper object of an <a class="reference external" href="https://w3c.github.io/webrtc-pc/">RTCPeerConnection</a>. This object is aimed to simplify the development of WebRTC-based applications.</p> 
         <p>The source code of this project can be cloned from the <a class="reference external" href="https://github.com/kurento/kurento-utils">GitHub repository</a>.</p> 
        </div> 
        <div class="section" id="how-to-use-it"> 
         <h2>How to use it<a class="headerlink" href="#how-to-use-it" title="Permalink to this headline">¶</a></h2> 
         <ul> 
          <li><p class="first"><strong>Minified file</strong> - Download the file from <a class="reference external" href="http://builds.kurento.org/release/6.6.2/js/kurento-utils.min.js">here</a>.</p> </li> 
          <li><p class="first"><strong>NPM</strong> - Install and use library in your NodeJS files.</p> 
           <div class="highlight-bash">
            <div class="highlight">
             <pre><span></span>npm install kurento-utils
</pre>
            </div> 
           </div> 
           <div class="highlight-javascript">
            <div class="highlight">
             <pre><span></span><span class="kd">var</span> <span class="nx">utils</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'kurento-utils'</span><span class="p">);</span>
</pre>
            </div> 
           </div> </li> 
          <li><p class="first"><strong>Bower</strong> - Generate the bundled script file</p> 
           <div class="highlight-bash">
            <div class="highlight">
             <pre><span></span>bower install kurento-utils
</pre>
            </div> 
           </div> <p>Import the library in your <em>html</em> page</p> 
           <div class="highlight-html">
            <div class="highlight">
             <pre><span></span><span class="p">&lt;</span><span class="nt">script</span>
<span class="na">src</span><span class="o">=</span><span class="s">"bower_components/kurento-utils/js/kurento-utils.js"</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</pre>
            </div> 
           </div> </li> 
         </ul> 
        </div> 
        <div class="section" id="examples"> 
         <h2>Examples<a class="headerlink" href="#examples" title="Permalink to this headline">¶</a></h2> 
         <p>There are several tutorials that show kurento-utils used in complete WebRTC applications developed on Java, Node and JavaScript. These tutorials are in GitHub, and you can download and run them at any time.</p> 
         <ul class="simple"> 
          <li><strong>Java</strong> - <a class="reference external" href="https://github.com/Kurento/kurento-tutorial-java">https://github.com/Kurento/kurento-tutorial-java</a></li> 
          <li><strong>Node</strong> - <a class="reference external" href="https://github.com/Kurento/kurento-tutorial-node">https://github.com/Kurento/kurento-tutorial-node</a></li> 
          <li><strong>JavaScript</strong> - <a class="reference external" href="https://github.com/Kurento/kurento-tutorial-js">https://github.com/Kurento/kurento-tutorial-js</a></li> 
         </ul> 
         <p>In the following lines we will show how to use the library to create an <code class="docutils literal"><span class="pre">RTCPeerConnection</span></code>, and how to negotiate the connection with another peer. The library offers a <code class="docutils literal"><span class="pre">WebRtcPeer</span></code> object, which is a wrapper of the browser’s RTCPeerConnection API. Peer connections can be of different types: unidirectional (send or receive only) or bidirectional (send and receive). The following code shows how to create the latter, in order to be able to send and receive media (audio and video). The code assumes that there are two video tags in the page that loads the script. These tags will be used to show the video as captured by your own client browser, and the media received from the other peer. The constructor receives a property that holds all the information needed for the configuration.</p> 
         <div class="highlight-javascript">
          <div class="highlight">
           <pre><span></span> <span class="kd">var</span> <span class="nx">videoInput</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">'videoInput'</span><span class="p">);</span>
 <span class="kd">var</span> <span class="nx">videoOutput</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">'videoOutput'</span><span class="p">);</span>

 <span class="kd">var</span> <span class="nx">constraints</span> <span class="o">=</span> <span class="p">{</span>
     <span class="nx">audio</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
     <span class="nx">video</span><span class="o">:</span> <span class="p">{</span>
       <span class="nx">width</span><span class="o">:</span> <span class="mi">640</span><span class="p">,</span>
       <span class="nx">framerate</span><span class="o">:</span> <span class="mi">15</span>
     <span class="p">}</span>
 <span class="p">};</span>

 <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
   <span class="nx">localVideo</span><span class="o">:</span> <span class="nx">videoInput</span><span class="p">,</span>
   <span class="nx">remoteVideo</span><span class="o">:</span> <span class="nx">videoOutput</span><span class="p">,</span>
   <span class="nx">onicecandidate</span> <span class="o">:</span> <span class="nx">onIceCandidate</span><span class="p">,</span>
   <span class="nx">mediaConstraints</span><span class="o">:</span> <span class="nx">constraints</span>
 <span class="p">};</span>


<span class="kd">var</span> <span class="nx">webRtcPeer</span> <span class="o">=</span> <span class="nx">kurentoUtils</span><span class="p">.</span><span class="nx">WebRtcPeer</span><span class="p">.</span><span class="nx">WebRtcPeerSendrecv</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="nx">onError</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>

      <span class="k">this</span><span class="p">.</span><span class="nx">generateOffer</span><span class="p">(</span><span class="nx">onOffer</span><span class="p">)</span>
   <span class="p">});</span>
</pre>
          </div> 
         </div> 
         <p>With this little code, the library takes care of creating the <code class="docutils literal"><span class="pre">RTCPeerConnection</span></code>, and invoking <code class="docutils literal"><span class="pre">getUserMedia</span></code> in the browser if needed. The constraints in the property are used in the invocation, and in this case both microphone and webcam will be used. However, this does not create the connection. This is only achieved after completing the SDP negotiation between peers. This process implies exchanging SDPs offer and answer and, since <a class="reference internal" href="../glossary.html#term-trickle-ice"><span class="xref std std-term">Trickle ICE</span></a> is used, a number of candidates describing the capabilities of each peer. How the negotiation works is out of the scope of this document. More info can be found in <a class="reference external" href="https://tools.ietf.org/id/draft-nandakumar-rtcweb-sdp-01.html">this</a> link.</p> 
         <p>In the previous piece of code, when the <em>webRtcPeer</em> object gets created, the SDP offer is generated with <code class="docutils literal"><span class="pre">this.generateOffer(onOffer)</span></code>. The only argument passed is a function, that will be invoked one the browser’s peer connection has generated that offer. The <code class="docutils literal"><span class="pre">onOffer</span></code> callback method is responsible for sending this offer to the other peer, by any means devised in your application. Since that is part of the signaling plane and business logic of each particular application, it won’t be covered in this document.</p> 
         <p>Assuming that the SDP offer has been received by the remote peer, it must have generated an SDP answer, that should be received in return. This answer must be processed by the <em>webRtcEndpoint</em>, in order to fulfill the negotiation. This could be the implementation of the <code class="docutils literal"><span class="pre">onOffer</span></code> callback function. We’ve assumed that there’s a function somewhere in the scope, that allows sending the SDP to the remote peer.</p> 
         <div class="highlight-javascript">
          <div class="highlight">
           <pre><span></span><span class="kd">function</span> <span class="nx">onOffer</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">sdpOffer</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="k">return</span> <span class="nx">onError</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>

  <span class="c1">// We've made this function up sendOfferToRemotePeer(sdpOffer,</span>
  <span class="kd">function</span><span class="p">(</span><span class="nx">sdpAnswer</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">webRtcPeer</span><span class="p">.</span><span class="nx">processAnswer</span><span class="p">(</span><span class="nx">sdpAnswer</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">}</span>
</pre>
          </div> 
         </div> 
         <p>As we’ve commented before, the library assumes the use of <a class="reference internal" href="../glossary.html#term-trickle-ice"><span class="xref std std-term">Trickle ICE</span></a> to complete the connection between both peers. In the configuration of the <em>webRtcPeer</em>, there is a reference to a <code class="docutils literal"><span class="pre">onIceCandidate</span></code> callback function. The library will use this function to send ICE candidates to the remote peer. Since this is particular to each application, we will just show the signature</p> 
         <div class="highlight-javascript">
          <div class="highlight">
           <pre><span></span><span class="kd">function</span> <span class="nx">onIceCandidate</span><span class="p">(</span><span class="nx">candidate</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// Send the candidate to the remote peer</span>
<span class="p">}</span>
</pre>
          </div> 
         </div> 
         <p>In turn, our client application must be able to receive ICE candidates from the remote peer. Assuming the signaling takes care of receiving those candidates, it is enough to invoke the following method in the <code class="docutils literal"><span class="pre">webRtcPeer</span></code> to consider the ICE candidate</p> 
         <div class="highlight-javascript">
          <div class="highlight">
           <pre><span></span><span class="nx">webRtcPeer</span><span class="p">.</span><span class="nx">addIceCandidate</span><span class="p">(</span><span class="nx">candidate</span><span class="p">);</span>
</pre>
          </div> 
         </div> 
         <p>Following the previous steps, we have:</p> 
         <ul class="simple"> 
          <li>Sent and SDP offer to a remote peer</li> 
          <li>Received an SDP answer from the remote peer, and have the <code class="docutils literal"><span class="pre">webRtcPeer</span></code> process that answer.</li> 
          <li>Exchanged ICE candidates between both peer, by sending the ones generated in the browser, and processing the candidates received by the remote peer.</li> 
         </ul> 
         <p>This should complete the negotiation process, and should leave us with a working bidirectional WebRTC media exchange between both peers.</p> 
        </div> 
        <div class="section" id="using-data-channels"> 
         <h2>Using data channels<a class="headerlink" href="#using-data-channels" title="Permalink to this headline">¶</a></h2> 
         <p>WebRTC data channels lets you send text or binary data over an active WebRTC connection. The <strong>WebRtcPeer</strong> object can provide access to this functionality by using the <a class="reference external" href="https://developer.mozilla.org/en-US/docs/Games/Techniques/WebRTC_data_channels">RTCDataChannel</a> form the wrapped <strong>RTCPeerConnection</strong> object. This allows you to inject into and consume data from the pipeline. This data can be treated by each endpoint differently. For instance, a <code class="docutils literal"><span class="pre">WebRtcPeer</span></code> object in the browser, will have the same behavior as the <code class="docutils literal"><span class="pre">RTCDataChannel</span></code> (you can see a description <a class="reference external" href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API/WebRTC_basics#DataChannel">here</a>). Other endpoints could make use of this channel to send information: a filter that detects QR codes in a video stream, could send the detected code to the clients through a data channel. This special behavior should be specified in the filter.</p> 
         <p>The use of data channels in the <code class="docutils literal"><span class="pre">WebRtcPeer</span></code> object is indicated by passing the <code class="docutils literal"><span class="pre">dataChannels</span></code> flag in the options bag, along with the desired options.</p> 
         <div class="highlight-javascript">
          <div class="highlight">
           <pre><span></span> <span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
     <span class="nx">localVideo</span> <span class="o">:</span> <span class="nx">videoInput</span><span class="p">,</span>
     <span class="nx">remoteVideo</span> <span class="o">:</span> <span class="nx">videoOutput</span><span class="p">,</span>
<span class="hll">     <span class="nx">dataChannels</span> <span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class="hll">     <span class="nx">dataChannelConfig</span><span class="o">:</span> <span class="p">{</span>
</span><span class="hll">       <span class="nx">id</span> <span class="o">:</span> <span class="nx">getChannelName</span><span class="p">(),</span>
</span><span class="hll">       <span class="nx">onmessage</span> <span class="o">:</span> <span class="nx">onMessage</span><span class="p">,</span>
</span><span class="hll">       <span class="nx">onopen</span> <span class="o">:</span> <span class="nx">onOpen</span><span class="p">,</span>
</span><span class="hll">       <span class="nx">onclose</span> <span class="o">:</span> <span class="nx">onClosed</span><span class="p">,</span>
</span><span class="hll">       <span class="nx">onbufferedamountlow</span> <span class="o">:</span> <span class="nx">onbufferedamountlow</span><span class="p">,</span>
</span><span class="hll">       <span class="nx">onerror</span> <span class="o">:</span> <span class="nx">onerror</span>
</span><span class="hll">     <span class="p">},</span>
</span>     <span class="nx">onicecandidate</span> <span class="o">:</span> <span class="nx">onIceCandidate</span>
 <span class="p">}</span>

 <span class="nx">webRtcPeer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">kurentoUtils</span><span class="p">.</span><span class="nx">WebRtcPeer</span><span class="p">.</span><span class="nx">WebRtcPeerSendrecv</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="nx">onWebRtcPeerCreated</span><span class="p">);</span>
</pre>
          </div> 
         </div> 
         <p>The values in <code class="docutils literal"><span class="pre">dataChannelConfig</span></code> are all optional. Once the <code class="docutils literal"><span class="pre">webRtcPeer</span></code> object is created, and after the connection has been successfully negotiated, users can send data through the data channel</p> 
         <div class="highlight-javascript">
          <div class="highlight">
           <pre><span></span><span class="nx">webRtcPeer</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">'your data stream here'</span><span class="p">);</span>
</pre>
          </div> 
         </div> 
         <p>The format of the data you are sending, is determined by your application, and the definition of the endpoints that you are using.</p> 
         <p>The lifecycle of the underlying <code class="docutils literal"><span class="pre">RTCDataChannel</span></code>, is tied to that of the <code class="docutils literal"><span class="pre">webRtcPeer</span></code>: when the <code class="docutils literal"><span class="pre">webRtcPeer.dispose()</span></code> method is invoked, the data channel will be closed and released too.</p> 
        </div> 
        <div class="section" id="reference-documentation"> 
         <h2>Reference documentation<a class="headerlink" href="#reference-documentation" title="Permalink to this headline">¶</a></h2> 
         <div class="section" id="webrtcpeer"> 
          <h3>WebRtcPeer<a class="headerlink" href="#webrtcpeer" title="Permalink to this headline">¶</a></h3> 
          <p>The constructor for WebRtcPeer is WebRtcPeer(<strong>mode, options, callback</strong>) where:</p> 
          <ul> 
           <li><p class="first"><strong>mode</strong>: Mode in which the PeerConnection will be configured. Valid values are</p> 
            <blockquote> 
             <div>
              <ul class="simple"> 
               <li><em>recv</em>: receive only media.</li> 
               <li><em>send</em>: send only media.</li> 
               <li><em>sendRecv</em>: send and receive media.</li> 
              </ul> 
             </div>
            </blockquote> </li> 
           <li><p class="first"><strong>options</strong> : It is a group of parameters and they are optional. It is a json object.</p> 
            <blockquote> 
             <div>
              <ul> 
               <li><p class="first"><em>localVideo</em>: Video tag in the application for the local stream.</p> </li> 
               <li><p class="first"><em>remoteVideo</em>: Video tag in the application for the remote stream.</p> </li> 
               <li><p class="first"><em>videoStream</em>: Provides an already available video stream that will be used instead of using the media stream from the local webcam.</p> </li> 
               <li><p class="first"><em>audioStreams</em>: Provides an already available audio stream that will be used instead of using the media stream from the local microphone.</p> </li> 
               <li><p class="first"><em>mediaConstraints</em>: Defined the quality for the video and audio</p> </li> 
               <li><p class="first"><em>connectionConstraints</em>: Defined the connection constraint according with browser like googIPv6, DtlsSrtpKeyAgreement...</p> </li> 
               <li><p class="first"><em>peerConnection</em>: Use a peerConnection which was created before</p> </li> 
               <li><p class="first"><em>sendSource</em>: Which source will be used</p> 
                <blockquote> 
                 <div>
                  <ul class="simple"> 
                   <li><em>webcam</em></li> 
                   <li><em>screen</em></li> 
                   <li><em>window</em></li> 
                  </ul> 
                 </div>
                </blockquote> </li> 
               <li><p class="first"><em>onstreamended</em>: Method that will be invoked when stream ended event happens</p> </li> 
               <li><p class="first"><em>onicecandidate</em>: Method that will be invoked when ice candidate event happens</p> </li> 
               <li><p class="first"><em>oncandidategatheringdone</em>: Method that will be invoked when all candidates have been harvested</p> </li> 
               <li><p class="first"><em>dataChannels</em>: Flag for enabling the use of data channels. If <em>true</em>, then a data channel will be created in the <em>RTCPeerConnection</em> object.</p> </li> 
               <li><p class="first"><em>dataChannelConfig</em>: It is a JSON object with the configuration passed to the DataChannel when created. It supports the following keys:</p> 
                <blockquote> 
                 <div>
                  <ul class="simple"> 
                   <li><em>id</em>: Specifies the <em>id</em> of the data channel. If none specified, the same <em>id</em> of the <em>WebRtcPeer</em> object will be used.</li> 
                   <li><em>options</em>: Options object passed to the data channel constructor.</li> 
                   <li><em>onopen</em>: Function invoked in the <em>onopen</em> event of the data channel, fired when the channel is open.</li> 
                   <li><em>onclose</em>: Function invoked in the <em>onclose</em> event of the data channel, fired when the data channel is closed.</li> 
                   <li><em>onmessage</em>: Function invoked in the <em>onmessage</em> event of the data channel. This event is fired every time a message is received.</li> 
                   <li><em>onbufferedamountlow</em>: Is the event handler called when the <code class="docutils literal"><span class="pre">bufferedamountlow</span></code> event is received. Such an event is sent when <code class="docutils literal"><span class="pre">RTCDataChannel.bufferedAmount</span></code> drops to less than or equal to the amount specified by the <code class="docutils literal"><span class="pre">RTCDataChannel.bufferedAmountLowThreshold</span></code> property.</li> 
                   <li><em>onerror</em>: Callback function onviked when an error in the data channel is produced. If none is provided, an error trace message will be logged in the browser console.</li> 
                  </ul> 
                 </div>
                </blockquote> </li> 
               <li><p class="first"><em>simulcast</em>: Indicates whether simulcast is going to be used. Value is <em>true|false</em></p> </li> 
               <li><p class="first"><em>configuration</em>: It is a JSON object where ICE Servers are defined using</p> 
                <blockquote> 
                 <div>
                  <ul> 
                   <li><p class="first"><a class="reference external" href="https://w3c.github.io/webrtc-pc/#idl-def-RTCIceServer">iceServers</a>: The format for this variable is like:</p> 
                    <div class="highlight-default">
                     <div class="highlight">
                      <pre><span></span><span class="p">[{</span><span class="s2">"urls"</span><span class="p">:</span><span class="s2">"turn:turn.example.org"</span><span class="p">,</span><span class="s2">"username"</span><span class="p">:</span><span class="s2">"user"</span><span class="p">,</span><span class="s2">"credential"</span><span class="p">:</span><span class="s2">"myPassword"</span><span class="p">}]</span>
<span class="p">[{</span><span class="s2">"urls"</span><span class="p">:</span><span class="s2">"stun:stun1.example.net"</span><span class="p">},{</span><span class="s2">"urls"</span><span class="p">:</span><span class="s2">"stun:stun2.example.net"</span><span class="p">}]</span>
</pre>
                     </div> 
                    </div> </li> 
                  </ul> 
                 </div>
                </blockquote> </li> 
              </ul> 
             </div>
            </blockquote> </li> 
           <li><p class="first"><strong>callback</strong>: It is a callback function which indicate, if all worked right or not</p> </li> 
          </ul> 
          <p>Also there are 3 specific methods for creating WebRtcPeer objects without using <em>mode</em> parameter:</p> 
          <blockquote> 
           <div>
            <ul class="simple"> 
             <li><strong>WebRtcPeerRecvonly(options, callback)</strong>: Create a WebRtcPeer as receive only.</li> 
             <li><strong>WebRtcPeerSendonly(options, callback)</strong>: Create a WebRtcPeer as send only.</li> 
             <li><strong>WebRtcPeerSendrecv(options, callback)</strong>: Create a WebRtcPeer as send and receive.</li> 
            </ul> 
           </div>
          </blockquote> 
          <div class="section" id="mediaconstraints"> 
           <h4>MediaConstraints<a class="headerlink" href="#mediaconstraints" title="Permalink to this headline">¶</a></h4> 
           <p>Constraints provide a general control surface that allows applications to both select an appropriate source for a track and, once selected, to influence how a source operates. <code class="docutils literal"><span class="pre">getUserMedia()</span></code> uses constraints to help select an appropriate source for a track and configure it. For more information about media constraints and its values, you can check <a class="reference external" href="http://www.w3.org/TR/mediacapture-streams/">here</a>.</p> 
           <p>By default, if the mediaConstraints is undefined, this constraints are used when <code class="docutils literal"><span class="pre">getUserMedia</span></code> is called:</p> 
           <div class="highlight-default">
            <div class="highlight">
             <pre><span></span><span class="p">{</span>
  <span class="n">audio</span><span class="p">:</span> <span class="n">true</span><span class="p">,</span>
  <span class="n">video</span><span class="p">:</span> <span class="p">{</span>
    <span class="n">width</span><span class="p">:</span> <span class="mi">640</span><span class="p">,</span>
    <span class="n">framerate</span><span class="p">:</span> <span class="mi">15</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre>
            </div> 
           </div> 
           <p>If <em>mediaConstraints</em> has any value, the library uses this value for the invocation of <code class="docutils literal"><span class="pre">getUserMedia</span></code>. It is up to the browser whether those constraints are accepted or not.</p> 
           <p>In the examples section, there is one example about the use of media constraints.</p> 
          </div> 
          <div class="section" id="methods"> 
           <h4>Methods<a class="headerlink" href="#methods" title="Permalink to this headline">¶</a></h4> 
           <div class="section" id="getpeerconnection"> 
            <h5>getPeerConnection<a class="headerlink" href="#getpeerconnection" title="Permalink to this headline">¶</a></h5> 
            <p>Using this method the user can get the peerConnection and use it directly.</p> 
           </div> 
           <div class="section" id="showlocalvideo"> 
            <h5>showLocalVideo<a class="headerlink" href="#showlocalvideo" title="Permalink to this headline">¶</a></h5> 
            <p>Use this method for showing the local video.</p> 
           </div> 
           <div class="section" id="getlocalstream"> 
            <h5>getLocalStream<a class="headerlink" href="#getlocalstream" title="Permalink to this headline">¶</a></h5> 
            <p>Using this method the user can get the local stream. You can use <strong>muted</strong> property to silence the audio, if this property is <em>true</em>.</p> 
           </div> 
           <div class="section" id="getremotestream"> 
            <h5>getRemoteStream<a class="headerlink" href="#getremotestream" title="Permalink to this headline">¶</a></h5> 
            <p>Using this method the user can get the remote stream.</p> 
           </div> 
           <div class="section" id="getcurrentframe"> 
            <h5>getCurrentFrame<a class="headerlink" href="#getcurrentframe" title="Permalink to this headline">¶</a></h5> 
            <p>Using this method the user can get the current frame and get a canvas with an image of the current frame.</p> 
           </div> 
           <div class="section" id="processanswer"> 
            <h5>processAnswer<a class="headerlink" href="#processanswer" title="Permalink to this headline">¶</a></h5> 
            <p>Callback function invoked when a SDP answer is received. Developers are expected to invoke this function in order to complete the SDP negotiation. This method has two parameters:</p> 
            <ul class="simple"> 
             <li><strong>sdpAnswer</strong>: Description of sdpAnswer</li> 
             <li><strong>callback</strong>: It is a function with <em>error</em> like parameter. It is called when the remote description has been set successfully.</li> 
            </ul> 
           </div> 
           <div class="section" id="processoffer"> 
            <h5>processOffer<a class="headerlink" href="#processoffer" title="Permalink to this headline">¶</a></h5> 
            <p>Callback function invoked when a SDP offer is received. Developers are expected to invoke this function in order to complete the SDP negotiation. This method has two parameters:</p> 
            <ul class="simple"> 
             <li><strong>sdpOffer</strong>: Description of sdpOffer</li> 
             <li><strong>callback</strong>: It is a function with <em>error</em> and <em>sdpAnswer</em> like parameters. It is called when the remote description has been set successfully.</li> 
            </ul> 
           </div> 
           <div class="section" id="dispose"> 
            <h5>dispose<a class="headerlink" href="#dispose" title="Permalink to this headline">¶</a></h5> 
            <p>This method frees the resources used by WebRtcPeer.</p> 
           </div> 
           <div class="section" id="addicecandidate"> 
            <h5>addIceCandidate<a class="headerlink" href="#addicecandidate" title="Permalink to this headline">¶</a></h5> 
            <p>Callback function invoked when an ICE candidate is received. Developers are expected to invoke this function in order to complete the SDP negotiation. This method has two parameters:</p> 
            <ul class="simple"> 
             <li><strong>iceCandidate</strong>: Literal object with the ICE candidate description</li> 
             <li><strong>callback</strong>: It is a function with <em>error</em> like parameter. It is called when the ICE candidate has been added.</li> 
            </ul> 
           </div> 
           <div class="section" id="getlocalsessiondescriptor"> 
            <h5>getLocalSessionDescriptor<a class="headerlink" href="#getlocalsessiondescriptor" title="Permalink to this headline">¶</a></h5> 
            <p>Using this method the user can get peerconnection’s local session descriptor.</p> 
           </div> 
           <div class="section" id="getremotesessiondescriptor"> 
            <h5>getRemoteSessionDescriptor<a class="headerlink" href="#getremotesessiondescriptor" title="Permalink to this headline">¶</a></h5> 
            <p>Using this method the user can get peerconnection’s remote session descriptor.</p> 
           </div> 
           <div class="section" id="generateoffer"> 
            <h5>generateOffer<a class="headerlink" href="#generateoffer" title="Permalink to this headline">¶</a></h5> 
            <p>Creates an offer that is a request to find a remote peer with a specific configuration.</p> 
           </div> 
          </div> 
         </div> 
         <div class="section" id="how-to-do-screen-share"> 
          <h3>How to do screen share<a class="headerlink" href="#how-to-do-screen-share" title="Permalink to this headline">¶</a></h3> 
          <p>Screen and window sharing depends on the privative module <em>kurento-browser-extensions</em>. To enable its support, you’ll need to install the package dependency manually or provide a <em>getScreenConstraints</em> function yourself on runtime. The option <strong>sendSource</strong> could be <em>window</em> or <em>screen</em> before create a WebRtcEndpoint. If it’s not available, when trying to share the screen or a window content it will throw an exception.</p> 
         </div> 
        </div> 
        <div class="section" id="souce-code"> 
         <h2>Souce code<a class="headerlink" href="#souce-code" title="Permalink to this headline">¶</a></h2> 
         <p>The code is at <a class="reference external" href="https://github.com/kurento/kurento-utils-js">github</a>.</p> 
         <p>Be sure to have <a class="reference internal" href="../glossary.html#term-node-js"><span class="xref std std-term">Node.js</span></a> and <a class="reference internal" href="../glossary.html#term-bower"><span class="xref std std-term">Bower</span></a> installed in your system:</p> 
         <div class="highlight-bash">
          <div class="highlight">
           <pre><span></span>curl -sL https://deb.nodesource.com/setup_4.x <span class="p">|</span> sudo bash -
sudo apt-get install -y nodejs
sudo npm install -g bower
</pre>
          </div> 
         </div> 
         <p>To install the library, it is recommended to do that from the <a class="reference external" href="https://www.npmjs.org/package/kurento-utils">NPM repository</a>:</p> 
         <div class="highlight-bash">
          <div class="highlight">
           <pre><span></span>npm install kurento-utils
</pre>
          </div> 
         </div> 
         <p>Alternatively, you can download the code using Git and install manually its dependencies:</p> 
         <div class="highlight-bash">
          <div class="highlight">
           <pre><span></span>git clone https://github.com/Kurento/kurento-utils
<span class="nb">cd</span> kurento-utils
npm install
</pre>
          </div> 
         </div> 
        </div> 
        <div class="section" id="build-for-browser"> 
         <h2>Build for browser<a class="headerlink" href="#build-for-browser" title="Permalink to this headline">¶</a></h2> 
         <p>After you download the project, to build the browser version of the library you’ll only need to execute the <a class="reference external" href="http://gruntjs.com/">grunt</a> task runner. The file needed will be generated on the <em>dist</em> folder. Alternatively, if you don’t have it globally installed, you can run a local copy by executing:</p> 
         <div class="highlight-bash">
          <div class="highlight">
           <pre><span></span><span class="nb">cd</span> kurento-utils
node_modules/.bin/grunt
</pre>
          </div> 
         </div> 
        </div> 
       </div> 
      </div> 
      <footer> 
       <div class="rst-footer-buttons" role="navigation" aria-label="footer navigation"> 
        <a href="securing-kurento-applications.html" class="btn btn-neutral float-right" title="Securing Kurento Applications"></a>Next 
        <span class="fa fa-arrow-circle-right"></span> 
        <a href="webrtc_statistics.html" class="btn btn-neutral" title="WebRTC Statistics"><span class="fa fa-arrow-circle-left"></span> Previous</a> 
       </div> 
       <hr> 
       <div role="contentinfo"> 
        <p> © Copyright 2016, kurento.org. </p> 
       </div> 
       <a href="https://github.com/snide/sphinx_rtd_theme">Sphinx theme</a> provided by 
       <a href="https://readthedocs.org">Read the Docs</a> 
      </footer> 
     </div> 
    </div> 
   </section> 
  </div> 
  <div class="rst-versions" data-toggle="rst-versions" role="note" aria-label="versions"> 
   <span class="rst-current-version" data-toggle="rst-current-version"> <span class="fa fa-book"> Read the Docs</span> v: stable <span class="fa fa-caret-down"></span> </span> 
   <div class="rst-other-versions"> 
    <dl> 
     <dt>
      Versions
     </dt> 
     <dd>
      <a href="/en/latest/">latest</a>
     </dd> 
     <dd>
      <a href="/en/stable/">stable</a>
     </dd> 
    </dl> 
    <dl> 
     <dt>
      Downloads
     </dt> 
     <dd>
      <a href="//readthedocs.org/projects/doc-kurento/downloads/pdf/stable/">pdf</a>
     </dd> 
     <dd>
      <a href="//readthedocs.org/projects/doc-kurento/downloads/htmlzip/stable/">htmlzip</a>
     </dd> 
     <dd>
      <a href="//readthedocs.org/projects/doc-kurento/downloads/epub/stable/">epub</a>
     </dd> 
    </dl> 
    <dl> 
     <dt>
      On Read the Docs
     </dt> 
     <dd> 
      <a href="//readthedocs.org/projects/doc-kurento/?fromdocs=doc-kurento">Project Home</a> 
     </dd> 
     <dd> 
      <a href="//readthedocs.org/builds/doc-kurento/?fromdocs=doc-kurento">Builds</a> 
     </dd> 
    </dl> 
    <hr> Free document hosting provided by 
    <a href="http://www.readthedocs.org">Read the Docs</a>. 
   </div> 
  </div> 
  <script type="text/javascript">
        var DOCUMENTATION_OPTIONS = {
            URL_ROOT:'../',
            VERSION:'6.6.1',
            COLLAPSE_INDEX:false,
            FILE_SUFFIX:'.html',
            HAS_SOURCE:  true
        };
    </script> 
  <script type="text/javascript" src="https://media.readthedocs.org/javascript/jquery/jquery-2.0.3.min.js"></script> 
  <script type="text/javascript" src="https://media.readthedocs.org/javascript/jquery/jquery-migrate-1.2.1.min.js"></script> 
  <script type="text/javascript" src="https://media.readthedocs.org/javascript/underscore.js"></script> 
  <script type="text/javascript" src="https://media.readthedocs.org/javascript/doctools.js"></script> 
  <script type="text/javascript" src="../_static/examplecode.js"></script> 
  <script type="text/javascript" src="https://media.readthedocs.org/javascript/readthedocs-doc-embed.js"></script> 
  <script type="text/javascript">
      jQuery(function () {
          SphinxRtdTheme.StickyNav.enable();
      });
  </script>  
 </body>
</html>