<!doctype html>
<!--[if IEMobile 7 ]><html class="no-js iem7"><![endif]-->
<!--[if lt IE 9]><html class="no-js lte-ie8"><![endif]-->
<!--[if (gt IE 8)|(gt IEMobile 7)|!(IEMobile)|!(IE)]><!-->
<html class="no-js" lang="en">
 <!--<![endif]-->
 <head> 
  <meta charset="utf-8"> 
  <title>Rails Asset Pipeline - Everything You Should Know </title> 
  <meta name="author" content="Launch School"> 
  <meta name="description" content="A basic introduction to the philosophy and usage of the Rails asset pipeline."> 
  <!-- http://t.co/dKP3o1e --> 
  <meta name="HandheldFriendly" content="True"> 
  <meta name="MobileOptimized" content="320"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <link rel="canonical" href="https://launchschool.com/blog/rails-asset-pipeline-best-practices"> 
  <link href="/blog/favicon.ico" rel="icon"> 
  <link href="/blog/stylesheets/screen.css" media="screen, projection" rel="stylesheet" type="text/css"> 
  <link href="/blog/stylesheets/data-table.css" media="screen, projection" rel="stylesheet" type="text/css"> 
  <link href="/blog/atom.xml" rel="alternate" title="Launch School Blog" type="application/atom+xml"> 
  <script src="/blog/javascripts/modernizr-2.0.js"></script> 
  <link rel="stylesheet" media="screen" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css"> 
  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script> 
  <script src="//use.typekit.net/ojn6sam.js"></script> 
  <script>try{Typekit.load();}catch(e){}</script> 
  <script>!window.jQuery && document.write(unescape('%3Cscript src="./javascripts/lib/jquery.min.js"%3E%3C/script%3E'))</script> 
  <script src="/blog/javascripts/octopress.js" type="text/javascript"></script> 
  <script src="/blog/javascripts/jquery.cookie.js" type="text/javascript"></script> 
  <script>
    $.cookie('_blog', 'true', { expires: 90, path: '/' });
  </script> 
  <!--Fonts from Google"s Web font directory at http://google.com/webfonts --> 
  <link href="//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic" rel="stylesheet" type="text/css"> 
  <link href="//fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet" type="text/css"> 
  <link href="//fonts.googleapis.com/css?family=Fjalla+One" rel="stylesheet" type="text/css"> 
  <link href="//cdnjs.cloudflare.com/ajax/libs/video.js/5.13.0/video-js.min.css" rel="stylesheet" type="text/css"> 
  <style>
  article video { border: none; }
  .video-js {
    background-color: #fff;
    padding-top: 56.25%;
    max-width: 100%;
    height: auto;
  }
  .vjs-fullscreen { padding-top: 0px }
  .video-js .vjs-big-play-button {
    left: 50%;
    margin-left: -45px;
    top: 50%;
    margin-top: -22px;
  }
  .video-js .vjs-poster {
    background-color: #fff;
  }
</style> 
  <script src="/blog/assets/audiojs/audio.min.js" type="text/javascript"></script> 
  <script>
  audiojs.events.ready(function() {
    var as = audiojs.createAll();
  });
</script> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-37357872-2', 'launchschool.com', {'name': 'secondtracker'});
  ga('secondtracker.require', 'displayfeatures');
  ga('secondtracker.require', 'linkid', 'linkid.js');
  ga('secondtracker.send', 'pageview');
</script> 
 </head> 
 <body> 
  <div class="wrapper"> 
   <div class="wrapper-inside"> 
    <header role="banner">
     <hgroup> 
      <a href="https://launchschool.com/?utm_source=blog&amp;utm_medium=banner&amp;utm_campaign=blog%20banner"> <img src="/blog/images/launch-logo.svg" alt="LaunchSchool - An Online School for Developers"> </a> 
      <a href="/blog?utm_source=blog&amp;utm_medium=banner&amp;utm_campaign=blog%20banner"> <img src="/blog/images/header-slash.jpg" alt="/"> <h2>Blog</h2> </a> 
     </hgroup> 
    </header> 
    <nav role="navigation">
     <ul class="subscription" data-subscription="rss"> 
      <li><a href="/blog/atom.xml" rel="subscribe-rss" title="subscribe via RSS">RSS</a></li> 
     </ul> 
     <form action="https://google.com/search" method="get"> 
      <fieldset role="search"> 
       <input type="hidden" name="q" value="site:launchschool.com/blog"> 
       <input class="search" type="text" name="q" results="0" placeholder="SEARCH"> 
      </fieldset> 
     </form> 
    </nav> 
    <div id="main"> 
     <div id="content"> 
      <div id="post-content"> 
       <article class="hentry" role="article"> 
        <header> 
         <h1 class="entry-title">Everything You Should Know About the Rails Asset Pipeline</h1> 
         <p class="meta"> </p> 
        </header> 
        <div class="entry-content">
         <h2>What is the asset pipeline?</h2> 
         <p>If you’re building a Rails application, you’ve probably heard of the asset pipeline. The asset pipeline can be thought of as the tools and mechanisms by which Javascript files, stylesheets, and images are processed and prepared for use by the browser. These processes can minify and compress assets, as well as pre-process assets that are written in other languages such as Coffeescript or Sass.</p> 
         <!--more--> 
         <p>The asset pipeline was created to solve a variety of problems related to static assets. One such issue is that each asset specified separately in the HTML markup must be retrieved separately, resulting in a higher number of HTTP requests and, in the end, a longer load time. Raw Javascript and CSS files can also waste a lot of bandwidth with comments, extra white space, and long variable names. Another issue that comes up involves caching. When you serve up a Javascript file from your server, for example, the browser will automatically cache that file for a period of time. That improves page load time, but what if that asset changes at a later point in time? The browser won’t know about it, so it will continue to use the cached asset until its cache life has expired. Finally, languages such as Coffeescript, Sass, Less, and Erb have made it easier to organize and write Javascript and CSS, but the browser can’t interpret them directly, so a pre-processor is needed to convert those files into their appropriate counterparts before they are sent off to the browser.</p> 
         <p>The asset pipeline, in its benevolence, can solve all of the above problems when used properly. It can compile multiple assets into one, minify and compress assets, provide digesting of assets to avoid caching issues, and can pre-process alternative languages and turn them into Javascript and CSS.</p> 
         <p>This post covers a variety of topics related to the asset pipeline:</p> 
         <ul> 
          <li>the basics of how to use the asset pipeline</li> 
          <li>best practices for structuring where to put your assets</li> 
          <li>how to use the precompile array to specify what files are processed by the asset pipeline</li> 
          <li>how Sass and Coffeescript can be leveraged</li> 
          <li>how to use Rails asset helper methods, and</li> 
          <li>some gotchas</li> 
         </ul> 
         <h2>Basic Usage</h2> 
         <p>There are two basic ways that the asset pipeline is used:</p> 
         <ol> 
          <li>When running a server in development mode, it automatically pre-processes and prepares your assets on-the-fly.</li> 
          <li>In production mode, you’ll probably use it to pre-process, versionize, and compress and compile your assets. You can do so by running the following command:</li> 
         </ol> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
              <td class="code"><pre><code class="bash"><span class="line">bundle <span class="nb">exec </span>rake assets:precompile </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>This will create (by default) an <code>assets</code> directory in your <code>public/</code> folder. It will then add all the compressed and compiled files into that directory, in the appropriate formats and with the new digested versions. You can then set up Nginx or Apache to server those files directly so that Rails doesn’t have to deliver them (and run the on-the-fly preprocessing, etc.) itself.</p> 
         <p>Remember that defaults can be changed, so if things aren’t working as expected, check your application configuration file in <code>config/application.rb</code>. In Rails 4, asset handling is typically configured in <code>config/initializers/assets.rb</code>.</p> 
         <h2>File Structure</h2> 
         <p>It’s important to organize your assets in a way that is understandable to you, and facilitates the existing functionality of the asset pipeline. The first thing you should know is that all of your custom Javascript, stylesheets, and images should go in the <code>app/assets/</code> directory. By default, there is a folder each for <code>javascripts</code>, <code>stylesheets</code>, and <code>images</code>. <a href="https://github.com/rails/rails/blob/98c3586415150e90cea49003a0be6c5eef84a370/actionview/lib/action_view/helpers/asset_url_helper.rb#L170">You can also add</a> <code>fonts</code>, <code>audios</code>, and <code>videos</code> to the <code>app/assets/</code> directory for those types of assets. All third-party code that you are using (e.g. jQuery, backbone.js, etc.) should be placed in the <code>vendor/assets/</code> directory:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
              <td class="code"><pre><code class="bash"><span class="line">rails-app/ </span><span class="line"> app/ </span><span class="line"> assets/ </span><span class="line"> images/ <span class="c"># Image assets</span> </span><span class="line"> javascripts/ <span class="c"># Custom Javascript/coffeescript</span> </span><span class="line"> stylesheets/ <span class="c"># Custom CSS/Sass</span> </span><span class="line"> ... </span><span class="line"> vendor/ </span><span class="line"> assets/ </span><span class="line"> javascripts/ <span class="c"># Javascript libraries, etc.</span> </span><span class="line"> stylesheets/ <span class="c"># Vendor themes, javascript library themes, etc.</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>Since your web server will automatically server static files from the <code>public/</code> directory, why shouldn’t all Javascript, image, and stylesheet assets be placed there? For one, nothing in the <code>public</code> folder will get pre-processed, compiled, or compressed automatically, so by putting assets there, you are completely bypassing the asset pipeline and losing all of its benefits. When you put assets there, you also lose the ability to easily reference them within your Rails code. You could have a view, for example, that has the following code:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td>
              <td class="code"><pre><code class="haml"><span class="line"># app/assets/images/logo.png </span><span class="line"><span class="p">=</span> <span class="n">image_tag</span><span class="p">(</span><span class="s1">'logo'</span><span class="p">)</span> </span><span class="line"> </span><span class="line"># Outputs something like &lt;img src="/assets/logo-[hash].png" /&gt; </span><span class="line"> </span><span class="line"># public/images/logo.png </span><span class="line"><span class="p">=</span> <span class="n">image_tag</span><span class="p">(</span><span class="s1">'/images/logo.png'</span><span class="p">)</span> </span><span class="line"> </span><span class="line"># Outputs something like </span><span class="line"># &lt;img src="/images/logo.png" /&gt; </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>In the second scenario (<code>public/images/logo.png</code>), the site will only work if it is delivered from the base directory. It also can’t take advantage of the asset pipeline’s versioning of the file.</p> 
         <h2>Precompilation</h2> 
         <p>You may now be wondering if everything you put in the <code>app/assets/javascripts/</code> folder will be automatically precompiled for your app. Fortunately, the asset pipeline provides a way to specify which files are compiled, and in which order. By default, application.css and application.js (or their sass/coffeescript equivalents), along with all non-Javascript, non-CSS assets are included. To include a CSS or Javascript file other than application.css and application.js, you have to require it in one of two ways:</p> 
         <ol> 
          <li>Add it to the precompile array in <code>config/initializers/assets.rb</code> (Rails 4) or your application config file (e.g. <code>config/application.rb</code>), or</li> 
          <li>Include the file in your asset’s manifest or one of its sub-file’s manifest.</li> 
         </ol> 
         <p>The first option looks like this:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td>
              <td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># In config/initializers/assets.rb</span> </span><span class="line"><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">precompile</span> <span class="o">+=</span> <span class="sx">%w( some-other-file.js even-another.css )</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>This option is best for files that it makes sense to only include on certain pages, and should not be included on others. For example, if you have a portion of your site that will be used as an iframe embedded widget, you may only want <code>widget.js</code> and <code>widget.css</code>, or similar, to be used on that page. Those files would have to be added to the precompile array as shown above.</p> 
         <p>The second option is what should be used most of the time, and allows your Javascript and CSS files to be compiled into one application.js and one application.css file. The manifest is written at the top of the applicable asset.</p> 
         <p>In coffeescript, it looks like this:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
              <td class="code"><pre><code class="coffeescript"><span class="line"><span class="c1"># In application.coffee</span> </span><span class="line"><span class="c1">#</span> </span><span class="line"><span class="c1">#= require jquery</span> </span><span class="line"><span class="c1">#= require jquery_ujs</span> </span><span class="line"><span class="c1">#= require_tree .</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>The above manifest will include jQuery, the Rails jQuery unobtrusive scripting adapter (jquery_ujs), and all the files in the current tree (i.e. <code>app/assets/javascript/*</code>). Note that <code>require_tree</code> does not compile assets recursively through directories. If you have a folder of files that you want to include, you’ll have to add that to the manifest as well:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td>
              <td class="code"><pre><code class="coffeescript"><span class="line"><span class="c1">#= require_tree ./components</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>One more manifest directive is <code>require_self</code>, which is used to include the current file’s Javascript at that point in the chain. The above, with a <code>require_self</code> can be written in a <code>.js</code> file as follows:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
              <td class="code"><pre><code class="javascript"><span class="line"><span class="c1">// In application.js</span> </span><span class="line"><span class="c1">//</span> </span><span class="line"><span class="c1">//= require jquery</span> </span><span class="line"><span class="c1">//= require jquery_ujs</span> </span><span class="line"><span class="c1">//= require_tree .</span> </span><span class="line"><span class="c1">//= require_tree ./components</span> </span><span class="line"><span class="c1">//= require_self</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>The Sass/CSS manifests use the same basic format, but with the appropriate comment style:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td>
              <td class="code"><pre><code class="css"><span class="line"><span class="c">/** In application.css</span> </span><span class="line"><span class="c"> *</span> </span><span class="line"><span class="c"> *= require reset</span> </span><span class="line"><span class="c"> *= require global</span> </span><span class="line"><span class="c"> *= require layout</span> </span><span class="line"><span class="c"> */</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>Note that when using Sass, you’ll need to use <a href="http://sass-lang.com/documentation/file.SASS_REFERENCE.html#import">its <code>@import</code> rule</a> to take advantage of variables and mixins, as each file compiled by the manifest has its own scope.</p> 
         <p>Be careful with your usage of the <code>require_tree</code> directive. Assets in the tree will be included in alphabetical order, which means that if a file that starts with “a” depends on a file that starts with “z”, you could run into issues where the necessary pieces are not available when the Javascript is evaluated by the browser. This issue can be avoided by using the appropriate <code>jQuery(document).ready()</code>, or <code>window.onload</code> guards, by specifying an order manually, or be prefixing the files with numbers like <code>01_</code>, <code>02_</code>:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
              <td class="code"><pre><code class="coffeescript"><span class="line"><span class="c1"># application.js</span> </span><span class="line"><span class="c1"># Note that the `.js` isn't needed at the end of the filename.</span> </span><span class="line"><span class="c1">#</span> </span><span class="line"><span class="c1">#= require subfolder/library</span> </span><span class="line"><span class="c1">#= require subfolder/depends-on-library</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>Remember that any precompiled Javascript or CSS file can contain a manifest at the top, so you can use subfolders’ files to simplify your top-level manifest.</p> 
         <h2>Sass and Coffescript, and Rails Asset Helpers</h2> 
         <p>I’ve mentioned Sass and Coffeescript a bit in the above sections, but I haven’t yet gone into what they are. If you’re already familiar with them, feel free to skip on down to the “Rails Asset Helpers” section.</p> 
         <h3>Sass and Coffeescript</h3> 
         <p><a href="http://sass-lang.com/">Sass</a> and <a href="http://coffeescript.org/">Coffeescript</a> are languages that use preprocessors to transform their syntax into CSS and Javascript, respectively. There are several other preprocessed languages such as <a href="http://www.typescriptlang.org/">Typescript</a> and <a href="http://lesscss.org/">Less</a>, but Sass and Coffeescript are included by default with Rails, and are probably the most popular. I won’t go into extensive detail here on these languages, so please check out the links above for more information.</p> 
         <p>From my experience, while Sass and Coffeescript provide a lot of syntactic sugar (pretty code features), the fact that exceptions are thrown for invalid code in the preprocessing stage is enough to warrant using them. Coffeescript automatically wraps your code per file and adds the <code>var</code> keyword to your local variables, thus preventing a lot of scope headaches that can happen more easily in vanilla Javascript.</p> 
         <p>For example, the following Coffeescript code:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td>
              <td class="code"><pre><code class="coffeescript"><span class="line"><span class="nx">$</span> <span class="nf">-&gt;</span> </span><span class="line"> <span class="nx">$</span><span class="p">(</span><span class="s">'#element'</span><span class="p">).</span><span class="nx">on</span> <span class="s">'click'</span><span class="p">,</span> <span class="nf">-&gt;</span> </span><span class="line"> <span class="nv">state = </span><span class="s">'clicked'</span> </span><span class="line"> <span class="nb">window</span><span class="p">.</span><span class="nv">state = </span><span class="s">'clicked'</span> </span><span class="line"> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">'element clicked'</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>is converted to the following Javascript:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td>
              <td class="code"><pre><code class="javascript"><span class="line"><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> </span><span class="line"> <span class="nx">$</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span> </span><span class="line"> <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="s1">'#element'</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">'click'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span> </span><span class="line"> <span class="kd">var</span> <span class="nx">state</span><span class="p">;</span> </span><span class="line"> <span class="nx">state</span> <span class="o">=</span> <span class="s1">'clicked'</span><span class="p">;</span> </span><span class="line"> <span class="nb">window</span><span class="p">.</span><span class="nx">state</span> <span class="o">=</span> <span class="s1">'clicked'</span><span class="p">;</span> </span><span class="line"> <span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'element clicked'</span><span class="p">);</span> </span><span class="line"> <span class="p">});</span> </span><span class="line"> <span class="p">});</span> </span><span class="line"> </span><span class="line"><span class="p">}).</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>When the preprocessor processes the file, it automatically wraps the code in an anonymous function (<code>(function() {}).call(this)</code>) and adds the <code>var</code> keyword to the first usage of <code>state</code>. Note that if you want to use the global scope, you have to specify that by prefixing <code>window.</code>.</p> 
         <p>There is a lot more to Coffeescript, but the automatic scoping has been extremely helpful for me personally in preventing hard-to-find bugs.</p> 
         <h3>Rails Asset Helpers</h3> 
         <p>Another great feature that you can only get by using Sass in your Rails project is <a href="http://guides.rubyonrails.org/v4.2.0/asset_pipeline.html#css-and-sass">the asset path helpers</a>. When referencing other assets in your Sass, you can use the following syntax to get the appropriate paths:</p> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td>
              <td class="code"><pre><code class="sass"><span class="line"><span class="nc">.logo</span> <span class="err">{</span> </span><span class="line"> <span class="na">background-image</span><span class="o">:</span> <span class="nf">image-url</span><span class="p">(</span><span class="s2">"logo.png"</span><span class="p">)</span><span class="err">;</span> </span><span class="line"><span class="err">}</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <p>The helpers <code>image-path</code>, <code>asset-url</code>, and <code>asset-path</code> can also be used. The <code>-url</code> helpers wrap the path with <code>url()</code>.</p> 
         <h3>Erb in Assets</h3> 
         <p>The asset pipeline allows you to evaluate erb code in your CSS and Javascript assets by suffixing the filename with .erb (e.g. <code>application.js.erb</code> or <code>application.scss.erb</code>). While this can be useful for adding asset paths to your Javascript, on the whole I don’t recommend using this feature. It adds another preprocessing step to the file, thereby increasing the time it takes to precompile. It also can lead to bad habits. You might be tempted to add code that doesn’t make sense at compile time, like translating strings. Those strings would only be translated at compile time, thus negating the whole purpose of translating them. The only reason to use Erb in a Javascript file should be to use the <code>asset_path</code> helper as discussed <a href="http://guides.rubyonrails.org/v4.2.0/asset_pipeline.html#javascript-coffeescript-and-erb">in the guide</a>.</p> 
         <h2>Asset Pipeline Gotchas</h2> 
         <p>The following are some gotchas and tidbits that can be helpful in developing your Rails application’s assets.</p> 
         <ul> 
          <li>How do I add global data for my Javascript to use? 
           <ul> 
            <li>The <a href="https://github.com/gazay/gon">gon gem</a> can be used to insert globally-scoped data to the page for your Javascript to consume. This is great for things like providing the current user’s ID or site settings.</li> 
           </ul> </li> 
          <li>Where should I augment the precompile array? 
           <ul> 
            <li>In Rails 4, you should augment the array in <code>config/initializers/assets.rb</code>, and in Rails 3, you should do so in <code>config/application.rb</code>. Using assets.rb or application.rb sets the precompile array for all environments so that if you add an environment (perhaps <code>staging</code>), you will not need to augment the precompile array specifically for that new environment. 
             <ul> 
              <li>assets.rb: <code>Rails.application.config.assets.precompile += %w( widget.css widget.js )</code></li> 
              <li>application.rb: <code>config.assets.precompile += %w( widget.js widget.css )</code></li> 
             </ul> </li> 
           </ul> </li> 
          <li>When should I precompile assets separately by augmenting the precompile array? 
           <ul> 
            <li>This should rarely be done. Most of the time, the only reason you’d want to do this is if the asset is included alone on a special page where you don’t want the rest of the assets, such as an iframe-embedded widget. Use your application.js and application.css manifests to pull in your assets.</li> 
           </ul> </li> 
          <li>Should I allow Rails to serve static files? 
           <ul> 
            <li>Yes. This follows <a href="http://12factor.net">the Twelve-Factor App guidelines</a> and prevents errors if you forgot to include a file in the precompile array or if you forgot to precompile.</li> 
            <li>Set <code>config.serve_static_assets = true</code> in Rails 3, and <code>config.serve_static_files = true</code> in Rails 4.</li> 
           </ul> </li> 
          <li>How can I ensure my Javascript/CSS is well-written? 
           <ul> 
            <li>Writing high-quality Javascript and CSS (or Coffeescript and Sass) can take a lot of time and experience, but one thing that has greatly helped me is using a <a href="http://en.wikipedia.org/wiki/Lint_(software">linter</a>). Some IDEs, such as Sublime Text, have plugins that integrate linters. I personally use <a href="http://www.sublimelinter.com/en/latest/">the SublimeLinter package</a>. If you’re going to write plain-old Javascript and CSS, you should definitely be using a linter.</li> 
           </ul> </li> 
          <li>How do I change the directory where my precompiled assets are placed? 
           <ul> 
            <li>You can change the <code>config.asset.prefix</code> setting to another directory, such as <code>/static</code>.</li> 
            <li>Change the asset prefix in <code>development.rb</code> if you want to track precompiled assets in git for production use.</li> 
            <li>Change the asset prefix globally if you want to use the <code>/assets</code> path namespace for your controllers.</li> 
           </ul> </li> 
          <li>How do I serve static assets with Nginx? 
           <ul> 
            <li>The basic nginx directive should look like this (see the <a href="http://guides.rubyonrails.org/v4.2.0/asset_pipeline.html#precompiling-assets">Precompiling Assets</a> section of the Rails guide for more information):</li> 
           </ul> </li> 
         </ul> 
         <figure class="code">
          <figcaption>
           <span></span>
          </figcaption>
          <div class="highlight">
           <table>
            <tbody>
             <tr>
              <td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td>
              <td class="code"><pre><code class="nginx"><span class="line"><span class="k">location</span> <span class="p">~</span> <span class="sr">^/assets/</span> <span class="p">{</span> </span><span class="line"> <span class="kn">expires</span> <span class="s">1y</span><span class="p">;</span> </span><span class="line"> <span class="kn">add_header</span> <span class="s">Cache-Control</span> <span class="s">public</span><span class="p">;</span> </span><span class="line"> </span><span class="line"> <span class="kn">add_header</span> <span class="s">ETag</span> <span class="s">""</span><span class="p">;</span> </span><span class="line"> <span class="kn">break</span><span class="p">;</span> </span><span class="line"><span class="p">}</span> </span></code></pre></td>
             </tr>
            </tbody>
           </table>
          </div>
         </figure> 
         <ul> 
          <li>What is manifest.yml or manifest-[digest].json? 
           <ul> 
            <li>The manifest.yml (Rails 3) or manifest-[digest].json (Rails 4) files are created automatically when you precompile your assets with <code>rake assets:precompile</code>. They contain information about which files are to be used by your app.</li> 
           </ul> </li> 
          <li>What types of files should NOT be included in the asset pipeline? 
           <ul> 
            <li>You will usually want to keep large files (videos, large numbers of PDF downloads, etc.) in a separate repository or in a cloud file manager, such as <a href="http://aws.amazon.com/s3/">AWS S3</a>. The files can then be referenced from your app, but don’t have to bog down your git repository.</li> 
           </ul> </li> 
          <li>How can I get my Rails 3 assets to compile faster? 
           <ul> 
            <li>Use the <code>turbo-sprockets-rails3</code> gem.</li> 
           </ul> </li> 
          <li>Can I use a CDN (content delivery network) for my assets? 
           <ul> 
            <li>Yes! The digest, or fingerprint, suffixed on each asset makes them work great with CDNs. Set up your CDN to serve assets from your Rails app, then set the <code>config.action_controller.asset_host</code> configuration to the appropriate domain for your CDN (e.g. <code>config.action_controller.asset_host = 'mycdn.fictional-cdn.com'</code>). I recommend using environment variables to set this: <code>config.action_controller.asset_host = ENV['CDN_HOST']</code>.</li> 
           </ul> </li> 
         </ul> 
         <h2>Wrapping it up</h2> 
         <p>Using the asset pipeline properly can improve the overall quality of your application in terms of performance, resilience, and code cleanliness. By using the asset pipeline’s features, you can automatically overcome some of the biggest issues related to coding and delivering static assets.</p> 
        </div> 
        <footer> 
         <p class="meta"> <time datetime="2014-12-09T05:12:09+00:00" pubdate data-updated="true">Dec 9<span>th</span>, 2014</time> <span class="bullet-separator">•</span> <span class="byline author vcard">by <span class="fn">Dan Rasband</span></span> </p> 
        </footer> 
       </article> 
      </div> 
      <aside class="sidebar"> 
       <script src="/blog/javascripts/newsletter.js"></script> 
       <section id="stay_informed"> 
        <h2>Get Our Newsletter</h2> 
        <p> Beginner focused news, tutorials and coding tips. We won't spam or waste your time. </p> 
        <span class="alert-box success subscribed-successfully">You have subscribed successfully</span> 
        <span class="alert-box alert invalid-email">Please enter a valid email address</span> 
        <span class="alert-box alert subscription-failed">There was a problem, please try again</span> 
        <form> 
         <input type="text" placeholder="Your email address"> 
         <input type="submit" value="Subscribe"> 
        </form> 
       </section> 
       <script>
  if (/subscribed=1/.test(window.location.search)) {
    $('.subscribed-successfully').css({ display: 'block' });
  }
</script> 
       <section> 
        <h2>See What Our Community is Talking About</h2> 
        <p> From soft topics to in-depth tutorials, members of the Launch School community have all sorts of useful information to share. <br> <br> <a class="post" href="https://medium.com/launch-school">Community Publications on Medium</a> </p> 
       </section> 
       <section id="share_on"> 
        <h2>Share on</h2> 
        <ul> 
         <li class="twitter"> <a href="https://twitter.com/intent/tweet?text=Everything+You+Should+Know+About+the+Rails+Asset+Pipeline&amp;url=https%3A%2F%2Flaunchschool.com%2Fblog%2Frails-asset-pipeline-best-practices&amp;via=launchschool"><i class="fa fa-twitter"></i></a> </li> 
         <li class="google-plus"> <a href="https://plus.google.com/share?url=https%3A%2F%2Flaunchschool.com%2Fblog%2Frails-asset-pipeline-best-practices" onclick="javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><i class="fa fa-google-plus"></i></a> </li> 
         <li class="linkedin"> <a href="https://www.linkedin.com/cws/share?url=https%3A%2F%2Flaunchschool.com%2Fblog%2Frails-asset-pipeline-best-practices" onclick="javascript:window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><i class="fa fa-linkedin"></i></a> </li> 
        </ul> 
       </section> 
       <section> 
        <h2>Popular Posts</h2> 
        <ul id="popular_posts"> 
         <li class="post"> <a href="/blog/webinar-our-secret-sauce-mastery-based-learning?utm_source=blog&amp;utm_medium=sidebar&amp;utm_campaign=blog%20sidebar%20mastery%20curriculum">Our Secret Sauce: Mastery Based Learning</a> </li> 
         <li class="post"> <a href="/blog/categories/meet-a-student/?utm_source=blog&amp;utm_medium=sidebar&amp;utm_campaign=blog%20sidebar%20meet%20a%20student">Meet a Student Podcast Series</a> </li> 
         <li class="post"> <a href="/blog/a-glimpse-into-the-launch-school-curriculum?utm_source=blog&amp;utm_medium=sidebar&amp;utm_campaign=blog%20sidebar%20glimpse%20curriculum">A Glimpse Into the Launch School Curriculum</a> </li> 
         <li class="post"> <a href="/blog/how-to-launch-a-career-in-software-development?utm_source=blog&amp;utm_medium=sidebar&amp;utm_campaign=blog%20sidebar%20launch%20career">How to Launch a Career in Software Development</a> </li> 
         <li class="post"> <a href="/blog/live-session-beginning-ruby?utm_source=blog&amp;utm_medium=sidebar&amp;utm_campaign=blog%20sidebar%20beginning%20ruby">The "Beginning Ruby" Live Session Series (6 parts)</a> </li> 
        </ul> 
       </section> 
      </aside> 
     </div> 
    </div> 
    <div id="fb-root"></div> 
    <script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) {return;}
  js = d.createElement(s); js.id = id; js.async = true;
  js.src = "//connect.facebook.net/en_US/all.js#appId=212934732101925&xfbml=1";
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script> 
    <script type="text/javascript">
    (function() {
      var script = document.createElement('script'); script.type = 'text/javascript'; script.async = true;
      script.src = 'https://apis.google.com/js/plusone.js';
      var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(script, s);
    })();
  </script> 
    <script type="text/javascript">
    (function(){
      var twitterWidgets = document.createElement('script');
      twitterWidgets.type = 'text/javascript';
      twitterWidgets.async = true;
      twitterWidgets.src = '//platform.twitter.com/widgets.js';
      document.getElementsByTagName('head')[0].appendChild(twitterWidgets);
    })();
  </script> 
   </div> 
   <footer role="contentinfo">
    <div class="wrapper-inside"> 
     <nav class="nav clearfix"> 
      <ul class="links"> 
       <li><a href="/about_us">About Us</a></li> 
       <li><a href="/faq">Faq</a></li> 
      </ul> 
      <ul class="social-buttons"> 
       <a href="mailto:hello@launchschool.com"> <li class="email"> <i class="fa fa-envelope"></i> </li> </a> 
       <a href="https://www.facebook.com/launchschoolonline/"> <li class="facebook"> <i class="fa fa-facebook"></i> </li> </a> 
       <a href="https://twitter.com/launchschool"> <li class="twitter"> <i class="fa fa-twitter"></i> </li> </a> 
      </ul> 
     </nav> 
    </div> 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/video.js/5.13.0/video.min.js"></script> 
    <script src="/blog/javascripts/videojs.hotkeys.min.js" type="text/javascript"></script> 
    <script>
  $(document).ready(function() {
    $('.video-js').each(function(idx) {
      if (this.id === "") {
        this.id = 'video_' + Date.now();
      }

      // for each videojs element, we need to activate the video-js-hotkeys plugin
      videojs(this.id).ready(function() {
        this.hotkeys({
          alwaysCaptureHotkeys: true,
          enableVolumeScroll: false
        });
      });
    });
  });
</script> 
   </footer> 
  </div>   
 </body>
</html>