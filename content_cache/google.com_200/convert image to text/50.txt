<!doctype html>
<html>
 <head> 
  <meta http-equiv="Content-Type" content="text/html" charset="UTF-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
  <title>OpenCV tutorial: Computer vision with Node.js | @RisingStack</title> 
  <meta name="description" content="With this OpenCV tutorial, you can learn how to work with computer vision in Node.js. The article explains the basic principles with real-life use cases."> 
  <meta name="HandheldFriendly" content="True"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <link rel="stylesheet" type="text/css" href="/assets/css/dependencies.css?v=1da1d75271"> 
  <link rel="stylesheet" type="text/css" href="/assets/css/style.css?v=1da1d75271"> 
  <meta name="description" content="With this OpenCV tutorial, you can learn how to work with computer vision in Node.js. The article explains the basic principles with real-life use cases."> 
  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon"> 
  <link rel="canonical" href="https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js/"> 
  <meta name="referrer" content="no-referrer-when-downgrade"> 
  <link rel="amphtml" href="https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js/amp/"> 
  <meta property="og:site_name" content="RisingStack Community"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="OpenCV tutorial: Computer vision with Node.js | @RisingStack"> 
  <meta property="og:description" content="With this OpenCV tutorial, you can learn how to work with computer vision in Node.js. The article explains the basic principles with real-life use cases."> 
  <meta property="og:url" content="https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js/"> 
  <meta property="og:image" content="https://blog-assets.risingstack.com/2017/04/opencv-tutorial-node-js-computer-vision.png"> 
  <meta property="article:published_time" content="2017-01-12T08:47:58.000Z"> 
  <meta property="article:modified_time" content="2017-04-20T11:23:50.000Z"> 
  <meta property="article:tag" content="node.js"> 
  <meta property="article:tag" content="tutorial"> 
  <meta property="article:tag" content="opencv"> 
  <meta name="twitter:card" content="summary_large_image"> 
  <meta name="twitter:title" content="OpenCV tutorial: Computer vision with Node.js | @RisingStack"> 
  <meta name="twitter:description" content="With this OpenCV tutorial, you can learn how to work with computer vision in Node.js. The article explains the basic principles with real-life use cases."> 
  <meta name="twitter:url" content="https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js/"> 
  <meta name="twitter:image" content="https://blog-assets.risingstack.com/2017/04/opencv-tutorial-node-js-computer-vision.png"> 
  <meta name="twitter:label1" content="Written by"> 
  <meta name="twitter:data1" content="Tomáš Stankovi?"> 
  <meta name="twitter:label2" content="Filed under"> 
  <meta name="twitter:data2" content="node.js, tutorial, opencv"> 
  <meta name="twitter:site" content="@risingstack"> 
  <meta name="twitter:creator" content="@TomasStankovic"> 
  <meta property="og:image:width" content="1200"> 
  <meta property="og:image:height" content="630"> 
  <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "RisingStack Community",
        "logo": {
            "@type": "ImageObject",
            "url": "https://community.risingstack.com/favicon.ico",
            "width": 60,
            "height": 60
        }
    },
    "author": {
        "@type": "Person",
        "name": "Tomáš Stankovi?",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog-assets.risingstack.com/2017/01/tom.jpg",
            "width": 100,
            "height": 67
        },
        "url": "https://community.risingstack.com/author/tomas/",
        "sameAs": [
            "http://www.slinto.sk",
            "https://twitter.com/TomasStankovic"
        ]
    },
    "headline": "OpenCV tutorial: Computer vision with Node.js | @RisingStack",
    "url": "https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js/",
    "datePublished": "2017-01-12T08:47:58.000Z",
    "dateModified": "2017-04-20T11:23:50.000Z",
    "image": {
        "@type": "ImageObject",
        "url": "https://blog-assets.risingstack.com/2017/04/opencv-tutorial-node-js-computer-vision.png",
        "width": 1200,
        "height": 630
    },
    "keywords": "node.js, tutorial, opencv",
    "description": "With this OpenCV tutorial, you can learn how to work with computer vision in Node.js. The article explains the basic principles with real-life use cases.",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "https://community.risingstack.com/"
    }
}
    </script> 
  <script type="text/javascript" src="/public/ghost-sdk.min.js?v=1da1d75271"></script> 
  <script type="text/javascript">
ghost.init({
	clientId: "ghost-frontend",
	clientSecret: "e8df0d7e6356"
});
</script> 
  <meta name="generator" content="Ghost 1.9"> 
  <link rel="alternate" type="application/rss+xml" title="RisingStack Community" href="https://community.risingstack.com/rss/"> 
  <script>var disqus="risingstack-community";</script> 
 </head> 
 <body class="post-template tag-node-js tag-tutorial tag-opencv"> 
  <section id="wrapper"> 
   <div id="ajax-container"> 
    <nav id="nav" class="nav"> 
     <div class="logo-mission"> 
      <div class="nav-logo"> 
       <a href=""> <img src="https://blog-assets.risingstack.com/2017/07/logo-white.svg" alt="Logo"> </a> 
      </div> 
     </div> 
     <button id="btn-nav"></button> 
     <span class="mission-statement">A place to learn Node.js</span> 
     <div class="nav-menu"> 
      <ul class="menulist"> 
       <li><a class="titleHidden" href="https://community.risingstack.com" title="homepage">Home</a></li> 
       <li class="dropdown-toggle"> <a class="titleHidden" href="#" title="Services">Services<span class="caret"></span></a> 
        <ul class="dropdown-menu" role="menu"> 
         <li><a class="titleHidden" target="_blank" href="https://risingstack.com/nodejs-development-consulting-services?utm_source=rscommunity&amp;utm_medium=header" title="Node.js Services">Node.js Consulting &amp; Development</a></li> 
         <li><a class="titleHidden" target="_blank" href="https://risingstack.com/nodejs-support?utm_source=rscommunity&amp;utm_medium=header" title="Node.js Support">24 / 7 Node.js Support</a></li> 
         <li><a class="titleHidden" target="_blank" href="https://risingstack.com/kubernetes-consulting-training?utm_source=rscommunity&amp;utm_medium=header" title="Kubernetes Consulting">Kubernetes Consulting</a></li> 
        </ul> </li> 
       <li class="dropdown-toggle"> <a class="titleHidden" href="#" title="Trainings">Trainings<span class="caret"></span></a> 
        <ul class="dropdown-menu" role="menu"> 
         <li><a class="titleHidden" target="_blank" href="https://blog.risingstack.com/training-node-js-fundamentals/" title="Node.js Fundamentals">Node.js Fundamentals</a></li> 
         <li><a class="titleHidden" target="_blank" href="https://blog.risingstack.com/training-securing-node-js-web-applications/" title="Node + Microservices">Node + Microservices</a></li> 
         <li><a class="titleHidden" target="_blank" href="https://blog.risingstack.com/training-building-microservices-node-js/" title="Securing Node Applications">Securing Node Applications</a></li> 
        </ul> </li> 
       <li><a class="titleHidden" target="_blank" href="https://risingstack.com/resources?utm_source=rscommunity&amp;utm_medium=header" title="Resources">Resources</a></li> 
       <li class="submit-rss"> <a class="node-hero-cta" href="/submit/">Submit Your Article</a> <a class="rss" href="https://community.risingstack.com/rss/"><i class="icon-rss"></i></a> </li> 
      </ul> 
     </div> 
    </nav> 
    <main class="content" role="main"> 
     <iframe height="390px" class="nodehero-cta" frameborder="0" src="https://blog-sidebar.risingstack.com/"></iframe> 
     <article class="post tag-node-js tag-tutorial tag-opencv"> 
      <div class="inner"> 
       <div id="push"> 
        <header class="post-header"> 
         <span class="post-meta"> <span class="post-author"><img src="https://blog-assets.risingstack.com/2017/01/tom.jpg"><a href="/author/tomas/">Tomáš Stankovi?</a></span> | <span class="post-date">12 Jan 2017 <span class="post-reading-time">| <span class="estimated-reading-time"></span> (<span class="word-count"></span> words)</span></span> <br> <br> <span class="post-author"><i>I am a final year student of Applied Informatics and JavaScript developer who loves clean code, workflow automation and design. More about me: http://www.slinto.sk</i></span> </span> 
         <div class="clear"></div> 
         <h1 class="post-title">OpenCV tutorial: Computer vision with Node.js</h1> 
        </header> 
        <section class="post-content"> 
         <div class="kg-card-markdown">
          <p><strong>In this openCV tutorial, I will show you how to work with computer vision in Node.js.</strong> I will explain the basic principles of working with images using the open source library called OpenCV - with real-life use cases.</p> 
          <p>Currently, I am working on my Master thesis in which I use React Native, neural networks, and the OpenCV computer vision library. Allow me to show you a few things that I have learned while working with OpenCV.</p> 
          <blockquote> 
           <p>Computer vision is a field of computer science, which focuses on retrieving data from images or videos using different algorithms.</p> 
          </blockquote> 
          <p>Computer vision is widely used, for example for motion tracking in security cameras, control of autonomous vehicles, identification of /searching for objects in a picture/video.</p> 
          <p>Implementing algorithms of computer vision is a nontrivial task but there is a really good open source library called <a href="http://opencv.org/">OpenCV</a> which is being developed from 1999 until now.</p> 
          <p>This library officially supports C, C ++, Python, and Java. Fortunately, JavaScript programmers led by Peter Braden started working on the interface library between the JavaScript and OpenCV called <a href="https://github.com/peterbraden/node-opencv">node-opencv</a>.</p> 
          <p>With the OpenCV library, we can create Node.js applications with image analysis. This library currently hasn't implemented all of OpenCV's features - especially the features of OpenCV 3 - but it is possible to use it nowadays.</p> 
          <h2 id="installation">Installation</h2> 
          <p>Before using the OpenCV library in Node.js, you need to install it globally. On MacOS, you can install it through <a href="http://brew.sh/">Homebrew</a>. In this article, I am using and installing OpenCV version 2.4.</p> 
          <pre><code>$ brew tap homebrew/science
$ brew install opencv
</code></pre> 
          <p>If you are using another platform, here is a tutorial for <a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/linux_install/linux_install.html#linux-installation">Linux</a> and <a href="http://docs.opencv.org/2.4/doc/tutorials/introduction/windows_install/windows_install.html#windows-installation">Windows</a>. After successful installation we can install node-opencv to our Node.js project.</p> 
          <pre><code>$ npm install --save opencv
</code></pre> 
          <p><em>Sometimes the installation could fail (this is open-source, and it isn't in the final phase), but you can find a solution for your problem on project’s GitHub.</em></p> 
          <h2 id="opencvbasics">OpenCV basics</h2> 
          <h3 id="loadingandsavingimagesmatrix">Loading and saving images + Matrix</h3> 
          <p>The basic OpenCV feature enables us to load and save images. You can do this by using the following methods: <code>cv#readImage()</code> and <code>Matrix#save()</code>;</p> 
          <pre><code class="language-javascript">const cv = require('opencv');

cv.readImage('./img/myImage.jpg', function (err, img) {
  if (err) {
    throw err;
  }

  const width = im.width();
  const height = im.height();

  if (width &lt; 1 || height &lt; 1) {
    throw new Error('Image has no size');
  }

  // do some cool stuff with img

  // save img
  img.save('./img/myNewImage.jpg');
});
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/opencv-loaded-image.jpg" alt="OpenCV Loaded Image"></p> 
          <p>A loaded image is an Object that represents the basic data structure to work with in OpenCV - Matrix. Each loaded or created image is represented by a matrix, where one field is one pixel of the image. The size of the Matrix is defined by the size of the loaded image. You can create a new Matrix in Node.js by calling new Matrix() constructor with specified parameters.</p> 
          <pre><code class="language-javascript">new cv.Matrix(rows, cols);
new cv.Matrix(rows, cols, type, fillValue);
</code></pre> 
          <h3 id="imagemodifying">Image modifying</h3> 
          <p>One of the basic methods that we can use is converting color. For example, we can get a grayscale image by simply calling the <code>Matrix#convertGrayscale()</code> method.</p> 
          <pre><code class="language-javascript"> img.convertGrayscale();
 img.save('./img/myGrayscaleImg.jpg');
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/opencv-grayscaled-image.jpg" alt="OpenCV Grayscaled Image"></p> 
          <p>This method is often used before using an edge detector.</p> 
          <p>We can convert images to HSV cylindrical-coordinate representation just by calling<br> <code>Matrix#convertHSVscale()</code>.</p> 
          <pre><code class="language-javascript"> img. convertHSVscale();
 img.save('./img/myGrayscaleImg.jpg');
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/opencv-hsv-image.jpg" alt="OpenCV HSV image"></p> 
          <p>We can crop an image by calling the <code>Matrix#crop(x, y, width, height)</code> method with specified arguments.<br> This method doesn't modify our current image, it returns a new one.</p> 
          <pre><code class="language-javascript">  let croppedImg = img.crop(1000, 1000, 1000, 1000);
  croppedImg('./img/croppedImg');
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/cropped-image.jpg" alt="Cropped image"></p> 
          <p>If we need to copy a file from one variable to another, we can use the <code>Matrix#copy()</code> method which returns a new image Object.</p> 
          <pre><code class="language-javascript">  let newImg = img.copy();
</code></pre> 
          <p><strong>In this way, we can work with basic Matrix functions.</strong> We can also find various blur filter features for drawing and editing images. You can find all implemented methods on Matrix Object in the <a href="https://github.com/peterbraden/node-opencv/blob/976788c411cdff098247c40a17082c0ddaeaaadd/src/Matrix.cc">Matrix.cc</a> file on project’s Github.</p> 
          <h2 id="dilationanderosion">Dilation and Erosion</h2> 
          <p>Dilation and erosion are fundamental methods of mathematical morphology. I will explain how they work using the following image modifications.</p> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/loaded-logo.jpg" alt="Loaded logo"></p> 
          <p>The dilation of the binary image A by the structuring element B is defined by</p> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/opencv-dilate.png" alt="OpenCV dilate"></p> 
          <p>OpenCV has a <code>Matrix#dilate(iterations, structEl)</code> method where <code>iterations</code> is the number of the dilation that will be performed, and <code>structEl</code> is the structuring element used for dilation (default is 3x3).</p> 
          <p>We can call a dilate method with this parameter.</p> 
          <pre><code class="language-javascript">img.dilate(3);
</code></pre> 
          <p>OpenCV calls a dilate method like this.</p> 
          <pre><code class="language-javascript">cv::dilate(self-&gt;mat, self-&gt;mat, structEl, cv::Point(-1, -1), 3);
</code></pre> 
          <p>After this call, we can get modified image like this.</p> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/dilated-logo.jpg" alt="Dilated logo"></p> 
          <p>The erosion of the binary image A by the structuring element B is defined by</p> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/opencv-erode.png" alt="OpenCV Erode"></p> 
          <p>In OpenCV, we can call a <code>Matrix#erode(iterations, structEl)</code> method which is similar to the dilation method.</p> 
          <p>We can use it like this:</p> 
          <pre><code class="language-javascript">img.erode(3);
</code></pre> 
          <p>and we get an eroded image.</p> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/opencv-eroded-logo-image.jpg" alt="OpenCV Eroded Logo Image"></p> 
          <h2 id="edgedetection">Edge detection</h2> 
          <p>For edge detection, we can use the Canny Edge Detector algorithm, which was developed in 1986 and became a very popular algorithm - often being called the “optimal detector”. This algorithm meets the following three criteria, which are important in edge detection:</p> 
          <ol> 
           <li>Detection of edge with low error rate</li> 
           <li>Good localization of edge - distance between edge and real edge pixels have to be minimal</li> 
           <li>Edges in the image can only be marked once</li> 
          </ol> 
          <p>Before using the Canny Edge Detector algorithm, we can convert the image to grayscale format, which can sometimes produce better results. Then, we can eliminate unnecessary noise from the image by using a Gaussian Blur filter which receives a parameter as a field - Gaussian kernel size. After using these two methods, we can get better and more accurate results in a Canny Edge.</p> 
          <pre><code class="language-javascript">im.convertGrayscale();
im.gaussianBlur([3, 3]);
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/gaussian-blur.jpg" alt="Gaussian blur"></p> 
          <p>The image is now ready to be detected by the Canny Edge algorithm. This algorithm receives parameters: <code>lowThreshold</code> and <code>highThreshold</code>.</p> 
          <p>Two thresholds allow you to divide pixels into three groups.</p> 
          <ul> 
           <li>If the value of a gradient pixel is higher as <code>highThreshold</code>, the pixels are marked as strong edge pixels.</li> 
           <li>If the value of the gradient is between the high and low threshold, the pixels are marked as weak edge pixels.</li> 
           <li>If the value is below the low threshold level, those pixels are completely suppressed.</li> 
          </ul> 
          <p>There isn't something like a global setting of the threshold for all images. <strong>You need to properly set up each threshold for each image separately.</strong> There are some possibilities for predicting the right thresholds, but I will not specify them in this article.</p> 
          <p>After calling the Canny Edge method, we also call a dilate method.</p> 
          <pre><code class="language-javascript">  const lowThresh = 0;
  const highThresh = 150;
  const iterations = 2;

  img.canny(lowThresh, highThresh);
  img.dilate(iterations);
</code></pre> 
          <p>After these steps, we have an analyzed image. From this image, we can now select all the contours by calling the <code>Matrix#findContours()</code> method and writing it as a new Image.</p> 
          <pre><code class="language-javascript">  const WHITE = [255, 255, 255];
  let contours = img.findContours();
  let allContoursImg = img.drawAllContours(contours, WHITE);
  allContoursImg.save('./img/allContoursImg.jpg');
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Canny-edge-image-with-dilate.jpg" alt="Canny edge image with dilate"></p> 
          <p>Image with dilate.</p> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Canny-edge-image-without-dilate.jpg" alt="Canny edge image without dilate"><br> Image without dilate.</p> 
          <p>In this picture, we can see all the contours found by the Canny Edge Detector.</p> 
          <p>If we want to select only the biggest of them, we can do it by using the following code, which goes through each contour and saves the biggest one. We can draw it by the <code>Matrix#drawContour()</code> method.</p> 
          <pre><code class="language-javascript">  const WHITE = [255, 255, 255];
  let contours = img.contours();
  let largestContourImg;
  let largestArea = 0;
  let largestAreaIndex;

  for (let i = 0; i &lt; contours.size(); i++) {
    if (contours.area(i) &gt; largestArea) {
      largestArea = contours.area(i);
      largestAreaIndex = i;
    }
  }

  largestContourImg.drawContour(contours, largestAreaIndex, GREEN, thickness, lineType);
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Canny-edge-image-with-only-one-contour.jpg" alt="Canny edge image with only one contour"></p> 
          <p>If we want to draw more contours, for example, all contours larger than a certain value, we only move the <code>Matrix#drawContour()</code> method into a for loop and modify the <code>if</code> condition.</p> 
          <pre><code class="language-javascript">  const WHITE = [255, 255, 255];
  let contours = img.contours();
  let largestContourImg;
  let largestArea = 500;
  let largestAreaIndex;

  for (let i = 0; i &lt; contours.size(); i++) {
    if (contours.area(i) &gt; largestArea) {
      largestContourImg.drawContour(contours, i, GREEN, thickness, lineType);
    }
  }
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Canny-edge-image-with-only-more-contour.jpg" alt="Canny edge image with only more contour"></p> 
          <h2 id="polygonapproximations">Polygon Approximations</h2> 
          <p>Polygon approximation can be used for several useful things. The most trivial is an approximation by bounding a rectangle around our object using the <code>Contours#boundingRect(index)</code> method. We call this method on the Contours object, which we get by calling the <code>Matrix#findContours()</code> method on an image after the Canny Edge Detection (which we discussed in the previous example).</p> 
          <pre><code class="language-javascript">let bound = contours.boundingRect(largestAreaIndex);
largestContourImg.rectangle([bound.x, bound.y], [bound.width, bound.height], WHITE, 2);
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Polygon-approximation.jpg" alt="Polygon approximation"></p> 
          <p>The second alternative to using approximation is the approximation of precision specified polygons by calling the <code>Contours#approxPolyDP()</code> method. By using the <code>Contours#cornerCount(index)</code> method, you get the number of angles in our polygon. I attached two images with various levels of precision below.</p> 
          <pre><code class="language-javascript">  let poly;
  let RED = [0, 0, 255];
  let arcLength = contours.arcLength(largestAreaIndex, true);
  contours.approxPolyDP(largestAreaIndex, arcLength * 0.05, true);
  poly.drawContour(contours, largestAreaIndex, RED);

  // number of corners
  console.log(contours.cornerCount(largestAreaIndex));
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Approximation-with-specific-precision-1.jpg" alt="Approximation with specific precision 1"></p> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Approximation-with-specific-precision-2.jpg" alt="Approximation with specific precision 2"></p> 
          <p>It is also interesting to use an approximation by the rotated rectangle of the minimum area, using the <code>Contours#minAreaRect()</code> method.</p> 
          <p>I use this method in my project to determine the angle of a particular object which is rotated into the right position after. In the next example, we add a rotated polygon into the <code>largestContourImg</code> variable and print the angle of our rotated polygon.</p> 
          <pre><code class="language-javascript">  let rect = contours.minAreaRect(largestAreaIndex);
  for (let i = 0; i &lt; 4; i++) {
      largestContourImg.line([rect.points[i].x, rect.points[i].y], [rect.points[(i+1)%4].x, rect.points[(i+1)%4].y], RED, 3);
  }

// angle of polygon
console.log(rect.angle);

</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Approximation-by-the-rotated-rectangle.jpg" alt="Approximation by the rotated rectangle"></p> 
          <h2 id="imagerotationwithoutcropping">Image rotation without cropping</h2> 
          <p>One of the things which I needed to solve and OpenCV have not implemented it, is image rotation without image cropping. We can easily rotate an image with the following code.</p> 
          <pre><code class="language-javascript">img.rotate(90);
</code></pre> 
          <p>But we get something like this:</p> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Rotated-image-with-rotate-method.jpg" alt="Rotated image with rotate method"></p> 
          <p><strong>How can we rotate an image without cropping?</strong> Before the rotation, we create a new square 8-bit 3-channel Matrix called <code>bgImg</code> whose size is the diagonal size of our image for rotation.</p> 
          <p>After that, we calculate the position for our image which we can put into new <code>bgImg</code> Matrix. On the <code>bgImg</code>, we call the <code>Matrix#rotate(angle)</code> method with our value.</p> 
          <pre><code class="language-javascript">  let rect = contours.minAreaRect(largestAreaIndex);
  let diagonal = Math.round(Math.sqrt(Math.pow(im.size()[1], 2) + Math.pow(im.size()[0], 2)));
  let bgImg = new cv.Matrix(diagonal, diagonal, cv.Constants.CV_8UC3, [255, 255, 255]);
  let offsetX = (diagonal - im.size()[1]) / 2;
  let offsetY = (diagonal - im.size()[0]) / 2;

  IMG_ORIGINAL.copyTo(bgImg, offsetX, offsetY);
  bgImg.rotate(rect.angle + 90);

  bgImg.save('./img/rotatedImg.jpg');
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Rotated-image-without-crop.jpg" alt="Rotated image without crop"></p> 
          <p>After that, we can run the Canny Edge Detector on our new rotated image.</p> 
          <pre><code class="language-javascript">  const GREEN = [0, 255, 0];;
  let rotatedContour = new cv.Matrix(diagonal, diagonal);
  bgImg.canny(lowThresh, highThresh);
  bgImg.dilate(nIters);
  let contours = bgImg.findContours();

  for (let i = 0; i &lt; contours.size(); i++) {
    if (contours.area(i) &gt; largestArea) {
      largestArea = contours.area(i);
      largestAreaIndex = i;
    }
  }

  rotatedContour.drawContour(contours, largestAreaIndex, GREEN, thickness, lineType);
  rotatedContour.save('./img/rotatedImgContour.jpg');
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/Rotated-image-with-contour.jpg" alt="Rotated image with contour"></p> 
          <p>There are so many other methods that we can use on a picture. For example, there’s background removing, which can be very useful - but they are not covered in this article.</p> 
          <h2 id="objectdetection">Object detection</h2> 
          <p>I work with plants and I don't use a detector for faces, cars or other objects in my application.</p> 
          <blockquote> 
           <p>Even so, I decided to mention face detection in this article because it can show the strength of OpenCV technology.</p> 
          </blockquote> 
          <p>We call the <code>Matrix#detectObject()</code> method on our loaded image, which accepts a parameter as a path to cascade classifier, which we want to use. <strong>OpenCV comes with some pre-trained classifiers which can find figures, faces, eyes, ears, cars and some other object in pictures.</strong></p> 
          <pre><code class="language-javascript">cv.readImage('./img/face.jpg', function(err, im){
  if (err) throw err;
  if (im.width() &lt; 1 || im.height() &lt; 1) throw new Error('Image has no size');

  im.detectObject('./data/haarcascade_frontalface_alt2.xml', {}, function(err, faces){
    if (err) throw err;

    for (var i = 0; i &lt; faces.length; i++){
      var face = faces[i];
      im.ellipse(face.x + face.width / 2, face.y + face.height / 2, face.width / 2, face.height / 2, [255, 255, 0], 3);
    }

    im.save('./img/face-detection.jpg');
    console.log('Image saved.');
  });
});
</code></pre> 
          <p><img src="https://blog-assets.risingstack.com/2017/01/opencv-face-detection-example.jpg" alt="OpenCV Face detection example"></p> 
          <h2 id="opencvtutorialcomputervisionwithnodejs">OpenCV tutorial: Computer vision with Node.js</h2> 
          <p><strong>In this article, I talked about some interesting features of the popular OpenCV library used in Node.js.</strong> It is a real shame that there is no official interface for Node.js, although there is a library node-opencv, with less implemented features and an inconsistent API.</p> 
          <p>If you want to work with this library, you need to study the .cc files in the <a href="https://github.com/peterbraden/node-opencv">node-opencv</a> repository, because there is no complete documentation of this library, at least yet.</p> 
          <p>Reading the code is absolutely OK, I love doing it, but I'm not happy with some inconsistencies and differences in return values compared with official OpenCV. <strong>I hope this library will soon develop, and I will try to contribute to it with a few lines of my own code.</strong></p> 
          <div class="click-to-tweet"> 
           <p class="click-to-tweet-text"> <a href="https://twitter.com/share?text=%22The%20Node-opencv%20project%20is%20not%20a%20waste%20of%20time.%20It%20has%20big%20potential%20%26%20would%20deserve%20much%20more%20attention.%22;url=https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js" target="_blank">"The Node-opencv project is not a waste of time. It has big potential &amp; would deserve much more attention."</a> </p> 
           <p class="click-to-tweet-button"> <a href="https://twitter.com/share?text=%22The%20Node-opencv%20project%20is%20not%20a%20waste%20of%20time.%20It%20has%20big%20potential%20%26%20would%20deserve%20much%20more%20attention.%22;url=https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js" target="_blank" c>Click To Tweet</a> </p> 
          </div> 
          <br> 
         </div> 
        </section> 
        <footer class="post-footer"> 
         <div class="post-tags"> 
          <a href="/tag/node-js/">node.js</a> 
          <a href="/tag/tutorial/">tutorial</a> 
          <a href="/tag/opencv/">opencv</a> 
         </div> 
         <div class="post-share"> 
          <a class="icon-twitter" href="https://twitter.com/share?text=OpenCV tutorial: Computer vision with Node.js&amp;url=https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js/" onclick="window.open(this.href, 'twitter-share', 'width=550,height=235');return false;"> <span>Twitter</span> </a> 
          <a class="icon-facebook" href="https://www.facebook.com/sharer/sharer.php?u=https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js/" onclick="window.open(this.href, 'facebook-share','width=580,height=296');return false;"> <span>Facebook</span> </a> 
          <a class="icon-gplus" href="https://plus.google.com/share?url=https://community.risingstack.com/opencv-tutorial-computer-vision-with-node-js/" onclick="window.open(this.href, 'google-plus-share', 'width=490,height=530');return false;"> <span>Google+</span> </a> 
         </div> 
        </footer> 
        <aside class="post-comments"> 
         <div id="disqus_thread"></div> 
        </aside> 
       </div> 
       <nav class="post-nav"> 
        <a class="post-nav-item post-nav-next" href="https://community.risingstack.com/how-to-find-node-js-performance-optimization-killers/"> 
         <section class="post-nav-teaser"> 
          <span class="post-nav-icon"><i class="icon-arrow-left"></i></span> 
          <span class="post-nav-info"> <h4 class="post-nav-title">How to find Node.js Performance Optimization Killers</h4> </span> 
         </section> </a> 
        <a class="post-nav-item post-nav-prev" href="https://community.risingstack.com/tutorial-building-expressjs-based-microservices-using-hydra/"> 
         <section class="post-nav-teaser"> 
          <span class="post-nav-icon"><i class="icon-arrow-right"></i></span> 
          <span class="post-nav-info"> <h4 class="post-nav-title">Tutorial: Building ExpressJS-based microservices using Hydra</h4> </span> 
         </section> </a> 
        <div class="clear"></div> 
       </nav> 
      </div> 
     </article> 
    </main> 
    <div id="body-class" style="display: none;" class="post-template tag-node-js tag-tutorial tag-opencv"></div> 
    <footer id="footer"> 
     <section class="credits"> 
      <span class="credits-theme">Theme <a href="https://github.com/zutrinken/bleak" target="_blank" rel="nofollow">Bleak</a> by <a href="http://zutrinken.com" target="_blank" rel="nofollow">zutrinken</a></span> 
      <span class="credits-software">Published with <a href="http://ghost.org" target="_blank" rel="nofollow">Ghost</a></span> 
     </section> 
    </footer> 
    <div id="menu" data-target="menu"> 
     <div class="menu-header"> 
      <span class="menu-label">Menu</span> 
      <a class="menu-close" data-action="menu" data-target="menu"></a> 
     </div> 
     <ul class="menu-list"> 
      <li class="menu-list-item"> <a class="home" href="https://community.risingstack.com/">Home</a> </li> 
      <li class="menu-list-item"> <a class="submit-content" href="https://community.risingstack.com/submit/">Submit Content</a> </li> 
     </ul> 
    </div> 
    <div class="overlay"></div> 
   </div> 
  </section> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-50415716-21', 'auto');
  ga('send', 'pageview');
</script> 
  <script src="//load.sumome.com/" data-sumo-site-id="056986d36ac5853eeb01ee62ebdbcd4178d2bded430dc5e30e7c853e2f63d1f5" async></script> 
  <script type="text/javascript" src="/assets/js/dependencies.js?v=1da1d75271"></script> 
  <script type="text/javascript" src="/assets/js/script.js?v=1da1d75271"></script>   
 </body>
</html>