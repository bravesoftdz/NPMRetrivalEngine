<!doctype html>
<html en="en">
 <head> 
  <title>ai2html</title> 
  <meta charset="utf-8"> 
  <meta http-equiv="content-type" content="text/html;charset=UTF-8"> 
  <meta http-equiv="X-UA-Compatible" content="chrome=1"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"> 
  <meta name="description" content="ai2html is a script for Adobe Illustrator that converts your Illustrator artwork into html and css."> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:url" content="http://ai2html.org/"> 
  <meta name="twitter:title" content="ai2html"> 
  <meta name="twitter:description" content="ai2html is a script for Adobe Illustrator that converts your Illustrator artwork into html and css."> 
  <meta name="twitter:image" content="http://ai2html.org/ai2html-logo.png"> 
  <meta name="og:image" content="http://ai2html.org/ai2html-logo.png"> 
  <meta name="og:site_name" content="ai2html.org"> 
  <meta name="og:url" content="http://ai2html.org/"> 
  <link rel="canonical" href="http://ai2html.org/"> 
  <link href="poole.css" media="all" rel="stylesheet"> 
  <link href="hyde.css" media="all" rel="stylesheet"> 
  <link href="ai2html.css" media="all" rel="stylesheet"> 
  <script type="text/javascript" src="http://typeface.nytimes.com/zam5nzz.js"></script> 
  <script type="text/javascript">try{Typekit.load();}catch(e){}</script> 
 </head> 
 <body> 
  <div class="sidebar"> 
   <div class="container sidebar-sticky"> 
    <div class="sidebar-about"> 
     <h1>
      <div id="g-ai2html-white-box" class="ai2html"> 
       <!-- Generated by ai2html v0.59 - 2015-12-23 - 15:45 --> 
       <!-- ai file: ai2html --> 
       <style type="text/css" media="screen,print">
		.g-artboard {
			margin:0 auto;
		}
	</style> 
       <style type="text/css" media="screen,print">
		/* Custom CSS block 1 */
		.g-inv p {
		   color: rgba(0,0,0,.0)!important;
		}
		
	</style> 
       <!-- Artboard: white --> 
       <div id="g-ai2html-white" class="g-artboard "> 
        <style type="text/css" media="screen,print">
			#g-ai2html-white{
				position:relative;
				overflow:hidden;
			}
			.g-aiAbs{
				position:absolute;
			}
			.g-aiImg{
				display:block;
				width:100% !important;
			}
			#g-ai2html-white p{
				font-family:nyt-franklin,arial,helvetica,sans-serif;
				font-size:13px;
				line-height:18px;
				margin:0;
			}
			#g-ai2html-white .g-aiPstyle0 {
				font-family:nyt-stymie,arial,helvetica,sans-serif;
				font-size:72px;
				line-height:86px;
				font-weight:700;
				color:#ffffff;
			}
			.g-aiPtransformed p { white-space: nowrap; }
		</style> 
        <div id="g-ai2html-white-graphic"> 
         <a href="/"> <img id="g-ai1-0" class="g-aiImg" src="images/ai2html-white.svg"> 
          <div id="g-ai1-1" class="g-inv g-aiAbs" style="top:1.3603%;left:0.2545%;"> 
           <p class="g-aiPstyle0">ai2html</p> 
          </div> </a> 
        </div> 
       </div> 
       <!-- End ai2html - 2015-12-23 - 15:45 --> 
      </div> </h1> 
     <p class="lead">ai2html turns your Illustrator files into HTML.</p> 
    </div> 
    <ul class="sidebar-nav"> 
     <li class="sidebar-nav-item sidebar-nav-hash"><a href="#how-to-install-ai2html">How to install</a></li> 
     <li class="sidebar-nav-item sidebar-nav-hash"><a href="#how-to-use-ai2html">How to use</a></li> 
     <li class="sidebar-nav-item sidebar-nav-hash"><a href="#how-does-ai2html-work">How does it work</a></li> 
     <li class="sidebar-nav-item sidebar-nav-hash"><a href="#table-of-contents">Full table of contents</a></li> 
     <li class="sidebar-nav-item sidebar-nav-page"><a href="examples.html">Examples</a></li> 
     <li class="sidebar-nav-item sidebar-nav-page"><a href="https://github.com/newsdev/ai2html/blob/master/CHANGELOG.md">Changelog</a></li> 
    </ul> 
   </div> 
  </div> 
  <div class="content container"> 
   <div id="g-ai2html-black-box" class="ai2html"> 
    <!-- Generated by ai2html v0.59 - 2015-12-23 - 15:45 --> 
    <!-- ai file: ai2html --> 
    <style type="text/css" media="screen,print">
		.g-artboard {
			margin:0 auto;
		}
	</style> 
    <style type="text/css" media="screen,print">
		/* Custom CSS block 1 */
		.g-inv p {
		   color: rgba(0,0,0,.0)!important;
		}
		
	</style> 
    <!-- Artboard: black --> 
    <div id="g-ai2html-black" class="g-artboard "> 
     <style type="text/css" media="screen,print">
			#g-ai2html-black{
				position:relative;
				overflow:hidden;
			}
			.g-aiAbs{
				position:absolute;
			}
			.g-aiImg{
				display:block;
				width:100% !important;
			}
			#g-ai2html-black p{
				font-family:nyt-franklin,arial,helvetica,sans-serif;
				font-size:13px;
				line-height:18px;
				margin:0;
			}
			#g-ai2html-black .g-aiPstyle0 {
				font-family:nyt-stymie,arial,helvetica,sans-serif;
				font-size:72px;
				line-height:86px;
				font-weight:700;
				color:#ffffff;
			}
			.g-aiPtransformed p { white-space: nowrap; }
		</style> 
     <div id="g-ai2html-black-graphic"> 
      <img id="g-ai0-0" class="g-aiImg" src="images/ai2html-black.svg"> 
      <div id="g-ai0-1" class="g-inv g-aiAbs" style="top:-1.3603%;left:0%;"> 
       <p class="g-aiPstyle0">ai2html</p> 
      </div> 
     </div> 
    </div> 
    <!-- End ai2html - 2015-12-23 - 15:45 --> 
   </div> 
   <blockquote> 
    <p>ai2html is an open-source script for Adobe Illustrator that converts your Illustrator documents into html and css.</p> 
   </blockquote> 
   <p>Here are <a href="https://del.icio.us/archietse/ai2html+nyt">examples of how we’ve used the script</a> at The New York Times and <a href="https://del.icio.us/archietse/ai2html+others">examples of how others</a> have used it. Share your ai2html projects on Twitter, Delicious, etc. using <a href="https://twitter.com/search?q=%23ai2html&amp;src=typd" target="_blank">#ai2html</a>.</p> 
   <h2 id="table-of-contents">Table of contents</h2> 
   <ul> 
    <li><a href="#how-to-install-ai2html">How to install ai2html</a></li> 
    <li><a href="#how-to-use-ai2html">How to use ai2html</a></li> 
    <li><a href="#frequently-asked-questions">Frequently asked questions</a></li> 
    <li><a href="#settings">Settings</a></li> 
    <li><a href="#point-text-vs-area-text">Point text vs. area text</a></li> 
    <li><a href="#which-attributes-are-converted-to-html-and-css">Which attributes are converted to html and css</a></li> 
    <li><a href="#how-does-ai2html-work">How does ai2html work</a></li> 
    <li><a href="#limitations">Limitations</a></li> 
    <li><a href="#what-works-well-and-what-does-not">What works well and what does not</a></li> 
    <li><a href="#using-fonts-other-than-arial-and-georgia">Using fonts other than Arial and Georgia</a></li> 
   </ul> 
   <h2 id="how-to-install-ai2html">How to install ai2html</h2> 
   <p>Download the <a href="https://github.com/newsdev/ai2html/raw/master/ai2html.js">latest version of the script here</a> by clicking the link and saving the file to your computer.</p> 
   <p>Move the <code class="highlighter-rouge">ai2html.js</code> file into the Illustrator folder where scripts are located. For example, on a Mac running Adobe Illustrator CC 2015, the path would be:</p> 
   <div class="highlighter-rouge">
    <pre class="highlight"><code>/Applications/Adobe Illustrator CC 2015/Presets/en_US/Scripts/ai2html.js
</code></pre> 
   </div> 
   <h2 id="how-to-use-ai2html">How to use ai2html</h2> 
   <ol> 
    <li>Create your Illustrator artwork. 
     <ul> 
      <li>Size the artboard to the dimensions that you want the div to appear on the web page.</li> 
      <li>Make sure your <code class="highlighter-rouge">Document Color Mode</code> is set to <code class="highlighter-rouge">RGB</code>.</li> 
      <li>Make sure your document is saved.</li> 
      <li>Use Arial or Georgia unless you have added your own fonts to the <code class="highlighter-rouge">fonts</code> array in the script.</li> 
     </ul> </li> 
    <li>Run the script by choosing: <code class="highlighter-rouge">File &gt; Scripts &gt; ai2html</code></li> 
    <li>Go to the folder containing your Illustrator file. Inside will be a folder called <code class="highlighter-rouge">ai2html-output</code>. Open the html files in your browser to preview your output.</li> 
   </ol> 
   <h2 id="frequently-asked-questions">Frequently asked questions</h2> 
   <ul> 
    <li><strong>Why not just export my Illustrator file as an image or an SVG?</strong> 
     <ul> 
      <li>Text in images and SVGs scale as you scale the image — so your text becomes unreadable pretty quickly as the artwork scales down, or looks hilariously large as it scales up. By rendering the text as html, we can scale the “graphic” up and down, but keep the text readable at the same font-size and line-height. This is important because we are trying to reduce the number of versions of the artwork that we have to create in order to accommodate viewports that range from mobile phones up to giant desktop monitors. An example of this is here: http://nyti.ms/1CQdkwq Change your window size when you view the page and you’ll see the artwork scale but the text stays the same size. More examples here: https://del.icio.us/archietse/ai2html+responsive</li> 
      <li>When Illustrator saves an SVG, every line of text is broken into separate SVG elements which makes editing the text very difficult. By having the text rendered in HTML, it is much easier for editors to go into the CMS and make edits without having to wade through a tangle of SVG code.</li> 
     </ul> </li> 
   </ul> 
   <h2 id="settings">Settings</h2> 
   <p>There are several ways of customizing the output of the script:</p> 
   <ul> 
    <li><a href="#special-text-blocks">Special text blocks</a> 
     <ul> 
      <li><a href="#ai2html-settings">ai2html-settings</a></li> 
      <li><a href="#ai2html-css">ai2html-css</a></li> 
      <li><a href="#ai2html-js">ai2html-js</a></li> 
      <li><a href="#ai2html-html">ai2html-html</a></li> 
      <li><a href="#ai2html-text">ai2html-text</a></li> 
     </ul> </li> 
    <li><a href="#layers-palette">Layers palette</a></li> 
    <li><a href="#artboards-palette">Artboards palette</a></li> 
    <li><a href="#attributes-palette">Attributes palette</a></li> 
   </ul> 
   <h4 id="special-text-blocks">Special text blocks</h4> 
   <p>The script recognizes five special types of text blocks. The first line of the text block should begin with <code class="highlighter-rouge">ai2html-</code> followed by one of the following keywords: <code class="highlighter-rouge">settings</code>, <code class="highlighter-rouge">css</code>, <code class="highlighter-rouge">js</code>, <code class="highlighter-rouge">html</code> or <code class="highlighter-rouge">text</code>. This should be the only thing on the first line of the text block. The special text blocks can be placed anywhere in your Illustrator document, but note that if you place them on an artboard, their contents will be rendered in your output.</p> 
   <h5 id="ai2html-settings"><code class="highlighter-rouge">ai2html-settings</code></h5> 
   <p>Most of the script’s options are set in the settings text block. When you run ai2html for the first time in your ai file, the script will place a settings text block to the upper left of all your artboards. Here is a description of the settings:</p> 
   <p><em>Options that are included in the settings text block by default:</em></p> 
   <ul> 
    <li><strong>image_format</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: <code class="highlighter-rouge">png</code> <code class="highlighter-rouge">png24</code> <code class="highlighter-rouge">jpg</code> <code class="highlighter-rouge">svg</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">png</code></li> 
      <li>You can specify more than one image format to be output by listing the desired formats separated by commas. This can be useful if you want to see which image format has the smallest file size. The first format in the list will be the only one referenced in the html. See <a href="examples.html#svg-artboards">example</a> for SVG output.</li> 
     </ul> </li> 
    <li><strong>responsiveness</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: <code class="highlighter-rouge">fixed</code> <code class="highlighter-rouge">dynamic</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">fixed</code></li> 
      <li><code class="highlighter-rouge">dynamic</code> responsiveness means that the ai2html divs will scale to fill the container they are placed in.</li> 
      <li><code class="highlighter-rouge">fixed</code> responsiveness means that the ai2html div will appear only at the size it was created in Illustrator and will not change sizes if the container it is placed in changes size.</li> 
     </ul> </li> 
    <li><strong>output</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: <code class="highlighter-rouge">one-file</code> <code class="highlighter-rouge">multiple-files</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">one-file</code></li> 
      <li><code class="highlighter-rouge">one-file</code> output means that all artboards will be written into one html file.</li> 
      <li><code class="highlighter-rouge">multiple-files</code> output means that each artboard will be written to separate html files.</li> 
     </ul> </li> 
    <li><strong>html_output_path</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">/ai2html-output/</code></li> 
      <li>Use this if you want to redirect the output to a different folder. The path should be written relative to the location of the ai file.</li> 
     </ul> </li> 
    <li><strong>html_output_extension</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">.html</code></li> 
      <li>Use this if you want to change the extension of the html partial.</li> 
     </ul> </li> 
    <li><strong>image_output_path</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">&lt;blank&gt;</code></li> 
      <li>Use this if you want to change the path of the images that are placed behind the html text. This path should be written relative to the location of the <code class="highlighter-rouge">html_output_path</code>.</li> 
     </ul> </li> 
    <li><strong>image_source_path</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Default</span>: if not set, <code class="highlighter-rouge">image_output_path</code> will be used</li> 
      <li>In some scenarios the relative path between published html and images is different from how the files are stored. Use <code class="highlighter-rouge">html_source_path</code> to specify the location from where the images are loaded in the <code class="highlighter-rouge">&lt;img&gt;</code> tags. This does not change where image files are stored.</li> 
     </ul> </li> 
    <li><strong>local_preview_template</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">&lt;blank&gt;</code></li> 
      <li>Use this to specify a page template into which the html partial will be inserted to preview your artwork in the context of your site architecture and css. Sample templates can be downloaded from the ai2html Github repo. Any variables from ai2html-settings or ai2html-text blocks can be inserted into the templates using either mustache (eg. {{headline}} ) or ejs/erb (eg. <code class="highlighter-rouge">&lt;%=headline%&gt;</code>) notation. The ai2html partial can be inserted using the <code class="highlighter-rouge">&lt;%=ai2htmlPartial%&gt;</code> variable.</li> 
     </ul> </li> 
    <li><strong>png_number_of_colors</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: Any integer from <code class="highlighter-rouge">2</code> to <code class="highlighter-rouge">256</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">128</code></li> 
      <li>Use this to specify the quality of <code class="highlighter-rouge">png</code> or <code class="highlighter-rouge">png24</code> images.</li> 
     </ul> </li> 
    <li><strong>jpg_quality</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: Any integer from <code class="highlighter-rouge">0</code> to <code class="highlighter-rouge">100</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">60</code></li> 
      <li>Use this to specify the quality of <code class="highlighter-rouge">jpg</code> images.</li> 
     </ul> </li> 
    <li><strong>headline</strong><br><strong>leadin</strong><br><strong>notes</strong><br><strong>sources</strong><br><strong>credit</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: Text with no line breaks</li> 
      <li>These fields are used to populate fields in the <code class="highlighter-rouge">local_preview_template</code> and can be written to a “config” text file along with the html. The config file is written in yml can be used to pass parameters to a cms.</li> 
     </ul> </li> 
   </ul> 
   <p><em>Other options that can be added to the settings text block:</em></p> 
   <ul> 
    <li><strong>max_width</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: Any positive integer</li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">&lt;blank&gt;</code></li> 
      <li>Specifying a <code class="highlighter-rouge">max_width</code> inserts a max-width css instruction on the div containing the ai2html partial. The width should be specified in pixels.</li> 
     </ul> </li> 
    <li><strong>create_config_file</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">false</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">false</code></li> 
      <li>Specify <code class="highlighter-rouge">true</code> if you want the script to also output a text file in yml format containing the parameters you want to pass to your cms.</li> 
     </ul> </li> 
    <li><strong>config_file_path</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">&lt;blank&gt;</code></li> 
      <li><span style="font-variant: small-caps">Example</span>: <code class="highlighter-rouge">/ai2html-output/config.yml</code></li> 
      <li>Enter the full path to the file including the filename that you want the config file to be named. The path should be written relative to the location of the Illustrator file.</li> 
     </ul> </li> 
    <li><strong>png_transparent</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: <code class="highlighter-rouge">yes</code> <code class="highlighter-rouge">no</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">no</code></li> 
      <li>This option lets you make transparent any png image that is output by the program. Note that specifying transparent png’s can result in a visibly significant degradation in the image.</li> 
     </ul> </li> 
    <li><strong>center_html_output</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: <code class="highlighter-rouge">true</code> <code class="highlighter-rouge">false</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">true</code></li> 
      <li>Specifying <code class="highlighter-rouge">true</code> on this option causes the ai2html div to be centered within the container it is placed in.</li> 
     </ul> </li> 
    <li><strong>use_2x_images_if_possible</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: <code class="highlighter-rouge">yes</code> <code class="highlighter-rouge">no</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">yes</code></li> 
      <li>Specifying <code class="highlighter-rouge">yes</code> on this setting tells the script to output images at double the resolution if possible. The script uses limits specified in this <a href="http://apple.co/1M1dvES">document</a> to determine if the size of the image is too large to make it double resolution.</li> 
     </ul> </li> 
    <li><strong>clickable_link</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">&lt;blank&gt;</code></li> 
      <li>Use this to wrap the entire graphic in an <code class="highlighter-rouge">&lt;a&gt;</code> tag pointing to the given URL.</li> 
     </ul> </li> 
    <li><strong>testing_mode</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: <code class="highlighter-rouge">yes</code> <code class="highlighter-rouge">no</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">no</code></li> 
      <li>Specifying <code class="highlighter-rouge">yes</code> on this setting causes the text in the file to be rendered both on the image and in the html. This is useful for testing whether the placement of html text is consistent with the Illustrator file.</li> 
     </ul> </li> 
    <li><strong>render_rotated_skewed_text_as</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: <code class="highlighter-rouge">html</code> <code class="highlighter-rouge">image</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">html</code></li> 
      <li>Specifying <code class="highlighter-rouge">image</code> on this setting causes rotated and sheared text in the file to be rendered on the image instead of the html. See <a href="examples.html#rotated-and-sheared-html-labels">example</a>.</li> 
     </ul> </li> 
    <li><strong>project_name</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: Any string</li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">[ai file name]</code></li> 
      <li>By default ai2html will use the filename of your Illustrator document as the project name but you can specify a <code class="highlighter-rouge">project_name</code> to overwrite this. The project name will be used to name the exported HTML and image files.</li> 
     </ul> </li> 
   </ul> 
   <p><em>If you want to edit the script to change the default settings, you may find it helpful to make a copy of this <a href="http://bit.ly/1BP86RH">Google spreadsheet</a> which makes it easier to view and edit the settings.</em></p> 
   <h5 id="ai2html-css"><code class="highlighter-rouge">ai2html-css</code></h5> 
   <p>If you want to <a href="examples.html#custom-css">add some css</a> that is always inserted into your html partial, include it in a text block somewhere in your Illustrator document, but not on an artboard. Make the first line of the text block read <code class="highlighter-rouge">ai2html-css</code>. The css will be added inside <code class="highlighter-rouge">&lt;style&gt;</code> tags so don’t include <code class="highlighter-rouge">&lt;style&gt;</code> tags in the text block.</p> 
   <h5 id="ai2html-js"><code class="highlighter-rouge">ai2html-js</code></h5> 
   <p>If you want to add some javascript that is always inserted into your html partial, include it in a text block somewhere in your Illustrator document, but not on an artboard. Make the first line of the text block read <code class="highlighter-rouge">ai2html-js</code>. The js will be added at the end of all the html for each artboard. You will need to include the enclosing <code class="highlighter-rouge">&lt;script&gt;</code> tags in the text block.</p> 
   <h5 id="ai2html-html"><code class="highlighter-rouge">ai2html-html</code></h5> 
   <p>If you want to add some html that is always inserted into your html partial, include it in a text block somewhere in your Illustrator document, but not on an artboard. Make the first line of the text block read <code class="highlighter-rouge">ai2html-html</code>. The html will be added at the end of all the divs for each artboard.</p> 
   <h5 id="ai2html-text"><code class="highlighter-rouge">ai2html-text</code></h5> 
   <p>You can store text into variables and insert them into your document using basic mustache or erb/ejs notation. Any variables in the <code class="highlighter-rouge">ai2html-settings</code> or in <code class="highlighter-rouge">ai2html-text</code> blocks can be used.</p> 
   <p>To assign text to a variable, create a text block somewhere in your Illustrator document, but not on an artboard. Make the first line of that text block read <code class="highlighter-rouge">ai2html-text</code>. Each subsequent paragraph should be in the format of <code class="highlighter-rouge">variable_name: Lorem ipsum dolor.</code>. Variable names should only be letters, numbers and underscores.</p> 
   <p>Now you can insert that text anywhere in your document by placing {{variable_name}} or <code class="highlighter-rouge">&lt;%=variable_name%&gt;</code> where you want that text to appear.</p> 
   <p>Note that you can pass mustache or erb/ejs notation untouched to your html partial as long as the variable names don’t match the variable names in the <code class="highlighter-rouge">ai2html-settings</code> or <code class="highlighter-rouge">ai2html-text</code> blocks.</p> 
   <h4 id="layers-palette">Layers palette</h4> 
   <ul> 
    <li><strong>Layer names</strong> 
     <ul> 
      <li>The name of the layer that is the direct parent of a text block is added as a class to the div that corresponds to that text block. This allows you to write custom css that targets all text blocks in a layer. Class names have <code class="highlighter-rouge">g-</code> appended to the front of the name.</li> 
     </ul> </li> 
    <li><strong>Object names</strong> 
     <ul> 
      <li>Another way of targeting a text block is to give that text object a name in the Layers palette. If you give the text object a name, it will be added as an <code class="highlighter-rouge">id</code> to the <code class="highlighter-rouge">div</code> that corresponds to that text block. Note that <code class="highlighter-rouge">g-</code> is not appended to the beginning of the <code class="highlighter-rouge">id</code>, so take care that you begin the <code class="highlighter-rouge">id</code> with letters and not numbers.</li> 
     </ul> </li> 
   </ul> 
   <h4 id="artboards-palette">Artboards palette</h4> 
   <ul> 
    <li><strong>Artboard names</strong> 
     <ul> 
      <li>Artboard names become part of the <code class="highlighter-rouge">id</code> of the <code class="highlighter-rouge">div</code> corresponding to that artboard. They should have unique names.</li> 
     </ul> </li> 
    <li><strong>Specifying artboards to ignore</strong> 
     <ul> 
      <li>Add a dash, ie. <code class="highlighter-rouge">-</code>, as the first character of an artboard name to tell the script that you don’t want it to be included in the output.</li> 
     </ul> </li> 
    <li><strong>Setting a custom artboard breakpoint</strong> 
     <ul> 
      <li>Add a colon <code class="highlighter-rouge">:</code> followed by the minimum width up to which the artboard can be scaled down to. See <a href="examples.html#custom-breakpoints">example</a>.</li> 
     </ul> </li> 
   </ul> 
   <h4 id="attributes-palette">Attributes palette</h4> 
   <p>Parameters can be attached to a text object and passed to the script using the notes field of the Attributes palette. The variables in the notes field should be in the format of <code class="highlighter-rouge">key: value</code>. There is currently only one text-object parameter that can be specified here:</p> 
   <ul> 
    <li><strong>valign</strong> 
     <ul> 
      <li><span style="font-variant: small-caps">Possible values</span>: <code class="highlighter-rouge">top</code> <code class="highlighter-rouge">bottom</code> <code class="highlighter-rouge">middle</code></li> 
      <li><span style="font-variant: small-caps">Default</span>: <code class="highlighter-rouge">middle</code> for Illustrator point text, <code class="highlighter-rouge">top</code> for area text.</li> 
      <li>Text objects stay anchored to the artboard div relative to the top-left, top-right or top-center of the text block’s bounding box depending on whether the text is left, right or center aligned. If you want the text block to anchor to its bottom edge instead of the top, then set <code class="highlighter-rouge">valign: bottom</code>.</li> 
      <li>This setting is mainly useful when you set <code class="highlighter-rouge">responsiveness: dynamic</code> in the settings text block, but can also make a difference for area-text objects because text often wraps differently in different browsers so that a text block may be four lines in one browser and five lines in another. With the default <code class="highlighter-rouge">valign: top</code>, the fifth line will be added to the bottom of the text block. With <code class="highlighter-rouge">valign: bottom</code> the fifth line will cause the entire text block to be shifted up one line.</li> 
     </ul> </li> 
   </ul> 
   <h2 id="point-text-vs-area-text">Point text vs. area text</h2> 
   <p>The script handles point text and area text slightly differently which has ramifications on how text wraps on your web page. Fonts never appear identically in Illustrator and in web browsers. For example, the versions of Arial in Illustrator, in Chrome on a Mac and in Internet Explorer on Windows are not exactly the same — so text that fits in a box in Illustrator may be longer on IE or shorter in Chrome.</p> 
   <ul> 
    <li><strong>Point text</strong> 
     <ul> 
      <li>Lines of point text are prevented from wrapping, so lines will flow indefinitely outward from their anchors (<a href="#attributes-palette">see <code class="highlighter-rouge">valign</code> discussion</a>).</li> 
     </ul> </li> 
    <li><strong>Area text</strong> 
     <ul> 
      <li>The div containing an area text object is given the width of the bounding box so that text will likely wrap differently on different browsers within that width.</li> 
     </ul> </li> 
   </ul> 
   <h2 id="which-attributes-are-converted-to-html-and-css">Which attributes are converted to html and css</h2> 
   <p>The script processes each text object in your Illustrator file and translates the object and text attributes into inline and css styles. Each point- or area-text object is converted into a <code class="highlighter-rouge">&lt;div&gt;</code>. Each paragraph is converted into <code class="highlighter-rouge">&lt;p&gt;</code> tags within the <code class="highlighter-rouge">&lt;div&gt;</code>.</p> 
   <ul> 
    <li><strong>Added to inline styles on the <code class="highlighter-rouge">&lt;div&gt;</code></strong> 
     <ul> 
      <li>Position</li> 
      <li>Opacity 
       <ul> 
        <li>Only opacity applied to a text object and its parents will be applied. Opacity applied to text selections will be ignored.</li> 
       </ul> </li> 
      <li>Width 
       <ul> 
        <li>The width is specified in the html output if it is an area-text object. Point-text objects are given no width.</li> 
       </ul> </li> 
     </ul> </li> 
    <li><strong>Added to CSS classes applied to <code class="highlighter-rouge">&lt;p&gt;</code> tags</strong> 
     <ul> 
      <li>Font 
       <ul> 
        <li>Fonts are converted from Illustrator to web font names in an array in the script. Edit the <code class="highlighter-rouge">fonts</code> array to add your custom web fonts.</li> 
       </ul> </li> 
      <li>Font size</li> 
      <li>Leading</li> 
      <li>Paragraph space before and after</li> 
      <li>Paragraph alignment 
       <ul> 
        <li>The alignment of the first paragraph of a text object determines how it is placed in the html. If the first paragraph is left aligned, then on the web page the text object’s div will be absolutely positioned from it’s left edge. If the first paragraph is right aligned, the div will be positioned from its right edge. If the first paragraph is centered, then the div will be positioned from its center.</li> 
        <li>This is important because fonts are rendered slightly differently across browsers and operating systems. So a label next to a city dot on a map end up too far away or overlapping the dot if you do not paragraph align the text relative to the dot.</li> 
        <li>Setting more than one kind of paragraph alignment on a point-text object cannot be translated into html, as there is really no such thing as a point-text object in html. If you really want to have different paragraph alignments within a single text object, you should do it with an area text object.</li> 
       </ul> </li> 
      <li>Capitalization</li> 
      <li>Text color</li> 
      <li>Character tracking</li> 
     </ul> </li> 
   </ul> 
   <h2 id="how-does-ai2html-work">How does ai2html work</h2> 
   <p>The script renders text as absolutely positioned html elements. The remaining art is exported as an image that is placed underneath the text in the html. Artboards can be rendered as separate divs in a single file, or as separate files. The exported files are html partials, that is, everything is enclosed in a div that can be inserted into a page template. It is also possible to specify an html page template into which the script will insert the html partial so you can preview your artwork in the context of your site architecture and css.</p> 
   <p>Text styles are applied at the paragraph level. Each paragraph is given the character and paragraph attributes of the middle character of the paragraph. Other character styles within a paragraph are ignored — though we’re hoping to add this as a feature in the future. A work-around for this limitation is to enclose text in classed <code class="highlighter-rouge">&lt;span&gt;</code> tags and define styles for those classes in an <code class="highlighter-rouge">ai2html-css</code> text block (described below).</p> 
   <p>Paragraphs are styled using css classes that are consolidated across each artboard. This means that all paragraphs with the same style attributes are styled with a single css class. Text blocks in the output are ordered top-to-bottom, left-to-right so that the document is somewhat readable.</p> 
   <h2 id="limitations">Limitations</h2> 
   <ul> 
    <li>Because numbers get rounded to whole pixels by the web page when formatting text and positioning elements, the html version of a graphic will not line up exactly with its Illustrator version. Rounding differences are particularly compounded if you have blocks of text that span many lines and have fractional leading in Illustrator.</li> 
    <li>Very large text that is set to valign:bottom doesn’t position correctly. We’re hoping to figure out how to fix this.</li> 
    <li>The script assumes that text always goes above the art.</li> 
    <li>Artboards should have unique names.</li> 
    <li>Paragraphs with full justification will just be “justified” in html.</li> 
    <li>Labels in graph objects will be rendered as part of the image. (Something changed in newer versions of CC in the way text objects inside the graph object are handled.) If you want your chart labels to be shown as html, you will need to ungroup the chart.</li> 
    <li>In area text blocks, text that is hidden because it is overflowing the box will appear in the html output.</li> 
   </ul> 
   <h2 id="what-works-well-and-what-does-not">What works well and what does not</h2> 
   <ul> 
    <li><strong>Works well</strong> 
     <ul> 
      <li>Diagrams or maps in which labels are placed organically around the artwork.</li> 
     </ul> </li> 
    <li><strong>Not so great</strong> 
     <ul> 
      <li>Graphics with long blocks of wrapped text or many lines of text.</li> 
      <li>Things that should really be coded up as a table or as columns in which the height of the cells needs to adjust dynamically for long blocks of text that wrap.</li> 
     </ul> </li> 
   </ul> 
   <h2 id="using-fonts-other-than-arial-and-georgia">Using fonts other than Arial and Georgia</h2> 
   <p>If you want to use fonts other than Arial and Georgia, you can add them to the <code class="highlighter-rouge">fonts</code> array in the <code class="highlighter-rouge">constants</code> section of the script. You will need to know how Illustrator refers to the font. Enter this name as the <code class="highlighter-rouge">aifont</code> property.</p> 
   <p>You can find the names that Illustrator uses for all the fonts used in your document by choosing <code class="highlighter-rouge">Find Font…</code> from the <code class="highlighter-rouge">Type</code> menu. You can also use the <a href="https://raw.githubusercontent.com/newsdev/ai2html/master/utilities/aifontname.js">aifontname script</a>, which will tell you the fonts used for selected text blocks.</p> 
   <p>You will need to assign each Illustrator font correspond to a specific font-family, weight and style, which will be used by the script to write the css that will be applied to your text. For example, the Illustrator font name <code class="highlighter-rouge">Arial-BoldItalicMT</code> corresponds to this css:</p> 
   <div class="highlighter-rouge">
    <pre class="highlight"><code>font-family: arial,helvetica,sans-serif;
font-weight: bold;
font-style: italic;
</code></pre> 
   </div> 
   <p>You may find it helpful to make a copy of this <a href="http://bit.ly/1BP86RH">Google spreadsheet</a>. The <code class="highlighter-rouge">fonts</code> worksheet can make it easier to create additional font objects to add to the array.</p> 
   <h2 id="contributing-to-this-project">Contributing to this project</h2> 
   <p>The Github repository for this site is available at <a href="https://github.com/newsdev/ai2html">newsdev/ai2html</a>.</p> 
   <h2 id="thanks">Thanks</h2> 
   <p>Many thanks to <a href="https://twitter.com/driven_by_data">Gregor Aisch</a>, <a href="https://github.com/mbloch">Matthew Bloch</a>, <a href="https://twitter.com/dwtkns">Derek Watkins</a>, <a href="https://twitter.com/jshkatz">Josh Katz</a>, <a href="https://twitter.com/kkrebeccalai">K.K. Rebecca Lai</a>, <a href="https://twitter.com/giratikanon">Tom Giratikanon</a>, <a href="https://twitter.com/mericson">Matt Ericson</a>, <a href="https://twitter.com/jashkenas">Jeremy Ashkenas</a> and <a href="https://twitter.com/alanmclean">Alan McLean</a> for their incredible contributions to this project, as well as to my colleagues in The New York Times <a href="https://twitter.com/nytgraphics">Graphics Department</a> for their patient guidance.</p> 
   <p>If you’re learning to write Javascript for Adobe Illustrator, <a href="http://www.wundes.com/JS4AI/">John Wundes</a>, has many wonderful scripts. <a href="http://www.wundes.com/JS4AI/explore.js">explore.js</a> is particularly helpful for understanding what attributes are attached to Illustrator objects.</p> 
   <hr> 
   <p style="font-size:.8em;opacity:0.5;">Created by <a href="https://twitter.com/archietse">Archie Tse</a> / <a href="https://github.com/newsdev">The New York Times</a></p> 
   <p style="font-size:.8em;opacity:0.7;">Copyright (c) 2011-2017 The New York Times Company</p> 
  </div>   
 </body>
</html>