<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
 <head> 
  <meta content="text/html; charset=utf-8" http-equiv="content-type"> 
  <title>draftjs_exporter 1.0.0 : Python Package Index</title> 
  <meta content=""> 
  <meta content="Library to convert the Facebook Draft.js editor's raw ContentState to HTML"> 
  <link rel="alternate" type="application/rss+xml" title="RSS: 40 latest updates" href="https://pypi.python.org/pypi?:action=rss"> 
  <link rel="alternate" type="application/rss+xml" title="RSS: 40 newest packages" href="https://pypi.python.org/pypi?:action=packages_rss"> 
  <link rel="stylesheet" media="screen" href="/static/styles/screen-switcher-default.css" type="text/css"> 
  <link media="screen" href="/static/styles/netscape4.css" type="text/css" rel="stylesheet"> 
  <link media="print" href="/static/styles/print.css" type="text/css" rel="stylesheet"> 
  <link media="screen" href="/static/styles/largestyles.css" type="text/css" rel="alternate stylesheet" title="large text"> 
  <link media="screen" href="/static/styles/defaultfonts.css" type="text/css" rel="alternate stylesheet" title="default fonts"> 
  <link rel="stylesheet" media="screen" href="/static/css/docutils.css" type="text/css"> 
  <link rel="stylesheet" media="screen" href="/static/css/pygments.css" type="text/css"> 
  <!-- allow pypi to override the standard pydotorg/docutils/etc. styles --> 
  <link rel="stylesheet" href="/static/css/pypi.css" type="text/css"> 
  <link media="screen" rel="stylesheet" href="/static/css/pypi-screen.css" type="text/css"> 
  <meta name="google-site-verification" content="NSgF04qslVV4P7nymxJDSkWVK09zfdPTxgZfU3dNSoQ"> 
  <meta name="description" content="Library to convert the Facebook Draft.js editor's raw ContentState to HTML"> 
  <link rel="meta" title="DOAP" type="application/rdf+xml" href="/pypi?:action=doap&amp;name=draftjs_exporter&amp;version=1.0.0"> 
  <style type="text/css">
  table.form th {white-space: pre;}
 </style> 
  <style type="text/css">
       </style> 
 </head> 
 <body> 
  <!--  Logo  --> 
  <h1 id="logoheader"> <a accesskey="1" href="http://www.python.org" id="logolink"> <img src="/static/images/python-logo.png" alt="homepage" border="0" id="logo"> </a> </h1> 
  <!--  Skip to Navigation  --> 
  <div class="skiptonav">
   <a accesskey="2" href="#left-hand-navigation"><img src="/static/images/trans.gif" alt="skip to navigation" border="0" id="skiptonav"></a>
  </div> 
  <div class="skiptonav">
   <a accesskey="3" href="#content-body"><img src="/static/images/trans.gif" alt="skip to content" border="0" id="skiptocontent"></a>
  </div> 
  <!--  Utility Menu  --> 
  <div id="utility-menu"> 
   <!--  Search Box  --> 
   <div id="searchbox"> 
    <form id="searchform" method="get" name="searchform" action="/pypi"> 
     <input type="hidden" name=":action" value="search"> 
     <div id="search"> 
      <input class="input-text" id="term" name="term" autofocus> 
      <input class="input-button" type="submit" name="submit" value="search" id="submit"> 
     </div> 
    </form> 
   </div> 
   <!-- XXX: reinstate this       <div id="screen-switcher"></div> --> 
  </div> 
  <div id="left-hand-navigation"> 
   <!--  Main Menu NEED LEVEL TWO HEADER AND FOOTER --> 
   <div id="menu"> 
    <ul class="level-one"> 
     <li class="selected"> <a class="selected" href="/pypi">Package Index</a> 
      <ul class="level-two"> 
       <li class=""><a class="" href="/pypi?%3Aaction=browse">Browse&nbsp;packages</a></li> 
       <li class=""><a class="" href="/pypi?%3Aaction=list_classifiers">List&nbsp;trove&nbsp;classifiers</a></li> 
       <li class=""><a class="" href="/pypi?%3Aaction=rss">RSS&nbsp;(latest&nbsp;40&nbsp;updates)</a></li> 
       <li class=""><a class="" href="/pypi?%3Aaction=packages_rss">RSS&nbsp;(newest&nbsp;40&nbsp;packages)</a></li> 
       <li><a href="/tos">Terms of Service</a></li> 
       <li><a href="http://wiki.python.org/moin/CheeseShopTutorial">PyPI Tutorial</a></li> 
       <li><a href="/security">PyPI Security</a></li> 
       <li><a href="http://sourceforge.net/tracker/?group_id=66150&amp;atid=513504">PyPI Support</a></li> 
       <li><a href="https://github.com/pypa/pypi-legacy/issues">PyPI Bug Reports</a></li> 
       <li><a href="http://www.python.org/sigs/distutils-sig/">PyPI Discussion</a></li> 
       <li><a href="http://wiki.python.org/moin/CheeseShopDev">PyPI Developer Info</a></li> 
      </ul> </li> 
     <li class=""><a href="http://www.python.org/about" class="" title="About The Python Language">About</a> </li>
     <li class=""><a href="http://www.python.org/news" class="" title="">News</a> </li>
     <li class=""><a href="http://www.python.org/doc" class="" title="">Documentation</a> </li>
     <li class=""><a href="http://www.python.org/download" title="">Download</a> </li>
     <li class=""><a href="http://www.python.org/community" class="" title="">Community</a> </li>
     <li class=""><a href="http://www.python.org/psf" class="" title="Python Software Foundation">Foundation</a> </li>
     <li class=""><a href="http://www.python.org/dev" class="" title="Python Core Language Development">Core Development</a> </li> 
    </ul> 
   </div> 
  </div> 
  <div id="content-body"> 
   <div id="body-main"> 
    <div id="content"> 
     <div id="breadcrumb"> 
      <a href="/pypi">Package Index</a> 
      <span class="breadcrumb-separator">&gt;</span> 
      <a href="/pypi/draftjs_exporter">draftjs_exporter</a> 
      <span class="breadcrumb-separator">&gt;</span> 
      <a href="/pypi/draftjs_exporter/1.0.0">1.0.0</a> 
     </div> 
     <div id="document-floating"> 
      <div id="document-navigation" style="overflow-y: auto; max-height: 15em; overflow-x: hidden;"> 
       <h4>Not Logged In</h4> 
       <ul> 
        <li><a href="/pypi?%3Aaction=login_form">Login</a></li> 
        <li><a href="/pypi?%3Aaction=register_form">Register</a></li> 
        <li><a href="/pypi?%3Aaction=forgotten_password_form">Lost Login?</a></li> 
        <li><a href="/openid_login">Login with OpenID</a> <a style="border: none;" href="/openid_login?provider=Launchpad"><img width="16" height="16" alt="Launchpad" src="https://launchpad.net/@@/launchpad.png" title="Launchpad"></a> </li> 
        <li><a href="/google_login">Login with Google<img width="16" height="16" src="https://www.google.com/favicon.ico" title="Google Login" alt="Google Login"></a></li> 
       </ul> 
       <div id="statusdiv"> 
       </div> 
      </div> 
     </div> 
     <div class="section"> 
      <h1>draftjs_exporter 1.0.0</h1> 
      <div id="download-button"> 
       <a class="button green" style="float:right;" href="https://pypi.python.org/packages/0d/3d/ac2d8aae353aefc674ac6cf6bd98250af8310879c5ca4377aebe30c6fa7f/draftjs_exporter-1.0.0.tar.gz">Download<br> <span style="font-size: 75%">draftjs_exporter-1.0.0.tar.gz</span> </a> 
      </div> 
      <p style="font-style: italic">Library to convert the Facebook Draft.js editor's raw ContentState to HTML</p> 
      <a href="https://pypi.python.org/pypi/draftjs_exporter" rel="nofollow"><img src="https://img.shields.io/pypi/v/draftjs_exporter.svg"> </a> 
      <a href="https://travis-ci.org/springload/draftjs_exporter" rel="nofollow"><img src="https://travis-ci.org/springload/draftjs_exporter.svg?branch=master"></a> 
      <a href="https://coveralls.io/github/springload/draftjs_exporter?branch=master" rel="nofollow"><img src="https://coveralls.io/repos/github/springload/draftjs_exporter/badge.svg?branch=master"></a> 
      <div id="draftjs-exporter"> 
       <h2>draftjs_exporter ?</h2> 
       <blockquote>
         Library to convert the Facebook Draft.js editor’s raw ContentState to HTML.
       </blockquote> 
       <p>It is developed alongside the <a href="https://github.com/springload/draftail/" rel="nofollow">Draftail</a> rich text editor, for integration into <a href="https://wagtail.io/" rel="nofollow">Wagtail</a>. Check out <a href="https://github.com/springload/wagtaildraftail" rel="nofollow">wagtaildraftail</a> and the <a href="https://draftjs-exporter.herokuapp.com/" rel="nofollow">online demo</a>!</p> 
       <div id="features"> 
        <h3>Features</h3> 
        <p>This project adheres to <a href="http://semver.org/spec/v2.0.0.html" rel="nofollow">Semantic Versioning</a>, and measures performance and <a href="https://coveralls.io/github/springload/draftjs_exporter" rel="nofollow">code coverage</a>.</p> 
        <ul> 
         <li>Extensive configuration of the generated HTML.</li> 
         <li>Default, extensible block &amp; inline style maps for common HTML elements.</li> 
         <li>Convert line breaks to <tt>&lt;br&gt;</tt> elements.</li> 
         <li>Define any attribute in the block map – custom class names for elements.</li> 
         <li>React-like API to create custom components.</li> 
         <li>Automatic conversion of entity data to HTML attributes (int &amp; boolean to string, style object to style string).</li> 
         <li>Nested lists (<tt>&lt;li&gt;</tt> elements go inside <tt>&lt;ul&gt;</tt> or <tt>&lt;ol&gt;</tt>, with multiple levels).</li> 
         <li>Output inline styles as inline elements (<tt>&lt;em&gt;</tt>, <tt>&lt;strong&gt;</tt>, pick and choose, with any attribute).</li> 
         <li>Overlapping inline style and entity ranges.</li> 
        </ul> 
       </div> 
       <div id="usage"> 
        <h3>Usage</h3> 
        <p>Draft.js stores data in a JSON representation based on blocks, representing lines of content in the editor, annotated with entities and styles to represent rich text. For more information, <a href="https://medium.com/@rajaraodv/how-draft-js-represents-rich-text-data-eeabb5f25cf2" rel="nofollow">this article</a> covers the concepts further.</p> 
        <div id="getting-started"> 
         <h4>Getting started</h4> 
         <p>This exporter takes the Draft.js ContentState data as input, and outputs HTML based on its configuration. To get started, install the package:</p> 
         <pre>pip install draftjs_exporter
</pre> 
         <p>In your code, create an exporter and use the <tt>render</tt> method to create HTML:</p> 
         <pre><span class="kn">from</span> <span class="nn">draftjs_exporter.dom</span> <span class="kn">import</span> <span class="n">DOM</span>
<span class="kn">from</span> <span class="nn">draftjs_exporter.html</span> <span class="kn">import</span> <span class="n">HTML</span>

<span class="c1"># Configuration options are detailed below.</span>
<span class="n">config</span> <span class="o">=</span> <span class="p">{}</span>

<span class="c1"># Initialise the exporter.</span>
<span class="n">exporter</span> <span class="o">=</span> <span class="n">HTML</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>

<span class="c1"># Render a Draft.js `contentState`</span>
<span class="n">html</span> <span class="o">=</span> <span class="n">exporter</span><span class="o">.</span><span class="n">render</span><span class="p">({</span>
    <span class="s1">'entityMap'</span><span class="p">:</span> <span class="p">{},</span>
    <span class="s1">'blocks'</span><span class="p">:</span> <span class="p">[{</span>
        <span class="s1">'key'</span><span class="p">:</span> <span class="s1">'6mgfh'</span><span class="p">,</span>
        <span class="s1">'text'</span><span class="p">:</span> <span class="s1">'Hello, world!'</span><span class="p">,</span>
        <span class="s1">'type'</span><span class="p">:</span> <span class="s1">'unstyled'</span><span class="p">,</span>
        <span class="s1">'depth'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="s1">'inlineStyleRanges'</span><span class="p">:</span> <span class="p">[],</span>
        <span class="s1">'entityRanges'</span><span class="p">:</span> <span class="p">[]</span>
    <span class="p">}]</span>
<span class="p">})</span>

<span class="k">print</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</pre> 
         <p>You can also run an example by downloading this repository and then using <tt>python example.py</tt>, or by using our <a href="https://draftjs-exporter.herokuapp.com/" rel="nofollow">online demo</a>.</p> 
        </div> 
        <div id="configuration"> 
         <h4>Configuration</h4> 
         <p>The exporter output is extensively configurable to cater for varied rich text requirements.</p> 
         <pre><span class="c1"># draftjs_exporter provides default configurations and predefined constants for reuse.</span>
<span class="kn">from</span> <span class="nn">draftjs_exporter.constants</span> <span class="kn">import</span> <span class="n">BLOCK_TYPES</span><span class="p">,</span> <span class="n">ENTITY_TYPES</span>
<span class="kn">from</span> <span class="nn">draftjs_exporter.defaults</span> <span class="kn">import</span> <span class="n">BLOCK_MAP</span><span class="p">,</span> <span class="n">STYLE_MAP</span>
<span class="kn">from</span> <span class="nn">draftjs_exporter.dom</span> <span class="kn">import</span> <span class="n">DOM</span>

<span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1"># `block_map` is a mapping from Draft.js block types to a definition of their HTML representation.</span>
    <span class="c1"># Extend BLOCK_MAP to start with sane defaults, or make your own from scratch.</span>
    <span class="s1">'block_map'</span><span class="p">:</span> <span class="nb">dict</span><span class="p">(</span><span class="n">BLOCK_MAP</span><span class="p">,</span> <span class="o">**</span><span class="p">{</span>
        <span class="c1"># The most basic mapping format, block type to tag name.</span>
        <span class="n">BLOCK_TYPES</span><span class="o">.</span><span class="n">HEADER_TWO</span><span class="p">:</span> <span class="s1">'h2'</span><span class="p">,</span>
        <span class="c1"># Use a dict to define props on the block.</span>
        <span class="n">BLOCK_TYPES</span><span class="o">.</span><span class="n">HEADER_THREE</span><span class="p">:</span> <span class="p">{</span><span class="s1">'element'</span><span class="p">:</span> <span class="s1">'h3'</span><span class="p">,</span> <span class="s1">'props'</span><span class="p">:</span> <span class="p">{</span><span class="s1">'class'</span><span class="p">:</span> <span class="s1">'u-text-center'</span><span class="p">}},</span>
        <span class="c1"># Add a wrapper (and wrapper_props) to wrap adjacent blocks.</span>
        <span class="n">BLOCK_TYPES</span><span class="o">.</span><span class="n">UNORDERED_LIST_ITEM</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">'element'</span><span class="p">:</span> <span class="s1">'li'</span><span class="p">,</span>
            <span class="s1">'wrapper'</span><span class="p">:</span> <span class="s1">'ul'</span><span class="p">,</span>
            <span class="s1">'wrapper_props'</span><span class="p">:</span> <span class="p">{</span><span class="s1">'class'</span><span class="p">:</span> <span class="s1">'bullet-list'</span><span class="p">},</span>
        <span class="p">},</span>
        <span class="c1"># Use a custom component for more flexibility (reading block data or depth).</span>
        <span class="n">BLOCK_TYPES</span><span class="o">.</span><span class="n">BLOCKQUOTE</span><span class="p">:</span> <span class="n">Blockquote</span><span class="p">,</span>
        <span class="n">BLOCK_TYPES</span><span class="o">.</span><span class="n">ORDERED_LIST_ITEM</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">'element'</span><span class="p">:</span> <span class="n">ListItem</span><span class="p">,</span>
            <span class="s1">'wrapper'</span><span class="p">:</span> <span class="n">OrderedList</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># Provide a fallback component (advanced).</span>
        <span class="n">BLOCK_TYPES</span><span class="o">.</span><span class="n">FALLBACK</span><span class="p">:</span> <span class="n">BlockFallback</span>
    <span class="p">}),</span>
    <span class="c1"># `style_map` defines the HTML representation of inline elements.</span>
    <span class="c1"># Extend STYLE_MAP to start with sane defaults, or make your own from scratch.</span>
    <span class="s1">'style_map'</span><span class="p">:</span> <span class="nb">dict</span><span class="p">(</span><span class="n">STYLE_MAP</span><span class="p">,</span> <span class="o">**</span><span class="p">{</span>
        <span class="c1"># Use the same mapping format as in the `block_map`.</span>
        <span class="s1">'KBD'</span><span class="p">:</span> <span class="s1">'kbd'</span><span class="p">,</span>
        <span class="c1"># The `style` prop can be defined as a dict, that will automatically be converted to a string.</span>
        <span class="s1">'HIGHLIGHT'</span><span class="p">:</span> <span class="p">{</span><span class="s1">'element'</span><span class="p">:</span> <span class="s1">'strong'</span><span class="p">,</span> <span class="s1">'props'</span><span class="p">:</span> <span class="p">{</span><span class="s1">'style'</span><span class="p">:</span> <span class="p">{</span><span class="s1">'textDecoration'</span><span class="p">:</span> <span class="s1">'underline'</span><span class="p">}}},</span>
    <span class="p">}),</span>
    <span class="s1">'entity_decorators'</span><span class="p">:</span> <span class="p">{</span>
        <span class="c1"># Map entities to components so they can be rendered with their data.</span>
        <span class="n">ENTITY_TYPES</span><span class="o">.</span><span class="n">IMAGE</span><span class="p">:</span> <span class="n">Image</span><span class="p">,</span>
        <span class="c1"># Components can be defined as classes to receive extra parameters.</span>
        <span class="n">ENTITY_TYPES</span><span class="o">.</span><span class="n">LINK</span><span class="p">:</span> <span class="n">Link</span><span class="p">(</span><span class="n">use_new_window</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span>
        <span class="c1"># Lambdas work too.</span>
        <span class="n">ENTITY_TYPES</span><span class="o">.</span><span class="n">HORIZONTAL_RULE</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">props</span><span class="p">:</span> <span class="n">DOM</span><span class="o">.</span><span class="n">create_element</span><span class="p">(</span><span class="s1">'hr'</span><span class="p">),</span>
        <span class="c1"># Discard those entities.</span>
        <span class="n">ENTITY_TYPES</span><span class="o">.</span><span class="n">EMBED</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>
        <span class="c1"># Provide a fallback component (advanced).</span>
        <span class="n">ENTITY_TYPES</span><span class="o">.</span><span class="n">FALLBACK</span><span class="p">:</span> <span class="n">EntityFallback</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="s1">'composite_decorators'</span><span class="p">:</span> <span class="p">[</span>
        <span class="c1"># Use composite decorators to replace text based on a regular expression.</span>
        <span class="n">BR</span><span class="p">,</span>
        <span class="n">Hashtag</span><span class="p">,</span>
        <span class="n">Linkify</span><span class="p">,</span>
    <span class="p">],</span>
<span class="p">}</span>
</pre> 
         <p>See <tt>examples.py</tt> in the repository for more details.</p> 
        </div> 
       </div> 
       <div id="advanced-usage"> 
        <h3>Advanced usage</h3> 
        <div id="custom-components"> 
         <h4>Custom components</h4> 
         <p>To produce arbitrary markup with dynamic data, draftjs_exporter comes with an API to create rendering components. This API mirrors React’s <a href="https://facebook.github.io/react/docs/top-level-api.html#react.createelement" rel="nofollow">createElement</a> API (what JSX compiles to).</p> 
         <pre><span class="c1"># All of the API is available from a single `DOM` namespace</span>
<span class="kn">from</span> <span class="nn">draftjs_exporter.dom</span> <span class="kn">import</span> <span class="n">DOM</span>


<span class="c1"># Components are simple functions that take `props` as parameter and return DOM elements.</span>
<span class="k">def</span> <span class="nf">Image</span><span class="p">(</span><span class="n">props</span><span class="p">):</span>
    <span class="c1"># This component creates an image element, with the relevant attributes.</span>
    <span class="k">return</span> <span class="n">DOM</span><span class="o">.</span><span class="n">create_element</span><span class="p">(</span><span class="s1">'img'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s1">'src'</span><span class="p">:</span> <span class="n">props</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'src'</span><span class="p">),</span>
        <span class="s1">'width'</span><span class="p">:</span> <span class="n">props</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'width'</span><span class="p">),</span>
        <span class="s1">'height'</span><span class="p">:</span> <span class="n">props</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'height'</span><span class="p">),</span>
        <span class="s1">'alt'</span><span class="p">:</span> <span class="n">props</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'alt'</span><span class="p">),</span>
    <span class="p">})</span>


<span class="k">def</span> <span class="nf">Blockquote</span><span class="p">(</span><span class="n">props</span><span class="p">):</span>
    <span class="c1"># This component uses block data to render a blockquote.</span>
    <span class="n">block_data</span> <span class="o">=</span> <span class="n">props</span><span class="p">[</span><span class="s1">'block'</span><span class="p">][</span><span class="s1">'data'</span><span class="p">]</span>

    <span class="c1"># Here, we want to display the block's content so we pass the `children` prop as the last parameter.</span>
    <span class="k">return</span> <span class="n">DOM</span><span class="o">.</span><span class="n">create_element</span><span class="p">(</span><span class="s1">'blockquote'</span><span class="p">,</span> <span class="p">{</span>
        <span class="s1">'cite'</span><span class="p">:</span> <span class="n">block_data</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'cite'</span><span class="p">)</span>
    <span class="p">},</span> <span class="n">props</span><span class="p">[</span><span class="s1">'children'</span><span class="p">])</span>


<span class="k">class</span> <span class="nc">Button</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">props</span><span class="p">):</span>
        <span class="n">href</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'href'</span><span class="p">,</span> <span class="s1">'#'</span><span class="p">)</span>
        <span class="n">icon</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'icon'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">props</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s1">'text'</span><span class="p">,</span> <span class="s1">''</span><span class="p">)</span>

        <span class="c1"># There can be as many `children` as required.</span>
        <span class="c1"># It is also possible to reuse other components and render them instead of HTML tags.</span>
        <span class="k">return</span> <span class="n">DOM</span><span class="o">.</span><span class="n">create_element</span><span class="p">(</span>
            <span class="s1">'a'</span><span class="p">,</span>
            <span class="p">{</span><span class="s1">'class'</span><span class="p">:</span> <span class="s1">'icon-text'</span> <span class="k">if</span> <span class="n">icon</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span> <span class="s1">'href'</span><span class="p">:</span> <span class="n">href</span><span class="p">},</span>
            <span class="n">DOM</span><span class="o">.</span><span class="n">create_element</span><span class="p">(</span><span class="n">Icon</span><span class="p">,</span> <span class="p">{</span><span class="s1">'name'</span><span class="p">:</span> <span class="n">icon</span><span class="p">})</span> <span class="k">if</span> <span class="n">icon</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">DOM</span><span class="o">.</span><span class="n">create_element</span><span class="p">(</span><span class="s1">'span'</span><span class="p">,</span> <span class="p">{</span><span class="s1">'class'</span><span class="p">:</span> <span class="s1">'icon-text__text'</span><span class="p">},</span> <span class="n">text</span><span class="p">)</span> <span class="k">if</span> <span class="n">icon</span> <span class="k">else</span> <span class="n">text</span>
        <span class="p">)</span>
</pre> 
         <p>Apart from <tt>create_element</tt>, a <tt>parse_html</tt> method is also available. Use it to interface with other HTML generators, like template engines.</p> 
         <p>See <tt>examples.py</tt> in the repository for more details.</p> 
        </div> 
        <div id="fallback-components"> 
         <h4>Fallback components</h4> 
         <p>When dealing with changes in the content schema, as part of ongoing development or migrations, some content can go stale. To solve this, the exporter allows the definition of fallback components for blocks, styles, and entities. This feature is only used for development at the moment, if you have a use case for this in production we would love to hear from you. Please get in touch!</p> 
         <p>Add the following to the exporter config,</p> 
         <pre><span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">'block_map'</span><span class="p">:</span> <span class="nb">dict</span><span class="p">(</span><span class="n">BLOCK_MAP</span><span class="p">,</span> <span class="o">**</span><span class="p">{</span>
        <span class="c1"># Provide a fallback for block types.</span>
        <span class="n">BLOCK_TYPES</span><span class="o">.</span><span class="n">FALLBACK</span><span class="p">:</span> <span class="n">BlockFallback</span>
    <span class="p">}),</span>
<span class="p">}</span>
</pre> 
         <p>This fallback component can now control the exporter behavior when normal components are not found. Here is an example:</p> 
         <pre><span class="k">def</span> <span class="nf">BlockFallback</span><span class="p">(</span><span class="n">props</span><span class="p">):</span>
    <span class="n">type_</span> <span class="o">=</span> <span class="n">props</span><span class="p">[</span><span class="s1">'block'</span><span class="p">][</span><span class="s1">'type'</span><span class="p">]</span>

    <span class="k">if</span> <span class="n">type_</span> <span class="o">==</span> <span class="s1">'example-discard'</span><span class="p">:</span>
        <span class="n">logging</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s1">'Missing config for "</span><span class="si">%s</span><span class="s1">". Discarding block, keeping content.'</span> <span class="o">%</span> <span class="n">type_</span><span class="p">)</span>
        <span class="c1"># Directly return the block's children to keep its content.</span>
        <span class="k">return</span> <span class="n">props</span><span class="p">[</span><span class="s1">'children'</span><span class="p">]</span>
    <span class="k">elif</span> <span class="n">type_</span> <span class="o">==</span> <span class="s1">'example-delete'</span><span class="p">:</span>
        <span class="n">logging</span><span class="o">.</span><span class="n">error</span><span class="p">(</span><span class="s1">'Missing config for "</span><span class="si">%s</span><span class="s1">". Deleting block.'</span> <span class="o">%</span> <span class="n">type_</span><span class="p">)</span>
        <span class="c1"># Return None to not render anything, removing the whole block.</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">logging</span><span class="o">.</span><span class="n">warn</span><span class="p">(</span><span class="s1">'Missing config for "</span><span class="si">%s</span><span class="s1">". Using div instead.'</span> <span class="o">%</span> <span class="n">type_</span><span class="p">)</span>
        <span class="c1"># Provide a fallback.</span>
        <span class="k">return</span> <span class="n">DOM</span><span class="o">.</span><span class="n">create_element</span><span class="p">(</span><span class="s1">'div'</span><span class="p">,</span> <span class="p">{},</span> <span class="n">props</span><span class="p">[</span><span class="s1">'children'</span><span class="p">])</span>
</pre> 
         <p>See <tt>examples.py</tt> in the repository for more details.</p> 
        </div> 
        <div id="lxml-backing-engine"> 
         <h4>lxml backing engine</h4> 
         <p>By default the exporter uses <tt>html5lib</tt> via BeautifulSoup to build DOM tree. <tt>lxml</tt> is also supported. lxml is more performant, but it requires <tt>libxml2</tt> and <cite>libxslt`</cite> to be available on your system.</p> 
         <pre><span class="c1"># Use the `lxml` extra to install the exporter and its lxml dependencies:
</span>pip install draftjs_exporter<span class="o">[</span>lxml<span class="o">]</span>
</pre> 
         <p>Add the following to the exporter config:</p> 
         <pre><span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
    <span class="c1"># Specify which DOM backing engine to use.</span>
    <span class="s1">'engine'</span><span class="p">:</span> <span class="s1">'lxml'</span><span class="p">,</span>
<span class="p">}</span>
</pre> 
        </div> 
        <div id="custom-backing-engines"> 
         <h4>Custom backing engines</h4> 
         <p>The exporter supports using custom engines to generate its output via the <tt>DOM</tt> API. This feature is only used for development at the moment, if you have a use case for this in production we would love to hear from you. Please get in touch!</p> 
         <p>Here is an example implementation:</p> 
         <pre><span class="kn">from</span> <span class="nn">draftjs_exporter</span> <span class="kn">import</span> <span class="n">DOMEngine</span>

<span class="k">class</span> <span class="nc">DOMListTree</span><span class="p">(</span><span class="n">DOMEngine</span><span class="p">):</span>
    <span class="sd">"""
    Element tree using nested lists.
    """</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">create_tag</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">attr</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">t</span><span class="p">,</span> <span class="n">attr</span><span class="p">,</span> <span class="p">[]]</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">append_child</span><span class="p">(</span><span class="n">elt</span><span class="p">,</span> <span class="n">child</span><span class="p">):</span>
        <span class="n">elt</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">elt</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">elt</span>


<span class="n">exporter</span> <span class="o">=</span> <span class="n">HTML</span><span class="p">({</span><span class="s1">'engine'</span><span class="p">:</span> <span class="n">DOMListTree</span><span class="p">})</span>
</pre> 
        </div> 
       </div> 
       <div id="development"> 
        <h3>Development</h3> 
        <div id="installation"> 
         <h4>Installation</h4> 
         <blockquote>
           Requirements: 
          <tt>virtualenv</tt>, 
          <tt>pyenv</tt>, 
          <tt>twine</tt>
         </blockquote> 
         <pre>git clone git@github.com:springload/draftjs_exporter.git
<span class="nb">cd</span> draftjs_exporter/
<span class="c1"># Install the git hooks.
</span>./.githooks/deploy
<span class="c1"># Install the Python environment.
</span>virtualenv .venv
<span class="nb">source</span> ./.venv/bin/activate
make init
<span class="c1"># Install required Python versions
</span>pyenv install --skip-existing 2.7.11
    pyenv install --skip-existing 3.4.4
    pyenv install --skip-existing 3.5.1
<span class="c1"># Make required Python versions available globally.
</span>pyenv global system 2.7.11 3.4.4 3.5.1
</pre> 
        </div> 
        <div id="commands"> 
         <h4>Commands</h4> 
         <pre>make <span class="nb">help</span>            <span class="c1"># See what commands are available.
</span>make init            <span class="c1"># Install dependencies and initialise for development.
</span>make lint            <span class="c1"># Lint the project.
</span>make <span class="nb">test</span>            <span class="c1"># Test the project.
</span>make test-watch      <span class="c1"># Restarts the tests whenever a file changes.
</span>make test-coverage   <span class="c1"># Run the tests while generating test coverage data.
</span>make test-ci         <span class="c1"># Continuous integration test suite.
</span>make dev             <span class="c1"># Restarts the example whenever a file changes.
</span>make clean-pyc       <span class="c1"># Remove Python file artifacts.
</span>make publish         <span class="c1"># Publishes a new version to pypi.</span>
</pre> 
        </div> 
        <div id="debugging"> 
         <h4>Debugging</h4> 
         <ul> 
          <li>Always run the tests. <tt>npm install <span class="pre">-g</span> nodemon</tt>, then <tt>make <span class="pre">test-watch</span></tt>.</li> 
          <li>Use a debugger. <tt>pip install ipdb</tt>, then <tt>import ipdb; ipdb.set_trace()</tt>.</li> 
         </ul> 
        </div> 
        <div id="releases"> 
         <h4>Releases</h4> 
         <ul> 
          <li>Make a new branch for the release of the new version.</li> 
          <li>Update the <a href="https://github.com/springload/draftjs_exporter/CHANGELOG.md" rel="nofollow">CHANGELOG</a>.</li> 
          <li>Update the version number in <tt>draftjs_exporter/__init__.py</tt>, following semver.</li> 
          <li>Make a PR and squash merge it.</li> 
          <li>Back on master with the PR merged, use <tt>make publish</tt> (confirm, and enter your password).</li> 
          <li>Finally, go to GitHub and create a release and a tag for the new version.</li> 
          <li>Done!</li> 
         </ul> 
        </div> 
       </div> 
       <div id="documentation"> 
        <h3>Documentation</h3> 
        <blockquote>
          See the 
         <a href="https://github.com/springload/draftjs_exporter/docs/" rel="nofollow">docs</a> folder.
        </blockquote> 
       </div> 
      </div> 
      <a name="downloads">&nbsp;</a> 
      <table class="list" style="margin-bottom: 10px;"> 
       <tbody>
        <tr> 
         <th>File</th> 
         <th>Type</th> 
         <th>Py Version</th> 
         <th>Uploaded on</th> 
         <th style="text-align: right;">Size</th> 
        </tr> 
        <tr class="odd"> 
         <td> <span style="white-space: nowrap;"> <a href="https://pypi.python.org/packages/0d/3d/ac2d8aae353aefc674ac6cf6bd98250af8310879c5ca4377aebe30c6fa7f/draftjs_exporter-1.0.0.tar.gz#md5=ac36e1b62ce26e4342ec99d87fce8db2">draftjs_exporter-1.0.0.tar.gz</a> (<a title="MD5 Digest" href="/pypi?:action=show_md5&amp;digest=ac36e1b62ce26e4342ec99d87fce8db2">md5</a>) </span> </td> 
         <td style="white-space: nowrap;"> Source </td> 
         <td> </td> 
         <td>2017-04-25</td> 
         <td style="text-align: right;">29KB</td> 
        </tr> 
        <tr>
         <td id="last" colspan="6"></td>
        </tr> 
       </tbody>
      </table> 
      <ul class="nodot"> 
       <li> <strong>Author:</strong> <span>Springload</span> </li> 
       <!-- The <th> elements below are a terrible terrible hack for setuptools --> 
       <li> <strong>Home Page:</strong> 
        <!-- <th>Home Page --> <a href="https://github.com/springload/draftjs_exporter">https://github.com/springload/draftjs_exporter</a> </li> 
       <li> <strong>License:</strong> <span>MIT</span> </li> 
       <!-- TODO: add link to products in follow dependencies... --> 
       <li> <strong>Categories</strong> 
        <ul class="nodot"> 
         <li> <a href="/pypi?:action=browse&amp;c=21">Environment :: Web Environment</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=30">Intended Audience :: Developers</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=69">License :: OSI Approved :: MIT License</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=156">Operating System :: OS Independent</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=214">Programming Language :: Python</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=532">Programming Language :: Python :: 2.7</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=533">Programming Language :: Python :: 3</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=326">Topic :: Internet :: WWW/HTTP</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=328">Topic :: Internet :: WWW/HTTP :: Dynamic Content</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=335">Topic :: Internet :: WWW/HTTP :: Site Management</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=418">Topic :: Software Development :: Libraries :: Application Frameworks</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=423">Topic :: Software Development :: Libraries :: Python Modules</a> </li> 
         <li> <a href="/pypi?:action=browse&amp;c=488">Topic :: Text Editors :: Word Processors</a> </li> 
        </ul> </li> 
       <li> <strong>Package Index Owner:</strong> <span>springload, thibaudcolas</span> </li> 
       <li> <strong><a href="https://github.com/edumbill/doap/wiki">DOAP</a> record:</strong> <a href="/pypi?:action=doap&amp;name=draftjs_exporter&amp;version=1.0.0">draftjs_exporter-1.0.0.xml</a> </li> 
      </ul> 
     </div> 
    </div> 
    <div id="footer"> 
     <div id="credits"> 
      <div style="float: left; margin-right: 1em;" id="badges"> 
       <img src="https://img.shields.io/badge/ipv6-go!-green.svg" alt="ipv6 ready" title="ipv6 ready" border="0">
       <br> 
       <img src="https://img.shields.io/badge/http2-go!-green.svg" alt="http2 ready" title="http2 ready" border="0">
       <br> 
       <img src="/static/images/PythonPoweredAnimSmall.gif" alt="darn right it is" title="Python Powered" border="0"> 
      </div> 
      <div style="float: right" id="donations"> 
       <a href="http://www.python.org/about/website">Website maintained by the Python community</a>
       <br> 
       <a href="https://www.fastly.com/" title="Real-time CDN services provided by Fastly">Real-time CDN by Fastly</a> / 
       <a href="http://developer.rackspace.com/" title="Server hosting by Rackspace Open Source support">Hosting by Rackspace</a>
       <br> 
       <a href="https://aws.amazon.com/s3/" title="Object storage provided by Amazon S3">Object storage by Amazon S3</a> / 
       <a href="http://www.timparkin.co.uk/" title="Design by Tim Parkin, Yorkshire man, photographer and developer">Design by Tim Parkin</a> 
      </div> 
     </div> Copyright © 1990-2017, 
     <a href="http://www.python.org/psf">Python Software Foundation</a>
     <br> 
     <a href="https://pypi.org/policy/terms-of-use/">Terms of Use</a> 
    </div> 
   </div> 
  </div> 
  <script>
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-55961911-1', 'auto');
        ga('require', 'linkid', 'linkid.js');
        ga('send', 'pageview');
      </script> 
  <script type="text/javascript" src="//statuspage-production.s3.amazonaws.com/se-v2.js">
      </script> 
  <script type="text/javascript">
        var sp = new StatusPage.page({ page : '2p66nmmycsj3' });
        sp.summary({
          // <![CDATA[
          success: function(data) {
            var div = document.getElementById('statusdiv');
            var reports = "</br><h4 id='statusbox'>Status</h4>\n";
            var outage = 0;
            var maintenance = 0;
            for (i in data.incidents) {
              var incident = data.incidents[i];
              var message, status = incident.status;
              if (status === 'scheduled') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status === 'in_progress') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                reports += message;
                outage += 1;
              }
            }
            for (i in data.scheduled_maintenances) {
              var incident = data.scheduled_maintenances[i];
              var message, status = incident.status;
              if (status === 'scheduled') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' scheduled.</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status === 'in_progress') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ' is currently in progress.' + '</a></li>\n';
                reports += message;
                maintenance += 1;
              } else if (status !== 'resolved' && status !== 'postmortem' && status !== 'completed') {
                message = '<li><a href="' + incident.shortlink + '">' + incident.name + ': ' + incident.status + '</a></li>\n';
                reports += message;
                outage += 1;
              }
            }
            if (outage + maintenance === 0) {
              reports += "<li><a href='http://status.python.org'>Nothing to report</a></li>";
            }
            div.innerHTML=reports;
            if (outage > 0) {
              var statusbox = document.getElementById("statusbox");
              statusbox.style.background = '#FC234A';
            }
          }
          // ]]>
        });
      </script>   
 </body>
</html>