<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible"> 
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"> 
  <title>API Reference</title> 
  <link href="stylesheets/screen.css" rel="stylesheet" type="text/css" media="screen"> 
  <link href="stylesheets/print.css" rel="stylesheet" type="text/css" media="print"> 
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script> 
  <script src="javascripts/all.js" type="text/javascript"></script> 
  <script>
        $(function() {
          setupLanguages(["java","shell","javascript","php","ruby"]);
        });
      </script> 
 </head> 
 <body class="index"> 
  <!-- Google Tag Manager --> 
  <noscript>
   <iframe src="//www.googletagmanager.com/ns.html?id=GTM-4BLV" height="0" width="0" style="display:none;visibility:hidden"></iframe>
  </noscript> 
  <script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
    new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
    j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
    '//www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
    })(window,document,'script','dataLayer','GTM-4BLV');</script> 
  <!-- End Google Tag Manager --> 
  <a href="#" id="nav-button"> <span> NAV <img src="images/navbar.png"> </span> </a> 
  <div class="tocify-wrapper"> 
   <a href="https://www.paymenthighway.fi/"> <img width="180" src="images/logo.png"> </a> 
   <div class="lang-selector"> 
    <a href="#" data-language-name="java">Java</a> 
    <a href="#" data-language-name="shell"></a> 
    <a href="#" data-language-name="javascript">JavaScript</a> 
    <a href="#" data-language-name="php">PHP</a> 
    <a href="#" data-language-name="ruby"></a> 
   </div> 
   <div class="search"> 
    <input type="text" class="search" id="input-search" placeholder="Search"> 
   </div> 
   <ul class="search-results"></ul> 
   <div id="toc"> 
   </div> 
   <ul class="toc-footer"> 
    <li>API version 20160630</li> 
    <li><a href="https://www.paymenthighway.fi" target="_blank">Payment Highway</a></li> 
    <li><a href="https://www.solinor.fi" target="_blank">Solinor Oy</a> 2017</li> 
   </ul> 
  </div> 
  <div class="page-wrapper"> 
   <div class="dark-box"></div> 
   <div class="content"> 
    <h1 id="introduction">Introduction</h1> 
    <p>This is the API reference and example documentation for <a href="https://www.paymenthighway.fi/" target="_blank">Payment Highway</a>. The easy and enjoyable card payment solution for mobile and online.</p> 
    <p>Payment Highway API consists of two parts:</p> 
    <ul> 
     <li><a href="#form-api">Form API</a> - for displaying a secure card information input form</li> 
     <li><a href="#payment-api">Payment API</a> - for charging and refunding a card and for reporting</li> 
    </ul> 
    <h2 id="client-libraries">Client Libraries</h2> 
    <h3 id="java">Java</h3> 
    <p><a href="https://github.com/solinor/paymenthighway-java-lib.git" target="_blank">https://github.com/solinor/paymenthighway-java-lib.git</a></p> 
    <h3 id="php">PHP</h3> 
    <p><a href="https://github.com/solinor/paymenthighway-php-lib" target="_blank">https://github.com/solinor/paymenthighway-php-lib</a></p> 
    <h3 id="javascript">JavaScript</h3> 
    <p><a href="https://github.com/solinor/paymenthighway-javascript-lib" target="_blank">https://github.com/solinor/paymenthighway-javascript-lib</a></p> 
    <h2 id="examples">Examples</h2> 
    <h3 id="java">Java</h3> 
    <p><a href="https://github.com/solinor/paymenthighway-java-example-spring" target="_blank">A Simple Java Spring Example using the Client Library @ Github</a></p> 
    <ul> 
     <li><a href="http://merchant-example-spring.sph-test-solinor.com/" target="_blank">Live example. Try it out here!</a></li> 
    </ul> 
    <h3 id="javascript">JavaScript</h3> 
    <p><a href="https://github.com/solinor/paymenthighway-javascript-example" target="_blank">A simple JavaScript example using the JavaScript client library @ GitHub</a></p> 
    <h2 id="usage">Usage</h2> 
    <h3 id="make-a-payment">Make a Payment</h3> 
    <ol> 
     <li>Show the form with Form API <a href="#payment"><code class="prettyprint">POST /form/view/pay_with_card</code></a><br> —&gt; returns an <code class="prettyprint">sph-transaction-id</code> and <code class="prettyprint">signature</code> as a GET parameters to the given <code class="prettyprint">success-url</code></li> 
     <li>Commit the payment with Payment API <a href="#commit-payment"><code class="prettyprint">POST /transaction/&lt;sph-transaction-id&gt;/commit</code></a><br> —&gt; returns a result in JSON formatting</li> 
    </ol> 
    <h3 id="store-a-card">Store a Card</h3> 
    <ol> 
     <li>Show the form with Form API <a href="#add-card"><code class="prettyprint">POST /form/view/add_card</code></a><br> —&gt; returns an <code class="prettyprint">sph-tokenization-id</code> and <code class="prettyprint">signature</code> as a GET parameters to the given <code class="prettyprint">success-url</code></li> 
     <li>Get the card token with Payment API <a href="#tokenization"><code class="prettyprint">GET /tokenization/&lt;sph-tokenization-id&gt;</code></a><br> —&gt; returns a <code class="prettyprint">card_token</code> and card information in JSON formatting</li> 
    </ol> 
    <h3 id="pay-with-a-stored-card">Pay with a Stored Card</h3> 
    <ol> 
     <li>Initialize a transaction with Payment API <a href="#charge-a-card"><code class="prettyprint">POST /transaction</code></a><br> —&gt; returns a transaction <code class="prettyprint">id</code> in JSON formatting</li> 
     <li>Charge the card with Payment API <a href="#charge-a-card"><code class="prettyprint">POST /transaction/&lt;id&gt;/debit</code></a><br> —&gt; returns a result in JSON formatting</li> 
    </ol> 
    <h3 id="pay-with-mobilepay">Pay with MobilePay</h3> 
    <ol> 
     <li>Open MobilePay with Form API <a href="#payment-with-mobilepay"><code class="prettyprint">POST /form/view/mobilepay</code></a><br> -&gt; return an <code class="prettyprint">sph-transaction-id</code> and <code class="prettyprint">signature</code> as a GET parameters to the given <code class="prettyprint">success-url</code></li> 
     <li>Commit payment with Payment API <a href="#commit-payment"><code class="prettyprint">POST /transaction/&lt;sph-transaction-id&gt;/commit</code></a><br> —&gt; returns a result in JSON formatting</li> 
    </ol> 
    <aside class="success">
      Important! Always validate the form redirection *signature* parameter to prevent tampering of the values! 
    </aside> 
    <h1 id="development-sandbox">Development Sandbox</h1> 
    <h2 id="base-url">Base URL</h2> 
    <p>The Payment Highway Sandbox environment is accessed on<br> <code class="prettyprint">https://v1-hub-staging.sph-test-solinor.com/</code></p> 
    <h2 id="merchant-account">Merchant Account</h2> 
    <p>The Sandbox Merchant Account uses the following credentials:</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Value</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>test</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>test_merchantId</td> 
      </tr> 
      <tr> 
       <td>Account key</td> 
       <td>testKey</td> 
      </tr> 
      <tr> 
       <td>Account secret</td> 
       <td>testSecret</td> 
      </tr> 
     </tbody>
    </table> 
    <p>Take a look at the signature calculation examples in the <a href="#request-signature-calculation">Form API</a> and in the <a href="#signatures">Payment API</a>.</p> 
    <h2 id="sandbox-credit-cards">Sandbox credit cards</h2> 
    <p>There are predefined card numbers that are accepted in the sandbox environment. Each card serves a different purpose in testing the API. For general declines, just input an incorrect CVC or expiry date.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Card abilities</th> 
       <th>Card Number</th> 
       <th>Expiry date</th> 
       <th>CVC</th> 
       <th>Specialties</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>Tokenization&nbsp;OK<br>Payment&nbsp;OK</td> 
       <td>4153013999700024</td> 
       <td>11/2023</td> 
       <td>024</td> 
       <td>Debit card</td> 
      </tr> 
      <tr> 
       <td>Tokenization&nbsp;OK<br>Payment&nbsp;OK</td> 
       <td>5353299308701770</td> 
       <td>11/2023</td> 
       <td>770</td> 
       <td>Credit card</td> 
      </tr> 
      <tr> 
       <td>Tokenization&nbsp;OK<br>Payment&nbsp;FAIL</td> 
       <td>4153013999700156</td> 
       <td>11/2023</td> 
       <td>156</td> 
       <td>Insufficient funds in the test bank account</td> 
      </tr> 
      <tr> 
       <td>Tokenization&nbsp;FAIL<br>Payment&nbsp;FAIL</td> 
       <td>4920101111111113</td> 
       <td>11/2023</td> 
       <td>113</td> 
       <td>Online payments are disabled for the card. A form notification is displayed for the first N submits.<br>For example Nordea 492010* cards require the card holder to enable online payments in their e-banking services.</td> 
      </tr> 
      <tr> 
       <td>Tokenization&nbsp;DEPENDS<br>Payment&nbsp;DEPENDS</td> 
       <td>4324643990016048</td> 
       <td>11/2023</td> 
       <td>048</td> 
       <td>Requires CVC, tokenized payments without CVC fail.</td> 
      </tr> 
     </tbody>
    </table> 
    <h1 id="form-api">Form API</h1> 
    <p>Payment Highway Form API allows merchants to tokenize payment cards and create payments using an HTML form interface.</p> 
    <h2 id="request-and-response-format">Request and Response format</h2> 
    <pre class="highlight java"><code><span class="c1">// Create a FormBuilder</span>

<span class="n">String</span> <span class="n">method</span> <span class="o">=</span> <span class="s">"POST"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">signatureKeyId</span> <span class="o">=</span> <span class="s">"testKey"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">signatureSecret</span> <span class="o">=</span> <span class="s">"testSecret"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">account</span> <span class="o">=</span> <span class="s">"test"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">merchant</span> <span class="o">=</span> <span class="s">"test_merchantId"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">serviceUrl</span> <span class="o">=</span> <span class="s">"https://v1-hub-staging.sph-test-solinor.com"</span><span class="o">;</span>

<span class="n">FormBuilder</span> <span class="n">formBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FormBuilder</span><span class="o">(</span>
  <span class="n">method</span><span class="o">,</span> <span class="n">signatureKeyId</span><span class="o">,</span> <span class="n">signatureSecret</span><span class="o">,</span> <span class="n">account</span><span class="o">,</span> <span class="n">merchant</span><span class="o">,</span>
  <span class="n">serviceUrl</span>
<span class="o">);</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="sr">//</span> <span class="no">Create</span> <span class="n">a</span> <span class="no">FormBuilder</span>

<span class="n">signature_key_id</span> <span class="o">=</span> <span class="s2">"testKey"</span>
<span class="n">signature_secret</span> <span class="o">=</span> <span class="s2">"testSecret"</span>
<span class="n">account</span> <span class="o">=</span> <span class="s2">"test"</span>
<span class="n">merchant</span> <span class="o">=</span> <span class="s2">"test_merchantId"</span>
<span class="n">service_url</span> <span class="o">=</span> <span class="s2">"https://v1-hub-staging.sph-test-solinor.com"</span>
<span class="n">success_url</span> <span class="o">=</span> <span class="s2">"https://www.paymenthighway.fi/"</span>
<span class="n">failure_url</span> <span class="o">=</span> <span class="s2">"https://paymenthighway.fi/dev/"</span>
<span class="n">cancel_url</span> <span class="o">=</span> <span class="s2">"https://solinor.com/"</span>
<span class="n">language</span> <span class="o">=</span> <span class="s2">"EN"</span>

<span class="n">form_builder</span> <span class="o">=</span> <span class="no">PaymentHighway</span><span class="o">::</span><span class="no">FormBuilder</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span>
  <span class="n">signature_key_id</span><span class="p">,</span> <span class="n">signature_secret</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">merchant</span><span class="p">,</span>
  <span class="n">service_url</span><span class="p">,</span> <span class="n">success_url</span><span class="p">,</span> <span class="n">failure_url</span><span class="p">,</span> <span class="n">cancel_url</span><span class="p">,</span> <span class="n">language</span><span class="p">)</span>

</code></pre> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">paymentHighway</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'paymenthighway-javascript-lib'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">method</span> <span class="o">=</span> <span class="s1">'POST'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">testKey</span> <span class="o">=</span> <span class="s1">'testKey'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">testSecret</span> <span class="o">=</span> <span class="s1">'testSecret'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">account</span> <span class="o">=</span> <span class="s1">'test'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">merchant</span> <span class="o">=</span> <span class="s1">'test_merchantId'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">serviceUrl</span> <span class="o">=</span> <span class="s1">'https://v1-hub-staging.sph-test-solinor.com'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">formBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">paymentHighway</span><span class="p">.</span><span class="nx">FormBuilder</span><span class="p">(</span>
        <span class="nx">method</span><span class="p">,</span> 
        <span class="nx">testKey</span><span class="p">,</span> 
        <span class="nx">testSecret</span><span class="p">,</span> 
        <span class="nx">account</span><span class="p">,</span> 
        <span class="nx">merchant</span><span class="p">,</span> 
        <span class="nx">serviceUrl</span>
    <span class="p">);</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="k">use</span> <span class="nx">\Solinor\PaymentHighway\FormBuilder</span><span class="p">;</span>

<span class="nv">$method</span> <span class="o">=</span> <span class="s2">"POST"</span><span class="p">;</span>
<span class="nv">$signatureKeyId</span> <span class="o">=</span> <span class="s2">"testKey"</span><span class="p">;</span>
<span class="nv">$signatureSecret</span> <span class="o">=</span> <span class="s2">"testSecret"</span><span class="p">;</span>
<span class="nv">$account</span> <span class="o">=</span> <span class="s2">"test"</span><span class="p">;</span>
<span class="nv">$merchant</span> <span class="o">=</span> <span class="s2">"test_merchantId"</span><span class="p">;</span>
<span class="nv">$baseUrl</span> <span class="o">=</span> <span class="s2">"https://v1-hub-staging.sph-test-solinor.com"</span><span class="p">;</span>
<span class="nv">$successUrl</span> <span class="o">=</span> <span class="s2">"https://example.com/success"</span><span class="p">;</span>
<span class="nv">$failureUrl</span> <span class="o">=</span> <span class="s2">"https://example.com/failure"</span><span class="p">;</span>
<span class="nv">$cancelUrl</span> <span class="o">=</span> <span class="s2">"https://example.com/cancel"</span><span class="p">;</span>
<span class="nv">$language</span> <span class="o">=</span> <span class="s2">"EN"</span><span class="p">;</span>

<span class="nv">$formBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormBuilder</span><span class="p">(</span><span class="nv">$method</span><span class="p">,</span> 
    <span class="nv">$signatureKeyId</span><span class="p">,</span> 
    <span class="nv">$signatureSecret</span><span class="p">,</span> 
    <span class="nv">$account</span><span class="p">,</span>
    <span class="nv">$merchant</span><span class="p">,</span> 
    <span class="nv">$baseUrl</span><span class="p">,</span> 
    <span class="nv">$successUrl</span><span class="p">,</span> 
    <span class="nv">$failureUrl</span><span class="p">,</span>
    <span class="nv">$cancelUrl</span><span class="p">,</span> 
    <span class="nv">$language</span><span class="p">);</span>
</code></pre> 
    <h3 id="requests">Requests</h3> 
    <p>The “sph”-prefixed form fields and the <a href="#request-signature-calculation">request signature</a> should be calculated server side and set in the html form as hidden fields.</p> 
    <aside class="notice">
      Request method must be POST and the character set must be UTF-8. 
    </aside> 
    <h3 id="responses">Responses</h3> 
    <p>Responses are delivered to URLs given in the request and signed by using the same key as in the request. Response parameters are added as GET parameters to the URL.</p> 
    <p>When a user is redirected to the success-url, it means we have successfully completed processing of the request. It does not however mean the card payment or tokenization was accepted by the authorizing parties. You will find out the actual result using the PaymentAPI (server-to-server) <a href="#commit-payment"><code class="prettyprint">commit</code></a> or <a href="#tokenization"><code class="prettyprint">tokenization</code></a> requests.</p> 
    <p>A user is redirected to the failure-url, if processing of the request failed for example due to missing parameters, authentication issues or connectivity issues to the authorizing parties.</p> 
    <p>Important! Always validate the form redirection <em>signature</em> parameter to prevent tampering of the values!</p> 
    <h2 id="authentication">Authentication</h2> 
    <p>Authentication is based on a signature calculated from the merchant account information and from the other parameters prefixed with ‘sph’.</p> 
    <aside class="success">
      The client libraries take care of the signature calculation for you. You are safe to skip ahead unless you need to code the calculation yourself. 
    </aside> 
    <aside class="notice">
      The merchant secret key must be replaced every two years with a new one provided by Payment Highway. 
    </aside> 
    <h3 id="request-signature-calculation">Request signature calculation</h3> 
    <blockquote> 
     <p>Original POST data</p> 
    </blockquote> 
    <pre class="highlight plaintext"><code>POST
/form/view/pay_with_card
sph-account=test
sph-merchant=test_merchantId
sph-order=1000123A
sph-request-id=f47ac10b-58cc-4372-a567-0e02b2c3d479
sph-amount=990
sph-currency=EUR
sph-timestamp=2014-09-18T10:32:59Z
sph-success-url=https://merchant.example.com/payment/success
sph-failure-url=https://merchant.example.com/payment/failure
sph-cancel-url=https://merchant.example.com/payment/cancel
language=fi
description=Example payment of 10 balloons a? 0,99EUR
signature=SPH1 testKey 960aeec47d172637325b15513b3a526e95c93ba74b5067da766f282573464d58
</code></pre> 
    <blockquote> 
     <p>POST data included in the signature calculation, parameters sorted alphabetically</p> 
    </blockquote> 
    <pre class="highlight plaintext"><code>"POST
/form/view/pay_with_card
sph-account:test
sph-amount:990
sph-cancel-url:https://merchant.example.com/payment/cancel
sph-currency:EUR
sph-failure-url:https://merchant.example.com/payment/failure
sph-merchant:test_merchantId
sph-order:1000123A
sph-request-id:f47ac10b-58cc-4372-a567-0e02b2c3d479
sph-success-url:https://merchant.example.com/payment/success
sph-timestamp:2014-09-18T10:32:59Z
"
</code></pre> 
    <blockquote> 
     <p>Authentication hash using “testSecret” as the keyValue and POST data from above:<br> HMAC-SHA256(keyValue, data) =&gt;<br> 960aeec47d172637325b15513b3a526e95c93ba74b5067da766f282573464d58</p> 
    </blockquote> 
    <p>Signature is calculated from the request parameters with HMAC-SHA256 algorithm using one of the merchant secret keys. The signature value contains “SPH1”, the key ID and the calculated authentication hash as a hexadecimal string separated with spaces “ ” (0x20).</p> 
    <p>The authentication hash value is calculated from the authentication string using the chosen merchant secret key. The authentication string is formed from the request method, URI and the request parameters beginning with “sph-”-prefix. Values are trimmed and the key-value pairs are concatenated in alphabetical order by the key name. The parameter keys must be in lowercase. Each key and value is separated with a colon (“:”) and the different parameters are separated with a new line (“\n”) at the end of each value.</p> 
    <h3 id="response-redirection-signature-calculation-(success,-failure-and-cancel-urls)">Response redirection signature calculation (success, failure and cancel urls)</h3> 
    <pre class="highlight plaintext"><code>Form redirection response example:
</code></pre> 
    <blockquote> 
     <p>http://merchant-example-spring.sph-test-solinor.com/pay_with_card/success?sph-amount=1990&amp;signature=SPH1+testKey+8b9b2eb519e289016ff8b6bb6112901ad64238a8035b6b06a179a1bcb178947e&amp;sph-account=test&amp;sph-currency=EUR&amp;sph-merchant=test_merchantId&amp;sph-transaction-id=24806fe4-c0ed-4baa-9044-14b15457ea6e&amp;sph-order=1000123A&amp;sph-timestamp=2016-05-17T07%3A08%3A27Z&amp;sph-request-id=7475777a-b9f8-4c09-958c-b1ea47bdc0cb&amp;sph-success=OK</p> 
    </blockquote> 
    <pre class="highlight plaintext"><code>"GET

sph-account:test
sph-amount:1990
sph-currency:EUR
sph-merchant:test_merchantId
sph-order:1000123A
sph-request-id:7475777a-b9f8-4c09-958c-b1ea47bdc0cb
sph-success:OK
sph-timestamp:2016-05-17T07:08:27Z
sph-transaction-id:24806fe4-c0ed-4baa-9044-14b15457ea6e
"
</code></pre> 
    <blockquote> 
     <p>Authentication hash using “testSecret” as the keyValue and GET data from above:<br> HMAC-SHA256(keyValue, data) =&gt;<br> 8b9b2eb519e289016ff8b6bb6112901ad64238a8035b6b06a179a1bcb178947e</p> 
    </blockquote> 
    <pre class="highlight java"><code><span class="c1">// Validate the response signature</span>

<span class="n">SecureSigner</span> <span class="n">secureSigner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SecureSigner</span><span class="o">(</span><span class="n">signatureKeyId</span><span class="o">,</span> <span class="n">signatureSecret</span><span class="o">);</span>

<span class="k">if</span> <span class="o">(</span> <span class="o">!</span> <span class="n">secureSigner</span><span class="o">.</span><span class="na">validateFormRedirect</span><span class="o">(</span><span class="n">requestParams</span><span class="o">))</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="n">Exception</span><span class="o">(</span><span class="s">"Invalid signature!"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="c1">// Validate the response signature</span>

<span class="kd">var</span> <span class="nx">secureSigner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">paymentHighway</span><span class="p">.</span><span class="nx">SecureSigner</span><span class="p">(</span><span class="nx">testKey</span><span class="p">,</span> <span class="nx">testSecret</span><span class="p">);</span>

<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">secureSigner</span><span class="p">.</span><span class="nx">validateFormRedirect</span><span class="p">(</span><span class="nx">requestParams</span><span class="p">))</span> <span class="p">{</span>
    <span class="c1">// Handle error</span>
<span class="p">}</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="k">use</span> <span class="nx">Solinor\PaymentHighway\Model\Security\SecureSigner</span><span class="p">;</span>

<span class="nv">$secureSigner</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">SecureSigner</span><span class="p">(</span><span class="nx">signatureKeyId</span><span class="p">,</span> <span class="nx">signatureSecret</span><span class="p">);</span>

<span class="k">try</span><span class="p">{</span>
    <span class="nv">$secureSigner</span><span class="o">-&gt;</span><span class="na">validateFormRedirect</span><span class="p">(</span><span class="nv">$params</span><span class="p">))</span> <span class="p">{</span> 
<span class="p">}</span>
<span class="k">catch</span><span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Validation failed, handle here </span><span class="p">}</span>
</code></pre> 
    <p>Response parameters are formatted into a single value and HMAC-SHA256 signature is calculated with the same secret key as in the request. The signature value contains “SPH1”, the key ID and the calculated authentication hash as a hexadecimal string separated with spaces “ ” (0x20).</p> 
    <p>The authentication hash value is calculated from the authentication string using the chosen merchant secret key. The authentication string is formed from the method “GET”, an empty URI “”, the response parameters beginning with “sph-”-prefix and an empty body “”. Values are trimmed and the key-value pairs are concatenated in alphabetical order (by the key name). The parameter keys must be in lowercase. Each key and value is separated with a colon (“:”) and the different parameters are separated with a new line (“\n”) at the end of each value.</p> 
    <aside class="notice">
      Although there is no body, an empty value is expected after the parameters, resulting in a new line in the end of the authentication string. 
    </aside> 
    <h2 id="add-card">Add Card</h2> 
    <pre class="highlight shell"><code>curl -i --data-urlencode <span class="s1">' sph-account=test sph-merchant=test_merchantId sph-request-id=f47ac10b-58cc-4372-a567-0e02b2c3d479 sph-timestamp=2014-09-18T10:32:59Z sph-success-url=https://merchant.example.com/payment/success sph-failure-url=https://merchant.example.com/payment/failure sph-cancel-url=https://merchant.example.com/payment/cancel language=fi signature= SPH1 testKey 4eab87a16e3ee7bd530d778af0cb6c680dcaa52ed1913a9c1bd8ed5a8d689e3e'</span> <span class="se">\</span>
    https://v1-hub-staging.sph-test-solinor.com/form/view/add_card
</code></pre> 
    <pre class="highlight java"><code><span class="c1">// Example common parameters for the following form generation functions</span>

<span class="n">String</span> <span class="n">successUrl</span> <span class="o">=</span> <span class="s">"https://www.paymenthighway.fi/"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">failureUrl</span> <span class="o">=</span> <span class="s">"https://paymenthighway.fi/dev/"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">cancelUrl</span> <span class="o">=</span> <span class="s">"https://solinor.com/"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">language</span> <span class="o">=</span> <span class="s">"EN"</span><span class="o">;</span>

<span class="c1">// Generate Add Card form parameters</span>

<span class="n">FormContainer</span> <span class="n">formContainer</span> <span class="o">=</span> <span class="n">formBuilder</span><span class="o">.</span><span class="na">addCardParameters</span><span class="o">(</span><span class="n">successUrl</span><span class="o">,</span> <span class="n">failureUrl</span><span class="o">,</span> <span class="n">cancelUrl</span><span class="o">)</span>
    <span class="o">.</span><span class="na">language</span><span class="o">(</span><span class="n">language</span><span class="o">)</span>
    <span class="o">.</span><span class="na">build</span><span class="o">();</span>

<span class="c1">// read form parameters</span>
<span class="n">String</span> <span class="n">httpMethod</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
<span class="n">String</span> <span class="n">actionUrl</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">NameValuePair</span><span class="o">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span>

<span class="k">for</span> <span class="o">(</span><span class="n">NameValuePair</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
<span class="o">}</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="sr">//</span> <span class="no">Generate</span> <span class="no">Add</span> <span class="no">Card</span> <span class="n">form</span> <span class="n">parameters</span>

<span class="n">form_container</span> <span class="o">=</span> <span class="n">form_builder</span><span class="p">.</span><span class="nf">add_card_parameters</span>

<span class="sr">//</span> <span class="n">read</span> <span class="n">form</span> <span class="n">parameters</span>
<span class="n">http_method</span> <span class="o">=</span> <span class="n">form_container</span><span class="p">.</span><span class="nf">method</span>
<span class="n">action_url</span> <span class="o">=</span> <span class="n">form_container</span><span class="p">.</span><span class="nf">action</span>
<span class="n">pairs</span> <span class="o">=</span> <span class="n">form_container</span><span class="p">.</span><span class="nf">pairs</span> <span class="sr">//</span> <span class="n">an</span> <span class="n">array</span> <span class="n">of</span> <span class="no">PaymentHighway</span><span class="o">::</span><span class="no">NameValuePair</span>

<span class="n">pairs</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pair</span><span class="o">|</span>
    <span class="nb">name</span> <span class="o">=</span> <span class="n">pair</span><span class="p">.</span><span class="nf">name</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">pair</span><span class="p">.</span><span class="nf">value</span>
<span class="k">end</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="c1">// Example common parameters for the following form generation functions</span>

<span class="kd">var</span> <span class="nx">successUrl</span> <span class="o">=</span> <span class="s1">'https://example.com/success'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">failureUrl</span> <span class="o">=</span> <span class="s1">'https://example.com/failure'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">cancelUrl</span> <span class="o">=</span> <span class="s1">'https://example.com/cancel'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">language</span> <span class="o">=</span> <span class="s1">'EN'</span><span class="p">;</span>

<span class="c1">// Generate Add Card form parameters</span>

<span class="kd">var</span> <span class="nx">formContainer</span> <span class="o">=</span> <span class="nx">formBuilder</span><span class="p">.</span><span class="nx">generateAddCardParameters</span><span class="p">(</span>
                      <span class="nx">successUri</span><span class="p">,</span> 
                      <span class="nx">failureUri</span><span class="p">,</span> 
                      <span class="nx">cancelUri</span><span class="p">,</span> 
                      <span class="nx">language</span>
                    <span class="p">);</span>

<span class="c1">// read form parameters</span>
<span class="kd">var</span> <span class="nx">httpMethod</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">method</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">getAction</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">fields</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">nameValuePairs</span><span class="p">;</span>

<span class="nx">fields</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">first</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">second</span><span class="p">;</span>
<span class="p">});</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$form</span> <span class="o">=</span> <span class="nv">$formBuilder</span><span class="o">-&gt;</span><span class="na">generateAddCardParameters</span><span class="p">();</span>

<span class="c1">// read form parameters </span><span class="nv">$httpMethod</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getMethod</span><span class="p">();</span>
<span class="nv">$actionUrl</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getAction</span><span class="p">();</span>
<span class="nv">$parameters</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getParameters</span><span class="p">();</span> 

<span class="c1">// Header parameters as key =&gt; value array </span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$parameters</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="nv">$key</span> <span class="o">.</span><span class="s2">":"</span><span class="o">.</span> <span class="nv">$value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre> 
    <p>Adding a new card stores the payment card information to Payment Highway and returns a tokenization id that can be used to fetch a card token for payments.</p> 
    <h3 id="simple-flow">Simple flow</h3> 
    <ol> 
     <li>Show the form with Form API <a href="#add-card"><code class="prettyprint">POST /form/view/add_card</code></a><br> —&gt; returns an <code class="prettyprint">sph-tokenization-id</code> and <code class="prettyprint">signature</code> as a GET parameters to the given <code class="prettyprint">success-url</code></li> 
     <li>Get the card token with Payment API <a href="#tokenization"><code class="prettyprint">GET /tokenization/&lt;sph-tokenization-id&gt;</code></a><br> —&gt; returns a <code class="prettyprint">card_token</code> and card information in JSON formatting</li> 
    </ol> 
    <p><img src="./images/ph-add-new-card.png"></p> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">POST /form/view/add_card</code></p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>&nbsp;M/O</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account identifier</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account merchant identifier</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>M</td> 
       <td>Request identifier</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>TIMESTAMP</td> 
       <td>M</td> 
       <td>Request timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. “2025-09-18T10:32:59Z”</td> 
      </tr> 
      <tr> 
       <td>sph-success-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Success URL the user is redirected to on success</td> 
      </tr> 
      <tr> 
       <td>sph-failure-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Failure URL the user is redirected to on failure</td> 
      </tr> 
      <tr> 
       <td>sph-cancel-url&nbsp;</td> 
       <td>URL&nbsp;</td> 
       <td>M</td> 
       <td>Cancel URL the user is redirected to on cancel</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-success-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On success, server to server GET request will be made to this url with same parameters as success redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-failure-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On failure, server to server GET request will be made to this url with same parameters as failure redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-cancel-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On cancel, server to server GET request will be made to this url with same parameters as cancel redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-delay</td> 
       <td>N</td> 
       <td>O</td> 
       <td>webhook call delay in seconds (MAX. 900). If omitted, default value 0 will be used.</td> 
      </tr> 
      <tr> 
       <td>sph-accept-cvc-required</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Allow adding a card even if it requires CVC for payments. Defaults to false.</td> 
      </tr> 
      <tr> 
       <td>sph-api-version</td> 
       <td>VERSION</td> 
       <td>O</td> 
       <td>API version number</td> 
      </tr> 
      <tr> 
       <td>language</td> 
       <td>A</td> 
       <td>O</td> 
       <td>Two letter language code (ISO 639-1). Supported languages are DE, EN, ES, FI, FR, RU, SV. Defaults to browser language.</td> 
      </tr> 
      <tr> 
       <td>sph-skip-form-notifications</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Skip errors displayed on the Payment Highway form and redirect directly to result URL (E.g. “Ecom payments disabled”) . Default false.</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-result</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe after redirection to result URLs.</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-three-d-secure</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe when redirecting user to 3DS.</td> 
      </tr> 
      <tr> 
       <td>sph-use-three-d-secure</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Force enable/disable 3DS authentication. Omit / null to use default configured parameter. Disable only if permitted by Your acquiring contract!</td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>M</td> 
       <td>Message signature in the format key-id:authentication-string</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="webhooks-have-same-parameters-as-success,-failure-and-cancel-responses.">Webhooks have same parameters as success, failure and cancel responses.</h3> 
    <h3 id="success-response-for-add-card">Success Response for Add Card</h3> 
    <p>On a successful operation the user is redirected to the given success URL <code class="prettyprint">sph-success-url</code>.</p> 
    <p>When a user is redirected to the success-url, it means we have successfully completed processing of the request. It does not however mean the card payment or tokenization was accepted by the authorizing parties. You will find out the actual result using the PaymentAPI (server-to-server) <a href="#commit-payment"><code class="prettyprint">commit</code></a> or <a href="#tokenization"><code class="prettyprint">tokenization</code></a> requests.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>Account identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>Account merchant identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>Request identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-tokenization-id</td> 
       <td>UUID4</td> 
       <td>Generated sph-tokenization-id</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>Response timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. 2025-09-18T10:33:49Z</td> 
      </tr> 
      <tr> 
       <td>sph-success</td> 
       <td>AN</td> 
       <td>Static text “OK”</td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>Message signature</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="failure-response-for-add-card">Failure Response for Add Card</h3> 
    <p>On failure the user is redirected to the given failure URL <code class="prettyprint">sph-failure-url</code>.</p> 
    <p>A user is redirected to the failure-url, if processing of the request failed for example due to missing parameters, authentication issues or connectivity issues to the authorizing parties.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>Account identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>Account merchant identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>Request identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>Response timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. 2025-09-18T10:33:49Z</td> 
      </tr> 
      <tr> 
       <td>sph-failure</td> 
       <td>AN</td> 
       <td>Failure reason, one of: 
        <ul>
         <li>“UNAUTHORIZED”</li>
         <li>“INVALID”</li>
         <li>“FAILURE”</li>
         <li>“NO_ROUTE” (Equivalent to response code 940)</li>
         <li>“THREE_D_SECURE” (Technical failure in 3D secure)</li>
        </ul></td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>Message signature</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="cancel-response-for-add-card">Cancel Response for Add Card</h3> 
    <p>If the user cancels the operation they are redirected to the given cancel URL <code class="prettyprint">sph-cancel-url</code>.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>Account identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>Account merchant identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>Request identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>Response timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. 2025-09-18T10:33:49Z</td> 
      </tr> 
      <tr> 
       <td>sph-cancel</td> 
       <td>AN</td> 
       <td>Cancel reason “CANCEL”</td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>Message signature</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="payment">Payment</h2> 
    <pre class="highlight shell"><code>curl -i --data-urlencode <span class="s1">' sph-account=test sph-merchant=test_merchantId sph-order=1000123A sph-request-id=f47ac10b-58cc-4372-a567-0e02b2c3d479 sph-amount=990 sph-currency=EUR sph-timestamp=2014-09-18T10:32:59Z sph-success-url=https://merchant.example.com/payment/success sph-failure-url=https://merchant.example.com/payment/failure sph-cancel-url=https://merchant.example.com/payment/cancel language=fi description=Example payment of 10 balloons a? 0,99EUR signature= SPH1 testKey 960aeec47d172637325b15513b3a526e95c93ba74b5067da766f282573464d58'</span> <span class="se">\</span>
    https://v1-hub-staging.sph-test-solinor.com/form/view/pay_with_card
</code></pre> 
    <pre class="highlight java"><code><span class="c1">// Generate Payment form parameters</span>

<span class="n">String</span> <span class="n">amount</span> <span class="o">=</span> <span class="s">"1990"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">currency</span> <span class="o">=</span> <span class="s">"EUR"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">orderId</span> <span class="o">=</span> <span class="s">"1000123A"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"A Box of Dreams. 19,90€"</span><span class="o">;</span>

<span class="n">FormContainer</span> <span class="n">formContainer</span> <span class="o">=</span> <span class="n">formBuilder</span><span class="o">.</span><span class="na">paymentParameters</span><span class="o">(</span><span class="n">successUrl</span><span class="o">,</span> <span class="n">failureUrl</span><span class="o">,</span> <span class="n">cancelUrl</span><span class="o">,</span> <span class="n">amount</span><span class="o">,</span> <span class="n">currency</span><span class="o">,</span> <span class="n">orderId</span><span class="o">,</span> <span class="n">description</span><span class="o">)</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>

<span class="c1">// read form parameters</span>
<span class="n">String</span> <span class="n">httpMethod</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
<span class="n">String</span> <span class="n">actionUrl</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">NameValuePair</span><span class="o">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span>

<span class="k">for</span> <span class="o">(</span><span class="n">NameValuePair</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
<span class="o">}</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="sr">//</span> <span class="no">Generate</span> <span class="no">Payment</span> <span class="n">form</span> <span class="n">parameters</span>

<span class="n">amount</span> <span class="o">=</span> <span class="mi">1990</span>
<span class="n">currency</span> <span class="o">=</span> <span class="s2">"EUR"</span>
<span class="n">order_id</span> <span class="o">=</span> <span class="s2">"1000123A"</span>
<span class="n">description</span> <span class="o">=</span> <span class="s2">"A Box of Dreams. 19,90€"</span>

<span class="n">form_container</span> <span class="o">=</span> <span class="n">form_builder</span><span class="p">.</span><span class="nf">pay_with_card_parameters</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="n">currency</span><span class="p">,</span> <span class="n">order_id</span><span class="p">,</span> <span class="n">description</span><span class="p">)</span>

<span class="sr">//</span> <span class="n">read</span> <span class="n">form</span> <span class="n">parameters</span>
<span class="n">http_method</span> <span class="o">=</span> <span class="n">form_container</span><span class="p">.</span><span class="nf">method</span>
<span class="n">action_url</span> <span class="o">=</span> <span class="n">form_container</span><span class="p">.</span><span class="nf">action</span>
<span class="n">pairs</span> <span class="o">=</span> <span class="n">form_container</span><span class="p">.</span><span class="nf">pairs</span> <span class="sr">//</span> <span class="n">an</span> <span class="n">array</span> <span class="n">of</span> <span class="no">PaymentHighway</span><span class="o">::</span><span class="no">NameValuePair</span>

<span class="n">pairs</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pair</span><span class="o">|</span>
    <span class="nb">name</span> <span class="o">=</span> <span class="n">pair</span><span class="p">.</span><span class="nf">name</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">pair</span><span class="p">.</span><span class="nf">value</span>
<span class="k">end</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">amount</span> <span class="o">=</span> <span class="mi">1990</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">currency</span> <span class="o">=</span> <span class="s1">'EUR'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">orderId</span> <span class="o">=</span> <span class="s1">'1000123A'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">description</span> <span class="o">=</span> <span class="s1">'A Box of Dreams. 19,90€'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">formContainer</span> <span class="o">=</span> <span class="nx">formBuilder</span><span class="p">.</span><span class="nx">generatePaymentParameters</span><span class="p">(</span>
        <span class="nx">successUri</span><span class="p">,</span> 
        <span class="nx">failureUri</span><span class="p">,</span> 
        <span class="nx">cancelUri</span><span class="p">,</span> 
        <span class="nx">language</span><span class="p">,</span> 
        <span class="nx">amount</span><span class="p">,</span> 
        <span class="nx">currency</span><span class="p">,</span> 
        <span class="nx">orderId</span><span class="p">,</span> 
        <span class="nx">description</span>
    <span class="p">);</span>

<span class="c1">// read form parameters</span>
<span class="kd">var</span> <span class="nx">httpMethod</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">method</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">getAction</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">fields</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">nameValuePairs</span><span class="p">;</span>

<span class="nx">fields</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">first</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">second</span><span class="p">;</span>
<span class="p">});</span>    
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$amount</span> <span class="o">=</span> <span class="s2">"1990"</span><span class="p">;</span>
<span class="nv">$currency</span> <span class="o">=</span> <span class="s2">"EUR"</span><span class="p">;</span>
<span class="nv">$orderId</span> <span class="o">=</span> <span class="s2">"1000123A"</span><span class="p">;</span>
<span class="nv">$description</span> <span class="o">=</span> <span class="s2">"A Box of Dreams. 19,90€"</span><span class="p">;</span>

<span class="nv">$form</span> <span class="o">=</span> <span class="nv">$formBuilder</span><span class="o">-&gt;</span><span class="na">generatePaymentParameters</span><span class="p">(</span><span class="nv">$amount</span><span class="p">,</span> <span class="nv">$currency</span><span class="p">,</span> <span class="nv">$orderId</span><span class="p">,</span> <span class="nv">$description</span><span class="p">);</span>

<span class="c1">// read form parameters </span><span class="nv">$httpMethod</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getMethod</span><span class="p">();</span>
<span class="nv">$actionUrl</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getAction</span><span class="p">();</span>
<span class="nv">$parameters</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getParameters</span><span class="p">();</span> 

<span class="c1">// Header parameters as key =&gt; value array </span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$parameters</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="nv">$key</span> <span class="o">.</span><span class="s2">":"</span><span class="o">.</span> <span class="nv">$value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre> 
    <p>The payment card form is shown in the Payment Highway. The response to the <code class="prettyprint">success-url</code> contains a <code class="prettyprint">sph-transaction-id</code> for committing the transaction through the <a href="#commit-payment">Payment API</a>.</p> 
    <h3 id="simple-flow">Simple flow</h3> 
    <ol> 
     <li>Show the form with Form API <a href="#payment"><code class="prettyprint">POST /form/view/pay_with_card</code></a><br> —&gt; returns an <code class="prettyprint">sph-transaction-id</code> and <code class="prettyprint">signature</code> as a GET parameters to the given <code class="prettyprint">success-url</code></li> 
     <li>Commit the payment with Payment API <a href="#commit-payment"><code class="prettyprint">POST /transaction/&lt;sph-transaction-id&gt;/commit</code></a><br> —&gt; returns a result in JSON formatting</li> 
    </ol> 
    <p><img src="./images/ph-pay-with-card.png"></p> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">POST /form/view/pay_with_card</code></p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>&nbsp;M/O</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account identifier</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account merchant identifier</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>ORDER-ID</td> 
       <td>M</td> 
       <td>Merchant defined order identifier. Should be unique per transaction.</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>M</td> 
       <td>Request identifier</td> 
      </tr> 
      <tr> 
       <td>sph-amount</td> 
       <td>N</td> 
       <td>M</td> 
       <td>Amount in the lowest currency unit. E.g. 99,00 € = 9900</td> 
      </tr> 
      <tr> 
       <td>sph-currency</td> 
       <td>&nbsp;A</td> 
       <td>M</td> 
       <td>Currency code “EUR”</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Request timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. “2025-09-18T10:32:59Z”</td> 
      </tr> 
      <tr> 
       <td>sph-success-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Success URL user is redirected to on success</td> 
      </tr> 
      <tr> 
       <td>sph-failure-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Failure URL user is redirected to on failure</td> 
      </tr> 
      <tr> 
       <td>sph-cancel-url&nbsp;</td> 
       <td>URL&nbsp;</td> 
       <td>M</td> 
       <td>Cancel URL user is redirected to on cancel</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-success-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On success, server to server GET request will be made to this url with same parameters as success redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-failure-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On failure, server to server GET request will be made to this url with same parameters as failure redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-cancel-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On cancel, server to server GET request will be made to this url with same parameters as cancel redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-delay</td> 
       <td>N</td> 
       <td>O</td> 
       <td>Webhook call delay in seconds (MAX. 900). If omitted, default value 0 will be used.</td> 
      </tr> 
      <tr> 
       <td>sph-show-payment-method-selector</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Payment method selector is shown and end user can choose either card payment or Masterpass payment.</td> 
      </tr> 
      <tr> 
       <td>sph-api-version</td> 
       <td>VERSION</td> 
       <td>O</td> 
       <td>API version number</td> 
      </tr> 
      <tr> 
       <td>language</td> 
       <td>A</td> 
       <td>O</td> 
       <td>Language code (ISO 639-1)(FI/EN/SV)</td> 
      </tr> 
      <tr> 
       <td>description</td> 
       <td>ANS</td> 
       <td>O</td> 
       <td>The order description shown to the user</td> 
      </tr> 
      <tr> 
       <td>sph-skip-form-notifications</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Skip errors displayed on the Payment Highway form and redirect directly to result URL (E.g. “Ecom payments disabled”) . Default false.</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-result</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe after redirection to result URLs.</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-three-d-secure</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe when redirecting user to 3DS.</td> 
      </tr> 
      <tr> 
       <td>sph-use-three-d-secure</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Force enable/disable 3DS authentication. Omit / null to use default configured parameter. Disable only if permitted by Your acquiring contract!</td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>M</td> 
       <td>Message signature in the format key-id:authentication-string</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="webhooks-have-same-parameters-as-success,-failure-and-cancel-responses.">Webhooks have same parameters as success, failure and cancel responses.</h3> 
    <h3 id="success-response-for-payment">Success Response for Payment</h3> 
    <p>On a successful operation the user is redirected to the given success URL <code class="prettyprint">sph-success-url</code>.</p> 
    <p>When a user is redirected to the success-url, it means we have successfully completed processing of the request. It does not however mean the card payment or tokenization was accepted by the authorizing parties. You will find out the actual result using the PaymentAPI (server-to-server) <a href="#commit-payment"><code class="prettyprint">commit</code></a> or <a href="#tokenization"><code class="prettyprint">tokenization</code></a> requests.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>Account identifier</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>Account merchant identifier</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>AN</td> 
       <td>Merchant defined order identifier</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>Request identifier</td> 
      </tr> 
      <tr> 
       <td>sph-amount</td> 
       <td>N</td> 
       <td>Amount in the lowest currency unit. E.g. 99,00 € = 9900</td> 
      </tr> 
      <tr> 
       <td>sph-currency</td> 
       <td>A</td> 
       <td>Currency code “EUR”</td> 
      </tr> 
      <tr> 
       <td>sph-transaction-id</td> 
       <td>AN</td> 
       <td>Payment transaction identifier</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>Request timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. “2025-09-18T10:32:59Z”</td> 
      </tr> 
      <tr> 
       <td>sph-success</td> 
       <td>AN</td> 
       <td>Static text “OK”</td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>Message signature</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="failure-response-for-payment">Failure Response for Payment</h3> 
    <p>On failure the user is redirected to the given failure URL <code class="prettyprint">sph-failure-url</code>.</p> 
    <p>A user is redirected to the failure-url, if processing of the request failed for example due to missing parameters, authentication issues or connectivity issues to the authorizing parties.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>Account identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>Account merchant identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>AN</td> 
       <td>Merchant defined order identifier</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>Request identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>Response timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. 2025-09-18T10:33:49Z</td> 
      </tr> 
      <tr> 
       <td>sph-failure</td> 
       <td>AN</td> 
       <td>Failure reason, one of: 
        <ul>
         <li>“UNAUTHORIZED”</li>
         <li>“INVALID”</li>
         <li>“FAILURE”</li>
         <li>“NO_ROUTE” (Equivalent to response code 940)</li>
         <li>“MASTERPASS_NOT_SUPPORTED”</li>
         <li>MASTERPASS</li>
         <li>“THREE_D_SECURE” (Technical failure in 3D secure)</li>
        </ul></td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>Message signature</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="cancel-response-for-payment">Cancel Response for Payment</h3> 
    <p>If the user cancels the operation they are redirected to the given cancel URL <code class="prettyprint">sph-cancel-url</code>.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>Account identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>Account merchant identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>AN</td> 
       <td>Merchant defined order identifier</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>Request identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>Response timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. 2025-09-18T10:33:49Z</td> 
      </tr> 
      <tr> 
       <td>sph-cancel</td> 
       <td>AN</td> 
       <td>Cancel reason “CANCEL”</td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>Message signature</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="payment-&amp;-add-card">Payment &amp; Add Card</h2> 
    <pre class="highlight shell"><code>curl -i --data-urlencode <span class="s1">' sph-account=test sph-merchant=test_merchantId sph-order=1000123A sph-request-id=f47ac10b-58cc-4372-a567-0e02b2c3d479 sph-amount=990 sph-currency=EUR sph-timestamp=2014-09-18T10:32:59Z sph-success-url=https://merchant.example.com/payment/success sph-failure-url=https://merchant.example.com/payment/failure sph-cancel-url=https://merchant.example.com/payment/cancel language=fi description=Example payment of 10 balloons a? 0,99EUR signature= SPH1 testKey af9cf1b9a967f6415bb8c4dea8629db0d47edf8ee037c8af1a8bb0eb5aca68e1'</span> <span class="se">\</span>
    https://v1-hub-staging.sph-test-solinor.com/form/view/add_and_pay_with_card
</code></pre> 
    <pre class="highlight java"><code><span class="c1">// Generate Add Card And Payment form parameters</span>

<span class="n">String</span> <span class="n">amount</span> <span class="o">=</span> <span class="s">"1990"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">currency</span> <span class="o">=</span> <span class="s">"EUR"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">orderId</span> <span class="o">=</span> <span class="s">"1000123A"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"A Box of Dreams. 19,90€"</span><span class="o">;</span>

<span class="n">FormContainer</span> <span class="n">formContainer</span> <span class="o">=</span> <span class="n">formBuilder</span><span class="o">.</span><span class="na">addCardAndPaymentParameters</span><span class="o">(</span>
            <span class="n">successUrl</span><span class="o">,</span> 
            <span class="n">failureUrl</span><span class="o">,</span> 
            <span class="n">cancelUrl</span><span class="o">,</span> 
            <span class="n">amount</span><span class="o">,</span> 
            <span class="n">currency</span><span class="o">,</span> 
            <span class="n">orderId</span><span class="o">,</span> 
            <span class="n">description</span>
        <span class="o">)</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>

<span class="c1">// read form parameters</span>
<span class="n">String</span> <span class="n">httpMethod</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
<span class="n">String</span> <span class="n">actionUrl</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">NameValuePair</span><span class="o">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span>

<span class="k">for</span> <span class="o">(</span><span class="n">NameValuePair</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
<span class="o">}</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="sr">//</span> <span class="no">Generate</span> <span class="no">Add</span> <span class="no">Card</span> <span class="no">And</span> <span class="no">Payment</span> <span class="n">form</span> <span class="n">parameters</span>

<span class="n">amount</span> <span class="o">=</span> <span class="mi">1990</span>
<span class="n">currency</span> <span class="o">=</span> <span class="s2">"EUR"</span>
<span class="n">order_id</span> <span class="o">=</span> <span class="s2">"1000123A"</span>
<span class="n">description</span> <span class="o">=</span> <span class="s2">"A Box of Dreams. 19,90€"</span>

<span class="n">form_container</span> <span class="o">=</span> <span class="n">form_builder</span><span class="p">.</span><span class="nf">add_and_pay_with_card_parameters</span><span class="p">(</span><span class="n">amount</span><span class="p">,</span> <span class="n">currency</span><span class="p">,</span> <span class="n">order_id</span><span class="p">,</span> <span class="n">description</span><span class="p">)</span>

<span class="sr">//</span> <span class="n">read</span> <span class="n">form</span> <span class="n">parameters</span>
<span class="n">http_method</span> <span class="o">=</span> <span class="n">form_container</span><span class="p">.</span><span class="nf">method</span>
<span class="n">action_url</span> <span class="o">=</span> <span class="n">form_container</span><span class="p">.</span><span class="nf">action</span>
<span class="n">pairs</span> <span class="o">=</span> <span class="n">form_container</span><span class="p">.</span><span class="nf">pairs</span> <span class="sr">//</span> <span class="n">an</span> <span class="n">array</span> <span class="n">of</span> <span class="no">PaymentHighway</span><span class="o">::</span><span class="no">NameValuePair</span>

<span class="n">pairs</span><span class="p">.</span><span class="nf">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pair</span><span class="o">|</span>
    <span class="nb">name</span> <span class="o">=</span> <span class="n">pair</span><span class="p">.</span><span class="nf">name</span>
    <span class="n">value</span> <span class="o">=</span> <span class="n">pair</span><span class="p">.</span><span class="nf">value</span>
<span class="k">end</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="c1">// Generate Add Card And Payment form parameters</span>

<span class="kd">var</span> <span class="nx">amount</span> <span class="o">=</span> <span class="mi">1990</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">currency</span> <span class="o">=</span> <span class="s1">'EUR'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">orderId</span> <span class="o">=</span> <span class="s1">'1000123A'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">description</span> <span class="o">=</span> <span class="s1">'A Box of Dreams. 19,90€'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">formContainer</span> <span class="o">=</span> <span class="nx">formBuilder</span><span class="p">.</span><span class="nx">generateAddCardAndPaymentParameters</span><span class="p">(</span>
        <span class="nx">successUri</span><span class="p">,</span> 
        <span class="nx">failureUri</span><span class="p">,</span> 
        <span class="nx">cancelUri</span><span class="p">,</span> 
        <span class="nx">language</span><span class="p">,</span> 
        <span class="nx">amount</span><span class="p">,</span> 
        <span class="nx">currency</span><span class="p">,</span> 
        <span class="nx">orderId</span><span class="p">,</span> 
        <span class="nx">description</span>
    <span class="p">);</span>

<span class="c1">// read form parameters</span>
<span class="kd">var</span> <span class="nx">httpMethod</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">method</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">getAction</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">fields</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">nameValuePairs</span><span class="p">;</span>

<span class="nx">fields</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">first</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">second</span><span class="p">;</span>
<span class="p">});</span>  
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$amount</span> <span class="o">=</span> <span class="s2">"1990"</span><span class="p">;</span>
<span class="nv">$currency</span> <span class="o">=</span> <span class="s2">"EUR"</span><span class="p">;</span>
<span class="nv">$orderId</span> <span class="o">=</span> <span class="s2">"1000123A"</span><span class="p">;</span>
<span class="nv">$description</span> <span class="o">=</span> <span class="s2">"A Box of Dreams. 19,90€"</span><span class="p">;</span>

<span class="nv">$form</span> <span class="o">=</span> <span class="nv">$formBuilder</span><span class="o">-&gt;</span><span class="na">generateAddCardAndPaymentParameters</span><span class="p">(</span><span class="nv">$amount</span><span class="p">,</span> <span class="nv">$currency</span><span class="p">,</span> <span class="nv">$orderId</span><span class="p">,</span> <span class="nv">$description</span><span class="p">);</span>

<span class="c1">// read form parameters </span><span class="nv">$httpMethod</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getMethod</span><span class="p">();</span>
<span class="nv">$actionUrl</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getAction</span><span class="p">();</span>
<span class="nv">$parameters</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getParameters</span><span class="p">();</span> 

<span class="c1">// Header parameters as key =&gt; value array </span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$parameters</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="nv">$key</span> <span class="o">.</span><span class="s2">":"</span><span class="o">.</span> <span class="nv">$value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre> 
    <p>This method combines a payment and adding a new card to allow getting the card token after a successful payment with a single request.</p> 
    <p><img src="./images/ph-add-and-pay-with-card.png"></p> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">POST /form/view/add_and_pay_with_card</code></p> 
    <p>The request and response parameters are exactly the same as in the <a href="#payment">Payment</a>.</p> 
    <h2 id="payment-with-token-and-cvc">Payment with token and CVC</h2> 
    <p>The CVC Form is shown in the Payment Highway. The response to the <code class="prettyprint">success-url</code> contains a <code class="prettyprint">sph-transaction-id</code> for committing the transaction through the <a href="#commit-payment">Payment API</a>.</p> 
    <pre class="highlight shell"><code></code></pre> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">POST /form/view/pay_with_token_and_cvc</code></p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>&nbsp;M/O</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account identifier</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account merchant identifier</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Merchant defined order identifier. Should be unique per transaction.</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>M</td> 
       <td>Request identifier</td> 
      </tr> 
      <tr> 
       <td>sph-amount</td> 
       <td>N</td> 
       <td>M</td> 
       <td>Amount in the lowest currency unit. E.g. 99,00 € = 9900</td> 
      </tr> 
      <tr> 
       <td>sph-currency</td> 
       <td>&nbsp;A</td> 
       <td>M</td> 
       <td>Currency code “EUR”</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Request timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. “2025-09-18T10:32:59Z”</td> 
      </tr> 
      <tr> 
       <td>sph-success-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Success URL user is redirected to on success</td> 
      </tr> 
      <tr> 
       <td>sph-failure-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Failure URL user is redirected to on failure</td> 
      </tr> 
      <tr> 
       <td>sph-cancel-url&nbsp;</td> 
       <td>URL&nbsp;</td> 
       <td>M</td> 
       <td>Cancel URL user is redirected to on cancel</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-success-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On success, server to server GET request will be made to this url with same parameters as success redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-failure-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On failure, server to server GET request will be made to this url with same parameters as failure redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-cancel-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On cancel, server to server GET request will be made to this url with same parameters as cancel redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-delay</td> 
       <td>N</td> 
       <td>O</td> 
       <td>webhook call delay in seconds (MAX. 900). If omitted, default value 0 will be used.</td> 
      </tr> 
      <tr> 
       <td>sph-show-payment-method-selector</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Payment method selector is shown and end user can choose either card payment or Masterpass payment.</td> 
      </tr> 
      <tr> 
       <td>sph-token</td> 
       <td>UUID4</td> 
       <td>M</td> 
       <td>The card token to charge.</td> 
      </tr> 
      <tr> 
       <td>sph-api-version</td> 
       <td>VERSION</td> 
       <td>O</td> 
       <td>API version number</td> 
      </tr> 
      <tr> 
       <td>language</td> 
       <td>A</td> 
       <td>O</td> 
       <td>Language code (ISO 639-1)(FI/EN/SV)</td> 
      </tr> 
      <tr> 
       <td>description</td> 
       <td>ANS</td> 
       <td>O</td> 
       <td>The order description shown to the user</td> 
      </tr> 
      <tr> 
       <td>sph-skip-form-notifications</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Skip errors displayed on the Payment Highway form and redirect directly to result URL (E.g. “Ecom payments disabled”) . Default false.</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-result</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe after redirection to result URLs.</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-three-d-secure</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe when redirecting user to 3DS.</td> 
      </tr> 
      <tr> 
       <td>sph-use-three-d-secure</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Force enable/disable 3DS authentication. Omit / null to use default configured parameter. Disable only if permitted by Your acquiring contract!</td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>M</td> 
       <td>Message signature in the format key-id:authentication-string</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="webhooks-have-same-parameters-as-success,-failure-and-cancel-responses.">Webhooks have same parameters as success, failure and cancel responses.</h3> 
    <h3 id="failure-response-for-payment-with-token-and-cvc">Failure Response for Payment with token and CVC</h3> 
    <p>On failure the user is redirected to the given failure URL <code class="prettyprint">sph-failure-url</code>.</p> 
    <p>A user is redirected to the failure-url, if processing of the request failed for example due to missing parameters, authentication issues or connectivity issues to the authorizing parties.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>Account identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>Account merchant identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>AN</td> 
       <td>Merchant defined order identifier</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>Request identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>Response timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. 2025-09-18T10:33:49Z</td> 
      </tr> 
      <tr> 
       <td>sph-failure</td> 
       <td>AN</td> 
       <td>Failure reason, one of: 
        <ul>
         <li>“UNAUTHORIZED”</li>
         <li>“INVALID”</li>
         <li>“FAILURE”</li>
         <li>“NO_ROUTE” (Equivalent to response code 940)</li>
         <li>“TOKEN_NOT_FOUND”</li>
         <li>“THREE_D_SECURE” (Technical failure in 3D secure)</li>
         <li>“MASTERPASS_NOT_SUPPORTED”</li>
         <li>MASTERPASS</li>
        </ul></td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>Message signature</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="success-and-cancel-responses">Success and Cancel Responses</h3> 
    <p>The Success and Cancel Responses are exactly the same as in the <a href="#payment">Payment</a>.</p> 
    <p>When a user is redirected to the success-url, it means we have successfully completed processing of the request. It does not however mean the card payment or tokenization was accepted by the authorizing parties. You will find out the actual result using the PaymentAPI (server-to-server) <a href="#commit-payment"><code class="prettyprint">commit</code></a> or <a href="#tokenization"><code class="prettyprint">tokenization</code></a> requests.</p> 
    <h2 id="payment-with-mobilepay">Payment with MobilePay</h2> 
    <pre class="highlight shell"><code>curl -i --data-urlencode <span class="s1">' sph-account=test sph-merchant=test_merchantId sph-order=1000123A sph-request-id=f47ac10b-58cc-4372-a567-0e02b2c3d479 sph-amount=990 sph-currency=EUR sph-timestamp=2014-09-18T10:32:59Z sph-success-url=https://merchant.example.com/payment/success sph-failure-url=https://merchant.example.com/payment/failure sph-cancel-url=https://merchant.example.com/payment/cancel language=fi description=Example payment of 10 balloons a? 0,99EUR signature= SPH1 testKey af9cf1b9a967f6415bb8c4dea8629db0d47edf8ee037c8af1a8bb0eb5aca68e1'</span> <span class="se">\</span>
    https://v1-hub-staging.sph-test-solinor.com/form/view/mobilepay
</code></pre> 
    <pre class="highlight java"><code><span class="c1">// Generate Add Card And Payment form parameters</span>

<span class="n">String</span> <span class="n">amount</span> <span class="o">=</span> <span class="s">"1990"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">currency</span> <span class="o">=</span> <span class="s">"EUR"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">orderId</span> <span class="o">=</span> <span class="s">"1000123A"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"A Box of Dreams. 19,90€"</span><span class="o">;</span>
<span class="n">Boolean</span> <span class="n">exitIframeOnResult</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="n">String</span> <span class="n">shopLogoUrl</span> <span class="o">=</span> <span class="s">"https://foo.bar/biz.png"</span><span class="o">;</span>

<span class="n">FormContainer</span> <span class="n">formContainer</span> <span class="o">=</span> <span class="n">formBuilder</span><span class="o">.</span><span class="na">mobilePayParametersBuilder</span><span class="o">(</span>
            <span class="n">successUrl</span><span class="o">,</span> 
            <span class="n">failureUrl</span><span class="o">,</span> 
            <span class="n">cancelUrl</span><span class="o">,</span>
            <span class="n">amount</span><span class="o">,</span> 
            <span class="n">currency</span><span class="o">,</span> 
            <span class="n">orderId</span><span class="o">,</span> 
            <span class="n">description</span><span class="o">,</span>
            <span class="n">exitIframeOnResult</span><span class="o">,</span>
            <span class="n">shopLogoUrl</span>
        <span class="o">)</span>
        <span class="o">.</span><span class="na">build</span><span class="o">();</span>

<span class="c1">// read form parameters</span>
<span class="n">String</span> <span class="n">httpMethod</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
<span class="n">String</span> <span class="n">actionUrl</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">NameValuePair</span><span class="o">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span>

<span class="k">for</span> <span class="o">(</span><span class="n">NameValuePair</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
<span class="o">}</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="c1">// Generate Add Card And Payment form parameters</span>

<span class="kd">var</span> <span class="nx">amount</span> <span class="o">=</span> <span class="mi">1990</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">currency</span> <span class="o">=</span> <span class="s1">'EUR'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">orderId</span> <span class="o">=</span> <span class="s1">'1000123A'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">description</span> <span class="o">=</span> <span class="s1">'A Box of Dreams. 19,90€'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">exitIframeOnResult</span> <span class="o">=</span> <span class="kc">undefined</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">shopLogoUrl</span> <span class="o">=</span> <span class="s1">'https://foo.bar/biz.png'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">formContainer</span> <span class="o">=</span> <span class="nx">formBuilder</span><span class="p">.</span><span class="nx">generatePayWithMobilePayParameters</span><span class="p">(</span>
        <span class="nx">successUri</span><span class="p">,</span> 
        <span class="nx">failureUri</span><span class="p">,</span> 
        <span class="nx">cancelUri</span><span class="p">,</span> 
        <span class="nx">language</span><span class="p">,</span> 
        <span class="nx">amount</span><span class="p">,</span> 
        <span class="nx">currency</span><span class="p">,</span> 
        <span class="nx">orderId</span><span class="p">,</span> 
        <span class="nx">description</span><span class="p">,</span>
        <span class="nx">exitIframeOnResult</span><span class="p">,</span>
        <span class="nx">shopLogoUrl</span>
    <span class="p">);</span>


<span class="c1">// read form parameters</span>
<span class="kd">var</span> <span class="nx">httpMethod</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">method</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">getAction</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">fields</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">nameValuePairs</span><span class="p">;</span>

<span class="nx">fields</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">first</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">second</span><span class="p">;</span>
<span class="p">});</span>  
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$amount</span> <span class="o">=</span> <span class="s2">"1990"</span><span class="p">;</span>
<span class="nv">$currency</span> <span class="o">=</span> <span class="s2">"EUR"</span><span class="p">;</span>
<span class="nv">$orderId</span> <span class="o">=</span> <span class="s2">"1000123A"</span><span class="p">;</span>
<span class="nv">$description</span> <span class="o">=</span> <span class="s2">"A Box of Dreams. 19,90€"</span><span class="p">;</span>
<span class="nv">$exitIframeOnResult</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
<span class="nv">$shopLogoUrl</span> <span class="o">=</span> <span class="s2">"https://foo.bar/biz.png"</span><span class="p">;</span>

<span class="nv">$form</span> <span class="o">=</span> <span class="nv">$formBuilder</span><span class="o">-&gt;</span><span class="na">generatePayWithMobilePayParameters</span><span class="p">(</span>
        <span class="nv">$amount</span><span class="p">,</span> 
        <span class="nv">$currency</span><span class="p">,</span> 
        <span class="nv">$orderId</span><span class="p">,</span> 
        <span class="nv">$description</span><span class="p">,</span>
        <span class="nv">$exitIframeOnResult</span><span class="p">,</span>
        <span class="nv">$shopLogoUrl</span>
    <span class="p">);</span>

<span class="c1">// read form parameters </span><span class="nv">$httpMethod</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getMethod</span><span class="p">();</span>
<span class="nv">$actionUrl</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getAction</span><span class="p">();</span>
<span class="nv">$parameters</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getParameters</span><span class="p">();</span> 

<span class="c1">// Header parameters as key =&gt; value array </span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$parameters</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="nv">$key</span> <span class="o">.</span><span class="s2">":"</span><span class="o">.</span> <span class="nv">$value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre> 
    <p>This method opens either Danske Bank’s MobilePay page or Danske Bank’s MobilePay application, depending if user is making payment with handheld device or PC.</p> 
    <p><button type="button" id="mobilePayOpenBtn"> <img src="images/mobilepay.jpg" alt="" class="mobilepay-logo">&nbsp;Try MobilePay </button> <br> </p>
    <p><i>Your card will not be charged.</i></p>
    <p></p> 
    <div id="mobilePayForm"> 
     <div id="mobilepayLoadingSpinner" class="bg-spinner" style="display: none;"> 
      <i class="fa fa-cog fa-spin fa-5x fa-fw"></i> 
     </div> 
     <div class="iframe-wrapper"> 
      <iframe id="myIframe" width="100%" height="600" frameborder="0" src=""></iframe> 
     </div> 
    </div> 
    <h3 id="simple-flow">Simple flow</h3> 
    <ol> 
     <li>Open MobilePay with Form API <a href="#payment-with-mobilepay"><code class="prettyprint">POST /form/view/mobilepay</code></a><br> -&gt; return an <code class="prettyprint">sph-transaction-id</code> and <code class="prettyprint">signature</code> as a GET parameters to the given <code class="prettyprint">success-url</code></li> 
     <li>Commit payment with Payment API <a href="#commit-payment"><code class="prettyprint">POST /transaction/&lt;sph-transaction-id&gt;/commit</code></a><br> —&gt; returns a result in JSON formatting</li> 
    </ol> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">POST /form/view/mobilepay</code></p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>&nbsp;M/O</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account identifier</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account merchant identifier</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Merchant defined order identifier. Should be unique per transaction.</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>M</td> 
       <td>Request identifier</td> 
      </tr> 
      <tr> 
       <td>sph-amount</td> 
       <td>N</td> 
       <td>M</td> 
       <td>Amount in the lowest currency unit. E.g. 99,00 € = 9900</td> 
      </tr> 
      <tr> 
       <td>sph-currency</td> 
       <td>&nbsp;A</td> 
       <td>M</td> 
       <td>Currency code “EUR”</td> 
      </tr> 
      <tr> 
       <td>sph-shop-logo-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>The logo must be 250x250 pixel in .png format and must be hosted on a HTTPS (secure) server.</td> 
      </tr> 
      <tr> 
       <td>sph-mobilepay-phone-number</td> 
       <td>AN</td> 
       <td>O</td> 
       <td>Customer phone number with country code e.q. +358449876543. Makes it easier for the customer to identify himself toward the MPO Website.</td> 
      </tr> 
      <tr> 
       <td>sph-mobilepay-shop-name</td> 
       <td>Max 100 AN</td> 
       <td>O</td> 
       <td>Name of the shop/merchant. MobilePay app displays this under the shop logo. If omitted, the merchant name from PH is used.</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Request timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. “2025-09-18T10:32:59Z”</td> 
      </tr> 
      <tr> 
       <td>sph-success-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Success URL user is redirected to on success</td> 
      </tr> 
      <tr> 
       <td>sph-failure-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Failure URL user is redirected to on failure</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-success-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On success, server to server GET request will be made to this url with same parameters as success redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-failure-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On failure, server to server GET request will be made to this url with same parameters as failure redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-cancel-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On cancel, server to server GET request will be made to this url with same parameters as cancel redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-delay</td> 
       <td>N</td> 
       <td>O</td> 
       <td>webhook call delay in seconds (MAX. 900). If omitted, default value 0 will be used.</td> 
      </tr> 
      <tr> 
       <td>sph-cancel-url&nbsp;</td> 
       <td>URL&nbsp;</td> 
       <td>M</td> 
       <td>Cancel URL user is redirected to on cancel</td> 
      </tr> 
      <tr> 
       <td>sph-api-version</td> 
       <td>VERSION</td> 
       <td>O</td> 
       <td>API version number</td> 
      </tr> 
      <tr> 
       <td>language</td> 
       <td>A</td> 
       <td>O</td> 
       <td>Language code (ISO 639-1)(FI/EN/SV)</td> 
      </tr> 
      <tr> 
       <td>description</td> 
       <td>ANS</td> 
       <td>O</td> 
       <td>The order description shown to the user</td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>M</td> 
       <td>Message signature in the format key-id:authentication-string</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-result</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe after redirection to result URLs.</td> 
      </tr> 
     </tbody>
    </table> 
    <h4 id="about-shop-logo-in-mobilepay">About shop logo in MobilePay</h4> 
    <ul> 
     <li>The logo must be 250x250 pixel in .png format. </li> 
     <li>MPO will show a default logo in the app if this is empty or the image location doesn’t exist. </li> 
     <li>Once a ShopLogoURL has been sent to MPOnline the .png-file on that URL must never be changed. If the shop wants a new (or more than one) logo, a new ShopLogoURL must be used. </li> 
     <li>The logo must be hosted on a HTTPS (secure) server.</li> 
    </ul> 
    <h3 id="webhooks-have-same-parameters-as-success,-failure-and-cancel-responses.">Webhooks have same parameters as success, failure and cancel responses.</h3> 
    <h3 id="failure-response-for-payment-with-mobilepay">Failure Response for Payment with MobilePay</h3> 
    <p>On failure the user is redirected to the given failure URL <code class="prettyprint">sph-failure-url</code>.</p> 
    <p>A user is redirected to the failure-url, if processing of the request failed for example due to missing parameters, authentication issues or connectivity issues to the authorizing parties.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>Account identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>Account merchant identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>AN</td> 
       <td>Merchant defined order identifier</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>Request identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>Response timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. 2025-09-18T10:33:49Z</td> 
      </tr> 
      <tr> 
       <td>sph-failure</td> 
       <td>AN</td> 
       <td>Failure reason, one of: 
        <ul>
         <li>“UNAUTHORIZED”</li>
         <li>“INVALID”</li>
         <li>“FAILURE”</li>
         <li>“NO_ROUTE” (Equivalent to response code 940)</li>
         <li>“MOBILEPAY_NOT_SUPPORTED”</li>
         <li>“MOBILEPAY”</li>
        </ul></td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>Message signature</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="success-and-cancel-responses">Success and Cancel Responses</h3> 
    <p>The Success and Cancel Responses are exactly the same as in the <a href="#payment">Payment</a>.</p> 
    <p>When a user is redirected to the success-url, it means we have successfully completed processing of the request. It does not however mean the card payment or tokenization was accepted by the authorizing parties. You will find out the actual result using the PaymentAPI (server-to-server) <a href="#commit-payment"><code class="prettyprint">commit</code></a> or <a href="#tokenization"><code class="prettyprint">tokenization</code></a> requests.</p> 
    <h3 id="using-payment-highway-and-mobilepay-in-mobile-application">Using Payment Highway and MobilePay in Mobile application</h3> 
    <p><img src="./images/ph-mobile-app-with-mobilepay.png"></p> 
    <h2 id="payment-with-masterpass">Payment with Masterpass</h2> 
    <pre class="highlight java"><code><span class="c1">// Generate Masterpass form parameters</span>

<span class="n">Long</span> <span class="n">amount</span> <span class="o">=</span> <span class="mi">1990L</span><span class="o">;</span>
<span class="n">String</span> <span class="n">currency</span> <span class="o">=</span> <span class="s">"EUR"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">orderId</span> <span class="o">=</span> <span class="s">"1000123A"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"A Box of Dreams. 19,90€"</span><span class="o">;</span>

<span class="n">FormContainer</span> <span class="n">formContainer</span> <span class="o">=</span> <span class="n">formBuilder</span><span class="o">.</span><span class="na">masterpassParameters</span><span class="o">(</span>
    <span class="n">successUrl</span><span class="o">,</span>
    <span class="n">failureUrl</span><span class="o">,</span>
    <span class="n">cancelUrl</span><span class="o">,</span>
    <span class="n">amount</span><span class="o">,</span>
    <span class="n">currency</span><span class="o">,</span>
    <span class="n">orderId</span><span class="o">,</span>
    <span class="n">description</span>
<span class="o">)</span>
    <span class="o">.</span><span class="na">build</span><span class="o">();</span>

<span class="c1">// read form parameters</span>
<span class="n">String</span> <span class="n">httpMethod</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
<span class="n">String</span> <span class="n">actionUrl</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">NameValuePair</span><span class="o">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span>

<span class="k">for</span> <span class="o">(</span><span class="n">NameValuePair</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
<span class="o">}</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="c1">// Generate Masterpass form parameters</span>

<span class="kd">var</span> <span class="nx">amount</span> <span class="o">=</span> <span class="mi">1990</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">currency</span> <span class="o">=</span> <span class="s1">'EUR'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">orderId</span> <span class="o">=</span> <span class="s1">'1000123A'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">description</span> <span class="o">=</span> <span class="s1">'A Box of Dreams. 19,90€'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">formContainer</span> <span class="o">=</span> <span class="nx">formBuilder</span><span class="p">.</span><span class="nx">generateMasterPassParameters</span><span class="p">(</span>
        <span class="nx">successUrl</span><span class="p">,</span> 
        <span class="nx">failureUrl</span><span class="p">,</span> 
        <span class="nx">cancelUrl</span><span class="p">,</span> 
        <span class="nx">language</span><span class="p">,</span> 
        <span class="nx">amount</span><span class="p">,</span> 
        <span class="nx">currency</span><span class="p">,</span> 
        <span class="nx">orderId</span><span class="p">,</span> 
        <span class="nx">description</span>
    <span class="p">);</span>

<span class="c1">// read form parameters</span>
<span class="kd">var</span> <span class="nx">httpMethod</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">method</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">actionUrl</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">getAction</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">fields</span> <span class="o">=</span> <span class="nx">formContainer</span><span class="p">.</span><span class="nx">nameValuePairs</span><span class="p">;</span>


<span class="nx">fields</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">field</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">first</span><span class="p">;</span>
    <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">second</span><span class="p">;</span>
<span class="p">});</span>  
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$amount</span> <span class="o">=</span> <span class="s2">"1990"</span><span class="p">;</span>
<span class="nv">$currency</span> <span class="o">=</span> <span class="s2">"EUR"</span><span class="p">;</span>
<span class="nv">$orderId</span> <span class="o">=</span> <span class="s2">"1000123A"</span><span class="p">;</span>
<span class="nv">$description</span> <span class="o">=</span> <span class="s2">"A Box of Dreams. 19,90€"</span><span class="p">;</span>

<span class="nv">$form</span> <span class="o">=</span> <span class="nv">$formbuilder</span><span class="o">-&gt;</span><span class="na">generateMasterpassParameters</span><span class="p">(</span>
            <span class="nv">$amount</span><span class="p">,</span> 
            <span class="nv">$currency</span><span class="p">,</span> 
            <span class="nv">$orderId</span><span class="p">,</span> 
            <span class="nv">$description</span>
        <span class="p">);</span>

<span class="c1">// read form parameters </span><span class="nv">$httpMethod</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getMethod</span><span class="p">();</span>
<span class="nv">$actionUrl</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getAction</span><span class="p">();</span>
<span class="nv">$parameters</span> <span class="o">=</span> <span class="nv">$form</span><span class="o">-&gt;</span><span class="na">getParameters</span><span class="p">();</span> 

<span class="c1">// Header parameters as key =&gt; value array </span><span class="k">foreach</span> <span class="p">(</span><span class="nv">$parameters</span> <span class="k">as</span> <span class="nv">$key</span> <span class="o">=&gt;</span> <span class="nv">$value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">echo</span> <span class="nv">$key</span> <span class="o">.</span><span class="s2">":"</span><span class="o">.</span> <span class="nv">$value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre> 
    <p>With <code class="prettyprint">sph-show-payment-method-selector</code>-parameter in <a href="#payment">Payment-method</a> or <a href="#payment-&amp;-add-card">Payment &amp; Add Card</a>, payment method selector is shown and end user can choose either card payment or Masterpass payment.</p> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">POST /form/view/masterpass</code></p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>&nbsp;M/O</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account identifier</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account merchant identifier</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>ORDER-ID</td> 
       <td>M</td> 
       <td>Merchant defined order identifier. Should be unique per transaction.</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>M</td> 
       <td>Request identifier</td> 
      </tr> 
      <tr> 
       <td>sph-amount</td> 
       <td>N</td> 
       <td>M</td> 
       <td>Amount in the lowest currency unit. E.g. 99,00 € = 9900</td> 
      </tr> 
      <tr> 
       <td>sph-currency</td> 
       <td>&nbsp;A</td> 
       <td>M</td> 
       <td>Currency code “EUR”</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Request timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. “2025-09-18T10:32:59Z”</td> 
      </tr> 
      <tr> 
       <td>sph-success-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Success URL user is redirected to on success</td> 
      </tr> 
      <tr> 
       <td>sph-failure-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Failure URL user is redirected to on failure</td> 
      </tr> 
      <tr> 
       <td>sph-cancel-url&nbsp;</td> 
       <td>URL&nbsp;</td> 
       <td>M</td> 
       <td>Cancel URL user is redirected to on cancel</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-success-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On success, server to server GET request will be made to this url with same parameters as success redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-failure-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On failure, server to server GET request will be made to this url with same parameters as failure redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-cancel-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On cancel, server to server GET request will be made to this url with same parameters as cancel redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-delay</td> 
       <td>N</td> 
       <td>O</td> 
       <td>Webhook call delay in seconds (MAX. 900). If omitted, default value 0 will be used.</td> 
      </tr> 
      <tr> 
       <td>sph-api-version</td> 
       <td>VERSION</td> 
       <td>O</td> 
       <td>API version number</td> 
      </tr> 
      <tr> 
       <td>language</td> 
       <td>A</td> 
       <td>O</td> 
       <td>Language code (ISO 639-1)(FI/EN/SV)</td> 
      </tr> 
      <tr> 
       <td>description</td> 
       <td>ANS</td> 
       <td>O</td> 
       <td>The order description shown to the user</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-result</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe after redirection to result URLs.</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-three-d-secure</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe when redirecting user to 3DS.</td> 
      </tr> 
      <tr> 
       <td>sph-use-three-d-secure</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Force enable/disable 3DS authentication. Omit / null to use default configured parameter. Disable only if permitted by Your acquiring contract!</td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>M</td> 
       <td>Message signature in the format key-id:authentication-string</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="webhooks-have-same-parameters-as-success,-failure-and-cancel-responses.">Webhooks have same parameters as success, failure and cancel responses.</h3> 
    <h3 id="success-and-cancel-responses">Success and Cancel Responses</h3> 
    <p>The Success and Cancel Responses are exactly the same as in the <a href="#payment">Payment</a>.</p> 
    <h3 id="failure-response-for-payment-with-masterpass">Failure Response for Payment with Masterpass</h3> 
    <p>On failure the user is redirected to the given failure URL <code class="prettyprint">sph-failure-url</code>.</p> 
    <p>A user is redirected to the failure-url, if processing of the request failed for example due to missing parameters, authentication issues or connectivity issues to the authorizing parties.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>Account identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>Account merchant identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>AN</td> 
       <td>Merchant defined order identifier</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>Request identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>Response timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. 2025-09-18T10:33:49Z</td> 
      </tr> 
      <tr> 
       <td>sph-failure</td> 
       <td>AN</td> 
       <td>Failure reason, one of: 
        <ul>
         <li>“UNAUTHORIZED”</li>
         <li>“INVALID”</li>
         <li>“FAILURE”</li>
         <li>“NO_ROUTE” (Equivalent to response code 940)</li>
         <li>“MASTERPASS_NOT_SUPPORTED”</li>
         <li>“MASTERPASS”</li>
        </ul></td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>Message signature</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="payment-with-masterpass-and-user-profile">Payment with Masterpass and User Profile</h2> 
    <pre class="highlight java"><code><span class="c1">// Generate Masterpass with profile form parameters</span>

<span class="n">Long</span> <span class="n">amount</span> <span class="o">=</span> <span class="mi">2999</span><span class="o">;</span>
<span class="n">String</span> <span class="n">currency</span> <span class="o">=</span> <span class="s">"EUR"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">orderId</span> <span class="o">=</span> <span class="s">"12345678"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"Example Masterpass payment"</span><span class="o">;</span>

<span class="n">FormContainer</span> <span class="n">formContainer</span> <span class="o">=</span> <span class="n">formBuilder</span><span class="o">.</span><span class="na">masterpassWithProfileParameters</span><span class="o">(</span>
    <span class="n">successUrl</span><span class="o">,</span>
    <span class="n">failureUrl</span><span class="o">,</span>
    <span class="n">cancelUrl</span><span class="o">,</span>
    <span class="n">amount</span><span class="o">,</span>
    <span class="n">currency</span><span class="o">,</span>
    <span class="n">orderId</span><span class="o">,</span>
    <span class="n">description</span>
<span class="o">)</span>
    <span class="o">.</span><span class="na">requestShippingAddress</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
    <span class="o">.</span><span class="na">build</span><span class="o">();</span>

<span class="c1">// read form parameters</span>
<span class="n">String</span> <span class="n">httpMethod</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getMethod</span><span class="o">();</span>
<span class="n">String</span> <span class="n">actionUrl</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">NameValuePair</span><span class="o">&gt;</span> <span class="n">fields</span> <span class="o">=</span> <span class="n">formContainer</span><span class="o">.</span><span class="na">getFields</span><span class="o">();</span>

<span class="k">for</span> <span class="o">(</span><span class="n">NameValuePair</span> <span class="n">field</span> <span class="o">:</span> <span class="n">fields</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
    <span class="n">field</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
<span class="o">}</span>
</code></pre> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">POST /form/view/masterpass_with_profile</code></p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>&nbsp;M/O</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account identifier</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Account merchant identifier</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>ORDER-ID</td> 
       <td>M</td> 
       <td>Merchant defined order identifier. Should be unique per transaction.</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>M</td> 
       <td>Request identifier</td> 
      </tr> 
      <tr> 
       <td>sph-amount</td> 
       <td>N</td> 
       <td>M</td> 
       <td>Amount in the lowest currency unit. E.g. 99,00 € = 9900</td> 
      </tr> 
      <tr> 
       <td>sph-currency</td> 
       <td>&nbsp;A</td> 
       <td>M</td> 
       <td>Currency code “EUR”</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>M</td> 
       <td>Request timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. “2025-09-18T10:32:59Z”</td> 
      </tr> 
      <tr> 
       <td>sph-success-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Success URL user is redirected to on success</td> 
      </tr> 
      <tr> 
       <td>sph-failure-url</td> 
       <td>URL</td> 
       <td>M</td> 
       <td>Failure URL user is redirected to on failure</td> 
      </tr> 
      <tr> 
       <td>sph-cancel-url&nbsp;</td> 
       <td>URL&nbsp;</td> 
       <td>M</td> 
       <td>Cancel URL user is redirected to on cancel</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-success-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On success, server to server GET request will be made to this url with same parameters as success redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-failure-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On failure, server to server GET request will be made to this url with same parameters as failure redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-cancel-url</td> 
       <td>URL</td> 
       <td>O</td> 
       <td>On cancel, server to server GET request will be made to this url with same parameters as cancel redirect.</td> 
      </tr> 
      <tr> 
       <td>sph-webhook-delay</td> 
       <td>N</td> 
       <td>O</td> 
       <td>Webhook call delay in seconds (MAX. 900). If omitted, default value 0 will be used.</td> 
      </tr> 
      <tr> 
       <td>sph-api-version</td> 
       <td>VERSION</td> 
       <td>O</td> 
       <td>API version number</td> 
      </tr> 
      <tr> 
       <td>language</td> 
       <td>A</td> 
       <td>O</td> 
       <td>Language code (ISO 639-1)(FI/EN/SV)</td> 
      </tr> 
      <tr> 
       <td>description</td> 
       <td>ANS</td> 
       <td>O</td> 
       <td>The order description shown to the user</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-result</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe after redirection to result URLs.</td> 
      </tr> 
      <tr> 
       <td>sph-exit-iframe-on-three-d-secure</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Exit from iframe when redirecting user to 3DS.</td> 
      </tr> 
      <tr> 
       <td>sph-use-three-d-secure</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Force enable/disable 3DS authentication. Omit / null to use default configured parameter. Disable only if permitted by Your acquiring contract!</td> 
      </tr> 
      <tr> 
       <td>sph-request-shipping-address</td> 
       <td>BOOLEAN</td> 
       <td>O</td> 
       <td>Request shipping address from the user via Masterpass Wallet</td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>M</td> 
       <td>Message signature in the format key-id:authentication-string</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="webhooks-have-same-parameters-as-success,-failure-and-cancel-responses.">Webhooks have same parameters as success, failure and cancel responses.</h3> 
    <h3 id="success-and-cancel-responses">Success and Cancel Responses</h3> 
    <p>The Success and Cancel Responses are exactly the same as in the <a href="#payment">Payment</a>, however instead of calling <a href="#commit-payment"><code class="prettyprint">commit</code></a>, use the following two API calls to finish the payment: </p>
    <ul> 
     <li><a href="#user-profile">User profile</a> for viewing information received from masterpass</li> 
     <li><a href="#masterpass-debit-transaction">Masterpass debit transaction</a> for charging the card with the final amount (for example after calculating shipping costs). Only the originally given amount will be covered by the 3D-secure liability shift</li> 
    </ul>
    <p></p> 
    <h3 id="failure-response-for-payment-with-masterpass">Failure Response for Payment with Masterpass</h3> 
    <p>On failure the user is redirected to the given failure URL <code class="prettyprint">sph-failure-url</code>.</p> 
    <p>A user is redirected to the failure-url, if processing of the request failed for example due to missing parameters, authentication issues or connectivity issues to the authorizing parties.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>sph-account</td> 
       <td>AN</td> 
       <td>Account identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-merchant</td> 
       <td>AN</td> 
       <td>Account merchant identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-order</td> 
       <td>AN</td> 
       <td>Merchant defined order identifier</td> 
      </tr> 
      <tr> 
       <td>sph-request-id</td> 
       <td>UUID4</td> 
       <td>Request identifier from request</td> 
      </tr> 
      <tr> 
       <td>sph-timestamp</td> 
       <td>AN</td> 
       <td>Response timestamp in ISO 8601 <br>combined date and time in UTC.<br>E.g. 2025-09-18T10:33:49Z</td> 
      </tr> 
      <tr> 
       <td>sph-failure</td> 
       <td>AN</td> 
       <td>Failure reason, one of: 
        <ul>
         <li>“UNAUTHORIZED”</li>
         <li>“INVALID”</li>
         <li>“FAILURE”</li>
         <li>“NO_ROUTE” (Equivalent to response code 940)</li>
         <li>“MASTERPASS_NOT_SUPPORTED”</li>
         <li>“MASTERPASS”</li>
        </ul></td> 
      </tr> 
      <tr> 
       <td>signature</td> 
       <td>ANS</td> 
       <td>Message signature</td> 
      </tr> 
     </tbody>
    </table> 
    <h1 id="payment-api">Payment API</h1> 
    <h2 id="http-interface">HTTP Interface</h2> 
    <p>The system consists of different resources accessible via HTTPS protocol using the defined mandatory headers for authentication and UTF-8 JSON body for the POST requests.</p> 
    <p>HTTP response code is always 200 for successful HTTP calls. Anything else indicates a system or communication level failure.</p> 
    <p>Mandatory headers for both requests and responses are <code class="prettyprint">Content-Type</code>, <code class="prettyprint">Content-Length</code> and the <a href="#headers">Custom Headers</a>. Valid values for <code class="prettyprint">Content-Type</code> and <code class="prettyprint">Content-Length</code> are “application/json; charset=utf-8” and the correct body byte length using UTF-8 encoding.</p> 
    <h3 id="headers">Headers</h3> 
    <p>In addition to the standard headers, the following custom headers are used.</p> 
    <p>All the HTTP requests <em>must</em> contain the following headers:</p> 
    <ol> 
     <li><code class="prettyprint">Signature</code>: ”” = The signature header used for authentication and message consistency, see the following section.</li> 
     <li><code class="prettyprint">SPH-Account</code>: ”example_account”= (High level) account name associated with the authentication key.</li> 
     <li><code class="prettyprint">SPH-Merchant</code>: ”example_merchant” = The account’s sub-account, which provides optional merchant level customization.</li> 
     <li><code class="prettyprint">SPH-Timestamp</code>: “yyyy-MM-dd’T'HH:mm:ss'Z'” = Contains the client’s request time in UTC format. Server will check the timestamp does not differ more than five (5) minutes from the correct global UTC time.</li> 
     <li><code class="prettyprint">SPH-Request-Id</code>: ”12ade018-c562-40bc-a4e6-7f63c69fd90a” = Unique one-time- use Request ID in UUID4 format.</li> 
    </ol> 
    <p>Optionally the HTTP request <em>may</em> contain the following headers:</p> 
    <ol> 
     <li><code class="prettyprint">Sph-Api-Version</code>: “yyyyMMdd” = The version date of the JSON response schema. Defaults to “20141215”.</li> 
    </ol> 
    <p>All the HTTP responses contain the following headers:</p> 
    <ol> 
     <li><code class="prettyprint">Signature</code>: ”” see the following section.</li> 
     <li><code class="prettyprint">SPH-Response-Id</code>: ”03c15388-bebc-4872-b3f5-faed0ca65ff6” = Unique one-time- use Response ID in UUID4 format.</li> 
     <li><code class="prettyprint">SPH-Timestamp</code>: “yyyy-MM-dd’T'HH:mm:ss'Z'” which contains the servers response time in UTC format. When the client receives the response, the timestamp must be checked and it must not differ more than five (5) minutes from the correct global UTC time.</li> 
     <li><code class="prettyprint">SPH-Request-Id</code>: ”12ade018-c562-40bc-a4e6-7f63c69fd90a” = Same as the request UUID4.</li> 
    </ol> 
    <h3 id="errors">Errors</h3> 
    <pre class="highlight java"><code><span class="k">try</span> <span class="o">{</span>
  <span class="c1">// Use Payment Highway's bindings...</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">AuthenticationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// signals a failure to authenticate Payment Highway response</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">HttpResponseException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// Signals a non 2xx HTTP response.</span>
  <span class="c1">// Invalid parameters were supplied to Payment Highway's API</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// Signals that an I/O exception of some sort has occurred</span>
<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// Something else happened</span>
<span class="o">}</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="k">begin</span>
  <span class="sr">//</span> <span class="no">Use</span> <span class="no">Payment</span> <span class="no">Highway</span><span class="s1">'s bindings... rescue PaymentHighway::Exception::AuthenticationException =&gt; e // Signals a failure to authenticate Payment Highway response rescue PaymentHighway::Exception::HttpResponseException =&gt; e // Signals a non 2xx HTTP response or a 2xx HTTP response not containing the required headers // Invalid parameters were supplied to Payment Highway'</span><span class="n">s</span> <span class="no">API</span>
<span class="k">rescue</span> <span class="no">ArgumentError</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="sr">//</span> <span class="no">A</span> <span class="n">function</span> <span class="n">was</span> <span class="n">called</span> <span class="n">with</span> <span class="n">an</span> <span class="n">argument</span> <span class="n">of</span> <span class="n">invalid</span> <span class="n">type</span>
<span class="k">rescue</span> <span class="no">RuntimeError</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="sr">//</span> <span class="no">PaymentHighway</span> <span class="n">functioned</span> <span class="k">in</span> <span class="n">an</span> <span class="n">unexpected</span> <span class="n">way</span>
<span class="k">rescue</span> <span class="no">Exception</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="sr">//</span> <span class="no">Something</span> <span class="k">else</span> <span class="n">happened</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="nx">PaymentHighwayAPI</span><span class="p">.</span><span class="nx">initTransaction</span><span class="p">()</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">initResponse</span><span class="p">){</span>
    <span class="c1">// handle response</span>
    <span class="p">...</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// handle errors</span>
    <span class="p">...</span>
  <span class="p">});</span>  
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="k">try</span> <span class="p">{</span>
    <span class="c1">// Use Payment Highway's bindings... </span><span class="p">}</span> 
<span class="k">catch</span> <span class="p">(</span><span class="nx">Exception</span> <span class="nv">$e</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Something else happened </span><span class="p">}</span>
</code></pre> 
    <p>Payment Highway clients can raise exceptions for several reasons. Payment Highway authenticates each request and if there is invalid parameters or a signature mismatch, a HttpResponseException is raised. </p> 
    <p>The Payment Highway clients also authenticate response messages, and in case of signature mismatch an AuthenticationException will be raised.</p> 
    <p>It is recommended to gracefully handle exceptions from the API.</p> 
    <h2 id="authentication">Authentication</h2> 
    <pre class="highlight java"><code><span class="n">String</span> <span class="n">serviceUrl</span> <span class="o">=</span> <span class="s">"https://v1-hub-staging.sph-test-solinor.com"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">signatureKeyId</span> <span class="o">=</span> <span class="s">"testKey"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">signatureSecret</span> <span class="o">=</span> <span class="s">"testSecret"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">account</span> <span class="o">=</span> <span class="s">"test"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">merchant</span> <span class="o">=</span> <span class="s">"test_merchantId"</span><span class="o">;</span>

<span class="k">try</span> <span class="o">(</span><span class="n">PaymentAPI</span> <span class="n">paymentAPI</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PaymentAPI</span><span class="o">(</span><span class="n">serviceUrl</span><span class="o">,</span> <span class="n">signatureKeyId</span><span class="o">,</span> <span class="n">signatureSecret</span><span class="o">,</span> <span class="n">account</span><span class="o">,</span> <span class="n">merchant</span><span class="o">))</span> <span class="o">{</span>
  <span class="c1">// Use paymentAPI to create debit requests etc.</span>
<span class="o">}</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="n">service_url</span> <span class="o">=</span> <span class="s2">"https://v1-hub-staging.sph-test-solinor.com"</span>
<span class="n">signature_key_id</span> <span class="o">=</span> <span class="s2">"testKey"</span>
<span class="n">signature_secret</span> <span class="o">=</span> <span class="s2">"testSecret"</span>
<span class="n">account</span> <span class="o">=</span> <span class="s2">"test"</span>
<span class="n">merchant</span> <span class="o">=</span> <span class="s2">"test_merchantId"</span>

<span class="n">payment_api</span> <span class="o">=</span> <span class="no">PaymentHighway</span><span class="o">::</span><span class="no">PaymentApi</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">service_url</span><span class="p">,</span> <span class="n">signature_key_id</span><span class="p">,</span> <span class="n">signature_secret</span><span class="p">,</span> <span class="n">account</span><span class="p">,</span> <span class="n">merchant</span><span class="p">)</span>
  <span class="sr">//</span> <span class="no">Use</span> <span class="n">payment_api</span> <span class="n">to</span> <span class="n">create</span> <span class="n">debit</span> <span class="n">requests</span> <span class="n">etc</span><span class="o">.</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">serviceUrl</span> <span class="o">=</span> <span class="s2">"https://v1-hub-staging.sph-test-solinor.com"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">testKey</span> <span class="o">=</span> <span class="s1">'testKey'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">testSecret</span> <span class="o">=</span> <span class="s1">'testSecret'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">account</span> <span class="o">=</span> <span class="s1">'test'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">merchant</span> <span class="o">=</span> <span class="s1">'test_merchantId'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">paymentAPI</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PaymentAPI</span><span class="p">(</span>
                <span class="nx">serviceUrl</span><span class="p">,</span> 
                <span class="nx">testKey</span><span class="p">,</span> 
                <span class="nx">testSecret</span><span class="p">,</span> 
                <span class="nx">account</span><span class="p">,</span> 
                <span class="nx">merchant</span>
        <span class="p">);</span>
<span class="c1">// Use paymentAPI to create debit requests etc.</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="k">use</span> <span class="nx">Solinor\PaymentHighway\PaymentApi</span><span class="p">;</span>

<span class="nv">$serviceUrl</span> <span class="o">=</span> <span class="s2">"https://v1-hub-staging.sph-test-solinor.com"</span><span class="p">;</span>
<span class="nv">$signatureKeyId</span> <span class="o">=</span> <span class="s2">"testKey"</span><span class="p">;</span>
<span class="nv">$signatureSecret</span> <span class="o">=</span> <span class="s2">"testSecret"</span><span class="p">;</span>
<span class="nv">$account</span> <span class="o">=</span> <span class="s2">"test"</span><span class="p">;</span>
<span class="nv">$merchant</span> <span class="o">=</span> <span class="s2">"test_merchantId"</span><span class="p">;</span>

<span class="nv">$paymentApi</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PaymentApi</span><span class="p">(</span>
                    <span class="nv">$serviceUrl</span><span class="p">,</span> 
                    <span class="nv">$signatureKeyId</span><span class="p">,</span> 
                    <span class="nv">$signatureSecret</span><span class="p">,</span> 
                    <span class="nv">$account</span><span class="p">,</span> 
                    <span class="nv">$merchant</span>
                <span class="p">);</span>

</code></pre> 
    <h3 id="signatures">Signatures</h3> 
    <p>Request authentication and the response signatures are calculated by applying the HMAC- SHA256 method (RFC 2104 - Keyed-Hashing for Message Authentication, http://www.ietf.org/rfc/rfc2104.txt) to the defined concatenated string using the secret key provided to the account user.</p> 
    <aside class="notice">
      The merchant secret key must be replaced every two years with a new one provided by Payment Highway. 
    </aside> 
    <p>A signature is transmitted Hex encoded in the ”Signature” HTTP header with the signature value prefixed with the strings “SPH1” and “secretKeyID”, where the secretKeyID is the ID of the key used in the HMAC calculation. The strings are separated with blank spaces (0x20) thus the header would look like: “Signature: SPH1 secretKeyId signature”</p> 
    <p>The concatenated string consists of the following fields separated with a new line (“\n”):</p> 
    <pre class="highlight shell"><code><span class="c"># Example of a string used for signature calculation</span>
POST
/transaction/859cefdf-41fa-453a-a6a5-beff35e2f3b8/debit
sph-account:test
sph-merchant:test_merchantId
sph-request-id:12ade018-c562-40bc-a4e6-7f63c69fd90a
sph-timestamp:2014-09-18T14:09:25Z
<span class="o">{</span>”some”:”body”<span class="o">{</span>”json”:1<span class="o">}}</span>
</code></pre> 
    <ul> 
     <li>HTTP method (e.g. “POST” or “GET”)</li> 
     <li>HTTP URI without server URL (e.g. ““/transaction/859cefdf-41fa-453a-a6a5- beff35e2f3b8/debit”).</li> 
     <li>All the SPH- headers’ trimmed key value pairs concatenated in alphabetic order (by the header name). The header keys must be in lowercase. Each header’s key and value are separated with a colon (“:”) and the different headers are separated with a new line (“\n”).</li> 
     <li>HTTP body if exists, empty string if not.</li> 
    </ul> 
    <aside class="notice">
      An empty body “” (e.g. in GET requests), is still included in the concatenated string, resulting in one new line character after the headers. 
    </aside> 
    <p>The client must check the response signature in order to verify the authenticity of the response.</p> 
    <h3 id="message-body">Message body</h3> 
    <p>The messaging format is standard compliant JSON using UTF-8 encoding. Each request and response has a set of mandatory and optional fields, which values are validated using the included regular expression rules. A GET request does not have a request body whereas a POST request often does, and both of these always receive response body.</p> 
    <h2 id="commit-payment">Commit Payment</h2> 
    <blockquote> 
     <p>Commit Form Payment</p> 
    </blockquote> 
    <pre class="highlight shell"><code>curl -i <span class="se">\</span>
-H <span class="s2">"Content-Type: application/json; charset=utf-8"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Account: test"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Merchant: test_merchantId"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Timestamp: 2014-09-18T10:32:59Z"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Request-Id: f47ac10b-58cc-4372-a567-0e02b2c3d479"</span> <span class="se">\</span>
-H <span class="s2">"Signature: SPH1 testKey 4eab87a16e3ee7bd530d778af0cb6c680dcaa52ed1913a9c1bd8ed5a8d689e3e"</span> <span class="se">\</span>
--data-urlencode <span class="s1">' { "amount":1990, "currency":"EUR" } '</span> <span class="se">\</span>
https://v1-hub-staging.sph-test-solinor.com/transaction/202eee01-a6cb-432a-a725-175c32b887d2/commit
<span class="c"># Replace the transaction ID with the one retrieved from the Form API sph-transaction-id return parameter.</span>
</code></pre> 
    <pre class="highlight java"><code><span class="n">String</span> <span class="n">transactionId</span> <span class="o">=</span> <span class="s">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="o">;</span> <span class="c1">// get sph-transaction-id as a GET parameter</span>
<span class="n">String</span> <span class="n">amount</span> <span class="o">=</span> <span class="s">"1990"</span><span class="o">;</span>
<span class="n">String</span> <span class="n">currency</span> <span class="o">=</span> <span class="s">"EUR"</span><span class="o">;</span>
<span class="n">CommitTransactionResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">paymentAPI</span><span class="o">.</span><span class="na">commitTransaction</span><span class="o">(</span><span class="n">transactionId</span><span class="o">,</span> <span class="n">amount</span><span class="o">,</span> <span class="n">currency</span><span class="o">);</span>

<span class="n">response</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getCode</span><span class="o">();</span> <span class="c1">// 100</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="n">transaction_id</span> <span class="o">=</span> <span class="s2">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span> <span class="o">/</span><span class="sr">/ get sph-transaction-id as a GET parameter amount = 1990 currency = "EUR" commit_transaction_response = payment_api.commit_transaction(transaction_id, amount, currency) commit_transaction_response.result.code /</span><span class="o">/</span> <span class="mi">100</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">transactionId</span> <span class="o">=</span> <span class="s1">'f23a9be0-15fe-43df-98ac-92f6a5731c3b'</span><span class="p">;</span> <span class="c1">// get sph-transaction-id as a GET parameter</span>
<span class="kd">var</span> <span class="nx">amount</span> <span class="o">=</span> <span class="mi">1990</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">currency</span> <span class="o">=</span> <span class="s1">'EUR'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">paymentHighway</span><span class="p">.</span><span class="nx">CommitTransactionRequest</span><span class="p">(</span><span class="nx">amount</span><span class="p">,</span> <span class="nx">currency</span><span class="p">);</span>

<span class="nx">paymentAPI</span><span class="p">.</span><span class="nx">commitTransaction</span><span class="p">(</span><span class="nx">transactionId</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
        <span class="kd">var</span> <span class="nx">resultCode</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">code</span><span class="p">;</span> <span class="c1">// Should be 100, if OK </span>
    <span class="p">});</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$transactionId</span> <span class="o">=</span> <span class="s2">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="p">;</span> <span class="c1">// get sph-transaction-id as a GET parameter </span><span class="nv">$amount</span> <span class="o">=</span> <span class="mi">1999</span><span class="p">;</span>
<span class="nv">$currency</span> <span class="o">=</span> <span class="s2">"EUR"</span><span class="p">;</span>

<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$paymentApi</span><span class="o">-&gt;</span><span class="na">commitFormTransaction</span><span class="p">(</span><span class="nv">$transactionId</span><span class="p">,</span> <span class="nv">$amount</span><span class="p">,</span> <span class="nv">$currency</span> <span class="p">);</span> 

<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">body</span><span class="o">-&gt;</span><span class="na">result</span><span class="o">-&gt;</span><span class="na">code</span><span class="p">;</span> <span class="c1">// 100 </span></code></pre> 
    <blockquote> 
     <p>JSON Response</p> 
    </blockquote> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="s2">"committed"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="s2">"committed_amount"</span><span class="p">:</span><span class="w"> </span><span class="mi">9999</span><span class="p">,</span><span class="w"> </span><span class="s2">"filing_code"</span><span class="p">:</span><span class="w"> </span><span class="s2">"161005089712"</span><span class="p">,</span><span class="w"> </span><span class="s2">"card"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"Visa"</span><span class="p">,</span><span class="w"> </span><span class="s2">"partial_pan"</span><span class="p">:</span><span class="s2">"0024"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_year"</span><span class="p">:</span><span class="s2">"2023"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_month"</span><span class="p">:</span><span class="s2">"11"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cvc_required"</span><span class="p">:</span><span class="w"> </span><span class="s2">"no"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bin"</span><span class="p">:</span><span class="w"> </span><span class="s2">"415301"</span><span class="p">,</span><span class="w"> </span><span class="s2">"funding"</span><span class="p">:</span><span class="w"> </span><span class="s2">"debit"</span><span class="p">,</span><span class="w"> </span><span class="s2">"country_code"</span><span class="p">:</span><span class="w"> </span><span class="s2">"FI"</span><span class="p">,</span><span class="w"> </span><span class="s2">"category"</span><span class="p">:</span><span class="w"> </span><span class="s2">"unknown"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"card_token"</span><span class="p">:</span><span class="s2">"71435029-fbb6-4506-aa86-8529efb640b0"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cardholder_authentication"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"no"</span><span class="p">,</span><span class="w"> </span><span class="s2">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"message"</span><span class="p">:</span><span class="s2">"OK"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <p>In order to finalize (capture) a payment performed via Form API (“Payment”, “Payment &amp; Add Card” or “Payment with token and CVC”), the corresponding sph-transaction-id must be committed.</p> 
    <p>The same applies for a “Charge a card” payment API request when the automatic commit is disabled for auth &amp; capture using the “commit” parameter as “false”. In this case the transaction ID must be committed as well.</p> 
    <p>The commit amount must be equal or less than the original payment amount. One payment can only be committed once.</p> 
    <p>Up to 7 days old transactions can be committed.</p> 
    <p>In order to find out the result of the form payment without committing it, use the <a href="#transaction-result">“Transaction result”</a> request instead.</p> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">POST /transaction/&lt;:transaction_id&gt;/commit</code></p> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>amount</td> 
       <td>M</td> 
       <td>AMOUNT</td> 
       <td>Amount in the smallest currency unit. E.g. 99.99 € = 9999</td> 
      </tr> 
      <tr> 
       <td>currency</td> 
       <td>M</td> 
       <td>CURRENCY</td> 
       <td>ISO 4217 currency code</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="http-response">HTTP Response</h3> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>card_token</td> 
       <td>O</td> 
       <td>UUID4</td> 
       <td>Present on a successful commit. See also card.cvc_required below.</td> 
      </tr> 
      <tr> 
       <td>card</td> 
       <td>O</td> 
       <td></td> 
       <td>Present on a successful commit. See also card.cvc_required below.</td> 
      </tr> 
      <tr> 
       <td>card.partial_pan</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>card.type</td> 
       <td>M</td> 
       <td></td> 
       <td>Card type, for example ‘Visa’</td> 
      </tr> 
      <tr> 
       <td>card.partial_pan</td> 
       <td>M</td> 
       <td></td> 
       <td>Last four digits of the card</td> 
      </tr> 
      <tr> 
       <td>card.expire_year</td> 
       <td>M</td> 
       <td></td> 
       <td>Card expiration year</td> 
      </tr> 
      <tr> 
       <td>card.expire_month</td> 
       <td>M</td> 
       <td></td> 
       <td>Card expiration month</td> 
      </tr> 
      <tr> 
       <td>card.cvc_required</td> 
       <td>M</td> 
       <td></td> 
       <td>Whether the CVC is required for paying with this card. Can be one of “yes” or “no”.</td> 
      </tr> 
      <tr> 
       <td>card.bin</td> 
       <td>M</td> 
       <td></td> 
       <td>First 2 or 6 digits of the card number. (6 MC/VISA, 2 Amex/Diners)</td> 
      </tr> 
      <tr> 
       <td>card.funding</td> 
       <td>M</td> 
       <td></td> 
       <td>“credit”, “debit” or “unknown”</td> 
      </tr> 
      <tr> 
       <td>card.category</td> 
       <td>M</td> 
       <td></td> 
       <td>“business”, “prepaid” or “unknown”</td> 
      </tr> 
      <tr> 
       <td>card.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>customer</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>customer.network_address</td> 
       <td>O</td> 
       <td>IP</td> 
       <td>The IP address of the customer for fraud detection purposes</td> 
      </tr> 
      <tr> 
       <td>customer.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>cardholder_authentication</td> 
       <td>M</td> 
       <td></td> 
       <td>Indicates whether ThreeDS (3ds) card holder authentication was done (“authenticated”, “attempted” or “no”)</td> 
      </tr> 
      <tr> 
       <td>result</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.code</td> 
       <td>M</td> 
       <td>RCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.message</td> 
       <td>M</td> 
       <td>RMSG</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>committed</td> 
       <td>M</td> 
       <td>BOOLEAN</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>committed_amount</td> 
       <td>O</td> 
       <td>AMOUNT</td> 
       <td>Omitted if “committed” is false</td> 
      </tr> 
      <tr> 
       <td>filing_code</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="user-profile">User profile</h2> 
    <p>This api is available only for Masterpass transactions. It is is mainly intended for fetching shipping address before calculating shipping cost.</p> 
    <blockquote> 
     <p>Fetch User Profile for transaction</p> 
    </blockquote> 
    <pre class="highlight java"><code><span class="n">String</span> <span class="n">transactionId</span> <span class="o">=</span> <span class="s">"327c6f29-9b46-40b9-b85b-85e908015d92"</span><span class="o">;</span> <span class="c1">// get sph-transaction-id as a GET parameter</span>

<span class="n">UserProfileResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">paymentAPI</span><span class="o">.</span><span class="na">userProfile</span><span class="o">(</span><span class="n">transactionId</span><span class="o">);</span>

<span class="n">response</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getCode</span><span class="o">();</span> <span class="c1">// 100</span>
</code></pre> 
    <blockquote> 
     <p>JSON Response</p> 
    </blockquote> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="s2">"card"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"MasterCard"</span><span class="p">,</span><span class="w"> </span><span class="s2">"partial_pan"</span><span class="p">:</span><span class="s2">"0107"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_year"</span><span class="p">:</span><span class="s2">"2019"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_month"</span><span class="p">:</span><span class="s2">"12"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cvc_required"</span><span class="p">:</span><span class="s2">"not_tested"</span><span class="p">,</span><span class="w"> </span><span class="s2">"bin"</span><span class="p">:</span><span class="s2">"550690"</span><span class="p">,</span><span class="w"> </span><span class="s2">"funding"</span><span class="p">:</span><span class="s2">"credit"</span><span class="p">,</span><span class="w"> </span><span class="s2">"country_code"</span><span class="p">:</span><span class="s2">"US"</span><span class="p">,</span><span class="w"> </span><span class="s2">"category"</span><span class="p">:</span><span class="s2">"unknown"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"customer"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"network_address"</span><span class="p">:</span><span class="s2">"83.145.208.186"</span><span class="p">,</span><span class="w"> </span><span class="s2">"country_code"</span><span class="p">:</span><span class="s2">"FI"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"cardholder_authentication"</span><span class="p">:</span><span class="s2">"no"</span><span class="p">,</span><span class="w"> </span><span class="s2">"masterpass"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"amount"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"currency"</span><span class="p">:</span><span class="s2">"EUR"</span><span class="p">,</span><span class="w"> </span><span class="s2">"checkout_oauth_token"</span><span class="p">:</span><span class="s2">"8dddb475e23bf96ed70082455c7c599596f12986"</span><span class="p">,</span><span class="w"> </span><span class="s2">"masterpass_transaction_id"</span><span class="p">:</span><span class="s2">"2468807694572615629"</span><span class="p">,</span><span class="w"> </span><span class="s2">"masterpass_wallet_id"</span><span class="p">:</span><span class="s2">"101"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"profile"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"first_name"</span><span class="p">:</span><span class="s2">"Matti"</span><span class="p">,</span><span class="w"> </span><span class="s2">"last_name"</span><span class="p">:</span><span class="s2">"Meikäläinen"</span><span class="p">,</span><span class="w"> </span><span class="s2">"country"</span><span class="p">:</span><span class="s2">"FI"</span><span class="p">,</span><span class="w"> </span><span class="s2">"email_address"</span><span class="p">:</span><span class="s2">"matti.meikalainen@gmail.com"</span><span class="p">,</span><span class="w"> </span><span class="s2">"phone_number"</span><span class="p">:</span><span class="s2">"0501234567"</span><span class="p">,</span><span class="w"> </span><span class="s2">"billing_address"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"line1"</span><span class="p">:</span><span class="s2">"Kampinkuja 2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"postal_code"</span><span class="p">:</span><span class="s2">"00100"</span><span class="p">,</span><span class="w"> </span><span class="s2">"city"</span><span class="p">:</span><span class="s2">"Helsinki"</span><span class="p">,</span><span class="w"> </span><span class="s2">"country"</span><span class="p">:</span><span class="s2">"FI"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"shipping_address"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"recipient_name"</span><span class="p">:</span><span class="s2">"Matti Meikäläinen"</span><span class="p">,</span><span class="w"> </span><span class="s2">"recipient_phone_number"</span><span class="p">:</span><span class="s2">"0501234567"</span><span class="p">,</span><span class="w"> </span><span class="s2">"line1"</span><span class="p">:</span><span class="s2">"Kampinkuja 2"</span><span class="p">,</span><span class="w"> </span><span class="s2">"postal_code"</span><span class="p">:</span><span class="s2">"00100"</span><span class="p">,</span><span class="w"> </span><span class="s2">"city"</span><span class="p">:</span><span class="s2">"Helsinki"</span><span class="p">,</span><span class="w"> </span><span class="s2">"country"</span><span class="p">:</span><span class="s2">"FI"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"message"</span><span class="p">:</span><span class="s2">"OK"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <p>After fetching user profile for the transaction, <a href="#masterpass-debit-transaction">Masterpass debit transaction</a> can be performed.</p> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">GET /transaction/&lt;:transaction_id&gt;/user_profile</code></p> 
    <h3 id="http-response">HTTP Response</h3> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>card</td> 
       <td>O</td> 
       <td></td> 
       <td>Present on a successful Masterpass transaction.</td> 
      </tr> 
      <tr> 
       <td>card.partial_pan</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>card.type</td> 
       <td>M</td> 
       <td></td> 
       <td>Card type, for example ‘Visa’</td> 
      </tr> 
      <tr> 
       <td>card.partial_pan</td> 
       <td>M</td> 
       <td></td> 
       <td>Last four digits of the card</td> 
      </tr> 
      <tr> 
       <td>card.expire_year</td> 
       <td>M</td> 
       <td></td> 
       <td>Card expiration year</td> 
      </tr> 
      <tr> 
       <td>card.expire_month</td> 
       <td>M</td> 
       <td></td> 
       <td>Card expiration month</td> 
      </tr> 
      <tr> 
       <td>card.cvc_required</td> 
       <td>M</td> 
       <td></td> 
       <td>Whether the CVC is required for paying with this card. Can be one of “yes” or “no”.</td> 
      </tr> 
      <tr> 
       <td>card.bin</td> 
       <td>M</td> 
       <td></td> 
       <td>First 2 or 6 digits of the card number. (6 MC/VISA, 2 Amex/Diners)</td> 
      </tr> 
      <tr> 
       <td>card.funding</td> 
       <td>M</td> 
       <td></td> 
       <td>“credit”, “debit” or “unknown”</td> 
      </tr> 
      <tr> 
       <td>card.category</td> 
       <td>M</td> 
       <td></td> 
       <td>“business”, “prepaid” or “unknown”</td> 
      </tr> 
      <tr> 
       <td>card.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>customer</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>customer.network_address</td> 
       <td>O</td> 
       <td>IP</td> 
       <td>The IP address of the customer for fraud detection purposes</td> 
      </tr> 
      <tr> 
       <td>customer.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>cardholder_authentication</td> 
       <td>O</td> 
       <td></td> 
       <td>Indicates whether ThreeDS (3ds) card holder authentication was done (“authenticated”, “attempted” or “no”)</td> 
      </tr> 
      <tr> 
       <td>masterpass</td> 
       <td>C</td> 
       <td></td> 
       <td>Masterpass info, mandatory for masterpass transactions</td> 
      </tr> 
      <tr> 
       <td>masterpass.amount</td> 
       <td>M</td> 
       <td>AMOUNT</td> 
       <td>Amount in the smallest currency unit. E.g. 99.99 € = 9999</td> 
      </tr> 
      <tr> 
       <td>masterpass.currency</td> 
       <td>M</td> 
       <td>CURRENCY</td> 
       <td>ISO 4217 currency code</td> 
      </tr> 
      <tr> 
       <td>masterpass.checkout_oauth_token</td> 
       <td>M</td> 
       <td>AN</td> 
       <td>Checkout token given by Masterpass (for communicating with them)</td> 
      </tr> 
      <tr> 
       <td>masterpass.masterpass_transaction_id</td> 
       <td>M</td> 
       <td>AN</td> 
       <td>Transaction id given by Masterpass (for communicating with them)</td> 
      </tr> 
      <tr> 
       <td>masterpass.masterpass_wallet_id</td> 
       <td>M</td> 
       <td>N</td> 
       <td>Wallet id, 101 for Masterpass hosted wallets, (for example. 340 for Nordea hosted wallets)</td> 
      </tr> 
      <tr> 
       <td>profile</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.first_name</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.middle_name</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.last_name</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.gender</td> 
       <td>O</td> 
       <td>AN</td> 
       <td>M or F</td> 
      </tr> 
      <tr> 
       <td>profile.date_of_birth</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.date_of_birth.year</td> 
       <td>M</td> 
       <td>N</td> 
       <td>Year of birth</td> 
      </tr> 
      <tr> 
       <td>profile.date_of_birth.month</td> 
       <td>M</td> 
       <td>N</td> 
       <td>Month of birth</td> 
      </tr> 
      <tr> 
       <td>profile.date_of_birth.day</td> 
       <td>M</td> 
       <td>N</td> 
       <td>Day of birth</td> 
      </tr> 
      <tr> 
       <td>profile.national_id</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.country</td> 
       <td>O</td> 
       <td>AN</td> 
       <td>The cardholder’s country. Defined by ISO 3166-1 alpha-2 digit country codes, for example, US is United States, AU is Australia, CA is Canada, GB is United Kingdom, and so on.</td> 
      </tr> 
      <tr> 
       <td>profile.email_address</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.phone_number</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.billing_address</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.billing_address.line1</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.billing_address.line2</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.billing_address.line3</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.billing_address.postal_code</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.billing_address.city</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.billing_address.country_subdivision</td> 
       <td>O</td> 
       <td>AN</td> 
       <td>the cardholder’s country subdivision. Defined by ISO 3166-1 alpha-2 digit code, for example, US-VA is Virginia, US-OH is Ohio</td> 
      </tr> 
      <tr> 
       <td>profile.billing_address.country</td> 
       <td>M</td> 
       <td>AN</td> 
       <td>The cardholder’s country. Defined by ISO 3166-1 alpha-2 digit country codes, for example, US is United States, AU is Australia, CA is Canada, GB is United Kingdom, and so on.</td> 
      </tr> 
      <tr> 
       <td>profile.shipping_address</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.shipping_address.recipient_name</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.shipping_address.recipient_phone_number</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.shipping_address.line1</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.shipping_address.line2</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.shipping_address.line3</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.shipping_address.postal_code</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.shipping_address.city</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>profile.shipping_address.country_subdivision</td> 
       <td>O</td> 
       <td>AN</td> 
       <td>the cardholder’s country subdivision. Defined by ISO 3166-1 alpha-2 digit code, for example, US-VA is Virginia, US-OH is Ohio</td> 
      </tr> 
      <tr> 
       <td>profile.shipping_address.country</td> 
       <td>M</td> 
       <td>AN</td> 
       <td>The cardholder’s country. Defined by ISO 3166-1 alpha-2 digit country codes, for example, US is United States, AU is Australia, CA is Canada, GB is United Kingdom, and so on.</td> 
      </tr> 
      <tr> 
       <td>result</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.code</td> 
       <td>M</td> 
       <td>RCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.message</td> 
       <td>M</td> 
       <td>RMSG</td> 
       <td></td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="transaction-result">Transaction result</h2> 
    <p>Used to find out whether or not an uncommitted transaction succeeded, without actually committing (capturing) it.</p> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">POST /transaction/&lt;:transaction_id&gt;/result</code></p> 
    <h3 id="responses">Responses</h3> 
    <p>Responses are exactly the same as in the <a href="#commit-payment">Commit</a>.</p> 
    <h2 id="charge-a-card">Charge a card</h2> 
    <p>In order to do safe transactions, an execution model is used where the first call to <code class="prettyprint">/transaction</code> acquires a financial transaction handle, later referred as “ID”, which ensures the transaction is executed exactly once. Afterwards it is possible to execute a debit transaction by calling <code class="prettyprint">/transaction/&lt;:transaction_id&gt;/debit</code> using the received ID handle. If the execution fails, the command can be repeated in order to confirm the transaction with the particular ID has been processed. After executing the command, the status of the transaction can be checked by executing a <code class="prettyprint">GET</code> request to the <code class="prettyprint">/transaction/&lt;:transaction_id&gt;</code> resource.</p> 
    <h3 id="init-transaction-handle">Init transaction handle</h3> 
    <p>Init the transaction handle and get the ID for it.</p> 
    <blockquote> 
     <p>Init transaction handle</p> 
    </blockquote> 
    <pre class="highlight shell"><code>curl -i <span class="se">\</span>
-H <span class="s2">"Content-Type: application/json; charset=utf-8"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Account: test"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Merchant: test_merchantId"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Timestamp: 2014-09-18T10:32:59Z"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Request-Id: f47ac10b-58cc-4372-a567-0e02b2c3d479"</span> <span class="se">\</span>
-H <span class="s2">"Signature: SPH1 testKey 4eab87a16e3ee7bd530d778af0cb6c680dcaa52ed1913a9c1bd8ed5a8d689e3e"</span> <span class="se">\</span>
--data <span class="s2">""</span> <span class="se">\</span>
https://v1-hub-staging.sph-test-solinor.com/transaction
</code></pre> 
    <pre class="highlight java"><code><span class="n">InitTransactionResponse</span> <span class="n">initResponse</span> <span class="o">=</span> <span class="n">paymentAPI</span><span class="o">.</span><span class="na">initTransaction</span><span class="o">();</span>

<span class="n">initResponse</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getCode</span><span class="o">();</span> <span class="c1">// 100</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="n">init_response</span> <span class="o">=</span> <span class="n">payment_api</span><span class="p">.</span><span class="nf">init_transaction_handle</span>

<span class="n">init_response</span><span class="p">.</span><span class="nf">result</span><span class="p">.</span><span class="nf">code</span> <span class="sr">//</span> <span class="mi">100</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="nx">paymentAPI</span><span class="p">.</span><span class="nx">initTransaction</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
        <span class="kd">var</span> <span class="nx">resultCode</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">code</span><span class="p">;</span> <span class="c1">// 100</span>
    <span class="p">});</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$paymentApi</span><span class="o">-&gt;</span><span class="na">initTransaction</span><span class="p">();</span>

<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">body</span><span class="o">-&gt;</span><span class="na">result</span><span class="o">-&gt;</span><span class="na">code</span><span class="p">;</span> <span class="c1">// 100 </span></code></pre> 
    <blockquote> 
     <p>JSON Response</p> 
    </blockquote> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"ebf19bf4-2ea7-4a29-8a90-f1abec66c57d"</span><span class="p">,</span><span class="w"> </span><span class="s2">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"message"</span><span class="p">:</span><span class="s2">"OK"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <h4 id="http-request">HTTP Request</h4> 
    <p><code class="prettyprint">POST /transaction</code></p> 
    <h4 id="http-response">HTTP Response</h4> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>id</td> 
       <td>M</td> 
       <td>UUID4</td> 
       <td>The handle for the following requests.</td> 
      </tr> 
      <tr> 
       <td>result</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.code</td> 
       <td>M</td> 
       <td>RCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.message</td> 
       <td>M</td> 
       <td>RMSG</td> 
       <td></td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="debit-transaction">Debit transaction</h3> 
    <blockquote> 
     <p>Charge a card token (debit transaction)</p> 
    </blockquote> 
    <pre class="highlight shell"><code>curl -i <span class="se">\</span>
-H <span class="s2">"Content-Type: application/json; charset=utf-8"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Account: test"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Merchant: test_merchantId"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Timestamp: 2014-09-18T10:32:59Z"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Request-Id: f47ac10b-58cc-4372-a567-0e02b2c3d479"</span> <span class="se">\</span>
-H <span class="s2">"Signature: SPH1 testKey 4eab87a16e3ee7bd530d778af0cb6c680dcaa52ed1913a9c1bd8ed5a8d689e3e"</span> <span class="se">\</span>
--data-urlencode <span class="s1">' { "amount": 1900, "currency": "EUR", "token": { "id": "859aafdf-41fa-453a-a6a5-beff35e2f3b8" } } '</span> <span class="se">\</span>
https://v1-hub-staging.sph-test-solinor.com/transaction/4d185afe-3ef4-11e4-9d9f-164230d1df67/debit
</code></pre> 
    <pre class="highlight java"><code><span class="c1">// Debit with Token</span>

<span class="n">Token</span> <span class="n">token</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Token</span><span class="o">(</span><span class="s">"859aafdf-41fa-453a-a6a5-beff35e2f3b8"</span><span class="o">);</span>
<span class="kt">long</span> <span class="n">amount</span> <span class="o">=</span> <span class="mi">1990L</span><span class="o">;</span>
<span class="n">String</span> <span class="n">currency</span> <span class="o">=</span> <span class="s">"EUR"</span><span class="o">;</span>

<span class="n">TransactionRequest</span> <span class="n">transaction</span> <span class="o">=</span> <span class="n">TransactionRequest</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">amount</span><span class="o">,</span> <span class="n">currency</span><span class="o">)</span>
  <span class="o">.</span><span class="na">setOrder</span><span class="o">(</span><span class="s">"XY123456"</span><span class="o">)</span> <span class="c1">// Order id</span>
  <span class="o">.</span><span class="na">build</span><span class="o">();</span>

<span class="n">String</span> <span class="n">transactionId</span> <span class="o">=</span> <span class="s">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="o">;</span>
<span class="n">TransactionResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">paymentAPI</span><span class="o">.</span><span class="na">debitTransaction</span><span class="o">(</span><span class="n">transactionId</span><span class="o">,</span> <span class="n">transaction</span><span class="o">);</span>

<span class="n">response</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getCode</span><span class="o">();</span> <span class="c1">// 100</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="sr">//</span> <span class="no">Debit</span> <span class="n">with</span> <span class="no">Token</span>

<span class="n">amount</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">transaction_request</span> <span class="o">=</span> <span class="no">PaymentHighway</span><span class="o">::</span><span class="no">Request</span><span class="o">::</span><span class="no">TransactionRequest</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"tokenization_id"</span><span class="p">,</span> <span class="n">amount</span><span class="p">,</span> <span class="s2">"currency"</span><span class="p">)</span>
<span class="sr">//</span> <span class="n">instead</span> <span class="n">of</span> <span class="n">tokenization_id</span><span class="p">,</span> <span class="n">you</span> <span class="n">can</span> <span class="n">also</span> <span class="n">give</span> <span class="n">an</span> <span class="n">instance</span> <span class="n">of</span> <span class="s2">"Request::Card"</span>

<span class="n">transaction_response</span> <span class="o">=</span> <span class="n">payment_api</span><span class="p">.</span><span class="nf">debit_transaction</span><span class="p">(</span><span class="s2">"transaction_id"</span><span class="p">,</span> <span class="n">transaction_request</span><span class="p">)</span>

<span class="n">transaction_response</span><span class="p">.</span><span class="nf">result</span><span class="p">.</span><span class="nf">code</span> <span class="sr">//</span> <span class="mi">100</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="c1">// Debit with Token</span>

<span class="kd">var</span> <span class="nx">token</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">paymentHighway</span><span class="p">.</span><span class="nx">Token</span><span class="p">(</span><span class="s1">'tokenId'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">amount</span> <span class="o">=</span> <span class="mi">1990</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">currency</span> <span class="o">=</span> <span class="s1">'EUR'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">paymentHighway</span><span class="p">.</span><span class="nx">TransactionRequest</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="nx">amount</span><span class="p">,</span> <span class="nx">currency</span><span class="p">);</span>
<span class="nx">paymentAPI</span><span class="p">.</span><span class="nx">initTransaction</span><span class="p">()</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">init</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">paymentAPI</span><span class="p">.</span><span class="nx">debitTransaction</span><span class="p">(</span><span class="nx">init</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">request</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">debit</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">debit</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">code</span><span class="p">;</span> <span class="c1">// 100</span>
    <span class="p">});</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="k">use</span> <span class="nx">Solinor\PaymentHighway\Model</span><span class="p">;</span>
<span class="k">use</span> <span class="nx">Solinor\PaymentHighway\Model\Request</span><span class="p">;</span>

<span class="nv">$token</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Token</span><span class="p">(</span> <span class="nv">$tokenId</span> <span class="p">);</span>
<span class="nv">$transaction</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Transaction</span><span class="p">(</span> <span class="nv">$token</span><span class="p">,</span> <span class="nv">$amount</span><span class="p">,</span> <span class="nv">$currency</span> <span class="p">);</span>

<span class="nv">$transactionId</span> <span class="o">=</span> <span class="s2">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="p">;</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$paymentApi</span><span class="o">-&gt;</span><span class="na">debitTransaction</span><span class="p">(</span> <span class="nx">transactionId</span><span class="p">,</span> <span class="nv">$transaction</span><span class="p">);</span>

<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">body</span><span class="o">-&gt;</span><span class="na">result</span><span class="o">-&gt;</span><span class="na">code</span><span class="p">;</span> <span class="c1">// 100 </span></code></pre> 
    <blockquote> 
     <p>JSON Response</p> 
    </blockquote> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="s2">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"message"</span><span class="p">:</span><span class="s2">"OK"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"filing_code"</span><span class="p">:</span><span class="w"> </span><span class="s2">"161005089712"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <h4 id="http-requests">HTTP Requests</h4> 
    <p><code class="prettyprint">POST /transaction/&lt;:transaction_id&gt;/debit</code></p> 
    <p>Create a debit transaction to charge a card.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>amount</td> 
       <td>M</td> 
       <td>AMOUNT</td> 
       <td>Amount in the smallest currency unit. E.g. 99.99 € = 9999</td> 
      </tr> 
      <tr> 
       <td>currency</td> 
       <td>M</td> 
       <td>CURRENCY</td> 
       <td>ISO 4217 currency code</td> 
      </tr> 
      <tr> 
       <td>token</td> 
       <td>M/O</td> 
       <td></td> 
       <td>Either <code class="prettyprint">card</code> or <code class="prettyprint">token</code> must be included</td> 
      </tr> 
      <tr> 
       <td>token.id</td> 
       <td>M</td> 
       <td>UUID4</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>token.cvc</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>customer</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>customer.network_address</td> 
       <td>O</td> 
       <td>IP</td> 
       <td>The IP address of the customer for fraud detection purposes</td> 
      </tr> 
      <tr> 
       <td>customer.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>order</td> 
       <td>O</td> 
       <td>ORDER-ID</td> 
       <td>Merchant defined order identifier</td> 
      </tr> 
      <tr> 
       <td>card</td> 
       <td>M/O</td> 
       <td></td> 
       <td>Usage of card is for PCI DSS certified parties only. Typically use token instead.</td> 
      </tr> 
      <tr> 
       <td>card.pan</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>card.expiry_year</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>card.expiry_month</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>card.cvc</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>card.verification</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>commit</td> 
       <td>O</td> 
       <td>BOOLEAN</td> 
       <td>If omitted, “true” is used</td> 
      </tr> 
     </tbody>
    </table> 
    <h4 id="http-response">HTTP Response</h4> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>result</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.code</td> 
       <td>M</td> 
       <td>RCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.message</td> 
       <td>M</td> 
       <td>RMSG</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>filing_code</td> 
       <td>O</td> 
       <td></td> 
       <td>Omitted on failure</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="masterpass-debit-transaction">Masterpass debit transaction</h2> 
    <blockquote> 
     <p>Charge the card with the final amount.</p> 
    </blockquote> 
    <pre class="highlight java"><code><span class="c1">// Masterpass debit</span>

<span class="kt">long</span> <span class="n">amount</span> <span class="o">=</span> <span class="mi">1990L</span><span class="o">;</span>
<span class="n">String</span> <span class="n">currency</span> <span class="o">=</span> <span class="s">"EUR"</span><span class="o">;</span>

<span class="n">MasterpassTransactionRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="n">MasterpassTransactionRequest</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">amount</span><span class="o">,</span> <span class="n">currency</span><span class="o">)</span>
  <span class="o">.</span><span class="na">build</span><span class="o">();</span>

<span class="n">UUID</span> <span class="n">transactionId</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">fromString</span><span class="o">(</span><span class="s">"327c6f29-9b46-40b9-b85b-85e908015d92"</span><span class="o">);</span>
<span class="n">TransactionResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">paymentAPI</span><span class="o">.</span><span class="na">debitTransaction</span><span class="o">(</span><span class="n">transactionId</span><span class="o">,</span> <span class="n">transaction</span><span class="o">);</span>

<span class="n">response</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getCode</span><span class="o">();</span> <span class="c1">// 100</span>
</code></pre> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="s2">"filing_code"</span><span class="p">:</span><span class="s2">"170621187700"</span><span class="p">,</span><span class="w"> </span><span class="s2">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"message"</span><span class="p">:</span><span class="s2">"OK"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <h4 id="http-requests">HTTP Requests</h4> 
    <p><code class="prettyprint">POST /transaction/&lt;:transaction_id&gt;/debit_masterpass</code></p> 
    <p>Charge the card with the final amount (for example after calculating shipping costs). Only the originally given amount will be covered by the 3D-secure liability shift.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>amount</td> 
       <td>M</td> 
       <td>AMOUNT</td> 
       <td>Amount in the smallest currency unit. E.g. 99.99 € = 9999</td> 
      </tr> 
      <tr> 
       <td>currency</td> 
       <td>M</td> 
       <td>CURRENCY</td> 
       <td>ISO 4217 currency code</td> 
      </tr> 
      <tr> 
       <td>commit</td> 
       <td>O</td> 
       <td>BOOLEAN</td> 
       <td>If omitted, “true” is used</td> 
      </tr> 
     </tbody>
    </table> 
    <h4 id="http-response">HTTP Response</h4> 
    <p>Same response as <a href="#debit-transaction">Debit transaction</a></p> 
    <h2 id="order-status">Order Status</h2> 
    <blockquote> 
     <p>Get the transactions related to a specific order</p> 
    </blockquote> 
    <pre class="highlight shell"><code>curl -i <span class="se">\</span>
-H <span class="s2">"Content-Type: application/json; charset=utf-8"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Account: test"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Merchant: test_merchantId"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Timestamp: 2014-09-18T10:32:59Z"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Request-Id: f47ac10b-58cc-4372-a567-0e02b2c3d479"</span> <span class="se">\</span>
-H <span class="s2">"Signature: SPH1 testKey 4eab87a16e3ee7bd530d778af0cb6c680dcaa52ed1913a9c1bd8ed5a8d689e3e"</span> <span class="se">\</span>
https://v1-hub-staging.sph-test-solinor.com/transactions/?order<span class="o">=</span>my_order_id_12345
</code></pre> 
    <pre class="highlight java"><code></code></pre> 
    <pre class="highlight javascript"><code><span class="nx">paymentAPI</span><span class="p">.</span><span class="nx">searchOrders</span><span class="p">(</span><span class="s2">"order"</span><span class="p">);</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nx">paymentApi</span><span class="o">-&gt;</span><span class="na">searchByOrderId</span><span class="p">(</span> <span class="nv">$orderId</span> <span class="p">);</span>
</code></pre> 
    <blockquote> 
     <p>JSON response</p> 
    </blockquote> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="s2">"transactions"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"f9cc5892-d3e7-486f-9fb3-cf9a42887118"</span><span class="p">,</span><span class="w"> </span><span class="s2">"acquirer"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"nets"</span><span class="p">,</span><span class="w"> </span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"Nets"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"debit"</span><span class="p">,</span><span class="w"> </span><span class="s2">"amount"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"current_amount"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"currency"</span><span class="p">:</span><span class="s2">"EUR"</span><span class="p">,</span><span class="w"> </span><span class="s2">"timestamp"</span><span class="p">:</span><span class="s2">"2015-07-03T20:16:41Z"</span><span class="p">,</span><span class="w"> </span><span class="s2">"modified"</span><span class="p">:</span><span class="s2">"2015-06-27T13:54:05Z"</span><span class="p">,</span><span class="w"> </span><span class="s2">"filing_code"</span><span class="p">:</span><span class="s2">"150703000026"</span><span class="p">,</span><span class="w"> </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"state"</span><span class="p">:</span><span class="s2">"failed"</span><span class="p">,</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">7000</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"card"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"Visa"</span><span class="p">,</span><span class="w"> </span><span class="s2">"partial_pan"</span><span class="p">:</span><span class="s2">"1234"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_year"</span><span class="p">:</span><span class="s2">"2023"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_month"</span><span class="p">:</span><span class="s2">"11"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cvc_required"</span><span class="p">:</span><span class="s2">"not_tested"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"reverts"</span><span class="p">:[],</span><span class="w"> </span><span class="s2">"cardholder_authentication"</span><span class="p">:</span><span class="w"> </span><span class="s2">"no"</span><span class="p">,</span><span class="w"> </span><span class="s2">"committed"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"ca02843a-9942-4944-a1b4-59ade8cc3eca"</span><span class="p">,</span><span class="w"> </span><span class="s2">"acquirer"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"nets"</span><span class="p">,</span><span class="w"> </span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"Nets"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"debit"</span><span class="p">,</span><span class="w"> </span><span class="s2">"amount"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"current_amount"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="w"> </span><span class="s2">"currency"</span><span class="p">:</span><span class="s2">"EUR"</span><span class="p">,</span><span class="w"> </span><span class="s2">"timestamp"</span><span class="p">:</span><span class="s2">"2015-07-03T19:22:03Z"</span><span class="p">,</span><span class="w"> </span><span class="s2">"modified"</span><span class="p">:</span><span class="s2">"2015-06-27T13:51:27Z"</span><span class="p">,</span><span class="w"> </span><span class="s2">"filing_code"</span><span class="p">:</span><span class="s2">"150703000024"</span><span class="p">,</span><span class="w"> </span><span class="s2">"authorization_code"</span><span class="p">:</span><span class="s2">"979855"</span><span class="p">,</span><span class="w"> </span><span class="s2">"token"</span><span class="p">:</span><span class="s2">"7906486c-beea-4f69-9f55-29f7ab4b6bef"</span><span class="p">,</span><span class="w"> </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"state"</span><span class="p">:</span><span class="s2">"reverted"</span><span class="p">,</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">5700</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"card"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"Visa"</span><span class="p">,</span><span class="w"> </span><span class="s2">"partial_pan"</span><span class="p">:</span><span class="s2">"0024"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_year"</span><span class="p">:</span><span class="s2">"2023"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_month"</span><span class="p">:</span><span class="s2">"11"</span><span class="p">,</span><span class="w"> </span><span class="s2">"cvc_required"</span><span class="p">:</span><span class="s2">"no"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"reverts"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"cancellation"</span><span class="p">,</span><span class="w"> </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"state"</span><span class="p">:</span><span class="s2">"ok"</span><span class="p">,</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">4000</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"amount"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"timestamp"</span><span class="p">:</span><span class="s2">"2015-07-03T20:14:03Z"</span><span class="p">,</span><span class="w"> </span><span class="s2">"modified"</span><span class="p">:</span><span class="s2">"2015-06-27T13:51:27Z"</span><span class="p">,</span><span class="w"> </span><span class="s2">"filing_code"</span><span class="p">:</span><span class="s2">"150703000024"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="s2">"cardholder_authentication"</span><span class="p">:</span><span class="w"> </span><span class="s2">"no"</span><span class="p">,</span><span class="w"> </span><span class="s2">"committed"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="s2">"committed_amount"</span><span class="p">:</span><span class="w"> </span><span class="mi">100</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="s2">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"message"</span><span class="p">:</span><span class="s2">"OK"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <p>Get the transaction IDs related to the <code class="prettyprint">order</code> value given for the payment. This allows to get the payment transaction ID even in a case where the user’s browser does not redirect back to a given URL in the calling service.</p> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">GET /transactions/?order=&lt;order&gt;[&amp;limit=&lt;limit&gt;][&amp;start-date=&lt;start-date&gt;][&amp;end-date=&lt;end-date&gt;][&amp;start-datetime=&lt;start-timestamp&gt;][&amp;end-datetime=&lt;end-timestamp&gt;]</code></p> 
    <table>
     <thead> 
      <tr> 
       <th>Parameter</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>order</td> 
       <td>M</td> 
       <td>ORDER-ID</td> 
       <td>Merchant defined order identifier</td> 
      </tr> 
      <tr> 
       <td>limit</td> 
       <td>O</td> 
       <td>N (1 - 100)</td> 
       <td>Limit the size of the result set. Defaults to 100.</td> 
      </tr> 
      <tr> 
       <td>start-date</td> 
       <td>O</td> 
       <td>DATE</td> 
       <td>Start date for the search. Inclusive.</td> 
      </tr> 
      <tr> 
       <td>end-date</td> 
       <td>O</td> 
       <td>DATE</td> 
       <td>End date for the search. Inclusive.</td> 
      </tr> 
      <tr> 
       <td>start-datetime</td> 
       <td>O</td> 
       <td>TIMESTAMP</td> 
       <td>Start date and time for the search. Inclusive.</td> 
      </tr> 
      <tr> 
       <td>end-datetime</td> 
       <td>O</td> 
       <td>TIMESTAMP</td> 
       <td>End date and time for the search. Inclusive.</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="http-response">HTTP Response</h3> 
    <p>The response JSON contains an array of transaction statuses, where the format is the same as in the response of <a href="#transaction-status">Transaction Status</a>. The array is ordered by timestamp, newest first.</p> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>result</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.code</td> 
       <td>M</td> 
       <td>RCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.message</td> 
       <td>M</td> 
       <td>RMSG</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transactions[]</td> 
       <td>M</td> 
       <td>JSON Array</td> 
       <td>All transactions belonging to the order</td> 
      </tr> 
      <tr> 
       <td>transaction</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.id</td> 
       <td>M</td> 
       <td>UUID4</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.acquirer</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.acquirer.id</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.acquirer.name</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.type</td> 
       <td>M</td> 
       <td></td> 
       <td>Credit or debit</td> 
      </tr> 
      <tr> 
       <td>transaction.amount</td> 
       <td>M</td> 
       <td>AMOUNT</td> 
       <td>Original transaction amount in the smallest currency unit. E.g. 99.99 € = 9999</td> 
      </tr> 
      <tr> 
       <td>transaction.current_amount</td> 
       <td>O</td> 
       <td>AMOUNT</td> 
       <td>Amount after possible reversals</td> 
      </tr> 
      <tr> 
       <td>transaction.currency</td> 
       <td>M</td> 
       <td>CURRENCY</td> 
       <td>ISO 4217 currency code</td> 
      </tr> 
      <tr> 
       <td>transaction.timestamp</td> 
       <td>M</td> 
       <td>TIMESTAMP</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.modified</td> 
       <td>M</td> 
       <td>TIMESTAMP</td> 
       <td>Latest transaction modification time</td> 
      </tr> 
      <tr> 
       <td>transaction.filing_code</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.authorization_code</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.verification_method</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.token</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.status</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.status.state</td> 
       <td>M</td> 
       <td>TSTATE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.status.code</td> 
       <td>M</td> 
       <td>TCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.status.messge</td> 
       <td>O</td> 
       <td>TMSG</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card.partial_pan</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card.type</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card.expire_year</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card.expire_month</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card.cvc_required</td> 
       <td>M</td> 
       <td></td> 
       <td>Whether the CVC is required for paying with this card. Can be one of “yes”, “no” or “not_tested”.</td> 
      </tr> 
      <tr> 
       <td>transaction.card.bin</td> 
       <td>M</td> 
       <td></td> 
       <td>First 2 or 6 digits of the card number. (6 MC/VISA, 2 Amex/Diners)</td> 
      </tr> 
      <tr> 
       <td>transaction.card.funding</td> 
       <td>M</td> 
       <td></td> 
       <td>“credit”, “debit” or “unknown”</td> 
      </tr> 
      <tr> 
       <td>transaction.card.category</td> 
       <td>M</td> 
       <td></td> 
       <td>“business”, “prepaid” or “unknown”</td> 
      </tr> 
      <tr> 
       <td>transaction.card.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>transaction.reverts</td> 
       <td>O</td> 
       <td>JSON Array</td> 
       <td>Present if the transaction is partially or fully reverted</td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.type</td> 
       <td>M</td> 
       <td>REVTYPE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.status</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.status.state</td> 
       <td>M</td> 
       <td>TSTATE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.status.code</td> 
       <td>M</td> 
       <td>TCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.status.message</td> 
       <td>M</td> 
       <td>TMSG</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.amount</td> 
       <td>M</td> 
       <td>AMOUNT</td> 
       <td>Amount in the smallest currency unit. E.g. 99.99 € = 9999</td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.timestamp</td> 
       <td>M</td> 
       <td>TIMESTAMP</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.modified</td> 
       <td>M</td> 
       <td>TIMESTAMP</td> 
       <td>L</td> 
      </tr> 
      <tr> 
       <td>transaction.customer</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.customer.network_address</td> 
       <td>O</td> 
       <td>IP</td> 
       <td>The IP address of the customer for fraud detection purposes</td> 
      </tr> 
      <tr> 
       <td>transaction.customer.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>transaction.cardholder_authentication</td> 
       <td>M</td> 
       <td></td> 
       <td>Indicates whether ThreeDS (3ds) card holder authentication was done (“authenticated”, “attempted” or “no”)</td> 
      </tr> 
      <tr> 
       <td>transaction.committed</td> 
       <td>M</td> 
       <td>BOOLEAN</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.committed_amount</td> 
       <td>O</td> 
       <td>AMOUNT</td> 
       <td>Omitted if “committed” is false</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="revert">Revert</h2> 
    <blockquote> 
     <p>Revert a payment transaction</p> 
    </blockquote> 
    <pre class="highlight shell"><code>curl -i <span class="se">\</span>
-H <span class="s2">"Content-Type: application/json; charset=utf-8"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Account: test"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Merchant: test_merchantId"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Timestamp: 2014-09-18T10:32:59Z"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Request-Id: f47ac10b-58cc-4372-a567-0e02b2c3d479"</span> <span class="se">\</span>
-H <span class="s2">"Signature: SPH1 testKey 4eab87a16e3ee7bd530d778af0cb6c680dcaa52ed1913a9c1bd8ed5a8d689e3e"</span> <span class="se">\</span>
--data-urlencode <span class="s1">' { "amount": 1900 } '</span> <span class="se">\</span>
https://v1-hub-staging.sph-test-solinor.com/transaction/4d185afe-3ef4-11e4-9d9f-164230d1df67/revert
</code></pre> 
    <pre class="highlight java"><code><span class="n">String</span> <span class="n">transactionId</span> <span class="o">=</span> <span class="s">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="o">;</span>
<span class="n">TransactionResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="n">paymentAPI</span><span class="o">.</span><span class="na">revertTransaction</span><span class="o">(</span><span class="n">transactionId</span><span class="o">);</span>

<span class="n">response</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getCode</span><span class="o">();</span> <span class="c1">// 100</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="n">transaction_id</span> <span class="o">=</span> <span class="s2">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span>
<span class="n">transaction_response</span> <span class="o">=</span> <span class="n">payment_api</span><span class="p">.</span><span class="nf">revert_transaction</span><span class="p">(</span><span class="n">transaction_id</span><span class="p">)</span>
<span class="n">transaction_response</span> <span class="o">=</span> <span class="n">payment_api</span><span class="p">.</span><span class="nf">revert_transaction</span><span class="p">(</span><span class="n">transaction_id</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>

<span class="n">transaction_response</span><span class="p">.</span><span class="nf">result</span><span class="p">.</span><span class="nf">code</span> <span class="sr">//</span> <span class="mi">100</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">transactionId</span> <span class="o">=</span> <span class="s2">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="p">;</span>
<span class="nx">paymentAPI</span><span class="p">.</span><span class="nx">revertTransaction</span><span class="p">(</span><span class="nx">transactionId</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">code</span><span class="p">;</span> <span class="c1">// 100</span>
    <span class="p">});</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$transactionId</span> <span class="o">=</span> <span class="s2">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="p">;</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$paymentApi</span><span class="o">-&gt;</span><span class="na">revertTransaction</span><span class="p">(</span><span class="nx">transactionId</span><span class="p">);</span>

<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">body</span><span class="o">-&gt;</span><span class="na">result</span><span class="o">-&gt;</span><span class="na">code</span><span class="p">;</span> <span class="c1">// 100 </span></code></pre> 
    <blockquote> 
     <p>JSON Response</p> 
    </blockquote> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="s2">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"message"</span><span class="p">:</span><span class="s2">"OK"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <p>Reverts an existing debit transaction.</p> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">POST /transaction/&lt;:transaction_id&gt;/revert</code></p> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>amount</td> 
       <td>O</td> 
       <td>AMOUNT</td> 
       <td>Amount in the smallest currency unit. E.g. 99.99 € = 9999. Without amount the whole transaction is reverted.</td> 
      </tr> 
     </tbody>
    </table> 
    <h3 id="http-response">HTTP Response</h3> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>result</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.code</td> 
       <td>M</td> 
       <td>RCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.message</td> 
       <td>M</td> 
       <td>RMSG</td> 
       <td></td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="transaction-status">Transaction Status</h2> 
    <blockquote> 
     <p>Transaction status request</p> 
    </blockquote> 
    <pre class="highlight shell"><code>curl -i <span class="se">\</span>
-H <span class="s2">"Content-Type: application/json; charset=utf-8"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Account: test"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Merchant: test_merchantId"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Timestamp: 2014-09-18T10:32:59Z"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Request-Id: f47ac10b-58cc-4372-a567-0e02b2c3d479"</span> <span class="se">\</span>
-H <span class="s2">"Signature: SPH1 testKey 4eab87a16e3ee7bd530d778af0cb6c680dcaa52ed1913a9c1bd8ed5a8d689e3e"</span> <span class="se">\</span>
https://v1-hub-staging.sph-test-solinor.com/transaction/4d185afe-3ef4-11e4-9d9f-164230d1df67
</code></pre> 
    <pre class="highlight java"><code><span class="n">String</span> <span class="n">transactionId</span> <span class="o">=</span> <span class="s">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="o">;</span>
<span class="n">TransactionStatusResponse</span> <span class="n">statusResponse</span> <span class="o">=</span> <span class="n">paymentAPI</span><span class="o">.</span><span class="na">transactionStatus</span><span class="o">(</span><span class="n">transactionId</span><span class="o">);</span>

<span class="n">statusResponse</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getCode</span><span class="o">();</span> <span class="c1">// 100</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="n">transaction_id</span> <span class="o">=</span> <span class="s2">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="p">;</span>
<span class="n">transaction_status_response</span> <span class="o">=</span> <span class="n">payment_api</span><span class="p">.</span><span class="nf">transaction_status</span><span class="p">(</span><span class="n">transaction_id</span><span class="p">)</span>

<span class="n">transaction_status_response</span><span class="p">.</span><span class="nf">result</span><span class="p">.</span><span class="nf">code</span> <span class="sr">//</span> <span class="mi">100</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">transactionId</span> <span class="o">=</span> <span class="s2">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="p">;</span>
<span class="nx">paymentAPI</span><span class="p">.</span><span class="nx">transactionStatus</span><span class="p">(</span><span class="nx">transactionId</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">code</span><span class="p">;</span> <span class="c1">// 100</span>
    <span class="p">});</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$transactionId</span> <span class="o">=</span> <span class="s2">"f23a9be0-15fe-43df-98ac-92f6a5731c3b"</span><span class="p">;</span>
<span class="nv">$status</span> <span class="o">=</span> <span class="nx">paymentApi</span><span class="o">-&gt;</span><span class="na">statusTransaction</span><span class="p">(</span><span class="nv">$transactionId</span><span class="p">);</span>

<span class="nv">$status</span><span class="o">-&gt;</span><span class="na">body</span><span class="o">-&gt;</span><span class="na">result</span><span class="o">-&gt;</span><span class="na">code</span><span class="p">;</span> <span class="c1">// 100 </span></code></pre> 
    <blockquote> 
     <p>JSON Response</p> 
    </blockquote> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="s2">"transaction"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"5a457896-1b74-48e2-a012-0f1016c64900"</span><span class="p">,</span><span class="w"> </span><span class="s2">"acquirer"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"nets"</span><span class="p">,</span><span class="w"> </span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"Nets"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"debit"</span><span class="p">,</span><span class="w"> </span><span class="s2">"amount"</span><span class="p">:</span><span class="mi">9999</span><span class="p">,</span><span class="w"> </span><span class="s2">"current_amount"</span><span class="p">:</span><span class="mi">9999</span><span class="p">,</span><span class="w"> </span><span class="s2">"currency"</span><span class="p">:</span><span class="s2">"EUR"</span><span class="p">,</span><span class="w"> </span><span class="s2">"timestamp"</span><span class="p">:</span><span class="s2">"2015-04-28T12:11:12Z"</span><span class="p">,</span><span class="w"> </span><span class="s2">"modified"</span><span class="p">:</span><span class="s2">"2015-04-28T12:11:12Z"</span><span class="p">,</span><span class="w"> </span><span class="s2">"filing_code"</span><span class="p">:</span><span class="s2">"150428011232"</span><span class="p">,</span><span class="w"> </span><span class="s2">"authorization_code"</span><span class="p">:</span><span class="s2">"639283"</span><span class="p">,</span><span class="w"> </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"state"</span><span class="p">:</span><span class="s2">"ok"</span><span class="p">,</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">4000</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"card"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"Visa"</span><span class="p">,</span><span class="w"> </span><span class="s2">"partial_pan"</span><span class="p">:</span><span class="s2">"0024"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_year"</span><span class="p">:</span><span class="s2">"2023"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_month"</span><span class="p">:</span><span class="s2">"11"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"cardholder_authentication"</span><span class="p">:</span><span class="w"> </span><span class="s2">"no"</span><span class="p">,</span><span class="w"> </span><span class="s2">"committed"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w"> </span><span class="s2">"committed_amount"</span><span class="p">:</span><span class="w"> </span><span class="mi">9999</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"message"</span><span class="p">:</span><span class="s2">"OK"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">GET /transaction/&lt;:transaction_id&gt;</code></p> 
    <h3 id="http-response">HTTP Response</h3> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>result</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.code</td> 
       <td>M</td> 
       <td>RCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.message</td> 
       <td>M</td> 
       <td>RMSG</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.id</td> 
       <td>M</td> 
       <td>UUID4</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.acquirer</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.acquirer.id</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.acquirer.name</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.type</td> 
       <td>M</td> 
       <td></td> 
       <td>Credit or debit</td> 
      </tr> 
      <tr> 
       <td>transaction.amount</td> 
       <td>M</td> 
       <td>AMOUNT</td> 
       <td>Original transaction amount in the smallest currency unit. E.g. 99.99 € = 9999</td> 
      </tr> 
      <tr> 
       <td>transaction.current_amount</td> 
       <td>O</td> 
       <td>AMOUNT</td> 
       <td>Amount after possible reversals</td> 
      </tr> 
      <tr> 
       <td>transaction.currency</td> 
       <td>M</td> 
       <td>CURRENCY</td> 
       <td>ISO 4217 currency code</td> 
      </tr> 
      <tr> 
       <td>transaction.timestamp</td> 
       <td>M</td> 
       <td>TIMESTAMP</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.modified</td> 
       <td>M</td> 
       <td>TIMESTAMP</td> 
       <td>Latest transaction modification time</td> 
      </tr> 
      <tr> 
       <td>transaction.filing_code</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.authorization_code</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.token</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.status</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.status.state</td> 
       <td>M</td> 
       <td>TSTATE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.status.code</td> 
       <td>M</td> 
       <td>TCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.status.messge</td> 
       <td>O</td> 
       <td>TMSG</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card.partial_pan</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card.type</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card.expire_year</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card.expire_month</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.card.cvc_required</td> 
       <td>M</td> 
       <td></td> 
       <td>Whether the CVC is required for paying with this card. Can be one of “yes”, “no” or “not_tested”.</td> 
      </tr> 
      <tr> 
       <td>transaction.card.bin</td> 
       <td>M</td> 
       <td></td> 
       <td>First 2 or 6 digits of the card number. (6 MC/VISA, 2 Amex/Diners)</td> 
      </tr> 
      <tr> 
       <td>transaction.card.funding</td> 
       <td>M</td> 
       <td></td> 
       <td>“credit”, “debit” or “unknown”</td> 
      </tr> 
      <tr> 
       <td>transaction.card.category</td> 
       <td>M</td> 
       <td></td> 
       <td>“business”, “prepaid” or “unknown”</td> 
      </tr> 
      <tr> 
       <td>transaction.card.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>transaction.reverts</td> 
       <td>M</td> 
       <td>JSON Array</td> 
       <td>Present if the transaction is partially or fully reverted</td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.type</td> 
       <td>M</td> 
       <td>REVTYPE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.status</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.status.state</td> 
       <td>M</td> 
       <td>TSTATE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.status.code</td> 
       <td>M</td> 
       <td>TCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.status.message</td> 
       <td>M</td> 
       <td>TMSG</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.amount</td> 
       <td>M</td> 
       <td>AMOUNT</td> 
       <td>Amount in the smallest currency unit. E.g. 99.99 € = 9999</td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.timestamp</td> 
       <td>M</td> 
       <td>TIMESTAMP</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.modified</td> 
       <td>M</td> 
       <td>TIMESTAMP</td> 
       <td>Latest revert modification time</td> 
      </tr> 
      <tr> 
       <td>transaction.reverts.filing_code</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.customer</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.customer.network_address</td> 
       <td>O</td> 
       <td>IP</td> 
       <td>The IP address of the customer for fraud detection purposes</td> 
      </tr> 
      <tr> 
       <td>transaction.customer.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>transaction.cardholder_authentication</td> 
       <td>M</td> 
       <td></td> 
       <td>Indicates whether ThreeDS (3ds) card holder authentication was done (“authenticated”, “attempted” or “no”)</td> 
      </tr> 
      <tr> 
       <td>transaction.order</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.committed</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>transaction.committed_amount</td> 
       <td>O</td> 
       <td></td> 
       <td>Omitted if “committed” is false</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="tokenization">Tokenization</h2> 
    <p>In order to be sure that a tokenized card is valid and is able to process payment transactions the corresponding <code class="prettyprint">sph-tokenization-id</code> must be used to get the actual card token.</p> 
    <p>The card token is fetched by calling the tokenization URI with the <code class="prettyprint">sph-tokenization-id</code>.</p> 
    <p>Technically the tokenization is already done by a Form API call such as <code class="prettyprint">/form/view/add_card</code> as processing an authorization requires a valid CVC given by the cardholder. If the card is valid the Tokenization response contains a card token that can be used to make transactions such as charging the card or refunding the card.</p> 
    <aside class="notice">
      The sph-tokenization-id from the Form API is random. However the tokenization always gives the same card_token for the same card information. 
    </aside> 
    <blockquote> 
     <p>Tokenization request</p> 
    </blockquote> 
    <pre class="highlight shell"><code>curl -i <span class="se">\</span>
-H <span class="s2">"Content-Type: application/json; charset=utf-8"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Account: test"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Merchant: test_merchantId"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Timestamp: 2014-09-18T10:32:59Z"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Request-Id: f47ac10b-58cc-4372-a567-0e02b2c3d479"</span> <span class="se">\</span>
-H <span class="s2">"Signature: SPH1 testKey 4eab87a16e3ee7bd530d778af0cb6c680dcaa52ed1913a9c1bd8ed5a8d689e3e"</span> <span class="se">\</span>
https://v1-hub-staging.sph-test-solinor.com/tokenization/4d185afe-3ef4-11e4-9d9f-164230d1df67
</code></pre> 
    <pre class="highlight java"><code><span class="n">TokenizationResponse</span> <span class="n">tokenResponse</span> <span class="o">=</span> <span class="n">paymentAPI</span><span class="o">.</span><span class="na">tokenize</span><span class="o">(</span><span class="s">"tokenizationId"</span><span class="o">);</span>

<span class="n">tokenResponse</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getCode</span><span class="o">();</span> <span class="c1">// 100</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="n">token_response</span> <span class="o">=</span> <span class="n">payment_api</span><span class="p">.</span><span class="nf">tokenize</span><span class="p">(</span><span class="s2">"tokenization_id"</span><span class="p">)</span>

<span class="n">token_response</span><span class="p">.</span><span class="nf">result</span><span class="p">.</span><span class="nf">code</span> <span class="sr">//</span> <span class="mi">100</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="nx">paymentAPI</span><span class="p">.</span><span class="nx">tokenization</span><span class="p">(</span><span class="s2">"tokenizationId"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
        <span class="nx">response</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">code</span><span class="p">;</span> <span class="c1">// 100</span>
    <span class="p">})</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nv">$paymentApi</span><span class="o">-&gt;</span><span class="na">tokenize</span><span class="p">(</span> <span class="nv">$tokenizationId</span> <span class="p">);</span>

<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">body</span><span class="o">-&gt;</span><span class="na">result</span><span class="o">-&gt;</span><span class="na">code</span><span class="p">;</span> <span class="c1">// 100 </span></code></pre> 
    <blockquote> 
     <p>JSON Response</p> 
    </blockquote> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="s2">"card_token"</span><span class="p">:</span><span class="s2">"71435029-fbb6-4506-aa86-8529efb640b0"</span><span class="p">,</span><span class="w"> </span><span class="s2">"card"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"Visa"</span><span class="p">,</span><span class="w"> </span><span class="s2">"partial_pan"</span><span class="p">:</span><span class="s2">"0024"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_year"</span><span class="p">:</span><span class="s2">"2023"</span><span class="p">,</span><span class="w"> </span><span class="s2">"expire_month"</span><span class="p">:</span><span class="s2">"11"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"cardholder_authentication"</span><span class="p">:</span><span class="w"> </span><span class="s2">"no"</span><span class="p">,</span><span class="w"> </span><span class="s2">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"message"</span><span class="p">:</span><span class="s2">"OK"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">GET /tokenization/&lt;id&gt;</code></p> 
    <h3 id="http-response">HTTP Response</h3> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>card_token</td> 
       <td>O</td> 
       <td>UUID4</td> 
       <td>Card Token if verification was successful</td> 
      </tr> 
      <tr> 
       <td>card</td> 
       <td>O</td> 
       <td></td> 
       <td>Card if verification was successful</td> 
      </tr> 
      <tr> 
       <td>card.type</td> 
       <td>M</td> 
       <td></td> 
       <td>Card type, for example ‘Visa’</td> 
      </tr> 
      <tr> 
       <td>card.partial_pan</td> 
       <td>M</td> 
       <td></td> 
       <td>Last four digits of the card</td> 
      </tr> 
      <tr> 
       <td>card.expire_year</td> 
       <td>M</td> 
       <td></td> 
       <td>Card expiration year</td> 
      </tr> 
      <tr> 
       <td>card.expire_month</td> 
       <td>M</td> 
       <td></td> 
       <td>Card expiration month</td> 
      </tr> 
      <tr> 
       <td>card.cvc_required</td> 
       <td>M</td> 
       <td></td> 
       <td>Whether the CVC is required for paying with this card. Can be one of “yes” or “no”.</td> 
      </tr> 
      <tr> 
       <td>card.bin</td> 
       <td>M</td> 
       <td></td> 
       <td>First 2 or 6 digits of the card number. (6 MC/VISA, 2 Amex/Diners)</td> 
      </tr> 
      <tr> 
       <td>card.funding</td> 
       <td>M</td> 
       <td></td> 
       <td>“credit”, “debit” or “unknown”</td> 
      </tr> 
      <tr> 
       <td>card.category</td> 
       <td>M</td> 
       <td></td> 
       <td>“business”, “prepaid” or “unknown”</td> 
      </tr> 
      <tr> 
       <td>card.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>customer</td> 
       <td>O</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>customer.network_address</td> 
       <td>O</td> 
       <td>IP</td> 
       <td>The IP address of the customer for fraud detection purposes</td> 
      </tr> 
      <tr> 
       <td>customer.country_code</td> 
       <td>O</td> 
       <td></td> 
       <td>ISO 3166-1 alpha-2</td> 
      </tr> 
      <tr> 
       <td>cardholder_authentication</td> 
       <td>M</td> 
       <td></td> 
       <td>Indicates whether ThreeDS (3ds) card holder authentication was done (“authenticated”, “attempted” or “no”)</td> 
      </tr> 
      <tr> 
       <td>result</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.code</td> 
       <td>M</td> 
       <td>RCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.message</td> 
       <td>M</td> 
       <td>RMSG</td> 
       <td></td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="daily-batch-report">Daily Batch Report</h2> 
    <p>Fetch a daily report of the settlements and their transactions for all of the merchants under the account.</p> 
    <blockquote> 
     <p>Batch Report request</p> 
    </blockquote> 
    <pre class="highlight shell"><code>curl -i <span class="se">\</span>
-H <span class="s2">"Content-Type: application/json; charset=utf-8"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Account: test"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Merchant: test_merchantId"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Timestamp: 2014-09-18T10:32:59Z"</span> <span class="se">\</span>
-H <span class="s2">"SPH-Request-Id: f47ac10b-58cc-4372-a567-0e02b2c3d479"</span> <span class="se">\</span>
-H <span class="s2">"Signature: SPH1 testKey 4eab87a16e3ee7bd530d778af0cb6c680dcaa52ed1913a9c1bd8ed5a8d689e3e"</span> <span class="se">\</span>
https://v1-hub-staging.sph-test-solinor.com/report/batch/20150323
</code></pre> 
    <pre class="highlight java"><code><span class="n">ReportResponse</span> <span class="n">report</span> <span class="o">=</span> <span class="n">paymentAPI</span><span class="o">.</span><span class="na">fetchDailyReport</span><span class="o">(</span><span class="s">"20150323"</span><span class="o">);</span>

<span class="n">report</span><span class="o">.</span><span class="na">getResult</span><span class="o">().</span><span class="na">getCode</span><span class="o">()</span> <span class="c1">// 100</span>
</code></pre> 
    <pre class="highlight ruby"><code><span class="n">report</span> <span class="o">=</span> <span class="n">payment_api</span><span class="p">.</span><span class="nf">fetch_daily_report</span><span class="p">(</span><span class="s2">"20150323"</span><span class="p">)</span>

<span class="n">report</span><span class="p">.</span><span class="nf">result</span><span class="p">.</span><span class="nf">code</span> <span class="sr">//</span> <span class="mi">100</span>
</code></pre> 
    <pre class="highlight javascript"><code><span class="nx">paymentAPI</span><span class="p">.</span><span class="nx">fetchDailyReport</span><span class="p">(</span><span class="s2">"yyyyMMdd"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">response</span><span class="p">.</span><span class="nx">result</span><span class="p">.</span><span class="nx">code</span><span class="p">;</span> <span class="c1">// 100</span>
    <span class="p">});</span>
</code></pre> 
    <pre class="highlight php"><code><span class="cp">&lt;?php</span>
<span class="nv">$response</span> <span class="o">=</span> <span class="nx">paymentApi</span><span class="o">-&gt;</span><span class="na">getReport</span><span class="p">(</span><span class="s2">"yyyyMMdd"</span><span class="p">);</span>

<span class="nv">$response</span><span class="o">-&gt;</span><span class="na">body</span><span class="o">-&gt;</span><span class="na">result</span><span class="o">-&gt;</span><span class="na">code</span><span class="p">;</span> <span class="c1">// 100 </span></code></pre> 
    <blockquote> 
     <p>JSON Response</p> 
    </blockquote> 
    <pre class="highlight json"><code><span class="p">{</span><span class="w"> </span><span class="s2">"settlements"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"4b961b80-e808-487b-bc89-7cf83ffda4d7"</span><span class="p">,</span><span class="w"> </span><span class="s2">"batch"</span><span class="p">:</span><span class="s2">"000017"</span><span class="p">,</span><span class="w"> </span><span class="s2">"timestamp"</span><span class="p">:</span><span class="s2">"2015-03-23T22:00:09Z"</span><span class="p">,</span><span class="w"> </span><span class="s2">"merchant"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"test_merchantId"</span><span class="p">,</span><span class="w"> </span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"Test user"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"transaction_count"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="w"> </span><span class="s2">"net_amount"</span><span class="p">:</span><span class="mi">620</span><span class="p">,</span><span class="w"> </span><span class="s2">"currency"</span><span class="p">:</span><span class="s2">"EUR"</span><span class="p">,</span><span class="w"> </span><span class="s2">"acquirer"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"nets"</span><span class="p">,</span><span class="w"> </span><span class="s2">"name"</span><span class="p">:</span><span class="s2">"Nets"</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"transactions"</span><span class="p">:[</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"id"</span><span class="p">:</span><span class="s2">"bc42307b-1313-4d7d-9a0a-7cdd9d3d190c"</span><span class="p">,</span><span class="w"> </span><span class="s2">"timestamp"</span><span class="p">:</span><span class="s2">"2015-03-23T10:59:54Z"</span><span class="p">,</span><span class="w"> </span><span class="s2">"type"</span><span class="p">:</span><span class="s2">"debit"</span><span class="p">,</span><span class="w"> </span><span class="s2">"partial_pan"</span><span class="p">:</span><span class="s2">"0024"</span><span class="p">,</span><span class="w"> </span><span class="s2">"amount"</span><span class="p">:</span><span class="mi">620</span><span class="p">,</span><span class="w"> </span><span class="s2">"currency"</span><span class="p">:</span><span class="s2">"EUR"</span><span class="p">,</span><span class="w"> </span><span class="s2">"filing_code"</span><span class="p">:</span><span class="s2">"150323000265"</span><span class="p">,</span><span class="w"> </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"state"</span><span class="p">:</span><span class="s2">"ok"</span><span class="p">,</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">4000</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"authorization_code"</span><span class="p">:</span><span class="s2">"317020"</span><span class="w"> </span><span class="p">}],</span><span class="w"> </span><span class="s2">"status"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"state"</span><span class="p">:</span><span class="s2">"ok"</span><span class="p">,</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">4000</span><span class="w"> </span><span class="p">},</span><span class="w"> </span><span class="s2">"reference"</span><span class="p">:</span><span class="s2">"11503231000000174"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">],</span><span class="w"> </span><span class="s2">"result"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"code"</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span><span class="w"> </span><span class="s2">"message"</span><span class="p">:</span><span class="s2">"OK"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w"> </span></code></pre> 
    <h3 id="http-request">HTTP Request</h3> 
    <p><code class="prettyprint">GET /report/batch/&lt;yyyyMMdd&gt;</code></p> 
    <h3 id="http-response">HTTP Response</h3> 
    <table>
     <thead> 
      <tr> 
       <th>Field / Object</th> 
       <th>M/O</th> 
       <th>Data type</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>result</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.code</td> 
       <td>M</td> 
       <td>RCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>result.message</td> 
       <td>M</td> 
       <td>RMSG</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[]</td> 
       <td>M</td> 
       <td>Array</td> 
       <td>May be empty</td> 
      </tr> 
      <tr> 
       <td>settlements[].status</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].status.state</td> 
       <td>M</td> 
       <td>SSTATE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].status.code</td> 
       <td>M</td> 
       <td>SCTATE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].status.message</td> 
       <td>O</td> 
       <td>SMSG</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].id</td> 
       <td>M</td> 
       <td>UUID4</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].batch</td> 
       <td>M</td> 
       <td>String</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].timestamp</td> 
       <td>M</td> 
       <td>TIMESTAMP</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].reference</td> 
       <td>O</td> 
       <td>REFERENCE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].merchant</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].merchant.id</td> 
       <td>M</td> 
       <td>String</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].merchant.name</td> 
       <td>M</td> 
       <td>String</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].acquirer</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].acquirer.id</td> 
       <td>M</td> 
       <td>String</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].acquirer.name</td> 
       <td>M</td> 
       <td>String</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].transaction_count</td> 
       <td>M</td> 
       <td>Integer</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].net_amount</td> 
       <td>M</td> 
       <td>NETAMOUNT</td> 
       <td>Total amount, can be negative</td> 
      </tr> 
      <tr> 
       <td>settlements[].currency</td> 
       <td>M</td> 
       <td>CURRENCY</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[]</td> 
       <td>M</td> 
       <td>Array</td> 
       <td>May be empty</td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].id</td> 
       <td>M</td> 
       <td>UUID4</td> 
       <td>Non unique! I.e. related transactions may share an ID. For example a debit transacation may have multiple related credits with the same ID.</td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].timestamp</td> 
       <td>M</td> 
       <td>TIMESTAMP</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].type</td> 
       <td>M</td> 
       <td>String</td> 
       <td>Debit or credit</td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].partial_pan</td> 
       <td>M</td> 
       <td>String</td> 
       <td>Masked PAN</td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].amount</td> 
       <td>M</td> 
       <td>AMOUNT</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].currency</td> 
       <td>M</td> 
       <td>CURRENCY</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].filing_code</td> 
       <td>M</td> 
       <td>String</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].authorization_code</td> 
       <td>O</td> 
       <td>String</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].verification_method</td> 
       <td>O</td> 
       <td>String</td> 
       <td>Applies to 3D Secure verification</td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].status</td> 
       <td>M</td> 
       <td></td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].status.state</td> 
       <td>M</td> 
       <td>SSTATE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].status.code</td> 
       <td>M</td> 
       <td>SCODE</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>settlements[].transactions[].status.message</td> 
       <td>O</td> 
       <td>SMSG</td> 
       <td></td> 
      </tr> 
     </tbody>
    </table> 
    <h1 id="response-and-status-codes">Response and Status Codes</h1> 
    <h2 id="rcode-result-codes">RCODE Result Codes</h2> 
    <p><em>Please note that these codes are different from HTTP response codes</em></p> 
    <table>
     <thead> 
      <tr> 
       <th>RCODE</th> 
       <th>RMSG</th> 
       <th>Description, actions</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>100</td> 
       <td>Description of the succesful request</td> 
       <td>Request successful.</td> 
      </tr> 
      <tr> 
       <td>200</td> 
       <td>Reason for the failure</td> 
       <td>Authorization failed, unable to create a Debit transaction or Revert failed.<br>For Debit transactions, please initialize a new transaction the next day (in case there was insufficient funds) and/or contact the cardholder.<br>For transaction reverts, please see the status of the transaction with <code class="prettyprint">GET /transaction/&lt;id&gt;</code></td> 
      </tr> 
      <tr> 
       <td>209</td> 
       <td>Description of the timeout</td> 
       <td>Charge/Revert failed due to acquirer or issuer timeout.</td> 
      </tr> 
      <tr> 
       <td>210</td> 
       <td></td> 
       <td>Transaction already fully reverted: A full amount revert was performed on an already fully reverted transaction.</td> 
      </tr> 
      <tr> 
       <td>211</td> 
       <td></td> 
       <td>Insufficient balance for the revert: A partial revert with an amount greater than the amount left was performed on the transaction.</td> 
      </tr> 
      <tr> 
       <td>250</td> 
       <td>“Suspected fraud”</td> 
       <td>The transaction was rejected due to suspected fraud.</td> 
      </tr> 
      <tr> 
       <td>300</td> 
       <td>&nbsp;</td> 
       <td>Transaction in progress. Given when there is already a debit transaction being processed with the ID.</td> 
      </tr> 
      <tr> 
       <td>900</td> 
       <td>Description of the error</td> 
       <td>Could not process the transaction, please try again.</td> 
      </tr> 
      <tr> 
       <td>901</td> 
       <td>Description of the validation error</td> 
       <td>Invalid input. Detailed information is in the <code class="prettyprint">message</code> field.</td> 
      </tr> 
      <tr> 
       <td>902</td> 
       <td>Description and ID of the transcation</td> 
       <td>Transaction not found. Error is raised if the transaction iD is not found or when the transaction ID is trying to be used for a wrong type of operation.</td> 
      </tr> 
      <tr> 
       <td>910</td> 
       <td>Description of the operation type error</td> 
       <td>Invalid operation type. Either a credit transaction is performed on a debit ID or vice versa.</td> 
      </tr> 
      <tr> 
       <td>920</td> 
       <td>Description of the erroneous request parameters.</td> 
       <td>Unmatched request parameters. Request parameters do not match the previous parameters with the current transaction ID.</td> 
      </tr> 
      <tr> 
       <td>940</td> 
       <td>Route not found error</td> 
       <td>The transaction did not match any of the merchant’s acquirer routing rules and thus is not allowed.</td> 
      </tr> 
      <tr> 
       <td>950</td> 
       <td>“The desired token already exists”</td> 
       <td>The card is already tokenized with the existing token.</td> 
      </tr> 
      <tr> 
       <td>990</td> 
       <td>Description of the error</td> 
       <td>Permanent failure. Cannot repeat the transaction. Please initialize a new transaction.</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="tcode-transaction-status-codes">TCODE Transaction Status Codes</h2> 
    <table>
     <thead> 
      <tr> 
       <th>TCODE</th> 
       <th>TSTATE</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>3000</td> 
       <td>“in_progress”</td> 
       <td>The transaction is being authorized.</td> 
      </tr> 
      <tr> 
       <td>4000</td> 
       <td>“ok”</td> 
       <td>The transaction has been succesfully processed.</td> 
      </tr> 
      <tr> 
       <td>4100</td> 
       <td>“ok_pending”</td> 
       <td>Pending <a href="#commit-payment">commit</a> for the transaction.</td> 
      </tr> 
      <tr> 
       <td>4200</td> 
       <td>“ok_estimated_pending”</td> 
       <td>Pending commit for an estimated debit amount.</td> 
      </tr> 
      <tr> 
       <td>5700</td> 
       <td>“reverted”</td> 
       <td>The transaction has been successfully reverted.</td> 
      </tr> 
      <tr> 
       <td>5800</td> 
       <td>“reverting”</td> 
       <td>The revert is being authorized.</td> 
      </tr> 
      <tr> 
       <td>7000</td> 
       <td>“failed”</td> 
       <td>The transaction was failed.</td> 
      </tr> 
      <tr> 
       <td>7100</td> 
       <td>“timeout”</td> 
       <td>The transaction was failed due to timeout from the acquirer or issuer.</td> 
      </tr> 
      <tr> 
       <td>7200</td> 
       <td>“suspected_fraud”</td> 
       <td>The transaction was failed due to suspected fraud.</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="scode-settlement-status-codes">SCODE Settlement Status Codes</h2> 
    <table>
     <thead> 
      <tr> 
       <th>SCODE</th> 
       <th>SSTATE</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>3000</td> 
       <td>“pending”</td> 
       <td>Settlement has not yet been transmitted to the acquiring bank.</td> 
      </tr> 
      <tr> 
       <td>4000</td> 
       <td>“ok”</td> 
       <td>Settlement is processed OK.</td> 
      </tr> 
     </tbody>
    </table> 
    <h2 id="http-status-code-summary">HTTP Status Code Summary</h2> 
    <table>
     <thead> 
      <tr> 
       <th>CODE</th> 
       <th>Description</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>200 - OK</td> 
       <td>Request successful</td> 
      </tr> 
      <tr> 
       <td>401 - Unauthorized</td> 
       <td>Authentication HMAC mismatch</td> 
      </tr> 
      <tr> 
       <td>404 - Not Found</td> 
       <td>The requested item doesn’t exist</td> 
      </tr> 
      <tr> 
       <td>5xx - Server Errors</td> 
       <td>Something went wrong in Payment Highway</td> 
      </tr> 
     </tbody>
    </table> 
    <h1 id="data-types">Data Types</h1> 
    <table>
     <thead> 
      <tr> 
       <th>Type</th> 
       <th>Format</th> 
       <th>Example</th> 
      </tr> 
     </thead>
     <tbody> 
      <tr> 
       <td>N</td> 
       <td>^[0-9]+$</td> 
       <td>1200</td> 
      </tr> 
      <tr> 
       <td>ACCOUNT</td> 
       <td>^[-\w.]{1,500}$</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>AMOUNT</td> 
       <td>^\d{1,12}$</td> 
       <td>9900 (meaning 99.00 for duodecimal currencies)</td> 
      </tr> 
      <tr> 
       <td>AN</td> 
       <td>^[0-9a-zA-Z]+$</td> 
       <td>sampleText001</td> 
      </tr> 
      <tr> 
       <td>ANS</td> 
       <td>^[ -~]+$</td> 
       <td>~/sample/text! &lt;with@specials&gt;</td> 
      </tr> 
      <tr> 
       <td>BOOLEAN</td> 
       <td>^(true|false)$</td> 
       <td>true</td> 
      </tr> 
      <tr> 
       <td>CURRENCY</td> 
       <td>^(EUR)$</td> 
       <td>EUR</td> 
      </tr> 
      <tr> 
       <td>DATE</td> 
       <td>^\d{4}-\d{2}-\d{2}$</td> 
       <td>2014-09-18 (year-month-day)</td> 
      </tr> 
      <tr> 
       <td>IP</td> 
       <td>Valid IPv4 address</td> 
       <td>127.0.0.1</td> 
      </tr> 
      <tr> 
       <td>MERCHANT</td> 
       <td>^[-\w.]{1,500}$</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>MONTH</td> 
       <td>^[0-9]{2}$</td> 
       <td>02</td> 
      </tr> 
      <tr> 
       <td>NETAMOUNT</td> 
       <td>^-?\d{1,12}$</td> 
       <td>-1590 (meaning -15.90 for duodecimal currencies)</td> 
      </tr> 
      <tr> 
       <td>ORDER-ID</td> 
       <td>^[-a-zA-Z0-9_]{1,254}$</td> 
       <td>1000123A</td> 
      </tr> 
      <tr> 
       <td>PAN</td> 
       <td>^[3-6]\d{12,18}$</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>RCODE</td> 
       <td>^\d{1,6}$</td> 
       <td>&nbsp;100</td> 
      </tr> 
      <tr> 
       <td>REFERENCE</td> 
       <td>&nbsp;^\d{12,20}$</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>REVTYPE</td> 
       <td>^(cancellation|refund)$</td> 
       <td>cancellation</td> 
      </tr> 
      <tr> 
       <td>RMSG</td> 
       <td>^[.,’-=/\w;\s]{0,1023}$</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>SCODE</td> 
       <td>^\d{3,4}$</td> 
       <td>3000</td> 
      </tr> 
      <tr> 
       <td>SMSG</td> 
       <td>^[.,’-=/\w;\s]{0,1023}$</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>SSTATE</td> 
       <td>^[.,’-=/\w;\s]{0,254}$</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>TCODE</td> 
       <td>^\d{4}$</td> 
       <td>4000</td> 
      </tr> 
      <tr> 
       <td>TMSG</td> 
       <td>^[.,’-=/\w;\s]{0,1023}$</td> 
       <td></td> 
      </tr> 
      <tr> 
       <td>TSTATE</td> 
       <td>^[.,’-=/\w;\s]{0,254}$</td> 
       <td>ok</td> 
      </tr> 
      <tr> 
       <td>UUID4</td> 
       <td>^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$</td> 
       <td>f47ac10b-58cc-4372-a567-0e02b2c3d479</td> 
      </tr> 
      <tr> 
       <td>URL</td> 
       <td>Valid URL with HTTPS scheme</td> 
       <td>https://example.com/success?myparam=abc</td> 
      </tr> 
      <tr> 
       <td>TIMESTAMP</td> 
       <td>^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}Z$</td> 
       <td>2014-09-18T10:32:59Z</td> 
      </tr> 
      <tr> 
       <td>VERSION</td> 
       <td>^\d{8}$</td> 
       <td>20150515</td> 
      </tr> 
      <tr> 
       <td>YEAR</td> 
       <td>^[0-9]{4}$</td> 
       <td>2015</td> 
      </tr> 
     </tbody>
    </table> 
    <h1 id="change-log">Change log</h1> 
    <h2 id="2017-06-27">2017-06-27</h2> 
    <h3 id="masterpass-with-user-profile">Masterpass with user profile</h3> 
    <ul> 
     <li>Form API 
      <ul> 
       <li><a href="#payment-with-masterpass-and-user-profile">Payment with Masterpass and User Profile</a> added for requesting user profile before authorization</li> 
       <li><code class="prettyprint">sph-request-shipping-address</code> optional boolean parameter added to Masterpass requests</li> 
      </ul></li> 
     <li>Payment API 
      <ul> 
       <li><a href="#user-profile">User profile</a> for fetching user profile</li> 
       <li><a href="#masterpass-debit-transaction">Masterpass debit transaction</a> card charging after fetching user profile</li> 
      </ul></li> 
    </ul> 
    <h2 id="2017-05-29">2017-05-29</h2> 
    <ul> 
     <li><a href="#payment-with-masterpass">Masterpass</a> form function</li> 
     <li>New failure reasons: THREE_D_SECURE, MOBILEPAY_NOT_SUPPORTED, MOBILEPAY, MASTERPASS_NOT_SUPPORTED, MASTERPASS</li> 
     <li>New form parameter for <a href="#payment">Payment</a> and <a href="#payment-&amp;-add-card">Payment &amp; Add Card</a>: <code class="prettyprint">sph-show-payment-method-selector</code></li> 
    </ul> 
    <h2 id="2017-05-23">2017-05-23</h2> 
    <ul> 
     <li>Webhook form parameters added <code class="prettyprint">sph-webhook-success-url</code>, <code class="prettyprint">sph-webhook-failure-url</code>, <code class="prettyprint">sph-webhook-cancel-url</code> and <code class="prettyprint">sph-webhook-delay</code></li> 
    </ul> 
    <h2 id="2016-12-07">2016-12-07</h2> 
    <ul> 
     <li>Java lib examples with new builder pattern.</li> 
     <li>New parameters for MobilePay: sph-mobilepay-phone-number, sph-mobilepay-shop-name</li> 
    </ul> 
    <h2 id="2016-11-21">2016-11-21</h2> 
    <ul> 
     <li>Shop logo url for <a href="#payment-with-mobilepay">MobilePay</a></li> 
    </ul> 
    <h2 id="2016-10-17">2016-10-17</h2> 
    <ul> 
     <li>Diners and Amex card bin lengths are set to 2 first digits. This applies to all previous ApiVersion versions.</li> 
    </ul> 
    <h2 id="2016-09-23">2016-09-23</h2> 
    <ul> 
     <li><a href="#payment-with-mobilepay">MobilePay</a> form functions just as the regular Pay with Card form.</li> 
    </ul> 
    <h2 id="2016-06-30">2016-06-30</h2> 
    <ul> 
     <li>ApiVersion 20160630</li> 
     <li>Allow committing smaller amounts than was authorized and showing committed status and amount in transaction info</li> 
     <li>Less than 7 days old transactions can be committed</li> 
     <li>Transaction/&lt;:transaction_id&gt;/result - added 
      <ul> 
       <li>committed and committed_amount added for result, commit, transaction status and order-search responses</li> 
       <li>“committed_amount” is omitted if “committed” is false</li> 
      </ul></li> 
    </ul> 
    <h2 id="2016-02-12">2016-02-12</h2> 
    <ul> 
     <li>Added optional sph-use-three-d-secure parameter for form entry api, possible values are true or false. When missing default behavior is used for contract, but when when true is used then Three D Secure is turned on and when false is used then it is turned off despite default options for contract.</li> 
     <li>Added new fields sph-skip-form-notifications, sph-exit-iframe-on-result, sph-exit-iframe-on-three-d-secure, sph-use-three-d-secure</li> 
    </ul> 
    <h2 id="2015-11-19">2015-11-19</h2> 
    <ul> 
     <li>New field “filing_code” to successful commit and debit responses</li> 
    </ul> 
    <h2 id="2015-10-28">2015-10-28</h2> 
    <ul> 
     <li>ApiVersion 20151028</li> 
     <li>New fields to card object in responses (bin, funding, category, country_code)</li> 
     <li>New fields to Transaction Status, Commit, Tokenization Order Search responses if customer details available (Transaction done using form, or customer.network_address given in Payment API debit request)</li> 
     <li>New field to Transaction Status, Commit, Tokenization and Order Search responses, which indicates whether ThreeDS (3ds) card holder authentication was done</li> 
    </ul> 
    <h2 id="2015-10-01">2015-10-01</h2> 
    <p><strong>New Result Codes</strong></p> 
    <ul> 
     <li>Added results codes 209 “Authorization timeout”, 902 “Transaction not found” and 950 “Token already exists”</li> 
    </ul> 
    <h2 id="2015-09-03">2015-09-03</h2> 
    <p><strong>Fraud detection</strong></p> 
    <p>Changes in the Payment API:</p> 
    <ul> 
     <li>Added a new parameter <code class="prettyprint">customer.network_address</code> to the <a href="#charge-a-card">debit request</a></li> 
     <li>Added a new <a href="#rcode-result-codes">response code</a> 250 for a transaction rejected by fraud detection</li> 
     <li>Added a new <a href="#tcode-transaction-status-codes">transaction status</a> 7200 when a transaction is automatically reverted due to rejection by fraud detection</li> 
    </ul> 
    <h2 id="2015-08-05">2015-08-05</h2> 
    <p><strong>Get transaction IDs by the “order” value</strong></p> 
    <p>Introduced the possibility to get the transactions related to a specific order. In cases where the user’s browser does not redirect back to a given URL it is still possible to get the related transaction ID using the <code class="prettyprint">order</code> value given for the payment.</p> 
    <p>Changes in the Payment API:</p> 
    <ul> 
     <li>Added a new method <a href="#order-status">GET /transactions</a></li> 
     <li>Added the parameter “order” to <a href="#charge-a-card">Payment API debit request</a> JSON</li> 
    </ul> 
    <h2 id="2015-06-05">2015-06-05</h2> 
    <p>New API version: 20150605</p> 
    <p><strong>The CVC Form</strong></p> 
    <p>Introduced the new CVC Form to support a wider range of cards and business cases. Added version numbering to the Payment API to allow for incremental changes.</p> 
    <p>Changes in the Form API: </p> 
    <ul> 
     <li>Added an optional parameter <code class="prettyprint">sph-accept-cvc-required</code> to <a href="#add-card">Add Card</a> request to allow adding a card even if it requires the CVC for payments. See below for the related changes in the Payment API.</li> 
    </ul> 
    <p>Changes in the Payment API:</p> 
    <aside class="notice">
      Migrating to the new Sph-Api-Version requires you to check the `cvc_required` value in the responses and work accordingly. See below for details. 
    </aside> 
    <ul> 
     <li>Renamed the optional version parameter in the <a href="#payment-api">header</a> from <code class="prettyprint">Schema-Version</code>to <code class="prettyprint">Sph-Api-Version</code></li> 
     <li>Added <code class="prettyprint">card.cvc_required</code> to the <a href="#tokenization">tokenization response</a> with the possible values of “yes” or “no”. 
      <ul> 
       <li>Previously you would have received a failure response for a card requiring the CVC for payments.</li> 
       <li>With the new API version you always receive a success response with the <code class="prettyprint">cvc_required</code> field.</li> 
      </ul></li> 
     <li>Added <code class="prettyprint">card.cvc_required</code> to the <a href="#commit-payment">commit form payment response</a> with the possible values of “yes” or “no”. 
      <ul> 
       <li>Previously you would have not received a <code class="prettyprint">card_token</code> for a card requiring the CVC for payments.</li> 
       <li>With the new API version you always receive a <code class="prettyprint">card_token</code> in a success response. You must check the value of the <code class="prettyprint">cvc_required</code> field to know whether the card requires the CVC for payments.</li> 
      </ul></li> 
     <li>Added <code class="prettyprint">transaction.card.cvc_required</code> to the <a href="#transaction-status">transaction status response</a> with the possible values of “yes”, “no” or “not_tested”. 
      <ul> 
       <li>For transactions created using the old API version the <code class="prettyprint">cvc_required</code> field may contain the value “not_tested”.</li> 
      </ul></li> 
    </ul> 
   </div> 
   <div class="dark-box"> 
    <div class="lang-selector"> 
     <a href="#" data-language-name="java">Java</a> 
     <a href="#" data-language-name="shell"></a> 
     <a href="#" data-language-name="javascript">JavaScript</a> 
     <a href="#" data-language-name="php">PHP</a> 
     <a href="#" data-language-name="ruby"></a> 
    </div> 
   </div> 
  </div>   
 </body>
</html>