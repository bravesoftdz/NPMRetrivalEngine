<!doctype html>
<html lang="en">
 <head> 
  <title>Controlling Media with JavaScript</title> 
  <meta http-equiv="X-UA-Compatible" content="IE=7"> 
  <meta charset="utf-8"> 
  <meta id="book-resource-type" name="book-resource-type" content="Guide"> 
  <meta scheme="apple_ref" id="identifier" name="identifier" content="//apple_ref/doc/uid/TP40009523"> 
  <meta id="document-version" name="document-version" content="5.2.5"> 
  <meta id="build" name="build" content="5dab9d19304cf8b203b88857cc28b50a"> 
  <meta id="chapterId" name="chapterId" content="TP40009523-CH3"> 
  <meta id="date" name="date" content="2012-12-13"> 
  <meta id="description" name="description" content="Explains how to use the HTML 5 audio and video tags to add media to web content."> 
  <meta id="book-title" name="book-title" content="Safari HTML5 Audio and Video Guide"> 
  <meta id="book-root" name="book-root" content="../"> 
  <meta id="book-json" name="book-json" content="../book.json"> 
  <meta id="devcenter" name="devcenter" content="Mac Dev Center"> 
  <meta id="devcenter-url" name="devcenter-url" content="http://developer.apple.com/devcenter/mac"> 
  <meta id="reflib" name="reflib" content="Guides and Sample Code"> 
  <meta id="book-assignments" name="book-assignments" content="{Type/Guide}"> 
  <meta id="copyright" name="copyright" content="Copyright 2017 Apple Inc. All Rights Reserved."> 
  <meta id="xcode-display" name="xcode-display" content="render"> 
  <meta id="IndexTitle" name="IndexTitle" content="Safari HTML5 Audio and Video Guide: Controlling Media with JavaScript"> 
  <meta id="resources-uri" name="resources-uri" content="../../../../../Resources/1272"> 
  <link id="book-index-page" rel="Start" title="Safari HTML5 Audio and Video Guide" type="text/html" href="../index.html"> 
  <link id="next-page" rel="Next" type="text/html" href="../AddingCSSStyles/AddingCSSStyles.html"> 
  <link id="previous-page" rel="Prev" type="text/html" href="../PlayingandSynthesizingSounds/PlayingandSynthesizingSounds.html"> 
  <link rel="stylesheet" type="text/css" href="../../../../../Resources/1272/CSS/screen.css"> 
  <!-- xcode_css --> 
  <link rel="stylesheet" type="text/css" href="../../../../../Resources/1272/CSS/feedback.css"> 
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"> 
  <meta id="platforms" name="platforms" content=""> 
 </head> 
 <body>
  <a name="//apple_ref/doc/uid/TP40009523-CH3" title="Controlling Media with JavaScript"></a> 
  <div id="_omniture_top"> 
   <!-- SiteCatalyst code version: H.8. Copyright 1997-2006 Omniture, Inc. --> 
   <script type="text/javascript">
    /* RSID: */
    var s_account="appleglobal,appleusdeveloper,dappdeveloperlib"
    </script> 
   <script type="text/javascript" src="https://www.apple.com/metrics/scripts/s_code_h.js"></script> 
   <script type="text/javascript">
    s.pageName=AC.Tracking.pageName();
    s.channel="www.us.developer"

    /************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/
    var s_code=s.t();if(s_code)document.write(s_code)</script> 
   <!-- End SiteCatalyst code version: H.8. --> 
  </div> 
  <div id="adcHeader" class="hideOnPrint hideInXcode"> 
   <div id="ssi_Header" class="hideInXcode unified"> 
    <a id="ssi_LibraryTitle" href="../../../../../navigation/">Guides and Sample Code</a> 
    <a id="ssi_AppleDeveloperConnection" href="https://developer.apple.com/">Developer</a> 
    <div id="ssi_SearchButton" role="button" title="Search">
     Search
    </div> 
   </div> 
   <form id="ssi_SearchMenu" method="get" action="../../../../../search/" accept-charset="utf-8"> 
    <label for="adcsearch">Search Guides and Sample Code</label> 
    <input type="search" id="ssi_SearchField" name="q" accesskey="s" results="5"> 
   </form> 
  </div> 
  <header id="header"> 
   <div id="title" role="banner"> 
    <h1>Safari HTML5 Audio and Video Guide</h1> 
    <span id="file_links"> <a id="PDF_link" role="button" tabindex="4" rel="alternate" title="Download PDF"><span id="pdf_icon"></span>PDF</a> <a id="Companion_link" role="button" tabindex="3" title="Download Companion File"><span id="companion_icon"></span>Companion File</a> </span> 
   </div> 
   <ul id="headerButtons" class="hideOnPrint" role="toolbar"> 
    <li id="toc_button" style="display:none"> <button tabindex="5" id="table_of_contents" class="open" role="checkbox" aria-label="Show Table of Contents"><span class="disclosure"></span>Table of Contents</button> </li> 
    <li id="jumpto_button" style="display:none" role="navigation"><select tabindex="6" id="jumpTo"><option value="top">Jump To?</option></select></li> 
    <li id="downloadSample_button" style="display:none"> <a id="Sample_link"><button id="Sample_button">Download Sample Code</button></a> </li> 
   </ul> 
  </header> 
  <nav id="tocContainer" tabindex="7"> 
   <ul id="toc" role="tree"></ul> 
  </nav> 
  <article id="contents" tabindex="0" role="main"> 
   <div id="pageNavigationLinks_top" class="pageNavigationLinks"> 
    <a class="nextLink" rel="next" href="../AddingCSSStyles/AddingCSSStyles.html">Next</a>
    <a class="previousLink" rel="prev" href="../PlayingandSynthesizingSounds/PlayingandSynthesizingSounds.html">Previous</a> 
   </div> 
   <a id="top" name="top"></a> 
   <a id="INDEX" href="../index.html" style="display:none;"></a> 
   <a name="//apple_ref/doc/uid/TP40009523-CH3-SW1" title="Controlling Media with JavaScript"></a>
   <h1 id="pageTitle">Controlling Media with JavaScript</h1>
   <p>Because the <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code> elements are part of the HTML5 standard, there are JavaScript methods, properties, and DOM events associated with them.</p>
   <p>There are methods for loading, playing, pausing, and jumping to a time. There are also properties you can set programmatically, such as the <code>src</code> URL and the height and width of a video, as well as read-only properties such as the video’s native height. Finally, there are DOM events you can listen for, such as load progress, media playing, media paused, and media done playing.</p>
   <p>This chapter shows you how to do the following:</p>
   <ul class="ul">
    <li class="li"><p>Use JavaScript to create a simple controller.</p></li>
    <li class="li"><p>Change the size of a movie dynamically.</p></li>
    <li class="li"><p>Display a progress indicator while the media is loading.</p></li>
    <li class="li"><p>Replace one movie with another when the first finishes.</p></li>
    <li class="li"><p>Keep the playback of multiple media elements in perfect sync.</p></li>
    <li class="li"><p>Provide fallback content using JavaScript if none of the media sources is playable.</p></li>
    <li class="li"><p>Enter and exit full-screen mode.</p></li>
    <li class="li"><p>Take your custom video player and controls into full-screen mode.</p></li>
   </ul>
   <p>For a complete description of all the methods, properties, and DOM events associated with HTML5 media, see <em><a href="https://developer.apple.com/documentation/webkitjs" class="urlLink" target="_self">Safari DOM Additions Reference</a></em>. All the methods, properties, and DOM events associated with <code>HTMLMediaElement</code>, <code>HTMLAudioElement</code>, and <code>HTMLVideoElement</code> are exposed to JavaScript.</p>
   <section>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW11" title="A Simple JavaScript Media Controller and Resizer"></a>
    <h2 class="jump">A Simple JavaScript Media Controller and Resizer</h2>
    <p><span class="content_text">Listing 4-1</span> creates a simple play/pause movie control in JavaScript, with additional controls to toggle the video size between normal and doubled. It is intended to illustrate, in the simplest possible way, addressing a media element, reading and setting properties, and calling methods.</p>
    <p>Any of the standard ways to address an HTML element in JavaScript can be used with <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> elements. You can assign the element a name or an id, use the tag name, or use the element’s place in the DOM hierarchy. The example in <span class="content_text">Listing 4-1</span> uses the tag name. Since there is only one <code>&lt;video&gt;</code> element in the example, it is the 0th item in the array of elements with the “video” tag name.</p>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW6" title="Listing 4-1Adding simple JavaScript controls"></a>
    <p class="codesample clear"><strong class="caption_number">Listing 4-1</strong>&nbsp;&nbsp;Adding simple JavaScript controls</p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>&lt;!doctype html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;title&gt;Simple JavaScript Controller&lt;/title&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;script type="text/javascript"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function playPause() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            if (myVideo.paused)<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                myVideo.play();<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            else<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                myVideo.pause();<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>       function makeBig() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>           var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>           myVideo.height = myVideo.videoHeight * 2;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>       }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>       function makeNormal() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>           var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>           myVideo.height = myVideo.videoHeight;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>       }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/script&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;body&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;div class="video-player" align="center"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;video src="myMovie.m4v" poster="poster.jpg" &gt;&lt;/video&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;a href="javascript:playPause();"&gt;Play/Pause&lt;/a&gt; |<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;a href="javascript:makeBig();"&gt;2x Size&lt;/a&gt; |<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;a href="javascript:makeNormal();"&gt;1x Size&lt;/a&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/div&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/body&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/html&gt;<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
    <p>The previous example gets two read-only properties: <code>paused</code> and <code>videoHeight</code> (the native height of the video). It calls two methods: <code>play()</code> and <code>pause()</code>. And it sets one read/write property: <code>height</code>. Recall that setting only the height or width causes the video to scale up or down while retaining its native aspect ratio.</p>
    <div class="notebox">
     <aside>
      <a name="//apple_ref/doc/uid/TP40009523-CH3-SW15" title="Note"></a>
      <p><strong>Note:</strong>&nbsp;Safari on iOS version 3.2 does not support dynamically resizing video on the iPad.</p>
      <p></p>
     </aside>
    </div>
   </section>
   <section>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW4" title="Using DOM Events to Monitor Load Progress"></a>
    <h2 class="jump">Using DOM Events to Monitor Load Progress</h2>
    <p>One of the common tasks for a movie controller is to display a progress indicator showing how much of the movie has loaded so far. One way to do this is to constantly poll the media element’s <code>buffered</code> property, to see how much of the movie has buffered, but this is a waste of time and energy. It wastes processor time and often battery charge, and it slows the loading process.</p>
    <p>A much better approach is to create an event listener that is notified when the media element has something to report. Once the movie has begun to load, you can listen for <code>progress</code> events. You can read the <code>buffered</code> value when the browser reports <code>progress</code> and display it as a percentage of the movie’s <code>duration</code>.</p>
    <p>Another useful DOM event is <code>canplaythrough</code>, a logical point to begin playing programmatically.</p>
    <p>You can install event listeners on the media element or any of its parents, up to and including the document body.</p>
    <p><span class="content_text">Listing 4-2</span> loads a large movie from a remote server so you can see the progress changing. It installs an event listener for <code>progress</code> events and another for the <code>canplaythrough</code> event. It indicates the percentage loaded by changing the inner HTML of a paragraph element.</p>
    <p>You can copy and paste the example into a text editor and save it as HTML to see it in action.</p>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW7" title="Listing 4-2Installing DOM event listeners"></a>
    <p class="codesample clear"><strong class="caption_number">Listing 4-2</strong>&nbsp;&nbsp;Installing DOM event listeners</p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>&lt;!doctype html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;title&gt;JavaScript Progress Monitor&lt;/title&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;script type="text/javascript"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function getPercentProg() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var endBuf = myVideo.buffered.end(0);<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var soFar = parseInt(((endBuf / myVideo.duration) * 100));<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            document.getElementById("loadStatus").innerHTML =  soFar + '%';<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>       function myAutoPlay() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>           var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>           myVideo.play();<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>       }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>       function addMyListeners(){<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>           var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>           myVideo.addEventListener('progress', getPercentProg, false);<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>           myVideo.addEventListener('canplaythrough', myAutoPlay, false);<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>       }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/script&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;body onload="addMyListeners()"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;div&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;video controls<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>               src="http://homepage.mac.com/qt4web/sunrisemeditations/myMovie.m4v"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;/video&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;p id="loadStatus"&gt;MOVIE LOADING...&lt;/p&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/div&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/body&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/html&gt;<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
    <div class="notebox">
     <aside>
      <a name="//apple_ref/doc/uid/TP40009523-CH3-SW17" title="Note"></a>
      <p><strong>Note:</strong>&nbsp;On the iPad, Safari does not begin downloading until the user clicks the poster or placeholder. Currently, downloads begun in this manner do not emit <code>progress</code> events.</p>
      <p></p>
     </aside>
    </div>
    <p>The <code>buffered</code> property is a <code>TimeRanges</code> object, essentially an array of start and stop times, not a single value. Consider what happens if the person watching the media uses the time scrubber to jump forward to a point in the movie that hasn’t loaded yet—the movie stops loading and jumps forward to the new point in time, then starts buffering again from there. So the <code>buffered</code> property can contain an array of discontinuous ranges. The example simply seeks to the end of the array and reads the last value, so it actually shows the percentage into the movie duration for which there is data. To determine precisely what percentage of a movie has loaded, taking possible discontinuities into account, iterate through the array, summing the seekable ranges, as illustrated in <span class="content_text">Listing 4-3</span></p>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW2" title="Listing 4-3Summing a TimeRanges object"></a>
    <p class="codesample clear"><strong class="caption_number">Listing 4-3</strong>&nbsp;&nbsp;Summing a TimeRanges object</p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>var myBuffered = document.getElementsByTagName('video')[0].buffered;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>var total = 0;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>for (var i = 0, len = myBuffered.length; i &lt; len; i++) {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    total += (seekable.end(i) - seekable.start(i));<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>}<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
    <p>The <code>buffered</code>, <code>played</code>, and <code>seekable</code> properties are all <code>TimeRanges</code> objects.</p>
   </section>
   <section>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW5" title="Replacing a Media Source Sequentially"></a>
    <h2 class="jump">Replacing a Media Source Sequentially</h2>
    <p>Another common task for a website programmer is to create a playlist of audio or video—to put together a radio set or to follow an advertisement with a program, for example. To do this, you can provide a function that listens for the <code>ended</code> event. The <code>ended</code> event is triggered only when the media ends (plays to its complete duration), not if it is paused.</p>
    <p>When your listener function is triggered, it should change the media’s <code>src</code> property, then call the <code>load</code> method to load the new media and the <code>play</code> method to play it, as shown in <span class="content_text">Listing 4-4</span>.</p>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW8" title="Listing 4-4Replacing media sequentially"></a>
    <p class="codesample clear"><strong class="caption_number">Listing 4-4</strong>&nbsp;&nbsp;Replacing media sequentially</p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>&lt;!doctype html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;title&gt;Sequential Movies&lt;/title&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;script type="text/javascript"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        // listener function changes src<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function myNewSrc() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            myVideo.src = "http://homepage.mac.com/qt4web/myMovie.m4v";<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            myVideo.load();<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            myVideo.play();<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        // add a listener function to the ended event<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function myAddListener(){<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            myVideo.addEventListener('ended', myNewSrc, false);<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/script&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;body onload="myAddListener()"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;video controls<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>           src="http://homepage.mac.com/qt4web/A-chord.m4v"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/video&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/body&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/html&gt;<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
    <p>The previous example works on both Safari on the desktop and Safari on iOS, as the <code>load()</code> and <code>play()</code> methods are enabled even on cellular networks once the user has started playing the first media element.</p>
   </section>
   <section>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW25" title="Syncing Multiple Media Elements Together"></a>
    <h2 class="jump">Syncing Multiple Media Elements Together</h2>
    <p>Until the advent of media controllers, ensuring that two or more videos played at precisely the same time was a challenging endeavor. Media controllers let you group any number of audio and/or video elements so that they can be managed by a universal set of controls, and also so that they can be kept in perfect sync, even if a network hiccup occurs.</p>
    <p>To create a media controller, simply add the <code>mediagroup</code> attribute to all of the elements you wish to sync together. The value you choose to assign to <code>mediagroup</code> is up to you—as long as the value is the same for each slaved element, a media controller will be created implicitly.</p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>&lt;video src="video.m4v" width="960" height="600" mediagroup="masterController"&gt;&lt;/video&gt;<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
    <p>Most of the same functions, attributes, and events available to audio and video elements are also available to media controllers. Instead of calling <code>play()</code> or <code>pause()</code> directly on the video itself, you call them on the media controller.</p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>var myVideo = document.querySelector('video');<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>var mediaController = myVideo.controller;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>mediaController.play();<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
    <div class="notebox">
     <aside>
      <a name="//apple_ref/doc/uid/TP40009523-CH3-SW26" title="Note"></a>
      <p><strong>Note:</strong>&nbsp;Two attributes that aren’t supported by media controllers are <code>loop</code> and <code>autoplay</code>.</p>
      <p></p>
     </aside>
    </div>
    <p>Accessing the controller object on any of the slaved media elements will return a controller of the grouped elements. You can also create a media controller entirely in JavaScript without needing to modify the attributes of your HTML:</p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>var myVideos = document.querySelectorAll('video');<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>var mediaController = new MediaController();<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>myVideos[0].controller = mediaController;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>myVideos[1].controller = mediaController;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>mediaController.play();<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
    <p>If one video stalls or stutters, the other videos will automatically pause to wait for the lagging video to catch up. When the video buffers and is ready to play, the remaining videos will resume in sync.</p>
   </section>
   <section>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW3" title="Using JavaScript to Provide Fallback Content"></a>
    <h2 class="jump">Using JavaScript to Provide Fallback Content</h2>
    <p>It’s easy to provide fallback content for browsers that don’t support the <code>&lt;audio&gt;</code> or <code>&lt;video&gt;</code> tag using HTML (see <span class="content_text"><a href="../AudioandVideoTagBasics/AudioandVideoTagBasics.html#//apple_ref/doc/uid/TP40009523-CH2-SW13" data-renderer-version="1">Specifying Fallback Behavior</a></span>). But if the browser understands the tag and can’t play any of the media you’ve specified, you need JavaScript to detect this and provide fallback content.</p>
    <p>To test whether the browser can play any of the specified media, iterate through your source types using the <code>canPlayType</code> method. </p>
    <div class="importantbox clear">
     <aside>
      <a name="//apple_ref/doc/uid/TP40009523-CH3-DontLinkElementID_8" title="Important"></a>
      <p><strong>Important:</strong>&nbsp;The HTML5 specification has changed. Browsers conforming to the earlier version of the specification, including Safari 4.0.4 and earlier, return “no” if they cannot play the media type. Browsers conforming to the newer version return an empty string (“”) instead. You need to check for either response, or else check for a positive rather than a negative response.</p>
      <p></p>
     </aside>
    </div>
    <p>If the method returns “no” or the empty string (“”) for all the source types, the browser knows it can’t play any of the media, and you need to supply fallback content. If the method returns “maybe” or “probably” for any of the types, it will attempt to play the media and no fallback should be needed.</p>
    <p>The following example creates an array of types, one for each source, and iterates through them to see if the browser thinks it can play any of them. If it exhausts the array without a positive response, none of the media types are supported, and it replaces the video element using <code>innerHTML</code>. <span class="content_text">Listing 4-5</span> displays a text message as fallback content. You could fall back to a plug-in or redirect to another page instead.</p>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW9" title="Listing 4-5Testing for playability using JavaScript"></a>
    <p class="codesample clear"><strong class="caption_number">Listing 4-5</strong>&nbsp;&nbsp;Testing for playability using JavaScript</p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>&lt;!doctype html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;title&gt;JavaScript Fallback&lt;/title&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;script type="text/javascript"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function checkPlaylist() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var playAny = 0;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            myTypes = new Array ("video/mp4","video/ogg","video/divx");<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var nonePlayable = "Your browser cannot play these movie types."<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            for (var i = 0, len = myTypes.length; i &lt; len; x++) {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                var canPlay = myVideo.canPlayType(myTypes[i]);<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                if ((canPlay == "maybe") || (canPlay == "probably"))<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                    playAny = 1;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            if (playAny == 0)<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                document.getElementById("video-player").innerHTML = nonePlayable;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>         }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/script&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;body onload="checkPlaylist()" &gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;div id="video-player" align=center&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;video controls height="200" width="400"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            &lt;source src="myMovie.m4v" type="video/mp4"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            &lt;source src="myMovie.oga" type="video/ogg"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            &lt;source src="myMovie.dvx" type="video/divx"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;/video&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/div&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/body&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/html&gt;<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
   </section>
   <section>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW12" title="Handling Playback Failure"></a>
    <h2 class="jump">Handling Playback Failure</h2>
    <p>Even if a source type is playable, that’s no guarantee that the source <em>file</em> is playable—the file may be missing, corrupted, misspelled, or the <code>type</code> attribute supplied may be incorrect. If Safari 4.0.4 or earlier attempts to play a source and cannot, it emits an <code>error</code> event. However, it still continues to iterate through the playable sources, so the <code>error</code> event may indicate only a momentary setback, not a complete failure. It’s important to check which source has failed to play.</p>
    <p>Changes in the HTML5 specification now require the media element to emit an error only if the <em>last</em> playable source fails, so this test is not necessary in Safari 5.0 or later.</p>
    <p>The example in <span class="content_text">Listing 4-5</span> iterates through the source types to see if any are playable. It saves the filename of the last playable source. If there are no playable types, it triggers a fallback. If there are playable types, it installs an <code>error</code> event listener. The event listener checks to see if the current source contains the last playable filename before triggering a failure fallback. (The <code>currentSrc</code> property includes the full path, so the test is for inclusion, not equality.)</p>
    <p>Notice that when adding a listener for the <code>error</code> event you need to set the <code>capture</code> property to <code>true</code>, whereas for most events you set it to <code>false</code>. </p>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW18" title="Listing 4-6Testing for failure using JavaScript"></a>
    <p class="codesample clear"><strong class="caption_number">Listing 4-6</strong>&nbsp;&nbsp;Testing for failure using JavaScript</p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>&lt;!doctype html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;title&gt;JavaScript Fallback&lt;/title&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;script type="text/javascript"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        var lastPlayable,<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            myTypes = new Array("video/mp4", "video/ogg", "video/divx"),<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            mySrc = new Array("myMovie.mp4", "myMovie.oga", "myMovie.dvx");<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre> <span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function errorFallback() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var errorLast = "An error occurred playing ";<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            if (myVideo.currentSrc.match(lastPlayable)) {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                errorLast = errorLast + lastPlayable;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                document.getElementById("video-player").innerHTML = errorLast;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre> <span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function checkPlaylist() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var noPlayableTypes = "Your browser cannot play these movie types";<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var playAny = 0;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            for (var i = 0, len = myTypes.length; i &lt; len; i++) {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                var canPlay = myVideo.canPlayType(myTypes[i]);<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                if ((canPlay == "maybe") || (canPlay == "probably")) {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                    playAny = 1;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                    lastPlayable = mySrc[i];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            if (playAny == 0)<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                document.getElementById("video-player").innerHTML = noPlayableTypes;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            else<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                myVideo.addEventListener('error', errorFallback, true);<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/script&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;body onload="checkPlaylist()"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;video controls &gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;source src="myMovie.mp4" type="video/mp4"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;source src="myMovie.oga" type="video/ogg"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        &lt;source src="myMovie.dvx" type="video/divx<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/video&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/body&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/html&gt;<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
   </section>
   <section>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW19" title="Resizing Movies to Native Size"></a>
    <h2 class="jump">Resizing Movies to Native Size</h2>
    <p>If you know the dimensions of your movie in advance, you should specify them. Specifying the dimensions is especially important for delivering the best user experience on iPad. But you may not know the dimensions when writing the webpage. For example, your source movies may not be the same size, or sequential movies may have different dimensions. If you install a listener function for the <code>loadedmetadata</code> event, you can resize the video player to the native movie size dynamically using JavaScript as soon as the native size is known. The <code>loadedmetadata</code> event fires once for each movie that loads, so a listener function is called any time you change the source. <span class="content_text">Listing 4-7</span> shows how.</p>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW10" title="Listing 4-7Resizing movies programmatically"></a>
    <p class="codesample clear"><strong class="caption_number">Listing 4-7</strong>&nbsp;&nbsp;Resizing movies programmatically</p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>&lt;!doctype html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;title&gt;Resizing Movies&lt;/title&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;script type="text/javascript"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        // set height and width to native values<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function naturalSize() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            myVideo.height = myVideo.videoHeight;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            myVideo.width = myVideo.videoWidth;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        // register listener function on metadata load<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function myAddListener(){<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            var myVideo = document.getElementsByTagName('video')[0];<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            myVideo.addEventListener('loadedmetadata', naturalSize, false);<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/script&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;body onload="myAddListener()"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>     &lt;video src="http://homepage.mac.com/qt4web/myMovie.m4v" controls&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>     &lt;/video&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/body&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/html&gt;<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
   </section>
   <section>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW13" title="Taking Video Full Screen"></a>
    <h2 class="jump">Taking Video Full Screen</h2>
    <p>Safari 5.0 and later, and iOS 3.2 and later on iPad, include a full-screen button on the video controller, allowing the user to initiate full-screen video mode. </p>
    <p>Safari 5.0 and iOS 4.2 and later add JavaScript properties and DOM events that your scripts can use to determine when the browser has entered or exited full-screen video mode, as well as the methods to enter and exit full-screen video mode programatically. See <em><a href="https://developer.apple.com/documentation/webkitjs/htmlmediaelement" class="urlLink" target="_self">HTMLMediaElement Class Reference</a></em> for a full description of the full-screen DOM events, properties, and methods.</p>
    <p>The following example, <span class="content_text">Listing 4-8</span>, adds a button that puts Safari into full-screen video mode. The Boolean property <code>webkitSupportsFullscreen</code> is tested to verify that the current media is capable of being played in full-screen mode. Audio-only files cannot be played in full-screen mode, for example. The Full-screen button is hidden until the test is performed.</p>
    <div class="notebox">
     <aside>
      <a name="//apple_ref/doc/uid/TP40009523-CH3-SW14" title="Note"></a>
      <p><strong>Note:</strong>&nbsp;The <code>webkitSupportsFullscreen</code> property is not valid until the movie metadata has loaded. You can detect when the metadata is loaded by installing an event listener for the <code>loadedmetadata</code> event.</p>
      <p></p>
     </aside>
    </div>
    <div class="importantbox clear">
     <aside>
      <a name="//apple_ref/doc/uid/TP40009523-CH3-DontLinkElementID_9" title="Important"></a>
      <p><strong>Important:</strong>&nbsp;The <code>webkitEnterFullscreen()</code> method can be invoked only in response to a user action, such as clicking a button. You cannot invoke <code>webkitEnterFullscreen()</code> in response to a <code>load</code> event, for example.</p>
      <p></p>
     </aside>
    </div>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW16" title="Listing 4-8Using webkitEnterFullscreen()"></a>
    <p class="codesample clear"><strong class="caption_number">Listing 4-8</strong>&nbsp;&nbsp;Using <code>webkitEnterFullscreen()</code></p>
    <div class="codesample clear">
     <table>
      <tbody>
       <tr>
        <td scope="row"><pre>&lt;!doctype html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;html&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;title&gt;Fullscreen Video&lt;/title&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;script type="text/javascript"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        var vid;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function init() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            vid = document.getElementById("myVideo");<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            vid.addEventListener("loadedmetadata", addFullscreenButton, false);<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function addFullscreenButton() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            if (vid.webkitSupportsFullscreen) {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                var fs = document.getElementById("fs");<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>                fs.style.visibility = "visible";<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        function goFullscreen() {<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>            vid.webkitEnterFullscreen();<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>        }<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/script&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/head&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;body onload="init()"<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;h1&gt;Fullscreen Video&lt;/h1&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;video src="myMovie.m4v" id="myVideo" autoplay controls&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;/video&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>    &lt;input type="button" id="fs" value="Fullscreen" onclick="goFullscreen()" style="visibility:hidden"&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/body&gt;<span></span></pre></td>
       </tr>
       <tr>
        <td scope="row"><pre>&lt;/html&gt;<span></span></pre></td>
       </tr>
      </tbody>
     </table>
    </div>
   </section>
   <section>
    <a name="//apple_ref/doc/uid/TP40009523-CH3-SW20" title="Taking Your Custom Controls Full Screen"></a>
    <h2 class="jump">Taking Your Custom Controls Full Screen</h2>
    <p>In Safari 5.1 and later for OS X and Windows, you can not only take your video into full-screen mode, you can take <em>any</em> HTML element into full-screen mode. If you enclose a video and custom controls inside a <code>div</code> element, for example, you can take the <code>div</code> element and all its contents into full-screen mode by calling <code>myDiv.webkitRequestFullscreen()</code>.</p>
    <div class="notebox">
     <aside>
      <a name="//apple_ref/doc/uid/TP40009523-CH3-SW27" title="iOS Note"></a>
      <p><strong>iOS Note:</strong>&nbsp;On iOS, full-screen videos can only display the default controls.</p>
      <p></p>
     </aside>
    </div>
    <p>Use the following functions to take any element into and out of full-screen mode:</p>
    <ul class="ul">
     <li class="li"><p><code>myElement.webkitRequestFullscreen()</code></p></li>
     <li class="li"><p><code>document.webkitExitFullscreen()</code></p></li>
    </ul>
    <p>When you enter full-screen mode programatically, it is important to remember that the user can exit full-screen mode at any time by pressing the Esc key.</p>
    <div class="importantbox clear">
     <aside>
      <a name="//apple_ref/doc/uid/TP40009523-CH3-DontLinkElementID_10" title="Important"></a>
      <p><strong>Important:</strong>&nbsp;The <code>webkitRequestFullscreen()</code> method can be invoked <em>only</em> in response to a user action, such as clicking a button. You cannot invoke <code>webkitRequestFullscreen()</code> in response to a <code>load</code> event, for example.</p>
      <p></p>
     </aside>
    </div>
    <section>
     <a name="//apple_ref/doc/uid/TP40009523-CH3-SW21" title="Full-Screen Event and Properties"></a>
     <h3 class="jump">Full-Screen Event and Properties</h3>
     <p>OS X and iOS behave differently in terms of detecting which HTML elements can be brought full-screen. On iOS, you can take any video full-screen. On OS X, you can take any HTML element full-screen. Although they share the same <code>webkitRequestFullscreen</code> and <code>webkitExitFullscreen</code> methods, the two platforms have different event listeners:</p>
     <ul class="ul">
      <li class="li"><p><strong>OS X:</strong> the <code>webkitfullscreenchange</code> event fires when an element enters or exits full-screen mode.</p></li>
      <li class="li"><p><strong>iOS:</strong> the <code>webkitbeginfullscreen</code> and <code>webkitendfullscreen</code> events fire when a video enters and exits full-screen mode, respectively.</p></li>
     </ul>
     <p>Listen for these events to detect changes in screen presentation. Take a look at the <em><a href="../../../../../samplecode/HTML5VideoEventFlow/Introduction/Intro.html#//apple_ref/doc/uid/DTS40010085" data-renderer-version="1" target="_self">HTML5VideoEventFlow</a></em> sample code project to get an interactive understanding of the order in which these and other video playback events happen.</p>
     <p>The <code>document.webkitFullscreenElement</code> property contains the element that is in full-screen mode. Check if this property is defined to determine if the user is currently in full-screen mode. The <code>document.fullscreenEnabled</code> property detects whether the browser supports the full-screen API, not whether an element is currently full-screen.</p>
    </section>
    <section>
     <a name="//apple_ref/doc/uid/TP40009523-CH3-SW22" title="Resizing Enclosed Video"></a>
     <h3 class="jump">Resizing Enclosed Video</h3>
     <p>When a <code>video</code> element alone is taken into full-screen mode, the video is automatically scaled to fill the screen. When other elements are taken full screen, however, they are not necessarily resized. Instead, normal HTML rules are followed, so a <code>div</code> element and its children retain their height and width. If your video is inside an element that you take full screen, you are responsible for resizing the video when Safari enters and exits full-screen mode.</p>
     <p>An easy way to resize video automatically is to define a full-screen <code>pseudo-class</code> in CSS for the element enclosing the video. With this <code>pseudo-class</code>, you can specify a set of CSS styles that are only applied in full-screen mode. For example, if the ID of the <code>div</code> you are taking full-screen is “video-player” this CSS snippet expands the enclosed video when the <code>div</code> element is in full-screen mode:</p>
     <div class="codesample clear">
      <table>
       <tbody>
        <tr>
         <td scope="row"><pre>#video-player:-webkit-full-screen {<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>    width: 100%;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>}<span></span></pre></td>
        </tr>
       </tbody>
      </table>
     </div>
     <p>A key advantage to using CSS is that it expands the video when its parent is in full-screen mode, then returns the video to its normal size when its parent leaves full-screen mode.</p>
     <p>It can be tricky to expand a video to use the full screen while preserving its aspect ratio. Here are some guidelines:</p>
     <ul class="ul">
      <li class="li"><p>If your video aspect ratio is 16 x 9, setting the width to 100% usually works best without setting the height explicitly—your video is scaled to the correct width, and the height is scaled to preserve the aspect ratio. Most displays are 4 x 3, 16 x 9, or slightly taller, so there is normally enough display height to prevent clipping.</p></li>
      <li class="li"><p>If your video aspect ratio is 4 x 3, setting the width to 75% gives the maximum image size for screens with 16 x 9 aspect ratios, while still using most of a 4 x 3 display. (Setting the width to 100% clips off the top and bottom of the image on widescreen displays.) Alternatively, you can use JavaScript to read the screen height and width, then set the width to 100% on 4 x 3 displays and 75% on wider displays.</p></li>
      <li class="li"><p>If your video is taller than it is wide, setting the height to 100% and leaving the width unset gives you the maximum image size on any landscape display.</p></li>
      <li class="li"><p>If your controls appear under the video, instead of floating on top of the video, reduce the width or height setting by 10% or so to leave room for the controls.</p></li>
     </ul>
    </section>
    <section>
     <a name="//apple_ref/doc/uid/TP40009523-CH3-SW23" title="Full-screen Video with Custom Controls Example"></a>
     <h3 class="jump">Full-screen Video with Custom Controls Example</h3>
     <p>The example in <span class="content_text">Listing 4-9</span> creates a <code>div</code> element enclosing a video and a simple Play/Pause control. Beneath the <code>div</code> element is a full-screen control. When the full-screen control is clicked, the example takes the <code>div</code> element enclosing the video and Play/Pause control into full-screen mode.</p>
     <p>CSS styles are used to expand the <code>div</code> element itself to 100% of the screen width and height, and to expand the enclosed video element to 100% of the <code>div</code> element’s width. Only the video’s width is specified, so that the video scales up while retaining its native aspect ratio. The example also gives the <code>div</code> element a black background when in full-screen mode.</p>
     <p>More elaborate CSS could be used to hide the controls while in full-screen mode and reveal them when the user touches or hovers over the video. For more about styling video controllers using CSS, see <span class="content_text"><a href="../AddingCSSStyles/AddingCSSStyles.html#//apple_ref/doc/uid/TP40009523-CH4-SW1" data-renderer-version="1">Adding CSS Styles</a></span>.</p>
     <a name="//apple_ref/doc/uid/TP40009523-CH3-SW24" title="Listing 4-9Full-screen video with custom controls"></a>
     <p class="codesample clear"><strong class="caption_number">Listing 4-9</strong>&nbsp;&nbsp;Full-screen video with custom controls</p>
     <div class="codesample clear">
      <table>
       <tbody>
        <tr>
         <td scope="row"><pre>&lt;!doctype html&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>&lt;html&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>&lt;head&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>    &lt;title&gt;Full-screen JavaScript Controller&lt;/title&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>    &lt;style&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>        #video-player:-webkit-full-screen {<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>            width: 100%;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>            height: 100%;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>            background-color: black;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>        }<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>        #video-player:-webkit-full-screen video {<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>            width: 100%;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>        }<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>    &lt;/style&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>    &lt;script type="text/javascript"&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>        function playPause() {<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>            var myVideo = document.querySelector('video');<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>            if (myVideo.paused)<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>                myVideo.play();<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>            else<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>                myVideo.pause();<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>         }<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>        function goFullscreen() {<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>            var myPlayer = document.getElementById('video-player');<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>            myPlayer.webkitRequestFullscreen();<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>        }<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>    &lt;/script&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>&lt;/head&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>&lt;body&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>    &lt;div id="video-player"&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>        &lt;video src="myMovie.m4v"&gt;&lt;/video&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>        &lt;p&gt;&lt;a href="javascript:playPause();"&gt;Play/Pause&lt;/a&gt;&lt;/p&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>    &lt;/div&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>    &lt;a href="javascript:goFullscreen();"&gt;Full-screen&lt;/a&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>&lt;/body&gt;<span></span></pre></td>
        </tr>
        <tr>
         <td scope="row"><pre>&lt;/html&gt;<span></span></pre></td>
        </tr>
       </tbody>
      </table>
     </div>
    </section>
   </section> 
   <div id="pageNavigationLinks_bottom" class="pageNavigationLinks"> 
    <a class="nextLink" rel="next" href="../AddingCSSStyles/AddingCSSStyles.html">Next</a>
    <a class="previousLink" rel="prev" href="../PlayingandSynthesizingSounds/PlayingandSynthesizingSounds.html">Previous</a> 
   </div>
   <br> 
   <div class="copyright">
    <br>
    <hr>
    <div align="center">
     <p class="content_text" lang="en" dir="ltr"> Copyright © 2012 Apple Inc. All Rights Reserved. <a href="http://www.apple.com/legal/internet-services/terms/site.html" target="_blank">Terms of Use</a> | <a href="http://www.apple.com/privacy/" target="_blank">Privacy Policy</a> | Updated: 2012-12-13</p>
    </div>
   </div> 
   <div id="pediaWindow"> 
    <div id="pediaHeader"></div> 
    <div id="pediaBody"></div> 
   </div> 
  </article> 
  <div id="blackout"> 
   <div id="preload"></div> 
  </div> 
  <div id="leave_feedback" class="button" role="button" tabindex="0">
   Feedback
  </div> 
  <div id="modal" aria-hidden="true"> 
   <div id="closebox" tabindex="0" aria-label="Close feedback form" role="button"></div> 
   <div id="sending" class="hidden"> 
    <h2 tabindex="0">Sending feedback…</h2> 
    <div id="sending_img"></div> 
   </div> 
   <div id="error" class="hidden"> 
    <h2 tabindex="0">We’re sorry, an error has occurred.</h2> 
    <p>Please try submitting your feedback later.</p> 
    <div id="error_icon"></div> 
   </div> 
   <div id="success" class="hidden"> 
    <h2 tabindex="0">Thank you for providing feedback!</h2> 
    <p>Your input helps improve our developer documentation.</p> 
    <div id="thank_you_icon"></div> 
   </div> 
   <form id="feedback" action="#" method="post"> 
    <div class="left-leaf"> 
     <h2 id="helpful_title" data-asterisk="a1" tabindex="0">How helpful is this document?</h2> 
     <sup id="a1" class="asterisk" aria-hidden="true">*</sup> 
     <div id="star_group" role="radiogroup" aria-required="true"> 
      <label> <input class="radio" type="radio" name="helped" value="1"> Very helpful </label> 
      <label> <input class="radio" type="radio" name="helped" value="2"> Somewhat helpful </label> 
      <label> <input class="radio" type="radio" name="helped" value="3"> Not helpful </label> 
     </div> 
    </div> 
    <div class="right-leaf"> 
     <h2>How can we improve this document?</h2> 
     <div id="improve" class="checkboxes"> 
      <label> <input type="checkbox" name="typo"> Fix typos or links </label> 
      <label> <input type="checkbox" name="infoIncorrect"> Fix incorrect information </label> 
      <label> <input type="checkbox" name="needs_examples"> Add or update code samples </label> 
      <label> <input type="checkbox" name="needs_art"> Add or update illustrations </label> 
      <label> <input type="checkbox" name="missingInfo"> Add information about... </label> 
     </div> 
    </div> 
    <textarea id="comment" name="problem" cols="70" rows="8" placeholder="Please tell us more about your experience with this document" data-asterisk="a2" required></textarea> 
    <sup id="a2" class="asterisk" aria-hidden="true">*</sup> 
    <p class="fineprint"> <em aria-hidden="true"><span>*</span> Required information</em> </p> 
    <input id="submit" type="button" value="Send"> 
    <section id="legal"> 
     <p> To submit a product bug or enhancement request, please visit the <a href="https://developer.apple.com/bugreporter/" target="_blank">Bug Reporter</a> page. </p> 
     <p> Please read <a href="http://www.apple.com/legal/policies/ideas.html" target="_blank">Apple's Unsolicited Idea Submission Policy</a> before you send us your feedback. </p> 
    </section> 
   </form> 
  </div> 
  <script charset="utf-8" src="../../../../../Resources/1272/JavaScript/lib/prototype.js"></script> 
  <script src="../../../../../Resources/1272/JavaScript/library.js"></script> 
  <script src="../../../../../Resources/1272/JavaScript/feedback.js"></script>   
 </body>
</html>