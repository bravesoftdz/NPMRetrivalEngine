<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head> 
  <meta http-equiv="content-type" content="text/html; charset=UTF-8"> 
  <title>Data Structures and Algorithms: Quicksort, Average Time Complexity
  </title> 
  <meta name="generator" content="amaya 9.5, see http://www.w3.org/Amaya/"> 
  <link href="../../stylesheets/slide-screen.css" rel="stylesheet" type="text/css" media="screen"> 
  <link href="../../stylesheets/slide-proj.css" rel="stylesheet" type="text/css" media="projection"> 
  <link href="../../stylesheets/slide-print.css" rel="stylesheet" type="text/css" media="print"> 
  <style type="text/css">
  </style> 
 </head> 
 <body xml:lang="ja" lang="ja"> 
  <h1 style="text-align: center"><strong>Quicksort, Average Time Complexity </strong></h1> 
  <p style="text-align: center">(?????????????)</p> 
  <h2 style="text-align: center">Data Structures and Algorithms</h2> 
  <h3 style="text-align: center">7th lecture, October 29, 2015</h3> 
  <p style="text-align: center"><a href="http://www.sw.it.aoyama.ac.jp/2015/DA/lecture7.html">http://www.sw.it.aoyama.ac.jp/2015/DA/lecture7.html</a></p> 
  <h3 style="text-align: center">Martin J. Dürst</h3> 
  <p class="letterhead"><a href="http://www.aoyama.ac.jp/"><img alt="AGU" src="../../stylesheets/aoyamalogo.jpg"></a></p> 
  <p class="signature">© 2009-15 <a href="mailto:duerst@it.aoyama.ac.jp">Martin J. Dürst</a> <a href="http://www.aoyama.ac.jp/">??????</a></p> 
  <h1>Today's Schedule</h1> 
  <ul> 
   <li>Summary of last lecture</li> 
   <li>About the Manual Sorting report</li> 
   <li>Quicksort:<br> Concept, implementation, optimizations</li> 
   <li>Average time complexity</li> 
   <li>Sorting in C, Ruby, ...</li> 
   <li>Comparing sorting algorithms using animation</li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Summary of Last Lecture</h1> 
  <ul> 
   <li>Sorting is a very important operation for Information Technology</li> 
   <li>Simple sorting algorithms are all <var>O</var>(<var>n</var><sup>2</sup>)</li> 
   <li>Merge (<var>O</var>(<var>n</var> log <var>n</var>)) sort needs double memory</li> 
   <li>Heap sort (<var>O</var>(<var>n</var> log <var>n</var>)) uses lots of comparisons and exchanges</li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Today's Goals</h1> 
  <p>Using quicksort as an example, understand</p> 
  <ul> 
   <li>Move from algorithmic concept to efficient implementation</li> 
   <li>Average time complexity</li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>History of Quicksort</h1> 
  <p>(quicksort)</p> 
  <ul> 
   <li>Invented by C. A. R. Hoare in 1960</li> 
   <li>Researched in great detail</li> 
   <li>Extremely widely used</li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Reviewing Divide and Conquer</h1> 
  <ul> 
   <li>Heap sort: The highest priority item of the overall tree is the highest priority item of the two subtrees</li> 
   <li>Merge sort: Split into equal-length parts, recurse, merge<br> </li> 
   <li>Quicksort: <span class="reveal">Use an arbitrary boundary element to partition the data, recursively</span></li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Basic Workings of Quicksort</h1> 
  <ul> 
   <li>Select one element as the <em>partitioning element</em> (<var>pivot</var>)</li> 
   <li>Exchange elements so that<br> elements smaller than the pivot go to the left, and<br> elements larger than the pivot go to the right</li> 
   <li>Apply quicksort recursively to the data on the left and right sides of the pivot</li> 
  </ul> 
  <p>Ruby pseudocode/implementation: <code>conceptual_quick_sort</code> in <a href="programs/7qsort.rb">7qsort.rb</a> </p> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Quicksort Implementation Details</h1> 
  <ol> 
   <li>Use the rightmost element as the pivot</li> 
   <li>Starting from the right, find an element smaller than the pivot</li> 
   <li>Starting from the left, find an element larger than the pivot</li> 
   <li>Exchange the elements found in steps 2. and 3.</li> 
   <li>Repeat steps 2.-4. until no further exchanges are needed</li> 
   <li>Exchange the pivot with the element in the middle</li> 
   <li>Recurse on both sides</li> 
  </ol> 
  <p>Ruby pseudocode/implementation: <code>simple_quick_sort</code> in <a href="programs/7qsort.rb">7qsort.rb</a> </p> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Worst Case Complexity</h1> 
  <ul> 
   <li>What happens if the largest (or the smallest) element is always choosen as the pivot?</li> 
   <li>The time complexity is Q<sub>w</sub>(<var>n</var>) = <var>n</var> + Q<sub>w</sub>(<var>n</var>-1) = <span class="reveal"><big>?</big><sup><var>n</var></sup><sub><var>i</var>=1</sub> <var>i</var></span><br> ? <span class="reveal"><var>O</var>(<var>n</var><sup>2</sup>)</span></li> 
   <li>This is the <em>worst case complexity</em> (<em>worst case running time</em>) for quick sort</li> 
   <li>This is the same complexity as the simple sorting algorithms</li> 
   <li>This worst case can easily happen if the input is already sorted</li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Best Case Complexity</h1> 
  <ul> 
   <li>Q<sub>B</sub>(<var>n</var>) = <var>n</var> + 1 + 2 Q<sub>B</sub>(<var>n</var>/2)</li> 
   <li>Q<sub>B</sub>(1) = 0</li> 
   <li>Same as merge sort</li> 
   <li>? <span class="reveal"><var>O</var>(<var>n</var> log <var>n</var><sup></sup>)</span></li> 
   <li>Unclear whether this is relevant</li> 
  </ul> 
  <p>For most algorithms, worst case complexity is very important, and best case complexity is mostly irrelevant. But there are exceptions.</p> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Average Complexity</h1> 
  <ul> 
   <li>Assumption: All permutations of the input values have the same probability</li> 
   <li>Q<sub>A</sub>(<var>n</var>) = <var>n</var> + 1 + 1/<var>n</var> <big>?</big><sub>1?<var>k</var>?<var>n</var></sub> (Q<sub>A</sub>(<var>k</var>-1)+Q<sub>A</sub>(<var>n</var>-<var>k</var>))</li> 
   <li>Q<sub>A</sub>(1) = 0</li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Calculating Q<sub>A</sub></h1> 
  <p>Q<sub>A</sub>(<var>n</var>) = <var>n</var> + 1 + 1/<var>n</var> <big>?</big><sub>1?<var>k</var>?<var>n</var></sub> (Q<sub>A</sub>(<var>k</var>-1)+Q<sub>A</sub>(<var>n</var>-<var>k</var>))</p> 
  <p>Q<sub>A</sub>(0) + ... + Q<sub>A</sub>(<var>n</var>-2) + Q<sub>A</sub>(<var>n</var>-1) =<br> = Q<sub>A</sub>(<var>n</var>-1) + Q<sub>A</sub>(<var>n</var>-2) + ... + Q<sub>A</sub>(0)</p> 
  <p>Q<sub>A</sub>(<var>n</var>) = <var>n</var> + 1 + 2/<var>n</var> <big>?</big><sub>1?<var>k</var>?<var>n</var></sub> Q<sub>A</sub>(<var>k</var>-1)</p> 
  <p><var>n</var> Q<sub>A</sub>(<var>n</var>) = <var>n</var> (<var>n</var> + 1) + 2<var></var> <big>?</big><sub>1?<var>k</var>?<var>n</var></sub> Q<sub>A</sub>(<var>k</var>-1)</p> 
  <p>(<var>n</var>-1) Q<sub>A</sub>(<var>n</var>-1) = (<var>n</var>-1) <var>n</var> + 2<var></var> <big>?</big><sub>1?<var>k</var>?<var>n</var>-1</sub> Q<sub>A</sub>(<var>k</var>-1)</p> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Calculating Q<sub>A</sub> (continued)</h1> 
  <p><var>n</var> Q<sub>A</sub>(<var>n</var>) - (<var>n</var>-1) Q<sub>A</sub>(<var>n</var>-1) = <var>n</var> (<var>n</var>+1) - (<var>n</var>-1) <var>n</var> + 2 Q<sub>A</sub>(<var>n</var>-1)</p> 
  <p><var>n</var> Q<sub>A</sub>(<var>n</var>) = (<var>n</var>+1) Q<sub>A</sub>(<var>n</var>-1) + 2<var>n</var></p> 
  <p><var></var>Q<sub>A</sub>(<var>n</var>)/(<var>n</var>+1) =<br> = Q<sub>A</sub>(<var>n</var>-1)/<var>n</var> + 2/(<var><var>n</var></var> + 1) =<br> = Q<sub>A</sub>(<var>n</var>-2)/(<var>n</var>-1) + 2/<var>n</var> + 2<var>/</var>(<var><var>n</var></var>+1) =<br> = Q<sub>A</sub>(2)/3 + <big>?</big><sub>3?<var>k</var>?<var>n</var></sub> 2/(<var>k</var>+1) </p> 
  <p>Q<sub>A</sub>(<var>n</var>)/(<var>n</var>+1) ? 2 <big>?</big><sub>1?<var>k</var>?<var>n</var></sub> 2/<var>k</var> ? 2?<sub>1</sub><var><bdo dir="ltr"><sup>n</sup></bdo></var> 1/<var>x</var> <var>dx</var> = 2 ln <var>n</var></p> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Result of Calculating Q<sub>A</sub></h1> 
  <p>Q<sub>A</sub>(<var>n</var>) ? 2<var>n</var> ln <var>n</var> ? 1.39 <var>n</var> log<sub>2</sub> <var>n</var></p> 
  <p>? <var>O</var>(<var>n</var> log <var>n</var><sup></sup>)</p> 
  <p>? The number of comparisons on average is ~1.39 times the optimal number of comparisons in an optimal decision tree</p> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Complexity of Sorting</h1> 
  <p>Question: What is the complexity of sorting (as a problem)?</p> 
  <ul> 
   <li>Most sorting algorithms are <span class="reveal"><var>O</var>(<var>n</var> log <var>n</var>)</span> (except for simple sorting algorithms)</li> 
   <li>The basic operations for sorting are comparison and movement</li> 
   <li>For <var>n</var> data items, the number of different sorting orders (permutations) is <span class="reveal"><var>n</var>!</span></li> 
   <li>With each comparision, in the best case, we can reduce the number of sorting orders to half</li> 
   <li>The mimimum number of comparisions necessary for sorting is <span class="reveal">log (<var>n</var>!) ? O(<var>n</var> log <var><bdo dir="ltr">n</bdo></var>)</span></li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Pivot Selection</h1> 
  <ul> 
   <li>The efficiency of quick sort strongly depends on the selection of the pivot</li> 
   <li>Some solutions: 
    <ul> 
     <li>Select the pivot using a random number<br> (this is an example of a <em>randomized algorithm</em>)</li> 
     <li>Use the median of three values</li> 
    </ul> </li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Implementation Improvements</h1> 
  <ul> 
   <li>Comparison of indices<br> ? Use a sentinel to remove one comparision<br> </li> 
   <li>Stack overflow for deep recursion<br> ? When splitting into two, use recursion for the smaller part, and tail recursion or a loop for the larger part</li> 
   <li>Low efficiency of quicksort for short arrays/parts<br> ? For parts smaller than a given size, change to a simple sort algorithm<br> ? With insertion sort, it is possible to do this in one go at the very end<br> (this need care when testing)<br> ? Quicksort gets about 10% faster if change is made at an array size of about 10</li> 
   <li>Double keys<br> ? Split in three rather than two</li> 
  </ul> 
  <p>Ruby pseudocode/implementation (excluding split in three): <code>quick_sort</code> in <a href="programs/7qsort.rb">7qsort.rb</a> </p> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Comparing Sorting Algorithms using Animation</h1> 
  <ul> 
   <li>Uses Web technology: <a href="http://www.w3.org/Graphics/SVG/">SVG</a> (2D vector graphics) and JavaScript </li> 
   <li>Uses special library (<a href="http://www.neilmix.com/narrativejs/doc/">Narrative JavaScript</a>) for timing adjustments</li> 
   <li><span style="background-color:#ffff00">Comparisons are shown in yellow</span> (except for insertion sort)?<span style="background-color:#0000ff"><span style="color:#ffffff">exchanges in blue</span></span></li> 
  </ul> 
  <p>Watch animation: <a href="animations/sort.svg">sort.svg</a></p> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Stable Sorting</h1> 
  <ul> 
   <li>Definition: A sorting algorithm is <var>stable</var> if it retains the original order for two data items with the same key value</li> 
   <li>Used for sorting with multiple criteria (e.g. sort by year and prefecture):<br> 
    <ul> 
     <li>First, sort using the lower priority criterion (e.g. prefecture)</li> 
     <li>Then, sort using the higher priority criterion (e.g. year)</li> 
    </ul> </li> 
   <li>The simple sorting algorithms and merge sort can easily be made stable</li> 
   <li>Heap sort and quicksort are not stable<br> ? Solution 1: Sort multiple criteria together<br> ? Solution 2: Use the original position as a lower priority criterion</li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Sorting in C and Ruby</h1> 
  <ul> 
   <li>Sorting is provided as a library function or method</li> 
   <li>Implementation is often based on quicksort</li> 
   <li>Comparison of data items depends on type of data and purpose of sorting<br> ? Use comparison function as a function argument</li> 
   <li>If comparison is slow<br> ? Precompute a value that can be used for sorting</li> 
   <li>If exchange of data items is slow (e.g. very large data items)<br> ? Sort/exchange references (pointers) only</li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>C's <code>qsort</code> Function</h1> 
  <pre>void qsort(
    void *base,        // ???????
    size_t nel,        // ??????
    size_t width,      // ??????
    int (*compar)(     // ????
        const void *,
        const void *)
  );</pre> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Ruby's <code>Array#sort</code></h1> 
  <p>(<code>Klass#method</code> denotes instance method <code>method</code> of class <code>Klass</code>)</p> 
  <p><code>array.sort</code> uses <code>&lt;=&gt;</code> for comparison</p> 
  <p><code>array.sort { |a, b| a.length &lt;=&gt; b.length }</code><br> This example sorts (e.g. strings) by length</p> 
  <p>The code block (between <code>{</code> and <code>}</code>) is used as a comparison function<br> </p> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Ruby's <code>&lt;=&gt;</code> Operator</h1> 
  <p>(also called spaceship operator)</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <td>Relationship between <code>a</code> and <code>b</code></td> 
     <td>return value of <code>a &lt;=&gt; b</code></td> 
    </tr> 
    <tr> 
     <td><code>a &lt; b</code></td> 
     <td><code>-1</code> (or other integer smaller than 0)</td> 
    </tr> 
    <tr> 
     <td><code>a = b</code></td> 
     <td><code>0</code></td> 
    </tr> 
    <tr> 
     <td><code>a &gt; b</code></td> 
     <td><code>+1</code> (or other integer greater than 0)</td> 
    </tr> 
   </tbody> 
  </table> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Ruby's <code>Array#sort_by</code></h1> 
  <p><code>array.sort_by { |str| str.length }</code></p> 
  <p></p> 
  <p>(sorting strings by length)</p> 
  <p><code>array.sort_by { |stu| [stu.year, stu.prefecture] }</code><code></code></p> 
  <p>(sorting students by year and prefecture</p> 
  <p>This calculates the values for the sort criterion for each array element in advance</p> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Summary</h1> 
  <ul> 
   <li>Quicksort is another application of divide and conquer</li> 
   <li>Quicksort is a very famous algorithm, and a good example to learn about algorithms and their implementation</li> 
   <li>Quicksort has been carefully researched and widely implemented and used</li> 
   <li>Quicksort is a classical example of the importance of average time complexity</li> 
   <li>Quicksort is our first example of a randomized algorithm</li> 
   <li>Sorting based on pairwise comparison is <var>?</var>(<var>n</var> log <var>n</var>)</li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Preparation for Next Time</h1> 
  <ul> 
   <li>Think about inputs for which <code>conceptual_quick_sort</code> will fail</li> 
   <li>Watch the animations carefully (&gt;20 times) to deepen your understanding of sorting algorithms</li> 
   <li>Complete and submit the report "Manual Sorting"<br> Deadline: November 4th, 2015 (Wednesday), 19:00</li> 
  </ul> 
  <p class="slidesonly">&nbsp;</p> 
  <h1>Glossary</h1> 
  <dl class="glossary"> 
   <dt>
    quicksort
   </dt> 
   <dd>
    ???????
   </dd> 
   <dt>
    partition
   </dt> 
   <dd>
    ??
   </dd> 
   <dt>
    partitioning element (pivot)
   </dt> 
   <dd>
    ????
   </dd> 
   <dt>
    worst case complexity (running time)
   </dt> 
   <dd>
    ???????
   </dd> 
   <dt>
    best case complexity (running time)
   </dt> 
   <dd>
    ???????
   </dd> 
   <dt>
    average complexity (running time)
   </dt> 
   <dd>
    ?????
   </dd> 
   <dt>
    randomized algorithm
   </dt> 
   <dd>
    ???????????
   </dd> 
   <dt>
    median
   </dt> 
   <dd>
    ???
   </dd> 
   <dt>
    decision tree
   </dt> 
   <dd>
    ???
   </dd> 
   <dt>
    tail recursion
   </dt> 
   <dd>
    ????
   </dd> 
   <dt>
    in one go
   </dt> 
   <dd>
    ??
   </dd> 
   <dt>
    stable sorting
   </dt> 
   <dd>
    ??????
   </dd> 
   <dt>
    criterion (plural criteria)
   </dt> 
   <dd>
    ??
   </dd> 
   <dt>
    block
   </dt> 
   <dd>
    ????
   </dd> 
  </dl> 
  <p></p> 
  <p></p>   
 </body>
</html>