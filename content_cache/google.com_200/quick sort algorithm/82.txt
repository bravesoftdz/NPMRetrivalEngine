<!doctype html>
<html lang="en">
 <head> 
  <meta http-equiv="Content-Type" content="text/html" charset="UTF-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"> 
  <title>5 Programming Languages You Should Really Try</title> 
  <meta name="description" content=""> 
  <link rel="shortcut icon" href="/content/images/2016/06/13221534_10209271837456044_4633724591854619815_n--1-.jpg"> 
  <link href="//fonts.googleapis.com/css?family=Open+Sans:300italic,700italic,300,700" rel="stylesheet" type="text/css"> 
  <link href="//fonts.googleapis.com/css?family=Bree+Serif" rel="stylesheet" type="text/css"> 
  <link href="//netdna.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.css" rel="stylesheet"> 
  <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/default.min.css"> 
  <link rel="stylesheet" type="text/css" href="/assets/styles/crisp.css?v=e0f1d569c9"> 
  <meta name="HandheldFriendly" content="True"> 
  <meta name="MobileOptimized" content="320"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries --> 
  <!--[if lt IE 9]>
				<script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
				<script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
			<![endif]--> 
  <link rel="stylesheet" type="text/css" href="/assets/styles/rrssb.css?v=e0f1d569c9"> 
  <meta property="og:title" content="5 Programming Languages You Should Really Try"> 
  <meta property="og:type" content="article"> 
  <meta property="og:description" content="For some strange reason, the vast majority of my blog readers are Python Developers. I wrote two articles on Python a long time ago and honestly try to avoid python when I can. So here's an article for you purveyors of Python -- you sultans of snakes. Note: This article..."> 
  <link rel="canonical" href="http://www.bradcypert.com/5-programming-languages-you-could-learn-from/"> 
  <meta name="referrer" content="no-referrer-when-downgrade"> 
  <link rel="amphtml" href="http://www.bradcypert.com/5-programming-languages-you-could-learn-from/amp/"> 
  <meta property="og:site_name" content="Brad Cypert"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="5 Programming Languages You Should Really Try"> 
  <meta property="og:description" content="For some strange reason, the vast majority of my blog readers are Python Developers. I wrote two articles on Python a long time ago and honestly try to avoid python when I can. So here's an article for you purveyors of Python -- you sultans of snakes. Note: This article"> 
  <meta property="og:url" content="http://www.bradcypert.com/5-programming-languages-you-could-learn-from/"> 
  <meta property="article:published_time" content="2017-06-28T08:22:03.000Z"> 
  <meta property="article:modified_time" content="2017-06-28T18:57:25.000Z"> 
  <meta property="article:tag" content="meta"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:title" content="5 Programming Languages You Should Really Try"> 
  <meta name="twitter:description" content="For some strange reason, the vast majority of my blog readers are Python Developers. I wrote two articles on Python a long time ago and honestly try to avoid python when I can. So here's an article for you purveyors of Python -- you sultans of snakes. Note: This article"> 
  <meta name="twitter:url" content="http://www.bradcypert.com/5-programming-languages-you-could-learn-from/"> 
  <meta name="twitter:label1" content="Written by"> 
  <meta name="twitter:data1" content="Brad Cypert"> 
  <meta name="twitter:label2" content="Filed under"> 
  <meta name="twitter:data2" content="meta"> 
  <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "Brad Cypert",
        "logo": "http://www.bradcypert.com/content/images/2016/06/13221534_10209271837456044_4633724591854619815_n--1-.jpg"
    },
    "author": {
        "@type": "Person",
        "name": "Brad Cypert",
        "image": {
            "@type": "ImageObject",
            "url": "//www.gravatar.com/avatar/3a7d3836857d5e9e8c324c7e414983a5?d=404&s=250",
            "width": 250,
            "height": 250
        },
        "url": "http://www.bradcypert.com/author/bradcypert/",
        "sameAs": [],
        "description": "Coding since age 13, I&#x27;ve spent much of my time writing and learning Python. I also consider myself to be very fluent with CSS. When I&#x27;m not coding, I&#x27;m playing table-top games or out for a hike."
    },
    "headline": "5 Programming Languages You Should Really Try",
    "url": "http://www.bradcypert.com/5-programming-languages-you-could-learn-from/",
    "datePublished": "2017-06-28T08:22:03.000Z",
    "dateModified": "2017-06-28T18:57:25.000Z",
    "keywords": "meta",
    "description": "For some strange reason, the vast majority of my blog readers are Python Developers. I wrote two articles on Python a long time ago and honestly try to avoid python when I can. So here&#x27;s an article for you purveyors of Python -- you sultans of snakes. Note: This article",
    "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": "http://www.bradcypert.com"
    }
}
    </script> 
  <meta name="generator" content="Ghost 0.11"> 
  <link rel="alternate" type="application/rss+xml" title="Brad Cypert" href="http://www.bradcypert.com/rss/"> 
  <style>
    span.token.function {
    	color: wheat !important;
	}
    
    code.language-java {
        color:#333;
    }
</style> 
 </head> 
 <body class="post-template tag-meta"> 
  <header id="header"> 
   <a id="logo" href="http://www.bradcypert.com"><img src="/content/images/2016/06/13221534_10209271837456044_4633724591854619815_n--1-.jpg" alt="Brad Cypert"></a> 
   <h1><a href="http://www.bradcypert.com">Brad Cypert</a></h1> 
   <p>I write about the JVM, Javascript, and Front-End Development</p> 
   <div id="follow-icons"> 
    <a href="http://facebook.com/bscypert"><i class="fa fa-facebook-square fa-2x"></i></a> 
    <a href="http://twitter.com/bradcypert"><i class="fa fa-twitter-square fa-2x"></i></a> 
    <a href="http://linkedin.com/in/bradcypert"><i class="fa fa-linkedin-square fa-2x"></i></a> 
    <a href="http://github.com/bradcypert"><i class="fa fa-github-square fa-2x"></i></a> 
    <a href="mailto:brad.cypert@gmail.com"><i class="fa fa-envelope-square fa-2x"></i></a> 
    <a href="http://www.bradcypert.com/rss"><i class="fa fa-rss-square fa-2x"></i></a> 
   </div> 
   <!--
<a href="http://plus.google.com/+username"><i class="fa fa-google-plus-square fa-2x"></i></a>
<a href="http://instagram.com/username"><i class="fa fa-instagram fa-2x"></i></a>
<a href="http://vimeo.com/username"><i class="fa fa-vimeo-square fa-2x"></i></a>
<a href="http://youtube.com/username"><i class="fa fa-youtube-square fa-2x"></i></a>
<a href="http://flickr.com/username"><i class="fa fa-flickr fa-2x"></i></a>
<a href="http://pinterest.com/username"><i class="fa fa-pinterest-square fa-2x"></i></a>
<a href="http://username.tumblr.com"><i class="fa fa-tumblr-square fa-2x"></i></a>
--> 
   <h6><a href="http://www.bradcypert.com/">Home</a></h6> 
   <h6><a href="http://www.bradcypert.com/about/">About</a></h6> 
   <h6><a href="http://www.bradcypert.com/resume/">Resume</a></h6> 
  </header> 
  <main id="content"> 
   <article id="48" class="post tag-meta"> 
    <div class="post-stamp">
     June 28, 2017
     <span class="taglist"> · <a href="/tag/meta/">meta</a></span>
    </div> 
    <h1 class="post-title">5 Programming Languages You Should Really Try</h1> 
    <p>For some strange reason, the vast majority of my blog readers are Python Developers. I wrote two articles on Python a long time ago and honestly try to avoid python when I can. So here's an article for you purveyors of Python -- you sultans of snakes.</p> 
    <p><strong>Note: This article is still likely relevant even if you're not a Pythonista</strong>.</p> 
    <p>For those who aren't aware, Linguistics and Grammars are particularly interesting to me. I really, really enjoy looking into new languages and comparing them to what I already know. Originally, this started as a purely syntactic thing, but as I learned more about compilers, virtual machines, and performance I started to compare those as well. We'll cover a little bit of everything in this post as I suggest a few great languages that you've probably not tried yet. I'll count down in terms of favorites:</p> 
    <h4 id="5nim">5. Nim</h4> 
    <blockquote> 
     <p>Efficient and expressive programming. Nim is a systems and applications programming language. Statically typed and compiled, it provides unparalleled performance in an elegant package.</p> 
    </blockquote> 
    <p><a href="https://nim-lang.org/">Nim</a> is a language near and dear to my heart, although I'll be honest and admit that I haven't had as much time with it as I wish. The little I have toyed with the language was a delightful experience. Nim is interesting as it compiles down to C, C++, or JavaScript. This allows you to tackle systems programming in Nim with (almost) the gusto that you'd expect in C or C++. Nim also takes a page from Clojure's book in that it allows you to compile to JavaScript. The build process for Nim is what any systems developer would expect. It's compiled, so you produce a nice portable (dependency-free) binary. Just target your build and run!</p> 
    <p>Nim is also high extensible via templates and macros. These are processed as compiler time transformations. That's pretty cool, but what if I told you the compiler was extensible too? Well great news, in nim, it is!</p> 
    <p><strong>Python Developers</strong>: Nim takes a ton of concepts from Python's book. Specifically several of the constructs in Nim's standard library are pretty Pythonic. </p> 
    <p><strong>C, C++, Java Developers</strong>: Nim should syntactically look comfortable, but one interesting benefit you'll get with Nim is a configurable garbage collector. You can choose to use a deferring garbage collector or something real-time and deterministic. Pretty neat!</p> 
    <p>To give you some syntax to compare, here's quicksort in Nim, courtesy of Rosetta Code:</p> 
    <pre><code>proc quickSort[T](a: var openarray[T], inl = 0, inr = -1) =  
  var r = if inr &gt;= 0: inr else: a.high
  var l = inl
  let n = r - l + 1
  if n &lt; 2: return
  let p = a[l + 3 * n div 4]
  while l &lt;= r:
    if a[l] &lt; p:
      inc l
      continue
    if a[r] &gt; p:
      dec r
      continue
    if l &lt;= r:
      swap a[l], a[r]
      inc l
      dec r
  quickSort(a, inl, r)
  quickSort(a, l, inr)

var a = @[4, 65, 2, -31, 0, 99, 2, 83, 782]  
quickSort a  
echo a  
</code></pre> 
    <h4 id="4go">4. Go</h4> 
    <blockquote> 
     <p>Go is an open source programming language that makes it easy to build simple, reliable, and efficient software.</p> 
    </blockquote> 
    <p><a href="https://golang.org/">Google's Go</a> is an interesting language. In fact, Python used to be what I would recommend to people getting into development, but I think I'm at the point that I would recommend go instead now. For those unaware, Go has been around since 2007 although it has only recently caught fire with it's popularity and wasn't announce by Google until 2009. I really like how simple and straightforward Go is. It's easy to accomplish a lot in a relatively small amount of time -- one of my initial selling points on Python many years ago. The build process for Go is similar to Nim's. You get a nice portable binary and can run with that!</p> 
    <p>Async in go is simplified into the concept of channels which are a breeze to work with. You'll see these in async code alongside of goroutines which simplify the concept of multithreading.</p> 
    <p><strong>Python Developers</strong>: Go clearly emanates from C, but with an interesting twist focused on brevity, simplicity and safety. Similarly to Python's "Batteries Included" go ships with a really great package manager to help you get started as quickly as possible.</p> 
    <p><strong>C, C++, Java Developers</strong>: Syntactically, Go is really similar to this suite of languages. Go is (almost certainly) going to be slightly less performant than C, but still very fast. Another great selling point for Go is it's focus on types and interfaces (if you're not using interfaces you really should be).</p> 
    <p>To give you some syntax to compare, here's quicksort in Go, courtesy of Rosetta Code:</p> 
    <pre><code>package main

import "fmt"

func main() {  
    list := []int{31, 41, 59, 26, 53, 58, 97, 93, 23, 84}
    fmt.Println("unsorted:", list)

    quicksort(list)
    fmt.Println("sorted!  ", list)
}

func quicksort(a []int) {  
    var pex func(int, int)
    pex = func(lower, upper int) {
        for {
            switch upper - lower {
            case -1, 0: // 0 or 1 item in segment.  nothing to do here!
                return
            case 1: // 2 items in segment
                // &lt; operator respects strict weak order
                if a[upper] &lt; a[lower] {
                    // a quick exchange and we're done.
                    a[upper], a[lower] = a[lower], a[upper]
                }
                return
            // Hoare suggests optimized sort-3 or sort-4 algorithms here,
            // but does not provide an algorithm.
            }

            // Hoare stresses picking a bound in a way to avoid worst case
            // behavior, but offers no suggestions other than picking a
            // random element.  A function call to get a random number is
            // relatively expensive, so the method used here is to simply
            // choose the middle element.  This at least avoids worst case
            // behavior for the obvious common case of an already sorted list.
            bx := (upper + lower) / 2
            b := a[bx]  // b = Hoare's "bound" (aka "pivot")
            lp := lower // lp = Hoare's "lower pointer"
            up := upper // up = Hoare's "upper pointer"
        outer:
            for {
                // use &lt; operator to respect strict weak order
                for lp &lt; upper &amp;&amp; !(b &lt; a[lp]) {
                    lp++
                }
                for {
                    if lp &gt; up {
                        // "pointers crossed!"
                        break outer
                    }
                    // &lt; operator for strict weak order
                    if a[up] &lt; b {
                        break // inner
                    }
                    up--
                }
                // exchange
                a[lp], a[up] = a[up], a[lp]
                lp++
                up--
            }
            // segment boundary is between up and lp, but lp-up might be
            // 1 or 2, so just call segment boundary between lp-1 and lp.
            if bx &lt; lp {
                // bound was in lower segment
                if bx &lt; lp-1 {
                    // exchange bx with lp-1
                    a[bx], a[lp-1] = a[lp-1], b
                }
                up = lp - 2
            } else {
                // bound was in upper segment
                if bx &gt; lp {
                    // exchange
                    a[bx], a[lp] = a[lp], b
                }
                up = lp - 1
                lp++
            }
            // "postpone the larger of the two segments" = recurse on
            // the smaller segment, then iterate on the remaining one.
            if up-lower &lt; upper-lp {
                pex(lower, up)
                lower = lp
            } else {
                pex(lp, upper)
                upper = up
            }
        }
    }
    pex(0, len(a)-1)
}
</code></pre> 
    <h4 id="3f">3. F#</h4> 
    <blockquote> 
     <p>F# is a mature, open source, cross-platform, functional-first programming language. It empowers users and organizations to tackle complex computing problems with simple, maintainable and robust code.</p> 
    </blockquote> 
    <p>Let's get into my favorite territory - functional programming languages. Have you had the chance to check out <a href="http://fsharp.org/">F#</a> yet? No? Well you're missing out on a lot. Let's clear the air about the negatives - It was created as a Microsoft language. You're going to get the most from the language if you can leverage the .NET framework. You don't HAVE to do this, however, and can build F# against Mono, too.</p> 
    <p>I was first exposed to Metalanguages in college and they <del>blew my mind</del> really frustrated me. During the final weeks of my course on Functional Programming (with PolyML), it all kind of clicked and I really started to dig the language family. That being said, after doing a little bit of research, I felt that Metalanguage's like PolyML and F# (wasn't aware of F# at the time) just weren't practical. Later in my life I found F# and fell in love. If I ever end up working in a .NET shop, you can bet your ass I'm working with F#.</p> 
    <p>The language is syntactically extremely different from everything you've seen above. Functional languages often take a very declarative approach on problem solving and leverage recursion and pattern matching to make the most of their toolkit. F# is no exception to this paradigm.</p> 
    <p><strong>.NET Developers</strong>: A functional approach on your standard toolkit. If you want to try F# and need help introducing it to your team consider building a CLI with the language. It's an excellent tool for this and really showcases its strengths.</p> 
    <p><strong>Python Developers</strong>: Python is an outstanding tool for writing CLIs. F#, too, is an outstanding tool for writing CLIs. The language feels like a strong scripting language but provides so much more. In fact, tools like Pattern Matching make writing a CLI tool such an ease!</p> 
    <p><strong>C, C++, Java Developers</strong>: Take a walk on the wild side. In my opinion, the biggest growth moment in my career as an engineer was the day I committed to learning functional programming. I still write Java a lot but you can see functional influence in a lot of ways. F# provides a great opportunity to help teach you these functional programming skills that can be applied in any language. It will also make you want to file an RFC for pattern matching in Java. </p> 
    <p>To give you some syntax to compare, here's quicksort in F#, courtesy of Rosetta Code:</p> 
    <p>Some things to keep in mind - <code>rec</code> defines a function as recursive so that the function has access to a binding of itself. The line under the function definition is a base-case pattern matcher against an empty list. The one below that matches on a list with a head element and a tail. </p> 
    <pre><code>let rec qsort = function  
    [] -&gt; []
    | hd :: tl -&gt;
        let less, greater = List.partition ((&gt;=) hd) tl
        List.concat [qsort less; [hd]; qsort greater]
</code></pre> 
    <h4 id="2rust">2. Rust</h4> 
    <blockquote> 
     <p>Rust is a systems programming language that runs blazingly fast, prevents segfaults, and guarantees thread safety. </p> 
    </blockquote> 
    <p>Above is a quote from the <a href="https://www.rust-lang.org/en-US/">Rust website</a>. I couldn't give a better quick summary of this language if I tried. Rust is fantastic. I first got into Rust with hardware hacking on the Arduino and just fell in love with the language. Rust focuses on the things that I love about Clojure but provides them in a systems language. The language itself focuses on immutability and thread-safety. The community is wonderful, supportive, and very responsive and open to feedback. </p> 
    <p>The difficult and sometimes discouraging part of writing Rust is "fighting" the compiler. The reason that the compiler seems so aggressive is because it's helping you prevent issues and write safe code. Mainly, new Rustaceans fight the borrow checker as the idea of borrowing is usually a very new concept. For those who are unaware, the way Rust maintains its ability to stay threadsafe is by "borrowing" references from one scope into another. This can be really difficult at first but once you learn how borrowing works (as well as the object lifecycle) Rust becomes a delightful experience. Plus, it runs blazingly fast!</p> 
    <p><strong>Python Developers</strong>: If you want a new experience that will focus on teaching you the values of immutability and the merits of a compiler (you may already know these things), look no further. The community is one of the few communities that I feel is better (that's right, better) than the Python community. If you've ever wanted to get into systems programming but have had fear of SegFaults or memory management, try Rust.</p> 
    <p><strong>C, C++, Java Developers:</strong> Another language in a style that should be syntactically familiar to you, but Rust is a completely different paradigm on memory management. The Lifecycles cause heap values to drop once they leave scope which helps maintain a manageable set of memory addresses. Rust also supports the <code>unsafe</code> keyword, should you feel the need to get down and dirty with C like code, however writing <code>unsafe</code> always makes me feel guilty and usually leads to refactoring.</p> 
    <p>To give you some syntax to compare, here's quicksort in Rust, courtesy of Rosetta Code:</p> 
    <pre><code>fn main() {  
    println!("Sort numbers in descending order");
    let mut numbers = [4, 65, 2, -31, 0, 99, 2, 83, 782, 1];
    println!("Before: {:?}", numbers);

    quick_sort(&amp;mut numbers, &amp;|x,y| x &gt; y);
    println!("After:  {:?}\n", numbers);

    println!("Sort strings alphabetically");
    let mut strings = ["beach", "hotel", "airplane", "car", "house", "art"];
    println!("Before: {:?}", strings);

    quick_sort(&amp;mut strings, &amp;|x,y| x &lt; y);
    println!("After:  {:?}\n", strings);

    println!("Sort strings by length");
    println!("Before: {:?}", strings);

    quick_sort(&amp;mut strings, &amp;|x,y| x.len() &lt; y.len());
    println!("After:  {:?}", strings);    
}

fn quick_sort&lt;T,F&gt;(v: &amp;mut [T], f: &amp;F)  
    where F: Fn(&amp;T,&amp;T) -&gt; bool
{
    let len = v.len();
    if len &gt;= 2 {
        let pivot_index = partition(v, f);
        quick_sort(&amp;mut v[0..pivot_index], f);
        quick_sort(&amp;mut v[pivot_index + 1..len], f);
    }
}

fn partition&lt;T,F&gt;(v: &amp;mut [T], f: &amp;F) -&gt; usize  
    where F: Fn(&amp;T,&amp;T) -&gt; bool
{
    let len = v.len();
    let pivot_index = len / 2;

    v.swap(pivot_index, len - 1);

    let mut store_index = 0;
    for i in 0..len - 1 {
        if f(&amp;v[i], &amp;v[len - 1]) {
            v.swap(i, store_index);
            store_index += 1;
        }
    }

    v.swap(store_index, len - 1);
    store_index
}
</code></pre> 
    <h4 id="1clojure">1. Clojure</h4> 
    <blockquote> 
     <p>Clojure is a robust, practical, and fast programming language with a set of useful features that together form a simple, coherent, and powerful tool.</p> 
    </blockquote> 
    <p>If you didn't see this coming, then thanks for checking out my blog for the first time! <a href="https://clojure.org/">Clojure</a> is a Lisp that (often) runs on the JVM. It's a symbiotic language which means that I can be ran anywhere that it has a host for. In fact, another common use-case for Clojure is compiliation down to JavaScript, called ClojureScript. If you're in the web development community, you've probably heard of ClojureScript as it's really caught on in regards to it's popularity lately thanks to Om and Om Next. </p> 
    <p>Clojure is the brainchild of the wizard known as Rich Hickey. The community as a whole provides a refreshing perspective on software development and having Rich at the helm is nothing to discount. There's a database written with Clojure in mind (Datomic) and the tooling for the language is fantastic.</p> 
    <p>The structure of lisp and the paradigms behind it are nothing short of liberating. When functions dictate your code everything becomes easier to reason with. In fact, it allows you to easily write and reason about macros and I've struggled with these concepts historically in other languages that support them.</p> 
    <p>Speaking of tools, on the JVM, you can leverage any and all Java libraries in your Clojure code. This interoperability gives Clojure a massive collection of libraries despite the community being smaller than the Java community. A downside of Clojure is that it's limitation is often the same that confines the JVM (no tail call recursion), but Clojure makes a strong effort to abstract these concerns or provide alternatives. </p> 
    <p>In my opinion, Clojure is a tool that can be used for almost any job and I love the idea of that. There's even a library for writing Android applications in Clojure (and a pretty notable app called Swiftkey written in Clojure) and a ton of libraries for graphics processing.</p> 
    <p>I'll try to avoid ranting for hours about clojure, but if you're interested in learning more about it, you can find my articles on the language <a href="http://www.bradcypert.com/tag/clojure/">here</a>.</p> 
    <p><strong>Python Developers</strong>: If you're one of the python developers that keep coming back to my blog for some reason, you'll see most of my new articles are in Clojure. I am so very happy to teach you or work with you to help you learn about this language. As for everyone else, Clojure gives you an exciting approach on new paradigms in programming that you won't ever find in Python.</p> 
    <p><strong>C, C++ Developers</strong>: Clojure probably won't be much of a help if you're looking for systems development, however, if you've never touched Lisp you can learn a ton from writing the language. And if you've never written Lisp, I can't recommend a better Lisp than Clojure. C and C++ developers will likely love the power behind Macros so be sure to give that a shot!</p> 
    <p><strong>Java Developers</strong>: You can try Clojure without ever leaving your JVM. Clojure is catching on quickly in the financial tech industry and makes for excellent DSLs that interop with Java in an immaculate fashion. </p> 
    <p>To give you some syntax to compare, here's quicksort in Clojure, courtesy of Rosetta Code: </p> 
    <pre><code>(defn qsort [[pivot :as coll]]
  (when pivot
    (lazy-cat (qsort (filter #(&lt; % pivot) coll))
              (filter #{pivot} coll)
              (qsort (filter #(&gt; % pivot) coll)))))
</code></pre> 
    <div id="social-bar"> 
     <ul class="rrssb-buttons clearfix"> 
      <li class="email"> <a href="mailto:?subject=5%20Programming%20Languages%20You%20Should%20Really%20Try&amp;body=http://www.bradcypert.com/5-programming-languages-you-could-learn-from/"> <span class="icon"> 
         <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewbox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"> 
          <path transform="scale(0.014,-0.014) translate(0,-1670)" d="M1792 826v-794q0 -66 -47 -113t-113 -47h-1472q-66 0 -113 47t-47 113v794q44 -49 101 -87q362 -246 497 -345q57 -42 92.5 -65.5t94.5 -48t110 -24.5h1h1q51 0 110 24.5t94.5 48t92.5 65.5q170 123 498 345q57 39 100 87zM1792 1120q0 -79 -49 -151t-122 -123 q-376 -261 -468 -325q-10 -7 -42.5 -30.5t-54 -38t-52 -32.5t-57.5 -27t-50 -9h-1h-1q-23 0 -50 9t-57.5 27t-52 32.5t-54 38t-42.5 30.5q-91 64 -262 182.5t-205 142.5q-62 42 -117 115.5t-55 136.5q0 78 41.5 130t118.5 52h1472q65 0 112.5 -47t47.5 -113z" /> 
         </svg> </span> <span class="text">Email</span> </a> </li> 
      <li class="facebook"> <a href="https://www.facebook.com/sharer/sharer.php?u=http://www.bradcypert.com/5-programming-languages-you-could-learn-from/" class="popup"> <span class="icon"> 
         <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewbox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"> 
          <path d="M27.825,4.783c0-2.427-2.182-4.608-4.608-4.608H4.783c-2.422,0-4.608,2.182-4.608,4.608v18.434 c0,2.427,2.181,4.608,4.608,4.608H14V17.379h-3.379v-4.608H14v-1.795c0-3.089,2.335-5.885,5.192-5.885h3.718v4.608h-3.726 c-0.408,0-0.884,0.492-0.884,1.236v1.836h4.609v4.608h-4.609v10.446h4.916c2.422,0,4.608-2.188,4.608-4.608V4.783z" /> 
         </svg> </span> <span class="text">Facebook</span> </a> </li> 
      <li class="twitter"> <a href="http://twitter.com/home?status=5%20Programming%20Languages%20You%20Should%20Really%20Try%20http://www.bradcypert.com/5-programming-languages-you-could-learn-from/" class="popup"> <span class="icon"> 
         <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewbox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"> 
          <path d="M24.253,8.756C24.689,17.08,18.297,24.182,9.97,24.62c-3.122,0.162-6.219-0.646-8.861-2.32 c2.703,0.179,5.376-0.648,7.508-2.321c-2.072-0.247-3.818-1.661-4.489-3.638c0.801,0.128,1.62,0.076,2.399-0.155 C4.045,15.72,2.215,13.6,2.115,11.077c0.688,0.275,1.426,0.407,2.168,0.386c-2.135-1.65-2.729-4.621-1.394-6.965 C5.575,7.816,9.54,9.84,13.803,10.071c-0.842-2.739,0.694-5.64,3.434-6.482c2.018-0.623,4.212,0.044,5.546,1.683 c1.186-0.213,2.318-0.662,3.329-1.317c-0.385,1.256-1.247,2.312-2.399,2.942c1.048-0.106,2.069-0.394,3.019-0.851 C26.275,7.229,25.39,8.196,24.253,8.756z" /> 
         </svg> </span> <span class="text">Twitter</span> </a> </li> 
      <li class="linkedin"> <a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=http://www.bradcypert.com/5-programming-languages-you-could-learn-from/&amp;title=5%20Programming%20Languages%20You%20Should%20Really%20Try&amp;summary=For some strange reason, the vast majority of my blog readers are Python Developers. I wrote two articles on Python a long time ago and honestly try to avoid python when I can. So here's an article for you purveyors of Python -- you sultans of snakes. Note: This article..." class="popup"> <span class="icon"> 
         <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewbox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"> 
          <path d="M25.424,15.887v8.447h-4.896v-7.882c0-1.979-0.709-3.331-2.48-3.331c-1.354,0-2.158,0.911-2.514,1.803 c-0.129,0.315-0.162,0.753-0.162,1.194v8.216h-4.899c0,0,0.066-13.349,0-14.731h4.899v2.088c-0.01,0.016-0.023,0.032-0.033,0.048 h0.033V11.69c0.65-1.002,1.812-2.435,4.414-2.435C23.008,9.254,25.424,11.361,25.424,15.887z M5.348,2.501 c-1.676,0-2.772,1.092-2.772,2.539c0,1.421,1.066,2.538,2.717,2.546h0.032c1.709,0,2.771-1.132,2.771-2.546 C8.054,3.593,7.019,2.501,5.343,2.501H5.348z M2.867,24.334h4.897V9.603H2.867V24.334z" /> 
         </svg> </span> <span class="text">LinkedIn</span> </a> </li> 
      <li class="tumblr"> <script>
						document.write('<a href="http://www.tumblr.com/share?v=3&amp;u=' + encodeURIComponent('http://www.bradcypert.com/5-programming-languages-you-could-learn-from/') + '&amp;t=5%20Programming%20Languages%20You%20Should%20Really%20Try" class="popup">');
					</script> <span class="icon"> 
        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" width="28px" height="28px" viewbox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"> 
         <path d="M18.02 21.842c-2.029 0.052-2.422-1.396-2.439-2.446v-7.294h4.729V7.874h-4.71V1.592c0 0-3.653 0-3.714 0 s-0.167 0.053-0.182 0.186c-0.218 1.935-1.144 5.33-4.988 6.688v3.637h2.927v7.677c0 2.8 1.7 6.7 7.3 6.6 c1.863-0.03 3.934-0.795 4.392-1.453l-1.22-3.539C19.595 21.6 18.7 21.8 18 21.842z" /> 
        </svg> </span> <span class="text">Tumblr</span> <script>document.write('</a>');</script> </li> 
      <li class="reddit"> <a href="http://www.reddit.com/submit?url=http://www.bradcypert.com/5-programming-languages-you-could-learn-from/"> <span class="icon"> 
         <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" width="28px" height="28px" viewbox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"> 
          <g> 
           <path d="M11.794 15.316c0-1.029-0.835-1.895-1.866-1.895c-1.03 0-1.893 0.865-1.893 1.895s0.863 1.9 1.9 1.9 C10.958 17.2 11.8 16.3 11.8 15.316z" /> 
           <path d="M18.1 13.422c-1.029 0-1.895 0.864-1.895 1.895c0 1 0.9 1.9 1.9 1.865c1.031 0 1.869-0.836 1.869-1.865 C19.969 14.3 19.1 13.4 18.1 13.422z" /> 
           <path d="M17.527 19.791c-0.678 0.678-1.826 1.006-3.514 1.006c-0.004 0-0.009 0-0.014 0c-0.004 0-0.01 0-0.015 0 c-1.686 0-2.834-0.328-3.51-1.005c-0.264-0.265-0.693-0.265-0.958 0c-0.264 0.265-0.264 0.7 0 1 c0.943 0.9 2.4 1.4 4.5 1.402c0.005 0 0 0 0 0c0.005 0 0 0 0 0c2.066 0 3.527-0.459 4.47-1.402 c0.265-0.264 0.265-0.693 0.002-0.958C18.221 19.5 17.8 19.5 17.5 19.791z" /> 
           <path d="M27.707 13.267c0-1.785-1.453-3.237-3.236-3.237c-0.793 0-1.518 0.287-2.082 0.761c-2.039-1.295-4.646-2.069-7.438-2.219 l1.483-4.691l4.062 0.956c0.071 1.4 1.3 2.6 2.7 2.555c1.488 0 2.695-1.208 2.695-2.695C25.881 3.2 24.7 2 23.2 2 c-1.059 0-1.979 0.616-2.42 1.508l-4.633-1.091c-0.344-0.081-0.693 0.118-0.803 0.455l-1.793 5.7 C10.548 8.6 7.7 9.4 5.6 10.75C5.006 10.3 4.3 10 3.5 10.029c-1.785 0-3.237 1.452-3.237 3.2 c0 1.1 0.6 2.1 1.4 2.69c-0.04 0.272-0.061 0.551-0.061 0.831c0 2.3 1.3 4.4 3.7 5.9 c2.299 1.5 5.3 2.3 8.6 2.325c3.228 0 6.271-0.825 8.571-2.325c2.387-1.56 3.7-3.66 3.7-5.917 c0-0.26-0.016-0.514-0.051-0.768C27.088 15.5 27.7 14.4 27.7 13.267z M23.186 3.355c0.74 0 1.3 0.6 1.3 1.3 c0 0.738-0.6 1.34-1.34 1.34s-1.342-0.602-1.342-1.34C21.844 4 22.4 3.4 23.2 3.355z M1.648 13.3 c0-1.038 0.844-1.882 1.882-1.882c0.31 0 0.6 0.1 0.9 0.209c-1.049 0.868-1.813 1.861-2.26 2.9 C1.832 14.2 1.6 13.8 1.6 13.267z M21.773 21.57c-2.082 1.357-4.863 2.105-7.831 2.105c-2.967 0-5.747-0.748-7.828-2.105 c-1.991-1.301-3.088-3-3.088-4.782c0-1.784 1.097-3.484 3.088-4.784c2.081-1.358 4.861-2.106 7.828-2.106 c2.967 0 5.7 0.7 7.8 2.106c1.99 1.3 3.1 3 3.1 4.784C24.859 18.6 23.8 20.3 21.8 21.57z M25.787 14.6 c-0.432-1.084-1.191-2.095-2.244-2.977c0.273-0.156 0.59-0.245 0.928-0.245c1.035 0 1.9 0.8 1.9 1.9 C26.354 13.8 26.1 14.3 25.8 14.605z" /> 
          </g> 
         </svg> </span> <span class="text">Reddit</span> </a> </li> 
      <li class="googleplus"> <a href="https://plus.google.com/share?url=http://www.bradcypert.com/5-programming-languages-you-could-learn-from/" class="popup"> <span class="icon"> 
         <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewbox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"> 
          <g> 
           <path d="M14.703,15.854l-1.219-0.948c-0.372-0.308-0.88-0.715-0.88-1.459c0-0.748,0.508-1.223,0.95-1.663 c1.42-1.119,2.839-2.309,2.839-4.817c0-2.58-1.621-3.937-2.399-4.581h2.097l2.202-1.383h-6.67c-1.83,0-4.467,0.433-6.398,2.027 C3.768,4.287,3.059,6.018,3.059,7.576c0,2.634,2.022,5.328,5.604,5.328c0.339,0,0.71-0.033,1.083-0.068 c-0.167,0.408-0.336,0.748-0.336,1.324c0,1.04,0.551,1.685,1.011,2.297c-1.524,0.104-4.37,0.273-6.467,1.562 c-1.998,1.188-2.605,2.916-2.605,4.137c0,2.512,2.358,4.84,7.289,4.84c5.822,0,8.904-3.223,8.904-6.41 c0.008-2.327-1.359-3.489-2.829-4.731H14.703z M10.269,11.951c-2.912,0-4.231-3.765-4.231-6.037c0-0.884,0.168-1.797,0.744-2.511 c0.543-0.679,1.489-1.12,2.372-1.12c2.807,0,4.256,3.798,4.256,6.242c0,0.612-0.067,1.694-0.845,2.478 c-0.537,0.55-1.438,0.948-2.295,0.951V11.951z M10.302,25.609c-3.621,0-5.957-1.732-5.957-4.142c0-2.408,2.165-3.223,2.911-3.492 c1.421-0.479,3.25-0.545,3.555-0.545c0.338,0,0.52,0,0.766,0.034c2.574,1.838,3.706,2.757,3.706,4.479 c-0.002,2.073-1.736,3.665-4.982,3.649L10.302,25.609z" /> 
           <polygon points="23.254,11.89 23.254,8.521 21.569,8.521 21.569,11.89 18.202,11.89 18.202,13.604 21.569,13.604 21.569,17.004 23.254,17.004 23.254,13.604 26.653,13.604 26.653,11.89" /> 
          </g> 
         </svg> </span> <span class="text">Google+</span> </a> </li> 
      <li class="pinterest"> <script>
						var imgurl = "http://www.bradcypert.com/content/images/2016/06/13221534_10209271837456044_4633724591854619815_n--1-.jpg";
						var firstimg = document.getElementsByClassName("post tag-meta")[0].getElementsByTagName("img")[0];
						if (firstimg !== undefined) {
							imgurl = firstimg.src;
						} 
						document.write('<a href="http://pinterest.com/pin/create/button/?url=http://www.bradcypert.com/5-programming-languages-you-could-learn-from/&amp;media=' + imgurl + '&amp;description=5%20Programming%20Languages%20You%20Should%20Really%20Try" class="popup">');
					</script> <span class="icon"> 
        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="28px" height="28px" viewbox="0 0 28 28" enable-background="new 0 0 28 28" xml:space="preserve"> 
         <path d="M14.021,1.57C6.96,1.57,1.236,7.293,1.236,14.355c0,7.062,5.724,12.785,12.785,12.785c7.061,0,12.785-5.725,12.785-12.785 C26.807,7.294,21.082,1.57,14.021,1.57z M15.261,18.655c-1.161-0.09-1.649-0.666-2.559-1.219c-0.501,2.626-1.113,5.145-2.925,6.458 c-0.559-3.971,0.822-6.951,1.462-10.116c-1.093-1.84,0.132-5.545,2.438-4.632c2.837,1.123-2.458,6.842,1.099,7.557 c3.711,0.744,5.227-6.439,2.925-8.775c-3.325-3.374-9.678-0.077-8.897,4.754c0.19,1.178,1.408,1.538,0.489,3.168 C7.165,15.378,6.53,13.7,6.611,11.462c0.131-3.662,3.291-6.227,6.46-6.582c4.007-0.448,7.771,1.474,8.29,5.239 c0.579,4.255-1.816,8.865-6.102,8.533L15.261,18.655z" /> 
        </svg> </span> <span class="text">Pinterest</span> <script>document.write('</a>');</script> </li> 
      <li class="pocket"> <a href="https://getpocket.com/save?url=http://www.bradcypert.com/5-programming-languages-you-could-learn-from/" class="popup"> <span class="icon"> 
         <svg width="32px" height="28px" viewbox="0 0 32 28" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sketch="http://www.bohemiancoding.com/sketch/ns"> 
          <path d="M28.7817528,0.00172488695 C30.8117487,0.00431221738 31.9749312,1.12074529 31.9644402,3.10781507 C31.942147,6.67703739 32.1336065,10.2669583 31.8057648,13.8090137 C30.7147076,25.5813672 17.2181194,31.8996281 7.20714461,25.3808491 C2.71833574,22.4571656 0.196577202,18.3122624 0.0549495772,12.9357897 C-0.0342233715,9.5774348 0.00642900214,6.21519891 0.0300336062,2.85555035 C0.0405245414,1.1129833 1.21157517,0.0146615391 3.01995012,0.00819321302 C7.34746087,-0.00603710433 11.6775944,0.00431221738 16.0064164,0.00172488695 C20.2644248,0.00172488695 24.5237444,-0.00215610869 28.7817528,0.00172488695 L28.7817528,0.00172488695 Z M8.64885184,7.85611511 C7.38773662,7.99113854 6.66148108,8.42606978 6.29310958,9.33228474 C5.90114134,10.2969233 6.17774769,11.1421181 6.89875951,11.8276216 C9.35282156,14.161969 11.8108164,16.4924215 14.2976518,18.7943114 C15.3844131,19.7966007 16.5354102,19.7836177 17.6116843,18.7813283 C20.0185529,16.5495467 22.4070683,14.2982907 24.7824746,12.0327533 C25.9845979,10.8850542 26.1012707,9.56468083 25.1469132,8.60653379 C24.1361858,7.59255976 22.8449191,7.6743528 21.5890476,8.85191291 C19.9936451,10.3488554 18.3680912,11.8172352 16.8395462,13.3777945 C16.1342655,14.093159 15.7200114,14.0048744 15.0566806,13.3440386 C13.4599671,11.7484252 11.8081945,10.2060421 10.1262706,8.70001155 C9.65564653,8.27936164 9.00411403,8.05345704 8.64885184,7.85611511 L8.64885184,7.85611511 L8.64885184,7.85611511 Z"></path> 
         </svg> </span> <span class="text">Pocket</span> </a> </li> 
     </ul> 
    </div> 
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script> 
    <script src="/assets/js/rrssb.min.js?v=e0f1d569c9"></script> 
    <div id="comments"> 
     <div id="disqus_thread"></div> 
     <script type="text/javascript">
	    var disqus_shortname = 'bradcypert'; // required: replace example with your shortname
	    var disqus_identifier = '48';
	    (function() {
	        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
	        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
	        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
	    })();
	</script> 
     <noscript>
      Please enable JavaScript to view the 
      <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a>
     </noscript> 
     <a href="http://disqus.com" class="dsq-brlink">Comments powered by <span class="logo-disqus">Disqus</span></a> 
    </div> 
   </article> 
  </main> 
  <footer id="footer"> 
   <section id="footer-message">
    © 2017 Brad Cypert. All rights reserved. Powered by 
    <a href="http://ghost.org" target="_blank">Ghost</a>. 
    <a href="https://github.com/kathyqian/crisp-ghost-theme" target="_blank">Crisp</a> theme by 
    <a href="http://kathyqian.com" target="_blank">Kathy Qian</a>.
   </section> 
  </footer> 
  <!-- You can safely delete this line if your theme does not require jQuery --> 
  <script type="text/javascript" src="https://code.jquery.com/jquery-1.11.3.min.js"></script> 
  <script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/highlight.min.js"></script> 
  <script>hljs.initHighlightingOnLoad();</script> 
  <script>
	  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
	  ga('create', 'UA-79259938-1', 'auto');
	  ga('send', 'pageview');
	</script>   
 </body>
</html>