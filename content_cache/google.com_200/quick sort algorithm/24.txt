<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <title>HTML Table Sorting with JavaScript</title> 
  <meta name="description" content="An unintrusive, cross-browser javascript table sorting library with no dependencies."> 
  <link rel="stylesheet" href="/css/style.css"> 
  <link rel="canonical" href="http://www.terrill.ca/sorting/"> 
  <link rel="alternate" type="application/rss+xml" title="Terrill Dent" href="http://www.terrill.ca/feed.xml"> 
  <link rel="stylesheet" href="pretty.css"> 
 </head> 
 <body class="bar wide"> 
  <header class="header"> 
   <div class="content-column"> 
    <a class="logo" href="/">Terrill Dent</a> 
    <nav> 
     <a id="blog-link" class="nav-link  nav-link--home" href="/">Home</a> 
     <a id="proj-link" class="nav-link current" href="/projects/">Projects</a> 
     <a id="illu-link" class="nav-link  last" href="/illustrations/">Illustrations</a> 
     <a class="nav-link nav-icon" href="https://github.com/"><span class="icon github"></span></a> 
     <a class="nav-link nav-icon" href="https://twitter.com/terrilldent"><span class="icon twitter"></span></a> 
    </nav> 
   </div> 
  </header> 
  <div class="content-column"> 
   <h1 class="post-title">HTML Table Sorting with JavaScript</h1> 
   <h2>Sorting HTML Tables with<br>Object Oriented JavaScript QuickSort</h2> 
   <p>This tutorial walks through the creation and installation of an object-oriented JavaScript implementation of the QuickSort algorithm. This script is an extendable, unobtrusive, and cross-browser compatible way of enhancing almost any type of tabular data. </p> 
   <div class="button-group"> 
    <a class="button large" href="table_sort_example.html">Working Demo</a> 
    <a class="button large" href="https://github.com/terrilldent/tsorter">View on Github</a> 
   </div> 
   <h4>Resources</h4> 
   <ul> 
    <li><a href="tsorter/dist/tsorter.js">JavaScript</a> (7kb) or <a href="tsorter/dist/tsorter.min.js">Compressed</a> (2kb)</li> 
    <li><a href="sample_css.css">Sample CSS</a> for Sorting Direction Arrows</li> 
   </ul> 
   <h4>Usage</h4> 
   <ul> 
    <li><a href="#make_your_tables_sortable">Making tables sortable</a></li> 
    <li><a href="#handling_data_types">Handling Different Data Types</a></li> 
    <li><a href="#custom_data_types">Custom Data Types</a></li> 
    <li><a href="#multiple_tables">Multiple Sortable Tables</a></li> 
   </ul> 
   <h3 id="make_your_tables_sortable">Making tables sortable</h3> 
   <h4 class="code_title">1. Download the <a href="tsorter/dist/tsorter.min.js">JavaScript</a> file and upload to your own web server.</h4> 
   <h4 class="code_title">2. Include the Javascript file at the bottom of your HTML document</h4> 
   <pre><code>
&lt;script src="tsorter.min.js" type="text/javascript"&gt;&lt;/script&gt;
</code></pre> 
   <h4 class="code_title">3. Add JavaScript for each table you want sortable</h4> 
   <pre><code>
function init() {
    var sorter = tsorter.create('TABLE-ID');
}
    
window.onload = init;
</code></pre> 
   <p>That's it! Seriously, you can upload the files and sort your tables.</p> 
   <h3 id="handling_data_types">Handling Different Data Types</h3> 
   <p>It's common to have numbers, text, links, or even inputs inside table cells. The script can handle sorting a number of built-in data types. Here are the defaults that come with it:</p> 
   <table> 
    <tbody>
     <tr>
      <td>numeric</td>
      <td>For sorting integers or floats</td>
     </tr> 
     <tr>
      <td>input-text</td>
      <td>For sorting &lt;input&gt; tags by value</td>
     </tr> 
     <tr>
      <td>link</td>
      <td>For sorting &lt;a&gt; tags by their textContent value</td>
     </tr> 
    </tbody>
   </table> 
   <p>Specify the data type for each column by putting a <strong>data-tsorter</strong> attribute on each <strong>&lt;th&gt;</strong> element.</p> 
   <h4 class="code_title">Example &lt;thead&gt; specifying numeric and input data types</h4> 
   <pre><code>
&lt;thead&gt;
    &lt;tr&gt;
        &lt;th&gt;Column 1 - defaults to text comparison&lt;/th&gt;
        &lt;th <strong>data-tsorter="numeric"</strong>&gt;Column 2 - Numbers&lt;/th&gt;
        &lt;th <strong>data-tsorter="input-text"</strong>&gt;Column 3 - Inputs&lt;/th&gt;
    &lt;/tr&gt;
&lt;/thead&gt;
    </code></pre> 
   <h3 id="custom_data_types">Custom Data Types</h3> 
   <p>What if your table has custom HTML inside its &lt;td&gt; tags as in the <a href="table_sort_example.html">example</a>? Then we have to teach the script how to access the value we want to sort by. For a quick example consider a 3 column table that has one column whose values are wrapped in &lt;a&gt; tags, and one column that contains &lt;img&gt; elements like so:</p> 
   <h4 class="code_title">Table with a column of links and images</h4> 
   <pre><code>
&lt;table id="result_table" class="sortable"&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;th&gt;Column 1&lt;/th&gt;
            &lt;th&gt;Column 2 - Image Column with Number&lt;/th&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;First Cell Row 1&lt;/td&gt;
            <strong>&lt;td&gt;&lt;img src="images/category1.png"/&gt;120&lt;/td&gt;</strong>
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;First Cell Row 2&lt;/td&gt;
            <strong>&lt;td&gt;&lt;img src="images/category2.png"/&gt;256&lt;/td&gt;</strong>
        &lt;/tr&gt;
        ...
    &lt;/tbody&gt;
&lt;/table&gt;
</code></pre> 
   <p>First, we add an attribute to the target &lt;th&gt; cell which will tell our script that this column is filled with links.</p> 
   <h4 class="code_title">1. Add the data-tsorter attribute to the &lt;th&gt;</h4> 
   <pre><code>
&lt;th <strong>data-tsorter="image-number"</strong>&gt;Column 2 - Image Column with Number&lt;/th&gt;
</code></pre> 
   <h4 class="code_title">2. Provide Custom Data Accessor Function for the given data type above</h4> 
   <pre><code>
tsorter.create('table-id', 0, {
    image-number: function(row){  
        return parseFloat( this.getCell(row).childNodes[1].nodeValue, 10 );
    }
});
</code></pre> 
   <p>Upload the scripts and refresh your page. If all has gone well you can now sort your custom data.</p> 
   <h3 id="multiple_tables">How about multiple tables on the same page?</h3> 
   <p>Sometimes you have <a href="table_sort_example.html">two data tables on the same page</a>. Luckily things scale well. Here is the JavaScript required to make two tables sortable.</p> 
   <h4 class="code_title">Making multiple tables sortable</h4> 
   <pre><code>
function init()
{
    var sorter1 = tsorter.create('TARGET_TABLE_ID');
    var sorter2 = tsorter.create('SECOND_TARGET_TABLE_ID');
}
    
window.onload = init;
</code></pre> 
  </div> 
  <footer> 
   <div class="content-column"> 
    <img class="profile-photo" src="/img/terrill.jpg"> 
    <h2 class="footer-title">Terrill Dent</h2> 
    <p class="text">The personal website of <a href="/">Terrill Dent</a>, a software developer in Waterloo Ontario. </p> 
    <a class="icon github" href="https://github.com/"></a> 
    <a class="icon twitter" href="https://twitter.com/terrilldent"></a> 
    <a class="icon email" href="/#contact"></a> 
   </div>  
  </footer> 
  <script async src="/mint/?js" type="text/javascript"></script> 
  <script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-132578-1', 'auto');
ga('send', 'pageview');
</script>   
 </body>
</html>