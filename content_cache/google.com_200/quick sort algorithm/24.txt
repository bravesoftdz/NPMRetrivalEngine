<!doctype html>
<!--[if lt IE 7 ]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7 ]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8 ]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!--[if gt IE 8]><!-->
<html class="no-js" lang="en">
 <!--<![endif]-->
 <head> 
  <meta charset="UTF-8"> 
  <title>Sorting - We're Doing It Wrong | Rodney Rehm</title> 
  <meta name="generator" content="Serendipity v.1.7.2"> 
  <meta name="viewport" content="width=device-width,initial-scale=1"> 
  <link rel="stylesheet" href="https://blog.rodneyrehm.de/serendipity.css"> 
  <link rel="stylesheet" href="/templates/yellowled/user.css"> 
  <script id="modernizr" src="/templates/yellowled/js/modernizr-2.5.3.min.js"></script> 
  <link rel="alternate" type="application/rss+xml" title="Rodney Rehm RSS feed" href="https://blog.rodneyrehm.de/feeds/index.rss2"> 
  <link rel="alternate" type="application/x.atom+xml" title="Rodney Rehm Atom feed" href="https://blog.rodneyrehm.de/feeds/atom.xml"> 
  <link rel="pingback" href="https://blog.rodneyrehm.de/comment.php?type=pingback&amp;entry_id=14"> 
  <script type="text/javascript" src="/templates/jquery.js"></script> 
  <script type="text/javascript">
    jQuery.noConflict();
    </script> 
  <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-8922143-4']);
  _gaq.push(['_gat._anonymizeIp']);  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
  })();
</script> 
 </head> 
 <body> 
  <a class="visuallyhidden" href="#content"><span lang="en">Skip to content</span></a> 
  <div id="page" class="clearfix"> 
   <header id="banner" class="clearfix col2r"> 
    <div id="identity"> 
     <a href="https://blog.rodneyrehm.de/"> <h1>Rodney Rehm</h1> <p>Webdevelopment, wherever it may take me…</p> </a> 
    </div> 
   </header> 
   <nav id="primary-nav"> 
    <h2 class="visuallyhidden">Navigation</h2> 
    <ul class="clearfix">
     <li><a href="http://rodneyrehm.de/en/">Home</a></li>
     <li><a href="http://rodneyrehm.de/en/vita.html">Vita</a></li>
     <li><a href="http://rodneyrehm.de/en/projects.html">Projects</a></li>
     <li><a href="http://rodneyrehm.de/en/articles.html">Articles</a></li>
     <li><a href="http://rodneyrehm.de/en/non-computing.html">Non-Computing</a></li>
     <li><a href="http://rodneyrehm.de/en/legal.html">Legal</a></li>
     <li><a href="http://blog.rodneyrehm.de/">Blog</a></li>
    </ul> 
   </nav> 
   <div id="main" class="clearfix col2r"> 
    <div id="content" class="clearfix"> 
     <article id="post_14" class="clearfix serendipity_entry"> 
      <header class="clearfix"> 
       <h2><a href="/archives/14-Sorting-Were-Doing-It-Wrong.html">Sorting - We're Doing It Wrong</a></h2> 
       <span class="serendipity_byline">Posted by <a href="https://blog.rodneyrehm.de/authors/1-Rodney-Rehm">Rodney Rehm</a> on <time datetime="2012-05-29T10:00:00+02:00" pubdate>Tuesday, May 29. 2012</time></span> 
      </header> 
      <div class="clearfix content serendipity_entry_body"> 
       <p>A couple of weeks ago it seemed my daily business became sorting DOMElements. This quickly became boring enough to be investigated more thoroughly. So this post sums up everything you should know about sorting DOMElements in Javascript (… using jQuery, of course).</p> 
      </div> 
      <div id="extended" class="content"> 
       <hr> 
       <p>I usually write about <code>Array.sort</code> rather than <code>Array#sort</code>. Simply because I never know when to use which. But no worries, <a onclick="_gaq.push(['_trackPageview', '/extlink/twitter.com/mathias']);" href="https://twitter.com/mathias">@mathias</a> is here to set us straight! ?</p> 
       <p> </p>
       <div class="serendipity_oembed_rich"> 
        <blockquote class="twitter-tweet" data-in-reply-to="207381934026932224" width="550" lang="fr">
         <p>@<a href="https://twitter.com/rodneyrehm">rodneyrehm</a> Nit: Array#sort, not Array.sort :P <a href="http://t.co/mfBtyOSp" title="http://mathiasbynens.be/notes/javascript-prototype-notation">mathiasbynens.be/notes/javascri…</a></p>— ? Mathias Bynens ? (@mathias) 
         <a href="https://twitter.com/mathias/status/207385939264282624" data-datetime="2012-05-29T08:20:35+00:00">Mai 29, 2012</a>
        </blockquote> 
        <script src="//platform.twitter.com/widgets.js" charset="utf-8"></script> 
       </div> 
       <p></p> 
       <hr> 
       <h2 id="basics">Sorting - the basics</h2> 
       <p><a onclick="_gaq.push(['_trackPageview', '/extlink/developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort']);" href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort">Array#sort()</a> is a handy little function that sorts arrays for us. It's handy, because we don't have to implement one of the various sorting algorithms like BubbleSort, MergeSort or HeapSort. <em>(If you studied computer science, you've probably implemented a couple of these yourself. Quite annoying, right?)</em> ECMAScript, the specification behind Javascript, doesn't regulate which algorithm a Javascript engine vendor should use. According to this <a onclick="_gaq.push(['_trackPageview', '/extlink/stackoverflow.com/questions/234683/javascript-array-sort-implementation']);" href="http://stackoverflow.com/questions/234683/javascript-array-sort-implementation">question on StackOverflow</a> apparently Mozilla implemented <a onclick="_gaq.push(['_trackPageview', '/extlink/en.wikipedia.org/wiki/MergeSort']);" href="http://en.wikipedia.org/wiki/MergeSort">MergeSort</a>, Safari did some <a onclick="_gaq.push(['_trackPageview', '/extlink/en.wikipedia.org/wiki/Selection_sort']);" href="http://en.wikipedia.org/wiki/Selection_sort">SelectionSort</a> and Chrome's V8 uses <a onclick="_gaq.push(['_trackPageview', '/extlink/en.wikipedia.org/wiki/QuickSort']);" href="http://en.wikipedia.org/wiki/QuickSort">QuickSort</a>.</p> 
       <hr> 
       <p>For kicks and laughs, here's what sorting algorithms sound like: </p>
       <div class="serendipity_oembed_video"> 
        <iframe width="459" height="344" src="http://www.youtube.com/embed/t8g-iYGHpEA?fs=1&amp;feature=oembed" frameborder="0" allowfullscreen></iframe> 
       </div> 
       <p></p> 
       <hr> 
       <p>So the actual sorting is done for you, as long as you pass in a callback function that compares two elements according to how you want them sorted. Said function must accept two arguments (<code>a, b</code>) and is supposed to return an integer. <code>0</code> if <code>a === b</code>, <code>-1</code> if <code>a &lt; b</code> and <code>1</code> if <code>a &gt; b</code>. Since <code>a</code> is already positioned before <code>b</code>, returning <code>0</code> and <code>-1</code> yield the same result, which usually allows to remove the extra equality comparison and end up with <code>a &gt; b ? 1 : -1</code>.</p> 
       <h3 id="stability">Stable vs. Unstable Sorting</h3> 
       <p>ECMAScript neither dictates a specific algorithm, nor expects it to be stable (<a onclick="_gaq.push(['_trackPageview', '/extlink/ecma-international.org/ecma-262/5.1/#sec-15.4.4.11']);" href="http://ecma-international.org/ecma-262/5.1/#sec-15.4.4.11">Array.prototype.sort</a>). <a onclick="_gaq.push(['_trackPageview', '/extlink/en.wikipedia.org/wiki/Category:Stable_sorts']);" href="http://en.wikipedia.org/wiki/Category:Stable_sorts">Stable sorting algorithms</a> maintain the relative order of elements that appear to be "the same". To <code>Array#sort</code> two items appear the same when the comparison function returns <code>0</code>. While InsertionSort and MergeSort (Apple and Mozilla) are stable, QuickSort (Google Chrome) is <em>not</em> (<a onclick="_gaq.push(['_trackPageview', '/extlink/code.google.com/p/v8/issues/detail?id=90']);" href="http://code.google.com/p/v8/issues/detail?id=90">Issue 90</a>). Chrome will sort arrays <a onclick="_gaq.push(['_trackPageview', '/extlink/github.com/v8/v8/blob/master/src/array.js#L764']);" href="https://github.com/v8/v8/blob/master/src/array.js#L764">using InsertionSort</a> if the array has <a onclick="_gaq.push(['_trackPageview', '/extlink/github.com/v8/v8/blob/master/src/array.js#L782']);" href="https://github.com/v8/v8/blob/master/src/array.js#L782">10 or less</a> elements.</p> 
       <p><a onclick="_gaq.push(['_trackPageview', '/extlink/twitter.com/millermedeiros']);" href="https://twitter.com/millermedeiros">@millermedeiros</a> wrote a little <a onclick="_gaq.push(['_trackPageview', '/extlink/jsbin.com/eqanux/edit#javascript,live']);" href="http://jsbin.com/eqanux/edit#javascript,live">test-case</a> to point that out. <em>(Thanks!)</em></p> 
       <p>So Safari and Firefox will sort <code>["sed", "dolor", "ipsum", "foo", "bar", "cat", "sit", "man", "lorem", "amet", "maecennas"]</code> (by character length) in a way that <code>"sed"</code> will retain first position, while Chrome will roll the dice and possibly prefer <code>"cat"</code> to take the pole position. <em>The Chrome developers obviously like Kittens…</em></p> 
       <p><a onclick="_gaq.push(['_trackPageview', '/extlink/twitter.com/millermedeiros']);" href="https://twitter.com/millermedeiros">@millermedeiros</a> suggests implementing a stable algorithm, such as <a onclick="_gaq.push(['_trackPageview', '/extlink/en.wikipedia.org/wiki/MergeSort']);" href="http://en.wikipedia.org/wiki/MergeSort">MergeSort</a> yourself, if you find yourself in need. Or, if you're as lazy as me, you might be happy with <a onclick="_gaq.push(['_trackPageview', '/extlink/millermedeiros.github.com/amd-utils/array.html#sort']);" href="http://millermedeiros.github.com/amd-utils/array.html#sort">his implementation</a> he made available with <a onclick="_gaq.push(['_trackPageview', '/extlink/millermedeiros.github.com/amd-utils/']);" href="http://millermedeiros.github.com/amd-utils/">AMD-Utils</a>.</p> 
       <h3 id="types">Sorting Different Types</h3> 
       <p>Let's see what happens when different types are sorted (<a onclick="_gaq.push(['_trackPageview', '/extlink/jsfiddle.net/rodneyrehm/HXRNW/']);" href="http://jsfiddle.net/rodneyrehm/HXRNW/">fiddle</a>):</p> 
       <div class="javascript geshi" style="text-align: left">
        <span style="color: #003366; font-weight: bold;">var</span> list 
        <span style="color: #339933;">=</span> 
        <span style="color: #009900;">[</span>Infinity
        <span style="color: #339933;">,</span> 
        <span style="color: #339933;">-</span>Infinity
        <span style="color: #339933;">,</span> NaN
        <span style="color: #339933;">,</span> 
        <span style="color: #CC0000;">0</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #339933;">-</span>
        <span style="color: #CC0000;">0</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #CC0000;">1</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #339933;">-</span>
        <span style="color: #CC0000;">1</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #009900;">{</span>
        <span style="color: #009900;">}</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #009900;">[</span>
        <span style="color: #CC0000;">3</span>
        <span style="color: #009900;">]</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #009900;">[</span>
        <span style="color: #CC0000;">4</span>
        <span style="color: #339933;">,</span>
        <span style="color: #CC0000;">5</span>
        <span style="color: #009900;">]</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #009900;">[</span>
        <span style="color: #CC0000;">6</span>
        <span style="color: #009900;">]</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #3366CC;">"1"</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #3366CC;">"-1"</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #3366CC;">"a"</span>
        <span style="color: #339933;">,</span> NaN
        <span style="color: #339933;">,</span> 
        <span style="color: #3366CC;">"z"</span>
        <span style="color: #009900;">]</span>
        <br>
        <br>
        <span style="color: #006600; font-style: italic;">// sort with internal default comparison function</span>
        <br>list.
        <span style="color: #660066;">sort</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>
        <br>
        <span style="color: #006600; font-style: italic;">// sort with custom comparison function</span>
        <br>list.
        <span style="color: #660066;">sort</span>
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>a
        <span style="color: #339933;">,</span> b
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> a 
        <span style="color: #339933;">&gt;</span> b 
        <span style="color: #339933;">?</span> 
        <span style="color: #CC0000;">1</span> 
        <span style="color: #339933;">:</span> 
        <span style="color: #339933;">-</span>
        <span style="color: #CC0000;">1</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>The results are rather interesting:</p> 
       <div class="text geshi" style="text-align: left">
        === internal default comparison (Firefox and Chrome) ===
        <br>-1 | -1 | -Infinity | 0 | 0 | 1 | 1 | 3 | 4,5 | 6 | Infinity | NaN | NaN | [object Object] | a | z
        <br>
        <br>
        <br>=== custom comparison (Firefox) ===
        <br>-Infinity | -1 | -1 | 1 | 3 | Infinity | NaN | 0 | 0 | 1 | 4,5 | 6 | [object Object] | a | NaN | z
        <br>=== custom comparison (Chrome) ===
        <br>-Infinity | -1 | -1 | 0 | 0 | 1 | NaN | 1 | 3 | 4,5 | 6 | [object Object] | a | NaN | Infinity | z
       </div> 
       <ul> 
        <li><code>a &gt; b ? 1 : -1</code> is the most rudimentary comparison function, mentioned in pratically every single example illustrating the Array#sort() function. Yet it doesn't yield the same result as the internal default comparison function. Let's ignore the internal default comparison function for now, we're most likely not going to use it.</li> 
        <li>See how <code>NaN</code> pretty much stayed in their original spots? Comparing something to <code>NaN</code> seems to be a bad Idea. </li> 
        <li>Chrome and Firefox seem to apply different rules to casting strings and arrays to numeric values.</li> 
        <li>Note how Firefox and Chrome treat <code>Infinity</code> differently (both don't make sense, imho).</li> 
       </ul> 
       <p>Removing everything that is not immeditely numeric (including <code>NaN</code>) we get the following result (across browsers):</p> 
       <div class="text geshi" style="text-align: left">
        -Infinity | -1 | 0 | 0 | 1 | Infinity
       </div> 
       <p>Now, that finally makes sense.</p> 
       <p>In short: sorting different types seems like a bad idea because the results will vary across browsers. We must take measures to feed the comparison function reliable data. Beware of <code>NaN</code>! Replace them with an <code>Infinity</code> if you can.</p> 
       <h3 id="strings">Sorting Strings</h3> 
       <p>MDN suggests string comparison to be done like <code>"a" &lt; "b"</code>. While this works for English just fine, it fails pretty much every other language there is. According to the rules, the German Umlauts (ä, ö, ü) should come right after their respective vowels: <code>a, ä, b, o, ö</code>. But here's where we're facing a problem, because <code>"ä" &gt; "b"</code>. You see, the unicode of <code>b</code> is 0x62 and <code>ä</code> is 0xE4 and <code>0x62 &lt; 0xE4</code>. See for yourself:</p> 
       <div class="javascript geshi" style="text-align: left">
        <br>
        <span style="color: #003366; font-weight: bold;">var</span> list 
        <span style="color: #339933;">=</span> 
        <span style="color: #3366CC;">"ä ba bb bä bz a e è é aa ae b ss sz sa st ß"</span>.
        <span style="color: #660066;">split</span>
        <span style="color: #009900;">(</span>
        <span style="color: #3366CC;">" "</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>list.
        <span style="color: #660066;">sort</span>
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>a
        <span style="color: #339933;">,</span> b
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> a 
        <span style="color: #339933;">&gt;</span> b 
        <span style="color: #339933;">?</span> 
        <span style="color: #CC0000;">1</span> 
        <span style="color: #339933;">:</span> 
        <span style="color: #339933;">-</span>
        <span style="color: #CC0000;">1</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>yields</p> 
       <div class="text geshi" style="text-align: left">
        a, aa, ae, b, ba, bb, bz, bä, e, sa, ss, st, sz, ß, ä, è, é
       </div> 
       <p>which is not quite what we (Germans, French, …) want.</p> 
       <p>Sadly MDN's <a onclick="_gaq.push(['_trackPageview', '/extlink/developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort']);" href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort">Array#sort()</a> doesn't mention the very handy function <a onclick="_gaq.push(['_trackPageview', '/extlink/developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/localeCompare']);" href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/localeCompare">String#localeCompare</a>. <em>(I edited MDN to now link to that handy utility…)</em></p> 
       <p>For comparing strings you can simply replace <code>a &gt; b ? 1 : -1</code> by <code>a.localeCompare(b)</code> and your language is back in the game:</p> 
       <div class="javascript geshi" style="text-align: left">
        <br>
        <span style="color: #003366; font-weight: bold;">var</span> list 
        <span style="color: #339933;">=</span> 
        <span style="color: #3366CC;">"ä ba bb bä bz a e è é aa ae b ss sz sa st ß"</span>.
        <span style="color: #660066;">split</span>
        <span style="color: #009900;">(</span>
        <span style="color: #3366CC;">" "</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>list.
        <span style="color: #660066;">sort</span>
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>a
        <span style="color: #339933;">,</span> b
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> a.
        <span style="color: #660066;">localeCompare</span>
        <span style="color: #009900;">(</span>b
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>yields</p> 
       <div class="text geshi" style="text-align: left">
        a, ä, aa, ae, b, ba, bä, bb, bz, e, é, è, sa, ss, ß, st, sz
       </div> 
       <p>which is just fine!</p> 
       <p><code>String#localeCompare</code> has been around since Javascript 1.2 - pretty much every browser out there knows it - So use it!</p> 
       <p>Let it be known that <code>localeCompare</code> uses the operating system's locale. Which means that if you're running an English (or Scandinavian) System, you won't be seeing the characters sorted according to German (or French, or whatever) rules.</p> 
       <p> </p>
       <div class="serendipity_oembed_rich"> 
        <blockquote class="twitter-tweet" width="550" lang="fr">
         <p>@<a href="https://twitter.com/rodneyrehm">rodneyrehm</a> @<a href="https://twitter.com/mathias">mathias</a> Worth noting that localeCompare is based on the user's OS locale and also that Scandinavians put äöü etc at the end :)</p>— Lewis (@aerotwist) 
         <a href="https://twitter.com/aerotwist/status/207401173454557185" data-datetime="2012-05-29T09:21:07+00:00">Mai 29, 2012</a>
        </blockquote> 
        <script src="//platform.twitter.com/widgets.js" charset="utf-8"></script> 
       </div> 
       <p></p> 
       <h2 id="jQuery-sortChildren">Sorting DOMElements</h2> 
       <p>A trivial function to sort the children of a DOMElement looks like:</p> 
       <div class="javascript geshi" style="text-align: left">
        $.
        <span style="color: #660066;">fn</span>.
        <span style="color: #660066;">sortChildren</span> 
        <span style="color: #339933;">=</span> 
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>compare
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #003366; font-weight: bold;">var</span> $children 
        <span style="color: #339933;">=</span> 
        <span style="color: #000066; font-weight: bold;">this</span>.
        <span style="color: #660066;">children</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; $children.
        <span style="color: #660066;">sort</span>
        <span style="color: #009900;">(</span>compare
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">this</span>.
        <span style="color: #660066;">append</span>
        <span style="color: #009900;">(</span>$children
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> 
        <span style="color: #000066; font-weight: bold;">this</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>and would be invoked with</p> 
       <div class="javascript geshi" style="text-align: left">
        $
        <span style="color: #009900;">(</span>
        <span style="color: #3366CC;">'ul'</span>
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">sortChildren</span>
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>a
        <span style="color: #339933;">,</span> b
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> $
        <span style="color: #009900;">(</span>a
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">text</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">toLowerCase</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #339933;">&gt;</span> $
        <span style="color: #009900;">(</span>b
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">text</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">toLowerCase</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #339933;">?</span> 
        <span style="color: #CC0000;">1</span> 
        <span style="color: #339933;">:</span> 
        <span style="color: #339933;">-</span>
        <span style="color: #CC0000;">1</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>While this method works, it's wasting about 70% performance across the board.</p> 
       <h2 id="boosting">Boosting Performance - jQuery</h2> 
       <p>jQuery itself is a wonderful thing. It makes things really simple. But losing a bit of performance is often the toll for said simplicity. Let's ditch <code>jQuery#append</code> and improve performance by 20% - 30%:</p> 
       <div class="javascript geshi" style="text-align: left">
        $.
        <span style="color: #660066;">fn</span>.
        <span style="color: #660066;">sortChildren</span> 
        <span style="color: #339933;">=</span> 
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>compare
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> 
        <span style="color: #000066; font-weight: bold;">this</span>.
        <span style="color: #660066;">each</span>
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>
        <span style="color: #009900;">{</span>
        <br>&nbsp; &nbsp; 
        <span style="color: #003366; font-weight: bold;">var</span> $children 
        <span style="color: #339933;">=</span> $
        <span style="color: #009900;">(</span>
        <span style="color: #000066; font-weight: bold;">this</span>
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">children</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; &nbsp; $children.
        <span style="color: #660066;">sort</span>
        <span style="color: #009900;">(</span>compare
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; &nbsp; 
        <span style="color: #000066; font-weight: bold;">for</span> 
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">var</span> i
        <span style="color: #339933;">=</span>
        <span style="color: #CC0000;">0</span>
        <span style="color: #339933;">,</span> l
        <span style="color: #339933;">=</span>$children.
        <span style="color: #660066;">length</span>
        <span style="color: #339933;">;</span> i 
        <span style="color: #339933;">&lt;</span> l 
        <span style="color: #339933;">;</span> i
        <span style="color: #339933;">++</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; &nbsp; &nbsp; 
        <span style="color: #000066; font-weight: bold;">this</span>.
        <span style="color: #660066;">appendChild</span>
        <span style="color: #009900;">(</span>$children
        <span style="color: #009900;">[</span>i
        <span style="color: #009900;">]</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; &nbsp; 
        <span style="color: #009900;">}</span>
        <br>&nbsp; 
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>less jQuery, more performance…</p> 
       <h2 id="comparing">Comparing Elements</h2> 
       <p>MDN (and most other resources I came across) illustrate sorting with an example like the following:</p> 
       <div class="javascript geshi" style="text-align: left">
        <span style="color: #003366; font-weight: bold;">var</span> list 
        <span style="color: #339933;">=</span> 
        <span style="color: #009900;">[</span>
        <span style="color: #3366CC;">"Delta"</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #3366CC;">"alpha"</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #3366CC;">"CHARLIE"</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #3366CC;">"bravo"</span>
        <span style="color: #009900;">]</span>
        <span style="color: #339933;">;</span>
        <br>list.
        <span style="color: #660066;">sort</span>
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>a
        <span style="color: #339933;">,</span> b
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> a.
        <span style="color: #660066;">toLowerCase</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #339933;">&gt;</span> b.
        <span style="color: #660066;">toLowerCase</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #339933;">?</span> 
        <span style="color: #CC0000;">1</span> 
        <span style="color: #339933;">:</span> 
        <span style="color: #339933;">-</span>
        <span style="color: #CC0000;">1</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>The docs usually fail to inform the reader of the fact that this comparison function is executed multiple times for each element in the array. <em>(I edited MDN to now reflect that fact)</em> Let's take a closer look at what's happening behind the scenes using the comparison function from before:</p> 
       <div class="javascript geshi" style="text-align: left">
        $
        <span style="color: #009900;">(</span>
        <span style="color: #3366CC;">'ul'</span>
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">sortChildren</span>
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>a
        <span style="color: #339933;">,</span> b
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #003366; font-weight: bold;">var</span> an 
        <span style="color: #339933;">=</span> $
        <span style="color: #009900;">(</span>a
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">text</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">toLowerCase</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">,</span>
        <br>&nbsp; &nbsp; bn 
        <span style="color: #339933;">=</span> $
        <span style="color: #009900;">(</span>b
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">text</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">toLowerCase</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; 
        <br>&nbsp; console.
        <span style="color: #660066;">log</span>
        <span style="color: #009900;">(</span>an
        <span style="color: #339933;">,</span> bn
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> an 
        <span style="color: #339933;">&gt;</span> bn 
        <span style="color: #339933;">?</span> 
        <span style="color: #CC0000;">1</span> 
        <span style="color: #339933;">:</span> 
        <span style="color: #339933;">-</span>
        <span style="color: #CC0000;">1</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>A list of five elements:</p> 
       <div class="xml geshi" style="text-align: left">
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;ul<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <br>&nbsp; 
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;li<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>delta
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/li<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <br>&nbsp; 
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;li<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>bravo
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/li<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <br>&nbsp; 
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;li<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>alpha
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/li<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <br>&nbsp; 
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;li<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>charlie
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/li<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <br>&nbsp; 
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;li<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>echo
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/li<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
        <br>
        <span style="color: #009900;"><span style="color: #000000; font-weight: bold;">&lt;/ul<span style="color: #000000; font-weight: bold;">&gt;</span></span></span>
       </div> 
       <p>And Firefox gives us the following output:</p> 
       <div class="text geshi" style="text-align: left">
        delta bravo
        <br>delta alpha
        <br>bravo alpha
        <br>charlie echo
        <br>delta charlie
        <br>alpha charlie
        <br>bravo charlie
        <br>delta charlie
        <br>delta echo
       </div> 
       <p>You can easily see how <code>charlie</code> is evaluated 5 times. That means <code>$(a).text().toLowerCase()</code> is executed 5 times for charlie alone. The sorting algorithm used 9 iterations leading to 18 »get text of node and convert to lower case« operations. eighteen, instead of the 5 you'd actually need. Depending on what your comparison function actually does, this can be a tremendous overhead.</p> 
       <h2 id="mapping">Mapping Before Comparing</h2> 
       <p>We cannot reduce the number of times our comparison function is executed. But we can reduce the work it actually does to a bare minimum. Apparently this is called the <a onclick="_gaq.push(['_trackPageview', '/extlink/en.wikipedia.org/wiki/Schwartzian_transform']);" href="http://en.wikipedia.org/wiki/Schwartzian_transform">Schwartzian Transform</a> (<em>Thank you Gabriel for pointing this out</em>) Instead of evaluating each element on every comparison, we do those evaluations once. For this we create a second array containing the values to sort</p> 
       <div class="javascript geshi" style="text-align: left">
        <span style="color: #003366; font-weight: bold;">var</span> list 
        <span style="color: #339933;">=</span> 
        <span style="color: #009900;">[</span>
        <span style="color: #3366CC;">"Delta"</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #3366CC;">"alpha"</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #3366CC;">"CHARLIE"</span>
        <span style="color: #339933;">,</span> 
        <span style="color: #3366CC;">"bravo"</span>
        <span style="color: #009900;">]</span>
        <span style="color: #339933;">,</span>
        <br>&nbsp; map 
        <span style="color: #339933;">=</span> 
        <span style="color: #009900;">[</span>
        <span style="color: #009900;">]</span>
        <span style="color: #339933;">,</span>
        <br>&nbsp; result 
        <span style="color: #339933;">=</span> 
        <span style="color: #009900;">[</span>
        <span style="color: #009900;">]</span>
        <span style="color: #339933;">;</span>
        <br>
        <br>
        <span style="color: #000066; font-weight: bold;">for</span> 
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">var</span> i
        <span style="color: #339933;">=</span>
        <span style="color: #CC0000;">0</span>
        <span style="color: #339933;">,</span> length 
        <span style="color: #339933;">=</span> list.
        <span style="color: #660066;">length</span>
        <span style="color: #339933;">;</span> i 
        <span style="color: #339933;">&lt;</span> length
        <span style="color: #339933;">;</span> i
        <span style="color: #339933;">++</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; map.
        <span style="color: #660066;">push</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">{</span>
        <br>&nbsp; &nbsp; index
        <span style="color: #339933;">:</span> i
        <span style="color: #339933;">,</span> 
        <span style="color: #006600; font-style: italic;">// remember the index within the original array</span>
        <br>&nbsp; &nbsp; value
        <span style="color: #339933;">:</span> list
        <span style="color: #009900;">[</span>i
        <span style="color: #009900;">]</span>.
        <span style="color: #660066;">toLowerCase</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #006600; font-style: italic;">// evaluate the element</span>
        <br>&nbsp; 
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <br>
        <br>
        <span style="color: #006600; font-style: italic;">// sorting the map containing the reduced values</span>
        <br>map.
        <span style="color: #660066;">sort</span>
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>a
        <span style="color: #339933;">,</span> b
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> a.
        <span style="color: #660066;">value</span> 
        <span style="color: #339933;">&gt;</span> b.
        <span style="color: #660066;">value</span> 
        <span style="color: #339933;">?</span> 
        <span style="color: #CC0000;">1</span> 
        <span style="color: #339933;">:</span> 
        <span style="color: #339933;">-</span>
        <span style="color: #CC0000;">1</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>
        <br>
        <span style="color: #006600; font-style: italic;">// copy values in right order</span>
        <br>
        <span style="color: #000066; font-weight: bold;">for</span> 
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">var</span> i
        <span style="color: #339933;">=</span>
        <span style="color: #CC0000;">0</span>
        <span style="color: #339933;">,</span> length 
        <span style="color: #339933;">=</span> map.
        <span style="color: #660066;">length</span>
        <span style="color: #339933;">;</span> i 
        <span style="color: #339933;">&lt;</span> length
        <span style="color: #339933;">;</span> i
        <span style="color: #339933;">++</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; result.
        <span style="color: #660066;">push</span>
        <span style="color: #009900;">(</span>list
        <span style="color: #009900;">[</span>map
        <span style="color: #009900;">[</span>i
        <span style="color: #009900;">]</span>.
        <span style="color: #660066;">index</span>
        <span style="color: #009900;">]</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <br>
        <br>
        <span style="color: #006600; font-style: italic;">// print sorted list</span>
        <br>
        <span style="color: #000066;">print</span>
        <span style="color: #009900;">(</span>result
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>Using this technique, we can improve the performance of our little sorting plugin as much as 70% over the original.</p> 
       <p>Note: I don't know of any (reasonable) way to change to sorting of an array in-place. While <code>Array#sort</code> will modify the original array (as well as return itself), the mapped sorting approach described here will create a new array.</p> 
       <h2>Working On Detached DOM</h2> 
       <p>Discussing the issue with <a onclick="_gaq.push(['_trackPageview', '/extlink/twitter.com/derSchepp']);" href="https://twitter.com/derSchepp">@derSchepp</a> a couple of weeks ago, he threw in the Idea of detaching the nodes we want to sort from the DOM, so we could reduce the number of reflows (which happen when you alter the position of elements within the DOM) to a bare minimum of 2. A simple helper function (for lack of a better name) called <code>phase()</code> will help:</p> 
       <div class="javascript geshi" style="text-align: left">
        $.
        <span style="color: #660066;">fn</span>.
        <span style="color: #660066;">phase</span> 
        <span style="color: #339933;">=</span> 
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> 
        <span style="color: #000066; font-weight: bold;">this</span>.
        <span style="color: #660066;">each</span>
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; &nbsp; 
        <span style="color: #003366; font-weight: bold;">var</span> $this 
        <span style="color: #339933;">=</span> $
        <span style="color: #009900;">(</span>
        <span style="color: #000066; font-weight: bold;">this</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">,</span>
        <br>&nbsp; &nbsp; &nbsp; placeholder 
        <span style="color: #339933;">=</span> $this.
        <span style="color: #660066;">data</span>
        <span style="color: #009900;">(</span>
        <span style="color: #3366CC;">'redetach'</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>
        <br>&nbsp; &nbsp; 
        <span style="color: #000066; font-weight: bold;">if</span> 
        <span style="color: #009900;">(</span>placeholder
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; &nbsp; &nbsp; placeholder.
        <span style="color: #660066;">parentNode</span>.
        <span style="color: #660066;">replaceChild</span>
        <span style="color: #009900;">(</span>
        <span style="color: #000066; font-weight: bold;">this</span>
        <span style="color: #339933;">,</span> placeholder
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; &nbsp; &nbsp; $this.
        <span style="color: #660066;">removeData</span>
        <span style="color: #009900;">(</span>
        <span style="color: #3366CC;">'redetach'</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; &nbsp; 
        <span style="color: #009900;">}</span> 
        <span style="color: #000066; font-weight: bold;">else</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; &nbsp; &nbsp; placeholder 
        <span style="color: #339933;">=</span> document.
        <span style="color: #660066;">createTextNode</span>
        <span style="color: #009900;">(</span>
        <span style="color: #3366CC;">''</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">,</span>
        <br>&nbsp; &nbsp; &nbsp; 
        <span style="color: #000066; font-weight: bold;">this</span>.
        <span style="color: #660066;">parentNode</span>.
        <span style="color: #660066;">replaceChild</span>
        <span style="color: #009900;">(</span>placeholder
        <span style="color: #339933;">,</span> 
        <span style="color: #000066; font-weight: bold;">this</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; &nbsp; &nbsp; $this.
        <span style="color: #660066;">data</span>
        <span style="color: #009900;">(</span>
        <span style="color: #3366CC;">'redetach'</span>
        <span style="color: #339933;">,</span> placeholder
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; &nbsp; 
        <span style="color: #009900;">}</span>
        <br>&nbsp; 
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>now we throw that into our little sorting function and get:</p> 
       <div class="javascript geshi" style="text-align: left">
        $.
        <span style="color: #660066;">fn</span>.
        <span style="color: #660066;">sortChildren</span> 
        <span style="color: #339933;">=</span> 
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>map
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; 
        <span style="color: #000066; font-weight: bold;">return</span> 
        <span style="color: #000066; font-weight: bold;">this</span>.
        <span style="color: #660066;">each</span>
        <span style="color: #009900;">(</span>
        <span style="color: #003366; font-weight: bold;">function</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; &nbsp; 
        <span style="color: #003366; font-weight: bold;">var</span> $this 
        <span style="color: #339933;">=</span> $
        <span style="color: #009900;">(</span>
        <span style="color: #000066; font-weight: bold;">this</span>
        <span style="color: #009900;">)</span>.
        <span style="color: #660066;">phase</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">,</span>
        <br>&nbsp; &nbsp; &nbsp; $children 
        <span style="color: #339933;">=</span> $this.
        <span style="color: #660066;">children</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">,</span>
        <br>&nbsp; &nbsp; &nbsp; _map 
        <span style="color: #339933;">=</span> 
        <span style="color: #009900;">[</span>
        <span style="color: #009900;">]</span>
        <span style="color: #339933;">,</span>
        <br>&nbsp; &nbsp; &nbsp; length 
        <span style="color: #339933;">=</span> $children.
        <span style="color: #660066;">length</span>
        <span style="color: #339933;">,</span>
        <br>&nbsp; &nbsp; &nbsp; i
        <span style="color: #339933;">;</span>
        <br>
        <br>&nbsp; &nbsp; 
        <span style="color: #000066; font-weight: bold;">for</span> 
        <span style="color: #009900;">(</span>i 
        <span style="color: #339933;">=</span> 
        <span style="color: #CC0000;">0</span>
        <span style="color: #339933;">;</span> i 
        <span style="color: #339933;">&lt;</span> length 
        <span style="color: #339933;">;</span> i
        <span style="color: #339933;">++</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; &nbsp; &nbsp; _map.
        <span style="color: #660066;">push</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">{</span>
        <br>&nbsp; &nbsp; &nbsp; &nbsp; index
        <span style="color: #339933;">:</span> i
        <span style="color: #339933;">,</span> 
        <br>&nbsp; &nbsp; &nbsp; &nbsp; value
        <span style="color: #339933;">:</span> map
        <span style="color: #009900;">(</span>$children
        <span style="color: #009900;">[</span>i
        <span style="color: #009900;">]</span>
        <span style="color: #009900;">)</span>
        <br>&nbsp; &nbsp; &nbsp; 
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; &nbsp; 
        <span style="color: #009900;">}</span>
        <br>&nbsp; &nbsp; &nbsp; 
        <br>&nbsp; &nbsp; _map.
        <span style="color: #660066;">sort</span>
        <span style="color: #009900;">(</span>compare
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>
        <br>&nbsp; &nbsp; 
        <span style="color: #000066; font-weight: bold;">for</span> 
        <span style="color: #009900;">(</span>i 
        <span style="color: #339933;">=</span> 
        <span style="color: #CC0000;">0</span>
        <span style="color: #339933;">;</span> i 
        <span style="color: #339933;">&lt;</span> length 
        <span style="color: #339933;">;</span> i
        <span style="color: #339933;">++</span>
        <span style="color: #009900;">)</span> 
        <span style="color: #009900;">{</span>
        <br>&nbsp; &nbsp; &nbsp; 
        <span style="color: #000066; font-weight: bold;">this</span>.
        <span style="color: #660066;">appendChild</span>
        <span style="color: #009900;">(</span>$children
        <span style="color: #009900;">[</span>_map
        <span style="color: #009900;">[</span>i
        <span style="color: #009900;">]</span>.
        <span style="color: #660066;">index</span>
        <span style="color: #009900;">]</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; &nbsp; 
        <span style="color: #009900;">}</span>
        <br>&nbsp; 
        <br>&nbsp; &nbsp; $this.
        <span style="color: #660066;">phase</span>
        <span style="color: #009900;">(</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>&nbsp; 
        <span style="color: #009900;">}</span>
        <span style="color: #009900;">)</span>
        <span style="color: #339933;">;</span>
        <br>
        <span style="color: #009900;">}</span>
        <span style="color: #339933;">;</span>
       </div> 
       <p>Note: the <code>.phase()</code> function here is just a quick hack without much thought put into it. <a onclick="_gaq.push(['_trackPageview', '/extlink/twitter.com/cowboy']);" href="http://twitter.com/cowboy">@cowboy</a> came up with a <a onclick="_gaq.push(['_trackPageview', '/extlink/gist.github.com/978520']);" href="https://gist.github.com/978520">better solution</a>!</p> 
       <h2>Benchmarking</h2> 
       <p>You can't optimize what you can't quantify. Let's throw some tests at jsPerf and see how our optimizations panned out:</p> 
       <ul> 
        <li><a onclick="_gaq.push(['_trackPageview', '/extlink/jsperf.com/jquery-sorting-children-10']);" href="http://jsperf.com/jquery-sorting-children-10">Sorting 10 Elements</a></li> 
        <li><a onclick="_gaq.push(['_trackPageview', '/extlink/jsperf.com/jquery-sorting-children-20']);" href="http://jsperf.com/jquery-sorting-children-20">Sorting 20 Elements</a></li> 
        <li><a onclick="_gaq.push(['_trackPageview', '/extlink/jsperf.com/jquery-sorting-children-30']);" href="http://jsperf.com/jquery-sorting-children-30">Sorting 30 Elements</a></li> 
       </ul> 
       <p>Surprise: the DOM-detaching thing only benefits Chrome. Firefox and Safari seem to do internal optimizations to prevent reflows on every single DOM mutation. Benefits in Chrome are far less than the losses in Firefox and Safari, so we'll just skip this step. Sorry Schepp :(</p> 
       <h2>Final Sorting Plugin</h2> 
       <p><a onclick="_gaq.push(['_trackPageview', '/extlink/gist.github.com/2818576']);" href="https://gist.github.com/2818576">In a Gist</a>. Enjoy :)</p> 
       <h2>Sorting Numbers Within Strings</h2> 
       <p>This <a onclick="_gaq.push(['_trackPageview', '/extlink/jsfiddle.net/rodneyrehm/5pLLG/']);" href="http://jsfiddle.net/rodneyrehm/5pLLG/">Fiddle</a> has some ideas about how to "properly" sort numbers within strings.</p> 
       <iframe style="width: 100%; height: 300px" src="http://jsfiddle.net/rodneyrehm/5pLLG/embedded/result,js,html,css/" allowfullscreen frameborder="0"></iframe> 
       <h3>Update</h3> 
       <ul> 
        <li>Modified mapped sorting examples according to <a onclick="_gaq.push(['_trackPageview', '/extlink/twitter.com/cowboy']);" href="https://twitter.com/cowboy">@cowboy</a>'s suggestion</li> 
        <li>Added a section about stable and unstable sorting algorithms</li> 
        <li>Added more Info on Chrome's sorting habits</li> 
       </ul> 
       <h2>Further Reading</h2> 
       <ul> 
        <li>Nicholas Zakas explains <a onclick="_gaq.push(['_trackPageview', '/extlink/www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/']);" href="http://www.nczonline.net/blog/2012/09/17/computer-science-in-javascript-insertion-sort/">Insertion Sort</a>, <a onclick="_gaq.push(['_trackPageview', '/extlink/www.nczonline.net/blog/2009/05/26/computer-science-in-javascript-bubble-sort/']);" href="http://www.nczonline.net/blog/2009/05/26/computer-science-in-javascript-bubble-sort/">Bubble Sort</a>, <a onclick="_gaq.push(['_trackPageview', '/extlink/www.nczonline.net/blog/2009/09/08/computer-science-in-javascript-selection-sort/']);" href="http://www.nczonline.net/blog/2009/09/08/computer-science-in-javascript-selection-sort/">Selection Sort</a> and <a onclick="_gaq.push(['_trackPageview', '/extlink/www.nczonline.net/blog/2012/11/27/computer-science-in-javascript-quicksort/']);" href="http://www.nczonline.net/blog/2012/11/27/computer-science-in-javascript-quicksort/">Quick Sort</a>.</li> 
       </ul> 
      </div> 
      <footer class="clearfix"> 
       <span class="visuallyhidden">Categories: </span>
       <a href="https://blog.rodneyrehm.de/categories/4-javascript">javascript</a>, 
       <a href="https://blog.rodneyrehm.de/categories/6-jQuery">jQuery</a> | 
       <a href="/archives/14-Sorting-Were-Doing-It-Wrong.html#comments" title="29 Comments, 10 Trackbacks">29 Comments</a> 
      </footer> 
      <!--
        <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
                 xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/"
                 xmlns:dc="http://purl.org/dc/elements/1.1/">
        <rdf:Description
                 rdf:about="https://blog.rodneyrehm.de/feeds/ei_14.rdf"
                 trackback:ping="https://blog.rodneyrehm.de/comment.php?type=trackback&amp;entry_id=14"
                 dc:title="Sorting - We're Doing It Wrong"
                 dc:identifier="https://blog.rodneyrehm.de/archives/14-Sorting-Were-Doing-It-Wrong.html" />
        </rdf:RDF>
        --> 
      <section id="comments" class="serendipity_comments"> 
       <h3>Comments</h3> 
       <p class="manage_comments">Display comments as <a rel="nofollow" href="/index.php?url=archives/14-Sorting-Were-Doing-It-Wrong.html&amp;serendipity[cview]=linear#comments">Linear</a> | Threaded </p> 
       <article id="c106" class="serendipity_comment odd commentlevel-0"> 
        <h4><a href="http://benalman.com/">Ben Alman</a> on <time datetime="2012-05-29T14:05:21+02:00" pubdate>Tuesday, May 29. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_2c73e69f2c39511bdfe19451cdb71535_978a1a2a80394217a0e39c84f07a7c16_900a644a0bb8cabb38d6f1c180531944" alt="Ben Alman" title="Ben Alman" class="comment_avatar avatar_left" height="80" width="80">Rodney, thanks for the excellent article.</p> 
         <p>I just wanted to mention that you don't need to use a placeholder element when detaching nodes from another node. All you have to do is keep track of the node-to-be-detached's parent and next sibling, and then use insertBefore to replace the detached node.</p> 
         <p>You can see an example as plain old JS:<br> <a onclick="_gaq.push(['_trackPageview', '/extlink/gist.github.com/938767']);" href="https://gist.github.com/938767">https://gist.github.com/938767</a></p> 
         <p>And as a jQuery plugin:<br> <a onclick="_gaq.push(['_trackPageview', '/extlink/gist.github.com/978520']);" href="https://gist.github.com/978520">https://gist.github.com/978520</a></p> 
         <p>(Which reminds me, I really have to publish this plugin)</p> 
         <p>Also, a few minor comments about your mapped sort example:</p> 
         <p>Array#sort both sorts arrays in-place and also returns the sorted array. Your example creates a new array. Which is not a problem, of course, it's just something that might be worth mentioning in the article.</p> 
         <p>Also, instead of pushing an array like <code>[i, map(child)]</code> onto the <code>_map</code> array, I'd recommend pushing an object like <code>{index: i, sortBy: map(child)}</code> onto the <code>_map</code> array. I know it's a few more bytes, but the object literal keys make the code a litle bit easier to read / learn from / maintain than the more compact array indexed syntax.</p> 
         <p>Either way, thanks again and keep up the good work!</p> 
        </div> 
        <footer> 
         <time>14:05</time> | 
         <a class="comment_source_trace" href="#c106" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c108" class="serendipity_comment even commentlevel-0"> 
        <h4><a href="http://blog.millermedeiros.com">Miller Medeiros</a> on <time datetime="2012-05-29T15:23:09+02:00" pubdate>Tuesday, May 29. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_86bbbc4bca15c7e77e7ef38924ed2aa5_2e1599d22dce3e1661b6e63e8514b38e_6f9d523d9230f34e8a3567b648bbadd7" alt="Miller Medeiros" title="Miller Medeiros" class="comment_avatar avatar_left" height="80" width="80">One thing that is important to note is that in Firefox and IE <code>Array#sort</code> is stable, which means items keep same relative position if items are already sorted (if both return zero in the <code>compareFn</code>) while V8 (Chrome, node.js) does a non-stable sort. It's even more important to notice that the behavior changes based on the amount of elements in the array:</p> 
         <p><a onclick="_gaq.push(['_trackPageview', '/extlink/jsbin.com/eqanux/edit#javascript,live']);" href="http://jsbin.com/eqanux/edit#javascript,live">see example</a></p> 
         <p>So if you really need a stable sort don't use the <code>Array#sort</code>, implement a Merge Sort or use <a onclick="_gaq.push(['_trackPageview', '/extlink/millermedeiros.github.com/amd-utils/array.html#sort']);" href="http://millermedeiros.github.com/amd-utils/array.html#sort">amd-utils/array/sort</a> instead.</p> 
         <p>Cheers.</p> 
        </div> 
        <footer> 
         <time>15:23</time> | 
         <a class="comment_source_trace" href="#c108" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c109" class="serendipity_comment odd commentlevel-0"> 
        <h4><a href="http://workswithruby.com">Jan De Poorter</a> on <time datetime="2012-05-29T22:25:46+02:00" pubdate>Tuesday, May 29. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_f58773c5cb32751d9ab3dfde1fe4c800_d804809295c4ef6066487946567ea4a5_29b10d54f2b6c30b904b47857242bb37" alt="Jan De Poorter" title="Jan De Poorter" class="comment_avatar avatar_left" height="80" width="80">Wouldn't creating a hash as a reference work better? It'd allow you to sort the array itself, while still avoiding calculations by doing simple hash lookup. I create a <a onclick="_gaq.push(['_trackPageview', '/extlink/jsfiddle.net/ttsQQ/']);" href="http://jsfiddle.net/ttsQQ/">fiddle as example</a>.</p> 
        </div> 
        <footer> 
         <time>22:25</time> | 
         <a class="comment_source_trace" href="#c109" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c110" class="serendipity_comment even commentlevel-1"> 
        <h4><a href="http://rodneyrehm.de/">Rodney Rehm</a> on <time datetime="2012-05-29T22:36:43+02:00" pubdate>Tuesday, May 29. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_3a517656f148046eafbcda28ddf04657_1fe89044eef1cf027c146e8d7969d8ee_b3f10c3c8d59fafae5f7e0d3ca05fc48" alt="Rodney Rehm" title="Rodney Rehm" class="comment_avatar avatar_left" height="80" width="80">That would work for primitive types. Object properties ("hash keys") are strings. Your example works because you're sorting strings. It would also work for numbers and dates and basically anything with a meaningful <code>.toString()</code>.</p> 
         <p>It would however fail DOMElements and plain objects (for they don't have an automatic and "distinct" string representation). They would all end up using the keys <code>[object HTMLLIElement]</code> and <code>[object Object]</code>.</p> 
        </div> 
        <footer> 
         <time>22:36</time> | 
         <a class="comment_source_trace" href="#c110" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c111" class="serendipity_comment odd commentlevel-2"> 
        <h4><a href="http://workswithruby.com">Jan De Poorter</a> on <time datetime="2012-05-29T22:39:19+02:00" pubdate>Tuesday, May 29. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_f58773c5cb32751d9ab3dfde1fe4c800_d804809295c4ef6066487946567ea4a5_29b10d54f2b6c30b904b47857242bb37" alt="Jan De Poorter" title="Jan De Poorter" class="comment_avatar avatar_left" height="80" width="80">OK. I see when testing it. I thought JS had a better implementation of hashes :-)</p> 
        </div> 
        <footer> 
         <time>22:39</time> | 
         <a class="comment_source_trace" href="#c111" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c112" class="serendipity_comment even commentlevel-0"> 
        <h4><a href="http://nathansweet.me">Nathan Sweet</a> on <time datetime="2012-05-30T22:36:46+02:00" pubdate>Wednesday, May 30. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_782cac4f2cfa8ce76952455dd30385c2_74c02b3b2345d22903e47570853f7ec5_5a4d62e78955ad3335684db264f1211c" alt="Nathan Sweet" title="Nathan Sweet" class="comment_avatar avatar_left" height="80" width="80">Brief aside : If you look at issue tracker for Chrome (http://code.google.com/p/v8/issues/detail?id=90) and the way sort is implemented in V8 (https://github.com/v8/v8/blob/master/src/array.js) you will see that it's actually incorrect that Chrome doesn't use a stable sort. It actually does most of the time. For the effective majority of cases v8 uses a mergesort. In your examples v8 would have probably used a mergesort.</p> 
         <p>I take umbrage with your statistical claims. I don't know if I should care about a 70% performance gain or not, when you give me no context. A 70% performance gain against what? If it's less than a millisecond and I'm only doing it once, I don't care, I'll absolutely produce more readable code for the trade-off. If it's something I'm doing on a continuous basis, then maybe I care, but why.</p> 
         <p>The fact that you created a plugin for this is nice, as it obfuscates all this away from us, but have you tested it using a lot of different use cases (huge sets, constantly reused small sets, etc). Was this actually worth it? Is my question I guess. I don't think this article is showing enough homework, I'm not trying to say you didn't do all your homework, but if you did it's not all here.</p> 
         <p>This comment was made in good faith. Keep up the good work Rodney!</p> 
        </div> 
        <footer> 
         <time>22:36</time> | 
         <a class="comment_source_trace" href="#c112" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c117" class="serendipity_comment odd commentlevel-1"> 
        <h4><a href="http://rodneyrehm.de/">Rodney Rehm</a> on <time datetime="2012-05-31T02:30:16+02:00" pubdate>Thursday, May 31. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_3a517656f148046eafbcda28ddf04657_1fe89044eef1cf027c146e8d7969d8ee_b3f10c3c8d59fafae5f7e0d3ca05fc48" alt="Rodney Rehm" title="Rodney Rehm" class="comment_avatar avatar_left" height="80" width="80">I've added some more info and links regarding Chrome's sorting habits - and in fact corrected my dead wrong claim ECMAScript would ask for a stable sort.</p> 
         <p>How do you come to claim "the majority cases" would use MergeSort? The code you pointed to clearly says it's InsertionSort and clearly says it's only invoked for arrays with less than 11 elements. In my book that cannot - by any definition - be the "majority of cases".</p> 
         <p>If you care about wasting CPU time is up to you. Even if we're talking milliseconds. The point of this post was to show how the comparison function does, what (not so obvious) short-coming it has and how to potentially circumvent the problem.</p> 
        </div> 
        <footer> 
         <time>02:30</time> | 
         <a class="comment_source_trace" href="#c117" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c113" class="serendipity_comment even commentlevel-0"> 
        <h4><a href="http://blog.neolocus.com">Loke Locus</a> on <time datetime="2012-05-30T18:58:30+02:00" pubdate>Wednesday, May 30. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/fetchAvatar_c4c6df8e6994a5f304fa6c20f97cf8ebhttp%3A%2F%2Fblog.neolocus.com_a2c3f14e48789bf1688863f98b3242a4_6304413821270df5961b2aee9a6455c7Loke+Locus_113" alt="Loke Locus" title="Loke Locus" class="comment_avatar avatar_left" height="80" width="80">Sorting has to happen over same type. If you are comparing integer, and Object, you would better handle that in your comparison function in a like manner with a like intention.</p> 
        </div> 
        <footer> 
         <time>18:58</time> | 
         <a class="comment_source_trace" href="#c113" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c114" class="serendipity_comment odd commentlevel-0"> 
        <h4>Anonymole on <time datetime="2012-05-30T17:06:15+02:00" pubdate>Wednesday, May 30. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_d41d8cd98f00b204e9800998ecf8427e_57475cf7d9b69c70ed7cbb16cd6d7a4e_7d82aff5584eff1293480f3d3ecb0bf2" alt="Anonymole" title="Anonymole" class="comment_avatar avatar_left" height="80" width="80">What's with the unreadable technique of declaring multiple vars on multiple lines separated by commas?</p> 
         <p>var a, b, c, d;</p> 
         <p>This becomes difficult to 'instantly' discern what those terms are doing hangin' out in the breeze.</p> 
         <p>var a; var b; var c; var d;</p> 
         <p>Provides INSTANT understanding what we have 4 vars.</p> 
         <p>or</p> 
         <p>var a, b, c, d;</p> 
         <p>Again, INSTANT understanding.</p> 
         <p>But line wrapping using commas - bad form, difficult to instantly interpret and just looks sloppy.</p> 
        </div> 
        <footer> 
         <time>17:06</time> | 
         <a class="comment_source_trace" href="#c114" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c115" class="serendipity_comment even commentlevel-0"> 
        <h4>austin on <time datetime="2012-05-30T17:47:45+02:00" pubdate>Wednesday, May 30. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_d41d8cd98f00b204e9800998ecf8427e_3acf152393048d53644754b8bdabac39_229979fce5174c17d4645bf8752dae1e" alt="austin" title="austin" class="comment_avatar avatar_left" height="80" width="80">another little javascript time sink: array.splice() i found this when making a steganography app in javascript, i had an array with a bunch of elements (4 per pixel for an image) i had a second one which was an array of indicies mapping to the original array which i would pick a random number from 1-length do things to the original array and remove that index(and the next 3) using array.splice() it was horribly horribly slow. i changed it to instead change the value of that element to -1 and then just pick another random number if the element was -1 ugly but a massive speed improvement if you can avoid array.splice() do so</p> 
        </div> 
        <footer> 
         <time>17:47</time> | 
         <a class="comment_source_trace" href="#c115" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c137" class="serendipity_comment odd commentlevel-0"> 
        <h4><a href="http://www.gijsk.com/">Gijs</a> on <time datetime="2012-06-08T14:50:55+02:00" pubdate>Friday, June 8. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_49178f43d126e7873961b47a45aa4211_410fad5de3812b3810955d277445bced_2a3da254cb49167bf82b3a66068abe61" alt="Gijs" title="Gijs" class="comment_avatar avatar_left" height="80" width="80">Skimming the article, I spent a while being flabbergasted at this bit:</p> 
         <p>"InsertionSort and BubbleSort (Apple and Mozilla) "</p> 
         <p>Umm, really? Mozilla uses bubblesort? Really really?</p> 
         <p>Well, no. As you point out in the introduction, they use (a stable implementation of) mergesort. Might be worth fixing this so other people aren't misled. :-)</p> 
        </div> 
        <footer> 
         <time>14:50</time> | 
         <a class="comment_source_trace" href="#c137" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c138" class="serendipity_comment even commentlevel-1"> 
        <h4><a href="http://rodneyrehm.de/">Rodney Rehm</a> on <time datetime="2012-06-08T14:55:37+02:00" pubdate>Friday, June 8. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_3a517656f148046eafbcda28ddf04657_1fe89044eef1cf027c146e8d7969d8ee_b3f10c3c8d59fafae5f7e0d3ca05fc48" alt="Rodney Rehm" title="Rodney Rehm" class="comment_avatar avatar_left" height="80" width="80">Wah, how did that happen? Fixed, Thanks!</p> 
        </div> 
        <footer> 
         <time>14:55</time> | 
         <a class="comment_source_trace" href="#c138" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c140" class="serendipity_comment odd commentlevel-0"> 
        <h4><a href="https://github.com/willemmulder">Willem Mulder</a> on <time datetime="2012-06-08T16:05:25+02:00" pubdate>Friday, June 8. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_107d4fb7b1c51e5ae86891ccd6283192_a3010d42542d17b15fb9d6eabed7008e_3ce54025e62807616e45a4b401866b41" alt="Willem Mulder" title="Willem Mulder" class="comment_avatar avatar_left" height="80" width="80">Hi Rodney, nice article! One suggestion:</p> 
         <p>for (var i=0, length = list.length; i &lt; length; i++) { }</p> 
         <p>can be rewritten more easily as</p> 
         <p>for(var i in list) { }</p> 
         <p>Also, the DOM insertion 'optimization' that didn't work is because the DOM is not rerendered until running scripts have ended. This has to do with the single-threaded nature of Javascript execution in browsers! Thus, optimizing for DOM changes while the script is running is probably not really going to help as far as rendering is concerned...</p> 
        </div> 
        <footer> 
         <time>16:05</time> | 
         <a class="comment_source_trace" href="#c140" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c143" class="serendipity_comment even commentlevel-1"> 
        <h4><a href="http://rodneyrehm.de/">Rodney Rehm</a> on <time datetime="2012-06-08T18:55:06+02:00" pubdate>Friday, June 8. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_3a517656f148046eafbcda28ddf04657_1fe89044eef1cf027c146e8d7969d8ee_b3f10c3c8d59fafae5f7e0d3ca05fc48" alt="Rodney Rehm" title="Rodney Rehm" class="comment_avatar avatar_left" height="80" width="80"><a onclick="_gaq.push(['_trackPageview', '/extlink/www.2ality.com/2011/04/iterating-over-arrays-and-objects-in.html']);" href="http://www.2ality.com/2011/04/iterating-over-arrays-and-objects-in.html">Iterating over arrays and objects</a> has one thing to say about <code>for..in</code> and arrays: »Don’t use for arrays. It iterates over both array indices and property keys. There will thus be problems as soon as someone adds a property to an array.«</p> 
         <p>So no, please do NOT use <code>for (var i in list)</code> if list is an array.</p> 
        </div> 
        <footer> 
         <time>18:55</time> | 
         <a class="comment_source_trace" href="#c143" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c152" class="serendipity_comment odd commentlevel-2"> 
        <h4><a href="https://github.com/willemmulder">Willem Mulder</a> on <time datetime="2012-06-11T08:51:32+02:00" pubdate>Monday, June 11. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_107d4fb7b1c51e5ae86891ccd6283192_a3010d42542d17b15fb9d6eabed7008e_3ce54025e62807616e45a4b401866b41" alt="Willem Mulder" title="Willem Mulder" class="comment_avatar avatar_left" height="80" width="80">Yes, for...in is an Object iterator, but it's still useful for Arrays. You should just ensure that no Object properties have been added to the Array. But you have the same problem with using arr.length obviously: if someone has set .length to some arbitrary value, the for(... arr.length...) will not work as well. It all comes down to knowing your code and using the right functions accordingly. I really prefer readable code, and I know there's no Object properties, so I really like using for...in..!</p> 
        </div> 
        <footer> 
         <time>08:51</time> | 
         <a class="comment_source_trace" href="#c152" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c142" class="serendipity_comment even commentlevel-0"> 
        <h4><a href="http://www.premierpilatesny.com/">Bruce Ingalls</a> on <time datetime="2012-06-08T18:26:00+02:00" pubdate>Friday, June 8. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/fetchAvatar_9ddda86b3276d07d8935bbc7e4206950http%3A%2F%2Fwww.premierpilatesny.com%2F_a6ca2f971431ec8c4fd847d49178c794_4d1ea82cf3ec2dc3fccd16b69e24e56cBruce+Ingalls_142" alt="Bruce Ingalls" title="Bruce Ingalls" class="comment_avatar avatar_left" height="80" width="80">Still doing it wrong! First, assess whether your goal is elegance, efficiency, or time to market. So far, our industry prefers the latter.</p> 
         <p>Wouldn't these DOM elements you wish to sort, require HTML entities for extended ASCII characters? Thus, the overhead of a Locale compare should not be needed.</p> 
         <p>Unfortunately, schools seem to only teach general purpose sorts. You missed that you have a targeted case, which fits a <a onclick="_gaq.push(['_trackPageview', '/extlink/en.wikipedia.org/wiki/Sorting_algorithm#Distribution_sort']);" href="http://en.wikipedia.org/wiki/Sorting_algorithm#Distribution_sort">distribution sort</a></p> 
        </div> 
        <footer> 
         <time>18:26</time> | 
         <a class="comment_source_trace" href="#c142" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c144" class="serendipity_comment odd commentlevel-0"> 
        <h4>Gabriel Abejon on <time datetime="2012-06-08T19:40:46+02:00" pubdate>Friday, June 8. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_d41d8cd98f00b204e9800998ecf8427e_e5179bae4aa5c9022bd28f251feca1b0_81f57729bcffc2827c8af257a03be857" alt="Gabriel Abejon" title="Gabriel Abejon" class="comment_avatar avatar_left" height="80" width="80">The map, sort, map idiom to reduce the cost of sorting on calculated values is often called a <a onclick="_gaq.push(['_trackPageview', '/extlink/en.wikipedia.org/wiki/Schwartzian_transform']);" href="http://en.wikipedia.org/wiki/Schwartzian_transform">Schwartzian transform</a></p> 
        </div> 
        <footer> 
         <time>19:40</time> | 
         <a class="comment_source_trace" href="#c144" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c145" class="serendipity_comment even commentlevel-0"> 
        <h4><a href="http://dockyard.com">Brian Cardarella</a> on <time datetime="2012-06-08T23:04:58+02:00" pubdate>Friday, June 8. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_dcb31d195a77686b17849a1ced52dbba_ed5f3e2d77dcf44a67efa72e09e9f28f_a9fea65956da8cd2a0a9a079b21e4c8d" alt="Brian Cardarella" title="Brian Cardarella" class="comment_avatar avatar_left" height="80" width="80">Wow, excellent post.</p> 
        </div> 
        <footer> 
         <time>23:04</time> | 
         <a class="comment_source_trace" href="#c145" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c147" class="serendipity_comment odd commentlevel-0"> 
        <h4><a href="http://simplecreativity.co.uk">Dave Tonge</a> on <time datetime="2012-06-09T07:31:39+02:00" pubdate>Saturday, June 9. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_cc4852e9adb38802e24e535a21f139b5_aeb289c283986e7504855ae7e38b6626_8c787e18db2c9996d4b383b6713e91d6" alt="Dave Tonge" title="Dave Tonge" class="comment_avatar avatar_left" height="80" width="80">The <a onclick="_gaq.push(['_trackPageview', '/extlink/underscorejs.org/']);" href="http://underscorejs.org/">UnderscoreJS</a> sortBy function is a good example of mapping before sorting:</p> 
         <pre><code>_.sortBy = function(obj, val, context) {
  var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
  return _.pluck(_.map(obj, function(value, index, list) {
    return {
      value : value,
      criteria : iterator.call(context, value, index, list)
    };
  }).sort(function(left, right) {
    var a = left.criteria, b = right.criteria;
    if (a === void 0) return 1;
    if (b === void 0) return -1;
    return a &amp;lt; b ? -1 : a &amp;gt; b ? 1 : 0;
  }), 'value');
};
</code></pre> 
         <p>Using a functional helper library like underscore often makes for much more readable code.</p> 
        </div> 
        <footer> 
         <time>07:31</time> | 
         <a class="comment_source_trace" href="#c147" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c219" class="serendipity_comment even commentlevel-1"> 
        <h4><a href="http://fashioningchange.com/blog/kevin">Kevin Ball</a> on <time datetime="2012-07-02T00:00:28+02:00" pubdate>Monday, July 2. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_ce6da3e80b910ab452ec2fbb77f4a6f5_9f734bbb29c7d33b758c4d65aa2a2a29_03c3e962cac3c7de7bd3c6ed2f3443c3" alt="Kevin Ball" title="Kevin Ball" class="comment_avatar avatar_left" height="80" width="80">Underscore's functional approach helps in so many ways... I find myself using it for more and more things that I used to use jQuery for, and not only do I end up with better, more maintainable code, but it is usually easier to write in the first place.</p> 
        </div> 
        <footer> 
         <time>00:00</time> | 
         <a class="comment_source_trace" href="#c219" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c148" class="serendipity_comment odd commentlevel-0"> 
        <h4>Creage on <time datetime="2012-06-09T23:26:25+02:00" pubdate>Saturday, June 9. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/fetchAvatar_d41d8cd98f00b204e9800998ecf8427e_73effbc524c3913e29560edf9870a663_a002e567b12c95ad06d1bc66b510b274Creage_148" alt="Creage" title="Creage" class="comment_avatar avatar_left" height="80" width="80">Strange that nobody here mentioned the Tinysort plugin for jQ - http://tinysort.sjeiti.com</p> 
         <p>Accoding to sources it uses mapping already, and provides much more abilities on sorting collections in jQ.</p> 
        </div> 
        <footer> 
         <time>23:26</time> | 
         <a class="comment_source_trace" href="#c148" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c174" class="serendipity_comment even commentlevel-0"> 
        <h4>Brian on <time datetime="2012-06-15T18:17:46+02:00" pubdate>Friday, June 15. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/fetchAvatar_d41d8cd98f00b204e9800998ecf8427e_965dd88de2bf006d0d3571e794de956b_4d236810821e8e83a025f2a83ea31820Brian_174" alt="Brian" title="Brian" class="comment_avatar avatar_left" height="80" width="80">Regarding for (var i=0, length = list.length; i &lt; length; i++) { }, I agree that for (var i in list) isn't a good idea... but what about Array.forEach()?</p> 
         <p>Switching from a basic Array.sort() here cut the time in this code in half (11ms to 6ms) for even a small number of items (8) in the CONSTANTS.COLORS object. ($.l() is a gettext equivalent)</p> 
         <pre><code>        var colors    = Object.keys(CONSTANTS.COLORS)
          , colorsMap = [] 
          ; 

        colors.forEach(function (color, i) {
            colorsMap.push({ index: i
                           , value: $.l(color).toLowerCase()
                           });
        });

        colorsMap.sort(function (a, b) {
          return a.value &amp;gt; b.value ? 1 : -1;
        }).map(function populate_colors_list (map) {
            var colorItem   = colors[map.index]
              , color       = CONSTANTS.COLORS[colorItem]
              , lsItemName  = 'caaBatch_colors_' + colorItem
              , $thisOption = $make('option', { 'class' : 'colorOption'
                                              , value   : colorItem
                                              }).data('default', color)
                                                .text($.l(colorItem));
            if (null === localStorage.getItem(lsItemName)) {
                localStorage.setItem(lsItemName, color);
            }
            colorOptions.push($thisOption);
        });
</code></pre> 
        </div> 
        <footer> 
         <time>18:17</time> | 
         <a class="comment_source_trace" href="#c174" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c245" class="serendipity_comment odd commentlevel-0"> 
        <h4><a href="http://nczonline.net">Nicholas C. Zakas</a> on <time datetime="2012-08-01T18:59:46+02:00" pubdate>Wednesday, August 1. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_187c8c9955b35d431ea32b0e377209c5_b605f11383e1ec18717bca5a5c36ee15_d81dd246b2cfdfe77d864ee5c7883329" alt="Nicholas C. Zakas" title="Nicholas C. Zakas" class="comment_avatar avatar_left" height="80" width="80">I just wanted to say excellent write up. This is definitely piqued my interest in sorting performance.</p> 
        </div> 
        <footer> 
         <time>18:59</time> | 
         <a class="comment_source_trace" href="#c245" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c246" class="serendipity_comment even commentlevel-0"> 
        <h4><a href="http://nczonline.net">Nicholas C. Zakas</a> on <time datetime="2012-08-01T18:12:27+02:00" pubdate>Wednesday, August 1. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_187c8c9955b35d431ea32b0e377209c5_b605f11383e1ec18717bca5a5c36ee15_d81dd246b2cfdfe77d864ee5c7883329" alt="Nicholas C. Zakas" title="Nicholas C. Zakas" class="comment_avatar avatar_left" height="80" width="80">Excellent post. I just wanted to point out a slight issue with your comparators. The function you pass to Array#sort() should return three different conditions: a negative number if a &lt; b, a positive number if a &gt; b, and zero if a == b. In your examples, you always return either a positive or negative number, which means that two of the three cases are being handled in the same way, altering the outcome of sore.</p> 
        </div> 
        <footer> 
         <time>18:12</time> | 
         <a class="comment_source_trace" href="#c246" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c248" class="serendipity_comment odd commentlevel-1"> 
        <h4><a href="http://rodneyrehm.de/">Rodney Rehm</a> on <time datetime="2012-08-01T20:43:21+02:00" pubdate>Wednesday, August 1. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_3a517656f148046eafbcda28ddf04657_1fe89044eef1cf027c146e8d7969d8ee_b3f10c3c8d59fafae5f7e0d3ca05fc48" alt="Rodney Rehm" title="Rodney Rehm" class="comment_avatar avatar_left" height="80" width="80">I had hoped the following (third sentence below the video) would've clarified my simplification: »Since a is already positioned before b, returning 0 and -1 yield the same result, which usually allows to remove the extra equality comparison and end up with a &gt; b ? 1 : -1.« But you're right, obviously.</p> 
        </div> 
        <footer> 
         <time>20:43</time> | 
         <a class="comment_source_trace" href="#c248" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c249" class="serendipity_comment even commentlevel-0"> 
        <h4>Micha? Czernow on <time datetime="2012-08-04T01:36:32+02:00" pubdate>Saturday, August 4. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/fetchAvatar_d41d8cd98f00b204e9800998ecf8427e__70bc1d19b1149403e7cc834504d12a89Micha%C5%82+Czernow_249" alt="Micha? Czernow" title="Micha? Czernow" class="comment_avatar avatar_left" height="80" width="80">Array.forEach() is slower than for(){} as Nicolas Zakas has pointed out in his book abot efficient JS.</p> 
         <p>About preventing reflows. You can use documentFragment or just make UL display: none - and than operates on them.</p> 
         <p>Great read, learned a lot.</p> 
        </div> 
        <footer> 
         <time>01:36</time> | 
         <a class="comment_source_trace" href="#c249" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c280" class="serendipity_comment odd commentlevel-0"> 
        <h4><a href="http://anuary.com/">Gajus Kuizinas</a> on <time datetime="2012-09-03T21:58:09+02:00" pubdate>Monday, September 3. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_977fa477bf11cef3e8f943b7f09464d7_d458bf7a80855c9461d0a76e8f2c76b9_42d85d7e127e8a3e90840acd169c7097" alt="Gajus Kuizinas" title="Gajus Kuizinas" class="comment_avatar avatar_left" height="80" width="80">Hello Rodney, I've read your article as part of the research I've made when creating <a onclick="_gaq.push(['_trackPageview', '/extlink/anuary.com/57/sorting-large-tables-with-javascript']);" href="http://anuary.com/57/sorting-large-tables-with-javascript">jQuery table-sort plugin</a>. It is a table sorting plugin that can sort tables with up-to 100,000 rows (didn't dare to test with more rows) within 150ms. Thank you for taking the time to blog about your experience.</p> 
        </div> 
        <footer> 
         <time>21:58</time> | 
         <a class="comment_source_trace" href="#c280" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c288" class="serendipity_comment even commentlevel-0"> 
        <h4>josh on <time datetime="2012-09-10T08:25:40+02:00" pubdate>Monday, September 10. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/fetchAvatar_d41d8cd98f00b204e9800998ecf8427e__f94adcc3ddda04a8f34928d862f404b4josh_288" alt="josh" title="josh" class="comment_avatar avatar_left" height="80" width="80">If you're going to do case conversion to get a case-insensitive comparison, use UPPERCASE. Otherwise you won't match "ß" to "SS", eg. Still not as good as a real case-insensitive comparison, but what can you do?</p> 
        </div> 
        <footer> 
         <time>08:25</time> | 
         <a class="comment_source_trace" href="#c288" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
       <article id="c289" class="serendipity_comment odd commentlevel-1"> 
        <h4><a href="http://rodneyrehm.de/">Rodney Rehm</a> on <time datetime="2012-09-10T08:33:30+02:00" pubdate>Monday, September 10. 2012</time>:</h4> 
        <div class="serendipity_commentBody clearfix content"> 
         <p><img src="https://blog.rodneyrehm.de/index.php?/plugin/cachedAvatar_3a517656f148046eafbcda28ddf04657_1fe89044eef1cf027c146e8d7969d8ee_b3f10c3c8d59fafae5f7e0d3ca05fc48" alt="Rodney Rehm" title="Rodney Rehm" class="comment_avatar avatar_left" height="80" width="80">Not sure what you're getting at. (At least) Firefox 15 reports</p> 
         <pre><code>'ß'.toLowerCase() === 'ß';
'ß'.toUpperCase() === 'ß';
</code></pre> 
        </div> 
        <footer> 
         <time>08:33</time> | 
         <a class="comment_source_trace" href="#c289" title="Permanent link for this comment">Link</a> 
        </footer> 
       </article> 
      </section> 
      <a id="feedback"></a> 
      <p class="serendipity_msg_important">The author does not allow comments to this entry</p> 
     </article> 
    </div> 
    <aside id="sidebar_right"> 
     <h2 class="visuallyhidden">Sidebar</h2> 
     <section class="sidebar_plugin even serendipity_archives_plugin"> 
      <h3>Archives</h3> 
      <div class="sidebar_content">
       <ul class="plainList"> 
        <li><a href="/archives/2017/09.html" title="September 2017">September 2017</a></li> 
        <li><a href="/archives/2017/08.html" title="August 2017">August 2017</a></li> 
        <li><a href="/archives/2017/07.html" title="July 2017">July 2017</a></li> 
        <li><a href="/index.php?frontpage">Recent...</a></li> 
        <li><a href="https://blog.rodneyrehm.de/archive">Older...</a></li> 
       </ul> 
      </div> 
     </section> 
     <section class="sidebar_plugin odd serendipity_html_nugget_plugin"> 
      <div class="sidebar_content">
       <p><a href="http://feeds.feedburner.com/rodneyrehm" rel="alternate" type="application/rss+xml"><img src="https://www.feedburner.com/fb/images/pub/feed-icon16x16.png" alt="" style="vertical-align:middle;border:0"></a>&nbsp;<a href="https://feeds.feedburner.com/rodneyrehm" rel="alternate" type="application/rss+xml">Subscribe in a reader</a></p>
      </div> 
     </section> 
     <section class="sidebar_plugin even serendipity_html_nugget_plugin"> 
      <h3>About The Author</h3> 
      <div class="sidebar_content">
       <p><img src="https://rodneyrehm.de/t/avatar/avatar-80x80.jpg" width="80" height="80" alt="Rodney Rehm" style="float:right;" class="serendipity_image_right"></p> 
       <p><a onclick="_gaq.push(['_trackPageview', '/extlink/twitter.com/rodneyrehm']);" href="https://twitter.com/rodneyrehm">@rodneyrehm</a> on Twitter. Pretends to be a web developer for 10+ years, mainly doing PHP and Javascript.</p> 
       <p>Created <a onclick="_gaq.push(['_trackPageview', '/extlink/medialize.github.com/URI.js/']);" href="http://medialize.github.com/URI.js/">URI.js</a>, <a onclick="_gaq.push(['_trackPageview', '/extlink/medialize.github.com/jQuery-contextMenu/']);" href="http://medialize.github.com/jQuery-contextMenu/">jQuery Context Menu</a>, <a onclick="_gaq.push(['_trackPageview', '/extlink/github.com/rodneyrehm/CFPropertyList']);" href="https://github.com/rodneyrehm/CFPropertyList">Apple's PList in PHP</a>. Works on <a onclick="_gaq.push(['_trackPageview', '/extlink/www.smarty.net/']);" href="http://www.smarty.net/">Smarty - Template Engine</a>, built a business process management tool called <a onclick="_gaq.push(['_trackPageview', '/extlink/gallestro.de/']);" href="http://gallestro.de/">gallestro</a> and is currently working on putting <abbr title="User Interfaces">UIs</abbr> on (a very small part of) the <abbr title="Internet Of Things">IOT</abbr>.</p> 
       <p>Speaks about web development on the <a onclick="_gaq.push(['_trackPageview', '/extlink/workingdraft.de/']);" href="http://workingdraft.de/">Workingdraft Podcast</a> (German, weekly). Pushes the occasional JavaScript thing to <a onclick="_gaq.push(['_trackPageview', '/extlink/twitter.com/jscentral']);" href="https://twitter.com/jscentral">@jscentral</a>. Loves attending <a onclick="_gaq.push(['_trackPageview', '/extlink/lanyrd.com/profile/rodneyrehm/']);" href="http://lanyrd.com/profile/rodneyrehm/">conferences</a>.</p> 
       <p>More useless information on <a onclick="_gaq.push(['_trackPageview', '/extlink/rodneyrehm.de/en/']);" href="http://rodneyrehm.de/en/">rodneyrehm.de</a></p> 
      </div> 
     </section> 
    </aside> 
   </div> 
   <footer id="colophon"> 
    <small lang="en">Powered by <a href="http://s9y.org">Serendipity</a> &amp; the <a href="http://github.com/yellowled/s9y-2k11">2k11</a> theme.</small> 
   </footer> 
  </div> 
  <script src="/templates/yellowled/js/2k11.min.js"></script>   
 </body>
</html>