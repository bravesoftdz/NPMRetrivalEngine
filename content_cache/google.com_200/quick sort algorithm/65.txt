<!doctype html>
<html lang="en-us">
 <head> 
  <link href="https://gmpg.org/xfn/11" rel="profile"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta http-equiv="content-type" content="text/html; charset=utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1"> 
  <title>
quicksort in array and linked list · Fleeting Years
</title> 
  <link rel="stylesheet" href="/public/css/poole.css"> 
  <link rel="stylesheet" href="/public/css/syntax.css"> 
  <link rel="stylesheet" href="/public/css/lanyon.css"> 
  <link rel="stylesheet" href="/public/css/style.css"> 
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/public/apple-touch-icon-precomposed.png"> 
  <link rel="shortcut icon" href="/public/favicon.ico"> 
  <link rel="alternate" type="application/rss+xml" title="RSS" href="/atom.xml"> 
 </head> 
 <body> 
  <div class="wrap"> 
   <div class="masthead"> 
    <div class="container"> 
     <h3 class="masthead-title"> <a href="/" title="Home">Fleeting Years</a> <small>Time goes.</small> </h3> 
     <nav class="head-nav"> 
      <a class="head-nav-item" href="/">Home</a> 
      <a class="head-nav-item" href="/about.html">About</a> 
      <a class="head-nav-item" href="/archive.html">Archive</a> 
      <a class="head-nav-item" href="/license.html">License</a> 
      <a class="head-nav-item" href="/links.html">Links</a> 
     </nav> 
    </div> 
   </div> 
   <div class="container content"> 
    <div class="post"> 
     <h1 class="post-title">quicksort in array and linked list</h1> 
     <span class="post-date">25 May 2016</span> 
     <p><a href="https://en.wikipedia.org/wiki/Quicksort">Quicksort</a> is a usual algorithm for sorting, with average time complexity $O(n log(n))$ and worst $O(n^2)$, and (stack depth) space complexity $O(log(n))$. As an exercise, I wrote down the quicksort for array and linked list in Java here.</p> 
     <p>For the array, the code is kind of trivial. Select the first element as the pivot, then scan and swap the elements less than pivot with the elements at the pointer position, in the end swap the pivot and the last smaller-than-pivot element, so that we obtain the position of the pivot and go on.</p> 
     <p>Bonus: We could implement the <code class="highlighter-rouge">findKthLargest</code> using quick select.</p> 
     <div class="language-java highlighter-rouge">
      <pre class="highlight"><code><span class="c1">// Solution.java</span>

<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">quickSort</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">array</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="o">){</span>
      <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="n">quick</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
  <span class="o">}</span>
  
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">findKthLargest</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// f([11,12,13], 1) =&gt; 13</span>
    <span class="c1">// f([11,12,13], 2) =&gt; 12</span>
    <span class="k">assert</span><span class="o">(</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">k</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="o">&lt;=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">targetIdx</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="n">k</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">start</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">end</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
      <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">targetIdx</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">array</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
      <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">targetIdx</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">start</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">end</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">array</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">quick</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">){</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">end</span><span class="o">){</span>
      <span class="k">return</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
    <span class="n">quick</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">mid</span><span class="o">);</span>
    <span class="n">quick</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kt">int</span> <span class="nf">partition</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">){</span>
    <span class="c1">// start inclusive</span>
    <span class="c1">// end exclusive</span>
    <span class="c1">// return the pivot position</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">end</span><span class="o">){</span>
      <span class="k">return</span> <span class="n">start</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">start</span><span class="o">];</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">end</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">array</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">&lt;=</span> <span class="n">pivot</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">swap</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="n">swap</span><span class="o">(</span><span class="n">array</span><span class="o">,</span> <span class="n">start</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">i</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">){</span>
    <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">x</span><span class="o">];</span>
    <span class="n">array</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">array</span><span class="o">[</span><span class="n">y</span><span class="o">];</span>
    <span class="n">array</span><span class="o">[</span><span class="n">y</span><span class="o">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">1</span><span class="o">};</span>
    <span class="n">Solution</span> <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Solution</span><span class="o">();</span>
    <span class="n">s</span><span class="o">.</span><span class="na">quickSort</span><span class="o">(</span><span class="n">array</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">array</span><span class="o">));</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre> 
     </div> 
     <p>For the linked list, the code is less intuitive. The key point is that we can directly move the the nodes to the beginning in linked list, as a result the pivot is the start node that has been shifted in the end.</p> 
     <div class="language-java highlighter-rouge">
      <pre class="highlight"><code><span class="c1">// Solution.java</span>

<span class="kd">class</span> <span class="nc">ListNode</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
  <span class="kd">public</span> <span class="n">ListNode</span> <span class="n">next</span><span class="o">;</span>
  <span class="kd">public</span> <span class="nf">ListNode</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">quickSort</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
      <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="nf">quick</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="n">ListNode</span> <span class="nf">quick</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">start</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">end</span><span class="o">){</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span> <span class="o">||</span> <span class="n">start</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="n">end</span><span class="o">){</span>
      <span class="k">return</span> <span class="n">start</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="n">ListNode</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">partition</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
    <span class="n">ListNode</span> <span class="n">resultLeft</span> <span class="o">=</span> <span class="n">quick</span><span class="o">(</span><span class="n">result</span><span class="o">[</span><span class="mi">0</span><span class="o">],</span> <span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
    <span class="n">ListNode</span> <span class="n">resultRight</span> <span class="o">=</span> <span class="n">quick</span><span class="o">(</span><span class="n">result</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">next</span><span class="o">,</span> <span class="n">end</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">resultLeft</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="n">ListNode</span><span class="o">[]</span> <span class="nf">partition</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">start</span><span class="o">,</span> <span class="n">ListNode</span> <span class="n">end</span><span class="o">){</span>
    <span class="c1">// start inclusive</span>
    <span class="c1">// end exclusive</span>
    <span class="c1">// return the new start node and the pivot node</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">start</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">start</span> <span class="o">==</span> <span class="n">end</span> <span class="o">||</span> <span class="n">start</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="n">end</span><span class="o">){</span>
      <span class="k">return</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">[]</span> <span class="o">{</span><span class="n">start</span><span class="o">,</span> <span class="n">start</span><span class="o">};</span>
    <span class="o">}</span>
    <span class="n">ListNode</span> <span class="n">dummy</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="n">dummy</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span>

    <span class="k">for</span> <span class="o">(</span><span class="n">ListNode</span> <span class="n">j</span> <span class="o">=</span> <span class="n">start</span><span class="o">;</span> <span class="n">j</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="n">end</span><span class="o">;</span> <span class="n">j</span> <span class="o">=</span> <span class="n">j</span><span class="o">.</span><span class="na">next</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">while</span> <span class="o">(</span><span class="n">j</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">value</span> <span class="o">&lt;=</span> <span class="n">start</span><span class="o">.</span><span class="na">value</span><span class="o">){</span>
        <span class="n">ListNode</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">j</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="n">j</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">j</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="n">tmp</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="n">dummy</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">return</span> <span class="k">new</span> <span class="n">ListNode</span><span class="o">[]</span> <span class="o">{</span><span class="n">dummy</span><span class="o">.</span><span class="na">next</span><span class="o">,</span> <span class="n">start</span><span class="o">};</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre> 
     </div> 
     <p>Quicksort and the concepts of partition is kind of important in interview and coding. Hopefully I can always understand and remember the algorithm clearly.</p> 
    </div> 
    <div class="related"> 
     <h2>Related Posts</h2> 
     <ul class="related-posts"> 
      <li> <h3> <a href="/2017/04/open-powershell-window-here.html"> enable "Open PowerShell window here" in right click context menu <small>06 Apr 2017</small> </a> </h3> </li> 
      <li> <h3> <a href="/2017/04/source-han-sans-and-source-han-serif.html"> ????????? <small>04 Apr 2017</small> </a> </h3> </li> 
      <li> <h3> <a href="/2017/02/electron-as-gui-of-python-apps-updated.html"> Electron as GUI of Python Applications (Updated) <small>14 Feb 2017</small> </a> </h3> </li> 
     </ul> 
    </div> 
    <div class="comment"> 
     <div class="disqus"> 
      <hr> 
      <div id="disqus_thread"></div> 
      <script type="text/javascript">
      var disqus_shortname = "fyears";
      var disqus_url = "http://www.fyears.org/2016/05/quicksort-in-array-and-linked-list.html";
      (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'https://' + disqus_shortname + '.disqus.com/embed.js?https';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
      })();
  </script> 
      <noscript>
       Please enable JavaScript to view the 
       <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a>
      </noscript> 
     </div> 
    </div> 
   </div> 
  </div> 
  <footer> 
   <div class="container"> 
    <p> © 2017. All rights reserved. </p> 
    <p> Theme modified from <a href="https://github.com/poole/lanyon" target="_blank">lanyon</a>. </p> 
   </div> 
  </footer> 
  <script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [['$','$'], ['\\(','\\)']],
      displayMath: [['$$','$$'], ['\\[','\\]']],
      processEscapes: true,
      skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
    }
  });
</script> 
  <script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>   
 </body>
</html>