<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
 <head profile="http://gmpg.org/xfn/11"> 
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> 
  <title>  Skip lists are fascinating!</title> 
  <link rel="stylesheet" href="http://igoro.com/wordpress/wp-content/themes/blueggrace/style.css" type="text/css" media="screen"> 
  <link rel="alternate" type="application/rss+xml" title="Igor Ostrovsky Blogging RSS Feed" href="http://igoro.com/feed/"> 
  <link rel="pingback" href="http://igoro.com/wordpress/xmlrpc.php"> 
  <link rel="alternate" type="application/rss+xml" title="Igor Ostrovsky Blogging » Skip lists are fascinating! Comments Feed" href="http://igoro.com/archive/skip-lists-are-fascinating/feed/"> 
  <link rel="stylesheet" id="wordpress-popular-posts-css" href="http://igoro.com/wordpress/wp-content/plugins/wordpress-popular-posts/style/wpp.css?ver=3.0.3" type="text/css" media="all"> 
  <script type="text/javascript" src="http://igoro.com/wordpress/wp-includes/js/jquery/jquery.js?ver=1.11.1"></script> 
  <script type="text/javascript" src="http://igoro.com/wordpress/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.2.1"></script> 
  <script type="text/javascript" src="http://igoro.com/wordpress/wp-content/plugins/google-analyticator/external-tracking.min.js?ver=6.4.8"></script> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://igoro.com/wordpress/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://igoro.com/wordpress/wp-includes/wlwmanifest.xml"> 
  <meta name="generator" content="WordPress 4.0.18"> 
  <link rel="canonical" href="http://igoro.com/archive/skip-lists-are-fascinating/"> 
  <link rel="shortlink" href="http://igoro.com/?p=70"> 
  <style type="text/css"></style> 
  <!-- Protected by WP-SpamFree v2.1.1.2 :: JS BEGIN --> 
  <script type="text/javascript" src="http://igoro.com/wordpress/wp-content/plugins/wp-spamfree/js/wpsf-js.php"></script> 
  <!-- Protected by WP-SpamFree v2.1.1.2 :: JS END --> 
  <style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style> 
  <!-- Wordpress Popular Posts v3.0.3 --> 
  <script type="text/javascript">//<![CDATA[
				jQuery(document).ready(function(){
					jQuery.get('http://igoro.com/wordpress/wp-admin/admin-ajax.php', {
						action: 'update_views_ajax',
						token: '8d12912539',
						id: 70					}, function(response){
						if ( console && console.log )
							console.log(response);
					});
				});
			//]]></script> 
  <!-- End Wordpress Popular Posts v3.0.3 --> 
  <!-- Google Analytics Tracking by Google Analyticator 6.4.8: http://www.videousermanuals.com/google-analyticator/ --> 
  <script type="text/javascript">
    var analyticsFileTypes = [''];
    var analyticsSnippet = 'disabled';
    var analyticsEventTracking = 'enabled';
</script> 
  <script type="text/javascript">
	(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
	ga('create', 'UA-4374255-1', 'auto');
 
	ga('send', 'pageview');
</script> 
 </head> 
 <body> 
  <div id="wrap"> 
   <div id="menu"> 
    <ul> 
     <li><a href="http://igoro.com/">Home</a></li> 
     <li class="page_item page-item-2"><a href="http://igoro.com/about/">About</a></li> 
    </ul> 
   </div> 
   <div id="header"> 
    <span class="btitle"><a href="http://igoro.com/">Igor Ostrovsky Blogging</a></span> 
    <p class="description"> <a href="http://igoro.com/">On programming, technology, and random things of interest </a> </p> 
   </div> 
   <div id="rss-big"> 
    <a href="http://igoro.com/feed/" title="Subscribe to this site with RSS"></a> 
   </div> 
   <div id="portrait-bg"></div> 
   <div id="catmenu"> 
    <ul> 
     <li><a href="http://igoro.com/archive/category/algorithms/">Algorithms</a> </li>
     <li><a href="http://igoro.com/archive/category/cool-stuff/">Cool Stuff</a> </li>
     <li><a href="http://igoro.com/archive/category/csharp/">C#</a> </li>
     <li><a href="http://igoro.com/archive/category/robozzle/">RoboZZle</a> </li>
     <li><a href="http://igoro.com/archive/category/concurrency/">Concurrency</a> </li>
     <li><a href="http://igoro.com/archive/category/misc/">Misc</a> </li>
    </ul> 
   </div> 
   <div id="content"> 
    <div class="post-70 post type-post status-publish format-standard hentry category-algorithms tag-algorithms"> 
     <div class="entry entry-"> 
      <div class="entrytitle_wrap"> 
       <div class="entrydate"> 
        <div class="dateMonth">
          Jul 
        </div> 
        <div class="dateDay">
          21 
        </div> 
       </div> 
       <div class="entrytitle"> 
        <h1><a href="http://igoro.com/archive/skip-lists-are-fascinating/" rel="bookmark" title="Link to Skip lists are fascinating!">Skip lists are fascinating!</a></h1> 
       </div> 
      </div> 
      <div class="entrybody"> 
       <p>Skip lists are a fascinating data structure: very simple, and yet have the same asymptotic efficiency as much more complicated AVL trees and red-black trees. While many standard libraries for various programming languages provide a sorted set data structure, there are numerous problems that require more control over the internal data structure than a sorted set exposes. In this article, I will discuss the asymptotic efficiency of operations on skip lists, the ideas that make them work, and their interesting use cases. And, of course, I will give you the source code for a skip list in C#.</p> 
       <p><span id="more-70"></span></p> 
       <p>The time complexity of basic operations on a skip list is as follows:</p> 
       <table border="0" cellspacing="0" cellpadding="2" width="400"> 
        <tbody> 
         <tr> 
          <td width="200" valign="top"><em>Operation</em></td> 
          <td width="200" valign="top"><em>Time Complexity</em></td> 
         </tr> 
         <tr> 
          <td width="200" valign="top">Insertion</td> 
          <td width="200" valign="top">O(log N)</td> 
         </tr> 
         <tr> 
          <td width="200" valign="top">Removal</td> 
          <td width="200" valign="top">O(log N)</td> 
         </tr> 
         <tr> 
          <td width="200" valign="top">Check if contains</td> 
          <td width="200" valign="top">O(log N)</td> 
         </tr> 
         <tr> 
          <td width="200" valign="top">Enumerate in order</td> 
          <td width="200" valign="top">O(N)</td> 
         </tr> 
        </tbody> 
       </table> 
       <p>This makes skip list a very useful data structure. First, as mentioned earlier, skip list can be used as the underlying storage for a sorted set data structure. But, skip list can be directly used to implement some operations that are not efficient on a typical sorted set:</p> 
       <ul> 
        <li>Find the element in the set that is closest to some given value, in O(log N) time.</li> 
        <li>Find the k-th largest element in the set, in O(log N) time. Requires a simple&nbsp; augmentation of the the skip list with partial counts.</li> 
        <li>Count the number of elements in the set whose values fall into a given range, in O(log N) time. Also requires a simple augmentation of the skip list.</li> 
       </ul> 
       <p><strong>From a singly-linked list to a skip list</strong></p> 
       <p>Sometimes the best way to understand how something works is to attempt to design it yourself. Let’s try to go through that exercise with skip lists.</p> 
       <p>First, consider a regular sorted singly-linked list. Here is an example of one:</p> 
       <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" src="http://igoro.com/wordpress/wp-content/uploads/2008/07/list.png" border="0" alt="list" width="552" height="80"></p> 
       <p>A sorted singly-linked list is not a terribly interesting data structure. The complexity of basic operations looks like this:</p> 
       <table border="0" cellspacing="0" cellpadding="2" width="402"> 
        <tbody> 
         <tr> 
          <td width="200" valign="top"><em>Operation</em></td> 
          <td width="200" valign="top"><em>Time Complexity</em></td> 
         </tr> 
         <tr> 
          <td width="200" valign="top">Insertion</td> 
          <td width="200" valign="top">O(N)</td> 
         </tr> 
         <tr> 
          <td width="200" valign="top">Removal</td> 
          <td width="200" valign="top">O(N)</td> 
         </tr> 
         <tr> 
          <td width="200" valign="top">Check if contains</td> 
          <td width="200" valign="top">O(N)</td> 
         </tr> 
         <tr> 
          <td width="200" valign="top">Enumerate in order</td> 
          <td width="200" valign="top">O(N)</td> 
         </tr> 
        </tbody> 
       </table> 
       <p>That is pretty unimpressive, actually. The only interesting value here is the O(N) in-order enumeration. For an insertion, removal or search, O(N) is about as bad as it gets. (There are more specialized use cases where sorted linked lists are appropriate, though.)</p> 
       <p>So, how can we make these operations on a sorted linked list faster? The main problem with a linked list is that it takes so long to get into its middle. That makes insertion, removal and search operations all O(N).</p> 
       <p>Well, here is an idea: let’s consider a sorted multi-level list. We start out with a regular singly-linked list that connects nodes in-order. Then, we add a level-2 list that skips every other node. And a level-3 list that skips every other node in the level-2 list. And so forth, until we have a list that jumps somewhere past the middle element. Our previous list now looks like this:</p> 
       <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" src="http://igoro.com/wordpress/wp-content/uploads/2008/07/multilist.png" border="0" alt="multilist" width="553" height="161"></p> 
       <p>Now, checking whether a particular element is in the set only takes O(log N). The search algorithm is a lot like binary search. We first look in the top-most list and move to the right, making sure that we don’t jump too far. For example, if we are searching for number 8, we will not take the level-3 link from the head node, because we would end up too far right: all the way at 12! If we can’t move further right on a particular level, we drop to the next lower level, which has shorter jumps.</p> 
       <p>Search for value 8 would proceed like this:</p> 
       <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" src="http://igoro.com/wordpress/wp-content/uploads/2008/07/multilist-search.png" border="0" alt="multilist-search" width="553" height="161"></p> 
       <p>Since we landed on a 7, but we were looking for an 8, that means that 8 is not in the set.</p> 
       <p>The O(log N) search time is very nice. But, there is a problem: how do we implement insertions and removals efficiently, but in a way so that they maintain the structure of the multi-level list? This turns out to be quite a problem. AVL and red-black trees resolve it by tricky rebalancing operations.</p> 
       <p>Skip lists take an entirely different approach: a probabilistic one. Instead of ensuring that the level-2 list skips every other node, a skip list is designed in a way that the level-2 list skips one node on average. In some places, it may skip two nodes, and in other places, it may not skip any nodes. But overall, the structure of a skip list is very similar to the structure of a sorted multi-level list.</p> 
       <p>Here is an example of what a skip list may look like:</p> 
       <p><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" src="http://igoro.com/wordpress/wp-content/uploads/2008/07/skiplist.png" border="0" alt="skiplist" width="553" height="161"></p> 
       <p>A skip list looks a bit like a slightly garbled sorted multi-level list. A skip list has many of the nice properties of a sorted multi-level list, such as O(log N) search times, but also allows simple O(log N) insertions and deletions.</p> 
       <p><strong>Implementation of skip lists</strong></p> 
       <p>So, given this description of a skip list, would you know how to implement it? It is not very hard, and it may be worth it to spend a couple minutes thinking about it.</p> 
       <ul> 
        <li>Insertion: decide how many lists will this node be a part of. With a probability of 1/2, make the node a part of the lowest-level list only. With 1/4 probability, the node will be a part of the lowest two lists. With 1/8 probability, the node will be a part of three lists. And so forth. Insert the node at the appropriate position in the lists that it is a part of.</li> 
        <li>Deletion: remove the node from all sorted lists that it is a part of.</li> 
        <li>Check if contains: we can use the O(log N) algorithm similar described above on multi-level lists.</li> 
       </ul> 
       <p>And, all of these operations are pretty simple to implement in O(log N) time!</p> 
       <p><strong>Source code</strong></p> 
       <p>Here is a sample C# implementation for a skip list of integers:</p> 
       <pre class="code"><span style="color: #0000ff;">class </span><span style="color: #2b91af;">IntSkipList
</span>{
    <span style="color: #0000ff;">private class </span><span style="color: #2b91af;">Node
    </span>{
        <span style="color: #0000ff;">public </span><span style="color: #2b91af;">Node</span>[] Next { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">private set</span>; }
        <span style="color: #0000ff;">public int </span>Value { <span style="color: #0000ff;">get</span>; <span style="color: #0000ff;">private set</span>; }

        <span style="color: #0000ff;">public </span>Node(<span style="color: #0000ff;">int </span>value, <span style="color: #0000ff;">int </span>level)
        {
            Value = value;
            Next = <span style="color: #0000ff;">new </span><span style="color: #2b91af;">Node</span>[level];
        }
    }

    <span style="color: #0000ff;">private </span><span style="color: #2b91af;">Node </span>_head = <span style="color: #0000ff;">new </span><span style="color: #2b91af;">Node</span>(0, 33); <span style="color: #008000;">// The max. number of levels is 33
    </span><span style="color: #0000ff;">private </span><span style="color: #2b91af;">Random </span>_rand = <span style="color: #0000ff;">new </span><span style="color: #2b91af;">Random</span>();
    <span style="color: #0000ff;">private int </span>_levels = 1;

    <span style="color: #808080;">/// &lt;summary&gt;
    /// </span><span style="color: #008000;">Inserts a value into the skip list.
    </span><span style="color: #808080;">/// &lt;/summary&gt;
    </span><span style="color: #0000ff;">public void </span>Insert(<span style="color: #0000ff;">int </span>value)
    {
        <span style="color: #008000;">// Determine the level of the new node. Generate a random number R. The number of
        // 1-bits before we encounter the first 0-bit is the level of the node. Since R is
        // 32-bit, the level can be at most 32.
        </span><span style="color: #0000ff;">int </span>level = 0;
        <span style="color: #0000ff;">for </span>(<span style="color: #0000ff;">int </span>R = _rand.Next(); (R &amp; 1) == 1; R &gt;&gt;= 1)
        {
            level++;
            <span style="color: #0000ff;">if </span>(level == _levels) { _levels++; <span style="color: #0000ff;">break</span>; }
        }

        <span style="color: #008000;">// Insert this node into the skip list
        </span><span style="color: #2b91af;">Node </span>newNode = <span style="color: #0000ff;">new </span><span style="color: #2b91af;">Node</span>(value, level + 1);
        <span style="color: #2b91af;">Node </span>cur = _head;
        <span style="color: #0000ff;">for </span>(<span style="color: #0000ff;">int </span>i = _levels - 1; i &gt;= 0; i--)
        {
            <span style="color: #0000ff;">for </span>(; cur.Next[i] != <span style="color: #0000ff;">null</span>; cur = cur.Next[i])
            {
                <span style="color: #0000ff;">if </span>(cur.Next[i].Value &gt; value) <span style="color: #0000ff;">break</span>;
            }

            <span style="color: #0000ff;">if </span>(i &lt;= level) { newNode.Next[i] = cur.Next[i]; cur.Next[i] = newNode; }
        }
    }

    <span style="color: #808080;">/// &lt;summary&gt;
    /// </span><span style="color: #008000;">Returns whether a particular value already exists in the skip list
    </span><span style="color: #808080;">/// &lt;/summary&gt;
    </span><span style="color: #0000ff;">public bool </span>Contains(<span style="color: #0000ff;">int </span>value)
    {
        <span style="color: #2b91af;">Node </span>cur = _head;
        <span style="color: #0000ff;">for </span>(<span style="color: #0000ff;">int </span>i = _levels - 1; i &gt;= 0; i--)
        {
            <span style="color: #0000ff;">for </span>(; cur.Next[i] != <span style="color: #0000ff;">null</span>; cur = cur.Next[i])
            {
                <span style="color: #0000ff;">if </span>(cur.Next[i].Value &gt; value) <span style="color: #0000ff;">break</span>;
                <span style="color: #0000ff;">if </span>(cur.Next[i].Value == value) <span style="color: #0000ff;">return true</span>;
            }
        }
        <span style="color: #0000ff;">return false</span>;
    }

    <span style="color: #808080;">/// &lt;summary&gt;
    /// </span><span style="color: #008000;">Attempts to remove one occurence of a particular value from the skip list. Returns
    </span><span style="color: #808080;">/// </span><span style="color: #008000;">whether the value was found in the skip list.
    </span><span style="color: #808080;">/// &lt;/summary&gt;
    </span><span style="color: #0000ff;">public bool </span>Remove(<span style="color: #0000ff;">int </span>value)
    {
        <span style="color: #2b91af;">Node </span>cur = _head;

        <span style="color: #0000ff;">bool </span>found = <span style="color: #0000ff;">false</span>;
        <span style="color: #0000ff;">for </span>(<span style="color: #0000ff;">int </span>i = _levels - 1; i &gt;= 0; i--)
        {
            <span style="color: #0000ff;">for </span>(; cur.Next[i] != <span style="color: #0000ff;">null</span>; cur = cur.Next[i])
            {
                <span style="color: #0000ff;">if </span>(cur.Next[i].Value == value)
                {
                    found = <span style="color: #0000ff;">true</span>;
                    cur.Next[i] = cur.Next[i].Next[i];
                    <span style="color: #0000ff;">break</span>;
                }

                <span style="color: #0000ff;">if </span>(cur.Next[i].Value &gt; value) <span style="color: #0000ff;">break</span>;
            }
        }

        <span style="color: #0000ff;">return </span>found;
    }

    <span style="color: #808080;">/// &lt;summary&gt;
    /// </span><span style="color: #008000;">Produces an enumerator that iterates over elements in the skip list in order.
    </span><span style="color: #808080;">/// &lt;/summary&gt;
    </span><span style="color: #0000ff;">public </span><span style="color: #2b91af;">IEnumerable</span>&lt;<span style="color: #0000ff;">int</span>&gt; Enumerate()
    {
        <span style="color: #2b91af;">Node </span>cur = _head.Next[0];
        <span style="color: #0000ff;">while </span>(cur != <span style="color: #0000ff;">null</span>)
        {
            <span style="color: #0000ff;">yield return </span>cur.Value;
            cur = cur.Next[0];
        }
    }
}</pre> 
       <p><a href="http://11011.net/software/vspaste"></a><a href="http://11011.net/software/vspaste"></a></p> 
       <p><strong>Possible improvements</strong></p> 
       <ul> 
        <li>Obviously, a more useful implementation would be generic, so that we can store values other than integers.</li> 
        <li>Nodes can be structs instead of classes. This significantly reduces the number of heap allocations. But, we cannot use the null value anymore to represent the tail, which adds a bit of extra code.</li> 
        <li>The skip list could be made associative, so that each node stores a key/value pair.</li> 
        <li>The implementation I gave above is a multiset. It is pretty simple to change the skip list so that it implements a set instead.</li> 
       </ul> 
       <p><strong>Related:</strong></p> 
       <ul> 
        <li><a href="ftp://ftp.cs.umd.edu/pub/skipLists/skiplists.pdf">Original paper on skip lists</a> [umd.edu]</li> 
        <li><a href="http://en.wikipedia.org/wiki/Skip_list">Skip list</a> [wikipedia.com]</li> 
        <li><a href="http://igoro.com/archive/quicksort-killer/">Quicksort killer</a> [igoro.com]</li> 
        <li><a href="http://igoro.com/archive/programming-job-interview-challenge/">Programming job interview challenge</a> [igoro.com]</li> 
       </ul> 
       <p><a style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" href="http://www.dotnetkicks.com/kick/?url=http%3a%2f%2figoro.com%2farchive%2fskip-lists-are-fascinating%2f"><img src="http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2figoro.com%2farchive%2fskip-lists-are-fascinating%2f" border="0" alt="kick it on DotNetKicks.com"></a></p> 
       <p>Tags: <a href="http://igoro.com/archive/tag/algorithms/" rel="tag">Algorithms</a></p> 
      </div> 
      <div class="entrymeta"> 
       <div class="postinfo"> 
        <span class="postedby">Posted by Igor Ostrovsky</span> 
        <span class="filedto"><a href="http://igoro.com/archive/category/algorithms/" rel="category tag">Algorithms</a> </span> 
        <span class="rss">Subscribe to <a href="http://igoro.com/feed/" title="Subscribe to RSS feed"><abbr title="Subscribe to RSS Feed">RSS</abbr></a> feed</span> 
       </div> 
      </div> 
     </div> 
     <div class="commentsblock"> 
      <!-- You can start editing here. --> 
      <h3 id="comments">46 Comments to “Skip lists are fascinating!”</h3> 
      <ol class="commentlist"> 
       <li class="comment even thread-even depth-1" id="comment-303"> 
        <div id="div-comment-303" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/df2a7fe2425f9822b228c4e6af5ecf4b?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://www.codethinked.com" rel="external nofollow" class="url">Justin Etheredge</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-303"> July 21, 2008 at 11:21 am</a> 
         </div> 
         <p>Man, that is really interesting! I’m going to have to dig into that a bit more later. Oh, and nice blog!</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-304"> 
        <div id="div-comment-304" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/8e26fbcabef2f1e56dbda78f26571dc7?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Remco</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-304"> July 21, 2008 at 4:13 pm</a> 
         </div> 
         <p>here you go:</p> 
         <p> public class SkipList : ICollection where T : IComparable<br> {<br> private struct SkipListNode<br> {<br> private readonly N item;<br> private readonly SkipListNode?[] next;</p> 
         <p> public SkipListNode(N item, int depth)<br> {<br> this.item = item;<br> next = new SkipListNode?[depth];<br> }</p> 
         <p> public N Item<br> {<br> get { return item; }<br> }</p> 
         <p> public SkipListNode?[] Next<br> {<br> get { return next; }<br> }<br> }</p> 
         <p> private int count = 0;<br> private int depth = 1;<br> private SkipListNode head = new SkipListNode(default(T), 33);</p> 
         <p> public bool Contains(T item)<br> {<br> SkipListNode cur = head;</p> 
         <p> for (int level = depth – 1; level &gt;= 0; level–)<br> {<br> for (; cur.Next[level] != null; cur = cur.Next[level].Value)<br> {<br> if (cur.Next[level].Value.Item.CompareTo(item) &gt; 0)<br> {<br> break;<br> }</p> 
         <p> if (cur.Next[level].Value.Item.CompareTo(item) == 0)<br> {<br> return true;<br> }<br> }<br> }</p> 
         <p> return false;<br> }</p> 
         <p> public bool Remove(T item)<br> {<br> SkipListNode cur = head;</p> 
         <p> bool found = false;</p> 
         <p> for (int level = depth – 1; level &gt;= 0; level–)<br> {<br> for (; cur.Next[level] != null; cur = cur.Next[level].Value)<br> {<br> if (cur.Next[level].Value.Item.CompareTo(item) == 0)<br> {<br> found = true;<br> cur.Next[level] = cur.Next[level].Value.Next[level];<br> count–;<br> break;<br> }</p> 
         <p> if (cur.Next[level].Value.Item.CompareTo(item) &gt; 0)<br> {<br> break;<br> }<br> }<br> }</p> 
         <p> return found;<br> }</p> 
         <p> public void Add(T item)<br> {<br> // Determine the new depth of this new node. Retrieve the hashcode for value. The number of<br> // 1-bits before we encounter the first 0-bit is the level of the node. Since hashcode is<br> // 32-bit, the level can be at most 32.<br> int nodeLevel = 0;</p> 
         <p> for (int hash = item.GetHashCode(); (hash &amp; 1) == 1; hash &gt;&gt;= 1)<br> {<br> nodeLevel++;</p> 
         <p> if (nodeLevel == depth)<br> {<br> depth++;<br> break;<br> }<br> }</p> 
         <p> // Insert this node into the skip list<br> SkipListNode newNode = new SkipListNode(item, nodeLevel + 1);<br> SkipListNode cur = head;</p> 
         <p> for (int level = depth – 1; level &gt;= 0; level–)<br> {<br> for (; cur.Next[level] != null; cur = cur.Next[level].Value)<br> {<br> if (cur.Next[level].Value.Item.CompareTo(item) &gt; 0)<br> {<br> break;<br> }<br> }</p> 
         <p> if (level &lt;= nodeLevel)<br> {<br> newNode.Next[level] = cur.Next[level];<br> cur.Next[level] = newNode;<br> count++;<br> }<br> }<br> }</p> 
         <p> public void Clear()<br> {<br> head = new SkipListNode(default(T), 33);<br> count = 0;<br> }</p> 
         <p> public void CopyTo(T[] array, int arrayIndex)<br> {<br> throw new NotImplementedException();<br> }</p> 
         <p> public int Count<br> {<br> get { return count; }<br> }</p> 
         <p> public bool IsReadOnly<br> {<br> get { return false; }<br> }</p> 
         <p> private IEnumerator GetTheEnumerator()<br> {<br> SkipListNode? cur = head.Next[0];</p> 
         <p> while (cur != null)<br> {<br> yield return cur.Value.Item;<br> cur = cur.Value.Next[0];<br> }<br> }</p> 
         <p> public IEnumerator GetEnumerator()<br> {<br> return GetTheEnumerator();<br> }</p> 
         <p> System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()<br> {<br> return GetTheEnumerator();<br> }</p> 
         <p> }</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="pingback even thread-even depth-1" id="comment-306"> 
        <div id="div-comment-306" class="comment-body"> 
         <div class="comment-author vcard"> 
          <cite class="fn"><a href="http://blog.cwa.me.uk/2008/07/22/the-morning-brew-141/" rel="external nofollow" class="url">Reflective Perspective - Chris Alcock » The Morning Brew #141</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-306"> July 22, 2008 at 2:17 am</a> 
         </div> 
         <p>[…] Skip lists are fascinating! – Igor Ostrovsky takes a look at a list data structure known as Skip Lists – interesting reading […]</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-307"> 
        <div id="div-comment-307" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/8e26fbcabef2f1e56dbda78f26571dc7?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Remco</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-307"> July 22, 2008 at 6:52 am</a> 
         </div> 
         <p>Minor update: count++ in method Add needs to be moved two lines below.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-308"> 
        <div id="div-comment-308" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/8e26fbcabef2f1e56dbda78f26571dc7?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Remco</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-308"> July 22, 2008 at 7:18 am</a> 
         </div> 
         <p>BTW: The initial filling for a skiplist is nicely distributed, but i’m curious to find out what happens when many Add / Remove operations are used. Will the list remain still as efficient? What will happen to the depth used?</p> 
         <p>And my implementation relies on GetHashCode in combination with IComparable, i don’t know if that’s a correct assumption to make. It works for ints, since GetHashCode returns the same int value. If i recall correct, there is no such restraint for the values returned by GetHashCode. I think it will be better to avoid the problem, by not relying on IComparable at all.</p> 
         <p>I’ve made a different version of this list, which implements a Set (only unique items are added in the list, no duplicates). This works lightning fast.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-309"> 
        <div id="div-comment-309" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/8e26fbcabef2f1e56dbda78f26571dc7?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Remco</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-309"> July 22, 2008 at 7:41 am</a> 
         </div> 
         <p>BTW: IMHO the durations for linked lists are on average O(N/2), not O(N)</p> 
         <p>In the best case scenario the item is in front of the list, in the worst case scenario the last item is retrieved, on average the desired item is located somewhere in the middle of the list.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-310"> 
        <div id="div-comment-310" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/8e26fbcabef2f1e56dbda78f26571dc7?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Remco</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-310"> July 22, 2008 at 8:05 am</a> 
         </div> 
         <p>I’ve tested skiplist, list and hashtable, here are the results:</p> 
         <p>Testing SkipList vs List vs Hashtable, using 100000 items</p> 
         <p>[SkipList]<br> – Insertions : 455378<br> – Contains : 1005696<br> – Remove : 1480769</p> 
         <p>[List]<br> – Insertions : 8798<br> – Contains : 146389620<br> – Remove : 171897388</p> 
         <p>[HashTable]<br> – Insertions : 106101<br> – Contains : 160336<br> – Remove : 228002</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-311"> 
        <div id="div-comment-311" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/9d2b60c66b1b3edde4e14054fce7e5f6?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">AlexR</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-311"> July 22, 2008 at 11:10 am</a> 
         </div> 
         <p>I don’t see difference between skip list and binary tree without rebalancing operations. Is skip list more effective or not?</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment byuser comment-author-Admin bypostauthor even thread-even depth-1" id="comment-312"> 
        <div id="div-comment-312" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/03bd5feefbd30840149cc0ae217b4032?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://www.igoro.com" rel="external nofollow" class="url">Igor Ostrovsky</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-312"> July 22, 2008 at 12:12 pm</a> 
         </div> 
         <p>AlexR: A skip list is like a balanced tree. At least, it is like a balanced tree with an extremely high probability.</p> 
         <p>How does skip list do that? These two properties ensure it:<br> 1. About 1/2 of nodes are in the lowest list only, about 1/4 nodes are in the lowest two lists, 1/8 in the lowest three, and so forth.<br> 2. Nodes with different “heights” are mixed up about evenly.</p> 
         <p>After any sequence of insertions and removals, properties (1) and (2) still hold.</p> 
         <p>You can define these properties much more precisely, and use them to prove that insertion, removal and lookup are O(log N) on a skip list, with a very high probability.</p> 
         <p>Makes sense?</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment byuser comment-author-Admin bypostauthor odd alt thread-odd thread-alt depth-1" id="comment-313"> 
        <div id="div-comment-313" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/03bd5feefbd30840149cc0ae217b4032?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://www.igoro.com" rel="external nofollow" class="url">Igor Ostrovsky</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-313"> July 22, 2008 at 12:34 pm</a> 
         </div> 
         <p>Remco:</p> 
         <p>Wow, seems like you looked at skip lists pretty in depth! Awesome, experimentation is a great way to learn. Here are responses to some of your points:</p> 
         <p>– The “distribution” of nodes: see answer to AlexR I just posted.</p> 
         <p>– GetHashCode: if two values are equal, then their hash codes are guaranteed to be equal. But, hash codes are not intended for less-than-greater-than comparison, and don’t work that way in general.</p> 
         <p>– O(N) vs O(N/2): it is true that in a sorted list, a lookup will visit N/2 nodes on average. In the big-Oh notation, O(N) is the same as O(N/2), and it is customary to drop the constant factor of 1/2.</p> 
         <p>– Note that a skip list is an ordered data structure, so it can do a number of things efficiently that a hash table cannot: e.g. in-order enumeration, find the smallest element larger than X, etc.</p> 
         <p>– When running your benchmarks, make sure you are measuring a RELEASE build rather than a DEBUG build.</p> 
         <p>Hope that helps, and thanks for reading.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-314"> 
        <div id="div-comment-314" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/8e26fbcabef2f1e56dbda78f26571dc7?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Remco</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-314"> July 23, 2008 at 3:51 am</a> 
         </div> 
         <p>@Igor: Agreed. Benchmarking was done in release mode (debugging takes to long to run ;-)). The Hashtable is faster in inserts and removals, in-order iteration is not be supported by an hashtable (order is not gauranteed / used).</p> 
         <p>One last note on ‘my’ implementation: i think it’s better (in general) to restore the randon number generation instead of using the hashcode to determine the depth of the node. Using hashcodes in case of integers will generate a nice distribution, but for all other types all bets are off <img src="http://igoro.com/wordpress/wp-includes/images/smilies/icon_wink.gif" alt=";-)" class="wp-smiley"></p> 
         <p>Requiring where T : IComparable on the list is desirable.</p> 
         <p>(i just noticed that the type parameters in my sample are missing, just the better, this will prevent viewers from using it as-is, with all the known defects ;-))</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-315"> 
        <div id="div-comment-315" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/89c8afd032c7b3473f67c9b00d3acd5a?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://tech.puredanger.com" rel="external nofollow" class="url">Alex Miller</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-315"> July 26, 2008 at 10:05 pm</a> 
         </div> 
         <p>Nice article! I wrote an article on skip lists a while back you might find interesting. It has links to a lecture available on iTunes from MIT that covers skip lists in some detail as well:</p> 
         <p><a href="http://tech.puredanger.com/2007/10/03/skip-lists/" rel="nofollow">http://tech.puredanger.com/2007/10/03/skip-lists/</a></p> 
         <p>You should really also check out the ConcurrentSkipListMap included in Java 6: </p> 
         <p><a href="http://java.sun.com/javase/6/docs/api/java/util/concurrent/ConcurrentSkipListMap.html" rel="nofollow">http://java.sun.com/javase/6/d.....stMap.html</a></p> 
         <p>One of the big benefits of skip lists is that because they are built around linked lists, they can exhibit very localized locking. ConcurrentSkipListMap is a concurrent skip list based map and is written in lock free style (no synchronization, relies solely on CAS-like operations). This makes ConcurrentSkipListMap a concurrent sorted map with excellent performance. I’d recommend reading the source code as well as it is extremely well written and a great example of lock-free coding.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="pingback even thread-even depth-1" id="comment-316"> 
        <div id="div-comment-316" class="comment-body"> 
         <div class="comment-author vcard"> 
          <cite class="fn"><a href="http://codemonkeylabs.com/blog/weekly-web-nuggets-22/" rel="external nofollow" class="url">Weekly Web Nuggets #22 : Code Monkey Labs</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-316"> July 28, 2008 at 11:00 am</a> 
         </div> 
         <p>[…] Skip Lists Are Fascinating: Igor Ostrovsky takes a look at the skip list, a simple, yet powerful data structure. […]</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-321"> 
        <div id="div-comment-321" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/6d5cb0195149f9b9e1e97cadddc55422?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://www.forniafortunecookies.com" rel="external nofollow" class="url">kim</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-321"> August 8, 2008 at 1:16 am</a> 
         </div> 
         <p>I like it!!!!</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-348"> 
        <div id="div-comment-348" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=40" class="avatar avatar-40 photo avatar-default" height="40" width="40"> 
          <cite class="fn">Ion Sapoval</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-348"> September 9, 2008 at 4:29 am</a> 
         </div> 
         <p>I like this type of data structure for it’s simplicity and efficiency. Keep going with this kind of articles they’re very useful. Thanks</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-514"> 
        <div id="div-comment-514" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/c66477b08ef92cd4c1ff115119ad7010?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Pablo</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-514"> April 14, 2009 at 2:52 am</a> 
         </div> 
         <p>In fact all this information + sample code was posted on on MSDN a while ago.<br> Do the guys in MS use MSDN <img src="http://igoro.com/wordpress/wp-includes/images/smilies/icon_smile.gif" alt=":)" class="wp-smiley"> ?</p> 
         <p>Linked lists:<br> <a href="http://msdn.microsoft.com/en-us/library/ms379573(VS.80)" rel="nofollow">http://msdn.microsoft.com/en-u.....573(VS.80)</a>.aspx</p> 
         <p>Other data structures (queue, stack, BT, BST, etc.):<br> <a href="http://msdn.microsoft.com/en-us/library/ms364091(VS.80)" rel="nofollow">http://msdn.microsoft.com/en-u.....091(VS.80)</a>.aspx</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment byuser comment-author-Admin bypostauthor even thread-even depth-1" id="comment-515"> 
        <div id="div-comment-515" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/03bd5feefbd30840149cc0ae217b4032?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://www.igoro.com" rel="external nofollow" class="url">Igor Ostrovsky</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-515"> April 14, 2009 at 3:32 am</a> 
         </div> 
         <p>@Pablo: Ah, cool. I didn’t know about the MSDN article.</p> 
         <p>My approach to explaining skip lists is significantly different from the explanation in the MSDN article, and there are differences in the implementation as well.</p> 
         <p>So, I wouldn’t say that my post is redundant.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-1060"> 
        <div id="div-comment-1060" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/2f7179927fa7e03ce477c26bacd39aef?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Soumeya Tarfi</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-1060"> August 3, 2010 at 4:56 am</a> 
         </div> 
         <p>I read the article about skip lists on msdn and I read your article. I like them both but I have to say your article is an awesome quick read and gets to the point faster. I didn’t know much about skip lists and I found your article pretty straight forward. Thanks!</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-1922"> 
        <div id="div-comment-1922" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/13d192adcbb1f87fd2c17b047dc50f9d?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://www.bmakowskyhandbagsonsale.net" rel="external nofollow" class="url">bmakowsky handbags</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-1922"> December 12, 2010 at 11:31 pm</a> 
         </div> 
         <p>Outstanding article over again. Thanks!</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2087"> 
        <div id="div-comment-2087" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/08cce2dcfc82546224d1eb61e68dec05?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Matthieu</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-2087"> January 5, 2011 at 10:52 am</a> 
         </div> 
         <p>@Igor: Actually, the factor of nodes from one level to another need not be fixed to 1/2. Other factors can be used, and I had read experiments that 1/4 turned out better in the general case. Now of course… I just can’t find it back… but knowing that the factor can change is already something I guess.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-2505"> 
        <div id="div-comment-2505" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/4a7b08fcb7e3d9a52ae473613b71bc3d?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://blog.barrkel.com/" rel="external nofollow" class="url">Barry Kelly</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-2505"> March 14, 2011 at 12:20 am</a> 
         </div> 
         <p><code>for (int R = _rand.Next(); (R &amp; 1) == 1; R &gt;&gt;= 1)</code></p> 
         <p>For C# on .NET, this may work fine, but in general, this is a bad way of extracting a 0/1 choice from a pseudo-random number generator (PRNG). Many PRNGs use linear congruential generators, which are just a multiply and an add, and have highly predictable low bits as a result (frequently just a repeating pattern with a short period, as short as 4 or 8).</p> 
         <p>Safer:</p> 
         <p><code>while (_rand.Next(2) == 0)</code></p> 
         <p>– or even simply reading the bits off the other end.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2506"> 
        <div id="div-comment-2506" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/d87b57fbef3135d8d89fe2710ac7b5cc?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Elmer</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-2506"> March 14, 2011 at 1:20 am</a> 
         </div> 
         <p>Hello Igor,</p> 
         <p>Very nice blog. I happen to stumble on your blog when a fellow user in StackOverflow posted the link to your blog as part of his answer to my question.</p> 
         <p>Do you have ideas on where we can be able to apply Skip Lists? Or any idea on what program to create so that students can be able to grasp its concepts easily?</p> 
         <p>Cheers!</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment byuser comment-author-Admin bypostauthor even thread-even depth-1" id="comment-2507"> 
        <div id="div-comment-2507" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/03bd5feefbd30840149cc0ae217b4032?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://www.igoro.com" rel="external nofollow" class="url">Igor Ostrovsky</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-2507"> March 14, 2011 at 2:29 am</a> 
         </div> 
         <p>Barry Kelly: Yeah, reading the bits in the opposite order sounds like a good idea, especially if you are concerned about the quality of the random number generator. Using _rand.Next(2) sounds reasonable too, although that solution may turn out slower – hard to say without trying it out and measuring.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="pingback odd alt thread-odd thread-alt depth-1" id="comment-2509"> 
        <div id="div-comment-2509" class="comment-body"> 
         <div class="comment-author vcard"> 
          <cite class="fn"><a href="http://blarneyfellow.wordpress.com/2011/03/15/links-for-2011-03-14/" rel="external nofollow" class="url">links for 2011-03-14 « Blarney Fellow</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-2509"> March 14, 2011 at 7:24 pm</a> 
         </div> 
         <p>[…] Skip lists are fascinating! (tags: algorithm data-structure tree search) […]</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-2605"> 
        <div id="div-comment-2605" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/2fa25aa8d9f7b5dd0e14f74e09e8fde7?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Jingyi</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-2605"> March 28, 2011 at 1:37 pm</a> 
         </div> 
         <p>I guess I didn’t get it. I don’t see the O(lgN) for the insertion in this implementation. For example, inserting into the lowest level, it is already O(N) because you have to traverse the entire list. To me, the implementation for insert is N + N/2 + N/4 + … + N/pow(2, N) = 2N, which is O(N), am i right here? The same thing for Contains. Let’s say, there is a value that is not in the list, when you search it, you have to traverse lgN list and the longest list is N. Can anybody explain that to me?</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-2606"> 
        <div id="div-comment-2606" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/2fa25aa8d9f7b5dd0e14f74e09e8fde7?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Jingyi</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-2606"> March 28, 2011 at 1:43 pm</a> 
         </div> 
         <p>Sorry, I guess I didn’t understand the code completely. I was wrong, it didn’t traverse the entire list for the lower levels.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-2636"> 
        <div id="div-comment-2636" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/f2492fd2f249fbc1ee3fe96047122dc5?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Duc</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-2636"> April 10, 2011 at 11:28 am</a> 
         </div> 
         <p>Hello Elmer,</p> 
         <p> Here is an real life application for skiplist.</p> 
         <p> An application breaks a stream of media data (65KB) into<br> 1000 segments of 65B (bytes – these bytes are numbered; hence<br> ordered) for delivered to receivers (UDP traffics). It is very<br> possible and very likely in wireless environment, these will be<br> arriving out of order; however, the stream must be in order<br> before it can be presented to the presentation application;<br> Hence these segment must be assembled into an order list in<br> kernel. In this scenario, skiplist is very good since the insert<br> can be done in O(log n); balanced trees (trees) might not be so<br> good.</p> 
         <p> Similar application can be used for ip fragmentation reassembling;<br> however in this case, a simple linked list will do since the number<br> of fragments belonging to an ip fragement stream is usually small<br> (8 or less fragments).</p> 
         <p> Hope this helps.</p> 
         <p>Regards<br> DL</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-26611"> 
        <div id="div-comment-26611" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/09b13c1201b4120d2fc8b0fe2648bfbb?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://cracktheinterview.org/" rel="external nofollow" class="url">vinay polisetti</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-26611"> October 30, 2011 at 5:02 am</a> 
         </div> 
         <p>Nice article explaining the use cases of skip lists !!! find some more of them in <a href="http://cracktheinterview.org/" rel="nofollow">http://cracktheinterview.org/</a></p> 
         <p>Thanks !!</p> 
         <p>Cheers !!</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-125117"> 
        <div id="div-comment-125117" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/1cbed0d1b69bba691af95b32861ea6ee?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">neetu</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-125117"> September 5, 2012 at 12:44 pm</a> 
         </div> 
         <p>good:)<br> now i want the difference between a hash table and skip lists..</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-138481"> 
        <div id="div-comment-138481" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/28f3fbd36cfacaaff4f23e7892243c6c?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">putri</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-138481"> December 18, 2012 at 5:04 am</a> 
         </div> 
         <p>very nice blogs<br> this is nice article….can you give me example code of skip list in c++, i’am so need it to finish my task…</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-148974"> 
        <div id="div-comment-148974" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=40" class="avatar avatar-40 photo avatar-default" height="40" width="40"> 
          <cite class="fn">aabhas</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-148974"> April 6, 2013 at 7:59 am</a> 
         </div> 
         <p>Can u explain the last line of insert function Why is “if (i &lt;= level) { newNode.Next[i] = cur.Next[i]; cur.Next[i] = newNode; }"<br> i can get ur.next[i]=newNOde but not newNode.Next[i]=cur.Next[i]</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-155065"> 
        <div id="div-comment-155065" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/97745fc91d7b5de5b77ed9bd6e1d9778?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">yacineb</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-155065"> June 28, 2013 at 4:16 am</a> 
         </div> 
         <p>In a skiplist , the probability that a node reaches a level k , follows a geometrical law with a parameter p=0.5. </p> 
         <p>The theorical maximum average level in the skip list is = int(log2(N))+1 where N is the maximum number of elements in the list ==&gt; int(log2(int.MaxValue = 2^31 -1 ))+1 = 32</p> 
         <p>Anyway.. there is no need to go further than 32 because the probability that a node “reaches” the 32th level is already extremely low = (0.5)^32</p> 
         <p>There is a better way to get a random level for a node.<br> Look at this function :</p> 
         <p>private int GetRandomHeight() {<br> int level = 0;<br> while (_rand.NextDouble() &lt; 0.5 &amp;&amp; level &lt; 32)<br> {<br> ++level;<br> if (level == _levels) { ++_levels; break; }<br> }<br> return level;<br> }</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-155820"> 
        <div id="div-comment-155820" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/ad516503a11cd5ca435acc9bb6523536?s=40" class="avatar avatar-40 photo avatar-default" height="40" width="40"> 
          <cite class="fn">Scott</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-155820"> July 6, 2013 at 6:03 am</a> 
         </div> 
         <p>Very useful article, thankyou.</p> 
         <p>An interesting way to generate a random level (at least in C) is to generate a random 32-bit number ‘r’ then use a count leading zeros function e.g. __builtin_clz( r ). Assuming each bit has 0.5 probability of being a 1 or a 0 you’ll get the required distribution of levels. Remember to cap the level at your chosen maximum though. Also, you can’t use the stdlib rand() function without taking into account the value of RAND_MAX, on my machine it will never set the top bit. Count trailing zeros might be a more foolproof operation but the ARM architecture has no count trailing zeros instruction which is what I’m working on.</p> 
         <p>level = MIN( __builtin_clz( gen_rand_u32() ), MAX_LEVELS );</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-162708"> 
        <div id="div-comment-162708" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/dae03d9e9db521ec7878d3d239cebaec?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Horia</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-162708"> October 16, 2013 at 1:39 pm</a> 
         </div> 
         <p>very nice article,</p> 
         <p>how would you implement the partial counts in order to find the k-th largest element?</p> 
         <p>you cannot update the current partial counts at every insertion since that would modify the O(logN) insertion time, right?</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment byuser comment-author-Admin bypostauthor even thread-even depth-1" id="comment-162714"> 
        <div id="div-comment-162714" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/03bd5feefbd30840149cc0ae217b4032?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://www.igoro.com" rel="external nofollow" class="url">Igor Ostrovsky</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-162714"> October 16, 2013 at 3:08 pm</a> 
         </div> 
         <p>Horia: for every arrow, you’d track how many elements it skips over.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-163841"> 
        <div id="div-comment-163841" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/46d808e86edf5e4fc744b66a39131934?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Naveen</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-163841"> November 8, 2013 at 8:17 am</a> 
         </div> 
         <p>What is the real life application of skip list?</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-168954"> 
        <div id="div-comment-168954" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/190d325d9123b0b9231b756d7f8e188a?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Vlad</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-168954"> February 28, 2014 at 2:20 pm</a> 
         </div> 
         <p>A cleaner more mathematical way to select levels is using a log base 1/2 of x, floored with a cast to int. I wrote a little article explaining it, if you are interested: <a href="http://echolot-1.github.io/skip-list-levels/" rel="nofollow">http://echolot-1.github.io/skip-list-levels/</a></p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-169084"> 
        <div id="div-comment-169084" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/81b6d019e498edd9ef14c79513b3a6a7?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Pedro</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-169084"> March 2, 2014 at 8:13 pm</a> 
         </div> 
         <p>This is way better than MSDN Developer Network´s explanation, thanks a lot</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-176038"> 
        <div id="div-comment-176038" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/e4a9957508aa1bdb16018793cfc1bb40?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://loyc.net" rel="external nofollow" class="url">David Piepgrass</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-176038"> May 26, 2014 at 1:47 pm</a> 
         </div> 
         <p>The implementation as given is very inefficient. The proposed optimization “Nodes can be structs instead of classes” doesn’t work – despite Remco’s version – because nodes point to each other and you can’t make references to structs. What you could do, though, is store all your nodes in a single List:</p> 
         <p>partial class SkipList&lt;T&gt; {<br> . struct Node {<br> . . public int[] Next;<br> . . public T Value;<br> . }<br> . List&lt;Node&gt; _data; better yet: use InternalList&lt;Node&gt; from<br> . // <a href="https://github.com/qwertie/Loyc/blob/master/Src/Loyc.Essentials/Collections/Implementations/InternalList.cs" rel="nofollow">https://github.com/qwertie/Loyc/blob/master/Src/Loyc.Essentials/Collections/Implementations/InternalList.cs</a><br> . int _firstEmptyCell;<br> }</p> 
         <p>Then rather than a normal linked list, you use indexes as if they were pointers; Next[i] is the index of the next item. When “removing” an item, just clear its Node.Value to default(T) and add it to a singly-linked list of “empty cells” which will be used later when adding items (this implies that you can’t easily reduce memory usage of the list, but this is how .NET collections normally work anyway)</p> 
         <p>Then, for less memory usage, eliminate the Node struct and the _data list and instead use this:</p> 
         <p>List&lt;T&gt; _values;<br> List&lt;List&gt; _next;</p> 
         <p>in this case _next[j][i] stores the value that used to be stored in _data[i].Next[j], such that _next[j].Count == _values.Count.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-176039"> 
        <div id="div-comment-176039" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/e4a9957508aa1bdb16018793cfc1bb40?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://loyc.net" rel="external nofollow" class="url">David Piepgrass</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-176039"> May 26, 2014 at 1:50 pm</a> 
         </div> 
         <p>(List&lt;List&gt; _next; should have said List&lt;List&lt;T&gt;&gt; — I neglected to convert one of the “&lt;” signs to “&amp;lt;”)</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-205255"> 
        <div id="div-comment-205255" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/d289a38ff774598be5df9ab87788e74f?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://www.law.harvard.edu/" rel="external nofollow" class="url">Ivory</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-205255"> May 22, 2015 at 8:57 pm</a> 
         </div> 
         <p>So folks should find the origins in their eyes issues by removing their ranges.</p> 
         <p>That’s since whenever you don lenses, your sight are better to become<br> tired.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-227186"> 
        <div id="div-comment-227186" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/befec16b8a1f48e5f402e94f84790421?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Pham The Trung</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-227186"> March 7, 2016 at 6:50 am</a> 
         </div> 
         <p>Your remove and contains method have bugs. You need to handle case when head.value == value</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-227187"> 
        <div id="div-comment-227187" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/befec16b8a1f48e5f402e94f84790421?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn"><a href="http://deleted" rel="external nofollow" class="url">Pham The Trung</a></cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-227187"> March 7, 2016 at 6:52 am</a> 
         </div> 
         <p>Oops, sorry, head doesn’t have any value</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-228758"> 
        <div id="div-comment-228758" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://0.gravatar.com/avatar/8e3d23efc1232fb53cde246d0a67886a?s=40&amp;d=http%3A%2F%2F0.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Dale</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-228758"> April 25, 2016 at 8:01 am</a> 
         </div> 
         <p>Very nice explanation.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment even thread-even depth-1" id="comment-238089"> 
        <div id="div-comment-238089" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/ba99ce8ec55d22204b7db921578039f5?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Boni</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-238089"> November 24, 2016 at 8:48 pm</a> 
         </div> 
         <p>Great article. I like how you perform the insert top-down as opposed to building an update list as described in the original paper. One thing (bug?) I noticed was that your Remove() function didn’t decrement the _levels variable (current max level) if the removed node was the last on that level (also mentioned in the paper).</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
       <li class="comment odd alt thread-odd thread-alt depth-1" id="comment-238090"> 
        <div id="div-comment-238090" class="comment-body"> 
         <div class="comment-author vcard"> 
          <img alt="" src="http://1.gravatar.com/avatar/ba99ce8ec55d22204b7db921578039f5?s=40&amp;d=http%3A%2F%2F1.gravatar.com%2Favatar%2Fad516503a11cd5ca435acc9bb6523536%3Fs%3D40&amp;r=G" class="avatar avatar-40 photo" height="40" width="40"> 
          <cite class="fn">Boni</cite> 
          <span class="says">says:</span> 
         </div> 
         <div class="comment-meta commentmetadata">
          <a href="http://igoro.com/archive/skip-lists-are-fascinating/comment-page-1/#comment-238090"> November 24, 2016 at 9:14 pm</a> 
         </div> 
         <p>Actually, I just realized that building the update list lets you cancel out of an insert. For example, if the values were actually keys and meant to be unique, you could cancel the insert if you found a duplicate.</p> 
         <div class="reply"> 
         </div> 
        </div> </li>
       <!-- #comment-## --> 
      </ol> 
      <div class="navigation"> 
       <div class="alignleft"></div> 
       <div class="alignright"></div> 
      </div> 
      <div id="respond"> 
       <h3>Leave a Reply</h3> 
       <div class="cancel-comment-reply"> 
        <small><a rel="nofollow" id="cancel-comment-reply-link" href="/archive/skip-lists-are-fascinating/#respond" style="display:none;">Click here to cancel reply.</a></small> 
       </div> 
       <form action="http://igoro.com/wordpress/wp-comments-post.php" method="post" id="commentform"> 
        <p><input type="text" name="author" id="author" value="" size="22" tabindex="1"> <label for="author"><small>Name </small></label></p> 
        <p><input type="text" name="email" id="email" value="" size="22" tabindex="2"> <label for="email"><small>Email (will not be published) </small></label></p> 
        <p><input type="text" name="url" id="url" value="" size="22" tabindex="3"> <label for="url"><small>Website</small></label></p> 
        <p><small>You can use these tags: &lt;a href="" title=""&gt; &lt;abbr title=""&gt; &lt;acronym title=""&gt; &lt;b&gt; &lt;blockquote cite=""&gt; &lt;cite&gt; &lt;code&gt; &lt;del datetime=""&gt; &lt;em&gt; &lt;i&gt; &lt;q cite=""&gt; &lt;strike&gt; &lt;strong&gt; </small></p> 
        <p><textarea name="comment" id="comment" cols="100%" rows="10" tabindex="4"></textarea></p> 
        <p><input name="submit" type="submit" id="submit" tabindex="5" value="Submit Comment"> <input type="hidden" name="comment_post_ID" value="70" id="comment_post_ID"> <input type="hidden" name="comment_parent" id="comment_parent" value="0"> </p> 
        <script type="text/javascript">
	<!--
	refJS = escape( document[ 'referrer' ] );
	document.write("<input type='hidden' name='refJS' value='"+refJS+"'>");
	// -->
	</script> 
        <p style="display: none;"><input type="hidden" id="akismet_comment_nonce" name="akismet_comment_nonce" value="3a41fbca01"></p>
        <script src="http://igoro.com/?live-comment-preview.js" type="text/javascript"></script>
        <div id="commentPreview"></div>
        <noscript>
         <p><strong>Currently you have JavaScript disabled. In order to post comments, please make sure JavaScript and Cookies are enabled, and reload the page.</strong> <a href="http://www.google.com/support/bin/answer.py?answer=23852" rel="nofollow external">Click here for instructions</a> on how to enable JavaScript in your browser.</p>
        </noscript> 
        <p style="display: none;"><input type="hidden" id="ak_js" name="ak_js" value="35"></p> 
       </form> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div id="sidebar"> 
    <div id="sidebar-left"> 
     <div id="text-177432262" class="widget_text">
      <h4>About</h4> 
      <div class="textwidget">
       <img src="http://igoro.com/images/igor.jpg" alt="Photo of Igor Ostrovsky" align="left" style="margin-right: 10px"> 
       <p style="margin-top: 0px">I am an engineer at a stealth-mode systems startup in downtown Mountain View, CA. </p> 
       <p> <b>I can't say what we are building, but we are growing very rapidly and hiring software and hardware engineers.</b> If that sounds interesting to you, message me at <script type="text/javascript"> 
<!-- 
emailAddr='gmail.com' 
emailAddr=('igoros' + '@' + emailAddr) 
document.write('<A href="mailto:' + emailAddr + '">' + emailAddr + '</a>.') 
//-->
</script> </p>
      </div> 
     </div>
     <div id="subscribers-text-counter" class="widget_subscribers_text_counter">
      <h4>Subscribe</h4>
      <p><a href="http://igoro.com/feed/"><img src="http://feeds.feedburner.com/~fc/igoro?bg=99CCFF&amp;fg=444444&amp;anim=0" height="26" width="88" style="border:0" alt=""></a></p> 
      <div style="font-size:16px"> 
       <a style="height: 40px; padding: 5px 0 5px 0; text-decoration: none;" href="http://igoro.com/feed/" title="Subscribe 
via RSS" target="_blank"> <img src="http://igoro.com/wordpress/wp-content/plugins/subscribers-text-counter/icons/rss.png" alt="Subscribe via RSS" width="40" height="40" style="vertical-align: middle;"> Feed </a> 
      </div> 
      <div style="font-size:16px"> 
       <a style="height: 40px; padding: 5px 0 5px 0; text-decoration: none;" href="http://www.twitter.com/igoro" title="Subscribe via Twitter" target="_blank"> <img src="http://igoro.com/wordpress/wp-content/plugins/subscribers-text-counter/icons/twitter.png" alt="Subscribe via Twitter" width="40" height="40" style="vertical-align: middle;"> Twitter </a> 
      </div> 
      <div style="font-size:16px"> 
       <a style="height: 40px; padding: 5px 0 5px 0; text-decoration: none;" href="" title="Subscribe via Email" target="_blank"> <img src="http://igoro.com/wordpress/wp-content/plugins/subscribers-text-counter/icons/email.png" alt="Subscribe via Email" width="40" height="40" style="vertical-align: middle;"> Subscribe by email </a> 
      </div> 
      <div style="clear: both;"></div> 
     </div> 
     <!-- Wordpress Popular Posts Plugin v3.0.3 [W] [all] [views] [regular] --> 
     <div id="wpp-3" class="popular-posts"> 
      <h4>Popular Posts</h4> 
      <ul class="wpp-list"> 
       <li><a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/" title="What really happens when you navigate to a URL" class="wpp-post-title" target="_self">What really happens when you navigate to a URL</a> <span class="post-stats"><span class="wpp-comments">205 comments</span></span> </li> 
       <li><a href="http://igoro.com/archive/gallery-of-processor-cache-effects/" title="Gallery of Processor Cache Effects" class="wpp-post-title" target="_self">Gallery of Processor Cache Effects</a> <span class="post-stats"><span class="wpp-comments">85 comments</span></span> </li> 
       <li><a href="http://igoro.com/archive/7-tricks-to-simplify-your-programs-with-linq/" title="7 tricks to simplify your programs with LINQ" class="wpp-post-title" target="_self">7 tricks to simplify your programs with LINQ</a> <span class="post-stats"><span class="wpp-comments">44 comments</span></span> </li> 
       <li><a href="http://igoro.com/archive/fun-with-c-generics-down-casting-to-a-generic-type/" title="Fun with C# generics: down-casting to a generic type" class="wpp-post-title" target="_self">Fun with C# generics: down-casting to a generic type</a> <span class="post-stats"><span class="wpp-comments">29 comments</span></span> </li> 
       <li><a href="http://igoro.com/archive/fast-and-slow-if-statements-branch-prediction-in-modern-processors/" title="Fast and slow if-statements: branch prediction in modern processors" class="wpp-post-title" target="_self">Fast and slow if-statements: branch prediction in modern processors</a> <span class="post-stats"><span class="wpp-comments">36 comments</span></span> </li> 
       <li><a href="http://igoro.com/archive/skip-lists-are-fascinating/" title="Skip lists are fascinating!" class="wpp-post-title" target="_self">Skip lists are fascinating!</a> <span class="post-stats"><span class="wpp-comments">46 comments</span></span> </li> 
       <li><a href="http://igoro.com/archive/efficient-auto-complete-with-a-ternary-search-tree/" title="Efficient auto-complete with a ternary search tree" class="wpp-post-title" target="_self">Efficient auto-complete with a ternary search tree</a> <span class="post-stats"><span class="wpp-comments">36 comments</span></span> </li> 
       <li><a href="http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/" title="Volatile keyword in C# – memory model explained" class="wpp-post-title" target="_self">Volatile keyword in C# – memory model explained</a> <span class="post-stats"><span class="wpp-comments">29 comments</span></span> </li> 
       <li><a href="http://igoro.com/archive/why-computers-represent-signed-integers-using-twos-complement/" title="Why computers represent signed integers using two’s complement" class="wpp-post-title" target="_self">Why computers represent signed integers using two’s complement</a> <span class="post-stats"><span class="wpp-comments">19 comments</span></span> </li> 
       <li><a href="http://igoro.com/archive/is-two-to-the-power-of-infinity-more-than-infinity/" title="Is two to the power of infinity more than infinity?" class="wpp-post-title" target="_self">Is two to the power of infinity more than infinity?</a> <span class="post-stats"><span class="wpp-comments">17 comments</span></span> </li> 
      </ul> 
     </div> 
     <!-- End Wordpress Popular Posts Plugin v3.0.3 --> 
     <div id="recent-posts-4" class="widget_recent_entries"> 
      <h4>Recent Posts</h4> 
      <ul> 
       <li> <a href="http://igoro.com/archive/how-raid-6-dual-parity-calculation-works/">How RAID-6 dual parity calculation works</a> </li> 
       <li> <a href="http://igoro.com/archive/is-two-to-the-power-of-infinity-more-than-infinity/">Is two to the power of infinity more than infinity?</a> </li> 
       <li> <a href="http://igoro.com/archive/why-computers-represent-signed-integers-using-twos-complement/">Why computers represent signed integers using two’s complement</a> </li> 
       <li> <a href="http://igoro.com/archive/graphs-trees-and-origins-of-humanity/">Graphs, trees, and origins of humanity</a> </li> 
       <li> <a href="http://igoro.com/archive/fast-and-slow-if-statements-branch-prediction-in-modern-processors/">Fast and slow if-statements: branch prediction in modern processors</a> </li> 
      </ul> 
     </div>
     <div id="recent-comments-2" class="widget_recent_comments">
      <h4>Recent Comments</h4>
      <ul id="recentcomments">
       <li class="recentcomments"><span class="comment-author-link"><a href="http://www.nemzetkozikoltoztetes.eu" rel="external nofollow" class="url">nemzetközi költöztetés</a></span> on <a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/comment-page-5/#comment-246458">What really happens when you navigate to a URL</a></li>
       <li class="recentcomments"><span class="comment-author-link"><a href="https://dapurpacu.com/170781/gt-radial-savero-komodo-siap-gempur-sirkuit-batulicin/" rel="external nofollow" class="url">h isam</a></span> on <a href="http://igoro.com/archive/efficient-auto-complete-with-a-ternary-search-tree/comment-page-1/#comment-246255">Efficient auto-complete with a ternary search tree</a></li>
       <li class="recentcomments"><span class="comment-author-link">Gregor Gramlich</span> on <a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/comment-page-4/#comment-246088">What really happens when you navigate to a URL</a></li>
       <li class="recentcomments"><span class="comment-author-link"><a href="http://lkjlskdfj.net" rel="external nofollow" class="url">nanoo</a></span> on <a href="http://igoro.com/archive/fast-and-slow-if-statements-branch-prediction-in-modern-processors/comment-page-1/#comment-245854">Fast and slow if-statements: branch prediction in modern processors</a></li>
       <li class="recentcomments"><span class="comment-author-link"><a href="https://123boot.pro/" rel="external nofollow" class="url">nudes</a></span> on <a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/comment-page-4/#comment-245849">What really happens when you navigate to a URL</a></li>
       <li class="recentcomments"><span class="comment-author-link"><a href="https://www.facebook.com/ShaneIndonesia" rel="external nofollow" class="url">kursus bahasa inggris untuk karyawan</a></span> on <a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/comment-page-4/#comment-245823">What really happens when you navigate to a URL</a></li>
       <li class="recentcomments"><span class="comment-author-link"><a href="http://mashhadmarkets.tebyan.net/" rel="external nofollow" class="url">????? ???? ????</a></span> on <a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/comment-page-4/#comment-245797">What really happens when you navigate to a URL</a></li>
       <li class="recentcomments"><span class="comment-author-link"><a href="https://glam-seamless.pissedconsumer.com" rel="external nofollow" class="url">anal lube</a></span> on <a href="http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/comment-page-4/#comment-245775">What really happens when you navigate to a URL</a></li>
      </ul>
     </div>
     <div id="collapsarch-4" class="widget_collapsarch">
      <h4>Archives</h4>
      <ul id="widget-collapsarch-4-top" class="collapsing archives list"> 
       <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2014/">2014 <span class="yearCount">(1)</span> </a> 
        <div style="display:none" id="collapsArch-2014:4"> 
         <ul> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2014/09/" title="September">September <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2014-9:4"> 
           </div> </li> 
          <!-- close expanded month --> 
         </ul> 
        </div> </li> 
       <!-- end year --> 
       <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2011/">2011 <span class="yearCount">(1)</span> </a> 
        <div style="display:none" id="collapsArch-2011:4"> 
         <ul> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2011/04/" title="April">April <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2011-4:4"> 
           </div> </li> 
          <!-- close expanded month --> 
         </ul> 
        </div> </li> 
       <!-- end year --> 
       <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2010/">2010 <span class="yearCount">(8)</span> </a> 
        <div style="display:none" id="collapsArch-2010:4"> 
         <ul> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2010/08/" title="August">August <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2010-8:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2010/07/" title="July">July <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2010-7:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2010/05/" title="May">May <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2010-5:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2010/04/" title="April">April <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2010-4:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2010/03/" title="March">March <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2010-3:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2010/02/" title="February">February <span class="monthCount">(2)</span> </a> 
           <div style="display:none" id="collapsArch-2010-2:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2010/01/" title="January">January <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2010-1:4"> 
           </div> </li> 
          <!-- close expanded month --> 
         </ul> 
        </div> </li> 
       <!-- end year --> 
       <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2009/">2009 <span class="yearCount">(12)</span> </a> 
        <div style="display:none" id="collapsArch-2009:4"> 
         <ul> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2009/11/" title="November">November <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2009-11:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2009/10/" title="October">October <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2009-10:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2009/09/" title="September">September <span class="monthCount">(2)</span> </a> 
           <div style="display:none" id="collapsArch-2009-9:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2009/08/" title="August">August <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2009-8:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2009/06/" title="June">June <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2009-6:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2009/05/" title="May">May <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2009-5:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2009/04/" title="April">April <span class="monthCount">(2)</span> </a> 
           <div style="display:none" id="collapsArch-2009-4:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2009/03/" title="March">March <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2009-3:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2009/02/" title="February">February <span class="monthCount">(2)</span> </a> 
           <div style="display:none" id="collapsArch-2009-2:4"> 
           </div> </li> 
          <!-- close expanded month --> 
         </ul> 
        </div> </li> 
       <!-- end year --> 
       <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2008/">2008 <span class="yearCount">(17)</span> </a> 
        <div style="display:none" id="collapsArch-2008:4"> 
         <ul> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2008/11/" title="November">November <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2008-11:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2008/10/" title="October">October <span class="monthCount">(3)</span> </a> 
           <div style="display:none" id="collapsArch-2008-10:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2008/09/" title="September">September <span class="monthCount">(3)</span> </a> 
           <div style="display:none" id="collapsArch-2008-9:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2008/08/" title="August">August <span class="monthCount">(3)</span> </a> 
           <div style="display:none" id="collapsArch-2008-8:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2008/07/" title="July">July <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2008-7:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2008/06/" title="June">June <span class="monthCount">(2)</span> </a> 
           <div style="display:none" id="collapsArch-2008-6:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2008/05/" title="May">May <span class="monthCount">(4)</span> </a> 
           <div style="display:none" id="collapsArch-2008-5:4"> 
           </div> </li> 
          <!-- close expanded month --> 
         </ul> 
        </div> </li> 
       <!-- end year --> 
       <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2007/">2007 <span class="yearCount">(4)</span> </a> 
        <div style="display:none" id="collapsArch-2007:4"> 
         <ul> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2007/09/" title="September">September <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2007-9:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2007/07/" title="July">July <span class="monthCount">(1)</span> </a> 
           <div style="display:none" id="collapsArch-2007-7:4"> 
           </div> </li> 
          <!-- close expanded month --> 
          <li class="collapsing archives expand"><span title="click to expand" class="collapsing archives expand"><span class="sym">[+]</span></span><a href="http://igoro.com/archive/2007/06/" title="June">June <span class="monthCount">(2)</span> </a> 
           <div style="display:none" id="collapsArch-2007-6:4"> 
           </div> </li> 
          <!-- close month --> 
         </ul>
        </div></li> 
       <!-- end of collapsing archives -->
       <li style="display:none"><script type="text/javascript">
// <![CDATA[
/* These variables are part of the Collapsing Archives Plugin
   * version: 2.0.2
   * revision: $Id: collapsArch.php 996279 2014-09-24 19:02:53Z robfelty $
   * Copyright 2008 Robert Felty (robfelty.com)
           */
try { collapsItems['catTest'] = 'test'; } catch (err) { collapsItems = new Object(); }
collapsItems['collapsArch-2014-9:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/how-raid-6-dual-parity-calculation-works/\' title=\'How RAID-6 dual parity calculation works\'>How RAID-6 dual parity calculation works</a></li></ul>';
collapsItems['collapsArch-2011-4:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/is-two-to-the-power-of-infinity-more-than-infinity/\' title=\'Is two to the power of infinity more than infinity?\'>Is two to the power of infinity more than infinity?</a></li></ul>';
collapsItems['collapsArch-2010-8:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/why-computers-represent-signed-integers-using-twos-complement/\' title=\'Why computers represent signed integers using two&rsquo;s complement\'>Why computers represent signed integers using two&rsquo;s complement</a></li></ul>';
collapsItems['collapsArch-2010-7:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/graphs-trees-and-origins-of-humanity/\' title=\'Graphs, trees, and origins of humanity\'>Graphs, trees, and origins of humanity</a></li></ul>';
collapsItems['collapsArch-2010-5:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/fast-and-slow-if-statements-branch-prediction-in-modern-processors/\' title=\'Fast and slow if-statements: branch prediction in modern processors\'>Fast and slow if-statements: branch prediction in modern processors</a></li></ul>';
collapsItems['collapsArch-2010-4:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/use-c-dynamic-typing-to-conveniently-access-internals-of-an-object/\' title=\'Use C# dynamic typing to conveniently access internals of an object\'>Use C# dynamic typing to conveniently access internals of an object</a></li></ul>';
collapsItems['collapsArch-2010-3:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/how-gpu-came-to-be-used-for-general-computation/\' title=\'How GPU came to be used for general computation\'>How GPU came to be used for general computation</a></li></ul>';
collapsItems['collapsArch-2010-2:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/volatile-keyword-in-c-memory-model-explained/\' title=\'Volatile keyword in C# – memory model explained\'>Volatile keyword in C# – memory model explained</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/what-really-happens-when-you-navigate-to-a-url/\' title=\'What really happens when you navigate to a URL\'>What really happens when you navigate to a URL</a></li></ul>';
collapsItems['collapsArch-2010-1:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/gallery-of-processor-cache-effects/\' title=\'Gallery of Processor Cache Effects\'>Gallery of Processor Cache Effects</a></li></ul>';
collapsItems['collapsArch-2009-11:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/video-of-my-plinq-session-at-pdc-2009/\' title=\'Video of my PLINQ session at PDC 2009\'>Video of my PLINQ session at PDC 2009</a></li></ul>';
collapsItems['collapsArch-2009-10:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/robozzle-hacked-and-100-sites-are-still-compromised/\' title=\'RoboZZle hacked, and 100+ sites are still compromised\'>RoboZZle hacked, and 100+ sites are still compromised</a></li></ul>';
collapsItems['collapsArch-2009-9:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/human-heart-is-a-turing-machine-research-on-xbox-360-shows-wait-what/\' title=\'Human heart is a Turing machine, research on XBox 360 shows. Wait, what?\'>Human heart is a Turing machine, research on XBox 360 shows. Wait, what?</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/program-like-a-quake-developer/\' title=\'Program like a Quake developer\'>Program like a Quake developer</a></li></ul>';
collapsItems['collapsArch-2009-8:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/efficient-auto-complete-with-a-ternary-search-tree/\' title=\'Efficient auto-complete with a ternary search tree\'>Efficient auto-complete with a ternary search tree</a></li></ul>';
collapsItems['collapsArch-2009-6:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/7-tips-for-extending-browser-functionality-to-silverlight-apps/\' title=\'7 tips for extending browser functionality to Silverlight apps\'>7 tips for extending browser functionality to Silverlight apps</a></li></ul>';
collapsItems['collapsArch-2009-5:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/my-youtube-debut-a-robozzle-demo-video/\' title=\'My YouTube debut: a RoboZZle demo video\'>My YouTube debut: a RoboZZle demo video</a></li></ul>';
collapsItems['collapsArch-2009-4:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/precomputed-view-a-cool-and-useful-sql-pattern/\' title=\'Precomputed view: A cool and useful SQL pattern\'>Precomputed view: A cool and useful SQL pattern</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/choose-expression-proposal-for-a-revolutionary-c-construct/\' title=\'Choose expression: proposal for a revolutionary C# construct\'>Choose expression: proposal for a revolutionary C# construct</a></li></ul>';
collapsItems['collapsArch-2009-3:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/the-first-month-of-my-online-game/\' title=\'The first month of my online game\'>The first month of my online game</a></li></ul>';
collapsItems['collapsArch-2009-2:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/my-hobby-project-a-social-puzzle-game-developed-in-silverlight/\' title=\'My hobby project: a social puzzle game developed in Silverlight\'>My hobby project: a social puzzle game developed in Silverlight</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/puzzling-over-arrays-and-enumerators-in-c/\' title=\'Puzzling over arrays and enumerators in C#\'>Puzzling over arrays and enumerators in C#</a></li></ul>';
collapsItems['collapsArch-2008-11:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/how-to-recover-a-lost-post-in-windows-live-writer/\' title=\'How to recover a lost post in Windows Live Writer\'>How to recover a lost post in Windows Live Writer</a></li></ul>';
collapsItems['collapsArch-2008-10:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/how-to-write-a-self-printing-program/\' title=\'How to write a self-printing program\'>How to write a self-printing program</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/self-printing-game-of-life-in-c/\' title=\'Self-printing Game of Life in C#\'>Self-printing Game of Life in C#</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/numbers-that-cannot-be-computed/\' title=\'Numbers that cannot be computed\'>Numbers that cannot be computed</a></li></ul>';
collapsItems['collapsArch-2008-9:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/one-linq-operator-to-rule-them-all/\' title=\'One LINQ operator to rule them all\'>One LINQ operator to rule them all</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/another-linq-puzzle/\' title=\'Another LINQ puzzle\'>Another LINQ puzzle</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/little-linq-puzzle/\' title=\'Little LINQ puzzle\'>Little LINQ puzzle</a></li></ul>';
collapsItems['collapsArch-2008-8:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/data-structure-zoo-ordered-set/\' title=\'Data structure zoo: ordered set\'>Data structure zoo: ordered set</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/most-common-performance-issues-in-parallel-programs/\' title=\'Most Common Performance Issues in Parallel Programs\'>Most Common Performance Issues in Parallel Programs</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/big-oh-in-the-parallel-world/\' title=\'Big Oh in the parallel world\'>Big Oh in the parallel world</a></li></ul>';
collapsItems['collapsArch-2008-7:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/skip-lists-are-fascinating/\' title=\'Skip lists are fascinating!\'>Skip lists are fascinating!</a></li></ul>';
collapsItems['collapsArch-2008-6:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/overview-of-concurrency-in-net-framework-35/\' title=\'Overview of concurrency in .NET Framework 3.5\'>Overview of concurrency in .NET Framework 3.5</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/a-neat-way-to-express-multi-clause-if-statements-in-c-based-languages/\' title=\'A neat way to express multi-clause if statements in C-based languages\'>A neat way to express multi-clause if statements in C-based languages</a></li></ul>';
collapsItems['collapsArch-2008-5:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/extended-linq-additional-operators-for-linq-to-objects/\' title=\'Extended LINQ: additional operators for LINQ to objects\'>Extended LINQ: additional operators for LINQ to objects</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/7-tricks-to-simplify-your-programs-with-linq/\' title=\'7 tricks to simplify your programs with LINQ\'>7 tricks to simplify your programs with LINQ</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/programming-job-interview-challenge/\' title=\'Programming job interview challenge\'>Programming job interview challenge</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/quicksort-killer/\' title=\'Quicksort killer\'>Quicksort killer</a></li></ul>';
collapsItems['collapsArch-2007-9:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/fun-with-c-generics-down-casting-to-a-generic-type/\' title=\'Fun with C# generics: down-casting to a generic type\'>Fun with C# generics: down-casting to a generic type</a></li></ul>';
collapsItems['collapsArch-2007-7:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/its-official-i-exist/\' title=\'It\'s official: I exist\'>It\'s official: I exist</a></li></ul>';
collapsItems['collapsArch-2007-6:4'] = '<ul>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/17/\' title=\'French internet kiosk made my life difficult\'>French internet kiosk made my life difficult</a></li>          <li class=\'collapsing archives item\'><a href=\'http://igoro.com/archive/salesmen-never-lie/\' title=\'Salesmen never lie\'>Salesmen never lie</a></li></ul>';
/*  Collapse Functions, version 2.0
 *
 *--------------------------------------------------------------------------*/
String.prototype.trim = function() {
  return this.replace(/^\s+|\s+$/g,"");
}

function createCookie(name,value,days) {
  if (days) {
    var date = new Date();
    date.setTime(date.getTime()+(days*24*60*60*1000));
    var expires = "; expires="+date.toGMTString();
  } else {
    var expires = "";
  }
  document.cookie = name+"="+value+expires+"; path=/";
}

function readCookie(name) {
  var nameEQ = name + "=";
  var ca = document.cookie.split(';');
  for(var i=0;i < ca.length;i++) {
    var c = ca[i];
    while (c.charAt(0)==' ') {
      c = c.substring(1,c.length);
    }
    if (c.indexOf(nameEQ) == 0) {
      return c.substring(nameEQ.length,c.length);
    }
  }
  return null;
}

function eraseCookie(name) {
  createCookie(name,"",-1);
}

function addExpandCollapse(id, expandSym, collapseSym, accordion) {
  jQuery('#' + id + ' span.expand').live('click', function() {
    if (accordion==1) {
      var theDiv = jQuery(this).parent().parent().find('span.collapse').parent().children('div');
      jQuery(theDiv).hide('normal');
      jQuery(this).parent().parent().find('span.collapse').removeClass('collapse').addClass('expand');
      createCookie(theDiv.attr('id'), 0, 7);
      jQuery(this).parent().parent().find('span.sym').html(expandSym);
      //jQuery('#' + id + ' .expand .sym').html(expandSym);
    }
    expandArch(this, expandSym, collapseSym);
    return false;
  });
  jQuery('#' + id + ' span.collapse').live('click', function() {
    collapseArch(this, expandSym, collapseSym);
    return false;
  });
}

function expandArch(symbol, expandSym, collapseSym) {
    var theDiv = jQuery(symbol).parent().children('div');
    try {
      if (collapsItems[jQuery(theDiv).attr('id')]!='') {
        jQuery(theDiv).html(collapsItems[jQuery(theDiv).attr('id')]).show('normal');
      } else {
        jQuery(theDiv).show('normal');
      }
    } catch (err) {
      jQuery(theDiv).show('normal');
    }
    jQuery(symbol).removeClass('expand').addClass('collapse');
    jQuery(symbol).children('.sym').html(collapseSym);
  createCookie(theDiv.attr('id'), 1, 7);
}
function collapseArch(symbol, expandSym, collapseSym) {
    var theDiv = jQuery(symbol).parent().children('div');
    jQuery(theDiv).hide('normal');
    jQuery(symbol).removeClass('collapse').addClass('expand');
    jQuery(symbol).children('.sym').html(expandSym);
  createCookie(theDiv.attr('id'), 0, 7);
}
addExpandCollapse('widget-collapsarch-4-top','[+]', '[—]', 0)// ]]>
</script></li> 
      </ul> 
     </div> 
    </div> 
    <div id="sidebar-right"> 
     <div class="search-form"> 
      <form method="get" id="searchform" action="http://igoro.com/"> 
       <input type="text" value="Search..." name="s" id="s" onblur="if (this.value == '')  
	        {this.value = 'Search...';}" onfocus="if (this.value == 'Search...')  
	        {this.value = '';}"> 
       <input type="hidden" id="searchsubmit"> 
      </form> 
     </div> 
     <div id="text-354109343" class="widget_text"> 
      <div class="textwidget"></div> 
     </div> 
    </div> 
   </div>
  </div> 
  <div id="footer"> 
   <div id="credits"> 
    <div id="ftnav"> 
     <span class="rss"><a href="http://igoro.com/feed/" title="Subscribe to RSS"><abbr title="Subscribe to RSS">RSS</abbr></a></span> 
    </div> 
    <small>Copyright © 2017 <strong>Igor Ostrovsky Blogging</strong> All rights reserved. Blue Grace theme by <a href="http://www.prelovac.com/vladimir/">Vladimir Prelovac</a></small>. 
    <script type="text/javascript" src="http://igoro.com/wordpress/wp-content/plugins/akismet/_inc/form.js?ver=3.0.2"></script> 
    <script type="text/javascript" src="http://igoro.com/wordpress/wp-includes/js/comment-reply.min.js?ver=4.0.18"></script> 
   </div> 
  </div>   
  <!--  queries. 0.539 seconds. -->
 </body>
</html>