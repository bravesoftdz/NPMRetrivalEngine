<!doctype html>
<html class="no-js hasSidebar hasPageActions hasBreadcrumb " lang="en-us" dir="ltr">
 <head> 
  <meta charset="utf-8"> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
  <meta property="og:title" content="Using Grunt in ASP.NET Core"> 
  <meta property="og:image" content="https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/images/microsoft-header.png"> 
  <meta name="breadcrumb_path" content="/aspnet/breadcrumb/toc.json"> 
  <meta name="ms.assetid" content="471112e9-2c33-454b-96fc-32916102ce73"> 
  <meta name="author" content="Rick-Anderson"> 
  <meta name="ms.author" content="riande"> 
  <meta name="manager" content="wpickett"> 
  <meta name="uid" content="client-side/using-grunt"> 
  <meta name="keywords" content="ASP.NET Core,"> 
  <meta name="ms.topic" content="article"> 
  <meta name="ms.date" content="10/14/2016"> 
  <meta name="ms.technology" content="aspnet"> 
  <meta name="ms.prod" content="asp.net-core"> 
  <meta name="search.ms_sitename" content="Docs"> 
  <meta name="search.ms_docsetname" content="aspnet-core-conceptual"> 
  <meta name="version" content="0"> 
  <meta name="locale" content="en-us"> 
  <meta name="site_name" content="Docs"> 
  <meta name="search.ms_product" content="MSDN"> 
  <meta name="depot_name" content="MSDN.aspnet-core-conceptual"> 
  <meta name="updated_at" content="2017-09-12 03:12 AM"> 
  <meta name="gitcommit" content="https://github.com/aspnet/Docs/blob/854c07c430dc81ddcf9ae793f57c8d666552ccda/aspnetcore/client-side/using-grunt.md"> 
  <meta name="original_content_git_url" content="https://github.com/aspnet/Docs/blob/live/aspnetcore/client-side/using-grunt.md"> 
  <meta name="document_id" content="2e3b23da-ff3d-daf6-c56a-2b8ddf79f805"> 
  <meta name="pagetype" content="Conceptual"> 
  <meta name="toc_rel" content="../toc.json"> 
  <meta name="pdf_url_template" content="https://docs.microsoft.com/pdfstore/en-us/MSDN.aspnet-core-conceptual/{branchName}{pdfName}"> 
  <meta name="word_count" content="1717"> 
  <meta name="scope" content="ASP.NET Core"> 
  <link href="https://docs.microsoft.com/en-us/aspnet/core/client-side/using-grunt" rel="canonical"> 
  <title>Using Grunt in ASP.NET Core | Microsoft Docs</title> 
  <link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/css/870b0825531b1b071dff.site.css "> 
  <link rel="stylesheet" href="/_themes/docs.theme/master/en-us/_themes/css/870b0825531b1b071dff.conceptual.css "> 
  <script>
	var msDocs = {
		data:{
			contentLocale: 'en-us',
			contentDir: 'ltr',
			userLocale: 'en-us',
			userDir: 'ltr',
			pathToTheme: '/_themes/docs.theme/master/en-us/_themes/',
			pageTemplate: 'Conceptual',
			brand: '',
			forceVersionPicker:false		},
		functions:{},
		settings:{
			extendBreadcrumb: false
		}
	};
	if (!('Promise' in window && 'resolve' in window.Promise && 'reject' in window.Promise && 'all' in window.Promise && 'race' in window.Promise)) {
		document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/bluebird.min.js"><\/script>');
	}
	</script> 
  <!--[if lt IE 9]>
		<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.12.4.min.js"></script>
		<script src="/_themes/docs.theme/master/en-us/_themes/global/js/polyfills/all.js"></script>
	<![endif]--> 
  <!--[if gte IE 9]><!--> 
  <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.2.4.min.js"></script> 
  <!--<![endif]--> 
  <script>window.jQuery || document.write('<script src="/_themes/docs.theme/master/en-us/_themes/global/js/jquery/jquery-1.12.4.min.js"><\/script>')</script> 
  <script src="/_themes/docs.theme/master/en-us/_themes/global/js/global.min.js?v=263"></script> 
 </head> 
 <body> 
  <div id="headerAreaHolder" ms.pgarea="header" data-bi-name="header"> 
   <div id="uhfPlaceHolder" class="c-me"></div> 
  </div> 
  <div class="container mainContainer" lang="en-us" dir="ltr" ms.pgarea="body" data-bi-name="body"> 
   <main role="main" ms.cmpgrp="content" data-bi-name="content"> 
    <div id="main"> 
     <h1 id="using-grunt-in-aspnet-core" sourcefile="client-side/using-grunt.md" sourcestartlinenumber="15" sourceendlinenumber="15">Using Grunt in ASP.NET Core</h1> 
     <div class="metadata loading" ms.cmpgrp="page info" data-bi-name="page info"> 
      <div> 
       <time class="date" datetime="10/14/2016 12:00:00 AM">2016-10-14</time> 
       <span class="reading-time">8 minutes to read</span> 
       <span class="contributors-text">Contributors</span> 
       <ul class="contributors" ms.cmpgrp="contributors" data-bi-name="contributors"> 
        <li><a href="https://github.com/Rick-Anderson" title="Rick Anderson" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/Rick-Anderson.png?size=16" alt="Rick Anderson"></a></li> 
        <li><a href="https://github.com/isaac2004" title="Isaac Levin" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/isaac2004.png?size=16" alt="Isaac Levin"></a></li> 
        <li><a href="https://github.com/scottaddie" title="Scott Addie" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/scottaddie.png?size=16" alt="Scott Addie"></a></li> 
        <li><a href="https://github.com/v-anpasi" title="Andy Pasic" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/v-anpasi.png?size=16" alt="Andy Pasic"></a></li> 
        <li><a href="https://github.com/GuardRex" title="Luke Latham" ms.cmpnm="contributorprofile" data-bi-name="contributorprofile"><img src="https://github.com/GuardRex.png?size=16" alt="Luke Latham"></a></li> 
        <li><a href="https://github.com/aspnet/Docs/blob/master/aspnetcore/client-side/using-grunt.md" ms.cmpnm="contributorshowall" data-bi-name="contributorshowall">all</a></li> 
       </ul> 
      </div> 
      <nav id="center-doc-outline" class="doc-outline" ms.cmpgrp="intopic toc" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation"> 
       <h3>In this article</h3> 
      </nav> 
     </div> 
     <div>
      <div class="content"> 
       <p>By <a href="https://blog.falafel.com/falafel-software-recognized-sitefinity-website-year/" data-linktype="external">Noel Rice</a></p> 
       <p>Grunt is a JavaScript task runner that automates script minification, TypeScript compilation, code quality "lint" tools, CSS pre-processors, and just about any repetitive chore that needs doing to support client development. Grunt is fully supported in Visual Studio, though the ASP.NET project templates use Gulp by default (see <a href="using-gulp" data-linktype="relative-path">Using Gulp</a>).</p> 
       <p>This example uses an empty ASP.NET Core project as its starting point, to show how to automate the client build process from scratch.</p> 
       <p>The finished example cleans the target deployment directory, combines JavaScript files, checks code quality, condenses JavaScript file content and deploys to the root of your web application. We will use the following packages:</p> 
       <ul> 
        <li><p><strong>grunt</strong>: The Grunt task runner package.</p> </li> 
        <li><p><strong>grunt-contrib-clean</strong>: A plugin that removes files or directories.</p> </li> 
        <li><p><strong>grunt-contrib-jshint</strong>: A plugin that reviews JavaScript code quality.</p> </li> 
        <li><p><strong>grunt-contrib-concat</strong>: A plugin that joins files into a single file.</p> </li> 
        <li><p><strong>grunt-contrib-uglify</strong>: A plugin that minifies JavaScript to reduce size.</p> </li> 
        <li><p><strong>grunt-contrib-watch</strong>: A plugin that watches file activity.</p> </li> 
       </ul> 
       <h2 id="preparing-the-application">Preparing the application</h2> 
       <p>To begin, set up a new empty web application and add TypeScript example files. TypeScript files are automatically compiled into JavaScript using default Visual Studio settings and will be our raw material to process using Grunt.</p> 
       <ol> 
        <li><p>In Visual Studio, create a new <code>ASP.NET Web Application</code>.</p> </li> 
        <li><p>In the <strong>New ASP.NET Project</strong> dialog, select the ASP.NET Core <strong>Empty</strong> template and click the OK button.</p> </li> 
        <li><p>In the Solution Explorer, review the project structure. The <code>\src</code> folder includes empty <code>wwwroot</code> and <code>Dependencies</code> nodes.</p> <p><img src="using-grunt/_static/grunt-solution-explorer.png" alt="empty web solution" data-linktype="relative-path"></p> </li> 
        <li><p>Add a new folder named <code>TypeScript</code> to your project directory.</p> </li> 
        <li><p>Before adding any files, let’s make sure that Visual Studio has the option 'compile on save' for TypeScript files checked. <em>Tools &gt; Options &gt; Text Editor &gt; Typescript &gt; Project</em></p> <p><img src="using-grunt/_static/typescript-options.png" alt="options setting auto compliation of TypeScript files" data-linktype="relative-path"></p> </li> 
        <li><p>Right-click the <code>TypeScript</code> directory and select <strong>Add &gt; New Item</strong> from the context menu. Select the <strong>JavaScript file</strong> item and name the file <em>Tastes.ts</em> (note the *.ts extension). Copy the line of TypeScript code below into the file (when you save, a new <em>Tastes.js</em> file will appear with the JavaScript source).</p> <pre><code class="lang-typescript">enum Tastes { Sweet, Sour, Salty, Bitter }
</code></pre></li> 
        <li><p>Add a second file to the <strong>TypeScript</strong> directory and name it <code>Food.ts</code>. Copy the code below into the file.</p> <pre><code class="lang-typescript">class Food {
  constructor(name: string, calories: number) {
    this._name = name;
    this._calories = calories;
  }

  private _name: string;
  get Name() {
    return this._name;
  }

  private _calories: number;
  get Calories() {
    return this._calories;
  }

  private _taste: Tastes;
  get Taste(): Tastes { return this._taste }
  set Taste(value: Tastes) {
    this._taste = value;
  }
}
</code></pre></li> 
       </ol> 
       <h2 id="configuring-npm">Configuring NPM</h2> 
       <p>Next, configure NPM to download grunt and grunt-tasks.</p> 
       <ol> 
        <li><p>In the Solution Explorer, right-click the project and select <strong>Add &gt; New Item</strong> from the context menu. Select the <strong>NPM configuration file</strong> item, leave the default name, <em>package.json</em>, and click the <strong>Add</strong> button.</p> </li> 
        <li><p>In the <em>package.json</em> file, inside the <code>devDependencies</code> object braces, enter "grunt". Select <code>grunt</code> from the Intellisense list and press the Enter key. Visual Studio will quote the grunt package name, and add a colon. To the right of the colon, select the latest stable version of the package from the top of the Intellisense list (press <code>Ctrl-Space</code> if Intellisense does not appear).</p> <p> <img src="using-grunt/_static/devdependencies-grunt.png" alt="grun Intellisense" data-linktype="relative-path"></p> 
         <div class="NOTE">
          <h5>Note</h5>
          <p>NPM uses <a href="http://semver.org/" data-linktype="external">semantic versioning</a> to organize dependencies. Semantic versioning, also known as SemVer, identifies packages with the numbering scheme 
           <major>
            .
            <minor>
             .
             <patch>
              . Intellisense simplifies semantic versioning by showing only a few common choices. The top item in the Intellisense list (0.4.5 in the example above) is considered the latest stable version of the package. The caret (^) symbol matches the most recent major version and the tilde (~) matches the most recent minor version. See the 
              <a href="https://www.npmjs.com/package/semver" data-linktype="external">NPM semver version parser reference</a> as a guide to the full expressivity that SemVer provides.
             </patch>
            </minor>
           </major></p>
          <p> </p>
         </div> </li> 
        <li><p>Add more dependencies to load grunt-contrib-* packages for <em>clean</em>, <em>jshint</em>, <em>concat</em>, <em>uglify</em>, and <em>watch</em> as shown in the example below. The versions do not need to match the example.</p> <pre><code class="lang-json">"devDependencies": {
  "grunt": "0.4.5",
  "grunt-contrib-clean": "0.6.0",
  "grunt-contrib-jshint": "0.11.0",
  "grunt-contrib-concat": "0.5.1",
  "grunt-contrib-uglify": "0.8.0",
  "grunt-contrib-watch": "0.6.1"
}
</code></pre></li> 
        <li><p>Save the <em>package.json</em> file.</p> </li> 
       </ol> 
       <p>The packages for each devDependencies item will download, along with any files that each package requires. You can find the package files in the <code>node_modules</code> directory by enabling the <strong>Show All Files</strong> button in the Solution Explorer.</p> 
       <p><img src="using-grunt/_static/node-modules.png" alt="grunt node_modules" data-linktype="relative-path"></p> 
       <div class="NOTE">
        <h5>Note</h5>
        <p>If you need to, you can manually restore dependencies in Solution Explorer by right-clicking on <code>Dependencies\NPM</code> and selecting the <strong>Restore Packages</strong> menu option.</p> 
       </div> 
       <p><img src="using-grunt/_static/restore-packages.png" alt="restore packages" data-linktype="relative-path"></p> 
       <h2 id="configuring-grunt">Configuring Grunt</h2> 
       <p>Grunt is configured using a manifest named <em>Gruntfile.js</em> that defines, loads and registers tasks that can be run manually or configured to run automatically based on events in Visual Studio.</p> 
       <ol> 
        <li><p>Right-click the project and select <strong>Add &gt; New Item</strong>. Select the <strong>Grunt Configuration file</strong> option, leave the default name, <em>Gruntfile.js</em>, and click the <strong>Add</strong> button.</p> <p>The initial code includes a module definition and the <code>grunt.initConfig()</code> method. The <code>initConfig()</code> is used to set options for each package, and the remainder of the module will load and register tasks.</p> <pre><code class="lang-javascript">module.exports = function (grunt) {
  grunt.initConfig({
  });
};
</code></pre></li> 
        <li><p>Inside the <code>initConfig()</code> method, add options for the <code>clean</code> task as shown in the example <em>Gruntfile.js</em> below. The clean task accepts an array of directory strings. This task removes files from wwwroot/lib and removes the entire /temp directory.</p> <pre><code class="lang-javascript">module.exports = function (grunt) {
  grunt.initConfig({
    clean: ["wwwroot/lib/*", "temp/"],
  });
};
</code></pre></li> 
        <li><p>Below the initConfig() method, add a call to <code>grunt.loadNpmTasks()</code>. This will make the task runnable from Visual Studio.</p> <pre><code class="lang-javascript">grunt.loadNpmTasks("grunt-contrib-clean");
</code></pre></li> 
        <li><p>Save <em>Gruntfile.js</em>. The file should look something like the screenshot below.</p> <p> <img src="using-grunt/_static/gruntfile-js-initial.png" alt="initial gruntfile" data-linktype="relative-path"></p> </li> 
        <li><p>Right-click <em>Gruntfile.js</em> and select <strong>Task Runner Explorer</strong> from the context menu. The Task Runner Explorer window will open.</p> <p> <img src="using-grunt/_static/task-runner-explorer-menu.png" alt="task runner explorer menu" data-linktype="relative-path"></p> </li> 
        <li><p>Verify that <code>clean</code> shows under <strong>Tasks</strong> in the Task Runner Explorer.</p> <p> <img src="using-grunt/_static/task-runner-explorer-tasks.png" alt="task runner explorer tasks list" data-linktype="relative-path"></p> </li> 
        <li><p>Right-click the clean task and select <strong>Run</strong> from the context menu. A command window displays progress of the task.</p> <p> <img src="using-grunt/_static/task-runner-explorer-run-clean.png" alt="task runner explorer run clean task" data-linktype="relative-path"></p> 
         <div class="NOTE">
          <h5>Note</h5>
          <p>There are no files or directories to clean yet. If you like, you can manually create them in the Solution Explorer and then run the clean task as a test.</p> 
         </div> </li> 
        <li><p>In the initConfig() method, add an entry for <code>concat</code> using the code below.</p> <p> The <code>src</code> property array lists files to combine, in the order that they should be combined. The <code>dest</code> property assigns the path to the combined file that is produced.</p> <pre><code class="lang-javascript">concat: {
  all: {
    src: ['TypeScript/Tastes.js', 'TypeScript/Food.js'],
    dest: 'temp/combined.js'
  }
},
</code></pre>
         <div class="NOTE">
          <h5>Note</h5>
          <p>The <code>all</code> property in the code above is the name of a target. Targets are used in some Grunt tasks to allow multiple build environments. You can view the built-in targets using Intellisense or assign your own.</p> 
         </div> </li> 
        <li><p>Add the <code>jshint</code> task using the code below.</p> <p> The jshint code-quality utility is run against every JavaScript file found in the temp directory.</p> <pre><code class="lang-javascript">jshint: {
  files: ['temp/*.js'],
  options: {
    '-W069': false,
  }
},
</code></pre>
         <div class="NOTE">
          <h5>Note</h5>
          <p>The option "-W069" is an error produced by jshint when JavaScript uses bracket syntax to assign a property instead of dot notation, i.e. <code>Tastes["Sweet"]</code> instead of <code>Tastes.Sweet</code>. The option turns off the warning to allow the rest of the process to continue.</p> 
         </div> </li> 
        <li><p>Add the <code>uglify</code> task using the code below.</p> <p>The task minifies the <em>combined.js</em> file found in the temp directory and creates the result file in wwwroot/lib following the standard naming convention <em>&lt;file name&gt;.min.js</em>.</p> <pre><code class="lang-javascript">uglify: {
 all: {
   src: ['temp/combined.js'],
   dest: 'wwwroot/lib/combined.min.js'
 }
},
</code></pre></li> 
        <li><p>Under the call grunt.loadNpmTasks() that loads grunt-contrib-clean, include the same call for jshint, concat and uglify using the code below.</p> <pre><code class="lang-javascript">grunt.loadNpmTasks('grunt-contrib-jshint');
grunt.loadNpmTasks('grunt-contrib-concat');
grunt.loadNpmTasks('grunt-contrib-uglify');
</code></pre></li> 
        <li><p>Save <em>Gruntfile.js</em>. The file should look something like the example below.</p> <p><img src="using-grunt/_static/gruntfile-js-complete.png" alt="complete grunt file example" data-linktype="relative-path"></p> </li> 
        <li><p>Notice that the Task Runner Explorer Tasks list includes <code>clean</code>, <code>concat</code>, <code>jshint</code> and <code>uglify</code> tasks. Run each task in order and observe the results in Solution Explorer. Each task should run without errors.</p> <p><img src="using-grunt/_static/task-runner-explorer-run-each-task.png" alt="task runner explorer run each task" data-linktype="relative-path"></p> <p>The concat task creates a new <em>combined.js</em> file and places it into the temp directory. The jshint task simply runs and doesn’t produce output. The uglify task creates a new <em>combined.min.js</em> file and places it into wwwroot/lib. On completion, the solution should look something like the screenshot below:</p> <p><img src="using-grunt/_static/solution-explorer-after-all-tasks.png" alt="solution explorer after all tasks" data-linktype="relative-path"></p> 
         <div class="NOTE">
          <h5>Note</h5>
          <p>For more information on the options for each package, visit <a href="https://www.npmjs.com/" data-linktype="external">https://www.npmjs.com/</a> and lookup the package name in the search box on the main page. For example, you can look up the grunt-contrib-clean package to get a documentation link that explains all of its parameters.</p> 
         </div> </li> 
       </ol> 
       <h3 id="all-together-now">All together now</h3> 
       <p>Use the Grunt <code>registerTask()</code> method to run a series of tasks in a particular sequence. For example, to run the example steps above in the order clean -&gt; concat -&gt; jshint -&gt; uglify, add the code below to the module. The code should be added to the same level as the loadNpmTasks() calls, outside initConfig.</p> 
       <pre><code class="lang-javascript">grunt.registerTask("all", ['clean', 'concat', 'jshint', 'uglify']);
</code></pre>
       <p>The new task shows up in Task Runner Explorer under Alias Tasks. You can right-click and run it just as you would other tasks. The <code>all</code> task will run <code>clean</code>, <code>concat</code>, <code>jshint</code> and <code>uglify</code>, in order.</p> 
       <p><img src="using-grunt/_static/alias-tasks.png" alt="alias grunt tasks" data-linktype="relative-path"></p> 
       <h2 id="watching-for-changes">Watching for changes</h2> 
       <p>A <code>watch</code> task keeps an eye on files and directories. The watch triggers tasks automatically if it detects changes. Add the code below to initConfig to watch for changes to *.js files in the TypeScript directory. If a JavaScript file is changed, <code>watch</code> will run the <code>all</code> task.</p> 
       <pre><code class="lang-javascript">watch: {
  files: ["TypeScript/*.js"],
  tasks: ["all"]
}
</code></pre>
       <p>Add a call to <code>loadNpmTasks()</code> to show the <code>watch</code> task in Task Runner Explorer.</p> 
       <pre><code class="lang-javascript">grunt.loadNpmTasks('grunt-contrib-watch');
</code></pre>
       <p>Right-click the watch task in Task Runner Explorer and select Run from the context menu. The command window that shows the watch task running will display a "Waiting…" message. Open one of the TypeScript files, add a space, and then save the file. This will trigger the watch task and trigger the other tasks to run in order. The screenshot below shows a sample run.</p> 
       <p><img src="using-grunt/_static/watch-running.png" alt="running tasks output" data-linktype="relative-path"></p> 
       <h2 id="binding-to-visual-studio-events">Binding to Visual Studio events</h2> 
       <p>Unless you want to manually start your tasks every time you work in Visual Studio, you can bind tasks to <strong>Before Build</strong>, <strong>After Build</strong>, <strong>Clean</strong>, and <strong>Project Open</strong> events.</p> 
       <p>Let’s bind <code>watch</code> so that it runs every time Visual Studio opens. In Task Runner Explorer, right-click the watch task and select <strong>Bindings &gt; Project Open</strong> from the context menu.</p> 
       <p><img src="using-grunt/_static/bindings-project-open.png" alt="bind a task to the project opening" data-linktype="relative-path"></p> 
       <p>Unload and reload the project. When the project loads again, the watch task will start running automatically.</p> 
       <h2 id="summary">Summary</h2> 
       <p>Grunt is a powerful task runner that can be used to automate most client-build tasks. Grunt leverages NPM to deliver its packages, and features tooling integration with Visual Studio. Visual Studio's Task Runner Explorer detects changes to configuration files and provides a convenient interface to run tasks, view running tasks, and bind tasks to Visual Studio events.</p> 
       <h2 id="additional-resources">Additional resources</h2> 
       <ul> 
        <li><a href="using-gulp" data-linktype="relative-path">Using Gulp</a></li> 
       </ul> 
      </div>
     </div> 
     <div id="comments-container" ms.cmpgrp="comments" data-bi-name="comments" role="form"></div> 
    </div> 
   </main> 
   <div class="pageActions"> 
    <div id="page-actions" ms.cmpgrp="pageactions" data-bi-name="pageactions" role="complementary"> 
     <div id="page-actions-content"> 
      <ul class="action-list"> 
       <li> <a href="#comments-container" id="comments-link" ms.cmpnm="comments" data-bi-name="comments"> <i class="icon icon-comments"></i>Comments </a> </li> 
       <li id="contenteditbtn"> <a href="https://github.com/aspnet/Docs/blob/master/aspnetcore/client-side/using-grunt.md" title="Edit This Document" ms.cmpnm="edit" data-bi-name="edit"> <i class="icon icon-editor"></i>Edit </a> </li> 
       <li> <a href="#" class="sharebutton" title="Share This Document" ms.cmpnm="share" data-bi-name="share"><i class="icon icon-share"></i>Share</a> 
        <div class="share-container"> 
         <div>
          <a href="" class="share-twitter" ms.cmpnm="twitter" data-bi-name="twitter"><i class="icon icon-twitter"></i>Twitter</a>
         </div> 
         <div>
          <a href="" class="share-linkedin" ms.cmpnm="share-linkedin" data-bi-name="linkedin"><i class="icon icon-linkedin"></i>LinkedIn</a>
         </div> 
         <div>
          <a href="" class="share-facebook" ms.cmpnm="facebook" data-bi-name="facebook"><i class="icon icon-facebook"></i>Facebook</a>
         </div> 
         <div>
          <a href="" class="share-email" ms.cmpnm="email" data-bi-name="email"><i class="icon icon-email"></i>Email</a>
         </div> 
        </div> </li> 
       <li class="typeSep">|</li> 
       <li> <label for="theme-selector">Theme</label> <select id="theme-selector" data-bi-name="select-theme"> <option value="" class="removedOnload"></option> <option value="">Light</option> <option value="theme_night">Dark</option> </select> </li> 
      </ul> 
      <nav id="side-doc-outline" class="doc-outline" ms.cmpnm="intopic toc" data-bi-name="intopic toc" role="navigation" aria-label="On page navigation"> 
       <h3>In this article</h3> 
      </nav> 
     </div> 
    </div> 
   </div> 
   <ul class="breadcrumbs" ms.cmpgrp="breadcrumb" data-bi-name="breadcrumb" itemscope itemtype="http://schema.org/BreadcrumbList" role="navigation" aria-label="Breadcrumb">
    <li></li>
   </ul> 
   <div class="sidebar" id="sidebar" ms.cmpgrp="left toc" data-bi-name="left toc" role="navigation" aria-label="Main Navigation" lang="en-us" dir="ltr"> 
    <div id="sidebarContent"> 
     <div class="filterHolder"> 
     </div> 
     <nav class="toc"></nav> 
     <div class="pdfDownloadHolder"></div> 
    </div> 
    <div class="tocSpace"></div> 
   </div> 
   <div id="menu-nav" class="dropdown-container" lang="en-us" dir="ltr"> 
    <div class="dropdown dropdown-full mobilenavi"> 
     <select> </select> 
    </div> 
   </div> 
  </div> 
  <div id="openFeedbackContainer" class="openfeedback-container footer-layout"></div> 
  <div class="container footerContainer"> 
   <footer id="footer" ms.pgarea="footer" data-bi-name="footer" class="footer-layout"> 
    <div class="container" role="contentinfo"> 
     <a data-mscc-ic="false" id="locale-selector-link" href="#" data-bi-name="select-locale" ms.cmpnm="select-locale"></a> 
     <ul class="links" ms.cmpgrp="footerlinks" data-bi-name="footerlinks"> 
      <li><a data-mscc-ic="false" href="https://docs.microsoft.com/teamblog" ms.cmpnm="bloglink" data-bi-name="bloglink">Blog</a></li> 
      <li><a data-mscc-ic="false" href="//privacy.microsoft.com/en-us/" ms.cmpnm="privacy" data-bi-name="privacy">Privacy &amp; Cookies</a></li> 
      <li><a data-mscc-ic="false" href="/en-us/legal/termsofuse" ms.cmpnm="termsofuse" data-bi-name="termsofuse">Terms of Use</a></li> 
      <li><a data-mscc-ic="false" href="//aka.ms/sitefeedback" ms.cmpnm="feedback" data-bi-name="feedback">Feedback</a></li> 
      <li id="impressum-section" hidden><a data-mscc-ic="false" id="impressum-link" href="#" ms.cmpnm="impressum" data-bi-name="impressum">Impressum</a></li> 
      <li><a data-mscc-ic="false" href="https://www.microsoft.com/en-us/legal/intellectualproperty/Trademarks/EN-US.aspx" ms.cmpnm="trademarks" data-bi-name="trademarks">Trademarks</a></li> 
     </ul> 
    </div> 
   </footer> 
  </div> 
  <script src="/_themes/docs.theme/master/en-us/_themes/javascript/870b0825531b1b071dff.conceptual.js"></script>  
 </body>
</html>