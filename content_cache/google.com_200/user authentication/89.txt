<!doctype html>
<html lang="en">
 <head> 
  <title>Express server with JWT authentication | juffalow.com</title> 
  <meta charset="UTF-8"> 
  <meta name="description" content="Post about how to create an Express server with JSON Web Token authentication. You can read here about protecting routes which are available only for logged in users. Everything is well tested and the source code is on GitHub."> 
  <meta name="robots" content="index, follow"> 
  <meta property="og:site_name" content="juffalow.com"> 
  <meta property="og:title" content="Express server with JWT authentication"> 
  <meta property="og:url" content="https://en.juffalow.com/javascript/express-server-with-jwt-authentication/"> 
  <meta property="og:type" content="website"> 
  <meta property="og:description" content="Post about how to create an Express server with JSON Web Token authentication. You can read here about protecting routes which are available only for logged in users. Everything is well tested and the source code is on GitHub."> 
  <meta property="og:image" content="https://en.juffalow.com/wp-content/uploads/2017/02/express-js.png"> 
  <meta name="twitter:site" content="@juffalow"> 
  <meta name="twitter:title" content="Express server with JWT authentication"> 
  <meta name="twitter:description" content="Post about how to create an Express server with JSON Web Token authentication. You can read here about protecting routes which are available only for logged in users. Everything is well tested and the source code is on GitHub."> 
  <meta name="twitter:image" content="https://en.juffalow.com/wp-content/uploads/2017/02/express-js.png"> 
  <link rel="canonical" href="https://en.juffalow.com/javascript/express-server-with-jwt-authentication/"> 
  <link rel="author" href="https://plus.google.com/+MatejJellus"> 
  <link rel="stylesheet" href="https://en.juffalow.com/wp-content/themes/juffalow/css/main.css?v=1.0.4"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <link href="https://en.juffalow.com/wp-content/themes/juffalow/css/bootstrap.min.css?v=1.0.1" rel="stylesheet"> 
  <!-- <link href="https://en.juffalow.com/wp-content/themes/juffalow/css/font-awesome.min.css" rel="stylesheet"> --> 
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"> 
  <link href="https://en.juffalow.com/wp-content/themes/juffalow/css/prettify.css" rel="stylesheet"> 
  <link href="https://en.juffalow.com/wp-content/themes/juffalow/css/blueimp-gallery.css" rel="stylesheet"> 
  <script src="https://en.juffalow.com/wp-content/themes/juffalow/js/webanalytics.js"></script> 
  <script>
          if( typeof ga !== "undefined" ) {
            ga('set', 'contentGroup1', 'english');
            ga('set', 'contentGroup2', 'javascript');            ga('send', 'pageview');
          }
        </script> 
 </head> 
 <body> 
  <nav class="navbar navbar-inverse navbar-static-top" role="navigation"> 
   <div class="container"> 
    <!-- Brand and toggle get grouped for better mobile display --> 
    <div class="navbar-header"> 
     <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1"> <span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span> </button> 
     <a class="navbar-brand" href="https://en.juffalow.com"> <span>www.</span>juffalow<span>.com</span> </a> 
    </div> 
    <div id="bs-example-navbar-collapse-1" class="collapse navbar-collapse"> 
     <ul id="menu-menu-1" class="nav navbar-nav">
      <li id="menu-item-198" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-has-children menu-item-198 dropdown"><a title="Languages" href="#" data-toggle="dropdown" class="dropdown-toggle" aria-haspopup="true">Languages <span class="caret"></span></a> 
       <ul role="menu" class=" dropdown-menu"> 
        <li id="menu-item-192" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-192"><a title="PHP" href="https://en.juffalow.com/./php/">PHP</a></li> 
        <li id="menu-item-193" class="menu-item menu-item-type-taxonomy menu-item-object-category current-post-ancestor current-menu-parent current-post-parent menu-item-193"><a title="JavaScript" href="https://en.juffalow.com/./javascript/">JavaScript</a></li> 
        <li id="menu-item-195" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-195"><a title="Java" href="https://en.juffalow.com/./java/">Java</a></li> 
        <li id="menu-item-197" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-197"><a title="SQL" href="https://en.juffalow.com/./sql/">SQL</a></li> 
       </ul> </li> 
      <li id="menu-item-196" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-196"><a title="Algorithms" href="https://en.juffalow.com/./algorithms/">Algorithms</a></li> 
      <li id="menu-item-194" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-194"><a title="Linux" href="https://en.juffalow.com/./linux/">Linux</a></li> 
      <li id="menu-item-191" class="menu-item menu-item-type-taxonomy menu-item-object-category menu-item-191"><a title="Other" href="https://en.juffalow.com/./other/">Other</a></li> 
      <li id="menu-item-10" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-10"><a title="Contact" href="https://en.juffalow.com/contact/">Contact</a></li> 
     </ul> 
     <ul class="nav navbar-nav navbar-right"> 
      <li><a href="https://www.facebook.com/juffalow.page"><i class="fa fa-facebook"></i></a></li> 
      <li><a href="https://twitter.com/juffalow"><i class="fa fa-twitter"></i></a></li> 
      <li><a href="https://github.com/juffalow"><i class="fa fa-github"></i></a></li> 
     </ul> 
    </div> 
   </div> 
  </nav> 
  <div class="container"> 
   <div class="row"> 
    <div class="col-lg-3 col-lg-push-9 col-md-12"> 
     <nav class="bs-docs-sidebar"> 
      <ul id="sidebar" class="nav nav-stacked fixed"> 
      </ul> 
     </nav> 
    </div> 
    <div class="col-lg-9 col-lg-pull-3 col-md-12"> 
     <h1>Express server with JWT authentication <small>24.02.2017</small></h1>
     <p class="text-left">I needed to create a simple server, that would have one “public” route <code>/login</code> and other routes are available only for users with valid <a href="https://jwt.io/">JWT</a> token.</p> 
     <p class="text-left">That means, the user is allowed to log into the system and then get any data from it. If he is not logged in and he tries to get some data, he only get an error message and 401 ( Unauthorized ) status code will be returned.</p> 
     <h2 class="theme-subheading" id="example-project-step-by-step">Example project step by step</h2> 
     <p class="text-left">I count that you are familiar with Node.js and JavaScript. You also know a bit about Express and JWT and why you may want to use it. This is mainly about how to put these things together.</p> 
     <h4 class="theme-subheading" id="create-new-project">Create new project</h4> 
     <p class="text-left">Let’s create a directory for our project :</p> 
     <pre class="prettyprint">
$ mkdir express-jwt-example
</pre> 
     <p class="text-left">We are going to work with Node, so we have to create <i>package.json</i> file, or better, initialize new project :</p> 
     <pre class="prettyprint">
# jump into project directory
$ cd experss-jwt-example

# initialize project ( you may use npm init )
$ yarn init
</pre> 
     <p class="text-left">This will ask you a bunch of questions and than it creates <i>package.json</i> file.</p> 
     <h4 class="theme-subheading" id="add-dependencies">Add dependencies</h4> 
     <p class="text-left">We are going to work with exress and jwt, so you have to install two packages, <code>exress</code> and <code>jsonwebtoken</code> :</p> 
     <pre class="prettyprint">
yarn add express jsonwebtoken

# or if you use npm
npm install express jsonwebtoken
</pre> 
     <h4 class="theme-subheading" id="directory-structure">Directory structure</h4> 
     <p class="text-left"> </p>
     <pre>
express-jwt-example/
    controllers/
        helloWorld.js
        user.js
    middlewares/
        auth.js
    index.js
    config.js
    package.json
</pre> 
     <h4 class="theme-subheading" id="index-js">Index.js</h4> 
     <p class="text-left">Create a basic index file, which will be listening on port <i>8080</i> and every route will return some JSON. You can run the script with <kbd>node index.js</kbd> command and try to load <code>http://localhost:8080/</code> URL in your browser. It should print the JSON on the screen.</p> 
     <pre class="prettyprint">
// index.js

var express = require('express');
var app = express();
/*
 * Create basic route that handles everything and returns some JSON, so you
 * are able to try if it's working
 */
app.get('/*', function(req, res) {
    res.json({message: 'Hello World!'});
});

app.listen(8080);
</pre> 
     <p class="text-left">Later, we are going to modify this, but now, if it’s working, move on to the next step.</p> 
     <h4 class="theme-subheading" id="config-js">Config.js</h4> 
     <p class="text-left">When you have complex applications where you need to connect to various services and you have development and production environment you are going to need some configuration file. Usually, this file is not committed into repository, because there are sensitive informations like passwords, etc. We need to set two things – port and JWT secret :</p> 
     <pre class="prettyprint">
// config.js

module.exports = {
    PORT: 8080,
    JWT_SECRET: 'secretpassword'
};
</pre> 
     <h4 class="theme-subheading" id="login-route">Login route <small>controllers/user.js</small></h4> 
     <p class="text-left">Now we are going to create a login route, where user can post his username and password and in the response he gets either success message with JWT token, or error message. We are not using any database, so I keep this as simple as possible and the only valid username and password will be <i>admin</i> and <i>admin</i>.</p> 
     <pre class="prettyprint">
// controllers/user.js

var jwt = require('jsonwebtoken');
var config = require('../config.js');

module.exports = function(router) {
    router.post('/login', function(req, res) {
        /*
         * Check if the username and password is correct
         */
        if( req.body.username === 'admin' &amp;&amp; req.body.password === 'admin' ) {
            res.json({
                id: 1,
                username: 'admin',
                jwt: jwt.sign({
                    id: 1,
                }, config.JWT_SECRET, { expiresIn: 60*60 })
            });
        } else {
            /*
             * If the username or password was wrong, return 401 ( Unauthorized )
             * status code and JSON error message
             */
            res.status(401).json({
                error: {
                    message: 'Wrong username or password!'
                }
            });
        }
    });

    return router;
}
</pre> 
     <h4 class="theme-subheading" id="example-route">Example route <small>controllers/helloWorld.js</small></h4> 
     <p class="text-left">This is going to be the protected route – avialable only for logged in users. See, that there is no authentication. It is route as any other. Imagine you have tens or hundreds of routes and you really don’t want to have authentication code in each one. You just create the routes and then you decide which ones will be protected and which won’t.</p> 
     <pre class="prettyprint">
// controllers/helloWorld.js

module.exports = function(router) {
    router.get('/hello-world', function(req, res) {
        res.json({data: 'Hello World!'});
    });

    return router;
}
</pre> 
     <h4 class="theme-subheading" id="middleware">Middleware <small>middlewares/auth.js</small></h4> 
     <p class="text-left">Here is the important part which is protecting the routes. You can define functions which are called before your request handler. This allows us to create a function to check if there is an authorization header with valid JWT token. If this function detects there is no authorization header or the token is invalid or its expiration time passed, it returns 401 status code with an error message.</p> 
     <p class="text-left">Very nice definition of Middleware function :</p> 
     <blockquote class="blockquote"> 
      <p>Middleware is any number of functions that are invoked by the Express.js routing layer before your final request handler is, and thus sits in the middle between a raw request and the final intended route.</p> 
      <footer>
       <a href="https://twitter.com/defunctzombie">Roman Shtylman</a>
      </footer> 
     </blockquote> 
     <pre class="prettyprint">
// middlewares/auth.js

var jwt = require('jsonwebtoken');
var config = require('../config.js');

module.exports = function(req, res, next) {
    /*
     * Check if authorization header is set
     */
    if( req.hasOwnProperty('headers') &amp;&amp; req.headers.hasOwnProperty('authorization') ) {
        try {
            /*
             * Try to decode &amp; verify the JWT token
             * The token contains user's id ( it can contain more informations )
             * and this is saved in req.user object
             */
            req.user = jwt.verify(req.headers['authorization'], config.JWT_SECRET);
        } catch(err) {
            /*
             * If the authorization header is corrupted, it throws exception
             * So return 401 status code with JSON error message
             */
            return res.status(401).json({
                error: {
                    msg: 'Failed to authenticate token!'
                }
            });
        }
    } else {
        /*
         * If there is no autorization header, return 401 status code with JSON
         * error message
         */
        return res.status(401).json({
            error: {
                msg: 'No token!'
            }
        });
    }
    next();
    return;
}
</pre> 
     <h4 class="theme-subheading" id="index-js-completition">Index.js completition</h4> 
     <p class="text-left">We are almost done. Every part of the system is ready and we only have to merge them. Be careful about the middleware! The order metters and if you add the middleware after the routes, it won’t work.</p> 
     <pre class="prettyprint">
// index.js

var express = require('express');
var app = express();
var router = express.Router();
var bodyParser = require('body-parser');
var config = require('./config.js');

app.use(bodyParser.json());
/*
 * Add middleware. Because we defined the first parameter ( '/api' ), it will run
 * only for urls that starts with '/api/*'
 */
app.use('/api', require('./middlewares/auth.js'));
/*
 * Add the protected route '/hello-world' after '/api'
 * So now it is available on /api/hello-world
 */
app.use('/api', require('./controllers/helloWorld.js')(router));
/*
 * Add the '/login' route handler
 */
app.use('/', require('./controllers/user.js')(router));
/*
 * Start server
 */
app.listen(config.PORT);
</pre> 
     <h2 class="theme-subheading" id="how-to-test-it">How to test it?</h2> 
     <p class="text-left">I know that according to <a href="https://en.wikipedia.org/wiki/Test-driven_development">TDD</a> we should write the tests first. But I wanted to show how to create this kind of application.</p> 
     <p class="text-left">We need to test “everything” if it is working correctly. For this, we need to install few other packages :</p> 
     <pre class="prettyprint">
$ yarn add mocha chai sinon supertest
</pre> 
     <p class="text-left">Very shortly to these packages : mocha is test framework – run tests, create reports, etc. Chai is assertion library – checks the type of variable, if an object has some property, etc. Sinon has spies, stubs and mocks and SuperTest is for testing HTTP requests. You can read more about each module on pages mentioned below in <a href="#references">references.</a></p> 
     <h4 class="theme-subheading" id="test-login-route">Test ‘/login’ route</h4> 
     <p class="text-left">There are few things need to be tested : it it takes the right username and password and refuse bad one and if it returns JWT token.</p> 
     <pre class="prettyprint">
// test/controllers/user.js

var chai = require('chai');
var expect = chai.expect;
var request = require('supertest');
var app = require('../../server.js');

describe('POST /login', function(){
    it('it responds with 401 status code if bad username or password', function(done) {
        request(app)
            .post('/login')
            .type('json')
            .send('{"username":"bad","password":"wrong"}')
            .expect(401)
            .end(function(err, res) {
                if (err) return done(err);
                done();
        });
    });

    it('it responds with 200 status code if good username or password', function(done) {
        request(app)
            .post('/login')
            .type('json')
            .send('{"username":"admin","password":"admin"}')
            .expect(200)
            .end(function(err, res) {
                if (err) return done(err);
                done();
        });
    });

    it('it returns JWT token if good username or password', function(done) {
        request(app)
            .post('/login')
            .type('json')
            .send('{"username":"admin","password":"admin"}')
            .end(function(err, res) {
                if (err) return done(err);

                expect(res.body).have.property('jwt');

                done();
        });
    });
});
</pre> 
     <h4 class="theme-subheading" id="test-middleware">Test middleware</h4> 
     <p class="text-left">Test if the middleware is doing its job : when no token or invalid token is provided, it returns 401 status code end stop executing additional middlewares. If there is a good token, it should save its content into <code>request.user</code> object and call next middleware.</p> 
     <pre class="prettyprint">
// test/middleware/auth.js

var chai = require('chai');
var expect = chai.expect;
var sinon = require('sinon');
var auth = require('../../middlewares/auth.js');
var jwt = require('jsonwebtoken');
var config = require('../../config.js');

describe('Test Auth Middleware', function(){
    var request;
    var response;
    var next;

    beforeEach(function() {
        request = {};
        response = {
            status: sinon.stub().returnsThis(),
            json: sinon.spy()
        };
        next = sinon.spy();
    });

    it('next should not be called if no token provided', function() {
        auth(request, response, next);
        expect(next.called).to.equal(false);
    });

    it('should return 401 status code if no token provided', function() {
        auth(request, response, next);
        expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    it('next should not be called if bad token was provided', function() {
        request.headers = {};
        request.headers.authorization = 'some authorization header';
        auth(request, response, next);
        expect(next.called).to.equal(false);
    });

    it('shoudl return 401 status code if bad token was provided', function() {
        request.headers = {};
        request.headers.authorization = 'some authorization header';
        auth(request, response, next);
        expect(response.status.getCall(0).args[0]).to.equal(401);
    });

    it('request should contain user info if good token was provided', function() {
        request.headers = {};
        request.headers.authorization = jwt.sign({ id: 1 }, config.JWT_SECRET);
        auth(request, response, next);
        expect(request).to.have.property('user');
        expect(request.user).to.have.property('id');
        expect(request.user.id).to.be.equal(1);
    });

    it('next should be called once if good token was provided', function() {
        request.headers = {};
        request.headers.authorization = jwt.sign({ id: 1 }, config.JWT_SECRET);
        auth(request, response, next);
        expect(next.calledOnce).to.equal(true);
    });
});
</pre> 
     <h4 class="theme-subheading" id="test-the-protected-route">Test the protected route</h4> 
     <p class="text-left">The protected route has to be avialable only if valid token is provided and it should respond with JSON.</p> 
     <pre class="prettyprint">
var request = require('supertest');
var app = require('../../server.js');
var jwt = require('jsonwebtoken');
var config = require('../../config.js');

describe('GET /hello-world', function(){
    it('it responds with 401 status code if no authorization header', function(done) {
        request(app).get('/api/hello-world').expect(401).end(function(err, res) {
            if (err) return done(err);
            done();
        });
    });

    it('it responds with JSON if no authorization header', function(done) {
        request(app).get('/api/hello-world').expect('Content-Type', /json/).end(function(err, res) {
            if (err) return done(err);
            done();
        });
    });

    it('it responds with 200 status code if good authorization header', function(done) {
        var token = jwt.sign({
            id: 1,
        }, config.JWT_SECRET, { expiresIn: 60*60 });
        request(app)
            .get('/api/hello-world')
            .set('Authorization', token)
            .expect(200)
            .end(function(err, res) {
                if (err) return done(err);
                done();
        });
    });

    it('it responds with JSON if good authorization header', function(done) {
        var token = jwt.sign({
            id: 1,
        }, config.JWT_SECRET, { expiresIn: 60*60 });
        request(app)
            .get('/api/hello-world')
            .set('Authorization', token)
            .expect('Content-Type', /json/)
            .end(function(err, res) {
                if (err) return done(err);
                done();
        });
    });
});
</pre> 
     <h4 class="theme-subheading" id="run-the-tests">Run the tests</h4> 
     <p class="text-left">The last step is to modify <code>package.json</code> file. Add there new key <code>scripts</code> where we define what it can do. The <code>package.json</code> should now look like this :</p> 
     <pre class="prettyprint">
{
    "name": "express-jwt-example",
    "version": "1.0.0",
    "description": "Example project for Express.js with JWT blogpost",
    "main": "index.js",
    "license": "MIT",
    "dependencies": {
        "body-parser": "^1.16.1",
        "chai": "^3.5.0",
        "express": "^4.14.1",
        "jsonwebtoken": "^7.3.0",
        "mocha": "^3.2.0",
        "sinon": "^1.17.7",
        "supertest": "^3.0.0"
    },
    "scripts": {
        "start": "node index.js",
        "test": "mocha --recursive"
    }
}
</pre> 
     <p class="text-left">So to run the tests just type <kbd>npm test</kbd> and if you want to run the app, type <kbd>npm start</kbd>.</p> 
     <h2 class="theme-subheading" id="conclusion">Conclusion</h2> 
     <p class="text-left">You can find the whole project on <a href="https://github.com/juffalow/express-jwt-example">GitHub</a>. I hope I mentioned everything important. If you find anything confusing, leave me a comment or write me an email.</p> 
     <h4 class="theme-subheading" id="references">References</h4> 
     <p><a href="https://www.safaribooksonline.com/blog/2014/03/10/express-js-middleware-demystified/">Express.js Middleware Demystified</a></p> 
     <p><a href="https://mochajs.org">Mocha JavaScript test framework</a></p> 
     <p><a href="http://chaijs.com">Chai Assertion Library</a></p> 
     <p><a href="http://sinonjs.org">Sinon.JS</a></p> 
     <p><a href="https://github.com/visionmedia/supertest">SuperTest</a></p> 
     <h4 class="theme-subheading" id="related-posts">Related posts</h4> 
     <div class="row"> 
      <div class="col-md-6 col-xs-12"> 
       <a href="https://en.juffalow.com/javascript/grunt/" rel="bookmark" title="Grunt"><h5>Grunt</h5></a> 
       <p></p>
       <p>If you work on a larger project, you have surely write a build script, which helps you with repeating tasks. This can be concatenating javascripts, compiling SASS / LESS files, moving or deleting some files, etc. Each task like this can be ( relatively ) easily defined in Grunt and it will take care of everything.</p> 
       <p></p> 
       <p class="text-right"><a href="https://en.juffalow.com/javascript/grunt/" class="btn btn-default" role="button">Read more</a></p> 
      </div> 
      <div class="col-md-6 col-xs-12"> 
       <a href="https://en.juffalow.com/javascript/introduction-to-sequelize-orm/" rel="bookmark" title="Introduction to Sequelize ORM"><h5>Introduction to Sequelize ORM</h5></a> 
       <p></p>
       <p>This is about the basic usage of Sequelize ORM – how to create migrations, models, seeders and how to get the data from the database. Everything is explained on an example project, which you can find on GitHub.</p> 
       <p></p> 
       <p class="text-right"><a href="https://en.juffalow.com/javascript/introduction-to-sequelize-orm/" class="btn btn-default" role="button">Read more</a></p> 
      </div> 
     </div> 
     <hr> 
     <h2 class="theme-subheading" id="comments">Comments</h2> 
     <div class="media comment"> 
      <div class="media-body"> 
       <h4 class="media-heading">Vladimir <small>August 4, 2017 at 10:06 pm</small></h4> 
       <p>Thanx for the tutorial !!! Excellent !</p> 
      </div> 
     </div> 
     <h4 class="theme-subheading" id="add-new-comment">Add new comment</h4> 
     <form action="https://en.juffalow.com/wp-comments-post.php" method="post" id="commentform"> 
      <input type="hidden" name="comment_post_ID" value="200"> 
      <input type="hidden" name="token" value="668c39f7464b738b34f1ae8dc4868c81"> 
      <div class="form-group"> 
       <label for="author">Name</label> 
       <input type="text" name="author" class="form-control" id="author" placeholder="name" value=""> 
      </div> 
      <div class="form-group"> 
       <label for="email">E-mail</label> 
       <input type="text" name="email" class="form-control" id="email" placeholder="e-mail" value=""> 
      </div> 
      <div class="form-group comment-protection"> 
       <label for="email">E-mail</label> 
       <input type="text" name="secondary-email" class="form-control" id="secondary-email" placeholder="e-mail" value=""> 
      </div> 
      <div class="form-group"> 
       <label for="url">Website</label> 
       <input type="text" name="url" class="form-control" id="url" placeholder="url" value=""> 
      </div> 
      <div class="form-group"> 
       <label for="comment">Text</label> 
       <textarea name="comment" id="comment" class="form-control" rows="5"></textarea> 
      </div> 
      <div class="g-recaptcha" data-sitekey="6LcBPi8UAAAAAPMeiaH47znAz09DZlmIbTo0RaHw"></div> 
      <script type="text/javascript" src="https://www.google.com/recaptcha/api.js?hl=en"></script> 
      <button type="submit" class="btn btn-default">Add</button> 
     </form> 
    </div> 
   </div> 
  </div> 
  <footer class="footer"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-sm-6 col-xs-12"> 
      <ul class="footer-info"> 
       <li>Matej <small>'juffalow'</small> Jellus</li> 
       <li><i class="fa fa-wordpress"></i>ordPress</li> 
       <li>2015 - 2017</li> 
      </ul> 
     </div> 
     <div class="col-sm-6 col-xs-12"> 
      <span class="social"> <a href="https://www.facebook.com/juffalow.page"><i class="fa fa-facebook"></i></a> <a href="https://twitter.com/juffalow"><i class="fa fa-twitter"></i></a> <a href="https://github.com/juffalow"><i class="fa fa-github"></i></a> </span> 
     </div> 
    </div> 
   </div> 
  </footer> 
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script> 
  <script src="https://en.juffalow.com/wp-content/themes/juffalow/js/bootstrap.min.js"></script> 
  <script src="https://en.juffalow.com/wp-content/themes/juffalow/js/prettify/prettify.js"></script> 
  <script src="https://en.juffalow.com/wp-content/themes/juffalow/js/jquery.lazyload.js"></script> 
  <script src="https://en.juffalow.com/wp-content/themes/juffalow/js/blueimp-gallery.js"></script> 
  <script src="https://en.juffalow.com/wp-content/themes/juffalow/js/jquery.blueimp-gallery.js"></script> 
  <script type="text/javascript" charset="utf-8">
        function createContentList() {
            var twig = [];
            var i = 0;
            var isFirst = true;
            var isFirstSubTheme = true;
            $(".theme-subheading").each(function() {
                if( $(this).prop("tagName") === "H2" ) {
                    if( !isFirstSubTheme ) { twig[i++] = "</ul>"; isFirstSubTheme = true; }
                    if( !isFirst ) { twig[i++] = "</li>"; }
                    twig[i++] = "<li><a href=\"#";
                    twig[i++] = $(this).prop("id");
                    twig[i++] = "\">";
                    twig[i++] = $(this).text();
                    twig[i++] = "</a>";
                    isFirst = false;
                }

                if( $(this).prop("tagName") === "H4" ) {
                    if( isFirstSubTheme ) {
                        twig[i++] = "<ul class=\"nav nav-stacked\">";
                        isFirstSubTheme = false;
                    }
                    twig[i++] = "<li><a href=\"#";
                    twig[i++] = $(this).prop("id");
                    twig[i++] = "\">";
                    twig[i++] = $(this).text();
                    twig[i++] = "</a></li>";
                }
            });
            $("#sidebar").append(twig.join(''));
        }
        createContentList();
        $('body').scrollspy({
            target: '.bs-docs-sidebar',
            offset: 40
        });
        !function ($) {
          $(function(){
            window.prettyPrint && prettyPrint();
          });
        }(window.jQuery);

        $(function() {
            $("img.lazy").lazyload({placeholder: "https://en.juffalow.com/wp-content/themes/juffalow/images/loader.gif"});
        });
    </script> 
  <div id="blueimp-gallery" class="blueimp-gallery"> 
   <div class="slides"></div> 
   <h3 class="title"></h3> 
   <a class="prev">‹</a> 
   <a class="next">›</a> 
   <a class="close">×</a> 
   <a class="play-pause"></a> 
   <ol class="indicator"></ol> 
  </div>   
 </body>
</html>