<!doctype html>
<html xmlns:cc="http://creativecommons.org/ns#">
 <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# medium-com: http://ogp.me/ns/fb/medium-com#">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Securing Node.js RESTful APIs with JSON Web Tokens – freeCodeCamp</title>
  <link rel="canonical" href="https://medium.freecodecamp.org/securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52">
  <meta name="title" content="Securing Node.js RESTful APIs with JSON Web Tokens – freeCodeCamp">
  <meta name="referrer" content="unsafe-url">
  <meta name="description" content="Have you ever wondered how authentication works? What’s behind all the complexity and abstractions. Actually, nothing special. It’s a way of encrypting a value, in turn creating a unique token that…">
  <meta name="theme-color" content="#000000">
  <meta property="og:title" content="Securing Node.js RESTful APIs with JSON Web Tokens – freeCodeCamp">
  <meta property="og:url" content="https://medium.freecodecamp.org/securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52">
  <meta property="og:image" content="https://cdn-images-1.medium.com/max/1200/1*0ABaK4SrXGUnXgmXqMkZtA.png">
  <meta property="fb:app_id" content="542599432471018">
  <meta property="og:description" content="Have you ever wondered how authentication works? What’s behind all the complexity and abstractions. Actually, nothing special. It’s a way…">
  <meta name="twitter:description" content="Have you ever wondered how authentication works? What’s behind all the complexity and abstractions. Actually, nothing special. It’s a way…">
  <meta name="twitter:image:src" content="https://cdn-images-1.medium.com/max/1200/1*0ABaK4SrXGUnXgmXqMkZtA.png">
  <link rel="publisher" href="https://plus.google.com/103654360130207659246">
  <link rel="author" href="https://medium.freecodecamp.org/@adnanrahic">
  <meta property="author" content="Adnan Rahi?">
  <meta property="og:type" content="article">
  <meta name="twitter:card" content="summary_large_image">
  <meta property="article:publisher" content="https://www.facebook.com/freecodecamp">
  <meta property="article:author" content="625773520934076">
  <meta name="robots" content="index, follow">
  <meta property="article:published_time" content="2017-09-04T19:52:59.300Z">
  <meta name="twitter:creator" content="@adnanrahic">
  <meta name="twitter:site" content="@freecodecamp">
  <meta property="og:site_name" content="freeCodeCamp">
  <meta name="twitter:label1" value="Reading time">
  <meta name="twitter:data1" value="14 min read">
  <meta name="twitter:app:name:iphone" content="Medium">
  <meta name="twitter:app:id:iphone" content="828256236">
  <meta name="twitter:app:url:iphone" content="medium://p/9f811a92bb52">
  <meta property="al:ios:app_name" content="Medium">
  <meta property="al:ios:app_store_id" content="828256236">
  <meta property="al:android:package" content="com.medium.reader">
  <meta property="al:android:app_name" content="Medium">
  <meta property="al:ios:url" content="medium://p/9f811a92bb52">
  <meta property="al:android:url" content="medium://p/9f811a92bb52">
  <meta property="al:web:url" content="https://medium.freecodecamp.org/securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52">
  <link rel="search" type="application/opensearchdescription+xml" title="Medium" href="/osd.xml">
  <link rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/9f811a92bb52">
  <script type="application/ld+json">{"@context":"http://schema.org","@type":"NewsArticle","image":{"@type":"ImageObject","width":1920,"height":826,"url":"https://cdn-images-1.medium.com/max/2000/1*0ABaK4SrXGUnXgmXqMkZtA.png"},"datePublished":"2017-09-04T19:52:59.300Z","dateModified":"2017-09-17T09:40:07.235Z","headline":"Securing Node.js RESTful APIs with JSON Web Tokens","name":"Securing Node.js RESTful APIs with JSON Web Tokens","keywords":["Nodejs","Web Development","JavaScript","Startup","Programming"],"author":{"@type":"Person","name":"Adnan Rahi?","url":"https://medium.freecodecamp.org/@adnanrahic"},"creator":["Adnan Rahi?"],"publisher":{"@type":"Organization","name":"freeCodeCamp","url":"https://medium.freecodecamp.org","logo":{"@type":"ImageObject","width":500,"height":60,"url":"https://cdn-images-1.medium.com/max/1000/1*wViBNJ1o9rM5p6b-gf3vxg.png"}},"mainEntityOfPage":"https://medium.freecodecamp.org/securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52"}</script>
  <link rel="stylesheet" type="text/css" href="https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m.css">
  <link rel="stylesheet" href="https://cdn-static-1.medium.com/_/fp/css/main-branding-base.8XxDoQc2XpRsDGst14SGyQ.css">
  <script>if (window.top !== window.self) window.top.location = window.self.location.href;var OB_startTime = new Date().getTime(); var OB_loadErrors = []; function _onerror(e) { OB_loadErrors.push(e) }; if (document.addEventListener) document.addEventListener("error", _onerror, true); else if (document.attachEvent) document.attachEvent("onerror", _onerror); function _asyncScript(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("script"); s.type = "text/javascript"; s.async = true; s.src = u; f.parentNode.insertBefore(s, f);}function _asyncStyles(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("link"); s.rel = "stylesheet"; s.href = u; f.parentNode.insertBefore(s, f); return s}(new Image()).src = "/_/stat?event=pixel.load&origin=" + encodeURIComponent(location.origin);</script>
  <script>window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date; ga("create", "UA-24232453-2", "auto", {"allowLinker": true, "legacyCookieDomain": window.location.hostname}); ga("send", "pageview");ga("create", "UA-55446531-3", "auto", 'tracker0'); ga("tracker0.send", "pageview");</script>
  <script async src="https://www.google-analytics.com/analytics.js"></script>
  <!--[if lt IE 9]><script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js"></script><![endif]-->
  <link rel="icon" href="https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico" class="js-favicon">
  <link rel="apple-touch-icon" sizes="152x152" href="https://cdn-images-1.medium.com/fit/c/304/304/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="apple-touch-icon" sizes="120x120" href="https://cdn-images-1.medium.com/fit/c/240/240/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="apple-touch-icon" sizes="76x76" href="https://cdn-images-1.medium.com/fit/c/152/152/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="apple-touch-icon" sizes="60x60" href="https://cdn-images-1.medium.com/fit/c/120/120/1*MotlWcSa2n6FrOx3ul89kw.png">
  <link rel="mask-icon" href="https://cdn-static-1.medium.com/_/fp/icons/favicon.KjTfUJo7yJH_fCoUzzH3cg.svg" color="#171717">
 </head>
 <body itemscope class=" postShowScreen browser-chrome os-windows is-withMagicUnderlines v-glyph v-glyph--m is-noJs">
  <script>document.body.className = document.body.className.replace(/(^|\s)is-noJs(\s|$)/, "$1is-js$2")</script>
  <div class="site-main" id="container">
   <div class="butterBar butterBar--error"></div>
   <div class="surface">
    <div id="prerendered" class="screenContent">
     <canvas class="canvas-renderer"></canvas>
     <div class="container u-maxWidth740 u-xs-margin0 notesPositionContainer js-notesPositionContainer"></div>
     <div class="metabar u-clearfix js-metabar u-boxShadowBottomThinLighter u-textColorTransparentWhiteDarker u-fixed u-backgroundTransparentWhiteDarkest u-xs-sizeFullViewportWidth u-tintBgColor u-tintSpectrum">
      <div class="metabar-inner u-marginAuto u-maxWidth1000 u-flexCenter u-justifyContentSpaceBetween u-paddingLeft20 u-paddingRight20 u-height65 js-metabarMiddle">
       <div class="metabar-block u-flex1 u-flexCenter">
        <div class="js-metabarLogoLeft">
         <a href="https://medium.com/" data-log-event="home" class="siteNav-logo u-flexCenter u-paddingTop0"><span class="svgIcon svgIcon--logoMonogram svgIcon--45px is-flushLeft u-textColorDarker">
           <svg class="svgIcon-use" width="45" height="45" viewbox="0 0 45 45">
            <path d="M5 40V5h35v35H5zm8.56-12.627c0 .555-.027.687-.318 1.03l-2.457 2.985v.396h6.974v-.396l-2.456-2.985c-.291-.343-.344-.502-.344-1.03V18.42l6.127 13.364h.714l5.256-13.364v10.644c0 .29 0 .342-.185.528l-1.848 1.796v.396h9.19v-.396l-1.822-1.796c-.184-.186-.21-.238-.21-.528V15.937c0-.291.026-.344.21-.528l1.823-1.797v-.396h-6.471l-4.622 11.542-5.203-11.542h-6.79v.396l2.14 2.64c.239.292.291.37.291.768v10.353z" />
           </svg></span><span class="u-textScreenReader">Homepage</span></a>
        </div>
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56 u-marginRight18">
         <div class="u-alignBlock">
          <a class="js-collectionLogoOrName" href="https://medium.freecodecamp.org?source=logo-lo_9ce0c0f734f---336d898217ee"><img height="36" width="300" class="u-paddingTop5" src="https://cdn-images-1.medium.com/letterbox/600/72/50/50/1*wViBNJ1o9rM5p6b-gf3vxg.png?source=logoAvatar-lo_9ce0c0f734f---336d898217ee" alt="freeCodeCamp"></a>
         </div>
        </div>
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56 u-xs-hide">
         <div class="u-alignBlock">
          <div class="buttonSet u-lineHeightInherit u-marginLeft0">
           <div class="buttonSet-inner">
            <button class="button button--primary u-paddingLeft10 u-paddingRight10 u-height19 u-lineHeight13 u-verticalAlignMiddle u-fontSize12 u-uiTextMedium button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal js-relationshipButton is-smallPill" data-action="sign-in-prompt" data-sign-in-action="toggle-follow-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/free-code-camp" data-action-source="----336d898217ee----------------------follow_header" data-collection-id="336d898217ee"><span class="button-label  js-buttonLabel">Follow</span></button>
           </div>
           <a class="button button--light button--chromeless is-touchIconBlackPulse u-baseColor--buttonLight button--withIcon button--withSvgIcon" href="https://twitter.com/freecodecamp" title="Visit “freeCodeCamp” on Twitter" aria-label="Visit “freeCodeCamp” on Twitter" rel="me" target="_blank"><span class="button-defaultState"><span class="svgIcon svgIcon--twitterFilled svgIcon--25px">
              <svg class="svgIcon-use" width="25" height="25" viewbox="0 0 25 25">
               <path d="M21.725 5.338c-.744.47-1.605.804-2.513 1.006a3.978 3.978 0 0 0-2.942-1.293c-2.22 0-4.02 1.81-4.02 4.02 0 .32.034.63.07.94-3.31-.18-6.27-1.78-8.255-4.23a4.544 4.544 0 0 0-.574 2.01c.04 1.43.74 2.66 1.8 3.38-.63-.01-1.25-.19-1.79-.5v.08c0 1.93 1.38 3.56 3.23 3.95-.34.07-.7.12-1.07.14-.25-.02-.5-.04-.72-.07.49 1.58 1.97 2.74 3.74 2.8a8.49 8.49 0 0 1-5.02 1.72c-.3-.03-.62-.04-.93-.07A11.447 11.447 0 0 0 8.88 21c7.386 0 11.43-6.13 11.414-11.414.015-.21.01-.38 0-.578a7.604 7.604 0 0 0 2.01-2.08 7.27 7.27 0 0 1-2.297.645 3.856 3.856 0 0 0 1.72-2.23" />
              </svg></span></span></a>
           <a class="button button--light button--chromeless is-touchIconBlackPulse u-baseColor--buttonLight button--withIcon button--withSvgIcon u-paddingLeft0" href="//facebook.com/freecodecamp" title="Visit “freeCodeCamp” on Facebook" aria-label="Visit “freeCodeCamp” on Facebook" rel="me" target="_blank"><span class="button-defaultState"><span class="svgIcon svgIcon--facebookFilled svgIcon--25px">
              <svg class="svgIcon-use" width="25" height="25" viewbox="0 0 25 25">
               <path d="M21 12.646C21 7.65 16.97 3.6 12 3.6s-9 4.05-9 9.046a9.026 9.026 0 0 0 7.59 8.924v-6.376H8.395V12.64h2.193v-1.88c0-2.186 1.328-3.375 3.267-3.375.93 0 1.728.07 1.96.1V9.77H14.47c-1.055 0-1.26.503-1.26 1.242v1.63h2.517l-.33 2.554H13.21V21.6c4.398-.597 7.79-4.373 7.79-8.954" />
              </svg></span></span></a>
          </div>
         </div>
        </div>
       </div>
       <div class="metabar-block u-flex0 u-flexCenter">
        <div class="u-alignMiddle u-inlineBlock u-verticalAlignTop u-height65 u-xs-height56">
         <div class="u-alignBlock">
          <div class="buttonSet u-lineHeightInherit u-block u-margin0">
           <a class="button button--primary button--light button--chromeless u-accentColor--buttonNormal is-inSiteNavBar u-lineHeight30 u-height32" href="https://medium.com/m/signin?redirect=https%3A%2F%2Fmedium.freecodecamp.org%2Fsecuring-node-js-restful-apis-with-json-web-tokens-9f811a92bb52&amp;source=--------------------------nav_reg">Sign in / Sign up</a>
          </div>
         </div>
        </div>
       </div>
       <div class="u-absolute u-sizeFullWidth u-top0 u-right0 u-textAlignCenter js-metabarLogoCentered u-hide">
        <a href="https://medium.com/" data-log-event="home" class="siteNav-logo u-flexCenter u-paddingTop0"><span class="svgIcon svgIcon--logoMonogram svgIcon--45px is-flushLeft u-textColorDarker">
          <svg class="svgIcon-use" width="45" height="45" viewbox="0 0 45 45">
           <path d="M5 40V5h35v35H5zm8.56-12.627c0 .555-.027.687-.318 1.03l-2.457 2.985v.396h6.974v-.396l-2.456-2.985c-.291-.343-.344-.502-.344-1.03V18.42l6.127 13.364h.714l5.256-13.364v10.644c0 .29 0 .342-.185.528l-1.848 1.796v.396h9.19v-.396l-1.822-1.796c-.184-.186-.21-.238-.21-.528V15.937c0-.291.026-.344.21-.528l1.823-1.797v-.396h-6.471l-4.622 11.542-5.203-11.542h-6.79v.396l2.14 2.64c.239.292.291.37.291.768v10.353z" />
          </svg></span><span class="u-textScreenReader">Homepage</span></a>
       </div>
      </div>
      <div class="metabar-inner u-marginAuto u-maxWidth1000 js-metabarBottom">
       <nav role="navigation" class="metabar-block metabar-block--below u-overflowHiddenY u-height40">
        <ul class="u-textAlignLeft u-noWrap u-overflowX js-collectionNavItems u-sm-paddingLeft20 u-sm-paddingRight20 u-paddingBottom100">
         <li class="metabar-navItem js-collectionNavItem u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken js-homeNav u-baseColor--link" href="https://medium.freecodecamp.org">Home</a></li>
         <li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://medium.freecodecamp.org/tagged/web-development">Dev</a></li>
         <li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://medium.freecodecamp.org/tagged/design">Design</a></li>
         <li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://medium.freecodecamp.org/tagged/data-science">Data</a></li>
         <span class="u-borderLeft1 u-paddingLeft22 u-xs-paddingLeft12 u-baseColor--borderLight"></span>
         <li class="metabar-navItem js-collectionNavItem  is-external u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darkenOnHover u-accentColor--textDarken link--noUnderline js-navItemLink u-baseColor--link" href="https://freecodecamp.com?ref=mn" rel="nofollow noopener" target="_blank">Learn to code for free</a></li>
         <li class="metabar-navItem js-collectionNavItem u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-top1" href="https://medium.freecodecamp.org/search" title="Search" aria-label="Search"><span class="button-defaultState"><span class="svgIcon svgIcon--search svgIcon--25px">
             <svg class="svgIcon-use" width="25" height="25" viewbox="0 0 25 25">
              <path d="M20.067 18.933l-4.157-4.157a6 6 0 1 0-.884.884l4.157 4.157a.624.624 0 1 0 .884-.884zM6.5 11c0-2.62 2.13-4.75 4.75-4.75S16 8.38 16 11s-2.13 4.75-4.75 4.75S6.5 13.62 6.5 11z" />
             </svg></span></span></a></li>
        </ul>
       </nav>
      </div>
     </div>
     <div class="metabar metabar--spacer js-metabarSpacer u-tintBgColor  u-height105 u-xs-height95"></div>
     <main role="main">
      <article class=" u-sizeViewHeightMin100 u-overflowHidden postArticle postArticle--full is-withAccentColors u-marginBottom40" lang="en">
       <header class="container u-maxWidth740">
        <div class="postMetaHeader u-paddingBottom10 row">
         <div class="col u-size12of12 js-postMetaLockup">
          <div class="postMetaLockup postMetaLockup--authorWithBio u-flex js-postMetaLockup">
           <div class="u-flex0">
            <a class="link avatar u-baseColor--link" href="https://medium.freecodecamp.org/@adnanrahic?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="d1aeac7eadae" data-action-type="hover" data-user-id="d1aeac7eadae" data-collection-slug="free-code-camp" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*_zEH2290dCCejDlyJghqqw.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Adnan Rahi?"></a>
           </div>
           <div class="u-flex1 u-paddingLeft15 u-overflowHidden">
            <a class="link link link--darken link--darker u-baseColor--link" href="https://medium.freecodecamp.org/@adnanrahic?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="d1aeac7eadae" data-action-type="hover" data-user-id="d1aeac7eadae" data-collection-slug="free-code-camp" dir="auto">Adnan Rahi?</a>
            <span class="followState js-followState" data-user-id="d1aeac7eadae"><button class="button u-paddingLeft10 u-paddingRight10 u-height19 u-lineHeight13 u-verticalAlignMiddle u-fontSize12 u-uiTextMedium u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton u-marginLeft10 u-marginTopNegative2 u-xs-hide" data-action="sign-in-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-action-source="post_header_lockup"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary u-paddingLeft10 u-paddingRight10 u-height19 u-lineHeight13 u-verticalAlignMiddle u-fontSize12 u-uiTextMedium u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton u-marginLeft10 u-marginTopNegative2 u-xs-hide" data-action="sign-in-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/d1aeac7eadae" data-action-source="post_header_lockup--------------------------follow_byline"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span>
            <div class="postMetaInline u-noWrapWithEllipsis u-xs-normalWrap u-xs-lineClamp2 u-xs-maxHeight2LineHeightBase">
             Software engineer @bookvar_co. Coding educator @ACADEMY387. Campsite leader @freeCodeCamp Sarajevo.
            </div>
            <div class="postMetaInline js-testPostMetaInlineSupplemental">
             <time datetime="2017-09-04T19:52:59.300Z">Sep 4</time>
             <span class="middotDivider u-fontSize12"></span>
             <span class="readingTime" title="14 min read"></span>
            </div>
           </div>
          </div>
         </div>
        </div>
       </header>
       <div class="postArticle-content js-postField js-notesSource js-trackedPost" data-post-id="9f811a92bb52" data-source="post_page" data-collection-id="336d898217ee" data-tracking-context="postPage">
        <section name="ca28" class="section section--body section--first section--last">
         <div class="section-divider">
          <hr class="section-divider">
         </div>
         <div class="section-content">
          <div class="section-inner sectionLayout--fullWidth">
           <figure name="7b8b" id="7b8b" class="graf graf--figure graf--layoutFillWidth graf--leading">
            <div class="aspectRatioPlaceholder is-locked">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 43%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*0ABaK4SrXGUnXgmXqMkZtA.png" data-width="1920" data-height="826">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*0ABaK4SrXGUnXgmXqMkZtA.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/2000/1*0ABaK4SrXGUnXgmXqMkZtA.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/2000/1*0ABaK4SrXGUnXgmXqMkZtA.png">
              </noscript>
             </div>
            </div>
           </figure>
          </div>
          <div class="section-inner sectionLayout--insetColumn">
           <h1 name="eb03" id="eb03" class="graf graf--h3 graf-after--figure graf--title">Securing Node.js RESTful APIs with JSON Web&nbsp;Tokens</h1>
           <p name="2eea" id="2eea" class="graf graf--p graf-after--h3">Have you ever wondered how authentication works? What’s behind all the complexity and abstractions. Actually, nothing special. It’s a way of encrypting a value, in turn creating a unique token that users use as an identifier. This token verifies your identity. It can authenticate who you are, and authorize various resources you have access to. If you by any chance don’t know any of these keywords, be patient, I’ll explain everything below.</p>
           <p name="9494" id="9494" class="graf graf--p graf-after--p">This will be a step by step tutorial of how to add token based authentication to an existing REST API. The authentication strategy in question is JWT (JSON Web Token). If that doesn’t tell you much, it’s fine. It was just as strange for me when I first heard the term.</p>
           <p name="8bbd" id="8bbd" class="graf graf--p graf-after--p">What does JWT actually mean in a down to earth point of view? Let’s break down what the official definition states:</p>
           <blockquote name="9037" id="9037" class="graf graf--pullquote graf-after--p">
            JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.
            <br>- 
            <a href="https://tools.ietf.org/html/rfc7519" data-href="https://tools.ietf.org/html/rfc7519" class="markup--anchor markup--pullquote-anchor" rel="noopener" target="_blank"><strong class="markup--strong markup--pullquote-strong">Internet Engineering Task Force&nbsp;(IETF)</strong></a>
           </blockquote>
           <p name="83b8" id="83b8" class="graf graf--p graf-after--pullquote">That was a mouthful. Let’s translate that to English. A JWT is an encrypted string of characters which is safe to send between two computers. The token represents a value that is accessible only by the computer that has access to the secret key with which it was encrypted. Simple enough, right?</p>
           <p name="aaa6" id="aaa6" class="graf graf--p graf-after--p">What does this look like like in real life? Let’s say a user wants to sign in to their account. They send a request with the required credentials such as email and password to the server. The server checks to see if the credentials are valid. If they are, the server creates a token using the desired payload and a secret key. This string of characters that results from the encryption is called a token. Then the server sends it back to the client. The client, in turn, saves the token to use it in every other request the user will send. The practice of adding a token to the request headers is as way of authorizing the user to access resources. This is a practical example of how JWT works.</p>
           <p name="8224" id="8224" class="graf graf--p graf-after--p">Okay, that’s enough talk! The rest of this tutorial will be coding, and I’d love if you would follow along and code alongside me, as we progress. Every snippet of code will be followed by an explanation. I believe the best way of understanding it correctly will be to code it yourself along the way.</p>
           <p name="3408" id="3408" class="graf graf--p graf-after--p">Before I begin, there are some things you need to know about Node.js and some EcmaScript standards I’ll be using. I will not be using ES6, as it is not as beginner friendly as traditional JavaScript. But, I will expect you already know how to build a RESTful API with Node.js. If not, you can take a detour and <a href="https://hackernoon.com/restful-api-design-with-node-js-26ccf66eab09" data-href="https://hackernoon.com/restful-api-design-with-node-js-26ccf66eab09" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">check this out</a> before proceeding.</p>
           <p name="d005" id="d005" class="graf graf--p graf-after--p">Also, the <a href="https://github.com/adnanrahic/securing-restful-apis-with-jwt" data-href="https://github.com/adnanrahic/securing-restful-apis-with-jwt" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">whole demo is on GitHub</a> if you wish to see it in its entirety.</p>
           <h3 name="12fc" id="12fc" class="graf graf--h3 graf-after--p">Let’s start writing some code, shall&nbsp;we?</h3>
           <p name="c440" id="c440" class="graf graf--p graf-after--h3">Well, not yet actually. We need to set up the environment first. The code will have to wait at least a couple more minutes. This part is boring so to get up and running quick we’ll clone the repository from the tutorial above. Open up a terminal window or command line prompt and run this command:</p>
           <pre name="080c" id="080c" class="graf graf--pre graf-after--p">git clone <a href="https://github.com/adnanrahic/nodejs-restful-api.git" data-href="https://github.com/adnanrahic/nodejs-restful-api.git" class="markup--anchor markup--pre-anchor" rel="nofollow noopener" target="_blank">https://github.com/adnanrahic/nodejs-restful-api.git</a></pre>
           <p name="21a0" id="21a0" class="graf graf--p graf-after--pre">You’ll see a folder appear, open it up. Let’s take a look at the folder structure.</p>
           <pre name="c7b5" id="c7b5" class="graf graf--pre graf-after--p">&gt; user<br>  - User.js<br>  - UserController.js<br>- db.js<br>- server.js<br>- app.js<br>- package.json</pre>
           <p name="0cfc" id="0cfc" class="graf graf--p graf-after--pre">We have a user folder with a model and a controller, and basic CRUD already implemented. Our <strong class="markup--strong markup--p-strong">app.js </strong>contains the basic configuration. The <strong class="markup--strong markup--p-strong">db.js</strong> makes sure the application connects to the database. The<strong class="markup--strong markup--p-strong"> server.js</strong> makes sure our server spins up.</p>
           <p name="31fe" id="31fe" class="graf graf--p graf-after--p">Go ahead and install all required Node modules. Switch back to your terminal window. Make sure you’re in the folder named <em class="markup--em markup--p-em">‘</em><strong class="markup--strong markup--p-strong">nodejs-restful-api</strong><em class="markup--em markup--p-em">’</em> and run <code class="markup--code markup--p-code">npm install</code>. Wait a second or two for the modules to install. Now you need to add a database connection string in <strong class="markup--strong markup--p-strong">db.js</strong>.</p>
           <p name="3113" id="3113" class="graf graf--p graf-after--p">Jump over to <a href="https://mlab.com/" data-href="https://mlab.com/" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">mLab</a>, create an account if you do not already have one, and open up your database dashboard. Create a new database, name it as you wish and proceed to its configuration page. Add a database user to your database and copy the connection string from the dashboard to your code.</p>
           <figure name="e798" id="e798" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 303px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 43.3%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*a66N4FzWCg7FOmFL4USIeQ.png" data-width="1445" data-height="625" data-action="zoom" data-action-value="1*a66N4FzWCg7FOmFL4USIeQ.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*a66N4FzWCg7FOmFL4USIeQ.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*a66N4FzWCg7FOmFL4USIeQ.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*a66N4FzWCg7FOmFL4USIeQ.png">
              </noscript>
             </div>
            </div>
           </figure>
           <p name="8df3" id="8df3" class="graf graf--p graf-after--figure">All you need to do now is to change the placeholder values for <code class="markup--code markup--p-code">&lt;dbuser&gt;</code> and <code class="markup--code markup--p-code">&lt;dbpassword&gt;</code>. Replace them with the username and password of the user you created for the database. A detailed step by step explanation of this process can be found in <a href="https://hackernoon.com/restful-api-design-with-node-js-26ccf66eab09" data-href="https://hackernoon.com/restful-api-design-with-node-js-26ccf66eab09" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">the tutorial linked above</a>.</p>
           <p name="2ca3" id="2ca3" class="graf graf--p graf-after--p">Let’s say the user I created for the database is named <code class="markup--code markup--p-code">wally</code> with a password of <code class="markup--code markup--p-code">theflashisawesome</code>. Having that in mind, the <strong class="markup--strong markup--p-strong">db.js</strong> file should now look something like this:</p>
           <pre name="85a4" id="85a4" class="graf graf--pre graf-after--p">var mongoose = require('mongoose');<br>mongoose.connect('mongodb://wally:theflashisawesome@ds147072.mlab.com:47072/securing-rest-apis-with-jwt', { useMongoClient: true });</pre>
           <p name="e1ae" id="e1ae" class="graf graf--p graf-after--pre">Go ahead and spin up the server, back in your terminal window type <code class="markup--code markup--p-code">node server.js</code>. You should see <code class="markup--code markup--p-code">Express server listening on port 3000</code> get logged to the terminal.</p>
           <h3 name="a155" id="a155" class="graf graf--h3 graf-after--p">Finally, some&nbsp;code.</h3>
           <p name="784c" id="784c" class="graf graf--p graf-after--h3">Let’s start out by brainstorming about what we want to build. First of all we want to add user authentication. Meaning, implementing a system for registering and logging users in.</p>
           <p name="0d9e" id="0d9e" class="graf graf--p graf-after--p">Secondly, we want to add authorization. The act of granting users the permission to access certain resources on our REST API.</p>
           <p name="6d55" id="6d55" class="graf graf--p graf-after--p">Start out by adding a new file in the root directory of the project. Give it a name of <strong class="markup--strong markup--p-strong">config.js</strong><em class="markup--em markup--p-em">. </em>Here you’ll put configuration settings for the application. Everything we need at the moment is just to define a secret key for our JSON Web Token.</p>
           <p name="3a56" id="3a56" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Disclaimer</strong>: Have in mind, under no circumstances should you ever, (EVER!) have your secret key publicly visible like this. Always put all of your keys in environment variables! I’m only writing it like this for demo purposes.</p>
           <pre name="7aaf" id="7aaf" class="graf graf--pre graf-after--p">// config.js<br>module.exports = {<br>  'secret': 'supersecret'<br>};</pre>
           <p name="aee5" id="aee5" class="graf graf--p graf-after--pre">With this added you’re ready to start adding the authentication logic. Create a folder named <strong class="markup--strong markup--p-strong">auth</strong> and start out by adding a file named <strong class="markup--strong markup--p-strong">AuthController.js</strong>. This controller will be home for our authentication logic.</p>
           <p name="8746" id="8746" class="graf graf--p graf-after--p">Add this piece of code to the top of the <strong class="markup--strong markup--p-strong">AuthController.js</strong><em class="markup--em markup--p-em">.</em></p>
           <pre name="6cd7" id="6cd7" class="graf graf--pre graf-after--p">// AuthController.js</pre>
           <pre name="d807" id="d807" class="graf graf--pre graf-after--pre">var express = require('express');<br>var router = express.Router();<br>var bodyParser = require('body-parser');<br>router.use(bodyParser.urlencoded({ extended: false }));<br>router.use(bodyParser.json());<br>var User = require('../user/User');</pre>
           <p name="552b" id="552b" class="graf graf--p graf-after--pre">Now you’re ready to add the modules for using <a href="https://github.com/auth0/node-jsonwebtoken" data-href="https://github.com/auth0/node-jsonwebtoken" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">JSON Web Tokens</a> and <a href="https://github.com/dcodeIO/bcrypt.js" data-href="https://github.com/dcodeIO/bcrypt.js" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">encrypting passwords</a>. Paste this code into the <strong class="markup--strong markup--p-strong">AuthController.js</strong>:</p>
           <pre name="1fdd" id="1fdd" class="graf graf--pre graf-after--p">var jwt = require('jsonwebtoken');<br>var bcrypt = require('bcryptjs');<br>var config = require('../config');</pre>
           <p name="5657" id="5657" class="graf graf--p graf-after--pre">Open up a terminal window in your project folder and install the following modules:</p>
           <pre name="7d7c" id="7d7c" class="graf graf--pre graf-after--p">npm install jsonwebtoken --save<br>npm install bcryptjs --save</pre>
           <p name="34d8" id="34d8" class="graf graf--p graf-after--pre">That’s all the modules we need to implement our desired authentication. Now you’re ready to create a <code class="markup--code markup--p-code">/register</code> endpoint. Add this piece of code to your <strong class="markup--strong markup--p-strong">AuthController.js</strong>:</p>
           <pre name="cba0" id="cba0" class="graf graf--pre graf-after--p">router.post('/register', function(req, res) {<br>  <br>  var hashedPassword = bcrypt.hashSync(req.body.password, 8);<br>  <br>  User.create({<br>    name : req.body.name,<br>    email : req.body.email,<br>    password : hashedPassword<br>  },<br>  function (err, user) {<br>    if (err) return res.status(500).send("There was a problem registering the user.")</pre>
           <pre name="932f" id="932f" class="graf graf--pre graf-after--pre">    // create a token<br>    var token = jwt.sign({ id: user._id }, config.secret, {<br>      expiresIn: 86400 // expires in 24 hours<br>    });</pre>
           <pre name="2831" id="2831" class="graf graf--pre graf-after--pre">    res.status(200).send({ auth: true, token: token });<br>  }); <br>});</pre>
           <p name="aed6" id="aed6" class="graf graf--p graf-after--pre">Here we’re expecting the user to send us three values, a name, an email and a password. We’re immediately going to take the password and encrypt it with Bcrypt’s hashing method. Then take the hashed password, include name and email and create a new user. After the user has been successfully created, we’re at ease to create a token for that user.</p>
           <p name="d191" id="d191" class="graf graf--p graf-after--p">The <code class="markup--code markup--p-code">jwt.sign()</code> method takes a payload and the secret key defined in <strong class="markup--strong markup--p-strong">config.js </strong>as parameters. It creates a unique string of characters representing the payload. In our case, the payload is an object containing only the id of the user. Let’s write a piece of code to get the user id based on the token we got back from the register endpoint.</p>
           <pre name="b494" id="b494" class="graf graf--pre graf-after--p">router.get('/me', function(req, res) {</pre>
           <pre name="3257" id="3257" class="graf graf--pre graf-after--pre">  var token = req.headers['x-access-token'];<br>  if (!token) return res.status(401).send({ auth: false, message: 'No token provided.' });<br>  <br>  jwt.verify(token, config.secret, function(err, decoded) {<br>    if (err) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });<br>    <br>    res.status(200).send(decoded);<br>  });<br>});</pre>
           <p name="1bb2" id="1bb2" class="graf graf--p graf-after--pre">Here we’re expecting the token be sent along with the request in the headers. The default name for a token in the headers of an HTTP request is <code class="markup--code markup--p-code">x-access-token</code>. If there is no token provided with the request the server sends back an error. To be more precise, an <code class="markup--code markup--p-code">401 unauthorized</code> status with a response message of <em class="markup--em markup--p-em">‘</em><strong class="markup--strong markup--p-strong">No token provided</strong><em class="markup--em markup--p-em">’</em>. If the token exists, the <code class="markup--code markup--p-code">jwt.verify()</code> method will be called. This method decodes the token making it possible to view the original payload. We’ll handle errors if there are any and if there are not, send back the decoded value as the response.</p>
           <p name="0f6c" id="0f6c" class="graf graf--p graf-after--p">Finally we need to add the route to the <strong class="markup--strong markup--p-strong">AuthController.js</strong> in our main <strong class="markup--strong markup--p-strong">app.js </strong>file. First export the router from <strong class="markup--strong markup--p-strong">AuthController.js</strong>:</p>
           <pre name="8c18" id="8c18" class="graf graf--pre graf-after--p">// add this to the bottom of AuthController.js<br>module.exports = router;</pre>
           <p name="4840" id="4840" class="graf graf--p graf-after--pre">Then add a reference to the controller in the main app, right above where you exported the app.</p>
           <pre name="a0e3" id="a0e3" class="graf graf--pre graf-after--p">// app.js<br>var AuthController = require('./auth/AuthController');<br>app.use('/api/auth', AuthController);</pre>
           <pre name="63a5" id="63a5" class="graf graf--pre graf-after--pre">module.exports = app;</pre>
           <h3 name="f68e" id="f68e" class="graf graf--h3 graf-after--pre">Let’s test this out. Why&nbsp;not?</h3>
           <p name="6a50" id="6a50" class="graf graf--p graf-after--h3">Open up your REST API testing tool of choice, I use <a href="https://www.getpostman.com/postman" data-href="https://www.getpostman.com/postman" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Postman</a> or <a href="https://insomnia.rest/" data-href="https://insomnia.rest/" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Insomnia</a>, but any will do.</p>
           <p name="a90e" id="a90e" class="graf graf--p graf-after--p">Go back to your terminal and run <code class="markup--code markup--p-code">node server.js</code>. If it is running, stop it, save all changes to you files, and run <code class="markup--code markup--p-code">node server.js</code> again.</p>
           <p name="d9ad" id="d9ad" class="graf graf--p graf-after--p">Open up Postman and hit the register endpoint (<code class="markup--code markup--p-code">/api/auth/register</code>). Make sure to pick the POST method and <code class="markup--code markup--p-code">x-www-form-url-encoded</code>. Now, add some values. My user’s name is Mike and his password is ‘thisisasecretpassword’. That’s not the best password I’ve ever seen, to be honest, but it’ll do. Hit send!</p>
           <figure name="174c" id="174c" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 385px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 55.00000000000001%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*VW8PuDYCd78cjlCWYLMJ5w.png" data-width="1918" data-height="1054" data-action="zoom" data-action-value="1*VW8PuDYCd78cjlCWYLMJ5w.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*VW8PuDYCd78cjlCWYLMJ5w.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*VW8PuDYCd78cjlCWYLMJ5w.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*VW8PuDYCd78cjlCWYLMJ5w.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             /register
            </figcaption>
           </figure>
           <p name="7e96" id="7e96" class="graf graf--p graf-after--figure">See the response? The token is a long jumbled string. To try out the <code class="markup--code markup--p-code">/api/auth/me</code> endpoint, first copy the token. Change the URL to <code class="markup--code markup--p-code">/me</code> instead of <code class="markup--code markup--p-code">/register</code>, and the method to GET. Now you can add the token to the request header.</p>
           <figure name="ea7e" id="ea7e" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 385px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 55.00000000000001%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*HqpzH4XhCxE8ocgVUwb4XA.png" data-width="1920" data-height="1056" data-action="zoom" data-action-value="1*HqpzH4XhCxE8ocgVUwb4XA.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*HqpzH4XhCxE8ocgVUwb4XA.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*HqpzH4XhCxE8ocgVUwb4XA.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*HqpzH4XhCxE8ocgVUwb4XA.png">
              </noscript>
             </div>
            </div>
            <figcaption class="imageCaption">
             /me
            </figcaption>
           </figure>
           <p name="f915" id="f915" class="graf graf--p graf-after--figure">Voilà! The token has been decoded into an object with an id field. Want to make sure that the id really belongs to Mike, the user we just created? Sure you do. Jump back into your code editor.</p>
           <pre name="d000" id="d000" class="graf graf--pre graf-after--p">// in AuthController.js change this line<br>res.status(200).send(decoded);</pre>
           <pre name="7dfb" id="7dfb" class="graf graf--pre graf-after--pre">// to<br>User.findById(decoded.id, function (err, user) {<br>  if (err) return res.status(500).send("There was a problem finding the user.");<br>  if (!user) return res.status(404).send("No user found.");<br>  <br>  res.status(200).send(user);<br>});</pre>
           <p name="3e04" id="3e04" class="graf graf--p graf-after--pre">Now when you send a request to the <code class="markup--code markup--p-code">/me</code> endpoint you’ll see:</p>
           <figure name="f8ab" id="f8ab" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 385px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 55.00000000000001%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*wAH8NG9kFEIyTuzcZj85Cg.png" data-width="1920" data-height="1056" data-action="zoom" data-action-value="1*wAH8NG9kFEIyTuzcZj85Cg.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*wAH8NG9kFEIyTuzcZj85Cg.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*wAH8NG9kFEIyTuzcZj85Cg.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*wAH8NG9kFEIyTuzcZj85Cg.png">
              </noscript>
             </div>
            </div>
           </figure>
           <p name="a51a" id="a51a" class="graf graf--p graf-after--figure">The response now contains the whole user object! Cool! But, not good. The password should never be returned with the other data about the user. Let’s fix this. We can add a projection to the query and omit the password. Like this:</p>
           <pre name="1156" id="1156" class="graf graf--pre graf-after--p">User.findById(decoded.id, <br>  { password: 0 }, // projection<br>  function (err, user) {<br>    if (err) return res.status(500).send("There was a problem finding the user.");<br>    if (!user) return res.status(404).send("No user found.");</pre>
           <pre name="4a19" id="4a19" class="graf graf--pre graf-after--pre">    res.status(200).send(user);<br>});</pre>
           <figure name="e856" id="e856" class="graf graf--figure graf-after--pre">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 385px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 55.00000000000001%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*P_ZOnm0SpQ5jwH7gcK44Ow.png" data-width="1920" data-height="1056" data-action="zoom" data-action-value="1*P_ZOnm0SpQ5jwH7gcK44Ow.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*P_ZOnm0SpQ5jwH7gcK44Ow.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*P_ZOnm0SpQ5jwH7gcK44Ow.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*P_ZOnm0SpQ5jwH7gcK44Ow.png">
              </noscript>
             </div>
            </div>
           </figure>
           <p name="fa93" id="fa93" class="graf graf--p graf-after--figure">That’s better, now we can see all values except the password. Mike’s looking good.</p>
           <h3 name="84d8" id="84d8" class="graf graf--h3 graf-after--p">Did someone say&nbsp;login?</h3>
           <p name="d33e" id="d33e" class="graf graf--p graf-after--h3">After implementing the registration, we should create a way for existing users to log in. Let’s think about it for a second. The register endpoint required us to create a user, hash a password, and issue a token. What will the login endpoint need us to implement? It should check if a user with the given email exists at all. But also check if the provided password matches the hashed password in the database. Only then will we want to issue a token. Add this to your <strong class="markup--strong markup--p-strong">AuthController.js</strong>.</p>
           <pre name="59b4" id="59b4" class="graf graf--pre graf-after--p">router.post('/login', function(req, res) {</pre>
           <pre name="b098" id="b098" class="graf graf--pre graf-after--pre">  User.findOne({ email: req.body.email }, function (err, user) {<br>    if (err) return res.status(500).send('Error on the server.');<br>    if (!user) return res.status(404).send('No user found.');</pre>
           <pre name="f787" id="f787" class="graf graf--pre graf-after--pre">    var passwordIsValid = bcrypt.compareSync(req.body.password, user.password);<br>    if (!passwordIsValid) return res.status(401).send({ auth: false, token: null });</pre>
           <pre name="0736" id="0736" class="graf graf--pre graf-after--pre">    var token = jwt.sign({ id: user._id }, config.secret, {<br>      expiresIn: 86400 // expires in 24 hours<br>    });</pre>
           <pre name="78e8" id="78e8" class="graf graf--pre graf-after--pre">    res.status(200).send({ auth: true, token: token });<br>  });</pre>
           <pre name="9346" id="9346" class="graf graf--pre graf-after--pre">});</pre>
           <p name="b67d" id="b67d" class="graf graf--p graf-after--pre">First of all we check if the user exists. Then using Bcrypt’s&nbsp;<code class="markup--code markup--p-code">.compareSync()</code> method we compare the password sent with the request to the password in the database. If they match we&nbsp;<code class="markup--code markup--p-code">.sign()</code> a token. That’s pretty much it. Let’s try it out.</p>
           <figure name="9317" id="9317" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 385px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 55.00000000000001%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*KxM7Sz8bPrd6q9iwCr9f2w.png" data-width="1920" data-height="1056" data-action="zoom" data-action-value="1*KxM7Sz8bPrd6q9iwCr9f2w.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*KxM7Sz8bPrd6q9iwCr9f2w.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*KxM7Sz8bPrd6q9iwCr9f2w.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*KxM7Sz8bPrd6q9iwCr9f2w.png">
              </noscript>
             </div>
            </div>
           </figure>
           <p name="2e81" id="2e81" class="graf graf--p graf-after--figure">Cool it works! What if we get the password wrong?</p>
           <figure name="9cb6" id="9cb6" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 385px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 55.00000000000001%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*qI__BMg9d88g2h7o4RzZLA.png" data-width="1920" data-height="1056" data-action="zoom" data-action-value="1*qI__BMg9d88g2h7o4RzZLA.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*qI__BMg9d88g2h7o4RzZLA.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*qI__BMg9d88g2h7o4RzZLA.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*qI__BMg9d88g2h7o4RzZLA.png">
              </noscript>
             </div>
            </div>
           </figure>
           <p name="6023" id="6023" class="graf graf--p graf-after--figure">Great, when the password is wrong the server sends a response status of <code class="markup--code markup--p-code">401 unauthorized</code>. Just what we wanted!</p>
           <p name="483a" id="483a" class="graf graf--p graf-after--p">To finish off this part of the tutorial, let’s add a simple logout endpoint to nullify the token.</p>
           <pre name="3470" id="3470" class="graf graf--pre graf-after--p">// AuthController.js<br>router.get('/logout', function(req, res) {<br>  res.status(200).send({ auth: false, token: null });<br>});</pre>
           <p name="ce79" id="ce79" class="graf graf--p graf-after--pre"><strong class="markup--strong markup--p-strong">Disclaimer</strong>: The logout endpoint is not needed. The act of logging out can solely be done through the client side. A token is usually kept in a cookie or the browser’s localstorage. Logging out is as simple as destroying the token on the client. This <code class="markup--code markup--p-code">/logout</code> endpoint is created to logically depict what happens when you log out. The token gets set to <code class="markup--code markup--p-code">null</code>.</p>
           <p name="24b3" id="24b3" class="graf graf--p graf-after--p">With this we’ve finished the <strong class="markup--strong markup--p-strong">authentication</strong> part of the tutorial. Want to move on to the authorization? I bet you do.</p>
           <h3 name="0ed8" id="0ed8" class="graf graf--h3 graf-after--p">Do you have permission to be&nbsp;here?</h3>
           <p name="0a02" id="0a02" class="graf graf--p graf-after--h3">To comprehend the logic behind an authorization strategy we need to wrap our head around something called <strong class="markup--strong markup--p-strong">middleware</strong>. Its name is self explanatory, to some extent, isn’t it? Middleware is a piece of code, a function in Node.js, that acts as a bridge between some parts of your code.</p>
           <p name="b2dd" id="b2dd" class="graf graf--p graf-after--p">When a request reaches an endpoint, the router has an option to pass the request on to the next middleware function in line. Emphasis on the word <strong class="markup--strong markup--p-strong">next</strong>! Because that’s exactly what the name of the function is! Let’s see an example. Comment out the line where you send back the user as a response. Add a <code class="markup--code markup--p-code">next(user)</code> right underneath.</p>
           <pre name="a330" id="a330" class="graf graf--pre graf-after--p">router.get('/me', function(req, res) {</pre>
           <pre name="6fb9" id="6fb9" class="graf graf--pre graf-after--pre">var token = req.headers['x-access-token'];<br>  if (!token) return res.status(401).send({ auth: false, message: 'No token provided.' });<br>  <br>  jwt.verify(token, config.secret, function(err, decoded) {<br>    if (err) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });<br>    <br>    User.findById(decoded.id, <br>    { password: 0 }, // projection<br>    function (err, user) {<br>      if (err) return res.status(500).send("There was a problem finding the user.");<br>      if (!user) return res.status(404).send("No user found.");</pre>
           <pre name="5768" id="5768" class="graf graf--pre graf-after--pre">      // res.status(200).send(user); Comment this out!<br>      next(user); // add this line<br>    });<br>  });<br>});</pre>
           <pre name="a9eb" id="a9eb" class="graf graf--pre graf-after--pre">// add the middleware function<br>router.use(function (user, req, res, next) {<br>  res.status(200).send(user);<br>});</pre>
           <blockquote name="7576" id="7576" class="graf graf--blockquote graf-after--pre">
            <strong class="markup--strong markup--blockquote-strong"><em class="markup--em markup--blockquote-em">Middleware</em></strong> functions are functions that have access to the 
            <a href="https://expressjs.com/en/4x/api.html#req" data-href="https://expressjs.com/en/4x/api.html#req" class="markup--anchor markup--blockquote-anchor" rel="noopener" target="_blank">request object</a> (
            <code class="markup--code markup--blockquote-code">req</code>), the 
            <a href="https://expressjs.com/en/4x/api.html#res" data-href="https://expressjs.com/en/4x/api.html#res" class="markup--anchor markup--blockquote-anchor" rel="noopener" target="_blank">response object</a> (
            <code class="markup--code markup--blockquote-code">res</code>), and the 
            <code class="markup--code markup--blockquote-code">next</code> function in the application’s request-response cycle. The 
            <code class="markup--code markup--blockquote-code">next</code> function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware.
            <br>- 
            <a href="https://expressjs.com/en/guide/using-middleware.html" data-href="https://expressjs.com/en/guide/using-middleware.html" class="markup--anchor markup--blockquote-anchor" rel="noopener" target="_blank">Using middleware</a>, expressjs.com
           </blockquote>
           <p name="c21f" id="c21f" class="graf graf--p graf-after--blockquote">Jump back to postman and check out what happens when you hit the <code class="markup--code markup--p-code">/api/auth/me</code> endpoint. Does it surprise you that the outcome is exactly the same? It should be!</p>
           <p name="e626" id="e626" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Disclaimer</strong>: Go ahead and delete this sample before we continue as it is only used for demonstrating the logic of using <code class="markup--code markup--p-code">next()</code>.</p>
           <p name="1bc9" id="1bc9" class="graf graf--p graf-after--p">Let’s take this same logic and apply it to create a middleware function to check the validity of tokens. Create a new file in the <strong class="markup--strong markup--p-strong">auth </strong>folder and name it <strong class="markup--strong markup--p-strong">VerifyToken.js</strong>. Paste this snippet of code in there.</p>
           <pre name="92ff" id="92ff" class="graf graf--pre graf-after--p">var jwt = require('jsonwebtoken');<br>var config = require('../config');</pre>
           <pre name="17fa" id="17fa" class="graf graf--pre graf-after--pre">function verifyToken(req, res, next) {<br>  var token = req.headers['x-access-token'];<br>  if (!token)<br>    return res.status(403).send({ auth: false, message: 'No token provided.' });</pre>
           <pre name="37c5" id="37c5" class="graf graf--pre graf-after--pre">  jwt.verify(token, config.secret, function(err, decoded) {<br>    if (err)<br>    return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });</pre>
           <pre name="4591" id="4591" class="graf graf--pre graf-after--pre">    // if everything good, save to request for use in other routes<br>    req.userId = decoded.id;<br>    next();<br>  });<br>}</pre>
           <pre name="afe5" id="afe5" class="graf graf--pre graf-after--pre">module.exports = verifyToken;</pre>
           <p name="26f0" id="26f0" class="graf graf--p graf-after--pre">Let’s break it down. We’re going to use this function as a custom middleware to check if a token exists and whether it is valid. After validating it, we add the <code class="markup--code markup--p-code">decoded.id</code> value to the request (<code class="markup--code markup--p-code">req</code>) variable. We now have access to it in the next function in line in the request-response cycle. Calling <code class="markup--code markup--p-code">next()</code> will make sure flow will continue to the next function waiting in line. In the end, we export the function.</p>
           <p name="07a4" id="07a4" class="graf graf--p graf-after--p">Now, open up the <strong class="markup--strong markup--p-strong">AuthController.js </strong>once again. Add a reference to <strong class="markup--strong markup--p-strong">VerifyToken.js</strong> at the top of the file and edit the <code class="markup--code markup--p-code">/me</code> endpoint. It should now look like this:</p>
           <pre name="118b" id="118b" class="graf graf--pre graf-after--p">// AuthController.js</pre>
           <pre name="3e2f" id="3e2f" class="graf graf--pre graf-after--pre">var VerifyToken = require('./VerifyToken');</pre>
           <pre name="d2d5" id="d2d5" class="graf graf--pre graf-after--pre">// ...</pre>
           <pre name="7565" id="7565" class="graf graf--pre graf-after--pre">router.get('/me', VerifyToken, function(req, res, next) {</pre>
           <pre name="f119" id="f119" class="graf graf--pre graf-after--pre">  User.findById(req.userId, { password: 0 }, function (err, user) {<br>    if (err) return res.status(500).send("There was a problem finding the user.");<br>    if (!user) return res.status(404).send("No user found.");<br>    <br>    res.status(200).send(user);<br>  });</pre>
           <pre name="b6ca" id="b6ca" class="graf graf--pre graf-after--pre">});</pre>
           <pre name="dd75" id="dd75" class="graf graf--pre graf-after--pre">// ...</pre>
           <p name="18b7" id="18b7" class="graf graf--p graf-after--pre">See how we added <code class="markup--code markup--p-code">VerifyToken</code> in the chain of functions? We now handle all the authorization in the middleware. This frees up all the space in the callback to only handle the logic we need. This is an awesome example of how to write DRY code. Now, every time you need to authorize a user you can add this middleware function to the chain. Test it in Postman again, to make sure it still works like it should.</p>
           <figure name="f86f" id="f86f" class="graf graf--figure graf-after--p">
            <div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 385px;">
             <div class="aspectRatioPlaceholder-fill" style="padding-bottom: 55.00000000000001%;"></div>
             <div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*iBp9DTi8iHoTza-pWX3Sgg.png" data-width="1920" data-height="1056" data-action="zoom" data-action-value="1*iBp9DTi8iHoTza-pWX3Sgg.png">
              <img src="https://cdn-images-1.medium.com/freeze/max/60/1*iBp9DTi8iHoTza-pWX3Sgg.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail">
              <canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas>
              <img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*iBp9DTi8iHoTza-pWX3Sgg.png">
              <noscript class="js-progressiveMedia-inner">
               <img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*iBp9DTi8iHoTza-pWX3Sgg.png">
              </noscript>
             </div>
            </div>
           </figure>
           <p name="24c2" id="24c2" class="graf graf--p graf-after--figure">Feel free to mess with the token and try the endpoint again. With an invalid token, you’ll see the desired error message, and be sure the code you wrote works the way you want.</p>
           <p name="de8c" id="de8c" class="graf graf--p graf-after--p">Why is this so powerful? You can now add the <code class="markup--code markup--p-code">VerifyToken</code><em class="markup--em markup--p-em"> </em>middleware to any chain of functions and be sure the endpoints are secured. Only users with verified tokens can access the resources!</p>
           <h3 name="0e99" id="0e99" class="graf graf--h3 graf-after--p">Wrapping your head around everything.</h3>
           <p name="a32b" id="a32b" class="graf graf--p graf-after--h3">Don’t feel bad if you did not grasp everything at once. Some of these concepts are hard to understand. It’s fine to take a step back and rest your brain before trying again. That’s why I recommend you go through the code by yourself and try your best to get it to work.</p>
           <p name="8af3" id="8af3" class="graf graf--p graf-after--p">Again, <a href="https://github.com/adnanrahic/securing-restful-apis-with-jwt" data-href="https://github.com/adnanrahic/securing-restful-apis-with-jwt" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">here’s the GitHub repository</a>. You can catch up on any things you may have missed, or just get a better look at the code if you get stuck.</p>
           <p name="7dcd" id="7dcd" class="graf graf--p graf-after--p">Remember, <strong class="markup--strong markup--p-strong">authentication</strong> is the act of logging a user in. <strong class="markup--strong markup--p-strong">Authorization</strong> is the act of verifying the access rights of a user to interact with a resource.</p>
           <p name="31db" id="31db" class="graf graf--p graf-after--p"><strong class="markup--strong markup--p-strong">Middleware</strong> functions are used as bridges between some pieces of code. When used in the function chain of an endpoint they can be incredibly useful in authorization and error handling.</p>
           <p name="64c8" id="64c8" class="graf graf--p graf-after--p">Hope you guys and girls enjoyed reading this as much as I enjoyed writing it. Until next time, be curious and have fun.</p>
           <p name="32eb" id="32eb" class="graf graf--p graf-after--p graf--trailing"><em class="markup--em markup--p-em">Do you think this tutorial will be of help to someone? Do not hesitate to share. If you liked it, please clap for me.</em></p>
          </div>
         </div>
        </section>
       </div>
       <footer class="u-paddingTop10">
        <div class="container u-maxWidth740">
         <div class="row">
          <div class="col u-size12of12"></div>
         </div>
         <div class="row">
          <div class="col u-size12of12 js-postTags">
           <div class="u-paddingBottom10">
            <ul class="tags tags--postTags tags--borderless">
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/nodejs?source=post" data-action-source="post" data-collection-slug="free-code-camp">Nodejs</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/web-development?source=post" data-action-source="post" data-collection-slug="free-code-camp">Web Development</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/javascript?source=post" data-action-source="post" data-collection-slug="free-code-camp">JavaScript</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/startup?source=post" data-action-source="post" data-collection-slug="free-code-camp">Startup</a></li>
             <li><a class="link u-baseColor--link" href="https://medium.freecodecamp.org/tagged/programming?source=post" data-action-source="post" data-collection-slug="free-code-camp">Programming</a></li>
            </ul>
           </div>
          </div>
         </div>
         <section class="u-paddingTop20 u-borderTopLightest u-marginTop10">
          <div class="u-textColorDarker u-fontSize22 u-marginBottom7">
           Show your support
          </div>
          <p class="u-textColorDark u-fontSize16">Clapping shows how much you appreciated Adnan Rahi?’s story.</p>
         </section>
         <div class="postActions u-flexCenter js-postActionsFooter">
          <div class="u-flex1">
           <div class="multirecommend js-actionMultirecommend u-flexCenter u-width60" data-post-id="9f811a92bb52" data-is-icon-29px="true" data-is-circle="true" data-has-recommend-list="true" data-source="post_actions_footer">
            <div class="u-relative u-foreground">
             <button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal" data-action="sign-in-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/9f811a92bb52" data-action-source="post_actions_footer" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0">
                <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
                 <path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd" />
                </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0">
                <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
                 <g fill-rule="evenodd">
                  <path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z" />
                  <path d="M13.285.48l-1.916.881 2.37 2.837z" />
                  <path d="M21.719 1.361L19.79.501l-.44 3.697z" />
                  <path d="M16.502 3.298L15.481 0h2.043z" />
                 </g>
                </svg></span></span></button>
             <div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;">
              <button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight" data-action="multivote-undo" data-action-value="9f811a92bb52"><span class="svgIcon svgIcon--removeThin svgIcon--29px">
                <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
                 <path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd" />
                </svg></span></button>
             </div>
            </div>
            <span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-marginLeft10"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton" data-action="show-recommends" data-action-value="9f811a92bb52">1.7K</button></span>
           </div>
          </div>
          <div class="u-flex0 buttonSet buttonSet--narrow">
           <div class="buttonSet-inner">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" data-action="scroll-to-responses" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--response svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M21.27 20.058c1.89-1.826 2.754-4.17 2.754-6.674C24.024 8.21 19.67 4 14.1 4 8.53 4 4 8.21 4 13.384c0 5.175 4.53 9.385 10.1 9.385 1.007 0 2-.14 2.95-.41.285.25.592.49.918.7 1.306.87 2.716 1.31 4.19 1.31.276-.01.494-.14.6-.36a.625.625 0 0 0-.052-.65c-.61-.84-1.042-1.71-1.282-2.58a5.417 5.417 0 0 1-.154-.75zm-3.85 1.324l-.083-.28-.388.12a9.72 9.72 0 0 1-2.85.424c-4.96 0-8.99-3.706-8.99-8.262 0-4.556 4.03-8.263 8.99-8.263 4.95 0 8.77 3.71 8.77 8.27 0 2.25-.75 4.35-2.5 5.92l-.24.21v.32c0 .07 0 .19.02.37.03.29.1.6.19.92.19.7.49 1.4.89 2.08-.93-.14-1.83-.49-2.67-1.06-.34-.22-.88-.48-1.16-.74z" />
              </svg></span></button>
            <button class="button button--chromeless u-baseColor--buttonNormal" data-action="scroll-to-responses">9</button>
           </div>
           <div class="buttonSet-inner u-xs-hide">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--twitter svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z" />
              </svg></span></button>
           </div>
           <div class="buttonSet-inner u-xs-hide">
            <button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--facebook svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4" />
              </svg></span></button>
           </div>
           <div class="buttonSet-inner u-xs-show">
            <button class="button button--large button--dark button--chromeless u-baseColor--buttonDark button--withIcon button--withSvgIcon js-shareStoryButton" title="Share this story on Twitter or Facebook" aria-label="Share this story on Twitter or Facebook" data-action="show-share-popover" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--share svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M20.385 8H19a.5.5 0 1 0 .011 1h1.39c.43 0 .84.168 1.14.473.31.305.48.71.48 1.142v10.77c0 .43-.17.837-.47 1.142-.3.305-.71.473-1.14.473H8.62c-.43 0-.84-.168-1.144-.473a1.603 1.603 0 0 1-.473-1.142v-10.77c0-.43.17-.837.48-1.142A1.599 1.599 0 0 1 8.62 9H10a.502.502 0 0 0 0-1H8.615c-.67 0-1.338.255-1.85.766-.51.51-.765 1.18-.765 1.85v10.77c0 .668.255 1.337.766 1.848.51.51 1.18.766 1.85.766h11.77c.668 0 1.337-.255 1.848-.766.51-.51.766-1.18.766-1.85v-10.77c0-.668-.255-1.337-.766-1.848A2.61 2.61 0 0 0 20.384 8zm-8.67-2.508L14 3.207v8.362c0 .27.224.5.5.5s.5-.23.5-.5V3.2l2.285 2.285a.49.49 0 0 0 .704-.001.511.511 0 0 0 0-.708l-3.14-3.14a.504.504 0 0 0-.71 0L11 4.776a.501.501 0 0 0 .71.706" fill-rule="evenodd" />
              </svg></span></button>
           </div>
          </div>
         </div>
        </div>
        <div class="js-postPromotionWrapper postPromotionWrapper" data-location-id="footer_above_post_attribution"></div>
        <div class="u-maxWidth740 u-paddingTop20 u-marginTop10 u-borderTopLightest container u-paddingBottom20 u-xs-paddingBottom10 js-postAttributionFooterContainer">
         <div class="row js-postFooterInfo">
          <div class="col u-size6of12 u-xs-size12of12">
           <li class="u-block u-paddingBottom18 js-cardUser">
            <div class="u-marginLeft20 u-floatRight">
             <span class="followState js-followState" data-user-id="d1aeac7eadae"><button class="button button--small u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton" data-action="sign-in-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-action-source="footer_card"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton" data-action="sign-in-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/d1aeac7eadae" data-action-source="footer_card--------------------------follow_footer"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span>
            </div>
            <div class="u-tableCell ">
             <a class="link avatar u-baseColor--link" href="https://medium.freecodecamp.org/@adnanrahic?source=footer_card" title="Go to the profile of Adnan Rahi?" aria-label="Go to the profile of Adnan Rahi?" data-action-source="footer_card" data-user-id="d1aeac7eadae" data-collection-slug="free-code-camp" dir="auto"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*_zEH2290dCCejDlyJghqqw.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Adnan Rahi?"></a>
            </div>
            <div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15">
             <h3 class="u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal" href="https://medium.freecodecamp.org/@adnanrahic" property="cc:attributionName" title="Go to the profile of Adnan Rahi?" aria-label="Go to the profile of Adnan Rahi?" rel="author cc:attributionUrl" data-user-id="d1aeac7eadae" data-collection-slug="free-code-camp" dir="auto">Adnan Rahi?</a></h3>
             <p class="u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">Software engineer <a href="http://twitter.com/bookvar_co" target="_blank" title="Twitter profile for @bookvar_co">@bookvar_co</a>. Coding educator <a href="http://twitter.com/ACADEMY387" target="_blank" title="Twitter profile for @ACADEMY387">@ACADEMY387</a>. Campsite leader <a href="http://twitter.com/freeCodeCamp" target="_blank" title="Twitter profile for @freeCodeCamp">@freeCodeCamp</a> Sarajevo.</p>
            </div></li>
          </div>
          <div class="col u-size6of12 u-xs-size12of12 u-xs-marginTop30">
           <li class="u-block u-paddingBottom18 js-cardCollection">
            <div class="u-marginLeft20 u-floatRight">
             <button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal js-relationshipButton" data-action="sign-in-prompt" data-sign-in-action="toggle-follow-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/free-code-camp" data-action-source="----336d898217ee" data-collection-id="336d898217ee"><span class="button-label  js-buttonLabel">Follow</span></button>
            </div>
            <div class="u-tableCell ">
             <a class="link avatar avatar--roundedRectangle u-baseColor--link" href="https://medium.freecodecamp.org?source=footer_card" title="Go to freeCodeCamp" aria-label="Go to freeCodeCamp" data-action-source="footer_card" data-collection-slug="free-code-camp"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*MotlWcSa2n6FrOx3ul89kw.png" class="avatar-image u-size60x60" alt="freeCodeCamp"></a>
            </div>
            <div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15">
             <h3 class="u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal" href="https://medium.freecodecamp.org?source=footer_card" rel="collection" data-action-source="footer_card" data-collection-slug="free-code-camp">freeCodeCamp</a></h3>
             <p class="u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">Our community publishes stories worth reading on development, design, and data science.</p>
             <div class="buttonSet"></div>
            </div></li>
          </div>
         </div>
        </div>
        <div class="js-postFooterPlacements"></div>
        <div class="u-padding0 u-clearfix u-backgroundGrayLightest u-print-hide supplementalPostContent js-responsesWrapper"></div>
        <div class="supplementalPostContent js-readNext"></div>
        <div class="supplementalPostContent js-heroPromo"></div>
       </footer>
      </article>
     </main>
     <div class="u-marginAuto u-maxWidth1000">
      <div class="js-postShareWidget u-foreground u-sm-hide u-transition--fadeOut300 u-fixed">
       <ul>
        <li class="u-textAlignCenter">
         <div class="multirecommend js-actionMultirecommend u-flexColumn u-marginBottom10 u-width60" data-post-id="9f811a92bb52" data-is-icon-29px="true" data-is-vertical="true" data-is-circle="true" data-is-compressed="true" data-has-recommend-list="true" data-source="post_share_widget">
          <div class="u-relative u-foreground">
           <button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal" data-action="sign-in-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/9f811a92bb52" data-action-source="post_share_widget" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0">
              <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
               <path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd" />
              </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0">
              <svg class="svgIcon-use" width="33" height="33" viewbox="0 0 33 33">
               <g fill-rule="evenodd">
                <path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z" />
                <path d="M13.285.48l-1.916.881 2.37 2.837z" />
                <path d="M21.719 1.361L19.79.501l-.44 3.697z" />
                <path d="M16.502 3.298L15.481 0h2.043z" />
               </g>
              </svg></span></span></button>
           <div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;">
            <button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight" data-action="multivote-undo" data-action-value="9f811a92bb52"><span class="svgIcon svgIcon--removeThin svgIcon--29px">
              <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
               <path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd" />
              </svg></span></button>
           </div>
          </div>
          <span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-flexOrderNegative1 u-height20 u-marginBottom7"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton u-block u-marginAuto" data-action="show-recommends" data-action-value="9f811a92bb52">1.7K</button></span>
         </div></li>
        <li class="u-textAlignCenter"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_share_widget"><span class="svgIcon svgIcon--twitter svgIcon--29px">
           <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
            <path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z" />
           </svg></span></button></li>
        <li class="u-textAlignCenter"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon" title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_share_widget"><span class="svgIcon svgIcon--facebook svgIcon--29px">
           <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
            <path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4" />
           </svg></span></button></li>
        <li class="u-textAlignCenter"><button class="button button--large button--dark button--chromeless is-touchIconFadeInPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon button--bookmark js-bookmarkButton" title="Bookmark this story to read later" aria-label="Bookmark this story to read later" data-action="sign-in-prompt" data-sign-in-action="add-to-bookmarks" data-requires-token="true" data-redirect="https://medium.com/_/bookmark/p/9f811a92bb52"><span class="button-defaultState"><span class="svgIcon svgIcon--bookmark svgIcon--29px">
            <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
             <path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4zM21 23l-5.91-3.955-.148-.107a.751.751 0 0 0-.884 0l-.147.107L8 23V6.615C8 5.725 8.725 5 9.615 5h9.77C20.275 5 21 5.725 21 6.615V23z" fill-rule="evenodd" />
            </svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--bookmarkFilled svgIcon--29px">
            <svg class="svgIcon-use" width="29" height="29" viewbox="0 0 29 29">
             <path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4z" fill-rule="evenodd" />
            </svg></span></span></button></li>
       </ul>
      </div>
     </div>
     <div class="u-fixed u-bottom0 u-sizeFullWidth u-backgroundWhite u-boxShadowTop u-borderBox u-paddingTop10 u-paddingBottom10 u-zIndexMetabar u-xs-paddingLeft10 u-xs-paddingRight10 js-stickyFooter">
      <div class="u-maxWidth700 u-marginAuto u-flexCenter">
       <div class="u-fontSize16 u-flex1 u-flexCenter">
        <div class="u-flex0 u-inlineBlock u-paddingRight20 u-xs-paddingRight10">
         <a class="link avatar avatar--roundedRectangle u-baseColor--link" href="https://medium.freecodecamp.org" title="Go to freeCodeCamp" aria-label="Go to freeCodeCamp" data-collection-slug="free-code-camp"><img src="https://cdn-images-1.medium.com/fit/c/80/80/1*MotlWcSa2n6FrOx3ul89kw.png" class="avatar-image avatar-image--smaller" alt="freeCodeCamp"></a>
        </div>
        <div class="u-flex1 u-inlineBlock">
         <div class="u-xs-hide">
          Never miss a story from
          <strong> freeCodeCamp</strong>, when you sign up for Medium. 
          <a class="link link--accent u-accentColor--textNormal u-accentColor--textDarken u-baseColor--link" href="https://medium.com/@Medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg" data-action-source="sticky_footer">Learn more</a>
         </div>
         <div class="u-xs-show">
          Never miss a story from
          <strong> freeCodeCamp</strong>
         </div>
        </div>
       </div>
       <div class="u-marginLeft50 u-xs-marginAuto">
        <button class="button button--primary button--dark is-active u-noUserSelect button--withChrome u-accentColor--buttonDark u-uiTextSemibold u-textUppercase u-fontSize12 button--followCollection js-followCollectionButton" data-action="sign-in-prompt" data-sign-in-action="toggle-subscribe-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/free-code-camp" data-action-source="sticky_footer----336d898217ee----------------------post_metabar"><span class="button-label  button-defaultState js-buttonLabel">Get updates</span><span class="button-label button-activeState">Get updates</span></button>
       </div>
      </div>
     </div>
     <div class="js-drawerContainer"></div>
     <style class="js-collectionStyle">
.u-accentColor--borderLight {border-color: #429A35 !important;}
.u-accentColor--borderNormal {border-color: #429A35 !important;}
.u-accentColor--borderDark {border-color: #3E8432 !important;}
.u-accentColor--iconLight .svgIcon,.u-accentColor--iconLight.svgIcon {fill: #429A35 !important;}
.u-accentColor--iconNormal .svgIcon,.u-accentColor--iconNormal.svgIcon {fill: #429A35 !important;}
.u-accentColor--iconDark .svgIcon,.u-accentColor--iconDark.svgIcon {fill: #3E8432 !important;}
.u-accentColor--textNormal {color: #3E8432 !important;}
.u-accentColor--hoverTextNormal:hover {color: #3E8432 !important;}
.u-accentColor--textNormal.u-accentColor--textDarken:hover {color: #3B7830 !important;}
.u-accentColor--textDark {color: #3B7830 !important;}
.u-accentColor--backgroundLight {background-color: #429A35 !important;}
.u-accentColor--backgroundNormal {background-color: #429A35 !important;}
.u-accentColor--backgroundDark {background-color: #3E8432 !important;}
.u-accentColor--buttonDark {border-color: #3E8432 !important; color: #3B7830 !important;}
.u-accentColor--buttonDark:hover {border-color: #3B7830 !important;}
.u-accentColor--buttonDark .icon:before,.u-accentColor--buttonDark .svgIcon{color: #3E8432 !important; fill: #3E8432 !important;}
.u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: #429A35 !important; color: #3E8432 !important;}
.u-accentColor--buttonNormal:hover {border-color: #3E8432 !important;}
.u-accentColor--buttonNormal .icon:before,.u-accentColor--buttonNormal .svgIcon{color: #429A35 !important; fill: #429A35 !important;}
.u-accentColor--buttonNormal.button--filled .icon:before,.u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-accentColor--buttonDark.button--filled,.u-accentColor--buttonDark.button--withChrome.is-active,.u-accentColor--fillWhenActive.is-active {background-color: #3E8432 !important; border-color: #3E8432 !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: #429A35 !important; border-color: #429A35 !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.postArticle.is-withAccentColors .markup--user,.postArticle.is-withAccentColors .markup--query {color: #3E8432 !important;}.u-tintBgColor {background-color: rgba(0, 100, 0, 1) !important;}.u-tintBgColor .u-fadeLeft:before {background-image: linear-gradient(to right, rgba(0, 100, 0, 1) 0%, rgba(0, 100, 0, 0) 100%) !important;}.u-tintBgColor .u-fadeRight:after {background-image: linear-gradient(to right, rgba(0, 100, 0, 0) 0%, rgba(0, 100, 0, 1) 100%) !important;}
.u-tintSpectrum .u-baseColor--borderLight {border-color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--borderNormal {border-color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--borderDark {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--iconLight .svgIcon,.u-tintSpectrum .u-baseColor--iconLight.svgIcon {fill: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--iconNormal .svgIcon,.u-tintSpectrum .u-baseColor--iconNormal.svgIcon {fill: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--iconDark .svgIcon,.u-tintSpectrum .u-baseColor--iconDark.svgIcon {fill: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--textNormal {color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--textDark {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--textDarker {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--backgroundLight {background-color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--backgroundNormal {background-color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--backgroundDark {background-color: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--buttonLight {border-color: #8ABF7C !important; color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--buttonLight:hover {border-color: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--buttonLight .icon:before,.u-tintSpectrum .u-baseColor--buttonLight .svgIcon {color: #8ABF7C !important; fill: #8ABF7C !important;}
.u-tintSpectrum .u-baseColor--buttonDark {border-color: #DFF8D4 !important; color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--buttonDark:hover {border-color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--buttonDark .icon:before,.u-tintSpectrum .u-baseColor--buttonDark .svgIcon {color: #DFF8D4 !important; fill: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal {border-color: #B5DDA8 !important; color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal:hover {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-baseColor--buttonNormal .icon:before,.u-tintSpectrum .u-baseColor--buttonNormal .svgIcon {color: #B5DDA8 !important; fill: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--buttonDark.button--filled,.u-tintSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: #DFF8D4 !important; border-color: #DFF8D4 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-baseColor--buttonNormal.button--filled,.u-tintSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: #B5DDA8 !important; border-color: #B5DDA8 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-baseColor--link {color: #B5DDA8 !important;}
.u-tintSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--darken:hover,.u-tintSpectrum .u-baseColor--link.link--darken:focus,.u-tintSpectrum .u-baseColor--link.link--darken:active {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--dark {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:active {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--link.link--darker {color: #F3FFEA !important;}
.u-tintSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: #8ABF7C;}
.u-tintSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: #8ABF7C;}
.u-tintSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: #8ABF7C;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: #458C39 !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: #5D9E50 !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: #8ABF7C !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: #B5DDA8 !important;}
.u-tintSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: #F3FFEA !important;}
.u-tintSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--borderLight {border-color: #8ABF7C !important;}
.u-tintSpectrum .u-accentColor--borderNormal {border-color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--borderDark {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--iconLight .svgIcon,.u-tintSpectrum .u-accentColor--iconLight.svgIcon {fill: #8ABF7C !important;}
.u-tintSpectrum .u-accentColor--iconNormal .svgIcon,.u-tintSpectrum .u-accentColor--iconNormal.svgIcon {fill: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--iconDark .svgIcon,.u-tintSpectrum .u-accentColor--iconDark.svgIcon {fill: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--textNormal {color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--hoverTextNormal:hover {color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--textDark {color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--backgroundLight {background-color: #8ABF7C !important;}
.u-tintSpectrum .u-accentColor--backgroundNormal {background-color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--backgroundDark {background-color: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--buttonDark {border-color: #DFF8D4 !important; color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--buttonDark:hover {border-color: #F3FFEA !important;}
.u-tintSpectrum .u-accentColor--buttonDark .icon:before,.u-tintSpectrum .u-accentColor--buttonDark .svgIcon{color: #DFF8D4 !important; fill: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: #B5DDA8 !important; color: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal:hover {border-color: #DFF8D4 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal .icon:before,.u-tintSpectrum .u-accentColor--buttonNormal .svgIcon{color: #B5DDA8 !important; fill: #B5DDA8 !important;}
.u-tintSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-tintSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-accentColor--buttonDark.button--filled,.u-tintSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-tintSpectrum .u-accentColor--fillWhenActive.is-active {background-color: #DFF8D4 !important; border-color: #DFF8D4 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-tintSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: #B5DDA8 !important; border-color: #B5DDA8 !important; color: rgba(0, 100, 0, 1) !important; fill: rgba(0, 100, 0, 1) !important;}
.u-tintSpectrum .postArticle.is-withAccentColors .markup--user,.u-tintSpectrum .postArticle.is-withAccentColors .markup--query {color: #B5DDA8 !important;}
.u-accentColor--highlightFaint {background-color: rgba(222, 250, 211, 1) !important;}
.u-accentColor--highlightStrong.is-active .svgIcon {fill: rgba(172, 246, 153, 1) !important;}
.postArticle.is-withAccentColors .markup--quote.is-other {background-color: rgba(222, 250, 211, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-other {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(222, 250, 211, 1), rgba(222, 250, 211, 1));}
.postArticle.is-withAccentColors .markup--quote.is-me {background-color: rgba(195, 248, 179, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-me {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(195, 248, 179, 1), rgba(195, 248, 179, 1));}
.postArticle.is-withAccentColors .markup--quote.is-targeted {background-color: rgba(172, 246, 153, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-targeted {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(172, 246, 153, 1), rgba(172, 246, 153, 1));}
.postArticle.is-withAccentColors .markup--quote.is-selected {background-color: rgba(172, 246, 153, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-selected {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(172, 246, 153, 1), rgba(172, 246, 153, 1));}
.postArticle.is-withAccentColors .markup--highlight {background-color: rgba(172, 246, 153, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--highlight {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(172, 246, 153, 1), rgba(172, 246, 153, 1));}</style>
     <style class="js-collectionStyleConstant">.u-imageBgColor {background-color: rgba(0, 0, 0, 0.24705882352941178);}
.u-imageSpectrum .u-baseColor--borderLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-baseColor--borderNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-baseColor--borderDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--iconLight .svgIcon,.u-imageSpectrum .u-baseColor--iconLight.svgIcon {fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--iconNormal .svgIcon,.u-imageSpectrum .u-baseColor--iconNormal.svgIcon {fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--iconDark .svgIcon,.u-imageSpectrum .u-baseColor--iconDark.svgIcon {fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textNormal {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textDark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textDarker {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--backgroundLight {background-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-baseColor--backgroundNormal {background-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--backgroundDark {background-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important; color: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--buttonLight:hover {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-baseColor--buttonLight .icon:before,.u-imageSpectrum .u-baseColor--buttonLight .svgIcon {color: rgba(255, 255, 255, 0.8) !important; fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--buttonDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonDark:hover {border-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonDark .icon:before,.u-imageSpectrum .u-baseColor--buttonDark .svgIcon {color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important; color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal:hover {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal .icon:before,.u-imageSpectrum .u-baseColor--buttonNormal .svgIcon {color: rgba(255, 255, 255, 0.9490196078431372) !important; fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonDark.button--filled,.u-imageSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: rgba(255, 255, 255, 1) !important; border-color: rgba(255, 255, 255, 1) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal.button--filled,.u-imageSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: rgba(255, 255, 255, 0.9490196078431372) !important; border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-baseColor--link {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--darken:hover,.u-imageSpectrum .u-baseColor--link.link--darken:focus,.u-imageSpectrum .u-baseColor--link.link--darken:active {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--dark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:active {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--darker {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: rgba(255, 255, 255, 0.4) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: rgba(255, 255, 255, 0.4980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--borderLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-accentColor--borderNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-accentColor--borderDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--iconLight .svgIcon,.u-imageSpectrum .u-accentColor--iconLight.svgIcon {fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-accentColor--iconNormal .svgIcon,.u-imageSpectrum .u-accentColor--iconNormal.svgIcon {fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--iconDark .svgIcon,.u-imageSpectrum .u-accentColor--iconDark.svgIcon {fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--textNormal {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--hoverTextNormal:hover {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--textDark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--backgroundLight {background-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-accentColor--backgroundNormal {background-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--backgroundDark {background-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark:hover {border-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark .icon:before,.u-imageSpectrum .u-accentColor--buttonDark .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: rgba(255, 255, 255, 0.8980392156862745) !important; color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal:hover {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal .icon:before,.u-imageSpectrum .u-accentColor--buttonNormal .svgIcon{color: rgba(255, 255, 255, 0.9490196078431372) !important; fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-imageSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-accentColor--buttonDark.button--filled,.u-imageSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-imageSpectrum .u-accentColor--fillWhenActive.is-active {background-color: rgba(255, 255, 255, 1) !important; border-color: rgba(255, 255, 255, 1) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-imageSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: rgba(255, 255, 255, 0.9490196078431372) !important; border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .postArticle.is-withAccentColors .markup--user,.u-imageSpectrum .postArticle.is-withAccentColors .markup--query {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--highlightFaint {background-color: rgba(255, 255, 255, 0.2) !important;}
.u-imageSpectrum .u-accentColor--highlightStrong.is-active .svgIcon {fill: rgba(255, 255, 255, 0.6) !important;}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-other {background-color: rgba(255, 255, 255, 0.2) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-other {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.2));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-me {background-color: rgba(255, 255, 255, 0.4) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-me {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-targeted {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-targeted {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-selected {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-selected {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--highlight {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--highlight {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}.u-resetSpectrum .u-tintBgColor {background-color: rgba(255, 255, 255, 1) !important;}.u-resetSpectrum .u-tintBgColor .u-fadeLeft:before {background-image: linear-gradient(to right, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 0) 100%) !important;}.u-resetSpectrum .u-tintBgColor .u-fadeRight:after {background-image: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%) !important;}
.u-resetSpectrum .u-baseColor--borderLight {border-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--borderNormal {border-color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--borderDark {border-color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--iconLight .svgIcon,.u-resetSpectrum .u-baseColor--iconLight.svgIcon {fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--iconNormal .svgIcon,.u-resetSpectrum .u-baseColor--iconNormal.svgIcon {fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--iconDark .svgIcon,.u-resetSpectrum .u-baseColor--iconDark.svgIcon {fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textNormal {color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textDark {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textDarker {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--backgroundLight {background-color: rgba(0, 0, 0, 0.09803921568627451) !important;}
.u-resetSpectrum .u-baseColor--backgroundNormal {background-color: rgba(0, 0, 0, 0.2) !important;}
.u-resetSpectrum .u-baseColor--backgroundDark {background-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight {border-color: rgba(0, 0, 0, 0.2980392156862745) !important; color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight:hover {border-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight .icon:before,.u-resetSpectrum .u-baseColor--buttonLight .svgIcon {color: rgba(0, 0, 0, 0.2980392156862745) !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonDark {border-color: rgba(0, 0, 0, 0.6) !important; color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonDark:hover {border-color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--buttonDark .icon:before,.u-resetSpectrum .u-baseColor--buttonDark .svgIcon {color: rgba(0, 0, 0, 0.6) !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal {border-color: rgba(0, 0, 0, 0.4980392156862745) !important; color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal:hover {border-color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal .icon:before,.u-resetSpectrum .u-baseColor--buttonNormal .svgIcon {color: rgba(0, 0, 0, 0.4980392156862745) !important; fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonDark.button--filled,.u-resetSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: rgba(0, 0, 0, 0.2980392156862745) !important; border-color: rgba(0, 0, 0, 0.2980392156862745) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal.button--filled,.u-resetSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: rgba(0, 0, 0, 0.2) !important; border-color: rgba(0, 0, 0, 0.2) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-baseColor--link {color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--darken:hover,.u-resetSpectrum .u-baseColor--link.link--darken:focus,.u-resetSpectrum .u-baseColor--link.link--darken:active {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--dark {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:active {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--link.link--darker {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: rgba(0, 0, 0, 0.2) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: rgba(0, 0, 0, 0.4) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-accentColor--borderLight {border-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--borderNormal {border-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--borderDark {border-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--iconLight .svgIcon,.u-resetSpectrum .u-accentColor--iconLight.svgIcon {fill: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--iconNormal .svgIcon,.u-resetSpectrum .u-accentColor--iconNormal.svgIcon {fill: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--iconDark .svgIcon,.u-resetSpectrum .u-accentColor--iconDark.svgIcon {fill: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--textNormal {color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--hoverTextNormal:hover {color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--textDark {color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundLight {background-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundNormal {background-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundDark {background-color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark {border-color: rgba(0, 171, 107, 1) !important; color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark:hover {border-color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark .icon:before,.u-resetSpectrum .u-accentColor--buttonDark .svgIcon{color: rgba(28, 153, 99, 1) !important; fill: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: rgba(2, 184, 117, 1) !important; color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal:hover {border-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal .icon:before,.u-resetSpectrum .u-accentColor--buttonNormal .svgIcon{color: rgba(0, 171, 107, 1) !important; fill: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-resetSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark.button--filled,.u-resetSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-resetSpectrum .u-accentColor--fillWhenActive.is-active {background-color: rgba(28, 153, 99, 1) !important; border-color: rgba(28, 153, 99, 1) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-resetSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: rgba(0, 171, 107, 1) !important; border-color: rgba(0, 171, 107, 1) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .postArticle.is-withAccentColors .markup--user,.u-resetSpectrum .postArticle.is-withAccentColors .markup--query {color: rgba(0, 171, 107, 1) !important;}</style>
    </div>
   </div>
  </div>
  <div class="loadingBar"></div>
  <script>// <![CDATA[
window["obvInit"] = function (opt_embedded) {window["obvInit"]["embedded"] = opt_embedded; window["obvInit"]["ready"] = true;}
// ]]></script>
  <script>// <![CDATA[
var GLOBALS = {"audioUrl":"https://d1fcbxp97j4nb2.cloudfront.net","baseUrl":"https://medium.freecodecamp.org","buildLabel":"30638-a80936a","currentUser":{"userId":"lo_9ce0c0f734f","isVerified":false,"subscriberEmail":"","hasPastMemberships":false,"isEnrolledInHightower":false,"isEligibleForHightower":false},"currentUserHasUnverifiedEmail":false,"isAuthenticated":false,"isCurrentUserVerified":false,"mediumTwitterScreenName":"medium","miroUrl":"https://cdn-images-1.medium.com","moduleUrls":{"base":"https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.LlQTJsqxzBKNE5_Waz_Olg.js","common-async":"https://cdn-static-1.medium.com/_/fp/gen-js/main-common-async.bundle.lPMw1fqY-MbzmJiPn21ZEg.js","home-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-home-screens.bundle.rjAdrN8hiy8LJTmX-zkQtg.js","misc-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-misc-screens.bundle.wxY8rWSrr9kWDpFoylLRXQ.js","notes":"https://cdn-static-1.medium.com/_/fp/gen-js/main-notes.bundle.UmS-2vco-MnrBEauwLXykA.js","payments":"https://cdn-static-1.medium.com/_/fp/gen-js/main-payments.bundle.wXXGZ5FDGEa-rsJQU5tC7Q.js","posters":"https://cdn-static-1.medium.com/_/fp/gen-js/main-posters.bundle.FxSkrZ0-dqo5ylCsFLQrDQ.js","pubs":"https://cdn-static-1.medium.com/_/fp/gen-js/main-pubs.bundle.i71piGpaVS2nC4z3-ojrhQ.js","stats":"https://cdn-static-1.medium.com/_/fp/gen-js/main-stats.bundle.D8O3DxBsbnP9GWl4kwKxUw.js"},"previewConfig":{"weightThreshold":1,"weightImageParagraph":0.51,"weightIframeParagraph":0.8,"weightTextParagraph":0.08,"weightEmptyParagraph":0,"weightP":0.003,"weightH":0.005,"weightBq":0.003,"minPTextLength":60,"truncateBoundaryChars":20,"detectTitle":true,"detectTitleLevThreshold":0.15},"productName":"Medium","supportsEdit":true,"termsUrl":"//medium.com/policy/9db0094a1e0f","textshotHost":"textshot.medium.com","transactionId":"1505672797614:289828836003","useragent":{"browser":"chrome","family":"chrome","os":"windows","version":45,"supportsDesktopEdit":true,"supportsInteract":true,"supportsView":true,"isMobile":false,"isTablet":false,"isNative":false,"supportsFileAPI":true,"isTier1":true,"clientVersion":"","unknownParagraphsBad":false,"clientChannel":"","supportsRealScrollEvents":true,"supportsVhUnits":true,"ruinsViewportSections":false,"supportsHtml5Video":true,"supportsMagicUnderlines":true,"isWebView":false,"isFacebookWebView":false,"supportsProgressiveMedia":true,"supportsPromotedPosts":true,"isBot":false,"isNativeIphone":false,"supportsCssVariables":false,"supportsVideoSections":false,"emojiSupportLevel":1,"supportsScrollableMetabar":true},"variants":{"allow_access":true,"allow_signup":true,"allow_test_auth":"disallow","signin_services":"twitter,facebook,google,email,google-fastidv","signup_services":"twitter,facebook,google,email,google-fastidv","android_rating_prompt_recommend_threshold":5,"google_sign_in_android":true,"enable_onboarding":true,"ios_custom_miro_url":"https://cdn-images-1.medium.com","reengagement_notification_duration":3,"enable_adsnative_integration":true,"browsable_stream_config_bucket":"curated-topics","ios_small_post_preview_truncation_length":5.5,"ios_large_post_preview_truncation_length":5.5,"disable_ios_catalog_badging":true,"enable_series_creation":true,"enable_your_series_pages":true,"enable_productionized_series":true,"enable_dedicated_series_tab_api_ios":true,"enable_clap_milestone_notifications":true,"enable_series_stats_page":true,"enable_post_import":true,"enable_sponsored_post_labelling":true,"enable_logged_in_follow_on_collection_post":true,"promoted_story_placement_locations":"POST_PAGE_FOOTER,POST_PAGE_BELOW_POST_ACTIONS","enable_chunky_home_page":true,"enable_export_members":true,"enable_series_card_background_creation":true,"enable_ios_onboarding_notifications":true,"available_membership_plans":"60e220181034","available_monthly_plan":"60e220181034","available_annual_plan":"2c754bcc2995","enable_annual_membership":true,"double_write_post_from_followed_tag_items":true,"enable_sms":true,"enable_series_in_user_profiles":true,"enable_new_logged_out_bento_operation":true,"is_not_medium_subscriber":true,"subs_landing_copy_experiments":"short","logged_out_homepage_promo":"content","daily_digest_topics":true,"enable_emoji_in_editor":true,"enable_glyph":true,"glyph_font_set":"m","enable_branding":true,"enable_upsell_tracking":true,"enable_post_page_signin":true,"post_page_signin_copy_count":true,"enable_sequence_carousel":true,"enable_multirecommends":true,"enable_updated_homepage_order":true,"enable_auto_grid_on_new_from_your_network":true,"enable_unbundled_you_might_like":true,"enable_noteworthy_promo":true,"enable_interest_graph_vtwo_topic_suggestions":true,"enable_popchunks":true,"enable_hightower":true,"enable_user_post_metering":true,"max_premium_content_per_user_under_metering":3,"enable_topic_writer_onboarding":true,"enable_hightower_onboarding_blinker":true,"enable_direct_signin":true,"enable_strong_graph_chp_reorder":true},"xsrfToken":"","iosAppId":"828256236","supportEmail":"yourfriends@medium.com","fp":{"/icons/favicon.svg":"https://cdn-static-1.medium.com/_/fp/icons/favicon.KjTfUJo7yJH_fCoUzzH3cg.svg","/icons/favicon-dev-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-dev-editor.YKKRxBO8EMvIqhyCwIiJeQ.ico","/icons/favicon-hatch-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-hatch-editor.BuEyHIqlyh2s_XEk4Rl32Q.ico","/icons/favicon-medium-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-medium-editor.PiakrZWB7Yb80quUVQWM6g.ico"},"authBaseUrl":"https://medium.com","imageUploadSizeMb":25,"isAuthDomainRequest":false,"domainCollectionSlug":"free-code-camp","algoliaApiEndpoint":"https://MQ57UUUQZ2-dsn.algolia.net","algoliaAppId":"MQ57UUUQZ2","algoliaSearchOnlyApiKey":"394474ced050e3911ae2249ecc774921","iosAppStoreUrl":"https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8","iosAppLinkBaseUrl":"medium:","algoliaIndexPrefix":"medium_","androidPlayStoreUrl":"https://play.google.com/store/apps/details?id=com.medium.reader","googleClientId":"216296035834-k1k6qe060s2tp2a2jam4ljdcms00sttg.apps.googleusercontent.com","androidPackage":"com.medium.reader","androidPlayStoreMarketScheme":"market://details?id=com.medium.reader","googleAuthUri":"https://accounts.google.com/o/oauth2/auth","androidScheme":"medium","layoutData":{"useDynamicScripts":false,"googleAnalyticsTrackingCode":"UA-24232453-2","jsShivUrl":"https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js","useDynamicCss":false,"faviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico","faviconImageId":"1*W0nmth_X8nFKjn6BZ388UQ.png","fontSets":[{"id":8,"url":"https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m.css"}],"editorFaviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium-editor.3Y6xpZ-0FSdWDnPM3hSBIA.ico","glyphUrl":"https://glyph.medium.com"},"authBaseUrlRev":"moc.muidem//:sptth","isDnt":false,"stripePublishableKey":"pk_live_7FReX44VnNIInZwrIIx6ghjl","archiveUploadSizeMb":100,"paymentData":{"currencies":{"1":{"label":"US Dollar","external":"usd"}},"countries":{"1":{"label":"United States of America","external":"US"}},"accountTypes":{"1":{"label":"Individual","external":"individual"},"2":{"label":"Company","external":"company"}}},"previewConfig2":{"weightThreshold":1,"weightImageParagraph":0.05,"raiseImage":true,"enforceHeaderHierarchy":true,"isImageInsetRight":true},"isAmp":false,"iosScheme":"medium","isSwBoot":false,"lightstep":{"accessToken":"ce5be895bef60919541332990ac9fef2","carrier":"{\"ot-tracer-spanid\":\"3c6fd3e026cd5966\",\"ot-tracer-traceid\":\"741a22bd21b9f3fb\",\"ot-tracer-sampled\":\"true\"}","host":"collector-medium.lightstep.com"},"facebook":{"key":"542599432471018","namespace":"medium-com","scope":{"default":["public_profile","email","user_friends"],"connect":["public_profile","email","user_friends"],"login":["public_profile","email","user_friends"],"share":["public_profile","email","user_friends","publish_actions"]}},"mailingListArchiveUploadSizeMb":2,"availableMembershipPlans":["60e220181034"],"editorsPicksTopicId":"3985d2a191c5","popularOnMediumTopicId":"9d34e48ecf94","memberContentTopicId":"13d7efd82fb2","audioContentTopicId":"3792abbd134","brandedSequenceId":"7d337ddf1941","isDoNotAuth":false,"goldfinchUrl":"https://goldfinch.medium.com","buggle":{"url":"https://buggle.medium.com","videoUrl":"https://cdn-videos-1.medium.com","audioUrl":"https://cdn-audio-1.medium.com","accessToken":"pJN6XGc43dDJLHJQ2ixamOFHUnAgKvhp"}}
// ]]></script>
  <script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.LlQTJsqxzBKNE5_Waz_Olg.js" async></script>
  <script>// <![CDATA[
window["obvInit"]({"value":{"id":"9f811a92bb52","versionId":"79ea25fa6a06","creatorId":"d1aeac7eadae","creator":{"userId":"d1aeac7eadae","name":"Adnan Rahi?","username":"adnanrahic","createdAt":1471380289035,"lastPostCreatedAt":1505651999688,"imageId":"1*_zEH2290dCCejDlyJghqqw.jpeg","backgroundImageId":"","bio":"Software engineer @bookvar_co. Coding educator @ACADEMY387. Campsite leader @freeCodeCamp Sarajevo.","twitterScreenName":"adnanrahic","socialStats":{"userId":"d1aeac7eadae","usersFollowedCount":154,"usersFollowedByCount":597,"type":"SocialStats"},"social":{"userId":"lo_9ce0c0f734f","targetUserId":"d1aeac7eadae","type":"Social"},"facebookAccountId":"625773520934076","allowNotes":1,"type":"User"},"homeCollection":{"id":"336d898217ee","name":"freeCodeCamp","slug":"free-code-camp","tags":["TECHNOLOGY","DESIGN","TECH","STARTUP","PRODUCTIVITY"],"creatorId":"8b318225c16a","description":"Our community publishes stories worth reading on development, design, and data science.","shortDescription":"Our community publishes stories worth reading on…","image":{"imageId":"1*MotlWcSa2n6FrOx3ul89kw.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":322028,"activeAt":1505618828667},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*wViBNJ1o9rM5p6b-gf3vxg.png","filter":"","backgroundSize":"","originalWidth":600,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"freecodecamp","facebookPageName":"freecodecamp","publicEmail":"quincy@freecodecamp.com","collectionMastheadId":"af94c9c16d4","domain":"medium.freecodecamp.org","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4}},{"type":1,"postListMetadata":{"source":3,"layout":6,"number":1,"postIds":["707453a79ee8"]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":25,"postIds":[]}},{"type":1,"postListMetadata":{"source":2,"layout":6,"number":25,"postIds":[],"sectionHeader":"Trending"}}],"tintColor":"#FF006400","lightText":true,"favicon":{"imageId":"1*B6_f-_SxscJ9FCuIjOrQAQ.jpeg","filter":"","backgroundSize":"","originalWidth":657,"originalHeight":654,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF429A35","point":0},{"color":"#FF408F33","point":0.1},{"color":"#FF3E8432","point":0.2},{"color":"#FF3B7830","point":0.3},{"color":"#FF376C2D","point":0.4},{"color":"#FF33602A","point":0.5},{"color":"#FF2E5426","point":0.6},{"color":"#FF284721","point":0.7},{"color":"#FF223A1C","point":0.8},{"color":"#FF1A2C15","point":0.9},{"color":"#FF111E0D","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF006400","point":0},{"color":"#FF2A7920","point":0.1},{"color":"#FF458C39","point":0.2},{"color":"#FF5D9E50","point":0.3},{"color":"#FF74AF66","point":0.4},{"color":"#FF8ABF7C","point":0.5},{"color":"#FFA0CE92","point":0.6},{"color":"#FFB5DDA8","point":0.7},{"color":"#FFCAEBBE","point":0.8},{"color":"#FFDFF8D4","point":0.9},{"color":"#FFF3FFEA","point":1}],"backgroundColor":"#FF006400"},"highlightSpectrum":{"colorPoints":[{"color":"#FFE3FBD9","point":0},{"color":"#FFDEFAD3","point":0.1},{"color":"#FFD9FACC","point":0.2},{"color":"#FFD3F9C6","point":0.3},{"color":"#FFCEF9C0","point":0.4},{"color":"#FFC9F8B9","point":0.5},{"color":"#FFC3F8B3","point":0.6},{"color":"#FFBDF7AD","point":0.7},{"color":"#FFB8F7A6","point":0.8},{"color":"#FFB2F6A0","point":0.9},{"color":"#FFACF699","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":1,"title":"Dev","tagSlug":"web-development","url":"https://medium.freecodecamp.org/tagged/web-development","source":"tagSlug"},{"type":1,"title":"Design","tagSlug":"design","url":"https://medium.freecodecamp.org/tagged/design","source":"tagSlug"},{"type":1,"title":"Data","tagSlug":"data-science","url":"https://medium.freecodecamp.org/tagged/data-science","source":"tagSlug"},{"type":3,"title":"Learn to code for free","url":"https://freecodecamp.com?ref=mn"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-55446531-3","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4},"type":"Collection"},"homeCollectionId":"336d898217ee","title":"Securing Node.js RESTful APIs with JSON Web Tokens","detectedLanguage":"en","latestVersion":"79ea25fa6a06","latestPublishedVersion":"79ea25fa6a06","hasUnpublishedEdits":false,"latestRev":2957,"createdAt":1501866438971,"updatedAt":1505641207235,"acceptedAt":0,"firstPublishedAt":1504554779300,"latestPublishedAt":1504714083698,"vote":false,"experimentalCss":"","displayAuthor":"","content":{"subtitle":"Have you ever wondered how authentication works? What’s behind all the complexity and abstractions. Actually, nothing special. It’s a way…","bodyModel":{"paragraphs":[{"name":"7b8b","type":4,"text":"","markups":[],"layout":5,"metadata":{"id":"1*0ABaK4SrXGUnXgmXqMkZtA.png","originalWidth":1920,"originalHeight":826}},{"name":"eb03","type":3,"text":"Securing Node.js RESTful APIs with JSON Web Tokens","markups":[]},{"name":"2eea","type":1,"text":"Have you ever wondered how authentication works? What’s behind all the complexity and abstractions. Actually, nothing special. It’s a way of encrypting a value, in turn creating a unique token that users use as an identifier. This token verifies your identity. It can authenticate who you are, and authorize various resources you have access to. If you by any chance don’t know any of these keywords, be patient, I’ll explain everything below.","markups":[]},{"name":"9494","type":1,"text":"This will be a step by step tutorial of how to add token based authentication to an existing REST API. The authentication strategy in question is JWT (JSON Web Token). If that doesn’t tell you much, it’s fine. It was just as strange for me when I first heard the term.","markups":[]},{"name":"8bbd","type":1,"text":"What does JWT actually mean in a down to earth point of view? Let’s break down what the official definition states:","markups":[]},{"name":"9037","type":7,"text":"JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.\n- Internet Engineering Task Force (IETF)","markups":[{"type":3,"start":418,"end":456,"href":"https://tools.ietf.org/html/rfc7519","title":"","rel":"","anchorType":0},{"type":1,"start":418,"end":456}]},{"name":"83b8","type":1,"text":"That was a mouthful. Let’s translate that to English. A JWT is an encrypted string of characters which is safe to send between two computers. The token represents a value that is accessible only by the computer that has access to the secret key with which it was encrypted. Simple enough, right?","markups":[]},{"name":"aaa6","type":1,"text":"What does this look like like in real life? Let’s say a user wants to sign in to their account. They send a request with the required credentials such as email and password to the server. The server checks to see if the credentials are valid. If they are, the server creates a token using the desired payload and a secret key. This string of characters that results from the encryption is called a token. Then the server sends it back to the client. The client, in turn, saves the token to use it in every other request the user will send. The practice of adding a token to the request headers is as way of authorizing the user to access resources. This is a practical example of how JWT works.","markups":[]},{"name":"8224","type":1,"text":"Okay, that’s enough talk! The rest of this tutorial will be coding, and I’d love if you would follow along and code alongside me, as we progress. Every snippet of code will be followed by an explanation. I believe the best way of understanding it correctly will be to code it yourself along the way.","markups":[]},{"name":"3408","type":1,"text":"Before I begin, there are some things you need to know about Node.js and some EcmaScript standards I’ll be using. I will not be using ES6, as it is not as beginner friendly as traditional JavaScript. But, I will expect you already know how to build a RESTful API with Node.js. If not, you can take a detour and check this out before proceeding.","markups":[{"type":3,"start":311,"end":325,"href":"https://hackernoon.com/restful-api-design-with-node-js-26ccf66eab09","title":"","rel":"","anchorType":0}]},{"name":"d005","type":1,"text":"Also, the whole demo is on GitHub if you wish to see it in its entirety.","markups":[{"type":3,"start":10,"end":33,"href":"https://github.com/adnanrahic/securing-restful-apis-with-jwt","title":"","rel":"","anchorType":0}]},{"name":"12fc","type":3,"text":"Let’s start writing some code, shall we?","markups":[]},{"name":"c440","type":1,"text":"Well, not yet actually. We need to set up the environment first. The code will have to wait at least a couple more minutes. This part is boring so to get up and running quick we’ll clone the repository from the tutorial above. Open up a terminal window or command line prompt and run this command:","markups":[]},{"name":"080c","type":8,"text":"git clone https://github.com/adnanrahic/nodejs-restful-api.git","markups":[{"type":3,"start":10,"end":62,"href":"https://github.com/adnanrahic/nodejs-restful-api.git","title":"","rel":"nofollow","anchorType":0}]},{"name":"21a0","type":1,"text":"You’ll see a folder appear, open it up. Let’s take a look at the folder structure.","markups":[]},{"name":"c7b5","type":8,"text":"\x3e user\n  - User.js\n  - UserController.js\n- db.js\n- server.js\n- app.js\n- package.json","markups":[]},{"name":"0cfc","type":1,"text":"We have a user folder with a model and a controller, and basic CRUD already implemented. Our app.js contains the basic configuration. The db.js makes sure the application connects to the database. The server.js makes sure our server spins up.","markups":[{"type":1,"start":93,"end":100},{"type":1,"start":138,"end":143},{"type":1,"start":200,"end":210}]},{"name":"31fe","type":1,"text":"Go ahead and install all required Node modules. Switch back to your terminal window. Make sure you’re in the folder named ‘nodejs-restful-api’ and run npm install. Wait a second or two for the modules to install. Now you need to add a database connection string in db.js.","markups":[{"type":10,"start":151,"end":162},{"type":1,"start":123,"end":141},{"type":1,"start":265,"end":270},{"type":2,"start":122,"end":123},{"type":2,"start":141,"end":142}]},{"name":"3113","type":1,"text":"Jump over to mLab, create an account if you do not already have one, and open up your database dashboard. Create a new database, name it as you wish and proceed to its configuration page. Add a database user to your database and copy the connection string from the dashboard to your code.","markups":[{"type":3,"start":13,"end":17,"href":"https://mlab.com/","title":"","rel":"","anchorType":0}]},{"name":"e798","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*a66N4FzWCg7FOmFL4USIeQ.png","originalWidth":1445,"originalHeight":625}},{"name":"8df3","type":1,"text":"All you need to do now is to change the placeholder values for \x3cdbuser\x3e and \x3cdbpassword\x3e. Replace them with the username and password of the user you created for the database. A detailed step by step explanation of this process can be found in the tutorial linked above.","markups":[{"type":10,"start":63,"end":71},{"type":10,"start":76,"end":88},{"type":3,"start":244,"end":269,"href":"https://hackernoon.com/restful-api-design-with-node-js-26ccf66eab09","title":"","rel":"","anchorType":0}]},{"name":"2ca3","type":1,"text":"Let’s say the user I created for the database is named wally with a password of theflashisawesome. Having that in mind, the db.js file should now look something like this:","markups":[{"type":10,"start":55,"end":60},{"type":10,"start":80,"end":97},{"type":1,"start":124,"end":129}]},{"name":"85a4","type":8,"text":"var mongoose = require('mongoose');\nmongoose.connect('mongodb://wally:theflashisawesome@ds147072.mlab.com:47072/securing-rest-apis-with-jwt', { useMongoClient: true });","markups":[]},{"name":"e1ae","type":1,"text":"Go ahead and spin up the server, back in your terminal window type node server.js. You should see Express server listening on port 3000 get logged to the terminal.","markups":[{"type":10,"start":67,"end":81},{"type":10,"start":98,"end":135}]},{"name":"a155","type":3,"text":"Finally, some code.","markups":[]},{"name":"784c","type":1,"text":"Let’s start out by brainstorming about what we want to build. First of all we want to add user authentication. Meaning, implementing a system for registering and logging users in.","markups":[]},{"name":"0d9e","type":1,"text":"Secondly, we want to add authorization. The act of granting users the permission to access certain resources on our REST API.","markups":[]},{"name":"6d55","type":1,"text":"Start out by adding a new file in the root directory of the project. Give it a name of config.js. Here you’ll put configuration settings for the application. Everything we need at the moment is just to define a secret key for our JSON Web Token.","markups":[{"type":1,"start":87,"end":96},{"type":2,"start":96,"end":98}]},{"name":"3a56","type":1,"text":"Disclaimer: Have in mind, under no circumstances should you ever, (EVER!) have your secret key publicly visible like this. Always put all of your keys in environment variables! I’m only writing it like this for demo purposes.","markups":[{"type":1,"start":0,"end":10}]},{"name":"7aaf","type":8,"text":"// config.js\nmodule.exports = {\n  'secret': 'supersecret'\n};","markups":[]},{"name":"aee5","type":1,"text":"With this added you’re ready to start adding the authentication logic. Create a folder named auth and start out by adding a file named AuthController.js. This controller will be home for our authentication logic.","markups":[{"type":1,"start":93,"end":97},{"type":1,"start":135,"end":152}]},{"name":"8746","type":1,"text":"Add this piece of code to the top of the AuthController.js.","markups":[{"type":1,"start":41,"end":58},{"type":2,"start":58,"end":59}]},{"name":"6cd7","type":8,"text":"// AuthController.js","markups":[]},{"name":"d807","type":8,"text":"var express = require('express');\nvar router = express.Router();\nvar bodyParser = require('body-parser');\nrouter.use(bodyParser.urlencoded({ extended: false }));\nrouter.use(bodyParser.json());\nvar User = require('../user/User');","markups":[]},{"name":"552b","type":1,"text":"Now you’re ready to add the modules for using JSON Web Tokens and encrypting passwords. Paste this code into the AuthController.js:","markups":[{"type":3,"start":46,"end":61,"href":"https://github.com/auth0/node-jsonwebtoken","title":"","rel":"","anchorType":0},{"type":3,"start":66,"end":86,"href":"https://github.com/dcodeIO/bcrypt.js","title":"","rel":"","anchorType":0},{"type":1,"start":113,"end":130}]},{"name":"1fdd","type":8,"text":"var jwt = require('jsonwebtoken');\nvar bcrypt = require('bcryptjs');\nvar config = require('../config');","markups":[]},{"name":"5657","type":1,"text":"Open up a terminal window in your project folder and install the following modules:","markups":[]},{"name":"7d7c","type":8,"text":"npm install jsonwebtoken --save\nnpm install bcryptjs --save","markups":[]},{"name":"34d8","type":1,"text":"That’s all the modules we need to implement our desired authentication. Now you’re ready to create a /register endpoint. Add this piece of code to your AuthController.js:","markups":[{"type":10,"start":101,"end":110},{"type":1,"start":152,"end":169}]},{"name":"cba0","type":8,"text":"router.post('/register', function(req, res) {\n  \n  var hashedPassword = bcrypt.hashSync(req.body.password, 8);\n  \n  User.create({\n    name : req.body.name,\n    email : req.body.email,\n    password : hashedPassword\n  },\n  function (err, user) {\n    if (err) return res.status(500).send(\"There was a problem registering the user.\")","markups":[]},{"name":"932f","type":8,"text":"    // create a token\n    var token = jwt.sign({ id: user._id }, config.secret, {\n      expiresIn: 86400 // expires in 24 hours\n    });","markups":[]},{"name":"2831","type":8,"text":"    res.status(200).send({ auth: true, token: token });\n  }); \n});","markups":[]},{"name":"aed6","type":1,"text":"Here we’re expecting the user to send us three values, a name, an email and a password. We’re immediately going to take the password and encrypt it with Bcrypt’s hashing method. Then take the hashed password, include name and email and create a new user. After the user has been successfully created, we’re at ease to create a token for that user.","markups":[]},{"name":"d191","type":1,"text":"The jwt.sign() method takes a payload and the secret key defined in config.js as parameters. It creates a unique string of characters representing the payload. In our case, the payload is an object containing only the id of the user. Let’s write a piece of code to get the user id based on the token we got back from the register endpoint.","markups":[{"type":10,"start":4,"end":14},{"type":1,"start":68,"end":78}]},{"name":"b494","type":8,"text":"router.get('/me', function(req, res) {","markups":[]},{"name":"3257","type":8,"text":"  var token = req.headers['x-access-token'];\n  if (!token) return res.status(401).send({ auth: false, message: 'No token provided.' });\n  \n  jwt.verify(token, config.secret, function(err, decoded) {\n    if (err) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n    \n    res.status(200).send(decoded);\n  });\n});","markups":[]},{"name":"1bb2","type":1,"text":"Here we’re expecting the token be sent along with the request in the headers. The default name for a token in the headers of an HTTP request is x-access-token. If there is no token provided with the request the server sends back an error. To be more precise, an 401 unauthorized status with a response message of ‘No token provided’. If the token exists, the jwt.verify() method will be called. This method decodes the token making it possible to view the original payload. We’ll handle errors if there are any and if there are not, send back the decoded value as the response.","markups":[{"type":10,"start":144,"end":158},{"type":10,"start":262,"end":278},{"type":10,"start":359,"end":371},{"type":1,"start":314,"end":331},{"type":2,"start":313,"end":314},{"type":2,"start":331,"end":332}]},{"name":"0f6c","type":1,"text":"Finally we need to add the route to the AuthController.js in our main app.js file. First export the router from AuthController.js:","markups":[{"type":1,"start":40,"end":57},{"type":1,"start":70,"end":77},{"type":1,"start":112,"end":129}]},{"name":"8c18","type":8,"text":"// add this to the bottom of AuthController.js\nmodule.exports = router;","markups":[]},{"name":"4840","type":1,"text":"Then add a reference to the controller in the main app, right above where you exported the app.","markups":[]},{"name":"a0e3","type":8,"text":"// app.js\nvar AuthController = require('./auth/AuthController');\napp.use('/api/auth', AuthController);","markups":[]},{"name":"63a5","type":8,"text":"module.exports = app;","markups":[]},{"name":"f68e","type":3,"text":"Let’s test this out. Why not?","markups":[]},{"name":"6a50","type":1,"text":"Open up your REST API testing tool of choice, I use Postman or Insomnia, but any will do.","markups":[{"type":3,"start":52,"end":59,"href":"https://www.getpostman.com/postman","title":"","rel":"","anchorType":0},{"type":3,"start":63,"end":71,"href":"https://insomnia.rest/","title":"","rel":"","anchorType":0}]},{"name":"a90e","type":1,"text":"Go back to your terminal and run node server.js. If it is running, stop it, save all changes to you files, and run node server.js again.","markups":[{"type":10,"start":33,"end":47},{"type":10,"start":115,"end":129}]},{"name":"d9ad","type":1,"text":"Open up Postman and hit the register endpoint (/api/auth/register). Make sure to pick the POST method and x-www-form-url-encoded. Now, add some values. My user’s name is Mike and his password is ‘thisisasecretpassword’. That’s not the best password I’ve ever seen, to be honest, but it’ll do. Hit send!","markups":[{"type":10,"start":47,"end":65},{"type":10,"start":106,"end":128}]},{"name":"174c","type":4,"text":"/register","markups":[],"layout":1,"metadata":{"id":"1*VW8PuDYCd78cjlCWYLMJ5w.png","originalWidth":1918,"originalHeight":1054}},{"name":"7e96","type":1,"text":"See the response? The token is a long jumbled string. To try out the /api/auth/me endpoint, first copy the token. Change the URL to /me instead of /register, and the method to GET. Now you can add the token to the request header.","markups":[{"type":10,"start":69,"end":81},{"type":10,"start":132,"end":135},{"type":10,"start":147,"end":156}]},{"name":"ea7e","type":4,"text":"/me","markups":[],"layout":1,"metadata":{"id":"1*HqpzH4XhCxE8ocgVUwb4XA.png","originalWidth":1920,"originalHeight":1056}},{"name":"f915","type":1,"text":"Voilà! The token has been decoded into an object with an id field. Want to make sure that the id really belongs to Mike, the user we just created? Sure you do. Jump back into your code editor.","markups":[]},{"name":"d000","type":8,"text":"// in AuthController.js change this line\nres.status(200).send(decoded);","markups":[]},{"name":"7dfb","type":8,"text":"// to\nUser.findById(decoded.id, function (err, user) {\n  if (err) return res.status(500).send(\"There was a problem finding the user.\");\n  if (!user) return res.status(404).send(\"No user found.\");\n  \n  res.status(200).send(user);\n});","markups":[]},{"name":"3e04","type":1,"text":"Now when you send a request to the /me endpoint you’ll see:","markups":[{"type":10,"start":35,"end":38}]},{"name":"f8ab","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*wAH8NG9kFEIyTuzcZj85Cg.png","originalWidth":1920,"originalHeight":1056}},{"name":"a51a","type":1,"text":"The response now contains the whole user object! Cool! But, not good. The password should never be returned with the other data about the user. Let’s fix this. We can add a projection to the query and omit the password. Like this:","markups":[]},{"name":"1156","type":8,"text":"User.findById(decoded.id, \n  { password: 0 }, // projection\n  function (err, user) {\n    if (err) return res.status(500).send(\"There was a problem finding the user.\");\n    if (!user) return res.status(404).send(\"No user found.\");","markups":[]},{"name":"4a19","type":8,"text":"    res.status(200).send(user);\n});","markups":[]},{"name":"e856","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*P_ZOnm0SpQ5jwH7gcK44Ow.png","originalWidth":1920,"originalHeight":1056}},{"name":"fa93","type":1,"text":"That’s better, now we can see all values except the password. Mike’s looking good.","markups":[]},{"name":"84d8","type":3,"text":"Did someone say login?","markups":[]},{"name":"d33e","type":1,"text":"After implementing the registration, we should create a way for existing users to log in. Let’s think about it for a second. The register endpoint required us to create a user, hash a password, and issue a token. What will the login endpoint need us to implement? It should check if a user with the given email exists at all. But also check if the provided password matches the hashed password in the database. Only then will we want to issue a token. Add this to your AuthController.js.","markups":[{"type":1,"start":469,"end":486}]},{"name":"59b4","type":8,"text":"router.post('/login', function(req, res) {","markups":[]},{"name":"b098","type":8,"text":"  User.findOne({ email: req.body.email }, function (err, user) {\n    if (err) return res.status(500).send('Error on the server.');\n    if (!user) return res.status(404).send('No user found.');","markups":[]},{"name":"f787","type":8,"text":"    var passwordIsValid = bcrypt.compareSync(req.body.password, user.password);\n    if (!passwordIsValid) return res.status(401).send({ auth: false, token: null });","markups":[]},{"name":"0736","type":8,"text":"    var token = jwt.sign({ id: user._id }, config.secret, {\n      expiresIn: 86400 // expires in 24 hours\n    });","markups":[]},{"name":"78e8","type":8,"text":"    res.status(200).send({ auth: true, token: token });\n  });","markups":[]},{"name":"9346","type":8,"text":"});","markups":[]},{"name":"b67d","type":1,"text":"First of all we check if the user exists. Then using Bcrypt’s .compareSync() method we compare the password sent with the request to the password in the database. If they match we .sign() a token. That’s pretty much it. Let’s try it out.","markups":[{"type":10,"start":62,"end":76},{"type":10,"start":180,"end":187}]},{"name":"9317","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*KxM7Sz8bPrd6q9iwCr9f2w.png","originalWidth":1920,"originalHeight":1056}},{"name":"2e81","type":1,"text":"Cool it works! What if we get the password wrong?","markups":[]},{"name":"9cb6","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*qI__BMg9d88g2h7o4RzZLA.png","originalWidth":1920,"originalHeight":1056}},{"name":"6023","type":1,"text":"Great, when the password is wrong the server sends a response status of 401 unauthorized. Just what we wanted!","markups":[{"type":10,"start":72,"end":88}]},{"name":"483a","type":1,"text":"To finish off this part of the tutorial, let’s add a simple logout endpoint to nullify the token.","markups":[]},{"name":"3470","type":8,"text":"// AuthController.js\nrouter.get('/logout', function(req, res) {\n  res.status(200).send({ auth: false, token: null });\n});","markups":[]},{"name":"ce79","type":1,"text":"Disclaimer: The logout endpoint is not needed. The act of logging out can solely be done through the client side. A token is usually kept in a cookie or the browser’s localstorage. Logging out is as simple as destroying the token on the client. This /logout endpoint is created to logically depict what happens when you log out. The token gets set to null.","markups":[{"type":10,"start":250,"end":257},{"type":10,"start":351,"end":355},{"type":1,"start":0,"end":10}]},{"name":"24b3","type":1,"text":"With this we’ve finished the authentication part of the tutorial. Want to move on to the authorization? I bet you do.","markups":[{"type":1,"start":29,"end":43}]},{"name":"0ed8","type":3,"text":"Do you have permission to be here?","markups":[]},{"name":"0a02","type":1,"text":"To comprehend the logic behind an authorization strategy we need to wrap our head around something called middleware. Its name is self explanatory, to some extent, isn’t it? Middleware is a piece of code, a function in Node.js, that acts as a bridge between some parts of your code.","markups":[{"type":1,"start":106,"end":116}]},{"name":"b2dd","type":1,"text":"When a request reaches an endpoint, the router has an option to pass the request on to the next middleware function in line. Emphasis on the word next! Because that’s exactly what the name of the function is! Let’s see an example. Comment out the line where you send back the user as a response. Add a next(user) right underneath.","markups":[{"type":10,"start":302,"end":312},{"type":1,"start":146,"end":150}]},{"name":"a330","type":8,"text":"router.get('/me', function(req, res) {","markups":[]},{"name":"6fb9","type":8,"text":"var token = req.headers['x-access-token'];\n  if (!token) return res.status(401).send({ auth: false, message: 'No token provided.' });\n  \n  jwt.verify(token, config.secret, function(err, decoded) {\n    if (err) return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });\n    \n    User.findById(decoded.id, \n    { password: 0 }, // projection\n    function (err, user) {\n      if (err) return res.status(500).send(\"There was a problem finding the user.\");\n      if (!user) return res.status(404).send(\"No user found.\");","markups":[]},{"name":"5768","type":8,"text":"      // res.status(200).send(user); Comment this out!\n      next(user); // add this line\n    });\n  });\n});","markups":[]},{"name":"a9eb","type":8,"text":"// add the middleware function\nrouter.use(function (user, req, res, next) {\n  res.status(200).send(user);\n});","markups":[]},{"name":"7576","type":6,"text":"Middleware functions are functions that have access to the request object (req), the response object (res), and the next function in the application’s request-response cycle. The next function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware.\n- Using middleware, expressjs.com","markups":[{"type":10,"start":75,"end":78},{"type":10,"start":102,"end":105},{"type":10,"start":116,"end":120},{"type":10,"start":179,"end":183},{"type":3,"start":59,"end":73,"href":"https://expressjs.com/en/4x/api.html#req","title":"","rel":"","anchorType":0},{"type":3,"start":85,"end":100,"href":"https://expressjs.com/en/4x/api.html#res","title":"","rel":"","anchorType":0},{"type":3,"start":311,"end":327,"href":"https://expressjs.com/en/guide/using-middleware.html","title":"","rel":"","anchorType":0},{"type":1,"start":0,"end":10},{"type":2,"start":0,"end":10}]},{"name":"c21f","type":1,"text":"Jump back to postman and check out what happens when you hit the /api/auth/me endpoint. Does it surprise you that the outcome is exactly the same? It should be!","markups":[{"type":10,"start":65,"end":77}]},{"name":"e626","type":1,"text":"Disclaimer: Go ahead and delete this sample before we continue as it is only used for demonstrating the logic of using next().","markups":[{"type":10,"start":119,"end":125},{"type":1,"start":0,"end":10}]},{"name":"1bc9","type":1,"text":"Let’s take this same logic and apply it to create a middleware function to check the validity of tokens. Create a new file in the auth folder and name it VerifyToken.js. Paste this snippet of code in there.","markups":[{"type":1,"start":130,"end":135},{"type":1,"start":154,"end":168}]},{"name":"92ff","type":8,"text":"var jwt = require('jsonwebtoken');\nvar config = require('../config');","markups":[]},{"name":"17fa","type":8,"text":"function verifyToken(req, res, next) {\n  var token = req.headers['x-access-token'];\n  if (!token)\n    return res.status(403).send({ auth: false, message: 'No token provided.' });","markups":[]},{"name":"37c5","type":8,"text":"  jwt.verify(token, config.secret, function(err, decoded) {\n    if (err)\n    return res.status(500).send({ auth: false, message: 'Failed to authenticate token.' });","markups":[]},{"name":"4591","type":8,"text":"    // if everything good, save to request for use in other routes\n    req.userId = decoded.id;\n    next();\n  });\n}","markups":[]},{"name":"afe5","type":8,"text":"module.exports = verifyToken;","markups":[]},{"name":"26f0","type":1,"text":"Let’s break it down. We’re going to use this function as a custom middleware to check if a token exists and whether it is valid. After validating it, we add the decoded.id value to the request (req) variable. We now have access to it in the next function in line in the request-response cycle. Calling next() will make sure flow will continue to the next function waiting in line. In the end, we export the function.","markups":[{"type":10,"start":161,"end":171},{"type":10,"start":194,"end":197},{"type":10,"start":302,"end":308}]},{"name":"07a4","type":1,"text":"Now, open up the AuthController.js once again. Add a reference to VerifyToken.js at the top of the file and edit the /me endpoint. It should now look like this:","markups":[{"type":10,"start":117,"end":120},{"type":1,"start":17,"end":35},{"type":1,"start":66,"end":80}]},{"name":"118b","type":8,"text":"// AuthController.js","markups":[]},{"name":"3e2f","type":8,"text":"var VerifyToken = require('./VerifyToken');","markups":[]},{"name":"d2d5","type":8,"text":"// ...","markups":[]},{"name":"7565","type":8,"text":"router.get('/me', VerifyToken, function(req, res, next) {","markups":[]},{"name":"f119","type":8,"text":"  User.findById(req.userId, { password: 0 }, function (err, user) {\n    if (err) return res.status(500).send(\"There was a problem finding the user.\");\n    if (!user) return res.status(404).send(\"No user found.\");\n    \n    res.status(200).send(user);\n  });","markups":[]},{"name":"b6ca","type":8,"text":"});","markups":[]},{"name":"dd75","type":8,"text":"// ...","markups":[]},{"name":"18b7","type":1,"text":"See how we added VerifyToken in the chain of functions? We now handle all the authorization in the middleware. This frees up all the space in the callback to only handle the logic we need. This is an awesome example of how to write DRY code. Now, every time you need to authorize a user you can add this middleware function to the chain. Test it in Postman again, to make sure it still works like it should.","markups":[{"type":10,"start":17,"end":28}]},{"name":"f86f","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*iBp9DTi8iHoTza-pWX3Sgg.png","originalWidth":1920,"originalHeight":1056}},{"name":"24c2","type":1,"text":"Feel free to mess with the token and try the endpoint again. With an invalid token, you’ll see the desired error message, and be sure the code you wrote works the way you want.","markups":[]},{"name":"de8c","type":1,"text":"Why is this so powerful? You can now add the VerifyToken middleware to any chain of functions and be sure the endpoints are secured. Only users with verified tokens can access the resources!","markups":[{"type":10,"start":45,"end":56},{"type":2,"start":56,"end":57}]},{"name":"0e99","type":3,"text":"Wrapping your head around everything.","markups":[]},{"name":"a32b","type":1,"text":"Don’t feel bad if you did not grasp everything at once. Some of these concepts are hard to understand. It’s fine to take a step back and rest your brain before trying again. That’s why I recommend you go through the code by yourself and try your best to get it to work.","markups":[]},{"name":"8af3","type":1,"text":"Again, here’s the GitHub repository. You can catch up on any things you may have missed, or just get a better look at the code if you get stuck.","markups":[{"type":3,"start":7,"end":35,"href":"https://github.com/adnanrahic/securing-restful-apis-with-jwt","title":"","rel":"","anchorType":0}]},{"name":"7dcd","type":1,"text":"Remember, authentication is the act of logging a user in. Authorization is the act of verifying the access rights of a user to interact with a resource.","markups":[{"type":1,"start":10,"end":24},{"type":1,"start":58,"end":71}]},{"name":"31db","type":1,"text":"Middleware functions are used as bridges between some pieces of code. When used in the function chain of an endpoint they can be incredibly useful in authorization and error handling.","markups":[{"type":1,"start":0,"end":10}]},{"name":"64c8","type":1,"text":"Hope you guys and girls enjoyed reading this as much as I enjoyed writing it. Until next time, be curious and have fun.","markups":[]},{"name":"32eb","type":1,"text":"Do you think this tutorial will be of help to someone? Do not hesitate to share. If you liked it, please clap for me.","markups":[{"type":2,"start":0,"end":117}]}],"sections":[{"name":"ca28","startIndex":0}]},"postDisplay":{"coverless":true}},"virtuals":{"statusForCollection":"APPROVED","allowNotes":true,"previewImage":{"imageId":"1*0ABaK4SrXGUnXgmXqMkZtA.png","filter":"","backgroundSize":"","originalWidth":1920,"originalHeight":826,"strategy":"resample","height":0,"width":0},"wordCount":3146,"imageCount":9,"readingTime":13.071698113207546,"subtitle":"Have you ever wondered how authentication works? What’s behind all the complexity and abstractions. Actually, nothing special. It’s a way…","publishedInCount":1,"usersBySocialRecommends":[],"recommends":314,"socialRecommends":[],"isBookmarked":false,"tags":[{"slug":"nodejs","name":"Nodejs","postCount":8384,"virtuals":{"isFollowing":false},"metadata":{"followerCount":12136,"postCount":8384,"coverImage":{"id":"1*BYeFTcHFVhZAhOq_-Y_m1Q.jpeg","originalWidth":494,"originalHeight":470,"isFeatured":true}},"type":"Tag"},{"slug":"web-development","name":"Web Development","postCount":51328,"virtuals":{"isFollowing":false},"metadata":{"followerCount":43842,"postCount":51328,"coverImage":{"id":"1*WVtok3BV0NgU95mpxk9CNg.gif","originalWidth":972,"originalHeight":514,"isFeatured":true}},"type":"Tag"},{"slug":"javascript","name":"JavaScript","postCount":42119,"virtuals":{"isFollowing":false},"metadata":{"followerCount":39834,"postCount":42119,"coverImage":{"id":"1*bJGV6eJQenm0Fle7tpqCcA.png","originalWidth":2152,"originalHeight":834}},"type":"Tag"},{"slug":"startup","name":"Startup","postCount":222445,"virtuals":{"isFollowing":false},"metadata":{"followerCount":946468,"postCount":222445,"coverImage":{"id":"1*22RsJ-7NHWOqbpqOFCv8Vw.jpeg"}},"type":"Tag"},{"slug":"programming","name":"Programming","postCount":43418,"virtuals":{"isFollowing":false},"metadata":{"followerCount":46783,"postCount":43418,"coverImage":{"id":"1*WVtok3BV0NgU95mpxk9CNg.gif","originalWidth":972,"originalHeight":514,"isFeatured":true}},"type":"Tag"}],"socialRecommendsCount":0,"responsesCreatedCount":9,"links":{"entries":[{"url":"https://mlab.com/","alts":[],"httpStatus":200},{"url":"https://expressjs.com/en/4x/api.html#res","alts":[],"httpStatus":200},{"url":"https://expressjs.com/en/4x/api.html#req","alts":[],"httpStatus":200},{"url":"https://expressjs.com/en/guide/using-middleware.html","alts":[],"httpStatus":200},{"url":"https://github.com/adnanrahic/securing-restful-apis-with-jwt","alts":[],"httpStatus":200},{"url":"https://github.com/adnanrahic/nodejs-restful-api.git","alts":[],"httpStatus":200},{"url":"https://www.getpostman.com/postman","alts":[],"httpStatus":200},{"url":"https://github.com/auth0/node-jsonwebtoken","alts":[],"httpStatus":200},{"url":"https://github.com/dcodeIO/bcrypt.js","alts":[],"httpStatus":200},{"url":"https://insomnia.rest/","alts":[],"httpStatus":200},{"url":"https://tools.ietf.org/html/rfc7519","alts":[],"httpStatus":200},{"url":"https://hackernoon.com/restful-api-design-with-node-js-26ccf66eab09","alts":[{"type":2,"url":"medium://p/26ccf66eab09"},{"type":3,"url":"medium://p/26ccf66eab09"}],"httpStatus":200}],"version":"0.3","generatedAt":1504714085310},"isLockedPreviewOnly":false,"takeoverId":"","metaDescription":"","totalClapCount":1708,"sectionCount":1},"coverless":true,"slug":"securing-node-js-restful-apis-with-json-web-tokens","translationSourcePostId":"","translationSourceCreatorId":"","isApprovedTranslation":false,"inResponseToPostId":"","inResponseToRemovedAt":0,"isTitleSynthesized":true,"allowResponses":true,"importedUrl":"","importedPublishedAt":0,"visibility":0,"uniqueSlug":"securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52","previewContent":{"bodyModel":{"paragraphs":[{"name":"7b8b","type":4,"text":"","markups":[],"layout":10,"metadata":{"id":"1*0ABaK4SrXGUnXgmXqMkZtA.png","originalWidth":1920,"originalHeight":826}},{"name":"eb03","type":3,"text":"Securing Node.js RESTful APIs with JSON Web Tokens","markups":[],"alignment":1}],"sections":[{"startIndex":0}]},"isFullContent":false},"license":0,"inResponseToMediaResourceId":"","canonicalUrl":"https://medium.freecodecamp.org/securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52","approvedHomeCollectionId":"336d898217ee","approvedHomeCollection":{"id":"336d898217ee","name":"freeCodeCamp","slug":"free-code-camp","tags":["TECHNOLOGY","DESIGN","TECH","STARTUP","PRODUCTIVITY"],"creatorId":"8b318225c16a","description":"Our community publishes stories worth reading on development, design, and data science.","shortDescription":"Our community publishes stories worth reading on…","image":{"imageId":"1*MotlWcSa2n6FrOx3ul89kw.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":322028,"activeAt":1505618828667},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*wViBNJ1o9rM5p6b-gf3vxg.png","filter":"","backgroundSize":"","originalWidth":600,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"freecodecamp","facebookPageName":"freecodecamp","publicEmail":"quincy@freecodecamp.com","collectionMastheadId":"af94c9c16d4","domain":"medium.freecodecamp.org","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4}},{"type":1,"postListMetadata":{"source":3,"layout":6,"number":1,"postIds":["707453a79ee8"]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":25,"postIds":[]}},{"type":1,"postListMetadata":{"source":2,"layout":6,"number":25,"postIds":[],"sectionHeader":"Trending"}}],"tintColor":"#FF006400","lightText":true,"favicon":{"imageId":"1*B6_f-_SxscJ9FCuIjOrQAQ.jpeg","filter":"","backgroundSize":"","originalWidth":657,"originalHeight":654,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF429A35","point":0},{"color":"#FF408F33","point":0.1},{"color":"#FF3E8432","point":0.2},{"color":"#FF3B7830","point":0.3},{"color":"#FF376C2D","point":0.4},{"color":"#FF33602A","point":0.5},{"color":"#FF2E5426","point":0.6},{"color":"#FF284721","point":0.7},{"color":"#FF223A1C","point":0.8},{"color":"#FF1A2C15","point":0.9},{"color":"#FF111E0D","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF006400","point":0},{"color":"#FF2A7920","point":0.1},{"color":"#FF458C39","point":0.2},{"color":"#FF5D9E50","point":0.3},{"color":"#FF74AF66","point":0.4},{"color":"#FF8ABF7C","point":0.5},{"color":"#FFA0CE92","point":0.6},{"color":"#FFB5DDA8","point":0.7},{"color":"#FFCAEBBE","point":0.8},{"color":"#FFDFF8D4","point":0.9},{"color":"#FFF3FFEA","point":1}],"backgroundColor":"#FF006400"},"highlightSpectrum":{"colorPoints":[{"color":"#FFE3FBD9","point":0},{"color":"#FFDEFAD3","point":0.1},{"color":"#FFD9FACC","point":0.2},{"color":"#FFD3F9C6","point":0.3},{"color":"#FFCEF9C0","point":0.4},{"color":"#FFC9F8B9","point":0.5},{"color":"#FFC3F8B3","point":0.6},{"color":"#FFBDF7AD","point":0.7},{"color":"#FFB8F7A6","point":0.8},{"color":"#FFB2F6A0","point":0.9},{"color":"#FFACF699","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":1,"title":"Dev","tagSlug":"web-development","url":"https://medium.freecodecamp.org/tagged/web-development","source":"tagSlug"},{"type":1,"title":"Design","tagSlug":"design","url":"https://medium.freecodecamp.org/tagged/design","source":"tagSlug"},{"type":1,"title":"Data","tagSlug":"data-science","url":"https://medium.freecodecamp.org/tagged/data-science","source":"tagSlug"},{"type":3,"title":"Learn to code for free","url":"https://freecodecamp.com?ref=mn"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-55446531-3","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4},"type":"Collection"},"newsletterId":"","webCanonicalUrl":"https://medium.freecodecamp.org/securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52","mediumUrl":"https://medium.freecodecamp.org/securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52","migrationId":"","notifyFollowers":true,"notifyTwitter":false,"isSponsored":false,"isRequestToPubDisabled":false,"notifyFacebook":false,"responseHiddenOnParentPostAt":0,"isSeries":false,"isSubscriptionLocked":false,"seriesLastAppendedAt":0,"audioVersionDurationSec":0,"sequenceId":"","isNsfw":false,"isEligibleForRevenue":false,"type":"Post"},"mentionedUsers":[],"collaborators":[],"membershipPlans":[],"collectionUserRelations":[],"mode":null,"references":{"User":{"d1aeac7eadae":{"userId":"d1aeac7eadae","name":"Adnan Rahi?","username":"adnanrahic","createdAt":1471380289035,"lastPostCreatedAt":1505651999688,"imageId":"1*_zEH2290dCCejDlyJghqqw.jpeg","backgroundImageId":"","bio":"Software engineer @bookvar_co. Coding educator @ACADEMY387. Campsite leader @freeCodeCamp Sarajevo.","twitterScreenName":"adnanrahic","socialStats":{"userId":"d1aeac7eadae","usersFollowedCount":154,"usersFollowedByCount":597,"type":"SocialStats"},"social":{"userId":"lo_9ce0c0f734f","targetUserId":"d1aeac7eadae","type":"Social"},"facebookAccountId":"625773520934076","allowNotes":1,"type":"User"}},"Collection":{"336d898217ee":{"id":"336d898217ee","name":"freeCodeCamp","slug":"free-code-camp","tags":["TECHNOLOGY","DESIGN","TECH","STARTUP","PRODUCTIVITY"],"creatorId":"8b318225c16a","description":"Our community publishes stories worth reading on development, design, and data science.","shortDescription":"Our community publishes stories worth reading on…","image":{"imageId":"1*MotlWcSa2n6FrOx3ul89kw.png","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":322028,"activeAt":1505618828667},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*wViBNJ1o9rM5p6b-gf3vxg.png","filter":"","backgroundSize":"","originalWidth":600,"originalHeight":72,"strategy":"resample","height":0,"width":0},"twitterUsername":"freecodecamp","facebookPageName":"freecodecamp","publicEmail":"quincy@freecodecamp.com","collectionMastheadId":"af94c9c16d4","domain":"medium.freecodecamp.org","sections":[{"type":2,"collectionHeaderMetadata":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4}},{"type":1,"postListMetadata":{"source":3,"layout":6,"number":1,"postIds":["707453a79ee8"]}},{"type":1,"postListMetadata":{"source":1,"layout":6,"number":25,"postIds":[]}},{"type":1,"postListMetadata":{"source":2,"layout":6,"number":25,"postIds":[],"sectionHeader":"Trending"}}],"tintColor":"#FF006400","lightText":true,"favicon":{"imageId":"1*B6_f-_SxscJ9FCuIjOrQAQ.jpeg","filter":"","backgroundSize":"","originalWidth":657,"originalHeight":654,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF429A35","point":0},{"color":"#FF408F33","point":0.1},{"color":"#FF3E8432","point":0.2},{"color":"#FF3B7830","point":0.3},{"color":"#FF376C2D","point":0.4},{"color":"#FF33602A","point":0.5},{"color":"#FF2E5426","point":0.6},{"color":"#FF284721","point":0.7},{"color":"#FF223A1C","point":0.8},{"color":"#FF1A2C15","point":0.9},{"color":"#FF111E0D","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF006400","point":0},{"color":"#FF2A7920","point":0.1},{"color":"#FF458C39","point":0.2},{"color":"#FF5D9E50","point":0.3},{"color":"#FF74AF66","point":0.4},{"color":"#FF8ABF7C","point":0.5},{"color":"#FFA0CE92","point":0.6},{"color":"#FFB5DDA8","point":0.7},{"color":"#FFCAEBBE","point":0.8},{"color":"#FFDFF8D4","point":0.9},{"color":"#FFF3FFEA","point":1}],"backgroundColor":"#FF006400"},"highlightSpectrum":{"colorPoints":[{"color":"#FFE3FBD9","point":0},{"color":"#FFDEFAD3","point":0.1},{"color":"#FFD9FACC","point":0.2},{"color":"#FFD3F9C6","point":0.3},{"color":"#FFCEF9C0","point":0.4},{"color":"#FFC9F8B9","point":0.5},{"color":"#FFC3F8B3","point":0.6},{"color":"#FFBDF7AD","point":0.7},{"color":"#FFB8F7A6","point":0.8},{"color":"#FFB2F6A0","point":0.9},{"color":"#FFACF699","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":1,"title":"Dev","tagSlug":"web-development","url":"https://medium.freecodecamp.org/tagged/web-development","source":"tagSlug"},{"type":1,"title":"Design","tagSlug":"design","url":"https://medium.freecodecamp.org/tagged/design","source":"tagSlug"},{"type":1,"title":"Data","tagSlug":"data-science","url":"https://medium.freecodecamp.org/tagged/data-science","source":"tagSlug"},{"type":3,"title":"Learn to code for free","url":"https://freecodecamp.com?ref=mn"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-55446531-3","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"backgroundImage":{},"logoImage":{"id":"1*JAG6GC1APQdyo2PegDDi2g@2x.png","originalWidth":601,"originalHeight":81,"alt":"freeCodeCamp"},"alignment":2,"layout":4},"type":"Collection"}},"Social":{"d1aeac7eadae":{"userId":"lo_9ce0c0f734f","targetUserId":"d1aeac7eadae","type":"Social"}},"SocialStats":{"d1aeac7eadae":{"userId":"d1aeac7eadae","usersFollowedCount":154,"usersFollowedByCount":597,"type":"SocialStats"}}}})
// ]]></script>
 </body>
</html>