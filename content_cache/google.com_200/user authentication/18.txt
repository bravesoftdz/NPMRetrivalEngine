<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width,initial-scale=1"> 
  <title>Angular 2 authentication with Auth0 and NodeJS</title> 
  <meta name="description" content="If you’ve needed to add authentication to an AngularJS (1.x) app, you’ll have likely have had some fun and perhaps been lost at where to start. Traditional m..."> 
  <meta name="author" content="Todd Motto"> 
  <link rel="stylesheet" href="/css/main.css?1503999492178549309"> 
  <link rel="canonical" href="https://toddmotto.com/angular-2-authentication"> 
  <link rel="alternate" type="application/rss+xml" title="Todd Motto" href="https://toddmotto.com/feed.xml"> 
  <meta property="og:locale" content="en_US"> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="Angular 2 authentication with Auth0 and NodeJS"> 
  <meta property="og:description" content="If you’ve needed to add authentication to an AngularJS (1.x) app, you’ll have likely have had some fun and perhaps been lost at where to start. Traditional m..."> 
  <meta property="og:url" content="https://toddmotto.com/angular-2-authentication"> 
  <meta property="og:site_name" content="Todd Motto"> 
  <meta property="og:image" content="https://toddmotto.com/img/todd.jpg"> 
  <meta property="og:publisher" content="https://www.facebook.com/toddmotto"> 
  <meta name="twitter:card" content="summary"> 
  <meta name="twitter:site" content="@toddmotto"> 
  <meta name="twitter:title" content="Angular 2 authentication with Auth0 and NodeJS"> 
  <meta name="twitter:description" content="If you’ve needed to add authentication to an AngularJS (1.x) app, you’ll have likely have had some fun and perhaps been lost at where to start. Traditional m..."> 
  <meta name="twitter:image" content="https://toddmotto.com/img/todd.jpg"> 
 </head> 
 <body> 
  <header class="header"> 
   <div class="header__img"> 
    <img src="/img/todd.jpg" alt="Todd Motto"> 
    <p>Todd Motto</p> 
    <span>Owner, Ultimate Angular</span> 
   </div> 
   <div class="header__twitter"> 
    <a href="https://twitter.com/toddmotto" class="twitter-follow-button" data-show-count="true"></a> 
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+'://platform.twitter.com/widgets.js';fjs.parentNode.insertBefore(js,fjs);}}(document, 'script', 'twitter-wjs');</script> 
   </div> 
   <nav class="nav"> 
    <a href="/" class="nav__link"> <img src="/img/nav/blog.svg" alt=""> Blogs </a> 
    <a href="/about" class="nav__link"> <img src="/img/nav/about.svg" alt=""> About </a> 
    <a href="/speaking" class="nav__link"> <img src="/img/nav/speaking.svg" alt=""> Speaking events </a> 
    <a href="//ultimateangular.com/courses/" target="_blank" class="nav__link"> <img src="/img/nav/video.svg" alt=""> <img src="/img/nav/external.svg" alt="" class="nav__external"> Online courses </a> 
   </nav> 
   <div class="header__links"> 
    <a href="//twitter.com/toddmotto" target="_blank"> <img src="/img/icons/twitter.svg" alt="Todd Motto on Twitter"> </a> 
    <a href="//github.com/toddmotto" target="_blank"> <img src="/img/icons/github.svg" alt="Todd Motto on GitHub"> </a> 
    <a href="//youtube.com/toddmotto" target="_blank"> <img src="/img/icons/youtube.svg" alt="Todd Motto on YouTube"> </a> 
    <a href="//facebook.com/toddmottoblog" target="_blank"> <img src="/img/icons/fb.svg" alt="Todd Motto on Facebook"> </a> 
    <span> © 2017 </span> 
   </div> 
  </header> 
  <div class="banner"> 
   <form class="search"> 
    <input type="text" placeholder="Search posts"> 
    <ul></ul> 
   </form> 
  </div> 
  <main class="content"> 
   <div class="card"> 
    <div class="courses courses--top"> 
     <a class="courses__out" href="https://ultimateangular.com/courses/?utm_source=toddmotto.com" target="_blank"> <img class="courses__logo" src="/img/ua.svg" alt=""> <button type="button"> Let's go! </button> <h3> Angular Pro is here! My latest, advanced, Angular course. </h3> <p> Tired of wrestling incomplete documentation, old videos and tutorials? </p> <p> Join me over at Ultimate Angular to learn everything you'll need to have confidence in your work. </p> </a> 
    </div> 
    <div class="card__content"> 
     <div class="categories"> 
      <p>Categories:</p> 
      <div class="categories__container"> 
       <a href="/categories/angular"> <img src="/img/tags/angular.svg" alt="All Angular articles"> Angular </a> 
       <a href="/categories/angularjs"> <img src="/img/tags/angularjs.svg" alt="All AngularJS articles"> AngularJS </a> 
       <a href="/categories/rxjs"> <img src="/img/tags/rxjs.svg" alt="All RxJS articles"> RxJS </a> 
       <a href="/categories/javascript"> <img src="/img/tags/js.svg" alt="All JavaScript articles"> JavaScript </a> 
      </div> 
     </div> 
     <article class="post single"> 
      <section class="post__content"> 
       <div class="post__detail"> 
        <header class="post__header"> 
         <h1 class="alpha post__title" itemprop="name headline"> Angular 2 authentication with Auth0 and NodeJS 
          <div class="post-card__container"> 
           <div class="post-card__meta"> 
            <div class="post-card__tag"> 
             <img src="/img/tags/angular.svg" alt=""> 
            </div> Apr 19, 2016 
           </div> 
           <div class="post-card__meta"> 
            <div class="post-card__tag"> 
             <img src="/img/tags/time.svg" alt=""> 
            </div> 7 mins read 
           </div> 
           <div class="post-card__meta"> 
            <div class="post-card__tag"> 
             <img src="/img/icons/github-dark.svg" alt=""> 
            </div> 
            <a class="post-card-edit" href="//github.com/toddmotto/toddmotto.github.io/blob/master/_posts/2016-04-19-angular-2-authentication.md"> Edit post </a> 
           </div> 
          </div> </h1> 
         <div class="post__meta__divider"></div> 
        </header> 
        <p>If you’ve needed to add authentication to an AngularJS (1.x) app, you’ll have likely have had some fun and perhaps been lost at where to start. Traditional methods of session and cookie-based auth are challenging for full-on single page apps regardless of the framework or strategy you choose, so I’ve usually used <a href="https://jwt.io/introduction">JSON Web Tokens JWT</a> for stateless authentication instead. Even when using JWTs though, there’s still a lot that needs to be kept in check. Things like hiding and showing various parts of the UI based on the user’s authentication state, attaching the JWT as an <code class="highlighter-rouge">Authorization</code> header in HTTP requests, and redirecting to the login route when a request gets rejected as being invalid.</p> 
        <div class="toc"> 
         <p class="no_toc"><span class="gamma">Table of contents</span></p> 
         <ul id="markdown-toc"> 
          <li><a href="#prerequisites" id="markdown-toc-prerequisites">Prerequisites</a></li> 
          <li><a href="#setup" id="markdown-toc-setup">Setup</a></li> 
          <li><a href="#next-steps" id="markdown-toc-next-steps">Next steps</a></li> 
          <li><a href="#angular-authentication-service" id="markdown-toc-angular-authentication-service">Angular Authentication Service</a></li> 
          <li><a href="#sending-authenticated-http-requests" id="markdown-toc-sending-authenticated-http-requests">Sending Authenticated HTTP Requests</a></li> 
          <li><a href="#middleware-on-the-server" id="markdown-toc-middleware-on-the-server">Middleware on the Server</a></li> 
          <li><a href="#conditional-rendering-with-ngif" id="markdown-toc-conditional-rendering-with-ngif">Conditional rendering with ngIf</a></li> 
          <li><a href="#logging-users-out" id="markdown-toc-logging-users-out">Logging Users Out</a></li> 
          <li><a href="#wrapping-up" id="markdown-toc-wrapping-up">Wrapping up</a></li> 
         </ul> 
        </div> 
        <p>When it comes to adding authentication to an Angular (v2+) app, we still need to think about these things, but the approach is a little different. To start, we no longer have the concept of HTTP interceptors in Angular, like we did in AngularJS, which means we need some other way of binding the user’s JWT to requests.</p> 
        <p>Implementing authentication on the front end is only half the battle though - we also need to create some backend code that checks the user’s credentials, signs tokens for them, and checks whether the token is valid when requests are made to our API endpoints. Which is a lot of work! It’s also prone to error and is something that’s really important to get right, obviously!</p> 
        <p>So, in this post we’re going to demonstrate how to handle authentication using Angular, <a href="https://nodejs.org">Node.js</a> and <a href="https://auth0.com/?utm_source=toddmotto&amp;utm_medium=gp&amp;utm_campaign=angular2_auth">Auth0</a> which I’ve used with working on AngularJS, so this is great to be able to dive into Angular with what I’m used to. Auth0 lets us forget about most of the backend logic altogether (I’m no backend programmer) and integrates nicely with Node, so all we really need to do is make sure that our Angular app is set up to save and send JWTs. Let’s get started!</p> 
        <h3 id="prerequisites">Prerequisites</h3> 
        <p>If you’ve not dived much into Angular, I’ve some articles that are probably a good place to start first, <a href="https://toddmotto.com/bootstrap-angular-2-hello-world">bootstrapping your first app</a> and <a href="https://toddmotto.com/creating-your-first-angular-2-component">creating your first Component</a>.</p> 
        <h3 id="setup">Setup</h3> 
        <p>First, you’ll need to make sure you have <a href="//angular.io">Angular</a> and <a href="https://nodejs.org">Node.js</a> available, as well as a free <a href="https://auth0.com/?utm_source=toddmotto&amp;utm_medium=gp&amp;utm_campaign=angular2_auth">Auth0</a> account (it’s free up to 7,000 active users which is plenty, though if you’re running an open source project then Auth0 is free if you drop in their logo, perks).</p> 
        <p>Before we can dive into Angular + Node, we need to configure some fake users in Auth0, so jump <a href="https://auth0.com/signup/?utm_source=toddmotto&amp;utm_medium=gp&amp;utm_campaign=angular2_auth">here</a> if you’re following along and create some users in the <a href="https://manage.auth0.com">management dashboard</a>. We get a default app when we register, and this app comes with a domain and client ID which we’ll need later.</p> 
        <h3 id="next-steps">Next steps</h3> 
        <p>Auth0 provides a smart login widget that we can drop into our app, so I’m going to be using that because I’m not reinventing the wheel, if you want to create your own then just use <a href="https://auth0.com/docs/auth-api/?utm_source=toddmotto&amp;utm_medium=gp&amp;utm_campaign=angular2_auth">the API</a>.</p> 
        <p>Now we simply drop in the lock script into our <code class="highlighter-rouge">index.html</code> file somewhere in the <code class="highlighter-rouge">&lt;head&gt;</code>:</p> 
        <figure class="highlight">
         <pre><code class="language-html" data-lang="html"><span class="nt">&lt;html&gt;</span>
  <span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdn.auth0.com/js/lock-9.0.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    ...
  <span class="nt">&lt;/head&gt;</span>
  <span class="nt">&lt;body&gt;</span>...<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span></code></pre>
        </figure> 
        <h3 id="angular-authentication-service">Angular Authentication Service</h3> 
        <p>One question that frequents when implementing auth in Angular apps is “where does the logic go?”. Sometimes our apps will only have one location where the login is managed and other times there will be multiple locations. So we’re going to just be creating one Service to keep things simple. Now using Angular, we’re going to be creating an <code class="highlighter-rouge">AuthService</code> and mark it as <code class="highlighter-rouge">@Injectable()</code> so we can dependency inject it wherever we want:</p> 
        <figure class="highlight">
         <pre><code class="language-javascript" data-lang="javascript"><span class="c1">// services/auth.service.ts</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Injectable</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>

<span class="c1">// We want to avoid any 'name not found'</span>
<span class="c1">// warnings from TypeScript</span>
<span class="nx">declare</span> <span class="kd">var</span> <span class="nx">Auth0Lock</span><span class="err">:</span> <span class="nx">any</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Injectable</span><span class="p">()</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">AuthService</span> <span class="p">{</span>

 <span class="nx">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Auth0Lock</span><span class="p">(</span><span class="s1">'YOUR_AUTH0_CLIENT_ID'</span><span class="p">,</span> <span class="s1">'YOUR_AUTH0_DOMAIN'</span><span class="p">);</span>

 <span class="nx">login</span><span class="p">()</span> <span class="p">{</span>
   <span class="k">this</span><span class="p">.</span><span class="nx">lock</span><span class="p">.</span><span class="nx">show</span><span class="p">((</span><span class="nx">error</span><span class="err">:</span> <span class="nx">string</span><span class="p">,</span> <span class="nx">profile</span><span class="err">:</span> <span class="nb">Object</span><span class="p">,</span> <span class="nx">id_token</span><span class="err">:</span> <span class="nx">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="k">if</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
       <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
     <span class="p">}</span>
     <span class="c1">// We get a profile object for the user from Auth0</span>
     <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">'profile'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">profile</span><span class="p">));</span>
     <span class="c1">// We also get the user's JWT</span>
     <span class="nx">localStorage</span><span class="p">.</span><span class="nx">setItem</span><span class="p">(</span><span class="s1">'id_token'</span><span class="p">,</span> <span class="nx">id_token</span><span class="p">);</span>
   <span class="p">});</span>
 <span class="p">}</span>

 <span class="nx">logout</span><span class="p">()</span> <span class="p">{</span>
   <span class="c1">// To log out, we just need to remove</span>
   <span class="c1">// the user's profile and token</span>
   <span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="s1">'profile'</span><span class="p">);</span>
   <span class="nx">localStorage</span><span class="p">.</span><span class="nx">removeItem</span><span class="p">(</span><span class="s1">'id_token'</span><span class="p">);</span>
 <span class="p">}</span>
<span class="p">}</span></code></pre>
        </figure> 
        <p>Well, that was simple. Now we can inject the Service wherever we want! For instance, we might have a component with a toolbar that has <em>Login</em> and <em>Logout</em> buttons.</p> 
        <figure class="highlight">
         <pre><code class="language-javascript" data-lang="javascript"><span class="c1">// components/toolbar.component.ts</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">AuthService</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'../services/auth.service'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'toolbar'</span><span class="p">,</span>
  <span class="na">template</span><span class="p">:</span> <span class="err">`</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">"toolbar"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="p">(</span><span class="nx">click</span><span class="p">)</span><span class="o">=</span><span class="s2">"auth.login()"</span><span class="o">&gt;</span><span class="nx">Login</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt; </span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="p">(</span><span class="nx">click</span><span class="p">)</span><span class="o">=</span><span class="s2">"auth.logout()"</span><span class="o">&gt;</span><span class="nx">Logout</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt; </span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt; </span>  <span class="err">`</span><span class="p">,</span>
  <span class="na">providers</span><span class="p">:[</span><span class="nx">AuthService</span><span class="p">]</span>
<span class="p">})</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">ToolbarComponent</span> <span class="p">{</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="nx">auth</span><span class="err">:</span> <span class="nx">AuthService</span><span class="p">)</span> <span class="p">{}</span>
  <span class="nx">login</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nx">login</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="nx">logout</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">auth</span><span class="p">.</span><span class="nx">logout</span><span class="p">();</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre>
        </figure> 
        <p>Clicking the <em>Login</em> button shows us the Lock widget and we can now enter our credentials:</p> 
        <p><img src="/img/posts/auth-box.jpg" style="max-width: 400px;margin: 0 auto;text-align: center;display: block;border-radius: 3px;"></p> 
        <p>Our JSON Web Token and user profile are now saved in <code class="highlighter-rouge">localStorage</code> and are ready to be used in requests that go to our API:</p> 
        <p><img src="/img/posts/localstorage-auth.png"></p> 
        <h3 id="sending-authenticated-http-requests">Sending Authenticated HTTP Requests</h3> 
        <p>Our JWT is stored and ready to go, but how do we actually send it in requests to the API? We can get the JWT from <code class="highlighter-rouge">localStorage</code> and attach it as a header to HTTP requests manually, or we can use Auth0’s <a href="https://github.com/auth0/angular2-jwt">angular2-jwt</a> module to do this automatically, we can <code class="highlighter-rouge">npm i</code> it into our project:</p> 
        <figure class="highlight">
         <pre><code class="language-bash" data-lang="bash">npm i angular2-jwt</code></pre>
        </figure> 
        <p>After we <a href="https://github.com/auth0/angular2-jwt#sending-authenticated-requests">configure the module</a>, we can inject it wherever we need and use it to send authenticated requests. Let’s say we have a component that fetches a list of users from a backend and displays them, we can import <code class="highlighter-rouge">AuthHttp</code> from <code class="highlighter-rouge">angular2-jwt</code> and subscribe to it with <code class="highlighter-rouge">Rx</code>:</p> 
        <figure class="highlight">
         <pre><code class="language-javascript" data-lang="javascript"><span class="c1">// components/user-list.component.ts</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Component</span><span class="p">,</span> <span class="nx">OnInit</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">AuthHttp</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'angular2-jwt'</span><span class="p">;</span>
<span class="kr">import</span> <span class="s1">'rxjs/add/operator/map'</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">User</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span>
  <span class="nx">name</span><span class="err">:</span> <span class="nx">string</span><span class="p">,</span>
  <span class="nx">image</span><span class="err">:</span> <span class="nx">string</span>
<span class="p">}</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'user-list'</span><span class="p">,</span>
  <span class="na">template</span><span class="p">:</span> <span class="err">`</span>
    <span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Users</span><span class="o">&lt;</span><span class="sr">/h2</span><span class="err">&gt; </span>    <span class="o">&lt;</span><span class="nx">ul</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">li</span> <span class="o">*</span><span class="nx">ngFor</span><span class="o">=</span><span class="s2">"user of users"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">img</span> <span class="p">[</span><span class="nx">src</span><span class="p">]</span><span class="o">=</span><span class="s2">"user.image"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">span</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">}}</span><span class="o">&lt;</span><span class="sr">/span</span><span class="err">&gt; </span>      <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt; </span>    <span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt; </span>  <span class="err">`</span>
<span class="p">})</span>
<span class="kr">export</span> <span class="kr">class</span> <span class="nx">UserListComponent</span> <span class="kr">implements</span> <span class="nx">OnInit</span> <span class="p">{</span>
  <span class="na">users</span><span class="p">:</span> <span class="nx">User</span><span class="p">[];</span>
  <span class="nx">constructor</span><span class="p">(</span><span class="kr">private</span> <span class="na">authHttp</span><span class="p">:</span> <span class="nx">AuthHttp</span><span class="p">)</span> <span class="p">{}</span>
  <span class="nx">ngOnInit</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">authHttp</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'//my-app.com/api/users'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="nx">res</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">())</span>
      <span class="p">.</span><span class="nx">subscribe</span><span class="p">(</span>
        <span class="nx">users</span> <span class="o">=&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">users</span> <span class="o">=</span> <span class="nx">users</span><span class="p">,</span>
        <span class="nx">error</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">)</span>
      <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre>
        </figure> 
        <p>When we use <code class="highlighter-rouge">AuthHttp</code> instead of the regular <code class="highlighter-rouge">Http</code> module shipped with Angular, the JWT in <code class="highlighter-rouge">localStorage</code> gets attached as an <code class="highlighter-rouge">Authorization</code> header automatically. We could of course write some logic to create <code class="highlighter-rouge">Headers</code> and then attach them to each regular <code class="highlighter-rouge">Http</code> request manually, but <code class="highlighter-rouge">angular2-jwt</code> does this for us.</p> 
        <h3 id="middleware-on-the-server">Middleware on the Server</h3> 
        <p>We also need a server that will check for the JWT and only pass the data back if the token is valid. This can be done really easily in NodeJS with Express.</p> 
        <p>Let’s install <code class="highlighter-rouge">express</code>, <code class="highlighter-rouge">express-jwt</code> and <code class="highlighter-rouge">cors</code>:</p> 
        <figure class="highlight">
         <pre><code class="language-bash" data-lang="bash">mkdir server <span class="o">&amp;&amp;</span> <span class="nb">cd </span>server
npm i express express-jwt cors</code></pre>
        </figure> 
        <p>Then, we can create our server and basic server-side logic:</p> 
        <figure class="highlight">
         <pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">jwt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'express-jwt'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">cors</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'cors'</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">cors</span><span class="p">());</span>

<span class="c1">// Authentication middleware provided by express-jwt.</span>
<span class="c1">// This middleware will check incoming requests for a valid</span>
<span class="c1">// JWT on any routes that it is applied to.</span>
<span class="kd">var</span> <span class="nx">authCheck</span> <span class="o">=</span> <span class="nx">jwt</span><span class="p">({</span>
  <span class="na">secret</span><span class="p">:</span> <span class="k">new</span> <span class="nx">Buffer</span><span class="p">(</span><span class="s1">'YOUR_AUTH0_SECRET'</span><span class="p">,</span> <span class="s1">'base64'</span><span class="p">),</span>
  <span class="na">audience</span><span class="p">:</span> <span class="s1">'YOUR_AUTH0_CLIENT_ID'</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="p">[</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'Todd Motto'</span><span class="p">,</span> <span class="na">image</span><span class="p">:</span> <span class="s1">'image-1.jpg'</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'Brad Green'</span><span class="p">,</span> <span class="na">image</span><span class="p">:</span> <span class="s1">'image-2.jpg'</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">id</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="na">name</span><span class="p">:</span> <span class="s1">'Igor Minar'</span><span class="p">,</span> <span class="na">image</span><span class="p">:</span> <span class="s1">'image-3.jpg'</span> <span class="p">}</span>
<span class="p">];</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">'/api/users'</span><span class="p">,</span> <span class="nx">authCheck</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="nx">users</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">4000</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'Listening on http://localhost:4000'</span><span class="p">);</span></code></pre>
        </figure> 
        <p>The middleware is what guards our data. We set it up on the <code class="highlighter-rouge">authCheck</code> variable using the secret key provided by Auth0, and then we apply it to the <code class="highlighter-rouge">/api/users</code> endpoint by passing it into <code class="highlighter-rouge">app.get</code> as the second argument. If the JWT that gets attached in our <code class="highlighter-rouge">AuthHttp</code> request is valid, it will pass through this middleware and our <code class="highlighter-rouge">users</code> Array will be returned.</p> 
        <h3 id="conditional-rendering-with-ngif">Conditional rendering with ngIf</h3> 
        <p>We can create a <code class="highlighter-rouge">loggedIn</code> method for our <code class="highlighter-rouge">AuthService</code> that can be used to conditionally hide and show various elements. For example, we would only want to show the <em>Login</em> button when the user is not currently authenticated, and on the flip side, we’d only want to see <em>Logout</em> when there’s an unexpired JWT in <code class="highlighter-rouge">localStorage</code>.</p> 
        <figure class="highlight">
         <pre><code class="language-javascript" data-lang="javascript"><span class="c1">// services/auth.service.ts</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">tokenNotExpired</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'angular2-jwt'</span><span class="p">;</span>
<span class="c1">// ...</span>
<span class="nx">loggedIn</span><span class="p">()</span><span class="err">:</span> <span class="kr">boolean</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">tokenNotExpired</span><span class="p">();</span>
<span class="p">}</span>
<span class="c1">// ...</span></code></pre>
        </figure> 
        <p>This will return <code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code> depending on whether the JWT in <code class="highlighter-rouge">localStorage</code> is expired or not. Now let’s apply it to our Angular template:</p> 
        <figure class="highlight">
         <pre><code class="language-javascript" data-lang="javascript"><span class="c1">// components/toolbar.component.ts</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">Component</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'@angular/core'</span><span class="p">;</span>
<span class="kr">import</span> <span class="p">{</span> <span class="nx">AuthService</span> <span class="p">}</span> <span class="nx">from</span> <span class="s1">'./services/auth.service'</span><span class="p">;</span>

<span class="err">@</span><span class="nx">Component</span><span class="p">({</span>
  <span class="na">selector</span><span class="p">:</span> <span class="s1">'toolbar'</span><span class="p">,</span>
  <span class="na">template</span><span class="p">:</span> <span class="err">`</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">"toolbar"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="p">(</span><span class="nx">click</span><span class="p">)</span><span class="o">=</span><span class="s2">"auth.login()"</span> <span class="o">*</span><span class="nx">ngIf</span><span class="o">=</span><span class="s2">"!auth.loggedIn()"</span><span class="o">&gt;</span>
        <span class="nx">Login</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt; </span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="p">(</span><span class="nx">click</span><span class="p">)</span><span class="o">=</span><span class="s2">"auth.logout()"</span> <span class="o">*</span><span class="nx">ngIf</span><span class="o">=</span><span class="s2">"auth.loggedIn()"</span><span class="o">&gt;</span>
        <span class="nx">Logout</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt; </span>    <span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt; </span>  <span class="err">`</span>
<span class="p">})</span></code></pre>
        </figure> 
        <h3 id="logging-users-out">Logging Users Out</h3> 
        <p>We’ve already composed a <code class="highlighter-rouge">logout</code> method on the <code class="highlighter-rouge">AuthService</code>, and all that it really does is remove the user’s JWT and profile from <code class="highlighter-rouge">localStorage</code>. This is all that’s really needed for logging out in a stateless scenario because, again, there’s no session saved on the server that determines the user’s authentication state.</p> 
        <h3 id="wrapping-up">Wrapping up</h3> 
        <p>Hopefully you’ve had some decent insight into Angular authentication with JSON Web Tokens, Auth0 and Node. It’s been a pretty simple journey using Auth0 for all of this and it was awesome implementing it inside Angular!</p> 
       </div> 
       <div class="post__sidebar"> 
        <div class="featured"> 
         <p class="featured__latest"> Latest course </p> 
         <p class="featured__name"> Angular Pro </p> 
         <a href="//ultimateangular.com/angular-pro" target="_blank"> <img src="/img/icons/player-angular.svg" alt="Angular Pro online course"> </a> 
         <span class="featured__text"> Angular v4+ award-winning courses, learn at your own pace online with me. </span> 
         <a href="//ultimateangular.com/angular-pro" target="_blank" class="featured__btn"> Free preview </a> 
        </div> 
        <div> 
         <script async src="//cdn.carbonads.com/carbon.js?zoneid=1696&amp;serve=CVYD42T&amp;placement=toddmottocom" id="_carbonads_js"></script> 
        </div> 
        <div class="signup-form signup-form--sidebar"> 
         <div class="signup-form__text"> 
          <h4 class="signup-form__title"> <img src="/img/icons/mail.svg" alt=""> <span>Join 10,000+ other developers</span> </h4> 
          <p class="signup-form__sub"> Latest blogs, resources, exclusive course discounts and more delivered to your inbox. </p> 
         </div> 
         <div id="mc_embed_signup"> 
          <form action="//toddmotto.us12.list-manage.com/subscribe/post?u=fb4d73e892f0d123a57dbd8bc&amp;id=0653182c3c" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank"> 
           <div id="mc_embed_signup_scroll"> 
            <div class="mc-field-group"> 
             <input type="email" placeholder="Email address" name="EMAIL" class="required email" id="mce-EMAIL" required> 
            </div> 
            <div id="mce-responses" class="clear"> 
             <div class="response" id="mce-error-response" style="display:none"></div> 
             <div class="response" id="mce-success-response" style="display:none"></div> 
            </div> 
            <div style="position: absolute; left: -5000px;" aria-hidden="true"> 
             <input type="text" name="b_fb4d73e892f0d123a57dbd8bc_0653182c3c" tabindex="-1" value="">
            </div> 
            <div class="clear"> 
             <button type="submit" name="subscribe" id="mc-embedded-subscribe"> Get updates </button> 
            </div> 
           </div> 
          </form> 
         </div> 
        </div> 
       </div> 
      </section> 
     </article> 
     <div class="share"> 
      <h4 class="share__title">Enjoy this post? Share it!</h4> 
      <p> Lots of time and effort goes into all my blogs, resources and demos, I'd love if you'd spare a moment to share them! </p> 
      <div class="addthis_inline_share_toolbox"></div> 
      <script src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5964f0f2d6581bc8"></script> 
     </div> 
     <div class="courses courses--alt"> 
      <a class="courses__out" href="https://ultimateangular.com/courses/?utm_source=toddmotto.com" target="_blank"> <img class="courses__logo" src="/img/ua.svg" alt=""> <button type="button"> Explore courses </button> <h3> Strengthen your Angular knowledge </h3> <p> <img class="courses__award" src="/img/icons/award.svg" alt=""> Learn step by step with me to fully master what Angular has to offer </p> </a> 
     </div> 
     <div class="post__ending"> 
      <div class="post-card"> 
       <a href="/transclusion-in-angular-2-with-ng-content" class="post-card__content" title="Read Transclusion in Angular 2 with ng-content"> 
        <div class="post-card__meta"> 
         <div class="post-card__tag"> 
          <img src="/img/tags/angular.svg" alt=""> 
         </div> Mar 22, 2016 
        </div> <h2 class="post-card__title"> Transclusion in Angular 2 with ng-content </h2> <p> Transclusion is an AngularJS (1.x) term, lost in the rewrite of Angular (v2+), so let’s... </p> </a> 
      </div> 
      <div class="post-card"> 
       <a href="/angular-1-5-lifecycle-hooks" class="post-card__content" title="Read Lifecycle hooks in Angular 1.5"> 
        <div class="post-card__meta"> 
         <div class="post-card__tag"> 
          <img src="/img/tags/angularjs.svg" alt=""> 
         </div> Jun 3, 2016 
        </div> <h2 class="post-card__title"> Lifecycle hooks in Angular 1.5 </h2> <p> Lifecycle hooks are simply functions that get called at specific points of a component’s life... </p> </a> 
      </div> 
      <div class="signup-form"> 
       <div class="signup-form__text"> 
        <h4 class="signup-form__title"> <img src="/img/icons/mail.svg" alt=""> <span>Join 10,000+ other developers</span> </h4> 
        <p class="signup-form__sub"> Latest blogs, resources, exclusive course discounts and more delivered to your inbox. </p> 
       </div> 
       <div id="mc_embed_signup"> 
        <form action="//toddmotto.us12.list-manage.com/subscribe/post?u=fb4d73e892f0d123a57dbd8bc&amp;id=0653182c3c" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank"> 
         <div id="mc_embed_signup_scroll"> 
          <div class="mc-field-group"> 
           <input type="email" placeholder="Email address" name="EMAIL" class="required email" id="mce-EMAIL" required> 
          </div> 
          <div id="mce-responses" class="clear"> 
           <div class="response" id="mce-error-response" style="display:none"></div> 
           <div class="response" id="mce-success-response" style="display:none"></div> 
          </div> 
          <div style="position: absolute; left: -5000px;" aria-hidden="true"> 
           <input type="text" name="b_fb4d73e892f0d123a57dbd8bc_0653182c3c" tabindex="-1" value="">
          </div> 
          <div class="clear"> 
           <button type="submit" name="subscribe" id="mc-embedded-subscribe"> Get updates </button> 
          </div> 
         </div> 
        </form> 
       </div> 
      </div> 
     </div> 
    </div> 
    <div class="disqus"> 
     <div id="disqus_thread"></div> 
    </div> 
    <script>
  var disqus_url = ('http://toddmotto.com/angular-2-authentication').replace(/\/$/, '');
  var disqus_title = 'Angular 2 authentication with Auth0 and NodeJS';
  var disqus_shortname = 'toddmotto';
  var dsq = document.createElement('script');
  dsq.async = dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
  document.getElementsByTagName('head')[0].appendChild(dsq);
</script> 
   </div>  
   <script src="/js/bundle.min.js?1503999492178549309"></script> 
   <script>
(function(A,n,g,u,l,a,r){A.GoogleAnalyticsObject=r;A[l]=A[l]||function(){
(A[l].q=A[l].q||[]).push(arguments)},A[l].l=1*new Date();a=n.createElement(g),
r=n.getElementsByTagName(g)[0];a.async=1;a.src=u;r.parentNode.insertBefore(a,r)
})(window,document,'script','//www.google-analytics.com/analytics.js','ga');
ga('create', 'UA-20440416-10', 'toddmotto.com');
ga('send', 'pageview');
</script> 
  </main>   
 </body>
</html>