<!doctype html>
<html>
 <head> 
  <meta charset="utf-8"> 
  <title>
  Class: AWS.Rekognition
  
    — AWS SDK for JavaScript
  
</title> 
  <link rel="stylesheet" href="../css/style.css" type="text/css" media="screen" charset="utf-8"> 
  <link rel="stylesheet" href="../css/common.css" type="text/css" media="screen" charset="utf-8"> 
  <link rel="stylesheet" href="../css/highlight.github.css" type="text/css" media="screen" charset="utf-8"> 
  <script type="text/javascript" charset="utf-8">
  pathId = "AWS.Rekognition";
  relpath = '../';
</script> 
  <script type="text/javascript" charset="utf-8" src="../js/jquery.js"></script> 
  <script type="text/javascript" charset="utf-8" src="../js/app.js"></script> 
  <script type="text/javascript" charset="utf-8" src="../js/highlight.pack.js"></script> 
  <script type="text/javascript" charset="utf-8">
  hljs.initHighlightingOnLoad();
</script> 
 </head> 
 <body> 
  <div class="nav_wrap"> 
   <iframe id="nav" src="../class_list.html"></iframe> 
   <div id="resizer"></div> 
  </div> 
  <div id="main" tabindex="-1"> 
   <div id="header"> 
    <div id="menu"> 
     <a href="../_index.html">Index (R)</a> » 
     <span class="title"><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span></span> » 
     <span class="title">Rekognition</span> 
    </div> 
    <div id="search"> 
     <a class="full_list_link" id="class_list_link" href="../class_list.html"> 
      <svg width="24" height="24"> 
       <rect x="0" y="4" width="24" height="4" rx="1" ry="1"></rect> 
       <rect x="0" y="12" width="24" height="4" rx="1" ry="1"></rect> 
       <rect x="0" y="20" width="24" height="4" rx="1" ry="1"></rect> 
      </svg> </a> 
    </div> 
    <div class="clear"></div> 
   </div> 
   <iframe id="search_frame"></iframe> 
   <div id="content"> 
    <!--REGION_DISCLAIMER_DO_NOT_REMOVE--> 
    <h1>Class: AWS.Rekognition </h1> 
    <div class="box_info"> 
     <dl> 
      <dt>
       Inherits:
      </dt> 
      <dd> 
       <span class="inheritName"><span class="object_link"><a href="Service.html" title="AWS.Service (class)">AWS.Service</a></span></span> 
       <ul class="fullTree"> 
        <li>Object</li> 
        <li class="next"><span class="object_link"><a href="Service.html" title="AWS.Service (class)">AWS.Service</a></span></li> 
        <li class="next">AWS.Rekognition</li> 
       </ul> 
       <a href="#" class="inheritanceTree">show all</a> 
      </dd> 
     </dl> 
     <dl> 
      <dt>
       Identifier:
      </dt> 
      <dd>
       rekognition
      </dd> 
     </dl> 
     <dl> 
      <dt>
       API Version:
      </dt> 
      <dd>
       2016-06-27
      </dd> 
     </dl> 
     <dl> 
      <dt>
       Defined in:
      </dt> 
      <dd>
       (unknown)
      </dd> 
     </dl> 
    </div> 
    <h2>Overview</h2>
    <div class="docstring"> 
     <div class="discussion"> 
      <p>Constructs a service interface object. Each API operation is exposed as a function on service.</p> 
      <h3>Sending a Request Using Rekognition</h3> 
      <pre class="code javascript"><code class="javascript">var rekognition = new AWS.Rekognition();
rekognition.compareFaces(params, function (err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});
</code></pre> 
      <h3>Locking the API Version</h3> 
      <p>In order to ensure that the Rekognition object uses this specific API, you can construct the object by passing the <code>apiVersion</code> option to the constructor:</p> 
      <pre class="code javascript"><code class="javascript">var rekognition = new AWS.Rekognition({apiVersion: '2016-06-27'});
</code></pre> 
      <p>You can also set the API version globally in <code>AWS.config.apiVersions</code> using the <strong>rekognition</strong> service identifier:</p> 
      <pre class="code javascript"><code class="javascript">AWS.config.apiVersions = {
  rekognition: '2016-06-27',
  // other service API versions
};

var rekognition = new AWS.Rekognition();
</code></pre> 
     </div> 
    </div> 
    <div class="tags"> 
     <p class="tag_title">Version:</p> 
     <ul class="version"> 
      <li> 
       <div class="inline">
        <p>2016-06-27</p> 
       </div> </li> 
     </ul> 
    </div> 
    <h2>Constructor Summary <small><a href="#" class="summary_toggle">collapse</a></small> </h2> 
    <ul class="summary"> 
     <li class="public "> <span class="summary_signature"> <a href="#constructor-property" title="AWS.Rekognition">new <strong>AWS.Rekognition</strong>(options = {}) ? Object </a> </span> <span class="note title constructor">constructor</span> <span class="summary_desc">
       <div class="inline">
        <p>Constructs a service object.</p> 
       </div></span> </li> 
    </ul> 
    <h2> Property Summary <small><a href="#" class="summary_toggle">collapse</a></small> </h2> 
    <ul class="summary"> 
     <li class="public "> <span class="summary_signature"> <a href="#endpoint-property" title="endpoint"><strong>endpoint</strong> ? AWS.Endpoint </a> </span> <span class="note title readonly">readwrite</span> <span class="summary_desc">
       <div class="inline">
        <p>An Endpoint object representing the endpoint URL for service requests.</p> 
       </div></span> </li> 
    </ul> 
    <h3 class="inherited">Properties inherited from <span class="object_link"><a href="Service.html" title="AWS.Service (class)">AWS.Service</a></span></h3> 
    <p class="inherited"><span class="object_link"><a href="Service.html#apiVersions-property" title="AWS.Service.apiVersions (property)">apiVersions</a></span></p> 
    <h2> Method Summary <small><a href="#" class="summary_toggle">collapse</a></small> </h2> 
    <ul class="summary"> 
     <li class="public "> <span class="summary_signature"> <a href="#compareFaces-property" title="compareFaces"><strong>compareFaces</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Compares a face in the source input image with each face detected in the target input image.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#createCollection-property" title="createCollection"><strong>createCollection</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Creates a collection in an AWS Region.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#deleteCollection-property" title="deleteCollection"><strong>deleteCollection</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Deletes the specified collection.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#deleteFaces-property" title="deleteFaces"><strong>deleteFaces</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Deletes faces from a collection.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#detectFaces-property" title="detectFaces"><strong>detectFaces</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Detects faces within an image (JPEG or PNG) that is provided as input.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#detectLabels-property" title="detectLabels"><strong>detectLabels</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Detects instances of real-world labels within an image (JPEG or PNG) provided as input.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#detectModerationLabels-property" title="detectModerationLabels"><strong>detectModerationLabels</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Detects explicit or suggestive adult content in a specified JPEG or PNG format image.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#getCelebrityInfo-property" title="getCelebrityInfo"><strong>getCelebrityInfo</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Gets the name and additional information about a celebrity based on his or her Rekognition ID.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#indexFaces-property" title="indexFaces"><strong>indexFaces</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Detects faces in the input image and adds them to the specified collection.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#listCollections-property" title="listCollections"><strong>listCollections</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Returns list of collection IDs in your account.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#listFaces-property" title="listFaces"><strong>listFaces</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Returns metadata for faces in the specified collection.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#recognizeCelebrities-property" title="recognizeCelebrities"><strong>recognizeCelebrities</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>Returns an array of celebrities recognized in the input image.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#searchFaces-property" title="searchFaces"><strong>searchFaces</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>For a given input face ID, searches for matching faces in the collection the face belongs to.</p> 
       </div></span> </li> 
     <li class="public "> <span class="summary_signature"> <a href="#searchFacesByImage-property" title="searchFacesByImage"><strong>searchFacesByImage</strong>(params = {}, callback) ? AWS.Request </a> </span> <span class="summary_desc">
       <div class="inline">
        <p>For a given input image, first detects the largest face in the image, and then searches the specified collection for matching faces.</p> 
       </div></span> </li> 
    </ul> 
    <h3 class="inherited">Methods inherited from <span class="object_link"><a href="Service.html" title="AWS.Service (class)">AWS.Service</a></span></h3> 
    <p class="inherited"><span class="object_link"><a href="Service.html#makeRequest-property" title="AWS.Service.makeRequest (property)">makeRequest</a></span>, <span class="object_link"><a href="Service.html#makeUnauthenticatedRequest-property" title="AWS.Service.makeUnauthenticatedRequest (property)">makeUnauthenticatedRequest</a></span>, <span class="object_link"><a href="Service.html#waitFor-property" title="AWS.Service.waitFor (property)">waitFor</a></span>, <span class="object_link"><a href="Service.html#setupRequestListeners-property" title="AWS.Service.setupRequestListeners (property)">setupRequestListeners</a></span>, <span class="object_link"><a href="Service.html#defineService-property" title="AWS.Service.defineService (property)">defineService</a></span></p> 
    <div id="constructor_details" class="method_details_list"> 
     <h2>Constructor Details</h2> 
     <div class="method_details first"> 
      <h3 class="signature first" id="constructor-property"> new <strong>AWS.Rekognition</strong>(options = {}) ? <tt>Object</tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Constructs a service object. This object has one method for each API operation.</p> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Constructing a Rekognition object</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var rekognition = new AWS.Rekognition({apiVersion: '2016-06-27'});</code></pre> 
       </div> 
       <p class="tag_title">Options Hash (<tt>options</tt>):</p> 
       <ul class="option"> 
        <li> <span class="name">params</span> <span class="type">(<tt>map</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>An optional map of parameters to bind to every request sent by this service object. For more information on bound parameters, see <a href="/AWSJavaScriptSDK/guide/node-services.html#Bound_Parameters">"Working with Services" in the Getting Started Guide</a>.</p> 
         </div> </li> 
        <li> <span class="name">endpoint</span> <span class="type">(<tt>String</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>The endpoint URI to send requests to. The default endpoint is built from the configured <code>region</code>. The endpoint should be a string like <code>'https://{service}.{region}.amazonaws.com'</code>.</p> 
         </div> </li> 
        <li> <span class="name">accessKeyId</span> <span class="type">(<tt>String</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>your AWS access key ID.</p> 
         </div> </li> 
        <li> <span class="name">secretAccessKey</span> <span class="type">(<tt>String</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>your AWS secret access key.</p> 
         </div> </li> 
        <li> <span class="name">sessionToken</span> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Credentials.html" title="AWS.Credentials (class)">Credentials</a></span></tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>the optional AWS session token to sign requests with.</p> 
         </div> </li> 
        <li> <span class="name">credentials</span> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Credentials.html" title="AWS.Credentials (class)">Credentials</a></span></tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>the AWS credentials to sign requests with. You can either specify this object, or specify the accessKeyId and secretAccessKey options directly.</p> 
         </div> </li> 
        <li> <span class="name">credentialProvider</span> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="CredentialProviderChain.html" title="AWS.CredentialProviderChain (class)">CredentialProviderChain</a></span></tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>the provider chain used to resolve credentials if no static <code>credentials</code> property is set.</p> 
         </div> </li> 
        <li> <span class="name">region</span> <span class="type">(<tt>String</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>the region to send service requests to. See AWS.Rekognition.region for more information.</p> 
         </div> </li> 
        <li> <span class="name">maxRetries</span> <span class="type">(<tt>Integer</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>the maximum amount of retries to attempt with a request. See AWS.Rekognition.maxRetries for more information.</p> 
         </div> </li> 
        <li> <span class="name">maxRedirects</span> <span class="type">(<tt>Integer</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>the maximum amount of redirects to follow with a request. See AWS.Rekognition.maxRedirects for more information.</p> 
         </div> </li> 
        <li> <span class="name">sslEnabled</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>whether to enable SSL for requests.</p> 
         </div> </li> 
        <li> <span class="name">paramValidation</span> <span class="type">(<tt>Boolean|map</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>whether input parameters should be validated against the operation description before sending the request. Defaults to true. Pass a map to enable any of the following specific validation features:</p> 
          <ul> 
           <li><strong>min</strong> [Boolean] — Validates that a value meets the min constraint. This is enabled by default when paramValidation is set to <code>true</code>.</li> 
           <li><strong>max</strong> [Boolean] — Validates that a value meets the max constraint.</li> 
           <li><strong>pattern</strong> [Boolean] — Validates that a string value matches a regular expression.</li> 
           <li><strong>enum</strong> [Boolean] — Validates that a string value matches one of the allowable enum values.</li> 
          </ul> 
         </div> </li> 
        <li> <span class="name">computeChecksums</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>whether to compute checksums for payload bodies when the service accepts it (currently supported in S3 only)</p> 
         </div> </li> 
        <li> <span class="name">convertResponseTypes</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>whether types are converted when parsing response data. Currently only supported for JSON based services. Turning this off may improve performance on large response payloads. Defaults to <code>true</code>.</p> 
         </div> </li> 
        <li> <span class="name">correctClockSkew</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>whether to apply a clock skew correction and retry requests that fail because of an skewed client clock. Defaults to <code>false</code>.</p> 
         </div> </li> 
        <li> <span class="name">s3ForcePathStyle</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>whether to force path style URLs for S3 objects.</p> 
         </div> </li> 
        <li> <span class="name">s3BucketEndpoint</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>whether the provided endpoint addresses an individual bucket (false if it addresses the root API endpoint). Note that setting this configuration option requires an <code>endpoint</code> to be provided explicitly to the service constructor.</p> 
         </div> </li> 
        <li> <span class="name">s3DisableBodySigning</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>whether S3 body signing should be disabled when using signature version <code>v4</code>. Body signing can only be disabled when using https. Defaults to <code>true</code>.</p> 
         </div> </li> 
        <li> <span class="name">retryDelayOptions</span> <span class="type">(<tt>map</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>A set of options to configure the retry delay on retryable errors. Currently supported options are:</p> 
          <ul> 
           <li><strong>base</strong> [Integer] — The base number of milliseconds to use in the exponential backoff for operation retries. Defaults to 100 ms for all services except DynamoDB, where it defaults to 50ms.</li> 
           <li><strong>customBackoff </strong> [function] — A custom function that accepts a retry count and returns the amount of time to delay in milliseconds. The <code>base</code> option will be ignored if this option is supplied.</li> 
          </ul> 
         </div> </li> 
        <li> <span class="name">httpOptions</span> <span class="type">(<tt>map</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>A set of options to pass to the low-level HTTP request. Currently supported options are:</p> 
          <ul> 
           <li><strong>proxy</strong> [String] — the URL to proxy requests through</li> 
           <li><strong>agent</strong> [http.Agent, https.Agent] — the Agent object to perform HTTP requests with. Used for connection pooling. Defaults to the global agent (<code>http.globalAgent</code>) for non-SSL connections. Note that for SSL connections, a special Agent object is used in order to enable peer certificate verification. This feature is only available in the Node.js environment.</li> 
           <li><strong>connectTimeout</strong> [Integer] — Sets the socket to timeout after failing to establish a connection with the server after <code>connectTimeout</code> milliseconds. This timeout has no effect once a socket connection has been established.</li> 
           <li><strong>timeout</strong> [Integer] — Sets the socket to timeout after timeout milliseconds of inactivity on the socket. Defaults to two minutes (120000).</li> 
           <li><strong>xhrAsync</strong> [Boolean] — Whether the SDK will send asynchronous HTTP requests. Used in the browser environment only. Set to false to send requests synchronously. Defaults to true (async on).</li> 
           <li><strong>xhrWithCredentials</strong> [Boolean] — Sets the "withCredentials" property of an XMLHttpRequest object. Used in the browser environment only. Defaults to false.</li> 
          </ul> 
         </div> </li> 
        <li> <span class="name">apiVersion</span> <span class="type">(<tt>String</tt>, <tt>Date</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>a String in YYYY-MM-DD format (or a date) that represents the latest possible API version that can be used in all services (unless overridden by <code>apiVersions</code>). Specify 'latest' to use the latest possible version.</p> 
         </div> </li> 
        <li> <span class="name">apiVersions</span> <span class="type">(<tt>map&lt;String, String|Date&gt;</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>a map of service identifiers (the lowercase service class name) with the API version to use when instantiating a service. Specify 'latest' for each individual that can use the latest available version.</p> 
         </div> </li> 
        <li> <span class="name">logger</span> <span class="type">(<tt>#write</tt>, <tt>#log</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>an object that responds to .write() (like a stream) or .log() (like the console object) in order to log information about requests</p> 
         </div> </li> 
        <li> <span class="name">systemClockOffset</span> <span class="type">(<tt>Number</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>an offset value in milliseconds to apply to all signing times. Use this to compensate for clock skew when your system may be out of sync with the service time. Note that this configuration option can only be applied to the global <code>AWS.config</code> object and cannot be overridden in service-specific configuration. Defaults to 0 milliseconds.</p> 
         </div> </li> 
        <li> <span class="name">signatureVersion</span> <span class="type">(<tt>String</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>the signature version to sign requests with (overriding the API configuration). Possible values are: 'v2', 'v3', 'v4'.</p> 
         </div> </li> 
        <li> <span class="name">signatureCache</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>whether the signature to sign requests with (overriding the API configuration) is cached. Only applies to the signature version 'v4'. Defaults to <code>true</code>.</p> 
         </div> </li> 
        <li> <span class="name">dynamoDbCrc32</span> <span class="type">(<tt>Boolean</tt>)</span> <span class="default"> </span> — 
         <div class="inline">
          <p>whether to validate the CRC32 checksum of HTTP response bodies returned by DynamoDB. Default: <code>true</code>.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
    </div> 
    <div id="prop_details" class="method_details"> 
     <h2>Property Details</h2> 
     <div class="method_details first"> 
      <h3 class="signature first" id="endpoint-property"> <strong>endpoint</strong> ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Endpoint.html" title="AWS.Endpoint (class)">Endpoint</a></span></tt> <span class="extras">(readwrite)</span> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Returns an Endpoint object representing the endpoint URL for service requests.</p> 
       </div> 
      </div> 
      <div class="tags"> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Endpoint.html" title="AWS.Endpoint (class)">Endpoint</a></span></tt>)</span> — 
         <div class="inline">
          <p>an Endpoint object representing the endpoint URL for service requests.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
    </div> 
    <div id="method_details" class="method_details"> 
     <h2>Method Details</h2> 
     <div class="method_details first"> 
      <h3 class="signature first" id="compareFaces-property"> <strong>compareFaces</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Compares a face in the <i>source</i> input image with each face detected in the <i>target</i> input image. </p> 
        <p> </p>
        <div class="note">
         <strong>Note:</strong> If the source image contains multiple faces, the service detects the largest face and compares it with each face detected in the target image. 
        </div> 
        <p>In response, the operation returns an array of face matches ordered by similarity score in descending order. For each face match, the response provides a bounding box of the face, facial landmarks, pose details (pitch, role, and yaw), quality (brightness and sharpness), and confidence value (indicating the level of confidence that the bounding box contains a face). The response also provides a similarity score, which indicates how closely the faces match. </p> 
        <div class="note">
         <strong>Note:</strong> By default, only faces with a similarity score of greater than or equal to 80% are returned in the response. You can change this value by specifying the 
         <code>SimilarityThreshold</code> parameter. 
        </div> 
        <p> <code>CompareFaces</code> also returns an array of faces that don't match the source image. For each face, it returns a bounding box, confidence value, landmarks, pose details, and quality. The response also returns information about the face in the source image, including the bounding box of the face and confidence value.</p> 
        <p>If the image doesn't contain Exif metadata, <code>CompareFaces</code> returns orientation information for the source and target images. Use these values to display the images with the correct image orientation.</p> 
        <div class="note">
         <strong>Note:</strong> This is a stateless API operation. That is, data returned by this operation doesn't persist. 
        </div> 
        <p>For an example, see <a>get-started-exercise-compare-faces</a>.</p> 
        <p>This operation requires permissions to perform the <code>rekognition:CompareFaces</code> action.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/CompareFaces">CompareFaces</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To compare two images</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation compares the largest face detected in the source image with each face detected in the target image. */

 var params = {
  SimilarityThreshold: 90, 
  SourceImage: {
   S3Object: {
    Bucket: "mybucket", 
    Name: "mysourceimage"
   }
  }, 
  TargetImage: {
   S3Object: {
    Bucket: "mybucket", 
    Name: "mytargetimage"
   }
  }
 };
 rekognition.compareFaces(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    FaceMatches: [
       {
      Face: {
       BoundingBox: {
        Height: 0.33481481671333313, 
        Left: 0.31888890266418457, 
        Top: 0.4933333396911621, 
        Width: 0.25
       }, 
       Confidence: 99.9991226196289
      }, 
      Similarity: 100
     }
    ], 
    SourceImageFace: {
     BoundingBox: {
      Height: 0.33481481671333313, 
      Left: 0.31888890266418457, 
      Top: 0.4933333396911621, 
      Width: 0.25
     }, 
     Confidence: 99.9991226196289
    }
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the compareFaces operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  SourceImage: { /* required */
    Bytes: new Buffer('...') || 'STRING_VALUE' /* Strings will be Base-64 encoded on your behalf */,
    S3Object: {
      Bucket: 'STRING_VALUE',
      Name: 'STRING_VALUE',
      Version: 'STRING_VALUE'
    }
  },
  TargetImage: { /* required */
    Bytes: new Buffer('...') || 'STRING_VALUE' /* Strings will be Base-64 encoded on your behalf */,
    S3Object: {
      Bucket: 'STRING_VALUE',
      Name: 'STRING_VALUE',
      Version: 'STRING_VALUE'
    }
  },
  SimilarityThreshold: 0.0
};
rekognition.compareFaces(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>SourceImage</code> — (<code>map</code>) <p>The source image, either as bytes or as an S3 object.</p> 
            <ul> 
             <li><code>Bytes</code> — (<code>Buffer, Typed Array, Blob, String</code>) <p>Blob of image bytes up to 5 MBs.</p></li> 
             <li><code>S3Object</code> — (<code>map</code>) <p>Identifies an S3 object as the image source.</p> 
              <ul> 
               <li><code>Bucket</code> — (<code>String</code>) <p>Name of the S3 bucket.</p></li> 
               <li><code>Name</code> — (<code>String</code>) <p>S3 object key name.</p></li> 
               <li><code>Version</code> — (<code>String</code>) <p>If the bucket is versioning enabled, you can specify the object version. </p></li> 
              </ul> </li> 
            </ul> </li> 
           <li><code>TargetImage</code> — (<code>map</code>) <p>The target image, either as bytes or as an S3 object.</p> 
            <ul> 
             <li><code>Bytes</code> — (<code>Buffer, Typed Array, Blob, String</code>) <p>Blob of image bytes up to 5 MBs.</p></li> 
             <li><code>S3Object</code> — (<code>map</code>) <p>Identifies an S3 object as the image source.</p> 
              <ul> 
               <li><code>Bucket</code> — (<code>String</code>) <p>Name of the S3 bucket.</p></li> 
               <li><code>Name</code> — (<code>String</code>) <p>S3 object key name.</p></li> 
               <li><code>Version</code> — (<code>String</code>) <p>If the bucket is versioning enabled, you can specify the object version. </p></li> 
              </ul> </li> 
            </ul> </li> 
           <li><code>SimilarityThreshold</code> — (<code>Float</code>) <p>The minimum level of confidence in the face matches that a match must meet to be included in the <code>FaceMatches</code> array.</p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>SourceImageFace</code> — (<code>map</code>) <p>The face in the source image that was used for comparison.</p> 
               <ul> 
                <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                 <ul> 
                  <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                  <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                  <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                  <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                 </ul> </li> 
                <li><code>Confidence</code> — (<code>Float</code>) <p>Confidence level that the selected bounding box contains a face.</p></li> 
               </ul> </li> 
              <li><code>FaceMatches</code> — (<code>Array&lt;map&gt;</code>) <p>An array of faces in the target image that match the source image face. Each <code>CompareFacesMatch</code> object provides the bounding box, the confidence level that the bounding box contains a face, and the similarity score for the face in the bounding box and the face in the source image.</p> 
               <ul> 
                <li><code>Similarity</code> — (<code>Float</code>) <p>Level of confidence that the faces match.</p></li> 
                <li><code>Face</code> — (<code>map</code>) <p>Provides face metadata (bounding box and confidence that the bounding box actually contains a face).</p> 
                 <ul> 
                  <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                   <ul> 
                    <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                    <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                    <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                    <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                   </ul> </li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence that what the bounding box contains is a face.</p></li> 
                  <li><code>Landmarks</code> — (<code>Array&lt;map&gt;</code>) <p>An array of facial landmarks.</p> 
                   <ul> 
                    <li><code>Type</code> — (<code>String</code>) <p>Type of the landmark.</p> Possible values include: 
                     <ul> 
                      <li><code>"eyeLeft"</code></li> 
                      <li><code>"eyeRight"</code></li> 
                      <li><code>"nose"</code></li> 
                      <li><code>"mouthLeft"</code></li> 
                      <li><code>"mouthRight"</code></li> 
                      <li><code>"leftEyeBrowLeft"</code></li> 
                      <li><code>"leftEyeBrowRight"</code></li> 
                      <li><code>"leftEyeBrowUp"</code></li> 
                      <li><code>"rightEyeBrowLeft"</code></li> 
                      <li><code>"rightEyeBrowRight"</code></li> 
                      <li><code>"rightEyeBrowUp"</code></li> 
                      <li><code>"leftEyeLeft"</code></li> 
                      <li><code>"leftEyeRight"</code></li> 
                      <li><code>"leftEyeUp"</code></li> 
                      <li><code>"leftEyeDown"</code></li> 
                      <li><code>"rightEyeLeft"</code></li> 
                      <li><code>"rightEyeRight"</code></li> 
                      <li><code>"rightEyeUp"</code></li> 
                      <li><code>"rightEyeDown"</code></li> 
                      <li><code>"noseLeft"</code></li> 
                      <li><code>"noseRight"</code></li> 
                      <li><code>"mouthUp"</code></li> 
                      <li><code>"mouthDown"</code></li> 
                      <li><code>"leftPupil"</code></li> 
                      <li><code>"rightPupil"</code></li> 
                     </ul> </li> 
                    <li><code>X</code> — (<code>Float</code>) <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. </p></li> 
                    <li><code>Y</code> — (<code>Float</code>) <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.</p></li> 
                   </ul> </li> 
                  <li><code>Pose</code> — (<code>map</code>) <p>Indicates the pose of the face as determined by its pitch, roll, and yaw.</p> 
                   <ul> 
                    <li><code>Roll</code> — (<code>Float</code>) <p>Value representing the face rotation on the roll axis.</p></li> 
                    <li><code>Yaw</code> — (<code>Float</code>) <p>Value representing the face rotation on the yaw axis.</p></li> 
                    <li><code>Pitch</code> — (<code>Float</code>) <p>Value representing the face rotation on the pitch axis.</p></li> 
                   </ul> </li> 
                  <li><code>Quality</code> — (<code>map</code>) <p>Identifies face image brightness and sharpness. </p> 
                   <ul> 
                    <li><code>Brightness</code> — (<code>Float</code>) <p>Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.</p></li> 
                    <li><code>Sharpness</code> — (<code>Float</code>) <p>Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.</p></li> 
                   </ul> </li> 
                 </ul> </li> 
               </ul> </li> 
              <li><code>UnmatchedFaces</code> — (<code>Array&lt;map&gt;</code>) <p>An array of faces in the target image that did not match the source image face.</p> 
               <ul> 
                <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                 <ul> 
                  <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                  <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                  <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                  <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                 </ul> </li> 
                <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence that what the bounding box contains is a face.</p></li> 
                <li><code>Landmarks</code> — (<code>Array&lt;map&gt;</code>) <p>An array of facial landmarks.</p> 
                 <ul> 
                  <li><code>Type</code> — (<code>String</code>) <p>Type of the landmark.</p> Possible values include: 
                   <ul> 
                    <li><code>"eyeLeft"</code></li> 
                    <li><code>"eyeRight"</code></li> 
                    <li><code>"nose"</code></li> 
                    <li><code>"mouthLeft"</code></li> 
                    <li><code>"mouthRight"</code></li> 
                    <li><code>"leftEyeBrowLeft"</code></li> 
                    <li><code>"leftEyeBrowRight"</code></li> 
                    <li><code>"leftEyeBrowUp"</code></li> 
                    <li><code>"rightEyeBrowLeft"</code></li> 
                    <li><code>"rightEyeBrowRight"</code></li> 
                    <li><code>"rightEyeBrowUp"</code></li> 
                    <li><code>"leftEyeLeft"</code></li> 
                    <li><code>"leftEyeRight"</code></li> 
                    <li><code>"leftEyeUp"</code></li> 
                    <li><code>"leftEyeDown"</code></li> 
                    <li><code>"rightEyeLeft"</code></li> 
                    <li><code>"rightEyeRight"</code></li> 
                    <li><code>"rightEyeUp"</code></li> 
                    <li><code>"rightEyeDown"</code></li> 
                    <li><code>"noseLeft"</code></li> 
                    <li><code>"noseRight"</code></li> 
                    <li><code>"mouthUp"</code></li> 
                    <li><code>"mouthDown"</code></li> 
                    <li><code>"leftPupil"</code></li> 
                    <li><code>"rightPupil"</code></li> 
                   </ul> </li> 
                  <li><code>X</code> — (<code>Float</code>) <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. </p></li> 
                  <li><code>Y</code> — (<code>Float</code>) <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.</p></li> 
                 </ul> </li> 
                <li><code>Pose</code> — (<code>map</code>) <p>Indicates the pose of the face as determined by its pitch, roll, and yaw.</p> 
                 <ul> 
                  <li><code>Roll</code> — (<code>Float</code>) <p>Value representing the face rotation on the roll axis.</p></li> 
                  <li><code>Yaw</code> — (<code>Float</code>) <p>Value representing the face rotation on the yaw axis.</p></li> 
                  <li><code>Pitch</code> — (<code>Float</code>) <p>Value representing the face rotation on the pitch axis.</p></li> 
                 </ul> </li> 
                <li><code>Quality</code> — (<code>map</code>) <p>Identifies face image brightness and sharpness. </p> 
                 <ul> 
                  <li><code>Brightness</code> — (<code>Float</code>) <p>Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.</p></li> 
                  <li><code>Sharpness</code> — (<code>Float</code>) <p>Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.</p></li> 
                 </ul> </li> 
               </ul> </li> 
              <li><code>SourceImageOrientationCorrection</code> — (<code>String</code>) <p> The orientation of the source image (counterclockwise direction). If your application displays the source image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>SourceImageFace</code> represent the location of the face before the image orientation is corrected. </p> 
               <div class="note">
                <strong>Note:</strong> If the source image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If the Exif metadata for the source image populates the orientation field, the value of 
                <code>OrientationCorrection</code> is null and the 
                <code>SourceImageFace</code> bounding box coordinates represent the location of the face after Exif metadata is used to correct the orientation. Images in .png format don't contain Exif metadata. 
               </div> Possible values include: 
               <ul> 
                <li><code>"ROTATE_0"</code></li> 
                <li><code>"ROTATE_90"</code></li> 
                <li><code>"ROTATE_180"</code></li> 
                <li><code>"ROTATE_270"</code></li> 
               </ul> </li> 
              <li><code>TargetImageOrientationCorrection</code> — (<code>String</code>) <p> The orientation of the target image (in counterclockwise direction). If your application displays the target image, you can use this value to correct the orientation of the image. The bounding box coordinates returned in <code>FaceMatches</code> and <code>UnmatchedFaces</code> represent face locations before the image orientation is corrected. </p> 
               <div class="note">
                <strong>Note:</strong> If the target image is in .jpg format, it might contain Exif metadata that includes the orientation of the image. If the Exif metadata for the target image populates the orientation field, the value of 
                <code>OrientationCorrection</code> is null and the bounding box coordinates in 
                <code>FaceMatches</code> and 
                <code>UnmatchedFaces</code> represent the location of the face after Exif metadata is used to correct the orientation. Images in .png format don't contain Exif metadata. 
               </div> Possible values include: 
               <ul> 
                <li><code>"ROTATE_0"</code></li> 
                <li><code>"ROTATE_90"</code></li> 
                <li><code>"ROTATE_180"</code></li> 
                <li><code>"ROTATE_270"</code></li> 
               </ul> </li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="createCollection-property"> <strong>createCollection</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Creates a collection in an AWS Region. You can add faces to the collection using the operation. </p> 
        <p> </p>
        <p>For example, you might create collections, one for each of your application users. A user can then index faces using the <code>IndexFaces</code> operation and persist results in a specific collection. Then, a user can search the collection for faces in the user-specific container. </p> 
        <div class="note">
         <strong>Note:</strong> Collection names are case-sensitive. 
        </div> 
        <p>For an example, see <a>example1</a>. </p> 
        <p>This operation requires permissions to perform the <code>rekognition:CreateCollection</code> action.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/CreateCollection">CreateCollection</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To create a collection</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation creates a Rekognition collection for storing image data. */

 var params = {
  CollectionId: "myphotos"
 };
 rekognition.createCollection(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    CollectionArn: "aws:rekognition:us-west-2:123456789012:collection/myphotos", 
    StatusCode: 200
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the createCollection operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  CollectionId: 'STRING_VALUE' /* required */
};
rekognition.createCollection(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>CollectionId</code> — (<code>String</code>) <p>ID for the collection that you are creating.</p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>StatusCode</code> — (<code>Integer</code>) <p>HTTP status code indicating the result of the operation.</p></li> 
              <li><code>CollectionArn</code> — (<code>String</code>) <p>Amazon Resource Name (ARN) of the collection. You can use this to manage permissions on your resources. </p></li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="deleteCollection-property"> <strong>deleteCollection</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Deletes the specified collection. Note that this operation removes all faces in the collection. For an example, see <a>example1</a>.</p> 
        <p> </p>
        <p>This operation requires permissions to perform the <code>rekognition:DeleteCollection</code> action.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/DeleteCollection">DeleteCollection</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To delete a collection</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation deletes a Rekognition collection. */

 var params = {
  CollectionId: "myphotos"
 };
 rekognition.deleteCollection(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    StatusCode: 200
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the deleteCollection operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  CollectionId: 'STRING_VALUE' /* required */
};
rekognition.deleteCollection(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>CollectionId</code> — (<code>String</code>) <p>ID of the collection to delete.</p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>StatusCode</code> — (<code>Integer</code>) <p>HTTP status code that indicates the result of the operation.</p></li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="deleteFaces-property"> <strong>deleteFaces</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Deletes faces from a collection. You specify a collection ID and an array of face IDs to remove from the collection.</p> 
        <p> </p>
        <p>This operation requires permissions to perform the <code>rekognition:DeleteFaces</code> action.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/DeleteFaces">DeleteFaces</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To delete a face</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation deletes one or more faces from a Rekognition collection. */

 var params = {
  CollectionId: "myphotos", 
  FaceIds: [
     "ff43d742-0c13-5d16-a3e8-03d3f58e980b"
  ]
 };
 rekognition.deleteFaces(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    DeletedFaces: [
       "ff43d742-0c13-5d16-a3e8-03d3f58e980b"
    ]
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the deleteFaces operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  CollectionId: 'STRING_VALUE', /* required */
  FaceIds: [ /* required */
    'STRING_VALUE',
    /* more items */
  ]
};
rekognition.deleteFaces(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>CollectionId</code> — (<code>String</code>) <p>Collection from which to remove the specific faces.</p></li> 
           <li><code>FaceIds</code> — (<code>Array&lt;String&gt;</code>) <p>An array of face IDs to delete.</p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>DeletedFaces</code> — (<code>Array&lt;String&gt;</code>) <p>An array of strings (face IDs) of the faces that were deleted.</p></li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="detectFaces-property"> <strong>detectFaces</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Detects faces within an image (JPEG or PNG) that is provided as input.</p> 
        <p> </p>
        <p> For each face detected, the operation returns face details including a bounding box of the face, a confidence value (that the bounding box contains a face), and a fixed set of attributes such as facial landmarks (for example, coordinates of eye and mouth), gender, presence of beard, sunglasses, etc. </p> 
        <p>The face-detection algorithm is most effective on frontal faces. For non-frontal or obscured faces, the algorithm may not detect the faces or might detect faces with lower confidence. </p> 
        <div class="note">
         <strong>Note:</strong> This is a stateless API operation. That is, the operation does not persist any data. 
        </div> 
        <p>For an example, see <a>get-started-exercise-detect-faces</a>.</p> 
        <p>This operation requires permissions to perform the <code>rekognition:DetectFaces</code> action. </p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/DetectFaces">DetectFaces</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To detect faces in an image</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation detects faces in an image stored in an AWS S3 bucket. */

 var params = {
  Image: {
   S3Object: {
    Bucket: "mybucket", 
    Name: "myphoto"
   }
  }
 };
 rekognition.detectFaces(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    FaceDetails: [
       {
      BoundingBox: {
       Height: 0.18000000715255737, 
       Left: 0.5555555820465088, 
       Top: 0.33666667342185974, 
       Width: 0.23999999463558197
      }, 
      Confidence: 100, 
      Landmarks: [
         {
        Type: "eyeLeft", 
        X: 0.6394737362861633, 
        Y: 0.40819624066352844
       }, 
         {
        Type: "eyeRight", 
        X: 0.7266660928726196, 
        Y: 0.41039225459098816
       }, 
         {
        Type: "eyeRight", 
        X: 0.6912462115287781, 
        Y: 0.44240960478782654
       }, 
         {
        Type: "mouthDown", 
        X: 0.6306198239326477, 
        Y: 0.46700039505958557
       }, 
         {
        Type: "mouthUp", 
        X: 0.7215608954429626, 
        Y: 0.47114261984825134
       }
      ], 
      Pose: {
       Pitch: 4.050806522369385, 
       Roll: 0.9950747489929199, 
       Yaw: 13.693790435791016
      }, 
      Quality: {
       Brightness: 37.60169982910156, 
       Sharpness: 80
      }
     }
    ], 
    OrientationCorrection: "ROTATE_0"
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the detectFaces operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  Image: { /* required */
    Bytes: new Buffer('...') || 'STRING_VALUE' /* Strings will be Base-64 encoded on your behalf */,
    S3Object: {
      Bucket: 'STRING_VALUE',
      Name: 'STRING_VALUE',
      Version: 'STRING_VALUE'
    }
  },
  Attributes: [
    DEFAULT | ALL,
    /* more items */
  ]
};
rekognition.detectFaces(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>Image</code> — (<code>map</code>) <p>The image in which you want to detect faces. You can specify a blob or an S3 object. </p> 
            <ul> 
             <li><code>Bytes</code> — (<code>Buffer, Typed Array, Blob, String</code>) <p>Blob of image bytes up to 5 MBs.</p></li> 
             <li><code>S3Object</code> — (<code>map</code>) <p>Identifies an S3 object as the image source.</p> 
              <ul> 
               <li><code>Bucket</code> — (<code>String</code>) <p>Name of the S3 bucket.</p></li> 
               <li><code>Name</code> — (<code>String</code>) <p>S3 object key name.</p></li> 
               <li><code>Version</code> — (<code>String</code>) <p>If the bucket is versioning enabled, you can specify the object version. </p></li> 
              </ul> </li> 
            </ul> </li> 
           <li><code>Attributes</code> — (<code>Array&lt;String&gt;</code>) <p>An array of facial attributes you want to be returned. This can be the default list of attributes or all attributes. If you don't specify a value for <code>Attributes</code> or if you specify <code>["DEFAULT"]</code>, the API returns the following subset of facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>, <code>Quality</code> and <code>Landmarks</code>. If you provide <code>["ALL"]</code>, all facial attributes are returned but the operation will take longer to complete.</p> <p>If you provide both, <code>["ALL", "DEFAULT"]</code>, the service uses a logical AND operator to determine which attributes to return (in this case, all attributes). </p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>FaceDetails</code> — (<code>Array&lt;map&gt;</code>) <p>Details of each face found in the image. </p> 
               <ul> 
                <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                 <ul> 
                  <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                  <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                  <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                  <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                 </ul> </li> 
                <li><code>AgeRange</code> — (<code>map</code>) <p>The estimated age range, in years, for the face. Low represents the lowest estimated age and High represents the highest estimated age.</p> 
                 <ul> 
                  <li><code>Low</code> — (<code>Integer</code>) <p>The lowest estimated age.</p></li> 
                  <li><code>High</code> — (<code>Integer</code>) <p>The highest estimated age.</p></li> 
                 </ul> </li> 
                <li><code>Smile</code> — (<code>map</code>) <p>Indicates whether or not the face is smiling, and the confidence level in the determination.</p> 
                 <ul> 
                  <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the face is smiling or not.</p></li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                 </ul> </li> 
                <li><code>Eyeglasses</code> — (<code>map</code>) <p>Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.</p> 
                 <ul> 
                  <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the face is wearing eye glasses or not.</p></li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                 </ul> </li> 
                <li><code>Sunglasses</code> — (<code>map</code>) <p>Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.</p> 
                 <ul> 
                  <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the face is wearing sunglasses or not.</p></li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                 </ul> </li> 
                <li><code>Gender</code> — (<code>map</code>) <p>Gender of the face and the confidence level in the determination.</p> 
                 <ul> 
                  <li><code>Value</code> — (<code>String</code>) <p>Gender of the face.</p> Possible values include: 
                   <ul> 
                    <li><code>"Male"</code></li> 
                    <li><code>"Female"</code></li> 
                   </ul> </li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                 </ul> </li> 
                <li><code>Beard</code> — (<code>map</code>) <p>Indicates whether or not the face has a beard, and the confidence level in the determination.</p> 
                 <ul> 
                  <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the face has beard or not.</p></li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                 </ul> </li> 
                <li><code>Mustache</code> — (<code>map</code>) <p>Indicates whether or not the face has a mustache, and the confidence level in the determination.</p> 
                 <ul> 
                  <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the face has mustache or not.</p></li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                 </ul> </li> 
                <li><code>EyesOpen</code> — (<code>map</code>) <p>Indicates whether or not the eyes on the face are open, and the confidence level in the determination.</p> 
                 <ul> 
                  <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the eyes on the face are open.</p></li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                 </ul> </li> 
                <li><code>MouthOpen</code> — (<code>map</code>) <p>Indicates whether or not the mouth on the face is open, and the confidence level in the determination.</p> 
                 <ul> 
                  <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the mouth on the face is open or not.</p></li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                 </ul> </li> 
                <li><code>Emotions</code> — (<code>Array&lt;map&gt;</code>) <p>The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY. </p> 
                 <ul> 
                  <li><code>Type</code> — (<code>String</code>) <p>Type of emotion detected.</p> Possible values include: 
                   <ul> 
                    <li><code>"HAPPY"</code></li> 
                    <li><code>"SAD"</code></li> 
                    <li><code>"ANGRY"</code></li> 
                    <li><code>"CONFUSED"</code></li> 
                    <li><code>"DISGUSTED"</code></li> 
                    <li><code>"SURPRISED"</code></li> 
                    <li><code>"CALM"</code></li> 
                    <li><code>"UNKNOWN"</code></li> 
                   </ul> </li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                 </ul> </li> 
                <li><code>Landmarks</code> — (<code>Array&lt;map&gt;</code>) <p>Indicates the location of landmarks on the face.</p> 
                 <ul> 
                  <li><code>Type</code> — (<code>String</code>) <p>Type of the landmark.</p> Possible values include: 
                   <ul> 
                    <li><code>"eyeLeft"</code></li> 
                    <li><code>"eyeRight"</code></li> 
                    <li><code>"nose"</code></li> 
                    <li><code>"mouthLeft"</code></li> 
                    <li><code>"mouthRight"</code></li> 
                    <li><code>"leftEyeBrowLeft"</code></li> 
                    <li><code>"leftEyeBrowRight"</code></li> 
                    <li><code>"leftEyeBrowUp"</code></li> 
                    <li><code>"rightEyeBrowLeft"</code></li> 
                    <li><code>"rightEyeBrowRight"</code></li> 
                    <li><code>"rightEyeBrowUp"</code></li> 
                    <li><code>"leftEyeLeft"</code></li> 
                    <li><code>"leftEyeRight"</code></li> 
                    <li><code>"leftEyeUp"</code></li> 
                    <li><code>"leftEyeDown"</code></li> 
                    <li><code>"rightEyeLeft"</code></li> 
                    <li><code>"rightEyeRight"</code></li> 
                    <li><code>"rightEyeUp"</code></li> 
                    <li><code>"rightEyeDown"</code></li> 
                    <li><code>"noseLeft"</code></li> 
                    <li><code>"noseRight"</code></li> 
                    <li><code>"mouthUp"</code></li> 
                    <li><code>"mouthDown"</code></li> 
                    <li><code>"leftPupil"</code></li> 
                    <li><code>"rightPupil"</code></li> 
                   </ul> </li> 
                  <li><code>X</code> — (<code>Float</code>) <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. </p></li> 
                  <li><code>Y</code> — (<code>Float</code>) <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.</p></li> 
                 </ul> </li> 
                <li><code>Pose</code> — (<code>map</code>) <p>Indicates the pose of the face as determined by its pitch, roll, and yaw.</p> 
                 <ul> 
                  <li><code>Roll</code> — (<code>Float</code>) <p>Value representing the face rotation on the roll axis.</p></li> 
                  <li><code>Yaw</code> — (<code>Float</code>) <p>Value representing the face rotation on the yaw axis.</p></li> 
                  <li><code>Pitch</code> — (<code>Float</code>) <p>Value representing the face rotation on the pitch axis.</p></li> 
                 </ul> </li> 
                <li><code>Quality</code> — (<code>map</code>) <p>Identifies image brightness and sharpness.</p> 
                 <ul> 
                  <li><code>Brightness</code> — (<code>Float</code>) <p>Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.</p></li> 
                  <li><code>Sharpness</code> — (<code>Float</code>) <p>Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.</p></li> 
                 </ul> </li> 
                <li><code>Confidence</code> — (<code>Float</code>) <p>Confidence level that the bounding box contains a face (and not a different object such as a tree).</p></li> 
               </ul> </li> 
              <li><code>OrientationCorrection</code> — (<code>String</code>) <p> The orientation of the input image (counter-clockwise direction). If your application displays the image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>FaceDetails</code> represent face locations before the image orientation is corrected. </p> 
               <div class="note">
                <strong>Note:</strong> If the input image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If so, and the Exif metadata for the input image populates the orientation field, the value of 
                <code>OrientationCorrection</code> is null and the 
                <code>FaceDetails</code> bounding box coordinates represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. 
               </div> Possible values include: 
               <ul> 
                <li><code>"ROTATE_0"</code></li> 
                <li><code>"ROTATE_90"</code></li> 
                <li><code>"ROTATE_180"</code></li> 
                <li><code>"ROTATE_270"</code></li> 
               </ul> </li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="detectLabels-property"> <strong>detectLabels</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Detects instances of real-world labels within an image (JPEG or PNG) provided as input. This includes objects like flower, tree, and table; events like wedding, graduation, and birthday party; and concepts like landscape, evening, and nature. For an example, see <a>get-started-exercise-detect-labels</a>.</p> 
        <p> </p>
        <p> For each object, scene, and concept the API returns one or more labels. Each label provides the object name, and the level of confidence that the image contains the object. For example, suppose the input image has a lighthouse, the sea, and a rock. The response will include all three labels, one for each object. </p> 
        <p> <code>{Name: lighthouse, Confidence: 98.4629}</code> </p> 
        <p> <code>{Name: rock,Confidence: 79.2097}</code> </p> 
        <p> <code> {Name: sea,Confidence: 75.061}</code> </p> 
        <p> In the preceding example, the operation returns one label for each of the three objects. The operation can also return multiple labels for the same object in the image. For example, if the input image shows a flower (for example, a tulip), the operation might return the following three labels. </p> 
        <p> <code>{Name: flower,Confidence: 99.0562}</code> </p> 
        <p> <code>{Name: plant,Confidence: 99.0562}</code> </p> 
        <p> <code>{Name: tulip,Confidence: 99.0562}</code> </p> 
        <p>In this example, the detection algorithm more precisely identifies the flower as a tulip.</p> 
        <p>You can provide the input image as an S3 object or as base64-encoded bytes. In response, the API returns an array of labels. In addition, the response also includes the orientation correction. Optionally, you can specify <code>MinConfidence</code> to control the confidence threshold for the labels returned. The default is 50%. You can also add the <code>MaxLabels</code> parameter to limit the number of labels returned. </p> 
        <div class="note">
         <strong>Note:</strong> If the object detected is a person, the operation doesn't provide the same facial details that the 
         <a>DetectFaces</a> operation provides. 
        </div> 
        <p>This is a stateless API operation. That is, the operation does not persist any data.</p> 
        <p>This operation requires permissions to perform the <code>rekognition:DetectLabels</code> action. </p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/DetectLabels">DetectLabels</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To detect labels</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation detects labels in the supplied image */

 var params = {
  Image: {
   S3Object: {
    Bucket: "mybucket", 
    Name: "myphoto"
   }
  }, 
  MaxLabels: 123, 
  MinConfidence: 70
 };
 rekognition.detectLabels(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    Labels: [
       {
      Confidence: 99.25072479248047, 
      Name: "People"
     }, 
       {
      Confidence: 99.25074005126953, 
      Name: "Person"
     }
    ]
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the detectLabels operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  Image: { /* required */
    Bytes: new Buffer('...') || 'STRING_VALUE' /* Strings will be Base-64 encoded on your behalf */,
    S3Object: {
      Bucket: 'STRING_VALUE',
      Name: 'STRING_VALUE',
      Version: 'STRING_VALUE'
    }
  },
  MaxLabels: 0,
  MinConfidence: 0.0
};
rekognition.detectLabels(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>Image</code> — (<code>map</code>) <p>The input image. You can provide a blob of image bytes or an S3 object.</p> 
            <ul> 
             <li><code>Bytes</code> — (<code>Buffer, Typed Array, Blob, String</code>) <p>Blob of image bytes up to 5 MBs.</p></li> 
             <li><code>S3Object</code> — (<code>map</code>) <p>Identifies an S3 object as the image source.</p> 
              <ul> 
               <li><code>Bucket</code> — (<code>String</code>) <p>Name of the S3 bucket.</p></li> 
               <li><code>Name</code> — (<code>String</code>) <p>S3 object key name.</p></li> 
               <li><code>Version</code> — (<code>String</code>) <p>If the bucket is versioning enabled, you can specify the object version. </p></li> 
              </ul> </li> 
            </ul> </li> 
           <li><code>MaxLabels</code> — (<code>Integer</code>) <p>Maximum number of labels you want the service to return in the response. The service returns the specified number of highest confidence labels. </p></li> 
           <li><code>MinConfidence</code> — (<code>Float</code>) <p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with confidence lower than this specified value.</p> <p>If <code>MinConfidence</code> is not specified, the operation returns labels with a confidence values greater than or equal to 50 percent.</p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>Labels</code> — (<code>Array&lt;map&gt;</code>) <p>An array of labels for the real-world objects detected. </p> 
               <ul> 
                <li><code>Name</code> — (<code>String</code>) <p>The name (label) of the object.</p></li> 
                <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence.</p></li> 
               </ul> </li> 
              <li><code>OrientationCorrection</code> — (<code>String</code>) <p> The orientation of the input image (counter-clockwise direction). If your application displays the image, you can use this value to correct the orientation. If Amazon Rekognition detects that the input image was rotated (for example, by 90 degrees), it first corrects the orientation before detecting the labels. </p> 
               <div class="note">
                <strong>Note:</strong> If the input image Exif metadata populates the orientation field, Amazon Rekognition does not perform orientation correction and the value of OrientationCorrection will be null. 
               </div> Possible values include: 
               <ul> 
                <li><code>"ROTATE_0"</code></li> 
                <li><code>"ROTATE_90"</code></li> 
                <li><code>"ROTATE_180"</code></li> 
                <li><code>"ROTATE_270"</code></li> 
               </ul> </li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="detectModerationLabels-property"> <strong>detectModerationLabels</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Detects explicit or suggestive adult content in a specified JPEG or PNG format image. Use <code>DetectModerationLabels</code> to moderate images depending on your requirements. For example, you might want to filter images that contain nudity, but not images containing suggestive content.</p> 
        <p> </p>
        <p>To filter images, use the labels returned by <code>DetectModerationLabels</code> to determine which types of content are appropriate. For information about moderation labels, see <a>image-moderation</a>.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/DetectModerationLabels">DetectModerationLabels</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the detectModerationLabels operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  Image: { /* required */
    Bytes: new Buffer('...') || 'STRING_VALUE' /* Strings will be Base-64 encoded on your behalf */,
    S3Object: {
      Bucket: 'STRING_VALUE',
      Name: 'STRING_VALUE',
      Version: 'STRING_VALUE'
    }
  },
  MinConfidence: 0.0
};
rekognition.detectModerationLabels(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>Image</code> — (<code>map</code>) <p>The input image as bytes or an S3 object.</p> 
            <ul> 
             <li><code>Bytes</code> — (<code>Buffer, Typed Array, Blob, String</code>) <p>Blob of image bytes up to 5 MBs.</p></li> 
             <li><code>S3Object</code> — (<code>map</code>) <p>Identifies an S3 object as the image source.</p> 
              <ul> 
               <li><code>Bucket</code> — (<code>String</code>) <p>Name of the S3 bucket.</p></li> 
               <li><code>Name</code> — (<code>String</code>) <p>S3 object key name.</p></li> 
               <li><code>Version</code> — (<code>String</code>) <p>If the bucket is versioning enabled, you can specify the object version. </p></li> 
              </ul> </li> 
            </ul> </li> 
           <li><code>MinConfidence</code> — (<code>Float</code>) <p>Specifies the minimum confidence level for the labels to return. Amazon Rekognition doesn't return any labels with a confidence level lower than this specified value.</p> <p>If you don't specify <code>MinConfidence</code>, the operation returns labels with confidence values greater than or equal to 50 percent.</p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>ModerationLabels</code> — (<code>Array&lt;map&gt;</code>) <p>An array of labels for explicit or suggestive adult content found in the image. The list includes the top-level label and each child label detected in the image. This is useful for filtering specific categories of content. </p> 
               <ul> 
                <li><code>Confidence</code> — (<code>Float</code>) <p>Specifies the confidence that Amazon Rekognition has that the label has been correctly identified.</p> <p>If you don't specify the <code>MinConfidence</code> parameter in the call to <code>DetectModerationLabels</code>, the operation returns labels with a confidence value greater than or equal to 50 percent.</p></li> 
                <li><code>Name</code> — (<code>String</code>) <p>The label name for the type of content detected in the image.</p></li> 
                <li><code>ParentName</code> — (<code>String</code>) <p>The name for the parent label. Labels at the top-level of the hierarchy have the parent label <code>""</code>.</p></li> 
               </ul> </li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="getCelebrityInfo-property"> <strong>getCelebrityInfo</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Gets the name and additional information about a celebrity based on his or her Rekognition ID. The additional information is returned as an array of URLs. If there is no additional information about the celebrity, this list is empty. For more information, see <a>celebrity-recognition</a>.</p> 
        <p> </p>
        <p>This operation requires permissions to perform the <code>rekognition:GetCelebrityInfo</code> action. </p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/GetCelebrityInfo">GetCelebrityInfo</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the getCelebrityInfo operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  Id: 'STRING_VALUE' /* required */
};
rekognition.getCelebrityInfo(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>Id</code> — (<code>String</code>) <p>The ID for the celebrity. You get the celebrity ID from a call to the operation, which recognizes celebrities in an image. </p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>Urls</code> — (<code>Array&lt;String&gt;</code>) <p>An array of URLs pointing to additional celebrity information. </p></li> 
              <li><code>Name</code> — (<code>String</code>) <p>The name of the celebrity.</p></li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="indexFaces-property"> <strong>indexFaces</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Detects faces in the input image and adds them to the specified collection. </p> 
        <p> </p>
        <p> Amazon Rekognition does not save the actual faces detected. Instead, the underlying detection algorithm first detects the faces in the input image, and for each face extracts facial features into a feature vector, and stores it in the back-end database. Amazon Rekognition uses feature vectors when performing face match and search operations using the and operations. </p> 
        <p>If you provide the optional <code>externalImageID</code> for the input image you provided, Amazon Rekognition associates this ID with all faces that it detects. When you call the operation, the response returns the external ID. You can use this external image ID to create a client-side index to associate the faces with each image. You can then use the index to find all faces in an image. </p> 
        <p>In response, the operation returns an array of metadata for all detected faces. This includes, the bounding box of the detected face, confidence value (indicating the bounding box contains a face), a face ID assigned by the service for each face that is detected and stored, and an image ID assigned by the service for the input image. If you request all facial attributes (using the <code>detectionAttributes</code> parameter, Amazon Rekognition returns detailed facial attributes such as facial landmarks (for example, location of eye and mount) and other facial attributes such gender. If you provide the same image, specify the same collection, and use the same external ID in the <code>IndexFaces</code> operation, Amazon Rekognition doesn't save duplicate face metadata. </p> 
        <p>For an example, see <a>example2</a>.</p> 
        <p>This operation requires permissions to perform the <code>rekognition:IndexFaces</code> action.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/IndexFaces">IndexFaces</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To add a face to a collection</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation detects faces in an image and adds them to the specified Rekognition collection. */

 var params = {
  CollectionId: "myphotos", 
  DetectionAttributes: [
  ], 
  ExternalImageId: "myphotoid", 
  Image: {
   S3Object: {
    Bucket: "mybucket", 
    Name: "myphoto"
   }
  }
 };
 rekognition.indexFaces(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    FaceRecords: [
       {
      Face: {
       BoundingBox: {
        Height: 0.33481481671333313, 
        Left: 0.31888890266418457, 
        Top: 0.4933333396911621, 
        Width: 0.25
       }, 
       Confidence: 99.9991226196289, 
       FaceId: "ff43d742-0c13-5d16-a3e8-03d3f58e980b", 
       ImageId: "465f4e93-763e-51d0-b030-b9667a2d94b1"
      }, 
      FaceDetail: {
       BoundingBox: {
        Height: 0.33481481671333313, 
        Left: 0.31888890266418457, 
        Top: 0.4933333396911621, 
        Width: 0.25
       }, 
       Confidence: 99.9991226196289, 
       Landmarks: [
          {
         Type: "eyeLeft", 
         X: 0.3976764678955078, 
         Y: 0.6248345971107483
        }, 
          {
         Type: "eyeRight", 
         X: 0.4810936450958252, 
         Y: 0.6317117214202881
        }, 
          {
         Type: "noseLeft", 
         X: 0.41986238956451416, 
         Y: 0.7111940383911133
        }, 
          {
         Type: "mouthDown", 
         X: 0.40525302290916443, 
         Y: 0.7497701048851013
        }, 
          {
         Type: "mouthUp", 
         X: 0.4753248989582062, 
         Y: 0.7558549642562866
        }
       ], 
       Pose: {
        Pitch: -9.713645935058594, 
        Roll: 4.707281112670898, 
        Yaw: -24.438663482666016
       }, 
       Quality: {
        Brightness: 29.23358917236328, 
        Sharpness: 80
       }
      }
     }, 
       {
      Face: {
       BoundingBox: {
        Height: 0.32592591643333435, 
        Left: 0.5144444704055786, 
        Top: 0.15111111104488373, 
        Width: 0.24444444477558136
       }, 
       Confidence: 99.99950408935547, 
       FaceId: "8be04dba-4e58-520d-850e-9eae4af70eb2", 
       ImageId: "465f4e93-763e-51d0-b030-b9667a2d94b1"
      }, 
      FaceDetail: {
       BoundingBox: {
        Height: 0.32592591643333435, 
        Left: 0.5144444704055786, 
        Top: 0.15111111104488373, 
        Width: 0.24444444477558136
       }, 
       Confidence: 99.99950408935547, 
       Landmarks: [
          {
         Type: "eyeLeft", 
         X: 0.6006892323493958, 
         Y: 0.290842205286026
        }, 
          {
         Type: "eyeRight", 
         X: 0.6808141469955444, 
         Y: 0.29609042406082153
        }, 
          {
         Type: "noseLeft", 
         X: 0.6395332217216492, 
         Y: 0.3522595763206482
        }, 
          {
         Type: "mouthDown", 
         X: 0.5892083048820496, 
         Y: 0.38689887523651123
        }, 
          {
         Type: "mouthUp", 
         X: 0.674560010433197, 
         Y: 0.394125759601593
        }
       ], 
       Pose: {
        Pitch: -4.683138370513916, 
        Roll: 2.1029529571533203, 
        Yaw: 6.716655254364014
       }, 
       Quality: {
        Brightness: 34.951698303222656, 
        Sharpness: 160
       }
      }
     }
    ], 
    OrientationCorrection: "ROTATE_0"
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the indexFaces operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  CollectionId: 'STRING_VALUE', /* required */
  Image: { /* required */
    Bytes: new Buffer('...') || 'STRING_VALUE' /* Strings will be Base-64 encoded on your behalf */,
    S3Object: {
      Bucket: 'STRING_VALUE',
      Name: 'STRING_VALUE',
      Version: 'STRING_VALUE'
    }
  },
  DetectionAttributes: [
    DEFAULT | ALL,
    /* more items */
  ],
  ExternalImageId: 'STRING_VALUE'
};
rekognition.indexFaces(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>CollectionId</code> — (<code>String</code>) <p>The ID of an existing collection to which you want to add the faces that are detected in the input images.</p></li> 
           <li><code>Image</code> — (<code>map</code>) <p>The input image as bytes or an S3 object.</p> 
            <ul> 
             <li><code>Bytes</code> — (<code>Buffer, Typed Array, Blob, String</code>) <p>Blob of image bytes up to 5 MBs.</p></li> 
             <li><code>S3Object</code> — (<code>map</code>) <p>Identifies an S3 object as the image source.</p> 
              <ul> 
               <li><code>Bucket</code> — (<code>String</code>) <p>Name of the S3 bucket.</p></li> 
               <li><code>Name</code> — (<code>String</code>) <p>S3 object key name.</p></li> 
               <li><code>Version</code> — (<code>String</code>) <p>If the bucket is versioning enabled, you can specify the object version. </p></li> 
              </ul> </li> 
            </ul> </li> 
           <li><code>ExternalImageId</code> — (<code>String</code>) <p>ID you want to assign to all the faces detected in the image.</p></li> 
           <li><code>DetectionAttributes</code> — (<code>Array&lt;String&gt;</code>) <p>An array of facial attributes that you want to be returned. This can be the default list of attributes or all attributes. If you don't specify a value for <code>Attributes</code> or if you specify <code>["DEFAULT"]</code>, the API returns the following subset of facial attributes: <code>BoundingBox</code>, <code>Confidence</code>, <code>Pose</code>, <code>Quality</code> and <code>Landmarks</code>. If you provide <code>["ALL"]</code>, all facial attributes are returned but the operation will take longer to complete.</p> <p>If you provide both, <code>["ALL", "DEFAULT"]</code>, the service uses a logical AND operator to determine which attributes to return (in this case, all attributes). </p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>FaceRecords</code> — (<code>Array&lt;map&gt;</code>) <p>An array of faces detected and added to the collection. For more information, see <a>howitworks-index-faces</a>. </p> 
               <ul> 
                <li><code>Face</code> — (<code>map</code>) <p>Describes the face properties such as the bounding box, face ID, image ID of the input image, and external image ID that you assigned. </p> 
                 <ul> 
                  <li><code>FaceId</code> — (<code>String</code>) <p>Unique identifier that Amazon Rekognition assigns to the face.</p></li> 
                  <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                   <ul> 
                    <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                    <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                    <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                    <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                   </ul> </li> 
                  <li><code>ImageId</code> — (<code>String</code>) <p>Unique identifier that Amazon Rekognition assigns to the input image.</p></li> 
                  <li><code>ExternalImageId</code> — (<code>String</code>) <p>Identifier that you assign to all the faces in the input image.</p></li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Confidence level that the bounding box contains a face (and not a different object such as a tree).</p></li> 
                 </ul> </li> 
                <li><code>FaceDetail</code> — (<code>map</code>) <p>Structure containing attributes of the face that the algorithm detected.</p> 
                 <ul> 
                  <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                   <ul> 
                    <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                    <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                    <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                    <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                   </ul> </li> 
                  <li><code>AgeRange</code> — (<code>map</code>) <p>The estimated age range, in years, for the face. Low represents the lowest estimated age and High represents the highest estimated age.</p> 
                   <ul> 
                    <li><code>Low</code> — (<code>Integer</code>) <p>The lowest estimated age.</p></li> 
                    <li><code>High</code> — (<code>Integer</code>) <p>The highest estimated age.</p></li> 
                   </ul> </li> 
                  <li><code>Smile</code> — (<code>map</code>) <p>Indicates whether or not the face is smiling, and the confidence level in the determination.</p> 
                   <ul> 
                    <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the face is smiling or not.</p></li> 
                    <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                   </ul> </li> 
                  <li><code>Eyeglasses</code> — (<code>map</code>) <p>Indicates whether or not the face is wearing eye glasses, and the confidence level in the determination.</p> 
                   <ul> 
                    <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the face is wearing eye glasses or not.</p></li> 
                    <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                   </ul> </li> 
                  <li><code>Sunglasses</code> — (<code>map</code>) <p>Indicates whether or not the face is wearing sunglasses, and the confidence level in the determination.</p> 
                   <ul> 
                    <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the face is wearing sunglasses or not.</p></li> 
                    <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                   </ul> </li> 
                  <li><code>Gender</code> — (<code>map</code>) <p>Gender of the face and the confidence level in the determination.</p> 
                   <ul> 
                    <li><code>Value</code> — (<code>String</code>) <p>Gender of the face.</p> Possible values include: 
                     <ul> 
                      <li><code>"Male"</code></li> 
                      <li><code>"Female"</code></li> 
                     </ul> </li> 
                    <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                   </ul> </li> 
                  <li><code>Beard</code> — (<code>map</code>) <p>Indicates whether or not the face has a beard, and the confidence level in the determination.</p> 
                   <ul> 
                    <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the face has beard or not.</p></li> 
                    <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                   </ul> </li> 
                  <li><code>Mustache</code> — (<code>map</code>) <p>Indicates whether or not the face has a mustache, and the confidence level in the determination.</p> 
                   <ul> 
                    <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the face has mustache or not.</p></li> 
                    <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                   </ul> </li> 
                  <li><code>EyesOpen</code> — (<code>map</code>) <p>Indicates whether or not the eyes on the face are open, and the confidence level in the determination.</p> 
                   <ul> 
                    <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the eyes on the face are open.</p></li> 
                    <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                   </ul> </li> 
                  <li><code>MouthOpen</code> — (<code>map</code>) <p>Indicates whether or not the mouth on the face is open, and the confidence level in the determination.</p> 
                   <ul> 
                    <li><code>Value</code> — (<code>Boolean</code>) <p>Boolean value that indicates whether the mouth on the face is open or not.</p></li> 
                    <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                   </ul> </li> 
                  <li><code>Emotions</code> — (<code>Array&lt;map&gt;</code>) <p>The emotions detected on the face, and the confidence level in the determination. For example, HAPPY, SAD, and ANGRY. </p> 
                   <ul> 
                    <li><code>Type</code> — (<code>String</code>) <p>Type of emotion detected.</p> Possible values include: 
                     <ul> 
                      <li><code>"HAPPY"</code></li> 
                      <li><code>"SAD"</code></li> 
                      <li><code>"ANGRY"</code></li> 
                      <li><code>"CONFUSED"</code></li> 
                      <li><code>"DISGUSTED"</code></li> 
                      <li><code>"SURPRISED"</code></li> 
                      <li><code>"CALM"</code></li> 
                      <li><code>"UNKNOWN"</code></li> 
                     </ul> </li> 
                    <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence in the determination.</p></li> 
                   </ul> </li> 
                  <li><code>Landmarks</code> — (<code>Array&lt;map&gt;</code>) <p>Indicates the location of landmarks on the face.</p> 
                   <ul> 
                    <li><code>Type</code> — (<code>String</code>) <p>Type of the landmark.</p> Possible values include: 
                     <ul> 
                      <li><code>"eyeLeft"</code></li> 
                      <li><code>"eyeRight"</code></li> 
                      <li><code>"nose"</code></li> 
                      <li><code>"mouthLeft"</code></li> 
                      <li><code>"mouthRight"</code></li> 
                      <li><code>"leftEyeBrowLeft"</code></li> 
                      <li><code>"leftEyeBrowRight"</code></li> 
                      <li><code>"leftEyeBrowUp"</code></li> 
                      <li><code>"rightEyeBrowLeft"</code></li> 
                      <li><code>"rightEyeBrowRight"</code></li> 
                      <li><code>"rightEyeBrowUp"</code></li> 
                      <li><code>"leftEyeLeft"</code></li> 
                      <li><code>"leftEyeRight"</code></li> 
                      <li><code>"leftEyeUp"</code></li> 
                      <li><code>"leftEyeDown"</code></li> 
                      <li><code>"rightEyeLeft"</code></li> 
                      <li><code>"rightEyeRight"</code></li> 
                      <li><code>"rightEyeUp"</code></li> 
                      <li><code>"rightEyeDown"</code></li> 
                      <li><code>"noseLeft"</code></li> 
                      <li><code>"noseRight"</code></li> 
                      <li><code>"mouthUp"</code></li> 
                      <li><code>"mouthDown"</code></li> 
                      <li><code>"leftPupil"</code></li> 
                      <li><code>"rightPupil"</code></li> 
                     </ul> </li> 
                    <li><code>X</code> — (<code>Float</code>) <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. </p></li> 
                    <li><code>Y</code> — (<code>Float</code>) <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.</p></li> 
                   </ul> </li> 
                  <li><code>Pose</code> — (<code>map</code>) <p>Indicates the pose of the face as determined by its pitch, roll, and yaw.</p> 
                   <ul> 
                    <li><code>Roll</code> — (<code>Float</code>) <p>Value representing the face rotation on the roll axis.</p></li> 
                    <li><code>Yaw</code> — (<code>Float</code>) <p>Value representing the face rotation on the yaw axis.</p></li> 
                    <li><code>Pitch</code> — (<code>Float</code>) <p>Value representing the face rotation on the pitch axis.</p></li> 
                   </ul> </li> 
                  <li><code>Quality</code> — (<code>map</code>) <p>Identifies image brightness and sharpness.</p> 
                   <ul> 
                    <li><code>Brightness</code> — (<code>Float</code>) <p>Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.</p></li> 
                    <li><code>Sharpness</code> — (<code>Float</code>) <p>Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.</p></li> 
                   </ul> </li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Confidence level that the bounding box contains a face (and not a different object such as a tree).</p></li> 
                 </ul> </li> 
               </ul> </li> 
              <li><code>OrientationCorrection</code> — (<code>String</code>) <p>The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct image orientation. The bounding box coordinates returned in <code>FaceRecords</code> represent face locations before the image orientation is corrected. </p> 
               <div class="note">
                <strong>Note:</strong> If the input image is in jpeg format, it might contain exchangeable image (Exif) metadata. If so, and the Exif metadata populates the orientation field, the value of 
                <code>OrientationCorrection</code> is null and the bounding box coordinates in 
                <code>FaceRecords</code> represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. 
               </div> Possible values include: 
               <ul> 
                <li><code>"ROTATE_0"</code></li> 
                <li><code>"ROTATE_90"</code></li> 
                <li><code>"ROTATE_180"</code></li> 
                <li><code>"ROTATE_270"</code></li> 
               </ul> </li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="listCollections-property"> <strong>listCollections</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Returns list of collection IDs in your account. If the result is truncated, the response also provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs.</p> 
        <p> </p>
        <p>For an example, see <a>example1</a>.</p> 
        <p>This operation requires permissions to perform the <code>rekognition:ListCollections</code> action.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/ListCollections">ListCollections</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To list the collections</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation returns a list of Rekognition collections. */

 var params = {
 };
 rekognition.listCollections(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    CollectionIds: [
       "myphotos"
    ]
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the listCollections operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  MaxResults: 0,
  NextToken: 'STRING_VALUE'
};
rekognition.listCollections(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>NextToken</code> — (<code>String</code>) <p>Pagination token from the previous response.</p></li> 
           <li><code>MaxResults</code> — (<code>Integer</code>) <p>Maximum number of collection IDs to return.</p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>CollectionIds</code> — (<code>Array&lt;String&gt;</code>) <p>An array of collection IDs.</p></li> 
              <li><code>NextToken</code> — (<code>String</code>) <p>If the result is truncated, the response provides a <code>NextToken</code> that you can use in the subsequent request to fetch the next set of collection IDs.</p></li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="listFaces-property"> <strong>listFaces</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Returns metadata for faces in the specified collection. This metadata includes information such as the bounding box coordinates, the confidence (that the bounding box contains a face), and face ID. For an example, see <a>example3</a>. </p> 
        <p> </p>
        <p>This operation requires permissions to perform the <code>rekognition:ListFaces</code> action.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/ListFaces">ListFaces</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To list the faces in a collection</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation lists the faces in a Rekognition collection. */

 var params = {
  CollectionId: "myphotos", 
  MaxResults: 20
 };
 rekognition.listFaces(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    Faces: [
       {
      BoundingBox: {
       Height: 0.18000000715255737, 
       Left: 0.5555559992790222, 
       Top: 0.336667001247406, 
       Width: 0.23999999463558197
      }, 
      Confidence: 100, 
      FaceId: "1c62e8b5-69a7-5b7d-b3cd-db4338a8a7e7", 
      ImageId: "147fdf82-7a71-52cf-819b-e786c7b9746e"
     }, 
       {
      BoundingBox: {
       Height: 0.16555599868297577, 
       Left: 0.30963000655174255, 
       Top: 0.7066670060157776, 
       Width: 0.22074100375175476
      }, 
      Confidence: 100, 
      FaceId: "29a75abe-397b-5101-ba4f-706783b2246c", 
      ImageId: "147fdf82-7a71-52cf-819b-e786c7b9746e"
     }, 
       {
      BoundingBox: {
       Height: 0.3234420120716095, 
       Left: 0.3233329951763153, 
       Top: 0.5, 
       Width: 0.24222199618816376
      }, 
      Confidence: 99.99829864501953, 
      FaceId: "38271d79-7bc2-5efb-b752-398a8d575b85", 
      ImageId: "d5631190-d039-54e4-b267-abd22c8647c5"
     }, 
       {
      BoundingBox: {
       Height: 0.03555560111999512, 
       Left: 0.37388700246810913, 
       Top: 0.2477779984474182, 
       Width: 0.04747769981622696
      }, 
      Confidence: 99.99210357666016, 
      FaceId: "3b01bef0-c883-5654-ba42-d5ad28b720b3", 
      ImageId: "812d9f04-86f9-54fc-9275-8d0dcbcb6784"
     }, 
       {
      BoundingBox: {
       Height: 0.05333330109715462, 
       Left: 0.2937690019607544, 
       Top: 0.35666701197624207, 
       Width: 0.07121659815311432
      }, 
      Confidence: 99.99919891357422, 
      FaceId: "4839a608-49d0-566c-8301-509d71b534d1", 
      ImageId: "812d9f04-86f9-54fc-9275-8d0dcbcb6784"
     }, 
       {
      BoundingBox: {
       Height: 0.3249259889125824, 
       Left: 0.5155559778213501, 
       Top: 0.1513350009918213, 
       Width: 0.24333299696445465
      }, 
      Confidence: 99.99949645996094, 
      FaceId: "70008e50-75e4-55d0-8e80-363fb73b3a14", 
      ImageId: "d5631190-d039-54e4-b267-abd22c8647c5"
     }, 
       {
      BoundingBox: {
       Height: 0.03777780011296272, 
       Left: 0.7002969980239868, 
       Top: 0.18777799606323242, 
       Width: 0.05044509842991829
      }, 
      Confidence: 99.92639923095703, 
      FaceId: "7f5f88ed-d684-5a88-b0df-01e4a521552b", 
      ImageId: "812d9f04-86f9-54fc-9275-8d0dcbcb6784"
     }, 
       {
      BoundingBox: {
       Height: 0.05555560067296028, 
       Left: 0.13946600258350372, 
       Top: 0.46333301067352295, 
       Width: 0.07270029932260513
      }, 
      Confidence: 99.99469757080078, 
      FaceId: "895b4e2c-81de-5902-a4bd-d1792bda00b2", 
      ImageId: "812d9f04-86f9-54fc-9275-8d0dcbcb6784"
     }, 
       {
      BoundingBox: {
       Height: 0.3259260058403015, 
       Left: 0.5144439935684204, 
       Top: 0.15111100673675537, 
       Width: 0.24444399774074554
      }, 
      Confidence: 99.99949645996094, 
      FaceId: "8be04dba-4e58-520d-850e-9eae4af70eb2", 
      ImageId: "465f4e93-763e-51d0-b030-b9667a2d94b1"
     }, 
       {
      BoundingBox: {
       Height: 0.18888899683952332, 
       Left: 0.3783380091190338, 
       Top: 0.2355560064315796, 
       Width: 0.25222599506378174
      }, 
      Confidence: 99.9999008178711, 
      FaceId: "908544ad-edc3-59df-8faf-6a87cc256cf5", 
      ImageId: "3c731605-d772-541a-a5e7-0375dbc68a07"
     }, 
       {
      BoundingBox: {
       Height: 0.33481499552726746, 
       Left: 0.31888899207115173, 
       Top: 0.49333301186561584, 
       Width: 0.25
      }, 
      Confidence: 99.99909973144531, 
      FaceId: "ff43d742-0c13-5d16-a3e8-03d3f58e980b", 
      ImageId: "465f4e93-763e-51d0-b030-b9667a2d94b1"
     }
    ]
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the listFaces operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  CollectionId: 'STRING_VALUE', /* required */
  MaxResults: 0,
  NextToken: 'STRING_VALUE'
};
rekognition.listFaces(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>CollectionId</code> — (<code>String</code>) <p>ID of the collection from which to list the faces.</p></li> 
           <li><code>NextToken</code> — (<code>String</code>) <p>If the previous response was incomplete (because there is more data to retrieve), Amazon Rekognition returns a pagination token in the response. You can use this pagination token to retrieve the next set of faces.</p></li> 
           <li><code>MaxResults</code> — (<code>Integer</code>) <p>Maximum number of faces to return.</p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>Faces</code> — (<code>Array&lt;map&gt;</code>) <p>An array of <code>Face</code> objects. </p> 
               <ul> 
                <li><code>FaceId</code> — (<code>String</code>) <p>Unique identifier that Amazon Rekognition assigns to the face.</p></li> 
                <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                 <ul> 
                  <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                  <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                  <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                  <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                 </ul> </li> 
                <li><code>ImageId</code> — (<code>String</code>) <p>Unique identifier that Amazon Rekognition assigns to the input image.</p></li> 
                <li><code>ExternalImageId</code> — (<code>String</code>) <p>Identifier that you assign to all the faces in the input image.</p></li> 
                <li><code>Confidence</code> — (<code>Float</code>) <p>Confidence level that the bounding box contains a face (and not a different object such as a tree).</p></li> 
               </ul> </li> 
              <li><code>NextToken</code> — (<code>String</code>) <p>If the response is truncated, Amazon Rekognition returns this token that you can use in the subsequent request to retrieve the next set of faces.</p></li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="recognizeCelebrities-property"> <strong>recognizeCelebrities</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>Returns an array of celebrities recognized in the input image. The image is passed either as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket. The image must be either a PNG or JPEG formatted file. For more information, see <a>celebrity-recognition</a>. </p> 
        <p> </p>
        <p> <code>RecognizeCelebrities</code> returns the 15 largest faces in the image. It lists recognized celebrities in the <code>CelebrityFaces</code> list and unrecognized faces in the <code>UnrecognizedFaces</code> list. The operation doesn't return celebrities whose face sizes are smaller than the largest 15 faces in the image.</p> 
        <p>For each celebrity recognized, the API returns a <code>Celebrity</code> object. The <code>Celebrity</code> object contains the celebrity name, ID, URL links to additional information, match confidence, and a <code>ComparedFace</code> object that you can use to locate the celebrity's face on the image.</p> 
        <p>Rekognition does not retain information about which images a celebrity has been recognized in. Your application must store this information and use the <code>Celebrity</code> ID property as a unique identifier for the celebrity. If you don't store the celebrity name or additional information URLs returned by <code>RecognizeCelebrities</code>, you will need the ID to identify the celebrity in a call to the operation.</p> 
        <p>For an example, see <a>recognize-celebrities-tutorial</a>.</p> 
        <p>This operation requires permissions to perform the <code>rekognition:RecognizeCelebrities</code> operation.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/RecognizeCelebrities">RecognizeCelebrities</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the recognizeCelebrities operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  Image: { /* required */
    Bytes: new Buffer('...') || 'STRING_VALUE' /* Strings will be Base-64 encoded on your behalf */,
    S3Object: {
      Bucket: 'STRING_VALUE',
      Name: 'STRING_VALUE',
      Version: 'STRING_VALUE'
    }
  }
};
rekognition.recognizeCelebrities(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>Image</code> — (<code>map</code>) <p>The input image to use for celebrity recognition.</p> 
            <ul> 
             <li><code>Bytes</code> — (<code>Buffer, Typed Array, Blob, String</code>) <p>Blob of image bytes up to 5 MBs.</p></li> 
             <li><code>S3Object</code> — (<code>map</code>) <p>Identifies an S3 object as the image source.</p> 
              <ul> 
               <li><code>Bucket</code> — (<code>String</code>) <p>Name of the S3 bucket.</p></li> 
               <li><code>Name</code> — (<code>String</code>) <p>S3 object key name.</p></li> 
               <li><code>Version</code> — (<code>String</code>) <p>If the bucket is versioning enabled, you can specify the object version. </p></li> 
              </ul> </li> 
            </ul> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>CelebrityFaces</code> — (<code>Array&lt;map&gt;</code>) <p>Details about each celebrity found in the image. Amazon Rekognition can detect a maximum of 15 celebrities in an image.</p> 
               <ul> 
                <li><code>Urls</code> — (<code>Array&lt;String&gt;</code>) <p>An array of URLs pointing to additional information about the celebrity. If there is no additional information about the celebrity, this list is empty.</p></li> 
                <li><code>Name</code> — (<code>String</code>) <p>The name of the celebrity.</p></li> 
                <li><code>Id</code> — (<code>String</code>) <p>A unique identifier for the celebrity. </p></li> 
                <li><code>Face</code> — (<code>map</code>) <p>Provides information about the celebrity's face, such as its location on the image.</p> 
                 <ul> 
                  <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                   <ul> 
                    <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                    <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                    <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                    <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                   </ul> </li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence that what the bounding box contains is a face.</p></li> 
                  <li><code>Landmarks</code> — (<code>Array&lt;map&gt;</code>) <p>An array of facial landmarks.</p> 
                   <ul> 
                    <li><code>Type</code> — (<code>String</code>) <p>Type of the landmark.</p> Possible values include: 
                     <ul> 
                      <li><code>"eyeLeft"</code></li> 
                      <li><code>"eyeRight"</code></li> 
                      <li><code>"nose"</code></li> 
                      <li><code>"mouthLeft"</code></li> 
                      <li><code>"mouthRight"</code></li> 
                      <li><code>"leftEyeBrowLeft"</code></li> 
                      <li><code>"leftEyeBrowRight"</code></li> 
                      <li><code>"leftEyeBrowUp"</code></li> 
                      <li><code>"rightEyeBrowLeft"</code></li> 
                      <li><code>"rightEyeBrowRight"</code></li> 
                      <li><code>"rightEyeBrowUp"</code></li> 
                      <li><code>"leftEyeLeft"</code></li> 
                      <li><code>"leftEyeRight"</code></li> 
                      <li><code>"leftEyeUp"</code></li> 
                      <li><code>"leftEyeDown"</code></li> 
                      <li><code>"rightEyeLeft"</code></li> 
                      <li><code>"rightEyeRight"</code></li> 
                      <li><code>"rightEyeUp"</code></li> 
                      <li><code>"rightEyeDown"</code></li> 
                      <li><code>"noseLeft"</code></li> 
                      <li><code>"noseRight"</code></li> 
                      <li><code>"mouthUp"</code></li> 
                      <li><code>"mouthDown"</code></li> 
                      <li><code>"leftPupil"</code></li> 
                      <li><code>"rightPupil"</code></li> 
                     </ul> </li> 
                    <li><code>X</code> — (<code>Float</code>) <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. </p></li> 
                    <li><code>Y</code> — (<code>Float</code>) <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.</p></li> 
                   </ul> </li> 
                  <li><code>Pose</code> — (<code>map</code>) <p>Indicates the pose of the face as determined by its pitch, roll, and yaw.</p> 
                   <ul> 
                    <li><code>Roll</code> — (<code>Float</code>) <p>Value representing the face rotation on the roll axis.</p></li> 
                    <li><code>Yaw</code> — (<code>Float</code>) <p>Value representing the face rotation on the yaw axis.</p></li> 
                    <li><code>Pitch</code> — (<code>Float</code>) <p>Value representing the face rotation on the pitch axis.</p></li> 
                   </ul> </li> 
                  <li><code>Quality</code> — (<code>map</code>) <p>Identifies face image brightness and sharpness. </p> 
                   <ul> 
                    <li><code>Brightness</code> — (<code>Float</code>) <p>Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.</p></li> 
                    <li><code>Sharpness</code> — (<code>Float</code>) <p>Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.</p></li> 
                   </ul> </li> 
                 </ul> </li> 
                <li><code>MatchConfidence</code> — (<code>Float</code>) <p>The confidence, in percentage, that Rekognition has that the recognized face is the celebrity.</p></li> 
               </ul> </li> 
              <li><code>UnrecognizedFaces</code> — (<code>Array&lt;map&gt;</code>) <p>Details about each unrecognized face in the image.</p> 
               <ul> 
                <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                 <ul> 
                  <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                  <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                  <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                  <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                 </ul> </li> 
                <li><code>Confidence</code> — (<code>Float</code>) <p>Level of confidence that what the bounding box contains is a face.</p></li> 
                <li><code>Landmarks</code> — (<code>Array&lt;map&gt;</code>) <p>An array of facial landmarks.</p> 
                 <ul> 
                  <li><code>Type</code> — (<code>String</code>) <p>Type of the landmark.</p> Possible values include: 
                   <ul> 
                    <li><code>"eyeLeft"</code></li> 
                    <li><code>"eyeRight"</code></li> 
                    <li><code>"nose"</code></li> 
                    <li><code>"mouthLeft"</code></li> 
                    <li><code>"mouthRight"</code></li> 
                    <li><code>"leftEyeBrowLeft"</code></li> 
                    <li><code>"leftEyeBrowRight"</code></li> 
                    <li><code>"leftEyeBrowUp"</code></li> 
                    <li><code>"rightEyeBrowLeft"</code></li> 
                    <li><code>"rightEyeBrowRight"</code></li> 
                    <li><code>"rightEyeBrowUp"</code></li> 
                    <li><code>"leftEyeLeft"</code></li> 
                    <li><code>"leftEyeRight"</code></li> 
                    <li><code>"leftEyeUp"</code></li> 
                    <li><code>"leftEyeDown"</code></li> 
                    <li><code>"rightEyeLeft"</code></li> 
                    <li><code>"rightEyeRight"</code></li> 
                    <li><code>"rightEyeUp"</code></li> 
                    <li><code>"rightEyeDown"</code></li> 
                    <li><code>"noseLeft"</code></li> 
                    <li><code>"noseRight"</code></li> 
                    <li><code>"mouthUp"</code></li> 
                    <li><code>"mouthDown"</code></li> 
                    <li><code>"leftPupil"</code></li> 
                    <li><code>"rightPupil"</code></li> 
                   </ul> </li> 
                  <li><code>X</code> — (<code>Float</code>) <p>x-coordinate from the top left of the landmark expressed as the ratio of the width of the image. For example, if the images is 700x200 and the x-coordinate of the landmark is at 350 pixels, this value is 0.5. </p></li> 
                  <li><code>Y</code> — (<code>Float</code>) <p>y-coordinate from the top left of the landmark expressed as the ratio of the height of the image. For example, if the images is 700x200 and the y-coordinate of the landmark is at 100 pixels, this value is 0.5.</p></li> 
                 </ul> </li> 
                <li><code>Pose</code> — (<code>map</code>) <p>Indicates the pose of the face as determined by its pitch, roll, and yaw.</p> 
                 <ul> 
                  <li><code>Roll</code> — (<code>Float</code>) <p>Value representing the face rotation on the roll axis.</p></li> 
                  <li><code>Yaw</code> — (<code>Float</code>) <p>Value representing the face rotation on the yaw axis.</p></li> 
                  <li><code>Pitch</code> — (<code>Float</code>) <p>Value representing the face rotation on the pitch axis.</p></li> 
                 </ul> </li> 
                <li><code>Quality</code> — (<code>map</code>) <p>Identifies face image brightness and sharpness. </p> 
                 <ul> 
                  <li><code>Brightness</code> — (<code>Float</code>) <p>Value representing brightness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a brighter face image.</p></li> 
                  <li><code>Sharpness</code> — (<code>Float</code>) <p>Value representing sharpness of the face. The service returns a value between 0 and 100 (inclusive). A higher value indicates a sharper face image.</p></li> 
                 </ul> </li> 
               </ul> </li> 
              <li><code>OrientationCorrection</code> — (<code>String</code>) <p>The orientation of the input image (counterclockwise direction). If your application displays the image, you can use this value to correct the orientation. The bounding box coordinates returned in <code>CelebrityFaces</code> and <code>UnrecognizedFaces</code> represent face locations before the image orientation is corrected. </p> 
               <div class="note">
                <strong>Note:</strong> If the input image is in .jpeg format, it might contain exchangeable image (Exif) metadata that includes the image's orientation. If so, and the Exif metadata for the input image populates the orientation field, the value of 
                <code>OrientationCorrection</code> is null and the 
                <code>CelebrityFaces</code> and 
                <code>UnrecognizedFaces</code> bounding box coordinates represent face locations after Exif metadata is used to correct the image orientation. Images in .png format don't contain Exif metadata. 
               </div> Possible values include: 
               <ul> 
                <li><code>"ROTATE_0"</code></li> 
                <li><code>"ROTATE_90"</code></li> 
                <li><code>"ROTATE_180"</code></li> 
                <li><code>"ROTATE_270"</code></li> 
               </ul> </li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="searchFaces-property"> <strong>searchFaces</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>For a given input face ID, searches for matching faces in the collection the face belongs to. You get a face ID when you add a face to the collection using the <a>IndexFaces</a> operation. The operation compares the features of the input face with faces in the specified collection. </p> 
        <p> </p>
        <div class="note">
         <strong>Note:</strong> You can also search faces without indexing faces by using the 
         <code>SearchFacesByImage</code> operation. 
        </div> 
        <p> The operation response returns an array of faces that match, ordered by similarity score with the highest similarity first. More specifically, it is an array of metadata for each face match that is found. Along with the metadata, the response also includes a <code>confidence</code> value for each face match, indicating the confidence that the specific face matches the input face. </p> 
        <p>For an example, see <a>example3</a>.</p> 
        <p>This operation requires permissions to perform the <code>rekognition:SearchFaces</code> action.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/SearchFaces">SearchFaces</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To delete a face</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation searches for matching faces in the collection the supplied face belongs to. */

 var params = {
  CollectionId: "myphotos", 
  FaceId: "70008e50-75e4-55d0-8e80-363fb73b3a14", 
  FaceMatchThreshold: 90, 
  MaxFaces: 10
 };
 rekognition.searchFaces(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    FaceMatches: [
       {
      Face: {
       BoundingBox: {
        Height: 0.3259260058403015, 
        Left: 0.5144439935684204, 
        Top: 0.15111100673675537, 
        Width: 0.24444399774074554
       }, 
       Confidence: 99.99949645996094, 
       FaceId: "8be04dba-4e58-520d-850e-9eae4af70eb2", 
       ImageId: "465f4e93-763e-51d0-b030-b9667a2d94b1"
      }, 
      Similarity: 99.97222137451172
     }, 
       {
      Face: {
       BoundingBox: {
        Height: 0.16555599868297577, 
        Left: 0.30963000655174255, 
        Top: 0.7066670060157776, 
        Width: 0.22074100375175476
       }, 
       Confidence: 100, 
       FaceId: "29a75abe-397b-5101-ba4f-706783b2246c", 
       ImageId: "147fdf82-7a71-52cf-819b-e786c7b9746e"
      }, 
      Similarity: 97.04154968261719
     }, 
       {
      Face: {
       BoundingBox: {
        Height: 0.18888899683952332, 
        Left: 0.3783380091190338, 
        Top: 0.2355560064315796, 
        Width: 0.25222599506378174
       }, 
       Confidence: 99.9999008178711, 
       FaceId: "908544ad-edc3-59df-8faf-6a87cc256cf5", 
       ImageId: "3c731605-d772-541a-a5e7-0375dbc68a07"
      }, 
      Similarity: 95.94520568847656
     }
    ], 
    SearchedFaceId: "70008e50-75e4-55d0-8e80-363fb73b3a14"
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the searchFaces operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  CollectionId: 'STRING_VALUE', /* required */
  FaceId: 'STRING_VALUE', /* required */
  FaceMatchThreshold: 0.0,
  MaxFaces: 0
};
rekognition.searchFaces(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>CollectionId</code> — (<code>String</code>) <p>ID of the collection the face belongs to.</p></li> 
           <li><code>FaceId</code> — (<code>String</code>) <p>ID of a face to find matches for in the collection.</p></li> 
           <li><code>MaxFaces</code> — (<code>Integer</code>) <p>Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.</p></li> 
           <li><code>FaceMatchThreshold</code> — (<code>Float</code>) <p>Optional value specifying the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%.</p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>SearchedFaceId</code> — (<code>String</code>) <p>ID of the face that was searched for matches in a collection.</p></li> 
              <li><code>FaceMatches</code> — (<code>Array&lt;map&gt;</code>) <p>An array of faces that matched the input face, along with the confidence in the match.</p> 
               <ul> 
                <li><code>Similarity</code> — (<code>Float</code>) <p>Confidence in the match of this face with the input face.</p></li> 
                <li><code>Face</code> — (<code>map</code>) <p>Describes the face properties such as the bounding box, face ID, image ID of the source image, and external image ID that you assigned.</p> 
                 <ul> 
                  <li><code>FaceId</code> — (<code>String</code>) <p>Unique identifier that Amazon Rekognition assigns to the face.</p></li> 
                  <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                   <ul> 
                    <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                    <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                    <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                    <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                   </ul> </li> 
                  <li><code>ImageId</code> — (<code>String</code>) <p>Unique identifier that Amazon Rekognition assigns to the input image.</p></li> 
                  <li><code>ExternalImageId</code> — (<code>String</code>) <p>Identifier that you assign to all the faces in the input image.</p></li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Confidence level that the bounding box contains a face (and not a different object such as a tree).</p></li> 
                 </ul> </li> 
               </ul> </li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
     <div class="method_details "> 
      <h3 class="signature " id="searchFacesByImage-property"> <strong>searchFacesByImage</strong>(params = {}, callback) ? <tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt> </h3>
      <div class="docstring"> 
       <div class="discussion"> 
        <p>For a given input image, first detects the largest face in the image, and then searches the specified collection for matching faces. The operation compares the features of the input face with faces in the specified collection. </p> 
        <p> </p>
        <div class="note">
         <strong>Note:</strong> To search for all faces in an input image, you might first call the operation, and then use the face IDs returned in subsequent calls to the operation. You can also call the 
         <code>DetectFaces</code> operation and use the bounding boxes in the response to make face crops, which then you can pass in to the 
         <code>SearchFacesByImage</code> operation. 
        </div> 
        <p> The response returns an array of faces that match, ordered by similarity score with the highest similarity first. More specifically, it is an array of metadata for each face match found. Along with the metadata, the response also includes a <code>similarity</code> indicating how similar the face is to the input face. In the response, the operation also returns the bounding box (and a confidence level that the bounding box contains a face) of the face that Amazon Rekognition used for the input image. </p> 
        <p>For an example, see <a>example3</a>.</p> 
        <p>This operation requires permissions to perform the <code>rekognition:SearchFacesByImage</code> action.</p>
        <p></p> 
        <div class="tags"> 
         <p class="tag_title">Service Reference:</p> 
         <ul class="see"> 
          <li><a href="/goto/WebAPI/rekognition-2016-06-27/SearchFacesByImage">SearchFacesByImage</a></li> 
         </ul> 
        </div> 
       </div> 
      </div> 
      <div class="tags"> 
       <div class="examples"> 
        <p class="tag_title">Examples:</p> 
        <p class="example_title"></p>
        <div class="inline">
         <p>To search for faces matching a supplied image</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>
/* This operation searches for faces in a Rekognition collection that match the largest face in an S3 bucket stored image. */

 var params = {
  CollectionId: "myphotos", 
  FaceMatchThreshold: 95, 
  Image: {
   S3Object: {
    Bucket: "mybucket", 
    Name: "myphoto"
   }
  }, 
  MaxFaces: 5
 };
 rekognition.searchFacesByImage(params, function(err, data) {
   if (err) console.log(err, err.stack); // an error occurred
   else     console.log(data);           // successful response
   /*
   data = {
    FaceMatches: [
       {
      Face: {
       BoundingBox: {
        Height: 0.3234420120716095, 
        Left: 0.3233329951763153, 
        Top: 0.5, 
        Width: 0.24222199618816376
       }, 
       Confidence: 99.99829864501953, 
       FaceId: "38271d79-7bc2-5efb-b752-398a8d575b85", 
       ImageId: "d5631190-d039-54e4-b267-abd22c8647c5"
      }, 
      Similarity: 99.97036743164062
     }
    ], 
    SearchedFaceBoundingBox: {
     Height: 0.33481481671333313, 
     Left: 0.31888890266418457, 
     Top: 0.4933333396911621, 
     Width: 0.25
    }, 
    SearchedFaceConfidence: 99.9991226196289
   }
   */
 });</code></pre> 
        <p class="example_title"></p>
        <div class="inline">
         <p>Calling the searchFacesByImage operation</p> 
        </div>
        <p></p> 
        <pre class="example code"><code>var params = {
  CollectionId: 'STRING_VALUE', /* required */
  Image: { /* required */
    Bytes: new Buffer('...') || 'STRING_VALUE' /* Strings will be Base-64 encoded on your behalf */,
    S3Object: {
      Bucket: 'STRING_VALUE',
      Name: 'STRING_VALUE',
      Version: 'STRING_VALUE'
    }
  },
  FaceMatchThreshold: 0.0,
  MaxFaces: 0
};
rekognition.searchFacesByImage(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});</code></pre> 
       </div> 
       <p class="tag_title">Parameters:</p> 
       <ul class="param"> 
        <li> <span class="name">params</span> <span class="type">(<tt>Object</tt>)</span> <em class="default">(defaults to: <tt>{}</tt>)</em> — 
         <div class="inline">
          <ul> 
           <li><code>CollectionId</code> — (<code>String</code>) <p>ID of the collection to search.</p></li> 
           <li><code>Image</code> — (<code>map</code>) <p>The input image as bytes or an S3 object.</p> 
            <ul> 
             <li><code>Bytes</code> — (<code>Buffer, Typed Array, Blob, String</code>) <p>Blob of image bytes up to 5 MBs.</p></li> 
             <li><code>S3Object</code> — (<code>map</code>) <p>Identifies an S3 object as the image source.</p> 
              <ul> 
               <li><code>Bucket</code> — (<code>String</code>) <p>Name of the S3 bucket.</p></li> 
               <li><code>Name</code> — (<code>String</code>) <p>S3 object key name.</p></li> 
               <li><code>Version</code> — (<code>String</code>) <p>If the bucket is versioning enabled, you can specify the object version. </p></li> 
              </ul> </li> 
            </ul> </li> 
           <li><code>MaxFaces</code> — (<code>Integer</code>) <p>Maximum number of faces to return. The operation returns the maximum number of faces with the highest confidence in the match.</p></li> 
           <li><code>FaceMatchThreshold</code> — (<code>Float</code>) <p>(Optional) Specifies the minimum confidence in the face match to return. For example, don't return any matches where confidence in matches is less than 70%.</p></li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Callback (<tt>callback</tt>):</p> 
       <ul class="callback"> 
        <li class="callback_item"> <span class="signature"><strong>function</strong>(err, data) { ... } </span> 
         <div class="docstring"> 
          <div class="discussion"> 
           <p>Called when a response from the service is returned. If a callback is not supplied, you must call <span class="object_link"><a href="Request.html#send-property" title="AWS.Request.send (property)">AWS.Request.send()</a></span> on the returned request object to initiate the request.</p> 
          </div> 
         </div> 
         <div class="tags"> 
          <p class="tag_title">Context (<tt>this</tt>):</p> 
          <ul class="context"> 
           <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Response.html" title="AWS.Response (class)">Response</a></span></tt>)</span> — 
            <div class="inline">
             <p>the response object containing error, data properties, and the original request object.</p> 
            </div> </li> 
          </ul> 
          <p class="tag_title">Parameters:</p> 
          <ul class="param"> 
           <li> <span class="name">err</span> <span class="type">(<tt>Error</tt>)</span> — 
            <div class="inline">
             <p>the error object returned from the request. Set to <code>null</code> if the request is successful.</p> 
            </div> </li> 
           <li> <span class="name">data</span> <span class="type">(<tt>Object</tt>)</span> — 
            <div class="inline">
             <p>the de-serialized data returned from the request. Set to <code>null</code> if a request error occurs. The <code>data</code> object has the following properties:</p> 
             <ul> 
              <li><code>SearchedFaceBoundingBox</code> — (<code>map</code>) <p>The bounding box around the face in the input image that Amazon Rekognition used for the search.</p> 
               <ul> 
                <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
               </ul> </li> 
              <li><code>SearchedFaceConfidence</code> — (<code>Float</code>) <p>The level of confidence that the <code>searchedFaceBoundingBox</code>, contains a face.</p></li> 
              <li><code>FaceMatches</code> — (<code>Array&lt;map&gt;</code>) <p>An array of faces that match the input face, along with the confidence in the match.</p> 
               <ul> 
                <li><code>Similarity</code> — (<code>Float</code>) <p>Confidence in the match of this face with the input face.</p></li> 
                <li><code>Face</code> — (<code>map</code>) <p>Describes the face properties such as the bounding box, face ID, image ID of the source image, and external image ID that you assigned.</p> 
                 <ul> 
                  <li><code>FaceId</code> — (<code>String</code>) <p>Unique identifier that Amazon Rekognition assigns to the face.</p></li> 
                  <li><code>BoundingBox</code> — (<code>map</code>) <p>Bounding box of the face.</p> 
                   <ul> 
                    <li><code>Width</code> — (<code>Float</code>) <p>Width of the bounding box as a ratio of the overall image width.</p></li> 
                    <li><code>Height</code> — (<code>Float</code>) <p>Height of the bounding box as a ratio of the overall image height.</p></li> 
                    <li><code>Left</code> — (<code>Float</code>) <p>Left coordinate of the bounding box as a ratio of overall image width.</p></li> 
                    <li><code>Top</code> — (<code>Float</code>) <p>Top coordinate of the bounding box as a ratio of overall image height.</p></li> 
                   </ul> </li> 
                  <li><code>ImageId</code> — (<code>String</code>) <p>Unique identifier that Amazon Rekognition assigns to the input image.</p></li> 
                  <li><code>ExternalImageId</code> — (<code>String</code>) <p>Identifier that you assign to all the faces in the input image.</p></li> 
                  <li><code>Confidence</code> — (<code>Float</code>) <p>Confidence level that the bounding box contains a face (and not a different object such as a tree).</p></li> 
                 </ul> </li> 
               </ul> </li> 
             </ul> 
            </div> </li> 
          </ul> 
         </div> </li> 
       </ul> 
       <p class="tag_title">Returns:</p> 
       <ul class="return"> 
        <li> <span class="type">(<tt><span class="object_link"><a href="../AWS.html" title="AWS (module)">AWS</a></span>.<span class="object_link"><a href="Request.html" title="AWS.Request (class)">Request</a></span></tt>)</span> — 
         <div class="inline">
          <p>a handle to the operation request for subsequent event callback registration.</p> 
         </div> </li> 
       </ul> 
      </div> 
     </div> 
    </div> 
   </div> 
   <div id="footer">
     Generated on Mon Oct 2 19:25:42 2017 by 
    <a href="http://yardoc.org" title="Yay! A Ruby Documentation Tool" target="_parent">yard</a> 0.8.7.6 (ruby-2.3.1). 
   </div> 
   <!-- BEGIN-SECTION --> 
   <script type="text/javascript" src="https://media.amazonwebservices.com/amznUrchin.js"></script> 
   <!-- SiteCatalyst code version: H.25.2. Copyright 1996-2012 Adobe, Inc. All Rights Reserved.
More info available at http://www.omniture.com --> 
   <script language="JavaScript" type="text/javascript" src="https://media.amazonwebservices.com/js/sitecatalyst/s_code.min.js">
</script> 
   <script language="JavaScript" type="text/javascript">
  <!--
  s.prop66='AWS SDK for JavaScript';
  s.eVar66='D=c66';
  s.prop65='API Reference';
  s.eVar65='D=c65';
  var s_code=s.t();if(s_code)document.write(s_code)
  //-->
</script> 
   <script language="JavaScript" type="text/javascript">
  <!--if(navigator.appVersion.indexOf('MSIE')>=0)document.write(unescape('%3C')+'\!-'+'-')
  //-->
</script> 
   <noscript> 
    <img src="http://amazonwebservices.d2.sc.omtrdc.net/b/ss/awsamazondev/1/H.25.2--NS/0" height="1" width="1" border="0" alt=""> 
   </noscript> 
   <!--/DO NOT REMOVE/--> 
   <!-- End SiteCatalyst code version: H.25.2. --> 
   <!-- END-SECTION --> 
  </div>   
 </body>
</html>