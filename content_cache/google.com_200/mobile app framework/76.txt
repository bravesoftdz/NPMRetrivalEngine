<!doctype html>
<html lang="en">
 <head> 
  <meta charset="utf-8"> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <meta name="description" content="A comprehensive tutorial-style eBook that gets you from zero to native iOS app development with JavaScript, HTML and CSS in no time."> 
  <meta name="author" content="Manuel Kiessling"> 
  <title>Beginning Mobile App Development with React Native - The comprehensive tutorial-style eBook that gets you from zero to native iOS app development with JavaScript in no time.</title> 
  <!-- Bootstrap Core CSS --> 
  <link href="css/bootstrap.min.css" rel="stylesheet"> 
  <!-- Custom CSS --> 
  <link href="css/landing-page.css" rel="stylesheet"> 
  <!-- Custom Fonts --> 
  <link href="font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css"> 
  <link href="http://fonts.googleapis.com/css?family=Lato:300,400,700,300italic,400italic,700italic" rel="stylesheet" type="text/css"> 
  <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries --> 
  <!-- WARNING: Respond.js doesn't work if you view the page via file:// --> 
  <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]--> 
  <link href="http://beginning-mobile-app-development-with-react-native.com/book-preview.html" rel="canonical"> 
 </head> 
 <body> 
  <!-- Header --> 
  <a name="about"></a> 
  <div class="intro-header"> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-lg-12"> 
      <div class="intro-message"> 
      </div> 
     </div> 
    </div> 
   </div> 
   <!-- /.container --> 
  </div> 
  <!-- /.intro-header --> 
  <!-- Page Content --> 
  <div class="content-section-a"> 
   <div class="container"> 
    <div class="row book-preview"> 
     <div class="col-lg-9"> 
      <h1>Beginning Mobile App Development<br>with React Native <span class="subtitle"> ~ Preview chapters</span></h1> 
      <p>A comprehensive tutorial-style eBook that gets you from zero to native iOS app development with JavaScript in no time.</p> 
      <h2 id="leanpub-auto-trademark-notes">Trademark notes</h2> 
      <p>Apple, Xcode, iPhone, iPad, and iPad mini are trademarks of Apple Inc., registered in the U.S. and other countries.</p> 
      <p>Facebook, React, and React Native are trademarks of Facebook Inc., registered in the U.S. and other countries.</p> 
      <p>This book is neither affiliated with nor endorsed by any of these parties.</p> 
      <h2 id="leanpub-auto-preface">Preface</h2> 
      <h3 id="leanpub-auto-intended-audience">Intended audience</h3> 
      <p>The book will introduce readers to the React Native JavaScript framework and its mobile app development environment. In the course of the book, the reader will build a full-fledged native mobile app, learning about each React Native framework detail on the way to the final product. Furthermore, the reader will be introduced to every tool and all JavaScript language constructs needed to fully master software development with React Native: JSX, ECMAScript 6, the CSS Flexbox system, Xcode®, Node.js and NPM, utilities like watchman, and more.</p> 
      <p>If you did some JavaScript programming before and want to become a mobile app developer, then this book is for you. It introduces everything that is needed to work with the React Native JavaScript framework in an easy-to-follow and comprehensive manner.</p> 
      <h3 id="leanpub-auto-prerequisites">Prerequisites</h3> 
      <p>In order to create React Native based iOS applications and work through the examples of this book, you need all of the following:</p> 
      <ul> 
       <li>A computer running Mac OS X</li> 
       <li>The most recent stable version of Xcode® (v6.3 as of this writing)</li> 
      </ul> 
      <div class="aside sidebarish"> 
       <p>Xcode® is available for download at <a href="https://developer.apple.com/xcode/downloads/">https://developer.apple.com/xcode/downloads/</a> or on the Mac OS X App Store?.</p> 
      </div> 
      <p>Note that unless you want to run your applications on real iOS hardware like your iPhone®, you do <strong>not</strong> need to be enrolled to the Apple® iOS Developer Program. In other words, you can run your applications using the iOS simulator without the need to be enrolled.</p> 
      <p>In case you do not have access to an Apple® computer, you can try to set up a Virtual Machine running Mac OS X following the guide at <a href="https://blog.udemy.com/xcode-on-windows/">https://blog.udemy.com/xcode-on-windows/</a>.</p> 
      <div class="aside sidebarish"> 
       <p>From this point on, the book presumes that you have a running installation of Mac OS X with the most recent version of Xcode® installed.</p> 
      </div> 
      <h2 id="leanpub-auto-setting-up-your-development-environment">Setting up your development environment</h2> 
      <p>React Native is a collection of JavaScript and Objective-C code plus supporting tools that allow to create, run, and debug native iOS applications.</p> 
      <p>In order to reach the point where we can actually start working on our first React Native application, some preparation is necessary.</p> 
      <p>On your development machine, the following components need to be made available:</p> 
      <ul> 
       <li>Homebrew</li> 
       <li>Node.js</li> 
       <li>Watchman</li> 
       <li>Google Chrome</li> 
       <li>React Native CLI</li> 
      </ul> 
      <h3 id="leanpub-auto-installing-homebrew">Installing Homebrew</h3> 
      <p><em>Homebrew</em> is a package manager for Mac OS X. We will use it to subsequently install most of the software tools we need.</p> 
      <p>In order to install and set up Homebrew, open a Terminal window and run the following command:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre>ruby -e <code class="s2">"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</code>
</pre>
       </div> 
      </div> 
      <p>For further information, visit the Homebrew homepage at <a href="http://brew.sh/">http://brew.sh/</a>.</p> 
      <h3 id="leanpub-auto-installing-nodejs">Installing Node.js</h3> 
      <p><em>Node.js</em> is a server-side JavaScript runtime environment. React Native ships with some helper tools that are written for Node.js. Also, we use the Node.js package manager, <em>NPM</em>, to install the React Native command line tool itself.</p> 
      <p>In order to install and set up Node.js, open a Terminal window and run the following command:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre>brew install node
</pre>
       </div> 
      </div> 
      <h3 id="leanpub-auto-installing-watchman">Installing Watchman</h3> 
      <p>React Native uses <em>Watchman</em> to react to changes in source code files. This is explained in more detail in a later chapter.</p> 
      <p>In order to install and set up Watchman, open a Terminal window and run the following command:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre>brew install --HEAD watchman
</pre>
       </div> 
      </div> 
      <p>The <code>--HEAD</code> parameter ensures that the most recent version of Watchman is installed.</p> 
      <h3 id="leanpub-auto-installing-google-chrome">Installing Google Chrome</h3> 
      <p>Google Chrome isn’t strictly necessary to create applications with React Native, but it allows to debug them during development. The details are explained in a later chapter.</p> 
      <p>Head over to <a href="https://www.google.com/chrome/browser/desktop/index.html">https://www.google.com/chrome/browser/desktop/index.html</a> to download the latest version.</p> 
      <h3 id="leanpub-auto-installing-the-react-native-cli">Installing the React Native CLI</h3> 
      <p>The <em>React Native Command Line Interface</em> is a small Node.js helper script that allows to set up new React Native projects.</p> 
      <p>In order to install and set up <em>React Native CLI</em>, open a Terminal window and run the following command:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre>npm install -g react-native-cli
</pre>
       </div> 
      </div> 
      <p>With this, we are good to go to create our first application.</p> 
      <div class="aside sidebarish"> 
       <p>You might also want to install a decent code editor. While Xcode® is part of our development environment, it’s certainly not the most well-suited JavaScript editor out there. Check out <em>TextWrangler</em> at <a href="http://www.barebones.com/products/textwrangler/">http://www.barebones.com/products/textwrangler/</a> if you prefer a simple yet sufficient tool, or <em>IntelliJ IDEA Community Edition</em> for a full-fledged IDE at <a href="https://www.jetbrains.com/idea/download/">https://www.jetbrains.com/idea/download/</a>. <em>Atom</em>, available at <a href="https://atom.io/">https://atom.io/</a>, lies somewhat in between. All three tools are usable free of charge.</p> 
      </div> 
      <h2 id="leanpub-auto-creating-your-first-native-ios-application-using-react-native">Creating your first native iOS application using React Native</h2> 
      <p>In this chapter, we will create a very simple application and make it run in the iOS simulator. By doing so, we are using a whole lot of different components that in total allow us to end up with a working app. Once our app runs, we will look under the hood in order to understand all those components and get a feeling for the inner workings of React Native applications. These insights form the basis that allows us to build more complex applications while truly understanding what we are doing.</p> 
      <h3 id="leanpub-auto-creating-the-app-structure">Creating the app structure</h3> 
      <p>Open a new Terminal window. On the command prompt, type the following and hit enter:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre>react-native init HelloWorld
</pre>
       </div> 
      </div> 
      <p>This results in some work being done which gives you a new folder named <em>HelloWorld</em>. We will analyze its contents later - for now, we want to get our feet wet as quickly as possible.</p> 
      <h3 id="leanpub-auto-starting-the-app">Starting the app</h3> 
      <p>Start Xcode®, choose <em>File</em> ? <em>Open…</em> from the menu bar, navigate to the <em>HelloWorld</em> folder, and open file <em>HelloWorld.xcodeproj</em>.</p> 
      <p>Then, choose <em>Product</em> ? <em>Destination</em> from the menu bar, and from the list beneath <em>iOS Simulator</em>, choose <em>iPhone 6</em>.</p> 
      <p>Now, hit <strong><code>?</code>-R</strong> in order to build and run the application. This will open two new windows: a terminal window that talks about the <em>React packager</em>, and the iOS simulator which shows a visually rather unimpressive app that greets you with a <em>Welcome to React Native!</em> message.</p> 
      <div class="aside sidebarish"> 
       <p>In case you get an ugly red error screen in the iOS Simulator that says <em>Could not connect to development server</em>, then proceed as follows: - Switch to a Terminal window - <code>cd</code> to the root folder of the <em>Hello World</em> project - Run <code>npm start</code> and keep the Terminal open</p> 
      </div> 
      <p>An awful lot of very interesting things just happened in order to display this simulator screen, and dissecting all the components involved and analyzing all the ways these components interact with each other will be a very exciting trip down the rabbit hole that is React Native - but, not yet. First the doing, then the explanations.</p> 
      <h3 id="leanpub-auto-working-on-the-code">Working on the code</h3> 
      <p>As said, a lot of different components are involved that make up our application, but front and center is the JavaScript code that defines and manages the user interface of our app - after all, the central idea behind React Native is the ability to write native apps with JavaScript. So let’s look at the JavaScript behind <em>HelloWorld</em>.</p> 
      <p>Fire up the editor or IDE you decided to use and point it at the <em>HelloWorld</em> folder you created. In it, you will find a file named <em>index.ios.js</em> which you need to open in your editor.</p> 
      <div class="aside sidebarish"> 
       <p>In Xcode®, you probably saw a file named <em>main.jsbundle</em>. For now, this is <strong>not</strong> what we are looking for.</p> 
      </div> 
      <p>It’s immediately obvious that this is the file behind the UI we see in the simulator:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="lineno"> 1</code> <code class="cm">/**</code>
<code class="lineno"> 2</code> <code class="cm"> * Sample React Native App</code>
<code class="lineno"> 3</code> <code class="cm"> * https://github.com/facebook/react-native</code>
<code class="lineno"> 4</code> <code class="cm"> */</code>
<code class="lineno"> 5</code> <code class="s1">'use strict'</code><code class="p">;</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="kd">var</code> <code class="nx">React</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'react-native'</code><code class="p">);</code>
<code class="lineno"> 8</code> <code class="kd">var</code> <code class="p">{</code>
<code class="lineno"> 9</code>   <code class="nx">AppRegistry</code><code class="p">,</code>
<code class="lineno">10</code>   <code class="nx">StyleSheet</code><code class="p">,</code>
<code class="lineno">11</code>   <code class="nx">Text</code><code class="p">,</code>
<code class="lineno">12</code>   <code class="nx">View</code><code class="p">,</code>
<code class="lineno">13</code> <code class="p">}</code> <code class="o">=</code> <code class="nx">React</code><code class="p">;</code>
<code class="lineno">14</code> 
<code class="lineno">15</code> <code class="kd">var</code> <code class="nx">HelloWorld</code> <code class="o">=</code> <code class="nx">React</code><code class="p">.</code><code class="nx">createClass</code><code class="p">({</code>
<code class="lineno">16</code>   <code class="nx">render</code><code class="o">:</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">17</code>     <code class="k">return</code> <code class="p">(</code>
<code class="lineno">18</code>       <code class="o">&lt;</code><code class="nx">View</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">container</code><code class="p">}</code><code class="o">&gt;</code>
<code class="lineno">19</code>         <code class="o">&lt;</code><code class="nx">Text</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">welcome</code><code class="p">}</code><code class="o">&gt;</code>
<code class="lineno">20</code>           <code class="nx">Welcome</code> <code class="nx">to</code> <code class="nx">React</code> <code class="nx">Native</code><code class="o">!</code>
<code class="lineno">21</code>         <code class="o">&lt;</code><code class="err">/Text&gt;</code>
<code class="lineno">22</code>         <code class="o">&lt;</code><code class="nx">Text</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">instructions</code><code class="p">}</code><code class="o">&gt;</code>
<code class="lineno">23</code>           <code class="nx">To</code> <code class="nx">get</code> <code class="nx">started</code><code class="p">,</code> <code class="nx">edit</code> <code class="nx">index</code><code class="p">.</code><code class="nx">ios</code><code class="p">.</code><code class="nx">js</code>
<code class="lineno">24</code>         <code class="o">&lt;</code><code class="err">/Text&gt;</code>
<code class="lineno">25</code>         <code class="o">&lt;</code><code class="nx">Text</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">instructions</code><code class="p">}</code><code class="o">&gt;</code>
<code class="lineno">26</code>           <code class="nx">Press</code> <code class="nx">Cmd</code><code class="o">+</code><code class="nx">R</code> <code class="nx">to</code> <code class="nx">reload</code><code class="p">,{</code><code class="s1">'\n'</code><code class="p">}</code>
<code class="lineno">27</code>           <code class="nx">Cmd</code><code class="o">+</code><code class="nx">Control</code><code class="o">+</code><code class="nx">Z</code> <code class="k">for</code> <code class="nx">dev</code> <code class="nx">menu</code>
<code class="lineno">28</code>         <code class="o">&lt;</code><code class="err">/Text&gt;</code>
<code class="lineno">29</code>       <code class="o">&lt;</code><code class="err">/View&gt;</code>
<code class="lineno">30</code>     <code class="p">);</code>
<code class="lineno">31</code>   <code class="p">}</code>
<code class="lineno">32</code> <code class="p">});</code>
<code class="lineno">33</code> 
<code class="lineno">34</code> <code class="kd">var</code> <code class="nx">styles</code> <code class="o">=</code> <code class="nx">StyleSheet</code><code class="p">.</code><code class="nx">create</code><code class="p">({</code>
<code class="lineno">35</code>   <code class="nx">container</code><code class="o">:</code> <code class="p">{</code>
<code class="lineno">36</code>     <code class="nx">flex</code><code class="o">:</code> <code class="mi">1</code><code class="p">,</code>
<code class="lineno">37</code>     <code class="nx">justifyContent</code><code class="o">:</code> <code class="s1">'center'</code><code class="p">,</code>
<code class="lineno">38</code>     <code class="nx">alignItems</code><code class="o">:</code> <code class="s1">'center'</code><code class="p">,</code>
<code class="lineno">39</code>     <code class="nx">backgroundColor</code><code class="o">:</code> <code class="s1">'#F5FCFF'</code><code class="p">,</code>
<code class="lineno">40</code>   <code class="p">},</code>
<code class="lineno">41</code>   <code class="nx">welcome</code><code class="o">:</code> <code class="p">{</code>
<code class="lineno">42</code>     <code class="nx">fontSize</code><code class="o">:</code> <code class="mi">20</code><code class="p">,</code>
<code class="lineno">43</code>     <code class="nx">textAlign</code><code class="o">:</code> <code class="s1">'center'</code><code class="p">,</code>
<code class="lineno">44</code>     <code class="nx">margin</code><code class="o">:</code> <code class="mi">10</code><code class="p">,</code>
<code class="lineno">45</code>   <code class="p">},</code>
<code class="lineno">46</code>   <code class="nx">instructions</code><code class="o">:</code> <code class="p">{</code>
<code class="lineno">47</code>     <code class="nx">textAlign</code><code class="o">:</code> <code class="s1">'center'</code><code class="p">,</code>
<code class="lineno">48</code>     <code class="nx">color</code><code class="o">:</code> <code class="s1">'#333333'</code><code class="p">,</code>
<code class="lineno">49</code>     <code class="nx">marginBottom</code><code class="o">:</code> <code class="mi">5</code><code class="p">,</code>
<code class="lineno">50</code>   <code class="p">},</code>
<code class="lineno">51</code> <code class="p">});</code>
<code class="lineno">52</code> 
<code class="lineno">53</code> <code class="nx">AppRegistry</code><code class="p">.</code><code class="nx">registerComponent</code><code class="p">(</code><code class="s1">'HelloWorld'</code><code class="p">,</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="nx">HelloWorld</code><code class="p">);</code>
</pre>
       </div> 
      </div> 
      <p>Clearly, this is JavaScript code, but if you haven’t followed the latest developments in the JS world or if you did not yet play around with the “normal” React framework, then some parts of this code might look a bit odd. Not that this should stop us from fiddling around!</p> 
      <p>Change line 20 from</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="nx">Welcome</code> <code class="nx">to</code> <code class="nx">React</code> <code class="nx">Native</code><code class="o">!</code>
</pre>
       </div> 
      </div> 
      <p>to</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="nx">Hello</code><code class="p">,</code> <code class="nx">World</code><code class="o">!</code>
</pre>
       </div> 
      </div> 
      <p>Then switch back to the iOS Simulator window and hit <strong><code>?</code>-R</strong>. The UI of our app will refresh and display the new text.</p> 
      <p>Now, if you haven’t done any native iOS app development before, hitting <em>Refresh</em> and seeing the changes you did to the code reflected in the Simulator probably doesn’t feel like a big deal, but it actually is. The same procedure for an Objective-C or Swift based application involves a recompilation of the changed source code and a rebuild of the application that is then completely restarted in the Simulator. That doesn’t only sound like it takes longer, it <em>does</em> take longer.</p> 
      <p>Once again, the explanation for why and how this “refresh” workflow actually works will follow later.</p> 
      <p>It would be great if we could make our app <em>do</em> something. Let’s try to add a text input field for entering a name and change the behaviour of our app in a way that makes it greet the name we enter - if this doesn’t secure us the #1 spot in the App Store charts, then I don’t know what will.</p> 
      <p>What we need in order to achieve this functionality is <em>a)</em> an additional UI element plus styling that allows to input text, <em>b)</em> a function that handles the text that is input, and <em>c)</em> a way to output the input text within the greet text element. With that, the result should look like this:</p> 
      <div class="image-with-caption center"> 
       <img src="images/ios_simulator_screenshot_helloworld1.png" alt="The HelloWorld application with added functionality">
       <p class="caption">The HelloWorld application with added functionality</p> 
      </div> 
      <p>Here is the updated code in <em>index.ios.js</em> that is needed:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="lineno"> 1</code> <code class="cm">/**</code>
<code class="lineno"> 2</code> <code class="cm"> * Sample React Native App</code>
<code class="lineno"> 3</code> <code class="cm"> * https://github.com/facebook/react-native</code>
<code class="lineno"> 4</code> <code class="cm"> */</code>
<code class="lineno"> 5</code> <code class="s1">'use strict'</code><code class="p">;</code>
<code class="lineno"> 6</code> 
<code class="lineno"> 7</code> <code class="kd">var</code> <code class="nx">React</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'react-native'</code><code class="p">);</code>
<code class="lineno"> 8</code> <code class="kd">var</code> <code class="p">{</code>
<code class="lineno"> 9</code>   <code class="nx">AppRegistry</code><code class="p">,</code>
<code class="lineno">10</code>   <code class="nx">StyleSheet</code><code class="p">,</code>
<code class="lineno">11</code>   <code class="nx">Text</code><code class="p">,</code>
<code class="lineno">12</code>   <code class="nx">TextInput</code><code class="p">,</code>
<code class="lineno">13</code>   <code class="nx">View</code><code class="p">,</code>
<code class="lineno">14</code> <code class="p">}</code> <code class="o">=</code> <code class="nx">React</code><code class="p">;</code>
<code class="lineno">15</code> 
<code class="lineno">16</code> <code class="kd">var</code> <code class="nx">HelloWorld</code> <code class="o">=</code> <code class="nx">React</code><code class="p">.</code><code class="nx">createClass</code><code class="p">({</code>
<code class="lineno">17</code>   <code class="nx">getInitialState</code><code class="o">:</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">18</code>     <code class="k">return</code> <code class="p">{</code>
<code class="lineno">19</code>       <code class="nx">name</code><code class="o">:</code> <code class="s1">'World'</code>
<code class="lineno">20</code>     <code class="p">};</code>
<code class="lineno">21</code>   <code class="p">},</code>
<code class="lineno">22</code>   <code class="nx">onNameChanged</code><code class="o">:</code> <code class="kd">function</code><code class="p">(</code><code class="nx">event</code><code class="p">)</code> <code class="p">{</code>
<code class="lineno">23</code>     <code class="k">this</code><code class="p">.</code><code class="nx">setState</code><code class="p">({</code> <code class="nx">name</code><code class="o">:</code> <code class="nx">event</code><code class="p">.</code><code class="nx">nativeEvent</code><code class="p">.</code><code class="nx">text</code> <code class="p">});</code>
<code class="lineno">24</code>   <code class="p">},</code>
<code class="lineno">25</code>   <code class="nx">render</code><code class="o">:</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
<code class="lineno">26</code>     <code class="k">return</code> <code class="p">(</code>
<code class="lineno">27</code>       <code class="o">&lt;</code><code class="nx">View</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">container</code><code class="p">}</code><code class="o">&gt;</code>
<code class="lineno">28</code>         <code class="o">&lt;</code><code class="nx">TextInput</code>
<code class="lineno">29</code>           <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">nameInput</code><code class="p">}</code>
<code class="lineno">30</code>           <code class="nx">onChange</code><code class="o">=</code><code class="p">{</code><code class="k">this</code><code class="p">.</code><code class="nx">onNameChanged</code><code class="p">}</code>
<code class="lineno">31</code>           <code class="nx">placeholder</code><code class="o">=</code><code class="s1">'Who should be greeted?'</code><code class="o">/&gt;</code>
<code class="lineno">32</code>         <code class="o">&lt;</code><code class="nx">Text</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">welcome</code><code class="p">}</code><code class="o">&gt;</code>
<code class="lineno">33</code>           <code class="nx">Hello</code><code class="p">,</code> <code class="p">{</code><code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">.</code><code class="nx">name</code><code class="p">}</code><code class="o">!&lt;</code><code class="err">/Text&gt;</code>
<code class="lineno">34</code>         <code class="o">&lt;</code><code class="nx">Text</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">instructions</code><code class="p">}</code><code class="o">&gt;</code>
<code class="lineno">35</code>           <code class="nx">To</code> <code class="nx">get</code> <code class="nx">started</code><code class="p">,</code> <code class="nx">edit</code> <code class="nx">index</code><code class="p">.</code><code class="nx">ios</code><code class="p">.</code><code class="nx">js</code>
<code class="lineno">36</code>         <code class="o">&lt;</code><code class="err">/Text&gt;</code>
<code class="lineno">37</code>         <code class="o">&lt;</code><code class="nx">Text</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">instructions</code><code class="p">}</code><code class="o">&gt;</code>
<code class="lineno">38</code>           <code class="nx">Press</code> <code class="nx">Cmd</code><code class="o">+</code><code class="nx">R</code> <code class="nx">to</code> <code class="nx">reload</code><code class="p">,{</code><code class="s1">'\n'</code><code class="p">}</code>
<code class="lineno">39</code>           <code class="nx">Cmd</code><code class="o">+</code><code class="nx">Control</code><code class="o">+</code><code class="nx">Z</code> <code class="k">for</code> <code class="nx">dev</code> <code class="nx">menu</code>
<code class="lineno">40</code>         <code class="o">&lt;</code><code class="err">/Text&gt;</code>
<code class="lineno">41</code>       <code class="o">&lt;</code><code class="err">/View&gt;</code>
<code class="lineno">42</code>     <code class="p">);</code>
<code class="lineno">43</code>   <code class="p">}</code>
<code class="lineno">44</code> <code class="p">});</code>
<code class="lineno">45</code> 
<code class="lineno">46</code> <code class="kd">var</code> <code class="nx">styles</code> <code class="o">=</code> <code class="nx">StyleSheet</code><code class="p">.</code><code class="nx">create</code><code class="p">({</code>
<code class="lineno">47</code>   <code class="nx">container</code><code class="o">:</code> <code class="p">{</code>
<code class="lineno">48</code>     <code class="nx">flex</code><code class="o">:</code> <code class="mi">1</code><code class="p">,</code>
<code class="lineno">49</code>     <code class="nx">justifyContent</code><code class="o">:</code> <code class="s1">'center'</code><code class="p">,</code>
<code class="lineno">50</code>     <code class="nx">alignItems</code><code class="o">:</code> <code class="s1">'center'</code><code class="p">,</code>
<code class="lineno">51</code>     <code class="nx">backgroundColor</code><code class="o">:</code> <code class="s1">'#F5FCFF'</code><code class="p">,</code>
<code class="lineno">52</code>   <code class="p">},</code>
<code class="lineno">53</code>   <code class="nx">welcome</code><code class="o">:</code> <code class="p">{</code>
<code class="lineno">54</code>     <code class="nx">fontSize</code><code class="o">:</code> <code class="mi">20</code><code class="p">,</code>
<code class="lineno">55</code>     <code class="nx">textAlign</code><code class="o">:</code> <code class="s1">'center'</code><code class="p">,</code>
<code class="lineno">56</code>     <code class="nx">margin</code><code class="o">:</code> <code class="mi">10</code><code class="p">,</code>
<code class="lineno">57</code>   <code class="p">},</code>
<code class="lineno">58</code>   <code class="nx">instructions</code><code class="o">:</code> <code class="p">{</code>
<code class="lineno">59</code>     <code class="nx">textAlign</code><code class="o">:</code> <code class="s1">'center'</code><code class="p">,</code>
<code class="lineno">60</code>     <code class="nx">color</code><code class="o">:</code> <code class="s1">'#333333'</code><code class="p">,</code>
<code class="lineno">61</code>     <code class="nx">marginBottom</code><code class="o">:</code> <code class="mi">5</code><code class="p">,</code>
<code class="lineno">62</code>   <code class="p">},</code>
<code class="lineno">63</code>   <code class="nx">nameInput</code><code class="o">:</code> <code class="p">{</code>
<code class="lineno">64</code>     <code class="nx">height</code><code class="o">:</code> <code class="mi">36</code><code class="p">,</code>
<code class="lineno">65</code>     <code class="nx">padding</code><code class="o">:</code> <code class="mi">4</code><code class="p">,</code>
<code class="lineno">66</code>     <code class="nx">margin</code><code class="o">:</code> <code class="mi">24</code><code class="p">,</code>
<code class="lineno">67</code>     <code class="nx">fontSize</code><code class="o">:</code> <code class="mi">18</code><code class="p">,</code>
<code class="lineno">68</code>     <code class="nx">borderWidth</code><code class="o">:</code> <code class="mi">1</code><code class="p">,</code>
<code class="lineno">69</code>   <code class="p">}</code>
<code class="lineno">70</code> <code class="p">});</code>
<code class="lineno">71</code> 
<code class="lineno">72</code> <code class="nx">AppRegistry</code><code class="p">.</code><code class="nx">registerComponent</code><code class="p">(</code><code class="s1">'HelloWorld'</code><code class="p">,</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="nx">HelloWorld</code><code class="p">);</code>
</pre>
       </div> 
      </div> 
      <p>With this, we introduce a new React Native UI element, <em>TextInput</em> (line 12), which we add to our view (line 28). An accompanying style definition is added, too (line 63). The view is set up with an initial state (line 17), and we define a function called <em>onNameChanged</em> that changes this state (line 22). This function is called whenever the value of the text input changes (line 30). Our text block is now dynamic and always reflects the value of the state variable <em>name</em> (line 33).</p> 
      <p>Re-running the application (remember, <strong><code>?</code>-R</strong> while in <em>iOS Simulator</em> is all it takes) presents the new user interface which now shows a text input field. Whatever we put into this field is immediately reflected within the greet message below. Achievement unlocked.</p> 
      <h2 id="leanpub-auto-react-native-architecture-explained">React Native architecture explained</h2> 
      <p>Ok, we played around with it, but learning to understand how React Native actually works is overdue.</p> 
      <h3 id="leanpub-auto-a-closer-look-at-application-creation">A closer look at application creation</h3> 
      <p>Let’s reiterate the steps we did while setting up our <em>HelloWorld</em> application and take a much closer look while doing so.</p> 
      <p>The first thing we did after setting up the other prerequisites was to install <em>react-native-cli</em> using <em>npm</em>, the Node Package Manager. This gave us the <code>react-native</code> command, but although the name seems to imply it, this is not <em>React Native</em> itself, but merely a small helper tool that allows us to create new React Native projects. In case you are curious, the source code of the <code>react-native</code> program lives at <a href="https://github.com/facebook/react-native/blob/master/react-native-cli/index.js">https://github.com/facebook/react-native/blob/master/react-native-cli/index.js</a>.</p> 
      <p>We then ran <code>react-native init HelloWorld</code>, which set up our first actual React Native application structure. It created a folder named <em>HelloWorld</em> - let’s see what’s inside:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre>HelloWorld.xcodeproj/
Podfile
iOS/
index.ios.js
node_modules/
package.json
</pre>
       </div> 
      </div> 
      <p>To give you the full picture, here is what exactly happens when running <code>react-native init HelloWorld</code>:</p> 
      <ul> 
       <li>A folder named <em>HelloWorld</em> is created</li> 
       <li>In it, the <em>package.json</em> file is created</li> 
       <li> <code>npm install --save react-native</code> is run, which installs <em>react-native</em> and its dependencies into <em>HelloWorld/node_modules</em> and declares <em>react-native</em> as a dependency of your project in <em>HelloWorld/package.json</em> </li> 
       <li>The globally installed <code>react-native</code> CLI tool then hands over control to the <em>local</em> CLI tool that has just been installed into <em>HelloWorld/node_modules/react-native/local-cli/cli.js</em> </li> 
       <li>This in turn executes <em>HelloWorld/node_modules/react-native/init.sh</em>, which is yet another helper script that takes care of putting the boiler plate application code in place, like the minimal React Native code in file <em>index.ios.js</em> and the Objective-C code plus other goodies in subfolder <em>iOS</em>, and the Xcode® project definition in subfolder <em>HelloWorld.xcodeproj</em> </li> 
      </ul> 
      <p>We already saw that the React Native based JavaScript code that makes up our actual application lives in <em>index.ios.js</em>.</p> 
      <p>The <em>package.json</em> file is no surprise for those who already worked with Node.js; it defines some metadata for our project and, most importantly, declares <em>react-native</em> (this time, this means the actual framework that makes our application possible) as a dependency of our own project.</p> 
      <p>The <em>node_modules</em> folder is simply a result of the <code>npm install</code> run that took place during project initialization. It contains the <em>react-native</em> code, which in turn consists of other NPM dependencies, helper scripts, and a lot of JavaScript and Objective-C code.</p> 
      <p>The initialization process also provided the minimum Xcode® project definitions plus some Objective-C boilerplate code, which allows us to open our new project in Xcode® and to instantly run the application without any further ado. All of this could have been done manually, but would include a lot of steps that are identical no matter what kind of application we are going to write, thus it makes sense to streamline this process via <code>react-native init</code>.</p> 
      <div class="aside sidebarish"> 
       <p><em>Podfile</em> is similar to <em>package.json</em>; it declares Objective-C library dependencies for the <em>CocoaPods</em> dependency manager. We will talk about this in more detail later in the book, and ignore it for now.</p> 
      </div> 
      <p>The takeaway here is that our <em>HelloWorld</em> project is multiple things at once. It is an Xcode® project, but it’s also an NPM project. It’s a React Native based JavaScript application, but it also contains some iOS glue code that is needed to make our JavaScript code run on iOS in the first place.</p> 
      <p>With this overview, we can dive one level deeper and start to look at how the different elements in our project folder interact with each other in order to end up as a working native iOS application.</p> 
      <h3 id="leanpub-auto-how-the-different-parts-play-together">How the different parts play together</h3> 
      <p>The selling points of React Native are: a) it allows us to write applications for iOS using JavaScript, and b) these applications run natively and provide a fluid UI and user experience.</p> 
      <p>Now, it’s no secret that iOS doesn’t run JavaScript apps directly; native applications for this platform need to be written in Objective-C or, as of recently, Swift, and need to be compiled into machine code.</p> 
      <p>The component on iOS that is known to execute JavaScript is the iOS browser Safari, or, in context of apps, the <em>UIWebView</em> component. This has been used in the past to create so-called <em>hybrid</em> apps. These are actual native apps written in Objective-C, but the Objective-C code only exists in order to launch a <em>UIWebView</em> container, which is a browser engine without the browser UI surrounding it. Inside that container, a web page consisting of HTML, CSS and JavaScript is displayed.</p> 
      <p>This allows to provide users something that is very close to an actual mobile app by utilizing common web technologies. However, even though the Objective-C code that makes up the wrapper which creates the UIWebView is native, the content within the UIWebView is not - it’s just a webpage, which is why these hybrid apps gained the reputation of providing a user experience that isn’t as seamless as those of full native apps.</p> 
      <p>In our <em>HelloWorld</em> example, we wrote JavaScript, but we didn’t create a webpage. No UIWebView is utilized in order to execute our code.</p> 
      <p>Instead, our code is run in an embedded instance of JavaScriptCore inside our app and rendered to higher-level platform-specific components. This might sound a bit cryptic, but let’s follow the code. In the Xcode® Project navigator, open the file <em>HelloWorld/AppDelegate.m</em>. This is what it looks like:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="lineno"> 1</code> <code class="cm">/**</code>
<code class="lineno"> 2</code> <code class="cm"> * Copyright (c) 2015-present, Facebook, Inc.</code>
<code class="lineno"> 3</code> <code class="cm"> * All rights reserved.</code>
<code class="lineno"> 4</code> <code class="cm"> *</code>
<code class="lineno"> 5</code> <code class="cm"> * This source code is licensed under the BSD-style license found in the</code>
<code class="lineno"> 6</code> <code class="cm"> * LICENSE file in the root directory of this source tree. An additional grant</code>
<code class="lineno"> 7</code> <code class="cm"> * of patent rights can be found in the PATENTS file in the same directory.</code>
<code class="lineno"> 8</code> <code class="cm"> */</code>
<code class="lineno"> 9</code> 
<code class="lineno">10</code> <code class="cp">#import "AppDelegate.h"</code>
<code class="lineno">11</code> 
<code class="lineno">12</code> <code class="cp">#import "RCTRootView.h"</code>
<code class="lineno">13</code> 
<code class="lineno">14</code> <code class="k">@implementation</code> <code class="nc">AppDelegate</code>
<code class="lineno">15</code> 
<code class="lineno">16</code> <code class="k">-</code> <code class="p">(</code><code class="kt">BOOL</code><code class="p">)</code><code class="nf">application:</code><code class="p">(</code><code class="n">UIApplication</code> <code class="o">*</code><code class="p">)</code><code class="nv">application</code> <code class="nf">didFinishLaunchingWithOptions:</code><code class="p">(</code><code class="n">NSDictionary</code> <code class="o">*</code><code class="p">)</code><code class="nv">launchOptions</code>
<code class="lineno">17</code> <code class="p">{</code>
<code class="lineno">18</code>   <code class="n">NSURL</code> <code class="o">*</code><code class="n">jsCodeLocation</code><code class="p">;</code>
<code class="lineno">19</code> 
<code class="lineno">20</code>   <code class="c1">// Loading JavaScript code - uncomment the one you want.</code>
<code class="lineno">21</code> 
<code class="lineno">22</code>   <code class="c1">// OPTION 1</code>
<code class="lineno">23</code>   <code class="c1">// Load from development server. Start the server from the repository root:</code>
<code class="lineno">24</code>   <code class="c1">//</code>
<code class="lineno">25</code>   <code class="c1">// $ npm start</code>
<code class="lineno">26</code>   <code class="c1">//</code>
<code class="lineno">27</code>   <code class="c1">// To run on device, change `localhost` to the IP address of your computer, and make sure your computer and</code>
<code class="lineno">28</code>   <code class="c1">// iOS device are on the same Wi-Fi network.</code>
<code class="lineno">29</code>   <code class="n">jsCodeLocation</code> <code class="o">=</code> <code class="p">[</code><code class="n">NSURL</code> <code class="n">URLWithString</code><code class="o">:</code><code class="s">@"http://localhost:8081/index.ios.bundle"</code><code class="p">];</code>
<code class="lineno">30</code> 
<code class="lineno">31</code>   <code class="c1">// OPTION 2</code>
<code class="lineno">32</code>   <code class="c1">// Load from pre-bundled file on disk. To re-generate the static bundle, run</code>
<code class="lineno">33</code>   <code class="c1">//</code>
<code class="lineno">34</code>   <code class="c1">// $ curl 'http://localhost:8081/index.ios.bundle?dev=false&amp;minify=true' -o iOS/main.jsbundle</code>
<code class="lineno">35</code>   <code class="c1">//</code>
<code class="lineno">36</code>   <code class="c1">// and uncomment the next following line</code>
<code class="lineno">37</code>   <code class="c1">// jsCodeLocation = [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];</code>
<code class="lineno">38</code> 
<code class="lineno">39</code>   <code class="n">RCTRootView</code> <code class="o">*</code><code class="n">rootView</code> <code class="o">=</code> <code class="p">[[</code><code class="n">RCTRootView</code> <code class="n">alloc</code><code class="p">]</code> <code class="n">initWithBundleURL</code><code class="o">:</code><code class="n">jsCodeLocation</code>
<code class="lineno">40</code>                                                       <code class="nl">moduleName:</code><code class="s">@"HelloWorld"</code>
<code class="lineno">41</code>                                                    <code class="nl">launchOptions:</code><code class="n">launchOptions</code><code class="p">];</code>
<code class="lineno">42</code> 
<code class="lineno">43</code>   <code class="n">self</code><code class="p">.</code><code class="n">window</code> <code class="o">=</code> <code class="p">[[</code><code class="n">UIWindow</code> <code class="n">alloc</code><code class="p">]</code> <code class="n">initWithFrame</code><code class="o">:</code><code class="p">[</code><code class="n">UIScreen</code> <code class="n">mainScreen</code><code class="p">].</code><code class="n">bounds</code><code class="p">];</code>
<code class="lineno">44</code>   <code class="n">UIViewController</code> <code class="o">*</code><code class="n">rootViewController</code> <code class="o">=</code> <code class="p">[[</code><code class="n">UIViewController</code> <code class="n">alloc</code><code class="p">]</code> <code class="n">init</code><code class="p">];</code>
<code class="lineno">45</code>   <code class="n">rootViewController</code><code class="p">.</code><code class="n">view</code> <code class="o">=</code> <code class="n">rootView</code><code class="p">;</code>
<code class="lineno">46</code>   <code class="n">self</code><code class="p">.</code><code class="n">window</code><code class="p">.</code><code class="n">rootViewController</code> <code class="o">=</code> <code class="n">rootViewController</code><code class="p">;</code>
<code class="lineno">47</code>   <code class="p">[</code><code class="n">self</code><code class="p">.</code><code class="n">window</code> <code class="n">makeKeyAndVisible</code><code class="p">];</code>
<code class="lineno">48</code>   <code class="k">return</code> <code class="nb">YES</code><code class="p">;</code>
<code class="lineno">49</code> <code class="p">}</code>
<code class="lineno">50</code> 
<code class="lineno">51</code> <code class="k">@end</code>
</pre>
       </div> 
      </div> 
      <p><em>AppDelegate.m</em> is our apps entry point from iOS’ point of view. It’s the place where the native Objective-C code and our React Native JavaScript code are glued together. The key player in bringing these two worlds together is the <em>RCTRootView</em> component, whose header file is imported on line 12.</p> 
      <p>The <em>RCTRootView</em> component is a native Objective-C class provided by the React Native framework. It is the component that takes our React JavaScript code and executes it. And, in the other direction, it allows us to call into native iOS UI elements from our JavaScript code. This way, the controlling code of our applications always is actual JavaScript (it’s <em>not</em> transformed into Objective-C or Swift or byte code or anything under the hood), but the UI elements that end up on the screen of our iOS device are native <em>UIKit</em> elements like those used in classical Objective-C or Swift based apps, and <em>not</em> the result of some webpage rendering.</p> 
      <p>This architecture also explains why we can simply reload our application. If we only change our JavaScript code, then no Objective-C code changes, thus no recompilation is neccessary. The RCTRootView listens to the <strong><code>?</code>-R</strong> sequence and reacts by resetting the UI, retrieving the latest JavaScript code (how this is done is explained in a moment), and executing the new code. The actual native Objective-C app that wraps the RCTRootView simply keeps running.</p> 
      <h3 id="leanpub-auto-feeding-javascript-code-into-the-app">Feeding JavaScript code into the app</h3> 
      <p>How the RCTRootView receives our JavaScript code is worth a closer look. As the well-commented source code explains, there are two different approaches. The app either loads code from a URL, or from a file that is local to our Xcode® project.</p> 
      <p>The default is to load from a URL. The URL is <em>http://localhost:8081/index.ios.bundle</em>. Where does this come from? The answer lies in the ominous <em>React packager</em> we encountered when launching our new app in the iOS Simulator. This packager serves several purposes, with the ultimate goal to provide to our app all the JavaScript code in the right format needed to be executed by the RCTRootView component.</p> 
      <p>In order to do so, the packager needs to do several things. First of all, it’s not enough to only serve the content of our <em>index.ios.js</em> file - our very own code has to be bundled together with the React framework. If you point your browser at <a href="http://localhost:8081/index.ios.bundle">http://localhost:8081/index.ios.bundle</a> while the app (and therefore, the packager) is running, you will receive a huge chunk of JavaScript that does contain our own code (search for “<em>Who should be greeted?</em>” for example), but also contains way over 30,000 lines of other code - the React framework plus some additions for React Native.</p> 
      <div class="aside sidebarish"> 
       <p>In case the React packager currently isn’t running, simply go to the project folder and run <code>npm start</code>. As defined in the <em>package.json</em>, this executes <em>node_modules/react-native/packager/packager.sh</em>.</p> 
      </div> 
      <h3 id="leanpub-auto-modern-javascript-in-react-native">Modern JavaScript in React Native</h3> 
      <p>Furthermore, the packager needs to convert the source JavaScript code it loads before serving it. The reason is that the JavaScript interpreter of iOS supports the <em>ECMAScript, 5th Edition</em> (or ES5) version of the language, but parts of our own code and the React code are written using JavaScript language features that go beyond the ES5 specification.</p> 
      <p>This is not to say that we couldn’t write our apps in good ol’ ES5 and get what we want, i.e., a working React Native app. But one of the niceties of React is that it allows to express our intentions in something far more readable and expressive than “classical” JavaScript. Let’s see what this means.</p> 
      <p>In our <em>index.ios.js</em> file, there is a block of code that looks a lot like XML:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="nx">render</code><code class="o">:</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
  <code class="k">return</code> <code class="p">(</code>
    <code class="o">&lt;</code><code class="nx">View</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">container</code><code class="p">}</code><code class="o">&gt;</code>
      <code class="o">&lt;</code><code class="nx">TextInput</code>
        <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">nameInput</code><code class="p">}</code>
        <code class="nx">onChange</code><code class="o">=</code><code class="p">{</code><code class="k">this</code><code class="p">.</code><code class="nx">onNameChanged</code><code class="p">}</code>
        <code class="nx">placeholder</code><code class="o">=</code><code class="s1">'Who should be greeted?'</code><code class="o">/&gt;</code>
      <code class="o">&lt;</code><code class="nx">Text</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">welcome</code><code class="p">}</code><code class="o">&gt;</code>
        <code class="nx">Hello</code><code class="p">,</code> <code class="p">{</code><code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">.</code><code class="nx">name</code><code class="p">}</code><code class="o">!&lt;</code><code class="err">/Text&gt;</code>
      <code class="o">&lt;</code><code class="nx">Text</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">instructions</code><code class="p">}</code><code class="o">&gt;</code>
        <code class="nx">To</code> <code class="nx">get</code> <code class="nx">started</code><code class="p">,</code> <code class="nx">edit</code> <code class="nx">index</code><code class="p">.</code><code class="nx">ios</code><code class="p">.</code><code class="nx">js</code>
      <code class="o">&lt;</code><code class="err">/Text&gt;</code>
      <code class="o">&lt;</code><code class="nx">Text</code> <code class="nx">style</code><code class="o">=</code><code class="p">{</code><code class="nx">styles</code><code class="p">.</code><code class="nx">instructions</code><code class="p">}</code><code class="o">&gt;</code>
        <code class="nx">Press</code> <code class="nx">Cmd</code><code class="o">+</code><code class="nx">R</code> <code class="nx">to</code> <code class="nx">reload</code><code class="p">,{</code><code class="s1">'\n'</code><code class="p">}</code>
        <code class="nx">Cmd</code><code class="o">+</code><code class="nx">Control</code><code class="o">+</code><code class="nx">Z</code> <code class="k">for</code> <code class="nx">dev</code> <code class="nx">menu</code>
      <code class="o">&lt;</code><code class="err">/Text&gt;</code>
    <code class="o">&lt;</code><code class="err">/View&gt;</code>
  <code class="p">);</code>
<code class="p">}</code>
</pre>
       </div> 
      </div> 
      <p>This type of code is called <em>JSX</em>, the <em>XML-like syntax extension to ECMAScript</em>, to quote from the project homepage at <a href="http://facebook.github.io/jsx/">http://facebook.github.io/jsx/</a>. Let’s quote even more from that page:</p> 
      <blockquote> 
       <p>JSX is a XML-like syntax extension to ECMAScript without any defined semantics. It’s NOT intended to be implemented by engines or browsers. It’s NOT a proposal to incorporate JSX into the ECMAScript spec itself. It’s intended to be used by various preprocessors (transpilers) to transform these tokens into standard ECMAScript.</p> 
      </blockquote> 
      <p>The interesting bit here is the one about <em>transpilers</em>. I said that the React packager needs to convert the source code before serving it to the app. In fact, there are multiple conversions in place, and <em>transpiling</em> JSX into ES5 syntax is one of these conversions.</p> 
      <p>The transpiled version of the above code block, as we find it at <a href="http://localhost:8081/index.ios.bundle">http://localhost:8081/index.ios.bundle</a>, looks like this:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="nx">render</code><code class="o">:</code> <code class="kd">function</code><code class="p">()</code> <code class="p">{</code>
  <code class="k">return</code> <code class="p">(</code>
    <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="nx">View</code><code class="p">,</code> <code class="p">{</code><code class="nx">style</code><code class="o">:</code> <code class="nx">styles</code><code class="p">.</code><code class="nx">container</code><code class="p">},</code>
      <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="nx">TextInput</code><code class="p">,</code> <code class="p">{</code>
        <code class="nx">style</code><code class="o">:</code> <code class="nx">styles</code><code class="p">.</code><code class="nx">nameInput</code><code class="p">,</code>
        <code class="nx">onChange</code><code class="o">:</code> <code class="k">this</code><code class="p">.</code><code class="nx">onNameChanged</code><code class="p">,</code>
        <code class="nx">placeholder</code><code class="o">:</code> <code class="s2">"Who should be greeted?"</code><code class="p">}),</code>
      <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="nx">Text</code><code class="p">,</code> <code class="p">{</code><code class="nx">style</code><code class="o">:</code> <code class="nx">styles</code><code class="p">.</code><code class="nx">welcome</code><code class="p">},</code>
        <code class="s2">"Hello, "</code><code class="p">,</code> <code class="k">this</code><code class="p">.</code><code class="nx">state</code><code class="p">.</code><code class="nx">name</code><code class="p">,</code> <code class="s2">"!"</code><code class="p">),</code>
      <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="nx">Text</code><code class="p">,</code> <code class="p">{</code><code class="nx">style</code><code class="o">:</code> <code class="nx">styles</code><code class="p">.</code><code class="nx">instructions</code><code class="p">},</code>
        <code class="s2">"To get started, edit index.ios.js"</code>
      <code class="p">),</code>
      <code class="nx">React</code><code class="p">.</code><code class="nx">createElement</code><code class="p">(</code><code class="nx">Text</code><code class="p">,</code> <code class="p">{</code><code class="nx">style</code><code class="o">:</code> <code class="nx">styles</code><code class="p">.</code><code class="nx">instructions</code><code class="p">},</code>
        <code class="s2">"Press Cmd+R to reload,"</code><code class="p">,</code> <code class="s1">'\n'</code><code class="p">,</code>
        <code class="s2">"Cmd+Control+Z for dev menu"</code>
      <code class="p">)</code>
    <code class="p">)</code>
  <code class="p">);</code>
<code class="p">}</code>
</pre>
       </div> 
      </div> 
      <p>Hence my claim that we would totally get away with writing straight ES5 JavaScript, but it’s obvious that this would result in quite a lot more keystrokes and in much less readable code. This is not to say that the JSX syntax doesn’t take some time getting used to, but in my experience it feels very natural real quick. JSX is a very central component of React and React Native, and we will constantly be using it in the course of this book.</p> 
      <p>There is another transpiler at work in the React packager. It converts from <em>ECMAScript 2015</em> to ES5. ECMAScript 2015, or simply <em>ES2015</em>, is the upcoming version of JavaScript. It brings a whole lot of new language features to JavaScript like destructuring, computed property keys, classes, arrow functions, block-scoped variables, and much more.</p> 
      <div class="aside sidebarish"> 
       <p>There has been a lot of irritation around the name of the new JavaScript language version, which is why next to ECMAScript 2015, one encounters any of the following labels around the web: <em>ECMAScript.next</em>, <em>ECMAScript 6</em>, <em>ECMAScript Harmony</em>, and, to simply sum it up, <em>ES6</em>. ES6 is still the most widely used term and probably your best friend when searching the web for information on this topic. In this book I will use the short form of the final term that was decided on recently: <em>ES2015</em>.</p> 
       <p>Tip: there is a live ES2015 to ES5 transpiler at <a href="https://babeljs.io/repl/">https://babeljs.io/repl/</a>.</p> 
      </div> 
      <p>The specification of the new ES2015 language version isn’t 100% final yet, but that’s not stopping people from writing ES2015 to ES5 transpilers, which is why the following ES2015 code in our <em>index.ios.js</em> file works:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="kd">var</code> <code class="nx">React</code> <code class="o">=</code> <code class="nx">require</code><code class="p">(</code><code class="s1">'react-native'</code><code class="p">);</code>
<code class="kd">var</code> <code class="p">{</code>
  <code class="nx">AppRegistry</code><code class="p">,</code>
  <code class="nx">StyleSheet</code><code class="p">,</code>
  <code class="nx">Text</code><code class="p">,</code>
  <code class="nx">TextInput</code><code class="p">,</code>
  <code class="nx">View</code><code class="p">,</code>
<code class="p">}</code> <code class="o">=</code> <code class="nx">React</code><code class="p">;</code>
</pre>
       </div> 
      </div> 
      <p>Here, 5 different variables are assigned a value at once, from the variable <em>React</em>. This is called a <em>destructuring assignment</em>. Here is a more simple example that shows how it works:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="kd">var</code> <code class="nx">fruits</code> <code class="o">=</code> <code class="p">{</code><code class="nx">banana</code><code class="o">:</code> <code class="s2">"A banana"</code><code class="p">,</code> <code class="nx">orange</code><code class="o">:</code> <code class="s2">"An orange"</code><code class="p">,</code> <code class="nx">apple</code><code class="o">:</code> <code class="s2">"An apple"</code><code class="p">};</code>

<code class="kd">var</code> <code class="p">{</code> <code class="nx">banana</code><code class="p">,</code> <code class="nx">orange</code><code class="p">,</code> <code class="nx">apple</code> <code class="p">}</code> <code class="o">=</code> <code class="nx">fruits</code><code class="p">;</code>
</pre>
       </div> 
      </div> 
      <p>This will assign the value “A banana” to the variable <em>banana</em>, the value “An orange” to the variable <em>orange</em>, and “An apple” to the variable <em>apple</em>. The transpiled code looks like this:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="kd">var</code> <code class="nx">fruits</code> <code class="o">=</code> <code class="p">{</code> <code class="nx">banana</code><code class="o">:</code> <code class="s2">"A banana"</code><code class="p">,</code> <code class="nx">orange</code><code class="o">:</code> <code class="s2">"An orange"</code><code class="p">,</code> <code class="nx">apple</code><code class="o">:</code> <code class="s2">"An apple"</code> <code class="p">};</code>

<code class="kd">var</code> <code class="nx">banana</code> <code class="o">=</code> <code class="nx">fruits</code><code class="p">.</code><code class="nx">banana</code><code class="p">;</code>
<code class="kd">var</code> <code class="nx">orange</code> <code class="o">=</code> <code class="nx">fruits</code><code class="p">.</code><code class="nx">orange</code><code class="p">;</code>
<code class="kd">var</code> <code class="nx">apple</code> <code class="o">=</code> <code class="nx">fruits</code><code class="p">.</code><code class="nx">apple</code><code class="p">;</code>
</pre>
       </div> 
      </div> 
      <p>Thus we can follow that the <em>React</em> variable is an object with keys like <em>AppRegistry</em>, <em>StyleSheet</em> etc., and we can use this shorthand notation to create and assign variables with the same name all at once.</p> 
      <p>There is yet another part of our code in <em>index.ios.js</em> that needs to be transpiled, on the last line:</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="nx">AppRegistry</code><code class="p">.</code><code class="nx">registerComponent</code><code class="p">(</code><code class="s1">'HelloWorld'</code><code class="p">,</code> <code class="p">()</code> <code class="o">=&gt;</code> <code class="nx">HelloWorld</code><code class="p">);</code>
</pre>
       </div> 
      </div> 
      <p>becomes</p> 
      <div class="code-block"> 
       <div class="highlight">
        <pre><code class="nx">AppRegistry</code><code class="p">.</code><code class="nx">registerComponent</code><code class="p">(</code><code class="s1">'HelloWorld'</code><code class="p">,</code> <code class="kd">function</code><code class="p">()</code>  <code class="p">{</code><code class="k">return</code> <code class="nx">HelloWorld</code><code class="p">;});</code>
</pre>
       </div> 
      </div> 
      <p>It’s another nifty shorthand notation in ES2015, the <em>arrow function</em>, which simplifies anonymous function declaration. There’s a bit more to it than just saving keystrokes, we will get to this later.</p> 
      <h3 id="leanpub-auto-summary">Summary</h3> 
      <p>Ok, let’s recap:</p> 
      <ul> 
       <li>We have seen that architecturally, our React Native applications are native Objective-C programs that set up an <em>RCTRootView</em>, which can be seen as a kind of container where JavaScript code can be executed. This container also allows the JavaScript code to bind to native iOS UI elements, which results in a very fluid user interface.</li> 
       <li>In order to get our JavaScript application code together with the React and React Native JavaScript library loaded into the RCTRootView, the <em>React packager</em> is used. This Node.js application is a transpiler (it converts JSX and ES2015 into ES5 JavaScript), a bundler (it creates one single large script from our own code files and the React library scripts) and a webserver (it provides the transpiled and bundled code via HTTP).</li> 
       <li>We learned about some of the modern language approaches React Native takes in regards to JavaScript code, like JSX, destructuring assignments, and the arrow function.</li> 
      </ul> 
      <p>We are now prepared to explore serious application development with React Native. We will learn the details of working with JSX, StyleSheets, ES2015, UIKit elements and much more while doing so.</p> 
      <div style="padding: 24px; padding-top: 2px; background-color: palegreen"> 
       <h3>Buy and read the full book now!</h3> 
       <p class="lead"> The full book is offered as an immediately available ebook download from Leanpub, in formats PDF, ePub and MOBI, making it compatible with all eReaders, mobile phones, tablets, and of course desktop computers. </p> 
       <p class="lead" style="text-align: center"> <strong> ? <a href="https://leanpub.com/beginning-mobile-app-development-with-react-native/">Buy this ebook now at<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Leanpub for only $5.99</a> </strong> </p> 
       <p class="lead"> You can buy using credit card or PayPal. </p> 
       <p class="lead"> The downloaded files you'll receive don't have any kind of DRM or copy protection. You will receive all future updates to the book for free. </p> 
       <p class="lead"> Also, the <em>Leanpub Unconditional, No Risk, 100% Happiness Guarantee</em> applies: Within <strong>45 days of purchase</strong> you can get a <strong>100% refund</strong> on your purchase, in <strong>two clicks</strong>. <a href="https://leanpub.com/terms#returns">See full terms</a>. </p> 
      </div> 
     </div> 
    </div> 
   </div> 
  </div> 
  <!-- /.container -->  
  <!-- /.content-section-a --> 
  <!-- Footer --> 
  <footer> 
   <div class="container"> 
    <div class="row"> 
     <div class="col-lg-12"> 
      <p class="copyright"> Copyright © 2016 Manuel Kiessling. <a href="imprint.html">Imprint/Impressum, Datenschutz, Haftung</a> </p> 
      <p class="text-muted small"> Apple, Xcode, iPhone, iPad, and iPad mini are trademarks of Apple Inc., registered in the U.S. and other countries. <br> Facebook, React, and React Native are trademarks of Facebook Inc., registered in the U.S. and other countries. <br> This site is neither affiliated with or endorsed by any of these parties. </p> 
     </div> 
    </div> 
   </div> 
  </footer> 
  <!-- jQuery --> 
  <script src="js/jquery.js"></script> 
  <!-- Bootstrap Core JavaScript --> 
  <script src="js/bootstrap.min.js"></script> 
  <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-2127388-12', 'auto');
  ga('send', 'pageview');

</script>   
 </body>
</html>