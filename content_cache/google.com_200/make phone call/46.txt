<!--?xml version="1.0" encoding="UTF-8"?--><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- saved from url=(0022)http://help.adobe.com/ -->
<html lang="en-us">
 <head> 
  <meta http-equiv="content-type" content="text/html; charset=UTF-8"> 
  <meta name="lang" content="en-us"> 
  <meta name="area" content="livedocs"> 
  <title>Adobe&nbsp;Flash&nbsp;Platform * External API example: Communicating between ActionScript and JavaScript in a web browser</title> 
  <link rel="shortcut icon" href="images/FlashRuntimeLinkIndicator.png"> 
  <meta name="book" content="ActionScript 3.0 Developer’s Guide"> 
  <meta name="product" content="adobe">
  <meta name="product" content="air">
  <meta name="product" content="flash">
  <meta name="product" content="flex"> 
  <meta name="keywords" content="">
  <!--<PageMap><DataObject type="document"><Attribute name="product" value="adobe"></Attribute><Attribute name="product" value="air"></Attribute><Attribute name="product" value="flash"></Attribute><Attribute name="product" value="flex"></Attribute><Attribute name="book" value="ActionScript 3.0 Developer’s Guide"></Attribute><Attribute name="keywords" value=""></Attribute></DataObject></PageMap>--> 
  <script type="text/javascript" language="Javascript" charset="UTF-8"><!--[CDATA[
        var currentTreeNode = "WS5b3ccc516d4fbf351e63e3d118a9b90204-7cb1.html";
    document.cookie = "topicId=" + "WS5b3ccc516d4fbf351e63e3d118a9b90204-7cb1.html";
// ]]--></script> 
  <script src="terms.js" type="text/javascript" language="Javascript" charset="UTF-8">...</script> 
  <script src="help.js" type="text/javascript" language="Javascript" charset="UTF-8">...</script> 
  <script src="utilities.js" type="text/javascript" language="Javascript" charset="UTF-8">...</script> 
  <script src="event.js" type="text/javascript" language="Javascript" charset="UTF-8">...</script> 
  <script src="treeview.js" type="text/javascript" language="Javascript" charset="UTF-8">...</script> 
  <script src="toc.js" language="Javascript" type="text/javascript" charset="UTF-8">..</script> 
  <script src="swfobject.js" language="Javascript" type="text/javascript" charset="UTF-8">..</script> 
  <script src="booklist.js" language="Javascript" type="text/javascript" charset="UTF-8">..</script> 
  <script type="text/javascript">
<!--[CDATA[
var topictype = "topic";
var headId = document.getElementsByTagName("head")[0];         
if (use_ie_6_behavior) {
  var linkId = document.createElement("link");
  linkId.href = "content-ie6.css";
  linkId.rel = "stylesheet";
  linkId.type = "text/css";
  headId.appendChild(linkId);
}
function initRoboHelpDOM() {
  if (use_chm_behavior) {
    hideElement("search");
  }
  if (use_robohelp_behavior) {
    hideElement("search");
    hideElement("productmenu");
    //hideElement("notyourversion");
  }
  if(!use_chc_behavior) {
    //document.getElementById("notyourversion").style.display = "inline";;
  }
}
var dirname = location.pathname.match( /.*\// );    
function setSearchUserPref(){
  if ( document.cookie.indexOf( "ah_searchpref" ) > -1 ) {
    if ( document.cookie.indexOf( dirname ) > 0 ) {
      document.search.gsa.checked = true ;
    }else{
      document.search.gsa.checked = false ;            
    }
  }
}
YAHOO.util.Event.onDOMReady(initRoboHelpDOM);
YAHOO.util.Event.onDOMReady(setSearchUserPref);
// ]]-->
</script> 
  <!-- ********************************** --> 
  <!-- START: ForeSee survey code in: /ssi/globalheader.ssi --> 
  <script type="text/javascript">
<!-- 
// Enable the survey for only English, German and Japanese
var agt=navigator.userAgent.toLowerCase();
if ( agt.indexOf("community help client") == -1 ){
    if ( document.location.href.indexOf("/en_US/") != -1 ){
        showSurvey();
//    }else if (document.location.href.indexOf("/de_DE/") != -1){
//         var locale="de";
//         showSurvey();
    }else if (document.location.href.indexOf("/ja_JP/") != -1 ){
         var locale="ja";
         showSurvey();
    }	
}

function showSurvey(){
	document.write('<script type="text/javascript" src="/js/foresee/foresee-trigger.js"><\/scr'+'ipt>');
}

// -->
</script> 
  <!-- END: ForeSee survey code --> 
  <!-- ******************************** --> 
  <link rel="stylesheet" type="text/css" href="tree.css"> 
  <link rel="stylesheet" type="text/css" href="content.css"> 
  <link rel="stylesheet" type="text/css" href="localeSpecific.css"> 
 </head> 
 <body id="content_body" onload="window.focus();"> 
  <a name="top" shape="rect">
   <!--LeaveCommentHere--></a> 
  <div id="mnemonic"> 
   <!--googleoff: index-->
   <div xmlns:adobe="http://www.adobe.com/saxon" class="FlashRuntime">
    <div class="banner">
     <a href="WS9936fa0d5984e93b3f4f38ec1272a447844-8000.html">Adobe&nbsp;Flash&nbsp;Platform</a>
    </div>
   </div>
   <!--googleon: index--> 
  </div> 
  <div id="searchbar"> 
   <table id="searchbartable"> 
    <tbody>
     <tr> 
      <td colspan="2"> 
       <!--googleoff: index-->
       <div xmlns:adobe="http://www.adobe.com/saxon">
        <div id="pdf">
         <img src="images/PDF.gif" width="16" height="16">
         <a title="View Help PDF" href="as3_devguide.pdf">View Help PDF ( 18MB)</a>
        </div>
       </div>
       <!--googleon: index--> </td> 
     </tr> 
    </tbody>
   </table> 
  </div> 
  <!-- BEGIN SEARCH CONTENT --> 
  <form id="search" name="search" action="search.html" target="_self"> 
   <script type="text/javascript">
<!--[CDATA[
if ( !use_chc_behavior ){
    if (typeof(terms_AHV_SEARCH_CONSTRAINT) != "undefined" && 
        terms_AHV_SEARCH_CONSTRAINT.length > 0 && 
        document.location.href.indexOf(".adobe.com") > 0){
        if ( typeof(terms_SEARCH_THIS_HELP_ONLY) != "undefined" && terms_SEARCH_THIS_HELP_ONLY == "ON" ) {
            document.write('<div id="searchscope"> \
                <input onchange="setAHSearchPref();" \
                class="gsa" \
                name="gsa" \
                id="gsa" \
                type="checkbox" \
                checked="checked" \
                value="1" ><\/input>'); 
                
        // Leave the "Search this help system only" checkbox unckecked
        }else{    
            document.write('<div id="searchscope"> \
                <input onchange="setAHSearchPref();" \
                class="gsa" \
                name="gsa" \
                id="gsa" \
                type="checkbox" \
                value="1" ><\/input>'); 
        }
        document.write('<span class="gsalabel">' + terms_AHV_SEARCH_CONSTRAINT + '<\/span><\/div>'); 
    }
    document.write('<input class="searchinput" \
        name="q" \
        id="q" \
        type="text" \
        maxlength="256" \
        value="' + terms_AHV_SEARCH_BUTTON + '" \
        onclick="clearSearch()"><\/input><input \
        type="button" \
        name="searchbutton" \
        class="searchbutton" \
        onclick="submit()"><\/input>'); 
} 
 
/* 
 * Start Functions 
 */
function clearSearch(){
    if (document.search.q.value == terms_AHV_SEARCH_BUTTON){document.search.q.value = ""}; 
}

// set search preferences
function setAHSearchPref(){
    if (document.search.gsa.checked == 1){
        setAHSearchCookie( dirname );
    }else{
        setAHSearchCookie( "community" );
    }
}

// Set search preferences cookie
function setAHSearchCookie( p ){
    // set cookie ah_searchpref with a value of the document path
    var expire=new Date();
    expire.setDate(expire.getDate()+365); // Cookie expires after 1 year (365 days) 
    document.cookie="ah_searchpref=" +p+ "; expires=" +expire.toGMTString()+ ";";
}

// ]]-->
</script> 
  </form> 
  <!-- END SEARCH CONTENT --> 
  <!-- BEGIN PAGE CONTENT WRAPPER --> 
  <div id="page_content_wrapper"> 
   <!-- BEGIN PAGE WRAPPER --> 
   <table id="page_content_table"> 
    <tbody>
     <tr> 
      <td id="col2"> 
       <!-- BEGIN CONTENT WRAPPER --> 
       <!-- BEGIN BREADCRUMBS --> 
       <div id="breadcrumb"> 
        <ul class="navigation">
         <li class="prev"><a accesskey="p" class="prev" href="WS5b3ccc516d4fbf351e63e3d118a9b90204-7cb2.html" title="Using the ExternalInterface class"><img src="images/blank.gif" alt="Previous" width="17" height="17"></a></li>
         <li class="next"><a accesskey="n" class="next" href="WS887c509e5469a884909031a11c299fac04-8000.html" title="XML signature validation in AIR"><img src="images/blank.gif" alt="Next" width="17" height="17"></a></li>
        </ul>
        <div class="hierarchy" id="hierarchy">
         <a href="WS9936fa0d5984e93b3f4f38ec1272a447844-8000.html"><b>Home</b></a> / 
         <a href="WS9936fa0d5984e93b3f4f38ec1272a447844-8000.html"><b>ActionScript 3.0 Developer’s Guide</b></a> / 
         <a href="WSd75bf4610ec9e22f-698d6e6b1221382befb-8000.html"><b>Networking and communication</b></a> / 
         <a href="WS5b3ccc516d4fbf351e63e3d118a9b8fc4e-8000.html"><b>Using the external API</b></a> 
        </div> 
       </div> 
       <!-- END BREADCRUMBS --> 
       <div id="content_wrapper"> 
        <!-- BEGIN PAGE TITLE --> 
        <h1>External API example: Communicating between ActionScript and JavaScript in a web browser</h1>
        <p class="adoberuntime">Flash Player 9 and later, Adobe AIR 1.0 and later</p> 
        <!-- END PAGE TITLE --> 
        <!-- BEGIN IONCOMMENTCOUNT --> 
        <div id="ionCount"> 
        </div> 
        <!-- END IONCOMMENTCOUNT --> 
        <table id="inner_content_table" width="100%" border="0" cellspacing="0" cellpadding="0">
         <tbody>
          <tr>
           <td> 
            <div style="border-top:#ccc solid 1px;">
             <p> </p> 
            </div> <p id="chcPromo" style="display:none;"> <a id="chcLink" href="http://www.adobe.com/support/chc/"> <img id="chcImage" src="http://www.adobe.com/support/chc/GetMoreHelpFeatures.png"> </a> </p> <script type="text/javascript" language="javascript" charset="utf-8">
<!--
var cfgArray = [];
//cfgArray["Acrobat_10.0_Professional.helpcfg"] = "acrobatpro";
//cfgArray["Acrobat_10.0_Standard.helpcfg"] = "acrobatstd";
cfgArray["Lightroom_3.0.helpcfg"] = "lightroom";
cfgArray["PhotoshopElements_8.0_Win.helpcfg"] = "photoshopelements";
cfgArray["PhotoshopElements_8.0_Mac.helpcfg"] = "photoshopelementsmac";
cfgArray["PremiereElements_8.0_Win.helpcfg"] = "premiereelements";

//cfgArray["AfterEffects_10.0.helpcfg"] = "aftereffects";
//cfgArray["AIR.helpcfg"] = "air";
//cfgArray["ColdFusionBuilder.helpcfg"] = "coldfusion";
//cfgArray["Contribute_6.0.helpcfg"] = "contribute";
//cfgArray["DeviceCentral_3.0.helpcfg"] = "devicecentral";
//cfgArray["Dreamweaver_11.0.helpcfg"] = "dreamweaver";
//cfgArray["EncoreDVD_5.0.helpcfg"] = "encore";
//cfgArray["ExtensionManager_3.0.helpcfg"] = "extension";
//cfgArray["Fireworks_11.0.helpcfg"] = "fireworks";
//cfgArray["Flash_11.0.helpcfg"] = "flash";
//cfgArray["Flex_4.0.helpcfg"] = "flashbuilder";
//cfgArray["FlashCatalyst_1.0.helpcfg"] = "flashcatalyst";
//cfgArray["Illustrator_15.0.helpcfg"] = "illustrator";
//cfgArray["InCopy_7.0.helpcfg"] = "incopy";
//cfgArray["InDesign_7.0.helpcfg"] = "indesign";
//cfgArray["OnLocation_5.0.helpcfg"] = "onlocation";
//cfgArray["Photoshop_12.0.helpcfg"] = "photoshop";
//cfgArray["PremierePro_5.0.helpcfg"] = "premierepro";

function getLangName() {
    var lang = "en-us";
    var metaElements = document.all ?
            document.all.tags('meta') :
            document.getElementsByTagName ?
            document.getElementsByTagName ('meta') : new Array();
    for (var m = 0; m < metaElements.length; m++) {
        if (metaElements[m].name == "lang") {
            lang = metaElements[m].content;
            break;
        }
    }
    var ptn = /(..)-(..)/;
    if (ptn.test(lang)) {
        var languageCode = lang.replace(ptn, "$1");
        var countryCode = lang.replace(ptn, "$2");
        lang = languageCode + "_" + countryCode.toUpperCase();
    }
    return lang;
}

function getCountryName() {
    var lang = "";
    var metaElements = document.all ?
            document.all.tags('meta') :
            document.getElementsByTagName ?
            document.getElementsByTagName ('meta') : new Array();
    for (var m = 0; m < metaElements.length; m++) {
        if (metaElements[m].name == "lang") {
            lang = metaElements[m].content;
            break;
        }
    }
    var ptn = /(..)-(..)/;
    if ((ptn.test(lang)) && (lang != "en-us")) {
        var countryCode = lang.replace(ptn, "$2");
        return "/" + countryCode;
    }
    return "";
}

if ( (typeof(terms_HELPCFG) != 'undefined')  && (terms_HELPCFG.indexOf(".helpcfg") != -1) ) {
    var stage   = (document.location.href.indexOf(".stage.") != -1) ? 'stage.' : '';
    var baseUrl = 'http://www.' + stage + 'adobe.com';
    var refpage = document.location.href.replace(/#.*$/, '');
	
	if ((!use_robohelp_behavior) && (terms_HELPCFG.length > 0) && (typeof(cfgArray[terms_HELPCFG]) != 'undefined') && (cfgArray[terms_HELPCFG].length > 0)) {
		if (document.getElementById) { // DOM3 = IE5, NS6
			var newHref = baseUrl + getCountryName() + "/support/chc/" + "?helpcfg=http://help." + stage + "adobe.com/HelpCfg/" + getLangName() + "/" + terms_HELPCFG + "&url=" + refpage + "&product=" + cfgArray[terms_HELPCFG];
			var newSrc = baseUrl + getCountryName() + "/support/chc/GetMoreHelpFeatures.png";
			document.getElementById("chcPromo").style.display = "block";
			document.getElementById("chcLink").href = newHref;
			document.getElementById("chcImage").src = newSrc;
		}
	}
}

//-->
</script> 
            <div id="minitoc">
             <div class="t">
              <div class="b">
               <div>
                <ul id="minitoc-links">
                 <li><p><a href="#WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca5"><span class="topictitle1">Preparing for ActionScript-browser communication</span> </a></p></li>
                 <li><p><a href="#WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca4"><span class="topictitle1">Exposing ActionScript methods to JavaScript</span> </a></p></li>
                 <li><p><a href="#WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca3"><span class="topictitle1">Communication from ActionScript to the browser</span> </a></p></li>
                 <li><p><a href="#WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca2"><span class="topictitle1">Calling ActionScript code from JavaScript</span> </a></p></li>
                 <li><p><a href="#WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca1"><span class="topictitle1">Detecting the browser type</span> </a></p></li>
                </ul>
               </div>
              </div>
             </div>
            </div>
            <div> 
             <p>This sample application demonstrates appropriate techniques for communicating between ActionScript and JavaScript in a web browser, in the context of an Instant Messaging application that allows a person to chat with him or herself (hence the name of the application: Introvert IM). Messages are sent between an HTML form in the web page and a SWF interface using the external API. The techniques demonstrated by this example include the following:</p> 
             <ul>
              <li><p>Properly initiating communication by verifying that the browser is ready to communicate before setting up communication</p> </li> 
              <li><p>Checking whether the container supports the external API</p> </li> 
              <li><p>Calling JavaScript functions from ActionScript, passing parameters, and receiving values in response</p> </li> 
              <li><p>Making ActionScript methods available to be called by JavaScript, and performing those calls</p> </li> 
             </ul> 
             <p>To get the application files for this sample, see <a href="http://www.adobe.com/go/learn_programmingAS3samples_flash" target="_self">www.adobe.com/go/learn_programmingAS3samples_flash</a>. The Introvert IM application files can be found in the Samples/IntrovertIM_HTML folder. The application consists of the following files:</p> 
             <div class="tablenoborder">
              <table border="1" cellpadding="4" cellspacing="0">
               <thead align="left">
                <tr>
                 <th valign="top" width="NaN%" id="d17e56257"><p>File</p> </th> 
                 <th valign="top" width="NaN%" id="d17e56260"><p>Description</p> </th> 
                </tr> 
               </thead> 
               <tbody>
                <tr>
                 <td valign="top" width="NaN%" headers="d17e56257 "><p>IntrovertIMApp.fla</p> <p>or</p> <p>IntrovertIMApp.mxml</p> </td> 
                 <td valign="top" width="NaN%" headers="d17e56260 "><p>The main application file for Flash (FLA) or Flex (MXML).</p> </td> 
                </tr> 
                <tr>
                 <td valign="top" width="NaN%" headers="d17e56257 "><p>com/example/programmingas3/introvertIM/IMManager.as</p> </td> 
                 <td valign="top" width="NaN%" headers="d17e56260 "><p>The class that establishes and manages communication between ActionScript and the container.</p> </td> 
                </tr> 
                <tr>
                 <td valign="top" width="NaN%" headers="d17e56257 "><p>com/example/programmingas3/introvertIM/IMMessageEvent.as</p> </td> 
                 <td valign="top" width="NaN%" headers="d17e56260 "><p>Custom event type, dispatched by the IMManager class when a message is received from the container.</p> </td> 
                </tr> 
                <tr>
                 <td valign="top" width="NaN%" headers="d17e56257 "><p>com/example/programmingas3/introvertIM/IMStatus.as</p> </td> 
                 <td valign="top" width="NaN%" headers="d17e56260 "><p>Enumeration whose values represent the different “availability” status values that can be selected in the application.</p> </td> 
                </tr> 
                <tr>
                 <td valign="top" width="NaN%" headers="d17e56257 "><p>html-flash/IntrovertIMApp.html</p> <p>or</p> <p>html-template/index.template.html</p> </td> 
                 <td valign="top" width="NaN%" headers="d17e56260 "><p>The HTML page for the application for Flash (html-flash/IntrovertIMApp.html) or the template that is used to create the container HTML page for the application for Adobe Flex (html-template/index.template.html). This file contains all the JavaScript functions that make up the container part of the application.</p> </td> 
                </tr> 
               </tbody> 
              </table> 
             </div> 
            </div> 
            <div id="WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca5" class="nochunk">
             <a name="WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca5">
              <!-- --></a>
             <h2 class="topictitle2">Preparing for ActionScript-browser communication</h2>
             <div> 
              <p>One of the most common uses for the external API is to allow ActionScript applications to communicate with a web browser. Using the external API, ActionScript methods can call code written in JavaScript and vice versa. Because of the complexity of browsers and how they render pages internally, there is no way to guarantee that a SWF document will register its callbacks before the first JavaScript on the HTML page runs. For that reason, before calling functions in the SWF document from JavaScript, your SWF document should always call the HTML page to notify it that the SWF document is ready to accept connections.</p> 
              <p>For example, through a series of steps performed by the IMManager class, the Introvert IM determines whether the browser is ready for communication and prepares the SWF file for communication. The first step, determining when the browser is ready for communication, happens in the IMManager constructor, as follows:</p> 
              <pre>public function IMManager(initialStatus:IMStatus) 
{ 
    _status = initialStatus; 
 
    // Check if the container is able to use the external API. 
    if (ExternalInterface.available) 
    { 
        try 
        { 
            // This calls the isContainerReady() method, which in turn calls 
            // the container to see if Flash Player has loaded and the container 
            // is ready to receive calls from the SWF. 
            var containerReady:Boolean = isContainerReady(); 
            if (containerReady) 
            { 
                // If the container is ready, register the SWF's functions. 
                setupCallbacks(); 
            } 
            else 
            { 
                // If the container is not ready, set up a Timer to call the 
                // container at 100ms intervals. Once the container responds that 
                // it's ready, the timer will be stopped. 
                var readyTimer:Timer = new Timer(100); 
                readyTimer.addEventListener(TimerEvent.TIMER, timerHandler); 
                readyTimer.start(); 
            } 
        } 
        ... 
    } 
    else 
    { 
        trace("External interface is not available for this container."); 
    } 
}</pre> 
              <p>First of all, the code checks whether the external API is even available in the current container using the <samp class="codeph">ExternalInterface.available</samp> property. If so, it begins the process of setting up communication. Because security exceptions and other errors can occur when you attempt communication with an external application, the code is wrapped in a <samp class="codeph">try</samp> block (the corresponding <samp class="codeph">catch</samp> blocks were omitted from the listing for brevity). </p> 
              <p>The code next calls the <samp class="codeph">isContainerReady()</samp> method, listed here:</p> 
              <pre>private function isContainerReady():Boolean 
{ 
    var result:Boolean = ExternalInterface.call("isReady"); 
    return result; 
}</pre> 
              <p>The <samp class="codeph">isContainerReady()</samp> method in turn uses <samp class="codeph">ExternalInterface.call()</samp> method to call the JavaScript function <samp class="codeph">isReady()</samp>, as follows:</p> 
              <pre>&lt;script language="JavaScript"&gt; 
&lt;!-- 
// ------- Private vars ------- 
var jsReady = false; 
... 
// ------- functions called by ActionScript ------- 
// called to check if the page has initialized and JavaScript is available 
function isReady() 
{ 
    return jsReady; 
} 
... 
// called by the onload event of the &lt;body&gt; tag 
function pageInit() 
{ 
    // Record that JavaScript is ready to go. 
    jsReady = true; 
} 
... 
//--&gt; 
&lt;/script&gt;</pre> 
              <p>The <samp class="codeph">isReady() </samp>function simply returns the value of the <samp class="codeph">jsReady</samp> variable. That variable is initially <samp class="codeph">false</samp>; once the <samp class="codeph">onload</samp> event of the web page has been triggered, the variable’s value is changed to <samp class="codeph">true</samp>. In other words, if ActionScript calls the <samp class="codeph">isReady()</samp> function before the page is loaded, JavaScript returns <samp class="codeph">false</samp> to <samp class="codeph">ExternalInterface.call("isReady")</samp>, and consequently the ActionScript <samp class="codeph">isContainerReady()</samp> method returns <samp class="codeph">false</samp>. Once the page has loaded, the JavaScript <samp class="codeph">isReady()</samp> function returns <samp class="codeph">true</samp>, so the ActionScript <samp class="codeph">isContainerReady()</samp> method also returns <samp class="codeph">true</samp>.</p> 
              <p>Back in the IMManager constructor, one of two things happens depending on the readiness of the container. If <samp class="codeph">isContainerReady()</samp> returns <samp class="codeph">true</samp>, the code simply calls the <samp class="codeph">setupCallbacks()</samp> method, which completes the process of setting up communication with JavaScript. On the other hand, if <samp class="codeph">isContainerReady()</samp> returns <samp class="codeph">false</samp>, the process is essentially put on hold. A Timer object is created and is told to call the <samp class="codeph">timerHandler()</samp> method every 100 milliseconds, as follows:</p> 
              <pre>private function timerHandler(event:TimerEvent):void 
{ 
    // Check if the container is now ready. 
    var isReady:Boolean = isContainerReady(); 
    if (isReady) 
    { 
        // If the container has become ready, we don't need to check anymore, 
        // so stop the timer. 
        Timer(event.target).stop(); 
        // Set up the ActionScript methods that will be available to be 
        // called by the container. 
        setupCallbacks(); 
    } 
}</pre> 
              <p>Each time the <samp class="codeph">timerHandler()</samp> method gets called, it once again checks the result of the <samp class="codeph">isContainerReady()</samp> method. Once the container is initialized, that method returns <samp class="codeph">true.</samp> The code then stops the Timer and calls the <samp class="codeph">setupCallbacks()</samp> method to finish the process of setting up communication with the browser.</p> 
             </div>
            </div> 
            <div id="WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca4" class="nochunk">
             <a name="WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca4">
              <!-- --></a>
             <h2 class="topictitle2">Exposing ActionScript methods to JavaScript</h2>
             <div> 
              <p>As the previous example showed, once the code determines that the browser is ready, the <samp class="codeph">setupCallbacks()</samp> method is called. This method prepares ActionScript to receive calls from JavaScript, as shown here:</p> 
              <pre>private function setupCallbacks():void 
{ 
    // Register the SWF client functions with the container 
    ExternalInterface.addCallback("newMessage", newMessage); 
    ExternalInterface.addCallback("getStatus", getStatus); 
    // Notify the container that the SWF is ready to be called. 
    ExternalInterface.call("setSWFIsReady"); 
}</pre> 
              <p>The <samp class="codeph">setCallBacks()</samp> method finishes the task of preparing for communication with the container by calling <samp class="codeph">ExternalInterface.addCallback()</samp> to register the two methods that will be available to be called from JavaScript. In this code, the first parameter—the name by which the method is known to JavaScript (<samp class="codeph">"newMessage"</samp> and <samp class="codeph">"getStatus"</samp>)—is the same as the method’s name in ActionScript. (In this case, there was no benefit to using different names, so the same name was reused for simplicity.) Finally, the <samp class="codeph">ExternalInterface.call()</samp> method is used to call the JavaScript function <samp class="codeph">setSWFIsReady()</samp>, which notifies the container that the ActionScript functions have been registered.</p> 
             </div>
            </div> 
            <div id="WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca3" class="nochunk">
             <a name="WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca3">
              <!-- --></a>
             <h2 class="topictitle2">Communication from ActionScript to the browser</h2>
             <div> 
              <p>The Introvert IM application demonstrates a range of examples of calling JavaScript functions in the container page. In the simplest case (an example from the <samp class="codeph">setupCallbacks()</samp> method), the JavaScript function <samp class="codeph">setSWFIsReady()</samp> is called without passing any parameters or receiving a value in return:</p> 
              <pre>ExternalInterface.call("setSWFIsReady");</pre> 
              <p>In another example from the <samp class="codeph">isContainerReady()</samp> method, ActionScript calls the <samp class="codeph">isReady()</samp> function and receives a Boolean value in response:</p> 
              <pre>var result:Boolean = ExternalInterface.call("isReady");</pre> 
              <p>You can also pass parameters to JavaScript functions using the external API. For instance, consider the IMManager class’s <samp class="codeph">sendMessage()</samp> method, which is called when the user is sending a new message to his or her “conversation partner”:</p> 
              <pre>public function sendMessage(message:String):void 
{ 
    ExternalInterface.call("newMessage", message); 
}</pre> 
              <p>Once again, <samp class="codeph">ExternalInterface.call()</samp> is used to call the designated JavaScript function, notifying the browser of the new message. In addition, the message itself is passed as an additional parameter to <samp class="codeph">ExternalInterface.call()</samp>, and consequently it is passed as a parameter to the JavaScript function <samp class="codeph">newMessage()</samp>.</p> 
             </div>
            </div> 
            <div id="WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca2" class="nochunk">
             <a name="WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca2">
              <!-- --></a>
             <h2 class="topictitle2">Calling ActionScript code from JavaScript</h2>
             <div> 
              <p>Communication is supposed to be a two-way street, and the Introvert IM application is no exception. Not only does the Flash Player IM client call JavaScript to send messages, but the HTML form calls JavaScript code to send messages to and ask for information from the SWF file as well. For example, when the SWF file notifies the container that it has finished establishing contact and it’s ready to communicate, the first thing the browser does is call the IMManager class’s <samp class="codeph">getStatus()</samp> method to retrieve the initial user availability status from the SWF IM client. This is done in the web page, in the <samp class="codeph">updateStatus()</samp> function, as follows:</p> 
              <pre>&lt;script language="JavaScript"&gt; 
... 
function updateStatus() 
{ 
    if (swfReady) 
    { 
        var currentStatus = getSWF("IntrovertIMApp").getStatus(); 
        document.forms["imForm"].status.value = currentStatus; 
    } 
} 
... 
&lt;/script&gt;</pre> 
              <p>The code checks the value of the <samp class="codeph">swfReady</samp> variable, which tracks whether the SWF file has notified the browser that it has registered its methods with the ExternalInterface class. If the SWF file is ready to receive communication, the next line (<samp class="codeph">var currentStatus =</samp> ...) actually calls the <samp class="codeph">getStatus()</samp> method in the IMManager class. Three things happen in this line of code:</p> 
              <ul>
               <li><p>The <samp class="codeph">getSWF()</samp> JavaScript function is called, returning a reference to the JavaScript object representing the SWF file. The parameter passed to <samp class="codeph">getSWF()</samp> determines which browser object is returned in case there is more than one SWF file in an HTML page. The value passed to that parameter must match the <samp class="codeph">id</samp> attribute of the <samp class="codeph">object</samp> tag and <samp class="codeph">name</samp> attribute of the <samp class="codeph">embed</samp> tag used to include the SWF file.</p> </li> 
               <li><p>Using the reference to the SWF file, the <samp class="codeph">getStatus()</samp> method is called as though it’s a method of the SWF object. In this case the function name “ <samp class="codeph">getStatus</samp>” is used because that’s the name under which the ActionScript function is registered using <samp class="codeph">ExternalInterface.addCallback()</samp>.</p> </li> 
               <li><p>The <samp class="codeph">getStatus()</samp> ActionScript method returns a value, and that value is assigned to the <samp class="codeph">currentStatus</samp> variable, which is then assigned as the content (the <samp class="codeph">value</samp> property) of the <samp class="codeph">status</samp> text field.</p> </li> 
              </ul> 
              <div class="note">
               <span class="notetitle">Note: </span>If you’re following along in the code, you’ve probably noticed that in the source code for the 
               <samp class="codeph">updateStatus()</samp> function, the line of code that calls the 
               <samp class="codeph">getSWF()</samp> function, is actually written as follows: var currentStatus = getSWF("${application}").getStatus(); The 
               <samp class="codeph">${application}</samp> text is a placeholder in the HTML page template; when Adobe Flash Builder generates the actual HTML page for the application, this placeholder text is replaced by the same text that is used as the 
               <samp class="codeph">object</samp> tag’s 
               <samp class="codeph">id</samp> attribute and the 
               <samp class="codeph">embed</samp> tag’s 
               <samp class="codeph">name</samp> attribute (
               <samp class="codeph">IntrovertIMApp</samp> in the example). That is the value that is expected by the 
               <samp class="codeph">getSWF()</samp> function.
              </div> 
              <p>The <samp class="codeph">sendMessage()</samp> JavaScript function demonstrates passing a parameter to an ActionScript function. (<samp class="codeph">sendMessage()</samp> is thefunction that is called when the user presses the Send button on the HTML page.)</p> 
              <pre>&lt;script language="JavaScript"&gt; 
... 
function sendMessage(message) 
{ 
    if (swfReady) 
    { 
        ... 
        getSWF("IntrovertIMApp").newMessage(message); 
    } 
} 
... 
&lt;/script&gt;</pre> 
              <p>The <samp class="codeph">newMessage()</samp> ActionScript method expects one parameter, so the JavaScript <samp class="codeph">message</samp> variable gets passed to ActionScript by using it as a parameter in the <samp class="codeph">newMessage()</samp> method call in the JavaScript code.</p> 
             </div>
            </div> 
            <div id="WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca1" class="nochunk">
             <a name="WS5b3ccc516d4fbf351e63e3d118a9b90204-7ca1">
              <!-- --></a>
             <h2 class="topictitle2">Detecting the browser type</h2>
             <div> 
              <p>Because of differences in how browsers access content, it’s important to always use JavaScript to detect which browser the user is running and to access the movie according to the browser-specific syntax, using the window or document object, as shown in the <samp class="codeph">getSWF()</samp> JavaScript function in this example:</p> 
              <pre>&lt;script language="JavaScript"&gt; 
... 
function getSWF(movieName) 
{ 
    if (navigator.appName.indexOf("Microsoft") != -1) 
    { 
        return window[movieName]; 
    } 
    else 
    { 
        return document[movieName]; 
    } 
} 
... 
&lt;/script&gt;</pre> 
              <p>If your script does not detect the user’s browser type, the user might see unexpected behavior when playing SWF files in an HTML container.</p> 
             </div>
            </div> 
            <!-- BEGIN USER PREFERENCES --> 
            <div id="userprefs"> 
            </div> 
            <!-- END USER PREFERENCES --> 
            <div id="related"> 
             <div class="separator">
              <a href="#top"><img src="images/BTT.jpg"></a>&nbsp;
             </div> 
            </div> 
            <div id="footer"> 
             <!-- BEGIN IONCOMMENTS --> 
             <div id="ionComHere"> 
             </div> 
             <!-- END IONCOMMENTS --> 
             <p id="creativecommons"><a href="http://creativecommons.org/licenses/by-nc-sa/3.0/" id="creativecommons_text"><img id="creativecommons_img" src="images/CC.png" alt="This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 3.0 Unported License"></a>&nbsp;Twitter™ and Facebook posts are not covered under the terms of Creative Commons.</p> 
            </div> </td> 
           <td width="10px"></td> 
           <td id="inner_rightcolumn"> </td>
          </tr>
         </tbody>
        </table> 
       </div> 
       <!-- BEGIN BREADCRUMBS --> 
       <div id="breadcrumb"> 
        <ul class="navigation">
         <li class="prev"><a accesskey="p" class="prev" href="WS5b3ccc516d4fbf351e63e3d118a9b90204-7cb2.html" title="Using the ExternalInterface class"><img src="images/blank.gif" alt="Previous" width="17" height="17"></a></li>
         <li class="next"><a accesskey="n" class="next" href="WS887c509e5469a884909031a11c299fac04-8000.html" title="XML signature validation in AIR"><img src="images/blank.gif" alt="Next" width="17" height="17"></a></li>
        </ul>
        <div class="hierarchy" id="hierarchy">
         <a href="WS9936fa0d5984e93b3f4f38ec1272a447844-8000.html"><b>Home</b></a> / 
         <a href="WS9936fa0d5984e93b3f4f38ec1272a447844-8000.html"><b>ActionScript 3.0 Developer’s Guide</b></a> / 
         <a href="WSd75bf4610ec9e22f-698d6e6b1221382befb-8000.html"><b>Networking and communication</b></a> / 
         <a href="WS5b3ccc516d4fbf351e63e3d118a9b8fc4e-8000.html"><b>Using the external API</b></a> 
        </div> 
       </div> 
       <!-- END BREADCRUMBS --> 
       <!-- END CONTENT WRAPPER --> </td> 
      <td id="col3"> 
       <div> 
        <img src="images/adobe-lq.png"> 
       </div> </td> 
     </tr> 
    </tbody>
   </table> 
  </div> 
  <!-- END PAGE CONTENT WRAPPER --> 
  <script type="text/javascript">
<!--[CDATA[
scrollToNameAnchor();
// ]]-->
</script> 
  <!--
    Description:
    This file generates the link to product support in the top right corner
--> 
  <style>
#menutop{
    position:absolute;
    top:4px;
    right:24px;
    width:auto;    
    font-size:11px;
    color:#fff;
    text-align:right;
}
#menutop a{
    color:#fff;
}
#menutop a:hover{
        text-decoration:underline;
}
</style> 
  <div id="productmenu"> 
   <!--googleoff: index--> 
   <div id="menutop"> 
    <script language="javascript" type="text/javascript">
    // darken menu text for products with light backgrounds
    var path = document.location.href.toLowerCase();
    if (path.indexOf("/acrobat/")           	> 0 ||
        path.indexOf("/acrobat.com/")       	> 0 ||
        path.indexOf("/acrobatConnectPro/") 	> 0 ||
        path.indexOf("/connect/")           	> 0 ||
        path.indexOf("/livecycledataserviceses/") > 0 ||
        path.indexOf("/muse/")         	> 0 ||
	path.indexOf("/presenter/")         	> 0 ||
        path.indexOf("/scene7/")            	> 0 ||
        path.indexOf("/flashmediaserver/")  	> 0 ||
        path.indexOf("/wave/")              	> 0 )
    {
        document.write('<style>#menutop a{color:#505050}</style>');
    }
    if (typeof('terms_AHV_PRODUCT_SUPPORT') != "undefined" && ! use_robohelp_behavior ){      
        if (path.indexOf("/muse/") > -1 ){
            var supportlink = '<a href="http://muse.adobe.com/support.html">'+terms_AHV_PRODUCT_SUPPORT+'</a>';
        }else{
            var supportlink = '<a href="http://adobe.com/support">'+terms_AHV_PRODUCT_SUPPORT+'</a>';
        }
        document.write( supportlink );
     }

</script> 
   </div> 
   <!--googleon: index--> 
  </div> 
  <style>
#online-privacy-policy{ 
    margin:10px 40px; 
    font-size:11px;
}
</style> 
  <p id="online-privacy-policy"> <script language="javascript">
var pageLoc = "en_US";
var metaElements = document.all ?
document.all.tags('meta') :
document.getElementsByTagName ?
document.getElementsByTagName ('meta') : new Array();
for (var m = 0; m < metaElements.length; m++) {
	if (metaElements[m].name == "lang") {
		pageLoc = metaElements[m].content;
		break;
	}
}
var ptn = /(..)-(..)/;
if (ptn.test(pageLoc)) {
	var languageCode = pageLoc.replace(ptn, "$1");
	var countryCode = pageLoc.replace(ptn, "$2");
	pageLoc = languageCode + "_" + countryCode.toUpperCase();
}

var policyLoc = "en_US";
var policyText = "Online Privacy Policy";
var policyPath = "";
var policyArray=[
"da_DK", "Online fortrolighedserklæring",
"de_DE", "Online-Datenschutzrichtlinie",
"es_ES", "Política de confidencialidad en línea",
"fi_FI", "Yksityisyyttä koskeva Online-toimintaohjelma",
"fr_FR", "Confidentialité et sécurité",
"it_IT", "Informativa sulla privacy online",
"ja_JP", "??????????",
"ko_KR", "Adobe ??? ???? ????",
"pt_BR", "Política de Confidencialidade On-line", 
"zh_CN", "??????",
"zh_TW", "??????"
];
var legalLoc = "en_US";
var legalText = "Legal Notices";
var legalPath = legalLoc;
var legalArray=[
"ar_AE", "??????? ???????",
"bg_BG", "?????????? ???????",
"cs_CZ", "Právní upozorn?ní",
"da_DK", "Juridiske meddelelser",
"de_DE", "Rechtliche Hinweise",
"el_GR", "?????????? ??????? ????????????",
"es_ES", "Avisos legales",
"et_EE", "Juriidilised teated",
"fi_FI", "Lakisääteiset ilmoitukset",
"fr_FR", "Mentions légales",
"he_IL", "?????? ???????",
"hr_HR", "Pravne napomene",
"hu_HU", "Jogi közlemények",
"it_IT", "Informazioni legali",
"ja_JP", "??????",
"ko_KR", "?? ?? ??",
"lt_LT", "Teisin?s pastabos",
"lv_LV", "Juridisks pazi?ojums",
"nb_NO", "Juridiske merknader",
"nl_NL", "Juridische kennisgevingen",
"pl_PL", "Informacje prawne",
"pt_BR", "Aspectos jurídicos",
"ro_RO", "Prevederi legale",
"ru_RU", "??????????? ??????????",
"sk_SK", "Právne upozornenie",
"sl_SI", "Pravni pouk",
"sv_SE", "Upphovsrätt",
"tr_TR", "Yasal uyar?lar",
"uk_UA", "???????? ??????????",
"zh_CN", "????",
"zh_TW", "??????"
];

ruPolicy = "http://www.adobe.com/ru/misc/privacy.html";
trPolicy = "http://www.adobe.com/tr/misc/privacy.html";

// Bug 2846992: LOC: RUS, TUR: The link to "Online Privacy Policy" should include language, currently it is not appearing.
if (pageLoc == "ru_RU") {
	policyPath = "ru";
}
else if (pageLoc == "tr_TR") {
	policyPath = "tr";
}
for (var i = 0; i < policyArray.length; i+=2) {
	if (pageLoc == policyArray[i]) {
		policyLoc = pageLoc;
		policyText = policyArray[i+1];
		var ptn = /(..)_(..)/;
		if (ptn.test(policyLoc)) {
			var countryCode = policyLoc.replace(ptn, "$2");
			policyPath = countryCode.toLowerCase();
		}
		break;
	}
}

for (var i = 0; i < legalArray.length; i+=2) {
	if (pageLoc == legalArray[i]) {
		legalLoc = pageLoc;
		legalText = legalArray[i+1];
		legalPath = legalLoc;
		break;
	}
}
if(agt.indexOf("community help client") > -1 ){
	document.write('<a href="/'+legalPath+'/legalnotices/index.html">'+legalText+'<\/a>');
	document.write(' | ');
	document.write('<a href="http://www.adobe.com/'+policyPath+'/misc/privacy.html">'+policyText+'<\/a>');
}else{
	//Open the privacy policy in a new window
	document.write('<a target="_blank" href="/'+legalPath+'/legalnotices/index.html">'+legalText+'<\/a>');
	document.write(' | ');
	document.write('<a target="_blank" href="http://www.adobe.com/'+policyPath+'/misc/privacy.html">'+policyText+'<\/a>');
} 
</script> </p> 
  <!-- localfooter.ssi --> 
  <script type="text/javascript">
    var debug = (top.location.href.indexOf("debug=true") > -1);
</script> 
  <script language="javascript">
document.write('<scr'+'ipt ' +
               'src="/en_US/ssi/_pod.js" ' +
               'language="javascript" ' +
               'charset="UTF-8"> ' +
               '</scr'+'ipt>');
</script> 
  <script type="text/javascript">
//
//  Ethnio survey code
//
/*          DocumentID      EthnioID */
/*          -------------   -------- */
var ethnio=["/en_US/flash/cs/using/WSb03e830bd6f770ee6664507612436d7dede-8000.html", "87462",
            "/en_US/creativesuite/cs/using/WSe851854fd1e0856a-4b08a77612477f69f15-8000.html",  "10441",
            "/en_US/dreamweaver/cs/using/WSEE4C0148-A6F4-4bf5-9DEF-CE06AB026214a.html",  "57412"
 
    ];
                        
    for ( var i = 0; i < ethnio.length ; i = i+2 ){
        if ( document.location.href.indexOf( ethnio[i] ) > -1 ){ 
            var headID = document.getElementsByTagName("head")[0];         
            var ethnioScript = document.createElement('script');
            ethnioScript.type = 'text/javascript';
            ethnioScript.src = 'http://ethn.io/remotes/' + ethnio[i+1];        
            if ( debug ){
                alert ("Using Ethnio script: " + ethnioScript.src );
            }else{
                headID.appendChild(ethnioScript);
            }
        }
    }
</script>  
 </body>
</html>