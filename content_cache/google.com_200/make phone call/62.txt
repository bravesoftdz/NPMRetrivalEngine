<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head> 
  <meta http-equiv="Content-Type" content="text/html; charset=us-ascii"> 
  <meta http-equiv="Content-Language" content="en"> 
  <meta http-equiv="Content-Style-Type" content="text/css"> 
  <meta http-equiv="Content-Script-Type" content="text/javascript"> 
  <title>Setting Up Audio Calls in Your Applications</title> 
  <meta name="generator" content="Oracle DARB XHTML Converter (Mode = document) - Version 5.1.2 Build 742"> 
  <meta name="Date" content="2013-11-08T9:36:31Z"> 
  <meta name="robots" content="all" scheme="http://www.robotstxt.org/"> 
  <meta name="doctitle" content="Oracle&reg; Communications WebRTC Session Controller Web Application Developer's Guide Release 7.0"> 
  <meta name="partno" content="E40978-01"> 
  <meta name="docid" content="WSEWD"> 
  <link rel="Start" href="../../index.htm" title="Home" type="text/html"> 
  <link rel="Copyright" href="../../dcommon/html/cpyr.htm" title="Copyright" type="text/html"> 
  <link rel="Stylesheet" href="../../dcommon/css/blafdoc.css" title="Default" type="text/css"> 
  <script type="text/javascript" src="../../dcommon/js/doccd.js">
</script> 
  <link rel="Contents" href="toc.htm" title="Contents" type="text/html"> 
  <link rel="Prev" href="wd_appsecurity.htm" title="Previous" type="text/html"> 
  <link rel="Next" href="wd_videoinapps.htm" title="Next" type="text/html"> 
  <link rel="alternate" href="../e40978.pdf" title="PDF version" type="application/pdf"> 
  <link rel="alternate" href="../E40978-01.epub" title="ePub version" type="application/epub+zip"> 
  <link rel="alternate" href="../E40978-01.mobi" title="Mobipocket version" type="application/x-mobipocket-ebook"> 
 </head> 
 <body> 
  <div class="header"> 
   <div class="zz-skip-header">
    <a name="top" id="top" href="#BEGIN">Skip Headers</a>
   </div> 
   <table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%"> 
    <tbody>
     <tr> 
      <td align="left" valign="top"><b>Oracle&reg; Communications WebRTC Session Controller Web Application Developer's Guide<br> Release 7.0</b><br> E40978-01</td> 
      <td valign="bottom" align="right"> 
       <table summary="" class="icons oac_no_warn" cellspacing="0" cellpadding="0" width="147"> 
        <tbody>
         <tr> 
          <td align="center" valign="top"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home"><br> <span class="icon">Home</span></a></td> 
          <td align="center" valign="top"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents"><br> <span class="icon">Contents</span></a></td> 
          <td align="center" valign="top"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page"><br> <span class="icon">Contact Us</span></a></td> 
         </tr> 
        </tbody>
       </table> </td> 
     </tr> 
    </tbody>
   </table> 
   <span class="page" style="display:none;">7/13</span> 
   <hr> 
   <table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="100%"> 
    <tbody>
     <tr> 
      <td align="left" valign="top"> 
       <table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="98"> 
        <tbody>
         <tr> 
          <td align="center" valign="top"><a href="wd_appsecurity.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page"><br> <span class="icon">Previous</span></a></td> 
          <td align="center" valign="top"><a href="wd_videoinapps.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page"><br> <span class="icon">Next</span></a></td> 
         </tr> 
        </tbody>
       </table> </td> 
      <td align="right" valign="top" style="font-size: 90%"><a href="../e40978.pdf">PDF</a> &middot; <a href="../E40978-01.mobi">Mobi</a> &middot; <a href="../E40978-01.epub">ePub</a></td> 
     </tr> 
    </tbody>
   </table> 
   <a name="BEGIN" id="BEGIN"></a>
  </div> 
  <!-- End Header --> 
  <div class="IND">
   <!-- End Header --> 
   <div id="WSEWD164" class="chapter">
    <a id="BACICBGE" name="BACICBGE"></a> 
    <h1 class="chapter"><span class="secnum">4</span> Setting Up Audio Calls in Your Applications</h1> 
    <p>This chapter shows how you can use the Oracle Communications WebRTC Session Controller JavaScript application programming interface (API) library to enable your applications users to make and receive audio calls from your applications when your applications run on WebRTC-enabled browsers.</p> 
    <div class="infoboxnote"> 
     <p class="notep1">Note:</p> See 
     <span class="italic">WebRTC Session Controller JavaScript API Reference</span> for more information on the individual WebRTC Session Controller JavaScript API classes.
    </div> 
    <a id="BACIGJGJ" name="BACIGJGJ"></a> 
    <div id="WSEWD165" class="sect1"> 
     <h2 class="sect1">About Implementing the Audio Call Feature in Your Applications</h2> 
     <p>The WebRTC Session Controller JavaScript API for audio calls enables your web applications to support audio calls made to and received from phones located on applications hosted on other WebRTC-enabled browsers, Session Initialization Protocol (SIP) protocol based applications, and public switched telephone network (PSTN) phones.</p> 
     <p>To support audio calls in your application, implement the logic to do the following:</p> 
     <ul> 
      <li> <p>For calls made from by your application user, obtain the callee information and start the process to set up the call session between the caller and callee.</p> </li> 
      <li> <p>For calls received by your application user, obtain the callee's response to the incoming call request and respond to the callee accepting or rejecting the incoming call invitation.</p> </li> 
      <li> <p>Monitor the call session, taking action to respond to any change in the state of the application session, call session or media stream.</p> </li> 
      <li> <p>Take appropriate action when one of the parties ends the call.</p> </li> 
     </ul> 
     <p>This basic logic can be used to support calls with video and data transfers.</p> 
     <a id="BACHGAHI" name="BACHGAHI"></a> 
     <div id="WSEWD166" class="sect2"> 
      <h3 class="sect2">About the WebRTC Session Controller JavaScript API Used in Implementing Audio Calls</h3> 
      <p>The following WebRTC Session Controller JavaScript API classes are used to implement audio calls in your web applications:</p> 
      <ul> 
       <li> <p><span class="bold">wsc.Session</span> for the session object</p> </li> 
       <li> <p><span class="bold">wsc.CallPackage</span> for the call package object</p> </li> 
       <li> <p><span class="bold">wsc.Call</span> for the call object</p> </li> 
       <li> <p><span class="bold">wsc.CallConfig</span> for the media configuration in the calls</p> </li> 
       <li> <p>The constants defined in the following enumerators:</p> 
        <ul> 
         <li> <p><span class="bold">wsc.SESSIONSTATE</span></p> </li> 
         <li> <p><span class="bold">wsc.CALLSTATE</span></p> </li> 
         <li> <p><span class="bold">wsc.MEDIADIRECTION</span></p> </li> 
         <li> <p><span class="bold">wsc.MEDIASTREAMEVENT</span></p> </li> 
         <li> <p><span class="bold">wsc.ERRORCODE</span></p> </li> 
         <li> <p><span class="bold">wsc.LOGLEVEL</span></p> </li> 
        </ul> </li> 
      </ul> 
      <p>You can extend the audio call feature in your application to perform custom tasks by extending these API classes.</p> 
     </div> 
     <!-- class="sect2" -->
    </div> 
    <!-- class="sect1" --> 
    <a id="BACDHGFA" name="BACDHGFA"></a> 
    <div id="WSEWD167" class="sect1"> 
     <h2 class="sect1">Setting Up Audio Calls in Your Applications</h2> 
     <p>Use the WebRTC Session Controller JavaScript API library to set up the audio call feature in your application to suit your deployment environment. The specific logic, web application elements, and controls you implement for the audio call feature in your applications are predicated upon how the audio call feature is used in your web application.</p> 
     <p>To illustrate the basic logic in setting up call capability in web applications using the WebRTC Session Controller JavaScript API library, this section uses a sample application in which the audio call is its primary and sole feature.</p> 
     <div id="WSEWD168" class="sect2">
      <a id="sthref24" name="sthref24"></a> 
      <h3 class="sect2">About the Sample Audio Call Application</h3> 
      <p>The sample audio call application referenced in this chapter provides the logic necessary to enable two users to place a call to each other. It uses WebRTC Session Controller JavaScript API and supports audio calls only. The sample audio call application obtains the call information from an input field it provides on the application page. The steps in the development process described below refer to this sample audio call application. See <a href="wd_sampleapps.htm#CHDBHJJD">"Sample Audio Call Application"</a> to view the complete code.</p> 
     </div> 
     <!-- class="sect2" --> 
     <a id="BACFBJAJ" name="BACFBJAJ"></a> 
     <div id="WSEWD169" class="sect2"> 
      <h3 class="sect2">Overview of Setting Up the Audio Call Feature in Your Application</h3> 
      <p>To set up an audio call feature in your application, requires implementing logic for the following:</p> 
      <ol> 
       <li> <p><a href="#BACDCJFB">Setting Up the General Elements for the Audio Call Feature</a></p> </li> 
       <li> <p><a href="#BACIEABE">Enabling Users to Make Audio Calls From Your Application</a></p> </li> 
       <li> <p><a href="#BACBEJHF">Implementing the Logic to Set Up the Call Session</a></p> </li> 
       <li> <p><a href="#BACCGDIG">Enabling Your Application Users to Receive Calls</a></p> </li> 
       <li> <p><a href="#BACGEAEE">Monitoring the Call</a></p> </li> 
       <li> <p><a href="#BACBIADE">Ending the Call</a></p> </li> 
      </ol> 
     </div> 
     <!-- class="sect2" --> 
     <a id="BACDCJFB" name="BACDCJFB"></a> 
     <div id="WSEWD170" class="sect2">
      <!-- infolevel="all" infotype="General" --> 
      <h3 class="sect2">Setting Up the General Elements for the Audio Call Feature</h3> 
      <p>To set up the audio call feature in your application, include the following in the &lt;head&gt; section of your application:</p> 
      <ul> 
       <li> <p>The &lt;audio&gt; element</p> <p>Set up the &lt;audio&gt; element for the local and remote audio according to your browser.</p> </li> 
       <li> <p>The WebRTC Session Controller JavaScript API library (<span class="bold">wsc.js</span>)</p> <p>Reference the <span class="bold">wsc.js</span> file. If your application uses other supporting libraries, reference them, as well.</p> </li> 
      </ul> 
      <p>See <a href="wd_sampleapps.htm#CHDBHJJD">"Sample Audio Call Application"</a>.</p> 
      <div id="WSEWD171" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref25" name="sthref25"></a> 
       <h4 class="sect3">Setting Up the Main Objects and Values</h4> 
       <p>Use the WebRTC Session Controller JavaScript API to set up the main objects and values at the start of your application:</p> 
       <ul> 
        <li> <p>Declare a <span class="bold">Session</span> object, a <span class="bold">CallPackage</span> object, and a variable for the user name.</p> </li> 
        <li> <p>Set the log level as required as described in <a href="wd_javascriptapis.htm#CIHHCCFG">"Debugging Your Application with wsc.LOGLEVEL"</a>.</p> </li> 
        <li> <p>Set up the web Socket uniform resource identifier (URI) for the WebLogic Server and the login and logout URIs, if your application uses them. The WebSocket URI is required when you create a session object in your application.</p> </li> 
       </ul> 
       <p><a href="#BACIJAEG">Example 4-1</a> shows how the sample application described in this chapter sets up the WebSocket URI and global variables.</p> 
       <div id="WSEWD172" class="example"> 
        <p class="titleinexample"><a id="BACIJAEG" name="BACIJAEG"></a>Example 4-1 Sample Setup of Global Variables and WebSocket URI</p> 
        <pre xml:space="preserve" class="oac_no_warn">
var wscSession, callPackage, userName, caller, callee;
wsc.setLogLevel(wsc.LOGLEVEL.DEBUG);
 
// Save the location from where the user accessed this application.
var savedUrl = window.location;
 
// This application is deployed on WebRTC Session Controller (WSC).
var <span class="italic">wsUri</span> = "ws://" + window.location.hostname  + ":" + window.location.port + "/<span class="italic">ws</span>/<span class="italic">webrtc</span>/<span class="italic">sample</span>";
 
//  loginURI is the location from where the user accesses the application.
//  logoutURI is the location to which the user is redirected after logout.
   ...
</pre>
       </div> 
       <!-- class="example" --> 
       <p>Here:</p> 
       <ul> 
        <li> <p><span class="bold">window.location.hostname</span> and <span class="bold">window.location.port</span> define the location for Signaling Engine associated with the audio call application.</p> </li> 
        <li> <p><span class="italic">/ws/webrtc/</span><span class="italic">sample</span> indicates that the sample application is deployed in WebRTC Session Controller.</p> </li> 
       </ul> 
      </div> 
      <!-- class="sect3" --> 
      <div id="WSEWD173" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref26" name="sthref26"></a> 
       <h4 class="sect3">Current Stage in the Development of the Audio Call Feature</h4> 
       <p>At this point, you have completed the setup for the general elements required for an audio call application. You now need to enable users to make a call from the audio call application.</p> 
      </div> 
      <!-- class="sect3" -->
     </div> 
     <!-- class="sect2" --> 
     <a id="BACIEABE" name="BACIEABE"></a> 
     <div id="WSEWD174" class="sect2">
      <!-- infolevel="all" infotype="General" --> 
      <h3 class="sect2">Enabling Users to Make Audio Calls From Your Application</h3> 
      <p>To enable users to make a call from your application, complete the following tasks:</p> 
      <ul> 
       <li> <p><a href="#BACJGJBE">Setting Up the Configuration for Calls Supported by the Application</a></p> </li> 
       <li> <p><a href="#BACHFIBJ">Setting Up the Session Object</a></p> </li> 
       <li> <p><a href="#BACFEBEG">Setting Up the Call Package for the Session</a></p> </li> 
       <li> <p><a href="#BACIBHHC">Handling Session State Changes</a></p> </li> 
       <li> <p><a href="wd_errorhandling.htm#CIHEBJFC">Handling Errors Related to Sessions</a></p> </li> 
       <li> <p><a href="#BACGBACE">Obtaining the Callee Information</a></p> </li> 
      </ul> 
      <a id="BACJGJBE" name="BACJGJBE"></a> 
      <div id="WSEWD175" class="sect3">
       <!-- infolevel="all" infotype="General" --> 
       <h4 class="sect3">Setting Up the Configuration for Calls Supported by the Application</h4> 
       <p>The WebRTC Session Controller JavaScript API library provides the <span class="bold">CallConfig</span> class object to define the audio, video, and data channel capabilities of a call. To create a <span class="bold">CallConfig</span> class object, use the syntax:</p> 
       <pre xml:space="preserve" class="oac_no_warn">
wsc.CallConfig(audioMediaDirection, videoMediaDirection, dataChannelConfig)
</pre> 
       <p>When you create your application's <span class="bold">CallConfig</span> class object, specify the configuration for the local audio media stream in <span class="bold">audioMediaDirection</span> and video media stream in <span class="bold">videoMediaDirection</span> as described in <a href="wd_javascriptapis.htm#CIHBFHDD">"Specifying the Configuration for Calls with wsc.CallConfig"</a>.</p> 
       <p>The <span class="bold">dataChannelConfigs</span> parameter is used to define data transfers (as in text messaging sessions), and is an array of JavaScript Object Notation (JSON) objects that describe the configuration of the data channel. See <a href="wd_chatinapps.htm#CHDBFCGI">"Setting Up the Configuration for Data Transfers in Chat Sessions"</a> for more information on setting up the configuration for data transfers.</p> 
       <p>Set the local audio, video stream, and data transfer configuration for calls in your application based on your browser properties and your web application's requirements.</p> 
       <p>The sample audio call application supports audio calls in both directions and creates a call configuration object called <span class="italic">callConfig</span>, as shown below in <a href="#BACJDFCJ">Example 4-2</a>:</p> 
       <div id="WSEWD176" class="example"> 
        <p class="titleinexample"><a id="BACJDFCJ" name="BACJDFCJ"></a>Example 4-2 Sample Call Configuration Object</p> 
        <pre xml:space="preserve" class="oac_no_warn">
// Create a CallConfig object.
var audioMediaDirection = wsc.MEDIADIRECTION.SENDRECV;
var videoMediaDirection = wsc.MEDIADIRECTION.NONE;
var <span class="italic">callConfig</span> = new wsc.CallConfig(audioMediaDirection, videoMediaDirection);
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect3" --> 
      <a id="BACHFIBJ" name="BACHFIBJ"></a> 
      <div id="WSEWD177" class="sect3">
       <!-- infolevel="all" infotype="General" --> 
       <h4 class="sect3">Setting Up the Session Object</h4> 
       <p>The WebRTC Session Controller JavaScript API library provides the <span class="bold">wsc.Session</span> class object to encapsulate the session between your web application and WebRTC Session Controller Signaling Engine. To create an instance of the <span class="bold">Session</span> class, use the following syntax:</p> 
       <pre xml:space="preserve" class="oac_no_warn">
<span class="bold">wsc.Session(</span><span class="italic">userName</span>, <span class="italic">webSocketUri</span>, <span class="italic">successCallback</span>, <span class="italic">failureCallback</span>, <span class="italic">sessionId</span><span class="bold">)</span> 
</pre> 
       <p>Where:</p> 
       <ul> 
        <li> <p><span class="variable">userName</span> is the user name.</p> </li> 
        <li> <p><span class="variable">webSocketUri</span> is the WebSocket connection defined earlier in <a href="#BACIJAEG">Example 4-1</a>.</p> </li> 
        <li> <p><span class="variable">successCallback</span> is the function to call if the session object was created successfully.</p> </li> 
        <li> <p><span class="italic">failureCallback</span> is the function to call if the session object was not created.</p> </li> 
        <li> <p><span class="variable">sessionId</span> is the Session Id. It is needed if you are refreshing an existing session.</p> </li> 
       </ul> 
       <p>To set up a session object in your application:</p> 
       <ul> 
        <li> <p>Create an instance of the <span class="bold">wsc.Session</span> object.</p> </li> 
        <li> <p>Set up the logic for the <span class="italic">successCallback</span> and <span class="italic">failureCallback</span> functions.</p> </li> 
        <li> <p>If your application authenticates its users before allowing them to make calls:</p> 
         <ul> 
          <li> <p>Set up an authentication handler for that session. Input the session object when you instantiate the <span class="bold">wsc.AuthHandler</span> class.</p> </li> 
          <li> <p>Assign the callback function to the <span class="bold">refresh</span> field of your application's authentication handler.</p> </li> 
          <li> <p>Set up the logic for the callback function. See <a href="#BACGCIDF">Example 4-8</a>.</p> </li> 
         </ul> </li> 
        <li> <p>Specify the values for <span class="bold">busyPingInterval</span>, <span class="bold">idlePingInterval</span>, and <span class="bold">reconnectTime</span>. These settings determine how your application's session is monitored. See <a href="wd_javascriptapis.htm#CIHIJACF">"About Monitoring Your Application WebSocket Connection"</a>.</p> </li> 
        <li> <p>Manage the changes in the state of your application session in the following way:</p> 
         <ul> 
          <li> <p>Assign a callback function to your application's <span class="bold">Session.onSessionStateChange</span> event handler.</p> </li> 
          <li> <p>Set up the actions to be performed by the callback function. See <a href="wd_javascriptapis.htm#CIHECJGG">"Handling Session State Changes"</a>.</p> </li> 
         </ul> </li> 
       </ul> 
       <p>The sample audio call application performs these tasks inside a function called <span class="italic">setSessionUp</span>. When the sample audio call application page loads, the JavaScript onPageLoad function runs and it calls the <span class="italic">setSessionUp</span> function as shown below.</p> 
       <pre xml:space="preserve" class="oac_no_warn">
// The onPageLoad event handler.
function onPageLoad() {
    setSessionUp();
}
</pre> 
       <p>Within the <span class="italic">setSessionUp</span> function, the sample audio call application:</p> 
       <ul> 
        <li> <p>Creates an instance of the <span class="bold">Session</span> class object called <span class="italic">wscSession</span>, with:</p> 
         <ul> 
          <li> <p><span class="italic">wsURI</span> as its WebSocket connection.</p> </li> 
          <li> <p><span class="italic">sessionSuccessHandler</span> as the callback function for a successful creation of the session.</p> </li> 
          <li> <p><span class="italic">sessionErrorHandler</span> as the callback function for a successful creation of the session.</p> </li> 
         </ul> </li> 
        <li> <p>Registers an authentication handler called <span class="italic">authHandler</span> with <span class="italic">wscSession</span>.</p> </li> 
        <li> <p>Configures the monitoring time intervals for <span class="italic">wscSession</span>.</p> </li> 
        <li> <p>Assigns a callback function called <span class="italic">sessionStateChangeHandler</span> to the application's <span class="bold">onSessionStateChange</span> event handler. This callback function manages the changes in the application's session state.</p> </li> 
       </ul> 
       <p><a href="#BACIHDDG">Example 4-3</a> shows the <span class="italic">setSessionUp</span> function implemented in the sample audio call application:</p> 
       <div id="WSEWD178" class="example"> 
        <p class="titleinexample"><a id="BACIHDDG" name="BACIHDDG"></a>Example 4-3 Sample Session Object Setup</p> 
        <pre xml:space="preserve" class="oac_no_warn">
// This function sets up and configures the WebSocket connection.
function <span class="italic">setSessionUp</span>() {
    console.log("In setSessionUp().");
 
    // Create the session. Here, userName is null. 
    // WSC can determine it using the cookie of the request.
    <span class="italic">wscSession</span> = new wsc.Session(null, <span class="italic">wsUri</span>, <span class="italic">sessionSuccessHandler</span>, <span class="italic">sessionErrorHandler</span>);
    // Register a wsc.AuthHandler with session.
    // It provides customized authentication information, such as
    // username and password.
    var <span class="italic">authHandler</span> = new wsc.AuthHandler(<span class="italic">wscSession</span>);
    <span class="italic">authHandler</span>.refresh = <span class="italic">refreshAuth</span>;
 
    // Configure the session.
    <span class="italic">wscSession</span>.setBusyPingInterval(2 *1000);
    <span class="italic">wscSession</span>.setIdlePingInterval(6 * 1000);
    <span class="italic">wscSession</span>.setReconnectTime(2 * 1000);
    <span class="italic">wscSession</span>.onSessionStateChange = <span class="italic">sessionStateChangeHandler</span>;
    console.log("Session configured with authhandler, intervals and sessionStateChange handler.\n");
}
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect3" --> 
      <a id="BACFEBEG" name="BACFEBEG"></a> 
      <div id="WSEWD179" class="sect3">
       <!-- infolevel="all" infotype="General" --> 
       <h4 class="sect3">Setting Up the Call Package for the Session</h4> 
       <p>The WebRTC Session Controller JavaScript API library provides the <span class="bold">CallPackage</span> class to manage the calls and all the messaging workflow with WebRTC Session Controller Signaling Engine. To create an instance of the <span class="bold">CallPackage</span> class, use the following syntax:</p> 
       <pre xml:space="preserve" class="oac_no_warn">
wsc.CallPackage(<span class="italic">session</span>)
</pre> 
       <p>Where <span class="italic">session</span> is the instance of the <span class="bold">Session</span> object in your application.</p> 
       <p>To configure the call package to manage the audio calls in your application:</p> 
       <ul> 
        <li> <p>Create an instance of the <span class="bold">CallPackage</span> class object for the application session.</p> </li> 
        <li> <p>Implement your application logic for incoming calls in the following way:</p> 
         <ul> 
          <li> <p>Assign a callback function for the <span class="bold">CallPackage.onIncomingCall</span> event handler.</p> </li> 
          <li> <p>Set up the actions to be performed by the callback function.</p> </li> 
         </ul> </li> 
        <li> <p>Implement your application logic to refresh a call that was dropped momentarily:</p> 
         <ul> 
          <li> <p>Assign a callback function for the <span class="bold">CallPackage.onResurrect</span> event handler.</p> </li> 
          <li> <p>Set up the actions to be performed by the callback function.</p> </li> 
         </ul> </li> 
       </ul> 
       <p>The sample audio call application sets up a call package called <span class="italic">callPackage</span>. It sets up the call package within a callback function called <span class="italic">sessionSuccessHandler</span> which is called when the application session is created. To process incoming calls, the sample audio call application assigns a function named <span class="italic">onIncomingCall</span> to the <span class="bold">Call.onIncomingCall</span> event handler for incoming calls. This callback function is describer later in <a href="#BACJBFFB">"Responding to Your User's Actions on an Incoming Call"</a>. Additionally, the sample audio call application retrieves the name of the user.</p> 
       <p><a href="#BACBADAJ">Example 4-4</a> shows the <span class="italic">sessionSuccessHandler</span> callback function.</p> 
       <div id="WSEWD180" class="example"> 
        <p class="titleinexample"><a id="BACBADAJ" name="BACBADAJ"></a>Example 4-4 Sample CallPackage Setup</p> 
        <pre xml:space="preserve" class="oac_no_warn">
function sessionSuccessHandler() {
    console.log(" In sessionSuccesshandler.");

    // Create a CallPackage.
    <span class="italic">callPackage</span> = new wsc.CallPackage(<span class="italic">wscSession</span>);
    // Bind the event handler of incoming call.
    if(<span class="italic">callPackage</span>){
        <span class="italic">callPackage</span>.onIncomingCall = <span class="italic">onIncomingCall</span>;
    }
    console.log(" Created CallPackage..\n");
    // Get user Id.
    <span class="italic">userName</span> = <span class="italic">wscSession</span>.getUserName();
    console.log (" Our user is " + userName);
}
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect3" --> 
      <a id="BACIBHHC" name="BACIBHHC"></a> 
      <div id="WSEWD181" class="sect3">
       <!-- infolevel="all" infotype="General" --> 
       <h4 class="sect3">Handling Session State Changes</h4> 
       <p>When your application's session state changes, the WebRTC Session Controller JavaScript API Library invokes the application session object's <span class="bold">Session.onSessionStateChange</span> event handler. The new session state for the call is provided as input to your application.</p> 
       <p>Monitor the different states in the callback function you assigned to your application session object's <span class="bold">Session.onSessionStateChange</span> event handler. Specify the actions your application must take for each of the state changes you include.</p> 
       <p>The <span class="bold">wsc.SESSIONSTATE</span> enumerator contains the different states of a session defined as constants such as <span class="bold">NONE</span> when the session is created, <span class="bold">CONNECTED</span> when the session connects with the server, <span class="bold">CLOSED</span> when the session closes normally, and so on. See <span class="italic">WebRTC Session Controller JavaScript API Reference</span> for more information.</p> 
       <p>The sample audio call application assigns a callback function named <span class="italic">sessionStateChangeHandler</span> to its application session object's <span class="bold">Session.onSessionStateChange</span> event handler. In that callback function, the sample audio call application monitors and implements logic for three session states, <span class="bold">CONNECTED</span>, <span class="bold">FAILED</span>, and <span class="bold">RECONNECTING</span>. When the session state is <span class="bold">CONNECTED</span>, the sample audio call application calls a function named <span class="italic">displayInitialControls</span> to obtain the callee's name.</p> 
       <p><a href="#BACGIJHD">Example 4-5</a> shows the <span class="italic">sessionStateChangeHandler</span> callback function.</p> 
       <div id="WSEWD182" class="example"> 
        <p class="titleinexample"><a id="BACGIJHD" name="BACGIJHD"></a>Example 4-5 Sample Session State Handler Callback Function</p> 
        <pre xml:space="preserve" class="oac_no_warn">
function sessionStateChangeHandler(<span class="italic">sessionState</span>) {
    console.log("sessionState : " + <span class="italic">sessionState</span>);
    switch (<span class="italic">sessionState</span>) {
        case wsc.SESSIONSTATE.RECONNECTING:
        setControls("&lt;h1&gt;Network is unstable, please wait...&lt;/h1&gt;");
        break;
        case wsc.SESSIONSTATE.CONNECTED:
        if (<span class="italic">wscSession</span>.getAllSubSessions().length == 0) {
            displayInitialControls();
        }
        break;
        case wsc.SESSIONSTATE.FAILED:
        setControls("&lt;h1&gt;Session Failed, please logout and try again.&lt;/h1&gt;");
        break;
    }
}
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect3" --> 
      <a id="BACGBACE" name="BACGBACE"></a> 
      <div id="WSEWD183" class="sect3">
       <!-- infolevel="all" infotype="General" --> 
       <h4 class="sect3">Obtaining the Callee Information</h4> 
       <p>Your application can obtain the callee information in a number of ways. Ensure that, if the user is given a choice of controls such as canceling the operation or logging out, the corresponding callback functions are invoked in your application.</p> 
       <p>The sample audio call application uses a function called <span class="italic">displayInitialControls</span> to obtain the callee information. In it, the sample audio call application defines a simple user interface consisting of input fields and control buttons to receive the callee's name. The 'onclick'=<span class="italic">'functionName()'</span> for each button triggers the next step for that event. For example, the <span class="italic">onCallSomeOne()</span> function is invoked when the <span class="italic">Call</span> button is selected.</p> 
       <p><a href="#BACBJGFC">Example 4-6</a> shows the <span class="italic">displayInitialControls</span> callback function.</p> 
       <div id="WSEWD184" class="example"> 
        <p class="titleinexample"><a id="BACBJGFC" name="BACBJGFC"></a>Example 4-6 Sample displayInitialControls Function</p> 
        <pre xml:space="preserve" class="oac_no_warn">
function displayInitialControls() {
    console.log ("In displayControls().");
    var controls = "Enter Your Callee: &lt;input type='text' name='callee' id='callee'/&gt;&lt;br&gt;&lt;hr&gt;"
                    + "&lt;input type='button' name='callButton' id='btnCall'  value='Call' onclick='onCallSomeOne()'/&gt;"
                 + "&lt;input type='button' name='cancelButton' id='btnCancel'  value='Cancel' onclick='' disabled ='true'/&gt;&lt;br&gt;&lt;br&gt;&lt;hr&gt;"
                 + "&lt;input type='button' name='logoutButton' id='Logout'  value='Logout' onclick='logout()'/&gt;"
                 + "&lt;br&gt;&lt;br&gt;&lt;hr&gt;";
    setControls(controls);
    var calleeInput = document.getElementById("callee");
 
    if (calleeInput) {
        console.log (" Waiting for Callee Input.");
        console.log (" ");
        if(userName != calleeInput) {
            calleeInput.focus();
        }
 
    }
}
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect3" --> 
      <div id="WSEWD185" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref27" name="sthref27"></a> 
       <h4 class="sect3">Current Stage in the Development of the Audio Call Feature in Your Application</h4> 
       <p>At this stage in the development of the audio call feature in your application:</p> 
       <ul> 
        <li> <p>The general elements required for audio calls are set.</p> </li> 
        <li> <p>Your application can obtain the callee information.</p> </li> 
        <li> <p>The application logic for the following functions is implemented:</p> 
         <ul> 
          <li> <p><span class="variable">successCallback</span> function invoked when the application's session object is created</p> </li> 
          <li> <p><span class="italic">failureCallback</span> function invoked when the application's session object is not created</p> </li> 
          <li> <p>The callback function assigned to the <span class="bold">Session.onSessionStateChange</span> event handler</p> </li> 
          <li> <p>The callback function assigned to the <span class="bold">CallPackage.onIncomingCall</span> event handler</p> </li> 
          <li> <p>The callback function assigned to the <span class="bold">CallPackage.onResurrect</span> event handler</p> </li> 
         </ul> </li> 
       </ul> 
       <p>Your application now needs the logic to handle both end points, the caller's side which must handle connecting the caller to the callee; and the callee's side which must respond to the callee accepting or declining the incoming call.</p> 
      </div> 
      <!-- class="sect3" --> 
      <div id="WSEWD186" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref28" name="sthref28"></a> 
       <h4 class="sect3">Initial Actions of the Sample Audio Call Application</h4> 
       <p><a href="#BACDBJEI">Table 4-1</a> reports on the sample audio call's actions in enabling a user to make a call from the application. It describes the events that occur on the sample audio call application page, the actions taken by the sample audio call application, and the messages logged by the <span class="bold">console.log</span> method for this segment of the application code.</p> 
       <div id="WSEWD187" class="tblruleformalwide"> 
        <p class="titleintable"><a id="sthref29" name="sthref29"></a><a id="BACDBJEI" name="BACDBJEI"></a>Table 4-1 Initial Actions Performed by the Sample Audio Call Application</p> 
        <table class="RuleFormalWide" title="Initial Actions Performed by the Sample Audio Call Application " summary="This table lists the initial actions performed by the application." dir="ltr" border="1" width="100%" frame="border" rules="all" cellpadding="3" cellspacing="0"> 
         <colgroup>
          <col width="20%"> 
          <col width="24%"> 
          <col width="*"> 
          <col width="28%"> 
         </colgroup>
         <thead> 
          <tr align="left" valign="top"> 
           <th align="left" valign="bottom" id="r1c1-t3">Sample Audio Call Application Page Events</th> 
           <th align="left" valign="bottom" id="r1c2-t3">Actions Taken by the Sample Audio Call Application</th> 
           <th align="left" valign="bottom" id="r1c3-t3">Console Log for the Caller (<span class="italic">bob1</span>)</th> 
           <th align="left" valign="bottom" id="r1c4-t3">Console Log for the Callee (<span class="italic">bob2</span>)</th> 
          </tr> 
         </thead> 
         <tbody> 
          <tr align="left" valign="top"> 
           <td align="left" id="r2c1-t3" headers="r1c1-t3"> <p>When the page loads, the page displays the control buttons and input fields to allow the user to make a call.</p> </td> 
           <td align="left" headers="r2c1-t3 r1c2-t3"> <p>The initial actions taken by the audio call application before the user starts the call or receives a call:</p> 
            <ul> 
             <li> <p><span class="bold">CallConfig</span>, which defines the calling capability, is configured.</p> </li> 
             <li> <p>When the page loads, the <span class="italic">wscSession</span> object is created and configured.</p> </li> 
             <li> <p>The session is now in a CONNECTED state.</p> </li> 
             <li> <p>Controls are displayed on the application page. For the audio call, they consist of a callee input field, <span class="bold">Call</span>, <span class="bold">Cancel</span> and <span class="bold">Logout</span> buttons.</p> </li> 
             <li> <p>The call package is created inside the callback for the session success event handler.</p> </li> 
            </ul> <p>The example code retrieves the user Id for debugging purposes.</p> </td> 
           <td align="left" headers="r2c1-t3 r1c3-t3"> <pre xml:space="preserve" class="oac_no_warn">
Created CallConfig with audio stream only.

Page has loaded. Setting up the Session.

In setSessionUp(). 
Session configured with authhandler,
 intervals and sessionStateChange handler.

sessionState : CONNECTED

In displayControls().
Waiting for Callee Input.

In sessionSuccesshandler.
Created CallPackage..

Our user is bob1@example.com
</pre></td> 
           <td align="left" headers="r2c1-t3 r1c4-t3"> <pre xml:space="preserve" class="oac_no_warn">
Created CallConfig with audio stream only.

Page has loaded. Setting up the Session.

In setSessionUp(). 
Session configured with authhandler,
 intervals and sessionStateChange handler.

sessionState : CONNECTED

In displayControls().
Waiting for Callee Input.

In sessionSuccesshandler.
Created CallPackage..

Our user is bob2@example.com 
</pre></td> 
          </tr> 
         </tbody> 
        </table> 
        <br>
       </div> 
       <!-- class="tblruleformalwide" -->
      </div> 
      <!-- class="sect3" -->
     </div> 
     <!-- class="sect2" --> 
     <a id="BACBEJHF" name="BACBEJHF"></a> 
     <div id="WSEWD188" class="sect2"> 
      <h3 class="sect2">Implementing the Logic to Set Up the Call Session</h3> 
      <p>When your application has obtained the callee information, it can start the process to establish a call session between the caller and the callee.</p> 
      <p>To implement the logic to start a call from your application, complete the following tasks:</p> 
      <ul> 
       <li> <p>Start the call. See <a href="#BACCCJDA">"Starting a Call From Your Application"</a></p> </li> 
       <li> <p>Set up the callback function to handle any failure in creating the call. See <a href="wd_errorhandling.htm#CIHFJHHH">"Handling Errors Related to Calls"</a>.</p> </li> 
       <li> <p>If the browser does not support the media stream, set up your application to respond appropriately. See <a href="wd_javascriptapis.htm#CIHIGADA">"Handling Changes in Media Stream States"</a> for more information.</p> </li> 
       <li> <p>Set up the authentication handler based on whether your application supports Traversal Using Relays around Network address translation (TURN) or SERVICE authentication. See <a href="#BACEIJCJ">"Retrieving the Appropriate Authentication Headers"</a>.</p> </li> 
       <li> <p>Provide the logic for the call state event handler. See <a href="#BACDFBEG">"Setting Up the Event Handler for Call State Changes"</a>.</p> </li> 
       <li> <p>Provide the logic for the media stream event handler. See <a href="#BACJHEAJ">"Setting Up the Event Handler for the Media Streams"</a>.</p> </li> 
      </ul> 
      <a id="BACCCJDA" name="BACCCJDA"></a> 
      <div id="WSEWD189" class="sect3">
       <!-- infolevel="all" infotype="General" --> 
       <h4 class="sect3">Starting a Call From Your Application</h4> 
       <p>The WebRTC Session Controller JavaScript API library provides the <span class="bold">wsc.Call</span> class object to represent a call with any combination of audio/video/data channel capability. Use the <span class="bold">createCall</span> method of the <span class="bold">CallPackage</span> class to create your application's call object. The syntax to create your application's <span class="bold">Call</span> object is:</p> 
       <pre xml:space="preserve" class="oac_no_warn">
callPackage.createCall(<span class="italic">target</span>, <span class="italic">callConfig</span>, <span class="italic">errorCallback</span>) 
</pre> 
       <p>Where:</p> 
       <ul> 
        <li> <p><span class="variable">target</span> is the callee.</p> </li> 
        <li> <p><span class="italic">callConfig</span> is audio/video/data channel capability of calls defined earlier in <a href="#BACJDFCJ">Example 4-2</a>.</p> </li> 
        <li> <p><span class="variable">errorCallback</span> is the function to call if the call was not created.</p> </li> 
       </ul> 
       <p>When you obtain the callee information, implement the logic to start the call in the following way:</p> 
       <ul> 
        <li> <p>Create an instance of the <span class="bold">wsc.Call</span> object.</p> </li> 
        <li> <p>To handle changes in the call session state:</p> 
         <ul> 
          <li> <p>Assign a callback function for the <span class="bold">Call.onCallStateChange</span> event handler.</p> </li> 
          <li> <p>Set up the actions to be performed by the callback function.</p> </li> 
         </ul> </li> 
        <li> <p>To handle changes in the state of the media stream:</p> 
         <ul> 
          <li> <p>Assign a callback function for the <span class="bold">Call.onMediaStreamEvent</span> event handler.</p> </li> 
          <li> <p>Set up the actions to be performed by the callback function.</p> </li> 
         </ul> </li> 
        <li> <p>To handle any updates to the call:</p> 
         <ul> 
          <li> <p>Assign a callback function for the <span class="bold">Call.onUpdate</span> event handler.</p> </li> 
          <li> <p>Set up the actions to be performed by the callback function.</p> </li> 
         </ul> </li> 
        <li> <p>To handle any error in the call creation:</p> 
         <ul> 
          <li> <p>Set up the actions to be performed by your application's <span class="variable">errorCallback</span> function.</p> </li> 
         </ul> </li> 
        <li> <p>Start the call with the <span class="bold">Call.start</span> method.</p> </li> 
        <li> <p>Set up other actions as dictated by the environment in which your application is deployed.</p> </li> 
       </ul> 
       <p>The sample audio call application invokes a function called <span class="variable">onCallSomeOne</span>, when it receives the callee information. In this <span class="variable">onCallSomeOne</span> function, the sample audio call application does the following:</p> 
       <ul> 
        <li> <p>Sets up a call object named <span class="italic">call</span>.</p> </li> 
        <li> <p>Configures one function called <span class="italic">setEventHandlers</span> which handles the changes to the call states and the media stream states in its <span class="italic">call</span> object.</p> <p>The <span class="italic">setEventHandlers</span> function invokes <span class="italic">callStateChangeHandler</span> for changes in the call state and <span class="italic">mediaStreamEventHandler</span> for media stream or data transfer changes in the call. See <a href="wd_sampleapps.htm#CHDBHJJD">"Sample Audio Call Application"</a> for more information on the <span class="italic">setEventHandlers</span> function.</p> </li> 
        <li> <p>Starts the call using the <span class="bold">start</span> method of the <span class="italic">call</span> object.</p> </li> 
        <li> <p>Sets up the controls which allow the user to hang up or cancel the call.</p> </li> 
        <li> <p>If the user prematurely ends the call, ends the call using the <span class="bold">end</span> method of its <span class="bold">Call</span> object.</p> </li> 
       </ul> 
       <div id="WSEWD190" class="example"> 
        <p class="titleinexample"><a id="BACBDIIH" name="BACBDIIH"></a>Example 4-7 Sample Function to Set Up Call for Caller</p> 
        <pre xml:space="preserve" class="oac_no_warn">
function onCallSomeOne() {

    // Need the caller callee name. Also storing caller.
    <span class="italic">callee</span> = document.getElementById("callee").value;
    <span class="italic">caller</span> = userName;
    console.log ("Name entered is " + callee);
    
    // Check to see if user gave a valid input. Omitted here. See <a href="wd_sampleapps.htm#CHDBHJJD">"Sample Audio Call Application"</a>.
    ... 
    // To call someone, create a Call object first.
    var <span class="italic">call</span> = callPackage.createCall(<span class="italic">callee</span>, <span class="italic">callConfig</span>, <span class="italic">doCallError</span>);
    console.log ("Created the call.");
    console.log (" ");

    if (<span class="italic">call</span> != null) {
        console.log ("Calling setEventHandlers from onCallSomeOne() with call data.");
        console.log (" ");
        setEventHandlers(<span class="italic">call</span>);
        // Then start the call.
        console.log ("In onCallSomeOne(). Starting Call. ");
        <span class="italic">call</span>.start();
        ...
    }
}
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect3" --> 
      <a id="BACEIJCJ" name="BACEIJCJ"></a> 
      <div id="WSEWD191" class="sect3">
       <!-- infolevel="all" infotype="General" --> 
       <h4 class="sect3">Retrieving the Appropriate Authentication Headers</h4> 
       <p>This section applies to your application if it uses an authentication mechanism before allowing users access to its audio call feature.</p> 
       <p>If an authentication handler has been assigned to your application's <span class="bold">Session</span> object and your application starts a call or receives a call, the authentication function assigned to the <span class="bold">AuthHandler.refresh</span> event is called. See <a href="#BACIHDDG">Example 4-3</a>.</p> 
       <p>Set up logic in the callback function assigned to your application's <span class="bold">AuthHandler.refresh</span> event.</p> 
       <p>The sample audio call application uses Representational State Transfer (REST) based authentication. The <span class="italic">refreshAuth</span> function shown in <a href="#BACGCIDF">Example 4-8</a> is for your reference. See <a href="wd_appsecurity.htm#CDDHACBC">"Setting Up Security"</a> for more information on the SERVICE and Traversal Using Relays around Network address translation (TURN) authentication seen in the code below.</p> 
       <div id="WSEWD192" class="example"> 
        <p class="titleinexample"><a id="BACGCIDF" name="BACGCIDF"></a>Example 4-8 Template for the refreshAuth Function()</p> 
        <pre xml:space="preserve" class="oac_no_warn">
function refreshAuth(<span class="italic">authType</span>, <span class="italic">authHeaders</span>) {
    //Set up the response object by calling a function.
    var <span class="italic">authInfo</span> = null;

    if(<span class="italic">authType</span>==wsc.AUTHTYPE.SERVICE){
        //Return JSON object according to the content of the "authHeaders".
        // For the digest authentication implementation, refer to RFC2617.
        <span class="italic">authInfo</span> = getSipAuth(<span class="italic">authHeaders</span>);
 
    } else if(<span class="italic">authType</span>==wsc.AUTHTYPE.TURN){
 
        //Return JSON object in this format:
        // {"iceServers" : [ {"url":"turn:test@&lt;aHost&gt;:&lt;itsPort&gt;", "credential":"nnnn"} ]}.
        <span class="italic">authInfo</span> = getTurnAuth();
    }
    return <span class="italic">authInfo</span>;
};
</pre>
       </div> 
       <!-- class="example" --> 
       <p>If your application uses Digest access authentication, ensure that it sets up the response using the headers in the <span class="bold">authHeaders</span> object it retrieves. For more information on Digest access authentication, see <code><a href="http://www.ietf.org/rfc/rfc2617.txt">http://www.ietf.org/rfc/rfc2617.txt</a></code>.</p> 
       <div id="WSEWD193" class="sect4">
        <!-- infolevel="all" infotype="General" -->
        <a id="sthref30" name="sthref30"></a> 
        <h5 class="sect4">About Digest Access Authentication</h5> 
        <p>If a Session Initiation Protocol (SIP) network does not support an identity mapping between a web identity and a SIP identity, it might choose to challenge the messages from the application using a WWW-authenticate header as stipulated by RFC 2617. On receiving the WWW-authenticate header, WebRTC Session Controller Signaling Engine sends a JavaScript Object Notation (JSON) form of this header to the WebRTC Session Controller JavaScript API library. In turn, the WebRTC Session Controller JavaScript API library invokes the callback function assigned to your application's <span class="bold">AuthHandler.refresh</span> event handler.</p> 
        <p>To provide the appropriate challenge response, do the following in the callback function assigned to your application's <span class="bold">AuthHandler.refresh</span> event handler:</p> 
        <ul> 
         <li> <p>Retrieve the appropriate credentials from the user, using your application-specific logic.</p> </li> 
         <li> <p>Create your application's challenge response in JSON format and constructed, as stipulated by RFC 2617.</p> </li> 
         <li> <p>Return the challenge response to the WebRTC Session Controller JavaScript API library.</p> </li> 
        </ul> 
        <p>This challenge response is used to authenticate your application user with the SIP network.</p> 
        <p><a href="#BACBJEJD">Example 4-9</a> shows a sample <span class="bold">authHeader</span> received by an application that uses Digest authentication. The <span class="bold">authHeader</span> object is in JSON format.</p> 
        <div id="WSEWD194" class="example"> 
         <p class="titleinexample"><a id="BACBJEJD" name="BACBJEJD"></a>Example 4-9 Digest Authentication Header Received by an Application</p> 
         <pre xml:space="preserve" class="oac_no_warn">
{
    "scheme": "Digest",
    "nonce": "a12e8f74-af01-4e74-9714-4d65bae4e024",
    "realm": "example.com",
    "qop": "auth",
    "challenge_code": "407",
    "opaque": "YXBwLTNjOHFlaHR2eGRhcnxiYWNkMTIxMWFmZDlkNmUyMThmZmI0ZDc4ZmY3ZmY1YUAxMC4xODIuMTMuMTh8Mzc3N2E3Nzc0ODYyMGY4",
    "charset": "utf-8",
    "method": "REGISTER",
    "uri": "sip:<span class="italic">&lt;host&gt;</span>:<span class="italic">&lt;port&gt;</span>"
}
</pre>
        </div> 
        <!-- class="example" --> 
        <p>Where:</p> 
        <ul> 
         <li> <p><span class="variable">&lt;host&gt;</span> is the host name for the SIP registrar.</p> </li> 
         <li> <p><span class="variable">&lt;port&gt;</span> is the listening port for the SIP registrar.</p> </li> 
        </ul> 
        <div id="WSEWD195" class="sect4">
         <!-- infolevel="all" infotype="General" -->
         <a id="sthref31" name="sthref31"></a> 
         <h5 class="sect4">Creating the authHeader Object for the Response</h5> 
         <p><a href="#BACCEEJI">Example 4-10</a> shows a sample function used by an application to set up the <span class="italic">authHeaders</span> in its response.</p> 
         <div id="WSEWD196" class="example"> 
          <p class="titleinexample"><a id="BACCEEJI" name="BACCEEJI"></a>Example 4-10 Sample createResponseHeaders Function</p> 
          <pre xml:space="preserve" class="oac_no_warn">
function createResponseHeaders(authHeaders) {
// cnonce is the string provided by the client.
//The application MUST implement the MD5 algorithm.
    var 
        userName = "alice@example.com",
        password = "********",
        realm = authHeaders['realm'],
        method = authHeaders['method'],
        uri = authHeaders['uri'],
        qop = authHeaders['qop'],
        nc = '00000001',
        nonce = authHeaders['nonce'],
        cnonce = "", 
        ha1 = hex_md5(userName + ":" + realm + ":" + password), 
        ha2 = hex_md5(method + ":" + uri),
        response;
 
    if(!qop){
        response = hex_md5(ha1 + ":" + nonce + ":" + ha2);
    } else if(qop=="auth") {
        response = hex_md5(ha1 + ":" + nonce + ":" + nc + ":" + cnonce + ":" + qop + ":" + ha2);
    }
           
    // add client calculated header to the headers.
    authHeaders['username'] = username;
    authHeaders['cnonce'] = cnonce;
    authHeaders['response'] = response;
    authHeaders['nc'] = nc;
    return authHeaders;
};
</pre>
         </div> 
         <!-- class="example" -->
        </div> 
        <!-- class="sect4" -->
       </div> 
       <!-- class="sect4" -->
      </div> 
      <!-- class="sect3" --> 
      <a id="BACDFBEG" name="BACDFBEG"></a> 
      <div id="WSEWD197" class="sect3">
       <!-- infolevel="all" infotype="General" --> 
       <h4 class="sect3">Setting Up the Event Handler for Call State Changes</h4> 
       <p>When your application's call state changes, the WebRTC Session Controller JavaScript API Library invokes your application's <span class="bold">Call.onSessionStateChange</span> event handler. The new state for the call is provided as input to your application.</p> 
       <p>The many states of a call, such as <span class="bold">ESTABLISHED</span>, <span class="bold">ENDED</span>, and <span class="bold">FAILED</span> are defined as constants in the <span class="bold">wsc.CALLSTATE</span> enumerator. See <span class="italic">WebRTC Session Controller JavaScript API Reference</span> for more information.</p> 
       <p>Use as many of the constants in <span class="bold">wsc.CALLSTATE</span> to meet your application's needs. Specify the actions your application must take for each of the state changes you include in the callback function you assigned to your application's <span class="bold">Call.onCallStateChange</span> event handler, as described in <a href="#BACCCJDA">"Starting a Call From Your Application"</a>.</p> 
       <p><a href="#BACBFFIH">Example 4-11</a> shows how the sample audio call application handles call state changes. It sets up a callback function called <span class="italic">callStateChangeHandler</span> to monitor for three call states, <span class="bold">wsc.CALLSTATE.ESTABLISHED</span>, <span class="bold">wsc.CALLSTATE.ENDED</span>, and <span class="bold">wsc.CALLSTATE.FAILED</span>. When the sample audio call application's callback function in invoked with <span class="bold">wsc.CALLSTATE.ESTABLISHED</span> as the new call state, it calls a function called <span class="italic">callMonitor</span> to monitor the call. See <a href="#BACDAEFG">Example 4-14</a>. For the remaining two states, this callback function merely displays the user interface required to place a call.</p> 
       <div id="WSEWD198" class="example"> 
        <p class="titleinexample"><a id="BACBFFIH" name="BACBFFIH"></a>Example 4-11 Sample Call State Change Handler</p> 
        <pre xml:space="preserve" class="oac_no_warn">
function callStateChangeHandler(<span class="italic">callObj</span>, <span class="italic">callState</span>) {
    console.log (" In callStateChangeHandler().");
    console.log("callstate : " + JSON.stringify(callState));
    if (<span class="italic">callState</span>.state == wsc.CALLSTATE.ESTABLISHED) {
        console.log (" Call is established. Calling callMonitor. ");
        console.log (" ");
        callMonitor(<span class="italic">callObj</span>);
    } else if (<span class="italic">callState</span>.state == wsc.CALLSTATE.ENDED) {
        console.log (" Call ended. Displaying controls again.");
        console.log (" ");
        displayInitialControls();
    } else if (<span class="italic">callState</span>.state == wsc.CALLSTATE.FAILED) {
        console.log (" Call failed. Displaying controls again.");
        console.log (" ");
        displayInitialControls();
    }
}
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect3" --> 
      <a id="BACJHEAJ" name="BACJHEAJ"></a> 
      <div id="WSEWD199" class="sect3">
       <!-- infolevel="all" infotype="General" --> 
       <h4 class="sect3">Setting Up the Event Handler for the Media Streams</h4> 
       <p>When there is a change in the state of the local or remote media stream, the WebRTC Session Controller JavaScript API Library invokes your application's <span class="bold">Call.onMediaStreamEvent</span> event handler. The new state for the media stream is provided as input to your application.</p> 
       <p>The <span class="bold">wsc.MEDIASTREAMEVENT</span> enumerator defines the states of the local or remote media stream as <span class="bold">LOCAL_STREAM_ADDED</span>, <span class="bold">REMOTE_STREAM_REMOVED</span>, <span class="bold">LOCAL _STREAM_ERROR</span>, and so on. See <span class="italic">WebRTC Session Controller JavaScript API Reference</span> for more information.</p> 
       <p>Use as many of the constants in <span class="bold">wsc.MEDIASTREAMEVENT</span> to meet your application's needs. Specify the actions your application must take for each of the state changes you include in the callback function you assigned to your application's <span class="bold">Call.onMediaStreamEvent</span> event handler. Whenever this callback function is invoked with a new state for the media stream, your application logic should perform the action required for the new state.</p> 
       <p><a href="#BACBFFIH">Example 4-11</a> shows how the sample audio call application handles media stream state changes using a callback function called <span class="italic">mediaStreamEventHandler</span>.</p> 
       <div id="WSEWD200" class="example"> 
        <p class="titleinexample"><a id="BACFDIHJ" name="BACFDIHJ"></a>Example 4-12 Sample Media Stream Event Handler</p> 
        <pre xml:space="preserve" class="oac_no_warn">
// This event handler is invoked when a  media stream event is fired.
// Attach media stream to HTML5 audio element.
function mediaStreamEventHandler(<span class="italic">mediaState</span>, <span class="italic">stream</span>) {
    console.log (" In mediaStreamEventHandler.");
    console.log("mediastate : " + <span class="italic">mediaState</span>);
    console.log (" ");
 
    if (<span class="italic">mediaState</span> == wsc.MEDIASTREAMEVENT.LOCAL_STREAM_ADDED) {
        attachMediaStream(document.getElementById("selfAudio"), <span class="italic">stream</span>);
    } else if (<span class="italic">mediaState</span> == wsc.MEDIASTREAMEVENT.REMOTE_STREAM_ADDED) {
        attachMediaStream(document.getElementById("remoteAudio"), <span class="italic">stream</span>);
    }
}
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect3" --> 
      <div id="WSEWD201" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref32" name="sthref32"></a> 
       <h4 class="sect3">Current Stage in the Development of the Audio Call Feature in Your Application</h4> 
       <p>At this stage in the development of the audio call feature in your application:</p> 
       <ul> 
        <li> <p>The general elements required for audio calls are set.</p> </li> 
        <li> <p>Your application can obtain the callee information.</p> </li> 
        <li> <p>Your application can retrieve the call information and start a call.</p> </li> 
        <li> <p>The application logic for the following functions is implemented:</p> 
         <ul> 
          <li> <p><span class="variable">errorCallback</span> function invoked when the call is not created</p> </li> 
          <li> <p>The callback function assigned to the <span class="bold">Call.onCallStateChange</span> event handler</p> </li> 
          <li> <p>The callback function assigned to the <span class="bold">Call.onMediaStreamEvent</span> event handler</p> </li> 
          <li> <p>The callback function assigned to the <span class="bold">Call.onDataTransfer</span> event handler</p> </li> 
          <li> <p>The callback function assigned to the <span class="bold">Call.onUpdate</span> event handler</p> </li> 
         </ul> </li> 
       </ul> 
       <p>You can now provide the logic to handle an incoming call.</p> 
      </div> 
      <!-- class="sect3" --> 
      <div id="WSEWD202" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref33" name="sthref33"></a> 
       <h4 class="sect3">How the Sample Audio Call Application Starts a Call</h4> 
       <p><a href="#BACDEGAH">Table 4-2</a> reports on the sample audio call's actions in setting up a call session. It describes the events that occur on the sample audio call application page, the actions taken by the sample audio call application, and the messages logged by the <span class="bold">console.log</span> method for this segment of the application code. The focus of actions for this part of the application is the caller.</p> 
       <div id="WSEWD203" class="tblruleformalwide"> 
        <p class="titleintable"><a id="sthref34" name="sthref34"></a><a id="BACDEGAH" name="BACDEGAH"></a>Table 4-2 Sample Audio Call Application Actions in Setting Up a Call</p> 
        <table class="RuleFormalWide" title=" Sample Audio Call Application Actions in Setting Up a Call " summary="The console Log" dir="ltr" border="1" width="100%" frame="border" rules="all" cellpadding="3" cellspacing="0"> 
         <colgroup>
          <col width="20%"> 
          <col width="*"> 
          <col width="36%"> 
         </colgroup>
         <thead> 
          <tr align="left" valign="top"> 
           <th align="left" valign="bottom" id="r1c1-t4">Sample Audio Call Application Page Events</th> 
           <th align="left" valign="bottom" id="r1c2-t4">Actions Taken by the Sample Audio Call Application</th> 
           <th align="left" valign="bottom" id="r1c3-t4">Console Log for the Caller (bob1)</th> 
          </tr> 
         </thead> 
         <tbody> 
          <tr align="left" valign="top"> 
           <td align="left" id="r2c1-t4" headers="r1c1-t4"> <p>Signaling Engine asks the user for permission to use the microphone.</p> <p>The call workflow starts.</p> </td> 
           <td align="left" headers="r2c1-t4 r1c2-t4"> <p>For the caller (<span class="italic">bob1</span>) side, the application does the following in the <span class="italic">onCallSomeOne()</span> callback function:</p> 
            <ul> 
             <li> <p>Creates a <span class="italic">call</span> object with the callee's id, the configuration for calls in this browser, and the necessary call error handler function.</p> </li> 
             <li> <p>Sets up the general event handler to handle changes in the call.</p> </li> 
             <li> <p>Issues the command <span class="italic">call</span><span class="bold">.start</span>.</p> </li> 
             <li> <p>Enables the controls to cancel the call before it is set up.</p> </li> 
             <li> <p>Defines the call and media state change handlers.</p> </li> 
            </ul> <p>The browser requests the user to allow access to audio media. If the user gives permission, the local media stream is added.</p> </td> 
           <td align="left" headers="r2c1-t4 r1c3-t4"> <pre xml:space="preserve" class="oac_no_warn">
In onCallSomeOne()
Name entered is bob2 
Adding string to name 
Caller, bob1@example.com, wants to call bob2@example.com, the Callee.
Creating call object to call bob2@example.com
 Created the call.
 
Calling setEventHandlers from onCallSomeOne() with call data.
In setEventHandlers
 
In onCallSomeOne(). Starting Call.
Enabled bob1@example.com to cancel call.
 
In mediaStreamEventHandler.
mediastate : LOCAL_STREAM_ADDED 
 
In callStateChangeHandler().
callstate : {"state":"STARTED","status":
{"code":null,"reason":"start call"}}
In callStateChangeHandler()
callstate : {"state":"RESPONSED","status":
{"code":180,"reason":"Ringing"}}
</pre></td> 
          </tr> 
         </tbody> 
        </table> 
        <br>
       </div> 
       <!-- class="tblruleformalwide" -->
      </div> 
      <!-- class="sect3" -->
     </div> 
     <!-- class="sect2" --> 
     <a id="BACCGDIG" name="BACCGDIG"></a> 
     <div id="WSEWD204" class="sect2">
      <!-- infolevel="all" infotype="General" --> 
      <h3 class="sect2">Enabling Your Application Users to Receive Calls</h3> 
      <p>The focus of the actions taken in this section is the callee.</p> 
      <p>To enable application users to receive calls, do the following:</p> 
      <ol> 
       <li> <p>Provide the logic to respond to the callee's actions with respect to the incoming call. See <a href="#BACJBFFB">"Responding to Your User's Actions on an Incoming Call"</a>.</p> </li> 
       <li> <p>Verify that you have defined the logic for the following tasks with respect to the callee:</p> 
        <ul> 
         <li> <p><a href="#BACDFBEG">Setting Up the Event Handler for Call State Changes</a></p> </li> 
         <li> <p><a href="#BACJHEAJ">Setting Up the Event Handler for the Media Streams</a></p> </li> 
        </ul> </li> 
      </ol> 
      <a id="BACJBFFB" name="BACJBFFB"></a> 
      <div id="WSEWD205" class="sect3">
       <!-- infolevel="all" infotype="General" --> 
       <h4 class="sect3">Responding to Your User's Actions on an Incoming Call</h4> 
       <p>When a user is logged in to your application and WebRTC Session Controller Signaling Engine receives a call for the user, the WebRTC Session Controller JavaScript API library invokes the <span class="bold">CallPackage.onIncomingCall</span> event handler in your application. It sends the incoming call object and the call configuration for that incoming call object as parameters to the <span class="bold">CallPackage.onIncomingCall</span> event handler.</p> 
       <p>Define the actions to process the incoming call in the callback function assigned to the <span class="bold">onIncomingCall</span> event handler in the following way:</p> 
       <ul> 
        <li> <p>Provide the interface and logic necessary for the callee to accept or decline the call.</p> </li> 
        <li> <p>Provide logic for the following events in association with the incoming call object:</p> 
         <ul> 
          <li> <p>User accepts the call. Run the <span class="bold">accept</span> method for the incoming call object. This will return the success response to the caller.</p> </li> 
          <li> <p>User declines the call. Run the <span class="bold">decline</span> method for the incoming call object. This will return the failure response to the caller.</p> </li> 
         </ul> </li> 
        <li> <p>Assign the callback functions to the event handlers of the incoming call object. These should already have been defined earlier. See <a href="#BACCCJDA">"Starting a Call From Your Application"</a>.</p> </li> 
       </ul> 
       <p><a href="#BACFGFAJ">Example 4-13</a> shows the <span class="italic">onIncomingCall</span> callback function used by the sample audio call application:</p> 
       <div class="infoboxnote"> 
        <p class="notep1">Note:</p> 
        <a href="#BACFGFAJ">Example 4-13</a> uses the simplest set of controls embedded in the 
        <span class="italic">onIncomingCall()</span> function to inform the user that there is an incoming call. 
        <p>You can set up your application to filter the information in the remote call object and its configuration to determine how to handle the incoming call, prior to informing the user about the call.</p> 
       </div> 
       <div id="WSEWD206" class="example"> 
        <p class="titleinexample"><a id="BACFGFAJ" name="BACFGFAJ"></a>Example 4-13 Sample onIncomingCall Function</p> 
        <pre xml:space="preserve" class="oac_no_warn">
function onIncomingCall(callObj, callConfig) {

// Draw two buttons for users to accept or decline the incoming call.
// Attach onclick event handlers to these two buttons.
    console.log ("In onIncomingCall(). Drawing up Control buttons to accept or decline the call.");
    var <span class="italic">controls</span> = "&lt;input type='button' name='acceptButton' id='btnAccept' value='Accept "
    + callObj.getCaller()
    + " Incoming Audio Call' onclick=''/&gt;&lt;input type='button' name='declineButton' id='btnDecline'  value='Decline Incoming Audio Call' onclick=''/&gt;"
    + "&lt;br&gt;&lt;br&gt;&lt;hr&gt;";
    setControls(<span class="italic">controls</span>);

    document.getElementById("btnAccept").onclick = function() {
        // User accepted the call.                                      

        //  Store the caller and callee names.
        <span class="italic">callee</span> = userName;
        <span class="italic">caller</span> = <span class="italic">callObj</span>.getCaller;
        console.log (<span class="italic">callee</span> + " accepted the call from caller " + <span class="italic">caller</span>);
        console.log (" ");

        // Send the message back.
        <span class="italic">callObj</span>.accept(<span class="italic">callConfig</span>);
    }
    document.getElementById("btnDecline").onclick = function() {
        // User declined the call. Send a message back. 

        // Get the caller name.
        <span class="italic">callee</span> = userName;
        <span class="italic">caller</span> = <span class="italic">callObj</span>.getCaller;
        console.log (<span class="italic">callee</span> + " declined the call from caller, " + <span class="italic">caller</span>);
        console.log (" ");

        // Send the message back.
        <span class="italic">callObj</span>.decline();
    }

    // User accepted the call. Bind the event handlers for the call and media stream.
    console.log ("Calling setEventHandlers from onIncomingCall() with remote call object ");
    setEventHandlers(<span class="italic">callObj</span>);
}
</pre>
       </div> 
       <!-- class="example" -->
      </div> 
      <!-- class="sect3" --> 
      <div id="WSEWD207" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref35" name="sthref35"></a> 
       <h4 class="sect3">Current Stage in the Development of the Audio Call Feature in Your Application</h4> 
       <p>At this stage in the development of the audio call feature in your application:</p> 
       <ul> 
        <li> <p>The general elements required for audio calls are set.</p> </li> 
        <li> <p>Your application can obtain the callee information.</p> </li> 
        <li> <p>Your application can retrieve the call information and start a call.</p> </li> 
        <li> <p>Your application can alert the user about an incoming call and respond appropriately to the user accepting or declining the incoming call.</p> </li> 
        <li> <p>The application logic for the following functions is implemented:</p> 
         <ul> 
          <li> <p>Callback functions assigned to the <span class="bold">Session</span> Object's event handlers</p> </li> 
          <li> <p>The success and error callback functions invoked when a <span class="bold">Session</span> object is not created</p> </li> 
          <li> <p>Callback functions assigned to the <span class="bold">CallPackage</span> Object's event handlers</p> </li> 
          <li> <p>Callback functions assigned to the <span class="bold">Call</span> Object's event handlers</p> </li> 
          <li> <p>The error callback function invoked when a <span class="bold">Call</span> object is not created</p> </li> 
         </ul> </li> 
       </ul> 
      </div> 
      <!-- class="sect3" --> 
      <div id="WSEWD208" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref36" name="sthref36"></a> 
       <h4 class="sect3">How the Sample Audio Call Application Handles Incoming Calls</h4> 
       <p><a href="#BACHFJGH">Table 4-3</a> reports on the sample audio call's actions in enabling a user to receive a call. It describes the events that occur on the sample audio call application page, the actions taken by the sample audio call application, and the messages logged by the <span class="bold">console.log</span> method for this segment of the application code. The focus here is on the callee.</p> 
       <div id="WSEWD209" class="tblruleformalwide"> 
        <p class="titleintable"><a id="sthref37" name="sthref37"></a><a id="BACHFJGH" name="BACHFJGH"></a>Table 4-3 A breakdown of the Application Actions Needed to Receive a Call</p> 
        <table class="RuleFormalWide" title="A breakdown of the Application Actions Needed to Receive a Call " summary="The console Log" dir="ltr" border="1" width="100%" frame="border" rules="all" cellpadding="3" cellspacing="0"> 
         <colgroup>
          <col width="20%"> 
          <col width="*"> 
          <col width="36%"> 
         </colgroup>
         <thead> 
          <tr align="left" valign="top"> 
           <th align="left" valign="bottom" id="r1c1-t6">Sample Audio Call Application Page Events</th> 
           <th align="left" valign="bottom" id="r1c2-t6">Actions Taken by the Sample Audio Call Application</th> 
           <th align="left" valign="bottom" id="r1c3-t6">Console Log for the Callee (bob2)</th> 
          </tr> 
         </thead> 
         <tbody> 
          <tr align="left" valign="top"> 
           <td align="left" id="r2c1-t6" headers="r1c1-t6"> <p>A call is received.</p> <p>If the user accepts the call, Signaling Engine asks the user for permission to use the microphone.</p> <p><span class="italic">When permission is given, the local and remote streams are added.</span></p> </td> 
           <td align="left" headers="r2c1-t6 r1c2-t6"> <p>For the callee (<span class="italic">bob2</span>) side:</p> <p>Signaling Engine, on receiving the call invitation from the caller, triggers the function configured in the application to handle incoming calls.</p> <p>This is the <span class="italic">call</span> object's <span class="bold">onIncomingCall()</span> callback function that was assigned in <a href="#BACBADAJ">Example 4-4</a>.</p> <p>The application does the following:</p> 
            <ul> 
             <li> <p>Sets up the actions in the callback function to handle changes in the call.</p> </li> 
             <li> <p>Displays control buttons to enable the callee to accept or decline the call.</p> </li> 
            </ul> </td> 
           <td align="left" headers="r2c1-t6 r1c3-t6"> <pre xml:space="preserve" class="oac_no_warn">
In onIncomingCall(). Drawing up Control buttons to accept or deny the call. 
Calling setEventHandlers from onIncomingCall() with callObj 
In setEventHandlers
  
User Accepted the call.
In callStateChangeHandler(). 
callstate : {"state":"STARTED","status":
{"code":null,"reason":"receive call"}}
Invoking getTurnAuthInfo 
 In mediaStreamEventHandler. 
mediastate : LOCAL_STREAM_ADDED
  
 In mediaStreamEventHandler. 
mediastate : REMOTE_STREAM_ADDED 
</pre></td> 
          </tr> 
         </tbody> 
        </table> 
        <br>
       </div> 
       <!-- class="tblruleformalwide" -->
      </div> 
      <!-- class="sect3" -->
     </div> 
     <!-- class="sect2" --> 
     <a id="BACEGCHE" name="BACEGCHE"></a> 
     <div id="WSEWD210" class="sect2">
      <!-- infolevel="all" infotype="General" --> 
      <h3 class="sect2">How a Call is Established in the Sample Audio Call Application</h3> 
      <p>This section uses the sample audio call application as an example to describe what happens during the interval between the caller and callee requesting and accepting the call and when the call actually starts.</p> 
      <p>At the start of the flow, the sample audio call application on the caller's side sends the START or INVITE message to WebRTC Session Controller Signaling Engine which routes the message through the network to the receiving end point. For more information on this, please see <span class="italic">WebRTC Session Controller</span> <span class="italic">Extension Developer's Guide</span>.</p> 
      <p>At appropriate points in the message flow, the caller and callee are requested to allow access to the audio element in the browser.</p> 
      <p>The log output taken from the console when the sample audio call application was run is shown in <a href="#BACEGGIE">Table 4-4</a>. Note the log output from the call state and media state transfer event handlers. All the action is done by Signaling Engine and the sample audio call application merely receives the final state (ESTABLISHED or FAILED).</p> 
      <div id="WSEWD211" class="tblruleformalwide"> 
       <p class="titleintable"><a id="sthref38" name="sthref38"></a><a id="BACEGGIE" name="BACEGGIE"></a>Table 4-4 A Log of the Call Flow</p> 
       <table class="RuleFormalWide" title="A Log of the Call Flow" summary="The console Log" dir="ltr" border="1" width="100%" frame="border" rules="all" cellpadding="3" cellspacing="0"> 
        <colgroup>
         <col width="20%"> 
         <col width="24%"> 
         <col width="*"> 
         <col width="28%"> 
        </colgroup>
        <thead> 
         <tr align="left" valign="top"> 
          <th align="left" valign="bottom" id="r1c1-t7">Sample Audio Call Application Page Events</th> 
          <th align="left" valign="bottom" id="r1c2-t7">Actions Taken by the Sample Audio Call Application</th> 
          <th align="left" valign="bottom" id="r1c3-t7">Console Log for the Caller (bob1)</th> 
          <th align="left" valign="bottom" id="r1c4-t7">Console Log for the Callee (bob2)</th> 
         </tr> 
        </thead> 
        <tbody> 
         <tr align="left" valign="top"> 
          <td align="left" id="r2c1-t7" headers="r1c1-t7"> <p>(Activity that takes place behind the browser activity)</p> <p><span class="italic">For the caller, the media state changes to include the remote media stream only after the call is established.</span></p> </td> 
          <td align="left" headers="r2c1-t7 r1c2-t7"> <p>The console log describes the flow of the call to the point where the two parties are connected and can hear each other.</p> <p>The application displays the control button enabling either party to conclude the call.</p> </td> 
          <td align="left" headers="r2c1-t7 r1c3-t7"> <pre xml:space="preserve" class="oac_no_warn">
In callStateChangeHandler(). 
callstate : {"state":"RESPONSED","status":
{"code":200,"reason":"got success response"}}
In callStateChangeHandler().    
callstate : {"state":"ESTABLISHED","status":
{"code":null,"reason":"sent complete"}}
</pre></td> 
          <td align="left" headers="r2c1-t7 r1c4-t7"> <pre xml:space="preserve" class="oac_no_warn">
 In callStateChangeHandler(). 
callstate : {"state":"RESPONSED","status":
{"code":200,"reason":"sent success response"}}

 In callStateChangeHandler(). 
callstate : {"state":"ESTABLISHED","status":
{"code":null,"reason":"got complete"}}
</pre></td> 
         </tr> 
        </tbody> 
       </table> 
       <br>
      </div> 
      <!-- class="tblruleformalwide" -->
     </div> 
     <!-- class="sect2" --> 
     <a id="BACGEAEE" name="BACGEAEE"></a> 
     <div id="WSEWD212" class="sect2">
      <!-- infolevel="all" infotype="General" --> 
      <h3 class="sect2">Monitoring the Call</h3> 
      <p>The call is established when the callee accepts the call. However, your application needs to provide some way for both parties to end the call.</p> 
      <div class="infoboxnote"> 
       <p class="notep1">Note:</p> A call can be ended by either party (caller/callee). 
       <p>When a call is ended by one party, the other party will receive a message from the browser that the call has ended and this ENDED state will trigger the message stream event handler to release the local media stream.</p> 
       <p>See the <span class="bold">Console Log for the Caller</span> and <span class="bold">Console Log for the Callee</span> columns in <a href="#BACFCIEH">Table 4-6</a>.</p> 
      </div> 
      <p>To monitor the call and take action, do the following in your application:</p> 
      <ul> 
       <li> <p>Display the user interface necessary for the user to end the call.</p> </li> 
       <li> <p>Provide the logic for the caller or the callee to end the call.</p> </li> 
       <li> <p>Take appropriate actions for the following events:</p> 
        <ul> 
         <li> <p>A user actively ends the call.</p> </li> 
         <li> <p>The other party ends the call.</p> </li> 
        </ul> </li> 
      </ul> 
      <p>As shown in <a href="#BACDAEFG">Example 4-14</a>, the sample audio call application does the following:</p> 
      <ul> 
       <li> <p>Displays two control buttons for the users: "Hang Up" and "Logout".</p> </li> 
       <li> <p>Responds to the selection:</p> 
        <ul> 
         <li> <p>If <span class="italic">Hang Up</span> is clicked, ends the call (which ends the call session and releases the call resources).</p> </li> 
         <li> <p>If <span class="italic">Logout</span> is selected, ends the session (which ends the call and releases the session's resources).</p> </li> 
        </ul> </li> 
      </ul> 
      <div id="WSEWD213" class="example"> 
       <p class="titleinexample"><a id="BACDAEFG" name="BACDAEFG"></a>Example 4-14 Monitoring the Established Call</p> 
       <pre xml:space="preserve" class="oac_no_warn">
function callMonitor(<span class="italic">callObj</span>) {
    console.log ("In callMonitor");
    console.log ("Monitoring the call. Setting up controls to Hang Up.");
    console.log (" ");

    // Draw 2 buttons.
    // "Hang Up" button ends the call, but user stays on the application page.
    // "Logout" button ends the session, and user leaves the application.
    // For the complete code, see <a href="wd_sampleapps.htm#CHDBHJJD">"Sample Audio Call Application"</a>.
    ...
    document.getElementById("btnHangup").onclick = function() {
        ....
        <span class="italic">callObj</span>.end();
    };
}
</pre>
      </div> 
      <!-- class="example" --> 
      <div id="WSEWD214" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref39" name="sthref39"></a> 
       <h4 class="sect3">How the Sample Audio Call Application Monitors a Call</h4> 
       <p><a href="#BACJCHJI">Table 4-5</a> reports on the sample audio call application's actions in monitoring a call session. It describes the events that occur on the sample audio call application page, the actions taken by the sample audio call application, and the messages logged by the <span class="bold">console.log</span> method for this segment of the application code.</p> 
       <div id="WSEWD215" class="tblruleformalwide"> 
        <p class="titleintable"><a id="sthref40" name="sthref40"></a><a id="BACJCHJI" name="BACJCHJI"></a>Table 4-5 How the Sample Audio Call Application Monitors the Call</p> 
        <table class="RuleFormalWide" title="How the Sample Audio Call Application Monitors the Call" summary="The console Log" dir="ltr" border="1" width="100%" frame="border" rules="all" cellpadding="3" cellspacing="0"> 
         <colgroup>
          <col width="20%"> 
          <col width="24%"> 
          <col width="*"> 
          <col width="28%"> 
         </colgroup>
         <thead> 
          <tr align="left" valign="top"> 
           <th align="left" valign="bottom" id="r1c1-t9">Sample Audio Call Application Page Events</th> 
           <th align="left" valign="bottom" id="r1c2-t9">Actions Taken by the Sample Audio Call Application</th> 
           <th align="left" valign="bottom" id="r1c3-t9">Console Log for the Caller (bob1)</th> 
           <th align="left" valign="bottom" id="r1c4-t9">Console Log for the Callee (bob2)</th> 
          </tr> 
         </thead> 
         <tbody> 
          <tr align="left" valign="top"> 
           <td align="left" id="r2c1-t9" headers="r1c1-t9"> <p>The remote stream is added for the caller.</p> <p>The call takes place.</p> <p>Control buttons are displayed to enable either party to end the call.</p> </td> 
           <td align="left" headers="r2c1-t9 r1c2-t9"> <p>When the call state is ESTABLISHED, the application does the following on the caller's (<span class="italic">bob1</span>) side:</p> 
            <ul> 
             <li> <p>Sets up the controls to enable the caller to end the call.</p> </li> 
             <li> <p>Adds the remote media stream enabling the caller to hear the "Hello?"</p> </li> 
            </ul> <p>On the callee's (<span class="italic">bob2</span>) side:</p> <p>Sets up the controls to enable the callee to end the call.</p> </td> 
           <td align="left" headers="r2c1-t9 r1c3-t9"> <pre xml:space="preserve" class="oac_no_warn">
In callStateChangeHandler(). 
callstate : {"state":"ESTABLISHED","status":
{"code":null,"reason":"sent complete"}}
Call is established. Calling callMonitor.

In callMonitor.
Monitoring the call. Setting up controls to Hang Up.  
 In mediaStreamEventHandler.  
mediastate : REMOTE_STREAM_ADDED
</pre></td> 
           <td align="left" headers="r2c1-t9 r1c4-t9"> <pre xml:space="preserve" class="oac_no_warn">
 In callStateChangeHandler(). 
callstate : {"state":"ESTABLISHED","status":
{"code":null,"reason":"got complete"}}
 Calling callMonitor.

Call established. Setting up controls to Hang Up.  
</pre></td> 
          </tr> 
         </tbody> 
        </table> 
        <br>
       </div> 
       <!-- class="tblruleformalwide" -->
      </div> 
      <!-- class="sect3" -->
     </div> 
     <!-- class="sect2" --> 
     <a id="BACBIADE" name="BACBIADE"></a> 
     <div id="WSEWD216" class="sect2">
      <!-- infolevel="all" infotype="General" --> 
      <h3 class="sect2">Ending the Call</h3> 
      <p>When either the callee or caller ends the call, the call state goes to ENDED which triggers the browser to stop the call. The local media stream is removed from each browser application.</p> 
      <p>Set up the next action according to your application's requirements.</p> 
      <p>In the sample audio call application as shown in <a href="#BACBFFIH">Example 4-11</a>, the application calls the <span class="italic">displayInitialControls()</span> function which renders the controls to make calls.</p> 
      <p><a href="#BACFCIEH">Table 4-6</a> reports on the sample audio call application's actions in ending a call session. It describes the events that occur on the sample audio call application page, the actions taken by the sample audio call application, and the messages logged by the <span class="bold">console.log</span> method for this segment of the application code.</p> 
      <div id="WSEWD217" class="tblruleformalwide"> 
       <p class="titleintable"><a id="sthref41" name="sthref41"></a><a id="BACFCIEH" name="BACFCIEH"></a>Table 4-6 A Breakdown of How the Sample Audio Call Ends</p> 
       <table class="RuleFormalWide" title="A Breakdown of How the Sample Audio Call Ends" summary="The console Log" dir="ltr" border="1" width="100%" frame="border" rules="all" cellpadding="3" cellspacing="0"> 
        <colgroup>
         <col width="20%"> 
         <col width="24%"> 
         <col width="*"> 
         <col width="28%"> 
        </colgroup>
        <thead> 
         <tr align="left" valign="top"> 
          <th align="left" valign="bottom" id="r1c1-t10">Sample Audio Call Application Page Events</th> 
          <th align="left" valign="bottom" id="r1c2-t10">Actions Taken by the Sample Audio Call Application</th> 
          <th align="left" valign="bottom" id="r1c3-t10">Console Log for the Caller (bob1)</th> 
          <th align="left" valign="bottom" id="r1c4-t10">Console Log for the Callee (bob2)</th> 
         </tr> 
        </thead> 
        <tbody> 
         <tr align="left" valign="top"> 
          <td align="left" id="r2c1-t10" headers="r1c1-t10"> <p>One or the other party can end the call.</p> <p><span class="italic">In this example, bob1, the caller, ended the call.</span></p> <p><span class="italic">The console log for the caller from the callMonitor() function specifies who ended the call.</span></p> <p><span class="italic">At this point note the differences in the console log entries for the caller and callee.</span></p> <p>The example code also once again displays the input buttons for the user to make a call.</p> </td> 
          <td align="left" headers="r2c1-t10 r1c2-t10"> 
           <ul> 
            <li> <p>Either the caller or the callee clicks the control button to end the call.</p> </li> 
            <li> <p>The state of the call changes to ENDED.</p> </li> 
            <li> <p>The local media stream for the browser is disconnected.</p> </li> 
            <li> <p>At this point, your application's logic may vary.</p> </li> 
            <li> <p>In this example, the controls to make a call are displayed once again.</p> </li> 
           </ul> </td> 
          <td align="left" headers="r2c1-t10 r1c3-t10"> <pre xml:space="preserve" class="oac_no_warn">
In callMonitor.
Caller, bob1@example.com, clicked the Hang Up button.
Calling call.end now.
 
In callStateChangeHandler(). 
callstate : {"state":"ENDED","status":
{"code":null,"reason":"stop call"}}
 Call ended. Displaying controls again.
 
In displayControls().
 Waiting for Callee Input. 
 
In mediaStreamEventHandler. 
mediastate : LOCAL_STREAM_REMOVED 
</pre></td> 
          <td align="left" headers="r2c1-t10 r1c4-t10"> <pre xml:space="preserve" class="oac_no_warn">
In callStateChangeHandler().
callstate : {"state":"ENDED","status":
{"code":null,"reason":"stop call"}}
 Call ended. Displaying controls again.
 
In displayControls().
 Waiting for Callee Input. 
 
 In mediaStreamEventHandler.
mediastate : LOCAL_STREAM_REMOVED
</pre></td> 
         </tr> 
        </tbody> 
       </table> 
       <br>
      </div> 
      <!-- class="tblruleformalwide" --> 
      <div id="WSEWD218" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref42" name="sthref42"></a> 
       <h4 class="sect3">Current Stage in the Development of the Audio Call Feature in Your Application</h4> 
       <p>At this stage in the development of the audio call feature in your application:</p> 
       <ul> 
        <li> <p>The general elements required for audio calls are set.</p> </li> 
        <li> <p>Your application can obtain the callee information.</p> </li> 
        <li> <p>Your application can retrieve the call information and start a call.</p> </li> 
        <li> <p>Your application can alert the user about an incoming call and respond appropriately to the user accepting or declining the incoming call.</p> </li> 
        <li> <p>The application logic for the following functions should be implemented:</p> 
         <ul> 
          <li> <p>Callback functions assigned to the <span class="bold">Session</span> Object's event handlers</p> </li> 
          <li> <p>The success and error callback functions invoked when a <span class="bold">Session</span> object is not created</p> </li> 
          <li> <p>Callback functions assigned to the <span class="bold">CallPackage</span> Object's event handlers</p> </li> 
          <li> <p>Callback functions assigned to the <span class="bold">Call</span> Object's event handlers</p> </li> 
          <li> <p>The error callback function invoked when a <span class="bold">Call</span> object is not created</p> </li> 
         </ul> </li> 
        <li> <p>Your application can monitor the established call, take action as necessary when there is a change to the call in any way.</p> </li> 
        <li> <p>When one user ends the call, our application can close the call connection successfully.</p> </li> 
       </ul> 
      </div> 
      <!-- class="sect3" -->
     </div> 
     <!-- class="sect2" --> 
     <a id="BACHBJBI" name="BACHBJBI"></a> 
     <div id="WSEWD219" class="sect2"> 
      <h3 class="sect2">Closing the Session When the User Logs Out</h3> 
      <p>The <span class="bold">close()</span> method of the <span class="bold">Session</span> API is used to close a session with WebRTC Session Controller Signaling Engine. The syntax is:</p> 
      <pre xml:space="preserve" class="oac_no_warn">
wscSession.close();
</pre> 
      <p>Set up the logic to close the session according to your application's requirements.</p> 
      <p>In the sample audio call application, when the user clicks the Logout button, the application calls the <span class="italic">logout</span> function to close the session as shown in <a href="#BACHEJBA">Example 4-15</a>. Additionally, the user is sent back to the location specified in <span class="bold">logoutUri</span> (which was defined in <a href="#BACIJAEG">Example 4-1</a> at the start of this sample code.</p> 
      <div id="WSEWD220" class="example"> 
       <p class="titleinexample"><a id="BACHEJBA" name="BACHEJBA"></a>Example 4-15 Sample Logout Function</p> 
       <pre xml:space="preserve" class="oac_no_warn">
function logout() {
    if (wscSession) {
        wscSession.close();
    }
    // Send the user back to where he came from.
    window.location.href = logoutUri;
}
</pre>
      </div> 
      <!-- class="example" --> 
      <p>In your environment, the call feature may be one of the many features of your application. For this example, and at this point, the sample audio call application has completed its task. All that remains is to provide the closing entries for the HTML element tags.</p> 
      <p>The code for the sample audio call application discussed in this chapter can be seen under <a href="wd_sampleapps.htm#CHDBHJJD">"Sample Audio Call Application"</a>.</p> 
     </div> 
     <!-- class="sect2" -->
    </div> 
    <!-- class="sect1" --> 
    <a id="BACGABAC" name="BACGABAC"></a> 
    <div id="WSEWD221" class="sect1">
     <!-- infolevel="all" infotype="General" --> 
     <h2 class="sect1">Other Actions on Calls</h2> 
     <p>This section describes some of the other actions your application can take on calls.</p> 
     <a id="BACJGBDG" name="BACJGBDG"></a> 
     <div id="WSEWD222" class="sect2">
      <!-- infolevel="all" infotype="General" --> 
      <h3 class="sect2">Gathering Information on the Current Call</h3> 
      <p>You can obtain the following data about the current call by using the methods of the <span class="bold">Call</span> object:</p> 
      <ul> 
       <li> <p>The caller or the callee by using the <span class="bold">Call.getCaller</span> or <span class="bold">Call.getCallee</span> method respectively.</p> </li> 
       <li> <p>The call configuration by using the <span class="bold">Call.getCallConfig</span> method.</p> </li> 
       <li> <p>The call state by using the <span class="bold">Call.getCallState</span> method.</p> </li> 
       <li> <p>The data transfer object by its label using the <span class="bold">Call.getDataTransfer(label)</span> method.</p> </li> 
       <li> <p>The RTCPeerConnection (peer-to-peer connection) of the current call by using the <span class="bold">Call.getPeerConnection</span> method. For example, when the call employs dual-tone multi-frequency (DTMF) signal tones, use its <span class="bold">getPeerConnection</span> method to perform operations directly on the WebRTC <span class="bold">PeerConnection</span> connection.</p> 
        <div class="infoboxnote"> 
         <p class="notep1">Note:</p> The peer connection for the current call may change. Always retrieve its current value using the 
         <span class="bold">getPeerConnection</span> method for your call object, and then use the result.
        </div> </li> 
      </ul> 
     </div> 
     <!-- class="sect2" --> 
     <div id="WSEWD223" class="sect2">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref43" name="sthref43"></a> 
      <h3 class="sect2">Supporting Multiple Calls Using CallPackage</h3> 
      <p>Since the <span class="bold">CallPackage</span> class object can handle an array of calls, you can configure your application to set up and manage an array of calls (both incoming and outgoing). The basic logic outlined in <a href="#BACFBJAJ">Overview of Setting Up the Audio Call Feature in Your Application</a> can be used in this scenario. Update this logic so that your application properly manages each specific call session in the array of calls with respect to maintaining the details of the call details, handling changes to the call, media or session states.</p> 
      <p>See <a href="wd_extendingjsapi.htm#BGBIGDJJ">"Extending Your Applications Using WebRTC Session Controller JavaScript API"</a> for more information on extending the <span class="bold">Call</span> and <span class="bold">CallPackage</span> API.</p> 
     </div> 
     <!-- class="sect2" --> 
     <div id="WSEWD224" class="sect2">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref44" name="sthref44"></a> 
      <h3 class="sect2">Managing Interactive Connectivity Establishment Interval</h3> 
      <p>Your application can configure the time period within which the WebRTC Session Controller JavaScript API library uses the Interactive Connectivity Establishment (ICE) protocol to set up the call session. This procedure comes into play when your application is the caller and your application starts the call setup with its <span class="bold">Call.start</span> command.</p> 
      <div id="WSEWD225" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref45" name="sthref45"></a> 
       <h4 class="sect3">About the Use of ICE and ICE Candidate Trickling</h4> 
       <p>ICE is a technique which determines the best possible pairing of the local IP address and the remote IP address that can be used to establish the call session between the two applications associated with the caller and the callee. Each user agent (caller or callee's browser) has an entity (such as WebRTC Session Controller Signaling Engine) which acts as the ICE agent and collects and shares possible IP addresses. The final pair of IP addresses is elected after gathering and checking possible candidates (IP addresses) and taking into account the security of the end point applications and of the call connection. The media connection is established only after the ICE procedure finds an appropriate pair of IP addresses with which to communicate.</p> 
       <p>ICE candidate trickling is an extension of ICE. In this technique, a caller's ICE agent may incrementally provide candidates to the callee's ICE agent after the initial offer (the request which requires a response) has been dispatched. This ICE candidate trickling process allows the callee's application to begin acting upon the call and setting up the necessary protocol connections immediately, without waiting for the caller to gather all possible candidates. Doing so results in faster call startup in cases where gathering is not performed prior to initiating the call.</p> 
       <p>For more information on Interactive Connectivity Establishment, see <code><a href="http://tools.ietf.org/html/draft-rescorla-mmusic-ice-trickle">http://tools.ietf.org/html/draft-rescorla-mmusic-ice-trickle</a></code></p> 
      </div> 
      <!-- class="sect3" --> 
      <div id="WSEWD226" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref46" name="sthref46"></a> 
       <h4 class="sect3">About WebRTC Session Controller Signaling Engine and the ICE Interval</h4> 
       <p>WebRTC Session Controller Signaling Engine enables your applications to limit the time taken by the ICE agent to set up a call session by enabling you to specifying the ICE interval your application allows for this deliberation process.</p> 
       <p>The default value ICE interval for a call setup is 2000 milliseconds.</p> 
       <p>Signaling Engine checks the status of the ICE candidate periodically. If new candidates are gathered, the ICE agent will attempt to send this information in JSON format in the START message to the other peer.</p> 
      </div> 
      <!-- class="sect3" --> 
      <div id="WSEWD227" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref47" name="sthref47"></a> 
       <h4 class="sect3">Retrieving the Current ICE Interval for the Call</h4> 
       <p>To retrieve the current ICE interval, use the <span class="bold">getIceCheckInterval</span> method of your application's <span class="italic">call</span> object. The interval is returned in milliseconds.</p> 
      </div> 
      <!-- class="sect3" --> 
      <div id="WSEWD228" class="sect3">
       <!-- infolevel="all" infotype="General" -->
       <a id="sthref48" name="sthref48"></a> 
       <h4 class="sect3">Setting Up the ICE Interval for the Call</h4> 
       <p>To set the current ICE interval, provide the time interval in milliseconds when you call the <span class="bold">setIceCheckInterval</span> method of your application's <span class="bold">Call</span> object.</p> 
      </div> 
      <!-- class="sect3" -->
     </div> 
     <!-- class="sect2" --> 
     <div id="WSEWD229" class="sect2">
      <!-- infolevel="all" infotype="General" -->
      <a id="sthref49" name="sthref49"></a> 
      <h3 class="sect2">Updating a Call</h3> 
      <p>When a call is in an ESTABLISHED state, the caller or the callee may wish to update the call in one of a set of supported or configured ways. For example, one or the other party may select or deselect the mute button on a call, or move from an audio to a video format for the call. As a result, your application may need to update the call for the specific reason.</p> 
      <p>In order to handle this scenario,</p> 
      <ul> 
       <li> <p>Set up the necessary interface to capture the information your application user provides on:</p> 
        <ul> 
         <li> <p>The type of update the user wishes to make</p> </li> 
         <li> <p>The accept or decline response to the update request</p> </li> 
        </ul> </li> 
       <li> <p>From the point of view of the person initiating the update:</p> 
        <ul> 
         <li> <p>Set up the callback function to invoke when your application user requests the update.</p> </li> 
         <li> <p>Configure the parameters (<span class="italic">CallConfig,</span> and <span class="italic">localStreams</span>) required for the update.</p> </li> 
         <li> <p>Invoke the <span class="bold">Call.update</span> method with the <span class="italic">CallConfig,</span> and <span class="italic">localStreams</span> parameters.</p> </li> 
         <li> <p>Provide the required logic in the callback function assigned to your application's <span class="bold">Call.onCallStateChange</span> event handler for each of the possible call state changes relating to updates, <span class="bold">wsc.CALLSTATE.UPDATED</span> and <span class="bold">wsc.CALLSTATE.UPDATE_FAILED</span>.</p> </li> 
         <li> <p>Save any data specific to your application.</p> </li> 
         <li> <p>Set up the actions in response to the other party declining the update.</p> </li> 
        </ul> </li> 
       <li> <p>From the point of view of the person receiving the update:</p> 
        <ul> 
         <li> <p>Set up the callback function you assign to the <span class="bold">Call.onUpdate</span> event handler when your application receives the update request from Signaling Engine.</p> </li> 
         <li> <p>Process the parameters (<span class="italic">CallConfig,</span> and <span class="italic">localStreams</span>) required for the update.</p> </li> 
         <li> <p>Invoke the <span class="bold">Call.accept</span> method with <span class="italic">CallConfig,</span> and <span class="italic">localStreams</span> parameters.</p> </li> 
         <li> <p>Set up the required logic in the callback function assigned to your application's <span class="bold">Call.onCallStateChange</span> for each of the possible call state changes relating to updates, <span class="bold">wsc.CALLSTATE.UPDATED</span> and <span class="bold">wsc.CALLSTATE.UPDATE_FAILED</span>.</p> </li> 
         <li> <p>Save any data specific to your application.</p> </li> 
        </ul> </li> 
      </ul> 
     </div> 
     <!-- class="sect2" --> 
     <a id="BACIEEDD" name="BACIEEDD"></a> 
     <div id="WSEWD230" class="sect2"> 
      <h3 class="sect2">Reconnecting Dropped Calls</h3> 
      <p>At times, a drop in reception quality or some other event may cause a call that is in progress to be momentarily dropped and reconnected. When a call has been recovered, the WebRTC Session Controller JavaScript API library invokes your application's <span class="bold">CallPackage.onResurrect</span> event handler with the rehydrated call as the parameter. Your application can handle this scenario by providing the logic in the callback function assigned to the <span class="bold">CallPackage.onResurrect</span> event handler to use the rehydrated call object and resume the call.</p> 
      <div class="infoboxnote"> 
       <p class="notep1">Important:</p> If you create a custom call package, be sure to implement the appropriate logic to resume your application operation and reconnect calls.
      </div> 
      <p>To reconnect the call, do the following in your application:</p> 
      <ol> 
       <li> <p>If <span class="italic">callPackage</span> is the name of your application's <span class="bold">CallPackage</span> object, add the following statement to assign a callback function to its <span class="bold">onResurrect</span> event handler:</p> <pre xml:space="preserve" class="oac_no_warn">
<span class="italic">callPackage</span>.onResurrect = <span class="italic">onResurrect</span>;
</pre></li> 
       <li> <p>Set up the callback function (<span class="italic">onResurrect</span> in this case).</p> <p>In this callback function, be sure to resume the call after you perform any necessary actions. For example,</p> <pre xml:space="preserve" class="oac_no_warn">
function onResurrect(<span class="italic">resurrectedCall</span>) {
    ...
    <span class="italic">resurrectedCall</span>.resume(<span class="italic">onResumeCallSuccess</span>, <span class="italic">doCallError</span>);
}
</pre></li> 
       <li> <p>Set up the <span class="italic">onResumeCallsuccess</span> success callback for the <span class="bold">Call.resume</span> method.</p> <p>For example,</p> <pre xml:space="preserve" class="oac_no_warn">
function onResumeCallSuccess(<span class="italic">callObj</span>) {
    // Is the call in an established state?
    if (<span class="italic">callObj</span>.getCallState().state == wsc.CALLSTATE.ESTABLISHED) {
        // Call is in established state. Take action.
        ...
    } else {
        // Call is not in established state. Take action.
        ...
    }
}  
</pre> <p>The <span class="italic">doCallError</span> callback function should have been defined earlier when the application's <span class="bold">Call</span> object was created.</p> </li> 
      </ol> 
     </div> 
     <!-- class="sect2" -->
    </div> 
    <!-- class="sect1" -->
   </div> 
   <!-- class="chapter" -->
  </div> 
  <!-- class="ind" --> 
  <!-- Start Footer --> 
  <div class="footer"> 
   <hr> 
   <table summary="" class="simple oac_no_warn" cellspacing="0" cellpadding="0" width="100%"> 
    <colgroup>
     <col width="33%"> 
     <col width="*"> 
     <col width="33%"> 
    </colgroup>
    <tbody>
     <tr> 
      <td align="left"> 
       <table class="simple oac_no_warn" summary="" cellspacing="0" cellpadding="0" width="98"> 
        <tbody>
         <tr> 
          <td align="center" valign="top"><a href="wd_appsecurity.htm"><img width="24" height="24" src="../../dcommon/gifs/leftnav.gif" alt="Go to previous page"><br> <span class="icon">Previous</span></a></td> 
          <td align="center" valign="top"><a href="wd_videoinapps.htm"><img width="24" height="24" src="../../dcommon/gifs/rightnav.gif" alt="Go to next page"><br> <span class="icon">Next</span></a></td> 
         </tr> 
        </tbody>
       </table> </td> 
      <td style="font-size: 90%" align="center" class="copyrightlogo"><img width="144" height="18" src="../../dcommon/gifs/oracle.gif" alt="Oracle"><br> Copyright&nbsp;&copy;&nbsp;2013,&nbsp;Oracle&nbsp;and/or&nbsp;its&nbsp;affiliates.&nbsp;All&nbsp;rights&nbsp;reserved.<br> <a href="../../dcommon/html/cpyr.htm">Legal Notices</a></td> 
      <td align="right"> 
       <table summary="" class="icons oac_no_warn" cellspacing="0" cellpadding="0" width="147"> 
        <tbody>
         <tr> 
          <td align="center" valign="top"><a href="../../index.htm"><img width="24" height="24" src="../../dcommon/gifs/doclib.gif" alt="Go to Documentation Home"><br> <span class="icon">Home</span></a></td> 
          <td align="center" valign="top"><a href="toc.htm"><img width="24" height="24" src="../../dcommon/gifs/toc.gif" alt="Go to Table of Contents"><br> <span class="icon">Contents</span></a></td> 
          <td align="center" valign="top"><a href="../../dcommon/html/feedback.htm"><img width="24" height="24" src="../../dcommon/gifs/feedbck2.gif" alt="Go to Feedback page"><br> <span class="icon">Contact Us</span></a></td> 
         </tr> 
        </tbody>
       </table> </td> 
     </tr> 
    </tbody>
   </table> 
  </div> 
  <!-- class="footer" --> 
  <noscript> 
   <p>Scripting on this page enhances content navigation, but does not change the content in any way.</p> 
  </noscript>   
 </body>
</html>