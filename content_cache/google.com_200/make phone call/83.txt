<!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr" lang="en-US">
 <head profile="http://gmpg.org/xfn/11"> 
  <meta charset="utf-8"> 
  <!--
<meta property="fb:page_id" content="6427302910" />
--> 
  <meta name="google-site-verification" content="7VWES_-rcHBcmaQis9mSYamPfNwE03f4vyTj4pfuAw0"> 
  <meta name="viewport" content="width=device-width, initial-scale=1"> 
  <title>JavaScript Coding Standards – Make WordPress Core</title> 
  <meta name="referrer" content="always"> 
  <link href="//s.w.org/wp-includes/css/dashicons.css?20160504" rel="stylesheet" type="text/css"> 
  <link href="//fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,400,300,600&amp;subset=latin,cyrillic-ext,greek-ext,greek,vietnamese,latin-ext,cyrillic" rel="stylesheet" type="text/css"> 
  <link rel="stylesheet" href="//s.w.org/style/wp4.css?61"> 
  <link media="only screen and (max-device-width: 480px)" href="//s.w.org/style/iphone.css?1" type="text/css" rel="stylesheet"> 
  <link rel="shortcut icon" href="//s.w.org/favicon.ico?2" type="image/x-icon"> 
  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-52447-1']);
_gaq.push(['_setDomainName', 'wordpress.org']);
_gaq.push(['_trackPageview']);
(function() {
	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
function recordOutboundLink(link, category, action) {
	_gaq.push(['_trackEvent', category, action])
	setTimeout('document.location = "' + link.href + '"', 100);
}
</script> 
  <!--[if lte IE 8]>
<style type="text/css">
@import url("//s.w.org/style/ie.css?1");
</style>
<![endif]--> 
  <link rel="pingback" href="https://make.wordpress.org/core/xmlrpc.php">
  <link rel="dns-prefetch" href="//s0.wp.com"> 
  <link rel="dns-prefetch" href="//secure.gravatar.com"> 
  <link rel="dns-prefetch" href="//fonts.googleapis.com"> 
  <link rel="dns-prefetch" href="//s.w.org"> 
  <link rel="alternate" type="application/rss+xml" title="Make WordPress Core » Feed" href="https://make.wordpress.org/core/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="Make WordPress Core » Comments Feed" href="https://make.wordpress.org/core/comments/feed/"> 
  <link rel="alternate" type="application/rss+xml" title="Make WordPress Core » JavaScript Coding Standards Comments Feed" href="https://make.wordpress.org/core/handbook/best-practices/coding-standards/javascript/feed/"> 
  <script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.3\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/make.wordpress.org\/core\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.9-alpha-41683"}};
			!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline="top",l.font="600 32px Arial",a){case"flag":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case"emoji":return b=d([55358,56794,8205,9794,65039],[55358,56794,8203,9794,65039]),!b}return!1}function f(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var g,h,i,j,k=b.createElement("canvas"),l=k.getContext&&k.getContext("2d");for(j=Array("flag","emoji"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],"flag"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",h,!1),a.addEventListener("load",h,!1)):(a.attachEvent("onload",h),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);
		</script> 
  <style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style> 
  <link rel="stylesheet" id="jetpack-inline-terms-css-css" href="https://make.wordpress.org/core/wp-content/mu-plugins/inline-terms/ui/style.css?ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="admin-bar-css" href="https://make.wordpress.org/core/wp-includes/css/admin-bar.min.css?ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="wp-blocks-css" href="https://make.wordpress.org/core/wp-content/plugins/gutenberg/blocks/build/style.css?ver=1504621350" type="text/css" media="all"> 
  <link rel="stylesheet" id="o2-extend-checklists-styles-css" href="https://make.wordpress.org/core/wp-content/plugins/o2/modules/checklists/css/style.css?ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="genericons-css" href="https://make.wordpress.org/core/wp-content/plugins/jetpack/_inc/genericons/genericons/genericons.css?ver=3.1" type="text/css" media="all"> 
  <link rel="stylesheet" id="o2-plugin-styles-css" href="https://make.wordpress.org/core/wp-content/plugins/o2/css/style.css?ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="o2-notifications-css" href="https://make.wordpress.org/core/wp-content/plugins/o2/modules/notifications/css/style.css?ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="o2-extend-sticky-posts-css" href="https://make.wordpress.org/core/wp-content/plugins/o2/modules/sticky-posts/css/style.css?ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="make-core-trac-css" href="https://make.wordpress.org/core/wp-content/plugins/trac-notifications/make-core.css?ver=3" type="text/css" media="all"> 
  <link rel="stylesheet" id="breathe-serif-css" href="https://fonts.googleapis.com/css?family=Noto+Serif%3A400%2C700%2C400italic%2C700italic&amp;ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="wporg-handbook-css-css" href="https://make.wordpress.org/core/wp-content/plugins/handbook/stylesheets/callout-boxes.css?ver=20161206" type="text/css" media="all"> 
  <link rel="stylesheet" id="o2-filter-widget-styles-css" href="https://make.wordpress.org/core/wp-content/plugins/o2/modules/filter-widget/css/style.css?ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="o2-live-comments-styles-css" href="https://make.wordpress.org/core/wp-content/plugins/o2/modules/live-comments/css/style.css?ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="p2-hovercards-css" href="https://make.wordpress.org/core/wp-content/mu-plugins/make-network/p2-hovercards/css/p2-hovercards.css?ver=1.1" type="text/css" media="all"> 
  <link rel="stylesheet" id="post-actions-styles-css" href="https://make.wordpress.org/core/wp-content/plugins/o2/modules/post-actions/css/style.css?ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="p2-breathe-css" href="https://make.wordpress.org/core/wp-content/themes/p2-breathe/style.css?ver=4.9-alpha-41683" type="text/css" media="all"> 
  <link rel="stylesheet" id="wporg-breathe-css" href="https://make.wordpress.org/core/wp-content/themes/pub/wporg-breathe/style.css?ver=20170904a" type="text/css" media="all"> 
  <link rel="stylesheet" id="jetpack_css-css" href="https://make.wordpress.org/core/wp-content/plugins/jetpack/css/jetpack.css?ver=5.3" type="text/css" media="all"> 
  <script>var p2_hovercards_regex = [/#(\d{4,})(-(core|blackberry|nokia|webos|plugins|bbpress|supportpress|glotpress|backpress|windows|themes|meta))?/,/\[(\d+)\]|r(\d+)(-(core|blackberry|nokia|webos|plugins|bbpress|supportpress|glotpress|backpress|windows|themes|meta))?/,]; </script>
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/jquery/jquery.js?ver=1.12.4"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/jquery/jquery-migrate.min.js?ver=1.4.1"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/mu-plugins/inline-terms/ui/atwho.min.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/mu-plugins/inline-terms/ui/defaults.min.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/mu-plugins/inline-terms/ui/xposts.min.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/mu-plugins/inline-terms/ui/hashtags.min.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/post-action-states.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/offline/js/offline.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/underscore.min.js?ver=1.8.3"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/backbone.min.js?ver=1.2.3"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/models/user.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/collections/users.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/events.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/keyboard.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/models/page-meta.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/moment.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var _wpUtilSettings = {"ajax":{"url":"\/core\/wp-admin\/admin-ajax.php"}};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/wp-util.min.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/wp-backbone.min.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/views/app-footer.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var userSettings = {"url":"\/","uid":"0","time":"1507034539","secure":"1"};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/utils.min.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/views/app-header.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/jquery.highlight.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/models/base.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/models/comment.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/jquery.hotkeys.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/editor/jquery.autoresize.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/caret.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/raw-to-filtered.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/editor/editor.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/views/comment.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/models/post.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/views/new-post.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/compare-times.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/collections/comments.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/views/post.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/collections/posts.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/jquery/jquery.color.min.js?ver=2.1.1"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/timestamp.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/notifications/js/models/notification.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/notifications/js/collections/notifications.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/notifications/js/views/notification.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/notifications/js/views/dock-items.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/notifications/js/views/dock-count.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/notifications/js/views/dock.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/notifications/js/views/flash.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/notifications/js/app/notifications.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/views/no-posts-post.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/views/posts.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var o2Config = {"options":{"nonce":"7632f22a27","loadTime":1507034539000,"readURL":"https:\/\/make.wordpress.org\/core\/wp-admin\/admin-ajax.php?action=o2_read","writeURL":"https:\/\/make.wordpress.org\/core\/wp-admin\/admin-ajax.php?action=o2_write","userDataURL":"https:\/\/make.wordpress.org\/core\/wp-admin\/admin-ajax.php?action=o2_userdata","loginURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2F","loginWithRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%3Fo2_login_complete%3Dtrue","pollingInterval":10000,"timestampFormat":"%1$s on %2$s","dateFormat":"F j, Y","timeFormat":"g:i a","todayFormat":"%s","yesterdayFormat":"Yesterday at %s","compactFormat":{"seconds":"Now","minutes":"%sm","hours":"%sh","days":"%sd","weeks":"%sw","months":"%smon","years":"%sy"},"i18nMoment":{"months":["January","February","March","April","May","June","July","August","September","October","November","December"],"monthsShort":["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"weekdaysShort":["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],"weekdaysMin":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"relativeTime":{"future":"in %s","past":"%s ago","s":"a few seconds","m":"a min","mm":"%d mins","h":"an hour","hh":"%d hours","d":"a day","dd":"%d days","M":"a month","MM":"%d months","y":"a year","yy":"%d years"}},"i18nLanguage":"en-o2","infiniteScroll":false,"prevPageURL":null,"nextPageURL":null,"pageTitle":"","appContainer":"#primary","threadContainer":"article","showAvatars":"1","frontSidePostPrompt":"Hi, {name}! What&#039;s happening?","showFrontSidePostBox":false,"showCommentsInitially":true,"userMustBeLoggedInToComment":true,"requireUserNameAndEmailIfNotLoggedIn":true,"viewType":"single","isPreview":false,"showExtended":"Show full post","hideExtended":"Hide extended post","searchQuery":"","havePosts":true,"queryVars":{"name":"javascript","pagename":"javascript","replies":""},"order":"DESC","threadCommentsDepth":"10","isMobileOrTablet":false,"defaultAvatar":"mystery","searchURL":"https:\/\/make.wordpress.org\/core\/","homeURL":"https:\/\/make.wordpress.org\/core\/","postId":0,"mimeTypes":{"jpg|jpeg|jpe":"image\/jpeg","png":"image\/png","gif":"image\/gif","mp3|m4a|m4b":"audio\/mpeg","mov|qt":"video\/quicktime","avi":"video\/avi","wmv":"video\/x-ms-wmv","mid|midi":"audio\/midi","pdf":"application\/pdf","psd":"application\/octet-stream","tiff|tif":"image\/tiff","mp4|m4v":"video\/mp4","zip":"application\/zip","gz|gzip":"application\/x-gzip","txt|asc|c|cc|h|srt":"text\/plain"},"currentBlogId":6,"stickyPosts":{"cssClass":"sticky","sticky":"Unstick Post from Home","stickyTitle":"Unstick Post from Home","unsticky":"Stick Post to Home","unstickyTitle":"Stick Post to Home"}},"currentUser":{"userLogin":"","userNicename":"","noprivUserName":"","noprivUserEmail":"","noprivUserURL":"","canEditPosts":false,"canEditOthersPosts":false,"canPublishPosts":false},"appControls":["<a href=\"#\" class=\"o2-toggle-keyboard-help\">Keyboard Shortcuts<\/a>","<a href=\"#\" class=\"o2-toggle-comments\" data-alternate-text=\"Show comment threads\">Hide comment threads<\/a>"],"postFormBefore":"","postFormExtras":"","commentFormBefore":"","commentFormExtras":"","allowedTags":{"post":{"address":{"class":true,"id":true,"style":true,"title":true,"role":true},"a":{"href":true,"rel":true,"rev":true,"name":true,"target":true,"class":true,"id":true,"style":true,"title":true,"role":true},"abbr":{"class":true,"id":true,"style":true,"title":true,"role":true},"acronym":{"class":true,"id":true,"style":true,"title":true,"role":true},"area":{"alt":true,"coords":true,"href":true,"nohref":true,"shape":true,"target":true,"class":true,"id":true,"style":true,"title":true,"role":true},"article":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"aside":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"audio":{"autoplay":true,"controls":true,"loop":true,"muted":true,"preload":true,"src":true,"class":true,"id":true,"style":true,"title":true,"role":true},"b":{"class":true,"id":true,"style":true,"title":true,"role":true},"bdo":{"dir":true,"class":true,"id":true,"style":true,"title":true,"role":true},"big":{"class":true,"id":true,"style":true,"title":true,"role":true},"blockquote":{"cite":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"br":{"class":true,"id":true,"style":true,"title":true,"role":true},"button":{"disabled":true,"name":true,"type":true,"value":true,"class":true,"id":true,"style":true,"title":true,"role":true},"caption":{"align":true,"class":true,"id":true,"style":true,"title":true,"role":true},"cite":{"dir":true,"lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"code":{"class":true,"id":true,"style":true,"title":true,"role":true},"col":{"align":true,"char":true,"charoff":true,"span":true,"dir":true,"valign":true,"width":true,"class":true,"id":true,"style":true,"title":true,"role":true},"colgroup":{"align":true,"char":true,"charoff":true,"span":true,"valign":true,"width":true,"class":true,"id":true,"style":true,"title":true,"role":true},"del":{"datetime":true,"class":true,"id":true,"style":true,"title":true,"role":true},"dd":{"class":true,"id":true,"style":true,"title":true,"role":true},"dfn":{"class":true,"id":true,"style":true,"title":true,"role":true},"details":{"align":true,"dir":true,"lang":true,"open":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"div":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"dl":{"class":true,"id":true,"style":true,"title":true,"role":true},"dt":{"class":true,"id":true,"style":true,"title":true,"role":true},"em":{"class":true,"id":true,"style":true,"title":true,"role":true},"fieldset":{"class":true,"id":true,"style":true,"title":true,"role":true},"figure":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"figcaption":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"font":{"color":true,"face":true,"size":true,"class":true,"id":true,"style":true,"title":true,"role":true},"footer":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"form":{"action":true,"accept":true,"accept-charset":true,"enctype":true,"method":true,"name":true,"target":true,"class":true,"id":true,"style":true,"title":true,"role":true},"h1":{"align":true,"class":true,"id":true,"style":true,"title":true,"role":true},"h2":{"align":true,"class":true,"id":true,"style":true,"title":true,"role":true},"h3":{"align":true,"class":true,"id":true,"style":true,"title":true,"role":true},"h4":{"align":true,"class":true,"id":true,"style":true,"title":true,"role":true},"h5":{"align":true,"class":true,"id":true,"style":true,"title":true,"role":true},"h6":{"align":true,"class":true,"id":true,"style":true,"title":true,"role":true},"header":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"hgroup":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"hr":{"align":true,"noshade":true,"size":true,"width":true,"class":true,"id":true,"style":true,"title":true,"role":true},"i":{"class":true,"id":true,"style":true,"title":true,"role":true},"img":{"alt":true,"align":true,"border":true,"height":true,"hspace":true,"longdesc":true,"vspace":true,"src":true,"usemap":true,"width":true,"class":true,"id":true,"style":true,"title":true,"role":true},"ins":{"datetime":true,"cite":true,"class":true,"id":true,"style":true,"title":true,"role":true},"kbd":{"class":true,"id":true,"style":true,"title":true,"role":true},"label":{"for":true,"class":true,"id":true,"style":true,"title":true,"role":true},"legend":{"align":true,"class":true,"id":true,"style":true,"title":true,"role":true},"li":{"align":true,"value":true,"class":true,"id":true,"style":true,"title":true,"role":true},"map":{"name":true,"class":true,"id":true,"style":true,"title":true,"role":true},"mark":{"class":true,"id":true,"style":true,"title":true,"role":true},"menu":{"type":true,"class":true,"id":true,"style":true,"title":true,"role":true},"nav":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"p":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"pre":{"width":true,"class":true,"id":true,"style":true,"title":true,"role":true},"q":{"cite":true,"class":true,"id":true,"style":true,"title":true,"role":true},"s":{"class":true,"id":true,"style":true,"title":true,"role":true},"samp":{"class":true,"id":true,"style":true,"title":true,"role":true},"span":{"dir":true,"align":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"section":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"small":{"class":true,"id":true,"style":true,"title":true,"role":true},"strike":{"class":true,"id":true,"style":true,"title":true,"role":true},"strong":{"class":true,"id":true,"style":true,"title":true,"role":true},"sub":{"class":true,"id":true,"style":true,"title":true,"role":true},"summary":{"align":true,"dir":true,"lang":true,"xml:lang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"sup":{"class":true,"id":true,"style":true,"title":true,"role":true},"table":{"align":true,"bgcolor":true,"border":true,"cellpadding":true,"cellspacing":true,"dir":true,"rules":true,"summary":true,"width":true,"class":true,"id":true,"style":true,"title":true,"role":true},"tbody":{"align":true,"char":true,"charoff":true,"valign":true,"class":true,"id":true,"style":true,"title":true,"role":true},"td":{"abbr":true,"align":true,"axis":true,"bgcolor":true,"char":true,"charoff":true,"colspan":true,"dir":true,"headers":true,"height":true,"nowrap":true,"rowspan":true,"scope":true,"valign":true,"width":true,"class":true,"id":true,"style":true,"title":true,"role":true},"textarea":{"cols":true,"rows":true,"disabled":true,"name":true,"readonly":true,"class":true,"id":true,"style":true,"title":true,"role":true},"tfoot":{"align":true,"char":true,"charoff":true,"valign":true,"class":true,"id":true,"style":true,"title":true,"role":true},"th":{"abbr":true,"align":true,"axis":true,"bgcolor":true,"char":true,"charoff":true,"colspan":true,"headers":true,"height":true,"nowrap":true,"rowspan":true,"scope":true,"valign":true,"width":true,"class":true,"id":true,"style":true,"title":true,"role":true},"thead":{"align":true,"char":true,"charoff":true,"valign":true,"class":true,"id":true,"style":true,"title":true,"role":true},"title":{"class":true,"id":true,"style":true,"title":true,"role":true},"tr":{"align":true,"bgcolor":true,"char":true,"charoff":true,"valign":true,"class":true,"id":true,"style":true,"title":true,"role":true},"track":{"default":true,"kind":true,"label":true,"src":true,"srclang":true,"class":true,"id":true,"style":true,"title":true,"role":true},"tt":{"class":true,"id":true,"style":true,"title":true,"role":true},"u":{"class":true,"id":true,"style":true,"title":true,"role":true},"ul":{"type":true,"class":true,"id":true,"style":true,"title":true,"role":true},"ol":{"start":true,"type":true,"reversed":true,"class":true,"id":true,"style":true,"title":true,"role":true},"var":{"class":true,"id":true,"style":true,"title":true,"role":true},"video":{"autoplay":true,"controls":true,"height":true,"loop":true,"muted":true,"poster":true,"preload":true,"src":true,"width":true,"class":true,"id":true,"style":true,"title":true,"role":true}},"comment":{"a":{"href":true,"title":true},"abbr":{"title":true},"acronym":{"title":true},"b":[],"blockquote":{"cite":true},"cite":[],"code":[],"del":{"datetime":true},"em":[],"i":[],"q":{"cite":true},"s":[],"strike":[],"strong":[]}},"strings":{"unsavedChanges":"You have unsaved changes.","saveInProgress":"Not all changes have been saved to the server yet. Please stay on this page until they are saved.","reloginPrompt":"Your session has expired. Click here to log in again. Your changes will not be lost.","reloginSuccessful":"You have successfully logged back in.","newCommentBy":"New comment by %s","newAnonymousComment":"New comment by someone","newPostBy":"New post by %s","newMentionBy":"%1$s mentioned you: \"%2$s\"","filenameNotUploadedWithType":"%1$s was not uploaded (%2$s files are not allowed).","filenameNotUploadedNoType":"%1$s was not uploaded (unrecognized file type).","fileTypeNotSupported":"Sorry, %1$s files are not allowed.","unrecognizedFileType":"Sorry, file not uploaded (unrecognized file type).","pageNotFound":"Apologies, but the page you requested could not be found. Perhaps searching will help.","searchFailed":"Apologies, but I could not find any results for that search term. Please try again.","defaultError":"An unexpected error occurred. Please refresh the page and try again.","previewPlaceholder":"Generating preview...","bold":"Bold (ctrl\/\u2318-b)","italics":"Italics (ctrl\/\u2318-i)","link":"Link (\u2318-shift-a)","image":"Image","blockquote":"Blockquote","code":"Code","addPostTitle":"Add a post title","enterTitleHere":"Enter title here","noPosts":"Ready to publish your first post? Simply use the form above.","noPostsMobile":"Tap the new post control below to begin writing your first post.","awaitingApproval":"This comment is awaiting approval.","isTrashed":"This comment was trashed.","prevDeleted":"This comment was deleted.","cancel":"Cancel","edit":"Edit","email":"Email","name":"Name","permalink":"Permalink","post":"Post","reply":"Reply","save":"Save","saving":"Saving","website":"Website","search":"Search","anonymous":"Someone","preview":"Preview","olderPosts":"Older posts","newerPosts":"Newer posts","loginToComment":"Login to leave a comment.","fillDetailsBelow":"Fill in your details below.","editingOthersComment":"Careful! You are editing someone else's comment.","commentURL":"Website","showComments":"Show Comments","hideComments":"Hide Comments","redirectedHomePostTrashed":"This post was trashed. You will be redirected home now.","redirectedHomePageTrashed":"This page was trashed. You will be redirected home now.","postBeingTrashed":"This post is being trashed.","pageBeingTrashed":"This page is being trashed.","postTrashedFailed":"There was an error trashing that post. Please try again in a moment.","pageTrashedFailed":"There was an error trashing that page. Please try again in a moment.","connectionLostPrompt":"The connection to the server has been interrupted. Please reconnect.","addChecklistItem":"Enter the text for the new item","editChecklistItem":"Update the item text below","deleteChecklistItem":"Are you sure you want to delete this item?","checklistError":"CheckList Error","unknownChecklistError":"An unknown error occurred","malformedChecklistResp":"A malformed response was received","commentName":"Name (required)","commentEmail":"Email (required)","clearNotifications":"Clear All"}};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/app/main.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/highlight-on-inview.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/is-valid-email.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/models/search-meta.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/page-visibility.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/jquery.placeholder.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/polling.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/query.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/template.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/views/search-form.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/cocktail.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/recent-comments/js/collections/posts.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/jquery/ui/core.min.js?ver=1.11.4"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/jquery/ui/widget.min.js?ver=1.11.4"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/jquery/ui/mouse.min.js?ver=1.11.4"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/jquery/ui/sortable.min.js?ver=1.11.4"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/checklists/js/views/common.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/js/utils/enquire.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/notifications/js/views/flash-items.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/sticky-posts/js/models/extend-post.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/sticky-posts/js/collections/extend-posts.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/sticky-posts/js/views/extend-post.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/sticky-posts/js/views/extend-posts.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/handbook/scripts/handbook.js?ver=20150930"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/filter-widget/js/filter-widget.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/live-comments/js/models/item.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/live-comments/js/collections/items.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/live-comments/js/views/item.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/live-comments/js/views/items.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/live-comments/js/live-comments-widget.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/mu-plugins/make-network/p2-hovercards/js/jquery.sonar.js?ver=3"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/jetpack/_inc/spin.js?ver=1.3"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/jetpack/_inc/jquery.spin.js?ver=1.3"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/mu-plugins/make-network/p2-hovercards/js/p2-hovercards.js?ver=1.1"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/post-actions/js/script.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/post-actions/js/views/extend-comment.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/post-actions/js/views/extend-post.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/themes/pub/wporg-breathe/js/chapters.js?ver=20170904"></script> 
  <link rel="https://api.w.org/" href="https://make.wordpress.org/core/wp-json/"> 
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://make.wordpress.org/core/xmlrpc.php?rsd"> 
  <link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://make.wordpress.org/core/wp-includes/wlwmanifest.xml"> 
  <link rel="prev" title="Installing XAMPP" href="https://make.wordpress.org/core/handbook/tutorials/installing-a-local-server/xampp/"> 
  <link rel="next" title="Inline Documentation Standards" href="https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/"> 
  <meta name="generator" content="WordPress 4.9-alpha-41683"> 
  <link rel="canonical" href="https://make.wordpress.org/core/handbook/best-practices/coding-standards/javascript/"> 
  <link rel="shortlink" href="https://make.wordpress.org/core/?p=5078"> 
  <link rel="alternate" type="application/json+oembed" href="https://make.wordpress.org/core/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F"> 
  <link rel="alternate" type="text/xml+oembed" href="https://make.wordpress.org/core/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F&amp;format=xml"> 
  <style>
		@media screen and (max-width: 782px) {
			#wpadminbar li#wp-admin-bar-log-in,
			#wpadminbar li#wp-admin-bar-register {
				display: block;
			}

			#wpadminbar li#wp-admin-bar-log-in a,
			#wpadminbar li#wp-admin-bar-register a {
				padding: 0 8px;
			}
		}
	</style> 
  <style type="text/css" media="print">#wpadminbar { display:none; }</style> 
  <style type="text/css" media="screen">
	html { margin-top: 32px !important; }
	* html body { margin-top: 32px !important; }
	@media screen and ( max-width: 782px ) {
		html { margin-top: 46px !important; }
		* html body { margin-top: 46px !important; }
	}
</style> 
  <!-- Jetpack Open Graph Tags --> 
  <meta property="og:type" content="article"> 
  <meta property="og:title" content="JavaScript Coding Standards"> 
  <meta property="og:url" content="https://make.wordpress.org/core/handbook/best-practices/coding-standards/javascript/"> 
  <meta property="og:description" content="JavaScript has become a critical component in developing WordPress-based applications (themes and plugins) as well as WordPress core. Standards are needed for formatting and styling JavaScript code…"> 
  <meta property="article:published_time" content="2013-03-30T23:51:53+00:00"> 
  <meta property="article:modified_time" content="2017-06-08T06:36:09+00:00"> 
  <meta property="og:site_name" content="Make WordPress Core"> 
  <meta property="og:image" content="https://make.wordpress.org/core/files/2015/11/wordpress-logo-notext-rgb.png"> 
  <meta property="og:image:width" content="200"> 
  <meta property="og:image:height" content="200"> 
  <meta property="og:locale" content="en_US"> 
  <meta name="twitter:site" content="@WordPress"> 
  <meta name="twitter:image" content="https://make.wordpress.org/core/files/2015/11/wordpress-logo-notext-rgb.png"> 
  <meta name="twitter:card" content="summary"> 
  <style type="text/css" id="syntaxhighlighteranchor"></style> 
  <link rel="icon" href="https://make.wordpress.org/core/files/2015/11/wordpress-logo-notext-rgb-150x150.png" sizes="32x32"> 
  <link rel="icon" href="https://make.wordpress.org/core/files/2015/11/wordpress-logo-notext-rgb-300x300.png" sizes="192x192"> 
  <link rel="apple-touch-icon-precomposed" href="https://make.wordpress.org/core/files/2015/11/wordpress-logo-notext-rgb-300x300.png"> 
  <meta name="msapplication-TileImage" content="https://make.wordpress.org/core/files/2015/11/wordpress-logo-notext-rgb-300x300.png"> 
  <style>
		#primary {
			display: none;
		}
		</style> 
  <style type="text/css" id="wp-custom-css">
				/*
You can add your own CSS here.

Click the help icon above to learn more.
*/
/* Feature Project Styles */
.feature {
	padding: 5px;
	border-radius: 5px;
	text-transform: uppercase;
	color: white;
}

.feature.active {
	background: #46b450;
}

.feature.idea {
	background: #826eb4;
}

.feature.merged {
	background: black;
}

.feature.closed {
	background: black;
}

/* Core Handbook Styles */
ul.committers {
	padding: 0 5px;
	margin: 0 -15px -10px -5px !important;
	list-style: none;
	display: block;
}

.committer-card {
	display: inline-block !important;
	vertical-align: top;
	margin-right: 10px;
	padding-bottom: 15px;
	height: 50px;
	width: 200px;
	margin-bottom: 6px;
}

.committer-card a {
	margin: 6px 0 2px;
	text-decoration: none;
}

.committer-card a img {
	float: left;
	margin: 0 10px 10px 0;
	padding: 1px;
	width: 40px;
	height: 40px;
}

.committer-title {
	display: block;
}

/* Customize component styles */
#customize-completed-milestone-highlights {
	margin-left: 0;
}

#customize-completed-milestone-highlights > li {
	list-style: none;
	font-weight: bold;
}

#customize-completed-milestone-highlights > li > ul {
	font-weight: normal;
	margin-left: 2em;
	margin-bottom: .5em;
}

/* Add missing styling of nested unordered lists */
.entry-content li > ul > li {
	list-style: circle;
}

.entry-content li > ul > li > ul > li {
	list-style: square;
}			</style> 
  <script type="text/javascript">
/* <![CDATA[ */
	var wpNotesIsJetpackClient = true;
	var wpNotesIsJetpackClientV2 = true;
/* ]]> */
</script> 
  <script>document.cookie='devicePixelRatio='+((window.devicePixelRatio === undefined) ? 1 : window.devicePixelRatio)+'; path=/';</script> 
  <script type="text/javascript">
var toggleMenu = function(){
    var m = document.getElementById('wporg-header-menu'),
        c = m.className;
	    m.className = c.match( ' active' ) ? c.replace( ' active', '' ) : c + ' active';
}
</script> 
 </head> 
 <body id="wordpress-org" class="handbook-template-default single single-handbook postid-5078 admin-bar no-customize-support wporg-make make-core o2 group-blog custom-menu"> 
  <div id="wporg-header"> 
   <div class="wrapper"> 
    <a id="mobile-menu-button" class="" href="#" onclick="toggleMenu();"></a> 
    <h1><a href="//wordpress.org">WordPress.org</a></h1> 
    <div id="head-search"> 
     <form action="//wordpress.org/search/do-search.php" method="get"> 
      <label for="global-search" class="screen-reader-text">Search WordPress.org for:</label> 
      <input id="global-search" class="text" name="search" type="text" value="" maxlength="150" placeholder="Search WordPress.org"> 
      <input type="submit" class="button" value=""> 
     </form> 
    </div> 
    <div style="clear:both"></div> 
    <ul id="wporg-header-menu"> 
     <li><a href="//wordpress.org/showcase/" title="See some of the sites built on WordPress.">Showcase</a></li> 
     <li><a href="//wordpress.org/themes/" title="Find just the right look for your website.">Themes</a></li> 
     <li><a href="//wordpress.org/plugins/" title="Plugins can extend WordPress to do almost anything you can imagine.">Plugins</a></li> 
     <li><a href="//wordpress.org/mobile/" title="Take your website on the go!">Mobile</a></li> 
     <li><a href="//wordpress.org/support/" title="Forums, documentation, help.">Support</a>
      <ul class="nav-submenu">
       <li><a href="//wordpress.org/support/" title="Support and discussion forums.">Forums</a></li>
       <li><a href="//codex.wordpress.org/Main_Page" title="Documentation, tutorials, best practices.">Documentation</a></li>
      </ul>
      <div class="uparrow"></div></li> 
     <li><a href="//make.wordpress.org/" title="Contribute your knowledge." class="current">Get Involved</a>
      <div class="uparrow"></div></li> 
     <li><a href="//wordpress.org/about/" title="About the WordPress Organization, and where we're going.">About</a></li> 
     <li><a href="//wordpress.org/news/" title="Come here for the latest scoop.">Blog</a></li> 
     <li><a href="//wordpress.org/hosting/" title="Find a home for your blog.">Hosting</a></li> 
     <li id="download" class="button download-button"><a href="//wordpress.org/download/" title="Get it. Got it? Good.">Download WordPress</a></li> 
    </ul> 
    <div style="clear:both"></div> 
   </div> 
  </div> 
  <header id="masthead" class="site-header" role="banner"> 
   <a href="#" id="secondary-toggle" onclick="return false;"><strong>Menu</strong></a> 
   <div class="site-branding"> 
    <p class="site-title"><a href="https://make.wordpress.org/core/" rel="home">Make WordPress Core</a></p> 
   </div> 
   <nav id="site-navigation" class="navigation-main clear" role="navigation"> 
    <div class="screen-reader-text skip-link">
     <a href="#content" title="Skip to content">Skip to content</a>
    </div> 
    <div class="menu-navigation-container">
     <ul id="menu-navigation" class="menu">
      <li id="menu-item-8874" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-8874"><a href="https://make.wordpress.org/core/reports/">Tickets</a></li> 
      <li id="menu-item-21423" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-21423"><a href="https://make.wordpress.org/core/components/">Components</a></li> 
      <li id="menu-item-5334" class="menu-item menu-item-type-post_type menu-item-object-handbook current-menu-item menu-item-5334"><a href="https://make.wordpress.org/core/handbook/">Handbook</a></li> 
      <li id="menu-item-8931" class="icon browser menu-item menu-item-type-custom menu-item-object-custom menu-item-8931"><a title="Browse Source" href="https://core.trac.wordpress.org/browser"><span class="screen-reader-text">Browse Source</span></a></li> 
      <li id="menu-item-8932" class="icon timeline menu-item menu-item-type-custom menu-item-object-custom menu-item-8932"><a title="Trac Timeline" href="https://core.trac.wordpress.org/timeline"><span class="screen-reader-text">Trac Timeline</span></a></li> 
      <li id="menu-item-8929" class="icon newticket menu-item menu-item-type-custom menu-item-object-custom menu-item-8929"><a title="Create a New Ticket" href="https://login.wordpress.org/?redirect_to=https://core.trac.wordpress.org/newticket"><span class="screen-reader-text">Create a New Ticket</span></a></li> 
     </ul>
    </div> 
   </nav>
   <!-- .navigation-main --> 
  </header>
  <!-- .site-header --> 
  <div class="make-welcome"> 
   <div class="entry-meta"> 
    <button type="button" id="make-welcome-hide" class="toggle dashicons dashicons-no" data-hash="d40a7616c2658ca9ce227f91a48c3ab7" data-cookie="welcome-6" title="Hide this message"></button> 
   </div> 
   <div class="entry-content clear"> 
    <div class="content-area"> 
     <h3>Welcome!</h3> 
     <p>The WordPress core development team builds WordPress! Follow this site for&nbsp;general updates, status reports, and the occasional code debate. There’s lots of ways to contribute:</p> 
     <ul> 
      <li><strong>Found a bug?</strong> <a href="https://wordpress.org/support/bb-login.php?redirect_to=https://core.trac.wordpress.org/newticket">Create a ticket</a> in our bug tracker.</li> 
      <li><strong>Want to contribute?</strong>&nbsp;Get started quickly with our tickets marked as <a href="https://core.trac.wordpress.org/tickets/good-first-bugs">good first bugs</a> for new contributors. There’s more on our <a href="https://make.wordpress.org/core/reports/">reports page</a>, like <a href="https://core.trac.wordpress.org/tickets/needs-testing">patches needing testing</a>.</li> 
      <li><strong>Other questions?</strong> We also have a detailed <a href="https://make.wordpress.org/core/handbook/">handbook for contributors</a>, complete with tutorials.</li> 
     </ul> 
    </div> 
    <div class="widget-area"> 
     <h3>Communication</h3> 
     <p>We use <a href="https://make.wordpress.org/chat/">Slack</a>&nbsp;for real-time communication. Contributors live all over the world, so there are discussions happening at all hours of the day.</p> 
     <p>Our core development&nbsp;meeting is every Wednesday at 20:00 UTC in the <a href="https://wordpress.slack.com/messages/core/"><strong>#core</strong></a>&nbsp;channel on <a href="https://make.wordpress.org/chat/">Slack</a>. Anyone can join and participate or listen in!</p>
    </div> 
    <script class="o2-data" id="o2-data-5078" data-post-id="5078" type="application/json" style="display:none">[{"type":"post","id":5078,"postID":5078,"cssClasses":"handbook post-5078 type-handbook status-publish hentry author-kpdesign","parentID":0,"titleRaw":"JavaScript Coding Standards","titleFiltered":"JavaScript Coding Standards","titleWasGeneratedFromContent":false,"contentRaw":"JavaScript has become a critical component in developing WordPress-based applications (themes and plugins) as well as WordPress core. Standards are needed for formatting and styling JavaScript code to maintain the same code consistency as the WordPress standards provide for core PHP, HTML, and CSS code.\r\n<blockquote>All code in any code-base should look like a single person typed it, no matter how many people contributed. - <a href=\"https:\/\/github.com\/rwaldron\/idiomatic.js\/\">Principles of Writing Consistent, Idiomatic JavaScript<\/a><\/blockquote>\r\nThe WordPress JavaScript Coding Standards are adapted from the <a href=\"https:\/\/contribute.jquery.org\/style-guide\/js\">jQuery JavaScript Style Guide<\/a>. Our standard differs from the jQuery guidelines in the following ways:\r\n<ul>\r\n \t<li>WordPress uses single quotation marks for string declarations.<\/li>\r\n \t<li>Case statements are indented within switch blocks.<\/li>\r\n \t<li>Function contents are consistently indented, including full-file closure wrappers.<\/li>\r\n \t<li>Some whitespace rules differ, for consistency with the WordPress PHP coding standards.<\/li>\r\n \t<li>jQuery\u2019s 100-character hard line limit is encouraged, but not strictly enforced.<\/li>\r\n<\/ul>\r\nMany of the examples below have been adapted directly from the jQuery style guide; these differences have all been integrated into the examples on this page. Any of the below standards and examples should be considered best practice for WordPress code, unless explicitly noted as anti-patterns.\r\n<h2>Code Refactoring<\/h2>\r\n<blockquote>\"<a href=\"https:\/\/make.wordpress.org\/core\/2011\/03\/23\/code-refactoring\/\">Code refactoring should not be done just because we can.<\/a>\" - Lead Developer Andrew Nacin<\/blockquote>\r\nMany parts of the WordPress code structure for JavaScript are inconsistent in their style. WordPress is working to gradually improve this, so the code will be clean and easy to read at a glance.\r\n\r\nWhile the coding standards are important, refactoring older .js files simply to conform to the standards is not an urgent issue. \"Whitespace-only\" patches for older files are strongly discouraged.\r\n\r\nAll new or updated JavaScript code will be reviewed to ensure it conforms to the standards, and passes JSHint.\r\n<h2>Spacing<\/h2>\r\nUse spaces liberally throughout your code. \"When in doubt, space it out.\"\r\n\r\nThese rules encourage liberal spacing for improved developer readability. The minification process creates a file that is optimized for browsers to read and process.\r\n<ul>\r\n \t<li>Indentation with tabs.<\/li>\r\n \t<li>No whitespace at the end of line or on blank lines.<\/li>\r\n \t<li>Lines should usually be no longer than 80 characters, and should not exceed 100 (counting tabs as 4 spaces). <em>This is a \"soft\" rule, but long lines generally indicate unreadable or disorganized code.<\/em><\/li>\r\n \t<li><code>if<\/code>\/<code>else<\/code>\/<code>for<\/code>\/<code>while<\/code>\/<code>try<\/code> blocks should always use braces, and always go on multiple lines.<\/li>\r\n \t<li>Unary special-character operators (e.g., <code>++<\/code>, <code>--<\/code>) must not have space next to their operand.<\/li>\r\n \t<li>Any <code>,<\/code> and <code>;<\/code> must not have preceding space.<\/li>\r\n \t<li>Any <code>;<\/code> used as a statement terminator must be at the end of the line.<\/li>\r\n \t<li>Any <code>:<\/code> after a property name in an object definition must not have preceding space.<\/li>\r\n \t<li>The <code>?<\/code> and <code>:<\/code> in a ternary conditional must have space on both sides.<\/li>\r\n \t<li>No filler spaces in empty constructs (e.g., <code>{}<\/code>, <code>[]<\/code>, <code>fn()<\/code>).<\/li>\r\n \t<li>There should be a new line at the end of each file.<\/li>\r\n \t<li>Any <code>!<\/code> negation operator should have a following space.<sup>*<\/sup><\/li>\r\n \t<li>All function bodies are indented by one tab, even if the entire file is wrapped in a closure.<sup>*<\/sup><\/li>\r\n \t<li>Spaces may align code within documentation blocks or within a line, but only tabs should be used at the start of a line.<sup>*<\/sup><\/li>\r\n<\/ul>\r\n<strong>*<\/strong>: The WordPress JavaScript standards prefer slightly broader whitespace rules than the jQuery style guide. These deviations are for consistency between the PHP and JavaScript files in the WordPress codebase.\r\n\r\nWhitespace can easily accumulate at the end of a line \u2013 avoid this, as trailing whitespace is caught as an error in JSHint. One way to catch whitespace buildup is enabling visible whitespace characters within your text editor.\r\n<h3>Objects<\/h3>\r\nObject declarations can be made on a single line if they are short (remember the line length guidelines). When an object declaration is too long to fit on one line, there must be one property per line. Property names only need to be quoted if they are reserved words or contain special characters:\r\n\r\n[javascript]\r\n\/\/ Preferred\r\nvar map = {\r\n\tready: 9,\r\n\twhen: 4,\r\n\t'you are': 15\r\n};\r\n\r\n\/\/ Acceptable for small objects\r\nvar map = { ready: 9, when: 4, 'you are': 15 };\r\n\r\n\/\/ Bad\r\nvar map = { ready: 9,\r\n\twhen: 4, 'you are': 15 };\r\n[\/javascript]\r\n\r\n<h3>Arrays and Function Calls<\/h3>\r\nAlways include extra spaces around elements and arguments:\r\n\r\n[javascript]\r\narray = [ a, b ];\r\n\r\nfoo( arg );\r\n\r\nfoo( 'string', object );\r\n\r\nfoo( options, object[ property ] );\r\n\r\nfoo( node, 'property', 2 );\r\n[\/javascript]\r\n\r\nExceptions:\r\n\r\n[javascript]\r\n\/\/ For consistency with our PHP standards, do not include a space around\r\n\/\/ string literals or integers used as key values in array notation:\r\nprop = object['default'];\r\nfirstArrayElement = arr[0];\r\n\r\n\/\/ Function with a callback, object, or array as the sole argument:\r\n\/\/ No space on either side of the argument\r\nfoo(function() {\r\n\t\/\/ Do stuff\r\n});\r\n\r\nfoo({\r\n\ta: 'alpha',\r\n\tb: 'beta'\r\n});\r\n\r\nfoo([\r\n\t'alpha',\r\n\t'beta'\r\n]);\r\n\r\n\/\/ Function with a callback, object, or array as the first argument:\r\n\/\/ No space before the first argument\r\nfoo(function() {\r\n\t\/\/ Do stuff\r\n}, options );\r\n\r\n\/\/ Function with a callback, object, or array as the last argument:\r\n\/\/ No space after after the last argument\r\nfoo( data, function() {\r\n\t\/\/ Do stuff\r\n});\r\n[\/javascript]\r\n\r\n<h3>Examples of Good Spacing<\/h3>\r\n\r\n[javascript]\r\nvar i;\r\n\r\nif ( condition ) {\r\n\tdoSomething( 'with a string' );\r\n} else if ( otherCondition ) {\r\n\totherThing({\r\n\t\tkey: value,\r\n\t\totherKey: otherValue\r\n\t});\r\n} else {\r\n\tsomethingElse( true );\r\n}\r\n\r\n\/\/ Unlike jQuery, WordPress prefers a space after the ! negation operator.\r\n\/\/ This is also done to conform to our PHP standards.\r\nwhile ( ! condition ) {\r\n\titerating++;\r\n}\r\n\r\nfor ( i = 0; i < 100; i++ ) {\r\n\tobject[ array[ i ] ] = someFn( i );\r\n\t$( '.container' ).val( array[ i ] );\r\n}\r\n\r\ntry {\r\n\t\/\/ Expressions\r\n} catch ( e ) {\r\n\t\/\/ Expressions\r\n}\r\n[\/javascript]\r\n\r\n<h2>Semicolons<\/h2>\r\nUse them. Never rely on Automatic Semicolon Insertion (ASI).\r\n<h2>Indentation and Line Breaks<\/h2>\r\nIndentation and line breaks add readability to complex statements.\r\n\r\nTabs should be used for indentation. Even if the entire file is contained in a closure (i.e., an immediately invoked function), the contents of that function should be indented by one tab:\r\n\r\n[javascript]\r\n(function( $ ) {\r\n\t\/\/ Expressions indented\r\n\r\n\tfunction doSomething() {\r\n\t\t\/\/ Expressions indented\r\n\t}\r\n})( jQuery );\r\n[\/javascript]\r\n\r\n<h3>Blocks and Curly Braces<\/h3>\r\n<code>if<\/code>, <code>else<\/code>, <code>for<\/code>, <code>while<\/code>, and <code>try<\/code> blocks should always use braces, and always go on multiple lines. The opening brace should be on the same line as the function definition, the conditional, or the loop. The closing brace should be on the line directly following the last statement of the block.\r\n\r\n[javascript]\r\nvar a, b, c;\r\n\r\nif ( myFunction() ) {\r\n\t\/\/ Expressions\r\n} else if ( ( a && b ) || c ) {\r\n\t\/\/ Expressions\r\n} else {\r\n\t\/\/ Expressions\r\n}\r\n[\/javascript]\r\n\r\n<h3>Multi-line Statements<\/h3>\r\nWhen a statement is too long to fit on one line, line breaks must occur after an operator.\r\n\r\n[javascript]\r\n\/\/ Bad\r\nvar html = '<p>The sum of ' + a + ' and ' + b + ' plus ' + c\r\n\t+ ' is ' + ( a + b + c );\r\n\r\n\/\/ Good\r\nvar html = '<p>The sum of ' + a + ' and ' + b + ' plus ' + c +\r\n\t' is ' + ( a + b + c );\r\n[\/javascript]\r\n\r\nLines should be broken into logical groups if it improves readability, such as splitting each expression of a ternary operator onto its own line, even if both will fit on a single line.\r\n\r\n[javascript]\r\n\/\/ Acceptable\r\nvar baz = ( true === conditionalStatement() ) ? 'thing 1' : 'thing 2';\r\n\r\n\/\/ Better\r\nvar baz = firstCondition( foo ) && secondCondition( bar ) ?\r\n\tqux( foo, bar ) :\r\n\tfoo;\r\n[\/javascript]\r\n\r\nWhen a conditional is too long to fit on one line, successive lines must be indented one extra level to distinguish them from the body.\r\n\r\n[javascript]\r\n\tif ( firstCondition() && secondCondition() &&\r\n\t\t\tthirdCondition() ) {\r\n\t\tdoStuff();\r\n\t}\r\n[\/javascript]\r\n\r\n<h3>Chained Method Calls<\/h3>\r\nWhen a chain of method calls is too long to fit on one line, there must be one call per line, with the first call on a separate line from the object the methods are called on. If the method changes the context, an extra level of indentation must be used.\r\n\r\n[javascript]\r\nelements\r\n\t.addClass( 'foo' )\r\n\t.children()\r\n\t\t.html( 'hello' )\r\n\t.end()\r\n\t.appendTo( 'body' );\r\n[\/javascript]\r\n\r\n<h2>Assignments and Globals<\/h2>\r\n<h3>Declaring Variables With var<\/h3>\r\nEach function should begin with a single comma-delimited <code>var<\/code> statement that declares any local variables necessary. If a function does not declare a variable using <code>var<\/code>, that variable can leak into an outer scope (which is frequently the global scope, a worst-case scenario), and can unwittingly refer to and modify that data.\r\n\r\nAssignments within the <code>var<\/code> statement should be listed on individual lines, while declarations can be grouped on a single line. Any additional lines should be indented with an additional tab. Objects and functions that occupy more than a handful of lines should be assigned outside of the <code>var<\/code> statement, to avoid over-indentation.\r\n\r\n[javascript]\r\n\/\/ Good\r\nvar k, m, length,\r\n\t\/\/ Indent subsequent lines by one tab\r\n\tvalue = 'WordPress';\r\n\r\n\/\/ Bad\r\nvar foo = true;\r\nvar bar = false;\r\nvar a;\r\nvar b;\r\nvar c;\r\n[\/javascript]\r\n\r\n<h3>Globals<\/h3>\r\nIn the past, WordPress core made heavier use of global variables. Since core JavaScript files are sometimes used within plugins, existing globals should not be removed.\r\n\r\nAll globals used within a file should be documented at the top of that file.\u00a0Multiple globals can be comma-separated.\r\n\r\nThis example would make <code>passwordStrength<\/code> an allowed global variable within that file:\r\n\r\n[javascript]\r\n\/* global passwordStrength:true *\/\r\n[\/javascript]\r\n\r\nThe \"true\" after <code>passwordStrength<\/code> means that this global is being defined within this file. If you are accessing a global which is defined elsewhere, omit\u00a0<code>:true<\/code> to designate the global as read-only.\r\n\r\n<strong>Common Libraries<\/strong>\r\n\r\nBackbone, jQuery, Underscore, and the global <code>wp<\/code> object are all registered as allowed globals in the root <code>.jshintrc<\/code> file.\r\n\r\nBackbone and Underscore may be accessed directly at any time. jQuery should be accessed through <code>$<\/code> by passing the <code>jQuery<\/code> object into an anonymous function:\r\n\r\n[javascript]\r\n(function( $ ) {\r\n  \/\/ Expressions\r\n})( jQuery );\r\n[\/javascript]\r\n\r\nThis will negate the need to call <code>.noConflict()<\/code>, or to set <code>$<\/code> using another variable.\r\nFiles which add to, or modify, the <code>wp<\/code> object must safely access the global to avoid overwriting previously set properties:\r\n\r\n[javascript]\r\n\/\/ At the top of the file, set \"wp\" to its existing value (if present)\r\nwindow.wp = window.wp || {};\r\n[\/javascript]\r\n\r\n<h2>Naming Conventions<\/h2>\r\nVariable and function names should be full words, using camel case with a lowercase first letter. This is an area where this standard differs from the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#naming-conventions\">WordPress PHP coding standards<\/a>.\r\n\r\nConstructors intended for use with <code>new<\/code> should have a capital first letter (UpperCamelCase).\r\n\r\nNames should be descriptive, but not excessively so. Exceptions are allowed for iterators, such as the use of <code>i<\/code> to represent the index in a loop.\r\n<h2>Comments<\/h2>\r\nComments come before the code to which they refer, and should always be preceded by a blank line. Capitalize the first letter of the comment, and include a period at the end when writing full sentences. There must be a single space between the comment token (<code>\/\/<\/code>) and the comment text.\r\n\r\nSingle line comments:\r\n\r\n[javascript]\r\nsomeStatement();\r\n\r\n\/\/ Explanation of something complex on the next line\r\n$( 'p' ).doSomething();\r\n[\/javascript]\r\n\r\nMulti-line comments should be used for long comments, see also the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/inline-documentation-standards\/javascript\/#multi-line-comments\">JavaScript Documentation Standards<\/a>:\r\n\r\n[javascript]\r\n\/*\r\n * This is a comment that is long enough to warrant being stretched\r\n * over the span of multiple lines.\r\n *\/\r\n[\/javascript]\r\n\r\nInline comments are allowed as an exception when used to annotate special arguments in formal parameter lists:\r\n\r\n[javascript]\r\nfunction foo( types, selector, data, fn, \/* INTERNAL *\/ one ) {\r\n\t\/\/ Do stuff\r\n}\r\n[\/javascript]\r\n\r\n<h2>Equality<\/h2>\r\nStrict equality checks (<code>===<\/code>) must be used in favor of abstract equality checks (<code>==<\/code>). The <em>only<\/em> exception is when checking for both <code>undefined<\/code> and <code>null<\/code> by way of <code>null<\/code>.\r\n\r\n[javascript]\r\n\/\/ Check for both undefined and null values, for some important reason.\r\nif ( undefOrNull == null ) {\r\n\t\/\/ Expressions\r\n}\r\n[\/javascript]\r\n\r\n<h2>Type Checks<\/h2>\r\nThese are the preferred ways of checking the type of an object:\r\n<ul>\r\n \t<li>String: <code>typeof object === 'string'<\/code><\/li>\r\n \t<li>Number: <code>typeof object === 'number'<\/code><\/li>\r\n \t<li>Boolean: <code>typeof object === 'boolean'<\/code><\/li>\r\n \t<li>Object: <code>typeof object === 'object'<\/code> or <code>_.isObject( object )<\/code><\/li>\r\n \t<li>Plain Object: <code>jQuery.isPlainObject( object )<\/code><\/li>\r\n \t<li>Function: <code>_.isFunction( object)<\/code> or <code>jQuery.isFunction( object )<\/code><\/li>\r\n \t<li>Array: <code>_.isArray( object )<\/code> or <code>jQuery.isArray( object )<\/code><\/li>\r\n \t<li>Element: <code>object.nodeType<\/code> or <code>_.isElement( object )<\/code><\/li>\r\n \t<li>null: <code>object === null<\/code><\/li>\r\n \t<li>null or undefined: <code>object == null<\/code><\/li>\r\n \t<li>undefined:\r\n<ul>\r\n \t<li>Global Variables: <code>typeof variable === 'undefined'<\/code><\/li>\r\n \t<li>Local Variables: <code>variable === undefined<\/code><\/li>\r\n \t<li>Properties: <code>object.prop === undefined<\/code><\/li>\r\n \t<li>Any of the above: <code>_.isUndefined( object )<\/code><\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\nAnywhere Backbone or Underscore are already used, you are encouraged to use <a href=\"http:\/\/underscorejs.org\/#isElement\">Underscore.js<\/a>'s type checking methods over jQuery's.\r\n<h2>Strings<\/h2>\r\nUse single-quotes for string literals:\r\n\r\n[javascript]\r\nvar myStr = 'strings should be contained in single quotes';\r\n[\/javascript]\r\n\r\nWhen a string contains single quotes, they need to be escaped with a backslash (<code>\\<\/code>):\r\n\r\n[javascript]\r\n\/\/ Escape single quotes within strings:\r\n'Note the backslash before the \\'single quotes\\'';\r\n[\/javascript]\r\n\r\n<h2>Switch Statements<\/h2>\r\nThe usage of <code>switch<\/code> statements is generally discouraged, but can be useful when there are a large number of cases - especially when multiple cases can be handled by the same block, or fall-through logic (the <code>default<\/code> case) can be leveraged.\r\n\r\nWhen using <code>switch<\/code> statements:\r\n\r\n- Use a <code>break<\/code> for each case other than <code>default<\/code>. When allowing statements to \"fall through,\" note that explicitly.\r\n- Indent <code>case<\/code> statements one tab within the <code>switch<\/code>.\r\n\r\n[javascript]\r\nswitch ( event.keyCode ) {\r\n\r\n\t\/\/ ENTER and SPACE both trigger x()\r\n\tcase $.ui.keyCode.ENTER:\r\n\tcase $.ui.keyCode.SPACE:\r\n\t\tx();\r\n\t\tbreak;\r\n\tcase $.ui.keyCode.ESCAPE:\r\n\t\ty();\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tz();\r\n}\r\n[\/javascript]\r\n\r\nIt is not recommended to return a value from within a switch statement: use the <code>case<\/code> blocks to set values, then <code>return<\/code> those values at the end.\r\n\r\n[javascript]\r\nfunction getKeyCode( keyCode ) {\r\n\tvar result;\r\n\r\n\tswitch ( event.keyCode ) {\r\n\t\tcase $.ui.keyCode.ENTER:\r\n\t\tcase $.ui.keyCode.SPACE:\r\n\t\t\tresult = 'commit';\r\n\t\t\tbreak;\r\n\t\tcase $.ui.keyCode.ESCAPE:\r\n\t\t\tresult = 'exit';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tresult = 'default';\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n[\/javascript]\r\n\r\n<h2>Best Practices<\/h2>\r\n<h3>Arrays<\/h3>\r\nCreating arrays in JavaScript should be done using the shorthand <code>[]<\/code> constructor rather than the <code>new Array()<\/code> notation.\r\n\r\n[javascript]\r\nvar myArray = [];\r\n[\/javascript]\r\n\r\nYou can initialize an array during construction:\r\n\r\n[javascript]\r\nvar myArray = [ 1, 'WordPress', 2, 'Blog' ];\r\n[\/javascript]\r\n\r\nIn JavaScript, associative arrays are defined as objects.\r\n<h3>Objects<\/h3>\r\nThere are many ways to create objects in JavaScript. Object literal notation, <code>{}<\/code>, is both the most performant, and also the easiest to read.\r\n\r\n[javascript]\r\nvar myObj = {};\r\n[\/javascript]\r\n\r\nObject literal notation should be used unless the object requires a specific prototype, in which case the object should be created by calling a constructor function with <code>new<\/code>.\r\n\r\n[javascript]\r\nvar myObj = new ConstructorMethod();\r\n[\/javascript]\r\n\r\nObject properties should be accessed via dot notation, unless the key is a variable, a <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Reserved_Words\">reserved word<\/a>, or a string that would not be a valid identifier:\r\n\r\n[javascript]\r\nprop = object.propertyName;\r\nprop = object[ variableKey ];\r\nprop = object['default'];\r\nprop = object['key-with-hyphens'];\r\n[\/javascript]\r\n\r\n<h3>\"Yoda\" Conditions<\/h3>\r\nFor consistency with the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#yoda-conditions\">PHP code standards<\/a>, whenever you are comparing an object to a string, boolean, integer, or other constant or literal, the variable should always be put on the right hand side, and the constant or literal put on the left.\r\n\r\n[javascript]\r\nif ( true === myCondition ) {\r\n\t\/\/ Do stuff\r\n}\r\n[\/javascript]\r\n\r\n\"A little bizarre, it is, to read. Get used to it, you will.\"\r\n<h3>Iteration<\/h3>\r\nWhen iterating over a large collection using a <code>for<\/code> loop, it is recommended to store the loop's max value as a variable rather than re-computing the maximum every time:\r\n\r\n[javascript]\r\n\/\/ Good & Efficient\r\nvar i, max;\r\n\r\n\/\/ getItemCount() gets called once\r\nfor ( i = 0, max = getItemCount(); i < max; i++ ) {\r\n\t\/\/ Do stuff\r\n}\r\n\r\n\/\/ Bad & Potentially Inefficient:\r\n\/\/ getItemCount() gets called every time\r\nfor ( i = 0; i < getItemCount(); i++ ) {\r\n\t\/\/ Do stuff\r\n}\r\n[\/javascript]\r\n\r\n<h3>Underscore.js Collection Functions<\/h3>\r\nLearn and understand Underscore's <a href=\"http:\/\/underscorejs.org\/#collections\">collection and array methods<\/a>. These functions, including <code>_.each<\/code>, <code>_.map<\/code>, and <code>_.reduce<\/code>, allow for efficient, readable transformations of large data sets.\r\n\r\nUnderscore also permits jQuery-style chaining with regular JavaScript objects:\r\n\r\n[javascript]\r\nvar obj = {\r\n\tfirst: 'thing 1',\r\n\tsecond: 'thing 2',\r\n\tthird: 'lox'\r\n};\r\n\r\nvar arr = _.chain( obj )\r\n\t.keys()\r\n\t.map(function( key ) {\r\n\t\treturn key + ' comes ' + obj[ key ];\r\n\t})\r\n\t\/\/ Exit the chain\r\n\t.value();\r\n\r\n\/\/ arr === [ 'first comes thing 1', 'second comes thing 2', 'third comes lox' ]\r\n[\/javascript]\r\n\r\n<h3>Iterating Over jQuery Collections<\/h3>\r\nThe only time jQuery should be used for iteration is when iterating over a collection of jQuery objects:\r\n\r\n[javascript]\r\n$tabs.each(function( index, element ) {\r\n\tvar $element = $( element );\r\n\r\n\t\/\/ Do stuff to $element\r\n});\r\n[\/javascript]\r\n\r\nNever use jQuery to iterate over raw data or vanilla JavaScript objects.\r\n<h2>JSHint<\/h2>\r\n<a href=\"http:\/\/jshint.com\">JSHint<\/a> is an automated code quality tool, designed to catch errors in your JavaScript code. JSHint is used in WordPress development to quickly verify that a patch has not introduced any logic or syntax errors to the front-end.\r\n<h3>Installing and Running JSHint<\/h3>\r\nJSHint is run using a tool called <a href=\"https:\/\/gruntjs.com\/\">Grunt<\/a>. Both JSHint and Grunt are programs written in <a href=\"https:\/\/nodejs.org\/\">Node.js<\/a>. A configuration file that comes with the WordPress development code makes it easy to install and configure these tools.\r\n\r\nTo install Node.js, click the Install link on the <a href=\"https:\/\/nodejs.org\/\">Node<\/a> website. The correct install file for your operating system will be downloaded. Follow the installation steps for your operating system to install the program.\r\n\r\nOnce Node.js is installed, open a command line window and navigate to the directory where you <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/tutorials\/installing-wordpress-locally\/from-svn\/\">checked out a copy of the WordPress SVN repository<\/a> (use <code>cd ~\/directoryname<\/code>). You should be in the root directory which contains the <code>package.json<\/code> file.\r\n\r\nNext, type <code>npm install<\/code> into the command line window. This will download and install all the Node packages used in WordPress development.\r\n\r\nFinally, type <code>npm install -g grunt-cli<\/code> to install the Grunt Command Line Interface (CLI) package. Grunt CLI is what is used to actually run the Grunt tasks in WordPress.\r\n\r\nYou should now be able to type <code>grunt jshint<\/code> to have Grunt check all the WordPress JavaScript files for syntax and logic errors. To only check core code, type <code>grunt jshint:core<\/code>; to only check unit test .js files, type <code>grunt jshint:tests<\/code>.\r\n\r\n<strong>JSHint Settings<\/strong>\r\n\r\nThe configuration options used for JSHint are stored within a <a title=\"WordPress JSHint file in svn trunk\" href=\"https:\/\/develop.svn.wordpress.org\/trunk\/.jshintrc\"><code>.jshintrc<\/code> file<\/a> in the WordPress SVN repository. This file defines which errors JSHint should flag if it finds them within the WordPress source code.\r\n\r\n<strong>Target A Single File<\/strong>\r\n\r\nTo specify a single file for JSHint to check, add <code>--file=filename.js<\/code> to the end of the command. For example, this will only check the file named \"admin-bar.js\" within WordPress's core JavaScript files:\r\n\r\n<code>grunt jshint:core --file=admin-bar.js<\/code>\r\n\r\nAnd this would only check the \"password-strength-meter.js\" file within the unit tests directory:\r\n\r\n<code>grunt jshint:tests --file=password-strength-meter.js<\/code>\r\n\r\nLimiting JSHint to a single file can be useful if you are only working on one or two specific files and don't want to wait for JSHint to process every single file each time it runs.\r\n<h3>JSHint Overrides: Ignore Blocks<\/h3>\r\nIn some situations, parts of a file should be excluded from JSHint. As an example, the script file for the admin bar contains the minified code for the jQuery HoverIntent plugin - this is third-party code that should not pass through JSHint, even though it is part of a WordPress core JavaScript file.\r\n\r\nTo exclude a specific file region from being processed by JSHint, enclose it in JSHint directive comments:\r\n\r\n[javascript]\r\n\/* jshint ignore:start *\/\r\nif ( typeof jQuery.fn.hoverIntent === 'undefined' ) {\r\n\t\/\/ hoverIntent r6 - Copy of wp-includes\/js\/hoverIntent.min.js\r\n\t(function(a){a.fn.hoverIntent=...............\r\n}\r\n\/* jshint ignore:end *\/\r\n[\/javascript]\r\n\r\n<h2>Credits<\/h2>\r\n<ul>\r\n \t<li>The jQuery examples are adapted from the <a href=\"https:\/\/contribute.jquery.org\/style-guide\/js\">jQuery JavaScript Style Guide<\/a>, which is made available under the MIT license.<\/li>\r\n<\/ul>","contentFiltered":"<div class='content-area'>\n<h3>Welcome!<\/h3>\n<p>The WordPress core development team builds WordPress! Follow this site for\u00a0general updates, status reports, and the occasional code debate. There&#8217;s lots of ways to contribute:<\/p>\n<ul>\n<li><strong>Found a bug?<\/strong> <a href=\"https:\/\/wordpress.org\/support\/bb-login.php?redirect_to=https:\/\/core.trac.wordpress.org\/newticket\">Create a ticket<\/a> in our bug tracker.<\/li>\n<li><strong>Want to contribute?<\/strong>\u00a0Get started quickly with our tickets marked as <a href=\"https:\/\/core.trac.wordpress.org\/tickets\/good-first-bugs\">good first bugs<\/a> for new contributors. There&#8217;s more on our <a href=\"https:\/\/make.wordpress.org\/core\/reports\/\">reports page<\/a>, like <a href=\"https:\/\/core.trac.wordpress.org\/tickets\/needs-testing\">patches needing testing<\/a>.<\/li>\n<li><strong>Other questions?<\/strong> We also have a detailed <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/\">handbook for contributors<\/a>, complete with tutorials.<\/li>\n<\/ul>\n<\/div>\n<div class='widget-area'>\n<h3>Communication<\/h3>\n<p>We use <a href=\"https:\/\/make.wordpress.org\/chat\/\">Slack<\/a>\u00a0for real-time communication. Contributors live all over the world, so there are discussions happening at all hours of the day.<\/p>\n<p>Our core development\u00a0meeting is every Wednesday at 20:00 UTC in the <a href=\"https:\/\/wordpress.slack.com\/messages\/core\/\"><strong>#core<\/strong><\/a>\u00a0channel on <a href=\"https:\/\/make.wordpress.org\/chat\/\">Slack<\/a>. Anyone can join and participate or listen in!<\/div>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/","unixtime":1364687513,"unixtimeModified":1496903769,"entryHeaderMeta":"","linkPages":"","footerEntryMeta":"","tagsRaw":"","tagsArray":[],"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F","hasPrevPost":true,"prevPostTitle":"Installing XAMPP","prevPostURL":"https:\/\/make.wordpress.org\/core\/handbook\/tutorials\/installing-a-local-server\/xampp\/","hasNextPost":true,"nextPostTitle":"Inline Documentation Standards","nextPostURL":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/inline-documentation-standards\/","commentsOpen":false,"is_xpost":false,"editURL":null,"postActions":"<nav class='o2-dropdown-actions o2-post-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><span>Post Actions<\/span><\/button><ul><li><a href=\"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/\" title=\"Scroll to comments\"  class=\"o2-scroll-to-comments genericon  genericon-downarrow\"  data-action=\"scrolltocomments\"  data-actionstate=\"default\" >Scroll<\/a><\/li><li><a href=\"https:\/\/make.wordpress.org\/core\/?p=5078\" title=\"Shortlink\"  class=\"short-link o2-short-link genericon  genericon-link\"  data-action=\"shortlink\"  data-actionstate=\"default\" >Shortlink<\/a><\/li><\/ul><\/nav>","comments":[{"type":"comment","id":"8778","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment even thread-even depth-1","parentID":"0","contentRaw":"Is there a position on whether or not ?comma-first? coding style is OK, for example to in declaring variables and writing object literals?","contentFiltered":"<p>Is there a position on whether or not ?comma-first? coding style is OK, for example to in declaring variables and writing object literals?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-8778","unixtime":1366041670,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-8778","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1366041670,"hasChildren":false,"noprivUserName":"Weston Ruter","noprivUserHash":"ac01fb365e479280ccc707153bc71e2a","noprivUserURL":"http:\/\/weston.ruter.net\/"},{"type":"comment","id":"8779","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment odd alt depth-2","parentID":"8778","contentRaw":"That is all dependent on the developer and how he\/she is instantiating their objects and writing their JS.","contentFiltered":"<p>That is all dependent on the developer and how he\/she is instantiating their objects and writing their JS.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-8779","unixtime":1366754331,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-8779","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1366754331,"hasChildren":false,"noprivUserName":"carldanley","noprivUserHash":"f9383ce985bd48ed45dcff66546f30a7","noprivUserURL":"http:\/\/www.codebyter.com"},{"type":"comment","id":"8906","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-peterrknight even thread-odd thread-alt depth-1","parentID":"0","contentRaw":"I'm a little confused with the ternary operator guidelines. It states that it more or less follows the php guidelines. The wording though says the result needs to be true or false and so if you take the php example, that would be considered 'bad'. Isn't it overly restrictive?\n\nhere's the php example http:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#ternary-operator","contentFiltered":"<p>I&#8217;m a little confused with the ternary operator guidelines. It states that it more or less follows the php guidelines. The wording though says the result needs to be true or false and so if you take the php example, that would be considered &#8216;bad&#8217;. Isn&#8217;t it overly restrictive?<\/p>\n<p>here&#8217;s the php example <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#ternary-operator\" rel=\"nofollow\">https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#ternary-operator<\/a><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-8906","unixtime":1369988045,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-8906","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1369988045,"hasChildren":false,"userLogin":"PeterRKnight","userNicename":"peterrknight"},{"type":"comment","id":"8930","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-nacin odd alt depth-2","parentID":"8906","contentRaw":"I don't understand the ternary operator guideline here either. <code>$x = $y ? true : false<\/code> isn't a ternary, it's a too-verbose way to write out a boolean statement. Something like <code>$x = (bool) $y<\/code>, or even (for JS) <code>$x = !! $y<\/code>.","contentFiltered":"<p>I don&#8217;t understand the ternary operator guideline here either. <code>$x = $y ? true : false<\/code> isn&#8217;t a ternary, it&#8217;s a too-verbose way to write out a boolean statement. Something like <code>$x = (bool) $y<\/code>, or even (for JS) <code>$x = !! $y<\/code>.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-8930","unixtime":1370291355,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-8930","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1370291355,"hasChildren":false,"userLogin":"nacin","userNicename":"nacin"},{"type":"comment","id":"9139","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-pauldewouters even thread-even depth-1","parentID":"0","contentRaw":"Why are the spacing standards different between JavaScript and PHP for arrays?\nIn PHP, the standard is no spacing inside the brackets, and in JavaScript, it's the opposite.","contentFiltered":"<p>Why are the spacing standards different between JavaScript and PHP for arrays?<br \/>\nIn PHP, the standard is no spacing inside the brackets, and in JavaScript, it&#8217;s the opposite.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9139","unixtime":1372159210,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9139","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1372159210,"hasChildren":false,"userLogin":"pauldewouters","userNicename":"pauldewouters"},{"type":"comment","id":"9182","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-beaulebens odd alt depth-2","parentID":"9139","contentRaw":"Actually in PHP there are supposed to be spaces in array definitions as well (according to the code standards). There are a few places in core where that's not done, but that's mostly older code that was not done according to the current standards. When in doubt, space it out.","contentFiltered":"<p>Actually in PHP there are supposed to be spaces in array definitions as well (according to the code standards). There are a few places in core where that&#8217;s not done, but that&#8217;s mostly older code that was not done according to the current standards. When in doubt, space it out.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9182","unixtime":1372694037,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9182","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1372694037,"hasChildren":false,"userLogin":"beaulebens","userNicename":"beaulebens"},{"type":"comment","id":"9426","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-tommcfarlin even depth-2","parentID":"8778","contentRaw":"There's currently no position on this. \n\nPersonally, I like standard style more; however, I also agree with Carl Danley that this is up to the discretion of the developer.\n\nUltimately, I'd love to see this standardized so if there's a majority who prefers a certain style, we can adopt it.\n\nFor what it's worth, I don't think either one is less error prone than the other. I tend to find that standard style is a bit more like written language with commas after a clause than starting a line (if that makes sense).","contentFiltered":"<p>There&#8217;s currently no position on this. <\/p>\n<p>Personally, I like standard style more; however, I also agree with Carl Danley that this is up to the discretion of the developer.<\/p>\n<p>Ultimately, I&#8217;d love to see this standardized so if there&#8217;s a majority who prefers a certain style, we can adopt it.<\/p>\n<p>For what it&#8217;s worth, I don&#8217;t think either one is less error prone than the other. I tend to find that standard style is a bit more like written language with commas after a clause than starting a line (if that makes sense).<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9426","unixtime":1375384540,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9426","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1375384540,"hasChildren":false,"userLogin":"tommcfarlin","userNicename":"tommcfarlin"},{"type":"comment","id":"9427","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-tommcfarlin odd alt depth-2","parentID":"8906","contentRaw":"Agree with both Peter and Nacin on this.\n\nI'd love to cut down on verbosity. We could simply update the first ternary guide to something like this:\n\n<code>\nvar fixedP;\nfixedP = 'WordPress' === $('#comment').val();\n<\/code>\n\nAnd the second one as-is, or offer an alternative. There's a balance to be struck between trying to write clever code and concise, readable code.\n\nSuggestions welcome.","contentFiltered":"<p>Agree with both Peter and Nacin on this.<\/p>\n<p>I&#8217;d love to cut down on verbosity. We could simply update the first ternary guide to something like this:<\/p>\n<p><code><br \/>\nvar fixedP;<br \/>\nfixedP = 'WordPress' === $('#comment').val();<br \/>\n<\/code><\/p>\n<p>And the second one as-is, or offer an alternative. There&#8217;s a balance to be struck between trying to write clever code and concise, readable code.<\/p>\n<p>Suggestions welcome.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9427","unixtime":1375384744,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9427","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1375384744,"hasChildren":false,"userLogin":"tommcfarlin","userNicename":"tommcfarlin"},{"type":"comment","id":"9428","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-tommcfarlin even depth-3","parentID":"9182","contentRaw":"^ This. \"When in doubt, space it out.\"","contentFiltered":"<p>^ This. &#8220;When in doubt, space it out.&#8221;<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9428","unixtime":1375384801,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9428","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":3,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1375384801,"hasChildren":false,"userLogin":"tommcfarlin","userNicename":"tommcfarlin"},{"type":"comment","id":"9969","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-rwdrwd odd alt depth-2","parentID":"8906","contentRaw":"Hi!\n\nI'm also confused with this ternary rule, it seems to remove the ability to use them in JavaScript, since\n\nfixedP = 'WordPress' === $('#comment').val() ? true : false;\n\ncan just be written as \n\nfixedP = ( 'WordPress' === $('#comment').val() )\n\nIn JavaScript any condition you would use to determine true or false can just be written as an expression in this way.\n\nIt does seem overly restrictive to me.","contentFiltered":"<p>Hi!<\/p>\n<p>I&#8217;m also confused with this ternary rule, it seems to remove the ability to use them in JavaScript, since<\/p>\n<p>fixedP = &#8216;WordPress&#8217; === $(&#8216;#comment&#8217;).val() ? true : false;<\/p>\n<p>can just be written as <\/p>\n<p>fixedP = ( &#8216;WordPress&#8217; === $(&#8216;#comment&#8217;).val() )<\/p>\n<p>In JavaScript any condition you would use to determine true or false can just be written as an expression in this way.<\/p>\n<p>It does seem overly restrictive to me.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9969","unixtime":1376662859,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9969","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1376662859,"hasChildren":false,"userLogin":"rwdrwd","userNicename":"rwdrwd"},{"type":"comment","id":"9976","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-rwdrwd even thread-odd thread-alt depth-1","parentID":"0","contentRaw":"Just interested in why the choice to not use snake_case for JavaScript was triggered? I don't think it's a JSLint preference so it surprised me that the guidelines would differ from PHP in this regard.","contentFiltered":"<p>Just interested in why the choice to not use snake_case for JavaScript was triggered? I don&#8217;t think it&#8217;s a JSLint preference so it surprised me that the guidelines would differ from PHP in this regard.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9976","unixtime":1376670960,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9976","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1376670960,"hasChildren":false,"userLogin":"rwdrwd","userNicename":"rwdrwd"},{"type":"comment","id":"10010","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-tommcfarlin odd alt depth-3","parentID":"9969","contentRaw":"Totally down with this. The example was meant more to provide an example of using the ternary operator than the actual content in question.\n\nI agree with you.","contentFiltered":"<p>Totally down with this. The example was meant more to provide an example of using the ternary operator than the actual content in question.<\/p>\n<p>I agree with you.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-10010","unixtime":1376933943,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-10010","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":3,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1376933943,"hasChildren":false,"userLogin":"tommcfarlin","userNicename":"tommcfarlin"},{"type":"comment","id":"10012","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-tommcfarlin even depth-2","parentID":"9976","contentRaw":"Honestly, this was done because it's a carry over from some of the habits of PHP and it's simply trying to bridge the gap.\n\nI'll be the first to admit that I (despite the fact that many JavaScript developers complain about how strict it is) enjoy using JSLint and use it whenever possible.\n\nIf we, as a community, want to use it our method for JavaScript code quality, I'm all for it, but I think we need to get buy in from more than just a couple of people as it will drastically complain about a lot of the code that we have today (not that that's a bad thing ... but it is a thing :)).","contentFiltered":"<p>Honestly, this was done because it&#8217;s a carry over from some of the habits of PHP and it&#8217;s simply trying to bridge the gap.<\/p>\n<p>I&#8217;ll be the first to admit that I (despite the fact that many JavaScript developers complain about how strict it is) enjoy using JSLint and use it whenever possible.<\/p>\n<p>If we, as a community, want to use it our method for JavaScript code quality, I&#8217;m all for it, but I think we need to get buy in from more than just a couple of people as it will drastically complain about a lot of the code that we have today (not that that&#8217;s a bad thing &#8230; but it is a thing :)).<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-10012","unixtime":1376934130,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-10012","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1376934130,"hasChildren":false,"userLogin":"tommcfarlin","userNicename":"tommcfarlin"},{"type":"comment","id":"10208","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-iandunn odd alt thread-even depth-1","parentID":"0","contentRaw":"Should the example in the jQuery section be changed to add in whitespace?\n\n<code>\n( function ( $ ) {\n    \/\/ ...\n} ( jQuery ) );\n<\/code>\n\nOtherwise it's inconsistent with the current whitespace rules.\n\nAlso, if we're <a href=\"http:\/\/core.trac.wordpress.org\/ticket\/25088#comment:31\" rel=\"nofollow\">making an exception to be consistent<\/a> with the following Query convention, then it'd be good to document that here too\n\n<code>\n$( selector ).event( function() {\n    \/\/ ...\n});\n<\/code>","contentFiltered":"<p>Should the example in the jQuery section be changed to add in whitespace?<\/p>\n<p><code><br \/>\n( function ( $ ) {<br \/>\n    \/\/ ...<br \/>\n} ( jQuery ) );<br \/>\n<\/code><\/p>\n<p>Otherwise it&#8217;s inconsistent with the current whitespace rules.<\/p>\n<p>Also, if we&#8217;re <a href=\"https:\/\/core.trac.wordpress.org\/ticket\/25088#comment:31\" rel=\"nofollow\">making an exception to be consistent<\/a> with the following Query convention, then it&#8217;d be good to document that here too<\/p>\n<p><code><br \/>\n$( selector ).event( function() {<br \/>\n    \/\/ ...<br \/>\n});<br \/>\n<\/code><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-10208","unixtime":1377882420,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-10208","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1377882420,"hasChildren":false,"userLogin":"iandunn","userNicename":"iandunn"},{"type":"comment","id":"11363","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-pdclark even depth-2","parentID":"10208","contentRaw":"If we're basing whitespace rules partly on jQuery conventions, jQuery does make exceptions for anonymous functions & callbacks: http:\/\/contribute.jquery.org\/style-guide\/js\/#spacing","contentFiltered":"<p>If we&#8217;re basing whitespace rules partly on jQuery conventions, jQuery does make exceptions for anonymous functions &amp; callbacks: <a href=\"http:\/\/contribute.jquery.org\/style-guide\/js\/#spacing\" rel=\"nofollow\">http:\/\/contribute.jquery.org\/style-guide\/js\/#spacing<\/a><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-11363","unixtime":1383772700,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-11363","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1383772700,"hasChildren":false,"userLogin":"pdclark","userNicename":"pdclark"},{"type":"comment","id":"11427","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-kadamwhite odd alt thread-odd thread-alt depth-1","parentID":"0","contentRaw":"Per the <a href=\"http:\/\/make.wordpress.org\/core\/2013\/11\/05\/javascript-coding-standards\/\" rel=\"nofollow\">discussions<\/a> around implementing JSHint, adopting and adapting the jQuery style guide, and updating the old version of this page, tonight we have finished a complete refresh of the JS standards. Please leave a comment if you notice any inconsistencies within this document, or if it does not cover a particular case you have encountered in the code.\n\nAll the above previous comments should be addressed by this updated guide.","contentFiltered":"<p>Per the <a href=\"https:\/\/make.wordpress.org\/core\/2013\/11\/05\/javascript-coding-standards\/\" rel=\"nofollow\">discussions<\/a> around implementing JSHint, adopting and adapting the jQuery style guide, and updating the old version of this page, tonight we have finished a complete refresh of the JS standards. Please leave a comment if you notice any inconsistencies within this document, or if it does not cover a particular case you have encountered in the code.<\/p>\n<p>All the above previous comments should be addressed by this updated guide.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-11427","unixtime":1384235629,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-11427","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1384235629,"hasChildren":false,"userLogin":"kadamwhite","userNicename":"kadamwhite"},{"type":"comment","id":"11499","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-morganestes even thread-even depth-1","parentID":"0","contentRaw":"The single-quoted strings seem a bit off to me, since they're not specified in the jQuery standard (all of their examples use double-quotes), and the PHP standard allows for either\/or (double if you have singles inside, rather than escaping) http:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#single-and-double-quotes.\n\nIs there a particular reason for *only* allowing single-quotes, or can we make it a \"preferred, but use doubles instead of escaping\" guideline?","contentFiltered":"<p>The single-quoted strings seem a bit off to me, since they&#8217;re not specified in the jQuery standard (all of their examples use double-quotes), and the PHP standard allows for either\/or (double if you have singles inside, rather than escaping) <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#single-and-double-quotes\" rel=\"nofollow\">https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#single-and-double-quotes<\/a>.<\/p>\n<p>Is there a particular reason for *only* allowing single-quotes, or can we make it a &#8220;preferred, but use doubles instead of escaping&#8221; guideline?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-11499","unixtime":1384380894,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-11499","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1384380894,"hasChildren":false,"userLogin":"morganestes","userNicename":"morganestes"},{"type":"comment","id":"11878","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-kadamwhite odd alt thread-odd thread-alt depth-1","parentID":"0","contentRaw":"@morganestes &ndash; PHP's a bit of a different case, because single- and double-quoted strings actually <a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" rel=\"nofollow\">work differently<\/a> (values can be interpolated in double-quoted strings, but not single).\n\nAs far as JavaScript is concerned there's no functional difference, but we felt strongly that a project should only use one type of quotes (and tools like JSHint are designed to enforce this kind of consistency).\nThe original version of this document specified the either\/or behavior you describe, but consistency both aids readability and cuts down on potential errors. Since almost all strings in WordPress JS files were already using single-quotes, largely in order to make it easier to enclose (double-quoted) HTML in your strings, it was an easy decision to standardize on single quotes.","contentFiltered":"<p>@morganestes &ndash; PHP&#8217;s a bit of a different case, because single- and double-quoted strings actually <a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" rel=\"nofollow\">work differently<\/a> (values can be interpolated in double-quoted strings, but not single).<\/p>\n<p>As far as JavaScript is concerned there&#8217;s no functional difference, but we felt strongly that a project should only use one type of quotes (and tools like JSHint are designed to enforce this kind of consistency).<br \/>\nThe original version of this document specified the either\/or behavior you describe, but consistency both aids readability and cuts down on potential errors. Since almost all strings in WordPress JS files were already using single-quotes, largely in order to make it easier to enclose (double-quoted) HTML in your strings, it was an easy decision to standardize on single quotes.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-11878","unixtime":1385608234,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-11878","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1385608234,"hasChildren":false,"userLogin":"kadamwhite","userNicename":"kadamwhite"},{"type":"comment","id":"11879","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-morganestes even thread-even depth-1","parentID":"0","contentRaw":"Thanks for the background info. I'm just adverse to escaping when I don't have to, but if I have guidelines to follow it makes it easier for me to discipline myself to follow them.","contentFiltered":"<p>Thanks for the background info. I&#8217;m just adverse to escaping when I don&#8217;t have to, but if I have guidelines to follow it makes it easier for me to discipline myself to follow them.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-11879","unixtime":1385613001,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-11879","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1385613001,"hasChildren":false,"userLogin":"morganestes","userNicename":"morganestes"},{"type":"comment","id":"13068","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-bassgang odd alt thread-odd thread-alt depth-1","parentID":"0","contentRaw":"What is the limit to switch from one line comment \" \/\/ \" to multi line comment \" \/* \u2026 *\/ \"?\nThe comment section shows that as of two line comment we should use \" \/* \u2026 *\/ \" but a lot of other examples on this use also \" \/\/ \" comment for two liners. I am confused, thanks for clarifying.","contentFiltered":"<p>What is the limit to switch from one line comment &#8221; \/\/ &#8221; to multi line comment &#8221; \/* \u2026 *\/ &#8220;?<br \/>\nThe comment section shows that as of two line comment we should use &#8221; \/* \u2026 *\/ &#8221; but a lot of other examples on this use also &#8221; \/\/ &#8221; comment for two liners. I am confused, thanks for clarifying.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-13068","unixtime":1394723280,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-13068","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1394723280,"hasChildren":false,"userLogin":"bassgang","userNicename":"bassgang"},{"type":"comment","id":"13069","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-bassgang even depth-2","parentID":"13068","contentRaw":"I meant \"other examples on this PAGE use \u2026\".\nFurthermore:  What about JSDoc blocks, any standard adopted here?","contentFiltered":"<p>I meant &#8220;other examples on this PAGE use \u2026&#8221;.<br \/>\nFurthermore:  What about JSDoc blocks, any standard adopted here?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-13069","unixtime":1394723573,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-13069","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1394723573,"hasChildren":false,"userLogin":"bassgang","userNicename":"bassgang"},{"type":"comment","id":"13072","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-kadamwhite odd alt depth-2","parentID":"13068","contentRaw":"Thanks for pointing out the discrepancy. In practice, I see no difference between the two for comments of 2-4 lines or so... there's a lot of \"prior art\" in the codebase where we use `\/\/` for multi-liners, so it's probably worth reflecting that flexibility here.\n\nAs for inline documentation, I'd use the media library Backbone code as an example of what we're aiming for with JSDoc blocks\u2014the official standard has yet to be written up. At the present time we're making consistent use of `@param`\/`@returns`, `@constructor`, `@augments`, `@readonly` and a couple others.","contentFiltered":"<p>Thanks for pointing out the discrepancy. In practice, I see no difference between the two for comments of 2-4 lines or so&#8230; there&#8217;s a lot of &#8220;prior art&#8221; in the codebase where we use `\/\/` for multi-liners, so it&#8217;s probably worth reflecting that flexibility here.<\/p>\n<p>As for inline documentation, I&#8217;d use the media library Backbone code as an example of what we&#8217;re aiming for with JSDoc blocks\u2014the official standard has yet to be written up. At the present time we&#8217;re making consistent use of `@param`\/`@returns`, `@constructor`, `@augments`, `@readonly` and a couple others.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-13072","unixtime":1394788494,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-13072","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":["param","returns","constructor","augments","readonly"],"mentionContext":"","commentCreated":1394788494,"hasChildren":false,"userLogin":"kadamwhite","userNicename":"kadamwhite"},{"type":"comment","id":"14197","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-lukecarbis even thread-even depth-1","parentID":"0","contentRaw":"Match Yoda Conditionals, type checks do not. Should we use `typeof object === 'string'` or `'string'=== typeof object`?","contentFiltered":"<p>Match Yoda Conditionals, type checks do not. Should we use `typeof object === &#8216;string&#8217;` or `&#8217;string&#8217;=== typeof object`?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-14197","unixtime":1399420886,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-14197","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1399420886,"hasChildren":false,"userLogin":"lukecarbis","userNicename":"lukecarbis"},{"type":"comment","id":"17928","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-georgesjeandenis odd alt depth-2","parentID":"11878","contentRaw":"I have to agree with Morgan. I've been using javascript for years. In all the sources I've used over the years, strings have always been preferably written with double quotes. It's not just Jquery's website that does this, look at \nhttps:\/\/developer.mozilla.org\/en\/docs\/Web\/JavaScript\/Guide\/Values,_variables,_and_literals#String_literals\n\nOr even just a quick view source on popular websites like Apple, Google, or even twitter.com clearly show that their use of javascript strongly prefers double quotes. The fact that WordPress or jshint aims to enforce single quotes goes against something that has been around for years.","contentFiltered":"<p>I have to agree with Morgan. I&#8217;ve been using javascript for years. In all the sources I&#8217;ve used over the years, strings have always been preferably written with double quotes. It&#8217;s not just Jquery&#8217;s website that does this, look at<br \/>\n<a href=\"https:\/\/developer.mozilla.org\/en\/docs\/Web\/JavaScript\/Guide\/Values,_variables,_and_literals#String_literals\" rel=\"nofollow\">https:\/\/developer.mozilla.org\/en\/docs\/Web\/JavaScript\/Guide\/Values,_variables,_and_literals#String_literals<\/a><\/p>\n<p>Or even just a quick view source on popular websites like Apple, Google, or even twitter.com clearly show that their use of javascript strongly prefers double quotes. The fact that WordPress or jshint aims to enforce single quotes goes against something that has been around for years.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-17928","unixtime":1408782930,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-17928","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1408782930,"hasChildren":false,"userLogin":"georgesjeandenis","userNicename":"georgesjeandenis"},{"type":"comment","id":"23364","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-aubreypwd even thread-odd thread-alt depth-1","parentID":"0","contentRaw":"So, got a good situation: If I am adding <code>jQuery( 'p' ).foo( 'something', function() { ... } );<\/code>, as you can see I start off calling <code>.foo(-space-<\/code>, but end with <code>});<\/code>, should that be <code>foo('something', function(){});<\/code> or <code>foo( 'something', function(){}-space-);<\/code>","contentFiltered":"<p>So, got a good situation: If I am adding <code>jQuery( 'p' ).foo( 'something', function() { ... } );<\/code>, as you can see I start off calling <code>.foo(-space-<\/code>, but end with <code>});<\/code>, should that be <code>foo('something', function(){});<\/code> or <code>foo( 'something', function(){}-space-);<\/code><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-23364","unixtime":1417742057,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-23364","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1417742057,"hasChildren":false,"userLogin":"aubreypwd","userNicename":"aubreypwd"},{"type":"comment","id":"24830","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-johnzanussi odd alt depth-2","parentID":"23364","contentRaw":"This situation is documented in the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/javascript\/#arrays-and-function-calls\" rel=\"nofollow\">Arrays and Function Calls<\/a> section.\n\n<code>\n\/\/ Function with a callback, object, or array as the last argument:\n\/\/ No space after after the last argument\nfoo( data, function() {\n    \/\/ Do stuff\n});\n<\/code>","contentFiltered":"<p>This situation is documented in the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/javascript\/#arrays-and-function-calls\" rel=\"nofollow\">Arrays and Function Calls<\/a> section.<\/p>\n<p><code><br \/>\n\/\/ Function with a callback, object, or array as the last argument:<br \/>\n\/\/ No space after after the last argument<br \/>\nfoo( data, function() {<br \/>\n    \/\/ Do stuff<br \/>\n});<br \/>\n<\/code><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-24830","unixtime":1420694616,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-24830","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1420694616,"hasChildren":false,"userLogin":"johnzanussi","userNicename":"johnzanussi"},{"type":"comment","id":"25307","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-paulschreiber even thread-even depth-1","parentID":"0","contentRaw":"Is there a jscs configuration file\/preset to enforce the WordPress VIP style? If not, can someone help make one?","contentFiltered":"<p>Is there a jscs configuration file\/preset to enforce the WordPress VIP style? If not, can someone help make one?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-25307","unixtime":1424526190,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-25307","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1424526190,"hasChildren":false,"userLogin":"paulschreiber","userNicename":"paulschreiber"},{"type":"comment","id":"25343","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-chrisdc1 odd alt depth-2","parentID":"25307","contentRaw":"It's a work in progress (could use some testing at the very least), but here's what I've been working on if you're interested:\nhttps:\/\/gist.github.com\/chrisdc\/01d3b9ad02991b9852dd","contentFiltered":"<p>It&#8217;s a work in progress (could use some testing at the very least), but here&#8217;s what I&#8217;ve been working on if you&#8217;re interested:<br \/>\n<a href=\"https:\/\/gist.github.com\/chrisdc\/01d3b9ad02991b9852dd\" rel=\"nofollow\">https:\/\/gist.github.com\/chrisdc\/01d3b9ad02991b9852dd<\/a><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-25343","unixtime":1425556891,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-25343","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1425556891,"hasChildren":false,"userLogin":"Chrisdc1","userNicename":"chrisdc1"},{"type":"comment","id":"26225","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-stormwarning even depth-2","parentID":"25307","contentRaw":"As of [1.12.0](http:\/\/jscs.info\/changelog.html#version-1-12-0), jscs has a [WordPress preset](https:\/\/github.com\/jscs-dev\/node-jscs\/blob\/master\/presets\/wordpress.json), although I can't say how well it conforms to the VIP standard specifically.","contentFiltered":"<p>As of [1.12.0](<a href=\"http:\/\/jscs.info\/changelog.html#version-1-12-0\" rel=\"nofollow\">http:\/\/jscs.info\/changelog.html#version-1-12-0<\/a>), jscs has a [WordPress preset](<a href=\"https:\/\/github.com\/jscs-dev\/node-jscs\/blob\/master\/presets\/wordpress.json\" rel=\"nofollow\">https:\/\/github.com\/jscs-dev\/node-jscs\/blob\/master\/presets\/wordpress.json<\/a>), although I can&#8217;t say how well it conforms to the VIP standard specifically.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-26225","unixtime":1435953151,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-26225","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1435953151,"hasChildren":false,"userLogin":"stormwarning","userNicename":"stormwarning"},{"type":"comment","id":"27713","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-kennethjfalbous odd alt thread-odd thread-alt depth-1","parentID":"0","contentRaw":"to avoid confusion for personal reference, what I understood is that WordPress does not accept double quotations at all. Right?","contentFiltered":"<p>to avoid confusion for personal reference, what I understood is that WordPress does not accept double quotations at all. Right?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-27713","unixtime":1442212835,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-27713","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1442212835,"hasChildren":false,"userLogin":"kennethjfalbous","userNicename":"kennethjfalbous"},{"type":"comment","id":"28233","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-georgesjeandenis even depth-2","parentID":"11499","contentRaw":"You know Morgan, this is just another case of \"coding wars\", much like the semi-colon wars in computer programming that has been going on for years.\n\nCase in point :\n\nif ( statement ) {\n   command\n}\n\n<ul>\n<li>preferred way<\/li>\n<\/ul>\n\n\n\nif ( statement )\n{\n   command\n}\n\n<ul>\n<li>personal preference<\/li>\n<\/ul>\n\n\n\nHowever, we all know that these make no difference logically, yet still programmers will swear by one and that until death it seems.\n\nI say, use it to your own advantage : talk about it, make people aware about it, spread the truth. In the end, people will understand that it's just a matter of preference.","contentFiltered":"<p>You know Morgan, this is just another case of &#8220;coding wars&#8221;, much like the semi-colon wars in computer programming that has been going on for years.<\/p>\n<p>Case in point :<\/p>\n<p>if ( statement ) {<br \/>\n   command<br \/>\n}<\/p>\n<ul>\n<li>preferred way<\/li>\n<\/ul>\n<p>if ( statement )<br \/>\n{<br \/>\n   command<br \/>\n}<\/p>\n<ul>\n<li>personal preference<\/li>\n<\/ul>\n<p>However, we all know that these make no difference logically, yet still programmers will swear by one and that until death it seems.<\/p>\n<p>I say, use it to your own advantage : talk about it, make people aware about it, spread the truth. In the end, people will understand that it&#8217;s just a matter of preference.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-28233","unixtime":1445691284,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-28233","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1445691284,"hasChildren":false,"userLogin":"georgesjeandenis","userNicename":"georgesjeandenis"},{"type":"comment","id":"28234","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-georgesjeandenis odd alt depth-3","parentID":"28233","contentRaw":"An interesting article on code wars :\n\nhttps:\/\/news.ycombinator.com\/item?id=3842713","contentFiltered":"<p>An interesting article on code wars :<\/p>\n<p><a href=\"https:\/\/news.ycombinator.com\/item?id=3842713\" rel=\"nofollow\">https:\/\/news.ycombinator.com\/item?id=3842713<\/a><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-28234","unixtime":1445695636,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-28234","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":3,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1445695636,"hasChildren":false,"userLogin":"georgesjeandenis","userNicename":"georgesjeandenis"},{"type":"comment","id":"28235","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-georgesjeandenis even depth-2","parentID":"11499","contentRaw":"Other exemples of what I'm refering to :\n\nhttps:\/\/plus.google.com\/110900846702990438913\/posts\/Np8Rw3ZRdwo","contentFiltered":"<p>Other exemples of what I&#8217;m refering to :<\/p>\n<p><a href=\"https:\/\/plus.google.com\/110900846702990438913\/posts\/Np8Rw3ZRdwo\" rel=\"nofollow\">https:\/\/plus.google.com\/110900846702990438913\/posts\/Np8Rw3ZRdwo<\/a><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-28235","unixtime":1445700765,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-28235","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1445700765,"hasChildren":false,"userLogin":"georgesjeandenis","userNicename":"georgesjeandenis"},{"type":"comment","id":"28717","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-morganestes odd alt depth-2","parentID":"27713","contentRaw":"For all new code, strings should be contained in single quotes.\n\nThere may be some existing code that doesn't yet follow this guideline, but all new and updated JS should.","contentFiltered":"<p>For all new code, strings should be contained in single quotes.<\/p>\n<p>There may be some existing code that doesn&#8217;t yet follow this guideline, but all new and updated JS should.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-28717","unixtime":1450935980,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-28717","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1450935980,"hasChildren":false,"userLogin":"morganestes","userNicename":"morganestes"}],"postFormat":"standard","postMeta":{"isSticky":false},"postTerms":[],"pluginData":[],"isPage":true,"mentions":[],"mentionContext":"","isTrashed":false,"userLogin":"kpdesign","userNicename":"kpdesign"}]</script> 
   </div> 
  </div> 
  <div id="page" class="hfeed site"> 
   <div id="main" class="site-main clear"> 
    <div id="secondary" class="widget-area" role="complementary"> 
     <a href="#" id="secondary-toggle"></a> 
     <div id="secondary-content"> 
      <aside id="search-4" class="widget widget_search">
       <form method="get" id="searchform" class="searchform" action="https://make.wordpress.org/core/handbook/" role="search"> 
        <label for="s" class="screen-reader-text">Search</label> 
        <input type="search" class="field" name="s" value="" id="s" placeholder="Search …"> 
        <input type="submit" class="submit" id="searchsubmit" value="Search"> 
       </form> 
      </aside>
      <aside id="handbook_pages-4" class="widget widget_wporg_handbook_pages">
       <h2 class="widget-title">Chapters</h2> 
       <div class="menu-table-of-contents-container"> 
        <ul> 
         <li class="page_item page-item-13607 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/about/">About</a> 
          <ul class="children"> 
           <li class="page_item page-item-3848 menu-item"><a href="https://make.wordpress.org/core/handbook/about/organization/">Project Organization</a></li> 
           <li class="page_item page-item-3854 menu-item"><a href="https://make.wordpress.org/core/handbook/about/philosophies/">Our Philosophies</a></li> 
           <li class="page_item page-item-3853 menu-item"><a href="https://make.wordpress.org/core/handbook/about/communication/">Communication</a></li> 
           <li class="page_item page-item-4576 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/about/release-cycle/">How the Release Cycle Works</a> 
            <ul class="children"> 
             <li class="page_item page-item-5024 menu-item"><a href="https://make.wordpress.org/core/handbook/about/release-cycle/features-as-plugins/">Features as Plugins</a></li> 
             <li class="page_item page-item-4511 menu-item"><a href="https://make.wordpress.org/core/handbook/about/release-cycle/version-numbering/">Version Numbering</a></li> 
             <li class="page_item page-item-13822 menu-item"><a href="https://make.wordpress.org/core/handbook/about/release-cycle/update-bundled-themes/">Updating Bundled Theme Versions</a></li> 
             <li class="page_item page-item-15708 menu-item"><a href="https://make.wordpress.org/core/handbook/about/release-cycle/releasing-major-versions/">Releasing Major Versions</a></li> 
             <li class="page_item page-item-13837 menu-item"><a href="https://make.wordpress.org/core/handbook/about/release-cycle/releasing-minor-versions/">Releasing Minor Versions</a></li> 
             <li class="page_item page-item-22447 menu-item"><a href="https://make.wordpress.org/core/handbook/about/release-cycle/releasing-beta-versions/">Releasing Beta Versions</a></li> 
            </ul> </li> 
           <li class="page_item page-item-3859 menu-item"><a href="https://make.wordpress.org/core/handbook/about/licensing/">Licensing &amp; Copyright</a></li> 
           <li class="page_item page-item-9674 menu-item"><a href="https://make.wordpress.org/core/handbook/about/getting-started-at-a-contributor-day/">Getting Started at a Contributor Day</a></li> 
          </ul> </li> 
         <li class="page_item page-item-13609 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/testing/">Contribute with Testing</a> 
          <ul class="children"> 
           <li class="page_item page-item-15172 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/testing/automated-testing/">Automated Testing</a> 
            <ul class="children"> 
             <li class="page_item page-item-14222 menu-item"><a href="https://make.wordpress.org/core/handbook/testing/automated-testing/qunit/">QUnit</a></li> 
             <li class="page_item page-item-4152 menu-item"><a href="https://make.wordpress.org/core/handbook/testing/automated-testing/phpunit/">PHPUnit</a></li> 
             <li class="page_item page-item-23295 menu-item"><a href="https://make.wordpress.org/core/handbook/testing/automated-testing/writing-phpunit-tests/">Writing PHPUnit Tests</a></li> 
            </ul> </li> 
           <li class="page_item page-item-3862 menu-item"><a href="https://make.wordpress.org/core/handbook/testing/beta/">Beta Testing</a></li> 
           <li class="page_item page-item-17802 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/testing/user-testing/">User Testing</a> 
            <ul class="children"> 
             <li class="page_item page-item-18094 menu-item"><a href="https://make.wordpress.org/core/handbook/testing/user-testing/usability/">Usability</a></li> 
            </ul> </li> 
           <li class="page_item page-item-3860 menu-item"><a href="https://make.wordpress.org/core/handbook/testing/reporting-bugs/">Reporting Bugs</a></li> 
           <li class="page_item page-item-3861 menu-item"><a href="https://make.wordpress.org/core/handbook/testing/reporting-security-vulnerabilities/">Reporting Security Vulnerabilities</a></li> 
           <li class="page_item page-item-4457 menu-item"><a href="https://make.wordpress.org/core/handbook/testing/bug-gardening/">Bug Gardening</a></li> 
           <li class="page_item page-item-4735 menu-item"><a href="https://make.wordpress.org/core/handbook/testing/patch/">Testing A Patch</a></li> 
           <li class="page_item page-item-18235 menu-item"><a href="https://make.wordpress.org/core/handbook/testing/write-a-call-for-testing/">Write a Call for Testing</a></li> 
          </ul> </li> 
         <li class="page_item page-item-13613 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/contribute/">Contribute with Code</a> 
          <ul class="children"> 
           <li class="page_item page-item-15020 menu-item"><a href="https://make.wordpress.org/core/handbook/contribute/code-refactoring/">Code Refactoring</a></li> 
           <li class="page_item page-item-19170 menu-item"><a href="https://make.wordpress.org/core/handbook/contribute/git/">The Code Repository (Git)</a></li> 
           <li class="page_item page-item-3851 menu-item"><a href="https://make.wordpress.org/core/handbook/contribute/codebase/">The WordPress Codebase</a></li> 
           <li class="page_item page-item-3849 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/contribute/svn/">The Code Repository (SVN)</a> 
            <ul class="children"> 
             <li class="page_item page-item-4096 menu-item"><a href="https://make.wordpress.org/core/handbook/contribute/svn/code-history/">Researching Code History With SVN Annotate</a></li> 
            </ul> </li> 
           <li class="page_item page-item-3857 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/contribute/trac/">The Bug Tracker (Trac)</a> 
            <ul class="children"> 
             <li class="page_item page-item-4177 menu-item"><a href="https://make.wordpress.org/core/handbook/contribute/trac/keywords/">Trac Workflow Keywords</a></li> 
            </ul> </li> 
           <li class="page_item page-item-3858 menu-item"><a href="https://make.wordpress.org/core/handbook/contribute/design-decisions/">Design Decisions</a></li> 
           <li class="page_item page-item-4169 menu-item"><a href="https://make.wordpress.org/core/handbook/contribute/fixing-bugs/">Fixing Bugs</a></li> 
          </ul> </li> 
         <li class="page_item page-item-22713 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/docs/">Contribute with Docs</a> 
          <ul class="children"> 
           <li class="page_item page-item-22715 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/docs/inline/">Inline Docs</a> 
            <ul class="children"> 
             <li class="page_item page-item-22717 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/docs/inline/js/">JavaScript Docs</a> 
              <ul class="children"> 
               <li class="page_item page-item-22719 menu-item"><a href="https://make.wordpress.org/core/handbook/docs/inline/js/closed-tickets/">Closed JS docs file tickets</a></li> 
               <li class="page_item page-item-22721 menu-item"><a href="https://make.wordpress.org/core/handbook/docs/inline/js/in-progress-tickets/">In-progress JS docs file tickets</a></li> 
               <li class="page_item page-item-22723 menu-item"><a href="https://make.wordpress.org/core/handbook/docs/inline/js/unclaimed-files/">Unclaimed files</a></li> 
              </ul> </li> 
            </ul> </li> 
          </ul> </li> 
         <li class="page_item page-item-13617 page_item_has_children current_page_ancestor current-menu-ancestor menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/best-practices/">Best Practices</a> 
          <ul class="children"> 
           <li class="page_item page-item-16980 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/post-comment-guidelines/">Post &amp; Comment Guidelines</a></li> 
           <li class="page_item page-item-15178 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/tools/">Workflows &amp; Tools</a></li> 
           <li class="page_item page-item-3856 page_item_has_children current_page_ancestor current_page_parent current-menu-ancestor current-menu-parent menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/best-practices/coding-standards/">WordPress Coding Standards</a> 
            <ul class="children"> 
             <li class="page_item page-item-5076 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/coding-standards/php/">PHP Coding Standards</a></li> 
             <li class="page_item page-item-16258 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/coding-standards/accessibility-coding-standards/">Accessibility Coding Standards</a></li> 
             <li class="page_item page-item-4082 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/coding-standards/css/">CSS Coding Standards</a></li> 
             <li class="page_item page-item-5080 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/coding-standards/html/">HTML Coding Standards</a></li> 
             <li class="page_item page-item-5078 current_page_item current-menu-item menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/coding-standards/javascript/">JavaScript Coding Standards</a></li> 
            </ul> </li> 
           <li class="page_item page-item-4876 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/">Inline Documentation Standards</a> 
            <ul class="children"> 
             <li class="page_item page-item-6362 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/php/">PHP Documentation Standards</a></li> 
             <li class="page_item page-item-6364 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/javascript/">JavaScript Documentation Standards</a></li> 
            </ul> </li> 
           <li class="page_item page-item-5015 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/core-apis/">Core APIs</a></li> 
           <li class="page_item page-item-16686 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/spelling/">Spelling</a></li> 
           <li class="page_item page-item-15642 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/internationalization/">Internationalization</a></li> 
           <li class="page_item page-item-4518 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/writing-patches/">Writing Patches</a></li> 
           <li class="page_item page-item-14549 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/commit-messages/">Commit Messages</a></li> 
           <li class="page_item page-item-15962 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/backporting-commits/">Backporting Commits</a></li> 
           <li class="page_item page-item-22417 menu-item"><a href="https://make.wordpress.org/core/handbook/best-practices/when-you-become-a-committer/">When you become a committer</a></li> 
          </ul> </li> 
         <li class="page_item page-item-13620 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/tutorials/">Tutorials &amp; Guides</a> 
          <ul class="children"> 
           <li class="page_item page-item-4618 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/tutorials/installing-wordpress-locally/">Installing WordPress Locally</a> 
            <ul class="children"> 
             <li class="page_item page-item-5027 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/installing-wordpress-locally/from-zip/">Installing From a Zip File</a></li> 
             <li class="page_item page-item-5022 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/installing-wordpress-locally/from-svn/">Installing Via SVN</a></li> 
            </ul> </li> 
           <li class="page_item page-item-4916 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/tutorials/installing-a-local-server/">Installing a Local Server</a> 
            <ul class="children"> 
             <li class="page_item page-item-15749 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/installing-a-local-server/installing-vvv/">Installing VVV</a></li> 
             <li class="page_item page-item-4592 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/installing-a-local-server/desktopserver/">Installing DesktopServer</a></li> 
             <li class="page_item page-item-4632 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/installing-a-local-server/mamp/">Installing MAMP</a></li> 
             <li class="page_item page-item-4663 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/installing-a-local-server/wampserver/">Installing WampServer</a></li> 
             <li class="page_item page-item-4639 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/installing-a-local-server/xampp/">Installing XAMPP</a></li> 
            </ul> </li> 
           <li class="page_item page-item-4691 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/installing-a-vcs/">Installing a Version Control System</a></li> 
           <li class="page_item page-item-4920 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/working-with-patches/">Working With Patches</a></li> 
           <li class="page_item page-item-4911 page_item_has_children menu-item menu-item-has-children"><a href="https://make.wordpress.org/core/handbook/tutorials/trac/">Working With Trac</a> 
            <ul class="children"> 
             <li class="page_item page-item-5008 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/trac/opening-a-ticket/">Opening a Ticket</a></li> 
             <li class="page_item page-item-3929 menu-item"><a href="https://make.wordpress.org/core/handbook/tutorials/trac/submitting-a-patch/">Submitting a Patch</a></li> 
            </ul> </li> 
          </ul> </li> 
         <li class="page_item page-item-10853 menu-item"><a href="https://make.wordpress.org/core/handbook/credits/">Credits</a></li> 
         <li class="page_item page-item-3261 menu-item"><a href="https://make.wordpress.org/core/handbook/glossary/">Glossary</a></li> 
        </ul> 
       </div> 
      </aside>
     </div> 
    </div>
    <!-- #secondary --> 
    <div id="primary" class="content-area"> 
     <div class="site-content" role="main"> 
      <header class="handbook-header"> 
       <h1 class="handbook-page-title">JavaScript Coding Standards</h1> 
      </header>
      <!-- .handbook-header --> 
      <style> .toc-jump { text-align: right; font-size: 12px; } .page .toc-heading { margin-top: -50px; padding-top: 50px !important; }</style>
      <div class="table-of-contents">
       <h2>Topics</h2>
       <ul class="items">
        <li><a href="#code-refactoring">Code Refactoring</a></li> 
        <li><a href="#spacing">Spacing</a> 
         <ul> 
          <li><a href="#objects">Objects</a></li> 
          <li><a href="#arrays-and-function-calls">Arrays and Function Calls</a></li> 
          <li><a href="#examples-of-good-spacing">Examples of Good Spacing</a> </li>
         </ul></li> 
        <li><a href="#semicolons">Semicolons</a></li> 
        <li><a href="#indentation-and-line-breaks">Indentation and Line Breaks</a> 
         <ul> 
          <li><a href="#blocks-and-curly-braces">Blocks and Curly Braces</a></li> 
          <li><a href="#multi-line-statements">Multi-line Statements</a></li> 
          <li><a href="#chained-method-calls">Chained Method Calls</a> </li>
         </ul></li> 
        <li><a href="#assignments-and-globals">Assignments and Globals</a> 
         <ul> 
          <li><a href="#declaring-variables-with-var">Declaring Variables With var</a></li> 
          <li><a href="#globals">Globals</a> </li>
         </ul></li> 
        <li><a href="#naming-conventions">Naming Conventions</a></li> 
        <li><a href="#comments">Comments</a></li> 
        <li><a href="#equality">Equality</a></li> 
        <li><a href="#type-checks">Type Checks</a></li> 
        <li><a href="#strings">Strings</a></li> 
        <li><a href="#switch-statements">Switch Statements</a></li> 
        <li><a href="#best-practices">Best Practices</a> 
         <ul> 
          <li><a href="#arrays">Arrays</a></li> 
          <li><a href="#objects">Objects</a></li> 
          <li><a href="#yoda-conditions">“Yoda” Conditions</a></li> 
          <li><a href="#iteration">Iteration</a></li> 
          <li><a href="#underscore-js-collection-functions">Underscore.js Collection Functions</a></li> 
          <li><a href="#iterating-over-jquery-collections">Iterating Over jQuery Collections</a> </li>
         </ul></li> 
        <li><a href="#jshint">JSHint</a> 
         <ul> 
          <li><a href="#installing-and-running-jshint">Installing and Running JSHint</a></li> 
          <li><a href="#jshint-overrides-ignore-blocks">JSHint Overrides: Ignore Blocks</a> </li>
         </ul></li> 
        <li><a href="#credits">Credits</a></li>
       </ul> 
      </div> 
      <p>JavaScript has become a critical component in developing WordPress-based applications (themes and plugins) as well as WordPress core. Standards are needed for formatting and styling JavaScript code to maintain the same code consistency as the WordPress standards provide for core PHP, HTML, and CSS code.</p> 
      <blockquote>
       <p>All code in any code-base should look like a single person typed it, no matter how many people contributed. – <a href="https://github.com/rwaldron/idiomatic.js/">Principles of Writing Consistent, Idiomatic JavaScript</a></p>
      </blockquote> 
      <p>The WordPress JavaScript Coding Standards are adapted from the <a href="https://contribute.jquery.org/style-guide/js">jQuery JavaScript Style Guide</a>. Our standard differs from the jQuery guidelines in the following ways:</p> 
      <ul> 
       <li>WordPress uses single quotation marks for string declarations.</li> 
       <li>Case statements are indented within switch blocks.</li> 
       <li>Function contents are consistently indented, including full-file closure wrappers.</li> 
       <li>Some whitespace rules differ, for consistency with the WordPress PHP coding standards.</li> 
       <li>jQuery’s 100-character hard line limit is encouraged, but not strictly enforced.</li> 
      </ul> 
      <p>Many of the examples below have been adapted directly from the jQuery style guide; these differences have all been integrated into the examples on this page. Any of the below standards and examples should be considered best practice for WordPress code, unless explicitly noted as anti-patterns.</p> 
      <h2 class="toc-heading" id="code-refactoring" tabindex="-1">Code Refactoring <a href="#code-refactoring" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Code Refactoring</span></a></h2> 
      <blockquote>
       <p>“<a href="https://make.wordpress.org/core/2011/03/23/code-refactoring/">Code refactoring should not be done just because we can.</a>” – Lead Developer Andrew Nacin</p>
      </blockquote> 
      <p>Many parts of the WordPress code structure for JavaScript are inconsistent in their style. WordPress is working to gradually improve this, so the code will be clean and easy to read at a glance.</p> 
      <p>While the coding standards are important, refactoring older .js files simply to conform to the standards is not an urgent issue. “Whitespace-only” patches for older files are strongly discouraged.</p> 
      <p>All new or updated JavaScript code will be reviewed to ensure it conforms to the standards, and passes JSHint.</p> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="spacing" tabindex="-1">Spacing <a href="#spacing" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Spacing</span></a></h2> 
      <p>Use spaces liberally throughout your code. “When in doubt, space it out.”</p> 
      <p>These rules encourage liberal spacing for improved developer readability. The minification process creates a file that is optimized for browsers to read and process.</p> 
      <ul> 
       <li>Indentation with tabs.</li> 
       <li>No whitespace at the end of line or on blank lines.</li> 
       <li>Lines should usually be no longer than 80 characters, and should not exceed 100 (counting tabs as 4 spaces). <em>This is a “soft” rule, but long lines generally indicate unreadable or disorganized code.</em></li> 
       <li><code>if</code>/<code>else</code>/<code>for</code>/<code>while</code>/<code>try</code> blocks should always use braces, and always go on multiple lines.</li> 
       <li>Unary special-character operators (e.g., <code>++</code>, <code>--</code>) must not have space next to their operand.</li> 
       <li>Any <code>,</code> and <code>;</code> must not have preceding space.</li> 
       <li>Any <code>;</code> used as a statement terminator must be at the end of the line.</li> 
       <li>Any <code>:</code> after a property name in an object definition must not have preceding space.</li> 
       <li>The <code>?</code> and <code>:</code> in a ternary conditional must have space on both sides.</li> 
       <li>No filler spaces in empty constructs (e.g., <code>{}</code>, <code>[]</code>, <code>fn()</code>).</li> 
       <li>There should be a new line at the end of each file.</li> 
       <li>Any <code>!</code> negation operator should have a following space.<sup>*</sup></li> 
       <li>All function bodies are indented by one tab, even if the entire file is wrapped in a closure.<sup>*</sup></li> 
       <li>Spaces may align code within documentation blocks or within a line, but only tabs should be used at the start of a line.<sup>*</sup></li> 
      </ul> 
      <p><strong>*</strong>: The WordPress JavaScript standards prefer slightly broader whitespace rules than the jQuery style guide. These deviations are for consistency between the PHP and JavaScript files in the WordPress codebase.</p> 
      <p>Whitespace can easily accumulate at the end of a line – avoid this, as trailing whitespace is caught as an error in JSHint. One way to catch whitespace buildup is enabling visible whitespace characters within your text editor.</p> 
      <h3 class="toc-heading" id="objects" tabindex="-1">Objects <a href="#objects" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Objects</span></a></h3> 
      <p>Object declarations can be made on a single line if they are short (remember the line length guidelines). When an object declaration is too long to fit on one line, there must be one property per line. Property names only need to be quoted if they are reserved words or contain special characters:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
// Preferred
var map = {
	ready: 9,
	when: 4,
	'you are': 15
};

// Acceptable for small objects
var map = { ready: 9, when: 4, 'you are': 15 };

// Bad
var map = { ready: 9,
	when: 4, 'you are': 15 };
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="arrays-and-function-calls" tabindex="-1">Arrays and Function Calls <a href="#arrays-and-function-calls" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Arrays and Function Calls</span></a></h3> 
      <p>Always include extra spaces around elements and arguments:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
array = [ a, b ];

foo( arg );

foo( 'string', object );

foo( options, object[ property ] );

foo( node, 'property', 2 );
</pre> 
      <p>Exceptions:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
// For consistency with our PHP standards, do not include a space around
// string literals or integers used as key values in array notation:
prop = object['default'];
firstArrayElement = arr[0];

// Function with a callback, object, or array as the sole argument:
// No space on either side of the argument
foo(function() {
	// Do stuff
});

foo({
	a: 'alpha',
	b: 'beta'
});

foo([
	'alpha',
	'beta'
]);

// Function with a callback, object, or array as the first argument:
// No space before the first argument
foo(function() {
	// Do stuff
}, options );

// Function with a callback, object, or array as the last argument:
// No space after after the last argument
foo( data, function() {
	// Do stuff
});
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="examples-of-good-spacing" tabindex="-1">Examples of Good Spacing <a href="#examples-of-good-spacing" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Examples of Good Spacing</span></a></h3> 
      <pre class="brush: jscript; title: ; notranslate" title="">
var i;

if ( condition ) {
	doSomething( 'with a string' );
} else if ( otherCondition ) {
	otherThing({
		key: value,
		otherKey: otherValue
	});
} else {
	somethingElse( true );
}

// Unlike jQuery, WordPress prefers a space after the ! negation operator.
// This is also done to conform to our PHP standards.
while ( ! condition ) {
	iterating++;
}

for ( i = 0; i &lt; 100; i++ ) {
	object[ array[ i ] ] = someFn( i );
	$( '.container' ).val( array[ i ] );
}

try {
	// Expressions
} catch ( e ) {
	// Expressions
}
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="semicolons" tabindex="-1">Semicolons <a href="#semicolons" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Semicolons</span></a></h2> 
      <p>Use them. Never rely on Automatic Semicolon Insertion (ASI).</p> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="indentation-and-line-breaks" tabindex="-1">Indentation and Line Breaks <a href="#indentation-and-line-breaks" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Indentation and Line Breaks</span></a></h2> 
      <p>Indentation and line breaks add readability to complex statements.</p> 
      <p>Tabs should be used for indentation. Even if the entire file is contained in a closure (i.e., an immediately invoked function), the contents of that function should be indented by one tab:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
(function( $ ) {
	// Expressions indented

	function doSomething() {
		// Expressions indented
	}
})( jQuery );
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="blocks-and-curly-braces" tabindex="-1">Blocks and Curly Braces <a href="#blocks-and-curly-braces" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Blocks and Curly Braces</span></a></h3> 
      <p><code>if</code>, <code>else</code>, <code>for</code>, <code>while</code>, and <code>try</code> blocks should always use braces, and always go on multiple lines. The opening brace should be on the same line as the function definition, the conditional, or the loop. The closing brace should be on the line directly following the last statement of the block.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
var a, b, c;

if ( myFunction() ) {
	// Expressions
} else if ( ( a &amp;&amp; b ) || c ) {
	// Expressions
} else {
	// Expressions
}
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="multi-line-statements" tabindex="-1">Multi-line Statements <a href="#multi-line-statements" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Multi-line Statements</span></a></h3> 
      <p>When a statement is too long to fit on one line, line breaks must occur after an operator.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
// Bad
var html = '&lt;p&gt;The sum of ' + a + ' and ' + b + ' plus ' + c
	+ ' is ' + ( a + b + c );

// Good
var html = '&lt;p&gt;The sum of ' + a + ' and ' + b + ' plus ' + c +
	' is ' + ( a + b + c );
</pre> 
      <p>Lines should be broken into logical groups if it improves readability, such as splitting each expression of a ternary operator onto its own line, even if both will fit on a single line.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
// Acceptable
var baz = ( true === conditionalStatement() ) ? 'thing 1' : 'thing 2';

// Better
var baz = firstCondition( foo ) &amp;&amp; secondCondition( bar ) ?
	qux( foo, bar ) :
	foo;
</pre> 
      <p>When a conditional is too long to fit on one line, successive lines must be indented one extra level to distinguish them from the body.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
	if ( firstCondition() &amp;&amp; secondCondition() &amp;&amp;
			thirdCondition() ) {
		doStuff();
	}
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="chained-method-calls" tabindex="-1">Chained Method Calls <a href="#chained-method-calls" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Chained Method Calls</span></a></h3> 
      <p>When a chain of method calls is too long to fit on one line, there must be one call per line, with the first call on a separate line from the object the methods are called on. If the method changes the context, an extra level of indentation must be used.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
elements
	.addClass( 'foo' )
	.children()
		.html( 'hello' )
	.end()
	.appendTo( 'body' );
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="assignments-and-globals" tabindex="-1">Assignments and Globals <a href="#assignments-and-globals" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Assignments and Globals</span></a></h2> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="declaring-variables-with-var" tabindex="-1">Declaring Variables With var <a href="#declaring-variables-with-var" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Declaring Variables With var</span></a></h3> 
      <p>Each function should begin with a single comma-delimited <code>var</code> statement that declares any local variables necessary. If a function does not declare a variable using <code>var</code>, that variable can leak into an outer scope (which is frequently the global scope, a worst-case scenario), and can unwittingly refer to and modify that data.</p> 
      <p>Assignments within the <code>var</code> statement should be listed on individual lines, while declarations can be grouped on a single line. Any additional lines should be indented with an additional tab. Objects and functions that occupy more than a handful of lines should be assigned outside of the <code>var</code> statement, to avoid over-indentation.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
// Good
var k, m, length,
	// Indent subsequent lines by one tab
	value = 'WordPress';

// Bad
var foo = true;
var bar = false;
var a;
var b;
var c;
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="globals" tabindex="-1">Globals <a href="#globals" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Globals</span></a></h3> 
      <p>In the past, WordPress core made heavier use of global variables. Since core JavaScript files are sometimes used within plugins, existing globals should not be removed.</p> 
      <p>All globals used within a file should be documented at the top of that file.&nbsp;Multiple globals can be comma-separated.</p> 
      <p>This example would make <code>passwordStrength</code> an allowed global variable within that file:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
/* global passwordStrength:true */
</pre> 
      <p>The “true” after <code>passwordStrength</code> means that this global is being defined within this file. If you are accessing a global which is defined elsewhere, omit&nbsp;<code>:true</code> to designate the global as read-only.</p> 
      <p><strong>Common Libraries</strong></p> 
      <p>Backbone, jQuery, Underscore, and the global <code>wp</code> object are all registered as allowed globals in the root <code>.jshintrc</code> file.</p> 
      <p>Backbone and Underscore may be accessed directly at any time. jQuery should be accessed through <code>$</code> by passing the <code>jQuery</code> object into an anonymous function:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
(function( $ ) {
  // Expressions
})( jQuery );
</pre> 
      <p>This will negate the need to call <code>.noConflict()</code>, or to set <code>$</code> using another variable.<br> Files which add to, or modify, the <code>wp</code> object must safely access the global to avoid overwriting previously set properties:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
// At the top of the file, set "wp" to its existing value (if present)
window.wp = window.wp || {};
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="naming-conventions" tabindex="-1">Naming Conventions <a href="#naming-conventions" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Naming Conventions</span></a></h2> 
      <p>Variable and function names should be full words, using camel case with a lowercase first letter. This is an area where this standard differs from the <a href="https://make.wordpress.org/core/handbook/coding-standards/php/#naming-conventions">WordPress PHP coding standards</a>.</p> 
      <p>Constructors intended for use with <code>new</code> should have a capital first letter (UpperCamelCase).</p> 
      <p>Names should be descriptive, but not excessively so. Exceptions are allowed for iterators, such as the use of <code>i</code> to represent the index in a loop.</p> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="comments" tabindex="-1">Comments <a href="#comments" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Comments</span></a></h2> 
      <p>Comments come before the code to which they refer, and should always be preceded by a blank line. Capitalize the first letter of the comment, and include a period at the end when writing full sentences. There must be a single space between the comment token (<code>//</code>) and the comment text.</p> 
      <p>Single line comments:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
someStatement();

// Explanation of something complex on the next line
$( 'p' ).doSomething();
</pre> 
      <p>Multi-line comments should be used for long comments, see also the <a href="https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/javascript/#multi-line-comments">JavaScript Documentation Standards</a>:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
/*
 * This is a comment that is long enough to warrant being stretched
 * over the span of multiple lines.
 */
</pre> 
      <p>Inline comments are allowed as an exception when used to annotate special arguments in formal parameter lists:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
function foo( types, selector, data, fn, /* INTERNAL */ one ) {
	// Do stuff
}
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="equality" tabindex="-1">Equality <a href="#equality" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Equality</span></a></h2> 
      <p>Strict equality checks (<code>===</code>) must be used in favor of abstract equality checks (<code>==</code>). The <em>only</em> exception is when checking for both <code>undefined</code> and <code>null</code> by way of <code>null</code>.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
// Check for both undefined and null values, for some important reason.
if ( undefOrNull == null ) {
	// Expressions
}
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="type-checks" tabindex="-1">Type Checks <a href="#type-checks" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Type Checks</span></a></h2> 
      <p>These are the preferred ways of checking the type of an object:</p> 
      <ul> 
       <li>String: <code>typeof object === 'string'</code></li> 
       <li>Number: <code>typeof object === 'number'</code></li> 
       <li>Boolean: <code>typeof object === 'boolean'</code></li> 
       <li>Object: <code>typeof object === 'object'</code> or <code>_.isObject( object )</code></li> 
       <li>Plain Object: <code>jQuery.isPlainObject( object )</code></li> 
       <li>Function: <code>_.isFunction( object)</code> or <code>jQuery.isFunction( object )</code></li> 
       <li>Array: <code>_.isArray( object )</code> or <code>jQuery.isArray( object )</code></li> 
       <li>Element: <code>object.nodeType</code> or <code>_.isElement( object )</code></li> 
       <li>null: <code>object === null</code></li> 
       <li>null or undefined: <code>object == null</code></li> 
       <li>undefined: 
        <ul> 
         <li>Global Variables: <code>typeof variable === 'undefined'</code></li> 
         <li>Local Variables: <code>variable === undefined</code></li> 
         <li>Properties: <code>object.prop === undefined</code></li> 
         <li>Any of the above: <code>_.isUndefined( object )</code></li> 
        </ul> </li> 
      </ul> 
      <p>Anywhere Backbone or Underscore are already used, you are encouraged to use <a href="http://underscorejs.org/#isElement">Underscore.js</a>‘s type checking methods over jQuery’s.</p> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="strings" tabindex="-1">Strings <a href="#strings" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Strings</span></a></h2> 
      <p>Use single-quotes for string literals:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
var myStr = 'strings should be contained in single quotes';
</pre> 
      <p>When a string contains single quotes, they need to be escaped with a backslash (<code>\</code>):</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
// Escape single quotes within strings:
'Note the backslash before the \'single quotes\'';
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="switch-statements" tabindex="-1">Switch Statements <a href="#switch-statements" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Switch Statements</span></a></h2> 
      <p>The usage of <code>switch</code> statements is generally discouraged, but can be useful when there are a large number of cases – especially when multiple cases can be handled by the same block, or fall-through logic (the <code>default</code> case) can be leveraged.</p> 
      <p>When using <code>switch</code> statements:</p> 
      <p>– Use a <code>break</code> for each case other than <code>default</code>. When allowing statements to “fall through,” note that explicitly.<br> – Indent <code>case</code> statements one tab within the <code>switch</code>.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
switch ( event.keyCode ) {

	// ENTER and SPACE both trigger x()
	case $.ui.keyCode.ENTER:
	case $.ui.keyCode.SPACE:
		x();
		break;
	case $.ui.keyCode.ESCAPE:
		y();
		break;
	default:
		z();
}
</pre> 
      <p>It is not recommended to return a value from within a switch statement: use the <code>case</code> blocks to set values, then <code>return</code> those values at the end.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
function getKeyCode( keyCode ) {
	var result;

	switch ( event.keyCode ) {
		case $.ui.keyCode.ENTER:
		case $.ui.keyCode.SPACE:
			result = 'commit';
			break;
		case $.ui.keyCode.ESCAPE:
			result = 'exit';
			break;
		default:
			result = 'default';
	}

	return result;
}
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="best-practices" tabindex="-1">Best Practices <a href="#best-practices" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Best Practices</span></a></h2> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="arrays" tabindex="-1">Arrays <a href="#arrays" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Arrays</span></a></h3> 
      <p>Creating arrays in JavaScript should be done using the shorthand <code>[]</code> constructor rather than the <code>new Array()</code> notation.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
var myArray = [];
</pre> 
      <p>You can initialize an array during construction:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
var myArray = [ 1, 'WordPress', 2, 'Blog' ];
</pre> 
      <p>In JavaScript, associative arrays are defined as objects.</p> 
      <h3 class="toc-heading" id="objects" tabindex="-1">Objects <a href="#objects" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Objects</span></a></h3> 
      <p>There are many ways to create objects in JavaScript. Object literal notation, <code>{}</code>, is both the most performant, and also the easiest to read.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
var myObj = {};
</pre> 
      <p>Object literal notation should be used unless the object requires a specific prototype, in which case the object should be created by calling a constructor function with <code>new</code>.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
var myObj = new ConstructorMethod();
</pre> 
      <p>Object properties should be accessed via dot notation, unless the key is a variable, a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Reserved_Words">reserved word</a>, or a string that would not be a valid identifier:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
prop = object.propertyName;
prop = object[ variableKey ];
prop = object['default'];
prop = object['key-with-hyphens'];
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="yoda-conditions" tabindex="-1">“Yoda” Conditions <a href="#yoda-conditions" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">“Yoda” Conditions</span></a></h3> 
      <p>For consistency with the <a href="https://make.wordpress.org/core/handbook/coding-standards/php/#yoda-conditions">PHP code standards</a>, whenever you are comparing an object to a string, boolean, integer, or other constant or literal, the variable should always be put on the right hand side, and the constant or literal put on the left.</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
if ( true === myCondition ) {
	// Do stuff
}
</pre> 
      <p>“A little bizarre, it is, to read. Get used to it, you will.”</p> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="iteration" tabindex="-1">Iteration <a href="#iteration" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Iteration</span></a></h3> 
      <p>When iterating over a large collection using a <code>for</code> loop, it is recommended to store the loop’s max value as a variable rather than re-computing the maximum every time:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
// Good &amp; Efficient
var i, max;

// getItemCount() gets called once
for ( i = 0, max = getItemCount(); i &lt; max; i++ ) {
	// Do stuff
}

// Bad &amp; Potentially Inefficient:
// getItemCount() gets called every time
for ( i = 0; i &lt; getItemCount(); i++ ) {
	// Do stuff
}
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="underscore-js-collection-functions" tabindex="-1">Underscore.js Collection Functions <a href="#underscore-js-collection-functions" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Underscore.js Collection Functions</span></a></h3> 
      <p>Learn and understand Underscore’s <a href="http://underscorejs.org/#collections">collection and array methods</a>. These functions, including <code>_.each</code>, <code>_.map</code>, and <code>_.reduce</code>, allow for efficient, readable transformations of large data sets.</p> 
      <p>Underscore also permits jQuery-style chaining with regular JavaScript objects:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
var obj = {
	first: 'thing 1',
	second: 'thing 2',
	third: 'lox'
};

var arr = _.chain( obj )
	.keys()
	.map(function( key ) {
		return key + ' comes ' + obj[ key ];
	})
	// Exit the chain
	.value();

// arr === [ 'first comes thing 1', 'second comes thing 2', 'third comes lox' ]
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="iterating-over-jquery-collections" tabindex="-1">Iterating Over jQuery Collections <a href="#iterating-over-jquery-collections" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Iterating Over jQuery Collections</span></a></h3> 
      <p>The only time jQuery should be used for iteration is when iterating over a collection of jQuery objects:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
$tabs.each(function( index, element ) {
	var $element = $( element );

	// Do stuff to $element
});
</pre> 
      <p>Never use jQuery to iterate over raw data or vanilla JavaScript objects.</p> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="jshint" tabindex="-1">JSHint <a href="#jshint" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">JSHint</span></a></h2> 
      <p><a href="http://jshint.com">JSHint</a> is an automated code quality tool, designed to catch errors in your JavaScript code. JSHint is used in WordPress development to quickly verify that a patch has not introduced any logic or syntax errors to the front-end.</p> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="installing-and-running-jshint" tabindex="-1">Installing and Running JSHint <a href="#installing-and-running-jshint" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Installing and Running JSHint</span></a></h3> 
      <p>JSHint is run using a tool called <a href="https://gruntjs.com/">Grunt</a>. Both JSHint and Grunt are programs written in <a href="https://nodejs.org/">Node.js</a>. A configuration file that comes with the WordPress development code makes it easy to install and configure these tools.</p> 
      <p>To install Node.js, click the Install link on the <a href="https://nodejs.org/">Node</a> website. The correct install file for your operating system will be downloaded. Follow the installation steps for your operating system to install the program.</p> 
      <p>Once Node.js is installed, open a command line window and navigate to the directory where you <a href="https://make.wordpress.org/core/handbook/tutorials/installing-wordpress-locally/from-svn/">checked out a copy of the WordPress SVN repository</a> (use <code>cd ~/directoryname</code>). You should be in the root directory which contains the <code>package.json</code> file.</p> 
      <p>Next, type <code>npm install</code> into the command line window. This will download and install all the Node packages used in WordPress development.</p> 
      <p>Finally, type <code>npm install -g grunt-cli</code> to install the Grunt Command Line Interface (CLI) package. Grunt CLI is what is used to actually run the Grunt tasks in WordPress.</p> 
      <p>You should now be able to type <code>grunt jshint</code> to have Grunt check all the WordPress JavaScript files for syntax and logic errors. To only check core code, type <code>grunt jshint:core</code>; to only check unit test .js files, type <code>grunt jshint:tests</code>.</p> 
      <p><strong>JSHint Settings</strong></p> 
      <p>The configuration options used for JSHint are stored within a <a title="WordPress JSHint file in svn trunk" href="https://develop.svn.wordpress.org/trunk/.jshintrc"><code>.jshintrc</code> file</a> in the WordPress SVN repository. This file defines which errors JSHint should flag if it finds them within the WordPress source code.</p> 
      <p><strong>Target A Single File</strong></p> 
      <p>To specify a single file for JSHint to check, add <code>--file=filename.js</code> to the end of the command. For example, this will only check the file named “admin-bar.js” within WordPress’s core JavaScript files:</p> 
      <p><code>grunt jshint:core --file=admin-bar.js</code></p> 
      <p>And this would only check the “password-strength-meter.js” file within the unit tests directory:</p> 
      <p><code>grunt jshint:tests --file=password-strength-meter.js</code></p> 
      <p>Limiting JSHint to a single file can be useful if you are only working on one or two specific files and don’t want to wait for JSHint to process every single file each time it runs.</p> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h3 class="toc-heading" id="jshint-overrides-ignore-blocks" tabindex="-1">JSHint Overrides: Ignore Blocks <a href="#jshint-overrides-ignore-blocks" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">JSHint Overrides: Ignore Blocks</span></a></h3> 
      <p>In some situations, parts of a file should be excluded from JSHint. As an example, the script file for the admin bar contains the minified code for the jQuery HoverIntent plugin – this is third-party code that should not pass through JSHint, even though it is part of a WordPress core JavaScript file.</p> 
      <p>To exclude a specific file region from being processed by JSHint, enclose it in JSHint directive comments:</p> 
      <pre class="brush: jscript; title: ; notranslate" title="">
/* jshint ignore:start */
if ( typeof jQuery.fn.hoverIntent === 'undefined' ) {
	// hoverIntent r6 - Copy of wp-includes/js/hoverIntent.min.js
	(function(a){a.fn.hoverIntent=...............
}
/* jshint ignore:end */
</pre> 
      <p class="toc-jump"><a href="#top">Top ?</a></p>
      <h2 class="toc-heading" id="credits" tabindex="-1">Credits <a href="#credits" class="anchor"><span aria-hidden="true">#</span><span class="screen-reader-text">Credits</span></a></h2> 
      <ul> 
       <li>The jQuery examples are adapted from the <a href="https://contribute.jquery.org/style-guide/js">jQuery JavaScript Style Guide</a>, which is made available under the MIT license.</li> 
      </ul> 
      <script class="o2-data" id="o2-data-5078" data-post-id="5078" type="application/json" style="display:none">[{"type":"post","id":5078,"postID":5078,"cssClasses":"handbook post-5078 type-handbook status-publish hentry author-kpdesign","parentID":0,"titleRaw":"JavaScript Coding Standards","titleFiltered":"JavaScript Coding Standards","titleWasGeneratedFromContent":false,"contentRaw":"JavaScript has become a critical component in developing WordPress-based applications (themes and plugins) as well as WordPress core. Standards are needed for formatting and styling JavaScript code to maintain the same code consistency as the WordPress standards provide for core PHP, HTML, and CSS code.\r\n<blockquote>All code in any code-base should look like a single person typed it, no matter how many people contributed. - <a href=\"https:\/\/github.com\/rwaldron\/idiomatic.js\/\">Principles of Writing Consistent, Idiomatic JavaScript<\/a><\/blockquote>\r\nThe WordPress JavaScript Coding Standards are adapted from the <a href=\"https:\/\/contribute.jquery.org\/style-guide\/js\">jQuery JavaScript Style Guide<\/a>. Our standard differs from the jQuery guidelines in the following ways:\r\n<ul>\r\n \t<li>WordPress uses single quotation marks for string declarations.<\/li>\r\n \t<li>Case statements are indented within switch blocks.<\/li>\r\n \t<li>Function contents are consistently indented, including full-file closure wrappers.<\/li>\r\n \t<li>Some whitespace rules differ, for consistency with the WordPress PHP coding standards.<\/li>\r\n \t<li>jQuery\u2019s 100-character hard line limit is encouraged, but not strictly enforced.<\/li>\r\n<\/ul>\r\nMany of the examples below have been adapted directly from the jQuery style guide; these differences have all been integrated into the examples on this page. Any of the below standards and examples should be considered best practice for WordPress code, unless explicitly noted as anti-patterns.\r\n<h2>Code Refactoring<\/h2>\r\n<blockquote>\"<a href=\"https:\/\/make.wordpress.org\/core\/2011\/03\/23\/code-refactoring\/\">Code refactoring should not be done just because we can.<\/a>\" - Lead Developer Andrew Nacin<\/blockquote>\r\nMany parts of the WordPress code structure for JavaScript are inconsistent in their style. WordPress is working to gradually improve this, so the code will be clean and easy to read at a glance.\r\n\r\nWhile the coding standards are important, refactoring older .js files simply to conform to the standards is not an urgent issue. \"Whitespace-only\" patches for older files are strongly discouraged.\r\n\r\nAll new or updated JavaScript code will be reviewed to ensure it conforms to the standards, and passes JSHint.\r\n<h2>Spacing<\/h2>\r\nUse spaces liberally throughout your code. \"When in doubt, space it out.\"\r\n\r\nThese rules encourage liberal spacing for improved developer readability. The minification process creates a file that is optimized for browsers to read and process.\r\n<ul>\r\n \t<li>Indentation with tabs.<\/li>\r\n \t<li>No whitespace at the end of line or on blank lines.<\/li>\r\n \t<li>Lines should usually be no longer than 80 characters, and should not exceed 100 (counting tabs as 4 spaces). <em>This is a \"soft\" rule, but long lines generally indicate unreadable or disorganized code.<\/em><\/li>\r\n \t<li><code>if<\/code>\/<code>else<\/code>\/<code>for<\/code>\/<code>while<\/code>\/<code>try<\/code> blocks should always use braces, and always go on multiple lines.<\/li>\r\n \t<li>Unary special-character operators (e.g., <code>++<\/code>, <code>--<\/code>) must not have space next to their operand.<\/li>\r\n \t<li>Any <code>,<\/code> and <code>;<\/code> must not have preceding space.<\/li>\r\n \t<li>Any <code>;<\/code> used as a statement terminator must be at the end of the line.<\/li>\r\n \t<li>Any <code>:<\/code> after a property name in an object definition must not have preceding space.<\/li>\r\n \t<li>The <code>?<\/code> and <code>:<\/code> in a ternary conditional must have space on both sides.<\/li>\r\n \t<li>No filler spaces in empty constructs (e.g., <code>{}<\/code>, <code>[]<\/code>, <code>fn()<\/code>).<\/li>\r\n \t<li>There should be a new line at the end of each file.<\/li>\r\n \t<li>Any <code>!<\/code> negation operator should have a following space.<sup>*<\/sup><\/li>\r\n \t<li>All function bodies are indented by one tab, even if the entire file is wrapped in a closure.<sup>*<\/sup><\/li>\r\n \t<li>Spaces may align code within documentation blocks or within a line, but only tabs should be used at the start of a line.<sup>*<\/sup><\/li>\r\n<\/ul>\r\n<strong>*<\/strong>: The WordPress JavaScript standards prefer slightly broader whitespace rules than the jQuery style guide. These deviations are for consistency between the PHP and JavaScript files in the WordPress codebase.\r\n\r\nWhitespace can easily accumulate at the end of a line \u2013 avoid this, as trailing whitespace is caught as an error in JSHint. One way to catch whitespace buildup is enabling visible whitespace characters within your text editor.\r\n<h3>Objects<\/h3>\r\nObject declarations can be made on a single line if they are short (remember the line length guidelines). When an object declaration is too long to fit on one line, there must be one property per line. Property names only need to be quoted if they are reserved words or contain special characters:\r\n\r\n[javascript]\r\n\/\/ Preferred\r\nvar map = {\r\n\tready: 9,\r\n\twhen: 4,\r\n\t'you are': 15\r\n};\r\n\r\n\/\/ Acceptable for small objects\r\nvar map = { ready: 9, when: 4, 'you are': 15 };\r\n\r\n\/\/ Bad\r\nvar map = { ready: 9,\r\n\twhen: 4, 'you are': 15 };\r\n[\/javascript]\r\n\r\n<h3>Arrays and Function Calls<\/h3>\r\nAlways include extra spaces around elements and arguments:\r\n\r\n[javascript]\r\narray = [ a, b ];\r\n\r\nfoo( arg );\r\n\r\nfoo( 'string', object );\r\n\r\nfoo( options, object[ property ] );\r\n\r\nfoo( node, 'property', 2 );\r\n[\/javascript]\r\n\r\nExceptions:\r\n\r\n[javascript]\r\n\/\/ For consistency with our PHP standards, do not include a space around\r\n\/\/ string literals or integers used as key values in array notation:\r\nprop = object['default'];\r\nfirstArrayElement = arr[0];\r\n\r\n\/\/ Function with a callback, object, or array as the sole argument:\r\n\/\/ No space on either side of the argument\r\nfoo(function() {\r\n\t\/\/ Do stuff\r\n});\r\n\r\nfoo({\r\n\ta: 'alpha',\r\n\tb: 'beta'\r\n});\r\n\r\nfoo([\r\n\t'alpha',\r\n\t'beta'\r\n]);\r\n\r\n\/\/ Function with a callback, object, or array as the first argument:\r\n\/\/ No space before the first argument\r\nfoo(function() {\r\n\t\/\/ Do stuff\r\n}, options );\r\n\r\n\/\/ Function with a callback, object, or array as the last argument:\r\n\/\/ No space after after the last argument\r\nfoo( data, function() {\r\n\t\/\/ Do stuff\r\n});\r\n[\/javascript]\r\n\r\n<h3>Examples of Good Spacing<\/h3>\r\n\r\n[javascript]\r\nvar i;\r\n\r\nif ( condition ) {\r\n\tdoSomething( 'with a string' );\r\n} else if ( otherCondition ) {\r\n\totherThing({\r\n\t\tkey: value,\r\n\t\totherKey: otherValue\r\n\t});\r\n} else {\r\n\tsomethingElse( true );\r\n}\r\n\r\n\/\/ Unlike jQuery, WordPress prefers a space after the ! negation operator.\r\n\/\/ This is also done to conform to our PHP standards.\r\nwhile ( ! condition ) {\r\n\titerating++;\r\n}\r\n\r\nfor ( i = 0; i < 100; i++ ) {\r\n\tobject[ array[ i ] ] = someFn( i );\r\n\t$( '.container' ).val( array[ i ] );\r\n}\r\n\r\ntry {\r\n\t\/\/ Expressions\r\n} catch ( e ) {\r\n\t\/\/ Expressions\r\n}\r\n[\/javascript]\r\n\r\n<h2>Semicolons<\/h2>\r\nUse them. Never rely on Automatic Semicolon Insertion (ASI).\r\n<h2>Indentation and Line Breaks<\/h2>\r\nIndentation and line breaks add readability to complex statements.\r\n\r\nTabs should be used for indentation. Even if the entire file is contained in a closure (i.e., an immediately invoked function), the contents of that function should be indented by one tab:\r\n\r\n[javascript]\r\n(function( $ ) {\r\n\t\/\/ Expressions indented\r\n\r\n\tfunction doSomething() {\r\n\t\t\/\/ Expressions indented\r\n\t}\r\n})( jQuery );\r\n[\/javascript]\r\n\r\n<h3>Blocks and Curly Braces<\/h3>\r\n<code>if<\/code>, <code>else<\/code>, <code>for<\/code>, <code>while<\/code>, and <code>try<\/code> blocks should always use braces, and always go on multiple lines. The opening brace should be on the same line as the function definition, the conditional, or the loop. The closing brace should be on the line directly following the last statement of the block.\r\n\r\n[javascript]\r\nvar a, b, c;\r\n\r\nif ( myFunction() ) {\r\n\t\/\/ Expressions\r\n} else if ( ( a && b ) || c ) {\r\n\t\/\/ Expressions\r\n} else {\r\n\t\/\/ Expressions\r\n}\r\n[\/javascript]\r\n\r\n<h3>Multi-line Statements<\/h3>\r\nWhen a statement is too long to fit on one line, line breaks must occur after an operator.\r\n\r\n[javascript]\r\n\/\/ Bad\r\nvar html = '<p>The sum of ' + a + ' and ' + b + ' plus ' + c\r\n\t+ ' is ' + ( a + b + c );\r\n\r\n\/\/ Good\r\nvar html = '<p>The sum of ' + a + ' and ' + b + ' plus ' + c +\r\n\t' is ' + ( a + b + c );\r\n[\/javascript]\r\n\r\nLines should be broken into logical groups if it improves readability, such as splitting each expression of a ternary operator onto its own line, even if both will fit on a single line.\r\n\r\n[javascript]\r\n\/\/ Acceptable\r\nvar baz = ( true === conditionalStatement() ) ? 'thing 1' : 'thing 2';\r\n\r\n\/\/ Better\r\nvar baz = firstCondition( foo ) && secondCondition( bar ) ?\r\n\tqux( foo, bar ) :\r\n\tfoo;\r\n[\/javascript]\r\n\r\nWhen a conditional is too long to fit on one line, successive lines must be indented one extra level to distinguish them from the body.\r\n\r\n[javascript]\r\n\tif ( firstCondition() && secondCondition() &&\r\n\t\t\tthirdCondition() ) {\r\n\t\tdoStuff();\r\n\t}\r\n[\/javascript]\r\n\r\n<h3>Chained Method Calls<\/h3>\r\nWhen a chain of method calls is too long to fit on one line, there must be one call per line, with the first call on a separate line from the object the methods are called on. If the method changes the context, an extra level of indentation must be used.\r\n\r\n[javascript]\r\nelements\r\n\t.addClass( 'foo' )\r\n\t.children()\r\n\t\t.html( 'hello' )\r\n\t.end()\r\n\t.appendTo( 'body' );\r\n[\/javascript]\r\n\r\n<h2>Assignments and Globals<\/h2>\r\n<h3>Declaring Variables With var<\/h3>\r\nEach function should begin with a single comma-delimited <code>var<\/code> statement that declares any local variables necessary. If a function does not declare a variable using <code>var<\/code>, that variable can leak into an outer scope (which is frequently the global scope, a worst-case scenario), and can unwittingly refer to and modify that data.\r\n\r\nAssignments within the <code>var<\/code> statement should be listed on individual lines, while declarations can be grouped on a single line. Any additional lines should be indented with an additional tab. Objects and functions that occupy more than a handful of lines should be assigned outside of the <code>var<\/code> statement, to avoid over-indentation.\r\n\r\n[javascript]\r\n\/\/ Good\r\nvar k, m, length,\r\n\t\/\/ Indent subsequent lines by one tab\r\n\tvalue = 'WordPress';\r\n\r\n\/\/ Bad\r\nvar foo = true;\r\nvar bar = false;\r\nvar a;\r\nvar b;\r\nvar c;\r\n[\/javascript]\r\n\r\n<h3>Globals<\/h3>\r\nIn the past, WordPress core made heavier use of global variables. Since core JavaScript files are sometimes used within plugins, existing globals should not be removed.\r\n\r\nAll globals used within a file should be documented at the top of that file.\u00a0Multiple globals can be comma-separated.\r\n\r\nThis example would make <code>passwordStrength<\/code> an allowed global variable within that file:\r\n\r\n[javascript]\r\n\/* global passwordStrength:true *\/\r\n[\/javascript]\r\n\r\nThe \"true\" after <code>passwordStrength<\/code> means that this global is being defined within this file. If you are accessing a global which is defined elsewhere, omit\u00a0<code>:true<\/code> to designate the global as read-only.\r\n\r\n<strong>Common Libraries<\/strong>\r\n\r\nBackbone, jQuery, Underscore, and the global <code>wp<\/code> object are all registered as allowed globals in the root <code>.jshintrc<\/code> file.\r\n\r\nBackbone and Underscore may be accessed directly at any time. jQuery should be accessed through <code>$<\/code> by passing the <code>jQuery<\/code> object into an anonymous function:\r\n\r\n[javascript]\r\n(function( $ ) {\r\n  \/\/ Expressions\r\n})( jQuery );\r\n[\/javascript]\r\n\r\nThis will negate the need to call <code>.noConflict()<\/code>, or to set <code>$<\/code> using another variable.\r\nFiles which add to, or modify, the <code>wp<\/code> object must safely access the global to avoid overwriting previously set properties:\r\n\r\n[javascript]\r\n\/\/ At the top of the file, set \"wp\" to its existing value (if present)\r\nwindow.wp = window.wp || {};\r\n[\/javascript]\r\n\r\n<h2>Naming Conventions<\/h2>\r\nVariable and function names should be full words, using camel case with a lowercase first letter. This is an area where this standard differs from the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#naming-conventions\">WordPress PHP coding standards<\/a>.\r\n\r\nConstructors intended for use with <code>new<\/code> should have a capital first letter (UpperCamelCase).\r\n\r\nNames should be descriptive, but not excessively so. Exceptions are allowed for iterators, such as the use of <code>i<\/code> to represent the index in a loop.\r\n<h2>Comments<\/h2>\r\nComments come before the code to which they refer, and should always be preceded by a blank line. Capitalize the first letter of the comment, and include a period at the end when writing full sentences. There must be a single space between the comment token (<code>\/\/<\/code>) and the comment text.\r\n\r\nSingle line comments:\r\n\r\n[javascript]\r\nsomeStatement();\r\n\r\n\/\/ Explanation of something complex on the next line\r\n$( 'p' ).doSomething();\r\n[\/javascript]\r\n\r\nMulti-line comments should be used for long comments, see also the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/inline-documentation-standards\/javascript\/#multi-line-comments\">JavaScript Documentation Standards<\/a>:\r\n\r\n[javascript]\r\n\/*\r\n * This is a comment that is long enough to warrant being stretched\r\n * over the span of multiple lines.\r\n *\/\r\n[\/javascript]\r\n\r\nInline comments are allowed as an exception when used to annotate special arguments in formal parameter lists:\r\n\r\n[javascript]\r\nfunction foo( types, selector, data, fn, \/* INTERNAL *\/ one ) {\r\n\t\/\/ Do stuff\r\n}\r\n[\/javascript]\r\n\r\n<h2>Equality<\/h2>\r\nStrict equality checks (<code>===<\/code>) must be used in favor of abstract equality checks (<code>==<\/code>). The <em>only<\/em> exception is when checking for both <code>undefined<\/code> and <code>null<\/code> by way of <code>null<\/code>.\r\n\r\n[javascript]\r\n\/\/ Check for both undefined and null values, for some important reason.\r\nif ( undefOrNull == null ) {\r\n\t\/\/ Expressions\r\n}\r\n[\/javascript]\r\n\r\n<h2>Type Checks<\/h2>\r\nThese are the preferred ways of checking the type of an object:\r\n<ul>\r\n \t<li>String: <code>typeof object === 'string'<\/code><\/li>\r\n \t<li>Number: <code>typeof object === 'number'<\/code><\/li>\r\n \t<li>Boolean: <code>typeof object === 'boolean'<\/code><\/li>\r\n \t<li>Object: <code>typeof object === 'object'<\/code> or <code>_.isObject( object )<\/code><\/li>\r\n \t<li>Plain Object: <code>jQuery.isPlainObject( object )<\/code><\/li>\r\n \t<li>Function: <code>_.isFunction( object)<\/code> or <code>jQuery.isFunction( object )<\/code><\/li>\r\n \t<li>Array: <code>_.isArray( object )<\/code> or <code>jQuery.isArray( object )<\/code><\/li>\r\n \t<li>Element: <code>object.nodeType<\/code> or <code>_.isElement( object )<\/code><\/li>\r\n \t<li>null: <code>object === null<\/code><\/li>\r\n \t<li>null or undefined: <code>object == null<\/code><\/li>\r\n \t<li>undefined:\r\n<ul>\r\n \t<li>Global Variables: <code>typeof variable === 'undefined'<\/code><\/li>\r\n \t<li>Local Variables: <code>variable === undefined<\/code><\/li>\r\n \t<li>Properties: <code>object.prop === undefined<\/code><\/li>\r\n \t<li>Any of the above: <code>_.isUndefined( object )<\/code><\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ul>\r\nAnywhere Backbone or Underscore are already used, you are encouraged to use <a href=\"http:\/\/underscorejs.org\/#isElement\">Underscore.js<\/a>'s type checking methods over jQuery's.\r\n<h2>Strings<\/h2>\r\nUse single-quotes for string literals:\r\n\r\n[javascript]\r\nvar myStr = 'strings should be contained in single quotes';\r\n[\/javascript]\r\n\r\nWhen a string contains single quotes, they need to be escaped with a backslash (<code>\\<\/code>):\r\n\r\n[javascript]\r\n\/\/ Escape single quotes within strings:\r\n'Note the backslash before the \\'single quotes\\'';\r\n[\/javascript]\r\n\r\n<h2>Switch Statements<\/h2>\r\nThe usage of <code>switch<\/code> statements is generally discouraged, but can be useful when there are a large number of cases - especially when multiple cases can be handled by the same block, or fall-through logic (the <code>default<\/code> case) can be leveraged.\r\n\r\nWhen using <code>switch<\/code> statements:\r\n\r\n- Use a <code>break<\/code> for each case other than <code>default<\/code>. When allowing statements to \"fall through,\" note that explicitly.\r\n- Indent <code>case<\/code> statements one tab within the <code>switch<\/code>.\r\n\r\n[javascript]\r\nswitch ( event.keyCode ) {\r\n\r\n\t\/\/ ENTER and SPACE both trigger x()\r\n\tcase $.ui.keyCode.ENTER:\r\n\tcase $.ui.keyCode.SPACE:\r\n\t\tx();\r\n\t\tbreak;\r\n\tcase $.ui.keyCode.ESCAPE:\r\n\t\ty();\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tz();\r\n}\r\n[\/javascript]\r\n\r\nIt is not recommended to return a value from within a switch statement: use the <code>case<\/code> blocks to set values, then <code>return<\/code> those values at the end.\r\n\r\n[javascript]\r\nfunction getKeyCode( keyCode ) {\r\n\tvar result;\r\n\r\n\tswitch ( event.keyCode ) {\r\n\t\tcase $.ui.keyCode.ENTER:\r\n\t\tcase $.ui.keyCode.SPACE:\r\n\t\t\tresult = 'commit';\r\n\t\t\tbreak;\r\n\t\tcase $.ui.keyCode.ESCAPE:\r\n\t\t\tresult = 'exit';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tresult = 'default';\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n[\/javascript]\r\n\r\n<h2>Best Practices<\/h2>\r\n<h3>Arrays<\/h3>\r\nCreating arrays in JavaScript should be done using the shorthand <code>[]<\/code> constructor rather than the <code>new Array()<\/code> notation.\r\n\r\n[javascript]\r\nvar myArray = [];\r\n[\/javascript]\r\n\r\nYou can initialize an array during construction:\r\n\r\n[javascript]\r\nvar myArray = [ 1, 'WordPress', 2, 'Blog' ];\r\n[\/javascript]\r\n\r\nIn JavaScript, associative arrays are defined as objects.\r\n<h3>Objects<\/h3>\r\nThere are many ways to create objects in JavaScript. Object literal notation, <code>{}<\/code>, is both the most performant, and also the easiest to read.\r\n\r\n[javascript]\r\nvar myObj = {};\r\n[\/javascript]\r\n\r\nObject literal notation should be used unless the object requires a specific prototype, in which case the object should be created by calling a constructor function with <code>new<\/code>.\r\n\r\n[javascript]\r\nvar myObj = new ConstructorMethod();\r\n[\/javascript]\r\n\r\nObject properties should be accessed via dot notation, unless the key is a variable, a <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Reserved_Words\">reserved word<\/a>, or a string that would not be a valid identifier:\r\n\r\n[javascript]\r\nprop = object.propertyName;\r\nprop = object[ variableKey ];\r\nprop = object['default'];\r\nprop = object['key-with-hyphens'];\r\n[\/javascript]\r\n\r\n<h3>\"Yoda\" Conditions<\/h3>\r\nFor consistency with the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#yoda-conditions\">PHP code standards<\/a>, whenever you are comparing an object to a string, boolean, integer, or other constant or literal, the variable should always be put on the right hand side, and the constant or literal put on the left.\r\n\r\n[javascript]\r\nif ( true === myCondition ) {\r\n\t\/\/ Do stuff\r\n}\r\n[\/javascript]\r\n\r\n\"A little bizarre, it is, to read. Get used to it, you will.\"\r\n<h3>Iteration<\/h3>\r\nWhen iterating over a large collection using a <code>for<\/code> loop, it is recommended to store the loop's max value as a variable rather than re-computing the maximum every time:\r\n\r\n[javascript]\r\n\/\/ Good & Efficient\r\nvar i, max;\r\n\r\n\/\/ getItemCount() gets called once\r\nfor ( i = 0, max = getItemCount(); i < max; i++ ) {\r\n\t\/\/ Do stuff\r\n}\r\n\r\n\/\/ Bad & Potentially Inefficient:\r\n\/\/ getItemCount() gets called every time\r\nfor ( i = 0; i < getItemCount(); i++ ) {\r\n\t\/\/ Do stuff\r\n}\r\n[\/javascript]\r\n\r\n<h3>Underscore.js Collection Functions<\/h3>\r\nLearn and understand Underscore's <a href=\"http:\/\/underscorejs.org\/#collections\">collection and array methods<\/a>. These functions, including <code>_.each<\/code>, <code>_.map<\/code>, and <code>_.reduce<\/code>, allow for efficient, readable transformations of large data sets.\r\n\r\nUnderscore also permits jQuery-style chaining with regular JavaScript objects:\r\n\r\n[javascript]\r\nvar obj = {\r\n\tfirst: 'thing 1',\r\n\tsecond: 'thing 2',\r\n\tthird: 'lox'\r\n};\r\n\r\nvar arr = _.chain( obj )\r\n\t.keys()\r\n\t.map(function( key ) {\r\n\t\treturn key + ' comes ' + obj[ key ];\r\n\t})\r\n\t\/\/ Exit the chain\r\n\t.value();\r\n\r\n\/\/ arr === [ 'first comes thing 1', 'second comes thing 2', 'third comes lox' ]\r\n[\/javascript]\r\n\r\n<h3>Iterating Over jQuery Collections<\/h3>\r\nThe only time jQuery should be used for iteration is when iterating over a collection of jQuery objects:\r\n\r\n[javascript]\r\n$tabs.each(function( index, element ) {\r\n\tvar $element = $( element );\r\n\r\n\t\/\/ Do stuff to $element\r\n});\r\n[\/javascript]\r\n\r\nNever use jQuery to iterate over raw data or vanilla JavaScript objects.\r\n<h2>JSHint<\/h2>\r\n<a href=\"http:\/\/jshint.com\">JSHint<\/a> is an automated code quality tool, designed to catch errors in your JavaScript code. JSHint is used in WordPress development to quickly verify that a patch has not introduced any logic or syntax errors to the front-end.\r\n<h3>Installing and Running JSHint<\/h3>\r\nJSHint is run using a tool called <a href=\"https:\/\/gruntjs.com\/\">Grunt<\/a>. Both JSHint and Grunt are programs written in <a href=\"https:\/\/nodejs.org\/\">Node.js<\/a>. A configuration file that comes with the WordPress development code makes it easy to install and configure these tools.\r\n\r\nTo install Node.js, click the Install link on the <a href=\"https:\/\/nodejs.org\/\">Node<\/a> website. The correct install file for your operating system will be downloaded. Follow the installation steps for your operating system to install the program.\r\n\r\nOnce Node.js is installed, open a command line window and navigate to the directory where you <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/tutorials\/installing-wordpress-locally\/from-svn\/\">checked out a copy of the WordPress SVN repository<\/a> (use <code>cd ~\/directoryname<\/code>). You should be in the root directory which contains the <code>package.json<\/code> file.\r\n\r\nNext, type <code>npm install<\/code> into the command line window. This will download and install all the Node packages used in WordPress development.\r\n\r\nFinally, type <code>npm install -g grunt-cli<\/code> to install the Grunt Command Line Interface (CLI) package. Grunt CLI is what is used to actually run the Grunt tasks in WordPress.\r\n\r\nYou should now be able to type <code>grunt jshint<\/code> to have Grunt check all the WordPress JavaScript files for syntax and logic errors. To only check core code, type <code>grunt jshint:core<\/code>; to only check unit test .js files, type <code>grunt jshint:tests<\/code>.\r\n\r\n<strong>JSHint Settings<\/strong>\r\n\r\nThe configuration options used for JSHint are stored within a <a title=\"WordPress JSHint file in svn trunk\" href=\"https:\/\/develop.svn.wordpress.org\/trunk\/.jshintrc\"><code>.jshintrc<\/code> file<\/a> in the WordPress SVN repository. This file defines which errors JSHint should flag if it finds them within the WordPress source code.\r\n\r\n<strong>Target A Single File<\/strong>\r\n\r\nTo specify a single file for JSHint to check, add <code>--file=filename.js<\/code> to the end of the command. For example, this will only check the file named \"admin-bar.js\" within WordPress's core JavaScript files:\r\n\r\n<code>grunt jshint:core --file=admin-bar.js<\/code>\r\n\r\nAnd this would only check the \"password-strength-meter.js\" file within the unit tests directory:\r\n\r\n<code>grunt jshint:tests --file=password-strength-meter.js<\/code>\r\n\r\nLimiting JSHint to a single file can be useful if you are only working on one or two specific files and don't want to wait for JSHint to process every single file each time it runs.\r\n<h3>JSHint Overrides: Ignore Blocks<\/h3>\r\nIn some situations, parts of a file should be excluded from JSHint. As an example, the script file for the admin bar contains the minified code for the jQuery HoverIntent plugin - this is third-party code that should not pass through JSHint, even though it is part of a WordPress core JavaScript file.\r\n\r\nTo exclude a specific file region from being processed by JSHint, enclose it in JSHint directive comments:\r\n\r\n[javascript]\r\n\/* jshint ignore:start *\/\r\nif ( typeof jQuery.fn.hoverIntent === 'undefined' ) {\r\n\t\/\/ hoverIntent r6 - Copy of wp-includes\/js\/hoverIntent.min.js\r\n\t(function(a){a.fn.hoverIntent=...............\r\n}\r\n\/* jshint ignore:end *\/\r\n[\/javascript]\r\n\r\n<h2>Credits<\/h2>\r\n<ul>\r\n \t<li>The jQuery examples are adapted from the <a href=\"https:\/\/contribute.jquery.org\/style-guide\/js\">jQuery JavaScript Style Guide<\/a>, which is made available under the MIT license.<\/li>\r\n<\/ul>","contentFiltered":"<style> .toc-jump { text-align: right; font-size: 12px; } .page .toc-heading { margin-top: -50px; padding-top: 50px !important; }<\/style><div class=\"table-of-contents\"><h2>Topics<\/h2><ul class=\"items\"><li><a href=\"#code-refactoring\">Code Refactoring<\/a><\/li>\n<li><a href=\"#spacing\">Spacing<\/a>\n<ul>\n<li><a href=\"#objects\">Objects<\/a><\/li>\n<li><a href=\"#arrays-and-function-calls\">Arrays and Function Calls<\/a><\/li>\n<li><a href=\"#examples-of-good-spacing\">Examples of Good Spacing<\/a>\n<\/ul><\/li>\n<li><a href=\"#semicolons\">Semicolons<\/a><\/li>\n<li><a href=\"#indentation-and-line-breaks\">Indentation and Line Breaks<\/a>\n<ul>\n<li><a href=\"#blocks-and-curly-braces\">Blocks and Curly Braces<\/a><\/li>\n<li><a href=\"#multi-line-statements\">Multi-line Statements<\/a><\/li>\n<li><a href=\"#chained-method-calls\">Chained Method Calls<\/a>\n<\/ul><\/li>\n<li><a href=\"#assignments-and-globals\">Assignments and Globals<\/a>\n<ul>\n<li><a href=\"#declaring-variables-with-var\">Declaring Variables With var<\/a><\/li>\n<li><a href=\"#globals\">Globals<\/a>\n<\/ul><\/li>\n<li><a href=\"#naming-conventions\">Naming Conventions<\/a><\/li>\n<li><a href=\"#comments\">Comments<\/a><\/li>\n<li><a href=\"#equality\">Equality<\/a><\/li>\n<li><a href=\"#type-checks\">Type Checks<\/a><\/li>\n<li><a href=\"#strings\">Strings<\/a><\/li>\n<li><a href=\"#switch-statements\">Switch Statements<\/a><\/li>\n<li><a href=\"#best-practices\">Best Practices<\/a>\n<ul>\n<li><a href=\"#arrays\">Arrays<\/a><\/li>\n<li><a href=\"#objects\">Objects<\/a><\/li>\n<li><a href=\"#yoda-conditions\">&#8220;Yoda&#8221; Conditions<\/a><\/li>\n<li><a href=\"#iteration\">Iteration<\/a><\/li>\n<li><a href=\"#underscore-js-collection-functions\">Underscore.js Collection Functions<\/a><\/li>\n<li><a href=\"#iterating-over-jquery-collections\">Iterating Over jQuery Collections<\/a>\n<\/ul><\/li>\n<li><a href=\"#jshint\">JSHint<\/a>\n<ul>\n<li><a href=\"#installing-and-running-jshint\">Installing and Running JSHint<\/a><\/li>\n<li><a href=\"#jshint-overrides-ignore-blocks\">JSHint Overrides: Ignore Blocks<\/a>\n<\/ul><\/li>\n<li><a href=\"#credits\">Credits<\/a><\/ul>\n<\/div>\n<p>JavaScript has become a critical component in developing WordPress-based applications (themes and plugins) as well as WordPress core. Standards are needed for formatting and styling JavaScript code to maintain the same code consistency as the WordPress standards provide for core PHP, HTML, and CSS code.<\/p>\n<blockquote><p>All code in any code-base should look like a single person typed it, no matter how many people contributed. &#8211; <a href=\"https:\/\/github.com\/rwaldron\/idiomatic.js\/\">Principles of Writing Consistent, Idiomatic JavaScript<\/a><\/p><\/blockquote>\n<p>The WordPress JavaScript Coding Standards are adapted from the <a href=\"https:\/\/contribute.jquery.org\/style-guide\/js\">jQuery JavaScript Style Guide<\/a>. Our standard differs from the jQuery guidelines in the following ways:<\/p>\n<ul>\n<li>WordPress uses single quotation marks for string declarations.<\/li>\n<li>Case statements are indented within switch blocks.<\/li>\n<li>Function contents are consistently indented, including full-file closure wrappers.<\/li>\n<li>Some whitespace rules differ, for consistency with the WordPress PHP coding standards.<\/li>\n<li>jQuery\u2019s 100-character hard line limit is encouraged, but not strictly enforced.<\/li>\n<\/ul>\n<p>Many of the examples below have been adapted directly from the jQuery style guide; these differences have all been integrated into the examples on this page. Any of the below standards and examples should be considered best practice for WordPress code, unless explicitly noted as anti-patterns.<\/p>\n<h2 class=\"toc-heading\" id=\"code-refactoring\" tabindex=\"-1\">Code Refactoring <a href=\"#code-refactoring\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Code Refactoring<\/span><\/a><\/h2>\n<blockquote><p>&#8220;<a href=\"https:\/\/make.wordpress.org\/core\/2011\/03\/23\/code-refactoring\/\">Code refactoring should not be done just because we can.<\/a>&#8221; &#8211; Lead Developer Andrew Nacin<\/p><\/blockquote>\n<p>Many parts of the WordPress code structure for JavaScript are inconsistent in their style. WordPress is working to gradually improve this, so the code will be clean and easy to read at a glance.<\/p>\n<p>While the coding standards are important, refactoring older .js files simply to conform to the standards is not an urgent issue. &#8220;Whitespace-only&#8221; patches for older files are strongly discouraged.<\/p>\n<p>All new or updated JavaScript code will be reviewed to ensure it conforms to the standards, and passes JSHint.<\/p>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"spacing\" tabindex=\"-1\">Spacing <a href=\"#spacing\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Spacing<\/span><\/a><\/h2>\n<p>Use spaces liberally throughout your code. &#8220;When in doubt, space it out.&#8221;<\/p>\n<p>These rules encourage liberal spacing for improved developer readability. The minification process creates a file that is optimized for browsers to read and process.<\/p>\n<ul>\n<li>Indentation with tabs.<\/li>\n<li>No whitespace at the end of line or on blank lines.<\/li>\n<li>Lines should usually be no longer than 80 characters, and should not exceed 100 (counting tabs as 4 spaces). <em>This is a &#8220;soft&#8221; rule, but long lines generally indicate unreadable or disorganized code.<\/em><\/li>\n<li><code>if<\/code>\/<code>else<\/code>\/<code>for<\/code>\/<code>while<\/code>\/<code>try<\/code> blocks should always use braces, and always go on multiple lines.<\/li>\n<li>Unary special-character operators (e.g., <code>++<\/code>, <code>--<\/code>) must not have space next to their operand.<\/li>\n<li>Any <code>,<\/code> and <code>;<\/code> must not have preceding space.<\/li>\n<li>Any <code>;<\/code> used as a statement terminator must be at the end of the line.<\/li>\n<li>Any <code>:<\/code> after a property name in an object definition must not have preceding space.<\/li>\n<li>The <code>?<\/code> and <code>:<\/code> in a ternary conditional must have space on both sides.<\/li>\n<li>No filler spaces in empty constructs (e.g., <code>{}<\/code>, <code>[]<\/code>, <code>fn()<\/code>).<\/li>\n<li>There should be a new line at the end of each file.<\/li>\n<li>Any <code>!<\/code> negation operator should have a following space.<sup>*<\/sup><\/li>\n<li>All function bodies are indented by one tab, even if the entire file is wrapped in a closure.<sup>*<\/sup><\/li>\n<li>Spaces may align code within documentation blocks or within a line, but only tabs should be used at the start of a line.<sup>*<\/sup><\/li>\n<\/ul>\n<p><strong>*<\/strong>: The WordPress JavaScript standards prefer slightly broader whitespace rules than the jQuery style guide. These deviations are for consistency between the PHP and JavaScript files in the WordPress codebase.<\/p>\n<p>Whitespace can easily accumulate at the end of a line \u2013 avoid this, as trailing whitespace is caught as an error in JSHint. One way to catch whitespace buildup is enabling visible whitespace characters within your text editor.<\/p>\n<h3 class=\"toc-heading\" id=\"objects\" tabindex=\"-1\">Objects <a href=\"#objects\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Objects<\/span><\/a><\/h3>\n<p>Object declarations can be made on a single line if they are short (remember the line length guidelines). When an object declaration is too long to fit on one line, there must be one property per line. Property names only need to be quoted if they are reserved words or contain special characters:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/ Preferred\r\nvar map = {\r\n\tready: 9,\r\n\twhen: 4,\r\n\t'you are': 15\r\n};\r\n\r\n\/\/ Acceptable for small objects\r\nvar map = { ready: 9, when: 4, 'you are': 15 };\r\n\r\n\/\/ Bad\r\nvar map = { ready: 9,\r\n\twhen: 4, 'you are': 15 };\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"arrays-and-function-calls\" tabindex=\"-1\">Arrays and Function Calls <a href=\"#arrays-and-function-calls\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Arrays and Function Calls<\/span><\/a><\/h3>\n<p>Always include extra spaces around elements and arguments:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\narray = [ a, b ];\r\n\r\nfoo( arg );\r\n\r\nfoo( 'string', object );\r\n\r\nfoo( options, object[ property ] );\r\n\r\nfoo( node, 'property', 2 );\r\n<\/pre>\n<p>Exceptions:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/ For consistency with our PHP standards, do not include a space around\r\n\/\/ string literals or integers used as key values in array notation:\r\nprop = object['default'];\r\nfirstArrayElement = arr[0];\r\n\r\n\/\/ Function with a callback, object, or array as the sole argument:\r\n\/\/ No space on either side of the argument\r\nfoo(function() {\r\n\t\/\/ Do stuff\r\n});\r\n\r\nfoo({\r\n\ta: 'alpha',\r\n\tb: 'beta'\r\n});\r\n\r\nfoo([\r\n\t'alpha',\r\n\t'beta'\r\n]);\r\n\r\n\/\/ Function with a callback, object, or array as the first argument:\r\n\/\/ No space before the first argument\r\nfoo(function() {\r\n\t\/\/ Do stuff\r\n}, options );\r\n\r\n\/\/ Function with a callback, object, or array as the last argument:\r\n\/\/ No space after after the last argument\r\nfoo( data, function() {\r\n\t\/\/ Do stuff\r\n});\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"examples-of-good-spacing\" tabindex=\"-1\">Examples of Good Spacing <a href=\"#examples-of-good-spacing\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Examples of Good Spacing<\/span><\/a><\/h3>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar i;\r\n\r\nif ( condition ) {\r\n\tdoSomething( 'with a string' );\r\n} else if ( otherCondition ) {\r\n\totherThing({\r\n\t\tkey: value,\r\n\t\totherKey: otherValue\r\n\t});\r\n} else {\r\n\tsomethingElse( true );\r\n}\r\n\r\n\/\/ Unlike jQuery, WordPress prefers a space after the ! negation operator.\r\n\/\/ This is also done to conform to our PHP standards.\r\nwhile ( ! condition ) {\r\n\titerating++;\r\n}\r\n\r\nfor ( i = 0; i &lt; 100; i++ ) {\r\n\tobject[ array[ i ] ] = someFn( i );\r\n\t$( '.container' ).val( array[ i ] );\r\n}\r\n\r\ntry {\r\n\t\/\/ Expressions\r\n} catch ( e ) {\r\n\t\/\/ Expressions\r\n}\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"semicolons\" tabindex=\"-1\">Semicolons <a href=\"#semicolons\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Semicolons<\/span><\/a><\/h2>\n<p>Use them. Never rely on Automatic Semicolon Insertion (ASI).<\/p>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"indentation-and-line-breaks\" tabindex=\"-1\">Indentation and Line Breaks <a href=\"#indentation-and-line-breaks\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Indentation and Line Breaks<\/span><\/a><\/h2>\n<p>Indentation and line breaks add readability to complex statements.<\/p>\n<p>Tabs should be used for indentation. Even if the entire file is contained in a closure (i.e., an immediately invoked function), the contents of that function should be indented by one tab:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n(function( $ ) {\r\n\t\/\/ Expressions indented\r\n\r\n\tfunction doSomething() {\r\n\t\t\/\/ Expressions indented\r\n\t}\r\n})( jQuery );\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"blocks-and-curly-braces\" tabindex=\"-1\">Blocks and Curly Braces <a href=\"#blocks-and-curly-braces\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Blocks and Curly Braces<\/span><\/a><\/h3>\n<p><code>if<\/code>, <code>else<\/code>, <code>for<\/code>, <code>while<\/code>, and <code>try<\/code> blocks should always use braces, and always go on multiple lines. The opening brace should be on the same line as the function definition, the conditional, or the loop. The closing brace should be on the line directly following the last statement of the block.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar a, b, c;\r\n\r\nif ( myFunction() ) {\r\n\t\/\/ Expressions\r\n} else if ( ( a &amp;&amp; b ) || c ) {\r\n\t\/\/ Expressions\r\n} else {\r\n\t\/\/ Expressions\r\n}\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"multi-line-statements\" tabindex=\"-1\">Multi-line Statements <a href=\"#multi-line-statements\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Multi-line Statements<\/span><\/a><\/h3>\n<p>When a statement is too long to fit on one line, line breaks must occur after an operator.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/ Bad\r\nvar html = '&lt;p&gt;The sum of ' + a + ' and ' + b + ' plus ' + c\r\n\t+ ' is ' + ( a + b + c );\r\n\r\n\/\/ Good\r\nvar html = '&lt;p&gt;The sum of ' + a + ' and ' + b + ' plus ' + c +\r\n\t' is ' + ( a + b + c );\r\n<\/pre>\n<p>Lines should be broken into logical groups if it improves readability, such as splitting each expression of a ternary operator onto its own line, even if both will fit on a single line.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/ Acceptable\r\nvar baz = ( true === conditionalStatement() ) ? 'thing 1' : 'thing 2';\r\n\r\n\/\/ Better\r\nvar baz = firstCondition( foo ) &amp;&amp; secondCondition( bar ) ?\r\n\tqux( foo, bar ) :\r\n\tfoo;\r\n<\/pre>\n<p>When a conditional is too long to fit on one line, successive lines must be indented one extra level to distinguish them from the body.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\tif ( firstCondition() &amp;&amp; secondCondition() &amp;&amp;\r\n\t\t\tthirdCondition() ) {\r\n\t\tdoStuff();\r\n\t}\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"chained-method-calls\" tabindex=\"-1\">Chained Method Calls <a href=\"#chained-method-calls\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Chained Method Calls<\/span><\/a><\/h3>\n<p>When a chain of method calls is too long to fit on one line, there must be one call per line, with the first call on a separate line from the object the methods are called on. If the method changes the context, an extra level of indentation must be used.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nelements\r\n\t.addClass( 'foo' )\r\n\t.children()\r\n\t\t.html( 'hello' )\r\n\t.end()\r\n\t.appendTo( 'body' );\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"assignments-and-globals\" tabindex=\"-1\">Assignments and Globals <a href=\"#assignments-and-globals\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Assignments and Globals<\/span><\/a><\/h2>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"declaring-variables-with-var\" tabindex=\"-1\">Declaring Variables With var <a href=\"#declaring-variables-with-var\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Declaring Variables With var<\/span><\/a><\/h3>\n<p>Each function should begin with a single comma-delimited <code>var<\/code> statement that declares any local variables necessary. If a function does not declare a variable using <code>var<\/code>, that variable can leak into an outer scope (which is frequently the global scope, a worst-case scenario), and can unwittingly refer to and modify that data.<\/p>\n<p>Assignments within the <code>var<\/code> statement should be listed on individual lines, while declarations can be grouped on a single line. Any additional lines should be indented with an additional tab. Objects and functions that occupy more than a handful of lines should be assigned outside of the <code>var<\/code> statement, to avoid over-indentation.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/ Good\r\nvar k, m, length,\r\n\t\/\/ Indent subsequent lines by one tab\r\n\tvalue = 'WordPress';\r\n\r\n\/\/ Bad\r\nvar foo = true;\r\nvar bar = false;\r\nvar a;\r\nvar b;\r\nvar c;\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"globals\" tabindex=\"-1\">Globals <a href=\"#globals\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Globals<\/span><\/a><\/h3>\n<p>In the past, WordPress core made heavier use of global variables. Since core JavaScript files are sometimes used within plugins, existing globals should not be removed.<\/p>\n<p>All globals used within a file should be documented at the top of that file.\u00a0Multiple globals can be comma-separated.<\/p>\n<p>This example would make <code>passwordStrength<\/code> an allowed global variable within that file:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/* global passwordStrength:true *\/\r\n<\/pre>\n<p>The &#8220;true&#8221; after <code>passwordStrength<\/code> means that this global is being defined within this file. If you are accessing a global which is defined elsewhere, omit\u00a0<code>:true<\/code> to designate the global as read-only.<\/p>\n<p><strong>Common Libraries<\/strong><\/p>\n<p>Backbone, jQuery, Underscore, and the global <code>wp<\/code> object are all registered as allowed globals in the root <code>.jshintrc<\/code> file.<\/p>\n<p>Backbone and Underscore may be accessed directly at any time. jQuery should be accessed through <code>$<\/code> by passing the <code>jQuery<\/code> object into an anonymous function:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n(function( $ ) {\r\n  \/\/ Expressions\r\n})( jQuery );\r\n<\/pre>\n<p>This will negate the need to call <code>.noConflict()<\/code>, or to set <code>$<\/code> using another variable.<br \/>\nFiles which add to, or modify, the <code>wp<\/code> object must safely access the global to avoid overwriting previously set properties:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/ At the top of the file, set &quot;wp&quot; to its existing value (if present)\r\nwindow.wp = window.wp || {};\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"naming-conventions\" tabindex=\"-1\">Naming Conventions <a href=\"#naming-conventions\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Naming Conventions<\/span><\/a><\/h2>\n<p>Variable and function names should be full words, using camel case with a lowercase first letter. This is an area where this standard differs from the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#naming-conventions\">WordPress PHP coding standards<\/a>.<\/p>\n<p>Constructors intended for use with <code>new<\/code> should have a capital first letter (UpperCamelCase).<\/p>\n<p>Names should be descriptive, but not excessively so. Exceptions are allowed for iterators, such as the use of <code>i<\/code> to represent the index in a loop.<\/p>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"comments\" tabindex=\"-1\">Comments <a href=\"#comments\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Comments<\/span><\/a><\/h2>\n<p>Comments come before the code to which they refer, and should always be preceded by a blank line. Capitalize the first letter of the comment, and include a period at the end when writing full sentences. There must be a single space between the comment token (<code>\/\/<\/code>) and the comment text.<\/p>\n<p>Single line comments:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nsomeStatement();\r\n\r\n\/\/ Explanation of something complex on the next line\r\n$( 'p' ).doSomething();\r\n<\/pre>\n<p>Multi-line comments should be used for long comments, see also the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/inline-documentation-standards\/javascript\/#multi-line-comments\">JavaScript Documentation Standards<\/a>:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/*\r\n * This is a comment that is long enough to warrant being stretched\r\n * over the span of multiple lines.\r\n *\/\r\n<\/pre>\n<p>Inline comments are allowed as an exception when used to annotate special arguments in formal parameter lists:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nfunction foo( types, selector, data, fn, \/* INTERNAL *\/ one ) {\r\n\t\/\/ Do stuff\r\n}\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"equality\" tabindex=\"-1\">Equality <a href=\"#equality\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Equality<\/span><\/a><\/h2>\n<p>Strict equality checks (<code>===<\/code>) must be used in favor of abstract equality checks (<code>==<\/code>). The <em>only<\/em> exception is when checking for both <code>undefined<\/code> and <code>null<\/code> by way of <code>null<\/code>.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/ Check for both undefined and null values, for some important reason.\r\nif ( undefOrNull == null ) {\r\n\t\/\/ Expressions\r\n}\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"type-checks\" tabindex=\"-1\">Type Checks <a href=\"#type-checks\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Type Checks<\/span><\/a><\/h2>\n<p>These are the preferred ways of checking the type of an object:<\/p>\n<ul>\n<li>String: <code>typeof object === 'string'<\/code><\/li>\n<li>Number: <code>typeof object === 'number'<\/code><\/li>\n<li>Boolean: <code>typeof object === 'boolean'<\/code><\/li>\n<li>Object: <code>typeof object === 'object'<\/code> or <code>_.isObject( object )<\/code><\/li>\n<li>Plain Object: <code>jQuery.isPlainObject( object )<\/code><\/li>\n<li>Function: <code>_.isFunction( object)<\/code> or <code>jQuery.isFunction( object )<\/code><\/li>\n<li>Array: <code>_.isArray( object )<\/code> or <code>jQuery.isArray( object )<\/code><\/li>\n<li>Element: <code>object.nodeType<\/code> or <code>_.isElement( object )<\/code><\/li>\n<li>null: <code>object === null<\/code><\/li>\n<li>null or undefined: <code>object == null<\/code><\/li>\n<li>undefined:\n<ul>\n<li>Global Variables: <code>typeof variable === 'undefined'<\/code><\/li>\n<li>Local Variables: <code>variable === undefined<\/code><\/li>\n<li>Properties: <code>object.prop === undefined<\/code><\/li>\n<li>Any of the above: <code>_.isUndefined( object )<\/code><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<p>Anywhere Backbone or Underscore are already used, you are encouraged to use <a href=\"http:\/\/underscorejs.org\/#isElement\">Underscore.js<\/a>&#8216;s type checking methods over jQuery&#8217;s.<\/p>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"strings\" tabindex=\"-1\">Strings <a href=\"#strings\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Strings<\/span><\/a><\/h2>\n<p>Use single-quotes for string literals:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar myStr = 'strings should be contained in single quotes';\r\n<\/pre>\n<p>When a string contains single quotes, they need to be escaped with a backslash (<code>\\<\/code>):<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/ Escape single quotes within strings:\r\n'Note the backslash before the \\'single quotes\\'';\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"switch-statements\" tabindex=\"-1\">Switch Statements <a href=\"#switch-statements\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Switch Statements<\/span><\/a><\/h2>\n<p>The usage of <code>switch<\/code> statements is generally discouraged, but can be useful when there are a large number of cases &#8211; especially when multiple cases can be handled by the same block, or fall-through logic (the <code>default<\/code> case) can be leveraged.<\/p>\n<p>When using <code>switch<\/code> statements:<\/p>\n<p>&#8211; Use a <code>break<\/code> for each case other than <code>default<\/code>. When allowing statements to &#8220;fall through,&#8221; note that explicitly.<br \/>\n&#8211; Indent <code>case<\/code> statements one tab within the <code>switch<\/code>.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nswitch ( event.keyCode ) {\r\n\r\n\t\/\/ ENTER and SPACE both trigger x()\r\n\tcase $.ui.keyCode.ENTER:\r\n\tcase $.ui.keyCode.SPACE:\r\n\t\tx();\r\n\t\tbreak;\r\n\tcase $.ui.keyCode.ESCAPE:\r\n\t\ty();\r\n\t\tbreak;\r\n\tdefault:\r\n\t\tz();\r\n}\r\n<\/pre>\n<p>It is not recommended to return a value from within a switch statement: use the <code>case<\/code> blocks to set values, then <code>return<\/code> those values at the end.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nfunction getKeyCode( keyCode ) {\r\n\tvar result;\r\n\r\n\tswitch ( event.keyCode ) {\r\n\t\tcase $.ui.keyCode.ENTER:\r\n\t\tcase $.ui.keyCode.SPACE:\r\n\t\t\tresult = 'commit';\r\n\t\t\tbreak;\r\n\t\tcase $.ui.keyCode.ESCAPE:\r\n\t\t\tresult = 'exit';\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tresult = 'default';\r\n\t}\r\n\r\n\treturn result;\r\n}\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"best-practices\" tabindex=\"-1\">Best Practices <a href=\"#best-practices\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Best Practices<\/span><\/a><\/h2>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"arrays\" tabindex=\"-1\">Arrays <a href=\"#arrays\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Arrays<\/span><\/a><\/h3>\n<p>Creating arrays in JavaScript should be done using the shorthand <code>[]<\/code> constructor rather than the <code>new Array()<\/code> notation.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar myArray = [];\r\n<\/pre>\n<p>You can initialize an array during construction:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar myArray = [ 1, 'WordPress', 2, 'Blog' ];\r\n<\/pre>\n<p>In JavaScript, associative arrays are defined as objects.<\/p>\n<h3 class=\"toc-heading\" id=\"objects\" tabindex=\"-1\">Objects <a href=\"#objects\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Objects<\/span><\/a><\/h3>\n<p>There are many ways to create objects in JavaScript. Object literal notation, <code>{}<\/code>, is both the most performant, and also the easiest to read.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar myObj = {};\r\n<\/pre>\n<p>Object literal notation should be used unless the object requires a specific prototype, in which case the object should be created by calling a constructor function with <code>new<\/code>.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar myObj = new ConstructorMethod();\r\n<\/pre>\n<p>Object properties should be accessed via dot notation, unless the key is a variable, a <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Reserved_Words\">reserved word<\/a>, or a string that would not be a valid identifier:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nprop = object.propertyName;\r\nprop = object[ variableKey ];\r\nprop = object['default'];\r\nprop = object['key-with-hyphens'];\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"yoda-conditions\" tabindex=\"-1\">&#8220;Yoda&#8221; Conditions <a href=\"#yoda-conditions\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">&#8220;Yoda&#8221; Conditions<\/span><\/a><\/h3>\n<p>For consistency with the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#yoda-conditions\">PHP code standards<\/a>, whenever you are comparing an object to a string, boolean, integer, or other constant or literal, the variable should always be put on the right hand side, and the constant or literal put on the left.<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nif ( true === myCondition ) {\r\n\t\/\/ Do stuff\r\n}\r\n<\/pre>\n<p>&#8220;A little bizarre, it is, to read. Get used to it, you will.&#8221;<\/p>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"iteration\" tabindex=\"-1\">Iteration <a href=\"#iteration\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Iteration<\/span><\/a><\/h3>\n<p>When iterating over a large collection using a <code>for<\/code> loop, it is recommended to store the loop&#8217;s max value as a variable rather than re-computing the maximum every time:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/\/ Good &amp; Efficient\r\nvar i, max;\r\n\r\n\/\/ getItemCount() gets called once\r\nfor ( i = 0, max = getItemCount(); i &lt; max; i++ ) {\r\n\t\/\/ Do stuff\r\n}\r\n\r\n\/\/ Bad &amp; Potentially Inefficient:\r\n\/\/ getItemCount() gets called every time\r\nfor ( i = 0; i &lt; getItemCount(); i++ ) {\r\n\t\/\/ Do stuff\r\n}\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"underscore-js-collection-functions\" tabindex=\"-1\">Underscore.js Collection Functions <a href=\"#underscore-js-collection-functions\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Underscore.js Collection Functions<\/span><\/a><\/h3>\n<p>Learn and understand Underscore&#8217;s <a href=\"http:\/\/underscorejs.org\/#collections\">collection and array methods<\/a>. These functions, including <code>_.each<\/code>, <code>_.map<\/code>, and <code>_.reduce<\/code>, allow for efficient, readable transformations of large data sets.<\/p>\n<p>Underscore also permits jQuery-style chaining with regular JavaScript objects:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\nvar obj = {\r\n\tfirst: 'thing 1',\r\n\tsecond: 'thing 2',\r\n\tthird: 'lox'\r\n};\r\n\r\nvar arr = _.chain( obj )\r\n\t.keys()\r\n\t.map(function( key ) {\r\n\t\treturn key + ' comes ' + obj[ key ];\r\n\t})\r\n\t\/\/ Exit the chain\r\n\t.value();\r\n\r\n\/\/ arr === [ 'first comes thing 1', 'second comes thing 2', 'third comes lox' ]\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"iterating-over-jquery-collections\" tabindex=\"-1\">Iterating Over jQuery Collections <a href=\"#iterating-over-jquery-collections\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Iterating Over jQuery Collections<\/span><\/a><\/h3>\n<p>The only time jQuery should be used for iteration is when iterating over a collection of jQuery objects:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n$tabs.each(function( index, element ) {\r\n\tvar $element = $( element );\r\n\r\n\t\/\/ Do stuff to $element\r\n});\r\n<\/pre>\n<p>Never use jQuery to iterate over raw data or vanilla JavaScript objects.<\/p>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"jshint\" tabindex=\"-1\">JSHint <a href=\"#jshint\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">JSHint<\/span><\/a><\/h2>\n<p><a href=\"http:\/\/jshint.com\">JSHint<\/a> is an automated code quality tool, designed to catch errors in your JavaScript code. JSHint is used in WordPress development to quickly verify that a patch has not introduced any logic or syntax errors to the front-end.<\/p>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"installing-and-running-jshint\" tabindex=\"-1\">Installing and Running JSHint <a href=\"#installing-and-running-jshint\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Installing and Running JSHint<\/span><\/a><\/h3>\n<p>JSHint is run using a tool called <a href=\"https:\/\/gruntjs.com\/\">Grunt<\/a>. Both JSHint and Grunt are programs written in <a href=\"https:\/\/nodejs.org\/\">Node.js<\/a>. A configuration file that comes with the WordPress development code makes it easy to install and configure these tools.<\/p>\n<p>To install Node.js, click the Install link on the <a href=\"https:\/\/nodejs.org\/\">Node<\/a> website. The correct install file for your operating system will be downloaded. Follow the installation steps for your operating system to install the program.<\/p>\n<p>Once Node.js is installed, open a command line window and navigate to the directory where you <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/tutorials\/installing-wordpress-locally\/from-svn\/\">checked out a copy of the WordPress SVN repository<\/a> (use <code>cd ~\/directoryname<\/code>). You should be in the root directory which contains the <code>package.json<\/code> file.<\/p>\n<p>Next, type <code>npm install<\/code> into the command line window. This will download and install all the Node packages used in WordPress development.<\/p>\n<p>Finally, type <code>npm install -g grunt-cli<\/code> to install the Grunt Command Line Interface (CLI) package. Grunt CLI is what is used to actually run the Grunt tasks in WordPress.<\/p>\n<p>You should now be able to type <code>grunt jshint<\/code> to have Grunt check all the WordPress JavaScript files for syntax and logic errors. To only check core code, type <code>grunt jshint:core<\/code>; to only check unit test .js files, type <code>grunt jshint:tests<\/code>.<\/p>\n<p><strong>JSHint Settings<\/strong><\/p>\n<p>The configuration options used for JSHint are stored within a <a title=\"WordPress JSHint file in svn trunk\" href=\"https:\/\/develop.svn.wordpress.org\/trunk\/.jshintrc\"><code>.jshintrc<\/code> file<\/a> in the WordPress SVN repository. This file defines which errors JSHint should flag if it finds them within the WordPress source code.<\/p>\n<p><strong>Target A Single File<\/strong><\/p>\n<p>To specify a single file for JSHint to check, add <code>--file=filename.js<\/code> to the end of the command. For example, this will only check the file named &#8220;admin-bar.js&#8221; within WordPress&#8217;s core JavaScript files:<\/p>\n<p><code>grunt jshint:core --file=admin-bar.js<\/code><\/p>\n<p>And this would only check the &#8220;password-strength-meter.js&#8221; file within the unit tests directory:<\/p>\n<p><code>grunt jshint:tests --file=password-strength-meter.js<\/code><\/p>\n<p>Limiting JSHint to a single file can be useful if you are only working on one or two specific files and don&#8217;t want to wait for JSHint to process every single file each time it runs.<\/p>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h3 class=\"toc-heading\" id=\"jshint-overrides-ignore-blocks\" tabindex=\"-1\">JSHint Overrides: Ignore Blocks <a href=\"#jshint-overrides-ignore-blocks\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">JSHint Overrides: Ignore Blocks<\/span><\/a><\/h3>\n<p>In some situations, parts of a file should be excluded from JSHint. As an example, the script file for the admin bar contains the minified code for the jQuery HoverIntent plugin &#8211; this is third-party code that should not pass through JSHint, even though it is part of a WordPress core JavaScript file.<\/p>\n<p>To exclude a specific file region from being processed by JSHint, enclose it in JSHint directive comments:<\/p>\n<pre class=\"brush: jscript; title: ; notranslate\" title=\"\">\r\n\/* jshint ignore:start *\/\r\nif ( typeof jQuery.fn.hoverIntent === 'undefined' ) {\r\n\t\/\/ hoverIntent r6 - Copy of wp-includes\/js\/hoverIntent.min.js\r\n\t(function(a){a.fn.hoverIntent=...............\r\n}\r\n\/* jshint ignore:end *\/\r\n<\/pre>\n<p class=\"toc-jump\"><a href=\"#top\">Top &uarr;<\/a><\/p><h2 class=\"toc-heading\" id=\"credits\" tabindex=\"-1\">Credits <a href=\"#credits\" class=\"anchor\"><span aria-hidden=\"true\">#<\/span><span class=\"screen-reader-text\">Credits<\/span><\/a><\/h2>\n<ul>\n<li>The jQuery examples are adapted from the <a href=\"https:\/\/contribute.jquery.org\/style-guide\/js\">jQuery JavaScript Style Guide<\/a>, which is made available under the MIT license.<\/li>\n<\/ul>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/","unixtime":1364687513,"unixtimeModified":1496903769,"entryHeaderMeta":"","linkPages":"","footerEntryMeta":"","tagsRaw":"","tagsArray":[],"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F","hasPrevPost":true,"prevPostTitle":"Installing XAMPP","prevPostURL":"https:\/\/make.wordpress.org\/core\/handbook\/tutorials\/installing-a-local-server\/xampp\/","hasNextPost":true,"nextPostTitle":"Inline Documentation Standards","nextPostURL":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/inline-documentation-standards\/","commentsOpen":false,"is_xpost":false,"editURL":null,"postActions":"<nav class='o2-dropdown-actions o2-post-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><span>Post Actions<\/span><\/button><ul><li><a href=\"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/\" title=\"Scroll to comments\"  class=\"o2-scroll-to-comments genericon  genericon-downarrow\"  data-action=\"scrolltocomments\"  data-actionstate=\"default\" >Scroll<\/a><\/li><li><a href=\"https:\/\/make.wordpress.org\/core\/?p=5078\" title=\"Shortlink\"  class=\"short-link o2-short-link genericon  genericon-link\"  data-action=\"shortlink\"  data-actionstate=\"default\" >Shortlink<\/a><\/li><\/ul><\/nav>","comments":[{"type":"comment","id":"8778","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment even thread-even depth-1","parentID":"0","contentRaw":"Is there a position on whether or not ?comma-first? coding style is OK, for example to in declaring variables and writing object literals?","contentFiltered":"<p>Is there a position on whether or not ?comma-first? coding style is OK, for example to in declaring variables and writing object literals?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-8778","unixtime":1366041670,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-8778","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1366041670,"hasChildren":false,"noprivUserName":"Weston Ruter","noprivUserHash":"ac01fb365e479280ccc707153bc71e2a","noprivUserURL":"http:\/\/weston.ruter.net\/"},{"type":"comment","id":"8779","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment odd alt depth-2","parentID":"8778","contentRaw":"That is all dependent on the developer and how he\/she is instantiating their objects and writing their JS.","contentFiltered":"<p>That is all dependent on the developer and how he\/she is instantiating their objects and writing their JS.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-8779","unixtime":1366754331,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-8779","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1366754331,"hasChildren":false,"noprivUserName":"carldanley","noprivUserHash":"f9383ce985bd48ed45dcff66546f30a7","noprivUserURL":"http:\/\/www.codebyter.com"},{"type":"comment","id":"8906","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-peterrknight even thread-odd thread-alt depth-1","parentID":"0","contentRaw":"I'm a little confused with the ternary operator guidelines. It states that it more or less follows the php guidelines. The wording though says the result needs to be true or false and so if you take the php example, that would be considered 'bad'. Isn't it overly restrictive?\n\nhere's the php example http:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#ternary-operator","contentFiltered":"<p>I&#8217;m a little confused with the ternary operator guidelines. It states that it more or less follows the php guidelines. The wording though says the result needs to be true or false and so if you take the php example, that would be considered &#8216;bad&#8217;. Isn&#8217;t it overly restrictive?<\/p>\n<p>here&#8217;s the php example <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#ternary-operator\" rel=\"nofollow\">https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#ternary-operator<\/a><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-8906","unixtime":1369988045,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-8906","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1369988045,"hasChildren":false,"userLogin":"PeterRKnight","userNicename":"peterrknight"},{"type":"comment","id":"8930","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-nacin odd alt depth-2","parentID":"8906","contentRaw":"I don't understand the ternary operator guideline here either. <code>$x = $y ? true : false<\/code> isn't a ternary, it's a too-verbose way to write out a boolean statement. Something like <code>$x = (bool) $y<\/code>, or even (for JS) <code>$x = !! $y<\/code>.","contentFiltered":"<p>I don&#8217;t understand the ternary operator guideline here either. <code>$x = $y ? true : false<\/code> isn&#8217;t a ternary, it&#8217;s a too-verbose way to write out a boolean statement. Something like <code>$x = (bool) $y<\/code>, or even (for JS) <code>$x = !! $y<\/code>.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-8930","unixtime":1370291355,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-8930","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1370291355,"hasChildren":false,"userLogin":"nacin","userNicename":"nacin"},{"type":"comment","id":"9139","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-pauldewouters even thread-even depth-1","parentID":"0","contentRaw":"Why are the spacing standards different between JavaScript and PHP for arrays?\nIn PHP, the standard is no spacing inside the brackets, and in JavaScript, it's the opposite.","contentFiltered":"<p>Why are the spacing standards different between JavaScript and PHP for arrays?<br \/>\nIn PHP, the standard is no spacing inside the brackets, and in JavaScript, it&#8217;s the opposite.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9139","unixtime":1372159210,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9139","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1372159210,"hasChildren":false,"userLogin":"pauldewouters","userNicename":"pauldewouters"},{"type":"comment","id":"9182","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-beaulebens odd alt depth-2","parentID":"9139","contentRaw":"Actually in PHP there are supposed to be spaces in array definitions as well (according to the code standards). There are a few places in core where that's not done, but that's mostly older code that was not done according to the current standards. When in doubt, space it out.","contentFiltered":"<p>Actually in PHP there are supposed to be spaces in array definitions as well (according to the code standards). There are a few places in core where that&#8217;s not done, but that&#8217;s mostly older code that was not done according to the current standards. When in doubt, space it out.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9182","unixtime":1372694037,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9182","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1372694037,"hasChildren":false,"userLogin":"beaulebens","userNicename":"beaulebens"},{"type":"comment","id":"9426","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-tommcfarlin even depth-2","parentID":"8778","contentRaw":"There's currently no position on this. \n\nPersonally, I like standard style more; however, I also agree with Carl Danley that this is up to the discretion of the developer.\n\nUltimately, I'd love to see this standardized so if there's a majority who prefers a certain style, we can adopt it.\n\nFor what it's worth, I don't think either one is less error prone than the other. I tend to find that standard style is a bit more like written language with commas after a clause than starting a line (if that makes sense).","contentFiltered":"<p>There&#8217;s currently no position on this. <\/p>\n<p>Personally, I like standard style more; however, I also agree with Carl Danley that this is up to the discretion of the developer.<\/p>\n<p>Ultimately, I&#8217;d love to see this standardized so if there&#8217;s a majority who prefers a certain style, we can adopt it.<\/p>\n<p>For what it&#8217;s worth, I don&#8217;t think either one is less error prone than the other. I tend to find that standard style is a bit more like written language with commas after a clause than starting a line (if that makes sense).<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9426","unixtime":1375384540,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9426","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1375384540,"hasChildren":false,"userLogin":"tommcfarlin","userNicename":"tommcfarlin"},{"type":"comment","id":"9427","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-tommcfarlin odd alt depth-2","parentID":"8906","contentRaw":"Agree with both Peter and Nacin on this.\n\nI'd love to cut down on verbosity. We could simply update the first ternary guide to something like this:\n\n<code>\nvar fixedP;\nfixedP = 'WordPress' === $('#comment').val();\n<\/code>\n\nAnd the second one as-is, or offer an alternative. There's a balance to be struck between trying to write clever code and concise, readable code.\n\nSuggestions welcome.","contentFiltered":"<p>Agree with both Peter and Nacin on this.<\/p>\n<p>I&#8217;d love to cut down on verbosity. We could simply update the first ternary guide to something like this:<\/p>\n<p><code><br \/>\nvar fixedP;<br \/>\nfixedP = 'WordPress' === $('#comment').val();<br \/>\n<\/code><\/p>\n<p>And the second one as-is, or offer an alternative. There&#8217;s a balance to be struck between trying to write clever code and concise, readable code.<\/p>\n<p>Suggestions welcome.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9427","unixtime":1375384744,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9427","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1375384744,"hasChildren":false,"userLogin":"tommcfarlin","userNicename":"tommcfarlin"},{"type":"comment","id":"9428","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-tommcfarlin even depth-3","parentID":"9182","contentRaw":"^ This. \"When in doubt, space it out.\"","contentFiltered":"<p>^ This. &#8220;When in doubt, space it out.&#8221;<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9428","unixtime":1375384801,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9428","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":3,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1375384801,"hasChildren":false,"userLogin":"tommcfarlin","userNicename":"tommcfarlin"},{"type":"comment","id":"9969","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-rwdrwd odd alt depth-2","parentID":"8906","contentRaw":"Hi!\n\nI'm also confused with this ternary rule, it seems to remove the ability to use them in JavaScript, since\n\nfixedP = 'WordPress' === $('#comment').val() ? true : false;\n\ncan just be written as \n\nfixedP = ( 'WordPress' === $('#comment').val() )\n\nIn JavaScript any condition you would use to determine true or false can just be written as an expression in this way.\n\nIt does seem overly restrictive to me.","contentFiltered":"<p>Hi!<\/p>\n<p>I&#8217;m also confused with this ternary rule, it seems to remove the ability to use them in JavaScript, since<\/p>\n<p>fixedP = &#8216;WordPress&#8217; === $(&#8216;#comment&#8217;).val() ? true : false;<\/p>\n<p>can just be written as <\/p>\n<p>fixedP = ( &#8216;WordPress&#8217; === $(&#8216;#comment&#8217;).val() )<\/p>\n<p>In JavaScript any condition you would use to determine true or false can just be written as an expression in this way.<\/p>\n<p>It does seem overly restrictive to me.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9969","unixtime":1376662859,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9969","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1376662859,"hasChildren":false,"userLogin":"rwdrwd","userNicename":"rwdrwd"},{"type":"comment","id":"9976","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-rwdrwd even thread-odd thread-alt depth-1","parentID":"0","contentRaw":"Just interested in why the choice to not use snake_case for JavaScript was triggered? I don't think it's a JSLint preference so it surprised me that the guidelines would differ from PHP in this regard.","contentFiltered":"<p>Just interested in why the choice to not use snake_case for JavaScript was triggered? I don&#8217;t think it&#8217;s a JSLint preference so it surprised me that the guidelines would differ from PHP in this regard.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-9976","unixtime":1376670960,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-9976","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1376670960,"hasChildren":false,"userLogin":"rwdrwd","userNicename":"rwdrwd"},{"type":"comment","id":"10010","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-tommcfarlin odd alt depth-3","parentID":"9969","contentRaw":"Totally down with this. The example was meant more to provide an example of using the ternary operator than the actual content in question.\n\nI agree with you.","contentFiltered":"<p>Totally down with this. The example was meant more to provide an example of using the ternary operator than the actual content in question.<\/p>\n<p>I agree with you.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-10010","unixtime":1376933943,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-10010","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":3,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1376933943,"hasChildren":false,"userLogin":"tommcfarlin","userNicename":"tommcfarlin"},{"type":"comment","id":"10012","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-tommcfarlin even depth-2","parentID":"9976","contentRaw":"Honestly, this was done because it's a carry over from some of the habits of PHP and it's simply trying to bridge the gap.\n\nI'll be the first to admit that I (despite the fact that many JavaScript developers complain about how strict it is) enjoy using JSLint and use it whenever possible.\n\nIf we, as a community, want to use it our method for JavaScript code quality, I'm all for it, but I think we need to get buy in from more than just a couple of people as it will drastically complain about a lot of the code that we have today (not that that's a bad thing ... but it is a thing :)).","contentFiltered":"<p>Honestly, this was done because it&#8217;s a carry over from some of the habits of PHP and it&#8217;s simply trying to bridge the gap.<\/p>\n<p>I&#8217;ll be the first to admit that I (despite the fact that many JavaScript developers complain about how strict it is) enjoy using JSLint and use it whenever possible.<\/p>\n<p>If we, as a community, want to use it our method for JavaScript code quality, I&#8217;m all for it, but I think we need to get buy in from more than just a couple of people as it will drastically complain about a lot of the code that we have today (not that that&#8217;s a bad thing &#8230; but it is a thing :)).<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-10012","unixtime":1376934130,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-10012","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1376934130,"hasChildren":false,"userLogin":"tommcfarlin","userNicename":"tommcfarlin"},{"type":"comment","id":"10208","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-iandunn odd alt thread-even depth-1","parentID":"0","contentRaw":"Should the example in the jQuery section be changed to add in whitespace?\n\n<code>\n( function ( $ ) {\n    \/\/ ...\n} ( jQuery ) );\n<\/code>\n\nOtherwise it's inconsistent with the current whitespace rules.\n\nAlso, if we're <a href=\"http:\/\/core.trac.wordpress.org\/ticket\/25088#comment:31\" rel=\"nofollow\">making an exception to be consistent<\/a> with the following Query convention, then it'd be good to document that here too\n\n<code>\n$( selector ).event( function() {\n    \/\/ ...\n});\n<\/code>","contentFiltered":"<p>Should the example in the jQuery section be changed to add in whitespace?<\/p>\n<p><code><br \/>\n( function ( $ ) {<br \/>\n    \/\/ ...<br \/>\n} ( jQuery ) );<br \/>\n<\/code><\/p>\n<p>Otherwise it&#8217;s inconsistent with the current whitespace rules.<\/p>\n<p>Also, if we&#8217;re <a href=\"https:\/\/core.trac.wordpress.org\/ticket\/25088#comment:31\" rel=\"nofollow\">making an exception to be consistent<\/a> with the following Query convention, then it&#8217;d be good to document that here too<\/p>\n<p><code><br \/>\n$( selector ).event( function() {<br \/>\n    \/\/ ...<br \/>\n});<br \/>\n<\/code><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-10208","unixtime":1377882420,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-10208","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1377882420,"hasChildren":false,"userLogin":"iandunn","userNicename":"iandunn"},{"type":"comment","id":"11363","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-pdclark even depth-2","parentID":"10208","contentRaw":"If we're basing whitespace rules partly on jQuery conventions, jQuery does make exceptions for anonymous functions & callbacks: http:\/\/contribute.jquery.org\/style-guide\/js\/#spacing","contentFiltered":"<p>If we&#8217;re basing whitespace rules partly on jQuery conventions, jQuery does make exceptions for anonymous functions &amp; callbacks: <a href=\"http:\/\/contribute.jquery.org\/style-guide\/js\/#spacing\" rel=\"nofollow\">http:\/\/contribute.jquery.org\/style-guide\/js\/#spacing<\/a><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-11363","unixtime":1383772700,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-11363","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1383772700,"hasChildren":false,"userLogin":"pdclark","userNicename":"pdclark"},{"type":"comment","id":"11427","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-kadamwhite odd alt thread-odd thread-alt depth-1","parentID":"0","contentRaw":"Per the <a href=\"http:\/\/make.wordpress.org\/core\/2013\/11\/05\/javascript-coding-standards\/\" rel=\"nofollow\">discussions<\/a> around implementing JSHint, adopting and adapting the jQuery style guide, and updating the old version of this page, tonight we have finished a complete refresh of the JS standards. Please leave a comment if you notice any inconsistencies within this document, or if it does not cover a particular case you have encountered in the code.\n\nAll the above previous comments should be addressed by this updated guide.","contentFiltered":"<p>Per the <a href=\"https:\/\/make.wordpress.org\/core\/2013\/11\/05\/javascript-coding-standards\/\" rel=\"nofollow\">discussions<\/a> around implementing JSHint, adopting and adapting the jQuery style guide, and updating the old version of this page, tonight we have finished a complete refresh of the JS standards. Please leave a comment if you notice any inconsistencies within this document, or if it does not cover a particular case you have encountered in the code.<\/p>\n<p>All the above previous comments should be addressed by this updated guide.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-11427","unixtime":1384235629,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-11427","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1384235629,"hasChildren":false,"userLogin":"kadamwhite","userNicename":"kadamwhite"},{"type":"comment","id":"11499","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-morganestes even thread-even depth-1","parentID":"0","contentRaw":"The single-quoted strings seem a bit off to me, since they're not specified in the jQuery standard (all of their examples use double-quotes), and the PHP standard allows for either\/or (double if you have singles inside, rather than escaping) http:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#single-and-double-quotes.\n\nIs there a particular reason for *only* allowing single-quotes, or can we make it a \"preferred, but use doubles instead of escaping\" guideline?","contentFiltered":"<p>The single-quoted strings seem a bit off to me, since they&#8217;re not specified in the jQuery standard (all of their examples use double-quotes), and the PHP standard allows for either\/or (double if you have singles inside, rather than escaping) <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#single-and-double-quotes\" rel=\"nofollow\">https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/php\/#single-and-double-quotes<\/a>.<\/p>\n<p>Is there a particular reason for *only* allowing single-quotes, or can we make it a &#8220;preferred, but use doubles instead of escaping&#8221; guideline?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-11499","unixtime":1384380894,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-11499","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1384380894,"hasChildren":false,"userLogin":"morganestes","userNicename":"morganestes"},{"type":"comment","id":"11878","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-kadamwhite odd alt thread-odd thread-alt depth-1","parentID":"0","contentRaw":"@morganestes &ndash; PHP's a bit of a different case, because single- and double-quoted strings actually <a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" rel=\"nofollow\">work differently<\/a> (values can be interpolated in double-quoted strings, but not single).\n\nAs far as JavaScript is concerned there's no functional difference, but we felt strongly that a project should only use one type of quotes (and tools like JSHint are designed to enforce this kind of consistency).\nThe original version of this document specified the either\/or behavior you describe, but consistency both aids readability and cuts down on potential errors. Since almost all strings in WordPress JS files were already using single-quotes, largely in order to make it easier to enclose (double-quoted) HTML in your strings, it was an easy decision to standardize on single quotes.","contentFiltered":"<p>@morganestes &ndash; PHP&#8217;s a bit of a different case, because single- and double-quoted strings actually <a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" rel=\"nofollow\">work differently<\/a> (values can be interpolated in double-quoted strings, but not single).<\/p>\n<p>As far as JavaScript is concerned there&#8217;s no functional difference, but we felt strongly that a project should only use one type of quotes (and tools like JSHint are designed to enforce this kind of consistency).<br \/>\nThe original version of this document specified the either\/or behavior you describe, but consistency both aids readability and cuts down on potential errors. Since almost all strings in WordPress JS files were already using single-quotes, largely in order to make it easier to enclose (double-quoted) HTML in your strings, it was an easy decision to standardize on single quotes.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-11878","unixtime":1385608234,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-11878","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1385608234,"hasChildren":false,"userLogin":"kadamwhite","userNicename":"kadamwhite"},{"type":"comment","id":"11879","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-morganestes even thread-even depth-1","parentID":"0","contentRaw":"Thanks for the background info. I'm just adverse to escaping when I don't have to, but if I have guidelines to follow it makes it easier for me to discipline myself to follow them.","contentFiltered":"<p>Thanks for the background info. I&#8217;m just adverse to escaping when I don&#8217;t have to, but if I have guidelines to follow it makes it easier for me to discipline myself to follow them.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-11879","unixtime":1385613001,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-11879","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1385613001,"hasChildren":false,"userLogin":"morganestes","userNicename":"morganestes"},{"type":"comment","id":"13068","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-bassgang odd alt thread-odd thread-alt depth-1","parentID":"0","contentRaw":"What is the limit to switch from one line comment \" \/\/ \" to multi line comment \" \/* \u2026 *\/ \"?\nThe comment section shows that as of two line comment we should use \" \/* \u2026 *\/ \" but a lot of other examples on this use also \" \/\/ \" comment for two liners. I am confused, thanks for clarifying.","contentFiltered":"<p>What is the limit to switch from one line comment &#8221; \/\/ &#8221; to multi line comment &#8221; \/* \u2026 *\/ &#8220;?<br \/>\nThe comment section shows that as of two line comment we should use &#8221; \/* \u2026 *\/ &#8221; but a lot of other examples on this use also &#8221; \/\/ &#8221; comment for two liners. I am confused, thanks for clarifying.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-13068","unixtime":1394723280,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-13068","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1394723280,"hasChildren":false,"userLogin":"bassgang","userNicename":"bassgang"},{"type":"comment","id":"13069","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-bassgang even depth-2","parentID":"13068","contentRaw":"I meant \"other examples on this PAGE use \u2026\".\nFurthermore:  What about JSDoc blocks, any standard adopted here?","contentFiltered":"<p>I meant &#8220;other examples on this PAGE use \u2026&#8221;.<br \/>\nFurthermore:  What about JSDoc blocks, any standard adopted here?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-13069","unixtime":1394723573,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-13069","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1394723573,"hasChildren":false,"userLogin":"bassgang","userNicename":"bassgang"},{"type":"comment","id":"13072","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-kadamwhite odd alt depth-2","parentID":"13068","contentRaw":"Thanks for pointing out the discrepancy. In practice, I see no difference between the two for comments of 2-4 lines or so... there's a lot of \"prior art\" in the codebase where we use `\/\/` for multi-liners, so it's probably worth reflecting that flexibility here.\n\nAs for inline documentation, I'd use the media library Backbone code as an example of what we're aiming for with JSDoc blocks\u2014the official standard has yet to be written up. At the present time we're making consistent use of `@param`\/`@returns`, `@constructor`, `@augments`, `@readonly` and a couple others.","contentFiltered":"<p>Thanks for pointing out the discrepancy. In practice, I see no difference between the two for comments of 2-4 lines or so&#8230; there&#8217;s a lot of &#8220;prior art&#8221; in the codebase where we use `\/\/` for multi-liners, so it&#8217;s probably worth reflecting that flexibility here.<\/p>\n<p>As for inline documentation, I&#8217;d use the media library Backbone code as an example of what we&#8217;re aiming for with JSDoc blocks\u2014the official standard has yet to be written up. At the present time we&#8217;re making consistent use of `@param`\/`@returns`, `@constructor`, `@augments`, `@readonly` and a couple others.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-13072","unixtime":1394788494,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-13072","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":["param","returns","constructor","augments","readonly"],"mentionContext":"","commentCreated":1394788494,"hasChildren":false,"userLogin":"kadamwhite","userNicename":"kadamwhite"},{"type":"comment","id":"14197","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-lukecarbis even thread-even depth-1","parentID":"0","contentRaw":"Match Yoda Conditionals, type checks do not. Should we use `typeof object === 'string'` or `'string'=== typeof object`?","contentFiltered":"<p>Match Yoda Conditionals, type checks do not. Should we use `typeof object === &#8216;string&#8217;` or `&#8217;string&#8217;=== typeof object`?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-14197","unixtime":1399420886,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-14197","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1399420886,"hasChildren":false,"userLogin":"lukecarbis","userNicename":"lukecarbis"},{"type":"comment","id":"17928","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-georgesjeandenis odd alt depth-2","parentID":"11878","contentRaw":"I have to agree with Morgan. I've been using javascript for years. In all the sources I've used over the years, strings have always been preferably written with double quotes. It's not just Jquery's website that does this, look at \nhttps:\/\/developer.mozilla.org\/en\/docs\/Web\/JavaScript\/Guide\/Values,_variables,_and_literals#String_literals\n\nOr even just a quick view source on popular websites like Apple, Google, or even twitter.com clearly show that their use of javascript strongly prefers double quotes. The fact that WordPress or jshint aims to enforce single quotes goes against something that has been around for years.","contentFiltered":"<p>I have to agree with Morgan. I&#8217;ve been using javascript for years. In all the sources I&#8217;ve used over the years, strings have always been preferably written with double quotes. It&#8217;s not just Jquery&#8217;s website that does this, look at<br \/>\n<a href=\"https:\/\/developer.mozilla.org\/en\/docs\/Web\/JavaScript\/Guide\/Values,_variables,_and_literals#String_literals\" rel=\"nofollow\">https:\/\/developer.mozilla.org\/en\/docs\/Web\/JavaScript\/Guide\/Values,_variables,_and_literals#String_literals<\/a><\/p>\n<p>Or even just a quick view source on popular websites like Apple, Google, or even twitter.com clearly show that their use of javascript strongly prefers double quotes. The fact that WordPress or jshint aims to enforce single quotes goes against something that has been around for years.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-17928","unixtime":1408782930,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-17928","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1408782930,"hasChildren":false,"userLogin":"georgesjeandenis","userNicename":"georgesjeandenis"},{"type":"comment","id":"23364","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-aubreypwd even thread-odd thread-alt depth-1","parentID":"0","contentRaw":"So, got a good situation: If I am adding <code>jQuery( 'p' ).foo( 'something', function() { ... } );<\/code>, as you can see I start off calling <code>.foo(-space-<\/code>, but end with <code>});<\/code>, should that be <code>foo('something', function(){});<\/code> or <code>foo( 'something', function(){}-space-);<\/code>","contentFiltered":"<p>So, got a good situation: If I am adding <code>jQuery( 'p' ).foo( 'something', function() { ... } );<\/code>, as you can see I start off calling <code>.foo(-space-<\/code>, but end with <code>});<\/code>, should that be <code>foo('something', function(){});<\/code> or <code>foo( 'something', function(){}-space-);<\/code><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-23364","unixtime":1417742057,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-23364","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1417742057,"hasChildren":false,"userLogin":"aubreypwd","userNicename":"aubreypwd"},{"type":"comment","id":"24830","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-johnzanussi odd alt depth-2","parentID":"23364","contentRaw":"This situation is documented in the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/javascript\/#arrays-and-function-calls\" rel=\"nofollow\">Arrays and Function Calls<\/a> section.\n\n<code>\n\/\/ Function with a callback, object, or array as the last argument:\n\/\/ No space after after the last argument\nfoo( data, function() {\n    \/\/ Do stuff\n});\n<\/code>","contentFiltered":"<p>This situation is documented in the <a href=\"https:\/\/make.wordpress.org\/core\/handbook\/coding-standards\/javascript\/#arrays-and-function-calls\" rel=\"nofollow\">Arrays and Function Calls<\/a> section.<\/p>\n<p><code><br \/>\n\/\/ Function with a callback, object, or array as the last argument:<br \/>\n\/\/ No space after after the last argument<br \/>\nfoo( data, function() {<br \/>\n    \/\/ Do stuff<br \/>\n});<br \/>\n<\/code><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-24830","unixtime":1420694616,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-24830","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1420694616,"hasChildren":false,"userLogin":"johnzanussi","userNicename":"johnzanussi"},{"type":"comment","id":"25307","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-paulschreiber even thread-even depth-1","parentID":"0","contentRaw":"Is there a jscs configuration file\/preset to enforce the WordPress VIP style? If not, can someone help make one?","contentFiltered":"<p>Is there a jscs configuration file\/preset to enforce the WordPress VIP style? If not, can someone help make one?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-25307","unixtime":1424526190,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-25307","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1424526190,"hasChildren":false,"userLogin":"paulschreiber","userNicename":"paulschreiber"},{"type":"comment","id":"25343","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-chrisdc1 odd alt depth-2","parentID":"25307","contentRaw":"It's a work in progress (could use some testing at the very least), but here's what I've been working on if you're interested:\nhttps:\/\/gist.github.com\/chrisdc\/01d3b9ad02991b9852dd","contentFiltered":"<p>It&#8217;s a work in progress (could use some testing at the very least), but here&#8217;s what I&#8217;ve been working on if you&#8217;re interested:<br \/>\n<a href=\"https:\/\/gist.github.com\/chrisdc\/01d3b9ad02991b9852dd\" rel=\"nofollow\">https:\/\/gist.github.com\/chrisdc\/01d3b9ad02991b9852dd<\/a><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-25343","unixtime":1425556891,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-25343","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1425556891,"hasChildren":false,"userLogin":"Chrisdc1","userNicename":"chrisdc1"},{"type":"comment","id":"26225","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-stormwarning even depth-2","parentID":"25307","contentRaw":"As of [1.12.0](http:\/\/jscs.info\/changelog.html#version-1-12-0), jscs has a [WordPress preset](https:\/\/github.com\/jscs-dev\/node-jscs\/blob\/master\/presets\/wordpress.json), although I can't say how well it conforms to the VIP standard specifically.","contentFiltered":"<p>As of [1.12.0](<a href=\"http:\/\/jscs.info\/changelog.html#version-1-12-0\" rel=\"nofollow\">http:\/\/jscs.info\/changelog.html#version-1-12-0<\/a>), jscs has a [WordPress preset](<a href=\"https:\/\/github.com\/jscs-dev\/node-jscs\/blob\/master\/presets\/wordpress.json\" rel=\"nofollow\">https:\/\/github.com\/jscs-dev\/node-jscs\/blob\/master\/presets\/wordpress.json<\/a>), although I can&#8217;t say how well it conforms to the VIP standard specifically.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-26225","unixtime":1435953151,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-26225","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1435953151,"hasChildren":false,"userLogin":"stormwarning","userNicename":"stormwarning"},{"type":"comment","id":"27713","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-kennethjfalbous odd alt thread-odd thread-alt depth-1","parentID":"0","contentRaw":"to avoid confusion for personal reference, what I understood is that WordPress does not accept double quotations at all. Right?","contentFiltered":"<p>to avoid confusion for personal reference, what I understood is that WordPress does not accept double quotations at all. Right?<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-27713","unixtime":1442212835,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-27713","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":1,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1442212835,"hasChildren":false,"userLogin":"kennethjfalbous","userNicename":"kennethjfalbous"},{"type":"comment","id":"28233","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-georgesjeandenis even depth-2","parentID":"11499","contentRaw":"You know Morgan, this is just another case of \"coding wars\", much like the semi-colon wars in computer programming that has been going on for years.\n\nCase in point :\n\nif ( statement ) {\n   command\n}\n\n<ul>\n<li>preferred way<\/li>\n<\/ul>\n\n\n\nif ( statement )\n{\n   command\n}\n\n<ul>\n<li>personal preference<\/li>\n<\/ul>\n\n\n\nHowever, we all know that these make no difference logically, yet still programmers will swear by one and that until death it seems.\n\nI say, use it to your own advantage : talk about it, make people aware about it, spread the truth. In the end, people will understand that it's just a matter of preference.","contentFiltered":"<p>You know Morgan, this is just another case of &#8220;coding wars&#8221;, much like the semi-colon wars in computer programming that has been going on for years.<\/p>\n<p>Case in point :<\/p>\n<p>if ( statement ) {<br \/>\n   command<br \/>\n}<\/p>\n<ul>\n<li>preferred way<\/li>\n<\/ul>\n<p>if ( statement )<br \/>\n{<br \/>\n   command<br \/>\n}<\/p>\n<ul>\n<li>personal preference<\/li>\n<\/ul>\n<p>However, we all know that these make no difference logically, yet still programmers will swear by one and that until death it seems.<\/p>\n<p>I say, use it to your own advantage : talk about it, make people aware about it, spread the truth. In the end, people will understand that it&#8217;s just a matter of preference.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-28233","unixtime":1445691284,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-28233","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1445691284,"hasChildren":false,"userLogin":"georgesjeandenis","userNicename":"georgesjeandenis"},{"type":"comment","id":"28234","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-georgesjeandenis odd alt depth-3","parentID":"28233","contentRaw":"An interesting article on code wars :\n\nhttps:\/\/news.ycombinator.com\/item?id=3842713","contentFiltered":"<p>An interesting article on code wars :<\/p>\n<p><a href=\"https:\/\/news.ycombinator.com\/item?id=3842713\" rel=\"nofollow\">https:\/\/news.ycombinator.com\/item?id=3842713<\/a><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-28234","unixtime":1445695636,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-28234","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":3,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1445695636,"hasChildren":false,"userLogin":"georgesjeandenis","userNicename":"georgesjeandenis"},{"type":"comment","id":"28235","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-georgesjeandenis even depth-2","parentID":"11499","contentRaw":"Other exemples of what I'm refering to :\n\nhttps:\/\/plus.google.com\/110900846702990438913\/posts\/Np8Rw3ZRdwo","contentFiltered":"<p>Other exemples of what I&#8217;m refering to :<\/p>\n<p><a href=\"https:\/\/plus.google.com\/110900846702990438913\/posts\/Np8Rw3ZRdwo\" rel=\"nofollow\">https:\/\/plus.google.com\/110900846702990438913\/posts\/Np8Rw3ZRdwo<\/a><\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-28235","unixtime":1445700765,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-28235","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1445700765,"hasChildren":false,"userLogin":"georgesjeandenis","userNicename":"georgesjeandenis"},{"type":"comment","id":"28717","postID":"5078","postTitleRaw":"JavaScript Coding Standards","cssClasses":"comment byuser comment-author-morganestes odd alt depth-2","parentID":"27713","contentRaw":"For all new code, strings should be contained in single quotes.\n\nThere may be some existing code that doesn't yet follow this guideline, but all new and updated JS should.","contentFiltered":"<p>For all new code, strings should be contained in single quotes.<\/p>\n<p>There may be some existing code that doesn&#8217;t yet follow this guideline, but all new and updated JS should.<\/p>\n","permalink":"https:\/\/make.wordpress.org\/core\/handbook\/best-practices\/coding-standards\/javascript\/#comment-28717","unixtime":1450935980,"loginRedirectURL":"https:\/\/login.wordpress.org\/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2Fhandbook%2Fbest-practices%2Fcoding-standards%2Fjavascript%2F%23comment-28717","approved":true,"isTrashed":false,"prevDeleted":"","editURL":null,"depth":2,"commentDropdownActions":"","commentFooterActions":"","commentTrashedActions":"<nav class='o2-comment-actions o2-dropdown-actions o2-comment-dropdown-actions'><button class='o2-dropdown-actions-disclosure genericon genericon-ellipsis'><\/button><ul><li><a class='o2-comment-untrash genericon genericon-refresh' href='#' >Untrash<\/a><\/li><\/ul><\/nav>","mentions":[],"mentionContext":"","commentCreated":1450935980,"hasChildren":false,"userLogin":"morganestes","userNicename":"morganestes"}],"postFormat":"standard","postMeta":{"isSticky":false},"postTerms":[],"pluginData":[],"isPage":true,"mentions":[],"mentionContext":"","isTrashed":false,"userLogin":"kpdesign","userNicename":"kpdesign"}]</script> 
      <nav class="handbook-navigation" role="navigation"> 
       <h1 class="screen-reader-text">Handbook navigation</h1> 
       <div class="nav-links"> 
        <a href="https://make.wordpress.org/core/handbook/best-practices/coding-standards/html/" rel="previous"><span class="meta-nav">?</span> HTML Coding Standards</a>
        <a href="https://make.wordpress.org/core/handbook/best-practices/inline-documentation-standards/" rel="next">Inline Documentation Standards <span class="meta-nav">?</span></a> 
       </div> 
       <!-- .nav-links --> 
      </nav>
      <!-- .navigation --> 
     </div> 
     <!-- .site-content --> 
    </div> 
    <!-- #primary --> 
   </div>
   <!-- #main --> 
  </div>
  <!-- #page --> 
  <div id="wporg-footer"> 
   <div class="wrapper"> 
    <ul> 
     <li><a href="//wordpress.org/about/" title="An introduction to the WordPress project">About</a></li> 
     <li><a href="//wordpress.org/news/" title="News and Updates">Blog</a></li> 
     <li><a href="//wordpress.org/hosting/" title="Recommended web hosting providers">Hosting</a></li> 
     <li><a href="//jobs.wordpress.net/" title="Find or post WordPress jobs">Jobs</a></li> 
    </ul> 
    <ul> 
     <li><a href="//wordpress.org/support/" title="Forums, documentation, and other resources">Support</a></li> 
     <li><a href="//developer.wordpress.org" title="Resources for WordPress developers">Developers</a></li> 
     <li><a href="//make.wordpress.org/" title="Give back to WordPress through code, support, translation and more">Get Involved</a></li> 
     <li><a href="//learn.wordpress.org/" title="Workshops and training materials">Learn</a></li> 
    </ul> 
    <ul> 
     <li><a href="//wordpress.org/showcase/" title="Some of the best WordPress sites on the Web">Showcase</a></li> 
     <li><a href="//wordpress.org/plugins/" title="Add extra functionality to WordPress">Plugins</a></li> 
     <li><a href="//wordpress.org/themes/" title="Make your WordPress pretty">Themes</a></li> 
     <li><a href="//wordpress.org/ideas/" title="Share your ideas for improving WordPress">Ideas</a></li> 
    </ul> 
    <ul> 
     <li><a href="//central.wordcamp.org/" title="Find a WordPress event near you">WordCamp</a></li> 
     <li><a href="//wordpress.tv/" title="Videos, tutorials, and WordCamp sessions">WordPress.TV</a></li> 
     <li><a href="//buddypress.org/" title="A set of plugins to transform your WordPress into a social network">BuddyPress</a></li> 
     <li><a href="//bbpress.org/" title="Fast, slick forums built on WordPress">bbPress</a></li> 
    </ul> 
    <ul> 
     <li><a href="//wordpress.com/?ref=wporg-footer" title="Hassle-free WordPress hosting">WordPress.com</a></li> 
     <li><a href="//ma.tt/" title="Co-founder of WordPress, an example of what WordPress can do">Matt</a></li> 
     <li><a href="//wordpress.org/about/privacy/" title="WordPress.org Privacy Policy">Privacy</a></li> 
     <li><a href="//wordpress.org/about/license/" title="WordPress is open source software">License / GPLv2</a></li> 
    </ul> 
    <ul> 
     <li> <iframe title="Follow @WordPress on Twitter" allowtransparency="true" frameborder="0" scrolling="no" src="//platform.twitter.com/widgets/follow_button.html?screen_name=WordPress&amp;show_count=false" style="width:135px; height:20px;"></iframe> </li> 
     <li> <iframe title="Like WordPress on Facebook" src="//www.facebook.com/plugins/like.php?app_id=121415197926116&amp;href=http%3A%2F%2Fwww.facebook.com%2Fwordpress&amp;send=false&amp;layout=button_count&amp;width=135&amp;show_faces=false&amp;action=like&amp;colorscheme=light&amp;font=lucida+grande&amp;height=21" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:135px; height:21px;" allowtransparency="true"></iframe> </li> 
     <li> <script src="https://apis.google.com/js/platform.js" async defer></script> 
      <div class="g-plusone" data-size="medium" data-href="https://plus.google.com/+WordPress"></div> </li> 
    </ul> 
   </div> 
   <h6 class="aligncenter cip-image">Code is Poetry.</h6> 
  </div> 
  <script type="text/javascript">
  var _qevents = _qevents || [];
  (function() {
   var elem = document.createElement('script');
   elem.src = (document.location.protocol == "https:" ? "https://secure" : "http://edge")
               + ".quantserve.com/quant.js";
   elem.async = true;
   elem.type = "text/javascript";
   var scpt = document.getElementsByTagName('script')[0];
   scpt.parentNode.insertBefore(elem, scpt);
  })();
</script> 
  <script type="text/javascript">_qevents.push( { qacct:"p-18-mFEk4J448M"} );</script> 
  <noscript>
   <img src="//pixel.quantserve.com/pixel/p-18-mFEk4J448M.gif" style="display: none;" border="0" height="1" width="1" alt="">
  </noscript> 
  <!-- 16 queries. 0.516 seconds --> 
  <script type="text/javascript">
(function($){
$(document).ready(function() {
	$('#footer a').click(function() {
		if (this.href.indexOf('wordpress.org') == -1 && this.href.indexOf('http') == 0) {
			recordOutboundLink(this, 'Outbound Links', this.href);
			return false;
		}
	});
});
})(jQuery);
</script> 
  <script type="text/javascript">
			// <![CDATA[
			var xpostData = [];
						// ]]>
		</script>
  <script class="o2-post-action-states-dict" type="application/json" style="display:none">{"reply":{"default":{"shortText":"Reply","title":"Reply","classes":[],"genericon":"genericon-reply"}},"login-to-reply":{"default":{"shortText":"Login to Reply","title":"Login to Reply","classes":[],"genericon":"genericon-reply"}},"scrolltocomments":{"default":{"shortText":"Scroll","title":"Scroll to comments","classes":[],"genericon":"genericon-downarrow"}},"edit":{"default":{"shortText":"Edit","title":"Edit","classes":[],"genericon":"genericon-edit"}},"trash":{"default":{"shortText":"Trash","title":"Trash","classes":[],"genericon":"genericon-trash"}},"shortlink":{"default":{"shortText":"Shortlink","title":"Shortlink","classes":[],"genericon":"genericon-link"}},"stickyposts":{"normal":{"shortText":"Stick post to home","title":"Stick post to home","classes":[],"genericon":"genericon-pinned","nextState":"sticky"},"sticky":{"shortText":"Unstick post from home","title":"Unstick post from home","classes":["sticky"],"genericon":"genericon-pinned","nextState":"normal"}}}</script> 
  <script class="o2-live-widget-bootstrap-data" type="application/json" style="display:none">[{"unixtime":1506964832,"title":"New Contributors Meeting Recap \u2013 August 30th","domRef":"#comment-33091","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/01\/new-contributors-meeting-recap-august-30th\/#comment-33091","type":"comment","externalID":"33091","postID":"23313","userLogin":"gmgartner","userNicename":"gmgartner"},{"unixtime":1506810000,"title":"4.9 and Gutenberg","domRef":"#comment-33090","permalink":"https:\/\/make.wordpress.org\/core\/2017\/06\/16\/4-9-and-gutenberg\/#comment-33090","type":"comment","externalID":"33090","postID":"22481","userLogin":"pingram3541","userNicename":"pingram3541"},{"unixtime":1506770636,"title":"What\u2019s new in Gutenberg 27th September","domRef":"#comment-33089","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/27\/whats-new-in-gutenberg-1-2-1\/#comment-33089","type":"comment","externalID":"33089","postID":"23496","userLogin":"webmaster4business","userNicename":"webmaster4business"},{"unixtime":1506755404,"title":"4.9 and Gutenberg","domRef":"#comment-33088","permalink":"https:\/\/make.wordpress.org\/core\/2017\/06\/16\/4-9-and-gutenberg\/#comment-33088","type":"comment","externalID":"33088","postID":"22481","userLogin":"aurovrata","userNicename":"aurovrata"},{"unixtime":1506621093,"title":"What\u2019s new in Gutenberg 27th September","domRef":"#comment-33087","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/27\/whats-new-in-gutenberg-1-2-1\/#comment-33087","type":"comment","externalID":"33087","postID":"23496","userLogin":"reggieyancey","userNicename":"reggieyancey"},{"unixtime":1506620458,"title":"What\u2019s new in Gutenberg 27th September","domRef":"#comment-33086","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/27\/whats-new-in-gutenberg-1-2-1\/#comment-33086","type":"comment","externalID":"33086","postID":"23496","userLogin":"karmatosed","userNicename":"karmatosed"},{"unixtime":1506619974,"title":"What\u2019s new in Gutenberg 27th September","domRef":"#comment-33085","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/27\/whats-new-in-gutenberg-1-2-1\/#comment-33085","type":"comment","externalID":"33085","postID":"23496","userLogin":"karmatosed","userNicename":"karmatosed"},{"unixtime":1506618501,"title":"What\u2019s new in Gutenberg 27th September","domRef":"#comment-33084","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/27\/whats-new-in-gutenberg-1-2-1\/#comment-33084","type":"comment","externalID":"33084","postID":"23496","userLogin":"reggieyancey","userNicename":"reggieyancey"},{"unixtime":1506604741,"title":"What\u2019s new in Gutenberg 27th September","domRef":"#comment-33083","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/27\/whats-new-in-gutenberg-1-2-1\/#comment-33083","type":"comment","externalID":"33083","postID":"23496","userLogin":"gugaalves","userNicename":"gugaalves"},{"unixtime":1506591533,"title":"WordPress 4.9 Goals","domRef":"#comment-33082","permalink":"https:\/\/make.wordpress.org\/core\/2017\/08\/11\/wordpress-4-9-goals\/#comment-33082","type":"comment","externalID":"33082","postID":"23056","userLogin":"homeworker","userNicename":"homeworker"},{"unixtime":1506892756,"title":"Multisite Recap for the week of September 25th","domRef":"#post-23605","permalink":"https:\/\/make.wordpress.org\/core\/2017\/10\/01\/multisite-recap-for-the-week-of-september-25th\/","type":"post","externalID":23605,"userLogin":"flixos90","userNicename":"flixos90"},{"unixtime":1506570326,"title":"Dev Chat Summary: September 27th (4.9 week 9)","domRef":"#post-23546","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/28\/dev-chat-summary-september-27th-4-9-week-9\/","type":"post","externalID":23546,"userLogin":"jbpaul17","userNicename":"jbpaul17"},{"unixtime":1506527528,"title":"What's new in Gutenberg 27th September","domRef":"#post-23496","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/27\/whats-new-in-gutenberg-1-2-1\/","type":"post","externalID":23496,"userLogin":"karmatosed","userNicename":"karmatosed"},{"unixtime":1506519938,"title":"JavaScript chat summary for Sept. 26th","domRef":"#post-23499","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/27\/javascript-chat-summary-for-sept-26th\/","type":"post","externalID":23499,"userLogin":"adamsilverstein","userNicename":"adamsilverstein"},{"unixtime":1506475511,"title":"Dev Chat Agenda for September 27th (4.9 week 9)","domRef":"#post-23483","permalink":"https:\/\/make.wordpress.org\/core\/2017\/09\/27\/dev-chat-agenda-for-september-27th-4-9-week-9\/","type":"post","externalID":23483,"userLogin":"jbpaul17","userNicename":"jbpaul17"}]</script> 
  <script type="text/javascript">
			o2.Offline.init();
		</script> 
  <div id="help"> 
   <dl class="directions"> 
    <dt>
     s
    </dt>
    <dd>
     search
    </dd> 
    <dt>
     c
    </dt>
    <dd>
     compose new post
    </dd> 
    <dt>
     r
    </dt> 
    <dd>
     reply
    </dd> 
    <dt>
     e
    </dt> 
    <dd>
     edit
    </dd> 
    <dt>
     t
    </dt> 
    <dd>
     go to top
    </dd> 
    <dt>
     j
    </dt> 
    <dd>
     go to the next post or comment
    </dd> 
    <dt>
     k
    </dt> 
    <dd>
     go to the previous post or comment
    </dd> 
    <dt>
     o
    </dt> 
    <dd>
     toggle comment visibility
    </dd> 
    <dt>
     esc
    </dt> 
    <dd>
     cancel edit post or comment
    </dd> 
   </dl> 
  </div> 
  <script type="html/template" id="tmpl-o2-app-header">
				<# if ( !data.isSingle && !data.isPage && !data.is404 && !( data.isSearch && !data.havePosts ) ) { #>
	<h2 class="o2-app-page-title">
		<# if ( data.showTitle && data.pageTitle != '' ) { #>
			{{{ data.pageTitle }}}
		<# } #>
	</h2>
	<span class="o2-app-controls">
		{{{ data.appControls.join( ' | ' ) }}}
	</span>
<# } else { #>
	<# if ( data.showTitle && data.pageTitle != '' ) { #>
		<h2 class="o2-app-page-title">
			{{{ data.pageTitle }}}
		</h2>
	<# } #>
<# } #>
</script> 
  <script type="html/template" id="tmpl-o2-app-footer">
				</script> 
  <script type="html/template" id="tmpl-o2-post-view">
				<div class="o2-post"></div>
<div class="o2-post-comments"></div>
<div class="o2-post-comment-controls"></div>

<# if ( data.showNavigation ) { #>
	<div class="navigation">
		<# if ( data.hasPrevPost ) { #>
			<p class="nav-older">
				<a href="{{ data.prevPostURL }}" title="{{ data.prevPostTitle }}" >&larr; {{{ data.prevPostTitle }}}</a>
			</p>
		<# } #>
		<# if ( data.hasNextPost ) { #>
			<p class="nav-newer">
				<a href="{{ data.nextPostURL }}" title="{{ data.nextPostTitle }}" >{{{ data.nextPostTitle }}} &rarr;</a>
			</p>
		<# } #>
	</div>
<# } #>
</script> 
  <script type="html/template" id="tmpl-o2-no-posts-post-view">
				<div class="o2-post">
	<p>{{ data.text }}</p>
</div>
</script> 
  <script type="html/template" id="tmpl-o2-post">
				<header class="entry-header">
	<div class="entry-meta">
	<# if ( ! data.isPage && o2.options.showAvatars && data.author.avatar ) { #>
		<a href="{{ data.author.url }}" title="{{ data.author.urlTitle }}" class="author-avatar {{ data.author.modelClass }}">
			<img src="{{ data.author.avatar }}" width="{{ data.author.avatarSize }}" height="{{ data.author.avatarSize }}" class="avatar {{ data.author.modelClass }}" />
		</a>
	<# } #>
	<# if ( ! data.isPage ) { #>
		<a href="{{ data.author.url }}" title="{{ data.author.urlTitle }}" class="entry-author {{ data.author.modelClass }}">
			{{ data.author.displayName }}
		</a>
		<a href="{{ data.permalink }}" class="entry-date o2-timestamp" data-unixtime="{{ data.unixtime }}" data-compact-allowed="true"></a>
	<# } #>
		<# if ( ! data.isSaving ) { #>
			{{{ data.postActions }}}
		<# } #>
		{{{ data.entryHeaderMeta }}}
	</div>
	<# if ( data.showTitle && ! data.titleWasGeneratedFromContent ) { #>
		<h1 class="entry-title">
			<# if ( data.linkTitle ) { #>
				<a href="{{ data.permalink }}">{{{ data.titleFiltered }}}</a>
			<# } else { #>
				{{{ data.titleFiltered }}}
			<# } #>
		</h1>
	<# } #>
</header>
<div class="entry-content">
	{{{ data.contentFiltered }}}
	{{{ data.linkPages }}}
</div>
<footer class="entry-meta">
	{{{ data.footerEntryMeta }}}
	<# if ( data.postID ) { #>
		<div class="o2-display-comments-toggle">
			<a href="#">
				<span class="genericon genericon-expand"></span>
				<span class="disclosure-text">{{ data.strings.showComments }}</span>
			</a>
		</div>
	<# } else { #>
		<div class="o2-save-spinner"></div>
	<# } #>
</footer>
</script> 
  <script type="html/template" id="tmpl-o2-post-edit">
				<header class="entry-header">
	<div class="entry-meta">
<# if ( ! data.isPage && o2.options.showAvatars && data.author.avatar ) { #>
	<a href="{{ data.author.url }}" title="{{ data.author.urlTitle }}" class="author-avatar">
		<img src="{{ data.author.avatar }}" width="{{ data.avatarSize }}" height="{{ data.avatarSize }}" class="avatar" />
	</a>
<# } #>
<# if ( ! data.isPage ) { #>
		<a href="{{ data.author.url }}" title="{{ data.author.urlTitle }}" class="entry-author">
			{{ data.author.displayName }}
		</a>
		<a href="{{ data.permalink }}" class="entry-date o2-timestamp" data-unixtime="{{ data.unixtime }}">
		</a>
<# } #>
		{{{ data.postActions }}}
		{{{ data.entryHeaderMeta }}}
	</div>
</header>
<div class="entry-content">
	<div class="o2-editor">
		<textarea title="{{ data.titleRaw }}" placeholder="" class="o2-editor">{{ data.contentRaw }}</textarea>
		<div class="o2-editor-footer">
			<ul class="o2-editor-tabs">
				<li class="selected"><a href="#" class="o2-editor-edit-button genericon-edit">{{ data.strings.edit }}</a></li>
				<li><a href="#" class="o2-editor-preview-button genericon-show">{{ data.strings.preview }}</a></li>
			</ul>

			<a href="#" class="o2-save primary" title="&#8984;-enter">{{ data.strings.save }}</a>
			<a href="#" class="o2-cancel">{{ data.strings.cancel }}</a>
		</div>
	</div>
</div>

<footer class="entry-meta">
	{{{ data.footerEntryMeta }}}
</footer>
</script> 
  <script type="html/template" id="tmpl-o2-front-side-new-post-edit">
				<div class="entry-content">
	<div class="o2-editor">
		{{{ data.postFormBefore }}}
		<textarea title="" placeholder="{{ data.postPrompt }}" class="o2-editor">{{ data.contentRaw }}</textarea>
		<div class="o2-editor-footer">
			<ul class="o2-editor-tabs">
				<li class="selected"><a href="#" class="o2-editor-edit-button genericon-edit">{{ data.strings.edit }}</a></li>
				<li><a href="#" class="o2-editor-preview-button genericon-show">{{ data.strings.preview }}</a></li>
			</ul>

			<a href="#" class="o2-save primary" title="&#8984;-enter">{{ data.strings.post }}</a>

			<div class="o2-post-form-options">
				{{{ data.postFormExtras }}}
			</div>
		</div>
	</div>
</div>
</script> 
  <script type="html/template" id="tmpl-o2-comment">
				<header class="o2-comment-header comment">
	<# if ( ! data.isSaving ) { #>
		<# if ( data.isTrashed && data.trashedSession ) { #>
			{{{ data.commentTrashedActions }}}
		<# } else { #>
			{{{ data.commentDropdownActions }}}
		<# } #>
	<# } #>

	<# if ( o2.options.showAvatars && data.author.avatar ) { #>
	<img src="{{ data.author.avatar }}" width="{{ data.avatarSize }}" height="{{ data.avatarSize }}" class="avatar {{ data.author.modelClass }}" />
	<# } #>
	<div class="comment-meta commentmetadata o2-comment-metadata" data-o2-comment-id="{{ data.id }}">
		<# if ( data.isAnonymousAuthor ) { #>
			<span class="comment-author">{{ data.strings.anonymous }}</span>
		<# } else { #>
			<a href="{{ data.author.url }}" rel="external nofollow" class="comment-author url {{ data.author.modelClass }}">
				{{ data.author.displayName }}
			</a>
		<# } #>
		<a href="{{ data.permalink }}" class="comment-date o2-timestamp" data-unixtime="{{ data.unixtime }}" data-compact-allowed="true"></a>
		<# if ( ! ( data.isNew || data.isSaving ) ) { #>
			<span class="comment-actions o2-actions">
				<# if ( data.currentUser.userLogin.length ) { #>
					<# if ( data.commentingAllowed ) { #>
						<a href="#" class="o2-comment-reply" title="{{ data.strings.reply }}">{{ data.strings.reply }}</a>
					<# } #>
					<# if ( data.editingAllowed ) { #>
						<a href="{{{ data.editURL }}}" class="o2-comment-edit" title="{{ data.strings.edit }}">{{ data.strings.edit }}</a>
					<# } #>
				<# } else { #>
					<# if ( data.commentingAllowed ) { #>
						<# if ( data.userMustBeLoggedInToComment ) { #>
							<a href="{{ data.loginRedirectURL }}" class="o2-reply-not-logged-in" title="{{ data.strings.loginToComment }}">{{ data.strings.loginToComment }}</a>
						<# } else { #>
							<a href="#" class="o2-comment-reply" title="{{ data.strings.reply }}">{{ data.strings.reply }}</a>
						<# } #>
					<# } #>
				<# } #>
			</span>
		<# } #>
	</div>
</header>
<div class="comment-content">
	<# if ( data.isTrashed ) { #>
		<p class="o2-comment-awaiting-approval">
			{{ data.strings.isTrashed }}
		</p>
	<# } else if ( ! data.approved ) { #>
		<p class="o2-comment-awaiting-approval">
			{{ data.strings.awaitingApproval }}
		</p>
	<# } else if ( data.prevDeleted ) { #>
		<p class="o2-comment-awaiting-approval">
			{{ data.strings.prevDeleted }}
		</p>
	<# } else { #>
		{{{ data.contentFiltered }}}
		{{{ data.commentFooterActions }}}
	<# } #>
</div>

<# if ( data.isNew || ( data.isSaving && ! data.isTrashedAction ) ) { #>
	<div class="o2-save-spinner"></div>
<# } #>
</script> 
  <script type="html/template" id="tmpl-o2-comment-edit">
				<header class="o2-comment-header comment">
	<# if ( o2.options.showAvatars && data.author.avatar ) { #>
	<img src="{{ data.author.avatar }}" width="{{ data.avatarSize }}" height="{{ data.avatarSize }}" class="avatar {{ data.author.modelClass }}" />
	<# } #>
	<div class="comment-meta commentmetadata">
		<# if ( data.isAnonymousAuthor ) { #>
			<span class="comment-author">{{ data.strings.anonymous }}</span>
		<# } else { #>
			<a href="{{ data.author.url }}" rel="external nofollow" class="comment-author url">
				{{ data.author.displayName }}
			</a>
		<# } #>
		<a href="{{ data.permalink }}" class="comment-date o2-timestamp" data-unixtime="{{ data.unixtime }}"></a>
		<# if ( data.someoneElsesComment ) { #>
		<span class="o2-editing-others">{{ data.strings.editingOthersComment }}</span>
		<# } #>
	</div>
</header>
<div class="o2-editor">
	{{{ data.commentFormBefore }}}
	<textarea class="o2-editor">{{ data.contentRaw }}</textarea>
	<div class="o2-editor-footer">
		<ul class="o2-editor-tabs">
			<li class="selected"><a href="#" class="o2-editor-edit-button genericon-edit">{{ data.strings.edit }}</a></li>
			<li><a href="#" class="o2-editor-preview-button genericon-show">{{ data.strings.preview }}</a></li>
		</ul>

		<# if ( data.isNew ) { #>
			<a href="#" class="o2-comment-save primary" title="&#8984;-enter">{{ data.strings.reply }}</a>
			<a href="#" class="o2-new-comment-cancel">{{ data.strings.cancel }}</a>
		<# } else { #>
			<a href="#" class="o2-comment-save primary" title="&#8984;-enter">{{ data.strings.save }}</a>
			<a href="#" class="o2-comment-cancel">{{ data.strings.cancel }}</a>
		<# } #>

		<# if ( data.isNew ) { #>
			<div class="o2-comment-form-options">
				{{{ data.commentFormExtras }}}
				<div class="o2-comment-form-options-extra"></div>
			</div>
		<# } #>
	</div>
</div>
</script> 
  <script type="html/template" id="tmpl-o2-logged-out-create-comment">
				<header class="o2-comment-header comment">
	<# if ( o2.options.showAvatars && data.author.avatar ) { #>
	<img src="{{ data.author.avatar }}&amp;s={{ data.avatarSize }}" width="{{ data.avatarSize }}" height="{{ data.avatarSize }}" class="avatar" />
	<# } #>
</header>
<div class="o2-editor o2-logged-out-editor">
	<textarea class="o2-editor">{{ data.contentRaw }}</textarea>
	<div class="o2-editor-signin">
		<p>{{ data.strings.fillDetailsBelow }}</p>
		<input type="text" class="o2-comment-email" placeholder="{{ data.strings.commentEmail }}" name="o2-comment-email" value="{{ data.currentUser.noprivUserEmail }}" />
		<input type="text" class="o2-comment-name" placeholder="{{ data.strings.commentName }}" name="o2-comment-name" value="{{ data.currentUser.noprivUserName }}" />
		<input type="text" class="o2-comment-url" placeholder="{{ data.strings.commentURL }}" name="o2-comment-url" value="{{ data.currentUser.noprivUserURL }}" />
	</div>
	<div class="o2-editor-footer">
		<a href="#" class="o2-comment-save primary" title="&#8984;-enter">{{ data.strings.post }}</a>
		<# if ( data.isNew ) { #>
			<a href="#" class="o2-new-comment-cancel">{{ data.strings.cancel }}</a>
		<# } else { #>
			<a href="#" class="o2-comment-cancel">{{ data.strings.cancel }}</a>
		<# } #>
	</div>
</div>
</script> 
  <script type="html/template" id="tmpl-o2-xpost">
				<# if ( o2.options.showAvatars && data.author.avatar ) { #>
<a href="{{ data.author.url }}" title="{{ data.author.urlTitle }}" class="author-avatar o2-xpost-avatar">
	<img src="{{ data.author.avatar }}" width="{{ data.author.avatarSize }}" height="{{ data.author.avatarSize }}" class="avatar {{ data.author.modelClass }}" />
</a>
<# } #>
<h4 class="o2-xpost-author">
	<a href="{{ data.author.url }}" title="{{ data.author.urlTitle }}" class="entry-author {{ data.author.modelClass }}">
		{{ data.author.displayName }}
	</a>
	<a href="{{ data.permalink }}" class="entry-date o2-xpost-entry-date o2-timestamp" data-unixtime="{{ data.unixtime }}">
	</a>
</h4>
<div class="post-content o2-xpost-content">
	{{{ data.contentFiltered }}}
</div>
</script> 
  <script type="html/template" id="tmpl-o2-search-form">
				<div class="o2-post">
	<p>{{{ data.invitation }}}</p>
	<form method="get" id="searchform" action="{{ o2.options.searchURL }}">
		<div>
			<input type="text" size="18" value="{{{ data.lastQuery }}}" name="s" id="s" />
			<input type="submit" id="searchsubmit" value="{{ data.strings.search }}" class="btn" />
		</div>
	</form>
</div>
</script> 
  <script type="html/template" id="tmpl-o2-notification">

		<# if ( '' !== data.iconUrl ) { #>
			<img src="{{ data.iconUrl }}&amp;s={{ data.iconSize }}" width="{{ data.iconSize }}" height="{{ data.iconSize }}" class="avatar {{data.iconClass}}" />
		<# } #>

		<# if ( data.dismissable ) { #>
			<span class="o2-notification-close"><a href="#" class="o2-notification-close">&#xf405;</a></span>
		<# } #>

		<p>
		<# if ( data.url ) { #>
			<a href="#" class="o2-notification-link {{data.textClass}}">{{{ data.text }}}</a>
		<# } else { #>
			{{{ data.text }}}
		<# } #>
		<# if ( 'notice' === data.type ) { #>
			<br />
			<span class="entry-date o2-timestamp" data-compact-allowed="true" data-unixtime="{{ data.unixtime }}">
		<# } #>
		</p>

		<div class="clear"></div>

		</script> 
  <script type="html/template" id="tmpl-o2-live-untitled-post-title-template">
				Post by {{ data.author.displayName }}			</script> 
  <script type="html/template" id="tmpl-o2-live-comment-title-template">
				Comment on {{ data.title }}			</script> 
  <script type="html/template" id="tmpl-o2-live-untitled-comment-title-template">
				Comment by {{ data.author.displayName }}			</script> 
  <script type="html/template" id="tmpl-o2-live-item-template">
				<# if ( o2.options.showAvatars && data.author.avatar ) { #>
				<img src="{{ data.author.avatar }}" width="{{ data.author.avatarSize }}" height="{{ data.author.avatarSize }}" class="avatar o2-live-item-img {{ data.author.modelClass }}" />
				<# } #>
				<p class="o2-live-item-text"><a href="{{ data.permalink }}" data-domref="{{ data.domRef }}"
					<# if ( 'comment' === data.type ) { #>
						data-postid="{{ data.postID }}"
					<# } #>
					>{{{ data.title }}}</a>
					<br/>
					<span class="entry-date o2-timestamp" data-unixtime="{{ data.unixtime }}" data-domref="{{ data.domRef }}"
						<# if ( 'comment' === data.type ) { #>
							data-postid="{{ data.postID }}"
						<# } #>
					>
					</span>
				</p>
				<div class="o2-live-item-clear">
				</div>
			</script> 
  <script class="o2-user-data" type="application/json" style="display:none">{"PeterRKnight":{"id":6412338,"type":"user","userLogin":"PeterRKnight","userNicename":"peterrknight","displayName":"PeterRKnight","firstName":"","lastName":"","url":"https:\/\/profiles.wordpress.org\/peterrknight","urlTitle":"Posts by PeterRKnight (@peterrknight)","hash":"fca4851e3b2969dff7cca7dc2036bc7d","modelClass":""},"nacin":{"id":5286302,"type":"user","userLogin":"nacin","userNicename":"nacin","displayName":"Andrew Nacin","firstName":"Andrew","lastName":"Nacin","url":"https:\/\/profiles.wordpress.org\/nacin","urlTitle":"Posts by Andrew Nacin (@nacin)","hash":"01cfe9feaafb068590891bbd1f6a7f5a","modelClass":""},"pauldewouters":{"id":3252437,"type":"user","userLogin":"pauldewouters","userNicename":"pauldewouters","displayName":"Paul de Wouters","firstName":"Paul","lastName":"de Wouters","url":"https:\/\/profiles.wordpress.org\/pauldewouters","urlTitle":"Posts by Paul de Wouters (@pauldewouters)","hash":"dcb7cc657c19726b709098172efa1b6d","modelClass":""},"beaulebens":{"id":190677,"type":"user","userLogin":"beaulebens","userNicename":"beaulebens","displayName":"Beau Lebens","firstName":"Beau","lastName":"Lebens","url":"https:\/\/profiles.wordpress.org\/beaulebens","urlTitle":"Posts by Beau Lebens (@beaulebens)","hash":"205e460b479e2e5b48aec07710c08d50","modelClass":""},"tommcfarlin":{"id":7342218,"type":"user","userLogin":"tommcfarlin","userNicename":"tommcfarlin","displayName":"tommcfarlin","firstName":"tommcfarlin","lastName":"","url":"https:\/\/profiles.wordpress.org\/tommcfarlin","urlTitle":"Posts by tommcfarlin (@tommcfarlin)","hash":"1f0b00b8853cf0311888bb3ed2a77ebc","modelClass":""},"rwdrwd":{"id":12966328,"type":"user","userLogin":"rwdrwd","userNicename":"rwdrwd","displayName":"rwdrwd","firstName":"","lastName":"","url":"https:\/\/profiles.wordpress.org\/rwdrwd","urlTitle":"Posts by rwdrwd (@rwdrwd)","hash":"7c5d00f28d8006fe03d4dac08762e529","modelClass":""},"iandunn":{"id":33690,"type":"user","userLogin":"iandunn","userNicename":"iandunn","displayName":"Ian Dunn","firstName":"Ian","lastName":"Dunn","url":"https:\/\/profiles.wordpress.org\/iandunn","urlTitle":"Posts by Ian Dunn (@iandunn)","hash":"d0e2ea89fb62350b1304c62eeeaf24b6","modelClass":""},"pdclark":{"id":3031237,"type":"user","userLogin":"pdclark","userNicename":"pdclark","displayName":"PD Clark","firstName":"PD","lastName":"Clark","url":"https:\/\/profiles.wordpress.org\/pdclark","urlTitle":"Posts by PD Clark (@pdclark)","hash":"e9366ca29eff9e1307110f66de047031","modelClass":""},"kadamwhite":{"id":5896197,"type":"user","userLogin":"kadamwhite","userNicename":"kadamwhite","displayName":"K. Adam White","firstName":"K.","lastName":"Adam White","url":"https:\/\/profiles.wordpress.org\/kadamwhite","urlTitle":"Posts by K. Adam White (@kadamwhite)","hash":"6cd1cf6de05952505a165425efaf06b4","modelClass":""},"morganestes":{"id":5956135,"type":"user","userLogin":"morganestes","userNicename":"morganestes","displayName":"Morgan Estes","firstName":"Morgan","lastName":"Estes","url":"https:\/\/profiles.wordpress.org\/morganestes","urlTitle":"Posts by Morgan Estes (@morganestes)","hash":"bf93a52d29dd4a57b6649d9e9f8ec0d9","modelClass":""},"bassgang":{"id":13406587,"type":"user","userLogin":"bassgang","userNicename":"bassgang","displayName":"Paul Vincent Beigang","firstName":"Paul","lastName":"Vincent Beigang","url":"https:\/\/profiles.wordpress.org\/bassgang","urlTitle":"Posts by Paul Vincent Beigang (@bassgang)","hash":"afc33517dbbad1636fd332681794ffb1","modelClass":""},"lukecarbis":{"id":8358726,"type":"user","userLogin":"lukecarbis","userNicename":"lukecarbis","displayName":"Luke Carbis","firstName":"Luke","lastName":"Carbis","url":"https:\/\/profiles.wordpress.org\/lukecarbis","urlTitle":"Posts by Luke Carbis (@lukecarbis)","hash":"dd1f7e6ebd0429796f4fdc6aefd6049d","modelClass":""},"georgesjeandenis":{"id":13897998,"type":"user","userLogin":"georgesjeandenis","userNicename":"georgesjeandenis","displayName":"georgesjeandenis","firstName":"","lastName":"","url":"https:\/\/profiles.wordpress.org\/georgesjeandenis","urlTitle":"Posts by georgesjeandenis (@georgesjeandenis)","hash":"118e617222122cd68deb08aeb9429b38","modelClass":""},"aubreypwd":{"id":9395121,"type":"user","userLogin":"aubreypwd","userNicename":"aubreypwd","displayName":"Aubrey Portwood","firstName":"Aubrey","lastName":"Portwood","url":"https:\/\/profiles.wordpress.org\/aubreypwd","urlTitle":"Posts by Aubrey Portwood (@aubreypwd)","hash":"09601923fd59a7433892711376c37e41","modelClass":""},"johnzanussi":{"id":5903398,"type":"user","userLogin":"johnzanussi","userNicename":"johnzanussi","displayName":"John Zanussi","firstName":"John","lastName":"Zanussi","url":"https:\/\/profiles.wordpress.org\/johnzanussi","urlTitle":"Posts by John Zanussi (@johnzanussi)","hash":"86bad1c38b7cf79de863dbcb0867209d","modelClass":""},"paulschreiber":{"id":86306,"type":"user","userLogin":"paulschreiber","userNicename":"paulschreiber","displayName":"Paul Schreiber","firstName":"Paul","lastName":"Schreiber","url":"https:\/\/profiles.wordpress.org\/paulschreiber","urlTitle":"Posts by Paul Schreiber (@paulschreiber)","hash":"d94ab7776800ced3cd343dac45bf62eb","modelClass":""},"Chrisdc1":{"id":12319342,"type":"user","userLogin":"Chrisdc1","userNicename":"chrisdc1","displayName":"Chrisdc1","firstName":"","lastName":"","url":"https:\/\/profiles.wordpress.org\/chrisdc1","urlTitle":"Posts by Chrisdc1 (@chrisdc1)","hash":"0c8e96b989e56e8bac637f5430c000fb","modelClass":""},"stormwarning":{"id":13651791,"type":"user","userLogin":"stormwarning","userNicename":"stormwarning","displayName":"stormwarning","firstName":"stormwarning","lastName":"","url":"https:\/\/profiles.wordpress.org\/stormwarning","urlTitle":"Posts by stormwarning (@stormwarning)","hash":"a4fd3711ed59a135b9c4275a7d3ade1c","modelClass":""},"kennethjfalbous":{"id":13947288,"type":"user","userLogin":"kennethjfalbous","userNicename":"kennethjfalbous","displayName":"kennethjfalbous","firstName":"Kenneth","lastName":"John","url":"https:\/\/profiles.wordpress.org\/kennethjfalbous","urlTitle":"Posts by kennethjfalbous (@kennethjfalbous)","hash":"c08118f4460be863371b95a6b18e8904","modelClass":""},"kpdesign":{"id":652470,"type":"user","userLogin":"kpdesign","userNicename":"kpdesign","displayName":"Kim Parsell","firstName":"Kim","lastName":"Parsell","url":"https:\/\/profiles.wordpress.org\/kpdesign","urlTitle":"Posts by Kim Parsell (@kpdesign)","hash":"c2f7f079b6d2610c97715b55f12b5ba5","modelClass":""},"gmgartner":{"id":188995,"type":"user","userLogin":"gmgartner","userNicename":"gmgartner","displayName":"gmgartner","firstName":"Jerry","lastName":"Gartner","url":"https:\/\/profiles.wordpress.org\/gmgartner","urlTitle":"Posts by gmgartner (@gmgartner)","hash":"1d02742485d7239cd4270f866a8468a6","modelClass":""},"pingram3541":{"id":1680483,"type":"user","userLogin":"pingram3541","userNicename":"pingram3541","displayName":"Philip Ingram","firstName":"Philip","lastName":"Ingram","url":"https:\/\/profiles.wordpress.org\/pingram3541","urlTitle":"Posts by Philip Ingram (@pingram3541)","hash":"6d02c23bc5b49f6fd00a42ba4a3aeb7c","modelClass":""},"webmaster4business":{"id":12496265,"type":"user","userLogin":"webmaster4business","userNicename":"webmaster4business","displayName":"webmaster4business","firstName":"","lastName":"","url":"https:\/\/profiles.wordpress.org\/webmaster4business","urlTitle":"Posts by webmaster4business (@webmaster4business)","hash":"797569dfcf0b12e633dc0db2b0efdcf6","modelClass":""},"aurovrata":{"id":13190743,"type":"user","userLogin":"aurovrata","userNicename":"aurovrata","displayName":"Aurovrata Venet","firstName":"Aurovrata","lastName":"Venet","url":"https:\/\/profiles.wordpress.org\/aurovrata","urlTitle":"Posts by Aurovrata Venet (@aurovrata)","hash":"ecd4288fedcf565267a5807b7d604e57","modelClass":""},"reggieyancey":{"id":15694314,"type":"user","userLogin":"reggieyancey","userNicename":"reggieyancey","displayName":"reggieyancey","firstName":"","lastName":"","url":"https:\/\/profiles.wordpress.org\/reggieyancey","urlTitle":"Posts by reggieyancey (@reggieyancey)","hash":"0d45bd379e8e3ed2636d2525fa57053b","modelClass":""},"karmatosed":{"id":118378,"type":"user","userLogin":"karmatosed","userNicename":"karmatosed","displayName":"Tammie Lister","firstName":"Tammie","lastName":"Lister","url":"https:\/\/profiles.wordpress.org\/karmatosed","urlTitle":"Posts by Tammie Lister (@karmatosed)","hash":"ca7d4273a689cdbf524d8332771bb1ca","modelClass":""},"gugaalves":{"id":6896930,"type":"user","userLogin":"gugaalves","userNicename":"gugaalves","displayName":"Guga Alves","firstName":"Guga","lastName":"Alves","url":"https:\/\/profiles.wordpress.org\/gugaalves","urlTitle":"Posts by Guga Alves (@gugaalves)","hash":"666de2b248361998923a343b497bd9d2","modelClass":""},"homeworker":{"id":14826716,"type":"user","userLogin":"homeworker","userNicename":"homeworker","displayName":"homeworker","firstName":"","lastName":"","url":"https:\/\/profiles.wordpress.org\/homeworker","urlTitle":"Posts by homeworker (@homeworker)","hash":"a02077c919cae0febbbf51d251a567eb","modelClass":""},"flixos90":{"id":10972453,"type":"user","userLogin":"flixos90","userNicename":"flixos90","displayName":"Felix Arntz","firstName":"Felix","lastName":"Arntz","url":"https:\/\/profiles.wordpress.org\/flixos90","urlTitle":"Posts by Felix Arntz (@flixos90)","hash":"55035b4301c3710ff0fc65d7231af18d","modelClass":""},"jbpaul17":{"id":173701,"type":"user","userLogin":"jbpaul17","userNicename":"jbpaul17","displayName":"Jeffrey Paul","firstName":"Jeffrey","lastName":"Paul","url":"https:\/\/profiles.wordpress.org\/jbpaul17","urlTitle":"Posts by Jeffrey Paul (@jbpaul17)","hash":"8ac4ec4b1f9cb342e59ed5127f050d24","modelClass":""},"adamsilverstein":{"id":10464658,"type":"user","userLogin":"adamsilverstein","userNicename":"adamsilverstein","displayName":"Adam Silverstein","firstName":"Adam","lastName":"Silverstein","url":"https:\/\/profiles.wordpress.org\/adamsilverstein","urlTitle":"Posts by Adam Silverstein (@adamsilverstein)","hash":"fddbd6c3e1c3d971aa732b9346aeb433","modelClass":""}}</script> 
  <script>
				jQuery(document).ready(function($) {
					var bootstrap = { data: [] };
					o2Data = $( '.o2-data' );
					if ( o2Data.length > 0 ) {
						o2Data.each( function() {
							// Parse the JSON that's embedded in the page and add it to the bootstrap data
							var me = $( this );
							var thread;
							try {
								thread = $.parseJSON( me.text() );
							} catch( e ) {
								thread = false;
								console.log( '$.parseJSON failure: ' + me.text() );
							}
							if ( false !== thread ) {
								_.each( thread, function( frag ) {
									bootstrap.data.push( frag );
								} );
							}
							me.remove();
						} );
					}

					// Merge o2Config into o2 itself
					o2 = $.extend( o2, o2Config );

					// Some generally-useful references
					o2.$body = $( 'body' );
					o2.$appContainer = $( o2.options.appContainer );

					// As soon as o2 loads, poll for new content to account
					// for Chrome's caching weirdness on back/tab-recovery.
					o2.$appContainer.on( 'ready.o2', function() {
						o2.Polling.poll();
					} );

					// Bootstrap o2 with any in-page content
					o2.start( bootstrap );
				});
			</script> 
  <div id="o2-dock"></div> 
  <div id="o2-flash"></div> 
  <script class="o2-notifications-data" type="application/json" style="display:none;">
		[]
		</script> 
  <script type="text/javascript">
			o2Config.options.scripts = ["jquery-core","jquery-migrate","jquery","jetpack-inline-terms-js","jetpack-suggest-ui-defaults","jetpack-xposts-js","jetpack-hashtags-js","jquery-actionstate","o2-offline","underscore","backbone","o2-models-user","o2-collections-users","o2-events","o2-keyboard","o2-models-page-meta","o2-moment","wp-util","wp-backbone","o2-views-app-footer","utils","o2-views-app-header","o2-highlight","o2-models-base","o2-models-comment","o2-jquery-hotkeys","jquery.autoresize","o2-plugin-caret","o2-raw-to-filtered","o2-editor","o2-views-comment","o2-models-post","o2-views-new-post","o2-compare-times","o2-collections-comments","o2-views-post","o2-collections-posts","jquery-color","o2-timestamp","o2-notifications-models-notification","o2-notifications-collections-notifications","o2-notifications-views-notification","o2-notifications-views-dock-items","o2-notifications-views-dock-count","o2-notifications-views-dock","o2-notifications-views-flash","o2-notifications","o2-views-no-posts-post","o2-views-posts","o2-app","o2-highlight-on-inview","o2-is-valid-email","o2-models-search-meta","o2-page-visibility","o2-plugin-placeholder","o2-polling","o2-query","o2-template","o2-views-search-form","o2-cocktail","o2-extend-recent-comments-collections-posts","jquery-ui-core","jquery-ui-widget","jquery-ui-mouse","jquery-ui-sortable","o2-extend-checklists-views-common","o2-enquire","o2-notifications-views-flash-items","o2-extend-sticky-posts-models-extend-post","o2-extend-sticky-posts-collections-extend-posts","o2-extend-sticky-posts-views-extend-post","o2-extend-sticky-posts-views-extend-posts","wporg-handbook","o2-filter-widget","o2-live-comments-models-item","o2-live-comments-collections-items","o2-live-comments-views-item","o2-live-comments-views-items","o2-live-comments","jquery.sonar","spin","jquery.spin","p2-hovercards","o2-extend-post-actions","o2-extend-comment-actions-views-comment","o2-extend-post-actions-views-post","wporg-breathe-chapters"];
			o2Config.options.styles = ["jetpack-inline-terms-css","dashicons","admin-bar","wp-blocks","o2-extend-checklists-styles","genericons","o2-plugin-styles","o2-notifications","o2-extend-sticky-posts","make-core-trac","breathe-serif","wporg-handbook-css","o2-filter-widget-styles","o2-live-comments-styles","jetpack-subscriptions","p2-hovercards","post-actions-styles","p2-breathe","wporg-breathe","jetpack_css"];
		</script> 
  <div style="display:none"> 
  </div> 
  <script type="text/javascript">
		var el = document.getElementById( 'make-welcome-hide' );
		if ( el ) {
			el.addEventListener( 'click', function( e ) {
				document.cookie = el.dataset.cookie + '=' + el.dataset.hash +
					'; expires=Fri, 31 Dec 9999 23:59:59 GMT' +
					'; domain=make.wordpress.org' +
					'; path=/core/';
				jQuery( '.make-welcome' ).slideUp();
			} );
		}
	</script> 
  <noscript class="js-disabled-notice">
    Please enable JavaScript to view this page properly. 
  </noscript> 
  <script>
			// <![CDATA[
			var jetpackMentionsData = [{"ID":140668,"user_login":"aaroncampbell","user_nicename":"aaroncampbell","display_name":"Aaron D. Campbell","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/f27b79eb04eb414c4c1fc98375fe7404?s=96&d=mm&r=g"},{"ID":2738372,"user_login":"jorbin","user_nicename":"jorbin","display_name":"Aaron Jorbin","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/b3e2b94eb305bf95a1bee11bc7705fb7?s=96&d=mm&r=g"},{"ID":10464658,"user_login":"adamsilverstein","user_nicename":"adamsilverstein","display_name":"Adam Silverstein","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/fddbd6c3e1c3d971aa732b9346aeb433?s=96&d=mm&r=g"},{"ID":14387856,"user_login":"schlessera","user_nicename":"schlessera","display_name":"Alain Schlesser","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/a686099e5d041a8825ef01d71513c2db?s=96&d=mm&r=g"},{"ID":8894114,"user_login":"afercia","user_nicename":"afercia","display_name":"Andrea Fercia","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/074af62ea5ff218b6a6eeab89104f616?s=96&d=mm&r=g"},{"ID":5286302,"user_login":"nacin","user_nicename":"nacin","display_name":"Andrew Nacin","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/01cfe9feaafb068590891bbd1f6a7f5a?s=96&d=mm&r=g"},{"ID":161792,"user_login":"azaozz","user_nicename":"azaozz","display_name":"Andrew Ozz","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/4e84843ebff0918d72ade21c6ee7b1e4?s=96&d=mm&r=g"},{"ID":13899375,"user_login":"antpb","user_nicename":"antpb","display_name":"Anthony Burchell","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/453fbc8dfd108125f351d60fd2c1afe7?s=96&d=mm&r=g"},{"ID":2881701,"user_login":"boonebgorges","user_nicename":"boonebgorges","display_name":"Boone Gorges","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/9cf7c4541a582729a5fc7ae484786c0c?s=96&d=mm&r=g"},{"ID":7879583,"user_login":"kraftbj","user_nicename":"kraftbj","display_name":"Brandon Kraft","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/6e238edcb0664c975ccb9e8e80abb307?s=96&d=mm&r=g"},{"ID":27276,"user_login":"cbutlerjr","user_nicename":"cbutlerjr","display_name":"Chad Butler","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/8e5dcc94f24f2365eec6d7fc843d0d36?s=96&d=mm&r=g"},{"ID":14577463,"user_login":"danieltj","user_nicename":"danieltj","display_name":"Daniel James","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/3511364f7c328b3ac6ed3d4f50154a83?s=96&d=mm&r=g"},{"ID":7561117,"user_login":"davidakennedy","user_nicename":"davidakennedy","display_name":"David A. Kennedy","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/219860d3117df777c48f475d25e24fdd?s=96&d=mm&r=g"},{"ID":14193470,"user_login":"dshanske","user_nicename":"dshanske","display_name":"David Shanske","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/681eba02e72ba1d894097034a8110e61?s=96&d=mm&r=g"},{"ID":370384,"user_login":"valendesigns","user_nicename":"valendesigns","display_name":"Derek Herman","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/ca0dc28865ede5a2b2a9e22971b87993?s=96&d=mm&r=g"},{"ID":148148,"user_login":"dd32","user_nicename":"dd32","display_name":"Dion Hulse","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/4af2825655b46fb1206b08d9041d8e3e?s=96&d=mm&r=g"},{"ID":1669362,"user_login":"ocean90","user_nicename":"ocean90","display_name":"Dominik Schilling (ocean90)","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/616b56a9c5898a427304425af0966c07?s=96&d=mm&r=g"},{"ID":5851951,"user_login":"DrewAPicture","user_nicename":"drewapicture","display_name":"Drew Jaynes","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/95c934fa2c3362794bf62ff8c59ada08?s=96&d=mm&r=g"},{"ID":11655703,"user_login":"iseulde","user_nicename":"iseulde","display_name":"Ella Van?Dorpe","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/1a847a68778b8344b6aa106a8861984f?s=96&d=mm&r=g"},{"ID":7875507,"user_login":"ericlewis","user_nicename":"ericlewis","display_name":"Eric Andrew Lewis","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/7e524cf1c5e8d108658899a497dc4bd4?s=96&d=mm&r=g"},{"ID":10972453,"user_login":"flixos90","user_nicename":"flixos90","display_name":"Felix Arntz","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/55035b4301c3710ff0fc65d7231af18d?s=96&d=mm&r=g"},{"ID":13836755,"user_login":"voldemortensen","user_nicename":"voldemortensen","display_name":"Garth Mortensen","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/a1313994b9fcdb6175b6abaaf479fae9?s=96&d=mm&r=g"},{"ID":2004385,"user_login":"pento","user_nicename":"pento","display_name":"Gary Pendergast","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/1ad9e5c98d81c6815a65dab5b6e1f669?s=96&d=mm&r=g"},{"ID":4198497,"user_login":"helen","user_nicename":"helen","display_name":"Helen Hou-Sandi","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/6506162ada6b700b151ad8a187f65842?s=96&d=mm&r=g"},{"ID":33690,"user_login":"iandunn","user_nicename":"iandunn","display_name":"Ian Dunn","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/d0e2ea89fb62350b1304c62eeeaf24b6?s=96&d=mm&r=g"},{"ID":231381,"user_login":"iandstewart","user_nicename":"iandstewart","display_name":"Ian Stewart","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/384c0fcf18524b1f0e628c6924f0e2af?s=96&d=mm&r=g"},{"ID":14329217,"user_login":"jnylen0","user_nicename":"jnylen0","display_name":"James Nylen","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/0c4d46844039ba935f69208615e9010c?s=96&d=mm&r=g"},{"ID":4238663,"user_login":"jeremyfelt","user_nicename":"jeremyfelt","display_name":"Jeremy Felt","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/d1759b1c669981b7c52ec9a97d19e6bd?s=96&d=mm&r=g"},{"ID":100663,"user_login":"joehoyle","user_nicename":"joehoyle","display_name":"Joe Hoyle","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/0ceb885cc3d306af93c9764b2936d618?s=96&d=mm&r=g"},{"ID":381024,"user_login":"joemcgill","user_nicename":"joemcgill","display_name":"Joe McGill","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/7cef1c9108207ec24db7a40f142db676?s=96&d=mm&r=g"},{"ID":6267,"user_login":"Joen","user_nicename":"joen","display_name":"Joen Asmussen","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/7fda1da9c34e978d5990afd7f58ca0f4?s=96&d=mm&r=g"},{"ID":42547,"user_login":"johnbillion","user_nicename":"johnbillion","display_name":"John Blackbourn","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/23e12888dcd87d07434b7621bc164958?s=96&d=mm&r=g"},{"ID":395440,"user_login":"johnjamesjacoby","user_nicename":"johnjamesjacoby","display_name":"John James Jacoby","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/7a2644fb53ae2f7bfd7143b504af396c?s=96&d=mm&r=g"},{"ID":7715176,"user_login":"Kenshino","user_nicename":"kenshino","display_name":"Jon (Kenshino)","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/1f6b851a12600a18a0766baaad0d55f7?s=96&d=mm&r=g"},{"ID":2670738,"user_login":"spacedmonkey","user_nicename":"spacedmonkey","display_name":"Jonny Harris","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/061dae59ebf801552726985eb808306e?s=96&d=mm&r=g"},{"ID":5896197,"user_login":"kadamwhite","user_nicename":"kadamwhite","display_name":"K. Adam White","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/6cd1cf6de05952505a165425efaf06b4?s=96&d=mm&r=g"},{"ID":1217817,"user_login":"kovshenin","user_nicename":"kovshenin","display_name":"Konstantin Kovshenin","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/8585b20b69e8ff4b0ba737accfdbb31b?s=96&d=mm&r=g"},{"ID":8772187,"user_login":"obenland","user_nicename":"obenland","display_name":"Konstantin Obenland","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/2370ea5912750f4cb0f3c51ae1cbca55?s=96&d=mm&r=g"},{"ID":2097165,"user_login":"lancewillett","user_nicename":"lancewillett","display_name":"Lance Willett","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/47976847383b324bd35e228a91eb1a0f?s=96&d=mm&r=g"},{"ID":255134,"user_login":"Asif2BD","user_nicename":"asif2bd","display_name":"M Asif Rahman","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/1852249120f11f0a4a73590292ab27e5?s=96&d=mm&r=g"},{"ID":2545,"user_login":"markjaquith","user_nicename":"markjaquith","display_name":"Mark Jaquith","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/31c9246c917b5a53e34ae693b37840ac?s=96&d=mm&r=g"},{"ID":5055596,"user_login":"markoheijnen","user_nicename":"markoheijnen","display_name":"Marko Heijnen","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/3c0d20db0e8911bc94be89c0cd9c0399?s=96&d=mm&r=g"},{"ID":887738,"user_login":"matveb","user_nicename":"matveb","display_name":"Matias Ventura","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/3f8389957d0c59bb0bd5433e86b53a19?s=96&d=mm&r=g"},{"ID":14114115,"user_login":"mattmiklic","user_nicename":"mattmiklic","display_name":"Matt Miklic","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/78c17142720e599ad7919c541124749e?s=96&d=mm&r=g"},{"ID":1,"user_login":"matt","user_nicename":"matt","display_name":"Matt Mullenweg","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/767fc9c115a1b989744c755db47feb60?s=96&d=mm&r=g"},{"ID":10224560,"user_login":"melchoyce","user_nicename":"melchoyce","display_name":"Mel Choyce","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/ed4f856405e64c1492839d2bf4913baa?s=96&d=mm&r=g"},{"ID":8376781,"user_login":"michaelarestad","user_nicename":"michael-arestad","display_name":"Michael Arestad","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/e8b4c8470f61ff15b9c98f7a1556c16b?s=96&d=mm&r=g"},{"ID":10179395,"user_login":"MikeHansenMe","user_nicename":"mikehansenme","display_name":"Mike Hansen","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/281bd45c0ee852fdd99fbcd4776b5a4d?s=96&d=mm&r=g"},{"ID":7800416,"user_login":"mikeschroder","user_nicename":"mikeschroder","display_name":"Mike Schroder","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/76424a001dc6b3ebb4faca0c567800c4?s=96&d=mm&r=g"},{"ID":9362879,"user_login":"celloexpressions","user_nicename":"celloexpressions","display_name":"Nick Halsey","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/c5fe6b97c0f4d32a41346582d4e894db?s=96&d=mm&r=g"},{"ID":12385,"user_login":"nbachiyski","user_nicename":"nbachiyski","display_name":"Nikolay Bachiyski","source":["committers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/ab1f64abf81653d5a60d78a86a26bec1?s=96&d=mm&r=g"},{"ID":368236,"user_login":"swissspidy","user_nicename":"swissspidy","display_name":"Pascal Birchler","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/609d6ee54dc13a51270cb99769535b82?s=96&d=mm&r=g"},{"ID":125013,"user_login":"pbearne","user_nicename":"pbearne","display_name":"Paul Bearne","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/bdde95beb3e845e6179cf28ac78f84b4?s=96&d=mm&r=g"},{"ID":1260288,"user_login":"peterwilsoncc","user_nicename":"peterwilsoncc","display_name":"Peter Wilson","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/1dd9fded718f9b344d48f37f9bfcb159?s=96&d=mm&r=g"},{"ID":6695565,"user_login":"rachelbaker","user_nicename":"rachelbaker","display_name":"Rachel Baker","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/634b37a53babc18a5bda19722d5b41a3?s=96&d=mm&r=g"},{"ID":112221,"user_login":"rmccue","user_nicename":"rmccue","display_name":"Ryan McCue","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/c57c8945079831fa3c19caef02e44614?s=96&d=mm&r=g"},{"ID":7543064,"user_login":"welcher","user_nicename":"welcher","display_name":"Ryan Welcher","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/4fa43ab689984fbeb7792dfa32ead017?s=96&d=mm&r=g"},{"ID":7345614,"user_login":"wonderboymusic","user_nicename":"wonderboymusic","display_name":"Scott Taylor","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/112ca15732a80bb928c52caec9d2c8dd?s=96&d=mm&r=g"},{"ID":297445,"user_login":"SergeyBiryukov","user_nicename":"sergeybiryukov","display_name":"Sergey Biryukov","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/750b7b0fcd855389264c2b1294d61bd6?s=96&d=mm&r=g"},{"ID":46383,"user_login":"netweb","user_nicename":"netweb","display_name":"Stephen Edgar","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/97e1620b501da675315ba7cfb740e80f?s=96&d=mm&r=g"},{"ID":11485831,"user_login":"stephenharris","user_nicename":"stephenharris","display_name":"Stephen Harris","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/99c40eb6a15d5177d940890784cc797d?s=96&d=mm&r=g"},{"ID":4713980,"user_login":"stevenkword","user_nicename":"stevenkword","display_name":"Steven Word","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/1fc93cd928da3e34d6adaf9e4df4b582?s=96&d=mm&r=g"},{"ID":233752,"user_login":"iamtakashi","user_nicename":"iamtakashi","display_name":"Takashi Irie","source":["maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/56bae6e12bf9305a0852753e0f557489?s=96&d=mm&r=g"},{"ID":118378,"user_login":"karmatosed","user_nicename":"karmatosed","display_name":"Tammie Lister","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/ca7d4273a689cdbf524d8332771bb1ca?s=96&d=mm&r=g"},{"ID":186678,"user_login":"westonruter","user_nicename":"westonruter","display_name":"Weston Ruter","source":["committers","maintainers"],"image_URL":"https:\/\/secure.gravatar.com\/avatar\/bb16e7904f2f335b6c9f524cc533d2d2?s=96&d=mm&r=g"}];
			// ]]>
		</script>
  <script>
			// <![CDATA[
			jQuery( document ).on( 'mentionsData.jetpack', function( e, mentions ) {
				jQuery( 'textarea#comment' ).mentions( mentions.data );
			});
			// ]]>
		</script>
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shCore.js?ver=3.0.9b"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/scripts/shBrushJScript.js?ver=3.0.9b"></script> 
  <script type="text/javascript">
	(function(){
		var corecss = document.createElement('link');
		var themecss = document.createElement('link');
		var corecssurl = "https://make.wordpress.org/core/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shCore.css?ver=3.0.9b";
		if ( corecss.setAttribute ) {
				corecss.setAttribute( "rel", "stylesheet" );
				corecss.setAttribute( "type", "text/css" );
				corecss.setAttribute( "href", corecssurl );
		} else {
				corecss.rel = "stylesheet";
				corecss.href = corecssurl;
		}
		document.getElementsByTagName("head")[0].insertBefore( corecss, document.getElementById("syntaxhighlighteranchor") );
		var themecssurl = "https://make.wordpress.org/core/wp-content/plugins/syntaxhighlighter/syntaxhighlighter3/styles/shThemeDefault.css?ver=3.0.9b";
		if ( themecss.setAttribute ) {
				themecss.setAttribute( "rel", "stylesheet" );
				themecss.setAttribute( "type", "text/css" );
				themecss.setAttribute( "href", themecssurl );
		} else {
				themecss.rel = "stylesheet";
				themecss.href = themecssurl;
		}
		//document.getElementById("syntaxhighlighteranchor").appendChild(themecss);
		document.getElementsByTagName("head")[0].insertBefore( themecss, document.getElementById("syntaxhighlighteranchor") );
	})();
	SyntaxHighlighter.config.strings.expandSource = '+ expand source';
	SyntaxHighlighter.config.strings.help = '?';
	SyntaxHighlighter.config.strings.alert = 'SyntaxHighlighter\n\n';
	SyntaxHighlighter.config.strings.noBrush = 'Can\'t find brush for: ';
	SyntaxHighlighter.config.strings.brushNotHtmlScript = 'Brush wasn\'t configured for html-script option: ';
	SyntaxHighlighter.defaults['auto-links'] = false;
	SyntaxHighlighter.defaults['pad-line-numbers'] = false;
	SyntaxHighlighter.defaults['toolbar'] = false;
	SyntaxHighlighter.all();
</script> 
  <link rel="stylesheet" id="wpcom-notes-admin-bar-css" href="https://s0.wp.com/wp-content/mu-plugins/notes/admin-bar-v2.css?ver=5.3-201740" type="text/css" media="all"> 
  <link rel="stylesheet" id="noticons-css" href="https://s0.wp.com/i/noticons/noticons.css?ver=5.3-201740" type="text/css" media="all"> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/admin-bar.min.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://s0.wp.com/wp-content/js/devicepx-jetpack.js?ver=201740"></script> 
  <script type="text/javascript" src="https://secure.gravatar.com/js/gprofiles.js?ver=2017Octaa"></script> 
  <script type="text/javascript">
/* <![CDATA[ */
var WPGroHo = {"my_hash":""};
/* ]]> */
</script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/jetpack/modules/wpgroho.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/themes/p2-breathe/js/skip-link-focus-fix.js?ver=20130115"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/themes/p2-breathe/js/mobile-helper.js?ver=20130513"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/themes/p2-breathe/js/breathe.js?ver=20130513"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-includes/js/wp-embed.min.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/mu-plugins/inline-terms/ui/mentions.min.js?ver=20161015"></script> 
  <script type="text/javascript" src="https://make.wordpress.org/core/wp-content/plugins/o2/modules/suggestions/js/suggestions.js?ver=4.9-alpha-41683"></script> 
  <script type="text/javascript" src="https://s1.wp.com/wp-content/js/mustache.js?ver=5.3-201740"></script> 
  <script type="text/javascript" src="https://s1.wp.com/wp-content/mu-plugins/notes/notes-common-v2.js?ver=5.3-201740"></script> 
  <script type="text/javascript" src="https://s0.wp.com/wp-content/mu-plugins/notes/admin-bar-v2.js?ver=5.3-201740"></script> 
  <script type="text/javascript" src="https://stats.wp.com/e-201740.js" async defer></script> 
  <script type="text/javascript">
	_stq = window._stq || [];
	_stq.push([ 'view', {v:'ext',j:'1:5.3',blog:'38254163',post:'5078',tz:'0',srv:'make.wordpress.org'} ]);
	_stq.push([ 'clickTrackerInit', '38254163', '5078' ]);
</script> 
  <div id="wpadminbar" class="nojq nojs"> 
   <a class="screen-reader-shortcut" href="#wp-toolbar" tabindex="1">Skip to toolbar</a> 
   <div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Toolbar" tabindex="0"> 
    <ul id="wp-admin-bar-root-default" class="ab-top-menu"> 
     <li id="wp-admin-bar-wp-logo" class="menupop"><a class="ab-item" aria-haspopup="true" href="https://make.wordpress.org/wp-admin/user/about.php"><span class="ab-icon"></span><span class="screen-reader-text">About WordPress</span></a>
      <div class="ab-sub-wrapper">
       <ul id="wp-admin-bar-wp-logo-default" class="ab-submenu"> 
        <li id="wp-admin-bar-about"><a class="ab-item" href="https://make.wordpress.org/wp-admin/user/about.php">About WordPress</a> </li>
       </ul>
       <ul id="wp-admin-bar-wp-logo-external" class="ab-sub-secondary ab-submenu"> 
        <li id="wp-admin-bar-wporg"><a class="ab-item" href="https://wordpress.org/">WordPress.org</a> </li> 
        <li id="wp-admin-bar-documentation"><a class="ab-item" href="https://codex.wordpress.org/">Documentation</a> </li> 
        <li id="wp-admin-bar-support-forums"><a class="ab-item" href="https://wordpress.org/support/">Support Forums</a> </li> 
        <li id="wp-admin-bar-feedback"><a class="ab-item" href="https://wordpress.org/support/forum/requests-and-feedback">Feedback</a> </li>
       </ul>
      </div> </li>
    </ul>
    <ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu"> 
     <li id="wp-admin-bar-search" class="admin-bar-search">
      <div class="ab-item ab-empty-item" tabindex="-1">
       <form action="https://make.wordpress.org/core/" method="get" id="adminbarsearch">
        <input class="adminbar-input" name="s" id="adminbar-search" type="text" value="" maxlength="150">
        <label for="adminbar-search" class="screen-reader-text">Search</label>
        <input type="submit" class="adminbar-button" value="Search">
       </form>
      </div> </li> 
     <li id="wp-admin-bar-log-in"><a class="ab-item" href="https://login.wordpress.org/?redirect_to=https%3A%2F%2Fmake.wordpress.org%2Fcore%2F">Log In</a> </li> 
     <li id="wp-admin-bar-register"><a class="ab-item" href="https://login.wordpress.org/register">Register</a> </li> 
     <li id="wp-admin-bar-notes" class="menupop">
      <div class="ab-item ab-empty-item">
       <span id="wpnt-notes-unread-count" class="wpnt-loading wpn-read"> <span class="noticon noticon-notification"></span> </span>
      </div>
      <div id="wpnt-notes-panel2" style="display:none" lang="en" dir="ltr">
       <div class="wpnt-notes-panel-header">
        <span class="wpnt-notes-header">Notifications</span>
        <span class="wpnt-notes-panel-link"></span>
       </div>
      </div> </li>
    </ul> 
   </div> 
  </div>   
 </body>
</html>